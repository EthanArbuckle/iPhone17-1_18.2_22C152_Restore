id __slideTransitionFadeMaskImage(int a1)
{
  uint64_t v2;
  void *v3;
  uint64_t vars8;

  if (qword_1EB25C3A0 == -1)
  {
    if (a1) {
      goto LABEL_5;
    }
  }
  else
  {
    dispatch_once(&qword_1EB25C3A0, &__block_literal_global_321);
    if (a1) {
      goto LABEL_5;
    }
  }
  if (qword_1EB25C3A8 != -1) {
    dispatch_once(&qword_1EB25C3A8, &__block_literal_global_327);
  }
LABEL_5:
  v2 = 5;
  if (a1) {
    v2 = 4;
  }
  v3 = (void *)_MergedGlobals_29_0[v2];
  return v3;
}

BOOL _dontCrossfadeBarButtonItems(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 count] == 1 && objc_msgSend(v4, "count") == 1)
  {
    v5 = [v3 lastObject];
    v6 = [v4 lastObject];
    int v7 = [v5 isSystemItem];
    if (v7 != [v6 isSystemItem]) {
      goto LABEL_9;
    }
    if ([v5 isSystemItem])
    {
      uint64_t v8 = [v5 systemItem];
      if (v8 == [v6 systemItem])
      {
        BOOL v9 = 1;
LABEL_10:

        goto LABEL_11;
      }
    }
    if ([v5 isSystemItem])
    {
LABEL_9:
      BOOL v9 = 0;
      goto LABEL_10;
    }
    v11 = [v5 title];
    if (![v11 length]) {
      goto LABEL_17;
    }
    v12 = [v5 title];
    v13 = [v6 title];
    if ([v12 isEqualToString:v13])
    {
      v14 = [v5 view];
      [v14 frame];
      double v16 = v15;
      double v18 = v17;
      v19 = [v6 view];
      [v19 frame];
      double v21 = v20;
      double v23 = v22;

      BOOL v9 = 0;
      if (v16 != v21 || v18 != v23) {
        goto LABEL_10;
      }
      v11 = objc_msgSend(v5, "backgroundImageForState:style:barMetrics:", 0, objc_msgSend(v5, "style"), 0);
      if (v11)
      {
LABEL_17:
        BOOL v9 = 0;
LABEL_20:

        goto LABEL_10;
      }
      v12 = objc_msgSend(v6, "backgroundImageForState:style:barMetrics:", 0, objc_msgSend(v6, "style"), 0);
      BOOL v9 = v12 == 0;
    }
    else
    {

      BOOL v9 = 0;
    }

    goto LABEL_20;
  }
  BOOL v9 = 0;
LABEL_11:

  return v9;
}

double _hitAreaRightEdge(void *a1, void *a2, double a3)
{
  id v5 = a2;
  [a1 frame];
  double width = v9.size.width;
  double MaxX = CGRectGetMaxX(v9);
  if (v5)
  {
    [v5 frame];
    a3 = (MaxX + CGRectGetMinX(v10)) * 0.5;
  }

  return fmin(MaxX + fmin(width * 0.5, 20.0), a3);
}

double _hitAreaLeftEdge(void *a1, void *a2, double a3)
{
  id v5 = a1;
  [a2 frame];
  double width = v9.size.width;
  double MinX = CGRectGetMinX(v9);
  if (v5)
  {
    [v5 frame];
    a3 = (MinX + CGRectGetMaxX(v10)) * 0.5;
  }

  return fmax(a3, MinX - fmin(width * 0.5, 20.0));
}

BOOL _UIPointInsideNavigationBarTouchExtremaForBackButton(void *a1, int a2, double a3, CGFloat a4, double a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  double v15 = _UINavigationBarTouchExtremaForBackButtonView(a1, a3);
  if (!a2) {
    return a4 <= v15;
  }
  v17.origin.x = a6;
  v17.origin.y = a7;
  v17.size.double width = a8;
  v17.size.height = a9;
  return a4 >= CGRectGetMaxX(v17) - v15;
}

double _UINavigationBarTouchExtremaForBackButtonView(void *a1, double a2)
{
  id v3 = a1;
  [v3 frame];
  double v5 = a2 + a2 + v4;
  v6 = (void *)UIApp;
  int v7 = [v3 window];

  uint64_t v8 = [v6 _safeInterfaceOrientationForWindowIfExists:v7];
  double v9 = 100.0;
  if ((unint64_t)(v8 - 3) < 2) {
    double v9 = 75.0;
  }
  double v10 = fmax(v5, v9);

  _UIControlMostlyInsideEdgeInsets();
  return v10;
}

void ____slideTransitionFadeMaskImage_block_invoke()
{
  uint64_t v0 = +[UIImage kitImageNamed:@"UINavigationBarTitleTransitionMask"];
  v1 = (void *)qword_1EB25C390;
  qword_1EB25C390 = v0;
}

void ____slideTransitionFadeMaskImage_block_invoke_2()
{
  [(id)qword_1EB25C390 size];
  double v1 = v0;
  double v3 = v2;
  double v4 = [UIGraphicsImageRenderer alloc];
  double v5 = [(id)qword_1EB25C390 imageRendererFormat];
  v6 = -[UIGraphicsImageRenderer initWithSize:format:](v4, "initWithSize:format:", v5, v1, v3);

  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = ____slideTransitionFadeMaskImage_block_invoke_3;
  v9[3] = &__block_descriptor_48_e40_v16__0__UIGraphicsImageRendererContext_8l;
  *(double *)&v9[4] = v1;
  *(double *)&v9[5] = v3;
  uint64_t v7 = [(UIGraphicsImageRenderer *)v6 imageWithActions:v9];
  uint64_t v8 = (void *)qword_1EB25C398;
  qword_1EB25C398 = v7;
}

uint64_t ____slideTransitionFadeMaskImage_block_invoke_3(uint64_t a1, void *a2)
{
  double v3 = (CGContext *)[a2 CGContext];
  CGContextTranslateCTM(v3, *(CGFloat *)(a1 + 32), 0.0);
  CGContextScaleCTM(v3, -1.0, 1.0);
  double v4 = (void *)qword_1EB25C390;
  double v5 = *MEMORY[0x1E4F1DAD8];
  double v6 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
  return objc_msgSend(v4, "drawAtPoint:blendMode:alpha:", 17, v5, v6, 1.0);
}

void sub_185C28DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185C29190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_185C2D8E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _clippingMaskForFrame(void *a1, void *a2, void *a3, void *a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  id v15 = a1;
  id v16 = a2;
  id v17 = objc_alloc_init(MEMORY[0x1E4F39BE8]);
  v40.origin.x = a5;
  v40.origin.y = a6;
  v40.size.double width = a7;
  v40.size.height = a8;
  double Width = CGRectGetWidth(v40);
  v41.origin.x = a5;
  v41.origin.y = a6;
  v41.size.double width = a7;
  v41.size.height = a8;
  double Height = CGRectGetHeight(v41);
  objc_msgSend(v17, "setBounds:", 0.0, 0.0, Width, Height);
  double v20 = *MEMORY[0x1E4F1DAD8];
  double v21 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
  objc_msgSend(v17, "setAnchorPoint:", *MEMORY[0x1E4F1DAD8], v21);
  objc_msgSend(v17, "setPosition:", a5, a6);
  [v15 size];
  double v23 = v22;
  [v16 size];
  double v25 = v24;
  if (v15)
  {
    id v26 = objc_alloc_init(MEMORY[0x1E4F39BE8]);
    id v27 = v15;
    objc_msgSend(v26, "setContents:", objc_msgSend(v27, "CGImage"));
    [v27 size];
    _positionMaskWithSizeInBounds(v26, 0, v28, v29, 0.0, 0.0, Width, Height);
    objc_msgSend(v26, "setAnchorPoint:", v20, v21);
    [v27 scale];
    objc_msgSend(v26, "setContentsScale:");
    if (a3) {
      *a3 = v26;
    }
    [v17 addSublayer:v26];
  }
  id v30 = objc_alloc_init(MEMORY[0x1E4F39BE8]);
  id v31 = +[UIColor redColor];
  objc_msgSend(v30, "setBackgroundColor:", objc_msgSend(v31, "CGColor"));

  v42.origin.x = 0.0;
  v42.origin.y = 0.0;
  v42.size.double width = Width;
  v42.size.height = Height;
  double v32 = fmax(CGRectGetWidth(v42) - v23 - v25, 0.0);
  v43.origin.x = 0.0;
  v43.origin.y = 0.0;
  v43.size.double width = Width;
  v43.size.height = Height;
  objc_msgSend(v30, "setBounds:", 0.0, 0.0, v32, CGRectGetHeight(v43));
  objc_msgSend(v30, "setAnchorPoint:", v20, v21);
  v44.origin.x = 0.0;
  v44.origin.y = 0.0;
  v44.size.double width = Width;
  v44.size.height = Height;
  double v33 = v23 + CGRectGetMinX(v44);
  v45.origin.x = 0.0;
  v45.origin.y = 0.0;
  v45.size.double width = Width;
  v45.size.height = Height;
  objc_msgSend(v30, "setPosition:", v33, CGRectGetMinY(v45));
  if (a4) {
    *a4 = v30;
  }
  [v17 addSublayer:v30];
  if (v16)
  {
    id v34 = objc_alloc_init(MEMORY[0x1E4F39BE8]);
    id v35 = v16;
    objc_msgSend(v34, "setContents:", objc_msgSend(v35, "CGImage"));
    [v35 size];
    _positionMaskWithSizeInBounds(v34, 1, v36, v37, 0.0, 0.0, Width, Height);
    objc_msgSend(v34, "setAnchorPoint:", v20, v21);
    [v35 scale];
    objc_msgSend(v34, "setContentsScale:");
    [v17 addSublayer:v34];
    if (a3) {
      *a3 = v34;
    }
  }
  return v17;
}

void _positionMaskWithSizeInBounds(void *a1, int a2, double a3, CGFloat Height, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  id v17 = a1;
  if (fabs(Height + -1.0) < 2.22044605e-16)
  {
    v19.origin.x = a5;
    v19.origin.y = a6;
    v19.size.double width = a7;
    v19.size.height = a8;
    double Height = CGRectGetHeight(v19);
  }
  double v15 = 0.0;
  objc_msgSend(v17, "setBounds:", 0.0, 0.0, a3, Height);
  if (a2)
  {
    v20.origin.x = a5;
    v20.origin.y = a6;
    v20.size.double width = a7;
    v20.size.height = a8;
    double v15 = CGRectGetMaxX(v20) - a3;
  }
  v21.origin.x = a5;
  v21.origin.y = a6;
  v21.size.double width = a7;
  v21.size.height = a8;
  double MinY = CGRectGetMinY(v21);
  v22.origin.x = a5;
  v22.origin.y = a6;
  v22.size.double width = a7;
  v22.size.height = a8;
  objc_msgSend(v17, "setPosition:", v15, MinY + (CGRectGetHeight(v22) - Height) * 0.5);
}

id _slideTransitionFadeMaskImage(int a1)
{
  if (qword_1EB25F218 == -1)
  {
    if (a1) {
      goto LABEL_5;
    }
  }
  else
  {
    dispatch_once(&qword_1EB25F218, &__block_literal_global_61);
    if (a1) {
      goto LABEL_5;
    }
  }
  if (qword_1EB25F220 != -1) {
    dispatch_once(&qword_1EB25F220, &__block_literal_global_6_0);
  }
LABEL_5:
  double v2 = &_MergedGlobals_965;
  if (!a1) {
    double v2 = &qword_1EB25F210;
  }
  double v3 = (void *)*v2;
  return v3;
}

void ___slideTransitionFadeMaskImage_block_invoke()
{
  uint64_t v0 = +[UIImage kitImageNamed:@"UINavigationBarTitleTransitionMask"];
  double v1 = (void *)_MergedGlobals_965;
  _MergedGlobals_965 = v0;
}

void ___slideTransitionFadeMaskImage_block_invoke_2()
{
  [(id)_MergedGlobals_965 size];
  double v1 = v0;
  double v3 = v2;
  double v4 = [UIGraphicsImageRenderer alloc];
  double v5 = [(id)_MergedGlobals_965 imageRendererFormat];
  double v6 = -[UIGraphicsImageRenderer initWithSize:format:](v4, "initWithSize:format:", v5, v1, v3);

  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = ___slideTransitionFadeMaskImage_block_invoke_3;
  v9[3] = &__block_descriptor_48_e40_v16__0__UIGraphicsImageRendererContext_8l;
  *(double *)&v9[4] = v1;
  *(double *)&v9[5] = v3;
  uint64_t v7 = [(UIGraphicsImageRenderer *)v6 imageWithActions:v9];
  uint64_t v8 = (void *)qword_1EB25F210;
  qword_1EB25F210 = v7;
}

uint64_t ___slideTransitionFadeMaskImage_block_invoke_3(uint64_t a1, void *a2)
{
  double v3 = (CGContext *)[a2 CGContext];
  CGContextTranslateCTM(v3, *(CGFloat *)(a1 + 32), 0.0);
  CGContextScaleCTM(v3, -1.0, 1.0);
  double v4 = (void *)_MergedGlobals_965;
  double v5 = *MEMORY[0x1E4F1DAD8];
  double v6 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
  return objc_msgSend(v4, "drawAtPoint:blendMode:alpha:", 17, v5, v6, 1.0);
}

__CFString *StringForAlignment(unint64_t a1)
{
  if (a1 >= 4)
  {
    objc_msgSend(NSString, "stringWithFormat:", @"Unknown(%li)", a1);
    double v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    double v1 = off_1E52DE590[a1];
  }
  return v1;
}

__CFString *StringForContentSize(unint64_t a1)
{
  if (a1 >= 4)
  {
    objc_msgSend(NSString, "stringWithFormat:", @"Unknown(%li)", a1);
    double v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    double v1 = off_1E52DE5B0[a1];
  }
  return v1;
}

void sub_185C313DC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void __addItemsFromBarForMode(void *a1, void *a2, uint64_t a3)
{
  id v9 = a1;
  id v5 = a2;
  double v6 = v5;
  if (v5)
  {
    if (a3 == 2)
    {
      uint64_t v7 = [v5 elementsRepresentingOrderedGroups];
    }
    else
    {
      if (a3 != 1) {
        goto LABEL_7;
      }
      uint64_t v7 = [v5 elementsForOverflowMenu];
    }
    uint64_t v8 = (void *)v7;
    [v9 addObjectsFromArray:v7];
  }
LABEL_7:
}

void sub_185C31ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void _UINavigationBarExcessiveLineHeightOutsetsForFontInView(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v2 = a2;
    CTFontGetLanguageAwareOutsets();
    UICeilToViewScale(v2);
    UICeilToViewScale(v2);
    UICeilToViewScale(v2);
    UICeilToViewScale(v2);
  }
}

double _distanceFromLargeTitleToBackButton(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  uint64_t v7 = [a1 titleLabel];
  uint64_t v8 = [v7 superview];
  [v7 center];
  objc_msgSend(v8, "convertPoint:toView:", v5);
  double v10 = v9;

  double v11 = _distanceFromPointToBackButton(v6, v5, 1, 0, v10);
  return v11;
}

double _titleTransitionAdjustmentFromLargeTitleToBackButton(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  double v5 = 0.0;
  if (_textDiffersBetweenLargeTitleAndBackButtonLayouts(v3, v4))
  {
    id v6 = [v4 backButton];
    uint64_t v7 = [v6 visualProvider];
    uint64_t v8 = [v7 contentView];
    double v9 = [v8 titleLabel];

    double v10 = objc_opt_new();
    double v11 = [v9 font];
    [v10 setFont:v11];

    uint64_t v12 = [v3 titleLabel];
    uint64_t v13 = [v12 text];
    [v10 setText:v13];

    [v10 sizeToFit];
    [v10 bounds];
    double Width = CGRectGetWidth(v16);
    [v9 bounds];
    double v5 = (Width - CGRectGetWidth(v17)) * 0.5;
  }
  return v5;
}

void _updateBackButtonSpacingForButton(void *a1, int a2, double a3, double a4)
{
  if (a1)
  {
    uint64_t v7 = [a1 visualProvider];
    id v11 = [v7 contentView];

    [v11 center];
    double v10 = -a3;
    if (!a2) {
      double v10 = a3;
    }
    objc_msgSend(v11, "setCenter:", v10 + v8, a4 + v9);
  }
}

uint64_t _textDiffersBetweenLargeTitleAndBackButtonLayouts(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = [a1 titleLabel];
  double v5 = [v4 text];

  id v6 = [v3 backButton];

  uint64_t v7 = [v6 visualProvider];
  double v8 = [v7 contentView];

  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    double v9 = [v8 titleLabel];
    double v10 = [v9 text];
  }
  else
  {
    double v10 = 0;
  }
  uint64_t v11 = [v5 isEqualToString:v10] ^ 1;

  return v11;
}

double _distanceFromTitleToBackButton(void *a1, void *a2, void *a3, int a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  double v10 = [v8 currentBackButtonTitle];
  uint64_t v11 = [v7 titleControl];
  uint64_t v12 = [v11 title];

  char v13 = 0;
  if (v12 && v10) {
    char v13 = [v12 isEqualToString:v10];
  }

  uint64_t v14 = [v7 titleControl];
  [v14 center];
  if ((v13 & 1) == 0)
  {
    [v14 frame];
    if (a4) {
      CGFloat MaxX = CGRectGetMaxX(*(CGRect *)&MaxX);
    }
  }
  double v19 = _distanceFromPointToBackButton(v8, v9, v13, a4, MaxX);

  return v19;
}

void _performAdditionalTitleViewClipping(void *a1, void *a2, void *a3)
{
  id v81 = a1;
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = [v81 transition];
  if (v7 == 1) {
    id v8 = v5;
  }
  else {
    id v8 = v6;
  }
  id v9 = v8;
  uint64_t v10 = [v9 backButton];
  if (v10)
  {
    uint64_t v11 = (void *)v10;
    uint64_t v12 = [v9 leadingGroupsMode];

    if (v12 == 1)
    {
      char v13 = [v9 titleControl];
      int v14 = [v81 isRTL];
      double v15 = [v9 leadingBar];
      CGRect v16 = [v15 view];
      [v16 frame];
      if (v14)
      {
        CGFloat v21 = CGRectGetMinX(*(CGRect *)&v17) + 16.0;

        CGRect v22 = _slideTransitionFadeMaskImage(0);
        CGFloat v23 = 0.0;
        double v24 = v13;
        double v25 = v21;
        id v26 = 0;
        id v27 = v22;
      }
      else
      {
        CGFloat v28 = CGRectGetMaxX(*(CGRect *)&v17) + -16.0;

        CGFloat v29 = [v81 contentView];
        [v29 bounds];
        CGFloat MaxX = CGRectGetMaxX(v83);

        CGRect v22 = _slideTransitionFadeMaskImage(1);
        double v24 = v13;
        CGFloat v23 = v28;
        double v25 = MaxX;
        id v26 = v22;
        id v27 = 0;
      }
      id v31 = _wrapViewInClippingView(v24, v26, v27, v23, v25);

      -[_UINavigationBarTransitionContext _addClippingView:]((uint64_t)v81, v31);
    }
  }
  if (v7 == 1) {
    double v32 = v6;
  }
  else {
    double v32 = v5;
  }
  id v33 = v32;

  uint64_t v34 = [v5 trailingClippingItem];
  uint64_t v35 = [v6 trailingClippingItem];
  BOOL v36 = v34 != 0;
  if (v34 | v35)
  {
    uint64_t v80 = [v33 titleControl];
    if (v34 && v35)
    {
      CGFloat v37 = [v81 contentView];
      double v38 = _distanceFromTrailingItemToCenterOfView((void *)v34, v37, [v81 isRTL]);

      v39 = [v81 contentView];
      double v40 = _distanceFromTrailingItemToCenterOfView((void *)v35, v39, [v81 isRTL]);

      BOOL v36 = v38 < v40;
    }
    if (v36) {
      CGRect v41 = (void *)v34;
    }
    else {
      CGRect v41 = (void *)v35;
    }
    id v42 = v41;
    CGRect v43 = [v42 view];
    CGRect v44 = [v43 superview];
    CGRect v45 = [v42 view];
    [v45 frame];
    double v47 = v46;
    double v49 = v48;
    double v51 = v50;
    double v53 = v52;
    v54 = [v81 contentView];
    objc_msgSend(v44, "convertRect:toView:", v54, v47, v49, v51, v53);
    uint64_t v56 = v55;
    uint64_t v58 = v57;
    uint64_t v60 = v59;
    uint64_t v62 = v61;

    int v63 = [v81 isRTL];
    uint64_t v64 = v56;
    uint64_t v65 = v58;
    uint64_t v66 = v60;
    uint64_t v67 = v62;
    if (v63)
    {
      CGFloat v68 = CGRectGetMaxX(*(CGRect *)&v64);
      v69 = [v81 contentView];
      [v69 bounds];
      CGFloat v70 = CGRectGetMaxX(v84);

      v71 = _slideTransitionFadeMaskImage(1);
      v72 = (void *)v80;
      v73 = (void *)v80;
      CGFloat v74 = v68;
      double v75 = v70;
      v76 = v71;
      v77 = 0;
    }
    else
    {
      CGFloat MinX = CGRectGetMinX(*(CGRect *)&v64);
      v71 = _slideTransitionFadeMaskImage(0);
      CGFloat v74 = 0.0;
      v72 = (void *)v80;
      v73 = (void *)v80;
      double v75 = MinX;
      v76 = 0;
      v77 = v71;
    }
    v79 = _wrapViewInClippingView(v73, v76, v77, v74, v75);

    -[_UINavigationBarTransitionContext _addClippingView:]((uint64_t)v81, v79);
  }
}

UIView *_wrapViewInClippingView(void *a1, void *a2, void *a3, CGFloat a4, double a5)
{
  id v9 = a1;
  unint64_t v10 = a2;
  unint64_t v11 = a3;
  uint64_t v12 = [v9 superview];
  [v12 bounds];
  double v14 = v13;
  CGFloat v16 = v15;
  double v17 = a5 - a4;
  double v18 = [v12 layer];
  double v19 = [v18 presentationLayer];
  [v19 bounds];
  double Height = CGRectGetHeight(v28);

  v29.origin.x = a4;
  v29.origin.y = v14;
  v29.size.double width = v17;
  v29.size.height = v16;
  double v21 = CGRectGetHeight(v29);
  if (Height >= v21) {
    double v22 = Height;
  }
  else {
    double v22 = v21;
  }
  CGFloat v23 = -[UIView initWithFrame:]([UIView alloc], "initWithFrame:", a4, v14, v17, v22);
  -[UIView setBounds:](v23, "setBounds:", a4, v14, v17, v22);
  [(UIView *)v23 setClipsToBounds:1];
  [(UIView *)v23 setUserInteractionEnabled:0];
  v30.origin.x = a4;
  v30.origin.y = v14;
  v30.size.double width = v17;
  v30.size.height = v22;
  if (fabs(CGRectGetHeight(v30)) >= 2.22044605e-16)
  {
    [v12 insertSubview:v23 belowSubview:v9];
    [(UIView *)v23 addSubview:v9];
  }
  if (v10 | v11)
  {
    double v24 = _clippingMaskForFrame((void *)v10, (void *)v11, 0, 0, a4, v14, v17, v22);
    double v25 = [(UIView *)v23 layer];
    [v25 setMask:v24];
  }
  return v23;
}

uint64_t _searchBarHasAlphaTransitionForSlideTransitionLayouts(void *a1, void *a2, char a3, int a4)
{
  id v8 = a1;
  id v9 = a2;
  if (v8)
  {
    id v10 = v8[30];
    BOOL v11 = v10 == 0;
    if (v10)
    {
      if (!v9)
      {
        id v4 = 0;
        goto LABEL_5;
      }
      id v4 = v9[30];
      if (!v4)
      {
LABEL_5:
        BOOL v12 = 1;
LABEL_14:

        goto LABEL_15;
      }
    }
    id v13 = v8[30];
    if (v13)
    {

      if (!v10)
      {
        BOOL v12 = 0;
        goto LABEL_16;
      }
      BOOL v12 = 0;
      goto LABEL_14;
    }
  }
  else
  {
    id v10 = 0;
    BOOL v11 = 1;
  }
  if (v9) {
    id v14 = v9[30];
  }
  else {
    id v14 = 0;
  }
  id v15 = v14;
  BOOL v12 = v15 != 0;

  if (!v11) {
    goto LABEL_14;
  }
LABEL_15:

  if (!v8)
  {
    BOOL v19 = 0;
    BOOL v18 = 0;
    id v20 = 0;
    goto LABEL_27;
  }
LABEL_16:
  id v16 = v8[30];
  if (v16)
  {
    if (v9)
    {
      id v17 = v9[30];
      if (v17)
      {
        BOOL v18 = v8[31] != v9[31];
LABEL_25:

        goto LABEL_26;
      }
    }
    else
    {
      id v17 = 0;
    }
    BOOL v18 = 0;
    goto LABEL_25;
  }
  BOOL v18 = 0;
LABEL_26:

  BOOL v19 = *((double *)v8 + 34) > 0.0;
  id v20 = v8[30];
LABEL_27:
  id v21 = v20;
  double v22 = v21;
  if (v9)
  {
    BOOL v23 = *((double *)v9 + 34) > 0.0;
    id v24 = v9[30];
  }
  else
  {
    BOOL v23 = 0;
    id v24 = 0;
  }
  BOOL v25 = v21 != 0;
  id v26 = v24;
  if (a3)
  {
    BOOL v27 = v19;
    BOOL v28 = v22 != 0;
    BOOL v19 = v23;
    BOOL v25 = v26 != 0;
    if (!v23) {
      goto LABEL_37;
    }
  }
  else
  {
    a4 ^= 1u;
    BOOL v27 = v23;
    BOOL v28 = v26 != 0;
    if (!v19) {
      goto LABEL_37;
    }
  }
  if (v25)
  {
    if (v28 || v27) {
      int v29 = 0;
    }
    else {
      int v29 = a4 ^ 1;
    }
    goto LABEL_58;
  }
LABEL_37:
  if (v19 || !v25)
  {
    int v31 = v19 || v27 || v25;
    if (v28 && v31 == 0) {
      int v29 = a4;
    }
    else {
      int v29 = 0;
    }
  }
  else if (a4)
  {
    int v29 = !v27 && v28;
  }
  else
  {
    int v29 = !v27 || !v28;
  }
LABEL_58:
  uint64_t v34 = v29 | v12 | v18;

  return v34;
}

BOOL _shouldScaleLargeTitleToBackButton(void *a1, void *a2, void *a3, int a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  if (a4)
  {
    uint64_t v10 = [v7 twoLineMode];
    BOOL v11 = v7;
  }
  else
  {
    uint64_t v10 = [v8 twoLineMode];
    BOOL v11 = v8;
  }
  if (v10 == 1)
  {
    BOOL v12 = [v11 titleLabel];
    id v13 = [v11 contentView];
    [v13 bounds];
    objc_msgSend(v12, "textRectForBounds:limitedToNumberOfLines:", 2);
    double Height = CGRectGetHeight(v20);

    id v15 = [v11 titleLabel];
    id v16 = [v15 font];
    [v16 pointSize];
    BOOL v18 = floor(Height / v17) < 2.0;
  }
  else
  {
    BOOL v18 = 1;
  }

  return v18;
}

void _updateLargeTitleSpacingForLayout(void *a1, double a2, double a3, double a4, double a5)
{
  id v9 = [a1 titleLabel];
  objc_msgSend(v9, "setCenter:", a2 + a4, a3 + a5);
}

double _hiddenLargeTitleMinY(void *a1, void *a2, int a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = v6;
  if (v6)
  {
    [v6 _layoutFrameFor:v6[4] withOrder:60];
    CGFloat v9 = v8;
    CGFloat v11 = v10;
    CGFloat v13 = v12;
    CGFloat v15 = v14;
  }
  else
  {
    CGFloat v11 = 0.0;
    CGFloat v13 = 0.0;
    CGFloat v15 = 0.0;
    CGFloat v9 = 0.0;
  }
  v22.origin.x = v9;
  v22.origin.y = v11;
  v22.size.double width = v13;
  v22.size.height = v15;
  double MinY = CGRectGetMinY(v22);
  if (a3)
  {
    v23.origin.x = -[_UINavigationBarLayout contentViewLayoutFrame]((uint64_t)v5);
    double MaxY = CGRectGetMaxY(v23);
    v24.origin.x = v9;
    v24.origin.y = v11;
    v24.size.double width = v13;
    v24.size.height = v15;
    double Height = CGRectGetHeight(v24);
  }
  else
  {
    double MaxY = MinY;
    v25.origin.x = -[_UINavigationBarLayout searchBarLayoutFrame](v7);
    double v19 = CGRectGetMinY(v25);
    v26.origin.x = -[_UINavigationBarLayout searchBarLayoutFrame](v5);
    double Height = v19 - CGRectGetMinY(v26);
  }
  double v20 = MaxY - Height;

  return v20;
}

double _distanceFromPointToBackButton(void *a1, void *a2, char a3, int a4, double a5)
{
  id v9 = a2;
  double v10 = [a1 backButton];
  CGFloat v11 = v10;
  if (v10)
  {
    double v12 = [v10 visualProvider];
    CGFloat v13 = [v12 contentView];

    if (!v13)
    {
      int v29 = [MEMORY[0x1E4F28B00] currentHandler];
      CGRect v30 = objc_msgSend(NSString, "stringWithUTF8String:", "CGSize _distanceFromPointToBackButton(CGPoint, _UINavigationBarContentViewLayout *__strong, _UINavigationBarContentView *__strong, BOOL, BOOL)");
      [v29 handleFailureInFunction:v30 file:@"_UINavigationBarTransitionContext.m" lineNumber:610 description:@"Cannot transition a back button with no content view"];
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0
      && ([v13 titleLabel], double v14 = objc_claimAutoreleasedReturnValue(), v14, v14))
    {
      CGFloat v15 = [v13 titleLabel];
      [v15 center];
      if (a3)
      {
        double MaxX = v16;
      }
      else
      {
        [v15 frame];
        double MaxX = v23;
        if (a4)
        {
          double MaxX = CGRectGetMaxX(*(CGRect *)&v23);
          [v15 frame];
        }
      }
      [v13 convertPoint:v9 toView:MaxX];
      double v22 = v27;
    }
    else
    {
      [v13 frame];
      if (a4)
      {
        [v13 frame];
        double v19 = CGRectGetMaxX(v31);
        [v13 frame];
      }
      else
      {
        double v19 = v18;
      }
      [v11 convertPoint:v9 toView:v19];
      double v22 = v21;
    }
    double v20 = a5 - v22;
  }
  else
  {
    double v20 = *MEMORY[0x1E4F1DB30];
  }

  return v20;
}

void _applyStretchTransformForTitleViewAndBackButtonLayout(int a1, void *a2, void *a3)
{
  id v5 = a2;
  if (v5)
  {
    id v6 = [a3 backButton];
    id v7 = [v6 visualProvider];
    double v8 = [v7 contentView];

    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
LABEL_26:

      goto LABEL_27;
    }
    id v9 = v8;
    double v10 = [v9 titleLabel];
    CGFloat v11 = [v10 text];
    double v12 = [v5 text];
    if ([v11 isEqualToString:v12])
    {
      CGFloat v13 = [v9 titleLabel];
      int v14 = [v13 isHidden];

      if (!v14) {
        goto LABEL_11;
      }
    }
    else
    {
    }
    if (a1 == 2)
    {
      a1 = 3;
    }
    else
    {
      if (a1 != 5)
      {
LABEL_25:

        goto LABEL_26;
      }
      a1 = 6;
    }
LABEL_11:
    CGFloat v15 = [v9 titleLabel];
    if ([v15 isHidden]
      && ([v15 text], double v16 = objc_claimAutoreleasedReturnValue(), v16, !v16))
    {
      double v17 = [v9 imageView];

      if (a1 == 6)
      {
        [v5 bounds];
        [v17 bounds];
        long long v35 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
        v55[0] = *MEMORY[0x1E4F1DAB8];
        long long v34 = v55[0];
        v55[1] = v35;
        long long v56 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
        long long v33 = v56;
        [v5 setTransform:v55];
        v54[0] = v34;
        v54[1] = v35;
        v54[2] = v33;
        double v27 = (CGAffineTransform *)v54;
LABEL_23:
        [v17 setTransform:v27];
LABEL_24:

        goto LABEL_25;
      }
    }
    else
    {
      double v17 = v15;
    }
    [v5 bounds];
    double v19 = v18;
    double v21 = v20;
    [v17 bounds];
    double v24 = v22;
    double v25 = v23;
    switch(a1)
    {
      case 1:
        CGAffineTransformMakeScale(&v53, v22 / v19, 1.0);
        CGAffineTransform v52 = v53;
        [v5 setTransform:&v52];
        long long v26 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
        v51[0] = *MEMORY[0x1E4F1DAB8];
        v51[1] = v26;
        v51[2] = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
        double v27 = (CGAffineTransform *)v51;
        goto LABEL_23;
      case 2:
        CGAffineTransformMakeScale(&v50, v22 / v19, v23 / v21);
        CGAffineTransform v49 = v50;
        [v5 setTransform:&v49];
        long long v28 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
        v48[0] = *MEMORY[0x1E4F1DAB8];
        v48[1] = v28;
        v48[2] = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
        double v27 = (CGAffineTransform *)v48;
        goto LABEL_23;
      case 3:
        CGAffineTransformMakeScale(&v47, v23 / v21, v23 / v21);
        CGAffineTransform v46 = v47;
        [v5 setTransform:&v46];
        long long v29 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
        v45[0] = *MEMORY[0x1E4F1DAB8];
        v45[1] = v29;
        v45[2] = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
        double v27 = (CGAffineTransform *)v45;
        goto LABEL_23;
      case 4:
        long long v30 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
        v44[0] = *MEMORY[0x1E4F1DAB8];
        v44[1] = v30;
        v44[2] = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
        [v5 setTransform:v44];
        CGAffineTransformMakeScale(&v43, v19 / v24, 1.0);
        CGAffineTransform v42 = v43;
        double v27 = &v42;
        goto LABEL_23;
      case 5:
        long long v31 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
        v41[0] = *MEMORY[0x1E4F1DAB8];
        v41[1] = v31;
        v41[2] = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
        [v5 setTransform:v41];
        CGAffineTransformMakeScale(&v40, v19 / v24, v21 / v25);
        CGAffineTransform v39 = v40;
        double v27 = &v39;
        goto LABEL_23;
      case 6:
        long long v32 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
        v38[0] = *MEMORY[0x1E4F1DAB8];
        v38[1] = v32;
        v38[2] = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
        [v5 setTransform:v38];
        CGAffineTransformMakeScale(&v37, v21 / v25, v21 / v25);
        CGAffineTransform v36 = v37;
        double v27 = &v36;
        goto LABEL_23;
      default:
        goto LABEL_24;
    }
    goto LABEL_24;
  }
LABEL_27:
}

double _distanceFromTrailingItemToCenterOfView(void *a1, void *a2, int a3)
{
  id v5 = a2;
  id v6 = a1;
  id v7 = [v6 view];
  double v8 = [v7 superview];
  id v9 = [v6 view];

  [v9 frame];
  objc_msgSend(v8, "convertRect:toView:", v5);
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;

  uint64_t v18 = v11;
  uint64_t v19 = v13;
  uint64_t v20 = v15;
  uint64_t v21 = v17;
  if (a3) {
    double MaxX = CGRectGetMaxX(*(CGRect *)&v18);
  }
  else {
    double MaxX = CGRectGetMinX(*(CGRect *)&v18);
  }
  double v23 = MaxX;
  [v5 bounds];
  double v24 = vabdd_f64(CGRectGetWidth(v26) * 0.5, v23);

  return v24;
}

void _UIUpdateSequenceItemInternal::~_UIUpdateSequenceItemInternal(_UIUpdateSequenceItemInternal *this)
{
}

void _UIUpdateSequenceRemoveItem(_UIUpdateSequenceItemInternal *a1)
{
  if (a1)
  {
    int v1 = *((_DWORD *)a1 + 6);
    if (v1) {
      *((_DWORD *)a1 + 6) = v1 | 2;
    }
    else {
      _removeItem(a1);
    }
  }
}

void _removeItem(_UIUpdateSequenceItemInternal *a1)
{
  uint64_t v2 = *(void *)a1;
  if (*(void *)a1) {
    *(void *)(v2 + 8) = *((void *)a1 + 1);
  }
  **((void **)a1 + 1) = v2;
  id v3 = (void *)*((void *)a1 + 5);
  *((void *)a1 + 5) = 0;

  free(a1);
}

void _UIUpdateCompletionObservationAddObserver(float **a1, unint64_t a2, int a3)
{
  if (a3)
  {
    CGAffineTransform v37 = [MEMORY[0x1E4F28B00] currentHandler];
    double v38 = objc_msgSend(NSString, "stringWithUTF8String:", "void _UIUpdateCompletionObservationAddObserver(_UIUpdateCompletionObservation *const _Nonnull, const id<_UIUpdateCompletionObserving>  _Nonnull const __strong, const BOOL)");
    [v37 handleFailureInFunction:v38 file:@"_UIUpdateSequence.mm" lineNumber:177 description:@"Persistant observers are not implemented."];
  }
  id v6 = *a1;
  if (!*a1) {
    operator new();
  }
  unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v7 >> 47) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  unint64_t v10 = *((void *)v6 + 1);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
    uint64_t v12 = *(void **)(*(void *)v6 + 8 * v3);
    if (v12)
    {
      for (i = (void *)*v12; i; i = (void *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == a2) {
            return;
          }
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v15 = operator new(0x18uLL);
  *uint64_t v15 = 0;
  v15[1] = v9;
  v15[2] = a2;
  float v16 = (float)(unint64_t)(*((void *)v6 + 3) + 1);
  float v17 = v6[8];
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      int8x8_t prime = (int8x8_t)v20;
    }
    else {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v10 = *((void *)v6 + 1);
    }
    if (*(void *)&prime > v10) {
      goto LABEL_34;
    }
    if (*(void *)&prime < v10)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 3) / v6[8]);
      if (v10 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (*(void *)&prime <= v28) {
        int8x8_t prime = (int8x8_t)v28;
      }
      if (*(void *)&prime >= v10)
      {
        unint64_t v10 = *((void *)v6 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          double v22 = operator new(8 * *(void *)&prime);
          double v23 = *(void **)v6;
          *(void *)id v6 = v22;
          if (v23) {
            operator delete(v23);
          }
          uint64_t v24 = 0;
          *((int8x8_t *)v6 + 1) = prime;
          do
            *(void *)(*(void *)v6 + 8 * v24++) = 0;
          while (*(void *)&prime != v24);
          double v25 = (void *)*((void *)v6 + 2);
          if (v25)
          {
            unint64_t v26 = v25[1];
            uint8x8_t v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(void *)&prime) {
                v26 %= *(void *)&prime;
              }
            }
            else
            {
              v26 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)v6 + 8 * v26) = v6 + 4;
            long long v31 = (void *)*v25;
            if (*v25)
            {
              do
              {
                unint64_t v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(void *)&prime) {
                    v32 %= *(void *)&prime;
                  }
                }
                else
                {
                  v32 &= *(void *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*(void *)(*(void *)v6 + 8 * v32))
                  {
                    *(void *)(*(void *)v6 + 8 * v32) = v25;
                    goto LABEL_59;
                  }
                  *double v25 = *v31;
                  *long long v31 = **(void **)(*(void *)v6 + 8 * v32);
                  **(void **)(*(void *)v6 + 8 * v32) = v31;
                  long long v31 = v25;
                }
                unint64_t v32 = v26;
LABEL_59:
                double v25 = v31;
                long long v31 = (void *)*v31;
                unint64_t v26 = v32;
              }
              while (v31);
            }
          }
          unint64_t v10 = (unint64_t)prime;
          goto LABEL_63;
        }
        CGAffineTransform v36 = *(void **)v6;
        *(void *)id v6 = 0;
        if (v36) {
          operator delete(v36);
        }
        unint64_t v10 = 0;
        *((void *)v6 + 1) = 0;
      }
    }
LABEL_63:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  long long v33 = *(void **)v6;
  long long v34 = *(void **)(*(void *)v6 + 8 * v3);
  if (v34)
  {
    *uint64_t v15 = *v34;
LABEL_76:
    *long long v34 = v15;
    goto LABEL_77;
  }
  *uint64_t v15 = *((void *)v6 + 2);
  *((void *)v6 + 2) = v15;
  v33[v3] = v6 + 4;
  if (*v15)
  {
    unint64_t v35 = *(void *)(*v15 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v35 >= v10) {
        v35 %= v10;
      }
    }
    else
    {
      v35 &= v10 - 1;
    }
    long long v34 = (void *)(*(void *)v6 + 8 * v35);
    goto LABEL_76;
  }
LABEL_77:
  ++*((void *)v6 + 3);
}

void sub_185C43C1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _UIUpdateAddCompletionObserver(unint64_t a1, int a2)
{
}

void _UIUpdateRemoveCompletionObserver(unint64_t a1, int a2)
{
}

void *std::__hash_table<void *,std::hash<void *>,std::equal_to<void *>,std::allocator<void *>>::find<void *>(void *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v2 - 1) & v5;
  }
  unint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == a2) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t std::__hash_table<void *,std::hash<void *>,std::equal_to<void *>,std::allocator<void *>>::erase(void *a1, uint64_t *__p)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  uint64_t v4 = *__p;
  unint64_t v3 = __p[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v3 >= *(void *)&v2) {
      v3 %= *(void *)&v2;
    }
  }
  else
  {
    v3 &= *(void *)&v2 - 1;
  }
  uint8x8_t v6 = *(uint64_t **)(*a1 + 8 * v3);
  do
  {
    unint64_t v7 = v6;
    uint8x8_t v6 = (uint64_t *)*v6;
  }
  while (v6 != __p);
  if (v7 != a1 + 2)
  {
    unint64_t v8 = v7[1];
    if (v5.u32[0] > 1uLL)
    {
      if (v8 >= *(void *)&v2) {
        v8 %= *(void *)&v2;
      }
    }
    else
    {
      v8 &= *(void *)&v2 - 1;
    }
    uint64_t v9 = *__p;
    if (v8 == v3)
    {
LABEL_20:
      if (!v9) {
        goto LABEL_27;
      }
      goto LABEL_21;
    }
  }
  if (!v4) {
    goto LABEL_19;
  }
  unint64_t v10 = *(void *)(v4 + 8);
  if (v5.u32[0] > 1uLL)
  {
    if (v10 >= *(void *)&v2) {
      v10 %= *(void *)&v2;
    }
  }
  else
  {
    v10 &= *(void *)&v2 - 1;
  }
  uint64_t v9 = *__p;
  if (v10 != v3)
  {
LABEL_19:
    *(void *)(*a1 + 8 * v3) = 0;
    uint64_t v9 = *__p;
    goto LABEL_20;
  }
LABEL_21:
  unint64_t v11 = *(void *)(v9 + 8);
  if (v5.u32[0] > 1uLL)
  {
    if (v11 >= *(void *)&v2) {
      v11 %= *(void *)&v2;
    }
  }
  else
  {
    v11 &= *(void *)&v2 - 1;
  }
  if (v11 != v3)
  {
    *(void *)(*a1 + 8 * v11) = v7;
    uint64_t v9 = *__p;
  }
LABEL_27:
  *unint64_t v7 = v9;
  *__p = 0;
  --a1[3];
  operator delete(__p);
  return v4;
}

void *std::__hash_table<void *,std::hash<void *>,std::equal_to<void *>,std::allocator<void *>>::clear(void *result)
{
  if (result[3])
  {
    int v1 = result;
    result = (void *)result[2];
    if (result)
    {
      do
      {
        int8x8_t v2 = (void *)*result;
        operator delete(result);
        result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    uint64_t v3 = v1[1];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

void sub_185C44448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185C445FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185C4491C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185C452EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185C455BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185C45A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _contentViewFromBarButton(void *a1)
{
  int v1 = [a1 visualProvider];
  int8x8_t v2 = [v1 contentView];

  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v3 = v2;
    uint64_t v4 = [v3 imageView];
    char v5 = [v4 isHidden];

    if (v5) {
      [v3 titleLabel];
    }
    else {
    int8x8_t v2 = [v3 imageView];
    }
  }
  return v2;
}

void __ASSERT_RENAMER_SESSION__(void *a1, void *a2)
{
  double v22 = a1;
  id v3 = a2;
  uint64_t v4 = v22;
  if (v22)
  {
    if (v3) {
      goto LABEL_3;
    }
  }
  else
  {
    char v5 = [MEMORY[0x1E4F28B00] currentHandler];
    uint8x8_t v6 = objc_msgSend(NSString, "stringWithUTF8String:", "void __ASSERT_RENAMER_SESSION__(_UINavigationBarVisualProviderModernIOS *__strong, _UINavigationBarTitleRenamerSession *__strong)");
    [v5 handleFailureInFunction:v6, @"_UINavigationBarVisualProviderModernIOS.m", 1299, @"Invalid parameter not satisfying: %@", @"provider != nil" file lineNumber description];

    uint64_t v4 = 0;
    if (v3) {
      goto LABEL_3;
    }
  }
  unint64_t v7 = [MEMORY[0x1E4F28B00] currentHandler];
  unint64_t v8 = objc_msgSend(NSString, "stringWithUTF8String:", "void __ASSERT_RENAMER_SESSION__(_UINavigationBarVisualProviderModernIOS *__strong, _UINavigationBarTitleRenamerSession *__strong)");
  [v7 handleFailureInFunction:v8, @"_UINavigationBarVisualProviderModernIOS.m", 1300, @"Invalid parameter not satisfying: %@", @"session != nil" file lineNumber description];

  uint64_t v4 = v22;
LABEL_3:
  if ((id)v4[25] != v3)
  {
    uint64_t v9 = [MEMORY[0x1E4F28B00] currentHandler];
    unint64_t v10 = objc_msgSend(NSString, "stringWithUTF8String:", "void __ASSERT_RENAMER_SESSION__(_UINavigationBarVisualProviderModernIOS *__strong, _UINavigationBarTitleRenamerSession *__strong)");
    unint64_t v11 = [v22 navigationBar];
    if (v11)
    {
      uint64_t v12 = NSString;
      uint64_t v13 = (objc_class *)objc_opt_class();
      unint64_t v14 = NSStringFromClass(v13);
      uint64_t v15 = [v12 stringWithFormat:@"<%@: %p>", v14, v11];
    }
    else
    {
      uint64_t v15 = @"(nil)";
    }
    float v16 = (void *)v22[25];
    if (v16)
    {
      float v17 = NSString;
      id v18 = v16;
      unint64_t v19 = (objc_class *)objc_opt_class();
      unint64_t v20 = NSStringFromClass(v19);
      uint64_t v21 = [v17 stringWithFormat:@"<%@: %p>", v20, v18];
    }
    else
    {
      uint64_t v21 = @"(nil)";
    }
    [v9 handleFailureInFunction:v10, @"_UINavigationBarVisualProviderModernIOS.m", 1301, @"This navigation bar (%@) is attached to a different rename session (%@).", v15, v21 file lineNumber description];
  }
}

id __renameHandler(void *a1)
{
  int v1 = [a1 context];
  int8x8_t v2 = objc_msgSend(v1, "_dci_renameHandler");
  id v3 = v2;
  if (v2)
  {
    uint64_t v4 = [v2 associatedItem];

    if (v4 != v1)
    {
      char v5 = [MEMORY[0x1E4F28B00] currentHandler];
      uint8x8_t v6 = [NSString stringWithUTF8String:"_UINavigationItemRenameHandler *__renameHandler(_UINavigationBarTitleRenamerSession *__strong)"];
      [v5 handleFailureInFunction:v6 file:@"_UINavigationBarVisualProviderModernIOS.m" lineNumber:1308 description:@"Rename handler and item are out of sync."];
    }
  }

  return v3;
}

id _nullableCompactScrollEdgeAppearance(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  char v5 = [v4 compactScrollEdgeAppearance];
  uint8x8_t v6 = v5;
  if (v5)
  {
    id v7 = v5;
  }
  else
  {
    unint64_t v8 = [v3 compactScrollEdgeAppearance];
    uint64_t v9 = v8;
    if (v8)
    {
      id v7 = v8;
    }
    else
    {
      unint64_t v10 = [v4 scrollEdgeAppearance];
      unint64_t v11 = v10;
      if (v10)
      {
        id v12 = v10;
      }
      else
      {
        id v12 = [v3 scrollEdgeAppearance];
      }
      id v7 = v12;
    }
  }

  return v7;
}

id _compactAppearance(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  char v5 = [v4 compactAppearance];
  uint8x8_t v6 = v5;
  if (v5)
  {
    id v7 = v5;
  }
  else
  {
    unint64_t v8 = [v3 compactAppearance];
    uint64_t v9 = v8;
    if (v8)
    {
      id v7 = v8;
    }
    else
    {
      id v10 = v3;
      unint64_t v11 = [v4 standardAppearance];
      id v12 = v11;
      if (v11)
      {
        id v13 = v11;
      }
      else
      {
        id v13 = [v10 standardAppearance];
      }
      id v7 = v13;
    }
  }

  return v7;
}

uint64_t _UINavigationBarAugmentedTitleWantsTwoPartCrossfade(void *a1)
{
  int v1 = _UINavigationBarCastToAugmentedTitleView(a1);
  int8x8_t v2 = v1;
  if (v1) {
    uint64_t v3 = [v1 _wantsTwoPartTransition];
  }
  else {
    uint64_t v3 = 0;
  }

  return v3;
}

void sub_185C4C6E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  unint64_t v19 = v17;
  objc_destroyWeak(v19);
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)(v18 - 48));
  objc_destroyWeak((id *)(v18 - 40));
  _Unwind_Resume(a1);
}

void _confirmIOSorVisionOSVisualProvider(void *a1)
{
  id v3 = a1;
  if ([v3 visualProviderType] != 2
    && [v3 visualProviderType] != 4)
  {
    int v1 = [MEMORY[0x1E4F28B00] currentHandler];
    int8x8_t v2 = [NSString stringWithUTF8String:"void _confirmIOSorVisionOSVisualProvider(_UISearchBarVisualProviderBase *__strong)"];
    [v1 handleFailureInFunction:v2 file:@"UISearchBar.m" lineNumber:1460 description:@"Code path only allowed for iOS or visionOS visual provider. This is a UIKit bug."];
  }
}

uint64_t UISearchBarSetForceLegacyAppearance(uint64_t result)
{
  byte_1EB25D019 = result;
  return result;
}

void _confirmTVOSVisualProvider(void *a1)
{
  if ([a1 visualProviderType] != 3)
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    int v1 = [NSString stringWithUTF8String:"void _confirmTVOSVisualProvider(_UISearchBarVisualProviderBase *__strong)"];
    [v2 handleFailureInFunction:v1 file:@"UISearchBar.m" lineNumber:2702 description:@"Code path not allowed for any visual provider other than TVOS. This is a UIKit bug."];
  }
}

id _UISearchBarBackgroundFillColor(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    id v5 = v3;
  }
  else if (a1)
  {
    id v5 = +[UIColor colorWithRed:0.180392157 green:0.180392157 blue:0.160784314 alpha:1.0];
  }
  else
  {
    if (dyld_program_sdk_at_least()) {
      +[UIColor systemBackgroundColor];
    }
    else {
    id v5 = +[UIColor _searchBarBackgroundColor];
    }
  }
  uint8x8_t v6 = v5;

  return v6;
}

void ManipulateTextStorage(void *a1, int a2, void *a3)
{
  unint64_t v11 = a1;
  id v5 = a3;
  uint8x8_t v6 = [v11 inputDelegate];
  [v6 textWillChange:v11];

  id v7 = [v11 textStorage];
  [v7 coordinateEditing:v5];

  id WeakRetained = objc_loadWeakRetained(v11 + 147);
  uint64_t v9 = WeakRetained;
  if (a2) {
    [WeakRetained _searchFieldTokensChanged];
  }
  else {
    [WeakRetained _searchFieldTextChanged:1];
  }

  id v10 = [v11 inputDelegate];
  [v10 textDidChange:v11];
}

void PreservingSelectionForTokenChange(void *a1, unint64_t a2, uint64_t a3, void *a4)
{
  id v15 = a1;
  id v7 = a4;
  unint64_t v8 = [v15 _selectedNSRange];
  if (v8 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v7[2](v7);
    goto LABEL_17;
  }
  unint64_t v10 = v8;
  uint64_t v11 = v9;
  if ((a3 < 1 || a2 > v8) && ((a3 & 0x8000000000000000) == 0 || a2 >= v8))
  {
    if (a2 - v8 < v9 && a2 >= v8) {
      uint64_t v13 = a3;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v11 = v13 + v9;
    v7[2](v7);
    goto LABEL_16;
  }
  unint64_t v10 = v8 + a3;
  v7[2](v7);
  if (v10 != 0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_16:
    unint64_t v14 = objc_msgSend(v15, "_textRangeFromNSRange:", v10, v11);
    [v15 setSelectedTextRange:v14];

    objc_msgSend(v15, "_scrollRangeToVisible:animated:", v10, v11, 0);
  }
LABEL_17:
}

void sub_185C555E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185C57A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185C5B3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185C5B538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185C5B6A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185C5B7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185C5B940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185C5BB90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185C5BD94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185C5BF98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185C5C19C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185C5C3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185C5C598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185C5C79C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185C5CA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185C5CC10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185C5CDF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185C5CFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185C5D370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185C5D550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185C5D740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185C5D930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185C5DB10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___forceReadableWidthBehaviorPreference_block_invoke()
{
  double v0 = _UIKitPreferencesOnce();
  id v3 = [v0 objectForKey:@"UISearchBarForceReadableWidthPreference"];

  int v1 = v3;
  if (v3
    || ([MEMORY[0x1E4F1CB18] standardUserDefaults],
        id v2 = objc_claimAutoreleasedReturnValue(),
        [v2 objectForKey:@"UISearchBarForceReadableWidthPreference"],
        id v4 = (id)objc_claimAutoreleasedReturnValue(),
        v2,
        (int v1 = v4) != 0))
  {
    id v5 = v1;
    _forceReadableWidthBehaviorPreference_pref = [v1 BOOLValue];
  }
}

void sub_185C66ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _UIGameControllerNotifyRelevantSystemUIWillShow(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (!GameControllerLibraryCore_frameworkLibrary) {
    GameControllerLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (GameControllerLibraryCore_frameworkLibrary)
  {
    id v5 = [v3 _gameControllerSceneComponent];
    [v5 prepareSystemUIWithView:v4];
  }
}

uint64_t __GameControllerLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  GameControllerLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_185C6B34C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

__CFString *_UISearchBarLayoutStateDebugDescription(uint64_t a1)
{
  if ((unint64_t)(a1 + 1) > 4) {
    return @"Unknown _UISearchBarLayoutState";
  }
  else {
    return off_1E52DF328[a1 + 1];
  }
}

BOOL _UISearchBarLayoutStateIsRestingEquivalent(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

void RaiseForUnexpectedLayoutState(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1 == a2)
  {
    os_variant_has_internal_diagnostics();
  }
  else
  {
    BOOL v5 = (unint64_t)(a1 - 3) < 0xFFFFFFFFFFFFFFFELL || (unint64_t)(a2 - 3) < 0xFFFFFFFFFFFFFFFELL;
    if (os_variant_has_internal_diagnostics())
    {
      if (v5)
      {
        unint64_t v8 = __UIFaultDebugAssertLog();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
        {
          if ((unint64_t)(a1 + 1) > 4) {
            uint64_t v11 = @"Unknown _UISearchBarLayoutState";
          }
          else {
            uint64_t v11 = off_1E52DF328[a1 + 1];
          }
          if ((unint64_t)(a2 + 1) > 4) {
            id v12 = @"Unknown _UISearchBarLayoutState";
          }
          else {
            id v12 = off_1E52DF328[a2 + 1];
          }
          int v13 = 138412546;
          unint64_t v14 = v11;
          __int16 v15 = 2112;
          float v16 = v12;
          _os_log_fault_impl(&dword_1853B0000, v8, OS_LOG_TYPE_FAULT, "Unexpected layoutState, %@, in transition request. Expected %@. This is an internal UIKit problem.", (uint8_t *)&v13, 0x16u);
        }
      }
    }
    else if (v5)
    {
      uint8x8_t v6 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &RaiseForUnexpectedLayoutState___s_category) + 8);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        if ((unint64_t)(a1 + 1) > 4) {
          id v7 = @"Unknown _UISearchBarLayoutState";
        }
        else {
          id v7 = off_1E52DF328[a1 + 1];
        }
        if ((unint64_t)(a2 + 1) > 4) {
          unint64_t v9 = @"Unknown _UISearchBarLayoutState";
        }
        else {
          unint64_t v9 = off_1E52DF328[a2 + 1];
        }
        int v13 = 138412546;
        unint64_t v14 = v7;
        __int16 v15 = 2112;
        float v16 = v9;
        unint64_t v10 = v6;
        _os_log_impl(&dword_1853B0000, v10, OS_LOG_TYPE_ERROR, "Unexpected layoutState, %@, in transition request. Expected %@. This is an internal UIKit problem.", (uint8_t *)&v13, 0x16u);
      }
    }
  }
}

void sub_185C796A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185C7F914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__CFString *UIWritingToolsCoordinatorTextAnimationDebugDescription(unint64_t a1)
{
  if (a1 > 2) {
    return @"Unknown text animation";
  }
  else {
    return off_1E52DF8A8[a1];
  }
}

void sub_185C87674(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_185C87E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185C895FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185C89804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, char a19)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_185C8A53C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185C8AA9C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 144));
  _Unwind_Resume(a1);
}

void _confirmMatchingWritingToolsSession(void *a1, void *a2, const char *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v16 = v5;
  id v7 = v6;
  unint64_t v8 = v7;
  if (v16 == v7)
  {

    unint64_t v10 = v16;
LABEL_14:

    goto LABEL_15;
  }
  if (!v16 || !v7)
  {

    goto LABEL_8;
  }
  char v9 = [v16 isEqual:v7];

  if ((v9 & 1) == 0)
  {
LABEL_8:
    uint64_t v11 = NSString;
    uint64_t v12 = NSStringFromSelector(a3);
    int v13 = (void *)v12;
    if (v16)
    {
      unint64_t v14 = [NSString stringWithFormat:@"different active session %@", v16];
      unint64_t v10 = [v11 stringWithFormat:@"-%@ for session %@ with %@", v13, v8, v14];
    }
    else
    {
      unint64_t v10 = [v11 stringWithFormat:@"-%@ for session %@ with %@", v12, v8, @"no active session"];
    }

    if (os_variant_has_internal_diagnostics())
    {
      uint64_t v15 = [@"Problem with WritingTools delegate-message delivery. " stringByAppendingString:v10];

      unint64_t v10 = (void *)v15;
    }
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3B8], @"%@", v10 format];
    goto LABEL_14;
  }
LABEL_15:
}

void sub_185C8B2E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185C8BE4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id *location)
{
  objc_destroyWeak(location);
  _Block_object_dispose((const void *)(v13 - 208), 8);
  objc_destroyWeak(v12);
  objc_destroyWeak((id *)(v13 - 160));
  _Block_object_dispose((const void *)(v13 - 152), 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__129(uint64_t a1, uint64_t a2)
{
}

void sub_185C8C808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185C8CE28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185C8DD88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185C8F048(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_185C8FFDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  objc_destroyWeak(v21);
  _Block_object_dispose(&a20, 8);
  objc_destroyWeak(v20);
  objc_destroyWeak((id *)(v22 - 120));
  _Block_object_dispose((const void *)(v22 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_185C907CC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_185C90A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185C91B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18)
{
}

void sub_185C92138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185C92838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id *location)
{
  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v13 - 96));
  _Unwind_Resume(a1);
}

uint64_t _checkControlStateArgumentAdjustIfNecessary(uint64_t a1)
{
  if ((dyld_program_sdk_at_least() & 1) == 0 && a1 && a1 != 2)
  {
    if (a1 != 4) {
      NSLog(&cfstr_ButtonTextAttr.isa, a1);
    }
    return 4;
  }
  return a1;
}

id _viewForKey(void *a1, const void *a2)
{
  id v3 = a1;
  id v4 = objc_getAssociatedObject(v3, a2);
  if (!v4)
  {
    id v4 = objc_opt_new();
    objc_setAssociatedObject(v3, a2, v4, (void *)1);
  }

  return v4;
}

id _UIEditMenuGetPlatformMetrics(uint64_t a1)
{
  uint64_t v2 = (void *)_UIEditMenuGetPlatformMetrics_metricsByIdiom;
  id v3 = [NSNumber numberWithInteger:a1];
  id v4 = [v2 objectForKey:v3];

  if (!v4)
  {
    if (!_UIEditMenuGetPlatformMetrics_metricsByIdiom)
    {
      uint64_t v5 = [MEMORY[0x1E4F1CA60] dictionary];
      id v6 = (void *)_UIEditMenuGetPlatformMetrics_metricsByIdiom;
      _UIEditMenuGetPlatformMetrics_metricsByIdiom = v5;
    }
    id v7 = +[_UIVisualStyleRegistry registryForIdiom:a1];
    [v7 visualStyleClassForStylableClass:objc_opt_class()];

    id v4 = objc_opt_new();
    unint64_t v8 = (void *)_UIEditMenuGetPlatformMetrics_metricsByIdiom;
    char v9 = [NSNumber numberWithInteger:a1];
    [v8 setObject:v4 forKey:v9];
  }
  return v4;
}

void sub_185CA0DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185CA1294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185CA1980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_185CA2164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185CA2374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185CA2648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185CA29E0(_Unwind_Exception *a1)
{
}

void sub_185CA2C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_185CA2F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185CA3E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185CA44A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185CA46D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185CA48F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _UITabChildrenCount(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = [v1 count];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v3);
        }
        unint64_t v8 = *(void **)(*((void *)&v11 + 1) + 8 * i);
        if (objc_msgSend(v8, "_isGroup", (void)v11))
        {
          char v9 = [v8 children];
          v2 += _UITabChildrenCount();
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v5);
  }

  return v2;
}

void BarButtonItemGetSystemItemStyle_KitAsset(uint64_t *a1, void *a2, void *a3, void *a4, char **a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  char v10 = a7;
  int v13 = 0;
  long long v14 = 0;
  double v15 = 0.0;
  int v16 = 1;
  uint64_t v17 = a10;
  CGRect v44 = a5;
  uint64_t v18 = 0;
  int v19 = 1;
  unint64_t v20 = 0;
  int v21 = 1;
  int v22 = 0;
  switch(a9)
  {
    case 0:
      uint64_t v23 = _UINSLocalizedStringWithDefaultValue(@"Done", @"Done");
      uint64_t v24 = 0;
      long long v14 = 0;
      unint64_t v20 = 0;
      double v25 = 0;
      char v26 = 1;
      uint64_t v17 = 2;
      int v21 = 1;
      goto LABEL_49;
    case 1:
      uint64_t v23 = _UINSLocalizedStringWithDefaultValue(@"Cancel", @"Cancel");
      uint64_t v24 = 0;
      long long v14 = 0;
      unint64_t v20 = 0;
      double v25 = 0;
      char v26 = 1;
      int v21 = 1;
      goto LABEL_14;
    case 2:
      uint64_t v23 = _UINSLocalizedStringWithDefaultValue(@"Edit", @"Edit");
      uint64_t v24 = 0;
      long long v14 = 0;
      unint64_t v20 = 0;
      double v25 = 0;
      int v21 = 1;
      char v26 = 1;
LABEL_14:
      uint64_t v17 = 1;
      goto LABEL_49;
    case 3:
      uint64_t v23 = _UINSLocalizedStringWithDefaultValue(@"Save", @"Save");
      uint64_t v24 = 0;
      long long v14 = 0;
      unint64_t v20 = 0;
      double v25 = 0;
      char v26 = 1;
      uint64_t v17 = 2;
      int v21 = 1;
      goto LABEL_49;
    case 4:
      int v16 = 0;
      int v19 = 0;
      int v13 = 0;
      int v22 = 0;
      int v21 = 1;
      unint64_t v20 = @"UIButtonBarNewLandscape.png";
      uint64_t v18 = @"UIButtonBarNewSmall.png";
      long long v14 = @"UIButtonBarNew.png";
      if (!a10) {
        goto LABEL_65;
      }
      goto LABEL_79;
    case 5:
    case 6:
LABEL_78:
      if (a10) {
        goto LABEL_79;
      }
      goto LABEL_65;
    case 7:
      uint64_t v18 = 0;
      int v19 = 0;
      int v21 = 0;
      int v13 = 0;
      int v22 = 0;
      double v15 = 4.0;
      unint64_t v20 = @"UIButtonBarComposeLandscape.png";
      long long v14 = @"UIButtonBarCompose.png";
      if (!a10) {
        goto LABEL_65;
      }
      goto LABEL_79;
    case 8:
      uint64_t v18 = 0;
      int v19 = 0;
      int v21 = 0;
      int v13 = 0;
      unint64_t v20 = @"UIButtonBarReplyLandscape.png";
      int v22 = 1;
      long long v14 = @"UIButtonBarReply.png";
      if (!a10) {
        goto LABEL_65;
      }
      goto LABEL_79;
    case 9:
      uint64_t v18 = 0;
      int v19 = 0;
      int v21 = 0;
      int v13 = 0;
      int v22 = 0;
      unint64_t v20 = @"UIButtonBarActionSmall.png";
      long long v14 = @"UIButtonBarAction.png";
      if (!a10) {
        goto LABEL_65;
      }
      goto LABEL_79;
    case 10:
      uint64_t v18 = 0;
      int v19 = 0;
      int v21 = 0;
      int v13 = 0;
      int v22 = 0;
      unint64_t v20 = @"UIButtonBarOrganizeLandscape.png";
      long long v14 = @"UIButtonBarOrganize.png";
      if (!a10) {
        goto LABEL_65;
      }
      goto LABEL_79;
    case 11:
      uint64_t v18 = 0;
      int v19 = 0;
      int v21 = 0;
      int v13 = 0;
      int v22 = 0;
      unint64_t v20 = @"UIButtonBarBookmarksLandscape.png";
      long long v14 = @"UIButtonBarBookmarks.png";
      if (!a10) {
        goto LABEL_65;
      }
      goto LABEL_79;
    case 12:
      uint64_t v18 = 0;
      int v19 = 0;
      int v21 = 0;
      int v13 = 0;
      int v22 = 0;
      unint64_t v20 = @"UIButtonBarSearchLandscape.png";
      long long v14 = @"UIButtonBarSearch.png";
      if (!a10) {
        goto LABEL_65;
      }
      goto LABEL_79;
    case 13:
      uint64_t v18 = 0;
      int v19 = 0;
      int v13 = 0;
      int v22 = 0;
      unint64_t v20 = @"UIButtonBarRefreshLandscape.png";
      int v21 = 1;
      long long v14 = @"UIButtonBarRefresh.png";
      if (!a10) {
        goto LABEL_65;
      }
      goto LABEL_79;
    case 14:
      uint64_t v18 = 0;
      int v19 = 0;
      int v13 = 0;
      int v22 = 0;
      unint64_t v20 = @"UIButtonBarStopLandscape.png";
      int v21 = 1;
      long long v14 = @"UIButtonBarStop.png";
      if (!a10) {
        goto LABEL_65;
      }
      goto LABEL_79;
    case 15:
      int v16 = 0;
      unint64_t v20 = 0;
      int v22 = 0;
      uint64_t v18 = @"UIButtonBarCameraSmall.png";
      int v21 = 1;
      int v13 = 1;
      long long v14 = @"UIButtonBarCamera.png";
      if (!a10) {
        goto LABEL_65;
      }
      goto LABEL_79;
    case 16:
      uint64_t v18 = 0;
      int v19 = 0;
      int v21 = 0;
      int v13 = 0;
      int v22 = 0;
      unint64_t v20 = @"UIButtonBarTrashLandscape.png";
      long long v14 = @"UIButtonBarTrash.png";
      if (!a10) {
        goto LABEL_65;
      }
      goto LABEL_79;
    case 17:
      uint64_t v18 = 0;
      int v19 = 0;
      int v13 = 0;
      int v22 = 0;
      unint64_t v20 = @"UIButtonBarPlayLandscape.png";
      int v21 = 1;
      long long v14 = @"UIButtonBarPlay.png";
      if (!a10) {
        goto LABEL_65;
      }
      goto LABEL_79;
    case 18:
      uint64_t v18 = 0;
      int v19 = 0;
      int v13 = 0;
      int v22 = 0;
      unint64_t v20 = @"UIButtonBarPauseLandscape.png";
      int v21 = 1;
      long long v14 = @"UIButtonBarPause.png";
      if (!a10) {
        goto LABEL_65;
      }
      goto LABEL_79;
    case 19:
      uint64_t v18 = 0;
      unint64_t v20 = 0;
      int v13 = 0;
      int v22 = 0;
      int v21 = 1;
      long long v14 = @"UIButtonBarRewind.png";
      if (!a10) {
        goto LABEL_65;
      }
      goto LABEL_79;
    case 20:
      uint64_t v18 = 0;
      int v19 = 0;
      int v13 = 0;
      int v22 = 0;
      unint64_t v20 = @"UIButtonBarFastForwardLandscape.png";
      int v21 = 1;
      long long v14 = @"UIButtonBarFastForward.png";
      if (!a10)
      {
LABEL_65:
        if (a7)
        {
          if (!v19)
          {
            uint64_t v24 = 0;
            double v25 = 0;
            id v47 = 0;
            uint64_t v17 = 0;
            double v28 = 1.0;
            goto LABEL_103;
          }
          uint64_t v17 = 0;
          uint64_t v23 = 0;
          double v25 = 0;
          uint64_t v24 = 0;
          if (v16)
          {
            double v28 = 0.75;
          }
          else
          {
            long long v14 = v18;
            double v28 = 1.0;
          }
          if (!v16) {
            double v15 = 0.0;
          }
          if (!v14)
          {
LABEL_118:
            uint64_t v33 = 0;
            uint64_t v32 = 0;
            if (!v22) {
              goto LABEL_119;
            }
LABEL_116:
            id v48 = (id)v23;
            CGAffineTransform v37 = objc_msgSend((id)v32, "imageFlippedForRightToLeftLayoutDirection", v44);

            double v38 = [(id)v33 imageFlippedForRightToLeftLayoutDirection];

            CGAffineTransform v39 = v44;
            if ((v13 & 1) == 0) {
              goto LABEL_121;
            }
            goto LABEL_120;
          }
        }
        else
        {
          uint64_t v17 = 0;
          uint64_t v23 = 0;
          double v25 = 0;
          uint64_t v24 = 0;
          double v28 = 1.0;
          if (!v14) {
            goto LABEL_118;
          }
        }
        goto LABEL_102;
      }
LABEL_79:
      if ((a7 & 1) == 0)
      {
        uint64_t v23 = 0;
        if (v16)
        {
          double v25 = 0;
          uint64_t v24 = 0;
LABEL_86:
          BOOL v29 = v21 == 0;
          double v30 = 1.0;
          double v31 = 0.75;
          goto LABEL_87;
        }
        double v15 = 0.0;
        double v28 = 1.0;
        double v25 = 0;
        uint64_t v24 = 0;
LABEL_101:
        long long v14 = v18;
        if (!v18) {
          goto LABEL_118;
        }
LABEL_102:
        id v47 = (id)v23;
        unint64_t v20 = v14;
        goto LABEL_103;
      }
      if (v19)
      {
        if (v16)
        {
          uint64_t v24 = 0;
          double v25 = 0;
          uint64_t v23 = 0;
LABEL_83:
          BOOL v29 = v21 == 0;
          double v30 = 0.75;
          double v31 = 0.5625;
LABEL_87:
          if (v29) {
            double v28 = v30;
          }
          else {
            double v28 = v31;
          }
          if (!v14) {
            goto LABEL_118;
          }
          goto LABEL_102;
        }
        uint64_t v23 = 0;
        double v25 = 0;
        uint64_t v24 = 0;
        if (v21) {
          double v28 = 0.75;
        }
        else {
          double v28 = 1.0;
        }
        double v15 = 0.0;
        goto LABEL_101;
      }
      uint64_t v23 = 0;
      double v25 = 0;
      uint64_t v24 = 0;
LABEL_93:
      id v47 = (id)v23;
      if (v21) {
        double v28 = 0.75;
      }
      else {
        double v28 = 1.0;
      }
LABEL_103:
      uint64_t v32 = _UIImageWithName(v20);
      if (v25)
      {
        uint64_t v33 = _UIImageWithName(v25);
      }
      else
      {
        uint64_t v33 = 0;
      }
      uint64_t v23 = (uint64_t)v47;
      double v34 = 0.0;
      if (v28 != 1.0)
      {
        if (v32)
        {
          uint64_t v35 = [(id)v32 _imageScaledToProportion:3 interpolationQuality:v28];

          uint64_t v32 = v35;
        }
        double v34 = v28 * 0.0;
        double v15 = v15 * v28;
        if (v33)
        {
          uint64_t v36 = [(id)v33 _imageScaledToProportion:3 interpolationQuality:v28];

          uint64_t v33 = v36;
        }
        uint64_t v23 = (uint64_t)v47;
      }
      if (!(v32 | v33)) {
        goto LABEL_118;
      }
      if (v34 == 0.0 && v15 == 0.0)
      {
        if (!v22) {
          goto LABEL_119;
        }
        goto LABEL_116;
      }
      objc_msgSend((id)v32, "_setAlignmentRectInsets:", v34, v34, v34, v15, v44);
      objc_msgSend((id)v33, "_setAlignmentRectInsets:", v34, v34, v34, v15);
      uint64_t v23 = (uint64_t)v47;
      if (v22) {
        goto LABEL_116;
      }
LABEL_119:
      id v48 = (id)v23;
      CGAffineTransform v37 = (void *)v32;
      double v38 = (void *)v33;
      CGAffineTransform v39 = v44;
      if (!v13) {
        goto LABEL_121;
      }
LABEL_120:
      uint64_t v40 = objc_msgSend(v37, "_imageThatSuppressesAccessibilityHairlineThickening", v44);

      uint64_t v41 = [v38 _imageThatSuppressesAccessibilityHairlineThickening];

      double v38 = (void *)v41;
      CGAffineTransform v37 = (void *)v40;
LABEL_121:
      if (a1) {
        *a1 = v17;
      }
      if (a2) {
        *a2 = v48;
      }
      if (a3) {
        *a3 = v37;
      }
      if (a4) {
        *a4 = v38;
      }
      if (v39) {
        void *v39 = v24;
      }

      return;
    case 21:
      uint64_t v23 = _UINSLocalizedStringWithDefaultValue(@"Undo", @"Undo");
      long long v14 = 0;
      unint64_t v20 = 0;
      double v25 = 0;
      uint64_t v24 = sel_undo_;
      goto LABEL_48;
    case 22:
      uint64_t v23 = _UINSLocalizedStringWithDefaultValue(@"Redo", @"Redo");
      long long v14 = 0;
      unint64_t v20 = 0;
      double v25 = 0;
      uint64_t v24 = sel_redo_;
LABEL_48:
      uint64_t v17 = 1;
      char v26 = 1;
      int v21 = 1;
      goto LABEL_49;
    case 23:
      if (a6 == 2)
      {
        CGAffineTransform v42 = @"UIButtonBarPageCurlSelectedDown.png";
        if (a7) {
          CGAffineTransform v42 = @"UIButtonBarPageCurlSelectedDownLandscape.png";
        }
        double v25 = v42;
        uint64_t v24 = 0;
        char v26 = 0;
        int v21 = 0;
        uint64_t v23 = 0;
        uint64_t v17 = 1;
        unint64_t v20 = @"UIButtonBarPageCurlBlackTranslucentLandscape.png";
        long long v14 = @"UIButtonBarPageCurlBlackTranslucent.png";
      }
      else if (a6 == 1)
      {
        CGAffineTransform v43 = @"UIButtonBarPageCurlSelectedDown.png";
        if (a7) {
          CGAffineTransform v43 = @"UIButtonBarPageCurlSelectedDownLandscape.png";
        }
        double v25 = v43;
        uint64_t v24 = 0;
        char v26 = 0;
        int v21 = 0;
        uint64_t v23 = 0;
        uint64_t v17 = 1;
        unint64_t v20 = @"UIButtonBarPageCurlBlackOpaqueLandscape.png";
        long long v14 = @"UIButtonBarPageCurlBlackOpaque.png";
      }
      else if (a6)
      {
        uint64_t v24 = 0;
        long long v14 = 0;
        unint64_t v20 = 0;
        double v25 = 0;
        int v21 = 0;
        uint64_t v23 = 0;
        uint64_t v17 = 1;
        char v26 = 1;
      }
      else
      {
        uint8x8_t v27 = @"UIButtonBarPageCurlSelectedDown.png";
        if (a7) {
          uint8x8_t v27 = @"UIButtonBarPageCurlSelectedDownLandscape.png";
        }
        double v25 = v27;
        uint64_t v24 = 0;
        char v26 = 0;
        int v21 = 0;
        uint64_t v23 = 0;
        uint64_t v17 = 1;
        unint64_t v20 = @"UIButtonBarPageCurlDefaultLandscape.png";
        long long v14 = @"UIButtonBarPageCurlDefault.png";
      }
LABEL_49:
      int v22 = 0;
      int v13 = 0;
      if ((v10 & 1) == 0) {
        goto LABEL_86;
      }
      if ((v26 & 1) == 0) {
        goto LABEL_93;
      }
      goto LABEL_83;
    default:
      switch(a9)
      {
        case 'd':
          int v16 = 0;
          unint64_t v20 = 0;
          int v13 = 0;
          int v22 = 0;
          int v19 = 1;
          uint64_t v18 = @"UIButtonBarLocateSmall.png";
          int v21 = 1;
          long long v14 = @"UIButtonBarLocate.png";
          if (!a10) {
            goto LABEL_65;
          }
          goto LABEL_79;
        case 'e':
          uint64_t v18 = 0;
          int v19 = 0;
          int v13 = 0;
          unint64_t v20 = @"UIButtonBarArrowLeftLandscape.png";
          int v21 = 1;
          int v22 = 1;
          goto LABEL_61;
        case 'f':
          uint64_t v18 = 0;
          int v19 = 0;
          int v13 = 0;
          unint64_t v20 = @"UIButtonBarArrowRightLandscape.png";
          int v21 = 1;
          int v22 = 1;
          goto LABEL_64;
        case 'g':
          int v16 = 0;
          unint64_t v20 = 0;
          int v13 = 0;
          int v22 = 0;
          int v19 = 1;
          uint64_t v18 = @"UIButtonBarArrowUpSmall.png";
          int v21 = 1;
          long long v14 = @"UIButtonBarArrowUp.png";
          if (!a10) {
            goto LABEL_65;
          }
          goto LABEL_79;
        case 'h':
          int v16 = 0;
          unint64_t v20 = 0;
          int v13 = 0;
          int v22 = 0;
          int v19 = 1;
          uint64_t v18 = @"UIButtonBarArrowDownSmall.png";
          int v21 = 1;
          long long v14 = @"UIButtonBarArrowDown.png";
          if (!a10) {
            goto LABEL_65;
          }
          goto LABEL_79;
        case 'i':
          uint64_t v18 = 0;
          int v19 = 0;
          int v13 = 0;
          int v22 = 0;
          unint64_t v20 = @"UIButtonBarArrowLeftLandscape.png";
          int v21 = 1;
LABEL_61:
          long long v14 = @"UIButtonBarArrowLeft.png";
          if (!a10) {
            goto LABEL_65;
          }
          goto LABEL_79;
        case 'j':
          uint64_t v18 = 0;
          int v19 = 0;
          int v13 = 0;
          int v22 = 0;
          unint64_t v20 = @"UIButtonBarArrowRightLandscape.png";
          int v21 = 1;
LABEL_64:
          long long v14 = @"UIButtonBarArrowRight.png";
          if (!a10) {
            goto LABEL_65;
          }
          goto LABEL_79;
        case 'k':
          uint64_t v18 = 0;
          unint64_t v20 = 0;
          int v13 = 0;
          int v22 = 0;
          int v19 = 1;
          int v21 = 1;
          long long v14 = @"UIButtonBarPreviousSlide.png";
          goto LABEL_78;
        case 'l':
          uint64_t v18 = 0;
          unint64_t v20 = 0;
          int v13 = 0;
          int v22 = 0;
          int v19 = 1;
          int v21 = 1;
          long long v14 = @"UIButtonBarNextSlide.png";
          if (!a10) {
            goto LABEL_65;
          }
          goto LABEL_79;
        default:
          uint64_t v18 = 0;
          int v19 = 1;
          unint64_t v20 = 0;
          int v21 = 1;
          int v22 = 0;
          if (!a10) {
            goto LABEL_65;
          }
          goto LABEL_79;
      }
  }
}

uint64_t BarButtonItemSystemItemCanBeSet(void *a1)
{
  uint64_t v1 = qword_1EB25F3B0;
  id v2 = a1;
  if (v1 != -1) {
    dispatch_once(&qword_1EB25F3B0, &__block_literal_global_79);
  }
  int v3 = [(id)_MergedGlobals_975 containsObject:v2];

  return v3 ^ 1u;
}

void __BarButtonItemSystemItemCanBeSet_block_invoke()
{
  id v0 = objc_alloc(MEMORY[0x1E4F1CAD0]);
  id v11 = [NSNumber numberWithInteger:0];
  uint64_t v1 = [NSNumber numberWithInteger:1];
  id v2 = [NSNumber numberWithInteger:2];
  int v3 = [NSNumber numberWithInteger:3];
  uint64_t v4 = [NSNumber numberWithInteger:5];
  uint64_t v5 = [NSNumber numberWithInteger:6];
  uint64_t v6 = [NSNumber numberWithInteger:21];
  id v7 = [NSNumber numberWithInteger:22];
  unint64_t v8 = [NSNumber numberWithInteger:23];
  uint64_t v9 = objc_msgSend(v0, "initWithObjects:", v11, v1, v2, v3, v4, v5, v6, v7, v8, 0);
  char v10 = (void *)_MergedGlobals_975;
  _MergedGlobals_975 = v9;
}

id _UIButtonBarStopImage()
{
  return +[UIImage kitImageNamed:@"UIButtonBarStop.png"];
}

void sub_185CABA1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
}

void __UIContextBinderDisposeContextForBindable(void *a1, void *a2, char a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  id v6 = a2;
  id v7 = [v6 _boundContext];
  if (v6) {
    [v6 _bindingDescription];
  }
  if (v7 && (a3 & 1) != 0)
  {
    if (os_variant_has_internal_diagnostics())
    {
      unint64_t v8 = *(NSObject **)(__UILogGetCategoryCachedImpl("ContextCreation", &__UIContextBinderDisposeContextForBindable___s_category)+ 8);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = v8;
        int v10 = [v7 contextId];
        *(_DWORD *)buf = 138412802;
        long long v12 = v7;
        __int16 v13 = 1024;
        int v14 = v10;
        __int16 v15 = 2112;
        id v16 = v6;
        _os_log_impl(&dword_1853B0000, v9, OS_LOG_TYPE_DEFAULT, "Disposing CAContext: %@; contextId: 0x%X; bindable: %@",
          buf,
          0x1Cu);
      }
    }
    [v7 setLayer:0];
    [v7 invalidate];
    [v6 _setBoundContext:0];
    [v5[4] removeObject:v7];
  }
}

void __UIKIT_DID_NOT_RECEIVE_A_REMOTE_CACONTEXT_FROM_COREANIMATION_INDICATING_A_POSSIBLE_BACKBOARDD_CRASH()
{
  uint64_t v16 = 0;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x2050000000;
  id v0 = (void *)_MergedGlobals_978;
  uint64_t v19 = _MergedGlobals_978;
  if (!_MergedGlobals_978)
  {
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = __getSDRDiagnosticReporterClass_block_invoke;
    v15[3] = &unk_1E52D9900;
    v15[4] = &v16;
    __getSDRDiagnosticReporterClass_block_invoke((uint64_t)v15);
    id v0 = (void *)v17[3];
  }
  uint64_t v1 = v0;
  _Block_object_dispose(&v16, 8);
  id v2 = objc_alloc_init(v1);
  int v3 = [MEMORY[0x1E4F28B50] mainBundle];
  uint64_t v4 = [v3 bundleIdentifier];
  uint64_t v5 = [v2 signatureWithDomain:@"UIKit" type:@"Crash" subType:@"MissingRemoteCAContext" detectedProcess:v4 triggerThresholdValues:0];

  dispatch_semaphore_t v6 = dispatch_semaphore_create(0);
  uint64_t v10 = MEMORY[0x1E4F143A8];
  uint64_t v11 = 3221225472;
  long long v12 = ____UIKIT_DID_NOT_RECEIVE_A_REMOTE_CACONTEXT_FROM_COREANIMATION_INDICATING_A_POSSIBLE_BACKBOARDD_CRASH_block_invoke;
  __int16 v13 = &unk_1E52DFCE0;
  dispatch_semaphore_t v14 = v6;
  id v7 = v6;
  [v2 snapshotWithSignature:v5 duration:0 events:0 payload:0 actions:&v10 reply:0.0];
  dispatch_semaphore_wait(v7, 0xFFFFFFFFFFFFFFFFLL);
  unint64_t v8 = objc_msgSend(MEMORY[0x1E4F28B00], "currentHandler", v10, v11, v12, v13);
  uint64_t v9 = [NSString stringWithUTF8String:"void __UIKIT_DID_NOT_RECEIVE_A_REMOTE_CACONTEXT_FROM_COREANIMATION_INDICATING_A_POSSIBLE_BACKBOARDD_CRASH(CAContext *__strong)"];
  [v8 handleFailureInFunction:v9 file:@"_UIContextBinder.m" lineNumber:438 description:@"Failed to create remote render context"];
}

void sub_185CAF970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __UIKIT_DID_NOT_RECEIVE_A_LOCAL_CACONTEXT_FROM_COREANIMATION()
{
  id v1 = [MEMORY[0x1E4F28B00] currentHandler];
  id v0 = [NSString stringWithUTF8String:"void __UIKIT_DID_NOT_RECEIVE_A_LOCAL_CACONTEXT_FROM_COREANIMATION(CAContext *__strong)"];
  [v1 handleFailureInFunction:v0 file:@"_UIContextBinder.m" lineNumber:444 description:@"Failed to create local render context"];
}

Class __getSDRDiagnosticReporterClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB25F410)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    v6[3] = __SymptomDiagnosticReporterLibraryCore_block_invoke;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_1E52DFD00;
    uint64_t v8 = 0;
    qword_1EB25F410 = _sl_dlopen();
  }
  if (!qword_1EB25F410)
  {
    int v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *SymptomDiagnosticReporterLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"_UIContextBinder.m", 26, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("SDRDiagnosticReporter");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    int v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getSDRDiagnosticReporterClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UIContextBinder.m", 27, @"Unable to find class %s", "SDRDiagnosticReporter");

LABEL_10:
    __break(1u);
  }
  _MergedGlobals_978 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __SymptomDiagnosticReporterLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25F410 = result;
  return result;
}

id getTUIEmojiUpscalerClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)_MergedGlobals_1_3;
  uint64_t v7 = _MergedGlobals_1_3;
  if (!_MergedGlobals_1_3)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getTUIEmojiUpscalerClass_block_invoke;
    v3[3] = &unk_1E52D9900;
    v3[4] = &v4;
    __getTUIEmojiUpscalerClass_block_invoke((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_185CB10DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185CB1E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getTUIEmojiUpscalerClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB25BCB0)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    v6[3] = __TextInputUILibraryCore_block_invoke_2;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_1E52DFE70;
    uint64_t v8 = 0;
    qword_1EB25BCB0 = _sl_dlopen();
  }
  if (!qword_1EB25BCB0)
  {
    int v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *TextInputUILibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIKeyboardEmojiDraggableView.m", 44, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("TUIEmojiUpscaler");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    int v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getTUIEmojiUpscalerClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIKeyboardEmojiDraggableView.m", 45, @"Unable to find class %s", "TUIEmojiUpscaler");

LABEL_10:
    __break(1u);
  }
  _MergedGlobals_1_3 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __TextInputUILibraryCore_block_invoke_2()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25BCB0 = result;
  return result;
}

uint64_t __MessagesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25BCC0 = result;
  return result;
}

id _UIHyperregionClasses()
{
  if (qword_1EB25F420 != -1) {
    dispatch_once(&qword_1EB25F420, &__block_literal_global_84);
  }
  id v0 = (void *)_MergedGlobals_979;
  return v0;
}

uint64_t _UIHyperregionIsBoundaryCrossedFromPointToPoint(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = a1;
  if (objc_opt_respondsToSelector()) {
    uint64_t v6 = [v5 _isBoundaryCrossedFromPoint:a2 toPoint:a3];
  }
  else {
    uint64_t v6 = 0;
  }

  return v6;
}

void sub_185CB7738(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id __copy_helper_block_e8_56n9_8_8_s0_s8(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = *(id *)(a2 + 56);
  id result = *(id *)(a2 + 64);
  *(void *)(a1 + 64) = result;
  return result;
}

void __destroy_helper_block_e8_56n7_8_s0_s8(uint64_t a1)
{
  id v2 = *(void **)(a1 + 64);
}

id __copy_helper_block_e8_88n9_8_8_s0_s8(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 88) = *(id *)(a2 + 88);
  id result = *(id *)(a2 + 96);
  *(void *)(a1 + 96) = result;
  return result;
}

void __destroy_helper_block_e8_88n7_8_s0_s8(uint64_t a1)
{
  id v2 = *(void **)(a1 + 96);
}

uint64_t _stateMachineSpec_block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "didTransitionFrom:to:");
}

uint64_t _stateMachineSpec_block_invoke_2(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "didTransitionFrom:to:");
}

uint64_t _stateMachineSpec_block_invoke_3(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "didTransitionFrom:to:");
}

uint64_t _stateMachineSpec_block_invoke_4(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "didTransitionFrom:to:");
}

void sub_185CBDD88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185CBE2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185CBEA34(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

__CFString *_UICanvasFrameSystemTypeFromCanvasType(uint64_t a1)
{
  if (a1 <= 1)
  {
    if (!a1)
    {
LABEL_9:
      uint64_t v2 = (__CFString **)&UIWindowSceneSessionRoleApplication;
      goto LABEL_11;
    }
    if (a1 == 1)
    {
      uint64_t v2 = (__CFString **)&UIWindowSceneSessionRoleExternalDisplayNonInteractive;
      goto LABEL_11;
    }
LABEL_8:
    int v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"UISceneSessionRole  _Nonnull _UICanvasFrameSystemTypeFromCanvasType(_UICanvasSystemType)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"_UICanvasDefinition.m", 34, @"Invalid _UICanvasSystemType (%li) found. Aborting.", a1);

    goto LABEL_9;
  }
  if (a1 != 2)
  {
    if (a1 == 0x7FFFFFFFFFFFFFFELL)
    {
      uint64_t v2 = _UIWindowSceneSessionTypeCoverSheet;
      goto LABEL_11;
    }
    goto LABEL_8;
  }
  uint64_t v2 = _UIWindowSceneSessionRoleCarPlay;
LABEL_11:
  id v5 = *v2;
  return v5;
}

uint64_t _UICanvasCanvasSystemTypeFromFrameType(void *a1)
{
  uint64_t v1 = qword_1EB25F470;
  id v2 = a1;
  if (v1 != -1) {
    dispatch_once(&qword_1EB25F470, &__block_literal_global_97);
  }
  int v3 = [(id)_MergedGlobals_983 objectForKeyedSubscript:v2];

  uint64_t v4 = [v3 integerValue];
  return v4;
}

uint64_t _UICanvasLifecycleStateIsSEO(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 deactivationReasons];
  if (![v1 isForeground]) {
    goto LABEL_6;
  }
  if ((v2 & 0xFFFFFFFFFFFFFEFFLL) == 0)
  {
    if ((*(unsigned char *)(UIApp + 185) & 0x80) == 0)
    {
      uint64_t v3 = [v1 underLock];
      goto LABEL_7;
    }
LABEL_6:
    uint64_t v3 = 0;
    goto LABEL_7;
  }
  uint64_t v3 = 1;
LABEL_7:

  return v3;
}

unint64_t _UICanvasLifecycleStateIsInTaskSwitcher(void *a1)
{
  return ((unint64_t)[a1 deactivationReasons] >> 3) & 1;
}

uint64_t _UICanvasLifecycleStateIsForegroundActive(void *a1)
{
  id v1 = a1;
  if ([v1 isForeground]) {
    uint64_t v2 = _UICanvasLifecycleStateIsSEO(v1) ^ 1;
  }
  else {
    uint64_t v2 = 0;
  }

  return v2;
}

uint64_t _UICanvasLifecycleStateIsEqual(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ((v3 == 0) != (v4 != 0)
    && (uint64_t v5 = [v3 deactivationReasons], v5 == objc_msgSend(v4, "deactivationReasons"))
    && (int v6 = [v3 isForeground], v6 == objc_msgSend(v4, "isForeground")))
  {
    int v9 = [v3 underLock];
    uint64_t v7 = v9 ^ [v4 underLock] ^ 1;
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

uint64_t _UICanvasSceneLifecycleCompositeActionMaskFromStateToState(uint64_t a1, uint64_t a2)
{
  return _UICanvasSceneLifecycleCompositeActionMaskFromStateToState__staticStateMap[4 * a1 + 5 + a2];
}

void _UICanvasPerformActionsWithLifecycleActionMask(int a1, void *a2)
{
  uint64_t v5 = a2;
  if (a1 && v5)
  {
    for (uint64_t i = 0; i != 7; ++i)
    {
      int v4 = 1 << _UICanvasLifecycleActionPrecidenceArray[i];
      if ((v4 & a1) != 0)
      {
        v5[2]();
        a1 &= ~v4;
        if (!a1) {
          break;
        }
      }
    }
  }
}

uint64_t _UICanvasLifecycleCompositeActionMaskContainsActionType(unsigned int a1, char a2)
{
  return (a1 >> a2) & 1;
}

uint64_t _UICanvasLifecycleCompositeActionMaskHighestLifecycleActionType(int a1)
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  int v7 = 0;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = ___UICanvasLifecycleCompositeActionMaskHighestLifecycleActionType_block_invoke;
  v3[3] = &unk_1E52E0548;
  v3[4] = &v4;
  _UICanvasPerformActionsWithLifecycleActionMask(a1, v3);
  uint64_t v1 = *((unsigned int *)v5 + 6);
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_185CBFBBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__CFString *_UICanvasLifecycleActionDescription(unsigned int a1)
{
  if (a1 > 6) {
    return &stru_1ED0E84C0;
  }
  else {
    return off_1E52E0568[a1];
  }
}

id _UICanvasLifecycleCompositeActionMaskComponentDescriptionComponents(int a1)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x3032000000;
  uint64_t v8 = __Block_byref_object_copy__27;
  int v9 = __Block_byref_object_dispose__27;
  id v10 = [MEMORY[0x1E4F1CA48] array];
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = ___UICanvasLifecycleCompositeActionMaskComponentDescriptionComponents_block_invoke;
  v4[3] = &unk_1E52E0548;
  v4[4] = &v5;
  _UICanvasPerformActionsWithLifecycleActionMask(a1, v4);
  id v2 = (id)v6[5];
  _Block_object_dispose(&v5, 8);

  return v2;
}

void sub_185CBFD0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __UIInlinePointerSetReleaseHashTable(uint64_t a1)
{
}

void _UIUpdateRequestDispose(_DWORD *a1)
{
}

void sub_185CC0AC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185CC0C30(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_185CC0DA8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_185CC1200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t _UIDynamicButtonFeatureIsEnabled()
{
  if (qword_1EB25F490 != -1) {
    dispatch_once(&qword_1EB25F490, &__block_literal_global_98);
  }
  return _MergedGlobals_985;
}

void sub_185CC3964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185CC4118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185CC47D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185CC4D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void UICollectionViewCompositionalLayoutAlertForInvalidLayout(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, int a6)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (a6)
  {
    int v9 = [MEMORY[0x1E4F28B00] currentHandler];
    id v10 = objc_msgSend(NSString, "stringWithUTF8String:", "void UICollectionViewCompositionalLayoutAlertForInvalidLayout(UICollectionViewCompositionalLayout *const __strong, NSInteger, const __strong id<NSCollectionLayoutContainer>, const __strong id<_UIContentInsetsEnvironment>, NSString *const __strong, BOOL)");
    uint64_t v11 = objc_opt_class();
    [a4 effectiveInsets];
    long long v12 = NSStringFromDirectionalEdgeInsets(v42);
    __int16 v13 = _UIStringFromContentInsetsReference([a4 insetReference]);
    dispatch_semaphore_t v14 = [a1 collectionView];
    [v14 frame];
    __int16 v15 = NSStringFromCGRect(v43);
    [v9 handleFailureInFunction:v10, @"UICollectionViewCompositionalLayout.m", 1437, @"<%@: %p> ran into an error when computing the layout for section at index %ld in container %@. Container calculated by applying insets (%@) from sectionInsetsReference \"%@\" to collection view frame %@.\nError: %@", v11, a1, a2, a3, v12, v13, v15, a5 file lineNumber description];
  }
  uint64_t v16 = *(NSObject **)(__UILogGetCategoryCachedImpl("UICollectionLayout", &UICollectionViewCompositionalLayoutAlertForInvalidLayout___s_category)+ 8);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    uint64_t v17 = v16;
    uint64_t v18 = objc_opt_class();
    [a4 effectiveInsets];
    uint64_t v19 = NSStringFromDirectionalEdgeInsets(v44);
    unint64_t v20 = _UIStringFromContentInsetsReference([a4 insetReference]);
    int v21 = [a1 collectionView];
    [v21 frame];
    int v22 = NSStringFromCGRect(v45);
    *(_DWORD *)buf = 138414082;
    uint64_t v26 = v18;
    __int16 v27 = 2048;
    double v28 = a1;
    __int16 v29 = 2048;
    uint64_t v30 = a2;
    __int16 v31 = 2112;
    uint64_t v32 = a3;
    __int16 v33 = 2112;
    double v34 = v19;
    __int16 v35 = 2112;
    uint64_t v36 = v20;
    __int16 v37 = 2112;
    double v38 = v22;
    __int16 v39 = 2112;
    uint64_t v40 = a5;
    _os_log_impl(&dword_1853B0000, v17, OS_LOG_TYPE_ERROR, "<%@: %p> ran into an error when computing the layout for section at index %ld in container %@. Container calculated by applying insets (%@) from sectionInsetsReference \"%@\" to collection view frame %@.\nUICollectionView behavior with this layout is undefined. Break on UICollectionViewCompositionalLayoutAlertForInvalidLayout to catch this in the debugger.\nError: %@", buf, 0x52u);
  }
}

void sub_185CC6C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
}

void sub_185CC7230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185CC74B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185CC824C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
}

CGFloat _UIRectExpandByFactorAndUnitVector(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5, double a6, double a7)
{
  if (fabs(a5) >= 2.22044605e-16)
  {
    double v11 = fabs(a7);
    if (fabs(a6) >= 2.22044605e-16 || v11 >= 2.22044605e-16)
    {
      if (a5 < 0.0)
      {
        double v19 = a6;
        uint64_t v17 = objc_msgSend(MEMORY[0x1E4F28B00], "currentHandler", 2.22044605e-16, v11);
        uint64_t v18 = objc_msgSend(NSString, "stringWithUTF8String:", "CGRect _UIRectExpandByFactorAndUnitVector(CGRect, CGFloat, CGVector)");
        [v17 handleFailureInFunction:v18, @"_UICollectionLayoutHelpers.m", 377, @"Invalid parameter not satisfying: %@", @"factor >= 0.0" file lineNumber description];

        a6 = v19;
      }
      v20.origin.x = a1;
      v20.origin.y = a2;
      v20.size.double width = a3;
      v20.size.height = a4;
      double v14 = a6 * a5 * CGRectGetWidth(v20);
      v21.origin.x = a1;
      v21.origin.y = a2;
      v21.size.double width = a3;
      v21.size.height = a4;
      CGRectGetHeight(v21);
      v22.origin.x = a1;
      v22.origin.y = a2;
      v22.size.double width = a3;
      v22.size.height = a4;
      CGRectGetWidth(v22);
      v23.origin.x = a1;
      v23.origin.y = a2;
      v23.size.double width = a3;
      v23.size.height = a4;
      CGRectGetHeight(v23);
      if (v14 >= 0.0) {
        double v15 = -0.0;
      }
      else {
        double v15 = v14;
      }
      return a1 + v15;
    }
  }
  return a1;
}

double _UIRectMinPointValueAlongAxis(uint64_t a1, double a2, double a3)
{
  if ((unint64_t)(a1 - 3) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v7 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v8 = objc_msgSend(NSString, "stringWithUTF8String:", "CGFloat _UIRectMinPointValueAlongAxis(CGRect, UIAxis)");
    [v7 handleFailureInFunction:v8, @"_UICollectionLayoutHelpers.m", 412, @"Invalid parameter not satisfying: %@", @"axis == UIAxisVertical || axis == UIAxisHorizontal" file lineNumber description];
  }
  return _UIPointValueForAxis(a1, a2, a3);
}

double _UITrailingOffsetForInsetsAlongAxis(uint64_t a1, double a2, double a3, double a4, double a5)
{
  if (a1 == 2) {
    return a4;
  }
  if (a1 == 1) {
    return a5;
  }
  uint64_t v6 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v7 = objc_msgSend(NSString, "stringWithUTF8String:", "CGFloat _UITrailingOffsetForInsetsAlongAxis(NSDirectionalEdgeInsets, UIAxis)");
  [v6 handleFailureInFunction:v7 file:@"_UICollectionLayoutHelpers.m" lineNumber:502 description:@"Unknown axis"];

  return 0.0;
}

uint64_t _UIDirectionalRectEdgesForLocationRelativeToRectWithDefaultEdges(uint64_t a1, double a2, double a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  v25.origin.x = a4;
  v25.origin.y = a5;
  v25.size.double width = a6;
  v25.size.height = a7;
  if (CGRectIsNull(v25))
  {
    double v19 = [MEMORY[0x1E4F28B00] currentHandler];
    CGRect v20 = objc_msgSend(NSString, "stringWithUTF8String:", "NSDirectionalRectEdge _UIDirectionalRectEdgesForLocationRelativeToRectWithDefaultEdges(CGPoint, CGRect, NSDirectionalRectEdge)");
    [v19 handleFailureInFunction:v20, @"_UICollectionLayoutHelpers.m", 606, @"Invalid parameter not satisfying: %@", @"!CGRectIsNull(rect)" file lineNumber description];

    if (!a1) {
      goto LABEL_7;
    }
  }
  else if (!a1)
  {
    goto LABEL_7;
  }
  if ((~(_BYTE)a1 & 5) == 0)
  {
    CGRect v21 = [MEMORY[0x1E4F28B00] currentHandler];
    CGRect v22 = objc_msgSend(NSString, "stringWithUTF8String:", "NSDirectionalRectEdge _UIDirectionalRectEdgesForLocationRelativeToRectWithDefaultEdges(CGPoint, CGRect, NSDirectionalRectEdge)");
    [v21 handleFailureInFunction:v22, @"_UICollectionLayoutHelpers.m", 609, @"Invalid parameter not satisfying: %@", @"!(defaultEdges & NSDirectionalRectEdgeBottom)" file lineNumber description];
  }
  if ((~(_BYTE)a1 & 0xA) == 0)
  {
    CGRect v23 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v24 = objc_msgSend(NSString, "stringWithUTF8String:", "NSDirectionalRectEdge _UIDirectionalRectEdgesForLocationRelativeToRectWithDefaultEdges(CGPoint, CGRect, NSDirectionalRectEdge)");
    [v23 handleFailureInFunction:v24, @"_UICollectionLayoutHelpers.m", 612, @"Invalid parameter not satisfying: %@", @"!(defaultEdges & NSDirectionalRectEdgeTrailing)" file lineNumber description];
  }
LABEL_7:
  v26.origin.x = a4;
  v26.origin.y = a5;
  v26.size.double width = a6;
  v26.size.height = a7;
  if (CGRectIsEmpty(v26)) {
    return 0;
  }
  double v15 = a4 + a6 * 0.5;
  double v16 = a5 + a7 * 0.5;
  uint64_t v17 = 2;
  uint64_t v18 = 8;
  if (a2 <= v15) {
    uint64_t v18 = a1 & 0xA;
  }
  if (a2 >= v15) {
    uint64_t v17 = v18;
  }
  if (a3 < v16) {
    return v17 | 1;
  }
  if (a3 <= v16) {
    return v17 | a1 & 5;
  }
  return v17 | 4;
}

double _UIUnitVectorFromDirectionalRectEdgeAndPermittedAxis(char a1, char a2)
{
  double result = 0.0;
  double v3 = -1.0;
  double v4 = 1.0;
  if ((a1 & 8) == 0) {
    double v4 = 0.0;
  }
  if ((a1 & 2) == 0) {
    double v3 = v4;
  }
  if (a2) {
    return v3;
  }
  return result;
}

uint64_t _UILayoutAxisForAttributePair(void *a1, void *a2)
{
  [a1 frame];
  CGFloat v4 = v3;
  CGFloat v6 = v5;
  CGFloat v8 = v7;
  CGFloat v10 = v9;
  [a2 frame];
  CGFloat v12 = v11;
  CGFloat v14 = v13;
  CGFloat v16 = v15;
  CGFloat v18 = v17;
  v31.origin.x = v4;
  v31.origin.y = v6;
  v31.size.double width = v8;
  v31.size.height = v10;
  double v30 = floor(CGRectGetMaxY(v31));
  v32.origin.x = v12;
  v32.origin.y = v14;
  v32.size.double width = v16;
  v32.size.height = v18;
  double v29 = ceil(CGRectGetMinY(v32));
  v33.origin.x = v4;
  v33.origin.y = v6;
  v33.size.double width = v8;
  v33.size.height = v10;
  double MinY = CGRectGetMinY(v33);
  v34.origin.x = v12;
  v34.origin.y = v14;
  v34.size.double width = v16;
  v34.size.height = v18;
  double MaxY = CGRectGetMaxY(v34);
  v35.origin.x = v4;
  v35.origin.y = v6;
  v35.size.double width = v8;
  v35.size.height = v10;
  double MaxX = CGRectGetMaxX(v35);
  v36.origin.x = v12;
  v36.origin.y = v14;
  v36.size.double width = v16;
  v36.size.height = v18;
  double MinX = CGRectGetMinX(v36);
  v37.origin.x = v4;
  v37.origin.y = v6;
  v37.size.double width = v8;
  v37.size.height = v10;
  double v19 = ceil(CGRectGetMinX(v37));
  v38.origin.x = v12;
  v38.origin.y = v14;
  v38.size.double width = v16;
  v38.size.height = v18;
  double v20 = floor(CGRectGetMaxX(v38));
  if (v30 <= v29 && v19 < v20) {
    return 2;
  }
  BOOL v22 = v19 < v20;
  BOOL v23 = floor(MaxX) > ceil(MinX);
  if (ceil(MinY) >= floor(MaxY)) {
    BOOL v23 = 1;
  }
  if (v30 > v29) {
    BOOL v22 = 1;
  }
  return !v23 || !v22;
}

uint64_t _UILayoutAxisForAttributeTriple(void *a1, void *a2, void *a3)
{
  uint64_t v6 = _UILayoutAxisForAttributePair(a1, a2);
  uint64_t v7 = v6;
  uint64_t v8 = _UILayoutAxisForAttributePair(a2, a3);
  if (v6 != v8)
  {
    uint64_t v9 = v8;
    CGFloat v10 = [a1 indexPath];
    uint64_t v11 = [v10 section];

    CGFloat v12 = [a2 indexPath];
    uint64_t v13 = [v12 section];

    CGFloat v14 = [a3 indexPath];
    uint64_t v15 = [v14 section];

    if (v11 != v13 || v13 == v15)
    {
      if (v11 == v13 || (uint64_t v7 = v9, v13 != v15))
      {
        [a2 frame];
        CGFloat v17 = v16;
        CGFloat v19 = v18;
        CGFloat v21 = v20;
        CGFloat v23 = v22;
        [a1 frame];
        double v28 = UIDistanceBetweenRects(v17, v19, v21, v23, v24, v25, v26, v27);
        [a2 frame];
        CGFloat v30 = v29;
        CGFloat v32 = v31;
        CGFloat v34 = v33;
        CGFloat v36 = v35;
        [a3 frame];
        if (v28 >= UIDistanceBetweenRects(v30, v32, v34, v36, v37, v38, v39, v40)) {
          return v9;
        }
        else {
          return v6;
        }
      }
    }
  }
  return v7;
}

void _UIApplyRTLTransformForFrameWithDimension(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  if (CGRectIsInfinite(*(CGRect *)&a1))
  {
    CGFloat v10 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v11 = objc_msgSend(NSString, "stringWithUTF8String:", "CGRect _UIApplyRTLTransformForFrameWithDimension(CGRect, CGFloat)");
    [v10 handleFailureInFunction:v11, @"_UICollectionLayoutHelpers.m", 821, @"Invalid parameter not satisfying: %@", @"!CGRectIsInfinite(frame)" file lineNumber description];
  }
  v19.origin.x = a1;
  v19.origin.y = a2;
  v19.size.double width = a3;
  v19.size.height = a4;
  if (CGRectIsNull(v19))
  {
    CGFloat v12 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v13 = objc_msgSend(NSString, "stringWithUTF8String:", "CGRect _UIApplyRTLTransformForFrameWithDimension(CGRect, CGFloat)");
    [v12 handleFailureInFunction:v13, @"_UICollectionLayoutHelpers.m", 822, @"Invalid parameter not satisfying: %@", @"!CGRectIsNull(frame)" file lineNumber description];
  }
  if (a5 <= 0.0)
  {
    CGFloat v14 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v15 = objc_msgSend(NSString, "stringWithUTF8String:", "CGRect _UIApplyRTLTransformForFrameWithDimension(CGRect, CGFloat)");
    [v14 handleFailureInFunction:v15, @"_UICollectionLayoutHelpers.m", 823, @"Invalid parameter not satisfying: %@", @"layoutDimension > 0" file lineNumber description];
  }
  memset(&v18, 0, sizeof(v18));
  CGAffineTransformMakeTranslation(&v18, a5, 0.0);
  CGAffineTransform v16 = v18;
  memset(&v17, 0, sizeof(v17));
  CGAffineTransformScale(&v17, &v16, -1.0, 1.0);
  CGAffineTransform v16 = v17;
  v20.origin.x = a1;
  v20.origin.y = a2;
  v20.size.double width = a3;
  v20.size.height = a4;
  CGRectApplyAffineTransform(v20, &v16);
}

__CFString *_UIAxisDescription(unint64_t a1)
{
  if (a1 > 3) {
    return @"<unknown>";
  }
  else {
    return off_1E52E12E0[a1];
  }
}

void sub_185CCC6DC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

double _UICollectionLayoutDistanceBetweenPointsOnAxis(uint64_t a1, double a2, double a3, double a4, double a5)
{
  if ((unint64_t)(a1 - 1) > 1) {
    double v5 = sqrt((a4 - a2) * (a4 - a2) + (a5 - a3) * (a5 - a3));
  }
  else {
    double v5 = _UIPointValueForAxis(a1, a4 - a2, a5 - a3);
  }
  return fabs(v5);
}

__CFString *_UIStringFromContentInsetsReference(unint64_t a1)
{
  if (a1 > 4) {
    return @"unknown";
  }
  else {
    return off_1E52E1328[a1];
  }
}

id __copy_helper_block_e8_32n41_8_8_t0w64_s64_s72_s80_s88_s96_t104w4_s112(uint64_t a1, uint64_t a2)
{
  return __copy_constructor_8_8_t0w64_s64_s72_s80_s88_s96_t104w4_s112(a1 + 32, (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32n26_8_s64_s72_s80_s88_s96_s112(uint64_t a1)
{
}

void __UITextInputSessionAccidentalDictationIdentifyTruePositive_block_invoke(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  uint64_t v8 = UITextInputSessionLog();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    int v22 = 134218242;
    uint64_t v23 = a3;
    __int16 v24 = 2112;
    id v25 = v7;
    _os_log_debug_impl(&dword_1853B0000, v8, OS_LOG_TYPE_DEBUG, "[UITextInputSessionAccidentalDictation] TP: Checking idx %lu: %@", (uint8_t *)&v22, 0x16u);
  }

  if (a3)
  {
    uint64_t v9 = a1 + 32;
    if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
    {
      CGFloat v10 = [v7 asDictationBegan];

      if (v10)
      {
        *(void *)(*(void *)(*(void *)v9 + 8) + 24) = 0;
        uint64_t v11 = UITextInputSessionLog();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v22) = 0;
          CGFloat v12 = "[UITextInputSessionAccidentalDictation] TP stage 2";
LABEL_12:
          _os_log_debug_impl(&dword_1853B0000, v11, OS_LOG_TYPE_DEBUG, v12, (uint8_t *)&v22, 2u);
          goto LABEL_26;
        }
        goto LABEL_26;
      }
    }
LABEL_14:
    CGAffineTransform v16 = [v7 asKeyboardDockItemButtonPress];
    uint64_t v11 = v16;
    if (a3
      && (!*(void *)(*(void *)(*(void *)v9 + 8) + 24) ? (BOOL v17 = v16 == 0) : (BOOL v17 = 1),
          !v17 && [v16 buttonType] == 1 && [v11 uiOrientation] == 1))
    {
      if ([v11 buttonPressResult] == 3)
      {
        *(void *)(*(void *)(*(void *)v9 + 8) + 24) = 0;
        CGAffineTransform v18 = UITextInputSessionLog();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v22) = 0;
          CGRect v19 = "[UITextInputSessionAccidentalDictation] TP stage 3";
LABEL_31:
          _os_log_debug_impl(&dword_1853B0000, v18, OS_LOG_TYPE_DEBUG, v19, (uint8_t *)&v22, 2u);
        }
      }
      else
      {
        uint64_t v20 = [v11 buttonPressResult];
        uint64_t v21 = *(void *)(*(void *)v9 + 8);
        if (v20 != 1)
        {
          *(void *)(v21 + 24) = 2;
          *a4 = 1;
          CGAffineTransform v18 = UITextInputSessionLog();
          if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_25;
          }
          LOWORD(v22) = 0;
          CGRect v19 = "[UITextInputSessionAccidentalDictation] TP stage 5 - INVALID";
          goto LABEL_31;
        }
        *(void *)(v21 + 24) = 1;
        *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a3;
        *a4 = 1;
        CGAffineTransform v18 = UITextInputSessionLog();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v22) = 0;
          CGRect v19 = "[UITextInputSessionAccidentalDictation] TP stage 4 - VALID";
          goto LABEL_31;
        }
      }
    }
    else
    {
      *(void *)(*(void *)(*(void *)v9 + 8) + 24) = 2;
      *a4 = 1;
      CGAffineTransform v18 = UITextInputSessionLog();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v22) = 0;
        CGRect v19 = "[UITextInputSessionAccidentalDictation] TP stage 6 - INVALID";
        goto LABEL_31;
      }
    }
LABEL_25:

    goto LABEL_26;
  }
  uint64_t v13 = [v7 asInsertion];
  if (!v13 || (v14 = (void *)v13, uint64_t v15 = [v7 source], v14, v15 != 2))
  {
    uint64_t v9 = a1 + 32;
    goto LABEL_14;
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  uint64_t v11 = UITextInputSessionLog();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v22) = 0;
    CGFloat v12 = "[UITextInputSessionAccidentalDictation] TP stage 1";
    goto LABEL_12;
  }
LABEL_26:
}

void __UITextInputSessionAccidentalDictationIdentifyFalsePositive_block_invoke(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  uint64_t v8 = UITextInputSessionLog();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    int v20 = 134218242;
    uint64_t v21 = a3;
    __int16 v22 = 2112;
    id v23 = v7;
    _os_log_debug_impl(&dword_1853B0000, v8, OS_LOG_TYPE_DEBUG, "[UITextInputSessionAccidentalDictation] FP: Checking idx %lu: %@", (uint8_t *)&v20, 0x16u);
  }

  if (a3)
  {
    uint64_t v9 = a1 + 32;
    if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
    {
      CGFloat v10 = [v7 asDictationBegan];

      if (v10)
      {
        *(void *)(*(void *)(*(void *)v9 + 8) + 24) = 0;
        uint64_t v11 = UITextInputSessionLog();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v20) = 0;
          CGFloat v12 = "[UITextInputSessionAccidentalDictation] FP stage 2";
LABEL_11:
          _os_log_debug_impl(&dword_1853B0000, v11, OS_LOG_TYPE_DEBUG, v12, (uint8_t *)&v20, 2u);
          goto LABEL_24;
        }
        goto LABEL_24;
      }
    }
LABEL_12:
    CGFloat v14 = [v7 asKeyboardDockItemButtonPress];
    uint64_t v11 = v14;
    if (a3
      && (!*(void *)(*(void *)(*(void *)v9 + 8) + 24) ? (BOOL v15 = v14 == 0) : (BOOL v15 = 1),
          !v15 && [v14 buttonType] == 1 && [v11 uiOrientation] == 1))
    {
      if ([v11 buttonPressResult] == 3)
      {
        *(void *)(*(void *)(*(void *)v9 + 8) + 24) = 0;
        CGAffineTransform v16 = UITextInputSessionLog();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v20) = 0;
          BOOL v17 = "[UITextInputSessionAccidentalDictation] FP stage 3";
LABEL_29:
          _os_log_debug_impl(&dword_1853B0000, v16, OS_LOG_TYPE_DEBUG, v17, (uint8_t *)&v20, 2u);
        }
      }
      else
      {
        uint64_t v18 = [v11 buttonPressResult];
        uint64_t v19 = *(void *)(*(void *)v9 + 8);
        if (v18 != 1)
        {
          *(void *)(v19 + 24) = 2;
          *a4 = 1;
          CGAffineTransform v16 = UITextInputSessionLog();
          if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_23;
          }
          LOWORD(v20) = 0;
          BOOL v17 = "[UITextInputSessionAccidentalDictation] FP stage 5 - INVALID";
          goto LABEL_29;
        }
        *(void *)(v19 + 24) = 1;
        *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a3;
        *a4 = 1;
        CGAffineTransform v16 = UITextInputSessionLog();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v20) = 0;
          BOOL v17 = "[UITextInputSessionAccidentalDictation] FP stage 4 - VALID";
          goto LABEL_29;
        }
      }
    }
    else
    {
      *(void *)(*(void *)(*(void *)v9 + 8) + 24) = 2;
      *a4 = 1;
      CGAffineTransform v16 = UITextInputSessionLog();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v20) = 0;
        BOOL v17 = "[UITextInputSessionAccidentalDictation] FP stage 6 - INVALID";
        goto LABEL_29;
      }
    }
LABEL_23:

    goto LABEL_24;
  }
  uint64_t v13 = [v7 asDictationEnded];

  uint64_t v9 = a1 + 32;
  if (!v13) {
    goto LABEL_12;
  }
  *(void *)(*(void *)(*(void *)v9 + 8) + 24) = 0;
  uint64_t v11 = UITextInputSessionLog();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v20) = 0;
    CGFloat v12 = "[UITextInputSessionAccidentalDictation] FP stage 1";
    goto LABEL_11;
  }
LABEL_24:
}

_UITextInputSessionAcccidentalDictationResult *UITextInputSessionAccidentalDictationCheckForDictationResult(void *a1)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  double v31 = objc_alloc_init(_UITextInputSessionAcccidentalDictationResult);
  [(_UITextInputSessionAcccidentalDictationResult *)v31 setResult:0];
  uint64_t v2 = UITextInputSessionLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_1853B0000, v2, OS_LOG_TYPE_DEBUG, "[UITextInputSessionAccidentalDictation] Received actions (most recent to oldest):", buf, 2u);
  }

  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v32 objects:v44 count:16];
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)v33;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v33 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void *)(*((void *)&v32 + 1) + 8 * v7);
        uint64_t v9 = UITextInputSessionLog();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134218242;
          *(void *)&uint8_t buf[4] = v5;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v8;
          _os_log_debug_impl(&dword_1853B0000, v9, OS_LOG_TYPE_DEBUG, "[UITextInputSessionAccidentalDictation]  %lu: %@", buf, 0x16u);
          ++v5;
        }

        ++v7;
      }
      while (v4 != v7);
      uint64_t v4 = [v3 countByEnumeratingWithState:&v32 objects:v44 count:16];
    }
    while (v4);
  }

  if ((unint64_t)[v3 count] >= 2)
  {
    id v10 = v3;
    uint64_t v40 = 0;
    uint64_t v41 = &v40;
    uint64_t v42 = 0x2020000000;
    uint64_t v43 = 0;
    uint64_t v36 = 0;
    CGFloat v37 = &v36;
    uint64_t v38 = 0x2020000000;
    uint64_t v39 = -1;
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = __UITextInputSessionAccidentalDictationIdentifyTruePositive_block_invoke;
    CGAffineTransform v46 = &unk_1E52E1780;
    id v47 = &v40;
    id v48 = &v36;
    [v10 enumerateObjectsUsingBlock:buf];
    uint64_t v11 = v37[3];
    _Block_object_dispose(&v36, 8);
    _Block_object_dispose(&v40, 8);

    if ((v11 & 0x8000000000000000) == 0)
    {
      CGFloat v12 = UITextInputSessionLog();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        *(void *)&uint8_t buf[4] = @"com.apple.inputAnalytics.accidentalDictation";
        _os_log_debug_impl(&dword_1853B0000, v12, OS_LOG_TYPE_DEBUG, "[UITextInputSessionAccidentalDictation] %@: True Positive", buf, 0xCu);
      }

      [(_UITextInputSessionAcccidentalDictationResult *)v31 setResult:1];
      uint64_t v13 = [v10 objectAtIndex:v11];
      CGFloat v14 = [v13 asKeyboardDockItemButtonPress];
      [(_UITextInputSessionAcccidentalDictationResult *)v31 setTriggerAction:v14];
      goto LABEL_48;
    }
    id v15 = v10;
    uint64_t v40 = 0;
    uint64_t v41 = &v40;
    uint64_t v42 = 0x2020000000;
    uint64_t v43 = 0;
    uint64_t v36 = 0;
    CGFloat v37 = &v36;
    uint64_t v38 = 0x2020000000;
    uint64_t v39 = -1;
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = __UITextInputSessionAccidentalDictationIdentifyFalsePositive_block_invoke;
    CGAffineTransform v46 = &unk_1E52E1780;
    id v47 = &v40;
    id v48 = &v36;
    [v15 enumerateObjectsUsingBlock:buf];
    uint64_t v16 = v37[3];
    _Block_object_dispose(&v36, 8);
    _Block_object_dispose(&v40, 8);

    if ((v16 & 0x8000000000000000) == 0)
    {
      BOOL v17 = UITextInputSessionLog();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        *(void *)&uint8_t buf[4] = @"com.apple.inputAnalytics.accidentalDictation";
        _os_log_debug_impl(&dword_1853B0000, v17, OS_LOG_TYPE_DEBUG, "[UITextInputSessionAccidentalDictation] %@: False Positive", buf, 0xCu);
      }

      [(_UITextInputSessionAcccidentalDictationResult *)v31 setResult:2];
      uint64_t v13 = [v15 objectAtIndex:v16];
      CGFloat v14 = [v13 asKeyboardDockItemButtonPress];
      [(_UITextInputSessionAcccidentalDictationResult *)v31 setTriggerAction:v14];
      goto LABEL_48;
    }
    uint64_t v18 = [v15 objectAtIndexedSubscript:0];
    uint64_t v13 = [v18 asKeyboardDockItemButtonPress];

    uint64_t v19 = [v15 objectAtIndexedSubscript:1];
    CGFloat v14 = [v19 asKeyboardDockItemButtonPress];

    if ([v13 buttonType] == 1) {
      int v20 = v13;
    }
    else {
      int v20 = 0;
    }
    id v21 = v20;
    if ([v14 buttonType] == 1) {
      __int16 v22 = v14;
    }
    else {
      __int16 v22 = 0;
    }
    id v23 = v22;
    if (v21 && [v21 uiOrientation] == 1)
    {
      BOOL v24 = [v21 buttonPressResult] == 1;
      int v25 = 1;
    }
    else
    {
      int v25 = 0;
      BOOL v24 = 0;
    }
    if (v23 && [v23 buttonPressResult] == 2)
    {
      uint64_t v26 = [v23 uiOrientation];
      int v27 = v26 != 1 || v24;
      if (((v21 == 0) | v25) == 1 && !v27)
      {
        double v28 = UITextInputSessionLog();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412290;
          *(void *)&uint8_t buf[4] = @"com.apple.inputAnalytics.accidentalDictation";
          _os_log_debug_impl(&dword_1853B0000, v28, OS_LOG_TYPE_DEBUG, "[UITextInputSessionAccidentalDictation] %@: True Negative", buf, 0xCu);
        }
        uint64_t v29 = 3;
LABEL_46:

        [(_UITextInputSessionAcccidentalDictationResult *)v31 setResult:v29];
        [(_UITextInputSessionAcccidentalDictationResult *)v31 setTriggerAction:v14];

LABEL_48:
        goto LABEL_49;
      }
      if (v26 == 1 && v24)
      {
        double v28 = UITextInputSessionLog();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412290;
          *(void *)&uint8_t buf[4] = @"com.apple.inputAnalytics.accidentalDictation";
          _os_log_debug_impl(&dword_1853B0000, v28, OS_LOG_TYPE_DEBUG, "[UITextInputSessionAccidentalDictation] %@: False Negative", buf, 0xCu);
        }
        uint64_t v29 = 4;
        goto LABEL_46;
      }
    }

    goto LABEL_48;
  }
LABEL_49:

  return v31;
}

void sub_185CD0174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

_UITextInputSessionAcccidentalDictationResult *UITextInputSessionAccidentalDictationCheckForGlobeResult(void *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = objc_alloc_init(_UITextInputSessionAcccidentalDictationResult);
  [(_UITextInputSessionAcccidentalDictationResult *)v2 setResult:0];
  if ([v1 count])
  {
    id v3 = [v1 objectAtIndexedSubscript:0];
    uint64_t v4 = [v3 asKeyboardDockItemButtonPress];

    if ([v4 buttonType] == 2 && objc_msgSend(v4, "uiOrientation") == 1)
    {
      uint64_t v5 = UITextInputSessionLog();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        int v10 = 138412290;
        uint64_t v11 = @"com.apple.inputAnalytics.accidentalDictation";
        _os_log_debug_impl(&dword_1853B0000, v5, OS_LOG_TYPE_DEBUG, "[UITextInputSessionAccidentalDictation] %@: Globe key press - reporting touch", (uint8_t *)&v10, 0xCu);
      }

      uint64_t v6 = [v4 buttonPressResult];
      uint64_t v7 = 6;
      if (v6 != 2) {
        uint64_t v7 = 7;
      }
      if (v6 == 1) {
        uint64_t v8 = 5;
      }
      else {
        uint64_t v8 = v7;
      }
      [(_UITextInputSessionAcccidentalDictationResult *)v2 setResult:v8];
      [(_UITextInputSessionAcccidentalDictationResult *)v2 setTriggerAction:v4];
    }
  }
  return v2;
}

id UITextInputSessionAccidentalDictationGetAnalyticsPayloadForResult(void *a1, void *a2)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (![v4 result])
  {
    uint64_t v17 = 0;
    goto LABEL_37;
  }
  long long v68 = 0u;
  long long v69 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  id v63 = v3;
  id v5 = v3;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v66 objects:v72 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v67;
    while (2)
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v67 != v8) {
          objc_enumerationMutation(v5);
        }
        int v10 = *(void **)(*((void *)&v66 + 1) + 8 * i);
        uint64_t v11 = [v10 language];
        if (v11)
        {

LABEL_15:
          uint64_t v16 = [v10 language];
          uint64_t v15 = [v10 region];
          uint64_t v14 = [v10 keyboardVariant];
          uint64_t v13 = [v10 keyboardLayout];
          uint64_t v6 = [v10 keyboardType];
          goto LABEL_16;
        }
        uint64_t v12 = [v10 region];

        if (v12) {
          goto LABEL_15;
        }
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v66 objects:v72 count:16];
      uint64_t v6 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      if (v7) {
        continue;
      }
      break;
    }
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
  }
LABEL_16:
  uint64_t v61 = (__CFString *)v6;
  uint64_t v62 = (__CFString *)v14;

  uint64_t v18 = [v4 triggerAction];
  [v18 buttonSize];
  double v20 = v19;

  id v21 = [v4 triggerAction];
  [v21 buttonSize];
  double v23 = v22;

  BOOL v24 = NSNumber;
  int v25 = [v4 triggerAction];
  [v25 touchDownPoint];
  uint64_t v60 = [v24 numberWithInt:(int)(v26 / v20 * 100.0)];

  int v27 = NSNumber;
  double v28 = [v4 triggerAction];
  [v28 touchDownPoint];
  uint64_t v65 = [v27 numberWithInt:(int)(v29 / v23 * 100.0)];

  CGFloat v30 = NSNumber;
  double v31 = [v4 triggerAction];
  [v31 touchUpPoint];
  uint64_t v64 = [v30 numberWithInt:(int)(v32 / v20 * 100.0)];

  long long v33 = NSNumber;
  long long v34 = [v4 triggerAction];
  [v34 touchUpPoint];
  uint64_t v36 = [v33 numberWithInt:(int)(v35 / v23 * 100.0)];

  CGFloat v37 = [v4 triggerAction];
  [v37 touchDuration];
  double v39 = v38;

  uint64_t v40 = [v4 triggerAction];
  [v40 touchDuration];
  double v42 = v41;
  if (v39 >= 1.0)
  {
    NSDirectionalEdgeInsets v44 = (__CFString *)v15;

    uint64_t v43 = (__CFString *)v13;
    CGRect v45 = (__CFString *)v16;
    if (v42 >= 5.0)
    {
      uint64_t v48 = 108;
      goto LABEL_22;
    }
    uint64_t v40 = [v4 triggerAction];
    [v40 touchDuration];
    double v46 = v47 + -1.0 + v47 + -1.0 + 100.0;
  }
  else
  {
    uint64_t v43 = (__CFString *)v13;
    NSDirectionalEdgeInsets v44 = (__CFString *)v15;
    CGRect v45 = (__CFString *)v16;
    double v46 = v41 / 0.01;
  }
  uint64_t v48 = (uint64_t)v46;

LABEL_22:
  v70[0] = @"type";
  uint64_t v59 = objc_msgSend(NSNumber, "numberWithUnsignedLong:", objc_msgSend(v4, "result"));
  v71[0] = v59;
  v70[1] = @"width";
  uint64_t v58 = [NSNumber numberWithDouble:v20];
  v71[1] = v58;
  v70[2] = @"height";
  uint64_t v57 = [NSNumber numberWithDouble:v23];
  v71[2] = v57;
  v71[3] = v60;
  v70[3] = @"downX";
  v70[4] = @"downY";
  v71[4] = v65;
  v71[5] = v64;
  v70[5] = @"upX";
  v70[6] = @"upY";
  v71[6] = v36;
  v70[7] = @"touchDuration";
  uint64_t v49 = [NSNumber numberWithLong:v48];
  CGAffineTransform v50 = (void *)v49;
  double v51 = @"None";
  if (v45) {
    CGAffineTransform v52 = v45;
  }
  else {
    CGAffineTransform v52 = @"None";
  }
  v71[7] = v49;
  v71[8] = v52;
  v70[8] = @"language";
  v70[9] = @"region";
  if (v44) {
    CGAffineTransform v53 = v44;
  }
  else {
    CGAffineTransform v53 = @"None";
  }
  if (v62) {
    v54 = v62;
  }
  else {
    v54 = @"None";
  }
  v71[9] = v53;
  v71[10] = v54;
  v70[10] = @"keyboardVariant";
  v70[11] = @"keyboardLayout";
  v70[12] = @"keyboardType";
  if (v43) {
    uint64_t v55 = v43;
  }
  else {
    uint64_t v55 = @"None";
  }
  if (v61) {
    double v51 = v61;
  }
  v71[11] = v55;
  v71[12] = v51;
  uint64_t v17 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v71 forKeys:v70 count:13];

  id v3 = v63;
LABEL_37:

  return v17;
}

__CFString *_UITextInputSessionAccidentalDictationOutcomeString(unint64_t a1)
{
  if (a1 > 7) {
    return @"?";
  }
  else {
    return off_1E52E17A0[a1];
  }
}

void sub_185CD22C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<_UIOrderedRangeIndexerImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ED0BEA90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<_UIOrderedRangeIndexerImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ED0BEA90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18C107380);
}

void sub_185CD24F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 80), 8);

  _Unwind_Resume(a1);
}

void sub_185CD262C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

uint64_t _UIRTreeContainerNode<unsigned long>::enumerate(uint64_t result, unsigned char *a2, uint64_t a3)
{
  id v5 = (void *)result;
  uint64_t v6 = *(void *)(result + 72) - *(void *)(result + 64);
  if (v6)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    unint64_t v9 = v6 >> 3;
    if (v9 <= 1) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = v9;
    }
    while (1)
    {
      uint64_t v11 = v5[8] + v7;
      uint64_t v12 = (long long *)(v5[11] + 32 * v8);
      long long v13 = *v12;
      long long v14 = v12[1];
      uint64_t v15 = *(uint64_t (**)(uint64_t, void *, uint64_t, _OWORD *, unsigned char *))(a3 + 16);
      v20[0] = v13;
      v20[1] = v14;
      double result = v15(a3, v5, v11, v20, a2);
      if (*a2) {
        break;
      }
      ++v8;
      v7 += 8;
      if (v10 == v8) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    uint64_t v16 = v5[5];
    uint64_t v17 = v5[6];
    if (v16 != v17)
    {
      uint64_t v18 = v16 + 16;
      do
      {
        double result = _UIRTreeContainerNode<unsigned long>::enumerate(*(void *)(v18 - 16), a2, a3);
        if (*a2) {
          BOOL v19 = 1;
        }
        else {
          BOOL v19 = v18 == v17;
        }
        v18 += 16;
      }
      while (!v19);
    }
  }
  return result;
}

void sub_185CD2940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__37(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

double _UIRTreeExpansionCostScoreForFrames(float64x2_t *a1, float64x2_t *a2)
{
  float64x2_t v2 = a1[1];
  float64x2_t v3 = vaddq_f64(*a1, vminnmq_f64(v2, (float64x2_t)0));
  float64x2_t v4 = vabsq_f64(v2);
  float64x2_t v5 = a2[1];
  float64x2_t v6 = vaddq_f64(*a2, vminnmq_f64(v5, (float64x2_t)0));
  float64x2_t v7 = vaddq_f64(v3, v4);
  float64x2_t v8 = vaddq_f64(v6, vabsq_f64(v5));
  int64x2_t v9 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(v7, v8), (int8x16_t)vcgeq_f64(v6, v3));
  if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v9, 1), (int8x16_t)v9).u64[0] & 0x8000000000000000) != 0) {
    return 0.0;
  }
  int64x2_t v10 = (int64x2_t)vsubq_f64(vmaxnmq_f64(v7, v8), vminnmq_f64(v3, v6));
  float64x2_t v11 = vmulq_f64((float64x2_t)vzip1q_s64(v10, (int64x2_t)v4), (float64x2_t)vzip2q_s64(v10, (int64x2_t)v4));
  *(void *)&double result = *(_OWORD *)&vdivq_f64(v11, (float64x2_t)vdupq_laneq_s64((int64x2_t)v11, 1));
  return result;
}

void std::__shared_ptr_emplace<_UIRTreeContainerNode<unsigned long>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ED0BEA58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<_UIRTreeContainerNode<unsigned long>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ED0BEA58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18C107380);
}

void _UIRTreeContainerNode<unsigned long>::~_UIRTreeContainerNode(uint64_t a1)
{
  _UIRTreeContainerNode<unsigned long>::~_UIRTreeContainerNode(a1);
  JUMPOUT(0x18C107380);
}

void std::__shared_ptr_emplace<_UIRTreeContainerNode<_UICollectionViewRTreeElement>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ED0BEA20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<_UIRTreeContainerNode<_UICollectionViewRTreeElement>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ED0BEA20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18C107380);
}

void _UIRTreeContainerNode<_UICollectionViewRTreeElement>::~_UIRTreeContainerNode(uint64_t a1)
{
  _UIRTreeContainerNode<_UICollectionViewRTreeElement>::~_UIRTreeContainerNode(a1);
  JUMPOUT(0x18C107380);
}

void _emitDebugLogForTransition(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)__UILogGetCategoryCachedImpl("EventDeferring", &qword_1EB25F748))
  {
    float64x2_t v8 = -[_UIEventDeferringManager _transactionAssertion](*(id **)a4);
    if ([a3 length])
    {
      int64x2_t v9 = [NSString stringWithFormat:@"\n%@actionSpecificLog: %@", @"    ", a3];
    }
    else
    {
      int64x2_t v9 = &stru_1ED0E84C0;
    }
    unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("EventDeferring", &qword_1EB25F750);
    if (*(unsigned char *)CategoryCachedImpl)
    {
      float64x2_t v11 = *(NSObject **)(CategoryCachedImpl + 8);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        uint64_t v12 = *(id **)a4;
        uint64_t v13 = *(void *)(a4 + 16);
        uint64_t v14 = _NSStringFromUIDeferringState[a1];
        uint64_t v15 = _NSStringFromUIDeferringAction[a2];
        uint64_t v16 = v11;
        uint64_t v17 = _descriptionForTransactionContext(a4);
        *(_DWORD *)buf = 134351106;
        BOOL v19 = v12;
        __int16 v20 = 2114;
        uint64_t v21 = v13;
        __int16 v22 = 2114;
        uint64_t v23 = v14;
        __int16 v24 = 2114;
        int v25 = v15;
        __int16 v26 = 2114;
        int v27 = v9;
        __int16 v28 = 2112;
        double v29 = @"    ";
        __int16 v30 = 2114;
        double v31 = v8;
        __int16 v32 = 2112;
        long long v33 = @"    ";
        __int16 v34 = 2114;
        double v35 = v17;
        _os_log_impl(&dword_1853B0000, v16, OS_LOG_TYPE_ERROR, "[%{public}p] [%{public}@] %{public}@ --%{public}@-->%{public}@ \n%@transaction: %{public}@; \n"
          "%@transactionContext: %{public}@",
          buf,
          0x5Cu);
      }
    }
  }
}

uint64_t stateMachineSpec_block_invoke_4_0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v140 = *MEMORY[0x1E4F143B8];
  id v6 = (id)a2[2];
  uint64_t v107 = a4;
  v109 = _NSStringFromUIDeferringAction[a4];
  if (*((unsigned char *)a2 + 48))
  {
    v88 = [MEMORY[0x1E4F28B00] currentHandler];
    v89 = [NSString stringWithUTF8String:"stateMachineSpec_block_invoke_4"];
    [v88 handleFailureInFunction:v89, @"_UIEventDeferringManager.m", 1335, @"[%p] [%@] %@: Invalid state. Unexpected value of ownerInitiatedRemoval: %d", *a2, v6, v109, *((unsigned __int8 *)a2 + 48) file lineNumber description];
  }
  uint64_t v110 = -[_UIEventDeferringManager _localRecordForEnvironment:]((id *)*a2, (uint64_t)v6);
  float64x2_t v7 = -[_UIEventDeferringManager internalBehavior]((id *)*a2);
  int v8 = [v7 wantsLocalIdealRules];

  int v9 = 0;
  int64x2_t v10 = 0;
  if (v8 && v110)
  {
    float64x2_t v11 = (id *)*a2;
    id v12 = *(id *)(v110 + 16);
    uint64_t v13 = v12;
    if (v12) {
      BOOL v14 = *((unsigned char *)v12 + 8) != 0;
    }
    else {
      BOOL v14 = 0;
    }
    id v15 = *(id *)(v110 + 16);
    uint64_t v16 = v15;
    if (v15) {
      uint64_t v17 = (void *)*((void *)v15 + 4);
    }
    else {
      uint64_t v17 = 0;
    }
    id v18 = v17;
    id WeakRetained = objc_loadWeakRetained((id *)(v110 + 32));
    __int16 v20 = -[_UIEventDeferringManager _descriptorForCompatibility:environment:deferringToken:](v11, v14, v18, (uint64_t)WeakRetained);

    uint64_t v21 = -[_UIEventDeferringManager _predicateForDescriptor:](*a2, (uint64_t)v20);
    __int16 v22 = -[_UIEventDeferringManager _targetForDescriptor:](*a2, (uint64_t)v20);
    uint64_t v23 = [MEMORY[0x1E4F4F2A0] sharedInstance];
    id v24 = objc_loadWeakRetained((id *)(v110 + 32));
    int v25 = v24;
    if (v24) {
      __int16 v26 = (void *)*((void *)v24 + 10);
    }
    else {
      __int16 v26 = 0;
    }
    id v27 = v26;
    __int16 v28 = [v23 deferEventsMatchingPredicate:v21 toTarget:v22 withReason:v27];

    double v29 = _UIEventDeferringRecreationReasonsForRecreatedRecordOfRecord((void *)v110, a2[4]);
    __int16 v30 = [_UIEventDeferringRecord alloc];
    id v31 = objc_loadWeakRetained((id *)(v110 + 32));
    int64x2_t v10 = (id *)-[_UIEventDeferringRecord _initWithDescriptor:invalidationToken:deferringToken:recordingManagerPointer:recreationReasons:](v30, v20, v28, v31, *a2, v29);

    id v32 = *(id *)(v110 + 24);
    [v32 invalidate];

    -[_UIEventDeferringManager _removeLocalRecordForEnvironment:](*a2, (uint64_t)v6);
    unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("EventDeferring", &qword_1EB25F510);
    if (*(unsigned char *)CategoryCachedImpl)
    {
      v92 = *(NSObject **)(CategoryCachedImpl + 8);
      if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
      {
        v93 = (id *)*a2;
        *(_DWORD *)buf = 134349826;
        v129 = v93;
        __int16 v130 = 2114;
        uint64_t v131 = (uint64_t)v6;
        __int16 v132 = 2114;
        uint64_t v133 = (uint64_t)v109;
        __int16 v134 = 2114;
        *(void *)v135 = v10;
        _os_log_impl(&dword_1853B0000, v92, OS_LOG_TYPE_ERROR, "[%{public}p] [%{public}@] %{public}@: Recreated local record: %{public}@", buf, 0x2Au);
      }
    }
    -[_UIEventDeferringManager _setLocalRecord:forEnvironment:](*a2, (uint64_t)v10, (uint64_t)v6);

    int v9 = 1;
  }
  int v105 = v9;
  uint64_t v122 = 0;
  v123 = &v122;
  uint64_t v124 = 0x3032000000;
  v125 = __Block_byref_object_copy__35;
  v126 = __Block_byref_object_dispose__35;
  id v127 = 0;
  __int16 v34 = -[_UIEventDeferringManager internalBehavior]((id *)*a2);
  int v35 = [v34 wantsLocalCompatibilityRules];

  if (v35)
  {
    if (*((unsigned char *)a2 + 50))
    {
      id v36 = (id)a2[7];
    }
    else
    {
      -[_UIEventDeferringManager _displayHardwareIndentifierAccountingForNotFinalizedChange:]((unsigned __int8 *)*a2, 1);
      id v36 = (id)objc_claimAutoreleasedReturnValue();
    }
    double v39 = v36;
    if (v36) {
      [MEMORY[0x1E4F4F2D0] displayWithHardwareIdentifier:v36];
    }
    else {
    uint64_t v40 = [MEMORY[0x1E4F4F2D0] builtinDisplay];
    }
    double v41 = _eventDeferringCompatibilityQueue();
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = stateMachineSpec_block_invoke_5_0;
    block[3] = &unk_1E52E1B98;
    v121 = &v122;
    id v108 = v40;
    id v119 = v108;
    id v120 = v6;
    dispatch_sync(v41, block);

    uint64_t v42 = v123[5];
    if (!v42 || (id v43 = objc_loadWeakRetained((id *)(v42 + 32)), v44 = v43 == (id)a2[1], v43, !v44))
    {
      int v38 = 0;
      CGFloat v37 = 0;
LABEL_60:

      goto LABEL_61;
    }
    v103 = (id *)*a2;
    uint64_t v45 = v123[5];
    if (v45)
    {
      id v46 = *(id *)(v45 + 16);
      double v47 = v46;
      if (v46)
      {
        BOOL v48 = *((unsigned char *)v46 + 8) != 0;
        goto LABEL_27;
      }
    }
    else
    {
      double v47 = 0;
    }
    BOOL v48 = 0;
LABEL_27:
    uint64_t v49 = v123[5];
    if (v49)
    {
      id v50 = *(id *)(v49 + 16);
      double v51 = v50;
      if (v50)
      {
        CGAffineTransform v52 = (void *)*((void *)v50 + 4);
        goto LABEL_30;
      }
    }
    else
    {
      double v51 = 0;
    }
    CGAffineTransform v52 = 0;
LABEL_30:
    id v53 = v52;
    uint64_t v54 = v123[5];
    if (v54) {
      id v55 = objc_loadWeakRetained((id *)(v54 + 32));
    }
    else {
      id v55 = 0;
    }
    -[_UIEventDeferringManager _descriptorForCompatibility:environment:deferringToken:](v103, v48, v53, (uint64_t)v55);
    id v104 = (id)objc_claimAutoreleasedReturnValue();

    v102 = -[_UIEventDeferringManager _predicateForDescriptor:](*a2, (uint64_t)v104);
    v101 = -[_UIEventDeferringManager _targetForDescriptor:](*a2, (uint64_t)v104);
    long long v56 = NSString;
    uint64_t v57 = (id *)v123[5];
    if (v57)
    {
      uint64_t v58 = (id **)objc_loadWeakRetained(v57 + 4);
      uint64_t v59 = v58;
      if (v58) {
        uint64_t v57 = v58[10];
      }
      else {
        uint64_t v57 = 0;
      }
    }
    else
    {
      uint64_t v59 = 0;
    }
    uint64_t v60 = v57;
    v100 = [v56 stringWithFormat:@"Compatibility: %@", v60];

    uint64_t v61 = [MEMORY[0x1E4F4F2A0] sharedInstance];
    v99 = [v61 deferEventsMatchingPredicate:v102 toTarget:v101 withReason:v100];

    v98 = _UIEventDeferringRecreationReasonsForRecreatedRecordOfRecord((void *)v123[5], a2[4]);
    uint64_t v62 = [_UIEventDeferringRecord alloc];
    uint64_t v63 = v123[5];
    if (v63) {
      id v64 = objc_loadWeakRetained((id *)(v63 + 32));
    }
    else {
      id v64 = 0;
    }
    uint64_t v65 = -[_UIEventDeferringRecord _initWithDescriptor:invalidationToken:deferringToken:recordingManagerPointer:recreationReasons:](v62, v104, v99, v64, *a2, v98);

    if (!v10)
    {
LABEL_53:
      double v75 = (void *)v123[5];
      if (v75) {
        double v75 = (void *)v75[3];
      }
      v76 = v75;
      [v76 invalidate];

      v77 = _eventDeferringCompatibilityQueue();
      v115[0] = MEMORY[0x1E4F143A8];
      v115[1] = 3221225472;
      v115[2] = stateMachineSpec_block_invoke_6_0;
      v115[3] = &unk_1E52D9F98;
      id v116 = v108;
      id v117 = v6;
      dispatch_sync(v77, v115);

      v78 = -[_UIEventDeferringManager _displayHardwareIndentifierAccountingForNotFinalizedChange:]((unsigned __int8 *)*a2, *((unsigned char *)a2 + 50) == 0);
      if (v78) {
        [MEMORY[0x1E4F4F2D0] displayWithHardwareIdentifier:v78];
      }
      else {
      v79 = [MEMORY[0x1E4F4F2D0] builtinDisplay];
      }
      unint64_t v80 = __UILogGetCategoryCachedImpl("EventDeferring", &qword_1EB25F518);
      if (*(unsigned char *)v80)
      {
        v94 = *(NSObject **)(v80 + 8);
        if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
        {
          v95 = (id *)*a2;
          *(_DWORD *)buf = 134349826;
          v129 = v95;
          __int16 v130 = 2114;
          uint64_t v131 = (uint64_t)v6;
          __int16 v132 = 2114;
          uint64_t v133 = (uint64_t)v109;
          __int16 v134 = 2114;
          *(void *)v135 = v65;
          _os_log_impl(&dword_1853B0000, v94, OS_LOG_TYPE_ERROR, "[%{public}p] [%{public}@] %{public}@: Recreated local compatibility record: %{public}@", buf, 0x2Au);
        }
      }
      id v81 = _eventDeferringCompatibilityQueue();
      v111[0] = MEMORY[0x1E4F143A8];
      v111[1] = 3221225472;
      v111[2] = stateMachineSpec_block_invoke_7;
      v111[3] = &unk_1E52DCB30;
      id v112 = v79;
      id v113 = v6;
      CGFloat v37 = v65;
      id v114 = v37;
      id v82 = v79;
      dispatch_sync(v81, v111);

      int v38 = 1;
      goto LABEL_60;
    }
    long long v66 = v10[2];
    if (v65) {
      long long v67 = (void *)v65[2];
    }
    else {
      long long v67 = 0;
    }
    long long v68 = v67;
    if (v66)
    {
      uint64_t v69 = v66[9];
      if (v68) {
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v69 = 0;
      if (v68)
      {
LABEL_42:
        uint64_t v70 = v68[9];
        if (v66) {
          goto LABEL_43;
        }
        goto LABEL_84;
      }
    }
    uint64_t v70 = 0;
    if (v66)
    {
LABEL_43:
      int v71 = *((_DWORD *)v66 + 5);
      if (v68)
      {
LABEL_44:
        int v72 = *((_DWORD *)v68 + 5);
        goto LABEL_45;
      }
LABEL_85:
      int v72 = 0;
LABEL_45:
      BOOL v74 = v69 == v70 && v71 == v72;

      if (!v74)
      {
        v96 = [MEMORY[0x1E4F28B00] currentHandler];
        v97 = [NSString stringWithUTF8String:"stateMachineSpec_block_invoke_4"];
        [v96 handleFailureInFunction:v97, @"_UIEventDeferringManager.m", 1420, @"[%p] [%@] %@: Invalid state. Local record target windows do not match", *a2, v6, v109 file lineNumber description];
      }
      goto LABEL_53;
    }
LABEL_84:
    int v71 = 0;
    if (v68) {
      goto LABEL_44;
    }
    goto LABEL_85;
  }
  CGFloat v37 = 0;
  int v38 = 0;
LABEL_61:
  id v83 = [v6 description];
  uint64_t v84 = [v83 UTF8String];

  v85 = v109;
  uint64_t v86 = [(__CFString *)v85 UTF8String];
  if (os_variant_has_internal_diagnostics())
  {
    v90 = *(NSObject **)(__UILogGetCategoryCachedImpl("EventDeferring", &qword_1EB25F520) + 8);
    if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
    {
      v91 = (id *)*a2;
      *(_DWORD *)buf = 134350594;
      v129 = v91;
      __int16 v130 = 2082;
      uint64_t v131 = v84;
      __int16 v132 = 2082;
      uint64_t v133 = v86;
      __int16 v134 = 1026;
      *(_DWORD *)v135 = v105;
      *(_WORD *)&v135[4] = 2050;
      *(void *)&v135[6] = v10;
      __int16 v136 = 1026;
      int v137 = v38;
      __int16 v138 = 2050;
      v139 = v37;
      _os_log_impl(&dword_1853B0000, v90, OS_LOG_TYPE_DEFAULT, "[%{public}p] [%{public}s] %{public}s: Removed local record: %{public}d; recreated local record: %{public}p; remo"
        "ved compatibility record: %{public}d; recreated compatibility record: %{public}p",
        buf,
        0x40u);
    }
  }
  if (*(unsigned char *)__UILogGetCategoryCachedImpl("EventDeferring", &qword_1EB25F528)) {
    _emitDebugLogForTransition(a3, v107, &stru_1ED0E84C0, (uint64_t)a2);
  }
  _Block_object_dispose(&v122, 8);

  return 9;
}

void sub_185CD8308(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 240), 8);
  _Unwind_Resume(a1);
}

id _UIEventDeferringRecreationReasonsForRecreatedRecordOfRecord(void *a1, uint64_t a2)
{
  float64x2_t v4 = -[_UIEventDeferringRecord recreationReasons](a1);
  uint64_t v5 = [v4 count];

  id v6 = -[_UIEventDeferringRecord recreationReasons](a1);
  float64x2_t v7 = v6;
  if (v5)
  {
    int v8 = (void *)[v6 mutableCopy];

    [v8 removeObject:@"_UIEventDeferringRecreationReasonNoLongerTopRemoteRecord"];
    [v8 removeObject:@"_UIEventDeferringRecreationReasonBehaviorDelegateSuppressed"];
    if (a2) {
      [v8 removeObject:a2];
    }
  }
  else
  {
    int v8 = v6;
  }
  return v8;
}

void stateMachineSpec_block_invoke_5_0(uint64_t *a1)
{
  uint64_t v2 = _queue_compatibilityRecord(a1[4], a1[5]);
  uint64_t v3 = *(void *)(a1[6] + 8);
  float64x2_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void stateMachineSpec_block_invoke_6_0(uint64_t a1)
{
}

void _queue_removeCompatibilityRecord(uint64_t a1, uint64_t a2)
{
  float64x2_t v4 = _eventDeferringCompatibilityQueue();
  dispatch_assert_queue_V2(v4);

  uint64_t v5 = _queue_compatibilityRecordsForDisplay(a1);
  if (v5)
  {
    id v6 = v5;
    [v5 removeObjectForKey:a2];
    uint64_t v5 = v6;
  }
}

void stateMachineSpec_block_invoke_7(uint64_t *a1)
{
}

void _queue_setCompatibilityRecord(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = _eventDeferringCompatibilityQueue();
  dispatch_assert_queue_V2(v6);

  float64x2_t v7 = _queue_compatibilityRecordsForDisplay(a1);
  if (!v7)
  {
    id v10 = (id)objc_opt_new();
    int v8 = _eventDeferringCompatibilityQueue();
    dispatch_assert_queue_V2(v8);

    int v9 = _queue_compatibilityRecords();
    [v9 setObject:v10 forKey:a1];

    float64x2_t v7 = v10;
  }
  id v11 = v7;
  [v7 setObject:a3 forKey:a2];
}

uint64_t stateMachineSpec_block_invoke_8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  id v6 = *(id *)(a2 + 16);
  float64x2_t v7 = _NSStringFromUIDeferringAction[a4];
  int v8 = -[_UIEventDeferringManager internalBehavior](*(id **)a2);
  int v9 = [v8 wantsLocalIdealRules];

  if (v9)
  {
    -[_UIEventDeferringManager _localRecordForEnvironment:](*(id **)a2, (uint64_t)v6);
    id v10 = (id *)objc_claimAutoreleasedReturnValue();
    id v11 = v10;
    if (v10)
    {
      BOOL v12 = -[_UIEventDeferringRecord needsRecreation](v10);
      if (v12)
      {
        uint64_t v13 = 0;
      }
      else
      {
        id v14 = v11[3];
        [v14 invalidate];

        uint64_t v13 = 1;
      }
      -[_UIEventDeferringRecord addRecreationReason:]((uint64_t)v11, *(void *)(a2 + 24));
      id v15 = _UIEventDeferringShorterRecreationReasonStringForReason(*(void **)(a2 + 24));
      unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("EventDeferring", &qword_1EB25F530);
      if (*(unsigned char *)CategoryCachedImpl)
      {
        id v36 = *(NSObject **)(CategoryCachedImpl + 8);
        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        {
          CGFloat v37 = *(id **)a2;
          *(_DWORD *)buf = 134350338;
          uint64_t v54 = v37;
          __int16 v55 = 2114;
          id v56 = v6;
          __int16 v57 = 2114;
          uint64_t v58 = v7;
          __int16 v59 = 1026;
          int v60 = !v12;
          __int16 v61 = 2114;
          uint64_t v62 = v15;
          __int16 v63 = 2114;
          id v64 = v11;
          _os_log_impl(&dword_1853B0000, v36, OS_LOG_TYPE_ERROR, "[%{public}p] [%{public}@] %{public}@ Disabling local record: invalidated: %{public}d; added recreation reaso"
            "n: %{public}@; record: %{public}@",
            buf,
            0x3Au);
        }
      }
    }
    else
    {
      uint64_t v13 = 0;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v17 = -[_UIEventDeferringManager internalBehavior](*(id **)a2);
  int v18 = [v17 wantsLocalCompatibilityRules];

  if (v18)
  {
    BOOL v19 = -[_UIEventDeferringManager _displayHardwareIndentifierAccountingForNotFinalizedChange:](*(unsigned __int8 **)a2, 1);
    if (v19) {
      [MEMORY[0x1E4F4F2D0] displayWithHardwareIdentifier:v19];
    }
    else {
    uint64_t v21 = [MEMORY[0x1E4F4F2D0] builtinDisplay];
    }
    uint64_t v47 = 0;
    BOOL v48 = &v47;
    uint64_t v49 = 0x3032000000;
    id v50 = __Block_byref_object_copy__35;
    double v51 = __Block_byref_object_dispose__35;
    id v52 = 0;
    __int16 v22 = _eventDeferringCompatibilityQueue();
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = stateMachineSpec_block_invoke_9;
    block[3] = &unk_1E52E1B98;
    id v46 = &v47;
    id v23 = v21;
    id v44 = v23;
    id v45 = v6;
    dispatch_sync(v22, block);

    id v24 = *(id *)(a2 + 24);
    int v25 = (void *)v48[5];
    if (!v25) {
      goto LABEL_21;
    }
    __int16 v26 = -[_UIEventDeferringRecord recreationReasons](v25);
    char v27 = [v26 containsObject:v24];

    uint64_t v28 = v48[5];
    if (!v28) {
      goto LABEL_21;
    }
    id WeakRetained = objc_loadWeakRetained((id *)(v28 + 32));
    if (WeakRetained != *(id *)(a2 + 8)) {
      char v27 = 1;
    }

    if ((v27 & 1) == 0)
    {
      BOOL v41 = -[_UIEventDeferringRecord needsRecreation]((void *)v48[5]);
      if (v41)
      {
        uint64_t v20 = 0;
      }
      else
      {
        id v31 = (void *)v48[5];
        if (v31) {
          id v31 = (void *)v31[3];
        }
        id v32 = v31;
        [v32 invalidate];

        uint64_t v20 = 1;
      }
      -[_UIEventDeferringRecord addRecreationReason:](v48[5], *(void *)(a2 + 24));
      long long v33 = _UIEventDeferringShorterRecreationReasonStringForReason(*(void **)(a2 + 24));
      unint64_t v34 = __UILogGetCategoryCachedImpl("EventDeferring", &qword_1EB25F538);
      if (*(unsigned char *)v34)
      {
        log = *(NSObject **)(v34 + 8);
        if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
        {
          int v38 = *(id **)a2;
          double v39 = (id *)v48[5];
          *(_DWORD *)buf = 134350338;
          uint64_t v54 = v38;
          __int16 v55 = 2114;
          id v56 = v6;
          __int16 v57 = 2114;
          uint64_t v58 = v7;
          __int16 v59 = 1026;
          int v60 = !v41;
          __int16 v61 = 2114;
          uint64_t v62 = v33;
          __int16 v63 = 2114;
          id v64 = v39;
          _os_log_impl(&dword_1853B0000, log, OS_LOG_TYPE_ERROR, "[%{public}p] [%{public}@] %{public}@ Disabling local compatibility record: invalidated: %{public}d; added re"
            "creation reason: %{public}@; record: %{public}@",
            buf,
            0x3Au);
        }
      }
    }
    else
    {
LABEL_21:
      uint64_t v20 = 0;
    }

    _Block_object_dispose(&v47, 8);
  }
  else
  {
    uint64_t v20 = 0;
  }
  if (*(unsigned char *)__UILogGetCategoryCachedImpl("EventDeferring", &qword_1EB25F540))
  {
    objc_msgSend(NSString, "stringWithFormat:", @"disabledLocalRecord: %d; disabledCompatibilityRecord: %d;",
      v13,
    int v35 = v20);
    _emitDebugLogForTransition(a3, a4, v35, a2);
  }
  return 5;
}

void sub_185CD8ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void stateMachineSpec_block_invoke_9(uint64_t *a1)
{
  uint64_t v2 = _queue_compatibilityRecord(a1[4], a1[5]);
  uint64_t v3 = *(void *)(a1[6] + 8);
  float64x2_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void stateMachineSpec_block_invoke_12(uint64_t a1)
{
}

uint64_t stateMachineSpec_block_invoke_13(uint64_t a1, unsigned __int8 **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  float64x2_t v7 = a2[2];
  int v8 = _NSStringFromUIDeferringAction[a4];
  if (*((unsigned char *)a2 + 48) || *((unsigned char *)a2 + 49))
  {
    int v9 = [MEMORY[0x1E4F28B00] currentHandler];
    id v10 = [NSString stringWithUTF8String:"stateMachineSpec_block_invoke_13"];
    [v9 handleFailureInFunction:v10, @"_UIEventDeferringManager.m", 1106, @"[%p] [%@] %@: Invalid state. Unexpected value of ownerInitiatedInvalidation or ownerInitiatedWriting", *a2, v7, v8 file lineNumber description];
  }
  id v11 = -[_UIEventDeferringManager _displayHardwareIndentifierAccountingForNotFinalizedChange:](*a2, 1);
  if (v11) {
    [MEMORY[0x1E4F4F2D0] displayWithHardwareIdentifier:v11];
  }
  else {
  BOOL v12 = [MEMORY[0x1E4F4F2D0] builtinDisplay];
  }
  uint64_t v32 = 0;
  long long v33 = &v32;
  uint64_t v34 = 0x3032000000;
  int v35 = __Block_byref_object_copy__35;
  id v36 = __Block_byref_object_dispose__35;
  id v37 = 0;
  uint64_t v13 = _eventDeferringCompatibilityQueue();
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = stateMachineSpec_block_invoke_14;
  block[3] = &unk_1E52E1B98;
  id v31 = &v32;
  id v14 = v12;
  id v29 = v14;
  __int16 v30 = v7;
  dispatch_sync(v13, block);

  if (v33[5])
  {
    unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("EventDeferring", &qword_1EB25F580);
    if (*(unsigned char *)CategoryCachedImpl)
    {
      __int16 v22 = *(NSObject **)(CategoryCachedImpl + 8);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        id v23 = *a2;
        uint64_t v24 = v33[5];
        *(_DWORD *)buf = 134349826;
        double v39 = v23;
        __int16 v40 = 2114;
        BOOL v41 = v7;
        __int16 v42 = 2114;
        id v43 = v8;
        __int16 v44 = 2114;
        uint64_t v45 = v24;
        _os_log_impl(&dword_1853B0000, v22, OS_LOG_TYPE_ERROR, "[%{public}p] [%{public}@] %{public}@: Removed local compatibility record: %{public}@", buf, 0x2Au);
      }
    }
    uint64_t v16 = (void *)v33[5];
    if (v16) {
      uint64_t v16 = (void *)v16[3];
    }
    uint64_t v17 = v16;
    [v17 invalidate];

    int v18 = _eventDeferringCompatibilityQueue();
    v25[0] = MEMORY[0x1E4F143A8];
    v25[1] = 3221225472;
    v25[2] = stateMachineSpec_block_invoke_15;
    v25[3] = &unk_1E52D9F98;
    id v26 = v14;
    char v27 = v7;
    dispatch_sync(v18, v25);

    uint64_t v19 = 1;
  }
  else
  {
    uint64_t v19 = 0;
  }
  if (*(unsigned char *)__UILogGetCategoryCachedImpl("EventDeferring", &qword_1EB25F588))
  {
    uint64_t v21 = objc_msgSend(NSString, "stringWithFormat:", @"removedCompatibilityRecord: %d", v19);;
    _emitDebugLogForTransition(a3, a4, v21, (uint64_t)a2);
  }
  _Block_object_dispose(&v32, 8);

  return 10;
}

void sub_185CD8F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void stateMachineSpec_block_invoke_14(uint64_t *a1)
{
  uint64_t v2 = _queue_compatibilityRecord(a1[4], a1[5]);
  uint64_t v3 = *(void *)(a1[6] + 8);
  float64x2_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void stateMachineSpec_block_invoke_15(uint64_t a1)
{
}

uint64_t stateMachineSpec_block_invoke_16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v7 = (id)a2[2];
  int v8 = _NSStringFromUIDeferringAction[a4];
  if (!*((unsigned char *)a2 + 48))
  {
    __int16 v22 = [MEMORY[0x1E4F28B00] currentHandler];
    id v23 = [NSString stringWithUTF8String:"stateMachineSpec_block_invoke_16"];
    [v22 handleFailureInFunction:v23, @"_UIEventDeferringManager.m", 1586, @"[%p] [%@] %@: Invalid state. Unexpected value of ownerInitiatedRemoval: %d", *a2, v7, v8, *((unsigned __int8 *)a2 + 48) file lineNumber description];
  }
  int v9 = (id *)*a2;
  if (*a2)
  {
    uint64_t v10 = a2[1];
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = __83___UIEventDeferringManager__remoteRecordInStackMatchingEnvironment_deferringToken___block_invoke;
    id v29 = (__CFString *)&unk_1E52E3080;
    uint64_t v30 = v10;
    id v11 = -[_UIEventDeferringManager _remoteRecordsInStackMatchingEnvironment:passingTest:]((uint64_t)v9, (uint64_t)v7, (uint64_t)buf);
    BOOL v12 = v11;
    if (v11 && (unint64_t)[v11 count] >= 2)
    {
      int v25 = [MEMORY[0x1E4F28B00] currentHandler];
      [v25 handleFailureInMethod:sel__remoteRecordInStackMatchingEnvironment_deferringToken_, v9, @"_UIEventDeferringManager.m", 2453, @"[%p] %s: Invalid state. There should not be more than one remote record matching the deferring token: matchingRecords: %@", v9, "-[_UIEventDeferringManager _remoteRecordInStackMatchingEnvironment:deferringToken:]", v12 object file lineNumber description];
    }
    int v9 = [v12 firstObject];

    uint64_t v13 = *a2;
  }
  else
  {
    uint64_t v13 = 0;
  }
  -[_UIEventDeferringManager _topRemoteRecordInStackForEnvironment:](v13, (uint64_t)v7);
  id v14 = (id *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("EventDeferring", &qword_1EB25F590);
    if (*(unsigned char *)CategoryCachedImpl)
    {
      id v26 = *(NSObject **)(CategoryCachedImpl + 8);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        uint64_t v27 = *a2;
        *(_DWORD *)buf = 134350082;
        *(void *)&uint8_t buf[4] = v27;
        *(_WORD *)&buf[12] = 2114;
        *(void *)&buf[14] = v7;
        *(_WORD *)&buf[22] = 2114;
        id v29 = v8;
        LOWORD(v30) = 1026;
        *(_DWORD *)((char *)&v30 + 2) = v9 == v14;
        HIWORD(v30) = 2114;
        id v31 = v9;
        _os_log_impl(&dword_1853B0000, v26, OS_LOG_TYPE_ERROR, "[%{public}p] [%{public}@] %{public}@: Removing remote record: wasTop: %{public}d; %{public}@",
          buf,
          0x30u);
      }
    }
    id WeakRetained = (id *)objc_loadWeakRetained(v9 + 4);
    uint64_t v17 = WeakRetained;
    if (WeakRetained)
    {
      [WeakRetained[1] removeObject:v7];
      if (!*((unsigned char *)v17 + 24) && ![v17[1] count]) {
        *((unsigned char *)v17 + 24) = 1;
      }
    }
    BOOL v18 = v9 == v14;

    id v19 = v9[3];
    [v19 invalidate];

    -[_UIEventDeferringManager _removeRemoteRecord:forEnvironment:](*a2, (uint64_t)v9, (uint64_t)v7);
    uint64_t v20 = 1;
  }
  else
  {
    BOOL v18 = 0;
    uint64_t v20 = 0;
  }
  if (*(unsigned char *)__UILogGetCategoryCachedImpl("EventDeferring", &qword_1EB25F598))
  {
    uint64_t v24 = objc_msgSend(NSString, "stringWithFormat:", @"removedRemoteRecord: %d wasTop: %d;", v20, v18);;
    _emitDebugLogForTransition(a3, a4, v24, (uint64_t)a2);
  }
  return 9;
}

void stateMachineSpec_block_invoke_18(uint64_t *a1)
{
}

uint64_t stateMachineSpec_block_invoke_19(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v5 = *(id *)(a2 + 16);
  id v6 = -[_UIEventDeferringManager _remoteDeferringRecordStackForEnvironment:](*(void *)a2, (uint64_t)v5);
  uint64_t v20 = [v6 count];
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v7 = (void *)[v6 copy];
  uint64_t v8 = [v7 countByEnumeratingWithState:&v23 objects:v27 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v24;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v24 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v12 = *(void *)(*((void *)&v23 + 1) + 8 * v11);
        if (v12)
        {
          id WeakRetained = (id *)objc_loadWeakRetained((id *)(v12 + 32));
          id v14 = WeakRetained;
          if (WeakRetained)
          {
            [WeakRetained[1] removeObject:v5];
            if (!*((unsigned char *)v14 + 24) && ![v14[1] count]) {
              *((unsigned char *)v14 + 24) = 1;
            }
          }

          id v15 = *(void **)(v12 + 24);
        }
        else
        {
          id v15 = 0;
        }
        id v16 = v15;
        [v16 invalidate];

        -[_UIEventDeferringManager _removeRemoteRecord:forEnvironment:](*(void *)a2, v12, (uint64_t)v5);
        ++v11;
      }
      while (v9 != v11);
      uint64_t v17 = [v7 countByEnumeratingWithState:&v23 objects:v27 count:16];
      uint64_t v9 = v17;
    }
    while (v17);
  }

  if (*(unsigned char *)__UILogGetCategoryCachedImpl("EventDeferring", &stateMachineSpec_block_invoke_19___s_category))
  {
    id v19 = objc_msgSend(NSString, "stringWithFormat:", @"removed remote records: %li", v20);;
    _emitDebugLogForTransition(a3, a4, v19, a2);
  }
  return 10;
}

uint64_t stateMachineSpec_block_invoke_21(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  id v7 = *(id *)(a2 + 16);
  id v53 = _NSStringFromUIDeferringAction[a4];
  uint64_t v8 = -[_UIEventDeferringManager _descriptorForCompatibility:environment:deferringToken:](*(id *)a2, 0, v7, *(void *)(a2 + 8));
  uint64_t v9 = -[_UIEventDeferringManager _predicateForDescriptor:](*(void *)a2, (uint64_t)v8);
  uint64_t v10 = -[_UIEventDeferringManager _targetForDescriptor:](*(void *)a2, (uint64_t)v8);
  uint64_t v11 = [MEMORY[0x1E4F4F2A0] sharedInstance];
  uint64_t v12 = *(void **)(a2 + 8);
  if (v12) {
    uint64_t v12 = (void *)v12[10];
  }
  uint64_t v13 = v12;
  double v51 = (void *)v10;
  id v52 = (void *)v9;
  id v14 = [v11 deferEventsMatchingPredicate:v9 toTarget:v10 withReason:v13];

  id v50 = v14;
  id v15 = -[_UIEventDeferringRecord _initWithDescriptor:invalidationToken:deferringToken:recordingManagerPointer:recreationReasons:]([_UIEventDeferringRecord alloc], v8, v14, *(void **)(a2 + 8), *(void *)a2, 0);
  unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("EventDeferring", &qword_1EB25F5F0);
  if (*(unsigned char *)CategoryCachedImpl)
  {
    id v37 = *(NSObject **)(CategoryCachedImpl + 8);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      id v38 = *(id *)a2;
      *(_DWORD *)buf = 134349826;
      id v61 = v38;
      __int16 v62 = 2114;
      uint64_t v63 = (uint64_t)v7;
      __int16 v64 = 2114;
      uint64_t v65 = (uint64_t)v53;
      __int16 v66 = 2114;
      long long v67 = v15;
      _os_log_impl(&dword_1853B0000, v37, OS_LOG_TYPE_ERROR, "[%{public}p] [%{public}@] %{public}@: Pushing remote record onto stack: %{public}@", buf, 0x2Au);
    }
  }
  -[_UIEventDeferringManager _pushRemoteRecordOnStack:forEnvironment:](*(void *)a2, (uint64_t)v15, (uint64_t)v7);
  id v17 = *(id *)a2;
  id v59 = 0;
  BOOL v18 = -[_UIEventDeferringManager _shouldDisableNewRecord:outRecreationReasons:]((uint64_t)v17, (uint64_t)v15, &v59);
  id v54 = v59;
  if (v18)
  {
    unint64_t v19 = __UILogGetCategoryCachedImpl("EventDeferring", &qword_1EB25F5F8);
    if (*(unsigned char *)v19)
    {
      id v43 = *(NSObject **)(v19 + 8);
      if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
      {
        id v44 = *(id *)a2;
        *(_DWORD *)buf = 134349826;
        id v61 = v44;
        __int16 v62 = 2114;
        uint64_t v63 = (uint64_t)v7;
        __int16 v64 = 2114;
        uint64_t v65 = (uint64_t)v53;
        __int16 v66 = 2114;
        long long v67 = v15;
        _os_log_impl(&dword_1853B0000, v43, OS_LOG_TYPE_ERROR, "[%{public}p] [%{public}@] %{public}@: Disabling new remote record: %{public}@", buf, 0x2Au);
      }
    }
    uint64_t v47 = a3;
    id v49 = v7;
    uint64_t v46 = a4;
    if (v15) {
      uint64_t v20 = (void *)v15[3];
    }
    else {
      uint64_t v20 = 0;
    }
    id v21 = v20;
    [v21 invalidate];

    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    id v22 = v54;
    uint64_t v23 = [v22 countByEnumeratingWithState:&v55 objects:v70 count:16];
    if (v23)
    {
      uint64_t v24 = v23;
      uint64_t v25 = *(void *)v56;
      do
      {
        uint64_t v26 = 0;
        do
        {
          if (*(void *)v56 != v25) {
            objc_enumerationMutation(v22);
          }
          uint64_t v27 = *(void **)(*((void *)&v55 + 1) + 8 * v26);
          uint64_t v28 = _UIEventDeferringShorterRecreationReasonStringForReason(v27);
          unint64_t v29 = __UILogGetCategoryCachedImpl("EventDeferring", &qword_1EB25F600);
          if (*(unsigned char *)v29)
          {
            log = *(NSObject **)(v29 + 8);
            if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
            {
              id v30 = *(id *)a2;
              *(_DWORD *)buf = 134349826;
              id v61 = v30;
              __int16 v62 = 2114;
              uint64_t v63 = (uint64_t)v49;
              __int16 v64 = 2114;
              uint64_t v65 = (uint64_t)v53;
              __int16 v66 = 2114;
              long long v67 = v28;
              _os_log_impl(&dword_1853B0000, log, OS_LOG_TYPE_ERROR, "[%{public}p] [%{public}@] %{public}@: Disabling new remote record for reason: %{public}@", buf, 0x2Au);
            }
          }
          -[_UIEventDeferringRecord addRecreationReason:]((uint64_t)v15, (uint64_t)v27);

          ++v26;
        }
        while (v24 != v26);
        uint64_t v31 = [v22 countByEnumeratingWithState:&v55 objects:v70 count:16];
        uint64_t v24 = v31;
      }
      while (v31);
    }

    a3 = v47;
    id v7 = v49;
    a4 = v46;
  }
  id v32 = [v7 description];
  uint64_t v33 = [v32 UTF8String];

  uint64_t v34 = v53;
  uint64_t v35 = [(__CFString *)v34 UTF8String];
  if (os_variant_has_internal_diagnostics())
  {
    double v39 = *(NSObject **)(__UILogGetCategoryCachedImpl("EventDeferring", &qword_1EB25F608) + 8);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v48 = a3;
      id v40 = *(id *)a2;
      BOOL v41 = v39;
      BOOL v42 = -[_UIEventDeferringRecord needsRecreation](v15);
      *(_DWORD *)buf = 134350082;
      id v61 = v40;
      a3 = v48;
      __int16 v62 = 2082;
      uint64_t v63 = v33;
      __int16 v64 = 2082;
      uint64_t v65 = v35;
      __int16 v66 = 2050;
      long long v67 = v15;
      __int16 v68 = 1026;
      BOOL v69 = v42;
      _os_log_impl(&dword_1853B0000, v41, OS_LOG_TYPE_DEFAULT, "[%{public}p] [%{public}s] %{public}s: Pushed remote record: %{public}p; disabled: %{public}d",
        buf,
        0x30u);
    }
  }
  if (*(unsigned char *)__UILogGetCategoryCachedImpl("EventDeferring", &qword_1EB25F610)) {
    _emitDebugLogForTransition(a3, a4, &stru_1ED0E84C0, a2);
  }

  return 8;
}

void sub_185CDA37C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id location)
{
  objc_destroyWeak(v26);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185CDCFE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,id location)
{
  objc_destroyWeak(v45);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185CDDAF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185CDDBEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
}

id _descriptionForTransactionContext(uint64_t a1)
{
  uint64_t v1 = NSString;
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  id v6 = [*(id *)(a1 + 8) succinctDescription];
  objc_msgSend(v1, "stringWithFormat:", @"<_UIDeferringTransactionContext: reason: %@; currentEnvironment: %@; recreationReasonToAdd: %@; recreationReasonToRemove: %@; deferringToken: %@>",
    v2,
    v5,
    v4,
    v3,
  id v7 = v6);

  return v7;
}

uint64_t _UIClickPresentationStatisticsReportEvent()
{
  return AnalyticsSendEventLazy();
}

id UICarPlayApplicationSceneSettingValueDescription(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (a1 == 46 || a1 == 34)
  {
    BSSettingFlagIsYes();
    uint64_t v5 = NSStringFromBOOL();
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

void sub_185CE2B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185CE3A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185CEA4D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__CFString *_delegateShortDescr(void *a1)
{
  if (a1)
  {
    uint64_t v1 = NSString;
    id v2 = a1;
    uint64_t v3 = [v1 stringWithFormat:@"<%@: %p>", objc_opt_class(), v2];
  }
  else
  {
    uint64_t v3 = @"(nil)";
  }
  return v3;
}

void sub_185CEEF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void __UISimulateCrash(uint64_t a1)
{
  uint64_t v6 = 0;
  id v7 = &v6;
  uint64_t v8 = 0x2020000000;
  id v2 = (void (*)(uint64_t, uint64_t, __CFString *))off_1EB25FDE8;
  uint64_t v9 = off_1EB25FDE8;
  if (!off_1EB25FDE8)
  {
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    v5[2] = __getSimulateCrashSymbolLoc_block_invoke;
    v5[3] = &unk_1E52D9900;
    v5[4] = &v6;
    __getSimulateCrashSymbolLoc_block_invoke(v5);
    id v2 = (void (*)(uint64_t, uint64_t, __CFString *))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v2)
  {
    v2(a1, 1801640960, @"Nil document state as argument to -[UIKeyboardInput setDocumentState:]");
  }
  else
  {
    uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    id v4 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL __UISimulateCrash(pid_t, mach_exception_data_type_t, NSString *__strong)");
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIDebug_Internal.h", 19, @"%s", dlerror());

    __break(1u);
  }
}

void sub_185CF20D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185CF32D4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_185CF688C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_185CF8490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185CF9580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185CFCC98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  objc_destroyWeak(v28);
  objc_destroyWeak(&location);
  objc_destroyWeak(v27);
  _Block_object_dispose(&a27, 8);
  objc_destroyWeak((id *)(v29 - 104));
  _Unwind_Resume(a1);
}

void sub_185CFCFD4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_185CFEFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_185D0087C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_185D03980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185D03AC4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_185D056DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185D06B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185D0CD50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185D0D878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185D1117C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_185D11CA0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_185D123A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185D131C4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_185D140E8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_185D1489C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

double latinRatio(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    unint64_t v2 = 0;
    int v3 = 0;
    do
    {
      int v4 = [v1 characterAtIndex:v2];
      if ((v4 - 192) < 0x190 || (v4 & 0xFFFFFFDF) - 65 < 0x1A) {
        ++v3;
      }
      ++v2;
    }
    while ([v1 length] > v2);
    double v6 = (double)v3;
  }
  else
  {
    double v6 = 0.0;
  }
  double v7 = v6 / (double)(unint64_t)[v1 length];

  return v7;
}

void sub_185D21820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185D21EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185D221E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185D2442C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_185D2BBA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185D2CFEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185D2E07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getTUISmartReplyGeneratorClass_block_invoke(uint64_t a1)
{
  TextInputUILibrary_0();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("TUISmartReplyGenerator");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1EB25FDD0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    unint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    int v3 = [NSString stringWithUTF8String:"Class getTUISmartReplyGeneratorClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"_UIKeyboardStateManager.m", 244, @"Unable to find class %s", "TUISmartReplyGenerator");

    __break(1u);
  }
}

void TextInputUILibrary_0()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!TextInputUILibraryCore_frameworkLibrary_0)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __TextInputUILibraryCore_block_invoke_3;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E52E4508;
    uint64_t v5 = 0;
    TextInputUILibraryCore_frameworkLibrary_0 = _sl_dlopen();
  }
  if (!TextInputUILibraryCore_frameworkLibrary_0)
  {
    uint64_t v1 = [MEMORY[0x1E4F28B00] currentHandler];
    unint64_t v2 = [NSString stringWithUTF8String:"void *TextInputUILibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"UIKeyboardInputManagerClient.h", 22, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __TextInputUILibraryCore_block_invoke_3()
{
  uint64_t result = _sl_dlopen();
  TextInputUILibraryCore_frameworkLibrary_0 = result;
  return result;
}

void __getTUIKeyboardInputManagerMuxClass_block_invoke(uint64_t a1)
{
  TextInputUILibrary_0();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("TUIKeyboardInputManagerMux");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getTUIKeyboardInputManagerMuxClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    unint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    int v3 = [NSString stringWithUTF8String:"Class getTUIKeyboardInputManagerMuxClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIKeyboardInputManagerClient.h", 23, @"Unable to find class %s", "TUIKeyboardInputManagerMux");

    __break(1u);
  }
}

Class __getBEAutoFillTextSuggestionClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB25FDE0)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    v6[3] = __BrowserEngineKitLibraryCore_block_invoke;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_1E52E4520;
    uint64_t v8 = 0;
    qword_1EB25FDE0 = _sl_dlopen();
  }
  if (!qword_1EB25FDE0)
  {
    int v3 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v4 = [NSString stringWithUTF8String:"void *BrowserEngineKitLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"_UIKeyboardStateManager.m", 281, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("BEAutoFillTextSuggestion");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    int v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getBEAutoFillTextSuggestionClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UIKeyboardStateManager.m", 284, @"Unable to find class %s", "BEAutoFillTextSuggestion");

LABEL_10:
    __break(1u);
  }
  qword_1EB25FDD8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __BrowserEngineKitLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25FDE0 = result;
  return result;
}

void __TIGetCapsLockDelayOverrideInSecondsValue_block_invoke()
{
  id v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  [v0 _configureKey:@"CapsLockDelayOverrideInSeconds" domain:@"com.apple.keyboard" defaultValue:&unk_1ED3F3888];
}

void *__getSimulateCrashSymbolLoc_block_invoke(void *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1EB25FDF0)
  {
    v5[1] = (void *)MEMORY[0x1E4F143A8];
    v5[2] = (void *)3221225472;
    v5[3] = __CrashReporterSupportLibraryCore_block_invoke;
    v5[4] = &__block_descriptor_40_e5_v8__0l;
    void v5[5] = v5;
    long long v6 = xmmword_1E52E4538;
    uint64_t v7 = 0;
    qword_1EB25FDF0 = _sl_dlopen();
  }
  unint64_t v2 = (void *)qword_1EB25FDF0;
  if (!qword_1EB25FDF0)
  {
    a1 = [MEMORY[0x1E4F28B00] currentHandler];
    unint64_t v2 = [NSString stringWithUTF8String:"void *CrashReporterSupportLibrary(void)"];
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, @"UIDebug_Internal.h", 18, @"%s", v5[0]);

    __break(1u);
    goto LABEL_7;
  }
  int v3 = v5[0];
  if (v5[0]) {
LABEL_7:
  }
    free(v3);
  uint64_t result = dlsym(v2, "SimulateCrash");
  *(void *)(*(void *)(a1[4] + 8) + 24) = result;
  off_1EB25FDE8 = *(_UNKNOWN **)(*(void *)(a1[4] + 8) + 24);
  return result;
}

uint64_t __CrashReporterSupportLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25FDF0 = result;
  return result;
}

uint64_t AutoFillUILibraryCore()
{
  if (!AutoFillUILibraryCore_frameworkLibrary) {
    AutoFillUILibraryCore_frameworkLibrary = _sl_dlopen();
  }
  return AutoFillUILibraryCore_frameworkLibrary;
}

uint64_t __AutoFillUILibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  AutoFillUILibraryCore_frameworkLibrary = result;
  return result;
}

void *__getAFUIAutoFillContextKeySymbolLoc_block_invoke(uint64_t a1)
{
  unint64_t v2 = AutoFillUILibrary();
  uint64_t result = dlsym(v2, "AFUIAutoFillContextKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25FDF8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *AutoFillUILibrary()
{
  uint64_t v0 = AutoFillUILibraryCore();
  if (v0) {
    return (void *)v0;
  }
  uint64_t v1 = [MEMORY[0x1E4F28B00] currentHandler];
  int v3 = [NSString stringWithUTF8String:"void *AutoFillUILibrary(void)"];
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v3, @"_UIKeyboardStateManager.m", 290, @"%s", 0);

  __break(1u);
  free(v4);
  return v1;
}

void *__getAFUIAutoFillPossibleRespondersKeySymbolLoc_block_invoke(uint64_t a1)
{
  unint64_t v2 = AutoFillUILibrary();
  uint64_t result = dlsym(v2, "AFUIAutoFillPossibleRespondersKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25FE00 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void __getTUIKeyboardBackendControllerClass_block_invoke(uint64_t a1)
{
  TextInputUILibrary_0();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("TUIKeyboardBackendController");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getTUIKeyboardBackendControllerClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    unint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    int v3 = [NSString stringWithUTF8String:"Class getTUIKeyboardBackendControllerClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIKeyboardInputManagerClient.h", 24, @"Unable to find class %s", "TUIKeyboardBackendController");

    __break(1u);
  }
}

void __getTUITypedStringCandidateClass_block_invoke(uint64_t a1)
{
  TextInputUILibrary_0();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("TUITypedStringCandidate");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getTUITypedStringCandidateClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    unint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    int v3 = [NSString stringWithUTF8String:"Class getTUITypedStringCandidateClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIKeyboardInputManagerClient.h", 26, @"Unable to find class %s", "TUITypedStringCandidate");

    __break(1u);
  }
}

void __TIGetUpdateLastUsedInputModeDelayValue_block_invoke()
{
  id v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  [v0 _configureKey:@"UpdateLastUsedInputModeDelay" domain:@"com.apple.keyboard" defaultValue:&unk_1ED3F1B88];
}

Class __getWebEventClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB25FE10)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    v6[3] = __WebKitLegacyLibraryCore_block_invoke;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_1E52E4568;
    uint64_t v8 = 0;
    qword_1EB25FE10 = _sl_dlopen();
  }
  if (!qword_1EB25FE10)
  {
    int v3 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v4 = [NSString stringWithUTF8String:"void *WebKitLegacyLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"_UIKeyboardStateManager.m", 287, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("WebEvent");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    int v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getWebEventClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UIKeyboardStateManager.m", 288, @"Unable to find class %s", "WebEvent");

LABEL_10:
    __break(1u);
  }
  qword_1EB25FE08 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __WebKitLegacyLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25FE10 = result;
  return result;
}

void *__getSBSTagTouchForTypingMenuSymbolLoc_block_invoke(void *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1EB25FE20)
  {
    v5[1] = (void *)MEMORY[0x1E4F143A8];
    v5[2] = (void *)3221225472;
    v5[3] = __SpringBoardServicesLibraryCore_block_invoke_0;
    v5[4] = &__block_descriptor_40_e5_v8__0l;
    void v5[5] = v5;
    long long v6 = xmmword_1E52E4580;
    uint64_t v7 = 0;
    qword_1EB25FE20 = _sl_dlopen();
  }
  unint64_t v2 = (void *)qword_1EB25FE20;
  if (!qword_1EB25FE20)
  {
    a1 = [MEMORY[0x1E4F28B00] currentHandler];
    unint64_t v2 = [NSString stringWithUTF8String:"void *SpringBoardServicesLibrary(void)"];
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, @"_UIKeyboardStateManager.m", 233, @"%s", v5[0]);

    __break(1u);
    goto LABEL_7;
  }
  int v3 = v5[0];
  if (v5[0]) {
LABEL_7:
  }
    free(v3);
  uint64_t result = dlsym(v2, "SBSTagTouchForTypingMenu");
  *(void *)(*(void *)(a1[4] + 8) + 24) = result;
  off_1EB25FE18 = *(_UNKNOWN **)(*(void *)(a1[4] + 8) + 24);
  return result;
}

uint64_t __SpringBoardServicesLibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25FE20 = result;
  return result;
}

void sub_185D3230C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_185D3260C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_185D327D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_185D328EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_185D33164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t _UICellAccessoryOutlineDisclosureBehavesAsDisplayedForCurrentState(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (dyld_program_sdk_at_least()) {
    uint64_t v4 = [v3 _isDisplayedForEditingState:a2];
  }
  else {
    uint64_t v4 = 1;
  }

  return v4;
}

id _accessoryConfigurationAsClass(void *a1, objc_class *a2)
{
  id v3 = a1;
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v5 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v6 = objc_msgSend(NSString, "stringWithUTF8String:", "__kindof _UICellAccessoryConfiguration * _Nonnull _accessoryConfigurationAsClass(_UICellAccessoryConfiguration * _Nonnull __strong, Class  _Nonnull __unsafe_unretained)");
    uint64_t v7 = NSStringFromClass(a2);
    [v5 handleFailureInFunction:v6, @"UICollectionViewListCell.m", 1320, @"Accessory configuration is not of expected class (%@): %@", v7, v3 file lineNumber description];
  }
  return v3;
}

double _ListCellSeparatorLayoutGuideHeightForCell(void *a1)
{
  id v1 = a1;
  if (!v1)
  {
    uint64_t v8 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v9 = [NSString stringWithUTF8String:"CGFloat _ListCellSeparatorLayoutGuideHeightForCell(UICollectionViewListCell * _Nonnull __strong)"];
    [v8 handleFailureInFunction:v9, @"UICollectionViewListCell.m", 2215, @"Invalid parameter not satisfying: %@", @"cell != nil" file lineNumber description];
  }
  unint64_t v2 = [v1 traitCollection];
  id v3 = [v2 preferredContentSizeCategory];
  BOOL IsAccessibilityCategory = UIContentSizeCategoryIsAccessibilityCategory(v3);

  double v5 = 1.0;
  if (!IsAccessibilityCategory)
  {
    [v1 _currentScreenScale];
    double v5 = 1.0 / v6;
  }

  return v5;
}

id _ListCellCreateSeparatorLayoutGuideLeadingConstraint(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (v5)
  {
    if (v6) {
      goto LABEL_3;
    }
LABEL_8:
    uint64_t v13 = [MEMORY[0x1E4F28B00] currentHandler];
    id v14 = objc_msgSend(NSString, "stringWithUTF8String:", "NSLayoutConstraint * _Nonnull _ListCellCreateSeparatorLayoutGuideLeadingConstraint(NSLayoutAnchor * _Nonnull __strong, NSLayoutAnchor * _Nonnull __strong, NSString * _Nonnull __strong)");
    [v13 handleFailureInFunction:v14, @"UICollectionViewListCell.m", 2203, @"Invalid parameter not satisfying: %@", @"toAnchor != nil" file lineNumber description];

    if (v7) {
      goto LABEL_4;
    }
    goto LABEL_9;
  }
  uint64_t v11 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v12 = objc_msgSend(NSString, "stringWithUTF8String:", "NSLayoutConstraint * _Nonnull _ListCellCreateSeparatorLayoutGuideLeadingConstraint(NSLayoutAnchor * _Nonnull __strong, NSLayoutAnchor * _Nonnull __strong, NSString * _Nonnull __strong)");
  [v11 handleFailureInFunction:v12, @"UICollectionViewListCell.m", 2202, @"Invalid parameter not satisfying: %@", @"fromAnchor != nil" file lineNumber description];

  if (!v6) {
    goto LABEL_8;
  }
LABEL_3:
  if (v7) {
    goto LABEL_4;
  }
LABEL_9:
  id v15 = [MEMORY[0x1E4F28B00] currentHandler];
  id v16 = objc_msgSend(NSString, "stringWithUTF8String:", "NSLayoutConstraint * _Nonnull _ListCellCreateSeparatorLayoutGuideLeadingConstraint(NSLayoutAnchor * _Nonnull __strong, NSLayoutAnchor * _Nonnull __strong, NSString * _Nonnull __strong)");
  [v15 handleFailureInFunction:v16, @"UICollectionViewListCell.m", 2204, @"Invalid parameter not satisfying: %@", @"identifier != nil" file lineNumber description];

LABEL_4:
  uint64_t v8 = [v5 constraintEqualToAnchor:v6];
  [v8 setShouldBeArchived:1];
  LODWORD(v9) = 1132068864;
  [v8 setPriority:v9];
  [v8 setIdentifier:v7];

  return v8;
}

void _ListCellReplaceSystemConstraintInLayoutGuide(void *a1, void *a2, void *a3)
{
  id v21 = a1;
  id v5 = a2;
  id v6 = a3;
  id v7 = v21;
  if (v21)
  {
    if (v5) {
      goto LABEL_3;
    }
LABEL_10:
    id v15 = [MEMORY[0x1E4F28B00] currentHandler];
    id v16 = objc_msgSend(NSString, "stringWithUTF8String:", "void _ListCellReplaceSystemConstraintInLayoutGuide(UILayoutGuide * _Nonnull __strong, NSLayoutConstraint * _Nonnull __strong, NSLayoutConstraint * _Nonnull __strong)");
    [v15 handleFailureInFunction:v16, @"UICollectionViewListCell.m", 2271, @"Invalid parameter not satisfying: %@", @"constraintToRemove != nil" file lineNumber description];

    id v7 = v21;
    if (v6) {
      goto LABEL_4;
    }
    goto LABEL_11;
  }
  uint64_t v13 = [MEMORY[0x1E4F28B00] currentHandler];
  id v14 = objc_msgSend(NSString, "stringWithUTF8String:", "void _ListCellReplaceSystemConstraintInLayoutGuide(UILayoutGuide * _Nonnull __strong, NSLayoutConstraint * _Nonnull __strong, NSLayoutConstraint * _Nonnull __strong)");
  [v13 handleFailureInFunction:v14, @"UICollectionViewListCell.m", 2270, @"Invalid parameter not satisfying: %@", @"layoutGuide != nil" file lineNumber description];

  id v7 = 0;
  if (!v5) {
    goto LABEL_10;
  }
LABEL_3:
  if (v6) {
    goto LABEL_4;
  }
LABEL_11:
  id v17 = [MEMORY[0x1E4F28B00] currentHandler];
  BOOL v18 = objc_msgSend(NSString, "stringWithUTF8String:", "void _ListCellReplaceSystemConstraintInLayoutGuide(UILayoutGuide * _Nonnull __strong, NSLayoutConstraint * _Nonnull __strong, NSLayoutConstraint * _Nonnull __strong)");
  [v17 handleFailureInFunction:v18, @"UICollectionViewListCell.m", 2272, @"Invalid parameter not satisfying: %@", @"constraintToAdd != nil" file lineNumber description];

  id v7 = v21;
LABEL_4:
  uint64_t v8 = [v7 _systemConstraints];
  uint64_t v9 = [v8 indexOfObject:v5];

  if (v9 == 0x7FFFFFFFFFFFFFFFLL)
  {
    unint64_t v19 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v20 = objc_msgSend(NSString, "stringWithUTF8String:", "void _ListCellReplaceSystemConstraintInLayoutGuide(UILayoutGuide * _Nonnull __strong, NSLayoutConstraint * _Nonnull __strong, NSLayoutConstraint * _Nonnull __strong)");
    [v19 handleFailureInFunction:v20, @"UICollectionViewListCell.m", 2275, @"Constraint to be removed %@ does not exist in the %@'s system constraints", v5, v21 file lineNumber description];
  }
  uint64_t v10 = [v21 _systemConstraints];
  uint64_t v11 = (void *)[v10 mutableCopy];

  [v11 replaceObjectAtIndex:v9 withObject:v6];
  uint64_t v12 = (void *)[v11 copy];
  [v21 _setSystemConstraints:v12];
}

void sub_185D38170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

id _UIMenuReplacingElementMatchingPredicate(void *a1, void *a2, void *a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  uint64_t v8 = [MEMORY[0x1E4F1CA48] array];
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  id v9 = v5;
  id v10 = (id)[v9 countByEnumeratingWithState:&v28 objects:v32 count:16];
  if (v10)
  {
    char v27 = 0;
    uint64_t v11 = *(void *)v29;
    uint64_t v12 = (char *)(v6 + 2);
    do
    {
      uint64_t v13 = 0;
      id v26 = v10;
      do
      {
        if (*(void *)v29 != v11) {
          objc_enumerationMutation(v9);
        }
        id v14 = *(void **)(*((void *)&v28 + 1) + 8 * (void)v13);
        if (v6[2](v6, v14))
        {
          id v15 = v7[2](v7, v14);
          [v8 addObjectsFromArray:v15];

          char v27 = 1;
        }
        else
        {
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            id v16 = v12;
            uint64_t v17 = v11;
            BOOL v18 = v8;
            id v19 = v9;
            id v20 = v14;
            id v21 = [v20 children];
            id v22 = v7;
            uint64_t v23 = _UIMenuReplacingElementMatchingPredicate(v21, v6, v7);

            if (v23)
            {
              uint64_t v24 = [v20 menuByReplacingChildren:v23];

              char v27 = 1;
              id v20 = (id)v24;
            }
            id v9 = v19;
            uint64_t v8 = v18;
            [v18 addObject:v20];

            id v7 = v22;
            uint64_t v11 = v17;
            uint64_t v12 = v16;
            id v10 = v26;
          }
          else
          {
            [v8 addObject:v14];
          }
        }
        uint64_t v13 = (char *)v13 + 1;
      }
      while (v10 != v13);
      id v10 = (id)[v9 countByEnumeratingWithState:&v28 objects:v32 count:16];
    }
    while (v10);

    if (v27) {
      id v10 = v8;
    }
    else {
      id v10 = 0;
    }
  }
  else
  {
  }
  return v10;
}

uint64_t __recursivelyPopulateSelectedElements_block_invoke(uint64_t a1, uint64_t a2)
{
  return recursivelyPopulateSelectedElements(a2, *(void *)(a1 + 32));
}

void sub_185D39BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)(v17 - 40));
  _Unwind_Resume(a1);
}

uint64_t _UIContextMenuCellSizeForElementSize(uint64_t result)
{
  if (result == -1)
  {
    unint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"_UIContextMenuCellSize _UIContextMenuCellSizeForElementSize(UIMenuElementSize)"];
    [v2 handleFailureInFunction:v3 file:@"_UIContextMenuCollectionViewUtilities.m" lineNumber:621 description:@"The element size should have been resolved and not automatic."];

    return 2;
  }
  else
  {
    uint64_t v1 = 2;
    if (!result) {
      uint64_t v1 = 0;
    }
    if (result != 1) {
      return v1;
    }
  }
  return result;
}

id _UIContextMenuSeparator(uint64_t a1, double a2)
{
  if (a1 == 2)
  {
    id v7 = [off_1E52D2B08 absoluteDimension:a2];
    uint64_t v8 = [off_1E52D2B08 fractionalHeightDimension:1.0];
    id v5 = [off_1E52D2B30 sizeWithWidthDimension:v7 heightDimension:v8];

    uint64_t v6 = objc_msgSend(off_1E52D2AF0, "layoutAnchorWithEdges:fractionalOffset:", 2, 0.0, 0.0);
    goto LABEL_5;
  }
  if (a1 == 1)
  {
    id v3 = [off_1E52D2B08 fractionalWidthDimension:1.0];
    uint64_t v4 = [off_1E52D2B08 absoluteDimension:a2];
    id v5 = [off_1E52D2B30 sizeWithWidthDimension:v3 heightDimension:v4];

    uint64_t v6 = objc_msgSend(off_1E52D2AF0, "layoutAnchorWithEdges:absoluteOffset:", 1, 0.0, -a2);
LABEL_5:
    id v9 = (void *)v6;
    id v10 = @"kContextMenuItemSeparator";
    goto LABEL_7;
  }
  id v10 = 0;
  id v9 = 0;
  id v5 = 0;
LABEL_7:
  uint64_t v11 = [off_1E52D2B00 decorationItemWithSize:v5 elementKind:v10 containerAnchor:v9];
  [v11 _setRegistrationViewClass:objc_opt_class()];

  return v11;
}

void __appendMenuToSnapshot(void *a1, void *a2, int a3, char a4)
{
  id v7 = a1;
  id v8 = a2;
  BOOL v9 = [v7 _resolvedElementSize] == 2 && (objc_msgSend(v7, "options") & 0x80) == 0;
  v20[0] = 0;
  v20[1] = v20;
  _OWORD v20[2] = 0x3032000000;
  v20[3] = __Block_byref_object_copy__40;
  v20[4] = __Block_byref_object_dispose__40;
  id v21 = 0;
  id v10 = [v7 children];
  if ((a3 & v9) != 0) {
    uint64_t v11 = 2;
  }
  else {
    uint64_t v11 = 0;
  }
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = ____appendMenuToSnapshot_block_invoke;
  v14[3] = &unk_1E52E4C70;
  id v12 = v8;
  char v18 = a3;
  id v15 = v12;
  uint64_t v17 = v20;
  id v13 = v7;
  id v16 = v13;
  char v19 = a4;
  [v10 enumerateObjectsWithOptions:v11 usingBlock:v14];

  _Block_object_dispose(v20, 8);
}

void sub_185D3DC8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ____appendMenuToSnapshot_block_invoke(uint64_t a1, void *a2)
{
  v14[1] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if ([v3 _isVisible])
  {
    if ([v3 _isInlineGroup])
    {
      __appendMenuToSnapshot(v3, *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 56), 0);
      uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
      id v5 = *(void **)(v4 + 40);
      *(void *)(v4 + 40) = 0;
    }
    else
    {
      if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
      {
        uint64_t v6 = +[_UIContextMenuSection sectionWithMenu:*(void *)(a1 + 40)];
        uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
        id v8 = *(void **)(v7 + 40);
        *(void *)(v7 + 40) = v6;

        [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) setIsRoot:*(unsigned __int8 *)(a1 + 57)];
        BOOL v9 = *(void **)(a1 + 32);
        v14[0] = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
        id v10 = [MEMORY[0x1E4F1C978] arrayWithObjects:v14 count:1];
        [v9 appendSectionsWithIdentifiers:v10];
      }
      uint64_t v11 = *(void **)(a1 + 32);
      id v13 = v3;
      id v12 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v13 count:1];
      [v11 appendItemsWithIdentifiers:v12];
    }
  }
}

id _UIContextMenuCollectionViewDataSourceSnapshot(void *a1, int a2)
{
  id v3 = a1;
  uint64_t v4 = objc_opt_new();
  __appendMenuToSnapshot(v3, v4, a2, 1);

  return v4;
}

UICollectionViewCompositionalLayout *_UIContextMenuCollectionViewLayout(void *a1, int a2, uint64_t a3, void *a4)
{
  v59[1] = *MEMORY[0x1E4F143B8];
  id v6 = a1;
  id v7 = a4;
  [v7 displayScale];
  double v9 = v8;
  id v10 = _UIContextMenuGetPlatformMetrics([v7 userInterfaceIdiom]);
  [v10 itemSeparatorHeight];
  double v12 = v11;
  UIRoundToScale(44.0 - v11, v9);
  double v14 = v13;
  id v15 = [off_1E52D2B08 fractionalWidthDimension:1.0];
  id v16 = [off_1E52D2B08 estimatedDimension:v14];
  uint64_t v17 = [off_1E52D2B30 sizeWithWidthDimension:v15 heightDimension:v16];

  char v18 = [UICollectionViewCompositionalLayout alloc];
  v51[0] = MEMORY[0x1E4F143A8];
  v51[1] = 3221225472;
  v51[2] = ___UIContextMenuCollectionViewLayout_block_invoke;
  _OWORD v51[3] = &unk_1E52E4C98;
  id v19 = v6;
  id v52 = v19;
  id v20 = v10;
  id v53 = v20;
  double v56 = v9;
  double v57 = v12;
  double v58 = v14;
  id v21 = v17;
  id v54 = v21;
  id v50 = v7;
  id v55 = v50;
  id v22 = [(UICollectionViewCompositionalLayout *)v18 initWithSectionProvider:v51];
  if (a3 == 1 || !a3 && a2)
  {
    uint64_t v23 = objc_opt_new();
    if (((a3 == 0) & a2) != 0) {
      uint64_t v24 = @"kContextMenuHeader";
    }
    else {
      uint64_t v24 = @"kContextMenuSubmenuTitleHeader";
    }
    uint64_t v25 = [off_1E52D2AF8 boundarySupplementaryItemWithLayoutSize:v21 elementKind:v24 alignment:1];
    if ([v20 forceUnpinnedHeader])
    {
      [v25 setPinToVisibleBounds:0];
    }
    else
    {
      id v26 = [v50 preferredContentSizeCategory];
      objc_msgSend(v25, "setPinToVisibleBounds:", _UIContentSizeCategoryIsAccessibilityContentSizeCategory(v26, v27) ^ 1);
    }
    [v25 setZIndex:100];
    v59[0] = v25;
    long long v28 = [MEMORY[0x1E4F1C978] arrayWithObjects:v59 count:1];
    [v23 setBoundarySupplementaryItems:v28];

    [(UICollectionViewCompositionalLayout *)v22 setConfiguration:v23];
  }
  long long v29 = [v20 gradientMaskingConfiguration];
  [v29 spacerHeaderFooterHeight];
  if (v30 > 0.0)
  {
    double v31 = v30;
    id v32 = [off_1E52D2B08 fractionalWidthDimension:1.0];
    uint64_t v33 = [off_1E52D2B08 estimatedDimension:v31];
    uint64_t v34 = [off_1E52D2B30 sizeWithWidthDimension:v32 heightDimension:v33];

    uint64_t v47 = v22;
    uint64_t v35 = [(UICollectionViewCompositionalLayout *)v22 configuration];
    id v36 = (void *)MEMORY[0x1E4F1CA48];
    [v35 boundarySupplementaryItems];
    v38 = id v37 = v19;
    double v39 = [v36 arrayWithArray:v38];

    uint64_t v48 = v37;
    id v40 = [v37 sectionIdentifiers];
    BOOL v41 = [v40 firstObject];

    if (a3 || (a2 & 1) == 0)
    {
      if (([v41 isRoot] & 1) != 0
        || ([v41 title],
            BOOL v42 = objc_claimAutoreleasedReturnValue(),
            uint64_t v43 = [v42 length],
            v42,
            !v43))
      {
        id v44 = [off_1E52D2AF8 boundarySupplementaryItemWithLayoutSize:v34 elementKind:@"kContextMenuGradientStyleHeader" alignment:1];
        [v39 addObject:v44];
      }
    }
    uint64_t v45 = [off_1E52D2AF8 boundarySupplementaryItemWithLayoutSize:v34 elementKind:@"kContextMenuGradientStyleFooter" alignment:5];
    [v39 addObject:v45];
    [v35 setBoundarySupplementaryItems:v39];
    id v22 = v47;
    [(UICollectionViewCompositionalLayout *)v47 setConfiguration:v35];

    id v19 = v48;
  }

  return v22;
}

__CFString *_NSStringFromUIPhysicalButtonActionSetting(unint64_t a1)
{
  if (a1 > 3)
  {
    unint64_t v2 = &stru_1ED0E84C0;
  }
  else
  {
    unint64_t v2 = *off_1E52E4CB8[a1];
  }
  return v2;
}

id _UIPhysicalButtonBSActionSettings(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v8 = objc_opt_new();
  double v9 = [NSNumber numberWithUnsignedInteger:a1];
  [v8 setObject:v9 forSetting:0];

  id v10 = [NSNumber numberWithUnsignedInteger:a2];
  [v8 setObject:v10 forSetting:1];

  double v11 = [NSNumber numberWithLongLong:a4];
  [v8 setObject:v11 forSetting:2];

  double v12 = [NSNumber numberWithUnsignedInteger:a3];
  [v8 setObject:v12 forSetting:3];

  double v13 = (void *)[v8 copy];
  return v13;
}

BOOL _UIBackgroundConfigurationIsObscuring(void *a1)
{
  id v1 = a1;
  unint64_t v2 = [v1 backgroundColor];
  id v3 = [v1 backgroundColorTransformer];
  uint64_t v4 = +[UIColor clearColor];
  int v5 = [v4 isEqual:v2];

  if (!v5 && !v2)
  {
    if (!v3)
    {
      unint64_t v2 = 0;
LABEL_11:
      BOOL v10 = 1;
      goto LABEL_12;
    }
    unint64_t v2 = +[UIColor redColor];
    goto LABEL_4;
  }
  if (v3)
  {
LABEL_4:
    uint64_t v6 = ((void (**)(void, void *))v3)[2](v3, v2);

    unint64_t v2 = (void *)v6;
  }
  [v2 alphaComponent];
  if (v7 >= 0.01) {
    goto LABEL_11;
  }
  double v8 = [v1 visualEffect];

  if (v8) {
    goto LABEL_11;
  }
  double v9 = [v1 image];
  BOOL v10 = v9 != 0;

LABEL_12:
  return v10;
}

id _UISignalAnalyticsLog()
{
  if (qword_1EB25FE40 != -1) {
    dispatch_once(&qword_1EB25FE40, &__block_literal_global_110);
  }
  id v0 = (void *)_MergedGlobals_992;
  return v0;
}

void sub_185D49BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185D49F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185D4A1AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185D4A314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185D4A494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getIASignalAnalyticsClass_block_invoke(uint64_t a1)
{
  InputAnalyticsLibraryCore();
  Class result = objc_getClass("IASignalAnalytics");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getIASignalAnalyticsClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t InputAnalyticsLibraryCore()
{
  if (!InputAnalyticsLibraryCore_frameworkLibrary) {
    InputAnalyticsLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  return InputAnalyticsLibraryCore_frameworkLibrary;
}

uint64_t __InputAnalyticsLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  InputAnalyticsLibraryCore_frameworkLibrary = result;
  return result;
}

void *__getIAChannelWritingToolsSymbolLoc_block_invoke(uint64_t a1)
{
  unint64_t v2 = InputAnalyticsLibrary();
  uint64_t result = dlsym(v2, "IAChannelWritingTools");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getIAChannelWritingToolsSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *InputAnalyticsLibrary()
{
  uint64_t v0 = InputAnalyticsLibraryCore();
  if (v0) {
    return (void *)v0;
  }
  id v1 = [MEMORY[0x1E4F28B00] currentHandler];
  id v3 = [NSString stringWithUTF8String:"void *InputAnalyticsLibrary(void)"];
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v3, @"_UISignalAnalytics.m", 19, @"%s", 0);

  __break(1u);
  free(v4);
  return v1;
}

void *__getIASignalWritingToolsPanelRequestedSymbolLoc_block_invoke(uint64_t a1)
{
  unint64_t v2 = InputAnalyticsLibrary();
  uint64_t result = dlsym(v2, "IASignalWritingToolsPanelRequested");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getIASignalWritingToolsPanelRequestedSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getIAPayloadKeyWritingToolsUISymbolLoc_block_invoke(uint64_t a1)
{
  unint64_t v2 = InputAnalyticsLibrary();
  uint64_t result = dlsym(v2, "IAPayloadKeyWritingToolsUI");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getIAPayloadKeyWritingToolsUISymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getIAPayloadValueWritingToolsUICandidateBarSymbolLoc_block_invoke(uint64_t a1)
{
  unint64_t v2 = InputAnalyticsLibrary();
  uint64_t result = dlsym(v2, "IAPayloadValueWritingToolsUICandidateBar");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getIAPayloadValueWritingToolsUICandidateBarSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id _preferredAttributesFittingAttributesWithInnerView(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    double v8 = v6;
  }
  else {
    double v8 = 0;
  }
  id v9 = v8;
  if ([v9 preferredAttributesCached])
  {
    id v10 = v6;
  }
  else
  {
    if (!v7)
    {
      uint64_t v34 = [MEMORY[0x1E4F28B00] currentHandler];
      uint64_t v35 = objc_msgSend(NSString, "stringWithUTF8String:", "UICollectionViewLayoutAttributes *_preferredAttributesFittingAttributesWithInnerView(UICollectionReusableView *__strong, UICollectionViewLayoutAttributes *__strong, UIView *__strong)");
      id v36 = (objc_class *)objc_opt_class();
      id v37 = NSStringFromClass(v36);
      [v34 handleFailureInFunction:v35, @"UICollectionViewTableSelfSizingUtilities.m", 38, @"Cannot size a %@ without a content view!", v37 file lineNumber description];
    }
    id v11 = v7;
    objc_opt_class();
    if (objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), double v12 = v11, (objc_opt_isKindOfClass()))
    {
      double v12 = [v5 contentView];
    }
    uint64_t v50 = 0;
    double v51 = (CGRect *)&v50;
    uint64_t v52 = 0x4010000000;
    id v53 = &unk_186D7DBA7;
    long long v13 = *(_OWORD *)(MEMORY[0x1E4F1DB28] + 16);
    long long v54 = *MEMORY[0x1E4F1DB28];
    long long v55 = v13;
    objc_opt_class();
    if (objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass()))
    {
      id v14 = v11;
      [v6 size];
      objc_msgSend(v14, "_updatedContentViewFrameForTargetWidth:");
      p_x = (void *)&v51->origin.x;
      v51[1].origin.x = v16;
      p_x[5] = v17;
      p_x[6] = v18;
      p_x[7] = v19;
    }
    else
    {
      [v12 frame];
      id v20 = (void *)&v51->origin.x;
      v51[1].origin.x = v21;
      void v20[5] = v22;
      v20[6] = v23;
      v20[7] = v24;
    }
    double Width = CGRectGetWidth(v51[1]);
    if (Width == 0.0)
    {
      [v6 size];
      double Width = v26;
    }
    [v6 size];
    double v28 = v27;
    uint64_t v44 = 0;
    uint64_t v45 = (double *)&v44;
    uint64_t v46 = 0x3010000000;
    uint64_t v47 = &unk_186D7DBA7;
    uint64_t v48 = v29;
    double v49 = v27;
    v38[0] = MEMORY[0x1E4F143A8];
    v38[1] = 3221225472;
    v38[2] = ___preferredAttributesFittingAttributesWithInnerView_block_invoke;
    _OWORD v38[3] = &unk_1E52E4EB8;
    id v39 = v5;
    id v30 = v12;
    id v40 = v30;
    BOOL v41 = &v50;
    BOOL v42 = &v44;
    double v43 = Width;
    [v30 _withUnsatisfiableConstraintsLoggingSuspendedIfEngineDelegateExists:v38];
    if (v28 == v45[5])
    {
      id v10 = v6;
    }
    else
    {
      id v10 = (id)[v6 copy];
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v31 = v11;
        [v31 _separatorHeight];
        v45[5] = v32 + v45[5];
      }
      objc_msgSend(v10, "setSize:", v45[4], v45[5]);
    }

    _Block_object_dispose(&v44, 8);
    _Block_object_dispose(&v50, 8);
  }
  return v10;
}

void sub_185D4C13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t ___preferredAttributesFittingAttributesWithInnerView_block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) layoutIfNeeded];
  objc_msgSend(*(id *)(a1 + 40), "setFrame:", *(double *)(*(void *)(*(void *)(a1 + 48) + 8) + 32), *(double *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), *(double *)(*(void *)(*(void *)(a1 + 48) + 8) + 48), *(double *)(*(void *)(*(void *)(a1 + 48) + 8) + 56));
  char v18 = 0;
  int v2 = [*(id *)(a1 + 40) _wantsAutolayout];
  double v5 = *(double *)(a1 + 64);
  if (v2)
  {
    LODWORD(v3) = 1148846080;
    LODWORD(v4) = 1112014848;
    objc_msgSend(*(id *)(a1 + 40), "_systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:hasIntentionallyCollapsedHeight:", &v18, v5, 0.0, v3, v4);
    uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8);
    *(void *)(v6 + 32) = v7;
    *(void *)(v6 + 40) = v8;
    if (!v18 && *(double *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) == 0.0)
    {
      uint64_t v13 = MEMORY[0x1E4F143A8];
      uint64_t v14 = 3221225472;
      uint64_t v15 = ___preferredAttributesFittingAttributesWithInnerView_block_invoke_2;
      uint64_t v16 = &unk_1E52D9F70;
      id v17 = *(id *)(a1 + 40);
      if (_UIInternalPreference_UIViewDebugSignposts_block_invoke_once != -1) {
        dispatch_once(&_UIInternalPreference_UIViewDebugSignposts_block_invoke_once, &v13);
      }

      objc_msgSend(*(id *)(a1 + 32), "bounds", v13, v14, v15, v16);
      double Height = CGRectGetHeight(v19);
      uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8);
      goto LABEL_9;
    }
  }
  else
  {
    LODWORD(v3) = 1148846080;
    LODWORD(v4) = 1112014848;
    objc_msgSend(*(id *)(a1 + 32), "systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:", v5, 0.0, v3, v4);
    if (Height > 0.0)
    {
      uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8);
      *(void *)(v10 + 32) = v11;
LABEL_9:
      *(double *)(v10 + 40) = Height;
    }
  }
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 56) = *(void *)(*(void *)(*(void *)(a1 + 56) + 8)
                                                                          + 40);
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 48) = *(void *)(*(void *)(*(void *)(a1 + 56) + 8)
                                                                          + 32);
  return objc_msgSend(*(id *)(a1 + 40), "setFrame:", *(double *)(*(void *)(*(void *)(a1 + 48) + 8) + 32), *(double *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), *(double *)(*(void *)(*(void *)(a1 + 48) + 8) + 48), *(double *)(*(void *)(*(void *)(a1 + 48) + 8) + 56));
}

void ___preferredAttributesFittingAttributesWithInnerView_block_invoke_2()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = *(NSObject **)(__UILogGetCategoryCachedImpl("Warning", &_UIInternalPreference_UIViewDebugSignposts_block_invoke_2___s_category_0)+ 8);
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
  {
    id v1 = v0;
    int v3 = 138412290;
    id v4 = (id)objc_opt_class();
    id v2 = v4;
    _os_log_impl(&dword_1853B0000, v1, OS_LOG_TYPE_ERROR, "Warning once only: Detected a case where constraints ambiguously suggest a height of zero                          for a %@'s content view. We're considering the collapse unintentional and using                          standard height instead.", (uint8_t *)&v3, 0xCu);
  }
}

BOOL _UITableSelectionIsKeyIsBasedOnFocusSystem(void *a1)
{
  return (unint64_t)([a1 _focusSystemState] - 1) <= 1
      && _AXSFullKeyboardAccessEnabled() == 0;
}

uint64_t _UIShouldAnimateDefaultCellHighlightAndSelection(void *a1)
{
  if ([a1 userInterfaceIdiom] != 6) {
    return 0;
  }
  LODWORD(result) = _UIInternalPreferenceUsesDefault(&_UIInternalPreference_EnableCollectionTableCellSelectionAnimations, @"EnableCollectionTableCellSelectionAnimations", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
  if (byte_1E8FD503C) {
    return 1;
  }
  else {
    return result;
  }
}

uint64_t _UISupportsVisionDefaultContentHuggingSectionHeaders()
{
  LODWORD(result) = _UIInternalPreferenceUsesDefault(&_UIInternalPreference_EnableDefaultContentHuggingSectionHeaders, @"EnableDefaultContentHuggingSectionHeaders", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
  if (byte_1E8FD5044) {
    return 1;
  }
  else {
    return result;
  }
}

id mutableDictionaryByTransformingLeafDictionariesToWeakValued(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if ([v1 count])
  {
    id v2 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithCapacity:", objc_msgSend(v1, "count"));
  }
  else
  {
    id v2 = 0;
  }
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void *)(*((void *)&v12 + 1) + 8 * i);
        id v9 = objc_msgSend(v3, "objectForKey:", v8, (void)v12);
        CFMutableDictionaryRef v10 = CFDictionaryCreateWithNonRetainedValuesFromNSDictionary(v9);

        [v2 setObject:v10 forKey:v8];
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v5);
  }

  return v2;
}

UITargetedPreview *_UITargetedPreviewForContextMenuFromCell(void *a1)
{
  id v1 = a1;
  id v2 = objc_alloc_init(UIPreviewParameters);
  id v3 = [v1 _systemBackgroundView];
  uint64_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = [v3 currentBackgroundColor];
    uint64_t v6 = [v4 currentVisiblePathInContainerView:v1];
    if (!v5) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v5 = [v1 backgroundColor];
    uint64_t v6 = 0;
    if (!v5) {
      goto LABEL_8;
    }
  }
  uint64_t v7 = [v1 traitCollection];
  uint64_t v8 = [v5 resolvedColorWithTraitCollection:v7];
  [v8 alphaComponent];
  double v10 = v9;

  if (v10 == 1.0 && ([v1 _hasBackgroundMaterial] & 1) == 0) {
    [(UIPreviewParameters *)v2 setBackgroundColor:v5];
  }
LABEL_8:
  [(UIPreviewParameters *)v2 setVisiblePath:v6];

  uint64_t v11 = [[UITargetedPreview alloc] initWithView:v1 parameters:v2];
  return v11;
}

void sub_185D4E698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185D528E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185D53808(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_185D59470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185D59A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _UICollectionViewShouldRescueClientWithReloadDataFallbackForInvalidBatchUpdates(void *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (qword_1EB258BF8 != -1) {
    dispatch_once(&qword_1EB258BF8, &__block_literal_global_2362);
  }
  if (_MergedGlobals_536)
  {
    if (os_variant_has_internal_diagnostics())
    {
      uint64_t v5 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      {
        int v6 = 138412290;
        id v7 = v1;
        _os_log_fault_impl(&dword_1853B0000, v5, OS_LOG_TYPE_FAULT, "%@", (uint8_t *)&v6, 0xCu);
      }
    }
    else
    {
      id v2 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB258C00) + 8);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      {
        int v6 = 138412290;
        id v7 = v1;
        _os_log_impl(&dword_1853B0000, v2, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&v6, 0xCu);
      }
    }
  }
  uint64_t v3 = _MergedGlobals_536;

  return v3;
}

id _indexPathForSelectionInteraction(void *a1)
{
  id v1 = a1;
  id v2 = [v1 _focusSystem];
  uint64_t v3 = [v2 focusedItem];
  if (_IsKindOfUIView((uint64_t)v3)) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  id v5 = v4;
  if (v5 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    int v6 = [v1 _indexPathForCell:v5];
  }
  else
  {
    int v6 = 0;
  }

  return v6;
}

uint64_t _UITabItemsHasAnyCustomizablePlacement(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v1 = a1;
  uint64_t v2 = [v1 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v11;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v11 != v4) {
          objc_enumerationMutation(v1);
        }
        int v6 = *(void **)(*((void *)&v10 + 1) + 8 * i);
        if (objc_msgSend(v6, "_hasCustomizablePlacement", (void)v10))
        {
          uint64_t HasAnyCustomizablePlacement = 1;
          goto LABEL_14;
        }
        if ([v6 _isGroup])
        {
          uint64_t v8 = [v6 children];
          uint64_t HasAnyCustomizablePlacement = _UITabItemsHasAnyCustomizablePlacement();

          goto LABEL_14;
        }
      }
      uint64_t v3 = [v1 countByEnumeratingWithState:&v10 objects:v14 count:16];
      uint64_t HasAnyCustomizablePlacement = 0;
      if (v3) {
        continue;
      }
      break;
    }
  }
  else
  {
    uint64_t HasAnyCustomizablePlacement = 0;
  }
LABEL_14:

  return HasAnyCustomizablePlacement;
}

uint64_t _UITabOverridesDefaultPlacement(void *a1)
{
  uint64_t v1 = _MergedGlobals_993;
  id v2 = a1;
  if (v1 != -1) {
    dispatch_once(&_MergedGlobals_993, &__block_literal_global_319_0);
  }
  uint64_t v3 = [(id)qword_1EB25FE50 containsObject:v2];

  return v3;
}

void sub_185D6EF00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_185D6F0E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_185D6F18C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_185D6F304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_185D6F3CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_185D6F490(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _UITreeFirstCommonAncestor(void *a1, void *a2, const char *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = v6;
  id v8 = 0;
  if (!v5 || !v6) {
    goto LABEL_18;
  }
  if (v5 == v6)
  {
    id v8 = v5;
    goto LABEL_18;
  }
  double v9 = (void *)[objc_alloc(MEMORY[0x1E4F28D30]) initWithOptions:514 capacity:20];
  BOOL v10 = 1;
  BOOL v11 = 1;
  unint64_t v12 = (unint64_t)v7;
  unint64_t v13 = (unint64_t)v5;
  while (!v11)
  {
    unint64_t v13 = 0;
    if (v10) {
      goto LABEL_10;
    }
LABEL_8:
    unint64_t v12 = 0;
LABEL_12:
    BOOL v11 = v13 != 0;
    BOOL v10 = v12 != 0;
    if (!(v13 | v12))
    {
      id v8 = 0;
      goto LABEL_17;
    }
  }
  if ([v9 containsObject:v13]) {
    goto LABEL_16;
  }
  [v9 addObject:v13];
  unint64_t v13 = (unint64_t)[(id)v13 a3];
  if (!v10) {
    goto LABEL_8;
  }
LABEL_10:
  if (([v9 containsObject:v12] & 1) == 0)
  {
    [v9 addObject:v12];
    unint64_t v12 = (unint64_t)[(id)v12 a3];
    goto LABEL_12;
  }
  unint64_t v13 = v12;
LABEL_16:
  id v8 = (id)v13;
LABEL_17:

LABEL_18:
  return v8;
}

BOOL __recursePreOrderDepthFirstTraversal(void *a1, const char *a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  BOOL v10 = a4;
  BOOL v11 = a5;
  if (v9)
  {
    unsigned __int8 Traversal = 0;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    id v22 = v9;
    id obj = v9;
    uint64_t v12 = [obj countByEnumeratingWithState:&v24 objects:v29 count:16];
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v14 = *(void *)v25;
LABEL_4:
      uint64_t v15 = 0;
      while (1)
      {
        if (*(void *)v25 != v14) {
          objc_enumerationMutation(obj);
        }
        uint64_t v16 = *(void **)(*((void *)&v24 + 1) + 8 * v15);
        if (v10) {
          uint64_t v17 = v10[2](v10, *(void *)(*((void *)&v24 + 1) + 8 * v15), a3, &Traversal);
        }
        else {
          uint64_t v17 = 1;
        }
        int v18 = Traversal;
        if (v17 && !Traversal)
        {
          CGRect v19 = [v16 a2];
          unsigned __int8 Traversal = __recursePreOrderDepthFirstTraversal(v19, a2, a3 + 1, v10, v11);

          int v18 = Traversal;
        }
        if (v11 && !v18)
        {
          v11[2](v11, v16, a3, v17, &Traversal);
          int v18 = Traversal;
        }
        if (v18) {
          break;
        }
        if (v13 == ++v15)
        {
          uint64_t v13 = [obj countByEnumeratingWithState:&v24 objects:v29 count:16];
          if (v13) {
            goto LABEL_4;
          }
          break;
        }
      }
    }

    BOOL v20 = Traversal != 0;
    id v9 = v22;
  }
  else
  {
    BOOL v20 = 0;
  }

  return v20;
}

void _UITreeBreadthFirstTraversal(void *a1, const char *a2, void *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a3;
  if (v6)
  {
    if (!v5) {
      goto LABEL_23;
    }
  }
  else
  {
    int v18 = [MEMORY[0x1E4F28B00] currentHandler];
    CGRect v19 = objc_msgSend(NSString, "stringWithUTF8String:", "void _UITreeBreadthFirstTraversal(id<NSFastEnumeration>  _Nullable __strong, SEL _Nonnull, BOOL (^ _Nonnull __strong)(id  _Nonnull __strong, BOOL * _Nonnull))");
    [v18 handleFailureInFunction:v19, @"_UICommonAlgorithms.m", 87, @"Invalid parameter not satisfying: %@", @"visitor != NULL" file lineNumber description];

    if (!v5) {
      goto LABEL_23;
    }
  }
  char v25 = 0;
  id v20 = v5;
  id v7 = [MEMORY[0x1E4F1CA48] arrayWithObject:v5];
  if ([v7 count])
  {
    unint64_t v8 = 0;
    do
    {
      id v9 = [v7 objectAtIndexedSubscript:v8];
      long long v21 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      id v10 = v9;
      uint64_t v11 = [v10 countByEnumeratingWithState:&v21 objects:v26 count:16];
      if (v11)
      {
        uint64_t v12 = v11;
        uint64_t v13 = *(void *)v22;
        do
        {
          for (uint64_t i = 0; i != v12; ++i)
          {
            if (*(void *)v22 != v13) {
              objc_enumerationMutation(v10);
            }
            uint64_t v15 = *(void **)(*((void *)&v21 + 1) + 8 * i);
            if (v6[2](v6, v15, &v25)) {
              BOOL v16 = v25 == 0;
            }
            else {
              BOOL v16 = 0;
            }
            if (v16)
            {
              uint64_t v17 = [v15 a2];
              if (v17) {
                [v7 addObject:v17];
              }
            }
            else if (v25)
            {
              goto LABEL_21;
            }
          }
          uint64_t v12 = [v10 countByEnumeratingWithState:&v21 objects:v26 count:16];
        }
        while (v12);
      }
LABEL_21:

      ++v8;
    }
    while ([v7 count] > v8);
  }

  id v5 = v20;
LABEL_23:
}

id _UITreeFindFirstAncestorMatchingCondition(void *a1, const char *a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  char v13 = 0;
  id v7 = v5;
  unint64_t v8 = v7;
  if (v7)
  {
    id v9 = v7;
    while ((v6[2](v6, v9, &v13) & 1) == 0)
    {
      if (v13)
      {
        uint64_t v11 = 0;
        goto LABEL_10;
      }
      uint64_t v10 = [v9 a2];

      id v9 = (id)v10;
      if (!v10) {
        break;
      }
    }
  }
  else
  {
    id v9 = 0;
  }
  id v9 = v9;
  uint64_t v11 = v9;
LABEL_10:

  return v11;
}

void _UIEnumerateOptions(unint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  char v6 = 0;
  if (a1)
  {
    char v4 = 0;
    do
    {
      if (a1)
      {
        v3[2](v3, 1 << v4, &v6);
        if (v6) {
          break;
        }
      }
      ++v4;
      BOOL v5 = a1 > 1;
      a1 >>= 1;
    }
    while (v5);
  }
}

void UICollectionViewFlowLayoutAlertForInvalidItemSize(void *a1, CGFloat a2, CGFloat a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  if (os_variant_has_internal_diagnostics())
  {
    id v7 = __UIFaultDebugAssertLog();
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_FAULT)) {
      goto LABEL_5;
    }
    v15.double width = a2;
    v15.height = a3;
    unint64_t v8 = NSStringFromCGSize(v15);
    int v9 = 138412546;
    uint64_t v10 = v8;
    __int16 v11 = 2112;
    id v12 = v5;
    _os_log_fault_impl(&dword_1853B0000, v7, OS_LOG_TYPE_FAULT, "Negative or zero item sizes are not supported by flow layout. Make a symbolic breakpoint at UICollectionViewFlowLayoutAlertForInvalidItemSize to catch this in the debugger. Invalid size: %@; collection view: %@",
      (uint8_t *)&v9,
      0x16u);
LABEL_4:

LABEL_5:
    goto LABEL_6;
  }
  char v6 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &UICollectionViewFlowLayoutAlertForInvalidItemSize___s_category)+ 8);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    id v7 = v6;
    v14.double width = a2;
    v14.height = a3;
    unint64_t v8 = NSStringFromCGSize(v14);
    int v9 = 138412546;
    uint64_t v10 = v8;
    __int16 v11 = 2112;
    id v12 = v5;
    _os_log_impl(&dword_1853B0000, v7, OS_LOG_TYPE_ERROR, "Negative or zero item sizes are not supported by flow layout. Make a symbolic breakpoint at UICollectionViewFlowLayoutAlertForInvalidItemSize to catch this in the debugger. Invalid size: %@; collection view: %@",
      (uint8_t *)&v9,
      0x16u);
    goto LABEL_4;
  }
LABEL_6:
}

__CFString *_UIStringFromCollectionElementCategory(uint64_t a1)
{
  uint64_t v1 = @"cell";
  if (a1 == 1) {
    uint64_t v1 = @"supplementaryView";
  }
  if (a1 == 2) {
    return @"decorationView";
  }
  else {
    return v1;
  }
}

void sub_185D74124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_185D74E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_185D75984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_185D79D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185D79F78(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

uint64_t _UIGetFocusTreeLockVerboseLogging()
{
  if (_UIInternalPreferencesRevisionOnce != -1) {
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_5_8);
  }
  int v0 = _UIInternalPreferencesRevisionVar;
  if (_UIInternalPreferencesRevisionVar < 1
    || (int v3 = _UIInternalPreference_FocusTreeLockVerboseLogging,
        _UIInternalPreferencesRevisionVar == _UIInternalPreference_FocusTreeLockVerboseLogging))
  {
    BOOL v1 = 1;
  }
  else
  {
    do
    {
      BOOL v1 = v0 >= v3;
      if (v0 < v3) {
        break;
      }
      _UIInternalPreferenceSync(v0, &_UIInternalPreference_FocusTreeLockVerboseLogging, @"FocusTreeLockVerboseLogging", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
      int v3 = _UIInternalPreference_FocusTreeLockVerboseLogging;
    }
    while (v0 != _UIInternalPreference_FocusTreeLockVerboseLogging);
  }
  return byte_1EB256F2C || v1;
}

void sub_185D7D0E0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_185D7D350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__CFString *__UICVIndexPathDescription(void *a1)
{
  if (a1)
  {
    uint64_t v1 = NSString;
    uint64_t v2 = NSNumber;
    id v3 = a1;
    char v4 = objc_msgSend(v2, "numberWithInteger:", objc_msgSend(v3, "section"));
    id v5 = NSNumber;
    uint64_t v6 = [v3 item];

    id v7 = [v5 numberWithInteger:v6];
    unint64_t v8 = [v1 stringWithFormat:@"(%@,%@)", v4, v7];
  }
  else
  {
    unint64_t v8 = @"(nil)";
  }
  return v8;
}

id __UICVIndexPathsDescription(void *a1)
{
  id v1 = a1;
  id v2 = objc_alloc_init(MEMORY[0x1E4F28E78]);
  if ([v1 count])
  {
    unint64_t v3 = 0;
    do
    {
      if (v3) {
        [v2 appendString:@","];
      }
      char v4 = [v1 objectAtIndexedSubscript:v3];
      id v5 = __UICVIndexPathDescription(v4);
      [v2 appendString:v5];

      ++v3;
    }
    while (v3 < [v1 count]);
  }
  if (![v2 length]) {
    [v2 appendString:@"()"];
  }

  return v2;
}

void sub_185D8DB90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
}

void sub_185D8DF4C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void eventProfileCollectionCallback()
{
  int v0 = _MergedGlobals_998;
  eventProfileCollectionCheckEnabled();
  _MergedGlobals_998 = v1;
  if (v0 && (v1 & 1) == 0)
  {
    uint64_t v6 = 0;
    id v7 = &v6;
    uint64_t v8 = 0x2020000000;
    id v2 = (void (*)(void))off_1EB25FED8;
    uint64_t v9 = off_1EB25FED8;
    if (!off_1EB25FED8)
    {
      uint64_t v3 = EventTimingProfileServiceInterfaceLibrary();
      v7[3] = (uint64_t)dlsym(v3, "ETPCollectionDone");
      off_1EB25FED8 = (_UNKNOWN *)v7[3];
      id v2 = (void (*)(void))v7[3];
    }
    _Block_object_dispose(&v6, 8);
    if (v2)
    {
      v2();
    }
    else
    {
      char v4 = [MEMORY[0x1E4F28B00] currentHandler];
      id v5 = [NSString stringWithUTF8String:"void _ETPCollectionDone(void)"];
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UIEventProfileCollection.m", 32, @"%s", dlerror());

      __break(1u);
    }
  }
}

void sub_185D9045C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void eventProfileCollectionCheckEnabled()
{
  int v0 = _UIKitUserDefaults();
  char v1 = [v0 objectForKey:@"EventTimingProfileCollection"];

  if (_NSIsNSString()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }
  id v3 = v2;

  if (![v3 length]) {
    goto LABEL_9;
  }
  id v4 = v3;
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x2020000000;
  id v5 = (void (*)(id))getETPCollectionEnabledSymbolLoc_ptr;
  id v12 = getETPCollectionEnabledSymbolLoc_ptr;
  if (!getETPCollectionEnabledSymbolLoc_ptr)
  {
    uint64_t v6 = EventTimingProfileServiceInterfaceLibrary();
    v10[3] = (uint64_t)dlsym(v6, "ETPCollectionEnabled");
    getETPCollectionEnabledSymbolLoc_ptr = (_UNKNOWN *)v10[3];
    id v5 = (void (*)(id))v10[3];
  }
  _Block_object_dispose(&v9, 8);
  if (v5)
  {
    v5(v4);

LABEL_9:
    return;
  }
  id v7 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v8 = [NSString stringWithUTF8String:"BOOL _ETPCollectionEnabled(NSString * _Nullable __strong)"];
  objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, @"_UIEventProfileCollection.m", 26, @"%s", dlerror());

  __break(1u);
}

void sub_185D9062C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _ETPCollectionSubmitEvent(uint64_t a1)
{
  uint64_t v6 = 0;
  id v7 = &v6;
  uint64_t v8 = 0x2020000000;
  id v2 = (void (*)(uint64_t))getETPCollectionSubmitEventSymbolLoc_ptr;
  uint64_t v9 = getETPCollectionSubmitEventSymbolLoc_ptr;
  if (!getETPCollectionSubmitEventSymbolLoc_ptr)
  {
    id v3 = EventTimingProfileServiceInterfaceLibrary();
    v7[3] = (uint64_t)dlsym(v3, "ETPCollectionSubmitEvent");
    getETPCollectionSubmitEventSymbolLoc_ptr = (_UNKNOWN *)v7[3];
    id v2 = (void (*)(uint64_t))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v2)
  {
    v2(a1);
  }
  else
  {
    id v4 = [MEMORY[0x1E4F28B00] currentHandler];
    id v5 = [NSString stringWithUTF8String:"void _ETPCollectionSubmitEvent(IOHIDEventRef)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UIEventProfileCollection.m", 29, @"%s", dlerror());

    __break(1u);
  }
}

void sub_185D90794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getETPCollectionDoneSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = EventTimingProfileServiceInterfaceLibrary();
  uint64_t result = dlsym(v2, "ETPCollectionDone");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1EB25FED8 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *EventTimingProfileServiceInterfaceLibrary()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!EventTimingProfileServiceInterfaceLibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    v4[2] = (void *)3221225472;
    v4[3] = __EventTimingProfileServiceInterfaceLibraryCore_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_1E52E6758;
    uint64_t v6 = 0;
    EventTimingProfileServiceInterfaceLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  int v0 = (void *)EventTimingProfileServiceInterfaceLibraryCore_frameworkLibrary;
  if (!EventTimingProfileServiceInterfaceLibraryCore_frameworkLibrary)
  {
    int v0 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *EventTimingProfileServiceInterfaceLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"_UIEventProfileCollection.m", 23, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  char v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __EventTimingProfileServiceInterfaceLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  EventTimingProfileServiceInterfaceLibraryCore_frameworkLibrary = result;
  return result;
}

void *__getETPCollectionEnabledSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = EventTimingProfileServiceInterfaceLibrary();
  uint64_t result = dlsym(v2, "ETPCollectionEnabled");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getETPCollectionEnabledSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void __logNextEventInfoStats_block_invoke(uint64_t a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  IOHIDEventGetIntegerValue();
  IOHIDEventGetIntegerValue();
  if (IOHIDEventGetIntegerValue() == 65308 && IOHIDEventGetIntegerValue() == 32)
  {
    uint64_t TimeStamp = IOHIDEventGetTimeStamp();
    char EventFlags = IOHIDEventGetEventFlags();
    DataValue = (unsigned __int8 *)IOHIDEventGetDataValue();
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = *((void *)DataValue + 1) - *((void *)DataValue + 2);
    uint64_t v7 = *(NSObject **)(__UILogGetCategoryCachedImpl("EventFetcher", &qword_1EB25FEE8) + 8);
    if (os_signpost_enabled(v7))
    {
      uint64_t v8 = v5 - TimeStamp;
      unsigned int v9 = EventFlags & 0x20;
      BOOL v10 = qword_1EB25FEE0 < v8 && v9 == 0;
      uint64_t v11 = v7;
      double v12 = _UIMediaDurationForMachDuration(v8);
      double v13 = _UIMediaDurationForMachDuration(qword_1EB25FEE0);
      int v14 = DataValue[1];
      int v15 = *DataValue;
      v16[0] = 67110912;
      v16[1] = v10;
      __int16 v17 = 2048;
      double v18 = v12;
      __int16 v19 = 2048;
      double v20 = v13;
      __int16 v21 = 1024;
      unsigned int v22 = v9 >> 5;
      __int16 v23 = 1024;
      int v24 = byte_1EB25FED1;
      __int16 v25 = 1024;
      int v26 = v14;
      __int16 v27 = 1024;
      int v28 = v15;
      __int16 v29 = 2048;
      double v30 = _UIMediaDurationForMachDuration(v6);
      _os_signpost_emit_with_name_impl(&dword_1853B0000, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NextEventInfo", "late=%u, receivedIn=%.06fs, expectedIn=%.06f, interpolated=%u, expected=%u, informational=%u, nextExpected=%u, nextReceivedIn=%.06f", (uint8_t *)v16, 0x3Eu);
    }
    byte_1EB25FED1 = *DataValue;
    qword_1EB25FEE0 = v6;
  }
}

void *__getETPCollectionSubmitEventSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = EventTimingProfileServiceInterfaceLibrary();
  uint64_t result = dlsym(v2, "ETPCollectionSubmitEvent");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getETPCollectionSubmitEventSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_185D92378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185D99D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185D99EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _UITextFormattingViewControllerConfigurationClasses()
{
  if (qword_1EB25FEF8 != -1) {
    dispatch_once(&qword_1EB25FEF8, &__block_literal_global_118);
  }
  int v0 = (void *)_MergedGlobals_999;
  return v0;
}

id GetExampleSentencesForLanguage(void *a1)
{
  v9[1] = *MEMORY[0x1E4F143B8];
  char v1 = (void *)MEMORY[0x1E4F1CA20];
  id v2 = a1;
  id v3 = [&unk_1ED3F7668 allKeys];
  v9[0] = v2;
  id v4 = [MEMORY[0x1E4F1C978] arrayWithObjects:v9 count:1];
  uint64_t v5 = [v1 matchedLanguagesFromAvailableLanguages:v3 forPreferredLanguages:v4];

  uint64_t v6 = [v5 firstObject];

  uint64_t v7 = [&unk_1ED3F7668 objectForKeyedSubscript:v6];

  return v7;
}

id GetAlternativeExampleSentencesForLanguage(void *a1)
{
  v9[1] = *MEMORY[0x1E4F143B8];
  char v1 = (void *)MEMORY[0x1E4F1CA20];
  id v2 = a1;
  id v3 = [&unk_1ED3F7690 allKeys];
  v9[0] = v2;
  id v4 = [MEMORY[0x1E4F1C978] arrayWithObjects:v9 count:1];
  uint64_t v5 = [v1 matchedLanguagesFromAvailableLanguages:v3 forPreferredLanguages:v4];

  uint64_t v6 = [v5 firstObject];

  uint64_t v7 = [&unk_1ED3F7690 objectForKeyedSubscript:v6];

  return v7;
}

id _UIResponderModallyPresentedViewControllerContainingResponder(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = v1;
    while (1)
    {
      if (objc_msgSend(v3, "__isKindOfUIViewController"))
      {
        id v5 = v3;
        id v3 = v5;
        goto LABEL_10;
      }
      if (_IsKindOfUIView((uint64_t)v3)) {
        break;
      }
      id v4 = [v3 nextResponder];

      id v3 = v4;
      if (!v4) {
        goto LABEL_11;
      }
    }
    id v5 = [v3 _viewControllerForAncestor];
LABEL_10:
    id v4 = v5;
  }
  else
  {
    id v3 = 0;
    id v4 = 0;
  }
LABEL_11:
  uint64_t v6 = [v4 presentingViewController];
  uint64_t v7 = v6;
  if (v6)
  {
    uint64_t v8 = [v6 presentedViewController];
  }
  else
  {
    uint64_t v8 = 0;
  }

  return v8;
}

id _UIResponderTargetForActionWithTestBlock(void *a1, const char *a2, void *a3, void *a4)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a3;
  unsigned int v9 = a4;
  if (!v7)
  {
    id v11 = 0;
    goto LABEL_61;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14508], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v44 = _simpleObjectDescription(v7);
    uint64_t v45 = _selectorDescription(a2);
    *(_DWORD *)buf = 138412546;
    id v67 = v44;
    __int16 v68 = 2112;
    id v69 = v45;
    _os_log_debug_impl(&dword_1853B0000, MEMORY[0x1E4F14508], OS_LOG_TYPE_DEBUG, "Begin traversal into %@ for %@", buf, 0x16u);
  }
  if (qword_1EB25FF18 != -1) {
    dispatch_once(&qword_1EB25FF18, &__block_literal_global_25_1);
  }
  uint64_t v65 = (void *)MEMORY[0x18C108260]();
  if ([(id)qword_1EB25FF08 containsObject:v7])
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14508], OS_LOG_TYPE_DEBUG))
    {
      BOOL v10 = _simpleObjectDescription(v7);
      *(_DWORD *)buf = 138412290;
      id v67 = v10;
      _os_log_debug_impl(&dword_1853B0000, MEMORY[0x1E4F14508], OS_LOG_TYPE_DEBUG, "We have already seen this object %@ so return nil.", buf, 0xCu);
    }
  }
  else
  {
    [(id)qword_1EB25FF08 addObject:v7];
  }
  uint64_t v12 = qword_1EB25FF20++;
  if (os_log_type_enabled(MEMORY[0x1E4F14508], OS_LOG_TYPE_INFO)
    && !v12
    && os_log_type_enabled(MEMORY[0x1E4F14508], OS_LOG_TYPE_INFO))
  {
    double v13 = _selectorDescription(a2);
    int v14 = _simpleObjectDescription(v7);
    *(_DWORD *)buf = 138412546;
    id v67 = v13;
    __int16 v68 = 2112;
    id v69 = v14;
    _os_log_impl(&dword_1853B0000, MEMORY[0x1E4F14508], OS_LOG_TYPE_INFO, "Begin search for target for action %@ starting from target %@", buf, 0x16u);
  }
  int v15 = v9[2](v9, v7, a2, v8);
  BOOL v16 = MEMORY[0x1E4F14508];
  id v17 = MEMORY[0x1E4F14508];
  BOOL v18 = os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG);
  if (v15)
  {
    if (v18)
    {
      double v49 = _simpleObjectDescription(v7);
      *(_DWORD *)buf = 138412290;
      id v67 = v49;
      _os_log_debug_impl(&dword_1853B0000, MEMORY[0x1E4F14508], OS_LOG_TYPE_DEBUG, "%@ passes the test. Target found.", buf, 0xCu);
    }
    id v11 = v7;
    goto LABEL_54;
  }
  if (v18)
  {
    uint64_t v50 = _simpleObjectDescription(v7);
    *(_DWORD *)buf = 138412290;
    id v67 = v50;
    _os_log_debug_impl(&dword_1853B0000, MEMORY[0x1E4F14508], OS_LOG_TYPE_DEBUG, "%@ failed the test. Finding the next target...", buf, 0xCu);
  }
  if (objc_opt_respondsToSelector())
  {
    uint64_t v19 = [v7 _nextResponderUsingTraversalStrategy:qword_1EB25FF10];
LABEL_25:
    double v20 = (void *)v19;
    goto LABEL_27;
  }
  if (objc_opt_respondsToSelector())
  {
    uint64_t v19 = [v7 nextResponder];
    goto LABEL_25;
  }
  double v20 = 0;
LABEL_27:
  __int16 v21 = v16;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    _selectorDescription(a2);
    id v51 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v52 = _simpleObjectDescription(v20);
    *(_DWORD *)buf = 138412546;
    id v67 = v51;
    __int16 v68 = 2112;
    id v69 = v52;
    _os_log_debug_impl(&dword_1853B0000, MEMORY[0x1E4F14508], OS_LOG_TYPE_DEBUG, "...next target for %@ is %@", buf, 0x16u);
  }
  if (objc_opt_respondsToSelector())
  {
    if (![(id)_MergedGlobals_1000 containsObject:v20])
    {
      [(id)_MergedGlobals_1000 addObject:v20];
      double v30 = MEMORY[0x1E4F14508];
      id v31 = MEMORY[0x1E4F14508];
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
      {
        _simpleObjectDescription(v20);
        id v56 = (id)objc_claimAutoreleasedReturnValue();
        double v57 = _selectorDescription(a2);
        *(_DWORD *)buf = 138412546;
        id v67 = v56;
        __int16 v68 = 2112;
        id v69 = v57;
        _os_log_debug_impl(&dword_1853B0000, MEMORY[0x1E4F14508], OS_LOG_TYPE_DEBUG, "Calling targetForAction:withSender: on %@ for %@", buf, 0x16u);
      }
      context = (void *)MEMORY[0x18C108260]();
      double v32 = [v20 targetForAction:a2 withSender:v8];
      uint64_t v33 = MEMORY[0x1E4F14508];
      id v34 = MEMORY[0x1E4F14508];
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
      {
        _simpleObjectDescription(v20);
        id v63 = (id)objc_claimAutoreleasedReturnValue();
        _simpleObjectDescription(v32);
        id v58 = (id)objc_claimAutoreleasedReturnValue();
        id v59 = _selectorDescription(a2);
        *(_DWORD *)buf = 138412802;
        id v67 = v63;
        __int16 v68 = 2112;
        id v69 = v58;
        __int16 v70 = 2112;
        uint64_t v71 = v59;
        _os_log_debug_impl(&dword_1853B0000, MEMORY[0x1E4F14508], OS_LOG_TYPE_DEBUG, "The last call to targetForAction:withSender: on %@ returned %@ for %@", buf, 0x20u);
      }
      if (v32 && v9[2](v9, v32, a2, v8))
      {
        id v11 = v32;
        uint64_t v35 = MEMORY[0x1E4F14508];
        id v36 = MEMORY[0x1E4F14508];
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
        {
          __int16 v62 = _simpleObjectDescription(v11);
          *(_DWORD *)buf = 138412290;
          id v67 = v62;
          _os_log_debug_impl(&dword_1853B0000, MEMORY[0x1E4F14508], OS_LOG_TYPE_DEBUG, "%@ passes the test. Target found.", buf, 0xCu);
        }
      }
      else
      {
        id v37 = MEMORY[0x1E4F14508];
        id v38 = MEMORY[0x1E4F14508];
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
        {
          _simpleObjectDescription(v32);
          id v60 = (id)objc_claimAutoreleasedReturnValue();
          id v61 = _simpleObjectDescription(v20);
          *(_DWORD *)buf = 138412546;
          id v67 = v60;
          __int16 v68 = 2112;
          id v69 = v61;
          _os_log_debug_impl(&dword_1853B0000, MEMORY[0x1E4F14508], OS_LOG_TYPE_DEBUG, "%@ failed the test. Traversing into %@.", buf, 0x16u);
        }
        _UIResponderTargetForActionWithTestBlock(v20, a2, v8, v9);
        id v11 = (id)objc_claimAutoreleasedReturnValue();
      }

      goto LABEL_53;
    }
    unsigned int v22 = MEMORY[0x1E4F14508];
    id v23 = MEMORY[0x1E4F14508];
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      _simpleObjectDescription(v20);
      id v24 = (id)objc_claimAutoreleasedReturnValue();
      __int16 v25 = _selectorDescription(a2);
      *(_DWORD *)buf = 138412546;
      id v67 = v24;
      __int16 v68 = 2112;
      id v69 = v25;
      _os_log_debug_impl(&dword_1853B0000, MEMORY[0x1E4F14508], OS_LOG_TYPE_DEBUG, "Already called targetForAction:withSender: on %@ for %@ so we will not call it again.", buf, 0x16u);
    }
  }
  else
  {
    int v26 = MEMORY[0x1E4F14508];
    id v27 = MEMORY[0x1E4F14508];
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
    {
      id v53 = _simpleObjectDescription(v20);
      *(_DWORD *)buf = 138412290;
      id v67 = v53;
      _os_log_debug_impl(&dword_1853B0000, MEMORY[0x1E4F14508], OS_LOG_TYPE_DEBUG, "%@ does not respond to targetForAction:withSender:", buf, 0xCu);
    }
  }

  if (v20)
  {
    int v28 = MEMORY[0x1E4F14508];
    id v29 = MEMORY[0x1E4F14508];
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
    {
      _simpleObjectDescription(v20);
      id v54 = (id)objc_claimAutoreleasedReturnValue();
      long long v55 = _selectorDescription(a2);
      *(_DWORD *)buf = 138412546;
      id v67 = v54;
      __int16 v68 = 2112;
      id v69 = v55;
      _os_log_debug_impl(&dword_1853B0000, MEMORY[0x1E4F14508], OS_LOG_TYPE_DEBUG, "Traversing into %@ for %@", buf, 0x16u);
    }
    _UIResponderTargetForActionWithTestBlock(v20, a2, v8, v9);
    id v11 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v11 = 0;
  }
LABEL_53:

LABEL_54:
  if (!--qword_1EB25FF20)
  {
    id v39 = MEMORY[0x1E4F14508];
    id v40 = MEMORY[0x1E4F14508];
    if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
    {
      _simpleObjectDescription(v11);
      id v41 = (id)objc_claimAutoreleasedReturnValue();
      BOOL v42 = _selectorDescription(a2);
      *(_DWORD *)buf = 138412546;
      id v67 = v41;
      __int16 v68 = 2112;
      id v69 = v42;
      _os_log_impl(&dword_1853B0000, MEMORY[0x1E4F14508], OS_LOG_TYPE_INFO, "Finished traversing all targets. Found target: %@ for %@", buf, 0x16u);
    }
    [(id)_MergedGlobals_1000 removeAllObjects];
    [(id)qword_1EB25FF08 removeAllObjects];
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14508], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v46 = _simpleObjectDescription(v7);
    uint64_t v47 = _simpleObjectDescription(v11);
    uint64_t v48 = _selectorDescription(a2);
    *(_DWORD *)buf = 138412802;
    id v67 = v46;
    __int16 v68 = 2112;
    id v69 = v47;
    __int16 v70 = 2112;
    uint64_t v71 = v48;
    _os_log_debug_impl(&dword_1853B0000, MEMORY[0x1E4F14508], OS_LOG_TYPE_DEBUG, "End traversal for %@ - returning %@ for %@", buf, 0x20u);
  }
LABEL_61:

  return v11;
}

void sub_185D9D94C()
{
}

void sub_185D9D9C8(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x185D9D9A0);
  }
  _Unwind_Resume(a1);
}

void sub_185D9D9D8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x185D9D998);
}

void sub_185D9D9F4(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x185D9DA00);
}

id _simpleObjectDescription(void *a1)
{
  id v1 = NSString;
  id v2 = a1;
  id v3 = (objc_class *)objc_opt_class();
  id v4 = NSStringFromClass(v3);
  id v5 = [v1 stringWithFormat:@"%@ (%p)", v4, v2];

  return v5;
}

id _selectorDescription(const char *a1)
{
  id v1 = NSString;
  id v2 = NSStringFromSelector(a1);
  id v3 = [v1 stringWithFormat:@"“%@”", v2];

  return v3;
}

id _UIResponderTargetForAction(void *a1, const char *a2, void *a3)
{
  id v5 = a3;
  id v6 = a1;
  if (objc_opt_respondsToSelector()) {
    [v6 targetForAction:a2 withSender:v5];
  }
  else {
  id v7 = _UIResponderTargetForActionWithTestBlock(v6, a2, v5, &__block_literal_global_34);
  }

  return v7;
}

void sub_185D9E260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185D9EA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

id _mapAsArray(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:a1];
  if (a1)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v3[2](v3, v5);
      if (v6 == 0x7FFFFFFFFFFFFFFFLL) {
        objc_msgSend(NSString, "stringWithFormat:", @"%ld->X", v5, v9);
      }
      else {
      id v7 = objc_msgSend(NSString, "stringWithFormat:", @"%ld->%ld", v5, v6);
      }
      [v4 addObject:v7];

      ++v5;
    }
    while (a1 != v5);
  }

  return v4;
}

void sub_185DA1E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185DA49FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185DA4E0C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_185DA4F4C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_185DA874C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, id *a11)
{
  objc_destroyWeak(v11);
  objc_destroyWeak(location);
  objc_destroyWeak(a11);
  objc_destroyWeak((id *)(v12 - 144));
  _Unwind_Resume(a1);
}

void sub_185DA9898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185DAAF34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

double _UIActionSheetPresentationControllerAvailableBoundsForLayout(uint64_t a1, void *a2, void *a3, double a4, double a5, double a6, double a7)
{
  id v13 = a2;
  id v14 = a3;
  double v15 = *(double *)(a1 + 16);
  double v16 = *(double *)(a1 + 32);
  double v17 = *(double *)(a1 + 40);
  if (v16 > v17) {
    double v15 = round(v15 + (v16 - v17) * 0.5);
  }
  objc_msgSend(v13, "convertRect:fromCoordinateSpace:", v14, a4, a5, a6, a7);
  CGFloat x = v23.origin.x;
  CGFloat y = v23.origin.y;
  CGFloat width = v23.size.width;
  CGFloat height = v23.size.height;
  if (!CGRectIsEmpty(v23) && !*(unsigned char *)(a1 + 104))
  {
    v24.origin.CGFloat x = x;
    v24.origin.CGFloat y = y;
    v24.size.CGFloat width = width;
    v24.size.CGFloat height = height;
    CGRectGetMinY(v24);
  }

  return v15;
}

void UIActionSheetPresentationControllerLayoutViews(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, unsigned __int8 *a7, double a8, double a9, double a10, double a11)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  id v21 = a1;
  id v22 = a2;
  long long v23 = *((_OWORD *)a7 + 5);
  long long v84 = *((_OWORD *)a7 + 4);
  long long v85 = v23;
  long long v24 = *((_OWORD *)a7 + 7);
  *(_OWORD *)uint64_t v86 = *((_OWORD *)a7 + 6);
  *(_OWORD *)&v86[16] = v24;
  long long v25 = *((_OWORD *)a7 + 1);
  *(_OWORD *)id v82 = *(_OWORD *)a7;
  *(_OWORD *)&v82[16] = v25;
  long long v26 = *((_OWORD *)a7 + 3);
  *(_OWORD *)&v82[32] = *((_OWORD *)a7 + 2);
  long long v83 = v26;
  id v27 = a6;
  id v28 = a5;
  id v77 = a4;
  id v29 = a3;
  double v30 = a10;
  double v31 = a11;
  CGFloat v32 = UIActionSheetPresentationControllerFrameForPresentedView((double *)v82, v28, v27, a8, a9, v30, a11);
  double v75 = v33;
  double v76 = v32;
  double v73 = v35;
  double v74 = v34;
  int v36 = *a7;
  long long v37 = *(_OWORD *)(a7 + 17);
  long long v88 = *(_OWORD *)(a7 + 1);
  *(_OWORD *)v89 = v37;
  *(void *)&v89[15] = *((void *)a7 + 4);
  double v38 = *((double *)a7 + 5);
  long long v81 = *((_OWORD *)a7 + 3);
  double v40 = *((double *)a7 + 8);
  double v39 = *((double *)a7 + 9);
  double v41 = *((double *)a7 + 10);
  double v42 = *((double *)a7 + 11);
  double v43 = *((double *)a7 + 12);
  unsigned __int8 v44 = a7[104];
  int v45 = a7[105];
  long long v46 = *(_OWORD *)(a7 + 106);
  *(void *)((char *)v87 + 14) = *((void *)a7 + 15);
  v87[0] = v46;
  v82[0] = v36;
  *(_OWORD *)&v82[1] = *(_OWORD *)(a7 + 1);
  *(_OWORD *)&v82[17] = *(_OWORD *)(a7 + 17);
  *(void *)&v82[32] = *((void *)a7 + 4);
  *(double *)&v82[40] = v38;
  double v66 = v38;
  long long v83 = *((_OWORD *)a7 + 3);
  *(double *)&long long v84 = v40;
  *((double *)&v84 + 1) = v39;
  *(double *)&long long v85 = v41;
  *((double *)&v85 + 1) = v42;
  *(double *)uint64_t v86 = v43;
  v86[8] = v44;
  v86[9] = v45;
  long long v47 = *(_OWORD *)(a7 + 106);
  *(void *)&v86[24] = *((void *)a7 + 15);
  *(_OWORD *)&v86[10] = v47;
  double v48 = _UIActionSheetPresentationControllerAvailableBoundsForLayout((uint64_t)v82, v28, v27, a8, a9, a10, v31);
  double v50 = v49;
  double v65 = v51;
  *(_OWORD *)&v82[1] = v88;
  v82[0] = v36;
  *(_OWORD *)&v82[17] = *(_OWORD *)v89;
  *(void *)&v82[32] = *(void *)&v89[15];
  *(double *)&v82[40] = v38;
  long long v83 = v81;
  *(double *)&long long v84 = v40;
  *((double *)&v84 + 1) = v39;
  *(double *)&long long v85 = v41;
  *((double *)&v85 + 1) = v42;
  *(double *)uint64_t v86 = v43;
  v86[8] = v44;
  v86[9] = v45;
  *(_OWORD *)&v86[10] = v87[0];
  *(void *)&v86[24] = *(void *)((char *)v87 + 14);
  double v52 = v48;
  double v54 = v53;
  double v55 = _UIActionSheetPresentationControllerFrameForDismissButtonInAvailableBounds((double *)v82, v48, v53, v49, v51);
  double v67 = v57;
  double v68 = v55;
  double v70 = v56;
  double v72 = v58;
  *(_OWORD *)&v82[1] = v88;
  if (v45) {
    double v59 = 0.0;
  }
  else {
    double v59 = v43 + v56;
  }
  v82[0] = v36;
  *(_OWORD *)&v82[17] = *(_OWORD *)v89;
  *(void *)&v82[32] = *(void *)&v89[15];
  *(double *)&v82[40] = v66;
  long long v83 = v81;
  *(double *)&long long v84 = v40;
  *((double *)&v84 + 1) = v39;
  *(double *)&long long v85 = v41;
  *((double *)&v85 + 1) = v42;
  *(double *)uint64_t v86 = v43;
  v86[8] = v44;
  v86[9] = v45;
  *(_OWORD *)&v86[10] = v87[0];
  *(void *)&v86[24] = *(void *)((char *)v87 + 14);
  _UIActionSheetPresentationControllerFrameForPresentedViewInAvailableBounds((uint64_t)v82, v39 + v52, v40 + v54, v50 - (v39 + v42), v65 - (v41 + v40 + v59));
  double v61 = v66 - v60;
  if (v36) {
    double v61 = 0.0;
  }
  double v62 = v67 + v61;

  v78[0] = MEMORY[0x1E4F143A8];
  v78[1] = 3221225472;
  v78[2] = __UIActionSheetPresentationControllerLayoutViews_block_invoke;
  v78[3] = &unk_1E52D9F98;
  id v79 = v22;
  id v80 = v21;
  id v63 = v21;
  id v64 = v22;
  +[UIView performWithoutAnimation:v78];
  objc_msgSend(v63, "setFrame:", v76, v75, v74, v73);
  objc_msgSend(v64, "setFrame:", v76, v75, v74, v73);
  [v64 layoutIfNeeded];
  objc_msgSend(v29, "setFrame:", v68 + 0.0, v62, v72, v70);

  objc_msgSend(v77, "setFrame:", *((double *)a7 + 2), *((double *)a7 + 3), *((double *)a7 + 4), *((double *)a7 + 5));
}

CGFloat UIActionSheetPresentationControllerFrameForPresentedView(double *a1, void *a2, void *a3, double a4, double a5, double a6, double a7)
{
  long long v8 = *((_OWORD *)a1 + 5);
  long long v38 = *((_OWORD *)a1 + 4);
  long long v39 = v8;
  long long v9 = *((_OWORD *)a1 + 7);
  long long v40 = *((_OWORD *)a1 + 6);
  long long v41 = v9;
  long long v10 = *((_OWORD *)a1 + 1);
  long long v34 = *(_OWORD *)a1;
  long long v35 = v10;
  long long v11 = *((_OWORD *)a1 + 3);
  long long v36 = *((_OWORD *)a1 + 2);
  long long v37 = v11;
  double v12 = _UIActionSheetPresentationControllerAvailableBoundsForLayout((uint64_t)&v34, a2, a3, a4, a5, a6, a7);
  double v14 = v13;
  double v16 = v15;
  double v18 = v17;
  long long v19 = *((_OWORD *)a1 + 5);
  long long v38 = *((_OWORD *)a1 + 4);
  long long v39 = v19;
  long long v20 = *((_OWORD *)a1 + 7);
  long long v40 = *((_OWORD *)a1 + 6);
  long long v41 = v20;
  long long v21 = *((_OWORD *)a1 + 1);
  long long v34 = *(_OWORD *)a1;
  long long v35 = v21;
  long long v22 = *((_OWORD *)a1 + 3);
  long long v36 = *((_OWORD *)a1 + 2);
  long long v37 = v22;
  _UIActionSheetPresentationControllerFrameForDismissButtonInAvailableBounds((double *)&v34, v12, v14, v15, v17);
  double v25 = a1[8];
  double v24 = a1[9];
  if (*((unsigned char *)a1 + 105)) {
    double v26 = 0.0;
  }
  else {
    double v26 = v23 + a1[12];
  }
  CGFloat v27 = v16 - (v24 + a1[11]);
  CGFloat v28 = v18 - (a1[10] + v25 + v26);
  long long v29 = *((_OWORD *)a1 + 5);
  long long v38 = *((_OWORD *)a1 + 4);
  long long v39 = v29;
  long long v30 = *((_OWORD *)a1 + 7);
  long long v40 = *((_OWORD *)a1 + 6);
  long long v41 = v30;
  long long v31 = *((_OWORD *)a1 + 1);
  long long v34 = *(_OWORD *)a1;
  long long v35 = v31;
  long long v32 = *((_OWORD *)a1 + 3);
  long long v36 = *((_OWORD *)a1 + 2);
  long long v37 = v32;
  return _UIActionSheetPresentationControllerFrameForPresentedViewInAvailableBounds((uint64_t)&v34, v12 + v24, v14 + v25, v27, v28)+ 0.0;
}

uint64_t __UIActionSheetPresentationControllerLayoutViews_block_invoke(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  [*(id *)(a1 + 40) frame];
  return objc_msgSend(v1, "setFrame:");
}

double _UIActionSheetPresentationControllerFrameForDismissButtonInAvailableBounds(double *a1, double a2, double a3, double a4, double a5)
{
  double v5 = round(a2 + (a4 - a5) * 0.5);
  if (a1[4] > a1[5]) {
    a2 = v5;
  }
  return a2 + a1[9];
}

CGFloat _UIActionSheetPresentationControllerFrameForPresentedViewInAvailableBounds(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  double v9 = *(double *)(a1 + 8);
  if (v9 > 0.0 && v9 != -1.0)
  {
    CGRectGetMinY(*(CGRect *)&a2);
    v12.origin.CGFloat x = a2;
    v12.origin.CGFloat y = a3;
    v12.size.CGFloat width = a4;
    v12.size.CGFloat height = a5;
    CGRectGetMaxY(v12);
    v13.origin.CGFloat x = a2;
    v13.origin.CGFloat y = a3;
    v13.size.CGFloat width = a4;
    v13.size.CGFloat height = a5;
    CGRectGetMaxY(v13);
  }
  return a2 + (a4 - a4) * 0.5;
}

void UIActionSheetPresentationControllerAdjustForKeyboardNotification(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, _OWORD *a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, double a17)
{
  id v31 = a1;
  id v32 = a2;
  id v33 = a3;
  id v34 = a4;
  id v35 = a5;
  id v36 = a6;
  if (a17 > 0.0)
  {
    long long v37 = a7[5];
    v72[4] = a7[4];
    v72[5] = v37;
    long long v38 = a7[7];
    v72[6] = a7[6];
    v72[7] = v38;
    long long v39 = a7[1];
    v72[0] = *a7;
    v72[1] = v39;
    long long v40 = a7[3];
    v72[2] = a7[2];
    v72[3] = v40;
    UIActionSheetPresentationControllerLayoutViews(v31, v32, v33, v34, v35, v36, (unsigned __int8 *)v72, a9, a10, a11, a12);
  }
  v53[0] = MEMORY[0x1E4F143A8];
  v53[1] = 3221225472;
  v53[2] = __UIActionSheetPresentationControllerAdjustForKeyboardNotification_block_invoke;
  v53[3] = &unk_1E52E78B0;
  uint64_t v41 = a8 | 0x406;
  id v54 = v31;
  id v55 = v32;
  id v56 = v33;
  id v57 = v34;
  id v58 = v35;
  id v59 = v36;
  long long v42 = a7[5];
  long long v64 = a7[4];
  long long v65 = v42;
  long long v43 = a7[7];
  long long v66 = a7[6];
  long long v67 = v43;
  long long v44 = a7[1];
  long long v60 = *a7;
  long long v61 = v44;
  long long v45 = a7[3];
  long long v62 = a7[2];
  long long v63 = v45;
  double v68 = a13;
  double v69 = a14;
  double v70 = a15;
  double v71 = a16;
  id v46 = v36;
  id v47 = v35;
  id v48 = v34;
  id v49 = v33;
  id v50 = v32;
  id v51 = v31;
  +[UIView animateWithDuration:v41 delay:v53 options:0 animations:a17 completion:0.0];
}

void __UIActionSheetPresentationControllerAdjustForKeyboardNotification_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v1 = *(void **)(a1 + 40);
  id v3 = *(void **)(a1 + 48);
  id v4 = *(void **)(a1 + 56);
  double v5 = *(void **)(a1 + 64);
  uint64_t v6 = *(void **)(a1 + 72);
  long long v7 = *(_OWORD *)(a1 + 160);
  v11[4] = *(_OWORD *)(a1 + 144);
  v11[5] = v7;
  long long v8 = *(_OWORD *)(a1 + 192);
  v11[6] = *(_OWORD *)(a1 + 176);
  v11[7] = v8;
  long long v9 = *(_OWORD *)(a1 + 96);
  v11[0] = *(_OWORD *)(a1 + 80);
  v11[1] = v9;
  long long v10 = *(_OWORD *)(a1 + 128);
  v11[2] = *(_OWORD *)(a1 + 112);
  v11[3] = v10;
  UIActionSheetPresentationControllerLayoutViews(v2, v1, v3, v4, v5, v6, (unsigned __int8 *)v11, *(double *)(a1 + 208), *(double *)(a1 + 216), *(double *)(a1 + 224), *(double *)(a1 + 232));
}

double UIActionSheetPresentationControllerCurrentKeyboardFrame(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v2 = +[UIScene _scenesIncludingInternal:](UIWindowScene, "_scenesIncludingInternal:", 1, 0);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v15;
LABEL_3:
    uint64_t v6 = 0;
    while (1)
    {
      if (*(void *)v15 != v5) {
        objc_enumerationMutation(v2);
      }
      long long v7 = *(void **)(*((void *)&v14 + 1) + 8 * v6);
      id v8 = [v7 screen];

      if (v8 == v1) {
        break;
      }
      if (v4 == ++v6)
      {
        uint64_t v4 = [v2 countByEnumeratingWithState:&v14 objects:v18 count:16];
        if (v4) {
          goto LABEL_3;
        }
        goto LABEL_9;
      }
    }
    id v9 = v7;

    if (!v9) {
      goto LABEL_12;
    }
    long long v10 = [v9 keyboardSceneDelegate];
    [v10 visibleFrameInView:0];
    double v12 = v11;
  }
  else
  {
LABEL_9:

LABEL_12:
    double v12 = *MEMORY[0x1E4F1DB20];
  }

  return v12;
}

double _UIActionSheetPresentationControllerContentInsetsAdjustedForSafeAreaWithStandardContentInsets(void *a1, double a2, double a3, double a4, double a5)
{
  id v6 = a1;
  [v6 safeAreaInsets];
  double v8 = v7;
  id v9 = [v6 window];
  long long v10 = [v9 rootViewController];

  if (v10 && [v10 _providesCustomBasePresentationInsets])
  {
    [v10 _customBasePresentationInsetsForView:v6];
    double v8 = v11;
  }
  objc_msgSend(v6, "bounds", *(void *)&a4, *(void *)&a5);
  double v13 = v12;
  double v15 = v14;
  long long v16 = [v6 window];
  [v16 bounds];
  if (v13 == v18 && v15 == v17)
  {
    long long v20 = [v6 traitCollection];
    uint64_t v21 = [v20 userInterfaceIdiom];

    if (v21 != 3)
    {
      double v22 = fmax(a2, v8);
      goto LABEL_12;
    }
  }
  else
  {
  }
  double v22 = a2 + v8;
LABEL_12:

  return v22;
}

void UIActionSheetPresentationControllerAddViewsToContainerView(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a5;
  id v10 = a4;
  id v11 = a3;
  id v12 = a2;
  id v13 = a1;
  [v13 addSubview:v11];
  [v13 insertSubview:v12 belowSubview:v11];

  [v13 insertSubview:v10 aboveSubview:v12];
  [v13 addSubview:v9];
}

id UIActionSheetPresentationControllerToUse(void *a1, uint64_t a2, void *a3, void *a4, char a5)
{
  id v9 = a3;
  id v10 = a4;
  id v11 = v9;
  id v12 = a1;
  uint64_t v13 = [v12 horizontalSizeClass];
  uint64_t v14 = [v12 verticalSizeClass];

  if (a2 == 2) {
    char v15 = a5;
  }
  else {
    char v15 = 1;
  }
  if (v13 != 1) {
    char v15 = 0;
  }
  if (a2 == 1 || (v15 & 1) != 0 || (id v16 = v11, v14 == 1))
  {
    id v16 = v10;
  }
  return v16;
}

_UIAnimationCoordinator *UIActionSheetPresentationControllerAnimationCoordinatorForFrameChangeOfView(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, double a7, double a8, double a9, double a10, double a11)
{
  id v21 = a4;
  id v22 = a5;
  id v23 = a6;
  id v24 = a3;
  id v25 = a2;
  id v26 = a1;
  CGFloat v27 = objc_alloc_init(_UIAnimationCoordinator);
  [(_UIAnimationCoordinator *)v27 setDuration:a11];
  v44[0] = MEMORY[0x1E4F143A8];
  v44[1] = 3221225472;
  v44[2] = __UIActionSheetPresentationControllerAnimationCoordinatorForFrameChangeOfView_block_invoke;
  _OWORD v44[3] = &unk_1E52E78D8;
  id v45 = v21;
  id v28 = v21;
  [(_UIAnimationCoordinator *)v27 setPreperation:v44];
  v42[0] = MEMORY[0x1E4F143A8];
  v42[1] = 3221225472;
  v42[2] = __UIActionSheetPresentationControllerAnimationCoordinatorForFrameChangeOfView_block_invoke_2;
  v42[3] = &unk_1E52E78D8;
  id v43 = v22;
  id v29 = v22;
  [(_UIAnimationCoordinator *)v27 setAnimator:v42];
  v40[0] = MEMORY[0x1E4F143A8];
  v40[1] = 3221225472;
  v40[2] = __UIActionSheetPresentationControllerAnimationCoordinatorForFrameChangeOfView_block_invoke_3;
  v40[3] = &unk_1E52E78D8;
  id v41 = v23;
  id v30 = v23;
  [(_UIAnimationCoordinator *)v27 setCompletion:v40];
  [(_UIAnimationCoordinator *)v27 setContainerView:v25];

  [(_UIAnimationCoordinator *)v27 setViewController:v24];
  [v26 frame];
  double v32 = v31;
  double v34 = v33;
  double v36 = v35;
  double v38 = v37;

  -[_UIAnimationCoordinator setStartFrame:](v27, "setStartFrame:", v32, v34, v36, v38);
  -[_UIAnimationCoordinator setEndFrame:](v27, "setEndFrame:", a7, a8, a9, a10);

  return v27;
}

uint64_t __UIActionSheetPresentationControllerAnimationCoordinatorForFrameChangeOfView_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __UIActionSheetPresentationControllerAnimationCoordinatorForFrameChangeOfView_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __UIActionSheetPresentationControllerAnimationCoordinatorForFrameChangeOfView_block_invoke_3(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_185DAED80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
}

void sub_185DB11FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *a11, id *a12, id *location)
{
  objc_destroyWeak(location);
  objc_destroyWeak(a11);
  objc_destroyWeak(a12);
  objc_destroyWeak((id *)(v13 - 216));
  _Unwind_Resume(a1);
}

void sub_185DB354C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185DB3CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185DB5BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
}

__CFString *_NSStringForUIPresentationControllerState(unint64_t a1)
{
  if (a1 > 5) {
    return @"<unknown>";
  }
  else {
    return off_1E52E7D98[a1];
  }
}

double _frameIgnoringLayerTransformOnOrAfterYukon(void *a1)
{
  id v1 = a1;
  if (dyld_program_sdk_at_least()) {
    [v1 _frameIgnoringLayerTransform];
  }
  else {
    [v1 frame];
  }
  double v3 = v2;

  return v3;
}

uint64_t deviceRemovedCallback(void *a1, const char *a2)
{
  return [a1 performSelector:sel_notifyObserversIfNecessary withObject:0 afterDelay:0.1];
}

void sub_185DBCC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_185DBD62C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

double _UISheetTransitionDuration()
{
  int v0 = _UIFallbackSheetMetrics();
  [v0 transitionDuration];
  double v2 = v1;

  return v2;
}

id _UISheetTransitionSpringParametersHighSpeed(uint64_t a1)
{
  double v2 = _UIFallbackSheetMetrics();
  double v3 = [v2 transitionSpringParametersHighSpeed:a1];

  return v3;
}

id _UISheetTransitionTimingCurve()
{
  if (qword_1EB25FF98 != -1) {
    dispatch_once(&qword_1EB25FF98, &__block_literal_global_128);
  }
  int v0 = (void *)_MergedGlobals_1003;
  return v0;
}

void _UISheetAnimate(void *a1)
{
}

void _UISheetAnimateWithCompletion(void *a1, void *a2)
{
  id v8 = a2;
  id v3 = a1;
  uint64_t v4 = [UIViewPropertyAnimator alloc];
  double v5 = _UISheetTransitionDuration();
  id v6 = _UISheetTransitionTimingCurve();
  double v7 = [(UIViewPropertyAnimator *)v4 initWithDuration:v6 timingParameters:v5];

  [(UIViewPropertyAnimator *)v7 addAnimations:v3];
  if (v8) {
    [(UIViewPropertyAnimator *)v7 addCompletion:v8];
  }
  [(UIViewPropertyAnimator *)v7 startAnimation];
}

void _UISheetTransform(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>, CGFloat a4@<D0>, CGFloat a5@<D1>, CGFloat a6@<D2>, CGFloat a7@<D3>, CGFloat a8@<D4>, CGFloat a9@<D5>, CGFloat a10@<D6>, CGFloat a11@<D7>, double a12, double a13)
{
  id v21 = a1;
  _UIFallbackSheetMetrics();
  id v22 = (id)objc_claimAutoreleasedReturnValue();
  _UISheetTransformForMetrics(a3, v21, a2, v22, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

double _UISheetFormSize(void *a1, double a2, double a3)
{
  return _UISheetSize(a1, 1, a2, a3);
}

uint64_t _UISheetIndexOfDetentWithIdentifier(void *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = ___UISheetIndexOfDetentWithIdentifier_block_invoke;
  v9[3] = &unk_1E52E7E90;
  id v10 = v5;
  id v6 = v5;
  uint64_t v7 = [a1 indexOfObjectPassingTest:v9];
  if (v7 != 0x7FFFFFFFFFFFFFFFLL) {
    a3 = v7;
  }

  return a3;
}

id __UIMoreListImageForViewController(void *a1, void *a2, char a3)
{
  id v5 = a1;
  id v6 = a2;
  uint64_t v7 = v6;
  if (a3) {
    [v6 moreListSelectedImage];
  }
  else {
  id v8 = [v6 moreListImage];
  }
  if (!v8)
  {
    uint64_t v9 = [v7 tabBarItem];
    id v8 = [v9 _internalTemplateImage];
  }
  return v8;
}

uint64_t _UITabBarControllerWantsFloatingTabBar()
{
  if (qword_1EB25E600 != -1) {
    dispatch_once(&qword_1EB25E600, &__block_literal_global_130);
  }
  return _MergedGlobals_43;
}

void sub_185DC6A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185DC9148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185DC94B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getEMFEmojiLocaleDataClass_block_invoke(uint64_t a1)
{
  EmojiFoundationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("EMFEmojiLocaleData");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    _MergedGlobals_1005 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    double v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getEMFEmojiLocaleDataClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationTipEmojiHandler.m", 21, @"Unable to find class %s", "EMFEmojiLocaleData");

    __break(1u);
  }
}

void EmojiFoundationLibrary()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!EmojiFoundationLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __EmojiFoundationLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E52E8150;
    uint64_t v5 = 0;
    EmojiFoundationLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  if (!EmojiFoundationLibraryCore_frameworkLibrary)
  {
    double v1 = [MEMORY[0x1E4F28B00] currentHandler];
    double v2 = [NSString stringWithUTF8String:"void *EmojiFoundationLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"UIDictationTipEmojiHandler.m", 19, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  int v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __EmojiFoundationLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  EmojiFoundationLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

void __getEMFEmojiTokenClass_block_invoke(uint64_t a1)
{
  EmojiFoundationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("EMFEmojiToken");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1EB25FFF8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    double v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getEMFEmojiTokenClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationTipEmojiHandler.m", 20, @"Unable to find class %s", "EMFEmojiToken");

    __break(1u);
  }
}

void sub_185DC9A1C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_185DC9F64(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void __getQLItemClass_block_invoke(uint64_t a1)
{
  QuickLookLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("QLItem");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1EB260008 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    double v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getQLItemClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDocument_PDFGeneration.m", 19, @"Unable to find class %s", "QLItem");

    __break(1u);
  }
}

void QuickLookLibrary()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!QuickLookLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __QuickLookLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E52E81B8;
    uint64_t v5 = 0;
    QuickLookLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  if (!QuickLookLibraryCore_frameworkLibrary)
  {
    uint64_t v1 = [MEMORY[0x1E4F28B00] currentHandler];
    double v2 = [NSString stringWithUTF8String:"void *QuickLookLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"UIDocument_PDFGeneration.m", 18, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  int v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __QuickLookLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  QuickLookLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

void __getQLPreviewControllerClass_block_invoke(uint64_t a1)
{
  QuickLookLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("QLPreviewController");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1EB260010 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    double v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getQLPreviewControllerClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDocument_PDFGeneration.m", 20, @"Unable to find class %s", "QLPreviewController");

    __break(1u);
  }
}

Class __getUIPrintInteractionControllerClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB260020)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    v6[3] = __PrintKitUILibraryCore_block_invoke;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_1E52E81D0;
    uint64_t v8 = 0;
    qword_1EB260020 = _sl_dlopen();
  }
  if (!qword_1EB260020)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v4 = [NSString stringWithUTF8String:"void *PrintKitUILibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIDocument_PDFGeneration.m", 15, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("UIPrintInteractionController");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getUIPrintInteractionControllerClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIDocument_PDFGeneration.m", 16, @"Unable to find class %s", "UIPrintInteractionController");

LABEL_10:
    __break(1u);
  }
  qword_1EB260018 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __PrintKitUILibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB260020 = result;
  return result;
}

void stateMachineSpec_block_invoke_4_1(uint64_t a1, void *a2)
{
  double v2 = a2;
  if ([v2 reachedClickDownThreshold]) {
    handleEvent(stateMachineSpec_0, v2[1], 2, (uint64_t)v2, v2 + 1);
  }
}

uint64_t stateMachineSpec_block_invoke_5_1(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = [v2 delegate];
  [v3 clickDriver:v2 didPerformEvent:2];

  return 1;
}

void sub_185DCAC8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t _forceMultiplierFromForce(int a1)
{
  if (a1)
  {
    _UIInternalPreferenceUsesDefault_1((int *)&unk_1EB257018, @"LongPressClickInteractionDriverMinimumForceAccelerationThresholdPointer");
    return _UIInternalPreferenceUsesDefault_1((int *)algn_1EB257038, @"LongPressClickInteractionDriverForceAccelerationMultiplierPointer");
  }
  else
  {
    _UIInternalPreferenceUsesDefault_1((int *)&unk_1EB257008, @"LongPressClickInteractionDriverMinimumForceAccelerationThreshold");
    return _UIInternalPreferenceUsesDefault_1((int *)algn_1EB257028, @"LongPressClickInteractionDriverForceAccelerationMultiplier");
  }
}

void _CreateRotationSnapshot(void *a1, void *a2, UISnapshotView **a3, void *a4, uint64_t a5, uint64_t a6, double a7, CGFloat a8, CGFloat a9, CGFloat a10, CGFloat a11)
{
  if (a1)
  {
    double v12 = a11;
    double v13 = a10;
    double v14 = a9;
    double v15 = a8;
    v49.origin.CGFloat x = a8;
    v49.origin.CGFloat y = a9;
    v49.size.CGFloat width = a10;
    v49.size.CGFloat height = a11;
    if (CGRectIsEmpty(v49))
    {
      [a1 bounds];
      objc_msgSend(a2, "convertRect:fromView:", a1);
      double v15 = v22;
      double v14 = v23;
      double v13 = v24;
      double v12 = v25;
    }
    id v26 = -[UISnapshotView initWithFrame:]([UISnapshotView alloc], "initWithFrame:", v15, v14, v13, v12);
    -[UISnapshotView setEdgeInsets:](v26, "setEdgeInsets:", 0.0, 0.0, a7, 0.0);
    [(UISnapshotView *)v26 captureSnapshotOfView:a1 withSnapshotType:a6];
    if (a5 && *(unsigned char *)(a5 + 1))
    {
      [(UISnapshotView *)v26 setVerticalStretchEnabled:0];
      CGFloat v27 = [a1 backgroundColor]
          ? (UIColor *)[a1 backgroundColor]
          : +[UIColor whiteColor];
      [(UIView *)v26 setBackgroundColor:v27];
      if (*(double *)(a5 + 8) != 0.0)
      {
        [a1 bounds];
        if (v28 <= v29) {
          double v30 = 0.001;
        }
        else {
          double v30 = v28 - v29;
        }
        -[CALayer setContentsCenter:]([(UIView *)[(UISnapshotView *)v26 _snapshotView] layer], "setContentsCenter:", 1.0 / v28 * (v28 - *(double *)(a5 + 8) + -0.5 - v30), 0.0, 1.0 / v28 * v30, 1.0);
      }
    }
    if (a4) {
      [a2 insertSubview:v26 belowSubview:a4];
    }
    else {
      [a2 insertSubview:v26 atIndex:0];
    }

    *a3 = v26;
    if (objc_opt_respondsToSelector())
    {
      double v31 = (void *)[a1 _shadowView];
      objc_opt_class();
      char isKindOfClass = objc_opt_isKindOfClass();
      if (v31)
      {
        if ((isKindOfClass & 1) != 0 && [v31 image])
        {
          id v47 = -[UIImageView initWithImage:]([UIImageView alloc], "initWithImage:", [v31 image]);
        }
        else if ([v31 backgroundColor])
        {
          double v33 = [UIView alloc];
          [v31 frame];
          id v47 = -[UIView initWithFrame:](v33, "initWithFrame:");
          -[UIImageView setBackgroundColor:](v47, "setBackgroundColor:", [v31 backgroundColor]);
        }
        else
        {
          id v47 = 0;
        }
        [v31 bounds];
        -[UIView convertRect:fromView:](v26, "convertRect:fromView:", v31);
        double v35 = v34;
        double v37 = v36;
        double v39 = v38;
        double v41 = v40;
        long long v42 = (void *)[a4 shadowView];
        if (v42)
        {
          [v42 frame];
          double v35 = v43;
          double v37 = v44;
          double v39 = v45;
          double v41 = v46;
        }
        -[UIImageView setFrame:](v47, "setFrame:", v35, v37, v39, v41);
        -[UIView setAutoresizingMask:](v47, "setAutoresizingMask:", [v31 autoresizingMask]);
        [(UISnapshotView *)v26 setShadowView:v47];
      }
    }
  }
}

BOOL UIImagePickerLoadPhotoLibraryIfNecessary()
{
  if (UIImagePickerLoadPhotoLibraryIfNecessary___FrameworkLoaded) {
    return 1;
  }
  uint64_t v1 = dlopen((const char *)[@"/System/Library/PrivateFrameworks/PhotoLibrary.framework/PhotoLibrary" fileSystemRepresentation], 2);
  __PhotoLibraryFrameworkHandle = (uint64_t)v1;
  if (!v1)
  {
    id v2 = (FILE *)*MEMORY[0x1E4F143C8];
    id v3 = dlerror();
    fprintf(v2, "Couldn't load framework: %s\n", v3);
    uint64_t v1 = (void *)__PhotoLibraryFrameworkHandle;
  }
  BOOL result = v1 != 0;
  UIImagePickerLoadPhotoLibraryIfNecessary___FrameworkLoaded = 1;
  return result;
}

void UIImagePickerEnsureViewIsInsidePopover(void *a1)
{
  id v14 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v1 = [v14 _valueForProperty:@"_UIImagePickerControllerAllowAnySuperview"];
    if ([v1 BOOLValue])
    {
LABEL_8:

      goto LABEL_9;
    }
    uint64_t v2 = [v14 sourceType];

    if (v2 == 1) {
      goto LABEL_9;
    }
  }
  id v3 = +[UIDevice currentDevice];
  uint64_t v4 = [v3 userInterfaceIdiom];

  if ((v4 & 0xFFFFFFFFFFFFFFFBLL) != 1) {
    goto LABEL_9;
  }
  uint64_t v1 = [v14 view];
  uint64_t v5 = [v1 window];
  if (!v5) {
    goto LABEL_8;
  }
  uint64_t v6 = (void *)v5;
  long long v7 = [v14 view];
  uint64_t v8 = +[_UIPopoverView popoverViewContainingView:v7];

  if (!v8)
  {
    uint64_t v9 = NSString;
    id v10 = (objc_class *)objc_opt_class();
    uint64_t v11 = NSStringFromClass(v10);
    uint64_t v12 = [v9 stringWithFormat:@"On iPad, %@ must be presented via UIPopoverController", v11];

    id v13 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8] reason:v12 userInfo:0];
    objc_exception_throw(v13);
  }
LABEL_9:
}

id MediaTypeForCameraCaptureMode(uint64_t a1)
{
  if (!a1)
  {
    id v3 = (id *)MEMORY[0x1E4F44400];
LABEL_5:
    uint64_t v4 = objc_msgSend(*v3, "identifier", v1);
    return v4;
  }
  if (a1 == 1)
  {
    id v3 = (id *)MEMORY[0x1E4F44448];
    goto LABEL_5;
  }
  uint64_t v4 = 0;
  return v4;
}

void sub_185DD2F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185DD3384(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 128));
  _Unwind_Resume(a1);
}

void sub_185DD3848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, char a17)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_185DD3E14(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_185DD4080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185DD4198(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void UIImageWriteToSavedPhotosAlbum(UIImage *image, id completionTarget, SEL completionSelector, void *contextInfo)
{
  id v13 = image;
  id v7 = completionTarget;
  PhotoLibraryIfNecessarCGFloat y = UIImagePickerLoadPhotoLibraryIfNecessary();
  uint64_t v9 = UIImageWriteToSavedPhotosAlbum___PLSaveImageToCameraRoll;
  if (PhotoLibraryIfNecessary
    && __PhotoLibraryFrameworkHandle
    && UIImageWriteToSavedPhotosAlbum___PLSaveImageToCameraRoll == 0)
  {
    uint64_t v9 = dlsym((void *)__PhotoLibraryFrameworkHandle, "PLSaveImageToCameraRoll");
    UIImageWriteToSavedPhotosAlbum___PLSaveImageToCameraRoll = v9;
  }
  if (v9)
  {
    ((void (*)(UIImage *, id, SEL, void *))v9)(v13, v7, completionSelector, contextInfo);
  }
  else if (v7 && completionSelector)
  {
    uint64_t v11 = (FILE *)*MEMORY[0x1E4F143C8];
    uint64_t v12 = dlerror();
    fprintf(v11, "Couldn't find saving function. %s\n", v12);
  }
}

void UIImageDataWriteToSavedPhotosAlbum(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v13 = a1;
  id v7 = a2;
  PhotoLibraryIfNecessarCGFloat y = UIImagePickerLoadPhotoLibraryIfNecessary();
  uint64_t v9 = UIImageDataWriteToSavedPhotosAlbum___PLSaveImageDataToCameraRoll;
  if (PhotoLibraryIfNecessary
    && __PhotoLibraryFrameworkHandle
    && UIImageDataWriteToSavedPhotosAlbum___PLSaveImageDataToCameraRoll == 0)
  {
    uint64_t v9 = dlsym((void *)__PhotoLibraryFrameworkHandle, "PLSaveImageDataToCameraRoll");
    UIImageDataWriteToSavedPhotosAlbum___PLSaveImageDataToCameraRoll = v9;
  }
  if (v9)
  {
    ((void (*)(id, id, uint64_t, uint64_t))v9)(v13, v7, a3, a4);
  }
  else if (v7 && a3)
  {
    uint64_t v11 = (FILE *)*MEMORY[0x1E4F143C8];
    uint64_t v12 = dlerror();
    fprintf(v11, "Couldn't find saving function. %s\n", v12);
  }
}

BOOL UIVideoAtPathIsCompatibleWithSavedPhotosAlbum(NSString *videoPath)
{
  uint64_t v1 = videoPath;
  PhotoLibraryIfNecessarCGFloat y = UIImagePickerLoadPhotoLibraryIfNecessary();
  id v3 = UIVideoAtPathIsCompatibleWithSavedPhotosAlbum___PLCanSaveVideoToCameraRoll;
  if (PhotoLibraryIfNecessary
    && __PhotoLibraryFrameworkHandle
    && UIVideoAtPathIsCompatibleWithSavedPhotosAlbum___PLCanSaveVideoToCameraRoll == 0)
  {
    id v3 = dlsym((void *)__PhotoLibraryFrameworkHandle, "PLCanSaveVideoToCameraRoll");
    UIVideoAtPathIsCompatibleWithSavedPhotosAlbum___PLCanSaveVideoToCameraRoll = v3;
  }
  if (v3)
  {
    char v5 = ((uint64_t (*)(NSString *))v3)(v1);
  }
  else
  {
    uint64_t v6 = (FILE *)*MEMORY[0x1E4F143C8];
    id v7 = dlerror();
    fprintf(v6, "Couldn't find 'can save video' function. %s\n", v7);
    char v5 = 0;
  }

  return v5;
}

void UISaveVideoAtPathToSavedPhotosAlbum(NSString *videoPath, id completionTarget, SEL completionSelector, void *contextInfo)
{
  id v13 = videoPath;
  id v7 = completionTarget;
  PhotoLibraryIfNecessarCGFloat y = UIImagePickerLoadPhotoLibraryIfNecessary();
  uint64_t v9 = UISaveVideoAtPathToSavedPhotosAlbum___PLSaveVideoToCameraRoll;
  if (PhotoLibraryIfNecessary
    && __PhotoLibraryFrameworkHandle
    && UISaveVideoAtPathToSavedPhotosAlbum___PLSaveVideoToCameraRoll == 0)
  {
    uint64_t v9 = dlsym((void *)__PhotoLibraryFrameworkHandle, "PLSaveVideoToCameraRoll");
    UISaveVideoAtPathToSavedPhotosAlbum___PLSaveVideoToCameraRoll = v9;
  }
  if (v9)
  {
    ((void (*)(NSString *, id, SEL, void *))v9)(v13, v7, completionSelector, contextInfo);
  }
  else if (v7 && completionSelector)
  {
    uint64_t v11 = (FILE *)*MEMORY[0x1E4F143C8];
    uint64_t v12 = dlerror();
    fprintf(v11, "Couldn't find saving function. %s\n", v12);
  }
}

UIImageView *_shadowImageInRectForSlice(void *a1, unsigned int a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  id v19 = a1;
  long long v20 = -[UIImageView initWithFrame:]([UIImageView alloc], "initWithFrame:", a3, a4, a5, a6);
  [(UIView *)v20 setAutoresizingMask:a2];
  [v19 scale];
  double v22 = v21;
  CGFloat v23 = a7 * v21;
  CGFloat v24 = a8 * v21;
  CGFloat v25 = a9 * v21;
  CGFloat v26 = a10 * v21;
  id v27 = v19;
  double v28 = (CGImage *)[v27 CGImage];

  v33.origin.CGFloat x = v23;
  v33.origin.CGFloat y = v24;
  v33.size.CGFloat width = v25;
  v33.size.CGFloat height = v26;
  CGImageRef v29 = CGImageCreateWithImageInRect(v28, v33);
  double v30 = [[UIImage alloc] initWithCGImage:v29 scale:0 orientation:v22];
  [(UIImageView *)v20 setImage:v30];
  CFRelease(v29);

  return v20;
}

uint64_t _UINavigationControllerUseEdgeSwipeForNavigationPopTransitions()
{
  return 1;
}

void sub_185DD8398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,id location)
{
  objc_destroyWeak(v36);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void _gestureProgress(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  [v6 translationInView:a1];
  id v7 = [v5 stash];

  uint64_t v8 = [v7 objectForKeyedSubscript:@"NavigationBarTravelDistance"];
  [v8 doubleValue];

  [v6 bias];
}

void sub_185DE6678(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 248), 8);
  _Block_object_dispose((const void *)(v1 - 184), 8);
  _Unwind_Resume(a1);
}

void sub_185DE6C88(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_185DE6FD0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void ___allowRelaxRepeatedPushAssertionForSplitViewController_block_invoke()
{
  byte_1EB25A81D = _resolvedPrefValue(@"UINavigationControllerRelaxRepeatedPushAssertionForSplitViewController");
  if (qword_1EB25A920 != -1) {
    dispatch_once(&qword_1EB25A920, &__block_literal_global_1759_0);
  }
  if (byte_1EB25A81C)
  {
    int v0 = *(NSObject **)(__UILogGetCategoryCachedImpl("NavigationControllerVerboseLoggingForStrictRepeatedPushAssertion", &qword_1EB25A930)+ 8);
    if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v1 = 0;
      _os_log_impl(&dword_1853B0000, v0, OS_LOG_TYPE_ERROR, "Verbose logging for navigation controller pushes are in the category NavigationControllerVerboseLoggingForStrictRepeatedPushAssertion", v1, 2u);
    }
  }
}

void UIPageViewControllerCommonInitWithTransitionStyleAndNavigationOrientation(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = v5;
  v5[124] = a2;
  v5[125] = a3;
  v5[126] = (id)(a2 == 0);
  *((unsigned char *)v5 + 1016) = 0;
  v5[154] = (id)-1;
  if (a2)
  {
    if (a2 != (void *)1) {
      goto LABEL_6;
    }
    id v14 = v5;
    id v7 = (id)[objc_alloc(MEMORY[0x1E4F28D30]) initWithOptions:512 capacity:1];
    uint64_t v8 = 152;
  }
  else
  {
    id v14 = v5;
    uint64_t v9 = [[UIPanGestureRecognizer alloc] initWithTarget:v5 action:sel__handlePanGesture_];
    id v10 = v14[130];
    v14[130] = v9;

    [v14[130] setMaximumNumberOfTouches:1];
    objc_msgSend(v14[130], "setDelegate:");
    uint64_t v11 = [[UITapGestureRecognizer alloc] initWithTarget:v14 action:sel__handleTapGesture_];
    id v12 = v14[131];
    v14[131] = v11;

    objc_msgSend(v14[131], "setDelegate:");
    id v7 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    uint64_t v8 = 151;
  }
  id v13 = v14[v8];
  v14[v8] = v7;

  id v6 = v14;
LABEL_6:
}

void sub_185DEB800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185DEBD14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185DED388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185DF2710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _UIPageCurlFilterPropertyNameForAnimationKeyPath(void *a1)
{
  uint64_t v1 = [a1 componentsSeparatedByString:@"."];
  uint64_t v2 = [v1 lastObject];
  id v3 = [@"curl" stringByAppendingFormat:@"-%@", v2];

  return v3;
}

void sub_185DF7F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185DFE14C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E00270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E012F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,id location)
{
}

void sub_185E02B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

void sub_185E046A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E0511C(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_185E05A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E07EFC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 216), 8);
  _Unwind_Resume(a1);
}

void sub_185E09E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, id *a10, id *a11)
{
  objc_destroyWeak(v11);
  objc_destroyWeak(location);
  objc_destroyWeak(a10);
  objc_destroyWeak(a11);
  objc_destroyWeak((id *)(v12 - 216));
  _Unwind_Resume(a1);
}

UIView *CreateSeparatorView()
{
  int v0 = [UIView alloc];
  uint64_t v1 = -[UIView initWithFrame:](v0, "initWithFrame:", *MEMORY[0x1E4F1DB28], *(double *)(MEMORY[0x1E4F1DB28] + 8), *(double *)(MEMORY[0x1E4F1DB28] + 16), *(double *)(MEMORY[0x1E4F1DB28] + 24));
  uint64_t v2 = +[UIColor separatorColor];
  [(UIView *)v1 setBackgroundColor:v2];

  return v1;
}

void sub_185E0AAFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185E0C508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E0CE58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E0D864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E0DB1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void WebKitLibrary()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!WebKitLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __WebKitLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E52E93E0;
    uint64_t v5 = 0;
    WebKitLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  if (!WebKitLibraryCore_frameworkLibrary)
  {
    uint64_t v1 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v2 = [NSString stringWithUTF8String:"void *WebKitLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"UIReferenceLibraryViewController.m", 51, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  int v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __WebKitLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  WebKitLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

void __getWKUserContentControllerClass_block_invoke(uint64_t a1)
{
  WebKitLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("WKUserContentController");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1EB25C8C0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getWKUserContentControllerClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIReferenceLibraryViewController.m", 54, @"Unable to find class %s", "WKUserContentController");

    __break(1u);
  }
}

void __getWKWebViewConfigurationClass_block_invoke(uint64_t a1)
{
  WebKitLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("WKWebViewConfiguration");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1EB25C8C8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getWKWebViewConfigurationClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIReferenceLibraryViewController.m", 55, @"Unable to find class %s", "WKWebViewConfiguration");

    __break(1u);
  }
}

void __getWKWebViewClass_block_invoke(uint64_t a1)
{
  WebKitLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("WKWebView");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1EB25C8D0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getWKWebViewClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIReferenceLibraryViewController.m", 52, @"Unable to find class %s", "WKWebView");

    __break(1u);
  }
}

void *__getDCSDictionaryAssetAttributesDownloadedSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = DictionaryServicesLibrary();
  uint64_t result = dlsym(v2, "DCSDictionaryAssetAttributesDownloaded");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getDCSDictionaryAssetAttributesDownloadedSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *DictionaryServicesLibrary()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!DictionaryServicesLibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    v4[2] = (void *)3221225472;
    v4[3] = __DictionaryServicesLibraryCore_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_1E52E93F8;
    uint64_t v6 = 0;
    DictionaryServicesLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  int v0 = (void *)DictionaryServicesLibraryCore_frameworkLibrary;
  if (!DictionaryServicesLibraryCore_frameworkLibrary)
  {
    int v0 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *DictionaryServicesLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIReferenceLibraryViewController.m", 46, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __DictionaryServicesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  DictionaryServicesLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

void *__getDCSDictionaryAssetAttributesWillBePurgedSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = DictionaryServicesLibrary();
  uint64_t result = dlsym(v2, "DCSDictionaryAssetAttributesWillBePurged");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getDCSDictionaryAssetAttributesWillBePurgedSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                          + 24);
  return result;
}

void sub_185E102A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E10A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E10C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E11418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E11CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
}

void sub_185E11EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getDCSDictionaryCreateWithAssetAttributesSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = DictionaryServicesLibrary_0();
  uint64_t result = dlsym(v2, "DCSDictionaryCreateWithAssetAttributes");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getDCSDictionaryCreateWithAssetAttributesSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *DictionaryServicesLibrary_0()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!DictionaryServicesLibraryCore_frameworkLibrary_0)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    v4[2] = (void *)3221225472;
    v4[3] = __DictionaryServicesLibraryCore_block_invoke_0;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_1E52E9458;
    uint64_t v6 = 0;
    DictionaryServicesLibraryCore_frameworkLibrary_0 = _sl_dlopen();
  }
  int v0 = (void *)DictionaryServicesLibraryCore_frameworkLibrary_0;
  if (!DictionaryServicesLibraryCore_frameworkLibrary_0)
  {
    int v0 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *DictionaryServicesLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"_UIDictionaryManager.m", 32, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __DictionaryServicesLibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  DictionaryServicesLibraryCore_frameworkLibrary_0 = result;
  return result;
}

void *__getDCSHasDefinitionForTermSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = DictionaryServicesLibrary_0();
  uint64_t result = dlsym(v2, "DCSHasDefinitionForTerm");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getDCSHasDefinitionForTermSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getDCSCopyDefinitionMarkupSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = DictionaryServicesLibrary_0();
  uint64_t result = dlsym(v2, "DCSCopyDefinitionMarkup");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getDCSCopyDefinitionMarkupSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getDCSDictionaryAssetGetAssetTypeSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = DictionaryServicesLibrary_0();
  uint64_t result = dlsym(v2, "DCSDictionaryAssetGetAssetType");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getDCSDictionaryAssetGetAssetTypeSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getDCSDictionaryAssetGetCompatibilityVersionSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = DictionaryServicesLibrary_0();
  uint64_t result = dlsym(v2, "DCSDictionaryAssetGetCompatibilityVersion");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getDCSDictionaryAssetGetCompatibilityVersionSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                           + 24);
  return result;
}

Class __getRTTSettingsClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB260058)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    v6[3] = __RTTUtilitiesLibraryCore_block_invoke;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_1E52E9470;
    uint64_t v8 = 0;
    qword_1EB260058 = _sl_dlopen();
  }
  if (!qword_1EB260058)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v4 = [NSString stringWithUTF8String:"void *RTTUtilitiesLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"_UIDictionaryManager.m", 41, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("RTTSettings");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"Class getRTTSettingsClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UIDictionaryManager.m", 42, @"Unable to find class %s", "RTTSettings");

LABEL_10:
    __break(1u);
  }
  qword_1EB260050 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __RTTUtilitiesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB260058 = result;
  return result;
}

void sub_185E12890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id VisibleViewController(void *a1)
{
  id v1 = a1;
  DataDetectorsUIGetClass(@"DDParsecCollectionViewController");
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    id v2 = v1;
  }
  else
  {
    id v2 = [v1 visibleViewController];
  }
  id v3 = v2;

  return v3;
}

void UISearchDisplayControllerNoLongerSupported()
{
  if (qword_1EB25E6C8 != -1) {
    dispatch_once(&qword_1EB25E6C8, &__block_literal_global_137);
  }
  if (_MergedGlobals_23)
  {
    if (os_variant_has_internal_diagnostics())
    {
      id v3 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1853B0000, v3, OS_LOG_TYPE_FAULT, "rdar://101286541 (AMS Finance UI uses UISearchDisplayController, which is no longer supported)", buf, 2u);
      }
    }
    else
    {
      int v0 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB25E6D0) + 8);
      if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long v4 = 0;
        _os_log_impl(&dword_1853B0000, v0, OS_LOG_TYPE_ERROR, "rdar://101286541 (AMS Finance UI uses UISearchDisplayController, which is no longer supported)", v4, 2u);
      }
    }
  }
  else if (dyld_program_sdk_at_least())
  {
    id v1 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v2 = *MEMORY[0x1E4F1C3A8];
    [v1 raise:v2 format:@"UISearchDisplayController is no longer supported when linking against this version of iOS. Please migrate your application to UISearchController."];
  }
}

void __UISearchDisplayControllerNoLongerSupported_block_invoke()
{
  _UIMainBundleIdentifier();
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  _MergedGlobals_23 = [v0 isEqualToString:@"com.apple.MobileStore"];
}

void UISearchDisplayControllerCommonInit(void *a1)
{
  id v1 = a1;
  [v1 setAutomaticallyShowsNoResultsMessage:1];
  [v1 setDimTableViewOnEmptySearchString:1];
  [v1 setNavigationBarHidingEnabled:1];
  *((void *)v1 + 17) = -1;
  *((_WORD *)v1 + 128) |= 0x1000u;
}

uint64_t _EnableScrollView(void *a1)
{
  [a1 setScrollEnabled:1];
  return [a1 setProgrammaticScrollEnabled:1];
}

id _UICurrentHitTestContext()
{
  return (id)_MergedGlobals_1009;
}

uint64_t _UIIsCurrentHitTestContextAvailable()
{
  return 1;
}

void sub_185E1C5A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185E20F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185E212AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id location)
{
}

void _updateTreatsHiddenAsOverlapsInStates(void *a1, int a2, int a3, int a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  uint64_t v8 = v7;
  if ((a2 & 1) != 0 || (a3 & 1) != 0 || a4)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    uint64_t v9 = [v7 countByEnumeratingWithState:&v17 objects:v21 count:16];
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = *(void *)v18;
      do
      {
        uint64_t v12 = 0;
        do
        {
          if (*(void *)v18 != v11) {
            objc_enumerationMutation(v8);
          }
          id v13 = *(void **)(*((void *)&v17 + 1) + 8 * v12);
          if (a2)
          {
            [*(id *)(*((void *)&v17 + 1) + 8 * v12) leadingWidth];
            if (v14 == 0.0) {
              [v13 _setTreatLeadingHiddenAsOverlaps:1];
            }
          }
          if (a3)
          {
            [v13 trailingWidth];
            if (v15 == 0.0) {
              [v13 _setTreatTrailingHiddenAsOverlaps:1];
            }
          }
          if (a4)
          {
            [v13 supplementaryWidth];
            if (v16 == 0.0) {
              [v13 _setTreatSupplementaryHiddenAsOverlaps:1];
            }
          }
          ++v12;
        }
        while (v10 != v12);
        uint64_t v10 = [v8 countByEnumeratingWithState:&v17 objects:v21 count:16];
      }
      while (v10);
    }
  }
}

BOOL _UIPanelControllerSizeClassIsEffectivelyCompact(uint64_t a1)
{
  return a1 == 1;
}

void sub_185E24634(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

double _transitionInsetsForViewController(void *a1, void *a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  long long v4 = [a1 view];
  long long v5 = [v3 mainViewController];
  int v6 = [v5 _isNavigationController];

  if (v6)
  {
    id v7 = [v3 mainViewController];
    uint64_t v8 = [v3 collapsedState];
    uint64_t v9 = [v3 leadingViewController];
    uint64_t v10 = [v9 view];
    uint64_t v11 = [v10 window];

    unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFFDLL;
    id v13 = v7;
    if (v12 == 1)
    {
      id v13 = v7;
      if (v11)
      {
        double v14 = [v3 leadingViewController];
        objc_opt_class();
        char isKindOfClass = objc_opt_isKindOfClass();

        if (isKindOfClass)
        {
          long long v39 = 0u;
          long long v40 = 0u;
          long long v37 = 0u;
          long long v38 = 0u;
          double v16 = objc_msgSend(v3, "leadingViewController", 0);
          long long v17 = [v16 navControllers];

          uint64_t v18 = [v17 countByEnumeratingWithState:&v37 objects:v41 count:16];
          id v13 = v7;
          if (v18)
          {
            uint64_t v19 = v18;
            uint64_t v20 = *(void *)v38;
            while (2)
            {
              for (uint64_t i = 0; i != v19; ++i)
              {
                if (*(void *)v38 != v20) {
                  objc_enumerationMutation(v17);
                }
                uint64_t v22 = *(void **)(*((void *)&v37 + 1) + 8 * i);
                CGFloat v23 = [v22 view];
                CGFloat v24 = [v23 window];

                if (v24)
                {
                  id v13 = v22;

                  goto LABEL_18;
                }
              }
              uint64_t v19 = [v17 countByEnumeratingWithState:&v37 objects:v41 count:16];
              if (v19) {
                continue;
              }
              break;
            }
            id v13 = v7;
          }
LABEL_18:
        }
        else
        {
          CGFloat v26 = [v3 leadingViewController];
          objc_opt_class();
          char v27 = objc_opt_isKindOfClass();

          id v13 = v7;
          if (v27)
          {
            id v13 = [v3 leadingViewController];
          }
        }
      }
    }
    if ([v13 _isNavigationController])
    {
      id v28 = v13;
      CGImageRef v29 = [v28 topViewController];
      uint64_t v30 = [v29 view];

      double MaxY = 0.0;
      if (([v28 isNavigationBarHidden] & 1) == 0)
      {
        double v31 = [v28 existingPaletteForEdge:2];
        double v32 = v31;
        if (v31 && [v31 isAttached])
        {
          [v32 frame];
          double MaxY = CGRectGetMaxY(v43);
        }
        else
        {
          CGRect v33 = [v28 _navigationBarForNestedNavigationController];
          [v33 frame];
          double MaxY = CGRectGetMaxY(v44);
        }
      }
      if (([v28 isToolbarHidden] & 1) == 0)
      {
        double v34 = [v28 view];
        [v34 bounds];
        CGRectGetHeight(v45);
        double v35 = [v28 toolbar];
        [v35 frame];
        CGRectGetMinY(v46);
      }
    }
    else
    {
      uint64_t v30 = [v13 view];
      id v28 = v4;
      double MaxY = 0.0;
    }

    long long v4 = (void *)v30;
  }
  else
  {
    double MaxY = 0.0;
  }
  [v4 layoutMargins];
  [v4 layoutMargins];

  return MaxY;
}

id _resizeMeshTransform(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5, double a6, double a7, double a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12, double a13, double a14, double a15, double a16)
{
  uint64_t v103 = *MEMORY[0x1E4F143B8];
  id v28 = +[UIDevice currentDevice];
  CGImageRef v29 = [v28 _deviceInfoForKey:@"ProductType"];
  char v30 = [v29 isEqualToString:@"iPhone7,1"];

  if (v30)
  {
    double v31 = 0;
  }
  else
  {
    v105.origin.CGFloat x = a1;
    v105.origin.CGFloat y = a2;
    v105.size.CGFloat width = a3;
    v105.size.CGFloat height = a4;
    IsEmptCGFloat y = CGRectIsEmpty(v105);
    double v33 = 0.0;
    double v34 = 0.0;
    double v35 = 0.0;
    double v36 = 0.0;
    double v37 = 0.0;
    if (!IsEmpty)
    {
      v106.origin.CGFloat x = a1;
      v106.origin.CGFloat y = a2;
      v106.size.CGFloat width = a3;
      v106.size.CGFloat height = a4;
      BOOL IsNull = CGRectIsNull(v106);
      double v35 = 0.0;
      double v36 = 0.0;
      double v37 = 0.0;
      if (!IsNull)
      {
        v107.origin.CGFloat x = a1;
        v107.origin.CGFloat y = a2;
        v107.size.CGFloat width = a3;
        v107.size.CGFloat height = a4;
        double v34 = a5 / CGRectGetHeight(v107);
        v108.origin.CGFloat x = a1;
        v108.origin.CGFloat y = a2;
        v108.size.CGFloat width = a3;
        v108.size.CGFloat height = a4;
        double v56 = a6 / CGRectGetWidth(v108);
        v109.origin.CGFloat x = a1;
        v109.origin.CGFloat y = a2;
        v109.size.CGFloat width = a3;
        v109.size.CGFloat height = a4;
        double v53 = a7 / CGRectGetHeight(v109);
        v110.origin.CGFloat x = a1;
        v110.origin.CGFloat y = a2;
        v110.size.CGFloat width = a3;
        v110.size.CGFloat height = a4;
        double v37 = a8 / CGRectGetWidth(v110);
        double v36 = v53;
        double v35 = v56;
      }
    }
    double v51 = v37;
    double v54 = v36;
    double v57 = v35;
    v111.origin.CGFloat x = a9;
    v111.origin.CGFloat y = a10;
    v111.size.CGFloat width = a11;
    v111.size.CGFloat height = a12;
    if (CGRectIsEmpty(v111))
    {
      double v39 = 0.0;
      double v40 = 0.0;
      double v41 = 0.0;
    }
    else
    {
      v112.origin.CGFloat x = a9;
      v112.origin.CGFloat y = a10;
      v112.size.CGFloat width = a11;
      v112.size.CGFloat height = a12;
      BOOL v42 = CGRectIsNull(v112);
      double v39 = 0.0;
      double v40 = 0.0;
      double v41 = 0.0;
      if (!v42)
      {
        v113.origin.CGFloat x = a9;
        v113.origin.CGFloat y = a10;
        v113.size.CGFloat width = a11;
        v113.size.CGFloat height = a12;
        double v33 = a13 / CGRectGetHeight(v113);
        v114.origin.CGFloat x = a9;
        v114.origin.CGFloat y = a10;
        v114.size.CGFloat width = a11;
        v114.size.CGFloat height = a12;
        double v39 = a14 / CGRectGetWidth(v114);
        v115.origin.CGFloat x = a9;
        v115.origin.CGFloat y = a10;
        v115.size.CGFloat width = a11;
        v115.size.CGFloat height = a12;
        double v40 = a15 / CGRectGetHeight(v115);
        v116.origin.CGFloat x = a9;
        v116.origin.CGFloat y = a10;
        v116.size.CGFloat width = a11;
        v116.size.CGFloat height = a12;
        double v41 = a16 / CGRectGetWidth(v116);
      }
    }
    memset(v59, 0, 32);
    v59[2] = xmmword_186B943D0;
    void v59[3] = xmmword_186B89740;
    v59[4] = xmmword_186B943E0;
    uint64_t v60 = 0;
    double v61 = v34;
    uint64_t v62 = 0;
    double v63 = v33;
    long long v64 = xmmword_186B943D0;
    double v65 = v34;
    uint64_t v66 = 0x3FF0000000000000;
    double v67 = v33;
    uint64_t v68 = 0x3FE0000000000000;
    double v69 = v57;
    double v70 = v34;
    double v71 = v39;
    double v72 = v33;
    uint64_t v73 = 0x3FE0000000000000;
    double v74 = 1.0 - v51;
    double v75 = v34;
    double v76 = 1.0 - v41;
    double v77 = v33;
    uint64_t v78 = 0x3FE0000000000000;
    double v79 = v57;
    double v80 = 1.0 - v54;
    double v81 = v39;
    double v82 = 1.0 - v40;
    uint64_t v83 = 0x3FE0000000000000;
    double v84 = 1.0 - v51;
    double v85 = 1.0 - v54;
    double v86 = 1.0 - v41;
    double v87 = 1.0 - v40;
    uint64_t v88 = 0x3FE0000000000000;
    uint64_t v89 = 0;
    double v90 = 1.0 - v54;
    uint64_t v91 = 0;
    double v92 = 1.0 - v40;
    long long v93 = xmmword_186B943D0;
    double v94 = 1.0 - v54;
    uint64_t v95 = 0x3FF0000000000000;
    double v96 = 1.0 - v40;
    uint64_t v97 = 0x3FE0000000000000;
    long long v98 = xmmword_186B89740;
    long long v99 = xmmword_186B89740;
    __asm { FMOV            V0.2D, #1.0 }
    long long v100 = xmmword_186B943D0;
    long long v101 = _Q0;
    long long v102 = xmmword_186B86ED0;
    v58[10] = xmmword_186B94490;
    v58[11] = unk_186B944A0;
    v58[12] = xmmword_186B944B0;
    v58[13] = unk_186B944C0;
    v58[6] = xmmword_186B94450;
    v58[7] = unk_186B94460;
    v58[8] = xmmword_186B94470;
    v58[9] = unk_186B94480;
    v58[2] = xmmword_186B94410;
    v58[3] = unk_186B94420;
    v58[4] = xmmword_186B94430;
    v58[5] = unk_186B94440;
    v58[0] = xmmword_186B943F0;
    v58[1] = unk_186B94400;
    double v31 = objc_msgSend(MEMORY[0x1E4F39C30], "meshTransformWithVertexCount:vertices:faceCount:faces:depthNormalization:", 12, v59, 7, v58, *MEMORY[0x1E4F39ED8], *(void *)&a15);
    [v31 setSubdivisionSteps:0];
  }
  return v31;
}

uint64_t affectedSidesFromState(void *a1)
{
  id v1 = a1;
  [v1 leadingWidth];
  uint64_t v3 = v2 > 0.0;
  [v1 trailingWidth];
  if (v4 > 0.0) {
    v3 |= 2uLL;
  }
  if (v3)
  {
    [v1 supplementaryWidth];
    if (v5 > 0.0) {
      v3 |= 4uLL;
    }
  }

  return v3;
}

double totalObscuredPrimaryWidthForState(void *a1)
{
  id v1 = a1;
  [v1 leadingDragOffset];
  double v3 = v2;
  [v1 trailingDragOffset];
  double v5 = v3 + v4;
  [v1 supplementaryDragOffset];
  double v7 = v6;

  return v5 + v7;
}

void sub_185E26F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location, id *a12)
{
  objc_destroyWeak(location);
  objc_destroyWeak(a12);
  objc_destroyWeak(v12);
  objc_destroyWeak((id *)(v13 - 152));
  objc_destroyWeak((id *)(v13 - 144));
  _Unwind_Resume(a1);
}

void sub_185E270D8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_185E279D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id *location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak((id *)(v16 - 128));
  _Unwind_Resume(a1);
}

id findTransitioningChildNavigationController(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if ([v1 _isNavigationController])
  {
    id v2 = v1;
    if ([v2 _isTransitioning]) {
      goto LABEL_16;
    }
  }
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  double v3 = objc_msgSend(v1, "childViewControllers", 0);
  uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v12;
LABEL_6:
    uint64_t v7 = 0;
    while (1)
    {
      if (*(void *)v12 != v6) {
        objc_enumerationMutation(v3);
      }
      uint64_t v8 = findTransitioningChildNavigationController(*(void *)(*((void *)&v11 + 1) + 8 * v7));
      if (v8) {
        break;
      }
      if (v5 == ++v7)
      {
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
        if (v5) {
          goto LABEL_6;
        }
        goto LABEL_12;
      }
    }
  }
  else
  {
LABEL_12:

    uint64_t v9 = [v1 presentedViewController];
    double v3 = (void *)v9;
    if (!v9)
    {
      id v2 = 0;
      goto LABEL_15;
    }
    uint64_t v8 = findTransitioningChildNavigationController(v9);
  }
  id v2 = (id)v8;
LABEL_15:

LABEL_16:
  return v2;
}

id _UIUpdateInputScopeDebugDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (!a2) {
    uint64_t v2 = mach_absolute_time();
  }
  uint64_t v4 = [MEMORY[0x1E4F28E78] stringWithFormat:@"Input Scope, groupChanged=%u (scope=%llu, group=%llu), sets:", *(void *)a1 != *(void *)(*(void *)(a1 + 8) + 16), *(void *)a1, *(void *)(*(void *)(a1 + 8) + 16)];
  int v5 = *(_DWORD *)(a1 + 56);
  if (v5)
  {
    unsigned int v6 = v5 - 1;
    do
    {
      uint64_t v7 = v6;
      uint64_t v8 = _UIUpdateInputSetDebugDescription(*(void *)(a1 + 8 * v6 + 64), v2);
      uint64_t v9 = _UIUpdateDebugDescriptionIndented(v8, @"\n  - ", @"    ");
      [v4 appendString:v9];

      --v6;
    }
    while (v7);
  }
  uint64_t v10 = _UIUpdateInputAggregateCacheDebugDescription((unsigned int *)(a1 + 16), v2);
  long long v11 = _UIUpdateDebugDescriptionIndented(v10, @"\n  ", @"  ");
  [v4 appendString:v11];

  return v4;
}

id _StringFromCollapsedState(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v4[0] = xmmword_1E52E9A20;
  v4[1] = *(_OWORD *)off_1E52E9A30;
  id v1 = *((id *)v4 + a1);
  for (uint64_t i = 24; i != -8; i -= 8)

  return v1;
}

void sub_185E2BB20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_185E2F91C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18)
{
}

void sub_185E32A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id *location)
{
  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v13 - 144));
  _Unwind_Resume(a1);
}

void sub_185E33BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E3A850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL _UISplitViewControllerInSplashboard()
{
  return UIApp == 0;
}

__CFString *_UISplitViewControllerDisplayModeDescription(unint64_t a1)
{
  if (a1 >= 7)
  {
    objc_msgSend(NSString, "stringWithFormat:", @"%lu (not defined as an enum value)", a1);
    id v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v1 = off_1E52E9D48[a1];
  }
  return v1;
}

__CFString *_UISplitViewControllerStyleDescription(unint64_t a1)
{
  if (a1 >= 3)
  {
    objc_msgSend(NSString, "stringWithFormat:", @"%lu (not defined as an enum value)", a1);
    id v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v1 = off_1E52E9D80[a1];
  }
  return v1;
}

__CFString *_UISplitViewControllerSplitBehaviorDescription(unint64_t a1)
{
  if (a1 >= 4)
  {
    objc_msgSend(NSString, "stringWithFormat:", @"%lu (not defined as an enum value)", a1);
    id v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v1 = off_1E52E9D98[a1];
  }
  return v1;
}

__CFString *_UISplitViewControllerColumnDescription(unint64_t a1)
{
  if (a1 >= 4)
  {
    objc_msgSend(NSString, "stringWithFormat:", @"%lu (not defined as an enum value)", a1);
    id v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v1 = off_1E52E9DB8[a1];
  }
  return v1;
}

uint64_t _UISplitViewControllerColumnIsVisibleForDisplayMode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1)
  {
    uint64_t v10 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v11 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL _UISplitViewControllerColumnIsVisibleForDisplayMode(UISplitViewControllerStyle, UISplitViewControllerColumn, UISplitViewControllerDisplayMode)");
    [v10 handleFailureInFunction:v11 file:@"UISplitViewControllerPanelImpl.m" lineNumber:399 description:@"Unexpected request for information from an unspecified-style UISplitViewController"];
  }
  BOOL v6 = a1 == 1;
  if (a2 == 1) {
    BOOL v6 = a1 == 2;
  }
  unsigned int v7 = (unint64_t)(a3 - 2) <= 1 && v6;
  if ((unint64_t)(a3 - 4) >= 3) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = 1;
  }
  if (a2 == 3) {
    unsigned int v8 = 0;
  }
  if (a2 == 2) {
    return 1;
  }
  else {
    return v8;
  }
}

double minNonzeroPrimaryWidthInStates(void *a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v15;
    double v7 = 0.0;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v15 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v9 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        if (a2) {
          [v9 leadingWidth];
        }
        else {
          [v9 trailingWidth];
        }
        if ((v10 < v7 || v7 == 0.0) && v10 > 0.0) {
          double v7 = v10;
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v5);
  }
  else
  {
    double v7 = 0.0;
  }

  return v7;
}

double minNonzeroSupplementaryWidthInStateWithPrimaryWidthGetMatchingState(void *a1, int a2, void *a3, double a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (!v8)
  {
    id v10 = 0;
    double v12 = 0.0;
    if (!a3) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  uint64_t v9 = v8;
  id v10 = 0;
  uint64_t v11 = *(void *)v21;
  double v12 = 0.0;
  do
  {
    for (uint64_t i = 0; i != v9; ++i)
    {
      if (*(void *)v21 != v11) {
        objc_enumerationMutation(v7);
      }
      long long v14 = *(void **)(*((void *)&v20 + 1) + 8 * i);
      if (a2) {
        [v14 leadingWidth];
      }
      else {
        [v14 trailingWidth];
      }
      if (v15 == a4)
      {
        [v14 supplementaryWidth];
        double v17 = v16;
        if (v16 > 0.0 && (v12 == 0.0 || v16 < v12))
        {
          id v18 = v14;

          double v12 = v17;
          id v10 = v18;
        }
        else if (!v10 && v16 == 0.0 && v12 == 0.0)
        {
          id v10 = v14;
        }
      }
    }
    uint64_t v9 = [v7 countByEnumeratingWithState:&v20 objects:v24 count:16];
  }
  while (v9);
  if (a3) {
LABEL_21:
  }
    *a3 = v10;
LABEL_22:

  return v12;
}

uint64_t _UISplitViewControllerColumnIsHiddenOrDimmedForDisplayMode(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (!a1)
  {
    uint64_t v9 = [MEMORY[0x1E4F28B00] currentHandler];
    id v10 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL _UISplitViewControllerColumnIsHiddenOrDimmedForDisplayMode(UISplitViewControllerStyle, UISplitViewControllerColumn, UISplitViewControllerDisplayMode)");
    [v9 handleFailureInFunction:v10 file:@"UISplitViewControllerPanelImpl.m" lineNumber:433 description:@"Unexpected request for information from an unspecified-style UISplitViewController"];
  }
  int IsVisibleForDisplayMode = _UISplitViewControllerColumnIsVisibleForDisplayMode(a1, a2, a3);
  unsigned int v7 = (0x68u >> a3) & 1;
  if (a3 > 6) {
    unsigned int v7 = 0;
  }
  if (!IsVisibleForDisplayMode) {
    unsigned int v7 = 1;
  }
  if (a2 == 2) {
    return v7;
  }
  else {
    return IsVisibleForDisplayMode ^ 1u;
  }
}

uint64_t _UISplitViewControllerAutoRevealsFullSidebar(void *a1)
{
  if (_UISplitViewControllerAutoHidesColumns(a1) && qword_1EB260160 != -1) {
    dispatch_once(&qword_1EB260160, &__block_literal_global_1395_0);
  }
  return byte_1EB26008A;
}

uint64_t _nextVisibleColumnForResponderAfterColumn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 == 1) {
    goto LABEL_11;
  }
  if (a1 != 2) {
    return 999;
  }
  uint64_t v5 = 1;
  if ((_UISplitViewControllerColumnIsVisibleForDisplayMode(a2, 1, a3) & 1) == 0)
  {
LABEL_11:
    if (_UISplitViewControllerColumnIsVisibleForDisplayMode(a2, 0, a3)) {
      return 0;
    }
    else {
      return 999;
    }
  }
  return v5;
}

void sub_185E47DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E535D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

__CFString *_NSStringFromUIViewControllerAppearState(unsigned int a1)
{
  if (a1 > 3) {
    return &stru_1ED0E84C0;
  }
  else {
    return off_1E52EA388[a1];
  }
}

uint64_t _UIViewControllerSetForceDetachedInheritsContentOverlayInsetsFromSuperview(uint64_t result)
{
  byte_1EB25BB21 = result;
  return result;
}

uint64_t _UIViewControllerSupportsInteractionActivityTracking()
{
  LODWORD(result) = _UIInternalPreferenceUsesDefault(&_UIInternalPreference_EnableViewControllerInteractionActivityTracking, @"EnableViewControllerInteractionActivityTracking", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
  if (byte_1EB2570C4) {
    return 1;
  }
  else {
    return result;
  }
}

id UIViewControllerMissingInitialTraitCollection(void *a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  _UIIsPrivateMainBundle();
  if (dyld_program_sdk_at_least())
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = objc_msgSend(NSString, "stringWithUTF8String:", "UITraitCollection *UIViewControllerMissingInitialTraitCollection(UIViewController *__strong, UIApplicationSystemVersion)");
    [v2 handleFailureInFunction:v3, @"UIViewController.m", 2811, @"UIViewController is missing its initial trait collection populated during initialization. This is a serious bug, likely caused by accessing properties or methods on the view controller before calling a UIViewController initializer. View controller: %@", v1 file lineNumber description];

LABEL_3:
    goto LABEL_7;
  }
  if (os_variant_has_internal_diagnostics())
  {
    uint64_t v2 = __UIFaultDebugAssertLog();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v9 = v1;
      _os_log_fault_impl(&dword_1853B0000, v2, OS_LOG_TYPE_FAULT, "UIViewController is missing its initial trait collection populated during initialization. This is a serious bug, likely caused by accessing properties or methods on the view controller before calling a UIViewController initializer. View controller: %@ Set a symbolic breakpoint on UIViewControllerMissingInitialTraitCollection and check the backtrace to see what's causing this. This will become an assert in a future version.", buf, 0xCu);
    }
    goto LABEL_3;
  }
  uint64_t v4 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &UIViewControllerMissingInitialTraitCollection___s_category)+ 8);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    id v9 = v1;
    _os_log_impl(&dword_1853B0000, v4, OS_LOG_TYPE_ERROR, "UIViewController is missing its initial trait collection populated during initialization. This is a serious bug, likely caused by accessing properties or methods on the view controller before calling a UIViewController initializer. View controller: %@ Set a symbolic breakpoint on UIViewControllerMissingInitialTraitCollection and check the backtrace to see what's causing this. This will become an assert in a future version.", buf, 0xCu);
  }
LABEL_7:
  uint64_t v5 = +[UIScreen mainScreen];
  uint64_t v6 = [v5 traitCollection];

  return v6;
}

id recursiveDescription(void *a1, char a2)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  _OWORD v4[2] = __recursiveDescription_block_invoke_2;
  v4[3] = &__block_descriptor_33_e43___NSString_28__0__UIViewController_8i16__20l;
  char v5 = a2;
  uint64_t v2 = _UIRecursiveDescription(a1, (uint64_t)&__block_literal_global_2598, (uint64_t)v4);
  return v2;
}

void sub_185E5C008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__CFString *_UIInterfaceOrientationDebugDescription(unint64_t a1)
{
  if (a1 >= 5)
  {
    objc_msgSend(NSString, "stringWithFormat:", @"(%li)", a1);
    id v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v1 = off_1E52EA3A8[a1];
  }
  return v1;
}

__CFString *_UIInterfaceOrientationMaskDebugDescription(unint64_t a1)
{
  if (a1)
  {
    unint64_t v1 = a1;
    uint64_t v2 = [MEMORY[0x1E4F1CA48] array];
    id v3 = v2;
    if ((v1 & 2) != 0)
    {
      [v2 addObject:@"portrait"];
      v1 &= ~2uLL;
      if ((v1 & 0x10) == 0)
      {
LABEL_4:
        if ((v1 & 8) == 0) {
          goto LABEL_5;
        }
        goto LABEL_15;
      }
    }
    else if ((v1 & 0x10) == 0)
    {
      goto LABEL_4;
    }
    [v3 addObject:@"landscapeLeft"];
    v1 &= ~0x10uLL;
    if ((v1 & 8) == 0)
    {
LABEL_5:
      if ((v1 & 4) == 0) {
        goto LABEL_6;
      }
      goto LABEL_16;
    }
LABEL_15:
    [v3 addObject:@"landscapeRight"];
    v1 &= ~8uLL;
    if ((v1 & 4) == 0)
    {
LABEL_6:
      if (!v1)
      {
LABEL_8:
        char v5 = [v3 componentsJoinedByString:@", "];

        goto LABEL_10;
      }
LABEL_7:
      uint64_t v4 = _UIInterfaceOrientationDebugDescription(v1);
      [v3 addObject:v4];

      goto LABEL_8;
    }
LABEL_16:
    [v3 addObject:@"portraitUpsideDown"];
    v1 &= ~4uLL;
    if (!v1) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  char v5 = @"none";
LABEL_10:
  return v5;
}

uint64_t _UIViewControllerIsBeingPresentedOrDismissesFullscreen(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 presentedViewController];
  int v3 = [v2 isBeingDismissed];

  if (v3)
  {
    uint64_t v4 = [v1 presentedViewController];
    uint64_t v5 = [v4 modalPresentationStyle] == 0;
  }
  else if (([v1 isBeingPresented] & 1) != 0 {
         || ([v1 presentingViewController],
  }
             uint64_t v5 = objc_claimAutoreleasedReturnValue(),
             (id)v5,
             v5))
  {
    uint64_t v5 = [v1 modalPresentationStyle] == 0;
  }

  return v5;
}

id _viewControllersWhoseOrientationsMustCoincide(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = [v3 presentingViewController];
  uint64_t v6 = [v5 _presentationController];
  uint64_t v7 = [v3 modalPresentationStyle];
  if ([v6 state] == 1)
  {
    BOOL v8 = 1;
    if (v5)
    {
LABEL_3:
      if (v7 == 17
        || v7 == 5
        || !v7
        && (([v5 _existingView],
             id v9 = objc_claimAutoreleasedReturnValue(),
             [v9 window],
             (uint64_t v10 = objc_claimAutoreleasedReturnValue()) == 0)
          ? (char v11 = 1)
          : (char v11 = v8),
            v10,
            v9,
            (v11 & 1) == 0))
      {
        [v4 addObject:v5];
      }
      _viewControllersWhoseOrientationsMustCoincide(v5, v4);
      id v12 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_24;
    }
  }
  else
  {
    BOOL v8 = [v6 state] == 2;
    if (v5) {
      goto LABEL_3;
    }
  }
  uint64_t v13 = [v3 _existingView];
  long long v14 = [v13 window];
  if (v14)
  {
    if (v7) {
      BOOL v15 = 0;
    }
    else {
      BOOL v15 = v8;
    }

    if (!v15) {
      [v4 addObject:v3];
    }
  }
  else
  {
  }
  if ((unint64_t)[v4 count] <= 1) {
    double v16 = 0;
  }
  else {
    double v16 = v4;
  }
  id v12 = v16;
LABEL_24:
  double v17 = v12;

  return v17;
}

void sub_185E64114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

float adjustOffsetAndDimension(float *a1, float *a2, int a3, float result, float a5)
{
  if (a3)
  {
    float v5 = a5 - result;
    if ((float)(a5 - result) != 0.0)
    {
      float v6 = *a1;
      float v7 = *a2;
      switch(a3)
      {
        case 1:
          float v6 = (float)(v5 * 0.5) + v6;
          break;
        case 2:
          goto LABEL_7;
        case 3:
          if (v6 == 0.0)
          {
LABEL_7:
            float v7 = v5 + v7;
          }
          else
          {
            float v6 = (float)(v5 * 0.5) + v6;
            float v7 = (float)(v5 * 0.5) + v7;
          }
          break;
        case 4:
          float v6 = v6 + (float)(v5 * -0.5);
          break;
        case 6:
          if (v7 == 0.0 && v6 == result) {
            float v7 = v5 + v7;
          }
          else {
            float v7 = (float)(v5 * 0.5) + v7;
          }
          float v6 = v6 - (float)(v5 * 0.5);
          break;
        case 7:
          if (result == 0.0)
          {
            float v7 = v7 + a5;
          }
          else
          {
            float v9 = a5 / result;
            float v6 = v9 * v6;
            float v7 = v9 * v7;
          }
          break;
        default:
          break;
      }
      *a1 = roundf(v6);
      uint64_t result = roundf(v7);
      *a2 = result;
    }
  }
  return result;
}

void sub_185E672E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_185E67704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

id __recursiveDescription_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = [v2 childModalViewController];
  id v4 = [v2 childViewControllers];
  if (v3)
  {
    float v5 = [v2 childModalViewController];
    uint64_t v6 = [v4 arrayByAddingObject:v5];

    id v4 = (void *)v6;
  }

  return v4;
}

id __recursiveDescription_block_invoke_2(uint64_t a1, void *a2, unsigned int a3, void *a4)
{
  float v7 = a2;
  BOOL v8 = -[UIViewController _parentViewController](v7);
  if (v8)
  {

LABEL_4:
    uint64_t v9 = -[UIViewController _descriptionForPrintingHierarchyIncludingInsets:]((float64x2_t *)v7, *(unsigned __int8 *)(a1 + 32));
    goto LABEL_5;
  }
  if ([v7 _isRootViewController]) {
    goto LABEL_4;
  }
  char v11 = objc_opt_new();
  if (a3 >= 2)
  {
    uint64_t v12 = (int)a3 - 1;
    do
    {
      [v11 appendString:@"   | "];
      --v12;
    }
    while (v12);
  }
  [v11 appendString:@"   + "];
  id v13 = v11;
  *a4 = v13;
  long long v14 = (void *)MEMORY[0x1E4F28E78];
  BOOL v15 = -[UIViewController _descriptionForPrintingHierarchyIncludingInsets:]((float64x2_t *)v7, *(unsigned __int8 *)(a1 + 32));
  double v16 = [v7 presentingViewController];
  double v17 = [v16 _presentationController];
  id v18 = [v17 _descriptionForPrintingViewControllerHierarchy];
  uint64_t v9 = [v14 stringWithFormat:@"%@, presented with: %@", v15, v18];

LABEL_5:
  return v9;
}

void sub_185E6E720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185E71CB0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)&STACK[0x340]);
  _Block_object_dispose(&STACK[0x370], 8);
  _Unwind_Resume(a1);
}

void sub_185E76A9C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_185E77088(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

UIVisualEffectView *_UIContextMenuConfigureSeparatorView(void *a1)
{
  id v1 = a1;
  id v2 = +[UIDevice currentDevice];
  id v3 = _UIContextMenuGetPlatformMetrics([v2 userInterfaceIdiom]);

  id v4 = [UIVisualEffectView alloc];
  float v5 = [v3 itemSeparatorBackgroundEffect];
  uint64_t v6 = [(UIVisualEffectView *)v4 initWithEffect:v5];

  float v7 = [v3 itemSeparatorColor];
  BOOL v8 = [(UIVisualEffectView *)v6 contentView];
  [v8 setBackgroundColor:v7];

  uint64_t v9 = [(UIVisualEffectView *)v6 contentView];
  uint64_t v10 = [v9 layer];
  [v10 setAllowsEdgeAntialiasing:1];

  char v11 = [(UIVisualEffectView *)v6 contentView];
  [v11 setClipsToBounds:0];

  [v1 bounds];
  -[UIView setFrame:](v6, "setFrame:");
  [(UIView *)v6 setAutoresizingMask:18];
  [v1 addSubview:v6];

  return v6;
}

void sub_185E7EF34(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x348], 8);
  _Block_object_dispose(&STACK[0x368], 8);
  _Block_object_dispose(&STACK[0x388], 8);
  _Block_object_dispose(&STACK[0x3A8], 8);
  _Block_object_dispose(&STACK[0x3C8], 8);
  _Block_object_dispose(&STACK[0x408], 8);
  _Block_object_dispose(&STACK[0x448], 8);
  _Block_object_dispose(&STACK[0x468], 8);
  _Block_object_dispose(&STACK[0x4A8], 8);
  _Block_object_dispose(&STACK[0x4E8], 8);
  _Block_object_dispose(&STACK[0x528], 8);
  _Block_object_dispose(&STACK[0x568], 8);
  _Block_object_dispose(&STACK[0x5A8], 8);
  _Block_object_dispose((const void *)(v1 - 200), 8);
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_185E834A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

CGAffineTransform *_randomPlatterTransform(uint64_t a1, int a2, int a3, uint64_t a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, double a9, double a10, double a11, double a12)
{
  *(double *)&v42[16] = a11;
  *(double *)&v42[24] = a12;
  *(double *)BOOL v42 = a9;
  *(double *)&v42[8] = a10;
  uint64_t v19 = MEMORY[0x1E4F1DAB8];
  long long v20 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
  *(_OWORD *)a1 = *MEMORY[0x1E4F1DAB8];
  *(_OWORD *)(a1 + 16) = v20;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v19 + 32);
  if (a2)
  {
    uint32_t v21 = arc4random();
    CGFloat v22 = (double)v21 / 4294967300.0 * 8.0 - (1.0 - (double)v21 / 4294967300.0) * 8.0;
    uint32_t v23 = arc4random();
    CGAffineTransformMakeTranslation((CGAffineTransform *)a1, v22, (double)v23 / 4294967300.0 * 8.0 - (1.0 - (double)v23 / 4294967300.0) * 8.0);
  }
  v45.origin.CGFloat x = a5;
  v45.origin.CGFloat y = a6;
  v45.size.CGFloat width = a7;
  v45.size.CGFloat height = a8;
  CGFloat Width = CGRectGetWidth(v45);
  double v25 = fmin(asin(30.0 / Width * 0.5), 0.104719755);
  uint32_t v26 = arc4random();
  long long v27 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v43.a = *(_OWORD *)a1;
  *(_OWORD *)&v43.c = v27;
  *(_OWORD *)&v43.tCGFloat x = *(_OWORD *)(a1 + 32);
  uint64_t result = CGAffineTransformRotate(&v44, &v43, v25 * ((double)v26 / 4294967300.0) - v25 * (1.0 - (double)v26 / 4294967300.0));
  long long v29 = *(_OWORD *)&v44.c;
  *(_OWORD *)a1 = *(_OWORD *)&v44.a;
  *(_OWORD *)(a1 + 16) = v29;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)&v44.tx;
  if (a3)
  {
    char v30 = _UIContextMenuGetPlatformMetrics(a4);
    [v30 maxLiftScale];
    double v32 = v31;
    [v30 maxLiftScaleUpPoints];
    double v34 = v33;
    v46.origin.CGFloat x = a5;
    v46.origin.CGFloat y = a6;
    v46.size.CGFloat width = a7;
    v46.size.CGFloat height = a8;
    double v35 = CGRectGetWidth(v46);
    v47.origin.CGFloat x = a5;
    v47.origin.CGFloat y = a6;
    v47.size.CGFloat width = a7;
    v47.size.CGFloat height = a8;
    double Height = CGRectGetHeight(v47);
    if (v35 >= Height) {
      double v37 = v35;
    }
    else {
      double v37 = Height;
    }
    double v38 = CGRectGetWidth(*(CGRect *)v42) / v35;
    if (v38 >= v32) {
      double v38 = v32;
    }
    if ((v34 + v37) / v37 >= v38) {
      double v39 = v38;
    }
    else {
      double v39 = (v34 + v37) / v37;
    }

    long long v40 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)&v43.a = *(_OWORD *)a1;
    *(_OWORD *)&v43.c = v40;
    *(_OWORD *)&v43.tCGFloat x = *(_OWORD *)(a1 + 32);
    uint64_t result = CGAffineTransformScale(&v44, &v43, v39, v39);
    long long v41 = *(_OWORD *)&v44.c;
    *(_OWORD *)a1 = *(_OWORD *)&v44.a;
    *(_OWORD *)(a1 + 16) = v41;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)&v44.tx;
  }
  return result;
}

uint64_t _UILayerAncestorsHaveAllBeenCommitted(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    if ([v1 hasBeenCommitted])
    {
      id v3 = [v2 superlayer];
      uint64_t HaveAllBeenCommitted = _UILayerAncestorsHaveAllBeenCommitted();
    }
    else
    {
      uint64_t HaveAllBeenCommitted = 0;
    }
  }
  else
  {
    uint64_t HaveAllBeenCommitted = 1;
  }

  return HaveAllBeenCommitted;
}

double _UIControlMostlyInsideEdgeInsets()
{
  if (_MergedGlobals_17_0 == 1) {
    return *(double *)&qword_1EB25D040;
  }
  id v1 = +[UIDevice currentDevice];
  uint64_t v2 = [v1 userInterfaceIdiom];

  if ((v2 & 0xFFFFFFFFFFFFFFFBLL) == 1) {
    double v3 = 25.0;
  }
  else {
    double v3 = 70.0;
  }
  double v0 = -v3;
  id v4 = +[UIDevice currentDevice];
  uint64_t v5 = [v4 userInterfaceIdiom];

  if ((v5 & 0xFFFFFFFFFFFFFFFBLL) == 1) {
    double v6 = 25.0;
  }
  else {
    double v6 = 70.0;
  }
  double v7 = -v6;
  BOOL v8 = +[UIDevice currentDevice];
  uint64_t v9 = [v8 userInterfaceIdiom];

  if ((v9 & 0xFFFFFFFFFFFFFFFBLL) == 1) {
    double v10 = 25.0;
  }
  else {
    double v10 = 70.0;
  }
  double v11 = -v10;
  uint64_t v12 = +[UIDevice currentDevice];
  uint64_t v13 = [v12 userInterfaceIdiom];

  if ((v13 & 0xFFFFFFFFFFFFFFFBLL) == 1) {
    double v14 = 25.0;
  }
  else {
    double v14 = 70.0;
  }
  qword_1EB25D040 = *(void *)&v0;
  unk_1EB25D048 = *(void *)&v7;
  qword_1EB25D050 = *(void *)&v11;
  unk_1EB25D058 = -v14;
  _MergedGlobals_17_0 = 1;
  return v0;
}

id _GetScrubberThumbImage()
{
  double v0 = (void *)_GetScrubberThumbImage___image;
  if (!_GetScrubberThumbImage___image)
  {
    uint64_t v1 = _UIImageWithName(@"UIMovieScrubberThumb.png");
    uint64_t v2 = (void *)_GetScrubberThumbImage___image;
    _GetScrubberThumbImage___image = v1;

    double v0 = (void *)_GetScrubberThumbImage___image;
  }
  return v0;
}

uint64_t IsInNavigationBar(void *a1)
{
  uint64_t v1 = [a1 superview];
  if (v1)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v2 = 1;
    }
    else {
      uint64_t v2 = IsInNavigationBar(v1);
    }
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

void _RemoveAllAnimationsForView(void *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = [v1 layer];
  [v2 removeAllAnimations];

  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  double v3 = objc_msgSend(v1, "subviews", 0);
  uint64_t v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v9;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(v3);
        }
        _RemoveAllAnimationsForView(*(void *)(*((void *)&v8 + 1) + 8 * v7++));
      }
      while (v5 != v7);
      uint64_t v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v5);
  }
}

id __CopyProgressStringForSeconds(int a1, int a2, int a3)
{
  if (a1) {
    a3 = 1;
  }
  if (a1 >= 0) {
    unsigned int v5 = a1;
  }
  else {
    unsigned int v5 = -a1;
  }
  if (a3) {
    uint64_t v6 = &stru_1ED0E84C0;
  }
  else {
    uint64_t v6 = @"-";
  }
  if (a1 >= 0) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = @"-";
  }
  signed int v8 = 60 * (v5 / 0x3C);
  uint64_t v9 = v5 % 0x3C;
  uint64_t v10 = v8 / 60 % 0x3Cu;
  int v11 = v8 - 60 * v10;
  uint64_t v12 = (v11 / 3600);
  unsigned int v13 = v11 + 3599;
  id v14 = [NSString alloc];
  if (a2)
  {
    if (v13 >= 0x1C1F) {
      BOOL v15 = (void *)[v14 initWithFormat:@"%@%02d:%02d:%02d", v7, v12, v10, v9];
    }
    else {
      BOOL v15 = (void *)[v14 initWithFormat:@"%@%02d:%02d", v7, v10, v9, v17];
    }
  }
  else if (v13 >= 0x1C1F)
  {
    BOOL v15 = (void *)[v14 initWithFormat:@"%@%d:%02d:%02d", v7, v12, v10, v9];
  }
  else
  {
    BOOL v15 = (void *)[v14 initWithFormat:@"%@%d:%02d", v7, v10, v9, v17];
  }
  return v15;
}

id EnclosingNavigationBar(void *a1)
{
  id v1 = [a1 superview];
  if (v1)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v2 = v1;
    }
    else
    {
      EnclosingNavigationBar(v1);
      id v2 = (id)objc_claimAutoreleasedReturnValue();
    }
    double v3 = v2;
  }
  else
  {
    double v3 = 0;
  }

  return v3;
}

void sub_185E98080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _UIKBFeedbackLog()
{
  if (qword_1EB2601B0 != -1) {
    dispatch_once(&qword_1EB2601B0, &__block_literal_global_242);
  }
  double v0 = (void *)qword_1EB2601A8;
  return v0;
}

void getAVSystemController_EffectiveVolumeDidChangeNotification()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  double v0 = (void **)getAVSystemController_EffectiveVolumeDidChangeNotificationSymbolLoc_ptr;
  uint64_t v9 = getAVSystemController_EffectiveVolumeDidChangeNotificationSymbolLoc_ptr;
  if (!getAVSystemController_EffectiveVolumeDidChangeNotificationSymbolLoc_ptr)
  {
    id v1 = MediaExperienceLibrary();
    v7[3] = (uint64_t)dlsym(v1, "AVSystemController_EffectiveVolumeDidChangeNotification");
    getAVSystemController_EffectiveVolumeDidChangeNotificationSymbolLoc_ptr = v7[3];
    double v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    unsigned int v5 = [NSString stringWithUTF8String:"NSString *getAVSystemController_EffectiveVolumeDidChangeNotification(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UIKBFeedbackGenerator.m", 52, @"%s", dlerror());

    __break(1u);
  }
}

void sub_185E98B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getAVSystemController_ServerConnectionDiedNotification()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  double v0 = (void **)getAVSystemController_ServerConnectionDiedNotificationSymbolLoc_ptr;
  uint64_t v9 = getAVSystemController_ServerConnectionDiedNotificationSymbolLoc_ptr;
  if (!getAVSystemController_ServerConnectionDiedNotificationSymbolLoc_ptr)
  {
    id v1 = MediaExperienceLibrary();
    v7[3] = (uint64_t)dlsym(v1, "AVSystemController_ServerConnectionDiedNotification");
    getAVSystemController_ServerConnectionDiedNotificationSymbolLoc_ptr = v7[3];
    double v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    unsigned int v5 = [NSString stringWithUTF8String:"NSString *getAVSystemController_ServerConnectionDiedNotification(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UIKBFeedbackGenerator.m", 53, @"%s", dlerror());

    __break(1u);
  }
}

void sub_185E98CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E98EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void getCHHapticPatternLibraryKeyKeyboardOther()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  double v0 = (void **)getCHHapticPatternLibraryKeyKeyboardOtherSymbolLoc_ptr;
  uint64_t v9 = getCHHapticPatternLibraryKeyKeyboardOtherSymbolLoc_ptr;
  if (!getCHHapticPatternLibraryKeyKeyboardOtherSymbolLoc_ptr)
  {
    id v1 = CoreHapticsLibrary();
    v7[3] = (uint64_t)dlsym(v1, "CHHapticPatternLibraryKeyKeyboardOther");
    getCHHapticPatternLibraryKeyKeyboardOtherSymbolLoc_ptr = v7[3];
    double v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    unsigned int v5 = [NSString stringWithUTF8String:"CHHapticPatternLibraryKey getCHHapticPatternLibraryKeyKeyboardOther(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UIFeedbackCoreHapticsEngineUtilities.h", 89, @"%s", dlerror());

    __break(1u);
  }
}

void sub_185E992EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185E99950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id a19)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(location);
  objc_destroyWeak(&a19);
  _Unwind_Resume(a1);
}

void sub_185E9A9CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_185E9B7BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185E9C2E0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_185E9CB74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185E9CC58(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_185E9CD70(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_185E9D768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *MediaExperienceLibrary()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!MediaExperienceLibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    _OWORD v4[2] = (void *)3221225472;
    v4[3] = __MediaExperienceLibraryCore_block_invoke;
    void v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_1E52EAE98;
    uint64_t v6 = 0;
    MediaExperienceLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  double v0 = (void *)MediaExperienceLibraryCore_frameworkLibrary;
  if (!MediaExperienceLibraryCore_frameworkLibrary)
  {
    double v0 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *MediaExperienceLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"_UIKBFeedbackGenerator.m", 49, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __MediaExperienceLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  MediaExperienceLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

void *__getCHHapticPatternLibraryKeyKeyboardInputTextSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary();
  uint64_t result = dlsym(v2, "CHHapticPatternLibraryKeyKeyboardInputText");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB2601B8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __CoreHapticsLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  CoreHapticsLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

void *__getCHHapticPatternLibraryKeyKeyboardInputSeparatorSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary();
  uint64_t result = dlsym(v2, "CHHapticPatternLibraryKeyKeyboardInputSeparator");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB2601C0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCHHapticPatternLibraryKeyKeyboardDeletionSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary();
  uint64_t result = dlsym(v2, "CHHapticPatternLibraryKeyKeyboardDeletion");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB2601C8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCHHapticPatternLibraryKeyKeyboardDeletionRepeatSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary();
  uint64_t result = dlsym(v2, "CHHapticPatternLibraryKeyKeyboardDeletionRepeat");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB2601D0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCHHapticPatternLibraryKeyKeyboardDeletionRapidSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary();
  uint64_t result = dlsym(v2, "CHHapticPatternLibraryKeyKeyboardDeletionRapid");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB2601D8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCHHapticPatternLibraryKeyKeyboardOtherSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary();
  uint64_t result = dlsym(v2, "CHHapticPatternLibraryKeyKeyboardOther");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCHHapticPatternLibraryKeyKeyboardOtherSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCHHapticPatternLibraryKeyKeyboardInputCandidateSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary();
  uint64_t result = dlsym(v2, "CHHapticPatternLibraryKeyKeyboardInputCandidate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB2601E0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void __getAVSystemControllerClass_block_invoke(uint64_t a1)
{
  MediaExperienceLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVSystemController");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1EB2601F0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getAVSystemControllerClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"_UIKBFeedbackGenerator.m", 50, @"Unable to find class %s", "AVSystemController");

    __break(1u);
  }
}

void *__getAudioServicesPlaySystemSoundWithOptionsSymbolLoc_block_invoke(void *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1EB260210)
  {
    v5[1] = (void *)MEMORY[0x1E4F143A8];
    v5[2] = (void *)3221225472;
    v5[3] = __AudioToolboxLibraryCore_block_invoke;
    v5[4] = &__block_descriptor_40_e5_v8__0l;
    void v5[5] = v5;
    long long v6 = xmmword_1E52EAEC8;
    uint64_t v7 = 0;
    qword_1EB260210 = _sl_dlopen();
  }
  uint64_t v2 = (void *)qword_1EB260210;
  if (!qword_1EB260210)
  {
    a1 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v2 = [NSString stringWithUTF8String:"void *AudioToolboxLibrary(void)"];
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, @"_UIKBFeedbackGenerator.m", 57, @"%s", v5[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v3 = v5[0];
  if (v5[0]) {
LABEL_7:
  }
    free(v3);
  uint64_t result = dlsym(v2, "AudioServicesPlaySystemSoundWithOptions");
  *(void *)(*(void *)(a1[4] + 8) + 24) = result;
  off_1EB260208 = *(_UNKNOWN **)(*(void *)(a1[4] + 8) + 24);
  return result;
}

uint64_t __AudioToolboxLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB260210 = result;
  return result;
}

void *__getCHHapticEventParameterIDAudioVolumeSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary();
  uint64_t result = dlsym(v2, "CHHapticEventParameterIDAudioVolume");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB260218 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCHHapticEventParameterIDHapticIntensitySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary();
  uint64_t result = dlsym(v2, "CHHapticEventParameterIDHapticIntensity");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB260220 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id _UIUpdateInputStateDebugDescription(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    uint64_t v2 = mach_absolute_time();
  }
  uint64_t v4 = NSString;
  unint64_t v5 = *((void *)a1 + 1);
  memset(v12, 0, sizeof(v12));
  uint64_t v6 = *a1;
  uint64_t v7 = _UIMachTimeDebugDescriptionCopyCStr(v5, v2, (char *)v12, 0x30uLL);
  unint64_t v8 = *((void *)a1 + 2);
  memset(v11, 0, sizeof(v11));
  uint64_t v9 = [v4 stringWithFormat:@"mode=%u, earliestModelTime=%s, latestModelTime=%s", v6, v7, _UIMachTimeDebugDescriptionCopyCStr(v8, v2, (char *)v11, 0x30uLL)];
  return v9;
}

id _UIUpdateInputExtentDebugDescription(unsigned int *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    a2 = mach_absolute_time();
  }
  unint64_t v3 = *((void *)a1 + 1);
  memset(v6, 0, sizeof(v6));
  uint64_t v4 = [NSString stringWithFormat:@"mode=%u, earliestModelTime=%s", *a1, _UIMachTimeDebugDescriptionCopyCStr(v3, a2, (char *)v6, 0x30uLL)];
  return v4;
}

id _UIUpdateInputDebugDescription(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    uint64_t v2 = mach_absolute_time();
  }
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v4 = *a1;
  if (v4 == 2)
  {
    uint64_t v6 = *((void *)a1 + 1);
    uint64_t v7 = *((void *)a1 + 5);
    uint64_t v8 = v6 + *((void *)a1 + 4);
    uint64_t v4 = 2;
    uint64_t v28 = 2;
    uint64_t v29 = v8;
    uint64_t v5 = v7 + v6;
  }
  else
  {
    uint64_t v5 = 0;
    if (v4) {
      uint64_t v28 = *a1;
    }
    else {
      uint64_t v4 = 0;
    }
  }
  v27[0] = v4;
  v27[1] = v5;
  uint64_t v9 = NSString;
  uint64_t v10 = *((void *)a1 + 4);
  memset(v31, 0, sizeof(v31));
  int v11 = _UIMachDurationDebugDescriptionCopyCStr(v10, (char *)v31, 0x30uLL);
  uint64_t v12 = *((void *)a1 + 5);
  memset(v30, 0, sizeof(v30));
  uint64_t v13 = [v9 stringWithFormat:@"{normal=%s, lowLatency=%s}", v11, _UIMachDurationDebugDescriptionCopyCStr(v12, (char *)v30, 0x30uLL)];
  uint64_t v25 = *((void *)a1 + 11);
  uint32_t v26 = NSString;
  _UIUpdateInputStateDebugDescription(a1, v2);
  id v14 = objc_claimAutoreleasedReturnValue();
  uint64_t v15 = [v14 UTF8String];
  BOOL v16 = *((void *)a1 + 9) != 0;
  uint64_t v17 = a1[6];
  id v18 = v13;
  uint64_t v19 = [v18 UTF8String];
  _UIUpdateInputExtentDebugDescription((unsigned int *)&v28, v2);
  id v20 = objc_claimAutoreleasedReturnValue();
  uint64_t v21 = [v20 UTF8String];
  _UIUpdateInputExtentDebugDescription((unsigned int *)v27, v2);
  id v22 = objc_claimAutoreleasedReturnValue();
  uint32_t v23 = [v26 stringWithFormat:@"Input, %s (%s, flags=0x%x, readyCallback=%u, alignments=%s), extents:\n - normal: %s\n - lowLatency: %s", v25, v15, v17, v16, v19, v21, objc_msgSend(v22, "UTF8String")];

  return v23;
}

void UIRefreshControlReceivedOffscreenBeginRefreshing(void *a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (dyld_program_sdk_at_least())
  {
    uint64_t v2 = *(NSObject **)(__UILogGetCategoryCachedImpl("RefreshControl", &qword_1EB25BCD8) + 8);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      int v4 = 138412290;
      id v5 = v1;
      unint64_t v3 = "A UIRefreshControl received offscreen beginRefreshing. Ignored. Break on UIRefreshControlReceivedOffscreenBeg"
           "inRefreshing to debug. %@";
LABEL_6:
      _os_log_impl(&dword_1853B0000, v2, OS_LOG_TYPE_ERROR, v3, (uint8_t *)&v4, 0xCu);
    }
  }
  else
  {
    uint64_t v2 = *(NSObject **)(__UILogGetCategoryCachedImpl("RefreshControl", &qword_1EB25BCE0) + 8);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      int v4 = 138412290;
      id v5 = v1;
      unint64_t v3 = "A UIRefreshControl received offscreen beginRefreshing. This request will be ignored in a future release. Brea"
           "k on UIRefreshControlReceivedOffscreenBeginRefreshing to debug %@";
      goto LABEL_6;
    }
  }
}

void sub_185EA0BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

_UIPortalView *_itemViewFromItem(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  id v9 = a1;
  uint64_t v10 = [v9 view];

  if (v10)
  {
    int v11 = [_UIPortalView alloc];
    uint64_t v12 = [v9 view];
    uint64_t v13 = [(_UIPortalView *)v11 initWithSourceView:v12];

    [(UIView *)v13 setUserInteractionEnabled:0];
  }
  else
  {
    id v14 = [v9 icon];

    if (v14)
    {
      uint64_t v15 = [UIImageView alloc];
      BOOL v16 = [v9 icon];
      uint64_t v13 = [(UIImageView *)v15 initWithImage:v16];

      uint64_t v17 = +[UIImageSymbolConfiguration configurationWithTextStyle:@"UICTFontTextStyleBody" scale:3];
      [(_UIPortalView *)v13 setPreferredSymbolConfiguration:v17];

      [(_UIPortalView *)v13 setAdjustsImageSizeForAccessibilityContentSizeCategory:1];
      id v18 = [v9 identifier];
      [(_UIPortalView *)v13 _setSuppressPixelAlignment:v18 != 0];
    }
    else
    {
      uint64_t v13 = (_UIPortalView *)objc_opt_new();
      uint64_t v19 = [v9 name];
      [(_UIPortalView *)v13 setText:v19];

      [(_UIPortalView *)v13 _setTextColorFollowsTintColor:1];
    }
    [(UIView *)v13 sizeToFit];
  }
  id v20 = [v9 tintColor];

  if (v20)
  {
    uint64_t v21 = [v9 tintColor];
    [(UIView *)v13 setTintColor:v21];
  }
  _updateSourceCenterForItemView(v9, v13, a2, a3, a4, a5);
  if (_UIInternalPreferencesRevisionOnce != -1) {
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_5_8);
  }
  int v22 = _UIInternalPreferencesRevisionVar;
  if (_UIInternalPreferencesRevisionVar >= 1)
  {
    int v24 = _UIInternalPreference_BarCustomizationDebugEnabled;
    if (_UIInternalPreferencesRevisionVar != _UIInternalPreference_BarCustomizationDebugEnabled)
    {
      while (v22 >= v24)
      {
        _UIInternalPreferenceSync(v22, &_UIInternalPreference_BarCustomizationDebugEnabled, @"BarCustomizationDebugEnabled", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
        int v24 = _UIInternalPreference_BarCustomizationDebugEnabled;
        if (v22 == _UIInternalPreference_BarCustomizationDebugEnabled) {
          goto LABEL_12;
        }
      }
      if (byte_1E8FD4F84)
      {
        uint64_t v25 = +[UIColor colorWithRed:1.0 green:0.0 blue:0.0 alpha:0.2];
        [(UIView *)v13 setBackgroundColor:v25];
      }
    }
  }
LABEL_12:

  return v13;
}

void _updateSourceCenterForItemView(void *a1, void *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  id v22 = a1;
  id v11 = a2;
  v24.origin.CGFloat x = a3;
  v24.origin.CGFloat y = a4;
  v24.size.CGFloat width = a5;
  v24.size.CGFloat height = a6;
  if (!CGRectIsEmpty(v24))
  {
    [v11 _getSourceCenter];
    if (v13 == *MEMORY[0x1E4F1DAD8] && v12 == *(double *)(MEMORY[0x1E4F1DAD8] + 8))
    {
      [v22 _sourceFrameInContainer:0];
      double v17 = v16 + v15 * 0.5;
      double v20 = v19 + v18 * 0.5;
      v25.origin.CGFloat x = a3;
      v25.origin.CGFloat y = a4;
      v25.size.CGFloat width = a5;
      v25.size.CGFloat height = a6;
      double v21 = v17 - CGRectGetMinX(v25);
      v26.origin.CGFloat x = a3;
      v26.origin.CGFloat y = a4;
      v26.size.CGFloat width = a5;
      v26.size.CGFloat height = a6;
      objc_msgSend(v11, "_setSourceCenter:", v21, v20 - CGRectGetMinY(v26));
    }
  }
}

id MutableReusableViewMapDescription(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [MEMORY[0x1E4F28E78] stringWithString:@"{"];
  unint64_t v3 = [a1 allKeys];
  int v4 = [v3 sortedArrayUsingSelector:sel_compare_];

  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v5 = v4;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v15;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v15 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        id v11 = objc_msgSend(v10, "_ui_shortDescription");
        double v12 = [a1 objectForKeyedSubscript:v10];
        [v2 appendFormat:@"\n\t%@ = %@;", v11, v12, (void)v14];
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v7);
  }

  [v2 appendString:@"\n}"];
  return v2;
}

id StringToMutableReusableViewMapMapDescription(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [MEMORY[0x1E4F28E78] stringWithString:@"{"];
  unint64_t v3 = [a1 allKeys];
  int v4 = [v3 sortedArrayUsingSelector:sel_compare_];

  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id obj = v4;
  uint64_t v5 = [obj countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v16 != v7) {
          objc_enumerationMutation(obj);
        }
        uint64_t v9 = *(void *)(*((void *)&v15 + 1) + 8 * i);
        uint64_t v10 = [a1 objectForKeyedSubscript:v9];
        id v11 = MutableReusableViewMapDescription(v10);
        double v12 = [v11 stringByReplacingOccurrencesOfString:@"\n" withString:@"\n\t"];
        [v2 appendFormat:@"\n\t\"%@\" = %@;", v9, v12];
      }
      uint64_t v6 = [obj countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v6);
  }

  [v2 appendString:@"\n}"];
  return v2;
}

void sub_185EB9980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _UIActionSliderTrackMaskPath(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  double v8 = CGRectGetHeight(*(CGRect *)&a1) * 0.5;
  v12.origin.CGFloat x = a1;
  v12.origin.CGFloat y = a2;
  v12.size.CGFloat width = a3;
  v12.size.CGFloat height = a4;
  if (CGRectGetWidth(v12) >= 115.0) {
    +[UIBezierPath _bezierPathWithPillRect:cornerRadius:](UIBezierPath, "_bezierPathWithPillRect:cornerRadius:", a1 + 0.0, a2 + -2.0, a3, a4 + 4.0, v8);
  }
  else {
  uint64_t v9 = +[UIBezierPath bezierPathWithRoundedRect:byRoundingCorners:cornerRadii:](UIBezierPath, "bezierPathWithRoundedRect:byRoundingCorners:cornerRadii:", -1, a1, a2, a3, a4, v8, v8);
  }
  return v9;
}

void sub_185EBECDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

__CFString *_UIRefreshControlStateDescription(unint64_t a1)
{
  if (a1 >= 7)
  {
    objc_msgSend(@"unknown state", "stringByAppendingFormat:", @": %lu", a1);
    id v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v1 = off_1E52EB298[a1];
  }
  return v1;
}

id _UIDictationConnectionLog()
{
  if (_UIDictationConnectionLog_onceToken != -1) {
    dispatch_once(&_UIDictationConnectionLog_onceToken, &__block_literal_global_155);
  }
  double v0 = (void *)_UIDictationConnectionLog_log;
  return v0;
}

id _UIDictationControllerLog()
{
  if (_UIDictationControllerLog_onceToken != -1) {
    dispatch_once(&_UIDictationControllerLog_onceToken, &__block_literal_global_3);
  }
  double v0 = (void *)_UIDictationControllerLog_log;
  return v0;
}

id _UIDictationControllerUndoRedoLog()
{
  if (_UIDictationControllerUndoRedoLog_onceToken != -1) {
    dispatch_once(&_UIDictationControllerUndoRedoLog_onceToken, &__block_literal_global_6_6);
  }
  double v0 = (void *)_UIDictationControllerUndoRedoLog_log;
  return v0;
}

BOOL CheckSandboxAccess(void *a1)
{
  id v1 = [a1 path];
  [v1 fileSystemRepresentation];
  BOOL v2 = sandbox_check() == 0;

  return v2;
}

void WarnSetterIsNoop(uint64_t a1)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __WarnSetterIsNoop_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  void block[4] = a1;
  if (WarnSetterIsNoop_onceToken != -1) {
    dispatch_once(&WarnSetterIsNoop_onceToken, block);
  }
}

void __WarnSetterIsNoop_block_invoke(uint64_t a1)
{
  id v1 = NSStringFromSelector(*(SEL *)(a1 + 32));
  NSLog(&cfstr_IgnoredOnTopLe.isa, v1);
}

void sub_185EC1F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185EC20D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185EC225C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185EC2688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185EC2D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getFPIsFileProviderBookmarkSymbolLoc_block_invoke(uint64_t a1)
{
  BOOL v2 = FileProviderLibrary();
  uint64_t result = dlsym(v2, "FPIsFileProviderBookmark");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getFPIsFileProviderBookmarkSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *FileProviderLibrary()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!FileProviderLibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    _OWORD v4[2] = (void *)3221225472;
    v4[3] = __FileProviderLibraryCore_block_invoke;
    void v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_1E52EB2F8;
    uint64_t v6 = 0;
    FileProviderLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  double v0 = (void *)FileProviderLibraryCore_frameworkLibrary;
  if (!FileProviderLibraryCore_frameworkLibrary)
  {
    double v0 = [MEMORY[0x1E4F28B00] currentHandler];
    unint64_t v3 = [NSString stringWithUTF8String:"void *FileProviderLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"NSURL+UIDocumentPicker.m", 26, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __FileProviderLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  FileProviderLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

void *__getFPMarkAsFileProviderBookmarkSymbolLoc_block_invoke(uint64_t a1)
{
  BOOL v2 = FileProviderLibrary();
  uint64_t result = dlsym(v2, "FPMarkAsFileProviderBookmark");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getFPMarkAsFileProviderBookmarkSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getBRIsURLInMobileDocumentsSymbolLoc_block_invoke(uint64_t a1)
{
  BOOL v2 = CloudDocsLibrary();
  uint64_t result = dlsym(v2, "BRIsURLInMobileDocuments");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getBRIsURLInMobileDocumentsSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *CloudDocsLibrary()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!CloudDocsLibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    _OWORD v4[2] = (void *)3221225472;
    v4[3] = __CloudDocsLibraryCore_block_invoke;
    void v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_1E52EB310;
    uint64_t v6 = 0;
    CloudDocsLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  double v0 = (void *)CloudDocsLibraryCore_frameworkLibrary;
  if (!CloudDocsLibraryCore_frameworkLibrary)
  {
    double v0 = [MEMORY[0x1E4F28B00] currentHandler];
    unint64_t v3 = [NSString stringWithUTF8String:"void *CloudDocsLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"NSURL+UIDocumentPicker.m", 31, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __CloudDocsLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  CloudDocsLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

void __getBRContainerClass_block_invoke(uint64_t a1)
{
  CloudDocsLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("BRContainer");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1EB2602A0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    BOOL v2 = [MEMORY[0x1E4F28B00] currentHandler];
    unint64_t v3 = [NSString stringWithUTF8String:"Class getBRContainerClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"NSURL+UIDocumentPicker.m", 34, @"Unable to find class %s", "BRContainer");

    __break(1u);
  }
}

void *__getBRUbiquitousDefaultContainerIDSymbolLoc_block_invoke(uint64_t a1)
{
  BOOL v2 = CloudDocsLibrary();
  uint64_t result = dlsym(v2, "BRUbiquitousDefaultContainerID");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB2602A8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_185EC476C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getBRGetCloudEnabledStatusSymbolLoc_block_invoke(uint64_t a1)
{
  BOOL v2 = CloudDocsLibrary_0();
  uint64_t result = dlsym(v2, "BRGetCloudEnabledStatus");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  _MergedGlobals_1_5 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *CloudDocsLibrary_0()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!CloudDocsLibraryCore_frameworkLibrary_0)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    _OWORD v4[2] = (void *)3221225472;
    v4[3] = __CloudDocsLibraryCore_block_invoke_0;
    void v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_1E52EB3C8;
    uint64_t v6 = 0;
    CloudDocsLibraryCore_frameworkLibrary_0 = _sl_dlopen();
  }
  double v0 = (void *)CloudDocsLibraryCore_frameworkLibrary_0;
  if (!CloudDocsLibraryCore_frameworkLibrary_0)
  {
    double v0 = [MEMORY[0x1E4F28B00] currentHandler];
    unint64_t v3 = [NSString stringWithUTF8String:"void *CloudDocsLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDocumentMenuViewController.m", 43, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __CloudDocsLibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  CloudDocsLibraryCore_frameworkLibrary_0 = result;
  return result;
}

void *__getBRICloudContainerIdentifiersEntitlementSymbolLoc_block_invoke(uint64_t a1)
{
  BOOL v2 = CloudDocsLibrary_0();
  uint64_t result = dlsym(v2, "BRICloudContainerIdentifiersEntitlement");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25BCF0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id getDOCConfigurationClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  double v0 = (void *)_MergedGlobals_1_6;
  uint64_t v7 = _MergedGlobals_1_6;
  if (!_MergedGlobals_1_6)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getDOCConfigurationClass_block_invoke;
    v3[3] = &unk_1E52D9900;
    v3[4] = &v4;
    __getDOCConfigurationClass_block_invoke((uint64_t)v3);
    double v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_185EC6C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185EC7400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getDOCConfigurationClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB25BD00)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    _OWORD v6[3] = __DocumentManagerCoreLibraryCore_block_invoke;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_1E52EB420;
    uint64_t v8 = 0;
    qword_1EB25BD00 = _sl_dlopen();
  }
  if (!qword_1EB25BD00)
  {
    unint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *DocumentManagerCoreLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIDocumentPickerViewController.m", 44, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("DOCConfiguration");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    unint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"Class getDOCConfigurationClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIDocumentPickerViewController.m", 45, @"Unable to find class %s", "DOCConfiguration");

LABEL_10:
    __break(1u);
  }
  _MergedGlobals_1_6 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __DocumentManagerCoreLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25BD00 = result;
  return result;
}

Class __getUIDocumentBrowserViewControllerClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB25BD10)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    _OWORD v6[3] = __DocumentManagerLibraryCore_block_invoke;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_1E52EB438;
    uint64_t v8 = 0;
    qword_1EB25BD10 = _sl_dlopen();
  }
  if (!qword_1EB25BD10)
  {
    unint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *DocumentManagerLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIDocumentPickerViewController.m", 41, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("UIDocumentBrowserViewController");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    unint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"Class getUIDocumentBrowserViewControllerClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIDocumentPickerViewController.m", 42, @"Unable to find class %s", "UIDocumentBrowserViewController");

LABEL_10:
    __break(1u);
  }
  qword_1EB25BD08 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __DocumentManagerLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25BD10 = result;
  return result;
}

void sub_185EC8F24(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void *__getFPDocumentURLFromBookmarkableStringSymbolLoc_block_invoke(void *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1EB25CB98)
  {
    v5[1] = (void *)MEMORY[0x1E4F143A8];
    v5[2] = (void *)3221225472;
    v5[3] = __FileProviderLibraryCore_block_invoke_0;
    v5[4] = &__block_descriptor_40_e5_v8__0l;
    void v5[5] = v5;
    long long v6 = xmmword_1E52EB478;
    uint64_t v7 = 0;
    qword_1EB25CB98 = _sl_dlopen();
  }
  BOOL v2 = (void *)qword_1EB25CB98;
  if (!qword_1EB25CB98)
  {
    a1 = [MEMORY[0x1E4F28B00] currentHandler];
    BOOL v2 = [NSString stringWithUTF8String:"void *FileProviderLibrary(void)"];
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, @"_UIDocumentPickerRemoteViewController.m", 31, @"%s", v5[0]);

    __break(1u);
    goto LABEL_7;
  }
  unint64_t v3 = v5[0];
  if (v5[0]) {
LABEL_7:
  }
    free(v3);
  uint64_t result = dlsym(v2, "FPDocumentURLFromBookmarkableString");
  *(void *)(*(void *)(a1[4] + 8) + 24) = result;
  _MergedGlobals_3_7 = *(_UNKNOWN **)(*(void *)(a1[4] + 8) + 24);
  return result;
}

uint64_t __FileProviderLibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25CB98 = result;
  return result;
}

void sub_185EC9A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185ECA6A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _appleDoublePathForRealPath_DotUnderscore(void *a1)
{
  id v1 = a1;
  BOOL v2 = [v1 lastPathComponent];
  unint64_t v3 = [@"._" stringByAppendingString:v2];

  uint64_t v4 = [v1 stringByDeletingLastPathComponent];

  long long v5 = [v4 stringByAppendingPathComponent:v3];

  return v5;
}

uint64_t _isPossibleAppleDoublePath_MACOSX(void *a1)
{
  id v1 = [a1 stringByStandardizingPath];
  BOOL v2 = [v1 pathComponents];

  unint64_t v3 = [v2 firstObject];
  if (![v3 isEqualToString:@"/"])
  {

    goto LABEL_5;
  }
  unint64_t v4 = [v2 count];

  if (v4 < 2)
  {
LABEL_5:
    long long v5 = [v2 firstObject];
    goto LABEL_6;
  }
  long long v5 = [v2 objectAtIndexedSubscript:1];
LABEL_6:
  long long v6 = v5;
  uint64_t v7 = [v5 isEqualToString:@"__MACOSX"];

  return v7;
}

uint64_t _isPossibleAppleDoublePath_DotUnderscore(void *a1)
{
  id v1 = [a1 stringByStandardizingPath];
  BOOL v2 = [v1 lastPathComponent];
  uint64_t v3 = [v2 hasPrefix:@"._"];

  return v3;
}

void _UIAppleDoubleMergeAppleDoubleItemsIntoRealFiles(void *a1, void *a2)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  id obj = v3;
  uint64_t v5 = [v3 countByEnumeratingWithState:&v47 objects:v51 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v46 = *(void *)v48;
    uint64_t v44 = *MEMORY[0x1E4F28568];
    uint64_t v45 = *MEMORY[0x1E4F28798];
    uint64_t v43 = *MEMORY[0x1E4F28A50];
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v48 != v46) {
          objc_enumerationMutation(obj);
        }
        uint64_t v8 = *(void **)(*((void *)&v47 + 1) + 8 * i);
        uint64_t v9 = [v8 pathInArchive];
        uint64_t v10 = [v4 stringByAppendingPathComponent:v9];

        id v11 = [v8 pathToAppleDoubleRealFileCounterpart];
        CGRect v12 = [v4 stringByAppendingPathComponent:v11];

        id v13 = v10;
        id v14 = v12;
        if ([v14 length] || !_isPossibleAppleDoublePath_MACOSX(v13)) {
          goto LABEL_13;
        }
        LOBYTE(v52[0]) = 0;
        long long v15 = (void *)MEMORY[0x1E4F28CB8];
        id v16 = v13;
        long long v17 = [v15 defaultManager];
        int v18 = [v17 fileExistsAtPath:v16 isDirectory:v52];

        int v19 = LOBYTE(v52[0]);
        if (!v18 || v19 == 0)
        {
LABEL_13:
          id v21 = v13;
          id v22 = (const char *)[v21 UTF8String];
          id v23 = v14;
          int v24 = copyfile(v22, (const char *)[v23 UTF8String], 0, 0x8C0005u);
          if (v24)
          {
            CGRect v25 = [MEMORY[0x1E4F28C58] errorWithDomain:v45 code:v24 userInfo:0];
            CGRect v26 = [NSString stringWithFormat:@"unable to copy attributes stored in AppleDouble file %@ into %@", v21, v23];
            long long v27 = (void *)MEMORY[0x1E4F28C58];
            *(void *)&long long v53 = v44;
            *((void *)&v53 + 1) = v43;
            v52[0] = v26;
            v52[1] = v25;
            uint64_t v28 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v52 forKeys:&v53 count:2];
            uint64_t v29 = [v27 errorWithDomain:@"_UIArchiveErrorDomain" code:-1 userInfo:v28];
          }
          char v30 = [MEMORY[0x1E4F28CB8] defaultManager];
          [v30 removeItemAtPath:v21 error:0];
        }
      }
      uint64_t v6 = [obj countByEnumeratingWithState:&v47 objects:v51 count:16];
    }
    while (v6);
  }
  double v31 = [v4 stringByAppendingPathComponent:@"__MACOSX"];
  uint64_t v32 = [MEMORY[0x1E4F28CB8] defaultManager];
  double v33 = [v32 enumeratorAtPath:v31];
  double v34 = [v33 allObjects];

  double v35 = [v34 sortedArrayUsingComparator:&__block_literal_global_37];

  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  id v36 = v35;
  uint64_t v37 = [v36 countByEnumeratingWithState:&v53 objects:v52 count:16];
  if (v37)
  {
    uint64_t v38 = v37;
    uint64_t v39 = *(void *)v54;
    do
    {
      for (uint64_t j = 0; j != v38; ++j)
      {
        if (*(void *)v54 != v39) {
          objc_enumerationMutation(v36);
        }
        long long v41 = [v31 stringByAppendingPathComponent:*(void *)(*((void *)&v53 + 1) + 8 * j)];
        _removeIfEmptyDirectoryAtAbsolutePath(v41);
      }
      uint64_t v38 = [v36 countByEnumeratingWithState:&v53 objects:v52 count:16];
    }
    while (v38);
  }

  _removeIfEmptyDirectoryAtAbsolutePath(v31);
}

uint64_t ___realPathForAppleDoublePath_block_invoke(uint64_t a1, void *a2)
{
  return [a2 isEqualToString:@"__MACOSX"];
}

BOOL ___removeEmptyAppleDoubleDirectoriesInRootDirectory_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  unint64_t v5 = [a2 length];
  unint64_t v6 = [v4 length];

  return v5 < v6;
}

int *_removeIfEmptyDirectoryAtAbsolutePath(void *a1)
{
  uint64_t result = (int *)rmdir((const char *)[a1 fileSystemRepresentation]);
  if (result)
  {
    return __error();
  }
  return result;
}

void ui_archive_read_new()
{
  uint64_t v4 = 0;
  unint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  double v0 = (void (*)(void))getarchive_read_newSymbolLoc_ptr;
  uint64_t v7 = getarchive_read_newSymbolLoc_ptr;
  if (!getarchive_read_newSymbolLoc_ptr)
  {
    id v1 = (void *)libarchiveLibrary();
    v5[3] = (uint64_t)dlsym(v1, "archive_read_new");
    getarchive_read_newSymbolLoc_ptr = (_UNKNOWN *)v5[3];
    double v0 = (void (*)(void))v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (v0)
  {
    v0();
  }
  else
  {
    BOOL v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"struct ui_archive *__ui_archive_read_new(void)"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"_UILibArchiveSoftLinking.m", 15, @"%s", dlerror());

    __break(1u);
  }
}

void sub_185ECB4DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ui_archive_read_support_compression_all(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  BOOL v2 = (void (*)(uint64_t))getarchive_read_support_compression_allSymbolLoc_ptr;
  uint64_t v9 = getarchive_read_support_compression_allSymbolLoc_ptr;
  if (!getarchive_read_support_compression_allSymbolLoc_ptr)
  {
    id v3 = (void *)libarchiveLibrary();
    v7[3] = (uint64_t)dlsym(v3, "archive_read_support_compression_all");
    getarchive_read_support_compression_allSymbolLoc_ptr = (_UNKNOWN *)v7[3];
    BOOL v2 = (void (*)(uint64_t))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v2)
  {
    v2(a1);
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    unint64_t v5 = [NSString stringWithUTF8String:"int __ui_archive_read_support_compression_all(struct ui_archive *)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UILibArchiveSoftLinking.m", 16, @"%s", dlerror());

    __break(1u);
  }
}

void sub_185ECB644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ui_archive_read_support_format_all(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  BOOL v2 = (void (*)(uint64_t))getarchive_read_support_format_allSymbolLoc_ptr;
  uint64_t v9 = getarchive_read_support_format_allSymbolLoc_ptr;
  if (!getarchive_read_support_format_allSymbolLoc_ptr)
  {
    id v3 = (void *)libarchiveLibrary();
    v7[3] = (uint64_t)dlsym(v3, "archive_read_support_format_all");
    getarchive_read_support_format_allSymbolLoc_ptr = (_UNKNOWN *)v7[3];
    BOOL v2 = (void (*)(uint64_t))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v2)
  {
    v2(a1);
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    unint64_t v5 = [NSString stringWithUTF8String:"int __ui_archive_read_support_format_all(struct ui_archive *)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UILibArchiveSoftLinking.m", 17, @"%s", dlerror());

    __break(1u);
  }
}

void sub_185ECB7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ui_archive_read_open_filename(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = [v5 fileSystemRepresentation];
  uint64_t v11 = 0;
  CGRect v12 = &v11;
  uint64_t v13 = 0x2020000000;
  uint64_t v7 = (void (*)(uint64_t, uint64_t, uint64_t))getarchive_read_open_filenameSymbolLoc_ptr;
  id v14 = getarchive_read_open_filenameSymbolLoc_ptr;
  if (!getarchive_read_open_filenameSymbolLoc_ptr)
  {
    uint64_t v8 = (void *)libarchiveLibrary();
    _OWORD v12[3] = (uint64_t)dlsym(v8, "archive_read_open_filename");
    getarchive_read_open_filenameSymbolLoc_ptr = (_UNKNOWN *)v12[3];
    uint64_t v7 = (void (*)(uint64_t, uint64_t, uint64_t))v12[3];
  }
  _Block_object_dispose(&v11, 8);
  if (v7)
  {
    v7(a1, v6, a3);
  }
  else
  {
    uint64_t v9 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v10 = objc_msgSend(NSString, "stringWithUTF8String:", "int __ui_archive_read_open_filename(struct ui_archive *, const char *, size_t)");
    objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", v10, @"_UILibArchiveSoftLinking.m", 18, @"%s", dlerror());

    __break(1u);
  }
}

void sub_185ECB948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ui_archive_read_close(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  BOOL v2 = (void (*)(uint64_t))getarchive_read_closeSymbolLoc_ptr;
  uint64_t v9 = getarchive_read_closeSymbolLoc_ptr;
  if (!getarchive_read_closeSymbolLoc_ptr)
  {
    id v3 = (void *)libarchiveLibrary();
    v7[3] = (uint64_t)dlsym(v3, "archive_read_close");
    getarchive_read_closeSymbolLoc_ptr = (_UNKNOWN *)v7[3];
    BOOL v2 = (void (*)(uint64_t))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v2)
  {
    v2(a1);
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    id v5 = [NSString stringWithUTF8String:"int __ui_archive_read_close(struct ui_archive *)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UILibArchiveSoftLinking.m", 19, @"%s", dlerror());

    __break(1u);
  }
}

void sub_185ECBAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ui_archive_read_finish(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  BOOL v2 = (void (*)(uint64_t))getarchive_read_finishSymbolLoc_ptr;
  uint64_t v9 = getarchive_read_finishSymbolLoc_ptr;
  if (!getarchive_read_finishSymbolLoc_ptr)
  {
    id v3 = (void *)libarchiveLibrary();
    v7[3] = (uint64_t)dlsym(v3, "archive_read_finish");
    getarchive_read_finishSymbolLoc_ptr = (_UNKNOWN *)v7[3];
    BOOL v2 = (void (*)(uint64_t))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v2)
  {
    v2(a1);
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    id v5 = [NSString stringWithUTF8String:"void __ui_archive_read_finish(struct ui_archive *)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UILibArchiveSoftLinking.m", 20, @"%s", dlerror());

    __break(1u);
  }
}

void sub_185ECBC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ui_archive_format_name(uint64_t a1)
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  BOOL v2 = (uint64_t (*)(uint64_t))getarchive_format_nameSymbolLoc_ptr;
  uint64_t v11 = getarchive_format_nameSymbolLoc_ptr;
  if (!getarchive_format_nameSymbolLoc_ptr)
  {
    id v3 = (void *)libarchiveLibrary();
    v9[3] = (uint64_t)dlsym(v3, "archive_format_name");
    getarchive_format_nameSymbolLoc_ptr = (_UNKNOWN *)v9[3];
    BOOL v2 = (uint64_t (*)(uint64_t))v9[3];
  }
  _Block_object_dispose(&v8, 8);
  if (v2)
  {
    uint64_t v4 = (void *)v2(a1);
    if (v4)
    {
      uint64_t v4 = [NSString stringWithUTF8String:v4];
    }
    id v5 = v4;
  }
  else
  {
    uint64_t v6 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v7 = [NSString stringWithUTF8String:"const char *__ui_archive_format_name(struct ui_archive *)"];
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, @"_UILibArchiveSoftLinking.m", 21, @"%s", dlerror());

    __break(1u);
  }
}

void sub_185ECBDA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ui_archive_format(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  BOOL v2 = (void (*)(uint64_t))getarchive_formatSymbolLoc_ptr;
  uint64_t v9 = getarchive_formatSymbolLoc_ptr;
  if (!getarchive_formatSymbolLoc_ptr)
  {
    id v3 = (void *)libarchiveLibrary();
    v7[3] = (uint64_t)dlsym(v3, "archive_format");
    getarchive_formatSymbolLoc_ptr = (_UNKNOWN *)v7[3];
    BOOL v2 = (void (*)(uint64_t))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v2)
  {
    v2(a1);
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    id v5 = [NSString stringWithUTF8String:"int __ui_archive_format(struct ui_archive *)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UILibArchiveSoftLinking.m", 22, @"%s", dlerror());

    __break(1u);
  }
}

void sub_185ECBF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ui_archive_read_next_header(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  uint64_t v4 = (void (*)(uint64_t, uint64_t))getarchive_read_next_headerSymbolLoc_ptr;
  uint64_t v11 = getarchive_read_next_headerSymbolLoc_ptr;
  if (!getarchive_read_next_headerSymbolLoc_ptr)
  {
    id v5 = (void *)libarchiveLibrary();
    v9[3] = (uint64_t)dlsym(v5, "archive_read_next_header");
    getarchive_read_next_headerSymbolLoc_ptr = (_UNKNOWN *)v9[3];
    uint64_t v4 = (void (*)(uint64_t, uint64_t))v9[3];
  }
  _Block_object_dispose(&v8, 8);
  if (v4)
  {
    v4(a1, a2);
  }
  else
  {
    uint64_t v6 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v7 = objc_msgSend(NSString, "stringWithUTF8String:", "int __ui_archive_read_next_header(struct ui_archive *, struct ui_archive_entry **)");
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, @"_UILibArchiveSoftLinking.m", 24, @"%s", dlerror());

    __break(1u);
  }
}

void sub_185ECC080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ui_archive_entry_pathname(uint64_t a1)
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  BOOL v2 = (uint64_t (*)(uint64_t))getarchive_entry_pathnameSymbolLoc_ptr;
  uint64_t v11 = getarchive_entry_pathnameSymbolLoc_ptr;
  if (!getarchive_entry_pathnameSymbolLoc_ptr)
  {
    id v3 = (void *)libarchiveLibrary();
    v9[3] = (uint64_t)dlsym(v3, "archive_entry_pathname");
    getarchive_entry_pathnameSymbolLoc_ptr = (_UNKNOWN *)v9[3];
    BOOL v2 = (uint64_t (*)(uint64_t))v9[3];
  }
  _Block_object_dispose(&v8, 8);
  if (v2)
  {
    uint64_t v4 = (void *)v2(a1);
    if (v4)
    {
      uint64_t v4 = [NSString stringWithUTF8String:v4];
    }
    id v5 = v4;
  }
  else
  {
    uint64_t v6 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v7 = [NSString stringWithUTF8String:"const char *__ui_archive_entry_pathname(struct ui_archive_entry *)"];
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, @"_UILibArchiveSoftLinking.m", 25, @"%s", dlerror());

    __break(1u);
  }
}

void sub_185ECC210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ui_archive_entry_filetype(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  BOOL v2 = (void (*)(uint64_t))getarchive_entry_filetypeSymbolLoc_ptr;
  uint64_t v9 = getarchive_entry_filetypeSymbolLoc_ptr;
  if (!getarchive_entry_filetypeSymbolLoc_ptr)
  {
    id v3 = (void *)libarchiveLibrary();
    v7[3] = (uint64_t)dlsym(v3, "archive_entry_filetype");
    getarchive_entry_filetypeSymbolLoc_ptr = (_UNKNOWN *)v7[3];
    BOOL v2 = (void (*)(uint64_t))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v2)
  {
    v2(a1);
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    id v5 = [NSString stringWithUTF8String:"mode_t __ui_archive_entry_filetype(struct ui_archive_entry *)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UILibArchiveSoftLinking.m", 26, @"%s", dlerror());

    __break(1u);
  }
}

void sub_185ECC378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ui_archive_entry_size_is_set(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  BOOL v2 = (void (*)(uint64_t))getarchive_entry_size_is_setSymbolLoc_ptr;
  uint64_t v9 = getarchive_entry_size_is_setSymbolLoc_ptr;
  if (!getarchive_entry_size_is_setSymbolLoc_ptr)
  {
    id v3 = (void *)libarchiveLibrary();
    v7[3] = (uint64_t)dlsym(v3, "archive_entry_size_is_set");
    getarchive_entry_size_is_setSymbolLoc_ptr = (_UNKNOWN *)v7[3];
    BOOL v2 = (void (*)(uint64_t))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v2)
  {
    v2(a1);
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    id v5 = [NSString stringWithUTF8String:"int __ui_archive_entry_size_is_set(struct ui_archive_entry *)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UILibArchiveSoftLinking.m", 27, @"%s", dlerror());

    __break(1u);
  }
}

void sub_185ECC4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ui_archive_entry_size(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  BOOL v2 = (void (*)(uint64_t))getarchive_entry_sizeSymbolLoc_ptr;
  uint64_t v9 = getarchive_entry_sizeSymbolLoc_ptr;
  if (!getarchive_entry_sizeSymbolLoc_ptr)
  {
    id v3 = (void *)libarchiveLibrary();
    v7[3] = (uint64_t)dlsym(v3, "archive_entry_size");
    getarchive_entry_sizeSymbolLoc_ptr = (_UNKNOWN *)v7[3];
    BOOL v2 = (void (*)(uint64_t))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v2)
  {
    v2(a1);
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    id v5 = [NSString stringWithUTF8String:"int64_t __ui_archive_entry_size(struct ui_archive_entry *)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UILibArchiveSoftLinking.m", 28, @"%s", dlerror());

    __break(1u);
  }
}

void sub_185ECC648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ui_archive_write_disk_new()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000;
  double v0 = (void (*)(void))getarchive_write_disk_newSymbolLoc_ptr;
  uint64_t v7 = getarchive_write_disk_newSymbolLoc_ptr;
  if (!getarchive_write_disk_newSymbolLoc_ptr)
  {
    id v1 = (void *)libarchiveLibrary();
    v5[3] = (uint64_t)dlsym(v1, "archive_write_disk_new");
    getarchive_write_disk_newSymbolLoc_ptr = (_UNKNOWN *)v5[3];
    double v0 = (void (*)(void))v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (v0)
  {
    v0();
  }
  else
  {
    BOOL v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"struct ui_archive *__ui_archive_write_disk_new(void)"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"_UILibArchiveSoftLinking.m", 29, @"%s", dlerror());

    __break(1u);
  }
}

void sub_185ECC7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ui_archive_write_disk_set_standard_lookup(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  BOOL v2 = (void (*)(uint64_t))getarchive_write_disk_set_standard_lookupSymbolLoc_ptr;
  uint64_t v9 = getarchive_write_disk_set_standard_lookupSymbolLoc_ptr;
  if (!getarchive_write_disk_set_standard_lookupSymbolLoc_ptr)
  {
    id v3 = (void *)libarchiveLibrary();
    v7[3] = (uint64_t)dlsym(v3, "archive_write_disk_set_standard_lookup");
    getarchive_write_disk_set_standard_lookupSymbolLoc_ptr = (_UNKNOWN *)v7[3];
    BOOL v2 = (void (*)(uint64_t))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v2)
  {
    v2(a1);
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    id v5 = [NSString stringWithUTF8String:"int __ui_archive_write_disk_set_standard_lookup(struct ui_archive *)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UILibArchiveSoftLinking.m", 30, @"%s", dlerror());

    __break(1u);
  }
}

void sub_185ECC908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ui_archive_write_disk_set_options(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  uint64_t v4 = (void (*)(uint64_t, uint64_t))getarchive_write_disk_set_optionsSymbolLoc_ptr;
  uint64_t v11 = getarchive_write_disk_set_optionsSymbolLoc_ptr;
  if (!getarchive_write_disk_set_optionsSymbolLoc_ptr)
  {
    id v5 = (void *)libarchiveLibrary();
    v9[3] = (uint64_t)dlsym(v5, "archive_write_disk_set_options");
    getarchive_write_disk_set_optionsSymbolLoc_ptr = (_UNKNOWN *)v9[3];
    uint64_t v4 = (void (*)(uint64_t, uint64_t))v9[3];
  }
  _Block_object_dispose(&v8, 8);
  if (v4)
  {
    v4(a1, a2);
  }
  else
  {
    uint64_t v6 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v7 = objc_msgSend(NSString, "stringWithUTF8String:", "int __ui_archive_write_disk_set_options(struct ui_archive *, int)");
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, @"_UILibArchiveSoftLinking.m", 31, @"%s", dlerror());

    __break(1u);
  }
}

void sub_185ECCA78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ui_archive_write_close(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  BOOL v2 = (void (*)(uint64_t))getarchive_write_closeSymbolLoc_ptr;
  uint64_t v9 = getarchive_write_closeSymbolLoc_ptr;
  if (!getarchive_write_closeSymbolLoc_ptr)
  {
    id v3 = (void *)libarchiveLibrary();
    v7[3] = (uint64_t)dlsym(v3, "archive_write_close");
    getarchive_write_closeSymbolLoc_ptr = (_UNKNOWN *)v7[3];
    BOOL v2 = (void (*)(uint64_t))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v2)
  {
    v2(a1);
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    id v5 = [NSString stringWithUTF8String:"int __ui_archive_write_close(struct ui_archive *)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UILibArchiveSoftLinking.m", 32, @"%s", dlerror());

    __break(1u);
  }
}

void sub_185ECCBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ui_archive_write_finish(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  BOOL v2 = (void (*)(uint64_t))getarchive_write_finishSymbolLoc_ptr;
  uint64_t v9 = getarchive_write_finishSymbolLoc_ptr;
  if (!getarchive_write_finishSymbolLoc_ptr)
  {
    id v3 = (void *)libarchiveLibrary();
    v7[3] = (uint64_t)dlsym(v3, "archive_write_finish");
    getarchive_write_finishSymbolLoc_ptr = (_UNKNOWN *)v7[3];
    BOOL v2 = (void (*)(uint64_t))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v2)
  {
    v2(a1);
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    id v5 = [NSString stringWithUTF8String:"void __ui_archive_write_finish(struct ui_archive *)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UILibArchiveSoftLinking.m", 33, @"%s", dlerror());

    __break(1u);
  }
}

void sub_185ECCD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ui_archive_write_header(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  uint64_t v4 = (void (*)(uint64_t, uint64_t))getarchive_write_headerSymbolLoc_ptr;
  uint64_t v11 = getarchive_write_headerSymbolLoc_ptr;
  if (!getarchive_write_headerSymbolLoc_ptr)
  {
    id v5 = (void *)libarchiveLibrary();
    v9[3] = (uint64_t)dlsym(v5, "archive_write_header");
    getarchive_write_headerSymbolLoc_ptr = (_UNKNOWN *)v9[3];
    uint64_t v4 = (void (*)(uint64_t, uint64_t))v9[3];
  }
  _Block_object_dispose(&v8, 8);
  if (v4)
  {
    v4(a1, a2);
  }
  else
  {
    uint64_t v6 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v7 = objc_msgSend(NSString, "stringWithUTF8String:", "int __ui_archive_write_header(struct ui_archive *, struct ui_archive_entry *)");
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, @"_UILibArchiveSoftLinking.m", 34, @"%s", dlerror());

    __break(1u);
  }
}

void sub_185ECCEB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ui_archive_write_finish_entry(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  BOOL v2 = (void (*)(uint64_t))getarchive_write_finish_entrySymbolLoc_ptr;
  uint64_t v9 = getarchive_write_finish_entrySymbolLoc_ptr;
  if (!getarchive_write_finish_entrySymbolLoc_ptr)
  {
    id v3 = (void *)libarchiveLibrary();
    v7[3] = (uint64_t)dlsym(v3, "archive_write_finish_entry");
    getarchive_write_finish_entrySymbolLoc_ptr = (_UNKNOWN *)v7[3];
    BOOL v2 = (void (*)(uint64_t))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v2)
  {
    v2(a1);
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    id v5 = [NSString stringWithUTF8String:"int __ui_archive_write_finish_entry(struct ui_archive *)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UILibArchiveSoftLinking.m", 35, @"%s", dlerror());

    __break(1u);
  }
}

void sub_185ECD020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ui_archive_entry_clone(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  BOOL v2 = (void (*)(uint64_t))getarchive_entry_cloneSymbolLoc_ptr;
  uint64_t v9 = getarchive_entry_cloneSymbolLoc_ptr;
  if (!getarchive_entry_cloneSymbolLoc_ptr)
  {
    id v3 = (void *)libarchiveLibrary();
    v7[3] = (uint64_t)dlsym(v3, "archive_entry_clone");
    getarchive_entry_cloneSymbolLoc_ptr = (_UNKNOWN *)v7[3];
    BOOL v2 = (void (*)(uint64_t))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v2)
  {
    v2(a1);
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    id v5 = [NSString stringWithUTF8String:"struct ui_archive_entry *__ui_archive_entry_clone(struct ui_archive_entry *)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UILibArchiveSoftLinking.m", 36, @"%s", dlerror());

    __break(1u);
  }
}

void sub_185ECD188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ui_archive_entry_free(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  BOOL v2 = (void (*)(uint64_t))getarchive_entry_freeSymbolLoc_ptr;
  uint64_t v9 = getarchive_entry_freeSymbolLoc_ptr;
  if (!getarchive_entry_freeSymbolLoc_ptr)
  {
    id v3 = (void *)libarchiveLibrary();
    v7[3] = (uint64_t)dlsym(v3, "archive_entry_free");
    getarchive_entry_freeSymbolLoc_ptr = (_UNKNOWN *)v7[3];
    BOOL v2 = (void (*)(uint64_t))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v2)
  {
    v2(a1);
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    id v5 = [NSString stringWithUTF8String:"void __ui_archive_entry_free(struct ui_archive_entry *)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UILibArchiveSoftLinking.m", 37, @"%s", dlerror());

    __break(1u);
  }
}

void sub_185ECD2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ui_archive_entry_set_pathname(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 fileSystemRepresentation];
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x2020000000;
  id v5 = (void (*)(uint64_t, uint64_t))getarchive_entry_set_pathnameSymbolLoc_ptr;
  CGRect v12 = getarchive_entry_set_pathnameSymbolLoc_ptr;
  if (!getarchive_entry_set_pathnameSymbolLoc_ptr)
  {
    uint64_t v6 = (void *)libarchiveLibrary();
    v10[3] = (uint64_t)dlsym(v6, "archive_entry_set_pathname");
    getarchive_entry_set_pathnameSymbolLoc_ptr = (_UNKNOWN *)v10[3];
    id v5 = (void (*)(uint64_t, uint64_t))v10[3];
  }
  _Block_object_dispose(&v9, 8);
  if (v5)
  {
    v5(a1, v4);
  }
  else
  {
    uint64_t v7 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v8 = objc_msgSend(NSString, "stringWithUTF8String:", "void __ui_archive_entry_set_pathname(struct ui_archive_entry *, const char *)");
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, @"_UILibArchiveSoftLinking.m", 38, @"%s", dlerror());

    __break(1u);
  }
}

void sub_185ECD47C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ui_archive_read_data_block(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2020000000;
  uint64_t v8 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))getarchive_read_data_blockSymbolLoc_ptr;
  long long v15 = getarchive_read_data_blockSymbolLoc_ptr;
  if (!getarchive_read_data_blockSymbolLoc_ptr)
  {
    uint64_t v9 = (void *)libarchiveLibrary();
    v13[3] = (uint64_t)dlsym(v9, "archive_read_data_block");
    getarchive_read_data_blockSymbolLoc_ptr = (_UNKNOWN *)v13[3];
    uint64_t v8 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v13[3];
  }
  _Block_object_dispose(&v12, 8);
  if (v8)
  {
    v8(a1, a2, a3, a4);
  }
  else
  {
    uint64_t v10 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v11 = objc_msgSend(NSString, "stringWithUTF8String:", "int __ui_archive_read_data_block(struct ui_archive *, const void **, size_t *, off_t *)");
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, @"_UILibArchiveSoftLinking.m", 39, @"%s", dlerror());

    __break(1u);
  }
}

void sub_185ECD604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ui_archive_write_data_block(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2020000000;
  uint64_t v8 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))getarchive_write_data_blockSymbolLoc_ptr;
  long long v15 = getarchive_write_data_blockSymbolLoc_ptr;
  if (!getarchive_write_data_blockSymbolLoc_ptr)
  {
    uint64_t v9 = (void *)libarchiveLibrary();
    v13[3] = (uint64_t)dlsym(v9, "archive_write_data_block");
    getarchive_write_data_blockSymbolLoc_ptr = (_UNKNOWN *)v13[3];
    uint64_t v8 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v13[3];
  }
  _Block_object_dispose(&v12, 8);
  if (v8)
  {
    v8(a1, a2, a3, a4);
  }
  else
  {
    uint64_t v10 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v11 = objc_msgSend(NSString, "stringWithUTF8String:", "ssize_t __ui_archive_write_data_block(struct ui_archive *, const void *, size_t, off_t)");
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, @"_UILibArchiveSoftLinking.m", 40, @"%s", dlerror());

    __break(1u);
  }
}

void sub_185ECD78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id ui_archive_error(uint64_t a1, void *a2, int a3, void *a4)
{
  v26[2] = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a4;
  uint64_t v9 = NSString;
  uint64_t v21 = 0;
  id v22 = &v21;
  uint64_t v23 = 0x2020000000;
  uint64_t v10 = (uint64_t (*)(uint64_t))getarchive_error_stringSymbolLoc_ptr;
  int v24 = getarchive_error_stringSymbolLoc_ptr;
  if (!getarchive_error_stringSymbolLoc_ptr)
  {
    uint64_t v11 = (void *)libarchiveLibrary();
    v22[3] = (uint64_t)dlsym(v11, "archive_error_string");
    getarchive_error_stringSymbolLoc_ptr = (_UNKNOWN *)v22[3];
    uint64_t v10 = (uint64_t (*)(uint64_t))v22[3];
  }
  _Block_object_dispose(&v21, 8);
  if (!v10)
  {
    int v19 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v20 = [NSString stringWithUTF8String:"const char *__ui_archive_error_string(struct ui_archive *)"];
    objc_msgSend(v19, "handleFailureInFunction:file:lineNumber:description:", v20, @"_UILibArchiveSoftLinking.m", 23, @"%s", dlerror());

    __break(1u);
  }
  uint64_t v12 = v10(a1);
  if (v12)
  {
    uint64_t v13 = [NSString stringWithUTF8String:v12];
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v14 = [v9 stringWithFormat:@"%@", v13];

  uint64_t v15 = *MEMORY[0x1E4F28588];
  v25[0] = *MEMORY[0x1E4F28568];
  v25[1] = v15;
  v26[0] = v8;
  v26[1] = v14;
  id v16 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v26 forKeys:v25 count:2];
  long long v17 = [MEMORY[0x1E4F28C58] errorWithDomain:v7 code:a3 userInfo:v16];

  return v17;
}

void sub_185ECDA10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getarchive_read_newSymbolLoc_block_invoke(uint64_t a1)
{
  BOOL v2 = (void *)libarchiveLibrary();
  uint64_t result = dlsym(v2, "archive_read_new");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getarchive_read_newSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t libarchiveLibrary()
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  v9[0] = 0;
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2020000000;
  uint64_t v0 = libarchiveLibraryCore_frameworkLibrary;
  uint64_t v15 = libarchiveLibraryCore_frameworkLibrary;
  if (!libarchiveLibraryCore_frameworkLibrary)
  {
    v9[1] = (void *)MEMORY[0x1E4F143A8];
    void v9[2] = (void *)3221225472;
    v9[3] = __libarchiveLibraryCore_block_invoke;
    void v9[4] = &unk_1E52E7A10;
    uint64_t v10 = &v12;
    uint64_t v11 = v9;
    long long v16 = xmmword_1E52EB550;
    uint64_t v17 = 0;
    v13[3] = _sl_dlopen();
    libarchiveLibraryCore_frameworkLibrarCGFloat y = *(void *)(v10[1] + 24);
    uint64_t v0 = v13[3];
  }
  _Block_object_dispose(&v12, 8);
  if (!v0)
  {
    uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *libarchiveLibrary(void)"];
    id v5 = (void *)v3;
    uint64_t v6 = (void *)v3;
    id v7 = (void *)v4;
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v4, @"_UILibArchiveSoftLinking.m", 14, @"%s", v9[0]);
    id v8 = v7;
    uint64_t v0 = (uint64_t)v6;

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v9[0];
  if (v9[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void sub_185ECDC28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __libarchiveLibraryCore_block_invoke(uint64_t a1)
{
  uint64_t result = _sl_dlopen();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  libarchiveLibraryCore_frameworkLibrarCGFloat y = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getarchive_read_support_compression_allSymbolLoc_block_invoke(uint64_t a1)
{
  BOOL v2 = (void *)libarchiveLibrary();
  uint64_t result = dlsym(v2, "archive_read_support_compression_all");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getarchive_read_support_compression_allSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getarchive_read_support_format_allSymbolLoc_block_invoke(uint64_t a1)
{
  BOOL v2 = (void *)libarchiveLibrary();
  uint64_t result = dlsym(v2, "archive_read_support_format_all");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getarchive_read_support_format_allSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getarchive_read_open_filenameSymbolLoc_block_invoke(uint64_t a1)
{
  BOOL v2 = (void *)libarchiveLibrary();
  uint64_t result = dlsym(v2, "archive_read_open_filename");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getarchive_read_open_filenameSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getarchive_read_closeSymbolLoc_block_invoke(uint64_t a1)
{
  BOOL v2 = (void *)libarchiveLibrary();
  uint64_t result = dlsym(v2, "archive_read_close");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getarchive_read_closeSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getarchive_read_finishSymbolLoc_block_invoke(uint64_t a1)
{
  BOOL v2 = (void *)libarchiveLibrary();
  uint64_t result = dlsym(v2, "archive_read_finish");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getarchive_read_finishSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getarchive_format_nameSymbolLoc_block_invoke(uint64_t a1)
{
  BOOL v2 = (void *)libarchiveLibrary();
  uint64_t result = dlsym(v2, "archive_format_name");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getarchive_format_nameSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getarchive_formatSymbolLoc_block_invoke(uint64_t a1)
{
  BOOL v2 = (void *)libarchiveLibrary();
  uint64_t result = dlsym(v2, "archive_format");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getarchive_formatSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getarchive_read_next_headerSymbolLoc_block_invoke(uint64_t a1)
{
  BOOL v2 = (void *)libarchiveLibrary();
  uint64_t result = dlsym(v2, "archive_read_next_header");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getarchive_read_next_headerSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getarchive_entry_pathnameSymbolLoc_block_invoke(uint64_t a1)
{
  BOOL v2 = (void *)libarchiveLibrary();
  uint64_t result = dlsym(v2, "archive_entry_pathname");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getarchive_entry_pathnameSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getarchive_entry_filetypeSymbolLoc_block_invoke(uint64_t a1)
{
  BOOL v2 = (void *)libarchiveLibrary();
  uint64_t result = dlsym(v2, "archive_entry_filetype");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getarchive_entry_filetypeSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getarchive_entry_size_is_setSymbolLoc_block_invoke(uint64_t a1)
{
  BOOL v2 = (void *)libarchiveLibrary();
  uint64_t result = dlsym(v2, "archive_entry_size_is_set");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getarchive_entry_size_is_setSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getarchive_entry_sizeSymbolLoc_block_invoke(uint64_t a1)
{
  BOOL v2 = (void *)libarchiveLibrary();
  uint64_t result = dlsym(v2, "archive_entry_size");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getarchive_entry_sizeSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getarchive_write_disk_newSymbolLoc_block_invoke(uint64_t a1)
{
  BOOL v2 = (void *)libarchiveLibrary();
  uint64_t result = dlsym(v2, "archive_write_disk_new");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getarchive_write_disk_newSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getarchive_write_disk_set_standard_lookupSymbolLoc_block_invoke(uint64_t a1)
{
  BOOL v2 = (void *)libarchiveLibrary();
  uint64_t result = dlsym(v2, "archive_write_disk_set_standard_lookup");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getarchive_write_disk_set_standard_lookupSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getarchive_write_disk_set_optionsSymbolLoc_block_invoke(uint64_t a1)
{
  BOOL v2 = (void *)libarchiveLibrary();
  uint64_t result = dlsym(v2, "archive_write_disk_set_options");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getarchive_write_disk_set_optionsSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getarchive_write_closeSymbolLoc_block_invoke(uint64_t a1)
{
  BOOL v2 = (void *)libarchiveLibrary();
  uint64_t result = dlsym(v2, "archive_write_close");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getarchive_write_closeSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getarchive_write_finishSymbolLoc_block_invoke(uint64_t a1)
{
  BOOL v2 = (void *)libarchiveLibrary();
  uint64_t result = dlsym(v2, "archive_write_finish");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getarchive_write_finishSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getarchive_write_headerSymbolLoc_block_invoke(uint64_t a1)
{
  BOOL v2 = (void *)libarchiveLibrary();
  uint64_t result = dlsym(v2, "archive_write_header");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getarchive_write_headerSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getarchive_write_finish_entrySymbolLoc_block_invoke(uint64_t a1)
{
  BOOL v2 = (void *)libarchiveLibrary();
  uint64_t result = dlsym(v2, "archive_write_finish_entry");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getarchive_write_finish_entrySymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getarchive_entry_cloneSymbolLoc_block_invoke(uint64_t a1)
{
  BOOL v2 = (void *)libarchiveLibrary();
  uint64_t result = dlsym(v2, "archive_entry_clone");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getarchive_entry_cloneSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getarchive_entry_freeSymbolLoc_block_invoke(uint64_t a1)
{
  BOOL v2 = (void *)libarchiveLibrary();
  uint64_t result = dlsym(v2, "archive_entry_free");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getarchive_entry_freeSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getarchive_entry_set_pathnameSymbolLoc_block_invoke(uint64_t a1)
{
  BOOL v2 = (void *)libarchiveLibrary();
  uint64_t result = dlsym(v2, "archive_entry_set_pathname");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getarchive_entry_set_pathnameSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getarchive_read_data_blockSymbolLoc_block_invoke(uint64_t a1)
{
  BOOL v2 = (void *)libarchiveLibrary();
  uint64_t result = dlsym(v2, "archive_read_data_block");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getarchive_read_data_blockSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getarchive_write_data_blockSymbolLoc_block_invoke(uint64_t a1)
{
  BOOL v2 = (void *)libarchiveLibrary();
  uint64_t result = dlsym(v2, "archive_write_data_block");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getarchive_write_data_blockSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getarchive_error_stringSymbolLoc_block_invoke(uint64_t a1)
{
  BOOL v2 = (void *)libarchiveLibrary();
  uint64_t result = dlsym(v2, "archive_error_string");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getarchive_error_stringSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_185ECFAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

void sub_185ED02F8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_185ED076C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_185ED1900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_185ED2B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
}

id _UIDocumentLog()
{
  if (qword_1EB2602D8 != -1) {
    dispatch_once(&qword_1EB2602D8, &__block_literal_global_161);
  }
  uint64_t v0 = (void *)_MergedGlobals_1020;
  return v0;
}

void sub_185ED6910(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_185ED6D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  objc_sync_exit(v14);
  _Unwind_Resume(a1);
}

void sub_185ED6E88(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_185ED6FC0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_185ED707C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_185ED7110(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_185ED7340(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void _UIDocumentSetEditingDisabled(void *a1, int a2, int a3)
{
  id v5 = a1;
  objc_sync_enter(v5);
  __int16 v6 = v5[96];
  int v7 = v6 & 0x180;
  int v8 = v7;
  if (a3)
  {
    if ((((v6 & 0x80) == 0) ^ a2)) {
      goto LABEL_9;
    }
    __int16 v9 = -129;
    __int16 v10 = 128;
  }
  else
  {
    if ((((v6 & 0x100) == 0) ^ a2)) {
      goto LABEL_9;
    }
    __int16 v9 = -257;
    __int16 v10 = 256;
  }
  if (!a2) {
    __int16 v10 = 0;
  }
  __int16 v11 = v6 & v9 | v10;
  v5[96] = v11;
  int v8 = v11 & 0x180;
LABEL_9:
  BOOL v12 = v7 != 0;
  objc_sync_exit(v5);
  if (v12 != (v8 != 0))
  {
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = ___UIDocumentSetEditingDisabled_block_invoke;
    v13[3] = &unk_1E52D9FC0;
    BOOL v15 = v8 != 0;
    uint64_t v14 = v5;
    [v14 _performBlockSynchronouslyOnMainThread:v13];
  }
}

void sub_185ED76E4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_185ED7C08(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_185ED7FDC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_185ED8130(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_185ED8230(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_185ED8C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185ED9BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185EDA6DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_185EDBB74(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_185EDCD5C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_185EDD0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185EDDEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_185EDE5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FileProviderLibraryCore()
{
  if (!FileProviderLibraryCore_frameworkLibrary_0) {
    FileProviderLibraryCore_frameworkLibrary_0 = _sl_dlopen();
  }
  return FileProviderLibraryCore_frameworkLibrary_0;
}

uint64_t __FileProviderLibraryCore_block_invoke_1()
{
  uint64_t result = _sl_dlopen();
  FileProviderLibraryCore_frameworkLibrary_0 = result;
  return result;
}

void *__getFPUpdateLastUsedDateSymbolLoc_block_invoke(uint64_t a1)
{
  BOOL v2 = FileProviderLibrary_0();
  uint64_t result = dlsym(v2, "FPUpdateLastUsedDate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getFPUpdateLastUsedDateSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *FileProviderLibrary_0()
{
  uint64_t v0 = FileProviderLibraryCore();
  if (v0) {
    return (void *)v0;
  }
  uint64_t v1 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v3 = [NSString stringWithUTF8String:"void *FileProviderLibrary(void)"];
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDocument.m", 54, @"%s", 0);

  __break(1u);
  free(v4);
  return v1;
}

void *__getFPCreateBookmarkableStringFromDocumentURLSymbolLoc_block_invoke(uint64_t a1)
{
  BOOL v2 = FileProviderLibrary_0();
  uint64_t result = dlsym(v2, "FPCreateBookmarkableStringFromDocumentURL");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getFPCreateBookmarkableStringFromDocumentURLSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                           + 24);
  return result;
}

void *__getFPCreateDocumentURLFromBookmarkableStringSymbolLoc_block_invoke(uint64_t a1)
{
  BOOL v2 = FileProviderLibrary_0();
  uint64_t result = dlsym(v2, "FPCreateDocumentURLFromBookmarkableString");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getFPCreateDocumentURLFromBookmarkableStringSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                           + 24);
  return result;
}

void sub_185EE0C24(_Unwind_Exception *a1)
{
}

void sub_185EE0C44(void *a1)
{
}

void sub_185EE0E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185EE10B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v26 - 104), 8);
  _Unwind_Resume(a1);
}

void sub_185EE13B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_185EE161C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_185EE1FA4(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x208], 8);
  _Block_object_dispose(&STACK[0x228], 8);
  _Block_object_dispose(&STACK[0x248], 8);
  _Block_object_dispose(&STACK[0x268], 8);
  _Block_object_dispose(&STACK[0x288], 8);
  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_185EE259C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_185EE275C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_185EE2A44(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_185EE2FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185EE323C(_Unwind_Exception *a1)
{
}

void sub_185EE325C(void *a1)
{
}

void sub_185EE326C(void *a1)
{
}

void _UIShimSetIsContentManaged(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (objc_opt_respondsToSelector()) {
    [v3 setIsContentManaged:a2];
  }
  else {
    [v3 setSourceIsManaged:a2];
  }
}

void _UIShimSetUnderbarIsContentManaged(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (objc_opt_respondsToSelector()) {
    [v3 _setIsContentManaged:a2];
  }
  else {
    [v3 _setSourceIsManaged:a2];
  }
}

void sub_185EE51BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  objc_destroyWeak(v24);
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)(v25 - 104));
  _Unwind_Resume(a1);
}

BOOL _UIKeyboardArbiterCommunicationPermittedForUserInterfaceIdiom(uint64_t a1)
{
  return a1 != 4 && (a1 & 0xFFFFFFFFFFFFFFFELL) != 2;
}

void sub_185EE9070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id *location, id *a14)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(location);
  objc_destroyWeak(a14);
  objc_destroyWeak((id *)(v15 - 112));
  _Unwind_Resume(a1);
}

void sub_185EE9398(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_185EE9798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _UISearchSuggestionNumberOfSuggestionsFromGroups(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v2 = [v1 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)v10;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v1);
        }
        int v7 = [*(id *)(*((void *)&v9 + 1) + 8 * i) suggestionItems];
        v4 += [v7 count];
      }
      uint64_t v3 = [v1 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v3);
  }
  else
  {
    uint64_t v4 = 0;
  }

  return v4;
}

uint64_t _isDragInteractionGestureRecognizer(void *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  if (qword_1EB260348 != -1) {
    dispatch_once(&qword_1EB260348, &__block_literal_global_165);
  }
  id v2 = (id)_MergedGlobals_1023;
  uint64_t v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v8;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v8 != v4) {
          objc_enumerationMutation(v2);
        }
        if (objc_opt_isKindOfClass())
        {
          uint64_t v3 = 1;
          goto LABEL_13;
        }
      }
      uint64_t v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
      if (v3) {
        continue;
      }
      break;
    }
  }
LABEL_13:

  return v3;
}

void ___dragInteractionGestureRecognizerClasses_block_invoke()
{
  uint64_t v0 = (void *)MEMORY[0x1E4F1C978];
  uint64_t v1 = objc_opt_class();
  uint64_t v2 = objc_opt_class();
  uint64_t v3 = objc_msgSend(v0, "arrayWithObjects:", v1, v2, objc_opt_class(), 0);
  uint64_t v4 = (void *)_MergedGlobals_1023;
  _MergedGlobals_1023 = v3;
}

void sub_185EEECDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185EEF120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_185EF557C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185EFA288(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_185EFA374(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

id UIAssistantViewPlacement(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 assistantView];
  uint64_t v3 = v2;
  if (!v2) {
    uint64_t v2 = v1;
  }
  id v4 = v2;

  return v4;
}

void sub_185EFC7C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185EFCFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185EFE384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185EFE498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185EFE5AC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  if (a2 == 1)
  {
    id v12 = objc_begin_catch(a1);
    uint64_t v13 = [v8 floatAssistantViewLayout];
    uint64_t v14 = *(void **)&v8[v9];
    *(void *)&v8[v9] = v13;

    objc_end_catch();
    JUMPOUT(0x185EFE584);
  }
  _Unwind_Resume(a1);
}

void sub_185EFE770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185EFE884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185EFE998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185EFEAAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185EFF224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t UIGetAssistantBarStyleFromPlacement(void *a1)
{
  id v1 = a1;
  if ([v1 isCompactAssistantView])
  {
    if ([v1 isMemberOfClass:objc_opt_class()])
    {
      uint64_t v2 = 3;
    }
    else if ([v1 isMemberOfClass:objc_opt_class()])
    {
      uint64_t v2 = 4;
    }
    else
    {
      uint64_t v2 = 2;
    }
  }
  else
  {
    uint64_t v2 = [v1 isFloatingAssistantView];
  }

  return v2;
}

BOOL UIShouldUseCustomBackground(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 _detachedBackgroundColor];
  if (v2)
  {
    BOOL v3 = 1;
  }
  else
  {
    id v4 = [v1 _detachedBackgroundEffect];
    BOOL v3 = v4 != 0;
  }
  return v3;
}

void __getTUISystemInputAssistantViewClass_block_invoke(uint64_t a1)
{
  TextInputUILibrary_1();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("TUISystemInputAssistantView");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getTUISystemInputAssistantViewClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    BOOL v3 = [NSString stringWithUTF8String:"Class getTUISystemInputAssistantViewClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UISystemInputAssistantViewController.m", 96, @"Unable to find class %s", "TUISystemInputAssistantView");

    __break(1u);
  }
}

void TextInputUILibrary_1()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!TextInputUILibraryCore_frameworkLibrary_1)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __TextInputUILibraryCore_block_invoke_4;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E52EC0C8;
    uint64_t v5 = 0;
    TextInputUILibraryCore_frameworkLibrary_1 = _sl_dlopen();
  }
  if (!TextInputUILibraryCore_frameworkLibrary_1)
  {
    id v1 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v2 = [NSString stringWithUTF8String:"void *TextInputUILibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"UISystemInputAssistantViewController.m", 95, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __TextInputUILibraryCore_block_invoke_4()
{
  uint64_t result = _sl_dlopen();
  TextInputUILibraryCore_frameworkLibrary_1 = result;
  return result;
}

void __getTUISystemInputAssistantLayoutStandardClass_block_invoke(uint64_t a1)
{
  TextInputUILibrary_1();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("TUISystemInputAssistantLayoutStandard");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getTUISystemInputAssistantLayoutStandardClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    BOOL v3 = [NSString stringWithUTF8String:"Class getTUISystemInputAssistantLayoutStandardClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UISystemInputAssistantViewController.m", 97, @"Unable to find class %s", "TUISystemInputAssistantLayoutStandard");

    __break(1u);
  }
}

void __getTUISystemInputAssistantLayoutFloatClass_block_invoke(uint64_t a1)
{
  TextInputUILibrary_1();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("TUISystemInputAssistantLayoutFloat");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getTUISystemInputAssistantLayoutFloatClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    BOOL v3 = [NSString stringWithUTF8String:"Class getTUISystemInputAssistantLayoutFloatClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UISystemInputAssistantViewController.m", 99, @"Unable to find class %s", "TUISystemInputAssistantLayoutFloat");

    __break(1u);
  }
}

void __getTUISystemInputAssistantLayoutCompactClass_block_invoke(uint64_t a1)
{
  TextInputUILibrary_1();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("TUISystemInputAssistantLayoutCompact");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getTUISystemInputAssistantLayoutCompactClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    BOOL v3 = [NSString stringWithUTF8String:"Class getTUISystemInputAssistantLayoutCompactClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UISystemInputAssistantViewController.m", 100, @"Unable to find class %s", "TUISystemInputAssistantLayoutCompact");

    __break(1u);
  }
}

void __getTUISystemInputAssistantLayoutSplitClass_block_invoke(uint64_t a1)
{
  TextInputUILibrary_1();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("TUISystemInputAssistantLayoutSplit");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getTUISystemInputAssistantLayoutSplitClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    BOOL v3 = [NSString stringWithUTF8String:"Class getTUISystemInputAssistantLayoutSplitClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UISystemInputAssistantViewController.m", 98, @"Unable to find class %s", "TUISystemInputAssistantLayoutSplit");

    __break(1u);
  }
}

void __getTUISystemInputAssistantStyleStandardClass_block_invoke(uint64_t a1)
{
  TextInputUILibrary_1();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("TUISystemInputAssistantStyleStandard");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getTUISystemInputAssistantStyleStandardClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    BOOL v3 = [NSString stringWithUTF8String:"Class getTUISystemInputAssistantStyleStandardClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UISystemInputAssistantViewController.m", 102, @"Unable to find class %s", "TUISystemInputAssistantStyleStandard");

    __break(1u);
  }
}

void __getTUISystemInputAssistantStyleFloatClass_block_invoke(uint64_t a1)
{
  TextInputUILibrary_1();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("TUISystemInputAssistantStyleFloat");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getTUISystemInputAssistantStyleFloatClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    BOOL v3 = [NSString stringWithUTF8String:"Class getTUISystemInputAssistantStyleFloatClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UISystemInputAssistantViewController.m", 103, @"Unable to find class %s", "TUISystemInputAssistantStyleFloat");

    __break(1u);
  }
}

void __getTUISystemInputAssistantStyleCompactClass_block_invoke(uint64_t a1)
{
  TextInputUILibrary_1();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("TUISystemInputAssistantStyleCompact");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getTUISystemInputAssistantStyleCompactClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    BOOL v3 = [NSString stringWithUTF8String:"Class getTUISystemInputAssistantStyleCompactClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UISystemInputAssistantViewController.m", 104, @"Unable to find class %s", "TUISystemInputAssistantStyleCompact");

    __break(1u);
  }
}

void __getTUIEmojiSearchInputViewControllerClass_block_invoke_0(uint64_t a1)
{
  TextInputUILibrary_1();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("TUIEmojiSearchInputViewController");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getTUIEmojiSearchInputViewControllerClass_softClass_0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    BOOL v3 = [NSString stringWithUTF8String:"Class getTUIEmojiSearchInputViewControllerClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UISystemInputAssistantViewController.m", 101, @"Unable to find class %s", "TUIEmojiSearchInputViewController");

    __break(1u);
  }
}

id _UIUpdateInputGroupDebugDescription(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (!a2) {
    uint64_t v2 = mach_absolute_time();
  }
  long long v4 = [MEMORY[0x1E4F28E78] stringWithFormat:@"Input Group, signals=0x%x (suspended=%u, signaled=0x%x), revision=%llu, sets:", *a1, a1[2], a1[1], *((void *)a1 + 2)];
  for (uint64_t i = *((void *)a1 + 5); i; uint64_t i = *(void *)(i + 80))
  {
    uint64_t v6 = _UIUpdateInputSetDebugDescription(i, v2);
    long long v7 = _UIUpdateDebugDescriptionIndented(v6, @"\n  - ", @"    ");
    [v4 appendString:v7];
  }
  return v4;
}

id _UIPreviewParametersDefaultBackgroundColor()
{
  uint64_t v0 = +[UIDevice currentDevice];
  unint64_t v1 = [v0 userInterfaceIdiom];

  if (v1 > 6 || ((1 << v1) & 0x64) == 0) {
    +[UIColor systemBackgroundColor];
  }
  else {
  BOOL v3 = +[UIColor clearColor];
  }
  return v3;
}

id _UIPreviewParametersGenerateTextPlatter(void *a1, double a2, double a3, double a4, double a5, double a6)
{
  uint64_t v162 = *MEMORY[0x1E4F143B8];
  id v10 = a1;
  if ([v10 count])
  {
    uint64_t v153 = 0;
    if (CGSNewEmptyRegion())
    {
      _UIPreviewParametersGenerateTextPlatterFallback(v10, a2, a3, a4, a5, a6);
      id v11 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      long long v151 = 0u;
      long long v152 = 0u;
      long long v149 = 0u;
      long long v150 = 0u;
      id v12 = v10;
      uint64_t v13 = [v12 countByEnumeratingWithState:&v149 objects:v159 count:16];
      if (v13)
      {
        uint64_t v14 = v13;
        uint64_t v15 = *(void *)v150;
        while (2)
        {
          for (uint64_t i = 0; i != v14; ++i)
          {
            if (*(void *)v150 != v15) {
              objc_enumerationMutation(v12);
            }
            uint64_t v17 = *(void **)(*((void *)&v149 + 1) + 8 * i);
            long long v160 = 0u;
            long long v161 = 0u;
            [v17 CGRectValue];
            *(double *)&long long v160 = a3 + v18;
            *((double *)&v160 + 1) = a2 + v19;
            *(double *)&long long v161 = v20 - (a3 + a5);
            *((double *)&v161 + 1) = v21 - (a2 + a4);
            *(void *)&long long v154 = 0;
            uint64_t v148 = 0;
            if (CGSNewRegionWithRect() || CGSUnionRegion())
            {
              CGSReleaseRegion();
              _UIPreviewParametersGenerateTextPlatterFallback(v12, a2, a3, a4, a5, a6);
              id v11 = (id)objc_claimAutoreleasedReturnValue();

              goto LABEL_95;
            }
            CGSReleaseRegion();
            CGSReleaseRegion();
            uint64_t v153 = v148;
          }
          uint64_t v14 = [v12 countByEnumeratingWithState:&v149 objects:v159 count:16];
          if (v14) {
            continue;
          }
          break;
        }
      }
      id v127 = v12;

      unint64_t v22 = 0x1E4F1C000uLL;
      uint64_t v23 = [MEMORY[0x1E4F1CA48] array];
      int v24 = [MEMORY[0x1E4F1CA48] array];
      CGSRegionPathEnumerator();
      while (1)
      {
        long long v160 = 0uLL;
        int v25 = CGSNextPoint();
        if (v25 <= 0)
        {
          int v26 = v25;
          if ([v24 count])
          {
            long long v27 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithArray:", v24, v127);
            [v23 addObject:v27];

            [v24 removeAllObjects];
          }
          if (!v26) {
            break;
          }
        }
        uint64_t v28 = objc_msgSend(MEMORY[0x1E4F29238], "valueWithCGPoint:", v160, v127);
        [v24 addObject:v28];
      }
      double v128 = a2;
      double v129 = a3;
      double v130 = a4;
      double v131 = a5;
      CGSReleaseRegionEnumerator();

      CGSReleaseRegion();
      __int16 v136 = +[UIBezierPath bezierPath];
      long long v144 = 0u;
      long long v145 = 0u;
      long long v146 = 0u;
      long long v147 = 0u;
      id obj = v23;
      uint64_t v135 = [obj countByEnumeratingWithState:&v144 objects:v158 count:16];
      if (v135)
      {
        uint64_t v134 = *(void *)v145;
        double v139 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
        double v140 = *MEMORY[0x1E4F1DB20];
        double v137 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
        double v138 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
        double v133 = a6 * 0.75;
        while (2)
        {
          uint64_t v29 = 0;
          do
          {
            if (*(void *)v145 != v134) {
              objc_enumerationMutation(obj);
            }
            uint64_t v141 = v29;
            id v30 = *(id *)(*((void *)&v144 + 1) + 8 * v29);
            long long v154 = 0u;
            long long v155 = 0u;
            long long v156 = 0u;
            long long v157 = 0u;
            uint64_t v31 = [v30 countByEnumeratingWithState:&v154 objects:&v160 count:16];
            CGFloat height = v137;
            CGFloat width = v138;
            CGFloat y = v139;
            CGFloat x = v140;
            if (v31)
            {
              uint64_t v36 = v31;
              uint64_t v37 = *(void *)v155;
              CGFloat height = v137;
              CGFloat width = v138;
              CGFloat y = v139;
              CGFloat x = v140;
              do
              {
                for (uint64_t j = 0; j != v36; ++j)
                {
                  if (*(void *)v155 != v37) {
                    objc_enumerationMutation(v30);
                  }
                  objc_msgSend(*(id *)(*((void *)&v154 + 1) + 8 * j), "CGPointValue", v127, *(void *)&v128, *(void *)&v129, *(void *)&v130, *(void *)&v131);
                  v170.origin.CGFloat x = v39;
                  v170.origin.CGFloat y = v40;
                  v170.size.CGFloat width = 0.0;
                  v170.size.CGFloat height = 0.0;
                  v164.origin.CGFloat x = x;
                  v164.origin.CGFloat y = y;
                  v164.size.CGFloat width = width;
                  v164.size.CGFloat height = height;
                  CGRect v165 = CGRectUnion(v164, v170);
                  CGFloat x = v165.origin.x;
                  CGFloat y = v165.origin.y;
                  CGFloat width = v165.size.width;
                  CGFloat height = v165.size.height;
                }
                uint64_t v36 = [v30 countByEnumeratingWithState:&v154 objects:&v160 count:16];
              }
              while (v36);
            }
            v166.origin.CGFloat x = x;
            v166.origin.CGFloat y = y;
            v166.size.CGFloat width = width;
            v166.size.CGFloat height = height;
            double MinX = CGRectGetMinX(v166);
            v167.origin.CGFloat x = x;
            v167.origin.CGFloat y = y;
            v167.size.CGFloat width = width;
            v167.size.CGFloat height = height;
            double MaxX = CGRectGetMaxX(v167);
            v168.origin.CGFloat x = x;
            v168.origin.CGFloat y = y;
            v168.size.CGFloat width = width;
            v168.size.CGFloat height = height;
            double MinY = CGRectGetMinY(v168);
            v169.origin.CGFloat x = x;
            v169.origin.CGFloat y = y;
            v169.size.CGFloat width = width;
            v169.size.CGFloat height = height;
            double MaxY = CGRectGetMaxY(v169);
            uint64_t v44 = [v30 count];
            uint64_t v45 = [*(id *)(v22 + 2632) arrayWithCapacity:v44];
            if (v44)
            {
              for (uint64_t k = 0; k != v44; ++k)
              {
                long long v47 = objc_msgSend(v30, "objectAtIndexedSubscript:", k, v127);
                [v47 CGPointValue];
                double v49 = v48;
                double v51 = v50;

                double v52 = MinX;
                if (v49 > v133 + MinX)
                {
                  double v52 = v49;
                  if (v49 >= MaxX - v133) {
                    double v52 = MaxX;
                  }
                }
                if (v51 >= MaxY - v133) {
                  double v53 = MaxY;
                }
                else {
                  double v53 = v51;
                }
                if (v51 <= v133 + MinY) {
                  double v53 = MinY;
                }
                long long v54 = objc_msgSend(MEMORY[0x1E4F29238], "valueWithCGPoint:", v52, v53);
                [v45 addObject:v54];
              }
            }

            id v55 = v45;
            uint64_t v56 = [v55 count];
            uint64_t v57 = [*(id *)(v22 + 2632) array];
            id v58 = v136;
            if (v56)
            {
              uint64_t v59 = 0;
              for (uint64_t m = 0; m != v56; ++m)
              {
                if (v59) {
                  uint64_t v61 = m - 1;
                }
                else {
                  uint64_t v61 = v56 - 1;
                }
                uint64_t v62 = objc_msgSend(v55, "objectAtIndexedSubscript:", v61, v127);
                [v62 CGPointValue];
                double v64 = v63;
                double v66 = v65;

                double v67 = [v55 objectAtIndexedSubscript:m];
                [v67 CGPointValue];
                double v69 = v68;
                double v71 = v70;

                if (m == v56 - 1) {
                  uint64_t v72 = 0;
                }
                else {
                  uint64_t v72 = m + 1;
                }
                uint64_t v73 = [v55 objectAtIndexedSubscript:v72];
                [v73 CGPointValue];
                double v75 = v74;
                double v77 = v76;

                if (vabdd_f64((v69 - v64) * (v77 - v66), (v71 - v66) * (v75 - v64)) >= 0.001)
                {
                  uint64_t v78 = objc_msgSend(MEMORY[0x1E4F29238], "valueWithCGPoint:", v69, v71);
                  [v57 addObject:v78];
                }
                --v59;
              }
            }

            id v79 = v136;
            id v80 = v57;
            unint64_t v81 = [v80 count];
            if (v81 <= 3)
            {

              _UIPreviewParametersGenerateTextPlatterFallback(v127, v128, v129, v130, v131, a6);
              id v11 = (id)objc_claimAutoreleasedReturnValue();

              v125 = obj;
              goto LABEL_94;
            }
            unint64_t v82 = v81;
            uint64_t v83 = 0;
            uint64_t v84 = 0;
            unint64_t v85 = v81 - 1;
            do
            {
              if (v83) {
                unint64_t v86 = v84 - 1;
              }
              else {
                unint64_t v86 = v85;
              }
              double v87 = objc_msgSend(v80, "objectAtIndexedSubscript:", v86, v127);
              [v87 CGPointValue];
              double v89 = v88;
              double v91 = v90;

              double v92 = [v80 objectAtIndexedSubscript:v84];
              [v92 CGPointValue];
              double v94 = v93;
              double v96 = v95;

              if (v84 == v85) {
                uint64_t v97 = 0;
              }
              else {
                uint64_t v97 = v84 + 1;
              }
              long long v98 = [v80 objectAtIndexedSubscript:v97];
              [v98 CGPointValue];
              double v100 = v99;
              double v102 = v101;

              double v103 = v94 - v89;
              double v104 = (v94 - v89) * (v102 - v91);
              double v105 = v96 - v91;
              double v106 = v104 - v105 * (v100 - v89);
              unint64_t v107 = llround(atan2(v105, v94 - v89) / 1.57079633) + 4;
              unint64_t v108 = v107 & 3;
              uint64_t v110 = -(uint64_t)v107;
              BOOL v109 = v110 < 0;
              uint64_t v111 = v110 & 3;
              if (v109) {
                unint64_t v112 = v108;
              }
              else {
                unint64_t v112 = -v111;
              }
              double v113 = a6;
              if (v106 >= 0.0)
              {
                CGRect v114 = &unk_186B94E88;
              }
              else
              {
                double v113 = a6 * 0.5;
                CGRect v114 = &unk_186B94EA8;
              }
              uint64_t v115 = v114[v112];
              double v116 = v100 - v94;
              double v117 = v102 - v96;
              double v118 = -v103;
              if (v103 >= 0.0) {
                double v118 = v94 - v89;
              }
              if (v116 < 0.0) {
                double v116 = -v116;
              }
              if (v118 >= v116) {
                double v116 = v118;
              }
              double v119 = -v105;
              if (v105 >= 0.0) {
                double v119 = v105;
              }
              if (v117 < 0.0) {
                double v117 = -v117;
              }
              if (v119 >= v117) {
                double v117 = v119;
              }
              if (v116 >= v117) {
                double v116 = v117;
              }
              double v120 = v116 * 0.5;
              if (v113 >= v120) {
                double v121 = v120;
              }
              else {
                double v121 = v113;
              }
              long double v122 = v121 * 1.528665 / hypot(v103, v105);
              double v123 = v94 - v103 * v122;
              double v124 = v96 - v105 * v122;
              if (v83) {
                objc_msgSend(v79, "addLineToPoint:", v123, v124);
              }
              else {
                objc_msgSend(v79, "moveToPoint:", v123, v124);
              }
              ++v84;
              objc_msgSend(v79, "_addRoundedCornerWithTrueCorner:radius:corner:clockwise:", v115, v106 < 0.0, v94, v96, v121, v121);
              --v83;
            }
            while (v84 != v82);
            [v79 closePath];

            uint64_t v29 = v141 + 1;
            unint64_t v22 = 0x1E4F1C000;
          }
          while (v141 + 1 != v135);
          uint64_t v135 = [obj countByEnumeratingWithState:&v144 objects:v158 count:16];
          if (v135) {
            continue;
          }
          break;
        }
      }
      v125 = obj;

      id v58 = v136;
      id v11 = v136;
LABEL_94:
    }
  }
  else
  {
    id v11 = 0;
  }
LABEL_95:

  return v11;
}

id _UIPreviewParametersGenerateTextPlatterFallback(void *a1, double a2, double a3, double a4, double a5, double a6)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v11 = a1;
  id v12 = +[UIBezierPath bezierPath];
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  id v13 = v11;
  uint64_t v14 = [v13 countByEnumeratingWithState:&v26 objects:v30 count:16];
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = *(void *)v27;
    double v17 = a3 + a5;
    double v18 = a2 + a4;
    do
    {
      for (uint64_t i = 0; i != v15; ++i)
      {
        if (*(void *)v27 != v16) {
          objc_enumerationMutation(v13);
        }
        objc_msgSend(*(id *)(*((void *)&v26 + 1) + 8 * i), "CGRectValue", (void)v26);
        int v24 = +[UIBezierPath bezierPathWithRoundedRect:cornerRadius:](UIBezierPath, "bezierPathWithRoundedRect:cornerRadius:", a3 + v20, a2 + v21, v22 - v17, v23 - v18, a6);
        [v12 appendPath:v24];
      }
      uint64_t v15 = [v13 countByEnumeratingWithState:&v26 objects:v30 count:16];
    }
    while (v15);
  }

  return v12;
}

void _markItemsForUpdate(void *a1, void *a2)
{
  id v5 = a1;
  id v3 = a2;
  if ([v5 count])
  {
    if (qword_1EB260380 != -1) {
      dispatch_once(&qword_1EB260380, &__block_literal_global_263);
    }
    if ((_MergedGlobals_1025 & 1) == 0)
    {
      _MergedGlobals_1025 = 1;
      [(id)UIApp _performBlockAfterCATransactionCommits:&__block_literal_global_265];
    }
    long long v4 = [(id)qword_1EB260378 objectForKey:v3];
    if (!v4)
    {
      long long v4 = objc_msgSend(MEMORY[0x1E4F1CA80], "setWithCapacity:", objc_msgSend(v5, "count"));
      [(id)qword_1EB260378 setObject:v4 forKey:v3];
    }
    [v4 addObjectsFromArray:v5];
  }
}

uint64_t _hasItemsConformingToTypeIdentifiers(void *a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v5 = v3;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v22 objects:v27 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v23;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v23 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = [*(id *)(*((void *)&v22 + 1) + 8 * i) itemProvider];
        long long v18 = 0u;
        long long v19 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        id v11 = v4;
        uint64_t v12 = [v11 countByEnumeratingWithState:&v18 objects:v26 count:16];
        if (v12)
        {
          uint64_t v13 = v12;
          uint64_t v14 = *(void *)v19;
          while (2)
          {
            for (uint64_t j = 0; j != v13; ++j)
            {
              if (*(void *)v19 != v14) {
                objc_enumerationMutation(v11);
              }
              if ([v10 hasRepresentationConformingToTypeIdentifier:*(void *)(*((void *)&v18 + 1) + 8 * j) fileOptions:0])
              {

                uint64_t v16 = 1;
                goto LABEL_19;
              }
            }
            uint64_t v13 = [v11 countByEnumeratingWithState:&v18 objects:v26 count:16];
            if (v13) {
              continue;
            }
            break;
          }
        }
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v22 objects:v27 count:16];
      uint64_t v16 = 0;
    }
    while (v7);
  }
  else
  {
    uint64_t v16 = 0;
  }
LABEL_19:

  return v16;
}

uint64_t _canLoadObjectsOfClass(void *a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v3 = a1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v13;
    while (2)
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = objc_msgSend(*(id *)(*((void *)&v12 + 1) + 8 * v7), "itemProvider", (void)v12);
        char v9 = [v8 canLoadObjectOfClass:a2];

        if (v9)
        {
          uint64_t v10 = 1;
          goto LABEL_11;
        }
        ++v7;
      }
      while (v5 != v7);
      uint64_t v5 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
  uint64_t v10 = 0;
LABEL_11:

  return v10;
}

void sub_185F0A3FC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id arrayOfItemsFromDictionaryOfItemsByIndex(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v1, "count"));
  id v3 = [v1 allKeys];
  uint64_t v4 = [v3 sortedArrayUsingSelector:sel_compare_];

  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v5 = v4;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v13 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = objc_msgSend(v1, "objectForKey:", *(void *)(*((void *)&v12 + 1) + 8 * i), (void)v12);
        [v2 addObject:v10];
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v7);
  }

  return v2;
}

void ___markItemsForUpdate_block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F28E10] strongToStrongObjectsMapTable];
  id v1 = (void *)qword_1EB260378;
  qword_1EB260378 = v0;
}

void ___enqueueItemsUpdate_block_invoke()
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = [MEMORY[0x1E4F1CA48] array];
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v1 = [(id)qword_1EB260378 keyEnumerator];
  uint64_t v2 = [v1 countByEnumeratingWithState:&v19 objects:v25 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v20;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v20 != v4) {
          objc_enumerationMutation(v1);
        }
        uint64_t v6 = *(void **)(*((void *)&v19 + 1) + 8 * i);
        if ([v6 _allowsItemsToUpdate])
        {
          id v7 = [(id)qword_1EB260378 objectForKey:v6];
          uint64_t v8 = [v6 _internalSession];
          v23[0] = MEMORY[0x1E4F143A8];
          v23[1] = 3221225472;
          v23[2] = ___updateItems_block_invoke;
          v23[3] = &unk_1E52EC110;
          id v24 = v7;
          id v9 = v7;
          [v8 enumerateItemsUsingBlock:v23];

          [v0 addObject:v6];
        }
      }
      uint64_t v3 = [v1 countByEnumeratingWithState:&v19 objects:v25 count:16];
    }
    while (v3);
  }

  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v10 = v0;
  uint64_t v11 = [v10 countByEnumeratingWithState:&v15 objects:v23 count:16];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)v16;
    do
    {
      for (uint64_t j = 0; j != v12; ++j)
      {
        if (*(void *)v16 != v13) {
          objc_enumerationMutation(v10);
        }
        objc_msgSend((id)qword_1EB260378, "removeObjectForKey:", *(void *)(*((void *)&v15 + 1) + 8 * j), (void)v15);
      }
      uint64_t v12 = [v10 countByEnumeratingWithState:&v15 objects:v23 count:16];
    }
    while (v12);
  }

  _MergedGlobals_1025 = 0;
}

void ___updateItems_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_msgSend(*(id *)(a1 + 32), "containsObject:")) {
    [v3 _updatePreferredPreview];
  }
}

long double DUIPreviewConvertSizeFromViewToView(void *a1, void *a2, long double a3, double a4)
{
  if (a1)
  {
    double v7 = *MEMORY[0x1E4F1DAD8];
    double v8 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
    id v9 = a2;
    id v10 = a1;
    objc_msgSend(v10, "convertPoint:toView:", v9, v7, v8);
    double v12 = v11;
    double v14 = v13;
    objc_msgSend(v10, "convertPoint:toView:", v9, (double)a3, 0.0);
    double v16 = v15;
    double v18 = v17;
    objc_msgSend(v10, "convertPoint:toView:", v9, 0.0, a4);
    double v20 = v19;
    double v22 = v21;

    a3 = hypot(v16 - v12, v18 - v14);
    hypot(v20 - v12, v22 - v14);
  }
  return a3;
}

double DUIPreviewGetRotationAngleFromViewToView(void *a1, void *a2, int a3)
{
  unint64_t v5 = a1;
  unint64_t v6 = a2;
  double v7 = 0.0;
  if (v5 | v6)
  {
    double v8 = (void *)v6;
    if (v5) {
      BOOL v9 = 1;
    }
    else {
      BOOL v9 = v6 == 0;
    }
    int v10 = !v9;
    if (!v5 || !v6)
    {
      if (v10) {
        unint64_t v5 = v6;
      }
      double v8 = [(id)v5 _window];
    }
    double v11 = [(id)v5 layer];
    double v12 = v11;
    if (a3)
    {
      double v13 = [v11 presentationLayer];

      if (v13)
      {
        uint64_t v14 = [v12 presentationLayer];

        double v12 = (void *)v14;
      }
      double v15 = [v8 layer];
      double v16 = [v15 presentationLayer];

      if (v16)
      {
        uint64_t v17 = [v15 presentationLayer];

        double v15 = (void *)v17;
      }
    }
    else
    {
      double v15 = [v8 layer];
    }
    objc_msgSend(v12, "convertPoint:toLayer:", v15, *MEMORY[0x1E4F1DAD8], *(double *)(MEMORY[0x1E4F1DAD8] + 8));
    double v19 = v18;
    double v21 = v20;
    objc_msgSend(v12, "convertPoint:toLayer:", v15, 1.0, 0.0);
    double v24 = atan2(v23 - v21, v22 - v19);
    long long v25 = [(id)v5 layer];
    int v26 = [v25 flipsHorizontalAxis];

    if (v26) {
      double v24 = v24 + 3.14159265;
    }
    long long v27 = [v8 layer];
    int v28 = [v27 flipsHorizontalAxis];

    double v29 = v24 + 3.14159265;
    if (!v28) {
      double v29 = v24;
    }
    if (v10) {
      double v7 = -v29;
    }
    else {
      double v7 = v29;
    }
  }
  return v7;
}

id _UIDragAndDropGetPlatformMetrics(uint64_t a1)
{
  if (qword_1EB260390 != -1) {
    dispatch_once(&qword_1EB260390, &__block_literal_global_170);
  }
  uint64_t v2 = (void *)_MergedGlobals_1026;
  id v3 = [NSNumber numberWithInteger:a1];
  uint64_t v4 = [v2 objectForKey:v3];

  if (!v4)
  {
    if (!_MergedGlobals_1026)
    {
      uint64_t v5 = [MEMORY[0x1E4F1CA60] dictionary];
      unint64_t v6 = (void *)_MergedGlobals_1026;
      _MergedGlobals_1026 = v5;
    }
    double v7 = +[_UIVisualStyleRegistry registryForIdiom:a1];
    [v7 visualStyleClassForStylableClass:objc_opt_class()];

    uint64_t v4 = objc_opt_new();
    double v8 = (void *)_MergedGlobals_1026;
    BOOL v9 = [NSNumber numberWithInteger:a1];
    [v8 setObject:v4 forKey:v9];
  }
  return v4;
}

id _DUINewServerSourceInterface()
{
  uint64_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1ED700A00];
  id v1 = _DUINewClientSessionSourceInterface();
  [v0 setInterface:v1 forSelector:sel_beginDragWithClientSession_configuration_reply_ argumentIndex:0 ofReply:0];

  [v0 setClass:objc_opt_class() forSelector:sel_beginDragWithClientSession_configuration_reply_ argumentIndex:1 ofReply:0];
  uint64_t v2 = _DUINewServerSessionSourceInterface();
  [v0 setInterface:v2 forSelector:sel_beginDragWithClientSession_configuration_reply_ argumentIndex:1 ofReply:1];

  return v0;
}

id _DUINewClientSessionSourceInterface()
{
  uint64_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1ED5410D8];
  setDUIClientSessionCommonProtocolMethods(v0);
  id v1 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v2 = objc_opt_class();
  id v3 = objc_msgSend(v1, "setWithObjects:", v2, objc_opt_class(), 0);
  [v0 setClasses:v3 forSelector:sel_checkCanHandOffCancelledItems_withReply_ argumentIndex:0 ofReply:0];

  uint64_t v4 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v5 = objc_opt_class();
  unint64_t v6 = objc_msgSend(v4, "setWithObjects:", v5, objc_opt_class(), 0);
  [v0 setClasses:v6 forSelector:sel_canHandOffCancelledItems_withReply_ argumentIndex:0 ofReply:0];

  [v0 setClass:objc_opt_class() forSelector:sel_canHandOffCancelledItems_withReply_ argumentIndex:1 ofReply:1];
  double v7 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v8 = objc_opt_class();
  BOOL v9 = objc_msgSend(v7, "setWithObjects:", v8, objc_opt_class(), 0);
  [v0 setClasses:v9 forSelector:sel_handOffCancelledItems_withFence_ argumentIndex:0 ofReply:0];

  return v0;
}

id _DUINewServerSessionSourceInterface()
{
  uint64_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1ED700AC0];
  id v1 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v2 = objc_opt_class();
  id v3 = objc_msgSend(v1, "setWithObjects:", v2, objc_opt_class(), 0);
  [v0 setClasses:v3 forSelector:sel_dirtySourceItems_ argumentIndex:0 ofReply:0];

  return v0;
}

uint64_t _DUINewClientSourceInterface()
{
  return [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1ED540F10];
}

id _DUINewServerDestinationInterface()
{
  uint64_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1ED700A60];
  id v1 = _DUINewClientSessionDestinationInterface();
  [v0 setInterface:v1 forSelector:sel_sawFirstDragEventWithSessionID_systemPolicy_destination_reply_ argumentIndex:2 ofReply:0];

  uint64_t v2 = _DUINewServerSessionDestinationInterface();
  [v0 setInterface:v2 forSelector:sel_sawFirstDragEventWithSessionID_systemPolicy_destination_reply_ argumentIndex:0 ofReply:1];

  id v3 = [MEMORY[0x1E4F881C8] allowedClassesForSecureCoding];
  [v0 setClasses:v3 forSelector:sel_sawFirstDragEventWithSessionID_systemPolicy_destination_reply_ argumentIndex:1 ofReply:1];

  uint64_t v4 = _DUINewClientSessionDestinationInterface();
  [v0 setInterface:v4 forSelector:sel_sawFirstDragEventWithSessionID_systemPolicy_destination_completion_ argumentIndex:2 ofReply:0];

  uint64_t v5 = _DUINewServerSessionDestinationInterface();
  [v0 setInterface:v5 forSelector:sel_sawFirstDragEventWithSessionID_systemPolicy_destination_completion_ argumentIndex:0 ofReply:1];

  unint64_t v6 = [MEMORY[0x1E4F881C8] allowedClassesForSecureCoding];
  [v0 setClasses:v6 forSelector:sel_sawFirstDragEventWithSessionID_systemPolicy_destination_completion_ argumentIndex:1 ofReply:1];

  return v0;
}

id _DUINewClientSessionDestinationInterface()
{
  uint64_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1ED5415E8];
  setDUIClientSessionCommonProtocolMethods(v0);
  id v1 = [MEMORY[0x1E4F881C8] allowedClassesForSecureCoding];
  [v0 setClasses:v1 forSelector:sel_performDropWithItemCollection_dataProviderEndpoint_visibleDroppedItems_reply_ argumentIndex:0 ofReply:0];

  [v0 setClass:objc_opt_class() forSelector:sel_performDropWithItemCollection_dataProviderEndpoint_visibleDroppedItems_reply_ argumentIndex:1 ofReply:0];
  uint64_t v2 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v3 = objc_opt_class();
  uint64_t v4 = objc_msgSend(v2, "setWithObjects:", v3, objc_opt_class(), 0);
  [v0 setClasses:v4 forSelector:sel_performDropWithItemCollection_dataProviderEndpoint_visibleDroppedItems_reply_ argumentIndex:2 ofReply:0];

  uint64_t v5 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v6 = objc_opt_class();
  double v7 = objc_msgSend(v5, "setWithObjects:", v6, objc_opt_class(), 0);
  [v0 setClasses:v7 forSelector:sel_handOffDroppedItems_withFence_ argumentIndex:0 ofReply:0];

  uint64_t v8 = [MEMORY[0x1E4F881C8] allowedClassesForSecureCoding];
  [v0 setClasses:v8 forSelector:sel_performDropWithItemCollection_dataProviderEndpoint_visibleDroppedItems_completion_ argumentIndex:0 ofReply:0];

  [v0 setClass:objc_opt_class() forSelector:sel_performDropWithItemCollection_dataProviderEndpoint_visibleDroppedItems_completion_ argumentIndex:1 ofReply:0];
  BOOL v9 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v10 = objc_opt_class();
  double v11 = objc_msgSend(v9, "setWithObjects:", v10, objc_opt_class(), 0);
  [v0 setClasses:v11 forSelector:sel_performDropWithItemCollection_dataProviderEndpoint_visibleDroppedItems_completion_ argumentIndex:2 ofReply:0];

  [v0 setClass:objc_opt_class() forSelector:sel_performDropWithItemCollection_dataProviderEndpoint_visibleDroppedItems_completion_ argumentIndex:0 ofReply:1];
  return v0;
}

id _DUINewServerSessionDestinationInterface()
{
  uint64_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1ED700B20];
  id v1 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v2 = objc_opt_class();
  uint64_t v3 = objc_msgSend(v1, "setWithObjects:", v2, objc_opt_class(), 0);
  [v0 setClasses:v3 forSelector:sel_dirtyDestinationItems_ argumentIndex:0 ofReply:0];

  uint64_t v4 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_msgSend(v4, "setWithObjects:", v5, objc_opt_class(), 0);
  [v0 setClasses:v6 forSelector:sel_requestVisibleItemsWithReply_ argumentIndex:0 ofReply:1];

  [v0 setClass:objc_opt_class() forSelector:sel_requestDropWithOperation_layerContext_ argumentIndex:1 ofReply:0];
  return v0;
}

uint64_t _DUINewClientDestinationInterface()
{
  return [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1ED541498];
}

void setDUIClientSessionCommonProtocolMethods(void *a1)
{
  id v1 = (void *)MEMORY[0x1E4F1CAD0];
  id v6 = a1;
  uint64_t v2 = objc_opt_class();
  uint64_t v3 = objc_opt_class();
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_msgSend(v1, "setWithObjects:", v2, v3, v4, objc_opt_class(), 0);
  [v6 setClasses:v5 forSelector:sel_requestDragPreviewsForIndexSet_reply_ argumentIndex:0 ofReply:1];

  [v6 setClass:objc_opt_class() forSelector:sel_updatedPresentation_ argumentIndex:0 ofReply:0];
}

uint64_t _DUINewServerSessionAccessibilityInterface()
{
  return [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1ED700B80];
}

uint64_t _DUINewClientSessionAccessibilityInterface()
{
  return [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1ED700BE0];
}

id _DUINewServerSessionSystemAppInterface()
{
  uint64_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1ED700C40];
  [v0 setClass:objc_opt_class() forSelector:sel_loadURLForItemAtIndex_reply_ argumentIndex:0 ofReply:1];
  [v0 setClass:objc_opt_class() forSelector:sel_loadUserActivityDataForItemAtIndex_reply_ argumentIndex:0 ofReply:1];
  return v0;
}

id _DUINewClientSystemAppInterface()
{
  uint64_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1ED67ACF0];
  id v1 = _DUINewServerSessionSystemAppInterface();
  [v0 setInterface:v1 forSelector:sel_dragDidBeginWithSystemSession_info_reply_ argumentIndex:0 ofReply:0];

  return v0;
}

id _DUINewDragContinuationInterface()
{
  uint64_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1ED700CA0];
  [v0 setClass:objc_opt_class() forSelector:sel_requestItemCollectionWithReply_ argumentIndex:0 ofReply:1];
  [v0 setClass:objc_opt_class() forSelector:sel_requestItemCollectionWithReply_ argumentIndex:1 ofReply:1];
  return v0;
}

id _DUIDragSessionLifecycleListeningInterface()
{
  uint64_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1ED5EE180];
  objc_msgSend(v0, "setInterface:forSelector:argumentIndex:ofReply:", objc_msgSend(MEMORY[0x1E4F29280], "interfaceWithProtocol:", &unk_1ED700D00), sel_dragDidBeginWithSession_identifier_reply_, 0, 0);
  objc_msgSend(v0, "setInterface:forSelector:argumentIndex:ofReply:", objc_msgSend(MEMORY[0x1E4F29280], "interfaceWithProtocol:", &unk_1ED700D00), sel_dragDidEndWithSession_, 0, 0);
  objc_msgSend(v0, "setInterface:forSelector:argumentIndex:ofReply:", objc_msgSend(MEMORY[0x1E4F29280], "interfaceWithProtocol:", &unk_1ED700D00), sel_dragDidEndWithSession_identifier_, 0, 0);
  return v0;
}

id _UIImageLoadingLog()
{
  if (qword_1EB25BD58 != -1) {
    dispatch_once(&qword_1EB25BD58, &__block_literal_global_171);
  }
  uint64_t v0 = (void *)_MergedGlobals_1_9;
  return v0;
}

void _drainTrampolines(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  os_unfair_lock_assert_owner((const os_unfair_lock *)v1 + 8);
  id v2 = *((id *)v1 + 5);
  uint64_t v3 = v2;
  if (v2)
  {
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    uint64_t v4 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v10;
      do
      {
        uint64_t v7 = 0;
        do
        {
          if (*(void *)v10 != v6) {
            objc_enumerationMutation(v3);
          }
          (*(void (**)(void))(*(void *)(*((void *)&v9 + 1) + 8 * v7++) + 16))();
        }
        while (v5 != v7);
        uint64_t v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
      }
      while (v5);
    }
  }
  uint64_t v8 = (void *)*((void *)v1 + 5);
  *((void *)v1 + 5) = 0;
}

void ___addTrampoline_block_invoke(uint64_t a1)
{
}

uint64_t _UIInitializeDraggingSystem()
{
  return +[_UIDragManager initializeDraggingSystem];
}

__CFString *stringFromDraggingSessionSourceState(unint64_t a1)
{
  if (a1 >= 7)
  {
    objc_msgSend(NSString, "stringWithFormat:", @"Unknown state %ld", a1);
    id v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v1 = off_1E52EC4A0[a1];
  }
  return v1;
}

id enumerateDraggingItems(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  uint64_t v5 = objc_opt_new();
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = __enumerateDraggingItems_block_invoke;
  _OWORD v11[3] = &unk_1E52EC458;
  id v13 = v3;
  id v6 = v5;
  id v12 = v6;
  id v7 = v3;
  [v4 enumerateObjectsWithOptions:2 usingBlock:v11];

  uint64_t v8 = v12;
  id v9 = v6;

  return v9;
}

void sub_185F16BE0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v6);
  objc_destroyWeak(v5);
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v7 - 88));
  _Unwind_Resume(a1);
}

void sub_185F16C44()
{
}

id dragPreviewsOfItems(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  uint64_t v7 = (void *)MEMORY[0x1E4F1CA48];
  id v8 = a2;
  id v9 = objc_msgSend(v7, "arrayWithCapacity:", objc_msgSend(v8, "count"));
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  _DWORD v16[2] = __dragPreviewsOfItems_block_invoke;
  v16[3] = &unk_1E52EC480;
  id v17 = v5;
  id v18 = v6;
  id v10 = v9;
  id v19 = v10;
  id v11 = v6;
  id v12 = v5;
  [v8 enumerateIndexesUsingBlock:v16];

  id v13 = v19;
  id v14 = v10;

  return v14;
}

void sub_185F1746C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

double visibleDroppedItemSize(void *a1)
{
  id v1 = a1;
  id v2 = [v1 preview];
  if (v2)
  {
    if ([v1 constrainSize]) {
      [v2 scaledSize];
    }
    else {
      [v2 unscaledSize];
    }
    double v4 = v3;
  }
  else
  {
    double v4 = *MEMORY[0x1E4F1DB30];
  }

  return v4;
}

void sub_185F18E90(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_185F18EFC()
{
}

void sub_185F18F04()
{
}

void sub_185F18F0C()
{
}

void sub_185F1A9A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _UIDraggingConnectionXPCQueue()
{
  if (qword_1E8FDE320 != -1) {
    dispatch_once(&qword_1E8FDE320, &__block_literal_global_172);
  }
  uint64_t v0 = (void *)qword_1E8FDE318;
  return v0;
}

void sub_185F1B8E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185F1D5FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185F1D72C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_185F1D8F4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_185F1DAD4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_185F1DDF8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

__CFString *stringFromDraggingSessionDestinationState(unint64_t a1)
{
  if (a1 >= 6)
  {
    objc_msgSend(NSString, "stringWithFormat:", @"Unknown state %ld", a1);
    uint64_t v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v1 = off_1E52EC4D8[a1];
  }
  return v1;
}

void __enumerateDraggingItems_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  if ([v5 _isDirty])
  {
    id v6 = objc_opt_new();
    [v6 setIndex:a3];
    [*(id *)(a1 + 32) addObject:v6];
    [v5 _setDirty:0];
  }
}

void __dragPreviewsOfItems_block_invoke(uint64_t a1, unint64_t a2)
{
  if ([*(id *)(a1 + 32) count] > a2)
  {
    id v20 = [*(id *)(a1 + 32) objectAtIndexedSubscript:a2];
    double v4 = [v20 _currentPreviewProvider];
    id v5 = objc_alloc_init(_DUIPreviewAndImageComponent);
    id v6 = [v4 _duiPreview];
    [(_DUIPreviewAndImageComponent *)v5 setPreview:v6];

    uint64_t v7 = [v4 imageComponent];
    id v8 = *(void **)(a1 + 40);
    id v9 = v7;
    id v10 = v8;
    if (v9)
    {
      id v11 = objc_alloc_init(_DUIImageComponent);
      [v9 frame];
      -[_DUIImageComponent setFrame:](v11, "setFrame:");
      -[_DUIImageComponent setIgnoresAccessibilityFilters:](v11, "setIgnoresAccessibilityFilters:", [v9 ignoresAccessibilityFilters]);
      -[_DUIImageComponent setHidesImage:](v11, "setHidesImage:", [v9 hidesImage]);
      id v12 = [v9 view];

      if (v12)
      {
        id v13 = [v9 view];
        uint64_t SlotId = _UISnapshotViewGetSlotId(v13);

        if (SlotId)
        {
          [(_DUIImageComponent *)v11 setSlotID:SlotId];
        }
        else
        {
          id v17 = [v9 view];
          id v18 = [v17 layer];

          [(_DUIImageComponent *)v11 setRenderID:CALayerGetRenderId()];
          id v19 = [v18 context];
          -[_DUIImageComponent setContextID:](v11, "setContextID:", [v19 contextId]);
        }
      }
      else
      {
        id v15 = [v9 image];
        uint64_t v16 = [v15 CGImage];
        if (v16) {
          -[_DUIImageComponent setSlotID:](v11, "setSlotID:", [v10 uploadImage:v16]);
        }
      }
    }
    else
    {
      id v11 = 0;
    }

    [(_DUIPreviewAndImageComponent *)v5 setImageComponent:v11];
    [(_DUIPreviewAndImageComponent *)v5 setIndex:a2];
    [*(id *)(a1 + 48) addObject:v5];
  }
}

void sub_185F1F8B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _transferQueue()
{
  if (qword_1EB2603A0 != -1) {
    dispatch_once(&qword_1EB2603A0, &__block_literal_global_173);
  }
  uint64_t v0 = (void *)_MergedGlobals_1027;
  return v0;
}

void _dispatchCallback(void *a1)
{
  uint64_t v1 = qword_1EB2603B0;
  id v2 = a1;
  id v4 = v2;
  if (v1 == -1)
  {
    uint64_t v3 = v2;
  }
  else
  {
    dispatch_once(&qword_1EB2603B0, &__block_literal_global_143);
    uint64_t v3 = v4;
  }
  dispatch_async((dispatch_queue_t)qword_1EB2603A8, v3);
}

void sub_185F20390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185F209AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_185F20BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___transferQueue_block_invoke()
{
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.UIKit._UIDataTransferMonitor transferQueue", 0);
  uint64_t v1 = (void *)_MergedGlobals_1027;
  _MergedGlobals_1027 = (uint64_t)v0;
}

void ___dispatchCallback_block_invoke()
{
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.UIKit._UIDataTransferMonitor callbackQueue", 0);
  uint64_t v1 = (void *)qword_1EB2603A8;
  qword_1EB2603A8 = (uint64_t)v0;
}

void ___indexOfDataTransferRequestMatching_block_invoke(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v13 = a2;
  uint64_t v7 = [v13 itemProvider];
  id v8 = [v7 _UUID];
  id v9 = [*(id *)(a1 + 32) _UUID];
  if ([v8 isEqual:v9])
  {
    id v10 = [v13 UUID];
    int v11 = [v10 isEqual:*(void *)(a1 + 40)];

    id v12 = v13;
    if (v11)
    {
      *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = a3;
      *a4 = 1;
    }
  }
  else
  {

    id v12 = v13;
  }
}

void __BadgeSymbolFont_block_invoke()
{
  uint64_t v0 = [off_1E52D39B8 systemFontOfSize:16.0 weight:*(double *)off_1E52D6C00];
  uint64_t v1 = (void *)qword_1EB25C8E8;
  qword_1EB25C8E8 = v0;
}

void __MonospaceFont_block_invoke()
{
  uint64_t v0 = [off_1E52D39B8 monospacedDigitSystemFontOfSize:16.0 weight:*(double *)off_1E52D6BF8];
  uint64_t v1 = (void *)qword_1EB25C8F8;
  qword_1EB25C8F8 = v0;
}

void __ProportionalFont_block_invoke()
{
  uint64_t v0 = [off_1E52D39B8 systemFontOfSize:16.0];
  uint64_t v1 = (void *)qword_1EB25C908;
  qword_1EB25C908 = v0;
}

id windowSceneForItems(void *a1, char a2, int a3)
{
  id v4 = windowForItems(a1, a2);
  id v5 = [v4 windowScene];

  if (v5)
  {
    id v6 = [v4 windowScene];
  }
  else if (a3 && [(id)UIApp _isSpringBoard])
  {
    uint64_t v7 = +[UIScreen mainScreen];
    id v6 = +[_UISceneLifecycleMultiplexer mostActiveWindowSceneOnScreen:v7];
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

id windowForItems(void *a1, char a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v3 = a1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v13;
LABEL_3:
    uint64_t v7 = 0;
    while (1)
    {
      if (*(void *)v13 != v6) {
        objc_enumerationMutation(v3);
      }
      id v8 = *(void **)(*((void *)&v12 + 1) + 8 * v7);
      if (a2) {
        [v8 _sourceVisualTarget];
      }
      else {
      id v9 = objc_msgSend(v8, "_destinationVisualTarget", (void)v12);
      }
      id v10 = objc_msgSend(v9, "_windowForSetDownOfDragItem:", v8, (void)v12);

      if (v10) {
        break;
      }
      if (v5 == ++v7)
      {
        uint64_t v5 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
        if (v5) {
          goto LABEL_3;
        }
        goto LABEL_12;
      }
    }
  }
  else
  {
LABEL_12:
    id v10 = 0;
  }

  return v10;
}

void sub_185F22B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void _UISetupPhysicsKit()
{
  if (_UISetupPhysicsKit_onceToken != -1) {
    dispatch_once(&_UISetupPhysicsKit_onceToken, &__block_literal_global_176);
  }
}

BOOL UIFloatRangeIsInfinite(UIFloatRange range)
{
  return range.maximum >= 3.40282347e38 && range.minimum <= -3.40282347e38;
}

BOOL UIFloatRangeIsEqualToRange(double a1, double a2, double a3, double a4)
{
  double v4 = a1 - a3;
  if (v4 < 0.0) {
    double v4 = -v4;
  }
  if (v4 > 0.00000011920929) {
    return 0;
  }
  double v6 = a2 - a4;
  double v7 = -(a2 - a4);
  if (v6 < 0.0) {
    double v6 = v7;
  }
  return v6 <= 0.00000011920929;
}

void sub_185F290A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getSTKEmojiAndStickerCollectionViewConfigurationClass()
{
  uint64_t v3 = 0;
  double v4 = &v3;
  uint64_t v5 = 0x2050000000;
  uint64_t v0 = (void *)getSTKEmojiAndStickerCollectionViewConfigurationClass_softClass;
  uint64_t v6 = getSTKEmojiAndStickerCollectionViewConfigurationClass_softClass;
  if (!getSTKEmojiAndStickerCollectionViewConfigurationClass_softClass)
  {
    StickerKitLibraryCore();
    v4[3] = (uint64_t)objc_getClass("STKEmojiAndStickerCollectionViewConfiguration");
    getSTKEmojiAndStickerCollectionViewConfigurationClass_softClass = v4[3];
    uint64_t v0 = (void *)v4[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v3, 8);
  return v1;
}

void sub_185F291AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getTUIEmojiSearchViewClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_1EB25CBB0;
  uint64_t v7 = qword_1EB25CBB0;
  if (!qword_1EB25CBB0)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getTUIEmojiSearchViewClass_block_invoke;
    v3[3] = &unk_1E52D9900;
    v3[4] = &v4;
    __getTUIEmojiSearchViewClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_185F29290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getSTKEmojiAndStickerCollectionViewControllerClass_block_invoke(void *a1)
{
  if (!StickerKitLibraryCore())
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    a1 = [NSString stringWithUTF8String:"void *StickerKitLibrary(void)"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", a1, @"UIRemoteEmojiAndStickerInputView.m", 86, @"%s", 0);

    __break(1u);
    free(v3);
  }
  *(void *)(*(void *)(a1[4] + 8) + 24) = objc_getClass("STKEmojiAndStickerCollectionViewController");
  if (*(void *)(*(void *)(a1[4] + 8) + 24))
  {
    getSTKEmojiAndStickerCollectionViewControllerClass_softClass = *(void *)(*(void *)(a1[4] + 8) + 24);
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getSTKEmojiAndStickerCollectionViewControllerClass(void)_block_invoke"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIRemoteEmojiAndStickerInputView.m", 88, @"Unable to find class %s", "STKEmojiAndStickerCollectionViewController");

    __break(1u);
  }
}

uint64_t StickerKitLibraryCore()
{
  if (!StickerKitLibraryCore_frameworkLibrary) {
    StickerKitLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  return StickerKitLibraryCore_frameworkLibrary;
}

uint64_t __StickerKitLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  StickerKitLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

Class __getSTKEmojiAndStickerCollectionViewConfigurationClass_block_invoke(uint64_t a1)
{
  StickerKitLibraryCore();
  Class result = objc_getClass("STKEmojiAndStickerCollectionViewConfiguration");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSTKEmojiAndStickerCollectionViewConfigurationClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                              + 24);
  return result;
}

Class __getTUIEmojiSearchViewClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB25CBB8)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    _OWORD v6[3] = __TextInputUILibraryCore_block_invoke_5;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_1E52EC648;
    uint64_t v8 = 0;
    qword_1EB25CBB8 = _sl_dlopen();
  }
  if (!qword_1EB25CBB8)
  {
    uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *TextInputUILibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIRemoteEmojiAndStickerInputView.m", 34, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("TUIEmojiSearchView");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getTUIEmojiSearchViewClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIRemoteEmojiAndStickerInputView.m", 35, @"Unable to find class %s", "TUIEmojiSearchView");

LABEL_10:
    __break(1u);
  }
  qword_1EB25CBB0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __TextInputUILibraryCore_block_invoke_5()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25CBB8 = result;
  return result;
}

void sub_185F2BA58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185F2C334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _dynamicItemTypeForItem(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v2 = 1;
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v2 = 2;
    }
    else
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        uint64_t v2 = 3;
      }
      else {
        uint64_t v2 = 0;
      }
    }
  }

  return v2;
}

void _setupBodyWithCenterAndTransform(void *a1, long double *a2, double a3, double a4)
{
  id v7 = a1;
  objc_msgSend(v7, "setPosition:", a3, a4);
  [v7 setFieldBitMask:0];
  objc_msgSend(v7, "setRotation:", (double)atan2(a2[1], *a2));
  [v7 setAffectedByGravity:0];
}

void sub_185F2DD08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t ___commonInitWithReferenceSystem_block_invoke(uint64_t a1)
{
  return +[UIDynamicAnimator _registerAnimator:*(void *)(a1 + 32)];
}

double unionRectOfItems(void *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  double x = *MEMORY[0x1E4F1DB20];
  CGFloat y = *(double *)(MEMORY[0x1E4F1DB20] + 8);
  CGFloat width = *(double *)(MEMORY[0x1E4F1DB20] + 16);
  CGFloat height = *(double *)(MEMORY[0x1E4F1DB20] + 24);
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v6 = [v1 countByEnumeratingWithState:&v22 objects:v26 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v23;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v23 != v8) {
          objc_enumerationMutation(v1);
        }
        id v10 = *(void **)(*((void *)&v22 + 1) + 8 * i);
        [v10 center];
        double v12 = v11;
        double v14 = v13;
        [v10 bounds];
        CGFloat v16 = v15;
        CGFloat v18 = v17;
        double v19 = v12 - v15 * 0.5;
        double v20 = v14 - v17 * 0.5;
        v28.origin.double x = x;
        v28.origin.CGFloat y = y;
        v28.size.CGFloat width = width;
        v28.size.CGFloat height = height;
        if (CGRectIsNull(v28))
        {
          CGFloat height = v18;
          CGFloat width = v16;
          CGFloat y = v20;
          double x = v19;
        }
        else
        {
          v29.origin.double x = x;
          v29.origin.CGFloat y = y;
          v29.size.CGFloat width = width;
          v29.size.CGFloat height = height;
          v31.origin.double x = v19;
          v31.origin.CGFloat y = v20;
          v31.size.CGFloat width = v16;
          v31.size.CGFloat height = v18;
          CGRect v30 = CGRectUnion(v29, v31);
          double x = v30.origin.x;
          CGFloat y = v30.origin.y;
          CGFloat width = v30.size.width;
          CGFloat height = v30.size.height;
        }
      }
      uint64_t v7 = [v1 countByEnumeratingWithState:&v22 objects:v26 count:16];
    }
    while (v7);
  }

  return x;
}

void sub_185F371C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_185F37264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_185F372C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  id v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)UIDynamicsDebug;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
}

void sub_185F373C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_185F3751C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_185F375A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_185F37914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_185F37BDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL15getGLKViewClassv_block_invoke(uint64_t a1)
{
  GLKitLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("GLKView");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    _MergedGlobals_1028 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getGLKViewClass()_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDynamicsDebug.mm", 23, @"Unable to find class %s", "GLKView");

    __break(1u);
  }
}

void sub_185F37DF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void GLKitLibrary(void)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!GLKitLibraryCore(char **)::frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = ___ZL16GLKitLibraryCorePPc_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E52EC808;
    uint64_t v5 = 0;
    GLKitLibraryCore(char **)::frameworkLibrarCGFloat y = _sl_dlopen();
  }
  if (!GLKitLibraryCore(char **)::frameworkLibrary)
  {
    id v1 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v2 = [NSString stringWithUTF8String:"void *GLKitLibrary()"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"UIDynamicsDebug.mm", 22, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

void sub_185F37F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, _Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL16GLKitLibraryCorePPc_block_invoke()
{
  uint64_t result = _sl_dlopen();
  GLKitLibraryCore(char **)::frameworkLibrarCGFloat y = result;
  return result;
}

void ___ZL21getGLKBaseEffectClassv_block_invoke(uint64_t a1)
{
  GLKitLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("GLKBaseEffect");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1EB2603C0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getGLKBaseEffectClass()_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDynamicsDebug.mm", 24, @"Unable to find class %s", "GLKBaseEffect");

    __break(1u);
  }
}

void sub_185F380CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_185F38150(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_185F381C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_185F38258(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_185F382FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_185F383A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_185F38464(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_185F38524(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_185F385A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_185F38610(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_185F38680(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_185F38834(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_185F389B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_185F38AF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_185F38B7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_185F38C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_185F38DAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_185F38E8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_185F38F94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_185F39040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_185F390B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_185F391FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_185F396B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_185F39890(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_185F3992C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_185F3B41C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_185F3B48C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_185F3B58C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_185F3B650(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_185F3B70C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_185F3B770(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_185F3B7F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_185F3B87C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_185F3B908(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_185F3D3FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185F3D884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _UIQOSProcessingEnd();
  _Unwind_Resume(a1);
}

id AsyncFallbackPreparationQueue()
{
  if (qword_1EB25B200 != -1) {
    dispatch_once(&qword_1EB25B200, &__block_literal_global_507);
  }
  uint64_t v0 = (void *)qword_1EB25B1F8;
  return v0;
}

void __AsyncFallbackPreparationQueue_block_invoke()
{
  dispatch_workloop_t v0 = dispatch_workloop_create("com.apple.UIKit.UIImage.async-drawing");
  id v1 = (void *)qword_1EB25B1F8;
  qword_1EB25B1F8 = (uint64_t)v0;
}

void sub_185F43980(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_185F43A3C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_185F44F7C(_Unwind_Exception *a1)
{
}

id _viewFromCoordinateSpace(void *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (os_variant_has_internal_diagnostics())
  {
    uint64_t v5 = __UIFaultDebugAssertLog();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_1853B0000, v5, OS_LOG_TYPE_FAULT, "Use of coordinate space SPI methods on UIFeedbackGenerator have been deprecated. Update to view-based UIFeedbackGenerator methods.", buf, 2u);
    }
  }
  else
  {
    uint64_t v2 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB260440) + 8);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1853B0000, v2, OS_LOG_TYPE_ERROR, "Use of coordinate space SPI methods on UIFeedbackGenerator have been deprecated. Update to view-based UIFeedbackGenerator methods.", buf, 2u);
    }
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    _UIIsPrivateMainBundle();
    if (dyld_program_sdk_at_least())
    {
      uint64_t v6 = [MEMORY[0x1E4F28B00] currentHandler];
      uint64_t v7 = [NSString stringWithUTF8String:"UIView * _Nullable _viewFromCoordinateSpace(__strong id<UICoordinateSpace> _Nullable)"];
      [v6 handleFailureInFunction:v7, @"UIFeedbackGenerator.m", 973, @"Using a non-UIView coordinate space %@ is not supported on all platforms and can cause feedbacks to become no-ops. Update to view-based UIFeedbackGenerator methods.", objc_opt_class() file lineNumber description];
    }
    else if (os_variant_has_internal_diagnostics())
    {
      uint64_t v6 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      {
        uint64_t v10 = objc_opt_class();
        *(_DWORD *)buf = 138412290;
        uint64_t v12 = v10;
        _os_log_fault_impl(&dword_1853B0000, v6, OS_LOG_TYPE_FAULT, "Using a non-UIView coordinate space %@ is not supported on all platforms and can cause feedbacks to become no-ops. Update to view-based UIFeedbackGenerator methods.  This will become an assert in a future version.", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v8 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB260448) + 8);
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        goto LABEL_5;
      }
      uint64_t v6 = v8;
      uint64_t v9 = objc_opt_class();
      *(_DWORD *)buf = 138412290;
      uint64_t v12 = v9;
      _os_log_impl(&dword_1853B0000, v6, OS_LOG_TYPE_ERROR, "Using a non-UIView coordinate space %@ is not supported on all platforms and can cause feedbacks to become no-ops. Update to view-based UIFeedbackGenerator methods.  This will become an assert in a future version.", buf, 0xCu);
    }
  }
LABEL_5:
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v3 = v1;
  }
  else {
    id v3 = 0;
  }

  return v3;
}

id _UICreateNotificationFeedbacksForTypes(void *a1)
{
  uint64_t v117 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v102 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA60]), "initWithCapacity:", objc_msgSend(v1, "count"));
  long long v103 = 0u;
  long long v104 = 0u;
  long long v105 = 0u;
  long long v106 = 0u;
  id obj = v1;
  uint64_t v2 = [obj countByEnumeratingWithState:&v103 objects:v116 count:16];
  if (v2)
  {
    uint64_t v3 = *(void *)v104;
    do
    {
      uint64_t v4 = 0;
      do
      {
        if (*(void *)v104 != v3) {
          objc_enumerationMutation(obj);
        }
        uint64_t v5 = *(void **)(*((void *)&v103 + 1) + 8 * v4);
        uint64_t v6 = [v5 integerValue];
        if (qword_1EB25CBF0 != -1) {
          dispatch_once(&qword_1EB25CBF0, &__block_literal_global_91_0);
        }
        if (v6 <= 1000)
        {
          if (v6)
          {
            if (v6 == 1)
            {
LABEL_15:
              uint64_t v8 = +[_UIFeedbackPattern feedbackPattern];
              double v21 = +[_UICustomDiscreteFeedback customDiscreteFeedbackWithEventType:29527 systemSoundID:_UISystemSoundIDNone];
              long long v22 = [v21 hapticParameters];
              LODWORD(v23) = 1063675494;
              [v22 setVolume:v23];

              [v8 addFeedback:v21 atTime:0.0];
              long long v24 = +[_UICustomDiscreteFeedback customDiscreteFeedbackWithEventType:26455 systemSoundID:_UISystemSoundIDNone];
              long long v25 = [v24 hapticParameters];
              LODWORD(v26) = 1063675494;
              [v25 setVolume:v26];

              [v8 addFeedback:v24 atTime:0.215];
            }
            else
            {
              if (v6 != 2) {
                goto LABEL_57;
              }
              uint64_t v8 = +[_UIFeedbackPattern feedbackPattern];
              uint64_t v9 = +[_UICustomDiscreteFeedback customDiscreteFeedbackWithEventType:29526 systemSoundID:_UISystemSoundIDNone];
              uint64_t v10 = [v9 hapticParameters];
              LODWORD(v11) = 1062836634;
              [v10 setVolume:v11];

              [v8 addFeedback:v9 atTime:0.0];
              uint64_t v12 = +[_UICustomDiscreteFeedback customDiscreteFeedbackWithEventType:29526 systemSoundID:_UISystemSoundIDNone];
              uint64_t v13 = [v12 hapticParameters];
              LODWORD(v14) = 0.75;
              [v13 setVolume:v14];

              [v8 addFeedback:v12 atTime:0.1];
              double v15 = +[_UICustomDiscreteFeedback customDiscreteFeedbackWithEventType:20311 systemSoundID:_UISystemSoundIDNone];
              CGFloat v16 = [v15 hapticParameters];
              LODWORD(v17) = 1059481190;
              [v16 setVolume:v17];

              [v8 addFeedback:v15 atTime:0.2];
              CGFloat v18 = +[_UICustomDiscreteFeedback customDiscreteFeedbackWithEventType:17239 systemSoundID:_UISystemSoundIDNone];
              double v19 = [v18 hapticParameters];
              LODWORD(v20) = 0.75;
              [v19 setVolume:v20];

              [v8 addFeedback:v18 atTime:0.3];
            }
          }
          else
          {
            uint64_t v8 = +[_UIFeedbackPattern feedbackPattern];
            double v70 = +[_UICustomDiscreteFeedback customDiscreteFeedbackWithEventType:20311 systemSoundID:_UISystemSoundIDNone];
            double v71 = [v70 hapticParameters];
            LODWORD(v72) = 1060320051;
            [v71 setVolume:v72];

            [v8 addFeedback:v70 atTime:0.0];
            uint64_t v73 = +[_UICustomDiscreteFeedback customDiscreteFeedbackWithEventType:29526 systemSoundID:_UISystemSoundIDNone];
            double v74 = [v73 hapticParameters];
            LODWORD(v75) = 1.0;
            [v74 setVolume:v75];

            [v8 addFeedback:v73 atTime:0.185];
          }
        }
        else
        {
          switch(v6)
          {
            case 1001:
              uint64_t v7 = +[_UICustomDiscreteFeedback customDiscreteFeedbackWithEventType:0 systemSoundID:1102];
              goto LABEL_54;
            case 1002:
              uint64_t v7 = +[_UICustomDiscreteFeedback customDiscreteFeedbackWithEventType:0 systemSoundID:1100];
              goto LABEL_54;
            case 1003:
              uint64_t v7 = +[_UICustomDiscreteFeedback customDiscreteFeedbackWithEventType:0 systemSoundID:1106];
              goto LABEL_54;
            case 1004:
              uint64_t v112 = 0;
              double v113 = &v112;
              uint64_t v114 = 0x2020000000;
              double v33 = (void *)qword_1EB25CBF8;
              uint64_t v115 = qword_1EB25CBF8;
              if (!qword_1EB25CBF8)
              {
                uint64_t v107 = MEMORY[0x1E4F143A8];
                uint64_t v108 = 3221225472;
                BOOL v109 = __getCHHapticPatternLibraryKeyDeviceSilencedSymbolLoc_block_invoke;
                uint64_t v110 = &unk_1E52D9900;
                uint64_t v111 = &v112;
                double v34 = CoreHapticsLibrary_0();
                double v35 = dlsym(v34, "CHHapticPatternLibraryKeyDeviceSilenced");
                *(void *)(v111[1] + 24) = v35;
                qword_1EB25CBF8 = *(void *)(v111[1] + 24);
                double v33 = (void *)v113[3];
              }
              _Block_object_dispose(&v112, 8);
              if (v33) {
                goto LABEL_47;
              }
              double v95 = [MEMORY[0x1E4F28B00] currentHandler];
              double v96 = [NSString stringWithUTF8String:"CHHapticPatternLibraryKey getCHHapticPatternLibraryKeyDeviceSilenced(void)"];
              objc_msgSend(v95, "handleFailureInFunction:file:lineNumber:description:", v96, @"_UIFeedbackCoreHapticsEngineUtilities.h", 92, @"%s", dlerror());

              goto LABEL_69;
            case 1005:
              if (!_MergedGlobals_3_9) {
                goto LABEL_57;
              }
              uint64_t v112 = 0;
              double v113 = &v112;
              uint64_t v114 = 0x2020000000;
              double v33 = (void *)qword_1EB25CC00;
              uint64_t v115 = qword_1EB25CC00;
              if (!qword_1EB25CC00)
              {
                uint64_t v107 = MEMORY[0x1E4F143A8];
                uint64_t v108 = 3221225472;
                BOOL v109 = __getCHHapticPatternLibraryKeyDeviceUnsilencedSymbolLoc_block_invoke;
                uint64_t v110 = &unk_1E52D9900;
                uint64_t v111 = &v112;
                uint64_t v36 = CoreHapticsLibrary_0();
                uint64_t v37 = dlsym(v36, "CHHapticPatternLibraryKeyDeviceUnsilenced");
                *(void *)(v111[1] + 24) = v37;
                qword_1EB25CC00 = *(void *)(v111[1] + 24);
                double v33 = (void *)v113[3];
              }
              _Block_object_dispose(&v112, 8);
              if (!v33)
              {
                double v99 = [MEMORY[0x1E4F28B00] currentHandler];
                double v100 = [NSString stringWithUTF8String:"CHHapticPatternLibraryKey getCHHapticPatternLibraryKeyDeviceUnsilenced(void)"];
                objc_msgSend(v99, "handleFailureInFunction:file:lineNumber:description:", v100, @"_UIFeedbackCoreHapticsEngineUtilities.h", 93, @"%s", dlerror());

LABEL_69:
                __break(1u);
              }
LABEL_47:
              uint64_t v8 = +[_UIFeedbackLibraryPattern feedbackPatternWithLibraryKey:*v33];
              [v8 setHapticOutputMode:3];
              break;
            case 1006:
              goto LABEL_15;
            case 1007:
              uint64_t v8 = +[_UIFeedbackPattern feedbackPattern];
              uint64_t v38 = +[_UICustomDiscreteFeedback customDiscreteFeedbackWithEventType:26453 systemSoundID:_UISystemSoundIDNone];
              CGFloat v39 = [v38 hapticParameters];
              LODWORD(v40) = 1053609165;
              [v39 setVolume:v40];

              [v8 addFeedback:v38 atTime:0.0];
              [v8 addFeedback:v38 atTime:0.05];
              [v8 addFeedback:v38 atTime:0.1];
              [v8 addFeedback:v38 atTime:0.15];
              [v8 addFeedback:v38 atTime:0.2];
              long long v41 = [v38 hapticParameters];
              LODWORD(v42) = 1060320051;
              [v41 setVolume:v42];

              [v8 addFeedback:v38 atTime:0.25];
              [v8 addFeedback:v38 atTime:0.3];
              [v8 addFeedback:v38 atTime:0.35];

              break;
            case 1008:
              uint64_t v7 = +[_UICustomDiscreteFeedback customDiscreteFeedbackWithEventType:0 systemSoundID:1360];
              goto LABEL_54;
            case 1009:
              uint64_t v7 = +[_UICustomDiscreteFeedback customDiscreteFeedbackWithEventType:0 systemSoundID:1361];
              goto LABEL_54;
            case 1010:
              uint64_t v43 = +[UIDevice currentDevice];
              BOOL v44 = [v43 userInterfaceIdiom] == 1;

              if (v44)
              {
                uint64_t v7 = +[_UIFeedbackBackBoardHIDPattern feedbackPatternWithName:0x1ED11BDC0 deviceType:1];
                goto LABEL_54;
              }
              uint64_t v8 = +[_UICustomDiscreteFeedback customDiscreteFeedbackWithEventType:11094 systemSoundID:_UISystemSoundIDNone];
              uint64_t v83 = [v8 hapticParameters];
              LODWORD(v84) = 1060320051;
              [v83 setVolume:v84];

              [v8 setHapticOutputMode:5];
              break;
            case 1011:
              uint64_t v8 = +[_UICustomDiscreteFeedback customDiscreteFeedbackWithEventType:8023 systemSoundID:_UISystemSoundIDNone];
              uint64_t v45 = [v8 hapticParameters];
              LODWORD(v46) = 1055957975;
              [v45 setVolume:v46];

              [v8 setHapticOutputMode:5];
              break;
            case 1012:
              long long v47 = +[UIDevice currentDevice];
              BOOL v48 = [v47 userInterfaceIdiom] == 1;

              if (v48)
              {
                uint64_t v7 = +[_UIFeedbackBackBoardHIDPattern feedbackPatternWithName:0x1ED11BDE0 deviceType:1];
                goto LABEL_54;
              }
              uint64_t v8 = +[_UICustomDiscreteFeedback customDiscreteFeedbackWithEventType:8022 systemSoundID:_UISystemSoundIDNone];
              unint64_t v85 = [v8 hapticParameters];
              LODWORD(v86) = 1058021569;
              [v85 setVolume:v86];

              [v8 setHapticOutputMode:5];
              break;
            case 1013:
              double v49 = +[UIDevice currentDevice];
              BOOL v50 = [v49 userInterfaceIdiom] == 1;

              if (v50)
              {
                uint64_t v7 = +[_UIFeedbackBackBoardHIDPattern feedbackPatternWithName:0x1ED11BE00 deviceType:1];
LABEL_54:
                uint64_t v8 = (void *)v7;
              }
              else
              {
                uint64_t v8 = +[_UIFeedbackPattern feedbackPattern];
                double v87 = +[_UICustomDiscreteFeedback customDiscreteFeedbackWithEventType:11094 systemSoundID:_UISystemSoundIDNone];
                double v88 = [v87 hapticParameters];
                LODWORD(v89) = 1057467924;
                [v88 setVolume:v89];

                [v87 setHapticOutputMode:5];
                [v8 addFeedback:v87 atTime:0.09];

                double v90 = +[_UICustomDiscreteFeedback customDiscreteFeedbackWithEventType:11094 systemSoundID:_UISystemSoundIDNone];
                double v91 = [v90 hapticParameters];
                LODWORD(v92) = 1055957975;
                [v91 setVolume:v92];

                [v90 setHapticOutputMode:5];
                [v8 addFeedback:v90 atTime:0.325];
              }
              break;
            case 1014:
              uint64_t v7 = +[_UICustomDiscreteFeedback customDiscreteFeedbackWithEventType:0 systemSoundID:1161];
              goto LABEL_54;
            case 1015:
              uint64_t v7 = +[_UICustomDiscreteFeedback customDiscreteFeedbackWithEventType:0 systemSoundID:1162];
              goto LABEL_54;
            case 1016:
              uint64_t v8 = +[_UIFeedbackPattern feedbackPattern];
              double v51 = +[_UICustomDiscreteFeedback customDiscreteFeedbackWithEventType:32555 systemSoundID:_UISystemSoundIDNone];
              double v52 = [v51 audioParameters];
              LODWORD(v53) = 1032805417;
              [v52 setVolume:v53];

              long long v54 = [v51 audioParameters];
              LODWORD(v55) = 1061997773;
              [v54 setTransposition:v55];

              [v8 addFeedback:v51 atTime:0.0];
              uint64_t v56 = +[_UICustomDiscreteFeedback customDiscreteFeedbackWithEventType:29527 systemSoundID:_UISystemSoundIDNone];
              [v8 addFeedback:v56 atTime:0.0];

              break;
            case 1017:
              uint64_t v8 = +[_UIFeedbackPattern feedbackPattern];
              uint64_t v27 = +[_UICustomDiscreteFeedback customDiscreteFeedbackWithEventType:32555 systemSoundID:_UISystemSoundIDNone];
              CGRect v28 = [v27 audioParameters];
              LODWORD(v29) = 1025758986;
              [v28 setVolume:v29];

              CGRect v30 = [v27 audioParameters];
              LODWORD(v31) = 1061997773;
              [v30 setTransposition:v31];

              [v8 addFeedback:v27 atTime:0.0];
              uint64_t v32 = +[_UICustomDiscreteFeedback customDiscreteFeedbackWithEventType:29527 systemSoundID:_UISystemSoundIDNone];
              [v8 addFeedback:v32 atTime:0.0];

              break;
            case 1018:
              uint64_t v8 = +[_UIFeedbackPattern feedbackPattern];
              uint64_t v57 = +[_UIDiscreteFeedback discreteFeedbackForType:8];
              id v58 = [v57 hapticParameters];
              LODWORD(v59) = 1060320051;
              [v58 setVolume:v59];

              [v8 addFeedback:v57 atTime:0.0];
              [v8 addFeedback:v57 atTime:0.17];

              break;
            case 1019:
              uint64_t v60 = [MEMORY[0x1E4F28B50] bundleForClass:objc_opt_class()];
              uint64_t v8 = +[_UIFeedbackPattern feedbackPattern];
              uint64_t v61 = [v60 URLForResource:@"Single_0ms_S10-D52-D53-D54" withExtension:@"ahap"];
              uint64_t v62 = +[_UIFeedbackHapticFilePattern feedbackPatternFromFile:v61];
              [v8 addFeedback:v62 atTime:0.0];

              double v63 = [v60 URLForResource:@"200312_ch_FPO-D52-D53-D54" withExtension:@"wav"];
              double v64 = +[_UIFeedbackAudioFilePattern feedbackPatternFromFile:v63];
              [v8 addFeedback:v64 atTime:0.0];

              break;
            case 1020:
              double v76 = [MEMORY[0x1E4F28B50] bundleForClass:objc_opt_class()];
              uint64_t v8 = +[_UIFeedbackPattern feedbackPattern];
              double v77 = [v76 URLForResource:@"Single_0ms_S10_charge_500ms-D52-D53-D54" withExtension:@"ahap"];
              uint64_t v78 = +[_UIFeedbackHapticFilePattern feedbackPatternFromFile:v77];
              [v8 addFeedback:v78 atTime:0.0];

              id v79 = [v76 URLForResource:@"200312_ch_FPO-D52-D53-D54" withExtension:@"wav"];
              id v80 = +[_UIFeedbackAudioFilePattern feedbackPatternFromFile:v79];
              [v8 addFeedback:v80 atTime:0.0];

              unint64_t v81 = [v76 URLForResource:@"connect_power-D52-D53-D54" withExtension:@"wav"];
              unint64_t v82 = +[_UIFeedbackAudioFilePattern feedbackPatternFromFile:v81];
              [v8 addFeedback:v82 atTime:0.624];

              break;
            case 1021:
              double v65 = [MEMORY[0x1E4F28B50] bundleForClass:objc_opt_class()];
              uint64_t v8 = +[_UIFeedbackPattern feedbackPattern];
              double v66 = [v65 URLForResource:@"MagSafe_Wallet_Detach" withExtension:@"ahap"];
              double v67 = +[_UIFeedbackHapticFilePattern feedbackPatternFromFile:v66];
              [v8 addFeedback:v67 atTime:0.0];

              break;
            case 1022:
              uint64_t v112 = 0;
              double v113 = &v112;
              uint64_t v114 = 0x2020000000;
              double v33 = (void *)qword_1EB25CC08;
              uint64_t v115 = qword_1EB25CC08;
              if (!qword_1EB25CC08)
              {
                uint64_t v107 = MEMORY[0x1E4F143A8];
                uint64_t v108 = 3221225472;
                BOOL v109 = __getCHHapticPatternLibraryKeyHardwareButtonGenericToggleSymbolLoc_block_invoke;
                uint64_t v110 = &unk_1E52D9900;
                uint64_t v111 = &v112;
                double v68 = CoreHapticsLibrary_0();
                double v69 = dlsym(v68, "CHHapticPatternLibraryKeyHardwareButtonGenericToggle");
                *(void *)(v111[1] + 24) = v69;
                qword_1EB25CC08 = *(void *)(v111[1] + 24);
                double v33 = (void *)v113[3];
              }
              _Block_object_dispose(&v112, 8);
              if (v33) {
                goto LABEL_47;
              }
              uint64_t v97 = [MEMORY[0x1E4F28B00] currentHandler];
              long long v98 = [NSString stringWithUTF8String:"CHHapticPatternLibraryKey getCHHapticPatternLibraryKeyHardwareButtonGenericToggle(void)"];
              objc_msgSend(v97, "handleFailureInFunction:file:lineNumber:description:", v98, @"_UIFeedbackCoreHapticsEngineUtilities.h", 95, @"%s", dlerror());

              goto LABEL_69;
            case 1023:
              uint64_t v7 = +[_UIFeedbackBackBoardHIDPattern feedbackPatternWithName:0x1ED11BD40 deviceType:0];
              goto LABEL_54;
            case 1024:
              uint64_t v7 = +[_UIFeedbackBackBoardHIDPattern feedbackPatternWithName:0x1ED11BD60 deviceType:0];
              goto LABEL_54;
            case 1025:
              uint64_t v7 = +[_UIFeedbackBackBoardHIDPattern feedbackPatternWithName:0x1ED11BD80 deviceType:0];
              goto LABEL_54;
            case 1026:
              uint64_t v7 = +[_UIFeedbackBackBoardHIDPattern feedbackPatternWithName:0x1ED11BDA0 deviceType:0];
              goto LABEL_54;
            default:
              goto LABEL_57;
          }
        }
        if (v8)
        {
          [v102 setObject:v8 forKey:v5];
        }
LABEL_57:
        ++v4;
      }
      while (v2 != v4);
      uint64_t v93 = [obj countByEnumeratingWithState:&v103 objects:v116 count:16];
      uint64_t v2 = v93;
    }
    while (v93);
  }

  return v102;
}

void sub_185F47AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void *__getCHHapticPatternLibraryKeyDeviceSilencedSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary_0();
  uint64_t result = dlsym(v2, "CHHapticPatternLibraryKeyDeviceSilenced");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25CBF8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __CoreHapticsLibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  CoreHapticsLibraryCore_frameworkLibrary_0 = result;
  return result;
}

void *__getCHHapticPatternLibraryKeyDeviceUnsilencedSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary_0();
  uint64_t result = dlsym(v2, "CHHapticPatternLibraryKeyDeviceUnsilenced");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25CC00 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCHHapticPatternLibraryKeyHardwareButtonGenericToggleSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary_0();
  uint64_t result = dlsym(v2, "CHHapticPatternLibraryKeyHardwareButtonGenericToggle");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25CC08 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id _UIClickAudioFeedback(double a1)
{
  uint64_t v2 = +[UIDevice currentDevice];
  uint64_t v3 = [v2 _feedbackSupportLevel];

  if (v3 >= 2)
  {
    uint64_t v4 = +[_UICustomDiscreteFeedback customDiscreteFeedbackWithEventType:32555 systemSoundID:_UISystemSoundIDNone];
    uint64_t v5 = [v4 audioParameters];
    LODWORD(v6) = 1028443341;
    [v5 setVolume:v6];

    uint64_t v8 = [v4 audioParameters];
    float v7 = a1;
    *(float *)&double v9 = v7;
    [v8 setTransposition:v9];
  }
  else
  {
    uint64_t v4 = 0;
  }
  return v4;
}

void sub_185F4A32C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_185F4A818(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::vector<unsigned long>::vector<_UIBitSetIterator<unsigned long,256ul>,0>(void *a1, uint64_t *a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unint64_t v4 = a2[1];
  uint64_t v5 = *(void *)(a3 + 8);
  if (v4 != v5)
  {
    unint64_t v7 = 0;
    uint64_t v8 = *a2;
    char v9 = *((unsigned char *)a2 + 16);
    char v10 = v9;
    unint64_t v11 = v4;
    do
    {
      unint64_t v12 = v11 >> 6;
      if (v11 >> 6 == 4)
      {
LABEL_7:
        unint64_t v11 = 256;
      }
      else
      {
        char v13 = v11 & 0x3F;
        uint64_t v14 = -64 * v12;
        while (1)
        {
          unint64_t v15 = __clz(__rbit64((*(void *)(v8 + 8 * v12) ^ (char)(v10 - 1)) & (-1 << v13)));
          if (v15 < 0x40) {
            break;
          }
          char v13 = 0;
          ++v12;
          v14 -= 64;
          if (v12 == 4) {
            goto LABEL_7;
          }
        }
        unint64_t v11 = v15 - v14;
      }
      ++v7;
      v10 ^= 1u;
    }
    while (v11 != v5);
    std::vector<unsigned long>::__vallocate[abi:nn180100](a1, v7);
    CGFloat v16 = (unint64_t *)a1[1];
    do
    {
      *CGFloat v16 = v4;
      unint64_t v17 = v4 >> 6;
      if (v4 >> 6 == 4)
      {
LABEL_15:
        unint64_t v4 = 256;
      }
      else
      {
        char v18 = v4 & 0x3F;
        uint64_t v19 = -64 * v17;
        while (1)
        {
          unint64_t v20 = __clz(__rbit64((*(void *)(v8 + 8 * v17) ^ (char)(v9 - 1)) & (-1 << v18)));
          if (v20 < 0x40) {
            break;
          }
          char v18 = 0;
          ++v17;
          v19 -= 64;
          if (v17 == 4) {
            goto LABEL_15;
          }
        }
        unint64_t v4 = v20 - v19;
      }
      v9 ^= 1u;
      ++v16;
    }
    while (v4 != v5);
    a1[1] = v16;
  }
  return a1;
}

double _UISmallVector<unsigned short,16ul>::insert(long long *a1, uint64_t a2, uint64_t a3, __int16 *a4)
{
  uint64_t v4 = *((void *)a1 + 4);
  uint64_t v5 = v4 + 1;
  uint64_t v6 = v4 - 1;
  long long v8 = *a1;
  long long v7 = a1[1];
  if (v6 >= a3)
  {
    do
    {
      v17[0] = v8;
      v17[1] = v7;
      __int16 v9 = *((_WORD *)v17 + (v6 & 0xF));
      long long v15 = v8;
      long long v16 = v7;
      *((_WORD *)&v15 + (((_BYTE)v6 + 1) & 0xF)) = v9;
      long long v8 = v15;
      long long v7 = v16;
      --v6;
    }
    while (v6 >= a3);
    *a1 = v15;
    a1[1] = v7;
  }
  *((void *)a1 + 4) = v5;
  __int16 v10 = *a4;
  long long v13 = v8;
  long long v14 = v7;
  *((_WORD *)&v13 + (a3 & 0xF)) = v10;
  double result = *(double *)&v13;
  long long v12 = v14;
  *a1 = v13;
  a1[1] = v12;
  return result;
}

__n128 _UISmallVector<unsigned short,16ul>::insert<unsigned short *>(long long *a1, __n128 result, uint64_t a3, uint64_t a4, __int16 *a5, __int16 *a6)
{
  uint64_t v6 = *((void *)a1 + 4);
  uint64_t v7 = v6 + a6 - a5;
  uint64_t v8 = v6 - 1;
  if (v8 >= a4)
  {
    long long v9 = *a1;
    double result = (__n128)a1[1];
    do
    {
      v15[0] = v9;
      v15[1] = result;
      __int16 v10 = *((_WORD *)v15 + (v8 & 0xF));
      long long v16 = v9;
      __n128 v17 = result;
      *((_WORD *)&v16 + (((a6 - a5) + (_BYTE)v8) & 0xF)) = v10;
      long long v9 = v16;
      double result = v17;
      --v8;
    }
    while (v8 >= a4);
    *a1 = v16;
    a1[1] = (__int128)result;
  }
  *((void *)a1 + 4) = v7;
  if (a5 != a6)
  {
    long long v11 = *a1;
    double result = (__n128)a1[1];
    do
    {
      __int16 v12 = *a5++;
      long long v13 = v11;
      __n128 v14 = result;
      *((_WORD *)&v13 + (a4 & 0xF)) = v12;
      long long v11 = v13;
      double result = v14;
      *a1 = v13;
      a1[1] = (__int128)result;
      ++a4;
    }
    while (a5 != a6);
  }
  return result;
}

char *_ZNSt3__16vectorImNS_9allocatorImEEE16__init_with_sizeB8nn180100I22_UISmallVectorIteratorIDv16_tES7_EEvT_T0_m(char *result, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a6)
  {
    long long v9 = result;
    double result = std::vector<unsigned long>::__vallocate[abi:nn180100](result, a6);
    for (uint64_t i = (void *)*((void *)v9 + 1); a5 != a3; ++a3)
    {
      long long v11 = a2[1];
      v12[0] = *a2;
      v12[1] = v11;
      *i++ = *((unsigned __int16 *)v12 + (a3 & 0xF));
    }
    *((void *)v9 + 1) = i;
  }
  return result;
}

void std::vector<unsigned long>::insert(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    long long v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v29 = a1 + 16;
    if (v18) {
      uint64_t v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(a1 + 16, v18);
    }
    else {
      uint64_t v19 = 0;
    }
    unint64_t v20 = &v19[8 * v16];
    __p = v19;
    double v26 = v20;
    CGRect v28 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == __src) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        double v23 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v8, v22);
        unint64_t v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        double v26 = v20;
        CGRect v28 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        double v26 = v20;
      }
    }
    *(void *)unint64_t v20 = *(void *)v3;
    uint64_t v27 = v20 + 8;
    std::vector<unsigned long>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, __src);
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    long long v9 = __src + 8;
    __int16 v10 = v6 - 8;
    long long v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (__src <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)__src = *(void *)v3;
  }
}

void sub_185F4B46C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(char **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  unint64_t v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    unint64_t v7 = *(char **)(a2 + 8);
    do
    {
      uint64_t v9 = *((void *)v8 - 1);
      v8 -= 8;
      *((void *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  __int16 v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    unint64_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  long long v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void std::vector<unsigned long>::__insert_with_size[abi:nn180100]<unsigned long *,unsigned long *>(uint64_t a1, char *__dst, char *__src, unsigned char *a4)
{
  uint64_t v9 = *(void *)(a1 + 16);
  unint64_t v7 = (void *)(a1 + 16);
  uint64_t v8 = v9;
  unint64_t v10 = *(void *)(a1 + 8);
  if ((uint64_t)(v9 - v10) < 16)
  {
    uint64_t v11 = *(unsigned char **)a1;
    unint64_t v12 = ((uint64_t)(v10 - *(void *)a1) >> 3) + 2;
    if (v12 >> 61) {
      abort();
    }
    uint64_t v13 = (__dst - v11) >> 3;
    uint64_t v14 = v8 - (void)v11;
    uint64_t v15 = v14 >> 2;
    if (v14 >> 2 <= v12) {
      uint64_t v15 = ((uint64_t)(v10 - *(void *)a1) >> 3) + 2;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v15;
    }
    __p[4] = v7;
    if (v16) {
      uint64_t v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)v7, v16);
    }
    else {
      uint64_t v17 = 0;
    }
    double v26 = &v17[8 * v13];
    __p[0] = v17;
    __p[1] = v26;
    *(void *)double v26 = *(void *)__src;
    *((void *)v26 + 1) = *((void *)__src + 1);
    __p[2] = v26 + 16;
    __p[3] = &v17[8 * v16];
    std::vector<unsigned long>::__swap_out_circular_buffer((void **)a1, (uint64_t)__p, __dst);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    return;
  }
  uint64_t v18 = v10 - (void)__dst;
  if ((uint64_t)(v10 - (void)__dst) > 15)
  {
    uint64_t v19 = __src + 16;
    unint64_t v21 = *(char **)(a1 + 8);
LABEL_16:
    unint64_t v22 = __dst + 16;
    double v23 = v21 - 16;
    uint64_t v24 = v21;
    if ((unint64_t)(v21 - 16) < v10)
    {
      uint64_t v24 = v21;
      do
      {
        uint64_t v25 = *(void *)v23;
        v23 += 8;
        *(void *)uint64_t v24 = v25;
        v24 += 8;
      }
      while ((unint64_t)v23 < v10);
    }
    *(void *)(a1 + 8) = v24;
    if (v21 != v22) {
      memmove(&v21[-8 * ((v21 - v22) >> 3)], __dst, v21 - v22);
    }
    if (v19 != __src)
    {
      memmove(__dst, __src, v19 - __src);
    }
    return;
  }
  uint64_t v19 = &__src[v18];
  int64_t v20 = a4 - &__src[v18];
  if (a4 != &__src[v18]) {
    memmove(*(void **)(a1 + 8), &__src[v18], a4 - &__src[v18]);
  }
  unint64_t v21 = (char *)(v10 + v20);
  *(void *)(a1 + 8) = v10 + v20;
  if (v18 >= 1) {
    goto LABEL_16;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJ9_UIBitSetILm256EE14_UISmallVectorItLm16EENS_6vectorImNS_9allocatorImEEEEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJS9_SB_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v2;
    operator delete(v2);
  }
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJ9_UIBitSetILm256EE14_UISmallVectorItLm16EENS_6vectorImNS_9allocatorImEEEEEEEE16__generic_assignB8nn180100IRKNS0_17__copy_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSK_1EJS9_SB_SF_EEERKSW_EEEDcSO_DpT0_(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 48);
  if (v5 != -1)
  {
    if (!v5)
    {
      __n128 result = *(__n128 *)a3;
      long long v7 = *(_OWORD *)(a3 + 16);
      *a2 = *(_OWORD *)a3;
      a2[1] = v7;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1ED0E59F8[v5])(&v9, v4);
  }
  *(_DWORD *)(v4 + 48) = -1;
  __n128 result = *(__n128 *)a3;
  long long v8 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a3;
  *(_OWORD *)(v4 + 16) = v8;
  *(_DWORD *)(v4 + 48) = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJ9_UIBitSetILm256EE14_UISmallVectorItLm16EENS_6vectorImNS_9allocatorImEEEEEEEE16__generic_assignB8nn180100IRKNS0_17__copy_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSK_1EJS9_SB_SF_EEERKSW_EEEDcSO_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 48);
  if (v5 != -1)
  {
    if (v5 == 1)
    {
      __n128 result = *(__n128 *)a3;
      long long v7 = *(_OWORD *)(a3 + 16);
      *(void *)(a2 + 32) = *(void *)(a3 + 32);
      *(__n128 *)a2 = result;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1ED0E59F8[v5])(&v9, v4);
  }
  *(_DWORD *)(v4 + 48) = -1;
  __n128 result = *(__n128 *)a3;
  long long v8 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v4 + 32) = v8;
  *(__n128 *)uint64_t v4 = result;
  *(_DWORD *)(v4 + 48) = 1;
  return result;
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJ9_UIBitSetILm256EE14_UISmallVectorItLm16EENS_6vectorImNS_9allocatorImEEEEEEEE16__generic_assignB8nn180100IRKNS0_17__copy_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSK_1EJS9_SB_SF_EEERKSW_EEEDcSO_DpT0_(uint64_t *result, void *a2, void *a3)
{
  uint64_t v3 = *result;
  int v4 = *(_DWORD *)(*result + 48);
  if (v4 == 2)
  {
    if (a2 == a3) {
      return result;
    }
    uint64_t v6 = (char *)*a3;
    long long v7 = (char *)a3[1];
    int64_t v8 = (int64_t)&v7[-*a3];
    unint64_t v9 = v8 >> 3;
    uint64_t v10 = a2[2];
    uint64_t v11 = (char *)*a2;
    if (v8 >> 3 <= (unint64_t)((v10 - *a2) >> 3))
    {
      uint64_t v14 = (void **)(a2 + 1);
      unint64_t v21 = (unsigned char *)a2[1];
      unint64_t v22 = (v21 - v11) >> 3;
      if (v22 < v9)
      {
        double v23 = &v6[8 * v22];
        if (v21 != v11)
        {
          __n128 result = (uint64_t *)memmove(v11, v6, v21 - v11);
          uint64_t v11 = (char *)*v14;
        }
        int64_t v8 = v7 - v23;
        if (v7 == v23) {
          goto LABEL_27;
        }
        uint64_t v24 = v11;
        uint64_t v25 = v23;
        goto LABEL_26;
      }
    }
    else
    {
      if (v11)
      {
        a2[1] = v11;
        operator delete(v11);
        uint64_t v10 = 0;
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
      }
      if (v8 < 0) {
        abort();
      }
      uint64_t v12 = v10 >> 2;
      if (v10 >> 2 <= v9) {
        uint64_t v12 = v8 >> 3;
      }
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      __n128 result = (uint64_t *)std::vector<unsigned long>::__vallocate[abi:nn180100](a2, v13);
      uint64_t v15 = (char *)a2[1];
      uint64_t v14 = (void **)(a2 + 1);
      uint64_t v11 = v15;
    }
    if (v7 == v6)
    {
LABEL_27:
      void *v14 = &v11[v8];
      return result;
    }
    uint64_t v24 = v11;
    uint64_t v25 = v6;
LABEL_26:
    __n128 result = (uint64_t *)memmove(v24, v25, v8);
    goto LABEL_27;
  }
  uint64_t v17 = (char *)*a3;
  unint64_t v16 = (unsigned char *)a3[1];
  uint64_t v26 = 0;
  __dst = 0;
  uint64_t v28 = 0;
  int64_t v18 = v16 - v17;
  if (v16 == v17)
  {
    int64_t v20 = 0;
  }
  else
  {
    std::vector<unsigned long>::__vallocate[abi:nn180100](&v26, v18 >> 3);
    uint64_t v19 = (char *)__dst;
    __n128 result = (uint64_t *)memmove(__dst, v17, v18);
    int64_t v20 = &v19[v18];
    __dst = &v19[v18];
    int v4 = *(_DWORD *)(v3 + 48);
  }
  if (v4 != -1)
  {
    __n128 result = (uint64_t *)((uint64_t (*)(char *, uint64_t))off_1ED0E59F8[v4])(&v29, v3);
    int64_t v20 = (char *)__dst;
  }
  *(void *)uint64_t v3 = v26;
  *(void *)(v3 + 8) = v20;
  *(void *)(v3 + 16) = v28;
  *(_DWORD *)(v3 + 48) = 2;
  return result;
}

__n128 std::__variant_detail::__assignment<std::__variant_detail::__traits<_UIBitSet<256ul>,_UISmallVector<unsigned short,16ul>,std::vector<unsigned long>>>::__assign_alt[abi:nn180100]<2ul,std::vector<unsigned long>,std::vector<unsigned long>>(uint64_t a1, uint64_t a2, __n128 *a3)
{
  uint64_t v5 = *(unsigned int *)(a1 + 48);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5 != 2)
  {
    ((void (*)(char *, uint64_t))off_1ED0E59F8[v5])(&v9, a1);
LABEL_7:
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    __n128 result = *a3;
    *(__n128 *)a1 = *a3;
    *(void *)(a1 + 16) = a3[1].n128_u64[0];
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    *(_DWORD *)(a1 + 48) = 2;
    return result;
  }
  long long v7 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v7;
    operator delete(v7);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  __n128 result = *a3;
  *(__n128 *)a2 = *a3;
  *(void *)(a2 + 16) = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return result;
}

id _newInterfaceActionSectionsForAlertActionViewRepresentations(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v24 = 0;
  uint64_t v25 = &v24;
  uint64_t v26 = 0x3032000000;
  uint64_t v27 = __Block_byref_object_copy__78;
  uint64_t v28 = __Block_byref_object_dispose__78;
  id v29 = [MEMORY[0x1E4F1CA48] array];
  v22[0] = 0;
  v22[1] = v22;
  v22[2] = 0x3032000000;
  v22[3] = __Block_byref_object_copy__78;
  v22[4] = __Block_byref_object_dispose__78;
  id v23 = [MEMORY[0x1E4F1CA48] array];
  uint64_t v18 = 0;
  uint64_t v19 = &v18;
  uint64_t v20 = 0x2020000000;
  uint64_t v21 = 0;
  uint64_t v21 = [v4 indexGreaterThanIndex:0];
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = ___newInterfaceActionSectionsForAlertActionViewRepresentations_block_invoke;
  aBlock[3] = &unk_1E52ECE50;
  uint64_t v15 = v22;
  unint64_t v16 = &v24;
  uint64_t v17 = &v18;
  id v5 = v4;
  id v14 = v5;
  uint64_t v6 = (void (**)(void))_Block_copy(aBlock);
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  _OWORD v12[2] = ___newInterfaceActionSectionsForAlertActionViewRepresentations_block_invoke_2;
  _OWORD v12[3] = &unk_1E52ECE78;
  v12[4] = v22;
  long long v7 = (void (**)(void *, void *))_Block_copy(v12);
  for (unint64_t i = 0; i < [v3 count]; ++i)
  {
    if (i == v19[3]) {
      v6[2](v6);
    }
    char v9 = [v3 objectAtIndexedSubscript:i];
    v7[2](v7, v9);
  }
  v6[2](v6);
  id v10 = (id)v25[5];

  _Block_object_dispose(&v18, 8);
  _Block_object_dispose(v22, 8);

  _Block_object_dispose(&v24, 8);
  return v10;
}

void sub_185F517F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_185F53E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___newInterfaceActionSectionsForAlertActionViewRepresentations_block_invoke(uint64_t a1)
{
  if ([*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) count])
  {
    uint64_t v2 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    id v3 = [[UIInterfaceActionSection alloc] initWithActions:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
    [v2 addObject:v3];
  }
  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [*(id *)(a1 + 32) indexGreaterThanIndex:*(void *)(*(void *)(*(void *)(a1 + 56) + 8)+ 24)];
  uint64_t v4 = [MEMORY[0x1E4F1CA48] array];
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

void ___newInterfaceActionSectionsForAlertActionViewRepresentations_block_invoke_2(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = [v5 action];
  uint64_t v4 = [v3 _interfaceActionRepresentation];

  if (!v4)
  {
    uint64_t v4 = +[_UIAlertControllerActionViewInterfaceAction actionWithAlertControllerActionView:v5];
  }
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) addObject:v4];
}

void sub_185F5CEA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185F5E48C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 88));
  _Unwind_Resume(a1);
}

void sub_185F5F640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id *location, id *a13, id *a14, id *a15)
{
  objc_destroyWeak((id *)(v15 - 112));
  _Unwind_Resume(a1);
}

void sub_185F603A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  objc_destroyWeak(v25);
  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185F625B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185F63854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
}

void sub_185F63DE8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

id _UIKBMediaLog()
{
  if (qword_1EB260488 != -1) {
    dispatch_once(&qword_1EB260488, &__block_literal_global_739);
  }
  dispatch_workloop_t v0 = (void *)qword_1EB260480;
  return v0;
}

Class __getVKCStickerEffectClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB260478)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    _OWORD v6[3] = __VisionKitCoreLibraryCore_block_invoke;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_1E52ED118;
    uint64_t v8 = 0;
    qword_1EB260478 = _sl_dlopen();
  }
  if (!qword_1EB260478)
  {
    uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *VisionKitCoreLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIKeyboardMediaController.m", 40, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("VKCStickerEffect");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    id v5 = [NSString stringWithUTF8String:"Class getVKCStickerEffectClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIKeyboardMediaController.m", 41, @"Unable to find class %s", "VKCStickerEffect");

LABEL_10:
    __break(1u);
  }
  qword_1EB260470 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __VisionKitCoreLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB260478 = result;
  return result;
}

uint64_t selectorDescription(const char *a1)
{
  uint64_t v1 = NSString;
  Name = sel_getName(a1);
  return [v1 stringWithUTF8String:Name];
}

uint64_t _UITextFormattingViewControllerComponentKeyForAnimation(uint64_t a1)
{
  return [NSString stringWithFormat:@"_UITextFormattingTextAnimationCustomComponentKey_%@", a1];
}

id _UITextFormattingViewControllerCustomComponentClasses()
{
  if (qword_1EB25BD68 != -1) {
    dispatch_once(&qword_1EB25BD68, &__block_literal_global_192);
  }
  dispatch_workloop_t v0 = (void *)_MergedGlobals_1_10;
  return v0;
}

id _UITextFormattingViewControllerComponentGroupClasses()
{
  if (qword_1EB25BD78 != -1) {
    dispatch_once(&qword_1EB25BD78, &__block_literal_global_152);
  }
  dispatch_workloop_t v0 = (void *)qword_1EB25BD70;
  return v0;
}

void sub_185F6E540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __CoreHapticsLibraryCore_block_invoke_1()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25C938 = result;
  return result;
}

id UIKBAnalyticsUndoPanForState(unint64_t a1)
{
  uint64_t v1 = NSString;
  uint64_t v2 = _UIGestureRecognizerStateString(a1);
  uint64_t v3 = [v1 stringWithFormat:@"%@ Undo/Redo pan", v2];

  return v3;
}

__CFString *UIKBAnalyticsOperationForControlType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 5)
  {
    objc_msgSend(NSString, "stringWithFormat:", @"Unknown_%li", a1);
    uint64_t v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v1 = off_1E52ED7E8[a1 - 1];
  }
  return v1;
}

__CFString *UIKBAnalyticsSelectionTypeForGranularity(unint64_t a1)
{
  if (a1 >= 6)
  {
    objc_msgSend(NSString, "stringWithFormat:", @"Unknown_%li", a1);
    uint64_t v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v1 = off_1E52ED810[a1];
  }
  return v1;
}

__CFString *UIKBAnalyticsSelectionTypeForGestureState(unint64_t a1)
{
  if (a1 >= 8)
  {
    objc_msgSend(NSString, "stringWithFormat:", @"Unknown_%li", a1);
    uint64_t v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v1 = off_1E52ED840[a1];
  }
  return v1;
}

void sub_185F70C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getCHHapticPriorityHigh()
{
  uint64_t v6 = 0;
  long long v7 = &v6;
  uint64_t v8 = 0x2020000000;
  dispatch_workloop_t v0 = (void **)getCHHapticPriorityHighSymbolLoc_ptr;
  uint64_t v9 = getCHHapticPriorityHighSymbolLoc_ptr;
  if (!getCHHapticPriorityHighSymbolLoc_ptr)
  {
    uint64_t v1 = CoreHapticsLibrary_1();
    v7[3] = (uint64_t)dlsym(v1, "CHHapticPriorityHigh");
    getCHHapticPriorityHighSymbolLoc_ptr = v7[3];
    dispatch_workloop_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    uint64_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    id v5 = [NSString stringWithUTF8String:"CHHapticPriority getCHHapticPriorityHigh(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UIFeedbackCoreHapticsEngineUtilities.h", 34, @"%s", dlerror());

    __break(1u);
  }
}

void sub_185F70D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185F713A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _internal_populateParamtersFromPattern(void *a1, void **a2, void **a3)
{
  id v14 = a1;
  id v5 = [v14 parameterCurves];
  uint64_t v6 = [v5 count];

  if (v6)
  {
    long long v7 = *a3;
    uint64_t v8 = [v14 parameterCurves];
    uint64_t v9 = [v7 arrayByAddingObjectsFromArray:v8];
  }
  else
  {
    id v10 = [v14 parameters];
    uint64_t v11 = [v10 count];

    uint64_t v12 = v14;
    if (!v11) {
      goto LABEL_6;
    }
    unint64_t v13 = *a2;
    uint64_t v8 = [v14 parameters];
    uint64_t v9 = [v13 arrayByAddingObjectsFromArray:v8];
    a3 = a2;
  }
  *a3 = v9;

  uint64_t v12 = v14;
LABEL_6:
}

void sub_185F71BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185F730D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getCHHapticEventTypeAudioClick()
{
  uint64_t v6 = 0;
  long long v7 = &v6;
  uint64_t v8 = 0x2020000000;
  dispatch_workloop_t v0 = (void **)getCHHapticEventTypeAudioClickSymbolLoc_ptr;
  uint64_t v9 = getCHHapticEventTypeAudioClickSymbolLoc_ptr;
  if (!getCHHapticEventTypeAudioClickSymbolLoc_ptr)
  {
    uint64_t v1 = CoreHapticsLibrary_1();
    v7[3] = (uint64_t)dlsym(v1, "CHHapticEventTypeAudioClick");
    getCHHapticEventTypeAudioClickSymbolLoc_ptr = v7[3];
    dispatch_workloop_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    uint64_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    id v5 = [NSString stringWithUTF8String:"CHHapticEventType getCHHapticEventTypeAudioClick(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UIFeedbackCoreHapticsEngineUtilities.h", 44, @"%s", dlerror());

    __break(1u);
  }
}

void sub_185F7363C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getCHHapticEventTypeWheelsOfTime()
{
  uint64_t v6 = 0;
  long long v7 = &v6;
  uint64_t v8 = 0x2020000000;
  dispatch_workloop_t v0 = (void **)getCHHapticEventTypeWheelsOfTimeSymbolLoc_ptr;
  uint64_t v9 = getCHHapticEventTypeWheelsOfTimeSymbolLoc_ptr;
  if (!getCHHapticEventTypeWheelsOfTimeSymbolLoc_ptr)
  {
    uint64_t v1 = CoreHapticsLibrary_1();
    v7[3] = (uint64_t)dlsym(v1, "CHHapticEventTypeWheelsOfTime");
    getCHHapticEventTypeWheelsOfTimeSymbolLoc_ptr = v7[3];
    dispatch_workloop_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    uint64_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    id v5 = [NSString stringWithUTF8String:"CHHapticPrivilegedEventType getCHHapticEventTypeWheelsOfTime(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UIFeedbackCoreHapticsEngineUtilities.h", 45, @"%s", dlerror());

    __break(1u);
  }
}

void sub_185F737A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getCHHapticEventTypeAudioContinuous()
{
  uint64_t v6 = 0;
  long long v7 = &v6;
  uint64_t v8 = 0x2020000000;
  dispatch_workloop_t v0 = (void **)getCHHapticEventTypeAudioContinuousSymbolLoc_ptr;
  uint64_t v9 = getCHHapticEventTypeAudioContinuousSymbolLoc_ptr;
  if (!getCHHapticEventTypeAudioContinuousSymbolLoc_ptr)
  {
    uint64_t v1 = CoreHapticsLibrary_1();
    v7[3] = (uint64_t)dlsym(v1, "CHHapticEventTypeAudioContinuous");
    getCHHapticEventTypeAudioContinuousSymbolLoc_ptr = v7[3];
    dispatch_workloop_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    uint64_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    id v5 = [NSString stringWithUTF8String:"CHHapticEventType getCHHapticEventTypeAudioContinuous(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UIFeedbackCoreHapticsEngineUtilities.h", 42, @"%s", dlerror());

    __break(1u);
  }
}

void sub_185F7390C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getCHHapticEventTypeAudioClickSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary_1();
  uint64_t result = dlsym(v2, "CHHapticEventTypeAudioClick");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCHHapticEventTypeAudioClickSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __CoreHapticsLibraryCore_block_invoke_2()
{
  uint64_t result = _sl_dlopen();
  CoreHapticsLibraryCore_frameworkLibrary_1 = result;
  return result;
}

void *__getCHHapticEventTypeWheelsOfTimeSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary_1();
  uint64_t result = dlsym(v2, "CHHapticEventTypeWheelsOfTime");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCHHapticEventTypeWheelsOfTimeSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCHHapticEventTypeAudioContinuousSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary_1();
  uint64_t result = dlsym(v2, "CHHapticEventTypeAudioContinuous");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCHHapticEventTypeAudioContinuousSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCHHapticEngineOptionKeyLocalitySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary_1();
  uint64_t result = dlsym(v2, "CHHapticEngineOptionKeyLocality");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCHHapticEngineOptionKeyLocalitySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCHHapticLocalityFullGamutSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary_1();
  uint64_t result = dlsym(v2, "CHHapticLocalityFullGamut");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25CD38 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCHHapticEngineOptionKeyUsageCategorySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary_1();
  uint64_t result = dlsym(v2, "CHHapticEngineOptionKeyUsageCategory");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25CD40 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCHHapticUsageCategoryUIFeedbackSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary_1();
  uint64_t result = dlsym(v2, "CHHapticUsageCategoryUIFeedback");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25CD48 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCHHapticPatternKeyPrioritySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary_1();
  uint64_t result = dlsym(v2, "CHHapticPatternKeyPriority");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCHHapticPatternKeyPrioritySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCHHapticPriorityHighSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary_1();
  uint64_t result = dlsym(v2, "CHHapticPriorityHigh");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCHHapticPriorityHighSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCHHapticEngineOptionKeyHapticPowerUsageSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary_1();
  uint64_t result = dlsym(v2, "CHHapticEngineOptionKeyHapticPowerUsage");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25CD50 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCHHapticPowerUsageLowSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary_1();
  uint64_t result = dlsym(v2, "CHHapticPowerUsageLow");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25CD58 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCHHapticLocalityDefaultWithFullStrengthSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary_1();
  uint64_t result = dlsym(v2, "CHHapticLocalityDefaultWithFullStrength");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25CD60 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCHHapticEngineOptionKeyPrioritySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary_1();
  uint64_t result = dlsym(v2, "CHHapticEngineOptionKeyPriority");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25CD68 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCHHapticAudioResourceKeyUseVolumeEnvelopeSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary_1();
  uint64_t result = dlsym(v2, "CHHapticAudioResourceKeyUseVolumeEnvelope");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25CD70 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCHHapticEventTypeAudioCustomSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary_1();
  uint64_t result = dlsym(v2, "CHHapticEventTypeAudioCustom");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCHHapticEventTypeAudioCustomSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCHHapticEventTypeHapticContinuousSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary_1();
  uint64_t result = dlsym(v2, "CHHapticEventTypeHapticContinuous");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCHHapticEventTypeHapticContinuousSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCHHapticEventParameterIDHapticIntensitySymbolLoc_block_invoke_0(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary_1();
  uint64_t result = dlsym(v2, "CHHapticEventParameterIDHapticIntensity");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCHHapticEventParameterIDHapticIntensitySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCHHapticEventParameterIDHapticSharpnessSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary_1();
  uint64_t result = dlsym(v2, "CHHapticEventParameterIDHapticSharpness");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCHHapticEventParameterIDHapticSharpnessSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCHHapticEventTypeHapticTransientSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary_1();
  uint64_t result = dlsym(v2, "CHHapticEventTypeHapticTransient");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCHHapticEventTypeHapticTransientSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void getCHHapticEventParameterIDAudioPan()
{
  uint64_t v6 = 0;
  long long v7 = &v6;
  uint64_t v8 = 0x2020000000;
  dispatch_workloop_t v0 = (void **)getCHHapticEventParameterIDAudioPanSymbolLoc_ptr;
  uint64_t v9 = getCHHapticEventParameterIDAudioPanSymbolLoc_ptr;
  if (!getCHHapticEventParameterIDAudioPanSymbolLoc_ptr)
  {
    uint64_t v1 = CoreHapticsLibrary_1();
    v7[3] = (uint64_t)dlsym(v1, "CHHapticEventParameterIDAudioPan");
    getCHHapticEventParameterIDAudioPanSymbolLoc_ptr = v7[3];
    dispatch_workloop_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    uint64_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    id v5 = [NSString stringWithUTF8String:"CHHapticEventParameterID getCHHapticEventParameterIDAudioPan(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UIFeedbackCoreHapticsEngineUtilities.h", 59, @"%s", dlerror());

    __break(1u);
  }
}

void sub_185F740D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getCHHapticEventParameterIDAudioVolumeSymbolLoc_block_invoke_0(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary_1();
  uint64_t result = dlsym(v2, "CHHapticEventParameterIDAudioVolume");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCHHapticEventParameterIDAudioVolumeSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCHHapticEventParameterIDAudioPitchSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary_1();
  uint64_t result = dlsym(v2, "CHHapticEventParameterIDAudioPitch");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCHHapticEventParameterIDAudioPitchSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCHHapticEventParameterIDAudioPanSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary_1();
  uint64_t result = dlsym(v2, "CHHapticEventParameterIDAudioPan");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCHHapticEventParameterIDAudioPanSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCHHapticEventParameterIDAttackTimeSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary_1();
  uint64_t result = dlsym(v2, "CHHapticEventParameterIDAttackTime");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCHHapticEventParameterIDAttackTimeSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCHHapticEventParameterIDDecayTimeSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary_1();
  uint64_t result = dlsym(v2, "CHHapticEventParameterIDDecayTime");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCHHapticEventParameterIDDecayTimeSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCHHapticEventParameterIDReleaseTimeSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary_1();
  uint64_t result = dlsym(v2, "CHHapticEventParameterIDReleaseTime");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCHHapticEventParameterIDReleaseTimeSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void getCHHapticEventParameterIDAudioBrightness()
{
  uint64_t v6 = 0;
  long long v7 = &v6;
  uint64_t v8 = 0x2020000000;
  dispatch_workloop_t v0 = (void **)getCHHapticEventParameterIDAudioBrightnessSymbolLoc_ptr;
  uint64_t v9 = getCHHapticEventParameterIDAudioBrightnessSymbolLoc_ptr;
  if (!getCHHapticEventParameterIDAudioBrightnessSymbolLoc_ptr)
  {
    uint64_t v1 = CoreHapticsLibrary_1();
    v7[3] = (uint64_t)dlsym(v1, "CHHapticEventParameterIDAudioBrightness");
    getCHHapticEventParameterIDAudioBrightnessSymbolLoc_ptr = v7[3];
    dispatch_workloop_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    uint64_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    id v5 = [NSString stringWithUTF8String:"CHHapticEventParameterID getCHHapticEventParameterIDAudioBrightness(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UIFeedbackCoreHapticsEngineUtilities.h", 60, @"%s", dlerror());

    __break(1u);
  }
}

void sub_185F74420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getCHHapticEventParameterIDSustained()
{
  uint64_t v6 = 0;
  long long v7 = &v6;
  uint64_t v8 = 0x2020000000;
  dispatch_workloop_t v0 = (void **)getCHHapticEventParameterIDSustainedSymbolLoc_ptr;
  uint64_t v9 = getCHHapticEventParameterIDSustainedSymbolLoc_ptr;
  if (!getCHHapticEventParameterIDSustainedSymbolLoc_ptr)
  {
    uint64_t v1 = CoreHapticsLibrary_1();
    v7[3] = (uint64_t)dlsym(v1, "CHHapticEventParameterIDSustained");
    getCHHapticEventParameterIDSustainedSymbolLoc_ptr = v7[3];
    dispatch_workloop_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    uint64_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    id v5 = [NSString stringWithUTF8String:"CHHapticEventParameterID getCHHapticEventParameterIDSustained(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UIFeedbackCoreHapticsEngineUtilities.h", 55, @"%s", dlerror());

    __break(1u);
  }
}

void sub_185F74588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getCHHapticEventParameterIDAudioBrightnessSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary_1();
  uint64_t result = dlsym(v2, "CHHapticEventParameterIDAudioBrightness");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCHHapticEventParameterIDAudioBrightnessSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCHHapticEventParameterIDSustainedSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary_1();
  uint64_t result = dlsym(v2, "CHHapticEventParameterIDSustained");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCHHapticEventParameterIDSustainedSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCHHapticDynamicParameterIDAudioVolumeControlSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary_1();
  uint64_t result = dlsym(v2, "CHHapticDynamicParameterIDAudioVolumeControl");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25CD98 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCHHapticDynamicParameterIDAudioPitchControlSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary_1();
  uint64_t result = dlsym(v2, "CHHapticDynamicParameterIDAudioPitchControl");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25CDA0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCHHapticDynamicParameterIDAudioPanControlSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary_1();
  uint64_t result = dlsym(v2, "CHHapticDynamicParameterIDAudioPanControl");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25CDA8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCHHapticDynamicParameterIDAudioAttackTimeControlSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary_1();
  uint64_t result = dlsym(v2, "CHHapticDynamicParameterIDAudioAttackTimeControl");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25CDB0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCHHapticDynamicParameterIDAudioDecayTimeControlSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary_1();
  uint64_t result = dlsym(v2, "CHHapticDynamicParameterIDAudioDecayTimeControl");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25CDB8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCHHapticDynamicParameterIDAudioReleaseTimeControlSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary_1();
  uint64_t result = dlsym(v2, "CHHapticDynamicParameterIDAudioReleaseTimeControl");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25CDC0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCHHapticDynamicParameterIDHapticIntensityControlSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary_1();
  uint64_t result = dlsym(v2, "CHHapticDynamicParameterIDHapticIntensityControl");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25CDC8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCHHapticDynamicParameterIDHapticAttackTimeControlSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary_1();
  uint64_t result = dlsym(v2, "CHHapticDynamicParameterIDHapticAttackTimeControl");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25CDD0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCHHapticDynamicParameterIDHapticDecayTimeControlSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary_1();
  uint64_t result = dlsym(v2, "CHHapticDynamicParameterIDHapticDecayTimeControl");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25CDD8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCHHapticDynamicParameterIDHapticReleaseTimeControlSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary_1();
  uint64_t result = dlsym(v2, "CHHapticDynamicParameterIDHapticReleaseTimeControl");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25CDE0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCHHapticDynamicParameterIDHapticSharpnessControlSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreHapticsLibrary_1();
  uint64_t result = dlsym(v2, "CHHapticDynamicParameterIDHapticSharpnessControl");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25CDE8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void __getCHHapticDynamicParameterClass_block_invoke(uint64_t a1)
{
  CoreHapticsLibrary_1();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CHHapticDynamicParameter");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1EB25CDF0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getCHHapticDynamicParameterClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"_UIFeedbackCoreHapticsEngineUtilities.h", 23, @"Unable to find class %s", "CHHapticDynamicParameter");

    __break(1u);
  }
}

NSObject *_UIFeedbackPreciseDispatchAfter(void *a1, void *a2, double a3)
{
  id v5 = a1;
  id v6 = a2;
  if (!v5)
  {
    id v5 = MEMORY[0x1E4F14428];
    id v7 = MEMORY[0x1E4F14428];
  }
  dispatch_source_t v8 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 1uLL, v5);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  _OWORD v15[2] = ___UIFeedbackPreciseDispatchAfter_block_invoke;
  v15[3] = &unk_1E52DB330;
  id v17 = v6;
  uint64_t v9 = v8;
  unint64_t v16 = v9;
  id v10 = v6;
  dispatch_source_set_event_handler(v9, v15);
  dispatch_time_t v11 = dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
  dispatch_source_set_timer(v9, v11, 0xFFFFFFFFFFFFFFFFLL, 0);
  dispatch_activate(v9);
  uint64_t v12 = v16;
  unint64_t v13 = v9;

  return v13;
}

void sub_185F75DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getSDRDiagnosticReporterClass_block_invoke_0(uint64_t a1)
{
  SymptomDiagnosticReporterLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SDRDiagnosticReporter");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1EB25D818 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getSDRDiagnosticReporterClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"_UIFeedbackEngine.m", 35, @"Unable to find class %s", "SDRDiagnosticReporter");

    __break(1u);
  }
}

void *SymptomDiagnosticReporterLibrary()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!SymptomDiagnosticReporterLibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    _OWORD v4[2] = (void *)3221225472;
    v4[3] = __SymptomDiagnosticReporterLibraryCore_block_invoke_0;
    void v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_1E52EDA28;
    uint64_t v6 = 0;
    SymptomDiagnosticReporterLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  dispatch_workloop_t v0 = (void *)SymptomDiagnosticReporterLibraryCore_frameworkLibrary;
  if (!SymptomDiagnosticReporterLibraryCore_frameworkLibrary)
  {
    dispatch_workloop_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *SymptomDiagnosticReporterLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"_UIFeedbackEngine.m", 34, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __SymptomDiagnosticReporterLibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  SymptomDiagnosticReporterLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

void *__getkSymptomDiagnosticTypeEnergySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = SymptomDiagnosticReporterLibrary();
  uint64_t result = dlsym(v2, "kSymptomDiagnosticTypeEnergy");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25D820 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __CoreHapticsLibraryCore_block_invoke_3()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25D830 = result;
  return result;
}

id _UIKeyboardImplLog()
{
  if (_UIKeyboardImplLog_onceToken != -1) {
    dispatch_once(&_UIKeyboardImplLog_onceToken, &__block_literal_global_197);
  }
  dispatch_workloop_t v0 = (void *)_UIKeyboardImplLog_log;
  return v0;
}

id _UIKeyboardExtendedLog()
{
  if (_UIKeyboardExtendedLog_onceToken != -1) {
    dispatch_once(&_UIKeyboardExtendedLog_onceToken, &__block_literal_global_5_0);
  }
  dispatch_workloop_t v0 = (void *)_UIKeyboardExtendedLog_log;
  return v0;
}

id CatalystTextInputLog_UIKit()
{
  if (CatalystTextInputLog_UIKit_onceToken != -1) {
    dispatch_once(&CatalystTextInputLog_UIKit_onceToken, &__block_literal_global_8_4);
  }
  dispatch_workloop_t v0 = (void *)CatalystTextInputLog_UIKit_log;
  return v0;
}

id _UIKeyboardLog()
{
  if (_UIKeyboardLog_onceToken != -1) {
    dispatch_once(&_UIKeyboardLog_onceToken, &__block_literal_global_11);
  }
  dispatch_workloop_t v0 = (void *)_UIKeyboardLog_log;
  return v0;
}

id _UIKeyboardTaskQueueLog()
{
  if (_UIKeyboardTaskQueueLog_onceToken != -1) {
    dispatch_once(&_UIKeyboardTaskQueueLog_onceToken, &__block_literal_global_14_3);
  }
  dispatch_workloop_t v0 = (void *)_UIKeyboardTaskQueueLog_log;
  return v0;
}

id _UIKeyboardInputSessionChangeLog()
{
  if (_UIKeyboardInputSessionChangeLog_onceToken != -1) {
    dispatch_once(&_UIKeyboardInputSessionChangeLog_onceToken, &__block_literal_global_17);
  }
  dispatch_workloop_t v0 = (void *)_UIKeyboardInputSessionChangeLog_log;
  return v0;
}

id _UIKBInlineTextCompletionLog()
{
  if (_UIKBInlineTextCompletionLog_onceToken != -1) {
    dispatch_once(&_UIKBInlineTextCompletionLog_onceToken, &__block_literal_global_20_0);
  }
  dispatch_workloop_t v0 = (void *)_UIKBInlineTextCompletionLog_log;
  return v0;
}

id _UIKeyboardSmartReplyLog()
{
  if (_UIKeyboardSmartReplyLog_onceToken != -1) {
    dispatch_once(&_UIKeyboardSmartReplyLog_onceToken, &__block_literal_global_23_0);
  }
  dispatch_workloop_t v0 = (void *)_UIKeyboardSmartReplyLog_log;
  return v0;
}

void sub_185F783EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_185F7872C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185F78BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getAudioServicesSetPropertySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = AudioToolboxLibrary();
  uint64_t result = dlsym(v2, "AudioServicesSetProperty");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAudioServicesSetPropertySymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __AudioToolboxLibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  AudioToolboxLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

void *__getkAudioServicesPlaySystemSoundOptionFlagsKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = AudioToolboxLibrary();
  uint64_t result = dlsym(v2, "kAudioServicesPlaySystemSoundOptionFlagsKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25C970 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getkAudioServicesPlaySystemSoundOptionVolumeKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = AudioToolboxLibrary();
  uint64_t result = dlsym(v2, "kAudioServicesPlaySystemSoundOptionVolumeKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25C978 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAudioServicesPlaySystemSoundWithOptionsSymbolLoc_block_invoke_0(uint64_t a1)
{
  uint64_t v2 = AudioToolboxLibrary();
  uint64_t result = dlsym(v2, "AudioServicesPlaySystemSoundWithOptions");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAudioServicesPlaySystemSoundWithOptionsSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAudioServicesStopSystemSoundSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = AudioToolboxLibrary();
  uint64_t result = dlsym(v2, "AudioServicesStopSystemSound");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1EB25C980 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_185F79EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double _UIFocusAnimationNormalizedDurationScaleFactorInContext(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  double v3 = 1.0;
  if (v1)
  {
    [v1 _focusVelocity];
    long double v5 = v4;
    [v2 _focusVelocity];
    double v7 = hypot(v5, v6);
    double v8 = _UIInternalPreferenceUsesDefault_1((int *)&unk_1EB2572D0, @"FocusAnimationNormalizedDurationScaleFactorSlowThreshold")? 0.0: *(double *)&qword_1EB2572D8;
    int v9 = _UIInternalPreferenceUsesDefault_1((int *)&unk_1EB2572E0, @"FocusAnimationNormalizedDurationScaleFactorFastThreshold");
    if (v7 >= v8)
    {
      double v10 = *(double *)&qword_1EB2572E8;
      if (v9) {
        double v10 = 30000.0;
      }
      double v3 = fmin(fmax(1.0 - (v7 - v8) / v10, 0.0), 1.0);
    }
  }

  return v3;
}

void sub_185F7C428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

uint64_t _UIFocusItemIsViewOrRespondsToSelector(void *a1)
{
  id v1 = a1;
  if (_IsKindOfUIView((uint64_t)v1)) {
    char v2 = 1;
  }
  else {
    char v2 = objc_opt_respondsToSelector();
  }

  return v2 & 1;
}

uint64_t _UIFocusEnvironmentIsViewOrViewControllerOrRespondsToSelector(void *a1)
{
  id v1 = a1;
  if (_IsKindOfUIView((uint64_t)v1) & 1) != 0 || (objc_msgSend(v1, "__isKindOfUIViewController")) {
    char v2 = 1;
  }
  else {
    char v2 = objc_opt_respondsToSelector();
  }

  return v2 & 1;
}

id _UIFocusItemSafeCast(void *a1)
{
  id v1 = a1;
  if ((_IsKindOfUIView((uint64_t)v1) & 1) != 0 || [v1 conformsToProtocol:&unk_1ED401A30]) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

id _UIFocusEnvironmentSafeCast(void *a1)
{
  id v1 = a1;
  if ((_IsKindOfUIView((uint64_t)v1) & 1) != 0
    || (objc_msgSend(v1, "__isKindOfUIViewController") & 1) != 0
    || [v1 conformsToProtocol:&unk_1ED401940])
  {
    id v2 = v1;
  }
  else
  {
    id v2 = 0;
  }

  return v2;
}

id _UIFocusEnvironmentRootAncestorEnvironment(void *a1)
{
  id v1 = a1;
  if (!v1)
  {
    double v7 = [MEMORY[0x1E4F28B00] currentHandler];
    double v8 = [NSString stringWithUTF8String:"id<UIFocusEnvironment>  _Nonnull _UIFocusEnvironmentRootAncestorEnvironment(__strong id<UIFocusEnvironment> _Nonnull)"];
    [v7 handleFailureInFunction:v8, @"UIFocusEnvironment.m", 96, @"Invalid parameter not satisfying: %@", @"environment" file lineNumber description];
  }
  id v2 = v1;
  double v3 = _UIFocusEnvironmentParentEnvironment(v2);

  id v4 = v2;
  if (v3)
  {
    long double v5 = v2;
    do
    {
      id v4 = v3;

      double v3 = _UIFocusEnvironmentParentEnvironment(v4);

      long double v5 = v4;
    }
    while (v3);
  }

  return v4;
}

BOOL _UIFocusEnvironmentIsAncestorOfEnvironment(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  long double v5 = v4;
  BOOL v6 = 0;
  if (v3 && v4)
  {
    uint64_t v11 = 0;
    uint64_t v12 = &v11;
    uint64_t v13 = 0x2020000000;
    char v14 = 0;
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = ___UIFocusEnvironmentIsAncestorOfEnvironment_block_invoke;
    v8[3] = &unk_1E52EDBF0;
    id v9 = v3;
    double v10 = &v11;
    _UIFocusEnvironmentEnumerateAncestorEnvironments(v5, v8);
    BOOL v6 = *((unsigned char *)v12 + 24) != 0;

    _Block_object_dispose(&v11, 8);
  }

  return v6;
}

void sub_185F7E8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _UIFocusEnvironmentIsFocusedOrContainsFocus(void *a1)
{
  id v1 = a1;
  if (!v1)
  {
    double v7 = [MEMORY[0x1E4F28B00] currentHandler];
    double v8 = [NSString stringWithUTF8String:"BOOL _UIFocusEnvironmentIsFocusedOrContainsFocus(__strong id<UIFocusEnvironment> _Nonnull)"];
    [v7 handleFailureInFunction:v8, @"UIFocusEnvironment.m", 132, @"Invalid parameter not satisfying: %@", @"environment" file lineNumber description];
  }
  id v2 = +[UIFocusSystem focusSystemForEnvironment:v1];
  if ((_UIInternalPreferenceUsesDefault_0(&_UIInternalPreference_FocusEnvironmentUseLegacyIsFocusedOrContainsFocusLogic, @"FocusEnvironmentUseLegacyIsFocusedOrContainsFocusLogic") & 1) != 0|| !byte_1E8FD4F0C)
  {
    uint64_t IsAncestorOfEnvironment = [v2 _focusedItemIsContainedInEnvironment:v1 includeSelf:1];
  }
  else
  {
    id v3 = [v2 focusedItem];
    id v4 = v3;
    if (v3 == v1)
    {
      uint64_t IsAncestorOfEnvironment = 1;
    }
    else if (v3)
    {
      uint64_t IsAncestorOfEnvironment = _UIFocusEnvironmentIsAncestorOfEnvironment(v1, v3);
    }
    else
    {
      uint64_t IsAncestorOfEnvironment = 0;
    }
  }
  return IsAncestorOfEnvironment;
}

id _UIFocusEnvironmentFirstCommonAncestor(void *a1, void *a2)
{
  return _UITreeFirstCommonAncestor(a1, a2, sel_parentFocusEnvironment);
}

BOOL _UIFocusEnvironmentsHaveCommonHierarchy(void *a1, void *a2)
{
  BOOL v2 = 0;
  if (a1 && a2)
  {
    id v4 = a2;
    id v5 = a1;
    _UITreeFirstCommonAncestor(v5, v4, sel_parentFocusEnvironment);
    id v6 = (id)objc_claimAutoreleasedReturnValue();

    BOOL v2 = v6 == v5 || v6 == v4;
  }
  return v2;
}

uint64_t _UIFocusEnvironmentShouldUpdateFocus(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (!v4)
  {
    double v8 = [MEMORY[0x1E4F28B00] currentHandler];
    id v9 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL _UIFocusEnvironmentShouldUpdateFocus(__strong id<UIFocusEnvironment> _Nonnull, UIFocusUpdateContext *__strong _Nonnull)");
    [v8 handleFailureInFunction:v9 file:@"UIFocusEnvironment.m" lineNumber:182 description:@"Attempted to validate a focus update with a nil context."];
  }
  if (_UIFocusItemIsViewOrRespondsToSelector(v3))
  {
    uint64_t v5 = [v3 _shouldUpdateFocusInContext:v4];
  }
  else
  {
    if (!_UIFocusEnvironmentIsViewOrViewControllerOrRespondsToSelector(v3))
    {
      uint64_t v6 = 1;
      goto LABEL_9;
    }
    uint64_t v5 = [v3 shouldUpdateFocusInContext:v4];
  }
  uint64_t v6 = v5;
LABEL_9:

  return v6;
}

uint64_t _UIFocusEnvironmentInheritedFocusMovementStyle(void *a1)
{
  id v1 = a1;
  if (!v1)
  {
    id v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"_UIFocusMovementStyle _UIFocusEnvironmentInheritedFocusMovementStyle(__strong id<UIFocusEnvironment> _Nonnull)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIFocusEnvironment.m", 197, @"Cannot determine preferred focus movement style for nil focus environment.", 0);
  }
  uint64_t v7 = 0;
  double v8 = &v7;
  uint64_t v9 = 0x2020000000;
  uint64_t v10 = 0;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = ___UIFocusEnvironmentInheritedFocusMovementStyle_block_invoke;
  _OWORD v6[3] = &unk_1E52EDC68;
  v6[4] = &v7;
  _UIFocusEnvironmentEnumerateAncestorEnvironments(v1, v6);
  uint64_t v2 = v8[3];
  if (!v2)
  {
    uint64_t v2 = 1;
    v8[3] = 1;
  }
  _Block_object_dispose(&v7, 8);

  return v2;
}

void sub_185F7ECF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _UIFocusEnvironmentIsEligibleForFocusInteraction(void *a1)
{
  id v1 = a1;
  if (!v1)
  {
    id v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"BOOL _UIFocusEnvironmentIsEligibleForFocusInteraction(__strong id<UIFocusEnvironment> _Nonnull)"];
    [v4 handleFailureInFunction:v5 file:@"UIFocusEnvironment.m" lineNumber:222 description:@"Cannot determine the focus interaction eligibility for a nil focus environment."];
  }
  if (_UIFocusItemIsViewOrRespondsToSelector(v1)) {
    uint64_t v2 = [v1 _isEligibleForFocusInteraction];
  }
  else {
    uint64_t v2 = 1;
  }

  return v2;
}

uint64_t _UIFocusEnvironmentIsEligibleForFocusOcclusion(void *a1, unsigned char *a2)
{
  id v3 = a1;
  if (!v3)
  {
    uint64_t v7 = [MEMORY[0x1E4F28B00] currentHandler];
    double v8 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL _UIFocusEnvironmentIsEligibleForFocusOcclusion(__strong id<UIFocusEnvironment> _Nonnull, BOOL * _Nullable)");
    [v7 handleFailureInFunction:v8 file:@"UIFocusEnvironment.m" lineNumber:234 description:@"Cannot determine the focus occlusion eligibility for a nil focus environment."];
  }
  char IsEligibleForFocusInteraction = _UIFocusEnvironmentIsEligibleForFocusInteraction(v3);
  if (a2) {
    *a2 = IsEligibleForFocusInteraction;
  }
  if (IsEligibleForFocusInteraction)
  {
    uint64_t v5 = 1;
  }
  else if (_UIFocusItemIsViewOrRespondsToSelector(v3))
  {
    uint64_t v5 = [v3 _isEligibleForFocusOcclusion];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t _UIFocusEnvironmentAndAncestorsAreEligibleForFocusInteraction(void *a1)
{
  id v1 = a1;
  if (!v1)
  {
    id v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"BOOL _UIFocusEnvironmentAndAncestorsAreEligibleForFocusInteraction(__strong id<UIFocusEnvironment> _Nonnull)"];
    [v4 handleFailureInFunction:v5 file:@"UIFocusEnvironment.m" lineNumber:254 description:@"Cannot determine the focus interaction eligibility for a nil focus environment."];
  }
  uint64_t v7 = 0;
  double v8 = &v7;
  uint64_t v9 = 0x2020000000;
  char v10 = 1;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = ___UIFocusEnvironmentAndAncestorsAreEligibleForFocusInteraction_block_invoke;
  _OWORD v6[3] = &unk_1E52EDC68;
  v6[4] = &v7;
  _UIFocusEnvironmentEnumerateAncestorEnvironments(v1, v6);
  uint64_t v2 = *((unsigned __int8 *)v8 + 24);
  _Block_object_dispose(&v7, 8);

  return v2;
}

void sub_185F7F054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _UIFocusEnvironmentPreferredFocusMapContainer(void *a1)
{
  id v1 = a1;
  if (!v1)
  {
    id v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"id<_UIFocusRegionContainer>  _Nullable _UIFocusEnvironmentPreferredFocusMapContainer(__strong id<UIFocusEnvironment> _Nonnull)"];
    [v4 handleFailureInFunction:v5, @"UIFocusEnvironment.m", 282, @"Invalid parameter not satisfying: %@", @"environment" file lineNumber description];
  }
  uint64_t v7 = 0;
  double v8 = &v7;
  uint64_t v9 = 0x3032000000;
  char v10 = __Block_byref_object_copy__84;
  uint64_t v11 = __Block_byref_object_dispose__84;
  id v12 = 0;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = ___UIFocusEnvironmentPreferredFocusMapContainer_block_invoke;
  _OWORD v6[3] = &unk_1E52EDC68;
  v6[4] = &v7;
  _UIFocusEnvironmentEnumerateAncestorEnvironments(v1, v6);
  id v2 = (id)v8[5];
  _Block_object_dispose(&v7, 8);

  return v2;
}

void sub_185F7F21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double _UIFocusEnvironmentContainerFrameInCoordinateSpace(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = _UIFocusItemSafeCast(v3);
  v12.origin.double x = _UIFocusItemFrameInCoordinateSpace(v5, v4);
  double x = v12.origin.x;
  if (CGRectIsNull(v12))
  {
    uint64_t v7 = [v3 focusItemContainer];
    double v8 = [v7 coordinateSpace];
    uint64_t v9 = v8;
    if (v7 && v8)
    {
      [v8 bounds];
      objc_msgSend(v4, "convertRect:fromCoordinateSpace:", v9);
      double x = v10;
    }
  }
  return x;
}

id _UIFocusEnvironmentPreferredNodeToFocusedItem(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = +[UIFocusSystem focusSystemForEnvironment:v3];
  id v6 = [v5 focusedItem];

  if (v6) {
    BOOL v7 = v6 == v3;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    id v8 = 0;
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v18 = &v17;
    uint64_t v19 = 0x3032000000;
    uint64_t v20 = __Block_byref_object_copy__84;
    uint64_t v21 = __Block_byref_object_dispose__84;
    id v22 = 0;
    v15[0] = 0;
    v15[1] = v15;
    _OWORD v15[2] = 0x3032000000;
    v15[3] = __Block_byref_object_copy__84;
    void v15[4] = __Block_byref_object_dispose__84;
    id v16 = 0;
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = ___UIFocusEnvironmentPreferredNodeToFocusedItem_block_invoke;
    v10[3] = &unk_1E52EDC18;
    id v11 = v3;
    uint64_t v13 = &v17;
    char v14 = v15;
    id v12 = v4;
    _UIFocusEnvironmentEnumerateAncestorEnvironments(v6, v10);
    id v8 = (id)v18[5];

    _Block_object_dispose(v15, 8);
    _Block_object_dispose(&v17, 8);
  }
  return v8;
}

void sub_185F7F5C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t _UIFocusEnvironmentRotaryFocusMovementAxis(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    if (_UIFocusEnvironmentIsViewOrViewControllerOrRespondsToSelector(v1)) {
      uint64_t v3 = [v2 _rotaryFocusMovementAxis];
    }
    else {
      uint64_t v3 = _UIFocusEnvironmentDefaultRotaryFocusMovementAxis(v2);
    }
    uint64_t v4 = v3;
  }
  else
  {
    uint64_t v4 = -1;
  }

  return v4;
}

uint64_t _UIFocusEnvironmentDefaultRotaryFocusMovementAxis(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    uint64_t v3 = [v1 focusItemContainer];
    if (_UIFocusItemContainerIsScrollableContainer(v3)
      && _UIFocusEnvironmentPrefersFocusContainment(v2))
    {
      uint64_t v4 = _UIFocusItemScrollableContainerPrimaryAxis(v3);
      if (v4 == 2) {
        uint64_t v5 = 2;
      }
      else {
        uint64_t v5 = -1;
      }
      if (v4 == 1) {
        uint64_t v6 = 1;
      }
      else {
        uint64_t v6 = v5;
      }
    }
    else
    {
      uint64_t v6 = -1;
    }
  }
  else
  {
    uint64_t v6 = -1;
  }

  return v6;
}

uint64_t _UIFocusEnvironmentPrefersFocusContainment(void *a1)
{
  id v1 = a1;
  if (objc_opt_respondsToSelector())
  {
    uint64_t IsScrollableContainer = [v1 _prefersFocusContainment];
  }
  else
  {
    uint64_t v3 = [v1 focusItemContainer];

    uint64_t IsScrollableContainer = _UIFocusItemContainerIsScrollableContainer(v3);
    id v1 = v3;
  }

  return IsScrollableContainer;
}

uint64_t _UIFocusEnvironmentResolvedRotaryFocusMovementAxis(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = v3;
  uint64_t v5 = -1;
  if (!v3) {
    goto LABEL_19;
  }
  uint64_t v23 = 0;
  uint64_t v24 = &v23;
  uint64_t v25 = 0x3032000000;
  uint64_t v26 = __Block_byref_object_copy__84;
  uint64_t v27 = __Block_byref_object_dispose__84;
  id v28 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = &v19;
  uint64_t v21 = 0x2020000000;
  uint64_t v22 = -1;
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  v18[2] = ___UIFocusEnvironmentResolvedRotaryFocusMovementAxis_block_invoke;
  v18[3] = &unk_1E52EDC40;
  v18[4] = &v19;
  v18[5] = &v23;
  _UIFocusEnvironmentEnumerateAncestorEnvironments(v3, v18);
  if (v20[3] == -1)
  {
    char v6 = _UIInternalPreferenceUsesDefault_0(&_UIInternalPreference_FocusEnvironmentUseAncestorScrollableSizeForFallbackRotaryAxis, @"FocusEnvironmentUseAncestorScrollableSizeForFallbackRotaryAxis");
    char v7 = byte_1E8FD5134 ? v6 : 1;
    if ((v7 & 1) == 0)
    {
      id v8 = _UIFocusNearestAncestorEnvironmentScrollableContainer(v4, 1);
      uint64_t v9 = v8;
      if (v8)
      {
        double v10 = [v8 scrollableContainer];
        [v10 visibleSize];
        double v12 = v11;
        double v14 = v13;

        if (v12 > v14)
        {
          v20[3] = 1;
          uint64_t v15 = [v9 owningEnvironment];
LABEL_12:
          id v16 = (void *)v24[5];
          v24[5] = v15;

          goto LABEL_13;
        }
        if (v14 > v12)
        {
          v20[3] = 2;
          uint64_t v15 = [v9 owningEnvironment];
          goto LABEL_12;
        }
      }
LABEL_13:
    }
  }
  uint64_t v5 = v20[3];
  if (v5 == -1)
  {
    uint64_t v5 = 0;
    v20[3] = 0;
  }
  if (a2)
  {
    *a2 = (id) v24[5];
    uint64_t v5 = v20[3];
  }
  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v23, 8);

LABEL_19:
  return v5;
}

void sub_185F7FA0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id __UIFocusEnvironmentPreferredFocusedView(void *a1, unsigned char *a2)
{
  id v3 = a1;
  int IsViewOrViewControllerOrRespondsToSelector = _UIFocusEnvironmentIsViewOrViewControllerOrRespondsToSelector(v3);
  char v5 = IsViewOrViewControllerOrRespondsToSelector;
  if (!IsViewOrViewControllerOrRespondsToSelector)
  {
    char v6 = 0;
    if (!a2) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v6 = [v3 preferredFocusedView];
  if (a2) {
LABEL_5:
  }
    *a2 = v5;
LABEL_6:

  return v6;
}

id _UIFocusEnvironmentPreferredFocusEnvironments(void *a1)
{
  id v1 = a1;
  int IsViewOrViewControllerOrRespondsToSelector = _UIFocusEnvironmentIsViewOrViewControllerOrRespondsToSelector(v1);
  id v3 = (id)MEMORY[0x1E4F1CBF0];
  if (IsViewOrViewControllerOrRespondsToSelector)
  {
    uint64_t v4 = [v1 preferredFocusEnvironments];
    char v5 = (void *)v4;
    if (v4) {
      char v6 = (void *)v4;
    }
    else {
      char v6 = v3;
    }
    id v3 = v6;
  }
  return v3;
}

id _UIFocusEnvironmentEffectivePreferredFocusEnvironments(void *a1, unsigned char *a2)
{
  v17[1] = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (!v3)
  {
    double v13 = [MEMORY[0x1E4F28B00] currentHandler];
    double v14 = objc_msgSend(NSString, "stringWithUTF8String:", "NSArray<id<UIFocusEnvironment>> * _Nonnull _UIFocusEnvironmentEffectivePreferredFocusEnvironments(__strong id<UIFocusEnvironment> _Nonnull, BOOL * _Nullable)");
    [v13 handleFailureInFunction:v14 file:@"UIFocusEnvironment.m" lineNumber:478 description:@"Cannot determine effective preferred focus environments for a nil environment."];
  }
  uint64_t v4 = _UIFocusEnvironmentPreferredFocusEnvironments(v3);
  uint64_t v5 = [v4 count];
  int v6 = dyld_program_sdk_at_least();
  if (v5)
  {
    if (v6 && [v4 indexOfObjectIdenticalTo:v3] == 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v7 = [v4 arrayByAddingObject:v3];
      goto LABEL_11;
    }
    char IsKindOfUIView = 0;
    if (!a2) {
      goto LABEL_13;
    }
LABEL_12:
    *a2 = IsKindOfUIView;
    goto LABEL_13;
  }
  if (v6)
  {
    v17[0] = v3;
    uint64_t v7 = [MEMORY[0x1E4F1C978] arrayWithObjects:v17 count:1];
LABEL_11:
    uint64_t v9 = (void *)v7;

    char IsKindOfUIView = 0;
    uint64_t v4 = v9;
    if (!a2) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  char v15 = 0;
  uint64_t v11 = __UIFocusEnvironmentPreferredFocusedView(v3, &v15);
  if (v11 || !v15)
  {
    id v16 = v3;
    uint64_t v12 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v16 count:1];

    char IsKindOfUIView = 0;
    uint64_t v4 = (void *)v12;
  }
  else if (a2)
  {
    char IsKindOfUIView = _IsKindOfUIView((uint64_t)v3);
  }
  else
  {
    char IsKindOfUIView = 0;
  }

  if (a2) {
    goto LABEL_12;
  }
LABEL_13:

  return v4;
}

id _UIFocusEnvironmentCombinedPreferredFocusEnvironments(void *a1, void *a2, uint64_t a3)
{
  v15[1] = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  if (!v5)
  {
    double v13 = [MEMORY[0x1E4F28B00] currentHandler];
    double v14 = objc_msgSend(NSString, "stringWithUTF8String:", "NSArray<id<UIFocusEnvironment>> * _Nonnull _UIFocusEnvironmentCombinedPreferredFocusEnvironments(__strong id<UIFocusEnvironment> _Nonnull, NSArray<id<UIFocusEnvironment>> *__strong _Nonnull, _UIPreferredFocusedViewPrioritizationType)");
    [v13 handleFailureInFunction:v14 file:@"UIFocusEnvironment.m" lineNumber:525 description:@"Cannot determine combined preferred focus environments for a nil environment."];
  }
  if (!v6) {
    id v6 = (id)MEMORY[0x1E4F1CBF0];
  }
  if (a3 == 2)
  {
    uint64_t v7 = __UIFocusEnvironmentPreferredFocusedView(v5, 0);
    if (v7 && [v6 indexOfObjectIdenticalTo:v7] == 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v11 = [v6 arrayByAddingObject:v7];

      id v6 = (id)v11;
    }
  }
  else
  {
    if (a3 != 1) {
      goto LABEL_16;
    }
    uint64_t v7 = __UIFocusEnvironmentPreferredFocusedView(v5, 0);
    if (v7)
    {
      uint64_t v8 = [v6 firstObject];

      if (v7 != v8)
      {
        v15[0] = v7;
        uint64_t v9 = [MEMORY[0x1E4F1C978] arrayWithObjects:v15 count:1];
        uint64_t v10 = [v9 arrayByAddingObjectsFromArray:v6];

        id v6 = (id)v10;
      }
    }
    else if ((dyld_program_sdk_at_least() & 1) == 0)
    {

      id v6 = (id)MEMORY[0x1E4F1CBF0];
    }
  }

LABEL_16:
  return v6;
}

uint64_t _UIFocusEnvironmentAllowsFocusToLeaveViaHeading(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (_UIFocusItemIsViewOrRespondsToSelector(v3)) {
    uint64_t v4 = [v3 _allowsFocusToLeaveViaHeading:a2];
  }
  else {
    uint64_t v4 = 1;
  }

  return v4;
}

id _UIFocusItemHaloEffect(void *a1)
{
  id v1 = a1;
  if (!v1)
  {
    id v5 = [MEMORY[0x1E4F28B00] currentHandler];
    id v6 = [NSString stringWithUTF8String:"UIFocusHaloEffect * _Nullable _UIFocusItemHaloEffect(__strong id<UIFocusItem>)"];
    [v5 handleFailureInFunction:v6, @"UIFocusEnvironment.m", 586, @"Invalid parameter not satisfying: %@", @"item != nil" file lineNumber description];
  }
  if (_UIFocusItemIsViewOrRespondsToSelector(v1)) {
    [v1 focusEffect];
  }
  else {
  id v2 = +[UIFocusEffect effect];
  }
  id v3 = [v2 _resolvedEffectForItem:v1];

  return v3;
}

void sub_185F8037C(_Unwind_Exception *a1)
{
}

id _activityItemsConfigurationForTarget(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v5 = [v3 _effectiveActivityItemsConfigurationForSender:v4];
LABEL_7:
    id v6 = (void *)v5;
    goto LABEL_8;
  }
  if (objc_opt_respondsToSelector())
  {
    uint64_t v5 = [v3 _effectiveActivityItemsConfiguration];
    goto LABEL_7;
  }
  if (objc_opt_respondsToSelector())
  {
    uint64_t v5 = [v3 activityItemsConfiguration];
    goto LABEL_7;
  }
  id v6 = 0;
LABEL_8:

  return v6;
}

void sub_185F80D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _viewControllerToPresentFromBasedOnResponder(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    -[UIView __viewDelegate](v1);
    id v2 = (id *)objc_claimAutoreleasedReturnValue();
LABEL_5:
    id v3 = v2;
    goto LABEL_6;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v2 = v1;
    goto LABEL_5;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v5 = _preferredUIWindowInWindowScene(v1);
    id v3 = [v5 rootViewController];
  }
  else
  {
    id v3 = 0;
  }
LABEL_6:

  return v3;
}

id _preferredUIWindowInWindowScene(void *a1)
{
  id v1 = a1;
  id v2 = [v1 keyWindow];
  if (!v2)
  {
    id v3 = [v1 _visibleWindows];
    id v2 = [v3 firstObject];
  }
  return v2;
}

uint64_t _UIFocusHeadingIsEffectivelyLeft(unint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[UIFocusSystem focusSystemForEnvironment:v3];
  int v5 = [v4 _shouldReverseLayoutDirectionForEnvironment:v3];

  if ((a1 & 4) != 0) {
    unsigned int v6 = 1;
  }
  else {
    unsigned int v6 = (a1 >> 5) & 1;
  }
  if ((a1 & 8) != 0) {
    unsigned int v7 = 1;
  }
  else {
    unsigned int v7 = (a1 >> 4) & 1;
  }
  if (v5) {
    return v7;
  }
  else {
    return v6;
  }
}

uint64_t _UIFocusHeadingIsEffectivelyRight(unint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[UIFocusSystem focusSystemForEnvironment:v3];
  int v5 = [v4 _shouldReverseLayoutDirectionForEnvironment:v3];

  if ((a1 & 8) != 0) {
    unsigned int v6 = 1;
  }
  else {
    unsigned int v6 = (a1 >> 4) & 1;
  }
  if ((a1 & 4) != 0) {
    unsigned int v7 = 1;
  }
  else {
    unsigned int v7 = (a1 >> 5) & 1;
  }
  if (v5) {
    return v7;
  }
  else {
    return v6;
  }
}

double _UIVectorForFocusHeading(char a1)
{
  double result = -1.0;
  double v2 = 0.0;
  if ((a1 & 4) != 0) {
    double v2 = -1.0;
  }
  if ((a1 & 8) != 0) {
    double v2 = 1.0;
  }
  if ((a1 & 0x20) == 0) {
    double result = v2;
  }
  if ((a1 & 0x10) != 0) {
    return 1.0;
  }
  return result;
}

double _UIRectDeparturePointAlongFocusHeading(char a1, double a2, double a3, double a4, double a5)
{
  if ((a1 & 0xC) != 0)
  {
    if ((a1 & 4) != 0) {
      double MinX = CGRectGetMinX(*(CGRect *)&a2);
    }
    else {
      double MinX = CGRectGetMaxX(*(CGRect *)&a2);
    }
  }
  else
  {
    double MinX = CGRectGetMidX(*(CGRect *)&a2);
  }
  double v11 = MinX;
  double v12 = a2;
  double v13 = a3;
  double v14 = a4;
  double v15 = a5;
  if ((a1 & 3) != 0)
  {
    if (a1) {
      CGRectGetMinY(*(CGRect *)&v12);
    }
    else {
      CGRectGetMaxY(*(CGRect *)&v12);
    }
  }
  else
  {
    CGRectGetMidY(*(CGRect *)&v12);
  }
  return v11;
}

void _UIPointAxisAlignedDistanceAlongFocusHeading(char a1, double a2, double a3, double a4, double a5)
{
  if ((a1 & 3) != 0 && (a1 & 0xC) != 0)
  {
    hypot(a4 - a2, a5 - a3);
    _UIVectorForFocusHeading(a1);
  }
}

BOOL _UIRectIntersectsRectAlongFocusHeading(char a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  if ((a1 & 3) != 0)
  {
    double MinX = CGRectGetMinX(*(CGRect *)&a2);
    v30.origin.double x = a6;
    v30.origin.CGFloat y = a7;
    v30.size.CGFloat width = a8;
    v30.size.CGFloat height = a9;
    if (MinX < CGRectGetMaxX(v30))
    {
      v31.origin.double x = a2;
      v31.origin.CGFloat y = a3;
      v31.size.CGFloat width = a4;
      v31.size.CGFloat height = a5;
      double MaxX = CGRectGetMaxX(v31);
      v32.origin.double x = a6;
      v32.origin.CGFloat y = a7;
      v32.size.CGFloat width = a8;
      v32.size.CGFloat height = a9;
      double v18 = CGRectGetMinX(v32);
      return MaxX > v18;
    }
  }
  else if ((a1 & 0xC) != 0)
  {
    double MinY = CGRectGetMinY(*(CGRect *)&a2);
    v33.origin.double x = a6;
    v33.origin.CGFloat y = a7;
    v33.size.CGFloat width = a8;
    v33.size.CGFloat height = a9;
    if (MinY < CGRectGetMaxY(v33))
    {
      v34.origin.double x = a2;
      v34.origin.CGFloat y = a3;
      v34.size.CGFloat width = a4;
      v34.size.CGFloat height = a5;
      double MaxX = CGRectGetMaxY(v34);
      v35.origin.double x = a6;
      v35.origin.CGFloat y = a7;
      v35.size.CGFloat width = a8;
      v35.size.CGFloat height = a9;
      double v18 = CGRectGetMinY(v35);
      return MaxX > v18;
    }
  }
  return 0;
}

double _UIFocusVelocityBasedInterpolationFactor(long double a1, long double a2)
{
  double v2 = hypot(a1, a2);
  double v3 = 1.0;
  if (v2 >= 1000.0) {
    return fmin(fmax((v2 + -1000.0) / -10000.0 + 1.0, 0.0), 1.0);
  }
  return v3;
}

uint64_t _UIFocusRectCompare(int a1, int a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10)
{
  double v18 = a4 + a6 * 0.5;
  v28.origin.double x = a7;
  v28.origin.CGFloat y = a8;
  v28.size.CGFloat width = a9;
  v28.size.CGFloat height = a10;
  if (CGRectGetMinY(v28) < v18)
  {
    v29.origin.double x = a7;
    v29.origin.CGFloat y = a8;
    v29.size.CGFloat width = a9;
    v29.size.CGFloat height = a10;
    if (v18 < CGRectGetMaxY(v29))
    {
      v30.origin.double x = a7;
      v30.origin.CGFloat y = a8;
      v30.size.CGFloat width = a9;
      v34.size.CGFloat width = a5;
      v30.size.CGFloat height = a10;
      v34.origin.double x = a3;
      v34.origin.CGFloat y = a4;
      v34.size.CGFloat height = a6;
      if (!CGRectContainsRect(v30, v34)) {
        goto LABEL_15;
      }
    }
  }
  double v19 = a8 + a10 * 0.5;
  v31.origin.double x = a3;
  v31.origin.CGFloat y = a4;
  v31.size.CGFloat width = a5;
  v31.size.CGFloat height = a6;
  if (CGRectGetMinY(v31) >= v19) {
    goto LABEL_7;
  }
  v32.origin.double x = a3;
  v32.origin.CGFloat y = a4;
  v32.size.CGFloat width = a5;
  v32.size.CGFloat height = a6;
  if (v19 >= CGRectGetMaxY(v32)) {
    goto LABEL_7;
  }
  v33.origin.double x = a3;
  v33.origin.CGFloat y = a4;
  v35.size.CGFloat width = a9;
  v33.size.CGFloat width = a5;
  v33.size.CGFloat height = a6;
  v35.origin.double x = a7;
  v35.origin.CGFloat y = a8;
  v35.size.CGFloat height = a10;
  if (CGRectContainsRect(v33, v35))
  {
LABEL_7:
    uint64_t v20 = -1;
    if (v18 > v19) {
      uint64_t v21 = 1;
    }
    else {
      uint64_t v21 = -1;
    }
    if (v18 <= v19) {
      uint64_t v20 = 1;
    }
    if (a2) {
      return v20;
    }
    else {
      return v21;
    }
  }
  else
  {
LABEL_15:
    double v23 = a3 + a5 * 0.5;
    double v24 = a7 + a9 * 0.5;
    BOOL v25 = v23 >= v24;
    if (!a1) {
      BOOL v25 = v23 <= v24;
    }
    if (v25) {
      return -1;
    }
    else {
      return 1;
    }
  }
}

uint64_t _UIFocusItemCompare(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  int v5 = [v3 parentFocusEnvironment];
  unsigned int v6 = [v4 parentFocusEnvironment];
  unsigned int v7 = _UIFocusEnvironmentFirstCommonAncestor(v5, v6);

  uint64_t v8 = +[UIFocusSystem focusSystemForEnvironment:v7];
  uint64_t v9 = [v8 behavior];
  int v10 = [v9 shouldUseAccessibilityCompareForItemGeometry];

  if (v10 && (objc_opt_respondsToSelector() & 1) != 0)
  {
    uint64_t v11 = [v3 accessibilityCompareGeometry:v4];
  }
  else
  {
    id v12 = v7;
    id v13 = v3;
    id v14 = v4;
    double v15 = v12;
    if (!v12)
    {
      id v16 = [v13 parentFocusEnvironment];
      uint64_t v17 = [v14 parentFocusEnvironment];
      double v15 = _UIFocusEnvironmentFirstCommonAncestor(v16, v17);
    }
    double v18 = +[UIFocusSystem focusSystemForEnvironment:v15];
    double v19 = [v18 focusItemContainer];
    uint64_t v20 = [v19 coordinateSpace];

    [v13 frame];
    CGFloat v22 = v21;
    CGFloat v24 = v23;
    CGFloat v26 = v25;
    CGFloat v28 = v27;
    [v14 frame];
    CGFloat v30 = v29;
    CGFloat v32 = v31;
    CGFloat v34 = v33;
    CGFloat v36 = v35;
    if (v20)
    {
      v60.origin.double x = _UIFocusItemFrameInCoordinateSpace(v13, v20);
      double v55 = v34;
      double v56 = v36;
      double v37 = v22;
      double x = v60.origin.x;
      double v39 = v30;
      double v40 = v24;
      double y = v60.origin.y;
      double v57 = v32;
      double v58 = v28;
      double v42 = v26;
      double width = v60.size.width;
      double height = v60.size.height;
      BOOL IsNull = CGRectIsNull(v60);
      if (!IsNull)
      {
        double v37 = x;
        double v40 = y;
        double v42 = width;
      }
      double v46 = v58;
      if (!IsNull) {
        double v46 = height;
      }
      double v59 = v46;
      v61.origin.double x = _UIFocusItemFrameInCoordinateSpace(v14, v20);
      double v47 = v61.origin.x;
      double v48 = v61.origin.y;
      double v49 = v61.size.width;
      double v50 = v61.size.height;
      BOOL v51 = CGRectIsNull(v61);
      if (!v51) {
        double v39 = v47;
      }
      CGFloat v22 = v37;
      CGFloat v36 = v56;
      double v52 = v57;
      if (!v51) {
        double v52 = v48;
      }
      CGFloat v24 = v40;
      CGFloat v30 = v39;
      CGFloat v34 = v55;
      if (!v51) {
        CGFloat v34 = v49;
      }
      CGFloat v26 = v42;
      if (!v51) {
        CGFloat v36 = v50;
      }
      CGFloat v32 = v52;
      CGFloat v28 = v59;
    }

    double v53 = +[UIFocusSystem focusSystemForEnvironment:v12];
    uint64_t v11 = _UIFocusRectCompare([v53 _shouldReverseLayoutDirectionForEnvironment:v12], objc_msgSend(v53, "_shouldReverseLinearWrappingForEnvironment:", v12), v22, v24, v26, v28, v30, v32, v34, v36);
  }
  return v11;
}

id _UIFocusGetNextItemFromList(void *a1, void *a2, __int16 a3, int a4)
{
  id v7 = a1;
  id v8 = a2;
  if (!v8)
  {
    id v13 = [MEMORY[0x1E4F28B00] currentHandler];
    id v14 = objc_msgSend(NSString, "stringWithUTF8String:", "id<UIFocusItem>  _Nonnull _UIFocusGetNextItemFromList(id<UIFocusItem>  _Nullable __strong, NSArray<id<UIFocusItem>> *__strong _Nonnull, UIFocusHeading, BOOL)");
    [v13 handleFailureInFunction:v14, @"UIFocusGeometry.m", 370, @"Invalid parameter not satisfying: %@", @"list != nil" file lineNumber description];
  }
  if (![v8 count]) {
    goto LABEL_11;
  }
  if ((a3 & 0x300) != 0)
  {
    if ((a3 & 0x100) == 0)
    {
LABEL_6:
      uint64_t v9 = [v8 count] - 1;
      goto LABEL_7;
    }
    goto LABEL_22;
  }
  if (!v7) {
    goto LABEL_22;
  }
  unint64_t v10 = [v8 indexOfObject:v7];
  if (v10 == 0x7FFFFFFFFFFFFFFFLL) {
    goto LABEL_11;
  }
  uint64_t v9 = v10;
  if ((a3 & 0x10) != 0)
  {
    if (v10 >= [v8 count] - 1)
    {
      if (a4) {
        uint64_t v9 = 0;
      }
      goto LABEL_23;
    }
    ++v9;
LABEL_7:
    if (v9 != 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_23;
    }
LABEL_11:
    uint64_t v11 = 0;
    goto LABEL_24;
  }
  if ((a3 & 0x20) != 0)
  {
    if (v10)
    {
      uint64_t v9 = v10 - 1;
      goto LABEL_7;
    }
    if (a4) {
      goto LABEL_6;
    }
LABEL_22:
    uint64_t v9 = 0;
  }
LABEL_23:
  uint64_t v11 = [v8 objectAtIndexedSubscript:v9];
LABEL_24:

  return v11;
}

void _UIFocusRectWithMinimumSize(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  if (!CGRectIsNull(*(CGRect *)&a1))
  {
    v8.origin.double x = a1;
    v8.origin.double y = a2;
    v8.size.double width = a3;
    v8.size.double height = a4;
    CGRectStandardize(v8);
  }
}

__CFString *_UIStringFromFocusHeading(uint64_t a1)
{
  if (a1)
  {
    __int16 v1 = a1;
    double v2 = [MEMORY[0x1E4F28E78] string];
    v11[0] = 0;
    v11[1] = v11;
    v11[2] = 0x2020000000;
    char v12 = 0;
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = ___UIStringFromFocusHeading_block_invoke;
    v8[3] = &unk_1E52EDD00;
    id v3 = v2;
    id v9 = v3;
    unint64_t v10 = v11;
    id v4 = _Block_copy(v8);
    int v5 = (void (**)(void, void))v4;
    if (v1) {
      (*((void (**)(void *, __CFString *))v4 + 2))(v4, @"Up");
    }
    if ((v1 & 2) != 0) {
      ((void (**)(void, __CFString *))v5)[2](v5, @"Down");
    }
    if ((v1 & 4) != 0) {
      ((void (**)(void, __CFString *))v5)[2](v5, @"Left");
    }
    if ((v1 & 8) != 0) {
      ((void (**)(void, __CFString *))v5)[2](v5, @"Right");
    }
    if ((v1 & 0x20) != 0) {
      ((void (**)(void, __CFString *))v5)[2](v5, @"Previous");
    }
    if ((v1 & 0x10) != 0) {
      ((void (**)(void, __CFString *))v5)[2](v5, @"Next");
    }
    if ((v1 & 0x100) != 0) {
      ((void (**)(void, __CFString *))v5)[2](v5, @"First");
    }
    if ((v1 & 0x200) != 0) {
      ((void (**)(void, __CFString *))v5)[2](v5, @"Last");
    }
    unsigned int v6 = (__CFString *)v3;

    _Block_object_dispose(v11, 8);
  }
  else
  {
    unsigned int v6 = @"None";
  }
  return v6;
}

void sub_185F837E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__CFString *_UIStringFromGroupFilter(uint64_t a1)
{
  __int16 v1 = @"None";
  if (a1 == 1) {
    __int16 v1 = @"CurrentGroup";
  }
  if (a1 == 2) {
    return @"PrimaryItems";
  }
  else {
    return v1;
  }
}

BOOL _UIFocusItemIsFocused(void *a1)
{
  id v1 = a1;
  if (!v1)
  {
    unsigned int v6 = [MEMORY[0x1E4F28B00] currentHandler];
    id v7 = [NSString stringWithUTF8String:"BOOL _UIFocusItemIsFocused(__strong id<UIFocusItem> _Nonnull)"];
    [v6 handleFailureInFunction:v7, @"UIFocusItem.m", 59, @"Invalid parameter not satisfying: %@", @"item" file lineNumber description];
  }
  double v2 = +[UIFocusSystem focusSystemForEnvironment:v1];
  id v3 = [v2 focusedItem];
  BOOL v4 = v3 == v1;

  return v4;
}

uint64_t _UIFocusItemIsFocusedOrFocusable(void *a1)
{
  id v1 = a1;
  if (!v1)
  {
    int v5 = [MEMORY[0x1E4F28B00] currentHandler];
    unsigned int v6 = [NSString stringWithUTF8String:"BOOL _UIFocusItemIsFocusedOrFocusable(__strong id<UIFocusItem> _Nonnull)"];
    [v5 handleFailureInFunction:v6, @"UIFocusItem.m", 66, @"Invalid parameter not satisfying: %@", @"item" file lineNumber description];
  }
  double v2 = +[UIFocusSystem focusSystemForEnvironment:v1];
  if (v2) {
    IsFocusedOrFocusableInFocusSysteuint64_t m = __UIFocusItemIsFocusedOrFocusableInFocusSystem(v1, v2, 0, 1);
  }
  else {
    IsFocusedOrFocusableInFocusSysteuint64_t m = 0;
  }

  return IsFocusedOrFocusableInFocusSystem;
}

uint64_t __UIFocusItemIsFocusedOrFocusableInFocusSystem(void *a1, void *a2, int a3, int a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = v8;
  if (v7)
  {
    if (v8) {
      goto LABEL_3;
    }
  }
  else
  {
    id v16 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v17 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL __UIFocusItemIsFocusedOrFocusableInFocusSystem(__strong id<UIFocusItem>, UIFocusSystem *__strong, BOOL, BOOL)");
    [v16 handleFailureInFunction:v17, @"UIFocusItem.m", 34, @"Invalid parameter not satisfying: %@", @"item" file lineNumber description];

    if (v9) {
      goto LABEL_3;
    }
  }
  double v18 = [MEMORY[0x1E4F28B00] currentHandler];
  double v19 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL __UIFocusItemIsFocusedOrFocusableInFocusSystem(__strong id<UIFocusItem>, UIFocusSystem *__strong, BOOL, BOOL)");
  [v18 handleFailureInFunction:v19, @"UIFocusItem.m", 35, @"Invalid parameter not satisfying: %@", @"focusSystem" file lineNumber description];

LABEL_3:
  if (_UIFocusItemCanBecomeFocused(v7, v9)) {
    int IsEligibleForFocusInteraction = _UIFocusEnvironmentIsEligibleForFocusInteraction(v7);
  }
  else {
    int IsEligibleForFocusInteraction = 0;
  }
  BOOL v11 = 0;
  if ((IsEligibleForFocusInteraction & 1) == 0 && a4)
  {
    id v12 = [v9 focusedItem];
    BOOL v11 = v12 == v7;
  }
  uint64_t v13 = IsEligibleForFocusInteraction | v11;
  if (v13 == 1 && a3)
  {
    id v14 = +[UIFocusSystem focusSystemForEnvironment:v7];
    uint64_t v13 = v14 == v9;
  }
  return v13;
}

uint64_t _UIFocusItemIsFocusedOrFocusableInFocusSystem(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  int v5 = v4;
  if (!v3)
  {
    id v8 = [MEMORY[0x1E4F28B00] currentHandler];
    id v9 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL _UIFocusItemIsFocusedOrFocusableInFocusSystem(__strong id<UIFocusItem> _Nonnull, UIFocusSystem *__strong _Nonnull)");
    [v8 handleFailureInFunction:v9, @"UIFocusItem.m", 76, @"Invalid parameter not satisfying: %@", @"item" file lineNumber description];

    if (v5) {
      goto LABEL_3;
    }
LABEL_5:
    unint64_t v10 = [MEMORY[0x1E4F28B00] currentHandler];
    BOOL v11 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL _UIFocusItemIsFocusedOrFocusableInFocusSystem(__strong id<UIFocusItem> _Nonnull, UIFocusSystem *__strong _Nonnull)");
    [v10 handleFailureInFunction:v11, @"UIFocusItem.m", 77, @"Invalid parameter not satisfying: %@", @"focusSystem" file lineNumber description];

    goto LABEL_3;
  }
  if (!v4) {
    goto LABEL_5;
  }
LABEL_3:
  IsFocusedOrFocusableInFocusSysteuint64_t m = __UIFocusItemIsFocusedOrFocusableInFocusSystem(v3, v5, 1, 1);

  return IsFocusedOrFocusableInFocusSystem;
}

uint64_t _UIFocusItemIsFocusableInFocusSystem(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  int v5 = v4;
  if (!v3)
  {
    id v8 = [MEMORY[0x1E4F28B00] currentHandler];
    id v9 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL _UIFocusItemIsFocusableInFocusSystem(__strong id<UIFocusItem> _Nonnull, UIFocusSystem *__strong _Nonnull)");
    [v8 handleFailureInFunction:v9, @"UIFocusItem.m", 83, @"Invalid parameter not satisfying: %@", @"item" file lineNumber description];

    if (v5) {
      goto LABEL_3;
    }
LABEL_5:
    unint64_t v10 = [MEMORY[0x1E4F28B00] currentHandler];
    BOOL v11 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL _UIFocusItemIsFocusableInFocusSystem(__strong id<UIFocusItem> _Nonnull, UIFocusSystem *__strong _Nonnull)");
    [v10 handleFailureInFunction:v11, @"UIFocusItem.m", 84, @"Invalid parameter not satisfying: %@", @"focusSystem" file lineNumber description];

    goto LABEL_3;
  }
  if (!v4) {
    goto LABEL_5;
  }
LABEL_3:
  IsFocusedOrFocusableInFocusSysteuint64_t m = __UIFocusItemIsFocusedOrFocusableInFocusSystem(v3, v5, 1, 0);

  return IsFocusedOrFocusableInFocusSystem;
}

uint64_t _UIFocusItemCanBecomeFocused(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    id v9 = [MEMORY[0x1E4F28B00] currentHandler];
    unint64_t v10 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL _UIFocusItemCanBecomeFocused(__strong id<UIFocusItem> _Nonnull, UIFocusSystem *__strong _Nonnull)");
    [v9 handleFailureInFunction:v10, @"UIFocusItem.m", 92, @"Invalid parameter not satisfying: %@", @"item" file lineNumber description];
  }
  if ([v3 canBecomeFocused])
  {
    int v5 = [v4 behavior];
    int v6 = [v5 disablesFocusabilityForItemsContainingFocus];

    if (v6) {
      uint64_t v7 = [v4 _focusedItemIsContainedInEnvironment:v3 includeSelf:0] ^ 1;
    }
    else {
      uint64_t v7 = 1;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

uint64_t _UIFocusItemIsFocusableInFocusSystemWithSearchInfo(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (v5)
  {
    if (v6) {
      goto LABEL_3;
    }
  }
  else
  {
    unint64_t v10 = [MEMORY[0x1E4F28B00] currentHandler];
    BOOL v11 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL _UIFocusItemIsFocusableInFocusSystemWithSearchInfo(__strong id<UIFocusItem> _Nonnull, UIFocusSystem *__strong _Nonnull, _UIFocusSearchInfo *__strong _Nonnull)");
    [v10 handleFailureInFunction:v11, @"UIFocusItem.m", 104, @"Invalid parameter not satisfying: %@", @"item" file lineNumber description];

    if (v6) {
      goto LABEL_3;
    }
  }
  id v12 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v13 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL _UIFocusItemIsFocusableInFocusSystemWithSearchInfo(__strong id<UIFocusItem> _Nonnull, UIFocusSystem *__strong _Nonnull, _UIFocusSearchInfo *__strong _Nonnull)");
  [v12 handleFailureInFunction:v13, @"UIFocusItem.m", 105, @"Invalid parameter not satisfying: %@", @"focusSystem" file lineNumber description];

LABEL_3:
  uint64_t v8 = 0;
  if (__UIFocusItemIsFocusedOrFocusableInFocusSystem(v5, v6, 1, 0)) {
    uint64_t v8 = [v7 shouldIncludeFocusItem:v5];
  }

  return v8;
}

uint64_t _UIFocusItemIsLegacyTransparentFocusRegionInSearchContext(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v17 = 0;
  double v18 = &v17;
  uint64_t v19 = 0x2020000000;
  char v20 = 0;
  id v5 = +[UIFocusSystem focusSystemForEnvironment:v3];
  id v6 = [v5 behavior];
  if (![v6 legacyIsTransparentFocusRegionSupported])
  {

LABEL_6:
    goto LABEL_7;
  }
  int IsViewOrRespondsToSelector = _UIFocusItemIsViewOrRespondsToSelector(v3);

  if (IsViewOrRespondsToSelector)
  {
    if ([v3 _isTransparentFocusRegion])
    {
      *((unsigned char *)v18 + 24) = 1;
      goto LABEL_7;
    }
    unint64_t v10 = [v4 focusSystem];
    BOOL v11 = [v4 searchInfo];
    char IsFocusableInFocusSystemWithSearchInfo = _UIFocusItemIsFocusableInFocusSystemWithSearchInfo(v3, v10, v11);

    uint64_t v13 = +[UIFocusSystem focusSystemForEnvironment:v3];
    id v14 = [v13 focusedItem];

    char v15 = v14 == v3 ? 1 : IsFocusableInFocusSystemWithSearchInfo;
    if ((v15 & 1) == 0)
    {
      id v5 = [v3 parentFocusEnvironment];
      v16[0] = MEMORY[0x1E4F143A8];
      v16[1] = 3221225472;
      _DWORD v16[2] = ___UIFocusItemIsLegacyTransparentFocusRegionInSearchContext_block_invoke;
      v16[3] = &unk_1E52EDC68;
      void v16[4] = &v17;
      _UIFocusEnvironmentEnumerateAncestorEnvironments(v5, v16);
      goto LABEL_6;
    }
  }
LABEL_7:
  uint64_t v8 = *((unsigned __int8 *)v18 + 24);
  _Block_object_dispose(&v17, 8);

  return v8;
}

void sub_185F842B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _UIFocusItemIsTransparentFocusItem(void *a1)
{
  id v1 = a1;
  if (_UIFocusItemIsViewOrRespondsToSelector(v1)) {
    uint64_t v2 = [v1 isTransparentFocusItem];
  }
  else {
    uint64_t v2 = 0;
  }

  return v2;
}

uint64_t _UITVFocusItemAllowsFocusInChildrenWhenFocused(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1 && _UIFocusItemIsViewOrRespondsToSelector(v1)) {
    uint64_t v3 = [v2 _tvAllowsFocusInChildrenWhenFocused];
  }
  else {
    uint64_t v3 = 0;
  }

  return v3;
}

uint64_t _UITVFocusItemAddsChildFocusItemsBeforeSelf(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1 && _UIFocusItemIsViewOrRespondsToSelector(v1)) {
    uint64_t v3 = [v2 _tvAddsChildFocusItemsBeforeSelf];
  }
  else {
    uint64_t v3 = 0;
  }

  return v3;
}

uint64_t _UITVFocusItemAddsChildFocusItemsButNotSelf(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1 && _UIFocusItemIsViewOrRespondsToSelector(v1)) {
    uint64_t v3 = [v2 _tvAddsChildFocusItemsButNotSelf];
  }
  else {
    uint64_t v3 = 0;
  }

  return v3;
}

id _UIParentCoordinateSpaceForFocusItem(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = [v1 parentFocusEnvironment];
  uint64_t v3 = [v2 focusItemContainer];
  id v4 = [v3 coordinateSpace];

  if (!v4)
  {
    if (os_variant_has_internal_diagnostics())
    {
      id v6 = __UIFaultDebugAssertLog();
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)) {
        goto LABEL_6;
      }
      id v7 = [v1 debugDescription];
      uint64_t v8 = [v1 parentFocusEnvironment];
      id v9 = [v8 debugDescription];
      unint64_t v10 = [v1 parentFocusEnvironment];
      BOOL v11 = [v10 focusItemContainer];
      id v12 = [v11 debugDescription];
      int v14 = 138412802;
      char v15 = v7;
      __int16 v16 = 2112;
      uint64_t v17 = v9;
      __int16 v18 = 2112;
      uint64_t v19 = v12;
      _os_log_fault_impl(&dword_1853B0000, v6, OS_LOG_TYPE_FAULT, "UIFocusItem: %@ with parentFocusEnvironment: %@  focusItemContainer: %@ has no coordinate space.", (uint8_t *)&v14, 0x20u);
    }
    else
    {
      id v5 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_UIParentCoordinateSpaceForFocusItem___s_category) + 8);
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        goto LABEL_7;
      }
      id v6 = v5;
      id v7 = [v1 debugDescription];
      uint64_t v8 = [v1 parentFocusEnvironment];
      id v9 = [v8 debugDescription];
      unint64_t v10 = [v1 parentFocusEnvironment];
      BOOL v11 = [v10 focusItemContainer];
      id v12 = [v11 debugDescription];
      int v14 = 138412802;
      char v15 = v7;
      __int16 v16 = 2112;
      uint64_t v17 = v9;
      __int16 v18 = 2112;
      uint64_t v19 = v12;
      _os_log_impl(&dword_1853B0000, v6, OS_LOG_TYPE_ERROR, "UIFocusItem: %@ with parentFocusEnvironment: %@  focusItemContainer: %@ has no coordinate space.", (uint8_t *)&v14, 0x20u);
    }

LABEL_6:
  }
LABEL_7:

  return v4;
}

double _UIFocusItemFrameInCoordinateSpace(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3 || !v4) {
    goto LABEL_8;
  }
  if (_IsKindOfUIView((uint64_t)v3))
  {
    [v3 _focusRegionFrameInCoordinateSpace:v5];
    double v7 = v6;
    goto LABEL_9;
  }
  if ((_UIFocusItemIsViewOrRespondsToSelector(v3) & 1) == 0)
  {
LABEL_8:
    double v7 = *MEMORY[0x1E4F1DB20];
    goto LABEL_9;
  }
  uint64_t v8 = _UIParentCoordinateSpaceForFocusItem(v3);
  if (v8)
  {
    [v3 frame];
    objc_msgSend(v8, "convertRect:toCoordinateSpace:", v5);
    double v7 = v9;
  }
  else
  {
    double v7 = *MEMORY[0x1E4F1DB20];
  }

LABEL_9:
  return v7;
}

uint64_t _UIFocusItemDeferralModeForItem(void *a1)
{
  id v1 = a1;
  if (_UIFocusItemIsViewOrRespondsToSelector(v1))
  {
    uint64_t v2 = [v1 _focusItemDeferralMode];
  }
  else
  {
    if (!_UIFocusItemIsViewOrRespondsToSelector(v1))
    {
      uint64_t v3 = 0;
      goto LABEL_7;
    }
    uint64_t v2 = [v1 focusItemDeferralMode];
  }
  uint64_t v3 = v2;
LABEL_7:

  return v3;
}

uint64_t _UIFocusItemFocusSpeedBumpEdges(void *a1)
{
  id v1 = a1;
  if (_UIFocusItemIsViewOrRespondsToSelector(v1)) {
    uint64_t v2 = [v1 _focusSpeedBumpEdges];
  }
  else {
    uint64_t v2 = 0;
  }

  return v2;
}

id keyboardui_system_get_log_STAGING()
{
  if (qword_1EB2604E0 != -1) {
    dispatch_once(&qword_1EB2604E0, &__block_literal_global_538);
  }
  dispatch_workloop_t v0 = (void *)qword_1EB2604D8;
  return v0;
}

void sub_185F8A7E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __TIGetEmojiSearchAlternateBackgroundValue_block_invoke()
{
  id v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  [v0 _configureKey:@"EmojiSearchAlternateBackground" domain:@"com.apple.keyboard" defaultValue:MEMORY[0x1E4F1CC38]];
}

id _UIFocusNearestAncestorEnvironmentScrollableContainer(void *a1, int a2)
{
  id v3 = a1;
  if (!v3)
  {
    int v14 = [MEMORY[0x1E4F28B00] currentHandler];
    char v15 = objc_msgSend(NSString, "stringWithUTF8String:", "_UIFocusEnvironmentScrollableContainerTuple * _Nullable _UIFocusNearestAncestorEnvironmentScrollableContainer(__strong id<UIFocusEnvironment> _Nonnull, BOOL)");
    [v14 handleFailureInFunction:v15, @"UIFocusItemContainer.m", 75, @"Invalid parameter not satisfying: %@", @"environment" file lineNumber description];
  }
  id v4 = _UIFocusEnvironmentParentEnvironment(v3);
  if (!v4)
  {
LABEL_22:
    id v12 = 0;
    goto LABEL_23;
  }
  id v5 = v4;
  double v6 = v3;
  while (!_UIFocusEnvironmentIsViewOrViewControllerOrRespondsToSelector(v5))
  {
LABEL_19:
    double v6 = v5;
    id v5 = _UIFocusEnvironmentParentEnvironment(v5);
    if (!v5) {
      goto LABEL_22;
    }
  }
  double v7 = [v5 focusItemContainer];
  uint64_t v8 = v7;
  if (v7 && _UIFocusItemContainerIsScrollableContainer(v7))
  {
    id v9 = v8;
    if (_UIFocusEnvironmentPrefersFocusContainment(v5))
    {
      id v12 = +[_UIFocusEnvironmentScrollableContainerTuple tupleWithOwningEnvironment:v5 scrollableContainer:v9];

      goto LABEL_27;
    }
  }
  if (!a2
    || !_UIFocusEnvironmentIsViewOrViewControllerOrRespondsToSelector(v6)
    || (id v10 = (id)[v6 _focusFallbackScroller]) == 0)
  {
    BOOL v11 = v5;
    goto LABEL_18;
  }
  BOOL v11 = v10;
  if (!_UIFocusEnvironmentPrefersFocusContainment(v10))
  {
LABEL_18:

    id v5 = v11;
    goto LABEL_19;
  }
  id v9 = [v11 focusItemContainer];

  if (!v9)
  {
    uint64_t v8 = 0;
    goto LABEL_18;
  }
  if (!_UIFocusItemContainerIsScrollableContainer(v9))
  {
    uint64_t v8 = v9;
    goto LABEL_18;
  }
  id v12 = +[_UIFocusEnvironmentScrollableContainerTuple tupleWithOwningEnvironment:v11 scrollableContainer:v9];
LABEL_27:

LABEL_23:
  return v12;
}

uint64_t _UIFocusItemContainerIsScrollableContainer(void *a1)
{
  id v1 = a1;
  if (objc_opt_respondsToSelector()) {
    uint64_t v2 = [v1 conformsToProtocol:&unk_1ED42DC50];
  }
  else {
    uint64_t v2 = 0;
  }

  return v2;
}

id _UIFocusAncestorEnvironmentScrollableContainers(void *a1, int a2)
{
  id v3 = a1;
  id v4 = objc_alloc_init(MEMORY[0x1E4F1CA70]);
  if (v3)
  {
    id v5 = v3;
    do
    {
      double v6 = _UIFocusNearestAncestorEnvironmentScrollableContainer(v5, a2);
      if (v6) {
        [v4 addObject:v6];
      }
      id v5 = (id)[v6 owningEnvironment];
    }
    while (v5);
  }
  double v7 = [v4 array];

  return v7;
}

void _UIFocusItemContainerAddChildItemsInContextWithOptions(void *a1, void *a2, int a3)
{
  uint64_t v124 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  double v7 = [v5 owningEnvironment];
  uint64_t v8 = [v5 itemContainer];
  uint64_t v108 = [v8 coordinateSpace];
  id v9 = [v6 searchArea];
  id v10 = [v6 coordinateSpace];
  double v11 = _UIFocusEnvironmentContainerFrameInCoordinateSpace(v7, v10);
  double v13 = v12;
  double v15 = v14;
  double v17 = v16;
  [v10 bounds];
  double v97 = v11;
  double v98 = v13;
  double v99 = v15;
  double v100 = v17;
  if ((_UIRectSmartIntersectsRect(v18, v19, v20, v21, v11, v13, v15, v17) & 1) == 0
    && (a3 & 0x100) != 0
    && _UIFocusItemContainerIsLazy(v8))
  {
    CGFloat v22 = [_UIFocusPromiseRegion alloc];
    id v23 = v8;
    if (v23)
    {
      CGFloat v24 = NSString;
      double v25 = (objc_class *)objc_opt_class();
      CGFloat v26 = NSStringFromClass(v25);
      double v27 = [v24 stringWithFormat:@"<%@: %p>", v26, v23];
    }
    else
    {
      double v27 = @"(nil)";
    }

    double v89 = -[_UIFocusPromiseRegion initWithFrame:coordinateSpace:identifier:](v22, "initWithFrame:coordinateSpace:identifier:", v10, v27, v11, v13, v15, v17);
    v113[0] = MEMORY[0x1E4F143A8];
    v113[1] = 3221225472;
    v113[2] = ___UIFocusItemContainerAddChildItemsInContextWithOptions_block_invoke;
    v113[3] = &unk_1E52E5DB0;
    uint64_t v114 = (_UIFocusGuideRegion *)v5;
    [(_UIFocusPromiseRegion *)v89 setContentFulfillmentHandler:v113];
    uint64_t v107 = v89;
    [v6 addRegion:v89];
    double v87 = v114;
    goto LABEL_47;
  }
  int v101 = a3;
  id v104 = v5;
  long long v105 = v7;
  long long v103 = v9;
  [v9 frame];
  id v102 = v10;
  objc_msgSend(v108, "convertRect:fromCoordinateSpace:", v10);
  CGFloat v29 = v28;
  CGFloat v31 = v30;
  CGFloat v33 = v32;
  CGFloat v35 = v34;
  long long v106 = v8;
  objc_msgSend(v8, "focusItemsInRect:");
  CGFloat v36 = (_UIFocusPromiseRegion *)objc_claimAutoreleasedReturnValue();
  long long v109 = 0u;
  long long v110 = 0u;
  long long v111 = 0u;
  long long v112 = 0u;
  uint64_t v37 = [(_UIFocusPromiseRegion *)v36 countByEnumeratingWithState:&v109 objects:v123 count:16];
  uint64_t v107 = v36;
  if (v37)
  {
    uint64_t v38 = v37;
    uint64_t v39 = *(void *)v110;
    do
    {
      uint64_t v40 = 0;
      do
      {
        if (*(void *)v110 != v39) {
          objc_enumerationMutation(v36);
        }
        long long v41 = *(void **)(*((void *)&v109 + 1) + 8 * v40);
        if (*(unsigned char *)__UILogGetCategoryCachedImpl("UIFocus", &_MergedGlobals_1039))
        {
          double v59 = [v41 parentFocusEnvironment];
          CGRect v60 = [v59 focusItemContainer];

          if (v60 != v106)
          {
            CGRect v61 = *(id *)(__UILogGetCategoryCachedImpl("UIFocus", &qword_1EB260518) + 8);
            if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
            {
              if (v41)
              {
                uint64_t v62 = NSString;
                id v63 = v41;
                double v64 = (objc_class *)objc_opt_class();
                double v95 = NSStringFromClass(v64);
                double v65 = [v62 stringWithFormat:@"<%@: %p>", v95, v63];
              }
              else
              {
                double v65 = @"(nil)";
              }
              double v96 = v65;
              uint64_t v66 = [v41 parentFocusEnvironment];
              double v92 = (void *)v66;
              log = v61;
              if (v66)
              {
                double v67 = NSString;
                uint64_t v68 = v66;
                double v69 = (objc_class *)objc_opt_class();
                double v70 = NSStringFromClass(v69);
                double v71 = [v67 stringWithFormat:@"<%@: %p>", v70, v68];
              }
              else
              {
                double v71 = @"(nil)";
              }
              double v94 = v71;
              id v72 = v106;
              if (v106)
              {
                uint64_t v73 = NSString;
                double v74 = (objc_class *)objc_opt_class();
                double v75 = NSStringFromClass(v74);
                double v76 = [v73 stringWithFormat:@"<%@: %p>", v75, v72];
              }
              else
              {
                double v76 = @"(nil)";
              }

              double v91 = v76;
              id v77 = v105;
              if (v105)
              {
                uint64_t v78 = NSString;
                id v79 = (objc_class *)objc_opt_class();
                id v80 = NSStringFromClass(v79);
                unint64_t v81 = [v78 stringWithFormat:@"<%@: %p>", v80, v77];
              }
              else
              {
                unint64_t v81 = @"(nil)";
              }
              double v90 = v81;

              *(_DWORD *)buf = 138413058;
              double v116 = v96;
              __int16 v117 = 2112;
              double v118 = v94;
              __int16 v119 = 2112;
              double v120 = v91;
              __int16 v121 = 2112;
              long double v122 = v81;
              CGRect v61 = log;
              _os_log_impl(&dword_1853B0000, log, OS_LOG_TYPE_ERROR, "UIFocusItem: %@ has mismatched parentFocusEnvironment: %@  from focusItemContainer: %@ with owningEnvironment: %@", buf, 0x2Au);
            }
          }
        }
        double v42 = [v41 focusItemContainer];
        if (v42)
        {
          _UIFocusRegionContainerFromEnvironmentAndContainer((uint64_t)v41, (uint64_t)v42);
          uint64_t v43 = (_UIFocusItemRegion *)objc_claimAutoreleasedReturnValue();
          [v6 addRegionsInContainer:v43];
        }
        else
        {
          uint64_t v43 = [v6 searchInfo];
          if ([(_UIFocusItemRegion *)v43 shouldIncludeFocusItem:v41])
          {
            [v41 frame];
            int v48 = _UIRectSmartIntersectsRect(v44, v45, v46, v47, v29, v31, v33, v35);

            if (!v48) {
              goto LABEL_18;
            }
            double v49 = [_UIFocusItemRegion alloc];
            [v41 frame];
            double v51 = v50;
            double v53 = v52;
            double v55 = v54;
            double v57 = v56;
            double v58 = [v6 focusSystem];
            uint64_t v43 = -[_UIFocusItemRegion initWithFrame:coordinateSpace:item:focusSystem:](v49, "initWithFrame:coordinateSpace:item:focusSystem:", v108, v41, v58, v51, v53, v55, v57);

            CGFloat v36 = v107;
            [v6 addRegion:v43];
          }
        }

LABEL_18:
        ++v40;
      }
      while (v38 != v40);
      uint64_t v82 = [(_UIFocusPromiseRegion *)v36 countByEnumeratingWithState:&v109 objects:v123 count:16];
      uint64_t v38 = v82;
    }
    while (v82);
  }
  uint64_t v83 = [v6 movementInfo];
  uint64_t v8 = v106;
  id v84 = v106;
  id v85 = v83;
  if (_UIFocusItemIsViewOrRespondsToSelector(v84)) {
    uint64_t v86 = [v84 _focusGuideBehaviorForFocusMovement:v85];
  }
  else {
    uint64_t v86 = 0;
  }
  id v10 = v102;
  id v9 = v103;

  id v5 = v104;
  double v7 = v105;
  if ((v101 & 0x10000) != 0)
  {
    if (v86 == 2)
    {
      double v87 = -[_UIFocusGuideRegion initWithFrame:coordinateSpace:]([_UIFocusGuideRegion alloc], "initWithFrame:coordinateSpace:", v102, v97, v98, v99, v100);
      [(_UIFocusGuideRegion *)v87 setOwningEnvironment:v105];
      [v6 addRegion:v87];
      goto LABEL_47;
    }
    if (v86 == 1)
    {
      double v87 = [[_UIFocusRegionContainerProxy alloc] initWithEnvironmentContainer:v104];
      [(_UIFocusGuideRegion *)v87 setShouldCreateRegionForOwningItem:0];
      [(_UIFocusGuideRegion *)v87 setShouldCreateRegionForGuideBehavior:0];
      [(_UIFocusGuideRegion *)v87 setAllowsLazyLoading:0];
      double v88 = -[_UIFocusGuideRegion initWithFrame:coordinateSpace:]([_UIFocusContainerGuideRegion alloc], "initWithFrame:coordinateSpace:", v102, v97, v98, v99, v100);
      [(_UIFocusContainerGuideRegion *)v88 setContentFocusRegionContainer:v87];
      [v6 addRegion:v88];

LABEL_47:
    }
  }
}

uint64_t _UIRectSmartIntersectsRect(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  if (CGRectIsNull(*(CGRect *)&a1)) {
    return 0;
  }
  v33.origin.CGFloat x = a5;
  v33.origin.CGFloat y = a6;
  v33.size.CGFloat width = a7;
  v33.size.CGFloat height = a8;
  if (CGRectIsNull(v33)) {
    return 0;
  }
  v34.origin.CGFloat x = a1;
  v34.origin.CGFloat y = a2;
  v34.size.CGFloat width = a3;
  v34.size.CGFloat height = a4;
  CGRect v35 = CGRectStandardize(v34);
  CGFloat x = v35.origin.x;
  CGFloat y = v35.origin.y;
  CGFloat width = v35.size.width;
  CGFloat height = v35.size.height;
  v35.origin.CGFloat x = a5;
  v35.origin.CGFloat y = a6;
  v35.size.CGFloat width = a7;
  v35.size.CGFloat height = a8;
  CGRect v36 = CGRectStandardize(v35);
  CGFloat v21 = v36.origin.x;
  CGFloat v22 = v36.origin.y;
  CGFloat v23 = v36.size.width;
  CGFloat v24 = v36.size.height;
  CGFloat v31 = y;
  CGFloat v32 = x;
  v36.origin.CGFloat x = x;
  v36.origin.CGFloat y = y;
  v36.size.CGFloat width = width;
  v36.size.CGFloat height = height;
  CGFloat v25 = CGRectGetMinX(v36) + 0.0001;
  v37.origin.CGFloat x = v21;
  v37.origin.CGFloat y = v22;
  v37.size.CGFloat width = v23;
  v37.size.CGFloat height = v24;
  if (v25 <= CGRectGetMaxX(v37))
  {
    v38.origin.CGFloat y = v31;
    v38.origin.CGFloat x = x;
    v38.size.CGFloat width = width;
    v38.size.CGFloat height = height;
    CGFloat v27 = CGRectGetMaxX(v38) + -0.0001;
    v39.origin.CGFloat x = v21;
    v39.origin.CGFloat y = v22;
    v39.size.CGFloat width = v23;
    v39.size.CGFloat height = v24;
    BOOL v26 = v27 >= CGRectGetMinX(v39);
  }
  else
  {
    BOOL v26 = 0;
  }
  v40.origin.CGFloat x = x;
  v40.origin.CGFloat y = v31;
  v40.size.CGFloat width = width;
  v40.size.CGFloat height = height;
  CGFloat v28 = CGRectGetMinY(v40) + 0.0001;
  v41.origin.CGFloat x = v21;
  v41.origin.CGFloat y = v22;
  v41.size.CGFloat width = v23;
  v41.size.CGFloat height = v24;
  if (v28 <= CGRectGetMaxY(v41))
  {
    v42.origin.CGFloat x = v32;
    v42.origin.CGFloat y = v31;
    v42.size.CGFloat width = width;
    v42.size.CGFloat height = height;
    CGFloat v30 = CGRectGetMaxY(v42) + -0.0001;
    v43.origin.CGFloat x = v21;
    v43.origin.CGFloat y = v22;
    v43.size.CGFloat width = v23;
    v43.size.CGFloat height = v24;
    BOOL v29 = v30 >= CGRectGetMinY(v43);
  }
  else
  {
    BOOL v29 = 0;
  }
  return v26 & v29;
}

uint64_t _UIFocusItemContainerIsLazy(void *a1)
{
  id v1 = a1;
  if (_UIFocusItemIsViewOrRespondsToSelector(v1)) {
    uint64_t v2 = [v1 _isLazyFocusItemContainer];
  }
  else {
    uint64_t v2 = 0;
  }

  return v2;
}

uint64_t _UIFocusItemContainerSupportsInvalidatingFocusCache(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_respondsToSelector()) {
    uint64_t v2 = [(id)objc_opt_class() _supportsInvalidatingFocusCache];
  }
  else {
    uint64_t v2 = 1;
  }

  return v2;
}

id _UIFocusItemContainerExtantFocusItemsInRect(void *a1, double a2, double a3, double a4, double a5)
{
  id v9 = a1;
  if (_UIFocusItemIsViewOrRespondsToSelector(v9)) {
    objc_msgSend(v9, "_extantFocusItemsInRect:", a2, a3, a4, a5);
  }
  else {
  id v10 = objc_msgSend(v9, "focusItemsInRect:", a2, a3, a4, a5);
  }

  return v10;
}

uint64_t _UISwiftUIFocusItemContainerReturnsSubviewsInFocusItemsInRect(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1 && _UIFocusItemIsViewOrRespondsToSelector(v1)) {
    uint64_t v3 = [v2 _swiftuiReturnsSubviewsInFocusItemsInRect];
  }
  else {
    uint64_t v3 = 0;
  }

  return v3;
}

uint64_t _UIFocusItemScrollableContainerCanScrollX(void *a1)
{
  id v1 = a1;
  if (_UIFocusItemScrollableContainerIsScrollViewOrRespondsToSelector(v1))
  {
    uint64_t v2 = [v1 _focusCanScrollX];
  }
  else
  {
    [v1 contentSize];
    double v4 = v3;
    [v1 visibleSize];
    uint64_t v2 = v4 > v5;
  }

  return v2;
}

uint64_t _UIFocusItemScrollableContainerCanScrollY(void *a1)
{
  id v1 = a1;
  if (_UIFocusItemScrollableContainerIsScrollViewOrRespondsToSelector(v1))
  {
    uint64_t v2 = [v1 _focusCanScrollY];
  }
  else
  {
    [v1 contentSize];
    double v4 = v3;
    [v1 visibleSize];
    uint64_t v2 = v4 > v5;
  }

  return v2;
}

double _UIFocusItemScrollableContainerContentBounds(void *a1)
{
  id v1 = a1;
  if (_UIFocusItemScrollableContainerIsScrollViewOrRespondsToSelector(v1))
  {
    [v1 _focusScrollableContentBounds];
    double v3 = v2;
  }
  else
  {
    double v3 = *MEMORY[0x1E4F1DAD8];
    [v1 contentSize];
  }

  return v3;
}

uint64_t _UIFocusItemScrollableContainerPrimaryAxis(void *a1)
{
  id v1 = a1;
  if (_UIFocusItemScrollableContainerIsScrollViewOrRespondsToSelector(v1)) {
    uint64_t v2 = [v1 _focusPrimaryScrollableAxis];
  }
  else {
    uint64_t v2 = _UIFocusItemScrollableContainerDefaultPrimaryAxis(v1);
  }
  uint64_t v3 = v2;

  return v3;
}

uint64_t _UIFocusItemScrollableContainerDefaultPrimaryAxis(void *a1)
{
  id v1 = a1;
  [v1 contentSize];
  double v3 = v2;
  double v5 = v4;
  [v1 visibleSize];
  int CanScrollX = _UIFocusItemScrollableContainerCanScrollX(v1);
  int CanScrollY = _UIFocusItemScrollableContainerCanScrollY(v1);

  if (CanScrollX && CanScrollY)
  {
    uint64_t v8 = 2;
    if (v5 <= v3) {
      uint64_t v8 = 0;
    }
    if (v3 <= v5) {
      return v8;
    }
    else {
      return 1;
    }
  }
  else
  {
    uint64_t v10 = 2;
    if (!CanScrollY) {
      uint64_t v10 = 0;
    }
    if (CanScrollX) {
      return 1;
    }
    else {
      return v10;
    }
  }
}

id _UIFocusEngineCommonEnvironmentScrollableContainerForItems(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = [v3 item];
  if (v5
    && (id v6 = (void *)v5,
        [v4 item],
        double v7 = objc_claimAutoreleasedReturnValue(),
        v7,
        v6,
        v7))
  {
    uint64_t v8 = [v3 ancestorEnvironmentScrollableContainers];
    id v9 = [v4 ancestorEnvironmentScrollableContainers];
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    void v14[2] = ___UIFocusEngineCommonEnvironmentScrollableContainerForItems_block_invoke;
    v14[3] = &unk_1E52EDEA8;
    id v10 = v8;
    id v15 = v10;
    uint64_t v11 = [v9 indexOfObjectPassingTest:v14];
    if (v11 == 0x7FFFFFFFFFFFFFFFLL)
    {
      double v12 = 0;
    }
    else
    {
      double v12 = [v9 objectAtIndex:v11];
    }
  }
  else
  {
    double v12 = 0;
  }

  return v12;
}

uint64_t _UIFocusEngineScrollableContainerCanScroll(void *a1)
{
  id v1 = a1;
  if ((_UIFocusItemScrollableContainerCanScrollX(v1) & 1) != 0
    || _UIFocusItemScrollableContainerCanScrollY(v1))
  {
    if (objc_opt_respondsToSelector()) {
      uint64_t v2 = [v1 _focusIsScrollableContainer];
    }
    else {
      uint64_t v2 = 1;
    }
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id _UIFocusEngineFirstScrollableContainerTupleThatScrollsForItem(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  [a1 ancestorEnvironmentScrollableContainers];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v1 = (id)objc_claimAutoreleasedReturnValue();
  id v2 = (id)[v1 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v2)
  {
    uint64_t v3 = *(void *)v10;
    while (2)
    {
      for (unint64_t i = 0; i != v2; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v10 != v3) {
          objc_enumerationMutation(v1);
        }
        uint64_t v5 = *(void **)(*((void *)&v9 + 1) + 8 * i);
        id v6 = objc_msgSend(v5, "scrollableContainer", (void)v9);
        char CanScroll = _UIFocusEngineScrollableContainerCanScroll(v6);

        if (CanScroll)
        {
          id v2 = v5;
          goto LABEL_11;
        }
      }
      id v2 = (id)[v1 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
LABEL_11:

  return v2;
}

void sub_185F8E328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _enumeratePreferredFocusEnvironments(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a2;
  long long v9 = a3;
  if (v7)
  {
    if (v8) {
      goto LABEL_3;
    }
LABEL_35:
    CGFloat v25 = [MEMORY[0x1E4F28B00] currentHandler];
    BOOL v26 = objc_msgSend(NSString, "stringWithUTF8String:", "void _enumeratePreferredFocusEnvironments(_UIFocusEnvironmentPreferenceEnumerator *__strong, _UIFocusEnvironmentPreferenceEnumerationContext *__strong, void (^__strong)(__strong id<_UIFocusEnvironmentPreferenceEnumerationContext>, _UIFocusEnvironmentPreferenceEnumerationResult *), _UIFocusEnvironmentPreferenceEnumerationResult *)");
    [v25 handleFailureInFunction:v26, @"_UIFocusEnvironmentPreferenceEnumerator.m", 477, @"Invalid parameter not satisfying: %@", @"context" file lineNumber description];

    if (a4) {
      goto LABEL_4;
    }
LABEL_36:
    CGFloat v27 = [MEMORY[0x1E4F28B00] currentHandler];
    CGFloat v28 = objc_msgSend(NSString, "stringWithUTF8String:", "void _enumeratePreferredFocusEnvironments(_UIFocusEnvironmentPreferenceEnumerator *__strong, _UIFocusEnvironmentPreferenceEnumerationContext *__strong, void (^__strong)(__strong id<_UIFocusEnvironmentPreferenceEnumerationContext>, _UIFocusEnvironmentPreferenceEnumerationResult *), _UIFocusEnvironmentPreferenceEnumerationResult *)");
    [v27 handleFailureInFunction:v28, @"_UIFocusEnvironmentPreferenceEnumerator.m", 478, @"Invalid parameter not satisfying: %@", @"result" file lineNumber description];

    goto LABEL_4;
  }
  CGFloat v23 = [MEMORY[0x1E4F28B00] currentHandler];
  CGFloat v24 = objc_msgSend(NSString, "stringWithUTF8String:", "void _enumeratePreferredFocusEnvironments(_UIFocusEnvironmentPreferenceEnumerator *__strong, _UIFocusEnvironmentPreferenceEnumerationContext *__strong, void (^__strong)(__strong id<_UIFocusEnvironmentPreferenceEnumerationContext>, _UIFocusEnvironmentPreferenceEnumerationResult *), _UIFocusEnvironmentPreferenceEnumerationResult *)");
  [v23 handleFailureInFunction:v24, @"_UIFocusEnvironmentPreferenceEnumerator.m", 476, @"Invalid parameter not satisfying: %@", @"enumerator" file lineNumber description];

  if (!v8) {
    goto LABEL_35;
  }
LABEL_3:
  if (!a4) {
    goto LABEL_36;
  }
LABEL_4:
  uint64_t v34 = 0;
  char v10 = [v8 isInPreferredSubtree];
  if (v9 && (v10 & 1) != 0)
  {
    v9[2](v9, v8, &v34);
    if (v34 == 3) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v11 = [v8 debugStack];
    long long v12 = (void *)v11;
    if (v9 && v11)
    {
      char v13 = [v8 isPreferredByItself];

      if (v13) {
        goto LABEL_13;
      }
      long long v12 = [v8 debugStack];
      uint64_t v14 = +[_UIDebugLogMessage messageWithString:@"Not visiting node. Outside of preferred subtree."];
      [v12 addMessage:v14];
    }
  }
LABEL_13:
  if ([v8 prefersNothingFocused])
  {
LABEL_14:
    *a4 = 3;
    goto LABEL_15;
  }
  if (v34 != 1)
  {
    if (v34 == 2) {
      *a4 = 2;
    }
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    id v15 = [v8 preferredEnvironments];
    uint64_t v16 = [v15 countByEnumeratingWithState:&v30 objects:v35 count:16];
    if (v16)
    {
      uint64_t v17 = v16;
      uint64_t v18 = *(void *)v31;
      while (2)
      {
        for (uint64_t i = 0; i != v17; ++i)
        {
          if (*(void *)v31 != v18) {
            objc_enumerationMutation(v15);
          }
          uint64_t v20 = *(void *)(*((void *)&v30 + 1) + 8 * i);
          uint64_t v29 = 0;
          [v8 pushEnvironment:v20];
          _enumeratePreferredFocusEnvironments(v7, v8, v9, &v29);
          [v8 popEnvironment];
          if ((v29 & 0xFFFFFFFFFFFFFFFELL) == 2)
          {
            *a4 = v29;
            goto LABEL_29;
          }
        }
        uint64_t v17 = [v15 countByEnumeratingWithState:&v30 objects:v35 count:16];
        if (v17) {
          continue;
        }
        break;
      }
    }
LABEL_29:

    if ([v8 isInPreferredSubtree] && *a4 != 3)
    {
      uint64_t v21 = [v7 didVisitAllPreferencesForEnvironmentHandler];
      CGFloat v22 = (void *)v21;
      if (v21) {
        (*(void (**)(uint64_t, id, void *))(v21 + 16))(v21, v8, a4);
      }
    }
  }
LABEL_15:
}

void sub_185F8FF58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  _Block_object_dispose(&a38, 8);
  _Block_object_dispose((const void *)(v38 - 200), 8);
  _Block_object_dispose((const void *)(v38 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_185F90708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_185F90A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_185F90DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185F919F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id UIConfigurationColorTransformerGrayscale_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  double v10 = 0.0;
  double v11 = 0.0;
  double v8 = 0.0;
  double v9 = 0.0;
  if ([v2 getRed:&v11 green:&v10 blue:&v9 alpha:&v8])
  {
    double v3 = v11 * 0.2126 + v10 * 0.7152 + v9 * 0.0722;
    if (v3 <= 0.0031308) {
      double v4 = v3 * 12.92;
    }
    else {
      double v4 = pow(v3, 0.416666667) * 1.055 + -0.055;
    }
    id v5 = +[UIColor colorWithWhite:v4 alpha:v8];
  }
  else
  {
    id v5 = v2;
  }
  id v6 = v5;

  return v6;
}

id UIConfigurationColorTransformerPreferredTint_block_invoke_2(uint64_t a1, void *a2)
{
  id v2 = a2;
  return v2;
}

id UIConfigurationColorTransformerMonochromeTint_block_invoke_3()
{
  return +[UIColor _monochromeCellImageTintColor];
}

id UIConfigurationColorTransformerAlpha80Percent_block_invoke_4(uint64_t a1, void *a2)
{
  return _colorWithReducedAlpha(a2, 0.8);
}

id _colorWithReducedAlpha(void *a1, double a2)
{
  id v3 = a1;
  [v3 alphaComponent];
  id v5 = [v3 colorWithAlphaComponent:v4 * a2];

  return v5;
}

id UIConfigurationColorTransformerAlpha75Percent_block_invoke_5(uint64_t a1, void *a2)
{
  return _colorWithReducedAlpha(a2, 0.75);
}

id UIConfigurationColorTransformerAlpha65Percent_block_invoke_6(uint64_t a1, void *a2)
{
  return _colorWithReducedAlpha(a2, 0.65);
}

id UIConfigurationColorTransformerAlpha50Percent_block_invoke_7(uint64_t a1, void *a2)
{
  return _colorWithReducedAlpha(a2, 0.5);
}

id UIConfigurationColorTransformerAlpha30Percent_block_invoke_8(uint64_t a1, void *a2)
{
  return _colorWithReducedAlpha(a2, 0.3);
}

id UIConfigurationColorTransformerAlpha10Percent_block_invoke_9(uint64_t a1, void *a2)
{
  return _colorWithReducedAlpha(a2, 0.1);
}

id UIConfigurationColorTransformerAlpha70Percent_block_invoke_10(uint64_t a1, void *a2)
{
  return _colorWithReducedAlpha(a2, 0.7);
}

id UIConfigurationColorTransformerAlpha55Percent_block_invoke_11(uint64_t a1, void *a2)
{
  return _colorWithReducedAlpha(a2, 0.55);
}

id UIConfigurationColorTransformerAlpha18Percent_block_invoke_12(uint64_t a1, void *a2)
{
  return _colorWithReducedAlpha(a2, 0.18);
}

id UIConfigurationColorTransformerAlpha25Percent_block_invoke_13(uint64_t a1, void *a2)
{
  return _colorWithReducedAlpha(a2, 0.25);
}

id UIConfigurationColorTransformerAlpha17_5Percent_block_invoke_14(uint64_t a1, void *a2)
{
  return _colorWithReducedAlpha(a2, 0.175);
}

id UIConfigurationColorTransformerAlpha9_75Percent_block_invoke_15(uint64_t a1, void *a2)
{
  return _colorWithReducedAlpha(a2, 0.0975);
}

id UIConfigurationColorTransformerDynamicLightAlpha_block_invoke_16(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = +[UITraitCollection _currentTraitCollectionWithUnmarkedFallback]();
  BOOL v4 = [v3 userInterfaceStyle] == 1;

  id v5 = _colorWithReducedAlpha(v2, dbl_186B96520[v4]);

  return v5;
}

id UIConfigurationColorTransformerSecondaySystemFillAt75PercentAlpha_block_invoke_17()
{
  id v0 = +[UIColor secondarySystemFillColor];
  [v0 alphaComponent];
  id v2 = [v0 colorWithAlphaComponent:v1 * 0.75];

  return v2;
}

id UIConfigurationColorTransformerGrayscaleAlpha20_block_invoke_18(uint64_t a1, void *a2)
{
  id v2 = UIConfigurationColorTransformerGrayscale_block_invoke(a1, a2);
  id v3 = _colorWithReducedAlpha(v2, 0.2);

  return v3;
}

id UIConfigurationColorTransformerAddingWhite5_block_invoke_19(uint64_t a1, void *a2)
{
  return _colorByAddingWhite(a2, 0.05);
}

id _colorByAddingWhite(void *a1, double a2)
{
  id v3 = a1;
  BOOL v4 = +[UIColor whiteColor];
  id v5 = [v4 colorWithAlphaComponent:a2];

  id v6 = [v3 _colorBlendedWithColor:v5];

  return v6;
}

id UIConfigurationColorTransformerAddingWhite10_block_invoke_20(uint64_t a1, void *a2)
{
  return _colorByAddingWhite(a2, 0.1);
}

id UIConfigurationColorTransformerAddingWhite20_block_invoke_21(uint64_t a1, void *a2)
{
  return _colorByAddingWhite(a2, 0.2);
}

id UIConfigurationColorTransformerAddingWhite40_block_invoke_22(uint64_t a1, void *a2)
{
  return _colorByAddingWhite(a2, 0.4);
}

UIColor *UIConfigurationColorTransformerTertiaryLabelColor_block_invoke_23()
{
  return +[UIColor tertiaryLabelColor];
}

id UIConfigurationColorTransformerIdentity_block_invoke_24(uint64_t a1, void *a2)
{
  id v2 = a2;
  return v2;
}

id UIConfigurationColorTransformerDesaturated_block_invoke_25(uint64_t a1, void *a2)
{
  return _colorDesaturated(a2, 0);
}

id _colorDesaturated(void *a1, uint64_t a2)
{
  id v3 = a1;
  BOOL v4 = +[UITraitCollection _currentTraitCollectionWithUnmarkedFallback]();
  uint64_t v5 = [v4 userInterfaceStyle];

  if (v5 != 2)
  {
    double v24 = 0.0;
    double v25 = 0.0;
    double v22 = 0.0;
    double v23 = 0.0;
    [v3 getRed:&v25 green:&v24 blue:&v23 alpha:&v22];
    double v20 = 0.0;
    double v21 = 0.0;
    double v19 = 0.0;
    _NXRGBToHSB(&v21, &v20, &v19, v25, v24, v23);
    if (v19 == 0.0)
    {
      double v7 = 1.25;
    }
    else
    {
      double v7 = fmax(1.0 / v19, 1.0);
      if (v7 > 1.25) {
        double v7 = 1.25;
      }
    }
    double v13 = v19 * v7;
    double v14 = v20 * (v7 + -1.25 + 1.0);
    double v8 = [UIColor alloc];
    double v9 = v21;
    double v12 = v22;
    double v10 = v14;
    double v11 = v13;
    goto LABEL_13;
  }
  double v24 = 0.0;
  double v25 = 0.0;
  double v22 = 0.0;
  double v23 = 0.0;
  [v3 getRed:&v25 green:&v24 blue:&v23 alpha:&v22];
  if (fabs(v25 + -1.0) > 0.001)
  {
    double v6 = v23;
LABEL_10:
    double v20 = 0.0;
    double v21 = 0.0;
    double v19 = 0.0;
    _NXRGBToHSB(&v21, &v20, &v19, v25, v24, v6);
    double v8 = [UIColor alloc];
    double v10 = v20;
    double v9 = v21;
    double v11 = v19 * 0.8;
    double v12 = v22;
LABEL_13:
    uint64_t v15 = [(UIColor *)v8 initWithHue:v9 saturation:v10 brightness:v11 alpha:v12];
    goto LABEL_14;
  }
  double v6 = v23;
  if (fabs(v24 + -1.0) > 0.001 || fabs(v23 + -1.0) > 0.001) {
    goto LABEL_10;
  }
  uint64_t v15 = (UIColor *)v3;
LABEL_14:
  uint64_t v16 = v15;
  if (a2)
  {
    uint64_t v17 = _colorDesaturated(v15, a2 - 1);

    uint64_t v16 = (void *)v17;
  }

  return v16;
}

id UIConfigurationColorTransformerDesaturatedSecondary_block_invoke_26(uint64_t a1, void *a2)
{
  return _colorDesaturated(a2, 1);
}

id UIConfigurationColorTransformerDesaturatedTertiary_block_invoke_27(uint64_t a1, void *a2)
{
  return _colorDesaturated(a2, 2);
}

__CFString *_UIConfigurationColorTransformerIdentifierToString(unint64_t a1)
{
  if (a1 > 0x1C) {
    return @"Custom";
  }
  else {
    return off_1E52EE0F8[a1];
  }
}

id _UIConfigurationCompatibilityColorForHighlightedState(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    v5[2] = ___UIConfigurationCompatibilityColorForHighlightedState_block_invoke;
    v5[3] = &unk_1E52EE000;
    id v7 = &__block_literal_global_14_4;
    id v6 = v1;
    id v3 = +[UIColor colorWithDynamicProvider:v5];
  }
  else
  {
    id v3 = 0;
  }

  return v3;
}

void sub_185F94258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_185F96FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185F98138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185F9886C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

CGPatternRef _UIFocusDebugImagePatternCreateWithType(CGPatternRef result, CGContext *a2)
{
  if (result)
  {
    CGPatternRef v3 = result;
    BOOL v4 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC10]);
    Pattern = CGColorSpaceCreatePattern(v4);
    CGContextSetFillColorSpace(a2, Pattern);
    CGColorSpaceRelease(Pattern);
    CGColorSpaceRelease(v4);
    switch((unint64_t)v3)
    {
      case 1uLL:
        long long v6 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
        v19[0] = *MEMORY[0x1E4F1DAB8];
        v19[1] = v6;
        v19[2] = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
        id v7 = (const CGPatternCallbacks *)&_UIFocusDebugImagePatternCreateWithType_callbacks;
        uint64_t v8 = 0;
        uint64_t v9 = 0;
        double v10 = 30.0;
        double v11 = 30.0;
        double v12 = (CGAffineTransform *)v19;
        goto LABEL_8;
      case 2uLL:
        CGAffineTransformMakeRotation(&v18, 0.785398163);
        id v7 = (const CGPatternCallbacks *)&_UIFocusDebugImagePatternCreateWithType_callbacks_1;
        double v10 = 22.5;
        uint64_t v8 = 0;
        uint64_t v9 = 0;
        double v12 = &v18;
        goto LABEL_10;
      case 3uLL:
        CGAffineTransformMakeRotation(&v17, 0.785398163);
        id v7 = (const CGPatternCallbacks *)&_UIFocusDebugImagePatternCreateWithType_callbacks_2;
        uint64_t v8 = 0;
        uint64_t v9 = 0;
        double v10 = 30.0;
        double v11 = 30.0;
        double v12 = &v17;
        goto LABEL_8;
      case 4uLL:
        CGAffineTransformMakeRotation(&v16, 2.35619449);
        id v7 = (const CGPatternCallbacks *)&_UIFocusDebugImagePatternCreateWithType_callbacks_3;
        uint64_t v8 = 0;
        uint64_t v9 = 0;
        double v10 = 30.0;
        double v11 = 30.0;
        double v12 = &v16;
LABEL_8:
        CGFloat v13 = 30.0;
        CGFloat v14 = 30.0;
        goto LABEL_11;
      case 5uLL:
        CGAffineTransformMakeRotation(&v15, 2.35619449);
        id v7 = (const CGPatternCallbacks *)&_UIFocusDebugImagePatternCreateWithType_callbacks_4;
        double v10 = 22.5;
        uint64_t v8 = 0;
        uint64_t v9 = 0;
        double v12 = &v15;
LABEL_10:
        double v11 = 22.5;
        CGFloat v13 = 22.5;
        CGFloat v14 = 22.5;
LABEL_11:
        double result = CGPatternCreate(0, *(CGRect *)&v8, v12, v13, v14, kCGPatternTilingConstantSpacing, 0, v7);
        break;
      default:
        double result = 0;
        break;
    }
  }
  return result;
}

void _UICheckerStencilPattern(uint64_t a1, CGContext *a2)
{
  v4.origin.CGFloat x = 0.5;
  v4.origin.CGFloat y = 0.5;
  v4.size.CGFloat width = 14.0;
  v4.size.CGFloat height = 14.0;
  CGRect v5 = CGRectIntegral(v4);
  CGContextFillRect(a2, v5);
  v6.origin.CGFloat x = 15.5;
  v6.origin.CGFloat y = 15.5;
  v6.size.CGFloat width = 14.0;
  v6.size.CGFloat height = 14.0;
  CGRect v7 = CGRectIntegral(v6);
  CGContextFillRect(a2, v7);
}

void _UIDiamondStencilPattern(uint64_t a1, CGContext *a2)
{
  v4.origin.CGFloat x = 0.0;
  v4.origin.CGFloat y = 0.0;
  v4.size.CGFloat width = 15.0;
  v4.size.CGFloat height = 15.0;
  CGRect v5 = CGRectIntegral(v4);
  CGContextFillRect(a2, v5);
}

void _UILineStencilPattern(uint64_t a1, CGContext *a2)
{
  v4.origin.CGFloat x = 0.0;
  v4.origin.CGFloat y = 0.0;
  v4.size.CGFloat width = 15.0;
  v4.size.CGFloat height = 15.0;
  CGRect v5 = CGRectIntegral(v4);
  CGContextFillRect(a2, v5);
  v6.origin.CGFloat x = 0.0;
  v6.origin.CGFloat y = 15.0;
  v6.size.CGFloat width = 15.0;
  v6.size.CGFloat height = 15.0;
  CGRect v7 = CGRectIntegral(v6);
  CGContextFillRect(a2, v7);
}

void _UICircleStencilPattern(int a1, CGContextRef c)
{
  CGContextAddArc(c, 11.25, 11.25, 7.5, 0.0, 6.28318531, 1);
  CGContextFillPath(c);
}

id UITextAnimationsNewRenderController()
{
  _SwiftUITextAnimationProviderClass();
  id v1 = v0;
  id v2 = (uint64_t *)MEMORY[0x1E4F1C3A8];
  if (!v0 || (objc_opt_respondsToSelector() & 1) == 0)
  {
    CGPatternRef v3 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v4 = *v2;
    CGRect v5 = [NSString stringWithUTF8String:"id<NSCustomTextRendering>  _Nonnull UITextAnimationsNewRenderController(void)"];
    [v3 raise:v4, @"[SwiftUI] Missing SPI: %@.", v5 format];
  }
  CGRect v6 = [v1 animationRenderer];
  if (!v6)
  {
    CGRect v7 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v8 = *v2;
    uint64_t v9 = [NSString stringWithUTF8String:"id<NSCustomTextRendering>  _Nonnull UITextAnimationsNewRenderController(void)"];
    [v7 raise:v8, @"[SwiftUI] Returned nil: %@.", v9 format];
  }
  return v6;
}

id UITextAnimationWithName(void *a1)
{
  id v1 = a1;
  _SwiftUITextAnimationProviderClass();
  CGPatternRef v3 = v2;
  if (!v2 || (objc_opt_respondsToSelector() & 1) == 0)
  {
    uint64_t v4 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v5 = *MEMORY[0x1E4F1C3A8];
    CGRect v6 = [NSString stringWithUTF8String:"id  _Nullable UITextAnimationWithName(NSString *__strong _Nonnull)"];
    [v4 raise:v5, @"[SwiftUI] Missing SPI: %@.", v6 format];
  }
  CGRect v7 = [v3 animationWithName:v1];

  return v7;
}

id UITextAnimationWithNameAndLocaleIdentifier(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  _SwiftUITextAnimationProviderClass();
  CGRect v6 = v5;
  if (!v5 || (objc_opt_respondsToSelector() & 1) == 0)
  {
    CGRect v7 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v8 = *MEMORY[0x1E4F1C3A8];
    uint64_t v9 = objc_msgSend(NSString, "stringWithUTF8String:", "id  _Nullable UITextAnimationWithNameAndLocaleIdentifier(NSString *__strong _Nonnull, NSString *__strong _Nonnull)");
    [v7 raise:v8, @"[SwiftUI] Missing SPI: %@.", v9 format];
  }
  double v10 = [v6 animationWithName:v3 localeIdentifier:v4];

  return v10;
}

uint64_t __SwiftUILibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB260580 = result;
  return result;
}

void sub_185F9BB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _UIAttributedTitleForTitle(void *a1, void *a2, void *a3)
{
  v14[1] = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v13 = *(void *)off_1E52D2040;
    v14[0] = v5;
    CGRect v7 = (void *)MEMORY[0x1E4F1C9E8];
    id v8 = a1;
    uint64_t v9 = [v7 dictionaryWithObjects:v14 forKeys:&v13 count:1];
    double v10 = (void *)[v9 mutableCopy];

    if ([v6 count]) {
      [v10 addEntriesFromDictionary:v6];
    }
    double v11 = (void *)[objc_alloc(MEMORY[0x1E4F28B18]) initWithString:v8 attributes:v10];
  }
  else
  {
    double v11 = 0;
  }

  return v11;
}

double _UIFocusEngineSensitivityForEdgeLength(double a1)
{
  double v1 = 6.0;
  double v2 = 70.0;
  if (a1 >= 70.0)
  {
    double v1 = 1.0;
    if (a1 <= 1700.0)
    {
      uint64_t v3 = 0;
      double v4 = 6.0;
      while (1)
      {
        double v5 = *(double *)((char *)&_sensitivityKeyframes + v3);
        double v1 = *(double *)((char *)&_sensitivityKeyframes + v3 + 8);
        if (v5 == a1) {
          break;
        }
        if (v5 >= a1)
        {
          if (v5 > a1) {
            return v1 * ((a1 - v2) / (v5 - v2)) + v4 * (1.0 - (a1 - v2) / (v5 - v2));
          }
        }
        else
        {
          double v4 = *(double *)((char *)&_sensitivityKeyframes + v3 + 8);
          double v2 = *(double *)((char *)&_sensitivityKeyframes + v3);
        }
        v3 += 16;
        if (v3 == 96)
        {
          double v1 = 1.0;
          double v5 = 1700.0;
          return v1 * ((a1 - v2) / (v5 - v2)) + v4 * (1.0 - (a1 - v2) / (v5 - v2));
        }
      }
    }
  }
  return v1;
}

double _UIFocusEngineAcceleratedSpeedForSpeed(uint64_t a1, int a2, int a3, double a4)
{
  double v5 = 1.0;
  double v6 = 0.5;
  if (!a3) {
    double v6 = 1.0;
  }
  double v7 = 0.1;
  if (a3) {
    double v7 = 0.15;
  }
  if (a2)
  {
    double v6 = -0.4;
    double v7 = 3.38;
  }
  BOOL v8 = a1 == 2;
  if (a1 == 2) {
    double v5 = v6;
  }
  double v9 = 0.16;
  if (a1 == 2) {
    double v9 = v7;
  }
  double v10 = 15.0;
  if ((v8 & a2) != 0) {
    double v10 = 0.75;
  }
  double v11 = 225.0;
  if ((v8 & a2) != 0) {
    double v11 = 0.5625;
  }
  if (v10 <= a4) {
    double v12 = (v5 + v10 * (v9 + v9)) * a4 - (v10 * (v5 + v10 * (v9 + v9)) - (v11 * v9 + v10 * v5));
  }
  else {
    double v12 = a4 * a4 * v9 + v5 * a4;
  }
  if (a1 == 2 && (unint64_t v13 = UIFocusGetSensitivitySetting(), v13 < 3))
  {
    double v14 = dbl_186B96690[v13];
  }
  else
  {
    uint64_t SensitivitySetting = UIFocusGetSensitivitySetting();
    double v14 = 0.65;
    if (SensitivitySetting != 1) {
      double v14 = 0.5;
    }
    if (SensitivitySetting == 2) {
      double v14 = 0.8125;
    }
  }
  return (v12 * v14 + (1.0 - v14) * a4) * 2.15;
}

id _UIFocusEngineJoystickTimer(uint64_t a1, uint64_t a2)
{
  double v2 = objc_msgSend(MEMORY[0x1E4F1CB00], "timerWithTimeInterval:target:selector:userInfo:repeats:", a1, a2, 0, 0);
  uint64_t v3 = [MEMORY[0x1E4F1CAC0] currentRunLoop];
  [v3 addTimer:v2 forMode:*MEMORY[0x1E4F1C4B0]];

  return v2;
}

void sub_185FA6574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185FA6780(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void _UIFocusRegionSearchContextAddChildItemsInEnvironmentContainer(void *a1, void *a2, void *a3, int a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v41 = v7;
  id v10 = v8;
  double v11 = [v10 focusItemContainer];
  if (!v11) {
    goto LABEL_9;
  }
  double v12 = [v41 searchArea];
  unint64_t v13 = [v12 coordinateSpace];
  double v14 = _UIFocusEnvironmentContainerFrameInCoordinateSpace(v10, v13);
  double v16 = v15;
  double v18 = v17;
  double v20 = v19;

  double v21 = [v41 searchArea];
  LODWORD(v13) = objc_msgSend(v21, "intersectsRect:", v14, v16, v18, v20);

  if (!v13)
  {
LABEL_9:

    CGFloat v28 = v41;
LABEL_10:

    goto LABEL_11;
  }
  double v22 = _UIFocusItemSafeCast(v10);
  double v23 = [v41 searchInfo];
  int v24 = [v23 treatFocusableItemAsLeaf];

  if (!v24 || _UITVFocusItemAllowsFocusInChildrenWhenFocused(v22) && _UIFocusItemIsFocused(v22) || !v22)
  {
  }
  else
  {
    double v25 = [v41 focusSystem];
    BOOL v26 = [v41 searchInfo];
    char IsFocusableInFocusSystemWithSearchInfo = _UIFocusItemIsFocusableInFocusSystemWithSearchInfo(v22, v25, v26);

    if (IsFocusableInFocusSystemWithSearchInfo) {
      goto LABEL_11;
    }
  }
  if (v9)
  {
    uint64_t v29 = +[_UIFocusEnvironmentContainerTuple tupleWithOwningEnvironment:v10 itemContainer:v9];
    _UIFocusItemContainerAddChildItemsInContextWithOptions(v29, v41, a4 & 0xFFFFFF);
  }
  if (_IsKindOfUIView((uint64_t)v10)
    && (_UIViewShouldReturnSubviewsInFocusItemsInRect() & 1) == 0
    && (_UISwiftUIFocusItemContainerReturnsSubviewsInFocusItemsInRect(v9) & 1) == 0)
  {
    long long v30 = [v41 searchArea];
    [v30 frame];
    double v32 = v31;
    double v34 = v33;
    double v36 = v35;
    double v38 = v37;
    CGRect v39 = [v41 searchArea];
    CGRect v40 = [v39 coordinateSpace];
    CGFloat v28 = objc_msgSend(v10, "_childFocusRegionsInRect:inCoordinateSpace:", v40, v32, v34, v36, v38);

    if (v28) {
      [v41 addRegionsInContainers:v28];
    }
    goto LABEL_10;
  }
LABEL_11:
}

void _UIFocusRegionSearchContextSearchForFocusRegionsInEnvironment(void *a1, void *a2, int a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = _UIFocusItemSafeCast(v6);
  id v8 = [v6 focusItemContainer];
  double v36 = [v8 coordinateSpace];
  int v9 = _UITVFocusItemAddsChildFocusItemsBeforeSelf(v7);
  id v10 = [v5 searchArea];
  double v11 = [v5 coordinateSpace];
  if (v9) {
    _UIFocusRegionSearchContextAddChildItemsInEnvironmentContainer(v5, v6, v8, a3 & 0xFFFFFF);
  }
  if (v7 && (a3 & 1) != 0)
  {
    if ((_UITVFocusItemAddsChildFocusItemsButNotSelf(v7) & 1) == 0)
    {
      double v12 = objc_msgSend(v5, "searchInfo", v36);
      int v13 = [v12 shouldIncludeFocusItem:v7];

      if (v13)
      {
        double v14 = _UIFocusItemFrameInCoordinateSpace(v7, v11);
        double v16 = v15;
        double v18 = v17;
        double v20 = v19;
        if (objc_msgSend(v10, "intersectsRect:"))
        {
          if ((_UIFocusItemIsLegacyTransparentFocusRegionInSearchContext(v7, v5) & 1) == 0)
          {
            double v21 = [_UIFocusItemRegion alloc];
            double v22 = [v5 focusSystem];
            double v23 = -[_UIFocusItemRegion initWithFrame:coordinateSpace:item:focusSystem:](v21, "initWithFrame:coordinateSpace:item:focusSystem:", v11, v7, v22, v14, v16, v18, v20);

            [v5 addRegion:v23];
          }
        }
      }
    }
    id v24 = v5;
    id v25 = v7;
  }
  else
  {
    id v26 = v5;
    id v27 = v7;
    if (!v7) {
      goto LABEL_14;
    }
  }
  uint64_t v28 = _UIFocusItemFocusSpeedBumpEdges(v7);
  if (v28)
  {
    uint64_t v29 = v28;
    long long v30 = [v5 coordinateSpace];
    v39.origin.CGFloat x = _UIFocusItemFrameInCoordinateSpace(v7, v30);
    CGRect v40 = CGRectInset(v39, -1.0, -1.0);
    double v31 = -[_UIFocusSpeedBumpRegion initWithFrame:coordinateSpace:speedBumpEdges:]([_UIFocusSpeedBumpRegion alloc], "initWithFrame:coordinateSpace:speedBumpEdges:", v30, v29, v40.origin.x, v40.origin.y, v40.size.width, v40.size.height);
    [v5 addRegion:v31];
  }
LABEL_14:

  if ((v9 & 1) == 0) {
    _UIFocusRegionSearchContextAddChildItemsInEnvironmentContainer(v5, v6, v8, a3 & 0xFFFFFF);
  }
  id v32 = v5;
  id v33 = v7;
  double v34 = v33;
  if (v7 && _IsKindOfUIView((uint64_t)v33))
  {
    double v35 = [v34 focusGuides];
    [v32 addRegionsInContainers:v35];
  }
  id v37 = v32;
  if ((_UIFocusItemContainerSupportsInvalidatingFocusCache(v8) & 1) == 0) {
    [v37 markContainerAsProvidingDynamicContent];
  }
}

uint64_t _UIEffectiveFocusRegionBoundariesForHeading(uint64_t result, char a2)
{
  if (result)
  {
    if (result == 15)
    {
      return 111;
    }
    else
    {
      uint64_t v2 = result & 0x10;
      if ((result & 0x24) != 0) {
        uint64_t v3 = result & 0x10 | 0x24;
      }
      else {
        uint64_t v3 = result & 0x10;
      }
      if ((result & 0x41) != 0) {
        v3 |= 0x41uLL;
      }
      if (a2) {
        uint64_t v2 = v3;
      }
      if ((result & 0x21) != 0) {
        uint64_t v4 = v2 | 0x21;
      }
      else {
        uint64_t v4 = v2;
      }
      if ((result & 0x44) != 0) {
        v4 |= 0x44uLL;
      }
      if ((a2 & 2) != 0) {
        uint64_t v2 = v4;
      }
      if ((result & 0x28) != 0) {
        uint64_t v5 = v2 | 0x28;
      }
      else {
        uint64_t v5 = v2;
      }
      if ((result & 0x42) != 0) {
        v5 |= 0x42uLL;
      }
      if ((a2 & 0x24) != 0) {
        uint64_t v2 = v5;
      }
      if ((result & 0x22) != 0) {
        uint64_t v6 = v2 | 0x22;
      }
      else {
        uint64_t v6 = v2;
      }
      if ((result & 0x48) != 0) {
        v6 |= 0x48uLL;
      }
      if ((a2 & 0x18) != 0) {
        return v6;
      }
      else {
        return v2;
      }
    }
  }
  return result;
}

_UIFocusRegionContainerProxy *_UIFocusRegionContainerFromEnvironmentAndContainer(uint64_t a1, uint64_t a2)
{
  id v2 = +[_UIFocusEnvironmentContainerTuple tupleWithOwningEnvironment:a1 itemContainer:a2];
  uint64_t v3 = [v2 owningEnvironment];
  uint64_t v4 = [v2 itemContainer];
  if (v3 == v4 && [v3 conformsToProtocol:&unk_1ED444080]) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = [[_UIFocusRegionContainerProxy alloc] initWithEnvironmentContainer:v2];
  }
  uint64_t v6 = v5;

  return v6;
}

void _UISnapshotVisitFocusRegion(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;
  if (v13
    && (!a4 || [v12 includeFocusGuides])
    && objc_msgSend(v13, "_legacy_isEligibleForFocusInteraction"))
  {
    [v13 _focusRegionFrame];
    double v15 = v14;
    double v17 = v16;
    double v19 = v18;
    double v21 = v20;
    if ((a6 & 1) == 0)
    {
      [v12 viewSearchRect];
      v81.origin.CGFloat x = v22;
      v81.origin.CGFloat y = v23;
      v81.size.CGFloat width = v24;
      v81.size.CGFloat height = v25;
      v80.origin.CGFloat x = v15;
      v80.origin.CGFloat y = v17;
      v80.size.CGFloat width = v19;
      v80.size.CGFloat height = v21;
      if (!CGRectIntersectsRect(v80, v81))
      {
        long long v72 = 0u;
        long long v73 = 0u;
        long long v70 = 0u;
        long long v71 = 0u;
        uint64_t v28 = [v13 _focusRegionGuides];
        uint64_t v38 = [v28 countByEnumeratingWithState:&v70 objects:v78 count:16];
        if (v38)
        {
          uint64_t v39 = v38;
          uint64_t v40 = *(void *)v71;
          do
          {
            for (uint64_t i = 0; i != v39; ++i)
            {
              if (*(void *)v71 != v40) {
                objc_enumerationMutation(v28);
              }
              _UISnapshotVisitFocusRegion(v11, v12, *(void *)(*((void *)&v70 + 1) + 8 * i), 1, a5, 0);
            }
            uint64_t v39 = [v28 countByEnumeratingWithState:&v70 objects:v78 count:16];
          }
          while (v39);
        }
        goto LABEL_62;
      }
    }
    if (a4)
    {
      id v26 = v13;
      if (!_IsFocusContainerGuide_UIFocusContainerGuideClass) {
        _IsFocusContainerGuide_UIFocusContainerGuideClass = objc_opt_class();
      }
      char isKindOfClass = objc_opt_isKindOfClass();
    }
    else
    {
      if ([v13 _isTransparentFocusRegion])
      {
        uint64_t v28 = _UIFocusChildLegacyRegionsInRegionForRequest(v13, v12);
        long long v66 = 0u;
        long long v67 = 0u;
        long long v68 = 0u;
        long long v69 = 0u;
        uint64_t v29 = [v28 countByEnumeratingWithState:&v66 objects:v77 count:16];
        if (v29)
        {
          uint64_t v30 = v29;
          uint64_t v31 = *(void *)v67;
          do
          {
            for (uint64_t j = 0; j != v30; ++j)
            {
              if (*(void *)v67 != v31) {
                objc_enumerationMutation(v28);
              }
              _UISnapshotVisitFocusRegion(v11, v12, *(void *)(*((void *)&v66 + 1) + 8 * j), 0, 0, a6);
            }
            uint64_t v30 = [v28 countByEnumeratingWithState:&v66 objects:v77 count:16];
          }
          while (v30);
        }
        long long v64 = 0u;
        long long v65 = 0u;
        long long v62 = 0u;
        long long v63 = 0u;
        id v33 = [v13 _focusRegionGuides];
        uint64_t v34 = [v33 countByEnumeratingWithState:&v62 objects:v76 count:16];
        if (v34)
        {
          uint64_t v35 = v34;
          uint64_t v36 = *(void *)v63;
          do
          {
            for (uint64_t k = 0; k != v35; ++k)
            {
              if (*(void *)v63 != v36) {
                objc_enumerationMutation(v33);
              }
              _UISnapshotVisitFocusRegion(v11, v12, *(void *)(*((void *)&v62 + 1) + 8 * k), 1, 0, a6);
            }
            uint64_t v35 = [v33 countByEnumeratingWithState:&v62 objects:v76 count:16];
          }
          while (v35);
        }
        goto LABEL_61;
      }
      char isKindOfClass = 0;
    }
    CGRect v42 = [v12 focusSystem];
    int CanBecomeFocused = _UIFocusItemCanBecomeFocused(v13, v42);

    uint64_t v28 = [v13 _focusRegionFocusSystem];
    if (v28)
    {
      CGFloat v44 = [v12 focusSystem];

      if (v44 == v28 && ((CanBecomeFocused ^ 1) & 1) == 0)
      {
LABEL_39:
        if (isKindOfClass)
        {
          if ([v12 includeFocusContainerGuides]) {
            objc_msgSend(v11, "_addFocusContainerGuide:withFrame:", v13, v15, v17, v19, v21);
          }
        }
        else
        {
          objc_msgSend(v11, "_addFocusableRegion:isFocusGuide:withFrame:", v13, a4, v15, v17, v19, v21);
        }
LABEL_54:
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        id v33 = objc_msgSend(v13, "_focusRegionGuides", 0);
        uint64_t v50 = [v33 countByEnumeratingWithState:&v54 objects:v74 count:16];
        if (v50)
        {
          uint64_t v51 = v50;
          uint64_t v52 = *(void *)v55;
          do
          {
            for (uint64_t m = 0; m != v51; ++m)
            {
              if (*(void *)v55 != v52) {
                objc_enumerationMutation(v33);
              }
              _UISnapshotVisitFocusRegion(v11, v12, *(void *)(*((void *)&v54 + 1) + 8 * m), 1, a5, a6);
            }
            uint64_t v51 = [v33 countByEnumeratingWithState:&v54 objects:v74 count:16];
          }
          while (v51);
        }
LABEL_61:

LABEL_62:
        goto LABEL_63;
      }
    }
    else if (CanBecomeFocused)
    {
      goto LABEL_39;
    }
    if (!(isKindOfClass & 1 | ((a5 & 1) == 0))) {
      objc_msgSend(v11, "_occludeFocusInFrame:", v15, v17, v19, v21);
    }
    CGFloat v45 = _UIFocusChildLegacyRegionsInRegionForRequest(v13, v12);
    long long v58 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    uint64_t v46 = [v45 countByEnumeratingWithState:&v58 objects:v75 count:16];
    if (v46)
    {
      uint64_t v47 = v46;
      uint64_t v48 = *(void *)v59;
      do
      {
        for (uint64_t n = 0; n != v47; ++n)
        {
          if (*(void *)v59 != v48) {
            objc_enumerationMutation(v45);
          }
          _UISnapshotVisitFocusRegion(v11, v12, *(void *)(*((void *)&v58 + 1) + 8 * n), 0, a5, a6);
        }
        uint64_t v47 = [v45 countByEnumeratingWithState:&v58 objects:v75 count:16];
      }
      while (v47);
    }

    goto LABEL_54;
  }
LABEL_63:
}

void _UICheckerStencilPattern_0(uint64_t a1, CGContext *a2)
{
  v4.origin.CGFloat x = 0.5;
  v4.origin.CGFloat y = 0.5;
  v4.size.CGFloat width = 14.0;
  v4.size.CGFloat height = 14.0;
  CGRect v5 = CGRectIntegral(v4);
  CGContextFillRect(a2, v5);
  v6.origin.CGFloat x = 15.5;
  v6.origin.CGFloat y = 15.5;
  v6.size.CGFloat width = 14.0;
  v6.size.CGFloat height = 14.0;
  CGRect v7 = CGRectIntegral(v6);
  CGContextFillRect(a2, v7);
}

void _UIDiamondStencilPattern_0(uint64_t a1, CGContext *a2)
{
  v4.origin.CGFloat x = 0.0;
  v4.origin.CGFloat y = 0.0;
  v4.size.CGFloat width = 15.0;
  v4.size.CGFloat height = 15.0;
  CGRect v5 = CGRectIntegral(v4);
  CGContextFillRect(a2, v5);
}

void _UILineStencilPattern_0(uint64_t a1, CGContext *a2)
{
  v4.origin.CGFloat x = 0.0;
  v4.origin.CGFloat y = 0.0;
  v4.size.CGFloat width = 15.0;
  v4.size.CGFloat height = 15.0;
  CGRect v5 = CGRectIntegral(v4);
  CGContextFillRect(a2, v5);
  v6.origin.CGFloat x = 0.0;
  v6.origin.CGFloat y = 15.0;
  v6.size.CGFloat width = 15.0;
  v6.size.CGFloat height = 15.0;
  CGRect v7 = CGRectIntegral(v6);
  CGContextFillRect(a2, v7);
}

void _UICircleStencilPattern_0(int a1, CGContextRef c)
{
  CGContextAddArc(c, 11.25, 11.25, 7.5, 0.0, 6.28318531, 1);
  CGContextFillPath(c);
}

id _UIFocusChildLegacyRegionsInRegionForRequest(void *a1, void *a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  CGRect v5 = (void *)MEMORY[0x1E4F1CA48];
  [v4 viewSearchRect];
  CGRect v6 = objc_msgSend(v3, "_childFocusRegionsInRect:inCoordinateSpace:", 0);
  CGRect v7 = [v5 arrayWithArray:v6];

  if (_IsKindOfUIView((uint64_t)v3) & 1) != 0 || (objc_opt_respondsToSelector())
  {
    id v8 = [v3 focusItemContainer];
    int v9 = +[UIWindow _applicationKeyWindow];
    if (objc_msgSend(v8, "__isKindOfUIResponder"))
    {
      uint64_t v10 = [v8 _window];

      int v9 = (void *)v10;
    }
    id v35 = v4;
    [v4 viewSearchRect];
    double v12 = v11;
    double v14 = v13;
    double v16 = v15;
    double v18 = v17;
    double v19 = [v8 coordinateSpace];
    objc_msgSend(v9, "convertRect:toCoordinateSpace:", v19, v12, v14, v16, v18);
    double v21 = v20;
    double v23 = v22;
    double v25 = v24;
    double v27 = v26;

    uint64_t v28 = objc_msgSend(v8, "focusItemsInRect:", v21, v23, v25, v27);
    long long v36 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    uint64_t v29 = [v28 countByEnumeratingWithState:&v36 objects:v40 count:16];
    if (v29)
    {
      uint64_t v30 = v29;
      uint64_t v31 = *(void *)v37;
      do
      {
        for (uint64_t i = 0; i != v30; ++i)
        {
          if (*(void *)v37 != v31) {
            objc_enumerationMutation(v28);
          }
          id v33 = *(void **)(*((void *)&v36 + 1) + 8 * i);
          if ((_IsKindOfUIView((uint64_t)v33) & 1) != 0
            || [v33 conformsToProtocol:&unk_1ED402298])
          {
            [v7 addObject:v33];
          }
        }
        uint64_t v30 = [v28 countByEnumeratingWithState:&v36 objects:v40 count:16];
      }
      while (v30);
    }

    id v4 = v35;
  }

  return v7;
}

void sub_185FB87C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

double _UIFocusMapDistanceToRegionBoundary(uint64_t a1, unsigned int a2, void *a3, uint64_t a4, uint64_t a5, void *a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10)
{
  id v19 = a3;
  [a6 snapshotFrameForRegion:a1];
  double v21 = v20;
  double v23 = v22;
  double v25 = v24;
  double v27 = v26;
  uint64_t v28 = [v19 heading];
  unint64_t v29 = v28;
  if (a4)
  {
    if (a4 != 1)
    {
      double v36 = 1.79769313e308;
      goto LABEL_27;
    }
    v62.origin.CGFloat x = v21;
    v62.origin.CGFloat y = v23;
    v62.size.CGFloat width = v25;
    v62.size.CGFloat height = v27;
    double MidX = CGRectGetMidX(v62);
    v63.origin.CGFloat x = v21;
    v63.origin.CGFloat y = v23;
    v63.size.CGFloat width = v25;
    v63.size.CGFloat height = v27;
    double MidY = CGRectGetMidY(v63);
    if ((a2 & 0x10) != 0) {
      goto LABEL_10;
    }
    if ((a2 & 0x20) != 0 && (v29 & 1) != 0 || (a2 & 0x40) != 0 && (v29 & 2) != 0)
    {
      char v31 = 2;
    }
    else
    {
      BOOL v55 = (a2 & 0x20) == 0;
      if ((v29 & 2) == 0) {
        BOOL v55 = 1;
      }
      char v31 = 1;
      if ((((a2 & 0x40) != 0) & v29) == 0 && v55)
      {
        unint64_t v56 = v29 & 0x218;
        BOOL v57 = (a2 & 0x40) == 0 || v56 == 0;
        BOOL v58 = v57;
        char v31 = 8;
        if ((((v29 & 0x124) != 0) & (a2 >> 5)) == 0 && v58)
        {
          BOOL v59 = (a2 & 0x20) == 0 || v56 == 0;
          BOOL v60 = v59;
          char v31 = 4;
          if ((((v29 & 0x124) != 0) & (a2 >> 6)) == 0 && v60) {
            goto LABEL_10;
          }
        }
      }
    }
    double MidX = _UIRectDeparturePointAlongFocusHeading(v31, v21, v23, v25, v27);
    double MidY = v32;
LABEL_10:
    double v33 = MidY;
    v64.origin.CGFloat x = a7;
    v64.origin.CGFloat y = a8;
    v64.size.CGFloat width = a9;
    v64.size.CGFloat height = a10;
    double v34 = CGRectGetMidX(v64);
    v65.origin.CGFloat x = a7;
    v65.origin.CGFloat y = a8;
    v65.size.CGFloat width = a9;
    v65.size.CGFloat height = a10;
    CGFloat v35 = CGRectGetMidY(v65);
    double v36 = hypot(MidX - v34, v33 - v35);
    goto LABEL_27;
  }
  double v37 = _UIRectDeparturePointAlongFocusHeading(v28, a7, a8, a9, a10);
  double v39 = v38;
  BOOL v40 = (v29 & 3) != 0;
  if ((v29 & 0xC) == 0) {
    BOOL v40 = 0;
  }
  BOOL v41 = a5 == 2 && v40;
  if ((a2 & 0x10) != 0 || v41)
  {
    v66.origin.CGFloat x = v21;
    v66.origin.CGFloat y = v23;
    v66.size.CGFloat width = v25;
    v66.size.CGFloat height = v27;
    CGFloat v47 = CGRectGetMidX(v66);
    v67.origin.CGFloat x = v21;
    v67.origin.CGFloat y = v23;
    v67.size.CGFloat width = v25;
    v67.size.CGFloat height = v27;
    double v23 = CGRectGetMidY(v67);
    double v21 = v47;
  }
  else
  {
    if ((a2 & 0x20) != 0)
    {
      uint64_t v46 = (v29 >> 1) & 0x114 | (2 * (int)v29) & 0x228 | (__rbit32(v29) >> 30);
      double v42 = v21;
      double v43 = v23;
      double v44 = v25;
      double v45 = v27;
    }
    else
    {
      if ((a2 & 0x40) == 0) {
        goto LABEL_25;
      }
      double v42 = v21;
      double v43 = v23;
      double v44 = v25;
      double v45 = v27;
      LOBYTE(v46) = v29;
    }
    double v21 = _UIRectDeparturePointAlongFocusHeading(v46, v42, v43, v44, v45);
    double v23 = v48;
  }
LABEL_25:
  _UIPointAxisAlignedDistanceAlongFocusHeading(v29, v37, v39, v21, v23);
  double v36 = v49;
  if (v41)
  {
    double v50 = atan2(v23 - v39, v21 - v37);
    [v19 _velocity];
    long double v52 = v51;
    [v19 _velocity];
    double v36 = v36 * (vabdd_f64(atan2(v52, v53), v50) / 0.785398163 + 1.0);
  }
LABEL_27:

  return round(v36);
}

void sub_185FC0BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

CFTypeRef _OpaqueRetain(int a1, CFTypeRef cf)
{
  return CFRetain(cf);
}

void _OpaqueRelease(int a1, CFTypeRef cf)
{
}

uint64_t _OpaqueIsEqual(void *a1, void *a2)
{
  if (a1 == a2) {
    return 1;
  }
  else {
    return objc_msgSend(a1, "isEqual:", a2, v2, v3);
  }
}

void _CGRectValueFree(int a1, void *a2)
{
}

BOOL _CGRectValueIsEqual(CGRect *a1, CGRect *a2)
{
  return CGRectEqualToRect(*a1, *a2);
}

double _UIRectThatJustBarelyIntersectsRect(double a1, CGFloat y, CGFloat width, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double x = a1;
  double MaxX = CGRectGetMaxX(*(CGRect *)&a1);
  CGFloat v34 = a5;
  v37.origin.double x = a5;
  v37.origin.CGFloat y = a6;
  CGFloat rect = a7;
  v37.size.CGFloat width = a7;
  v37.size.CGFloat height = a8;
  CGFloat v16 = a8;
  CGFloat v35 = a8;
  if (MaxX <= CGRectGetMinX(v37))
  {
    CGFloat v18 = a6;
    v38.origin.double x = a5;
    v38.origin.CGFloat y = a6;
    v38.size.CGFloat width = rect;
    v38.size.CGFloat height = v16;
    CGFloat MinX = CGRectGetMinX(v38);
    v39.origin.double x = x;
    v39.origin.CGFloat y = y;
    v39.size.CGFloat width = width;
    v39.size.CGFloat height = a4;
    CGFloat MinY = CGRectGetMinY(v39);
    v40.origin.double x = x;
    v40.origin.CGFloat y = y;
    v40.size.CGFloat width = width;
    v40.size.CGFloat height = a4;
    v41.size.CGFloat height = CGRectGetHeight(v40);
    v41.size.CGFloat width = 90.0;
    v41.origin.double x = MinX;
    v41.origin.CGFloat y = MinY;
    CGFloat v16 = v35;
    v63.origin.double x = x;
    v63.origin.CGFloat y = y;
    v63.size.CGFloat width = width;
    v63.size.CGFloat height = a4;
    CGRect v42 = CGRectUnion(v41, v63);
    double x = v42.origin.x;
    CGFloat y = v42.origin.y;
    CGFloat width = v42.size.width;
    CGFloat height = v42.size.height;
  }
  else
  {
    CGFloat height = a4;
    CGFloat v18 = a6;
  }
  v43.origin.double x = x;
  v43.origin.CGFloat y = y;
  v43.size.CGFloat width = width;
  v43.size.CGFloat height = height;
  double v21 = CGRectGetMinX(v43);
  CGFloat v22 = v34;
  v44.origin.double x = v34;
  v44.origin.CGFloat y = v18;
  v44.size.CGFloat width = rect;
  v44.size.CGFloat height = v16;
  if (v21 >= CGRectGetMaxX(v44))
  {
    v45.origin.double x = v34;
    v45.origin.CGFloat y = v18;
    v45.size.CGFloat width = rect;
    v45.size.CGFloat height = v16;
    CGFloat v23 = CGRectGetMaxX(v45) + -90.0;
    v46.origin.double x = x;
    v46.origin.CGFloat y = y;
    v46.size.CGFloat width = width;
    v46.size.CGFloat height = height;
    CGFloat v24 = CGRectGetMinY(v46);
    v47.origin.double x = x;
    v47.origin.CGFloat y = y;
    v47.size.CGFloat width = width;
    v47.size.CGFloat height = height;
    v48.size.CGFloat height = CGRectGetHeight(v47);
    v48.size.CGFloat width = 90.0;
    v48.origin.double x = v23;
    v48.origin.CGFloat y = v24;
    CGFloat v22 = v34;
    CGFloat v16 = v35;
    v64.origin.double x = x;
    v64.origin.CGFloat y = y;
    v64.size.CGFloat width = width;
    v64.size.CGFloat height = height;
    CGRect v49 = CGRectUnion(v48, v64);
    double x = v49.origin.x;
    CGFloat y = v49.origin.y;
    CGFloat width = v49.size.width;
    CGFloat height = v49.size.height;
  }
  v50.origin.double x = x;
  v50.origin.CGFloat y = y;
  v50.size.CGFloat width = width;
  v50.size.CGFloat height = height;
  double MaxY = CGRectGetMaxY(v50);
  v51.origin.double x = v22;
  v51.origin.CGFloat y = v18;
  v51.size.CGFloat width = rect;
  v51.size.CGFloat height = v16;
  if (MaxY <= CGRectGetMinY(v51))
  {
    v52.origin.double x = x;
    v52.origin.CGFloat y = y;
    v52.size.CGFloat width = width;
    v52.size.CGFloat height = height;
    CGFloat v26 = CGRectGetMinX(v52);
    v53.origin.double x = v22;
    v53.origin.CGFloat y = v18;
    v53.size.CGFloat width = rect;
    v53.size.CGFloat height = v16;
    double v27 = v22;
    CGFloat v28 = CGRectGetMinY(v53);
    v54.origin.double x = x;
    v54.origin.CGFloat y = y;
    v54.size.CGFloat width = width;
    v54.size.CGFloat height = height;
    v55.size.CGFloat width = CGRectGetWidth(v54);
    v55.size.CGFloat height = 90.0;
    v55.origin.double x = v26;
    v55.origin.CGFloat y = v28;
    CGFloat v22 = v27;
    CGFloat v16 = v35;
    v65.origin.double x = x;
    v65.origin.CGFloat y = y;
    v65.size.CGFloat width = width;
    v65.size.CGFloat height = height;
    CGRect v56 = CGRectUnion(v55, v65);
    double x = v56.origin.x;
    CGFloat y = v56.origin.y;
    CGFloat width = v56.size.width;
    CGFloat height = v56.size.height;
  }
  v57.origin.double x = x;
  v57.origin.CGFloat y = y;
  v57.size.CGFloat width = width;
  v57.size.CGFloat height = height;
  double v29 = CGRectGetMinY(v57);
  v58.origin.double x = v22;
  v58.origin.CGFloat y = v18;
  v58.size.CGFloat width = rect;
  v58.size.CGFloat height = v16;
  if (v29 >= CGRectGetMaxY(v58))
  {
    v59.origin.double x = x;
    v59.origin.CGFloat y = y;
    v59.size.CGFloat width = width;
    v59.size.CGFloat height = height;
    CGFloat v30 = CGRectGetMinX(v59);
    v60.origin.double x = v22;
    v60.origin.CGFloat y = v18;
    v60.size.CGFloat width = rect;
    v60.size.CGFloat height = v16;
    CGFloat v31 = CGRectGetMaxY(v60) + -90.0;
    v61.origin.double x = x;
    v61.origin.CGFloat y = y;
    v61.size.CGFloat width = width;
    v61.size.CGFloat height = height;
    v62.size.CGFloat width = CGRectGetWidth(v61);
    v62.size.CGFloat height = 90.0;
    v62.origin.double x = v30;
    v62.origin.CGFloat y = v31;
    v66.origin.double x = x;
    v66.origin.CGFloat y = y;
    v66.size.CGFloat width = width;
    v66.size.CGFloat height = height;
    *(void *)&double x = (unint64_t)CGRectUnion(v62, v66);
  }
  return x;
}

void sub_185FC32F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185FC4244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185FC5108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185FC7A6C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 32));
  _Unwind_Resume(a1);
}

void sub_185FC864C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_185FC967C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getSBSKeyboardFocusServiceClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB260718)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    _OWORD v6[3] = __SpringBoardServicesLibraryCore_block_invoke_1;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E52EE660;
    uint64_t v8 = 0;
    qword_1EB260718 = _sl_dlopen();
  }
  if (!qword_1EB260718)
  {
    uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    id v4 = [NSString stringWithUTF8String:"void *SpringBoardServicesLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"BKSHIDEventDeferringEnvironment+UIKitAdditions.m", 12, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("SBSKeyboardFocusService");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    CGRect v5 = [NSString stringWithUTF8String:"Class getSBSKeyboardFocusServiceClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"BKSHIDEventDeferringEnvironment+UIKitAdditions.m", 14, @"Unable to find class %s", "SBSKeyboardFocusService");

LABEL_10:
    __break(1u);
  }
  qword_1EB260710 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __SpringBoardServicesLibraryCore_block_invoke_1()
{
  uint64_t result = _sl_dlopen();
  qword_1EB260718 = result;
  return result;
}

uint64_t _uiktest_UIAXSetIgnoresAccessibilityEnabled(uint64_t result)
{
  __UIAXIgnoresAccessibilityEnabled = result;
  return result;
}

uint64_t _UIAXAssignFocusToItem(void *a1)
{
  return _UIAXAssignFocusToItemWithOptions(a1, 0);
}

uint64_t _UIAXAssignFocusToItemWithOptions(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = 0;
  if (v3 && __UIAXIgnoresAccessibilityEnabled | _kUIAccessibilityEnabled)
  {
    CGRect v5 = +[UIFocusSystem focusSystemForEnvironment:v3];
    if (v5)
    {
      CGRect v6 = _UIFocusEnvironmentContainingView(v3);
      long long v7 = v6;
      if (v6 && _UIFocusEnvironmentAndAncestorsAreEligibleForFocusInteraction(v6))
      {
        uint64_t v8 = [(_UIFocusUpdateRequest *)[_UIAccessibilityFocusUpdateRequest alloc] initWithFocusSystem:v5 environment:v3];
        [(_UIAccessibilityFocusUpdateRequest *)v8 setOptions:a2];
        [(_UIFocusUpdateRequest *)v8 setAllowsDeferral:0];
        id v9 = [[UIFocusUpdateContext alloc] _initWithFocusUpdateRequest:v8];
        uint64_t v4 = [v5 _updateFocusImmediatelyWithContext:v9];
      }
      else
      {
        uint64_t v4 = 0;
      }
    }
    else
    {
      uint64_t v4 = 0;
    }
  }
  return v4;
}

double _UIFocusShiftAndExpandRectAlongFocusMovement(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  id v9 = a1;
  int v10 = [v9 _isLinearMovement];
  char v11 = [v9 heading];

  v42.origin.double x = a2;
  v42.origin.double y = a3;
  v42.size.double width = a4;
  v42.size.double height = a5;
  CGRect v43 = CGRectIntegral(v42);
  double x = v43.origin.x;
  double y = v43.origin.y;
  double width = v43.size.width;
  double height = v43.size.height;
  double v16 = CGRectGetWidth(v43);
  v44.origin.double x = x;
  v44.origin.double y = y;
  v44.size.double width = width;
  v44.size.double height = height;
  double v17 = -CGRectGetHeight(v44);
  double v18 = 0.0;
  if (v11) {
    double v19 = v17;
  }
  else {
    double v19 = 0.0;
  }
  if ((v11 & 8) != 0) {
    double v20 = -v16;
  }
  else {
    double v20 = 0.0;
  }
  if ((v11 & 2) == 0) {
    double v17 = 0.0;
  }
  if ((v11 & 4) != 0) {
    double v18 = -v16;
  }
  double v21 = x + v18;
  double v22 = width - (v20 + v18);
  if (!v10)
  {
    CGFloat v38 = y + v19;
    CGFloat v39 = height - (v19 + v17);
    CGFloat v23 = x + v18;
    double v24 = _UIVectorForFocusHeading(v11);
    CGFloat v25 = v22;
    double v27 = v26;
    v45.origin.double x = x;
    v45.origin.double y = y;
    v45.size.double width = width;
    v45.size.double height = height;
    CGFloat v28 = v24 * CGRectGetWidth(v45);
    v46.origin.double x = x;
    v46.origin.double y = y;
    v46.size.double width = width;
    v46.size.double height = height;
    CGFloat v29 = v27 * CGRectGetHeight(v46);
    v47.origin.double x = v23;
    v47.origin.double y = v38;
    v47.size.double height = v39;
    v47.size.double width = v25;
    CGRect v48 = CGRectOffset(v47, v28, v29);
    double v21 = v48.origin.x;
    CGFloat v30 = v48.origin.y;
    CGFloat v31 = v48.size.width;
    CGFloat v32 = v48.size.height;
    int has_internal_diagnostics = os_variant_has_internal_diagnostics();
    int v34 = _UIRectSmartIntersectsRect(v21, v30, v31, v32, x, y, width, height);
    if (has_internal_diagnostics)
    {
      if (v34)
      {
        double v36 = __UIFaultDebugAssertLog();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)CGRect v41 = 0;
          _os_log_fault_impl(&dword_1853B0000, v36, OS_LOG_TYPE_FAULT, "Shifting focus search rect in search direction returned an overlapping rect -- this is a UIKit bug.", v41, 2u);
        }
      }
    }
    else if (v34)
    {
      CGRect v37 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_UIFocusShiftAndExpandRectAlongHeadingForNonLinearMovement___s_category)+ 8);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1853B0000, v37, OS_LOG_TYPE_ERROR, "Shifting focus search rect in search direction returned an overlapping rect -- this is a UIKit bug.", buf, 2u);
      }
    }
  }
  return v21;
}

void sub_185FCA8F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185FCBF80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _UIFocusScrollOffsetResolverForOffsetResolverType(unint64_t a1)
{
  if (a1 > 3)
  {
    uint64_t v2 = 0;
  }
  else
  {
    uint64_t v2 = objc_opt_new();
  }
  return v2;
}

__CFString *_UIFocusScrollOffsetResolverStringForOffsetResolverType(unint64_t a1)
{
  if (a1 > 3) {
    return @"_UIFocusScrollOffsetResolverTypeInvalid";
  }
  else {
    return off_1E52EE738[a1];
  }
}

id _UIFocusSoundRegistry()
{
  if (qword_1EB260748 != -1) {
    dispatch_once(&qword_1EB260748, &__block_literal_global_163);
  }
  id v0 = (void *)qword_1EB260750;
  return v0;
}

void sub_185FCCE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185FCD16C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185FCDC7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getAudioServicesCreateSystemSoundIDsFromIDSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = AudioToolboxLibrary_0();
  uint64_t result = dlsym(v2, "AudioServicesCreateSystemSoundIDsFromID");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1EB260758 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __AudioToolboxLibraryCore_block_invoke_1()
{
  uint64_t result = _sl_dlopen();
  AudioToolboxLibraryCore_frameworkLibrary_0 = result;
  return result;
}

void *__getAudioServicesCreateSystemSoundIDSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = AudioToolboxLibrary_0();
  uint64_t result = dlsym(v2, "AudioServicesCreateSystemSoundID");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1EB260760 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getkAudioServicesPlaySystemSoundOptionVolumeKeySymbolLoc_block_invoke_0(uint64_t a1)
{
  uint64_t v2 = AudioToolboxLibrary_0();
  uint64_t result = dlsym(v2, "kAudioServicesPlaySystemSoundOptionVolumeKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB260768 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getkAudioServicesPlaySystemSoundOptionPanKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = AudioToolboxLibrary_0();
  uint64_t result = dlsym(v2, "kAudioServicesPlaySystemSoundOptionPanKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB260770 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getkAudioServicesPlaySystemSoundOptionBehaviorKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = AudioToolboxLibrary_0();
  uint64_t result = dlsym(v2, "kAudioServicesPlaySystemSoundOptionBehaviorKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB260778 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAudioServicesPlaySystemSoundWithOptionsSymbolLoc_block_invoke_1(uint64_t a1)
{
  uint64_t v2 = AudioToolboxLibrary_0();
  uint64_t result = dlsym(v2, "AudioServicesPlaySystemSoundWithOptions");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1EB260780 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

double _UIEditMenuScaledArrowSize(void *a1)
{
  id v1 = a1;
  uint64_t v2 = _UIEditMenuGetPlatformMetrics([v1 userInterfaceIdiom]);
  id v3 = [off_1E52D39B8 preferredFontForTextStyle:@"UICTFontTextStyleSubhead" compatibleWithTraitCollection:v1];
  [v2 arrowSize];
  double v5 = v4;
  id v6 = v1;
  long long v7 = [off_1E52D39B8 preferredFontForTextStyle:@"UICTFontTextStyleSubhead" compatibleWithTraitCollection:v6];
  [v7 _scaledValueForValue:0 useLanguageAwareScaling:v5];
  double v9 = v8;
  [v6 displayScale];
  double v11 = v10;

  UIRoundToScale(v9, fmax(v11, 1.0));
  double v13 = v12;

  [v2 arrowSize];
  double v15 = v14;
  id v16 = v6;
  double v17 = [off_1E52D39B8 preferredFontForTextStyle:@"UICTFontTextStyleSubhead" compatibleWithTraitCollection:v16];
  [v17 _scaledValueForValue:0 useLanguageAwareScaling:v15];
  double v19 = v18;
  [v16 displayScale];
  double v21 = v20;

  UIRoundToScale(v19, fmax(v21, 1.0));
  return v13;
}

UICollectionViewCompositionalLayout *_UIEditMenuViewHorizontalCompositionalLayout(uint64_t a1, double a2)
{
  v21[1] = *MEMORY[0x1E4F143B8];
  id v3 = [off_1E52D2B08 absoluteDimension:1.0 / a2];
  double v4 = [off_1E52D2B08 fractionalHeightDimension:1.0];
  double v5 = [off_1E52D2B30 sizeWithWidthDimension:v3 heightDimension:v4];

  id v6 = [off_1E52D2AF0 layoutAnchorWithEdges:2];
  long long v7 = _UIEditMenuGetPlatformMetrics(a1);
  LODWORD(v3) = [v7 showsSeparatorBetweenItems];

  if (v3)
  {
    double v8 = [off_1E52D2B40 supplementaryItemWithLayoutSize:v5 elementKind:@"_UIEditMenuListViewSeparator" containerAnchor:v6];
    [v8 setZIndex:-1];
    v21[0] = v8;
    double v9 = [MEMORY[0x1E4F1C978] arrayWithObjects:v21 count:1];
  }
  else
  {
    double v9 = (void *)MEMORY[0x1E4F1CBF0];
  }
  double v10 = [off_1E52D2B08 estimatedDimension:80.0];
  double v11 = [off_1E52D2B08 fractionalHeightDimension:1.0];
  double v12 = [off_1E52D2B30 sizeWithWidthDimension:v10 heightDimension:v11];

  double v13 = [off_1E52D2B20 itemWithLayoutSize:v12 supplementaryItems:v9];
  double v20 = v13;
  double v14 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v20 count:1];
  double v15 = [off_1E52D2B18 verticalGroupWithLayoutSize:v12 subitems:v14];

  id v16 = [off_1E52D2B28 sectionWithGroup:v15];
  [v16 setContentInsetsReference:1];
  double v17 = objc_opt_new();
  [v17 setScrollDirection:1];
  [v17 setContentInsetsReference:1];
  double v18 = [[UICollectionViewCompositionalLayout alloc] initWithSection:v16 configuration:v17];

  return v18;
}

double _UIEditMenuScaledShadowOffset(void *a1)
{
  id v1 = a1;
  uint64_t v2 = _UIEditMenuGetPlatformMetrics([v1 userInterfaceIdiom]);
  [v2 shadowOffset];
  double v4 = v3;
  id v5 = v1;
  id v6 = [off_1E52D39B8 preferredFontForTextStyle:@"UICTFontTextStyleSubhead" compatibleWithTraitCollection:v5];
  [v6 _scaledValueForValue:0 useLanguageAwareScaling:v4];
  double v8 = v7;
  [v5 displayScale];
  double v10 = v9;

  UIRoundToScale(v8, fmax(v10, 1.0));
  double v12 = v11;

  [v2 shadowOffset];
  double v14 = v13;
  id v15 = v5;
  id v16 = [off_1E52D39B8 preferredFontForTextStyle:@"UICTFontTextStyleSubhead" compatibleWithTraitCollection:v15];
  [v16 _scaledValueForValue:0 useLanguageAwareScaling:v14];
  double v18 = v17;
  [v15 displayScale];
  double v20 = v19;

  UIRoundToScale(v18, fmax(v20, 1.0));
  return v12;
}

void sub_185FCFD94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t _isGestureRecognizerLocationInsideView(void *a1, void *a2)
{
  id v3 = a2;
  [a1 locationInView:v3];
  uint64_t v4 = objc_msgSend(v3, "pointInside:withEvent:", 0);

  return v4;
}

void _UIEditMenuAppendMenuToSnapshot(void *a1, void *a2, char a3, uint64_t a4)
{
  id v7 = a2;
  double v8 = [a1 children];
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = ___UIEditMenuAppendMenuToSnapshot_block_invoke;
  v10[3] = &unk_1E52EE7E0;
  char v13 = a3;
  id v11 = v7;
  uint64_t v12 = a4;
  id v9 = v7;
  [v8 enumerateObjectsWithOptions:0 usingBlock:v10];
}

void _appendBezierPathForPoints(void *a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15)
{
  id v38 = a1;
  objc_msgSend(v38, "moveToPoint:", a8, a9);
  double v30 = a2 / sqrt((a12 - a4) * (a12 - a4) + (a13 - a5) * (a13 - a5));
  objc_msgSend(v38, "addQuadCurveToPoint:controlPoint:", a4 + (a12 - a4) * v30, a5 + (a13 - a5) * v30, a4, a5);
  double v31 = a3 / sqrt((a4 - a12) * (a4 - a12) + (a5 - a13) * (a5 - a13));
  objc_msgSend(v38, "addLineToPoint:", a12 + (a4 - a12) * v31, a13 + (a5 - a13) * v31);
  double v32 = a7;
  double v33 = a3 / sqrt((a6 - a12) * (a6 - a12) + (a7 - a13) * (a7 - a13));
  objc_msgSend(v38, "addQuadCurveToPoint:controlPoint:", a12 + (a6 - a12) * v33, a13 + (a7 - a13) * v33, a12, a13);
  double v34 = a2 / sqrt((a12 - a6) * (a12 - a6) + (a13 - v32) * (a13 - v32));
  objc_msgSend(v38, "addLineToPoint:", a6 + (a12 - a6) * v34, v32 + (a13 - v32) * v34);
  objc_msgSend(v38, "addQuadCurveToPoint:controlPoint:", a10, a11, a6, a7);
  objc_msgSend(v38, "addLineToPoint:", a10 + a14, a11 + a15);
  objc_msgSend(v38, "addLineToPoint:", a8 + a14, a9 + a15);
  objc_msgSend(v38, "addLineToPoint:", a8, a9);
}

double LoupeConstrainPointHorizontally(double a1, double a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, double a7, double a8, CGFloat a9)
{
  v20.origin.double x = a3;
  v20.origin.double y = a4;
  v20.size.double width = a5;
  v20.size.double height = a6;
  CGRect v21 = CGRectInset(v20, a9, 0.0);
  double v18 = a7 * 0.5;
  if (a1 + a7 * 0.5 > v21.size.width) {
    return v21.size.width - v18;
  }
  if (a1 - v18 < a9) {
    return v18 + a9;
  }
  return a1;
}

UIStatusBarHideAnimationParameters *LoupeStatusBarAnimationParameters()
{
  id v0 = [[UIStatusBarHideAnimationParameters alloc] initWithDefaultParameters];
  [(UIStatusBarAnimationParameters *)v0 setCurve:5];
  [(UIStatusBarAnimationParameters *)v0 setDuration:0.2];
  return v0;
}

void sub_185FD7678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _UICollectionViewCellForView(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v4 == v3)
  {
    id v6 = 0;
    id v7 = v4;
  }
  else
  {
    id v6 = 0;
    id v7 = v4;
    do
    {
      uint64_t v8 = qword_1EB25BD98;
      id v9 = v7;
      if (v8 != -1) {
        dispatch_once(&qword_1EB25BD98, &__block_literal_global_215);
      }
      char isKindOfClass = objc_opt_isKindOfClass();

      if (isKindOfClass)
      {
        id v11 = v9;

        id v6 = v11;
      }
      id v7 = [v9 superview];
    }
    while (v7 && v7 != v3);
  }

  return v6;
}

void sub_185FD9034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,id a44)
{
}

void sub_185FD963C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_185FDA7DC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 216), 8);
  _Unwind_Resume(a1);
}

void sub_185FDC264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185FDD648(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_185FE1E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,id location,id a36)
{
}

void sub_185FE1FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getDDDetectionControllerClass_block_invoke_0(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB2607A0)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    _OWORD v6[3] = __DataDetectorsUILibraryCore_block_invoke_0;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E52EE958;
    uint64_t v8 = 0;
    qword_1EB2607A0 = _sl_dlopen();
  }
  if (!qword_1EB2607A0)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    id v4 = [NSString stringWithUTF8String:"void *DataDetectorsUILibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"_UITextItemActionSheet.m", 14, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("DDDetectionController");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    id v5 = [NSString stringWithUTF8String:"Class getDDDetectionControllerClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UITextItemActionSheet.m", 15, @"Unable to find class %s", "DDDetectionController");

LABEL_10:
    __break(1u);
  }
  _MergedGlobals_1051 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __DataDetectorsUILibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  qword_1EB2607A0 = result;
  return result;
}

void sub_185FE73D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_185FE7620(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_185FE8AD0(_Unwind_Exception *a1)
{
}

double _UIGetFocusEngineScrollConvergence()
{
  if (_UIInternalPreferencesRevisionOnce != -1) {
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_5_8);
  }
  int v0 = _UIInternalPreferencesRevisionVar;
  double result = 0.9934;
  if (_UIInternalPreferencesRevisionVar >= 1)
  {
    int v2 = _UIInternalPreference_FocusEngineScrollConvergence;
    if (_UIInternalPreferencesRevisionVar != _UIInternalPreference_FocusEngineScrollConvergence)
    {
      while (v0 >= v2)
      {
        _UIInternalPreferenceSync(v0, &_UIInternalPreference_FocusEngineScrollConvergence, @"FocusEngineScrollConvergence", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateDouble);
        int v2 = _UIInternalPreference_FocusEngineScrollConvergence;
        if (v0 == _UIInternalPreference_FocusEngineScrollConvergence) {
          return 0.9934;
        }
      }
      return *(double *)&qword_1EB2574F0;
    }
  }
  return result;
}

void sub_185FEA564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20,id a21,id a22)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(location);
  objc_destroyWeak(&a20);
  objc_destroyWeak(&a21);
  objc_destroyWeak(&a22);
  _Unwind_Resume(a1);
}

uint64_t UIFocusGetSensitivitySetting()
{
  if (UIFocusGetSensitivitySetting_onceToken != -1) {
    dispatch_once(&UIFocusGetSensitivitySetting_onceToken, &__block_literal_global_221);
  }
  uint64_t result = _UIFocusSensitivityCachedSetting;
  if (_UIFocusSensitivityCachedSetting == -1)
  {
    uint64_t v1 = _UIKitUserDefaults();
    int v2 = [v1 objectForKey:@"UIFocusSensitivitySetting"];

    if (v2) {
      uint64_t v3 = [v2 integerValue];
    }
    else {
      uint64_t v3 = 1;
    }
    _UIFocusSensitivityCachedSetting = v3;

    return _UIFocusSensitivityCachedSetting;
  }
  return result;
}

void __UIFocusGetSensitivitySetting_block_invoke()
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, 0, (CFNotificationCallback)_UIFocusClearCachedSensitivitySettingObserver, @"UIFocusSensitivityUpdateNotification", 0, CFNotificationSuspensionBehaviorCoalesce);
}

void _UIFocusClearCachedSensitivitySettingObserver()
{
  _UIFocusSensitivityCachedSetting = -1;
}

void UIFocusSetSensitivitySetting(uint64_t a1)
{
  _UIKitUserDefaults();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  int v2 = [NSNumber numberWithInteger:a1];
  [v4 setObject:v2 forKey:@"UIFocusSensitivitySetting"];
  if ([v4 synchronize])
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, @"UIFocusSensitivityUpdateNotification", 0, 0, 1u);
    _UIFocusSensitivityCachedSetting = -1;
  }
}

_UIButtonBar *_newButtonBar(void *a1)
{
  id v1 = a1;
  int v2 = objc_alloc_init(_UIButtonBar);
  [(_UIButtonBar *)v2 setMinimumInterItemSpace:8.0];
  [(_UIButtonBar *)v2 setAllowsViewWrappers:1];
  uint64_t v3 = [(_UIButtonBar *)v2 view];
  objc_msgSend(v3, "setLayoutMargins:", 0.0, 0.0, 0.0, 0.0);

  id v4 = [(_UIButtonBar *)v2 view];
  [v4 setInsetsLayoutMarginsFromSafeArea:0];

  id v5 = [(_UIButtonBar *)v2 view];
  [v5 setTranslatesAutoresizingMaskIntoConstraints:0];

  id v6 = [(_UIButtonBar *)v2 view];
  LODWORD(v7) = 1148682240;
  [v6 setContentCompressionResistancePriority:0 forAxis:v7];

  uint64_t v8 = [(_UIButtonBar *)v2 view];
  LODWORD(v9) = 1148829696;
  [v8 setContentCompressionResistancePriority:1 forAxis:v9];

  double v10 = [(_UIButtonBar *)v2 view];
  LODWORD(v11) = 1148846080;
  [v10 setContentHuggingPriority:0 forAxis:v11];

  [(_UIButtonBar *)v2 set_appearanceDelegate:v1];
  objc_opt_class();
  uint64_t v12 = _UIButtonBarButtonMakerForVisualProvider();
  [(_UIButtonBar *)v2 setViewUpdater:v12];

  return v2;
}

id iconForVideoFile(void *a1)
{
  uint64_t v2 = [a1 path];
  uint64_t v23 = 0;
  uint64_t v24 = (uint64_t)&v23;
  uint64_t v25 = 0x3052000000;
  double v26 = __Block_byref_object_copy__93;
  double v27 = __Block_byref_object_dispose__93;
  uint64_t v3 = (void *)_MergedGlobals_11_6;
  uint64_t v28 = _MergedGlobals_11_6;
  if (!_MergedGlobals_11_6)
  {
    uint64_t v18 = MEMORY[0x1E4F143A8];
    uint64_t v19 = 3221225472;
    uint64_t v20 = (uint64_t)__getAVURLAssetClass_block_invoke;
    CGRect v21 = &unk_1E52D9900;
    double v22 = &v23;
    __getAVURLAssetClass_block_invoke((uint64_t)&v18);
    uint64_t v3 = *(void **)(v24 + 40);
  }
  _Block_object_dispose(&v23, 8);
  uint64_t v4 = objc_msgSend(v3, "URLAssetWithURL:options:", objc_msgSend(MEMORY[0x1E4F1CB10], "fileURLWithPath:", v2), 0);
  uint64_t v23 = 0;
  uint64_t v24 = (uint64_t)&v23;
  uint64_t v25 = 0x3052000000;
  double v26 = __Block_byref_object_copy__93;
  double v27 = __Block_byref_object_dispose__93;
  id v5 = (void *)qword_1EB25D328;
  uint64_t v28 = qword_1EB25D328;
  if (!qword_1EB25D328)
  {
    uint64_t v18 = MEMORY[0x1E4F143A8];
    uint64_t v19 = 3221225472;
    uint64_t v20 = (uint64_t)__getAVAssetImageGeneratorClass_block_invoke;
    CGRect v21 = &unk_1E52D9900;
    double v22 = &v23;
    __getAVAssetImageGeneratorClass_block_invoke((uint64_t)&v18);
    id v5 = *(void **)(v24 + 40);
  }
  _Block_object_dispose(&v23, 8);
  id v6 = (void *)[v5 assetImageGeneratorWithAsset:v4];
  [v6 setAppliesPreferredTrackTransform:1];
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = (uint64_t)&v18;
  uint64_t v20 = 0x2020000000;
  uint64_t v7 = qword_1EB25D330;
  CGRect v21 = (void *)qword_1EB25D330;
  if (!qword_1EB25D330)
  {
    uint64_t v23 = MEMORY[0x1E4F143A8];
    uint64_t v24 = 3221225472;
    uint64_t v25 = (uint64_t)__getkCMTimeZeroSymbolLoc_block_invoke;
    double v26 = (void (*)(uint64_t, uint64_t))&unk_1E52D9900;
    double v27 = (void (*)(uint64_t))&v18;
    __getkCMTimeZeroSymbolLoc_block_invoke(&v23);
    uint64_t v7 = *(void *)(v19 + 24);
  }
  _Block_object_dispose(&v18, 8);
  if (v7)
  {
    long long v8 = *(_OWORD *)v7;
    uint64_t v16 = *(void *)(v7 + 16);
    long long v15 = v8;
    double v9 = (CGImage *)[v6 copyCGImageAtTime:&v15 actualTime:0 error:&v17];
    if (v9)
    {
      double v10 = v9;
      id v11 = thumbnailSizedImageForImage(v9);
      CGImageRelease(v10);
      uint64_t v12 = (CGImage *)[v11 CGImage];
      if (v12) {
        return thumbnailSizedImageForImage(v12);
      }
    }
    else
    {
      NSLog(&cfstr_Uiwebfileuploa_1.isa, v2, v17);
    }
    NSLog(&cfstr_Uiwebfileuploa_0.isa, a1);
    return fallbackIconForFile((uint64_t)a1);
  }
  else
  {
    double v14 = (void *)[MEMORY[0x1E4F28B00] currentHandler];
    id result = (id)objc_msgSend(v14, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "CMTime getkCMTimeZero(void)"), @"UIWebFileUploadPanel.m", 64, @"%s", dlerror());
    __break(1u);
  }
  return result;
}

void sub_185FF1D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id iconForImageFile(const __CFURL *a1)
{
  v10[3] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *MEMORY[0x1E4F2FF68];
  v9[0] = *MEMORY[0x1E4F2FE38];
  v9[1] = v2;
  v10[0] = MEMORY[0x1E4F1CC38];
  v10[1] = &unk_1ED3F1D18;
  void v9[2] = *MEMORY[0x1E4F2FE48];
  v10[2] = MEMORY[0x1E4F1CC38];
  CFDictionaryRef v3 = (const __CFDictionary *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v10 forKeys:v9 count:3];
  uint64_t v4 = CGImageSourceCreateWithURL(a1, 0);
  ThumbnailAtIndedouble x = CGImageSourceCreateThumbnailAtIndex(v4, 0, v3);
  if (ThumbnailAtIndex)
  {
    id v6 = ThumbnailAtIndex;
    id v7 = thumbnailSizedImageForImage(ThumbnailAtIndex);
    CFRelease(v6);
    CFRelease(v4);
  }
  else
  {
    NSLog(&cfstr_Uiwebfileuploa_3.isa, a1);
    CFRelease(v4);
    return fallbackIconForFile((uint64_t)a1);
  }
  return v7;
}

id fallbackIconForFile(uint64_t a1)
{
  id v1 = (CGImage *)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F9F2F8], "interactionControllerWithURL:", a1), "icons"), "objectAtIndexedSubscript:", 0), "CGImage");
  return thumbnailSizedImageForImage(v1);
}

id thumbnailSizedImageForImage(CGImage *a1)
{
  if (!a1) {
    return 0;
  }
  id v1 = a1;
  double Width = (double)CGImageGetWidth(a1);
  size_t Height = CGImageGetHeight(v1);
  double v4 = (double)Height;
  if (Width != (double)Height)
  {
    double v5 = round((Width - v4) * 0.5);
    double v6 = round((v4 - Width) * 0.5);
    double v7 = Width < (double)Height ? Width : (double)Height;
    if (Width < (double)Height)
    {
      double v8 = 0.0;
    }
    else
    {
      double v6 = 0.0;
      double v8 = v5;
    }
    double v9 = v7;
    id v1 = CGImageCreateWithImageInRect(v1, *(CGRect *)(&v6 - 1));
    if (!v1) {
      return 0;
    }
  }
  _UIGraphicsBeginImageContextWithOptions(0, 0, 100.0, 100.0, 1.0);
  ContextStacuint64_t k = GetContextStack(0);
  if (*(int *)ContextStack < 1) {
    id v11 = 0;
  }
  else {
    id v11 = (CGContext *)ContextStack[3 * (*(_DWORD *)ContextStack - 1) + 1];
  }
  CGContextSetInterpolationQuality(v11, kCGInterpolationHigh);
  char v13 = GetContextStack(0);
  if (*(int *)v13 < 1) {
    double v14 = 0;
  }
  else {
    double v14 = (CGContext *)v13[3 * (*(_DWORD *)v13 - 1) + 1];
  }
  v16.size.double width = 100.0;
  v16.origin.double x = 0.0;
  v16.origin.double y = 0.0;
  v16.size.double height = 100.0;
  CGContextDrawImage(v14, v16, v1);
  id ImageFromCurrentImageContext = _UIGraphicsGetImageFromCurrentImageContext(0);
  UIGraphicsEndImageContext();
  return ImageFromCurrentImageContext;
}

Class __getAVURLAssetClass_block_invoke(uint64_t a1)
{
  AVKitLibrary();
  Class result = objc_getClass("AVURLAsset");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40))
  {
    _MergedGlobals_11_6 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  }
  else
  {
    CFDictionaryRef v3 = (void *)[MEMORY[0x1E4F28B00] currentHandler];
    Class result = (Class)objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "Class getAVURLAssetClass(void)_block_invoke"), @"UIWebFileUploadPanel.m", 61, @"Unable to find class %s", "AVURLAsset");
    __break(1u);
  }
  return result;
}

void AVKitLibrary()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!AVKitLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __AVKitLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E52EEBD8;
    uint64_t v5 = 0;
    AVKitLibraryCore_frameworkLibrardouble y = _sl_dlopen();
  }
  if (!AVKitLibraryCore_frameworkLibrary)
  {
    id v1 = (void *)[MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v2 = [NSString stringWithUTF8String:"void *AVKitLibrary(void)"];
    int v0 = objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"UIWebFileUploadPanel.m", 59, @"%s", v3[0]);
    __break(1u);
    goto LABEL_7;
  }
  int v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __AVKitLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  AVKitLibraryCore_frameworkLibrardouble y = result;
  return result;
}

Class __getAVAssetImageGeneratorClass_block_invoke(uint64_t a1)
{
  AVKitLibrary();
  Class result = objc_getClass("AVAssetImageGenerator");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40))
  {
    qword_1EB25D328 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  }
  else
  {
    CFDictionaryRef v3 = (void *)[MEMORY[0x1E4F28B00] currentHandler];
    Class result = (Class)objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "Class getAVAssetImageGeneratorClass(void)_block_invoke"), @"UIWebFileUploadPanel.m", 60, @"Unable to find class %s", "AVAssetImageGenerator");
    __break(1u);
  }
  return result;
}

void *__getkCMTimeZeroSymbolLoc_block_invoke(void *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB25D338)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    _OWORD v6[3] = __CoreMediaLibraryCore_block_invoke;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E52EEBF0;
    uint64_t v8 = 0;
    qword_1EB25D338 = _sl_dlopen();
  }
  uint64_t v2 = (void *)qword_1EB25D338;
  if (!qword_1EB25D338)
  {
    a1 = (void *)[MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"void *CoreMediaLibrary(void)"];
    CFDictionaryRef v3 = objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIWebFileUploadPanel.m", 63, @"%s", v6[0]);
    __break(1u);
    goto LABEL_7;
  }
  CFDictionaryRef v3 = v6[0];
  if (v6[0]) {
LABEL_7:
  }
    free(v3);
  Class result = dlsym(v2, "kCMTimeZero");
  *(void *)(*(void *)(a1[4] + 8) + 24) = result;
  qword_1EB25D330 = *(void *)(*(void *)(a1[4] + 8) + 24);
  return result;
}

uint64_t __CoreMediaLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25D338 = result;
  return result;
}

id otherButtonFont()
{
  int v0 = [off_1E52D39C0 defaultFontDescriptorWithTextStyle:@"UICTFontTextStyleSubhead"];
  id v1 = [off_1E52D39B8 fontWithDescriptor:v0 size:0.0];

  return v1;
}

void sub_185FF59CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double adjustedFontSize(uint64_t a1, void *a2, double a3, double a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  WebThreadLock();
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v8 = [a2 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (!v8) {
    return a4;
  }
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)v19;
  double v11 = a4;
  do
  {
    for (uint64_t i = 0; i != v9; ++i)
    {
      if (*(void *)v19 != v10) {
        objc_enumerationMutation(a2);
      }
      char v13 = (void *)[*(id *)(*((void *)&v18 + 1) + 8 * i) node];
      if (v13)
      {
        double v14 = (void *)[v13 itemTitle];
        if ([v14 length])
        {
          double v17 = a4;
          objc_msgSend(v14, "_legacy_sizeWithFont:minFontSize:actualFontSize:forWidth:lineBreakMode:", a1, &v17, 0, 12.0, a3);
          if (v17 < v11 && v17 > 0.0) {
            double v11 = v17;
          }
        }
      }
    }
    uint64_t v9 = [a2 countByEnumeratingWithState:&v18 objects:v22 count:16];
  }
  while (v9);
  return v11;
}

__CFString *UIDefaultCountryCode()
{
  CFLocaleRef v0 = CFLocaleCopyCurrent();
  if (v0)
  {
    CFLocaleRef v1 = v0;
    objc_msgSend((id)CFLocaleGetValue(v0, (CFLocaleKey)*MEMORY[0x1E4F1D1F0]), "lowercaseString");
    uint64_t v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
    CFRelease(v1);
  }
  else
  {
    uint64_t v2 = 0;
  }
  if (v2) {
    CFDictionaryRef v3 = v2;
  }
  else {
    CFDictionaryRef v3 = @"us";
  }
  long long v4 = v3;

  return v4;
}

void UIFormattedPhoneStringByRemovingFromEnd(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (void *)CPPhoneNumberCopyNetworkCountryCode();
  if (!v2)
  {
    uint64_t v2 = UIDefaultCountryCode();
  }
  uint64_t v3 = [v1 length];
  uint64_t v10 = 0;
  double v11 = &v10;
  uint64_t v12 = 0x2020000000;
  long long v4 = (uint64_t (*)(id, void *, uint64_t))get_PNCopyFormattedNumberForDigitsWithCountryByRemovingAtIndexSymbolLoc_ptr;
  char v13 = get_PNCopyFormattedNumberForDigitsWithCountryByRemovingAtIndexSymbolLoc_ptr;
  if (!get_PNCopyFormattedNumberForDigitsWithCountryByRemovingAtIndexSymbolLoc_ptr)
  {
    uint64_t v5 = CorePhoneNumbersLibrary();
    void v11[3] = (uint64_t)dlsym(v5, "_PNCopyFormattedNumberForDigitsWithCountryByRemovingAtIndex");
    get_PNCopyFormattedNumberForDigitsWithCountryByRemovingAtIndexSymbolLoc_ptr = (_UNKNOWN *)v11[3];
    long long v4 = (uint64_t (*)(id, void *, uint64_t))v11[3];
  }
  _Block_object_dispose(&v10, 8);
  if (v4)
  {
    uint64_t v6 = (void *)v4(v1, v2, v3);

    id v7 = v6;
  }
  else
  {
    uint64_t v8 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v9 = objc_msgSend(NSString, "stringWithUTF8String:", "CFStringRef _UIPNCopyFormattedNumberForDigitsWithCountryByRemovingAtIndex(CFStringRef, CFStringRef, CFIndex)");
    objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, @"UIPhoneFormatUtilities.m", 33, @"%s", dlerror());

    __break(1u);
  }
}

void sub_185FFD488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void UIPhonePrefixFromNumber(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = (void *)CPPhoneNumberCopyHomeCountryCode();
    if (!v2)
    {
      uint64_t v2 = UIDefaultCountryCode();
    }
    CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    UIUnformattedPhoneNumberFromString(v1);
    long long v4 = (__CFString *)objc_claimAutoreleasedReturnValue();
    CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(v3, v4, @",");

    ValueAtIndedouble x = CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 0);
    uint64_t v13 = 0;
    double v14 = &v13;
    uint64_t v15 = 0x2020000000;
    id v7 = (uint64_t (*)(const void *, void *))get_PNCopyPrefixForCountrySymbolLoc_ptr;
    CGRect v16 = get_PNCopyPrefixForCountrySymbolLoc_ptr;
    if (!get_PNCopyPrefixForCountrySymbolLoc_ptr)
    {
      uint64_t v8 = CorePhoneNumbersLibrary();
      v14[3] = (uint64_t)dlsym(v8, "_PNCopyPrefixForCountry");
      get_PNCopyPrefixForCountrySymbolLoc_ptr = (_UNKNOWN *)v14[3];
      id v7 = (uint64_t (*)(const void *, void *))v14[3];
    }
    _Block_object_dispose(&v13, 8);
    if (!v7)
    {
      double v11 = [MEMORY[0x1E4F28B00] currentHandler];
      uint64_t v12 = objc_msgSend(NSString, "stringWithUTF8String:", "CFStringRef _UIPNCopyPrefixForCountry(CFStringRef, CFStringRef)");
      objc_msgSend(v11, "handleFailureInFunction:file:lineNumber:description:", v12, @"UIPhoneFormatUtilities.m", 35, @"%s", dlerror());

      __break(1u);
      return;
    }
    uint64_t v9 = (void *)v7(ValueAtIndex, v2);
    CFRelease(ArrayBySeparatingStrings);
  }
  else
  {
    uint64_t v9 = 0;
  }

  id v10 = v9;
}

void sub_185FFD694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void UIUnformattedPhoneNumberFromString(void *a1)
{
  id v1 = a1;
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  uint64_t v2 = (uint64_t (*)(id))get_PNCreateStringByStrippingFormattingAndNotVisiblyAllowableSymbolLoc_ptr;
  double v11 = get_PNCreateStringByStrippingFormattingAndNotVisiblyAllowableSymbolLoc_ptr;
  if (!get_PNCreateStringByStrippingFormattingAndNotVisiblyAllowableSymbolLoc_ptr)
  {
    CFAllocatorRef v3 = CorePhoneNumbersLibrary();
    void v9[3] = (uint64_t)dlsym(v3, "_PNCreateStringByStrippingFormattingAndNotVisiblyAllowable");
    get_PNCreateStringByStrippingFormattingAndNotVisiblyAllowableSymbolLoc_ptr = (_UNKNOWN *)v9[3];
    uint64_t v2 = (uint64_t (*)(id))v9[3];
  }
  _Block_object_dispose(&v8, 8);
  if (v2)
  {
    long long v4 = (void *)v2(v1);

    id v5 = v4;
  }
  else
  {
    uint64_t v6 = [MEMORY[0x1E4F28B00] currentHandler];
    id v7 = [NSString stringWithUTF8String:"CFStringRef _UIPNCreateStringByStrippingFormattingAndNotVisiblyAllowable(CFStringRef)"];
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, @"UIPhoneFormatUtilities.m", 36, @"%s", dlerror());

    __break(1u);
  }
}

void sub_185FFD81C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id UIFormattedPhoneNumberFromString(void *a1)
{
  id v1 = a1;
  uint64_t v2 = UIDefaultCountryCode();
  CFAllocatorRef v3 = UIFormattedPhoneNumberFromStringWithCountry(v1, v2);

  return v3;
}

void UIFormattedPhoneNumberFromStringWithCountry(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2020000000;
  id v5 = (uint64_t (*)(id, id, uint64_t, void))getPNCreateFormattedStringWithCountrySymbolLoc_ptr;
  double v14 = getPNCreateFormattedStringWithCountrySymbolLoc_ptr;
  if (!getPNCreateFormattedStringWithCountrySymbolLoc_ptr)
  {
    uint64_t v6 = CorePhoneNumbersLibrary();
    _OWORD v12[3] = (uint64_t)dlsym(v6, "PNCreateFormattedStringWithCountry");
    getPNCreateFormattedStringWithCountrySymbolLoc_ptr = (_UNKNOWN *)v12[3];
    id v5 = (uint64_t (*)(id, id, uint64_t, void))v12[3];
  }
  _Block_object_dispose(&v11, 8);
  if (v5)
  {
    id v7 = (void *)v5(v3, v4, 2, 0);

    id v8 = v7;
  }
  else
  {
    uint64_t v9 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v10 = objc_msgSend(NSString, "stringWithUTF8String:", "CFStringRef _UIPNCreateFormattedStringWithCountry(CFStringRef, CFStringRef, PNFormatLocalization, PNFormatCompression)");
    objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", v10, @"UIPhoneFormatUtilities.m", 32, @"%s", dlerror());

    __break(1u);
  }
}

void sub_185FFDA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void UIPhoneNumberSuggestionForString(void *a1, unsigned int a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  v15[0] = 0;
  id v7 = UIDefaultCountryCode();
  uint64_t v17 = 0;
  long long v18 = &v17;
  uint64_t v19 = 0x2020000000;
  id v8 = get_PNCopyFormattedNumberSuggestionForDigitsWithCountrySymbolLoc_ptr;
  long long v20 = get_PNCopyFormattedNumberSuggestionForDigitsWithCountrySymbolLoc_ptr;
  if (!get_PNCopyFormattedNumberSuggestionForDigitsWithCountrySymbolLoc_ptr)
  {
    v15[1] = MEMORY[0x1E4F143A8];
    void v15[2] = 3221225472;
    v15[3] = __get_PNCopyFormattedNumberSuggestionForDigitsWithCountrySymbolLoc_block_invoke;
    void v15[4] = &unk_1E52D9900;
    CGRect v16 = &v17;
    uint64_t v9 = CorePhoneNumbersLibrary();
    v18[3] = (uint64_t)dlsym(v9, "_PNCopyFormattedNumberSuggestionForDigitsWithCountry");
    get_PNCopyFormattedNumberSuggestionForDigitsWithCountrySymbolLoc_ptr = *(_UNKNOWN **)(v16[1] + 24);
    id v8 = (void *)v18[3];
  }
  _Block_object_dispose(&v17, 8);
  if (v8)
  {
    uint64_t v10 = (__CFString *)((uint64_t (*)(id, void, id, void *, __CFString *))v8)(v5, a2, v6, v15, v7);
    id v11 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    if (v10) {
      uint64_t v12 = v10;
    }
    else {
      uint64_t v12 = &stru_1ED0E84C0;
    }
    [v11 addObject:v12];
    if (v10) {
      CFRelease(v10);
    }
  }
  else
  {
    uint64_t v13 = [MEMORY[0x1E4F28B00] currentHandler];
    double v14 = objc_msgSend(NSString, "stringWithUTF8String:", "CFStringRef _UIPNCopyFormattedNumberSuggestionForDigitsWithCountry(CFStringRef, CFIndex, CFStringRef, CFIndex *, CFStringRef)");
    objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, @"UIPhoneFormatUtilities.m", 34, @"%s", dlerror());

    __break(1u);
  }
}

void sub_185FFDC14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *CorePhoneNumbersLibrary()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!CorePhoneNumbersLibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    _OWORD v4[2] = (void *)3221225472;
    v4[3] = __CorePhoneNumbersLibraryCore_block_invoke;
    void v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_1E52EEC08;
    uint64_t v6 = 0;
    CorePhoneNumbersLibraryCore_frameworkLibrardouble y = _sl_dlopen();
  }
  CFLocaleRef v0 = (void *)CorePhoneNumbersLibraryCore_frameworkLibrary;
  if (!CorePhoneNumbersLibraryCore_frameworkLibrary)
  {
    CFLocaleRef v0 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *CorePhoneNumbersLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIPhoneFormatUtilities.m", 31, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __CorePhoneNumbersLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  CorePhoneNumbersLibraryCore_frameworkLibrardouble y = result;
  return result;
}

void *__getPNCreateFormattedStringWithCountrySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CorePhoneNumbersLibrary();
  uint64_t result = dlsym(v2, "PNCreateFormattedStringWithCountry");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getPNCreateFormattedStringWithCountrySymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

UITargetedPreview *_UIControlMenuSupportTargetedPreviewOverViews(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  id v8 = [v5 _window];

  if (!v8)
  {
    long long v21 = 0;
    goto LABEL_11;
  }
  if (!__shouldUseView(v6, v5))
  {
    if (__shouldUseView(v7, v5))
    {
      [v7 bounds];
      objc_msgSend(v5, "convertRect:fromView:", v7);
    }
    else
    {
      [v5 bounds];
    }
    goto LABEL_9;
  }
  [v6 bounds];
  objc_msgSend(v5, "convertRect:fromView:", v6);
  double x = v9;
  double y = v11;
  double width = v13;
  double height = v15;
  if (__shouldUseView(v7, v5))
  {
    [v7 bounds];
    objc_msgSend(v5, "convertRect:fromView:", v7);
    v31.origin.double x = v17;
    v31.origin.double y = v18;
    v31.size.double width = v19;
    v31.size.double height = v20;
    v29.origin.double x = x;
    v29.origin.double y = y;
    v29.size.double width = width;
    v29.size.double height = height;
    CGRect v30 = CGRectUnion(v29, v31);
LABEL_9:
    double x = v30.origin.x;
    double y = v30.origin.y;
    double width = v30.size.width;
    double height = v30.size.height;
  }
  double v22 = -[UIPreviewTarget initWithContainer:center:]([UIPreviewTarget alloc], "initWithContainer:center:", v5, width * 0.5 + x, height * 0.5 + y);
  uint64_t v23 = objc_opt_new();
  uint64_t v24 = +[UIColor clearColor];
  [v23 setBackgroundColor:v24];

  uint64_t v25 = [UITargetedPreview alloc];
  double v26 = -[UIView initWithFrame:]([UIView alloc], "initWithFrame:", x, y, width, height);
  long long v21 = [(UITargetedPreview *)v25 initWithView:v26 parameters:v23 target:v22];

LABEL_11:
  return v21;
}

BOOL __shouldUseView(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (v3
    && [v3 isDescendantOfView:v4]
    && ([v3 isHidden] & 1) == 0
    && ([v3 alpha], v5 >= 0.01))
  {
    [v3 bounds];
    BOOL v6 = !CGRectIsEmpty(v8);
  }
  else
  {
    BOOL v6 = 0;
  }

  return v6;
}

id _UIControlMenuSupportDefaultMenuStyle(int a1)
{
  uint64_t v2 = +[_UIContextMenuStyle defaultStyle];
  [v2 setPreferredLayout:3];
  objc_msgSend(v2, "set_orderMenuBasedOnPriority:", a1 ^ 1u);
  return v2;
}

void _UIControlMenuSupportUpdateStyleForBarButtons(void *a1, void *a2, void *a3, int a4, double a5, CGFloat a6)
{
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;
  _UIControlMenuSupportUpdateStyle(v11, v12, v13, a5, a6);
  if (a4)
  {
    double v14 = [v13 view];
    [v14 bounds];
    double v16 = v15;
    double v18 = v17;
    double v20 = v19;
    double v22 = v21;
    uint64_t v23 = [v13 target];
    [v23 center];
    double v25 = v24;
    double v27 = v26;
    uint64_t v28 = [v12 _screen];
    [v28 scale];
    UIRectCenteredAboutPointScale(v16, v18, v20, v22, v25, v27, v29);
    CGFloat v31 = v30;
    CGFloat v33 = v32;
    CGFloat v35 = v34;
    CGFloat v37 = v36;

    if (v11)
    {
      [v11 _preferredAnchor];
      [v11 _preferredAnchor];
    }
    else
    {
      uint64_t v58 = 0;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      uint64_t v55 = 0;
    }
    [v14 bounds];
    double v38 = -(CGRectGetMidY(v59) + 22.0);
    if (v11)
    {
      [v11 _preferredAnchor];
      if (*((void *)&v50 + 1) == 2)
      {
        v60.origin.double x = v31;
        v60.origin.double y = v33;
        v60.size.double width = v35;
        v60.size.double height = v37;
        double v39 = -(CGRectGetMinX(v60) + -8.0);
        objc_msgSend(v11, "set_allowsImmediateSelection:", 1);
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v52 = 0;
      long long v50 = 0u;
      long long v51 = 0u;
    }
    [v12 bounds];
    double Width = CGRectGetWidth(v61);
    v62.origin.double x = v31;
    v62.origin.double y = v33;
    v62.size.double width = v35;
    v62.size.double height = v37;
    double v39 = Width - CGRectGetMaxX(v62) + -8.0;
    objc_msgSend(v11, "set_allowsImmediateSelection:", 1);
    if (!v11)
    {
      uint64_t v42 = 0;
      uint64_t v41 = 0;
      uint64_t v49 = 0;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      uint64_t v46 = 0;
      goto LABEL_12;
    }
LABEL_10:
    [v11 _preferredAnchor];
    uint64_t v41 = v47;
    [v11 _preferredAnchor];
    uint64_t v42 = *((void *)&v44 + 1);
LABEL_12:
    v43[0] = v41;
    v43[1] = v42;
    *(double *)&v43[2] = v38;
    *(double *)&v43[3] = v39;
    v43[4] = 0;
    objc_msgSend(v11, "set_preferredAnchor:", v43);
  }
}

void _UIControlMenuSupportUpdateStyle(void *a1, void *a2, void *a3, double a4, CGFloat a5)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  objc_msgSend(v9, "setPreferredEdgeInsets:", 1.0, 1.0, 1.0, 1.0);
  [v9 setPreferredLayout:3];
  id v12 = [v11 view];

  if (v12) {
    id v13 = v12;
  }
  else {
    id v13 = v10;
  }
  [v13 bounds];
  CGFloat v15 = v14;
  CGFloat v17 = v16;
  CGFloat v19 = v18;
  CGFloat v21 = v20;

  v39.origin.double x = v15;
  v39.origin.double y = v17;
  v39.size.double width = v19;
  v39.size.double height = v21;
  if (a5 >= CGRectGetMidY(v39))
  {
    char v22 = 0;
    uint64_t v23 = 4;
  }
  else
  {
    v40.origin.double x = v15;
    v40.origin.double y = v17;
    v40.size.double width = v19;
    v40.size.double height = v21;
    if (a5 >= CGRectGetMidY(v40))
    {
      uint64_t v23 = 0;
      char v22 = 1;
    }
    else
    {
      char v22 = 0;
      uint64_t v23 = 1;
    }
  }
  v41.origin.double x = v15;
  v41.origin.double y = v17;
  v41.size.double width = v19;
  v41.size.double height = v21;
  double v24 = CGRectGetWidth(v41) * 0.05;
  if (v24 >= 2.0) {
    double v25 = v24;
  }
  else {
    double v25 = 2.0;
  }
  v42.origin.double x = v15;
  v42.origin.double y = v17;
  v42.size.double width = v19;
  v42.size.double height = v21;
  double v26 = a4 - CGRectGetMidX(v42);
  if (v26 <= v25)
  {
    if (v26 >= -v25)
    {
      uint64_t v28 = 0;
      char v27 = 1;
    }
    else
    {
      char v27 = 0;
      uint64_t v28 = 2;
    }
  }
  else
  {
    char v27 = 0;
    uint64_t v28 = 8;
  }
  double v29 = 0.0;
  double v30 = 0.0;
  if (v22) {
    goto LABEL_21;
  }
  if (v23 != 4)
  {
    if (v23 == 1) {
      double v30 = a5;
    }
LABEL_21:
    if (v27) {
      goto LABEL_30;
    }
    goto LABEL_22;
  }
  v43.origin.double x = v15;
  v43.origin.double y = v17;
  v43.size.double width = v19;
  v43.size.double height = v21;
  double v30 = a5 - CGRectGetMaxY(v43);
  if (v27) {
    goto LABEL_30;
  }
LABEL_22:
  CGFloat v31 = [v10 traitCollection];
  double v32 = _UIContextMenuGetPlatformMetrics([v31 userInterfaceIdiom]);
  int v33 = [v32 wantsControlAlignmentWithHorizontalEdgeAdjustment];

  double v34 = 0.0;
  if (v33)
  {
    CGFloat v35 = [v10 traitCollection];
    double v36 = _UIContextMenuGetPlatformMetrics([v35 userInterfaceIdiom]);
    [v36 menuItemInternalPadding];
    double v34 = v37;
  }
  if (v28 == 8)
  {
    v44.origin.double x = v15;
    v44.origin.double y = v17;
    v44.size.double width = v19;
    v44.size.double height = v21;
    double v29 = v34 + a4 - CGRectGetMaxX(v44);
  }
  else if (v28 == 2)
  {
    double v29 = a4 - v34;
  }
LABEL_30:
  v38[0] = v23;
  v38[1] = v28;
  *(double *)&v38[2] = v30;
  *(double *)&_OWORD v38[3] = v29;
  void v38[4] = 0;
  objc_msgSend(v9, "set_preferredAnchor:", v38);
  objc_msgSend(v9, "set_parentTraitEnvironmentForUserInterfaceStyle:", v10);
}

double _UIControlMenuAttachmentPointForRectInContainer(void *a1, double a2, double a3, double a4, double a5)
{
  id v9 = a1;
  double v42 = a4;
  double v10 = a4 * 0.5;
  double v11 = a5;
  double v12 = a5 * 0.5;
  id v13 = [v9 _window];

  if (v13)
  {
    [v9 bounds];
    CGFloat rect = v14;
    CGFloat v16 = v15;
    CGFloat v18 = v17;
    CGFloat v20 = v19;
    double v21 = a2 + v10;
    double v22 = a3 + v12;
    uint64_t v23 = [v9 _window];
    if ([v23 _isTextEffectsWindow])
    {
      objc_msgSend(v9, "convertPoint:toView:", v23, v21, a3 + v12);
      double v21 = v24;
      double v22 = v25;
      id v26 = v23;

      [v26 _usableBounds];
      CGFloat rect = v27;
      CGFloat v16 = v28;
      CGFloat v18 = v29;
      CGFloat v20 = v30;
      id v9 = v26;
    }
    CGFloat v31 = [v9 traitCollection];
    double v32 = _UIContextMenuGetPlatformMetrics([v31 userInterfaceIdiom]);
    uint64_t v33 = [v32 controlAttachmentYOffsetProvider];
    double v34 = (void *)v33;
    if (v33) {
      (*(void (**)(uint64_t, double, double))(v33 + 16))(v33, v42, v11);
    }

    if (([v23 _isRemoteInputHostWindow] & 1) == 0)
    {
      v44.origin.double x = rect;
      v44.origin.double y = v16;
      v44.size.double width = v18;
      v44.size.double height = v20;
      if (v22 <= CGRectGetMidY(v44))
      {
        v49.origin.double x = rect;
        v49.origin.double y = v16;
        v49.size.double width = v18;
        v49.size.double height = v20;
        if (v22 < CGRectGetMidY(v49))
        {
          v50.origin.double x = 0.0;
          v50.origin.double y = 0.0;
          v50.size.double width = v42;
          v50.size.double height = v11;
          CGRectGetMaxY(v50);
        }
      }
    }
    v45.origin.double x = rect;
    v45.origin.double y = v16;
    v45.size.double width = v18;
    v45.size.double height = v20;
    double v36 = CGRectGetWidth(v45) * 0.05;
    if (v36 >= 2.0) {
      double v37 = v36;
    }
    else {
      double v37 = 2.0;
    }
    v46.origin.double x = rect;
    v46.origin.double y = v16;
    v46.size.double width = v18;
    v46.size.double height = v20;
    double v38 = v21 - CGRectGetMidX(v46);
    if (v38 <= v37)
    {
      double v40 = -v37;
      double v35 = 0.0;
      if (v38 < v40)
      {
LABEL_17:

        goto LABEL_18;
      }
      v48.origin.double x = 0.0;
      v48.origin.double y = 0.0;
      v48.size.double width = v42;
      v48.size.double height = v11;
      double MidX = CGRectGetMidX(v48);
    }
    else
    {
      v47.origin.double x = 0.0;
      v47.origin.double y = 0.0;
      v47.size.double width = v42;
      v47.size.double height = v11;
      double MidX = CGRectGetMaxX(v47);
    }
    double v35 = MidX;
    goto LABEL_17;
  }
  double v35 = v10 + 0.0;
LABEL_18:

  return v35;
}

void _UIControlMenuSupportUpdateStyleWithHorizontalPreference(void *a1, void *a2, void *a3, double a4, double a5)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  objc_msgSend(v9, "setPreferredEdgeInsets:", 1.0, 1.0, 1.0, 1.0);
  [v9 setPreferredLayout:3];
  double v12 = [v11 view];

  if (v12) {
    id v13 = v12;
  }
  else {
    id v13 = v10;
  }
  [v13 bounds];
  CGFloat v15 = v14;
  CGFloat v17 = v16;
  CGFloat v19 = v18;
  CGFloat v21 = v20;

  v32.origin.double x = v15;
  v32.origin.double y = v17;
  v32.size.double width = v19;
  v32.size.double height = v21;
  double MidX = CGRectGetMidX(v32);
  v33.origin.double x = v15;
  v33.origin.double y = v17;
  v33.size.double width = v19;
  v33.size.double height = v21;
  double v23 = CGRectGetHeight(v33) * 0.05;
  if (v23 >= 2.0) {
    double v24 = v23;
  }
  else {
    double v24 = 2.0;
  }
  v34.origin.double x = v15;
  v34.origin.double y = v17;
  v34.size.double width = v19;
  v34.size.double height = v21;
  double v25 = a5 - CGRectGetMidY(v34);
  if (v25 <= v24)
  {
    if (v25 >= -v24)
    {
      uint64_t v27 = 0;
      char v26 = 1;
    }
    else
    {
      char v26 = 0;
      uint64_t v27 = 1;
    }
  }
  else
  {
    char v26 = 0;
    uint64_t v27 = 4;
  }
  double v28 = a4;
  if (a4 >= MidX)
  {
    v35.origin.double x = v15;
    v35.origin.double y = v17;
    v35.size.double width = v19;
    v35.size.double height = v21;
    double v28 = a4 - CGRectGetMaxX(v35);
  }
  double v29 = 0.0;
  if ((v26 & 1) == 0)
  {
    if (v27 == 4)
    {
      v36.origin.double x = v15;
      v36.origin.double y = v17;
      v36.size.double width = v19;
      v36.size.double height = v21;
      double v29 = a5 - CGRectGetMaxY(v36);
    }
    else if (v27 == 1)
    {
      double v29 = a5;
    }
  }
  uint64_t v30 = 8;
  if (a4 < MidX) {
    uint64_t v30 = 2;
  }
  v31[0] = v30;
  v31[1] = v27;
  *(double *)&v31[2] = v28;
  *(double *)&_OWORD v31[3] = v29;
  v31[4] = 0;
  objc_msgSend(v9, "set_preferredAnchor:", v31);
  objc_msgSend(v9, "set_parentTraitEnvironmentForUserInterfaceStyle:", v10);
}

double _UIControlMenuAttachmentPointForRectInContainerForHorizontalAttachment(void *a1, double a2, double a3, CGFloat a4, CGFloat a5)
{
  id v9 = a1;
  id v10 = [v9 _window];

  if (v10)
  {
    [v9 bounds];
    CGFloat x = v22.origin.x;
    CGFloat y = v22.origin.y;
    CGFloat width = v22.size.width;
    CGFloat height = v22.size.height;
    double v21 = a2 + a4 * 0.5;
    double v15 = a3 + a5 * 0.5;
    double v16 = CGRectGetHeight(v22) * 0.05;
    if (v16 >= 2.0) {
      double v17 = v16;
    }
    else {
      double v17 = 2.0;
    }
    v23.origin.CGFloat x = x;
    v23.origin.CGFloat y = y;
    v23.size.CGFloat width = width;
    v23.size.CGFloat height = height;
    double v18 = v15 - CGRectGetMidY(v23);
    if (v18 <= v17)
    {
      if (v18 >= -v17)
      {
        v25.origin.CGFloat x = 0.0;
        v25.origin.CGFloat y = 0.0;
        v25.size.CGFloat width = a4;
        v25.size.CGFloat height = a5;
        CGRectGetMidY(v25);
      }
    }
    else
    {
      v24.origin.CGFloat x = 0.0;
      v24.origin.CGFloat y = 0.0;
      v24.size.CGFloat width = a4;
      v24.size.CGFloat height = a5;
      CGRectGetMaxY(v24);
    }
    v26.origin.CGFloat x = x;
    v26.origin.CGFloat y = y;
    v26.size.CGFloat width = width;
    v26.size.CGFloat height = height;
    double v19 = -20.0;
    if (v21 <= CGRectGetMidX(v26))
    {
      v27.origin.CGFloat x = 0.0;
      v27.origin.CGFloat y = 0.0;
      v27.size.CGFloat width = a4;
      v27.size.CGFloat height = a5;
      double v19 = CGRectGetMaxX(v27) + 20.0;
    }
  }
  else
  {
    double v19 = a4 * 0.5 + 0.0;
  }

  return v19;
}

void sub_185FFF4DC(_Unwind_Exception *a1)
{
}

id _candidatesChoicesFromTextChoices(void *a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  double v5 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v3, "count"));
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v6 = v3;
  uint64_t v7 = [v6 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v18;
    if (v4) {
      id v10 = v4;
    }
    else {
      id v10 = &stru_1ED0E84C0;
    }
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v18 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v12 = *(void *)(*((void *)&v17 + 1) + 8 * i);
        id v13 = objc_alloc(MEMORY[0x1E4FAE318]);
        double v14 = objc_msgSend(v13, "initWithCandidate:forInput:", v12, v10, (void)v17);
        [v5 addObject:v14];
      }
      uint64_t v8 = [v6 countByEnumeratingWithState:&v17 objects:v21 count:16];
    }
    while (v8);
  }

  double v15 = (void *)[v5 copy];
  return v15;
}

unint64_t _candidateSourceIsSmartReply(void *a1)
{
  id v1 = a1;
  if (objc_opt_respondsToSelector()) {
    unint64_t v2 = ((unint64_t)[v1 candidateProperty] >> 1) & 1;
  }
  else {
    unint64_t v2 = 0;
  }

  return v2;
}

unint64_t _replacementSourceIsSmartReply(void *a1)
{
  id v1 = [a1 candidateChoices];
  unint64_t v2 = [v1 firstObject];
  IsSmartReplCGFloat y = _candidateSourceIsSmartReply(v2);

  return IsSmartReply;
}

void sub_186009700(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void __TIGetShowCandidateConfidenceValue_block_invoke()
{
  id v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  [v0 _configureKey:@"ShowCandidateConfidence" domain:@"com.apple.keyboard" defaultValue:MEMORY[0x1E4F1CC28]];
}

void sub_1860158A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1860183F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186018C24(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18601A884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getBETextAlternativesClass_block_invoke(uint64_t a1)
{
  BrowserEngineKitLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("BETextAlternatives");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getBETextAlternativesClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getBETextAlternativesClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIKBInputDelegateManager.m", 63, @"Unable to find class %s", "BETextAlternatives");

    __break(1u);
  }
}

void BrowserEngineKitLibrary()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!BrowserEngineKitLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __BrowserEngineKitLibraryCore_block_invoke_0;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E52EEE10;
    uint64_t v5 = 0;
    BrowserEngineKitLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  if (!BrowserEngineKitLibraryCore_frameworkLibrary)
  {
    uint64_t v1 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v2 = [NSString stringWithUTF8String:"void *BrowserEngineKitLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"UIKBInputDelegateManager.m", 57, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __BrowserEngineKitLibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  BrowserEngineKitLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

id getBEAutoFillTextSuggestionClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)getBEAutoFillTextSuggestionClass_softClass;
  uint64_t v7 = getBEAutoFillTextSuggestionClass_softClass;
  if (!getBEAutoFillTextSuggestionClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getBEAutoFillTextSuggestionClass_block_invoke_0;
    v3[3] = &unk_1E52D9900;
    v3[4] = &v4;
    __getBEAutoFillTextSuggestionClass_block_invoke_0((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18601D088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getBEAutoFillTextSuggestionClass_block_invoke_0(uint64_t a1)
{
  BrowserEngineKitLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("BEAutoFillTextSuggestion");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getBEAutoFillTextSuggestionClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getBEAutoFillTextSuggestionClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIKBInputDelegateManager.m", 62, @"Unable to find class %s", "BEAutoFillTextSuggestion");

    __break(1u);
  }
}

void __getBETextSuggestionClass_block_invoke(uint64_t a1)
{
  BrowserEngineKitLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("BETextSuggestion");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getBETextSuggestionClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getBETextSuggestionClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIKBInputDelegateManager.m", 58, @"Unable to find class %s", "BETextSuggestion");

    __break(1u);
  }
}

void __getBEKeyEntryClass_block_invoke(uint64_t a1)
{
  BrowserEngineKitLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("BEKeyEntry");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getBEKeyEntryClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getBEKeyEntryClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIKBInputDelegateManager.m", 59, @"Unable to find class %s", "BEKeyEntry");

    __break(1u);
  }
}

void __getBETextDocumentRequestClass_block_invoke(uint64_t a1)
{
  BrowserEngineKitLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("BETextDocumentRequest");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getBETextDocumentRequestClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getBETextDocumentRequestClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIKBInputDelegateManager.m", 60, @"Unable to find class %s", "BETextDocumentRequest");

    __break(1u);
  }
}

void __TIGetChamoisExternalSWKeyboardValue_block_invoke()
{
  id v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  [v0 _configureKey:@"ChamoisExternalSWKeyboard" domain:@"com.apple.keyboard" defaultValue:MEMORY[0x1E4F1CC28]];
}

void sub_18601E900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18601FB80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186020354(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

id _asCalendarDay(void *a1, void *a2, int a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  v38[0] = MEMORY[0x1E4F143A8];
  v38[1] = 3221225472;
  v38[2] = ___asCalendarDay_block_invoke;
  _OWORD v38[3] = &unk_1E52EEEF0;
  id v6 = v5;
  id v39 = v6;
  uint64_t v7 = _UICalendarMap(a1, v38);
  if (a3)
  {
    id v29 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    id obj = v7;
    uint64_t v8 = [obj countByEnumeratingWithState:&v34 objects:v40 count:16];
    if (!v8) {
      goto LABEL_16;
    }
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v35;
    id v30 = v6;
    while (1)
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v35 != v10) {
          objc_enumerationMutation(obj);
        }
        uint64_t v12 = *(void **)(*((void *)&v34 + 1) + 8 * i);
        id v32 = 0;
        double v33 = 0.0;
        id v13 = [v12 date];
        [v6 rangeOfUnit:4096 startDate:&v32 interval:&v33 forDate:v13];
        id v14 = v32;

        double v15 = [v14 dateByAddingTimeInterval:v33 + -1.0];
        uint64_t v16 = [v6 component:8 fromDate:v14];
        uint64_t v17 = [v6 component:8 fromDate:v15];
        if (v16 != v17)
        {
          uint64_t v18 = v17;
          uint64_t v19 = v9;
          uint64_t v20 = v10;
          double v21 = [v12 components];
          uint64_t v22 = [v21 month];

          if (v16 == v22)
          {
            CGRect v23 = [v12 month];
            CGRect v24 = [v23 nextMonth];
            uint64_t v10 = v20;
            uint64_t v9 = v19;
            id v6 = v30;
          }
          else
          {
            CGRect v25 = [v12 components];
            uint64_t v26 = [v25 month];

            uint64_t v10 = v20;
            uint64_t v9 = v19;
            id v6 = v30;
            if (v18 != v26) {
              goto LABEL_14;
            }
            CGRect v23 = [v12 month];
            CGRect v24 = [v23 previousMonth];
          }

          if (v24)
          {
            CGRect v27 = (void *)[v12 copyWithAssignedMonth:v24];
            [v29 addObject:v27];
          }
        }
LABEL_14:
      }
      uint64_t v9 = [obj countByEnumeratingWithState:&v34 objects:v40 count:16];
      if (!v9)
      {
LABEL_16:

        uint64_t v7 = [obj arrayByAddingObjectsFromArray:v29];

        break;
      }
    }
  }

  return v7;
}

id _UICalendarMap(void *a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = a2;
  id v5 = v3;
  id v6 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v5, "count"));
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v7 = v5;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v16 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v12 = v4[2](v4, *(void *)(*((void *)&v15 + 1) + 8 * i));
        if (v12) {
          objc_msgSend(v6, "addObject:", v12, (void)v15);
        }
      }
      uint64_t v9 = [v7 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v9);
  }

  id v13 = (void *)[v6 copy];
  return v13;
}

_UIDatePickerCalendarDay *___asCalendarDay_block_invoke(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(a1 + 32) dateFromComponents:a2];
  uint64_t v4 = [[_UIDatePickerCalendarDay alloc] initWithDate:v3 calendar:*(void *)(a1 + 32)];

  return v4;
}

void sub_1860240D8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_186024EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location)
{
  objc_destroyWeak(v11);
  objc_destroyWeak(v10);
  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v12 - 112));
  _Unwind_Resume(a1);
}

void sub_186028330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getSSScreenshotMetadataHarvesterClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB260840)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    _OWORD v6[3] = __ScreenshotServicesLibraryCore_block_invoke;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E52EEFD8;
    uint64_t v8 = 0;
    qword_1EB260840 = _sl_dlopen();
  }
  if (!qword_1EB260840)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *ScreenshotServicesLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIScreenshotMetadataRequestAction.m", 18, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("SSScreenshotMetadataHarvester");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    id v5 = [NSString stringWithUTF8String:"Class getSSScreenshotMetadataHarvesterClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIScreenshotMetadataRequestAction.m", 19, @"Unable to find class %s", "SSScreenshotMetadataHarvester");

LABEL_10:
    __break(1u);
  }
  _MergedGlobals_1056 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __ScreenshotServicesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB260840 = result;
  return result;
}

id _UIHyperExtenderClasses()
{
  if (qword_1EB260850 != -1) {
    dispatch_once(&qword_1EB260850, &__block_literal_global_230);
  }
  id v0 = (void *)_MergedGlobals_1057;
  return v0;
}

void sub_18602B6D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18602BB10(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

uint64_t previewHandler_block_invoke(uint64_t a1, id *a2)
{
  id v2 = *a2;
  if (!*a2) {
    return 0;
  }
  if (*((unsigned char *)v2 + 20))
  {
    id v3 = [*a2 privateDelegate];
    uint64_t v4 = [v2 previewInteraction];
    int v5 = [v3 _previewInteractionShouldFinishTransitionToPreview:v4];

    if (!v5) {
      return 4;
    }
  }
  if (*((unsigned char *)v2 + 17) || ([v2 _canPerformPresentation] & 1) != 0) {
    return 5;
  }
  return *((void *)v2 + 1);
}

void postPreviewHandler_block_invoke_2(uint64_t a1, id *a2, uint64_t a3, uint64_t a4)
{
  int v5 = *a2;
  if (!v5)
  {
    -[_UIPreviewInteractionClickImpl _delegateUpdatePreviewTransitionWithProgress:ended:](0, 1, 1.0);
    int v5 = 0;
    if (a4 == 5) {
      goto LABEL_24;
    }
    goto LABEL_21;
  }
  if (v5[1] == 4) {
    goto LABEL_24;
  }
  uint64_t v20 = v5;
  -[_UIPreviewInteractionClickImpl _delegateUpdatePreviewTransitionWithProgress:ended:](v5, 1, 1.0);
  int v5 = v20;
  if (a4 != 5)
  {
LABEL_21:
    uint64_t v20 = v5;
    goto LABEL_22;
  }
  char v6 = [v20 _performPresentationIfPossible];
  if (![v20 _canPerformPresentation] || (v6 & 1) != 0)
  {
    long long v7 = [v20 previewClickInteraction];
    uint64_t v8 = [v7 view];
    uint64_t v9 = [v20 previewClickInteraction];
    [v8 removeInteraction:v9];

    if (v20[22])
    {
      uint64_t v10 = [v20 privateDelegate];
      id v11 = [v20 previewInteraction];
      uint64_t v12 = [v10 _previewInteractionOverrideViewForCommitPhase:v11];
    }
    else
    {
      uint64_t v12 = 0;
    }
    if (v12) {
      char v13 = 1;
    }
    else {
      char v13 = v6;
    }
    if ((v13 & 1) == 0)
    {
      uint64_t v12 = [v20 view];
    }
    if (v12)
    {
      id v14 = [v20 commitClickInteraction];

      if (!v14)
      {
        long long v15 = objc_opt_new();
        [v20 setCommitClickInteraction:v15];

        long long v16 = [v20 commitClickInteraction];
        [v16 setAllowableMovement:1.79769313e308];

        long long v17 = [v20 commitClickInteraction];
        [v17 setDelegate:v20];
      }
      long long v18 = [v20 commitClickInteraction];
      [v12 addInteraction:v18];

      if ((v6 & 1) == 0)
      {
        uint64_t v19 = [(id)UIApp _gestureEnvironment];
        -[UIGestureEnvironment _performTouchContinuationWithOverrideHitTestedView:]((uint64_t)v19, v12);
      }
    }

    goto LABEL_23;
  }
LABEL_22:
  -[_UIPreviewInteractionClickImpl _endInteractionDidComplete:wasCancelledByClient:]((uint64_t)v20, 1u, 0);
LABEL_23:
  int v5 = v20;
LABEL_24:
}

void stateMachineSpec_block_invoke_4_2(uint64_t a1, id *a2, uint64_t a3, uint64_t a4)
{
  if (a4 == 1)
  {
    int v5 = *a2;
    -[_UIPreviewInteractionClickImpl _toBeRemoved_CreateHighlighterIfPossible](v5);
    -[_UIPreviewInteractionClickImpl _toBeRemoved_CallHighlighterCompletion](v5);
  }
}

uint64_t stateMachineSpec_block_invoke_5_2(uint64_t a1, id *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v2 = *a2;
  if (!*a2) {
    return 0;
  }
  if (v2[16])
  {
    id v3 = [*a2 delegate];
    uint64_t v4 = [v2 previewInteraction];
    int v5 = [v3 previewInteractionShouldBegin:v4];

    if (!v5) {
      return 1;
    }
  }
  if ([(id)UIApp _isSpringBoard])
  {
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    char v6 = objc_msgSend(v2, "view", 0);
    long long v7 = [v6 interactions];

    uint64_t v8 = [v7 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)v16;
      while (2)
      {
        for (uint64_t i = 0; i != v9; ++i)
        {
          if (*(void *)v16 != v10) {
            objc_enumerationMutation(v7);
          }
          uint64_t v12 = *(void **)(*((void *)&v15 + 1) + 8 * i);
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            id v14 = v12;
            [v14 setEnabled:0];
            [v14 _cancelLift];
            [v2 setAssociatedDragInteraction:v14];

            goto LABEL_16;
          }
        }
        uint64_t v9 = [v7 countByEnumeratingWithState:&v15 objects:v19 count:16];
        if (v9) {
          continue;
        }
        break;
      }
    }
LABEL_16:
  }
  return 2;
}

uint64_t stateMachineSpec_block_invoke_6_1(uint64_t a1, id *a2)
{
  id v2 = *a2;
  if (!*a2) {
    return 0;
  }
  id v3 = [*a2 exclusionRelationshipGestureRecognizer];
  [v3 _succeed];

  uint64_t v4 = [v2 previewClickInteraction];
  [v4 setAllowableMovement:20.0];

  return 3;
}

uint64_t stateMachineSpec_block_invoke_7_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*a2) {
    return 0;
  }
  -[_UIPreviewInteractionClickImpl _delegateUpdateCommitTransitionWithProgress:ended:]((unsigned char *)*a2, 1, 1.0);
  v4[0] = v2;
  v4[1] = 1;
  return -[_UIPreviewInteractionClickImpl _handleTransitionToPossibleByEndingWithContext:](v2, (uint64_t)v4);
}

void ___getUTIForUnlocalizedAppCategoryDescription_block_invoke()
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v0 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  id v1 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
  _addDescendantUTIsToSet(0, @"public.app-category", v1);
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v2 = v1;
  uint64_t v3 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v14 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v13 + 1) + 8 * i);
        uint64_t v8 = objc_msgSend(MEMORY[0x1E4F442D8], "_typeWithIdentifier:allowUndeclared:", v7, 1, (void)v13);
        uint64_t v9 = [v8 _localizedDescriptionDictionary];

        uint64_t v10 = [v9 objectForKeyedSubscript:@"LSDefaultLocalizedValue"];
        if (v10) {
          [v0 setObject:v7 forKeyedSubscript:v10];
        }
      }
      uint64_t v4 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v4);
  }

  uint64_t v11 = [v0 copy];
  uint64_t v12 = (void *)_MergedGlobals_3_12;
  _MergedGlobals_3_12 = v11;
}

void _addDescendantUTIsToSet(unint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  char v6 = [MEMORY[0x1E4F442D8] _typeWithIdentifier:a2 allowUndeclared:1];
  uint64_t v7 = [v6 _childTypes];

  uint64_t v8 = [MEMORY[0x1E4F1CA48] array];
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v9 = v7;
  uint64_t v10 = [v9 countByEnumeratingWithState:&v25 objects:v30 count:16];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)v26;
    do
    {
      uint64_t v13 = 0;
      do
      {
        if (*(void *)v26 != v12) {
          objc_enumerationMutation(v9);
        }
        long long v14 = [*(id *)(*((void *)&v25 + 1) + 8 * v13) identifier];
        [v8 addObject:v14];

        ++v13;
      }
      while (v11 != v13);
      uint64_t v11 = [v9 countByEnumeratingWithState:&v25 objects:v30 count:16];
    }
    while (v11);
  }

  [v5 addObjectsFromArray:v8];
  if (a1 <= 9)
  {
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    id v15 = v8;
    uint64_t v16 = [v15 countByEnumeratingWithState:&v21 objects:v29 count:16];
    if (v16)
    {
      uint64_t v17 = v16;
      uint64_t v18 = *(void *)v22;
      unint64_t v19 = a1 + 1;
      do
      {
        uint64_t v20 = 0;
        do
        {
          if (*(void *)v22 != v18) {
            objc_enumerationMutation(v15);
          }
          _addDescendantUTIsToSet(v19, *(void *)(*((void *)&v21 + 1) + 8 * v20++), v5);
        }
        while (v17 != v20);
        uint64_t v17 = [v15 countByEnumeratingWithState:&v21 objects:v29 count:16];
      }
      while (v17);
    }
  }
}

void __UIScenePresentationLog_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.FrontBoard", "ScenePresentation");
  id v1 = (void *)UIScenePresentationLog___instance;
  UIScenePresentationLog___instance = (uint64_t)v0;
}

id UIScenePresentationBinderLog()
{
  if (UIScenePresentationBinderLog_onceToken != -1) {
    dispatch_once(&UIScenePresentationBinderLog_onceToken, &__block_literal_global_4_8);
  }
  os_log_t v0 = (void *)UIScenePresentationBinderLog___instance;
  return v0;
}

void __UIScenePresentationBinderLog_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.FrontBoard", "ScenePresentationBinder");
  id v1 = (void *)UIScenePresentationBinderLog___instance;
  UIScenePresentationBinderLog___instance = (uint64_t)v0;
}

void sub_18603BC28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18603C7B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

__CFString *NSStringFromUISceneRenderingMode(uint64_t a1)
{
  if (a1)
  {
    if (a1 == 1)
    {
      id v2 = @"Asynchronous";
    }
    else
    {
      objc_msgSend(NSString, "stringWithFormat:", @"unknown (%li)", a1);
      id v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    id v2 = @"Normal";
  }
  return v2;
}

UIScriptSwitcherButton *_GetButtonForInputMode(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = [v3 _iconLabelWithinMultiscriptSet];
  id v5 = [@"multiscript-" stringByAppendingString:v4];
  char v6 = +[UIImage kitImageNamed:v5];
  uint64_t v7 = [UIScriptSwitcherButton alloc];
  uint64_t v8 = -[UIScriptSwitcherButton initWithFrame:](v7, "initWithFrame:", *MEMORY[0x1E4F1DB28], *(double *)(MEMORY[0x1E4F1DB28] + 8), *(double *)(MEMORY[0x1E4F1DB28] + 16), *(double *)(MEMORY[0x1E4F1DB28] + 24));
  [(UIScriptSwitcherButton *)v8 setIsLeading:a2];
  id v9 = [off_1E52D39B8 systemFontOfSize:17.0 weight:*(double *)off_1E52D6BF8];
  uint64_t v10 = +[UIImageSymbolConfiguration configurationWithFont:v9];

  if (a2)
  {
    [(UIScriptSwitcherButton *)v8 setLeftImage:v6];
    uint64_t v11 = +[UIImage systemImageNamed:@"chevron.compact.right" withConfiguration:v10];
    [(UIScriptSwitcherButton *)v8 setRightImage:v11];
  }
  else
  {
    uint64_t v12 = +[UIImage systemImageNamed:@"chevron.compact.left" withConfiguration:v10];
    [(UIScriptSwitcherButton *)v8 setLeftImage:v12];

    [(UIScriptSwitcherButton *)v8 setRightImage:v6];
  }
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  _DWORD v16[2] = ___GetButtonForInputMode_block_invoke;
  v16[3] = &unk_1E52DB038;
  id v17 = v3;
  id v13 = v3;
  long long v14 = +[UIAction actionWithHandler:v16];
  [(UIControl *)v8 addAction:v14 forControlEvents:64];

  return v8;
}

UIAlternativeCandidatesButton *_GetAlternativeCandidatesButton(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = [UIAlternativeCandidatesButton alloc];
  id v5 = -[UIAlternativeCandidatesButton initWithFrame:](v4, "initWithFrame:", *MEMORY[0x1E4F1DB28], *(double *)(MEMORY[0x1E4F1DB28] + 8), *(double *)(MEMORY[0x1E4F1DB28] + 16), *(double *)(MEMORY[0x1E4F1DB28] + 24));
  [(UIScriptSwitcherButton *)v5 setIsLeading:a2];
  [(UIControl *)v5 addAction:v3 forControlEvents:64];

  return v5;
}

void _runLoopObserverCallout(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2 == 128)
  {
    _popAutoreleasePool(a3);
  }
  else
  {
    if (a2 == 32)
    {
      _popAutoreleasePool(a3);
    }
    else if (a2 != 1)
    {
      return;
    }
    _pushAutoreleasePool(a3);
  }
}

uint64_t _popAutoreleasePool(void *a1)
{
  uint64_t result = [a1 count];
  if (result)
  {
    uint64_t v3 = result - 1;
    while (1)
    {
      id v4 = (id)objc_msgSend((id)objc_msgSend(a1, "objectAtIndexedSubscript:", v3), "object");
      if (v4) {
        break;
      }
      uint64_t result = [a1 removeObjectAtIndex:v3--];
      if (v3 == -1) {
        return result;
      }
    }
    id v5 = v4;
    MEMORY[0x18C106620]([v4 mark]);

    return [a1 removeObjectAtIndex:v3];
  }
  return result;
}

_UIBoxedAutoreleasePoolMark *_pushAutoreleasePool(void *a1)
{
  id v2 = [[_UIBoxedAutoreleasePoolMark alloc] initWithAutoreleasePoolMark:MEMORY[0x18C106640](0)];
  uint64_t v3 = [[_UIWeakReference alloc] initWithObject:v2];
  [a1 addObject:v3];

  return v2;
}

void sub_1860407D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186040B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186040C9C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_186040E84(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_186040FF8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_186041190(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_186041450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186042648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186042970(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

_UIPortalView *_UIFrozenPortalWithSource(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  id v5 = -[_UIPortalView initWithFrame:]([_UIPortalView alloc], "initWithFrame:", 0.0, 0.0, 1.0, 1.0);
  [(_UIPortalView *)v5 setName:v3];

  uint64_t v6 = [v4 sourceContextID];
  uint64_t v7 = [(_UIPortalView *)v5 portalLayer];
  [v7 setSourceContextId:v6];

  uint64_t v8 = [v4 sourceLayerRenderID];
  id v9 = [(_UIPortalView *)v5 portalLayer];
  [v9 setSourceLayerRenderId:v8];

  [(_UIPortalView *)v5 _setGeometryFrozen:1];
  [(UIView *)v5 setUserInteractionEnabled:0];
  [(_UIPortalView *)v5 setMatchesAlpha:1];
  [(_UIPortalView *)v5 setHidesSourceView:1];
  [(_UIPortalView *)v5 setMatchesTransform:1];
  [(_UIPortalView *)v5 setMatchesPosition:1];
  return v5;
}

double _UIPointerShapeOffsetFromModelPosition(void *a1, void *a2, double a3, double a4)
{
  id v7 = a2;
  id v8 = a1;
  id v9 = [v7 referenceView];
  objc_msgSend(v8, "convertPoint:toView:", v9, a3, a4);
  double v11 = v10;

  [v7 rect];
  double v13 = v12;
  double v15 = v14;

  return v11 - (v13 + v15 * 0.5);
}

void sub_186044248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

__CFString *NSStringFromUISceneAppearanceStyle(unint64_t a1)
{
  if (a1 >= 3)
  {
    objc_msgSend(NSString, "stringWithFormat:", @"unknown (%li)", a1);
    uint64_t v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v1 = off_1E52EFA58[a1];
  }
  return v1;
}

__CFString *UIApplicationSceneClientSettingKeyDescription(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0x30) {
    return 0;
  }
  else {
    return off_1E52EFB30[a1 - 1];
  }
}

__CFString *UIApplicationSceneClientSettingValueDescription(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = v4;
  uint64_t v6 = 0;
  switch(a1)
  {
    case 1:
    case 5:
      id v8 = UIApplication;
      goto LABEL_14;
    case 2:
    case 6:
    case 10:
    case 11:
    case 14:
    case 21:
    case 25:
    case 27:
    case 28:
    case 33:
    case 45:
    case 48:
    case 49:
      BSSettingFlagIsYes();
      uint64_t v7 = NSStringFromBOOL();
      goto LABEL_19;
    case 9:
      uint64_t v7 = UIApplicationSceneStringForCompatibilityMode([v4 integerValue]);
      goto LABEL_19;
    case 12:
      [v4 integerValue];
      uint64_t v7 = BSInterfaceOrientationDescription();
      goto LABEL_19;
    case 13:
    case 43:
      [v4 unsignedIntegerValue];
      uint64_t v7 = BSInterfaceOrientationMaskDescription();
      goto LABEL_19;
    case 15:
      uint64_t v7 = UIApplicationSceneProximityDetectionModesDescription([v4 unsignedIntegerValue]);
      goto LABEL_19;
    case 16:
    case 26:
    case 30:
    case 31:
    case 32:
    case 34:
    case 36:
    case 38:
    case 40:
    case 42:
    case 46:
      uint64_t v7 = [v4 description];
      goto LABEL_19;
    case 17:
    case 18:
      uint64_t v7 = _UIScreenEdgeSystemGestureModeDescription([v4 integerValue]);
      goto LABEL_19;
    case 20:
      uint64_t v7 = +[UIApplication _stringForBackgroundStyle:](UIApplication, "_stringForBackgroundStyle:", [v4 integerValue]);
      goto LABEL_19;
    case 22:
      uint64_t v7 = _UIStringFromWhitePointAdaptivityStyle([v4 integerValue]);
      goto LABEL_19;
    case 29:
      uint64_t v7 = UIApplicationSceneStringForUserInterfaceStyle([v4 integerValue]);
      goto LABEL_19;
    case 35:
      id v8 = _UIStatusBar;
LABEL_14:
      uint64_t v7 = -[__objc2_class stringForStatusBarStyle:](v8, "stringForStatusBarStyle:", [v4 integerValue]);
      goto LABEL_19;
    case 37:
      uint64_t v6 = @"(redacted)";
      break;
    case 39:
      uint64_t v7 = _UISceneStringFromActivationBias([v4 integerValue]);
      goto LABEL_19;
    case 41:
      uint64_t v7 = _NSStringFromUIPointerLockStatus([v4 integerValue]);
      goto LABEL_19;
    case 47:
      uint64_t v7 = _UIPhysicalButtonSuccinctConfigurationsDescriptionForSet(v4);
LABEL_19:
      uint64_t v6 = (__CFString *)v7;
      break;
    default:
      break;
  }

  return v6;
}

uint64_t UIApplicationSceneClientSettingAppendCustomDescription(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1 == 42)
  {
    objc_initWeak(&location, v5);
    id v12 = v6;
    double v13 = [v5 activeMultilinePrefix];
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    _DWORD v16[2] = __UIApplicationSceneClientSettingAppendCustomDescription_block_invoke_3;
    v16[3] = &unk_1E52D9960;
    id v9 = &v18;
    objc_copyWeak(&v18, &location);
    id v10 = v12;
    id v17 = v10;
    [v5 appendBodySectionWithName:@"multitaskingDragExclusionRects" multilinePrefix:v13 block:v16];

    double v11 = v17;
  }
  else
  {
    if (a1 != 34)
    {
      uint64_t v14 = 0;
      goto LABEL_7;
    }
    objc_initWeak(&location, v5);
    id v7 = v6;
    id v8 = [v5 activeMultilinePrefix];
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 3221225472;
    v19[2] = __UIApplicationSceneClientSettingAppendCustomDescription_block_invoke;
    _OWORD v19[3] = &unk_1E52D9960;
    id v9 = &v21;
    objc_copyWeak(&v21, &location);
    id v10 = v7;
    id v20 = v10;
    [v5 appendBodySectionWithName:@"statusBarPartStyles" multilinePrefix:v8 block:v19];

    double v11 = v20;
  }

  objc_destroyWeak(v9);
  objc_destroyWeak(&location);
  uint64_t v14 = 1;
LABEL_7:

  return v14;
}

void sub_186047AB0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void __UIApplicationSceneClientSettingAppendCustomDescription_block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = *(void **)(a1 + 32);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __UIApplicationSceneClientSettingAppendCustomDescription_block_invoke_2;
  v5[3] = &unk_1E52EFB10;
  id v6 = WeakRetained;
  id v4 = WeakRetained;
  [v3 enumerateKeysAndObjectsUsingBlock:v5];
}

void __UIApplicationSceneClientSettingAppendCustomDescription_block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v10 = a3;
  id v5 = a2;
  id v6 = +[_UIStatusBar stringForStatusBarStyle:](_UIStatusBar, "stringForStatusBarStyle:", [v10 integerValue]);
  id v7 = v6;
  if (v6)
  {
    id v8 = v6;
  }
  else
  {
    id v8 = [v10 stringValue];
  }
  id v9 = v8;

  [*(id *)(a1 + 32) appendString:v9 withName:v5 skipIfEmpty:1];
}

void __UIApplicationSceneClientSettingAppendCustomDescription_block_invoke_3(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v3 = *(id *)(a1 + 32);
  uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = objc_msgSend(*(id *)(*((void *)&v10 + 1) + 8 * v7), "description", (void)v10);
        id v9 = (id)[WeakRetained appendObject:v8 withName:0];

        ++v7;
      }
      while (v5 != v7);
      uint64_t v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v5);
  }
}

__CFString *UIApplicationSceneStringForApplicationStatusBarPart(uint64_t a1)
{
  uint64_t result = @"(none)";
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = @"leading";
      break;
    case 2:
      uint64_t result = @"trailing";
      break;
    case 3:
      goto LABEL_5;
    case 4:
      uint64_t result = @"center";
      break;
    default:
      if (a1 == 0xFFFF) {
        uint64_t result = @"(all)";
      }
      else {
LABEL_5:
      }
        uint64_t result = @"(other)";
      break;
  }
  return result;
}

__CFString *UIApplicationSceneStringForInterfaceOrientationMode(uint64_t a1)
{
  uint64_t v1 = @"alwaysAll";
  uint64_t v2 = @"legacy";
  if (a1 != 100) {
    uint64_t v2 = 0;
  }
  if (a1 != 2) {
    uint64_t v1 = v2;
  }
  id v3 = @"unknown";
  uint64_t v4 = @"dynamic";
  if (a1 != 1) {
    uint64_t v4 = 0;
  }
  if (a1) {
    id v3 = v4;
  }
  if (a1 <= 1) {
    return v3;
  }
  else {
    return v1;
  }
}

__CFString *UIApplicationSceneSettingKeyDescription(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0x2C) {
    return 0;
  }
  else {
    return off_1E52EFCE0[a1 - 1];
  }
}

__CFString *UIApplicationSceneSettingValueDescription(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a3;
  uint64_t v5 = v4;
  uint64_t v6 = 0;
  switch(a1)
  {
    case 1:
    case 6:
    case 7:
    case 37:
    case 42:
      BSSettingFlagIsYes();
      uint64_t v9 = NSStringFromBOOL();
      goto LABEL_5;
    case 2:
      uint64_t v9 = +[UIApplication stringForStatusBarStyleOverrides:](UIApplication, "stringForStatusBarStyleOverrides:", [v4 integerValue]);
      goto LABEL_5;
    case 3:
      long long v11 = UIApplicationSceneDeactivationReasonMaskDescriptionComponents([v4 unsignedIntegerValue]);
      uint64_t v12 = [v11 componentsJoinedByString:@", "];
      goto LABEL_34;
    case 4:
      objc_msgSend(NSString, "stringWithFormat:", @"%ld", objc_msgSend(v4, "integerValue"));
      goto LABEL_3;
    case 10:
      uint64_t v9 = UIApplicationSceneStringForUserInterfaceStyle([v4 integerValue]);
      goto LABEL_5;
    case 13:
      [v4 integerValue];
      uint64_t v9 = BSDeviceOrientationDescription();
      goto LABEL_5;
    case 19:
      uint64_t v13 = [v4 integerValue];
      uint64_t v6 = @"(none)";
      switch(v13)
      {
        case 0:
          goto LABEL_6;
        case 1:
          uint64_t v6 = @"leading";
          break;
        case 2:
          uint64_t v6 = @"trailing";
          break;
        case 3:
          goto LABEL_41;
        case 4:
          uint64_t v6 = @"center";
          break;
        default:
          if (v13 == 0xFFFF) {
            uint64_t v6 = @"(all)";
          }
          else {
LABEL_41:
          }
            uint64_t v6 = @"(other)";
          break;
      }
      break;
    case 20:
      [v4 CGRectValue];
      uint64_t v9 = NSStringFromCGRect(v22);
      goto LABEL_5;
    case 21:
      objc_msgSend(NSString, "stringWithFormat:", @"%lu", objc_msgSend(v4, "unsignedIntegerValue"));
      goto LABEL_3;
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 43:
      uint64_t v7 = NSString;
      [v4 doubleValue];
      [v7 stringWithFormat:@"%.2f", v8];
      goto LABEL_3;
    case 30:
      objc_msgSend(NSString, "stringWithFormat:", @"%x", objc_msgSend(v4, "unsignedIntegerValue"));
      goto LABEL_3;
    case 31:
      objc_msgSend(NSString, "stringWithFormat:", @"%lx", objc_msgSend(v4, "unsignedIntegerValue"));
      uint64_t v9 = LABEL_3:;
      goto LABEL_5;
    case 33:
      uint64_t v9 = _NSStringFromUIPointerLockStatus([v4 integerValue]);
      goto LABEL_5;
    case 35:
      uint64_t v14 = [v4 unsignedIntegerValue];
      uint64_t v15 = @"alwaysAll";
      uint64_t v16 = @"legacy";
      if (v14 != 100) {
        uint64_t v16 = 0;
      }
      if (v14 != 2) {
        uint64_t v15 = v16;
      }
      id v17 = @"unknown";
      id v18 = @"dynamic";
      if (v14 != 1) {
        id v18 = 0;
      }
      if (v14) {
        id v17 = v18;
      }
      if (v14 <= 1) {
        uint64_t v6 = v17;
      }
      else {
        uint64_t v6 = v15;
      }
      break;
    case 36:
      long long v11 = -[_UIEventDeferringEnvironmentsContainer environments](v4);
      uint64_t v12 = _UIEventDeferringEnvironmentsContainerSetDescription(v11);
LABEL_34:
      uint64_t v6 = (__CFString *)v12;

      break;
    case 38:
      unint64_t v19 = (objc_class *)objc_opt_class();
      uint64_t v9 = NSStringFromClass(v19);
      goto LABEL_5;
    case 39:
      uint64_t v20 = [v4 unsignedIntegerValue];
      if ((unint64_t)(v20 - 1) > 2) {
        uint64_t v6 = @"notSupported";
      }
      else {
        uint64_t v6 = off_1E52EFE48[v20 - 1];
      }
      break;
    case 44:
      [v4 unsignedIntegerValue];
      uint64_t v9 = _UISStringForSystemReferenceAngleMode();
LABEL_5:
      uint64_t v6 = (__CFString *)v9;
      break;
    default:
      break;
  }
LABEL_6:

  return v6;
}

void __rip_break_invalid_began__(void *a1, void *a2, void *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  uint64_t v8 = *(NSObject **)(__UILogGetCategoryCachedImpl("ResponderIntegrityProtection", &__rip_break_invalid_began_____s_category)+ 8);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v9 = v8;
    long long v10 = [v5 diffToRecord:v6 press:v7];
    int v11 = 138412802;
    id v12 = v7;
    __int16 v13 = 2112;
    uint64_t v14 = v10;
    __int16 v15 = 2080;
    uint64_t v16 = "__rip_break_invalid_began__";
    _os_log_impl(&dword_1853B0000, v9, OS_LOG_TYPE_ERROR, "Received presses began for a press that's already being tracked: %@\n%@\nSet a breakpoint in %s to debug this issue.", (uint8_t *)&v11, 0x20u);
  }
}

void __rip_break_invalid_ended__(void *a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = *(NSObject **)(__UILogGetCategoryCachedImpl("ResponderIntegrityProtection", &__rip_break_invalid_ended_____s_category)+ 8);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    int v3 = 138412546;
    id v4 = v1;
    __int16 v5 = 2080;
    id v6 = "__rip_break_invalid_ended__";
    _os_log_impl(&dword_1853B0000, v2, OS_LOG_TYPE_ERROR, "Received presses ended for a press that isn't tracked: %@\nSet a breakpoint in %s to debug this issue.", (uint8_t *)&v3, 0x16u);
  }
}

void __appendDescription(void *a1, void *a2, void *a3, int a4)
{
  id v18 = a1;
  id v7 = a3;
  if (a4 <= 0) {
    unsigned int v8 = 45;
  }
  else {
    unsigned int v8 = 43;
  }
  if (a4) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 62;
  }
  id v10 = a2;
  id v11 = [v7 responder];

  if (v11 != v10)
  {
    id v12 = [v7 responder];
    if (v12)
    {
      __int16 v13 = NSString;
      uint64_t v14 = (objc_class *)objc_opt_class();
      __int16 v15 = NSStringFromClass(v14);
      uint64_t v16 = [v13 stringWithFormat:@"<%@: %p>", v15, v12];
    }
    else
    {
      uint64_t v16 = @"(nil)";
    }
    [v18 appendFormat:@"%c%c %@\n", v9, v9, v16];
  }
  uint64_t v17 = NSStringFromClass((Class)[v7 clazz]);
  [v18 appendFormat:@"  %c %@\n", v9, v17];
}

void _rip_inject_method(objc_class *a1, const char *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = ___rip_inject_method_block_invoke;
  v13[3] = &__block_descriptor_48_e14_v32__0_8_16_24lu32l8;
  void v13[4] = a1;
  v13[5] = a2;
  id v4 = _Block_copy(v13);
  __int16 v5 = imp_implementationWithBlock(v4);

  if (!class_addMethod(a1, a2, v5, "v@:@@"))
  {
    InstanceMethod = class_getInstanceMethod(a1, a2);
    id v7 = method_setImplementation(InstanceMethod, v5);
    unsigned int v8 = _rip_originalSelectorForSelector(a2, a1);
    if (!class_addMethod(a1, v8, v7, "v@:@@"))
    {
      uint64_t v9 = *(NSObject **)(__UILogGetCategoryCachedImpl("ResponderIntegrityProtection", &_rip_inject_method___s_category)
                        + 8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        id v10 = v9;
        id v11 = NSStringFromClass(a1);
        id v12 = NSStringFromSelector(a2);
        *(_DWORD *)buf = 138412546;
        __int16 v15 = v11;
        __int16 v16 = 2112;
        uint64_t v17 = v12;
        _os_log_impl(&dword_1853B0000, v10, OS_LOG_TYPE_ERROR, "Unable to add original method implementation for class %@ and selector %@. This will likely crash at runtime.", buf, 0x16u);
      }
    }
  }
}

void ___rip_inject_method_block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v11 = *(objc_class **)(a1 + 32);
  id v10 = *(char **)(a1 + 40);
  id v12 = v7;
  id v13 = v8;
  id v14 = v9;
  if (sel_pressesBegan_withEvent_ == v10)
  {
    uint64_t v15 = 0;
  }
  else if (sel_pressesChanged_withEvent_ == v10)
  {
    uint64_t v15 = 1;
  }
  else if (sel_pressesEnded_withEvent_ == v10)
  {
    uint64_t v15 = 3;
  }
  else if (sel_pressesCancelled_withEvent_ == v10)
  {
    uint64_t v15 = 4;
  }
  else
  {
    uint64_t v15 = 2;
  }
  __int16 v16 = +[_UIResponderIntegrityProtection rip];
  [v16 responder:v12 class:v11 receivedPresses:v13 inPhase:v15 withEvent:v14];

  uint64_t v17 = _rip_originalSelectorForSelector(v10, v11);
  if (class_respondsToSelector(v11, v17))
  {
    MethodImplementatiouint64_t n = class_getMethodImplementation(v11, v17);
    ((void (*)(id, char *, id, id))MethodImplementation)(v12, v10, v13, v14);
  }
  else if ((objc_class *)objc_opt_class() != v11)
  {
    v19.receiver = v12;
    v19.super_class = class_getSuperclass(v11);
    objc_msgSendSuper(&v19, v10, v13, v14);
  }
}

SEL _rip_originalSelectorForSelector(const char *a1, Class cls)
{
  int v3 = NSString;
  Name = class_getName(cls);
  objc_msgSend(v3, "stringWithFormat:", @"_original_%s_%s", Name, sel_getName(a1));
  __int16 v5 = (NSString *)objc_claimAutoreleasedReturnValue();
  SEL v6 = NSSelectorFromString(v5);

  return v6;
}

uint64_t UIApplicationSceneCompatibilityModeForString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"none"])
  {
    uint64_t v2 = 0;
  }
  else if ([v1 isEqualToString:@"scaledZoomedOut"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"scaledZoomedIn"])
  {
    uint64_t v2 = 2;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

__CFString *UIApplicationSceneProximityDetectionModesDescription(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    objc_msgSend(MEMORY[0x1E4F28E78], "stringWithString:", @"(");
    uint64_t v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
    int v3 = v2;
    if (v1)
    {
      [(__CFString *)v2 appendString:@" off"];
      v1 &= ~1uLL;
      if ((v1 & 2) == 0)
      {
LABEL_4:
        if ((v1 & 4) == 0) {
          goto LABEL_5;
        }
        goto LABEL_15;
      }
    }
    else if ((v1 & 2) == 0)
    {
      goto LABEL_4;
    }
    [(__CFString *)v3 appendString:@" wantsEvents"];
    v1 &= ~2uLL;
    if ((v1 & 4) == 0)
    {
LABEL_5:
      if ((v1 & 8) == 0) {
        goto LABEL_6;
      }
      goto LABEL_16;
    }
LABEL_15:
    [(__CFString *)v3 appendString:@" expectsInPortrait"];
    v1 &= ~4uLL;
    if ((v1 & 8) == 0)
    {
LABEL_6:
      if (!v1)
      {
LABEL_8:
        [(__CFString *)v3 appendString:@""]);
        goto LABEL_10;
      }
LABEL_7:
      [(__CFString *)v3 appendFormat:@" %li", v1];
      goto LABEL_8;
    }
LABEL_16:
    [(__CFString *)v3 appendString:@" expectsInLandscape"];
    v1 &= ~8uLL;
    if (!v1) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  int v3 = @"none";
LABEL_10:
  return v3;
}

uint64_t UIApplicationSceneClassicModeForString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"none"])
  {
    uint64_t v2 = 0;
  }
  else if ([v1 isEqualToString:@"phone"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"4\" phone"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"4.7\" phone"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"5.5\" phone"])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:@"5.8\" rounded phone"])
  {
    uint64_t v2 = 5;
  }
  else if ([v1 isEqualToString:@"6.5\" rounded phone"])
  {
    uint64_t v2 = 6;
  }
  else if ([v1 isEqualToString:@"pad"])
  {
    uint64_t v2 = 7;
  }
  else if ([v1 isEqualToString:@"10.5\" pad"])
  {
    uint64_t v2 = 8;
  }
  else if ([v1 isEqualToString:@"12.9\" pad"])
  {
    uint64_t v2 = 9;
  }
  else if ([v1 isEqualToString:@"11\" rounded pad"])
  {
    uint64_t v2 = 10;
  }
  else if ([v1 isEqualToString:@"originalTV"])
  {
    uint64_t v2 = 100;
  }
  else
  {
    uint64_t v2 = -1;
  }

  return v2;
}

BOOL UIApplicationSceneClassicModeRepresentsPad(uint64_t a1)
{
  return (unint64_t)(a1 + 1) >= 8 && a1 != 100;
}

BOOL UIApplicationSceneClassicModeRepresentsPhone(uint64_t a1)
{
  return ((unint64_t)(a1 + 1) > 0xB || ((1 << (a1 + 1)) & 0xF03) == 0) && a1 != 100;
}

BOOL UIApplicationSceneClassicModeExpectsRoundedCorners(uint64_t a1)
{
  return ((unint64_t)(a1 + 1) > 0xA || ((1 << (a1 + 1)) & 0x73D) == 0) && a1 != 100;
}

__CFString *UIApplicationSceneStringForUserInterfaceStyle(unint64_t a1)
{
  if (a1 > 2) {
    return 0;
  }
  else {
    return off_1E52F0108[a1];
  }
}

BOOL UIApplicationSceneDeactivationReasonIsValid(unint64_t a1)
{
  return a1 < 0x13 || a1 == 30;
}

uint64_t UIApplicationSceneDeactivationReasonMaskForReason(char a1)
{
  return 1 << a1;
}

unint64_t UIApplicationSceneDeactivationReasonMaskLessKeyboardSuppression(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFFEFFLL;
}

__CFString *_UIApplicationSceneLifecycleActionTypeDescription(unint64_t a1)
{
  if (a1 >= 5)
  {
    objc_msgSend(NSString, "stringWithFormat:", @"(%lu)", a1);
    id v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v1 = off_1E52F0280[a1];
  }
  return v1;
}

__CFString *_UIStatusBarAnimationTypeDescription(uint64_t a1)
{
  id v1 = @"none";
  if (a1 == 1) {
    id v1 = @"fade";
  }
  if (a1 == 2) {
    return @"slide";
  }
  else {
    return v1;
  }
}

void sub_18605264C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186053190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1860534D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186054428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186054944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_186054EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186056724(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 104));
  _Unwind_Resume(a1);
}

id _forceUnwrappedScene(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (os_variant_has_internal_diagnostics())
  {
    if (!WeakRetained)
    {
      int v3 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1853B0000, v3, OS_LOG_TYPE_FAULT, "Scene component is not attached to a scene.", buf, 2u);
      }
    }
  }
  else if (!WeakRetained)
  {
    id v4 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_forceUnwrappedScene___s_category) + 8);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int16 v5 = 0;
      _os_log_impl(&dword_1853B0000, v4, OS_LOG_TYPE_ERROR, "Scene component is not attached to a scene.", v5, 2u);
    }
  }
  return WeakRetained;
}

void sub_186058EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id __viewOrWindowFallbackForRTLProbing(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = _UIFocusEnvironmentContainingView(a2);
  __int16 v5 = v4;
  if (v4)
  {
    id v6 = v4;
  }
  else
  {
    id v7 = [v3 _windowScene];
    uint64_t v8 = [v7 windows];
    id v6 = [v8 firstObject];
  }
  return v6;
}

id UIITunesStoreResolvedURLForHTTPURL(void *a1)
{
  id v1 = [a1 iTunesStoreURL];
  if (v1 && ([(id)UIApp canOpenURL:v1] & 1) == 0)
  {

    id v1 = 0;
  }
  return v1;
}

id ArrowBezierPath(uint64_t a1, double a2, double a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, double a8, double a9)
{
  uint64_t v17 = +[UIBezierPath bezierPath];
  if ((unint64_t)(a1 - 1) > 1)
  {
    v50.origin.CGFloat x = a4;
    v50.origin.CGFloat y = a5;
    v50.size.CGFloat width = a6;
    v50.size.CGFloat height = a7;
    CGFloat Height = CGRectGetHeight(v50);
    double v23 = atan2(Height * 0.5, 18.0);
    __double2 v24 = __sincos_stret(v23);
    double v44 = v24.__cosval * a8;
    double v25 = (1.0 - sin(v23 * 0.5)) * a8;
    if (a1 == 4)
    {
      double v43 = v23;
      double v35 = v25;
      v67.origin.CGFloat x = a4;
      v67.origin.CGFloat y = a5;
      v67.size.CGFloat width = a6;
      v67.size.CGFloat height = a7;
      double MaxX = CGRectGetMaxX(v67);
      v68.origin.CGFloat x = a4;
      v68.origin.CGFloat y = a5;
      v68.size.CGFloat width = a6;
      v68.size.CGFloat height = a7;
      objc_msgSend(v17, "moveToPoint:", MaxX, CGRectGetMinY(v68));
      v69.origin.CGFloat x = a4;
      v69.origin.CGFloat y = a5;
      v69.size.CGFloat width = a6;
      v69.size.CGFloat height = a7;
      double v37 = v35 + CGRectGetMaxX(v69);
      v70.origin.CGFloat x = a4;
      v70.origin.CGFloat y = a5;
      v70.size.CGFloat width = a6;
      v70.size.CGFloat height = a7;
      objc_msgSend(v17, "addLineToPoint:", v37, CGRectGetMinY(v70));
      v71.origin.CGFloat x = a4;
      v71.origin.CGFloat y = a5;
      v71.size.CGFloat width = a6;
      v71.size.CGFloat height = a7;
      double v38 = v35 + CGRectGetMaxX(v71);
      v72.origin.CGFloat x = a4;
      v72.origin.CGFloat y = a5;
      v72.size.CGFloat width = a6;
      v72.size.CGFloat height = a7;
      objc_msgSend(v17, "addArcWithCenter:radius:startAngle:endAngle:clockwise:", 1, v38, CGRectGetMinY(v72) + a8, a8, 4.71238898, v43 + 4.71238898);
      v73.origin.CGFloat x = a4;
      v73.origin.CGFloat y = a5;
      v73.size.CGFloat width = a6;
      v73.size.CGFloat height = a7;
      CGFloat v39 = CGRectGetMaxX(v73) + 18.0 + a8;
      v74.origin.CGFloat x = a4;
      v74.origin.CGFloat y = a5;
      v74.size.CGFloat width = a6;
      v74.size.CGFloat height = a7;
      objc_msgSend(v17, "addLineToPoint:", v39, CGRectGetMidY(v74));
      v75.origin.CGFloat x = a4;
      v75.origin.CGFloat y = a5;
      v75.size.CGFloat width = a6;
      v75.size.CGFloat height = a7;
      double v40 = v24.__sinval * a8 + v35 + CGRectGetMaxX(v75);
      v76.origin.CGFloat x = a4;
      v76.origin.CGFloat y = a5;
      v76.size.CGFloat width = a6;
      v76.size.CGFloat height = a7;
      objc_msgSend(v17, "addLineToPoint:", v40, v44 + CGRectGetMaxY(v76) - a8);
      v77.origin.CGFloat x = a4;
      v77.origin.CGFloat y = a5;
      v77.size.CGFloat width = a6;
      v77.size.CGFloat height = a7;
      double v41 = v35 + CGRectGetMaxX(v77);
      v78.origin.CGFloat x = a4;
      v78.origin.CGFloat y = a5;
      v78.size.CGFloat width = a6;
      v78.size.CGFloat height = a7;
      [v17 addArcWithCenter:1 radius:v41 startAngle:CGRectGetMaxY(v78) - a8 endAngle:a8 clockwise:1.57079633 - v43];
      v79.origin.CGFloat x = a4;
      v79.origin.CGFloat y = a5;
      v79.size.CGFloat width = a6;
      v79.size.CGFloat height = a7;
      double v33 = CGRectGetMaxX(v79);
    }
    else
    {
      double v43 = v24.__sinval * a8;
      if (a1 != 3) {
        goto LABEL_17;
      }
      double v26 = v25;
      v51.origin.CGFloat x = a4;
      v51.origin.CGFloat y = a5;
      v51.size.CGFloat width = a6;
      v51.size.CGFloat height = a7;
      double MinX = CGRectGetMinX(v51);
      v52.origin.CGFloat x = a4;
      v52.origin.CGFloat y = a5;
      v52.size.CGFloat width = a6;
      v52.size.CGFloat height = a7;
      objc_msgSend(v17, "moveToPoint:", MinX, CGRectGetMinY(v52));
      v53.origin.CGFloat x = a4;
      v53.origin.CGFloat y = a5;
      v53.size.CGFloat width = a6;
      v53.size.CGFloat height = a7;
      CGFloat v28 = CGRectGetMinX(v53) - v26;
      v54.origin.CGFloat x = a4;
      v54.origin.CGFloat y = a5;
      v54.size.CGFloat width = a6;
      v54.size.CGFloat height = a7;
      objc_msgSend(v17, "addLineToPoint:", v28, CGRectGetMinY(v54));
      v55.origin.CGFloat x = a4;
      v55.origin.CGFloat y = a5;
      v55.size.CGFloat width = a6;
      v55.size.CGFloat height = a7;
      CGFloat v29 = CGRectGetMinX(v55) - v26;
      v56.origin.CGFloat x = a4;
      v56.origin.CGFloat y = a5;
      v56.size.CGFloat width = a6;
      v56.size.CGFloat height = a7;
      objc_msgSend(v17, "addArcWithCenter:radius:startAngle:endAngle:clockwise:", 0, v29, CGRectGetMinY(v56) + a8, a8, 4.71238898, 4.71238898 - v23);
      v57.origin.CGFloat x = a4;
      v57.origin.CGFloat y = a5;
      v57.size.CGFloat width = a6;
      v57.size.CGFloat height = a7;
      CGFloat v30 = CGRectGetMinX(v57) + -18.0 - a8;
      v58.origin.CGFloat x = a4;
      v58.origin.CGFloat y = a5;
      v58.size.CGFloat width = a6;
      v58.size.CGFloat height = a7;
      objc_msgSend(v17, "addLineToPoint:", v30, CGRectGetMidY(v58));
      v59.origin.CGFloat x = a4;
      v59.origin.CGFloat y = a5;
      v59.size.CGFloat width = a6;
      v59.size.CGFloat height = a7;
      CGFloat v31 = CGRectGetMinX(v59) - v26 - v43;
      v60.origin.CGFloat x = a4;
      v60.origin.CGFloat y = a5;
      v60.size.CGFloat width = a6;
      v60.size.CGFloat height = a7;
      objc_msgSend(v17, "addLineToPoint:", v31, v44 + CGRectGetMaxY(v60) - a8);
      v61.origin.CGFloat x = a4;
      v61.origin.CGFloat y = a5;
      v61.size.CGFloat width = a6;
      v61.size.CGFloat height = a7;
      CGFloat v32 = CGRectGetMinX(v61) - v26;
      v62.origin.CGFloat x = a4;
      v62.origin.CGFloat y = a5;
      v62.size.CGFloat width = a6;
      v62.size.CGFloat height = a7;
      [v17 addArcWithCenter:0 radius:v32 startAngle:CGRectGetMaxY(v62) - a8 endAngle:a8 clockwise:v23 + 1.57079633];
      v63.origin.CGFloat x = a4;
      v63.origin.CGFloat y = a5;
      v63.size.CGFloat width = a6;
      v63.size.CGFloat height = a7;
      double v33 = CGRectGetMinX(v63);
    }
    double v21 = v33;
    goto LABEL_15;
  }
  double v18 = 0.5 / a9;
  v46.origin.CGFloat x = a4;
  v46.origin.CGFloat y = a5;
  v46.size.CGFloat width = a6;
  v46.size.CGFloat height = a7;
  double v19 = CGRectGetMinX(v46) + 9.0 + a8 + 1.0;
  if (a2 < v19) {
    a2 = v19;
  }
  v47.origin.CGFloat x = a4;
  v47.origin.CGFloat y = a5;
  v47.size.CGFloat width = a6;
  v47.size.CGFloat height = a7;
  double v20 = CGRectGetMaxX(v47) + -9.0 - a8 + -1.0;
  if (a2 >= v20) {
    a2 = v20;
  }
  if (a1 != 1)
  {
    if (a1 != 2) {
      goto LABEL_17;
    }
    v48.origin.CGFloat x = a4;
    v48.origin.CGFloat y = a5;
    v48.size.CGFloat width = a6;
    v48.size.CGFloat height = a7;
    objc_msgSend(v17, "moveToPoint:", a2 - v18, CGRectGetMaxY(v48) + 9.0);
    v49.origin.CGFloat x = a4;
    v49.origin.CGFloat y = a5;
    v49.size.CGFloat width = a6;
    v49.size.CGFloat height = a7;
    objc_msgSend(v17, "addLineToPoint:", a2 + -9.0 - v18, CGRectGetMaxY(v49));
    double v21 = a2 + 9.0 - v18;
LABEL_15:
    v80.origin.CGFloat x = a4;
    v80.origin.CGFloat y = a5;
    v80.size.CGFloat width = a6;
    v80.size.CGFloat height = a7;
    double MaxY = CGRectGetMaxY(v80);
    goto LABEL_16;
  }
  v64.origin.CGFloat x = a4;
  v64.origin.CGFloat y = a5;
  v64.size.CGFloat width = a6;
  v64.size.CGFloat height = a7;
  objc_msgSend(v17, "moveToPoint:", a2 - v18, CGRectGetMinY(v64) + -9.0);
  v65.origin.CGFloat x = a4;
  v65.origin.CGFloat y = a5;
  v65.size.CGFloat width = a6;
  v65.size.CGFloat height = a7;
  objc_msgSend(v17, "addLineToPoint:", a2 + -9.0 - v18, CGRectGetMinY(v65));
  double v21 = a2 + 9.0 - v18;
  v66.origin.CGFloat x = a4;
  v66.origin.CGFloat y = a5;
  v66.size.CGFloat width = a6;
  v66.size.CGFloat height = a7;
  double MaxY = CGRectGetMinY(v66);
LABEL_16:
  objc_msgSend(v17, "addLineToPoint:", v21, MaxY, *(void *)&v43);
LABEL_17:
  objc_msgSend(v17, "closePath", *(void *)&v43);
  return v17;
}

void sub_18605D588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186061920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

void sub_186064668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
}

uint64_t _indexOfButton(void *a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if ([v4[86] isHidden])
  {
    uint64_t v5 = 0;
  }
  else
  {
    if (v4[86] == v3)
    {
      uint64_t v5 = 0;
      goto LABEL_31;
    }
    uint64_t v5 = 1;
  }
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v6 = v4[83];
  uint64_t v7 = [v6 countByEnumeratingWithState:&v22 objects:v27 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v23;
    while (2)
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v23 != v9) {
          objc_enumerationMutation(v6);
        }
        id v11 = *(id *)(*((void *)&v22 + 1) + 8 * i);
        if (([v11 isHidden] & 1) == 0)
        {
          if (v11 == v3)
          {
LABEL_29:

            goto LABEL_31;
          }
          ++v5;
        }
      }
      uint64_t v8 = [v6 countByEnumeratingWithState:&v22 objects:v27 count:16];
      if (v8) {
        continue;
      }
      break;
    }
  }

  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v6 = v4[84];
  uint64_t v12 = [v6 countByEnumeratingWithState:&v18 objects:v26 count:16];
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = *(void *)v19;
    do
    {
      for (uint64_t j = 0; j != v13; ++j)
      {
        if (*(void *)v19 != v14) {
          objc_enumerationMutation(v6);
        }
        id v16 = *(id *)(*((void *)&v18 + 1) + 8 * j);
        if ((objc_msgSend(v16, "isHidden", (void)v18) & 1) == 0)
        {
          if (v16 == v3) {
            goto LABEL_29;
          }
          ++v5;
        }
      }
      uint64_t v13 = [v6 countByEnumeratingWithState:&v18 objects:v26 count:16];
    }
    while (v13);
  }

  if (([v4[85] isHidden] & 1) == 0 && v4[85] != v3) {
    ++v5;
  }
LABEL_31:

  return v5;
}

void _separatorsForIndex(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v7 = a1;
  id v8 = v7[100];
  if (v8)
  {
    uint64_t v13 = v7;
    if (a2 >= 1)
    {
      unint64_t v9 = [v8 count];
      uint64_t v7 = v13;
      if (v9 > a2 - 1)
      {
        id v10 = [v13[100] objectAtIndexedSubscript:a2 - 1];
        uint64_t v7 = v13;
        *a3 = v10;
      }
    }
    unint64_t v11 = [v7[100] count];
    uint64_t v7 = v13;
    if (v11 > a2)
    {
      id v12 = [v13[100] objectAtIndexedSubscript:a2];
      uint64_t v7 = v13;
      *a4 = v12;
    }
  }
}

id UICalloutBarAnimationContext(void *a1, uint64_t a2, uint64_t a3)
{
  _OWORD v12[3] = *MEMORY[0x1E4F143B8];
  v12[0] = a1;
  v11[0] = @"UICalloutBarInfoKeyAnimationID";
  v11[1] = @"UICalloutBarInfoKeyWillDidShowReplacements";
  uint64_t v5 = NSNumber;
  id v6 = a1;
  uint64_t v7 = [v5 numberWithBool:a2];
  v12[1] = v7;
  v11[2] = @"UICalloutBarInfoKeyDidPromptForReplacements";
  id v8 = [NSNumber numberWithBool:a3];
  _OWORD v12[2] = v8;
  unint64_t v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v12 forKeys:v11 count:3];

  return v9;
}

void sub_186067814(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

id getSTKImageGlyphDataSourceClass()
{
  uint64_t v3 = 0;
  id v4 = &v3;
  uint64_t v5 = 0x2050000000;
  os_log_t v0 = (void *)getSTKImageGlyphDataSourceClass_softClass;
  uint64_t v6 = getSTKImageGlyphDataSourceClass_softClass;
  if (!getSTKImageGlyphDataSourceClass_softClass)
  {
    StickerKitLibraryCore_0();
    v4[3] = (uint64_t)objc_getClass("STKImageGlyphDataSource");
    getSTKImageGlyphDataSourceClass_softClass = v4[3];
    os_log_t v0 = (void *)v4[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v3, 8);
  return v1;
}

void sub_18606808C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1860682A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18606A9F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

Class __getSTKImageGlyphDataSourceClass_block_invoke(uint64_t a1)
{
  StickerKitLibraryCore_0();
  Class result = objc_getClass("STKImageGlyphDataSource");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSTKImageGlyphDataSourceClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void StickerKitLibraryCore_0()
{
  if (!StickerKitLibraryCore_frameworkLibrary_0) {
    StickerKitLibraryCore_frameworkLibrary_0 = _sl_dlopen();
  }
}

uint64_t __StickerKitLibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  StickerKitLibraryCore_frameworkLibrary_0 = result;
  return result;
}

Class __getSTKStickerViewClass_block_invoke(uint64_t a1)
{
  StickerKitLibraryCore_0();
  Class result = objc_getClass("STKStickerView");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSTKStickerViewClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_18606B5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void UIApplicationEndBackgroundTaskError(uint64_t a1)
{
}

double _UIApplicationBackgroundTimeRemaining()
{
  uint64_t v4 = 0;
  uint64_t v5 = (double *)&v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v7 = 0;
  os_log_t v0 = +[_UIBackgroundTaskInfo backgroundTaskAssertionQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___UIApplicationBackgroundTimeRemaining_block_invoke;
  block[3] = &unk_1E52D9900;
  void block[4] = &v4;
  dispatch_sync(v0, block);

  if (v5[3] == INFINITY) {
    double v1 = 1.79769313e308;
  }
  else {
    double v1 = v5[3];
  }
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18606B714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _UIApplicationCallWhenBackgroundTaskCountReachesZero(void *a1)
{
  blocuint64_t k = a1;
  os_unfair_lock_lock(&stru_1EB2609F4);
  if ([(id)qword_1EB260A40 count])
  {
    double v1 = (void *)qword_1EB260A48;
    if (!qword_1EB260A48)
    {
      id v2 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
      uint64_t v3 = (void *)qword_1EB260A48;
      qword_1EB260A48 = (uint64_t)v2;

      double v1 = (void *)qword_1EB260A48;
    }
    uint64_t v4 = (void *)[block copy];
    [v1 addObject:v4];
  }
  else
  {
    dispatch_async(MEMORY[0x1E4F14428], block);
  }
  os_unfair_lock_unlock(&stru_1EB2609F4);
}

void ___fireBackgroundExpirationHandlers_block_invoke(uint64_t a1)
{
  id v2 = *(NSObject **)(__UILogGetCategoryCachedImpl("BackgroundTask", &qword_1EB260A98) + 8);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v8 = 0;
    _os_log_impl(&dword_1853B0000, v2, OS_LOG_TYPE_DEFAULT, "On backgroundTaskAssertionQueue, clearing shared assertion", v8, 2u);
  }
  uint64_t v3 = (void *)qword_1EB260A50;
  qword_1EB260A50 = 0;

  uint64_t v4 = [MEMORY[0x1E4F28EB8] defaultCenter];
  [v4 postNotificationName:@"UIApplicationBackgroundTaskWillExpireNotification" object:*(void *)(a1 + 32)];

  os_unfair_lock_lock(&stru_1EB2609F4);
  uint64_t v5 = [(id)qword_1EB260A40 copy];
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  os_unfair_lock_unlock(&stru_1EB2609F4);
}

void ___doAddBackgroundTask_block_invoke_111(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v2 = *(NSObject **)(__UILogGetCategoryCachedImpl("BackgroundTask", &qword_1EB260B10) + 8);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
    *(_DWORD *)buf = 134217984;
    uint64_t v7 = v3;
    _os_log_impl(&dword_1853B0000, v2, OS_LOG_TYPE_DEFAULT, "Calling expiration handler for non-acquired background assertion: task ID = %lu", buf, 0xCu);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___doAddBackgroundTask_block_invoke_112;
  block[3] = &unk_1E52D9F70;
  id v5 = *(id *)(a1 + 32);
  dispatch_async(MEMORY[0x1E4F14428], block);
  os_unfair_lock_lock(&stru_1EB2609F4);
  NSMapRemove((NSMapTable *)qword_1EB260A40, *(const void **)(*(void *)(a1 + 32) + 8));
  if (![(id)qword_1EB260A40 count]) {
    _fireBackgroundTaskCountReachedZeroHandlers_Locked();
  }
  os_unfair_lock_unlock(&stru_1EB2609F4);
}

uint64_t ___doAddBackgroundTask_block_invoke_112(uint64_t a1)
{
  return [*(id *)(a1 + 32) fireExpirationHandler];
}

void _backgroundTaskExpirationWarningTimerFired(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (os_variant_has_internal_diagnostics())
  {
    if (qword_1EB260AB8 != a1)
    {
      id v10 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315650;
        uint64_t v17 = "void _backgroundTaskExpirationWarningTimerFired(CFRunLoopTimerRef, void *)";
        __int16 v18 = 2112;
        uint64_t v19 = qword_1EB260AB8;
        __int16 v20 = 2112;
        uint64_t v21 = a1;
        _os_log_fault_impl(&dword_1853B0000, v10, OS_LOG_TYPE_FAULT, "%s called with unexpected timer (_backgroundTaskExpirationTimer = %@, thisTimer = %@)", buf, 0x20u);
      }
    }
  }
  else if (qword_1EB260AB8 != a1)
  {
    unint64_t v11 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB260B20) + 8);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      uint64_t v17 = "void _backgroundTaskExpirationWarningTimerFired(CFRunLoopTimerRef, void *)";
      __int16 v18 = 2112;
      uint64_t v19 = qword_1EB260AB8;
      __int16 v20 = 2112;
      uint64_t v21 = a1;
      _os_log_impl(&dword_1853B0000, v11, OS_LOG_TYPE_ERROR, "%s called with unexpected timer (_backgroundTaskExpirationTimer = %@, thisTimer = %@)", buf, 0x20u);
    }
  }
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  clock_gettime(_CLOCK_UPTIME_RAW_APPROX, &__tp);
  os_unfair_lock_lock(&stru_1EB2609F4);
  memset(&enumerator, 0, sizeof(enumerator));
  NSEnumerateMapTable(&enumerator, (NSMapTable *)qword_1EB260A40);
  value = 0;
  if (NSNextMapEnumeratorPair(&enumerator, 0, &value))
  {
    int v2 = 0;
    __darwin_time_t v3 = 0;
    do
    {
      if (!*((unsigned char *)value + 48))
      {
        uint64_t v4 = *((void *)value + 5);
        if (__tp.tv_sec - v4 < 34)
        {
          __darwin_time_t v8 = v4 - __tp.tv_sec + 35;
          int v9 = v2 ^ 1 | (v8 < v3);
          if ((v2 ^ 1) & 1 | (v8 < v3)) {
            __darwin_time_t v3 = v4 - __tp.tv_sec + 35;
          }
          v2 |= v9;
        }
        else
        {
          if (([@"com.apple.WebKit.ProcessAssertion" isEqualToString:*((void *)value + 4)] & 1) == 0)
          {
            id v5 = *(NSObject **)(__UILogGetCategoryCachedImpl("BackgroundTask", &qword_1EB260B28) + 8);
            if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
            {
              uint64_t v6 = (const char *)*((void *)value + 1);
              uint64_t v7 = *((void *)value + 4);
              *(_DWORD *)buf = 134218499;
              uint64_t v17 = v6;
              __int16 v18 = 2113;
              uint64_t v19 = v7;
              __int16 v20 = 2048;
              uint64_t v21 = 30;
              _os_log_impl(&dword_1853B0000, v5, OS_LOG_TYPE_ERROR, "Background Task %lu (\"%{private}@\"), was created over %lu seconds ago. In applications running in the background, this creates a risk of termination. Remember to call UIApplication.endBackgroundTask(_:) for your task in a timely manner to avoid this.", buf, 0x20u);
            }
          }
          *((unsigned char *)value + 48) = 1;
        }
      }
    }
    while (NSNextMapEnumeratorPair(&enumerator, 0, &value));
  }
  else
  {
    __darwin_time_t v3 = 0;
    LOBYTE(v2) = 0;
  }
  NSEndMapTableEnumeration(&enumerator);
  if (qword_1EB260AB8)
  {
    CFRelease((CFTypeRef)qword_1EB260AB8);
    qword_1EB260AB8 = 0;
  }
  if (v2) {
    _backgroundTaskExpirationWarningTimerSchedule_Locked(v3);
  }
  os_unfair_lock_unlock(&stru_1EB2609F4);
}

__CFString *_UICompositionSessionStateDescription(uint64_t a1)
{
  if ((unint64_t)(a1 + 1) > 3) {
    return @"Unknown";
  }
  else {
    return off_1E52F07D8[a1 + 1];
  }
}

void DrawCheckeredPattern(uint64_t a1, CGContext *a2)
{
  uint64_t v4 = +[UIColor colorWithCGColor:*(void *)a1];
  if (v4)
  {
    id v5 = (void *)v4;
    double v24 = 0.0;
    double v25 = 0.0;
    uint64_t v22 = 0;
    double v23 = 0.0;
LABEL_4:
    [v5 getRed:&v25 green:&v24 blue:&v23 alpha:&v22];
    double v6 = v25 + v24 + v23;
    goto LABEL_5;
  }
  id v5 = +[UIColor whiteColor];
  double v24 = 0.0;
  double v25 = 0.0;
  uint64_t v22 = 0;
  double v23 = 0.0;
  if (v5) {
    goto LABEL_4;
  }
  double v6 = 0.0;
LABEL_5:
  if (v6 / 3.0 <= 0.5)
  {
    uint64_t v7 = &qword_1EB25CE20;
    __darwin_time_t v8 = (void *)qword_1EB25CE20;
    if (!qword_1EB25CE20)
    {
      double v9 = 1.0;
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v7 = &_MergedGlobals_3_13;
    __darwin_time_t v8 = (void *)_MergedGlobals_3_13;
    if (!_MergedGlobals_3_13)
    {
      double v9 = 0.0;
LABEL_10:
      id v10 = [UIColor alloc];
      uint64_t v11 = -[UIColor initWithWhite:alpha:](v10, "initWithWhite:alpha:", v9, 0.2, v22);
      id v12 = (void *)*v7;
      *uint64_t v7 = v11;

      __darwin_time_t v8 = (void *)*v7;
    }
  }
  id v13 = v8;
  id v14 = v5;
  CGContextSetFillColorWithColor(a2, (CGColorRef)[v14 CGColor]);
  double v15 = *(double *)(a1 + 8);
  v26.size.CGFloat width = v15 * 96.0;
  double v16 = 0.0;
  v26.origin.CGFloat x = 0.0;
  v26.origin.CGFloat y = 0.0;
  v26.size.CGFloat height = v15 * 96.0;
  CGContextFillRect(a2, v26);
  id v17 = v13;
  CGContextSetFillColorWithColor(a2, (CGColorRef)[v17 CGColor]);
  unsigned int v18 = 0;
  do
  {
    unsigned int v19 = -2;
    double v20 = 0.0;
    do
    {
      v27.origin.CGFloat y = v15 * (v20 * 6.0);
      v27.origin.CGFloat x = v15 * (v16 * 6.0);
      v27.size.CGFloat width = v15 * 6.0;
      v27.size.CGFloat height = v15 * 6.0;
      CGContextFillRect(a2, v27);
      v28.origin.CGFloat y = v15 * ((double)(int)(v19 + 3) * 6.0);
      v28.origin.CGFloat x = v15 * ((double)(int)(v18 | 1) * 6.0);
      v28.size.CGFloat width = v15 * 6.0;
      v28.size.CGFloat height = v15 * 6.0;
      CGContextFillRect(a2, v28);
      double v20 = v20 + 2.0;
      v19 += 2;
    }
    while (v19 < 0xE);
    double v16 = v16 + 2.0;
    BOOL v21 = v18 >= 0xE;
    v18 += 2;
  }
  while (!v21);
}

void ReleasePatternInfo(CGColorRef *a1)
{
  CGColorRelease(*a1);
  free(a1);
}

void sub_186075214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1860783A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186078630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _UILocalizedFormat(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v10 = a3;
  id v11 = a1;
  id v12 = _UIKitBundle();
  id v13 = [v12 localizedStringForKey:v11 value:v10 table:@"Localizable"];

  id v14 = [NSString alloc];
  double v15 = [MEMORY[0x1E4F1CA20] currentLocale];
  double v16 = (void *)[v14 initWithFormat:v13 locale:v15 arguments:&a9];

  return v16;
}

id _UILocalizedStringWithLocale(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  double v6 = (void *)MEMORY[0x1E4F28B50];
  unsigned int v19 = a4;
  uint64_t v7 = (void *)MEMORY[0x1E4F1C978];
  id v8 = a4;
  id v9 = a3;
  id v10 = a1;
  id v11 = [v7 arrayWithObjects:&v19 count:1];
  id v12 = _UIKitBundle();
  id v13 = objc_msgSend(v12, "localizations", v19, v20);
  id v14 = [v6 preferredLocalizationsFromArray:v11 forPreferences:v13];

  double v15 = _UIKitBundle();
  double v16 = [v14 firstObject];
  id v17 = [v15 localizedStringForKey:v10 value:v9 table:@"Localizable" localization:v16];

  return v17;
}

void sub_18607C34C(_Unwind_Exception *a1)
{
  __destructor_8_s0_s8(v1);
  _Unwind_Resume(a1);
}

void sub_18607CCC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18607DCBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id UITextInputSessionLog()
{
  if (UITextInputSessionLog_onceToken != -1) {
    dispatch_once(&UITextInputSessionLog_onceToken, &__block_literal_global_258);
  }
  os_log_t v0 = (void *)UITextInputSessionLog___instance;
  return v0;
}

void __UITextInputSessionLog_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.inputAnalytics", "UITextInputSession");
  uint64_t v1 = (void *)UITextInputSessionLog___instance;
  UITextInputSessionLog___instance = (uint64_t)v0;
}

id UIFeedbackServiceLog()
{
  if (UIFeedbackServiceLog_onceToken != -1) {
    dispatch_once(&UIFeedbackServiceLog_onceToken, &__block_literal_global_4_10);
  }
  os_log_t v0 = (void *)UIFeedbackServiceLog___instance;
  return v0;
}

void __UIFeedbackServiceLog_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.UIKit", "UIFeedbackService");
  uint64_t v1 = (void *)UIFeedbackServiceLog___instance;
  UIFeedbackServiceLog___instance = (uint64_t)v0;
}

id UIGlomojiLog()
{
  if (UIGlomojiLog_onceToken != -1) {
    dispatch_once(&UIGlomojiLog_onceToken, &__block_literal_global_8_7);
  }
  os_log_t v0 = (void *)UIGlomojiLog___instance;
  return v0;
}

void __UIGlomojiLog_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.inputAnalytics.client", "GlomojiAnalytics");
  uint64_t v1 = (void *)UIGlomojiLog___instance;
  UIGlomojiLog___instance = (uint64_t)v0;
}

id _UIKBMediaLog_0()
{
  if (qword_1EB260C08 != -1) {
    dispatch_once(&qword_1EB260C08, &__block_literal_global_141);
  }
  os_log_t v0 = (void *)qword_1EB260C00;
  return v0;
}

void sub_186080F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

__CFString *_UIRectEdgeDescription(char a1)
{
  if ((a1 & 0xF) == 0)
  {
    uint64_t v1 = @"none";
    goto LABEL_11;
  }
  if ((a1 & 0xF) == 0xFLL)
  {
    uint64_t v1 = @"all";
    goto LABEL_11;
  }
  id v3 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  uint64_t v4 = v3;
  if (a1)
  {
    [v3 addObject:@"top"];
    if ((a1 & 2) == 0)
    {
LABEL_7:
      if ((a1 & 4) == 0) {
        goto LABEL_8;
      }
LABEL_16:
      [v4 addObject:@"bottom"];
      if ((a1 & 8) == 0) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_7;
  }
  [v4 addObject:@"left"];
  if ((a1 & 4) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if ((a1 & 8) != 0) {
LABEL_9:
  }
    [v4 addObject:@"right"];
LABEL_10:
  uint64_t v1 = [v4 componentsJoinedByString:@", "];

LABEL_11:
  return v1;
}

uint64_t _patternCallback(void *a1, const char *a2)
{
  return [a1 _drawPatternWithContext:a2];
}

void sub_186084DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1860860FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186086D80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186086FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

__CFString *_UITextFormattingViewControllerHighlightFromColorScheme(void *a1)
{
  id v1 = a1;
  if (*(id *)off_1E52D2308 == v1)
  {
    int v2 = @"UITextFormattingViewControllerHighlightPurple";
  }
  else if (*(id *)off_1E52D2300 == v1)
  {
    int v2 = @"UITextFormattingViewControllerHighlightPink";
  }
  else if (*(id *)off_1E52D22F8 == v1)
  {
    int v2 = @"UITextFormattingViewControllerHighlightOrange";
  }
  else if (*(id *)off_1E52D22F0 == v1)
  {
    int v2 = @"UITextFormattingViewControllerHighlightMint";
  }
  else if (*(id *)off_1E52D22E0 == v1)
  {
    int v2 = @"UITextFormattingViewControllerHighlightBlue";
  }
  else
  {
    int v2 = @"UITextFormattingViewControllerHighlightDefault";
  }

  return v2;
}

void sub_1860876F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _UITextFormattingViewControllerFormattingDescriptorClasses()
{
  if (qword_1EB260C18 != -1) {
    dispatch_once(&qword_1EB260C18, &__block_literal_global_262);
  }
  os_log_t v0 = (void *)_MergedGlobals_1076;
  return v0;
}

int64_t -[UITextFormattingViewControllerFormattingDescriptor _blockquote](UITextFormattingViewControllerFormattingDescriptor *self, SEL a2)
{
  return self->__blockquote;
}

void -[UITextFormattingViewControllerFormattingDescriptor set_blockquote:](UITextFormattingViewControllerFormattingDescriptor *self, SEL a2, int64_t a3)
{
  self->__blockquote = a3;
}

void sub_18608C0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _UIIntervalFromCGRect(uint64_t a1, double a2, double a3, double a4, double a5)
{
  if (CGRectIsNull(*(CGRect *)&a2))
  {
    double v6 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v7 = objc_msgSend(NSString, "stringWithUTF8String:", "_UIInterval _UIIntervalFromCGRect(CGRect, UIAxis)");
    [v6 handleFailureInFunction:v7 file:@"_UIInterval.m" lineNumber:16 description:@"Unable to convert CGRectNull to _UIInterval."];
  }
  if ((unint64_t)(a1 - 3) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    id v8 = [MEMORY[0x1E4F28B00] currentHandler];
    id v9 = objc_msgSend(NSString, "stringWithUTF8String:", "_UIInterval _UIIntervalFromCGRect(CGRect, UIAxis)");
    [v8 handleFailureInFunction:v9 file:@"_UIInterval.m" lineNumber:17 description:@"Need to specify one and only one axis."];
  }
}

double _UIIntervalStandardize(double a1, double a2)
{
  if (a2 >= 0.0) {
    a2 = -0.0;
  }
  return a1 + a2;
}

double _UIIntervalGetMin(double a1, double a2)
{
  if (a2 >= 0.0) {
    a2 = -0.0;
  }
  return a1 + a2;
}

double _UIIntervalGetMid(double a1, double a2)
{
  double v2 = -a2;
  if (a2 >= 0.0)
  {
    double v2 = a2;
    a2 = -0.0;
  }
  return a1 + a2 + v2 * 0.5;
}

double _UIIntervalGetMax(double a1, double a2)
{
  double v2 = -a2;
  if (a2 >= 0.0)
  {
    double v2 = a2;
    a2 = -0.0;
  }
  return v2 + a1 + a2;
}

BOOL _UIIntervalContainsInterval(double a1, double a2, double a3, double a4)
{
  if (a2 >= 0.0) {
    double v4 = -0.0;
  }
  else {
    double v4 = a2;
  }
  double v5 = a1 + v4;
  if (a4 >= 0.0) {
    double v6 = -0.0;
  }
  else {
    double v6 = a4;
  }
  double v7 = a3 + v6;
  if (v5 > v7) {
    return 0;
  }
  if (a2 < 0.0) {
    a2 = -a2;
  }
  double v9 = a2 + v5;
  double v10 = -a4;
  if (a4 >= 0.0) {
    double v10 = a4;
  }
  return v9 >= v10 + v7;
}

void sub_18608F26C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t _UISystemGestureLocationForScrollEventInView(void *a1, void *a2, void *a3)
{
  double v6 = [a1 view];
  if (a2) {
    double v7 = a2;
  }
  else {
    double v7 = a1;
  }
  [v7 locationInView:v6];
  double v9 = v8;
  double v11 = v10;

  return _ConvertDeviceReferenceSpacePointToView(a3, v9, v11);
}

uint64_t _UISystemGestureLocationInView(void *a1, void *a2)
{
  return _UISystemGestureLocationForTouchInView(a1, 0, a2);
}

uint64_t _UISystemGesturePreviousLocationForTouchInView(void *a1, void *a2, void *a3)
{
  if (!a2)
  {
    id v12 = [MEMORY[0x1E4F28B00] currentHandler];
    id v13 = objc_msgSend(NSString, "stringWithUTF8String:", "CGPoint _UISystemGesturePreviousLocationForTouchInView(UIGestureRecognizer *const __strong, UITouch *const __strong, UIView *const __strong)");
    [v12 handleFailureInFunction:v13, @"_UISystemGestureUtilities.m", 60, @"Invalid parameter not satisfying: %@", @"touch" file lineNumber description];
  }
  double v6 = [a1 view];
  [a2 previousLocationInView:v6];
  double v8 = v7;
  double v10 = v9;

  return _ConvertDeviceReferenceSpacePointToView(a3, v8, v10);
}

double _UISystemGestureVelocityInView(void *a1, void *a2)
{
  double v4 = [a1 view];
  [a1 velocityInView:v4];
  _ConvertDeviceReferenceSpaceVectorToView(a2, v5, v6);
  double v8 = v7;

  return v8;
}

uint64_t _ConvertDeviceReferenceSpaceVectorToView(void *a1, double a2, double a3)
{
  [a1 origin];
  objc_msgSend(a1, "convertPoint:toView:", 0);
  double v7 = v6;
  double v9 = v8;
  double v10 = [a1 _window];
  objc_msgSend(v10, "_convertPointToSceneReferenceSpace:", v7, v9);
  double v12 = v11;
  double v14 = v13;

  return _ConvertDeviceReferenceSpacePointToView(a1, a2 + v12, a3 + v14);
}

double _UISystemGestureTranslationInView(void *a1, void *a2)
{
  double v4 = [a1 view];
  [a1 translationInView:v4];
  _ConvertDeviceReferenceSpaceVectorToView(a2, v5, v6);
  double v8 = v7;

  return v8;
}

uint64_t _UIDocumentViewControllerWantsUIPDocumentLanding()
{
  if (qword_1EB25D860 != -1) {
    dispatch_once(&qword_1EB25D860, &__block_literal_global_265);
  }
  return _MergedGlobals_19_4;
}

void sub_186090744(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_18609108C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186091964(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_186091F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1860921E4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_186092E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getUIDocumentBrowserViewControllerClass_block_invoke_0(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB25D870)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    _OWORD v6[3] = __DocumentManagerLibraryCore_block_invoke_0;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E52F0CE8;
    uint64_t v8 = 0;
    qword_1EB25D870 = _sl_dlopen();
  }
  if (!qword_1EB25D870)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    double v4 = [NSString stringWithUTF8String:"void *DocumentManagerLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIDocumentViewController.m", 31, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("UIDocumentBrowserViewController");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    double v5 = [NSString stringWithUTF8String:"Class getUIDocumentBrowserViewControllerClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIDocumentViewController.m", 32, @"Unable to find class %s", "UIDocumentBrowserViewController");

LABEL_10:
    __break(1u);
  }
  qword_1EB25D868 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __DocumentManagerLibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25D870 = result;
  return result;
}

void sub_186093798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location,id a22,id a23)
{
  objc_destroyWeak(v25);
  objc_destroyWeak(v23);
  objc_destroyWeak(v26);
  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a22);
  objc_destroyWeak(&a23);
  objc_destroyWeak((id *)(v27 - 104));
  _Unwind_Resume(a1);
}

void sub_186093970(_Unwind_Exception *a1)
{
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_186093B00(_Unwind_Exception *a1)
{
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

BOOL _UIGetLogMoarUISystemGestureLogsForCarousel()
{
  if (_UIInternalPreferencesRevisionOnce != -1) {
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_5_8);
  }
  int v0 = _UIInternalPreferencesRevisionVar;
  if (_UIInternalPreferencesRevisionVar < 1
    || (int v3 = _UIInternalPreference_LogMoarUISystemGestureLogsForCarousel,
        _UIInternalPreferencesRevisionVar == _UIInternalPreference_LogMoarUISystemGestureLogsForCarousel))
  {
    BOOL v1 = 0;
  }
  else
  {
    do
    {
      BOOL v1 = v0 < v3;
      if (v0 < v3) {
        break;
      }
      _UIInternalPreferenceSync(v0, &_UIInternalPreference_LogMoarUISystemGestureLogsForCarousel, @"LogMoarUISystemGestureLogsForCarousel", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
      int v3 = _UIInternalPreference_LogMoarUISystemGestureLogsForCarousel;
    }
    while (v0 != _UIInternalPreference_LogMoarUISystemGestureLogsForCarousel);
  }
  return byte_1E8FD527C && v1;
}

id _UIGestureLogDescription(void *a1)
{
  BOOL v1 = [a1 name];
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1;
  }
  else
  {
    double v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    id v3 = (id)objc_claimAutoreleasedReturnValue();
  }
  double v5 = v3;

  return v5;
}

void ___systemGestureLog_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.UIKit", "UISystemGesture");
  BOOL v1 = (void *)_MergedGlobals_1078;
  _MergedGlobals_1078 = (uint64_t)v0;
}

uint64_t _UIPBIProxyOwnerActionsForState(void *a1, void *a2, void *a3)
{
  double v5 = a2;
  double v6 = a3;
  if (v5 == v6)
  {

    goto LABEL_7;
  }
  long long v7 = v6;
  if (v5 && v6)
  {
    char v8 = [v5 isEqual:v6];

    if ((v8 & 1) == 0) {
      goto LABEL_9;
    }
LABEL_7:
    int v9 = 0;
    int v10 = 0;
    return v10 | v9;
  }

LABEL_9:
  uint64_t v11 = [v7 _count];
  uint64_t v12 = v11;
  if (a1)
  {
    if ([a1 _isEnabled])
    {
      int v13 = [a1 _isEnabled];
      BOOL v14 = 0;
      int v10 = 0;
      if (!v13)
      {
LABEL_20:
        if (v12)
        {
LABEL_21:
          int v9 = 256;
          return v10 | v9;
        }
LABEL_29:
        int v9 = 0;
        return v10 | v9;
      }
    }
    else
    {
      uint64_t v15 = [v7 _count];
      BOOL v14 = v15 != 0;
      if (([a1 _isEnabled] & 1) == 0)
      {
        if (!v15)
        {
LABEL_19:
          int v10 = 0;
          goto LABEL_20;
        }
LABEL_26:
        int v10 = 0x10000;
        if (v12) {
          goto LABEL_21;
        }
        goto LABEL_29;
      }
    }
    if (!v7 || (double v16 = (void *)v7[1]) == 0 || ![v16 count])
    {
      if (v14)
      {
        int v10 = 16842752;
        if (v12) {
          goto LABEL_21;
        }
      }
      else
      {
        int v10 = 0x1000000;
        if (v12) {
          goto LABEL_21;
        }
      }
      goto LABEL_29;
    }
    if (!v14) {
      goto LABEL_19;
    }
    goto LABEL_26;
  }
  int v9 = 0;
  int v10 = v11 != 0;
  return v10 | v9;
}

id _UIGestureEnvironmentSubgraphsBlockedFromResetDescription(uint64_t a1, int a2)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  double v4 = objc_opt_new();
  id v5 = *(id *)(a1 + 48);
  uint64_t v6 = mach_absolute_time();
  if (a2
    && (!_UIInternalPreferenceUsesDefault_1((int *)&_UIInternalPreference_GestureBlockedFromResetStateCaptureTimeout, @"GestureBlockedFromResetStateCaptureTimeout")? (double v7 = *(double *)&qword_1EB257550): (double v7 = 2.0), (_UIGestureEnvironmentHasBlockedGestureRecognizerSurpassingTimeout(*(void **)(a1 + 48), v6, v7) & 1) == 0))
  {
    CGFloat v29 = objc_msgSend(NSString, "stringWithFormat:", @"No gestures blocked from reset beyond %.1f timeout", *(void *)&v7);
    [v4 appendString:v29 withName:0];
    id v30 = v4;
  }
  else
  {
    long long v34 = v4;
    uint64_t v35 = a1;
    uint64_t v32 = v6;
    char v8 = objc_opt_new();
    long long v43 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    id v33 = v5;
    id v9 = v5;
    uint64_t v10 = [v9 countByEnumeratingWithState:&v43 objects:v51 count:16];
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = *(void *)v44;
      do
      {
        for (uint64_t i = 0; i != v11; ++i)
        {
          if (*(void *)v44 != v12) {
            objc_enumerationMutation(v9);
          }
          BOOL v14 = *(void **)(*((void *)&v43 + 1) + 8 * i);
          long long v47 = 0u;
          long long v48 = 0u;
          long long v49 = 0u;
          long long v50 = 0u;
          id v15 = v8;
          uint64_t v16 = [v15 countByEnumeratingWithState:&v47 objects:v52 count:16];
          if (v16)
          {
            uint64_t v17 = v16;
            uint64_t v18 = *(void *)v48;
            while (2)
            {
              for (uint64_t j = 0; j != v17; ++j)
              {
                if (*(void *)v48 != v18) {
                  objc_enumerationMutation(v15);
                }
                if ([*(id *)(*((void *)&v47 + 1) + 8 * j) containsObject:v14])
                {

                  goto LABEL_21;
                }
              }
              uint64_t v17 = [v15 countByEnumeratingWithState:&v47 objects:v52 count:16];
              if (v17) {
                continue;
              }
              break;
            }
          }

          uint64_t v20 = _UIGestureEnvironmentSubgraphForGestureRecognizer(v35, v14);
          [v15 addObject:v20];

LABEL_21:
          ;
        }
        uint64_t v11 = [v9 countByEnumeratingWithState:&v43 objects:v51 count:16];
      }
      while (v11);
    }

    BOOL v21 = objc_opt_new();
    uint64_t v22 = objc_opt_new();
    v36[0] = MEMORY[0x1E4F143A8];
    v36[1] = 3221225472;
    v36[2] = ___UIGestureEnvironmentSubgraphsBlockedFromResetDescription_block_invoke;
    v36[3] = &unk_1E52EA148;
    id v37 = v8;
    id v38 = v22;
    id v39 = v9;
    id v40 = v21;
    double v4 = v34;
    id v23 = v34;
    id v41 = v23;
    uint64_t v42 = v32;
    id v24 = v21;
    id v25 = v22;
    id v26 = v8;
    [v23 appendBodySectionWithName:@"subgraphs blocked from reset" block:v36];
    uint64_t v27 = v41;
    id v28 = v23;

    id v5 = v33;
  }

  return v4;
}

uint64_t _UIGestureEnvironmentHasBlockedGestureRecognizerSurpassingTimeout(void *a1, uint64_t a2, double a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v5 = a1;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v14;
    while (2)
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v14 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void *)(*((void *)&v13 + 1) + 8 * v9);
        if (v10) {
          uint64_t v10 = *(void *)(v10 + 216);
        }
        if (_UIMediaTimeForMachTime(a2 - v10) > a3)
        {
          uint64_t v11 = 1;
          goto LABEL_13;
        }
        ++v9;
      }
      while (v7 != v9);
      uint64_t v7 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }
  uint64_t v11 = 0;
LABEL_13:

  return v11;
}

__CFString *_UIGestureRecognizerStateString(unint64_t a1)
{
  if (a1 > 5) {
    return 0;
  }
  else {
    return off_1E52F0F58[a1];
  }
}

__CFString *_UIScreenEdgeSystemGestureModeDescription(unint64_t a1)
{
  if (a1 >= 3)
  {
    objc_msgSend(NSString, "stringWithFormat:", @"(%li)", a1);
    BOOL v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    BOOL v1 = off_1E52F0F40[a1];
  }
  return v1;
}

id _UIGestureRecognizerAllowedTouchTypesArrayFromMask(unint64_t a1)
{
  uint64_t v1 = a1;
  if (a1 >= 0x10) {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8], @"Touch type mask contains invalid value: %ld. Must be one of UITouchTypeDirect, UITouchTypeIndirect, UITouchTypeStylus, or UITouchTypeIndirectPointer", a1 & 0xFFFFFFFFFFFFFFF0 format];
  }
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  if (v1 >= 1)
  {
    uint64_t v3 = 0;
    do
    {
      if (v1)
      {
        double v4 = [NSNumber numberWithInteger:v3];
        [v2 addObject:v4];
      }
      ++v3;
      BOOL v5 = (unint64_t)v1 >= 2;
      uint64_t v1 = (unint64_t)v1 >> 1;
    }
    while (v5);
  }
  return v2;
}

void _UIGestureRecognizerDistanceBetweenTouches(void *a1)
{
  if ([a1 count] == 2)
  {
    id v2 = [a1 objectAtIndexedSubscript:0];
    [v2 locationInView:0];

    uint64_t v3 = [a1 objectAtIndexedSubscript:1];
    [v3 locationInView:0];
  }
}

void _UIExclusionMatrixLog(uint64_t a1, void *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v28 = a2;
  uint64_t v3 = [v28 count];
  unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("GestureExclusion", &qword_1EB260CB8);
  if (*(unsigned char *)CategoryCachedImpl)
  {
    uint64_t v22 = *(NSObject **)(CategoryCachedImpl + 8);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1853B0000, v22, OS_LOG_TYPE_ERROR, "Gestures relevant to exclusion:", buf, 2u);
    }
  }
  BOOL v5 = [MEMORY[0x1E4F28E78] stringWithString:@"Exclusion matrix (a mark at row X, column Y indicates gesture Y will try to exclude X; a star next to column X indicates that X has recognized):\n   |"];
  int v6 = v3;
  if ((int)v3 >= 1)
  {
    uint64_t v7 = 0;
    do
    {
      unint64_t v8 = __UILogGetCategoryCachedImpl("GestureExclusion", &qword_1EB260CC0);
      if (*(unsigned char *)v8)
      {
        uint64_t v12 = *(id *)(v8 + 8);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          loga = v12;
          long long v13 = [v28 objectAtIndexedSubscript:v7];
          uint64_t v14 = [v13 _excludableDescription];
          *(_DWORD *)buf = 134218242;
          id v30 = (void *)(v7 + 1);
          __int16 v31 = 2112;
          long long v15 = (void *)v14;
          uint64_t v32 = v14;
          _os_log_impl(&dword_1853B0000, loga, OS_LOG_TYPE_ERROR, "%2ld: %@", buf, 0x16u);

          uint64_t v12 = loga;
        }
      }
      uint64_t v9 = [v28 objectAtIndexedSubscript:v7];
      int v10 = [v9 _canExcludeOtherExcludables];

      ++v7;
      uint64_t v11 = 32;
      if (v10) {
        uint64_t v11 = 42;
      }
      objc_msgSend(v5, "appendFormat:", @" %2ld%c", v7, v11);
    }
    while (v3 != v7);
  }
  [v5 appendFormat:@"\n---+"];
  if ((int)v3 >= 1)
  {
    do
    {
      [v5 appendString:@"----"];
      --v6;
    }
    while (v6);
    uint64_t v16 = 0;
    os_log_t log = (os_log_t)(int)v3;
    uint64_t v26 = v3;
    uint64_t v27 = v3 << 32;
    do
    {
      uint64_t v17 = v16 + 1;
      objc_msgSend(v5, "appendFormat:", @"\n%2ld |", v16 + 1);
      if (v27)
      {
        uint64_t v18 = 0;
        os_log_t v19 = log;
        do
        {
          if (((*(void *)(**(void **)(a1 + 8)
                           + (((unint64_t)(*(void *)a1 * v16 + (v18 >> 32)) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (*(unsigned char *)a1 * v16 + BYTE4(v18))) & 1) != 0)
            uint64_t v20 = 88;
          else {
            uint64_t v20 = 32;
          }
          objc_msgSend(v5, "appendFormat:", @"  %c ", v20);
          v18 += 0x100000000;
          os_log_t v19 = (os_log_t)((char *)v19 - 1);
        }
        while (v19);
      }
      ++v16;
    }
    while (v17 != v26);
  }
  unint64_t v21 = __UILogGetCategoryCachedImpl("GestureExclusion", &qword_1EB260CC8);
  if (*(unsigned char *)v21)
  {
    id v23 = *(NSObject **)(v21 + 8);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v30 = v5;
      _os_log_impl(&dword_1853B0000, v23, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
    }
  }
}

void sub_18609BDFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_18609C4A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _UIContextMenuItemLayoutApply(double *a1, void *a2, void *a3)
{
  id v5 = a2;
  int v6 = a3;
  uint64_t v7 = [v5 layer];
  [v7 anchorPoint];
  double v9 = v8;
  double v11 = v10;
  double v12 = a1[7];
  double v13 = a1[8];

  if (v9 != v12 || v11 != v13)
  {
    double v15 = a1[7];
    double v16 = a1[8];
    uint64_t v17 = [v5 layer];
    objc_msgSend(v17, "setAnchorPoint:", v15, v16);
  }
  [v5 bounds];
  BOOL v18 = CGRectEqualToRect(v26, *(CGRect *)a1);
  if (!v18) {
    objc_msgSend(v5, "setBounds:", *a1, a1[1], a1[2], a1[3]);
  }
  -[UIView _center3D](v5);
  int v19 = CAPoint3DEqualToPoint();
  if ((v19 & 1) == 0) {
    -[UIView _setCenter3D:](v5, a1[4], a1[5], a1[6]);
  }
  if (v5) {
    [v5 transform];
  }
  else {
    memset(&t1, 0, sizeof(t1));
  }
  long long v20 = *(_OWORD *)(a1 + 11);
  *(_OWORD *)&t2.a = *(_OWORD *)(a1 + 9);
  *(_OWORD *)&t2.c = v20;
  *(_OWORD *)&t2.tCGFloat x = *(_OWORD *)(a1 + 13);
  if (!CGAffineTransformEqualToTransform(&t1, &t2))
  {
    long long v21 = *(_OWORD *)(a1 + 11);
    v23[0] = *(_OWORD *)(a1 + 9);
    v23[1] = v21;
    v23[2] = *(_OWORD *)(a1 + 13);
    [v5 setTransform:v23];
  }
  [v5 alpha];
  if (vabdd_f64(v22, a1[15]) > 2.22044605e-16) {
    objc_msgSend(v5, "setAlpha:");
  }
  if (v6) {
    v6[2](v6, !v18, v19 ^ 1u);
  }
}

double _UIContextMenuItemFrameFromLayout(CGRect *a1)
{
  double x = a1[1].origin.x;
  double height = a1[1].size.height;
  double v4 = x - height * CGRectGetWidth(*a1);
  CGRectGetHeight(*a1);
  return v4;
}

void _validatedItemLayout(uint64_t a1, uint64_t *a2, void *a3, void *a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = a4;
  double v9 = objc_opt_new();
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[2];
  uint64_t v12 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = a2[6];
  double v21 = *(double *)a2;
  uint64_t v16 = a2[7];
  double v17 = *((double *)a2 + 8);
  if (objc_msgSend(v9, "count", v17))
  {
    if (os_variant_has_internal_diagnostics())
    {
      int v19 = __UIFaultDebugAssertLog();
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_FAULT)) {
        goto LABEL_6;
      }
      long long v20 = [v9 componentsJoinedByString:@", "];
      *(_DWORD *)buf = 138412802;
      id v23 = v8;
      __int16 v24 = 2112;
      id v25 = v20;
      __int16 v26 = 2112;
      id v27 = v7;
      _os_log_fault_impl(&dword_1853B0000, v19, OS_LOG_TYPE_FAULT, "Encountered invalid context menu %@ layout output: [ %@ ], input: %@", buf, 0x20u);
LABEL_5:

LABEL_6:
      goto LABEL_7;
    }
    BOOL v18 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_validatedItemLayout___s_category) + 8);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      int v19 = v18;
      long long v20 = [v9 componentsJoinedByString:@", "];
      *(_DWORD *)buf = 138412802;
      id v23 = v8;
      __int16 v24 = 2112;
      id v25 = v20;
      __int16 v26 = 2112;
      id v27 = v7;
      _os_log_impl(&dword_1853B0000, v19, OS_LOG_TYPE_ERROR, "Encountered invalid context menu %@ layout output: [ %@ ], input: %@", buf, 0x20u);
      goto LABEL_5;
    }
  }
LABEL_7:
  *(double *)a1 = v21;
  *(void *)(a1 + 8) = v10;
  *(void *)(a1 + 16) = v11;
  *(void *)(a1 + 24) = v12;
  *(void *)(a1 + 32) = v13;
  *(void *)(a1 + 40) = v14;
  *(void *)(a1 + 48) = v15;
  *(void *)(a1 + 56) = v16;
  *(double *)(a1 + 64) = v17;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 13);
  *(void *)(a1 + 120) = a2[15];
}

double _UIContextMenuInputViewOverlapBottomInsets(void *a1)
{
  id v1 = a1;
  id v2 = [v1 _window];
  char v3 = [v2 _isRemoteInputHostWindow];

  double v4 = 0.0;
  if ((v3 & 1) == 0)
  {
    id v5 = +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate];
    int v6 = v5;
    if (v5)
    {
      [v5 verticalOverlapForView:v1 usingKeyboardInfo:0];
      double v8 = v7;
      double v9 = [v1 traitCollection];
      uint64_t v10 = _UIContextMenuGetPlatformMetrics([v9 userInterfaceIdiom]);

      [v10 minimumContainerInsets];
      double v12 = v11;

      double v4 = v8 + v12;
    }
  }
  return v4;
}

double _UIContextMenuProjectFrameFromViewToView(void *a1, void *a2, double a3, double a4, double a5, double a6)
{
  id v11 = a2;
  objc_msgSend(a1, "convertRect:toCoordinateSpace:", v11, a3, a4, a5, a6);
  double v13 = v12;
  CGFloat v15 = v14;
  double v17 = v16;
  CGFloat v19 = v18;
  [v11 bounds];
  CGFloat v21 = v20;
  CGFloat v23 = v22;
  double v25 = v24;
  CGFloat v27 = v26;

  v30.origin.double x = v13;
  v30.origin.CGFloat y = v15;
  v30.size.CGFloat width = v17;
  v30.size.double height = v19;
  if (!CGRectIsNull(v30))
  {
    if (v25 < v17) {
      double v17 = v25;
    }
    v31.origin.double x = v21;
    v31.origin.CGFloat y = v23;
    v31.size.CGFloat width = v25;
    v31.size.double height = v27;
    double MinX = CGRectGetMinX(v31);
    v32.origin.double x = v21;
    v32.origin.CGFloat y = v23;
    v32.size.CGFloat width = v25;
    v32.size.double height = v27;
    double v13 = fmax(MinX, fmin(v13, CGRectGetMaxX(v32) - v17));
    v33.origin.double x = v21;
    v33.origin.CGFloat y = v23;
    v33.size.CGFloat width = v25;
    v33.size.double height = v27;
    CGRectGetMinY(v33);
    v34.origin.double x = v21;
    v34.origin.CGFloat y = v23;
    v34.size.CGFloat width = v25;
    v34.size.double height = v27;
    CGRectGetMaxY(v34);
  }
  return v13;
}

double _UIContextMenuDefaultContentSpacing(void *a1)
{
  id v1 = a1;
  id v2 = [v1 traitCollection];
  uint64_t v3 = [v2 userInterfaceIdiom];

  double v4 = _UIContextMenuGetPlatformMetrics(v3);
  +[UIViewController _horizontalContentMarginForView:v1];
  double v6 = v5;
  uint64_t v7 = [v4 contentSpacingForContainer];
  double v8 = (void *)v7;
  if (v7) {
    double v6 = (*(double (**)(uint64_t, id))(v7 + 16))(v7, v1);
  }

  return v6;
}

double _CGRectConstrainedWithinRect(char a1, double a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  v42.origin.double x = a6;
  v42.origin.CGFloat y = a7;
  v42.size.CGFloat width = a8;
  v42.size.double height = a9;
  v53.origin.double x = a2;
  v53.origin.CGFloat y = a3;
  v53.size.CGFloat width = a4;
  v53.size.double height = a5;
  if (!CGRectContainsRect(v42, v53))
  {
    a2 = _CGRectScaledToAspectFitWithinRect(a2, a3, a4, a5, a6, a7, a8, a9);
    CGFloat v19 = v18;
    CGFloat v21 = v20;
    CGFloat v23 = v22;
    v43.origin.double x = a6;
    v43.origin.CGFloat y = a7;
    v43.size.CGFloat width = a8;
    v43.size.double height = a9;
    v54.origin.double x = a2;
    v54.origin.CGFloat y = v19;
    v54.size.CGFloat width = v21;
    v54.size.double height = v23;
    if (!CGRectContainsRect(v43, v54))
    {
      double v24 = 0.0;
      if ((a1 & 2) != 0)
      {
        v44.origin.double x = a6;
        v44.origin.CGFloat y = a7;
        v44.size.CGFloat width = a8;
        v44.size.double height = a9;
        double MinX = CGRectGetMinX(v44);
        v45.origin.double x = a2;
        v45.origin.CGFloat y = v19;
        v45.size.CGFloat width = v21;
        v45.size.double height = v23;
        double v24 = MinX - CGRectGetMinX(v45);
        if (v24 < 0.0) {
          double v24 = 0.0;
        }
      }
      double v41 = v24;
      v46.origin.double x = a6;
      v46.origin.CGFloat y = a7;
      v46.size.CGFloat width = a8;
      v46.size.double height = a9;
      double MaxX = CGRectGetMaxX(v46);
      v47.origin.double x = a2;
      v47.origin.CGFloat y = v19;
      v47.size.CGFloat width = v21;
      v47.size.double height = v23;
      double v25 = MaxX - CGRectGetMaxX(v47);
      double v26 = 0.0;
      if (a1)
      {
        v48.origin.double x = a6;
        double v39 = v25;
        v48.origin.CGFloat y = a7;
        v48.size.CGFloat width = a8;
        v48.size.double height = a9;
        double MinY = CGRectGetMinY(v48);
        v49.origin.double x = a2;
        v49.origin.CGFloat y = v19;
        v49.size.CGFloat width = v21;
        v49.size.double height = v23;
        double v27 = MinY - CGRectGetMinY(v49);
        if (v27 >= 0.0) {
          double v26 = v27;
        }
        else {
          double v26 = 0.0;
        }
        double v25 = v39;
      }
      double v28 = 0.0;
      double v29 = fmin(v25, 0.0);
      if ((a1 & 4) != 0)
      {
        v50.origin.double x = a6;
        v50.origin.CGFloat y = a7;
        double v30 = v26;
        v50.size.CGFloat width = a8;
        double v31 = v29;
        v50.size.double height = a9;
        double MaxY = CGRectGetMaxY(v50);
        v51.origin.double x = a2;
        v51.origin.CGFloat y = v19;
        v51.size.CGFloat width = v21;
        v51.size.double height = v23;
        CGFloat v33 = CGRectGetMaxY(v51);
        double v29 = v31;
        double v26 = v30;
        double v28 = fmin(MaxY - v33, 0.0);
      }
      CGFloat v34 = v41 + v29;
      CGFloat v35 = v26 + v28;
      v52.origin.double x = a2;
      v52.origin.CGFloat y = v19;
      v52.size.CGFloat width = v21;
      v52.size.double height = v23;
      *(void *)&a2 = (unint64_t)CGRectOffset(v52, v34, v35);
    }
  }
  return a2;
}

double _UIContextMenuConvertPointBetweenViews(void *a1, void *a2, double a3, double a4)
{
  id v7 = a1;
  id v8 = a2;
  double v9 = [v7 traitCollection];
  uint64_t v10 = _UIContextMenuGetPlatformMetrics([v9 userInterfaceIdiom]);
  id v11 = [v10 convertPointBetweenViews];

  if (v11)
  {
    double v12 = ((double (**)(void, id, id, double, double))v11)[2](v11, v7, v8, a3, a4);
    goto LABEL_24;
  }
  id v13 = v7;
  id v14 = v8;
  CGRect v55 = v13;
  CGFloat v15 = [v13 layer];
  double v16 = [v14 layer];
  uint64_t v17 = [v15 presentationLayer];
  if (v17)
  {
    double v18 = (void *)v17;
    CGFloat v19 = [v16 presentationLayer];
    if (v19 && (_UILayerAncestorsHaveAllBeenCommitted(v15) & 1) != 0)
    {
      id v20 = v14;
      int HaveAllBeenCommitted = _UILayerAncestorsHaveAllBeenCommitted(v16);

      if (!HaveAllBeenCommitted)
      {
        CGRect v53 = v16;
        CGRect v54 = v15;
        id v14 = v20;
        goto LABEL_12;
      }
      uint64_t v22 = [v15 presentationLayer];

      [v16 presentationLayer];
      v53 = double v18 = v16;
      CGRect v54 = (void *)v22;
      id v14 = v20;
    }
    else
    {
      CGRect v53 = v16;
      CGRect v54 = v15;
    }
  }
  else
  {
    CGRect v53 = v16;
    CGRect v54 = v15;
  }
LABEL_12:
  CGFloat v23 = [v55 _window];
  double v24 = [v14 _window];
  double v25 = [v23 windowScene];
  uint64_t v26 = [v24 windowScene];
  double v27 = (void *)v26;
  if (v23 == v24)
  {
    id v38 = v53;
    double v39 = v54;
    objc_msgSend(v54, "convertPoint:toLayer:", v53, a3, a4);
    double v12 = v40;
  }
  else if (v26 && v25 && v25 != (void *)v26)
  {
    double v28 = [v25 screen];
    [v28 fixedCoordinateSpace];
    v30 = double v29 = v25;
    objc_msgSend(v30, "convertPoint:fromCoordinateSpace:", v55, a3, a4);
    double v32 = v31;
    double v34 = v33;

    CGFloat v35 = [v27 screen];
    long long v36 = [v35 fixedCoordinateSpace];
    objc_msgSend(v14, "convertPoint:fromCoordinateSpace:", v36, v32, v34);
    double v12 = v37;

    double v25 = v29;
    id v38 = v53;
    double v39 = v54;
  }
  else
  {
    CGRect v51 = (void *)v26;
    CGRect v52 = v25;
    double v41 = objc_msgSend(v23, "layer", v14);
    CGRect v42 = [v24 layer];
    uint64_t v43 = [v41 presentationLayer];
    if (v43
      && (CGRect v44 = (void *)v43,
          [v42 presentationLayer],
          CGRect v45 = objc_claimAutoreleasedReturnValue(),
          v45,
          v44,
          v45))
    {
      uint64_t v46 = [v41 presentationLayer];

      CGRect v47 = [v42 presentationLayer];

      double v41 = (void *)v46;
      id v14 = v50;
    }
    else
    {
      id v14 = v50;
      CGRect v47 = v42;
    }
    double v39 = v54;
    objc_msgSend(v54, "convertPoint:toLayer:", v41, a3, a4);
    id v38 = v53;
    objc_msgSend(v53, "convertPoint:fromLayer:", v47);
    double v12 = v48;

    double v27 = v51;
    double v25 = v52;
  }

LABEL_24:
  return v12;
}

double _CGRectScaledToAspectFitWithinRect(double a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double x = a1;
  double Width = CGRectGetWidth(*(CGRect *)&a1);
  CGFloat rect = a4;
  v24.origin.double x = x;
  v24.origin.CGFloat y = a2;
  v24.size.CGFloat width = a3;
  v24.size.double height = a4;
  double Height = CGRectGetHeight(v24);
  v25.origin.double x = a5;
  v25.origin.CGFloat y = a6;
  v25.size.CGFloat width = a7;
  v25.size.double height = a8;
  double v16 = CGRectGetWidth(v25);
  v26.origin.double x = a5;
  v26.origin.CGFloat y = a6;
  v26.size.CGFloat width = a7;
  v26.size.double height = a8;
  double v17 = CGRectGetHeight(v26);
  if (Width - v16 <= 2.22044605e-16)
  {
    if (Height - v17 > 2.22044605e-16)
    {
      CGAffineTransformMakeScale(&v22, v17 / Height, v17 / Height);
      v29.origin.double x = x;
      v29.origin.CGFloat y = a2;
      v29.size.CGFloat width = a3;
      v29.size.double height = rect;
      *(void *)&double x = (unint64_t)CGRectApplyAffineTransform(v29, &v22);
    }
  }
  else
  {
    CGAffineTransformMakeScale(&v23, v16 / Width, v16 / Width);
    v27.origin.double x = x;
    v27.origin.CGFloat y = a2;
    v27.size.CGFloat width = a3;
    v27.size.double height = rect;
    CGRect v28 = CGRectApplyAffineTransform(v27, &v23);
    double x = v28.origin.x;
    CGRectGetHeight(v28);
  }
  return x;
}

void UILabelNewAnimatingSummarySymbolView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = 0;
  CGAffineTransform v22 = &v21;
  uint64_t v23 = 0x2020000000;
  double v6 = (void (*)(void))_MergedGlobals_1083;
  CGRect v24 = _MergedGlobals_1083;
  if (!_MergedGlobals_1083)
  {
    uint64_t v17 = MEMORY[0x1E4F143A8];
    uint64_t v18 = 3221225472;
    CGFloat v19 = __getSwiftUIGlue2ClassSymbolLoc_block_invoke;
    id v20 = &unk_1E52D9900;
    id v7 = SwiftUILibrary();
    v22[3] = (uint64_t)dlsym(v7, "SwiftUIGlue2Class");
    _MergedGlobals_1083 = (_UNKNOWN *)v22[3];
    double v6 = (void (*)(void))v22[3];
  }
  _Block_object_dispose(&v21, 8);
  if (!v6)
  {
    CGFloat v15 = [MEMORY[0x1E4F28B00] currentHandler];
    double v16 = [NSString stringWithUTF8String:"Class _SwiftUIGlue2Class(void)"];
    objc_msgSend(v15, "handleFailureInFunction:file:lineNumber:description:", v16, @"_UILabelAnimatingSummarySymbolBridge.m", 13, @"%s", dlerror(), v17, v18, v19, v20);
LABEL_17:

    __break(1u);
    return;
  }
  v6();
  id v8 = (objc_class *)(id)objc_claimAutoreleasedReturnValue();
  if (!v8)
  {
    double v12 = objc_opt_new();
    id v9 = +[UIColor redColor];
    [v12 setBackgroundColor:v9];
    goto LABEL_12;
  }
  id v9 = objc_alloc_init(v8);
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    double v12 = objc_opt_new();
    id v13 = +[UIColor redColor];
    [v12 setBackgroundColor:v13];

    goto LABEL_12;
  }
  uint64_t v21 = 0;
  CGAffineTransform v22 = &v21;
  uint64_t v23 = 0x2020000000;
  uint64_t v10 = (void (*)(uint64_t, uint64_t, uint64_t))off_1EB260CF0;
  CGRect v24 = off_1EB260CF0;
  if (!off_1EB260CF0)
  {
    uint64_t v17 = MEMORY[0x1E4F143A8];
    uint64_t v18 = 3221225472;
    CGFloat v19 = __get_IntelligenceSupportMakeSummarySymbolSymbolLoc_block_invoke;
    id v20 = &unk_1E52D9900;
    id v11 = SwiftUILibrary();
    v22[3] = (uint64_t)dlsym(v11, "_IntelligenceSupportMakeSummarySymbol");
    off_1EB260CF0 = (_UNKNOWN *)v22[3];
    uint64_t v10 = (void (*)(uint64_t, uint64_t, uint64_t))v22[3];
  }
  _Block_object_dispose(&v21, 8);
  if (!v10)
  {
    CGFloat v15 = [MEMORY[0x1E4F28B00] currentHandler];
    double v16 = objc_msgSend(NSString, "stringWithUTF8String:", "id _IntelligenceSupportMakeSummarySymbol(BOOL, CTFontRef, CGColorRef)");
    objc_msgSend(v15, "handleFailureInFunction:file:lineNumber:description:", v16, @"_UILabelAnimatingSummarySymbolBridge.m", 14, @"%s", dlerror(), v17, v18, v19, v20);
    goto LABEL_17;
  }
  double v12 = v10(a1, a2, a3);
LABEL_12:

  id v14 = v12;
}

void sub_1860A4078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getSwiftUIGlue2ClassSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = SwiftUILibrary();
  uint64_t result = dlsym(v2, "SwiftUIGlue2Class");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  _MergedGlobals_1083 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *SwiftUILibrary()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!SwiftUILibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    void v4[2] = (void *)3221225472;
    v4[3] = __SwiftUILibraryCore_block_invoke_0;
    void v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_1E52F1000;
    uint64_t v6 = 0;
    SwiftUILibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  os_log_t v0 = (void *)SwiftUILibraryCore_frameworkLibrary;
  if (!SwiftUILibraryCore_frameworkLibrary)
  {
    os_log_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"void *SwiftUILibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"_UILabelAnimatingSummarySymbolBridge.m", 12, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __SwiftUILibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  SwiftUILibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

void sub_1860A558C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getTUIKeyboardInputModeIconRendererClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  os_log_t v0 = (void *)getTUIKeyboardInputModeIconRendererClass_softClass;
  uint64_t v7 = getTUIKeyboardInputModeIconRendererClass_softClass;
  if (!getTUIKeyboardInputModeIconRendererClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getTUIKeyboardInputModeIconRendererClass_block_invoke;
    v3[3] = &unk_1E52D9900;
    v3[4] = &v4;
    __getTUIKeyboardInputModeIconRendererClass_block_invoke((uint64_t)v3);
    os_log_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1860A5670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getTUIKeyboardInputModeIconRendererClass_block_invoke(uint64_t a1)
{
  TextInputUILibrary_2();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("TUIKeyboardInputModeIconRenderer");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getTUIKeyboardInputModeIconRendererClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getTUIKeyboardInputModeIconRendererClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"_UICursorAccessoryViewController.m", 26, @"Unable to find class %s", "TUIKeyboardInputModeIconRenderer");

    __break(1u);
  }
}

void TextInputUILibrary_2()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!TextInputUILibraryCore_frameworkLibrary_2)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __TextInputUILibraryCore_block_invoke_6;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E52F1018;
    uint64_t v5 = 0;
    TextInputUILibraryCore_frameworkLibrary_2 = _sl_dlopen();
  }
  if (!TextInputUILibraryCore_frameworkLibrary_2)
  {
    id v1 = [MEMORY[0x1E4F28B00] currentHandler];
    id v2 = [NSString stringWithUTF8String:"void *TextInputUILibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"_UICursorAccessoryViewController.m", 25, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  os_log_t v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __TextInputUILibraryCore_block_invoke_6()
{
  uint64_t result = _sl_dlopen();
  TextInputUILibraryCore_frameworkLibrary_2 = result;
  return result;
}

void __getTUIKeyboardInputModeIconRendererConfigurationClass_block_invoke(uint64_t a1)
{
  TextInputUILibrary_2();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("TUIKeyboardInputModeIconRendererConfiguration");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getTUIKeyboardInputModeIconRendererConfigurationClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                                + 24);
  }
  else
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getTUIKeyboardInputModeIconRendererConfigurationClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"_UICursorAccessoryViewController.m", 27, @"Unable to find class %s", "TUIKeyboardInputModeIconRendererConfiguration");

    __break(1u);
  }
}

void sub_1860A7948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t _UIUndoPinchGestureRecognizerCommonInit(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1E4F1DAB8];
  long long v2 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
  *(_OWORD *)(a1 + 280) = *MEMORY[0x1E4F1DAB8];
  *(_OWORD *)(a1 + 296) = v2;
  *(_OWORD *)(a1 + 312) = *(_OWORD *)(v1 + 32);
  *(unsigned char *)(a1 + 336) = 0;
  *(unsigned char *)(a1 + 272) = 0;
  double v3 = *MEMORY[0x1E4F1DAD8];
  double v4 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
  uint64_t v5 = (id *)(id)a1;
  objc_msgSend(v5, "setBeginCentroid:", v3, v4);
  v5[43] = (id)3;
  *((unsigned char *)v5 + 352) = 0;
  uint64_t v6 = objc_alloc_init(_UIGestureRecognizerTransformAnalyzer);
  id v7 = v5[41];
  v5[41] = v6;

  [v5 _updateTransformAnalyzerWeights];
  [v5[41] setRotationWeight:0.330000013];
  [v5[41] setTranslationWeight:0.330000013];
  id v8 = v5[41];

  return [v8 setPinchingWeight:0.330000013];
}

double _HDRInitialEDRStrength(void *a1)
{
  id v1 = a1;
  long long v2 = [v1 animationForKey:@"contentsEDRStrength"];
  if (v2)
  {
    uint64_t v3 = [v1 presentationLayer];

    id v1 = (id)v3;
  }
  [v1 contentsEDRStrength];
  double v5 = v4;

  return v5;
}

double _HDRAnimationDuration(double a1, double a2)
{
  double v4 = +[_UIHDRSettingsDomain rootSettings];
  double v5 = v4;
  if (a2 <= a1)
  {
    char v9 = [v4 asymmetricAnimationDurations];
    uint64_t v10 = +[_UIHDRSettingsDomain rootSettings];
    id v11 = v10;
    if (v9) {
      [v10 animationDurationDown];
    }
    else {
      [v10 animationDurationUp];
    }
    double v7 = v12;

    double v8 = a1 - a2;
  }
  else
  {
    [v4 animationDurationUp];
    double v7 = v6;

    double v8 = a2 - a1;
  }
  return v8 * v7;
}

id _HDRSpringAnimation(double a1, double a2)
{
  uint64_t v3 = (void *)[objc_alloc(MEMORY[0x1E4F39C90]) initWithPerceptualDuration:a1 bounce:0.0];
  [v3 setKeyPath:@"contentsEDRStrength"];
  double v4 = [NSNumber numberWithDouble:a2];
  [v3 setFromValue:v4];

  return v3;
}

void ___shouldSuppressHDR_block_invoke()
{
  os_log_t v0 = [MEMORY[0x1E4F28B50] mainBundle];
  id v1 = [v0 bundleIdentifier];

  if (([@"com.move.Realtor" isEqualToString:v1] & 1) != 0
    || [@"com.autotrader.snapit" isEqualToString:v1])
  {
    _MergedGlobals_1084 = 1;
  }
}

void ___commonInit_block_invoke_6(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  long long v2 = objc_alloc_init(_UISEEdgeTypeForceRecognizeGestureFeature);
  [v1 addObject:v2];
}

id _colorByReducingAlphaInLightAddingWhiteWithAlphaInDark(void *a1, void *a2, double a3, double a4)
{
  id v7 = a1;
  id v8 = a2;
  if ([v8 userInterfaceStyle] == 2)
  {
    id v9 = v7;
    [v9 resolvedColorWithTraitCollection:v8];

    id v8 = +[UIColor colorWithWhite:1.0 alpha:a4];
    uint64_t v10 = [v9 _colorBlendedWithColor:v8 compositingFilter:0];
  }
  else
  {
    uint64_t v10 = _colorByReducingAlpha(v7, (uint64_t)v8, a3);
  }

  return v10;
}

uint64_t _UIScreenEdgePanRecognizerShouldLog()
{
  uint64_t result = os_variant_has_internal_diagnostics();
  if (result)
  {
    if (_UIScreenEdgePanRecognizerShouldLog_onceToken != -1) {
      dispatch_once(&_UIScreenEdgePanRecognizerShouldLog_onceToken, &__block_literal_global_272);
    }
    uint64_t v1 = _UIScreenEdgePanRecognizerCachedShouldLog;
    if (_UIScreenEdgePanRecognizerCachedShouldLog == -1)
    {
      long long v2 = _UIKitUserDefaults();
      [v2 synchronize];
      _UIScreenEdgePanRecognizerCachedShouldLog = [v2 BOOLForKey:@"UIScreenEdgePanRecognizerShouldLog"];

      uint64_t v1 = _UIScreenEdgePanRecognizerCachedShouldLog;
    }
    return v1 == 1;
  }
  return result;
}

unint64_t _interfaceOrientedRegionGivenScreenRegion(unint64_t a1, uint64_t a2)
{
  uint64_t v2 = 90;
  uint64_t v3 = -90;
  uint64_t v4 = 180;
  if (a2 != 2) {
    uint64_t v4 = 0;
  }
  if (a2 != 4) {
    uint64_t v3 = v4;
  }
  if (a2 != 3) {
    uint64_t v2 = v3;
  }
  if (a2 == 1) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v2;
  }
  return _rotatedEdgesGivenOrientationInDegrees(a1, v5);
}

uint64_t _regionForLocation(double a1, double a2, CGFloat a3, CGFloat a4, double a5, double a6, double a7)
{
  if (a5 >= 0.0) {
    double v10 = a5;
  }
  else {
    double v10 = 0.0;
  }
  double v11 = a3 + -1.0;
  if (v10 >= v11) {
    CGFloat v12 = v11;
  }
  else {
    CGFloat v12 = v10;
  }
  if (a6 >= 0.0) {
    double v13 = a6;
  }
  else {
    double v13 = 0.0;
  }
  if (v13 >= a4 + -1.0) {
    double v14 = a4 + -1.0;
  }
  else {
    double v14 = v13;
  }
  double v20 = a4 - a7;
  v26.size.double height = a4 - (a4 - a7 + 0.0);
  double rect = a4 - (a4 - a7 + 0.0);
  v26.origin.double x = a1 + 0.0;
  v26.origin.double y = a2 + 0.0;
  double y = v26.origin.y;
  v26.size.CGFloat width = a3;
  v22.double x = v12;
  v22.double y = v14;
  uint64_t v16 = CGRectContainsPoint(v26, v22);
  v27.origin.double x = a1 + a3 - a7;
  v27.origin.double y = y;
  v27.size.CGFloat width = a3 - (a3 - a7 + 0.0);
  v27.size.double height = a4;
  v23.double x = v12;
  v23.double y = v14;
  if (CGRectContainsPoint(v27, v23)) {
    v16 |= 8uLL;
  }
  v28.origin.double y = a2 + v20;
  v28.origin.double x = a1 + 0.0;
  v28.size.CGFloat width = a3;
  v28.size.double height = rect;
  v24.double x = v12;
  v24.double y = v14;
  if (CGRectContainsPoint(v28, v24)) {
    v16 |= 4uLL;
  }
  v29.origin.double x = a1 + 0.0;
  v29.origin.double y = y;
  v29.size.CGFloat width = a3 - (a3 - a7 + 0.0);
  v29.size.double height = a4;
  v25.double x = v12;
  v25.double y = v14;
  if (CGRectContainsPoint(v29, v25)) {
    return v16 | 2;
  }
  else {
    return v16;
  }
}

unint64_t _screenRegionGivenInterfaceOrientedRegion(unint64_t a1, uint64_t a2)
{
  uint64_t v2 = -90;
  uint64_t v3 = 90;
  uint64_t v4 = -180;
  if (a2 != 2) {
    uint64_t v4 = 0;
  }
  if (a2 != 4) {
    uint64_t v3 = v4;
  }
  if (a2 != 3) {
    uint64_t v2 = v3;
  }
  if (a2 == 1) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v2;
  }
  return _rotatedEdgesGivenOrientationInDegrees(a1, v5);
}

__CFString *_formatRegion(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xB) {
    return @"unknown";
  }
  else {
    return off_1E52F1130[a1 - 1];
  }
}

void _UIScreenEdgePanRecognizerShouldLogClear()
{
  _UIScreenEdgePanRecognizerCachedShouldLog = -1;
}

double _TimestampForTouches(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v1 = a1;
  uint64_t v2 = [v1 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v12;
    double v5 = 0.0;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v12 != v4) {
          objc_enumerationMutation(v1);
        }
        id v7 = *(void **)(*((void *)&v11 + 1) + 8 * i);
        objc_msgSend(v7, "timestamp", (void)v11);
        if (v8 > v5)
        {
          [v7 timestamp];
          double v5 = v9;
        }
      }
      uint64_t v3 = [v1 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v3);
  }
  else
  {
    double v5 = 0.0;
  }

  return v5;
}

BOOL _buttonBackgroundColorIndicatesLiftEffect(void *a1)
{
  id v1 = [a1 backgroundColor];
  uint64_t v2 = v1;
  if (v1)
  {
    [v1 alphaComponent];
    BOOL v4 = v3 >= 0.01;
  }
  else
  {
    BOOL v4 = 0;
  }

  return v4;
}

void __roundCursorForBounds(void *a1, double *a2, double a3, double a4)
{
  id v7 = a1;
  BOOL v8 = [v7 effectiveUserInterfaceLayoutDirection] == 1;
  [v7 bounds];
  double v10 = v9;
  double v12 = v11;
  double v14 = v13;
  double v16 = v15;

  __outsetRectWithMinimumSize(v8, 1, v10, v12, v14, v16, a3, a3, a3, a3, a4);
  if (a2) {
    *a2 = v17 * 0.5;
  }
}

double __boundingPointerShapeInContainer(void *a1, void *a2)
{
  id v3 = a1;
  [v3 bounds];
  double v5 = v4;
  if (a2)
  {
    double v6 = [v3 layer];
    [v6 cornerRadius];
    *a2 = v7;
  }
  return v5;
}

double __outsetRectWithMinimumSize(int a1, int a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  if (a2)
  {
    if (a5 >= a6) {
      double v15 = a5;
    }
    else {
      double v15 = a6;
    }
    double v16 = (v15 - a5) * 0.5;
    a7 = v16 + a7;
    a8 = v16 + a8;
  }
  double v17 = a5 + a8 + a7;
  if (v17 >= a11) {
    double v18 = -0.0;
  }
  else {
    double v18 = (a11 - v17) * 0.5;
  }
  double v19 = a8 + v18;
  double v20 = a7 + v18;
  if (a1) {
    double v21 = v19;
  }
  else {
    double v21 = v20;
  }
  return a3 - v21;
}

unint64_t _UIContextualMenuGestureRecognizerIsEventValidForContextualClick(unint64_t result)
{
  if (result)
  {
    id v1 = (void *)result;
    if (([(id)result _modifierFlags] & 0x40000) != 0) {
      return 1;
    }
    else {
      return ((unint64_t)[v1 _buttonMask] >> 1) & 1;
    }
  }
  return result;
}

unint64_t _UIPreviousForceLevel(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 3) {
    return 0xFFFFFFFF80000000;
  }
  else {
    return a1 - 1;
  }
}

void sub_1860B62F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

unint64_t _UINextForceLevel(unint64_t a1)
{
  if (a1 < 3) {
    return a1 + 1;
  }
  else {
    return 0xFFFFFFFF80000000;
  }
}

void __progressObservableCacheKey_block_invoke(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(NSObject **)(__UILogGetCategoryCachedImpl("Warning", &_UIForceLevelDoesNotExist_block_invoke___s_category) + 8);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 134218754;
    uint64_t v5 = v3;
    __int16 v6 = 2048;
    uint64_t v7 = 2;
    __int16 v8 = 2080;
    double v9 = "/Library/Caches/com.apple.xbs/Sources/UIKitCore/Sources/Gestures/Force Level Classifiers/_UIForceLevelClassifier.m";
    __int16 v10 = 2080;
    double v11 = "NSNumber *progressObservableCacheKey(UIPreviewForceState, UIPreviewForceState)_block_invoke";
    _os_log_impl(&dword_1853B0000, v2, OS_LOG_TYPE_ERROR, "WARNING: Min force state %ld is greater than %ld, %s:%s needs to be updated", (uint8_t *)&v4, 0x2Au);
  }
}

void sub_1860B71F0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1860B7330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1860B7A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1860B8580(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1860B86C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

char *copyBytesWithNullAtEnd(char *a1, char *__src, size_t __n)
{
  if (!__src) {
    return 0;
  }
  if (__n >= 0x190) {
    a1 = (char *)malloc_type_malloc(__n + 1, 0x95EA8578uLL);
  }
  uint64_t result = strncpy(a1, __src, __n);
  result[__n] = 0;
  return result;
}

uint64_t TaggingAppearanceGeneralSetterIMP(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9, __n128 a10, __n128 a11, __n128 a12, __n128 a13, __n128 a14, __n128 a15, __n128 a16)
{
  v19[0] = a9;
  v19[1] = a10;
  v19[2] = a11;
  _OWORD v19[3] = a12;
  void v19[4] = a13;
  v19[5] = a14;
  v19[6] = a15;
  v19[7] = a16;
  double v20 = a1;
  double v21 = a2;
  uint64_t v22 = a3;
  uint64_t v23 = a4;
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  uint64_t v26 = a7;
  uint64_t v27 = a8;
  IMP v16 = _ObjectTaggingUtility(a1, a2, v19, (unint64_t)&vars0, vars0, &v18);
  ((void (*)(unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, __n128, __n128, __n128, __n128, __n128, __n128, __n128, __n128))v16)(v18[8].n128_u64[0], v18[8].n128_u64[1], v18[9].n128_u64[0], v18[9].n128_u64[1], v18[10].n128_u64[0], v18[10].n128_u64[1], v18[11].n128_u64[0], v18[11].n128_u64[1], *v18, v18[1], v18[2], v18[3], v18[4], v18[5], v18[6], v18[7]);
  return _ObjectTaggingCleanupUtility();
}

void *_UIInternalContainerClassesForContainerClasses(void *a1, void **a2, int a3)
{
  uint64_t v5 = (void *)[MEMORY[0x1E4F1CA48] array];
  do
  {
    __int16 v6 = (objc_class *)_UIAppearanceInternalContainerClassForContainer(a1);
    if (v6)
    {
      uint64_t v7 = (NSString *)v6;
      if (a3) {
        uint64_t v7 = NSStringFromClass(v6);
      }
      [v5 addObject:v7];
    }
    __int16 v8 = a2++;
    a1 = *v8;
  }
  while (*v8);
  return v5;
}

void *_UIAppearanceUntagObjectForSelector(void *result, const char *a2, void *a3)
{
  if ((__isObjectTaggingEnabled & 1) == 0)
  {
    id AssociatedObject = objc_getAssociatedObject(result, &_UIAppearanceCustomizedSelectorsAssociationKey);
    __int16 v6 = TagForSelectorWithAxes(a2, a3);
    return (void *)[AssociatedObject removeObject:v6];
  }
  return result;
}

IMP _ObjectTaggingUtility(void *a1, const char *a2, void *a3, unint64_t a4, uint64_t a5, void *a6)
{
  v41[2] = *MEMORY[0x1E4F143B8];
  unint64_t v12 = a5 - a4;
  double v13 = a6 + 2;
  if ((void *)((char *)a6 + a5 - a4 + 16) != a3)
  {
    double v40 = (void *)[MEMORY[0x1E4F28B00] currentHandler];
    objc_msgSend(v40, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "IMP _ObjectTaggingUtility(id, SEL, u_int8_t *, u_int8_t *, u_int8_t *, u_int8_t *)"), @"UIAppearance.m", 561, @"Error copying stack frame in appearance proxy tagging.");
  }
  if (a5 != a4 && a6 != (void *)a4)
  {
    unint64_t v14 = v12 >> 2;
    unint64_t v15 = v12 & 3;
    if ((unint64_t)a6 <= a4)
    {
      if (v12 >= 4)
      {
        uint64_t v24 = (int *)(a4 + 16);
        if (v14 <= 1) {
          unint64_t v14 = 1;
        }
        do
        {
          int v25 = *v24++;
          *v13++ = v25;
          --v14;
        }
        while (v14);
      }
      if ((v12 & 3) != 0)
      {
        unint64_t v26 = (v12 & 0xFFFFFFFFFFFFFFFCLL) + 17;
        uint64_t v27 = (char *)a6 + v26;
        CGRect v28 = (char *)(a4 + v26);
        do
        {
          char v29 = *v28++;
          *v27++ = v29;
          --v15;
        }
        while (v15);
      }
    }
    else
    {
      if ((v12 & 3) != 0)
      {
        IMP v16 = (char *)(a5 + 15);
        double v17 = (char *)a6 + a5 + 15 - a4;
        do
        {
          char v18 = *v16--;
          *v17-- = v18;
          --v15;
        }
        while (v15);
      }
      if (v12 >= 4)
      {
        if (v14 <= 1) {
          uint64_t v19 = 1;
        }
        else {
          uint64_t v19 = v12 >> 2;
        }
        uint64_t v20 = 4 * v14 + 12;
        double v21 = (_DWORD *)((char *)a6 + v20);
        uint64_t v22 = (int *)(a4 + v20);
        do
        {
          int v23 = *v22--;
          *v21-- = v23;
          --v19;
        }
        while (v19);
      }
    }
  }
  *a6 = a3;
  double v30 = (void *)[a1 methodSignatureForSelector:a2];
  double v31 = (const char *)[v30 getArgumentTypeAtIndex:2];
  if (!strcmp(v31, "@")
    || !strcmp(v31, "Q")
    || !strcmp(v31, "q")
    || !strcmp(v31, "i")
    || !strcmp(v31, "I")
    || !strcmp(v31, "B")
    || !strcmp(v31, "c"))
  {
    unsigned int v32 = 3;
  }
  else
  {
    unsigned int v32 = 2;
  }
  id v33 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  unint64_t v34 = [v30 numberOfArguments];
  if (v34 >= 4)
  {
    int v35 = 8 * v32;
    unint64_t v36 = v34 - 3;
    do
    {
      if (v32 >= 8) {
        int v37 = 144;
      }
      else {
        int v37 = 128;
      }
      objc_msgSend(v33, "addObject:", objc_msgSend(NSNumber, "numberWithUnsignedInteger:", *(void *)((char *)a3 + (v37 + v35))));
      ++v32;
      v35 += 8;
      --v36;
    }
    while (v36);
  }
  _UIAppearanceTagObjectForSelector(a1, a2, v33);

  if (!qword_1EB260D60) {
    qword_1EB260D60 = (uint64_t)objc_alloc_init(MEMORY[0x1E4F1CA48]);
  }
  v41[0] = a1;
  v41[1] = NSStringFromSelector(a2);
  uint64_t v38 = [MEMORY[0x1E4F1C978] arrayWithObjects:v41 count:2];
  [(id)qword_1EB260D60 addObject:v38];
  PushNextClassForSettingIMP(a1, a2);
  return CurrentOrginalSettingIMP(a1, a2);
}

uint64_t _ObjectTaggingCleanupUtility()
{
  os_log_t v0 = (void *)[(id)qword_1EB260D60 lastObject];
  id v1 = (void *)[v0 objectAtIndexedSubscript:0];
  uint64_t v2 = NSSelectorFromString((NSString *)[v0 objectAtIndexedSubscript:1]);
  id AssociatedObject = objc_getAssociatedObject(v1, &unk_1EB260D5A);
  objc_msgSend((id)objc_msgSend(AssociatedObject, "objectForKey:", NSStringFromSelector(v2)), "removeLastObject");
  int v4 = (void *)qword_1EB260D60;
  return [v4 removeLastObject];
}

uint64_t TaggingAppearanceObjectSetter1IMP(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  _UIAppearanceTagObjectForSelector(a1, a2, objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObject:", objc_msgSend(NSNumber, "numberWithUnsignedInteger:", a4)));
  PushNextClassForSettingIMP(a1, a2);
  IMP v8 = CurrentOrginalSettingIMP(a1, a2);
  ((void (*)(void *, const char *, uint64_t, uint64_t))v8)(a1, a2, a3, a4);
  id AssociatedObject = objc_getAssociatedObject(a1, &unk_1EB260D5A);
  __int16 v10 = (void *)[AssociatedObject objectForKey:NSStringFromSelector(a2)];
  return [v10 removeLastObject];
}

uint64_t TaggingAppearanceIntSetterIMP(void *a1, const char *a2, uint64_t a3)
{
  _UIAppearanceTagObjectForSelector(a1, a2, 0);
  PushNextClassForSettingIMP(a1, a2);
  IMP v6 = CurrentOrginalSettingIMP(a1, a2);
  ((void (*)(void *, const char *, uint64_t))v6)(a1, a2, a3);
  id AssociatedObject = objc_getAssociatedObject(a1, &unk_1EB260D5A);
  IMP v8 = (void *)[AssociatedObject objectForKey:NSStringFromSelector(a2)];
  return [v8 removeLastObject];
}

void sub_1860BA4D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _recursiveExamineAppearancesForTraitCollections(void *a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v4 = [a1 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    char v6 = 0;
    uint64_t v7 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(a1);
        }
        uint64_t v9 = *(void *)(*((void *)&v12 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          if (-[UITraitCollection _containsTraitsInCollectionConsideringTraitsThatCanRepresentUnspecifiedOnly:](a2, v9))
          {
            char v6 = 1;
            return v6 & 1;
          }
        }
        else
        {
          uint64_t v10 = [a1 objectForKey:v9];
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            char v6 = _recursiveExamineAppearancesForTraitCollections(v10, a2);
          }
        }
      }
      uint64_t v5 = [a1 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v5);
  }
  else
  {
    char v6 = 0;
  }
  return v6 & 1;
}

BOOL _enumerateAppearancesHelper(void *a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  char v16 = 0;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v4 = objc_msgSend((id)objc_msgSend(a1, "keyEnumerator"), "allObjects");
  uint64_t v5 = [v4 countByEnumeratingWithState:&v12 objects:v22 count:16];
  if (!v5) {
    return 1;
  }
  uint64_t v6 = *(void *)v13;
  while (2)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      if (*(void *)v13 != v6) {
        objc_enumerationMutation(v4);
      }
      uint64_t v8 = *(void *)(*((void *)&v12 + 1) + 8 * i);
      uint64_t v9 = [a1 objectForKey:v8];
      self;
      if (objc_opt_isKindOfClass())
      {
        (*(void (**)(uint64_t, uint64_t, void *, uint64_t, char *))(a2 + 16))(a2, v9, a1, v8, &v16);
      }
      else
      {
        self;
        if (objc_opt_isKindOfClass())
        {
          char v16 = _enumerateAppearancesHelper(v9, a2) ^ 1;
          uint64_t v18 = 0;
          uint64_t v19 = &v18;
          uint64_t v20 = 0x2020000000;
          char v21 = 0;
          v17[0] = MEMORY[0x1E4F143A8];
          v17[1] = 3221225472;
          void v17[2] = __containsAppearances_block_invoke;
          v17[3] = &unk_1E52F13C0;
          v17[4] = &v18;
          _enumerateAppearancesHelper(v9, v17);
          int v10 = *((unsigned __int8 *)v19 + 24);
          _Block_object_dispose(&v18, 8);
          if (!v10) {
            [a1 removeObjectForKey:v8];
          }
        }
      }
      if (v16) {
        return 0;
      }
    }
    uint64_t v5 = [v4 countByEnumeratingWithState:&v12 objects:v22 count:16];
    if (v5) {
      continue;
    }
    break;
  }
  return v16 == 0;
}

void sub_1860BE100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __containsAppearances_block_invoke(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  *a5 = 1;
  return result;
}

void __encodePathElementIntoData(void *a1, int *a2)
{
  id v3 = a1;
  int v13 = *a2;
  [v3 appendBytes:&v13 length:4];
  uint64_t v4 = *a2;
  if (v4 > 3) {
    unsigned int v5 = 0;
  }
  else {
    unsigned int v5 = dword_186B96D90[v4];
  }
  unsigned int v12 = v5;
  [v3 appendBytes:&v12 length:4];
  if (v12)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v12; ++i)
    {
      float v8 = *(double *)(*((void *)a2 + 1) + v6);
      float v11 = v8;
      [v3 appendBytes:&v11 length:4];
      float v9 = *(double *)(*((void *)a2 + 1) + v6 + 8);
      float v10 = v9;
      [v3 appendBytes:&v10 length:4];
      v6 += 16;
    }
  }
}

void *CountPathElements(void *result)
{
  return result;
}

__n128 RecordPathElements(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  ++*a1;
  unsigned int v4 = *(_DWORD *)a2;
  *(_DWORD *)(v2 + 56 * v3) = *(_DWORD *)a2;
  if (v4 < 2)
  {
    uint64_t v7 = v2 + 56 * v3;
    float v8 = *(__n128 **)(a2 + 8);
    __n128 result = *v8;
    *(__n128 *)(v7 + 8) = *v8;
  }
  else if (v4 == 2)
  {
    uint64_t v9 = v2 + 56 * v3;
    *(_OWORD *)(v9 + 8) = *(_OWORD *)(*(void *)(a2 + 8) + 16);
    float v10 = *(__n128 **)(a2 + 8);
    __n128 result = *v10;
    *(__n128 *)(v9 + 24) = *v10;
  }
  else if (v4 == 3)
  {
    uint64_t v5 = v2 + 56 * v3;
    *(_OWORD *)(v5 + 8) = *(_OWORD *)(*(void *)(a2 + 8) + 32);
    *(_OWORD *)(v5 + 24) = *(_OWORD *)*(void *)(a2 + 8);
    __n128 result = *(__n128 *)(*(void *)(a2 + 8) + 16);
    *(__n128 *)(v5 + 40) = result;
  }
  return result;
}

void raiseWithColorSpaceError(void *a1, const char *a2)
{
  uint64_t v3 = (void *)MEMORY[0x1E4F1CA00];
  uint64_t v4 = *MEMORY[0x1E4F1C3C8];
  id v5 = a1;
  NSStringFromSelector(a2);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "raise:format:", v4, @"*** -%@ not defined for the UIColor %@; need to first convert colorspace.",
    v6,
    v5);
}

double UIColorBlendPlusDarker(double a1, double a2, double a3, double a4, double a5)
{
  double v5 = fabs(a5);
  double v6 = 0.0;
  if (fabs(a4) >= 2.22044605e-16 && v5 >= 2.22044605e-16) {
    return fmin(fmax(a5 - fmin(fmax(a3 - a1 * a3 + a4 - a2, 0.0), 1.0) / a4, 0.0), 1.0);
  }
  return v6;
}

id _UIPinStripeImageColorRef()
{
  return +[UIColor pinStripeColor];
}

char *__colorValuesFromString(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v1 = [a1 componentsSeparatedByString:@","];
  if ((unint64_t)[v1 count] < 3)
  {
    uint64_t v2 = 0;
  }
  else
  {
    uint64_t v2 = (char *)malloc_type_calloc(8uLL, 3uLL, 0xDC169A2AuLL);
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      int v6 = 0;
      uint64_t v7 = *(void *)v14;
LABEL_4:
      uint64_t v8 = 0;
      uint64_t v9 = v6;
      float v10 = &v2[8 * v6];
      while (1)
      {
        if (*(void *)v14 != v7) {
          objc_enumerationMutation(v3);
        }
        if (v9 + v8 == 3) {
          break;
        }
        objc_msgSend(*(id *)(*((void *)&v13 + 1) + 8 * v8), "floatValue", (void)v13);
        *(double *)&v10[8 * v8++] = v11 / 255.0;
        if (v5 == v8)
        {
          uint64_t v5 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
          int v6 = v9 + v8;
          if (v5) {
            goto LABEL_4;
          }
          break;
        }
      }
    }
  }
  return v2;
}

id _colorsByThemeKeytablePlainHeaderFooterBackgroundColor()
{
  v13[5] = *MEMORY[0x1E4F143B8];
  float v11 = _UIThemeKeyFromTraitValues(-1, 0, 0, 0, 0, 0);
  v12[0] = v11;
  os_log_t v0 = [(UIDeviceRGBColor *)[UICachedDeviceRGBColor alloc] initWithRed:0.898039216 green:0.898039216 blue:0.898039216 alpha:1.0];
  v13[0] = v0;
  id v1 = _UIThemeKeyFromTraitValues(-1, 2, 0, 0, 0, 0);
  v12[1] = v1;
  uint64_t v2 = [(UIDeviceRGBColor *)[UICachedDeviceRGBColor alloc] initWithRed:0.196078431 green:0.196078431 blue:0.203921569 alpha:1.0];
  v13[1] = v2;
  id v3 = _UIThemeKeyFromTraitValues(3, 0, 0, 0, 0, 0);
  _OWORD v12[2] = v3;
  uint64_t v4 = [(UIDeviceRGBColor *)[UICachedDeviceRGBColor alloc] initWithRed:0.949019608 green:0.949019608 blue:0.949019608 alpha:1.0];
  v13[2] = v4;
  uint64_t v5 = _UIThemeKeyFromTraitValues(3, 2, 0, 0, 0, 0);
  _OWORD v12[3] = v5;
  int v6 = [(UIDeviceRGBColor *)[UICachedDeviceRGBColor alloc] initWithRed:0.101960784 green:0.101960784 blue:0.101960784 alpha:1.0];
  v13[3] = v6;
  uint64_t v7 = _UIThemeKeyFromTraitValues(3, 2, 0, 0, 0, 1);
  void v12[4] = v7;
  uint64_t v8 = [(UIDeviceWhiteColor *)[UICachedDeviceWhiteColor alloc] initWithWhite:0.0 alpha:1.0];
  void v13[4] = v8;
  uint64_t v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v13 forKeys:v12 count:5];

  return v9;
}

CGColorSpaceRef __DisplayP3ColorSpace_block_invoke()
{
  CGColorSpaceRef result = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DB90]);
  qword_1EB25E438 = (uint64_t)result;
  return result;
}

double UIEdgeInsetsRotate(double a1, double a2, double a3, double a4, double a5)
{
  if (fabs(a5 + -1.57079633) >= 0.00000011920929)
  {
    if (fabs(a5 + -3.14159265) >= 0.00000011920929)
    {
      if (fabs(a5 + 1.57079633) >= 0.00000011920929) {
        return a1;
      }
      else {
        return a4;
      }
    }
    else
    {
      return a3;
    }
  }
  return a2;
}

double _UIPortraitSafeAreaInsetsForSceneHosting(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 window];
  id v3 = [v2 _windowHostingScene];

  if ([v3 _shouldRotateSafeAreaInsetsToInterfaceOrientation])
  {
    uint64_t v4 = [v1 window];
    uint64_t v5 = [v4 interfaceOrientation];

    [v1 safeAreaInsets];
    double v10 = v9;
    if (v5 == 2)
    {
      double v10 = v8;
    }
    else if (v5 == 3)
    {
      double v10 = v7;
    }
    else if (v5 != 4)
    {
      double v10 = v6;
    }
  }
  else
  {
    [v1 safeAreaInsets];
    double v10 = v11;
  }

  return v10;
}

double _UIPortraitFrameForSceneHosting(void *a1)
{
  id v1 = a1;
  [v1 bounds];
  double v3 = v2;
  uint64_t v4 = [v1 _window];
  uint64_t v5 = [v4 _windowHostingScene];
  double v6 = [v5 _screen];

  if (v6)
  {
    [v1 bounds];
    double v8 = v7;
    double v10 = v9;
    double v12 = v11;
    double v14 = v13;
    long long v15 = [v6 fixedCoordinateSpace];
    objc_msgSend(v1, "convertRect:toCoordinateSpace:", v15, v8, v10, v12, v14);
    double v3 = v16;
  }
  if (v4) {
    [v4 interfaceOrientation];
  }

  return v3;
}

double UIEdgeInsetsMin(char a1, double result, double a3, double a4, double a5, double a6)
{
  double v6 = fmin(result, a6);
  if (a1) {
    return v6;
  }
  return result;
}

id UICGAffineTransformDescription(_OWORD *a1)
{
  double v2 = (void *)[@"<CGAffineTransform: " mutableCopy];
  long long v3 = a1[1];
  *(_OWORD *)&vector.CGFloat a = *a1;
  *(_OWORD *)&vector.CGFloat c = v3;
  *(_OWORD *)&vector.tdouble x = a1[2];
  if (CGAffineTransformIsIdentity(&vector))
  {
    uint64_t v4 = @"identity";
    goto LABEL_23;
  }
  long long v5 = a1[1];
  *(_OWORD *)&transform.CGFloat a = *a1;
  *(_OWORD *)&transform.CGFloat c = v5;
  *(_OWORD *)&transform.tdouble x = a1[2];
  memset(&vector, 0, sizeof(vector));
  CGAffineTransformDecompose((CGAffineTransformComponents *)&vector, &transform);
  CGFloat a = vector.a;
  CGFloat b = vector.b;
  BOOL v8 = vector.b != 1.0 || vector.a != 1.0;
  if (v8)
  {
    double v9 = NSStringFromCGSize(*(CGSize *)&a);
    [v2 appendFormat:@"scale = %@", v9];
  }
  tdouble x = vector.tx;
  if (fabs(vector.tx) >= 2.22044605e-16 || fabs(vector.ty) >= 2.22044605e-16)
  {
    if (v8)
    {
      [v2 appendString:@", "];
      tdouble x = vector.tx;
    }
    tdouble y = vector.ty;
    double v13 = NSStringFromCGVector(*(CGVector *)&tx);
    [v2 appendFormat:@"translatiouint64_t n = %@", v13];

    if (fabs(vector.d) < 2.22044605e-16) {
      goto LABEL_18;
    }
LABEL_16:
    [v2 appendString:@", "];
    CGFloat d = vector.d;
LABEL_17:
    objc_msgSend(v2, "appendFormat:", @"rotatiouint64_t n = %f", *(void *)&d);
LABEL_18:
    BOOL v8 = 1;
    goto LABEL_19;
  }
  CGFloat d = vector.d;
  if (fabs(vector.d) >= 2.22044605e-16)
  {
    if (!v8) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
LABEL_19:
  CGFloat c = vector.c;
  if (fabs(vector.c) < 2.22044605e-16) {
    goto LABEL_24;
  }
  if (v8)
  {
    [v2 appendString:@", "];
    CGFloat c = vector.c;
  }
  CGFloat v17 = c;
  uint64_t v4 = @"horizontalShear = %f";
LABEL_23:
  objc_msgSend(v2, "appendFormat:", v4, *(void *)&v17);
LABEL_24:
  [v2 appendString:@">"];
  long long v15 = (void *)[v2 copy];

  return v15;
}

NSString *__cdecl NSStringFromCGVector(CGVector vector)
{
  id v1 = (__CFString *)CFStringCreateWithFormat(0, 0, @"{%.*g, %.*g}", 17, *(void *)&vector.dx, 17, *(void *)&vector.dy);
  return (NSString *)v1;
}

double UIDistanceBetweenRects(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  if (CGRectIsNull(*(CGRect *)&a1)) {
    return 1.79769313e308;
  }
  v30.origin.double x = a5;
  v30.origin.double y = a6;
  v30.size.CGFloat width = a7;
  v30.size.double height = a8;
  if (CGRectIsNull(v30)) {
    return 1.79769313e308;
  }
  v31.origin.double x = a1;
  v31.origin.double y = a2;
  v31.size.CGFloat width = a3;
  v31.size.double height = a4;
  v40.origin.double x = a5;
  v40.origin.double y = a6;
  v40.size.CGFloat width = a7;
  v40.size.double height = a8;
  BOOL v17 = CGRectIntersectsRect(v31, v40);
  double result = 0.0;
  if (!v17)
  {
    v32.origin.double x = a1;
    v32.origin.double y = a2;
    v32.size.CGFloat width = a3;
    v32.size.double height = a4;
    double MinX = CGRectGetMinX(v32);
    v33.origin.double x = a1;
    v33.origin.double y = a2;
    v33.size.CGFloat width = a3;
    v33.size.double height = a4;
    double MinY = CGRectGetMinY(v33);
    v34.origin.double x = a1;
    v34.origin.double y = a2;
    v34.size.CGFloat width = a3;
    v34.size.double height = a4;
    double MaxX = CGRectGetMaxX(v34);
    v35.origin.double x = a1;
    v35.origin.double y = a2;
    v35.size.CGFloat width = a3;
    v35.size.double height = a4;
    double MaxY = CGRectGetMaxY(v35);
    v36.origin.double x = a5;
    v36.origin.double y = a6;
    v36.size.CGFloat width = a7;
    v36.size.double height = a8;
    double v19 = CGRectGetMinX(v36);
    v37.origin.double x = a5;
    v37.origin.double y = a6;
    v37.size.CGFloat width = a7;
    v37.size.double height = a8;
    double v20 = CGRectGetMinY(v37);
    v38.origin.double x = a5;
    v38.origin.double y = a6;
    v38.size.CGFloat width = a7;
    v38.size.double height = a8;
    double v21 = CGRectGetMaxX(v38);
    v39.origin.double x = a5;
    v39.origin.double y = a6;
    v39.size.CGFloat width = a7;
    v39.size.double height = a8;
    double v22 = CGRectGetMaxY(v39);
    if (v21 <= MinX && v22 <= MinY)
    {
      double v23 = MinX - v21;
LABEL_9:
      double v24 = MinY - v22;
      double v25 = v23;
LABEL_14:
      return hypot(v25, v24);
    }
    if (v21 > MinX || MaxY > v20)
    {
      if (MaxX <= v19 && v22 <= MinY)
      {
        double v23 = v19 - MaxX;
        goto LABEL_9;
      }
      if (MaxX > v19 || MaxY > v20)
      {
        if (v21 <= MinX) {
          return MinX - v21;
        }
        if (MaxX <= v19) {
          return v19 - MaxX;
        }
        if (v22 <= MinY) {
          return MinY - v22;
        }
        if (MaxY <= v20) {
          return v20 - MaxY;
        }
        return 1.79769313e308;
      }
      double v25 = v19 - MaxX;
    }
    else
    {
      double v25 = MinX - v21;
    }
    double v24 = v20 - MaxY;
    goto LABEL_14;
  }
  return result;
}

double UIMidPointBetweenPoints(double a1, double a2, double a3)
{
  return (a1 + a3) * 0.5;
}

double UILowPassFilteredCGPoint(double a1, double a2, double a3, double a4)
{
  return a2 * a1 + (1.0 - a1) * a4;
}

double UILowPassFilteredCGFloat(double a1, double a2, double a3)
{
  return a1 * a2 + (1.0 - a1) * a3;
}

double UIDistanceBetweenPointAndLine(double a1, double a2, double a3, double a4, double a5, double a6)
{
  double v6 = vabdd_f64(a4 * a5 + a1 * (a6 - a4) - a2 * (a5 - a3), a3 * a6);
  double v7 = sqrt((a6 - a4) * (a6 - a4) + (a5 - a3) * (a5 - a3));
  double result = v6 / v7;
  if (fabs(v7) < 2.22044605e-16) {
    return 1.79769313e308;
  }
  return result;
}

long double UIPointAlongLine(double a1, double a2, double a3, double a4, double a5)
{
  return a1 + (a3 - a1) / hypot(a3 - a1, a4 - a2) * a5;
}

double UINormalizePoint(double a1, double a2)
{
  double v2 = *MEMORY[0x1E4F1DAD8];
  if (a1 != *MEMORY[0x1E4F1DAD8] || a2 != *(double *)(MEMORY[0x1E4F1DAD8] + 8)) {
    return a1 * (1.0 / sqrt(a1 * a1 + a2 * a2));
  }
  return v2;
}

double UIPointLength(double a1, double a2)
{
  return sqrt(a1 * a1 + a2 * a2);
}

double UIDistanceBetweenPointAndPolygon(void *a1, double a2, double a3)
{
  id v5 = a1;
  uint64_t v12 = 0;
  double v13 = (double *)&v12;
  uint64_t v14 = 0x2020000000;
  uint64_t v15 = 0x7FEFFFFFFFFFFFFFLL;
  if (objc_msgSend(v5, "containsPoint:", a2, a3))
  {
    v13[3] = 0.0;
    double v6 = 0.0;
  }
  else
  {
    v11[0] = 0;
    v11[1] = v11;
    v11[2] = 0x3010000000;
    void v11[4] = 0;
    v11[5] = 0;
    void v11[3] = &unk_186D7DBA7;
    v10[0] = 0;
    v10[1] = v10;
    v10[2] = 0x3010000000;
    void v10[4] = 0;
    v10[5] = 0;
    v10[3] = &unk_186D7DBA7;
    double v7 = (const CGPath *)[v5 CGPath];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __UIDistanceBetweenPointAndPolygon_block_invoke;
    block[3] = &unk_1E52F15C8;
    *(double *)&block[7] = a2;
    *(double *)&block[8] = a3;
    void block[4] = v11;
    void block[5] = v10;
    block[6] = &v12;
    CGPathApplyWithBlock(v7, block);
    _Block_object_dispose(v10, 8);
    _Block_object_dispose(v11, 8);
    double v6 = v13[3];
  }
  _Block_object_dispose(&v12, 8);

  return v6;
}

void sub_1860CD4A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __UIDistanceBetweenPointAndPolygon_block_invoke(uint64_t result, int *a2)
{
  int v2 = *a2;
  if (*a2 == 4)
  {
    uint64_t v7 = *(void *)(*(void *)(result + 32) + 8);
    double v4 = *(double *)(v7 + 32);
    double v5 = *(double *)(v7 + 40);
  }
  else
  {
    long long v3 = (double *)*((void *)a2 + 1);
    double v4 = *v3;
    double v5 = v3[1];
    if (v2 != 1)
    {
      if (!v2)
      {
        uint64_t v6 = *(void *)(*(void *)(result + 32) + 8);
        *(double *)(v6 + 32) = v4;
        *(double *)(v6 + 40) = v5;
      }
      goto LABEL_17;
    }
  }
  uint64_t v8 = *(void *)(*(void *)(result + 40) + 8);
  double v10 = *(double *)(result + 56);
  double v9 = *(double *)(result + 64);
  double v12 = *(double *)(v8 + 32);
  double v11 = *(double *)(v8 + 40);
  float v13 = v4 - v12;
  float v14 = v5 - v11;
  double v15 = ((v10 - v12) * (v4 - v12) + (v9 - v11) * (v5 - v11)) / (float)((float)(v13 * v13) + (float)(v14 * v14));
  if (v15 > 0.0 && v15 < 1.0)
  {
    double v18 = sqrt((v12 + (v4 - v12) * v15 - v10) * (v12 + (v4 - v12) * v15 - v10)+ (v11 + (v5 - v11) * v15 - v9) * (v11 + (v5 - v11) * v15 - v9));
  }
  else
  {
    double v17 = sqrt((v12 - v10) * (v12 - v10) + (v11 - v9) * (v11 - v9));
    double v18 = sqrt((v4 - v10) * (v4 - v10) + (v5 - v9) * (v5 - v9));
    if (v17 < v18) {
      double v18 = v17;
    }
  }
  uint64_t v19 = *(void *)(*(void *)(result + 48) + 8);
  if (*(double *)(v19 + 24) < v18) {
    double v18 = *(double *)(v19 + 24);
  }
  *(double *)(v19 + 24) = v18;
LABEL_17:
  uint64_t v20 = *(void *)(*(void *)(result + 40) + 8);
  *(double *)(v20 + 32) = v4;
  *(double *)(v20 + 40) = v5;
  return result;
}

BOOL UIPointIsDiscrete(double a1, double a2)
{
  BOOL result = 0;
  if (fabs(a1) != INFINITY) {
    return fabs(a2) != INFINITY;
  }
  return result;
}

BOOL UIRectContainsPointInYAxis(double a1, double a2, double a3, double a4, double a5, double a6)
{
  return a6 <= a2 + a4 && a2 <= a6;
}

BOOL UIRectContainsRectWithAccuracy(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  CGRect v27 = CGRectInset(*(CGRect *)&a1, -a9, -a9);
  double v21 = a5;
  double v22 = a6;
  double v23 = a7;
  double v24 = a8;
  return CGRectContainsRect(v27, *(CGRect *)&v21);
}

double UIEdgeInsetsIntegralWithScale(double a1, double a2, double a3, double a4, double a5)
{
  double v7 = a5;
  if (a5 == 0.0)
  {
    if (AdjustToScale_onceToken_0 != -1) {
      dispatch_once(&AdjustToScale_onceToken_0, &__block_literal_global_279);
    }
    double v7 = *(double *)&AdjustToScale___s_0;
  }
  if (v7 == 1.0) {
    double v8 = round(a1);
  }
  else {
    double v8 = round(a1 * v7) / v7;
  }
  if (a5 == 0.0 && AdjustToScale_onceToken_0 != -1) {
    dispatch_once(&AdjustToScale_onceToken_0, &__block_literal_global_279);
  }
  if (a5 == 0.0 && AdjustToScale_onceToken_0 != -1) {
    dispatch_once(&AdjustToScale_onceToken_0, &__block_literal_global_279);
  }
  if (a5 == 0.0 && AdjustToScale_onceToken_0 != -1) {
    dispatch_once(&AdjustToScale_onceToken_0, &__block_literal_global_279);
  }
  return v8;
}

double UISizeCeilToScale(double a1, double a2, double a3)
{
  UICeilToScale(a1, a3);
  double v6 = v5;
  UICeilToScale(a2, a3);
  return v6;
}

double _UIIntersectionPointOfRayWithRect(double a1, double a2, double a3, double a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  v32.origin.double x = a5;
  v32.origin.double y = a6;
  v32.size.CGFloat width = a7;
  v32.size.double height = a8;
  double MinX = CGRectGetMinX(v32);
  v33.origin.double x = a5;
  v33.origin.double y = a6;
  v33.size.CGFloat width = a7;
  v33.size.double height = a8;
  double MaxX = CGRectGetMaxX(v33);
  v34.origin.double x = a5;
  v34.origin.double y = a6;
  v34.size.CGFloat width = a7;
  v34.size.double height = a8;
  double MinY = CGRectGetMinY(v34);
  v35.origin.double x = a5;
  v35.origin.double y = a6;
  v35.size.CGFloat width = a7;
  v35.size.double height = a8;
  double MaxY = CGRectGetMaxY(v35);
  if (a1 < MinX || a1 > MaxX || a2 < MinY || a2 > MaxY)
  {
    if (a3 == 0.0)
    {
      if (a1 < MinX || a1 > MaxX) {
        return *MEMORY[0x1E4F1DB20];
      }
      double v23 = -INFINITY;
      double v21 = INFINITY;
    }
    else
    {
      double v20 = (MinX - a1) / a3;
      double v21 = (MaxX - a1) / a3;
      if (v20 >= v21) {
        double v22 = (MaxX - a1) / a3;
      }
      else {
        double v22 = (MinX - a1) / a3;
      }
      if (v20 >= v21) {
        double v21 = (MinX - a1) / a3;
      }
      double v23 = fmax(v22, -INFINITY);
    }
    if (a4 == 0.0)
    {
      if (a2 < MinY || a2 > MaxY) {
        return *MEMORY[0x1E4F1DB20];
      }
    }
    else
    {
      double v24 = (MinY - a2) / a4;
      double v25 = (MaxY - a2) / a4;
      if (v24 >= v25) {
        double v26 = v25;
      }
      else {
        double v26 = (MinY - a2) / a4;
      }
      if (v24 >= v25) {
        double v25 = (MinY - a2) / a4;
      }
      if (v23 < v26) {
        double v23 = v26;
      }
      if (v21 >= v25) {
        double v21 = v25;
      }
    }
    double v27 = 0.0;
    if (v23 >= 0.0) {
      double v27 = v23;
    }
    if (v21 > v27) {
      return (a1 + a3) * v23 + a1 * (1.0 - v23);
    }
    return *MEMORY[0x1E4F1DB20];
  }
  return a1;
}

double UIRectIntegralWithViewScale(void *a1, double a2, double a3, double a4, double a5)
{
  [a1 _currentScreenScale];
  return UIRectIntegralWithScale(a2, a3, a4, a5, v9);
}

double UIRectGetCorners(double *a1, double a2, double a3, double a4, double a5)
{
  *a1 = a2;
  a1[1] = a3;
  double v5 = a3 + a5;
  a1[2] = a2;
  a1[3] = v5;
  double result = a2 + a4;
  a1[4] = result;
  a1[5] = v5;
  a1[6] = result;
  a1[7] = a3;
  return result;
}

double UIRectContainInRect(double a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double v14 = a1;
  double MinX = CGRectGetMinX(*(CGRect *)&a1);
  v22.origin.double x = a5;
  v22.origin.double y = a6;
  v22.size.CGFloat width = a7;
  v22.size.double height = a8;
  if (MinX >= CGRectGetMinX(v22))
  {
    v24.origin.double x = v14;
    v24.origin.double y = a2;
    v24.size.CGFloat width = a3;
    v24.size.double height = a4;
    double MaxX = CGRectGetMaxX(v24);
    v25.origin.double x = a5;
    v25.origin.double y = a6;
    v25.size.CGFloat width = a7;
    v25.size.double height = a8;
    if (MaxX > CGRectGetMaxX(v25))
    {
      v26.origin.double x = a5;
      v26.origin.double y = a6;
      v26.size.CGFloat width = a7;
      v26.size.double height = a8;
      double v17 = CGRectGetMaxX(v26);
      v27.origin.double x = v14;
      v27.origin.double y = a2;
      v27.size.CGFloat width = a3;
      v27.size.double height = a4;
      double v14 = v17 - CGRectGetWidth(v27);
    }
  }
  else
  {
    v23.origin.double x = a5;
    v23.origin.double y = a6;
    v23.size.CGFloat width = a7;
    v23.size.double height = a8;
    double v14 = CGRectGetMinX(v23);
  }
  v28.origin.double x = v14;
  v28.origin.double y = a2;
  v28.size.CGFloat width = a3;
  v28.size.double height = a4;
  double MinY = CGRectGetMinY(v28);
  v29.origin.double x = a5;
  v29.origin.double y = a6;
  v29.size.CGFloat width = a7;
  v29.size.double height = a8;
  if (MinY >= CGRectGetMinY(v29))
  {
    v31.origin.double x = v14;
    v31.origin.double y = a2;
    v31.size.CGFloat width = a3;
    v31.size.double height = a4;
    double MaxY = CGRectGetMaxY(v31);
    v32.origin.double x = a5;
    v32.origin.double y = a6;
    v32.size.CGFloat width = a7;
    v32.size.double height = a8;
    if (MaxY > CGRectGetMaxY(v32))
    {
      v33.origin.double x = a5;
      v33.origin.double y = a6;
      v33.size.CGFloat width = a7;
      v33.size.double height = a8;
      CGRectGetMaxY(v33);
      v34.origin.double x = v14;
      v34.origin.double y = a2;
      v34.size.CGFloat width = a3;
      v34.size.double height = a4;
      CGRectGetHeight(v34);
    }
  }
  else
  {
    v30.origin.double x = a5;
    v30.origin.double y = a6;
    v30.size.CGFloat width = a7;
    v30.size.double height = a8;
    CGRectGetMinY(v30);
  }
  return v14;
}

double UIPointIntegral(double a1)
{
  return floor(a1);
}

CGAffineTransform *_UITransformLerp@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  memset(&v17, 0, sizeof(v17));
  long long v6 = a1[1];
  *(_OWORD *)&transform.CGFloat a = *a1;
  *(_OWORD *)&transform.CGFloat c = v6;
  *(_OWORD *)&transform.tdouble x = a1[2];
  CGAffineTransformDecompose(&v17, &transform);
  long long v7 = a2[1];
  *(_OWORD *)&v15.CGFloat a = *a2;
  *(_OWORD *)&v15.CGFloat c = v7;
  *(_OWORD *)&v15.tdouble x = a2[2];
  memset(&transform, 0, sizeof(transform));
  float64x2_t v12 = vmulq_n_f64((float64x2_t)v17.scale, 1.0 - a4);
  float64x2_t v13 = vmulq_n_f64((float64x2_t)v17.translation, 1.0 - a4);
  CGAffineTransformDecompose((CGAffineTransformComponents *)&transform, &v15);
  float64x2_t v8 = *(float64x2_t *)&transform.c;
  float64x2_t v9 = vaddq_f64(v12, vmulq_n_f64(*(float64x2_t *)&transform.a, a4));
  float64x2_t v10 = vaddq_f64(v13, vmulq_n_f64(*(float64x2_t *)&transform.tx, a4));
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(float64x2_t *)&v15.CGFloat a = v9;
  *(float64x2_t *)&v15.CGFloat c = vaddq_f64(vmulq_n_f64(*(float64x2_t *)&v17.horizontalShear, 1.0 - a4), vmulq_n_f64(v8, a4));
  *(float64x2_t *)&v15.tdouble x = v10;
  return CGAffineTransformMakeWithComponents((CGAffineTransform *)a3, (CGAffineTransformComponents *)&v15);
}

CGAffineTransform *_UIScaleTransformForAspectFillOfSizeInTargetSize@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  return _UIScaleTransformForAspectFitOrFillOfSizeInTargetSize(0, a1, a2, a3, a4, a5);
}

double _UICGRectInsetZeroClamped(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, double a6)
{
  double v12 = CGRectGetWidth(*(CGRect *)&a1) * 0.5;
  if (v12 <= a5) {
    a5 = v12;
  }
  v21.origin.double x = a1;
  v21.origin.double y = a2;
  v21.size.CGFloat width = a3;
  v21.size.double height = a4;
  double v13 = CGRectGetHeight(v21) * 0.5;
  if (v13 <= a6) {
    double v14 = v13;
  }
  else {
    double v14 = a6;
  }
  CGFloat v15 = a1;
  CGFloat v16 = a2;
  CGFloat v17 = a3;
  CGFloat v18 = a4;
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&v15, a5, v14);
  return result;
}

uint64_t UIRectCornersAtEdges(char a1)
{
  return ((~a1 & 3) == 0) | (2 * ((~a1 & 9) == 0)) | (4 * ((~a1 & 6) == 0)) | (8 * ((~a1 & 0xC) == 0));
}

unint64_t _UICGAffineTransformHasFiniteMembers(float64x2_t *a1)
{
  float64x2_t v1 = a1[1];
  float64x2_t v2 = a1[2];
  *(int32x2_t *)v3.i8 = vmovn_s64((int64x2_t)vorrq_s8((int8x16_t)vcltzq_f64(v2), (int8x16_t)vcgezq_f64(v2)));
  v3.i64[1] = -1;
  int8x16_t v4 = (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f64(*a1), (int8x16_t)vcgezq_f64(*a1)), (int32x4_t)vorrq_s8((int8x16_t)vcltzq_f64(v1), (int8x16_t)vcgezq_f64(v1))), v3);
  float64x2_t v5 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
  *(int32x2_t *)&v2.f64[0] = vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vceqq_f64(vabsq_f64(v2), v5)));
  v2.f64[1] = NAN;
  int8x8_t v6 = vmovn_s16((int16x8_t)vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(vabsq_f64(*a1), v5), (int32x4_t)vceqq_f64(vabsq_f64(v1), v5))), (int16x8_t)v2), v4));
  LODWORD(v1.f64[0]) = v6.u8[4];
  HIDWORD(v1.f64[0]) = v6.u8[5];
  LODWORD(v2.f64[0]) = v6.u8[0];
  HIDWORD(v2.f64[0]) = v6.u8[1];
  v4.i32[0] = v6.u8[6];
  v4.i32[1] = v6.u8[7];
  v7.i32[0] = v6.u8[2];
  v7.i32[1] = v6.u8[3];
  int8x8_t v8 = vand_s8(vand_s8(*(int8x8_t *)&v2.f64[0], *(int8x8_t *)&v1.f64[0]), vand_s8(v7, *(int8x8_t *)v4.i8));
  v9.i64[0] = v8.u32[0];
  v9.i64[1] = v8.u32[1];
  int64x2_t v10 = vcltzq_s64(vshlq_n_s64(v9, 0x3FuLL));
  return vandq_s8((int8x16_t)v10, (int8x16_t)vdupq_laneq_s64(v10, 1)).u64[0] >> 63;
}

unint64_t _UICATransform3DHasFiniteMembers(float64x2_t *a1)
{
  float64x2_t v1 = a1[1];
  float64x2_t v2 = a1[2];
  float64x2_t v3 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
  *(int8x8_t *)&v1.f64[0] = vmovn_s16((int16x8_t)vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f64(*a1), (int8x16_t)vcgezq_f64(*a1)), (int32x4_t)vorrq_s8((int8x16_t)vcltzq_f64(v1), (int8x16_t)vcgezq_f64(v1))), (int16x8_t)vuzp1q_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f64(v2), (int8x16_t)vcgezq_f64(v2)), (int32x4_t)vorrq_s8((int8x16_t)vcltzq_f64(a1[3]), (int8x16_t)vcgezq_f64(a1[3])))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(vabsq_f64(*a1), v3), (int32x4_t)vceqq_f64(vabsq_f64(v1), v3)),
                                                                (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(vabsq_f64(v2), v3), (int32x4_t)vceqq_f64(vabsq_f64(a1[3]), v3)))));
  LODWORD(v2.f64[0]) = BYTE4(v1.f64[0]);
  HIDWORD(v2.f64[0]) = BYTE5(v1.f64[0]);
  v4.i32[0] = LOBYTE(v1.f64[0]);
  v4.i32[1] = BYTE1(v1.f64[0]);
  v5.i32[0] = BYTE6(v1.f64[0]);
  v5.i32[1] = HIBYTE(v1.f64[0]);
  v6.i32[0] = BYTE2(v1.f64[0]);
  v6.i32[1] = BYTE3(v1.f64[0]);
  *(int8x8_t *)&v1.f64[0] = vand_s8(vand_s8(v4, *(int8x8_t *)&v2.f64[0]), vand_s8(v6, v5));
  v7.i64[0] = LODWORD(v1.f64[0]);
  v7.i64[1] = HIDWORD(v1.f64[0]);
  int64x2_t v8 = vcltzq_s64(vshlq_n_s64(v7, 0x3FuLL));
  if ((vandq_s8((int8x16_t)v8, (int8x16_t)vdupq_laneq_s64(v8, 1)).u64[0] & 0x8000000000000000) == 0) {
    return 0;
  }
  float64x2_t v10 = a1[4];
  float64x2_t v11 = a1[5];
  int8x8_t v12 = vmovn_s16((int16x8_t)vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f64(v10), (int8x16_t)vcgezq_f64(v10)), (int32x4_t)vorrq_s8((int8x16_t)vcltzq_f64(v11), (int8x16_t)vcgezq_f64(v11))), (int16x8_t)vuzp1q_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f64(a1[6]), (int8x16_t)vcgezq_f64(a1[6])), (int32x4_t)vorrq_s8((int8x16_t)vcltzq_f64(a1[7]), (int8x16_t)vcgezq_f64(a1[7])))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(vabsq_f64(v10), v3), (int32x4_t)vceqq_f64(vabsq_f64(v11), v3)),
                                            (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(vabsq_f64(a1[6]), v3), (int32x4_t)vceqq_f64(vabsq_f64(a1[7]), v3)))));
  LODWORD(v10.f64[0]) = v12.u8[4];
  HIDWORD(v10.f64[0]) = v12.u8[5];
  LODWORD(v11.f64[0]) = v12.u8[0];
  HIDWORD(v11.f64[0]) = v12.u8[1];
  v13.i32[0] = v12.u8[6];
  v13.i32[1] = v12.u8[7];
  v14.i32[0] = v12.u8[2];
  v14.i32[1] = v12.u8[3];
  int8x8_t v15 = vand_s8(vand_s8(*(int8x8_t *)&v11.f64[0], *(int8x8_t *)&v10.f64[0]), vand_s8(v14, v13));
  v16.i64[0] = v15.u32[0];
  v16.i64[1] = v15.u32[1];
  int64x2_t v17 = vcltzq_s64(vshlq_n_s64(v16, 0x3FuLL));
  return vandq_s8((int8x16_t)v17, (int8x16_t)vdupq_laneq_s64(v17, 1)).u64[0] >> 63;
}

__CFString *_NSStringFromCAPoint3D(double a1, double a2, double a3)
{
  float64x2_t v3 = (__CFString *)CFStringCreateWithFormat(0, 0, @"{%.*g, %.*g, %.*g}", 17, *(void *)&a1, 17, *(void *)&a2, 17, *(void *)&a3);
  return v3;
}

__CFString *_NSStringFromCATransform3D(void *a1)
{
  float64x2_t v1 = (__CFString *)CFStringCreateWithFormat(0, 0, @"[%.*g, %.*g, %.*g, %.*g, %.*g, %.*g, %.*g, %.*g, %.*g, %.*g, %.*g, %.*g, %.*g, %.*g, %.*g, %.*g]", 17, *a1, 17, a1[1], 17, a1[2], 17, a1[3], 17, a1[4], 17, a1[5], 17, a1[6], 17, a1[7],
                       17,
                       a1[8],
                       17,
                       a1[9],
                       17,
                       a1[10],
                       17,
                       a1[11],
                       17,
                       a1[12],
                       17,
                       a1[13],
                       17,
                       a1[14],
                       17,
                       a1[15]);
  return v1;
}

NSString *__cdecl NSStringFromCGAffineTransform(CGAffineTransform *transform)
{
  float64x2_t v1 = (__CFString *)CFStringCreateWithFormat(0, 0, @"[%.*g, %.*g, %.*g, %.*g, %.*g, %.*g]", 17, *(void *)&transform->a, 17, *(void *)&transform->b, 17, *(void *)&transform->c, 17, *(void *)&transform->d, 17, *(void *)&transform->tx, 17, *(void *)&transform->ty);
  return (NSString *)v1;
}

NSString *__cdecl NSStringFromUIOffset(UIOffset offset)
{
  float64x2_t v1 = (__CFString *)CFStringCreateWithFormat(0, 0, @"{%.*g, %.*g}", 17, *(void *)&offset.horizontal, 17, *(void *)&offset.vertical);
  return (NSString *)v1;
}

__CFString *NSStringFromUIRectCornerRadii(double a1, double a2, double a3, double a4)
{
  int8x8_t v4 = (__CFString *)CFStringCreateWithFormat(0, 0, @"{%.*g, %.*g, %.*g, %.*g}", 17, *(void *)&a1, 17, *(void *)&a2, 17, *(void *)&a3, 17, *(void *)&a4);
  return v4;
}

__CFString *_NSStringFromCAFrameRateRange(float a1, float a2, float a3)
{
  float64x2_t v3 = (__CFString *)CFStringCreateWithFormat(0, 0, @"{%d, %d, %d}", (int)a1, (int)a2, (int)a3);
  return v3;
}

CGVector CGVectorFromString(NSString *string)
{
  float64x2_t v1 = string;
  double v2 = 0.0;
  if ([(NSString *)v1 length] < 5)
  {
    double DoubleValue = 0.0;
  }
  else
  {
    CFStringRef v8 = 0;
    CFStringRef str = 0;
    double DoubleValue = 0.0;
    if (SplitBracesAndComma(v1, &str, &v8))
    {
      CFStringRef v4 = str;
      double DoubleValue = CFStringGetDoubleValue(str);
      CFStringRef v5 = v8;
      double v2 = CFStringGetDoubleValue(v8);
      CFRelease(v4);
      CFRelease(v5);
    }
  }

  double v6 = DoubleValue;
  double v7 = v2;
  result.ddouble y = v7;
  result.ddouble x = v6;
  return result;
}

CGRect CGRectFromString(NSString *string)
{
  float64x2_t v1 = string;
  CGFloat x = *MEMORY[0x1E4F1DB28];
  CGFloat y = *(double *)(MEMORY[0x1E4F1DB28] + 8);
  CGFloat width = *(double *)(MEMORY[0x1E4F1DB28] + 16);
  CGFloat height = *(double *)(MEMORY[0x1E4F1DB28] + 24);
  if ([(NSString *)v1 length] >= 0xD)
  {
    int8x8_t v14 = 0;
    stringCGFloat a = 0;
    if (SplitBracesAndComma(v1, (CFStringRef *)&stringa, (CFStringRef *)&v14))
    {
      double v6 = stringa;
      CGPoint v7 = CGPointFromString(stringa);
      CGFloat x = v7.x;
      CGFloat y = v7.y;
      CFStringRef v8 = v14;
      CGSize v9 = CGSizeFromString(v14);
      CGFloat width = v9.width;
      CGFloat height = v9.height;
      CFRelease(v6);
      CFRelease(v8);
    }
  }

  double v10 = x;
  double v11 = y;
  double v12 = width;
  double v13 = height;
  result.size.CGFloat height = v13;
  result.size.CGFloat width = v12;
  result.origin.CGFloat y = v11;
  result.origin.CGFloat x = v10;
  return result;
}

CGAffineTransform *__cdecl CGAffineTransformFromString(CGAffineTransform *__return_ptr retstr, NSString *string)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  CFStringRef v8 = string;
  if ([(NSString *)v8 length] >= 0xD && ParseNumbersWithDelimiter(v8, (uint64_t)v9, 6))
  {
    long long v3 = v9[1];
    *(_OWORD *)&retstr->CGFloat a = v9[0];
    *(_OWORD *)&retstr->CGFloat c = v3;
    long long v4 = v9[2];
  }
  else
  {
    uint64_t v5 = MEMORY[0x1E4F1DAB8];
    long long v6 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
    *(_OWORD *)&retstr->CGFloat a = *MEMORY[0x1E4F1DAB8];
    *(_OWORD *)&retstr->CGFloat c = v6;
    long long v4 = *(_OWORD *)(v5 + 32);
  }
  *(_OWORD *)&retstr->tCGFloat x = v4;

  return result;
}

double _CAPoint3DFromString(void *a1)
{
  v5[3] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if ((unint64_t)[v1 length] >= 7 && ParseNumbersWithDelimiter(v1, (uint64_t)v5, 3)) {
    double v2 = (double *)v5;
  }
  else {
    double v2 = (double *)MEMORY[0x1E4F39B00];
  }
  double v3 = *v2;

  return v3;
}

NSDirectionalEdgeInsets NSDirectionalEdgeInsetsFromString(NSString *string)
{
  void v10[4] = *MEMORY[0x1E4F143B8];
  id v1 = string;
  double v2 = 0.0;
  if ([(NSString *)v1 length] < 9)
  {
    double v3 = 0.0;
    double v4 = 0.0;
    double v5 = 0.0;
  }
  else
  {
    double v3 = 0.0;
    double v4 = 0.0;
    double v5 = 0.0;
    if (ParseNumbersWithDelimiter(v1, (uint64_t)v10, 4))
    {
      double v4 = *(double *)v10;
      double v3 = *(double *)&v10[1];
      double v2 = *(double *)&v10[2];
      double v5 = *(double *)&v10[3];
    }
  }

  double v6 = v4;
  double v7 = v3;
  double v8 = v2;
  double v9 = v5;
  result.trailing = v9;
  result.bottouint64_t m = v8;
  result.leading = v7;
  result.top = v6;
  return result;
}

UIOffset UIOffsetFromString(NSString *string)
{
  v6[2] = *MEMORY[0x1E4F143B8];
  id v1 = string;
  double v2 = 0.0;
  if ([(NSString *)v1 length] < 5)
  {
    double v3 = 0.0;
  }
  else
  {
    double v3 = 0.0;
    if (ParseNumbersWithDelimiter(v1, (uint64_t)v6, 2))
    {
      double v2 = *(double *)v6;
      double v3 = *(double *)&v6[1];
    }
  }

  double v4 = v2;
  double v5 = v3;
  result.vertical = v5;
  result.horizontal = v4;
  return result;
}

double UIRectCornerRadiiFromString(void *a1)
{
  void v4[4] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if ((unint64_t)[v1 length] < 9)
  {
    double v2 = 0.0;
  }
  else
  {
    double v2 = 0.0;
    if (ParseNumbersWithDelimiter(v1, (uint64_t)v4, 4)) {
      double v2 = *(double *)v4;
    }
  }

  return v2;
}

double _UIClampedCornerRadius(uint64_t a1, double a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  double v6 = a2;
  if (a2 > 0.0 && a1 != 0)
  {
    char v8 = a1;
    v18.origin.CGFloat x = a3;
    v18.origin.CGFloat y = a4;
    v18.size.CGFloat width = a5;
    v18.size.CGFloat height = a6;
    if (!CGRectIsEmpty(v18))
    {
      v19.origin.CGFloat x = a3;
      v19.origin.CGFloat y = a4;
      v19.size.CGFloat width = a5;
      v19.size.CGFloat height = a6;
      if (!CGRectIsNull(v19))
      {
        int v13 = 1;
        if ((~v8 & 0xA) != 0)
        {
          BOOL v14 = (v8 & 5) == 5 || (~v8 & 0xC) == 0;
          int v13 = (v8 & 3) == 3 || v14;
        }
        v20.origin.CGFloat x = a3;
        v20.origin.CGFloat y = a4;
        v20.size.CGFloat width = a5;
        v20.size.CGFloat height = a6;
        double Width = CGRectGetWidth(v20);
        v21.origin.CGFloat x = a3;
        v21.origin.CGFloat y = a4;
        v21.size.CGFloat width = a5;
        v21.size.CGFloat height = a6;
        double Height = CGRectGetHeight(v21);
        if (Width < Height) {
          double Height = Width;
        }
        if (v13) {
          double Height = Height * 0.5;
        }
        if (Height <= v6) {
          return Height;
        }
      }
    }
  }
  return v6;
}

uint64_t _UICACornerRadiiMakeWithRadiusAndMask@<X0>(uint64_t result@<X0>, double *a2@<X8>, double a3@<D0>)
{
  if (result) {
    double v3 = a3;
  }
  else {
    double v3 = 0.0;
  }
  if ((result & 2) != 0) {
    double v4 = a3;
  }
  else {
    double v4 = 0.0;
  }
  if ((result & 4) != 0) {
    double v5 = a3;
  }
  else {
    double v5 = 0.0;
  }
  *a2 = v5;
  a2[1] = v5;
  if ((result & 8) == 0) {
    a3 = 0.0;
  }
  a2[2] = a3;
  a2[3] = a3;
  a2[4] = v4;
  a2[5] = v4;
  a2[6] = v3;
  a2[7] = v3;
  return result;
}

float _CAFrameRateRangeFromString(void *a1)
{
  v18[2] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if ((unint64_t)[v1 length] >= 7)
  {
    double v2 = (__CFString *)v1;
    CFIndex v15 = 0;
    uint64_t v16 = 2;
    CFIndex v14 = 0;
    ParseBracesWithDelimiter(v2, &v15, &v14, v18, &v16);
    if (v15 != -1 && v14 != -1 && v16 == 2)
    {
      uint64_t v7 = 0;
      char v8 = v18;
      while (1)
      {
        double v9 = v8 - 1;
        if (!v7) {
          double v9 = &v15;
        }
        CFIndex v10 = *v9;
        double v11 = v16 <= v7 ? &v14 : v8;
        CFIndex v12 = *v11 - v10;
        if (v12 - 2 < 0) {
          break;
        }
        v19.locatiouint64_t n = v10 + 1;
        v19.length = v12 - 1;
        CFStringRef v13 = CFStringCreateWithSubstring(0, v2, v19);
        v17[v7] = CFStringGetIntValue(v13);
        CFRelease(v13);
        ++v7;
        ++v8;
        if (v7 == 3)
        {

          LODWORD(v5) = CAFrameRateRangeMake((float)v17[0], (float)v17[1], (float)v17[2]);
          goto LABEL_11;
        }
      }
    }
  }
  float v5 = *MEMORY[0x1E4F39AF0];
LABEL_11:

  return v5;
}

uint64_t _UIEncodeCGSizeForKey(void *a1, const char *a2)
{
  return objc_msgSend(a1, "encodeCGSize:forKey:", a2);
}

void _UIRTLConvertAllLTRFramesToRTL(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  id v22 = a1;
  uint64_t v9 = [v22 count];
  if (v9)
  {
    uint64_t v10 = v9;
    for (uint64_t i = 0; i != v10; ++i)
    {
      CFIndex v12 = [v22 objectAtIndexedSubscript:i];
      [v12 CGRectValue];
      double v14 = v13;
      double v16 = v15;
      double v18 = v17;
      double v20 = v19;
      v24.origin.CGFloat x = a2;
      v24.origin.CGFloat y = a3;
      v24.size.CGFloat width = a4;
      v24.size.CGFloat height = a5;
      CGRect v21 = objc_msgSend(MEMORY[0x1E4F29238], "valueWithCGRect:", CGRectGetMaxX(v24) - v18 - v14, v16, v18, v20);
      [v22 replaceObjectAtIndex:i withObject:v21];
    }
  }
}

void _UIGetTransformBetweenViews(void *a1@<X0>, void *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  id v7 = a1;
  id v8 = a2;
  uint64_t v9 = [v7 layer];
  uint64_t v10 = [v9 presentationLayer];
  double v11 = v10;
  if (v10)
  {
    id v12 = v10;
  }
  else
  {
    id v12 = [v7 layer];
  }
  double v13 = v12;

  double v14 = [v8 layer];
  double v15 = [v14 presentationLayer];
  double v16 = v15;
  if (v15)
  {
    id v17 = v15;
  }
  else
  {
    id v17 = [v8 layer];
  }
  double v18 = v17;

  long long v19 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 80);
  *(_OWORD *)&v28.m31 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 64);
  *(_OWORD *)&v28.m33 = v19;
  long long v20 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 112);
  *(_OWORD *)&v28.m41 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 96);
  *(_OWORD *)&v28.m43 = v20;
  long long v21 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 16);
  *(_OWORD *)&v28.m11 = *MEMORY[0x1E4F39B10];
  *(_OWORD *)&v28.m13 = v21;
  long long v22 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 48);
  *(_OWORD *)&v28.m21 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 32);
  *(_OWORD *)&v28.m23 = v22;
  CALayerMapGeometry();
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  CATransform3D v27 = v28;
  CATransform3DGetAffineTransform((CGAffineTransform *)a4, &v27);
  if (a3)
  {
    *(void *)(a4 + 32) = 0;
    *(void *)(a4 + 40) = 0;
  }
  int v23 = -[UIView _subviewsNeedAxisFlipping](v7);
  if (v23 != -[UIView _subviewsNeedAxisFlipping](v8))
  {
    long long v24 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)&v26.CGFloat a = *(_OWORD *)a4;
    *(_OWORD *)&v26.CGFloat c = v24;
    *(_OWORD *)&v26.tCGFloat x = *(_OWORD *)(a4 + 32);
    CGAffineTransformScale((CGAffineTransform *)&v27, &v26, -1.0, 1.0);
    long long v25 = *(_OWORD *)&v27.m13;
    *(_OWORD *)a4 = *(_OWORD *)&v27.m11;
    *(_OWORD *)(a4 + 16) = v25;
  }
}

CGFloat _TransformFunction(_OWORD *a1, _OWORD *a2)
{
  long long v3 = a1[5];
  *(_OWORD *)&a.m31 = a1[4];
  *(_OWORD *)&a.m33 = v3;
  long long v4 = a1[7];
  *(_OWORD *)&a.m41 = a1[6];
  *(_OWORD *)&a.m43 = v4;
  long long v5 = a1[1];
  *(_OWORD *)&a.m11 = *a1;
  *(_OWORD *)&a.m13 = v5;
  long long v6 = a1[3];
  *(_OWORD *)&a.m21 = a1[2];
  *(_OWORD *)&a.m23 = v6;
  long long v7 = a2[5];
  *(_OWORD *)&v16.m31 = a2[4];
  *(_OWORD *)&v16.m33 = v7;
  long long v8 = a2[7];
  *(_OWORD *)&v16.m41 = a2[6];
  *(_OWORD *)&v16.m43 = v8;
  long long v9 = a2[1];
  *(_OWORD *)&v16.m11 = *a2;
  *(_OWORD *)&v16.m13 = v9;
  long long v10 = a2[3];
  *(_OWORD *)&v16.m21 = a2[2];
  *(_OWORD *)&v16.m23 = v10;
  CATransform3DConcat(&v18, &a, &v16);
  long long v11 = *(_OWORD *)&v18.m33;
  a1[4] = *(_OWORD *)&v18.m31;
  a1[5] = v11;
  long long v12 = *(_OWORD *)&v18.m43;
  a1[6] = *(_OWORD *)&v18.m41;
  a1[7] = v12;
  long long v13 = *(_OWORD *)&v18.m13;
  *a1 = *(_OWORD *)&v18.m11;
  a1[1] = v13;
  CGFloat result = v18.m21;
  long long v15 = *(_OWORD *)&v18.m23;
  a1[2] = *(_OWORD *)&v18.m21;
  a1[3] = v15;
  return result;
}

double _UIConvertPointFromOrientationToOrientation(uint64_t a1, uint64_t a2, double result, double a4, double a5, double a6)
{
  if (a1 != a2)
  {
    if ((unint64_t)(a1 - 3) >= 2) {
      double v6 = a6;
    }
    else {
      double v6 = a5;
    }
    if ((unint64_t)(a1 - 3) >= 2) {
      double v7 = a5;
    }
    else {
      double v7 = a6;
    }
    double v8 = a5 - result;
    double v9 = a6 - a4;
    if (a1 == 4) {
      double v10 = a4;
    }
    else {
      double v10 = result;
    }
    if (a1 == 4) {
      a4 = v8;
    }
    if (a1 == 3) {
      double v10 = v9;
    }
    else {
      CGFloat result = a4;
    }
    if (a1 == 2) {
      double v11 = v8;
    }
    else {
      double v11 = v10;
    }
    if (a1 == 2) {
      double v12 = v9;
    }
    else {
      double v12 = result;
    }
    switch(a2)
    {
      case 2:
        return v7 - v11;
      case 3:
        return v12;
      case 4:
        return v6 - v12;
      default:
        return v11;
    }
  }
  return result;
}

uint64_t _UICATransform3DCombiningScale@<X0>(_OWORD *a1@<X8>)
{
  *a1 = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  return CATransform3DSetDecomposition_();
}

double gradientInterpolater(double *a1, double *a2, double *a3)
{
  double v3 = *a2;
  if (*a2 < 0.0) {
    double v3 = 0.0;
  }
  if (v3 > 1.0) {
    double v3 = 1.0;
  }
  unint64_t v4 = 0xFFFFFFFF00000000;
  long long v5 = a1;
  do
  {
    double v6 = v5[9];
    v4 += 0x100000000;
    v5 += 5;
  }
  while (v6 < v3);
  double v7 = &a1[5 * SHIDWORD(v4)];
  double v8 = (v3 - v7[4]) / (v6 - v7[4]);
  *a3 = *v5 * v8 + *v7 * (1.0 - v8);
  a3[1] = (1.0 - v8) * v7[1] + v8 * v5[1];
  a3[2] = (1.0 - v8) * v7[2] + v8 * v5[2];
  double result = (1.0 - v8) * v7[3] + v8 * v5[3];
  a3[3] = result;
  return result;
}

void UIRectFrameUsingOperation(int a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  ContextStacuint64_t k = GetContextStack(0);
  if (*(int *)ContextStack < 1) {
    double v11 = 0;
  }
  else {
    double v11 = (CGContext *)ContextStack[3 * (*(_DWORD *)ContextStack - 1) + 1];
  }
  CompositeOperatiouint64_t n = CGContextGetCompositeOperation();
  CGContextGetLineWidth();
  double v14 = v13;
  if (CompositeOperation != a1) {
    CGContextSetCompositeOperation();
  }
  v16.origin.CGFloat x = a2;
  v16.origin.CGFloat y = a3;
  v16.size.CGFloat width = a4;
  v16.size.CGFloat height = a5;
  CGRect v17 = CGRectInset(v16, v14 * 0.5, v14 * 0.5);
  CGContextStrokeRect(v11, v17);
  if (CompositeOperation != a1) {
    CGContextSetCompositeOperation();
  }
  CGContextSetLineWidth(v11, v14);
}

void UIRectFrameUsingBlendMode(CGRect rect, CGBlendMode blendMode)
{
  CGFloat height = rect.size.height;
  CGFloat width = rect.size.width;
  CGFloat y = rect.origin.y;
  CGFloat x = rect.origin.x;
  ContextStacuint64_t k = GetContextStack(0);
  if (*(int *)ContextStack < 1) {
    double v8 = 0;
  }
  else {
    double v8 = (CGContext *)ContextStack[3 * (*(_DWORD *)ContextStack - 1) + 1];
  }
  CGBlendMode v9 = CGContextGetBlendMode();
  CGContextGetLineWidth();
  double v11 = v10;
  if (v9 != blendMode) {
    CGContextSetBlendMode(v8, blendMode);
  }
  v13.origin.CGFloat x = x;
  v13.origin.CGFloat y = y;
  v13.size.CGFloat width = width;
  v13.size.CGFloat height = height;
  CGRect v14 = CGRectInset(v13, v11 * 0.5, v11 * 0.5);
  CGContextStrokeRect(v8, v14);
  if (v9 != blendMode) {
    CGContextSetBlendMode(v8, v9);
  }
  CGContextSetLineWidth(v8, v11);
}

void UIRectFrame(CGRect rect)
{
}

void UIRectClip(CGRect rect)
{
  if (rect.size.width >= 0.0)
  {
    CGFloat height = rect.size.height;
    if (rect.size.height >= 0.0)
    {
      CGFloat width = rect.size.width;
      CGFloat y = rect.origin.y;
      CGFloat x = rect.origin.x;
      ContextStacuint64_t k = GetContextStack(0);
      if (*(int *)ContextStack < 1) {
        double v6 = 0;
      }
      else {
        double v6 = (CGContext *)ContextStack[3 * (*(_DWORD *)ContextStack - 1) + 1];
      }
      CGFloat v7 = x;
      CGFloat v8 = y;
      CGFloat v9 = width;
      CGFloat v10 = height;
      CGContextClipToRect(v6, *(CGRect *)&v7);
    }
  }
}

void UISetSystemColor(int a1)
{
  switch(a1)
  {
    case 1:
      id v1 = +[UIColor whiteColor];
      break;
    case 2:
      id v1 = +[UIColor grayColor];
      break;
    case 3:
      id v1 = +[UIColor lightGrayColor];
      break;
    case 4:
      id v1 = +[UIColor darkGrayColor];
      break;
    case 5:
      id v1 = +[UIColor redColor];
      break;
    case 6:
      id v1 = +[UIColor greenColor];
      break;
    case 7:
      id v1 = +[UIColor blueColor];
      break;
    case 8:
      id v1 = +[UIColor cyanColor];
      break;
    case 9:
      id v1 = +[UIColor magentaColor];
      break;
    case 10:
      id v1 = +[UIColor yellowColor];
      break;
    case 11:
      id v1 = +[UIColor orangeColor];
      break;
    case 12:
      id v1 = +[UIColor purpleColor];
      break;
    case 13:
      id v1 = +[UIColor brownColor];
      break;
    case 14:
      id v1 = +[UIColor clearColor];
      break;
    case 15:
      double v2 = 0.8;
      double v3 = 0.82;
      double v4 = 0.85;
      goto LABEL_26;
    case 16:
      double v2 = 0.88;
      double v5 = 1.0;
      double v3 = 0.88;
      double v4 = 0.88;
      goto LABEL_27;
    case 17:
      double v2 = 1.0;
      double v3 = 1.0;
      double v4 = 1.0;
      goto LABEL_26;
    case 18:
      double v2 = 0.16;
      double v3 = 0.43;
      double v4 = 0.83;
      goto LABEL_26;
    case 19:
      double v2 = 0.52;
      double v3 = 0.56;
      double v4 = 0.58;
      goto LABEL_23;
    case 20:
      double v2 = 0.9;
      double v3 = 0.93;
      double v4 = 0.99;
LABEL_23:
      double v5 = 0.8;
      goto LABEL_27;
    case 21:
      double v2 = 0.92;
      double v3 = 0.94;
      double v4 = 0.99;
      goto LABEL_26;
    case 22:
      double v2 = 0.85;
      double v3 = 0.87;
      double v4 = 0.91;
LABEL_26:
      double v5 = 1.0;
LABEL_27:
      id v1 = +[UIColor colorWithRed:v2 green:v3 blue:v4 alpha:v5];
      break;
    default:
      id v1 = +[UIColor blackColor];
      break;
  }
  id v6 = v1;
  [v1 set];
}

void UIGraphicsBeginImageContext(CGSize size)
{
}

void _UIGraphicsBeginImageContextOpaque(int a1, CGFloat a2, CGFloat a3)
{
}

id _UIGraphicsDrawIntoImageContextWithOptions(uint64_t a1, void *a2, double a3, double a4, double a5)
{
  return _UIGraphicsDrawIntoImageContextWithMoreOptions(a1, 0, a2, a3, a4, a5);
}

id _UIGraphicsDrawIntoImageContextWithMoreOptions(uint64_t a1, int a2, void *a3, double a4, double a5, double a6)
{
  id v11 = a3;
  double v12 = +[UIGraphicsImageRendererFormat preferredFormat];
  [v12 setOpaque:a1];
  if (a6 > 0.0) {
    [v12 setScale:a6];
  }
  if (a2) {
    [v12 setPreferredRange:0x7FFFLL];
  }
  CGRect v13 = -[UIGraphicsImageRenderer initWithSize:format:]([UIGraphicsImageRenderer alloc], "initWithSize:format:", v12, a4, a5);
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  void v17[2] = ___UIGraphicsDrawIntoImageContextWithMoreOptions_block_invoke;
  _DWORD v17[3] = &unk_1E52ECAB8;
  id v18 = v11;
  id v14 = v11;
  long long v15 = [(UIGraphicsImageRenderer *)v13 imageWithActions:v17];

  return v15;
}

BOOL UIGraphicsBeginPDFContextToFile(NSString *path, CGRect bounds, NSDictionary *documentInfo)
{
  CGFloat height = bounds.size.height;
  CGFloat width = bounds.size.width;
  CGFloat y = bounds.origin.y;
  CGFloat x = bounds.origin.x;
  CGRect v20 = bounds;
  CGFloat v8 = path;
  CGFloat v9 = documentInfo;
  CFURLRef v10 = CFURLCreateWithFileSystemPath(0, v8, kCFURLPOSIXPathStyle, 0);
  if (v10)
  {
    CFURLRef v11 = v10;
    v21.origin.CGFloat x = x;
    v21.origin.CGFloat y = y;
    v21.size.CGFloat width = width;
    v21.size.CGFloat height = height;
    if (CGRectIsEmpty(v21)) {
      double v12 = 0;
    }
    else {
      double v12 = &v20;
    }
    CGContextRef v13 = CGPDFContextCreateWithURL(v11, v12, (CFDictionaryRef)v9);
    if (v13)
    {
      id v14 = v13;
      CFRelease(v11);
      SetupPDFContext(v14, v9, 0, v20.origin.x, v20.origin.y, v20.size.width, v20.size.height);
    }
    else
    {
      if (dyld_program_sdk_at_least())
      {
        CGRect v17 = [MEMORY[0x1E4F28B00] currentHandler];
        id v18 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL UIGraphicsBeginPDFContextToFile(NSString *__strong _Nonnull, CGRect, NSDictionary *__strong _Nullable)");
        long long v19 = NSStringFromCGRect(v20);
        [v17 handleFailureInFunction:v18, @"UIGraphics.m", 627, @"UIGraphicsBeginPDFContextToFile() failed to allocate CGPDFContext: bounds=%@, path=%@, documentInfo=%@. Use UIGraphicsPDFRenderer to avoid this assert.", v19, v8, v9 file lineNumber description];
      }
      CFRelease(v11);
    }
  }
  BOOL v15 = GetCurrentContext(2) != 0;

  return v15;
}

void SetupPDFContext(CGContext *a1, void *a2, uint64_t a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  v25.origin.CGFloat x = a4;
  v25.origin.CGFloat y = a5;
  v25.size.CGFloat width = a6;
  v25.size.CGFloat height = a7;
  id v9 = a2;
  CGAffineTransform v26 = &v25;
  uint64_t v10 = *MEMORY[0x1E4F1DDE0];
  CFURLRef v11 = [v9 objectForKey:*MEMORY[0x1E4F1DDE0]];
  double v12 = v11;
  if (v11) {
    [v11 getBytes:&v26 length:32];
  }

  if (a3)
  {
    if (CGRectIsEmpty(v25))
    {
      CGSize v13 = *(CGSize *)(a3 + 16);
      v25.origiuint64_t n = *(CGPoint *)a3;
      v25.CGSize size = v13;
    }
    CGSize size = v25.size;
    *(CGPoint *)(a3 + 32) = v25.origin;
    *(CGSize *)(a3 + 48) = size;
    *(unsigned char *)(a3 + 64) = 1;
  }
  else
  {
    BOOL v15 = (CGSize *)malloc_type_malloc(0x48uLL, 0x1000040773C5DECuLL);
    CGRect v16 = [v9 objectForKey:v10];
    CGRect v17 = v16;
    if (v16) {
      [v16 getBytes:&v25 length:32];
    }
    if (CGRectIsEmpty(v25))
    {
      v25.origiuint64_t n = 0uLL;
      v25.CGSize size = (CGSize)xmmword_186B97750;
    }
    CGSize v18 = v25.size;
    long long v19 = (CGSize *)MEMORY[0x1E4F1DB28];
    *BOOL v15 = (CGSize)v25.origin;
    v15[1] = v18;
    CGSize v20 = v19[1];
    void v15[2] = *v19;
    v15[3] = v20;
    LOBYTE(v15[4].width) = 0;
    ContextStacuint64_t k = (int *)GetContextStack(1);
    CGContextRef v22 = CGContextRetain(a1);
    int v23 = *ContextStack;
    long long v24 = &ContextStack[6 * *ContextStack];
    *((void *)v24 + 1) = v22;
    v24[4] = 2;
    *((void *)v24 + 3) = v15;
    *ContextStacuint64_t k = v23 + 1;
  }
}

void UIGraphicsBeginPDFContextToData(NSMutableData *data, CGRect bounds, NSDictionary *documentInfo)
{
  CGFloat height = bounds.size.height;
  CGFloat width = bounds.size.width;
  CGFloat y = bounds.origin.y;
  CGFloat x = bounds.origin.x;
  CGRect v17 = bounds;
  CGFloat v8 = documentInfo;
  CGDataConsumerRef v9 = CGDataConsumerCreateWithCFData((CFMutableDataRef)data);
  if (v9)
  {
    uint64_t v10 = v9;
    v18.origin.CGFloat x = x;
    v18.origin.CGFloat y = y;
    v18.size.CGFloat width = width;
    v18.size.CGFloat height = height;
    if (CGRectIsEmpty(v18)) {
      CFURLRef v11 = 0;
    }
    else {
      CFURLRef v11 = &v17;
    }
    CGContextRef v12 = CGPDFContextCreate(v10, v11, (CFDictionaryRef)v8);
    if (v12)
    {
      CGSize v13 = v12;
      CGDataConsumerRelease(v10);
      SetupPDFContext(v13, v8, 0, v17.origin.x, v17.origin.y, v17.size.width, v17.size.height);
    }
    else
    {
      if (dyld_program_sdk_at_least())
      {
        id v14 = [MEMORY[0x1E4F28B00] currentHandler];
        BOOL v15 = objc_msgSend(NSString, "stringWithUTF8String:", "void UIGraphicsBeginPDFContextToData(NSMutableData *__strong _Nonnull, CGRect, NSDictionary *__strong _Nullable)");
        CGRect v16 = NSStringFromCGRect(v17);
        [v14 handleFailureInFunction:v15, @"UIGraphics.m", 643, @"UIGraphicsBeginPDFContextToData() failed to allocate CGPDFContext: bounds=%@, documentInfo=%@. Use UIGraphicsPDFRenderer to avoid this assert.", v16, v8 file lineNumber description];
      }
      CGDataConsumerRelease(v10);
    }
  }
}

void UIGraphicsEndPDFContext(void)
{
  CurrentContext = (CGContext *)GetCurrentContext(2);
  uint64_t CurrentContextAuxInfo = GetCurrentContextAuxInfo(2);
  if (CurrentContext && CurrentContextAuxInfo)
  {
    if (*(unsigned char *)(CurrentContextAuxInfo + 64)) {
      CGPDFContextEndPage(CurrentContext);
    }
    ContextStacuint64_t k = (int *)GetContextStack(0);
    PopContextFromStack(ContextStack);
    CGPDFContextClose(CurrentContext);
    CGContextRelease(CurrentContext);
  }
}

void UIGraphicsBeginPDFPage(void)
{
  uint64_t CurrentContext = GetCurrentContext(2);
  uint64_t CurrentContextAuxInfo = (uint64_t *)GetCurrentContextAuxInfo(2);
  if (CurrentContext && CurrentContextAuxInfo)
  {
    uint64_t v2 = *CurrentContextAuxInfo;
    uint64_t v3 = CurrentContextAuxInfo[1];
    uint64_t v4 = CurrentContextAuxInfo[2];
    uint64_t v5 = CurrentContextAuxInfo[3];
    UIGraphicsBeginPDFPageWithInfo(*(CGRect *)&v2, 0);
  }
}

void UIGraphicsBeginPDFPageWithInfo(CGRect bounds, NSDictionary *pageInfo)
{
  CGFloat height = bounds.size.height;
  CGFloat width = bounds.size.width;
  CGFloat y = bounds.origin.y;
  CGFloat x = bounds.origin.x;
  id v6 = pageInfo;
  uint64_t CurrentContext = (CGContext *)GetCurrentContext(2);
  uint64_t CurrentContextAuxInfo = GetCurrentContextAuxInfo(2);
  if (CurrentContext && CurrentContextAuxInfo)
  {
    uint64_t v9 = GetCurrentContextAuxInfo(2);
    if (v9)
    {
      uint64_t v10 = (CGRect *)v9;
      if (*(unsigned char *)(v9 + 64)) {
        CGPDFContextEndPage(CurrentContext);
      }
      SetupPDFContext(CurrentContext, v6, (uint64_t)v10, x, y, width, height);
      uint64_t v11 = *MEMORY[0x1E4F1DDE0];
      uint64_t v12 = [(NSDictionary *)v6 objectForKey:*MEMORY[0x1E4F1DDE0]];
      if (v12)
      {
        CGSize v13 = (void *)v12;
      }
      else if (CGRectEqualToRect(v10[1], *v10))
      {
        CGSize v13 = 0;
      }
      else
      {
        v16.size.CGFloat width = 612.0;
        v16.size.CGFloat height = 792.0;
        v16.origin.CGFloat x = 0.0;
        v16.origin.CGFloat y = 0.0;
        if (CGRectEqualToRect(v10[1], v16))
        {
LABEL_16:
          CGPDFContextBeginPage(CurrentContext, (CFDictionaryRef)v6);
          CGContextTranslateCTM(CurrentContext, 0.0, v10[1].size.height);
          CGContextScaleCTM(CurrentContext, 1.0, -1.0);
          CGAffineTransformMakeScale(&v15, 1.0, -1.0);
          CGContextSetBaseCTM();
          goto LABEL_17;
        }
        CGSize v13 = [MEMORY[0x1E4F1C9B8] dataWithBytes:&v10[1] length:32];
        if (v6)
        {
          id v14 = (NSDictionary *)[(NSDictionary *)v6 mutableCopy];

          [(NSDictionary *)v14 setObject:v13 forKey:v11];
          id v6 = v14;
        }
        else
        {
          id v6 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:v13 forKey:v11];
        }
      }

      goto LABEL_16;
    }
    NSLog(&cfstr_Getcurrentcont.isa);
  }
LABEL_17:
}

CGRect UIGraphicsGetPDFContextBounds(void)
{
  uint64_t CurrentContextAuxInfo = GetCurrentContextAuxInfo(2);
  if (CurrentContextAuxInfo)
  {
    id v1 = (double *)(CurrentContextAuxInfo + 8);
    uint64_t v2 = (double *)(CurrentContextAuxInfo + 16);
    if (*(unsigned char *)(CurrentContextAuxInfo + 64)) {
      uint64_t v3 = (double *)(CurrentContextAuxInfo + 56);
    }
    else {
      uint64_t v3 = (double *)(CurrentContextAuxInfo + 24);
    }
    if (*(unsigned char *)(CurrentContextAuxInfo + 64))
    {
      uint64_t v2 = (double *)(CurrentContextAuxInfo + 48);
      id v1 = (double *)(CurrentContextAuxInfo + 40);
      uint64_t v4 = (double *)(CurrentContextAuxInfo + 32);
    }
    else
    {
      uint64_t v4 = (double *)CurrentContextAuxInfo;
    }
  }
  else
  {
    uint64_t v4 = (double *)MEMORY[0x1E4F1DB28];
    id v1 = (double *)(MEMORY[0x1E4F1DB28] + 8);
    uint64_t v2 = (double *)(MEMORY[0x1E4F1DB28] + 16);
    uint64_t v3 = (double *)(MEMORY[0x1E4F1DB28] + 24);
  }
  double v5 = *v4;
  double v6 = *v1;
  double v7 = *v2;
  double v8 = *v3;
  result.size.CGFloat height = v8;
  result.size.CGFloat width = v7;
  result.origin.CGFloat y = v6;
  result.origin.CGFloat x = v5;
  return result;
}

void UIGraphicsSetPDFContextURLForRect(NSURL *url, CGRect rect)
{
  CGFloat height = rect.size.height;
  CGFloat width = rect.size.width;
  CGFloat y = rect.origin.y;
  CGFloat x = rect.origin.x;
  urlCATransform3D a = url;
  uint64_t CurrentContext = (CGContext *)GetCurrentContext(2);
  if (CurrentContext)
  {
    v9.origin.CGFloat x = x;
    v9.origin.CGFloat y = y;
    v9.size.CGFloat width = width;
    v9.size.CGFloat height = height;
    CGPDFContextSetURLForRect(CurrentContext, (CFURLRef)urla, v9);
  }
}

void UIGraphicsAddPDFContextDestinationAtPoint(NSString *name, CGPoint point)
{
  CGFloat y = point.y;
  CGFloat x = point.x;
  nameCATransform3D a = name;
  uint64_t CurrentContext = (CGContext *)GetCurrentContext(2);
  if (CurrentContext)
  {
    v7.CGFloat x = x;
    v7.CGFloat y = y;
    CGPDFContextAddDestinationAtPoint(CurrentContext, namea, v7);
  }
}

void UIGraphicsSetPDFContextDestinationForRect(NSString *name, CGRect rect)
{
  CGFloat height = rect.size.height;
  CGFloat width = rect.size.width;
  CGFloat y = rect.origin.y;
  CGFloat x = rect.origin.x;
  nameCATransform3D a = name;
  uint64_t CurrentContext = (CGContext *)GetCurrentContext(2);
  if (CurrentContext)
  {
    v9.origin.CGFloat x = x;
    v9.origin.CGFloat y = y;
    v9.size.CGFloat width = width;
    v9.size.CGFloat height = height;
    CGPDFContextSetDestinationForRect(CurrentContext, namea, v9);
  }
}

void sub_1860D11F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1860D1384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CGColorSpaceRef __PQColorSpace_block_invoke()
{
  CGColorSpaceRef result = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC50]);
  qword_1EB25CE58 = (uint64_t)result;
  return result;
}

CGColorSpaceRef __HLGColorSpace_block_invoke()
{
  CGColorSpaceRef result = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC48]);
  qword_1EB25CE68 = (uint64_t)result;
  return result;
}

void sub_1860D3124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void _UIDocumentCarouselViewItemWidth(void *a1)
{
  [a1 bounds];
  CGRectGetWidth(v3);
  [a1 layoutMargins];
  [a1 layoutMargins];
  _UIDocumentCarouselViewRevealDimension(a1);
  UIRoundToViewScale(a1);
}

void _UIDocumentCarouselViewRevealDimension(void *a1)
{
  [a1 bounds];
  CGRectGetWidth(v3);
  UIRoundToViewScale(a1);
}

void sub_1860D49A0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

uint64_t _UIDocumentCarouselViewAnimateWithTracking(char a1, uint64_t a2, uint64_t a3)
{
  CAFrameRateRange v9 = CAFrameRateRangeMake(80.0, 120.0, 120.0);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = ___UIDocumentCarouselViewAnimateWithTracking_block_invoke;
  v7[3] = &unk_1E52F1738;
  char v8 = a1;
  v7[4] = a2;
  v7[5] = a3;
  return +[UIView _modifyAnimationsWithPreferredFrameRateRange:updateReason:animations:](UIView, "_modifyAnimationsWithPreferredFrameRateRange:updateReason:animations:", 1048633, v7, *(double *)&v9.minimum, *(double *)&v9.maximum, *(double *)&v9.preferred);
}

void sub_1860D4EF4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1860D6AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1860D6B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
}

id _UIImageIdentityBundleIdentifier(void *a1)
{
  if (a1)
  {
    id v1 = [a1 _primitiveImageAsset];
    uint64_t v2 = [v1 _assetManager];
    CGRect v3 = [v2 bundle];
    uint64_t v4 = [v3 bundleIdentifier];
  }
  else
  {
    uint64_t v4 = 0;
  }
  return v4;
}

void *_UIImageIsFromMainBundle(void *result)
{
  if (result)
  {
    id v1 = [result _primitiveImageAsset];
    uint64_t v2 = [v1 _assetManager];
    CGRect v3 = [v2 bundle];
    uint64_t v4 = [MEMORY[0x1E4F28B50] mainBundle];
    uint64_t v5 = [v3 isEqual:v4];

    return (void *)v5;
  }
  return result;
}

CFTypeRef _UIImageGetCGImageRepresentation(void *a1)
{
  id v1 = [a1 _rasterizedImage];
  CGImageRef v2 = CGImageRetain((CGImageRef)[v1 CGImage]);
  CFTypeRef v3 = CFAutorelease(v2);

  return v3;
}

id _UIImageSystemSymbolNames()
{
  os_log_t v0 = _UIKitCoreGlyphsManager();
  id v1 = [v0 _allImageNames];

  return v1;
}

id LoadImageSequence(void *a1, void *a2, void *a3, char a4, uint64_t a5, double a6, double a7, double a8, double a9)
{
  id v17 = a1;
  id v18 = a2;
  id v19 = a3;
  uint64_t v37 = 0;
  CGRect v38 = &v37;
  uint64_t v39 = 0x3032000000;
  CGRect v40 = __Block_byref_object_copy__110;
  double v41 = __Block_byref_object_dispose__110;
  id v42 = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __LoadImageSequence_block_invoke;
  aBlock[3] = &unk_1E52F18F8;
  char v35 = a4;
  *(double *)&aBlock[5] = a6;
  *(double *)&aBlock[6] = a7;
  *(double *)&aBlock[7] = a8;
  *(double *)&aBlock[8] = a9;
  BOOL v36 = a5 == 1;
  void aBlock[4] = &v37;
  CGSize v20 = (void (**)(void *, uint64_t))_Block_copy(aBlock);
  CGRect v21 = [NSString stringWithFormat:@"%@0", v17];
  uint64_t v22 = +[UIImage imageNamed:v21 inBundle:v18 compatibleWithTraitCollection:v19];

  int v23 = [NSString stringWithFormat:@"%@1", v17];
  uint64_t v24 = +[UIImage imageNamed:v23 inBundle:v18 compatibleWithTraitCollection:v19];
  CGRect v32 = v19;
  CGRect v33 = v18;

  if (v22 | v24)
  {
    uint64_t v25 = [MEMORY[0x1E4F1CA48] array];
    CGAffineTransform v26 = (void *)v38[5];
    void v38[5] = v25;

    v20[2](v20, v22);
    v20[2](v20, v24);
    uint64_t v27 = 2;
    do
    {
      CATransform3D v28 = [NSString stringWithFormat:@"%@%d", v17, v27, v32, v33];
      CGRect v29 = +[UIImage imageNamed:v28];

      if (!v29) {
        break;
      }
      v20[2](v20, (uint64_t)v29);

      uint64_t v27 = (v27 + 1);
    }
    while (v27 != 1025);
  }
  id v30 = (id)v38[5];

  _Block_object_dispose(&v37, 8);
  return v30;
}

void sub_1860DCAB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _UIImageDeviceSpecificName()
{
  if (qword_1EB25B160 != -1) {
    dispatch_once(&qword_1EB25B160, &__block_literal_global_1192);
  }
  os_log_t v0 = (void *)qword_1EB25B158;
  return v0;
}

double *__RGBtoHSV(double *result, double *a2, double *a3, double a4, double a5, double a6)
{
  if (a4 >= a5) {
    double v6 = a4;
  }
  else {
    double v6 = a5;
  }
  if (v6 < a6) {
    double v6 = a6;
  }
  float v7 = v6;
  double v8 = v7;
  *a3 = v7;
  if (v7 == 0.0)
  {
    CGAffineTransform *result = NAN;
    *a2 = 0.0;
    *a3 = 0.0;
  }
  else
  {
    if (a4 <= a5) {
      double v9 = a4;
    }
    else {
      double v9 = a5;
    }
    if (v9 > a6) {
      double v9 = a6;
    }
    float v10 = v9;
    float v11 = v7 - v10;
    *a2 = (float)(v11 / v7);
    double v12 = v11;
    if (v8 == a4)
    {
      double v13 = (a5 - a6) / v12;
    }
    else
    {
      BOOL v14 = v8 == a5;
      double v15 = (a4 - a5) / v12 + 4.0;
      double v13 = (a6 - a4) / v12 + 2.0;
      if (!v14) {
        double v13 = v15;
      }
    }
    double v16 = v13 * 60.0;
    if (v16 < 0.0) {
      double v16 = v16 + 360.0;
    }
    CGAffineTransform *result = v16;
  }
  return result;
}

void compositeCGImageRefInRect(CGImage *a1, CGFloat a2, double a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, uint64_t a10, uint64_t a11, CGFloat a12)
{
  ContextStacuint64_t k = GetContextStack(0);
  if (*(int *)ContextStack < 1) {
    uint64_t v27 = 0;
  }
  else {
    uint64_t v27 = (CGContext *)ContextStack[3 * (*(_DWORD *)ContextStack - 1) + 1];
  }
  CGContextSaveGState(v27);
  CGContextSetAlpha(v27, a12);
  CGContextSetCompositeOperation();
  CGContextTranslateCTM(v27, a2, a3 + a5);
  double v28 = -a5;
  CGContextScaleCTM(v27, a4 / a8, -a5 / a9);
  if (a5 > 0.0 && a4 > 0.0 && a11)
  {
    long long v29 = xmmword_186B97840;
    CGFloat v30 = -1.0;
    double v31 = 0.0;
    switch(a11)
    {
      case 1:
        break;
      case 2:
        double v31 = a5 / a4;
        *((void *)&v29 + 1) = 0;
        *(double *)&long long v29 = -a4 / a5;
        a5 = 0.0;
        goto LABEL_16;
      case 3:
        double v31 = v28 / a4;
        *((void *)&v29 + 1) = 0;
        *(double *)&long long v29 = a4 / a5;
        goto LABEL_15;
      case 4:
        long long v29 = xmmword_186B89740;
        a5 = 0.0;
        break;
      case 5:
        CGFloat v30 = 1.0;
        a4 = 0.0;
        break;
      case 6:
        double v31 = v28 / a4;
        *((void *)&v29 + 1) = 0;
        *(double *)&long long v29 = -a4 / a5;
        goto LABEL_16;
      case 7:
        double v31 = a5 / a4;
        *((void *)&v29 + 1) = 0;
        *(double *)&long long v29 = a4 / a5;
        a5 = 0.0;
LABEL_15:
        a4 = 0.0;
LABEL_16:
        CGFloat v30 = 0.0;
        break;
      default:
        CGFloat v30 = *MEMORY[0x1E4F1DAB8];
        double v31 = *(double *)(MEMORY[0x1E4F1DAB8] + 8);
        long long v29 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
        a4 = *(double *)(MEMORY[0x1E4F1DAB8] + 32);
        a5 = *(double *)(MEMORY[0x1E4F1DAB8] + 40);
        break;
    }
    transform.CATransform3D a = v30;
    transform.CGFloat b = v31;
    *(_OWORD *)&transform.CGFloat c = v29;
    transform.tCGFloat x = a4;
    transform.tCGFloat y = a5;
    CGContextConcatCTM(v27, &transform);
  }
  v34.origin.CGFloat y = a7;
  v34.origin.CGFloat x = a6;
  v34.size.CGFloat width = a8;
  v34.size.CGFloat height = a9;
  CGRect v35 = CGRectOffset(v34, -a6, -a7);
  CGContextDrawImage(v27, v35, a1);
  CGContextRestoreGState(v27);
}

void compositeCGImageRef(CGImage *a1, double a2, double a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, uint64_t a9, uint64_t a10)
{
  ContextStacuint64_t k = GetContextStack(0);
  if (*(int *)ContextStack < 1) {
    CGSize v20 = 0;
  }
  else {
    CGSize v20 = (CGContext *)ContextStack[3 * (*(_DWORD *)ContextStack - 1) + 1];
  }
  CGFloat rect = a7;
  CGFloat v21 = a6;
  CGContextSaveGState(v20);
  CGContextSetAlpha(v20, a8);
  CGContextSetCompositeOperation();
  CGContextTranslateCTM(v20, a2 - a4, a5 + a3 + a7);
  CGContextScaleCTM(v20, 1.0, -1.0);
  if (a7 > 0.0 && a6 > 0.0 && a10)
  {
    long long v22 = xmmword_186B97840;
    CGFloat v23 = -1.0;
    double v24 = 0.0;
    switch(a10)
    {
      case 1:
        break;
      case 2:
        double v24 = a7 / a6;
        *((void *)&v22 + 1) = 0;
        *(double *)&long long v22 = -a6 / a7;
        a7 = 0.0;
        goto LABEL_16;
      case 3:
        double v24 = -a7 / a6;
        *((void *)&v22 + 1) = 0;
        *(double *)&long long v22 = a6 / a7;
        goto LABEL_15;
      case 4:
        long long v22 = xmmword_186B89740;
        a7 = 0.0;
        break;
      case 5:
        CGFloat v23 = 1.0;
        a6 = 0.0;
        break;
      case 6:
        double v24 = -a7 / a6;
        *((void *)&v22 + 1) = 0;
        *(double *)&long long v22 = -a6 / a7;
        goto LABEL_16;
      case 7:
        double v24 = a7 / a6;
        *((void *)&v22 + 1) = 0;
        *(double *)&long long v22 = a6 / a7;
        a7 = 0.0;
LABEL_15:
        a6 = 0.0;
LABEL_16:
        CGFloat v23 = 0.0;
        break;
      default:
        CGFloat v23 = *MEMORY[0x1E4F1DAB8];
        double v24 = *(double *)(MEMORY[0x1E4F1DAB8] + 8);
        long long v22 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
        a6 = *(double *)(MEMORY[0x1E4F1DAB8] + 32);
        a7 = *(double *)(MEMORY[0x1E4F1DAB8] + 40);
        break;
    }
    transform.CATransform3D a = v23;
    transform.CGFloat b = v24;
    *(_OWORD *)&transform.CGFloat c = v22;
    transform.tCGFloat x = a6;
    transform.tCGFloat y = a7;
    CGContextConcatCTM(v20, &transform);
  }
  v27.origin.CGFloat x = a4;
  v27.origin.CGFloat y = a5;
  v27.size.CGFloat width = v21;
  v27.size.CGFloat height = rect;
  CGContextDrawImage(v20, v27, a1);
  CGContextRestoreGState(v20);
}

BOOL _UIImageIsFilledSystemSymbolImage(void *a1)
{
  id v1 = a1;
  if (_UIIsSystemSymbolImage(v1))
  {
    CGImageRef v2 = _UIImageName(v1);
    int v3 = _UIIsPrivateSystemSymbolImage(v1);
    uint64_t v4 = (id *)MEMORY[0x1E4F97AC0];
    if (!v3) {
      uint64_t v4 = (id *)MEMORY[0x1E4F97AB8];
    }
    uint64_t v5 = [*v4 allKeysForObject:v2];
    BOOL v6 = [v5 count] != 0;
  }
  else
  {
    BOOL v6 = 0;
  }

  return v6;
}

id UIImageGetPinstripe()
{
  return _UIImageWithName(@"UIPinstripe.png");
}

id UIImageGetLCDBackground()
{
  os_log_t v0 = +[UIDevice currentDevice];
  uint64_t v1 = [v0 userInterfaceIdiom];

  if ((v1 & 0xFFFFFFFFFFFFFFFBLL) == 1) {
    CGImageRef v2 = @"UILCDBackgroundT.png";
  }
  else {
    CGImageRef v2 = @"UILCDBackground.png";
  }
  return _UIImageWithName(v2);
}

id UIImageGetUnreadIndicator()
{
  return _UIImageWithName(@"UIImageNameStandaloneIndicatorDot.png");
}

id UIImageGetPressedUnreadIndicator()
{
  return _UIImageWithName(@"UIImageNameStandaloneIndicatorDot.png");
}

id UIImageGetPartialUnreadIndicator()
{
  return _UIImageWithName(@"UIImageNameStandaloneIndicatorPartialDot.png");
}

id UIImageGetPartialPressedUnreadIndicator()
{
  return _UIImageWithName(@"UIImageNameStandaloneIndicatorPartialDot.png");
}

id UIImageGetTableNext()
{
  return _UIImageWithName(@"UITableNext.png");
}

id UIImageGetTableNextSelected()
{
  return _UIImageWithName(@"UITableNextSelected.png");
}

id UIImageGetTableNextButton()
{
  return _UIImageWithName(@"UITableNextButton.png");
}

id UIImageGetTableNextButtonPressed()
{
  return _UIImageWithName(@"UITableNextButtonPressed.png");
}

id UIImageGetTableSelectionBackground()
{
  os_log_t v0 = (void *)UIImageGetTableSelectionBackground_selectedBackgroundImage;
  if (!UIImageGetTableSelectionBackground_selectedBackgroundImage)
  {
    _UIGraphicsBeginImageContextWithOptions(1, 0, 1.0, 1.0, 1.0);
    uint64_t v1 = +[UIColor tableCellDefaultSelectionTintColor];
    [v1 set];

    ContextStacuint64_t k = GetContextStack(0);
    if (*(int *)ContextStack < 1) {
      int v3 = 0;
    }
    else {
      int v3 = (CGContext *)ContextStack[3 * (*(_DWORD *)ContextStack - 1) + 1];
    }
    v8.origin.CGFloat x = 0.0;
    v8.origin.CGFloat y = 0.0;
    v8.size.CGFloat width = 1.0;
    v8.size.CGFloat height = 1.0;
    CGContextFillRect(v3, v8);
    uint64_t v4 = _UIGraphicsGetImageFromCurrentImageContext(0);
    uint64_t v5 = (void *)UIImageGetTableSelectionBackground_selectedBackgroundImage;
    UIImageGetTableSelectionBackground_selectedBackgroundImage = v4;

    os_log_t v0 = (void *)UIImageGetTableSelectionBackground_selectedBackgroundImage;
  }
  return v0;
}

id UIImageGetTextFieldClearButton()
{
  return _GetTextFieldClearButton(0, 0);
}

id UIImageGetTextFieldClearButtonPressed()
{
  return _GetTextFieldClearButton((void *)1, 0);
}

id UIImageGetTextFieldClearButtonDisabled()
{
  return _GetTextFieldClearButton((void *)2, 0);
}

id UIImageGetContactAddButton()
{
  return _UIImageWithName(@"UIButtonBarContactAdd.png");
}

id UIImageGetContactAddButtonPressed()
{
  return _UIImageWithName(@"UIButtonBarContactAddPressed.png");
}

id UIImageGetNavigationBarAddButton()
{
  return _UIImageWithName(@"UINavigationBarAddButton.png");
}

id UIImageGetNavigationBarBackArrow()
{
  return _UIImageWithName(@"UINavigationBarBackArrow.png");
}

id UIImageGetButtonBarDefaultBackground()
{
  return _UIImageWithName(@"UIButtonBarDefaultBackground.png");
}

id UIImageGetButtonBarPressedIndicator()
{
  return _UIImageWithName(@"UIButtonBarPressedIndicator.png");
}

id UIImageGetBlackCloseButton()
{
  return _UIImageWithName(@"UIBlackCloseButton.png");
}

id UIImageGetBlackCloseButtonPressed()
{
  return _UIImageWithName(@"UIBlackCloseButtonPressed.png");
}

id _UIImageGetActivityBookmark()
{
  return _UIImageWithName(@"UIActivityBookmark.png");
}

id _UIImageGetSearchGlass()
{
  return _UIImageWithName(@"UISearchFieldIcon.png");
}

id _UIImageGetListIcon()
{
  return _UIImageWithName(@"UIButtonBarListIcon.png");
}

void __LoadImageSequence_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = v3;
    if (*(unsigned char *)(a1 + 72))
    {
      id v6 = v3;
      uint64_t v5 = objc_msgSend(v3, "resizableImageWithCapInsets:", *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64));

      [v5 _setAlwaysStretches:*(unsigned __int8 *)(a1 + 73)];
      id v4 = v5;
    }
    id v7 = v4;
    [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) addObject:v4];
  }
}

void Draw3PartSlice(CGContext *a1, CGImage *a2, uint64_t a3, int a4, double a5, double a6, double a7, double a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12, double a13, CGFloat a14, double a15, CGFloat a16)
{
  v44.origin.CGFloat x = a9;
  remainder.origin.CGFloat x = a9;
  remainder.origin.CGFloat y = a10;
  remainder.size.CGFloat width = a11;
  remainder.size.CGFloat height = a12;
  memset(&slice, 0, sizeof(slice));
  memset(&v41, 0, sizeof(v41));
  memset(&v40, 0, sizeof(v40));
  v44.origin.CGFloat y = a10;
  v44.size.CGFloat width = a11;
  v44.size.CGFloat height = a12;
  CGRectDivide(v44, &slice, &remainder, a14, CGRectMinXEdge);
  CGRectDivide(remainder, &v40, &v41, a16, CGRectMaxXEdge);
  CGFloat v27 = a6 * (double)a3;
  double v28 = a7 * (double)a3;
  CGFloat v29 = a8 * (double)a3;
  CGFloat v30 = a16 * (double)a3;
  DrawImageRegion(a1, a2, a4, (double)a3, 0.0, v27, a14 * (double)a3, v29, v31, v32, v33, slice.origin.x, slice.origin.y, slice.size.width, slice.size.height);
  DrawImageRegion(a1, a2, a4, (double)a3, a14 * (double)a3, v27, v28 - a14 * (double)a3 - v30, v29, v34, v35, v36, v41.origin.x, v41.origin.y, v41.size.width, v41.size.height);
  DrawImageRegion(a1, a2, a4, (double)a3, v28 - v30, v27, v30, v29, v37, v38, v39, v40.origin.x, v40.origin.y, v40.size.width, v40.size.height);
}

void DrawImageRegion(CGContext *a1, CGImage *a2, int a3, double a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, double a9, double a10, double a11, CGFloat a12, double a13, double a14, double a15)
{
  v32.origin.CGFloat x = a12;
  v32.origin.CGFloat y = a13;
  v32.size.CGFloat width = a14;
  v32.size.CGFloat height = a15;
  if (!CGRectIsEmpty(v32))
  {
    v33.origin.CGFloat x = a5;
    v33.origin.CGFloat y = a6;
    v33.size.CGFloat width = a7;
    v33.size.CGFloat height = a8;
    if (!CGRectIsEmpty(v33))
    {
      if (!a3
        || ((CGContextGetCTM(&v30, a1), CGAffineTransformInvert(&v31, &v30), a7 * v31.a + a8 * v31.c == a14)
          ? (BOOL v24 = a7 * v31.b + a8 * v31.d == a15)
          : (BOOL v24 = 0),
            v24))
      {
        v37.origin.CGFloat x = a5;
        v37.origin.CGFloat y = a6;
        v37.size.CGFloat width = a7;
        v37.size.CGFloat height = a8;
        CGFloat v27 = CGImageCreateWithImageInRect(a2, v37);
        if (v27)
        {
          double v28 = v27;
          v38.origin.CGFloat x = a12;
          v38.origin.CGFloat y = a13;
          v38.size.CGFloat width = a14;
          v38.size.CGFloat height = a15;
          CGContextDrawImage(a1, v38, v27);
          CGImageRelease(v28);
        }
      }
      else
      {
        CGContextSaveGState(a1);
        v34.origin.CGFloat x = a12;
        v34.origin.CGFloat y = a13;
        v34.size.CGFloat width = a14;
        v34.size.CGFloat height = a15;
        CGContextClipToRect(a1, v34);
        v35.origin.CGFloat x = a5;
        v35.origin.CGFloat y = a6;
        v35.size.CGFloat width = a7;
        v35.size.CGFloat height = a8;
        uint64_t v25 = CGImageCreateWithImageInRect(a2, v35);
        if (v25)
        {
          CGAffineTransform v26 = v25;
          v36.origin.CGFloat y = a13 + a15;
          v36.size.CGFloat width = a7 / a4;
          v36.size.CGFloat height = a8 / a4;
          v36.origin.CGFloat x = a12;
          CGContextDrawTiledImage(a1, v36, v25);
          CGImageRelease(v26);
        }
        CGContextRestoreGState(a1);
      }
    }
  }
}

void draw9PartSlice(void *a1, double *a2, uint64_t a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, double a8)
{
  remainder.origin.CGFloat x = a4;
  remainder.origin.CGFloat y = a5;
  remainder.size.CGFloat width = a6;
  remainder.size.CGFloat height = a7;
  memset(&slice, 0, sizeof(slice));
  CGFloat v15 = a2[2];
  id v16 = a1;
  v37.origin.CGFloat x = a4;
  v37.origin.CGFloat y = a5;
  v37.size.CGFloat width = a6;
  v37.size.CGFloat height = a7;
  CGRectDivide(v37, &slice, &remainder, v15, CGRectMinXEdge);
  draw9PartPart(v16, a3, *a2, a2[1], a2[2], a2[3], slice.origin.x, slice.origin.y, slice.size.width, slice.size.height, v17, v18, v19, v20, v21, v22, *(uint64_t *)&a8);
  CGRectDivide(remainder, &slice, &remainder, a2[10], CGRectMaxXEdge);
  draw9PartPart(v16, a3, a2[4], a2[5], a2[6], a2[7], remainder.origin.x, remainder.origin.y, remainder.size.width, remainder.size.height, v23, v24, v25, v26, v27, v28, *(uint64_t *)&a8);
  draw9PartPart(v16, a3, a2[8], a2[9], a2[10], a2[11], slice.origin.x, slice.origin.y, slice.size.width, slice.size.height, v29, v30, v31, v32, v33, v34, *(uint64_t *)&a8);
}

void draw9PartPart(void *a1, uint64_t a2, double a3, double a4, double a5, double a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  id v25 = a1;
  BOOL v26 = a5 == 1.0 || a6 == 1.0;
  id v36 = v25;
  if (v26)
  {
    objc_msgSend(v25, "compositeToRect:fromRect:operation:fraction:", 2, a7, a8, a9, a10, a3, a4, a5, a6, a17);
  }
  else
  {
    ContextStacuint64_t k = GetContextStack(0);
    if (*(int *)ContextStack < 1) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = (CGContext *)ContextStack[3 * (*(_DWORD *)ContextStack - 1) + 1];
    }
    CGContextSaveGState(v28);
    double v35 = a7;
    v38.origin.CGFloat x = a7;
    v38.origin.CGFloat y = a8;
    double v29 = a9;
    v38.size.CGFloat width = a9;
    double v30 = a10;
    v38.size.CGFloat height = a10;
    CGContextClipToRect(v28, v38);
    double v34 = a8 + a10;
    if (a8 < a8 + v30)
    {
      double v31 = v35 + v29;
      do
      {
        if (v35 < v31)
        {
          double v32 = v35;
          do
          {
            objc_msgSend(v36, "compositeToRect:fromRect:operation:fraction:", a2, v32, a8, a5, a6, a3, a4, a5, a6, a17);
            double v32 = a5 + v32;
          }
          while (v32 < v31);
        }
        a8 = a6 + a8;
      }
      while (a8 < v34);
    }
    CGContextRestoreGState(v28);
  }
}

void __destructor_8_sb8_sb16(uint64_t a1)
{
  CGImageRef v2 = *(void **)(a1 + 16);
}

void sub_1860E596C(_Unwind_Exception *a1)
{
  __destructor_8_sb8_sb16(v1);
  _Unwind_Resume(a1);
}

__CFString *_UIDataSourceUpdateActionDescription(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 3)
  {
    objc_msgSend(NSString, "stringWithFormat:", @"(unhandled action: %ld)", a1);
    uint64_t v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v1 = off_1E52F19C8[a1 - 1];
  }
  return v1;
}

unint64_t _UISceneLifecycleStateIsInTaskSwitcher(void *a1)
{
  return ((unint64_t)[a1 deactivationReasons] >> 3) & 1;
}

uint64_t _UISceneLifecycleCompositeActionMaskFromStateToState(uint64_t a1, uint64_t a2)
{
  return _UISceneLifecycleCompositeActionMaskFromStateToState__staticStateMap[4 * a1 + 5 + a2];
}

uint64_t _UISceneLifecycleCompositeActionMaskContainsActionType(unsigned int a1, char a2)
{
  return (a1 >> a2) & 1;
}

__CFString *_UISceneLifecycleActionDescription(unsigned int a1)
{
  if (a1 > 6) {
    return &stru_1ED0E84C0;
  }
  else {
    return off_1E52F1A08[a1];
  }
}

id _UISceneLifecycleCompositeActionMaskComponentDescriptionComponents(int a1)
{
  uint64_t v5 = 0;
  id v6 = &v5;
  uint64_t v7 = 0x3032000000;
  CGRect v8 = __Block_byref_object_copy__111;
  double v9 = __Block_byref_object_dispose__111;
  id v10 = [MEMORY[0x1E4F1CA48] array];
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  void v4[2] = ___UISceneLifecycleCompositeActionMaskComponentDescriptionComponents_block_invoke;
  v4[3] = &unk_1E52F19E8;
  void v4[4] = &v5;
  _UIScenePerformActionsWithLifecycleActionMask(a1, v4);
  id v2 = (id)v6[5];
  _Block_object_dispose(&v5, 8);

  return v2;
}

void sub_1860E5B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1860E6E8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1860E7AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double UIInterfaceDefaultCornerRadius()
{
  return 4.5;
}

uint64_t _UIUserInterfaceSizeClassForHeightAndUserInterfaceIdiom(unint64_t a1, double a2)
{
  if (a1 > 8) {
    return 0;
  }
  if (((1 << a1) & 0x126) != 0) {
    return 2;
  }
  if (a1) {
    return 0;
  }
  _UIScreenReferenceBoundsSizeForType(1uLL);
  if (v4 > a2) {
    return 1;
  }
  else {
    return 2;
  }
}

BOOL _UIUserInterfaceStyleIsDarkUI(uint64_t a1)
{
  return a1 == 2 || a1 == 1000;
}

unint64_t _UISSlotAccessibilityContrastFromAccessibilityContrast(unint64_t a1)
{
  unint64_t v1 = a1;
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (a1 >= 2)
  {
    if (os_variant_has_internal_diagnostics())
    {
      double v4 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      {
        int v5 = 134217984;
        unint64_t v6 = v1;
        _os_log_fault_impl(&dword_1853B0000, v4, OS_LOG_TYPE_FAULT, "Unexpected accessibility contrast for slot: %ld", (uint8_t *)&v5, 0xCu);
      }
    }
    else
    {
      id v2 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_UISSlotAccessibilityContrastFromAccessibilityContrast___s_category)+ 8);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      {
        int v5 = 134217984;
        unint64_t v6 = v1;
        _os_log_impl(&dword_1853B0000, v2, OS_LOG_TYPE_ERROR, "Unexpected accessibility contrast for slot: %ld", (uint8_t *)&v5, 0xCu);
      }
    }
    return 0;
  }
  return v1;
}

uint64_t _UISSlotDisplayRangeFromDisplayGamut(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a1 == 1) {
      return 2;
    }
    if (os_variant_has_internal_diagnostics())
    {
      double v4 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      {
        int v5 = 134217984;
        uint64_t v6 = a1;
        _os_log_fault_impl(&dword_1853B0000, v4, OS_LOG_TYPE_FAULT, "Unexpected display gamut for slot: %ld", (uint8_t *)&v5, 0xCu);
      }
    }
    else
    {
      id v3 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_UISSlotDisplayRangeFromDisplayGamut___s_category) + 8);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        int v5 = 134217984;
        uint64_t v6 = a1;
        _os_log_impl(&dword_1853B0000, v3, OS_LOG_TYPE_ERROR, "Unexpected display gamut for slot: %ld", (uint8_t *)&v5, 0xCu);
      }
    }
  }
  return 1;
}

uint64_t _UISSlotDisplayScaleFromDisplayScale(double a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = llround(a1);
  if (v1 >= 7) {
    unsigned int v2 = 7;
  }
  else {
    unsigned int v2 = v1;
  }
  if (v1) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 1;
  }
  if (v3 != v1)
  {
    if (os_variant_has_internal_diagnostics())
    {
      uint64_t v7 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      {
        int v8 = 134217984;
        double v9 = a1;
        _os_log_fault_impl(&dword_1853B0000, v7, OS_LOG_TYPE_FAULT, "Unexpected display scale for slot: %f", (uint8_t *)&v8, 0xCu);
      }
    }
    else
    {
      int v5 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_UISSlotDisplayScaleFromDisplayScale___s_category) + 8);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        int v8 = 134217984;
        double v9 = a1;
        _os_log_impl(&dword_1853B0000, v5, OS_LOG_TYPE_ERROR, "Unexpected display scale for slot: %f", (uint8_t *)&v8, 0xCu);
      }
    }
  }
  return v3;
}

unint64_t _UISSlotLayoutDirectionFromTraitEnvironmentLayoutDirection(unint64_t a1)
{
  unint64_t v1 = a1;
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (a1 >= 2)
  {
    if (os_variant_has_internal_diagnostics())
    {
      double v4 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      {
        int v5 = 134217984;
        unint64_t v6 = v1;
        _os_log_fault_impl(&dword_1853B0000, v4, OS_LOG_TYPE_FAULT, "Unexpected layout direction for slot: %ld", (uint8_t *)&v5, 0xCu);
      }
    }
    else
    {
      unsigned int v2 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_UISSlotLayoutDirectionFromTraitEnvironmentLayoutDirection___s_category)+ 8);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      {
        int v5 = 134217984;
        unint64_t v6 = v1;
        _os_log_impl(&dword_1853B0000, v2, OS_LOG_TYPE_ERROR, "Unexpected layout direction for slot: %ld", (uint8_t *)&v5, 0xCu);
      }
    }
    return 0;
  }
  return v1;
}

unint64_t _UISSlotLegibilityWeightFromLegibilityWeight(unint64_t a1)
{
  unint64_t v1 = a1;
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (a1 >= 2)
  {
    if (os_variant_has_internal_diagnostics())
    {
      double v4 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      {
        int v5 = 134217984;
        unint64_t v6 = v1;
        _os_log_fault_impl(&dword_1853B0000, v4, OS_LOG_TYPE_FAULT, "Unexpected legibility weight for slot: %ld", (uint8_t *)&v5, 0xCu);
      }
    }
    else
    {
      unsigned int v2 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_UISSlotLegibilityWeightFromLegibilityWeight___s_category)+ 8);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      {
        int v5 = 134217984;
        unint64_t v6 = v1;
        _os_log_impl(&dword_1853B0000, v2, OS_LOG_TYPE_ERROR, "Unexpected legibility weight for slot: %ld", (uint8_t *)&v5, 0xCu);
      }
    }
    return 0;
  }
  return v1;
}

uint64_t _UISSlotUserInterfaceStyleFromUserInterfaceStyle(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (a1 != 1)
  {
    if (a1 == 2) {
      return 1;
    }
    if (os_variant_has_internal_diagnostics())
    {
      double v4 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      {
        int v5 = 134217984;
        uint64_t v6 = a1;
        _os_log_fault_impl(&dword_1853B0000, v4, OS_LOG_TYPE_FAULT, "Unexpected user interface style for slot: %ld", (uint8_t *)&v5, 0xCu);
      }
    }
    else
    {
      uint64_t v3 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_UISSlotUserInterfaceStyleFromUserInterfaceStyle___s_category)+ 8);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        int v5 = 134217984;
        uint64_t v6 = a1;
        _os_log_impl(&dword_1853B0000, v3, OS_LOG_TYPE_ERROR, "Unexpected user interface style for slot: %ld", (uint8_t *)&v5, 0xCu);
      }
    }
  }
  return 0;
}

UIImage *_UIImageForView(void *a1)
{
  void v14[2] = *MEMORY[0x1E4F143B8];
  if (!a1) {
    goto LABEL_4;
  }
  v13[0] = @"src-rect";
  unint64_t v1 = (void *)MEMORY[0x1E4F29238];
  id v2 = a1;
  [v2 bounds];
  v12[0] = v3;
  v12[1] = v4;
  _OWORD v12[2] = v5;
  _OWORD v12[3] = v6;
  uint64_t v7 = [v1 valueWithBytes:v12 objCType:"{CGRect={CGPoint=dd}{CGSize=dd}}"];
  v13[1] = @"dst-gamut";
  v14[0] = v7;
  v14[1] = &unk_1ED3F4440;
  int v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v14 forKeys:v13 count:2];
  double v9 = _UIRenderView(v2, v8, &__block_literal_global_460);

  if (v9)
  {
    uint64_t v10 = [[UIImage alloc] initWithIOSurface:v9];
    CFRelease(v9);
  }
  else
  {
LABEL_4:
    uint64_t v10 = 0;
  }
  return v10;
}

CGImage *_UIBezierPathAroundViewAlpha(void *a1)
{
  v33[2] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    v32[0] = @"src-rect";
    uint64_t v3 = (void *)MEMORY[0x1E4F29238];
    [v1 bounds];
    v31[0] = v4;
    v31[1] = v5;
    v31[2] = v6;
    _OWORD v31[3] = v7;
    int v8 = [v3 valueWithBytes:v31 objCType:"{CGRect={CGPoint=dd}{CGSize=dd}}"];
    v32[1] = @"dst-gamut";
    v33[0] = v8;
    v33[1] = &unk_1ED3F4440;
    double v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v33 forKeys:v32 count:2];
    uint64_t v10 = _UIRenderView(v2, v9, &__block_literal_global_460);

    if (!v10) {
      goto LABEL_9;
    }
    float v11 = _UICreateCGImageFromIOSurfaceWithOptions(v10, 0);
    CFRelease(v10);
    if (v11)
    {
      unint64_t Width = CGImageGetWidth(v11);
      unint64_t Height = CGImageGetHeight(v11);
      CGFloat v14 = *MEMORY[0x1E4F1DAD8];
      CGFloat v15 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
      CGFloat v16 = (double)Width;
      CGFloat v17 = (double)Height;
      DeviceGraCGFloat y = CGColorSpaceCreateDeviceGray();
      uint64_t v19 = CGBitmapContextCreate(0, Width, Height, 8uLL, Width, DeviceGray, 0);
      id v20 = +[UIColor blackColor];
      CGContextSetFillColorWithColor(v19, (CGColorRef)[v20 CGColor]);

      v35.origin.CGFloat x = v14;
      v35.origin.CGFloat y = v15;
      v35.size.CGFloat width = v16;
      v35.size.CGFloat height = v17;
      CGContextFillRect(v19, v35);
      v36.origin.CGFloat x = v14;
      v36.origin.CGFloat y = v15;
      v36.size.CGFloat width = v16;
      v36.size.CGFloat height = v17;
      CGContextClipToMask(v19, v36, v11);
      id v21 = +[UIColor whiteColor];
      CGContextSetFillColorWithColor(v19, (CGColorRef)[v21 CGColor]);

      v37.origin.CGFloat x = v14;
      v37.origin.CGFloat y = v15;
      v37.size.CGFloat width = v16;
      v37.size.CGFloat height = v17;
      CGContextFillRect(v19, v37);
      CGImageRef Image = CGBitmapContextCreateImage(v19);
      CGContextRelease(v19);
      CGColorSpaceRelease(DeviceGray);
      uint64_t v23 = CGPathCreateWithThresholdedImage();
      if (v23)
      {
        uint64_t v24 = (const CGPath *)v23;
        uint64_t v10 = +[UIBezierPath bezierPathWithCGPath:v23];
        [v2 bounds];
        double v25 = CGRectGetWidth(v38);
        CGFloat v26 = v25 / (double)CGImageGetWidth(v11);
        [v2 bounds];
        double v27 = CGRectGetHeight(v39);
        size_t v28 = CGImageGetHeight(v11);
        CGAffineTransformMakeScale(&v30, v26, v27 / (double)v28);
        [(CGImage *)v10 applyTransform:&v30];
        CGPathRelease(v24);
      }
      else
      {
        uint64_t v10 = 0;
      }
      CFRelease(Image);
      CFRelease(v11);
      goto LABEL_9;
    }
  }
  uint64_t v10 = 0;
LABEL_9:

  return v10;
}

id GetTintedToolbarBackgroundImage(int a1, void *a2)
{
  id v2 = 0;
  if (a1 >= 1 && a2)
  {
    CGFloat v3 = (double)a1;
    id v4 = a2;
    _UIGraphicsBeginImageContextWithOptions(0, 0, 1.0, v3, 0.0);
    uint64_t v5 = [v4 colorWithAlphaComponent:1.0];

    [v5 setFill];
    UIRectFillUsingOperation(1, 0.0, 0.0, 1.0, v3);
    id v2 = _UIGraphicsGetImageFromCurrentImageContext(0);
    ContextStacuint64_t k = (int *)GetContextStack(0);
    PopContextFromStack(ContextStack);
  }
  return v2;
}

id GetTintedPromptTextColor(void *a1)
{
  double v10 = 0.0;
  double v8 = 0.0;
  double v9 = 0.0;
  double v7 = 0.0;
  if (a1)
  {
    [a1 getRed:&v10 green:&v9 blue:&v8 alpha:&v7];
    double v1 = v7;
    double v2 = v10 * 0.4;
    double v3 = v9 * 0.4;
    double v4 = v8 * 0.4;
  }
  else
  {
    double v1 = 0.0;
    double v4 = 0.0;
    double v3 = 0.0;
    double v2 = 0.0;
  }
  uint64_t v5 = +[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", v2, v3, v4, v1, *(void *)&v7, *(void *)&v8, *(void *)&v9, *(void *)&v10);
  return v5;
}

uint64_t _UIGetTintedCircularButtonImage()
{
  return 0;
}

UIColor *_UIGetTintedCircularButtonDefaultRedColor()
{
  return +[UIColor colorWithRed:0.643137255 green:0.0352941176 blue:0.109803922 alpha:1.0];
}

UIColor *_UIGetTintedCircularButtonDefaultGreenColor()
{
  return +[UIColor colorWithRed:0.0235294118 green:0.701960784 blue:0.0 alpha:1.0];
}

UIColor *_UIGetTintedCircularButtonDefaultBlueColor()
{
  return +[UIColor colorWithRed:0.215686275 green:0.349019608 blue:0.866666667 alpha:1.0];
}

uint64_t _UIGetTintedCircularButtonImageOfType()
{
  return 0;
}

uint64_t _UIGetTintedBackButtonImage()
{
  return 0;
}

uint64_t _UIGetTintedSegmentBarBackgroundImage()
{
  return 0;
}

uint64_t _UIGetTintedSegmentBarSelectedBackgroundImage()
{
  return 0;
}

uint64_t _UIGetTintedSegmentBarDividerImage()
{
  return 0;
}

uint64_t _UIGetTintedSegmentBarFillSelectedImage()
{
  return 0;
}

uint64_t _UIGetTintedSegmentBarLeftCapSelectedImage()
{
  return 0;
}

uint64_t _UIGetTintedSegmentBarRightCapSelectedImage()
{
  return 0;
}

id _GetLightenedTintColor(void *a1)
{
  if (a1)
  {
    var8[0] = 0.0;
    double v4 = 0.0;
    double v5 = 0.0;
    uint64_t v3 = 0;
    [a1 getRed:var8 green:&v5 blue:&v4 alpha:&v3];
    var8[0] = var8[0] * 0.6 + 0.4;
    double v4 = v4 * 0.6 + 0.4;
    double v5 = v5 * 0.6 + 0.4;
    a1 = +[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:");
    double v1 = var8[2];
  }
  return a1;
}

id _UIImagePressedTintColor(void *a1, int a2)
{
  id v3 = a1;
  double v4 = v3;
  if (!a2)
  {
    id v16 = v3;
    goto LABEL_28;
  }
  double v38 = 0.0;
  uint64_t v36 = 0;
  float64x2_t v37 = 0uLL;
  if (v3)
  {
    [v3 getRed:&v38 green:&v37.f64[1] blue:&v37 alpha:&v36];
    double v5 = v38;
    float64x2_t v6 = v37;
  }
  else
  {
    float64x2_t v6 = 0uLL;
    double v5 = 0.0;
  }
  double v7 = v5 + v6.f64[1] + v6.f64[0];
  double v8 = 0.03;
  if (3.0 - v7 >= 0.3) {
    double v8 = (3.0 - v7) * 0.1;
  }
  if (a2 == 3 || a2 == 1) {
    double v10 = v8;
  }
  else {
    double v10 = 0.0;
  }
  double v11 = v5 / v7 * v10;
  if (v10 >= v11) {
    double v11 = v10;
  }
  float64x2_t v12 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v10, 0);
  float64x2_t v13 = vmulq_n_f64(vdivq_f64(v6, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v7, 0)), v10);
  float64x2_t v14 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v13, v12), (int8x16_t)v13, (int8x16_t)v12);
  switch(a2)
  {
    case 1:
      double v38 = fmax(v5 - v11, 0.0);
      float64x2_t v15 = vmaxnmq_f64(vsubq_f64(v6, v14), (float64x2_t)0);
LABEL_26:
      float64x2_t v37 = v15;
      break;
    case 2:
      double v17 = v5 * 0.6;
      float v18 = (1.0 - v5) / 0.56;
      double v19 = v17 + (1.0 - fminf(v18, 1.0)) * 0.4 - v11;
      if (v19 < 0.0) {
        double v19 = 0.0;
      }
      double v38 = v19;
      float64x2_t v20 = vmulq_f64(v6, (float64x2_t)vdupq_n_s64(0x3FE3333333333333uLL));
      __asm
      {
        FMOV            V4.2D, #1.0
        FMOV            V5.2S, #1.0
      }
      float64x2_t v26 = vsubq_f64(_Q4, vcvtq_f64_f32(vminnm_f32(vcvt_f32_f64(vdivq_f64(vsubq_f64(_Q4, v6), (float64x2_t)vdupq_n_s64(0x3FE1EB851EB851ECuLL))), _D5)));
      unint64_t v27 = 0x3FD999999999999ALL;
LABEL_25:
      float64x2_t v33 = vsubq_f64(vaddq_f64(v20, vmulq_f64(v26, (float64x2_t)vdupq_n_s64(v27))), v14);
      float64x2_t v15 = (float64x2_t)vbicq_s8((int8x16_t)v33, (int8x16_t)vcltzq_f64(v33));
      goto LABEL_26;
    case 3:
      double v28 = v5 * 0.3;
      float v29 = (1.0 - v5) / 0.46;
      double v30 = v28 + (1.0 - fminf(v29, 1.0)) * 0.7 - v11;
      if (v30 < 0.0) {
        double v30 = 0.0;
      }
      double v38 = v30;
      float64x2_t v20 = vmulq_f64(v6, (float64x2_t)vdupq_n_s64(0x3FD3333333333334uLL));
      __asm
      {
        FMOV            V4.2D, #1.0
        FMOV            V5.2S, #1.0
      }
      float64x2_t v26 = vsubq_f64(_Q4, vcvtq_f64_f32(vminnm_f32(vcvt_f32_f64(vdivq_f64(vsubq_f64(_Q4, v6), (float64x2_t)vdupq_n_s64(0x3FDD70A3D70A3D70uLL))), _D5)));
      unint64_t v27 = 0x3FE6666666666666;
      goto LABEL_25;
  }
  +[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", v36, *(_OWORD *)&v37, *(void *)&v38);
  id v16 = (id)objc_claimAutoreleasedReturnValue();
LABEL_28:
  double v34 = v16;

  return v34;
}

void sub_1860EB608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t _DecrementImageUsage(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (qword_1EB25A0D0 != -1) {
      dispatch_once(&qword_1EB25A0D0, &__block_literal_global_433);
    }
    [(id)qword_1EB25A0C8 removeObject:v1];
    if (qword_1EB25A0D0 != -1) {
      dispatch_once(&qword_1EB25A0D0, &__block_literal_global_433);
    }
    CGColorSpaceRef result = [(id)qword_1EB25A0C8 containsObject:v1];
    if ((result & 1) == 0)
    {
      if (qword_1EB25A0E0 != -1) {
        dispatch_once(&qword_1EB25A0E0, &__block_literal_global_436);
      }
      [(id)qword_1EB25A0D8 removeObjectForKey:v1];
      if (qword_1EB25A0F0 != -1) {
        dispatch_once(&qword_1EB25A0F0, &__block_literal_global_439);
      }
      double v2 = (void *)qword_1EB25A0E8;
      return [v2 removeObjectForKey:v1];
    }
  }
  return result;
}

void sub_1860EE498(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Unwind_Resume(a1);
}

uint64_t isRectInBoundingPathCornerWithMinimumPadding(long long *a1, int64x2_t *a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8)
{
  double v11 = a6;
  double v14 = a4 + a6;
  float64x2_t v15 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a8, 0);
  float64x2_t v16 = (float64x2_t)vdupq_n_s64(0x3FF921FB54442D18uLL);
  float64x2_t v17 = vmulq_f64(vaddq_f64(v15, vcvtq_f64_s64(*a2)), v16);
  double v18 = a5 + a7;
  float64x2_t v19 = vmulq_f64(vaddq_f64(v15, vcvtq_f64_s64(a2[1])), v16);
  double v20 = ceil(0.5* vaddq_f64(vaddq_f64(vaddq_f64(v17, (float64x2_t)vdupq_laneq_s64((int64x2_t)v17, 1)), v19), (float64x2_t)vdupq_laneq_s64((int64x2_t)v19, 1)).f64[0]);
  if (v20 < 8.0) {
    double v20 = 8.0;
  }
  double v21 = (double)(unint64_t)v20 * 0.125;
  unint64_t v22 = vcvtpd_u64_f64(v21);
  if (v22)
  {
    unint64_t v23 = 0;
    double v24 = 0.785398163 / (double)(unint64_t)ceil(v21);
    double v84 = v11;
    double v85 = a7;
    double v83 = v24;
LABEL_5:
    double v25 = v24 * (double)v23;
    if (a3 == 1)
    {
      unint64_t v26 = 0;
      goto LABEL_11;
    }
    double v27 = 0.0;
    char v28 = 1;
    while (1)
    {
      char v29 = v28;
      double v30 = (double)a2[1].i64[0];
      double v31 = v14 - v30;
      double v32 = v18 - v30;
      double v33 = v30 + a8;
      __double2 v34 = __sincos_stret(v25 + v27);
      long long v35 = a1[1];
      long long v92 = *a1;
      long long v93 = v35;
      long long v94 = a1[2];
      uint64_t v95 = *((void *)a1 + 6);
      if ((_UIBoundingPathBitmapDataRowHitTest((unint64_t *)&v92, llround(v31 + v34.__cosval * v33), llround(v32 + v34.__sinval * v33)) & 1) == 0)return 0; {
      char v28 = 0;
      }
      double v27 = 0.785398163;
      if ((v29 & 1) == 0)
      {
        unint64_t v26 = 2;
        unint64_t v36 = 2;
        if (a3 == 2) {
          goto LABEL_14;
        }
LABEL_11:
        while (1)
        {
          double v37 = (double)a2->i64[1];
          double v38 = a4 + v37;
          double v39 = v18 - v37;
          double v40 = v37 + a8;
          __double2 v41 = __sincos_stret(v25 + (double)v26 * 0.785398163);
          long long v42 = a1[1];
          long long v92 = *a1;
          long long v93 = v42;
          long long v94 = a1[2];
          uint64_t v95 = *((void *)a1 + 6);
          if ((_UIBoundingPathBitmapDataRowHitTest((unint64_t *)&v92, llround(v38 + v40 * v41.__cosval), llround(v39 + v40 * v41.__sinval)) & 1) == 0)return 0; {
          if (++v26 == 4)
          }
          {
            unint64_t v36 = 4;
            if (a3 == 8) {
              goto LABEL_18;
            }
LABEL_14:
            while (1)
            {
              double v43 = (double)a2->i64[0];
              double v44 = a4 + v43;
              double v45 = a5 + v43;
              double v46 = v43 + a8;
              __double2 v47 = __sincos_stret(v25 + (double)v36 * 0.785398163);
              long long v48 = a1[1];
              long long v92 = *a1;
              long long v93 = v48;
              long long v94 = a1[2];
              uint64_t v95 = *((void *)a1 + 6);
              if ((_UIBoundingPathBitmapDataRowHitTest((unint64_t *)&v92, llround(v44 + v46 * v47.__cosval), llround(v45 + v46 * v47.__sinval)) & 1) == 0)return 0; {
              if (++v36 == 6)
              }
              {
                if (a3 != 4)
                {
                  unint64_t v26 = 6;
LABEL_18:
                  do
                  {
                    double v49 = (double)a2[1].i64[1];
                    double v50 = v14 - v49;
                    double v51 = a5 + v49;
                    double v52 = v49 + a8;
                    __double2 v53 = __sincos_stret(v25 + (double)v26 * 0.785398163);
                    long long v54 = a1[1];
                    long long v92 = *a1;
                    long long v93 = v54;
                    long long v94 = a1[2];
                    uint64_t v95 = *((void *)a1 + 6);
                    if ((_UIBoundingPathBitmapDataRowHitTest((unint64_t *)&v92, llround(v50 + v52 * v53.__cosval), llround(v51 + v52 * v53.__sinval)) & 1) == 0)return 0; {
                  }
                    }
                  while (++v26 != 8);
                }
                ++v23;
                double v11 = v84;
                a7 = v85;
                double v24 = v83;
                if (v23 != v22) {
                  goto LABEL_5;
                }
                goto LABEL_21;
              }
            }
          }
        }
      }
    }
  }
  else
  {
LABEL_21:
    char v55 = 1;
    char v56 = 3;
    switch(a3)
    {
      case 1:
        break;
      case 2:
        char v55 = 0;
        char v56 = 9;
        break;
      case 4:
        char v56 = 6;
        break;
      case 8:
        char v55 = 0;
        char v56 = 12;
        break;
      default:
        CGRect v57 = [MEMORY[0x1E4F28B00] currentHandler];
        CGRect v58 = [NSString stringWithUTF8String:"UIRectEdge edgesForCorner(const UIRectCorner)"];
        objc_msgSend(v57, "handleFailureInFunction:file:lineNumber:description:", v58, @"_UIComplexBoundingPath.m", 709, @"Invalid UIRectCorner value (%ld)", a3);

        char v56 = 0;
        char v55 = 1;
        break;
    }
    long long v88 = *a1;
    long long v89 = a1[1];
    long long v90 = a1[2];
    uint64_t v91 = *((void *)a1 + 6);
    uint64_t v60 = a2->i64[0];
    uint64_t v59 = a2->i64[1];
    uint64_t v62 = a2[1].i64[0];
    uint64_t v61 = a2[1].i64[1];
    if (v11 > 0.0)
    {
      if (v56)
      {
        int64_t v64 = llround(a4 + (double)v60);
        unint64_t v65 = llround(a5 - a8);
        int64_t v66 = llround(v14 - (double)v61);
        while (v64 <= v66)
        {
          long long v92 = v88;
          long long v93 = v89;
          long long v94 = v90;
          uint64_t v95 = v91;
          char v67 = _UIBoundingPathBitmapDataRowHitTest((unint64_t *)&v92, v64, v65);
          v64 += v68;
          if ((v67 & 1) == 0) {
            return 0;
          }
        }
      }
      if ((v56 & 4) != 0)
      {
        int64_t v69 = llround(a4 + (double)v59);
        unint64_t v70 = llround(v18 + a8);
        int64_t v71 = llround(v14 - (double)v62);
        while (v69 <= v71)
        {
          long long v92 = v88;
          long long v93 = v89;
          long long v94 = v90;
          uint64_t v95 = v91;
          char v72 = _UIBoundingPathBitmapDataRowHitTest((unint64_t *)&v92, v69, v70);
          v69 += v73;
          if ((v72 & 1) == 0) {
            return 0;
          }
        }
      }
    }
    if (a7 <= 0.0) {
      return 1;
    }
    if ((v56 & 2) != 0)
    {
      unint64_t v74 = llround(a4 - a8);
      int64_t v75 = llround(a5 + (double)v60);
      int64_t v76 = llround(v18 - (double)v59);
      while (v75 <= v76)
      {
        long long v92 = v88;
        long long v93 = v89;
        long long v94 = v90;
        uint64_t v95 = v91;
        char v77 = _UIBoundingPathBitmapDataRowHitTest((unint64_t *)&v92, v74, v75++);
        if ((v77 & 1) == 0) {
          return 0;
        }
      }
    }
    if (v55)
    {
      return 1;
    }
    else
    {
      unint64_t v79 = llround(v14 + a8);
      int64_t v80 = llround(a5 + (double)v61);
      int64_t v81 = llround(v18 - (double)v62);
      do
      {
        BOOL v63 = v80 > v81;
        if (v80 > v81) {
          break;
        }
        long long v92 = v88;
        long long v93 = v89;
        long long v94 = v90;
        uint64_t v95 = v91;
        char v82 = _UIBoundingPathBitmapDataRowHitTest((unint64_t *)&v92, v79, v80++);
      }
      while ((v82 & 1) != 0);
    }
  }
  return v63;
}

double pointOnRectClosestToCorner(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  switch(a1)
  {
    case 1:
      double MinX = CGRectGetMinX(*(CGRect *)&a2);
      goto LABEL_4;
    case 2:
      double MinX = CGRectGetMaxX(*(CGRect *)&a2);
LABEL_4:
      double v11 = MinX;
      v16.origin.CGFloat x = a2;
      v16.origin.CGFloat y = a3;
      v16.size.CGFloat width = a4;
      v16.size.CGFloat height = a5;
      CGRectGetMinY(v16);
      return v11;
    case 4:
      double MaxX = CGRectGetMinX(*(CGRect *)&a2);
      goto LABEL_8;
    case 8:
      double MaxX = CGRectGetMaxX(*(CGRect *)&a2);
LABEL_8:
      double v11 = MaxX;
      v17.origin.CGFloat x = a2;
      v17.origin.CGFloat y = a3;
      v17.size.CGFloat width = a4;
      v17.size.CGFloat height = a5;
      CGRectGetMaxY(v17);
      break;
    default:
      float64x2_t v12 = [MEMORY[0x1E4F28B00] currentHandler];
      float64x2_t v13 = objc_msgSend(NSString, "stringWithUTF8String:", "CGPoint pointOnRectClosestToCorner(CGRect, UIRectCorner)");
      objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, @"_UIComplexBoundingPath.m", 837, @"Invalid UIRectCorner value (%ld)", a1);

      double v11 = *MEMORY[0x1E4F1DAD8];
      break;
  }
  return v11;
}

double testRectForPointOnArcInCorner(uint64_t a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6)
{
  switch(a6)
  {
    case 1:
      a2 = (double)a1;
      break;
    case 2:
      a2 = (double)a1 - a4;
      break;
    case 4:
      a2 = (double)a1;
      break;
    case 8:
      a2 = (double)a1 - a4;
      break;
    default:
      double v8 = [MEMORY[0x1E4F28B00] currentHandler];
      double v9 = objc_msgSend(NSString, "stringWithUTF8String:", "CGRect testRectForPointOnArcInCorner(CGRect, _UIIntegralPoint, UIRectCorner)");
      objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, @"_UIComplexBoundingPath.m", 859, @"Invalid UIRectCorner value (%ld)", a6);

      break;
  }
  return a2;
}

double _scrollRange(void *a1)
{
  id v1 = a1;
  [v1 contentInset];
  double v3 = -v2;
  [v1 contentSize];
  [v1 bounds];

  return v3;
}

unint64_t _UIRectCornerConvertedFromOrientationToPortrait(unint64_t result, uint64_t a2)
{
  if (result != -1)
  {
    switch(a2)
    {
      case 0:
      case 1:
        return result;
      case 2:
        CGColorSpaceRef result = __rbit32(result) >> 28;
        break;
      case 3:
        uint64_t v2 = (4 * (int)result) & 8 | (2 * (result & 1)) | (result >> 2) & 1;
        uint64_t v3 = (result >> 1) & 4;
        goto LABEL_8;
      case 4:
        uint64_t v2 = (4 * (result & 1)) & 0xF7 | (result >> 1) & 1 | (8 * ((result >> 2) & 1));
        uint64_t v3 = (result >> 2) & 2;
LABEL_8:
        CGColorSpaceRef result = v2 | v3;
        break;
      default:
        CGColorSpaceRef result = 0;
        break;
    }
  }
  return result;
}

void _UIAspectRatioConvertedFromOrientationToPortrait(double a1)
{
  if (a1 == 0.0)
  {
    id v1 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v2 = objc_msgSend(NSString, "stringWithUTF8String:", "CGFloat _UIAspectRatioConvertedFromOrientationToPortrait(CGFloat, UIInterfaceOrientation)");
    [v1 handleFailureInFunction:v2 file:@"_UIBoundingPath.m" lineNumber:82 description:@"Cannot convert an aspect ratio of zero."];
  }
}

double _UIDirectionVectorForCorner(uint64_t a1)
{
  double result = 1.0;
  switch(a1)
  {
    case 1:
    case 4:
      return result;
    case 2:
      double result = -1.0;
      break;
    case 8:
      double result = -1.0;
      break;
    default:
      uint64_t v3 = objc_msgSend(MEMORY[0x1E4F28B00], "currentHandler", 1.0, 1.0);
      double v4 = [NSString stringWithUTF8String:"CGVector _UIDirectionVectorForCorner(const UIRectCorner)"];
      objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"_UIBoundingPath.m", 150, @"Invalid UIRectCorner value (%ld)", a1);

      double result = 0.0;
      break;
  }
  return result;
}

void _UIBoundingPathLargestInscribedRectWithAspectRatioAndCenter(double a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  v15.origin.CGFloat x = a2;
  v15.origin.CGFloat y = a3;
  v15.size.CGFloat width = a4;
  v15.size.CGFloat height = a5;
  v14.CGFloat x = a6;
  v14.CGFloat y = a7;
  if (CGRectContainsPoint(v15, v14))
  {
    if (a1 <= 0.0)
    {
      float64x2_t v12 = [MEMORY[0x1E4F28B00] currentHandler];
      float64x2_t v13 = objc_msgSend(NSString, "stringWithUTF8String:", "CGRect _UIBoundingPathLargestInscribedRectWithAspectRatioAndCenter(const CGFloat, const CGRect, const CGPoint)");
      [v12 handleFailureInFunction:v13 file:@"_UIBoundingPath.m" lineNumber:279 description:@"Invalid aspect ratio."];
    }
    v16.origin.CGFloat x = a2;
    v16.origin.CGFloat y = a3;
    v16.size.CGFloat width = a4;
    v16.size.CGFloat height = a5;
    CGRectGetMinX(v16);
    v17.origin.CGFloat x = a2;
    v17.origin.CGFloat y = a3;
    v17.size.CGFloat width = a4;
    v17.size.CGFloat height = a5;
    CGRectGetMaxX(v17);
    v18.origin.CGFloat x = a2;
    v18.origin.CGFloat y = a3;
    v18.size.CGFloat width = a4;
    v18.size.CGFloat height = a5;
    CGRectGetMinY(v18);
    v19.origin.CGFloat x = a2;
    v19.origin.CGFloat y = a3;
    v19.size.CGFloat width = a4;
    v19.size.CGFloat height = a5;
    CGRectGetMaxY(v19);
  }
}

void sub_1860F0E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t _UIComputeSkipRegionForBoundingPathData(uint64_t a1, uint64_t a2, void *a3)
{
  double v5 = a3;
  if (!a2)
  {
    uint64_t v7 = 0;
    char v8 = 1;
    uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_21:
    uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v14 = v7;
    goto LABEL_22;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  char v8 = 1;
  uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v17 = a2;
  do
  {
    if (a1)
    {
      uint64_t v11 = 0;
      do
      {
        if (v10 == 0x7FFFFFFFFFFFFFFFLL) {
          uint64_t v12 = v7;
        }
        else {
          uint64_t v12 = v10;
        }
        uint64_t v13 = v6 - v12;
        if ((v8 & 1) == 0)
        {
          uint64_t v12 = v10;
          uint64_t v13 = v9;
        }
        if (v6 != v7)
        {
          uint64_t v10 = v12;
          uint64_t v9 = v13;
          char v8 = 1;
        }
        if ((v5[2](v5, v11, v6) & 1) == 0)
        {
          if (v9 != 0x7FFFFFFFFFFFFFFFLL) {
            goto LABEL_27;
          }
          char v8 = 0;
        }
        ++v11;
        uint64_t v7 = v6;
      }
      while (a1 != v11);
      uint64_t v7 = v6;
      a2 = v17;
    }
    ++v6;
  }
  while (v6 != a2);
  uint64_t v14 = v10;
  if (v10 == 0x7FFFFFFFFFFFFFFFLL) {
    goto LABEL_21;
  }
LABEL_22:
  uint64_t v15 = a2 - v14;
  if ((v8 & 1) == 0)
  {
    uint64_t v14 = v10;
    uint64_t v15 = v9;
  }
  if (v15 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = v14;
  }
LABEL_27:

  return v10;
}

void _UICreateBoundingPathBitmapData(unint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, void *a5@<X4>, unint64_t *a6@<X8>)
{
  id v10 = a5;
  id v46 = v10;
  double v38 = a6;
  if ((uint64_t)a1 < 1 || a2 < 1)
  {
    double v32 = [MEMORY[0x1E4F28B00] currentHandler];
    double v33 = objc_msgSend(NSString, "stringWithUTF8String:", "_UIBoundingPathBitmapData _UICreateBoundingPathBitmapData(const _UIIntegralSize, const _UIBoundingPathBitmapDataSkipRegion, BOOL (^__strong _Nonnull)(_UIIntegralPoint))");
    [v32 handleFailureInFunction:v33, @"_UIBoundingPathBitmapData.m", 102, @"Invalid parameter not satisfying: %@", @"size.width > 0 && size.height > 0" file lineNumber description];

    id v34 = v46;
    if (!a2)
    {
      unint64_t v12 = 0;
      uint64_t v14 = (uint64_t (**)(void, void, void))v46;
      goto LABEL_19;
    }
  }
  else
  {
    id v11 = v10;
  }
  unint64_t v12 = 0;
  unint64_t v13 = 0;
  uint64_t v14 = (uint64_t (**)(void, void, void))v46;
  do
  {
    if (v13 < a3 || v13 >= a3 + a4)
    {
      unint64_t v15 = v12;
      unint64_t v16 = 0;
      if (a1)
      {
        unint64_t v17 = 0;
        do
        {
          int v18 = ((uint64_t (**)(id, unint64_t, unint64_t))v14)[2](v46, v17, v13);
          uint64_t v14 = (uint64_t (**)(void, void, void))v46;
          if (++v17 < a1)
          {
            while (v18 == v14[2](v14, v17, v13))
            {
              ++v17;
              uint64_t v14 = (uint64_t (**)(void, void, void))v46;
              if (a1 == v17)
              {
                ++v16;
                goto LABEL_15;
              }
            }
            uint64_t v14 = (uint64_t (**)(void, void, void))v46;
          }
          ++v16;
        }
        while (v17 < a1);
      }
LABEL_15:
      if (v16 <= v15) {
        unint64_t v12 = v15;
      }
      else {
        unint64_t v12 = v16;
      }
    }
    ++v13;
  }
  while (v13 != a2);
LABEL_19:

  size_t v37 = v12 * (a2 - a4);
  CGRect v19 = malloc_type_calloc(v37, 2uLL, 0x1000040BDFB0063uLL);
  if (!v19)
  {
    long long v35 = [MEMORY[0x1E4F28B00] currentHandler];
    unint64_t v36 = objc_msgSend(NSString, "stringWithUTF8String:", "_UIBoundingPathBitmapData _UICreateBoundingPathBitmapData(const _UIIntegralSize, const _UIBoundingPathBitmapDataSkipRegion, BOOL (^__strong _Nonnull)(_UIIntegralPoint))");
    [v35 handleFailureInFunction:v36 file:@"_UIBoundingPathBitmapData.m" lineNumber:107 description:@"Failed to allocate memory for storing the bitmap data."];
  }
  double v20 = (uint64_t (**)(void, void, void))v46;
  if (a2)
  {
    unint64_t v21 = 0;
    unint64_t v41 = a3;
    unint64_t v42 = a3 + a4;
    double v43 = v19;
    uint64_t v40 = a2;
    do
    {
      if (v21 < a3 || v21 >= v42)
      {
        unint64_t v22 = a4;
        if (v21 < v42) {
          unint64_t v22 = 0;
        }
        if (a1)
        {
          unint64_t v23 = 0;
          unint64_t v24 = 0;
          unint64_t v25 = (v21 - v22) * v12;
          unint64_t v44 = v25;
          do
          {
            if (v24 >= v12)
            {
              char v29 = [MEMORY[0x1E4F28B00] currentHandler];
              double v30 = objc_msgSend(NSString, "stringWithUTF8String:", "_UIBoundingPathBitmapData _UICreateBoundingPathBitmapData(const _UIIntegralSize, const _UIBoundingPathBitmapDataSkipRegion, BOOL (^__strong _Nonnull)(_UIIntegralPoint))");
              [v29 handleFailureInFunction:v30 file:@"_UIBoundingPathBitmapData.m" lineNumber:127 description:@"maximumNodesPerRow was computed incorrectly (too small)"];

              unint64_t v25 = v44;
              double v20 = (uint64_t (**)(void, void, void))v46;
            }
            int v26 = v20[2](v20, v23, v21);
            if (v23 + 1 >= a1)
            {
              ++v23;
              LOWORD(v27) = 1;
            }
            else
            {
              unint64_t v27 = 1;
              while (v26 == (*((unsigned int (**)(id, unint64_t, unint64_t))v46 + 2))(v46, v23 + v27, v21))
              {
                ++v27;
                if (!(v23 - a1 + v27))
                {
                  unint64_t v27 = a1 - v23;
                  unint64_t v23 = a1;
                  goto LABEL_38;
                }
              }
              v23 += v27;
LABEL_38:
              CGRect v19 = v43;
              unint64_t v25 = v44;
              if (v27 >= 0x8000)
              {
                double v45 = [MEMORY[0x1E4F28B00] currentHandler];
                double v31 = objc_msgSend(NSString, "stringWithUTF8String:", "_UIBoundingPathBitmapDataNode _UIBoundingPathBitmapDataNodeMake(BOOL, size_t)");
                objc_msgSend(v45, "handleFailureInFunction:file:lineNumber:description:", v31, @"_UIBoundingPathBitmapData.h", 105, @"columns value %lu is too large to be stored in available space", v27);

                unint64_t v25 = v44;
              }
            }
            double v20 = (uint64_t (**)(void, void, void))v46;
            __int16 v28 = v27 | 0x8000;
            if (!v26) {
              __int16 v28 = v27;
            }
            v19[v24 + v25] = v28;
            ++v24;
          }
          while (v23 < a1);
        }
      }
      ++v21;
      a2 = v40;
      a3 = v41;
    }
    while (v21 != v40);
  }
  *double v38 = a1;
  v38[1] = a2;
  v38[2] = a3;
  _OWORD v38[3] = a4;
  void v38[4] = v37;
  void v38[5] = v12;
  v38[6] = (unint64_t)v19;
}

void _UIBoundingPathBitmapDataFromDataWithRectAndRadii(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  unint64_t v8 = a2[3];
  uint64_t v9 = *a2;
  uint64_t v36 = a2[2];
  uint64_t v10 = *a2 + v36 - *(void *)a1;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  long long v67 = 0u;
  long long v68 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v13 = *((_OWORD *)a2 + 1);
  long long v37 = *(_OWORD *)a2;
  long long v38 = v13;
  long long v14 = *(_OWORD *)(a3 + 16);
  long long v51 = *(_OWORD *)a3;
  long long v52 = v14;
  *(void *)&double v15 = _UIBoundingPathBitmapDataCreateRoundRectWithCornerRadii((uint64_t)&v37, (uint64_t *)&v51, (uint64_t)&v55).n128_u64[0];
  uint64_t v16 = v9;
  unint64_t v17 = 0;
  unint64_t v18 = 0;
  if ((v16 & 0x8000000000000000) == 0 && v10 <= 0)
  {
    uint64_t v19 = a2[1];
    if (v19 >= v12 + v11)
    {
      unint64_t v17 = 0;
      unint64_t v18 = 0;
    }
    else
    {
      unint64_t v20 = (v11 - v19) & ~((v11 - v19) >> 63);
      uint64_t v21 = v12 + v11 - v19 - v20;
      if (v21 >= (uint64_t)(v8 - v20)) {
        uint64_t v21 = v8 - v20;
      }
      unint64_t v22 = v58;
      if ((unint64_t)v58 <= (unint64_t)v67) {
        unint64_t v22 = v67;
      }
      if (v20 < v22) {
        uint64_t v21 = (v21 & ~(v21 >> 63)) + v20 - v22;
      }
      if (v20 <= v22) {
        unint64_t v17 = v22;
      }
      else {
        unint64_t v17 = v20;
      }
      if ((unint64_t)v61 <= (unint64_t)v64) {
        uint64_t v23 = v64;
      }
      else {
        uint64_t v23 = v61;
      }
      unint64_t v24 = v8 - v23;
      if ((v21 & ~(v21 >> 63)) + v17 >= v24) {
        uint64_t v21 = v24 - v17;
      }
      unint64_t v18 = v21 & ~(v21 >> 63);
      if (v8 < v18)
      {
        uint64_t v25 = v10;
        uint64_t v26 = v16;
        unint64_t v27 = objc_msgSend(MEMORY[0x1E4F28B00], "currentHandler", v15);
        __int16 v28 = objc_msgSend(NSString, "stringWithUTF8String:", "_UIBoundingPathBitmapData _UIBoundingPathBitmapDataFromDataWithRectAndRadii(const _UIBoundingPathBitmapData, const _UIIntegralRect, const _UIIntegralCornerRadii)");
        objc_msgSend(v27, "handleFailureInFunction:file:lineNumber:description:", v28, @"_UIBoundingPathBitmapData.m", 485, @"Invalid skip region height %ld which exceeds bitmap height %ld", v18, v8);

        uint64_t v16 = v26;
        uint64_t v10 = v25;
      }
    }
  }
  uint64_t v29 = *(void *)(a1 + 40);
  if (v29) {
    BOOL v30 = 1;
  }
  else {
    BOOL v30 = v8 == v18;
  }
  if (v30) {
    unint64_t v31 = *(void *)(a1 + 40);
  }
  else {
    unint64_t v31 = 1;
  }
  if (v31 <= 2)
  {
    if ((v16 & 0x8000000000000000) == 0 && !*(void *)a3 && !*(void *)(a3 + 8))
    {
LABEL_33:
      if (v10 <= 0 && *(void *)(a3 + 24) == 0 && *(void *)(a3 + 16) == 0) {
        uint64_t v29 = v31;
      }
      else {
        uint64_t v29 = v31 + 1;
      }
      goto LABEL_43;
    }
    if (v31 <= 1)
    {
      ++v31;
      goto LABEL_33;
    }
    uint64_t v29 = 3;
  }
LABEL_43:
  *a4 = v36;
  a4[1] = v8;
  unint64_t v34 = v29 * (v8 - v18);
  a4[2] = v17;
  a4[3] = v18;
  a4[5] = 0;
  a4[6] = 0;
  a4[4] = 0;
  if (v34)
  {
    a4[4] = v34;
    a4[5] = v29;
    long long v35 = *(_OWORD *)(a1 + 16);
    long long v51 = *(_OWORD *)a1;
    long long v52 = v35;
    long long v53 = *(_OWORD *)(a1 + 32);
    uint64_t v54 = *(void *)(a1 + 48);
    long long v47 = v65;
    long long v48 = v66;
    long long v49 = v67;
    long long v50 = v68;
    long long v43 = v61;
    long long v44 = v62;
    long long v45 = v63;
    long long v46 = v64;
    long long v39 = v57;
    long long v40 = v58;
    long long v41 = v59;
    long long v42 = v60;
    long long v37 = v55;
    long long v38 = v56;
    _createRowsNodes(&v51, &v37, -v16 & ~(-v16 >> 63), v10 & ~(v10 >> 63), a4);
  }
  long long v47 = v65;
  long long v48 = v66;
  long long v49 = v67;
  long long v50 = v68;
  long long v43 = v61;
  long long v44 = v62;
  long long v45 = v63;
  long long v46 = v64;
  long long v39 = v57;
  long long v40 = v58;
  long long v41 = v59;
  long long v42 = v60;
  long long v37 = v55;
  long long v38 = v56;
  _UIBoundingPathBitmapDataDestroyRoundRect(&v37);
}

void _createRowsNodes(long long *a1, long long *a2, uint64_t a3, uint64_t a4, void *a5)
{
  double v5 = a5;
  if (!a5)
  {
    long long v44 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v45 = objc_msgSend(NSString, "stringWithUTF8String:", "void _createRowsNodes(const _UIBoundingPathBitmapData, const _UIBoundingPathBitmapDataRoundRect, const size_t, const size_t, _UIBoundingPathBitmapData *)");
    [v44 handleFailureInFunction:v45, @"_UIBoundingPathBitmapData.m", 226, @"Invalid parameter not satisfying: %@", @"outBitmapData != NULL" file lineNumber description];
  }
  uint64_t v10 = *v5;
  uint64_t v9 = v5[1];
  uint64_t v11 = v5[2];
  uint64_t v12 = v5[3];
  size_t v14 = v5[4];
  unint64_t v13 = v5[5];
  double v15 = malloc_type_calloc(v14, 2uLL, 0x1000040BDFB0063uLL);
  uint64_t v54 = v15;
  uint64_t v55 = v12;
  if (!v15)
  {
    [MEMORY[0x1E4F28B00] currentHandler];
    long long v46 = v52 = v9;
    objc_msgSend(NSString, "stringWithUTF8String:", "void _createRowsNodes(const _UIBoundingPathBitmapData, const _UIBoundingPathBitmapDataRoundRect, const size_t, const size_t, _UIBoundingPathBitmapData *)");
    v48 = long long v47 = a1;
    [v46 handleFailureInFunction:v48 file:@"_UIBoundingPathBitmapData.m" lineNumber:235 description:@"Failed to allocate memory to store rows for new bitmap data"];

    a1 = v47;
    uint64_t v12 = v55;

    double v15 = 0;
    uint64_t v9 = v52;
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = ___createRowsNodes_block_invoke;
  aBlock[3] = &__block_descriptor_384_e11_Q24__0Q8Q16l;
  void aBlock[4] = v9;
  aBlock[5] = v11;
  aBlock[6] = v12;
  unint64_t v53 = v13;
  aBlock[7] = v13;
  long long v16 = a2[11];
  long long v94 = a2[10];
  long long v95 = v16;
  long long v17 = a2[13];
  long long v96 = a2[12];
  long long v97 = v17;
  long long v18 = a2[7];
  long long v90 = a2[6];
  long long v91 = v18;
  long long v19 = a2[9];
  long long v92 = a2[8];
  long long v93 = v19;
  long long v20 = a2[3];
  long long v86 = a2[2];
  long long v87 = v20;
  long long v21 = a2[5];
  long long v88 = a2[4];
  long long v89 = v21;
  long long v22 = a2[1];
  long long v84 = *a2;
  long long v85 = v22;
  long long v23 = a1[1];
  long long v98 = *a1;
  long long v99 = v23;
  long long v100 = a1[2];
  uint64_t v101 = *((void *)a1 + 6);
  size_t v102 = v14;
  long long v103 = v15;
  uint64_t v104 = v10;
  uint64_t v105 = a3;
  uint64_t v24 = a4;
  uint64_t v106 = a4;
  uint64_t v25 = _Block_copy(aBlock);
  if (v14 >> 6 <= 0x7C)
  {
    uint64_t v79 = 0;
    int64_t v80 = &v79;
    uint64_t v81 = 0x2020000000;
    uint64_t v82 = 0;
  }
  else
  {
    [MEMORY[0x1E4F28F80] processInfo];
    uint64_t v26 = v51 = v9;
    unint64_t v27 = [v26 activeProcessorCount];

    uint64_t v9 = v51;
    uint64_t v79 = 0;
    int64_t v80 = &v79;
    if (v27 >= v14 / 0xFA0) {
      unint64_t v28 = v14 / 0xFA0;
    }
    else {
      unint64_t v28 = v27;
    }
    uint64_t v81 = 0x2020000000;
    uint64_t v82 = 0;
    if (v28 > 1)
    {
      uint64_t v49 = a3;
      long long v50 = v5;
      *(void *)&long long v57 = 0;
      *((void *)&v57 + 1) = &v57;
      *(void *)&long long v58 = 0x2810000000;
      *((void *)&v58 + 1) = &unk_186D7DBA7;
      LODWORD(v59) = 0;
      uint64_t v29 = dispatch_group_create();
      BOOL v30 = dispatch_get_global_queue(33, 0);
      uint64_t v31 = 0;
      uint64_t v32 = MEMORY[0x1E4F143A8];
      do
      {
        block[0] = v32;
        block[1] = 3221225472;
        block[2] = ___createRowsNodes_block_invoke_2;
        block[3] = &unk_1E52F1CD0;
        id v33 = v25;
        uint64_t v77 = v31;
        unint64_t v78 = v28;
        id v74 = v33;
        int64_t v75 = &v57;
        int64_t v76 = &v79;
        dispatch_group_async(v29, v30, block);

        ++v31;
      }
      while (v28 != v31);
      dispatch_group_wait(v29, 0xFFFFFFFFFFFFFFFFLL);

      _Block_object_dispose(&v57, 8);
      unint64_t v34 = v80[3];
      a3 = v49;
      double v5 = v50;
      uint64_t v24 = a4;
      uint64_t v9 = v51;
      goto LABEL_15;
    }
  }
  unint64_t v34 = (*((uint64_t (**)(void *, void, uint64_t))v25 + 2))(v25, 0, 1);
  v80[3] = v34;
LABEL_15:
  if (v34 <= v53)
  {
    v5[6] = v54;
  }
  else
  {
    free(v54);
    long long v35 = v80;
    void v5[5] = v80[3];
    void v5[4] = v35[3] * (v9 - v55);
    long long v36 = a1[1];
    v71[0] = *a1;
    v71[1] = v36;
    v71[2] = a1[2];
    uint64_t v72 = *((void *)a1 + 6);
    long long v37 = a2[11];
    long long v67 = a2[10];
    long long v68 = v37;
    long long v38 = a2[13];
    long long v69 = a2[12];
    long long v70 = v38;
    long long v39 = a2[7];
    long long v63 = a2[6];
    long long v64 = v39;
    long long v40 = a2[9];
    long long v65 = a2[8];
    long long v66 = v40;
    long long v41 = a2[3];
    long long v59 = a2[2];
    long long v60 = v41;
    long long v42 = a2[5];
    long long v61 = a2[4];
    long long v62 = v42;
    long long v43 = a2[1];
    long long v57 = *a2;
    long long v58 = v43;
    _createRowsNodes(v71, &v57, a3, v24, v5);
  }
  _Block_object_dispose(&v79, 8);
}

void sub_1860F2180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a64, 8);
  _Unwind_Resume(a1);
}

id _UIBoundingPathBitmapDataDescription(void *a1)
{
  uint64_t v2 = [MEMORY[0x1E4F28E78] string];
  objc_msgSend(v2, "appendFormat:", @"<_UIBoundingPathBitmapData width=%ld; height=%lu; skipRegionY=%lu; skipRegionHeight=%lu; nodeCount=%lu; maximumNodesPerRow=%lu>",
    *a1,
    a1[1],
    a1[2],
    a1[3],
    a1[4],
    a1[5]);
  [v2 appendFormat:@" Bitmap data:\n[\n"];
  unint64_t v3 = a1[1];
  if (v3)
  {
    uint64_t v4 = 0;
    for (unint64_t i = 0; i < v3; ++i)
    {
      unint64_t v6 = a1[2];
      if (i < v6 || i >= a1[3] + v6)
      {
        [v2 appendFormat:@"    [ "];
        if (i >= a1[3] + a1[2]) {
          uint64_t v9 = a1[3];
        }
        else {
          uint64_t v9 = 0;
        }
        uint64_t v10 = a1[5];
        if (v10)
        {
          unint64_t v11 = 0;
          unint64_t v12 = v10 * (i - v9);
          do
          {
            if (v12 + v11 >= a1[4])
            {
              long long v17 = [MEMORY[0x1E4F28B00] currentHandler];
              long long v16 = [NSString stringWithUTF8String:"NSString * _Nonnull _UIBoundingPathBitmapDataDescription(const _UIBoundingPathBitmapData)"];
              [v17 handleFailureInFunction:v16, @"_UIBoundingPathBitmapData.m", 535, @"Out of bounds rows memory read: %@", v2 file lineNumber description];
            }
            unsigned int v13 = *(unsigned __int16 *)(a1[6] + 2 * v12 + 2 * v11);
            if ((v13 & 0x7FFF) != 0) {
              [v2 appendFormat:@"{ %u, %u}", v13 >> 15, v13 & 0x7FFF];
            }
            else {
              [v2 appendString:@"NULL"];
            }
            unint64_t v14 = a1[5];
            if (v11 < v14 - 1)
            {
              [v2 appendFormat:@", "];
              unint64_t v14 = a1[5];
            }
            ++v11;
          }
          while (v11 < v14);
        }
        [v2 appendFormat:@" ]"];
        if (i < a1[1] - 1) {
          [v2 appendFormat:@","];
        }
        unint64_t v8 = @"\n";
        uint64_t v7 = v4;
      }
      else
      {
        uint64_t v7 = 1;
        unint64_t v8 = @"    <<< SKIP REGION >>>\n";
        if (v4) {
          goto LABEL_24;
        }
      }
      [v2 appendFormat:v8];
      unint64_t v3 = a1[1];
LABEL_24:
      uint64_t v4 = v7;
    }
  }
  [v2 appendFormat:@"]"];
  return v2;
}

id _UIBoundingPathBitmapDataImageRepresentation(unint64_t *a1)
{
  double v2 = (double)*a1;
  double v3 = (double)a1[1];
  uint64_t v4 = objc_alloc_init(UIGraphicsImageRendererFormat);
  [(UIGraphicsImageRendererFormat *)v4 setScale:1.0];
  [(UIGraphicsImageRendererFormat *)v4 setOpaque:1];
  [(UIGraphicsImageRendererFormat *)v4 setPreferredRange:2];
  double v5 = -[UIGraphicsImageRenderer initWithSize:format:]([UIGraphicsImageRenderer alloc], "initWithSize:format:", v4, v2, v3);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = ___UIBoundingPathBitmapDataImageRepresentation_block_invoke;
  _OWORD v9[3] = &__block_descriptor_88_e40_v16__0__UIGraphicsImageRendererContext_8l;
  long long v6 = *((_OWORD *)a1 + 1);
  long long v10 = *(_OWORD *)a1;
  long long v11 = v6;
  long long v12 = *((_OWORD *)a1 + 2);
  unint64_t v13 = a1[6];
  uint64_t v7 = [(UIGraphicsImageRenderer *)v5 imageWithActions:v9];

  return v7;
}

unint64_t ___createRowsNodes_block_invoke(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 32) > a2)
  {
    uint64_t v3 = a3;
    unint64_t v4 = a2;
    unint64_t result = 0;
    uint64_t v90 = a2 - a3;
    long long v98 = (long long *)(a1 + 64);
    while (1)
    {
      unint64_t v8 = *(void *)(a1 + 40);
      uint64_t v7 = *(void *)(a1 + 48);
      unint64_t v9 = v7 + v8;
      if (v4 >= v8 && v4 < v9)
      {
        unint64_t v4 = v90 + v8 + v7;
        goto LABEL_80;
      }
      if (v4 < v9) {
        uint64_t v7 = 0;
      }
      unint64_t v11 = *(void *)(a1 + 56);
      uint64_t v99 = v11 * (v4 - v7);
      unint64_t v12 = *(void *)(a1 + 72) + v4;
      if ((v12 & 0x8000000000000000) != 0 || v12 >= *(void *)(a1 + 296))
      {
        unint64_t result = _insertRowsNodeIfPossible(result, v11, *(void *)(a1 + 344), *(void *)(a1 + 352), v99, 0, 0, *(void *)(a1 + 360));
        goto LABEL_80;
      }
      unint64_t v13 = result;
      uint64_t v14 = v12 >= *(void *)(a1 + 312) + *(void *)(a1 + 304) ? *(void *)(a1 + 312) : 0;
      long long v15 = *(_OWORD *)(a1 + 240);
      long long v110 = *(_OWORD *)(a1 + 224);
      long long v111 = v15;
      long long v16 = *(_OWORD *)(a1 + 272);
      long long v112 = *(_OWORD *)(a1 + 256);
      long long v113 = v16;
      long long v17 = *(_OWORD *)(a1 + 176);
      long long v106 = *(_OWORD *)(a1 + 160);
      long long v107 = v17;
      long long v18 = *(_OWORD *)(a1 + 208);
      long long v108 = *(_OWORD *)(a1 + 192);
      long long v109 = v18;
      long long v19 = *(_OWORD *)(a1 + 112);
      long long v102 = *(_OWORD *)(a1 + 96);
      long long v103 = v19;
      long long v20 = *(_OWORD *)(a1 + 144);
      long long v104 = *(_OWORD *)(a1 + 128);
      long long v105 = v20;
      long long v21 = *(_OWORD *)(a1 + 80);
      long long v100 = *v98;
      long long v101 = v21;
      int64_t MinXForY = _UIBoundingPathBitmapDataRoundRectGetMinXForY((uint64_t)&v100, v12);
      long long v22 = *(_OWORD *)(a1 + 240);
      long long v110 = *(_OWORD *)(a1 + 224);
      long long v111 = v22;
      long long v23 = *(_OWORD *)(a1 + 272);
      long long v112 = *(_OWORD *)(a1 + 256);
      long long v113 = v23;
      long long v24 = *(_OWORD *)(a1 + 176);
      long long v106 = *(_OWORD *)(a1 + 160);
      long long v107 = v24;
      long long v25 = *(_OWORD *)(a1 + 208);
      long long v108 = *(_OWORD *)(a1 + 192);
      long long v109 = v25;
      long long v26 = *(_OWORD *)(a1 + 112);
      long long v102 = *(_OWORD *)(a1 + 96);
      long long v103 = v26;
      long long v27 = *(_OWORD *)(a1 + 144);
      long long v104 = *(_OWORD *)(a1 + 128);
      long long v105 = v27;
      long long v28 = *(_OWORD *)(a1 + 80);
      long long v100 = *v98;
      long long v101 = v28;
      int64_t MaxXForY = _UIBoundingPathBitmapDataRoundRectGetMaxXForY((uint64_t)&v100, v12);
      unint64_t v30 = *(void *)(a1 + 304);
      BOOL v31 = v12 >= v30 && v12 < *(void *)(a1 + 312) + v30;
      unint64_t result = v13;
      if (*(void *)(a1 + 360)) {
        break;
      }
LABEL_80:
      v4 += v3;
      if (v4 >= *(void *)(a1 + 32)) {
        return result;
      }
    }
    unint64_t v89 = v4;
    unint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    unint64_t v35 = 0;
    uint64_t v36 = *(void *)(a1 + 64);
    int64_t v96 = MaxXForY;
    unint64_t v97 = MinXForY - v36;
    unint64_t v92 = v36 - MaxXForY + *(void *)(a1 + 80);
    unint64_t v37 = *(void *)(a1 + 328) * (v12 - v14);
    uint64_t v38 = 2 * v37;
    BOOL v95 = v31;
    uint64_t v93 = 2 * v37;
    unint64_t v94 = v37;
    while (1)
    {
      int64_t v39 = *(void *)v98 + v32;
      if (v39 > MaxXForY)
      {
        BOOL v40 = 1;
        unint64_t v41 = v92;
        goto LABEL_34;
      }
      if (v31)
      {
        if (!v35)
        {
          unint64_t v41 = *(void *)(a1 + 288);
          BOOL v40 = v41 + v34 > v39;
          goto LABEL_34;
        }
      }
      else if (v35 < *(void *)(a1 + 328))
      {
        while (1)
        {
          if (v37 + v35 >= *(void *)(a1 + 320))
          {
            unint64_t v43 = result;
            unint64_t v44 = v32;
            uint64_t v45 = v33;
            int64_t v46 = v39;
            long long v47 = [MEMORY[0x1E4F28B00] currentHandler];
            long long v48 = objc_msgSend(NSString, "stringWithUTF8String:", "void _createRowsNodes(const _UIBoundingPathBitmapData, const _UIBoundingPathBitmapDataRoundRect, const size_t, const size_t, _UIBoundingPathBitmapData *)_block_invoke");
            [v47 handleFailureInFunction:v48 file:@"_UIBoundingPathBitmapData.m" lineNumber:312 description:@"Out of bounds source rows memory read."];

            int64_t v39 = v46;
            uint64_t v38 = v93;
            unint64_t v37 = v94;
            uint64_t v33 = v45;
            unint64_t v32 = v44;
            BOOL v31 = v95;
            int64_t MaxXForY = v96;
            unint64_t result = v43;
          }
          unint64_t v41 = *(_WORD *)(*(void *)(a1 + 336) + v38 + 2 * v35) & 0x7FFF;
          if ((*(_WORD *)(*(void *)(a1 + 336) + v38 + 2 * v35) & 0x7FFF) == 0) {
            break;
          }
          uint64_t v42 = v34 + v41;
          if (v34 + v41 > v39)
          {
            BOOL v40 = 1;
            goto LABEL_34;
          }
          ++v35;
          v34 += v41;
          if (v35 >= *(void *)(a1 + 328))
          {
            BOOL v40 = 0;
            uint64_t v34 = v42;
            goto LABEL_34;
          }
        }
      }
      BOOL v40 = 0;
      unint64_t v41 = 0;
LABEL_34:
      if (*(void *)(a1 + 368) <= v97) {
        unint64_t v49 = v97;
      }
      else {
        unint64_t v49 = *(void *)(a1 + 368);
      }
      if (v49) {
        BOOL v50 = v33 == 0;
      }
      else {
        BOOL v50 = 0;
      }
      int v51 = v50;
      if (!v40 && (v51 & 1) == 0)
      {
        if (*(void *)(a1 + 376) <= v92) {
          unint64_t v77 = v92;
        }
        else {
          unint64_t v77 = *(void *)(a1 + 376);
        }
        if (v77) {
          unint64_t result = _insertRowsNodeIfPossible(result, *(void *)(a1 + 56), *(void *)(a1 + 344), *(void *)(a1 + 352), v99, v33, 0, v77);
        }
LABEL_79:
        uint64_t v3 = a3;
        unint64_t v4 = v89;
        goto LABEL_80;
      }
      int v52 = v39 > MaxXForY || !v40;
      if ((v52 | v31))
      {
        int v53 = v52 ^ 1;
      }
      else
      {
        unint64_t v54 = v35 + v37;
        if (v35 + v37 >= *(void *)(a1 + 320))
        {
          unint64_t v84 = v32;
          unint64_t v87 = result;
          int64_t v79 = v39;
          uint64_t v81 = v33;
          unint64_t v78 = [MEMORY[0x1E4F28B00] currentHandler];
          int64_t v76 = objc_msgSend(NSString, "stringWithUTF8String:", "void _createRowsNodes(const _UIBoundingPathBitmapData, const _UIBoundingPathBitmapDataRoundRect, const size_t, const size_t, _UIBoundingPathBitmapData *)_block_invoke");
          objc_msgSend(v78, "handleFailureInFunction:file:lineNumber:description:");

          int64_t v39 = v79;
          uint64_t v33 = v81;
          uint64_t v38 = v93;
          unint64_t v37 = v94;
          unint64_t v32 = v84;
          unint64_t result = v87;
          BOOL v31 = v95;
          int64_t MaxXForY = v96;
        }
        int v53 = *(__int16 *)(*(void *)(a1 + 336) + 2 * v54) < 0;
      }
      uint64_t v55 = v34;
      unint64_t v56 = v41;
      if (!v51) {
        goto LABEL_59;
      }
      if ((!v40 | v53) != 1)
      {
        int64_t v59 = MinXForY - (v41 + v34);
        if (MinXForY <= (uint64_t)(v41 + v34)) {
          int64_t v59 = 0;
        }
        uint64_t v60 = *(void *)(a1 + 368);
        uint64_t v55 = v34 - v60;
        unint64_t v56 = v59 + v41 + v60;
LABEL_59:
        if (!v40)
        {
          unint64_t v82 = v32;
          unint64_t v85 = result;
          uint64_t v80 = v33;
          int64_t v67 = v39;
          int v68 = v53;
          long long v69 = [MEMORY[0x1E4F28B00] currentHandler];
          long long v70 = objc_msgSend(NSString, "stringWithUTF8String:", "void _createRowsNodes(const _UIBoundingPathBitmapData, const _UIBoundingPathBitmapDataRoundRect, const size_t, const size_t, _UIBoundingPathBitmapData *)_block_invoke");
          [v69 handleFailureInFunction:v70 file:@"_UIBoundingPathBitmapData.m" lineNumber:386 description:@"Should always have found a source node to copy data from at this point."];

          int v53 = v68;
          int64_t v39 = v67;
          uint64_t v38 = v93;
          unint64_t v37 = v94;
          uint64_t v33 = v80;
          unint64_t v32 = v82;
          BOOL v31 = v95;
          int64_t MaxXForY = v96;
          unint64_t result = v85;
        }
        int64_t v61 = MaxXForY;
        if ((v53 & 1) == 0) {
          int64_t v61 = *(void *)(a1 + 80) + *(void *)(a1 + 64);
        }
        if ((uint64_t)(v56 + v55) >= v61) {
          int64_t v62 = v61;
        }
        else {
          int64_t v62 = v56 + v55;
        }
        if (v62 < v39)
        {
          unint64_t v83 = v32;
          unint64_t v86 = result;
          uint64_t v71 = v33;
          int64_t v72 = v39;
          int v73 = v53;
          id v74 = [MEMORY[0x1E4F28B00] currentHandler];
          int64_t v75 = objc_msgSend(NSString, "stringWithUTF8String:", "void _createRowsNodes(const _UIBoundingPathBitmapData, const _UIBoundingPathBitmapDataRoundRect, const size_t, const size_t, _UIBoundingPathBitmapData *)_block_invoke");
          [v74 handleFailureInFunction:v75 file:@"_UIBoundingPathBitmapData.m" lineNumber:396 description:@"Source node contains fewer columns than required."];

          int v53 = v73;
          int64_t v39 = v72;
          uint64_t v38 = v93;
          unint64_t v37 = v94;
          uint64_t v33 = v71;
          unint64_t v32 = v83;
          unint64_t result = v86;
          BOOL v31 = v95;
          int64_t MaxXForY = v96;
        }
        int64_t v63 = v62 - v39;
        if (v62 != v39)
        {
          uint64_t v64 = v33;
          unint64_t v65 = v62 - v39;
          unint64_t v66 = v32;
          unint64_t result = _insertRowsNodeIfPossible(result, *(void *)(a1 + 56), *(void *)(a1 + 344), *(void *)(a1 + 352), v99, v33, v53, v65);
          uint64_t v38 = v93;
          unint64_t v37 = v94;
          BOOL v31 = v95;
          int64_t MaxXForY = v96;
          uint64_t v33 = v64 + 1;
          unint64_t v32 = v63 + v66;
        }
        ++v35;
        v34 += v41;
        goto LABEL_71;
      }
      unint64_t v57 = v32;
      unint64_t result = _insertRowsNodeIfPossible(result, *(void *)(a1 + 56), *(void *)(a1 + 344), *(void *)(a1 + 352), v99, 0, 0, v49);
      uint64_t v38 = v93;
      unint64_t v37 = v94;
      unint64_t v58 = v57;
      BOOL v31 = v95;
      int64_t MaxXForY = v96;
      unint64_t v35 = 0;
      uint64_t v34 = 0;
      unint64_t v32 = v49 + v58;
      uint64_t v33 = 1;
LABEL_71:
      if (v32 >= *(void *)(a1 + 360)) {
        goto LABEL_79;
      }
    }
  }
  return 0;
}

unint64_t _insertRowsNodeIfPossible(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, unint64_t a8)
{
  if (a6 + 1 > a1) {
    unint64_t v8 = a6 + 1;
  }
  else {
    unint64_t v8 = a1;
  }
  if (v8 <= a2)
  {
    uint64_t v12 = a6 + a5;
    if (a6 + a5 >= a3)
    {
      long long v15 = [MEMORY[0x1E4F28B00] currentHandler];
      long long v16 = objc_msgSend(NSString, "stringWithUTF8String:", "size_t _insertRowsNodeIfPossible(size_t, size_t, size_t, _UIBoundingPathBitmapDataNode *, size_t, size_t, BOOL, size_t)");
      [v15 handleFailureInFunction:v16 file:@"_UIBoundingPathBitmapData.m" lineNumber:199 description:@"Out of bounds rows memory read."];
    }
    if (a8 >= 0x8000)
    {
      long long v17 = [MEMORY[0x1E4F28B00] currentHandler];
      long long v18 = objc_msgSend(NSString, "stringWithUTF8String:", "_UIBoundingPathBitmapDataNode _UIBoundingPathBitmapDataNodeMake(BOOL, size_t)");
      objc_msgSend(v17, "handleFailureInFunction:file:lineNumber:description:", v18, @"_UIBoundingPathBitmapData.h", 105, @"columns value %lu is too large to be stored in available space", a8);
    }
    __int16 v13 = a8 | 0x8000;
    if (!a7) {
      __int16 v13 = a8;
    }
    *(_WORD *)(a4 + 2 * v12) = v13;
  }
  return v8;
}

void ___createRowsNodes_block_invoke_2(void *a1)
{
  unint64_t v2 = (*(uint64_t (**)(void))(a1[4] + 16))();
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1[5] + 8) + 32));
  uint64_t v3 = *(void *)(a1[6] + 8);
  unint64_t v4 = *(void *)(v3 + 24);
  if (v4 <= v2) {
    unint64_t v4 = v2;
  }
  *(void *)(v3 + 24) = v4;
  double v5 = (os_unfair_lock_s *)(*(void *)(a1[5] + 8) + 32);
  os_unfair_lock_unlock(v5);
}

void _UIBoundingPathBitmapDataDestroyCorner(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 40);
  if (v2 && *(void **)(a1 + 32) != v2) {
    free(v2);
  }
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3)
  {
    free(v3);
  }
}

void _UIBoundingPathBitmapDataCreateReferenceCornerWithRadius(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = (double)a1;
  size_t v4 = vcvtpd_s64_f64((double)a1 * 1.528665);
  if (v4 >= 0x10000)
  {
    long long v17 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v18 = [NSString stringWithUTF8String:"_UIBoundingPathBitmapDataCorner _UIBoundingPathBitmapDataCreateReferenceCornerWithRadius(const NSInteger)"];
    [v17 handleFailureInFunction:v18 file:@"_UIBoundingPathBitmapDataCorner.m" lineNumber:123 description:@"Corner edge positions will be too large to be stored in available space"];
  }
  double v5 = +[UIBezierPath _continuousRoundedRectBezierPath:withRoundedCorners:cornerRadius:segments:](UIBezierPath, "_continuousRoundedRectBezierPath:withRoundedCorners:cornerRadius:segments:", 1, 16, 0.0, 0.0, (double)v4, (double)v4, v3, v3);
  long long v6 = (char *)malloc_type_calloc(v4 * v4, 1uLL, 0x100004077774924uLL);
  if (!v6)
  {
    long long v19 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v20 = [NSString stringWithUTF8String:"_UIBoundingPathBitmapDataCorner _UIBoundingPathBitmapDataCreateReferenceCornerWithRadius(const NSInteger)"];
    [v19 handleFailureInFunction:v20 file:@"_UIBoundingPathBitmapDataCorner.m" lineNumber:136 description:@"Failed to allocate memory for rendering the bitmap data corner."];

    long long v6 = 0;
  }
  long long v27 = v6;
  uint64_t v7 = CGBitmapContextCreate(v6, v4, v4, 8uLL, v4, 0, 7u);
  CGContextTranslateCTM(v7, 0.0, (double)v4);
  CGContextScaleCTM(v7, 1.0, -1.0);
  v29.origin.CGFloat x = 0.0;
  v29.origin.CGFloat y = 0.0;
  v29.size.CGFloat width = (double)v4;
  v29.size.CGFloat height = (double)v4;
  CGContextClearRect(v7, v29);
  id v25 = v5;
  CGContextAddPath(v7, (CGPathRef)[v25 CGPath]);
  CGContextFillPath(v7);
  CGContextRelease(v7);
  unint64_t v8 = malloc_type_malloc(v4 << (v4 > 0xFF), 0xAC21EB7BuLL);
  if (!v8)
  {
    long long v21 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v22 = [NSString stringWithUTF8String:"_UIBoundingPathBitmapDataCorner _UIBoundingPathBitmapDataCreateReferenceCornerWithRadius(const NSInteger)"];
    [v21 handleFailureInFunction:v22 file:@"_UIBoundingPathBitmapDataCorner.m" lineNumber:154 description:@"Failed to allocate memory for storing the corner edge positions."];
  }
  size_t v9 = v4 - 1;
  long long v10 = v27;
  if ((uint64_t)(v4 - 1) >= 0)
  {
    size_t v11 = 0;
    size_t v12 = v4 * v9;
    __int16 v13 = &v27[v4 * v9];
    unint64_t v14 = 0x1E4F28000uLL;
    int64_t v15 = v4 - 1;
    do
    {
      if (v11 < v9)
      {
        while (1)
        {
          if (v12 + v11 >= v4 * v4)
          {
            long long v24 = [*(id *)(v14 + 2816) currentHandler];
            long long v23 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL _referenceCornerByteDataContainsCornerPoint(UInt8 *const, const size_t, const size_t, const _UIIntegralPoint)");
            [v24 handleFailureInFunction:v23 file:@"_UIBoundingPathBitmapDataCorner.m" lineNumber:113 description:@"Attempt to access out of bounds index in corner byte data"];

            unint64_t v14 = 0x1E4F28000;
            long long v10 = v27;
          }
          if (v13[v11] > 0x7Eu) {
            break;
          }
          if (v9 == ++v11)
          {
            size_t v11 = v4 - 1;
            break;
          }
        }
      }
      if (v4 < 0x100) {
        v8[v15] = v11;
      }
      else {
        *(_WORD *)&v8[2 * v15] = v11;
      }
      v13 -= v4;
      v12 -= v4;
    }
    while (v15-- > 0);
  }
  free(v10);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = a1;
  *(void *)(a2 + 16) = v4;
  *(unsigned char *)(a2 + 24) = v4 > 0xFF;
  *(void *)(a2 + 32) = v8;
  *(void *)(a2 + 40) = v8;
}

__n128 _UIBoundingPathBitmapDataCreateRoundRectWithCornerRadii@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  long long v37 = 0u;
  long long v38 = 0u;
  long long v36 = 0u;
  _createCornerWithRadius((uint64_t)&v36, 0, *a2);
  long long v34 = 0u;
  long long v35 = 0u;
  long long v33 = 0u;
  _createCornerWithRadius((uint64_t)&v33, 1, a2[1]);
  long long v31 = 0u;
  long long v32 = 0u;
  long long v30 = 0u;
  _createCornerWithRadius((uint64_t)&v30, 2, a2[2]);
  long long v28 = 0u;
  __n128 v29 = 0u;
  long long v27 = 0u;
  _createCornerWithRadius((uint64_t)&v27, 3, a2[3]);
  unint64_t v6 = v37;
  unint64_t v7 = v34;
  if ((unint64_t)v37 <= (unint64_t)v34) {
    uint64_t v8 = v34;
  }
  else {
    uint64_t v8 = v37;
  }
  unint64_t v9 = v28;
  unint64_t v10 = v31;
  if ((unint64_t)v28 <= (unint64_t)v31) {
    uint64_t v11 = v31;
  }
  else {
    uint64_t v11 = v28;
  }
  uint64_t v12 = v11 + v8;
  if (*(void *)(a1 + 16) < v11 + v8)
  {
    long long v23 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v24 = objc_msgSend(NSString, "stringWithUTF8String:", "_UIBoundingPathBitmapDataRoundRect _UIBoundingPathBitmapDataCreateRoundRectWithCornerRadii(const _UIIntegralRect, const _UIIntegralCornerRadii)");
    objc_msgSend(v23, "handleFailureInFunction:file:lineNumber:description:", v24, @"_UIBoundingPathBitmapDataCorner.m", 216, @"Rect width (%ld) is too narrow to fit corners (required width: %ld).", *(void *)(a1 + 16), v12);

    unint64_t v6 = v37;
    unint64_t v9 = v28;
    unint64_t v7 = v34;
    unint64_t v10 = v31;
  }
  if (v6 <= v9) {
    unint64_t v6 = v9;
  }
  if (v7 <= v10) {
    unint64_t v7 = v10;
  }
  uint64_t v13 = v6 + v7;
  if (*(void *)(a1 + 24) < (int64_t)(v6 + v7))
  {
    id v25 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v26 = objc_msgSend(NSString, "stringWithUTF8String:", "_UIBoundingPathBitmapDataRoundRect _UIBoundingPathBitmapDataCreateRoundRectWithCornerRadii(const _UIIntegralRect, const _UIIntegralCornerRadii)");
    objc_msgSend(v25, "handleFailureInFunction:file:lineNumber:description:", v26, @"_UIBoundingPathBitmapDataCorner.m", 218, @"Rect height (%ld) is too short to fit corners (required height: %ld).", *(void *)(a1 + 24), v13);
  }
  long long v14 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_OWORD *)(a3 + 16) = v14;
  long long v15 = v37;
  *(_OWORD *)(a3 + 32) = v36;
  *(_OWORD *)(a3 + 48) = v15;
  long long v16 = v33;
  long long v17 = v34;
  *(_OWORD *)(a3 + 64) = v38;
  *(_OWORD *)(a3 + 80) = v16;
  long long v18 = v35;
  *(_OWORD *)(a3 + 96) = v17;
  *(_OWORD *)(a3 + 112) = v18;
  long long v19 = v31;
  long long v20 = v32;
  *(_OWORD *)(a3 + 128) = v30;
  *(_OWORD *)(a3 + 144) = v19;
  __n128 result = v29;
  long long v22 = v27;
  *(_OWORD *)(a3 + 192) = v28;
  *(__n128 *)(a3 + 208) = result;
  *(_OWORD *)(a3 + 160) = v20;
  *(_OWORD *)(a3 + 176) = v22;
  return result;
}

void _createCornerWithRadius(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 < 0)
  {
    unint64_t v7 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v8 = objc_msgSend(NSString, "stringWithUTF8String:", "_UIBoundingPathBitmapDataCorner _createCornerWithRadius(const _UIBoundingPathBitmapDataCornerLocation, const NSInteger)");
    [v7 handleFailureInFunction:v8, @"_UIBoundingPathBitmapDataCorner.m", 198, @"Invalid parameter not satisfying: %@", @"radius >= 0" file lineNumber description];
  }
  else if (!a3)
  {
    *(void *)(a1 + 40) = 0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2;
    return;
  }
  unint64_t v6 = +[_UICachedBoundingPathBitmapDataReferenceCorner cachedReferenceCornerForRadius:a3];
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  if (v6)
  {
    unint64_t v9 = v6;
    [v6 referenceCornerCopy];
    unint64_t v6 = v9;
  }
  else
  {
    *(void *)(a1 + 40) = 0;
    *(_OWORD *)(a1 + 24) = 0uLL;
    *(_OWORD *)(a1 + 8) = 0uLL;
  }
  *(void *)a1 = a2;
}

void _UIBoundingPathBitmapDataDestroyRoundRect(_OWORD *a1)
{
  long long v2 = a1[3];
  long long v6 = a1[2];
  long long v7 = v2;
  long long v8 = a1[4];
  _UIBoundingPathBitmapDataDestroyCorner((uint64_t)&v6);
  long long v3 = a1[6];
  long long v6 = a1[5];
  long long v7 = v3;
  long long v8 = a1[7];
  _UIBoundingPathBitmapDataDestroyCorner((uint64_t)&v6);
  long long v4 = a1[9];
  long long v6 = a1[8];
  long long v7 = v4;
  long long v8 = a1[10];
  _UIBoundingPathBitmapDataDestroyCorner((uint64_t)&v6);
  long long v5 = a1[12];
  long long v6 = a1[11];
  long long v7 = v5;
  long long v8 = a1[13];
  _UIBoundingPathBitmapDataDestroyCorner((uint64_t)&v6);
}

unint64_t _UIBoundingPathBitmapDataRoundRectGetMinXForY(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 - *(void *)(a1 + 8);
  if (v4 < 0 || v4 >= *(void *)(a1 + 24))
  {
    uint64_t v11 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v12 = objc_msgSend(NSString, "stringWithUTF8String:", "NSInteger _UIBoundingPathBitmapDataRoundRectGetMinXForY(const _UIBoundingPathBitmapDataRoundRect, const NSInteger)");
    [v11 handleFailureInFunction:v12, @"_UIBoundingPathBitmapDataCorner.m", 257, @"Attempted to get MinX of rect {x=%ld, y=%ld, width=%ld, height=%ld} for out of bounds y value %ld", *(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), a2 file lineNumber description];
  }
  if ((unint64_t)v4 < *(void *)(a1 + 48))
  {
    long long v5 = *(_OWORD *)(a1 + 48);
    long long v13 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)long long v14 = v5;
    *(_OWORD *)&v14[16] = *(_OWORD *)(a1 + 64);
    unint64_t v6 = v4;
LABEL_8:
    unint64_t v9 = _cornerCurveDistanceFromLeftEdgeAtRow((uint64_t *)&v13, v6);
    return *(void *)a1 + v9;
  }
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 96);
  if (v4 >= (unint64_t)(v7 - v8))
  {
    long long v13 = *(_OWORD *)(a1 + 80);
    *(_OWORD *)&v14[8] = *(_OWORD *)(a1 + 104);
    *(void *)&v14[24] = *(void *)(a1 + 120);
    unint64_t v6 = v4 - v7 + v8;
    *(void *)long long v14 = v8;
    goto LABEL_8;
  }
  unint64_t v9 = 0;
  return *(void *)a1 + v9;
}

unint64_t _cornerCurveDistanceFromLeftEdgeAtRow(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v4 = *a1;
  unint64_t v5 = a1[2];
  if (v5 <= a2)
  {
    long long v17 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v18 = objc_msgSend(NSString, "stringWithUTF8String:", "_UIIntegralPoint _UIBoundingPathBitmapDataReferenceCornerPointForPointInCorner(const _UIIntegralPoint, const _UIBoundingPathBitmapDataCornerLocation, const size_t)");
    [v17 handleFailureInFunction:v18, @"_UIBoundingPathBitmapDataCorner.m", 27, @"Invalid parameter not satisfying: %@", @"cornerPoint.x < cornerSize && cornerPoint.y < cornerSize" file lineNumber description];
  }
  unint64_t v6 = v5 - 1 - v2;
  unint64_t v7 = v5 + ~v2;
  if (v4 == 1) {
    unint64_t v8 = 0;
  }
  else {
    unint64_t v8 = v2;
  }
  if (v4 != 1) {
    unint64_t v7 = 0;
  }
  if (v4 == 2) {
    unint64_t v7 = v5 - 1;
  }
  else {
    unint64_t v6 = v8;
  }
  BOOL v9 = v4 == 3;
  if (v4 == 3) {
    unint64_t v10 = v5 - 1;
  }
  else {
    unint64_t v10 = v6;
  }
  if (!v9) {
    unint64_t v2 = v7;
  }
  if ((*a1 | 2) != 3)
  {
    int v13 = *((unsigned __int8 *)a1 + 24);
    uint64_t v14 = a1[4];
    if ((v10 & 0x8000000000000000) != 0 || a1[2] <= v10)
    {
      long long v19 = [MEMORY[0x1E4F28B00] currentHandler];
      long long v20 = objc_msgSend(NSString, "stringWithUTF8String:", "NSInteger _UIBoundingPathBitmapDataCornerGetReferenceEdgePositionForRow(_UIBoundingPathBitmapDataCorner, NSInteger)");
      objc_msgSend(v19, "handleFailureInFunction:file:lineNumber:description:", v20, @"_UIBoundingPathBitmapDataCorner.h", 56, @"Attempt to get edge position for out of bounds row %ld", v10);

      if (v13) {
        goto LABEL_24;
      }
    }
    else if (*((unsigned char *)a1 + 24))
    {
LABEL_24:
      unint64_t v2 = *(unsigned __int16 *)(v14 + 2 * v10);
      goto LABEL_29;
    }
    unint64_t v2 = *(unsigned __int8 *)(v14 + v10);
    goto LABEL_29;
  }
  int v11 = *((unsigned __int8 *)a1 + 24);
  uint64_t v12 = a1[5];
  if ((v2 & 0x8000000000000000) != 0 || a1[2] <= v2)
  {
    long long v15 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v16 = objc_msgSend(NSString, "stringWithUTF8String:", "NSInteger _UIBoundingPathBitmapDataCornerGetReferenceEdgePositionForCol(_UIBoundingPathBitmapDataCorner, NSInteger)");
    objc_msgSend(v15, "handleFailureInFunction:file:lineNumber:description:", v16, @"_UIBoundingPathBitmapDataCorner.h", 66, @"Attempt to get edge position for out of bounds col %ld", v2);

    if (v11) {
      goto LABEL_20;
    }
LABEL_26:
    unint64_t v10 = *(unsigned __int8 *)(v12 + v2);
    goto LABEL_29;
  }
  if (!*((unsigned char *)a1 + 24)) {
    goto LABEL_26;
  }
LABEL_20:
  unint64_t v10 = *(unsigned __int16 *)(v12 + 2 * v2);
LABEL_29:
  uint64_t v21 = *a1;
  unint64_t v22 = a1[2];
  if (v2 >= v22 || v10 >= v22)
  {
    long long v27 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v28 = objc_msgSend(NSString, "stringWithUTF8String:", "_UIIntegralPoint _UIBoundingPathBitmapDataCornerPointForPointInReferenceCorner(const _UIIntegralPoint, const _UIBoundingPathBitmapDataCornerLocation, const size_t)");
    [v27 handleFailureInFunction:v28, @"_UIBoundingPathBitmapDataCorner.m", 53, @"Invalid parameter not satisfying: %@", @"referencePoint.x < cornerSize && referencePoint.y < cornerSize" file lineNumber description];
  }
  switch(v21)
  {
    case 3:
      uint64_t v23 = ~v10;
LABEL_37:
      unint64_t v2 = v22 + v23;
      break;
    case 2:
      uint64_t v23 = ~v2;
      goto LABEL_37;
    case 1:
      unint64_t v2 = v10;
      break;
  }
  if ((v2 & 0x8000000000000000) != 0 || v2 >= a1[2])
  {
    id v25 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v26 = objc_msgSend(NSString, "stringWithUTF8String:", "NSInteger _cornerCurveDistanceFromLeftEdgeAtRow(const _UIBoundingPathBitmapDataCorner, const NSInteger)");
    objc_msgSend(v25, "handleFailureInFunction:file:lineNumber:description:", v26, @"_UIBoundingPathBitmapDataCorner.m", 250, @"The corner curve distance from the left edge (%ld) must be at least zero and less than the corner size (%ld).", v2, a1[2]);
  }
  return v2;
}

unint64_t _UIBoundingPathBitmapDataRoundRectGetMaxXForY(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 - *(void *)(a1 + 8);
  if (v4 < 0 || v4 >= *(void *)(a1 + 24))
  {
    unint64_t v10 = [MEMORY[0x1E4F28B00] currentHandler];
    int v11 = objc_msgSend(NSString, "stringWithUTF8String:", "NSInteger _UIBoundingPathBitmapDataRoundRectGetMaxXForY(const _UIBoundingPathBitmapDataRoundRect, const NSInteger)");
    [v10 handleFailureInFunction:v11, @"_UIBoundingPathBitmapDataCorner.m", 283, @"Attempted to get MaxX of rect {x=%ld, y=%ld, width=%ld, height=%ld} for out of bounds y value %ld", *(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), a2 file lineNumber description];
  }
  unint64_t v5 = *(void *)(a1 + 192);
  if (v4 < v5)
  {
    long long v12 = *(_OWORD *)(a1 + 176);
    long long v14 = *(_OWORD *)(a1 + 200);
    uint64_t v15 = *(void *)(a1 + 216);
    unint64_t v13 = v5;
    unint64_t v6 = v4;
LABEL_8:
    unint64_t v8 = _cornerCurveDistanceFromLeftEdgeAtRow((uint64_t *)&v12, v6) - v5 + 1;
    return *(void *)a1 + v8 + *(void *)(a1 + 16);
  }
  uint64_t v7 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 144);
  if (v4 >= v7 - v5)
  {
    long long v12 = *(_OWORD *)(a1 + 128);
    long long v14 = *(_OWORD *)(a1 + 152);
    uint64_t v15 = *(void *)(a1 + 168);
    unint64_t v6 = v4 - v7 + v5;
    unint64_t v13 = v5;
    goto LABEL_8;
  }
  unint64_t v8 = 0;
  return *(void *)a1 + v8 + *(void *)(a1 + 16);
}

void *_allocateHostReferenceEdgePositionsFromDecodedStandardizedEndiannessByteArray(const void *a1, uint64_t a2, char a3)
{
  size_t v4 = a2 << a3;
  unint64_t v5 = malloc_type_malloc(a2 << a3, 0x1FC9CF3EuLL);
  if (!v5)
  {
    uint64_t v7 = [MEMORY[0x1E4F28B00] currentHandler];
    unint64_t v8 = objc_msgSend(NSString, "stringWithUTF8String:", "void *_allocateHostReferenceEdgePositionsFromDecodedStandardizedEndiannessByteArray(const uint8_t *, const size_t, const BOOL)");
    [v7 handleFailureInFunction:v8 file:@"_UIBoundingPathBitmapDataCornerCache.m" lineNumber:66 description:@"Failed to allocate memory for storing the bitmap data corner edge positions."];
  }
  return memcpy(v5, a1, v4);
}

void *_allocateStandardizedEndiannessByteArrayForEncodingHostReferenceEdgePositions(const void *a1, uint64_t a2, char a3)
{
  size_t v4 = a2 << a3;
  unint64_t v5 = malloc_type_malloc(a2 << a3, 0x5E9B4970uLL);
  if (!v5)
  {
    uint64_t v7 = [MEMORY[0x1E4F28B00] currentHandler];
    unint64_t v8 = objc_msgSend(NSString, "stringWithUTF8String:", "uint8_t *_allocateStandardizedEndiannessByteArrayForEncodingHostReferenceEdgePositions(const void *, const size_t, const BOOL)");
    [v7 handleFailureInFunction:v8 file:@"_UIBoundingPathBitmapDataCornerCache.m" lineNumber:48 description:@"Failed to allocate memory for encoding the bitmap data corner edge positions."];
  }
  return memcpy(v5, a1, v4);
}

uint64_t _UISceneSettingsDiffActionPerformActionsWithDelayForTransitionContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(a3 + 16))(a3);
}

void _UISceneSettingsDiffActionPerformChangesWithTransitionContext(void *a1, void *a2)
{
}

id getIATextInputActionsAnalyticsClass()
{
  uint64_t v3 = 0;
  size_t v4 = &v3;
  uint64_t v5 = 0x2050000000;
  os_log_t v0 = (void *)getIATextInputActionsAnalyticsClass_softClass;
  uint64_t v6 = getIATextInputActionsAnalyticsClass_softClass;
  if (!getIATextInputActionsAnalyticsClass_softClass)
  {
    InputAnalyticsLibraryCore_0();
    v4[3] = (uint64_t)objc_getClass("IATextInputActionsAnalytics");
    getIATextInputActionsAnalyticsClass_softClass = v4[3];
    os_log_t v0 = (void *)v4[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v3, 8);
  return v1;
}

void sub_1860F76B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1860F8594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1860F9E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1860F9F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1860FD55C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

Class __getIATextInputActionsAnalyticsClass_block_invoke(uint64_t a1)
{
  InputAnalyticsLibraryCore_0();
  Class result = objc_getClass("IATextInputActionsAnalytics");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getIATextInputActionsAnalyticsClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void InputAnalyticsLibraryCore_0()
{
  if (!InputAnalyticsLibraryCore_frameworkLibrary_0) {
    InputAnalyticsLibraryCore_frameworkLibrary_0 = _sl_dlopen();
  }
}

uint64_t __InputAnalyticsLibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  InputAnalyticsLibraryCore_frameworkLibrary_0 = result;
  return result;
}

Class __getIATextInputActionsInputModeClass_block_invoke(uint64_t a1)
{
  InputAnalyticsLibraryCore_0();
  Class result = objc_getClass("IATextInputActionsInputMode");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB260E78 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getTIInputModeFunctionsClass_block_invoke(uint64_t a1)
{
  if (!qword_1EB260E88) {
    qword_1EB260E88 = _sl_dlopen();
  }
  Class result = objc_getClass("TIInputModeFunctions");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB260E80 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __TextInputLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB260E88 = result;
  return result;
}

void sub_1860FF040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_186101B60(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 112));
  _Unwind_Resume(a1);
}

id getSBSKeyboardFocusServiceClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  os_log_t v0 = (void *)qword_1EB260EB0;
  uint64_t v7 = qword_1EB260EB0;
  if (!qword_1EB260EB0)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getSBSKeyboardFocusServiceClass_block_invoke_0;
    v3[3] = &unk_1E52D9900;
    v3[4] = &v4;
    __getSBSKeyboardFocusServiceClass_block_invoke_0((uint64_t)v3);
    os_log_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_186101C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1861022D4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 144));
  _Unwind_Resume(a1);
}

Class __getSBSKeyboardFocusServiceClass_block_invoke_0(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB260EB8)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    void v6[3] = __SpringBoardServicesLibraryCore_block_invoke_2;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E52F21B8;
    uint64_t v8 = 0;
    qword_1EB260EB8 = _sl_dlopen();
  }
  if (!qword_1EB260EB8)
  {
    uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *SpringBoardServicesLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"_UIKeyShortcutHUDServer.m", 45, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("SBSKeyboardFocusService");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getSBSKeyboardFocusServiceClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UIKeyShortcutHUDServer.m", 47, @"Unable to find class %s", "SBSKeyboardFocusService");

LABEL_10:
    __break(1u);
  }
  qword_1EB260EB0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __SpringBoardServicesLibraryCore_block_invoke_2()
{
  uint64_t result = _sl_dlopen();
  qword_1EB260EB8 = result;
  return result;
}

void sub_186103C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186103F38(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_186104224(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_186104B8C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_186105A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void accelCallback(long long *a1)
{
  long long v2 = *a1;
  uint64_t v3 = *((void *)a1 + 2);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __accelCallback_block_invoke;
  block[3] = &__block_descriptor_56_e5_v8__0l;
  dispatch_async(MEMORY[0x1E4F14428], block);
}

uint64_t __accelCallback_block_invoke(uint64_t a1)
{
  float v2 = *(float *)(a1 + 32);
  float v3 = *(float *)(a1 + 36);
  float v4 = *(float *)(a1 + 40);
  uint64_t v5 = +[UIAccelerometer sharedAccelerometer];
  [v5 _acceleratedInX:v2 y:v3 z:v4 timestamp:*(double *)(a1 + 48)];

  uint64_t v6 = (void *)UIApp;
  *(float *)&double v7 = v2;
  *(float *)&double v8 = v3;
  *(float *)&double v9 = v4;
  return [v6 acceleratedInX:v7 Y:v8 Z:v9];
}

uint64_t __CoreMotionLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB260EC8 = result;
  return result;
}

void HardwareKeyboardAvailabilityChanged()
{
  id v0 = +[UIDevice currentDevice];
  [v0 performSelectorOnMainThread:sel__hardwareKeyboardAvailabilityChanged withObject:0 waitUntilDone:0];
}

void UpdateSystemSoundActiveStatus()
{
  if (qword_1EB261028 != -1) {
    dispatch_once(&qword_1EB261028, &__block_literal_global_517_0);
  }
  BOOL v0 = IsSystemSoundEnabled()
    && ([(id)UIApp isSuspended] & 1) == 0
    && ([(id)UIApp isSuspendedEventsOnly] & 1) == 0
    && qword_1EB260F20
    && CFArrayGetCount((CFArrayRef)qword_1EB260F20) > 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __UpdateSystemSoundActiveStatus_block_invoke_2;
  aBlock[3] = &__block_descriptor_33_e5_v8__0l;
  BOOL v3 = v0;
  id v1 = _Block_copy(aBlock);
  if (([(id)UIApp isSuspended] & 1) != 0
    || [(id)UIApp isSuspendedEventsOnly])
  {
    dispatch_sync((dispatch_queue_t)qword_1EB261020, v1);
  }
  else
  {
    dispatch_async((dispatch_queue_t)qword_1EB261020, v1);
  }
}

BOOL IsSystemSoundEnabled()
{
  if (IsSystemSoundEnabled_onceToken != -1) {
    dispatch_once(&IsSystemSoundEnabled_onceToken, &__block_literal_global_525);
  }
  int v0 = __systemSoundEnabled;
  if (__systemSoundEnabled == 255)
  {
    CFPreferencesAppSynchronize(@"com.apple.preferences.sounds");
    Boolean keyExistsAndHasValidFormat = 0;
    uint64_t AppBooleanValue = CFPreferencesGetAppBooleanValue(@"keyboard-audio", @"com.apple.preferences.sounds", &keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat) {
      BOOL v2 = AppBooleanValue == 0;
    }
    else {
      BOOL v2 = 0;
    }
    char v3 = !v2;
    __systemSoundEnableCGFloat d = v3;
    UpdateSystemSoundActiveStatus(AppBooleanValue);
    int v0 = __systemSoundEnabled;
  }
  return v0 != 0;
}

void sub_1861069F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _UILocalizedNameForIdiom(uint64_t a1)
{
  switch(a1)
  {
    case 0:
      id v1 = @"ui.idiom.phone";
      BOOL v2 = @"iPhone user interface idiom name";
      char v3 = @"iPhone";
      break;
    case 1:
      id v1 = @"ui.idiom.ipad";
      BOOL v2 = @"iPad user interface idiom name";
      char v3 = @"iPad";
      break;
    case 2:
      id v1 = @"ui.idiom.tv";
      BOOL v2 = @"AppleTV user interface idiom name";
      char v3 = @"Apple TV";
      break;
    case 3:
      id v1 = @"ui.idiom.carplay";
      BOOL v2 = @"CarPlay user interface idiom name";
      char v3 = @"CarPlay";
      break;
    case 4:
      id v1 = @"ui.idiom.watch";
      BOOL v2 = @"Apple Watch user interface idiom name";
      char v3 = @"Apple Watch";
      break;
    case 5:
      id v1 = @"ui.idiom.mac";
      BOOL v2 = @"Mac user interface idiom name";
      char v3 = @"Mac";
      break;
    case 6:
      id v1 = @"ui.idiom.visionPro";
      BOOL v2 = @"Apple Vision Pro user interface idiom name";
      char v3 = @"Vision Pro";
      break;
    default:
      id v1 = @"ui.idiom.unspecified";
      BOOL v2 = @"Unspecified user interface idiom";
      char v3 = @"Unspecified";
      break;
  }
  float v4 = _UILocalizedString(v1, (uint64_t)v2, v3);
  return v4;
}

uint64_t _UISSlotUserInterfaceIdiomFromUserInterfaceIdiom(unint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (a1 < 9 && ((0x17Fu >> a1) & 1) != 0) {
    return qword_186B97BF0[a1];
  }
  if (os_variant_has_internal_diagnostics())
  {
    float v4 = __UIFaultDebugAssertLog();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
    {
      int v5 = 134217984;
      unint64_t v6 = a1;
      _os_log_fault_impl(&dword_1853B0000, v4, OS_LOG_TYPE_FAULT, "Unexpected user interface idiom for slot: %ld", (uint8_t *)&v5, 0xCu);
    }
  }
  else
  {
    BOOL v2 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_UISSlotUserInterfaceIdiomFromUserInterfaceIdiom___s_category)+ 8);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      int v5 = 134217984;
      unint64_t v6 = a1;
      _os_log_impl(&dword_1853B0000, v2, OS_LOG_TYPE_ERROR, "Unexpected user interface idiom for slot: %ld", (uint8_t *)&v5, 0xCu);
    }
  }
  return 0;
}

void _MatchedBatteries(IONotificationPort **a1, io_iterator_t a2)
{
  kern_return_t v8;
  NSObject *v9;
  NSObject *v10;
  uint8_t v11[16];
  uint8_t buf[16];

  float v4 = (void *)MEMORY[0x18C108260]();
  int v5 = *a1;
  io_object_t v6 = IOIteratorNext(a2);
  if (v6)
  {
    io_service_t v7 = v6;
    do
    {
      double v8 = IOServiceAddInterestNotification(v5, v7, "IOGeneralInterest", (IOServiceInterestCallback)_BatteryStatusChanged, 0, (io_object_t *)&dword_1EB260EE8);
      double v9 = _batteryLog();
      unint64_t v10 = v9;
      if (v8)
      {
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)int v11 = 0;
          _os_log_error_impl(&dword_1853B0000, v10, OS_LOG_TYPE_ERROR, "Failed to add interest notification for battery", v11, 2u);
        }
      }
      else
      {
        if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1853B0000, v10, OS_LOG_TYPE_INFO, "Added interest notification for battery", buf, 2u);
        }

        _UpdateBatteryStatus(v7);
      }
      IOObjectRelease(v7);
      io_service_t v7 = IOIteratorNext(a2);
    }
    while (v7);
  }
}

void __UpdateSystemSoundActiveStatus_block_invoke()
{
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.UIKit.systemSoundActivation", 0);
  id v1 = (void *)qword_1EB261020;
  qword_1EB261020 = (uint64_t)v0;
}

void __UpdateSystemSoundActiveStatus_block_invoke_2(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 32);
  if (byte_1EB260EDA != v1)
  {
    byte_1EB260EDA = *(unsigned char *)(a1 + 32);
    int v7 = v1;
    int v6 = 1104;
    uint64_t v13 = 0;
    long long v14 = &v13;
    uint64_t v15 = 0x2020000000;
    BOOL v2 = (void (*)(uint64_t, uint64_t, int *, uint64_t, int *))off_1EB261030;
    long long v16 = off_1EB261030;
    if (!off_1EB261030)
    {
      uint64_t v8 = MEMORY[0x1E4F143A8];
      uint64_t v9 = 3221225472;
      unint64_t v10 = __getAudioServicesSetPropertySymbolLoc_block_invoke_0;
      int v11 = &unk_1E52D9900;
      long long v12 = &v13;
      char v3 = AudioToolboxLibrary_1();
      void v14[3] = (uint64_t)dlsym(v3, "AudioServicesSetProperty");
      off_1EB261030 = *(_UNKNOWN **)(v12[1] + 24);
      BOOL v2 = (void (*)(uint64_t, uint64_t, int *, uint64_t, int *))v14[3];
    }
    _Block_object_dispose(&v13, 8);
    if (v2)
    {
      v2(1633907745, 4, &v6, 4, &v7);
    }
    else
    {
      float v4 = [MEMORY[0x1E4F28B00] currentHandler];
      int v5 = objc_msgSend(NSString, "stringWithUTF8String:", "OSStatus __AudioServicesSetProperty(AudioServicesPropertyID, UInt32, const void *, UInt32, const void *)");
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIDevice.m", 91, @"%s", dlerror());

      __break(1u);
    }
  }
}

void sub_1861083C4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void *__getAudioServicesSetPropertySymbolLoc_block_invoke_0(uint64_t a1)
{
  BOOL v2 = AudioToolboxLibrary_1();
  uint64_t result = dlsym(v2, "AudioServicesSetProperty");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1EB261030 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __AudioToolboxLibraryCore_block_invoke_2()
{
  uint64_t result = _sl_dlopen();
  AudioToolboxLibraryCore_frameworkLibrary_1 = result;
  return result;
}

void __IsSystemSoundEnabled_block_invoke()
{
  if (qword_1EB261040 != -1) {
    dispatch_once(&qword_1EB261040, &__block_literal_global_534);
  }
  id v0 = (id)qword_1EB261038;
  uint64_t v1 = self;
  [v0 addObserver:v1 forKeyPath:@"keyboard-audio" options:0 context:_KVOContext];

  id v4 = [MEMORY[0x1E4F28EB8] defaultCenter];
  BOOL v2 = self;
  [v4 addObserver:v2 selector:sel_invalidateSystemSoundEnablement name:@"UIApplicationResumedNotification" object:0];

  char v3 = self;
  [v4 addObserver:v3 selector:sel_invalidateSystemSoundEnablement name:@"UIApplicationResumedEventsOnlyNotification" object:0];
}

void __SoundsUserDefaults_block_invoke()
{
  uint64_t v0 = [objc_alloc(MEMORY[0x1E4F1CB18]) initWithSuiteName:@"com.apple.preferences.sounds"];
  uint64_t v1 = (void *)qword_1EB261038;
  qword_1EB261038 = v0;
}

void *__getAudioServicesPlaySystemSoundSymbolLoc_block_invoke(uint64_t a1)
{
  BOOL v2 = AudioToolboxLibrary_1();
  uint64_t result = dlsym(v2, "AudioServicesPlaySystemSound");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAudioServicesPlaySystemSoundSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1861092B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186109AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _UIScreenBacklightLevelDidChangeCallback(uint64_t a1, uint64_t a2)
{
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = ___UIScreenBacklightLevelDidChangeCallback_block_invoke;
  aBlock[3] = &__block_descriptor_40_e5_v8__0l;
  void aBlock[4] = a2;
  BOOL v2 = (void (**)(void))_Block_copy(aBlock);
  if (pthread_main_np() == 1) {
    v2[2](v2);
  }
  else {
    dispatch_async(MEMORY[0x1E4F14428], v2);
  }
}

void _UIScreenAccessibilityInvertColorsDidChangeCallback(uint64_t a1, uint64_t a2)
{
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = ___UIScreenAccessibilityInvertColorsDidChangeCallback_block_invoke;
  aBlock[3] = &__block_descriptor_40_e5_v8__0l;
  void aBlock[4] = a2;
  BOOL v2 = (void (**)(void))_Block_copy(aBlock);
  if (pthread_main_np() == 1) {
    v2[2](v2);
  }
  else {
    dispatch_async(MEMORY[0x1E4F14428], v2);
  }
}

double _UIScreenConvertToCAScreen(double a1, double a2, double a3, double a4, double a5, double a6)
{
  double v7 = a1 * a3;
  double v8 = a2 * a3;
  double v9 = -(a4 + -1.57079633);
  if (a4 + -1.57079633 >= 0.0) {
    double v9 = a4 + -1.57079633;
  }
  if (v9 < 0.01) {
    return v8;
  }
  double v11 = a4 + -4.71238898;
  if (v11 < 0.0) {
    double v11 = -v11;
  }
  if (v11 >= 0.01) {
    return v7;
  }
  else {
    return a6 + -1.0 - v8;
  }
}

double _UIScreenConvertFromCAScreen(double result, double a2, double a3, double a4, double a5)
{
  double v5 = -(a4 + -1.57079633);
  if (a4 + -1.57079633 >= 0.0) {
    double v5 = a4 + -1.57079633;
  }
  if (v5 >= 0.01)
  {
    double v6 = a4 + -4.71238898;
    if (v6 < 0.0) {
      double v6 = -v6;
    }
    if (v6 < 0.01) {
      uint64_t result = a2;
    }
  }
  else
  {
    uint64_t result = a5 + -1.0 - a2;
  }
  if (a3 != 1.0) {
    return result / a3;
  }
  return result;
}

void *__getCARSessionLimitUserInterfacesChangedNotificationSymbolLoc_block_invoke(uint64_t a1)
{
  BOOL v2 = CarKitLibrary();
  uint64_t result = dlsym(v2, "CARSessionLimitUserInterfacesChangedNotification");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25C638 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *CarKitLibrary()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!CarKitLibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    void v4[2] = (void *)3221225472;
    v4[3] = __CarKitLibraryCore_block_invoke;
    void v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_1E52F2538;
    uint64_t v6 = 0;
    CarKitLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  uint64_t v0 = (void *)CarKitLibraryCore_frameworkLibrary;
  if (!CarKitLibraryCore_frameworkLibrary)
  {
    uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
    char v3 = [NSString stringWithUTF8String:"void *CarKitLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIScreen.m", 106, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __CarKitLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  CarKitLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

void *__getCARSessionNightModeChangedNotificationSymbolLoc_block_invoke(uint64_t a1)
{
  BOOL v2 = CarKitLibrary();
  uint64_t result = dlsym(v2, "CARSessionNightModeChangedNotification");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25C640 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getFigOutputMonitorIsScreenProbablyBeingRecordedSymbolLoc_block_invoke(void *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1EB25C660)
  {
    v5[1] = (void *)MEMORY[0x1E4F143A8];
    v5[2] = (void *)3221225472;
    v5[3] = __MediaToolboxLibraryCore_block_invoke;
    void v5[4] = &__block_descriptor_40_e5_v8__0l;
    void v5[5] = v5;
    long long v6 = xmmword_1E52F2550;
    uint64_t v7 = 0;
    qword_1EB25C660 = _sl_dlopen();
  }
  BOOL v2 = (void *)qword_1EB25C660;
  if (!qword_1EB25C660)
  {
    a1 = [MEMORY[0x1E4F28B00] currentHandler];
    BOOL v2 = [NSString stringWithUTF8String:"void *MediaToolboxLibrary(void)"];
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, @"UIScreen.m", 132, @"%s", v5[0]);

    __break(1u);
    goto LABEL_7;
  }
  char v3 = v5[0];
  if (v5[0]) {
LABEL_7:
  }
    free(v3);
  uint64_t result = dlsym(v2, "FigOutputMonitorIsScreenProbablyBeingRecorded");
  *(void *)(*(void *)(a1[4] + 8) + 24) = result;
  off_1EB25C658 = *(_UNKNOWN **)(*(void *)(a1[4] + 8) + 24);
  return result;
}

uint64_t __MediaToolboxLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25C660 = result;
  return result;
}

void *_UITraitTraceForTraitEnvironmentAndQueryString(void *a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  for (unint64_t i = (void *)[MEMORY[0x1E4F1CA48] array]; a1; a1 = objc_msgSend(a1, "_parentTraitEnvironment"))
  {
    long long v5 = (void *)MEMORY[0x1E4F28E78];
    long long v6 = (objc_class *)objc_opt_class();
    uint64_t v7 = (void *)[v5 stringWithFormat:@"<%@: %p", NSStringFromClass(v6), a1];
    if (objc_opt_respondsToSelector()) {
      uint64_t v8 = (void *)[a1 _extraInfoForTraitTrace];
    }
    else {
      uint64_t v8 = 0;
    }
    if ([v8 length]) {
      [v7 appendFormat:@"; %@", v8];
    }
    objc_msgSend(v7, "appendFormat:", @"; traits = { %@ }",
      objc_msgSend((id)objc_msgSend(a1, "traitCollection"), "_traitsDescriptionMatching:", a2));
    if (objc_opt_respondsToSelector())
    {
      uint64_t v9 = [a1 traitOverrides];
      if (v9)
      {
        unint64_t v10 = (void *)v9;
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          id v11 = -[_UITraitOverrides _traitOverridesDescriptionMatching:](v10, a2);
          if ([v11 length]) {
            [v7 appendFormat:@"; %@", v11];
          }
        }
      }
    }
    [v7 appendString:@">"];
    [i addObject:v7];
    if ((objc_opt_respondsToSelector() & 1) == 0) {
      break;
    }
  }
  long long v12 = (void *)[MEMORY[0x1E4F28E78] string];
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v13 = (void *)[i reverseObjectEnumerator];
  uint64_t v14 = [v13 countByEnumeratingWithState:&v23 objects:v27 count:16];
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = 0;
    uint64_t v17 = *(void *)v24;
    do
    {
      uint64_t v18 = 0;
      uint64_t v22 = v16;
      do
      {
        if (*(void *)v24 != v17) {
          objc_enumerationMutation(v13);
        }
        long long v19 = *(void **)(*((void *)&v23 + 1) + 8 * v18);
        if ([v19 length]) {
          [v12 appendString:@"\n"];
        }
        for (uint64_t j = v16; j; --j)
          [v12 appendString:@"|  "];
        [v12 appendString:v19];
        ++v16;
        ++v18;
      }
      while (v18 != v15);
      uint64_t v16 = v15 + v22;
      uint64_t v15 = [v13 countByEnumeratingWithState:&v23 objects:v27 count:16];
    }
    while (v15);
  }
  return v12;
}

void sub_1861110EC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_186111F28(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 120), 8);
  _Unwind_Resume(a1);
}

void sub_186112ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186112D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _UITraitCollectionUserInterfaceStyleDidChangeTV()
{
  return 0;
}

UITraitCollection *_UITraitCollectionFromThemeKey(void *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int has_internal_diagnostics = os_variant_has_internal_diagnostics();
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  if (has_internal_diagnostics)
  {
    if ((isKindOfClass & 1) == 0)
    {
      long long v6 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 138412290;
        long long v12 = a1;
        _os_log_fault_impl(&dword_1853B0000, v6, OS_LOG_TYPE_FAULT, "Unsupported themeKey: %@", buf, 0xCu);
      }
    }
  }
  else if ((isKindOfClass & 1) == 0)
  {
    uint64_t v7 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_UITraitCollectionFromThemeKey___s_category) + 8);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      long long v12 = a1;
      _os_log_impl(&dword_1853B0000, v7, OS_LOG_TYPE_ERROR, "Unsupported themeKey: %@", buf, 0xCu);
    }
  }
  unint64_t v4 = [a1 unsignedIntegerValue];
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = ___UITraitCollectionFromThemeKey_block_invoke;
  v8[3] = &__block_descriptor_58_e27_v16__0___UIMutableTraits__8l;
  void v8[4] = v4 & 3;
  v8[5] = ((v4 >> 2) & 0xF) - 1;
  BOOL v9 = (v4 & 0x40) != 0;
  BOOL v10 = (v4 & 0x80) != 0;
  v8[6] = (v4 >> 8) & 1;
  return +[UITraitCollection traitCollectionWithTraits:v8];
}

uint64_t __UITraitCollectionAllowedClassesForObjectTraitCoding_block_invoke()
{
  id v14 = objc_alloc(MEMORY[0x1E4F1CAD0]);
  uint64_t v13 = objc_opt_class();
  uint64_t v12 = objc_opt_class();
  uint64_t v11 = objc_opt_class();
  uint64_t v0 = objc_opt_class();
  uint64_t v1 = objc_opt_class();
  uint64_t v2 = objc_opt_class();
  uint64_t v3 = objc_opt_class();
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_opt_class();
  uint64_t v8 = objc_opt_class();
  uint64_t v9 = objc_opt_class();
  uint64_t result = objc_msgSend(v14, "initWithObjects:", v13, v12, v11, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, objc_opt_class(), 0);
  qword_1EB261358 = result;
  return result;
}

void FreeTraitCollectionTSD(uint64_t a1)
{
  char has_internal_diagnostics = os_variant_has_internal_diagnostics();
  if (*(void *)(a1 + 152))
  {
    if ((has_internal_diagnostics & 1) == 0)
    {
LABEL_3:
      uint64_t v3 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB261378) + 8);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1853B0000, v3, OS_LOG_TYPE_ERROR, "primaryTarget.traitsUsed is not NULL; this means tracking state was not reset",
          buf,
          2u);
      }
      goto LABEL_7;
    }
  }
  else
  {
    int8x16_t v4 = vorrq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 176));
    int8x8_t v5 = vorr_s8(*(int8x8_t *)v4.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 8uLL));
    if ((has_internal_diagnostics & 1) == 0)
    {
      if (!*(void *)&v5) {
        goto LABEL_7;
      }
      goto LABEL_3;
    }
    if (!*(void *)&v5) {
      goto LABEL_7;
    }
  }
  uint64_t v9 = __UIFaultDebugAssertLog();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)id v14 = 0;
    _os_log_fault_impl(&dword_1853B0000, v9, OS_LOG_TYPE_FAULT, "primaryTarget.traitsUsed is not NULL; this means tracking state was not reset",
      v14,
      2u);
  }
LABEL_7:
  char v6 = os_variant_has_internal_diagnostics();
  if (*(void *)(a1 + 328))
  {
    if ((v6 & 1) == 0)
    {
LABEL_9:
      uint64_t v7 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB261380) + 8);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v11 = 0;
        _os_log_impl(&dword_1853B0000, v7, OS_LOG_TYPE_ERROR, "secondaryTarget.traitsUsed is not NULL; this means tracking state was not reset",
          v11,
          2u);
      }
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 344) | *(void *)(a1 + 336) | *(void *)(a1 + 352) | *(void *)(a1 + 360);
    if ((v6 & 1) == 0)
    {
      if (!v8) {
        goto LABEL_13;
      }
      goto LABEL_9;
    }
    if (!v8) {
      goto LABEL_13;
    }
  }
  BOOL v10 = __UIFaultDebugAssertLog();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t v12 = 0;
    _os_log_fault_impl(&dword_1853B0000, v10, OS_LOG_TYPE_FAULT, "secondaryTarget.traitsUsed is not NULL; this means tracking state was not reset",
      v12,
      2u);
  }
LABEL_13:
  free((void *)a1);
}

uint64_t _UIGetDescriptionForFallbackEnvironmentWithInvalidTraitCollection(void *a1)
{
  if (_UIGetDescriptionForFallbackEnvironmentWithInvalidTraitCollection___reentranceGuard == 1)
  {
    uint64_t v2 = NSString;
    uint64_t v3 = (objc_class *)objc_opt_class();
    return [v2 stringWithFormat:@"<%@: %p>", NSStringFromClass(v3), a1];
  }
  else
  {
    _UIGetDescriptionForFallbackEnvironmentWithInvalidTraitCollection___reentranceGuarCGFloat d = 1;
    uint64_t result = [a1 description];
    _UIGetDescriptionForFallbackEnvironmentWithInvalidTraitCollection___reentranceGuarCGFloat d = 0;
  }
  return result;
}

__CFString *_additionalDebuggingDescriptionForFallbackEnvironment(void *a1)
{
  uint64_t v1 = (void *)_viewForFallbackEnvironment(a1);
  if (v1) {
    return (__CFString *)[NSString stringWithFormat:@" with view controller %@ in window %@", objc_msgSend(v1, "_viewControllerForAncestor"), objc_msgSend(v1, "window")];
  }
  else {
    return &stru_1ED0E84C0;
  }
}

uint64_t __UISimulateCrash_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2020000000;
  char v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))off_1EB261438;
  uint64_t v13 = off_1EB261438;
  if (!off_1EB261438)
  {
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    void v9[2] = __getSimulateCrashSymbolLoc_block_invoke_0;
    _OWORD v9[3] = &unk_1E52D9900;
    void v9[4] = &v10;
    __getSimulateCrashSymbolLoc_block_invoke_0(v9);
    char v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v11[3];
  }
  _Block_object_dispose(&v10, 8);
  if (v6) {
    return v6(a1, a2, a3);
  }
  uint64_t v8 = (void *)[MEMORY[0x1E4F28B00] currentHandler];
  uint64_t result = objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "BOOL __UISimulateCrash(pid_t, mach_exception_data_type_t, NSString *)"), @"UIDebug_Internal.h", 19, @"%s", dlerror());
  __break(1u);
  return result;
}

void sub_1861180C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getSimulateCrashSymbolLoc_block_invoke_0(void *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB261440)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    void v6[3] = __CrashReporterSupportLibraryCore_block_invoke_0;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E52F2E78;
    uint64_t v8 = 0;
    qword_1EB261440 = _sl_dlopen();
  }
  uint64_t v2 = (void *)qword_1EB261440;
  if (!qword_1EB261440)
  {
    a1 = (void *)[MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"void *CrashReporterSupportLibrary(void)"];
    uint64_t v3 = objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIDebug_Internal.h", 18, @"%s", v6[0]);
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v3 = v6[0];
  if (v6[0]) {
LABEL_7:
  }
    free(v3);
  uint64_t result = dlsym(v2, "SimulateCrash");
  *(void *)(*(void *)(a1[4] + 8) + 24) = result;
  off_1EB261438 = *(_UNKNOWN **)(*(void *)(a1[4] + 8) + 24);
  return result;
}

uint64_t __CrashReporterSupportLibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  qword_1EB261440 = result;
  return result;
}

BOOL _UIScreenTypePrivateIsRectangular(uint64_t a1)
{
  if (a1 <= 10070)
  {
    switch(a1)
    {
      case 10030:
        unint64_t v1 = 9;
        break;
      case 10031:
        unint64_t v1 = 10;
        break;
      case 10032:
      case 10033:
      case 10034:
      case 10035:
      case 10036:
      case 10037:
      case 10038:
      case 10039:
      case 10044:
      case 10045:
      case 10046:
      case 10047:
      case 10048:
      case 10049:
      case 10054:
      case 10055:
      case 10056:
      case 10057:
      case 10058:
      case 10059:
        goto LABEL_33;
      case 10040:
        unint64_t v1 = 11;
        break;
      case 10041:
        unint64_t v1 = 12;
        break;
      case 10042:
        unint64_t v1 = 17;
        break;
      case 10043:
        unint64_t v1 = 18;
        break;
      case 10050:
        unint64_t v1 = 13;
        break;
      case 10051:
        unint64_t v1 = 14;
        break;
      case 10052:
        unint64_t v1 = 19;
        break;
      case 10053:
        unint64_t v1 = 20;
        break;
      case 10060:
        unint64_t v1 = 15;
        break;
      case 10061:
        unint64_t v1 = 16;
        break;
      case 10062:
        unint64_t v1 = 21;
        break;
      case 10063:
        unint64_t v1 = 22;
        break;
      default:
        uint64_t v2 = a1 - 10000;
        unint64_t v1 = 0;
        switch(v2)
        {
          case 0:
            return _UIScreenCornerRadiusForType(v1) == 0.0;
          case 1:
            unint64_t v1 = 1;
            break;
          case 2:
            unint64_t v1 = 2;
            break;
          case 3:
            unint64_t v1 = 3;
            break;
          case 4:
            unint64_t v1 = 4;
            break;
          case 10:
            unint64_t v1 = 5;
            break;
          case 11:
            unint64_t v1 = 6;
            break;
          case 20:
            unint64_t v1 = 7;
            break;
          case 21:
            unint64_t v1 = 8;
            break;
          default:
            goto LABEL_33;
        }
        break;
    }
  }
  else
  {
    if (a1 <= 20009)
    {
      if (a1 <= 10090)
      {
        if (a1 > 10080)
        {
          if (a1 == 10081)
          {
            unint64_t v1 = 26;
            return _UIScreenCornerRadiusForType(v1) == 0.0;
          }
          if (a1 == 10090)
          {
            unint64_t v1 = 27;
            return _UIScreenCornerRadiusForType(v1) == 0.0;
          }
        }
        else
        {
          if (a1 == 10071)
          {
            unint64_t v1 = 24;
            return _UIScreenCornerRadiusForType(v1) == 0.0;
          }
          if (a1 == 10080)
          {
            unint64_t v1 = 25;
            return _UIScreenCornerRadiusForType(v1) == 0.0;
          }
        }
      }
      else if (a1 <= 10100)
      {
        if (a1 == 10091)
        {
          unint64_t v1 = 28;
          return _UIScreenCornerRadiusForType(v1) == 0.0;
        }
        if (a1 == 10100)
        {
          unint64_t v1 = 29;
          return _UIScreenCornerRadiusForType(v1) == 0.0;
        }
      }
      else
      {
        switch(a1)
        {
          case 10101:
            unint64_t v1 = 30;
            return _UIScreenCornerRadiusForType(v1) == 0.0;
          case 20000:
            unint64_t v1 = 31;
            return _UIScreenCornerRadiusForType(v1) == 0.0;
          case 20001:
            unint64_t v1 = 32;
            return _UIScreenCornerRadiusForType(v1) == 0.0;
        }
      }
LABEL_33:
      unint64_t v1 = -1;
      return _UIScreenCornerRadiusForType(v1) == 0.0;
    }
    switch(a1)
    {
      case 20020:
        unint64_t v1 = 35;
        return _UIScreenCornerRadiusForType(v1) == 0.0;
      case 20021:
        unint64_t v1 = 36;
        return _UIScreenCornerRadiusForType(v1) == 0.0;
      case 20022:
        unint64_t v1 = 37;
        return _UIScreenCornerRadiusForType(v1) == 0.0;
      case 20023:
        unint64_t v1 = 38;
        return _UIScreenCornerRadiusForType(v1) == 0.0;
      case 20024:
        unint64_t v1 = 39;
        return _UIScreenCornerRadiusForType(v1) == 0.0;
      case 20025:
        unint64_t v1 = 40;
        return _UIScreenCornerRadiusForType(v1) == 0.0;
      case 20026:
      case 20027:
      case 20028:
      case 20029:
      case 20032:
      case 20034:
      case 20035:
      case 20036:
      case 20037:
      case 20038:
      case 20039:
      case 20042:
      case 20043:
      case 20044:
      case 20045:
      case 20046:
      case 20047:
      case 20048:
      case 20049:
        goto LABEL_33;
      case 20030:
        unint64_t v1 = 41;
        return _UIScreenCornerRadiusForType(v1) == 0.0;
      case 20031:
        unint64_t v1 = 42;
        return _UIScreenCornerRadiusForType(v1) == 0.0;
      case 20033:
        unint64_t v1 = 43;
        return _UIScreenCornerRadiusForType(v1) == 0.0;
      case 20040:
        unint64_t v1 = 44;
        return _UIScreenCornerRadiusForType(v1) == 0.0;
      case 20041:
        unint64_t v1 = 45;
        return _UIScreenCornerRadiusForType(v1) == 0.0;
      case 20050:
        unint64_t v1 = 46;
        return _UIScreenCornerRadiusForType(v1) == 0.0;
      case 20051:
        unint64_t v1 = 47;
        return _UIScreenCornerRadiusForType(v1) == 0.0;
      case 20052:
        unint64_t v1 = 48;
        return _UIScreenCornerRadiusForType(v1) == 0.0;
      default:
        if (a1 == 20010)
        {
          unint64_t v1 = 33;
        }
        else
        {
          if (a1 != 20011) {
            goto LABEL_33;
          }
          unint64_t v1 = 34;
        }
        break;
    }
  }
  return _UIScreenCornerRadiusForType(v1) == 0.0;
}

uint64_t _UIScreenTypePrivateForScreen(void *a1)
{
  unint64_t v1 = _UIScreenTypeForScreen(a1);
  if (v1 > 0x30) {
    return -1;
  }
  else {
    return qword_186B97C78[v1];
  }
}

void sub_186118C64(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_18611978C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __DefaultContentSizeCategory_block_invoke()
{
  if (UIApp) {
    uint64_t v0 = (__objc2_class *)objc_opt_class();
  }
  else {
    uint64_t v0 = UIApplication;
  }
  uint64_t v1 = [(__objc2_class *)v0 _defaultContentSizeCategory];
  uint64_t v2 = (void *)qword_1EB2614D8;
  qword_1EB2614D8 = v1;
}

id _UIImageConfigurationWithFlippedLayoutDirection(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 traitCollection];
  uint64_t v3 = v2;
  if (v2 && [v2 layoutDirection] != -1)
  {
    uint64_t v4 = objc_msgSend(v3, "_traitCollectionByReplacingNSIntegerValue:forTraitToken:", objc_msgSend(v3, "layoutDirection") == 0, 0x1ED3F5A60);

    uint64_t v5 = [v1 configurationWithTraitCollection:v4];

    uint64_t v3 = (void *)v4;
    id v1 = (id)v5;
  }

  return v1;
}

void sub_186120F80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v19 = v18;
  if (a2 != 1) {
    _Unwind_Resume(exception_object);
  }
  id v20 = objc_begin_catch(exception_object);
  uint64_t v21 = *(void *)(v19 + 16);
  uint64_t v22 = objc_opt_class();
  long long v23 = [v20 reason];
  NSLog(&cfstr_FailedToSetUse.isa, v21, v22, v23);

  objc_end_catch();
}

void sub_186121034(void *a1)
{
  objc_begin_catch(a1);
  objc_end_catch();
}

id _UIGestureRecognizerContainerRecursiveDescription(void *a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = v7;
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    v7[2] = ___UIGestureRecognizerContainerRecursiveDescription_block_invoke;
    v7[3] = &unk_1E52F2F80;
    v7[4] = a2;
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v4 = _Block_copy(v3);
  uint64_t v5 = _UIRecursiveDescription(a1, (uint64_t)sel__childGestureRecognizerContainers, (uint64_t)v4);

  return v5;
}

id _UIGestureRecognizerContainerAncestralDescription(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = v7;
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    v7[2] = ___UIGestureRecognizerContainerAncestralDescription_block_invoke;
    v7[3] = &unk_1E52F2F80;
    v7[4] = a2;
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v4 = _Block_copy(v3);
  uint64_t v5 = _UIAncestralDescription(a1, (uint64_t)sel__parentGestureRecognizerContainer, (uint64_t)v4);

  return v5;
}

id UIResourceIdentifierForStringsFileForNIBBeingDecodedWithCoder(void *a1)
{
  id v1 = a1;
  CFDictionaryRef v2 = UICoderToNibIdentifierForStringsFileMap();
  uint64_t v3 = CFDictionaryGetValue(v2, v1);

  uint64_t v4 = [MEMORY[0x1E4F1CA98] null];
  if (v3 == v4) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v3;
  }
  id v6 = v5;

  return v6;
}

void sub_186122BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPKTextInputSettingsClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB261528)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    void v6[3] = __PencilKitLibraryCore_block_invoke;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E52F2FB0;
    uint64_t v8 = 0;
    qword_1EB261528 = _sl_dlopen();
  }
  if (!qword_1EB261528)
  {
    uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *PencilKitLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIKeyboardSuppressionPolicyDelegate.m", 15, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("PKTextInputSettings");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getPKTextInputSettingsClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIKeyboardSuppressionPolicyDelegate.m", 16, @"Unable to find class %s", "PKTextInputSettings");

LABEL_10:
    __break(1u);
  }
  _MergedGlobals_1107 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __PencilKitLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB261528 = result;
  return result;
}

uint64_t _UIUpdateCycleIsNotifyingIdleObservers()
{
  return _isNotifyingIdleObservers;
}

unint64_t _UIUpdateCycleComputeIdleDeadline(unint64_t a1, unint64_t a2)
{
  double v2 = (double)a1;
  double v3 = (double)a2;
  int v4 = _UIInternalPreferenceUsesDefault((int *)&_UIInternalPreference_IdleSchedulerTargetDeadlineFraction, @"IdleSchedulerTargetDeadlineFraction", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateDouble);
  double v5 = *(double *)&qword_1EB257628;
  if (v4) {
    double v5 = 0.3;
  }
  return (unint64_t)(v5 * v3 + v2);
}

void _UIUpdateCycleNotifyIdle(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  int v6 = _UIInternalPreferenceUsesDefault((int *)&unk_1EB257660, @"UpdateCycleIdleSchedulerMode", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateInteger);
  uint64_t v7 = qword_1EB257668;
  if (v6) {
    uint64_t v7 = 0;
  }
  if (v7 != -1 && (v7 == 1 || dyld_program_sdk_at_least()) && (_MergedGlobals_11_8 & 1) == 0)
  {
    [(id)qword_1EB25D368 compact];
    if ([(id)qword_1EB25D368 count])
    {
      uint64_t v8 = mach_absolute_time();
      if (v8 >= qword_1EB25D380)
      {
        unint64_t v9 = v8 - a1;
        double v10 = (double)a2;
        if (_UIInternalPreferenceUsesDefault((int *)&_MergedGlobals_914, @"IdleSchedulerMaximumFractionToStart", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateDouble))
        {
          int v11 = _UIUpdateCycleEnabled();
          double v12 = 0.7;
          if (!v11) {
            double v12 = 0.5;
          }
        }
        else
        {
          double v12 = *(double *)&qword_1EB257638;
        }
        double v13 = v12 * v10;
        if (v9 <= (unint64_t)v13)
        {
          _MergedGlobals_11_8 = 1;
          v19[0] = MEMORY[0x1E4F143A8];
          v19[1] = 3221225472;
          v19[2] = ___UIUpdateCycleNotifyIdle_block_invoke;
          _OWORD v19[3] = &__block_descriptor_64_e5_v8__0l;
          void v19[4] = a1;
          v19[5] = (unint64_t)v13;
          v19[6] = a2;
          v19[7] = a3;
          uint64_t v15 = v19;
          uint64_t v16 = MEMORY[0x1E4F14428];
          id v17 = MEMORY[0x1E4F14428];
          if (_UIUpdateCycleEnabled())
          {
            dispatch_async(MEMORY[0x1E4F14428], v15);
          }
          else
          {
            *(void *)&long long buf = MEMORY[0x1E4F143A8];
            *((void *)&buf + 1) = 3221225472;
            uint64_t v21 = ___UIUpdateCycleExecuteAsyncAfterCommit_block_invoke;
            uint64_t v22 = &unk_1E52DA160;
            uint64_t v18 = v16;
            long long v23 = v16;
            uint64_t v24 = v15;
            dispatch_async(v16, &buf);
          }
        }
        else
        {
          id v14 = *(NSObject **)(__UILogGetCategoryCachedImpl("UpdateCycleIdleScheduler", &qword_1EB25D390) + 8);
          if (os_signpost_enabled(v14))
          {
            LODWORD(buf) = 134217984;
            *(double *)((char *)&buf + 4) = (double)v9 / v10;
            _os_signpost_emit_with_name_impl(&dword_1853B0000, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SkipNotify", "Before scheduling, elapsed=%.2f", (uint8_t *)&buf, 0xCu);
          }
        }
      }
    }
  }
}

uint64_t scrollingKeyForPress(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 type];
  if (!v10 & v3)
  {
    switch(v2)
    {
      case 22:
        uint64_t v4 = 7;
        goto LABEL_26;
      case 23:
        uint64_t v4 = 8;
        goto LABEL_26;
      case 30:
        uint64_t v4 = 5;
        goto LABEL_26;
      case 31:
        uint64_t v4 = 6;
        goto LABEL_26;
      default:
        double v5 = [v1 key];
        uint64_t v6 = [v5 keyCode];
        uint64_t v7 = [v1 key];
        uint64_t v8 = [v7 modifierFlags];
        if (v8 == 0x100000)
        {
          uint64_t v9 = 8 * (v6 == 81);
          BOOL v10 = v6 == 82;
          uint64_t v11 = 7;
        }
        else
        {
          if (v8 != 0x80000)
          {
            if (v8 || (unint64_t)(v6 - 74) >= 5) {
              uint64_t v4 = 0;
            }
            else {
              uint64_t v4 = qword_186B98DB0[v6 - 74];
            }
            goto LABEL_25;
          }
          uint64_t v9 = 6;
          if (v6 != 81) {
            uint64_t v9 = 0;
          }
          BOOL v10 = v6 == 82;
          uint64_t v11 = 5;
        }
        if (v10) {
          uint64_t v4 = v11;
        }
        else {
          uint64_t v4 = v9;
        }
LABEL_25:

        goto LABEL_26;
    }
  }
  uint64_t v4 = 1;
  switch(v2)
  {
    case 0:
      uint64_t v4 = 3;
      break;
    case 1:
      uint64_t v4 = 4;
      break;
    case 2:
      break;
    case 3:
      uint64_t v4 = 2;
      break;
    default:
      JUMPOUT(0);
  }
LABEL_26:

  return v4;
}

void sub_186128374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL _UIShouldApplyTraitStorageRecordsForTraitChanges(uint64_t a1)
{
  if (qword_1EB261550 != -1) {
    dispatch_once(&qword_1EB261550, &__block_literal_global_264_0);
  }
  if (_UITraitTokenSetIntersectsSet((uint64_t)&unk_1EB261560, a1)) {
    return 1;
  }
  if (qword_1EB261558 != -1) {
    dispatch_once(&qword_1EB261558, &__block_literal_global_267);
  }
  return _MergedGlobals_1108 != 0;
}

void ___supportedTraitsForIBVariations_block_invoke()
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  unint64_t v0 = _UIGetTraitTokenValue((const __CFNumber *)&unk_1ED3F5A30);
  _UITraitTokenSetInsert(qword_1EB261560, v0, v1);
  unint64_t v2 = _UIGetTraitTokenValue((const __CFNumber *)&unk_1ED3F5A90);
  _UITraitTokenSetInsert(qword_1EB261560, v2, v3);
  unint64_t v4 = _UIGetTraitTokenValue((const __CFNumber *)&unk_1ED3F5AA8);
  _UITraitTokenSetInsert(qword_1EB261560, v4, v5);
  unint64_t v6 = _UIGetTraitTokenValue((const __CFNumber *)&unk_1ED3F5AF0);
  _UITraitTokenSetInsert(qword_1EB261560, v6, v7);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v8 = +[UITraitCollection _systemTraitTokensAffectingColorAppearance];
  uint64_t v9 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v16;
    do
    {
      uint64_t v12 = 0;
      do
      {
        if (*(void *)v16 != v11) {
          objc_enumerationMutation(v8);
        }
        unint64_t v13 = _UIGetTraitTokenValue(*(const __CFNumber **)(*((void *)&v15 + 1) + 8 * v12));
        _UITraitTokenSetInsert(qword_1EB261560, v13, v14);
        ++v12;
      }
      while (v10 != v12);
      uint64_t v10 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v10);
  }
}

void ___appNeedsCompatibilityBehavior_block_invoke()
{
  if (dyld_program_sdk_at_least())
  {
    _MergedGlobals_1108 = 0;
  }
  else
  {
    _UIMainBundleIdentifier();
    id v0 = (id)objc_claimAutoreleasedReturnValue();
    _MergedGlobals_1108 = [v0 isEqualToString:@"com.crunchyroll.iphone"];
  }
}

void sub_186134A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18613519C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getTUICandidateViewClass()
{
  uint64_t v4 = 0;
  __n128 v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)getTUICandidateViewClass_softClass;
  uint64_t v7 = getTUICandidateViewClass_softClass;
  if (!getTUICandidateViewClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getTUICandidateViewClass_block_invoke;
    v3[3] = &unk_1E52D9900;
    v3[4] = &v4;
    __getTUICandidateViewClass_block_invoke((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1861363D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id TIGetCandidateViewExperimentsValue()
{
  if (TIGetCandidateViewExperimentsValue_onceToken != -1) {
    dispatch_once(&TIGetCandidateViewExperimentsValue_onceToken, &__block_literal_global_577);
  }
  id v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  id v1 = [v0 valueForPreferenceKey:@"CandidateViewExperiments"];

  return v1;
}

void sub_186138254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186139C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18613BAD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
}

void sub_18613BF90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getTUICandidateViewClass_block_invoke(uint64_t a1)
{
  TextInputUILibrary_3();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("TUICandidateView");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getTUICandidateViewClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    unint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    __n128 v3 = [NSString stringWithUTF8String:"Class getTUICandidateViewClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIKeyboardCandidateController.m", 20, @"Unable to find class %s", "TUICandidateView");

    __break(1u);
  }
}

void *TextInputUILibrary_3()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!TextInputUILibraryCore_frameworkLibrary_3)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    void v4[2] = (void *)3221225472;
    v4[3] = __TextInputUILibraryCore_block_invoke_7;
    void v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_1E52F30A8;
    uint64_t v6 = 0;
    TextInputUILibraryCore_frameworkLibrary_3 = _sl_dlopen();
  }
  id v0 = (void *)TextInputUILibraryCore_frameworkLibrary_3;
  if (!TextInputUILibraryCore_frameworkLibrary_3)
  {
    id v0 = [MEMORY[0x1E4F28B00] currentHandler];
    __n128 v3 = [NSString stringWithUTF8String:"void *TextInputUILibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIKeyboardCandidateController.m", 19, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __TextInputUILibraryCore_block_invoke_7()
{
  uint64_t result = _sl_dlopen();
  TextInputUILibraryCore_frameworkLibrary_3 = result;
  return result;
}

void __TIGetCandidateViewExperimentsValue_block_invoke()
{
  id v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  [v0 _configureKey:@"CandidateViewExperiments" domain:@"com.apple.keyboard" defaultValue:MEMORY[0x1E4F1CC28]];
}

void __getTUIEmojiSearchTextFieldClass_block_invoke_0(uint64_t a1)
{
  TextInputUILibrary_3();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("TUIEmojiSearchTextField");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1EB2615B8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    unint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    __n128 v3 = [NSString stringWithUTF8String:"Class getTUIEmojiSearchTextFieldClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIKeyboardCandidateController.m", 26, @"Unable to find class %s", "TUIEmojiSearchTextField");

    __break(1u);
  }
}

void __TIGetDisableCPCandidateBarScrollingValue_block_invoke()
{
  id v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  [v0 _configureKey:@"DisableCPCandidateBarScrolling" domain:@"com.apple.keyboard" defaultValue:MEMORY[0x1E4F1CC28]];
}

void *__getTUICandidateViewAnimationDurationSymbolLoc_block_invoke(uint64_t a1)
{
  unint64_t v2 = TextInputUILibrary_3();
  uint64_t result = dlsym(v2, "TUICandidateViewAnimationDuration");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB2615C8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_18613FD88(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Unwind_Resume(a1);
}

void sub_18614018C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void nullMethodIMP(void *a1, const char *a2)
{
  id v3 = a1;
  NSStringFromSelector(a2);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v4 = (objc_class *)objc_opt_class();

  long long v5 = NSStringFromClass(v4);
  NSLog(&cfstr_MethodNotFound.isa, v6, v5);
}

id _documentTextFont()
{
  id v0 = +[UIKeyboard currentDocumentState];
  if (!v0 || (objc_opt_respondsToSelector() & 1) == 0) {
    goto LABEL_10;
  }
  uint64_t v1 = [v0 autocorrectBubbleStyling];
  unint64_t v2 = [v1 fontName];

  if (v2)
  {
    id v3 = [v1 fontName];
    [v1 fontSize];
    uint64_t v4 = objc_msgSend(off_1E52D39B8, "fontWithName:size:", v3);
  }
  else
  {
    [v1 fontSize];
    if (v5 <= 12.0)
    {

LABEL_10:
      uint64_t v4 = [off_1E52D39B8 systemFontOfSize:16.5];
      goto LABEL_11;
    }
    [v1 fontSize];
    double v7 = v6;
    [v1 fontWeight];
    uint64_t v4 = [off_1E52D39B8 systemFontOfSize:v7 weight:v8];
  }

  if (!v4) {
    goto LABEL_10;
  }
LABEL_11:
  [v4 pointSize];
  if (v9 < 12.0 || ([v4 pointSize], v10 > 36.0))
  {
    uint64_t v11 = objc_msgSend(v4, "fontWithSize:");

    uint64_t v4 = (void *)v11;
  }

  return v4;
}

id _typedTextBackgroundColor()
{
  id v0 = +[UIColor systemBackgroundColor];
  uint64_t v1 = [v0 colorWithAlphaComponent:0.185];

  return v1;
}

uint64_t KBEqualStrings(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  double v5 = v4;
  if (v3 == v4)
  {
    uint64_t v6 = 1;
  }
  else
  {
    uint64_t v6 = 0;
    if (v3 && v4) {
      uint64_t v6 = [v3 isEqualToString:v4];
    }
  }

  return v6;
}

id FindHeightConstraint(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v1 = objc_msgSend(a1, "constraints", 0);
  uint64_t v2 = [v1 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v12;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v12 != v4) {
          objc_enumerationMutation(v1);
        }
        uint64_t v6 = *(void **)(*((void *)&v11 + 1) + 8 * i);
        double v7 = [v6 identifier];
        char v8 = [v7 isEqualToString:@"_UIKBAutolayoutHeightConstraint"];

        if (v8)
        {
          id v9 = v6;
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v1 countByEnumeratingWithState:&v11 objects:v15 count:16];
      if (v3) {
        continue;
      }
      break;
    }
  }
  id v9 = 0;
LABEL_11:

  return v9;
}

unint64_t SubviewUsesClassicLayout(void *a1)
{
  id v1 = a1;
  if ([v1 translatesAutoresizingMaskIntoConstraints])
  {
    unint64_t v2 = ((unint64_t)[v1 autoresizingMask] >> 4) & 1;
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v3 = v1;
    }
    else {
      uint64_t v3 = 0;
    }
    id v4 = v3;
    if (([v4 allowsSelfSizing] & 1) != 0 || (objc_msgSend(v1, "intrinsicContentSize"), v5 != -1.0)) {
      unint64_t v2 = 0;
    }
    else {
      unint64_t v2 = [v1 _hasAutolayoutHeightConstraint] ^ 1;
    }
  }
  return v2;
}

BOOL SubviewAutoSizesWithPredictionBar(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    unint64_t v2 = v1;
  }
  else {
    unint64_t v2 = 0;
  }
  id v3 = v2;
  id v4 = v3;
  BOOL v5 = v3 && ([v3 assertSizingWithPredictionBar] & 1) != 0;

  return v5;
}

double UIRectGetMaxX(double a1, double a2, double a3)
{
  return a1 + a3;
}

uint64_t IsMobileNotes()
{
  if ((_MergedGlobals_1111 & 1) == 0)
  {
    id v0 = _UIMainBundleIdentifier();
    byte_1EB2615D1 = [v0 isEqualToString:@"com.apple.mobilenotes"];
    _MergedGlobals_1111 = 1;
  }
  if (byte_1EB2615D1)
  {
    id v1 = +[UIKeyboardImpl activeInstance];
    unint64_t v2 = [v1 inputDelegateManager];
    id v3 = [v2 keyInputDelegate];

    if (v3)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        uint64_t v4 = 0;
LABEL_14:

        return v4;
      }
      uint64_t v4 = v3;
      while (1)
      {
        ClassName = object_getClassName((id)v4);
        if (!strcmp("NoteContentLayer", ClassName)) {
          break;
        }
        uint64_t v6 = [(id)v4 superview];

        uint64_t v4 = v6;
        if (!v6) {
          goto LABEL_14;
        }
      }
    }
    uint64_t v4 = 1;
    goto LABEL_14;
  }
  return 0;
}

id textFont()
{
  id v0 = +[UIKeyboard currentDocumentState];
  if (v0 && (objc_opt_respondsToSelector() & 1) != 0)
  {
    id v1 = [v0 autocorrectBubbleStyling];
    unint64_t v2 = [v1 fontName];

    if (v2)
    {
      id v3 = [v1 fontName];
      [v1 fontSize];
      uint64_t v4 = objc_msgSend(off_1E52D39B8, "fontWithName:size:", v3);

      goto LABEL_7;
    }
    if (v1)
    {
      [v1 fontSize];
      double v6 = v5;
      [v1 fontWeight];
      uint64_t v4 = [off_1E52D39B8 systemFontOfSize:v6 weight:v7];
LABEL_7:

      if (v4) {
        goto LABEL_10;
      }
    }
  }
  char v8 = +[UIKeyboardImpl activeInstance];
  id v9 = [v8 inputDelegate];

  uint64_t v4 = [v9 _fontForCaretSelection];

  if (!v4)
  {
    uint64_t v4 = [off_1E52D39B8 boldSystemFontOfSize:13.0];
  }
LABEL_10:

  return v4;
}

id inlinePromptTextFont()
{
  id v0 = textFont();
  [v0 pointSize];
  if (v1 < 12.0)
  {
    double v2 = 12.0;
LABEL_5:
    id v4 = [v0 fontWithSize:v2];
    goto LABEL_7;
  }
  [v0 pointSize];
  if (v3 > 36.0)
  {
    double v2 = 36.0;
    goto LABEL_5;
  }
  id v4 = v0;
LABEL_7:
  double v5 = v4;

  return v5;
}

id AutocorrectTextColor()
{
  if (IsAutoFillMode())
  {
    id v0 = (void *)qword_1EB2615F8;
    if (qword_1EB2615F8) {
      goto LABEL_7;
    }
    double v1 = [[UIColor alloc] initWithRed:0.596 green:0.282 blue:0.071 alpha:1.0];
    double v2 = &qword_1EB2615F8;
  }
  else
  {
    id v0 = (void *)qword_1EB2615D8;
    if (qword_1EB2615D8) {
      goto LABEL_7;
    }
    double v1 = +[UIColor systemBlueColor];
    double v2 = &qword_1EB2615D8;
  }
  double v3 = (void *)*v2;
  *double v2 = (uint64_t)v1;

  id v0 = (void *)*v2;
LABEL_7:
  id v4 = v0;
  return v4;
}

uint64_t IsAutoFillMode()
{
  id v0 = +[UIKeyboardImpl activeInstance];
  uint64_t v1 = [v0 isAutoFillMode];

  return v1;
}

id autocorrectTextBackgroundColor()
{
  if (IsAutoFillMode())
  {
    id v0 = (void *)qword_1EB261600;
    if (qword_1EB261600) {
      goto LABEL_7;
    }
    uint64_t v1 = [[UIColor alloc] initWithRed:0.969 green:0.925 blue:0.529 alpha:1.0];
    double v2 = &qword_1EB261600;
  }
  else
  {
    id v0 = (void *)qword_1EB2615E0;
    if (qword_1EB2615E0) {
      goto LABEL_7;
    }
    uint64_t v1 = +[UIColor systemBackgroundColor];
    double v2 = &qword_1EB2615E0;
  }
  double v3 = (void *)*v2;
  *double v2 = (uint64_t)v1;

  id v0 = (void *)*v2;
LABEL_7:
  id v4 = v0;
  return v4;
}

id AutocorrectTextOutlineColor()
{
  if (IsAutoFillMode())
  {
    id v0 = (void *)qword_1EB261608;
    if (qword_1EB261608) {
      goto LABEL_7;
    }
    uint64_t v1 = [[UIColor alloc] initWithRed:0.992 green:0.902 blue:0.392 alpha:1.0];
    double v2 = &qword_1EB261608;
  }
  else
  {
    id v0 = (void *)qword_1EB2615E8;
    if (qword_1EB2615E8) {
      goto LABEL_7;
    }
    uint64_t v1 = +[UIColor systemGray2Color];
    double v2 = &qword_1EB2615E8;
  }
  double v3 = (void *)*v2;
  *double v2 = (uint64_t)v1;

  id v0 = (void *)*v2;
LABEL_7:
  id v4 = v0;
  return v4;
}

id typedTextColor()
{
  id v0 = +[UIKeyboard currentDocumentState];
  if (!v0
    || (objc_opt_respondsToSelector() & 1) == 0
    || ([v0 autocorrectTextColor], (uint64_t v1 = objc_claimAutoreleasedReturnValue()) == 0)
    || (double v2 = v1,
        +[UIColor colorWithCGColor:](UIColor, "colorWithCGColor:", [v1 cgColor]),
        double v3 = objc_claimAutoreleasedReturnValue(),
        v2,
        !v3))
  {
    id v4 = +[UIKeyboardImpl activeInstance];
    double v5 = [v4 inputDelegate];

    double v3 = [v5 _textColorForCaretSelection];

    if (!v3)
    {
      double v3 = +[UIColor labelColor];
    }
  }

  return v3;
}

id documentBackgroundColor()
{
  id v0 = (void *)documentBackgroundColor_color;
  if (!documentBackgroundColor_color)
  {
    uint64_t v1 = +[UIColor systemBackgroundColor];
    double v2 = (void *)documentBackgroundColor_color;
    documentBackgroundColor_color = v1;

    id v0 = (void *)documentBackgroundColor_color;
  }
  return v0;
}

id TypedTextBackgroundColor()
{
  id v0 = +[UIKeyboard currentDocumentState];
  if (v0)
  {
    if (objc_opt_respondsToSelector())
    {
      uint64_t v1 = [v0 autocorrectTextBackgroundColor];
      if (v1)
      {
        double v2 = v1;
        double v3 = +[UIColor colorWithCGColor:](UIColor, "colorWithCGColor:", [v1 cgColor]);

        if (v3) {
          goto LABEL_6;
        }
      }
    }
  }
  id v4 = +[UIKeyboardImpl activeInstance];
  double v5 = [v4 textInputTraits];
  double v3 = [v5 selectionHighlightColor];

  if (v3)
  {
LABEL_6:
    id v6 = [v3 colorWithAlphaComponent:0.185];
  }
  else
  {
    double v7 = (void *)TypedTextBackgroundColor_color;
    if (!TypedTextBackgroundColor_color)
    {
      char v8 = [[UIColor alloc] initWithRed:0.0 green:0.33 blue:1.0 alpha:0.1];
      id v9 = (void *)TypedTextBackgroundColor_color;
      TypedTextBackgroundColor_color = (uint64_t)v8;

      double v7 = (void *)TypedTextBackgroundColor_color;
    }
    id v6 = v7;
  }

  return v6;
}

id AutoCorrectCancelImage()
{
  if (IsAutoFillMode())
  {
    id v0 = (void *)qword_1EB261610;
    if (qword_1EB261610) {
      goto LABEL_7;
    }
    uint64_t v1 = _UIImageWithName(@"kb-autofill-cancel.png");
    double v2 = &qword_1EB261610;
    double v3 = (void *)qword_1EB261610;
    qword_1EB261610 = v1;
  }
  else
  {
    id v0 = (void *)qword_1EB2615F0;
    if (qword_1EB2615F0) {
      goto LABEL_7;
    }
    double v3 = +[UIImageSymbolConfiguration configurationWithPointSize:2 weight:1 scale:16.0];
    id v4 = +[UIImage _systemImageNamed:@"xmark" withConfiguration:v3];
    uint64_t v5 = [v4 imageWithRenderingMode:2];
    double v2 = &qword_1EB2615F0;
    id v6 = (void *)qword_1EB2615F0;
    qword_1EB2615F0 = v5;
  }
  id v0 = (void *)*v2;
LABEL_7:
  id v7 = v0;
  return v7;
}

BOOL _CGRectContainsRectVertically(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  v19.origin.CGFloat x = a5;
  v19.origin.CGFloat y = a6;
  v19.size.CGFloat width = a7;
  v19.size.CGFloat height = a8;
  double MinY = CGRectGetMinY(v19);
  v20.origin.CGFloat x = a1;
  v20.origin.CGFloat y = a2;
  v20.size.CGFloat width = a3;
  v20.size.CGFloat height = a4;
  if (MinY < CGRectGetMinY(v20)) {
    return 0;
  }
  v21.origin.CGFloat x = a5;
  v21.origin.CGFloat y = a6;
  v21.size.CGFloat width = a7;
  v21.size.CGFloat height = a8;
  double MaxY = CGRectGetMaxY(v21);
  v22.origin.CGFloat x = a1;
  v22.origin.CGFloat y = a2;
  v22.size.CGFloat width = a3;
  v22.size.CGFloat height = a4;
  return MaxY <= CGRectGetMaxY(v22);
}

double AutocorrectAdjustedInlineRect(void *a1, void *a2, double a3, double a4, double a5, double a6)
{
  id v9 = a1;
  id v10 = a2;
  if (!+[UIKeyboard isInputSystemUI])
  {
    long long v11 = +[UIKeyboardImpl activeInstance];
    long long v12 = [v11 inputDelegate];

    long long v13 = +[UIKeyboardImpl activeInstance];
    long long v14 = [v13 inputDelegateManager];

    if (!v12) {
      goto LABEL_19;
    }
    long long v15 = [v12 selectedTextRange];

    if (!v15) {
      goto LABEL_19;
    }
    uint64_t v16 = [v12 selectedTextRange];
    long long v17 = [v16 end];
    [v12 caretRectForPosition:v17];
    double v22 = _convertFromInputDelegateRect(v10, v18, v19, v20, v21);
    uint64_t v94 = v23;
    double v95 = v22;
    double v25 = v24;
    double v96 = v26;

    long long v27 = [v12 markedTextRange];

    if (v27)
    {
      uint64_t v38 = [v12 markedTextRange];
      [v12 firstRectForRange:v38];
      double v32 = _convertFromInputDelegateRect(v10, v28, v29, v30, v31);
      CGFloat v90 = v33;
      CGFloat v92 = v32;
      double v35 = v34;
      CGFloat v37 = v36;

      LODWORD(v3_Block_object_dispose(&a9, 8) = v35 != v25;
      double v39 = v95;
      double v40 = v96;
      uint64_t v41 = v94;
      double v42 = v25;
      goto LABEL_14;
    }
    double rect = v25;
    double v43 = *MEMORY[0x1E4F1DB20];
    double v35 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
    double v44 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
    CGFloat v37 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
    uint64_t v38 = [v14 asyncCapableInputDelegate];
    if (v38)
    {
      int v45 = [v14 hasMarkedText];

      if (v45)
      {
        [v14 textLastRect];
        double v47 = v46;
        double v49 = v48;
        double v51 = v50;
        double v53 = v52;
        [v14 textFirstRect];
        v103.origin.CGFloat x = v54;
        v103.origin.CGFloat y = v55;
        v103.size.CGFloat width = v56;
        v103.size.CGFloat height = v57;
        v99.origin.CGFloat x = v47;
        v99.origin.CGFloat y = v49;
        v99.size.CGFloat width = v51;
        v99.size.CGFloat height = v53;
        CGFloat y = v103.origin.y;
        CGFloat x = v103.origin.x;
        CGFloat height = v103.size.height;
        CGFloat width = v103.size.width;
        if (!CGRectEqualToRect(v99, v103))
        {
          v100.origin.CGFloat x = v47;
          v100.origin.CGFloat y = v49;
          v100.size.CGFloat width = v51;
          v100.size.CGFloat height = v53;
          v104.origin.CGFloat y = y;
          v104.origin.CGFloat x = x;
          v104.size.CGFloat height = height;
          v104.size.CGFloat width = width;
          CGRect v101 = CGRectUnion(v100, v104);
          double v47 = v101.origin.x;
          double v49 = v101.origin.y;
          double v51 = v101.size.width;
          double v53 = v101.size.height;
        }
        double v58 = _convertFromInputDelegateRect(v10, v47, v49, v51, v53);
        CGFloat v90 = v59;
        CGFloat v92 = v58;
        double v35 = v60;
        CGFloat v37 = v61;
        double v42 = rect;
        LODWORD(v3_Block_object_dispose(&a9, 8) = v35 != rect;
        double v39 = v95;
        double v40 = v96;
        uint64_t v41 = v94;
LABEL_14:
        double v62 = v40;
        if (!CGRectIsNull(*(CGRect *)&v39))
        {
          v102.size.CGFloat width = v90;
          v102.origin.CGFloat x = v92;
          v102.origin.CGFloat y = v35;
          v102.size.CGFloat height = v37;
          if (((CGRectIsNull(v102) | ~v38) & (a6 > v40)) != 0) {
            a6 = v40;
          }
        }
        if (v38)
        {
          int64_t v63 = textFont();
          _textSize(v9, v63);

LABEL_30:
          goto LABEL_31;
        }
LABEL_19:
        uint64_t v64 = textFont();
        double v65 = _textSize(v9, v64);
        double v67 = v66;

        double v68 = _convertFromInputDelegateRect(v10, 0.0, 0.0, v65, v67);
        if ((a6 <= v69 || v69 <= 0.0) && v69 > a6)
        {
          long long v70 = objc_msgSend(v12, "selectedTextRange", v68);
          uint64_t v71 = [v70 end];

          if (v71)
          {
            int64_t v72 = [v12 selectedTextRange];
            int v73 = [v72 end];
            [v12 caretRectForPosition:v73];
            double v97 = v74;
            double v76 = v75;
            double v78 = v77;
            double v80 = v79;

            double v81 = v97;
          }
          else
          {
            double v81 = *MEMORY[0x1E4F1DB28];
            double v76 = *(double *)(MEMORY[0x1E4F1DB28] + 8);
            double v78 = *(double *)(MEMORY[0x1E4F1DB28] + 16);
            double v80 = *(double *)(MEMORY[0x1E4F1DB28] + 24);
          }
          double v98 = v81;
          double v82 = v76;
          double v83 = v78;
          double v84 = v80;
          if (!CGRectIsEmpty(*(CGRect *)&v81))
          {
            unint64_t v85 = [v12 textInputView];

            if (v10)
            {
              if (v85) {
                _convertFromInputDelegateRect(v10, v98, v76, v78, v80);
              }
            }
          }
        }
        goto LABEL_30;
      }
      CGFloat v90 = v44;
      CGFloat v92 = v43;
      LODWORD(v3_Block_object_dispose(&a9, 8) = 0;
    }
    else
    {
      CGFloat v90 = v44;
      CGFloat v92 = v43;
    }
    double v39 = v95;
    double v40 = v96;
    uint64_t v41 = v94;
    double v42 = rect;
    goto LABEL_14;
  }
LABEL_31:

  return a3;
}

double _convertFromInputDelegateRect(void *a1, double a2, double a3, double a4, double a5)
{
  id v9 = a1;
  id v10 = +[UIKeyboardImpl activeInstance];
  long long v11 = [v10 inputDelegate];

  long long v12 = [v11 textInputView];

  if (v9 && v12)
  {
    long long v13 = +[UIKeyboardImpl activeInstance];
    long long v14 = [v11 textInputView];
    objc_msgSend(v13, "convertRectToAutocorrectRect:delegateView:container:", v14, v9, a2, a3, a4, a5);
    a2 = v15;
  }
  return a2;
}

double _textSize(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (v3 && [v3 length])
  {
    objc_msgSend(v3, "_legacy_sizeWithFont:forWidth:lineBreakMode:", v4, 2, 3.40282347e38);
    double v6 = v5;
  }
  else
  {
    objc_msgSend(@" ", "_legacy_sizeWithFont:forWidth:lineBreakMode:", v4, 2, 3.40282347e38);
    double v6 = 0.0;
  }

  return v6;
}

id _SharedAssertionLogger()
{
  if (qword_1EB261620 != -1) {
    dispatch_once(&qword_1EB261620, &__block_literal_global_307);
  }
  id v0 = (void *)_MergedGlobals_1112;
  return v0;
}

void sub_186156970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void UIKeyboardHasCompletedBuddy()
{
  if (!_MergedGlobals_53)
  {
    uint64_t v4 = 0;
    double v5 = &v4;
    uint64_t v6 = 0x2020000000;
    id v0 = (uint64_t (*)(void))off_1EB25A7D0;
    id v7 = off_1EB25A7D0;
    if (!off_1EB25A7D0)
    {
      v3[0] = MEMORY[0x1E4F143A8];
      v3[1] = 3221225472;
      v3[2] = __getBYSetupAssistantHasCompletedInitialRunSymbolLoc_block_invoke;
      v3[3] = &unk_1E52D9900;
      v3[4] = &v4;
      __getBYSetupAssistantHasCompletedInitialRunSymbolLoc_block_invoke(v3);
      id v0 = (uint64_t (*)(void))v5[3];
    }
    _Block_object_dispose(&v4, 8);
    if (v0)
    {
      _MergedGlobals_53 = v0();
    }
    else
    {
      uint64_t v1 = [MEMORY[0x1E4F28B00] currentHandler];
      double v2 = [NSString stringWithUTF8String:"BOOL UIBYSetupAssistantHasCompletedInitialRun(void)"];
      objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"UIKeyboardInputModeController.m", 109, @"%s", dlerror());

      __break(1u);
    }
  }
}

void sub_186156CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186157758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18615A4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _UITextInputTraitsAllowedInputMode(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 isAllowedForTraits:v4])
  {
    unsigned int v5 = [v4 keyboardType];
    uint64_t v6 = 1;
    if (v5 <= 0xB && ((1 << v5) & 0x930) != 0 || v5 == 127) {
      uint64_t v6 = _AllowedNumberPadInputMode(v3);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }

  return v6;
}

uint64_t _UITextInputTraitsAllowedInputModeExceptEmoji(void *a1, void *a2)
{
  id v3 = a1;
  if (_UITextInputTraitsAllowedInputMode(v3, a2)) {
    uint64_t v4 = [v3 isEmojiInputMode] ^ 1;
  }
  else {
    uint64_t v4 = 0;
  }

  return v4;
}

uint64_t _UITextInputTraitsAllowedInputModeExcludeLastAndCurrentInputModes(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  unsigned int v5 = +[UIKeyboardInputModeController sharedInputModeController];
  uint64_t v6 = [v5 lastUsedInputMode];
  if ([v3 isEqual:v6])
  {
    uint64_t v7 = 0;
  }
  else
  {
    char v8 = [v5 currentInputMode];
    if (([v3 isEqual:v8] & 1) != 0 || !objc_msgSend(v3, "isAllowedForTraits:", v4))
    {
      uint64_t v7 = 0;
    }
    else
    {
      unsigned int v9 = [v4 keyboardType];
      uint64_t v7 = 1;
      if (v9 <= 0xB && ((1 << v9) & 0x930) != 0 || v9 == 127) {
        uint64_t v7 = _AllowedNumberPadInputMode(v3);
      }
    }
  }
  return v7;
}

uint64_t _UITextInputTraitsAllowedInputModeExcludeLastAndCurrentInputModesAndEmoji(void *a1, void *a2)
{
  id v3 = a1;
  if (_UITextInputTraitsAllowedInputModeExcludeLastAndCurrentInputModes(v3, a2)) {
    uint64_t v4 = [v3 isEmojiInputMode] ^ 1;
  }
  else {
    uint64_t v4 = 0;
  }

  return v4;
}

uint64_t _UIKeyboardInputModeDefaultLayoutIsCarPlayEnabled(void *a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  double v2 = [v1 identifier];
  BOOL IsSecure = UIKeyboardLayoutDefaultTypeForInputModeIsSecure(v2);

  if (!IsSecure)
  {
    uint64_t v4 = [v1 primaryLanguage];
    char v5 = [v4 hasPrefix:@"ko"];

    if ((v5 & 1) == 0)
    {
      uint64_t v6 = [v1 identifier];
      uint64_t v7 = UIKeyboardPhoneLayoutToUseForCarPlayInputMode(v6);

      if (!v7)
      {
LABEL_15:
        uint64_t v18 = 0;
        goto LABEL_20;
      }
    }
  }
  char v8 = [v1 softwareLayout];
  int v9 = [v8 isEqualToString:@"Thai-Four-Row"];

  if (v9)
  {
    id v10 = (id)UIKeyboardActiveInputModes;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    uint64_t v11 = [v10 countByEnumeratingWithState:&v20 objects:v24 count:16];
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v13 = *(void *)v21;
      char v14 = 1;
      do
      {
        for (uint64_t i = 0; i != v12; ++i)
        {
          if (*(void *)v21 != v13) {
            objc_enumerationMutation(v10);
          }
          uint64_t v16 = KBStarLayoutString(*(void **)(*((void *)&v20 + 1) + 8 * i));
          int v17 = [v16 isEqualToString:@"Thai"];

          if (v17) {
            char v14 = 0;
          }
        }
        uint64_t v12 = [v10 countByEnumeratingWithState:&v20 objects:v24 count:16];
      }
      while (v12);

      if ((v14 & 1) == 0) {
        goto LABEL_15;
      }
    }
    else
    {
    }
  }
  if (UIKeyboardCarPlayFiveRowKeyboardEnabled) {
    uint64_t v18 = 1;
  }
  else {
    uint64_t v18 = UIKeyboardIsFiveRowKeyboard(v1) ^ 1;
  }
LABEL_20:

  return v18;
}

void sub_18615E328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __userNotificationCallback(uint64_t a1, uint64_t a2)
{
  id v3 = +[UIKeyboardInputModeController sharedInputModeController];
  id v4 = v3;
  if (a2) {
    [v3 releaseAddKeyboardNotification];
  }
  else {
    [v3 didAcceptAddKeyboardInputMode];
  }
}

void sub_186160EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186163700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getTUIKeyboardInputModeIconRendererClass_0()
{
  uint64_t v4 = 0;
  char v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)getTUIKeyboardInputModeIconRendererClass_softClass_0;
  uint64_t v7 = getTUIKeyboardInputModeIconRendererClass_softClass_0;
  if (!getTUIKeyboardInputModeIconRendererClass_softClass_0)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getTUIKeyboardInputModeIconRendererClass_block_invoke_0;
    v3[3] = &unk_1E52D9900;
    v3[4] = &v4;
    __getTUIKeyboardInputModeIconRendererClass_block_invoke_0((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1861637E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getBYSetupAssistantHasCompletedInitialRunSymbolLoc_block_invoke(void *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1EB25A7D8)
  {
    v5[1] = (void *)MEMORY[0x1E4F143A8];
    v5[2] = (void *)3221225472;
    v5[3] = __SetupAssistantLibraryCore_block_invoke;
    void v5[4] = &__block_descriptor_40_e5_v8__0l;
    void v5[5] = v5;
    long long v6 = xmmword_1E52F3598;
    uint64_t v7 = 0;
    qword_1EB25A7D8 = _sl_dlopen();
  }
  double v2 = (void *)qword_1EB25A7D8;
  if (!qword_1EB25A7D8)
  {
    a1 = [MEMORY[0x1E4F28B00] currentHandler];
    double v2 = [NSString stringWithUTF8String:"void *SetupAssistantLibrary(void)"];
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, @"UIKeyboardInputModeController.m", 108, @"%s", v5[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v3 = v5[0];
  if (v5[0]) {
LABEL_7:
  }
    free(v3);
  uint64_t result = dlsym(v2, "BYSetupAssistantHasCompletedInitialRun");
  *(void *)(*(void *)(a1[4] + 8) + 24) = result;
  off_1EB25A7D0 = *(_UNKNOWN **)(*(void *)(a1[4] + 8) + 24);
  return result;
}

uint64_t __SetupAssistantLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25A7D8 = result;
  return result;
}

uint64_t __AssistantServicesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  AssistantServicesLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

void *__getAFDictationRestrictedSymbolLoc_block_invoke(uint64_t a1)
{
  double v2 = AssistantServicesLibrary();
  uint64_t result = dlsym(v2, "AFDictationRestricted");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAFDictationRestrictedSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t _AllowedNumberPadInputMode(void *a1)
{
  id v1 = a1;
  double v2 = +[UIDevice currentDevice];
  unint64_t v3 = [v2 userInterfaceIdiom];

  if (v3 > 1)
  {
    uint64_t v6 = 1;
  }
  else
  {
    id v4 = (id)UIKeyboardActiveInputModes;
    char v5 = [v1 identifier];
    uint64_t v6 = [v4 containsObject:v5];
  }
  return v6;
}

void *__getSBUserNotificationDefaultButtonTagSymbolLoc_block_invoke(uint64_t a1)
{
  double v2 = SpringBoardServicesLibrary_0();
  uint64_t result = dlsym(v2, "SBUserNotificationDefaultButtonTag");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25A7E0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __SpringBoardServicesLibraryCore_block_invoke_3()
{
  uint64_t result = _sl_dlopen();
  SpringBoardServicesLibraryCore_frameworkLibrary_0 = result;
  return result;
}

void *__getSBUserNotificationAllowInSetupKeySymbolLoc_block_invoke(uint64_t a1)
{
  double v2 = SpringBoardServicesLibrary_0();
  uint64_t result = dlsym(v2, "SBUserNotificationAllowInSetupKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25A7E8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __SafariServicesLibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25A7F0 = result;
  return result;
}

Class __getEMFEmojiSearchEngineClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB25A800)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    void v6[3] = __EmojiFoundationLibraryCore_block_invoke_0;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E52F35F8;
    uint64_t v8 = 0;
    qword_1EB25A800 = _sl_dlopen();
  }
  if (!qword_1EB25A800)
  {
    unint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    id v4 = [NSString stringWithUTF8String:"void *EmojiFoundationLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIKeyboardInputModeController.m", 100, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("EMFEmojiSearchEngine");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    unint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    char v5 = [NSString stringWithUTF8String:"Class getEMFEmojiSearchEngineClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIKeyboardInputModeController.m", 101, @"Unable to find class %s", "EMFEmojiSearchEngine");

LABEL_10:
    __break(1u);
  }
  qword_1EB25A7F8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __EmojiFoundationLibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25A800 = result;
  return result;
}

void __getTUIKeyboardInputModeIconRendererClass_block_invoke_0(uint64_t a1)
{
  TextInputUILibrary_4();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("TUIKeyboardInputModeIconRenderer");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getTUIKeyboardInputModeIconRendererClass_softClass_0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    double v2 = [MEMORY[0x1E4F28B00] currentHandler];
    unint64_t v3 = [NSString stringWithUTF8String:"Class getTUIKeyboardInputModeIconRendererClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIKeyboardInputModeController.m", 87, @"Unable to find class %s", "TUIKeyboardInputModeIconRenderer");

    __break(1u);
  }
}

void TextInputUILibrary_4()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!TextInputUILibraryCore_frameworkLibrary_4)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __TextInputUILibraryCore_block_invoke_8;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E52F3610;
    uint64_t v5 = 0;
    TextInputUILibraryCore_frameworkLibrary_4 = _sl_dlopen();
  }
  if (!TextInputUILibraryCore_frameworkLibrary_4)
  {
    id v1 = [MEMORY[0x1E4F28B00] currentHandler];
    double v2 = [NSString stringWithUTF8String:"void *TextInputUILibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"UIKeyboardInputModeController.m", 86, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __TextInputUILibraryCore_block_invoke_8()
{
  uint64_t result = _sl_dlopen();
  TextInputUILibraryCore_frameworkLibrary_4 = result;
  return result;
}

void __getTUIKeyboardInputModeIconRendererConfigurationClass_block_invoke_0(uint64_t a1)
{
  TextInputUILibrary_4();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("TUIKeyboardInputModeIconRendererConfiguration");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getTUIKeyboardInputModeIconRendererConfigurationClass_softClass_0 = *(void *)(*(void *)(*(void *)(a1 + 32)
                                                                                              + 8)
                                                                                  + 24);
  }
  else
  {
    double v2 = [MEMORY[0x1E4F28B00] currentHandler];
    unint64_t v3 = [NSString stringWithUTF8String:"Class getTUIKeyboardInputModeIconRendererConfigurationClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIKeyboardInputModeController.m", 88, @"Unable to find class %s", "TUIKeyboardInputModeIconRendererConfiguration");

    __break(1u);
  }
}

id UIKeyboardGetCurrentUILanguage()
{
  id v0 = (void *)UIKeyboardCurrentUILanguage;
  if (!UIKeyboardCurrentUILanguage)
  {
    id v1 = [MEMORY[0x1E4F1CA20] preferredLanguages];
    if ([v1 count])
    {
      double v2 = [v1 objectAtIndex:0];
    }
    else
    {
      double v2 = @"intl";
    }
    uint64_t v3 = [(__CFString *)v2 copy];
    long long v4 = (void *)UIKeyboardCurrentUILanguage;
    UIKeyboardCurrentUILanguage = v3;

    id v0 = (void *)UIKeyboardCurrentUILanguage;
  }
  return v0;
}

void UIKeyboardSetCurrentUILanguage(void *a1)
{
  uint64_t v1 = [a1 copy];
  double v2 = (void *)UIKeyboardCurrentUILanguage;
  UIKeyboardCurrentUILanguage = v1;
}

void UIKeyboardSetCurrentInputMode(void *a1)
{
  id v1 = a1;
  id v3 = +[UIKeyboardInputModeController sharedInputModeController];
  double v2 = [v3 inputModeWithIdentifier:v1];

  [v3 updateCurrentInputMode:v2];
}

id KBStarLayoutString(void *a1)
{
  id v1 = a1;
  NativeDeviceIdiouint64_t m = UIKeyboardGetNativeDeviceIdiom();
  id v3 = KBStarLayoutStringForIdiom(NativeDeviceIdiom, v1);

  return v3;
}

uint64_t UIKeyboardAutocorrectionRequiredForInputMode(void *a1)
{
  id v1 = a1;
  if (UIKeyboardShowsTransliterationCandidatesForInputMode())
  {
    uint64_t v2 = 1;
  }
  else
  {
    id v3 = (void *)UIKeyboardAutocorrectionRequiredForInputMode___dict;
    if (!UIKeyboardAutocorrectionRequiredForInputMode___dict)
    {
      id v4 = objc_alloc(MEMORY[0x1E4F1CA60]);
      uint64_t v5 = objc_msgSend(v4, "initWithObjectsAndKeys:", @"zh_Hans-Pinyin", MEMORY[0x1E4F1CC38], @"zh_Hant-Pinyin", MEMORY[0x1E4F1CC38], @"zh_Hant-Zhuyin", MEMORY[0x1E4F1CC38], @"ja_JP-Romaji", MEMORY[0x1E4F1CC38], @"ja_JP-Kana", 0);
      uint64_t v6 = (void *)UIKeyboardAutocorrectionRequiredForInputMode___dict;
      UIKeyboardAutocorrectionRequiredForInputMode___dict = v5;

      id v3 = (void *)UIKeyboardAutocorrectionRequiredForInputMode___dict;
    }
    long long v7 = TIInputModeGetNormalizedIdentifier();
    uint64_t v8 = [v3 objectForKey:v7];

    if (v8) {
      uint64_t v2 = [v8 BOOLValue];
    }
    else {
      uint64_t v2 = 0;
    }
  }
  return v2;
}

uint64_t UIKeyboardShowsTransliterationCandidatesForInputMode()
{
  id v0 = TIInputModeGetNormalizedIdentifier();
  id v1 = TIGetInputModeProperties();
  uint64_t v2 = [v1 objectForKey:*MEMORY[0x1E4FAE718]];
  uint64_t v3 = [v2 BOOLValue];

  return v3;
}

uint64_t UIKeyboardUIPreferStringOverImageForInputMode(void *a1)
{
  id v1 = a1;
  uint64_t v2 = TIInputModeGetRegion();
  uint64_t v3 = TIInputModeGetBaseLanguage();
  int v4 = [v3 isEqualToString:@"en"];

  if (!v4
    || ([v2 isEqualToString:@"GB"] & 1) != 0
    || ([v2 isEqualToString:@"JP"] & 1) != 0)
  {
    uint64_t v5 = 0;
  }
  else
  {
    long long v7 = +[UIKeyboardImpl keyboardScreen];
    uint64_t v8 = +[UIKeyboard activeKeyboard];
    uint64_t v9 = +[UIKBScreenTraits traitsWithScreen:orientation:](UIKBScreenTraits, "traitsWithScreen:orientation:", v7, [v8 interfaceOrientation]);

    uint64_t v10 = UIKeyboardComputeKeyboardIdiomFromScreenTraits(v9, [v9 idiom], 0);
    uint64_t v11 = KBStarLayoutString(v1);
    uint64_t v12 = v11;
    if (v10 == 23)
    {
      if (([v11 isEqualToString:@"AZERTY"] & 1) != 0
        || ([v12 isEqualToString:@"QWERTZ"] & 1) != 0)
      {
        uint64_t v5 = 0;
      }
      else
      {
        uint64_t v5 = [v12 isEqualToString:@"QWERTY-ISO"] ^ 1;
      }
    }
    else
    {
      uint64_t v5 = 1;
    }
  }
  return v5;
}

uint64_t UIKeyboardComputeKeyboardIdiomFromScreenTraits(void *a1, uint64_t a2, char a3)
{
  id v5 = a1;
  uint64_t v6 = v5;
  if (a3)
  {
    uint64_t v7 = a2;
  }
  else
  {
    uint64_t v8 = (char *)&UIKeyboardComputeKeyboardIdiomFromScreenTraits_iPhoneWidthFilterTable;
    if (a2) {
      uint64_t v8 = 0;
    }
    if (a2 == 1) {
      uint64_t v9 = (char *)&UIKeyboardComputeKeyboardIdiomFromScreenTraits_iPadWidthFilterTable;
    }
    else {
      uint64_t v9 = v8;
    }
    if (a2 == 1) {
      uint64_t v10 = 6;
    }
    else {
      uint64_t v10 = 2 * (a2 == 0);
    }
    uint64_t v7 = a2;
    if (v9)
    {
      uint64_t v11 = [v5 screen];
      [v11 _referenceBounds];
      double v13 = v12;
      double v15 = v14;

      uint64_t v16 = [v6 screen];
      [v16 scale];
      double v17 = 1.0;
      if (v18 > 0.0)
      {
        double v19 = [v6 screen];
        [v19 scale];
        double v17 = v20;
      }
      long long v21 = [v6 screen];
      [v21 nativeBounds];
      double v23 = v22;

      if (v15 * v17 > v23)
      {
        double v24 = [v6 screen];
        [v24 nativeBounds];
        double v26 = v25;
        double v28 = v27;

        double v15 = v28 / v17;
        double v13 = v26 / v17;
      }
      uint64_t v7 = a2;
      if (v10)
      {
        double v29 = (double *)(v9 + 16);
        uint64_t v7 = a2;
        do
        {
          double v30 = *(v29 - 2);
          double v31 = *(v29 - 1);
          if (v15 + v13 >= v30 + v31 && (v15 != v31 || v13 != v30)) {
            uint64_t v7 = *(void *)v29;
          }
          v29 += 3;
          --v10;
        }
        while (v10);
      }
    }
    if (a2 == 1)
    {
      double v33 = +[UIKeyboardPreferencesController sharedPreferencesController];
      double v34 = [v33 preferencesActions];
      char v35 = [v34 enableProKeyboard];

      if (v35)
      {
        uint64_t v7 = 23;
      }
      else if (v7 == 24)
      {
        if (qword_1EB2616B0 != -1) {
          dispatch_once(&qword_1EB2616B0, &__block_literal_global_432);
        }
        if (_MergedGlobals_1113) {
          uint64_t v7 = 26;
        }
        else {
          uint64_t v7 = 24;
        }
      }
    }
  }

  return v7;
}

uint64_t UIKeyboardPredictionEnabledForCurrentInputMode()
{
  id v0 = UIKeyboardGetCurrentInputMode();
  id v1 = TIInputModeGetNormalizedIdentifier();

  uint64_t v2 = TIGetInputModeProperties();
  uint64_t v3 = [v2 objectForKey:*MEMORY[0x1E4FAE698]];
  uint64_t v4 = [v3 BOOLValue];

  return v4;
}

uint64_t UIKeyboardShowsTransliterationCandidatesForCurrentInputMode()
{
  id v0 = UIKeyboardGetCurrentInputMode();
  uint64_t v1 = UIKeyboardShowsTransliterationCandidatesForInputMode();

  return v1;
}

uint64_t UIKeyboardCurrentInputModeIsKoreanEnglishBilingual()
{
  id v0 = +[UIKeyboardInputModeController sharedInputModeController];
  uint64_t v1 = [v0 currentInputMode];
  uint64_t IsKoreanEnglishBilingual = UIKeyboardInputModeIsKoreanEnglishBilingual(v1);

  return IsKoreanEnglishBilingual;
}

uint64_t UIKeyboardInputModeIsKoreanEnglishBilingual(void *a1)
{
  uint64_t v1 = [a1 softwareLayout];
  if (_os_feature_enabled_impl()) {
    uint64_t v2 = [v1 isEqualToString:@"Korean-With-QWERTY"];
  }
  else {
    uint64_t v2 = 0;
  }

  return v2;
}

uint64_t UIKeyboardNeverShowCandidateBarForCurrentInputMode()
{
  id v0 = UIKeyboardGetCurrentInputMode();
  uint64_t v1 = TIInputModeGetNormalizedIdentifier();

  uint64_t v2 = TIGetInputModeProperties();
  uint64_t v3 = [v2 objectForKey:@"UIKeyboardNeverShowCandidateBar"];
  uint64_t v4 = [v3 BOOLValue];

  return v4;
}

uint64_t UIKeyboardPredictionEnabledForInputModes(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v1 = a1;
  uint64_t v2 = [v1 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v14;
    uint64_t v5 = *MEMORY[0x1E4FAE698];
    while (2)
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v14 != v4) {
          objc_enumerationMutation(v1);
        }
        uint64_t v7 = TIInputModeGetNormalizedIdentifier();
        uint64_t v8 = TIGetInputModeProperties();
        uint64_t v9 = objc_msgSend(v8, "objectForKey:", v5, v13);
        char v10 = [v9 BOOLValue];

        if (v10)
        {
          uint64_t v11 = 1;
          goto LABEL_11;
        }
        ++v6;
      }
      while (v3 != v6);
      uint64_t v3 = [v1 countByEnumeratingWithState:&v13 objects:v17 count:16];
      if (v3) {
        continue;
      }
      break;
    }
  }
  uint64_t v11 = 0;
LABEL_11:

  return v11;
}

uint64_t UIKeyboardHasWordNgramModelForInputMode()
{
  id v0 = TIInputModeGetNormalizedIdentifier();
  id v1 = TIGetInputModeProperties();
  uint64_t v2 = [v1 objectForKey:*MEMORY[0x1E4FAE6B0]];
  uint64_t v3 = [v2 BOOLValue];

  return v3;
}

id UIKeyboardInputModeGetLocalizedVariant(void *a1)
{
  id v1 = a1;
  uint64_t v2 = TIInputModeGetVariant();
  if ([v2 length])
  {
    uint64_t v3 = [NSString stringWithFormat:@"UI-%@", v2];
    uint64_t v4 = TICanonicalInputModeName();
    uint64_t v5 = _UIKitBundle();
    uint64_t v6 = UIKeyboardLocalizedString(v3, v4, v5, v2);
  }
  else
  {
    uint64_t v6 = 0;
  }

  return v6;
}

id UIKeyboardInputModesMatchingMode(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = TIInputModeGetNormalizedIdentifier();
  uint64_t v4 = (void *)MEMORY[0x1E4F28F60];
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = __UIKeyboardInputModesMatchingMode_block_invoke;
  _OWORD v9[3] = &unk_1E52F3688;
  id v10 = v3;
  id v5 = v3;
  uint64_t v6 = [v4 predicateWithBlock:v9];
  uint64_t v7 = [v2 filteredArrayUsingPredicate:v6];

  return v7;
}

uint64_t __UIKeyboardInputModesMatchingMode_block_invoke(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v2 = TIInputModeGetNormalizedIdentifier();
  uint64_t v3 = [v1 isEqualToString:v2];

  return v3;
}

id UIKeyboardInputModeWithNewSWLayout(uint64_t a1, void *a2)
{
  id v2 = (void *)MEMORY[0x1E4F1CA60];
  id v3 = a2;
  uint64_t v4 = TIInputModeGetComponentsFromIdentifier();
  id v5 = [v2 dictionaryWithDictionary:v4];

  [v5 setObject:v3 forKey:@"sw"];
  uint64_t v6 = UIKeyboardInputModeGetIdentifierFromComponents(v5);

  return v6;
}

id UIKeyboardInputModeWithNewHWLayout(uint64_t a1, void *a2)
{
  id v2 = (void *)MEMORY[0x1E4F1CA60];
  id v3 = a2;
  uint64_t v4 = TIInputModeGetComponentsFromIdentifier();
  id v5 = [v2 dictionaryWithDictionary:v4];

  [v5 setObject:v3 forKey:@"hw"];
  uint64_t v6 = UIKeyboardInputModeGetIdentifierFromComponents(v5);

  return v6;
}

uint64_t UIKeyboardInputModesEqual(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 length] && objc_msgSend(v4, "length")) {
    uint64_t v5 = [v3 isEqualToString:v4];
  }
  else {
    uint64_t v5 = 0;
  }

  return v5;
}

id UIKeyboardLocalizedInputModeName(void *a1)
{
  id v1 = a1;
  if ([(__CFString *)v1 hasPrefix:@"emoji"])
  {
    id v2 = _UIKitBundle();
    id v3 = [v2 localizedStringForKey:@"emoji" value:@"Emoji" table:@"Localizable"];
  }
  else
  {
    if (!v1) {
      id v1 = @"intl";
    }
    id v4 = (void *)MEMORY[0x1E4F28E78];
    uint64_t v5 = TIInputModeGetNormalizedIdentifier();
    id v2 = [v4 stringWithFormat:@"UI-%@", v5];

    uint64_t v6 = UIKeyboardLocalizedString(v2, v1, 0, 0);
    if ([v6 length])
    {
      id v7 = v6;
      id v3 = v7;
    }
    else
    {
      UIKeyboardLocalizedString(@"UI-LanguageIndicator", v1, 0, 0);
      id v7 = (id)objc_claimAutoreleasedReturnValue();

      if ([v7 length])
      {
        uint64_t v8 = UIKeyboardInputModeGetLocalizedVariant(v1);
        if ([v8 length])
        {
          uint64_t v9 = [NSString stringWithFormat:@"%@ %@", v7, v8];

          id v7 = (id)v9;
        }
        id v7 = v7;

        id v3 = v7;
      }
      else
      {
        CFStringRef CanonicalLanguageIdentifierFromString = CFLocaleCreateCanonicalLanguageIdentifierFromString(0, v1);
        CFLocaleRef v11 = CFLocaleCreate(0, CanonicalLanguageIdentifierFromString);
        CFStringRef v12 = CFLocaleCopyDisplayNameForPropertyValue(v11, (CFLocaleKey)*MEMORY[0x1E4F1D210], CanonicalLanguageIdentifierFromString);
        long long v13 = (__CFString *)v12;
        if (v12 && CFStringGetLength(v12))
        {
          long long v14 = [(__CFString *)v13 capitalizedString];
          uint64_t v15 = objc_msgSend(v14, "rangeOfString:options:", @" ("), 2;
          if (v15 != 0x7FFFFFFFFFFFFFFFLL)
          {
            uint64_t v16 = [v14 substringToIndex:v15];

            long long v14 = (void *)v16;
          }
          id v3 = (void *)[v14 copy];
        }
        else
        {
          if (CanonicalLanguageIdentifierFromString && CFStringGetLength(CanonicalLanguageIdentifierFromString)) {
            double v17 = (__CFString *)CanonicalLanguageIdentifierFromString;
          }
          else {
            double v17 = v1;
          }
          id v3 = (void *)[(__CFString *)v17 copy];
        }
        if (v11) {
          CFRelease(v11);
        }
        if (CanonicalLanguageIdentifierFromString) {
          CFRelease(CanonicalLanguageIdentifierFromString);
        }
        if (v13) {
          CFRelease(v13);
        }
      }
    }
  }
  return v3;
}

id TextInputUIBundle()
{
  if (qword_1EB261638 != -1) {
    dispatch_once(&qword_1EB261638, &__block_literal_global_309);
  }
  id v0 = (void *)qword_1EB261630;
  return v0;
}

void __TextInputUIBundle_block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F28B50] bundleWithPath:@"/System/Library/PrivateFrameworks/TextInputUI.framework"];
  id v1 = (void *)qword_1EB261630;
  qword_1EB261630 = v0;
}

id UIKeyboardSettingsBundle()
{
  if (qword_1EB261648 != -1) {
    dispatch_once(&qword_1EB261648, &__block_literal_global_192_1);
  }
  uint64_t v0 = (void *)qword_1EB261640;
  return v0;
}

void __UIKeyboardSettingsBundle_block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F28B50] bundleWithPath:@"/System/Library/PreferenceBundles/KeyboardSettings.bundle"];
  id v1 = (void *)qword_1EB261640;
  qword_1EB261640 = v0;
}

id UIKeyboardLocalizedSWLayoutName(void *a1)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (qword_1EB261658 != -1) {
    dispatch_once(&qword_1EB261658, &__block_literal_global_197);
  }
  id v2 = [(id)qword_1EB261650 objectForKey:v1];
  if (v2)
  {
    id v3 = v2;
  }
  else
  {
    id v4 = TIInputModeGetLanguageWithRegion();
    uint64_t v5 = (void *)MEMORY[0x1E4F28B50];
    uint64_t v6 = UIKeyboardSettingsBundle();
    id v7 = [v6 localizations];
    v19[0] = v4;
    uint64_t v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v19 count:1];
    uint64_t v9 = [MEMORY[0x1E4F1CA20] _deviceLanguage];
    id v10 = [v8 arrayByAddingObject:v9];
    CFLocaleRef v11 = [v5 preferredLocalizationsFromArray:v7 forPreferences:v10];

    if (![v11 count]) {
      goto LABEL_7;
    }
    CFStringRef v12 = UIKeyboardSettingsBundle();
    long long v13 = KBStarLayoutString(v1);
    long long v14 = [v11 firstObject];
    uint64_t v15 = [v12 localizedStringForKey:v13 value:0 table:@"KeyboardLayouts" localization:v14];

    if (!v15)
    {
LABEL_7:
      uint64_t v16 = UIKeyboardSettingsBundle();
      double v17 = KBStarLayoutString(v1);
      uint64_t v15 = [v16 localizedStringForKey:v17 value:&stru_1ED0E84C0 table:@"KeyboardLayouts"];
    }
    [(id)qword_1EB261650 setObject:v15 forKey:v1];
    id v3 = v15;
  }
  return v3;
}

void __UIKeyboardLocalizedSWLayoutName_block_invoke()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  id v1 = (void *)qword_1EB261650;
  qword_1EB261650 = (uint64_t)v0;
}

id UIKeyboardLocalizedDictationDisplayName(void *a1)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (qword_1EB261668 != -1) {
    dispatch_once(&qword_1EB261668, &__block_literal_global_203_1);
  }
  id v2 = +[UIKeyboardInputModeController sharedInputModeController];
  id v3 = [v2 keyboardLanguageForDictationLanguage:v1];

  if (([v1 isEqualToString:@"zh_HK"] & 1) != 0
    || [v1 isEqualToString:@"yue_Hant"])
  {

    id v3 = @"zh_HK";
    goto LABEL_6;
  }
  if (v3)
  {
LABEL_6:
    id v4 = v1;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    uint64_t v5 = +[UIKeyboardInputModeController sharedInputModeController];
    uint64_t v6 = [v5 activeDictationSupportedInputModeIdentifiers];

    uint64_t v7 = [v6 countByEnumeratingWithState:&v38 objects:v43 count:16];
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)v39;
      while (2)
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          if (*(void *)v39 != v9) {
            objc_enumerationMutation(v6);
          }
          if (([(__CFString *)v3 isEqualToString:*(void *)(*((void *)&v38 + 1) + 8 * i)] & 1) == 0)
          {
            CFLocaleRef v11 = TIInputModeGetBaseLanguage();
            CFStringRef v12 = TIInputModeGetBaseLanguage();
            int v13 = [v11 isEqualToString:v12];

            if (v13)
            {
              uint64_t v15 = [v4 stringByAppendingString:@"_long"];

              int v14 = 1;
              goto LABEL_17;
            }
          }
        }
        uint64_t v8 = [v6 countByEnumeratingWithState:&v38 objects:v43 count:16];
        if (v8) {
          continue;
        }
        break;
      }
    }
    int v14 = 0;
    uint64_t v15 = v4;
LABEL_17:

    uint64_t v16 = &qword_1EB261000;
    double v17 = [(id)qword_1EB261660 objectForKey:v15];
    if (v17)
    {
      id v18 = v17;
LABEL_35:

      goto LABEL_36;
    }
    double v19 = (void *)MEMORY[0x1E4F28B50];
    double v20 = TextInputUIBundle();
    long long v21 = [v20 localizations];
    double v42 = v3;
    double v22 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v42 count:1];
    double v23 = [v19 preferredLocalizationsFromArray:v21 forPreferences:v22];

    if ([v23 count])
    {
      double v24 = TextInputUIBundle();
      double v25 = [v23 firstObject];
      double v26 = [v24 localizedStringForKey:v15 value:0 table:@"Dictation" localization:v25];

      if (v14)
      {
        double v27 = [MEMORY[0x1E4F1CA20] localeWithLocaleIdentifier:v4];
        double v28 = [v27 regionCode];
        double v29 = NSString;
        double v30 = [v27 localizedStringForCountryCode:v28];
        uint64_t v31 = objc_msgSend(v29, "localizedStringWithFormat:", v26, v30);

        uint64_t v16 = &qword_1EB261000;
        double v26 = (void *)v31;
      }
      if (v26 && ![v26 isEqualToString:v15]) {
        goto LABEL_33;
      }
    }
    else
    {
      double v26 = 0;
    }
    double v34 = +[UIKeyboardInputModeController sharedInputModeController];
    char v35 = [v34 inputModeWithIdentifier:v4];
    uint64_t v36 = [v35 extendedDisplayName];

    double v26 = (void *)v36;
    if (!v36)
    {
LABEL_34:
      id v18 = v26;

      goto LABEL_35;
    }
LABEL_33:
    [(id)v16[204] setObject:v26 forKey:v15];
    goto LABEL_34;
  }
  if (([v1 hasPrefix:@"zh"] & 1) != 0
    || [v1 hasSuffix:@"CN"])
  {
    int v32 = [v1 hasSuffix:@"CN"];
    double v33 = @"zh_Hant";
    if (v32) {
      double v33 = @"zh_Hans";
    }
    id v3 = v33;
    goto LABEL_6;
  }
  id v3 = +[UIKeyboardInputModeController sharedInputModeController];
  uint64_t v15 = [(__CFString *)v3 inputModeWithIdentifier:v1];
  id v18 = [v15 extendedDisplayName];
LABEL_36:

  return v18;
}

void __UIKeyboardLocalizedDictationDisplayName_block_invoke()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  id v1 = (void *)qword_1EB261660;
  qword_1EB261660 = (uint64_t)v0;
}

id UIKeyboardDictationDisplayNameInUILanguage(void *a1, uint64_t a2)
{
  id v3 = a1;
  id v4 = TextInputUIBundle();
  uint64_t v5 = [v4 localizedStringForKey:v3 value:&stru_1ED0E84C0 table:@"Dictation"];

  if (!v5 || [v5 isEqualToString:v3])
  {
    uint64_t v6 = [MEMORY[0x1E4F1CA20] baseLanguageFromLanguage:v3];
    uint64_t v7 = [MEMORY[0x1E4F1CA20] currentLocale];
    uint64_t v8 = [v7 localizedStringForLanguage:v6 context:a2];

    uint64_t v5 = (void *)v8;
  }

  return v5;
}

id UIKeyboardLanguageNameInUILanguage(void *a1)
{
  id v1 = a1;
  if (!v1)
  {
    id v3 = 0;
    goto LABEL_17;
  }
  if (qword_1EB261678 != -1) {
    dispatch_once(&qword_1EB261678, &__block_literal_global_229);
  }
  id v2 = [(id)qword_1EB261670 objectForKey:v1];
  if (!v2)
  {
    id v4 = (void *)MEMORY[0x1E4F28B50];
    uint64_t v5 = UIKeyboardSettingsBundle();
    uint64_t v6 = [v5 localizations];
    uint64_t v7 = [v4 preferredLocalizationsFromArray:v6];
    uint64_t v8 = [v7 firstObject];

    if (v8)
    {
      uint64_t v9 = UIKeyboardSettingsBundle();
      id v10 = [v9 localizedStringForKey:v1 value:0 table:@"KeyboardTitles" localization:v8];

      if (v10)
      {
        CFLocaleRef v11 = v10;
        if (![v10 isEqualToString:v1])
        {
LABEL_14:
          [(id)qword_1EB261670 setObject:v11 forKey:v1];
LABEL_15:
          id v3 = v11;

          goto LABEL_16;
        }
      }
    }
    else
    {
      id v10 = 0;
    }
    CFStringRef v12 = [MEMORY[0x1E4F1CA20] preferredLocale];
    CFLocaleRef v11 = [v12 displayNameForKey:*MEMORY[0x1E4F1C430] value:v1];

    if (!v11)
    {
      int v13 = +[UIKeyboardInputMode keyboardInputModeWithIdentifier:v1];
      CFLocaleRef v11 = [v13 displayName];

      if (!v11) {
        goto LABEL_15;
      }
    }
    goto LABEL_14;
  }
  id v3 = v2;
LABEL_16:

LABEL_17:
  return v3;
}

void __UIKeyboardLanguageNameInUILanguage_block_invoke()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  id v1 = (void *)qword_1EB261670;
  qword_1EB261670 = (uint64_t)v0;
}

id UIKeyboardGetActiveUserSelectableInputModes()
{
  return (id)UIKeyboardActiveUserSelectableInputModes;
}

id UIKeyboardGetActiveInputModes()
{
  return (id)UIKeyboardActiveInputModes;
}

void UIKeyboardSetActiveInputModes(void *a1)
{
  id v5 = a1;
  if ((id)UIKeyboardActiveInputModes != v5)
  {
    objc_storeStrong((id *)&UIKeyboardActiveInputModes, a1);
    id v2 = +[UIKeyboardInputModeController sharedInputModeController];
    uint64_t v3 = [v2 userSelectableInputModeIdentifiersFromInputModeIdentifiers:v5];

    id v4 = (void *)UIKeyboardActiveUserSelectableInputModes;
    UIKeyboardActiveUserSelectableInputModes = v3;
  }
}

id UIKeyboardGetActiveUniqueInputModesForHardwareKeyboard()
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v0 = (id)UIKeyboardActiveInputModes;
  id v1 = objc_msgSend(MEMORY[0x1E4F1CA70], "orderedSetWithCapacity:", objc_msgSend(v0, "count"));
  id v2 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithCapacity:", objc_msgSend(v0, "count"));
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  id obj = v0;
  uint64_t v3 = [obj countByEnumeratingWithState:&v27 objects:v32 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v28;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v28 != v5) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = *(void **)(*((void *)&v27 + 1) + 8 * i);
        uint64_t v8 = +[UIKeyboardInputModeController sharedInputModeController];
        uint64_t v9 = [v8 inputModeWithIdentifier:v7];

        if (![v9 isMultilingual]) {
          goto LABEL_11;
        }
        if (([v9 isMultilingualOnly] & 1) == 0
          && ((UIKeyboardShowsTransliterationCandidatesForInputMode() & 1) != 0 || ![v9 multilingualIndex]))
        {
          if (UIKeyboardShowsTransliterationCandidatesForInputMode())
          {
LABEL_11:
            if ([v9 isExtensionInputMode])
            {
              id v10 = v7;
            }
            else
            {
              TIInputModeGetNormalizedIdentifier();
              id v10 = (id)objc_claimAutoreleasedReturnValue();
            }
          }
          else
          {
            id v10 = [v9 displayName];
          }
          CFLocaleRef v11 = v10;
          CFStringRef v12 = UIKeyboardGetCurrentInputMode();
          if ([v7 isEqualToString:v12])
          {

            goto LABEL_18;
          }
          char v13 = [v1 containsObject:v11];

          if ((v13 & 1) == 0)
          {
LABEL_18:
            [v1 addObject:v11];
            [v2 setObject:v7 forKey:v11];
          }
        }
      }
      uint64_t v4 = [obj countByEnumeratingWithState:&v27 objects:v32 count:16];
    }
    while (v4);
  }

  int v14 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(obj, "count"));
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v15 = v1;
  uint64_t v16 = [v15 countByEnumeratingWithState:&v23 objects:v31 count:16];
  if (v16)
  {
    uint64_t v17 = v16;
    uint64_t v18 = *(void *)v24;
    do
    {
      for (uint64_t j = 0; j != v17; ++j)
      {
        if (*(void *)v24 != v18) {
          objc_enumerationMutation(v15);
        }
        double v20 = [v2 objectForKey:*(void *)(*((void *)&v23 + 1) + 8 * j)];
        if (v20) {
          [v14 addObject:v20];
        }
      }
      uint64_t v17 = [v15 countByEnumeratingWithState:&v23 objects:v31 count:16];
    }
    while (v17);
  }

  return v14;
}

BOOL UIKeyboardHasMultipleActiveInputModes()
{
  return (unint64_t)[(id)UIKeyboardActiveInputModes count] > 1;
}

uint64_t UIKeyboardHasMultipleActiveLinguisticNonExtensionInputModes()
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v0 = (id)UIKeyboardActiveInputModes;
  uint64_t v1 = [v0 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    int v3 = 0;
    uint64_t v4 = *(void *)v14;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v14 != v4) {
          objc_enumerationMutation(v0);
        }
        uint64_t v6 = *(void *)(*((void *)&v13 + 1) + 8 * v5);
        uint64_t v7 = TIInputModeGetLanguage();
        if (UIKeyboardInputModeIsNonLinguistic(v7))
        {
        }
        else
        {
          uint64_t v8 = +[UIKeyboardInputModeController sharedInputModeController];
          int v9 = [v8 identifierIsValidSystemInputMode:v6];

          if (v9)
          {
            uint64_t v10 = 1;
            BOOL v11 = v3 <= 0;
            int v3 = 1;
            if (!v11) {
              goto LABEL_14;
            }
          }
        }
        ++v5;
      }
      while (v2 != v5);
      uint64_t v2 = [v0 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v2);
  }
  uint64_t v10 = 0;
LABEL_14:

  return v10;
}

uint64_t UIKeyboardHasMultipleActiveSecureInputModes()
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v0 = (id)UIKeyboardActiveInputModes;
  uint64_t v1 = [v0 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    int v3 = 0;
    uint64_t v4 = *(void *)v11;
LABEL_3:
    uint64_t v5 = 0;
    while (1)
    {
      if (*(void *)v11 != v4) {
        objc_enumerationMutation(v0);
      }
      uint64_t v6 = *(void **)(*((void *)&v10 + 1) + 8 * v5);
      if ((objc_msgSend(v6, "isEqualToString:", @"autofillsignup", (void)v10) & 1) == 0
        && UIKeyboardLayoutDefaultTypeForInputModeIsSecure(v6))
      {
        uint64_t v7 = 1;
        BOOL v8 = v3 <= 0;
        int v3 = 1;
        if (!v8) {
          break;
        }
      }
      if (v2 == ++v5)
      {
        uint64_t v2 = [v0 countByEnumeratingWithState:&v10 objects:v14 count:16];
        if (v2) {
          goto LABEL_3;
        }
        goto LABEL_12;
      }
    }
  }
  else
  {
LABEL_12:
    uint64_t v7 = 0;
  }

  return v7;
}

BOOL UIKeyboardLayoutDefaultTypeForInputModeIsSecure(void *a1)
{
  id v1 = a1;
  uint64_t v2 = TIInputModeGetNormalizedIdentifier();
  int v3 = TIGetInputModeProperties();
  if (v3
    || (+[UIKeyboardInputMode keyboardInputModeWithIdentifier:](UIKeyboardInputMode, "keyboardInputModeWithIdentifier:", v1), uint64_t v4 = objc_claimAutoreleasedReturnValue(), v5 = [v4 isExtensionInputMode], v4, (v5 & 1) == 0))
  {
    uint64_t v7 = [v3 objectForKey:*MEMORY[0x1E4FAE680]];
    BOOL v8 = v7;
    BOOL v6 = !v7 || [v7 BOOLValue];
  }
  else
  {
    BOOL v6 = 0;
  }

  return v6;
}

uint64_t UIKeyboardHas10KeyChineseKeyboard()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v0 = (id)UIKeyboardActiveInputModes;
  uint64_t v1 = [v0 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v9;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v9 != v3) {
          objc_enumerationMutation(v0);
        }
        char v5 = KBStarLayoutString(*(void **)(*((void *)&v8 + 1) + 8 * i));
        if ((objc_msgSend(v5, "hasPrefix:", @"Pinyin10-", (void)v8) & 1) != 0
          || ([v5 hasPrefix:@"Wubihua-"] & 1) != 0)
        {

          uint64_t v6 = 1;
          goto LABEL_13;
        }
      }
      uint64_t v2 = [v0 countByEnumeratingWithState:&v8 objects:v12 count:16];
      uint64_t v6 = 0;
      if (v2) {
        continue;
      }
      break;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
LABEL_13:

  return v6;
}

BOOL UIKeyboardRequiresInternationalKey()
{
  return (unint64_t)[(id)UIKeyboardActiveUserSelectableInputModes count] > 1;
}

id UIKeyboardGetABCStringForActiveInputMode()
{
  id v0 = UIKeyboardGetCurrentInputMode();
  uint64_t v1 = UIKeyboardLocalizedString(@"UI-ABC", v0, 0, @"ABC");

  return v1;
}

id UIKeyboardGetJapaneseAIUStringForActiveInputMode()
{
  id v0 = UIKeyboardGetCurrentInputMode();
  uint64_t v1 = UIKeyboardLocalizedString(@"UI-JapaneseAIU", v0, 0, @"あいう");

  return v1;
}

id UIKeyboardGetNumberFormatterForPreferredLocale()
{
  id v0 = [MEMORY[0x1E4F1CA20] preferredLocale];
  uint64_t v1 = v0;
  if (qword_1EB261688)
  {
    uint64_t v2 = qword_1EB261680;
    uint64_t v3 = [v0 localeIdentifier];
    LOBYTE(v2) = [(id)v2 isEqualToString:v3];

    if ((v2 & 1) == 0)
    {
      [(id)qword_1EB261688 setLocale:v1];
      uint64_t v4 = [v1 localeIdentifier];
      uint64_t v5 = [v4 copy];
      uint64_t v6 = (void *)qword_1EB261680;
      qword_1EB261680 = v5;
    }
  }
  else
  {
    uint64_t v7 = objc_opt_new();
    long long v8 = (void *)qword_1EB261688;
    qword_1EB261688 = v7;

    [(id)qword_1EB261688 setLocale:v1];
    long long v9 = [v1 localeIdentifier];
    uint64_t v10 = [v9 copy];
    long long v11 = (void *)qword_1EB261680;
    qword_1EB261680 = v10;

    [(id)qword_1EB261688 setNumberStyle:0];
  }
  id v12 = (id)qword_1EB261688;

  return v12;
}

id UIKeyboardGetNumbersSymbolsStringForActiveInputMode()
{
  if (_ShouldLocalizeNumbersForPreferredLocale())
  {
    id v0 = UIKeyboardGetNumberFormatterForPreferredLocale();
    uint64_t v1 = [v0 stringFromNumber:&unk_1ED3F46C8];

    uint64_t v2 = [NSString stringWithFormat:@".?%@", v1];
    uint64_t v3 = [NSString stringWithFormat:@"%@-%@", @"UI-NumbersSymbols", v1];
    uint64_t v4 = UIKeyboardGetCurrentInputMode();
    uint64_t v5 = UIKeyboardLocalizedString(v3, v4, 0, v2);
  }
  else
  {
    uint64_t v1 = UIKeyboardGetCurrentInputMode();
    uint64_t v5 = UIKeyboardLocalizedString(@"UI-NumbersSymbols", v1, 0, @".?123");
  }

  return v5;
}

uint64_t _ShouldLocalizeNumbersForPreferredLocale()
{
  id v0 = UIKeyboardGetCurrentInputMode();
  uint64_t v1 = [MEMORY[0x1E4F1CA20] preferredLocale];
  uint64_t v2 = UIKeyboardInputModeLanguageMatchesLocaleLanguage((uint64_t)v0, v1);

  return v2;
}

id UIKeyboardGetNumbersStringForActiveInputMode()
{
  if (_ShouldLocalizeNumbersForPreferredLocale())
  {
    id v0 = UIKeyboardGetNumberFormatterForPreferredLocale();
    uint64_t v1 = [v0 stringFromNumber:&unk_1ED3F46C8];

    uint64_t v2 = [NSString stringWithFormat:@"%@", v1];
    uint64_t v3 = [NSString stringWithFormat:@"%@-%@", @"UI-Numbers", v1];
    uint64_t v4 = UIKeyboardGetCurrentInputMode();
    uint64_t v5 = UIKeyboardLocalizedString(v3, v4, 0, v2);
  }
  else
  {
    uint64_t v1 = UIKeyboardGetCurrentInputMode();
    uint64_t v5 = UIKeyboardLocalizedString(@"UI-Numbers", v1, 0, @"123");
  }

  return v5;
}

id UIKeyboardGetNumbersStringForPreferredLocale()
{
  id v0 = [MEMORY[0x1E4F1CA20] preferredLocale];
  uint64_t v1 = [v0 localeIdentifier];
  char v2 = [v1 isEqualToString:qword_1EB261698];

  if ((v2 & 1) == 0)
  {
    uint64_t v3 = [v0 localeIdentifier];
    uint64_t v4 = [v3 copy];
    uint64_t v5 = (void *)qword_1EB261698;
    qword_1EB261698 = v4;

    uint64_t v6 = objc_opt_new();
    [v6 setLocale:v0];
    [v6 setNumberStyle:0];
    uint64_t v7 = [v6 stringFromNumber:&unk_1ED3F46E0];
    uint64_t v8 = [v7 copy];
    long long v9 = (void *)qword_1EB261690;
    qword_1EB261690 = v8;
  }
  id v10 = (id)qword_1EB261690;

  return v10;
}

id UIKeyboardGetInputModesForLanguage(void *a1, void *a2, int a3)
{
  v59[2] = *MEMORY[0x1E4F143B8];
  id v4 = a1;
  id v5 = a2;
  uint64_t v6 = TIInputModeGetBaseLanguage();
  v59[0] = v6;
  uint64_t v7 = TIInputModeGetLanguage();
  v59[1] = v7;
  unint64_t v8 = 0x1E4F1C000uLL;
  long long v9 = [MEMORY[0x1E4F1C978] arrayWithObjects:v59 count:2];
  id v10 = [v4 allKeys];
  long long v11 = [v9 arrayByAddingObjectsFromArray:v10];

  id v12 = (void *)MEMORY[0x1E4F28B50];
  id v58 = v5;
  uint64_t v13 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v58 count:1];
  long long v14 = [v12 preferredLocalizationsFromArray:v11 forPreferences:v13];
  uint64_t v15 = [v14 firstObject];

  long long v16 = [MEMORY[0x1E4F1CA20] localeWithLocaleIdentifier:v15];
  uint64_t v17 = [v16 languageCode];
  uint64_t v18 = [MEMORY[0x1E4F1CA20] localeWithLocaleIdentifier:v5];
  double v19 = [v18 languageCode];
  int v20 = [v17 isEqualToString:v19];

  double v48 = (void *)v15;
  if (v20)
  {
    long long v21 = [v4 objectForKey:v15];
  }
  else
  {
    long long v21 = 0;
  }
  if (![v21 count])
  {
    double v22 = TIInputModeGetRegion();
    uint64_t v23 = [v4 objectForKey:v22];

    long long v21 = (void *)v23;
  }
  if (![v21 count] && a3)
  {
    long long v24 = TIGetDefaultInputModesForLanguage();
    long long v25 = v21;
    long long v26 = (void *)v15;
    goto LABEL_34;
  }
  double v52 = UIKeyboardGetSupportedInputModes();
  if (![v21 count])
  {
    double v42 = v21;
    goto LABEL_29;
  }
  int v45 = v11;
  id v46 = v5;
  id v47 = v4;
  long long v27 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v21, "count"));
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  id v28 = v21;
  uint64_t v29 = [v28 countByEnumeratingWithState:&v53 objects:v57 count:16];
  if (!v29) {
    goto LABEL_27;
  }
  uint64_t v30 = v29;
  uint64_t v31 = *(void *)v54;
  id v49 = v28;
  double v50 = v27;
  do
  {
    for (uint64_t i = 0; i != v30; ++i)
    {
      if (*(void *)v54 != v31) {
        objc_enumerationMutation(v28);
      }
      uint64_t v33 = *(void **)(*((void *)&v53 + 1) + 8 * i);
      double v34 = TIInputModeGetComponentsFromIdentifier();
      char v35 = TIInputModeGetNormalizedIdentifierFromComponents();
      if ([v52 containsObject:v35])
      {
        id v36 = v33;
        CGFloat v37 = [v34 objectForKey:@"sw"];
        if (!v37) {
          goto LABEL_21;
        }
        uint64_t v38 = v31;
        long long v39 = UIKeyboardGetSupportedSoftwareKeyboardsForInputMode(v35);
        if ([v39 count])
        {
          if (([v39 containsObject:v37] & 1) == 0)
          {
            long long v40 = [v39 firstObject];
            uint64_t v41 = [v36 stringByReplacingOccurrencesOfString:v37 withString:v40];

            id v36 = (id)v41;
            id v28 = v49;
            long long v27 = v50;
          }

          uint64_t v31 = v38;
LABEL_21:
          if (([v27 containsObject:v36] & 1) == 0) {
            [v27 addObject:v36];
          }
        }
        else
        {

          uint64_t v31 = v38;
        }
      }
    }
    uint64_t v30 = [v28 countByEnumeratingWithState:&v53 objects:v57 count:16];
  }
  while (v30);
LABEL_27:

  double v42 = v27;
  id v5 = v46;
  id v4 = v47;
  long long v11 = v45;
  unint64_t v8 = 0x1E4F1C000;
LABEL_29:
  long long v25 = v42;
  long long v26 = v48;
  if ([v42 count] || !objc_msgSend(v52, "containsObject:", v5))
  {
    id v43 = v25;
  }
  else
  {
    id v43 = [*(id *)(v8 + 2424) arrayWithObject:v5];
  }
  long long v24 = v43;

LABEL_34:
  return v24;
}

id UIKeyboardGetSupportedInputModes()
{
  id v0 = +[UIKeyboardInputModeController sharedInputModeController];
  uint64_t v1 = [v0 supportedInputModeIdentifiers];

  return v1;
}

id UIKeyboardGetSuggestedInputModesForLanguage(void *a1, int a2)
{
  id v3 = a1;
  id v4 = TIGetSuggestedInputModesByLocaleForLanguage();
  id v5 = UIKeyboardGetInputModesForLanguage(v4, v3, a2);

  return v5;
}

id UIKeyboardGetSuggestedDefaultInputModesForLanguage(void *a1)
{
  id v1 = a1;
  if ((UIKeyboardGetSafeDeviceIdiom() & 0xFFFFFFFFFFFFFFFBLL) != 1) {
    goto LABEL_5;
  }
  char v2 = +[UIScreen mainScreen];
  [v2 _referenceBounds];
  double v4 = v3;

  if (v4 <= 768.0
    || (TIGetSuggestedDefaultInputModesForFudgeByLocaleForLanguage(),
        (id v5 = objc_claimAutoreleasedReturnValue()) == 0))
  {
    id v5 = TIGetSuggestedDefaultInputModesForPadByLocaleForLanguage();
    if (!v5)
    {
LABEL_5:
      id v5 = TIGetSuggestedDefaultInputModesByLocaleForLanguage();
    }
  }
  uint64_t v6 = UIKeyboardGetInputModesForLanguage(v5, v1, 1);

  return v6;
}

id UIKeyboardGetSupportedLanguages()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (UIKeyboardSupportedLanguages)
  {
    id v0 = (id)UIKeyboardSupportedLanguages;
  }
  else
  {
    id v1 = [MEMORY[0x1E4F1CA80] set];
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    char v2 = UIKeyboardGetSupportedInputModes();
    uint64_t v3 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)v13;
      do
      {
        for (uint64_t i = 0; i != v4; ++i)
        {
          if (*(void *)v13 != v5) {
            objc_enumerationMutation(v2);
          }
          if ((objc_msgSend(*(id *)(*((void *)&v12 + 1) + 8 * i), "isEqualToString:", @"emoji", (void)v12) & 1) == 0)
          {
            uint64_t v7 = TIInputModeGetLanguageWithRegion();
            [v1 addObject:v7];
          }
        }
        uint64_t v4 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
      }
      while (v4);
    }

    unint64_t v8 = [v1 allObjects];
    uint64_t v9 = [v8 sortedArrayUsingSelector:sel_caseInsensitiveCompare_];
    id v10 = (void *)UIKeyboardSupportedLanguages;
    UIKeyboardSupportedLanguages = v9;

    id v0 = (id)UIKeyboardSupportedLanguages;
  }
  return v0;
}

id UIKeyboardGetSupportedInputModesFromInputModes(void *a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v1, "count"));
  id v18 = (id)objc_claimAutoreleasedReturnValue();
  char v2 = UIKeyboardGetSupportedInputModes();
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id obj = v1;
  uint64_t v3 = [obj countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v20;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v20 != v5) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = *(void **)(*((void *)&v19 + 1) + 8 * i);
        unint64_t v8 = TIInputModeGetComponentsFromIdentifier();
        uint64_t v9 = TIInputModeGetNormalizedIdentifierFromComponents();
        if ([v2 containsObject:v9])
        {
          id v10 = v7;
          long long v11 = v10;
          if ((_os_feature_enabled_impl() & 1) == 0)
          {
            long long v12 = (void *)[v8 mutableCopy];
            long long v11 = UIKeyboardInputModeGetIdentifierFromComponents(v12);
          }
          long long v13 = [v8 objectForKeyedSubscript:@"sw"];
          long long v14 = KBStarLayoutString(v10);
          if (([v13 isEqualToString:v14] & 1) == 0)
          {
            uint64_t v15 = UIKeyboardInputModeWithNewSWLayout((uint64_t)v10, v14);

            long long v11 = (void *)v15;
          }
          if (([v18 containsObject:v11] & 1) == 0) {
            [v18 addObject:v11];
          }
        }
      }
      uint64_t v4 = [obj countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v4);
  }

  return v18;
}

id UIKeyboardGetDomainForCurrentLocale()
{
  if (!UIKeyboardGetDomainForCurrentLocale___dict)
  {
    uint64_t v0 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA60]), "initWithObjectsAndKeys:", @"UK", @"GB", 0);
    id v1 = (void *)UIKeyboardGetDomainForCurrentLocale___dict;
    UIKeyboardGetDomainForCurrentLocale___dict = v0;
  }
  char v2 = [MEMORY[0x1E4F1CA20] preferredLocale];
  id v3 = [v2 objectForKey:*MEMORY[0x1E4F1C400]];

  if (v3)
  {
    uint64_t v4 = [(id)UIKeyboardGetDomainForCurrentLocale___dict objectForKey:v3];
    uint64_t v5 = v4;
    uint64_t v6 = NSString;
    if (!v4) {
      uint64_t v4 = v3;
    }
    uint64_t v7 = [v4 lowercaseString];
    unint64_t v8 = [v6 stringWithFormat:@".%@", v7];

    id v3 = v8;
  }
  return v3;
}

id UIKeyboardGetInputModesSupportingHardwareKeyboard()
{
  uint64_t v0 = TIGetLanguageSupportForHardwareKeyboard();
  id v1 = [v0 objectForKey:@"MatchedModes"];

  return v1;
}

id UIKeyboardGetDefaultInputModeLayoutForHardwareKeyboardWithCountryCode(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  unint64_t v8 = TIGetLanguageSupportForHardwareKeyboard();
  uint64_t v9 = [v8 objectForKey:@"DefaultHWLayouts"];
  id v10 = [v9 objectForKey:v5];
  if (!v10)
  {
    long long v11 = UIKeyboardGetInputModesSupportingHardwareKeyboard();
    if ([v11 containsObject:v5])
    {
      id v12 = v5;
    }
    else
    {
      id v12 = [v11 firstObject];
      if (v9)
      {
        long long v13 = [v9 allValues];
        id v10 = [v13 firstObject];

        if (v12) {
          goto LABEL_8;
        }
        goto LABEL_10;
      }
    }
    id v10 = 0;
    if (v12)
    {
LABEL_8:
      if (!v10)
      {
        long long v14 = TIGetHardwareLayoutsForInputMode();
        id v10 = [v14 firstObject];
      }
    }
LABEL_10:
  }
  return v10;
}

id UIKeyboardGetHardwareLayoutFromInputMode(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  unint64_t v8 = [v5 softwareLayout];
  uint64_t v9 = TIGetLanguageSupportForHardwareKeyboard();
  id v10 = [v9 objectForKey:@"HWLayoutsForSWVariants"];
  long long v11 = v10;
  if (!v10 || ([v10 objectForKey:v8], (id v12 = objc_claimAutoreleasedReturnValue()) == 0))
  {
    long long v13 = [v5 normalizedIdentifier];
    id v12 = UIKeyboardGetDefaultInputModeLayoutForHardwareKeyboardWithCountryCode(v13, v6, v7);
  }
  return v12;
}

id UIKeyboardGetSoftwareLayoutForHardwareKeyboardAndInputMode(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = TIGetLanguageSupportForHardwareKeyboard();
  uint64_t v4 = [v3 objectForKey:@"SWLayoutsForHW"];
  id v5 = [v4 objectForKey:v2];
  if (!v5)
  {
    id v5 = UIKeyboardGetDefaultSoftwareKeyboardForInputMode(v2);
  }

  return v5;
}

id UIKeyboardGetDefaultHardwareKeyboardLayoutForInputMode(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (UIKeyboardInputModeSoftwareOnly(v1))
  {
    id v2 = 0;
  }
  else
  {
    UIKeyboardGetSupportedHardwareKeyboardsForInputMode(v1);
    long long v10 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    id v3 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v11;
      while (2)
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v11 != v6) {
            objc_enumerationMutation(v3);
          }
          unint64_t v8 = *(void **)(*((void *)&v10 + 1) + 8 * i);
          if (!objc_msgSend(v8, "isEqualToString:", @"Automatic", (void)v10))
          {
            id v2 = v8;
            goto LABEL_13;
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
        if (v5) {
          continue;
        }
        break;
      }
    }
    id v2 = 0;
LABEL_13:
  }
  return v2;
}

uint64_t UIKeyboardRequiresFontFallbacksForInputMode()
{
  uint64_t v0 = TIInputModeGetNormalizedIdentifier();
  id v1 = TIGetInputModeProperties();
  id v2 = [v1 objectForKey:*MEMORY[0x1E4FAE6A8]];
  uint64_t v3 = [v2 BOOLValue];

  return v3;
}

id UIKeyboardFontFallbackLanguageForInputMode()
{
  uint64_t v0 = TIInputModeGetNormalizedIdentifier();
  id v1 = TIGetInputModeProperties();
  id v2 = [v1 objectForKey:*MEMORY[0x1E4FAE6A0]];

  return v2;
}

void __UIKeyboardInputModeIsDefaultRightToLeft_block_invoke()
{
  uint64_t v0 = [objc_alloc(MEMORY[0x1E4F1CA60]) initWithCapacity:1];
  id v1 = (void *)qword_1EB2616A0;
  qword_1EB2616A0 = v0;
}

uint64_t UIKeyboardTypeAllowsRightToLeft(unint64_t a1)
{
  return (a1 > 0xB) | (0x6CFu >> a1) & 1;
}

uint64_t UIKeyboardIsEmojiInputModeActive()
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v0 = (id)UIKeyboardActiveInputModes;
  uint64_t v1 = [v0 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v8;
    while (2)
    {
      uint64_t v4 = 0;
      do
      {
        if (*(void *)v8 != v3) {
          objc_enumerationMutation(v0);
        }
        if (objc_msgSend(*(id *)(*((void *)&v7 + 1) + 8 * v4), "hasPrefix:", @"emoji", (void)v7))
        {
          uint64_t v5 = 1;
          goto LABEL_11;
        }
        ++v4;
      }
      while (v2 != v4);
      uint64_t v2 = [v0 countByEnumeratingWithState:&v7 objects:v11 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
  uint64_t v5 = 0;
LABEL_11:

  return v5;
}

uint64_t UIKeyboardEnabledInputModesAllowChineseTransliterationForText(void *a1)
{
  id v1 = a1;
  if ([(id)UIKeyboardActiveInputModes indexOfObjectPassingTest:&__block_literal_global_369_0] == 0x7FFFFFFFFFFFFFFFLL
    || (unint64_t)[v1 length] >> 2 > 0x800)
  {
    uint64_t v2 = 0;
  }
  else
  {
    uint64_t v2 = [v1 _containsIdeographicCharacters];
  }

  return v2;
}

uint64_t __UIKeyboardEnabledInputModesAllowChineseTransliterationForText_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v5 = TIInputModeGetLanguage();
  if (([v5 isEqualToString:@"zh"] & 1) != 0
    || [v5 isEqualToString:@"yue"])
  {
    uint64_t v6 = 1;
    *a4 = 1;
  }
  else
  {
    uint64_t v6 = 0;
  }

  return v6;
}

uint64_t UIKeyboardCurrentInputModeAllowsChineseOrJapaneseReanalysisForText()
{
  return 0;
}

uint64_t _TextInputBundlesRoot()
{
  return [NSString stringWithUTF8String:"/System/Library/TextInput"];
}

uint64_t UIKeyboardBundlePathForInputMode()
{
  return MEMORY[0x1F4163BC0]();
}

uint64_t UIKeyboardDeviceSupportsSplit()
{
  id v0 = +[UIKeyboardImpl keyboardScreen];
  id v1 = +[UIKeyboard activeKeyboard];
  uint64_t v2 = +[UIKBScreenTraits fullScreenTraitsWithScreen:orientation:](UIKBScreenTraits, "fullScreenTraitsWithScreen:orientation:", v0, [v1 interfaceOrientation]);

  uint64_t v3 = UIKeyboardComputeKeyboardIdiomFromScreenTraits(v2, [v2 idiom], 0);
  BOOL v4 = (unint64_t)(v3 - 23) < 4 || v3 == 1;
  if (!v4 || (unint64_t)(v3 - 23) < 2) {
    goto LABEL_14;
  }
  if (+[UIDevice _hasHomeButton])
  {
    if (![v2 isKeyboardMinorEdgeWidth] || (objc_msgSend(v2, "keyboardWidth"), v5 <= 834.0))
    {
      if ([v2 isKeyboardMinorEdgeWidth]) {
        goto LABEL_12;
      }
      [v2 keyboardWidth];
      if (v6 <= 1112.0) {
        goto LABEL_12;
      }
    }
LABEL_14:
    uint64_t v7 = 0;
    goto LABEL_15;
  }
  long long v8 = +[UIKeyboardPreferencesController sharedPreferencesController];
  long long v9 = [v8 preferencesActions];
  [v9 rivenSizeFactor:1.0];
  double v11 = v10;

  if (v11 == 1.0) {
    goto LABEL_14;
  }
LABEL_12:
  uint64_t v7 = 1;
LABEL_15:

  return v7;
}

uint64_t UIKeyboardSupportsSplit()
{
  id v0 = UIKeyboardGetCurrentInputMode();
  if (!v0) {
    goto LABEL_11;
  }
  id v1 = +[UIKeyboardInputMode dictationInputMode];
  uint64_t v2 = [v1 identifier];
  int v3 = [v0 isEqualToString:v2];

  if (v3)
  {
    BOOL v4 = +[UIDictationController sharedInstance];
    double v5 = [v4 currentInputModeForDictation];
    uint64_t v6 = [v5 identifier];

    id v0 = (void *)v6;
  }
  if ([v0 rangeOfString:@"HWR"] != 0x7FFFFFFFFFFFFFFFLL
    || (_UIApplicationIsStickerPickerService() & 1) != 0
    || +[UIKeyboard isRemoteEmojiCollectionViewEnabled]
    && ([v0 hasPrefix:@"emoji"] & 1) != 0)
  {
    goto LABEL_11;
  }
  if (_os_feature_enabled_impl())
  {
    uint64_t v7 = +[UIKeyboardInputMode keyboardInputModeWithIdentifier:v0];
    char v8 = [v7 isMultiscript];

    if (v8) {
      goto LABEL_11;
    }
  }
  long long v9 = TIInputModeGetSWLayout();
  char v10 = [&unk_1ED3EFE90 containsObject:v9];

  if (v10) {
LABEL_11:
  }
    uint64_t v11 = 0;
  else {
    uint64_t v11 = UIKeyboardDeviceSupportsSplit();
  }

  return v11;
}

id UIKeyboardSplitTransitionViewClass()
{
  id v0 = UIKeyboardGetCurrentInputMode();
  id v1 = KBStarLayoutString(v0);
  uint64_t v2 = (void *)UIKeyboardSplitTransitionViewClass___customTransitionViewClasses;
  if (!UIKeyboardSplitTransitionViewClass___customTransitionViewClasses)
  {
    uint64_t v3 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", @"Emoji", @"UIKeyboardFlipTransitionView", @"Kana", @"UIKeyboardFlipTransitionView", @"Kana-Flick", @"UIKeyboardFlipTransitionView", @"Kana-RTL", @"UIKeyboardFlipTransitionView", @"Kana-RTL-Flick", @"UIKeyboardFlipTransitionView", @"Wubihua-Simplified", @"UIKeyboardFlipTransitionView", @"Wubihua-Traditional", 0);
    BOOL v4 = (void *)UIKeyboardSplitTransitionViewClass___customTransitionViewClasses;
    UIKeyboardSplitTransitionViewClass___customTransitionViewClasses = v3;

    uint64_t v2 = (void *)UIKeyboardSplitTransitionViewClass___customTransitionViewClasses;
  }
  uint64_t v5 = [v2 valueForKey:v1];
  uint64_t v6 = (void *)v5;
  uint64_t v7 = @"UIKeyboardSliceTransitionView";
  if (v5) {
    uint64_t v7 = (__CFString *)v5;
  }
  char v8 = v7;
  long long v9 = _UIKitBundle();
  char v10 = [v9 classNamed:v8];

  return v10;
}

uint64_t UIKeyboardSplitTransitionViewSupportsPinch()
{
  id v0 = (objc_class *)UIKeyboardSplitTransitionViewClass();
  id v1 = NSStringFromClass(v0);
  uint64_t v2 = [v1 isEqualToString:@"UIKeyboardSliceTransitionView"];

  return v2;
}

id UIKeyboardGetDerivedKeyboard(void *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = a1;
  uint64_t v7 = UIKeyboardGetDerivedKeyboardForSpecificOrientation(v6, v5, a3, [v5 orientation]);

  return v7;
}

UIKBDerivedKeyboard *UIKeyboardGetDerivedKeyboardForSpecificOrientation(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a1;
  id v8 = a2;
  if (+[UIKeyboardImpl isFloating]
    && +[UIKeyboardImpl floatingIdiom] != 1)
  {
    goto LABEL_90;
  }
  [v8 bounds];
  double v10 = v9;
  [v8 bounds];
  uint64_t v171 = a4;
  unint64_t v11 = a4 - 3;
  int v12 = (unint64_t)(a4 - 3) < 2;
  int v13 = (unint64_t)([v8 orientation] - 3) < 2;
  if (v12 != v13)
  {
    [v8 bounds];
    double v10 = v14;
    [v8 bounds];
  }
  uint64_t v15 = [v8 idiom];
  uint64_t v173 = [v8 idiom];
  uint64_t v175 = [v8 idiom];
  uint64_t v16 = UIKeyboardComputeKeyboardIdiomFromScreenTraits(v8, [v8 idiom], 0);
  id v17 = v7;
  id v18 = v17;
  BOOL v22 = v16 == 1 || (v16 & 0xFFFFFFFFFFFFFFFELL) == 24 || v16 == 26 || v16 == 23;
  id v176 = v7;
  unint64_t v172 = v11;
  if (unint64_t)(v16 - 23) >= 4 && v16 != 1 && ([v17 containsString:@"emoji"]) {
    goto LABEL_25;
  }
  char v23 = !v22;
  if (v16 == 24) {
    char v23 = 1;
  }
  if (v23 & 1) == 0 && ([v18 containsString:@"HWR"])
  {
LABEL_25:
    uint64_t v24 = v8;
    int v170 = 0;
  }
  else
  {
    uint64_t v24 = v8;
    int v170 = 1;
  }

  long long v25 = +[UIKeyboardPreferencesController sharedPreferencesController];
  long long v26 = [v25 preferencesActions];
  v177 = v18;
  int v27 = [v26 inputModeSupportsCrescendo:v18];
  if (a3 == 127) {
    int v28 = 0;
  }
  else {
    int v28 = v27;
  }

  if (v15)
  {
    if (v173 == 1)
    {
      int v174 = v28;
      int v29 = v12 ^ v13;
      uint64_t v30 = +[UIKeyboardPreferencesController sharedPreferencesController];
      uint64_t v31 = [v30 preferencesActions];
      int v32 = [v31 enableProKeyboard];

      id v8 = v24;
      uint64_t v33 = [v24 screen];
      [v33 _referenceBounds];
      id v7 = v176;
      if (v29) {
        double Width = CGRectGetWidth(*(CGRect *)&v34);
      }
      else {
        double Width = CGRectGetHeight(*(CGRect *)&v34);
      }
      double v102 = Width;

      CGRect v103 = [v24 screen];
      [v103 scale];
      double v105 = v104;

      if (v105 == 0.0) {
        double v106 = 1.0;
      }
      else {
        double v106 = v105;
      }
      long long v107 = [v24 screen];
      [v107 nativeBounds];
      double v109 = v108;
      double v111 = v110;

      if (v29) {
        double v112 = v109;
      }
      else {
        double v112 = v111;
      }
      if (v29) {
        double v109 = v111;
      }
      double v113 = v112 / v106;
      double v115 = _UIScreenReferenceBoundsSizeForType(0x21uLL);
      double v116 = v114;
      double v169 = v109;
      if (v113 >= v102) {
        BOOL v117 = v113 > v114 && v113 > 1210.0;
      }
      else {
        BOOL v117 = 1;
      }
      int v123 = v113 > 1210.0 && !v117;
      BOOL v124 = v102 < v113 && v113 > 1210.0;
      if (v172 >= 2) {
        double v125 = 323.0;
      }
      else {
        double v125 = 416.0;
      }
      if (+[UIKeyboardImpl isFloating]
        && +[UIKeyboardImpl floatingIdiom] == 1)
      {
        unint64_t v89 = objc_alloc_init(UIKBDerivedKeyboard);
        +[UIKeyboardImpl floatingWidth];
        double v127 = v126;
        +[UIKeyboardImpl floatingHeight];
        double v129 = v128;
        -[UIKBDerivedKeyboard setKeyboardSizeBasis:](v89, "setKeyboardSizeBasis:", v127, v128);
LABEL_106:
        uint64_t v93 = v175;
        goto LABEL_146;
      }
      if ((v123 & ~+[UIKeyboardImpl overrideNativeScreen] & 1) == 0
        && ((v32 ^ 1) & 1) == 0)
      {
        unint64_t v89 = objc_alloc_init(UIKBDerivedKeyboard);
        if (v123)
        {
          double v130 = [v24 screen];
          [v130 _unjailedReferenceBoundsForInterfaceOrientation:v171];
          double v132 = v131;
          double v115 = v133;
        }
        else
        {
          if (v172 >= 2) {
            double v132 = v115;
          }
          else {
            double v132 = v116;
          }
          if (v172 >= 2) {
            double v115 = v116;
          }
        }
        uint64_t v93 = v175;
        double v127 = v10;
        long long v145 = [getTUIKeyboardLayoutFactoryClass() sharedKeyboardFactory];
        long long v146 = [v145 keyboardPrefixForWidth:v172 > 1 andEdge:v132];
        [(UIKBDerivedKeyboard *)v89 setDerivedKBStarPrefixName:v146];

        -[UIKBDerivedKeyboard setKeyboardSizeBasis:](v89, "setKeyboardSizeBasis:", v10, v125);
        [v24 bounds];
        double v129 = v125 * v147 / v115;
LABEL_145:
        id v18 = v177;
LABEL_146:
        if (v89)
        {
          double v148 = -1.0;
          if (v129 != -1.0)
          {
            int v149 = objc_msgSend(v18, "containsString:", @"emoji", -1.0);
            double v148 = v129 + 55.0;
            if (!v149) {
              double v148 = v129;
            }
          }
          if (v170) {
            double v150 = v148;
          }
          else {
            double v150 = -1.0;
          }
          -[UIKBDerivedKeyboard setKeyboardSize:](v89, "setKeyboardSize:", v127, v150);
        }
        goto LABEL_154;
      }
      if (v113 <= 1210.0) {
        char v134 = 1;
      }
      else {
        char v134 = v32;
      }
      if ((v134 & 1) == 0)
      {
        double v129 = *(double *)(MEMORY[0x1E4F1DB30] + 8);
        unint64_t v89 = objc_alloc_init(UIKBDerivedKeyboard);
        uint64_t v141 = [getTUIKeyboardLayoutFactoryClass() sharedKeyboardFactory];
        v142 = v141;
        double v143 = 768.0;
        if (v172 < 2) {
          double v143 = 1024.0;
        }
        long long v144 = [v141 keyboardPrefixForWidth:v172 > 1 andEdge:v143];
        [(UIKBDerivedKeyboard *)v89 setDerivedKBStarPrefixName:v144];

        double v127 = v10;
        -[UIKBDerivedKeyboard setKeyboardSizeBasis:](v89, "setKeyboardSizeBasis:", v10, v125);
        if (v16 == 24) {
          [(UIKBDerivedKeyboard *)v89 setAddsSupplementaryControlKeys:1];
        }
        uint64_t v93 = v175;
        goto LABEL_145;
      }
      int v135 = v124 & v32;
      if (v16 == 24) {
        int v136 = 1;
      }
      else {
        int v136 = v135;
      }
      double v127 = v10;
      if (v136 == 1)
      {
        unint64_t v89 = objc_alloc_init(UIKBDerivedKeyboard);
        [(UIKBDerivedKeyboard *)v89 setAddsSupplementaryControlKeys:1];
        if (v172 > 1)
        {
          int v156 = v10 < 834.0 || v117;
          BOOL v138 = v156 == 0;
          double v139 = 258.0;
          double v140 = 255.0;
        }
        else
        {
          int v137 = v10 < 1194.0 || v117;
          BOOL v138 = v137 == 0;
          double v139 = 343.0;
          double v140 = 337.0;
        }
        if (v138) {
          double v129 = v139;
        }
        else {
          double v129 = v140;
        }
        uint64_t v93 = v175;
        -[UIKBDerivedKeyboard setKeyboardSizeBasis:](v89, "setKeyboardSizeBasis:", v10, v129);
        if (v117)
        {
          double v129 = v102 / v113 * v129;
          if ([v24 isKeyboardMinorEdgeWidth]) {
            double v157 = v169 / v106;
          }
          else {
            double v157 = v113;
          }
          v158 = [getTUIKeyboardLayoutFactoryClass() sharedKeyboardFactory];
          v159 = objc_msgSend(v158, "keyboardPrefixForWidth:andEdge:", objc_msgSend(v24, "isKeyboardMinorEdgeWidth"), round(v157));
          [(UIKBDerivedKeyboard *)v89 setDerivedKBStarPrefixName:v159];

          id v18 = v177;
        }
        if (v135)
        {
          if ([v24 isKeyboardMinorEdgeWidth]) {
            double v160 = v169 / v106;
          }
          else {
            double v160 = v113;
          }
          long long v161 = [getTUIKeyboardLayoutFactoryClass() sharedKeyboardFactory];
          uint64_t v162 = objc_msgSend(v161, "keyboardPrefixForWidth:andEdge:", objc_msgSend(v24, "isKeyboardMinorEdgeWidth"), round(v160));
          [(UIKBDerivedKeyboard *)v89 setDerivedKBStarPrefixName:v162];

          id v18 = v177;
        }
        if ([v18 containsString:@"HWR"])
        {
          BOOL v163 = v10 < 1180.0;
          if (v172 >= 2) {
            BOOL v163 = v10 < 820.0;
          }
          if (!v163) {
            double v129 = -1.0;
          }
        }
        goto LABEL_146;
      }
      switch(v16)
      {
        case 23:
          if ([v18 containsString:@"emoji"])
          {
            unint64_t v89 = objc_alloc_init(UIKBDerivedKeyboard);
            [(UIKBDerivedKeyboard *)v89 setAddsSupplementaryControlKeys:0];
            -[UIKBDerivedKeyboard setKeyboardSizeBasis:](v89, "setKeyboardSizeBasis:", v10, v125);
            if (v172 >= 2) {
              CGRect v164 = @"Wildcat-PortraitFudge";
            }
            else {
              CGRect v164 = @"Wildcat-LandscapeFudge";
            }
            [(UIKBDerivedKeyboard *)v89 setDerivedKBStarPrefixName:v164];
            double v129 = v125;
            goto LABEL_106;
          }
          break;
        case 26:
          unint64_t v89 = objc_alloc_init(UIKBDerivedKeyboard);
          [(UIKBDerivedKeyboard *)v89 setAddsSupplementaryControlKeys:0];
          if (v172 >= 2) {
            CGRect v165 = @"Wildcat-Portrait";
          }
          else {
            CGRect v165 = @"Wildcat-Landscape";
          }
          -[UIKBDerivedKeyboard setKeyboardSizeBasis:](v89, "setKeyboardSizeBasis:", v10, dbl_186B99300[v172 < 2]);
          [(UIKBDerivedKeyboard *)v89 setDerivedKBStarPrefixName:v165];
          goto LABEL_210;
        case 25:
          unint64_t v89 = objc_alloc_init(UIKBDerivedKeyboard);
          [(UIKBDerivedKeyboard *)v89 setAddsSupplementaryControlKeys:0];
          double v127 = dbl_186B99310[v172 < 2];
          -[UIKBDerivedKeyboard setKeyboardSizeBasis:](v89, "setKeyboardSizeBasis:", v127, dbl_186B99300[v172 < 2]);
LABEL_210:
          double v129 = -1.0;
          goto LABEL_106;
      }
      unint64_t v89 = 0;
      goto LABEL_75;
    }
    uint64_t v93 = v175;
    id v7 = v176;
    if (v175 != 3)
    {
      int v174 = v28;
      unint64_t v89 = 0;
      id v8 = v24;
      goto LABEL_154;
    }
    uint64_t v118 = UIKeyboardPhoneLayoutToUseForCarPlayInputMode(v18);
    id v8 = v24;
    if (v118)
    {
      __int16 v119 = (void *)v118;
      int v120 = [v24 touchInput];

      if (v120)
      {
        unint64_t v89 = objc_alloc_init(UIKBDerivedKeyboard);
        __int16 v121 = [getTUIKeyboardLayoutFactoryClass() sharedKeyboardFactory];
        long double v122 = [v121 keyboardPrefixForWidth:0 andEdge:640.0];
        [(UIKBDerivedKeyboard *)v89 setDerivedKBStarPrefixName:v122];

        -[UIKBDerivedKeyboard setKeyboardSize:](v89, "setKeyboardSize:", fmin(v10 + -44.0, 356.0), 153.5);
        goto LABEL_159;
      }
    }
LABEL_90:
    unint64_t v89 = 0;
    goto LABEL_159;
  }
  double v168 = v10;
  int v174 = v28;
  double v39 = _UIScreenReferenceBoundsSizeForType(6uLL);
  double v41 = v40;
  double v42 = _UIScreenReferenceBoundsSizeForType(0xDuLL);
  double v44 = v43;
  double v45 = _UIScreenReferenceBoundsSizeForType(0xFuLL);
  double v47 = v46;
  double v48 = _UIScreenReferenceBoundsSizeForType(0x17uLL);
  double v50 = v49;
  double v166 = _UIScreenReferenceBoundsSizeForType(0x19uLL);
  double v167 = v51;
  id v8 = v24;
  [v24 keyboardScreenReferenceSize];
  BOOL v54 = v53 == v41 && v52 == v39;
  [v24 keyboardScreenReferenceSize];
  BOOL v57 = v56 == v44 && v55 == v42;
  [v24 keyboardScreenReferenceSize];
  BOOL v60 = v59 == v47 && v58 == v45;
  [v24 keyboardScreenReferenceSize];
  BOOL v63 = v62 == v50 && v61 == v48;
  [v24 keyboardScreenReferenceSize];
  BOOL v66 = v65 == v167 && v64 == v166;
  BOOL v67 = v57 || v60 || v54 || v63;
  double v68 = _UIScreenReferenceBoundsSizeForType(0x1BuLL);
  double v70 = v69;
  double v71 = _UIScreenReferenceBoundsSizeForType(0x1DuLL);
  double v73 = v72;
  [v24 keyboardScreenReferenceSize];
  BOOL v76 = v75 == v70 && v74 == v68;
  [v24 keyboardScreenReferenceSize];
  BOOL v78 = v77 == v71;
  if (v79 != v73) {
    BOOL v78 = 0;
  }
  BOOL v80 = v67 || v66 || v76 || v78;
  if (v172 <= 1)
  {
    double v81 = +[UIKeyboardImpl activeInstance];
    double v82 = [v81 candidateController];
    [v82 candidateBarHeightForOrientation:v171];
    double v84 = v83;

    if (v80)
    {
      unint64_t v85 = +[UIKeyboardInputMode keyboardInputModeWithIdentifier:v18];
      +[UIKeyboardImpl deviceSpecificPaddingForInterfaceOrientation:v171 inputMode:v85];
      double v88 = v168 - (v86 + v87);
      unint64_t v89 = objc_alloc_init(UIKBDerivedKeyboard);
      int v90 = [v18 containsString:@"emoji"];
      if (v90) {
        long long v91 = @"iPhone-LandscapeTruffle";
      }
      else {
        long long v91 = @"iPhone-Caymen";
      }
      if (v90) {
        double v92 = 200.0;
      }
      else {
        double v92 = -1.0;
      }
      [(UIKBDerivedKeyboard *)v89 setDerivedKBStarPrefixName:v91];
      if (v54) {
        double v92 = 150.0;
      }
      -[UIKBDerivedKeyboard setKeyboardSizeBasis:](v89, "setKeyboardSizeBasis:", v88, v92);
      -[UIKBDerivedKeyboard setKeyboardSize:](v89, "setKeyboardSize:", v88, v92);
    }
    else
    {
      if (v168 >= 812.0)
      {
        unint64_t v89 = objc_alloc_init(UIKBDerivedKeyboard);
        double v153 = 662.0;
        double v154 = 152.0;
        -[UIKBDerivedKeyboard setKeyboardSizeBasis:](v89, "setKeyboardSizeBasis:", 662.0, 152.0);
        uint64_t v93 = v175;
        id v7 = v176;
        if ([v18 containsString:@"emoji"])
        {
          double v153 = 724.0;
        }
        else if (UIKeyboardShouldMatchHeightWithPredictionViewOnLandscapeLargePhoneKeyboard(v18))
        {
          double v154 = v84 + 152.0;
        }
        else
        {
          double v154 = 152.0;
        }
        if (v170) {
          double v155 = v154;
        }
        else {
          double v155 = -1.0;
        }
        -[UIKBDerivedKeyboard setKeyboardSize:](v89, "setKeyboardSize:", v153, v155);
        if (v170) {
          [(UIKBDerivedKeyboard *)v89 setDerivedKBStarPrefixName:@"iPhone-Caymen"];
        }
        goto LABEL_127;
      }
      unint64_t v89 = 0;
    }
    uint64_t v93 = v175;
    id v7 = v176;
LABEL_127:
    if (!v89 && v168 >= 667.0)
    {
      if (UIKeyboardShouldAddMarginOnLandscapeLargePhoneKeyboard(v18))
      {
        unint64_t v89 = objc_alloc_init(UIKBDerivedKeyboard);
        [(UIKBDerivedKeyboard *)v89 setDerivedKBStarPrefixName:@"iPhone-Caymen"];
        -[UIKBDerivedKeyboard setKeyboardSize:](v89, "setKeyboardSize:", v168 + -144.0, -1.0);
        if (UIKeyboardShouldMatchHeightWithPredictionViewOnLandscapeLargePhoneKeyboard(v18))
        {
          [(UIKBDerivedKeyboard *)v89 keyboardSize];
          -[UIKBDerivedKeyboard setKeyboardSize:](v89, "setKeyboardSize:");
        }
        [(UIKBDerivedKeyboard *)v89 keyboardSize];
        -[UIKBDerivedKeyboard setKeyboardSizeBasis:](v89, "setKeyboardSizeBasis:");
      }
      else
      {
        unint64_t v89 = 0;
      }
    }
    goto LABEL_154;
  }
  if (v80)
  {
    BOOL v94 = v60 || v66 || v78;
    double v95 = +[UIKeyboardInputMode keyboardInputModeWithIdentifier:v18];
    +[UIKeyboardImpl deviceSpecificPaddingForInterfaceOrientation:v171 inputMode:v95];
    double v98 = v168 - (v96 + v97);
    objc_msgSend(0, "setKeyboardSizeBasis:", v98, 215.0);
    double v99 = -1.0;
    id v7 = v176;
    if (v54 && ([v18 containsString:@"HWR"] & 1) == 0)
    {
      double v99 = 200.0;
      objc_msgSend(0, "setKeyboardSizeBasis:", v98, 200.0);
    }
    CGRect v100 = objc_alloc_init(UIKBDerivedKeyboard);
    unint64_t v89 = v100;
    CGRect v101 = @"iPhone-PortraitTruffle";
    if (!v94)
    {
      if (v24)
      {
        if (!v24[35]) {
          CGRect v101 = @"iPhone-PortraitChoco";
        }
      }
      else
      {
        CGRect v101 = @"iPhone-PortraitChoco";
      }
    }
    [(UIKBDerivedKeyboard *)v100 setDerivedKBStarPrefixName:v101];
    -[UIKBDerivedKeyboard setKeyboardSize:](v89, "setKeyboardSize:", v98, v99);

LABEL_75:
    uint64_t v93 = v175;
    goto LABEL_154;
  }
  unint64_t v89 = 0;
  uint64_t v93 = v175;
  id v7 = v176;
LABEL_154:
  if (v93 == 3) {
    int v151 = 0;
  }
  else {
    int v151 = v174;
  }
  if (v151 == 1) {
    [(UIKBDerivedKeyboard *)v89 setDerivedKBStarPrefixName:@"Dynamic"];
  }
LABEL_159:

  return v89;
}

BOOL UIKeyboardShouldMatchHeightWithPredictionViewOnLandscapeLargePhoneKeyboard(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    uint64_t v2 = KBStarLayoutString(v1);
    BOOL v3 = ([v2 containsString:@"Pinyin10"] & 1) != 0
      || ([v2 containsString:@"Kana"] & 1) != 0
      || ([v2 containsString:@"Wubihua"] & 1) != 0
      || [v2 containsString:@"HWR"];
  }
  else
  {
    BOOL v3 = 0;
  }

  return v3;
}

BOOL UIKeyboardShouldAddMarginOnLandscapeLargePhoneKeyboard(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    uint64_t v2 = KBStarLayoutString(v1);
    BOOL v3 = ([v2 containsString:@"Pinyin10"] & 1) != 0
      || ([v2 containsString:@"Korean10Key"] & 1) != 0
      || ([v2 containsString:@"Kana"] & 1) != 0
      || ([v2 containsString:@"Wubihua"] & 1) != 0
      || [v2 containsString:@"HWR"];
  }
  else
  {
    BOOL v3 = 0;
  }

  return v3;
}

__CFString *UIKeyboardPhoneLayoutToUseForCarPlayInputMode(void *a1)
{
  id v1 = a1;
  KBStarLayoutString(v1);
  uint64_t v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if (!_UIKeyboardCarPlaySupportsTouch())
  {
    if (UIKeyboardLayoutDefaultTypeForInputModeIsSecure(v1)) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if ([(__CFString *)v2 isEqualToString:@"Kana-Flick"])
  {

    uint64_t v2 = @"Kana";
  }
  if ([(__CFString *)v2 isEqualToString:@"Thai-Four-Row"])
  {

    uint64_t v2 = @"Thai";
  }
  if (([(__CFString *)v2 hasPrefix:@"HWR"] & 1) != 0
    || ([v1 hasPrefix:@"emoji"] & 1) != 0)
  {
LABEL_10:

    uint64_t v2 = 0;
  }
LABEL_11:
  BOOL v3 = +[UIKeyboardPreferencesController sharedPreferencesController];
  BOOL v4 = [v3 preferencesActions];
  int v5 = [v4 inputModeSupportsCrescendo:v1];

  if (v5)
  {

    uint64_t v2 = @"QWERTY";
  }

  return v2;
}

void __UIKeyboardComputeKeyboardIdiomFromScreenTraits_block_invoke()
{
  id v0 = +[UIDevice currentDevice];
  id v1 = [v0 _deviceInfoForKey:@"main-screen-class"];
  int v2 = [v1 integerValue];

  _MergedGlobals_1113 = v2 == 28;
}

id UIKeyboardGetKBStarKeyboard(void *a1, uint64_t a2)
{
  id v3 = a1;
  BOOL v4 = +[UIKeyboardImpl keyboardScreen];
  int v5 = +[UIKeyboard activeKeyboard];
  id v6 = +[UIKBScreenTraits traitsWithScreen:orientation:](UIKBScreenTraits, "traitsWithScreen:orientation:", v4, [v5 interfaceOrientation]);

  id v7 = UIKeyboardGetKBStarName(v3, v6, a2, 0);

  id v8 = UIKeyboardGetKBStarKeyboardWithName(v7);

  return v8;
}

id UIKeyboardGetKBStarName(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a1;
  id v8 = a2;
  unint64_t v9 = [v8 idiom];
  UIKeyboardComputeKeyboardIdiomFromScreenTraits(v8, v9, [v8 isSplit]);
  if ([v8 isFloating]) {
    unint64_t v9 = 0;
  }
  double v10 = +[UIKeyboardPreferencesController sharedPreferencesController];
  unint64_t v11 = [v10 preferencesActions];
  char v12 = [v11 inputModeSupportsCrescendo:v7];

  if (v9 == 3)
  {
    uint64_t v16 = UIKeyboardGetDerivedKeyboard(v7, v8, a3);
    id v17 = [v16 derivedKBStarPrefixName];

    if (v17)
    {
      id v18 = [v16 derivedKBStarPrefixName];
      long long v19 = KBStarLayoutString(v7);
      long long v20 = UIKeyboardPhoneLayoutToUseForCarPlayInputMode(v7);
      long long v21 = v20;
      if (v20)
      {
        id v22 = v20;

        long long v19 = v22;
      }
      uint64_t v15 = [MEMORY[0x1E4F28E78] stringWithFormat:@"%@-%@", v18, v19];

LABEL_32:
      if (v15)
      {
LABEL_33:
        uint64_t v38 = 0;
        goto LABEL_77;
      }
      goto LABEL_46;
    }
    int v32 = (void *)MEMORY[0x1E4F28E78];
    id v18 = KBStarLayoutString(v7);
    [v32 stringWithFormat:@"%@-Landscape-%@", @"Car", v18, v77, v79, v80];
    uint64_t v15 = LABEL_31:;
    goto LABEL_32;
  }
  if (v9 == 2)
  {
    if (a3 <= 0xB && ((1 << a3) & 0x930) != 0 || a3 == 127)
    {
      int v13 = (void *)MEMORY[0x1E4F28E78];
      double v14 = KBStarTypeStringWithTVLinearKeyboardLayout(a3, [v8 isLinear]);
      uint64_t v15 = [v13 stringWithFormat:@"%@-Linear-%@", @"Monolith", v14];

      if (v15) {
        goto LABEL_33;
      }
    }
    uint64_t v33 = (void *)MEMORY[0x1E4F28E78];
    if ([v8 isLinear]) {
      uint64_t v34 = @"Linear-";
    }
    else {
      uint64_t v34 = &stru_1ED0E84C0;
    }
    BOOL v35 = a3 == 120 || a3 == 10;
    uint64_t v36 = a4;
    if (v35) {
      CGFloat v37 = @"Uncased-";
    }
    else {
      CGFloat v37 = &stru_1ED0E84C0;
    }
    uint64_t v16 = KBStarLayoutStringForIdiom(2, v7);
    id v18 = KBStarTypeStringWithTVLinearKeyboardLayout(a3, [v8 isLinear]);
    BOOL v78 = v37;
    a4 = v36;
    [v33 stringWithFormat:@"%@-%@%@%@-%@", @"Monolith", v34, v78, v16, v18];
    goto LABEL_31;
  }
  if (v9 > 1)
  {
LABEL_46:
    uint64_t v38 = @"iPhone-Portrait";
    goto LABEL_47;
  }
  char v23 = UIKeyboardGetDerivedKeyboard(v7, v8, a3);
  uint64_t v24 = v23;
  char v25 = v12 ^ 1;
  if (a3 == 127) {
    char v25 = 1;
  }
  if (v25)
  {
    double v39 = [v23 derivedKBStarPrefixName];

    if (v39)
    {
      uint64_t v38 = [v24 derivedKBStarPrefixName];
    }
    else
    {
      double v55 = [getTUIKeyboardLayoutFactoryClass() sharedKeyboardFactory];
      [v8 keyboardWidth];
      objc_msgSend(v55, "keyboardPrefixForWidth:andEdge:", objc_msgSend(v8, "isKeyboardMinorEdgeWidth"), round(v56));
      uint64_t v38 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    [v8 keyboardScreenReferenceSize];
    double v27 = v26;
    double v29 = v28;
    if ([v8 isFloating])
    {
      [v8 keyboardWidth];
      double v27 = v30;
      [v8 keyboardWidth];
      double v29 = v31;
    }
    else if (v9 == 1)
    {
      double v40 = [v8 screen];
      [v40 scale];
      double v41 = 1.0;
      if (v42 > 0.0)
      {
        double v43 = [v8 screen];
        [v43 scale];
        double v41 = v44;
      }
      double v45 = [v8 screen];
      [v45 nativeBounds];
      double v47 = v46;
      double v49 = v48;

      double v27 = v47 / v41;
      double v29 = v49 / v41;
    }
    double v50 = [getTUIKeyboardLayoutFactoryClass() sharedKeyboardFactory];
    double v51 = objc_msgSend(v50, "keyboardSuffixForScreenDimensions:", v27, v29);

    if ((a3 > 0xB || ((1 << a3) & 0x930) == 0) && a3 != 127 || v9)
    {
      double v74 = (void *)MEMORY[0x1E4F28E78];
      double v75 = KBStarLayoutStringForIdiom(v9, v7);
      KBStarTypeString(v9, a3);
      v76 = double v81 = v24;
      uint64_t v38 = @"Dynamic";
      uint64_t v15 = [v74 stringWithFormat:@"%@-%@-%@-%@", @"Dynamic", v75, v51, v76];

      if (v15) {
        goto LABEL_77;
      }
      goto LABEL_47;
    }
    [v8 keyboardWidth];
    double v53 = round(v52);
    BOOL v54 = [getTUIKeyboardLayoutFactoryClass() sharedKeyboardFactory];
    objc_msgSend(v54, "keyboardPrefixForWidth:andEdge:", objc_msgSend(v8, "isKeyboardMinorEdgeWidth"), v53);
    uint64_t v38 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  if (!v38) {
    goto LABEL_46;
  }
LABEL_47:
  if (a3 == 127 || !v9)
  {
    if (a3 <= 0xB && ((1 << a3) & 0x930) != 0)
    {
      BOOL v57 = (void *)MEMORY[0x1E4F28E78];
      double v58 = KBStarTypeString(v9, a3);
      uint64_t v59 = KBStarLayoutString(v7);
      BOOL v60 = (void *)v59;
      double v61 = &stru_1ED0E84C0;
      double v62 = @"RightHanded";
      if (a4 != 1) {
        double v62 = &stru_1ED0E84C0;
      }
      if (a4 == 2) {
        double v62 = @"LeftHanded";
      }
      if (a3 != 127) {
        double v61 = v62;
      }
      uint64_t v15 = [v57 stringWithFormat:@"%@-%@-%@-%@", v38, v58, v59, v61];

      goto LABEL_58;
    }
    if (a3 == 127)
    {
      BOOL v63 = (void *)MEMORY[0x1E4F28E78];
      uint64_t v64 = KBStarTypeString(v9, 127);
      double v58 = (void *)v64;
      double v65 = &stru_1ED0E84C0;
      BOOL v66 = @"RightHanded";
      if (a4 != 1) {
        BOOL v66 = &stru_1ED0E84C0;
      }
      if (a4 == 2) {
        BOOL v66 = @"LeftHanded";
      }
      if (a3 != 127) {
        double v65 = v66;
      }
      uint64_t v15 = [v63 stringWithFormat:@"%@-%@-%@", v38, v64, v65];
LABEL_58:

      if (v15) {
        goto LABEL_77;
      }
    }
  }
  uint64_t v15 = 0;
  if (v9 <= 4 && ((1 << v9) & 0x13) != 0)
  {
    BOOL v67 = (void *)MEMORY[0x1E4F28E78];
    double v68 = KBStarLayoutStringForIdiom(v9, v7);
    double v69 = &stru_1ED0E84C0;
    double v70 = @"RightHanded";
    if (a4 != 1) {
      double v70 = &stru_1ED0E84C0;
    }
    if (a4 == 2) {
      double v70 = @"LeftHanded";
    }
    if (a3 != 127) {
      double v69 = v70;
    }
    double v71 = v69;
    double v72 = KBStarTypeString(v9, a3);
    uint64_t v15 = [v67 stringWithFormat:@"%@-%@-%@-%@", v38, v68, v71, v72];
  }
LABEL_77:
  while (objc_msgSend(v15, "replaceOccurrencesOfString:withString:options:range:", @"--", @"-", 2, 0, objc_msgSend(v15, "length")));
  while ([v15 length])
  {
    if (![v15 hasPrefix:@"-"]) {
      break;
    }
    objc_msgSend(v15, "deleteCharactersInRange:", 0, 1);
  }
  while ([v15 length])
  {
    if (![v15 hasSuffix:@"-"]) {
      break;
    }
    objc_msgSend(v15, "deleteCharactersInRange:", objc_msgSend(v15, "length") - 1, 1);
  }

  return v15;
}

id UIKeyboardGetKBStarKeyboardWithName(void *a1)
{
  id v1 = a1;
  int v2 = [getTUIKeyboardLayoutFactoryClass() sharedKeyboardFactory];
  id v3 = [MEMORY[0x1E4F1CA60] dictionary];
  BOOL v4 = [v2 keyboardWithName:v1 inCache:v3];

  return v4;
}

uint64_t UIKeyboardCarPlayRequiresTouch()
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (!_UIKeyboardCarPlaySupportsTouch()) {
    return 0;
  }
  id v0 = +[UIKeyboardInputModeController sharedInputModeController];
  id v1 = [v0 activeInputModeIdentifiers];

  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  id v2 = v1;
  uint64_t v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v8;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v8 != v4) {
          objc_enumerationMutation(v2);
        }
        if (UIKeyboardAlwaysShowCandidateBarForInputMode())
        {
          uint64_t v3 = 1;
          goto LABEL_13;
        }
      }
      uint64_t v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
      if (v3) {
        continue;
      }
      break;
    }
  }
LABEL_13:

  return v3;
}

uint64_t _UIKeyboardCarPlaySupportsTouch()
{
  id v0 = (void *)UIKeyboardSupportsTouch;
  if (UIKeyboardSupportsTouch)
  {
    return [v0 BOOLValue];
  }
  else
  {
    +[_UICarPlaySession sharedInstance]();
    id v2 = (os_unfair_lock_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v3 = -[_UICarPlaySession currentSession](v2);

    uint64_t v4 = [v3 configuration];
    int v5 = [v4 screens];
    id v6 = [v5 firstObject];

    if (v6 && ([v6 availableInteractionModels] & 2) != 0) {
      uint64_t v7 = MEMORY[0x1E4F1CC38];
    }
    else {
      uint64_t v7 = MEMORY[0x1E4F1CC28];
    }
    long long v8 = (void *)UIKeyboardSupportsTouch;
    UIKeyboardSupportsTouch = v7;

    uint64_t v9 = [(id)UIKeyboardSupportsTouch BOOLValue];
    return v9;
  }
}

uint64_t UIKeyboardCarPlayIsRightHandDrive()
{
  id v0 = (void *)UIKeyboardCachedIsRightHandDrive;
  if (UIKeyboardCachedIsRightHandDrive)
  {
    return [v0 BOOLValue];
  }
  else
  {
    +[_UICarPlaySession sharedInstance]();
    id v2 = (os_unfair_lock_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v3 = -[_UICarPlaySession currentSession](v2);

    uint64_t v4 = NSNumber;
    int v5 = [v3 configuration];
    uint64_t v6 = objc_msgSend(v4, "numberWithBool:", objc_msgSend(v5, "rightHandDrive"));
    uint64_t v7 = (void *)UIKeyboardCachedIsRightHandDrive;
    UIKeyboardCachedIsRightHandDrive = v6;

    uint64_t v8 = [(id)UIKeyboardCachedIsRightHandDrive BOOLValue];
    return v8;
  }
}

void UIKeyboardResetCarPlayInformationCache()
{
  id v0 = (void *)UIKeyboardSupportsTouch;
  UIKeyboardSupportsTouch = 0;

  id v1 = (void *)UIKeyboardCachedIsRightHandDrive;
  UIKeyboardCachedIsRightHandDrive = 0;
}

uint64_t UIKeyboardIsCarPlayFiveRowKeyboardEnabled()
{
  return UIKeyboardCarPlayFiveRowKeyboardEnabled;
}

uint64_t UIKeyboardSetCarPlayFiveRowKeyboardEnabled(uint64_t result)
{
  UIKeyboardCarPlayFiveRowKeyboardEnableCGFloat d = result;
  return result;
}

uint64_t UIKeyboardIsFiveRowKeyboard(void *a1)
{
  id v1 = a1;
  if (qword_1EB2616B8 != -1) {
    dispatch_once(&qword_1EB2616B8, &__block_literal_global_450_0);
  }
  uint64_t v2 = [v1 softwareLayout];
  if (v2
    && (uint64_t v3 = (void *)v2,
        uint64_t v4 = qword_1EB2616C0,
        [v1 softwareLayout],
        int v5 = objc_claimAutoreleasedReturnValue(),
        LOBYTE(v4) = [(id)v4 containsObject:v5],
        v5,
        v3,
        (v4 & 1) != 0))
  {
    uint64_t v6 = 1;
  }
  else
  {
    uint64_t v7 = [v1 primaryLanguage];
    int v8 = [v7 hasPrefix:@"ja"];

    if (v8)
    {
      uint64_t v9 = [v1 softwareLayout];
      uint64_t v6 = [v9 isEqualToString:@"QWERTY-Japanese"];
    }
    else
    {
      long long v10 = [v1 primaryLanguage];
      if ([v10 hasPrefix:@"zh"])
      {
      }
      else
      {
        unint64_t v11 = [v1 primaryLanguage];
        int v12 = [v11 hasPrefix:@"yue"];

        if (!v12)
        {
          uint64_t v6 = 0;
          goto LABEL_15;
        }
      }
      uint64_t v9 = [v1 softwareLayout];
      if ([v9 hasPrefix:@"Pinyin10"])
      {
        uint64_t v6 = 0;
      }
      else
      {
        int v13 = [v1 softwareLayout];
        uint64_t v6 = [v13 hasPrefix:@"Wubihua"] ^ 1;
      }
    }
  }
LABEL_15:

  return v6;
}

void __UIKeyboardIsFiveRowKeyboard_block_invoke()
{
  uint64_t v0 = objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", @"Armenian", @"Kazakh-Cyrillic", @"Khmer", @"Lao", @"Thai", 0);
  id v1 = (void *)qword_1EB2616C0;
  qword_1EB2616C0 = v0;
}

id UIKeyboardGetKBStarKeyboardName(void *a1, uint64_t a2, uint64_t a3)
{
  id v4 = a1;
  int v5 = +[UIKBScreenTraits traitsWithScreen:0 orientation:0];
  uint64_t v6 = UIKeyboardGetKBStarName(v4, v5, a3, 0);

  return v6;
}

BOOL UIKeyboardTypeIsNumberPad(unsigned int a1)
{
  BOOL result = 1;
  if (a1 > 0xB || ((1 << a1) & 0x930) == 0) {
    return a1 == 127;
  }
  return result;
}

__CFString *KBStarTypeStringWithTVLinearKeyboardLayout(int a1, int a2)
{
  if (a1 > 119)
  {
    switch(a1)
    {
      case '\x7F':
        return @"PasscodePad";
      case 'y':
        if (!a2) {
          return @"Numbered";
        }
        break;
      case 'x':
LABEL_7:
        if (a2) {
          return @"Slim";
        }
        else {
          return @"AlphaWithURL";
        }
    }
    return &stru_1ED0E84C0;
  }
  int v2 = a1 - 4;
  BOOL result = @"Email";
  switch(v2)
  {
    case 0:
    case 7:
      BOOL result = @"NumberPad";
      break;
    case 1:
      BOOL result = @"PhonePad";
      break;
    case 3:
      return result;
    case 4:
      BOOL result = @"DecimalPad";
      break;
    case 6:
      goto LABEL_7;
    default:
      return &stru_1ED0E84C0;
  }
  return result;
}

__CFString *KBStarLayoutStringForIdiom(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = TIInputModeGetComponentsFromIdentifier();
  int v5 = TIInputModeGetNormalizedIdentifierFromComponents();
  uint64_t v6 = UIKeyboardGetSupportedSoftwareKeyboardsForInputModeAndIdiom(v5, a1);
  if (v4)
  {
    uint64_t v7 = [v4 objectForKey:@"sw"];
    if (v7)
    {
      if ([v6 containsObject:v7])
      {
        int v8 = v7;
        goto LABEL_19;
      }
      if ([v6 count])
      {
        uint64_t v7 = v7;
        uint64_t v9 = TIInputModeGetNormalizedIdentifier();
        long long v10 = TIGetInputModeProperties();

        int v8 = [v10 objectForKey:@"SWLayoutMap"];
        if (!v8)
        {
          int v8 = @"QWERTY";
          if (([(__CFString *)v7 hasPrefix:@"QWERTY"] & 1) == 0)
          {
            int v8 = @"AZERTY";
            if (([(__CFString *)v7 hasPrefix:@"AZERTY"] & 1) == 0)
            {
              int v8 = @"QWERTZ";
              if (([(__CFString *)v7 hasPrefix:@"QWERTZ"] & 1) == 0) {
                int v8 = v7;
              }
            }
          }
        }

        if ([v6 containsObject:v8])
        {

          if (v8) {
            goto LABEL_19;
          }
          goto LABEL_16;
        }
      }
    }
  }
LABEL_16:
  if (![v6 count]
    || ([v6 objectAtIndex:0], (int v8 = (__CFString *)objc_claimAutoreleasedReturnValue()) == 0))
  {
    int v8 = @"QWERTY";
  }
LABEL_19:

  return v8;
}

__CFString *KBStarTypeString(uint64_t a1, int a2)
{
  if (a1 == 1)
  {
    switch(a2)
    {
      case 3:
LABEL_16:
        BOOL result = @"URL";
        break;
      case 4:
      case 5:
      case 8:
      case 11:
        BOOL result = @"Pad";
        break;
      case 6:
LABEL_17:
        BOOL result = @"NamePhonePad";
        break;
      case 7:
LABEL_18:
        BOOL result = @"Email";
        break;
      case 9:
LABEL_19:
        BOOL result = @"Twitter";
        break;
      case 10:
        goto LABEL_15;
      default:
LABEL_11:
        if (a2 == 120)
        {
LABEL_15:
          BOOL result = @"AlphaWithURL";
        }
        else if (a2 == 127)
        {
          BOOL result = @"PasscodePad";
        }
        else
        {
          BOOL result = &stru_1ED0E84C0;
        }
        break;
    }
  }
  else if (a1 == 2)
  {
    uint64_t v9 = v2;
    uint64_t v10 = v3;
    if (os_variant_has_internal_diagnostics())
    {
      uint64_t v6 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_fault_impl(&dword_1853B0000, v6, OS_LOG_TYPE_FAULT, "Must call KBStarTypeStringWithTVLinearKeyboardLayout(...) on tvOS.", buf, 2u);
      }
    }
    else
    {
      id v4 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &KBStarTypeString___s_category) + 8);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v7 = 0;
        _os_log_impl(&dword_1853B0000, v4, OS_LOG_TYPE_ERROR, "Must call KBStarTypeStringWithTVLinearKeyboardLayout(...) on tvOS.", v7, 2u);
      }
    }
    return &stru_1ED0E84C0;
  }
  else
  {
    switch(a2)
    {
      case 3:
        goto LABEL_16;
      case 4:
      case 11:
        BOOL result = @"NumberPad";
        break;
      case 5:
        BOOL result = @"PhonePad";
        break;
      case 6:
        goto LABEL_17;
      case 7:
        goto LABEL_18;
      case 8:
        BOOL result = @"DecimalPad";
        break;
      case 9:
        goto LABEL_19;
      case 10:
        goto LABEL_15;
      default:
        goto LABEL_11;
    }
  }
  return result;
}

id UIKeyboardGetKBStarKeyboardLayout(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = [a1 componentsSeparatedByString:@"-"];
  uint64_t v10 = [MEMORY[0x1E4F1CA48] array];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v2 = v1;
  uint64_t v3 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v12 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v11 + 1) + 8 * i);
        if (([v7 isEqualToString:@"Portrait"] & 1) == 0
          && ([v7 isEqualToString:@"Caymen"] & 1) == 0
          && ([v7 isEqualToString:@"Landscape"] & 1) == 0
          && ([v7 isEqualToString:@"Email"] & 1) == 0
          && ([v7 isEqualToString:@"NamePhonePad"] & 1) == 0
          && ([v7 isEqualToString:@"URL"] & 1) == 0
          && ([v7 isEqualToString:@"Twitter"] & 1) == 0
          && ([v7 isEqualToString:@"Capital"] & 1) == 0
          && ([v7 isEqualToString:@"Small"] & 1) == 0
          && ([v7 isEqualToString:@"Display"] & 1) == 0
          && ([v7 isEqualToString:@"Keyset"] & 1) == 0)
        {
          [v10 addObject:v7];
        }
      }
      uint64_t v4 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v4);
  }

  if ([v10 count])
  {
    int v8 = [v10 componentsJoinedByString:@"-"];
  }
  else
  {
    int v8 = 0;
  }

  return v8;
}

uint64_t UIKeyboardLayoutSupportsNumberPads(void *a1)
{
  id v1 = a1;
  if (!UIKeyboardLayoutSupportsNumberPads___dict)
  {
    id v2 = objc_alloc(MEMORY[0x1E4F1CA60]);
    uint64_t v3 = [NSNumber numberWithBool:0];
    uint64_t v4 = objc_msgSend(v2, "initWithObjectsAndKeys:", v3, @"emoji", 0);
    uint64_t v5 = (void *)UIKeyboardLayoutSupportsNumberPads___dict;
    UIKeyboardLayoutSupportsNumberPads___dict = v4;
  }
  uint64_t v6 = TICanonicalInputModeName();
  uint64_t v7 = [(id)UIKeyboardLayoutSupportsNumberPads___dict objectForKey:v6];
  int v8 = v7;
  if (v7) {
    uint64_t v9 = [v7 BOOLValue];
  }
  else {
    uint64_t v9 = 1;
  }

  return v9;
}

uint64_t UIKeyboardInputModeWithTypeUsesKBStar(void *a1, unsigned int a2)
{
  id v3 = a1;
  uint64_t v4 = UIKeyboardInputModeUsesKBStar(v3);
  if (a2 <= 0xB && ((1 << a2) & 0x930) != 0 || a2 == 127) {
    uint64_t v4 = UIKeyboardLayoutSupportsNumberPads(v3) & v4;
  }

  return v4;
}

uint64_t UIKeyboardInputModeUsesKBStar(void *a1)
{
  id v1 = a1;
  if (!UIKeyboardInputModeUsesKBStar___dict)
  {
    id v2 = objc_alloc(MEMORY[0x1E4F1CA60]);
    uint64_t v3 = objc_msgSend(v2, "initWithObjectsAndKeys:", @"dictation", MEMORY[0x1E4F1CC28], @"autofillsignup", 0);
    uint64_t v4 = (void *)UIKeyboardInputModeUsesKBStar___dict;
    UIKeyboardInputModeUsesKBStar___dict = v3;
  }
  uint64_t v5 = TICanonicalInputModeName();
  uint64_t v6 = [(id)UIKeyboardInputModeUsesKBStar___dict objectForKey:v5];
  uint64_t v7 = v6;
  if (v6) {
    uint64_t v8 = [v6 BOOLValue];
  }
  else {
    uint64_t v8 = 1;
  }

  return v8;
}

BOOL UIKeyboardTypeSupportsDictationSpelling(uint64_t a1)
{
  return (unint64_t)(a1 - 2) < 7 || a1 == 123 || a1 == 11;
}

uint64_t UIKeyboardInputModeSWLayoutScript(void *a1)
{
  id v1 = a1;
  if (!UIKeyboardInputModeSWLayoutScript___dict)
  {
    id v21 = objc_alloc(MEMORY[0x1E4F1CA60]);
    long long v20 = [NSNumber numberWithUnsignedInt:1281455214];
    double v26 = [NSNumber numberWithUnsignedInt:1281455214];
    char v25 = [NSNumber numberWithUnsignedInt:1281455214];
    uint64_t v24 = [NSNumber numberWithUnsignedInt:1281455214];
    char v23 = [NSNumber numberWithUnsignedInt:1132032620];
    long long v19 = [NSNumber numberWithUnsignedInt:1132032620];
    id v22 = [NSNumber numberWithUnsignedInt:1132032620];
    id v2 = [NSNumber numberWithUnsignedInt:1132032620];
    uint64_t v3 = [NSNumber numberWithUnsignedInt:1132032620];
    uint64_t v4 = [NSNumber numberWithUnsignedInt:1098015074];
    id v18 = [NSNumber numberWithUnsignedInt:1098015074];
    id v17 = [NSNumber numberWithUnsignedInt:1214603890];
    uint64_t v5 = [NSNumber numberWithUnsignedInt:1198679403];
    uint64_t v6 = [NSNumber numberWithUnsignedInt:1147500129];
    uint64_t v7 = [NSNumber numberWithUnsignedInt:1197830002];
    uint64_t v8 = [NSNumber numberWithUnsignedInt:1215262311];
    uint64_t v9 = objc_msgSend(v21, "initWithObjectsAndKeys:", v20, @"QWERTY", v26, @"QWERTZ", v25, @"AZERTY", v24, @"Czech", v23, @"Russian", v19, @"Bulgarian", v22, @"Macedonian", v2, @"Serbian", v3,
           @"Ukrainian",
           v4,
           @"Arabic",
           v18,
           @"Persian",
           v17,
           @"Hebrew",
           v5,
           @"Greek",
           v6,
           @"Devangari",
           v7,
           @"Georgian",
           v8,
           @"Korean",
           0);
    uint64_t v10 = (void *)UIKeyboardInputModeSWLayoutScript___dict;
    UIKeyboardInputModeSWLayoutScript___dict = v9;
  }
  long long v11 = [v1 componentsSeparatedByString:@"-"];
  long long v12 = [v11 objectAtIndex:0];

  long long v13 = [(id)UIKeyboardInputModeSWLayoutScript___dict objectForKey:v12];
  long long v14 = v13;
  if (v13) {
    uint64_t v15 = [v13 unsignedIntValue];
  }
  else {
    uint64_t v15 = 0;
  }

  return v15;
}

uint64_t UIKeyboardInputModeLanguageMatchesLocaleLanguage(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = TIInputModeGetLanguageWithRegion();
  uint64_t v4 = UIKeyboardGetComponentsFromLanguageIdentifier(v3);

  uint64_t v5 = [v2 localeIdentifier];

  uint64_t v6 = UIKeyboardGetComponentsFromLanguageIdentifier(v5);

  uint64_t v7 = *MEMORY[0x1E4F1C438];
  uint64_t v8 = [v4 objectForKey:*MEMORY[0x1E4F1C438]];
  uint64_t v9 = [v6 objectForKey:v7];
  int v10 = [v8 isEqualToString:v9];

  if (v10)
  {
    uint64_t v11 = *MEMORY[0x1E4F1C470];
    uint64_t v12 = [v4 objectForKey:*MEMORY[0x1E4F1C470]];
    uint64_t v13 = [v6 objectForKey:v11];
    if (v12 | v13) {
      uint64_t v14 = [(id)v12 isEqualToString:v13];
    }
    else {
      uint64_t v14 = 1;
    }
  }
  else
  {
    uint64_t v14 = 0;
  }

  return v14;
}

id UIKeyboardInputModeGetNumericLocale(void *a1)
{
  id v1 = a1;
  id v2 = [MEMORY[0x1E4F1CA20] preferredLocale];
  uint64_t v3 = [MEMORY[0x1E4F1CA20] currentLocale];
  if (UIKeyboardInputModeLanguageMatchesLocaleLanguage((uint64_t)v1, v2))
  {
    id v4 = v2;
LABEL_5:
    uint64_t v5 = v4;
    goto LABEL_9;
  }
  if (UIKeyboardInputModeLanguageMatchesLocaleLanguage((uint64_t)v1, v3))
  {
    id v4 = v3;
    goto LABEL_5;
  }
  uint64_t v6 = (void *)MEMORY[0x1E4F1CA20];
  uint64_t v7 = TIInputModeGetLanguageWithRegion();
  uint64_t v8 = [v6 componentsFromLocaleIdentifier:v7];
  uint64_t v9 = (void *)[v8 mutableCopy];

  int v10 = UIKeyboardLocalizedString(@"UI-DefaultLocaleNumericID", v1, 0, 0);
  if ([v10 length]) {
    [v9 setObject:v10 forKey:@"numbers"];
  }
  uint64_t v11 = (void *)MEMORY[0x1E4F1CA20];
  uint64_t v12 = [MEMORY[0x1E4F1CA20] localeIdentifierFromComponents:v9];
  uint64_t v5 = [v11 localeWithLocaleIdentifier:v12];

LABEL_9:
  id v13 = v5;

  return v13;
}

id UIKeyboardInputModeGetDecimalSeparator(void *a1)
{
  id v1 = (void *)MEMORY[0x1E4F1CA20];
  id v2 = a1;
  uint64_t v3 = [v1 currentLocale];
  id v4 = UIKeyboardInputModeGetNumericLocale(v2);

  uint64_t v5 = [v3 numberingSystem];
  uint64_t v6 = [v4 numberingSystem];
  int v7 = [v5 isEqualToString:v6];

  if (v7) {
    uint64_t v8 = v3;
  }
  else {
    uint64_t v8 = v4;
  }
  uint64_t v9 = [v8 objectForKey:*MEMORY[0x1E4F1C418]];

  return v9;
}

uint64_t UIKeyboardGetCurrentIdiom()
{
  if ((UIKeyboardGetSafeDeviceIdiom() & 0xFFFFFFFFFFFFFFFBLL) == 1
    && !+[UIKeyboardImpl isSplit])
  {
    return +[UIKeyboardImpl isFloating] ^ 1;
  }
  else
  {
    return 0;
  }
}

unint64_t UIKeyboardGetTIUserInterfaceIdiom(unint64_t result)
{
  if (result >= 5) {
    return -1;
  }
  return result;
}

id UIKeyboardLayoutClassForInputMode(void *a1)
{
  id v1 = a1;
  if (!UIKeyboardLayoutClassForInputMode___dict)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA60]), "initWithObjectsAndKeys:", @"UIKeyboardLayoutDictation", @"dictation", 0);
    uint64_t v3 = (void *)UIKeyboardLayoutClassForInputMode___dict;
    UIKeyboardLayoutClassForInputMode___dict = v2;
  }
  id v4 = TICanonicalInputModeName();
  uint64_t v5 = [(id)UIKeyboardLayoutClassForInputMode___dict objectForKey:v4];
  objc_opt_class();
  uint64_t v6 = v5;
  if (objc_opt_isKindOfClass())
  {
    id v7 = v5;
    uint64_t v8 = TIBundleForInputMode();
    uint64_t v9 = v8;
    if (v8 && (uint64_t v6 = (void *)[v8 classNamed:v7]) != 0
      || (_UIKitBundle(),
          int v10 = objc_claimAutoreleasedReturnValue(),
          uint64_t v6 = (void *)[v10 classNamed:v7],
          v10,
          v6))
    {
      [(id)UIKeyboardLayoutClassForInputMode___dict setObject:v6 forKey:v4];
    }
  }
  id v11 = v6;

  return v11;
}

uint64_t UIKeyboardLayoutDefaultTypeForInputModeIsASCIICapableExtended(void *a1)
{
  id v1 = a1;
  uint64_t v2 = _UIMainBundleIdentifier();
  int v3 = [v2 isEqualToString:@"com.apple.sidecar.extension.display"];

  unsigned int IsASCIICapable = UIKeyboardLayoutDefaultTypeForInputModeIsASCIICapable(v1);
  uint64_t v5 = v3 ^ 1 | IsASCIICapable;
  if ((v3 & 1) == 0 && (IsASCIICapable & 1) == 0)
  {
    uint64_t v6 = TICanonicalInputModeName();
    uint64_t v5 = [v6 isEqualToString:@"ja_JP-Kana"];
  }
  return v5;
}

uint64_t UIKeyboardLayoutDefaultTypeForInputModeIsASCIICapable(void *a1)
{
  id v1 = a1;
  uint64_t v2 = TIInputModeGetNormalizedIdentifier();
  int v3 = TIGetInputModeProperties();
  if (!v3)
  {
    id v4 = +[UIKeyboardInputMode keyboardInputModeWithIdentifier:v1];
    if ([v4 isExtensionInputMode])
    {
      uint64_t v5 = [v4 defaultLayoutIsASCIICapable];
      goto LABEL_9;
    }
  }
  uint64_t v6 = [v3 objectForKey:*MEMORY[0x1E4FAE678]];
  id v4 = v6;
  uint64_t v5 = !v6 || [v6 BOOLValue];
LABEL_9:

  return v5;
}

uint64_t UIKeyboardLayoutSupportsASCIIToggleKey(void *a1)
{
  id v1 = a1;
  if ((UIKeyboardLayoutDefaultTypeForInputModeIsASCIICapable(v1) & 1) == 0)
  {
    int v3 = TIInputModeGetNormalizedIdentifier();
    id v4 = TIGetInputModeProperties();
    uint64_t v5 = [v4 objectForKey:*MEMORY[0x1E4FAE730]];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      if (([v5 BOOLValue] & 1) == 0)
      {
LABEL_11:
        uint64_t v2 = 0;
        goto LABEL_12;
      }
    }
    else
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        if ([v5 isEqualToString:@"Never"]) {
          goto LABEL_11;
        }
        if ([v5 isEqualToString:@"Hardware"])
        {
          uint64_t v6 = +[UIKeyboardImpl activeInstance];
          int v7 = [v6 isInHardwareKeyboardMode];

          if (!v7) {
            goto LABEL_11;
          }
        }
      }
    }
    uint64_t v2 = 1;
LABEL_12:

    goto LABEL_13;
  }
  uint64_t v2 = 0;
LABEL_13:

  return v2;
}

id UIKeyboardGetPreferredASCIICapableInputModeForInputMode(uint64_t a1)
{
  return UIKeyboardGetInputModeForKey(a1, @"UIKeyboardPreferredASCIICapableInputMode");
}

id UIKeyboardGetInputModeForKey(uint64_t a1, void *a2)
{
  id v2 = a2;
  int v3 = TIInputModeGetNormalizedIdentifier();
  id v4 = TIGetInputModeProperties();
  uint64_t v5 = [v4 objectForKey:v2];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v6 = v5;
  }
  else {
    id v6 = 0;
  }

  return v6;
}

id UIKeyboardGetPreferredNonASCIICapableInputModeForInputMode(uint64_t a1)
{
  return UIKeyboardGetInputModeForKey(a1, @"UIKeyboardPreferredNonASCIICapableInputMode");
}

uint64_t UIKeyboardStaticUnigramsFilePathForInputModeAndFileExtension()
{
  return MEMORY[0x1F4163D50]();
}

uint64_t UIKeyboardNgramModelPathForInputMode()
{
  return MEMORY[0x1F4163D40]();
}

id UIKeyboardImageWithName(void *a1)
{
  id v1 = a1;
  id v2 = UIKeyboardGetCurrentInputMode();
  id v3 = v1;
  id v4 = +[UIKeyboardPreferencesController sharedPreferencesController];
  uint64_t v5 = [v4 preferencesActions];
  [v5 rivenSizeFactor:1.0];
  double v7 = v6;

  uint64_t v8 = v3;
  if (v7 > 1.0)
  {
    uint64_t v8 = [v3 stringByAppendingString:@"-163r.png"];
  }
  if (([v8 hasSuffix:@".png"] & 1) == 0)
  {
    uint64_t v9 = [v8 stringByAppendingString:@".png"];

    uint64_t v8 = (void *)v9;
  }
  int v10 = _UIImageWithName(v8);

  return v10;
}

uint64_t UIKeyboardCheckSpellingEnabled()
{
  uint64_t v0 = +[UIKeyboardImpl activeInstance];
  uint64_t v1 = [v0 checkSpellingPreferenceForTraits];

  return v1;
}

uint64_t UIKeyboardAutocorrectSpellingEnabled()
{
  return UIKeyboardAutocorrectSpellingFlag;
}

uint64_t UIKeyboardSetAutocorrectSpellingEnabled(uint64_t result)
{
  UIKeyboardAutocorrectSpellingFlag = result;
  return result;
}

uint64_t UIKeyboardAutocorrectSpellingForInputMode()
{
  if (!UIKeyboardAutocorrectSpellingFlag) {
    return 0;
  }
  uint64_t v0 = TIInputModeGetNormalizedIdentifier();
  uint64_t v1 = TIGetInputModeProperties();
  id v2 = [v1 objectForKey:*MEMORY[0x1E4FAE648]];
  uint64_t v3 = [v2 BOOLValue];

  return v3;
}

id UIKeyboardGetKeyGlyphImage(void *a1)
{
  id v1 = a1;
  id v2 = +[UIKeyboardImpl keyboardScreen];
  uint64_t v3 = +[UIKeyboard activeKeyboard];
  id v4 = +[UIKBScreenTraits traitsWithScreen:orientation:](UIKBScreenTraits, "traitsWithScreen:orientation:", v2, [v3 interfaceOrientation]);

  int v5 = [v4 isKeyboardMinorEdgeWidth];
  [v4 keyboardWidth];
  double v7 = @"_portrait";
  if (v6 > 768.0) {
    double v7 = @"_fudge_portrait";
  }
  uint64_t v8 = @"_landscape";
  if (v6 > 1024.0) {
    uint64_t v8 = @"_fudge_landscape";
  }
  if (v5) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = v8;
  }
  int v10 = [v1 stringByAppendingString:v9];

  if (_AXSEnhanceTextLegibilityEnabled())
  {
    uint64_t v11 = [NSString stringWithFormat:@"bold_%@", v10];

    int v10 = (void *)v11;
  }
  uint64_t v12 = [v10 stringByAppendingString:@".png"];

  id v13 = _UIImageWithName(v12);

  return v13;
}

id UIKeyboardGetGlobeKeyImage()
{
  return UIKeyboardGetKeyGlyphImage(@"global");
}

id UIKeyboardGetDeleteKeyImage()
{
  return UIKeyboardGetKeyGlyphImage(@"delete");
}

id UIKeyboardGetDeleteOnKeyImage()
{
  return UIKeyboardGetKeyGlyphImage(@"delete_on");
}

id UIKeyboardGetKeyboardKeyImage()
{
  return _UIImageWithName(@"keyboard_dockitem-portrait");
}

UIColor *UIKeyboardGetLightCandidateActiveTextColor()
{
  return +[UIColor colorWithWhite:0.0 alpha:0.9];
}

UIColor *UIKeyboardGetLightCandidateHighlightedTextColor()
{
  return +[UIColor blackColor];
}

UIColor *UIKeyboardGetLightCandidateHighlightColor()
{
  return +[UIColor colorWithRed:0.921568627 green:0.929411765 blue:0.941176471 alpha:1.0];
}

UIColor *UIKeyboardGetLightCandidateSeparatorColor()
{
  return +[UIColor colorWithWhite:0.0 alpha:0.1];
}

id UIKeyboardGetCandidateUISingleLineFont()
{
  uint64_t v0 = [(id)UIApp preferredContentSizeCategory];
  char v1 = [v0 isEqualToString:@"UICTContentSizeCategoryXL"];
  double v2 = 20.0;
  if ((v1 & 1) == 0)
  {
    char v3 = objc_msgSend(v0, "isEqualToString:", @"UICTContentSizeCategoryXXL", 20.0);
    double v2 = 22.0;
    if ((v3 & 1) == 0)
    {
      if ((objc_msgSend(v0, "isEqualToString:", @"UICTContentSizeCategoryXXXL", 22.0) & 1) != 0
        || (IsAccessibilityContentSizeCategorCGFloat y = _UIContentSizeCategoryIsAccessibilityContentSizeCategory(v0, v4),
            double v2 = 18.0,
            IsAccessibilityContentSizeCategory))
      {
        double v2 = 24.0;
      }
    }
  }
  double v6 = [off_1E52D39B8 systemFontOfSize:v2];

  return v6;
}

UIColor *UIKeyboardGetCandidateAndPredictionBarHighlightColor()
{
  return +[UIColor colorWithWhite:0.2 alpha:1.0];
}

double UIKeyboardGetSingleCenteredCellForWidth(double a1)
{
  double v2 = +[UIDevice currentDevice];
  uint64_t v3 = [v2 userInterfaceIdiom];

  if ((v3 & 0xFFFFFFFFFFFFFFFBLL) != 1)
  {
    float v4 = (a1 + -4.0) / 12.0;
    float v5 = floorf(v4);
    a1 = a1 - (float)(v5 + v5) + -4.0;
  }
  float v6 = a1;
  return floorf(v6);
}

objc_class *_shortcutEditorController(void *a1)
{
  id v1 = a1;
  uint64_t v19 = 0;
  long long v20 = &v19;
  uint64_t v21 = 0x2050000000;
  double v2 = (void *)qword_1EB2616D8;
  uint64_t v22 = qword_1EB2616D8;
  if (!qword_1EB2616D8)
  {
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    v18[2] = __getUIEditUserWordControllerClass_block_invoke;
    CFIndex v18[3] = &unk_1E52D9900;
    v18[4] = &v19;
    __getUIEditUserWordControllerClass_block_invoke((uint64_t)v18);
    double v2 = (void *)v20[3];
  }
  uint64_t v3 = v2;
  _Block_object_dispose(&v19, 8);
  if (v3)
  {
    float v4 = UIKeyboardGetCurrentInputMode();
    float v5 = TIInputModeGetVariant();
    float v6 = TIInputModeGetLanguageWithRegion();
    if ([v1 _containsCJScripts])
    {
      if ([v5 isEqualToString:@"Pinyin"])
      {
        double v7 = [v1 _stringByTranscribingFromLanguage:v6];
        uint64_t v8 = [v7 _stringByApplyingTransform:*MEMORY[0x1E4F1D4F0]];

LABEL_16:
        if ([v8 _containsIdeographicCharacters])
        {
          uint64_t v12 = 0;
        }
        else
        {
          uint64_t v13 = [MEMORY[0x1E4F28B88] whitespaceCharacterSet];
          uint64_t v12 = [v8 _stringByReplacingCharactersInSet:v13 withCharacter:0];

          uint64_t v8 = (void *)v13;
        }

        uint64_t v14 = [v12 length];
        id v15 = [v3 alloc];
        if (v14) {
          uint64_t v16 = [v15 initWithText:v1 andShortcut:v12];
        }
        else {
          uint64_t v16 = [v15 initWithText:v1];
        }
        uint64_t v3 = (objc_class *)v16;

        goto LABEL_23;
      }
      if ([v5 isEqualToString:@"Zhuyin"])
      {
        uint64_t v9 = [v1 _stringByTransliteratingToZhuyin];
LABEL_15:
        uint64_t v8 = (void *)v9;
        goto LABEL_16;
      }
      int v10 = UIKeyboardGetCurrentUILanguage();
      if ([v10 isEqualToString:@"ja"])
      {

        goto LABEL_14;
      }
      char v11 = [v6 isEqualToString:@"ja_JP"];

      if (v11) {
        goto LABEL_14;
      }
    }
    else if ([v1 _containsJapanese])
    {
LABEL_14:
      uint64_t v9 = [v1 _stringByTranscribingFromLanguage:@"ja"];
      goto LABEL_15;
    }
    uint64_t v8 = 0;
    goto LABEL_16;
  }
LABEL_23:

  return v3;
}

void sub_18616E8B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _dismissShortcutEditorController(void *a1)
{
  id v1 = [a1 visibleViewController];
  if (objc_opt_respondsToSelector()) {
    [v1 _dismiss];
  }
}

void _swapInCompletionForShortcutEditor(void *a1, void *a2)
{
  id v3 = a2;
  float v4 = [a1 visibleViewController];
  if (objc_opt_respondsToSelector() & 1) != 0 && (objc_opt_respondsToSelector())
  {
    float v5 = [v4 dismissCompletionHandler];
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    v7[2] = ___swapInCompletionForShortcutEditor_block_invoke;
    v7[3] = &unk_1E52DE9A0;
    id v8 = v5;
    id v9 = v3;
    id v6 = v5;
    [v4 setDismissCompletionHandler:v7];
  }
}

uint64_t ___swapInCompletionForShortcutEditor_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v3();
}

uint64_t UIKeyboardNextPreferredInputMode()
{
  return 0;
}

Class __getTUIKeyboardLayoutFactoryClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB2616D0)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    void v6[3] = __TextInputUILibraryCore_block_invoke_9;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E52F36C8;
    uint64_t v8 = 0;
    qword_1EB2616D0 = _sl_dlopen();
  }
  if (!qword_1EB2616D0)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    float v4 = [NSString stringWithUTF8String:"void *TextInputUILibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIKeyboardIntl.m", 77, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("TUIKeyboardLayoutFactory");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    float v5 = [NSString stringWithUTF8String:"Class getTUIKeyboardLayoutFactoryClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIKeyboardIntl.m", 78, @"Unable to find class %s", "TUIKeyboardLayoutFactory");

LABEL_10:
    __break(1u);
  }
  qword_1EB2616C8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __TextInputUILibraryCore_block_invoke_9()
{
  uint64_t result = _sl_dlopen();
  qword_1EB2616D0 = result;
  return result;
}

Class __getUIEditUserWordControllerClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB2616E0)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    void v6[3] = __KeyboardSettingsLibraryCore_block_invoke;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E52F36E0;
    uint64_t v8 = 0;
    qword_1EB2616E0 = _sl_dlopen();
  }
  if (!qword_1EB2616E0)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    float v4 = [NSString stringWithUTF8String:"void *KeyboardSettingsLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIKeyboardIntl.m", 3311, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("UIEditUserWordController");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    float v5 = [NSString stringWithUTF8String:"Class getUIEditUserWordControllerClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIKeyboardIntl.m", 3313, @"Unable to find class %s", "UIEditUserWordController");

LABEL_10:
    __break(1u);
  }
  qword_1EB2616D8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __KeyboardSettingsLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB2616E0 = result;
  return result;
}

BOOL _UIGetEnableLayoutAwareShortcutsAutomatic()
{
  if (_UIInternalPreferencesRevisionOnce != -1) {
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_5_8);
  }
  int v0 = _UIInternalPreferencesRevisionVar;
  if (_UIInternalPreferencesRevisionVar < 1
    || (int v3 = _UIInternalPreference_EnableLayoutAwareShortcutsAutomatic,
        _UIInternalPreferencesRevisionVar == _UIInternalPreference_EnableLayoutAwareShortcutsAutomatic))
  {
    BOOL v1 = 0;
  }
  else
  {
    do
    {
      BOOL v1 = v0 < v3;
      if (v0 < v3) {
        break;
      }
      _UIInternalPreferenceSync(v0, &_UIInternalPreference_EnableLayoutAwareShortcutsAutomatic, @"EnableLayoutAwareShortcutsAutomatic", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
      int v3 = _UIInternalPreference_EnableLayoutAwareShortcutsAutomatic;
    }
    while (v0 != _UIInternalPreference_EnableLayoutAwareShortcutsAutomatic);
  }
  return byte_1EB257674 && v1;
}

void sub_186171D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_186171ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_186171F5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_186172B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

Class __getTUIKeyboardLayoutFactoryClass_block_invoke_0(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB261738)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    void v6[3] = __TextInputUILibraryCore_block_invoke_10;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E52F3A70;
    uint64_t v8 = 0;
    qword_1EB261738 = _sl_dlopen();
  }
  if (!qword_1EB261738)
  {
    int v3 = [MEMORY[0x1E4F28B00] currentHandler];
    float v4 = [NSString stringWithUTF8String:"void *TextInputUILibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIKeyboardPreferencesController.m", 34, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("TUIKeyboardLayoutFactory");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    int v3 = [MEMORY[0x1E4F28B00] currentHandler];
    float v5 = [NSString stringWithUTF8String:"Class getTUIKeyboardLayoutFactoryClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIKeyboardPreferencesController.m", 35, @"Unable to find class %s", "TUIKeyboardLayoutFactory");

LABEL_10:
    __break(1u);
  }
  qword_1EB261730 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __TextInputUILibraryCore_block_invoke_10()
{
  uint64_t result = _sl_dlopen();
  qword_1EB261738 = result;
  return result;
}

void sub_1861741A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, id a17)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a17);
  _Unwind_Resume(a1);
}

id TIGetTypoTrackerButtonValue()
{
  if (TIGetTypoTrackerButtonValue_onceToken != -1) {
    dispatch_once(&TIGetTypoTrackerButtonValue_onceToken, &__block_literal_global_504);
  }
  int v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  BOOL v1 = [v0 valueForPreferenceKey:@"TypoTrackerButton"];

  return v1;
}

void sub_18617B5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __TIGetTypoTrackerButtonValue_block_invoke()
{
  id v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  [v0 _configureKey:@"TypoTrackerButton" domain:@"com.apple.keyboard" defaultValue:MEMORY[0x1E4F1CC38]];
}

void __TIGetGlobeButtonDelayValue_block_invoke()
{
  id v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  [v0 _configureKey:@"GlobeButtonDelay" domain:@"com.apple.keyboard" defaultValue:&unk_1ED3F1F78];
}

CGMutablePathRef UIInputSwitcherCreatePopupPath(int a1, int a2, char a3, uint64_t a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12)
{
  v71.origin.CGFloat x = a9;
  v71.origin.CGFloat y = a10;
  v71.size.CGFloat width = a11;
  v71.size.CGFloat height = a12;
  CGRectGetMinX(v71);
  v72.origin.CGFloat x = a5;
  v72.origin.CGFloat y = a6;
  v72.size.CGFloat width = a7;
  v72.size.CGFloat height = a8;
  CGRectGetMinX(v72);
  v73.origin.CGFloat x = a9;
  v73.origin.CGFloat y = a10;
  v73.size.CGFloat width = a11;
  v73.size.CGFloat height = a12;
  double MaxX = CGRectGetMaxX(v73);
  v74.origin.CGFloat x = a5;
  v74.origin.CGFloat y = a6;
  v74.size.CGFloat width = a7;
  v74.size.CGFloat height = a8;
  double v24 = CGRectGetMaxX(v74);
  v75.origin.CGFloat x = a9;
  v75.origin.CGFloat y = a10;
  v75.size.CGFloat width = a11;
  v75.size.CGFloat height = a12;
  double v66 = v24 - CGRectGetMaxX(v75);
  char v25 = +[UIBezierPath bezierPath];
  double v26 = +[UIScreen mainScreen];
  [v26 scale];
  double v28 = v27;

  double v29 = 3.0;
  if (v28 <= 1.0) {
    double v30 = 3.0;
  }
  else {
    double v30 = 6.0;
  }
  double v31 = v30 + 1.0;
  if (v28 > 1.0) {
    double v29 = 2.0;
  }
  double v32 = 12.0;
  if (v28 > 1.0) {
    double v32 = 13.0;
  }
  if ((unint64_t)(a4 - 3) >= 2) {
    double v31 = v30;
  }
  double v33 = a5 + v30;
  double v57 = v33;
  if (a1) {
    double v33 = a9;
  }
  double v62 = v31;
  double v63 = v33;
  if (a2) {
    double v34 = 0.0;
  }
  else {
    double v34 = 6.0;
  }
  double v35 = a9 + 2.0;
  if (a1) {
    double v35 = a9;
  }
  double v36 = a6 + a8 - v29;
  if ((a3 & 4) != 0) {
    double v37 = v35;
  }
  else {
    double v37 = a9;
  }
  if ((a3 & 4) != 0) {
    double v38 = v36;
  }
  else {
    double v38 = a10 + a12;
  }
  if ((a3 & 4) != 0) {
    double v39 = a10 + 1.0;
  }
  else {
    double v39 = a10;
  }
  double v64 = a10 - v32;
  double v60 = a10 - v32 + v39;
  double v61 = v34;
  double v40 = a12 + a10;
  double v41 = a9 + a11 + -2.0;
  double v59 = a9 + a11;
  if ((a3 & 8) != 0)
  {
    double v42 = v36;
  }
  else
  {
    double v41 = a9 + a11;
    double v42 = a12 + a10;
  }
  if ((a3 & 8) != 0) {
    double v43 = a10 + 1.0;
  }
  else {
    double v43 = a10;
  }
  double v44 = v38;
  double v45 = MaxX + v66;
  double v65 = v42;
  double v67 = v41;
  double v69 = v37 + (v41 - v37) * 0.5;
  [v25 moveToPoint:*(void *)&v57];
  double v70 = v44;
  if ((a3 & 4) != 0)
  {
    objc_msgSend(v25, "_addRoundedCornerWithTrueCorner:radius:corner:clockwise:", 4, 0, v37, v44, 4.0, 4.0);
  }
  else
  {
    objc_msgSend(v25, "addLineToPoint:", a9, v40);
    objc_msgSend(v25, "addLineToPoint:", v37, v44);
  }
  double v46 = v64 + v43;
  double v47 = a6 + v61;
  double v48 = v60 * 0.5;
  double v49 = v45 - v62;
  if (a1)
  {
    double v50 = v46;
    objc_msgSend(v25, "addLineToPoint:", a9, v60 * 0.5);
    double v51 = v50;
  }
  else
  {
    double v52 = v46;
    objc_msgSend(v25, "addLineToPoint:", v37, v39);
    objc_msgSend(v25, "_addRoundedCornerWithTrueCorner:radius:corner:clockwise:", 2, 1, v37, v48, 10.0, 10.0);
    objc_msgSend(v25, "addLineToPoint:", v58 + 10.0, v48);
    objc_msgSend(v25, "_addRoundedCornerWithTrueCorner:radius:corner:clockwise:", 4, 0, v58, v48, 10.0, 10.0);
    double v51 = v52;
  }
  double v53 = v51 * 0.5;
  if (a2)
  {
    objc_msgSend(v25, "addLineToPoint:", v63, v47);
    objc_msgSend(v25, "addLineToPoint:", v49, v47);
  }
  else
  {
    objc_msgSend(v25, "_addRoundedCornerWithTrueCorner:radius:corner:clockwise:", 1, 0, v63, v47, 10.0, 10.0);
    objc_msgSend(v25, "_addRoundedCornerWithTrueCorner:radius:corner:clockwise:", 2, 0, v49, v47, 10.0, 10.0);
  }
  objc_msgSend(v25, "addLineToPoint:", v49, v64);
  objc_msgSend(v25, "_addRoundedCornerWithTrueCorner:radius:corner:clockwise:", 8, 0, v49, v53, 10.0, 10.0);
  objc_msgSend(v25, "addLineToPoint:", v67 + 10.0, v53);
  objc_msgSend(v25, "_addRoundedCornerWithTrueCorner:radius:corner:clockwise:", 1, 1, v67, v53, 10.0, 10.0);
  if ((a3 & 8) != 0)
  {
    objc_msgSend(v25, "_addRoundedCornerWithTrueCorner:radius:corner:clockwise:", 8, 0, v67, v65, 4.0, 4.0);
  }
  else
  {
    objc_msgSend(v25, "addLineToPoint:", v59, v40);
    objc_msgSend(v25, "addLineToPoint:", v67, v65);
  }
  objc_msgSend(v25, "addLineToPoint:", v69, v70);
  [v25 closePath];
  id v54 = v25;
  MutableCopCGFloat y = CGPathCreateMutableCopy((CGPathRef)[v54 CGPath]);

  return MutableCopy;
}

void sub_186184384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1861870BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186189D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

id get_SFAutomaticPasswordInputViewControllerClass()
{
  uint64_t v4 = 0;
  float v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)qword_1EB25B2E0;
  uint64_t v7 = qword_1EB25B2E0;
  if (!qword_1EB25B2E0)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __get_SFAutomaticPasswordInputViewControllerClass_block_invoke;
    v3[3] = &unk_1E52D9900;
    v3[4] = &v4;
    __get_SFAutomaticPasswordInputViewControllerClass_block_invoke((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18618B0E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getTCCAccessPreflightSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = TCCLibrary();
  uint64_t result = dlsym(v2, "TCCAccessPreflight");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1EB25B2D0 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *TCCLibrary()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!TCCLibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    void v4[2] = (void *)3221225472;
    v4[3] = __TCCLibraryCore_block_invoke;
    void v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_1E52F3C50;
    uint64_t v6 = 0;
    TCCLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  id v0 = (void *)TCCLibraryCore_frameworkLibrary;
  if (!TCCLibraryCore_frameworkLibrary)
  {
    id v0 = [MEMORY[0x1E4F28B00] currentHandler];
    int v3 = [NSString stringWithUTF8String:"void *TCCLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIInputViewController.m", 59, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __TCCLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  TCCLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

void *__getkTCCServiceKeyboardNetworkSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = TCCLibrary();
  uint64_t result = dlsym(v2, "kTCCServiceKeyboardNetwork");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25B2D8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __SafariServicesLibraryCore_block_invoke_1()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25B2E8 = result;
  return result;
}

Class __getTUIKeyboardInputManagerMuxClass_block_invoke_0(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB25BE50)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    void v6[3] = __TextInputUILibraryCore_block_invoke_11;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E52F3C80;
    uint64_t v8 = 0;
    qword_1EB25BE50 = _sl_dlopen();
  }
  if (!qword_1EB25BE50)
  {
    int v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *TextInputUILibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIKeyboardInputManagerClient.h", 22, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("TUIKeyboardInputManagerMux");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    int v3 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"Class getTUIKeyboardInputManagerMuxClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIKeyboardInputManagerClient.h", 23, @"Unable to find class %s", "TUIKeyboardInputManagerMux");

LABEL_10:
    __break(1u);
  }
  qword_1EB25BE48 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __TextInputUILibraryCore_block_invoke_11()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25BE50 = result;
  return result;
}

BOOL UIInputViewControllerRequiresInputModeSwitchKey()
{
  id v0 = +[UIKeyboardInputModeController sharedInputModeController];
  id v1 = [v0 activeInputModeIdentifiers];

  if ((unint64_t)[v1 count] < 2) {
    BOOL v2 = 0;
  }
  else {
    BOOL v2 = (UIKeyboardGetSafeDeviceIdiom() & 0xFFFFFFFFFFFFFFFBLL) == 1
  }
      || +[UIDevice _hasHomeButton];

  return v2;
}

void sub_18619224C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186192FB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void _UIKeyCommandHardwareKeyboardLayoutChanged()
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v0 = +[UIDevice currentDevice];
  if ([v0 _isHardwareKeyboardAvailable])
  {
    uint64_t v1 = [(id)UIApp _hardwareKeyboard:0];

    if (v1)
    {
      [(id)UIApp _hardwareKeyboard:0];
      GSKeyboardGetLayout();
      BOOL v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
      goto LABEL_6;
    }
  }
  else
  {
  }
  BOOL v2 = @"US";
LABEL_6:
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v3 = [&unk_1ED3EFEF0 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v16 != v5) {
          objc_enumerationMutation(&unk_1ED3EFEF0);
        }
        long long v7 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        uint64_t v8 = [MEMORY[0x1E4FAE398] shortcutWithKeyEquivalent:v7 modifierFlags:0];
        uint64_t v9 = [MEMORY[0x1E4FAE398] localizedKeyboardShortcut:v8 forKeyboardLayout:v2];
        uint64_t v10 = [v9 keyEquivalent];
        uint64_t v11 = (void *)v10;
        if (v7) {
          BOOL v12 = v10 == 0;
        }
        else {
          BOOL v12 = 1;
        }
        if (!v12)
        {
          id v13 = v7;
          uint64_t v14 = _UIKeyCommandGetLocalizedSymbolDict();
          [v14 setObject:v11 forKeyedSubscript:v13];
        }
      }
      uint64_t v4 = [&unk_1ED3EFEF0 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v4);
  }
}

id _UIKBTrimKBStarName_iOS(void *a1)
{
  uint64_t v1 = (void *)[a1 mutableCopy];
  objc_msgSend(v1, "replaceOccurrencesOfString:withString:options:range:", @"_GeometrySet", &stru_1ED0E84C0, 0, 0, objc_msgSend(v1, "length"));
  objc_msgSend(v1, "replaceOccurrencesOfString:withString:options:range:", @"-Keyset", &stru_1ED0E84C0, 0, 0, objc_msgSend(v1, "length"));
  objc_msgSend(v1, "replaceOccurrencesOfString:withString:options:range:", @"-Display", &stru_1ED0E84C0, 0, 0, objc_msgSend(v1, "length"));
  objc_msgSend(v1, "replaceOccurrencesOfString:withString:options:range:", @"Wildcat-", &stru_1ED0E84C0, 0, 0, objc_msgSend(v1, "length"));
  return v1;
}

BOOL iPhoneVisualStyle(int a1)
{
  return (a1 - 1) < 5;
}

BOOL iPadVisualStyle(int a1)
{
  return (a1 - 101) < 9;
}

uint64_t visualStyleFromString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"iPhone-Standard"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"iPhone-Dictation"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"iPhone-Alert"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"iPhone-Emoji"])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:@"iPhone-Passcode"])
  {
    uint64_t v2 = 5;
  }
  else if ([v1 isEqualToString:@"Wildcat-50On"])
  {
    uint64_t v2 = 101;
  }
  else if ([v1 isEqualToString:@"Wildcat-Standard"])
  {
    uint64_t v2 = 102;
  }
  else if ([v1 isEqualToString:@"Wildcat-Dictation"])
  {
    uint64_t v2 = 103;
  }
  else if ([v1 isEqualToString:@"Wildcat-Alert"])
  {
    uint64_t v2 = 104;
  }
  else if ([v1 isEqualToString:@"Wildcat-Passcode"])
  {
    uint64_t v2 = 105;
  }
  else if ([v1 isEqualToString:@"Wildcat-Split"])
  {
    uint64_t v2 = 106;
  }
  else if ([v1 isEqualToString:@"Wildcat-Split-Full-Width"])
  {
    uint64_t v2 = 107;
  }
  else if ([v1 isEqualToString:@"Wildcat-Emoji"])
  {
    uint64_t v2 = 108;
  }
  else if ([v1 isEqualToString:@"Wildcat-Emoji-Split"])
  {
    uint64_t v2 = 109;
  }
  else if ([v1 isEqualToString:@"Monolith-Standard"])
  {
    uint64_t v2 = 201;
  }
  else if ([v1 isEqualToString:@"Car-Standard"])
  {
    uint64_t v2 = 301;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

__CFString *enumStringForVisualStyle(int a1)
{
  if (a1 <= 100)
  {
    switch(a1)
    {
      case 1:
        uint64_t result = @"UIKBVisualStyleiPhoneStandard";
        break;
      case 2:
        uint64_t result = @"UIKBVisualStyleiPhoneDictation";
        break;
      case 3:
        uint64_t result = @"UIKBVisualStyleiPhoneAlert";
        break;
      case 4:
        uint64_t result = @"UIKBVisualStyleiPhoneEmoji";
        break;
      case 5:
        uint64_t result = @"UIKBVisualStyleiPhonePasscode";
        break;
      default:
        uint64_t result = 0;
        break;
    }
  }
  else
  {
    switch(a1)
    {
      case 'e':
        uint64_t result = @"UIKBVisualStyleWildcat50On";
        break;
      case 'f':
        uint64_t result = @"UIKBVisualStyleWildcatStandard";
        break;
      case 'g':
        uint64_t result = @"UIKBVisualStyleWildcatDictation";
        break;
      case 'h':
        uint64_t result = @"UIKBVisualStyleWildcatAlert";
        break;
      case 'i':
        uint64_t result = @"UIKBVisualStyleWildcatPasscode";
        break;
      case 'j':
        uint64_t result = @"UIKBVisualStyleWildcatSplit";
        break;
      case 'k':
        uint64_t result = @"UIKBVisualStyleWildcatSplitFullWidth";
        break;
      case 'l':
        uint64_t result = @"UIKBVisualStyleWildcatEmoji";
        break;
      case 'm':
        uint64_t result = @"UIKBVisualStyleWildcatEmojiSplit";
        break;
      default:
        uint64_t v2 = @"UIKBVisualStyleCarStandard";
        if (a1 != 301) {
          uint64_t v2 = 0;
        }
        if (a1 == 201) {
          uint64_t result = @"UIKBVisualStyleMonolithStandard";
        }
        else {
          uint64_t result = v2;
        }
        break;
    }
  }
  return result;
}

uint64_t interactionTypeFromString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"None"])
  {
    uint64_t v2 = 0;
  }
  else if ([v1 isEqualToString:@"String"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"String-Popup"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"CandidateList"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"Delete"])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:@"Dictation"])
  {
    uint64_t v2 = 5;
  }
  else if ([v1 isEqualToString:@"Dismiss"])
  {
    uint64_t v2 = 6;
  }
  else if ([v1 isEqualToString:@"Drag"])
  {
    uint64_t v2 = 7;
  }
  else if ([v1 isEqualToString:@"Handwriting"])
  {
    uint64_t v2 = 8;
  }
  else if ([v1 isEqualToString:@"International"])
  {
    uint64_t v2 = 9;
  }
  else if ([v1 isEqualToString:@"KeyplaneSwitch"])
  {
    uint64_t v2 = 10;
  }
  else if ([v1 isEqualToString:@"More"])
  {
    uint64_t v2 = 11;
  }
  else if ([v1 isEqualToString:@"Redo"])
  {
    uint64_t v2 = 12;
  }
  else if ([v1 isEqualToString:@"Return"])
  {
    uint64_t v2 = 13;
  }
  else if ([v1 isEqualToString:@"Shift"])
  {
    uint64_t v2 = 14;
  }
  else if ([v1 isEqualToString:@"Space"])
  {
    uint64_t v2 = 15;
  }
  else if ([v1 isEqualToString:@"String-Flick"])
  {
    uint64_t v2 = 16;
  }
  else if ([v1 isEqualToString:@"Undo"])
  {
    uint64_t v2 = 17;
  }
  else if ([v1 isEqualToString:@"EmojiInputView"])
  {
    uint64_t v2 = 18;
  }
  else if ([v1 isEqualToString:@"EmojiCategoryControl"])
  {
    uint64_t v2 = 19;
  }
  else if ([v1 isEqualToString:@"MultitapComplete"])
  {
    uint64_t v2 = 20;
  }
  else if ([v1 isEqualToString:@"MultitapReverse"])
  {
    uint64_t v2 = 21;
  }
  else if ([v1 isEqualToString:@"RecentInput"])
  {
    uint64_t v2 = 22;
  }
  else if ([v1 isEqualToString:@"Clear"])
  {
    uint64_t v2 = 23;
  }
  else if ([v1 isEqualToString:@"RevealHiddenCandidates"])
  {
    uint64_t v2 = 24;
  }
  else if ([v1 isEqualToString:@"SelectNextCandidate"])
  {
    uint64_t v2 = 25;
  }
  else if ([v1 isEqualToString:@"SelectPreviousCandidate"])
  {
    uint64_t v2 = 26;
  }
  else if ([v1 isEqualToString:@"AcceptAutocorrection"])
  {
    uint64_t v2 = 27;
  }
  else if ([v1 isEqualToString:@"Bold"])
  {
    uint64_t v2 = 28;
  }
  else if ([v1 isEqualToString:@"Italic"])
  {
    uint64_t v2 = 29;
  }
  else if ([v1 isEqualToString:@"Underline"])
  {
    uint64_t v2 = 30;
  }
  else if ([v1 isEqualToString:@"Cut"])
  {
    uint64_t v2 = 31;
  }
  else if ([v1 isEqualToString:@"Copy"])
  {
    uint64_t v2 = 32;
  }
  else if ([v1 isEqualToString:@"Paste"])
  {
    uint64_t v2 = 33;
  }
  else if ([v1 isEqualToString:@"LeftArrow"])
  {
    uint64_t v2 = 34;
  }
  else if ([v1 isEqualToString:@"RightArrow"])
  {
    uint64_t v2 = 35;
  }
  else if ([v1 isEqualToString:@"AssertLayoutTag"])
  {
    uint64_t v2 = 36;
  }
  else if ([v1 isEqualToString:@"Tab"])
  {
    uint64_t v2 = 37;
  }
  else if ([v1 isEqualToString:@"Caps-Lock"])
  {
    uint64_t v2 = 38;
  }
  else if ([v1 isEqualToString:@"Dictation-Display"])
  {
    uint64_t v2 = 39;
  }
  else if ([v1 isEqualToString:@"MessageWriteboard"])
  {
    uint64_t v2 = 40;
  }
  else if ([v1 isEqualToString:@"MultitapForward"])
  {
    uint64_t v2 = 41;
  }
  else if ([v1 isEqualToString:@"EmojiSearchControl"])
  {
    uint64_t v2 = 42;
  }
  else if ([v1 isEqualToString:@"CandidateExtension"])
  {
    uint64_t v2 = 43;
  }
  else if ([v1 isEqualToString:@"CustomAction"])
  {
    uint64_t v2 = 44;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

__CFString *enumStringForInteractionType(unsigned int a1)
{
  if (a1 > 0x2C) {
    return 0;
  }
  else {
    return off_1E52F3DA8[a1];
  }
}

uint64_t displayTypeFromString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"String"])
  {
    uint64_t v2 = 0;
  }
  else if ([v1 isEqualToString:@"CandidateList"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"Command"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"Delete"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"Dictation"])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:@"Dismiss"])
  {
    uint64_t v2 = 5;
  }
  else if ([v1 isEqualToString:@"Drag"])
  {
    uint64_t v2 = 6;
  }
  else if ([v1 isEqualToString:@"DualString"])
  {
    uint64_t v2 = 7;
  }
  else if ([v1 isEqualToString:@"DynamicString"])
  {
    uint64_t v2 = 8;
  }
  else if ([v1 isEqualToString:@"Emoji"])
  {
    uint64_t v2 = 9;
  }
  else if ([v1 isEqualToString:@"TenKeyKeyplaneSwitchOff"])
  {
    uint64_t v2 = 10;
  }
  else if ([v1 isEqualToString:@"TenKeyKeyplaneSwitchOn"])
  {
    uint64_t v2 = 11;
  }
  else if ([v1 isEqualToString:@"Handwriting"])
  {
    uint64_t v2 = 12;
  }
  else if ([v1 isEqualToString:@"International"])
  {
    uint64_t v2 = 13;
  }
  else if ([v1 isEqualToString:@"KeyplaneSwitch"])
  {
    uint64_t v2 = 14;
  }
  else if ([v1 isEqualToString:@"LeftDarkAndNoRightDivider"])
  {
    uint64_t v2 = 15;
  }
  else if ([v1 isEqualToString:@"LightBottom"])
  {
    uint64_t v2 = 16;
  }
  else if ([v1 isEqualToString:@"LightBottomAndRight"])
  {
    uint64_t v2 = 17;
  }
  else if ([v1 isEqualToString:@"More"])
  {
    uint64_t v2 = 18;
  }
  else if ([v1 isEqualToString:@"NoRightDivider"])
  {
    uint64_t v2 = 19;
  }
  else if ([v1 isEqualToString:@"NumberPad"])
  {
    uint64_t v2 = 20;
  }
  else if ([v1 isEqualToString:@"Return"])
  {
    uint64_t v2 = 21;
  }
  else if ([v1 isEqualToString:@"ReverseVerticalDark"])
  {
    uint64_t v2 = 22;
  }
  else if ([v1 isEqualToString:@"Shift"])
  {
    uint64_t v2 = 23;
  }
  else if ([v1 isEqualToString:@"SmallKana"])
  {
    uint64_t v2 = 24;
  }
  else if ([v1 isEqualToString:@"Space"])
  {
    uint64_t v2 = 25;
  }
  else if ([v1 isEqualToString:@"Tab"])
  {
    uint64_t v2 = 26;
  }
  else if ([v1 isEqualToString:@"Top-Level-Domain"])
  {
    uint64_t v2 = 27;
  }
  else if ([v1 isEqualToString:@"Top-Level-Domain-Variant"])
  {
    uint64_t v2 = 28;
  }
  else if ([v1 isEqualToString:@"TwoVerticalDark"])
  {
    uint64_t v2 = 29;
  }
  else if ([v1 isEqualToString:@"TwoVerticalLight"])
  {
    uint64_t v2 = 30;
  }
  else if ([v1 isEqualToString:@"VoicedKey"])
  {
    uint64_t v2 = 31;
  }
  else if ([v1 isEqualToString:@"MultitapComplete"])
  {
    uint64_t v2 = 32;
  }
  else if ([v1 isEqualToString:@"MultitapReverse"])
  {
    uint64_t v2 = 33;
  }
  else if ([v1 isEqualToString:@"WALongVowelSign"])
  {
    uint64_t v2 = 34;
  }
  else if ([v1 isEqualToString:@"TenKeyRoman"])
  {
    uint64_t v2 = 35;
  }
  else if ([v1 isEqualToString:@"EmojiInputView"])
  {
    uint64_t v2 = 36;
  }
  else if ([v1 isEqualToString:@"EmojiCategoryControl"])
  {
    uint64_t v2 = 37;
  }
  else if ([v1 isEqualToString:@"Letter-Line"])
  {
    uint64_t v2 = 38;
  }
  else if ([v1 isEqualToString:@"Bold"])
  {
    uint64_t v2 = 39;
  }
  else if ([v1 isEqualToString:@"Italic"])
  {
    uint64_t v2 = 40;
  }
  else if ([v1 isEqualToString:@"Underline"])
  {
    uint64_t v2 = 41;
  }
  else if ([v1 isEqualToString:@"Cut"])
  {
    uint64_t v2 = 42;
  }
  else if ([v1 isEqualToString:@"Copy"])
  {
    uint64_t v2 = 43;
  }
  else if ([v1 isEqualToString:@"Paste"])
  {
    uint64_t v2 = 44;
  }
  else if ([v1 isEqualToString:@"LeftArrow"])
  {
    uint64_t v2 = 45;
  }
  else if ([v1 isEqualToString:@"RightArrow"])
  {
    uint64_t v2 = 46;
  }
  else if ([v1 isEqualToString:@"PredictionActive"])
  {
    uint64_t v2 = 47;
  }
  else if ([v1 isEqualToString:@"UCBSelectionBackground"])
  {
    uint64_t v2 = 48;
  }
  else if ([v1 isEqualToString:@"BIU"])
  {
    uint64_t v2 = 49;
  }
  else if ([v1 isEqualToString:@"Divider"])
  {
    uint64_t v2 = 50;
  }
  else if ([v1 isEqualToString:@"Caps-Lock"])
  {
    uint64_t v2 = 51;
  }
  else if ([v1 isEqualToString:@"Dictation-Display"])
  {
    uint64_t v2 = 52;
  }
  else if ([v1 isEqualToString:@"MessageWriteboard"])
  {
    uint64_t v2 = 53;
  }
  else if ([v1 isEqualToString:@"KeyplaneSwitchCollapsed"])
  {
    uint64_t v2 = 54;
  }
  else if ([v1 isEqualToString:@"EmojiSearchControl"])
  {
    uint64_t v2 = 55;
  }
  else if ([v1 isEqualToString:@"CustomAction"])
  {
    uint64_t v2 = 56;
  }
  else if ([v1 isEqualToString:@"Image"])
  {
    uint64_t v2 = 57;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

__CFString *enumStringForDisplayType(unsigned int a1)
{
  if (a1 > 0x39) {
    return 0;
  }
  else {
    return off_1E52F3F10[a1];
  }
}

uint64_t variantsTypeFromString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"accents"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"currency"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"email"])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:@"immediate-accents"])
  {
    uint64_t v2 = 5;
  }
  else if ([v1 isEqualToString:@"input-modes"])
  {
    uint64_t v2 = 6;
  }
  else if ([v1 isEqualToString:@"URL"])
  {
    uint64_t v2 = 7;
  }
  else if ([v1 isEqualToString:@"keyplane-accents"])
  {
    uint64_t v2 = 8;
  }
  else if ([v1 isEqualToString:@"BIU"])
  {
    uint64_t v2 = 9;
  }
  else if ([v1 isEqualToString:@"skin-tone-emoji-accents"])
  {
    uint64_t v2 = 10;
  }
  else if ([v1 isEqualToString:@"prepopulated-accents"])
  {
    uint64_t v2 = 11;
  }
  else if ([v1 isEqualToString:@"extended-skin-tone-emoji-selector"])
  {
    uint64_t v2 = 12;
  }
  else if ([v1 isEqualToString:@"prepopulated-extended-skin-tone-emoji"])
  {
    uint64_t v2 = 13;
  }
  else if ([v1 isEqualToString:@"keyplane-switcher"])
  {
    uint64_t v2 = 14;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

uint64_t enumStringForVariantsType(int a1)
{
  if ((a1 - 1) > 0xD) {
    return 0;
  }
  else {
    return (uint64_t)*(&off_1E52F40E0 + a1 - 1);
  }
}

uint64_t attributeValueFromString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"10key"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"center"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"dark"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"disabled"])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:@"enabled"])
  {
    uint64_t v2 = 5;
  }
  else if ([v1 isEqualToString:@"extended-symbols"])
  {
    uint64_t v2 = 6;
  }
  else if ([v1 isEqualToString:@"flick"])
  {
    uint64_t v2 = 7;
  }
  else if ([v1 isEqualToString:@"glyph"])
  {
    uint64_t v2 = 8;
  }
  else if ([v1 isEqualToString:@"handwriting"])
  {
    uint64_t v2 = 9;
  }
  else if ([v1 isEqualToString:@"highlighted"])
  {
    uint64_t v2 = 10;
  }
  else if ([v1 isEqualToString:@"japanese50on"])
  {
    uint64_t v2 = 11;
  }
  else if ([v1 isEqualToString:@"UIKeyboardTypeASCIICapable"])
  {
    uint64_t v2 = 12;
  }
  else if ([v1 isEqualToString:@"UIKeyboardTypeDecimalPad"])
  {
    uint64_t v2 = 13;
  }
  else if ([v1 isEqualToString:@"UIKeyboardTypeDefault"])
  {
    uint64_t v2 = 14;
  }
  else if ([v1 isEqualToString:@"UIKeyboardTypeEmailAddress"])
  {
    uint64_t v2 = 15;
  }
  else if ([v1 isEqualToString:@"UIKeyboardTypeNamePhonePad"])
  {
    uint64_t v2 = 16;
  }
  else if ([v1 isEqualToString:@"UIKeyboardTypeNumberPad"])
  {
    uint64_t v2 = 17;
  }
  else if ([v1 isEqualToString:@"UIKeyboardTypeNumbersAndPunctuation"])
  {
    uint64_t v2 = 18;
  }
  else if ([v1 isEqualToString:@"UIKeyboardTypePhonePad"])
  {
    uint64_t v2 = 19;
  }
  else if ([v1 isEqualToString:@"UIKeyboardTypeURL"])
  {
    uint64_t v2 = 20;
  }
  else if ([v1 isEqualToString:@"left"])
  {
    uint64_t v2 = 21;
  }
  else if ([v1 isEqualToString:@"letters"])
  {
    uint64_t v2 = 22;
  }
  else if ([v1 isEqualToString:@"light"])
  {
    uint64_t v2 = 23;
  }
  else if ([v1 isEqualToString:@"name"])
  {
    uint64_t v2 = 24;
  }
  else if ([v1 isEqualToString:@"no"])
  {
    uint64_t v2 = 25;
  }
  else if ([v1 isEqualToString:@"numbers"])
  {
    uint64_t v2 = 26;
  }
  else if ([v1 isEqualToString:@"phonepad"])
  {
    uint64_t v2 = 27;
  }
  else if ([v1 isEqualToString:@"pressed"])
  {
    uint64_t v2 = 28;
  }
  else if ([v1 isEqualToString:@"right"])
  {
    uint64_t v2 = 29;
  }
  else if ([v1 isEqualToString:@"straight"])
  {
    uint64_t v2 = 30;
  }
  else if ([v1 isEqualToString:@"symbols"])
  {
    uint64_t v2 = 31;
  }
  else if ([v1 isEqualToString:@"yes"])
  {
    uint64_t v2 = 32;
  }
  else if ([v1 isEqualToString:@"chinese10key"])
  {
    uint64_t v2 = 33;
  }
  else if ([v1 isEqualToString:@"korean10key"])
  {
    uint64_t v2 = 34;
  }
  else if ([v1 isEqualToString:@"japanese-aiu"])
  {
    uint64_t v2 = 35;
  }
  else if ([v1 isEqualToString:@"strictly-left"])
  {
    uint64_t v2 = 36;
  }
  else if ([v1 isEqualToString:@"strictly-right"])
  {
    uint64_t v2 = 37;
  }
  else if ([v1 isEqualToString:@"emoji"])
  {
    uint64_t v2 = 38;
  }
  else if ([v1 isEqualToString:@"dictation"])
  {
    uint64_t v2 = 39;
  }
  else if ([v1 isEqualToString:@"popup-menu"])
  {
    uint64_t v2 = 40;
  }
  else if ([v1 isEqualToString:@"high"])
  {
    uint64_t v2 = 41;
  }
  else if ([v1 isEqualToString:@"linear"])
  {
    uint64_t v2 = 42;
  }
  else if ([v1 isEqualToString:@"fixed-left"])
  {
    uint64_t v2 = 43;
  }
  else if ([v1 isEqualToString:@"fixed-right"])
  {
    uint64_t v2 = 44;
  }
  else if ([v1 isEqualToString:@"cased"])
  {
    uint64_t v2 = 45;
  }
  else if ([v1 isEqualToString:@"literal"])
  {
    uint64_t v2 = 46;
  }
  else if ([v1 isEqualToString:@"none"])
  {
    uint64_t v2 = 47;
  }
  else if ([v1 isEqualToString:@"linear-slim"])
  {
    uint64_t v2 = 48;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

__CFString *enumStringForAttributeValue(int a1)
{
  if ((a1 - 1) > 0x2F) {
    return 0;
  }
  else {
    return off_1E52F4150[a1 - 1];
  }
}

uint64_t themeTypeFromString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"UIKBThemeDefault"])
  {
    uint64_t v2 = 0;
  }
  else if ([v1 isEqualToString:@"UIKBThemeBlue"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"UIKBThemeDarkGray"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"UIKBThemeDarkSteel"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"UIKBThemeDarkWood"])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:@"UIKBThemeLightGray"])
  {
    uint64_t v2 = 5;
  }
  else if ([v1 isEqualToString:@"UIKBThemeLightSteel"])
  {
    uint64_t v2 = 6;
  }
  else if ([v1 isEqualToString:@"UIKBThemeMidGray"])
  {
    uint64_t v2 = 7;
  }
  else if ([v1 isEqualToString:@"UIKBThemeMidSteel"])
  {
    uint64_t v2 = 8;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

__CFString *stringForAttributeName(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"adaptive-keys"])
  {
    uint64_t v2 = @"UIKBAttributeNameAdaptiveKeys";
  }
  else if ([v1 isEqualToString:@"autoshift"])
  {
    uint64_t v2 = @"UIKBAttributeNameAutoshift";
  }
  else if ([v1 isEqualToString:@"diacritic-forward-compose"])
  {
    uint64_t v2 = @"UIKBAttributeNameDiacriticForwardCompose";
  }
  else if ([v1 isEqualToString:@"display-corner"])
  {
    uint64_t v2 = @"UIKBAttributeNameDisplayCorner";
  }
  else if ([v1 isEqualToString:@"DisplayImage"])
  {
    uint64_t v2 = @"UIKBAttributeNameDisplayImage";
  }
  else if ([v1 isEqualToString:@"drag-threshold"])
  {
    uint64_t v2 = @"UIKBAttributeNameDragThreshold";
  }
  else if ([v1 isEqualToString:@"gesture-keyplane"])
  {
    uint64_t v2 = @"UIKBAttributeNameGestureKeyplane";
  }
  else if ([v1 isEqualToString:@"group-neighbor"])
  {
    uint64_t v2 = @"UIKBAttributeNameGroupNeighbor";
  }
  else if ([v1 isEqualToString:@"home-indicator"])
  {
    uint64_t v2 = @"UIKBAttributeNameHomeIndicator";
  }
  else if ([v1 isEqualToString:@"ignore-hand-bias"])
  {
    uint64_t v2 = @"UIKBAttributeNameIgnoreHandBias";
  }
  else if ([v1 isEqualToString:@"ignore-shift-state"])
  {
    uint64_t v2 = @"UIKBAttributeNameIgnoreShiftState";
  }
  else if ([v1 isEqualToString:@"is-alphabetic-plane"])
  {
    uint64_t v2 = @"UIKBAttributeNameIsAlphabeticPlane";
  }
  else if ([v1 isEqualToString:@"keycharging"])
  {
    uint64_t v2 = @"UIKBAttributeNameKeyCharging";
  }
  else if ([v1 isEqualToString:@"label"])
  {
    uint64_t v2 = @"UIKBAttributeNameLabel";
  }
  else if ([v1 isEqualToString:@"looks-like-shift-alternate"])
  {
    uint64_t v2 = @"UIKBAttributeNameLooksLikeShiftAlternate";
  }
  else if ([v1 isEqualToString:@"merge-as-more-key"])
  {
    uint64_t v2 = @"UIKBAttributeNameMergeAsMoreKey";
  }
  else if ([v1 isEqualToString:@"modify-for-writeboard-key"])
  {
    uint64_t v2 = @"UIKBAttributeNameModifyForWriteboardKey";
  }
  else if ([v1 isEqualToString:@"more-after"])
  {
    uint64_t v2 = @"UIKBAttributeNameMoreAfter";
  }
  else if ([v1 isEqualToString:@"more-alternate"])
  {
    uint64_t v2 = @"UIKBAttributeNameMoreAlternate";
  }
  else if ([v1 isEqualToString:@"more-alternate-small-display"])
  {
    uint64_t v2 = @"UIKBAttributeNameMoreAlternateSmallDisplay";
  }
  else if ([v1 isEqualToString:@"more-rendering"])
  {
    uint64_t v2 = @"UIKBAttributeNameMoreRendering";
  }
  else if ([v1 isEqualToString:@"no-language-indicator"])
  {
    uint64_t v2 = @"UIKBAttributeNameNoLanguageIndicator";
  }
  else if ([v1 isEqualToString:@"notusecandidateselection"])
  {
    uint64_t v2 = @"UIKBAttributeNameNotUseCandidateSelection";
  }
  else if ([v1 isEqualToString:@"popup-bias"])
  {
    uint64_t v2 = @"UIKBAttributeNamePopupBias";
  }
  else if ([v1 isEqualToString:@"rendering"])
  {
    uint64_t v2 = @"UIKBAttributeNameRendering";
  }
  else if ([v1 isEqualToString:@"restable"])
  {
    uint64_t v2 = @"UIKBAttributeNameRestable";
  }
  else if ([v1 isEqualToString:@"shift"])
  {
    uint64_t v2 = @"UIKBAttributeNameShift";
  }
  else if ([v1 isEqualToString:@"shift-after"])
  {
    uint64_t v2 = @"UIKBAttributeNameShiftAfter";
  }
  else if ([v1 isEqualToString:@"shift-alternate"])
  {
    uint64_t v2 = @"UIKBAttributeNameShiftAlternate";
  }
  else if ([v1 isEqualToString:@"shift-alternate-small-display"])
  {
    uint64_t v2 = @"UIKBAttributeNameShiftAlternateSmallDisplay";
  }
  else if ([v1 isEqualToString:@"shift-is-plane-chooser"])
  {
    uint64_t v2 = @"UIKBAttributeNameShiftIsPlaneChooser";
  }
  else if ([v1 isEqualToString:@"shift-rendering"])
  {
    uint64_t v2 = @"UIKBAttributeNameShiftRendering";
  }
  else if ([v1 isEqualToString:@"shouldskipcandidateselection"])
  {
    uint64_t v2 = @"UIKBAttributeNameShouldSkipCandidateSelection";
  }
  else if ([v1 isEqualToString:@"shouldskipcandidateselectionforvariants"])
  {
    uint64_t v2 = @"UIKBAttributeNameShouldSkipCandidateSelectionForVariants";
  }
  else if ([v1 isEqualToString:@"shouldsuppressdragretest"])
  {
    uint64_t v2 = @"UIKBAttributeNameShouldSuppressDragRetest";
  }
  else if ([v1 isEqualToString:@"slide-down"])
  {
    uint64_t v2 = @"UIKBAttributeNameSlideDown";
  }
  else if ([v1 isEqualToString:@"split-alternate"])
  {
    uint64_t v2 = @"UIKBAttributeNameSplitAlternate";
  }
  else if ([v1 isEqualToString:@"state"])
  {
    uint64_t v2 = @"UIKBAttributeNameState";
  }
  else if ([v1 isEqualToString:@"supported-types"])
  {
    uint64_t v2 = @"UIKBAttributeNameSupportedTypes";
  }
  else if ([v1 isEqualToString:@"supports-continuous-path"])
  {
    uint64_t v2 = @"UIKBAttributeNameSupportsContinuousPath";
  }
  else if ([v1 isEqualToString:@"supports-multitap"])
  {
    uint64_t v2 = @"UIKBAttributeNameSupportsMultitap";
  }
  else if ([v1 isEqualToString:@"text-alignment"])
  {
    uint64_t v2 = @"UIKBAttributeNameTextAlignment";
  }
  else if ([v1 isEqualToString:@"tint"])
  {
    uint64_t v2 = @"UIKBAttributeNameTint";
  }
  else if ([v1 isEqualToString:@"variant-popup-bias"])
  {
    uint64_t v2 = @"UIKBAttributeNameVariantPopupBias";
  }
  else if ([v1 isEqualToString:@"variant-type"])
  {
    uint64_t v2 = @"UIKBAttributeNameVariantType";
  }
  else if ([v1 isEqualToString:@"visible"])
  {
    uint64_t v2 = @"UIKBAttributeNameVisible";
  }
  else if ([v1 isEqualToString:@"UIKeyboardTypeASCIICapableNumberPad"])
  {
    uint64_t v2 = @"UIKBAttributeValueKeyboardTypeASCIICapableNumberPadStr";
  }
  else if ([v1 isEqualToString:@"UIKeyboardTypeASCIICapable"])
  {
    uint64_t v2 = @"UIKBAttributeValueKeyboardTypeASCIICapableStr";
  }
  else if ([v1 isEqualToString:@"UIKeyboardTypeDecimalPad"])
  {
    uint64_t v2 = @"UIKBAttributeValueKeyboardTypeDecimalPadStr";
  }
  else if ([v1 isEqualToString:@"UIKeyboardTypeDefault"])
  {
    uint64_t v2 = @"UIKBAttributeValueKeyboardTypeDefaultStr";
  }
  else if ([v1 isEqualToString:@"UIKeyboardTypeEmailAddress"])
  {
    uint64_t v2 = @"UIKBAttributeValueKeyboardTypeEmailAddressStr";
  }
  else if ([v1 isEqualToString:@"UIKeyboardTypeNamePhonePad"])
  {
    uint64_t v2 = @"UIKBAttributeValueKeyboardTypeNamePhonePadStr";
  }
  else if ([v1 isEqualToString:@"UIKeyboardTypeNumberPad"])
  {
    uint64_t v2 = @"UIKBAttributeValueKeyboardTypeNumberPadStr";
  }
  else if ([v1 isEqualToString:@"UIKeyboardTypeNumbersAndPunctuation"])
  {
    uint64_t v2 = @"UIKBAttributeValueKeyboardTypeNumbersAndPunctuationStr";
  }
  else if ([v1 isEqualToString:@"UIKeyboardTypePhonePad"])
  {
    uint64_t v2 = @"UIKBAttributeValueKeyboardTypePhonePadStr";
  }
  else if ([v1 isEqualToString:@"UIKeyboardTypeTwitter"])
  {
    uint64_t v2 = @"UIKBAttributeValueKeyboardTypeTwitterStr";
  }
  else if ([v1 isEqualToString:@"UIKeyboardTypeURL"])
  {
    uint64_t v2 = @"UIKBAttributeValueKeyboardTypeURLStr";
  }
  else if ([v1 isEqualToString:@"UIKeyboardTypeWebSearch"])
  {
    uint64_t v2 = @"UIKBAttributeValueKeyboardTypeWebSearchStr";
  }
  else if ([v1 isEqualToString:@"KBabstract"])
  {
    uint64_t v2 = @"UIKBTreePropertyAbstract";
  }
  else if ([v1 isEqualToString:@"KBactiveGeometriesList"])
  {
    uint64_t v2 = @"UIKBTreePropertyActiveGeometriesList";
  }
  else if ([v1 isEqualToString:@"KBcachedGestureLayout"])
  {
    uint64_t v2 = @"UIKBTreePropertyCachedGestureLayout";
  }
  else if ([v1 isEqualToString:@"KBCachedKeyboardType"])
  {
    uint64_t v2 = @"UIKBTreePropertyCachedKeyboardType";
  }
  else if ([v1 isEqualToString:@"KBclipCorners"])
  {
    uint64_t v2 = @"UIKBTreePropertyClipCorners";
  }
  else if ([v1 isEqualToString:@"KBdisplayRowHint"])
  {
    uint64_t v2 = @"UIKBTreePropertyDisplayRowHint";
  }
  else if ([v1 isEqualToString:@"KBdisplayString"])
  {
    uint64_t v2 = @"UIKBTreePropertyDisplayString";
  }
  else if ([v1 isEqualToString:@"KBdisplayType"])
  {
    uint64_t v2 = @"UIKBTreePropertyDisplayType";
  }
  else if ([v1 isEqualToString:@"KBdisplayTypeHint"])
  {
    uint64_t v2 = @"UIKBTreePropertyDisplayTypeHint";
  }
  else if ([v1 isEqualToString:@"KBdynamic"])
  {
    uint64_t v2 = @"UIKBTreePropertyDynamicLayout";
  }
  else if ([v1 isEqualToString:@"KBflickDirection"])
  {
    uint64_t v2 = @"UIKBTreePropertyFlickDirection";
  }
  else if ([v1 isEqualToString:@"KBforceMultitap"])
  {
    uint64_t v2 = @"UIKBTreePropertyForceMultitap";
  }
  else if ([v1 isEqualToString:@"KBgeometriesList"])
  {
    uint64_t v2 = @"UIKBTreePropertyGeometriesList";
  }
  else if ([v1 isEqualToString:@"KBgeometry"])
  {
    uint64_t v2 = @"UIKBTreePropertyGeometry";
  }
  else if ([v1 isEqualToString:@"KBgestureKey"])
  {
    uint64_t v2 = @"UIKBTreePropertyGestureKey";
  }
  else if ([v1 isEqualToString:@"KBghost"])
  {
    uint64_t v2 = @"UIKBTreePropertyGhost";
  }
  else if ([v1 isEqualToString:@"KBhighlightedVariantsList"])
  {
    uint64_t v2 = @"UIKBTreePropertyHighlightedVariantsList";
  }
  else if ([v1 isEqualToString:@"KBhint"])
  {
    uint64_t v2 = @"UIKBTreePropertyHint";
  }
  else if ([v1 isEqualToString:@"KBinteractionType"])
  {
    uint64_t v2 = @"UIKBTreePropertyInteractionType";
  }
  else if ([v1 isEqualToString:@"KBunionFrame"])
  {
    uint64_t v2 = @"UIKBTreePropertyKeyUnionFrame";
  }
  else if ([v1 isEqualToString:@"KBunionPaddedFrame"])
  {
    uint64_t v2 = @"UIKBTreePropertyKeyUnionPaddedFrame";
  }
  else if ([v1 isEqualToString:@"KBlocalizationKey"])
  {
    uint64_t v2 = @"UIKBTreePropertyLocalizationKey";
  }
  else if ([v1 isEqualToString:@"KBname"])
  {
    uint64_t v2 = @"UIKBTreePropertyName";
  }
  else if ([v1 isEqualToString:@"KBoverrideDisplayString"])
  {
    uint64_t v2 = @"UIKBTreePropertyOverrideDisplayString";
  }
  else if ([v1 isEqualToString:@"KBother"])
  {
    uint64_t v2 = @"UIKBTreePropertyParent";
  }
  else if ([v1 isEqualToString:@"KBparentKey"])
  {
    uint64_t v2 = @"UIKBTreePropertyParentKey";
  }
  else if ([v1 isEqualToString:@"KBpopupDirection"])
  {
    uint64_t v2 = @"UIKBTreePropertyPopupDirection";
  }
  else if ([v1 isEqualToString:@"KBpreventPaddle"])
  {
    uint64_t v2 = @"UIKBTreePropertyPreventPaddle";
  }
  else if ([v1 isEqualToString:@"KBrepresentedString"])
  {
    uint64_t v2 = @"UIKBTreePropertyRepresentedString";
  }
  else if ([v1 isEqualToString:@"KBRowSetVariantType"])
  {
    uint64_t v2 = @"UIKBTreePropertyRowSetVariantType";
  }
  else if ([v1 isEqualToString:@"KBsecondaryDisplayStrings"])
  {
    uint64_t v2 = @"UIKBTreePropertySecondaryDisplayStrings";
  }
  else if ([v1 isEqualToString:@"KBsecondaryRepresentedStrings"])
  {
    uint64_t v2 = @"UIKBTreePropertySecondaryRepresentedStrings";
  }
  else if ([v1 isEqualToString:@"KBselectedVariantIndex"])
  {
    uint64_t v2 = @"UIKBTreePropertySelectedVariantIndex";
  }
  else if ([v1 isEqualToString:@"KBselectedVariantIndices"])
  {
    uint64_t v2 = @"UIKBTreePropertySelectedVariantIndices";
  }
  else if ([v1 isEqualToString:@"KBshape"])
  {
    uint64_t v2 = @"UIKBTreePropertyShape";
  }
  else if ([v1 isEqualToString:@"KBsplitMode"])
  {
    uint64_t v2 = @"UIKBTreePropertySplitMode";
  }
  else if ([v1 isEqualToString:@"KBtheme"])
  {
    uint64_t v2 = @"UIKBTreePropertyTheme";
  }
  else if ([v1 isEqualToString:@"KBToggleKeys"])
  {
    uint64_t v2 = @"UIKBTreePropertyTogglePrefix";
  }
  else if ([v1 isEqualToString:@"KBvisualStyle"])
  {
    uint64_t v2 = @"UIKBTreePropertyVisualStyle";
  }
  else if ([v1 isEqualToString:@"KBvisualStyling"])
  {
    uint64_t v2 = @"UIKBTreePropertyVisualStyling";
  }
  else
  {
    uint64_t v2 = [NSString stringWithFormat:@"@\"%@\"", v1];
  }

  return v2;
}

uint64_t textAlignmentFromAttribute(int a1)
{
  uint64_t v1 = 1;
  if (a1 == 29) {
    uint64_t v1 = 2;
  }
  if (a1 == 21) {
    return 0;
  }
  else {
    return v1;
  }
}

void sub_1861A8874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

id nameByRemovingHash(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    int v3 = [v1 rangeOfString:@"_"];
    if (v3)
    {
      uint64_t v4 = 0;
      while ([v2 characterAtIndex:v4] - 48 < 0xA)
      {
        if (v3 == ++v4) {
          goto LABEL_6;
        }
      }
      id v5 = v2;
    }
    else
    {
LABEL_6:
      id v5 = [v2 substringFromIndex:(v3 + 1)];
    }
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v6 = 0;
  }

  return v6;
}

id tailComponentOfName(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_msgSend(v1, "substringFromIndex:", objc_msgSend(v1, "rangeOfString:options:", @"_", 4) + 1);
  }
  else
  {
    uint64_t v2 = 0;
  }
  return v2;
}

void sub_1861AFAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t keyPositionSort(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  if (a3) {
    char v7 = [a3 BOOLValue] ^ 1;
  }
  else {
    char v7 = 1;
  }
  id v8 = v5;
  id v9 = v6;
  [v8 frame];
  double v11 = v10;
  [v9 frame];
  if (v11 > v12) {
    goto LABEL_5;
  }
  [v8 frame];
  double v15 = v14;
  [v9 frame];
  if (v15 < v16)
  {
LABEL_13:
    uint64_t v13 = -1;
    goto LABEL_14;
  }
  [v8 frame];
  double v18 = v17;
  [v9 frame];
  if ((v7 & 1) == 0)
  {
    if (v18 <= v19)
    {
      [v8 frame];
      double v25 = v24;
      [v9 frame];
      uint64_t v13 = v25 < v26;
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v18 > v19)
  {
LABEL_5:
    uint64_t v13 = 1;
    goto LABEL_14;
  }
  [v8 frame];
  double v21 = v20;
  [v9 frame];
  if (v21 >= v22) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = -1;
  }
LABEL_14:

  return v13;
}

void sub_1861B4190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_1861B6128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t variantOrderSort(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  int v7 = [a3 BOOLValue];
  id v8 = v5;
  id v9 = v6;
  [v8 frame];
  double v11 = v10;
  [v9 frame];
  if (v11 <= v12)
  {
    [v8 frame];
    double v15 = v14;
    [v9 frame];
    if (v15 >= v16)
    {
      [v8 frame];
      double v18 = v17;
      [v9 frame];
      if (v18 <= v19)
      {
        [v8 frame];
        double v23 = v22;
        [v9 frame];
        if (v23 >= v24)
        {
          uint64_t v13 = 0;
          goto LABEL_13;
        }
        BOOL v20 = v7 == 0;
        uint64_t v21 = -1;
      }
      else
      {
        BOOL v20 = v7 == 0;
        uint64_t v21 = 1;
      }
      if (v20) {
        uint64_t v13 = -v21;
      }
      else {
        uint64_t v13 = v21;
      }
    }
    else
    {
      uint64_t v13 = -1;
    }
  }
  else
  {
    uint64_t v13 = 1;
  }
LABEL_13:

  return v13;
}

void sub_1861BBC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

id _UIKeyShortcutHUDLog()
{
  if (qword_1EB261788 != -1) {
    dispatch_once(&qword_1EB261788, &__block_literal_global_321);
  }
  id v0 = (void *)qword_1EB261780;
  return v0;
}

void _HandleUIKeyShortcutHUDCancelScheduledHUDPresentationDarwinNotification()
{
  id v0 = +[UIKeyShortcutHUDService sharedHUDService];
  [v0 performSelectorOnMainThread:sel__handleCancelScheduledHUDPresentationDarwinNotification withObject:0 waitUntilDone:0];
}

void _HandleUIKeyShortcutSystemHUDDidPresentDarwinNotification()
{
  id v0 = +[UIKeyShortcutHUDService sharedHUDService];
  [v0 performSelectorOnMainThread:sel__handleSystemHUDPresentationDarwinNotification withObject:0 waitUntilDone:0];
}

void _HandleUIKeyShortcutSystemHUDPreventUnintendedPresentationDarwinNotification()
{
  id v0 = +[UIKeyShortcutHUDService sharedHUDService];
  [v0 performSelectorOnMainThread:sel__handleSystemHUDPreventUnintendedPresentationDarwinNotificationIfNeeded withObject:0 waitUntilDone:0];
}

void sub_1861BFDF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1861C111C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void ___isSystemHUDProcess_block_invoke()
{
  if ([(id)UIApp isFrontBoard])
  {
    byte_1EB261779 = 1;
  }
  else
  {
    _UIMainBundleIdentifier();
    id v0 = (id)objc_claimAutoreleasedReturnValue();
    byte_1EB261779 = [v0 isEqualToString:@"com.apple.Spotlight"];
  }
}

unsigned __int8 **UIKBColorDefLookup(const char *a1, int a2)
{
  if ((a2 - 12) <= 0x38)
  {
    int v2 = a2;
    int v3 = a2;
    int v4 = a2;
    int v5 = a2;
    int v6 = a2;
    switch(a2)
    {
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
        goto LABEL_8;
      case 17:
      case 18:
      case 19:
      case 20:
        goto LABEL_7;
      case 21:
        goto LABEL_6;
      case 22:
      case 23:
        goto LABEL_5;
      case 24:
        goto LABEL_4;
      default:
        int v2 = hash_asso_values[*((unsigned __int8 *)a1 + 24) + 1] + a2;
LABEL_4:
        int v3 = v2 + hash_asso_values[*((unsigned __int8 *)a1 + 23)];
LABEL_5:
        int v4 = v3 + hash_asso_values[*((unsigned __int8 *)a1 + 21) + 3];
LABEL_6:
        int v5 = v4 + hash_asso_values[*((unsigned __int8 *)a1 + 20)];
LABEL_7:
        int v6 = v5 + hash_asso_values[*((unsigned __int8 *)a1 + 16)];
LABEL_8:
        unsigned int v7 = v6 + hash_asso_values[*((unsigned __int8 *)a1 + 9)] + hash_asso_values[a1[a2 - 1]];
        if (v7 > 0x2E5) {
          return 0;
        }
        id v8 = (unsigned __int8 **)((char *)&UIKBColorDefLookup_wordlist + 24 * v7);
        if (*(unsigned __int8 *)a1 != **v8 || strcmp(a1 + 1, (const char *)*v8 + 1)) {
          return 0;
        }
        return v8;
    }
  }
  return 0;
}

void *UIKBRectsCreate(void *a1, void *a2, int a3)
{
  id v5 = a1;
  id v6 = a2;
  unsigned int v7 = v6;
  id v8 = 0;
  if (v5 && v6)
  {
    id v8 = malloc_type_calloc(1uLL, 0xB0uLL, 0x1000040C3A7E6FCuLL);
    [v7 frame];
    *(void *)id v8 = v9;
    *((void *)v8 + 1) = v10;
    *((void *)v8 + 2) = v11;
    *((void *)v8 + 3) = v12;
    [v7 paddedFrame];
    *((void *)v8 + 4) = v13;
    *((void *)v8 + 5) = v14;
    *((void *)v8 + 6) = v15;
    *((void *)v8 + 7) = v16;
    [v7 paddedFrame];
    *((void *)v8 + _Block_object_dispose(&a9, 8) = v17;
    *((void *)v8 + 9) = v18;
    *((void *)v8 + 10) = v19;
    *((void *)v8 + 11) = v20;
    [v7 paddedFrame];
    *((void *)v8 + 12) = v21;
    *((void *)v8 + 13) = v22;
    *((void *)v8 + 14) = v23;
    *((void *)v8 + 15) = v24;
    [v7 paddedFrame];
    *((void *)v8 + 16) = v25;
    *((void *)v8 + 17) = v26;
    *((void *)v8 + 1_Block_object_dispose(&a9, 8) = v27;
    *((void *)v8 + 19) = v28;
    *((void *)v8 + 20) = 0;
    *((void *)v8 + 21) = 0;
    if ([v5 visualStyle] == 1
      || [v5 visualStyle] == 2
      || [v5 visualStyle] == 3
      || [v5 visualStyle] == 5
      || [v5 visualStyle] == 4
      || [v5 visualStyle] == 103)
    {
      UIKBRectsInit_iPhone((uint64_t)v8, v5, v7, a3);
    }
    else if ([v5 visualStyle] == 102 {
           || [v5 visualStyle] == 104
    }
           || [v5 visualStyle] == 105
           || [v5 visualStyle] == 101
           || [v5 visualStyle] == 106
           || [v5 visualStyle] == 107
           || [v5 visualStyle] == 108
           || [v5 visualStyle] == 109)
    {
      UIKBRectsInit_Wildcat((uint64_t)v8, v5, v7, a3);
    }
    *(CGRect *)id v8 = CGRectIntegral(*(CGRect *)v8);
    *((CGRect *)v8 + 1) = CGRectIntegral(*((CGRect *)v8 + 1));
    *((CGRect *)v8 + 2) = CGRectIntegral(*((CGRect *)v8 + 2));
    *((CGRect *)v8 + 4) = CGRectIntegral(*((CGRect *)v8 + 4));
  }

  return v8;
}

void UIKBRectsRelease(void *a1)
{
  if (a1) {
    free(a1);
  }
}

double UIKBRectsGetFrame(uint64_t a1)
{
  return *(double *)a1;
}

double *UIKBRectsSetFrame(double *result, double a2, double a3, double a4, double a5)
{
  __CFString *result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  return result;
}

double UIKBRectsGetPaddedFrame(uint64_t a1)
{
  return *(double *)(a1 + 32);
}

double *UIKBRectsSetPaddedFrame(double *result, double a2, double a3, double a4, double a5)
{
  result[4] = a2;
  result[5] = a3;
  result[6] = a4;
  result[7] = a5;
  return result;
}

double UIKBRectsGetDisplayFrame(uint64_t a1)
{
  return *(double *)(a1 + 64);
}

double *UIKBRectsSetDisplayFrame(double *result, double a2, double a3, double a4, double a5)
{
  result[8] = a2;
  result[9] = a3;
  result[10] = a4;
  result[11] = a5;
  return result;
}

double UIKBRectsGetSymbolFrame(uint64_t a1)
{
  return *(double *)(a1 + 96);
}

double *UIKBRectsSetSymbolFrame(double *result, double a2, double a3, double a4, double a5)
{
  result[12] = a2;
  result[13] = a3;
  result[14] = a4;
  result[15] = a5;
  return result;
}

double UIKBRectsGetVariantsFrame(uint64_t a1)
{
  return *(double *)(a1 + 128);
}

double *UIKBRectsSetVariantsFrame(double *result, double a2, double a3, double a4, double a5)
{
  result[16] = a2;
  result[17] = a3;
  result[18] = a4;
  result[19] = a5;
  return result;
}

uint64_t UIKBRectsGetVariantsOffset(uint64_t a1)
{
  return *(unsigned int *)(a1 + 160);
}

uint64_t UIKBRectsSetVariantsOffset(uint64_t result, int a2)
{
  *(_DWORD *)(result + 160) = a2;
  return result;
}

uint64_t UIKBRectsGetStringPairMargin(uint64_t a1)
{
  return *(unsigned int *)(a1 + 164);
}

uint64_t UIKBRectsSetStringPairMargin(uint64_t result, int a2)
{
  *(_DWORD *)(result + 164) = a2;
  return result;
}

double UIKBRectsGetStretchHeight(uint64_t a1)
{
  return *(double *)(a1 + 168);
}

uint64_t UIKBRectsSetStretchHeight(uint64_t result, double a2)
{
  *(double *)(result + 16_Block_object_dispose(&a9, 8) = a2;
  return result;
}

uint64_t UIKBPopupBiasForKey(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  unsigned int v5 = [v3 intForProperty:@"popup-bias"];
  [v3 paddedFrame];
  double MinX = CGRectGetMinX(v21);
  [v4 frame];
  double v8 = v7;

  [v3 paddedFrame];
  CGFloat v10 = v9;
  CGFloat v12 = v11;
  CGFloat v14 = v13;
  CGFloat v16 = v15;

  v22.origin.CGFloat x = v10;
  v22.origin.CGFloat y = v12;
  v22.size.CGFloat width = v14;
  v22.size.CGFloat height = v16;
  double MaxX = CGRectGetMaxX(v22);
  if (MinX < 15.0) {
    unsigned int v18 = 29;
  }
  else {
    unsigned int v18 = 0;
  }
  if (v8 - MaxX < 15.0) {
    unsigned int v19 = 21;
  }
  else {
    unsigned int v19 = 0;
  }
  if (v5 != 21) {
    unsigned int v19 = v5;
  }
  if (v5 == 29) {
    return v18;
  }
  else {
    return v19;
  }
}

void UIKBAddRoundedRect(CGContext *a1, char a2, CGFloat a3, CGFloat a4, double a5, double a6, CGFloat a7)
{
  Mutable = CGPathCreateMutable();
  UIKBAddRoundedRectToPath(Mutable, a2, 0, a3, a4, a5, a6, a7);
  CGContextAddPath(a1, Mutable);
  CGPathRelease(Mutable);
}

void UIKBAddRoundedRectToPath(CGMutablePathRef path, char a2, int a3, CGFloat a4, CGFloat a5, double a6, double a7, CGFloat a8)
{
  if ((a2 & 1) == 0)
  {
    CGPathMoveToPoint(path, 0, a4, a5);
    if ((a2 & 4) != 0)
    {
      double v25 = a6;
      double v16 = a5 + a7;
      if (a3)
      {
        double v17 = a4 + 0.5;
        double v18 = a4 + 1.0;
        double v19 = a4 + a8;
        goto LABEL_8;
      }
      double v19 = a4 + a8;
      goto LABEL_17;
    }
    goto LABEL_11;
  }
  double v19 = a4 + a8;
  if (a3)
  {
    CGPathMoveToPoint(path, 0, a4 + a8, a5);
    double v18 = a4 + 1.0;
    double v17 = a4 + 0.5;
    CGPathAddCurveToPoint(path, 0, a4 + 1.0, a5 + 0.5, a4 + 0.5, a5 + 1.0, a4, a5 + a8);
    if ((a2 & 4) != 0)
    {
      double v25 = a6;
      double v16 = a5 + a7;
LABEL_8:
      CGPathAddLineToPoint(path, 0, a4, v16 - a8);
      CGPathAddCurveToPoint(path, 0, v17, v16 + -1.0, v18, v16 + -0.5, v19, v16);
      a6 = v25;
      if ((a2 & 8) != 0)
      {
        double v20 = a4 + v25;
        double v21 = a5 + a7;
        goto LABEL_13;
      }
LABEL_18:
      double v22 = a4 + a6;
      CGPathAddLineToPoint(path, 0, a4 + a6, a5 + a7);
      if ((a2 & 2) != 0)
      {
        if (a3) {
          goto LABEL_20;
        }
        goto LABEL_25;
      }
LABEL_23:
      CGPathAddLineToPoint(path, 0, a4 + a6, a5);
      goto LABEL_26;
    }
    goto LABEL_11;
  }
  CGPathAddArc(path, 0, a4 + a8, a5 + a8, a8, 4.71238898, 3.14159265, 1);
  if ((a2 & 4) == 0)
  {
LABEL_11:
    double v21 = a5 + a7;
    CGPathAddLineToPoint(path, 0, a4, a5 + a7);
    if ((a2 & 8) == 0) {
      goto LABEL_18;
    }
    double v20 = a4 + a6;
    if (a3)
    {
LABEL_13:
      CGPathAddLineToPoint(path, 0, v20 - a8, v21);
      CGPathAddCurveToPoint(path, 0, v20 + -1.0, v21 + -0.5, v20 + -0.5, v21 + -1.0, v20, v21 - a8);
      if ((a2 & 2) != 0)
      {
        double v22 = a4 + a6;
LABEL_20:
        CGPathAddLineToPoint(path, 0, v22, a5 + a8);
        CGPathAddCurveToPoint(path, 0, v22 + -0.5, a5 + 1.0, v22 + -1.0, a5 + 0.5, v22 - a8, a5);
        goto LABEL_26;
      }
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  double v25 = a6;
  double v16 = a5 + a7;
LABEL_17:
  CGPathAddArc(path, 0, v19, v16 - a8, a8, 3.14159265, 1.57079633, 1);
  a6 = v25;
  if ((a2 & 8) == 0) {
    goto LABEL_18;
  }
  double v20 = a4 + v25;
  double v21 = a5 + a7;
LABEL_22:
  CGPathAddArc(path, 0, v20 - a8, v21 - a8, a8, 1.57079633, 0.0, 1);
  if ((a2 & 2) == 0) {
    goto LABEL_23;
  }
  double v22 = a4 + a6;
LABEL_25:
  CGPathAddArc(path, 0, v22 - a8, a5 + a8, a8, 0.0, 4.71238898, 1);
LABEL_26:
  double v23 = -0.0;
  if (a2) {
    double v23 = a8;
  }
  double v24 = a4 + v23;
  CGPathAddLineToPoint(path, 0, v24, a5);
}

void *UIKBGetNamedLinearGradient(void *a1)
{
  id v1 = a1;
  CFDictionaryRef Mutable = (const __CFDictionary *)UIKBGetNamedLinearGradient_cache;
  if (!UIKBGetNamedLinearGradient_cache)
  {
    CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D048], MEMORY[0x1E4F1D540]);
    UIKBGetNamedLinearGradient_cache = (uint64_t)Mutable;
  }
  Value = (void *)CFDictionaryGetValue(Mutable, v1);
  if (!Value)
  {
    id v4 = (void *)[objc_alloc(MEMORY[0x1E4F28E78]) initWithString:v1];
    unsigned int v5 = (void *)[objc_alloc(MEMORY[0x1E4F28E78]) initWithString:v1];
    [v4 appendString:@"Start"];
    [v5 appendString:@"End"];
    id v6 = UIKBGetNamedColor(v4);
    double v7 = UIKBGetNamedColor(v5);
    if (v6 && v7)
    {
      Value = UIKBCreateTwoColorLinearGradient((BOOL)v6, (BOOL)v7);

      if (Value) {
        CFDictionarySetValue((CFMutableDictionaryRef)UIKBGetNamedLinearGradient_cache, v1, Value);
      }
    }
    else
    {

      Value = 0;
    }
    CGGradientRelease((CGGradientRef)Value);
  }

  return Value;
}

void *UIKBGetNamedColor(void *a1)
{
  id v1 = a1;
  CFDictionaryRef Mutable = (const __CFDictionary *)UIKBGetNamedColor_cache;
  if (!UIKBGetNamedColor_cache)
  {
    CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D048], MEMORY[0x1E4F1D540]);
    UIKBGetNamedColor_cache = (uint64_t)Mutable;
  }
  Value = (void *)CFDictionaryGetValue(Mutable, v1);
  if (!Value)
  {
    id v4 = v1;
    unsigned int v5 = (const char *)[v4 UTF8String];
    int v6 = strlen(v5);
    double v7 = UIKBColorDefLookup(v5, v6);
    if (v7)
    {
      Value = UIKBColorCreate(*((unsigned int *)v7 + 2), *((unsigned int *)v7 + 3), *((unsigned int *)v7 + 4), *((float *)v7 + 5));
    }
    else
    {
      Value = (void *)UIKBGetNamedColor_black;
      if (!UIKBGetNamedColor_black)
      {
        Value = UIKBColorCreate(0, 0, 0, 1.0);
        UIKBGetNamedColor_blacuint64_t k = (uint64_t)Value;
      }
    }
    CFDictionarySetValue((CFMutableDictionaryRef)UIKBGetNamedColor_cache, v4, Value);
    CGColorRelease((CGColorRef)Value);
  }

  return Value;
}

CGGradientRef UIKBCreateTwoColorLinearGradient(BOOL a1, BOOL a2)
{
  void v9[2] = *MEMORY[0x1E4F143B8];
  if (!a1 || !a2) {
    abort();
  }
  if (UIKBColorUsesRGB(a1) || UIKBColorUsesRGB(a2))
  {
    DeviceRGB = (CGColorSpace *)UIKBColorSpaceDeviceRGB_colorspace;
    if (!UIKBColorSpaceDeviceRGB_colorspace)
    {
      DeviceRGB = CGColorSpaceCreateDeviceRGB();
      UIKBColorSpaceDeviceRGB_colorspace = (uint64_t)DeviceRGB;
    }
  }
  else
  {
    DeviceRGB = (CGColorSpace *)UIKBColorSpaceDeviceGray_colorspace;
    if (!UIKBColorSpaceDeviceGray_colorspace)
    {
      DeviceRGB = CGColorSpaceCreateDeviceGray();
      UIKBColorSpaceDeviceGray_colorspace = (uint64_t)DeviceRGB;
    }
  }
  v9[0] = a1;
  v9[1] = a2;
  CFArrayRef v5 = [MEMORY[0x1E4F1C978] arrayWithObjects:v9 count:2];
  long long v8 = xmmword_186B89740;
  CGGradientRef v6 = CGGradientCreateWithColors(DeviceRGB, v5, (const CGFloat *)&v8);

  return v6;
}

BOOL UIKBColorUsesRGB(BOOL result)
{
  if (result)
  {
    id v1 = (CGColor *)result;
    uint64_t result = CGColorGetNumberOfComponents((CGColorRef)result) == 4
          && ((Components = CGColorGetComponents(v1), double v3 = Components[1], *Components != v3) || v3 != Components[2]);
  }
  return result;
}

CGColorSpaceRef UIKBColorSpaceDeviceRGB()
{
  CGColorSpaceRef result = (CGColorSpaceRef)UIKBColorSpaceDeviceRGB_colorspace;
  if (!UIKBColorSpaceDeviceRGB_colorspace)
  {
    CGColorSpaceRef result = CGColorSpaceCreateDeviceRGB();
    UIKBColorSpaceDeviceRGB_colorspace = (uint64_t)result;
  }
  return result;
}

CGColorSpaceRef UIKBColorSpaceDeviceGray()
{
  CGColorSpaceRef result = (CGColorSpaceRef)UIKBColorSpaceDeviceGray_colorspace;
  if (!UIKBColorSpaceDeviceGray_colorspace)
  {
    CGColorSpaceRef result = CGColorSpaceCreateDeviceGray();
    UIKBColorSpaceDeviceGray_colorspace = (uint64_t)result;
  }
  return result;
}

CGFloat UIKBDrawLinearGradient(CGContext *a1, CGGradient *a2, CGFloat result, double a4, double a5, double a6)
{
  if (a2)
  {
    v6.CGFloat y = a4 + a6;
    v6.CGFloat x = result;
    CGContextDrawLinearGradient(a1, a2, *(CGPoint *)&result, v6, 0);
  }
  return result;
}

CGColorRef UIKBColorCreate(unint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a1 == a2 && a2 == a3)
  {
    CGFloat components = (double)a1 / 255.0;
    v8.f64[0] = a4;
    DeviceGraCGFloat y = (CGColorSpace *)UIKBColorSpaceDeviceGray_colorspace;
    if (!UIKBColorSpaceDeviceGray_colorspace)
    {
      DeviceGraCGFloat y = CGColorSpaceCreateDeviceGray();
      UIKBColorSpaceDeviceGray_colorspace = (uint64_t)DeviceGray;
    }
  }
  else
  {
    CGFloat components = (double)a1 / 255.0;
    v5.i64[0] = a2;
    v5.i64[1] = a3;
    float64x2_t v8 = vdivq_f64(vcvtq_f64_u64(v5), (float64x2_t)vdupq_n_s64(0x406FE00000000000uLL));
    double v9 = a4;
    DeviceGraCGFloat y = (CGColorSpace *)UIKBColorSpaceDeviceRGB_colorspace;
    if (!UIKBColorSpaceDeviceRGB_colorspace)
    {
      DeviceGraCGFloat y = CGColorSpaceCreateDeviceRGB();
      UIKBColorSpaceDeviceRGB_colorspace = (uint64_t)DeviceGray;
    }
  }
  return CGColorCreate(DeviceGray, &components);
}

void UIKBClipTwoPieceBackground(CGContext *a1, char a2, double a3, double a4, double a5, double a6, CGFloat a7, CGFloat a8, double a9, double a10, double a11, CGFloat a12, double a13, double a14)
{
  double v27 = UIKBCornerRadius();
  UIKBAddRoundedRect(a1, a2 & 0xA, a7, a8, a9, a10, v27);
  UIKBAddRoundedRect(a1, a2 & 5, a5 - a13, a12, a13, a14, v27);
  CGContextClip(a1);
}

double UIKBCornerRadius()
{
  id v0 = +[UIKeyboardPreferencesController sharedPreferencesController];
  id v1 = [v0 preferencesActions];
  [v1 rivenSizeFactor:10.0];
  double v3 = v2;

  return v3;
}

__CFString *UIKBShiftKeyStringForActiveInputMode(void *a1)
{
  id v1 = a1;
  int v2 = [v1 displayTypeHint];
  switch(v2)
  {
    case 2:
      uint64_t v3 = UIKeyboardGetNumbersStringForActiveInputMode();
      goto LABEL_6;
    case 3:
      id v4 = @"#+=";
      break;
    case 7:
      uint64_t v3 = [v1 displayString];
LABEL_6:
      id v4 = (__CFString *)v3;
      break;
    default:
      id v4 = 0;
      break;
  }

  return v4;
}

__CFString *UIKBReturnKeyStringForActiveInputMode(void *a1)
{
  uint64_t v1 = (int)[a1 displayTypeHint];
  return UIKeyboardLocalizedReturnKeyName(v1);
}

id UIKBMoreKeyStringForActiveInputMode(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64x2_t v5 = [v4 displayString];
  if ([v3 visualStyle] == 101) {
    goto LABEL_34;
  }
  CGPoint v6 = @"123";
  switch([v4 displayTypeHint])
  {
    case 1u:
      uint64_t v7 = UIKeyboardGetABCStringForActiveInputMode();
      goto LABEL_32;
    case 2u:
      if ([v3 visualStyle] == 301) {
        goto LABEL_22;
      }
      if ((([v3 visualStyling] & 0x3F) == 1
         || ([v3 visualStyling] & 0x3F) == 0x18
         || ([v3 visualStyling] & 0x3F) == 0x19
         || ([v3 visualStyling] & 0x3F) == 0x1A
         || ([v3 visualStyling] & 0x3F) == 0x17)
        && ([v3 isFloating] & 1) == 0)
      {
        uint64_t v10 = +[UIKeyboardPreferencesController sharedPreferencesController];
        double v11 = [v10 preferencesActions];
        [v11 rivenSizeFactor:1.0];
        if (v12 <= 1.0 || (unint64_t)[(id)UIKeyboardActiveUserSelectableInputModes count] < 2)
        {
        }
        else
        {
          BOOL v13 = +[UIDictationController fetchCurrentInputModeSupportsDictation];

          if (v13)
          {
LABEL_22:
            uint64_t v7 = UIKeyboardGetNumbersStringForActiveInputMode();
LABEL_32:
            CGPoint v6 = (__CFString *)v7;
            goto LABEL_33;
          }
        }
LABEL_31:
        uint64_t v7 = UIKeyboardGetNumbersSymbolsStringForActiveInputMode();
        goto LABEL_32;
      }
      if ((unint64_t)[(id)UIKeyboardActiveUserSelectableInputModes count] > 1
        || +[UIDictationController fetchCurrentInputModeSupportsDictation])
      {
        goto LABEL_22;
      }
      if (UIKBKeyboardIsURLKeyboard(v3))
      {
        float64x2_t v8 = NSString;
        uint64_t v9 = UIKeyboardGetNumbersStringForActiveInputMode();
        [v8 stringWithFormat:@"@%@", v9];
        goto LABEL_39;
      }
      if (!UIKBKeyboardIsEmailKeyboard(v3)) {
        goto LABEL_31;
      }
      double v16 = NSString;
      uint64_t v9 = UIKeyboardGetNumbersStringForActiveInputMode();
      [v16 stringWithFormat:@"_%@", v9];
LABEL_39:
      CGPoint v6 = (__CFString *)objc_claimAutoreleasedReturnValue();

      uint64x2_t v5 = (void *)v9;
LABEL_33:

      uint64x2_t v5 = v6;
LABEL_34:
      id v14 = v5;

      return v14;
    case 4u:
      goto LABEL_33;
    case 5u:
      CGPoint v6 = @"";
      goto LABEL_33;
    case 6u:
      CGPoint v6 = @"symbols";
      goto LABEL_33;
    case 8u:
      uint64_t v7 = UIKeyboardGetJapaneseAIUStringForActiveInputMode();
      goto LABEL_32;
    default:
      if ((unint64_t)[(id)UIKeyboardActiveUserSelectableInputModes count] >= 2
        && (([v3 visualStyling] & 0x3F) != 1
         && ([v3 visualStyling] & 0x3F) != 0x18
         && ([v3 visualStyling] & 0x3F) != 0x19
         && ([v3 visualStyling] & 0x3F) != 0x1A
         && ([v3 visualStyling] & 0x3F) != 0x17
         || [v3 isFloating]))
      {
        goto LABEL_22;
      }
      goto LABEL_31;
  }
}

BOOL UIKBKeyboardIsURLKeyboard(void *a1)
{
  uint64_t v1 = [a1 name];
  BOOL v2 = [v1 rangeOfString:@"URL"] != 0x7FFFFFFFFFFFFFFFLL;

  return v2;
}

BOOL UIKBKeyboardIsEmailKeyboard(void *a1)
{
  uint64_t v1 = [a1 name];
  BOOL v2 = [v1 rangeOfString:@"Email"] != 0x7FFFFFFFFFFFFFFFLL;

  return v2;
}

uint64_t UIKBGlyphForCharacter(void *a1, __int16 a2, double a3, double a4, double a5)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  if (!UIKBGlyphForCharacter___fontDict)
  {
    uint64_t v10 = [objc_alloc(MEMORY[0x1E4F1CA60]) initWithCapacity:1];
    double v11 = (void *)UIKBGlyphForCharacter___fontDict;
    UIKBGlyphForCharacter___fontDict = v10;
  }
  double v12 = [NSNumber numberWithDouble:a3];
  BOOL v13 = [v12 stringValue];
  id v14 = [v9 stringByAppendingString:v13];

  double v15 = [(id)UIKBGlyphForCharacter___fontDict objectForKey:v14];
  if (!v15)
  {
    double v15 = [MEMORY[0x1E4F1CA60] dictionary];
    [(id)UIKBGlyphForCharacter___fontDict setObject:v15 forKey:v14];
  }
  unsigned int v16 = a2 & 0xFFF0;
  double v17 = [NSNumber numberWithUnsignedShort:a2 & 0xFFF0];
  double v18 = [v15 objectForKey:v17];
  if (v18)
  {
    id v19 = v18;
    uint64_t v20 = *(unsigned __int16 *)([v19 bytes] + 2 * (a2 & 0xF));
  }
  else
  {
    UniChar characters = a2 & 0xFFF0;
    int8x16_t v21 = (int8x16_t)vdupq_n_s16(v16);
    int8x16_t v27 = vorrq_s8(v21, (int8x16_t)xmmword_186B995A0);
    int8x8_t v28 = vorr_s8(*(int8x8_t *)v21.i8, (int8x8_t)0xC000B000A0009);
    __int16 v29 = v16 | 0xD;
    __int16 v30 = v16 | 0xE;
    __int16 v31 = a2 | 0xF;
    double v22 = (const __CTFont *)UIKBCreateCTFont(v9, a3, a4, a5);
    CTFontGetGlyphsForCharacters(v22, &characters, glyphs, 16);
    for (uint64_t i = 0; i != 32; i += 2)
      CTFontTransformGlyphs();
    id v19 = [MEMORY[0x1E4F1C9B8] dataWithBytes:glyphs length:32];
    [v15 setObject:v19 forKey:v17];
    uint64_t v20 = glyphs[a2 & 0xF];
  }

  return v20;
}

uint64_t UIKBCreateCTFont(void *a1, double a2, double a3, double a4)
{
  id v7 = a1;
  int v8 = [v7 isEqualToString:qword_1EB261820];
  int v9 = [v7 isEqualToString:@"UIKBRenderFactorySystemFontName"];
  if (!v8 || a2 > 0.0 && *(double *)&qword_1EB261828 != a2 || v9 && a3 != 0.0 && *(double *)&qword_1EB261830 != a3)
  {
    if (a2 <= 0.0) {
      a2 = 22.0;
    }
    if (qword_1EB261838) {
      CFRelease((CFTypeRef)qword_1EB261838);
    }
    if ([v7 isEqualToString:@"UIKBRenderFactorySystemFontName"]) {
      [off_1E52D39B8 systemFontOfSize:a2 weight:a3 width:a4];
    }
    else {
    qword_1EB261838 = [off_1E52D39B8 fontWithName:v7 size:4096 traits:a2];
    }
    uint64_t v10 = [v7 copy];
    double v11 = (void *)qword_1EB261820;
    qword_1EB261820 = v10;

    qword_1EB261828 = *(void *)&a2;
    qword_1EB261830 = *(void *)&a3;
  }
  uint64_t v12 = qword_1EB261838;

  return v12;
}

void UIKBDrawCTLineAtPoint(CGContext *a1, const __CTLine *a2, CGColor *a3, int a4, double a5, CGFloat a6)
{
  if (a2 && a3)
  {
    CGContextSaveGState(a1);
    long long v12 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
    *(_OWORD *)&v16.CATransform3D a = *MEMORY[0x1E4F1DAB8];
    *(_OWORD *)&v16.CGFloat c = v12;
    *(_OWORD *)&v16.tCGFloat x = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
    CGContextSetTextMatrix(a1, &v16);
    CGContextScaleCTM(a1, 1.0, -1.0);
    if (a4)
    {
      CGContextRotateCTM(a1, -1.57079633);
      BOOL v13 = a1;
      CGFloat v14 = a6;
      double v15 = a5;
    }
    else
    {
      double v15 = -a6;
      BOOL v13 = a1;
      CGFloat v14 = a5;
    }
    CGContextSetTextPosition(v13, v14, v15);
    CGContextSetFillColorWithColor(a1, a3);
    CTLineDraw(a2, a1);
    CGContextRestoreGState(a1);
  }
}

const __CTLine *UIKBCreateFitCTLine(void *a1, void *a2, double *a3, void *a4, uint64_t a5, int a6, int a7, double a8, double a9, double a10, CGFloat a11, double a12, double a13, double a14)
{
  id v25 = a1;
  uint64_t v26 = v25;
  double v27 = a10 + -4.0;
  double v28 = *a3;
  do
  {
    UIKBGetFontAttributes(v28, a12, a13, a14, (uint64_t)v25, a2, a4, a5, a7);
    __int16 v29 = (const __CTLine *)CTLineCreateWithString();
    double v32 = 0.0;
    CGFloat ascent = 0.0;
    double TypographicBounds = CTLineGetTypographicBounds(v29, &ascent, &v32, 0);
    if (a7) {
      double TypographicBounds = ascent + v32;
    }
    if (TypographicBounds <= v27)
    {
      if (ascent + v32 <= a11 || (a6 & 1) != 0) {
        goto LABEL_11;
      }
    }
    else if (a6)
    {
      goto LABEL_11;
    }
    CFRelease(v29);
    double v28 = *a3 + -1.0;
    *a3 = v28;
  }
  while (v28 > 0.0);
  __int16 v29 = 0;
LABEL_11:

  return v29;
}

uint64_t UIKBGetFontAttributes(CGFloat a1, double a2, double a3, double a4, uint64_t a5, void *a6, void *a7, uint64_t a8, int a9)
{
  v73[1] = *MEMORY[0x1E4F143B8];
  id v14 = a6;
  int v15 = _AXSEnhanceTextLegibilityEnabled() != 0;
  int v16 = [v14 isEqualToString:@"UIKBRenderFactorySystemFontName"];
  char v17 = [v14 isEqualToString:qword_1EB2617C8];
  uint64_t v18 = UIKeyboardGetCurrentInputMode();
  int v70 = UIKeyboardRequiresFontFallbacksForInputMode();
  id v19 = UIKeyboardFontFallbackLanguageForInputMode();
  uint64_t v20 = v19;
  double v67 = (void *)v18;
  if (v19)
  {
    id v21 = v19;
  }
  else
  {
    TIInputModeGetLanguageWithRegion();
    id v21 = (id)objc_claimAutoreleasedReturnValue();
  }
  double v22 = v21;

  double v23 = [MEMORY[0x1E4F1CA20] canonicalLanguageIdentifierFromString:v22];
  double v24 = TIInputModeGetLanguage();

  id v25 = [MEMORY[0x1E4F1CA20] canonicalLanguageIdentifierFromString:v24];

  int v26 = [v25 isEqualToString:qword_1EB2617D0];
  uint64_t v27 = qword_1EB2617E0;
  int v28 = v70 & ~v26;
  if (*(double *)&qword_1EB2617E0 == a2) {
    char v29 = 0;
  }
  else {
    char v29 = v16;
  }
  if (*(double *)&qword_1EB2617E8 == a3) {
    char v30 = 0;
  }
  else {
    char v30 = v16;
  }
  uint64_t v31 = qword_1EB2617F8;
  if (qword_1EB2617F8) {
    char v32 = v17 ^ 1;
  }
  else {
    char v32 = 1;
  }
  double v33 = &qword_1EB261000;
  if (byte_1EB2617C1 == a9 && (v32 & 1) == 0 && (v28 & 1) == 0)
  {
    uint64_t v27 = qword_1EB2617D8;
    if (*(double *)&qword_1EB2617D8 == a1 && (v29 & 1) == 0 && (v30 & 1) == 0)
    {
      uint64_t v27 = qword_1EB2617F0;
      if (*(double *)&qword_1EB2617F0 == a4 && qword_1EB261818 == a8 && _MergedGlobals_1119 == v15) {
        goto LABEL_62;
      }
    }
  }
  uint64_t v66 = qword_1EB261818;
  if ((v17 & 1) == 0)
  {
    uint64_t v34 = objc_msgSend(v14, "copy", *(double *)&v27);
    double v35 = (void *)qword_1EB2617C8;
    qword_1EB2617C8 = v34;
  }
  if (v28)
  {
    uint64_t v36 = objc_msgSend(v25, "copy", *(double *)&v27);
    double v37 = (void *)qword_1EB2617D0;
    qword_1EB2617D0 = v36;
  }
  qword_1EB2617D8 = *(void *)&a1;
  qword_1EB2617E0 = *(void *)&a2;
  qword_1EB2617E8 = *(void *)&a3;
  qword_1EB2617F0 = *(void *)&a4;
  qword_1EB261818 = a8;
  _MergedGlobals_1119 = v15;
  byte_1EB2617C1 = a9;
  double v38 = (__CFDictionary *)qword_1EB2617F8;
  if (!qword_1EB2617F8)
  {
    qword_1EB2617F8 = (uint64_t)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CTParagraphStyleRef v39 = CTParagraphStyleCreate(0, 0);
    CTParagraphStyleSetCompositionLanguage();
    CFDictionarySetValue((CFMutableDictionaryRef)qword_1EB2617F8, *(const void **)off_1E52D21B8, v39);
    CFRelease(v39);
    double v38 = (__CFDictionary *)qword_1EB2617F8;
  }
  CFDictionarySetValue(v38, (const void *)*MEMORY[0x1E4F24748], &unk_1ED3F4830);
  double v40 = (__CFDictionary *)qword_1EB2617F8;
  double v41 = (const void *)*MEMORY[0x1E4F247E8];
  if (a4 == 0.0)
  {
    CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_1EB2617F8, (const void *)*MEMORY[0x1E4F247E8]);
  }
  else
  {
    double v42 = [NSNumber numberWithDouble:a4];
    CFDictionarySetValue(v40, v41, v42);
  }
  double v43 = (const void *)*MEMORY[0x1E4F248A8];
  if (a9)
  {
    CFDictionarySetValue((CFMutableDictionaryRef)qword_1EB2617F8, v43, (const void *)*MEMORY[0x1E4F1CFD0]);
    if (!v16)
    {
LABEL_33:
      double v44 = v25;
      CFDictionaryRef Mutable = (__CFDictionary *)qword_1EB261800;
      double v46 = (const void **)MEMORY[0x1E4F245A8];
      if (qword_1EB261800 && v66 == a8)
      {
        if (v17)
        {
          int v47 = 0;
LABEL_46:
          if ((v70 & (v28 | v47)) == 1)
          {
            double v56 = (__CFDictionary *)qword_1EB261800;
            double v57 = (void *)MEMORY[0x1E4F1C9E8];
            double v58 = *v46;
            id v59 = (id)qword_1EB2617D0;
            double v60 = [v57 dictionaryWithObject:v14 forKey:v58];
            double v61 = (const __CTFontDescriptor *)CTFontDescriptorCreateWithAttributesAndOptions();
            double v62 = CTFontCreateWithFontDescriptor(v61, a1, 0);
            UIKBSetFontCascadeListAttributeFromFont(v56, (uint64_t)v59, v62);

            CFRelease(v61);
            CFRelease(v62);
          }
          double v63 = (const __CTFontDescriptor *)qword_1EB261808;
          if (qword_1EB261808) {
            int v64 = v47;
          }
          else {
            int v64 = 1;
          }
          if (((v64 | v28) & 1) != 0 || v66 != a8)
          {
            id v25 = v44;
            if (qword_1EB261808) {
              CFRelease((CFTypeRef)qword_1EB261808);
            }
            double v63 = (const __CTFontDescriptor *)CTFontDescriptorCreateWithAttributesAndOptions();
            qword_1EB261808 = (uint64_t)v63;
          }
          else
          {
            id v25 = v44;
          }
          double v48 = CTFontCreateWithFontDescriptor(v63, a1, 0);
          double v50 = (__CFDictionary *)qword_1EB2617F8;
          double v51 = (const void *)*MEMORY[0x1E4F243F0];
          double v49 = v48;
          goto LABEL_58;
        }
      }
      else
      {
        if (qword_1EB261800)
        {
          CFRelease((CFTypeRef)qword_1EB261800);
          qword_1EB261800 = 0;
        }
        CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        qword_1EB261800 = (uint64_t)Mutable;
        if (a8)
        {
          uint64_t v52 = *MEMORY[0x1E4F24548];
          v71[0] = *MEMORY[0x1E4F24558];
          v71[1] = v52;
          v72[0] = &unk_1ED3F4848;
          double v53 = [NSNumber numberWithInteger:a8];
          v72[1] = v53;
          id v54 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v72 forKeys:v71 count:2];
          v73[0] = v54;
          int v28 = 1;
          double v55 = [MEMORY[0x1E4F1C978] arrayWithObjects:v73 count:1];

          CFDictionarySetValue((CFMutableDictionaryRef)qword_1EB261800, (const void *)*MEMORY[0x1E4F24550], v55);
          CFDictionaryRef Mutable = (__CFDictionary *)qword_1EB261800;
        }
        else
        {
          int v28 = 1;
        }
      }
      CFDictionarySetValue(Mutable, *v46, v14);
      int v47 = 1;
      goto LABEL_46;
    }
  }
  else
  {
    CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_1EB2617F8, v43);
    if (!v16) {
      goto LABEL_33;
    }
  }
  double v48 = [off_1E52D39B8 systemFontOfSize:a1 weight:a2 width:a3];
  CFDictionarySetValue((CFMutableDictionaryRef)qword_1EB2617F8, (const void *)*MEMORY[0x1E4F243F0], v48);
  double v49 = (const void *)qword_1EB2617D0;
  if (qword_1EB2617D0)
  {
    double v50 = (__CFDictionary *)qword_1EB2617F8;
    double v51 = (const void *)*MEMORY[0x1E4F24780];
LABEL_58:
    CFDictionarySetValue(v50, v51, v49);
  }
  qword_1EB261810 = UIKBGetXHeight(v14, a1);
  if (*(double *)&qword_1EB261810 == 0.0) {
    qword_1EB261810 = CTFontGetXHeight((CTFontRef)v48);
  }
  CFRelease(v48);
  uint64_t v31 = qword_1EB2617F8;
  double v33 = &qword_1EB261000;
LABEL_62:
  *a7 = v33[258];

  return v31;
}

double UIKBGetXHeight(void *a1, double a2)
{
  id v3 = a1;
  id v4 = (void *)UIKBGetXHeight_xheights;
  if (!UIKBGetXHeight_xheights)
  {
    id v4 = &unk_1ED3F7960;
    UIKBGetXHeight_xheights = (uint64_t)&unk_1ED3F7960;
  }
  uint64x2_t v5 = [v4 objectForKey:v3];
  [v5 floatValue];
  double v7 = v6 * a2;

  return v7;
}

void UIKBSetFontCascadeListAttributeFromFont(__CFDictionary *a1, uint64_t a2, const __CTFont *a3)
{
  if (a2) {
    CFArrayRef v5 = (const __CFArray *)[MEMORY[0x1E4F1C978] arrayWithObject:a2];
  }
  else {
    CFArrayRef v5 = (const __CFArray *)[MEMORY[0x1E4F1C978] array];
  }
  CFArrayRef v6 = CTFontCopyDefaultCascadeListForLanguages(a3, v5);
  CFDictionarySetValue(a1, (const void *)*MEMORY[0x1E4F24410], v6);
  CFRelease(v6);
}

CTFontRef UIKBCTFontForInputMode(void *a1, void *a2, CGFloat a3)
{
  id v5 = a1;
  id v6 = a2;
  if (qword_1EB261848 != -1) {
    dispatch_once(&qword_1EB261848, &__block_literal_global_322);
  }
  double v7 = TIInputModeGetLanguageWithRegion();
  int v8 = [v6 fontName];
  int v9 = [v7 stringByAppendingFormat:@":%@:%f", v8, *(void *)&a3];

  uint64_t v10 = [(id)qword_1EB261840 objectForKey:v9];
  if (v10)
  {
    CTFontRef CopyWithAttributes = (CTFontRef)v10;
  }
  else
  {
    if (UIKeyboardRequiresFontFallbacksForInputMode())
    {
      CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      BOOL v13 = [MEMORY[0x1E4F1CA20] canonicalLanguageIdentifierFromString:v7];
      id v14 = TIInputModeGetLanguage();

      double v7 = [MEMORY[0x1E4F1CA20] canonicalLanguageIdentifierFromString:v14];

      UIKBSetFontCascadeListAttributeFromFont(Mutable, (uint64_t)v7, (const __CTFont *)v6);
      int v15 = (const __CTFontDescriptor *)CTFontDescriptorCreateWithAttributesAndOptions();
      CFRelease(Mutable);
    }
    else
    {
      int v15 = 0;
    }
    CTFontRef CopyWithAttributes = CTFontCreateCopyWithAttributes((CTFontRef)v6, a3, 0, v15);
    [(id)qword_1EB261840 setObject:CopyWithAttributes forKey:v9];

    if (v15) {
      CFRelease(v15);
    }
  }

  return CopyWithAttributes;
}

void __UIKBCTFontForInputMode_block_invoke()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v1 = (void *)qword_1EB261840;
  qword_1EB261840 = (uint64_t)v0;
}

CGImageRef UIKBCreateFadeClipImage(int a1, int a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10, CGFloat a11)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (!UIKBCreateFadeClipImage_colorspace) {
    UIKBCreateFadeClipImage_colorspace = (uint64_t)CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DCA0]);
  }
  double v25 = UIKBScale();
  *(_OWORD *)CGFloat components = xmmword_186B89740;
  int v26 = CGColorCreate((CGColorSpaceRef)UIKBCreateFadeClipImage_colorspace, components);
  size_t v27 = vcvtpd_u64_f64(a5 * v25);
  int v28 = CGBitmapContextCreate(0, v27, vcvtpd_u64_f64(a6 * v25), 8uLL, v27, (CGColorSpaceRef)UIKBCreateFadeClipImage_colorspace, 0);
  CGAffineTransformMakeScale(&transform, v25, v25);
  CGContextConcatCTM(v28, &transform);
  *(_OWORD *)double v49 = xmmword_186B995B0;
  char v29 = CGColorCreate((CGColorSpaceRef)UIKBCreateFadeClipImage_colorspace, v49);
  CGContextSetFillColorWithColor(v28, v29);
  v52.origin.double x = a3;
  v52.origin.double y = a4;
  v52.size.double width = a5;
  v52.size.double height = a6;
  CGContextFillRect(v28, v52);
  CGColorRelease(v29);
  v48[0] = a11;
  v48[1] = 1.0;
  char v30 = CGColorCreate((CGColorSpaceRef)UIKBCreateFadeClipImage_colorspace, v48);
  objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:", v26, v30, 0);
  CFArrayRef v31 = (const __CFArray *)objc_claimAutoreleasedReturnValue();
  CGColorRelease(v30);
  CGColorRelease(v26);
  char v32 = CGGradientCreateWithColors((CGColorSpaceRef)UIKBCreateFadeClipImage_colorspace, v31, 0);
  v53.origin.double x = a7;
  v53.origin.double y = a8;
  v53.size.double width = a9;
  v53.size.double height = a10;
  CGRect v54 = CGRectOffset(v53, -a3, -a4);
  double x = v54.origin.x;
  double y = v54.origin.y;
  double width = v54.size.width;
  double height = v54.size.height;
  CGContextClipToRect(v28, v54);
  if (a1) {
    double v37 = y;
  }
  else {
    double v37 = y + height;
  }
  if (a1) {
    double v38 = y + height;
  }
  else {
    double v38 = y;
  }
  if (a1) {
    double v39 = x;
  }
  else {
    double v39 = x + width;
  }
  if (a1) {
    double v40 = x + width;
  }
  else {
    double v40 = x;
  }
  if (a2) {
    double v41 = v39;
  }
  else {
    double v41 = x;
  }
  if (a2)
  {
    double v37 = y;
    double v42 = v40;
  }
  else
  {
    double v42 = x;
  }
  if (a2) {
    double v38 = y;
  }
  CGContextDrawLinearGradient(v28, v32, *(CGPoint *)(&v37 - 1), *(CGPoint *)(&v38 - 1), 0);
  CGGradientRelease(v32);
  CGImageRef Image = CGBitmapContextCreateImage(v28);
  CGContextRelease(v28);

  return Image;
}

double UIKBScale()
{
  double result = *(double *)&UIKBScale_scale;
  if (*(double *)&UIKBScale_scale == 0.0)
  {
    uint64_t v1 = +[UIScreen mainScreen];
    [v1 scale];
    UIKBScale_scale = v2;

    return *(double *)&UIKBScale_scale;
  }
  return result;
}

BOOL UIKBKeyboardIsLandscape(void *a1)
{
  return !UIKBKeyboardIsPortrait(a1);
}

BOOL UIKBKeyboardIsPortrait(void *a1)
{
  uint64_t v1 = [a1 name];
  BOOL v2 = [v1 rangeOfString:@"Portrait"] != 0x7FFFFFFFFFFFFFFFLL;

  return v2;
}

BOOL UIKBKeyboardIsSplit(void *a1)
{
  id v1 = a1;
  BOOL v2 = [v1 visualStyle] == 106 || objc_msgSend(v1, "visualStyle") == 107;

  return v2;
}

uint64_t UIKBKeyboardDrawsOpaque()
{
  return 0;
}

BOOL UIKBRectContainsRectHorizontally(double a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  return a1 + a3 >= a5 + a7 && a1 <= a5;
}

uint64_t UIKBGetFlickDirection(double a1, double a2, double a3, double a4)
{
  long double v6 = a3 - a1;
  long double v7 = hypot(a3 - a1, a4 - a2);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __UIKBGetFlickDirection_block_invoke;
  aBlock[3] = &__block_descriptor_40_e11_q24__0q8d16l;
  *(long double *)&void aBlock[4] = v7;
  int v8 = _Block_copy(aBlock);
  v9.n128_f64[0] = atan2(a2 - a4, v6);
  if (v9.n128_f64[0] < 0.0) {
    v9.n128_f64[0] = v9.n128_f64[0] + 6.28318531;
  }
  double v10 = v9.n128_f64[0] * 180.0 / 3.14159265;
  if (v10 <= 45.0)
  {
    long long v12 = (uint64_t (*)(void *, uint64_t, __n128))v8[2];
    goto LABEL_7;
  }
  if (v10 > 135.0)
  {
    if (v10 <= 225.0)
    {
      v9.n128_u64[0] = 26.0;
      uint64_t v11 = ((uint64_t (*)(void *, uint64_t, __n128))v8[2])(v8, 3, v9);
      goto LABEL_9;
    }
    long long v12 = (uint64_t (*)(void *, uint64_t, __n128))v8[2];
    if (v10 <= 315.0)
    {
      v9.n128_u64[0] = 26.0;
      BOOL v13 = v8;
      uint64_t v14 = 2;
      goto LABEL_8;
    }
LABEL_7:
    v9.n128_u64[0] = 26.0;
    BOOL v13 = v8;
    uint64_t v14 = 1;
LABEL_8:
    uint64_t v11 = v12(v13, v14, v9);
    goto LABEL_9;
  }
  v9.n128_u64[0] = 26.0;
  uint64_t v11 = ((uint64_t (*)(void *, void, __n128))v8[2])(v8, 0, v9);
LABEL_9:
  uint64_t v15 = v11;

  return v15;
}

uint64_t __UIKBGetFlickDirection_block_invoke(uint64_t a1, uint64_t a2, double a3)
{
  if (*(double *)(a1 + 32) >= a3) {
    return a2;
  }
  else {
    return -3;
  }
}

void UIKBRectsInit_iPhone(uint64_t a1, void *a2, void *a3, int a4)
{
  id v7 = a2;
  id v8 = a3;
  switch([v8 displayType])
  {
    case 0x12u:
      uint64_t v9 = *(void *)(a1 + 96);
      uint64_t v10 = *(void *)(a1 + 104);
      uint64_t v11 = *(void *)(a1 + 112);
      uint64_t v12 = *(void *)(a1 + 120);
      CGFloat v13 = 4.0;
      goto LABEL_8;
    case 0x14u:
      goto LABEL_15;
    case 0x15u:
      uint64_t v14 = *(void *)(a1 + 96);
      uint64_t v15 = *(void *)(a1 + 104);
      uint64_t v16 = *(void *)(a1 + 112);
      uint64_t v17 = *(void *)(a1 + 120);
      CGFloat v18 = 4.0;
      goto LABEL_12;
    case 0x17u:
      __asm { FMOV            V2.2D, #-20.0 }
      float64x2_t v23 = vaddq_f64(*(float64x2_t *)(a1 + 48), _Q2);
      __asm { FMOV            V2.2D, #0.5 }
      float64x2_t v25 = vrndaq_f64(vaddq_f64(*(float64x2_t *)(a1 + 32), vmulq_f64(v23, _Q2)));
      __asm { FMOV            V1.2D, #20.0 }
      *(float64x2_t *)(a1 + 96) = v25;
      *(_OWORD *)(a1 + 112) = _Q1;
      goto LABEL_15;
    case 0x19u:
      uint64_t v14 = *(void *)(a1 + 96);
      uint64_t v15 = *(void *)(a1 + 104);
      uint64_t v16 = *(void *)(a1 + 112);
      uint64_t v17 = *(void *)(a1 + 120);
      CGFloat v18 = 6.0;
LABEL_12:
      CGRect v162 = CGRectInset(*(CGRect *)&v14, v18, 0.0);
      CGFloat x = v162.origin.x;
      double y = v162.origin.y;
      CGFloat width = v162.size.width;
      CGFloat height = v162.size.height;
      BOOL IsPortrait = UIKBKeyboardIsPortrait(v7);
      double v32 = y + -1.0;
      if (IsPortrait) {
        double v32 = y;
      }
      *(CGFloat *)(a1 + 96) = x;
      *(double *)(a1 + 104) = v32;
      *(CGFloat *)(a1 + 112) = width;
      *(CGFloat *)(a1 + 120) = height;
      goto LABEL_15;
    default:
      if ([v8 rendering] != 1
        && [v8 rendering] != 33
        && [v8 rendering] != 34)
      {
        if ([v8 interactionType] == 1)
        {
          if (a4 != 4) {
            goto LABEL_28;
          }
        }
        else
        {
          int v33 = [v8 interactionType];
          if (a4 != 4 || v33 != 2)
          {
LABEL_28:
            if ([v8 interactionType] == 1)
            {
              if (a4 != 16) {
                goto LABEL_15;
              }
            }
            else
            {
              int v46 = [v8 interactionType];
              if (a4 != 16 || v46 != 2) {
                goto LABEL_15;
              }
            }
            int v47 = [v7 visualStyle];
            double v48 = [v8 stringForProperty:@"variant-popup-bias"];
            unsigned int v49 = [v8 variantType];
            double v50 = *(double *)(a1 + 72);
            rect.origin.CGFloat x = *(CGFloat *)(a1 + 64);
            CGFloat v51 = *(double *)(a1 + 80);
            double v52 = *(double *)(a1 + 88);
            double v53 = *(double *)(a1 + 16);
            double v54 = *(double *)(a1 + 24);
            BOOL v55 = UIKBKeyboardIsPortrait(v7);
            int v56 = [v8 displayType];
            int v57 = v47 == 106 || v55;
            double v58 = 60.0;
            double v59 = 44.0;
            if (v57)
            {
              double v58 = 44.0;
              double v59 = 30.0;
            }
            double v148 = v59;
            if (v56 == 27) {
              double v60 = v58;
            }
            else {
              double v60 = v53;
            }
            if (v57) {
              double v61 = v60;
            }
            else {
              double v61 = v60 + -1.0;
            }
            double v62 = [v8 subtrees];
            unsigned int v63 = [v62 count] - 1;

            rect.origin.double y = v61;
            double v149 = (double)v63;
            double v64 = v61 * (double)v63;
            [v7 frame];
            double v66 = v65;
            CGFloat v150 = v68;
            CGFloat v151 = v67;
            rect.size.CGFloat width = v69;
            uint64_t v158 = 0;
            v159 = &v158;
            uint64_t v160 = 0x2020000000;
            uint64_t v161 = 0x7FFFFFFFFFFFFFFFLL;
            if (v55)
            {
              int v70 = [v8 subtrees];
              *(void *)&rect.size.CGFloat height = MEMORY[0x1E4F143A8];
              uint64_t v154 = 3221225472;
              double v155 = __UIKBRectsInit_iPhone_block_invoke;
              int v156 = &unk_1E52F9C58;
              double v157 = &v158;
              [v70 enumerateObjectsUsingBlock:&rect.size.height];

              double v71 = 0.0;
              if (v54 >= v60) {
                double v72 = v54;
              }
              else {
                double v72 = v60;
              }
              double v73 = v72 - v60;
              if (v159[3] != 0x7FFFFFFFFFFFFFFFLL)
              {
                double v64 = v73 + v64;
                double v71 = v73;
              }
            }
            else
            {
              double v71 = 0.0;
            }
            double v152 = v71;
            double v76 = 102.0 - v52;
            double v77 = v52 + 3.0;
            double v78 = v50 - fmax(102.0 - v52, 0.0) + -3.0;
            if (v76 <= 0.0) {
              double v79 = v77;
            }
            else {
              double v79 = 105.0;
            }
            if (v47 == 106)
            {
              [v8 frame];
              double v81 = v80;
              [v7 frame];
              double v78 = v78 + -6.0;
              double v79 = v79 + 6.0;
              if (v81 > v82 * 0.5)
              {
                [v7 frame];
                double v66 = v83 + -384.0;
              }
              rect.size.CGFloat width = 384.0;
            }
            v163.origin.CGFloat x = rect.origin.x;
            v163.origin.double y = v78;
            v163.size.CGFloat width = v51;
            v163.size.CGFloat height = v79;
            CGRect v164 = CGRectInset(v163, 0.0, -4.0);
            double v84 = v164.origin.x;
            double v85 = v164.origin.y;
            double v86 = v164.size.width;
            double v87 = v164.size.height;
            if ([v48 isEqualToString:@"right"])
            {
              int v88 = 1;
              double v89 = v84;
            }
            else
            {
              int v88 = [v48 isEqualToString:@"strictly-right"];
              double v90 = 0.0;
              if (!v88) {
                double v90 = v64;
              }
              double v89 = v84 - v90;
            }
            double v91 = rect.origin.y;
            double v92 = v64 + v86;
            double v93 = v66 + rect.size.width;
            double v94 = v64 + v86 + v89;
            double v95 = *(double *)a1;
            double v96 = *(double *)(a1 + 16);
            double v97 = v66;
            if (v55) {
              double v98 = *(double *)(a1 + 24);
            }
            else {
              double v98 = 41.0;
            }
            double v99 = v85 + 8.0 + 1.0 + 2.0;
            _NF = v97 > v89 || v93 < v94;
            if (!_NF)
            {
              double v119 = rect.origin.y;
              double v84 = v89;
LABEL_124:
              double v135 = (v96 - v119) * 0.5;
              if (v119 == v91) {
                double v135 = -0.0;
              }
              double v136 = v95 + v135;
              if (v119 == v91) {
                double v119 = v91;
              }
              *(double *)(a1 + 96) = v136;
              *(double *)(a1 + 104) = v99;
              *(double *)(a1 + 112) = v119;
              *(double *)(a1 + 120) = v98;
              double v137 = 0.0;
              if (v84 >= 0.0) {
                double v138 = v84;
              }
              else {
                double v138 = 0.0;
              }
              if (v92 + v138 > v93) {
                double v137 = v92 + v138 - v93;
              }
              CGFloat v139 = v92 - v137;
              v170.origin.CGFloat x = v138;
              v170.origin.double y = v85;
              v170.size.CGFloat width = v139;
              v170.size.CGFloat height = v87;
              *(CGRect *)(a1 + 64) = CGRectInset(v170, -11.0, 0.0);
              v171.origin.CGFloat x = v138;
              v171.origin.double y = v85;
              v171.size.CGFloat width = v139;
              v171.size.CGFloat height = v87;
              *(CGRect *)(a1 + 64) = CGRectInset(v171, -24.0, 0.0);
              _Block_object_dispose(&v158, 8);

              goto LABEL_15;
            }
            double v142 = v92;
            double v143 = v86;
            double v146 = v87;
            double v147 = v85;
            double v145 = v93;
            double v141 = v93 - (v84 + v86);
            double v101 = (v141 - v152) / rect.origin.y;
            rect.origin.CGFloat x = v97;
            double v140 = v84 - v97;
            double v102 = (v84 - v97 - v152) / rect.origin.y;
            double v103 = dbl_186B99810[v102 + v101 >= 5.0];
            long double v104 = fmod(v102, 1.0);
            double v105 = floor(v102);
            if (v104 < v103) {
              double v102 = v105;
            }
            long double v106 = fmod(v101, 1.0);
            double v107 = floor(v101);
            if (v106 >= v103) {
              double v108 = (v141 - v152) / rect.origin.y;
            }
            else {
              double v108 = v107;
            }
            v165.origin.CGFloat x = v95;
            v165.origin.double y = v99;
            v165.size.CGFloat width = v96;
            v165.size.CGFloat height = v98;
            double MinX = CGRectGetMinX(v165);
            v166.origin.CGFloat x = v95;
            v166.origin.double y = v99;
            v166.size.CGFloat width = v96;
            v166.size.CGFloat height = v98;
            double v110 = CGRectGetMinX(v166) * 0.5;
            BOOL v111 = v102 > 0.0 || MinX > v110;
            double v112 = 0.0;
            if (v111) {
              double v112 = v102;
            }
            double v144 = v112;
            v167.origin.CGFloat x = v95;
            v167.origin.double y = v99;
            v167.size.CGFloat width = v96;
            v167.size.CGFloat height = v98;
            double MaxX = CGRectGetMaxX(v167);
            v168.origin.CGFloat x = rect.origin.x;
            v168.size.CGFloat height = v150;
            v168.origin.double y = v151;
            v168.size.CGFloat width = rect.size.width;
            double v114 = CGRectGetWidth(v168);
            v169.origin.CGFloat x = v95;
            v169.origin.double y = v99;
            v169.size.CGFloat width = v96;
            v169.size.CGFloat height = v98;
            double v115 = v114 + CGRectGetMinX(v169) * -0.5;
            if (v108 > 0.0 || MaxX < v115) {
              double v117 = v108;
            }
            else {
              double v117 = 0.0;
            }
            double v118 = v144;
            if (v144 + v117 - v149 > -0.3)
            {
              double v91 = rect.origin.y;
              if (!v88)
              {
                if (v144 <= v149) {
                  double v121 = v144;
                }
                else {
                  double v121 = (double)v63;
                }
                double v84 = v84 - rect.origin.y * v121;
                double v119 = rect.origin.y;
                double v87 = v146;
                double v85 = v147;
                double v93 = v145;
                double v92 = v142;
                goto LABEL_124;
              }
              double v92 = v142;
              if (v117 < v149) {
                double v84 = v84 - (v152 + rect.origin.y * (v149 - v117));
              }
              double v119 = rect.origin.y;
              goto LABEL_123;
            }
            double v91 = rect.origin.y;
            if (rect.origin.y <= v148)
            {
              double v119 = rect.origin.y;
              double v120 = v143;
              goto LABEL_107;
            }
            double v120 = v143;
            if (v49 > 0xA)
            {
              double v119 = rect.origin.y;
              goto LABEL_107;
            }
            double v119 = rect.origin.y;
            if (((1 << v49) & 0x42A) == 0)
            {
LABEL_107:
              double v122 = floor(v118);
              double v123 = floor(v117);
              double v124 = v119 * (v122 + v123);
              double v125 = v84 - v122 * v119;
              double v126 = v122 + v123 + 1.0;
              unsigned int v127 = (v149 / v126);
              double v128 = (double)(int)(v126 - (double)(int)vcvtpd_s64_f64(((float)v63 + 1.0) / ((float)v127 + 1.0)));
              double v129 = v119 * v128;
              if (((v47 == 106) ^ v88))
              {
                _NF = v123 < v128;
                double v130 = v125 + v119 * (v128 - v123);
                if (_NF) {
                  double v84 = v130;
                }
                else {
                  double v84 = v125;
                }
              }
              else
              {
                double v84 = v125 + v129;
              }
              double v93 = v145;
              double v131 = v120 + v124;
              double v132 = v98 + 10.0;
              if (v127 >= 2) {
                *(double *)(a1 + 16_Block_object_dispose(&a9, 8) = v146 + ceil(v132);
              }
              double v92 = v131 - v129;
              double v133 = ceil(v132 * (double)v127);
              double v85 = v147 - v133;
              double v87 = v146 + v133;
              goto LABEL_124;
            }
            double v117 = floor(v141 / v148);
            double v118 = floor(v140 / v148);
            if (v118 + v117 < v149)
            {
              double v119 = v148;
              goto LABEL_107;
            }
            double v92 = v148 * v149 + v143;
            if (v88)
            {
              if (v117 >= v149)
              {
LABEL_122:
                double v119 = v148;
LABEL_123:
                double v87 = v146;
                double v85 = v147;
                double v93 = v145;
                goto LABEL_124;
              }
              double v134 = v149 - v117;
            }
            else if (v118 <= v149)
            {
              double v134 = v118;
            }
            else
            {
              double v134 = (double)v63;
            }
            double v84 = v84 - v148 * v134;
            goto LABEL_122;
          }
        }
        double v34 = *(double *)(a1 + 64);
        double v36 = *(double *)(a1 + 80);
        double v35 = *(double *)(a1 + 88);
        double v37 = 111.0 - v35;
        double v38 = v35 + 3.0;
        double v39 = *(double *)(a1 + 72) - fmax(v37, 0.0);
        if (v37 <= 0.0) {
          double v40 = v38;
        }
        else {
          double v40 = 114.0;
        }
        int v41 = UIKBPopupBiasForKey(v7, v8);
        if (v41 == 30)
        {
          double v74 = v34 + -36.0;
          double v43 = v36 + 72.0;
          double v75 = v36 + 72.0;
          double v42 = v34 + -36.0;
        }
        else
        {
          if (v41 == 29)
          {
            double v42 = v34 + -1.0;
            double v43 = v36 + 72.0;
            double v44 = v34 + -1.0 + -36.0;
            double v45 = 3.0;
          }
          else
          {
            if (v41 != 21)
            {
              double v42 = v34 + -36.0;
              double v75 = v36 + 72.0;
              double v74 = v34 + -36.0 + 25.0;
              double v43 = v36 + 72.0 + -50.0;
              goto LABEL_54;
            }
            double v42 = v34 + -71.0;
            double v43 = v36 + 72.0;
            double v44 = v34 + -71.0 + 36.0;
            double v45 = -3.0;
          }
          double v74 = v44 + v45;
          double v75 = v43;
        }
LABEL_54:
        *(double *)(a1 + 96) = v74;
        *(double *)(a1 + 104) = v39 + -2.0;
        *(double *)(a1 + 112) = v43;
        *(double *)(a1 + 120) = v37 + 16.0;
        *(double *)(a1 + 64) = v42;
        *(double *)(a1 + 72) = v39;
        *(double *)(a1 + 80) = v75;
        *(double *)(a1 + 8_Block_object_dispose(&a9, 8) = v40;
        goto LABEL_15;
      }
      if ([v8 displayTypeHint] == 3)
      {
        uint64_t v9 = *(void *)(a1 + 96);
        uint64_t v10 = *(void *)(a1 + 104);
        uint64_t v11 = *(void *)(a1 + 112);
        uint64_t v12 = *(void *)(a1 + 120);
        CGFloat v13 = 16.0;
LABEL_8:
        *(CGRect *)(a1 + 96) = CGRectInset(*(CGRect *)&v9, v13, 0.0);
      }
LABEL_15:

      return;
  }
}

void sub_1861C5974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_1861C6044(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void UIKBRectsInit_Wildcat(uint64_t a1, void *a2, void *a3, int a4)
{
  id v93 = a2;
  id v7 = a3;
  if ([v93 visualStyle] == 106 || objc_msgSend(v93, "visualStyle") == 107)
  {
    BOOL v8 = [v7 rendering] == 33;
    int v9 = 1;
  }
  else
  {
    int v9 = 0;
    BOOL v8 = 0;
  }
  if ([v93 visualStyle] == 101 && objc_msgSend(v7, "rendering") == 1) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = [v93 visualStyle] == 106 && objc_msgSend(v7, "rendering") == 33;
  }
  int v11 = v9 | v10;
  if (v9 | v10) {
    double v12 = 6.0;
  }
  else {
    double v12 = 12.0;
  }
  int v13 = [v7 displayType];
  if (a4 == 16)
  {
LABEL_15:
    CGFloat x = *(double *)(a1 + 96);
    double v14 = *(double *)(a1 + 104);
    CGFloat width = *(double *)(a1 + 112);
    double v16 = *(double *)(a1 + 120);
    if (v13 == 24)
    {
      uint64_t v18 = *(void *)(a1 + 96);
      uint64_t v19 = *(void *)(a1 + 112);
      CGRect v95 = CGRectInset(*(CGRect *)(&v14 - 1), v12, 0.0);
      CGFloat x = v95.origin.x;
      double y = v95.origin.y;
      CGFloat width = v95.size.width;
      double height = v95.size.height;
      BOOL IsPortrait = UIKBKeyboardIsPortrait(v93);
      double v14 = y + 17.0;
      double v16 = height + -20.0;
      if (!IsPortrait)
      {
        double v14 = y + 24.0;
        double v16 = height + -32.0;
      }
    }
LABEL_18:
    *(CGFloat *)(a1 + 96) = x;
    *(double *)(a1 + 104) = v14;
    *(CGFloat *)(a1 + 112) = width;
    *(double *)(a1 + 120) = v16;
    if (UIKBKeyboardIsPortrait(v93)) {
      int v23 = 2;
    }
    else {
      int v23 = 4;
    }
    *(_DWORD *)(a1 + 164) = v23;
    if (a4 == 16)
    {
      double v24 = [v7 subtrees];
      unsigned int v25 = [v24 count];

      id v26 = v7;
      size_t v27 = v26;
      if ((id)qword_1EB261858 != v26)
      {
        _MergedGlobals_1120 = 5;
        int v28 = [v26 name];
        int v29 = [v28 isEqualToString:@"EmojiPopupKey"];

        if (v29)
        {
          char v30 = [v27 subtrees];
          _MergedGlobals_1120 = [v30 count];
        }
        objc_storeStrong((id *)&qword_1EB261858, a3);
      }
      unsigned int v31 = _MergedGlobals_1120;

      if (v31 < v25) {
        double v32 = (double)((v25 + v31 - 1) / v31);
      }
      else {
        double v32 = 1.0;
      }
      if (v31 < v25) {
        unsigned int v33 = v31;
      }
      else {
        unsigned int v33 = v25;
      }
      if (UIKBKeyboardIsSplit(v93))
      {
        double v34 = +[UIKeyboardPreferencesController sharedPreferencesController];
        double v35 = [v34 preferencesActions];
        [v35 rivenSizeFactor:54.0];
        double v37 = v36;

        double v38 = +[UIKeyboardPreferencesController sharedPreferencesController];
        double v39 = [v38 preferencesActions];
        [v39 rivenSizeFactor:54.0];
        double v41 = v40;
      }
      else
      {
        double v37 = 65.0;
        double v41 = 66.0;
      }
      double v47 = v37 * (double)v33;
      double v48 = v32 * v41;
      double v49 = round(*(double *)(a1 + 64) + (*(double *)(a1 + 80) - v47) * 0.5);
      double v50 = v37 * 0.5;
      if (v33) {
        double v50 = -0.0;
      }
      double v51 = v50 + v49;
      double v52 = *(double *)(a1 + 72) - v48 + 2.0;
      CGRect v96 = CGRectInset(*(CGRect *)(&v47 - 2), -30.0, -20.0);
      double v53 = v96.origin.x;
      CGFloat v54 = v96.origin.y;
      double v55 = v96.size.width;
      CGFloat v56 = v96.size.height;
      int v57 = 0;
      if (v96.origin.x >= 0.0)
      {
        double v58 = v93;
      }
      else
      {
        double v58 = v93;
        do
        {
          double v53 = v37 + v53;
          ++v57;
        }
        while (v53 < 0.0);
      }
      double v59 = v96.size.width + v53;
      while (1)
      {
        [v58 frame];
        if (v59 <= v60 + v61) {
          break;
        }
        double v53 = v53 - v37;
        --v57;
        double v59 = v55 + v53;
        double v58 = v93;
      }
      *(double *)(a1 + 12_Block_object_dispose(&a9, 8) = v53;
      *(CGFloat *)(a1 + 136) = v54;
      *(double *)(a1 + 144) = v55;
      *(CGFloat *)(a1 + 152) = v56;
      *(_DWORD *)(a1 + 160) = v57;
      v98.origin.CGFloat x = v53;
      v98.origin.double y = v54;
      v98.size.CGFloat width = v55;
      v98.size.double height = v56;
      *(CGRect *)(a1 + 64) = CGRectUnion(*(CGRect *)(a1 + 64), v98);
    }
  }
  else
  {
    switch(v13)
    {
      case 0:
      case 7:
      case 24:
        goto LABEL_15;
      case 2:
        if (!v11) {
          goto LABEL_73;
        }
        uint64_t v42 = *(void *)(a1 + 96);
        uint64_t v43 = *(void *)(a1 + 104);
        double v44 = *(double *)(a1 + 112);
        double v45 = *(double *)(a1 + 120);
        double v46 = 6.0;
        break;
      case 3:
      case 14:
      case 18:
      case 26:
        uint64_t v42 = *(void *)(a1 + 96);
        uint64_t v43 = *(void *)(a1 + 104);
        double v44 = *(double *)(a1 + 112);
        double v45 = *(double *)(a1 + 120);
        double v46 = v12;
        break;
      case 5:
        if ([v7 rendering] != 1 && objc_msgSend(v7, "rendering") != 33)
        {
          BOOL v62 = UIKBKeyboardIsPortrait(v93);
          double v63 = 83.0;
          if (v62) {
            double v63 = 62.0;
          }
          double v64 = 79.0;
          if (v62) {
            double v64 = 60.0;
          }
          v65.f64[0] = v63;
          v65.f64[1] = v64;
          float64x2_t v66 = vsubq_f64(*(float64x2_t *)(a1 + 112), v65);
          __asm { FMOV            V4.2D, #0.5 }
          *(float64x2_t *)(a1 + 96) = vrndaq_f64(vaddq_f64(*(float64x2_t *)(a1 + 96), vmulq_f64(v66, _Q4)));
          *(double *)(a1 + 112) = v63;
          *(double *)(a1 + 120) = v64;
        }
        goto LABEL_73;
      case 20:
        CGFloat x = *(double *)(a1 + 96);
        double v14 = *(double *)(a1 + 104);
        CGFloat width = *(double *)(a1 + 112);
        double v16 = *(double *)(a1 + 120);
        goto LABEL_18;
      case 21:
        uint64_t v42 = *(void *)(a1 + 96);
        uint64_t v43 = *(void *)(a1 + 104);
        double v44 = *(double *)(a1 + 112);
        double v45 = *(double *)(a1 + 120);
        if (v44 - v12 > v45) {
          double v46 = v12;
        }
        else {
          double v46 = v12 * 0.5;
        }
        break;
      case 23:
        if ((v11 ^ 1 | v8))
        {
          int v72 = UIKBKeyboardIsPortrait(v93) || v8;
          double v73 = v93;
          if (v72) {
            double v74 = 18.0;
          }
          else {
            double v74 = 23.0;
          }
          if (v72) {
            double v75 = 20.0;
          }
          else {
            double v75 = 26.0;
          }
        }
        else
        {
          double v76 = +[UIKeyboardPreferencesController sharedPreferencesController];
          double v77 = [v76 preferencesActions];
          [v77 rivenSizeFactor:20.0];
          double v75 = v78;
          double v79 = +[UIKeyboardPreferencesController sharedPreferencesController];
          double v80 = [v79 preferencesActions];
          [v80 rivenSizeFactor:18.0];
          double v74 = v81;

          double v73 = v93;
        }
        if ([v73 visualStyle] == 101)
        {
          double v74 = v74 + 1.0;
        }
        else if ((v11 & 1) == 0)
        {
          double v82 = +[UIKeyboardPreferencesController sharedPreferencesController];
          double v83 = [v82 preferencesActions];
          [v83 rivenSizeFactor:v75];
          double v75 = v84;
          double v85 = +[UIKeyboardPreferencesController sharedPreferencesController];
          double v86 = [v85 preferencesActions];
          [v86 rivenSizeFactor:v74];
          double v74 = v87;
        }
        int v88 = +[UIKeyboardPreferencesController sharedPreferencesController];
        double v89 = [v88 preferencesActions];
        [v89 rivenSizeFactor:1.0];
        if (v90 > 1.0 && [v7 displayTypeHint])
        {
          int v91 = [v7 displayTypeHint];

          if (v91 != 5)
          {
            CGRect v97 = CGRectInset(*(CGRect *)(a1 + 96), v12, 0.0);
            double v75 = v97.size.width;
            double v74 = v97.size.height;
          }
        }
        else
        {
        }
        double v92 = round(*(double *)(a1 + 104) + (*(double *)(a1 + 120) - v74) * 0.5);
        *(double *)(a1 + 96) = round(*(double *)(a1 + 96) + (*(double *)(a1 + 112) - v75) * 0.5);
        *(double *)(a1 + 104) = v92;
        *(double *)(a1 + 112) = v75;
        *(double *)(a1 + 120) = v74;
        goto LABEL_73;
      case 25:
        if ([v93 visualStyle] != 108) {
          goto LABEL_73;
        }
        uint64_t v42 = *(void *)(a1 + 96);
        uint64_t v43 = *(void *)(a1 + 104);
        double v44 = *(double *)(a1 + 112);
        double v45 = *(double *)(a1 + 120);
        double v46 = 2.0;
        break;
      case 28:
        if (!v11) {
          goto LABEL_73;
        }
        uint64_t v42 = *(void *)(a1 + 96);
        uint64_t v43 = *(void *)(a1 + 104);
        double v44 = *(double *)(a1 + 112);
        double v45 = *(double *)(a1 + 120);
        double v46 = 4.0;
        break;
      default:
        goto LABEL_73;
    }
    *(CGRect *)(a1 + 96) = CGRectInset(*(CGRect *)&v42, v46, 0.0);
  }
LABEL_73:
}

uint64_t _UIFocusGroupCompare(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    double v82 = [MEMORY[0x1E4F28B00] currentHandler];
    double v83 = objc_msgSend(NSString, "stringWithUTF8String:", "NSComparisonResult _UIFocusGroupCompare(_UIFocusGroup * _Nonnull __strong, _UIFocusGroup * _Nonnull __strong)");
    [v82 handleFailureInFunction:v83, @"_UIFocusGroupHelperFuncs.m", 28, @"Invalid parameter not satisfying: %@", @"group1" file lineNumber description];

    if (v5) {
      goto LABEL_3;
    }
  }
  double v84 = [MEMORY[0x1E4F28B00] currentHandler];
  double v85 = objc_msgSend(NSString, "stringWithUTF8String:", "NSComparisonResult _UIFocusGroupCompare(_UIFocusGroup * _Nonnull __strong, _UIFocusGroup * _Nonnull __strong)");
  [v84 handleFailureInFunction:v85, @"_UIFocusGroupHelperFuncs.m", 29, @"Invalid parameter not satisfying: %@", @"group2" file lineNumber description];

LABEL_3:
  long double v6 = [v3 parentGroup];
  id v7 = [v5 parentGroup];

  if (v6 != v7)
  {
    double v86 = [MEMORY[0x1E4F28B00] currentHandler];
    double v87 = objc_msgSend(NSString, "stringWithUTF8String:", "NSComparisonResult _UIFocusGroupCompare(_UIFocusGroup * _Nonnull __strong, _UIFocusGroup * _Nonnull __strong)");
    [v86 handleFailureInFunction:v87 file:@"_UIFocusGroupHelperFuncs.m" lineNumber:31 description:@"Comparing groups with different parents is invalid."];
  }
  BOOL v8 = [v3 coordinateSpace];
  int v9 = [v5 coordinateSpace];
  id v10 = v8;
  id v11 = v9;
  if (v10 == v11)
  {
    double v14 = v10;
    uint64_t v15 = v10;
    double v16 = v10;
  }
  else
  {
    double v12 = v11;
    if (v10 && v11)
    {
      char v13 = [v10 isEqual:v11];

      if (v13) {
        goto LABEL_12;
      }
    }
    else
    {
    }
    double v16 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v15 = objc_msgSend(NSString, "stringWithUTF8String:", "NSComparisonResult _UIFocusGroupCompare(_UIFocusGroup * _Nonnull __strong, _UIFocusGroup * _Nonnull __strong)");
    double v14 = [v3 identifier];
    id v10 = [v3 coordinateSpace];
    int v88 = [v5 identifier];
    double v89 = [v5 coordinateSpace];
    [v16 handleFailureInFunction:v15, @"_UIFocusGroupHelperFuncs.m", 33, @"Trying to compare groups with different coordinate spaces. Group %@ uses %@ while group %@ uses %@.", v14, v10, v88, v89 file lineNumber description];
  }
LABEL_12:
  uint64_t v17 = [v3 owningEnvironment];
  uint64_t v18 = [v5 owningEnvironment];
  uint64_t v19 = (void *)v18;
  if (!v17)
  {
    id v21 = 0;
    if (!v18) {
      goto LABEL_19;
    }
LABEL_17:
    double v22 = +[UIFocusSystem focusSystemForEnvironment:v19];

    if (v21 == v22) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  uint64_t v20 = +[UIFocusSystem focusSystemForEnvironment:v17];
  id v21 = (void *)v20;
  if (v19) {
    goto LABEL_17;
  }
  if (v20)
  {
LABEL_18:
    int v23 = [MEMORY[0x1E4F28B00] currentHandler];
    double v24 = objc_msgSend(NSString, "stringWithUTF8String:", "NSComparisonResult _UIFocusGroupCompare(_UIFocusGroup * _Nonnull __strong, _UIFocusGroup * _Nonnull __strong)");
    [v23 handleFailureInFunction:v24 file:@"_UIFocusGroupHelperFuncs.m" lineNumber:39 description:@"Unable to compare focus groups from different focus systems."];
  }
LABEL_19:
  unsigned int v25 = [v21 behavior];
  int v26 = [v25 shouldUseAccessibilityCompareForFocusGroupsInExternallyPlacedWindows];

  if (v26)
  {
    size_t v27 = _UIFocusEnvironmentContainingView(v17);
    int v28 = [v27 _window];

    int v29 = _UIFocusEnvironmentContainingView(v19);
    char v30 = [v29 _window];

    if (v28
      && v30
      && v28 != v30
      && (([v28 _isExternallyPlaced] & 1) != 0 || (objc_msgSend(v30, "_isExternallyPlaced") & 1) != 0))
    {
      uint64_t v31 = _UIFocusItemCompare(v28, v30);

      goto LABEL_40;
    }
  }
  double v32 = [v3 parentGroup];
  int v28 = [v32 owningEnvironment];

  int v33 = [v21 _shouldReverseLayoutDirectionForEnvironment:v28];
  int v34 = [v21 _shouldReverseLinearWrappingForEnvironment:v28];
  [v3 boundingBox];
  CGFloat v36 = v35;
  CGFloat v38 = v37;
  CGFloat v40 = v39;
  CGFloat v42 = v41;
  [v5 boundingBox];
  CGFloat v44 = v43;
  CGFloat v46 = v45;
  CGFloat v48 = v47;
  CGFloat v50 = v49;
  v92.origin.CGFloat x = v36;
  v92.origin.CGFloat y = v38;
  v92.size.CGFloat width = v40;
  v92.size.CGFloat height = v42;
  if (CGRectIsNull(v92)) {
    goto LABEL_38;
  }
  v93.origin.CGFloat x = v44;
  v93.origin.CGFloat y = v46;
  v93.size.CGFloat width = v48;
  v93.size.CGFloat height = v50;
  if (CGRectIsNull(v93)) {
    goto LABEL_38;
  }
  v94.origin.CGFloat x = v36;
  v94.origin.CGFloat y = v38;
  v94.size.CGFloat width = v40;
  v94.size.CGFloat height = v42;
  CGRect v95 = CGRectStandardize(v94);
  CGFloat x = v95.origin.x;
  CGFloat y = v95.origin.y;
  CGFloat width = v95.size.width;
  CGFloat height = v95.size.height;
  v95.origin.CGFloat x = v44;
  v95.origin.CGFloat y = v46;
  v95.size.CGFloat width = v48;
  v95.size.CGFloat height = v50;
  CGRect v96 = CGRectStandardize(v95);
  CGFloat v55 = v96.origin.x;
  CGFloat v56 = v96.origin.y;
  CGFloat v57 = v96.size.width;
  CGFloat v58 = v96.size.height;
  CGFloat v90 = y;
  CGFloat v91 = x;
  v96.origin.CGFloat x = x;
  v96.origin.CGFloat y = y;
  v96.size.CGFloat width = width;
  v96.size.CGFloat height = height;
  CGFloat v59 = CGRectGetMinX(v96) + 0.0001;
  v97.origin.CGFloat x = v55;
  v97.origin.CGFloat y = v56;
  v97.size.CGFloat width = v57;
  v97.size.CGFloat height = v58;
  if (v59 <= CGRectGetMaxX(v97))
  {
    v98.origin.CGFloat y = v90;
    v98.origin.CGFloat x = x;
    v98.size.CGFloat width = width;
    v98.size.CGFloat height = height;
    CGFloat v61 = CGRectGetMaxX(v98) + -0.0001;
    v99.origin.CGFloat x = v55;
    v99.origin.CGFloat y = v56;
    v99.size.CGFloat width = v57;
    v99.size.CGFloat height = v58;
    BOOL v60 = v61 >= CGRectGetMinX(v99);
  }
  else
  {
    BOOL v60 = 0;
  }
  v100.origin.CGFloat x = x;
  v100.origin.CGFloat y = v90;
  v100.size.CGFloat width = width;
  v100.size.CGFloat height = height;
  CGFloat v62 = CGRectGetMinY(v100) + 0.0001;
  v101.origin.CGFloat x = v55;
  v101.origin.CGFloat y = v56;
  v101.size.CGFloat width = v57;
  v101.size.CGFloat height = v58;
  if (v62 > CGRectGetMaxY(v101)) {
    goto LABEL_38;
  }
  v102.origin.CGFloat x = v91;
  v102.origin.CGFloat y = v90;
  v102.size.CGFloat width = width;
  v102.size.CGFloat height = height;
  CGFloat v63 = CGRectGetMaxY(v102) + -0.0001;
  v103.origin.CGFloat x = v55;
  v103.origin.CGFloat y = v56;
  v103.size.CGFloat width = v57;
  v103.size.CGFloat height = v58;
  if (v63 < CGRectGetMinY(v103) || !v60)
  {
LABEL_38:
    [v3 boundingBox];
    CGFloat v66 = v77;
    CGFloat v68 = v78;
    CGFloat v70 = v79;
    CGFloat v72 = v80;
    [v5 boundingBox];
  }
  else
  {
    [v3 primaryRect];
    CGFloat v66 = v65;
    CGFloat v68 = v67;
    CGFloat v70 = v69;
    CGFloat v72 = v71;
    [v5 primaryRect];
  }
  uint64_t v31 = _UIFocusRectCompare(v33, v34, v66, v68, v70, v72, v73, v74, v75, v76);
LABEL_40:

  return v31;
}

id _UIFocusGroupIdentifierForInstance(void *a1)
{
  id v1 = a1;
  if (!v1)
  {
    id v7 = [MEMORY[0x1E4F28B00] currentHandler];
    BOOL v8 = [NSString stringWithUTF8String:"NSString * _Nonnull _UIFocusGroupIdentifierForInstance(id  _Nonnull __strong)"];
    [v7 handleFailureInFunction:v8, @"_UIFocusGroupHelperFuncs.m", 221, @"Invalid parameter not satisfying: %@", @"object" file lineNumber description];
  }
  BOOL v2 = NSString;
  id v3 = (objc_class *)objc_opt_class();
  id v4 = NSStringFromClass(v3);
  id v5 = [v2 stringWithFormat:@"<%@: %p>", v4, v1];

  return v5;
}

id _UIFocusGroupInferIdentifierForEnvironment(void *a1)
{
  id v1 = a1;
  BOOL v2 = +[UIFocusSystem focusSystemForEnvironment:v1];
  id v3 = [v2 behavior];
  char v4 = [v3 focusGroupContainmentBehavior];

  id v5 = [v1 focusItemContainer];
  long double v6 = v5;
  if ((v4 & 8) != 0)
  {
    id v14 = v1;
    uint64_t v15 = _UIFocusEnvironmentRotaryFocusMovementAxis(v14);
    if (v15 == -1)
    {
      id v7 = 0;
      goto LABEL_22;
    }
    uint64_t v16 = v15;
    if (_UIInternalPreferencesRevisionOnce != -1) {
      dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_5_8);
    }
    int v17 = _UIInternalPreferencesRevisionVar;
    if (_UIInternalPreferencesRevisionVar < 1) {
      goto LABEL_13;
    }
    int v21 = _UIInternalPreference_FocusGroupSeparateNestedEqualRotaryMovementAxis;
    if (_UIInternalPreferencesRevisionVar == _UIInternalPreference_FocusGroupSeparateNestedEqualRotaryMovementAxis) {
      goto LABEL_13;
    }
    while (v17 >= v21)
    {
      _UIInternalPreferenceSync(v17, &_UIInternalPreference_FocusGroupSeparateNestedEqualRotaryMovementAxis, @"FocusGroupSeparateNestedEqualRotaryMovementAxis", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
      int v21 = _UIInternalPreference_FocusGroupSeparateNestedEqualRotaryMovementAxis;
      if (v17 == _UIInternalPreference_FocusGroupSeparateNestedEqualRotaryMovementAxis) {
        goto LABEL_13;
      }
    }
    if (!byte_1E8FD5304)
    {
LABEL_13:
      uint64_t v18 = [v14 parentFocusEnvironment];
      uint64_t v19 = _UIFocusEnvironmentResolvedRotaryFocusMovementAxis(v18, 0);

      id v7 = 0;
      if (v16 == v19)
      {
LABEL_22:

        goto LABEL_23;
      }
    }
    id v7 = _UIFocusGroupIdentifierForInstance(v14);
    goto LABEL_22;
  }
  id v7 = 0;
  if (_UIFocusItemContainerIsScrollableContainer(v5) && (v4 & 6) != 0)
  {
    id v8 = v1;
    uint64_t v9 = _UIFocusItemScrollableContainerPrimaryAxis(v6);
    id v10 = _UIFocusNearestAncestorEnvironmentScrollableContainer(v8, 1);
    id v11 = v10;
    if (v10)
    {
      double v12 = [v10 scrollableContainer];
      uint64_t v13 = _UIFocusItemScrollableContainerPrimaryAxis(v12);

      if ((v4 & 4) == 0)
      {
LABEL_6:
        id v7 = 0;
        if ((v4 & 2) == 0 || v11) {
          goto LABEL_21;
        }
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v13 = 0;
      if ((v4 & 4) == 0) {
        goto LABEL_6;
      }
    }
    if (v11 && v9 == v13)
    {
      id v7 = 0;
LABEL_21:

      goto LABEL_22;
    }
LABEL_20:
    id v7 = _UIFocusGroupIdentifierForInstance(v8);
    goto LABEL_21;
  }
LABEL_23:

  return v7;
}

id _UIFocusGroupUnresolvedIdentifierForEnvironment(void *a1)
{
  id v1 = a1;
  if (_UIFocusEnvironmentIsViewOrViewControllerOrRespondsToSelector(v1)) {
    [v1 focusGroupIdentifier];
  }
  else {
  BOOL v2 = _UIFocusGroupInferIdentifierForEnvironment(v1);
  }

  return v2;
}

uint64_t _UIFocusGroupPriorityForItem(void *a1, id a2, id a3)
{
  id v5 = a1;
  long double v6 = v5;
  uint64_t v7 = 1000;
  if (v5 != a3) {
    uint64_t v7 = 0;
  }
  if (v5 == a2) {
    uint64_t v8 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v8 = v7;
  }
  if (objc_opt_respondsToSelector())
  {
    uint64_t v9 = [v6 _systemDefaultFocusGroupPriority];
    if (v9 > v8) {
      uint64_t v8 = v9;
    }
  }
  if (objc_opt_respondsToSelector())
  {
    uint64_t v10 = [v6 focusGroupPriority];
    if (v10 > v8) {
      uint64_t v8 = v10;
    }
  }

  return v8;
}

void sub_1861CA360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)UIKBHandwritingStrokeView;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1861CA5C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1861CA640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1861CABCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1861CAEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1861CB370(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void clipHandwritingPath(uint64_t a1, int *a2)
{
  char v4 = (double *)*((void *)a2 + 1);
  if (!*(unsigned char *)(a1 + 64)) {
    CGContextMoveToPoint(*(CGContextRef *)a1, *(CGFloat *)(a1 + 40), *(CGFloat *)(a1 + 48));
  }
  int v5 = *a2;
  if (*a2)
  {
    if (v5 == 1)
    {
      long double v6 = (_OWORD *)(a1 + 40);
      double v31 = *(double *)(a1 + 40);
      double v32 = v4[1];
      if (v31 >= *v4) {
        double v33 = *v4;
      }
      else {
        double v33 = *(double *)(a1 + 40);
      }
      double v35 = *(double *)(a1 + 48);
      double v34 = *(double *)(a1 + 56);
      double v36 = v33 - v34 * 0.5;
      if (v35 >= v32) {
        double v37 = v4[1];
      }
      else {
        double v37 = *(double *)(a1 + 48);
      }
      double v38 = v37 - v34 * 0.5;
      double v39 = v34 + vabdd_f64(*v4, v31);
      double v40 = v34 + vabdd_f64(v32, v35);
      BOOL v41 = CGRectIntersectsRect(*(CGRect *)(a1 + 8), *(CGRect *)&v36);
      BOOL v28 = v41;
      if (v41) {
        CGContextAddLineToPoint(*(CGContextRef *)a1, *v4, v4[1]);
      }
      long long v29 = *(_OWORD *)v4;
    }
    else
    {
      if (v5 != 2)
      {
        BOOL v28 = 0;
        goto LABEL_35;
      }
      long double v6 = (_OWORD *)(a1 + 40);
      double v7 = *(double *)(a1 + 40);
      double v8 = *v4;
      double v9 = v4[1];
      if (v7 >= *v4) {
        double v10 = *v4;
      }
      else {
        double v10 = *(double *)(a1 + 40);
      }
      double v11 = *(double *)(a1 + 48);
      double v12 = *(double *)(a1 + 56);
      double v13 = v12 * 0.5;
      double v14 = v10 - v12 * 0.5;
      if (v11 >= v9) {
        double v15 = v4[1];
      }
      else {
        double v15 = *(double *)(a1 + 48);
      }
      double v16 = v15 - v13;
      double v17 = v12 + vabdd_f64(v8, v7);
      double v18 = v4[2];
      double v19 = v12 + vabdd_f64(v9, v11);
      if (v8 >= v18) {
        double v20 = v4[2];
      }
      else {
        double v20 = *v4;
      }
      double v21 = v20 - v13;
      double v22 = v4[3];
      if (v9 >= v22) {
        double v23 = v4[3];
      }
      else {
        double v23 = v4[1];
      }
      double v24 = v23 - v13;
      double v25 = v12 + vabdd_f64(v18, v8);
      double v26 = v12 + vabdd_f64(v22, v9);
      CGRect v42 = CGRectUnion(*(CGRect *)&v14, *(CGRect *)&v21);
      BOOL v27 = CGRectIntersectsRect(*(CGRect *)(a1 + 8), v42);
      BOOL v28 = v27;
      if (v27) {
        CGContextAddQuadCurveToPoint(*(CGContextRef *)a1, *v4, v4[1], v4[2], v4[3]);
      }
      long long v29 = *((_OWORD *)v4 + 1);
    }
    _OWORD *v6 = v29;
  }
  else
  {
    v43.size.CGFloat width = *(CGFloat *)(a1 + 56);
    v43.origin.CGFloat x = *v4 - v43.size.width * 0.5;
    v43.origin.CGFloat y = v4[1] - v43.size.width * 0.5;
    v43.size.CGFloat height = v43.size.width;
    BOOL v30 = CGRectIntersectsRect(*(CGRect *)(a1 + 8), v43);
    BOOL v28 = v30;
    if (v30) {
      CGContextMoveToPoint(*(CGContextRef *)a1, *v4, v4[1]);
    }
    *(_OWORD *)(a1 + 40) = *(_OWORD *)v4;
  }
LABEL_35:
  *(unsigned char *)(a1 + 64) = v28;
}

void sub_1861CBC70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  _Unwind_Resume(a1);
}

void sub_1861CBF4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1861CC1D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1861CC7AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1861CCA5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1861CCAE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1861CCC18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1861CCC90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)UIKBHandwritingView;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1861CD024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1861CD210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1861CD29C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1861CD514(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1861CD714(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1861CD788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1861CD814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1861CD904(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1861CDA54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1861CDC38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1861CE0D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1861CE2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1861CE3D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1861CE51C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1861CE7AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1861CEB68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1861CEC8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1861CED48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1861CEDB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1861CEF88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1861CF00C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1861CF120(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1861CF2F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1861CF7D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1861CF8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1861CF964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1861CFA7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1861CFC4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1861CFD4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1861CFE9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1861CFFC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *___ZL40getAudioServicesPlaySystemSoundSymbolLocv_block_invoke(void *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1EB25CF08)
  {
    v5[1] = (void *)MEMORY[0x1E4F143A8];
    v5[2] = (void *)3221225472;
    v5[3] = ___ZL23AudioToolboxLibraryCorePPc_block_invoke;
    void v5[4] = &__block_descriptor_40_e5_v8__0l;
    void v5[5] = v5;
    long long v6 = xmmword_1E52F9D68;
    uint64_t v7 = 0;
    qword_1EB25CF08 = _sl_dlopen();
  }
  BOOL v2 = (void *)qword_1EB25CF08;
  if (!qword_1EB25CF08)
  {
    a1 = [MEMORY[0x1E4F28B00] currentHandler];
    BOOL v2 = [NSString stringWithUTF8String:"void *AudioToolboxLibrary()"];
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, @"UIKBHandwritingView.mm", 42, @"%s", v5[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v3 = v5[0];
  if (v5[0]) {
LABEL_7:
  }
    free(v3);
  double result = dlsym(v2, "AudioServicesPlaySystemSound");
  *(void *)(*(void *)(a1[4] + 8) + 24) = result;
  _MergedGlobals_3_18 = *(_UNKNOWN **)(*(void *)(a1[4] + 8) + 24);
  return result;
}

void sub_1861D0208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL23AudioToolboxLibraryCorePPc_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25CF08 = result;
  return result;
}

void sub_1861D1DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1861D20D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _UIDocumentCreationIntentFromActionIdentifier(void *a1)
{
  if ([a1 hasPrefix:@"com.apple.documents.action.create.document."])
  {
    BOOL v2 = [a1 substringFromIndex:objc_msgSend(@"com.apple.documents.action.create.document.", "length")];
  }
  else
  {
    BOOL v2 = 0;
  }
  return v2;
}

void sub_1861E18B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose(&a36, 8);
  _Block_object_dispose((const void *)(v36 - 216), 8);
  _Block_object_dispose((const void *)(v36 - 184), 8);
  _Unwind_Resume(a1);
}

void sub_1861E4FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1861E9414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

void sub_1861FEBBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1861FECEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1861FEF80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1861FF2E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1861FF4D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CFString *_labelColorSecondary(int a1)
{
  int v2 = _AXDarkenSystemColors();
  id v3 = UIKBColorBlack_Alpha60;
  if (v2)
  {
    id v3 = UIKBColorBlack_Alpha80;
    char v4 = UIKBColorWhite_Alpha85;
  }
  else
  {
    char v4 = UIKBColorWhite_Alpha50;
  }
  if (!a1) {
    id v3 = v4;
  }
  int v5 = *v3;
  return v5;
}

uint64_t geometryPositionSort(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  uint64_t v7 = -1;
  if (a3)
  {
    int v8 = [a3 BOOLValue];
    if (v8) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = -1;
    }
    if (!v8) {
      uint64_t v7 = 1;
    }
  }
  else
  {
    uint64_t v9 = 1;
  }
  id v10 = v5;
  id v11 = v6;
  [v10 frame];
  double v13 = v12;
  [v11 frame];
  if (v13 <= v14)
  {
    [v10 frame];
    double v16 = v15;
    [v11 frame];
    if (v16 >= v17) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = v7;
    }
  }

  return v9;
}

void sub_1862128E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id location)
{
  objc_destroyWeak(v30);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186213C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void sub_186215344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CGMutablePathRef createMutablePathWithPoints(CGFloat *a1, uint64_t a2, int a3)
{
  CFDictionaryRef Mutable = CGPathCreateMutable();
  CGPathMoveToPoint(Mutable, 0, *a1, a1[1]);
  uint64_t v7 = 1;
  int v8 = 1;
  while (1)
  {
    uint64_t v9 = &a1[2 * v7];
    if (*v9 == -1.0 && v9[1] == -1.0) {
      break;
    }
    uint64_t v11 = v8;
LABEL_12:
    CGPathAddLineToPoint(Mutable, 0, a1[2 * v11], a1[2 * v11 + 1]);
    uint64_t v7 = ++v8;
    if (v8 >= a2) {
      goto LABEL_13;
    }
  }
  if (v8 + 1 < a2) {
    ++v8;
  }
  else {
    int v8 = 0;
  }
  CGPathMoveToPoint(Mutable, 0, a1[2 * v8], a1[2 * v8 + 1]);
  if (v8)
  {
    uint64_t v11 = v8;
    goto LABEL_12;
  }
LABEL_13:
  if (a3) {
    CGPathCloseSubpath(Mutable);
  }
  memset(&transform, 0, sizeof(transform));
  CGAffineTransformMakeScale(&v14, 1.0, -1.0);
  CGAffineTransformTranslate(&transform, &v14, 0.0, -15.0);
  CGMutablePathRef v12 = CGPathCreateMutableCopyByTransformingPath(Mutable, &transform);
  CGPathRelease(Mutable);
  return v12;
}

unint64_t UIKBIntHash(uint64_t a1)
{
  unint64_t v1 = 9 * ((~(a1 << 15) + a1) ^ ((unint64_t)(~(a1 << 15) + a1) >> 10));
  unint64_t v2 = (v1 ^ (v1 >> 6)) + ~((v1 ^ (v1 >> 6)) << 11);
  return v2 ^ (v2 >> 16);
}

uint64_t UIKBNextUID()
{
  return UIKBNextUID_counter++;
}

id _UICalendarSanitizeWithCalendar(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    a1 = (void *)[a1 copy];
    char v4 = [a1 calendar];

    if (!v4) {
      [a1 setCalendar:v3];
    }
    if (v3)
    {
      id v5 = [a1 calendar];
      char v6 = [v5 isEqual:v3];

      if ((v6 & 1) == 0)
      {
        uint64_t v7 = [a1 calendar];
        int v8 = [v7 dateFromComponents:a1];

        if (!v8)
        {
          uint64_t v11 = [MEMORY[0x1E4F28B00] currentHandler];
          CGMutablePathRef v12 = objc_msgSend(NSString, "stringWithUTF8String:", "NSDateComponents * _Nullable _UICalendarSanitizeWithCalendar(NSDateComponents * _Nonnull __strong, NSCalendar * _Nonnull __strong)");
          [v11 handleFailureInFunction:v12 file:@"_UICalendarViewHelper.h" lineNumber:92 description:@"Date components yielded an invalid NSDate"];
        }
        uint64_t v9 = [v3 components:1048606 fromDate:v8];

        a1 = (void *)v9;
      }
    }
  }

  return a1;
}

void AXSSensitiveSettingChanged()
{
  +[UIKeyboardLayoutStar accessibilitySensitivityChanged];
  +[UIKBRenderer clearInternalCaches];
  id v0 = (void *)__cache;
  if (__cache && *(void *)(__cache + 8) && (v1 = objc_opt_respondsToSelector(), id v0 = (void *)__cache, (v1 & 1) != 0))
  {
    unint64_t v2 = *(void **)(__cache + 8);
    [v2 purgeMemoryCache];
  }
  else
  {
    __cache = 0;
  }
}

void sub_18621CB5C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _nonPersistentCacheForKey(void *a1, const void *a2)
{
  id v3 = a1;
  if (!v3) {
    goto LABEL_8;
  }
  if (qword_1EB2619C0 != -1) {
    dispatch_once(&qword_1EB2619C0, &__block_literal_global_130_1);
  }
  id v4 = [(id)_MergedGlobals_1127 objectForKey:v3];
  uint64_t v5 = [v4 CGImage];

  if (!v5)
  {
    if (a2)
    {
      CFTypeID v6 = CFGetTypeID(a2);
      if (v6 == CGImageGetTypeID())
      {
        id v7 = +[UIImage imageWithCGImage:a2];
        uint64_t v5 = [v7 CGImage];
        [(id)_MergedGlobals_1127 setObject:v7 forKey:v3];

        goto LABEL_9;
      }
    }
LABEL_8:
    uint64_t v5 = 0;
  }
LABEL_9:

  return v5;
}

void sub_18621DBF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

void sub_18621DFA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __TIGetKeyboardCachingDisabledValue_block_invoke()
{
  id v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  [v0 _configureKey:@"KeyboardCachingDisabled" domain:@"com.apple.keyboard" defaultValue:MEMORY[0x1E4F1CC28]];
}

void ___nonPersistentCacheForKey_block_invoke()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  char v1 = (void *)_MergedGlobals_1127;
  _MergedGlobals_1127 = (uint64_t)v0;
}

void sub_1862235A4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_186226520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186228FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getTUIKeyplaneViewClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)getTUIKeyplaneViewClass_softClass;
  uint64_t v7 = getTUIKeyplaneViewClass_softClass;
  if (!getTUIKeyplaneViewClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getTUIKeyplaneViewClass_block_invoke;
    v3[3] = &unk_1E52D9900;
    v3[4] = &v4;
    __getTUIKeyplaneViewClass_block_invoke((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_186229514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186233C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18623AF9C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_18623CB54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t keyPositionSortByHorizontalDistanceFromPoint(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  [a3 floatValue];
  double v8 = v7;
  id v9 = v6;
  id v10 = v5;
  [v10 frame];
  double v11 = v8 - CGRectGetMinX(v38);
  if (v11 >= 0.0) {
    double v12 = v11;
  }
  else {
    double v12 = -v11;
  }
  [v10 frame];
  CGFloat v14 = v13;
  CGFloat v16 = v15;
  CGFloat v18 = v17;
  CGFloat v20 = v19;

  v39.origin.CGFloat x = v14;
  v39.origin.CGFloat y = v16;
  v39.size.CGFloat width = v18;
  v39.size.CGFloat height = v20;
  double v21 = v8 - CGRectGetMaxX(v39);
  if (v21 < 0.0) {
    double v21 = -v21;
  }
  if (v12 >= v21) {
    double v21 = v12;
  }
  float v22 = v21;
  [v9 frame];
  double v23 = v8 - CGRectGetMinX(v40);
  if (v23 >= 0.0) {
    double v24 = v23;
  }
  else {
    double v24 = -v23;
  }
  [v9 frame];
  CGFloat v26 = v25;
  CGFloat v28 = v27;
  CGFloat v30 = v29;
  CGFloat v32 = v31;

  v41.origin.CGFloat x = v26;
  v41.origin.CGFloat y = v28;
  v41.size.CGFloat width = v30;
  v41.size.CGFloat height = v32;
  double v33 = v8 - CGRectGetMaxX(v41);
  if (v33 < 0.0) {
    double v33 = -v33;
  }
  if (v24 >= v33) {
    double v33 = v24;
  }
  float v34 = v33;
  if (v22 >= v34) {
    uint64_t v35 = 0;
  }
  else {
    uint64_t v35 = -1;
  }
  if (v22 > v34) {
    uint64_t v36 = 1;
  }
  else {
    uint64_t v36 = v35;
  }

  return v36;
}

void sub_186248E50(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

BOOL isFlickOutOfBounds(double a1, double a2, double a3, double a4)
{
  id v6 = +[UIKeyboard activeKeyboard];
  unint64_t v7 = [v6 interfaceOrientation] - 5;

  unint64_t v8 = UIKeyboardGetSafeDeviceIdiom() & 0xFFFFFFFFFFFFFFFBLL;
  BOOL v9 = v7 < 0xFFFFFFFFFFFFFFFELL || v8 == 1;
  double v10 = 80.0;
  if (v9) {
    double v10 = 110.0;
  }
  return vabdd_f64(a2, a4) > v10;
}

void sub_18625097C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 192), 8);
  _Unwind_Resume(a1);
}

id getFlickString(void *a1, uint64_t a2)
{
  id v3 = getFlickPopupInfoArray(a1, @"Strings");
  uint64_t v4 = v3;
  if (v3)
  {
    id v5 = [v3 objectAtIndex:a2 + 1];
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

void sub_186253FA0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_186254340(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_18625619C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void __getTUIKeyboardLayoutFactoryClass_block_invoke_1(uint64_t a1)
{
  TextInputUILibrary_5();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("TUIKeyboardLayoutFactory");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getTUIKeyboardLayoutFactoryClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getTUIKeyboardLayoutFactoryClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIKeyboardLayoutStar.m", 180, @"Unable to find class %s", "TUIKeyboardLayoutFactory");

    __break(1u);
  }
}

void TextInputUILibrary_5()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!TextInputUILibraryCore_frameworkLibrary_5)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __TextInputUILibraryCore_block_invoke_12;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E52FA788;
    uint64_t v5 = 0;
    TextInputUILibraryCore_frameworkLibrary_5 = _sl_dlopen();
  }
  if (!TextInputUILibraryCore_frameworkLibrary_5)
  {
    id v1 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v2 = [NSString stringWithUTF8String:"void *TextInputUILibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"UIKeyboardLayoutStar.m", 179, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __TextInputUILibraryCore_block_invoke_12()
{
  uint64_t result = _sl_dlopen();
  TextInputUILibraryCore_frameworkLibrary_5 = result;
  return result;
}

void __getTUIKeyplaneViewClass_block_invoke(uint64_t a1)
{
  TextInputUILibrary_5();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("TUIKeyplaneView");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getTUIKeyplaneViewClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getTUIKeyplaneViewClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIKeyboardLayoutStar.m", 185, @"Unable to find class %s", "TUIKeyplaneView");

    __break(1u);
  }
}

id getFlickPopupInfoArray(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = a1;
    uint64_t v5 = UIKeyboardGetCurrentInputMode();
    uint64_t v6 = TIInputModeGetNormalizedIdentifier();

    unint64_t v7 = UIKeyboardRomanAccentVariants((uint64_t)v4, v6, 38);

    unint64_t v8 = [v7 objectForKey:@"Direction"];
    int v9 = [v8 isEqualToString:@"flick"];

    if (v9)
    {
      double v10 = [v7 objectForKey:v3];
    }
    else
    {
      double v10 = 0;
    }
  }
  else
  {
    double v10 = 0;
  }

  return v10;
}

id getAFSpeechCorrectionInfoClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)getAFSpeechCorrectionInfoClass_softClass;
  uint64_t v7 = getAFSpeechCorrectionInfoClass_softClass;
  if (!getAFSpeechCorrectionInfoClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getAFSpeechCorrectionInfoClass_block_invoke;
    v3[3] = &unk_1E52D9900;
    v3[4] = &v4;
    __getAFSpeechCorrectionInfoClass_block_invoke((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1862574D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186257D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18625818C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186258788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getAFSpeechRequestOptionsClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)getAFSpeechRequestOptionsClass_softClass;
  uint64_t v7 = getAFSpeechRequestOptionsClass_softClass;
  if (!getAFSpeechRequestOptionsClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getAFSpeechRequestOptionsClass_block_invoke;
    v3[3] = &unk_1E52D9900;
    v3[4] = &v4;
    __getAFSpeechRequestOptionsClass_block_invoke((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1862589A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18625B950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v14 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_18625C070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v26 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_18625E17C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getAFOfflineDictationStatusHighQualityKey()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  id v0 = (void **)getAFOfflineDictationStatusHighQualityKeySymbolLoc_ptr;
  uint64_t v9 = getAFOfflineDictationStatusHighQualityKeySymbolLoc_ptr;
  if (!getAFOfflineDictationStatusHighQualityKeySymbolLoc_ptr)
  {
    id v1 = AssistantServicesLibrary_0();
    v7[3] = (uint64_t)dlsym(v1, "AFOfflineDictationStatusHighQualityKey");
    getAFOfflineDictationStatusHighQualityKeySymbolLoc_ptr = v7[3];
    id v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    uint64_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"NSString *getAFOfflineDictationStatusHighQualityKey(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIDictationConnection.m", 65, @"%s", dlerror());

    __break(1u);
  }
}

void sub_18625E434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getAFOfflineDictationStatusInstalledKey()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  id v0 = (void **)getAFOfflineDictationStatusInstalledKeySymbolLoc_ptr;
  uint64_t v9 = getAFOfflineDictationStatusInstalledKeySymbolLoc_ptr;
  if (!getAFOfflineDictationStatusInstalledKeySymbolLoc_ptr)
  {
    id v1 = AssistantServicesLibrary_0();
    v7[3] = (uint64_t)dlsym(v1, "AFOfflineDictationStatusInstalledKey");
    getAFOfflineDictationStatusInstalledKeySymbolLoc_ptr = v7[3];
    id v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    uint64_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"NSString *getAFOfflineDictationStatusInstalledKey(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIDictationConnection.m", 66, @"%s", dlerror());

    __break(1u);
  }
}

void sub_18625E59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18625E8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __AssistantServicesLibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  AssistantServicesLibraryCore_frameworkLibrary_0 = result;
  return result;
}

void __getAFSpeechCorrectionInfoClass_block_invoke(uint64_t a1)
{
  AssistantServicesLibrary_0();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AFSpeechCorrectionInfo");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAFSpeechCorrectionInfoClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getAFSpeechCorrectionInfoClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationConnection.m", 59, @"Unable to find class %s", "AFSpeechCorrectionInfo");

    __break(1u);
  }
}

void *__getAFDictationRestrictedSymbolLoc_block_invoke_0(uint64_t a1)
{
  uint64_t v2 = AssistantServicesLibrary_0();
  uint64_t result = dlsym(v2, "AFDictationRestricted");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAFDictationRestrictedSymbolLoc_ptr_0 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void __getAFLanguageDetectionUserContextClass_block_invoke(uint64_t a1)
{
  AssistantServicesLibrary_0();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AFLanguageDetectionUserContext");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAFLanguageDetectionUserContextClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getAFLanguageDetectionUserContextClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationConnection.m", 60, @"Unable to find class %s", "AFLanguageDetectionUserContext");

    __break(1u);
  }
}

void __getAFDictationOptionsClass_block_invoke(uint64_t a1)
{
  AssistantServicesLibrary_0();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AFDictationOptions");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAFDictationOptionsClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getAFDictationOptionsClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationConnection.m", 57, @"Unable to find class %s", "AFDictationOptions");

    __break(1u);
  }
}

void __getAFSpeechRequestOptionsClass_block_invoke(uint64_t a1)
{
  AssistantServicesLibrary_0();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AFSpeechRequestOptions");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAFSpeechRequestOptionsClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getAFSpeechRequestOptionsClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationConnection.m", 58, @"Unable to find class %s", "AFSpeechRequestOptions");

    __break(1u);
  }
}

void *__getAFPreferencesDidChangeNotificationSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = AssistantServicesLibrary_0();
  uint64_t result = dlsym(v2, "AFPreferencesDidChangeNotification");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB261A08 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAFOfflineDictationStatusHighQualityKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = AssistantServicesLibrary_0();
  uint64_t result = dlsym(v2, "AFOfflineDictationStatusHighQualityKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAFOfflineDictationStatusHighQualityKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAFOfflineDictationStatusInstalledKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = AssistantServicesLibrary_0();
  uint64_t result = dlsym(v2, "AFOfflineDictationStatusInstalledKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAFOfflineDictationStatusInstalledKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAFOfflineDictationStatusEmojiRecognitionKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = AssistantServicesLibrary_0();
  uint64_t result = dlsym(v2, "AFOfflineDictationStatusEmojiRecognitionKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAFOfflineDictationStatusEmojiRecognitionKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                          + 24);
  return result;
}

void sub_18625F5BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18625F7A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18625FAC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186260A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  _Block_object_dispose((const void *)(v16 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_186261FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

void sub_186263574(_Unwind_Exception *a1)
{
}

void sub_18626376C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1862667F0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_186269D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getSISchemaUEILaunchContextClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)getSISchemaUEILaunchContextClass_softClass;
  uint64_t v7 = getSISchemaUEILaunchContextClass_softClass;
  if (!getSISchemaUEILaunchContextClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getSISchemaUEILaunchContextClass_block_invoke;
    v3[3] = &unk_1E52D9900;
    v3[4] = &v4;
    __getSISchemaUEILaunchContextClass_block_invoke((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_186269E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18626BDE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18626C0A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 144), 8);
  _Block_object_dispose((const void *)(v27 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18626CB28(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_18626E66C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18626ED30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186270EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186271E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

id getSISchemaUEIDictationInputModeSwitchContextClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)getSISchemaUEIDictationInputModeSwitchContextClass_softClass;
  uint64_t v7 = getSISchemaUEIDictationInputModeSwitchContextClass_softClass;
  if (!getSISchemaUEIDictationInputModeSwitchContextClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getSISchemaUEIDictationInputModeSwitchContextClass_block_invoke;
    v3[3] = &unk_1E52D9900;
    v3[4] = &v4;
    __getSISchemaUEIDictationInputModeSwitchContextClass_block_invoke((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_186271F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186273FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getAFAggregatorClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)getAFAggregatorClass_softClass;
  uint64_t v7 = getAFAggregatorClass_softClass;
  if (!getAFAggregatorClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getAFAggregatorClass_block_invoke;
    v3[3] = &unk_1E52D9900;
    v3[4] = &v4;
    __getAFAggregatorClass_block_invoke((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_186276C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186278340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186278BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

id getSISchemaUUIDClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)getSISchemaUUIDClass_softClass;
  uint64_t v7 = getSISchemaUUIDClass_softClass;
  if (!getSISchemaUUIDClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getSISchemaUUIDClass_block_invoke;
    v3[3] = &unk_1E52D9900;
    v3[4] = &v4;
    __getSISchemaUUIDClass_block_invoke((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_186278CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186279164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_1862792B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1862794FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1862796D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186279D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getSISchemaUEIDictationInputModeSwitchStartedClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)getSISchemaUEIDictationInputModeSwitchStartedClass_softClass;
  uint64_t v7 = getSISchemaUEIDictationInputModeSwitchStartedClass_softClass;
  if (!getSISchemaUEIDictationInputModeSwitchStartedClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getSISchemaUEIDictationInputModeSwitchStartedClass_block_invoke;
    v3[3] = &unk_1E52D9900;
    v3[4] = &v4;
    __getSISchemaUEIDictationInputModeSwitchStartedClass_block_invoke((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18627AC10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18627B78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _stringForObject(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v2 = [v1 string];
LABEL_5:
    id v3 = v2;
    goto LABEL_7;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v2 = v1;
    goto LABEL_5;
  }
  id v3 = 0;
LABEL_7:

  return v3;
}

void sub_18627D5E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18627DCD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getSISchemaUEIDictationVoiceCommandExecutedClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)getSISchemaUEIDictationVoiceCommandExecutedClass_softClass;
  uint64_t v7 = getSISchemaUEIDictationVoiceCommandExecutedClass_softClass;
  if (!getSISchemaUEIDictationVoiceCommandExecutedClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getSISchemaUEIDictationVoiceCommandExecutedClass_block_invoke;
    v3[3] = &unk_1E52D9900;
    v3[4] = &v4;
    __getSISchemaUEIDictationVoiceCommandExecutedClass_block_invoke((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18627DDC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18627E874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18627E9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186280594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
}

void sub_186283050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18628409C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

id getSISchemaUEIDictationEuclidSpeechAlternativesSelectedClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)getSISchemaUEIDictationEuclidSpeechAlternativesSelectedClass_softClass;
  uint64_t v7 = getSISchemaUEIDictationEuclidSpeechAlternativesSelectedClass_softClass;
  if (!getSISchemaUEIDictationEuclidSpeechAlternativesSelectedClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getSISchemaUEIDictationEuclidSpeechAlternativesSelectedClass_block_invoke;
    v3[3] = &unk_1E52D9900;
    v3[4] = &v4;
    __getSISchemaUEIDictationEuclidSpeechAlternativesSelectedClass_block_invoke((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1862851A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186285520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

Class __getOBPrivacyPresenterClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB25AA78)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    void v6[3] = __OnBoardingKitLibraryCore_block_invoke;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E52FB198;
    uint64_t v8 = 0;
    qword_1EB25AA78 = _sl_dlopen();
  }
  if (!qword_1EB25AA78)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *OnBoardingKitLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIDictationController.m", 243, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("OBPrivacyPresenter");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getOBPrivacyPresenterClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIDictationController.m", 244, @"Unable to find class %s", "OBPrivacyPresenter");

LABEL_10:
    __break(1u);
  }
  qword_1EB25AA70 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __OnBoardingKitLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25AA78 = result;
  return result;
}

Class __getVTUIDictationDataSharingOptInPresenterClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB25AA88)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    void v6[3] = __VoiceTriggerUILibraryCore_block_invoke;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E52FB1B0;
    uint64_t v8 = 0;
    qword_1EB25AA88 = _sl_dlopen();
  }
  if (!qword_1EB25AA88)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *VoiceTriggerUILibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIDictationController.m", 146, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("VTUIDictationDataSharingOptInPresenter");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getVTUIDictationDataSharingOptInPresenterClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIDictationController.m", 147, @"Unable to find class %s", "VTUIDictationDataSharingOptInPresenter");

LABEL_10:
    __break(1u);
  }
  qword_1EB25AA80 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __VoiceTriggerUILibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25AA88 = result;
  return result;
}

uint64_t __CallKitLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25AA98 = result;
  return result;
}

void __getSISchemaAutoPunctuationEditClass_block_invoke(uint64_t a1)
{
  SiriInstrumentationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaAutoPunctuationEdit");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getSISchemaAutoPunctuationEditClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getSISchemaAutoPunctuationEditClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationController.m", 187, @"Unable to find class %s", "SISchemaAutoPunctuationEdit");

    __break(1u);
  }
}

void SiriInstrumentationLibrary()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!SiriInstrumentationLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __SiriInstrumentationLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E52FB1E0;
    uint64_t v5 = 0;
    SiriInstrumentationLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  if (!SiriInstrumentationLibraryCore_frameworkLibrary)
  {
    id v1 = [MEMORY[0x1E4F28B00] currentHandler];
    id v2 = [NSString stringWithUTF8String:"void *SiriInstrumentationLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"UIDictationController.m", 167, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __SiriInstrumentationLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  SiriInstrumentationLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

uint64_t __AssistantServicesLibraryCore_block_invoke_1()
{
  uint64_t result = _sl_dlopen();
  AssistantServicesLibraryCore_frameworkLibrary_1 = result;
  return result;
}

void __getASRSchemaASRConfusionPairTokenClass_block_invoke(uint64_t a1)
{
  SiriInstrumentationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("ASRSchemaASRConfusionPairToken");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getASRSchemaASRConfusionPairTokenClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getASRSchemaASRConfusionPairTokenClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationController.m", 195, @"Unable to find class %s", "ASRSchemaASRConfusionPairToken");

    __break(1u);
  }
}

void __getSISchemaUEIDictationAlternativeTextPairsSelectedClass_block_invoke(uint64_t a1)
{
  SiriInstrumentationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaUEIDictationAlternativeTextPairsSelected");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1EB25AAA0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getSISchemaUEIDictationAlternativeTextPairsSelectedClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationController.m", 188, @"Unable to find class %s", "SISchemaUEIDictationAlternativeTextPairsSelected");

    __break(1u);
  }
}

void __getSISchemaDictationContentEditedClass_block_invoke(uint64_t a1)
{
  SiriInstrumentationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaDictationContentEdited");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1EB25AAA8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getSISchemaDictationContentEditedClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationController.m", 180, @"Unable to find class %s", "SISchemaDictationContentEdited");

    __break(1u);
  }
}

void __getSISchemaUEIDictationContentEditedTier1Class_block_invoke(uint64_t a1)
{
  SiriInstrumentationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaUEIDictationContentEditedTier1");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1EB25AAB0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getSISchemaUEIDictationContentEditedTier1Class(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationController.m", 181, @"Unable to find class %s", "SISchemaUEIDictationContentEditedTier1");

    __break(1u);
  }
}

void *__getAFSiriDataSharingOptInStatusGetNameSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = AssistantServicesLibrary_1();
  uint64_t result = dlsym(v2, "AFSiriDataSharingOptInStatusGetName");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1EB25AAB8 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void __getSISchemaInvocationClass_block_invoke(uint64_t a1)
{
  SiriInstrumentationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaInvocation");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1EB25AAC0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getSISchemaInvocationClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationController.m", 168, @"Unable to find class %s", "SISchemaInvocation");

    __break(1u);
  }
}

void __getSISchemaUEILaunchContextClass_block_invoke(uint64_t a1)
{
  SiriInstrumentationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaUEILaunchContext");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getSISchemaUEILaunchContextClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getSISchemaUEILaunchContextClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationController.m", 177, @"Unable to find class %s", "SISchemaUEILaunchContext");

    __break(1u);
  }
}

void __getSISchemaUEILaunchStartedClass_block_invoke(uint64_t a1)
{
  SiriInstrumentationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaUEILaunchStarted");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1EB25AAC8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getSISchemaUEILaunchStartedClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationController.m", 178, @"Unable to find class %s", "SISchemaUEILaunchStarted");

    __break(1u);
  }
}

void __getSISchemaUEIDictationEnablementPromptShownClass_block_invoke(uint64_t a1)
{
  SiriInstrumentationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaUEIDictationEnablementPromptShown");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getSISchemaUEIDictationEnablementPromptShownClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                            + 24);
  }
  else
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getSISchemaUEIDictationEnablementPromptShownClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationController.m", 193, @"Unable to find class %s", "SISchemaUEIDictationEnablementPromptShown");

    __break(1u);
  }
}

void __getSISchemaDictationEndPointCancelClass_block_invoke(uint64_t a1)
{
  SiriInstrumentationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaDictationEndPointCancel");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getSISchemaDictationEndPointCancelClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getSISchemaDictationEndPointCancelClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationController.m", 170, @"Unable to find class %s", "SISchemaDictationEndPointCancel");

    __break(1u);
  }
}

void __getSISchemaDictationEndPointStopClass_block_invoke(uint64_t a1)
{
  SiriInstrumentationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaDictationEndPointStop");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getSISchemaDictationEndPointStopClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getSISchemaDictationEndPointStopClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationController.m", 169, @"Unable to find class %s", "SISchemaDictationEndPointStop");

    __break(1u);
  }
}

void __getSISchemaUEIDictationPartialResultUpdatedClass_block_invoke(uint64_t a1)
{
  SiriInstrumentationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaUEIDictationPartialResultUpdated");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1EB25AAD0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getSISchemaUEIDictationPartialResultUpdatedClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationController.m", 182, @"Unable to find class %s", "SISchemaUEIDictationPartialResultUpdated");

    __break(1u);
  }
}

void __getSISchemaUEIDictationInputModeSwitchContextClass_block_invoke(uint64_t a1)
{
  SiriInstrumentationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaUEIDictationInputModeSwitchContext");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getSISchemaUEIDictationInputModeSwitchContextClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                             + 24);
  }
  else
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getSISchemaUEIDictationInputModeSwitchContextClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationController.m", 184, @"Unable to find class %s", "SISchemaUEIDictationInputModeSwitchContext");

    __break(1u);
  }
}

void __getSISchemaUEIDictationInputModeSwitchEndedClass_block_invoke(uint64_t a1)
{
  SiriInstrumentationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaUEIDictationInputModeSwitchEnded");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1EB25AAD8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getSISchemaUEIDictationInputModeSwitchEndedClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationController.m", 186, @"Unable to find class %s", "SISchemaUEIDictationInputModeSwitchEnded");

    __break(1u);
  }
}

void __getSISchemaUEILaunchEndedClass_block_invoke(uint64_t a1)
{
  SiriInstrumentationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaUEILaunchEnded");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getSISchemaUEILaunchEndedClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getSISchemaUEILaunchEndedClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationController.m", 179, @"Unable to find class %s", "SISchemaUEILaunchEnded");

    __break(1u);
  }
}

void __getAFAggregatorClass_block_invoke(uint64_t a1)
{
  AssistantServicesLibrary_1();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AFAggregator");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAFAggregatorClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getAFAggregatorClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationController.m", 228, @"Unable to find class %s", "AFAggregator");

    __break(1u);
  }
}

void __getSISchemaDictationContextClass_block_invoke(uint64_t a1)
{
  SiriInstrumentationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaDictationContext");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getSISchemaDictationContextClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getSISchemaDictationContextClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationController.m", 171, @"Unable to find class %s", "SISchemaDictationContext");

    __break(1u);
  }
}

void __getSISchemaUUIDClass_block_invoke(uint64_t a1)
{
  SiriInstrumentationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaUUID");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getSISchemaUUIDClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getSISchemaUUIDClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationController.m", 183, @"Unable to find class %s", "SISchemaUUID");

    __break(1u);
  }
}

void __getSISchemaDictationAlternativesPresentClass_block_invoke(uint64_t a1)
{
  SiriInstrumentationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaDictationAlternativesPresent");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1EB25AAE0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getSISchemaDictationAlternativesPresentClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationController.m", 174, @"Unable to find class %s", "SISchemaDictationAlternativesPresent");

    __break(1u);
  }
}

void __getSISchemaDictationTranscriptionMetadataClass_block_invoke(uint64_t a1)
{
  SiriInstrumentationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaDictationTranscriptionMetadata");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1EB25AAE8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getSISchemaDictationTranscriptionMetadataClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationController.m", 173, @"Unable to find class %s", "SISchemaDictationTranscriptionMetadata");

    __break(1u);
  }
}

void __getSISchemaLocaleIdentifierClass_block_invoke(uint64_t a1)
{
  SiriInstrumentationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaLocaleIdentifier");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getSISchemaLocaleIdentifierClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getSISchemaLocaleIdentifierClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationController.m", 172, @"Unable to find class %s", "SISchemaLocaleIdentifier");

    __break(1u);
  }
}

void __getSISchemaDictationAlternativesViewedClass_block_invoke(uint64_t a1)
{
  SiriInstrumentationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaDictationAlternativesViewed");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getSISchemaDictationAlternativesViewedClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getSISchemaDictationAlternativesViewedClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationController.m", 175, @"Unable to find class %s", "SISchemaDictationAlternativesViewed");

    __break(1u);
  }
}

void __getSISchemaDictationAlternativeSelectedClass_block_invoke(uint64_t a1)
{
  SiriInstrumentationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaDictationAlternativeSelected");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getSISchemaDictationAlternativeSelectedClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getSISchemaDictationAlternativeSelectedClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationController.m", 176, @"Unable to find class %s", "SISchemaDictationAlternativeSelected");

    __break(1u);
  }
}

void __getAFDictationDiscoverabilitySignalsStreamManagerClass_block_invoke(uint64_t a1)
{
  AssistantServicesLibrary_1();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AFDictationDiscoverabilitySignalsStreamManager");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAFDictationDiscoverabilitySignalsStreamManagerClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                                 + 24);
  }
  else
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getAFDictationDiscoverabilitySignalsStreamManagerClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationController.m", 231, @"Unable to find class %s", "AFDictationDiscoverabilitySignalsStreamManager");

    __break(1u);
  }
}

void __getSISchemaUEIDictationInputModeSwitchStartedClass_block_invoke(uint64_t a1)
{
  SiriInstrumentationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaUEIDictationInputModeSwitchStarted");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getSISchemaUEIDictationInputModeSwitchStartedClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                             + 24);
  }
  else
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getSISchemaUEIDictationInputModeSwitchStartedClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationController.m", 185, @"Unable to find class %s", "SISchemaUEIDictationInputModeSwitchStarted");

    __break(1u);
  }
}

Class __getRTIDocumentRequestClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB25AAF8)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    void v6[3] = __RemoteTextInputLibraryCore_block_invoke_0;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E52FB210;
    uint64_t v8 = 0;
    qword_1EB25AAF8 = _sl_dlopen();
  }
  if (!qword_1EB25AAF8)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v4 = [NSString stringWithUTF8String:"void *RemoteTextInputLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIDictationController.m", 202, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("RTIDocumentRequest");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getRTIDocumentRequestClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIDictationController.m", 203, @"Unable to find class %s", "RTIDocumentRequest");

LABEL_10:
    __break(1u);
  }
  qword_1EB25AAF0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __RemoteTextInputLibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25AAF8 = result;
  return result;
}

void __getSISchemaUEIDictationVoiceCommandExecutedClass_block_invoke(uint64_t a1)
{
  SiriInstrumentationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaUEIDictationVoiceCommandExecuted");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getSISchemaUEIDictationVoiceCommandExecutedClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                           + 24);
  }
  else
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getSISchemaUEIDictationVoiceCommandExecutedClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationController.m", 189, @"Unable to find class %s", "SISchemaUEIDictationVoiceCommandExecuted");

    __break(1u);
  }
}

void __getSISchemaUEIDictationVoiceCommandUndoTapActionClass_block_invoke(uint64_t a1)
{
  SiriInstrumentationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaUEIDictationVoiceCommandUndoTapAction");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getSISchemaUEIDictationVoiceCommandUndoTapActionClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                                + 24);
  }
  else
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getSISchemaUEIDictationVoiceCommandUndoTapActionClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationController.m", 190, @"Unable to find class %s", "SISchemaUEIDictationVoiceCommandUndoTapAction");

    __break(1u);
  }
}

void __getSISchemaUEIDictationVoiceCommandDisambiguationActionClass_block_invoke(uint64_t a1)
{
  SiriInstrumentationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaUEIDictationVoiceCommandDisambiguationAction");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getSISchemaUEIDictationVoiceCommandDisambiguationActionClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                                       + 24);
  }
  else
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getSISchemaUEIDictationVoiceCommandDisambiguationActionClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationController.m", 191, @"Unable to find class %s", "SISchemaUEIDictationVoiceCommandDisambiguationAction");

    __break(1u);
  }
}

void __getSISchemaUEIDictationEuclidSpeechAlternativesSelectedClass_block_invoke(uint64_t a1)
{
  SiriInstrumentationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaUEIDictationEuclidSpeechAlternativesSelected");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getSISchemaUEIDictationEuclidSpeechAlternativesSelectedClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                                       + 24);
  }
  else
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getSISchemaUEIDictationEuclidSpeechAlternativesSelectedClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationController.m", 197, @"Unable to find class %s", "SISchemaUEIDictationEuclidSpeechAlternativesSelected");

    __break(1u);
  }
}

void __getSISchemaUEIDictationEuclidSpeechAlternativesSelectedTier1Class_block_invoke(uint64_t a1)
{
  SiriInstrumentationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaUEIDictationEuclidSpeechAlternativesSelectedTier1");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1EB25AB00 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getSISchemaUEIDictationEuclidSpeechAlternativesSelectedTier1Class(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationController.m", 198, @"Unable to find class %s", "SISchemaUEIDictationEuclidSpeechAlternativesSelectedTier1");

    __break(1u);
  }
}

void __getSISchemaEuclidConfusionPairClass_block_invoke(uint64_t a1)
{
  SiriInstrumentationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaEuclidConfusionPair");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1EB25AB08 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getSISchemaEuclidConfusionPairClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationController.m", 199, @"Unable to find class %s", "SISchemaEuclidConfusionPair");

    __break(1u);
  }
}

void sub_18628A9D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18628B054(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_18628B89C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getAFSpeechPhraseClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)getAFSpeechPhraseClass_softClass;
  uint64_t v7 = getAFSpeechPhraseClass_softClass;
  if (!getAFSpeechPhraseClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getAFSpeechPhraseClass_block_invoke;
    v3[3] = &unk_1E52D9900;
    v3[4] = &v4;
    __getAFSpeechPhraseClass_block_invoke((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18628BD64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18628BE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18628C11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18628F2A8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void *SpeechLibrary()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!SpeechLibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    void v4[2] = (void *)3221225472;
    v4[3] = __SpeechLibraryCore_block_invoke;
    void v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_1E52FB768;
    uint64_t v6 = 0;
    SpeechLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  id v0 = (void *)SpeechLibraryCore_frameworkLibrary;
  if (!SpeechLibraryCore_frameworkLibrary)
  {
    id v0 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *SpeechLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationUtilities.m", 50, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

id getSFSpeechAssetManagerClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)getSFSpeechAssetManagerClass_softClass;
  uint64_t v7 = getSFSpeechAssetManagerClass_softClass;
  if (!getSFSpeechAssetManagerClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getSFSpeechAssetManagerClass_block_invoke;
    v3[3] = &unk_1E52D9900;
    v3[4] = &v4;
    __getSFSpeechAssetManagerClass_block_invoke((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18628F544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18628F718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18628FF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186292E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_186293310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _Block_object_dispose(&a16, 8);
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose((const void *)(v32 - 200), 8);
  _Block_object_dispose((const void *)(v32 - 168), 8);
  _Block_object_dispose((const void *)(v32 - 136), 8);
  _Unwind_Resume(a1);
}

void __getAFSpeechInterpretationClass_block_invoke(uint64_t a1)
{
  AssistantServicesLibrary_2();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AFSpeechInterpretation");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAFSpeechInterpretationClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getAFSpeechInterpretationClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationUtilities.m", 56, @"Unable to find class %s", "AFSpeechInterpretation");

    __break(1u);
  }
}

uint64_t __AssistantServicesLibraryCore_block_invoke_2()
{
  uint64_t result = _sl_dlopen();
  AssistantServicesLibraryCore_frameworkLibrary_2 = result;
  return result;
}

void __getAFSpeechPhraseClass_block_invoke(uint64_t a1)
{
  AssistantServicesLibrary_2();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AFSpeechPhrase");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAFSpeechPhraseClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getAFSpeechPhraseClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationUtilities.m", 57, @"Unable to find class %s", "AFSpeechPhrase");

    __break(1u);
  }
}

uint64_t __SpeechLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  SpeechLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

void __getSFSpeechAssetManagerClass_block_invoke(uint64_t a1)
{
  SpeechLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SFSpeechAssetManager");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getSFSpeechAssetManagerClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getSFSpeechAssetManagerClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationUtilities.m", 52, @"Unable to find class %s", "SFSpeechAssetManager");

    __break(1u);
  }
}

void __getSFEntitledAssetConfigClass_block_invoke(uint64_t a1)
{
  SpeechLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SFEntitledAssetConfig");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1EB261A68 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getSFEntitledAssetConfigClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationUtilities.m", 53, @"Unable to find class %s", "SFEntitledAssetConfig");

    __break(1u);
  }
}

void __trimAttachmentCharactersAndWhiteSpaceInString_block_invoke()
{
  __int16 v4 = -4;
  id v0 = [NSString stringWithCharacters:&v4 length:1];
  id v1 = [MEMORY[0x1E4F28E58] whitespaceCharacterSet];
  [v1 addCharactersInString:v0];
  uint64_t v2 = [v1 copy];
  id v3 = (void *)qword_1EB261A70;
  qword_1EB261A70 = v2;
}

id getSUICFlamesViewClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)_MergedGlobals_11_9;
  uint64_t v7 = _MergedGlobals_11_9;
  if (!_MergedGlobals_11_9)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getSUICFlamesViewClass_block_invoke;
    v3[3] = &unk_1E52D9900;
    v3[4] = &v4;
    __getSUICFlamesViewClass_block_invoke((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_186296D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getSUICFlamesViewClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB25D3A8)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    void v6[3] = __SiriUICoreLibraryCore_block_invoke;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E52FB7A0;
    uint64_t v8 = 0;
    qword_1EB25D3A8 = _sl_dlopen();
  }
  if (!qword_1EB25D3A8)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *SiriUICoreLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIDictationView.m", 62, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("SUICFlamesView");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"Class getSUICFlamesViewClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIDictationView.m", 63, @"Unable to find class %s", "SUICFlamesView");

LABEL_10:
    __break(1u);
  }
  _MergedGlobals_11_9 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __SiriUICoreLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25D3A8 = result;
  return result;
}

void sub_18629E370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18629FB28(_Unwind_Exception *a1)
{
  __destructor_8_s8_s16_s24_s80(v1);
  _Unwind_Resume(a1);
}

void sub_1862A0630(_Unwind_Exception *a1)
{
  __destructor_8_sb0_sb8_sb16_sb24_sb32_sb40(v1);
  _Unwind_Resume(a1);
}

__n128 __copy_constructor_8_8_s0_s8_s16_s24_s32_s40_t48w32(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(id *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = *(id *)(a2 + 8);
  *(void *)(a1 + 16) = *(id *)(a2 + 16);
  *(void *)(a1 + 24) = *(id *)(a2 + 24);
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  *(void *)(a1 + 40) = *(id *)(a2 + 40);
  __n128 result = *(__n128 *)(a2 + 64);
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x210], 8) = *(_OWORD *)(a2 + 48);
  *(__n128 *)(a1 + 64) = result;
  return result;
}

void sub_1862A0860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_1862A09CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

id ImageWithOpacity(void *a1)
{
  id v1 = a1;
  [v1 size];
  uint64_t v4 = 0;
  if (v2 > 0.0)
  {
    double v5 = v3;
    if (v3 > 0.0)
    {
      double v6 = v2;
      double v7 = *MEMORY[0x1E4F1DAD8];
      double v8 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
      _UIGraphicsBeginImageContextWithOptions(0, 0, v2, v3, 0.0);
      objc_msgSend(v1, "drawInRect:blendMode:alpha:", 0, v7, v8, v6, v5, 0.4);
      uint64_t v4 = _UIGraphicsGetImageFromCurrentImageContext(0);
      ContextStacuint64_t k = (int *)GetContextStack(0);
      PopContextFromStack(ContextStack);
    }
  }

  return v4;
}

id getEMFEmojiTokenClass()
{
  uint64_t v4 = 0;
  double v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)_MergedGlobals_1132;
  uint64_t v7 = _MergedGlobals_1132;
  if (!_MergedGlobals_1132)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getEMFEmojiTokenClass_block_invoke_0;
    v3[3] = &unk_1E52D9900;
    v3[4] = &v4;
    __getEMFEmojiTokenClass_block_invoke_0((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1862A3FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getEMFEmojiTokenClass_block_invoke_0(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB261B28)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    void v6[3] = __EmojiFoundationLibraryCore_block_invoke_1;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E52FB8A0;
    uint64_t v8 = 0;
    qword_1EB261B28 = _sl_dlopen();
  }
  if (!qword_1EB261B28)
  {
    CGFloat v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *EmojiFoundationLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIKeyboardEmoji.m", 18, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("EMFEmojiToken");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    CGFloat v3 = [MEMORY[0x1E4F28B00] currentHandler];
    double v5 = [NSString stringWithUTF8String:"Class getEMFEmojiTokenClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIKeyboardEmoji.m", 19, @"Unable to find class %s", "EMFEmojiToken");

LABEL_10:
    __break(1u);
  }
  _MergedGlobals_1132 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __EmojiFoundationLibraryCore_block_invoke_1()
{
  uint64_t result = _sl_dlopen();
  qword_1EB261B28 = result;
  return result;
}

uint64_t stateMachineSpec_block_invoke_4_3(uint64_t a1, void *a2)
{
  return [a2 _handleDidMove];
}

void sub_1862A5FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getEMFEmojiCategoryPrepopulated()
{
  uint64_t v6 = 0;
  long long v7 = &v6;
  uint64_t v8 = 0x2020000000;
  id v0 = (void **)getEMFEmojiCategoryPrepopulatedSymbolLoc_ptr;
  uint64_t v9 = getEMFEmojiCategoryPrepopulatedSymbolLoc_ptr;
  if (!getEMFEmojiCategoryPrepopulatedSymbolLoc_ptr)
  {
    id v1 = EmojiFoundationLibrary_0();
    v7[3] = (uint64_t)dlsym(v1, "EMFEmojiCategoryPrepopulated");
    getEMFEmojiCategoryPrepopulatedSymbolLoc_ptr = v7[3];
    id v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    CGFloat v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    double v5 = [NSString stringWithUTF8String:"NSString *getEMFEmojiCategoryPrepopulated(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIKeyboardEmojiCategory.m", 42, @"%s", dlerror());

    __break(1u);
  }
}

void sub_1862A619C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getEMFEmojiCategoryPeople()
{
  uint64_t v6 = 0;
  long long v7 = &v6;
  uint64_t v8 = 0x2020000000;
  id v0 = (void **)getEMFEmojiCategoryPeopleSymbolLoc_ptr;
  uint64_t v9 = getEMFEmojiCategoryPeopleSymbolLoc_ptr;
  if (!getEMFEmojiCategoryPeopleSymbolLoc_ptr)
  {
    id v1 = EmojiFoundationLibrary_0();
    v7[3] = (uint64_t)dlsym(v1, "EMFEmojiCategoryPeople");
    getEMFEmojiCategoryPeopleSymbolLoc_ptr = v7[3];
    id v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    CGFloat v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    double v5 = [NSString stringWithUTF8String:"NSString *getEMFEmojiCategoryPeople(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIKeyboardEmojiCategory.m", 34, @"%s", dlerror());

    __break(1u);
  }
}

void sub_1862A6304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getEMFEmojiCategoryNature()
{
  uint64_t v6 = 0;
  long long v7 = &v6;
  uint64_t v8 = 0x2020000000;
  id v0 = (void **)getEMFEmojiCategoryNatureSymbolLoc_ptr;
  uint64_t v9 = getEMFEmojiCategoryNatureSymbolLoc_ptr;
  if (!getEMFEmojiCategoryNatureSymbolLoc_ptr)
  {
    id v1 = EmojiFoundationLibrary_0();
    v7[3] = (uint64_t)dlsym(v1, "EMFEmojiCategoryNature");
    getEMFEmojiCategoryNatureSymbolLoc_ptr = v7[3];
    id v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    CGFloat v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    double v5 = [NSString stringWithUTF8String:"NSString *getEMFEmojiCategoryNature(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIKeyboardEmojiCategory.m", 35, @"%s", dlerror());

    __break(1u);
  }
}

void sub_1862A646C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getEMFEmojiCategoryFoodAndDrink()
{
  uint64_t v6 = 0;
  long long v7 = &v6;
  uint64_t v8 = 0x2020000000;
  id v0 = (void **)getEMFEmojiCategoryFoodAndDrinkSymbolLoc_ptr;
  uint64_t v9 = getEMFEmojiCategoryFoodAndDrinkSymbolLoc_ptr;
  if (!getEMFEmojiCategoryFoodAndDrinkSymbolLoc_ptr)
  {
    id v1 = EmojiFoundationLibrary_0();
    v7[3] = (uint64_t)dlsym(v1, "EMFEmojiCategoryFoodAndDrink");
    getEMFEmojiCategoryFoodAndDrinkSymbolLoc_ptr = v7[3];
    id v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    CGFloat v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    double v5 = [NSString stringWithUTF8String:"NSString *getEMFEmojiCategoryFoodAndDrink(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIKeyboardEmojiCategory.m", 36, @"%s", dlerror());

    __break(1u);
  }
}

void sub_1862A65D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getEMFEmojiCategoryActivity()
{
  uint64_t v6 = 0;
  long long v7 = &v6;
  uint64_t v8 = 0x2020000000;
  id v0 = (void **)getEMFEmojiCategoryActivitySymbolLoc_ptr;
  uint64_t v9 = getEMFEmojiCategoryActivitySymbolLoc_ptr;
  if (!getEMFEmojiCategoryActivitySymbolLoc_ptr)
  {
    id v1 = EmojiFoundationLibrary_0();
    v7[3] = (uint64_t)dlsym(v1, "EMFEmojiCategoryActivity");
    getEMFEmojiCategoryActivitySymbolLoc_ptr = v7[3];
    id v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    CGFloat v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    double v5 = [NSString stringWithUTF8String:"NSString *getEMFEmojiCategoryActivity(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIKeyboardEmojiCategory.m", 37, @"%s", dlerror());

    __break(1u);
  }
}

void sub_1862A673C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getEMFEmojiCategoryTravelAndPlaces()
{
  uint64_t v6 = 0;
  long long v7 = &v6;
  uint64_t v8 = 0x2020000000;
  id v0 = (void **)getEMFEmojiCategoryTravelAndPlacesSymbolLoc_ptr;
  uint64_t v9 = getEMFEmojiCategoryTravelAndPlacesSymbolLoc_ptr;
  if (!getEMFEmojiCategoryTravelAndPlacesSymbolLoc_ptr)
  {
    id v1 = EmojiFoundationLibrary_0();
    v7[3] = (uint64_t)dlsym(v1, "EMFEmojiCategoryTravelAndPlaces");
    getEMFEmojiCategoryTravelAndPlacesSymbolLoc_ptr = v7[3];
    id v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    CGFloat v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    double v5 = [NSString stringWithUTF8String:"NSString *getEMFEmojiCategoryTravelAndPlaces(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIKeyboardEmojiCategory.m", 38, @"%s", dlerror());

    __break(1u);
  }
}

void sub_1862A68A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getEMFEmojiCategoryObjects()
{
  uint64_t v6 = 0;
  long long v7 = &v6;
  uint64_t v8 = 0x2020000000;
  id v0 = (void **)getEMFEmojiCategoryObjectsSymbolLoc_ptr;
  uint64_t v9 = getEMFEmojiCategoryObjectsSymbolLoc_ptr;
  if (!getEMFEmojiCategoryObjectsSymbolLoc_ptr)
  {
    id v1 = EmojiFoundationLibrary_0();
    v7[3] = (uint64_t)dlsym(v1, "EMFEmojiCategoryObjects");
    getEMFEmojiCategoryObjectsSymbolLoc_ptr = v7[3];
    id v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    CGFloat v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    double v5 = [NSString stringWithUTF8String:"NSString *getEMFEmojiCategoryObjects(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIKeyboardEmojiCategory.m", 39, @"%s", dlerror());

    __break(1u);
  }
}

void sub_1862A6A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getEMFEmojiCategorySymbols()
{
  uint64_t v6 = 0;
  long long v7 = &v6;
  uint64_t v8 = 0x2020000000;
  id v0 = (void **)getEMFEmojiCategorySymbolsSymbolLoc_ptr;
  uint64_t v9 = getEMFEmojiCategorySymbolsSymbolLoc_ptr;
  if (!getEMFEmojiCategorySymbolsSymbolLoc_ptr)
  {
    id v1 = EmojiFoundationLibrary_0();
    v7[3] = (uint64_t)dlsym(v1, "EMFEmojiCategorySymbols");
    getEMFEmojiCategorySymbolsSymbolLoc_ptr = v7[3];
    id v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    CGFloat v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    double v5 = [NSString stringWithUTF8String:"NSString *getEMFEmojiCategorySymbols(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIKeyboardEmojiCategory.m", 40, @"%s", dlerror());

    __break(1u);
  }
}

void sub_1862A6B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getEMFEmojiCategoryFlags()
{
  uint64_t v6 = 0;
  long long v7 = &v6;
  uint64_t v8 = 0x2020000000;
  id v0 = (void **)getEMFEmojiCategoryFlagsSymbolLoc_ptr;
  uint64_t v9 = getEMFEmojiCategoryFlagsSymbolLoc_ptr;
  if (!getEMFEmojiCategoryFlagsSymbolLoc_ptr)
  {
    id v1 = EmojiFoundationLibrary_0();
    v7[3] = (uint64_t)dlsym(v1, "EMFEmojiCategoryFlags");
    getEMFEmojiCategoryFlagsSymbolLoc_ptr = v7[3];
    id v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    CGFloat v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    double v5 = [NSString stringWithUTF8String:"NSString *getEMFEmojiCategoryFlags(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIKeyboardEmojiCategory.m", 41, @"%s", dlerror());

    __break(1u);
  }
}

void sub_1862A6CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getEMFEmojiCategoryClass()
{
  uint64_t v4 = 0;
  double v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)getEMFEmojiCategoryClass_softClass;
  uint64_t v7 = getEMFEmojiCategoryClass_softClass;
  if (!getEMFEmojiCategoryClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getEMFEmojiCategoryClass_block_invoke;
    v3[3] = &unk_1E52D9900;
    v3[4] = &v4;
    __getEMFEmojiCategoryClass_block_invoke((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1862A71F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getEMFEmojiCategoryPrepopulatedSymbolLoc_block_invoke(uint64_t a1)
{
  CGFloat v2 = EmojiFoundationLibrary_0();
  uint64_t result = dlsym(v2, "EMFEmojiCategoryPrepopulated");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getEMFEmojiCategoryPrepopulatedSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *EmojiFoundationLibrary_0()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!EmojiFoundationLibraryCore_frameworkLibrary_0)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    void v4[2] = (void *)3221225472;
    v4[3] = __EmojiFoundationLibraryCore_block_invoke_2;
    void v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_1E52FBA58;
    uint64_t v6 = 0;
    EmojiFoundationLibraryCore_frameworkLibrary_0 = _sl_dlopen();
  }
  id v0 = (void *)EmojiFoundationLibraryCore_frameworkLibrary_0;
  if (!EmojiFoundationLibraryCore_frameworkLibrary_0)
  {
    id v0 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *EmojiFoundationLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIKeyboardEmojiCategory.m", 31, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __EmojiFoundationLibraryCore_block_invoke_2()
{
  uint64_t result = _sl_dlopen();
  EmojiFoundationLibraryCore_frameworkLibrary_0 = result;
  return result;
}

void *__getEMFEmojiCategoryPeopleSymbolLoc_block_invoke(uint64_t a1)
{
  CGFloat v2 = EmojiFoundationLibrary_0();
  uint64_t result = dlsym(v2, "EMFEmojiCategoryPeople");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getEMFEmojiCategoryPeopleSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getEMFEmojiCategoryNatureSymbolLoc_block_invoke(uint64_t a1)
{
  CGFloat v2 = EmojiFoundationLibrary_0();
  uint64_t result = dlsym(v2, "EMFEmojiCategoryNature");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getEMFEmojiCategoryNatureSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getEMFEmojiCategoryFoodAndDrinkSymbolLoc_block_invoke(uint64_t a1)
{
  CGFloat v2 = EmojiFoundationLibrary_0();
  uint64_t result = dlsym(v2, "EMFEmojiCategoryFoodAndDrink");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getEMFEmojiCategoryFoodAndDrinkSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getEMFEmojiCategoryActivitySymbolLoc_block_invoke(uint64_t a1)
{
  CGFloat v2 = EmojiFoundationLibrary_0();
  uint64_t result = dlsym(v2, "EMFEmojiCategoryActivity");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getEMFEmojiCategoryActivitySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getEMFEmojiCategoryTravelAndPlacesSymbolLoc_block_invoke(uint64_t a1)
{
  CGFloat v2 = EmojiFoundationLibrary_0();
  uint64_t result = dlsym(v2, "EMFEmojiCategoryTravelAndPlaces");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getEMFEmojiCategoryTravelAndPlacesSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getEMFEmojiCategoryObjectsSymbolLoc_block_invoke(uint64_t a1)
{
  CGFloat v2 = EmojiFoundationLibrary_0();
  uint64_t result = dlsym(v2, "EMFEmojiCategoryObjects");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getEMFEmojiCategoryObjectsSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getEMFEmojiCategorySymbolsSymbolLoc_block_invoke(uint64_t a1)
{
  CGFloat v2 = EmojiFoundationLibrary_0();
  uint64_t result = dlsym(v2, "EMFEmojiCategorySymbols");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getEMFEmojiCategorySymbolsSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getEMFEmojiCategoryFlagsSymbolLoc_block_invoke(uint64_t a1)
{
  CGFloat v2 = EmojiFoundationLibrary_0();
  uint64_t result = dlsym(v2, "EMFEmojiCategoryFlags");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getEMFEmojiCategoryFlagsSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getEMFEmojiCategoryRecentsSymbolLoc_block_invoke(uint64_t a1)
{
  CGFloat v2 = EmojiFoundationLibrary_0();
  uint64_t result = dlsym(v2, "EMFEmojiCategoryRecents");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getEMFEmojiCategoryRecentsSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void __getEMFEmojiCategoryClass_block_invoke(uint64_t a1)
{
  EmojiFoundationLibrary_0();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("EMFEmojiCategory");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getEMFEmojiCategoryClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    CGFloat v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getEMFEmojiCategoryClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIKeyboardEmojiCategory.m", 32, @"Unable to find class %s", "EMFEmojiCategory");

    __break(1u);
  }
}

void sub_1862A85E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getEMFStringUtilitiesClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)getEMFStringUtilitiesClass_softClass;
  uint64_t v7 = getEMFStringUtilitiesClass_softClass;
  if (!getEMFStringUtilitiesClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getEMFStringUtilitiesClass_block_invoke;
    v3[3] = &unk_1E52D9900;
    v3[4] = &v4;
    __getEMFStringUtilitiesClass_block_invoke((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1862AB540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getEMFEmojiCategoryClass_0()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)getEMFEmojiCategoryClass_softClass_0;
  uint64_t v7 = getEMFEmojiCategoryClass_softClass_0;
  if (!getEMFEmojiCategoryClass_softClass_0)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getEMFEmojiCategoryClass_block_invoke_0;
    v3[3] = &unk_1E52D9900;
    v3[4] = &v4;
    __getEMFEmojiCategoryClass_block_invoke_0((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1862AB700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1862ACA7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
}

void sub_1862B1C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1862B1E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1862B207C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getEMFStringUtilitiesClass_block_invoke(uint64_t a1)
{
  EmojiFoundationLibrary_1();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("EMFStringUtilities");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getEMFStringUtilitiesClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    CGFloat v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getEMFStringUtilitiesClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIKeyboardEmojiCollectionInputView.m", 60, @"Unable to find class %s", "EMFStringUtilities");

    __break(1u);
  }
}

void EmojiFoundationLibrary_1()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!EmojiFoundationLibraryCore_frameworkLibrary_1)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __EmojiFoundationLibraryCore_block_invoke_3;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E52FBB88;
    uint64_t v5 = 0;
    EmojiFoundationLibraryCore_frameworkLibrary_1 = _sl_dlopen();
  }
  if (!EmojiFoundationLibraryCore_frameworkLibrary_1)
  {
    id v1 = [MEMORY[0x1E4F28B00] currentHandler];
    CGFloat v2 = [NSString stringWithUTF8String:"void *EmojiFoundationLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"UIKeyboardEmojiCollectionInputView.m", 58, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __EmojiFoundationLibraryCore_block_invoke_3()
{
  uint64_t result = _sl_dlopen();
  EmojiFoundationLibraryCore_frameworkLibrary_1 = result;
  return result;
}

void __getEMFEmojiCategoryClass_block_invoke_0(uint64_t a1)
{
  EmojiFoundationLibrary_1();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("EMFEmojiCategory");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getEMFEmojiCategoryClass_softClass_0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    CGFloat v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getEMFEmojiCategoryClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIKeyboardEmojiCollectionInputView.m", 59, @"Unable to find class %s", "EMFEmojiCategory");

    __break(1u);
  }
}

void __getEMFEmojiTokenClass_block_invoke_1(uint64_t a1)
{
  EmojiFoundationLibrary_1();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("EMFEmojiToken");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getEMFEmojiTokenClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    CGFloat v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getEMFEmojiTokenClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIKeyboardEmojiCollectionInputView.m", 61, @"Unable to find class %s", "EMFEmojiToken");

    __break(1u);
  }
}

uint64_t _UIIsCoreMaterialStyle(uint64_t a1)
{
  BOOL v1 = (unint64_t)(a1 - 1100) < 3 || (a1 & 0xFFFFFFFFFFFFFFFCLL) == 1200;
  return (unint64_t)(a1 - 6) < 0xF || v1;
}

void _UICoreMaterialUpdateBlurEffectDescriptorForMTMaterial(void *a1, void *a2, void *a3, void *a4)
{
  _OWORD v19[3] = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a4;
  id v9 = a3;
  id v10 = a1;
  uint64_t v11 = [v9 reducedTransperancy];
  if (v7)
  {
    uint64_t v12 = *MEMORY[0x1E4F5C350];
    v19[0] = MEMORY[0x1E4F1CC38];
    uint64_t v13 = *MEMORY[0x1E4F5C358];
    v18[0] = v12;
    v18[1] = v13;
    uint64_t v14 = [NSNumber numberWithBool:v11];
    v18[2] = *MEMORY[0x1E4F5C348];
    v19[1] = v14;
    void v19[2] = v7;
    double v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v19 forKeys:v18 count:3];

    uint64_t v16 = MTMaterialCreateDictionaryRepresentation();
  }
  else
  {
    double v15 = [v9 traitCollection];
    uint64_t v16 = _lookupBlurEffectDescription(v10, v11, [v15 userInterfaceLevel]);
  }
  double v17 = (void *)v16;

  _UICoreMaterialUpdateBlurEffectDescriptorInternal(v17, v9, v8);
}

void _UICoreMaterialUpdateBlurEffectDescriptorForUnsanitizedMTMaterial(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a4;
  id v8 = a3;
  id v9 = a2;
  _UICoreMaterialSanitizeMaterial(a1);
  id v10 = (id)objc_claimAutoreleasedReturnValue();
  _UICoreMaterialUpdateBlurEffectDescriptorForMTMaterial(v10, v9, v8, v7);
}

id _UICoreMaterialSanitizeMaterial(void *a1)
{
  id v1 = a1;
  CGFloat v2 = (void *)_UICoreMaterialSanitizeMaterial_filter;
  if (!_UICoreMaterialSanitizeMaterial_filter)
  {
    uint64_t v3 = objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", *MEMORY[0x1E4F5C308], *MEMORY[0x1E4F5C310], *MEMORY[0x1E4F5C2A8], *MEMORY[0x1E4F5C2B0], *MEMORY[0x1E4F5C318], *MEMORY[0x1E4F5C2C0], *MEMORY[0x1E4F5C2B8], *MEMORY[0x1E4F5C300], *MEMORY[0x1E4F5C2F0], *MEMORY[0x1E4F5C2D0], *MEMORY[0x1E4F5C2E0], *MEMORY[0x1E4F5C2F8], *MEMORY[0x1E4F5C2E8], *MEMORY[0x1E4F5C2C8], *MEMORY[0x1E4F5C2D8], 0);
    long long v4 = (void *)_UICoreMaterialSanitizeMaterial_filter;
    _UICoreMaterialSanitizeMaterial_filter = v3;

    CGFloat v2 = (void *)_UICoreMaterialSanitizeMaterial_filter;
  }
  uint64_t v5 = [v2 member:v1];
  uint64_t v6 = v5;
  if (!v5) {
    uint64_t v5 = v1;
  }
  id v7 = v5;

  return v7;
}

void _UICoreMaterialUpdateVibrancyEffectDescriptorForMTMaterial(void *a1, unint64_t a2, void *a3, void *a4)
{
  id v7 = a4;
  id v8 = a1;
  _lookupVibrancyEffectDescription(v8, a2, [a3 reducedTransperancy]);
  id v9 = (id)objc_claimAutoreleasedReturnValue();

  _UICoreMaterialUpdateVibrancyEffectDescriptorInternal(v9, v7);
}

id getEMFEmojiPreferencesClientClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)getEMFEmojiPreferencesClientClass_softClass;
  uint64_t v7 = getEMFEmojiPreferencesClientClass_softClass;
  if (!getEMFEmojiPreferencesClientClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getEMFEmojiPreferencesClientClass_block_invoke;
    v3[3] = &unk_1E52D9900;
    v3[4] = &v4;
    __getEMFEmojiPreferencesClientClass_block_invoke((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1862BA2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1862BAA18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getEMFEmojiTokenClass_0()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)getEMFEmojiTokenClass_softClass_0;
  uint64_t v7 = getEMFEmojiTokenClass_softClass_0;
  if (!getEMFEmojiTokenClass_softClass_0)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getEMFEmojiTokenClass_block_invoke_2;
    v3[3] = &unk_1E52D9900;
    v3[4] = &v4;
    __getEMFEmojiTokenClass_block_invoke_2((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1862BB088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getEMFEmojiLocaleDataClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)getEMFEmojiLocaleDataClass_softClass;
  uint64_t v7 = getEMFEmojiLocaleDataClass_softClass;
  if (!getEMFEmojiLocaleDataClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getEMFEmojiLocaleDataClass_block_invoke_0;
    v3[3] = &unk_1E52D9900;
    v3[4] = &v4;
    __getEMFEmojiLocaleDataClass_block_invoke_0((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1862BB608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getEMFEmojiPreferencesClientClass_block_invoke(uint64_t a1)
{
  EmojiFoundationLibrary_2();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("EMFEmojiPreferencesClient");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getEMFEmojiPreferencesClientClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    CGFloat v2 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getEMFEmojiPreferencesClientClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIKeyboardEmojiPreferences.m", 31, @"Unable to find class %s", "EMFEmojiPreferencesClient");

    __break(1u);
  }
}

void EmojiFoundationLibrary_2()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!EmojiFoundationLibraryCore_frameworkLibrary_2)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __EmojiFoundationLibraryCore_block_invoke_4;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E52FBCD8;
    uint64_t v5 = 0;
    EmojiFoundationLibraryCore_frameworkLibrary_2 = _sl_dlopen();
  }
  if (!EmojiFoundationLibraryCore_frameworkLibrary_2)
  {
    id v1 = [MEMORY[0x1E4F28B00] currentHandler];
    CGFloat v2 = [NSString stringWithUTF8String:"void *EmojiFoundationLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"UIKeyboardEmojiPreferences.m", 27, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __EmojiFoundationLibraryCore_block_invoke_4()
{
  uint64_t result = _sl_dlopen();
  EmojiFoundationLibraryCore_frameworkLibrary_2 = result;
  return result;
}

void __getEMFEmojiPreferencesClass_block_invoke(uint64_t a1)
{
  EmojiFoundationLibrary_2();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("EMFEmojiPreferences");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getEMFEmojiPreferencesClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    CGFloat v2 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getEMFEmojiPreferencesClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIKeyboardEmojiPreferences.m", 30, @"Unable to find class %s", "EMFEmojiPreferences");

    __break(1u);
  }
}

uint64_t __deviceSupportsARKit_block_invoke()
{
  uint64_t result = MGGetBoolAnswer();
  _MergedGlobals_1135 = result;
  return result;
}

void __getEMFEmojiTokenClass_block_invoke_2(uint64_t a1)
{
  EmojiFoundationLibrary_2();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("EMFEmojiToken");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getEMFEmojiTokenClass_softClass_0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    CGFloat v2 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getEMFEmojiTokenClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIKeyboardEmojiPreferences.m", 28, @"Unable to find class %s", "EMFEmojiToken");

    __break(1u);
  }
}

void __getEMFEmojiLocaleDataClass_block_invoke_0(uint64_t a1)
{
  EmojiFoundationLibrary_2();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("EMFEmojiLocaleData");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getEMFEmojiLocaleDataClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    CGFloat v2 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getEMFEmojiLocaleDataClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIKeyboardEmojiPreferences.m", 29, @"Unable to find class %s", "EMFEmojiLocaleData");

    __break(1u);
  }
}

void sub_1862BE3E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t UIInputAssistantViewIsHidden()
{
  id v0 = +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate];
  id v1 = [v0 systemInputAssistantViewController];
  if ([v1 isInputAssistantItemEmpty])
  {
    CGFloat v2 = [v0 inputViews];
    uint64_t v3 = [v2 isCustomInputView] ^ 1;
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void sub_1862C9B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _UIContextMenuItemPrimaryColor(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = _UIContextMenuGetPlatformMetrics(a1);
  long long v4 = +[UIColor labelColor];
  uint64_t v5 = [v3 itemPrimaryColorProvider];
  uint64_t v6 = (void *)v5;
  if (v5)
  {
    uint64_t v7 = (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v5, a2);

    long long v4 = (void *)v7;
  }

  return v4;
}

void sub_1862CD65C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1862CD8BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1862CE0D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1862D2308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void NotifyVC(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    if ([v1 conformsToProtocol:&unk_1ED5FDA50]) {
      [v2 _sceneDidChange];
    }
    uint64_t v3 = [v2 presentedViewController];
    ((void (*)(void))NotifyVC)();

    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v4 = objc_msgSend(v2, "childViewControllers", 0);
    uint64_t v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)v10;
      do
      {
        uint64_t v8 = 0;
        do
        {
          if (*(void *)v10 != v7) {
            objc_enumerationMutation(v4);
          }
          NotifyVC(*(void *)(*((void *)&v9 + 1) + 8 * v8++));
        }
        while (v6 != v8);
        uint64_t v6 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
      }
      while (v6);
    }
  }
}

void sub_1862D3FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1862D4194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1862DA75C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1862DBC38(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Unwind_Resume(a1);
}

void sub_1862DE05C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1862E2A8C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1862E2CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1862E2DDC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1862E38E8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

Class __getTUIKeyboardPathEffectViewClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB25C3E8)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    void v6[3] = __TextInputUILibraryCore_block_invoke_13;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E52FC138;
    uint64_t v8 = 0;
    qword_1EB25C3E8 = _sl_dlopen();
  }
  if (!qword_1EB25C3E8)
  {
    uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v4 = [NSString stringWithUTF8String:"void *TextInputUILibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIInputWindowController.m", 75, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("TUIKeyboardPathEffectView");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getTUIKeyboardPathEffectViewClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIInputWindowController.m", 76, @"Unable to find class %s", "TUIKeyboardPathEffectView");

LABEL_10:
    __break(1u);
  }
  qword_1EB25C3E0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __TextInputUILibraryCore_block_invoke_13()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25C3E8 = result;
  return result;
}

void __TIGetNotificationsFromKeyboardValue_block_invoke()
{
  id v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  [v0 _configureKey:@"NotificationsFromKeyboard" domain:@"com.apple.keyboard" defaultValue:MEMORY[0x1E4F1CC28]];
}

void __TIGetAlwaysConvertToSceneCoordinatesValue_block_invoke()
{
  id v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  [v0 _configureKey:@"AlwaysConvertToSceneCoordinates" domain:@"com.apple.keyboard" defaultValue:MEMORY[0x1E4F1CC28]];
}

void __TIGetAlwaysNotConvertToSceneCoordinatesValue_block_invoke()
{
  id v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  [v0 _configureKey:@"AlwaysNotConvertToSceneCoordinates" domain:@"com.apple.keyboard" defaultValue:MEMORY[0x1E4F1CC28]];
}

uint64_t SpringBoardServicesLibraryCore()
{
  if (!SpringBoardServicesLibraryCore_frameworkLibrary_1) {
    SpringBoardServicesLibraryCore_frameworkLibrary_1 = _sl_dlopen();
  }
  return SpringBoardServicesLibraryCore_frameworkLibrary_1;
}

uint64_t getSBSAcquireFocusPreventingFullScreenPresentationAssertionSymbolLoc()
{
  uint64_t v3 = 0;
  long long v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getSBSAcquireFocusPreventingFullScreenPresentationAssertionSymbolLoc_ptr;
  uint64_t v6 = getSBSAcquireFocusPreventingFullScreenPresentationAssertionSymbolLoc_ptr;
  if (!getSBSAcquireFocusPreventingFullScreenPresentationAssertionSymbolLoc_ptr)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getSBSAcquireFocusPreventingFullScreenPresentationAssertionSymbolLoc_block_invoke;
    v2[3] = &unk_1E52D9900;
    v2[4] = &v3;
    __getSBSAcquireFocusPreventingFullScreenPresentationAssertionSymbolLoc_block_invoke(v2);
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1862E4E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __SpringBoardServicesLibraryCore_block_invoke_4()
{
  uint64_t result = _sl_dlopen();
  SpringBoardServicesLibraryCore_frameworkLibrary_1 = result;
  return result;
}

void *__getSBSAcquireFocusPreventingFullScreenPresentationAssertionSymbolLoc_block_invoke(void *a1)
{
  uint64_t v2 = SpringBoardServicesLibraryCore();
  if (v2)
  {
    uint64_t v3 = (void *)v2;
  }
  else
  {
    a1 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"void *SpringBoardServicesLibrary(void)"];
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIInputWindowController.m", 83, @"%s", 0);

    __break(1u);
    free(v5);
  }
  uint64_t result = dlsym(v3, "SBSAcquireFocusPreventingFullScreenPresentationAssertion");
  *(void *)(*(void *)(a1[4] + 8) + 24) = result;
  getSBSAcquireFocusPreventingFullScreenPresentationAssertionSymbolLoc_ptr = *(void *)(*(void *)(a1[4] + 8) + 24);
  return result;
}

void sub_1862E698C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1862ED00C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 104));
  _Unwind_Resume(a1);
}

Class __getTUIInputAssistantHostViewClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB261BA0)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    void v6[3] = __TextInputUILibraryCore_block_invoke_14;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E52FC2A0;
    uint64_t v8 = 0;
    qword_1EB261BA0 = _sl_dlopen();
  }
  if (!qword_1EB261BA0)
  {
    uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v4 = [NSString stringWithUTF8String:"void *TextInputUILibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIInputWindowControllerHosting.m", 42, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("TUIInputAssistantHostView");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getTUIInputAssistantHostViewClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIInputWindowControllerHosting.m", 43, @"Unable to find class %s", "TUIInputAssistantHostView");

LABEL_10:
    __break(1u);
  }
  _MergedGlobals_1137 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __TextInputUILibraryCore_block_invoke_14()
{
  uint64_t result = _sl_dlopen();
  qword_1EB261BA0 = result;
  return result;
}

id _UIKBEffectsForStyle(uint64_t a1, char a2)
{
  v42[1] = *MEMORY[0x1E4F143B8];
  int v4 = 1;
  if (!_AXSEnhanceBackgroundContrastEnabled() && (a2 & 1) == 0)
  {
    uint64_t v5 = +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate];
    int v4 = [v5 takingSnapshot];
  }
  uint64_t v6 = 2039;
  if (((a1 == 2030) & v4) == 0) {
    uint64_t v6 = a1;
  }
  long long v7 = (void *)MEMORY[0x1E4F1CBF0];
  switch(v6)
  {
    case 3900:
      uint64_t v8 = +[UIBlurEffect effectWithBlurRadius:20.0];
      v34[0] = v8;
      uint64_t v9 = +[UIColorEffect colorEffectSaturate:2.0];
      v34[1] = v9;
      long long v22 = 0uLL;
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      long long v21 = 0x3FEAE147AE147AE1uLL;
      *(void *)&long long v23 = 0;
      *((void *)&v23 + 1) = 0x3FEAE147AE147AE1;
      long long v24 = 0u;
      long long v25 = 0u;
      uint64_t v27 = 0;
      long long v26 = 0x3FEAE147AE147AE1uLL;
      long long v30 = xmmword_186B9A760;
      int64x2_t v31 = vdupq_n_s64(0x3FC47AE147AE147BuLL);
      uint64_t v32 = 0x3FC47AE147AE147BLL;
      long long v10 = +[UIColorEffect colorEffectMatrix:&v21];
      v34[2] = v10;
      long long v11 = (void *)MEMORY[0x1E4F1C978];
      long long v12 = v34;
      goto LABEL_19;
    case 3901:
      if (v4)
      {
        uint64_t v8 = +[UIColor colorWithRed:0.8184 green:0.8359 blue:0.8603 alpha:1.0];
        uint64_t v9 = +[UIVisualEffect effectCompositingColor:v8];
        CGRect v40 = v9;
        uint64_t v13 = (void *)MEMORY[0x1E4F1C978];
        uint64_t v14 = &v40;
        goto LABEL_16;
      }
      uint64_t v8 = +[UIBlurEffect effectWithBlurRadius:30.0];
      v39[0] = v8;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      long long v21 = xmmword_186B9A800;
      long long v22 = xmmword_186B9A810;
      long long v23 = xmmword_186B9A820;
      long long v24 = xmmword_186B9A830;
      long long v25 = xmmword_186B9A840;
      long long v26 = xmmword_186B9A850;
      long long v30 = xmmword_186B9A860;
      int64x2_t v31 = (int64x2_t)xmmword_186B9A870;
      uint64_t v32 = 0;
      uint64_t v9 = +[UIColorEffect colorEffectMatrix:&v21];
      v39[1] = v9;
      uint64_t v13 = (void *)MEMORY[0x1E4F1C978];
      uint64_t v14 = (void **)v39;
      goto LABEL_25;
    case 3902:
      if (v4)
      {
        uint64_t v8 = +[UIColor colorWithRed:0.9324 green:0.9414 blue:0.964 alpha:1.0];
        uint64_t v9 = +[UIVisualEffect effectCompositingColor:v8];
        CGRect v38 = v9;
        uint64_t v13 = (void *)MEMORY[0x1E4F1C978];
        uint64_t v14 = &v38;
        goto LABEL_16;
      }
      uint64_t v8 = +[UIBlurEffect effectWithBlurRadius:20.0];
      v37[0] = v8;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      long long v21 = xmmword_186B9A780;
      long long v22 = xmmword_186B9A790;
      long long v23 = xmmword_186B9A7A0;
      long long v24 = xmmword_186B9A7B0;
      long long v25 = xmmword_186B9A7C0;
      long long v26 = xmmword_186B9A7D0;
      long long v30 = xmmword_186B9A7E0;
      int64x2_t v31 = (int64x2_t)xmmword_186B9A7F0;
      uint64_t v32 = 0;
      uint64_t v9 = +[UIColorEffect colorEffectMatrix:&v21];
      v37[1] = v9;
      uint64_t v13 = (void *)MEMORY[0x1E4F1C978];
      uint64_t v14 = (void **)v37;
LABEL_25:
      uint64_t v18 = 2;
      goto LABEL_26;
    case 3903:
      goto LABEL_28;
    case 3904:
      uint64_t v8 = +[UIImage kitImageNamed:@"systemVariableBlurMask.png"];
      double v15 = +[UIScreen mainScreen];
      [v15 scale];
      double v17 = v16;

      uint64_t v9 = +[UIBlurEffect _effectWithVariableBlurRadius:v8 imageMask:0 scale:40.0 / v17 allowingAXAdaptation:1.0];
      v42[0] = v9;
      uint64_t v13 = (void *)MEMORY[0x1E4F1C978];
      uint64_t v14 = (void **)v42;
      goto LABEL_16;
    case 3905:
      uint64_t v8 = +[UIBlurEffect effectWithBlurRadius:45.0];
      v41[0] = v8;
      uint64_t v9 = +[UIColorEffect colorEffectSaturate:1.4];
      v41[1] = v9;
      uint64_t v13 = (void *)MEMORY[0x1E4F1C978];
      uint64_t v14 = (void **)v41;
      goto LABEL_25;
    default:
      if (v6 == 2030)
      {
        uint64_t v8 = +[UIBlurEffect effectWithBlurRadius:20.0];
        v36[0] = v8;
        uint64_t v9 = +[UIColorEffect colorEffectSaturate:1.8];
        v36[1] = v9;
        long long v22 = 0uLL;
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        long long v21 = 0x3FD147AE147AE148uLL;
        *(void *)&long long v23 = 0;
        *((void *)&v23 + 1) = 0x3FD147AE147AE148;
        long long v24 = 0u;
        long long v25 = 0u;
        uint64_t v27 = 0;
        long long v26 = 0x3FD147AE147AE148uLL;
        long long v30 = xmmword_186B9A770;
        int64x2_t v31 = vdupq_n_s64(0x3FC57DBF487FCB92uLL);
        uint64_t v32 = 0x3FE75C28F5C28F5CLL;
        long long v10 = +[UIColorEffect colorEffectMatrix:&v21];
        v36[2] = v10;
        long long v11 = (void *)MEMORY[0x1E4F1C978];
        long long v12 = v36;
LABEL_19:
        uint64_t v19 = 3;
LABEL_20:
        long long v7 = [v11 arrayWithObjects:v12 count:v19];

        goto LABEL_27;
      }
      if (v6 != 2039)
      {
        if (!os_variant_has_internal_diagnostics())
        {
          long long v7 = (void *)MEMORY[0x1E4F1CBF0];
          goto LABEL_28;
        }
        uint64_t v8 = +[UIBlurEffect effectWithBlurRadius:20.0];
        v33[0] = v8;
        uint64_t v9 = +[UIColor redColor];
        long long v10 = +[UIColorEffect colorEffectMultiply:v9];
        v33[1] = v10;
        long long v11 = (void *)MEMORY[0x1E4F1C978];
        long long v12 = v33;
        uint64_t v19 = 2;
        goto LABEL_20;
      }
      uint64_t v8 = +[UIColor colorWithWhite:0.04 alpha:0.988];
      uint64_t v9 = +[UIVisualEffect effectCompositingColor:v8];
      uint64_t v35 = v9;
      uint64_t v13 = (void *)MEMORY[0x1E4F1C978];
      uint64_t v14 = &v35;
LABEL_16:
      uint64_t v18 = 1;
LABEL_26:
      long long v7 = [v13 arrayWithObjects:v14 count:v18];
LABEL_27:

LABEL_28:
      return v7;
  }
}

void __TIGetShowDebugBackdropValue_block_invoke()
{
  id v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  [v0 _configureKey:@"ShowDebugBackdrop" domain:@"com.apple.keyboard" defaultValue:MEMORY[0x1E4F1CC28]];
}

void sub_1862F65F4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1862F6694(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id TIGetKeyboardOOPUsingEndInputSessionCompletionValue()
{
  if (TIGetKeyboardOOPUsingEndInputSessionCompletionValue_onceToken != -1) {
    dispatch_once(&TIGetKeyboardOOPUsingEndInputSessionCompletionValue_onceToken, &__block_literal_global_1458_0);
  }
  id v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  uint64_t v1 = [v0 valueForPreferenceKey:@"KeyboardOOPUsingEndInputSessionCompletion"];

  return v1;
}

void sub_1862FCA80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void UIKeyboardSetSplit(uint64_t a1)
{
  id v2 = +[UIKeyboardImpl activeInstance];
  [v2 setSplit:a1 animated:1];
}

void UIKeyboardSetUndocked(int a1)
{
  if (a1)
  {
    if (+[UIKeyboardImpl isFloating]) {
      +[UIKeyboardImpl floatingPersistentOffset];
    }
    else {
      +[UIPeripheralHost defaultUndockedOffset];
    }
    double v3 = v1;
    double v4 = v2;
  }
  else
  {
    double v3 = *MEMORY[0x1E4F1DAD8];
    double v4 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
  }
  id v5 = +[UIPeripheralHost sharedInstance];
  objc_msgSend(v5, "setUndockedWithOffset:animated:", 1, v3, v4);
}

void UIKeyboardSetSplitAndUndocked(uint64_t a1)
{
  id v2 = +[UIKeyboardSplitControlMenu sharedInstance];
  [v2 setSplitAndUndocked:a1];
}

uint64_t UIKeyboardSetLoadsAddressBook(uint64_t result)
{
  loadsAddressBoouint64_t k = result;
  return result;
}

uint64_t UIKeyboardLoadsAddressBook()
{
  return loadsAddressBook;
}

void UIKeyboardEnableAutomaticAppearanceForCanvas(void *a1)
{
  id v1 = [a1 keyboardSceneDelegate];
  [v1 setAutomaticAppearanceEnabled:1];
}

void UIKeyboardEnableAutomaticAppearanceForWindowScene(void *a1)
{
  id v1 = [a1 keyboardSceneDelegate];
  [v1 setAutomaticAppearanceEnabled:1];
}

void UIKeyboardDisableAutomaticAppearanceForCanvas(void *a1)
{
  id v1 = [a1 keyboardSceneDelegate];
  [v1 setAutomaticAppearanceEnabled:0];
}

void UIKeyboardDisableAutomaticAppearanceForWindowScene(void *a1)
{
  id v1 = [a1 keyboardSceneDelegate];
  [v1 setAutomaticAppearanceEnabled:0];
}

uint64_t UIKeyboardEnableAutomaticAppearance()
{
  return +[UIKeyboardSceneDelegate performOnControllers:&__block_literal_global_1360_0];
}

uint64_t __UIKeyboardEnableAutomaticAppearance_block_invoke(uint64_t a1, void *a2)
{
  return [a2 setAutomaticAppearanceEnabled:1];
}

uint64_t UIKeyboardDisableAutomaticAppearance()
{
  return +[UIKeyboardSceneDelegate performOnControllers:&__block_literal_global_1362_2];
}

uint64_t __UIKeyboardDisableAutomaticAppearance_block_invoke(uint64_t a1, void *a2)
{
  return [a2 setAutomaticAppearanceEnabled:0];
}

void UIKeyboardOrderInAutomatic()
{
  id v0 = +[UIPeripheralHost sharedInstance];
  [v0 orderInAutomatic];
}

void UIKeyboardOrderInAutomaticFromDirectionWithDuration(uint64_t a1, double a2)
{
  id v4 = +[UIPeripheralHost sharedInstance];
  [v4 orderInAutomaticFromDirection:a1 withDuration:a2];
}

void UIKeyboardOrderOutAutomatic()
{
  id v0 = +[UIPeripheralHost sharedInstance];
  [v0 orderOutAutomatic];
}

void UIKeyboardOrderOutAutomaticToDirectionWithDuration(uint64_t a1, double a2)
{
  id v4 = +[UIPeripheralHost sharedInstance];
  [v4 orderOutAutomaticToDirection:a1 withDuration:a2];
}

void UIKeyboardOrderInAutomaticSkippingAnimation()
{
  id v0 = +[UIPeripheralHost sharedInstance];
  [v0 orderInAutomaticSkippingAnimation];
}

void UIKeyboardOrderOutAutomaticSkippingAnimation()
{
  id v0 = +[UIPeripheralHost sharedInstance];
  [v0 orderOutAutomaticSkippingAnimation];
}

uint64_t UIKeyboardAutomaticIsOnScreen()
{
  id v0 = +[UIPeripheralHost sharedInstance];
  uint64_t v1 = [v0 isOnScreen];

  return v1;
}

uint64_t UIKeyboardAutomaticIsOffScreen()
{
  id v0 = +[UIPeripheralHost sharedInstance];
  uint64_t v1 = [v0 isOffScreen];

  return v1;
}

void UIKeyboardPrepareForRotationToOrientation(void *a1, uint64_t a2)
{
  id v3 = a1;
  id v4 = +[UIPeripheralHost sharedInstance];
  [v4 prepareForRotationOfKeyboard:v3 toOrientation:a2];
}

void UIKeyboardRotateToOrientation(void *a1, uint64_t a2)
{
  id v3 = a1;
  id v4 = +[UIPeripheralHost sharedInstance];
  [v4 rotateKeyboard:v3 toOrientation:a2];
}

void UIKeyboardFinishRotation(void *a1)
{
  id v1 = a1;
  id v2 = +[UIPeripheralHost sharedInstance];
  [v2 finishRotationOfKeyboard:v1];
}

void UIKeyboardAutomaticPrepareForRotationToOrientation(uint64_t a1)
{
  id v2 = +[UIPeripheralHost sharedInstance];
  [v2 prepareForRotationToOrientation:a1];
}

void UIKeyboardAutomaticRotateToOrientation(uint64_t a1)
{
  id v2 = +[UIPeripheralHost sharedInstance];
  [v2 rotateToOrientation:a1];
}

void UIKeyboardAutomaticFinishRotation()
{
  id v0 = +[UIPeripheralHost sharedInstance];
  [v0 finishRotation];
}

uint64_t UIKeyboardIsAutomaticAppearanceEnabled()
{
  id v0 = +[UIPeripheralHost sharedInstance];
  uint64_t v1 = [v0 automaticAppearanceEnabled];

  return v1;
}

void UIKeyboardForceOrderInAutomatic()
{
  id v0 = +[UIPeripheralHost sharedInstance];
  [v0 forceOrderInAutomatic];
}

void UIKeyboardForceOrderOutAutomatic()
{
  id v0 = +[UIPeripheralHost sharedInstance];
  [v0 forceOrderOutAutomatic];
}

void UIKeyboardForceOrderInAutomaticAnimated(uint64_t a1)
{
  id v2 = +[UIPeripheralHost sharedInstance];
  [v2 forceOrderInAutomaticAnimated:a1];
}

void UIKeyboardForceOrderOutAutomaticAnimated(uint64_t a1)
{
  id v2 = +[UIPeripheralHost sharedInstance];
  [v2 forceOrderOutAutomaticAnimated:a1];
}

void UIKeyboardForceOrderInAutomaticFromDirectionWithDuration(uint64_t a1, double a2)
{
  id v4 = +[UIPeripheralHost sharedInstance];
  [v4 forceOrderInAutomaticFromDirection:a1 withDuration:a2];
}

void UIKeyboardForceOrderOutAutomaticToDirectionWithDuration(uint64_t a1, double a2)
{
  id v4 = +[UIPeripheralHost sharedInstance];
  [v4 forceOrderOutAutomaticToDirection:a1 withDuration:a2];
}

id _UIHardwareKeyboardLog()
{
  if (qword_1EB25C4C0 != -1) {
    dispatch_once(&qword_1EB25C4C0, &__block_literal_global_1444);
  }
  id v0 = (void *)qword_1EB25C4B8;
  return v0;
}

void __TIGetKeyboardOOPValue_block_invoke()
{
  id v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  [v0 _configureKey:@"KeyboardOOP" domain:@"com.apple.keyboard" defaultValue:MEMORY[0x1E4F1CC28]];
}

void __TIGetKeyboardOOPUsingEndInputSessionCompletionValue_block_invoke()
{
  id v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  [v0 _configureKey:@"KeyboardOOPUsingEndInputSessionCompletion" domain:@"com.apple.keyboard" defaultValue:MEMORY[0x1E4F1CC38]];
}

void __TIGetExtendInputUIValue_block_invoke()
{
  id v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  [v0 _configureKey:@"ExtendInputUI" domain:@"com.apple.keyboard" defaultValue:MEMORY[0x1E4F1CC38]];
}

Class __getTUIKeyboardPathEffectViewClass_block_invoke_0(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB25C4D8)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    void v6[3] = __TextInputUILibraryCore_block_invoke_15;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E52FC440;
    uint64_t v8 = 0;
    qword_1EB25C4D8 = _sl_dlopen();
  }
  if (!qword_1EB25C4D8)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    id v4 = [NSString stringWithUTF8String:"void *TextInputUILibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIKeyboard.m", 93, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("TUIKeyboardPathEffectView");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    id v5 = [NSString stringWithUTF8String:"Class getTUIKeyboardPathEffectViewClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIKeyboard.m", 94, @"Unable to find class %s", "TUIKeyboardPathEffectView");

LABEL_10:
    __break(1u);
  }
  qword_1EB25C4D0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __TextInputUILibraryCore_block_invoke_15()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25C4D8 = result;
  return result;
}

id _dictionaryFromUISceneOpenURLOptions(void *a1)
{
  id v1 = a1;
  id v2 = [MEMORY[0x1E4F1CA60] dictionary];
  id v3 = [v1 sourceApplication];
  [v2 setValue:v3 forKey:@"UIApplicationOpenURLOptionsSourceApplicationKey"];

  id v4 = [v1 annotation];
  [v2 setValue:v4 forKey:@"UIApplicationOpenURLOptionsAnnotationKey"];

  id v5 = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(v1, "openInPlace"));
  [v2 setValue:v5 forKey:@"UIApplicationOpenURLOptionsOpenInPlaceKey"];

  uint64_t v6 = [v1 _sourceProcessHandle];

  if (v6)
  {
    long long v7 = [v1 _sourceProcessHandle];
    [v2 setValue:v7 forKey:@"_UIApplicationOpenURLOptionsSourceProcessHandleKey"];
  }
  if ([v1 _contentOwner])
  {
    uint64_t v8 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v1, "_contentOwner"));
    [v2 setValue:v8 forKey:@"_UIApplicationOpenURLOptionsManagedContentKey"];
  }
  uint64_t v9 = (void *)[v2 copy];

  return v9;
}

void sub_186300DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _filteredCandidates(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 count])
  {
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = ___filteredCandidates_block_invoke;
    v8[3] = &unk_1E52FC4D8;
    id v9 = v4;
    id v5 = [v3 indexesOfObjectsPassingTest:v8];
    uint64_t v6 = [v3 objectsAtIndexes:v5];
  }
  else
  {
    uint64_t v6 = (void *)MEMORY[0x1E4F1CBF0];
  }

  return v6;
}

unint64_t ___smartReplyPredictionsFromList_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (objc_opt_respondsToSelector()) {
    unint64_t v3 = ((unint64_t)[v2 candidateProperty] >> 1) & 1;
  }
  else {
    unint64_t v3 = 0;
  }

  return v3;
}

uint64_t ___filteredCandidates_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

BOOL ___listByRemovingSmartReplyPredictions_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  BOOL v3 = (objc_opt_respondsToSelector() & 1) == 0 || ([v2 candidateProperty] & 2) == 0;

  return v3;
}

uint64_t _UITouchAuthenticationIsEnabledForCurrentProcess()
{
  if (qword_1EB261BD0 != -1) {
    dispatch_once(&qword_1EB261BD0, &__block_literal_global_352);
  }
  return _MergedGlobals_1139;
}

void sub_186302234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

double MillimeterSizeToPointSize()
{
  id v0 = +[UIScreen mainScreen];
  [v0 _nativePointsPerMillimeter];
  double v2 = v1;

  return v2 * 4.96247727;
}

double _UIKBGetDockItemTouchPaddingForCurrentDevice()
{
  id v0 = +[UIScreen mainScreen];
  unint64_t v1 = [v0 _screenType];

  if (v1 != -1 && _UIScreenIsPhyiscallyLargePhone(v1)) {
    _UIScreenScaleForType(v1);
  }
  double v2 = +[UIScreen mainScreen];
  [v2 _nativePointsPerMillimeter];
  double v4 = v3;

  return v4 * -2.162;
}

void sub_186304EF0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void __activateActionListItem_block_invoke(uint64_t a1, uint64_t a2)
{
  if (off_1EB256BF8)
  {
    if (*((_DWORD *)off_1EB256BF8 + 160) == 1) {
      double v3 = (char *)off_1EB256BF8 + 648;
    }
    else {
      double v3 = 0;
    }
  }
  else
  {
    double v3 = 0;
  }
  double v4 = -[UIUpdateInfo initWithUpdateParameters:]([UIUpdateInfo alloc], (uint64_t)v3);
  (*(void (**)(void))(*(void *)(a2 + 8) + 16))();
}

uint64_t __highFidelityDevice_block_invoke()
{
  uint64_t result = MGIsDeviceOneOfType();
  if (result) {
    _MergedGlobals_1140 = 1;
  }
  return result;
}

void sub_18630C258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id getAFUIPanelClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)qword_1EB25A030;
  uint64_t v7 = qword_1EB25A030;
  if (!qword_1EB25A030)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getAFUIPanelClass_block_invoke;
    v3[3] = &unk_1E52D9900;
    v3[4] = &v4;
    __getAFUIPanelClass_block_invoke((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18630C350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18630D6F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  objc_destroyWeak(v16);
  objc_destroyWeak((id *)(v17 - 56));
  _Unwind_Resume(a1);
}

void sub_18630DEB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18630E0B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186310280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_186312280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

uint64_t observerCallback()
{
  return [(id)qword_1EB259F38 handleObserverCallback];
}

BOOL _UIGetUseTwoFingerPhone()
{
  if (_UIInternalPreferencesRevisionOnce != -1) {
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_5_8);
  }
  int v0 = _UIInternalPreferencesRevisionVar;
  if (_UIInternalPreferencesRevisionVar < 1
    || (int v3 = _UIInternalPreference_UseTwoFingerPhone,
        _UIInternalPreferencesRevisionVar == _UIInternalPreference_UseTwoFingerPhone))
  {
    BOOL v1 = 0;
  }
  else
  {
    do
    {
      BOOL v1 = v0 < v3;
      if (v0 < v3) {
        break;
      }
      _UIInternalPreferenceSync(v0, &_UIInternalPreference_UseTwoFingerPhone, @"UseTwoFingerPhone", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
      int v3 = _UIInternalPreference_UseTwoFingerPhone;
    }
    while (v0 != _UIInternalPreference_UseTwoFingerPhone);
  }
  return byte_1EB256ED4 && v1;
}

void sub_186323460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  _Block_object_dispose((const void *)(v16 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1863238AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getAFUIPanelClass_block_invoke(uint64_t a1)
{
  if (!qword_1EB25A038) {
    qword_1EB25A038 = _sl_dlopen();
  }
  Class result = objc_getClass("AFUIPanel");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25A030 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __AutoFillUILibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25A038 = result;
  return result;
}

void __TIGetVerticalScrollingInEmojiPopoverValue_block_invoke()
{
  id v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  [v0 _configureKey:@"VerticalScrollingInEmojiPopover" domain:@"com.apple.keyboard" defaultValue:MEMORY[0x1E4F1CC28]];
}

Class __getKFAViewControllerClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB25A050)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    void v6[3] = __KeyboardFeedbackAssistantLibraryCore_block_invoke;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E52FC750;
    uint64_t v8 = 0;
    qword_1EB25A050 = _sl_dlopen();
  }
  if (!qword_1EB25A050)
  {
    int v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *KeyboardFeedbackAssistantLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIKeyboardImpl.m", 312, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("KFAViewController");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    int v3 = [MEMORY[0x1E4F28B00] currentHandler];
    id v5 = [NSString stringWithUTF8String:"Class getKFAViewControllerClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIKeyboardImpl.m", 313, @"Unable to find class %s", "KFAViewController");

LABEL_10:
    __break(1u);
  }
  qword_1EB25A048 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __KeyboardFeedbackAssistantLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25A050 = result;
  return result;
}

void *__getSBSTagTouchForTypingMenuSymbolLoc_block_invoke_0(void *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1EB25A060)
  {
    v5[1] = (void *)MEMORY[0x1E4F143A8];
    v5[2] = (void *)3221225472;
    v5[3] = __SpringBoardServicesLibraryCore_block_invoke_5;
    void v5[4] = &__block_descriptor_40_e5_v8__0l;
    void v5[5] = v5;
    long long v6 = xmmword_1E52FC768;
    uint64_t v7 = 0;
    qword_1EB25A060 = _sl_dlopen();
  }
  uint64_t v2 = (void *)qword_1EB25A060;
  if (!qword_1EB25A060)
  {
    a1 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v2 = [NSString stringWithUTF8String:"void *SpringBoardServicesLibrary(void)"];
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, @"UIKeyboardImpl.m", 289, @"%s", v5[0]);

    __break(1u);
    goto LABEL_7;
  }
  int v3 = v5[0];
  if (v5[0]) {
LABEL_7:
  }
    free(v3);
  uint64_t result = dlsym(v2, "SBSTagTouchForTypingMenu");
  *(void *)(*(void *)(a1[4] + 8) + 24) = result;
  off_1EB25A058 = *(_UNKNOWN **)(*(void *)(a1[4] + 8) + 24);
  return result;
}

uint64_t __SpringBoardServicesLibraryCore_block_invoke_5()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25A060 = result;
  return result;
}

void sub_186329E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18632A050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18632A818(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 232), 8);
  _Block_object_dispose((const void *)(v1 - 168), 8);
  _Unwind_Resume(a1);
}

void sub_18632C9D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_18632CC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18632CE04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18632D7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18633077C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186330D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186331270(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_186331940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,id location)
{
  objc_destroyWeak(v33);
  objc_destroyWeak(&location);
  _Block_object_dispose((const void *)(v34 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1863324B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,id location,char a32)
{
  objc_destroyWeak(v32);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose((const void *)(v33 - 144), 8);
  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__278(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__279(uint64_t a1)
{
}

void sub_186332D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  _Block_object_dispose((const void *)(v21 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1863331D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1863338C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  objc_destroyWeak(v33);
  _Block_object_dispose(&a33, 8);
  objc_destroyWeak((id *)(v34 - 176));
  _Block_object_dispose((const void *)(v34 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_186333B14(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_186334120(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1863342F4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_186334CCC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1863355B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  objc_destroyWeak(v38);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a38, 8);
  _Block_object_dispose((const void *)(v39 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_186335B10(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1863364E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186336C08(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_186336E90(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_186337440(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_18633933C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

id UIKeyboardRomanAccentVariants(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = NSString;
  id v6 = a2;
  uint64_t v7 = [v5 stringWithFormat:@"Roman-Accent-%@", a1];
  uint64_t v8 = UIKeyboardVariants(v7, v6, a3);

  return v8;
}

id UIKeyboardVariants(void *a1, void *a2, uint64_t a3)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  id v51 = a1;
  id v4 = a2;
  double v47 = [MEMORY[0x1E4F28B88] characterSetWithCharactersInString:@" "];
  if (!UIKeyboardVariants___cache)
  {
    id v5 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v6 = (void *)UIKeyboardVariants___cache;
    UIKeyboardVariants___cache = (uint64_t)v5;
  }
  uint64_t v7 = [MEMORY[0x1E4F28E78] string];
  [v7 appendString:v4];
  [v7 appendString:@":"];
  [v7 appendString:v51];
  objc_msgSend(v7, "appendFormat:", @":%d", a3);
  objc_msgSend(v7, "appendFormat:", @":%ld", UIKeyboardGetCurrentIdiom());
  if ((a3 & 8) != 0)
  {
    long long v75 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v78 = 0u;
    id v8 = (id)UIKeyboardActiveInputModes;
    uint64_t v9 = [v8 countByEnumeratingWithState:&v75 objects:v80 count:16];
    if (v9)
    {
      uint64_t v10 = *(void *)v76;
      do
      {
        for (uint64_t i = 0; i != v9; ++i)
        {
          if (*(void *)v76 != v10) {
            objc_enumerationMutation(v8);
          }
          [v7 appendString:@":"];
          uint64_t v12 = TIInputModeGetLanguageWithRegion();
          [v7 appendString:v12];
        }
        uint64_t v9 = [v8 countByEnumeratingWithState:&v75 objects:v80 count:16];
      }
      while (v9);
    }
  }
  else
  {
    id v8 = 0;
  }
  uint64_t v13 = [MEMORY[0x1E4F1CA20] preferredLocale];
  CGFloat v50 = [v13 objectForKey:*MEMORY[0x1E4F1C400]];

  if (v50)
  {
    [v7 appendString:@":"];
    [v7 appendString:v50];
  }
  uint64_t v14 = [(id)UIKeyboardVariants___cache objectForKey:v7];
  if (v14)
  {
    id v15 = v14;
  }
  else
  {
    if ([v51 hasPrefix:@"Roman-Accent-"])
    {
      uint64_t v16 = [v51 length];
      uint64_t v48 = [@"Roman-Accent-" length];
      uint64_t v45 = v16 - [@"Roman-Accent-" length];
      uint64_t v17 = [v51 rangeOfString:@"-" options:2 range:v48];
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 3221225472;
      aBlock[2] = __UIKeyboardVariants_block_invoke;
      aBlock[3] = &unk_1E52FCE88;
      uint64_t v74 = v16;
      id v18 = v51;
      id v73 = v18;
      uint64_t v19 = (uint64_t (**)(void *, uint64_t))_Block_copy(aBlock);
      if (v17 == 0x7FFFFFFFFFFFFFFFLL)
      {
LABEL_21:
        CGFloat v20 = 0;
        uint64_t v21 = v45;
      }
      else
      {
        while ((v19[2](v19, v17) & 1) == 0)
        {
          uint64_t v17 = objc_msgSend(v18, "rangeOfString:options:range:", @"-", 2, v17 + 1, v16 - (v17 + 1));
          if (v17 == 0x7FFFFFFFFFFFFFFFLL) {
            goto LABEL_21;
          }
        }
        CGFloat v20 = [v18 substringToIndex:v17];
        uint64_t v21 = v17 - v48;
      }
      uint64_t v22 = objc_msgSend(v18, "substringWithRange:", v48, v21);
    }
    else
    {
      CGFloat v20 = 0;
      uint64_t v22 = 0;
    }
    double v49 = [MEMORY[0x1E4F1CA60] dictionary];
    long long v23 = [MEMORY[0x1E4F1CA48] array];
    long long v24 = [MEMORY[0x1E4F1CA48] array];
    CGFloat v44 = (void *)v22;
    uint64_t v66 = 0;
    double v67 = &v66;
    uint64_t v68 = 0x3032000000;
    double v69 = __Block_byref_object_copy__134;
    CGFloat v70 = __Block_byref_object_dispose__134;
    id v71 = 0;
    v58[0] = MEMORY[0x1E4F143A8];
    v58[1] = 3221225472;
    v58[2] = __UIKeyboardVariants_block_invoke_2;
    v58[3] = &unk_1E52FCEB0;
    id v59 = v51;
    id v25 = v20;
    id v60 = v25;
    BOOL v65 = (a3 & 0x20) != 0;
    id v61 = v23;
    id v62 = v47;
    id v46 = v24;
    id v63 = v46;
    double v64 = &v66;
    id v26 = v61;
    uint64_t v27 = v44;
    uint64_t v28 = (void (**)(void *, void *, void))_Block_copy(v58);
    if (a3)
    {
      uint64_t v29 = TIInputModeGetBaseLanguage();
      long long v30 = [NSString stringWithFormat:@"%@_%@", v29, v50];
      v28[2](v28, v30, 0);
    }
    if ((a3 & 2) != 0) {
      v28[2](v28, v4, 1);
    }
    if ((a3 & 4) != 0) {
      v28[2](v28, @"default", 0);
    }
    if ((a3 & 8) != 0)
    {
      id v43 = v26;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      id v31 = v8;
      uint64_t v32 = [v31 countByEnumeratingWithState:&v54 objects:v79 count:16];
      if (v32)
      {
        uint64_t v33 = *(void *)v55;
        do
        {
          for (uint64_t j = 0; j != v32; ++j)
          {
            if (*(void *)v55 != v33) {
              objc_enumerationMutation(v31);
            }
            uint64_t v35 = *(void **)(*((void *)&v54 + 1) + 8 * j);
            if ((UIKeyboardInputModesEqual(v35, v4) & 1) == 0) {
              v28[2](v28, v35, 0);
            }
          }
          uint64_t v32 = [v31 countByEnumeratingWithState:&v54 objects:v79 count:16];
        }
        while (v32);
      }

      uint64_t v27 = v44;
      id v26 = v43;
    }
    if (v27)
    {
      uint64_t v36 = [v26 indexOfObject:v27];
      if (v36 != 0x7FFFFFFFFFFFFFFFLL)
      {
        if ((a3 & 0x10) != 0)
        {
          objc_msgSend(v26, "removeObjectsInRange:", v36, objc_msgSend(v26, "count") - v36);
          objc_msgSend(v46, "removeObjectsInRange:", v36, objc_msgSend(v26, "count") - v36);
        }
        else
        {
          double v53 = [v26 objectAtIndex:v36];
          [v26 removeObjectAtIndex:v36];
          [v26 insertObject:v53 atIndex:0];
          double v37 = [v46 objectAtIndex:v36];
          [v46 removeObjectAtIndex:v36];
          [v46 insertObject:v37 atIndex:0];
        }
      }
    }
    if (![(id)v67[5] caseInsensitiveCompare:@"left"]
      || ![(id)v67[5] caseInsensitiveCompare:@"strictly-left"]
      || ![(id)v67[5] caseInsensitiveCompare:@"fixed-left"])
    {
      objc_msgSend(v26, "_kb_reverse");
      objc_msgSend(v46, "_kb_reverse");
    }
    uint64_t v38 = [v26 indexOfObject:@"Đ"];
    uint64_t v39 = [v26 indexOfObject:@"Ð"];
    if (v38 != 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v40 = v39;
      if (v39 != 0x7FFFFFFFFFFFFFFFLL)
      {
        [v26 replaceObjectAtIndex:v38 withObject:@"đ"];
        [v26 replaceObjectAtIndex:v40 withObject:@"ð"];
      }
    }
    [v49 setObject:v26 forKey:@"Keycaps"];
    [v49 setObject:v46 forKey:@"Strings"];
    uint64_t v41 = v67[5];
    if (!v41)
    {
      v67[5] = (uint64_t)&stru_1ED0E84C0;
      uint64_t v41 = v67[5];
    }
    [v49 setObject:v41 forKey:@"Direction"];
    if (v49) {
      [(id)UIKeyboardVariants___cache setObject:v49 forKey:v7];
    }
    id v15 = v49;

    _Block_object_dispose(&v66, 8);
  }

  return v15;
}

void sub_18633A3FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

uint64_t __UIKeyboardVariants_block_invoke(uint64_t a1, uint64_t a2)
{
  if ((unint64_t)(a2 + 1) >= *(void *)(a1 + 40)) {
    return 0;
  }
  objc_msgSend(*(id *)(a1 + 32), "characterAtIndex:");
  return TICharIsAlphaNumeric();
}

void __UIKeyboardVariants_block_invoke_2(uint64_t a1, void *a2, int a3)
{
  id v20 = a2;
  id v5 = UIKeyboardLocalizedObject(*(void **)(a1 + 32), v20, 0, 0, 0);
  if (*(void *)(a1 + 40))
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      uint64_t v6 = UIKeyboardLocalizedObject(*(void **)(a1 + 40), v20, 0, 0, 0);

      id v5 = (void *)v6;
    }
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    BOOL v7 = a3 && !*(unsigned char *)(a1 + 80) && [*(id *)(a1 + 48) count] != 0;
    id v8 = [v5 objectForKeyedSubscript:@"Keycaps"];
    uint64_t v9 = [v8 componentsSeparatedByCharactersInSet:*(void *)(a1 + 56)];

    uint64_t v10 = [v5 objectForKeyedSubscript:@"Strings"];
    long long v11 = [v10 componentsSeparatedByCharactersInSet:*(void *)(a1 + 56)];

    uint64_t v12 = [v9 count];
    if (v12 == [v11 count])
    {
      if ([v9 count])
      {
        uint64_t v13 = 0;
        while (1)
        {
          uint64_t v14 = [v9 objectAtIndexedSubscript:v13];
          id v15 = [v11 objectAtIndexedSubscript:v13];
          if (!*(unsigned char *)(a1 + 80)
            && (([*(id *)(a1 + 48) containsObject:v14] & 1) != 0
             || ([*(id *)(a1 + 64) containsObject:v15] & 1) != 0))
          {
            goto LABEL_19;
          }
          uint64_t v16 = *(void **)(a1 + 48);
          if (!v7) {
            break;
          }
          [v16 insertObject:v14 atIndex:0];
          [*(id *)(a1 + 64) insertObject:v15 atIndex:0];
          BOOL v7 = 1;
LABEL_20:

          if (++v13 >= (unint64_t)[v9 count]) {
            goto LABEL_21;
          }
        }
        [v16 addObject:v14];
        [*(id *)(a1 + 64) addObject:v15];
LABEL_19:
        BOOL v7 = 0;
        goto LABEL_20;
      }
LABEL_21:
      if (!*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40))
      {
        uint64_t v17 = [v5 objectForKeyedSubscript:@"Direction"];
        uint64_t v18 = *(void *)(*(void *)(a1 + 72) + 8);
        uint64_t v19 = *(void **)(v18 + 40);
        *(void *)(v18 + 40) = v17;
      }
    }
    else
    {
      NSLog(&cfstr_KeycapsAndStri.isa, v20, *(void *)(a1 + 32));
    }
  }
}

id _insertAdditionalPopup(void *a1, void *a2, int a3)
{
  id v5 = a1;
  id v6 = a2;
  if (v6)
  {
    BOOL v7 = [v5 objectForKey:@"Keycaps"];
    id v8 = (void *)[v7 mutableCopy];

    uint64_t v9 = [v5 objectForKey:@"Strings"];
    uint64_t v10 = (void *)[v9 mutableCopy];

    if ([v8 containsObject:v6])
    {
      id v11 = v5;
    }
    else
    {
      if (a3)
      {
        [v8 insertObject:v6 atIndex:0];
        [v10 insertObject:v6 atIndex:0];
      }
      else
      {
        [v8 addObject:v6];
        [v10 addObject:v6];
      }
      uint64_t v12 = (void *)MEMORY[0x1E4F1CA60];
      uint64_t v13 = [v5 objectForKey:@"Direction"];
      objc_msgSend(v12, "dictionaryWithObjectsAndKeys:", v13, @"Direction", v8, @"Keycaps", v10, @"Strings", 0);
      id v11 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    id v11 = v5;
  }

  return v11;
}

id UIKeyboardTopLevelDomainVariants(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (![v3 length])
  {
    uint64_t v4 = UIKeyboardGetCurrentInputMode();

    id v3 = (id)v4;
  }
  id v5 = UIKeyboardVariants(@"UI-TopLevelDomain", v3, a2);
  id v6 = v5;
  if ((a2 & 8) != 0)
  {
    id v8 = UIKeyboardGetDomainForCurrentLocale();
    _insertAdditionalPopup(v6, v8, 0);
    id v7 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v7 = v5;
  }

  return v7;
}

id UIKeyboardCurrencyVariants(uint64_t a1, void *a2)
{
  id v3 = NSString;
  id v4 = a2;
  id v5 = [v3 stringWithFormat:@"UI-Currency-%@", a1];
  id v6 = UIKeyboardVariants(v5, v4, 15);

  id v7 = UIKeyboardGetCurrentInputMode();
  id v8 = UIKeyboardLocalizedString(@"UI-PrimaryCurrencySign", v7, 0, 0);

  uint64_t v9 = _insertAdditionalPopup(v6, v8, 1);

  return v9;
}

id UIKeyboardLocalizedString(void *a1, void *a2, void *a3, void *a4)
{
  id v4 = UIKeyboardLocalizedObject(a1, a2, a3, a4, 1);
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v5 = v4;
  }
  else {
    id v5 = 0;
  }
  id v6 = v5;

  return v6;
}

id UIKeyboardLocalizedObject(void *a1, void *a2, void *a3, void *a4, int a5)
{
  id v8 = a1;
  id v9 = a2;
  id v32 = a3;
  id v10 = a4;
  if (!v9)
  {
    id v11 = +[UIKeyboardImpl activeInstance];
    uint64_t v12 = [v11 textInputTraits];
    int v13 = [v12 useInterfaceLanguageForLocalization];

    if (v13)
    {
      uint64_t v14 = UIKeyboardGetCurrentUILanguage();
      id v15 = TIGetDefaultInputModesForLanguage();

      if ([v15 count])
      {
        id v9 = [v15 objectAtIndex:0];

        if (v9) {
          goto LABEL_8;
        }
      }
      else
      {
      }
    }
    UIKeyboardGetCurrentInputMode();
    id v9 = (id)objc_claimAutoreleasedReturnValue();
  }
LABEL_8:
  uint64_t v16 = TIInputModeGetComponentsFromIdentifier();
  uint64_t v17 = *MEMORY[0x1E4F1C438];
  uint64_t v18 = [v16 objectForKey:*MEMORY[0x1E4F1C438]];
  uint64_t v19 = *MEMORY[0x1E4F1C470];
  id v20 = [v16 objectForKey:*MEMORY[0x1E4F1C470]];
  uint64_t v21 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithObjectsAndKeys:", v18, v17, 0);
  uint64_t v22 = v21;
  if (v20) {
    [v21 setObject:v20 forKey:v19];
  }
  long long v23 = [MEMORY[0x1E4F1CA20] localeIdentifierFromComponents:v22];

  long long v24 = [v16 objectForKey:*MEMORY[0x1E4F1C400]];
  id v25 = [v16 objectForKeyedSubscript:@"rg"];

  if (v25)
  {
    id v26 = [MEMORY[0x1E4F1CA20] localeWithLocaleIdentifier:v9];
    uint64_t v27 = [v26 regionCode];

    long long v24 = (void *)v27;
  }
  uint64_t v28 = [v16 objectForKey:*MEMORY[0x1E4F1C498]];
  uint64_t v29 = LookupInternationalObject(v8, v23, v24, v28, v10, a5);

  return v29;
}

id LookupInternationalObject(void *a1, void *a2, void *a3, void *a4, void *a5, int a6)
{
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;
  id v14 = a4;
  id v15 = a5;
  if (v11)
  {
    if ([v13 length]) {
      [NSString stringWithFormat:@"%@-%@-%@", v12, v13, v14];
    }
    else {
    uint64_t v17 = [NSString stringWithFormat:@"%@-%@", v12, v14, v33];
    }
    uint64_t v18 = UIKeyboardGetCurrentUILanguage();
    uint64_t v19 = NSString;
    CurrentIdiouint64_t m = UIKeyboardGetCurrentIdiom();
    uint64_t v21 = @"WITHOUT";
    if (a6) {
      uint64_t v21 = @"WITH";
    }
    uint64_t v38 = (void *)v17;
    uint64_t v22 = [v19 stringWithFormat:@"%@-%ld-%@-%@-Defaults", v17, CurrentIdiom, v18, v21];
    if (!_MergedGlobals_1142)
    {
      id v23 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      long long v24 = (void *)_MergedGlobals_1142;
      _MergedGlobals_1142 = (uint64_t)v23;
    }
    id v25 = (void *)qword_1EB261C00;
    if (!qword_1EB261C00)
    {
      id v26 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      uint64_t v27 = (void *)qword_1EB261C00;
      qword_1EB261C00 = (uint64_t)v26;

      id v25 = (void *)qword_1EB261C00;
    }
    uint64_t v28 = [v25 objectForKey:v22];
    if (v28)
    {
      id v16 = v15;
    }
    else
    {
      uint64_t v29 = [(id)_MergedGlobals_1142 objectForKey:v22];
      if (!v29)
      {
        id v37 = v12;
        id v36 = v13;
        id v35 = v14;
        id v34 = v18;
        UIKeyboardGetCurrentIdiom();
        TILoadMergedKeyboardPlistForLocale();
        uint64_t v29 = (__CFString *)objc_claimAutoreleasedReturnValue();

        if (v29) {
          long long v30 = v29;
        }
        else {
          long long v30 = @"sentinel";
        }
        id v31 = &_MergedGlobals_1142;
        if (!v29) {
          id v31 = &qword_1EB261C00;
        }
        [(id)*v31 setObject:v30 forKey:v22];
      }
      id v16 = [(__CFString *)v29 objectForKey:v11];
      if (!v16) {
        id v16 = v15;
      }
    }
  }
  else
  {
    id v16 = 0;
  }

  return v16;
}

__CFString *UIKeyboardLocalizedReturnKeyName(uint64_t a1)
{
  uint64_t v1 = KeyboardReturnKeyStringConstantFromReturnKeyType(a1);
  if ([v1 hasSuffix:@".png"])
  {
    uint64_t v2 = v1;
  }
  else
  {
    if (v1)
    {
      UIKeyboardLocalizedString(v1, 0, 0, 0);
      id v3 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      id v3 = 0;
    }
    id v4 = @"return";
    if (v3) {
      id v4 = v3;
    }
    uint64_t v2 = v4;
  }
  return v2;
}

__CFString *KeyboardReturnKeyStringConstantFromReturnKeyType(uint64_t a1)
{
  if ((int)a1 >= 0) {
    uint64_t v1 = a1;
  }
  else {
    uint64_t v1 = -a1;
  }
  switch(v1)
  {
    case 0:
      uint64_t result = @"UI-Return";
      break;
    case 1:
      uint64_t result = @"UI-Go";
      break;
    case 2:
    case 6:
    case 8:
      uint64_t result = @"UI-Search";
      break;
    case 3:
      uint64_t result = @"UI-Join";
      break;
    case 4:
      uint64_t result = @"UI-Next";
      break;
    case 5:
      uint64_t result = @"UI-Route";
      break;
    case 7:
      uint64_t result = @"UI-Send";
      break;
    case 9:
      uint64_t result = @"UI-Done";
      break;
    case 10:
      uint64_t result = @"UI-EmergencyCall";
      break;
    case 11:
      uint64_t result = @"UI-Continue";
      break;
    default:
      id v3 = @"UI-Buy";
      if (v1 != 126) {
        id v3 = 0;
      }
      if (v1 == 124) {
        uint64_t result = @"UI-Speak";
      }
      else {
        uint64_t result = v3;
      }
      break;
  }
  return result;
}

__CFString *UIKeyboardLocalizedReturnKeyNameForLocale(uint64_t a1, void *a2)
{
  return UIKeyboardLocalizedReturnKeyNameForLocaleIncludingDefaults(a1, a2, 0);
}

__CFString *UIKeyboardLocalizedReturnKeyNameForLocaleIncludingDefaults(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  id v6 = [v5 languageCode];
  id v7 = [v5 scriptCode];
  id v8 = [v5 variantCode];

  id v9 = KeyboardReturnKeyStringConstantFromReturnKeyType(a1);
  id v10 = v9;
  if (v9)
  {
    id v11 = LookupInternationalObject(v9, v6, v7, v8, @"return", a3);
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v12 = v11;
    }
    else {
      id v12 = 0;
    }
    id v13 = v12;
  }
  else
  {
    id v13 = @"return";
  }

  return v13;
}

id _UIKeyboardTaskBreadcrumbEmpty()
{
  if (_MergedGlobals_1143 != -1) {
    dispatch_once(&_MergedGlobals_1143, &__block_literal_global_358);
  }
  id v0 = _Block_copy((const void *)qword_1EB261C10);
  return v0;
}

void sub_18633C000(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18633CA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18633D88C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  objc_destroyWeak(v17);
  _Block_object_dispose(&a16, 8);
  objc_destroyWeak(v16);
  objc_destroyWeak((id *)(v18 - 56));
  _Unwind_Resume(a1);
}

void __TIGetVerticalScrollingInEmojiKeyboardValue_block_invoke()
{
  id v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  [v0 _configureKey:@"VerticalScrollingInEmojiKeyboard" domain:@"com.apple.keyboard" defaultValue:MEMORY[0x1E4F1CC28]];
}

void sub_186342084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18634600C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186349AB4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_18634B1B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t UIAssistantViewAllowsMinimization()
{
  id v0 = +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate];
  uint64_t v1 = [v0 systemInputAssistantViewController];

  uint64_t v2 = [v1 supportsCompactStyle];
  return v2;
}

uint64_t UIAssistantViewVisualStateForPointInRect(char a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  if (a1) {
    return 3;
  }
  int v14 = UIAssistantViewAllowsMinimization();
  v26.origin.CGFloat x = a2;
  v26.origin.CGFloat y = a3;
  v26.size.CGFloat width = a4;
  v26.size.CGFloat height = a5;
  CGFloat v15 = CGRectGetWidth(v26) * 0.25;
  v27.origin.CGFloat x = a2;
  v27.origin.CGFloat y = a3;
  v27.size.CGFloat width = a4;
  v27.size.CGFloat height = a5;
  CGFloat v16 = CGRectGetHeight(v27) * 0.25;
  v28.origin.CGFloat x = a2;
  v28.origin.CGFloat y = a3;
  v28.size.CGFloat width = a4;
  v28.size.CGFloat height = a5;
  CGRect v29 = CGRectInset(v28, v15, v16);
  if (v14)
  {
    v25.CGFloat x = a6;
    v25.CGFloat y = a7;
    if (CGRectContainsPoint(v29, v25)) {
      return 1;
    }
  }
  v30.origin.CGFloat x = a2;
  v30.origin.CGFloat y = a3;
  v30.size.CGFloat width = a4;
  v30.size.CGFloat height = a5;
  double MidX = CGRectGetMidX(v30);
  v31.origin.CGFloat x = a2;
  v31.origin.CGFloat y = a3;
  v31.size.CGFloat width = a4;
  v31.size.CGFloat height = a5;
  double MaxY = CGRectGetMaxY(v31);
  v32.origin.CGFloat x = a2;
  v32.origin.CGFloat y = a3;
  v32.size.CGFloat width = a4;
  v32.size.CGFloat height = a5;
  double MaxX = CGRectGetMaxX(v32);
  v33.origin.CGFloat x = a2;
  v33.origin.CGFloat y = a3;
  v33.size.CGFloat width = a4;
  v33.size.CGFloat height = a5;
  double v23 = CGRectGetMaxY(v33);
  v34.origin.CGFloat x = a2;
  v34.origin.CGFloat y = a3;
  v34.size.CGFloat width = a4;
  v34.size.CGFloat height = a5;
  double MinX = CGRectGetMinX(v34);
  v35.origin.CGFloat x = a2;
  v35.origin.CGFloat y = a3;
  v35.size.CGFloat width = a4;
  v35.size.CGFloat height = a5;
  double v21 = CGRectGetMaxY(v35);
  UIAssistantViewClosestReferencePointFromPointInRect(a2, a3, a4, a5, a6, a7);
  if (MidX == v19 && MaxY == v20) {
    return 2;
  }
  if (v14 && (MaxX == v19 && v23 == v20 || MinX == v19 && v21 == v20)) {
    return 1;
  }
  else {
    return 2;
  }
}

id UIInputViewSetPlacementFromAssistantViewVisualState(uint64_t a1, uint64_t a2, int a3)
{
  objc_opt_class();
  if ((unint64_t)(a1 - 2) < 2 || a1 == 1)
  {
    id v5 = objc_opt_class();
    if (a3)
    {
LABEL_4:
      id v6 = [v5 placementForDraggingAssistant];
      goto LABEL_7;
    }
  }
  else
  {
    id v5 = 0;
    if (a3) {
      goto LABEL_4;
    }
  }
  id v6 = [v5 placement];
LABEL_7:
  return v6;
}

void UIAssistantViewClosestReferencePointFromPointInRect(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5, double a6)
{
  v21[6] = *MEMORY[0x1E4F143B8];
  CGFloat MaxX = CGRectGetMaxX(*(CGRect *)&a1);
  v22.origin.CGFloat x = a1;
  v22.origin.CGFloat y = a2;
  v22.size.CGFloat width = a3;
  v22.size.CGFloat height = a4;
  CGFloat MaxY = CGRectGetMaxY(v22);
  v23.origin.CGFloat x = a1;
  v23.origin.CGFloat y = a2;
  v23.size.CGFloat width = a3;
  v23.size.CGFloat height = a4;
  CGFloat MinX = CGRectGetMinX(v23);
  v24.origin.CGFloat x = a1;
  v24.origin.CGFloat y = a2;
  v24.size.CGFloat width = a3;
  v24.size.CGFloat height = a4;
  CGFloat v12 = CGRectGetMaxY(v24);
  v25.origin.CGFloat x = a1;
  v25.origin.CGFloat y = a2;
  v25.size.CGFloat width = a3;
  v25.size.CGFloat height = a4;
  CGFloat MidX = CGRectGetMidX(v25);
  v26.origin.CGFloat x = a1;
  v26.origin.CGFloat y = a2;
  v26.size.CGFloat width = a3;
  v26.size.CGFloat height = a4;
  CGFloat v14 = CGRectGetMaxY(v26);
  uint64_t v15 = 0;
  *(CGFloat *)double v21 = MaxX;
  *(CGFloat *)&v21[1] = MaxY;
  *(CGFloat *)&void v21[2] = MinX;
  *(CGFloat *)&v21[3] = v12;
  *(CGFloat *)&v21[4] = MidX;
  *(CGFloat *)&v21[5] = v14;
  double v16 = 3.40282347e38;
  do
  {
    double v17 = sqrt((*(double *)&v21[v15] - a5) * (*(double *)&v21[v15] - a5)+ (*(double *)&v21[v15 + 1] - a6) * (*(double *)&v21[v15 + 1] - a6));
    if (v17 < v16) {
      double v16 = v17;
    }
    v15 += 2;
  }
  while (v15 != 6);
}

void sub_18634F57C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_186351940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void _logRejectedTapAction()
{
  unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("KeyboardDock", &_logRejectedTapAction___s_category);
  if (*(unsigned char *)CategoryCachedImpl)
  {
    uint64_t v1 = *(NSObject **)(CategoryCachedImpl + 8);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v2 = 0;
      _os_log_impl(&dword_1853B0000, v1, OS_LOG_TYPE_ERROR, "Rejected tap outside tapAction boundary", v2, 2u);
    }
  }
}

void _UIInvalidateSwipeActionsLayoutForDecorationViewAtIndexPath(void *a1, void *a2)
{
  v12[1] = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  id v5 = [v3 collectionView];
  if (([v5 _isPerformingReloadData] & 1) == 0)
  {
    if (_UIIsIndexPathValidInCollectionView(v5, v4))
    {
      id v6 = objc_alloc_init((Class)[(id)objc_opt_class() invalidationContextClass]);
      [v6 _setIntent:9];
      v12[0] = v4;
      id v7 = [MEMORY[0x1E4F1C978] arrayWithObjects:v12 count:1];
      [v6 invalidateDecorationElementsOfKind:@"UICollectionViewListLayoutElementKindSwipeActions" atIndexPaths:v7];

      [v3 invalidateLayoutWithContext:v6];
    }
    else
    {
      if (os_variant_has_internal_diagnostics())
      {
        id v9 = __UIFaultDebugAssertLog();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
        {
          int v10 = 138412290;
          id v11 = v4;
          _os_log_fault_impl(&dword_1853B0000, v9, OS_LOG_TYPE_FAULT, "Attempted to invalidate swipe actions layout for invalid decoration index path: %@", (uint8_t *)&v10, 0xCu);
        }
      }
      else
      {
        id v8 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_UIInvalidateSwipeActionsLayoutForDecorationViewAtIndexPath___s_category)+ 8);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          int v10 = 138412290;
          id v11 = v4;
          _os_log_impl(&dword_1853B0000, v8, OS_LOG_TYPE_ERROR, "Attempted to invalidate swipe actions layout for invalid decoration index path: %@", (uint8_t *)&v10, 0xCu);
        }
      }
      [v3 invalidateLayout];
    }
  }
}

void _UIPerformImmediateCollectionViewLayoutAndVisibleCellsUpdate(void *a1)
{
  id v2 = a1;
  uint64_t v1 = [v2 _allowsVisibleCellUpdatesDuringUpdateAnimations];
  [v2 _setAllowsVisibleCellUpdatesDuringUpdateAnimations:1];
  [v2 layoutIfNeeded];
  [v2 _setAllowsVisibleCellUpdatesDuringUpdateAnimations:v1];
}

void _UIUpdateMaskViewClippingFromView(void *a1, void *a2)
{
  id v3 = a2;
  id v6 = [a1 layer];
  id v4 = [v3 layer];

  id v5 = [v4 cornerCurve];
  [v6 setCornerCurve:v5];

  [v4 cornerRadius];
  objc_msgSend(v6, "setCornerRadius:");
  objc_msgSend(v6, "setMaskedCorners:", objc_msgSend(v4, "maskedCorners"));
  [v6 setMasksToBounds:1];
}

void _UIInvalidateSwipeActionsLayoutForItemAtIndexPath(void *a1, void *a2)
{
  v14[1] = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  id v5 = [v3 collectionView];
  if (([v5 _isPerformingReloadData] & 1) == 0)
  {
    if (_UIIsIndexPathValidInCollectionView(v5, v4))
    {
      id v6 = objc_alloc_init((Class)[(id)objc_opt_class() invalidationContextClass]);
      [v6 _setIntent:9];
      v14[0] = v4;
      id v7 = [MEMORY[0x1E4F1C978] arrayWithObjects:v14 count:1];
      [v6 invalidateItemsAtIndexPaths:v7];

      if ((unint64_t)([v5 _globalIndexPathForItemAtIndexPath:v4] - 1) > 0x7FFFFFFFFFFFFFFDLL)
      {
        id v8 = 0;
      }
      else
      {
        id v8 = objc_msgSend(v5, "_indexPathForGlobalIndex:");
      }
      int v10 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:", v4, v8, 0);
      [v6 invalidateDecorationElementsOfKind:@"UICollectionViewListLayoutElementKindBottomSeparator" atIndexPaths:v10];
      [v6 invalidateDecorationElementsOfKind:@"UICollectionViewListLayoutElementKindTopSeparator" atIndexPaths:v10];
      [v3 invalidateLayoutWithContext:v6];
    }
    else
    {
      if (os_variant_has_internal_diagnostics())
      {
        id v11 = __UIFaultDebugAssertLog();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)long long buf = 138412290;
          id v13 = v4;
          _os_log_fault_impl(&dword_1853B0000, v11, OS_LOG_TYPE_FAULT, "Attempted to invalidate swipe actions layout for invalid item index path: %@", buf, 0xCu);
        }
      }
      else
      {
        id v9 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_UIInvalidateSwipeActionsLayoutForItemAtIndexPath___s_category)+ 8);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138412290;
          id v13 = v4;
          _os_log_impl(&dword_1853B0000, v9, OS_LOG_TYPE_ERROR, "Attempted to invalidate swipe actions layout for invalid item index path: %@", buf, 0xCu);
        }
      }
      [v3 invalidateLayout];
    }
  }
}

void _UIUpdateMaskViewFrameForSwipedCellAtIndexPath(void *a1, void *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (([v3 _isPerformingReloadData] & 1) == 0)
  {
    id v5 = [v3 _visibleDecorationViewOfKind:@"UICollectionViewListLayoutElementKindSwipeActions" atIndexPath:v4];
    if (os_variant_has_internal_diagnostics())
    {
      if (!v5)
      {
        CGRect v26 = __UIFaultDebugAssertLog();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_FAULT))
        {
          int v32 = 138412290;
          id v33 = v4;
          _os_log_fault_impl(&dword_1853B0000, v26, OS_LOG_TYPE_FAULT, "Unable to get visible swipe actions view for index path: %@", (uint8_t *)&v32, 0xCu);
        }
      }
    }
    else if (!v5)
    {
      CGRect v29 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB261C78) + 8);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        int v32 = 138412290;
        id v33 = v4;
        _os_log_impl(&dword_1853B0000, v29, OS_LOG_TYPE_ERROR, "Unable to get visible swipe actions view for index path: %@", (uint8_t *)&v32, 0xCu);
      }
    }
    id v6 = [v3 cellForItemAtIndexPath:v4];
    if (os_variant_has_internal_diagnostics())
    {
      if (!v6)
      {
        CGRect v27 = __UIFaultDebugAssertLog();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_FAULT))
        {
          int v32 = 138412290;
          id v33 = v4;
          _os_log_fault_impl(&dword_1853B0000, v27, OS_LOG_TYPE_FAULT, "Unable to get visible cell for index path: %@", (uint8_t *)&v32, 0xCu);
        }
      }
    }
    else if (!v6)
    {
      CGRect v30 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB261C80) + 8);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        int v32 = 138412290;
        id v33 = v4;
        _os_log_impl(&dword_1853B0000, v30, OS_LOG_TYPE_ERROR, "Unable to get visible cell for index path: %@", (uint8_t *)&v32, 0xCu);
      }
    }
    id v7 = -[UIView _safeMaskView](v6);
    if (os_variant_has_internal_diagnostics())
    {
      if (!v7)
      {
        CGRect v28 = __UIFaultDebugAssertLog();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_FAULT))
        {
          int v32 = 138412290;
          id v33 = v4;
          _os_log_fault_impl(&dword_1853B0000, v28, OS_LOG_TYPE_FAULT, "Unable to get mask from cell for index path: %@", (uint8_t *)&v32, 0xCu);
        }
      }
    }
    else if (!v7)
    {
      CGRect v31 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB261C88) + 8);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        int v32 = 138412290;
        id v33 = v4;
        _os_log_impl(&dword_1853B0000, v31, OS_LOG_TYPE_ERROR, "Unable to get mask from cell for index path: %@", (uint8_t *)&v32, 0xCu);
      }
    }
    id v8 = [v5 _outermostLayer];
    [v8 bounds];
    double v10 = v9;
    double v12 = v11;
    double v14 = v13;
    double v16 = v15;
    double v17 = [v6 _outermostLayer];
    objc_msgSend(v8, "convertRect:toLayer:", v17, v10, v12, v14, v16);
    double v19 = v18;
    double v21 = v20;
    double v23 = v22;
    double v25 = v24;

    objc_msgSend(v7, "setCenter:", v19 + v23 * 0.5, v21 + v25 * 0.5);
    [v7 bounds];
    objc_msgSend(v7, "setBounds:");
    _UIUpdateMaskViewClippingFromView(v7, v5);
  }
}

BOOL _UIIsIndexPathValidInCollectionView(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v4 && (uint64_t v6 = [v4 section], v6 < objc_msgSend(v3, "numberOfSections")))
  {
    uint64_t v7 = [v5 item];
    BOOL v8 = v7 < objc_msgSend(v3, "numberOfItemsInSection:", objc_msgSend(v5, "section"));
  }
  else
  {
    BOOL v8 = 0;
  }

  return v8;
}

void sub_186355E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL _UICellAccessoryCustomViewDefaultUsesStandardLayoutWidthForCustomButton(void *a1)
{
  id v1 = a1;
  if (dyld_program_sdk_at_least())
  {
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    void v9[2] = ___UICellAccessoryCustomViewDefaultUsesStandardLayoutWidthForCustomButton_block_invoke;
    void v9[3] = &unk_1E52D9F70;
    id v2 = v1;
    id v10 = v2;
    +[UIView performWithoutAnimation:v9];
    id v3 = [v2 _currentConfiguration];
    id v4 = v3;
    if (v3) {
      [v3 title];
    }
    else {
    uint64_t v7 = [v2 titleForState:0];
    }
    uint64_t v6 = [v7 length];
  }
  else
  {
    id v5 = [v1 titleForState:0];
    uint64_t v6 = [v5 length];
  }
  return v6 == 0;
}

UICellAccessoryPosition UICellAccessoryPositionBeforeAccessoryOfClass(Class accessoryClass)
{
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __UICellAccessoryPositionBeforeAccessoryOfClass_block_invoke;
  aBlock[3] = &__block_descriptor_40_e17_Q16__0__NSArray_8lu32l8;
  void aBlock[4] = accessoryClass;
  id v1 = _Block_copy(aBlock);
  return v1;
}

uint64_t __UICellAccessoryPositionBeforeAccessoryOfClass_block_invoke(uint64_t a1, void *a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __UICellAccessoryPositionBeforeAccessoryOfClass_block_invoke_2;
  v3[3] = &__block_descriptor_40_e32_B32__0__UICellAccessory_8Q16_B24lu32l8;
  v3[4] = *(void *)(a1 + 32);
  uint64_t result = [a2 indexOfObjectPassingTest:v3];
  if (result == 0x7FFFFFFFFFFFFFFFLL) {
    return 0;
  }
  return result;
}

uint64_t __UICellAccessoryPositionBeforeAccessoryOfClass_block_invoke_2()
{
  return objc_opt_isKindOfClass() & 1;
}

UICellAccessoryPosition UICellAccessoryPositionAfterAccessoryOfClass(Class accessoryClass)
{
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __UICellAccessoryPositionAfterAccessoryOfClass_block_invoke;
  aBlock[3] = &__block_descriptor_40_e17_Q16__0__NSArray_8lu32l8;
  void aBlock[4] = accessoryClass;
  id v1 = _Block_copy(aBlock);
  return v1;
}

uint64_t __UICellAccessoryPositionAfterAccessoryOfClass_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __UICellAccessoryPositionAfterAccessoryOfClass_block_invoke_2;
  v7[3] = &__block_descriptor_40_e32_B32__0__UICellAccessory_8Q16_B24lu32l8;
  void v7[4] = *(void *)(a1 + 32);
  uint64_t v4 = [v3 indexOfObjectWithOptions:2 passingTest:v7];
  if (v4 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v5 = [v3 count];
  }
  else {
    uint64_t v5 = v4 + 1;
  }

  return v5;
}

uint64_t __UICellAccessoryPositionAfterAccessoryOfClass_block_invoke_2()
{
  return objc_opt_isKindOfClass() & 1;
}

void sub_18635A020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getLPLinkMetadataClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB261C98)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    void v6[3] = __LinkPresentationLibraryCore_block_invoke;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E52FD668;
    uint64_t v8 = 0;
    qword_1EB261C98 = _sl_dlopen();
  }
  if (!qword_1EB261C98)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *LinkPresentationLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"_UINavigationBarTitleRenamerSession.m", 24, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("LPLinkMetadata");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getLPLinkMetadataClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UINavigationBarTitleRenamerSession.m", 25, @"Unable to find class %s", "LPLinkMetadata");

LABEL_10:
    __break(1u);
  }
  _MergedGlobals_1148 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __LinkPresentationLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB261C98 = result;
  return result;
}

uint64_t _UIGetUIKeyboardTypingSpeedLogger()
{
  if (_UIInternalPreferencesRevisionOnce != -1) {
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_5_8);
  }
  int v0 = _UIInternalPreferencesRevisionVar;
  if (_UIInternalPreferencesRevisionVar < 1
    || (int v3 = _UIInternalPreference_UIKeyboardTypingSpeedLogger,
        _UIInternalPreferencesRevisionVar == _UIInternalPreference_UIKeyboardTypingSpeedLogger))
  {
    BOOL v1 = 1;
  }
  else
  {
    do
    {
      BOOL v1 = v0 >= v3;
      if (v0 < v3) {
        break;
      }
      _UIInternalPreferenceSync(v0, &_UIInternalPreference_UIKeyboardTypingSpeedLogger, @"UIKeyboardTypingSpeedLogger", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
      int v3 = _UIInternalPreference_UIKeyboardTypingSpeedLogger;
    }
    while (v0 != _UIInternalPreference_UIKeyboardTypingSpeedLogger);
  }
  return byte_1EB2576C4 || v1;
}

uint64_t _UIObservationTrackingLoggingEnabled()
{
  if (qword_1EB261CB0 != -1) {
    dispatch_once(&qword_1EB261CB0, &__block_literal_global_3_2);
  }
  return byte_1EB261CA1;
}

uint64_t _UIObservationTrackingFeedbackLoopThreshold()
{
  if (qword_1EB261CC0 != -1) {
    dispatch_once(&qword_1EB261CC0, &__block_literal_global_9_3);
  }
  return qword_1EB261CB8;
}

void _UILogObservationTrackingInvalidation(void *a1, void *a2, void *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  id v6 = a2;
  id v7 = a3;
  uint64_t v8 = *(NSObject **)(__UILogGetCategoryCachedImpl("ObservationTracking", &_UILogObservationTrackingInvalidation___s_category)+ 8);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v9 = @"(unknown)";
    int v10 = 138412802;
    if (v5) {
      uint64_t v9 = v5;
    }
    double v11 = v9;
    __int16 v12 = 2112;
    id v13 = v7;
    __int16 v14 = 2112;
    id v15 = v6;
    _os_log_impl(&dword_1853B0000, v8, OS_LOG_TYPE_ERROR, "Observable object key path '%@' changed; performing invalidation for [%@] of: %@",
      (uint8_t *)&v10,
      0x20u);
  }
}

void UIObservationTrackingFeedbackLoopDetected(void *a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (os_variant_has_internal_diagnostics())
  {
    id v6 = __UIFaultDebugAssertLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
    {
      int v7 = 138412546;
      id v8 = v4;
      __int16 v9 = 2112;
      id v10 = v3;
      _os_log_fault_impl(&dword_1853B0000, v6, OS_LOG_TYPE_FAULT, "Observation tracking feedback loop detected! Make a symbolic breakpoint at UIObservationTrackingFeedbackLoopDetected to catch this in the debugger. Refer to the console logs for details about recent invalidations; you can al"
        "so make a symbolic breakpoint at UIObservationTrackingInvalidated to catch invalidations in the debugger. Object"
        " receiving repeated [%@] invalidations: %@",
        (uint8_t *)&v7,
        0x16u);
    }
  }
  else
  {
    uint64_t v5 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &UIObservationTrackingFeedbackLoopDetected___s_category)
                      + 8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v7 = 138412546;
      id v8 = v4;
      __int16 v9 = 2112;
      id v10 = v3;
      _os_log_impl(&dword_1853B0000, v5, OS_LOG_TYPE_ERROR, "Observation tracking feedback loop detected! Make a symbolic breakpoint at UIObservationTrackingFeedbackLoopDetected to catch this in the debugger. Refer to the console logs for details about recent invalidations; you can al"
        "so make a symbolic breakpoint at UIObservationTrackingInvalidated to catch invalidations in the debugger. Object"
        " receiving repeated [%@] invalidations: %@",
        (uint8_t *)&v7,
        0x16u);
    }
  }
}

uint64_t _UIObservationTrackingInstallCATransactionCommitHandler(uint64_t a1)
{
  return [(id)UIApp _performBlockAfterCATransactionCommits:a1];
}

id _UIPathConvertedToPreviewContainerSpace(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)[a1 copy];
  memset(&v27, 0, sizeof(v27));
  [v3 size];
  double v6 = v5;
  double v8 = v7;
  __int16 v9 = [v3 target];
  [v9 center];
  double v11 = round(v10 - v8 * 0.5);
  double v13 = round(v12 - v6 * 0.5);

  __int16 v14 = [v3 parameters];
  id v15 = [v14 visiblePath];

  v29.origin.CGFloat x = v13;
  v29.origin.CGFloat y = v11;
  v29.size.CGFloat width = v6;
  v29.size.CGFloat height = v8;
  double MinX = CGRectGetMinX(v29);
  if (v15)
  {
    double v17 = [v3 parameters];
    double v18 = [v17 visiblePath];
    [v18 bounds];
    CGFloat v19 = MinX - CGRectGetMinX(v30);
    v31.origin.CGFloat x = v13;
    v31.origin.CGFloat y = v11;
    v31.size.CGFloat width = v6;
    v31.size.CGFloat height = v8;
    double MinY = CGRectGetMinY(v31);
    double v21 = [v3 parameters];
    double v22 = [v21 visiblePath];
    [v22 bounds];
    CGFloat v23 = CGRectGetMinY(v32);
    CGAffineTransformMakeTranslation(&v27, v19, MinY - v23);
  }
  else
  {
    v33.origin.CGFloat x = v13;
    v33.origin.CGFloat y = v11;
    v33.size.CGFloat width = v6;
    v33.size.CGFloat height = v8;
    CGFloat v24 = CGRectGetMinY(v33);
    CGAffineTransformMakeTranslation(&v27, MinX, v24);
  }
  CGAffineTransform v26 = v27;
  [v4 applyTransform:&v26];

  return v4;
}

__n128 _UISizeRespectingTransformsFromPreview(void *a1, double a2, double a3)
{
  id v3 = [a1 target];
  memset(&v14, 0, sizeof(v14));
  id v4 = [v3 container];
  double v5 = [v3 container];
  double v6 = [v5 window];
  _UIGetTransformBetweenViews(v4, v6, 1, (uint64_t)&v14);

  memset(&v13, 0, sizeof(v13));
  if (v3) {
    [v3 transform];
  }
  else {
    memset(&t1, 0, sizeof(t1));
  }
  CGAffineTransform t2 = v14;
  CGAffineTransformConcat(&v13, &t1, &t2);
  float64x2_t v10 = vabsq_f64(vaddq_f64(vmulq_n_f64(*(float64x2_t *)&v13.a, a2), vmulq_n_f64(*(float64x2_t *)&v13.c, a3)));

  return (__n128)v10;
}

void sub_1863696F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _UIRemoteKeyboardsFBSSceneIdentityStringFromSettingsSceneOfWindow(void *a1)
{
  BOOL v1 = [a1 windowScene];
  id v2 = [v1 _settingsScene];

  id v3 = [v2 _FBSScene];

  id v4 = [v3 identityToken];
  double v5 = [v4 stringRepresentation];

  return v5;
}

void sub_18636EBC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18636FF6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1863700AC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void __TIGetHideRemoteKeyboardWindowValue_block_invoke()
{
  id v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  [v0 _configureKey:@"HideRemoteKeyboardWindow" domain:@"com.apple.keyboard" defaultValue:MEMORY[0x1E4F1CC28]];
}

void __TIGetTranslucentKeyboardValue_block_invoke()
{
  id v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  [v0 _configureKey:@"TranslucentKeyboard" domain:@"com.apple.keyboard" defaultValue:MEMORY[0x1E4F1CC28]];
}

void __TIGetKeyboardPlaceholderDebugOverlayValue_block_invoke()
{
  id v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  [v0 _configureKey:@"KeyboardPlaceholderDebugOverlay" domain:@"com.apple.keyboard" defaultValue:MEMORY[0x1E4F1CC28]];
}

Class __getWTWritingToolsControllerClass_block_invoke(uint64_t a1)
{
  if (!qword_1EB25C768) {
    qword_1EB25C768 = _sl_dlopen();
  }
  Class result = objc_getClass("WTWritingToolsController");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25C760 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __WritingToolsUILibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25C768 = result;
  return result;
}

Class __getSTKPrewarmingViewControllerClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB25C778)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    void v6[3] = __StickerKitLibraryCore_block_invoke_1;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E52FD818;
    uint64_t v8 = 0;
    qword_1EB25C778 = _sl_dlopen();
  }
  if (!qword_1EB25C778)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    id v4 = [NSString stringWithUTF8String:"void *StickerKitLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"_UIRemoteKeyboards.m", 82, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("STKPrewarmingViewController");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    double v5 = [NSString stringWithUTF8String:"Class getSTKPrewarmingViewControllerClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UIRemoteKeyboards.m", 83, @"Unable to find class %s", "STKPrewarmingViewController");

LABEL_10:
    __break(1u);
  }
  qword_1EB25C770 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __StickerKitLibraryCore_block_invoke_1()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25C778 = result;
  return result;
}

void sub_186371F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)(v17 - 40));
  _Unwind_Resume(a1);
}

__CFString *_NSStringFromUIPointerLockStatus(uint64_t a1)
{
  if (a1) {
    return @"_UIPointerLockStatusLocked";
  }
  else {
    return @"_UIPointerLockStatusUnlocked";
  }
}

void sub_186374544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1863754F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186376A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_186376CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186376FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186383424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

Class __getAFAnalyticsTurnBasedInstrumentationContextClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB261D30)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    void v6[3] = __AssistantServicesLibraryCore_block_invoke_3;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E52FDAF0;
    uint64_t v8 = 0;
    qword_1EB261D30 = _sl_dlopen();
  }
  if (!qword_1EB261D30)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    id v4 = [NSString stringWithUTF8String:"void *AssistantServicesLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIKBRTIPartner.m", 123, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("AFAnalyticsTurnBasedInstrumentationContext");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    double v5 = [NSString stringWithUTF8String:"Class getAFAnalyticsTurnBasedInstrumentationContextClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIKBRTIPartner.m", 124, @"Unable to find class %s", "AFAnalyticsTurnBasedInstrumentationContext");

LABEL_10:
    __break(1u);
  }
  qword_1EB261D28 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __AssistantServicesLibraryCore_block_invoke_3()
{
  uint64_t result = _sl_dlopen();
  qword_1EB261D30 = result;
  return result;
}

id TIGetDocumentRequestSurroundingGranularityCountValue()
{
  if (TIGetDocumentRequestSurroundingGranularityCountValue_onceToken != -1) {
    dispatch_once(&TIGetDocumentRequestSurroundingGranularityCountValue_onceToken, &__block_literal_global_1095_0);
  }
  id v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  uint64_t v1 = [v0 valueForPreferenceKey:@"DocumentRequestSurroundingGranularityCount"];

  return v1;
}

void __TIGetDocumentRequestSurroundingGranularityCountValue_block_invoke()
{
  id v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  [v0 _configureKey:@"DocumentRequestSurroundingGranularityCount" domain:@"com.apple.keyboard" defaultValue:&unk_1ED3F5508];
}

id TIGetDocumentRequestRectCountBeforeValue()
{
  if (TIGetDocumentRequestRectCountBeforeValue_onceToken != -1) {
    dispatch_once(&TIGetDocumentRequestRectCountBeforeValue_onceToken, &__block_literal_global_1110_0);
  }
  id v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  uint64_t v1 = [v0 valueForPreferenceKey:@"DocumentRequestRectCountBefore"];

  return v1;
}

void __TIGetDocumentRequestRectCountBeforeValue_block_invoke()
{
  id v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  [v0 _configureKey:@"DocumentRequestRectCountBefore" domain:@"com.apple.keyboard" defaultValue:&unk_1ED3F5520];
}

id TIGetDocumentRequestRectCountAfterValue()
{
  if (TIGetDocumentRequestRectCountAfterValue_onceToken != -1) {
    dispatch_once(&TIGetDocumentRequestRectCountAfterValue_onceToken, &__block_literal_global_1120_0);
  }
  id v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  uint64_t v1 = [v0 valueForPreferenceKey:@"DocumentRequestRectCountAfter"];

  return v1;
}

void __TIGetDocumentRequestRectCountAfterValue_block_invoke()
{
  id v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  [v0 _configureKey:@"DocumentRequestRectCountAfter" domain:@"com.apple.keyboard" defaultValue:&unk_1ED3F5538];
}

uint64_t _UIHyperFill()
{
  return catlas_dset_NEWLAPACK();
}

uint64_t _UIHyperFillStride()
{
  return catlas_dset_NEWLAPACK();
}

uint64_t _UIHyperCopy()
{
  return cblas_dcopy_NEWLAPACK();
}

BOOL _UIHyperEqual(const void *a1, const void *a2, uint64_t a3)
{
  return memcmp(a1, a2, 8 * a3) == 0;
}

void _UIHyperAdd(double *__C, const double *__A, const double *a3, vDSP_Length __N)
{
}

void _UIHyperSubtract(double *__C, const double *__A, const double *__B, vDSP_Length __N)
{
}

void _UIHyperMultiply(double *__C, const double *__A, const double *a3, vDSP_Length __N)
{
}

void _UIHyperDivide(double *__C, const double *__A, const double *__B, vDSP_Length __N)
{
}

void _UIHyperScalarMultiply(double *__C, const double *__A, vDSP_Length __N, double a4)
{
  double __B = a4;
  vDSP_vsmulD(__A, 1, &__B, __C, 1, __N);
}

void _UIHyperScalarDivide(double *__C, const double *__A, vDSP_Length __N, double a4)
{
  double __B = a4;
  vDSP_vsdivD(__A, 1, &__B, __C, 1, __N);
}

void _UIHyperScalarMultiplyAdd(double *__D, const double *__A, const double *__C, vDSP_Length __N, double a5)
{
  double __B = a5;
  vDSP_vsmaD(__A, 1, &__B, __C, 1, __D, 1, __N);
}

void _UIHyperScalarMultiplySubtract(double *__D, const double *__A, const double *__C, vDSP_Length __N, double a5)
{
  double __B = a5;
  vDSP_vsmsbD(__A, 1, &__B, __C, 1, __D, 1, __N);
}

void _UIHyperRemainder(double *a1, const double *a2, const double *a3, int a4)
{
  int v4 = a4;
  vvremainder(a1, a2, a3, &v4);
}

void _UIHyperFloor(double *a1, const double *a2, int a3)
{
  int v3 = a3;
  vvfloor(a1, a2, &v3);
}

void _UIHyperCeil(double *a1, const double *a2, int a3)
{
  int v3 = a3;
  vvceil(a1, a2, &v3);
}

void _UIHyperMinimum(double *__C, const double *__A, const double *a3, vDSP_Length __N)
{
}

void _UIHyperMaximum(double *__C, const double *__A, const double *a3, vDSP_Length __N)
{
}

void _UIHyperScalarMinimum(double *__C, const double *__A, vDSP_Length __N, double a4)
{
  double __B = a4;
  vDSP_vminD(__A, 1, &__B, 0, __C, 1, __N);
}

void _UIHyperScalarMaximum(double *__C, const double *__A, vDSP_Length __N, double a4)
{
  double __B = a4;
  vDSP_vmaxD(__A, 1, &__B, 0, __C, 1, __N);
}

double _UIHyperMinimumValue(const double *a1, vDSP_Length __N)
{
  double __C = 0.0;
  vDSP_minvD(a1, 1, &__C, __N);
  return __C;
}

double _UIHyperMaximumValue(const double *a1, vDSP_Length __N)
{
  double __C = 0.0;
  vDSP_maxvD(a1, 1, &__C, __N);
  return __C;
}

double _UIHyperDot(const double *a1, const double *__B, vDSP_Length __N)
{
  double __C = 0.0;
  vDSP_dotprD(a1, 1, __B, 1, &__C, __N);
  return __C;
}

uint64_t _UIHyperMagnitude()
{
  return cblas_dnrm2_NEWLAPACK();
}

void _UIHyperUnit(double *a1, const double *a2, vDSP_Length a3)
{
  cblas_dnrm2_NEWLAPACK();
  double __B = v6;
  vDSP_vsdivD(a2, 1, &__B, a1, 1, a3);
}

double _UIHyperDistanceSquaredTo(const double *a1, const double *__B, vDSP_Length __N)
{
  double __C = 0.0;
  vDSP_distancesqD(a1, 1, __B, 1, &__C, __N);
  return __C;
}

double _UIHyperDistanceTo(const double *a1, const double *__B, vDSP_Length __N)
{
  double __C = 0.0;
  vDSP_distancesqD(a1, 1, __B, 1, &__C, __N);
  return sqrt(__C);
}

void _UIHyperUnitTo(double *__C, const double *__B, const double *a3, vDSP_Length __N)
{
  vDSP_vsubD(__B, 1, a3, 1, __C, 1, __N);
  cblas_dnrm2_NEWLAPACK();
  __BCATransform3D a = v6;
  vDSP_vsdivD(__C, 1, &__Ba, __C, 1, __N);
}

void _UIHyperInterpolate(double *__B, const double *a2, const double *__A, vDSP_Length __N, double a5)
{
  if (__B == a2)
  {
    vDSP_vsubD(__B, 1, __A, 1, __B, 1, __N);
    __BCATransform3D a = 1.0 - a5;
    vDSP_vsmulD(__B, 1, &__Ba, __B, 1, __N);
    vDSP_vsubD(__B, 1, __A, 1, __B, 1, __N);
  }
  else
  {
    vDSP_vsubD(a2, 1, __A, 1, __B, 1, __N);
    __BCATransform3D a = a5;
    vDSP_vsmulD(__B, 1, &__Ba, __B, 1, __N);
    vDSP_vaddD(a2, 1, __B, 1, __B, 1, __N);
  }
}

void _UIHyperExtend(double *a1, const double *__A, const double *a3, vDSP_Length __N, double a5)
{
  double __C = 0.0;
  vDSP_distancesqD(__A, 1, a3, 1, &__C, __N);
  _UIHyperInterpolate(a1, __A, a3, __N, a5 / sqrt(__C));
}

double _UIHyperFractionOfProjectionOnto(const double *a1, const double *__B, vDSP_Length __N)
{
  double __C = 0.0;
  vDSP_dotprD(a1, 1, __B, 1, &__C, __N);
  double v5 = __C;
  double __C = 0.0;
  vDSP_dotprD(__B, 1, __B, 1, &__C, __N);
  return v5 / __C;
}

void _UIHyperProjectionOnto(double *a1, const double *a2, const double *__B, vDSP_Length __N)
{
  __BCATransform3D a = _UIHyperFractionOfProjectionOnto(a2, __B, __N);
  vDSP_vsmulD(__B, 1, &__Ba, a1, 1, __N);
}

void _UIHyperFractionalProjectionOntoHyperplane(double *a1, const double *a2, const double *__B, vDSP_Length __N, double a5)
{
  __BCATransform3D a = -(_UIHyperFractionOfProjectionOnto(a2, __B, __N) * a5);
  vDSP_vsmaD(__B, 1, &__Ba, a2, 1, a1, 1, __N);
}

void _UIHyperProjectionOntoHyperplane(double *a1, const double *a2, const double *a3, vDSP_Length a4)
{
}

uint64_t _UIHyperMatrixVectorMultiply()
{
  return cblas_dgemv_NEWLAPACK();
}

uint64_t _UIHyperProjectionMatrixForBasis(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v1 = cblas_dgemm_NEWLAPACK();
  MEMORY[0x1F4188790](v1);
  dgetrf_NEWLAPACK();
  uint64_t v2 = dgetri_NEWLAPACK();
  MEMORY[0x1F4188790](v2);
  cblas_dgemm_NEWLAPACK();
  return cblas_dgemm_NEWLAPACK();
}

uint64_t _UIHyperKernelBasis(uint64_t a1)
{
  return dlaswp_NEWLAPACK();
}

BOOL _UIHyperIsFinite(const double *a1, vDSP_Length __N)
{
  double __C = 0.0;
  vDSP_minvD(a1, 1, &__C, __N);
  double v2 = fabs(__C);
  return v2 > INFINITY || v2 < INFINITY;
}

id _UIVectorDescription(uint64_t a1, uint64_t a2)
{
  int v4 = [MEMORY[0x1E4F28E78] stringWithString:@"["];
  if (a2)
  {
    unint64_t v5 = 0;
    do
    {
      objc_msgSend(v4, "appendFormat:", @"%g", *(void *)(a1 + 8 * v5));
      if (v5 < a2 - 1) {
        [v4 appendString:@", "];
      }
      ++v5;
    }
    while (a2 != v5);
  }
  [v4 appendString:@"]"];
  return v4;
}

id _UINSUIntegerVectorDescription(uint64_t a1, uint64_t a2)
{
  int v4 = [MEMORY[0x1E4F28E78] stringWithString:@"["];
  if (a2)
  {
    unint64_t v5 = 0;
    do
    {
      objc_msgSend(v4, "appendFormat:", @"%lu", *(void *)(a1 + 8 * v5));
      if (v5 < a2 - 1) {
        [v4 appendString:@", "];
      }
      ++v5;
    }
    while (a2 != v5);
  }
  [v4 appendString:@"]"];
  return v4;
}

id _UIMatrixDescription(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6 = [MEMORY[0x1E4F28E78] stringWithString:@"["];
  if (a3)
  {
    uint64_t v7 = a3;
    unint64_t v8 = 0;
    unint64_t v11 = a3 - 1;
    do
    {
      [v6 appendString:@"["];
      if (a2)
      {
        unint64_t v9 = 0;
        do
        {
          objc_msgSend(v6, "appendFormat:", @"%g", *(void *)(a1 + 8 * v9));
          if (v9 < a2 - 1) {
            [v6 appendString:@", "];
          }
          ++v9;
        }
        while (a2 != v9);
      }
      [v6 appendString:@"]"];
      if (v8 < v11) {
        [v6 appendString:@", "];
      }
      ++v8;
      a1 += 8 * a2;
    }
    while (v8 != v7);
  }
  [v6 appendString:@"]"];
  return v6;
}

void _UIKBRT_ResetSystemUptimeOnResume()
{
  id v1 = [MEMORY[0x1E4F28F80] processInfo];
  [v1 systemUptime];
  *(double *)&sSystemUptimeFromAbsoluteTimeDiff = v0 - CFAbsoluteTimeGetCurrent();
}

void sub_18638DB38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18638E260(void *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a2 == 2)
  {
    id v11 = objc_begin_catch(exc_buf);
    [v10 notifyDelegateOfCancelledTouch:v9];
    NSLog(&cfstr_ExceptionWhenH.isa);

    objc_end_catch();
    JUMPOUT(0x18638E1E8);
  }
  objc_begin_catch(exc_buf);
  JUMPOUT(0x18638E1ECLL);
}

void sub_18638E514(_Unwind_Exception *a1)
{
}

void sub_18638FA3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18638FF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18639087C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _NSTextHighlightColorSchemeForTextFormattingChangeValue(void *a1)
{
  id v1 = a1;
  double v2 = [v1 changeType];

  if (v2 != @"UITextFormattingViewControllerHighlightChange") {
    goto LABEL_2;
  }
  int v4 = [v1 highlight];

  if (v4 == @"UITextFormattingViewControllerHighlightDefault")
  {
    uint64_t v10 = (id *)off_1E52D22E8;
  }
  else
  {
    unint64_t v5 = [v1 highlight];

    if (v5 == @"UITextFormattingViewControllerHighlightPurple")
    {
      uint64_t v10 = (id *)off_1E52D2308;
    }
    else
    {
      double v6 = [v1 highlight];

      if (v6 == @"UITextFormattingViewControllerHighlightPink")
      {
        uint64_t v10 = (id *)off_1E52D2300;
      }
      else
      {
        uint64_t v7 = [v1 highlight];

        if (v7 == @"UITextFormattingViewControllerHighlightOrange")
        {
          uint64_t v10 = (id *)off_1E52D22F8;
        }
        else
        {
          unint64_t v8 = [v1 highlight];

          if (v8 == @"UITextFormattingViewControllerHighlightMint")
          {
            uint64_t v10 = (id *)off_1E52D22F0;
          }
          else
          {
            uint64_t v9 = [v1 highlight];

            if (v9 != @"UITextFormattingViewControllerHighlightBlue")
            {
LABEL_2:
              id v3 = 0;
              goto LABEL_16;
            }
            uint64_t v10 = (id *)off_1E52D22E0;
          }
        }
      }
    }
  }
  id v3 = *v10;
LABEL_16:

  return v3;
}

id _UITextFormattingViewControllerChangeValueClasses()
{
  if (qword_1EB261D80 != -1) {
    dispatch_once(&qword_1EB261D80, &__block_literal_global_377);
  }
  double v0 = (void *)_MergedGlobals_1152;
  return v0;
}

void sub_186392FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186394978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_186395464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v30 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_186397154(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_186397E6C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_186398130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18639AD60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

void sub_18639B81C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_18639C628(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18639CF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double _UIGet_UIKBRT_SetDownTapInterval()
{
  if (_UIInternalPreferencesRevisionOnce != -1) {
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_5_8);
  }
  int v0 = _UIInternalPreferencesRevisionVar;
  double result = 0.04;
  if (_UIInternalPreferencesRevisionVar >= 1)
  {
    int v2 = _UIInternalPreference__UIKBRT_SetDownTapInterval;
    if (_UIInternalPreferencesRevisionVar != _UIInternalPreference__UIKBRT_SetDownTapInterval)
    {
      while (v0 >= v2)
      {
        _UIInternalPreferenceSync(v0, &_UIInternalPreference__UIKBRT_SetDownTapInterval, @"_UIKBRT_SetDownTapInterval", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateDouble);
        int v2 = _UIInternalPreference__UIKBRT_SetDownTapInterval;
        if (v0 == _UIInternalPreference__UIKBRT_SetDownTapInterval) {
          return 0.04;
        }
      }
      return *(double *)&qword_1E8FD4FC0;
    }
  }
  return result;
}

void *__Block_byref_object_copy__108(uint64_t a1, uint64_t a2)
{
  double result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_18639F7B8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_18639FA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1863A0200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1863A263C(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x228], 8);
  _Block_object_dispose(&STACK[0x248], 8);
  _Block_object_dispose(&STACK[0x268], 8);
  _Block_object_dispose((const void *)(v1 - 184), 8);
  _Unwind_Resume(a1);
}

void sub_1863A4DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getIAChannelSmartReplies()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  int v0 = (void **)getIAChannelSmartRepliesSymbolLoc_ptr;
  uint64_t v9 = getIAChannelSmartRepliesSymbolLoc_ptr;
  if (!getIAChannelSmartRepliesSymbolLoc_ptr)
  {
    uint64_t v1 = InputAnalyticsLibrary_0();
    v7[3] = (uint64_t)dlsym(v1, "IAChannelSmartReplies");
    getIAChannelSmartRepliesSymbolLoc_ptr = v7[3];
    int v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    int v2 = *v0;
    id v3 = v2;
  }
  else
  {
    int v4 = [MEMORY[0x1E4F28B00] currentHandler];
    unint64_t v5 = [NSString stringWithUTF8String:"NSString *getIAChannelSmartReplies(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UISmartReplyFeedbackManager.m", 28, @"%s", dlerror());

    __break(1u);
  }
}

void sub_1863A4F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1863A5A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1863A5D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getIAChannelFeedbackService()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  int v0 = (void **)getIAChannelFeedbackServiceSymbolLoc_ptr;
  uint64_t v9 = getIAChannelFeedbackServiceSymbolLoc_ptr;
  if (!getIAChannelFeedbackServiceSymbolLoc_ptr)
  {
    uint64_t v1 = InputAnalyticsLibrary_0();
    v7[3] = (uint64_t)dlsym(v1, "IAChannelFeedbackService");
    getIAChannelFeedbackServiceSymbolLoc_ptr = v7[3];
    int v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    int v2 = *v0;
    id v3 = v2;
  }
  else
  {
    int v4 = [MEMORY[0x1E4F28B00] currentHandler];
    unint64_t v5 = [NSString stringWithUTF8String:"NSString *getIAChannelFeedbackService(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UISmartReplyFeedbackManager.m", 29, @"%s", dlerror());

    __break(1u);
  }
}

void sub_1863A5EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1863A6284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1863A63F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1863A655C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1863A6868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1863A6BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *__getIASignalSmartRepliesComposeFieldInFocusSymbolLoc_block_invoke(uint64_t a1)
{
  int v2 = InputAnalyticsLibrary_0();
  double result = dlsym(v2, "IASignalSmartRepliesComposeFieldInFocus");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getIASignalSmartRepliesComposeFieldInFocusSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *InputAnalyticsLibrary_0()
{
  uint64_t v0 = InputAnalyticsLibraryCore_1();
  if (v0) {
    return (void *)v0;
  }
  uint64_t v1 = [MEMORY[0x1E4F28B00] currentHandler];
  id v3 = [NSString stringWithUTF8String:"void *InputAnalyticsLibrary(void)"];
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v3, @"_UISmartReplyFeedbackManager.m", 24, @"%s", 0);

  __break(1u);
  free(v4);
  return v1;
}

uint64_t InputAnalyticsLibraryCore_1()
{
  if (!InputAnalyticsLibraryCore_frameworkLibrary_1) {
    InputAnalyticsLibraryCore_frameworkLibrary_1 = _sl_dlopen();
  }
  return InputAnalyticsLibraryCore_frameworkLibrary_1;
}

uint64_t __InputAnalyticsLibraryCore_block_invoke_1()
{
  uint64_t result = _sl_dlopen();
  InputAnalyticsLibraryCore_frameworkLibrary_1 = result;
  return result;
}

void *__getIAChannelSmartRepliesSymbolLoc_block_invoke(uint64_t a1)
{
  int v2 = InputAnalyticsLibrary_0();
  uint64_t result = dlsym(v2, "IAChannelSmartReplies");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getIAChannelSmartRepliesSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getIASignalSmartRepliesIntentEngagedSymbolLoc_block_invoke(uint64_t a1)
{
  int v2 = InputAnalyticsLibrary_0();
  uint64_t result = dlsym(v2, "IASignalSmartRepliesIntentEngaged");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  _MergedGlobals_1155 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getIAPayloadKeySmartRepliesSelectedIntentSymbolLoc_block_invoke(uint64_t a1)
{
  int v2 = InputAnalyticsLibrary_0();
  uint64_t result = dlsym(v2, "IAPayloadKeySmartRepliesSelectedIntent");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB261DC0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getIASignalFeedbackServiceSmartRepliesFeedbackUIPresentedSymbolLoc_block_invoke(uint64_t a1)
{
  int v2 = InputAnalyticsLibrary_0();
  uint64_t result = dlsym(v2, "IASignalFeedbackServiceSmartRepliesFeedbackUIPresented");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getIASignalFeedbackServiceSmartRepliesFeedbackUIPresentedSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32)
                                                                                                 + 8)
                                                                                     + 24);
  return result;
}

void *__getIAChannelFeedbackServiceSymbolLoc_block_invoke(uint64_t a1)
{
  int v2 = InputAnalyticsLibrary_0();
  uint64_t result = dlsym(v2, "IAChannelFeedbackService");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getIAChannelFeedbackServiceSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getIASignalFeedbackServiceLaunchSmartRepliesReportConcernSymbolLoc_block_invoke(uint64_t a1)
{
  int v2 = InputAnalyticsLibrary_0();
  uint64_t result = dlsym(v2, "IASignalFeedbackServiceLaunchSmartRepliesReportConcern");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getIASignalFeedbackServiceLaunchSmartRepliesReportConcernSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32)
                                                                                                 + 8)
                                                                                     + 24);
  return result;
}

void *__getIASignalFeedbackServiceLaunchSmartRepliesThumbsUpSymbolLoc_block_invoke(uint64_t a1)
{
  int v2 = InputAnalyticsLibrary_0();
  uint64_t result = dlsym(v2, "IASignalFeedbackServiceLaunchSmartRepliesThumbsUp");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getIASignalFeedbackServiceLaunchSmartRepliesThumbsUpSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                                + 24);
  return result;
}

void *__getIASignalFeedbackServiceLaunchSmartRepliesThumbsDownSymbolLoc_block_invoke(uint64_t a1)
{
  int v2 = InputAnalyticsLibrary_0();
  uint64_t result = dlsym(v2, "IASignalFeedbackServiceLaunchSmartRepliesThumbsDown");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getIASignalFeedbackServiceLaunchSmartRepliesThumbsDownSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32)
                                                                                              + 8)
                                                                                  + 24);
  return result;
}

void *__getIASignalFeedbackServiceSmartRepliesFeedbackUIResetSymbolLoc_block_invoke(uint64_t a1)
{
  int v2 = InputAnalyticsLibrary_0();
  uint64_t result = dlsym(v2, "IASignalFeedbackServiceSmartRepliesFeedbackUIReset");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getIASignalFeedbackServiceSmartRepliesFeedbackUIResetSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                                 + 24);
  return result;
}

Class __getIASignalAnalyticsClass_block_invoke_0(uint64_t a1)
{
  InputAnalyticsLibraryCore_1();
  Class result = objc_getClass("IASignalAnalytics");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getIASignalAnalyticsClass_softClass_0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1863B48E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1863B4F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

uint64_t _getGestureKeyboardFlag(void *a1)
{
  uint64_t v1 = objc_getAssociatedObject(a1, &s_gestureKeyboardKey);
  uint64_t v2 = [v1 integerValue];

  return v2;
}

uint64_t IsGestureWithinSpecialRegion(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 view];
  [v1 locationInView:v2];
  CGFloat v4 = v3;
  CGFloat v6 = v5;

  uint64_t v7 = IsTouchPointWithinSpecialRegion(v2, v4, v6);
  return v7;
}

uint64_t IsTouchPointWithinSpecialRegion(void *a1, CGFloat a2, CGFloat a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  if (objc_opt_respondsToSelector())
  {
    CGFloat v6 = [v5 _keyboardLongPressInteractionRegions];
  }
  else
  {
    CGFloat v6 = 0;
  }
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v7 = v6;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v17;
    while (2)
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v17 != v9) {
          objc_enumerationMutation(v7);
        }
        objc_msgSend(*(id *)(*((void *)&v16 + 1) + 8 * i), "CGRectValue", (void)v16);
        CGFloat x = v23.origin.x;
        CGFloat y = v23.origin.y;
        CGFloat width = v23.size.width;
        CGFloat height = v23.size.height;
        if (!CGRectIsNull(v23))
        {
          v24.origin.CGFloat x = x;
          v24.origin.CGFloat y = y;
          v24.size.CGFloat width = width;
          v24.size.CGFloat height = height;
          v22.CGFloat x = a2;
          v22.CGFloat y = a3;
          if (CGRectContainsPoint(v24, v22))
          {
            uint64_t v8 = 1;
            goto LABEL_15;
          }
        }
      }
      uint64_t v8 = [v7 countByEnumeratingWithState:&v16 objects:v20 count:16];
      if (v8) {
        continue;
      }
      break;
    }
  }
LABEL_15:

  return v8;
}

BOOL _gestureIsEnded(void *a1)
{
  id v1 = a1;
  BOOL v2 = [v1 state] == 3 || objc_msgSend(v1, "state") == 4 || objc_msgSend(v1, "state") == 5;

  return v2;
}

void sub_1863D056C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 88));
  _Unwind_Resume(a1);
}

void _UIUpdateLabelUsingConfiguration(void *a1, id *a2, void *a3)
{
  id v10 = a1;
  id v5 = a3;
  if (!a2)
  {
    uint64_t v8 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v9 = objc_msgSend(NSString, "stringWithUTF8String:", "void _UIUpdateLabelUsingConfiguration(UIView * _Nonnull __strong, UILabel * _Nullable __strong * _Nonnull, _UIContentViewLabelConfiguration * _Nonnull __strong)");
    [v8 handleFailureInFunction:v9, @"_UIContentViewLabelConfiguration_Internal.h", 73, @"Invalid parameter not satisfying: %@", @"labelPtr != NULL" file lineNumber description];
  }
  CGFloat v6 = (UILabel *)*a2;
  id v7 = v6;
  if (v5 && (v5[2] || v5[7]))
  {
    if (v6)
    {
      if ([(UIView *)v6 isHidden]) {
        [(UIView *)v7 setHidden:0];
      }
    }
    else
    {
      id v7 = objc_alloc_init(UILabel);
      objc_storeStrong(a2, v7);
      [v10 addSubview:v7];
    }
    [v5 applyToLabel:v7];
  }
  else if (v6 && ![(UIView *)v6 isHidden])
  {
    [(UIView *)v7 setHidden:1];
  }
}

uint64_t _UIHIDEventSynchronizationStrategyForEvent(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (_getTritiumVendorDefinedEvent(a1))
  {
    *(void *)long long buf = 0;
    IOHIDEventGetVendorDefinedData();
  }
  BOOL v2 = *(NSObject **)(__UILogGetCategoryCachedImpl("HIDEventSynchronization", &_MergedGlobals_1163) + 8);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    *(void *)&uint8_t buf[4] = a1;
    _os_log_impl(&dword_1853B0000, v2, OS_LOG_TYPE_DEFAULT, "Unable to find vendor defined event or it has unexpected data: %@", buf, 0xCu);
  }
  uint64_t v3 = *(NSObject **)(__UILogGetCategoryCachedImpl("HIDEventSynchronization", &qword_1EB261EC0) + 8);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&buf[8] = 2048;
    *(void *)&buf[10] = 0;
    _os_log_impl(&dword_1853B0000, v3, OS_LOG_TYPE_DEFAULT, "Gesture type '%u' -> synchronization strategy '%lu'.", buf, 0x12u);
  }
  return 0;
}

uint64_t ___getTritiumVendorDefinedEvent_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t IntegerValue = IOHIDEventGetIntegerValue();
  uint64_t result = IOHIDEventGetIntegerValue();
  if (IntegerValue == 65376 && result == 11)
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
    *a4 = 1;
  }
  return result;
}

id KeyboardUIClientLog()
{
  if (qword_1EB261ED0 != -1) {
    dispatch_once(&qword_1EB261ED0, &__block_literal_global_393);
  }
  uint64_t v0 = (void *)_MergedGlobals_1164;
  return v0;
}

void __KeyboardUIClientLog_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.keyboard", "KeyboardUIClient");
  id v1 = (void *)_MergedGlobals_1164;
  _MergedGlobals_1164 = (uint64_t)v0;
}

void sub_1863DDA8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1863DDC2C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1863DF224(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

float ValueForPoint(void *a1, int a2, double a3, double a4, double a5, double a6, float a7, float a8)
{
  uint64_t v13 = a1;
  [v13 bounds];
  double v15 = v14;
  double v17 = v16;
  double v19 = v18;
  double v21 = v20;
  id WeakRetained = objc_loadWeakRetained(v13 + 67);
  objc_msgSend(WeakRetained, "trackRectForBounds:", v15, v17, v19, v21);
  CGFloat v24 = v23;
  CGFloat v26 = v25;

  if (dyld_program_sdk_at_least()) {
    double v27 = -3.0;
  }
  else {
    double v27 = -2.0;
  }
  v48.origin.double x = v24;
  v48.origin.CGFloat y = v17;
  v48.size.double width = v26;
  v48.size.CGFloat height = v21;
  CGRect v49 = CGRectInset(v48, v27, 0.0);
  double x = v49.origin.x;
  double width = v49.size.width;
  uint64_t v30 = 5;
  if (!*((unsigned char *)v13 + 521)) {
    uint64_t v30 = 6;
  }
  id v31 = *(id *)((char *)v13 + OBJC_IVAR____UISlideriOSVisualElement__sliderFlags[v30]);
  [v31 frame];
  double v33 = v32;
  if (a2) {
    double v34 = width - (a5 + *((double *)v13 + 62) - x);
  }
  else {
    double v34 = a5 + *((double *)v13 + 62) - x;
  }
  CGRect v35 = [v13 data];
  [v35 sliderSpeedMultiplier];
  float v37 = a3 + (v34 - a3) * v36;

  float v38 = v37 + v33 * -0.5;
  float v39 = (float)((float)(a8 - a7) * v38) / (width - v33) + a7;
  if (((_BYTE)v13[59] & 8) != 0)
  {
    uint64_t v40 = [v13 data];
    [v40 sliderSpeedMultiplier];
    double v42 = fabs(v41 + -1.0);

    if (v42 <= 0.01)
    {
      id v43 = [v13 slider];
      CGFloat v44 = [v43 _sliderConfiguration];

      float v47 = 0.0;
      *(float *)&double v45 = v39;
      if ([v44 adjustPositionForTargetPosition:&v47 adjustedPosition:0 startPosition:0 endPosition:v45])float v39 = v47; {
    }
      }
  }
  if (v39 >= a7)
  {
    a7 = v39;
    if (v39 > a8) {
      a7 = a8;
    }
  }

  return a7;
}

uint64_t UITextRangeContainsPointInViewWithSlop(void *a1, void *a2, double a3, double a4, double a5)
{
  id v9 = a2;
  id v10 = a1;
  uint64_t v11 = [v10 textInputView];
  objc_msgSend(v11, "convertPoint:fromView:", v10, a3, a4);
  uint64_t v14 = UITextRangeContainsPointWithSlop(v10, (uint64_t)v9, v12, v13, a5);

  return v14;
}

uint64_t UITextRangeContainsPointWithSlop(void *a1, uint64_t a2, CGFloat a3, CGFloat a4, double a5)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  uint64_t v8 = objc_msgSend(a1, "selectionRectsForRange:", a2, 0);
  uint64_t v9 = [v8 countByEnumeratingWithState:&v29 objects:v33 count:16];
  if (v9)
  {
    uint64_t v10 = *(void *)v30;
    double v11 = -a5;
    while (2)
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v30 != v10) {
          objc_enumerationMutation(v8);
        }
        CGFloat v13 = *(void **)(*((void *)&v29 + 1) + 8 * i);
        [v13 rect];
        uint64_t v15 = v14;
        uint64_t v17 = v16;
        uint64_t v19 = v18;
        uint64_t v21 = v20;
        if ([v13 isVertical])
        {
          CGFloat v22 = 0.0;
          uint64_t v23 = v15;
          uint64_t v24 = v17;
          uint64_t v25 = v19;
          uint64_t v26 = v21;
          CGFloat v27 = v11;
        }
        else
        {
          CGFloat v27 = 0.0;
          uint64_t v23 = v15;
          uint64_t v24 = v17;
          uint64_t v25 = v19;
          uint64_t v26 = v21;
          CGFloat v22 = v11;
        }
        CGRect v36 = CGRectInset(*(CGRect *)&v23, v27, v22);
        v35.double x = a3;
        v35.CGFloat y = a4;
        if (CGRectContainsPoint(v36, v35))
        {
          uint64_t v9 = 1;
          goto LABEL_14;
        }
      }
      uint64_t v9 = [v8 countByEnumeratingWithState:&v29 objects:v33 count:16];
      if (v9) {
        continue;
      }
      break;
    }
  }
LABEL_14:

  return v9;
}

void sub_1863E8D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1863EF6CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1863F6158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1863FFB20(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_186400208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _UIKBTextSignalsFoundInKeywordsList(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v11 = 0;
  CGFloat v12 = &v11;
  uint64_t v13 = 0x2020000000;
  char v14 = 0;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = ___UIKBTextSignalsFoundInKeywordsList_block_invoke;
  v8[3] = &unk_1E52FED38;
  id v5 = v4;
  id v9 = v5;
  uint64_t v10 = &v11;
  [v3 enumerateObjectsUsingBlock:v8];
  uint64_t v6 = *((unsigned __int8 *)v12 + 24);

  _Block_object_dispose(&v11, 8);
  return v6;
}

void sub_186402134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186402620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186403998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
}

id get_SFAppPasswordSavingViewControllerClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  os_log_t v0 = (void *)qword_1EB261FA8;
  uint64_t v7 = qword_1EB261FA8;
  if (!qword_1EB261FA8)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __get_SFAppPasswordSavingViewControllerClass_block_invoke;
    v3[3] = &unk_1E52D9900;
    v3[4] = &v4;
    __get_SFAppPasswordSavingViewControllerClass_block_invoke((uint64_t)v3);
    os_log_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_186404318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getAFUITargetDetectionControllerClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB261F88)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    void v6[3] = __AutoFillUILibraryCore_block_invoke_1;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E52FED18;
    uint64_t v8 = 0;
    qword_1EB261F88 = _sl_dlopen();
  }
  if (!qword_1EB261F88)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *AutoFillUILibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIKBAutofillController.m", 60, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("AFUITargetDetectionController");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    id v5 = [NSString stringWithUTF8String:"Class getAFUITargetDetectionControllerClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIKBAutofillController.m", 61, @"Unable to find class %s", "AFUITargetDetectionController");

LABEL_10:
    __break(1u);
  }
  qword_1EB261F80 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __AutoFillUILibraryCore_block_invoke_1()
{
  uint64_t result = _sl_dlopen();
  qword_1EB261F88 = result;
  return result;
}

uint64_t __SafariServicesLibraryCore_block_invoke_2()
{
  uint64_t result = _sl_dlopen();
  qword_1EB261FB0 = result;
  return result;
}

void sub_1864059D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186406B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186406E60(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_186406FA0(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 24));
  _Unwind_Resume(a1);
}

void UIKBLADarwinUIPresented()
{
}

void UIKBLADarwinUIDismissed()
{
}

void _AttemptDismiss(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = a2;
  [(id)s_presentations removeObject:v3];
  if (![(id)s_presentations count])
  {
    id v5 = (void *)s_presentations;
    s_presentations = 0;
  }
  uint64_t v6 = [v3 presentingViewController];

  if (v6)
  {
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    v7[2] = ___AttemptDismiss_block_invoke;
    v7[3] = &unk_1E52DA160;
    id v8 = v3;
    uint64_t v9 = v4;
    [v8 dismissViewControllerAnimated:0 completion:v7];
  }
  else
  {
    v4[2](v4);
  }
}

id get_SFAppAutoFillPasswordViewControllerClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  os_log_t v0 = (void *)get_SFAppAutoFillPasswordViewControllerClass_softClass;
  uint64_t v7 = get_SFAppAutoFillPasswordViewControllerClass_softClass;
  if (!get_SFAppAutoFillPasswordViewControllerClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __get_SFAppAutoFillPasswordViewControllerClass_block_invoke;
    v3[3] = &unk_1E52D9900;
    v3[4] = &v4;
    __get_SFAppAutoFillPasswordViewControllerClass_block_invoke((uint64_t)v3);
    os_log_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_186409284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void UIKeyboardSafariPresentCredentialPickerVC(void *a1)
{
  id v2 = a1;
  get_SFAppAutoFillPasswordViewControllerClass();
  if ((objc_opt_isKindOfClass() & 1) != 0
    || (get_SFAppPasswordSavingViewControllerClass_0(), (objc_opt_isKindOfClass() & 1) != 0)
    || (get_SFExternalPasswordCredentialViewControllerClass(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    id v1 = (objc_class *)objc_opt_class();
    if (v1) {
      UIKeyboardPresentHiddenViewController(v1, v2);
    }
  }
}

id get_SFAppPasswordSavingViewControllerClass_0()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  os_log_t v0 = (void *)get_SFAppPasswordSavingViewControllerClass_softClass;
  uint64_t v7 = get_SFAppPasswordSavingViewControllerClass_softClass;
  if (!get_SFAppPasswordSavingViewControllerClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __get_SFAppPasswordSavingViewControllerClass_block_invoke_0;
    v3[3] = &unk_1E52D9900;
    v3[4] = &v4;
    __get_SFAppPasswordSavingViewControllerClass_block_invoke_0((uint64_t)v3);
    os_log_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1864098B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id get_SFExternalPasswordCredentialViewControllerClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  os_log_t v0 = (void *)get_SFExternalPasswordCredentialViewControllerClass_softClass;
  uint64_t v7 = get_SFExternalPasswordCredentialViewControllerClass_softClass;
  if (!get_SFExternalPasswordCredentialViewControllerClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __get_SFExternalPasswordCredentialViewControllerClass_block_invoke;
    v3[3] = &unk_1E52D9900;
    v3[4] = &v4;
    __get_SFExternalPasswordCredentialViewControllerClass_block_invoke((uint64_t)v3);
    os_log_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_186409998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void UIKeyboardPresentHiddenViewController(objc_class *a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(a1);
  [v4 setAutofillVC:v3];

  [v4 presentSelfWithAnimation:1];
}

void UIKeyboardSafariPresentCredentialPickerForType(uint64_t a1)
{
  objc_opt_class();
  if (a1 == 2)
  {
    id v2 = (objc_class *)objc_opt_class();
    SFAppPasswordSavingViewControllerClass_0 = (objc_class *)get_SFAppPasswordSavingViewControllerClass_0();
  }
  else
  {
    if (a1 != 1) {
      return;
    }
    id v2 = (objc_class *)objc_opt_class();
    SFAppPasswordSavingViewControllerClass_0 = (objc_class *)get_SFAppAutoFillPasswordViewControllerClass();
  }
  id v4 = objc_alloc_init(SFAppPasswordSavingViewControllerClass_0);
  if (v4)
  {
    id v5 = v4;
    UIKeyboardPresentHiddenViewController(v2, v4);
  }
}

void UIKeyboardSafariPresentExternalCredentialViewControllerForCredentialData(void *a1)
{
  id v1 = a1;
  id v2 = (void *)MEMORY[0x1E4F28DC0];
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2050000000;
  id v3 = (void *)qword_1EB261FC8;
  uint64_t v15 = qword_1EB261FC8;
  if (!qword_1EB261FC8)
  {
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = __getSFSafariCredentialClass_block_invoke;
    void v11[3] = &unk_1E52D9900;
    void v11[4] = &v12;
    __getSFSafariCredentialClass_block_invoke((uint64_t)v11);
    id v3 = (void *)v13[3];
  }
  id v4 = v3;
  _Block_object_dispose(&v12, 8);
  id v5 = [v2 unarchivedObjectOfClass:v4 fromData:v1 error:0];
  id v6 = objc_alloc_init((Class)get_SFExternalPasswordCredentialViewControllerClass());
  UIKeyboardSafariPresentCredentialPickerVC(v6);
  if (objc_opt_respondsToSelector())
  {
    uint64_t v7 = +[UIKeyboardImpl activeInstance];
    id v8 = [v7 _autofillContext];

    uint64_t v9 = [v8 objectForKey:@"_page_id"];
    uint64_t v10 = [v8 objectForKey:@"_frame_id"];
    [v6 autoFillWithExternalCredential:v5 pageID:v9 frameID:v10];
  }
  else
  {
    [v6 autoFillWithExternalCredential:v5];
  }
}

void sub_186409C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void UIKeyboardSafariDepresentForViewService()
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  os_log_t v0 = (void *)[(id)s_presentations copy];
  id v1 = (void *)s_presentations;
  s_presentations = 0;

  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v2 = v0;
  uint64_t v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v9 + 1) + 8 * i);
        if (objc_msgSend(v7, "presentedAutofill", (void)v9))
        {
          id v8 = +[UIPeripheralHost sharedInstance];
          [v8 setDeactivatedKeyboard:0 forScene:0];
        }
        _AttemptDismiss(v7, &__block_literal_global_168_0);
      }
      uint64_t v4 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v4);
  }
}

uint64_t __UIKBLADarwinUIPresented_block_invoke()
{
  return [(id)__UIKBCurrentHiddenViewController _localAuthenticationUIPresented];
}

uint64_t __UIKBLADarwinUIDismissed_block_invoke()
{
  return [(id)__UIKBCurrentHiddenViewController _localAuthenticationUIDismissed];
}

void SafariServicesLibrary()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!SafariServicesLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __SafariServicesLibraryCore_block_invoke_3;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E52FEE20;
    uint64_t v5 = 0;
    SafariServicesLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  if (!SafariServicesLibraryCore_frameworkLibrary)
  {
    id v1 = [MEMORY[0x1E4F28B00] currentHandler];
    id v2 = [NSString stringWithUTF8String:"void *SafariServicesLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"UIKeyboardVCPresenter.m", 44, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  os_log_t v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __SafariServicesLibraryCore_block_invoke_3()
{
  uint64_t result = _sl_dlopen();
  SafariServicesLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

Class __getSFSafariCredentialClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB261FD0)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    void v6[3] = __SafariFoundationLibraryCore_block_invoke;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E52FEE38;
    uint64_t v8 = 0;
    qword_1EB261FD0 = _sl_dlopen();
  }
  if (!qword_1EB261FD0)
  {
    uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v4 = [NSString stringWithUTF8String:"void *SafariFoundationLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIKeyboardVCPresenter.m", 49, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("SFSafariCredential");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getSFSafariCredentialClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIKeyboardVCPresenter.m", 50, @"Unable to find class %s", "SFSafariCredential");

LABEL_10:
    __break(1u);
  }
  qword_1EB261FC8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __SafariFoundationLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB261FD0 = result;
  return result;
}

void sub_186411408(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_186421198(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 88));
  _Unwind_Resume(a1);
}

double ConvertRectToScene(void *a1, double a2, double a3, double a4, double a5)
{
  id v9 = a1;
  long long v10 = [v9 window];
  long long v11 = [v10 windowScene];
  long long v12 = [v11 coordinateSpace];
  objc_msgSend(v12, "convertRect:fromCoordinateSpace:", v9, a2, a3, a4, a5);
  double v14 = v13;

  return v14;
}

uint64_t __ConvertSceneRectToWindow_block_invoke(uint64_t a1, void *a2)
{
  return [a2 _isTextEffectsWindow] ^ 1;
}

uint64_t __CoreMotionLibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25D1B0 = result;
  return result;
}

id _UIFloatingTabBarGetPlatformMetrics(uint64_t a1)
{
  uint64_t v2 = (void *)_UIFloatingTabBarGetPlatformMetrics_metricsByIdiom;
  uint64_t v3 = [NSNumber numberWithInteger:a1];
  long long v4 = [v2 objectForKey:v3];

  if (!v4)
  {
    if (!_UIFloatingTabBarGetPlatformMetrics_metricsByIdiom)
    {
      uint64_t v5 = [MEMORY[0x1E4F1CA60] dictionary];
      uint64_t v6 = (void *)_UIFloatingTabBarGetPlatformMetrics_metricsByIdiom;
      _UIFloatingTabBarGetPlatformMetrics_metricsByIdiouint64_t m = v5;
    }
    long long v7 = +[_UIVisualStyleRegistry registryForIdiom:a1];
    [v7 visualStyleClassForStylableClass:objc_opt_class()];

    long long v4 = objc_opt_new();
    uint64_t v8 = (void *)_UIFloatingTabBarGetPlatformMetrics_metricsByIdiom;
    id v9 = [NSNumber numberWithInteger:a1];
    [v8 setObject:v4 forKey:v9];
  }
  return v4;
}

void sub_18642BFDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___queue_scheduleUpdateAndSaveForPersistedSceneSessions_block_invoke()
{
  if (_UIStateRestorationDebugLogEnabled()) {
    NSLog(&cfstr_SBackgroundTas.isa, "void _queue_scheduleUpdateAndSaveForPersistedSceneSessions(void)_block_invoke", qword_1EB262018);
  }
  os_log_t v0 = _persistenceQueue();
  dispatch_async(v0, &__block_literal_global_560);
}

void UILocalNotificationCommonInit(void *a1)
{
  id v1 = a1;
  [v1 setHasAction:1];
  [v1 setRegionTriggersOnce:1];
}

void sub_18642DA30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t comparePotentiallyNilObjects(void *a1, void *a2)
{
  unint64_t v3 = a1;
  unint64_t v4 = a2;
  uint64_t v5 = (void *)v4;
  if (v3 | v4) {
    uint64_t v6 = -1;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v3) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = v6;
  }
  if (v3 && v4)
  {
    if (objc_opt_respondsToSelector()) {
      uint64_t v7 = [(id)v3 compare:v5];
    }
    else {
      uint64_t v7 = 0;
    }
  }

  return v7;
}

id _nextAdjustedFireDateForPreviousDateAndComponentsWithRepeatIntervalForCalendar(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  id v9 = a4;
  id v10 = a5;
  long long v11 = [v9 dateByAddingComponents:a2 toDate:a1 options:0];
  if (!v10 || [v10 hour] == 0x7FFFFFFFFFFFFFFFLL && objc_msgSend(v10, "minute") == 0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_29:
    if (((objc_msgSend(MEMORY[0x1E4F1C9D8], "_ui_largerComponentsRelativeToComponent:", 16) | 0x10) & a3) != 0)
    {
      id v33 = objc_alloc_init(MEMORY[0x1E4F1C9D8]);
      [v33 setHour:-13];
      uint64_t v34 = [v9 timeZone];
      CGPoint v35 = [v9 dateByAddingComponents:v33 toDate:v11 options:0];
      CGRect v36 = [v34 nextDaylightSavingTimeTransitionAfterDate:v35];
      if (v36)
      {
        if ([v11 compare:v36] != -1)
        {
          uint64_t v37 = [v34 secondsFromGMTForDate:v36];
          uint64_t v38 = v37 - [v34 secondsFromGMTForDate:v35];
          if (v38 < 0)
          {
            float v39 = (void *)[objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeInterval:v36 sinceDate:(double)-v38];
            if ([v11 compare:v39] == -1)
            {
              uint64_t v40 = [v11 dateByAddingTimeInterval:(double)v38];

              long long v11 = (void *)v40;
            }
          }
        }
      }
    }
    goto LABEL_37;
  }
  long long v12 = [v9 components:254 fromDate:v11];
  if ([v10 hour] == 0x7FFFFFFFFFFFFFFFLL)
  {
    BOOL v13 = 0;
  }
  else
  {
    uint64_t v14 = [v10 hour];
    BOOL v13 = v14 != [v12 hour];
  }
  if ([v10 minute] == 0x7FFFFFFFFFFFFFFFLL)
  {
    BOOL v15 = 0;
  }
  else
  {
    uint64_t v16 = [v10 minute];
    BOOL v15 = v16 != [v12 minute];
  }
  if (!v13 && !v15)
  {

    goto LABEL_29;
  }
  uint64_t v42 = a3;
  uint64_t v17 = [v9 timeZone];
  uint64_t v18 = [v17 nextDaylightSavingTimeTransitionAfterDate:v11];
  uint64_t v19 = [v17 secondsFromGMTForDate:v18];
  uint64_t v20 = [v17 secondsFromGMTForDate:v11];
  BOOL v21 = 0;
  id v43 = (void *)v18;
  if (v18 && v19 - v20 >= 1)
  {
    uint64_t v22 = v19 - v20;
    uint64_t v23 = (void *)[objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeInterval:v11 sinceDate:(double)v22];
    uint64_t v24 = [v23 compare:v18];
    BOOL v21 = v24 != -1;
    if (v24 != -1)
    {
      uint64_t v25 = [v9 components:254 fromDate:v23];

      long long v12 = (void *)v25;
    }
  }
  if (v13) {
    objc_msgSend(v12, "setHour:", objc_msgSend(v10, "hour"));
  }
  if (v15) {
    objc_msgSend(v12, "setMinute:", objc_msgSend(v10, "minute"));
  }
  uint64_t v26 = [v9 dateFromComponents:v12];
  CGFloat v27 = [v9 components:254 fromDate:v26];
  CGRect v28 = v27;
  if (v21
    || (!v13 || (uint64_t v29 = [v27 hour], v29 == objc_msgSend(v10, "hour")))
    && (!v15 || (uint64_t v30 = [v28 minute], v30 == objc_msgSend(v10, "minute"))))
  {
    id v31 = v26;

    char v32 = 1;
    long long v11 = v31;
  }
  else
  {
    char v32 = 0;
  }

  a3 = v42;
  if ((v32 & 1) == 0) {
    goto LABEL_29;
  }
LABEL_37:

  return v11;
}

Class __getCLRegionClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB25BE70)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    void v6[3] = __CoreLocationLibraryCore_block_invoke;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E52FF138;
    uint64_t v8 = 0;
    qword_1EB25BE70 = _sl_dlopen();
  }
  if (!qword_1EB25BE70)
  {
    unint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    unint64_t v4 = [NSString stringWithUTF8String:"void *CoreLocationLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UILocalNotification.m", 21, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("CLRegion");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    unint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getCLRegionClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UILocalNotification.m", 22, @"Unable to find class %s", "CLRegion");

LABEL_10:
    __break(1u);
  }
  _MergedGlobals_1_18 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __CoreLocationLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25BE70 = result;
  return result;
}

void _skinToneImageVariantNameForSpecifierType(void *a1)
{
  id v1 = a1;
  getEMFSkinToneSpecifierTypeFitzpatrickSilhouette();
  id v2 = (id)objc_claimAutoreleasedReturnValue();

  if (v2 == v1) {
    goto LABEL_21;
  }
  uint64_t v19 = 0;
  uint64_t v20 = &v19;
  uint64_t v21 = 0x2020000000;
  unint64_t v3 = (id *)_MergedGlobals_1170;
  uint64_t v22 = _MergedGlobals_1170;
  if (!_MergedGlobals_1170)
  {
    uint64_t v15 = MEMORY[0x1E4F143A8];
    uint64_t v16 = 3221225472;
    uint64_t v17 = __getEMFSkinToneSpecifierTypeFitzpatrick1_2SymbolLoc_block_invoke;
    uint64_t v18 = &unk_1E52D9900;
    unint64_t v4 = EmojiFoundationLibrary_3();
    v20[3] = (uint64_t)dlsym(v4, "EMFSkinToneSpecifierTypeFitzpatrick1_2");
    _MergedGlobals_1170 = v20[3];
    unint64_t v3 = (id *)v20[3];
  }
  _Block_object_dispose(&v19, 8);
  if (!v3)
  {
    BOOL v13 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v14 = [NSString stringWithUTF8String:"NSString *getEMFSkinToneSpecifierTypeFitzpatrick1_2(void)"];
    objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, @"UIKeyboardEmojiFamilyConfigurationUtilities.m", 22, @"%s", dlerror(), v15, v16, v17, v18);
    goto LABEL_27;
  }
  if (*v3 == v1) {
    goto LABEL_21;
  }
  uint64_t v19 = 0;
  uint64_t v20 = &v19;
  uint64_t v21 = 0x2020000000;
  uint64_t v5 = (id *)qword_1EB262030;
  uint64_t v22 = qword_1EB262030;
  if (!qword_1EB262030)
  {
    uint64_t v15 = MEMORY[0x1E4F143A8];
    uint64_t v16 = 3221225472;
    uint64_t v17 = __getEMFSkinToneSpecifierTypeFitzpatrick3SymbolLoc_block_invoke;
    uint64_t v18 = &unk_1E52D9900;
    uint64_t v6 = EmojiFoundationLibrary_3();
    v20[3] = (uint64_t)dlsym(v6, "EMFSkinToneSpecifierTypeFitzpatrick3");
    qword_1EB262030 = v20[3];
    uint64_t v5 = (id *)v20[3];
  }
  _Block_object_dispose(&v19, 8);
  if (!v5)
  {
    BOOL v13 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v14 = [NSString stringWithUTF8String:"NSString *getEMFSkinToneSpecifierTypeFitzpatrick3(void)"];
    objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, @"UIKeyboardEmojiFamilyConfigurationUtilities.m", 23, @"%s", dlerror(), v15, v16, v17, v18);
    goto LABEL_27;
  }
  if (*v5 == v1) {
    goto LABEL_21;
  }
  uint64_t v19 = 0;
  uint64_t v20 = &v19;
  uint64_t v21 = 0x2020000000;
  long long v7 = (id *)qword_1EB262038;
  uint64_t v22 = qword_1EB262038;
  if (!qword_1EB262038)
  {
    uint64_t v15 = MEMORY[0x1E4F143A8];
    uint64_t v16 = 3221225472;
    uint64_t v17 = __getEMFSkinToneSpecifierTypeFitzpatrick4SymbolLoc_block_invoke;
    uint64_t v18 = &unk_1E52D9900;
    uint64_t v8 = EmojiFoundationLibrary_3();
    v20[3] = (uint64_t)dlsym(v8, "EMFSkinToneSpecifierTypeFitzpatrick4");
    qword_1EB262038 = v20[3];
    long long v7 = (id *)v20[3];
  }
  _Block_object_dispose(&v19, 8);
  if (!v7)
  {
    BOOL v13 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v14 = [NSString stringWithUTF8String:"NSString *getEMFSkinToneSpecifierTypeFitzpatrick4(void)"];
    objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, @"UIKeyboardEmojiFamilyConfigurationUtilities.m", 24, @"%s", dlerror(), v15, v16, v17, v18);
    goto LABEL_27;
  }
  if (*v7 == v1)
  {
LABEL_21:

    return;
  }
  uint64_t v19 = 0;
  uint64_t v20 = &v19;
  uint64_t v21 = 0x2020000000;
  uint64_t v9 = (id *)qword_1EB262040;
  uint64_t v22 = qword_1EB262040;
  if (!qword_1EB262040)
  {
    uint64_t v15 = MEMORY[0x1E4F143A8];
    uint64_t v16 = 3221225472;
    uint64_t v17 = __getEMFSkinToneSpecifierTypeFitzpatrick5SymbolLoc_block_invoke;
    uint64_t v18 = &unk_1E52D9900;
    id v10 = EmojiFoundationLibrary_3();
    v20[3] = (uint64_t)dlsym(v10, "EMFSkinToneSpecifierTypeFitzpatrick5");
    qword_1EB262040 = v20[3];
    uint64_t v9 = (id *)v20[3];
  }
  _Block_object_dispose(&v19, 8);
  if (v9)
  {
    if (*v9 == v1) {
      goto LABEL_21;
    }
    uint64_t v19 = 0;
    uint64_t v20 = &v19;
    uint64_t v21 = 0x2020000000;
    uint64_t v11 = qword_1EB262048;
    uint64_t v22 = qword_1EB262048;
    if (!qword_1EB262048)
    {
      uint64_t v15 = MEMORY[0x1E4F143A8];
      uint64_t v16 = 3221225472;
      uint64_t v17 = __getEMFSkinToneSpecifierTypeFitzpatrick6SymbolLoc_block_invoke;
      uint64_t v18 = &unk_1E52D9900;
      long long v12 = EmojiFoundationLibrary_3();
      v20[3] = (uint64_t)dlsym(v12, "EMFSkinToneSpecifierTypeFitzpatrick6");
      qword_1EB262048 = v20[3];
      uint64_t v11 = v20[3];
    }
    _Block_object_dispose(&v19, 8);
    if (v11) {
      goto LABEL_21;
    }
    BOOL v13 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v14 = [NSString stringWithUTF8String:"NSString *getEMFSkinToneSpecifierTypeFitzpatrick6(void)"];
    objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, @"UIKeyboardEmojiFamilyConfigurationUtilities.m", 26, @"%s", dlerror(), v15, v16, v17, v18);
  }
  else
  {
    BOOL v13 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v14 = [NSString stringWithUTF8String:"NSString *getEMFSkinToneSpecifierTypeFitzpatrick5(void)"];
    objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, @"UIKeyboardEmojiFamilyConfigurationUtilities.m", 25, @"%s", dlerror(), v15, v16, v17, v18);
  }
LABEL_27:

  __break(1u);
}

void sub_1864300F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getEMFSkinToneSpecifierTypeFitzpatrickSilhouette()
{
  uint64_t v6 = 0;
  long long v7 = &v6;
  uint64_t v8 = 0x2020000000;
  os_log_t v0 = (void **)getEMFSkinToneSpecifierTypeFitzpatrickSilhouetteSymbolLoc_ptr;
  uint64_t v9 = getEMFSkinToneSpecifierTypeFitzpatrickSilhouetteSymbolLoc_ptr;
  if (!getEMFSkinToneSpecifierTypeFitzpatrickSilhouetteSymbolLoc_ptr)
  {
    id v1 = EmojiFoundationLibrary_3();
    v7[3] = (uint64_t)dlsym(v1, "EMFSkinToneSpecifierTypeFitzpatrickSilhouette");
    getEMFSkinToneSpecifierTypeFitzpatrickSilhouetteSymbolLoc_ptr = v7[3];
    os_log_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v2 = *v0;
    id v3 = v2;
  }
  else
  {
    unint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"NSString *getEMFSkinToneSpecifierTypeFitzpatrickSilhouette(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIKeyboardEmojiFamilyConfigurationUtilities.m", 27, @"%s", dlerror());

    __break(1u);
  }
}

void sub_186430268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id UIKBImageSetForCoupleCharacter(void *a1, void *a2, void *a3)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  id v8 = v5;
  if (([getEMFEmojiCategoryClass_1() _isCoupleMultiSkinToneEmoji:v8] & 1) == 0
    && ![getEMFEmojiCategoryClass_1() _isComposedCoupleMultiSkinToneEmoji:v8])
  {
    uint64_t v30 = 0;
    id v9 = v8;
    goto LABEL_60;
  }
  id v9 = v8;
  if (![v9 length])
  {
    id v15 = 0;
    goto LABEL_16;
  }
  CGFloat v72 = 0;
  id v73 = &v72;
  uint64_t v74 = 0x2050000000;
  id v10 = (void *)getEMFEmojiTokenClass_softClass_1;
  uint64_t v75 = getEMFEmojiTokenClass_softClass_1;
  if (!getEMFEmojiTokenClass_softClass_1)
  {
    v68[0] = MEMORY[0x1E4F143A8];
    v68[1] = 3221225472;
    double v69 = __getEMFEmojiTokenClass_block_invoke_3;
    CGFloat v70 = &unk_1E52D9900;
    id v71 = &v72;
    __getEMFEmojiTokenClass_block_invoke_3((uint64_t)v68);
    id v10 = v73[3];
  }
  id v11 = v10;
  _Block_object_dispose(&v72, 8);
  long long v12 = [v11 emojiTokenWithString:v9 localeData:0];
  BOOL v13 = v12;
  if (v12 && ([v12 supportsSkinToneVariants] & 1) != 0)
  {
    char v14 = [getEMFEmojiCategoryClass_1() _isCoupleMultiSkinToneEmoji:v9];
    id v15 = v9;
    if ((v14 & 1) == 0)
    {
      if ([getEMFEmojiCategoryClass_1() _isComposedCoupleMultiSkinToneEmoji:v15])
      {
        uint64_t v16 = getEMFSkinToneSpecifierTypeFitzpatrickNone();
        CGFloat v72 = v16;
        getEMFSkinToneSpecifierTypeFitzpatrickNone();
        uint64_t v17 = (void **)objc_claimAutoreleasedReturnValue();
        id v73 = v17;
        uint64_t v18 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v72 count:2];
        uint64_t v19 = (void *)[v13 copyWithSkinToneVariantSpecifier:v18];

        uint64_t v20 = [v19 string];
        uint64_t v21 = _stringToScalarValues(v20, (uint64_t)v68);

        if (v21 == 5)
        {
          if (v69 == 128104) {
            int v57 = 128107;
          }
          else {
            int v57 = 128109;
          }
          if (LODWORD(v68[0]) == 128104) {
            int v58 = 128108;
          }
          else {
            int v58 = v57;
          }
          int v63 = v58;
          uint64_t v22 = [[NSString alloc] initWithBytes:&v63 length:4 encoding:2617245952];
        }
        else
        {
          if (v21 != 1)
          {
LABEL_73:

            goto LABEL_14;
          }
          uint64_t v22 = [v19 string];
        }
      }
      else
      {
        uint64_t v19 = (void *)[v13 copyWithSkinToneVariant:0];
        uint64_t v22 = [v19 string];
      }
      id v15 = (id)v22;
      goto LABEL_73;
    }
  }
  else
  {
    id v15 = v9;
  }
LABEL_14:

LABEL_16:
  uint64_t v23 = _stringToScalarValues(v15, (uint64_t)v68);
  uint64_t v24 = LODWORD(v68[0]);
  BOOL v27 = v23 == 1 && LODWORD(v68[0]) > 0x1F46A && LODWORD(v68[0]) < 0x1F46E;

  if (v27)
  {

    if ((v24 - 128107) > 2)
    {
      uint64_t v30 = 0;
      goto LABEL_61;
    }
    CGRect v28 = (void *)qword_1E52FF168[(int)v24 - 128107];
    getEMFSkinToneSpecifierTypeFitzpatrickNone();
    id v29 = (id)objc_claimAutoreleasedReturnValue();
    if (v29 == v6)
    {
      getEMFSkinToneSpecifierTypeFitzpatrickNone();
      id v31 = (id)objc_claimAutoreleasedReturnValue();
      BOOL v32 = v31 == v7;

      if (v32)
      {
        CGFloat v44 = objc_msgSend(NSString, "stringWithFormat:", @"%X-0-0-L", v24);
        double v67 = v44;
        uint64_t v51 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v67 count:1];
        goto LABEL_49;
      }
    }
    else
    {
    }
    getEMFSkinToneSpecifierTypeFitzpatrickSilhouette();
    id v33 = (id)objc_claimAutoreleasedReturnValue();
    if (v33 != v6)
    {

LABEL_36:
      _skinToneImageVariantNameForSpecifierType(v6);
      uint64_t v37 = v36;
      _skinToneImageVariantNameForSpecifierType(v7);
      uint64_t v39 = v38;
      getEMFSkinToneSpecifierTypeFitzpatrickSilhouette();
      id v40 = (id)objc_claimAutoreleasedReturnValue();
      BOOL v41 = v40 == v6;

      if (v41)
      {
        uint64_t v42 = NSString;
        id v43 = [v28 objectAtIndexedSubscript:0];
        CGFloat v44 = [v42 stringWithFormat:@"Silhouette_%@-Left-L", v43];
      }
      else
      {
        if (v24 == 128108) {
          objc_msgSend(NSString, "stringWithFormat:", @"%X-%d-Left-L", 128108, v37);
        }
        else {
        CGFloat v44 = objc_msgSend(NSString, "stringWithFormat:", @"Women-%d-Left-L", v37);
        }
      }
      getEMFSkinToneSpecifierTypeFitzpatrickSilhouette();
      id v45 = (id)objc_claimAutoreleasedReturnValue();
      BOOL v46 = v45 == v7;

      float v47 = NSString;
      if (v46)
      {
        CGRect v49 = [v28 objectAtIndexedSubscript:1];
        CGRect v48 = [v47 stringWithFormat:@"Silhouette_%@-Right-L", v49];
      }
      else
      {
        CGRect v48 = objc_msgSend(NSString, "stringWithFormat:", @"%X-%d-Right-L", v24, v39);
      }
      v65[0] = v48;
      v65[1] = v44;
      CGFloat v50 = [MEMORY[0x1E4F1C978] arrayWithObjects:v65 count:2];

      goto LABEL_50;
    }
    getEMFSkinToneSpecifierTypeFitzpatrickSilhouette();
    id v34 = (id)objc_claimAutoreleasedReturnValue();
    BOOL v35 = v34 == v7;

    if (!v35) {
      goto LABEL_36;
    }
    CGFloat v44 = objc_msgSend(NSString, "stringWithFormat:", @"Silhouette_%X-L", v24);
    uint64_t v66 = v44;
    uint64_t v51 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v66 count:1];
LABEL_49:
    CGFloat v50 = (void *)v51;
LABEL_50:

    uint64_t v30 = [MEMORY[0x1E4F1CA70] orderedSet];
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    id v9 = v50;
    uint64_t v52 = [v9 countByEnumeratingWithState:&v59 objects:v64 count:16];
    if (v52)
    {
      uint64_t v53 = *(void *)v60;
      do
      {
        for (uint64_t i = 0; i != v52; ++i)
        {
          if (*(void *)v60 != v53) {
            objc_enumerationMutation(v9);
          }
          long long v55 = +[UIImage kitImageNamed:*(void *)(*((void *)&v59 + 1) + 8 * i)];
          if (v55) {
            [v30 addObject:v55];
          }
        }
        uint64_t v52 = [v9 countByEnumeratingWithState:&v59 objects:v64 count:16];
      }
      while (v52);
    }

    goto LABEL_60;
  }
  uint64_t v30 = 0;
LABEL_60:

LABEL_61:
  return v30;
}

void sub_186430908(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void getEMFSkinToneSpecifierTypeFitzpatrickNone()
{
  uint64_t v6 = 0;
  id v7 = &v6;
  uint64_t v8 = 0x2020000000;
  os_log_t v0 = (void **)getEMFSkinToneSpecifierTypeFitzpatrickNoneSymbolLoc_ptr;
  uint64_t v9 = getEMFSkinToneSpecifierTypeFitzpatrickNoneSymbolLoc_ptr;
  if (!getEMFSkinToneSpecifierTypeFitzpatrickNoneSymbolLoc_ptr)
  {
    uint64_t v1 = EmojiFoundationLibrary_3();
    v7[3] = (uint64_t)dlsym(v1, "EMFSkinToneSpecifierTypeFitzpatrickNone");
    getEMFSkinToneSpecifierTypeFitzpatrickNoneSymbolLoc_ptr = v7[3];
    os_log_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v2 = *v0;
    id v3 = v2;
  }
  else
  {
    unint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    id v5 = [NSString stringWithUTF8String:"NSString *getEMFSkinToneSpecifierTypeFitzpatrickNone(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIKeyboardEmojiFamilyConfigurationUtilities.m", 21, @"%s", dlerror());

    __break(1u);
  }
}

void sub_186430A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getEMFSkinToneSpecifierTypeFitzpatrickSilhouetteSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = EmojiFoundationLibrary_3();
  uint64_t result = dlsym(v2, "EMFSkinToneSpecifierTypeFitzpatrickSilhouette");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getEMFSkinToneSpecifierTypeFitzpatrickSilhouetteSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                            + 24);
  return result;
}

void *EmojiFoundationLibrary_3()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!EmojiFoundationLibraryCore_frameworkLibrary_3)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    void v4[2] = (void *)3221225472;
    v4[3] = __EmojiFoundationLibraryCore_block_invoke_5;
    void v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_1E52FF150;
    uint64_t v6 = 0;
    EmojiFoundationLibraryCore_frameworkLibrary_3 = _sl_dlopen();
  }
  os_log_t v0 = (void *)EmojiFoundationLibraryCore_frameworkLibrary_3;
  if (!EmojiFoundationLibraryCore_frameworkLibrary_3)
  {
    os_log_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *EmojiFoundationLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIKeyboardEmojiFamilyConfigurationUtilities.m", 17, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __EmojiFoundationLibraryCore_block_invoke_5()
{
  uint64_t result = _sl_dlopen();
  EmojiFoundationLibraryCore_frameworkLibrary_3 = result;
  return result;
}

void *__getEMFSkinToneSpecifierTypeFitzpatrick1_2SymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = EmojiFoundationLibrary_3();
  uint64_t result = dlsym(v2, "EMFSkinToneSpecifierTypeFitzpatrick1_2");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  _MergedGlobals_1170 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getEMFSkinToneSpecifierTypeFitzpatrick3SymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = EmojiFoundationLibrary_3();
  uint64_t result = dlsym(v2, "EMFSkinToneSpecifierTypeFitzpatrick3");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB262030 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getEMFSkinToneSpecifierTypeFitzpatrick4SymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = EmojiFoundationLibrary_3();
  uint64_t result = dlsym(v2, "EMFSkinToneSpecifierTypeFitzpatrick4");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB262038 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getEMFSkinToneSpecifierTypeFitzpatrick5SymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = EmojiFoundationLibrary_3();
  uint64_t result = dlsym(v2, "EMFSkinToneSpecifierTypeFitzpatrick5");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB262040 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getEMFSkinToneSpecifierTypeFitzpatrick6SymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = EmojiFoundationLibrary_3();
  uint64_t result = dlsym(v2, "EMFSkinToneSpecifierTypeFitzpatrick6");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB262048 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t _stringToScalarValues(void *a1, uint64_t a2)
{
  v16[1] = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = [v3 length];
  double v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v16 - v6;
  objc_msgSend(v3, "getCharacters:range:", (char *)v16 - v6, 0, v4, v5);
  if (v4 < 1)
  {
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    do
    {
      id v10 = &v7[2 * v8];
      int v11 = *(unsigned __int16 *)v10;
      if (v4 - v8 >= 2 && (v11 & 0xFC00) == 0xD800 && (unsigned __int16 v12 = *((_WORD *)v10 + 1), v12 >> 10 == 55))
      {
        int v11 = (v11 << 10) + v12 - 56613888;
        uint64_t v13 = 2;
      }
      else
      {
        uint64_t v13 = 1;
      }
      uint64_t v14 = v9 + 1;
      *(_DWORD *)(a2 + 4 * v9) = v11;
      v8 += v13;
      ++v9;
    }
    while (v8 < v4);
  }

  return v14;
}

id getEMFEmojiCategoryClass_1()
{
  uint64_t v4 = 0;
  double v5 = &v4;
  uint64_t v6 = 0x2050000000;
  os_log_t v0 = (void *)getEMFEmojiCategoryClass_softClass_1;
  uint64_t v7 = getEMFEmojiCategoryClass_softClass_1;
  if (!getEMFEmojiCategoryClass_softClass_1)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getEMFEmojiCategoryClass_block_invoke_1;
    v3[3] = &unk_1E52D9900;
    v3[4] = &v4;
    __getEMFEmojiCategoryClass_block_invoke_1((uint64_t)v3);
    os_log_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_186431048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getEMFEmojiCategoryClass_block_invoke_1(uint64_t a1)
{
  EmojiFoundationLibrary_3();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("EMFEmojiCategory");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getEMFEmojiCategoryClass_softClass_1 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getEMFEmojiCategoryClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIKeyboardEmojiFamilyConfigurationUtilities.m", 19, @"Unable to find class %s", "EMFEmojiCategory");

    __break(1u);
  }
}

void __getEMFEmojiTokenClass_block_invoke_3(uint64_t a1)
{
  EmojiFoundationLibrary_3();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("EMFEmojiToken");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getEMFEmojiTokenClass_softClass_1 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getEMFEmojiTokenClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIKeyboardEmojiFamilyConfigurationUtilities.m", 18, @"Unable to find class %s", "EMFEmojiToken");

    __break(1u);
  }
}

void *__getEMFSkinToneSpecifierTypeFitzpatrickNoneSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = EmojiFoundationLibrary_3();
  uint64_t result = dlsym(v2, "EMFSkinToneSpecifierTypeFitzpatrickNone");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getEMFSkinToneSpecifierTypeFitzpatrickNoneSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id UILocalNotificationToUNNotificationRequest_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = [MEMORY[0x1E4F29128] UUID];
  uint64_t v4 = [v3 UUIDString];

  id v5 = v2;
  if ([v5 isTriggeredByDate])
  {
    uint64_t v6 = (void *)MEMORY[0x1E4F44590];
    uint64_t v7 = [v5 fireDate];
    uint64_t v8 = [v5 timeZone];
    uint64_t v9 = [v5 repeatInterval];
    id v10 = [v5 repeatCalendar];
    int v11 = [v6 triggerWithDate:v7 timeZone:v8 repeatInterval:v9 repeatCalendar:v10];

LABEL_5:
    goto LABEL_7;
  }
  if ([v5 isTriggeredByRegion])
  {
    unsigned __int16 v12 = (void *)MEMORY[0x1E4F44598];
    uint64_t v7 = [v5 region];
    int v11 = objc_msgSend(v12, "triggerWithRegion:repeats:", v7, objc_msgSend(v5, "regionTriggersOnce") ^ 1);
    goto LABEL_5;
  }
  int v11 = 0;
LABEL_7:

  id v13 = v5;
  id v14 = objc_alloc_init(MEMORY[0x1E4F445B0]);
  uint64_t v15 = [v13 applicationIconBadgeNumber];
  if (v15)
  {
    uint64_t v16 = [NSNumber numberWithInteger:v15];
    [v14 setBadge:v16];
  }
  else
  {
    objc_msgSend(v14, "setBadge:");
  }
  uint64_t v17 = NSString;
  uint64_t v18 = [v13 alertBody];
  uint64_t v19 = [v17 localizedUserNotificationStringForKey:v18 arguments:0];
  [v14 setBody:v19];

  uint64_t v20 = [v13 category];
  [v14 setCategoryIdentifier:v20];

  objc_msgSend(v14, "setHasDefaultAction:", objc_msgSend(v13, "hasAction"));
  uint64_t v21 = [v13 alertAction];
  [v14 setDefaultActionTitle:v21];

  uint64_t v22 = [v13 alertLaunchImage];
  [v14 setLaunchImageName:v22];

  id v23 = v13;
  uint64_t v24 = [v23 soundName];
  uint64_t v25 = [v24 length];

  if (v25)
  {
    uint64_t v26 = [MEMORY[0x1E4F445C0] soundWithAlertType:17];
    BOOL v27 = [v23 soundName];
    char v28 = [v27 isEqualToString:@"UILocalNotificationDefaultSoundName"];

    if ((v28 & 1) == 0)
    {
      id v29 = [v23 soundName];
      [v26 setToneFileName:v29];
    }
  }
  else
  {
    uint64_t v26 = 0;
  }

  [v14 setSound:v26];
  uint64_t v30 = NSString;
  id v31 = [v23 alertTitle];
  BOOL v32 = [v30 localizedUserNotificationStringForKey:v31 arguments:0];
  [v14 setTitle:v32];

  id v33 = [v23 userInfo];
  [v14 setUserInfo:v33];

  id v34 = [MEMORY[0x1E4F44628] requestWithIdentifier:v4 content:v14 trigger:v11];

  return v34;
}

id UNNotificationToUILocalNotification_block_invoke_2(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = [v2 request];
  uint64_t v4 = _UNNotificationRequestToUILocalNotification(v3);
  id v5 = [v2 date];

  [v4 setFireDate:v5];
  return v4;
}

UILocalNotification *UNNotificationRequestToUILocalNotification_block_invoke_3(uint64_t a1, void *a2)
{
  return _UNNotificationRequestToUILocalNotification(a2);
}

UILocalNotification *_UNNotificationRequestToUILocalNotification(void *a1)
{
  id v1 = a1;
  id v2 = [v1 content];
  uint64_t v3 = [v2 sound];
  uint64_t v4 = [v2 userInfo];
  id v5 = [v1 trigger];
  uint64_t v6 = [v2 body];
  uint64_t v7 = objc_msgSend(v6, "un_localizedStringKey");
  uint64_t v8 = v7;
  if (v7)
  {
    id v9 = v7;
  }
  else
  {
    id v9 = [v2 body];
  }
  id v10 = v9;

  int v11 = [v2 title];
  unsigned __int16 v12 = objc_msgSend(v11, "un_localizedStringKey");
  id v13 = v12;
  if (v12)
  {
    id v14 = v12;
  }
  else
  {
    id v14 = [v2 title];
  }
  uint64_t v15 = v14;

  uint64_t v16 = [v2 launchImageName];
  if ([v16 length])
  {
    uint64_t v17 = [v2 launchImageName];
  }
  else
  {
    uint64_t v17 = 0;
  }

  uint64_t v18 = [v2 categoryIdentifier];
  if ([v18 length])
  {
    uint64_t v19 = [v2 categoryIdentifier];
  }
  else
  {
    uint64_t v19 = 0;
  }

  uint64_t v20 = objc_alloc_init(UILocalNotification);
  uint64_t v36 = v10;
  [(UILocalNotification *)v20 setAlertBody:v10];
  [(UILocalNotification *)v20 setAlertLaunchImage:v17];
  [(UILocalNotification *)v20 setAlertTitle:v15];
  uint64_t v21 = [v2 badge];
  -[UILocalNotification setApplicationIconBadgeNumber:](v20, "setApplicationIconBadgeNumber:", [v21 integerValue]);

  BOOL v35 = (void *)v19;
  [(UILocalNotification *)v20 setCategory:v19];
  -[UILocalNotification setHasAction:](v20, "setHasAction:", [v2 hasDefaultAction]);
  uint64_t v22 = [v2 defaultActionTitle];
  [(UILocalNotification *)v20 setAlertAction:v22];

  id v23 = (void *)v3;
  if (v3)
  {
    id v24 = v1;
    uint64_t v25 = v15;
    uint64_t v26 = v4;
    BOOL v27 = [v23 toneFileName];
    uint64_t v28 = [v27 length];

    if (v28)
    {
      id v29 = [v23 toneFileName];
      [(UILocalNotification *)v20 setSoundName:v29];
    }
    else
    {
      [(UILocalNotification *)v20 setSoundName:@"UILocalNotificationDefaultSoundName"];
    }
    uint64_t v4 = v26;
    uint64_t v15 = v25;
    id v1 = v24;
  }
  [(UILocalNotification *)v20 setUserInfo:v4];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v30 = [v5 date];
    [(UILocalNotification *)v20 setFireDate:v30];

    id v31 = [v5 timeZone];
    [(UILocalNotification *)v20 setTimeZone:v31];

    BOOL v32 = [v5 repeatCalendar];
    [(UILocalNotification *)v20 setRepeatCalendar:v32];

    -[UILocalNotification setRepeatInterval:](v20, "setRepeatInterval:", [v5 repeatInterval]);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v33 = [v5 region];
      [(UILocalNotification *)v20 setRegion:v33];

      -[UILocalNotification setRegionTriggersOnce:](v20, "setRegionTriggersOnce:", [v5 repeats] ^ 1);
    }
  }

  return v20;
}

id UILocalNotificationFromData(void *a1)
{
  id v1 = a1;
  id v2 = (void *)MEMORY[0x18C108260]();
  if (v1)
  {
    uint64_t v3 = (void *)[objc_alloc(MEMORY[0x1E4F28DC0]) initForReadingFromData:v1 error:0];
    uint64_t v4 = [v3 decodeObjectOfClass:objc_opt_class() forKey:*MEMORY[0x1E4F284E8]];
    [v3 finishDecoding];
  }
  else
  {
    uint64_t v4 = 0;
  }

  return v4;
}

void sub_186436F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id location)
{
  objc_destroyWeak(v32);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186437F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186439610(void *a1)
{
  objc_begin_catch(a1);
  *(void *)(v1 + 32) = v2;
  objc_exception_rethrow();
}

void sub_186439620(_Unwind_Exception *a1)
{
}

uint64_t UIRemoteNotificationTypesFromUNNotificationSettings(void *a1)
{
  id v1 = a1;
  BOOL v2 = [v1 alertStyle] != 0;
  unint64_t v3 = ([v1 badgeSetting] == 2) | (unint64_t)(4 * v2);
  uint64_t v4 = [v1 soundSetting];

  if (v4 == 2) {
    return v3 | 2;
  }
  else {
    return v3;
  }
}

void UIUserNotificationCategoryCommonInit(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = a1;
  uint64_t v7 = [a2 copy];
  uint64_t v8 = (void *)v6[1];
  v6[1] = v7;

  uint64_t v9 = [v5 copy];
  id v10 = (id)v6[2];
  v6[2] = v9;
}

void UIUserNotificationActionCommonSetup(void *a1, void *a2, void *a3, uint64_t a4, void *a5, uint64_t a6, char a7, char a8)
{
  id v15 = a5;
  id v16 = a3;
  id v23 = a1;
  uint64_t v17 = [a2 copy];
  uint64_t v18 = (void *)v23[4];
  void v23[4] = v17;

  uint64_t v19 = [v16 copy];
  uint64_t v20 = (void *)v23[5];
  v23[5] = v19;

  v23[6] = a4;
  uint64_t v21 = [v15 copy];

  uint64_t v22 = (void *)v23[7];
  v23[7] = v21;

  v23[8] = a6;
  *((unsigned char *)v23 + _Block_object_dispose(&a9, 8) = a7;
  *((unsigned char *)v23 + 9) = a8;
}

id UIUserNotificationCategoryToUNNotificationCategory_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  unint64_t v3 = [v2 identifier];
  uint64_t v4 = [v2 actionsForContext:0];
  id v5 = objc_msgSend(v4, "bs_map:", &__block_literal_global_6_13);
  uint64_t v6 = [v2 actionsForContext:1];

  uint64_t v7 = objc_msgSend(v6, "bs_map:", &__block_literal_global_8_9);
  uint64_t v8 = [MEMORY[0x1E4F44600] categoryWithIdentifier:v3 actions:v5 minimalActions:v7 intentIdentifiers:MEMORY[0x1E4F1CBF0] options:0];

  return v8;
}

UIMutableUserNotificationCategory *UNNotificationCategoryToUIUserNotificationCategory_block_invoke_2(uint64_t a1, void *a2)
{
  id v2 = a2;
  unint64_t v3 = objc_alloc_init(UIMutableUserNotificationCategory);
  uint64_t v4 = [v2 identifier];
  [(UIUserNotificationCategory *)v3 setIdentifier:v4];

  id v5 = [v2 actions];

  uint64_t v6 = objc_msgSend(v5, "bs_map:", &__block_literal_global_15_7);
  [(UIMutableUserNotificationCategory *)v3 setActions:v6 forContext:0];

  return v3;
}

id _UNNotificationActionFromUIUserNotificationAction(void *a1)
{
  id v1 = a1;
  id v2 = [v1 identifier];
  unint64_t v3 = [v1 title];
  uint64_t v4 = [v1 isAuthenticationRequired];
  if ([v1 isDestructive]) {
    v4 |= 2uLL;
  }
  if (![v1 activationMode]) {
    v4 |= 4uLL;
  }
  if ([v1 behavior] == 1)
  {
    id v5 = [v1 parameters];
    uint64_t v6 = [v5 objectForKey:@"UIUserNotificationTextInputActionButtonTitleKey"];
    uint64_t v7 = [MEMORY[0x1E4F44660] actionWithIdentifier:v2 title:v3 options:v4 textInputButtonTitle:v6 textInputPlaceholder:&stru_1ED0E84C0];
  }
  else
  {
    uint64_t v7 = [MEMORY[0x1E4F445D8] actionWithIdentifier:v2 title:v3 options:v4];
  }

  return v7;
}

__n128 _UIUpdateSchedulerRequestUpdate@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v6 + 640) != 1
    || (uint64_t v7 = (__n128 *)(v6 + 616), a2)
    && (*(void *)(v6 + 616) == *(void *)a2 ? (BOOL v8 = *(void *)(v6 + 624) == *(void *)(a2 + 8)) : (BOOL v8 = 0),
        v8 ? (BOOL v9 = *(void *)(v6 + 632) == *(void *)(a2 + 16)) : (BOOL v9 = 0),
        !v9))
  {
    applyRequestRegistryChanges(*(void *)(a1 + 8));
    applyTimingChanges((uint64_t *)v6);
    if (a2)
    {
      uint64_t v10 = *(void *)(a2 + 16);
      *(_OWORD *)(v6 + 616) = *(_OWORD *)a2;
      *(void *)(v6 + 632) = v10;
      *(_DWORD *)(v6 + 640) = 1;
      *(_OWORD *)(v6 + 696) = 0u;
      uint64_t v11 = *(void *)(v6 + 616);
      *(void *)(v6 + 64_Block_object_dispose(&a9, 8) = v11;
      *(_OWORD *)(v6 + 664) = *(_OWORD *)(v6 + 624);
      *(void *)(v6 + 656) = *(void *)(v6 + 560) + v11;
    }
    else
    {
      uint64_t v12 = *(void *)(v6 + 600) + *(void *)(v6 + 744) + 1000000000000000;
      uint64_t v13 = mach_absolute_time() + 1000000000000000 + *(void *)(v6 + 576);
      uint64_t v14 = *(void *)(v6 + 552);
      if (!v14 || !*(unsigned char *)(v14 + 28)) {
        -[_UIUpdateTarget start](v14);
      }
      long long v23 = 0u;
      long long v24 = 0u;
      long long v22 = 0u;
      frameSourceGetTiming(&v20, v6, v12, v13, &v22);
      *(_OWORD *)(v6 + 616) = v20;
      uint64_t v15 = v22;
      *(void *)(v6 + 632) = v21;
      *(_DWORD *)(v6 + 640) = 1;
      *(void *)(v6 + 696) = *((void *)&v24 + 1);
      *(void *)(v6 + 704) = v23;
      *(void *)(v6 + 64_Block_object_dispose(&a9, 8) = *(void *)(v6 + 616);
      *(_OWORD *)(v6 + 664) = *(_OWORD *)(v6 + 624);
      *(void *)(v6 + 656) = v15;
    }
    *(_WORD *)(v6 + 680) = 0;
    *(void *)(v6 + 68_Block_object_dispose(&a9, 8) = *(void *)(v6 + 592);
    uint64_t v7 = (__n128 *)(v6 + 616);
    double v16 = _UIUpdateSetCurrentTiming((unint64_t *)(v6 + 616), 1);
    if (!*(_DWORD *)(v6 + 584)) {
      objc_msgSend(MEMORY[0x1E4F39CF8], "finishFrameWithToken:", 0, v16);
    }
    unint64_t v17 = *(void *)(v6 + 664);
    double v18 = _UIMediaTimeForMachTime(*(void *)(v6 + 648));
    *(_DWORD *)(v6 + 584) = [MEMORY[0x1E4F39CF8] startFrameWithReason:35 beginTime:v18 commitDeadline:_UIMediaTimeForMachTime(v17)];
    **(_DWORD **)uint64_t v6 = 3;
    signalChanges(a1, 1);
  }
  __n128 result = *v7;
  *a3 = *v7;
  a3[1].n128_u64[0] = v7[1].n128_u64[0];
  return result;
}

uint64_t (*(*(*schedulerStepScheduledLowLatencySection(uint64_t a1))(uint64_t a1))(uint64_t a1, unint64_t *a2))()
{
  *(unsigned char *)(a1 + 681) = *(unsigned char *)(a1 + 761);
  double v2 = _UIMediaTimeForMachTime(*(void *)(a1 + 648));
  uint64_t v3 = mach_absolute_time();
  _UIQOSManagedCommitsBegin(@"LowLatency", @"LowLatency");
  _UIQOSProcessingBegin("UIUCLoLa", 2, v3, *(void *)(a1 + 664));
  kdebug_trace();
  qword_1EB265730 = v3;
  _UIUpdateSequenceRun((uint64_t **)&_UIUpdateLowLatencySequence, a1 + 616, v2);
  unint64_t v4 = _UIMachTimeForMediaTime(0.0003);
  if (v4 <= mach_absolute_time() - v3) {
    _UIQOSMarkIntervalRelevant();
  }
  kdebug_trace();
  _UIQOSProcessingEnd();
  _UIQOSManagedCommitsEnd(@"LowLatency", @"LowLatency");
  return schedulerStepScheduledDone;
}

uint64_t __setupUpdateSequence_block_invoke_3(uint64_t a1, uint64_t a2)
{
  if ([MEMORY[0x1E4F39CF8] currentState]) {
    _UIQOSMarkIntervalRelevant();
  }
  if ((void)xmmword_1EB265718) {
    [MEMORY[0x1E4F39CF8] setFrameInputTime:*(unsigned int *)(a2 + 584) withToken:_UIMediaTimeForMachTime(xmmword_1EB265718)];
  }
  if (*((void *)&xmmword_1EB265718 + 1)) {
    objc_msgSend(MEMORY[0x1E4F39CF8], "setRemoteInputMachTime:");
  }
  if (*(unsigned char *)(a2 + 761) && !*(unsigned char *)(a2 + 762))
  {
    if (qword_1EB2620A8 != -1) {
      dispatch_once(&qword_1EB2620A8, &__block_literal_global_31_3);
    }
    if (_MergedGlobals_1173) {
      [MEMORY[0x1E4F39CF8] setEmptyLowLatency:1];
    }
    else {
      [MEMORY[0x1E4F39CF8] setLowLatency:1];
    }
    [MEMORY[0x1E4F39CF8] activate];
  }
  *(_DWORD *)(a2 + 352) = 0;
  _UIUpdateInputSetInputChanged(*(_DWORD **)(a2 + 400), a2 + 352);
  return _UIApplicationFlushCATransaction(1);
}

id _bestMatchConformingToTypes(void *a1, void *a2)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  id v5 = v3;
  id v6 = v4;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  id v7 = v5;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v42 objects:v48 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v43;
    while (2)
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v43 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v12 = *(void **)(*((void *)&v42 + 1) + 8 * i);
        if ([v6 containsObject:v12])
        {
          id v28 = v12;
          goto LABEL_31;
        }
      }
      uint64_t v9 = [v7 countByEnumeratingWithState:&v42 objects:v48 count:16];
      if (v9) {
        continue;
      }
      break;
    }
  }

  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  id v13 = v7;
  uint64_t v14 = [v13 countByEnumeratingWithState:&v38 objects:v47 count:16];
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = *(void *)v39;
    uint64_t v30 = *(void *)v39;
    id v31 = v13;
    do
    {
      uint64_t v17 = 0;
      uint64_t v32 = v15;
      do
      {
        if (*(void *)v39 != v16) {
          objc_enumerationMutation(v13);
        }
        uint64_t v18 = objc_msgSend(MEMORY[0x1E4F442D8], "_typeWithIdentifier:allowUndeclared:", *(void *)(*((void *)&v38 + 1) + 8 * v17), 1, v30, v31);
        if (v18)
        {
          uint64_t v19 = (void *)v18;
          uint64_t v33 = v17;
          long long v36 = 0u;
          long long v37 = 0u;
          long long v34 = 0u;
          long long v35 = 0u;
          id v20 = v6;
          uint64_t v21 = [v20 countByEnumeratingWithState:&v34 objects:v46 count:16];
          if (v21)
          {
            uint64_t v22 = v21;
            uint64_t v23 = *(void *)v35;
            while (2)
            {
              for (uint64_t j = 0; j != v22; ++j)
              {
                if (*(void *)v35 != v23) {
                  objc_enumerationMutation(v20);
                }
                uint64_t v25 = *(void **)(*((void *)&v34 + 1) + 8 * j);
                uint64_t v26 = [MEMORY[0x1E4F442D8] _typeWithIdentifier:v25 allowUndeclared:1];
                BOOL v27 = v26;
                if (v26 && ([v26 conformsToType:v19] & 1) != 0)
                {
                  id v28 = v25;

                  goto LABEL_31;
                }
              }
              uint64_t v22 = [v20 countByEnumeratingWithState:&v34 objects:v46 count:16];
              if (v22) {
                continue;
              }
              break;
            }
          }

          uint64_t v16 = v30;
          id v13 = v31;
          uint64_t v15 = v32;
          uint64_t v17 = v33;
        }
        ++v17;
      }
      while (v17 != v15);
      uint64_t v15 = [v13 countByEnumeratingWithState:&v38 objects:v47 count:16];
      id v28 = 0;
    }
    while (v15);
  }
  else
  {
    id v28 = 0;
  }
LABEL_31:

  return v28;
}

void sub_18644056C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  objc_destroyWeak(v14);
  objc_destroyWeak((id *)(v15 - 88));
  _Block_object_dispose(&a14, 8);
  _Unwind_Resume(a1);
}

void sub_186440F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose((const void *)(v39 - 224), 8);
  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__125(uint64_t a1, uint64_t a2)
{
  __n128 result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_1864413D4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t ___initializeAllowsCreationOfFileURLFromItemProvider_block_invoke()
{
  uint64_t result = _UIIsPrivateMainBundle();
  _MergedGlobals_1174 = result ^ 1;
  return result;
}

void sub_186441860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void _itemLayoutFromPreview(uint64_t a1, void *a2, void *a3, int a4)
{
  id v7 = a2;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  uint64_t v8 = (_OWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  id v9 = a3;
  [v7 size];
  *(void *)a1 = 0;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = 0;
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + 24) = v11;
  uint64_t v12 = [v7 target];
  [v12 center];
  double v14 = v13;
  double v16 = v15;
  uint64_t v17 = [v7 target];
  uint64_t v18 = [v17 container];
  double v19 = _UIContextMenuConvertPointBetweenViews(v18, v9, v14, v16);
  uint64_t v21 = v20;

  *(double *)(a1 + 32) = v19;
  *(void *)(a1 + 40) = v21;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  uint64_t v22 = [v7 target];
  uint64_t v23 = v22;
  if (v22) {
    [v22 transform];
  }
  else {
    memset(&v38, 0, sizeof(v38));
  }
  long long v24 = *(_OWORD *)&v38.c;
  *uint64_t v8 = *(_OWORD *)&v38.a;
  *(_OWORD *)(a1 + 8_Block_object_dispose(&a9, 8) = v24;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)&v38.tx;

  if (a4)
  {
    memset(&v38, 0, sizeof(v38));
    uint64_t v25 = [v7 target];
    uint64_t v26 = [v25 container];
    BOOL v27 = [v7 target];
    id v28 = [v27 container];
    id v29 = [v28 _window];
    _UIGetTransformBetweenViews(v26, v29, 1, (uint64_t)&v38);

    long long v30 = *(_OWORD *)(a1 + 88);
    *(_OWORD *)&t1.CATransform3D a = *v8;
    *(_OWORD *)&t1.CGFloat c = v30;
    *(_OWORD *)&t1.tdouble x = *(_OWORD *)(a1 + 104);
    CGAffineTransform v36 = v38;
    CGAffineTransformConcat((CGAffineTransform *)(a1 + 72), &t1, &v36);
  }
  __asm { FMOV            V0.2D, #0.5 }
  *(_OWORD *)(a1 + 56) = _Q0;
  *(void *)(a1 + 120) = 0x3FF0000000000000;
}

id _DefaultParametersForView(void *a1)
{
  id v1 = a1;
  double v2 = objc_opt_new();
  id v3 = [v1 backgroundColor];

  if (v3) {
    [v1 backgroundColor];
  }
  else {
  id v4 = +[UIColor clearColor];
  }
  [v2 setBackgroundColor:v4];

  return v2;
}

void sub_186442EB4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)&STACK[0x220]);
  _Unwind_Resume(a1);
}

void sub_186443FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  objc_destroyWeak(v27);
  objc_destroyWeak(v26);
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186444950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186445FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id __mergedOptionDictionaries(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v4 count])
  {
    id v5 = (void *)[v3 mutableCopy];
    [v5 addEntriesFromDictionary:v4];

    id v3 = v5;
  }

  return v3;
}

void sub_186447D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 128), 8);
  _Unwind_Resume(a1);
}

id _UIFontPickerLoadRecentFontDescriptors()
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  os_log_t v0 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:7];
  id v1 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  double v2 = [v1 arrayForKey:@"UIFontPickerRecentFamilies"];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = +[_UIFontPickerFontInfo infoWithName:*(void *)(*((void *)&v10 + 1) + 8 * i)];
        if ([v7 isFontFamilyAvailable] && (unint64_t)objc_msgSend(v0, "count") <= 7)
        {
          uint64_t v8 = [v7 fontDescriptor];
          [v0 addObject:v8];
        }
      }
      uint64_t v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v4);
  }

  return v0;
}

void _UIFontPickerLoadRecentsMatchingConfiguration(void *a1)
{
}

void _UIFontPickerLoadRecentsMatchingConfigurationForSuite(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v32 = 0;
  uint64_t v33 = &v32;
  uint64_t v34 = 0x2050000000;
  uint64_t v5 = (void *)qword_1EB262108;
  long long v35 = (void *)qword_1EB262108;
  if (!qword_1EB262108)
  {
    uint64_t v27 = MEMORY[0x1E4F143A8];
    uint64_t v28 = 3221225472;
    id v29 = __getFontPickerClientFontContextClass_block_invoke;
    long long v30 = &unk_1E52D9900;
    id v31 = &v32;
    __getFontPickerClientFontContextClass_block_invoke((uint64_t)&v27);
    uint64_t v5 = (void *)v33[3];
  }
  id v6 = v5;
  _Block_object_dispose(&v32, 8);
  id v7 = [v3 _clientFontContextEndpoint];
  if (v7)
  {
    uint64_t v8 = [v6 sharedInstanceForEndpoint:v7];
LABEL_9:

    long long v13 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:7];
    double v14 = (void *)[objc_alloc(MEMORY[0x1E4F1CB18]) initWithSuiteName:v4];
    uint64_t v15 = [v14 arrayForKey:@"UIFontPickerRecentFamilies"];
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    v23[2] = ___UIFontPickerLoadRecentsMatchingConfigurationForSuite_block_invoke;
    _OWORD v23[3] = &unk_1E52FF630;
    id v24 = v3;
    id v16 = v13;
    id v25 = v16;
    uint64_t v26 = v15;
    id v17 = v15;
    id v18 = v3;
    [v8 runBlockInClientFontContext:v23];
    double v19 = v26;
    id v20 = v16;

    return;
  }
  uint64_t v32 = 0;
  uint64_t v33 = &v32;
  uint64_t v34 = 0x2020000000;
  id v9 = (void (*)(void))off_1EB262110;
  long long v35 = off_1EB262110;
  if (!off_1EB262110)
  {
    uint64_t v27 = MEMORY[0x1E4F143A8];
    uint64_t v28 = 3221225472;
    id v29 = __getFSFontPickerSupportListenerEndpointSymbolLoc_block_invoke;
    long long v30 = &unk_1E52D9900;
    id v31 = &v32;
    long long v10 = FontServicesLibrary();
    long long v11 = dlsym(v10, "FSFontPickerSupportListenerEndpoint");
    *(void *)(v31[1] + 24) = v11;
    off_1EB262110 = *(_UNKNOWN **)(v31[1] + 24);
    id v9 = (void (*)(void))v33[3];
  }
  _Block_object_dispose(&v32, 8);
  if (v9)
  {
    long long v12 = v9();
    uint64_t v8 = [v6 sharedInstanceForEndpoint:v12];

    goto LABEL_9;
  }
  uint64_t v21 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v22 = [NSString stringWithUTF8String:"NSXPCListenerEndpoint *_FSFontPickerSupportListenerEndpoint(void)"];
  objc_msgSend(v21, "handleFailureInFunction:file:lineNumber:description:", v22, @"UIFontPickerViewControllerConfiguration.m", 20, @"%s", dlerror());

  __break(1u);
}

void sub_186448CCC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void _UIFontPickerPersistToRecents(void *a1)
{
}

void _UIFontPickerPersistToRecentsForSuite(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = (objc_class *)MEMORY[0x1E4F1CB18];
  id v5 = a2;
  id v6 = (void *)[[v4 alloc] initWithSuiteName:v5];

  uint64_t v7 = [v6 arrayForKey:@"UIFontPickerRecentFamilies"];
  uint64_t v8 = (void *)v7;
  id v9 = (void *)MEMORY[0x1E4F1CBF0];
  if (v7) {
    id v9 = (void *)v7;
  }
  id v10 = v9;

  long long v11 = objc_opt_new();
  uint64_t v16 = MEMORY[0x1E4F143A8];
  uint64_t v17 = 3221225472;
  id v18 = ___UIFontPickerPersistToRecentsForSuite_block_invoke;
  double v19 = &unk_1E52E57D8;
  id v12 = v3;
  id v20 = v12;
  id v13 = v11;
  id v21 = v13;
  [v10 enumerateObjectsUsingBlock:&v16];

  if (objc_msgSend(v12, "isFontFamilyAvailable", v16, v17, v18, v19))
  {
    double v14 = [v12 fontName];
    if (v14)
    {
      [v13 insertObject:v14 atIndex:0];
    }
    else
    {
      uint64_t v15 = [v12 familyName];
      [v13 insertObject:v15 atIndex:0];
    }
  }
  [v6 setObject:v13 forKey:@"UIFontPickerRecentFamilies"];
}

void __getFontPickerClientFontContextClass_block_invoke(uint64_t a1)
{
  FontServicesLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("FontPickerClientFontContext");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1EB262108 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    double v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getFontPickerClientFontContextClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIFontPickerViewControllerConfiguration.m", 19, @"Unable to find class %s", "FontPickerClientFontContext");

    __break(1u);
  }
}

void *FontServicesLibrary()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!FontServicesLibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    void v4[2] = (void *)3221225472;
    v4[3] = __FontServicesLibraryCore_block_invoke;
    void v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_1E52FF650;
    uint64_t v6 = 0;
    FontServicesLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  os_log_t v0 = (void *)FontServicesLibraryCore_frameworkLibrary;
  if (!FontServicesLibraryCore_frameworkLibrary)
  {
    os_log_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *FontServicesLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIFontPickerViewControllerConfiguration.m", 18, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __FontServicesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  FontServicesLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

void *__getFSFontPickerSupportListenerEndpointSymbolLoc_block_invoke(uint64_t a1)
{
  double v2 = FontServicesLibrary();
  uint64_t result = dlsym(v2, "FSFontPickerSupportListenerEndpoint");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1EB262110 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_18644B4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __createDataWithCompletion_block_invoke(uint64_t a1)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __createDataWithCompletion_block_invoke_2;
  v3[3] = &unk_1E52FF4F0;
  double v2 = *(void **)(a1 + 32);
  id v4 = *(id *)(a1 + 40);
  if (([v2 _createUserActivityDataWithOptions:0 completionHandler:v3] & 1) == 0) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

uint64_t __createDataWithCompletion_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_18644D4C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getFSFontPickerSupportListenerEndpointSymbolLoc_block_invoke_0(void *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1EB262138)
  {
    v5[1] = (void *)MEMORY[0x1E4F143A8];
    v5[2] = (void *)3221225472;
    v5[3] = __FontServicesLibraryCore_block_invoke_0;
    void v5[4] = &__block_descriptor_40_e5_v8__0l;
    void v5[5] = v5;
    long long v6 = xmmword_1E52FF6C0;
    uint64_t v7 = 0;
    qword_1EB262138 = _sl_dlopen();
  }
  double v2 = (void *)qword_1EB262138;
  if (!qword_1EB262138)
  {
    a1 = [MEMORY[0x1E4F28B00] currentHandler];
    double v2 = [NSString stringWithUTF8String:"void *FontServicesLibrary(void)"];
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, @"_UIFontPickerActionHostToClient.m", 18, @"%s", v5[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v3 = v5[0];
  if (v5[0]) {
LABEL_7:
  }
    free(v3);
  uint64_t result = dlsym(v2, "FSFontPickerSupportListenerEndpoint");
  *(void *)(*(void *)(a1[4] + 8) + 24) = result;
  _MergedGlobals_1178 = *(_UNKNOWN **)(*(void *)(a1[4] + 8) + 24);
  return result;
}

uint64_t __FontServicesLibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  qword_1EB262138 = result;
  return result;
}

void sub_18644F434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18644F8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18644FB60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void __GetReportEndpointFromInfoPlist_block_invoke()
{
  os_log_t v0 = [MEMORY[0x1E4F28B50] mainBundle];
  uint64_t v1 = [v0 objectForInfoDictionaryKey:@"NSAdvertisingAttributionReportEndpoint"];

  double v2 = (void *)MEMORY[0x1E4F1CB10];
  id v3 = [v1 description];
  uint64_t v4 = [v2 URLWithString:v3 encodingInvalidCharacters:0];
  long long v5 = (void *)_MergedGlobals_1179;
  _MergedGlobals_1179 = v4;

  if (!_MergedGlobals_1179)
  {
    long long v6 = *(NSObject **)(__UILogGetCategoryCachedImpl("EventAttribution", &qword_1EB262150) + 8);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl(&dword_1853B0000, v6, OS_LOG_TYPE_ERROR, "Application created an instance of UIEventAttribution but could not find a report endpoint URL. Event attributions from this app will not be sent to the browser. Ensure you have defined an appropriate URL in your app's Info.plist under the NSAdvertisingAttributionReportEndpoint key.", v7, 2u);
    }
  }
}

void *_pasteboardThreadLocalDataOwner()
{
  pthread_once(&_dataOwnerKeyOnce, (void (*)(void))_createDataOwnerKey);
  pthread_key_t v0 = _dataOwnerKey;
  return pthread_getspecific(v0);
}

uint64_t _createDataOwnerKey()
{
  return pthread_key_create((pthread_key_t *)&_dataOwnerKey, 0);
}

void _pasteboardCacheQueue_removeItemCollectionForName(void *a1)
{
  id v1 = a1;
  _pasteboardCacheQueue_PasteboardNametoItemCollectionMap();
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  [v2 removeObjectForKey:v1];
}

void sub_1864526C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _sendPasteboardChangedNotification(void *a1)
{
  id v1 = (void *)MEMORY[0x1E4F28EB8];
  id v2 = a1;
  id v3 = [v1 defaultCenter];
  [v3 postNotificationName:@"UIPasteboardChangedNotification" object:v2];
}

void _pasteboardCacheQueue_setPinnedItemCollectionForName(void *a1, void *a2)
{
  id v3 = a2;
  id v5 = a1;
  uint64_t v4 = _pasteboardCacheQueue_PasteboardNameToPinnedItemCollectionMap();
  [v4 setObject:v3 forKeyedSubscript:v5];

  _pasteboardCacheQueue_incrementCountOffsetForName(v5);
}

void _pasteboardCacheQueue_removePasteboardForName(void *a1)
{
  id v1 = a1;
  _pasteboardCacheQueue_PasteboardNameToPasteboardMap();
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  [v2 removeObjectForKey:v1];
}

void sub_186452D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _pasteboardCacheQueue_removePinnedItemCollectionForName(void *a1)
{
  id v2 = a1;
  id v1 = _pasteboardCacheQueue_PasteboardNameToPinnedItemCollectionMap();
  [v1 removeObjectForKey:v2];

  _pasteboardCacheQueue_incrementCountOffsetForName(v2);
}

void sub_18645318C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _getTemporaryLocalGeneralPasteboard(void *a1)
{
  id v2 = _serverConnection();
  id v6 = 0;
  id v3 = [v2 localGeneralPasteboardWithAuthenticationBlock:0 dataOwnerBlock:&__block_literal_global_356_0 error:&v6];
  id v4 = v6;

  if (a1) {
    *a1 = v4;
  }

  return v3;
}

void _removePinnedItemCollectionForName(void *a1)
{
  id v1 = a1;
  id v2 = _pasteboardCacheQueue();
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___removePinnedItemCollectionForName_block_invoke;
  block[3] = &unk_1E52D9F70;
  id v5 = v1;
  id v3 = v1;
  dispatch_sync(v2, block);
}

id _pasteboardAuthenticatedMessageQueue()
{
  if (qword_1EB25CA48 != -1) {
    dispatch_once(&qword_1EB25CA48, &__block_literal_global_358_1);
  }
  pthread_key_t v0 = (void *)qword_1EB25CA40;
  return v0;
}