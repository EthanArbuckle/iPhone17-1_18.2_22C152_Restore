@interface _UIKeyboardStateManager
+ (BOOL)_isInputEligibleForSpaceAutodelete:(id)a3;
+ (BOOL)isHardwareCommandKeyBeingHeld;
+ (BOOL)isHardwareShiftKeyBeingHeld;
+ (Class)layoutClassForInputMode:(id)a3 keyboardType:(int64_t)a4 screenTraits:(id)a5;
- (BOOL)_canDeleteForward;
- (BOOL)_canHandleResponderCommand:(SEL)a3;
- (BOOL)_canHandleResponderCommandConservatively:(SEL)a3;
- (BOOL)_cancelOperation:(BOOL)a3 testOnly:(BOOL)a4;
- (BOOL)_containsUsernamePasswordPairsInAutofillGroup:(id)a3;
- (BOOL)_delegateRequiresKeyEvents;
- (BOOL)_handleKeyCommand:(id)a3;
- (BOOL)_handleKeyInputMethodCommandForEvent:(id)a3 canHandleAppKeyCommand:(BOOL)a4;
- (BOOL)_handlesKeyCommandForEvent:(id)a3;
- (BOOL)_hasCandidates;
- (BOOL)_hasMarkedText;
- (BOOL)_insertSupplementalCandidate:(id)a3 overridingCandidateText:(id)a4;
- (BOOL)_isKeyCommand:(id)a3;
- (BOOL)_isSelecting;
- (BOOL)_isShowingCandidateUIWithAvailableCandidates;
- (BOOL)_isShowingSuggestionForKeyboardCamera;
- (BOOL)_isValidKeyInput:(id)a3;
- (BOOL)_mimicShiftBeingHeld;
- (BOOL)_needsCandidates;
- (BOOL)_shouldAcceptAutocorrectionOnSelectionChange;
- (BOOL)_shouldEmitString:(id)a3 forKeyEvent:(id)a4;
- (BOOL)_shouldLoadAutofillSignUpInputViewController;
- (BOOL)_shouldLoadPredictionsBasedOnCurrentTraits;
- (BOOL)_shouldRequestInputManagerSyncForKeyboardOutputCallbacks:(id)a3;
- (BOOL)acceptAutofillExtraCandidateIfNeeded:(id)a3;
- (BOOL)acceptInputString:(id)a3;
- (BOOL)acceptWord:(id)a3 firstDelete:(unint64_t)a4;
- (BOOL)acceptWord:(id)a3 firstDelete:(unint64_t)a4 forInput:(id)a5;
- (BOOL)allowsReachableKeyboard;
- (BOOL)applyAutocorrection:(id)a3;
- (BOOL)assertTextForRemoteDocument:(id)a3 withSelectionDelta:(id)a4 updatingSelection:(BOOL)a5;
- (BOOL)autoDeleteOK;
- (BOOL)autocapitalizationPreference;
- (BOOL)autocorrectSpellingEnabled;
- (BOOL)autocorrectionPreference;
- (BOOL)automaticMinimizationEnabled;
- (BOOL)autoshifted;
- (BOOL)callLayoutIgnoresShiftState;
- (BOOL)callLayoutIsShiftKeyBeingHeld;
- (BOOL)callLayoutIsShiftKeyPlaneChooser;
- (BOOL)callLayoutUsesAutoShift;
- (BOOL)callShouldDeleteWithWordCountForRapidDelete:(int)a3 characterCountForRapidDelete:(int)a4;
- (BOOL)callShouldInsertText:(id)a3;
- (BOOL)callShouldInsertText:(id)a3 onDelegate:(id)a4;
- (BOOL)canHandleDelete;
- (BOOL)canHandleKeyHitTest;
- (BOOL)canInsertAdaptiveImageGlyph;
- (BOOL)canInsertEmojiImageTextAttachment;
- (BOOL)canInsertStickerAsTextInputPayload;
- (BOOL)canPasteImage;
- (BOOL)canPresentPressAndHoldPopover:(id)a3;
- (BOOL)canShowAppConnections;
- (BOOL)canShowPredictionBar;
- (BOOL)canSuggestSupplementalItemsForCurrentSelection;
- (BOOL)canUseCandidateBarAsSupplementToInlineView;
- (BOOL)candidateSelectionPredictionForTraits;
- (BOOL)checkSpellingPreference;
- (BOOL)checkSpellingPreferenceForTraits;
- (BOOL)committingCandidate;
- (BOOL)continuousPathUnderway;
- (BOOL)currentInputModeRequiresLTRMathExpression;
- (BOOL)currentKeyboardTraitsAllowCandidateBarWhileIgnoringHidePredictionTrait:(BOOL)a3;
- (BOOL)cursorIsAtEndOfMarkedText;
- (BOOL)cursorIsAtStartOfInlineCompletionMarkedText;
- (BOOL)deferEventHandlingToSystemWithContext:(id)a3;
- (BOOL)delayedCandidateList;
- (BOOL)delegateAlreadyInAutofillGroup;
- (BOOL)delegateRequiresKeyEvents;
- (BOOL)delegateSuggestionsForCurrentInput;
- (BOOL)delegateSupportsCorrectionUI;
- (BOOL)delegateSupportsImagePaste;
- (BOOL)deleteForwardAndNotify:(BOOL)a3;
- (BOOL)deleteForwardAndNotify:(BOOL)a3 producedByDeleteInput:(BOOL)a4;
- (BOOL)disableInputBars;
- (BOOL)disableSmartInsertDelete;
- (BOOL)dontPushOneTimeCode;
- (BOOL)doubleSpacePeriodPreference;
- (BOOL)editingTraitsMarkedDirty;
- (BOOL)everPresentedPasswordAutofillPanel;
- (BOOL)exclusivityIdentifierMatched;
- (BOOL)floatingForced;
- (BOOL)forCustomInputView;
- (BOOL)handleCandidateListNavigation:(unsigned int)a3 hasCandidatesForTypedInput:(BOOL)a4 shiftDown:(BOOL)a5 keyCommandTypeHandled:(unint64_t *)a6 allowRepeat:(BOOL *)a7 beforePublic:(BOOL)a8 keyEvent:(id)a9;
- (BOOL)handleHorizontalArrow:(BOOL)a3 shiftDown:(BOOL)a4 beforePublicKeyCommands:(BOOL)a5 testOnly:(BOOL)a6 isVerticalCandidate:(BOOL)a7 hasCandidatesForTypedInput:(BOOL)a8 shouldNavigateCandidateList:(BOOL)a9 canHandleInputDelegateCommand:(id)a10 savedHistory:(id)a11 keyCommandTypeHandled:(unint64_t *)a12 keyEvent:(id)a13;
- (BOOL)handleInputManagerBasedKeybind:(id)a3 testOnly:(BOOL)a4;
- (BOOL)handleInputSwitcherForKeyEvent:(id)a3;
- (BOOL)handleKeyAppCommandForCurrentEvent;
- (BOOL)handleKeyCommand:(id)a3 repeatOkay:(BOOL *)a4 beforePublicKeyCommands:(BOOL)a5;
- (BOOL)handleKeyCommandsBeforePublicAsInputUIHost:(id)a3;
- (BOOL)handleKeyInputMethodCommandForCurrentEvent;
- (BOOL)handleKeyTextCommandForCurrentEvent;
- (BOOL)handleMoveCursorToEndOfLine:(BOOL)a3 beforePublicKeyCommands:(BOOL)a4 testOnly:(BOOL)a5 savedHistory:(id)a6 force:(BOOL)a7 canHandleSelectableInputDelegateCommand:(id)a8 keyEvent:(id)a9;
- (BOOL)handleMoveCursorToStartOfLine:(BOOL)a3 beforePublicKeyCommands:(BOOL)a4 testOnly:(BOOL)a5 savedHistory:(id)a6 force:(BOOL)a7 canHandleSelectableInputDelegateCommand:(id)a8 keyEvent:(id)a9;
- (BOOL)handleMoveResponderWithShift:(BOOL)a3;
- (BOOL)handleReturnKey:(BOOL)a3;
- (BOOL)handleTabWithShift:(BOOL)a3;
- (BOOL)handleTabWithShift:(BOOL)a3 beforePublicKeyCommands:(BOOL)a4;
- (BOOL)handleTabWithShift:(BOOL)a3 beforePublicKeyCommands:(BOOL)a4 isMoveAction:(BOOL)a5 testOnly:(BOOL)a6;
- (BOOL)handleVerticalArrow:(BOOL)a3 shiftDown:(BOOL)a4 beforePublicKeyCommands:(BOOL)a5 testOnly:(BOOL)a6 isVerticalCandidate:(BOOL)a7 hasCandidatesForTypedInput:(BOOL)a8 inputDelegateCommandEnabled:(BOOL)a9 canHandleInputDelegateCommand:(id)a10 savedHistory:(id)a11 keyCommandTypeHandled:(unint64_t *)a12 keyEvent:(id)a13;
- (BOOL)handlingKeyCommandFromHardwareKeyboard;
- (BOOL)hardwareKeyboardAttached;
- (BOOL)hasAdvancedInputDelegate;
- (BOOL)hasAsyncCapableInputDelegate;
- (BOOL)hasAutocorrectPrompt;
- (BOOL)hasDelegate;
- (BOOL)hasEditableMarkedText;
- (BOOL)hasInlineCompletionAsMarkedText;
- (BOOL)hasNextKeyResponder;
- (BOOL)hasPreviousKeyResponder;
- (BOOL)imageSuggestionEnabled;
- (BOOL)initializationDone;
- (BOOL)inlineTextCompletionAllowedForAutocorrectionType;
- (BOOL)inlineTextCompletionAllowedForTraits;
- (BOOL)inputModeSwitcherVisible;
- (BOOL)inputUIHandleTabWithShift:(BOOL)a3 testOnly:(BOOL)a4;
- (BOOL)insertAutoFillTextSuggestion:(id)a3;
- (BOOL)insertTextIfShould:(id)a3;
- (BOOL)insertsSpaceAfterPredictiveInput;
- (BOOL)isAutoDeleteActive;
- (BOOL)isAutoFillMode;
- (BOOL)isAutoShifted;
- (BOOL)isAutofillPrediction;
- (BOOL)isCallingInputDelegate;
- (BOOL)isCallingTextChangedDuringInputModeSwitch;
- (BOOL)isCapsLockASCIIToggle;
- (BOOL)isCapsLockSwitchEnabled;
- (BOOL)isCurrentEditResponderInEditingMode;
- (BOOL)isCurrentEditResponderWebKit;
- (BOOL)isDefaultPrediction;
- (BOOL)isInHardwareKeyboardMode;
- (BOOL)isInlineCompletionEnabled;
- (BOOL)isLongPress;
- (BOOL)isMemberOfAutofillGroup:(id)a3;
- (BOOL)isMemberOfPossibleAutofillGroup:(id)a3;
- (BOOL)isMinimized;
- (BOOL)isOutOfProcess;
- (BOOL)isPredictionViewControllerVisible;
- (BOOL)isRTIClient;
- (BOOL)isRotating;
- (BOOL)isSelecting;
- (BOOL)isSelectionAtSentenceAutoshiftBoundary:(BOOL)a3;
- (BOOL)isSelectionChanging;
- (BOOL)isSettingDelegate;
- (BOOL)isShiftKeyBeingHeld;
- (BOOL)isShiftLocked;
- (BOOL)isShifted;
- (BOOL)isTrackpadMode;
- (BOOL)keyboardDelegateStateNeedsRefresh;
- (BOOL)keyboardInputModeIndicatorControllerShouldPresentIndicator:(id)a3;
- (BOOL)keyboardIsInPencilTextInputMode;
- (BOOL)keyboardIsKeyPad;
- (BOOL)keyboardLayoutIsInAnotherProcess;
- (BOOL)keyboardsExpandedPreference;
- (BOOL)liveConversionEnabled;
- (BOOL)markedTextFromClient;
- (BOOL)maximizing;
- (BOOL)needAutofillLogin;
- (BOOL)needCellularAutofill;
- (BOOL)needOneTimeCodeAutofill;
- (BOOL)needsToDeferUpdateTextCandidateView;
- (BOOL)nextCharacterIsWordCharacter;
- (BOOL)nextInputWouldStartSentence;
- (BOOL)noContent;
- (BOOL)originalShouldSkipCandidateSelection;
- (BOOL)performKeyboardEvent:(id)a3;
- (BOOL)performKeyboardOutput:(id)a3 checkingDelegate:(BOOL)a4 forwardToRemoteInputSource:(BOOL)a5;
- (BOOL)performingRemoteTextOperations;
- (BOOL)predictionFromPreference;
- (BOOL)preferFallbackAutofillGroup;
- (BOOL)presentTextCompletionAsMarkedText:(id)a3;
- (BOOL)prewarmsPredictiveCandidates;
- (BOOL)receivedCandidatesInCurrentInputMode;
- (BOOL)returnKeyEnabled;
- (BOOL)selectionScrolling;
- (BOOL)shiftLockPreference;
- (BOOL)shiftLocked;
- (BOOL)shiftLockedEnabled;
- (BOOL)shiftNeedsUpdate;
- (BOOL)shiftPreventAutoshift;
- (BOOL)shifted;
- (BOOL)shouldAcceptCandidate:(id)a3 beforeInputString:(id)a4;
- (BOOL)shouldAcceptContinuousPathConversion:(id)a3;
- (BOOL)shouldAccessInputManagerService;
- (BOOL)shouldAllowRepeatEvent:(id)a3;
- (BOOL)shouldAllowSelectionGestures:(BOOL)a3 atPoint:(CGPoint)a4 toBegin:(BOOL)a5;
- (BOOL)shouldApplyAcceptedAutocorrection:(id)a3;
- (BOOL)shouldApplyKeyboardCommandToUIHost;
- (BOOL)shouldApplyKeyboardInputToUIHost;
- (BOOL)shouldDeferEventHandlingToSystemForTextInput:(id)a3 context:(id)a4;
- (BOOL)shouldDeleteAutospaceBeforeTerminator:(id)a3;
- (BOOL)shouldForwardInsertSpaceAfterAcceptingPredictiveInput:(id)a3;
- (BOOL)shouldGenerateCandidatesAfterSelectionChange;
- (BOOL)shouldLoadAutofillSignUpInputViewController;
- (BOOL)shouldPrioritizeTextSuggestionsOverCandidateResultSet:(id)a3;
- (BOOL)shouldRapidDelete;
- (BOOL)shouldRapidDeleteWithDelegate;
- (BOOL)shouldShowCandidateBar;
- (BOOL)shouldShowKeyboardMenu;
- (BOOL)shouldShowLongPredictionList;
- (BOOL)shouldSkipCandidateSelection;
- (BOOL)shouldSuppressSelectionCommands;
- (BOOL)shouldSwitchFromInputManagerMode:(id)a3 toInputMode:(id)a4;
- (BOOL)shouldSwitchInputMode:(id)a3;
- (BOOL)shouldUnderlineCandidate:(id)a3;
- (BOOL)shouldUseAdaptiveDelete;
- (BOOL)shouldUseCarPlayModes;
- (BOOL)shouldUsePinyinStyleRowNavigation;
- (BOOL)showingEmojiSearch;
- (BOOL)showsCandidateBar;
- (BOOL)showsCandidateInline;
- (BOOL)skipRecomputeInputMode;
- (BOOL)smartInsertDeleteIsEnabled;
- (BOOL)suppliesCompletions;
- (BOOL)supportsNumberKeySelection;
- (BOOL)supportsScheduleReplacementsAfterDeletionToEndOfWord;
- (BOOL)supportsSetPhraseBoundary;
- (BOOL)suppressOptOutASPCandidateUpdateForDelegate:(id)a3;
- (BOOL)suppressUpdateAssistantView;
- (BOOL)suppressUpdateInputMode;
- (BOOL)suppressUpdateLayout;
- (BOOL)suppressUpdateShiftState;
- (BOOL)switchMode:(id)a3 withHUD:(BOOL)a4 withDelay:(BOOL)a5 fromCapsLock:(BOOL)a6;
- (BOOL)syncingDictationLanguageForInputModeSwitch;
- (BOOL)textInputChangesIgnored;
- (BOOL)textInputChangingDirection;
- (BOOL)textInputChangingText;
- (BOOL)textInputTraitsNeedAutofill;
- (BOOL)textInputTraitsNeedAutofillExcludeOneTimeCodeAndContact;
- (BOOL)textInputTraitsNeedContactAutoFill;
- (BOOL)textInputTraitsNeedOneTimeCode;
- (BOOL)textInputTraitsNeedSignup;
- (BOOL)textInputUpdatingSelection;
- (BOOL)uncachedDelegateSupportsImagePaste;
- (BOOL)updatingPreferences;
- (BOOL)userSelectedCurrentCandidate;
- (BOOL)usesAutoDeleteWord;
- (BOOL)usesCandidateSelection;
- (BOOL)usesContinuousPath;
- (BOOL)usesContinuousPathProgressiveCandidates;
- (BOOL)utlizeEuclidModelForDictationReplacement;
- (BOOL)willDoubleSpacePeriodForInputString:(id)a3 afterSpace:(BOOL)a4 elapsedTime:(double)a5;
- (CGRect)correctionRect;
- (CGRect)getCorrectionRectIsVertical:(BOOL *)a3;
- (CGRect)subtractKeyboardFrameFromRect:(CGRect)a3 inView:(id)a4;
- (NSArray)characterRectsForCharacterRange;
- (NSDictionary)currentCandidateRequestInfo;
- (NSMutableDictionary)delegateForCandidateRequest;
- (NSString)activeDictationLanguage;
- (NSString)deletedString;
- (NSString)hardwareKeyboardExclusivityIdentifier;
- (NSUUID)resigningRTISessionIdentifier;
- (NSUUID)skippedEndInputSessionID;
- (TICandidateRequestToken)currentCandidateRequest;
- (TIDocumentState)documentState;
- (TIKeyboardCandidate)autocorrectionToAcceptBeforeProgressiveCandidates;
- (TIKeyboardInputManagerState)inputManagerState;
- (TIKeyboardInputManagerStub)inputManager;
- (TIKeyboardLayout)layoutForKeyHitTest;
- (TIKeyboardState)keyboardState;
- (TIKeyboardTouchEvent)touchEventWaitingForKeyInputEvent;
- (TISmartPunctuationController)smartPunctuationController;
- (TUIKeyboardBackendController)backendController;
- (TUISmartReplyGenerator_Staging)smartReplyGenerator;
- (UIDelayedAction)updateCapsLockDelayOverrideForNonTyping;
- (UIInlineTextCompletionController)inlineTextCompletionController;
- (UIKBAutofillController)autofillController;
- (UIKBInputDelegateManager)inputDelegateManager;
- (UIKBRTIPartner)remoteTextInputPartner;
- (UIKBRTIPartner)remoteTextInputPartnerPrivate;
- (UIKeyInput)delegate;
- (UIKeyboardAutocorrectionController)autocorrectionController;
- (UIKeyboardInputModeIndicatorController)inputModeIndicatorController;
- (UIKeyboardScheduledTask)autoDeleteTask;
- (UIKeyboardTaskQueue)taskQueue;
- (UIPhysicalKeyboardEvent)eventForCurrentWebEvent;
- (UITextInputArrowKeyHistory)arrowKeyHistory;
- (UITextInputTraits)textInputTraits;
- (UITextInputTraits)traitsForPreviousDelegate;
- (UITextInteractionAssistant)textInteractionAssistant;
- (UIView)inputOverlayContainer;
- (UIView)overlayContainerObserved;
- (_UIActionWhenIdle)deferredDidSetDelegateAction;
- (_UIActionWhenIdle)delayedCandidateRequest;
- (_UIKeyboardPresentationDelegate)presentationDelegate;
- (_UIKeyboardStateManager)initWithPresentationDelegateView:(id)a3 forCustomInputView:(BOOL)a4;
- (_UIKeyboardTextSelectionController)customInputDelegateSelectionController;
- (_UIKeyboardTextSelectionController)textSelectionController;
- (_UIKeyboardTextSelectionInteraction)customInputDelegateSelectionInteraction;
- (_UISmartReplyFeedbackManager)smartReplyFeedbackManager;
- (_UIStringAndPositionPair)lastMatchedSupplementalCandidate;
- (_UIStringAndPositionPair)pendingSupplementalCandidateToInsert;
- (_UITextChoiceAccelerationAssistant)_textChoicesAssistant;
- (_UITextChoiceAccelerationAssistant)customInputDelegateChoiceAccelerationAssistant;
- (_UITextInputUserInteractionDelegate)userInteractionDelegate;
- (_UITextInteractionEditMenuAssistant)_editMenuAssistant;
- (double)biasedKeyboardWidthRatio;
- (double)convertForceToGrams:(double)a3;
- (double)deleteWordLastDelete;
- (double)scaleCurrentForceFrom:(double)result to:(double)a4;
- (double)shouldExtendLongPressAction:(id)a3;
- (double)timeoutForCurrentForce;
- (double)timestampOfLastTouchesEnded;
- (id)UILanguagePreference;
- (id)_acquireWaitingOnPerformAutocorrect;
- (id)_activeAssertionController;
- (id)_attributedCorrectionTextEffectAnimation:(id)a3;
- (id)_attributedCorrectionTextEffectStyle:(id)a3;
- (id)_autocorrectionListDemotingAutocorrectionFromList:(id)a3;
- (id)_autofillContext;
- (id)_autofillGroup;
- (id)_contentsOfUsernameField;
- (id)_fallbackAutofillGroup;
- (id)_getAutocorrection;
- (id)_getAutocorrectionList;
- (id)_getCandidateList;
- (id)_getCurrentKeyboardName;
- (id)_getCurrentKeyplaneName;
- (id)_getLocalizedInputMode;
- (id)_keyboardBehaviorState;
- (id)_markedText;
- (id)_rangeForAutocorrectionText:(id)a3;
- (id)_rangeForSupplementalItemText:(id)a3;
- (id)_remoteAppId;
- (id)_remoteAssociatedDomains;
- (id)_remoteLocalizedAppName;
- (id)_remoteUnlocalizedAppName;
- (id)_rtiDocumentStateForAutoFillPopover;
- (id)_sessionIdentifier;
- (id)_supplementalCandidateIcon:(id)a3;
- (id)_targetForResponderCommand:(SEL)a3;
- (id)acceptAutocorrectionForWordTerminator:(id)a3;
- (id)acceptCurrentCandidate;
- (id)acceptCurrentCandidateForInput:(id)a3;
- (id)acceptInlineCandidate;
- (id)acceptInlineCandidateForInput:(id)a3;
- (id)activeLayout;
- (id)asyncCapableInputDelegate;
- (id)asyncInputDelegate;
- (id)asyncWebKitInteractionDelegate;
- (id)attributedCorrectionFromTextAnimationCandidate:(id)a3;
- (id)attributedText;
- (id)autocorrectPromptRectsFromFirstDelegateRect:(CGRect)a3 lastDelegateRect:(CGRect)a4;
- (id)autocorrectionRecordForWord:(id)a3;
- (id)buildInputSourceState;
- (id)candidateList;
- (id)candidateResultSet;
- (id)changedDelegate;
- (id)chooseSupplementalCandidateCompletion;
- (id)delegateAsResponder;
- (id)desirableInputModesWithExtensions:(BOOL)a3;
- (id)didTeardownExistingDelegate;
- (id)documentIdentifierForInputDelegate:(id)a3;
- (id)dynamicCaretList;
- (id)emojiCandidate:(id)a3;
- (id)externalTask;
- (id)generateAutocorrectionListForSelectedText;
- (id)generateAutocorrectionReplacements:(id)a3;
- (id)handleDeleteAutospaceForInputString:(id)a3 afterSpace:(BOOL)a4;
- (id)handleReplacement:(id)a3 forSpaceAndInput:(id)a4;
- (id)hardwareKeyboardsSeenPreference;
- (id)implProxy;
- (id)inlineCompletionAsMarkedText;
- (id)inputDelegate;
- (id)inputEventForInputString:(id)a3;
- (id)inputForMarkedText;
- (id)inputModePreference;
- (id)inputOverlayContainerForCandidateView:(BOOL)a3;
- (id)inputStringFromPhraseBoundary;
- (id)inputSystemSourceSession;
- (id)inputWordForTerminatorAtSelection;
- (id)internationalKeyDisplayStringOnEmojiKeyboard;
- (id)keyboardWindowSnapshot;
- (id)layoutState;
- (id)physicalKeyboardEventWithInput:(id)a3 inputFlags:(int)a4;
- (id)remoteTextEditingMetadata;
- (id)replacementsFromSelectedText;
- (id)responderForSendCurrentLocation;
- (id)savedAutocorrectionListForCandidate:(id)a3;
- (id)searchStringForMarkedText;
- (id)textContentTypeForCurrentInputDelegate;
- (id)textSuggestions;
- (id)updateKeyBehaviors:(id)a3 withBehaviors:(id)a4 forState:(id)a5;
- (id)updateSecureCandidateRenderTraits;
- (id)updatedKeyBehaviors;
- (id)webInputDelegate;
- (id)willSetupNewDelegate;
- (int)changeCount;
- (int)predictionType;
- (int)returnKeyType;
- (int64_t)_positionInCandidateList:(id)a3;
- (int64_t)_textInputSourceForDelegate:(id)a3;
- (int64_t)autofillSubMode;
- (int64_t)cachedAutofillMode;
- (int64_t)candidateViewOffset;
- (int64_t)currentHandBias;
- (int64_t)needAutofill;
- (int64_t)needAutofillCandidate:(id)a3;
- (int64_t)preferredCandidateViewTypeForCandidateResultSet:(id)a3;
- (int64_t)textInputSource;
- (unint64_t)_handleKeyCommandCommon:(id)a3 options:(unint64_t)a4;
- (unint64_t)_updateAutocorrectionPreferenceForTraitsWithCurrentPreference:(BOOL)a3;
- (unint64_t)autocorrectionPreferenceForTraits;
- (unint64_t)delegateConformanceType;
- (unint64_t)handleKeyCommand:(id)a3 repeatOkay:(BOOL *)a4 options:(unint64_t)a5;
- (unint64_t)lastChooseSupplementalItemToInsertCallbackIdentifier;
- (unint64_t)lastDeletionCountForFastDelete;
- (unint64_t)maxNumberOfProactiveCells;
- (unint64_t)phraseBoundary;
- (unint64_t)serviceRole;
- (unint64_t)textInputChangingCount;
- (unint64_t)textLengthToDeleteBeforeSelectedRangeForSmartDelete;
- (unsigned)_setAttributedMarkedText:(id)a3 selectedRange:(_NSRange)a4 inputString:(id)a5 lastInputString:(id)a6 searchString:(id)a7 compareAttributes:(BOOL)a8;
- (unsigned)assertIntermediateText:(id)a3;
- (unsigned)autoDeleteCount;
- (unsigned)setMarkedText:(id)a3 selectedRange:(_NSRange)a4 inputString:(id)a5 lastInputString:(id)a6 searchString:(id)a7 candidateOffset:(int64_t)a8 liveConversionSegments:(id)a9 highlighSegmentIndex:(unint64_t)a10;
- (void)_acceptAutocorrection;
- (void)_acceptAutofillCandidateRequiringAuthentication:(id)a3 payloadDelegate:(id)a4 executionContext:(id)a5;
- (void)_acceptSupplementalCandidate:(id)a3 completion:(id)a4;
- (void)_addInputString:(id)a3 withFlags:(unint64_t)a4 withInputManagerHint:(id)a5 withInputSource:(int64_t)a6;
- (void)_attemptAuthenticationWithMessage:(id)a3;
- (void)_cancelPendingSupplementalCandidateInsertion;
- (void)_completePerformInputViewControllerOutput:(id)a3 executionContext:(id)a4;
- (void)_conditionallyNotifyPredictionsAreAvailableForCandidates:(id)a3 containingProactiveTriggers:(BOOL)a4;
- (void)_configureMarkedTextAttributesForConversion:(id)a3 selectedRange:(_NSRange)a4 highlightRange:(_NSRange)a5;
- (void)_deactiveActiveKeys;
- (void)_deleteFromInputWithFlags:(unint64_t)a3;
- (void)_didReplaceText:(id)a3 withSupplementalCandidate:(id)a4;
- (void)_dispatchInsertionPointEnteredText:(id)a3 range:(id)a4 withSupplementalCandidate:(id)a5;
- (void)_dispatchInsertionPointExitedRangeWithSupplementalCandidate;
- (void)_dynamicUserInterfaceTraitDidChange;
- (void)_ensureRTIConnection;
- (void)_forwardNeededShiftStatesToDestination;
- (void)_generateTextSuggestionForKeyboardCamera;
- (void)_handleKeyBehavior:(unint64_t)a3 forKeyType:(id)a4;
- (void)_handleKeyEvent:(id)a3 executionContext:(id)a4;
- (void)_handleWebKeyEvent:(id)a3 withEventType:(int)a4 withInputString:(id)a5 withInputStringIgnoringModifiers:(id)a6 executionContext:(id)a7;
- (void)_handleWebKeyEvent:(id)a3 withEventType:(unint64_t)a4 withInputString:(id)a5 withInputStringIgnoringModifiers:(id)a6;
- (void)_handleWebKeyEvent:(id)a3 withIndex:(unint64_t)a4 inInputString:(id)a5;
- (void)_handleWebKeyEvent:(id)a3 withIndex:(unint64_t)a4 inInputString:(id)a5 executionContext:(id)a6;
- (void)_handleWebKeyEvent:(id)a3 withInputString:(id)a4 executionContext:(id)a5;
- (void)_inputManagerDidGenerateSupplementalCandidates:(id)a3;
- (void)_insertStickerAsNonTextAttachment:(id)a3;
- (void)_insertionPointExitedRangeWithSupplementalCandidate;
- (void)_local_acceptAutocorrection;
- (void)_noteInlineCompletionAsMarkedText:(id)a3;
- (void)_notifyDidTeardownExistingDelegate:(id)a3 newDelegate:(id)a4;
- (void)_notifyWillSetupNewDelegate:(id)a3 existingDelegate:(id)a4;
- (void)_performInputViewControllerOutput:(id)a3;
- (void)_performKeyboardOutput:(id)a3 respectingForwardingDelegate:(BOOL)a4;
- (void)_performTextOperationsForAutoFill:(id)a3;
- (void)_postInputResponderCapabilitiesChangedNotificationWithOutput:(id)a3 selectionChanged:(BOOL)a4;
- (void)_postInputResponderChangedNotification;
- (void)_processInputViewControllerKeyboardOutput:(id)a3 executionContext:(id)a4;
- (void)_reloadInputViewsForSameDelegate:(id)a3 existingDelegate:(id)a4 force:(BOOL)a5 delayEndInputSession:(BOOL)a6;
- (void)_remapKeyEvent:(id)a3 withKeyEventMap:(id)a4;
- (void)_requestInputManagerSync;
- (void)_scheduleInputAdditionOrDeletion:(id)a3;
- (void)_setAutocorrects:(BOOL)a3;
- (void)_setAutofillGroup:(id)a3;
- (void)_setCandidateList:(id)a3;
- (void)_setDelegate:(id)a3 existingDelegate:(id)a4 force:(BOOL)a5 delayEndInputSession:(BOOL)a6;
- (void)_setInputManager:(id)a3;
- (void)_setKeyboardInputMode:(id)a3 userInitiated:(BOOL)a4 force:(BOOL)a5;
- (void)_setKeyboardInputMode:(id)a3 userInitiated:(BOOL)a4 updateIndicator:(BOOL)a5 force:(BOOL)a6 executionContext:(id)a7;
- (void)_setNeedsCandidates:(BOOL)a3;
- (void)_setShiftLockedEnabled:(BOOL)a3;
- (void)_setShiftNeedsUpdate:(BOOL)a3;
- (void)_setSuggestions:(id)a3;
- (void)_setTransientSelectionModeEnabled:(BOOL)a3 forInputDelegate:(id)a4;
- (void)_setWaitingOnPerformAutocorrect:(id)a3;
- (void)_setupDelegate:(id)a3 delegateSame:(BOOL)a4 hardwareKeyboardStateChanged:(BOOL)a5 endingInputSessionIdentifier:(id)a6 force:(BOOL)a7 delayEndInputSession:(BOOL)a8;
- (void)_shouldClearTextSuggestions:(BOOL)a3;
- (void)_showAutofillExtras;
- (void)_stopAutoDeleteAtDocumentStart;
- (void)_tagTouchForTypingMenu:(unsigned int)a3;
- (void)_teardownExistingDelegate:(id)a3 forSetDelegate:(id)a4 force:(BOOL)a5 delayEndInputSession:(BOOL)a6;
- (void)_updateCanSuggestSupplementalItemsForCurrentSelection;
- (void)_updateDelegateRequiresKeyEventsFromRemoteTextInput;
- (void)_updateInputViewControllerOutput:(id)a3 forKeyboardOutput:(id)a4;
- (void)_updateKeyboardConfigurations;
- (void)_willReplaceText:(id)a3 withSupplementalCandidate:(id)a4;
- (void)acceptAutocorrection;
- (void)acceptAutocorrection:(id)a3 executionContextPassingTIKeyboardCandidate:(id)a4;
- (void)acceptAutocorrectionAndEndComposition;
- (void)acceptAutocorrectionForWordTerminator:(id)a3 executionContextPassingTIKeyboardCandidate:(id)a4;
- (void)acceptAutocorrectionWithCompletionHandler:(id)a3;
- (void)acceptAutocorrectionWithCompletionHandler:(id)a3 requestedByRemoteInputDestination:(BOOL)a4;
- (void)acceptCandidate:(id)a3;
- (void)acceptCandidate:(id)a3 forInput:(id)a4;
- (void)acceptCandidate:(id)a3 forInput:(id)a4 executionContext:(id)a5;
- (void)acceptCurrentCandidateIfSelected;
- (void)acceptCurrentCandidateIfSelectedWithExecutionContext:(id)a3;
- (void)acceptFirstCandidate;
- (void)acceptHandwritingCandidate;
- (void)acceptInlineCompletionWithCompletionHandler:(id)a3;
- (void)acceptPredictiveInput:(id)a3;
- (void)acceptPredictiveInput:(id)a3 appendSeparator:(BOOL)a4;
- (void)acceptPredictiveInput:(id)a3 appendSeparator:(BOOL)a4 executionContext:(id)a5;
- (void)acceptPredictiveInput:(id)a3 executionContext:(id)a4;
- (void)acceptRecentInput:(id)a3;
- (void)acceptingCandidateWithTrigger:(id)a3;
- (void)addInputEvent:(id)a3 executionContext:(id)a4;
- (void)addInputObject:(id)a3;
- (void)addInputObject:(id)a3 executionContext:(id)a4;
- (void)addInputString:(id)a3;
- (void)addInputString:(id)a3 fromVariantKey:(BOOL)a4;
- (void)addInputString:(id)a3 withFlags:(unint64_t)a4;
- (void)addInputString:(id)a3 withFlags:(unint64_t)a4 executionContext:(id)a5;
- (void)addInputString:(id)a3 withFlags:(unint64_t)a4 withInputManagerHint:(id)a5;
- (void)addInputString:(id)a3 withFlags:(unint64_t)a4 withInputManagerHint:(id)a5 executionContext:(id)a6;
- (void)addInputString:(id)a3 withFlags:(unint64_t)a4 withInputManagerHint:(id)a5 withInputSource:(int64_t)a6 executionContext:(id)a7;
- (void)addSupplementalLexicon:(id)a3;
- (void)addWordTerminator:(id)a3 afterSpace:(BOOL)a4 afterAcceptingCandidate:(id)a5 elapsedTime:(double)a6 executionContext:(id)a7;
- (void)adjustAutoDeleteTimerForForce:(double)a3;
- (void)adjustCapsLockDelayOverride;
- (void)adjustPhraseBoundaryInForwardDirection:(BOOL)a3 granularity:(int)a4 executionContext:(id)a5;
- (void)adjustSegmentSize:(int64_t)a3;
- (void)animateAutocorrectionToRect:(CGRect)a3 fromRect:(CGRect)a4;
- (void)animateAutocorrectionToText:(id)a3 fromRect:(CGRect)a4;
- (void)applyAssistantItem:(id)a3;
- (void)becomeFirstResponderAndMakeVisible:(BOOL)a3;
- (void)beginAcceptingInlineCompletionByDirectTap;
- (void)callChangedDelegate;
- (void)callLayoutLongPressAction;
- (void)callLayoutSetAutoshift:(BOOL)a3;
- (void)callLayoutSetShift:(BOOL)a3;
- (void)callLayoutUpdateAllLocalizedKeys;
- (void)callLayoutUpdateLocalizedKeys;
- (void)cancelAllKeyEvents;
- (void)cancelCandidateRequests;
- (void)cancelDictationOnSendReturnKeyPressed;
- (void)candidateBarDidExtendWithGesture;
- (void)candidateListAcceptCandidate:(id)a3;
- (void)candidateListInvalidateSelection:(id)a3;
- (void)candidateListSelectionDidChange:(id)a3;
- (void)changingContextWithTrigger:(id)a3;
- (void)cleanUpBeforeInputModeSwitch;
- (void)clearAutoDeleteTimer;
- (void)clearAutocorrectPromptTimer;
- (void)clearAutofillGroup;
- (void)clearCapsLockDelayOverrideTimer;
- (void)clearChangeTimeAndCount;
- (void)clearDelayDeleteTimer;
- (void)clearDelegate;
- (void)clearForwardingInputDelegateAndResign:(BOOL)a3;
- (void)clearIdleDetectionAction;
- (void)clearInput;
- (void)clearInputForMarkedText;
- (void)clearInputWithCandidatesCleared:(BOOL)a3;
- (void)clearKeyboardWindowSnapshot;
- (void)clearLongPressTimer;
- (void)clearRemoteTextInputPartner;
- (void)clearSelection;
- (void)clearShiftState;
- (void)clearTextAlternativesRange;
- (void)clearTimers;
- (void)clearTransientState;
- (void)clearUpdateLastUsedInputModeAction;
- (void)collapseSelection;
- (void)completeAcceptCandidate:(id)a3;
- (void)completeAcceptCandidateBeforeAddingInputObject:(id)a3 executionContext:(id)a4;
- (void)completeAddInputString:(id)a3;
- (void)completeAddInputString:(id)a3 generateCandidates:(BOOL)a4;
- (void)completeDelete;
- (void)completeDeleteFromInput;
- (void)completeDeleteOnceFromInputWithCharacterBefore:(unsigned int)a3;
- (void)completeHandleAutoDelete;
- (void)completeHandleKeyEvent:(id)a3;
- (void)completeUpdateForChangedSelection:(BOOL)a3;
- (void)createTypoTrackerReport;
- (void)deactivateLayout;
- (void)dealloc;
- (void)deferReplaceTextActionToSystem:(id)a3;
- (void)deleteBackward;
- (void)deleteBackwardAndNotify:(BOOL)a3;
- (void)deleteBackwardAndNotifyAtEnd:(BOOL)a3 deletionCount:(unint64_t)a4 reinsertTextInLoop:(BOOL)a5;
- (void)deleteFromInput;
- (void)deleteFromInputWithFlags:(unint64_t)a3;
- (void)deleteFromInputWithFlags:(unint64_t)a3 executionContext:(id)a4;
- (void)deleteHandwritingStrokesAtIndexes:(id)a3;
- (void)deleteOnceFromInputWithExecutionContext:(id)a3;
- (void)detach;
- (void)didAcceptAutocorrection:(id)a3 inputCandidate:(id)a4 wordTerminator:(id)a5;
- (void)didAcceptAutocorrection:(id)a3 inputCandidate:(id)a4 wordTerminator:(id)a5 learningFlagsMask:(unint64_t)a6;
- (void)didApplyAutocorrection:(id)a3 autocorrectPromptFrame:(CGRect)a4;
- (void)didChangeForwardingInputDelegate:(id)a3;
- (void)didChangePhraseBoundary;
- (void)didClearText;
- (void)didSetDelegate;
- (void)disableTransientSelectionMode;
- (void)dismissAutoFillMenu;
- (void)dismissKeyboard;
- (void)dismissTextChoicePrompt;
- (void)displayAutoFillPopoverIfAutoFillModeDetected;
- (void)documentStateFromInputDelegate:(id)a3;
- (void)ejectKeyDown;
- (void)emojiSearchWillInsertEmoji:(id)a3 forSearchQuery:(id)a4;
- (void)emojiSearchWillInsertEmoji:(id)a3 forSearchQuery:(id)a4 selectionMethod:(id)a5 inputType:(id)a6;
- (void)enableTransientInputDelegateSelectionMode;
- (void)enableTransientSelectionMode;
- (void)endAcceptingInlineCompletionByDirectTap;
- (void)fadeAutocorrectPrompt;
- (void)finishSetExtensionInputMode:(id)a3 didChangeDirection:(BOOL)a4;
- (void)finishSetInputMode:(id)a3 didChangeDirection:(BOOL)a4;
- (void)finishSetInputModeToNextInPreferredListWithExecutionContext:(id)a3 withPreviousInputMode:(id)a4;
- (void)finishSetKeyboardInputMode:(id)a3 previousInputMode:(id)a4 didChangeDirection:(BOOL)a5;
- (void)finishTextChanged;
- (void)flushDelayedTasks;
- (void)flushKeyboardOutputOnInputSourceSession;
- (void)flushTouchEventWaitingForKeyInputEventIfNecessary;
- (void)forceShiftUpdate;
- (void)forceShiftUpdateIfKeyboardStateChanged;
- (void)forwardDictationEvent_cancelDictation;
- (void)forwardDictationEvent_handleDictationShouldPause:(BOOL)a3 withNewDelagate:(BOOL)a4;
- (void)forwardDictationEvent_handleTip:(id)a3 title:(id)a4;
- (void)forwardDictationEvent_movePopoverView:(id)a3;
- (void)forwardDictationEvent_resumeDictation;
- (void)forwardDictationEvent_startDictation;
- (void)forwardDictationEvent_stopDictation:(BOOL)a3;
- (void)forwardDictationEvent_stopDictationIgnoreFinalizePhrases;
- (void)forwardDictationEvent_switchToDictationInputModeWithOptions:(id)a3;
- (void)forwardDictationEvent_switchToDictationLanguage:(id)a3;
- (void)forwardDictationEvent_updateIdleDetection:(int64_t)a3;
- (void)forwardKeyboardCameraEvent_selfDestruct;
- (void)forwardKeyboardCameraEvent_startCameraInput:(id)a3;
- (void)forwardKeyboardCameraEvent_updatePreviewText:(id)a3 asMarkedText:(BOOL)a4;
- (void)forwardKeyboardEventBackToDestination:(id)a3;
- (void)generateAutocorrectionWithExecutionContext:(id)a3;
- (void)generateAutocorrectionsWithCompletionHandler:(id)a3;
- (void)generateAutofillCandidate;
- (void)generateAutofillCandidateByAddingTask:(BOOL)a3;
- (void)generateCandidates;
- (void)generateCandidatesAsynchronously;
- (void)generateCandidatesAsynchronouslyWithRange:(_NSRange)a3 selectedCandidate:(id)a4;
- (void)generateCandidatesFromReplacements;
- (void)generateCandidatesWithOptions:(int)a3;
- (void)generateReplacementsForString:(id)a3 candidatesHandler:(id)a4 executionContext:(id)a5;
- (void)handleAcceptedCandidate:(id)a3 executionContext:(id)a4;
- (void)handleAutoDeleteContinuationOnDestinationWithDeletionCount:(unint64_t)a3;
- (void)handleAutoDeleteWithExecutionContext:(id)a3;
- (void)handleAutoFillContactDetected;
- (void)handleAutoFillContactPopoverCommand;
- (void)handleAutoFillCreditCardDetected;
- (void)handleAutoFillCreditCardPopoverCommand;
- (void)handleAutoFillPasswordDetected;
- (void)handleAutoFillPasswordPopoverCommand;
- (void)handleAutofillCredentialSaveIfNeeded:(id)a3;
- (void)handleClear;
- (void)handleClearWithExecutionContext:(id)a3;
- (void)handleClearWithInsertBeforeAdvance:(id)a3;
- (void)handleDelayedActionLongPress:(id)a3;
- (void)handleDelete;
- (void)handleDeleteAsRepeat:(BOOL)a3 executionContext:(id)a4;
- (void)handleDeleteWithExecutionContext:(id)a3;
- (void)handleDeleteWordWithExecutionContext:(id)a3;
- (void)handleDeletionForCandidate:(id)a3;
- (void)handleEmojiInput:(id)a3 keyboardState:(id)a4;
- (void)handleEmojiPopoverKeyCommand;
- (void)handleEventCallbackFromRemoteDestination_didChooseSupplementalItem:(id)a3 toReplaceText:(id)a4;
- (void)handleEventFromRemoteDestination_canSuggestSupplementalItemsForCurrentSelection:(BOOL)a3;
- (void)handleEventFromRemoteSource_autoFillIsMenuPresented:(BOOL)a3;
- (void)handleEventFromRemoteSource_chooseSupplementalItem:(id)a3 toReplaceText:(id)a4;
- (void)handleEventFromRemoteSource_insertAutofillContent:(id)a3;
- (void)handleEventFromRemoteSource_insertSupplementalCandidate:(id)a3 textToCommit:(id)a4;
- (void)handleEventFromRemoteSource_insertionPointEnteredText:(id)a3 withSupplementalCandidate:(id)a4;
- (void)handleGrammarCorrectionEntries:(id)a3;
- (void)handleIdleDetectionAction;
- (void)handleKeyEvent:(id)a3;
- (void)handleKeyEvent:(id)a3 executionContext:(id)a4;
- (void)handleKeyWithString:(id)a3 forKeyEvent:(id)a4 executionContext:(id)a5;
- (void)handleKeyboardInput:(id)a3 executionContext:(id)a4;
- (void)handleModifiersChangeForKeyEvent:(id)a3 executionContext:(id)a4;
- (void)handleRemoteDictationEvent_cancelDictation;
- (void)handleRemoteDictationEvent_handleTip:(id)a3;
- (void)handleRemoteDictationEvent_movePopoverView:(id)a3;
- (void)handleRemoteDictationEvent_resumeDictation;
- (void)handleRemoteDictationEvent_setEditMenuFrame:(id)a3;
- (void)handleRemoteDictationEvent_startDictation;
- (void)handleRemoteDictationEvent_stopDictation:(BOOL)a3;
- (void)handleRemoteDictationEvent_stopDictationIgnoreFinalizePhrases;
- (void)handleRemoteDictationEvent_switchToDictationInputModeWithOptions:(id)a3;
- (void)handleRemoteDictationEvent_switchToDictationLanguage:(id)a3;
- (void)handleRemoteDictationEvent_updateIdleDetection:(int64_t)a3;
- (void)handleRemoteIndirectGestureWithState:(id)a3;
- (void)handleRemoteKeyboardCameraEvent_startCameraInput:(id)a3;
- (void)handleStringInput:(id)a3 withFlags:(unint64_t)a4 withInputManagerHint:(id)a5 executionContext:(id)a6;
- (void)handleTextChoiceBubbleTapped;
- (void)handleUpdateLastUsedInputModeAction:(id)a3;
- (void)handleWebViewCredentialsSaveForWebsiteURL:(id)a3 user:(id)a4 password:(id)a5 passwordIsAutoGenerated:(BOOL)a6;
- (void)hostApplicationDidEnterBackground;
- (void)hostApplicationWillEnterForeground;
- (void)inputManagerDidGenerateAutocorrections:(id)a3 executionContext:(id)a4;
- (void)inputManagerDidGenerateAutocorrections:(id)a3 forPredictiveInput:(id)a4 executionContext:(id)a5;
- (void)inputManagerDidGenerateCandidateResultSet:(id)a3;
- (void)insertAdaptiveImageGlyph:(id)a3;
- (void)insertAttributedText:(id)a3;
- (void)insertCustomTextSuggestion:(id)a3;
- (void)insertDictationResult:(id)a3;
- (void)insertEmojiImageTextAttachment:(id)a3;
- (void)insertSticker:(id)a3;
- (void)insertText:(id)a3 withAlternativePredictions:(id)a4;
- (void)insertTextSuggestionCandidate:(id)a3;
- (void)insertedAccentVariantFromPopover:(id)a3;
- (void)insertedEmojiFromPopover:(id)a3 selectionMethod:(id)a4;
- (void)invalidateTextEntryContextForTextInput:(id)a3;
- (void)keyboardInputModeIndicatorControllerDismissIndicator:(id)a3;
- (void)keyboardInputModeIndicatorControllerPresentIndicator:(id)a3 reason:(id)a4;
- (void)keyboardSceneDelegate:(id)a3 startedPinningInputViewsOnBehalfOfResponder:(id)a4;
- (void)keyboardSceneDelegate:(id)a3 stoppedPinningInputViewsOnBehalfOfResponder:(id)a4;
- (void)layoutDidResize;
- (void)longPressAction;
- (void)longPressAction:(id)a3;
- (void)lookUpResponderChainForCustomInputView;
- (void)modifyTextInputTraits:(id)a3 forceSync:(BOOL)a4;
- (void)moveCursorByAmount:(int64_t)a3;
- (void)movePhraseBoundaryToDirection:(int64_t)a3 granularity:(int64_t)a4;
- (void)nonDestructivelyDismissKeyboard;
- (void)notifyInputSourceStateChangeIfNeeded;
- (void)notifyShiftState;
- (void)optOutASPInTextField;
- (void)performAutoDeleteNumberOfTimes:(unint64_t)a3 deleteOneWord:(BOOL)a4 forwardToInputSource:(BOOL)a5;
- (void)performBlockWithTextInputChangesIgnoredForNonMacOS:(id)a3;
- (void)performDelete;
- (void)performHitTestForTouchEvent:(id)a3 executionContextPassingNSNumber:(id)a4;
- (void)performHitTestForTouchEvents:(id)a3 executionContextPassingNSNumber:(id)a4;
- (void)performKeyBehaviorCommitInline;
- (void)performKeyBehaviorConfirm;
- (void)performKeyBehaviorConfirmFirstCandidate;
- (void)performKeyboardActionButtonAction;
- (void)performKeyboardOutput:(id)a3;
- (void)performKeyboardOutput:(id)a3 checkingDelegate:(BOOL)a4;
- (void)performKeyboardOutput:(id)a3 forwardToRemoteInputSource:(BOOL)a4;
- (void)performKeyboardOutputAsInputViewControllerOutput:(id)a3;
- (void)performKeyboardOutputAsInputViewControllerOutput:(id)a3 textInputSource:(int64_t)a4;
- (void)performKeyboardOutputAsRTIClient:(id)a3;
- (void)performKeyboardOutputInfo:(id)a3;
- (void)performKeyboardOutputOnInputSourceSession:(id)a3;
- (void)performKeyboardOutputOnInputSourceSession:(id)a3 shouldFlush:(BOOL)a4;
- (void)performOnInputSourceSessionActionSelector:(SEL)a3;
- (void)performOperations:(id)a3 withTextInputSource:(int64_t)a4;
- (void)performReturn;
- (void)performSendAction;
- (void)performSendCurrentLocation;
- (void)performStopAutoDeleteAtDocumentStart;
- (void)performTextOperationActionSelector:(SEL)a3;
- (void)populateEuclidCandidates:(BOOL)a3;
- (void)postInputResponderCapabilitiesChangedNotification;
- (void)postInputViewControllerShouldUpdateNotification:(id)a3;
- (void)prepareForSelectionChange;
- (void)prepareKeyboardInputModeFromPreferences:(id)a3;
- (void)presentContinuousPathIntroductionView;
- (void)presentKeyboardFeedbackAssistantViewControllerForLogURL:(id)a3;
- (void)presentTextChoicePromptForRange:(id)a3;
- (void)presentationDelegateWillDetach;
- (void)proceedShouldReturnIfNeededForASP;
- (void)processPayloadInfo:(id)a3;
- (void)pushAutocorrections:(id)a3 requestToken:(id)a4;
- (void)pushCandidateResultSet:(id)a3 requestToken:(id)a4;
- (void)queueDelayedTask:(id)a3;
- (void)recomputeActiveInputModesWithExtensions:(BOOL)a3;
- (void)recomputeActiveInputModesWithExtensions:(BOOL)a3 allowNonLinguisticInputModes:(BOOL)a4;
- (void)refreshAutofillModeIfNecessary;
- (void)refreshKeyboardState;
- (void)refreshKeyboardStateUpdatingSecureCandidateRenderTraits:(BOOL)a3;
- (void)refreshSecureCandidatesIfNecessary;
- (void)reinitializeAfterInputModeSwitch:(BOOL)a3;
- (void)rejectAutocorrection:(id)a3;
- (void)rejectAutocorrectionForPromptFade;
- (void)releaseInputManager;
- (void)releaseInputManagerIfInactive;
- (void)reloadCurrentInputMode;
- (void)removeASPVisualEffectsIfNecessary:(id)a3;
- (void)removeAllDynamicDictionaries;
- (void)removeAutocorrectPrompt;
- (void)removeAutocorrectPromptAndCandidateList;
- (void)removeAutocorrection;
- (void)removeCandidateList;
- (void)removeCapsLockDelayOverride;
- (void)removeInlineTextCompletionPrompt;
- (void)removeRecentInput:(id)a3 completionHandler:(id)a4;
- (void)removeSpaceAfterEmojiForInputString:(id)a3;
- (void)removeSupplementalLexicon:(id)a3;
- (void)removeTextChoicePrompt;
- (void)removeTextChoicePromptAndAutocorrection;
- (void)removeTextChoicePromptWithUnderline;
- (void)removeTextChoiceUnderlines;
- (void)removeTextChoiceUnderlinesInRange:(id)a3;
- (void)removeTextCompletionFromMarkedText:(id)a3;
- (void)replaceAllTextInResponder:(id)a3 withText:(id)a4;
- (void)replaceText:(id)a3;
- (void)resetInputDelegate;
- (void)responseContextDidChange;
- (void)restoreTextSuggestions;
- (void)resumeDictationForResponderChange;
- (void)scheduleReplacementsAfterDeletionToEndOfWord;
- (void)scheduleReplacementsWithOptions:(unint64_t)a3;
- (void)selectionDidChange:(id)a3;
- (void)selectionWillChange:(id)a3;
- (void)sendCallbacksForPostCorrectionsRemoval;
- (void)sendCallbacksForPreCorrectionsDisplay;
- (void)setActiveDictationLanguage:(id)a3;
- (void)setArrowKeyHistory:(id)a3;
- (void)setAttributedMarkedText:(id)a3 selectedRange:(_NSRange)a4 inputString:(id)a5 searchString:(id)a6;
- (void)setAutoDeleteCount:(unsigned int)a3;
- (void)setAutocapitalizationPreference:(BOOL)a3;
- (void)setAutocorrectSpellingEnabled:(BOOL)a3;
- (void)setAutocorrection:(id)a3;
- (void)setAutocorrectionList:(id)a3;
- (void)setAutocorrectionPreference:(BOOL)a3;
- (void)setAutocorrectionToAcceptBeforeProgressiveCandidates:(id)a3;
- (void)setAutofillController:(id)a3;
- (void)setAutomaticMinimizationEnabled:(BOOL)a3;
- (void)setAutoshifted:(BOOL)a3;
- (void)setCanSuggestSupplementalItemsForCurrentSelection:(BOOL)a3;
- (void)setCandidateDisplayIsExtended:(BOOL)a3;
- (void)setCandidateList:(id)a3;
- (void)setCandidateViewOffset:(int64_t)a3;
- (void)setCandidates:(id)a3;
- (void)setCapsLockIfNeeded;
- (void)setCaretVisible:(BOOL)a3;
- (void)setChangedDelegate;
- (void)setChangedDelegate:(id)a3;
- (void)setCharacterRectsForCharacterRange:(id)a3;
- (void)setChooseSupplementalCandidateCompletion:(id)a3;
- (void)setCommittingCandidate:(BOOL)a3;
- (void)setCorrectionLearningAllowed:(BOOL)a3;
- (void)setCurrentCandidateRequest:(id)a3;
- (void)setCurrentCandidateRequestInfo:(id)a3;
- (void)setCustomInputDelegateChoiceAccelerationAssistant:(id)a3;
- (void)setCustomInputDelegateSelectionController:(id)a3;
- (void)setCustomInputDelegateSelectionInteraction:(id)a3;
- (void)setDefaultTextInputTraits:(id)a3;
- (void)setDeferredDidSetDelegateAction:(id)a3;
- (void)setDelayedCandidateRequest:(id)a3;
- (void)setDelegate:(id)a3;
- (void)setDelegate:(id)a3 force:(BOOL)a4;
- (void)setDelegate:(id)a3 force:(BOOL)a4 delayEndInputSession:(BOOL)a5;
- (void)setDelegateForCandidateRequest:(id)a3;
- (void)setDeleteWordLastDelete:(double)a3;
- (void)setDeletedString:(id)a3;
- (void)setDidTeardownExistingDelegate:(id)a3;
- (void)setDisableSmartInsertDelete:(BOOL)a3;
- (void)setDocumentState:(id)a3;
- (void)setDocumentStateForAutocorrection:(id)a3;
- (void)setEditingTraitsMarkedDirty:(BOOL)a3;
- (void)setEventForCurrentWebEvent:(id)a3;
- (void)setEverPresentedPasswordAutofillPanel:(BOOL)a3;
- (void)setExternalTask:(id)a3;
- (void)setFloatingForced:(BOOL)a3;
- (void)setForCustomInputView:(BOOL)a3;
- (void)setHandlingKeyCommandFromHardwareKeyboard:(BOOL)a3;
- (void)setHardwareKeyboardAttached:(BOOL)a3;
- (void)setHardwareKeyboardExclusivityIdentifier:(id)a3;
- (void)setHardwareKeyboardsSeenPreference:(id)a3;
- (void)setHasNextKeyResponder:(BOOL)a3;
- (void)setHasPreviousKeyResponder:(BOOL)a3;
- (void)setInHardwareKeyboardMode:(BOOL)a3;
- (void)setInHardwareKeyboardMode:(BOOL)a3 forceRebuild:(BOOL)a4;
- (void)setInHardwareKeyboardMode:(BOOL)a3 forceRebuild:(BOOL)a4 shouldMoveKeyboard:(BOOL)a5;
- (void)setInHardwareKeyboardMode:(BOOL)a3 shouldMoveKeyboard:(BOOL)a4;
- (void)setInitialDirection;
- (void)setInitialDirectionIgnoreRangeCheck:(BOOL)a3;
- (void)setInlineCompletionAsMarkedText:(id)a3 selectedRange:(_NSRange)a4 inputString:(id)a5 searchString:(id)a6;
- (void)setInputDelegateManager:(id)a3;
- (void)setInputManagerFromCurrentInputMode;
- (void)setInputManagerState:(id)a3;
- (void)setInputMode:(id)a3;
- (void)setInputMode:(id)a3 userInitiated:(BOOL)a4;
- (void)setInputMode:(id)a3 userInitiated:(BOOL)a4 updateIndicator:(BOOL)a5 executionContext:(id)a6;
- (void)setInputModeFromPreferences;
- (void)setInputModeSwitcherVisibleInRemote:(BOOL)a3;
- (void)setInputModeToNextASCIICapableInPreferredList;
- (void)setInputModeToNextInPreferredListWithExecutionContext:(id)a3;
- (void)setIsCallingTextChangedDuringInputModeSwitch:(BOOL)a3;
- (void)setKeyboardDelegateStateNeedsRefresh:(BOOL)a3;
- (void)setKeyboardInputMode:(id)a3 userInitiated:(BOOL)a4;
- (void)setKeyboardInputMode:(id)a3 userInitiated:(BOOL)a4 updateIndicator:(BOOL)a5 executionContext:(id)a6;
- (void)setKeyboardInputModeFromPreferences:(id)a3;
- (void)setKeyboardMinimizedByDictation:(BOOL)a3;
- (void)setKeyboardState:(id)a3;
- (void)setLastChooseSupplementalItemToInsertCallbackIdentifier:(unint64_t)a3;
- (void)setLastDeletionCountForFastDelete:(unint64_t)a3;
- (void)setLastMatchedSupplementalCandidate:(id)a3;
- (void)setLayoutAllowsContinuousPath:(BOOL)a3;
- (void)setLayoutForKeyHitTest:(id)a3;
- (void)setLayoutRenderConfig:(id)a3;
- (void)setMarkedTextFromClient:(BOOL)a3;
- (void)setOriginalShouldSkipCandidateSelection:(BOOL)a3;
- (void)setOverlayContainerObserved:(id)a3;
- (void)setOverrideTextInputTraits:(id)a3;
- (void)setPendingAutofillIndex:(int64_t)a3;
- (void)setPendingSupplementalCandidateToInsert:(id)a3;
- (void)setPerformingRemoteTextOperations:(BOOL)a3;
- (void)setPredictionType:(int)a3;
- (void)setPresentationDelegate:(id)a3;
- (void)setPreviousGlobeKeyEvent:(id)a3;
- (void)setPreviousInputString:(id)a3;
- (void)setPrewarmsPredictiveCandidates:(BOOL)a3;
- (void)setReceivedCandidatesInCurrentInputMode:(BOOL)a3;
- (void)setRemoteDelegateSupportsImagePaste:(BOOL)a3;
- (void)setResigningRTISessionIdentifier:(id)a3;
- (void)setRestoresToEmojiInputMode;
- (void)setReturnKeyEnabled:(BOOL)a3;
- (void)setSelectionWithPoint:(CGPoint)a3;
- (void)setServiceRole:(unint64_t)a3;
- (void)setShift:(BOOL)a3;
- (void)setShift:(BOOL)a3 autoshift:(BOOL)a4;
- (void)setShiftLocked:(BOOL)a3;
- (void)setShiftLockedEnabled:(BOOL)a3;
- (void)setShiftLockedForced:(BOOL)a3;
- (void)setShiftNeedsUpdate;
- (void)setShiftNeedsUpdate:(BOOL)a3;
- (void)setShiftOffIfNeeded;
- (void)setShiftPreventAutoshift:(BOOL)a3;
- (void)setShiftStatesNeededInDestination:(BOOL)a3 autoShifted:(BOOL)a4 shiftLocked:(BOOL)a5;
- (void)setShifted:(BOOL)a3;
- (void)setShouldSkipCandidateSelection:(BOOL)a3;
- (void)setShouldSkipCandidateSelection:(BOOL)a3 userInitiated:(BOOL)a4;
- (void)setShouldSuppressSelectionCommands:(BOOL)a3;
- (void)setShouldUpdateCacheOnInputModesChange:(BOOL)a3;
- (void)setShowsCandidateBar:(BOOL)a3;
- (void)setSkipRecomputeInputMode:(BOOL)a3;
- (void)setSkippedEndInputSession:(void *)a3;
- (void)setSkippedEndInputSessionID:(id)a3;
- (void)setSmartReplyFeedbackManager:(id)a3;
- (void)setSmartReplyGenerator:(id)a3;
- (void)setSuggestions:(id)a3;
- (void)setSuppressUpdateAssistantView:(BOOL)a3;
- (void)setSuppressUpdateInputMode:(BOOL)a3;
- (void)setSuppressUpdateLayout:(BOOL)a3;
- (void)setSuppressUpdateShiftState:(BOOL)a3;
- (void)setSyncingDictationLanguageForInputModeSwitch:(BOOL)a3;
- (void)setTextInputChangesIgnored:(BOOL)a3;
- (void)setTextInputChangingCount:(unint64_t)a3;
- (void)setTextInputChangingDirection:(BOOL)a3;
- (void)setTextInputChangingText:(BOOL)a3;
- (void)setTextInputSource:(int64_t)a3;
- (void)setTextInputUpdatingSelection:(BOOL)a3;
- (void)setTouchEventWaitingForKeyInputEvent:(id)a3;
- (void)setTraitsForPreviousDelegate:(id)a3;
- (void)setTwoFingerTapTimestamp:(double)a3;
- (void)setUpdateCapsLockDelayOverrideForNonTyping:(id)a3;
- (void)setUserInteractionDelegate:(id)a3;
- (void)setUserSelectedCurrentCandidate:(BOOL)a3;
- (void)setUsesCandidateSelection:(BOOL)a3;
- (void)setWillSetupNewDelegate:(id)a3;
- (void)set_mimicShiftBeingHeld:(BOOL)a3;
- (void)showCursorAccessory;
- (void)showFirstTextAlternativeWithRangeAdjustment:(int64_t)a3;
- (void)showSelectionCommands;
- (void)showTextAlternativesInRange:(_NSRange)a3;
- (void)skipHitTestForTouchEvent:(id)a3;
- (void)skipHitTestForTouchEvent:(id)a3 delayed:(BOOL)a4;
- (void)skipHitTestForTouchEvents:(id)a3;
- (void)skippedEndInputSession;
- (void)smartSelectionForTextInDocument:(id)a3 inRange:(_NSRange)a4 options:(unint64_t)a5 completion:(id)a6;
- (void)startAutoDeleteTimer;
- (void)startAutoDeleteTimerForForce:(double)a3;
- (void)startDelayDeleteTimer;
- (void)stopAutoDelete;
- (void)syncDocumentStateToInputDelegate;
- (void)syncDocumentStateToInputDelegateWithExecutionContext:(id)a3;
- (void)syncInputManagerToAcceptedAutocorrection:(id)a3 forInput:(id)a4;
- (void)syncInputManagerToKeyboardState;
- (void)syncInputManagerToKeyboardStateWithExecutionContext:(id)a3;
- (void)syncKeyboardToConfiguration:(id)a3;
- (void)takeTextInputTraitsFromDelegate;
- (void)textAccepted:(id)a3;
- (void)textAccepted:(id)a3 executionContext:(id)a4;
- (void)textChanged:(id)a3;
- (void)textChanged:(id)a3 executionContext:(id)a4;
- (void)textDidChange:(id)a3;
- (void)textDidScroll;
- (void)textInput:(id)a3 deferReplaceTextActionToSystem:(id)a4;
- (void)textInput:(id)a3 setCandidateSuggestions:(id)a4;
- (void)textSuggestionDidChange:(id)a3;
- (void)textWillChange:(id)a3;
- (void)textWillScroll;
- (void)toggleShift;
- (void)toggleSoftwareKeyboard;
- (void)touchAutoDeleteTimerWithThreshold:(double)a3 adjustForPartialCompletion:(BOOL)a4;
- (void)touchAutocorrectPromptTimer;
- (void)touchDelayDeleteTimerWithThreshold:(double)a3;
- (void)touchLongPressTimer;
- (void)touchLongPressTimerWithDelay:(double)a3;
- (void)touchLongPressTimerWithDelay:(double)a3 userInfo:(id)a4;
- (void)touchUpdateLastUsedInputModeAction;
- (void)trackUsageForAcceptedAutocorrection:(id)a3 promptWasShowing:(BOOL)a4;
- (void)trackUsageForCandidateAcceptedAction:(id)a3;
- (void)trackUsageForPromptedCorrection:(id)a3 inputString:(id)a4 previousPrompt:(id)a5;
- (void)traitCollectionDidChange;
- (void)triggerPendingKeyup;
- (void)underlineCandidate:(id)a3;
- (void)undoWithKeyboardInput:(id)a3;
- (void)unmarkText:(id)a3;
- (void)unsetDidUpdateCapsLockLanguageSwitchSetting;
- (void)updateAssistantView;
- (void)updateAssistantViewInfo:(id)a3;
- (void)updateAutocorrectPrompt:(id)a3;
- (void)updateAutocorrectPrompt:(id)a3 executionContext:(id)a4;
- (void)updateCandidateDisplay;
- (void)updateCandidateDisplayAsyncWithCandidateSet:(id)a3;
- (void)updateChangeTimeAndIncrementCount;
- (void)updateDefaultsWithResults:(id)a3;
- (void)updateDelegatePasteSupport;
- (void)updateDocumentViewsAfterKeyboardOutput:(id)a3;
- (void)updateDoubleSpacePeriodStateForCharacter:(unsigned int)a3;
- (void)updateDoubleSpacePeriodStateForString:(id)a3;
- (void)updateForChangedSelection;
- (void)updateForChangedSelectionWithExecutionContext:(id)a3;
- (void)updateForExpectedRemoteDocumentStateChange:(id)a3 selectedTextRange:(_NSRange)a4 forceSync:(BOOL)a5;
- (void)updateFromTextInputTraits;
- (void)updateHardwareKeyboardExclusivityIdentifier;
- (void)updateHardwareKeyboardLayout;
- (void)updateHardwareKeyboardLayout:(BOOL)a3;
- (void)updateIdleDetection:(int64_t)a3;
- (void)updateInputAssistantButtonItems;
- (void)updateInputDelegateForRemoteDocumentStateChange:(id)a3 selectedTextRange:(_NSRange)a4 hasText:(BOOL)a5 forceSync:(BOOL)a6;
- (void)updateInputDelegateForRemoteTraitChange:(id)a3 forceSync:(BOOL)a4;
- (void)updateInputManagerAutocapitalizationType;
- (void)updateInputManagerMode;
- (void)updateInputModeIndicatorOnSingleKeyOnly:(BOOL)a3;
- (void)updateInputModeIndicatorOnSingleKeyOnly:(BOOL)a3 preserveIfPossible:(BOOL)a4;
- (void)updateInputModeLastChosenPreference;
- (void)updateKeyboardConfigurations;
- (void)updateKeyboardEventsLagging:(id)a3;
- (void)updateKeyboardOutput:(id)a3 withInputForSmartPunctuation:(id)a4 keyboardConfiguration:(id)a5;
- (void)updateKeyboardStateForDeletion;
- (void)updateKeyboardStateForInsertion:(id)a3;
- (void)updateKeyboardStateForReplacingText:(id)a3 withText:(id)a4;
- (void)updateLayoutAndSetShift;
- (void)updateNoContentViews;
- (void)updatePreferencesWithBlock:(id)a3;
- (void)updateReturnKey;
- (void)updateReturnKey:(BOOL)a3;
- (void)updateShiftState;
- (void)updateShiftStateAfterAsyncSelectionChange;
- (void)updateShowCandidateBar;
- (void)updateSmartPunctuationOptionsForLocaleIdentifier:(id)a3;
- (void)updateTextCandidateView;
- (void)updateTextChoicePromptSelection:(id)a3 toRange:(id)a4;
- (void)updateTextInputKeyboardSource;
- (void)updateTextInputKeyboardSource:(id)a3;
- (void)willReplaceTextInRangedSelectionWithKeyboardInput;
@end

@implementation _UIKeyboardStateManager

- (void)_reloadInputViewsForSameDelegate:(id)a3 existingDelegate:(id)a4 force:(BOOL)a5 delayEndInputSession:(BOOL)a6
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  if (!+[UIKeyboard usesInputSystemUI]
    || (+[UIKeyboardSceneDelegate automaticKeyboardArbiterClient](UIKeyboardSceneDelegate, "automaticKeyboardArbiterClient"), v10 = objc_claimAutoreleasedReturnValue(), char v11 = [v10 handlingRemoteEvent], v10, (v11 & 1) == 0))
  {
    [(_UIKeyboardStateManager *)self clearForwardingInputDelegateAndResign:1];
  }
  int64_t v12 = [(UITextInputTraits *)self->m_traits keyboardType];
  v13 = [(_UIKeyboardStateManager *)self textInputTraits];
  [(_UIKeyboardStateManager *)self takeTextInputTraitsFromDelegate];
  v14 = +[UIKeyboard keyboardBundleIdentifier];
  int v15 = [v14 isEqual:@"com.apple.freeform"];

  if (v15) {
    [(_UIKeyboardStateManager *)self updateDelegatePasteSupport];
  }
  if (+[UIKeyboard isKeyboardProcess]) {
    -[UITextInputTraits setUseAutomaticEndpointing:](self->m_traits, "setUseAutomaticEndpointing:", [v13 useAutomaticEndpointing]);
  }
  v16 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  v17 = [v16 delegateRespectingForwardingDelegate:0];
  if (v17)
  {
  }
  else
  {
    m_defaultTraits = self->m_defaultTraits;

    if (m_defaultTraits) {
      goto LABEL_12;
    }
    [(UITextInputTraits *)self->m_traits setKeyboardType:v12];
    uint64_t v32 = [MEMORY[0x1E4FAE450] translateToTextInputKeyboardType:v12];
    v16 = [(TIKeyboardState *)self->m_keyboardState textInputTraits];
    [v16 setKeyboardType:v32];
  }

LABEL_12:
  v19 = [(_UIKeyboardStateManager *)self textInputTraits];
  uint64_t v20 = [v19 updateResultComparedToTraits:v13];

  v21 = off_1E52D4000;
  if (v9 && ![(_UIKeyboardStateManager *)self forCustomInputView])
  {
    BOOL v22 = +[UIKeyboard usesInputSystemUI];
    if (v22)
    {
      if (self->m_needsToRecomputeDesirableModes || v20 == 2) {
        goto LABEL_38;
      }
    }
    else
    {
      id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      v24 = [WeakRetained window];
      if (!v24 || self->m_needsToRecomputeDesirableModes || v20 == 2)
      {

        goto LABEL_38;
      }
      v71 = v24;
      v72 = WeakRetained;
    }
    BOOL v25 = +[UIKeyboard usesInputSystemUI];
    if (!v25)
    {
      id v26 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      v27 = [v26 layout];
      [v27 frame];
      double v29 = v28;
      id v74 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      [v74 frame];
      if (v29 != v30)
      {
        char v31 = 1;
        goto LABEL_32;
      }
      v69 = v27;
      id v70 = v26;
    }
    v33 = [(_UIKeyboardStateManager *)self _autofillContext];
    v34 = [v33 objectForKey:@"_automaticPasswordKeyboard"];
    char v31 = [v34 BOOLValue];

    if (v25) {
      goto LABEL_33;
    }
    v27 = v69;
    id v26 = v70;
LABEL_32:

LABEL_33:
    v21 = off_1E52D4000;
    if (!v22)
    {
    }
    if ((v31 & 1) == 0)
    {
      v35 = [(_UIKeyboardStateManager *)self delegateAsResponder];
      v36 = [v35 textInputMode];

      if (!v36) {
        goto LABEL_14;
      }
      v75 = +[UIKeyboardInputModeController sharedInputModeController];
      v37 = [(_UIKeyboardStateManager *)self delegateAsResponder];
      v38 = [v37 textInputMode];
      v39 = [v38 primaryLanguage];
      v40 = [v75 currentPublicInputMode];
      v41 = [v40 primaryLanguage];
      char v73 = [v39 isEqualToString:v41];

      v21 = off_1E52D4000;
      if (v73) {
        goto LABEL_14;
      }
    }
LABEL_38:
    BOOL v42 = [(_UIKeyboardStateManager *)self suppressUpdateLayout];
    [(_UIKeyboardStateManager *)self setSuppressUpdateLayout:1];
    [(_UIKeyboardStateManager *)self recomputeActiveInputModesWithExtensions:1];
    [(_UIKeyboardStateManager *)self setSuppressUpdateLayout:v42];
    if (self->m_shift)
    {
      id v43 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      v44 = [v43 layout];
      if (!v44
        || self->m_shiftLocked
        || [(_UIKeyboardStateManager *)self callLayoutIsShiftKeyBeingHeld])
      {
      }
      else
      {
        BOOL v67 = [(_UIKeyboardStateManager *)self callLayoutIsShiftKeyPlaneChooser];

        if (v67) {
          [(_UIKeyboardStateManager *)self clearShiftState];
        }
      }
    }
    id v45 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    [v45 updateLayout];

    id v46 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    LODWORD(v45) = [v46 showInputModeIndicator];

    if (v45) {
      [(_UIKeyboardStateManager *)self updateInputModeIndicatorOnSingleKeyOnly:0];
    }
    v47 = [(_UIKeyboardStateManager *)self textInputTraits];
    int v48 = [v47 isSecureTextEntry];
    if (v48 == [v13 isSecureTextEntry])
    {
      v49 = [(_UIKeyboardStateManager *)self textInputTraits];
      v50 = [v49 recentInputIdentifier];
      [v13 recentInputIdentifier];
      v52 = v51 = v21;

      BOOL v53 = v50 == v52;
      v21 = v51;
      if (v53) {
        goto LABEL_49;
      }
    }
    else
    {
    }
    v54 = [(_UIKeyboardStateManager *)self documentIdentifierForInputDelegate:v9];
    [(TIKeyboardState *)self->m_keyboardState setDocumentIdentifier:v54];

    goto LABEL_49;
  }
LABEL_14:
  if (v20 == 1) {
    [(_UIKeyboardStateManager *)self updateReturnKey:1];
  }
LABEL_49:
  BOOL v55 = [(_UIKeyboardStateManager *)self autocorrectionPreferenceForTraits] != 0;
  [(TIKeyboardState *)self->m_keyboardState setAutocorrectionEnabled:v55];
  [(_UIKeyboardStateManager *)self setAutocorrectSpellingEnabled:v55];
  v56 = [(__objc2_class *)v21[14] sharedInputModeController];
  v57 = [v56 currentInputMode];
  v58 = [v57 primaryLanguage];
  [(_UIKeyboardStateManager *)self updateSmartPunctuationOptionsForLocaleIdentifier:v58];

  [(TISmartPunctuationController *)self->m_smartPunctuationController reset];
  [(TIKeyboardState *)self->m_keyboardState setInlineCompletionEnabled:[(_UIKeyboardStateManager *)self isInlineCompletionEnabled]];
  self->m_disableSyncTextChanged = 0;
  [(_UIKeyboardStateManager *)self setInputManagerFromCurrentInputMode];
  if (self->_remoteTextInputPartner && v20)
  {
    v59 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
    [v59 documentTraitsChanged];
  }
  if (v8)
  {
    v60 = [(TIKeyboardState *)self->m_keyboardState documentIdentifier];

    if (!v60)
    {
      v61 = [(_UIKeyboardStateManager *)self documentIdentifierForInputDelegate:v8];
      [(TIKeyboardState *)self->m_keyboardState setDocumentIdentifier:v61];
    }
    v62 = [(TIKeyboardState *)self->m_keyboardState documentIdentifier];

    if (v62)
    {
      v63 = [(TIKeyboardState *)self->m_keyboardState documentIdentifier];
      v64 = +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate];
      v65 = [v64 _textInputSessionAnalytics];
      [v65 setSessionIdentifier:v63];
    }
    else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      m_keyboardState = self->m_keyboardState;
      *(_DWORD *)buf = 138412290;
      v77 = m_keyboardState;
      _os_log_fault_impl(&dword_1853B0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "m_keyboardState {%@} documentIdentifier creation failed", buf, 0xCu);
    }
    if ([(_UIKeyboardStateManager *)self needAutofillLogin] && !self->m_isAutofilling) {
      [(_UIKeyboardStateManager *)self generateAutofillCandidateByAddingTask:1];
    }
    self->_isSettingDelegate = 0;
    [(_UIKeyboardStateManager *)self _updateDelegateRequiresKeyEventsFromRemoteTextInput];
    v66 = [MEMORY[0x1E4F28EB8] defaultCenter];
    [v66 postNotificationName:@"UITextInputResponderIsReloadedNotification" object:0 userInfo:0];
  }
  else
  {
    [(_UIKeyboardStateManager *)self needAutofillLogin];
    self->_isSettingDelegate = 0;
    [(_UIKeyboardStateManager *)self _updateDelegateRequiresKeyEventsFromRemoteTextInput];
  }
}

- (void)updateSmartPunctuationOptionsForLocaleIdentifier:(id)a3
{
  v4 = (void *)MEMORY[0x1E4FAE408];
  v5 = [MEMORY[0x1E4F1CA20] localeWithLocaleIdentifier:a3];
  id v12 = [v4 smartPunctuationOptionsForLocale:v5];

  [(TISmartPunctuationController *)self->m_smartPunctuationController setSmartPunctuationOptions:v12];
  v6 = +[UIKeyboardPreferencesController sharedPreferencesController];
  v7 = [v6 preferencesActions];
  int v8 = [v7 BOOLForPreferenceKey:*MEMORY[0x1E4FAEAA0]];

  uint64_t v9 = [(TISmartPunctuationController *)self->m_smartPunctuationController autoQuoteType];
  BOOL v10 = ((v8 & 1) != 0 || v9 == 1) && [(UITextInputTraits *)self->m_traits smartQuotesType] != 1;
  [(TISmartPunctuationController *)self->m_smartPunctuationController setSmartQuotesEnabled:v10];
  if (v8) {
    BOOL v11 = [(UITextInputTraits *)self->m_traits smartDashesType] != 1;
  }
  else {
    BOOL v11 = 0;
  }
  [(TISmartPunctuationController *)self->m_smartPunctuationController setSmartDashesEnabled:v11];
}

- (void)setAutocorrectSpellingEnabled:(BOOL)a3
{
  BOOL v5 = [(_UIKeyboardStateManager *)self checkSpellingPreferenceForTraits];
  UIKeyboardAutocorrectSpellingFlag = v5 || a3;
  if (v5)
  {
    v6 = UIKeyboardGetCurrentInputMode();
    uint64_t v7 = UIKeyboardCheckSpellingForInputMode(v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v8 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  [v8 setContinuousSpellCheckingEnabled:v7];
}

- (BOOL)needAutofillLogin
{
  v2 = [(_UIKeyboardStateManager *)self autofillController];
  BOOL v3 = [v2 delegateNeedsAutofillMode] == 1;

  return v3;
}

- (BOOL)isMemberOfAutofillGroup:(id)a3
{
  if (!a3) {
    return 0;
  }
  id v4 = a3;
  BOOL v5 = [(_UIKeyboardStateManager *)self autofillController];
  v6 = [v5 autofillGroup];

  id v7 = [v6 objectForKey:@"username"];
  id v8 = [v6 objectForKey:@"password"];
  id v9 = [v6 objectForKey:@"new-password"];

  BOOL v12 = v7 == v4 || v8 == v4 || v9 == v4;
  return v12;
}

- (BOOL)isMemberOfPossibleAutofillGroup:(id)a3
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if ([(_UIKeyboardStateManager *)self isMemberOfAutofillGroup:v4])
  {
    LOBYTE(v5) = 1;
  }
  else
  {
    v6 = [(_UIKeyboardStateManager *)self autofillController];
    id v7 = [v6 autofillGroup];
    id v8 = [v7 objectForKey:@"UIAutofillPossibleRespondersKey"];

    if (!v8
      || ![v8 count]
      || [(_UIKeyboardStateManager *)self preferFallbackAutofillGroup])
    {
      id v9 = [(_UIKeyboardStateManager *)self autofillController];
      BOOL v10 = [v9 fallbackAutofillGroup];

      if (v10)
      {
        BOOL v11 = [(_UIKeyboardStateManager *)self autofillController];
        BOOL v12 = [v11 fallbackAutofillGroup];
        uint64_t v13 = [v12 objectForKey:@"UIAutofillPossibleRespondersKey"];

        id v8 = (void *)v13;
      }
    }
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v14 = v8;
    uint64_t v5 = [v14 countByEnumeratingWithState:&v18 objects:v22 count:16];
    if (v5)
    {
      uint64_t v15 = *(void *)v19;
      while (2)
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v19 != v15) {
            objc_enumerationMutation(v14);
          }
          if (*(id *)(*((void *)&v18 + 1) + 8 * i) == v4)
          {
            LOBYTE(v5) = 1;
            goto LABEL_18;
          }
        }
        uint64_t v5 = [v14 countByEnumeratingWithState:&v18 objects:v22 count:16];
        if (v5) {
          continue;
        }
        break;
      }
    }
LABEL_18:
  }
  return v5;
}

- (UIKBAutofillController)autofillController
{
  return self->m_autofillController;
}

- (void)setInputManagerFromCurrentInputMode
{
  [(_UIKeyboardStateManager *)self updateInputManagerMode];
  [(_UIKeyboardImplProxy *)self->m_implProxy setDelegate:self];
  sharedInputManagerMux();
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  if ((_UIApplicationIsKeyboardExtension() & 1) == 0) {
    [v5 setResponseDelegate:self];
  }
  BOOL v3 = [(_UIKeyboardStateManager *)self autofillController];
  unint64_t v4 = +[UIKBAutofillController translateToTextInputAutofillMode:](UIKBAutofillController, "translateToTextInputAutofillMode:", [v3 delegateNeedsAutofillMode]);

  [v5 setSystemInputManagerFromTextInputTraits:self->m_traits autofillMode:v4 implProxy:self->m_implProxy];
}

- (void)updateInputManagerMode
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  BOOL v3 = +[UIKeyboardInputModeController sharedInputModeController];
  unint64_t v4 = [v3 currentSystemInputMode];

  id v5 = [(TIKeyboardState *)self->m_keyboardState inputMode];
  BOOL v6 = [(_UIKeyboardStateManager *)self shouldSwitchFromInputManagerMode:v5 toInputMode:v4];

  if (v6)
  {
    id v7 = [v4 identifierWithLayouts];
    [(TIKeyboardState *)self->m_keyboardState setInputMode:v7];

    id v8 = [v4 identifier];
    int v9 = [v8 isEqualToString:@"intl_HWR"];

    if (v9)
    {
      BOOL v10 = [MEMORY[0x1E4F1CA48] array];
      long long v18 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      BOOL v11 = +[UIKeyboardInputModeController sharedInputModeController];
      BOOL v12 = [v11 suggestedInputModesForPreferredLanguages];

      uint64_t v13 = [v12 countByEnumeratingWithState:&v18 objects:v22 count:16];
      if (v13)
      {
        uint64_t v14 = v13;
        uint64_t v15 = *(void *)v19;
        do
        {
          uint64_t v16 = 0;
          do
          {
            if (*(void *)v19 != v15) {
              objc_enumerationMutation(v12);
            }
            v17 = [*(id *)(*((void *)&v18 + 1) + 8 * v16) identifier];
            [v10 addObject:v17];

            ++v16;
          }
          while (v14 != v16);
          uint64_t v14 = [v12 countByEnumeratingWithState:&v18 objects:v22 count:16];
        }
        while (v14);
      }
    }
    else
    {
      BOOL v10 = 0;
    }
    [(TIKeyboardState *)self->m_keyboardState setAuxiliaryInputModeLanguages:v10];
  }
}

- (BOOL)shouldSwitchFromInputManagerMode:(id)a3 toInputMode:(id)a4
{
  id v5 = a3;
  id v6 = a4;
  id v7 = v6;
  if (!v5) {
    goto LABEL_6;
  }
  id v8 = [v6 identifier];
  if (![v8 hasPrefix:@"emoji"])
  {

    goto LABEL_6;
  }
  char HasWordNgramModelForInputMode = UIKeyboardHasWordNgramModelForInputMode();

  if ((HasWordNgramModelForInputMode & 1) == 0)
  {
LABEL_6:
    BOOL v10 = 1;
    goto LABEL_7;
  }
  BOOL v10 = 0;
LABEL_7:

  return v10;
}

- (BOOL)isInlineCompletionEnabled
{
  v2 = [(_UIKeyboardStateManager *)self inlineTextCompletionController];
  BOOL v3 = [v2 currentInlineTextCompletionMode] == 1;

  return v3;
}

- (UIInlineTextCompletionController)inlineTextCompletionController
{
  return self->m_inlineTextCompletionController;
}

- (void)clearForwardingInputDelegateAndResign:(BOOL)a3
{
  BOOL v3 = a3;
  if ([(_UIKeyboardStateManager *)self _hasMarkedText])
  {
    if (+[UIKeyboard isInputSystemUI])
    {
      id v5 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      id v6 = [v5 forwardingInputDelegate];

      if (v6)
      {
        id v7 = [(_UIKeyboardStateManager *)self inputDelegateManager];
        [v7 unmarkText];
      }
    }
  }
  id v8 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  [v8 clearForwardingInputDelegateAndResign:v3];

  id v9 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
  [v9 forwardClearForwardingInputDelegateAndResign:v3];
}

- (BOOL)checkSpellingPreferenceForTraits
{
  BOOL v3 = [(_UIKeyboardStateManager *)self checkSpellingPreference];
  if (v3)
  {
    int64_t v4 = [(UITextInputTraits *)self->m_traits spellCheckingType];
    if (v4 == 2)
    {
      LOBYTE(v3) = 1;
    }
    else if (v4)
    {
      LOBYTE(v3) = 0;
    }
    else
    {
      LOBYTE(v3) = [(UITextInputTraits *)self->m_traits autocorrectionType] != 1;
    }
  }
  return v3;
}

- (BOOL)checkSpellingPreference
{
  v2 = +[UIKeyboardPreferencesController sharedPreferencesController];
  BOOL v3 = [v2 preferencesActions];
  char v4 = [v3 BOOLForPreferenceKey:*MEMORY[0x1E4FAE818]];

  return v4;
}

- (unint64_t)autocorrectionPreferenceForTraits
{
  BOOL v3 = [(_UIKeyboardStateManager *)self autocorrectionPreference];
  self->m_autocorrectionPreference = v3;
  return [(_UIKeyboardStateManager *)self _updateAutocorrectionPreferenceForTraitsWithCurrentPreference:v3];
}

- (void)_updateDelegateRequiresKeyEventsFromRemoteTextInput
{
  if (+[UIKeyboard isKeyboardProcess])
  {
    id v4 = [(_UIKeyboardStateManager *)self inputSystemSourceSession];
    BOOL v3 = [v4 documentTraits];
    self->m_delegateRequiresKeyEvents = ((unsigned __int16)[v3 delegateConformanceType] >> 8) & 1;
  }
}

- (unint64_t)_updateAutocorrectionPreferenceForTraitsWithCurrentPreference:(BOOL)a3
{
  if (!a3)
  {
    id v4 = UIKeyboardGetCurrentInputMode();
    int v5 = UIKeyboardAutocorrectionRequiredForInputMode(v4);

    if (!v5) {
      return 0;
    }
  }
  if ([(UITextInputTraits *)self->m_traits isSecureTextEntry]
    || [(_UIKeyboardStateManager *)self keyboardIsKeyPad])
  {
    return 0;
  }
  if ([(_UIKeyboardStateManager *)self showingEmojiSearch]) {
    return 1;
  }
  int64_t v7 = [(UITextInputTraits *)self->m_traits autocorrectionType];
  unint64_t result = 1;
  if (v7 && v7 != 2)
  {
    if (v7 != 1) {
      return 0;
    }
    id v8 = UIKeyboardGetCurrentInputMode();
    char v9 = UIKeyboardAutocorrectionRequiredForInputMode(v8);

    if ((v9 & 1) == 0)
    {
      if (_os_feature_enabled_impl()
        && [(UITextInputTraits *)self->m_traits allowsSuggestionsOnlyMode]
        && !+[UIKeyboard isSpotlight])
      {
        return 2;
      }
      return 0;
    }
    return 1;
  }
  return result;
}

- (BOOL)keyboardIsKeyPad
{
  unsigned int v2 = [(UITextInputTraits *)self->m_traits keyboardType];
  return v2 <= 0xB && ((1 << v2) & 0x930) != 0 || v2 == 127;
}

- (BOOL)_hasMarkedText
{
  unsigned int v2 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  char v3 = [v2 _hasMarkedText];

  return v3;
}

- (void)_shouldClearTextSuggestions:(BOOL)a3
{
  self->m_shouldClearTextSuggestions = a3;
  self->m_pendingRestoreTextSuggestions = 1;
}

- (void)takeTextInputTraitsFromDelegate
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  char v3 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  id v4 = [v3 textInputTraits];

  if (!v4)
  {
    id v4 = self->m_defaultTraits;
    if (!v4) {
      id v4 = objc_alloc_init(UITextInputTraits);
    }
  }
  if (self->m_overrideTraits)
  {
    -[UITextInputTraits overrideWithTraits:](v4, "overrideWithTraits:");
  }
  else if (+[UIKeyboard isKeyboardProcess])
  {
    [(UITextInputTraits *)v4 overrideWithPrivateTraits:self->m_traits];
  }
  int v5 = +[UIKeyboard activeKeyboard];
  if ([v5 isAutomatic])
  {
    BOOL v6 = [(UITextInputTraits *)v4 isSecureTextEntry];
    if (v6 != [(UITextInputTraits *)self->m_traits isSecureTextEntry])
    {
      id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      id v8 = [WeakRetained _rootInputWindowController];
      objc_msgSend(v8, "setDisableUpdateMaskForSecureTextEntry:", -[UITextInputTraits isSecureTextEntry](v4, "isSecureTextEntry"));
    }
  }
  else
  {
    char v9 = +[UIKeyboardPreferencesController sharedPreferencesController];
    BOOL v10 = [v9 preferencesActions];
    char v11 = [v10 BOOLForPreferenceKey:@"ShowPasswordKeyboardInVideo"];

    if ((v11 & 1) == 0) {
      objc_msgSend(v5, "_setDisableUpdateMaskForSecureTextEntry:", -[UITextInputTraits isSecureTextEntry](v4, "isSecureTextEntry"));
    }
  }
  BOOL v12 = [(UITextInputTraits *)v4 keyboardType] != 122;
  BOOL v13 = [(_UIKeyboardStateManager *)self showingEmojiSearch];
  uint64_t v14 = (UITextInputTraits *)[(UITextInputTraits *)v4 copy];
  m_traits = self->m_traits;
  self->m_traits = v14;

  if (!self->m_correctionLearningAllowed) {
    [(UITextInputTraits *)self->m_traits setLearnsCorrections:0];
  }
  if ([(_UIKeyboardStateManager *)self shouldUseCarPlayModes]) {
    [(UITextInputTraits *)self->m_traits setIsCarPlayIdiom:1];
  }
  if (!+[UIKeyboard isKeyboardProcess]
    && ![(UITextInputTraits *)self->m_traits inlinePredictionType])
  {
    uint64_t v16 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    v17 = [v16 keyInputDelegate];
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();

    long long v19 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    char v20 = [v19 hasAsyncCapableInputDelegate];

    if ((isKindOfClass & 1) == 0 && (v20 & 1) == 0) {
      [(UITextInputTraits *)self->m_traits setInlinePredictionType:1];
    }
  }
  long long v21 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  BOOL v22 = [v21 keyInputDelegate];

  if (v22)
  {
    int v23 = [(_UIKeyboardStateManager *)self floatingForced];
    int v24 = [(UITextInputTraits *)self->m_traits forceFloatingKeyboard];
    [(_UIKeyboardStateManager *)self setFloatingForced:[(UITextInputTraits *)self->m_traits forceFloatingKeyboard]];
    if (v23 != v24)
    {
      if (+[UIKeyboard isMajelEnabled])
      {
        id v25 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
        char v26 = [v25 isUsingDictationLayout];

        if ((v26 & 1) == 0) {
          [(_UIKeyboardStateManager *)self recomputeActiveInputModesWithExtensions:[(UITextInputTraits *)self->m_traits isSecureTextEntry] ^ 1 allowNonLinguisticInputModes:1];
        }
      }
    }
  }
  id v27 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [v27 refreshRivenPreferences];

  [(_UIKeyboardStateManager *)self updateInputManagerAutocapitalizationType];
  [(TIKeyboardState *)self->m_keyboardState setWordLearningEnabled:[(UITextInputTraits *)self->m_traits learnsCorrections]];
  double v28 = [(_UIKeyboardStateManager *)self textInputTraits];
  double v29 = [v28 autocorrectionContext];
  [(TIKeyboardState *)self->m_keyboardState setRecipientIdentifier:v29];

  double v30 = [(_UIKeyboardStateManager *)self textInputTraits];
  char v31 = [v30 responseContext];
  [(TIKeyboardState *)self->m_keyboardState setResponseContext:v31];

  uint64_t v32 = [(TIKeyboardState *)self->m_keyboardState inputContextHistory];
  v33 = [(_UIKeyboardStateManager *)self textInputTraits];
  v34 = [v33 inputContextHistory];
  v35 = [v34 tiInputContextHistory];
  [(TIKeyboardState *)self->m_keyboardState setInputContextHistory:v35];

  v36 = [(TIKeyboardState *)self->m_keyboardState inputContextHistory];

  if (v32 != v36)
  {
    v37 = _UIKeyboardSmartReplyLog();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      v38 = [(TIKeyboardState *)self->m_keyboardState inputContextHistory];
      v39 = [v38 debugDescription];
      int v47 = 138477827;
      int v48 = v39;
      _os_log_impl(&dword_1853B0000, v37, OS_LOG_TYPE_DEFAULT, "Setting state to found ICH: %{private}@", (uint8_t *)&v47, 0xCu);
    }
  }
  v40 = [(TIKeyboardState *)self->m_keyboardState inputContextHistory];

  if (v40)
  {
    v41 = [(_UIKeyboardStateManager *)self smartReplyGenerator];
    [v41 syncToKeyboardState:self->m_keyboardState];
  }
  char v42 = v12 ^ v13;
  if (!+[UIKeyboard isInputSystemUI])
  {
    id v43 = [(UITextInputTraits *)self->m_traits supplementalLexicon];
    if (v43)
    {
      v44 = [(UITextInputTraits *)self->m_traits supplementalLexicon];
      -[TIKeyboardState setSupplementalLexiconIdentifier:](self->m_keyboardState, "setSupplementalLexiconIdentifier:", [v44[1] identifier]);
    }
    else
    {
      [(TIKeyboardState *)self->m_keyboardState setSupplementalLexiconIdentifier:0];
    }
  }
  if ((v42 & 1) == 0) {
    [(_UIKeyboardStateManager *)self notifyInputSourceStateChangeIfNeeded];
  }
  if (self->_remoteTextInputTraits)
  {
    id v45 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    id v46 = [v45 forwardingInputDelegate];

    if (!v46) {
      [(_UIKeyboardStateManager *)self updateInputDelegateForRemoteTraitChange:self->_remoteTextInputTraits forceSync:0];
    }
  }
}

- (UIKBInputDelegateManager)inputDelegateManager
{
  return self->_inputDelegateManager;
}

- (UITextInputTraits)textInputTraits
{
  return self->m_traits;
}

- (void)updateInputManagerAutocapitalizationType
{
  [(TIKeyboardState *)self->m_keyboardState setAutocapitalizationEnabled:self->m_autocapitalizationPreference];
  id v3 = [MEMORY[0x1E4FAE450] traitsForUITextInputTraits:self->m_traits];
  [(TIKeyboardState *)self->m_keyboardState setTextInputTraits:v3];
}

- (BOOL)shouldUseCarPlayModes
{
  if ([(id)UIApp _isSpringBoard]) {
    return 0;
  }
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  int v5 = [(id)objc_opt_class() keyboardWindow];

  BOOL v6 = [v5 screen];
  int64_t v7 = +[UIKBScreenTraits traitsWithScreen:v6 orientation:0];

  BOOL v3 = [v7 idiom] == 3;
  return v3;
}

- (_UIKeyboardTextSelectionController)textSelectionController
{
  BOOL v3 = [(_UIKeyboardStateManager *)self textInteractionAssistant];

  if (v3)
  {
    id v4 = [(_UIKeyboardStateManager *)self textInteractionAssistant];
    int v5 = [v4 activeSelectionController];
    goto LABEL_13;
  }
  id v4 = [(_UIKeyboardStateManager *)self inputDelegate];
  customInputDelegateSelectionController = self->_customInputDelegateSelectionController;
  if (!customInputDelegateSelectionController
    || ([(_UIKeyboardTextSelectionController *)customInputDelegateSelectionController inputDelegate],
        int64_t v7 = objc_claimAutoreleasedReturnValue(),
        v7,
        v7 != v4))
  {
    id v8 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    int v9 = [v8 hasAsyncCapableInputDelegate];

    if (v9)
    {
      BOOL v10 = _UIKeyboardAsyncTextSelectionController;
    }
    else
    {
      if (!v4)
      {
        char v11 = 0;
        goto LABEL_11;
      }
      BOOL v10 = _UIKeyboardTextSelectionController;
    }
    char v11 = (_UIKeyboardTextSelectionController *)[[v10 alloc] initWithInputDelegate:v4];
LABEL_11:
    BOOL v12 = self->_customInputDelegateSelectionController;
    self->_customInputDelegateSelectionController = v11;
  }
  int v5 = self->_customInputDelegateSelectionController;
LABEL_13:
  BOOL v13 = v5;

  return v13;
}

- (UITextInteractionAssistant)textInteractionAssistant
{
  unsigned int v2 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  BOOL v3 = [v2 textInteractionAssistant];

  return (UITextInteractionAssistant *)v3;
}

- (id)inputDelegate
{
  unsigned int v2 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  BOOL v3 = [v2 textInputDelegate];

  return v3;
}

- (void)setDelegate:(id)a3 force:(BOOL)a4 delayEndInputSession:(BOOL)a5
{
  BOOL v5 = a5;
  BOOL v6 = a4;
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  int v9 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  id v10 = [v9 delegateRespectingForwardingDelegate:0];

  self->_isSettingDelegate = 1;
  self->m_keyboardDelegateStateNeedsRefresh = 1;
  self->m_disableSyncTextChanged = 1;
  self->m_disableAutocapitalization = 0;
  self->m_shouldSuppressSelectionCommands = 0;
  [(_UIKeyboardStateManager *)self updateHardwareKeyboardExclusivityIdentifier];
  int m_hardwareKeyboardAttached = self->m_hardwareKeyboardAttached;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  -[_UIKeyboardStateManager setHardwareKeyboardAttached:](self, "setHardwareKeyboardAttached:", [WeakRetained isHardwareKeyboardAttachedNow]);

  int v13 = self->m_hardwareKeyboardAttached;
  [(_UIKeyboardStateManager *)self setInHardwareKeyboardMode:self->m_hardwareKeyboardAttached shouldMoveKeyboard:v8 != 0];
  id v14 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [v14 resetIsPhysicallyAttachedHardwareKeyboard];

  if (v10 == v8
    && !v6
    && (+[UIKeyboard usesInputSystemUI]
     || v13 == m_hardwareKeyboardAttached))
  {
    [(_UIKeyboardStateManager *)self _reloadInputViewsForSameDelegate:v8 existingDelegate:v10 force:0 delayEndInputSession:v5];
    goto LABEL_26;
  }
  if (os_variant_has_internal_diagnostics())
  {
    uint64_t v16 = _UIKeyboardInputSessionChangeLog();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = _delegateShortDescr(v8);
      long long v18 = (void *)v17;
      long long v19 = "NO";
      if (v6) {
        char v20 = "YES";
      }
      else {
        char v20 = "NO";
      }
      *(_DWORD *)double v28 = 138413058;
      *(void *)&v28[4] = v17;
      if (v5) {
        long long v21 = "YES";
      }
      else {
        long long v21 = "NO";
      }
      *(void *)&v28[14] = v20;
      *(_WORD *)&v28[12] = 2080;
      *(_WORD *)&v28[22] = 2080;
      if (v10 == v8) {
        long long v19 = "YES";
      }
      double v29 = v21;
      __int16 v30 = 2080;
      char v31 = v19;
      _os_log_impl(&dword_1853B0000, v16, OS_LOG_TYPE_DEFAULT, "-setDelegate=%@ force:%s delayEndInputSession:%s (delegateSame=%s)", v28, 0x2Au);
    }
    if (v10) {
      goto LABEL_7;
    }
LABEL_20:
    uint64_t v15 = 0;
    goto LABEL_21;
  }
  if (!v10) {
    goto LABEL_20;
  }
LABEL_7:
  uint64_t v15 = [(TIKeyboardState *)self->m_keyboardState documentIdentifier];
LABEL_21:
  [(_UIKeyboardStateManager *)self _teardownExistingDelegate:v10 forSetDelegate:v8 force:v6 delayEndInputSession:v5];
  [(_UIKeyboardStateManager *)self _notifyDidTeardownExistingDelegate:v10 newDelegate:v8];
  [(_UIKeyboardStateManager *)self _setDelegate:v8 existingDelegate:v10 force:v6 delayEndInputSession:v5];
  [(_UIKeyboardStateManager *)self _notifyWillSetupNewDelegate:v8 existingDelegate:v10];
  [(_UIKeyboardStateManager *)self _setupDelegate:v8 delegateSame:v10 == v8 hardwareKeyboardStateChanged:v13 != m_hardwareKeyboardAttached endingInputSessionIdentifier:v15 force:v6 delayEndInputSession:v5];
  BOOL v22 = [(TIKeyboardState *)self->m_keyboardState inputContextHistory];
  int v23 = [v22 threadIdentifier];

  if (v23)
  {
    int v24 = [(_UIKeyboardStateManager *)self smartReplyFeedbackManager];
    id v25 = [(TIKeyboardState *)self->m_keyboardState inputContextHistory];
    char v26 = [v25 threadIdentifier];
    [v24 composeFieldInFocusWithMailOrMsgThreadId:v26];
  }
  id v27 = _UIKeyboardInputSessionChangeLog();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)double v28 = 0;
    _os_log_debug_impl(&dword_1853B0000, v27, OS_LOG_TYPE_DEBUG, "done with -setDelegate:force:delayEndInputSession:", v28, 2u);
  }

LABEL_26:
}

- (void)updateHardwareKeyboardExclusivityIdentifier
{
  id v4 = +[UIKeyboardInputModeController sharedInputModeController];
  BOOL v3 = [v4 hardwareKeyboardExclusivityIdentifier];
  [(_UIKeyboardStateManager *)self setHardwareKeyboardExclusivityIdentifier:v3];
}

- (void)setInHardwareKeyboardMode:(BOOL)a3 shouldMoveKeyboard:(BOOL)a4
{
}

- (void)setHardwareKeyboardExclusivityIdentifier:(id)a3
{
}

- (void)setHardwareKeyboardAttached:(BOOL)a3
{
  BOOL v4 = a3 && [(_UIKeyboardStateManager *)self exclusivityIdentifierMatched];
  self->int m_hardwareKeyboardAttached = v4;
}

- (BOOL)isRTIClient
{
  p_presentationDelegate = &self->_presentationDelegate;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  BOOL v5 = [(id)objc_opt_class() keyboardScreen];
  id v6 = objc_loadWeakRetained((id *)p_presentationDelegate);
  int64_t v7 = +[UIKBScreenTraits traitsWithScreen:orientation:](UIKBScreenTraits, "traitsWithScreen:orientation:", v5, [v6 _keyboardOrientation]);

  if ([v7 idiom] == 3)
  {
    char v8 = 0;
  }
  else
  {
    int v9 = [(_UIKeyboardStateManager *)self remoteTextInputPartnerPrivate];
    char v8 = [v9 inputSystemClientEnabled];
  }
  return v8;
}

- (UIKBRTIPartner)remoteTextInputPartnerPrivate
{
  remoteTextInputPartner = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
  BOOL v4 = remoteTextInputPartner;
  if (!remoteTextInputPartner) {
    remoteTextInputPartner = self->_remoteTextInputPartner;
  }
  BOOL v5 = remoteTextInputPartner;

  return v5;
}

- (BOOL)delegateSupportsCorrectionUI
{
  unsigned int v2 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  BOOL v3 = [v2 textInputView];
  BOOL v4 = v3 != 0;

  return v4;
}

- (BOOL)hardwareKeyboardAttached
{
  return self->m_hardwareKeyboardAttached;
}

- (void)restoreTextSuggestions
{
  if (!+[UIKeyboard isKeyboardProcess]
    && self->m_pendingRestoreTextSuggestions)
  {
    BOOL v3 = [(_UIKeyboardStateManager *)self textSuggestions];
    [(_UIKeyboardStateManager *)self _setSuggestions:v3];
  }
  self->m_pendingRestoreTextSuggestions = 0;
}

- (id)textSuggestions
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = [(_UIKeyboardStateManager *)self autocorrectionController];
  BOOL v3 = [v2 textSuggestionList];

  if (v3
    && ([v3 predictions],
        BOOL v4 = objc_claimAutoreleasedReturnValue(),
        uint64_t v5 = [v4 count],
        v4,
        v5))
  {
    id v6 = (void *)MEMORY[0x1E4F1CA48];
    int64_t v7 = [v3 predictions];
    char v8 = objc_msgSend(v6, "arrayWithCapacity:", objc_msgSend(v7, "count"));

    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    int v9 = objc_msgSend(v3, "predictions", 0);
    uint64_t v10 = [v9 countByEnumeratingWithState:&v17 objects:v21 count:16];
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = *(void *)v18;
      do
      {
        for (uint64_t i = 0; i != v11; ++i)
        {
          if (*(void *)v18 != v12) {
            objc_enumerationMutation(v9);
          }
          id v14 = *(void **)(*((void *)&v17 + 1) + 8 * i);
          if (objc_opt_respondsToSelector())
          {
            uint64_t v15 = [v14 textSuggestion];
            [v8 addObject:v15];
          }
        }
        uint64_t v11 = [v9 countByEnumeratingWithState:&v17 objects:v21 count:16];
      }
      while (v11);
    }
  }
  else
  {
    char v8 = 0;
  }

  return v8;
}

- (void)_setSuggestions:(id)a3
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  id v57 = a3;
  v58 = self;
  if ([(_UIKeyboardStateManager *)self isRTIClient])
  {
    BOOL v4 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
    [v4 textSuggestionsChanged:v57];

    uint64_t v5 = [(_UIKeyboardStateManager *)v58 remoteTextInputPartner];
    char v6 = [v5 remoteTextInputClientHasActiveSession];

    self = v58;
    if (v57)
    {
      if ((v6 & 1) == 0)
      {
        int64_t v7 = [(_UIKeyboardStateManager *)v58 remoteTextInputPartner];
        [v7 addTextSuggestions:v57];

        self = v58;
      }
    }
  }
  char v8 = [(_UIKeyboardStateManager *)self autocorrectionController];
  v56 = [v8 textSuggestionList];

  if (v57 && [v57 count])
  {
    int v9 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v57, "count"));
    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    id v10 = v57;
    id v11 = 0;
    uint64_t v12 = [v10 countByEnumeratingWithState:&v78 objects:v83 count:16];
    if (v12)
    {
      uint64_t v13 = *(void *)v79;
      do
      {
        for (uint64_t i = 0; i != v12; ++i)
        {
          if (*(void *)v79 != v13) {
            objc_enumerationMutation(v10);
          }
          uint64_t v15 = *(void **)(*((void *)&v78 + 1) + 8 * i);
          uint64_t v16 = [v15 _keyboardCandidate];
          [v9 addObject:v16];

          if (!v11)
          {
            if ([v15 canDisplayInline]) {
              id v11 = v15;
            }
            else {
              id v11 = 0;
            }
          }
        }
        uint64_t v12 = [v10 countByEnumeratingWithState:&v78 objects:v83 count:16];
      }
      while (v12);
    }

    BOOL v53 = [v9 firstObject];
    if ([(_UIKeyboardStateManager *)v58 usesCandidateSelection]) {
      int v17 = 2;
    }
    else {
      int v17 = 4;
    }
    v58->m_predictionType = v17;
    BOOL v55 = [MEMORY[0x1E4FAE278] listWithCorrections:0 predictions:v9];
    long long v18 = [(_UIKeyboardStateManager *)v58 autocorrectionController];
    [v18 setTextSuggestionList:v55];

    if (v11)
    {
      long long v19 = [(_UIKeyboardStateManager *)v58 inlineTextCompletionController];
      [v19 updateTextCompletionWithExternalSuggestion:v11];
    }
    if ([(_UIKeyboardStateManager *)v58 usesCandidateSelection])
    {
      long long v20 = [(TIKeyboardState *)v58->m_keyboardState textInputTraits];
      BOOL v21 = [v20 mathExpressionCompletionType] != 1;

      BOOL v54 = [(_UIKeyboardStateManager *)v58 _hasMarkedText];
      if (v21
        && v54
        && ![(TIKeyboardCandidateResultSet *)v58->m_candidateResultSet hasCandidates])
      {

        goto LABEL_63;
      }
      uint64_t v22 = [MEMORY[0x1E4F1CA48] array];
      int v23 = objc_msgSend(MEMORY[0x1E4F1CA80], "setWithCapacity:", objc_msgSend(v10, "count") + 1);
      int v24 = [(TIKeyboardState *)v58->m_keyboardState searchStringForMarkedText];
      id v25 = [(TIKeyboardCandidateResultSet *)v58->m_candidateResultSet firstCandidate];
      if (v25) {
        BOOL v26 = v54;
      }
      else {
        BOOL v26 = 0;
      }
      if (v26)
      {
        [v22 addObject:v25];
        id v27 = [v25 candidate];

        if (v27)
        {
          double v28 = [v25 candidate];
          [v23 addObject:v28];
        }
      }
      uint64_t v74 = 0;
      v75 = &v74;
      uint64_t v76 = 0x2020000000;
      char v77 = 0;
      v66[0] = MEMORY[0x1E4F143A8];
      v66[1] = 3221225472;
      v66[2] = __43___UIKeyboardStateManager__setSuggestions___block_invoke;
      v66[3] = &unk_1E52E36C8;
      id v51 = v24;
      id v67 = v51;
      BOOL v73 = !v54;
      id v52 = v25;
      id v68 = v52;
      id v59 = v22;
      id v69 = v59;
      id v70 = v9;
      id v29 = v23;
      id v71 = v29;
      v72 = &v74;
      [v10 enumerateObjectsUsingBlock:v66];
      p_isa = (id *)&v58->super.isa;
      if (*((unsigned char *)v75 + 24))
      {
        BOOL v31 = v54;
        if (([(TIKeyboardCandidateResultSet *)v58->m_candidateResultSet hasCandidates] & v54) == 1)
        {
          long long v64 = 0u;
          long long v65 = 0u;
          long long v62 = 0u;
          long long v63 = 0u;
          uint64_t v32 = [(TIKeyboardCandidateResultSet *)v58->m_candidateResultSet candidates];
          uint64_t v33 = [v32 countByEnumeratingWithState:&v62 objects:v82 count:16];
          if (v33)
          {
            uint64_t v34 = *(void *)v63;
            do
            {
              for (uint64_t j = 0; j != v33; ++j)
              {
                if (*(void *)v63 != v34) {
                  objc_enumerationMutation(v32);
                }
                v36 = *(void **)(*((void *)&v62 + 1) + 8 * j);
                v37 = [v36 candidate];
                char v38 = [v29 containsObject:v37];

                if ((v38 & 1) == 0) {
                  [v59 addObject:v36];
                }
              }
              uint64_t v33 = [v32 countByEnumeratingWithState:&v62 objects:v82 count:16];
            }
            while (v33);
          }

          p_isa = (id *)&v58->super.isa;
          BOOL v31 = v54;
        }
        if (([p_isa[4] hasCandidates] & v31) == 1)
        {
          v39 = (void *)[p_isa[4] copy];
          [v39 setCandidates:v59];
          [v39 setBatchCandidateLocation:0];
        }
        else
        {
          if (!v31) {
            [p_isa setCurrentCandidateRequest:0];
          }
          v39 = [MEMORY[0x1E4FAE310] setWithCandidates:v59];
        }
        if (qword_1EB25F860 != -1) {
          dispatch_once(&qword_1EB25F860, &__block_literal_global_601);
        }
        id v46 = [p_isa taskQueue];
        v60[0] = MEMORY[0x1E4F143A8];
        v60[1] = 3221225472;
        v60[2] = __43___UIKeyboardStateManager__setSuggestions___block_invoke_4;
        v60[3] = &unk_1E52E3628;
        v60[4] = p_isa;
        id v47 = v39;
        id v61 = v47;
        [v46 addDeferredTask:v60 breadcrumb:qword_1EB25F858];
      }
      _Block_object_dispose(&v74, 8);
    }
    goto LABEL_60;
  }
  v40 = [(_UIKeyboardStateManager *)v58 autocorrectionController];
  v41 = [v40 textSuggestionList];
  if (v41)
  {

    char v42 = v58;
  }
  else
  {
    char v42 = v58;
    BOOL v43 = [(_UIKeyboardStateManager *)v58 isAutofillPrediction];

    if (!v43) {
      goto LABEL_61;
    }
  }
  [(_UIKeyboardStateManager *)v42 isAutofillPrediction];
  v42->m_predictionType = 0;
  v44 = [(_UIKeyboardStateManager *)v42 autocorrectionController];
  [v44 setTextSuggestionList:0];

  char v42 = v58;
  [(_UIKeyboardStateManager *)v58 removeInlineTextCompletionPrompt];
  if (![(_UIKeyboardStateManager *)v58 usesCandidateSelection])
  {
    id v45 = [(_UIKeyboardStateManager *)v58 autocorrectionController];
    [v45 setNeedsAutocorrection];

LABEL_60:
    char v42 = v58;
  }
LABEL_61:
  int v48 = [(_UIKeyboardStateManager *)v42 autocorrectionController];
  uint64_t v49 = [v48 textSuggestionList];
  BOOL v50 = v49 != 0;

  if ((v56 == 0) == v50) {
    [(_UIKeyboardStateManager *)v58 updateAssistantView];
  }
LABEL_63:
}

- (UIKeyboardAutocorrectionController)autocorrectionController
{
  return self->m_autocorrectionController;
}

- (BOOL)isAutofillPrediction
{
  return (self->m_predictionType - 3) < 2;
}

- (BOOL)autocorrectionPreference
{
  BOOL v2 = [(_UIKeyboardStateManager *)self isInHardwareKeyboardMode];
  BOOL v3 = +[UIKeyboardPreferencesController sharedPreferencesController];
  BOOL v4 = [v3 preferencesActions];
  uint64_t v5 = v4;
  char v6 = (void *)MEMORY[0x1E4FAE5F0];
  if (!v2) {
    char v6 = (void *)MEMORY[0x1E4FAE7A8];
  }
  char v7 = [v4 BOOLForPreferenceKey:*v6];

  return v7;
}

- (BOOL)showingEmojiSearch
{
  BOOL v3 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
  BOOL v4 = [v3 rtiInputSourceState];

  if (!v4) {
    return [(UITextInputTraits *)self->m_traits keyboardType] == 122;
  }
  uint64_t v5 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
  char v6 = [v5 rtiInputSourceState];
  char v7 = [v6 showingEmojiSearch];

  return v7;
}

- (BOOL)isInHardwareKeyboardMode
{
  BOOL v3 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
  BOOL v4 = [v3 rtiInputSourceState];

  if (v4)
  {
    uint64_t v5 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
    char v6 = [v5 rtiInputSourceState];
    char v7 = [v6 hardwareKeyboardMode];

    return v7;
  }
  else
  {
    m_keyboardState = self->m_keyboardState;
    return [(TIKeyboardState *)m_keyboardState hardwareKeyboardMode];
  }
}

- (UIKBRTIPartner)remoteTextInputPartner
{
  if (!self->_remoteTextInputPartner)
  {
    BOOL v3 = objc_alloc_init(UIKBRTIPartner);
    remoteTextInputPartner = self->_remoteTextInputPartner;
    self->_remoteTextInputPartner = v3;

    [(UIKBRTIPartner *)self->_remoteTextInputPartner setPartnerDelegate:self];
    [(UIKBRTIPartner *)self->_remoteTextInputPartner setInputSystemClientEnabled:[(_UIKeyboardStateManager *)self serviceRole] == 1];
  }
  if (+[UIKeyboard usesInputSystemUI]
    && (+[UIKeyboardSceneDelegate activeKeyboardSceneDelegate](UIKeyboardSceneDelegate, "activeKeyboardSceneDelegate"), uint64_t v5 = objc_claimAutoreleasedReturnValue(), v6 = [v5 automaticAppearanceEnabled], v5, !v6))
  {
    char v7 = 0;
  }
  else
  {
    char v7 = self->_remoteTextInputPartner;
  }
  return v7;
}

- (BOOL)shouldShowLongPredictionList
{
  int v3 = [(TIKeyboardState *)self->m_keyboardState longPredictionListEnabled];
  if (v3) {
    LOBYTE(v3) = ![(UITextInputTraits *)self->m_traits isSecureTextEntry];
  }
  return v3;
}

- (BOOL)receivedCandidatesInCurrentInputMode
{
  return self->_receivedCandidatesInCurrentInputMode;
}

- (void)clearKeyboardWindowSnapshot
{
  m_keyboardWindowSnapshot = self->m_keyboardWindowSnapshot;
  self->m_keyboardWindowSnapshot = 0;
}

- (void)setInHardwareKeyboardMode:(BOOL)a3 forceRebuild:(BOOL)a4 shouldMoveKeyboard:(BOOL)a5
{
  BOOL v5 = a5;
  BOOL v6 = a4;
  BOOL v7 = a3;
  int v9 = [(TIKeyboardState *)self->m_keyboardState hardwareKeyboardMode] ^ a3;
  if (v9 == 1)
  {
    [(TIKeyboardState *)self->m_keyboardState setHardwareKeyboardMode:v7];
    int64_t v10 = 4;
    if (!v7) {
      int64_t v10 = 1;
    }
    self->m_textInputSource = v10;
    [(_UIKeyboardStateManager *)self _requestInputManagerSync];
  }
  if (!v5) {
    goto LABEL_13;
  }
  if (+[UIKeyboard usesInputSystemUI])
  {
    id v11 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
    char v12 = [v11 remoteTextInputClientHasActiveSession];

    if (v12) {
      goto LABEL_13;
    }
  }
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  id v14 = [WeakRetained geometryDelegate];
  if (![v14 isAutomatic])
  {

    goto LABEL_12;
  }
  if (v9)
  {
  }
  else
  {
    id v15 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    uint64_t v16 = [v15 geometryDelegate];
    int v17 = [v16 isMinimized];

    if (v17 == v7) {
      return;
    }
  }
  if ([(TIKeyboardState *)self->m_keyboardState hardwareKeyboardMode]
    && ![(_UIKeyboardStateManager *)self floatingForced])
  {
    if (![(_UIKeyboardStateManager *)self automaticMinimizationEnabled]) {
      goto LABEL_13;
    }
    id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    [WeakRetained hideKeyboard];
LABEL_12:

    goto LABEL_13;
  }
  long long v18 = +[UIKeyboardSceneDelegate automaticKeyboardArbiterClient];
  char v19 = [v18 handlingRemoteEvent];

  if ((v19 & 1) == 0)
  {
    id v20 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    char v21 = [v20 isUsingDictationLayout];

    if (v21)
    {
      id v22 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      [v22 showKeyboard];

      id WeakRetained = +[UIDictationView sharedInstance];
      int v23 = +[UIDictationController sharedInstance];
      objc_msgSend(WeakRetained, "setState:", objc_msgSend(v23, "state"));
    }
    else
    {
      [(_UIKeyboardStateManager *)self recomputeActiveInputModesWithExtensions:1 allowNonLinguisticInputModes:1];
      id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      [WeakRetained showKeyboard];
    }
    goto LABEL_12;
  }
LABEL_13:
  if (v9)
  {
    if (self->m_hardwareKeyboardAttached) {
      [(_UIKeyboardStateManager *)self updateHardwareKeyboardLayout:v6];
    }
    [(_UIKeyboardStateManager *)self notifyInputSourceStateChangeIfNeeded];
  }
}

- (void)hostApplicationDidEnterBackground
{
  int v3 = [(_UIKeyboardStateManager *)self inlineTextCompletionController];
  [v3 removeTextCompletionPrompt];

  id v4 = [(_UIKeyboardStateManager *)self backendController];
  [v4 applicationDidEnterBackground];
}

- (void)hostApplicationWillEnterForeground
{
  id v2 = [(_UIKeyboardStateManager *)self backendController];
  [v2 applicationWillEnterForeground];
}

- (void)setCapsLockIfNeeded
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained setCapsLockIfNeeded];
}

- (BOOL)initializationDone
{
  if (self->m_initializationDone)
  {
    id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    int v3 = [WeakRetained isInitializing] ^ 1;
  }
  else
  {
    LOBYTE(v3) = 0;
  }
  return v3;
}

- (_UIKeyboardStateManager)initWithPresentationDelegateView:(id)a3 forCustomInputView:(BOOL)a4
{
  BOOL v4 = a4;
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  v62.receiver = self;
  v62.super_class = (Class)_UIKeyboardStateManager;
  BOOL v7 = [(_UIKeyboardStateManager *)&v62 init];
  char v8 = v7;
  if (v7)
  {
    uint64_t v9 = qword_1EB25FDC8++;
    v7->_int64_t id = v9;
    if (os_variant_has_internal_diagnostics())
    {
      id v59 = _UIKeyboardExtendedLog();
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
      {
        v60 = "No";
        int64_t id = v8->_id;
        if (v4) {
          v60 = "Yes";
        }
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = v60;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = id;
        _os_log_impl(&dword_1853B0000, v59, OS_LOG_TYPE_DEFAULT, "Impl init forCustomInputView:%s (id=%ld)", buf, 0x16u);
      }
    }
    objc_storeWeak((id *)&v8->_presentationDelegate, v6);
    v8->_forCustomInputView = v4;
    _UIKBRT_ResetSystemUptimeOnResume();
    int64_t v10 = objc_alloc_init(UIKeyboardTaskQueue);
    taskQueue = v8->_taskQueue;
    v8->_taskQueue = v10;

    char v12 = objc_alloc_init(_UIKeyboardImplProxy);
    m_implProxy = v8->m_implProxy;
    v8->m_implProxy = v12;

    id v14 = (TIKeyboardState *)objc_alloc_init(MEMORY[0x1E4FAE3A0]);
    m_keyboardState = v8->m_keyboardState;
    v8->m_keyboardState = v14;

    uint64_t v16 = _UIMainBundleIdentifier();
    [(TIKeyboardState *)v8->m_keyboardState setClientIdentifier:v16];

    int v17 = objc_alloc_init(UIKeyboardAutocorrectionController);
    m_autocorrectionController = v8->m_autocorrectionController;
    v8->m_autocorrectionController = v17;

    [(UIKeyboardAutocorrectionController *)v8->m_autocorrectionController setDelegate:v8];
    if (+[UIKeyboard isInlineTextCompletionUIEnabled]
      && !+[UIKeyboard usesInputSystemUI])
    {
      char v19 = objc_alloc_init(UIInlineTextCompletionController);
      m_inlineTextCompletionController = v8->m_inlineTextCompletionController;
      v8->m_inlineTextCompletionController = v19;

      [(UIInlineTextCompletionController *)v8->m_inlineTextCompletionController setDelegate:v8];
      char v21 = +[UIKBAnalyticsDispatcher sharedInstance];
      [(UIInlineTextCompletionController *)v8->m_inlineTextCompletionController setAnalyticsDispatcher:v21];
    }
    uint64_t v63 = 0;
    long long v64 = &v63;
    uint64_t v65 = 0x2050000000;
    id v22 = (void *)qword_1EB25FDD0;
    uint64_t v66 = qword_1EB25FDD0;
    if (!qword_1EB25FDD0)
    {
      *(void *)buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 3221225472;
      *(void *)&buf[16] = __getTUISmartReplyGeneratorClass_block_invoke;
      id v68 = &unk_1E52D9900;
      id v69 = &v63;
      __getTUISmartReplyGeneratorClass_block_invoke((uint64_t)buf);
      id v22 = (void *)v64[3];
    }
    id v23 = v22;
    _Block_object_dispose(&v63, 8);
    uint64_t v24 = [v23 sharedInstance];
    smartReplyGenerator = v8->_smartReplyGenerator;
    v8->_smartReplyGenerator = (TUISmartReplyGenerator_Staging *)v24;

    BOOL v26 = (TISmartPunctuationController *)objc_alloc_init(MEMORY[0x1E4FAE400]);
    m_smartPunctuationController = v8->m_smartPunctuationController;
    v8->m_smartPunctuationController = v26;

    double v28 = +[_UIKeyboardTextSelectionGestureController sharedInstance];
    [v28 setDelegate:v8];

    id v29 = +[_UIKeyboardBasedTextSelectionGestureController sharedInstance];
    [v29 setDelegate:v8];

    v8->m_currentDirection = 0;
    v8->m_textInputSource = 1;
    v8->m_correctionLearningAllowed = 1;
    [(_UIKeyboardStateManager *)v8 takeTextInputTraitsFromDelegate];
    __int16 v30 = +[UIDevice currentDevice];
    int v31 = [v30 _isHardwareKeyboardAvailable];

    if (v31) {
      [(_UIKeyboardStateManager *)v8 updateHardwareKeyboardExclusivityIdentifier];
    }
    uint64_t v32 = +[UIDevice currentDevice];
    -[_UIKeyboardStateManager setHardwareKeyboardAttached:](v8, "setHardwareKeyboardAttached:", [v32 _isHardwareKeyboardAvailable]);

    BOOL m_hardwareKeyboardAttached = v8->m_hardwareKeyboardAttached;
    if (v8->m_hardwareKeyboardAttached) {
      v8->m_textInputSource = 4;
    }
    [(TIKeyboardState *)v8->m_keyboardState setHardwareKeyboardMode:m_hardwareKeyboardAttached];
    ++v8->m_updatingPreferences;
    v8->m_shiftLockedEnabled = [(_UIKeyboardStateManager *)v8 shiftLockPreference];
    v8->m_doubleSpacePeriodPreference = [(_UIKeyboardStateManager *)v8 doubleSpacePeriodPreference];
    UIKeyboardAutocorrectSpellingFlag = 0;
    uint64_t v34 = [(_UIKeyboardStateManager *)v8 inputModePreference];
    UIKeyboardSetActiveInputModes(v34);

    v35 = [(_UIKeyboardStateManager *)v8 UILanguagePreference];
    uint64_t v36 = [v35 copy];
    v37 = (void *)UIKeyboardCurrentUILanguage;
    UIKeyboardCurrentUILanguage = v36;

    if (![(_UIKeyboardStateManager *)v8 forCustomInputView]) {
      [(_UIKeyboardStateManager *)v8 setInputModeFromPreferences];
    }
    --v8->m_updatingPreferences;
    if (m_hardwareKeyboardAttached)
    {
      char v38 = (void *)UIApp;
      v39 = +[UIKeyboardInputModeController sharedInputModeController];
      v40 = [v39 hardwareInputMode];
      v41 = [v40 automaticHardwareLayout];
      [v38 setHardwareKeyboardLayoutName:v41];

      [(_UIKeyboardStateManager *)v8 setCapsLockIfNeeded];
    }
    [(_UIKeyboardStateManager *)v8 setServiceRole:+[UIKeyboard serviceRole]];
    id WeakRetained = objc_loadWeakRetained((id *)&v8->_presentationDelegate);
    [WeakRetained updateLayout];

    BOOL v43 = objc_alloc_init(UIKBAutofillController);
    m_autofillController = v8->m_autofillController;
    v8->m_autofillController = v43;

    v8->m_pendingAutofillIndex = -1;
    uint64_t v45 = [objc_alloc(MEMORY[0x1E4F1CA60]) initWithCapacity:5];
    m_hardwareKeyDownCodeToEventMap = v8->m_hardwareKeyDownCodeToEventMap;
    v8->m_hardwareKeyDownCodeToEventMap = (NSMutableDictionary *)v45;

    id v47 = objc_alloc_init(UIKeyboardInputModeIndicatorController);
    inputModeIndicatorController = v8->_inputModeIndicatorController;
    v8->_inputModeIndicatorController = v47;

    [(UIKeyboardInputModeIndicatorController *)v8->_inputModeIndicatorController setDelegate:v8];
    uint64_t v49 = +[UIKeyboardPreferencesController sharedPreferencesController];
    BOOL v50 = [v49 preferencesActions];
    id v51 = [v50 valueForPreferenceKey:@"kbUserDidPath"];
    v8->m_numCPwords = [v51 integerValue];

    v8->m_lastChooseSupplementalItemToInsertCallbackIdentifier = 0;
    v8->m_initializationDone = 1;
    id v52 = objc_loadWeakRetained((id *)&v8->_presentationDelegate);
    [v52 _setSafeAreaInsetsFrozen:1];

    BOOL v53 = objc_alloc_init(UIKBInputDelegateManager);
    [(_UIKeyboardStateManager *)v8 setInputDelegateManager:v53];

    BOOL v54 = [(_UIKeyboardStateManager *)v8 inputDelegateManager];
    [v54 setKeyboardStateDelegate:v8];

    double v55 = -*MEMORY[0x1E4F1CF68];
    [(_UIKeyboardStateManager *)v8 setDeleteWordLastDelete:v55];
    v8->m_autoDeleteLastDelete = v55;
    v56 = [[_UISmartReplyFeedbackManager alloc] initWithKeyboardStateManagerDelegate:v8];
    [(_UIKeyboardStateManager *)v8 setSmartReplyFeedbackManager:v56];

    v8->m_userInteraction = 9;
    id v57 = v8;
  }

  return v8;
}

- (void)presentationDelegateWillDetach
{
  [(_UIKeyboardStateManager *)self detach];
  objc_storeWeak((id *)&self->_presentationDelegate, 0);
}

- (void)detach
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (os_variant_has_internal_diagnostics())
  {
    id v6 = _UIKeyboardExtendedLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int64_t id = self->_id;
      int v8 = 134217984;
      int64_t v9 = id;
      _os_log_impl(&dword_1853B0000, v6, OS_LOG_TYPE_DEFAULT, "KeyboardStateManager detach (id=%ld)", (uint8_t *)&v8, 0xCu);
    }
  }
  int v3 = sharedInputManagerMux();
  BOOL v4 = [v3 responseDelegate];

  if (v4 == self) {
    [v3 setResponseDelegate:0];
  }
  BOOL v5 = [MEMORY[0x1E4F1CAC0] currentRunLoop];
  [v5 cancelPerformSelectorsWithTarget:self];

  [(_UIKeyboardStateManager *)self clearTimers];
  [(_UIKeyboardStateManager *)self clearRemoteTextInputPartner];
}

- (void)dealloc
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (os_variant_has_internal_diagnostics())
  {
    id v25 = _UIKeyboardExtendedLog();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      int64_t id = self->_id;
      *(_DWORD *)buf = 134217984;
      int64_t v29 = id;
      _os_log_impl(&dword_1853B0000, v25, OS_LOG_TYPE_DEFAULT, "KeyboardStateManager dealloc (id=%ld)", buf, 0xCu);
    }
  }
  int v3 = [(_UIKeyboardStateManager *)self inputDelegate];
  BOOL v4 = [v3 inputDelegate];

  if (v4 == self)
  {
    BOOL v5 = [(_UIKeyboardStateManager *)self inputDelegate];
    [v5 setInputDelegate:0];
  }
  id v6 = [(_UIKeyboardStateManager *)self asyncInputDelegate];

  if (v6)
  {
    BOOL v7 = [(_UIKeyboardStateManager *)self asyncInputDelegate];
    int v8 = [v7 asyncSystemInputDelegate];

    if (v8 == self)
    {
      int64_t v9 = [(_UIKeyboardStateManager *)self asyncInputDelegate];
      [v9 setAsyncSystemInputDelegate:0];
    }
  }
  uint64_t v10 = [(_UIKeyboardStateManager *)self webInputDelegate];

  if (v10)
  {
    id v11 = [(_UIKeyboardStateManager *)self webInputDelegate];
    char v12 = [v11 asyncInputDelegate];

    if (v12 == self)
    {
      uint64_t v13 = [(_UIKeyboardStateManager *)self webInputDelegate];
      [v13 setAsyncInputDelegate:0];
    }
  }
  self->m_inDealloc = 1;
  [(_UIKeyboardStateManager *)self detach];
  m_previousInputString = self->m_previousInputString;
  self->m_previousInputString = 0;

  m_previousGlobeKeyEvent = self->m_previousGlobeKeyEvent;
  self->m_previousGlobeKeyEvent = 0;

  [(_UIKeyboardStateManager *)self setChangedDelegate:0];
  [(_UIKeyboardStateManager *)self removeAutocorrectPromptAndCandidateList];
  [(_UIKeyboardStateManager *)self removeTextChoicePrompt];
  [(_UIKeyboardStateManager *)self removeTextChoiceUnderlines];
  [(_UIActionWhenIdle *)self->m_deferredDidSetDelegateAction invalidate];
  [(_UIActionWhenIdle *)self->m_delayedCandidateRequest invalidate];
  uint64_t v16 = +[_UIKeyboardTextSelectionGestureController sharedInstance];
  int v17 = [v16 delegate];

  if (v17 == self)
  {
    long long v18 = +[_UIKeyboardTextSelectionGestureController sharedInstance];
    [v18 setDelegate:0];
  }
  char v19 = +[_UIKeyboardBasedTextSelectionGestureController sharedInstance];
  id v20 = [v19 delegate];

  if (v20 == self)
  {
    char v21 = +[_UIKeyboardBasedTextSelectionGestureController sharedInstance];
    [v21 setDelegate:0];
  }
  [(_UIKeyboardImplProxy *)self->m_implProxy setDelegate:0];
  characterRectsForCharacterRange = self->_characterRectsForCharacterRange;
  self->_characterRectsForCharacterRange = 0;

  id deferredUpdateTask = self->_deferredUpdateTask;
  self->_id deferredUpdateTask = 0;

  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained resetIsPhysicallyAttachedHardwareKeyboard];

  v27.receiver = self;
  v27.super_class = (Class)_UIKeyboardStateManager;
  [(_UIKeyboardStateManager *)&v27 dealloc];
}

- (id)layoutState
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  int v3 = [WeakRetained layoutState];

  return v3;
}

- (unint64_t)maxNumberOfProactiveCells
{
  int v3 = +[UIPeripheralHost activeInstance];
  BOOL v4 = [v3 loadAwareInputViews];
  BOOL v5 = [v4 keyboard];
  uint64_t v6 = [v5 interfaceOrientation];

  unint64_t v7 = 2;
  if ((UIKeyboardGetSafeDeviceIdiom() & 0xFFFFFFFFFFFFFFFBLL) == 1 && (unint64_t)(v6 - 3) <= 1)
  {
    id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    if ([(id)objc_opt_class() isSplit]) {
      unint64_t v7 = 2;
    }
    else {
      unint64_t v7 = 3;
    }
  }
  return v7;
}

- (id)updateSecureCandidateRenderTraits
{
  p_presentationDelegate = &self->_presentationDelegate;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  id v5 = [WeakRetained layout];
  if (v5)
  {
    int64_t v6 = [(UITextInputTraits *)self->m_traits keyboardAppearance];

    if (v6 == 127)
    {
      id v5 = 0;
      goto LABEL_19;
    }
    id v7 = objc_loadWeakRetained((id *)p_presentationDelegate);
    int v8 = [v7 layout];
    int64_t v9 = [v8 candidateList];
    char v10 = objc_opt_respondsToSelector();

    if (v10)
    {
      id v11 = objc_loadWeakRetained((id *)p_presentationDelegate);
      char v12 = [v11 layout];
      uint64_t v13 = [v12 candidateList];
      id v5 = [v13 secureCandidateRenderTraits];

      goto LABEL_9;
    }
    if (self->m_usesCandidateSelection)
    {
      id v14 = objc_loadWeakRetained((id *)p_presentationDelegate);
      id v11 = [v14 candidateController];

      if (objc_opt_respondsToSelector())
      {
        id v5 = [v11 secureCandidateRenderTraits];
LABEL_9:

        if (v5) {
          goto LABEL_19;
        }
        goto LABEL_12;
      }
    }
LABEL_12:
    id v15 = [off_1E52D39B8 systemFontOfSize:14.0];
    id WeakRetained = [v15 fontName];

    id v5 = objc_alloc_init(MEMORY[0x1E4FAE388]);
    id v16 = objc_loadWeakRetained((id *)p_presentationDelegate);
    int v17 = [v16 _inheritedRenderConfig];
    if ([v17 lightKeyboard]) {
      [MEMORY[0x1E4FAE380] blackColor];
    }
    else {
    long long v18 = [MEMORY[0x1E4FAE380] whiteColor];
    }

    char v19 = (void *)[objc_alloc(MEMORY[0x1E4FAE390]) initWithFontName:WeakRetained maxFontSize:v18 minFontSize:14.0 textColor:11.0];
    [v5 setHeaderTextTraits:v19];

    id v20 = (void *)[objc_alloc(MEMORY[0x1E4FAE390]) initWithFontName:WeakRetained maxFontSize:v18 minFontSize:17.0 textColor:11.0];
    [v5 setInputTextTraits:v20];

    [v5 setResultCountToSingleCellWidth:MEMORY[0x1E4F1CBF0]];
    char v21 = +[UIKeyboardPredictionCellMetrics secureCandidateEstimatedMetricsDictionary];
    [v5 setCellWidthOptions:v21];

    objc_msgSend(v5, "setMaxCellCount:", -[_UIKeyboardStateManager maxNumberOfProactiveCells](self, "maxNumberOfProactiveCells"));
    id v22 = +[UIScreen mainScreen];
    [v22 scale];
    objc_msgSend(v5, "setScreenScale:");

    [v5 setIsCandidateUI:0];
    id v23 = objc_loadWeakRetained((id *)p_presentationDelegate);
    uint64_t v24 = [v23 traitCollection];
    +[UISystemInputAssistantViewController _defaultPreferredHeightForTraitCollection:v24];
    double v26 = ceil(v25);
    unint64_t v27 = UIKeyboardGetSafeDeviceIdiom() & 0xFFFFFFFFFFFFFFFBLL;
    double v28 = 6.0;
    if (v27 == 1) {
      double v28 = 0.0;
    }
    [v5 setSingleCellHeight:v26 - v28];

    [v5 setSingleCellVerticalPadding:0.0];
  }

LABEL_19:
  return v5;
}

- (void)refreshKeyboardState
{
}

- (void)refreshKeyboardStateUpdatingSecureCandidateRenderTraits:(BOOL)a3
{
  BOOL v3 = a3;
  [(_UIKeyboardStateManager *)self updateInputManagerMode];
  id v5 = [(_UIKeyboardStateManager *)self layoutState];
  [(TIKeyboardState *)self->m_keyboardState setLayoutState:v5];

  int64_t v6 = [(UIKeyboardCandidateList *)self->m_candidateList currentCandidate];
  [(TIKeyboardState *)self->m_keyboardState setCurrentCandidate:v6];

  [(TIKeyboardState *)self->m_keyboardState setNeedsCandidateMetadata:1];
  [(TIKeyboardState *)self->m_keyboardState setShortcutConversionEnabled:[(UITextInputTraits *)self->m_traits shortcutConversionType] != 1];
  [(TIKeyboardState *)self->m_keyboardState setCandidateSelectionPredictionEnabled:[(_UIKeyboardStateManager *)self candidateSelectionPredictionForTraits]];
  id v7 = [MEMORY[0x1E4FAE450] traitsForUITextInputTraits:self->m_traits];
  [(TIKeyboardState *)self->m_keyboardState setTextInputTraits:v7];

  if ([(_UIKeyboardStateManager *)self isPredictionViewControllerVisible]
    || [(_UIKeyboardStateManager *)self prewarmsPredictiveCandidates])
  {
    [(TIKeyboardState *)self->m_keyboardState setAutocorrectionListUIDisplayed:1];
  }
  else
  {
    int v8 = [(_UIKeyboardStateManager *)self autocorrectionController];
    -[TIKeyboardState setAutocorrectionListUIDisplayed:](self->m_keyboardState, "setAutocorrectionListUIDisplayed:", [v8 hasActiveObservers]);
  }
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  -[TIKeyboardState setFloatingKeyboardMode:](self->m_keyboardState, "setFloatingKeyboardMode:", [(id)objc_opt_class() isFloating]);

  id v10 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  -[TIKeyboardState setLandscapeOrientation:](self->m_keyboardState, "setLandscapeOrientation:", (unint64_t)([v10 _keyboardOrientation] - 3) < 2);

  [(TIKeyboardState *)self->m_keyboardState setOmitEmojiCandidates:[(_UIKeyboardStateManager *)self showingEmojiSearch]];
  if (!+[UIKeyboard isKeyboardProcess])
  {
    id v11 = [(_UIKeyboardStateManager *)self textInputTraits];
    int v12 = [v11 acceptsPayloads];

    m_keyboardState = self->m_keyboardState;
    if (v12)
    {
      id v14 = +[UITextInputPayloadController sharedInstance];
      id v15 = [v14 supportedPayloadIds];
      [(TIKeyboardState *)m_keyboardState setSupportedPayloadIds:v15];
    }
    else
    {
      [(TIKeyboardState *)self->m_keyboardState setSupportedPayloadIds:0];
    }
  }
  id v16 = [(_UIKeyboardStateManager *)self responderForSendCurrentLocation];
  [(TIKeyboardState *)self->m_keyboardState setCanSendCurrentLocation:v16 != 0];

  id v17 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  -[TIKeyboardState setLongPredictionListEnabled:](self->m_keyboardState, "setLongPredictionListEnabled:", [v17 accessibilityUsesExtendedKeyboardPredictionsEnabled]);

  [(TIKeyboardState *)self->m_keyboardState setNeedAutofill:[(_UIKeyboardStateManager *)self needAutofillLogin]];
  [(TIKeyboardState *)self->m_keyboardState setNeedOneTimeCodeAutofill:[(_UIKeyboardStateManager *)self needOneTimeCodeAutofill]];
  if (objc_opt_respondsToSelector()) {
    [(TIKeyboardState *)self->m_keyboardState setNeedCellularAutofill:[(_UIKeyboardStateManager *)self needCellularAutofill]];
  }
  [(TIKeyboardState *)self->m_keyboardState setAutofillMode:[(_UIKeyboardStateManager *)self needAutofill]];
  [(TIKeyboardState *)self->m_keyboardState setAutofillSubMode:[(_UIKeyboardStateManager *)self autofillSubMode]];
  long long v18 = [(_UIKeyboardStateManager *)self inlineTextCompletionController];

  if (v18) {
    [(TIKeyboardState *)self->m_keyboardState setInlineCompletionEnabled:[(_UIKeyboardStateManager *)self isInlineCompletionEnabled]];
  }
  if (v3)
  {
    char v19 = [(_UIKeyboardStateManager *)self updateSecureCandidateRenderTraits];
    [(TIKeyboardState *)self->m_keyboardState setSecureCandidateRenderTraits:v19];
  }
  if (self->m_keyboardDelegateStateNeedsRefresh)
  {
    id v20 = +[UIKeyboardInputModeController sharedInputModeController];
    -[TIKeyboardState setIsScreenLocked:](self->m_keyboardState, "setIsScreenLocked:", [v20 deviceStateIsLocked]);

    self->m_keyboardDelegateStateNeedsRefresh = 0;
  }
  id v21 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  -[TIKeyboardState setEmojiPopoverMode:](self->m_keyboardState, "setEmojiPopoverMode:", [v21 isEmojiPopoverPresented]);

  [(TIKeyboardState *)self->m_keyboardState setEmojiSearchMode:[(_UIKeyboardStateManager *)self showingEmojiSearch]];
  [(_UIKeyboardStateManager *)self _updateCanSuggestSupplementalItemsForCurrentSelection];
  BOOL v22 = [(_UIKeyboardStateManager *)self imageSuggestionEnabled];
  id v23 = self->m_keyboardState;
  [(TIKeyboardState *)v23 setImageSuggestionEnabled:v22];
}

- (id)textContentTypeForCurrentInputDelegate
{
  BOOL v3 = [(UITextInputTraits *)self->m_traits textContentType];
  BOOL v4 = v3;
  if (v3)
  {
    id v5 = v3;
  }
  else
  {
    int64_t v6 = [(_UIKeyboardStateManager *)self autofillController];
    id v7 = [(_UIKeyboardStateManager *)self delegateAsResponder];
    id v5 = [v6 textContentTypeForInputDelegate:v7];
  }
  return v5;
}

- (BOOL)textInputTraitsNeedAutofillExcludeOneTimeCodeAndContact
{
  BOOL v3 = [(_UIKeyboardStateManager *)self textInputTraitsNeedAutofill];
  if (v3)
  {
    if ([(_UIKeyboardStateManager *)self textInputTraitsNeedOneTimeCode]) {
      LOBYTE(v3) = 0;
    }
    else {
      LOBYTE(v3) = ![(_UIKeyboardStateManager *)self textInputTraitsNeedContactAutoFill];
    }
  }
  return v3;
}

- (BOOL)textInputTraitsNeedAutofill
{
  id v2 = [(_UIKeyboardStateManager *)self autofillController];
  BOOL v3 = [v2 delegateNeedsAutofillMode] != 0;

  return v3;
}

- (BOOL)textInputTraitsNeedSignup
{
  id v2 = [(_UIKeyboardStateManager *)self autofillController];
  BOOL v3 = [v2 delegateNeedsAutofillMode] == 2;

  return v3;
}

- (BOOL)textInputTraitsNeedOneTimeCode
{
  id v2 = [(_UIKeyboardStateManager *)self autofillController];
  BOOL v3 = [v2 delegateNeedsAutofillMode] == 8;

  return v3;
}

- (BOOL)textInputTraitsNeedContactAutoFill
{
  BOOL v3 = [(_UIKeyboardStateManager *)self autofillController];
  if ([v3 delegateNeedsAutofillMode] == 5)
  {
    BOOL v4 = 1;
  }
  else
  {
    id v5 = [(_UIKeyboardStateManager *)self autofillController];
    if ([v5 delegateNeedsAutofillMode] == 6)
    {
      BOOL v4 = 1;
    }
    else
    {
      int64_t v6 = [(_UIKeyboardStateManager *)self autofillController];
      BOOL v4 = [v6 delegateNeedsAutofillMode] == 7;
    }
  }

  return v4;
}

- (BOOL)needOneTimeCodeAutofill
{
  BOOL v3 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  if ([v3 hasText])
  {
    BOOL v4 = 0;
  }
  else
  {
    id v5 = [(_UIKeyboardStateManager *)self autofillController];
    BOOL v4 = [v5 delegateNeedsAutofillMode] == 8;
  }
  return v4;
}

- (BOOL)needCellularAutofill
{
  BOOL v3 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  if ([v3 hasText])
  {
    BOOL v4 = 0;
  }
  else
  {
    id v5 = [(_UIKeyboardStateManager *)self autofillController];
    BOOL v4 = [v5 delegateNeedsAutofillMode] == 10;
  }
  return v4;
}

- (int64_t)needAutofill
{
  if (+[UIKeyboard isKeyboardProcess])
  {
    uint64_t v3 = [(_UIKeyboardStateManager *)self inputSystemSourceSession];
    BOOL v4 = [(id)v3 documentTraits];

    LOBYTE(v3) = [v4 shouldLoadAutofillSignUp];
    if (v3) {
      return 2;
    }
  }
  int64_t v6 = [(_UIKeyboardStateManager *)self autofillController];
  uint64_t v7 = [v6 delegateNeedsAutofillMode];

  if (v7 == 8)
  {
    int v8 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    if ([v8 hasText]) {
      int64_t v5 = 0;
    }
    else {
      int64_t v5 = 8;
    }
  }
  else
  {
    int v8 = [(_UIKeyboardStateManager *)self autofillController];
    int64_t v5 = [v8 delegateNeedsAutofillMode];
  }

  return v5;
}

- (int64_t)autofillSubMode
{
  if (!+[UIKeyboard isKeyboardProcess]) {
    return self->m_autofillSubMode;
  }
  int64_t result = [(_UIKeyboardStateManager *)self needAutofill];
  if (result)
  {
    BOOL v4 = [(_UIKeyboardStateManager *)self inputSystemSourceSession];
    int64_t v5 = [v4 documentTraits];

    int64_t v6 = [v5 autofillSubMode];
    return v6;
  }
  return result;
}

- (id)_contentsOfUsernameField
{
  id v2 = [(_UIKeyboardStateManager *)self autofillController];
  uint64_t v3 = [v2 autofillGroup];
  BOOL v4 = [v3 objectForKey:@"username"];

  if ([v4 conformsToProtocol:&unk_1ED42F658])
  {
    id v5 = v4;
    int64_t v6 = [v5 beginningOfDocument];
    uint64_t v7 = [v5 endOfDocument];
    int v8 = [v5 textRangeFromPosition:v6 toPosition:v7];
    int64_t v9 = [v5 textInRange:v8];
  }
  else
  {
    int64_t v9 = 0;
  }

  return v9;
}

- (void)generateAutofillCandidate
{
}

- (void)generateAutofillCandidateByAddingTask:(BOOL)a3
{
  BOOL v3 = a3;
  id v5 = [(_UIKeyboardStateManager *)self inputDelegate];
  BOOL v6 = [(_UIKeyboardStateManager *)self suppressOptOutASPCandidateUpdateForDelegate:v5];

  if (!v6)
  {
    id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    char v8 = [WeakRetained keyboardLayoutIsInAnotherProcess];

    if ((v8 & 1) == 0)
    {
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 3221225472;
      aBlock[2] = __65___UIKeyboardStateManager_generateAutofillCandidateByAddingTask___block_invoke;
      aBlock[3] = &unk_1E52E34C8;
      aBlock[4] = self;
      int64_t v9 = _Block_copy(aBlock);
      if (v3)
      {
        if (qword_1EB25F768 != -1) {
          dispatch_once(&qword_1EB25F768, &__block_literal_global_106);
        }
        id v10 = [(_UIKeyboardStateManager *)self taskQueue];
        [v10 addTask:v9 breadcrumb:qword_1EB25F760];
      }
      else
      {
        if (qword_1EB25F778 != -1) {
          dispatch_once(&qword_1EB25F778, &__block_literal_global_412);
        }
        id v10 = [(_UIKeyboardStateManager *)self taskQueue];
        [v10 performTask:v9 breadcrumb:qword_1EB25F770];
      }
    }
  }
}

- (void)refreshAutofillModeIfNecessary
{
  BOOL v3 = [(_UIKeyboardStateManager *)self needAutofillLogin];
  int64_t v4 = [(_UIKeyboardStateManager *)self needAutofill];
  if (v3 != [(TIKeyboardState *)self->m_keyboardState needAutofill]) {
    [(TIKeyboardState *)self->m_keyboardState setNeedAutofill:v3];
  }
  if ([(TIKeyboardState *)self->m_keyboardState autofillMode] != v4) {
    [(TIKeyboardState *)self->m_keyboardState setAutofillMode:v4];
  }
  if (v4) {
    int v5 = 1;
  }
  else {
    int v5 = v3;
  }
  if (v5 == 1)
  {
    self->m_keyboardDelegateStateNeedsRefresh = 1;
    [(_UIKeyboardStateManager *)self generateAutofillCandidate];
  }
}

- (void)refreshSecureCandidatesIfNecessary
{
  self->m_keyboardDelegateStateNeedsRefresh = 1;
  if ([(_UIKeyboardStateManager *)self usesCandidateSelection]
    && [(TIKeyboardCandidateResultSet *)self->m_candidateResultSet slottedCandidatesCount])
  {
    [(_UIKeyboardStateManager *)self setCandidates:0];
  }
}

- (void)setPendingAutofillIndex:(int64_t)a3
{
  if ((a3 & 0x8000000000000000) == 0 && self->m_cachedAutofillMode == 1)
  {
    self->m_pendingAutofillIndex = a3;
    [(_UIKeyboardStateManager *)self generateAutofillCandidate];
  }
}

- (BOOL)preferFallbackAutofillGroup
{
  id v2 = [(_UIKeyboardStateManager *)self autofillController];
  char v3 = [v2 preferFallbackAutofillGroup];

  return v3;
}

- (int64_t)needAutofillCandidate:(id)a3
{
  id v4 = a3;
  if (v4)
  {
    int v5 = [(_UIKeyboardStateManager *)self inputSystemSourceSession];
    BOOL v6 = v5;
    if (v5)
    {
      uint64_t v7 = [v5 documentTraits];
      uint64_t m_cachedAutofillMode = [v7 autofillMode];

      if (m_cachedAutofillMode != 1)
      {
LABEL_17:

        goto LABEL_18;
      }
      int64_t v9 = [v6 documentTraits];
      id v10 = [v9 textInputTraits];
      if ([v10 secureTextEntry])
      {
        BOOL v11 = [(UITextInputTraits *)self->m_traits isSecureTextEntry];

        if (v11)
        {
          int v12 = [(_UIKeyboardStateManager *)self autofillController];
          uint64_t v13 = [v12 autofillGroup];
          [v13 setObject:v4 forKey:@"password"];

          goto LABEL_15;
        }
      }
      else
      {
      }
      id v16 = [v6 documentTraits];
      id v17 = [v16 textInputTraits];
      long long v18 = [v17 textContentType];
      int v19 = [v18 isEqual:@"username"];

      if (!v19)
      {
LABEL_16:
        uint64_t m_cachedAutofillMode = 1;
        goto LABEL_17;
      }
      int v12 = [(_UIKeyboardStateManager *)self autofillController];
      id v20 = [v12 autofillGroup];
      [v20 setObject:v4 forKey:@"username"];

LABEL_15:
      goto LABEL_16;
    }
    if (self->m_isAutofilling
      || [(_UIKeyboardStateManager *)self delegateAlreadyInAutofillGroup])
    {
      uint64_t m_cachedAutofillMode = self->m_cachedAutofillMode;
      if ((m_cachedAutofillMode & 0xFFFFFFFFFFFFFFFELL) == 2)
      {
        id v14 = [(_UIKeyboardStateManager *)self autofillController];
        id v15 = [(_UIKeyboardStateManager *)self delegateAsResponder];
        self->m_autofillSubMode = [v14 needAutofillCandidate:v4 delegateAsResponder:v15 keyboardState:self->m_keyboardState];

        uint64_t m_cachedAutofillMode = self->m_cachedAutofillMode;
      }
      goto LABEL_17;
    }
    if ((self->m_cachedAutofillMode & 0xFFFFFFFFFFFFFFFELL) != 2)
    {
LABEL_33:
      v40 = [(_UIKeyboardStateManager *)self autofillController];
      v41 = [(_UIKeyboardStateManager *)self delegateAsResponder];
      uint64_t m_cachedAutofillMode = [v40 needAutofillCandidate:v4 delegateAsResponder:v41 keyboardState:self->m_keyboardState];

      self->m_autofillSubMode = m_cachedAutofillMode;
      if (m_cachedAutofillMode == 8)
      {
        if ([(_UIKeyboardStateManager *)self dontPushOneTimeCode]) {
          uint64_t m_cachedAutofillMode = 0;
        }
        else {
          uint64_t m_cachedAutofillMode = 8;
        }
      }
      char v42 = [(_UIKeyboardStateManager *)self autofillController];
      BOOL v43 = [v42 autofillGroup];
      [v43 objectForKey:@"password"];

      goto LABEL_17;
    }
    BOOL v22 = [(_UIKeyboardStateManager *)self autofillController];
    id v23 = [v22 autofillGroup];
    uint64_t v24 = [v23 objectForKey:@"new-password"];

    if (!v24)
    {
      double v25 = [(_UIKeyboardStateManager *)self autofillController];
      double v26 = [v25 autofillGroup];
      uint64_t v24 = [v26 objectForKey:@"username"];
    }
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        unint64_t v27 = [v4 superview];
        uint64_t v28 = [v24 superview];
        if (v27 == (void *)v28)
        {
        }
        else
        {
          int64_t v29 = (void *)v28;
          BOOL v30 = [(_UIKeyboardStateManager *)self isMemberOfPossibleAutofillGroup:v4];

          if (!v30) {
            goto LABEL_32;
          }
        }
        int v31 = [(_UIKeyboardStateManager *)self autofillController];
        uint64_t v32 = [v31 autofillGroup];
        if (!v32) {
          goto LABEL_31;
        }
        uint64_t v33 = (void *)v32;
        uint64_t v34 = [(_UIKeyboardStateManager *)self autofillController];
        v35 = [(_UIKeyboardStateManager *)self autofillController];
        uint64_t v36 = [v35 autofillGroup];
        int v37 = [v34 containsUsernamePasswordPairsInAutofillGroup:v36];

        if (v37)
        {
          int v31 = [(_UIKeyboardStateManager *)self autofillController];
          char v38 = [v31 autofillGroup];
          v39 = [(_UIKeyboardStateManager *)self autofillController];
          [v39 setFallbackAutofillGroup:v38];

LABEL_31:
        }
      }
    }
LABEL_32:

    goto LABEL_33;
  }
  uint64_t m_cachedAutofillMode = 0;
LABEL_18:

  return m_cachedAutofillMode;
}

- (BOOL)delegateAlreadyInAutofillGroup
{
  char v3 = [(_UIKeyboardStateManager *)self inputDelegate];
  if ((objc_msgSend(v3, "__isKindOfUIResponder") & 1) == 0)
  {
    uint64_t v4 = [(_UIKeyboardStateManager *)self delegateAsResponder];

    char v3 = (void *)v4;
  }
  int v5 = [(_UIKeyboardStateManager *)self autofillController];
  [v5 updateAutofillContextForInputDelegate:v3];

  BOOL v6 = [(_UIKeyboardStateManager *)self isMemberOfAutofillGroup:v3];
  return v6;
}

- (int64_t)cachedAutofillMode
{
  return self->m_cachedAutofillMode;
}

- (void)clearAutofillGroup
{
  char v3 = [(_UIKeyboardStateManager *)self autofillController];
  [v3 clearAutofillGroup];

  self->uint64_t m_cachedAutofillMode = 0;
}

- (void)removeASPVisualEffectsIfNecessary:(id)a3
{
  id v4 = a3;
  if (self->m_cachedAutofillMode)
  {
    id v7 = v4;
    char v5 = dyld_program_sdk_at_least();
    id v4 = v7;
    if ((v5 & 1) == 0)
    {
      BOOL v6 = [(_UIKeyboardStateManager *)self autofillController];
      [v6 clearASPVisualEffectsInTextField:v7];

      id v4 = v7;
    }
  }
}

- (void)handleAutofillCredentialSaveIfNeeded:(id)a3
{
  id v15 = a3;
  if (self->m_cachedAutofillMode
    || ([(_UIKeyboardStateManager *)self autofillController],
        id v4 = objc_claimAutoreleasedReturnValue(),
        [v4 fallbackAutofillGroup],
        char v5 = objc_claimAutoreleasedReturnValue(),
        v5,
        v4,
        v5))
  {
    BOOL v6 = [(_UIKeyboardStateManager *)self preferFallbackAutofillGroup];
    id v7 = [(_UIKeyboardStateManager *)self autofillController];
    char v8 = v7;
    if (v6) {
      [v7 fallbackAutofillGroup];
    }
    else {
    int64_t v9 = [v7 autofillGroup];
    }

    id v10 = [v9 objectForKey:@"UIAutofillASPOptInKey"];
    unsigned int v11 = [v10 BOOLValue];

    int v12 = (self->m_cachedAutofillMode & 0xFFFFFFFFFFFFFFFELL) == 2 || v6;
    uint64_t v13 = v12 & v11;
    id v14 = [(_UIKeyboardStateManager *)self autofillController];
    [v14 handleAutofillCredentialSaveIfNeeded:v15 fromASP:v13];
  }
  else
  {
    [(_UIKeyboardStateManager *)self clearAutofillGroup];
  }
}

- (BOOL)suppressOptOutASPCandidateUpdateForDelegate:(id)a3
{
  unint64_t v4 = self->m_cachedAutofillMode & 0xFFFFFFFFFFFFFFFELL;
  id v5 = a3;
  BOOL v6 = [(_UIKeyboardStateManager *)self autofillController];
  id v7 = [v6 autofillGroup];
  id v8 = [v7 objectForKey:@"password"];

  int64_t v9 = [(_UIKeyboardStateManager *)self autofillController];
  id v10 = [v9 autofillGroup];
  unsigned int v11 = [v10 objectForKey:@"UIAutofillASPOptInKey"];
  char v12 = [v11 BOOLValue];

  if (v4 == 2 && v8 == v5) {
    return v12 ^ 1;
  }
  else {
    return 0;
  }
}

- (TIKeyboardLayout)layoutForKeyHitTest
{
  return (TIKeyboardLayout *)[(TIKeyboardState *)self->m_keyboardState keyLayout];
}

- (void)setLayoutForKeyHitTest:(id)a3
{
}

- (void)deactivateLayout
{
  p_presentationDelegate = &self->_presentationDelegate;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained clearLanguageIndicator];

  id v5 = objc_loadWeakRetained((id *)p_presentationDelegate);
  unint64_t v4 = [v5 layout];
  [v4 deactivateActiveKeys];
}

- (void)textWillScroll
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained textWillScroll];
}

- (void)textDidScroll
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained textDidScroll];
}

- (BOOL)selectionScrolling
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  char v3 = [WeakRetained selectionScrolling];

  return v3;
}

- (BOOL)updatingPreferences
{
  return self->m_updatingPreferences > 0;
}

- (void)updatePreferencesWithBlock:(id)a3
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = (void (**)(void))a3;
  if (pthread_main_np() != 1)
  {
    if (os_variant_has_internal_diagnostics())
    {
      BOOL v6 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      {
        int v7 = 136315138;
        id v8 = "-[_UIKeyboardStateManager updatePreferencesWithBlock:]";
        _os_log_fault_impl(&dword_1853B0000, v6, OS_LOG_TYPE_FAULT, "Unsupported use of %s off the main thread", (uint8_t *)&v7, 0xCu);
      }
    }
    else
    {
      id v5 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &updatePreferencesWithBlock____s_category) + 8);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        int v7 = 136315138;
        id v8 = "-[_UIKeyboardStateManager updatePreferencesWithBlock:]";
        _os_log_impl(&dword_1853B0000, v5, OS_LOG_TYPE_ERROR, "Unsupported use of %s off the main thread", (uint8_t *)&v7, 0xCu);
      }
    }
  }
  if (v4)
  {
    ++self->m_updatingPreferences;
    v4[2](v4);
    --self->m_updatingPreferences;
  }
}

- (void)updateDefaultsWithResults:(id)a3
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (pthread_main_np() != 1)
  {
    if (os_variant_has_internal_diagnostics())
    {
      unsigned int v11 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315138;
        id v16 = "-[_UIKeyboardStateManager updateDefaultsWithResults:]";
        _os_log_fault_impl(&dword_1853B0000, v11, OS_LOG_TYPE_FAULT, "Unsupported use %s off the main thread", buf, 0xCu);
      }
    }
    else
    {
      id v10 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &updateDefaultsWithResults____s_category) + 8);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        id v16 = "-[_UIKeyboardStateManager updateDefaultsWithResults:]";
        _os_log_impl(&dword_1853B0000, v10, OS_LOG_TYPE_ERROR, "Unsupported use %s off the main thread", buf, 0xCu);
      }
    }
  }
  if (![(_UIKeyboardStateManager *)self updatingPreferences])
  {
    id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    if ([WeakRetained isUsingDictationLayout])
    {
    }
    else
    {
      id v6 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      char v7 = [v6 isDictationPopoverPresented];

      if ((v7 & 1) == 0)
      {
        ++self->m_updatingPreferences;
        BOOL v8 = [(_UIKeyboardStateManager *)self isInHardwareKeyboardMode];
        uint64_t v9 = dispatch_get_global_queue(0, 0);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = __53___UIKeyboardStateManager_updateDefaultsWithResults___block_invoke;
        block[3] = &unk_1E52E3538;
        BOOL v14 = v8;
        block[4] = self;
        id v13 = v4;
        dispatch_async(v9, block);
      }
    }
  }
}

- (BOOL)keyboardIsInPencilTextInputMode
{
  char v3 = [(_UIKeyboardStateManager *)self delegateAsResponder];
  if ([v3 _suppressSoftwareKeyboard]) {
    BOOL v4 = [(_UIKeyboardStateManager *)self _textInputSourceForDelegate:v3] == 3;
  }
  else {
    BOOL v4 = 0;
  }

  return v4;
}

- (int64_t)_textInputSourceForDelegate:(id)a3
{
  id v3 = a3;
  if (objc_opt_respondsToSelector()) {
    int64_t v4 = [v3 _textInputSource];
  }
  else {
    int64_t v4 = 0;
  }

  return v4;
}

- (void)performReturn
{
  id v3 = [(_UIKeyboardStateManager *)self delegateAsResponder];
  id v5 = [v3 _responderForEditing];

  if ((objc_opt_respondsToSelector() & 1) != 0 && [v5 returnKeyGoesToNextResponder])
  {
    id v4 = [v5 _nextKeyResponder];
    if ([v5 _suppressSoftwareKeyboard]) {
      [v4 _setSuppressSoftwareKeyboard:1];
    }
    if (objc_opt_respondsToSelector() & 1) != 0 && (objc_opt_respondsToSelector()) {
      objc_msgSend(v4, "set_textInputSource:", objc_msgSend(v5, "_textInputSource"));
    }
    [v4 becomeFirstResponder];
  }
  else
  {
    id v4 = objc_alloc_init(MEMORY[0x1E4FAE370]);
    [v4 insertText:@"\n"];
    [(_UIKeyboardStateManager *)self performKeyboardOutputAsInputViewControllerOutput:v4 textInputSource:0];
  }
}

- (void)performDelete
{
  id v3 = objc_alloc_init(MEMORY[0x1E4FAE370]);
  [v3 deleteBackward];
  [(_UIKeyboardStateManager *)self performKeyboardOutputAsInputViewControllerOutput:v3 textInputSource:3];
}

- (void)performOperations:(id)a3 withTextInputSource:(int64_t)a4
{
  int64_t m_textInputSource = self->m_textInputSource;
  self->int64_t m_textInputSource = a4;
  (*((void (**)(id, SEL))a3 + 2))(a3, a2);
  self->int64_t m_textInputSource = m_textInputSource;
}

- (void)updateTextInputKeyboardSource
{
  v12[2] = *MEMORY[0x1E4F143B8];
  int64_t m_textInputSource = self->m_textInputSource;
  if (m_textInputSource)
  {
    id v4 = +[UIKeyboardSceneDelegate automaticKeyboardArbiterClient];
    uint64_t v5 = [v4 lastEventSource];

    if ((unint64_t)(m_textInputSource - 4) < 5 || m_textInputSource == 1)
    {
      if (v5 == 3) {
        uint64_t v7 = 15;
      }
      else {
        uint64_t v7 = 5;
      }
    }
    else if (m_textInputSource == 3 && (unint64_t)(v5 - 1) < 8)
    {
      uint64_t v7 = qword_186B93E00[v5 - 1];
    }
    else
    {
      uint64_t v7 = 5;
    }
    v11[0] = @"inputSource";
    BOOL v8 = [NSNumber numberWithInteger:m_textInputSource];
    v11[1] = @"options";
    v12[0] = v8;
    uint64_t v9 = [NSNumber numberWithUnsignedInteger:v7];
    v12[1] = v9;
    id v10 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v12 forKeys:v11 count:2];
    [(_UIKeyboardStateManager *)self updateTextInputKeyboardSource:v10];
  }
}

- (void)updateTextInputKeyboardSource:(id)a3
{
  p_presentationDelegate = &self->_presentationDelegate;
  id v4 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)p_presentationDelegate);
  [WeakRetained updateTextInputKeyboardSource:v4];
}

- (BOOL)inlineTextCompletionAllowedForAutocorrectionType
{
  return [(_UIKeyboardStateManager *)self _updateAutocorrectionPreferenceForTraitsWithCurrentPreference:1] == 1;
}

- (BOOL)_shouldLoadPredictionsBasedOnCurrentTraits
{
  BOOL v3 = [(_UIKeyboardStateManager *)self predictionFromPreference];
  if (v3)
  {
    if (![(_UIKeyboardStateManager *)self prewarmsPredictiveCandidates]
      && ([(UITextInputTraits *)self->m_traits disablePrediction]
       || [(UITextInputTraits *)self->m_traits hidePrediction])
      || [(UITextInputTraits *)self->m_traits autocorrectionType] == 1)
    {
      LOBYTE(v3) = 0;
    }
    else
    {
      LOBYTE(v3) = ![(UITextInputTraits *)self->m_traits isSecureTextEntry];
    }
  }
  return v3;
}

- (BOOL)canShowPredictionBar
{
  if ((UIKeyboardPredictionEnabledForCurrentInputMode() & 1) != 0
    || (UIKeyboardShowsTransliterationCandidatesForCurrentInputMode() & 1) != 0)
  {
    return 1;
  }
  return [(_UIKeyboardStateManager *)self isAutofillPrediction];
}

- (BOOL)isPredictionViewControllerVisible
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  char v3 = [WeakRetained isPredictionViewControllerVisible];

  return v3;
}

- (BOOL)disableInputBars
{
  BOOL v3 = [(UITextInputTraits *)self->m_traits disableInputBars];
  if (v3)
  {
    if ([(UITextInputTraits *)self->m_traits isDevicePasscodeEntry])
    {
      LOBYTE(v3) = 1;
    }
    else
    {
      LOBYTE(v3) = [(_UIKeyboardStateManager *)self isMinimized];
    }
  }
  return v3;
}

- (BOOL)candidateSelectionPredictionForTraits
{
  if ([(UITextInputTraits *)self->m_traits isSecureTextEntry]
    || [(UITextInputTraits *)self->m_traits disablePrediction]
    || [(UITextInputTraits *)self->m_traits autocorrectionType] == 1)
  {
    return 0;
  }
  else
  {
    return ![(_UIKeyboardStateManager *)self keyboardIsKeyPad];
  }
}

- (BOOL)autocapitalizationPreference
{
  BOOL v2 = [(_UIKeyboardStateManager *)self isInHardwareKeyboardMode];
  BOOL v3 = +[UIKeyboardPreferencesController sharedPreferencesController];
  id v4 = [v3 preferencesActions];
  uint64_t v5 = v4;
  id v6 = (void *)MEMORY[0x1E4FAE5E8];
  if (!v2) {
    id v6 = (void *)MEMORY[0x1E4FAE7A0];
  }
  char v7 = [v4 BOOLForPreferenceKey:*v6];

  return v7;
}

- (BOOL)smartInsertDeleteIsEnabled
{
  if ([(UITextInputTraits *)self->m_traits smartInsertDeleteType] == 1
    || [(UITextInputTraits *)self->m_traits isSecureTextEntry]
    || [(_UIKeyboardStateManager *)self disableSmartInsertDelete])
  {
    return 0;
  }
  uint64_t v5 = +[UIKeyboardPreferencesController sharedPreferencesController];
  id v6 = [v5 preferencesActions];
  char v3 = [v6 BOOLForPreferenceKey:*MEMORY[0x1E4FAEAA0]];

  return v3;
}

- (BOOL)liveConversionEnabled
{
  return [(TIKeyboardInputManagerState *)self->m_inputManagerState usesLiveConversion];
}

- (BOOL)delayedCandidateList
{
  return [(TIKeyboardInputManagerState *)self->m_inputManagerState delayedCandidateList];
}

- (TISmartPunctuationController)smartPunctuationController
{
  char v3 = [(TISmartPunctuationController *)self->m_smartPunctuationController smartPunctuationOptions];

  if (!v3)
  {
    id v4 = +[UIKeyboardInputModeController sharedInputModeController];
    uint64_t v5 = [v4 currentInputMode];
    id v6 = [v5 primaryLanguage];
    [(_UIKeyboardStateManager *)self updateSmartPunctuationOptionsForLocaleIdentifier:v6];
  }
  m_smartPunctuationController = self->m_smartPunctuationController;
  return m_smartPunctuationController;
}

- (BOOL)doubleSpacePeriodPreference
{
  BOOL v2 = [(_UIKeyboardStateManager *)self isInHardwareKeyboardMode];
  char v3 = +[UIKeyboardPreferencesController sharedPreferencesController];
  id v4 = [v3 preferencesActions];
  uint64_t v5 = v4;
  id v6 = (void *)MEMORY[0x1E4FAE610];
  if (!v2) {
    id v6 = (void *)MEMORY[0x1E4FAE940];
  }
  char v7 = [v4 BOOLForPreferenceKey:*v6];

  return v7;
}

- (id)UILanguagePreference
{
  BOOL v2 = [MEMORY[0x1E4F1CA20] preferredLanguages];
  if ([v2 count])
  {
    char v3 = [v2 objectAtIndex:0];
  }
  else
  {
    char v3 = @"intl";
  }

  return v3;
}

- (BOOL)keyboardsExpandedPreference
{
  BOOL v2 = +[UIKeyboardPreferencesController sharedPreferencesController];
  char v3 = [v2 preferencesActions];
  char v4 = [v3 BOOLForPreferenceKey:*MEMORY[0x1E4FAE518]];

  return v4;
}

- (BOOL)automaticMinimizationEnabled
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  char v3 = [WeakRetained automaticMinimizationEnabled];

  return v3;
}

- (void)setAutomaticMinimizationEnabled:(BOOL)a3
{
  BOOL v3 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained setAutomaticMinimizationEnabled:v3];
}

- (id)inputModePreference
{
  BOOL v2 = +[UIKeyboardInputModeController sharedInputModeController];
  BOOL v3 = [v2 activeInputModeIdentifiers];

  return v3;
}

- (void)updateInputModeLastChosenPreference
{
  if (!self->m_updatingPreferences)
  {
    self->m_updatingPreferences = 1;
    [(_UIKeyboardStateManager *)self autocapitalizationPreference];
    [(_UIKeyboardStateManager *)self doubleSpacePeriodPreference];
    [(_UIKeyboardStateManager *)self shiftLockPreference];
    self->m_updatingPreferences = 0;
  }
}

- (void)setShouldUpdateCacheOnInputModesChange:(BOOL)a3
{
  self->m_shouldUpdateCacheOnInputModesChange = a3;
}

- (id)hardwareKeyboardsSeenPreference
{
  BOOL v2 = +[UIKeyboardPreferencesController sharedPreferencesController];
  BOOL v3 = [v2 preferencesActions];
  char v4 = [v3 valueForPreferenceKey:*MEMORY[0x1E4FAE878]];

  return v4;
}

- (void)setHardwareKeyboardsSeenPreference:(id)a3
{
  self->m_updatingPreferences = 1;
  id v4 = a3;
  uint64_t v5 = +[UIKeyboardPreferencesController sharedPreferencesController];
  id v6 = [v5 preferencesActions];
  [v6 setValue:v4 forPreferenceKey:*MEMORY[0x1E4FAE878]];

  self->m_updatingPreferences = 0;
}

- (BOOL)shiftLockPreference
{
  BOOL v2 = +[UIKeyboardPreferencesController sharedPreferencesController];
  BOOL v3 = [v2 preferencesActions];
  char v4 = [v3 BOOLForPreferenceKey:*MEMORY[0x1E4FAE810]];

  return v4;
}

- (void)setInputMode:(id)a3
{
}

- (void)setInputMode:(id)a3 userInitiated:(BOOL)a4
{
  BOOL v4 = a4;
  v28[2] = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  if (!+[UIKeyboard usesInputSystemUI]) {
    goto LABEL_19;
  }
  char v7 = +[UIKeyboardSceneDelegate automaticKeyboardArbiterClient];
  char v8 = [v7 handlingRemoteEvent];

  if ((v8 & 1) == 0)
  {
    uint64_t v9 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
    v27[0] = @"inputMode";
    v27[1] = @"isUserInitiated";
    v28[0] = v6;
    id v10 = [NSNumber numberWithBool:v4];
    v28[1] = v10;
    unsigned int v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v28 forKeys:v27 count:2];
    [v9 forwardKeyboardInputMode:v11];
  }
  char v12 = +[UIKeyboardInputModeController sharedInputModeController];
  id v13 = [v12 currentInputMode];
  BOOL v14 = [v13 identifier];
  int v15 = [v14 isEqualToString:@"autofillsignup"];

  if (v15)
  {
LABEL_19:
    if ([(_UIKeyboardStateManager *)self floatingForced]
      && [v6 hasPrefix:@"emoji"])
    {
      [(_UIKeyboardStateManager *)self updateAssistantView];
    }
    uint64_t v20 = MEMORY[0x1E4F143A8];
    uint64_t v21 = 3221225472;
    BOOL v22 = __54___UIKeyboardStateManager_setInputMode_userInitiated___block_invoke;
    id v23 = &unk_1E52E3560;
    uint64_t v24 = self;
    id v25 = v6;
    BOOL v26 = v4;
    id v16 = _Block_copy(&v20);
    uint64_t v17 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    int v18 = [v17 insideKeyInputDelegateCall];

    if (v18)
    {
      if (qword_1EB25F788 != -1) {
        dispatch_once(&qword_1EB25F788, &__block_literal_global_450);
      }
      int v19 = [(_UIKeyboardStateManager *)self taskQueue];
      [v19 addTask:v16 breadcrumb:qword_1EB25F780];
    }
    else
    {
      if (qword_1EB25F798 != -1) {
        dispatch_once(&qword_1EB25F798, &__block_literal_global_456);
      }
      int v19 = [(_UIKeyboardStateManager *)self taskQueue];
      [v19 performSingleTask:v16 breadcrumb:qword_1EB25F790];
    }
  }
}

- (void)setInputMode:(id)a3 userInitiated:(BOOL)a4 updateIndicator:(BOOL)a5 executionContext:(id)a6
{
  BOOL v6 = a5;
  BOOL v7 = a4;
  id v10 = a6;
  id v11 = +[UIKeyboardInputMode keyboardInputModeWithIdentifier:a3];
  self->m_didAutomaticallyInsertSpaceBeforeChangingInputMode = self->m_didAutomaticallyInsertSpace;
  [(_UIKeyboardStateManager *)self setKeyboardInputMode:v11 userInitiated:v7 updateIndicator:v6 executionContext:v10];
}

- (void)_setKeyboardInputMode:(id)a3 userInitiated:(BOOL)a4 force:(BOOL)a5
{
  id v8 = a3;
  if (qword_1EB25F7A8 != -1) {
    dispatch_once(&qword_1EB25F7A8, &__block_literal_global_461);
  }
  uint64_t v9 = [(_UIKeyboardStateManager *)self taskQueue];
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __69___UIKeyboardStateManager__setKeyboardInputMode_userInitiated_force___block_invoke_3;
  void v12[3] = &unk_1E52E3588;
  v12[4] = self;
  id v13 = v8;
  BOOL v14 = a4;
  BOOL v15 = a5;
  uint64_t v10 = qword_1EB25F7A0;
  id v11 = v8;
  [v9 performSingleTask:v12 breadcrumb:v10];
}

- (void)setKeyboardInputMode:(id)a3 userInitiated:(BOOL)a4
{
}

- (void)postInputViewControllerShouldUpdateNotification:(id)a3
{
  p_presentationDelegate = &self->_presentationDelegate;
  id v4 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)p_presentationDelegate);
  [WeakRetained postInputViewControllerShouldUpdateNotification:v4];
}

- (void)reloadCurrentInputMode
{
  id v4 = +[UIKeyboardInputModeController sharedInputModeController];
  BOOL v3 = [v4 currentInputMode];
  [(_UIKeyboardStateManager *)self _setKeyboardInputMode:v3 userInitiated:0 force:1];
}

- (void)setKeyboardInputMode:(id)a3 userInitiated:(BOOL)a4 updateIndicator:(BOOL)a5 executionContext:(id)a6
{
  BOOL v7 = a5;
  BOOL v8 = a4;
  id v10 = a3;
  id v11 = a6;
  if (![v10 isEmojiInputMode] || !self->m_delegateSupportsImagePaste) {
    goto LABEL_7;
  }
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  if ([(id)objc_opt_class() isSplit])
  {

LABEL_7:
    [(_UIKeyboardStateManager *)self _setKeyboardInputMode:v10 userInitiated:v8 updateIndicator:v7 force:0 executionContext:v11];
    goto LABEL_8;
  }
  id v13 = +[UIKeyboardMediaController sharedKeyboardMediaController];
  int v14 = [v13 shouldPrefetchRemoteView];

  if (!v14) {
    goto LABEL_7;
  }
  [v11 returnExecutionToParent];
  BOOL v15 = UIKeyboardGetCurrentInputMode();
  id v16 = +[UIKeyboardMediaController sharedKeyboardMediaController];
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  v18[2] = __95___UIKeyboardStateManager_setKeyboardInputMode_userInitiated_updateIndicator_executionContext___block_invoke;
  v18[3] = &unk_1E52DAD98;
  id v19 = v15;
  uint64_t v20 = self;
  id v21 = v10;
  BOOL v22 = v8;
  BOOL v23 = v7;
  id v17 = v15;
  [v16 prefetchRecentsViewControllerWithCompletion:v18];

LABEL_8:
}

- (void)_setKeyboardInputMode:(id)a3 userInitiated:(BOOL)a4 updateIndicator:(BOOL)a5 force:(BOOL)a6 executionContext:(id)a7
{
  BOOL v8 = a6;
  BOOL v9 = a5;
  BOOL v10 = a4;
  id v12 = a3;
  id v13 = a7;
  int v14 = [v12 identifier];
  uint64_t v15 = [v14 length];

  if (!v15) {
    goto LABEL_3;
  }
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  id v17 = [WeakRetained _rootInputWindowController];
  int v18 = [v17 isRotating];

  if (v18) {
    goto LABEL_3;
  }
  BOOL v90 = v9;
  id v19 = +[UIKeyboardInputModeController sharedInputModeController];
  uint64_t v20 = [v19 currentInputMode];
  if ([v20 isEqual:v12] && objc_msgSend(v12, "isDisplayed"))
  {
    BOOL v91 = v10;
    id v21 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    BOOL v22 = [v21 layout];
    if (v22)
    {
      int v23 = !v8;
    }
    else
    {
      id v87 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      int v23 = (([v87 keyboardLayoutIsInAnotherProcess] & 1) != 0
          || [v12 isExtensionInputMode])
         && !v8;
    }
    BOOL v10 = v91;
    if (v23) {
      goto LABEL_3;
    }
  }
  else
  {
  }
  self->_isSettingExtensionInputMode = [v12 isExtensionInputMode];
  self->_needsUpdateAssistantView = 0;
  [(_UIKeyboardStateManager *)self cleanUpBeforeInputModeSwitch];
  self->_isSettingExtensionInputMode = 0;
  id v24 = +[UIKeyboardInputMode dictationInputMode];
  if (v24 != v12)
  {

    goto LABEL_13;
  }
  id v25 = +[UIKeyboardInputMode dictationInputMode];
  int v26 = [v25 isCurrentDictationLanguageOnDevice];

  if (!v26)
  {
LABEL_13:
    if (+[UIDictationController isRunning])
    {
      unint64_t v27 = [(_UIKeyboardStateManager *)self activeDictationLanguage];
      if (v27)
      {
        uint64_t v28 = [v12 dictationLanguage];
        char v29 = [v27 isEqual:v28];

        if ((v29 & 1) == 0)
        {
          [(_UIKeyboardStateManager *)self setSyncingDictationLanguageForInputModeSwitch:1];
          BOOL v30 = +[UIDictationController sharedInstance];
          [v30 setReasonType:16];

          int v31 = +[UIDictationController activeInstance];
          [v31 cancelDictation];

          if (qword_1EB25F7C8 != -1) {
            dispatch_once(&qword_1EB25F7C8, &__block_literal_global_471);
          }
          uint64_t v32 = [(_UIKeyboardStateManager *)self taskQueue];
          v103[0] = MEMORY[0x1E4F143A8];
          v103[1] = 3221225472;
          v103[2] = __102___UIKeyboardStateManager__setKeyboardInputMode_userInitiated_updateIndicator_force_executionContext___block_invoke_3;
          v103[3] = &unk_1E52E34C8;
          v103[4] = self;
          id v33 = (id)[v32 scheduleTask:v103 timeInterval:0 repeats:qword_1EB25F7C0 breadcrumb:0.5];
        }
      }
    }
    id v34 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    int v35 = [v34 _showsScribbleIconsInAssistantView];

    if (v35)
    {
      uint64_t v36 = [v12 languageWithRegion];
      +[UIAssistantBarButtonItemProvider setScribbleLanguageIdentifier:v36];
    }
    int v37 = +[UIKeyboardInputModeController sharedInputModeController];
    [v37 setLastInputModeSwitchTriggeredByASCIIToggle:0];

    self->m_predictionType = 0;
    if ([v12 isEmojiInputMode])
    {
      id v38 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      int v39 = [v38 canPresentEmojiPopover];

      if (v39)
      {
        id v40 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
        char v41 = [v40 isEmojiPopoverPresented];

        if ((v41 & 1) == 0)
        {
          if (+[UIKeyboard usesInputSystemUI])
          {
            block[0] = MEMORY[0x1E4F143A8];
            block[1] = 3221225472;
            block[2] = __102___UIKeyboardStateManager__setKeyboardInputMode_userInitiated_updateIndicator_force_executionContext___block_invoke_4;
            block[3] = &unk_1E52D9F70;
            block[4] = self;
            dispatch_async(MEMORY[0x1E4F14428], block);
          }
          else
          {
            id v88 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
            [v88 presentEmojiPopoverViaTrigger:@"other" completion:0];
          }
        }
        goto LABEL_3;
      }
    }
    char v42 = [MEMORY[0x1E4F28EB8] defaultCenter];
    [v42 postNotificationName:@"UITextInputCurrentInputModeWillChangeNotification" object:0];

    BOOL v43 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    v44 = [v43 forwardingInputDelegate];

    if (!v44)
    {
      uint64_t v45 = [MEMORY[0x1E4F28EB8] defaultCenter];
      [v45 postNotificationName:@"UITextInputWillPersistFindUINotification" object:0];
    }
    id v46 = +[UIKeyboardInputModeController sharedInputModeController];
    id v47 = [v46 currentInputMode];

    int v48 = [v12 identifier];
    UIKeyboardSetCurrentInputMode(v48);

    if (self->_needsUpdateAssistantView) {
      [(_UIKeyboardStateManager *)self updateAssistantView];
    }
    BOOL v92 = v10;
    if ([v12 isExtensionInputMode])
    {
      uint64_t v49 = [v12 primaryLanguage];
      BOOL v50 = [v49 lowercaseString];
      int v51 = [v50 hasPrefix:@"und"];

      if (v51)
      {
        unsigned int v52 = [v12 isDefaultRightToLeft];
        [(_UIKeyboardStateManager *)self updateSmartPunctuationOptionsForLocaleIdentifier:@"en"];
      }
      else
      {
        BOOL v53 = (void *)MEMORY[0x1E4F1CA20];
        BOOL v54 = [v12 primaryLanguage];
        unsigned int v52 = [v53 characterDirectionForLanguage:v54] == 2;

        double v55 = [v12 primaryLanguage];
        [(_UIKeyboardStateManager *)self updateSmartPunctuationOptionsForLocaleIdentifier:v55];
      }
      [(_UIKeyboardStateManager *)self setInputManagerFromCurrentInputMode];
      if (v10)
      {
        v56 = +[UIPeripheralHost sharedInstance];
        [v56 setDocumentInputMode:v47];
      }
    }
    else
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        unsigned int v52 = [v47 isDefaultRightToLeft];
      }
      else
      {
        unsigned int v52 = [v12 isDefaultRightToLeft];
        id v57 = [v12 primaryLanguage];
        [(_UIKeyboardStateManager *)self updateSmartPunctuationOptionsForLocaleIdentifier:v57];

        v58 = +[UIKeyboardInputMode dictationInputMode];
        [v58 setTriggeringTouch:0];

        [(_UIKeyboardStateManager *)self setInputManagerFromCurrentInputMode];
      }
    }
    uint64_t v59 = v52;
    int64_t m_currentDirection = self->m_currentDirection;
    BOOL v89 = m_currentDirection != v52;
    if (m_currentDirection != v52) {
      self->int64_t m_currentDirection = v52;
    }
    if ([v12 isExtensionInputMode])
    {
      id v61 = +[UIKeyboardInputModeController sharedInputModeController];
      objc_super v62 = [v61 currentSystemInputMode];
      uint64_t v63 = [v62 identifier];
      long long v64 = UIKeyboardGetKBStarKeyboard(v63, [(UITextInputTraits *)self->m_traits keyboardType]);

      uint64_t v65 = [v64 subtrees];
      uint64_t v66 = [v65 firstObject];
      self->m_usesAutoShiftFor3PK = [v66 BOOLForProperty:@"autoshift"];

      [(_UIKeyboardStateManager *)self updateShiftState];
      [(_UIKeyboardStateManager *)self setShouldSkipCandidateSelection:0];

LABEL_49:
      self->m_keyboardDelegateStateNeedsRefresh = 1;
      [(_UIKeyboardStateManager *)self postInputViewControllerShouldUpdateNotification:v12];
      if (v12)
      {
        if (+[UIKeyboard isKeyboardProcess])
        {
          id v71 = [v12 identifier];
          char v72 = [v71 isEqualToString:@"autofillsignup"];

          if ((v72 & 1) == 0)
          {
            BOOL v73 = [(_UIKeyboardStateManager *)self inputSystemSourceSession];
            uint64_t v74 = v73;
            if (v73)
            {
              v75 = [v73 textOperations];
              [v75 setCustomInfoType:0x1ED14BC20];
              uint64_t v76 = [v12 identifier];
              [v75 setCustomInfo:v76];

              char v77 = [(_UIKeyboardStateManager *)self buildInputSourceState];
              [v75 setInputSourceState:v77];

              long long v78 = [v12 identifier];
              long long v79 = [v75 inputSourceState];
              [v79 setInputMode:v78];

              [v74 flushOperations];
            }
          }
        }
      }
      if (self->m_updatingPreferences)
      {
        if (self->m_inputManagerState || (UIKeyboardGetSafeDeviceIdiom() & 0xFFFFFFFFFFFFFFFBLL) != 1)
        {
          [(_UIKeyboardStateManager *)self finishSetKeyboardInputMode:v12 previousInputMode:v47 didChangeDirection:m_currentDirection != v59];
          [v13 returnExecutionToParent];
LABEL_64:

          goto LABEL_4;
        }
        v93[0] = MEMORY[0x1E4F143A8];
        v93[1] = 3221225472;
        v93[2] = __102___UIKeyboardStateManager__setKeyboardInputMode_userInitiated_updateIndicator_force_executionContext___block_invoke_6;
        v93[3] = &unk_1E52E35D8;
        v93[4] = self;
        id v94 = v12;
        id v95 = v47;
        BOOL v96 = v89;
        long long v80 = [v13 childWithContinuation:v93];
        [(_UIKeyboardStateManager *)self syncInputManagerToKeyboardStateWithExecutionContext:v80];

        long long v81 = v94;
      }
      else
      {
        if (v92)
        {
          self->m_updatingPreferences = 1;
          v82 = +[UIKeyboardPreferencesController sharedPreferencesController];
          v83 = [v82 preferencesActions];
          uint64_t v84 = [v12 identifier];
          [v83 setLanguageAwareInputModeLastUsed:v84];

          v85 = +[UIKeyboardInputModeController sharedInputModeController];
          [v85 _inputModeChangedWhileContextTracked];

          self->m_updatingPreferences = 0;
        }
        [(_UIKeyboardStateManager *)self setSuppressUpdateAssistantView:1];
        [(_UIKeyboardStateManager *)self setIsCallingTextChangedDuringInputModeSwitch:1];
        v97[0] = MEMORY[0x1E4F143A8];
        v97[1] = 3221225472;
        v97[2] = __102___UIKeyboardStateManager__setKeyboardInputMode_userInitiated_updateIndicator_force_executionContext___block_invoke_5;
        v97[3] = &unk_1E52E35B0;
        v97[4] = self;
        id v98 = v12;
        id v99 = v47;
        BOOL v100 = v89;
        BOOL v101 = v92;
        v86 = [v13 childWithContinuation:v97];
        [(_UIKeyboardStateManager *)self textChanged:self executionContext:v86];

        [(_UIKeyboardStateManager *)self setSuppressUpdateAssistantView:0];
        [(_UIKeyboardStateManager *)self setIsCallingTextChangedDuringInputModeSwitch:0];

        long long v81 = v98;
      }

      goto LABEL_64;
    }
    id v67 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    [v67 setAnimateUpdateBars:0];

    id v68 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    id v69 = [v68 keyInputDelegate];
    if (v69)
    {
    }
    else
    {
      char v70 = [(id)UIApp isFrontBoard];

      if (v70)
      {
LABEL_48:
        self->m_usesAutoShiftFor3PK = 1;
        goto LABEL_49;
      }
    }
    [(_UIKeyboardStateManager *)self reinitializeAfterInputModeSwitch:v90];
    goto LABEL_48;
  }
LABEL_3:
  [v13 returnExecutionToParent];
LABEL_4:
}

- (void)cleanUpBeforeInputModeSwitch
{
  self->_receivedCandidatesInCurrentInputMode = 0;
  BOOL v3 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  id v4 = [v3 keyInputDelegate];

  if (v4)
  {
    if ([(_UIKeyboardStateManager *)self _hasMarkedText]
      || ([(_UIKeyboardStateManager *)self autocorrectionController],
          uint64_t v5 = objc_claimAutoreleasedReturnValue(),
          [v5 autocorrection],
          BOOL v6 = objc_claimAutoreleasedReturnValue(),
          v6,
          v5,
          v6))
    {
      [(_UIKeyboardStateManager *)self setSuppressUpdateAssistantView:1];
      [(_UIKeyboardStateManager *)self acceptAutocorrectionWithCompletionHandler:0];
      BOOL v7 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      [v7 unmarkText];

      [(_UIKeyboardStateManager *)self setSuppressUpdateAssistantView:0];
    }
    self->m_shiftLocked = 0;
    [(_UIKeyboardStateManager *)self _forwardNeededShiftStatesToDestination];
  }
  [(_UIKeyboardStateManager *)self clearInput];
  [(_UIKeyboardStateManager *)self removeAutocorrectPromptAndCandidateList];
  self->m_acceptingCandidate = 0;
}

- (void)reinitializeAfterInputModeSwitch:(BOOL)a3
{
  BOOL v3 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained reinitializeAfterInputModeSwitch:v3];
}

- (BOOL)canPresentPressAndHoldPopover:(id)a3
{
  id v3 = a3;
  id v4 = [v3 _modifiedInput];
  BOOL v5 = ([v4 _isDelete] & 1) == 0
    && +[UIPressAndHoldPopoverController canPresentPressAndHoldPopoverForEvent:v3];

  return v5;
}

- (void)handleAutoFillContactPopoverCommand
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained handleAutoFillContactPopoverCommand];
}

- (void)handleAutoFillCreditCardPopoverCommand
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained handleAutoFillCreditCardPopoverCommand];
}

- (void)handleAutoFillPasswordPopoverCommand
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained handleAutoFillPasswordPopoverCommand];
}

- (void)handleAutoFillContactDetected
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained handleAutoFillContactDetected];
}

- (void)handleAutoFillCreditCardDetected
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained handleAutoFillCreditCardDetected];
}

- (void)handleAutoFillPasswordDetected
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained handleAutoFillPasswordDetected];
}

- (void)_performTextOperationsForAutoFill:(id)a3
{
  id v4 = a3;
  if (+[UIKeyboard inputUIOOP])
  {
    BOOL v5 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    id v15 = [v5 inputSystemSourceSession];

    BOOL v6 = [v15 textOperations];
    BOOL v7 = [v4 textToAssert];
    [v6 setTextToAssert:v7];

    BOOL v8 = [v4 keyboardOutput];
    BOOL v9 = [v8 insertionText];
    BOOL v10 = [v6 keyboardOutput];
    [v10 setInsertionText:v9];

    id v11 = [v4 keyboardOutput];

    id v12 = [v11 customInfo];
    id v13 = [v6 keyboardOutput];
    [v13 setCustomInfo:v12];

    [v15 flushOperations];
  }
  else
  {
    int v14 = [v4 textToAssert];
    -[_UIKeyboardStateManager assertTextForRemoteDocument:withSelectionDelta:updatingSelection:](self, "assertTextForRemoteDocument:withSelectionDelta:updatingSelection:", v14, 0, 0, 0);

    id v15 = [v4 keyboardOutput];

    [(_UIKeyboardStateManager *)self performKeyboardOutput:v15 checkingDelegate:1];
  }
}

- (void)displayAutoFillPopoverIfAutoFillModeDetected
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained displayAutoFillPopoverIfAutoFillModeDetected];
}

- (BOOL)keyboardInputModeIndicatorControllerShouldPresentIndicator:(id)a3
{
  id v4 = a3;
  if (!qword_1EB25F7D0 && qword_1EB25F7D8 != -1) {
    dispatch_once(&qword_1EB25F7D8, &__block_literal_global_487);
  }
  if ([(_UIKeyboardStateManager *)self isInHardwareKeyboardMode])
  {
    BOOL v5 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    BOOL v6 = [v5 textInputDelegate];
    if (v6 && UIKeyboardHasMultipleActiveLinguisticNonExtensionInputModes())
    {
      BOOL v7 = (void *)qword_1EB25F7D0;
      BOOL v8 = UIKeyboardGetCurrentInputMode();
      int v9 = [v7 containsObject:v8] ^ 1;
    }
    else
    {
      LOBYTE(v9) = 0;
    }
  }
  else
  {
    LOBYTE(v9) = 0;
  }

  return v9;
}

- (void)keyboardInputModeIndicatorControllerPresentIndicator:(id)a3 reason:(id)a4
{
  p_presentationDelegate = &self->_presentationDelegate;
  id v5 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)p_presentationDelegate);
  [WeakRetained setInputModeAssertionWithReason:v5];
}

- (void)keyboardInputModeIndicatorControllerDismissIndicator:(id)a3
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained clearInputModeAssertion];

  id v6 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  id v5 = [v6 selectionDisplayInteraction];
  [v5 clearInputModeCursorAssertion];
}

- (void)finishSetKeyboardInputMode:(id)a3 previousInputMode:(id)a4 didChangeDirection:(BOOL)a5
{
  BOOL v5 = a5;
  id v28 = a3;
  id v8 = a4;
  if ([v28 isExtensionInputMode]) {
    [(_UIKeyboardStateManager *)self finishSetExtensionInputMode:v28 didChangeDirection:v5];
  }
  else {
    [(_UIKeyboardStateManager *)self finishSetInputMode:v28 didChangeDirection:v5];
  }
  if ([v28 isDisplayed])
  {
    id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    BOOL v10 = [WeakRetained layout];
    if (v10)
    {

LABEL_8:
      id v12 = +[UIKeyboardSceneDelegate automaticKeyboardArbiterClient];
      id v13 = [v12 inputWindowRootViewController];
      int v14 = [v13 placement];

      if ([v14 showsKeyboard] & 1) != 0 || (objc_msgSend(v14, "isUndocked"))
      {
        int v15 = 0;
      }
      else
      {
        if ([v28 showSWLayoutWithHWKeyboard])
        {
          id v16 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
          [v16 showKeyboard];
          goto LABEL_18;
        }
        int v15 = 1;
      }
      if (!self->m_hardwareKeyboardAttached
        || ((v15 | ![(_UIKeyboardStateManager *)self automaticMinimizationEnabled]) & 1) != 0
        || [(_UIKeyboardStateManager *)self floatingForced]
        || [(_UIKeyboardStateManager *)self showingEmojiSearch])
      {
        goto LABEL_19;
      }
      id v16 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      [v16 hideKeyboard];
LABEL_18:

LABEL_19:
      goto LABEL_20;
    }
    int v11 = [v28 isExtensionInputMode];

    if (v11) {
      goto LABEL_8;
    }
  }
LABEL_20:
  if ([(_UIKeyboardStateManager *)self textInputTraitsNeedAutofill]
    && (UIKeyboardPredictionEnabledForCurrentInputMode() & 1) == 0
    && ![(_UIKeyboardStateManager *)self usesCandidateSelection])
  {
    [(_UIKeyboardStateManager *)self generateAutofillCandidate];
  }
  self->m_didAutomaticallyInsertSpace = self->m_didAutomaticallyInsertSpaceBeforeChangingInputMode;
  if (self->m_hardwareKeyboardAttached)
  {
    id v17 = (void *)UIApp;
    int v18 = +[UIKeyboardInputModeController sharedInputModeController];
    id v19 = [v18 hardwareInputMode];
    uint64_t v20 = [v19 automaticHardwareLayout];
    [v17 setHardwareKeyboardLayoutName:v20];
  }
  id v21 = +[UIPeripheralHost sharedInstance];
  BOOL v22 = [v21 inputViews];
  int v23 = [v22 inputView];
  id v24 = [v23 _rootInputWindowController];
  [v24 updateKeyboardDockViewVisibility];

  [(_UIKeyboardStateManager *)self touchUpdateLastUsedInputModeAction];
  if (![(_UIKeyboardStateManager *)self showingEmojiSearch])
  {
    id v25 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    int v26 = [v25 keyInputDelegate];
    if (v26)
    {
    }
    else
    {
      char v27 = [(id)UIApp isFrontBoard];

      if (v27) {
        goto LABEL_31;
      }
    }
    [(_UIKeyboardStateManager *)self updateInputAssistantButtonItems];
  }
LABEL_31:
  +[_UIKeyboardUsageTracking keyboardSetToInputMode:v28 fromPrevious:v8];
}

- (void)finishSetExtensionInputMode:(id)a3 didChangeDirection:(BOOL)a4
{
  BOOL v4 = a4;
  if ((UIKeyboardGetSafeDeviceIdiom() & 0xFFFFFFFFFFFFFFFBLL) == 1)
  {
    id v6 = +[UIPeripheralHost sharedInstance];
    BOOL v7 = [v6 inputViews];
    [v7 refreshPresentation];
  }
  if (self->m_shouldUpdateCacheOnInputModesChange)
  {
    id v8 = +[UIKeyboardCache sharedInstance];
    id v9 = (id)UIKeyboardActiveInputModes;
    [v8 updateCacheForInputModes:v9];
  }
  if (v4)
  {
    [(_UIKeyboardStateManager *)self setInitialDirection];
  }
}

- (void)finishSetInputMode:(id)a3 didChangeDirection:(BOOL)a4
{
  BOOL v4 = a4;
  id v6 = a3;
  [(_UIKeyboardStateManager *)self updateTextCandidateView];
  self->m_keyboardDelegateStateNeedsRefresh = 1;
  if ((UIKeyboardGetSafeDeviceIdiom() & 0xFFFFFFFFFFFFFFFBLL) == 1)
  {
    BOOL v7 = +[UIPeripheralHost sharedInstance];
    id v8 = [v7 inputViews];
    [v8 refreshPresentation];
  }
  BOOL v9 = [(_UIKeyboardStateManager *)self autocorrectionPreferenceForTraits] != 0;
  [(TIKeyboardState *)self->m_keyboardState setAutocorrectionEnabled:v9];
  [(_UIKeyboardStateManager *)self setAutocorrectSpellingEnabled:v9];
  BOOL v10 = [v6 identifierWithLayouts];
  int v11 = TIStatisticGetKeyForInputMode();
  TIStatisticScalarSetBoolean();

  id v12 = [v6 identifierWithLayouts];

  id v13 = TIStatisticGetKeyForInputMode();
  [(_UIKeyboardStateManager *)self predictionFromPreference];
  TIStatisticScalarSetBoolean();

  if ([(UITextInputTraits *)self->m_traits learnsCorrections]) {
    BOOL m_correctionLearningAllowed = self->m_correctionLearningAllowed;
  }
  else {
    BOOL m_correctionLearningAllowed = 0;
  }
  [(TIKeyboardState *)self->m_keyboardState setWordLearningEnabled:m_correctionLearningAllowed];
  [(TIKeyboardState *)self->m_keyboardState setInlineCompletionEnabled:[(_UIKeyboardStateManager *)self isInlineCompletionEnabled]];
  if (self->m_shouldUpdateCacheOnInputModesChange)
  {
    int v15 = +[UIKeyboardCache sharedInstance];
    id v16 = (id)UIKeyboardActiveInputModes;
    [v15 updateCacheForInputModes:v16];
  }
  if (v4)
  {
    [(_UIKeyboardStateManager *)self setInitialDirection];
  }
}

- (void)setInputModeFromPreferences
{
  id v3 = +[UIKeyboardInputModeController sharedInputModeController];
  BOOL v4 = [v3 currentInputModeInPreference];
  BOOL v5 = v4;
  if (v4 && ([v4 isAllowedForTraits:self->m_traits] & 1) == 0)
  {
    id v6 = [v3 activeInputModes];
    uint64_t v7 = [v3 nextInputModeFromList:v6 withFilter:1 withTraits:self->m_traits];

    BOOL v5 = (void *)v7;
  }
  id v8 = [v3 activeInputModes];
  BOOL v9 = v8;
  if (v5)
  {
    if (([v8 containsObject:v5] & 1) == 0)
    {
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 3221225472;
      void v11[2] = __54___UIKeyboardStateManager_setInputModeFromPreferences__block_invoke;
      v11[3] = &unk_1E52E3600;
      id v12 = v5;
      uint64_t v10 = [v9 indexOfObjectPassingTest:v11];
      if (v10 == 0x7FFFFFFFFFFFFFFFLL)
      {
        BOOL v5 = 0;
      }
      else
      {
        BOOL v5 = [v9 objectAtIndex:v10];
        if (v5) {
          [v3 setCurrentInputModeInPreference:v5];
        }
      }
    }
    if ([(_UIKeyboardStateManager *)self initializationDone]) {
      goto LABEL_14;
    }
    if (v5)
    {
LABEL_17:
      [(_UIKeyboardStateManager *)self prepareKeyboardInputModeFromPreferences:v5];
      goto LABEL_18;
    }
LABEL_16:
    BOOL v5 = +[UIKeyboardInputMode intlInputMode];
    goto LABEL_17;
  }
  if (![(_UIKeyboardStateManager *)self initializationDone]) {
    goto LABEL_16;
  }
  BOOL v5 = 0;
LABEL_14:
  [(_UIKeyboardStateManager *)self setKeyboardInputModeFromPreferences:v5];
LABEL_18:

  [v3 updateCurrentAndNextInputModes];
}

- (void)prepareKeyboardInputModeFromPreferences:(id)a3
{
  id v4 = a3;
  if (!v4)
  {
    BOOL v5 = +[UIKeyboardInputModeController sharedInputModeController];
    id v6 = [v5 activeInputModes];
    id v11 = [v6 firstObject];

    id v4 = v11;
  }
  uint64_t v7 = (void *)MEMORY[0x1E4F1CA20];
  id v12 = v4;
  id v8 = [v4 primaryLanguage];
  int64_t v9 = [v7 characterDirectionForLanguage:v8] == 2;

  self->int64_t m_currentDirection = v9;
  uint64_t v10 = [v12 identifier];
  UIKeyboardSetCurrentInputMode(v10);

  [(_UIKeyboardStateManager *)self setInputManagerFromCurrentInputMode];
}

- (void)setKeyboardInputModeFromPreferences:(id)a3
{
  if (a3)
  {
    -[_UIKeyboardStateManager setKeyboardInputMode:userInitiated:](self, "setKeyboardInputMode:userInitiated:");
  }
  else
  {
    id v6 = +[UIKeyboardInputModeController sharedInputModeController];
    id v4 = [v6 activeInputModes];
    BOOL v5 = [v4 firstObject];
    [(_UIKeyboardStateManager *)self setKeyboardInputMode:v5 userInitiated:1];
  }
}

- (void)updateInputModeIndicatorOnSingleKeyOnly:(BOOL)a3 preserveIfPossible:(BOOL)a4
{
  BOOL v4 = a4;
  BOOL v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained updateInputModeIndicatorOnSingleKeyOnly:v5 preserveIfPossible:v4];
}

- (void)updateInputModeIndicatorOnSingleKeyOnly:(BOOL)a3
{
}

- (void)setInputModeToNextInPreferredListWithExecutionContext:(id)a3
{
  id v4 = a3;
  BOOL v5 = +[UIKeyboardInputModeController sharedInputModeController];
  id v6 = [v5 currentInputMode];

  if (os_variant_has_internal_diagnostics()
    && (+[UIKeyboardInputMode dictationInputMode],
        id v17 = objc_claimAutoreleasedReturnValue(),
        int v18 = [v17 isEqual:v6],
        v17,
        v18))
  {
    id v19 = +[UIKeyboardInputMode dictationInputMode];
    uint64_t v7 = [v19 currentInputModeForDictation];
  }
  else
  {
    uint64_t v7 = 0;
  }
  if ((unint64_t)[(id)UIKeyboardActiveUserSelectableInputModes count] <= 1
    && [(UITextInputTraits *)self->m_traits keyboardType] == 122)
  {
    id v8 = +[UIKeyboardInputMode keyboardInputModeWithIdentifier:@"emoji@sw=Emoji"];
  }
  else
  {
    id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    uint64_t v10 = [WeakRetained layout];
    uint64_t v11 = [v10 keyplaneContainsEmojiKey];

    id v12 = +[UIKeyboardInputModeController sharedInputModeController];
    id v8 = [v12 nextInputModeInPreferenceListForTraits:self->m_traits updatePreference:1 skipEmoji:v11];

    uint64_t v7 = v12;
  }

  id v13 = [v8 identifier];
  int v14 = +[UIKBAnalyticsDispatcher sharedInstance];
  [v14 setUpdatedInputMode:v13];

  uint64_t v20 = MEMORY[0x1E4F143A8];
  uint64_t v21 = 3221225472;
  BOOL v22 = __81___UIKeyboardStateManager_setInputModeToNextInPreferredListWithExecutionContext___block_invoke;
  int v23 = &unk_1E52E3628;
  id v24 = self;
  id v25 = v6;
  id v15 = v6;
  id v16 = [v4 childWithContinuation:&v20];

  -[_UIKeyboardStateManager setKeyboardInputMode:userInitiated:updateIndicator:executionContext:](self, "setKeyboardInputMode:userInitiated:updateIndicator:executionContext:", v8, 1, 1, v16, v20, v21, v22, v23, v24);
}

- (void)finishSetInputModeToNextInPreferredListWithExecutionContext:(id)a3 withPreviousInputMode:(id)a4
{
  id v6 = a4;
  id v8 = a3;
  [(_UIKeyboardStateManager *)self updateInputModeLastChosenPreference];
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained showInternationalKeyIntroductionIfNeededWithPreviousInputMode:v6];

  [v8 returnExecutionToParent];
}

- (void)setInputModeToNextASCIICapableInPreferredList
{
  id v6 = +[UIKeyboardInputModeController sharedInputModeController];
  id v3 = [v6 currentInputMode];
  if (([v3 defaultLayoutIsASCIICapable] & 1) == 0)
  {
    id v4 = [v6 activeInputModes];
    uint64_t v5 = [v6 nextInputModeFromList:v4 withFilter:4 withTraits:0];

    id v3 = (void *)v5;
  }
  if (!v3)
  {
    id v3 = +[UIKeyboardInputMode intlInputMode];
  }
  [(_UIKeyboardStateManager *)self setKeyboardInputMode:v3 userInitiated:0];
}

- (BOOL)isRotating
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  char v3 = [WeakRetained isRotating];

  return v3;
}

- (void)setCorrectionLearningAllowed:(BOOL)a3
{
  BOOL v3 = a3;
  BOOL m_correctionLearningAllowed = self->m_correctionLearningAllowed;
  self->BOOL m_correctionLearningAllowed = a3;
  if (![(UITextInputTraits *)self->m_traits isSecureTextEntry])
  {
    m_traits = self->m_traits;
    if (v3)
    {
      uint64_t v7 = (UITextInputTraits *)[(UITextInputTraits *)m_traits copy];
      [(_UIKeyboardStateManager *)self takeTextInputTraitsFromDelegate];
      [(UITextInputTraits *)v7 setLearnsCorrections:[(UITextInputTraits *)self->m_traits learnsCorrections]];
      id v8 = self->m_traits;
      self->m_traits = v7;
    }
    else
    {
      [(UITextInputTraits *)m_traits setLearnsCorrections:0];
    }
    [(TIKeyboardState *)self->m_keyboardState setWordLearningEnabled:[(UITextInputTraits *)self->m_traits learnsCorrections]];
  }
  if (+[UIKeyboard usesInputSystemUI]
    && self->m_correctionLearningAllowed != m_correctionLearningAllowed)
  {
    id v9 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
    [v9 documentTraitsChanged];
  }
}

- (void)_updateCanSuggestSupplementalItemsForCurrentSelection
{
  if (!+[UIKeyboard isKeyboardProcess])
  {
    self->m_textInputChangesIgnored = 1;
    BOOL v3 = [(_UIKeyboardStateManager *)self inputDelegate];
    if (objc_opt_respondsToSelector())
    {
      id v4 = [(_UIKeyboardStateManager *)self inputDelegate];
      -[_UIKeyboardStateManager setCanSuggestSupplementalItemsForCurrentSelection:](self, "setCanSuggestSupplementalItemsForCurrentSelection:", [v4 _canSuggestSupplementalItemsForCurrentSelection]);
    }
    else
    {
      [(_UIKeyboardStateManager *)self setCanSuggestSupplementalItemsForCurrentSelection:1];
    }

    self->m_textInputChangesIgnored = 0;
    if (![(_UIKeyboardStateManager *)self canSuggestSupplementalItemsForCurrentSelection])
    {
      [(_UIKeyboardStateManager *)self _insertionPointExitedRangeWithSupplementalCandidate];
    }
  }
}

- (BOOL)canSuggestSupplementalItemsForCurrentSelection
{
  return [(TIKeyboardState *)self->m_keyboardState canSuggestSupplementalItemsForCurrentSelection];
}

- (void)setCanSuggestSupplementalItemsForCurrentSelection:(BOOL)a3
{
}

- (void)setLayoutRenderConfig:(id)a3
{
  id v4 = a3;
  id v5 = [(_UIKeyboardStateManager *)self activeLayout];
  [v5 setRenderConfig:v4];
}

- (void)addSupplementalLexicon:(id)a3
{
  id v8 = a3;
  if (!+[UIKeyboard inputUIOOP]
    || +[UIKeyboard isInputSystemUI])
  {
    id v4 = [(_UIKeyboardStateManager *)self backendController];
    [v4 addUISupplementalLexicon:v8];
  }
  if (+[UIKeyboard usesInputSystemUI])
  {
    id v5 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
    int v6 = [v5 inputSystemClientEnabled];

    if (v6)
    {
      uint64_t v7 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
      [v7 didAddSupplementalLexicon:v8];
    }
  }
}

- (void)removeSupplementalLexicon:(id)a3
{
  id v8 = a3;
  if (!+[UIKeyboard inputUIOOP]
    || +[UIKeyboard isInputSystemUI])
  {
    id v4 = [(_UIKeyboardStateManager *)self backendController];
    [v4 removeUISupplementalLexicon:v8];
  }
  if (+[UIKeyboard usesInputSystemUI])
  {
    id v5 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
    int v6 = [v5 inputSystemClientEnabled];

    if (v6)
    {
      uint64_t v7 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
      [v7 didRemoveSupplementalLexicon:v8];
    }
  }
}

- (BOOL)_delegateRequiresKeyEvents
{
  if (self->m_delegateRequiresKeyEvents)
  {
    BOOL v2 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    int v3 = [v2 shouldRespectForwardingInputDelegate] ^ 1;
  }
  else
  {
    LOBYTE(v3) = 0;
  }
  return v3;
}

- (id)_sessionIdentifier
{
  return (id)[(TIKeyboardState *)self->m_keyboardState documentIdentifier];
}

- (id)documentIdentifierForInputDelegate:(id)a3
{
  id v4 = a3;
  id v5 = v4;
  if ((objc_msgSend(v4, "__isKindOfUIResponder") & 1) == 0)
  {
    id v5 = [(_UIKeyboardStateManager *)self delegateAsResponder];
  }
  uint64_t v26 = 0;
  char v27 = &v26;
  uint64_t v28 = 0x2020000000;
  char v29 = 0;
  int v6 = [(_UIKeyboardStateManager *)self autofillController];
  uint64_t v7 = [v6 autofillGroup];
  uint64_t v20 = MEMORY[0x1E4F143A8];
  uint64_t v21 = 3221225472;
  BOOL v22 = __62___UIKeyboardStateManager_documentIdentifierForInputDelegate___block_invoke;
  int v23 = &unk_1E52E3650;
  id v8 = v5;
  id v24 = v8;
  id v25 = &v26;
  [v7 enumerateKeysAndObjectsUsingBlock:&v20];

  if ((objc_opt_respondsToSelector() & 1) == 0
    || (objc_msgSend(v4, "_rtiSourceSession", v20, v21, v22, v23),
        id v9 = objc_claimAutoreleasedReturnValue(),
        [v9 uuid],
        uint64_t v10 = objc_claimAutoreleasedReturnValue(),
        v9,
        !v10))
  {
    if (!*((unsigned char *)v27 + 24)) {
      goto LABEL_22;
    }
    uint64_t v11 = [(_UIKeyboardStateManager *)self autofillController];
    id v12 = [v11 autofillGroup];
    uint64_t v10 = [v12 objectForKey:@"UIAutofillUUIDKey"];

    if (!v10)
    {
LABEL_22:
      if (!+[UIKeyboard usingEndInputSessionCompletion])
      {
        id v15 = v4;
        if (objc_msgSend(v15, "__isKindOfUIResponder"))
        {
          id v16 = [v15 textInputView];
          id v17 = [v16 keyboardSceneDelegate];
          int v18 = [v17 localAuthenticationObserver];

          uint64_t v10 = [v18 sessionIDForInputDelegate:v15];

          if (v10) {
            goto LABEL_15;
          }
        }
        else
        {
        }
        uint64_t v10 = [MEMORY[0x1E4F29128] UUID];
      }
    }
  }
LABEL_15:

  _Block_object_dispose(&v26, 8);
  return v10;
}

- (void)_postInputResponderChangedNotification
{
  v10[1] = *MEMORY[0x1E4F143B8];
  int v3 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  id v4 = [v3 keyInputDelegate];
  if (v4)
  {
    id v9 = @"UITextInputResponderCapabilitiesChangedInputResponderKey";
    id v5 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    int v6 = [v5 keyInputDelegate];
    v10[0] = v6;
    uint64_t v7 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v10 forKeys:&v9 count:1];
  }
  else
  {
    uint64_t v7 = 0;
  }

  id v8 = [MEMORY[0x1E4F28EB8] defaultCenter];
  [v8 postNotificationName:@"UITextInputResponderDidChangeNotification" object:0 userInfo:v7];
}

- (void)_postInputResponderCapabilitiesChangedNotificationWithOutput:(id)a3 selectionChanged:(BOOL)a4
{
  BOOL v4 = a4;
  p_presentationDelegate = &self->_presentationDelegate;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)p_presentationDelegate);
  [WeakRetained _postInputResponderCapabilitiesChangedNotificationWithOutput:v6 selectionChanged:v4];
}

- (void)postInputResponderCapabilitiesChangedNotification
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained postInputResponderCapabilitiesChangedNotification];
}

- (id)delegateAsResponder
{
  BOOL v2 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  int v3 = [v2 delegateAsResponder];

  return v3;
}

- (UIKeyInput)delegate
{
  BOOL v2 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  int v3 = [v2 keyInputDelegate];

  return (UIKeyInput *)v3;
}

- (id)asyncInputDelegate
{
  BOOL v2 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  int v3 = [v2 asyncInputDelegate];

  return v3;
}

- (id)webInputDelegate
{
  BOOL v2 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  int v3 = [v2 webInputDelegate];

  return v3;
}

- (id)asyncCapableInputDelegate
{
  BOOL v2 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  int v3 = [v2 asyncCapableInputDelegate];

  return v3;
}

- (BOOL)hasAdvancedInputDelegate
{
  int v3 = [(_UIKeyboardStateManager *)self inputDelegate];
  if (v3)
  {
    BOOL v4 = 1;
  }
  else
  {
    id v5 = [(_UIKeyboardStateManager *)self asyncInputDelegate];
    BOOL v4 = v5 != 0;
  }
  return v4;
}

- (BOOL)hasAsyncCapableInputDelegate
{
  BOOL v2 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  char v3 = [v2 hasAsyncCapableInputDelegate];

  return v3;
}

- (void)setDelegate:(id)a3
{
  id v4 = a3;
  if ([(_UIKeyboardStateManager *)self initializationDone]) {
    [(_UIKeyboardStateManager *)self setDelegate:v4 force:0];
  }
}

- (void)setDelegate:(id)a3 force:(BOOL)a4
{
}

- (void)setDidTeardownExistingDelegate:(id)a3
{
  id aBlock = a3;
  if (!+[UIKeyboard isKeyboardProcess])
  {
    id v8 = [MEMORY[0x1E4F28B00] currentHandler];
    [v8 handleFailureInMethod:a2 object:self file:@"_UIKeyboardStateManager.m" lineNumber:3057 description:@"didTeardownExistingDelegate callback cannot be set in a non-keyboard process"];
  }
  id v5 = aBlock;
  if (self->_didTeardownExistingDelegate != aBlock)
  {
    id v6 = _Block_copy(aBlock);
    id didTeardownExistingDelegate = self->_didTeardownExistingDelegate;
    self->_id didTeardownExistingDelegate = v6;

    id v5 = aBlock;
  }
}

- (void)setWillSetupNewDelegate:(id)a3
{
  id aBlock = a3;
  if (!+[UIKeyboard isKeyboardProcess])
  {
    id v8 = [MEMORY[0x1E4F28B00] currentHandler];
    [v8 handleFailureInMethod:a2 object:self file:@"_UIKeyboardStateManager.m" lineNumber:3065 description:@"willSetupNewDelegate callback cannot be set in a non-keyboard process"];
  }
  id v5 = aBlock;
  if (self->_willSetupNewDelegate != aBlock)
  {
    id v6 = _Block_copy(aBlock);
    id willSetupNewDelegate = self->_willSetupNewDelegate;
    self->_id willSetupNewDelegate = v6;

    id v5 = aBlock;
  }
}

- (void)_notifyDidTeardownExistingDelegate:(id)a3 newDelegate:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  if (+[UIKeyboard usingEndInputSessionCompletion])
  {
    if (qword_1EB25F7E8 != -1) {
      dispatch_once(&qword_1EB25F7E8, &__block_literal_global_515);
    }
    id v8 = [(_UIKeyboardStateManager *)self taskQueue];
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = __74___UIKeyboardStateManager__notifyDidTeardownExistingDelegate_newDelegate___block_invoke_3;
    v9[3] = &unk_1E52E3678;
    v9[4] = self;
    id v10 = v7;
    id v11 = v6;
    [v8 performSingleTask:v9 breadcrumb:qword_1EB25F7E0];
  }
}

- (void)_notifyWillSetupNewDelegate:(id)a3 existingDelegate:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  if (+[UIKeyboard usingEndInputSessionCompletion])
  {
    if (qword_1EB25F7F8 != -1) {
      dispatch_once(&qword_1EB25F7F8, &__block_literal_global_519);
    }
    id v8 = [(_UIKeyboardStateManager *)self taskQueue];
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = __72___UIKeyboardStateManager__notifyWillSetupNewDelegate_existingDelegate___block_invoke_3;
    v9[3] = &unk_1E52E3678;
    v9[4] = self;
    id v10 = v6;
    id v11 = v7;
    [v8 performSingleTask:v9 breadcrumb:qword_1EB25F7F0];
  }
}

- (void)setCurrentCandidateRequest:(id)a3
{
  id v4 = (TICandidateRequestToken *)a3;
  if (v4 && self->m_cachedAutofillMode)
  {
    id v5 = [(_UIKeyboardStateManager *)self delegateForCandidateRequest];

    if (!v5)
    {
      id v6 = [MEMORY[0x1E4F1CA60] dictionary];
      [(_UIKeyboardStateManager *)self setDelegateForCandidateRequest:v6];
    }
    id v7 = (void *)MEMORY[0x1E4F29238];
    id v8 = [(_UIKeyboardStateManager *)self delegate];
    id v9 = [v7 valueWithPointer:v8];
    id v10 = [(_UIKeyboardStateManager *)self delegateForCandidateRequest];
    [v10 setObject:v9 forKeyedSubscript:v4];
  }
  currentCandidateRequest = self->_currentCandidateRequest;
  self->_currentCandidateRequest = v4;
}

- (void)_teardownExistingDelegate:(id)a3 forSetDelegate:(id)a4 force:(BOOL)a5 delayEndInputSession:(BOOL)a6
{
  BOOL v6 = a6;
  BOOL v7 = a5;
  uint64_t v111 = *MEMORY[0x1E4F143B8];
  id v10 = a3;
  id v11 = a4;
  id v12 = _UIKeyboardInputSessionChangeLog();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    id v13 = _delegateShortDescr(v10);
    uint64_t v14 = _delegateShortDescr(v11);
    id v15 = (void *)v14;
    id v16 = "NO";
    __int16 v105 = 2112;
    *(_DWORD *)buf = 138413058;
    if (v7) {
      id v17 = "YES";
    }
    else {
      id v17 = "NO";
    }
    v104 = v13;
    uint64_t v106 = v14;
    if (v6) {
      id v16 = "YES";
    }
    __int16 v107 = 2080;
    v108 = v17;
    __int16 v109 = 2080;
    v110 = v16;
    _os_log_impl(&dword_1853B0000, v12, OS_LOG_TYPE_DEFAULT, "-_teardownExistingDelegate:%@ forSetDelegate:%@ force:%s delayEndInputSession:%s", buf, 0x2Au);
  }
  if (![(_UIKeyboardStateManager *)self forCustomInputView]
    && ![(_UIKeyboardStateManager *)self suppressUpdateLayout])
  {
    if (v10) {
      BOOL v18 = v6;
    }
    else {
      BOOL v18 = 0;
    }
    +[UIDictationController keyboardWillChangeFromDelegate:v10 toDelegate:v11 shouldPause:v18];
  }
  id v19 = +[UIDictationController activeInstance];
  [v19 setResigningFirstResponder:0];

  p_presentationDelegate = &self->_presentationDelegate;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  BOOL v22 = [WeakRetained layout];
  char v23 = objc_opt_respondsToSelector();

  if (v23)
  {
    id v24 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    id v25 = [v24 layout];
    [v25 dismissGestureKeyboardIntroduction];
  }
  if (!v11)
  {
    id v26 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    [v26 dismissContinuousPathIntroductionView];

    [(_UIKeyboardStateManager *)self dismissAutoFillMenu];
    char v27 = [(_UIKeyboardStateManager *)self delegateForCandidateRequest];
    [v27 removeAllObjects];

    uint64_t v28 = +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate];
    char v29 = [v28 preservingInputViews];

    if ((v29 & 1) == 0) {
      self->m_everPresentedPasswordAutofillPanel = 0;
    }
  }
  BOOL v30 = +[UIPeripheralHost sharedInstance];
  int v31 = [v30 inputViews];
  uint64_t v32 = [v31 inputViewController];

  id v33 = [v32 _compatibilityController];
  [v33 keyboardWillChangeFromDelegate:v10 toDelegate:v11];
  if (v10)
  {
    [(_UIKeyboardStateManager *)self clearForwardingInputDelegateAndResign:1];
    if (v11 != v10)
    {
      [(_UIKeyboardStateManager *)self _insertionPointExitedRangeWithSupplementalCandidate];
      id v34 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      [v34 setCaretBlinks:0];

      id v35 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      [v35 setCaretVisible:0];

      id v36 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      [v36 clearCursorAccessory];

      id v37 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      [v37 dismissEmojiPopoverIfNecessaryWithCompletion:0];

      id v38 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      [v38 dismissPressAndHoldPopover];

      id v39 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      [v39 dismissInputModeIndicator];

      id v40 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      [v40 dismissDictationMenu];

      id v41 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      [v41 dismissDictationTip];

      id v42 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      [v42 dismissAutoFillPopover];

      id v43 = v10;
      if (objc_msgSend(v43, "__isKindOfUIResponder"))
      {
        v44 = [v43 textInputView];
        [v44 keyboardSceneDelegate];
        id v45 = v10;
        id v46 = v11;
        BOOL v47 = v6;
        int v48 = v33;
        v50 = uint64_t v49 = v32;
        int v51 = [v50 localAuthenticationObserver];

        uint64_t v32 = v49;
        id v33 = v48;
        BOOL v6 = v47;
        id v11 = v46;
        id v10 = v45;
        p_presentationDelegate = &self->_presentationDelegate;

        unsigned int v52 = [(TIKeyboardState *)self->m_keyboardState documentIdentifier];
        [v51 inputDelegateWillTeardown:v43 sessionUUID:v52];
      }
      BOOL v53 = +[UIDictationController sharedInstance];
      BOOL v54 = [v53 dictationTipController];
      [v54 resetShowModelessTipSignal];

      id v55 = objc_loadWeakRetained((id *)p_presentationDelegate);
      [v55 unsetEmojiPopoverToRestoreAfterRotation];
    }
  }
  v56 = +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate];
  char v57 = [v56 _keepInputSession];

  if (!+[UIKeyboard usingEndInputSessionCompletion])
  {
    char v58 = self->_remoteTextInputPartner ? v57 : 1;
    if ((v58 & 1) == 0)
    {
      v102[0] = MEMORY[0x1E4F143A8];
      v102[1] = 3221225472;
      v102[2] = __95___UIKeyboardStateManager__teardownExistingDelegate_forSetDelegate_force_delayEndInputSession___block_invoke;
      v102[3] = &unk_1E52E36A0;
      v102[4] = self;
      uint64_t v59 = (void (**)(id, void *, BOOL))_Block_copy(v102);
      if (v10)
      {
        if (v11 || !v6)
        {
          char v70 = [(TIKeyboardState *)self->m_keyboardState documentIdentifier];
          v59[2](v59, v70, v11 == 0);
        }
        else
        {
          long long v64 = [(TIKeyboardState *)self->m_keyboardState documentIdentifier];
          [(_UIKeyboardStateManager *)self setResigningRTISessionIdentifier:v64];

          dispatch_time_t v65 = dispatch_time(0, 35000000);
          block[0] = MEMORY[0x1E4F143A8];
          block[1] = 3221225472;
          block[2] = __95___UIKeyboardStateManager__teardownExistingDelegate_forSetDelegate_force_delayEndInputSession___block_invoke_2;
          block[3] = &unk_1E52DA160;
          block[4] = self;
          uint64_t v59 = v59;
          BOOL v101 = v59;
          dispatch_after(v65, MEMORY[0x1E4F14428], block);
        }
      }
      else
      {
        id v68 = [(_UIKeyboardStateManager *)self resigningRTISessionIdentifier];

        if (v68)
        {
          id v69 = [(_UIKeyboardStateManager *)self resigningRTISessionIdentifier];
          v59[2](v59, v69, v11 == 0);

          [(_UIKeyboardStateManager *)self setResigningRTISessionIdentifier:0];
        }
      }
      goto LABEL_52;
    }
  }
  if (+[UIKeyboard usingEndInputSessionCompletion]
    && self->m_wasDelegateSetupWithRTIClient)
  {
    id v98 = v32;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __95___UIKeyboardStateManager__teardownExistingDelegate_forSetDelegate_force_delayEndInputSession___block_invoke_3;
    aBlock[3] = &unk_1E52E36A0;
    aBlock[4] = self;
    uint64_t v59 = (void (**)(id, void *, BOOL))_Block_copy(aBlock);
    int v60 = 0;
    if (v10 && !v11)
    {
      id v61 = +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate];
      int v60 = [v61 _keepInputSession];
    }
    objc_super v62 = [(TIKeyboardState *)self->m_keyboardState documentIdentifier];
    if (!v10 || (v60 & 1) != 0)
    {
      if (v60)
      {
        uint64_t v66 = _UIKeyboardInputSessionChangeLog();
        if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
        {
          id v67 = _delegateShortDescr(v10);
          *(_DWORD *)buf = 138412546;
          v104 = v67;
          __int16 v105 = 2112;
          uint64_t v106 = (uint64_t)v62;
          _os_log_impl(&dword_1853B0000, v66, OS_LOG_TYPE_DEFAULT, "Skipping end input session for existingDelegate: %@ (sessionID=%@)", buf, 0x16u);
        }
        [(_UIKeyboardStateManager *)self setSkippedEndInputSession:v10];
        [(_UIKeyboardStateManager *)self setSkippedEndInputSessionID:v62];
      }
    }
    else
    {
      if (v11) {
        BOOL v63 = 0;
      }
      else {
        BOOL v63 = !v6;
      }
      v59[2](v59, v62, v63);
    }

    uint64_t v32 = v98;
LABEL_52:
  }
  id v71 = [(_UIKeyboardStateManager *)self inputSystemSourceSession];

  if (v71)
  {
    char v72 = [(_UIKeyboardStateManager *)self inputSystemSourceSession];
    [v72 setSessionDelegate:0];
  }
  if (v11 != v10)
  {
    if (v11)
    {
      id v73 = [(_UIKeyboardStateManager *)self documentIdentifierForInputDelegate:v11];
      [(TIKeyboardState *)self->m_keyboardState setDocumentIdentifier:v73];
    }
    else
    {
      [(TIKeyboardState *)self->m_keyboardState setDocumentIdentifier:0];
      if (![(UITextInputTraits *)self->m_traits isDevicePasscodeEntry]) {
        goto LABEL_61;
      }
      id v73 = objc_alloc_init(MEMORY[0x1E4FAE2A8]);
      [(TIKeyboardState *)self->m_keyboardState setDocumentState:v73];
    }

LABEL_61:
    uint64_t v74 = [(_UIKeyboardStateManager *)self delegateAsResponder];
    char v75 = [v74 _isWritingToolsActive];

    if ((v75 & 1) == 0)
    {
      uint64_t v76 = [(_UIKeyboardStateManager *)self _textChoicesAssistant];
      [v76 clearSecureCandidateHashes];
    }
  }
  char v77 = [(_UIKeyboardStateManager *)self taskQueue];
  int v78 = [v77 isMainThreadExecutingTask];
  if (v10 && !v78)
  {
    long long v79 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    long long v80 = [v79 asyncCapableInputDelegate];

    if (v80) {
      goto LABEL_68;
    }
    char v77 = [(_UIKeyboardStateManager *)self taskQueue];
    [v77 waitUntilAllTasksAreFinished];
  }

LABEL_68:
  long long v81 = +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate];
  char v82 = [v81 _hasPostPinningReloadState];

  if ((v82 & 1) == 0)
  {
    id v83 = objc_loadWeakRetained((id *)p_presentationDelegate);
    uint64_t v84 = [v83 layout];
    [v84 acceptRecentInputIfNecessary];

    if ([(_UIKeyboardStateManager *)self changeCount])
    {
      [(_UIKeyboardStateManager *)self acceptAutocorrectionWithCompletionHandler:0];
      self->m_textInputChangesIgnored = 1;
      v85 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      [v85 unmarkText];

      self->m_textInputChangesIgnored = 0;
    }
    if (v11 != v10)
    {
      [(_UIKeyboardStateManager *)self setCurrentCandidateRequest:0];
      [(_UIKeyboardStateManager *)self _cancelPendingSupplementalCandidateInsertion];
      if (self->m_shouldClearTextSuggestions) {
        [(_UIKeyboardStateManager *)self setSuggestions:0];
      }
      v86 = [(_UIKeyboardStateManager *)self autocorrectionController];
      [v86 setAutocorrectionList:0];

      [(_UIKeyboardStateManager *)self clearChangeTimeAndCount];
      [(_UIKeyboardStateManager *)self removeAutocorrectPromptAndCandidateList];
    }
  }
  id v87 = [(_UIKeyboardStateManager *)self inputDelegate];
  id v88 = [v87 inputDelegate];

  if (v88 == self)
  {
    BOOL v89 = [(_UIKeyboardStateManager *)self inputDelegate];
    [v89 setInputDelegate:0];
  }
  BOOL v90 = [(_UIKeyboardStateManager *)self asyncInputDelegate];

  if (v90)
  {
    BOOL v91 = [(_UIKeyboardStateManager *)self asyncInputDelegate];
    BOOL v92 = [v91 asyncSystemInputDelegate];

    if (v92 == self)
    {
      v93 = [(_UIKeyboardStateManager *)self asyncInputDelegate];
      [v93 setAsyncSystemInputDelegate:0];
    }
  }
  id v94 = [(_UIKeyboardStateManager *)self webInputDelegate];

  if (v94)
  {
    id v95 = [(_UIKeyboardStateManager *)self webInputDelegate];
    BOOL v96 = [v95 asyncInputDelegate];

    if (v96 == self)
    {
      v97 = [(_UIKeyboardStateManager *)self webInputDelegate];
      [v97 setAsyncInputDelegate:0];
    }
  }
}

- (void)_setDelegate:(id)a3 existingDelegate:(id)a4 force:(BOOL)a5 delayEndInputSession:(BOOL)a6
{
  BOOL v6 = a6;
  BOOL v7 = a5;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v10 = a3;
  id v11 = a4;
  id v12 = _UIKeyboardInputSessionChangeLog();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    id v15 = _delegateShortDescr(v10);
    uint64_t v16 = _delegateShortDescr(v11);
    id v17 = (void *)v16;
    BOOL v18 = "NO";
    *(_WORD *)&v20[12] = 2112;
    *(_DWORD *)uint64_t v20 = 138413058;
    if (v7) {
      id v19 = "YES";
    }
    else {
      id v19 = "NO";
    }
    *(void *)&v20[4] = v15;
    *(void *)&v20[14] = v16;
    *(_WORD *)&v20[22] = 2080;
    if (v6) {
      BOOL v18 = "YES";
    }
    uint64_t v21 = v19;
    __int16 v22 = 2080;
    char v23 = v18;
    _os_log_debug_impl(&dword_1853B0000, v12, OS_LOG_TYPE_DEBUG, "-_setDelegate:%@ existingDelegate:%@ force:%s delayEndInputSession:%s", v20, 0x2Au);
  }
  self->m_editingTraitsMarkedDirty = 1;
  id v13 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  [v13 setDelegate:v10];

  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained updateDictationButtonForDelegate:v10];

  if (![(_UIKeyboardStateManager *)self forCustomInputView]) {
    [(_UIKeyboardStateManager *)self _postInputResponderChangedNotification];
  }
  [(_UIKeyboardStateManager *)self responseContextDidChange];
}

- (void)_setupDelegate:(id)a3 delegateSame:(BOOL)a4 hardwareKeyboardStateChanged:(BOOL)a5 endingInputSessionIdentifier:(id)a6 force:(BOOL)a7 delayEndInputSession:(BOOL)a8
{
  BOOL v8 = a8;
  BOOL v181 = a7;
  BOOL v10 = a5;
  BOOL v11 = a4;
  uint64_t v199 = *MEMORY[0x1E4F143B8];
  id v13 = a3;
  id v14 = a6;
  id v15 = _UIKeyboardInputSessionChangeLog();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    _delegateShortDescr(v13);
    id v99 = (id)objc_claimAutoreleasedReturnValue();
    BOOL v100 = "NO";
    *(_DWORD *)buf = 138413570;
    id v188 = v99;
    if (v11) {
      BOOL v101 = "YES";
    }
    else {
      BOOL v101 = "NO";
    }
    __int16 v189 = 2080;
    v190 = v101;
    if (v10) {
      v102 = "YES";
    }
    else {
      v102 = "NO";
    }
    __int16 v191 = 2080;
    if (v181) {
      v103 = "YES";
    }
    else {
      v103 = "NO";
    }
    v192 = v102;
    __int16 v193 = 2112;
    if (v8) {
      BOOL v100 = "YES";
    }
    id v194 = v14;
    __int16 v195 = 2080;
    v196 = v103;
    __int16 v197 = 2080;
    v198 = v100;
    _os_log_debug_impl(&dword_1853B0000, v15, OS_LOG_TYPE_DEBUG, "-_setupDelegate:%@ delegateSame:%s hardwareKeyboardStateChanged:%s endingInputSessionIdentifier:%@ force:%s delayEndInputSession:%s", buf, 0x3Eu);
  }
  uint64_t v16 = [(_UIKeyboardStateManager *)self inputDelegate];

  if (v16)
  {
    id v17 = [(_UIKeyboardStateManager *)self inputDelegate];
    BOOL v18 = [v17 inputDelegate];

    if (!v18)
    {
      id v19 = [(_UIKeyboardStateManager *)self inputDelegate];
      [v19 setInputDelegate:self];
    }
  }
  uint64_t v20 = [(_UIKeyboardStateManager *)self asyncInputDelegate];

  if (v20)
  {
    uint64_t v21 = [(_UIKeyboardStateManager *)self asyncInputDelegate];
    __int16 v22 = [v21 asyncSystemInputDelegate];

    if (!v22)
    {
      char v23 = [(_UIKeyboardStateManager *)self asyncInputDelegate];
      [v23 setAsyncSystemInputDelegate:self];
    }
  }
  uint64_t v24 = [(_UIKeyboardStateManager *)self webInputDelegate];

  if (v24)
  {
    id v25 = [(_UIKeyboardStateManager *)self webInputDelegate];
    id v26 = [v25 asyncInputDelegate];

    if (!v26)
    {
      char v27 = [(_UIKeyboardStateManager *)self webInputDelegate];
      [v27 setAsyncInputDelegate:self];
    }
  }
  self->m_textInputChangingCount = 0;
  self->m_textInputChangingDirection = 0;
  *(_WORD *)&self->m_textInputChangesIgnored = 0;
  self->m_wasDelegateSetupWithRTIClient = [(_UIKeyboardStateManager *)self isRTIClient];
  [(_UIKeyboardStateManager *)self setMarkedTextFromClient:0];
  [(_UIKeyboardStateManager *)self deactivateLayout];
  [(_UIKeyboardStateManager *)self stopAutoDelete];
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  char v29 = [WeakRetained layout];

  if (v29) {
    [(_UIKeyboardStateManager *)self clearShiftState];
  }
  BOOL v30 = [(_UIKeyboardStateManager *)self changedDelegate];

  if (v30) {
    [(_UIKeyboardStateManager *)self callChangedDelegate];
  }
  [(_UIKeyboardStateManager *)self setChangedDelegate:0];
  [(_UIKeyboardStateManager *)self clearTransientState];
  *(_WORD *)&self->m_needsPasteSupportUpdate = 1;
  [(_UIKeyboardStateManager *)self setArrowKeyHistory:0];
  int64_t v31 = [(UITextInputTraits *)self->m_traits keyboardType];
  remoteTextInputTraits = self->_remoteTextInputTraits;
  self->_remoteTextInputTraits = 0;

  BOOL v33 = [(_UIKeyboardStateManager *)self floatingForced];
  [(_UIKeyboardStateManager *)self takeTextInputTraitsFromDelegate];
  id v182 = v14;
  if (v33) {
    int v34 = ![(_UIKeyboardStateManager *)self floatingForced];
  }
  else {
    int v34 = 0;
  }
  id v35 = [(_UIKeyboardStateManager *)self inputSystemSourceSession];

  if (v35)
  {
    id v36 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
    BOOL v37 = [(_UIKeyboardStateManager *)self floatingForced];
    id v38 = [(_UIKeyboardStateManager *)self inputSystemSourceSession];
    [v38 setSessionDelegate:v36];
    [v36 applyRemoteDocumentTraitsIfNecessary:v38 force:0];
    [v36 applyRemoteDocumentStateIfNecessary:v38 force:0];
    int v34 = 0;
    if (v37) {
      int v34 = ![(_UIKeyboardStateManager *)self floatingForced];
    }
  }
  id v39 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  uint64_t v40 = [v39 delegateRespectingForwardingDelegate:0];
  if (v40)
  {
    id v41 = (void *)v40;
    BOOL v42 = [(_UIKeyboardStateManager *)self forCustomInputView];

    if (!v42) {
      [(_UIKeyboardStateManager *)self setReturnKeyEnabled:1];
    }
  }
  else
  {
  }
  self->m_autocapitalizationPreference = [(_UIKeyboardStateManager *)self autocapitalizationPreference];
  [(_UIKeyboardStateManager *)self updateInputManagerAutocapitalizationType];
  BOOL v43 = [(_UIKeyboardStateManager *)self autocorrectionPreferenceForTraits] != 0;
  [(TIKeyboardState *)self->m_keyboardState setAutocorrectionEnabled:v43];
  [(_UIKeyboardStateManager *)self setAutocorrectSpellingEnabled:v43];
  [(TIKeyboardState *)self->m_keyboardState setInlineCompletionEnabled:[(_UIKeyboardStateManager *)self isInlineCompletionEnabled]];
  v44 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  id v45 = [v44 delegateRespectingForwardingDelegate:0];
  if (v45)
  {

LABEL_28:
    goto LABEL_30;
  }
  m_defaultTraits = self->m_defaultTraits;

  if (!m_defaultTraits)
  {
    [(UITextInputTraits *)self->m_traits setKeyboardType:v31];
    uint64_t v73 = [MEMORY[0x1E4FAE450] translateToTextInputKeyboardType:v31];
    v44 = [(TIKeyboardState *)self->m_keyboardState textInputTraits];
    [v44 setKeyboardType:v73];
    goto LABEL_28;
  }
LABEL_30:
  if (!v11)
  {
    BOOL v47 = +[UIKeyboardInputModeController sharedInputModeController];
    int v48 = [v47 currentInputMode];
    uint64_t v49 = [v48 primaryLanguage];
    [(_UIKeyboardStateManager *)self updateSmartPunctuationOptionsForLocaleIdentifier:v49];

    [(TISmartPunctuationController *)self->m_smartPunctuationController reset];
  }
  if (v13)
  {
    if (!+[UIKeyboard isKeyboardProcess])
    {
      BOOL v50 = +[_UIRemoteKeyboards sharedRemoteKeyboards];
      char v51 = [v50 snapshotting];

      if ((v51 & 1) == 0)
      {
        unsigned int v52 = [(_UIKeyboardStateManager *)self inputDelegate];
        int64_t v53 = [(_UIKeyboardStateManager *)self needAutofillCandidate:v52];
        BOOL v54 = [(_UIKeyboardStateManager *)self autofillController];
        [v54 setDelegateNeedsAutofillMode:v53];

        [(TIKeyboardState *)self->m_keyboardState setAutofillMode:[(_UIKeyboardStateManager *)self needAutofill]];
        self->uint64_t m_cachedAutofillMode = [(TIKeyboardState *)self->m_keyboardState autofillMode];
        [(_UIKeyboardStateManager *)self displayAutoFillPopoverIfAutoFillModeDetected];
      }
    }
  }
  uint64_t v55 = [(UITextInputTraits *)self->m_traits isSecureTextEntry] ^ 1;
  v183 = +[UIKeyboardInputModeController sharedInputModeController];
  v56 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  char v57 = [v56 keyInputDelegate];
  if (!v57 || [(_UIKeyboardStateManager *)self forCustomInputView])
  {

    goto LABEL_39;
  }
  id v68 = [v183 inputModeContextIdentifier];

  if (v68)
  {
    id v69 = [(_UIKeyboardStateManager *)self desirableInputModesWithExtensions:v55];
    char v70 = [v183 currentInputMode];
    if ([v69 containsObject:v70])
    {
      BOOL restoresToEmojiInputMode = self->_restoresToEmojiInputMode;

      if (!restoresToEmojiInputMode)
      {
        char v72 = [v183 identifiersFromInputModes:v69];
        UIKeyboardSetActiveInputModes(v72);

LABEL_57:
        goto LABEL_62;
      }
    }
    else
    {
    }
    [(_UIKeyboardStateManager *)self recomputeActiveInputModesWithExtensions:[(UITextInputTraits *)self->m_traits isSecureTextEntry] ^ 1];
    goto LABEL_57;
  }
LABEL_39:
  if (!v11)
  {
    char v58 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    uint64_t v59 = [v58 delegateRespectingForwardingDelegate:0];
    if (v59)
    {
      int v60 = (void *)v59;
      BOOL v61 = [(_UIKeyboardStateManager *)self forCustomInputView];

      if (!v61)
      {
        objc_super v62 = [v183 currentInputMode];
        int v63 = [v62 isEmojiInputMode];

        if (v63 && ![(UITextInputTraits *)self->m_traits acceptsInitialEmojiKeyboard])
        {
          long long v64 = [v183 currentInputModeInPreference];
          dispatch_time_t v65 = [(_UIKeyboardStateManager *)self desirableInputModesWithExtensions:v55];
          if ([v65 containsObject:v64]) {
            [(_UIKeyboardStateManager *)self setKeyboardInputMode:v64 userInitiated:0];
          }
        }
        BOOL v66 = [(_UIKeyboardStateManager *)self suppressUpdateLayout];
        if ((UIKeyboardGetSafeDeviceIdiom() & 0xFFFFFFFFFFFFFFFBLL) == 1) {
          int HasMultipleActiveLinguisticNonExtensionInputModes = UIKeyboardHasMultipleActiveLinguisticNonExtensionInputModes();
        }
        else {
          int HasMultipleActiveLinguisticNonExtensionInputModes = 0;
        }
        [(_UIKeyboardStateManager *)self setSuppressUpdateLayout:1];
        [(_UIKeyboardStateManager *)self recomputeActiveInputModesWithExtensions:[(UITextInputTraits *)self->m_traits isSecureTextEntry] ^ 1 allowNonLinguisticInputModes:[(UITextInputTraits *)self->m_traits acceptsInitialEmojiKeyboard]];
        [(_UIKeyboardStateManager *)self setSuppressUpdateLayout:v66];
        if ((UIKeyboardGetSafeDeviceIdiom() & 0xFFFFFFFFFFFFFFFBLL) == 1
          && HasMultipleActiveLinguisticNonExtensionInputModes != UIKeyboardHasMultipleActiveLinguisticNonExtensionInputModes())
        {
          [(_UIKeyboardStateManager *)self updateInputAssistantButtonItems];
        }
      }
    }
    else
    {
    }
  }
LABEL_62:
  id v74 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  char v75 = [v74 layout];
  [v75 setIgnoringKeyplaneChange:1];

  [(_UIKeyboardStateManager *)self updateShiftState];
  id v76 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  char v77 = [v76 layout];
  [v77 setIgnoringKeyplaneChange:0];

  self->m_predictionType = 0;
  if (v34)
  {
    id v78 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    char v79 = [(id)objc_opt_class() isFloating];

    if ((v79 & 1) == 0)
    {
      char v82 = +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate];
      [v82 reloadPlacement];
      goto LABEL_72;
    }
  }
  if ([(_UIKeyboardStateManager *)self isMinimized])
  {
    id v80 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    int v81 = [v80 _shouldSuppressSoftwareKeyboard];

    if (v81)
    {
      char v82 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      [v82 setUpdateLayoutOnShowKeyboard:1];
LABEL_72:
      BOOL v87 = 0;
      id v88 = v182;
LABEL_73:

      goto LABEL_74;
    }
  }
  char v82 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  id v83 = [v82 delegateRespectingForwardingDelegate:0];
  if (!v83 && !v181) {
    goto LABEL_72;
  }
  uint64_t v84 = +[UIKeyboardInputModeController sharedInputModeController];
  v85 = [v84 currentInputMode];
  char v86 = [v85 isExtensionInputMode];

  if (v86)
  {
    BOOL v87 = 0;
    id v88 = v182;
LABEL_74:
    BOOL v89 = &off_1E52D3000;
    goto LABEL_75;
  }
  BOOL v87 = 1;
  id v88 = v182;
  BOOL v89 = &off_1E52D3000;
  if (self->m_traitsForPreviousDelegate && !v181)
  {
    char v82 = [(_UIKeyboardStateManager *)self textInputTraits];
    BOOL v87 = [v82 updateResultComparedToTraits:self->m_traitsForPreviousDelegate] == 2;
    goto LABEL_73;
  }
LABEL_75:
  if ([(_UIKeyboardStateManager *)self forCustomInputView] || !v87 || v10)
  {
    [(_UIKeyboardStateManager *)self updateShiftState];
  }
  else
  {
    id v90 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    [v90 updateLayout];

    if (self->m_hardwareKeyboardAttached) {
      [(_UIKeyboardStateManager *)self callLayoutUpdateAllLocalizedKeys];
    }
    else {
      [(_UIKeyboardStateManager *)self callLayoutUpdateLocalizedKeys];
    }
  }
  BOOL v91 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  uint64_t v92 = [v91 delegateRespectingForwardingDelegate:0];
  if (v92)
  {
    v93 = (void *)v92;
LABEL_88:

    goto LABEL_89;
  }
  if (![(TIKeyboardState *)self->m_keyboardState hardwareKeyboardMode]
    || ![(_UIKeyboardStateManager *)self automaticMinimizationEnabled]
    || [(_UIKeyboardStateManager *)self isMinimized])
  {
    v93 = 0;
    goto LABEL_88;
  }
  v175 = UIKeyboardGetCurrentInputMode();
  v176 = TIInputModeGetNormalizedIdentifier();
  int v177 = [@"emoji" isEqualToString:v176];

  if (v177)
  {
    BOOL v91 = +[UIKeyboardInputModeController sharedInputModeController];
    v93 = [v91 nextInputModeInPreferenceListForTraits:self->m_traits];
    [(_UIKeyboardStateManager *)self setKeyboardInputMode:v93 userInitiated:0];
    goto LABEL_88;
  }
LABEL_89:
  self->m_delegateRequiresKeyEvents = ((unsigned __int16)[(_UIKeyboardStateManager *)self delegateConformanceType] >> 8) & 1;
  [(_UIKeyboardStateManager *)self _updateDelegateRequiresKeyEventsFromRemoteTextInput];
  id v94 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [v94 _updateExternalDeviceInputSetting];

  if (!v11)
  {
    id v95 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    BOOL v96 = [v95 delegateRespectingForwardingDelegate:0];
    v97 = v96;
    if (v96 && self->m_hardwareKeyboardAttached)
    {
      int v98 = [(TIKeyboardState *)self->m_keyboardState hardwareKeyboardMode];

      if (v98)
      {
        if ([(_UIKeyboardStateManager *)self isCapsLockASCIIToggle]) {
          [(_UIKeyboardStateManager *)self removeCapsLockDelayOverride];
        }
        else {
          [(_UIKeyboardStateManager *)self adjustCapsLockDelayOverride];
        }
        [(_UIKeyboardStateManager *)self setCapsLockIfNeeded];
      }
    }
    else
    {
    }
  }
  v104 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  __int16 v105 = [v104 delegateRespectingForwardingDelegate:0];

  if (!v105)
  {
    uint64_t v106 = UIKeyboardGetCurrentInputMode();
    id v107 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    int v108 = [(id)objc_opt_class() isSplit];

    if (v108)
    {
      __int16 v109 = TIStatisticGetKeyForInputMode();
      TIStatisticScalarSetBoolean();

      v110 = TIStatisticGetKeyForInputMode();
      id v111 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      [(id)objc_opt_class() persistentOffset];
      TIStatisticDistributionPushValue();
    }
    else
    {
      v112 = +[UIPeripheralHost sharedInstance];
      int v113 = [v112 isUndocked];

      if (!v113)
      {
LABEL_119:

        goto LABEL_120;
      }
      v110 = TIStatisticGetKeyForInputMode();
      TIStatisticScalarSetBoolean();
    }

    goto LABEL_119;
  }
LABEL_120:
  v114 = [(_UIKeyboardStateManager *)self deferredDidSetDelegateAction];
  char v115 = [v114 isValid];

  if ((v115 & 1) == 0)
  {
    v116 = +[_UIActionWhenIdle actionWhenIdleWithTarget:self selector:sel_didSetDelegate object:0];
    [(_UIKeyboardStateManager *)self setDeferredDidSetDelegateAction:v116];
  }
  self->m_disableSyncTextChanged = 0;
  self->m_ignoreSelectionChange = 0;
  v117 = sharedInputManagerMux();
  v118 = [v117 systemInputManager];
  char v119 = [v118 isMemberOfClass:objc_opt_class()];

  if (v13 || (v119 & 1) == 0)
  {
    v120 = [(_UIKeyboardStateManager *)self taskQueue];
    int v121 = [v120 isMainThreadExecutingTask];

    if (v121)
    {
      [(_UIKeyboardStateManager *)self setInputManagerFromCurrentInputMode];
      [(_UIKeyboardStateManager *)self updateForChangedSelection];
      if (!v13) {
        goto LABEL_133;
      }
      goto LABEL_130;
    }
    if (qword_1EB25F808 != -1) {
      dispatch_once(&qword_1EB25F808, &__block_literal_global_541);
    }
    v122 = [(_UIKeyboardStateManager *)self taskQueue];
    v185[0] = MEMORY[0x1E4F143A8];
    v185[1] = 3221225472;
    v185[2] = __140___UIKeyboardStateManager__setupDelegate_delegateSame_hardwareKeyboardStateChanged_endingInputSessionIdentifier_force_delayEndInputSession___block_invoke_3;
    v185[3] = &unk_1E52E3628;
    v185[4] = self;
    id v186 = v13;
    [v122 addTask:v185 breadcrumb:qword_1EB25F800];

    if (v13)
    {
LABEL_130:
      v123 = [(TIKeyboardState *)self->m_keyboardState documentIdentifier];

      if (!v123)
      {
        v124 = [(_UIKeyboardStateManager *)self documentIdentifierForInputDelegate:v13];
        [(TIKeyboardState *)self->m_keyboardState setDocumentIdentifier:v124];
      }
      v125 = [(TIKeyboardState *)self->m_keyboardState documentIdentifier];
      v126 = +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate];
      v127 = [v126 _textInputSessionAnalytics];
      [v127 setSessionIdentifier:v125];
    }
  }
LABEL_133:
  if ([(_UIKeyboardStateManager *)self isRTIClient])
  {
    if ([v89[479] usesInputSystemUIForAutoFillOnly])
    {
      v128 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
      v129 = [v128 rtiDocumentTraits];
      uint64_t v130 = [v129 autofillMode];

      if (v130)
      {
        v131 = +[_UIRemoteKeyboards sharedRemoteKeyboards];
        [v131 assertNeedsAutofillUI];
      }
    }
  }
  if (([v89[479] usingEndInputSessionCompletion] & 1) == 0)
  {
    if ([(_UIKeyboardStateManager *)self isRTIClient])
    {
      v132 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      v133 = [v132 delegateRespectingForwardingDelegate:0];

      if (v13)
      {
        if (v133)
        {
          if ([(_UIKeyboardStateManager *)self isOutOfProcess])
          {
            v134 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
            v135 = [(TIKeyboardState *)self->m_keyboardState documentIdentifier];
            [v134 beginAllowingRemoteTextInput:v135];
          }
          v136 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
          v137 = [(TIKeyboardState *)self->m_keyboardState documentIdentifier];
          [v136 beginInputSessionWithIdentifier:v137];

          m_keyboardWindowSnapshot = self->m_keyboardWindowSnapshot;
          self->m_keyboardWindowSnapshot = 0;
LABEL_177:

          goto LABEL_178;
        }
      }
    }
  }
  if ([v89[479] usingEndInputSessionCompletion]
    && [(_UIKeyboardStateManager *)self isRTIClient])
  {
    v139 = [(_UIKeyboardStateManager *)self skippedEndInputSession];
    id v140 = [(_UIKeyboardStateManager *)self skippedEndInputSession];
    id v141 = v140;
    if (v13 && v139 && v140 != v13)
    {
      v142 = _UIKeyboardInputSessionChangeLog();
      if (os_log_type_enabled(v142, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1853B0000, v142, OS_LOG_TYPE_FAULT, "New delegate does not match the delegate for the skipped end input session.", buf, 2u);
      }

      if (os_variant_has_internal_diagnostics())
      {
        v180 = _UIKeyboardExtendedLog();
        if (os_log_type_enabled(v180, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1853B0000, v180, OS_LOG_TYPE_DEFAULT, "End the session unceremoniously, detected skippedEndInputSession", buf, 2u);
        }
      }
      v143 = [(_UIKeyboardStateManager *)self remoteTextInputPartnerPrivate];
      v144 = [(_UIKeyboardStateManager *)self skippedEndInputSessionID];
      [v143 endInputSessionWithIdentifier:v144 shouldResign:1 waitForReply:0];

      v145 = [(_UIKeyboardStateManager *)self remoteTextInputPartnerPrivate];
      v146 = [(_UIKeyboardStateManager *)self skippedEndInputSessionID];
      [v145 endAllowingRemoteTextInput:v146];

      [(_UIKeyboardStateManager *)self setSkippedEndInputSession:0];
      [(_UIKeyboardStateManager *)self setSkippedEndInputSessionID:0];
      BOOL v89 = &off_1E52D3000;
    }
    if (!((v13 == 0) | ([v89[479] usesInputSystemUI] ^ 1) & 1) && v139)
    {
      v147 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
      [v147 forwardApplicationOperation:sel_verifyPlacement object:MEMORY[0x1E4F1CC08]];

      v148 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
      [v148 documentStateChanged];
    }
    m_keyboardWindowSnapshot = [(TIKeyboardState *)self->m_keyboardState documentIdentifier];
    if (!v13 || v141 == v13)
    {
      BOOL v152 = v141 != v13 || v13 == 0;
      id v88 = v182;
      if (v152) {
        goto LABEL_166;
      }
      p_super = _UIKeyboardInputSessionChangeLog();
      if (os_log_type_enabled(p_super, OS_LOG_TYPE_DEFAULT))
      {
        _delegateShortDescr(v13);
        id v153 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        id v188 = v153;
        _os_log_impl(&dword_1853B0000, p_super, OS_LOG_TYPE_DEFAULT, "Skipping begin session because end session was previously skipped for: %@", buf, 0xCu);
      }
    }
    else
    {
      [(_UIKeyboardStateManager *)self updateDelegatePasteSupport];
      v149 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
      [v149 beginAllowingRemoteTextInput:m_keyboardWindowSnapshot];

      v150 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
      [v150 beginInputSessionWithIdentifier:m_keyboardWindowSnapshot];

      p_super = &self->m_keyboardWindowSnapshot->super.super;
      self->m_keyboardWindowSnapshot = 0;
      id v88 = v182;
    }

LABEL_166:
    if (v88)
    {
      v154 = [(_UIKeyboardStateManager *)self skippedEndInputSessionID];
      char v155 = [v154 isEqual:v88];

      if ((v155 & 1) == 0)
      {
        v156 = _UIKeyboardInputSessionChangeLog();
        if (os_log_type_enabled(v156, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412290;
          id v188 = v88;
          _os_log_debug_impl(&dword_1853B0000, v156, OS_LOG_TYPE_DEBUG, "Stop allowing RTI for ending input session with ID: %@", buf, 0xCu);
        }

        v157 = [(_UIKeyboardStateManager *)self remoteTextInputPartnerPrivate];
        [v157 endAllowingRemoteTextInput:v88];
      }
    }
    if (v13)
    {
      if ([(_UIKeyboardStateManager *)self skippedEndInputSession]
        || ([(_UIKeyboardStateManager *)self skippedEndInputSessionID],
            v158 = objc_claimAutoreleasedReturnValue(),
            v158,
            v158))
      {
        v159 = _UIKeyboardInputSessionChangeLog();
        if (os_log_type_enabled(v159, OS_LOG_TYPE_DEBUG))
        {
          v178 = [(_UIKeyboardStateManager *)self skippedEndInputSession];
          v179 = [(_UIKeyboardStateManager *)self skippedEndInputSessionID];
          *(_DWORD *)buf = 134218242;
          id v188 = v178;
          __int16 v189 = 2112;
          v190 = v179;
          _os_log_debug_impl(&dword_1853B0000, v159, OS_LOG_TYPE_DEBUG, "nilling skippedEndInputSession properties (was %p, sessionID=%@)", buf, 0x16u);
        }
        [(_UIKeyboardStateManager *)self setSkippedEndInputSession:0];
        [(_UIKeyboardStateManager *)self setSkippedEndInputSessionID:0];
      }
    }
    goto LABEL_177;
  }
LABEL_178:
  if (v13 && self->m_cachedAutofillMode)
  {
    if (!self->m_isAutofilling)
    {
      +[_UIKeyboardUsageTracking appAutofillDetectedIncrement];
      [(_UIKeyboardStateManager *)self generateAutofillCandidateByAddingTask:1];
    }
  }
  else if (!self->m_isAutofilling)
  {
    v160 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    v161 = [v160 delegateRespectingForwardingDelegate:0];

    if (v161)
    {
      v162 = [(_UIKeyboardStateManager *)self delegateAsResponder];
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        v163 = v162;
      }
      else {
        v163 = 0;
      }
      id v164 = v163;
      v165 = [v164 _scroller];
      int v166 = [v165 _isAncestorOfFirstResponder];

      if (v166)
      {
        if (qword_1EB25F818 != -1) {
          dispatch_once(&qword_1EB25F818, &__block_literal_global_556);
        }
        v167 = [(_UIKeyboardStateManager *)self taskQueue];
        v184[0] = MEMORY[0x1E4F143A8];
        v184[1] = 3221225472;
        v184[2] = __140___UIKeyboardStateManager__setupDelegate_delegateSame_hardwareKeyboardStateChanged_endingInputSessionIdentifier_force_delayEndInputSession___block_invoke_3_560;
        v184[3] = &unk_1E52E34C8;
        v184[4] = self;
        [v167 addTask:v184 breadcrumb:qword_1EB25F810];
      }
    }
  }
  v168 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  v169 = [v168 delegateRespectingForwardingDelegate:0];

  if (!v169)
  {
    v170 = +[UIInputSwitcher activeInstance];
    [v170 hideSwitcherIfNeeded];
    v171 = +[UIKeyboardMediaController sharedKeyboardMediaController];
    [v171 releaseRecentlyUsedMediaViewIfNeeded];

    v172 = +[UIKeyboardMediaController sharedKeyboardMediaController];
    [v172 dismissCardIfNeeded];
  }
  +[_UIKeyboardUsageTracking showLowercaseKeyplanePreference:](_UIKeyboardUsageTracking, "showLowercaseKeyplanePreference:", +[UIKeyboardLayout _showSmallDisplayKeyplane]);
  if (v13)
  {
    v173 = [MEMORY[0x1E4F28EB8] defaultCenter];
    [v173 postNotificationName:@"UITextInputResponderIsReloadedNotification" object:0 userInfo:0];
  }
  self->_isSettingDelegate = 0;
  id v174 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [v174 unsetPolicyDelegateResult];
}

- (void)didSetDelegate
{
  char v3 = [(_UIKeyboardStateManager *)self deferredDidSetDelegateAction];
  [v3 invalidate];

  [(_UIKeyboardStateManager *)self setDeferredDidSetDelegateAction:0];
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained _updateSoundPreheating];

  [(_UIKeyboardStateManager *)self releaseInputManagerIfInactive];
  id v5 = [(_UIKeyboardStateManager *)self inputDelegate];
  BOOL v6 = [v5 textInputView];

  if (_UIViewIsAnimating(v6))
  {
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    v18[2] = __41___UIKeyboardStateManager_didSetDelegate__block_invoke;
    v18[3] = &unk_1E52D9F70;
    void v18[4] = self;
    [(_UIKeyboardStateManager *)self queueDelayedTask:v18];
  }
  else
  {
    [(_UIKeyboardStateManager *)self updateDelegatePasteSupport];
  }
  if (didSetDelegate_onceToken != -1) {
    dispatch_once(&didSetDelegate_onceToken, &__block_literal_global_564);
  }
  BOOL v7 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  uint64_t v8 = [v7 keyInputDelegate];
  if (v8)
  {
    id v9 = (void *)v8;
    BOOL v10 = +[UIKeyboardInputModeController sharedInputModeController];
    BOOL v11 = [v10 currentInputMode];
    int v12 = [v11 isExtensionInputMode];

    if (!v12) {
      goto LABEL_10;
    }
    id v13 = +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate];
    BOOL v7 = [v13 keyboardWindow];

    id v14 = [v7 rootViewController];
    [v14 updateKeyboardDockViewVisibility];
  }
LABEL_10:
  id v15 = [(_UIKeyboardStateManager *)self inputDelegate];

  id v16 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  id v17 = v16;
  if (v15) {
    [v16 prewarmEmojiKeyboardIfNeeded];
  }
  else {
    [v16 releaseEmojiKeyboardPrewarmingAssertion];
  }
}

- (void)keyboardSceneDelegate:(id)a3 startedPinningInputViewsOnBehalfOfResponder:(id)a4
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v4 = a4;
  id v5 = _UIKeyboardInputSessionChangeLog();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    int v6 = 134217984;
    id v7 = v4;
    _os_log_debug_impl(&dword_1853B0000, v5, OS_LOG_TYPE_DEBUG, "Started pinning input views on behalf of responder: %p", (uint8_t *)&v6, 0xCu);
  }
}

- (void)keyboardSceneDelegate:(id)a3 stoppedPinningInputViewsOnBehalfOfResponder:(id)a4
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v5 = a4;
  int v6 = _UIKeyboardInputSessionChangeLog();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    int v18 = 134217984;
    id v19 = v5;
    _os_log_debug_impl(&dword_1853B0000, v6, OS_LOG_TYPE_DEBUG, "Stopped pinning input views on behalf of responder: %p", (uint8_t *)&v18, 0xCu);
  }

  if (+[UIKeyboard usingEndInputSessionCompletion]
    && [(_UIKeyboardStateManager *)self isRTIClient])
  {
    id v7 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    uint64_t v8 = [v7 keyInputDelegate];

    if ([(_UIKeyboardStateManager *)self skippedEndInputSession])
    {
      BOOL v9 = [(_UIKeyboardStateManager *)self skippedEndInputSession] != v5;
      if (v8)
      {
LABEL_7:
        BOOL v10 = [(_UIKeyboardStateManager *)self skippedEndInputSession] == v8;
        goto LABEL_10;
      }
    }
    else
    {
      BOOL v9 = 1;
      if (v8) {
        goto LABEL_7;
      }
    }
    BOOL v10 = 0;
LABEL_10:
    BOOL v11 = +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate];
    char v12 = [v11 _keepInputSession];

    if (!v9 && !v10 && (v12 & 1) == 0)
    {
      id v13 = _UIKeyboardInputSessionChangeLog();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v18) = 0;
        _os_log_impl(&dword_1853B0000, v13, OS_LOG_TYPE_DEFAULT, "Stopped pinning input views on behalf of responder: ending session for skippedEndInputSessionID now.", (uint8_t *)&v18, 2u);
      }

      id v14 = [(_UIKeyboardStateManager *)self remoteTextInputPartnerPrivate];
      id v15 = [(_UIKeyboardStateManager *)self skippedEndInputSessionID];
      [v14 endInputSessionWithIdentifier:v15 shouldResign:1 waitForReply:0];

      id v16 = [(_UIKeyboardStateManager *)self remoteTextInputPartnerPrivate];
      id v17 = [(_UIKeyboardStateManager *)self skippedEndInputSessionID];
      [v16 endAllowingRemoteTextInput:v17];

      [(_UIKeyboardStateManager *)self setSkippedEndInputSession:0];
      [(_UIKeyboardStateManager *)self setSkippedEndInputSessionID:0];
    }
  }
}

- (void)updateDelegatePasteSupport
{
  id v11 = +[UIKeyboard keyboardBundleIdentifier];
  if ([v11 isEqualToString:@"com.apple.springboard"]) {
    char v3 = 1;
  }
  else {
    char v3 = [v11 isEqualToString:@"com.apple.Spotlight"];
  }
  if (qword_1EB25F820 != -1) {
    dispatch_once(&qword_1EB25F820, &__block_literal_global_575);
  }
  id v4 = +[UIKeyboardInputModeController sharedInputModeController];
  id v5 = [v4 normalizedEnabledInputModeIdentifiers];
  int v6 = [v5 containsObject:@"emoji"];

  if ((v3 & 1) != 0
    || (_MergedGlobals_990 & 1) != 0
    || [(UITextInputTraits *)self->m_traits isSecureTextEntry]
    || v6 != 1)
  {
    *(_WORD *)&self->m_needsPasteSupportUpdate = 0;
  }
  else
  {
    BOOL v7 = [(_UIKeyboardStateManager *)self uncachedDelegateSupportsImagePaste];
    self->m_delegateSupportsImagePaste = v7;
    self->m_needsPasteSupportUpdate = 0;
    if ((v7 & v6) == 1)
    {
      uint64_t v8 = +[UIKeyboardMediaController sharedKeyboardMediaController];
      if ([v8 recentsViewWillBeVisible])
      {
        id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
        char v10 = [(id)objc_opt_class() isSplit];

        if ((v10 & 1) == 0) {
          +[_UIKeyboardMediaServiceWarmUpConnection warmUp];
        }
      }
      else
      {
      }
    }
  }
}

- (BOOL)delegateSupportsImagePaste
{
  return self->m_delegateSupportsImagePaste;
}

- (void)setRemoteDelegateSupportsImagePaste:(BOOL)a3
{
  if (self->m_remoteDelegateSupportsImagePaste != a3)
  {
    self->m_remoteDelegateSupportsImagePaste = a3;
    [(_UIKeyboardStateManager *)self updateDelegatePasteSupport];
  }
}

- (BOOL)uncachedDelegateSupportsImagePaste
{
  if (+[UIKeyboard isInputSystemUI]) {
    return self->m_remoteDelegateSupportsImagePaste;
  }
  id v4 = [(_UIKeyboardStateManager *)self inputDelegate];
  if ((objc_msgSend(v4, "__isKindOfUIResponder") & 1) == 0)
  {
    uint64_t v5 = [(_UIKeyboardStateManager *)self delegateAsResponder];

    id v4 = (void *)v5;
  }
  if ([(_UIKeyboardStateManager *)self showingEmojiSearch])
  {
    int v6 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    uint64_t v7 = [v6 delegateRespectingForwardingDelegate:0];

    id v4 = (void *)v7;
  }
  uint64_t v8 = [v4 _responderForEditing];

  if (_IsKindOfUIView((uint64_t)v8))
  {
    id v9 = v8;
    uint64_t v8 = v9;
    if (([v9 _isInAWindow] & 1) == 0)
    {

      uint64_t v8 = 0;
    }
  }
  if (v8) {
    char v3 = [v8 _supportsImagePaste];
  }
  else {
    char v3 = 0;
  }

  return v3;
}

- (BOOL)imageSuggestionEnabled
{
  if ([(_UIKeyboardStateManager *)self usesCandidateSelection])
  {
    id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    id v4 = [WeakRetained candidateController];
    char v5 = [v4 activeCandidateViewType];

    if ((v5 & 4) != 0) {
      return 0;
    }
  }
  if ([(_UIKeyboardStateManager *)self delegateSupportsImagePaste]) {
    return 1;
  }
  return [(_UIKeyboardStateManager *)self canInsertAdaptiveImageGlyph];
}

- (void)queueDelayedTask:(id)a3
{
  id v4 = a3;
  id deferredUpdateTask = self->_deferredUpdateTask;
  if (deferredUpdateTask)
  {
    int v6 = _Block_copy(deferredUpdateTask);
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __44___UIKeyboardStateManager_queueDelayedTask___block_invoke;
    void v12[3] = &unk_1E52DE9A0;
    id v13 = v6;
    id v14 = v4;
    id v7 = v6;
    uint64_t v8 = (void *)[v12 copy];
    id v9 = self->_deferredUpdateTask;
    self->_id deferredUpdateTask = v8;
  }
  else
  {
    char v10 = (void *)[v4 copy];
    id v11 = self->_deferredUpdateTask;
    self->_id deferredUpdateTask = v10;
  }
}

- (void)flushDelayedTasks
{
  id deferredUpdateTask = (void (**)(id, SEL))self->_deferredUpdateTask;
  if (deferredUpdateTask)
  {
    deferredUpdateTask[2](deferredUpdateTask, a2);
    id v4 = self->_deferredUpdateTask;
    self->_id deferredUpdateTask = 0;
  }
}

- (BOOL)autocorrectSpellingEnabled
{
  return UIKeyboardAutocorrectSpellingFlag;
}

- (BOOL)hasDelegate
{
  char v3 = +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate];
  id v4 = [v3 responder];

  if (v4
    && [(id)UIApp isSuspended]
    && (+[UIPeripheralHost sharedInstance],
        char v5 = objc_claimAutoreleasedReturnValue(),
        [v5 containerWindow],
        int v6 = objc_claimAutoreleasedReturnValue(),
        char v7 = [v6 _isHostedInAnotherProcess],
        v6,
        v5,
        (v7 & 1) == 0))
  {
    if (![v4 _requiresKeyboardWhenFirstResponder])
    {
      BOOL v10 = 0;
      goto LABEL_6;
    }
    uint64_t v8 = [v4 _keyboardResponder];
    id v9 = v8;
  }
  else
  {
    uint64_t v8 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    id v9 = [v8 keyInputDelegate];
  }
  BOOL v10 = v9 != 0;

LABEL_6:
  return v10;
}

- (void)textWillChange:(id)a3
{
  if (!self->m_textInputChangesIgnored) {
    self->m_textInputChangingText = 1;
  }
  [(_UIKeyboardStateManager *)self selectionWillChange:a3];
}

- (void)invalidateTextEntryContextForTextInput:(id)a3
{
  id v6 = a3;
  id v4 = [(_UIKeyboardStateManager *)self webInputDelegate];

  char v5 = v6;
  if (v4 == v6)
  {
    if ([v6 hasMarkedText]) {
      [(_UIKeyboardStateManager *)self layoutHasChanged];
    }
    else {
      [(_UIKeyboardStateManager *)self updateForChangedSelection];
    }
    char v5 = v6;
  }
}

- (void)textChanged:(id)a3
{
  id v5 = a3;
  if (pthread_main_np())
  {
    if (qword_1EB25F830 != -1) {
      dispatch_once(&qword_1EB25F830, &__block_literal_global_582);
    }
    id v6 = [(_UIKeyboardStateManager *)self taskQueue];
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    v7[2] = __39___UIKeyboardStateManager_textChanged___block_invoke_3;
    v7[3] = &unk_1E52E3628;
    v7[4] = self;
    id v8 = v5;
    [v6 performSingleTask:v7 breadcrumb:qword_1EB25F828];
  }
  else
  {
    [(_UIKeyboardStateManager *)self performSelectorOnMainThread:a2 withObject:v5 waitUntilDone:0];
  }
}

- (void)textChanged:(id)a3 executionContext:(id)a4
{
  id v6 = (_UIKeyboardStateManager *)a3;
  id v7 = a4;
  if (![(_UIKeyboardStateManager *)self initializationDone] || self->m_disableSyncTextChanged) {
    goto LABEL_3;
  }
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  if (([WeakRetained rivenPreference] & 1) == 0)
  {

LABEL_9:
    [(_UIKeyboardStateManager *)self clearChangeTimeAndCount];
    [(_UIKeyboardStateManager *)self clearInput];
    char v12 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    uint64_t v13 = [v12 keyInputDelegate];
    id v14 = (void *)v13;
    if (v6 && v13)
    {
      id v15 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      id v16 = [v15 keyInputDelegate];

      if (v6 == self || v16 == v6)
      {
LABEL_15:
        uint64_t v21 = [(_UIKeyboardStateManager *)self inputDelegateManager];
        uint64_t v22 = [v21 keyInputDelegate];
        if (v22)
        {
          char v23 = (void *)v22;
          uint64_t v24 = [(_UIKeyboardStateManager *)self autofillController];
          if ([v24 delegateNeedsAutofillMode])
          {
            int64_t m_cachedAutofillMode = self->m_cachedAutofillMode;

            if (!m_cachedAutofillMode) {
              self->int64_t m_cachedAutofillMode = [(_UIKeyboardStateManager *)self needAutofill];
            }
            goto LABEL_21;
          }
        }
LABEL_21:
        v27[0] = MEMORY[0x1E4F143A8];
        v27[1] = 3221225472;
        void v27[2] = __56___UIKeyboardStateManager_textChanged_executionContext___block_invoke;
        v27[3] = &unk_1E52E34C8;
        v27[4] = self;
        id v26 = [v7 childWithContinuation:v27];
        [(_UIKeyboardStateManager *)self updateForChangedSelectionWithExecutionContext:v26];

        goto LABEL_4;
      }
      id v17 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      int v18 = [v17 keyInputDelegate];
      id v19 = [(_UIKeyboardStateManager *)self documentIdentifierForInputDelegate:v18];
      [(TIKeyboardState *)self->m_keyboardState setDocumentIdentifier:v19];

      char v12 = [(TIKeyboardState *)self->m_keyboardState documentIdentifier];
      id v14 = +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate];
      uint64_t v20 = [v14 _textInputSessionAnalytics];
      [v20 setSessionIdentifier:v12];
    }
    goto LABEL_15;
  }
  id v9 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  BOOL v10 = [v9 _rootInputWindowController];
  int v11 = [v10 isSplitting];

  if (!v11) {
    goto LABEL_9;
  }
LABEL_3:
  [v7 returnExecutionToParent];
LABEL_4:
}

- (void)finishTextChanged
{
  [(_UIKeyboardStateManager *)self updateReturnKey:1];
  [(_UIKeyboardStateManager *)self updateNoContentViews];
  [(_UIKeyboardStateManager *)self setChangedDelegate];
  [(_UIKeyboardStateManager *)self setShiftOffIfNeeded];
  id v3 = [(_UIKeyboardStateManager *)self textSelectionController];
  [v3 textDidChange];
}

- (void)textSuggestionDidChange:(id)a3
{
  id v4 = a3;
  if (qword_1EB25F840 != -1) {
    dispatch_once(&qword_1EB25F840, &__block_literal_global_586);
  }
  id v5 = [(_UIKeyboardStateManager *)self taskQueue];
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = __51___UIKeyboardStateManager_textSuggestionDidChange___block_invoke_3;
  v8[3] = &unk_1E52E3628;
  v8[4] = self;
  id v9 = v4;
  uint64_t v6 = qword_1EB25F838;
  id v7 = v4;
  [v5 addTask:v8 breadcrumb:v6];
}

- (void)textDidChange:(id)a3
{
  id v4 = a3;
  id v7 = v4;
  if (!self->m_textInputChangesIgnored)
  {
    id v5 = +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate];
    uint64_t v6 = [v5 _textInputSessionAnalytics];
    [v6 didOther];

    id v4 = v7;
  }
  [(_UIKeyboardStateManager *)self selectionDidChange:v4];
}

- (void)setDefaultTextInputTraits:(id)a3
{
  id v4 = (UITextInputTraits *)a3;
  m_defaultTraits = self->m_defaultTraits;
  if (m_defaultTraits != v4)
  {
    uint64_t v13 = v4;
    BOOL v6 = [(UITextInputTraits *)m_defaultTraits isEqual:v4];
    id v4 = v13;
    if (!v6)
    {
      id v7 = (UITextInputTraits *)[(UITextInputTraits *)v13 copy];
      id v8 = self->m_defaultTraits;
      self->m_defaultTraits = v7;

      id v9 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      BOOL v10 = [v9 delegateRespectingForwardingDelegate:0];
      [(_UIKeyboardStateManager *)self setDelegate:v10 force:1];

      int v11 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      char v12 = [v11 delegateRespectingForwardingDelegate:0];

      id v4 = v13;
      if (v13)
      {
        if (!v12)
        {
          [(_UIKeyboardStateManager *)self recomputeActiveInputModesWithExtensions:1];
          id v4 = v13;
        }
      }
    }
  }
}

- (void)setOverrideTextInputTraits:(id)a3
{
  id v4 = (UITextInputTraits *)a3;
  m_overrideTraits = self->m_overrideTraits;
  if (m_overrideTraits != v4)
  {
    int v11 = v4;
    BOOL v6 = [(UITextInputTraits *)m_overrideTraits isEqual:v4];
    id v4 = v11;
    if (!v6)
    {
      if (!v11)
      {
        [(_UIKeyboardStateManager *)self clearForwardingInputDelegateAndResign:1];
        id v4 = 0;
      }
      id v7 = (UITextInputTraits *)[(UITextInputTraits *)v4 copy];
      id v8 = self->m_overrideTraits;
      self->m_overrideTraits = v7;

      id v9 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      BOOL v10 = [v9 delegateRespectingForwardingDelegate:0];
      [(_UIKeyboardStateManager *)self setDelegate:v10 force:1];

      id v4 = v11;
    }
  }
}

- (BOOL)isDefaultPrediction
{
  return self->m_predictionType == 0;
}

- (BOOL)predictionFromPreference
{
  if ([(_UIKeyboardStateManager *)self disableInputBars]) {
    return 0;
  }
  id v3 = +[UIKeyboardPreferencesController sharedPreferencesController];
  id v4 = [v3 preferencesActions];
  char v5 = [v4 predictionEnabled];

  return v5;
}

- (void)textInput:(id)a3 setCandidateSuggestions:(id)a4
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v16 = a3;
  id v5 = a4;
  BOOL v6 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v5, "count"));
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v7 = v5;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v18 objects:v27 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v19;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v19 != v9) {
          objc_enumerationMutation(v7);
        }
        int v11 = *(void **)(*((void *)&v18 + 1) + 8 * v10);
        uint64_t v23 = 0;
        uint64_t v24 = &v23;
        uint64_t v25 = 0x2050000000;
        char v12 = (void *)qword_1EB25FDD8;
        uint64_t v26 = qword_1EB25FDD8;
        if (!qword_1EB25FDD8)
        {
          v22[0] = MEMORY[0x1E4F143A8];
          v22[1] = 3221225472;
          v22[2] = __getBEAutoFillTextSuggestionClass_block_invoke;
          v22[3] = &unk_1E52D9900;
          v22[4] = &v23;
          __getBEAutoFillTextSuggestionClass_block_invoke((uint64_t)v22);
          char v12 = (void *)v24[3];
        }
        id v13 = v12;
        _Block_object_dispose(&v23, 8);
        if (objc_opt_isKindOfClass())
        {
          id v14 = [v11 contents];
          id v15 = +[UIAutoFillTextSuggestion autoFillSuggestionWithContents:v14];
        }
        else
        {
          id v15 = [v11 _uikitTextSuggestion];
        }
        [v6 addObject:v15];

        ++v10;
      }
      while (v8 != v10);
      uint64_t v8 = [v7 countByEnumeratingWithState:&v18 objects:v27 count:16];
    }
    while (v8);
  }

  [(_UIKeyboardStateManager *)self provideCandidateUISuggestions:v6];
}

- (void)setSuggestions:(id)a3
{
  id v4 = a3;
  BOOL v5 = +[UIKeyboard isKeyboardProcess];
  if (!v4 && v5)
  {
    BOOL v6 = [(_UIKeyboardStateManager *)self textSuggestions];
    if (v6)
    {
    }
    else
    {
      id v7 = [(_UIKeyboardStateManager *)self autocorrectionController];
      char v8 = [v7 hasAutofillCandidates];

      if (v8) {
        goto LABEL_9;
      }
    }
  }
  if (qword_1EB25F850 != -1) {
    dispatch_once(&qword_1EB25F850, &__block_literal_global_593);
  }
  uint64_t v9 = [(_UIKeyboardStateManager *)self taskQueue];
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  void v10[2] = __42___UIKeyboardStateManager_setSuggestions___block_invoke_3;
  v10[3] = &unk_1E52E3628;
  v10[4] = self;
  id v11 = v4;
  [v9 addTask:v10 breadcrumb:qword_1EB25F848];

LABEL_9:
}

- (void)insertCustomTextSuggestion:(id)a3
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v28 = self;
  BOOL v5 = [(_UIKeyboardStateManager *)self autocorrectionController];
  BOOL v6 = [v5 textSuggestionList];

  char v29 = v6;
  [v6 predictions];
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v8 = [v7 countByEnumeratingWithState:&v30 objects:v34 count:16];
  if (!v8) {
    goto LABEL_22;
  }
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)v31;
  while (2)
  {
    for (uint64_t i = 0; i != v9; ++i)
    {
      if (*(void *)v31 != v10) {
        objc_enumerationMutation(v7);
      }
      id v12 = *(id *)(*((void *)&v30 + 1) + 8 * i);
      id v13 = [v12 textSuggestion];
      id v14 = [v4 uuid];
      id v15 = [v13 uuid];
      int v16 = [v14 isEqual:v15];

      if (v16)
      {
        id v17 = [(_UIKeyboardStateManager *)v28 inputDelegateManager];
        char v18 = [v17 insertTextSuggestion:v13];

        if ((v18 & 1) != 0
          || ((objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0)
           || [(_UIKeyboardStateManager *)v28 insertAutoFillTextSuggestion:v13])
          && -[_UIKeyboardStateManager acceptWord:firstDelete:](v28, "acceptWord:firstDelete:", v12, [v12 deleteCount]))
        {
          if (!+[UITextSelectionDisplayInteraction isTextAccelerationUIEnabled])
          {
LABEL_21:

            goto LABEL_22;
          }
          long long v19 = [(_UIKeyboardStateManager *)v28 inputDelegateManager];
          uint64_t v20 = [v19 selectedTextRange];
          if (v20)
          {
            long long v21 = (void *)v20;
            uint64_t v22 = [v4 inputText];

            if (!v22 && +[UIKeyboard usesInputSystemUI])
            {
              uint64_t v23 = [(_UIKeyboardStateManager *)v28 _textChoicesAssistant];
              uint64_t v24 = [(_UIKeyboardStateManager *)v28 inputDelegateManager];
              uint64_t v25 = [v24 selectedTextRange];
              [v23 clearUnderlinesInRange:v25 animated:0];

              [(_UIKeyboardStateManager *)v28 dismissTextChoicePrompt];
            }
            goto LABEL_21;
          }
        }
        else
        {
          long long v19 = [(_UIKeyboardStateManager *)v28 inputDelegateManager];
          uint64_t v26 = [v19 textInputDelegate];
          char v27 = [v13 inputText];
          [(_UIKeyboardStateManager *)v28 replaceAllTextInResponder:v26 withText:v27];
        }
        goto LABEL_21;
      }
    }
    uint64_t v9 = [v7 countByEnumeratingWithState:&v30 objects:v34 count:16];
    if (v9) {
      continue;
    }
    break;
  }
LABEL_22:
}

- (void)insertSticker:(id)a3
{
  id v12 = a3;
  if (!+[UIKeyboard isKeyboardProcess]
    || ([(_UIKeyboardStateManager *)self inputSystemSourceSession],
        (uint64_t v4 = objc_claimAutoreleasedReturnValue()) == 0))
  {
    if ([(_UIKeyboardStateManager *)self canInsertAdaptiveImageGlyph]
      && (_UIStickerCreateAdaptiveImageGlyphFromSticker(v12), (uint64_t v9 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      uint64_t v10 = (void *)v9;
      [(_UIKeyboardStateManager *)self insertAdaptiveImageGlyph:v9];
    }
    else
    {
      if (![(_UIKeyboardStateManager *)self canInsertEmojiImageTextAttachment]
        || (_UIStickerCreateEmojiTextAttachmentFromSticker(v12), (uint64_t v11 = objc_claimAutoreleasedReturnValue()) == 0))
      {
        [(_UIKeyboardStateManager *)self _insertStickerAsNonTextAttachment:v12];
        goto LABEL_14;
      }
      uint64_t v10 = (void *)v11;
      [(_UIKeyboardStateManager *)self insertEmojiImageTextAttachment:v11];
    }

LABEL_14:
    [(_UIKeyboardStateManager *)self setPreviousInputString:0];
    goto LABEL_15;
  }
  BOOL v5 = (void *)v4;
  BOOL v6 = _UIStickerCreateTextInputPayloadFromSticker(v12);
  if (v6)
  {
    id v7 = [v5 textOperations];
    [v7 setCustomInfo:v6];

    uint64_t v8 = [v5 textOperations];
    [v8 setCustomInfoType:0x1ED14BBC0];

    [v5 flushOperations];
  }

LABEL_15:
}

- (void)_insertStickerAsNonTextAttachment:(id)a3
{
  id v16 = a3;
  if ([(_UIKeyboardStateManager *)self canInsertStickerAsTextInputPayload])
  {
    uint64_t v4 = _UIStickerCreateTextInputPayloadFromSticker(v16);
    if (!v4) {
      goto LABEL_9;
    }
    BOOL v5 = +[UITextInputPayloadController sharedInstance];
    BOOL v6 = [v5 payloadDelegate];
    [v6 handlePayload:v4 withPayloadId:@"com.apple.messages.stageSticker"];
  }
  else
  {
    id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    uint64_t v8 = [(id)objc_opt_class() keyboardWindow];
    uint64_t v4 = [v8 screen];

    if (v4)
    {
      [v4 scale];
      double v10 = v9;
    }
    else
    {
      double v10 = 1.0;
    }
    uint64_t v11 = [v16 externalURI];
    id v12 = [v16 representations];
    id v13 = [v16 bakedInRep];
    id v14 = [v16 metadata];
    BOOL v5 = _UIStickerItemProviderWithMetadata(v11, v12, v13, 1, v14, v10);

    id v15 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    BOOL v6 = [v15 delegateRespectingForwardingDelegate:0];

    [v6 _insertItemFromProvider:v5 completionHandler:0];
  }

LABEL_9:
}

- (void)handleWebViewCredentialsSaveForWebsiteURL:(id)a3 user:(id)a4 password:(id)a5 passwordIsAutoGenerated:(BOOL)a6
{
  BOOL v6 = a6;
  id v10 = a5;
  id v11 = a4;
  id v12 = a3;
  id v14 = [(_UIKeyboardStateManager *)self autofillController];
  id v13 = [(_UIKeyboardStateManager *)self inputDelegate];
  [v14 handleWebviewCredentialsSaveForResponder:v13 WebsiteURL:v12 user:v11 password:v10 passwordIsAutoGenerated:v6];
}

- (BOOL)isTrackpadMode
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  char v3 = [WeakRetained isTrackpadMode];

  return v3;
}

- (void)updateAssistantView
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained updateAssistantView];
}

- (CGRect)subtractKeyboardFrameFromRect:(CGRect)a3 inView:(id)a4
{
  double height = a3.size.height;
  double width = a3.size.width;
  double y = a3.origin.y;
  double x = a3.origin.x;
  p_presentationDelegate = &self->_presentationDelegate;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)p_presentationDelegate);
  objc_msgSend(WeakRetained, "subtractKeyboardFrameFromRect:inView:", v9, x, y, width, height);
  double v12 = v11;
  double v14 = v13;
  double v16 = v15;
  double v18 = v17;

  double v19 = v12;
  double v20 = v14;
  double v21 = v16;
  double v22 = v18;
  result.size.double height = v22;
  result.size.double width = v21;
  result.origin.double y = v20;
  result.origin.double x = v19;
  return result;
}

- (void)adjustCapsLockDelayOverride
{
  double v2 = -1.0;
  if (os_variant_has_internal_diagnostics())
  {
    if (TIGetCapsLockDelayOverrideInSecondsValue_onceToken != -1) {
      dispatch_once(&TIGetCapsLockDelayOverrideInSecondsValue_onceToken, &__block_literal_global_3639);
    }
    char v3 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
    uint64_t v4 = [v3 valueForPreferenceKey:@"CapsLockDelayOverrideInSeconds"];

    [v4 floatValue];
    double v2 = v5;
  }
  BOOL v6 = (void *)UIApp;
  [v6 setCapsLockDelayOverride:v2];
}

- (void)removeCapsLockDelayOverride
{
}

- (void)clearCapsLockDelayOverrideTimer
{
  char v3 = [(_UIKeyboardStateManager *)self updateCapsLockDelayOverrideForNonTyping];

  if (v3)
  {
    uint64_t v4 = [(_UIKeyboardStateManager *)self updateCapsLockDelayOverrideForNonTyping];
    [v4 cancel];

    [(_UIKeyboardStateManager *)self setUpdateCapsLockDelayOverrideForNonTyping:0];
  }
}

- (void)showCursorAccessory
{
  [(_UIInvalidatable *)self->m_hideCursorAccessoriesAssertion _invalidate];
  m_hideCursorAccessoriesAssertion = self->m_hideCursorAccessoriesAssertion;
  self->m_hideCursorAccessoriesAssertion = 0;

  m_showCursorAccessordouble y = self->m_showCursorAccessory;
  self->m_showCursorAccessordouble y = 0;
}

- (void)performKeyboardOutputAsInputViewControllerOutput:(id)a3
{
}

- (void)performKeyboardOutputAsInputViewControllerOutput:(id)a3 textInputSource:(int64_t)a4
{
  v10[1] = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = objc_alloc_init(_UIInputViewControllerOutput);
  [(_UIInputViewControllerOutput *)v7 setSource:a4];
  uint64_t v8 = +[_UIInputViewKeyboardOutput outputWithKeyboardOutput:v6];

  v10[0] = v8;
  id v9 = [MEMORY[0x1E4F1C978] arrayWithObjects:v10 count:1];
  [(_UIInputViewControllerOutput *)v7 setKeyboardOutputs:v9];

  [(_UIKeyboardStateManager *)self _performInputViewControllerOutput:v7];
}

- (BOOL)_shouldRequestInputManagerSyncForKeyboardOutputCallbacks:(id)a3
{
  id v4 = a3;
  if ([v4 deletionCount])
  {
    float v5 = [v4 insertionText];

    if (v5)
    {
      id v6 = [v4 insertionText];
    }
    else
    {
      id v6 = &stru_1ED0E84C0;
    }
    uint64_t v8 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    char v9 = objc_msgSend(v8, "callShouldReplaceExtendedRange:withText:includeMarkedText:", objc_msgSend(v4, "deletionCount"), v6, 0);

    if (v9)
    {

      BOOL v7 = 0;
      if (v5) {
        goto LABEL_16;
      }
    }
    else
    {
      [v4 setDeletionCount:0];
      if (v5)
      {
        [v4 setInsertionText:0];

LABEL_15:
        BOOL v7 = 1;
        goto LABEL_16;
      }

      BOOL v7 = 1;
    }
  }
  else
  {
    BOOL v7 = 0;
  }
  id v10 = [v4 insertionText];

  if (v10)
  {
    double v11 = [v4 insertionText];
    BOOL v12 = [(_UIKeyboardStateManager *)self callShouldInsertText:v11];

    if (!v12)
    {
      [v4 setInsertionText:0];
      goto LABEL_15;
    }
  }
LABEL_16:

  return v7;
}

- (void)_updateInputViewControllerOutput:(id)a3 forKeyboardOutput:(id)a4
{
  id v21 = a3;
  id v6 = a4;
  if (v21 && v6 && ([v6 didBeginOutput] & 1) == 0)
  {
    BOOL v7 = [v6 insertionText];

    if (v7)
    {
      uint64_t v8 = [v6 insertionText];
      char v9 = [MEMORY[0x1E4F28B88] newlineCharacterSet];
      uint64_t v10 = [v8 rangeOfCharacterFromSet:v9];

      if (v10 != 0x7FFFFFFFFFFFFFFFLL)
      {
        [v21 setShouldPostReturnKeyNotification:1];
        [(_UIKeyboardStateManager *)self cancelDictationOnSendReturnKeyPressed];
      }
    }
    if ([(_UIKeyboardStateManager *)self _shouldRequestInputManagerSyncForKeyboardOutputCallbacks:v6])
    {
      uint64_t v11 = 1;
      BOOL v12 = v21;
    }
    else
    {
      uint64_t v13 = [v21 requiresInputManagerSync];
      BOOL v12 = v21;
      uint64_t v11 = v13;
    }
    [v12 setRequiresInputManagerSync:v11];
    if ([v6 positionOffset])
    {
      [v21 setRequiresInputManagerSync:1];
      double v14 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      objc_msgSend(v14, "collapseSelectionAndAdjustByOffset:", objc_msgSend(v6, "positionOffset"));

      if (+[UIKeyboard isKeyboardProcess]) {
        [v21 setRequiresInputManagerSync:0];
      }
      else {
        [v6 setPositionOffset:0];
      }
    }
    double v15 = [v6 insertionText];

    if (v15)
    {
      double v16 = [v6 insertionText];
      double v17 = [MEMORY[0x1E4F28B88] newlineCharacterSet];
      uint64_t v18 = [v16 rangeOfCharacterFromSet:v17];

      if (v18 != 0x7FFFFFFFFFFFFFFFLL)
      {
        if ([(UITextInputTraits *)self->m_traits returnKeyGoesToNextResponder])
        {
          [v21 setShouldAdvanceResponder:1];
          [v21 setShouldPostReturnKeyNotification:0];
          if (v18)
          {
            double v19 = [v6 insertionText];
            double v20 = [v19 substringToIndex:v18];
            [v6 setInsertionText:v20];
          }
          else
          {
            [v6 setInsertionText:0];
          }
        }
      }
    }
    [v6 setDidBeginOutput:1];
  }
}

- (void)_processInputViewControllerKeyboardOutput:(id)a3 executionContext:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  BOOL v8 = [(_UIKeyboardStateManager *)self _delegateRequiresKeyEvents];
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  void v11[2] = __86___UIKeyboardStateManager__processInputViewControllerKeyboardOutput_executionContext___block_invoke;
  v11[3] = &unk_1E52DC3F8;
  id v12 = v6;
  uint64_t v13 = self;
  BOOL v15 = v8;
  id v14 = v7;
  id v9 = v7;
  id v10 = v6;
  [(_UIKeyboardStateManager *)self _performKeyboardOutput:v11 respectingForwardingDelegate:0];
}

- (void)_completePerformInputViewControllerOutput:(id)a3 executionContext:(id)a4
{
  id v74 = a3;
  id v6 = a4;
  if (([v74 requiresInputManagerSync] & 1) == 0 && self->m_didSyncDocumentStateToInputDelegate) {
    [v74 setRequiresInputManagerSync:1];
  }
  if ([v74 shouldAdvanceResponder])
  {
    id v7 = [(_UIKeyboardStateManager *)self delegateAsResponder];
    BOOL v8 = [v7 _nextKeyResponder];
    [v8 becomeFirstResponder];
  }
  id v9 = +[UIKeyboardInputModeController sharedInputModeController];
  id v10 = [v9 currentInputMode];

  if ([v10 isExtensionInputMode])
  {
    uint64_t v11 = [v74 primaryLanguage];
    if (v11)
    {
      id v12 = (void *)v11;
      uint64_t v13 = [v74 primaryLanguage];
      id v14 = [v13 lowercaseString];
      char v15 = [v14 hasPrefix:@"und"];

      if ((v15 & 1) == 0)
      {
        double v16 = [v10 primaryLanguage];
        double v17 = [v74 primaryLanguage];
        char v18 = [v16 isEqualToString:v17];

        if ((v18 & 1) == 0)
        {
          double v19 = [v74 primaryLanguage];
          [v10 setPrimaryLanguage:v19];

          double v20 = +[UIKeyboardInputModeController sharedInputModeController];
          [v20 _inputModeChangedWhileContextTracked];

          id v21 = +[UIKeyboardPreferencesController sharedPreferencesController];
          double v22 = [v21 preferencesActions];
          uint64_t v23 = [v10 identifier];
          [v22 setLanguageAwareInputModeLastUsed:v23];

          if (self->m_hardwareKeyboardAttached) {
            [(_UIKeyboardStateManager *)self updateHardwareKeyboardLayout];
          }
        }
        uint64_t v24 = (void *)MEMORY[0x1E4F1CA20];
        uint64_t v25 = [v74 primaryLanguage];
        int64_t v26 = [v24 characterDirectionForLanguage:v25] == 2;

        if (self->m_currentDirection != v26)
        {
          self->int64_t m_currentDirection = v26;
          [(_UIKeyboardStateManager *)self setInitialDirection];
        }
        char v27 = [MEMORY[0x1E4F28EB8] defaultCenter];
        [v27 postNotificationName:@"UITextInputCurrentInputModeDidChangeNotification" object:0];

        uint64_t v28 = [MEMORY[0x1E4F28EB8] defaultCenter];
        [v28 postNotificationName:@"UITextInputDidPersistFindUINotification" object:0];

        +[_UIKeyboardUsageTracking keyboardExtensionPrimaryLanguageChanged];
      }
    }
  }
  int v29 = [v10 isExtensionInputMode];
  long long v30 = v74;
  if (v29)
  {
    int v31 = [v74 hasDictation];
    int v32 = [v10 extensionInputModeHasDictation];
    long long v30 = v74;
    if (v31 != v32)
    {
      objc_msgSend(v10, "setExtensionInputModeHasDictation:", objc_msgSend(v74, "hasDictation"));
      long long v33 = +[UIPeripheralHost sharedInstance];
      int v34 = [v33 inputViews];
      uint64_t v35 = [v34 inputView];
      id v36 = [v35 _rootInputWindowController];
      [v36 updateKeyboardDockViewVisibility];

      long long v30 = v74;
    }
  }
  if ([v30 shouldPostReturnKeyNotification])
  {
    BOOL v37 = [MEMORY[0x1E4F28EB8] defaultCenter];
    [v37 postNotificationName:@"UIKeyboardReturnKeyPressed" object:0];
  }
  id v38 = +[UIInputSwitcherView sharedInstance];
  if ([v74 shouldAdvanceInputMode])
  {
    id v39 = [v10 identifier];
    int v40 = [v39 isEqualToString:@"autofillsignup"];

    if (!v40)
    {
      [(_UIKeyboardStateManager *)self setInputModeToNextInPreferredListWithExecutionContext:v6];
      goto LABEL_58;
    }
    id v41 = [(_UIKeyboardStateManager *)self autofillController];
    [v41 didOptOutOfAutofillSignup];

    BOOL v42 = [(_UIKeyboardStateManager *)self autofillController];
    [v42 optOutASPInTextField];

    BOOL v43 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    v44 = [v43 inputSystemSourceSession];

    if (v44)
    {
      id v45 = [v44 textOperations];
      [v45 setEditingActionSelector:sel_optOutASPInTextField];
      [v44 flushOperations];
    }
    self->m_usesSystemKeyboardForASP = 1;
    if (+[UIKeyboard usesInputSystemUI])
    {
      id v46 = +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate];
      BOOL v47 = [v46 remoteInputViewHost];

      int v48 = [v47 inputViewSet];
      uint64_t v49 = [v48 hostedCustomInputView];
      if (v49)
      {
        BOOL v50 = (void *)v49;
        int v51 = [v47 shouldShowDockView];

        if (v51)
        {
          [v47 setInputViewSet:0];
          [v47 updateInputViewsIfNecessary];
        }
      }
      else
      {
      }
    }
    [(_UIKeyboardStateManager *)self recomputeActiveInputModesWithExtensions:0];
    goto LABEL_49;
  }
  [v74 inputModeListTouchBegan];
  if (v52 != 0.0)
  {
    int64_t v53 = +[UIPeripheralHost sharedInstance];
    BOOL v54 = [v53 inputViews];
    v44 = [v54 inputView];

    p_presentationDelegate = &self->_presentationDelegate;
    id WeakRetained = objc_loadWeakRetained((id *)p_presentationDelegate);
    char v57 = [WeakRetained layout];
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();

    if (isKindOfClass)
    {
      id v59 = objc_loadWeakRetained((id *)p_presentationDelegate);
      int v60 = [v59 layout];
      [v38 setLayout:v60];
    }
    unint64_t v61 = [v74 inputModeListTouchPhase];
    if (v61 < 2)
    {
      if (([v38 isVisible] & 1) == 0)
      {
        [v74 inputModeListFromLocation];
        objc_msgSend(v44, "convertPoint:toView:", 0);
        double v63 = v62;
        double v65 = v64;
        [v74 inputModeListTouchBegan];
        objc_msgSend(v38, "showAsHUDFromLocation:withInputView:touchBegan:", v44, v63, v65, v66);
      }
      if ([v38 isVisible])
      {
        [v74 inputModeListUpdatePoint];
        objc_msgSend(v44, "convertPoint:toView:", v38);
        objc_msgSend(v38, "updateSelectionWithPoint:");
      }
    }
    else if (v61 == 3)
    {
      if ([v38 isVisible])
      {
        [v74 inputModeListUpdatePoint];
        objc_msgSend(v44, "convertPoint:toView:", v38);
        objc_msgSend(v38, "selectItemAtPoint:");
      }
    }
    else if (v61 == 4)
    {
      [v38 hide];
    }
LABEL_49:
    [v6 returnExecutionToParent];

    goto LABEL_58;
  }
  if ([v74 shouldDismiss])
  {
    [(_UIKeyboardStateManager *)self dismissKeyboard];
  }
  else if ([v74 proceedShouldReturn])
  {
    [(_UIKeyboardStateManager *)self proceedShouldReturnIfNeededForASP];
  }
  else if (([v74 setMarkedText] & 1) != 0 || objc_msgSend(v74, "unmarkText"))
  {
    self->m_textInputChangesIgnored = 1;
    if ([v74 setMarkedText])
    {
      id v67 = [v74 markedText];
      uint64_t v68 = [v74 selectedRange];
      uint64_t v70 = v69;
      id v71 = [v74 markedText];
      char v72 = [v74 markedText];
      -[_UIKeyboardStateManager setMarkedText:selectedRange:inputString:lastInputString:searchString:candidateOffset:liveConversionSegments:highlighSegmentIndex:](self, "setMarkedText:selectedRange:inputString:lastInputString:searchString:candidateOffset:liveConversionSegments:highlighSegmentIndex:", v67, v68, v70, v71, 0, v72, 0x7FFFFFFFFFFFFFFFLL, 0, 0x7FFFFFFFFFFFFFFFLL);
    }
    if ([v74 unmarkText])
    {
      uint64_t v73 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      [v73 unmarkText];
    }
    self->m_textInputChangesIgnored = 0;
  }
  else if ([v74 requiresInputManagerSync])
  {
    [(_UIKeyboardStateManager *)self syncInputManagerToKeyboardState];
  }
  [v6 returnExecutionToParent];
LABEL_58:
}

- (id)physicalKeyboardEventWithInput:(id)a3 inputFlags:(int)a4
{
  float v5 = +[UIPhysicalKeyboardEvent _eventWithInput:a3 inputFlags:*(void *)&a4];
  [v5 setSource:self->m_textInputSource];
  return v5;
}

- (void)optOutASPInTextField
{
  char v3 = [(_UIKeyboardStateManager *)self autofillController];
  [v3 didOptOutOfAutofillSignup];

  id v4 = [(_UIKeyboardStateManager *)self autofillController];
  [v4 optOutASPInTextField];
}

- (void)performTextOperationActionSelector:(SEL)a3
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  float v5 = [(_UIKeyboardStateManager *)self arrowKeyHistory];
  [(_UIKeyboardStateManager *)self setArrowKeyHistory:0];
  if (sel_insertNewline_ == a3 || sel_insertNewlineIgnoringFieldEditor_ == a3)
  {
    id v7 = @"\n";
    goto LABEL_79;
  }
  if (sel_insertLineBreak_ == a3)
  {
    id v7 = @"\u2028";
    goto LABEL_79;
  }
  if (sel_performSendAction_ == a3)
  {
    [(_UIKeyboardStateManager *)self performSendAction];
    goto LABEL_80;
  }
  if (sel_performKeyboardActionButtonAction_ == a3)
  {
    [(_UIKeyboardStateManager *)self performKeyboardActionButtonAction];
    goto LABEL_80;
  }
  if (sel_deleteBackward_ == a3)
  {
    if ([(_UIKeyboardStateManager *)self callShouldDeleteWithWordCountForRapidDelete:2 characterCountForRapidDelete:3])
    {
      [(_UIKeyboardStateManager *)self deleteBackwardAndNotify:1];
    }
  }
  else
  {
    if (sel_deleteForward_ != a3)
    {
      if (sel_deleteToBeginningOfLine_ == a3)
      {
        id WeakRetained = [(_UIKeyboardStateManager *)self inputDelegateManager];
        [WeakRetained _deleteToStartOfLine];
        goto LABEL_91;
      }
      if (sel_deleteToEndOfParagraph_ == a3)
      {
        id WeakRetained = [(_UIKeyboardStateManager *)self inputDelegateManager];
        [WeakRetained _deleteToEndOfParagraph];
        goto LABEL_91;
      }
      if (sel_insertTab_ == a3 || sel_insertTabIgnoringFieldEditor_ == a3)
      {
        uint64_t v13 = [(_UIKeyboardStateManager *)self textInputTraits];
        if ([v13 isSingleLineDocument])
        {
          BOOL v14 = [(_UIKeyboardStateManager *)self handleTabWithShift:0 beforePublicKeyCommands:0];

          if (v14) {
            goto LABEL_80;
          }
        }
        else
        {
        }
        id v7 = @"\t";
      }
      else
      {
        if (sel_insertBacktab_ == a3) {
          goto LABEL_97;
        }
        if (sel_insertSingleQuoteIgnoringSubstitution_ == a3)
        {
          id v7 = @"'";
        }
        else
        {
          if (sel_insertDoubleQuoteIgnoringSubstitution_ != a3)
          {
            if (sel_transpose_ == a3)
            {
              id WeakRetained = [(_UIKeyboardStateManager *)self inputDelegate];
              [WeakRetained _transpose];
              goto LABEL_91;
            }
            if (sel_selectNextKeyView_ == a3)
            {
              char v15 = self;
              uint64_t v16 = 0;
              goto LABEL_98;
            }
            if (sel_selectPreviousKeyView_ != a3)
            {
              if (sel_deleteWordBackward_ != a3)
              {
                if (sel_moveWordLeft_ == a3) {
                  goto LABEL_104;
                }
                if (sel_moveWordRight_ == a3) {
                  goto LABEL_106;
                }
                if (sel_moveBackward_ == a3 || sel_moveLeft_ == a3)
                {
                  double v22 = [(_UIKeyboardStateManager *)self inputDelegateManager];
                  id WeakRetained = v22;
                  uint64_t v23 = 0;
                }
                else
                {
                  if (sel_moveBackwardAndModifySelection_ != a3 && sel_moveLeftAndModifySelection_ != a3)
                  {
                    if (sel_moveForward_ == a3 || sel_moveRight_ == a3)
                    {
                      uint64_t v25 = [(_UIKeyboardStateManager *)self inputDelegateManager];
                      id WeakRetained = v25;
                      uint64_t v26 = 0;
                    }
                    else
                    {
                      if (sel_moveForwardAndModifySelection_ != a3 && sel_moveRightAndModifySelection_ != a3)
                      {
                        if (sel_moveWordLeftAndModifySelection_ == a3)
                        {
LABEL_116:
                          double v17 = [(_UIKeyboardStateManager *)self inputDelegateManager];
                          id WeakRetained = v17;
                          uint64_t v18 = 1;
                          goto LABEL_105;
                        }
                        if (sel_moveWordRightAndModifySelection_ == a3)
                        {
LABEL_117:
                          double v20 = [(_UIKeyboardStateManager *)self inputDelegateManager];
                          id WeakRetained = v20;
                          uint64_t v21 = 1;
                          goto LABEL_107;
                        }
                        if (sel_moveDown_ == a3)
                        {
                          char v27 = [(_UIKeyboardStateManager *)self inputDelegateManager];
                          id WeakRetained = v27;
                          uint64_t v28 = 0;
                        }
                        else
                        {
                          if (sel_moveDownAndModifySelection_ != a3)
                          {
                            if (sel_moveUp_ == a3)
                            {
                              int v29 = [(_UIKeyboardStateManager *)self inputDelegateManager];
                              id WeakRetained = v29;
                              uint64_t v30 = 0;
                            }
                            else
                            {
                              if (sel_moveUpAndModifySelection_ != a3)
                              {
                                if (sel_moveWordBackward_ != a3)
                                {
                                  if (sel_moveWordBackwardAndModifySelection_ != a3)
                                  {
                                    if (sel_moveWordForward_ != a3)
                                    {
                                      if (sel_moveWordForwardAndModifySelection_ != a3)
                                      {
                                        if (sel_moveToLeftEndOfLine_ == a3)
                                        {
                                          int v31 = [(_UIKeyboardStateManager *)self inputDelegateManager];
                                          id WeakRetained = v31;
                                          uint64_t v32 = 0;
                                        }
                                        else
                                        {
                                          if (sel_moveToLeftEndOfLineAndModifySelection_ != a3)
                                          {
                                            if (sel_moveToRightEndOfLine_ == a3)
                                            {
                                              long long v33 = [(_UIKeyboardStateManager *)self inputDelegateManager];
                                              id WeakRetained = v33;
                                              uint64_t v34 = 0;
                                            }
                                            else
                                            {
                                              if (sel_moveToRightEndOfLineAndModifySelection_ != a3)
                                              {
                                                if (sel_moveToBeginningOfParagraph_ == a3)
                                                {
                                                  uint64_t v35 = [(_UIKeyboardStateManager *)self inputDelegateManager];
                                                  id WeakRetained = v35;
                                                  uint64_t v36 = 0;
                                                }
                                                else
                                                {
                                                  if (sel_moveToBeginningOfParagraphAndModifySelection_ != a3)
                                                  {
                                                    if (sel_moveToEndOfParagraph_ == a3)
                                                    {
                                                      BOOL v37 = [(_UIKeyboardStateManager *)self inputDelegateManager];
                                                      id WeakRetained = v37;
                                                      uint64_t v38 = 0;
                                                    }
                                                    else
                                                    {
                                                      if (sel_moveToEndOfParagraphAndModifySelection_ != a3)
                                                      {
                                                        if (sel_moveToBeginningOfDocument_ == a3)
                                                        {
                                                          id v39 = [(_UIKeyboardStateManager *)self inputDelegateManager];
                                                          id WeakRetained = v39;
                                                          uint64_t v40 = 0;
                                                        }
                                                        else
                                                        {
                                                          if (sel_moveToBeginningOfDocumentAndModifySelection_ != a3)
                                                          {
                                                            if (sel_moveToEndOfDocument_ == a3)
                                                            {
                                                              id v41 = [(_UIKeyboardStateManager *)self inputDelegateManager];
                                                              id WeakRetained = v41;
                                                              uint64_t v42 = 0;
                                                            }
                                                            else
                                                            {
                                                              if (sel_moveToEndOfDocumentAndModifySelection_ != a3)
                                                              {
                                                                if (sel_cancelOperation_ == a3)
                                                                {
                                                                  id WeakRetained = [(_UIKeyboardStateManager *)self delegateAsResponder];
                                                                  BOOL v43 = [WeakRetained targetForAction:sel__cancelOperation_ withSender:0];
                                                                  uint64_t v24 = v43;
                                                                  if (v43) {
                                                                    [v43 _cancelOperation:0];
                                                                  }
                                                                  else {
                                                                    [WeakRetained _nonDestructivelyResignFirstResponder];
                                                                  }
                                                                }
                                                                else
                                                                {
                                                                  if (sel_nonDestructivelyDismissKeyboard_ == a3)
                                                                  {
                                                                    [(_UIKeyboardStateManager *)self nonDestructivelyDismissKeyboard];
                                                                    goto LABEL_80;
                                                                  }
                                                                  if (sel_toggleBoldface_ == a3)
                                                                  {
                                                                    uint64_t v44 = [(_UIKeyboardStateManager *)self delegateAsResponder];
                                                                    if (!v44) {
                                                                      goto LABEL_80;
                                                                    }
                                                                    id v45 = (void *)v44;
                                                                    BOOL v46 = [(_UIKeyboardStateManager *)self _canHandleResponderCommand:a3];

                                                                    if (!v46) {
                                                                      goto LABEL_80;
                                                                    }
                                                                    id WeakRetained = [(_UIKeyboardStateManager *)self delegateAsResponder];
                                                                    uint64_t v24 = [WeakRetained _responderForEditing];
                                                                    [v24 toggleBoldface:0];
                                                                  }
                                                                  else if (sel_toggleItalics_ == a3)
                                                                  {
                                                                    uint64_t v47 = [(_UIKeyboardStateManager *)self delegateAsResponder];
                                                                    if (!v47) {
                                                                      goto LABEL_80;
                                                                    }
                                                                    int v48 = (void *)v47;
                                                                    BOOL v49 = [(_UIKeyboardStateManager *)self _canHandleResponderCommand:a3];

                                                                    if (!v49) {
                                                                      goto LABEL_80;
                                                                    }
                                                                    id WeakRetained = [(_UIKeyboardStateManager *)self delegateAsResponder];
                                                                    uint64_t v24 = [WeakRetained _responderForEditing];
                                                                    [v24 toggleItalics:0];
                                                                  }
                                                                  else if (sel_toggleUnderline_ == a3)
                                                                  {
                                                                    uint64_t v50 = [(_UIKeyboardStateManager *)self delegateAsResponder];
                                                                    if (!v50) {
                                                                      goto LABEL_80;
                                                                    }
                                                                    int v51 = (void *)v50;
                                                                    BOOL v52 = [(_UIKeyboardStateManager *)self _canHandleResponderCommand:a3];

                                                                    if (!v52) {
                                                                      goto LABEL_80;
                                                                    }
                                                                    id WeakRetained = [(_UIKeyboardStateManager *)self delegateAsResponder];
                                                                    uint64_t v24 = [WeakRetained _responderForEditing];
                                                                    [v24 toggleUnderline:0];
                                                                  }
                                                                  else
                                                                  {
                                                                    if (sel_performUndo == a3)
                                                                    {
                                                                      int64_t v53 = [(_UIKeyboardStateManager *)self delegateAsResponder];
                                                                      BOOL v54 = [v53 _responderForEditing];
                                                                      id WeakRetained = [v54 undoManager];

                                                                      if (WeakRetained
                                                                        && [WeakRetained canUndo])
                                                                      {
                                                                        [WeakRetained undo];
                                                                      }
                                                                      goto LABEL_91;
                                                                    }
                                                                    if (sel_performRedo == a3)
                                                                    {
                                                                      uint64_t v55 = [(_UIKeyboardStateManager *)self delegateAsResponder];
                                                                      v56 = [v55 _responderForEditing];
                                                                      id WeakRetained = [v56 undoManager];

                                                                      if (WeakRetained
                                                                        && [WeakRetained canRedo])
                                                                      {
                                                                        [WeakRetained redo];
                                                                      }
                                                                      goto LABEL_91;
                                                                    }
                                                                    if (sel_beginUndoGrouping == a3)
                                                                    {
                                                                      char v57 = [(_UIKeyboardStateManager *)self delegateAsResponder];
                                                                      char v58 = [v57 _responderForEditing];
                                                                      id WeakRetained = [v58 undoManager];

                                                                      if (WeakRetained) {
                                                                        [WeakRetained beginUndoGrouping];
                                                                      }
                                                                      goto LABEL_91;
                                                                    }
                                                                    if (sel_endUndoGrouping == a3)
                                                                    {
                                                                      id v59 = [(_UIKeyboardStateManager *)self delegateAsResponder];
                                                                      int v60 = [v59 _responderForEditing];
                                                                      id WeakRetained = [v60 undoManager];

                                                                      if (WeakRetained) {
                                                                        [WeakRetained endUndoGrouping];
                                                                      }
                                                                      goto LABEL_91;
                                                                    }
                                                                    if (sel_removeSelectedText == a3)
                                                                    {
                                                                      id WeakRetained = +[UIDictationController sharedInstance];
                                                                      [WeakRetained removeSelectedText];
                                                                      goto LABEL_91;
                                                                    }
                                                                    if (sel_handleRemoteKeyboardCameraEvent_selfDestruct == a3)
                                                                    {
                                                                      id WeakRetained = +[UIKeyboardCameraSession activeSession];
                                                                      [WeakRetained endActiveSession];
                                                                      goto LABEL_91;
                                                                    }
                                                                    if (sel_handleStickerEvent_presentCard == a3)
                                                                    {
                                                                      id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
                                                                      objc_msgSend(WeakRetained, "handleStickerEvent_presentCard");
                                                                      goto LABEL_91;
                                                                    }
                                                                    if (sel_lookUpResponderChainForCustomInputView == a3)
                                                                    {
                                                                      [(_UIKeyboardStateManager *)self lookUpResponderChainForCustomInputView];
                                                                      goto LABEL_80;
                                                                    }
                                                                    if (sel_setupForAsyncDelegate == a3)
                                                                    {
                                                                      id WeakRetained = +[UIDictationController sharedInstance];
                                                                      [WeakRetained setupForAsyncDelegate];
                                                                      goto LABEL_91;
                                                                    }
                                                                    if (sel__presentDictationMenuIfAllowed == a3)
                                                                    {
                                                                      id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
                                                                      [WeakRetained _presentDictationMenuIfAllowed];
                                                                      goto LABEL_91;
                                                                    }
                                                                    if (sel_enableTransientSelectionMode == a3)
                                                                    {
                                                                      [(_UIKeyboardStateManager *)self enableTransientSelectionMode];
                                                                      goto LABEL_80;
                                                                    }
                                                                    if (sel_disableTransientSelectionMode == a3)
                                                                    {
                                                                      [(_UIKeyboardStateManager *)self disableTransientSelectionMode];
                                                                      goto LABEL_80;
                                                                    }
                                                                    if (sel_optOutASPInTextField == a3)
                                                                    {
                                                                      [(_UIKeyboardStateManager *)self optOutASPInTextField];
                                                                      goto LABEL_80;
                                                                    }
                                                                    if (sel_setCursorGlowViewMode == a3)
                                                                    {
                                                                      id WeakRetained = [(_UIKeyboardStateManager *)self inputDelegateManager];
                                                                      unint64_t v61 = [WeakRetained selectionDisplayInteraction];
                                                                      uint64_t v24 = v61;
                                                                      uint64_t v62 = 1;
                                                                    }
                                                                    else
                                                                    {
                                                                      if (sel_setTrailingGlowViewMode != a3)
                                                                      {
                                                                        BOOL v8 = _UIKeyboardImplLog();
                                                                        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
                                                                        {
                                                                          double v63 = NSStringFromSelector(a3);
                                                                          int v64 = 138412290;
                                                                          double v65 = v63;
                                                                          _os_log_error_impl(&dword_1853B0000, v8, OS_LOG_TYPE_ERROR, "Unsupported action selector %@", (uint8_t *)&v64, 0xCu);
                                                                        }
                                                                        goto LABEL_80;
                                                                      }
                                                                      id WeakRetained = [(_UIKeyboardStateManager *)self inputDelegateManager];
                                                                      unint64_t v61 = [WeakRetained selectionDisplayInteraction];
                                                                      uint64_t v24 = v61;
                                                                      uint64_t v62 = 2;
                                                                    }
                                                                    [v61 _setGlowViewMode:v62];
                                                                  }
                                                                }
                                                                goto LABEL_112;
                                                              }
                                                              id v41 = [(_UIKeyboardStateManager *)self inputDelegateManager];
                                                              id WeakRetained = v41;
                                                              uint64_t v42 = 1;
                                                            }
                                                            uint64_t v19 = [v41 _moveToEndOfDocument:v42 withHistory:v5];
LABEL_111:
                                                            uint64_t v24 = (void *)v19;
                                                            [(_UIKeyboardStateManager *)self setArrowKeyHistory:v19];
LABEL_112:

                                                            goto LABEL_91;
                                                          }
                                                          id v39 = [(_UIKeyboardStateManager *)self inputDelegateManager];
                                                          id WeakRetained = v39;
                                                          uint64_t v40 = 1;
                                                        }
                                                        uint64_t v19 = [v39 _moveToStartOfDocument:v40 withHistory:v5];
                                                        goto LABEL_111;
                                                      }
                                                      BOOL v37 = [(_UIKeyboardStateManager *)self inputDelegateManager];
                                                      id WeakRetained = v37;
                                                      uint64_t v38 = 1;
                                                    }
                                                    uint64_t v19 = [v37 _moveToEndOfParagraph:v38 withHistory:v5];
                                                    goto LABEL_111;
                                                  }
                                                  uint64_t v35 = [(_UIKeyboardStateManager *)self inputDelegateManager];
                                                  id WeakRetained = v35;
                                                  uint64_t v36 = 1;
                                                }
                                                uint64_t v19 = [v35 _moveToStartOfParagraph:v36 withHistory:v5];
                                                goto LABEL_111;
                                              }
                                              long long v33 = [(_UIKeyboardStateManager *)self inputDelegateManager];
                                              id WeakRetained = v33;
                                              uint64_t v34 = 1;
                                            }
                                            uint64_t v19 = [v33 _moveToEndOfLine:v34 withHistory:v5];
                                            goto LABEL_111;
                                          }
                                          int v31 = [(_UIKeyboardStateManager *)self inputDelegateManager];
                                          id WeakRetained = v31;
                                          uint64_t v32 = 1;
                                        }
                                        uint64_t v19 = [v31 _moveToStartOfLine:v32 withHistory:v5];
                                        goto LABEL_111;
                                      }
                                      goto LABEL_117;
                                    }
LABEL_106:
                                    double v20 = [(_UIKeyboardStateManager *)self inputDelegateManager];
                                    id WeakRetained = v20;
                                    uint64_t v21 = 0;
LABEL_107:
                                    uint64_t v19 = [v20 _moveToEndOfWord:v21 withHistory:v5];
                                    goto LABEL_111;
                                  }
                                  goto LABEL_116;
                                }
LABEL_104:
                                double v17 = [(_UIKeyboardStateManager *)self inputDelegateManager];
                                id WeakRetained = v17;
                                uint64_t v18 = 0;
LABEL_105:
                                uint64_t v19 = [v17 _moveToStartOfWord:v18 withHistory:v5];
                                goto LABEL_111;
                              }
                              int v29 = [(_UIKeyboardStateManager *)self inputDelegateManager];
                              id WeakRetained = v29;
                              uint64_t v30 = 1;
                            }
                            uint64_t v19 = [v29 _moveUp:v30 withHistory:v5];
                            goto LABEL_111;
                          }
                          char v27 = [(_UIKeyboardStateManager *)self inputDelegateManager];
                          id WeakRetained = v27;
                          uint64_t v28 = 1;
                        }
                        uint64_t v19 = [v27 _moveDown:v28 withHistory:v5];
                        goto LABEL_111;
                      }
                      uint64_t v25 = [(_UIKeyboardStateManager *)self inputDelegateManager];
                      id WeakRetained = v25;
                      uint64_t v26 = 1;
                    }
                    uint64_t v19 = [v25 _moveRight:v26 withHistory:v5];
                    goto LABEL_111;
                  }
                  double v22 = [(_UIKeyboardStateManager *)self inputDelegateManager];
                  id WeakRetained = v22;
                  uint64_t v23 = 1;
                }
                uint64_t v19 = [v22 _moveLeft:v23 withHistory:v5];
                goto LABEL_111;
              }
              id WeakRetained = [(_UIKeyboardStateManager *)self inputDelegateManager];
              [WeakRetained _deleteByWord];
LABEL_91:

              goto LABEL_80;
            }
LABEL_97:
            char v15 = self;
            uint64_t v16 = 1;
LABEL_98:
            [(_UIKeyboardStateManager *)v15 handleTabWithShift:v16 beforePublicKeyCommands:0];
            goto LABEL_80;
          }
          id v7 = @"\"";
        }
      }
LABEL_79:
      [(_UIKeyboardStateManager *)self insertTextIfShould:v7];
      goto LABEL_80;
    }
    id v10 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    int v11 = [v10 shouldDeleteForward];

    if (v11) {
      [(_UIKeyboardStateManager *)self deleteForwardAndNotify:1];
    }
  }
LABEL_80:
  id v9 = [(_UIKeyboardStateManager *)self arrowKeyHistory];

  if (v9) {
    [(_UIKeyboardStateManager *)self updateForChangedSelection];
  }
}

- (TIDocumentState)documentState
{
  double v2 = [(TIKeyboardState *)self->m_keyboardState documentState];
  char v3 = v2;
  if (v2) {
    id v4 = v2;
  }
  else {
    id v4 = objc_alloc_init(MEMORY[0x1E4FAE2A8]);
  }
  float v5 = v4;

  return (TIDocumentState *)v5;
}

- (void)setDocumentState:(id)a3
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (!v4)
  {
    if (os_variant_has_internal_diagnostics())
    {
      if (qword_1EB25F868 != -1) {
        dispatch_once(&qword_1EB25F868, &__block_literal_global_773);
      }
      BOOL v8 = [(id)qword_1EB25F870 dateByAddingTimeInterval:14400.0];
      id v9 = [MEMORY[0x1E4F1C9C8] now];
      id v10 = [v8 earlierDate:v9];

      if (v10 == v8)
      {
        int v11 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB25F878) + 8);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          int v13 = 134218242;
          uint64_t v14 = 1801640960;
          __int16 v15 = 2114;
          uint64_t v16 = @"Nil document state as argument to -[UIKeyboardInput setDocumentState:]";
          _os_log_impl(&dword_1853B0000, v11, OS_LOG_TYPE_ERROR, "Exception Code %llx - %{public}@", (uint8_t *)&v13, 0x16u);
        }
        uint64_t v12 = getpid();
        __UISimulateCrash(v12);
      }
    }
    id v4 = objc_alloc_init(MEMORY[0x1E4FAE2A8]);
  }
  float v5 = [(_UIKeyboardStateManager *)self documentState];
  char v6 = [v4 isEqual:v5];

  [(TIKeyboardState *)self->m_keyboardState setDocumentState:v4];
  if ((v6 & 1) == 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    [WeakRetained documentStateDidChange];
  }
  os_variant_has_internal_diagnostics();
}

- (id)_rtiDocumentStateForAutoFillPopover
{
  if (+[UIKeyboard inputUIOOP])
  {
    char v3 = [(_UIKeyboardStateManager *)self inputSystemSourceSession];
    id v4 = [v3 documentState];
  }
  else
  {
    id v4 = objc_alloc_init(MEMORY[0x1E4F95EA8]);
    float v5 = [(_UIKeyboardStateManager *)self inputDelegate];
    char v3 = [v5 textInputView];

    char v6 = [v3 window];
    [v3 bounds];
    objc_msgSend(v3, "convertRect:toView:", v6);
    objc_msgSend(v4, "setClientFrameInWindow:");
    [v4 clientFrameInWindow];
    double v8 = v7;
    double v10 = v9;
    double v12 = v11;
    double v14 = v13;
    __int16 v15 = [v6 screen];
    uint64_t v16 = [v15 coordinateSpace];
    objc_msgSend(v6, "convertRect:toCoordinateSpace:", v16, v8, v10, v12, v14);
    double v18 = v17;
    double v20 = v19;
    double v22 = v21;
    double v24 = v23;

    if ([v6 _isHostedInAnotherProcess])
    {
      uint64_t v25 = [v6 windowScene];
      uint64_t v26 = +[UITextEffectsWindow activeTextEffectsWindowForWindowScene:v25];
      [v26 hostedViewReference];
      double v28 = v27;
      double v30 = v29;

      double v18 = v18 + v28;
      double v20 = v20 + v30;
    }
    objc_msgSend(v4, "setClientFrameInEntitySpace:", v18, v20, v22, v24);
    int v31 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    uint64_t v32 = [v31 selectedTextRange];
    long long v33 = [v32 start];
    uint64_t v34 = v33;
    if (v33)
    {
      id v35 = v33;
    }
    else
    {
      uint64_t v36 = [(_UIKeyboardStateManager *)self inputDelegate];
      id v35 = [v36 beginningOfDocument];
    }
    BOOL v37 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    [v37 caretRectForPosition:v35];
    double v39 = v38;
    double v41 = v40;
    double v43 = v42;
    double v45 = v44;

    BOOL v46 = [v3 window];
    objc_msgSend(v3, "convertRect:toView:", v46, v39, v41, v43, v45);
    objc_msgSend(v4, "setCaretRectInWindow:");

    uint64_t v47 = [(_UIKeyboardStateManager *)self documentState];
    [v4 setDocumentState:v47];
  }
  return v4;
}

- (void)didClearText
{
  char v3 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  id v4 = [v3 forwardingInputDelegate];

  if (!v4)
  {
    float v5 = [(_UIKeyboardStateManager *)self inputSystemSourceSession];
    if (v5)
    {
      id v7 = v5;
      char v6 = [v5 textOperations];
      [v6 setTextToAssert:&stru_1ED0E84C0];

      [v7 flushOperations];
      float v5 = v7;
    }
  }
}

- (BOOL)callShouldInsertText:(id)a3
{
  id v4 = a3;
  float v5 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  char v6 = [v5 keyInputDelegate];

  BOOL v7 = [(_UIKeyboardStateManager *)self callShouldInsertText:v4 onDelegate:v6];
  double v8 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  double v9 = [v8 keyInputDelegate];

  BOOL v10 = v6 == v9 && v7;
  return v10;
}

- (BOOL)insertTextIfShould:(id)a3
{
  id v4 = a3;
  BOOL v5 = [(_UIKeyboardStateManager *)self callShouldInsertText:v4];
  if (v5)
  {
    char v6 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    [v6 insertText:v4];
  }
  return v5;
}

- (void)performSendAction
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained performSendAction];
}

- (void)performKeyboardActionButtonAction
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained performKeyboardActionButtonAction];
}

- (BOOL)usesAutoDeleteWord
{
  if ([(UITextInputTraits *)self->m_traits isSecureTextEntry]) {
    return 0;
  }
  id v4 = [(_UIKeyboardStateManager *)self inputManagerState];
  char v5 = [v4 usesAutoDeleteWord];

  return v5;
}

- (BOOL)shouldRapidDelete
{
  char v3 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  id v4 = [v3 legacyInputDelegate];
  BOOL v5 = (objc_opt_respondsToSelector() & 1) != 0
    && [(_UIKeyboardStateManager *)self shouldRapidDeleteWithDelegate];

  return v5;
}

- (BOOL)shouldRapidDeleteWithDelegate
{
  return self->m_autoDeleteOK && self->m_autoDeleteCount > 0x13;
}

- (BOOL)callShouldDeleteWithWordCountForRapidDelete:(int)a3 characterCountForRapidDelete:(int)a4
{
  uint64_t v5 = *(void *)&a3;
  self->m_textInputChangesIgnored = 1;
  BOOL v7 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  double v8 = [v7 legacyInputDelegate];
  char v9 = objc_opt_respondsToSelector();

  if ((v9 & 1) == 0)
  {
    double v13 = [(_UIKeyboardStateManager *)self inputDelegate];
    char v14 = objc_opt_respondsToSelector();

    if ((v14 & 1) == 0)
    {
      char v31 = 1;
      goto LABEL_20;
    }
    __int16 v15 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    uint64_t v16 = [v15 selectedTextRange];

    if ([v16 isEmpty])
    {
      double v17 = [(_UIKeyboardStateManager *)self inputDelegate];
      double v18 = [v16 start];
      double v19 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      double v20 = [v19 beginningOfDocument];
      uint64_t v21 = [v17 comparePosition:v18 toPosition:v20];

      if (v21)
      {
        double v22 = [(_UIKeyboardStateManager *)self inputDelegate];
        double v23 = [v16 start];
        double v24 = [v22 positionFromPosition:v23 offset:-1];

        if (v24)
        {
          uint64_t v25 = [(_UIKeyboardStateManager *)self inputDelegate];
          uint64_t v26 = [v16 end];
          uint64_t v27 = [v25 textRangeFromPosition:v24 toPosition:v26];

          uint64_t v16 = v25;
        }
        else
        {
          uint64_t v27 = 0;
        }

        uint64_t v16 = (void *)v27;
      }
    }
    if (!v16)
    {
      char v31 = 1;
      goto LABEL_19;
    }
    double v28 = [(_UIKeyboardStateManager *)self inputDelegate];
    char v31 = [v28 shouldChangeTextInRange:v16 replacementText:&stru_1ED0E84C0];
LABEL_18:

LABEL_19:
    goto LABEL_20;
  }
  if (![(_UIKeyboardStateManager *)self shouldRapidDeleteWithDelegate])
  {
    uint64_t v16 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    double v28 = [v16 legacyInputDelegate];
    double v29 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    double v30 = [v29 legacyInputDelegate];
    char v31 = [v28 keyboardInputShouldDelete:v30];

    goto LABEL_18;
  }
  BOOL v10 = [(_UIKeyboardStateManager *)self usesAutoDeleteWord];
  double v11 = [(_UIKeyboardStateManager *)self inputDelegate];
  double v12 = v11;
  if (v10) {
    [v11 _expandSelectionToStartOfWordsBeforeCaretSelection:v5];
  }
  else {
    [v11 _extendCurrentSelection:-a4];
  }

  uint64_t v32 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  long long v33 = [v32 legacyInputDelegate];
  uint64_t v34 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  id v35 = [v34 legacyInputDelegate];
  char v31 = [v33 keyboardInputShouldDelete:v35];

  uint64_t v36 = [(_UIKeyboardStateManager *)self inputDelegate];
  [v36 _setCaretSelectionAtEndOfSelection];

  [(_UIKeyboardStateManager *)self syncDocumentStateToInputDelegate];
LABEL_20:
  self->m_textInputChangesIgnored = 0;
  return v31;
}

- (void)callChangedDelegate
{
  char v3 = [(_UIKeyboardStateManager *)self changedDelegate];
  char v4 = objc_opt_respondsToSelector();

  if (v4)
  {
    uint64_t v5 = [(_UIKeyboardStateManager *)self changedDelegate];
    char v6 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    BOOL v7 = [v6 legacyInputDelegate];
    [v5 keyboardInputChanged:v7];
  }
  [(_UIKeyboardStateManager *)self setChangedDelegate:0];
}

- (void)setChangedDelegate
{
  char v3 = [(_UIKeyboardStateManager *)self changedDelegate];

  if (!v3)
  {
    char v4 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    uint64_t v5 = [v4 keyInputDelegate];
    [(_UIKeyboardStateManager *)self setChangedDelegate:v5];
  }
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained updateObserverState];

  id v7 = [(_UIKeyboardStateManager *)self textSelectionController];
  [v7 textDidChange];
}

- (BOOL)shouldAllowRepeatEvent:(id)a3
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [v4 _modifiedInput];
  char v6 = [v5 _isDelete];

  if ((v6 & 1) != 0
    || [(_UIKeyboardStateManager *)self canPresentPressAndHoldPopover:v4])
  {
    goto LABEL_7;
  }
  if (![v4 _hidEvent])
  {
    LOBYTE(v7) = 0;
    goto LABEL_8;
  }
  if (qword_1EB25F888 != -1) {
    dispatch_once(&qword_1EB25F888, &__block_literal_global_786);
  }
  if ((unint64_t)([v4 _keyCode] - 79) < 4)
  {
LABEL_7:
    LOBYTE(v7) = 1;
  }
  else
  {
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v9 = (id)qword_1EB25F880;
    uint64_t v7 = [v9 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v7)
    {
      uint64_t v10 = *(void *)v16;
      while (2)
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (*(void *)v16 != v10) {
            objc_enumerationMutation(v9);
          }
          uint64_t v12 = *(void *)(*((void *)&v15 + 1) + 8 * i);
          double v13 = objc_msgSend(v4, "_modifiedInput", (void)v15);
          uint64_t v14 = [v13 rangeOfCharacterFromSet:v12];

          if (v14 != 0x7FFFFFFFFFFFFFFFLL)
          {
            LOBYTE(v7) = 1;
            goto LABEL_20;
          }
        }
        uint64_t v7 = [v9 countByEnumeratingWithState:&v15 objects:v19 count:16];
        if (v7) {
          continue;
        }
        break;
      }
    }
LABEL_20:
  }
LABEL_8:

  return v7;
}

- (id)_targetForResponderCommand:(SEL)a3
{
  id v4 = [(_UIKeyboardStateManager *)self delegateAsResponder];
  uint64_t v5 = [v4 _responderForEditing];
  char v6 = _UIResponderTargetForAction(v5, a3, 0);

  return v6;
}

- (BOOL)_canHandleResponderCommand:(SEL)a3
{
  id v4 = -[_UIKeyboardStateManager _targetForResponderCommand:](self, "_targetForResponderCommand:");
  LOBYTE(a3) = [v4 canPerformAction:a3 withSender:0];

  return (char)a3;
}

- (BOOL)_canHandleResponderCommandConservatively:(SEL)a3
{
  BOOL v5 = [(_UIKeyboardStateManager *)self _delegateRequiresKeyEvents];
  char v6 = [(_UIKeyboardStateManager *)self _targetForResponderCommand:a3];
  uint64_t v7 = v6;
  if (v5) {
    char v8 = [v6 canPerformAction:a3 withSender:0];
  }
  else {
    char v8 = objc_opt_respondsToSelector();
  }
  char v9 = v8;

  return v9 & 1;
}

- (BOOL)_cancelOperation:(BOOL)a3 testOnly:(BOOL)a4
{
  uint64_t v4 = a4;
  BOOL v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  LOBYTE(v4) = [WeakRetained _cancelOperation:v5 testOnly:v4];

  return v4;
}

- (BOOL)isCurrentEditResponderWebKit
{
  if (WebKitFramework)
  {
    char v3 = [(_UIKeyboardStateManager *)self delegateAsResponder];
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
  }
  else
  {
    char isKindOfClass = 0;
  }
  BOOL v5 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  char v6 = [v5 asyncCapableInputDelegate];
  BOOL v7 = v6 != 0;

  return (isKindOfClass | v7) & 1;
}

- (BOOL)isCurrentEditResponderInEditingMode
{
  if (WebKitFramework)
  {
    char v3 = [(_UIKeyboardStateManager *)self delegateAsResponder];
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
  }
  else
  {
    char isKindOfClass = 0;
  }
  BOOL v5 = [(_UIKeyboardStateManager *)self delegateAsResponder];
  char v6 = [v5 _responderForEditing];

  if ((isKindOfClass & 1) != 0 || (objc_opt_respondsToSelector() & 1) == 0)
  {
    char v8 = [(_UIKeyboardStateManager *)self delegateAsResponder];
    char v9 = objc_opt_respondsToSelector();

    if (v9)
    {
      uint64_t v10 = [(_UIKeyboardStateManager *)self delegateAsResponder];
      if (![v10 isEditable])
      {
        char v7 = 0;
LABEL_19:

        goto LABEL_20;
      }
      double v11 = [(_UIKeyboardStateManager *)self delegateAsResponder];
      char v7 = [v11 isFirstResponder];
    }
    else
    {
      uint64_t v12 = [(_UIKeyboardStateManager *)self textInteractionAssistant];
      char v13 = objc_opt_respondsToSelector();

      if ((v13 & 1) == 0) {
        goto LABEL_15;
      }
      uint64_t v10 = [(_UIKeyboardStateManager *)self textInteractionAssistant];
      double v11 = [(_UIKeyboardStateManager *)self inputDelegate];
      if ([v10 viewCouldBecomeEditable:v11])
      {
        uint64_t v14 = [(_UIKeyboardStateManager *)self inputDelegate];
        char v7 = [v14 isFirstResponder];
      }
      else
      {
        char v7 = 0;
      }
    }

    goto LABEL_19;
  }
  if (![v6 isEditing])
  {
LABEL_15:
    char v7 = 0;
    goto LABEL_20;
  }
  if (objc_opt_respondsToSelector()) {
    char v7 = [v6 isEditable];
  }
  else {
    char v7 = 1;
  }
LABEL_20:

  return v7;
}

- (BOOL)handleKeyCommand:(id)a3 repeatOkay:(BOOL *)a4 beforePublicKeyCommands:(BOOL)a5
{
  id v8 = a3;
  uint64_t v16 = 0;
  long long v17 = &v16;
  uint64_t v18 = 0x2020000000;
  char v19 = 0;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  void v11[2] = __79___UIKeyboardStateManager_handleKeyCommand_repeatOkay_beforePublicKeyCommands___block_invoke;
  v11[3] = &unk_1E52E3718;
  BOOL v15 = a5;
  char v13 = &v16;
  void v11[4] = self;
  id v9 = v8;
  id v12 = v9;
  uint64_t v14 = a4;
  [(_UIKeyboardStateManager *)self performOperations:v11 withTextInputSource:0];
  LOBYTE(a4) = *((unsigned char *)v17 + 24);

  _Block_object_dispose(&v16, 8);
  return (char)a4;
}

- (BOOL)shouldShowKeyboardMenu
{
  char v3 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  uint64_t v4 = [v3 keyInputDelegate];
  if (v4)
  {
    BOOL v5 = [(_UIKeyboardStateManager *)self delegateAsResponder];
    int v6 = [v5 _disableAutomaticKeyboardUI] ^ 1;
  }
  else
  {
    LOBYTE(v6) = 0;
  }

  return v6;
}

- (BOOL)inputModeSwitcherVisible
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  char v3 = [WeakRetained inputModeSwitcherVisible];

  return v3;
}

- (void)setInputModeSwitcherVisibleInRemote:(BOOL)a3
{
  BOOL v3 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained setInputModeSwitcherVisibleInRemote:v3];
}

- (unint64_t)handleKeyCommand:(id)a3 repeatOkay:(BOOL *)a4 options:(unint64_t)a5
{
  int v266 = a5;
  id v6 = a3;
  uint64_t v308 = 0;
  v309 = &v308;
  uint64_t v310 = 0x2020000000;
  char v311 = 1;
  uint64_t v307 = 1;
  BOOL v306 = 0;
  BOOL v7 = [(_UIKeyboardStateManager *)self _delegateRequiresKeyEvents];
  BOOL v8 = [(_UIKeyboardStateManager *)self liveConversionEnabled];
  id v9 = v6;
  uint64_t v10 = (void *)[v9 _cloneEvent];

  [v10 _privatize];
  v265 = v9;
  unsigned __int16 v11 = [v10 _keyCode];
  int v12 = [v10 _gsModifierFlags];
  int v262 = v12 & 0x220000;
  BOOL v13 = (v12 & 0x220000) != 0;
  int v264 = v12;
  int v255 = v12 & 0x1010000;
  BOOL v14 = (v12 & 0x1010000) != 0;
  if ([v10 _isGlobeKey])
  {
    if ([v10 _isKeyDown])
    {
      [(_UIKeyboardStateManager *)self setPreviousGlobeKeyEvent:v10];
      BOOL v15 = 1;
    }
    else
    {
      if (self->m_previousGlobeKeyEvent)
      {
        [v10 _hidEvent];
        uint64_t v16 = BKSHIDEventGetBaseAttributes();
        BOOL v15 = ([v16 options] & 0x80) == 0;
      }
      else
      {
        BOOL v15 = 1;
      }
      [v10 timestamp];
      double v18 = v17;
      [(UIEvent *)self->m_previousGlobeKeyEvent timestamp];
      if (v18 - v19 > 0.9) {
        BOOL v15 = 1;
      }
      [(_UIKeyboardStateManager *)self setPreviousGlobeKeyEvent:0];
    }
  }
  else
  {
    if ((v264 & 0x4000000) != 0) {
      [(_UIKeyboardStateManager *)self setPreviousGlobeKeyEvent:0];
    }
    BOOL v15 = 0;
  }
  uint64_t v20 = [MEMORY[0x1E4FA8AA0] sharedInstance];
  v302[0] = MEMORY[0x1E4F143A8];
  v302[1] = 3221225472;
  v302[2] = __63___UIKeyboardStateManager_handleKeyCommand_repeatOkay_options___block_invoke;
  v302[3] = &unk_1E52E3740;
  BOOL v304 = v13;
  BOOL v305 = v14;
  id v21 = v10;
  id v303 = v21;
  [v20 logBlock:v302 domain:@"com.apple.keyboard.UIKit"];

  if ((UIKeyboardGetSafeDeviceIdiom() & 0xFFFFFFFFFFFFFFFBLL) != 1
    || [(id)UIApp _areKeyboardHUDsEnabled])
  {
    int v22 = [v21 _isGlobeKey];
    if (v266 & 1) != 0 || ((v22 ^ 1)) {
      BOOL v23 = ((v15 | ![(_UIKeyboardStateManager *)self shouldShowKeyboardMenu]) & 1) == 0
    }
         && ([v21 keyEventForwardedFromInputUIHost] & 1) == 0
         && [(_UIKeyboardStateManager *)self handleInputSwitcherForKeyEvent:v265];
    else {
      BOOL v23 = 1;
    }
    if ([(_UIKeyboardStateManager *)self inputModeSwitcherVisible]
      && [v21 _isGlobeKey]
      && [v21 _isKeyDown])
    {
      double v24 = +[UIKeyShortcutHUDService sharedHUDService];
      [v24 preventUnintendedSystemHUDPresentationIfNeeded];
    }
    if (v23)
    {
      if (a4) {
        *a4 = 0;
      }
      unint64_t v25 = 1;
LABEL_30:
      uint64_t v26 = v21;
      goto LABEL_616;
    }
  }
  if (v266)
  {
    uint64_t v27 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    double v28 = [v27 keyInputDelegate];

    if (!v28)
    {
      unint64_t v25 = 0;
      if (a4) {
        *a4 = 0;
      }
      goto LABEL_30;
    }
    goto LABEL_36;
  }
  if ((v266 & 3) != 0)
  {
LABEL_36:
    v261 = 0;
    char v29 = 1;
    goto LABEL_38;
  }
  v261 = [(_UIKeyboardStateManager *)self arrowKeyHistory];
  [(_UIKeyboardStateManager *)self setArrowKeyHistory:0];
  char v29 = 0;
LABEL_38:
  [(_UIKeyboardStateManager *)self setHandlingKeyCommandFromHardwareKeyboard:1];
  BOOL v30 = [(_UIKeyboardStateManager *)self hasEditableMarkedText];
  if ([(_UIKeyboardStateManager *)self _hasMarkedText])
  {
    char v31 = [(_UIKeyboardStateManager *)self inputManagerState];
    char v32 = [v31 supportsSetPhraseBoundary] ^ 1;
  }
  else
  {
    char v32 = 0;
  }
  char v256 = v29;
  if (!self->m_candidateList
    || [(_UIKeyboardStateManager *)self isPredictionViewControllerVisible])
  {
    unsigned int v254 = 0;
    int v33 = 0;
    unsigned int v251 = 0;
    int v34 = 0;
    goto LABEL_53;
  }
  if ([(UIKeyboardCandidateList *)self->m_candidateList hasCandidates]
    && [(TIKeyboardCandidateResultSet *)self->m_candidateResultSet hasCandidates])
  {
    id v35 = [(TIKeyboardState *)self->m_keyboardState inputForMarkedText];
    if ([v35 length])
    {

LABEL_51:
      id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      double v38 = [WeakRetained candidateController];
      unsigned int v254 = [v38 inlineRectIsVertical];

      int v34 = [(UIKeyboardCandidateList *)self->m_candidateList isExtendedList];
      int v33 = 1;
      goto LABEL_52;
    }
    uint64_t v36 = [(UIKeyboardCandidateList *)self->m_candidateList currentIndex];

    if (v36 != 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_51;
    }
  }
  unsigned int v254 = 0;
  int v33 = 0;
  int v34 = 0;
LABEL_52:
  unsigned int v251 = 1;
LABEL_53:
  uint64_t v39 = v264 & 0x5D90000 | v11;
  unsigned int v252 = v33;
  if (v8) {
    char v40 = v30;
  }
  else {
    char v40 = v33;
  }
  char v258 = v40;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __63___UIKeyboardStateManager_handleKeyCommand_repeatOkay_options___block_invoke_2;
  aBlock[3] = &unk_1E52E3768;
  aBlock[4] = self;
  v257 = (uint64_t (**)(void *, char *))_Block_copy(aBlock);
  v300[0] = MEMORY[0x1E4F143A8];
  v300[1] = 3221225472;
  v300[2] = __63___UIKeyboardStateManager_handleKeyCommand_repeatOkay_options___block_invoke_3;
  v300[3] = &unk_1E52E3768;
  v300[4] = self;
  v260 = _Block_copy(v300);
  v299[0] = MEMORY[0x1E4F143A8];
  v299[1] = 3221225472;
  v299[2] = __63___UIKeyboardStateManager_handleKeyCommand_repeatOkay_options___block_invoke_4;
  v299[3] = &unk_1E52DA6B0;
  v299[4] = self;
  v259 = (uint64_t (**)(void))_Block_copy(v299);
  uint64_t v26 = v21;
  [v21 setKeyCommandCode:v39];
  [v21 setKeyCommandHandlingBeforePublic:v266 & 1];
  uint64_t v41 = v266 & 2;
  int v253 = v266 & v7;
  if ((int)v39 > 524363)
  {
    if ((int)v39 > 8388681)
    {
      switch((int)v39)
      {
        case 16777290:
          goto LABEL_76;
        case 16777291:
        case 16777292:
        case 16777294:
          goto LABEL_208;
        case 16777293:
          goto LABEL_91;
        case 16777295:
          goto LABEL_92;
        case 16777296:
          goto LABEL_94;
        case 16777297:
          goto LABEL_96;
        case 16777298:
          goto LABEL_99;
        default:
          if (v39 == 16777258) {
            goto LABEL_149;
          }
          goto LABEL_208;
      }
    }
    if ((int)v39 <= 4194345)
    {
      switch((int)v39)
      {
        case 1048650:
          goto LABEL_76;
        case 1048651:
        case 1048652:
        case 1048654:
          goto LABEL_208;
        case 1048653:
          goto LABEL_91;
        case 1048655:
          goto LABEL_92;
        case 1048656:
          goto LABEL_94;
        case 1048657:
          goto LABEL_96;
        case 1048658:
          goto LABEL_99;
        default:
          switch((int)v39)
          {
            case 524364:
              goto LABEL_78;
            case 524367:
              goto LABEL_108;
            case 524368:
              goto LABEL_112;
            case 524369:
              goto LABEL_116;
            case 524370:
              goto LABEL_119;
            default:
              goto LABEL_208;
          }
      }
    }
    switch((int)v39)
    {
      case 4194380:
LABEL_78:
        BOOL v306 = 1;
        if (v258) {
          goto LABEL_196;
        }
        char v42 = v258 ^ 1;
        if (v266) {
          goto LABEL_209;
        }
        if (+[UIKeyboard isKeyboardProcess])
        {
          uint64_t v47 = [(_UIKeyboardStateManager *)self inputDelegateManager];
          char v48 = [v47 shouldRespectForwardingInputDelegate];

          if ((v48 & 1) == 0)
          {
            if ((v266 & 2) != 0) {
              goto LABEL_250;
            }
            goto LABEL_249;
          }
        }
        if ([(UITextInputTraits *)self->m_traits isSecureTextEntry]
          && ![(UITextInputTraits *)self->m_traits displaySecureTextUsingPlainText])
        {
          BOOL v101 = [(_UIKeyboardStateManager *)self inputDelegateManager];
          char v102 = [v101 canHandleInputDelegateCommandAction:5];
          *((unsigned char *)v309 + 24) = v102;

          LOBYTE(v43) = 0;
          if ((v266 & 2) == 0 && *((unsigned char *)v309 + 24))
          {
            uint64_t v69 = [(_UIKeyboardStateManager *)self inputDelegateManager];
            [v69 _deleteToEndOfLine];
            goto LABEL_223;
          }
        }
        else
        {
          BOOL v49 = [(_UIKeyboardStateManager *)self inputDelegateManager];
          char v50 = [v49 canHandleInputDelegateCommandAction:3];
          *((unsigned char *)v309 + 24) = v50;

          LOBYTE(v43) = 0;
          if ((v266 & 2) == 0 && *((unsigned char *)v309 + 24))
          {
            [(_UIKeyboardStateManager *)self setDisableSmartInsertDelete:1];
            int v51 = [(_UIKeyboardStateManager *)self inputDelegateManager];
            [v51 _deleteForwardByWord];
            goto LABEL_167;
          }
        }
        goto LABEL_254;
      case 4194381:
      case 4194382:
        goto LABEL_208;
      case 4194383:
LABEL_108:
        char v42 = v258 ^ 1;
        BOOL v306 = 1;
        unsigned int v43 = v259[2]();
        if (v30)
        {
          if (!v254) {
            goto LABEL_205;
          }
          id v55 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
          unsigned int v43 = [v55 isPressAndHoldPopoverPresented];

          if (!v43) {
            goto LABEL_254;
          }
          goto LABEL_200;
        }
        if (v266) {
          goto LABEL_209;
        }
        if (v32) {
          goto LABEL_224;
        }
        if (!+[UIKeyboard isKeyboardProcess]
          || ([(_UIKeyboardStateManager *)self inputDelegateManager],
              v85 = objc_claimAutoreleasedReturnValue(),
              char v86 = [v85 shouldRespectForwardingInputDelegate],
              v85,
              (v86 & 1) != 0))
        {
          v292[0] = MEMORY[0x1E4F143A8];
          v292[1] = 3221225472;
          v292[2] = __63___UIKeyboardStateManager_handleKeyCommand_repeatOkay_options___block_invoke_5;
          v292[3] = &unk_1E52E3790;
          char v296 = v43;
          v295 = &v308;
          char v297 = (v266 & 2) >> 1;
          id v294 = v260;
          v292[4] = self;
          BOOL v298 = v13;
          id v293 = v261;
          [(_UIKeyboardStateManager *)self performBlockWithTextInputChangesIgnoredForNonMacOS:v292];

          uint64_t v62 = v294;
          goto LABEL_194;
        }
        if ((v266 & 2) == 0) {
          goto LABEL_249;
        }
        goto LABEL_250;
      case 4194384:
LABEL_112:
        char v42 = v258 ^ 1;
        BOOL v306 = 1;
        int v56 = v259[2]();
        char v57 = v56;
        if (v30)
        {
          if ((v254 & 1) == 0)
          {
            unsigned int v43 = v56 ^ 1;
            goto LABEL_205;
          }
          id v58 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
          unsigned int v43 = [v58 isPressAndHoldPopoverPresented];

          if (!v43) {
            goto LABEL_254;
          }
          goto LABEL_200;
        }
        if (v266) {
          goto LABEL_209;
        }
        if (v32) {
          goto LABEL_224;
        }
        if (!+[UIKeyboard isKeyboardProcess]
          || ([(_UIKeyboardStateManager *)self inputDelegateManager],
              BOOL v87 = objc_claimAutoreleasedReturnValue(),
              char v88 = [v87 shouldRespectForwardingInputDelegate],
              v87,
              (v88 & 1) != 0))
        {
          v285[0] = MEMORY[0x1E4F143A8];
          v285[1] = 3221225472;
          v285[2] = __63___UIKeyboardStateManager_handleKeyCommand_repeatOkay_options___block_invoke_6;
          v285[3] = &unk_1E52E3790;
          char v289 = v57;
          v288 = &v308;
          char v290 = (v266 & 2) >> 1;
          id v287 = v260;
          v285[4] = self;
          BOOL v291 = v13;
          id v286 = v261;
          [(_UIKeyboardStateManager *)self performBlockWithTextInputChangesIgnoredForNonMacOS:v285];

          uint64_t v62 = v287;
          goto LABEL_194;
        }
        if ((v266 & 2) == 0) {
          goto LABEL_249;
        }
        goto LABEL_250;
      case 4194385:
LABEL_116:
        BOOL v306 = 1;
        if (v30)
        {
          char v42 = v258 ^ 1;
          unsigned int v43 = 0;
          if (v254) {
            goto LABEL_205;
          }
          goto LABEL_254;
        }
        if (v266) {
          goto LABEL_208;
        }
        char v42 = v258 ^ 1;
        if (v32) {
          goto LABEL_224;
        }
        if (!+[UIKeyboard isKeyboardProcess]
          || ([(_UIKeyboardStateManager *)self inputDelegateManager],
              char v79 = objc_claimAutoreleasedReturnValue(),
              char v80 = [v79 shouldRespectForwardingInputDelegate],
              v79,
              (v80 & 1) != 0))
        {
          int v81 = (*((uint64_t (**)(void *, char *))v260 + 2))(v260, sel__moveToEndOfParagraph_withHistory_);
          LOBYTE(v43) = 0;
          *((unsigned char *)v309 + 24) = v81;
          if ((v266 & 2) == 0 && ((v81 ^ 1) & 1) == 0)
          {
            v282[0] = MEMORY[0x1E4F143A8];
            v282[1] = 3221225472;
            v282[2] = __63___UIKeyboardStateManager_handleKeyCommand_repeatOkay_options___block_invoke_7;
            v282[3] = &unk_1E52DC3D0;
            v282[4] = self;
            BOOL v284 = v13;
            id v283 = v261;
            [(_UIKeyboardStateManager *)self performBlockWithTextInputChangesIgnoredForNonMacOS:v282];
            uint64_t v62 = v283;
            goto LABEL_194;
          }
          goto LABEL_254;
        }
        if ((v266 & 2) != 0) {
          goto LABEL_250;
        }
        goto LABEL_249;
      case 4194386:
LABEL_119:
        BOOL v306 = 1;
        if (v30)
        {
          char v42 = v258 ^ 1;
          if ((v254 & 1) == 0) {
            goto LABEL_224;
          }
          unsigned int v43 = 1;
LABEL_205:
          uint64_t v54 = 1;
          goto LABEL_206;
        }
        if (v266) {
          goto LABEL_208;
        }
        char v42 = v258 ^ 1;
        if (v32) {
          goto LABEL_224;
        }
        if (!+[UIKeyboard isKeyboardProcess]
          || ([(_UIKeyboardStateManager *)self inputDelegateManager],
              char v82 = objc_claimAutoreleasedReturnValue(),
              char v83 = [v82 shouldRespectForwardingInputDelegate],
              v82,
              (v83 & 1) != 0))
        {
          int v84 = (*((uint64_t (**)(void *, char *))v260 + 2))(v260, sel__moveToStartOfParagraph_withHistory_);
          LOBYTE(v43) = 0;
          *((unsigned char *)v309 + 24) = v84;
          if ((v266 & 2) == 0 && ((v84 ^ 1) & 1) == 0)
          {
            v276[0] = MEMORY[0x1E4F143A8];
            v276[1] = 3221225472;
            v276[2] = __63___UIKeyboardStateManager_handleKeyCommand_repeatOkay_options___block_invoke_9;
            v276[3] = &unk_1E52DC3D0;
            v276[4] = self;
            BOOL v278 = v13;
            id v277 = v261;
            [(_UIKeyboardStateManager *)self performBlockWithTextInputChangesIgnoredForNonMacOS:v276];
            uint64_t v62 = v277;
            goto LABEL_194;
          }
          goto LABEL_254;
        }
        if ((v266 & 2) != 0) {
          goto LABEL_250;
        }
        break;
      default:
        int v68 = 4194346;
        goto LABEL_157;
    }
    goto LABEL_249;
  }
  if ((int)v39 > 143)
  {
    if ((int)v39 > 65577)
    {
      switch((int)v39)
      {
        case 65610:
LABEL_76:
          char v42 = v258 ^ 1;
          BOOL v306 = 1;
          BOOL v46 = [(_UIKeyboardStateManager *)self handleMoveCursorToStartOfLine:v262 != 0 beforePublicKeyCommands:v266 & 1 testOnly:v41 != 0 savedHistory:v261 force:1 canHandleSelectableInputDelegateCommand:v260 keyEvent:v26];
          goto LABEL_253;
        case 65611:
        case 65612:
        case 65614:
          break;
        case 65613:
LABEL_91:
          char v42 = v258 ^ 1;
          BOOL v306 = 1;
          BOOL v46 = [(_UIKeyboardStateManager *)self handleMoveCursorToEndOfLine:v262 != 0 beforePublicKeyCommands:v266 & 1 testOnly:v41 != 0 savedHistory:v261 force:1 canHandleSelectableInputDelegateCommand:v260 keyEvent:v26];
          goto LABEL_253;
        case 65615:
LABEL_92:
          char v42 = v258 ^ 1;
          BOOL v306 = 1;
          int v52 = v259[2]();
          uint64_t v53 = v254 ^ 1;
          if (v52) {
            BOOL v46 = [(_UIKeyboardStateManager *)self handleMoveCursorToStartOfLine:v262 != 0 beforePublicKeyCommands:v266 & 1 testOnly:v41 != 0 savedHistory:v261 force:v53 canHandleSelectableInputDelegateCommand:v260 keyEvent:v26];
          }
          else {
            BOOL v46 = [(_UIKeyboardStateManager *)self handleMoveCursorToEndOfLine:v262 != 0 beforePublicKeyCommands:v266 & 1 testOnly:v41 != 0 savedHistory:v261 force:v53 canHandleSelectableInputDelegateCommand:v260 keyEvent:v26];
          }
          goto LABEL_253;
        case 65616:
LABEL_94:
          char v42 = v258 ^ 1;
          BOOL v306 = 1;
          if (v259[2]())
          {
            BOOL v46 = [(_UIKeyboardStateManager *)self handleMoveCursorToEndOfLine:v262 != 0 beforePublicKeyCommands:v266 & 1 testOnly:v41 != 0 savedHistory:v261 force:v254 ^ 1 canHandleSelectableInputDelegateCommand:v260 keyEvent:v26];
            goto LABEL_253;
          }
          id v66 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
          int v67 = [v66 isPressAndHoldPopoverPresented];

          if (v67)
          {
LABEL_200:
            id v93 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
            id v94 = [v93 pressAndHoldPopoverController];
            char v95 = [v94 handleHardwareKeyboardEvent:v26];
            *((unsigned char *)v309 + 24) = v95;

            LOBYTE(v43) = 1;
            goto LABEL_254;
          }
          BOOL v46 = [(_UIKeyboardStateManager *)self handleMoveCursorToStartOfLine:v262 != 0 beforePublicKeyCommands:v266 & 1 testOnly:v41 != 0 savedHistory:v261 force:v254 ^ 1 canHandleSelectableInputDelegateCommand:v260 keyEvent:v26];
          goto LABEL_253;
        case 65617:
LABEL_96:
          BOOL v306 = 1;
          if (v30)
          {
            char v42 = v258 ^ 1;
            unsigned int v43 = 0;
            if (v254) {
              goto LABEL_102;
            }
            goto LABEL_254;
          }
          if (v266) {
            break;
          }
          char v42 = v258 ^ 1;
          if (v32) {
            goto LABEL_224;
          }
          if (!+[UIKeyboard isKeyboardProcess]
            || ([(_UIKeyboardStateManager *)self inputDelegateManager],
                id v59 = objc_claimAutoreleasedReturnValue(),
                char v60 = [v59 shouldRespectForwardingInputDelegate],
                v59,
                (v60 & 1) != 0))
          {
            int v61 = (*((uint64_t (**)(void *, char *))v260 + 2))(v260, sel__moveToEndOfDocument_withHistory_);
            LOBYTE(v43) = 0;
            *((unsigned char *)v309 + 24) = v61;
            if ((v266 & 2) == 0 && ((v61 ^ 1) & 1) == 0)
            {
              v279[0] = MEMORY[0x1E4F143A8];
              v279[1] = 3221225472;
              v279[2] = __63___UIKeyboardStateManager_handleKeyCommand_repeatOkay_options___block_invoke_8;
              v279[3] = &unk_1E52DC3D0;
              v279[4] = self;
              BOOL v281 = v13;
              id v280 = v261;
              [(_UIKeyboardStateManager *)self performBlockWithTextInputChangesIgnoredForNonMacOS:v279];
              uint64_t v62 = v280;
              goto LABEL_194;
            }
            goto LABEL_254;
          }
          if ((v266 & 2) != 0) {
            goto LABEL_250;
          }
          goto LABEL_249;
        case 65618:
LABEL_99:
          BOOL v306 = 1;
          if (v30)
          {
            char v42 = v258 ^ 1;
            if (v254)
            {
              unsigned int v43 = 1;
LABEL_102:
              uint64_t v54 = 4;
LABEL_206:
              [(_UIKeyboardStateManager *)self movePhraseBoundaryToDirection:v43 granularity:v54];
            }
            goto LABEL_224;
          }
          if (v266) {
            break;
          }
          char v42 = v258 ^ 1;
          if (v32) {
            goto LABEL_224;
          }
          if (+[UIKeyboard isKeyboardProcess])
          {
            double v63 = [(_UIKeyboardStateManager *)self inputDelegateManager];
            char v64 = [v63 shouldRespectForwardingInputDelegate];

            if ((v64 & 1) == 0)
            {
              if ((v266 & 2) != 0) {
                goto LABEL_250;
              }
              goto LABEL_249;
            }
          }
          int v65 = (*((uint64_t (**)(void *, char *))v260 + 2))(v260, sel__moveToStartOfDocument_withHistory_);
          LOBYTE(v43) = 0;
          *((unsigned char *)v309 + 24) = v65;
          if (v266 & 2) != 0 || ((v65 ^ 1)) {
            goto LABEL_254;
          }
          v273[0] = MEMORY[0x1E4F143A8];
          v273[1] = 3221225472;
          v273[2] = __63___UIKeyboardStateManager_handleKeyCommand_repeatOkay_options___block_invoke_10;
          v273[3] = &unk_1E52DC3D0;
          v273[4] = self;
          BOOL v275 = v13;
          id v274 = v261;
          [(_UIKeyboardStateManager *)self performBlockWithTextInputChangesIgnoredForNonMacOS:v273];
          uint64_t v62 = v274;
LABEL_194:

          goto LABEL_224;
        default:
          if (v39 == 65578)
          {
LABEL_149:
            BOOL v306 = 1;
            if ((v258 & 1) == 0)
            {
              char v42 = v258 ^ 1;
              if (v266) {
                goto LABEL_209;
              }
              if (!+[UIKeyboard isKeyboardProcess]
                || ([(_UIKeyboardStateManager *)self inputDelegateManager],
                    id v71 = objc_claimAutoreleasedReturnValue(),
                    char v72 = [v71 shouldRespectForwardingInputDelegate],
                    v71,
                    (v72 & 1) != 0))
              {
                uint64_t v73 = [(_UIKeyboardStateManager *)self inputDelegateManager];
                char v74 = [v73 canHandleInputDelegateCommandAction:4];
                *((unsigned char *)v309 + 24) = v74;

                LOBYTE(v43) = 0;
                if ((v266 & 2) != 0 || !*((unsigned char *)v309 + 24)) {
                  goto LABEL_254;
                }
                goto LABEL_155;
              }
              if ((v266 & 2) == 0) {
LABEL_249:
              }
                [(_UIKeyboardStateManager *)self forwardKeyboardEventBackToDestination:v26];
LABEL_250:
              LOBYTE(v43) = 0;
              *((unsigned char *)v309 + 24) = 1;
              goto LABEL_254;
            }
LABEL_196:
            char v42 = v258 ^ 1;
            goto LABEL_224;
          }
          int v68 = 524330;
LABEL_157:
          if (v39 == v68)
          {
            BOOL v306 = 1;
            if ((v258 & 1) == 0)
            {
              char v42 = v258 ^ 1;
              if ((v266 & 1) == 0)
              {
                if (!+[UIKeyboard isKeyboardProcess]
                  || ([(_UIKeyboardStateManager *)self inputDelegateManager],
                      char v75 = objc_claimAutoreleasedReturnValue(),
                      char v76 = [v75 shouldRespectForwardingInputDelegate],
                      v75,
                      (v76 & 1) != 0))
                {
                  if (![(UITextInputTraits *)self->m_traits isSecureTextEntry]
                    || [(UITextInputTraits *)self->m_traits displaySecureTextUsingPlainText])
                  {
                    char v77 = [(_UIKeyboardStateManager *)self inputDelegateManager];
                    char v78 = [v77 canHandleInputDelegateCommandAction:2];
                    *((unsigned char *)v309 + 24) = v78;

                    LOBYTE(v43) = 0;
                    if ((v266 & 2) == 0 && *((unsigned char *)v309 + 24))
                    {
                      [(_UIKeyboardStateManager *)self setDisableSmartInsertDelete:1];
                      int v51 = [(_UIKeyboardStateManager *)self inputDelegateManager];
                      [v51 _deleteByWord];
LABEL_167:

                      [(_UIKeyboardStateManager *)self setDisableSmartInsertDelete:0];
                      LOBYTE(v43) = 0;
                    }
                    goto LABEL_254;
                  }
                  v103 = [(_UIKeyboardStateManager *)self inputDelegateManager];
                  char v104 = [v103 canHandleInputDelegateCommandAction:4];
                  *((unsigned char *)v309 + 24) = v104;

                  LOBYTE(v43) = 0;
                  if ((v266 & 2) != 0 || !*((unsigned char *)v309 + 24)) {
                    goto LABEL_254;
                  }
LABEL_155:
                  uint64_t v69 = [(_UIKeyboardStateManager *)self inputDelegateManager];
                  [v69 _deleteToStartOfLine];
                  goto LABEL_223;
                }
                if ((v266 & 2) == 0) {
                  goto LABEL_249;
                }
                goto LABEL_250;
              }
LABEL_209:
              LOBYTE(v43) = 0;
              *((unsigned char *)v309 + 24) = 0;
              goto LABEL_254;
            }
            goto LABEL_196;
          }
          break;
      }
LABEL_208:
      char v42 = v258 ^ 1;
      goto LABEL_209;
    }
    switch(v39)
    {
      case 0x90:
        char v42 = v258 ^ 1;
        if (![(_UIKeyboardStateManager *)self shouldShowKeyboardMenu]
          || [(UITextInputTraits *)self->m_traits isSecureTextEntry])
        {
          goto LABEL_224;
        }
        if ([(_UIKeyboardStateManager *)self shouldApplyKeyboardInputToUIHost])
        {
LABEL_147:
          uint64_t v69 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
          char v70 = [v69 synchronousForwardKeyCommandsBeforePublicToUIHost:v26];
          *((unsigned char *)v309 + 24) = v70;
LABEL_223:

          goto LABEL_224;
        }
        int v98 = +[UIKeyboardInputModeController sharedInputModeController];
        uint64_t v69 = [v98 inputModeLastUsedForLanguage:@"ja_JP"];

        id v99 = [v69 identifier];

        if (!v99) {
          goto LABEL_223;
        }
        break;
      case 0x91:
        char v42 = v258 ^ 1;
        if (![(_UIKeyboardStateManager *)self shouldShowKeyboardMenu]) {
          goto LABEL_224;
        }
        if ([(_UIKeyboardStateManager *)self shouldApplyKeyboardInputToUIHost]) {
          goto LABEL_147;
        }
        BOOL v96 = +[UIKeyboardInputModeController sharedInputModeController];
        uint64_t v69 = [v96 inputModeLastUsedForLanguage:@"ASCIICapable"];

        v97 = [v69 identifier];

        if (!v97) {
          goto LABEL_223;
        }
        break;
      case 0x9C:
        char v42 = v258 ^ 1;
        *((unsigned char *)v309 + 24) = 1;
        [(_UIKeyboardStateManager *)self handleClear];
LABEL_224:
        LOBYTE(v43) = 0;
        goto LABEL_254;
      default:
        goto LABEL_208;
    }
    BOOL v100 = [v69 identifier];
    [(_UIKeyboardStateManager *)self switchMode:v100 withHUD:0 withDelay:0 fromCapsLock:0];

    goto LABEL_223;
  }
  switch((int)v39)
  {
    case 'J':
    case 'K':
    case 'M':
    case 'N':
      char v42 = v258 ^ 1;
      LOBYTE(v43) = 0;
      int v44 = ![(_UIKeyboardStateManager *)self _delegateRequiresKeyEvents];
      if ((v266 & 2) != 0) {
        LOBYTE(v44) = 0;
      }
      *((unsigned char *)v309 + 24) = v44;
      goto LABEL_254;
    case 'L':
      BOOL v306 = 1;
      if (v252) {
        goto LABEL_196;
      }
      if (v253) {
        goto LABEL_208;
      }
      char v42 = v258 ^ 1;
      if ((v266 & 2) != 0) {
        BOOL v46 = [(_UIKeyboardStateManager *)self _canDeleteForward];
      }
      else {
        BOOL v46 = [(_UIKeyboardStateManager *)self deleteForwardAndNotify:1 producedByDeleteInput:1];
      }
      break;
    case 'O':
      char v42 = v258 ^ 1;
      BOOL v306 = 1;
      id v89 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      int v90 = [v89 isPressAndHoldPopoverPresented];

      if (v90) {
        goto LABEL_200;
      }
      if (((v34 | v252 ^ 1) & 1) == 0) {
        LOBYTE(v34) = [(_UIKeyboardStateManager *)self cursorIsAtEndOfMarkedText];
      }
      LOBYTE(v250) = v34;
      BOOL v46 = -[_UIKeyboardStateManager handleHorizontalArrow:shiftDown:beforePublicKeyCommands:testOnly:isVerticalCandidate:hasCandidatesForTypedInput:shouldNavigateCandidateList:canHandleInputDelegateCommand:savedHistory:keyCommandTypeHandled:keyEvent:](self, "handleHorizontalArrow:shiftDown:beforePublicKeyCommands:testOnly:isVerticalCandidate:hasCandidatesForTypedInput:shouldNavigateCandidateList:canHandleInputDelegateCommand:savedHistory:keyCommandTypeHandled:keyEvent:", 1, v262 != 0, v266 & 1, v41 != 0, v254, v250, v257, v261, &v307, v26);
      break;
    case 'P':
      char v42 = v258 ^ 1;
      BOOL v306 = 1;
      id v91 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      int v92 = [v91 isPressAndHoldPopoverPresented];

      if (v92) {
        goto LABEL_200;
      }
      if (((v34 | v252 ^ 1) & 1) == 0) {
        LOBYTE(v34) = [(_UIKeyboardStateManager *)self cursorIsAtEndOfMarkedText]
      }
                   && [(UIKeyboardCandidateList *)self->m_candidateList currentIndex] != 0x7FFFFFFFFFFFFFFFLL
                   && [(UIKeyboardCandidateList *)self->m_candidateList currentIndex] != 0;
      LOBYTE(v250) = v34;
      BOOL v46 = -[_UIKeyboardStateManager handleHorizontalArrow:shiftDown:beforePublicKeyCommands:testOnly:isVerticalCandidate:hasCandidatesForTypedInput:shouldNavigateCandidateList:canHandleInputDelegateCommand:savedHistory:keyCommandTypeHandled:keyEvent:](self, "handleHorizontalArrow:shiftDown:beforePublicKeyCommands:testOnly:isVerticalCandidate:hasCandidatesForTypedInput:shouldNavigateCandidateList:canHandleInputDelegateCommand:savedHistory:keyCommandTypeHandled:keyEvent:", 0, v262 != 0, v266 & 1, v41 != 0, v254, v250, v257, v261, &v307, v26);
      break;
    case 'Q':
      BOOL v306 = 1;
      char v42 = v258 ^ 1;
      LOBYTE(v250) = v258 ^ 1;
      BOOL v46 = [(_UIKeyboardStateManager *)self handleVerticalArrow:1 shiftDown:v262 != 0 beforePublicKeyCommands:v266 & 1 testOnly:v41 != 0 isVerticalCandidate:v254 hasCandidatesForTypedInput:v251 inputDelegateCommandEnabled:v250 canHandleInputDelegateCommand:v257 savedHistory:v261 keyCommandTypeHandled:&v307 keyEvent:v26];
      break;
    case 'R':
      BOOL v306 = 1;
      char v42 = v258 ^ 1;
      LOBYTE(v250) = v258 ^ 1;
      BOOL v46 = [(_UIKeyboardStateManager *)self handleVerticalArrow:0 shiftDown:v262 != 0 beforePublicKeyCommands:v266 & 1 testOnly:v41 != 0 isVerticalCandidate:v254 hasCandidatesForTypedInput:v251 inputDelegateCommandEnabled:v250 canHandleInputDelegateCommand:v257 savedHistory:v261 keyCommandTypeHandled:&v307 keyEvent:v26];
      break;
    default:
      switch((int)v39)
      {
        case ')':
          char v42 = v258 ^ 1;
          BOOL v46 = [(_UIKeyboardStateManager *)self _cancelOperation:v266 & 1 testOnly:v41 != 0];
          goto LABEL_253;
        case '+':
          char v42 = v258 ^ 1;
          BOOL v306 = 1;
          BOOL v46 = [(_UIKeyboardStateManager *)self handleTabWithShift:v262 != 0 beforePublicKeyCommands:v266 & 1 isMoveAction:0 testOnly:v41 != 0];
          goto LABEL_253;
        case '-':
        case '/':
          char v42 = v258 ^ 1;
          BOOL v306 = 1;
          if (!v252) {
            goto LABEL_209;
          }
          if (![(_UIKeyboardStateManager *)self shouldUsePinyinStyleRowNavigation]) {
            goto LABEL_209;
          }
          uint64_t v307 = 2;
          if (v11 == 45
            && (([(UIKeyboardCandidateList *)self->m_candidateList isExtendedList] | v254) & 1) == 0)
          {
            goto LABEL_209;
          }
          uint64_t v45 = v254;
          if ((v266 & 2) != 0) {
            goto LABEL_224;
          }
          goto LABEL_107;
        case '.':
        case '0':
          char v42 = v258 ^ 1;
          BOOL v306 = 1;
          if (!v252
            || ![(_UIKeyboardStateManager *)self shouldUsePinyinStyleRowNavigation])
          {
            goto LABEL_209;
          }
          uint64_t v307 = 2;
          if ((v266 & 2) != 0) {
            goto LABEL_224;
          }
          uint64_t v45 = v254 ^ 1;
LABEL_107:
          [(UIKeyboardCandidateList *)self->m_candidateList showCandidateInForwardDirection:v45 granularity:1];
          break;
        default:
          goto LABEL_208;
      }
      goto LABEL_224;
  }
LABEL_253:
  LOBYTE(v43) = 0;
  *((unsigned char *)v309 + 24) = v46;
LABEL_254:
  if (!*((unsigned char *)v309 + 24))
  {
    id v105 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    int v106 = [v105 isPressAndHoldPopoverPresented];

    if (v106)
    {
      id v107 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      int v108 = [v107 pressAndHoldPopoverController];
      char v109 = [v108 handleHardwareKeyboardEvent:v26];
      *((unsigned char *)v309 + 24) = v109;

      LOBYTE(v43) = 1;
    }
  }
  if (*((unsigned char *)v309 + 24))
  {
LABEL_258:
    int v110 = 1;
    goto LABEL_263;
  }
  id v111 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  char v112 = [v111 isEmojiPopoverPresented];

  if (v112)
  {
    id v113 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    v114 = [v113 emojiPopoverController];
    char v115 = [v114 handleHardwareKeyboardEvent:v26];
    *((unsigned char *)v309 + 24) = v115;

    if (!*((unsigned char *)v309 + 24)) {
      goto LABEL_268;
    }
    uint64_t v307 = 3;
    goto LABEL_258;
  }
  int v110 = *((unsigned __int8 *)v309 + 24);
LABEL_263:
  char v116 = v43 ^ 1;
  if (!v110) {
    char v116 = 1;
  }
  if (v116)
  {
    if (v110)
    {
LABEL_607:
      if (v307 != 2) {
        goto LABEL_610;
      }
      goto LABEL_608;
    }
LABEL_268:
    BOOL v117 = [(_UIKeyboardStateManager *)self handleInputManagerBasedKeybind:v26 testOnly:v41 != 0];
    *((unsigned char *)v309 + 24) = v117;
    if (v117)
    {
      uint64_t v307 = 2;
LABEL_608:
      if ([(_UIKeyboardStateManager *)self usesCandidateSelection]) {
        goto LABEL_610;
      }
LABEL_609:
      uint64_t v307 = 0;
      goto LABEL_610;
    }
    v118 = [v26 _commandModifiedInput];
    char v119 = v118;
    if (v118)
    {
      id v120 = v118;
    }
    else
    {
      id v120 = [v26 _modifiedInput];
    }
    int v121 = [MEMORY[0x1E4FA8AA0] sharedInstance];
    v271[0] = MEMORY[0x1E4F143A8];
    v271[1] = 3221225472;
    v271[2] = __63___UIKeyboardStateManager_handleKeyCommand_repeatOkay_options___block_invoke_11;
    v271[3] = &unk_1E52DCC28;
    id v122 = v120;
    id v272 = v122;
    [v121 logBlock:v271 domain:@"com.apple.keyboard.UIKit"];

    v123 = v122;
    if ([v122 length]) {
      unsigned int v124 = [v122 characterAtIndex:0];
    }
    else {
      unsigned int v124 = 0;
    }
    int v125 = v264 & 0x5FB0000 | v124;
    v126 = v309;
    *((unsigned char *)v309 + 24) = 1;
    if (v125 <= 16777280)
    {
      if (v125 > 65632)
      {
        if (v125 <= 65653)
        {
          if (v125 != 65633)
          {
            unsigned __int16 v127 = 99;
            goto LABEL_288;
          }
          goto LABEL_299;
        }
        if (v125 != 65654)
        {
          unsigned __int16 v138 = 120;
          goto LABEL_311;
        }
      }
      else
      {
        if (v125 <= 65621)
        {
          if (v125 != 65601)
          {
            unsigned __int16 v127 = 67;
LABEL_288:
            int v129 = v127 | 0x10000;
LABEL_293:
            if (v125 == v129 && !v253)
            {
              if (!+[UIKeyboard isKeyboardProcess]
                || ([(_UIKeyboardStateManager *)self inputDelegateManager],
                    uint64_t v130 = objc_claimAutoreleasedReturnValue(),
                    char v131 = [v130 shouldRespectForwardingInputDelegate],
                    v130,
                    (v131 & 1) != 0))
              {
                v132 = [(_UIKeyboardStateManager *)self delegateAsResponder];
                if (v132) {
                  BOOL v133 = [(_UIKeyboardStateManager *)self _canHandleResponderCommand:sel_copy_];
                }
                else {
                  BOOL v133 = 0;
                }
                *((unsigned char *)v309 + 24) = v133;

                if ((v266 & 2) == 0 && *((unsigned char *)v309 + 24))
                {
                  v202 = [(_UIKeyboardStateManager *)self delegateAsResponder];
                  uint64_t v203 = [v202 _dataOwnerForCopy];
                  v270[0] = MEMORY[0x1E4F143A8];
                  v270[1] = 3221225472;
                  v270[2] = __63___UIKeyboardStateManager_handleKeyCommand_repeatOkay_options___block_invoke_12;
                  v270[3] = &unk_1E52D9F70;
                  v270[4] = self;
                  +[UIPasteboard _performAsDataOwner:v203 block:v270];

                  +[UIKBAnalyticsDispatcher analyticsDispatchEventTextEditingOperation:@"Copy" trigger:@"HWKeyboard"];
                }
                goto LABEL_323;
              }
              if ((v266 & 2) == 0) {
                goto LABEL_464;
              }
LABEL_465:
              *((unsigned char *)v309 + 24) = 1;
              goto LABEL_323;
            }
LABEL_322:
            *((unsigned char *)v126 + 24) = 0;
            goto LABEL_323;
          }
          goto LABEL_299;
        }
        if (v125 != 65622)
        {
          unsigned __int16 v138 = 88;
LABEL_311:
          int v140 = v138 | 0x10000;
          goto LABEL_315;
        }
      }
LABEL_321:
      BOOL v306 = 1;
      if (v253) {
        goto LABEL_322;
      }
      if (!+[UIKeyboard isKeyboardProcess]
        || (([(_UIKeyboardStateManager *)self inputDelegateManager],
             v163 = objc_claimAutoreleasedReturnValue(),
             char v164 = [v163 shouldRespectForwardingInputDelegate],
             (v266 & 2) != 0)
          ? (char v165 = 1)
          : (char v165 = v164),
            v163,
            (v165 & 1) != 0))
      {
        int v166 = [(_UIKeyboardStateManager *)self delegateAsResponder];
        if (v166) {
          BOOL v167 = [(_UIKeyboardStateManager *)self _canHandleResponderCommand:sel_paste_];
        }
        else {
          BOOL v167 = 0;
        }
        *((unsigned char *)v309 + 24) = v167;

        if ((v266 & 2) == 0 && *((unsigned char *)v309 + 24))
        {
          id v206 = [(_UIKeyboardStateManager *)self acceptCurrentCandidate];
          v207 = [(_UIKeyboardStateManager *)self delegateAsResponder];
          uint64_t v208 = [v207 _dataOwnerForPaste];
          v269[0] = MEMORY[0x1E4F143A8];
          v269[1] = 3221225472;
          v269[2] = __63___UIKeyboardStateManager_handleKeyCommand_repeatOkay_options___block_invoke_13;
          v269[3] = &unk_1E52D9F70;
          v269[4] = self;
          +[UIPasteboard _performAsDataOwner:v208 block:v269];

          +[UIKBAnalyticsDispatcher analyticsDispatchEventTextEditingOperation:@"Paste" trigger:@"HWKeyboard"];
        }
        goto LABEL_323;
      }
LABEL_464:
      [(_UIKeyboardStateManager *)self forwardKeyboardEventBackToDestination:v26];
      goto LABEL_465;
    }
    if (v125 > 16777312)
    {
      if (v125 <= 16777333)
      {
        if (v125 != 16777313)
        {
          unsigned __int16 v128 = 99;
          goto LABEL_292;
        }
LABEL_299:
        if (v252) {
          goto LABEL_323;
        }
        if (v253) {
          goto LABEL_322;
        }
        if (+[UIKeyboard isKeyboardProcess])
        {
          v134 = [(_UIKeyboardStateManager *)self inputDelegateManager];
          char v135 = [v134 shouldRespectForwardingInputDelegate];

          if ((v135 & 1) == 0)
          {
            if ((v266 & 2) != 0) {
              goto LABEL_465;
            }
            goto LABEL_464;
          }
        }
        v136 = [(_UIKeyboardStateManager *)self delegateAsResponder];
        if (v136) {
          BOOL v137 = [(_UIKeyboardStateManager *)self _canHandleResponderCommandConservatively:sel_selectAll_];
        }
        else {
          BOOL v137 = 0;
        }
        *((unsigned char *)v309 + 24) = v137;

        if ((v266 & 2) == 0 && *((unsigned char *)v309 + 24))
        {
          v236 = [(_UIKeyboardStateManager *)self _targetForResponderCommand:sel_selectAll_];
          [v236 selectAll:0];
        }
LABEL_323:
        uint64_t v145 = v266 & 2;
        uint64_t v146 = v264 & 0x5D90000 | v124;
        if (*((unsigned char *)v309 + 24)) {
          goto LABEL_324;
        }
        if ((int)v146 > 17301589)
        {
          if ((int)v146 > 20971605)
          {
            if (v146 == 20971638) {
              goto LABEL_389;
            }
            int v150 = 20971606;
          }
          else
          {
            if (v146 == 17301590) {
              goto LABEL_389;
            }
            int v150 = 17301622;
          }
        }
        else if ((int)v146 > 4259925)
        {
          if (v146 == 4259926) {
            goto LABEL_389;
          }
          int v150 = 4259958;
        }
        else
        {
          if (v146 == 589910) {
            goto LABEL_389;
          }
          int v150 = 589942;
        }
        if (v146 != v150)
        {
          int v177 = 0;
          *((unsigned char *)v309 + 24) = 0;
          goto LABEL_470;
        }
LABEL_389:
        int v177 = v262;
        if (v262)
        {
          BOOL v306 = 1;
          if (v253)
          {
            *((unsigned char *)v309 + 24) = 0;
            goto LABEL_324;
          }
          if (+[UIKeyboard isKeyboardProcess])
          {
            v178 = [(_UIKeyboardStateManager *)self inputDelegateManager];
            char v179 = [v178 shouldRespectForwardingInputDelegate];
            char v180 = (v266 & 2) != 0 ? 1 : v179;

            if ((v180 & 1) == 0)
            {
              [(_UIKeyboardStateManager *)self forwardKeyboardEventBackToDestination:v26];
              goto LABEL_560;
            }
          }
          BOOL v181 = [(_UIKeyboardStateManager *)self delegateAsResponder];
          if (v181) {
            BOOL v182 = [(_UIKeyboardStateManager *)self _canHandleResponderCommand:sel_pasteAndMatchStyle_];
          }
          else {
            BOOL v182 = 0;
          }
          *((unsigned char *)v309 + 24) = v182;

          int v177 = *((unsigned __int8 *)v309 + 24);
          if ((v266 & 2) == 0 && *((unsigned char *)v309 + 24))
          {
            id v209 = [(_UIKeyboardStateManager *)self acceptCurrentCandidate];
            v210 = [(_UIKeyboardStateManager *)self delegateAsResponder];
            uint64_t v211 = [v210 _dataOwnerForPaste];
            v267[0] = MEMORY[0x1E4F143A8];
            v267[1] = 3221225472;
            v267[2] = __63___UIKeyboardStateManager_handleKeyCommand_repeatOkay_options___block_invoke_15;
            v267[3] = &unk_1E52D9F70;
            v267[4] = self;
            +[UIPasteboard _performAsDataOwner:v211 block:v267];

            +[UIKBAnalyticsDispatcher analyticsDispatchEventTextEditingOperation:@"Paste" trigger:@"HWKeyboard"];
            int v177 = *((unsigned __int8 *)v309 + 24);
          }
        }
LABEL_470:
        if (v266 & 1 | (v177 != 0)) {
          int v212 = 0;
        }
        else {
          int v212 = v264 & 0x5FB0000 | v124;
        }
        if (v212 <= 16777281)
        {
          if (v212 > 65633)
          {
            if (v212 <= 65640)
            {
              if (v212 != 65634)
              {
                unsigned __int16 v213 = 101;
                goto LABEL_485;
              }
LABEL_495:
              if (!+[UIKeyboard isKeyboardProcess]
                || ([(_UIKeyboardStateManager *)self inputDelegateManager],
                    v220 = objc_claimAutoreleasedReturnValue(),
                    char v221 = [v220 shouldRespectForwardingInputDelegate],
                    v220,
                    (v221 & 1) != 0))
              {
                v222 = [(_UIKeyboardStateManager *)self delegateAsResponder];
                if (v222) {
                  BOOL v223 = [(_UIKeyboardStateManager *)self _canHandleResponderCommand:sel_toggleBoldface_];
                }
                else {
                  BOOL v223 = 0;
                }
                *((unsigned char *)v309 + 24) = v223;

                if ((v266 & 2) == 0 && *((unsigned char *)v309 + 24))
                {
                  v237 = [(_UIKeyboardStateManager *)self _targetForResponderCommand:sel_toggleBoldface_];
                  [v237 toggleBoldface:0];
                  goto LABEL_553;
                }
                goto LABEL_324;
              }
              [(_UIKeyboardStateManager *)self performOnInputSourceSessionActionSelector:sel_toggleBoldface_];
              goto LABEL_560;
            }
            if (v212 != 65641)
            {
              unsigned __int16 v224 = 117;
              goto LABEL_505;
            }
          }
          else
          {
            if (v212 <= 65608)
            {
              if (v212 != 65602)
              {
                unsigned __int16 v213 = 69;
LABEL_485:
                int v215 = v213 | 0x10000;
LABEL_490:
                if (v212 != v215) {
                  goto LABEL_324;
                }
                if (!+[UIKeyboard isKeyboardProcess]
                  || ([(_UIKeyboardStateManager *)self inputDelegateManager],
                      v216 = objc_claimAutoreleasedReturnValue(),
                      char v217 = [v216 shouldRespectForwardingInputDelegate],
                      v216,
                      (v217 & 1) != 0))
                {
                  v218 = [(_UIKeyboardStateManager *)self delegateAsResponder];
                  if (v218) {
                    BOOL v219 = [(_UIKeyboardStateManager *)self _canHandleResponderCommand:sel_useSelectionForFind_];
                  }
                  else {
                    BOOL v219 = 0;
                  }
                  *((unsigned char *)v309 + 24) = v219;

                  if ((v266 & 2) == 0 && *((unsigned char *)v309 + 24))
                  {
                    v237 = [(_UIKeyboardStateManager *)self _targetForResponderCommand:sel_useSelectionForFind_];
                    [v237 useSelectionForFind:0];
LABEL_553:

                    goto LABEL_324;
                  }
                  goto LABEL_324;
                }
                [(_UIKeyboardStateManager *)self performOnInputSourceSessionActionSelector:sel_useSelectionForFind_];
                goto LABEL_560;
              }
              goto LABEL_495;
            }
            if (v212 != 65609)
            {
              unsigned __int16 v224 = 85;
LABEL_505:
              int v226 = v224 | 0x10000;
LABEL_509:
              if (v212 != v226) {
                goto LABEL_324;
              }
              if (!+[UIKeyboard isKeyboardProcess]
                || ([(_UIKeyboardStateManager *)self inputDelegateManager],
                    v227 = objc_claimAutoreleasedReturnValue(),
                    char v228 = [v227 shouldRespectForwardingInputDelegate],
                    v227,
                    (v228 & 1) != 0))
              {
                v229 = [(_UIKeyboardStateManager *)self delegateAsResponder];
                if (v229) {
                  BOOL v230 = [(_UIKeyboardStateManager *)self _canHandleResponderCommand:sel_toggleUnderline_];
                }
                else {
                  BOOL v230 = 0;
                }
                *((unsigned char *)v309 + 24) = v230;

                if ((v266 & 2) == 0 && *((unsigned char *)v309 + 24))
                {
                  v237 = [(_UIKeyboardStateManager *)self _targetForResponderCommand:sel_toggleUnderline_];
                  [v237 toggleUnderline:0];
                  goto LABEL_553;
                }
LABEL_324:
                v147 = v309;
                char v148 = *((unsigned char *)v309 + 24);
                *((unsigned char *)v309 + 24) = 1;
                if ((int)v146 > 0x800000)
                {
                  if ((int)v146 <= 16777285)
                  {
                    switch((int)v146)
                    {
                      case 8388609:
LABEL_340:
                        BOOL v306 = 1;
                        if (v258) {
                          goto LABEL_595;
                        }
                        if (v266) {
                          goto LABEL_532;
                        }
                        if (!+[UIKeyboard isKeyboardProcess]
                          || ([(_UIKeyboardStateManager *)self inputDelegateManager],
                              v151 = objc_claimAutoreleasedReturnValue(),
                              char v152 = [v151 shouldRespectForwardingInputDelegate],
                              v151,
                              (v152 & 1) != 0))
                        {
                          int v153 = v257[2](v257, sel__moveToStartOfLine_withHistory_);
                          *((unsigned char *)v309 + 24) = v153;
                          if ((v266 & 2) == 0 && ((v153 ^ 1) & 1) == 0)
                          {
                            self->m_textInputChangesIgnored = 1;
                            v154 = [(_UIKeyboardStateManager *)self inputDelegateManager];
                            char v155 = [v154 _moveToStartOfLine:v262 != 0 withHistory:v261];
                            [(_UIKeyboardStateManager *)self setArrowKeyHistory:v155];
                            goto LABEL_439;
                          }
                          goto LABEL_595;
                        }
                        if ((v266 & 2) != 0) {
                          goto LABEL_570;
                        }
                        goto LABEL_569;
                      case 8388610:
LABEL_412:
                        BOOL v306 = 1;
                        LOBYTE(v250) = v252;
                        BOOL v187 = -[_UIKeyboardStateManager handleHorizontalArrow:shiftDown:beforePublicKeyCommands:testOnly:isVerticalCandidate:hasCandidatesForTypedInput:shouldNavigateCandidateList:canHandleInputDelegateCommand:savedHistory:keyCommandTypeHandled:keyEvent:](self, "handleHorizontalArrow:shiftDown:beforePublicKeyCommands:testOnly:isVerticalCandidate:hasCandidatesForTypedInput:shouldNavigateCandidateList:canHandleInputDelegateCommand:savedHistory:keyCommandTypeHandled:keyEvent:", v254, v262 != 0, v266 & 1, v145 != 0, v254, v250, v257, v261, &v307, v26);
                        goto LABEL_573;
                      case 8388611:
                      case 8388615:
                      case 8388616:
                      case 8388617:
                      case 8388618:
                      case 8388620:
                      case 8388621:
                      case 8388625:
                      case 8388626:
                      case 8388627:
                        goto LABEL_571;
                      case 8388612:
LABEL_413:
                        BOOL v306 = 1;
                        if (v252) {
                          goto LABEL_595;
                        }
                        if (v266)
                        {
                          BOOL v187 = 0;
                        }
                        else
                        {
                          BOOL v187 = [(_UIKeyboardStateManager *)self deleteForwardAndNotify:1];
LABEL_573:
                          v147 = v309;
                        }
                        *((unsigned char *)v147 + 24) = v187;
                        goto LABEL_595;
                      case 8388613:
LABEL_416:
                        BOOL v306 = 1;
                        if (v258) {
                          goto LABEL_595;
                        }
                        if (v266) {
                          goto LABEL_532;
                        }
                        if (!+[UIKeyboard isKeyboardProcess]
                          || ([(_UIKeyboardStateManager *)self inputDelegateManager],
                              id v188 = objc_claimAutoreleasedReturnValue(),
                              char v189 = [v188 shouldRespectForwardingInputDelegate],
                              v188,
                              (v189 & 1) != 0))
                        {
                          int v190 = v257[2](v257, sel__moveToEndOfLine_withHistory_);
                          *((unsigned char *)v309 + 24) = v190;
                          if ((v266 & 2) == 0 && ((v190 ^ 1) & 1) == 0)
                          {
                            self->m_textInputChangesIgnored = 1;
                            v154 = [(_UIKeyboardStateManager *)self inputDelegateManager];
                            char v155 = [v154 _moveToEndOfLine:v262 != 0 withHistory:v261];
                            [(_UIKeyboardStateManager *)self setArrowKeyHistory:v155];
                            goto LABEL_439;
                          }
                          goto LABEL_595;
                        }
                        if ((v266 & 2) != 0) {
                          goto LABEL_570;
                        }
                        goto LABEL_569;
                      case 8388614:
LABEL_423:
                        BOOL v306 = 1;
                        LOBYTE(v250) = v252;
                        BOOL v187 = -[_UIKeyboardStateManager handleHorizontalArrow:shiftDown:beforePublicKeyCommands:testOnly:isVerticalCandidate:hasCandidatesForTypedInput:shouldNavigateCandidateList:canHandleInputDelegateCommand:savedHistory:keyCommandTypeHandled:keyEvent:](self, "handleHorizontalArrow:shiftDown:beforePublicKeyCommands:testOnly:isVerticalCandidate:hasCandidatesForTypedInput:shouldNavigateCandidateList:canHandleInputDelegateCommand:savedHistory:keyCommandTypeHandled:keyEvent:", v254 ^ 1, v262 != 0, v266 & 1, v145 != 0, v250, v257, v261, &v307, v26);
                        goto LABEL_573;
                      case 8388619:
LABEL_424:
                        BOOL v306 = 1;
                        if (v258) {
                          goto LABEL_595;
                        }
                        if (v266) {
                          goto LABEL_532;
                        }
                        if (!+[UIKeyboard isKeyboardProcess]
                          || ([(_UIKeyboardStateManager *)self inputDelegateManager],
                              __int16 v191 = objc_claimAutoreleasedReturnValue(),
                              char v192 = [v191 shouldRespectForwardingInputDelegate],
                              v191,
                              (v192 & 1) != 0))
                        {
                          __int16 v193 = [(_UIKeyboardStateManager *)self inputDelegateManager];
                          char v194 = [v193 canHandleInputDelegateCommandAction:6];
                          *((unsigned char *)v309 + 24) = v194;

                          if ((v266 & 2) == 0 && *((unsigned char *)v309 + 24))
                          {
                            v160 = [(_UIKeyboardStateManager *)self inputDelegateManager];
                            [v160 _deleteToEndOfParagraph];
                            goto LABEL_594;
                          }
                          goto LABEL_595;
                        }
                        if ((v266 & 2) != 0) {
                          goto LABEL_570;
                        }
                        goto LABEL_569;
                      case 8388622:
LABEL_431:
                        BOOL v306 = 1;
                        LOBYTE(v250) = v42;
                        BOOL v187 = [(_UIKeyboardStateManager *)self handleVerticalArrow:1 shiftDown:0 beforePublicKeyCommands:v266 & 1 testOnly:v145 != 0 isVerticalCandidate:v254 hasCandidatesForTypedInput:v251 inputDelegateCommandEnabled:v250 canHandleInputDelegateCommand:v257 savedHistory:v261 keyCommandTypeHandled:&v307 keyEvent:v26];
                        goto LABEL_573;
                      case 8388623:
LABEL_432:
                        BOOL v306 = 1;
                        if (v258) {
                          goto LABEL_595;
                        }
                        if (v266) {
                          goto LABEL_532;
                        }
                        if (!+[UIKeyboard isKeyboardProcess]
                          || ([(_UIKeyboardStateManager *)self inputDelegateManager],
                              __int16 v195 = objc_claimAutoreleasedReturnValue(),
                              char v196 = [v195 shouldRespectForwardingInputDelegate],
                              v195,
                              (v196 & 1) != 0))
                        {
                          int v197 = v257[2](v257, sel__moveLeft_withHistory_);
                          *((unsigned char *)v309 + 24) = v197;
                          if ((v266 & 2) == 0 && ((v197 ^ 1) & 1) == 0)
                          {
                            [(_UIKeyboardStateManager *)self insertTextIfShould:@"\n"];
                            self->m_textInputChangesIgnored = 1;
                            v154 = [(_UIKeyboardStateManager *)self inputDelegateManager];
                            char v155 = [v154 _moveLeft:0 withHistory:v261];
                            [(_UIKeyboardStateManager *)self setArrowKeyHistory:v155];
LABEL_439:

                            self->m_textInputChangesIgnored = 0;
                          }
                          goto LABEL_595;
                        }
                        if ((v266 & 2) != 0) {
                          goto LABEL_570;
                        }
                        goto LABEL_569;
                      case 8388624:
LABEL_440:
                        BOOL v306 = 1;
                        LOBYTE(v250) = v42;
                        BOOL v187 = [(_UIKeyboardStateManager *)self handleVerticalArrow:0 shiftDown:0 beforePublicKeyCommands:v266 & 1 testOnly:v145 != 0 isVerticalCandidate:v254 hasCandidatesForTypedInput:v251 inputDelegateCommandEnabled:v250 canHandleInputDelegateCommand:v257 savedHistory:v261 keyCommandTypeHandled:&v307 keyEvent:v26];
                        goto LABEL_573;
                      case 8388628:
LABEL_441:
                        BOOL v306 = 1;
                        if (v258) {
                          goto LABEL_595;
                        }
                        if (v266) {
                          goto LABEL_532;
                        }
                        if (!+[UIKeyboard isKeyboardProcess]
                          || ([(_UIKeyboardStateManager *)self inputDelegateManager],
                              v198 = objc_claimAutoreleasedReturnValue(),
                              char v199 = [v198 shouldRespectForwardingInputDelegate],
                              v198,
                              (v199 & 1) != 0))
                        {
                          v200 = [(_UIKeyboardStateManager *)self inputDelegateManager];
                          char v201 = [v200 canHandleInputDelegateCommandAction:0];
                          *((unsigned char *)v309 + 24) = v201;

                          if ((v266 & 2) == 0 && *((unsigned char *)v309 + 24))
                          {
                            v160 = [(_UIKeyboardStateManager *)self inputDelegateManager];
                            [v160 transposeCharacters];
                            goto LABEL_594;
                          }
                          goto LABEL_595;
                        }
                        if ((v266 & 2) != 0) {
                          goto LABEL_570;
                        }
                        break;
                      default:
                        if (v146 == 8388640) {
                          goto LABEL_526;
                        }
                        goto LABEL_571;
                    }
                    goto LABEL_569;
                  }
                  if ((int)v146 > 17301573)
                  {
                    if ((int)v146 > 20971589)
                    {
                      if (v146 == 20971622) {
                        goto LABEL_407;
                      }
                      int v168 = 20971590;
                    }
                    else
                    {
                      if (v146 == 17301574) {
                        goto LABEL_407;
                      }
                      int v168 = 17301606;
                    }
                    goto LABEL_406;
                  }
                  char v149 = v124 - 70;
                  if ((v146 - 16777286) > 0x34) {
                    goto LABEL_571;
                  }
                  if (((1 << v149) & 0x100000001) == 0)
                  {
                    if (((1 << v149) & 0x200000002) == 0)
                    {
                      if (((1 << v149) & 0x10000000100000) == 0) {
                        goto LABEL_571;
                      }
LABEL_351:
                      if (v253) {
                        goto LABEL_532;
                      }
                      if (!+[UIKeyboard isKeyboardProcess]
                        || ([(_UIKeyboardStateManager *)self inputDelegateManager],
                            v157 = objc_claimAutoreleasedReturnValue(),
                            char v158 = [v157 shouldRespectForwardingInputDelegate],
                            v157,
                            (v158 & 1) != 0))
                      {
                        v159 = [(_UIKeyboardStateManager *)self _targetForResponderCommand:sel_undoManager];
                        v160 = [v159 undoManager];

                        if (!v160)
                        {
                          *((unsigned char *)v309 + 24) = 0;
                          goto LABEL_594;
                        }
                        if (v262)
                        {
                          int v161 = [v160 canRedo];
                          if (v266 & 2) != 0 || ((v161 ^ 1)) {
                            goto LABEL_583;
                          }
                          [v160 redo];
                          v162 = UIKBAnalyticsTextEditingOperationRedo;
                        }
                        else
                        {
                          int v240 = [v160 canUndo];
                          if (v266 & 2) != 0 || ((v240 ^ 1)) {
                            goto LABEL_583;
                          }
                          [v160 undo];
                          v162 = UIKBAnalyticsTextEditingOperationUndo;
                        }
                        +[UIKBAnalyticsDispatcher analyticsDispatchEventTextEditingOperation:*v162 trigger:@"HWKeyboard"];
LABEL_583:
                        v241 = [(_UIKeyboardStateManager *)self delegateAsResponder];
                        *((unsigned char *)v309 + 24) = v241 != 0;

                        goto LABEL_594;
                      }
                      if ((v266 & 2) == 0) {
LABEL_569:
                      }
                        [(_UIKeyboardStateManager *)self forwardKeyboardEventBackToDestination:v26];
LABEL_570:
                      v147 = v309;
                      char v148 = 1;
                      goto LABEL_571;
                    }
                    goto LABEL_378;
                  }
                }
                else
                {
                  if ((int)v146 > 0x100000)
                  {
                    if ((int)v146 <= 1048607)
                    {
                      switch((int)v146)
                      {
                        case 1048577:
                          goto LABEL_340;
                        case 1048578:
                          goto LABEL_412;
                        case 1048580:
                          goto LABEL_413;
                        case 1048581:
                          goto LABEL_416;
                        case 1048582:
                          goto LABEL_423;
                        case 1048587:
                          goto LABEL_424;
                        case 1048590:
                          goto LABEL_431;
                        case 1048591:
                          goto LABEL_432;
                        case 1048592:
                          goto LABEL_440;
                        case 1048596:
                          goto LABEL_441;
                        default:
                          goto LABEL_571;
                      }
                    }
                    if (v146 != 1048608)
                    {
                      if (v146 == 4259910) {
                        goto LABEL_407;
                      }
                      int v168 = 4259942;
                      goto LABEL_406;
                    }
LABEL_526:
                    if ([(_UIKeyboardStateManager *)self shouldShowKeyboardMenu]
                      && ((UIKeyboardGetSafeDeviceIdiom() & 0xFFFFFFFFFFFFFFFBLL) != 1
                       || [(id)UIApp _areKeyboardHUDsEnabled]))
                    {
                      [v26 setKeyCommandCode:v146];
                      if ([(_UIKeyboardStateManager *)self shouldApplyKeyboardCommandToUIHost])
                      {
                        v160 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
                        char v235 = [v160 synchronousForwardKeyCommandsBeforePublicToUIHost:v26];
                      }
                      else
                      {
                        v160 = +[UIInputSwitcher sharedInstance];
                        char v235 = [v160 handleSwitchCommand:v262 != 0 withHUD:1 withDelay:1];
                      }
                      *((unsigned char *)v309 + 24) = v235;
                      goto LABEL_594;
                    }
LABEL_531:
                    v147 = v309;
                    goto LABEL_532;
                  }
                  char v156 = v124 - 70;
                  if ((v146 - 65606) > 0x34)
                  {
LABEL_404:
                    if (v146 == 589894) {
                      goto LABEL_407;
                    }
                    int v168 = 589926;
LABEL_406:
                    if (v146 == v168)
                    {
LABEL_407:
                      if (!v253)
                      {
                        if (!+[UIKeyboard isKeyboardProcess]
                          || ([(_UIKeyboardStateManager *)self inputDelegateManager],
                              v183 = objc_claimAutoreleasedReturnValue(),
                              char v184 = [v183 shouldRespectForwardingInputDelegate],
                              v183,
                              (v184 & 1) != 0))
                        {
                          v185 = [(_UIKeyboardStateManager *)self delegateAsResponder];
                          if (v185) {
                            BOOL v186 = [(_UIKeyboardStateManager *)self _canHandleResponderCommand:sel_findAndReplace_];
                          }
                          else {
                            BOOL v186 = 0;
                          }
                          *((unsigned char *)v309 + 24) = v186;

                          if ((v266 & 2) == 0 && *((unsigned char *)v309 + 24))
                          {
                            v160 = [(_UIKeyboardStateManager *)self _targetForResponderCommand:sel_findAndReplace_];
                            [v160 findAndReplace:0];
LABEL_594:
                          }
LABEL_595:
                          if (!*((unsigned char *)v309 + 24))
                          {
                            v242 = _UIKeyCommandGetLocalizedSymbol(@".");
                            int v243 = [v242 characterAtIndex:0];
                            if (v146 == (v243 | 0x1000000) || v146 == (v243 | 0x10000))
                            {
                              BOOL v244 = [(_UIKeyboardStateManager *)self _cancelOperation:v266 & 1 testOnly:v145 != 0];
                              *((unsigned char *)v309 + 24) = v244;
                            }

                            if (!*((unsigned char *)v309 + 24))
                            {
                              BOOL v245 = [(_UIKeyboardStateManager *)self handleCandidateListNavigation:v146 hasCandidatesForTypedInput:v252 shiftDown:v262 != 0 keyCommandTypeHandled:&v307 allowRepeat:&v306 beforePublic:v266 & 1 keyEvent:v26];
                              *((unsigned char *)v309 + 24) = v245;
                              char v246 = (v266 & 5) != 0 || v245;
                              if ((v246 & 1) == 0 && v255)
                              {
                                BOOL v247 = [(_UIKeyboardStateManager *)self _delegateRequiresKeyEvents];
                                *((unsigned char *)v309 + 24) = !v247;
                              }
                            }
                          }

                          if (!*((unsigned char *)v309 + 24)) {
                            goto LABEL_609;
                          }
                          goto LABEL_607;
                        }
                        if ((v266 & 2) != 0) {
                          goto LABEL_570;
                        }
                        goto LABEL_569;
                      }
LABEL_532:
                      *((unsigned char *)v147 + 24) = 0;
                      goto LABEL_595;
                    }
LABEL_571:
                    *((unsigned char *)v147 + 24) = v148;
                    goto LABEL_595;
                  }
                  if (((1 << v156) & 0x100000001) == 0)
                  {
                    if (((1 << v156) & 0x200000002) == 0)
                    {
                      if (((1 << v156) & 0x10000000100000) != 0) {
                        goto LABEL_351;
                      }
                      goto LABEL_404;
                    }
LABEL_378:
                    if (v253) {
                      goto LABEL_532;
                    }
                    if (!+[UIKeyboard isKeyboardProcess]
                      || ([(_UIKeyboardStateManager *)self inputDelegateManager],
                          v173 = objc_claimAutoreleasedReturnValue(),
                          char v174 = [v173 shouldRespectForwardingInputDelegate],
                          v173,
                          (v174 & 1) != 0))
                    {
                      if (v262)
                      {
                        v175 = [(_UIKeyboardStateManager *)self delegateAsResponder];
                        if (v175) {
                          BOOL v176 = [(_UIKeyboardStateManager *)self _canHandleResponderCommand:sel_findPrevious_];
                        }
                        else {
                          BOOL v176 = 0;
                        }
                        *((unsigned char *)v309 + 24) = v176;

                        if ((v266 & 2) == 0 && *((unsigned char *)v309 + 24))
                        {
                          v160 = [(_UIKeyboardStateManager *)self _targetForResponderCommand:sel_findPrevious_];
                          [v160 findPrevious:0];
                          goto LABEL_594;
                        }
                      }
                      else
                      {
                        v238 = [(_UIKeyboardStateManager *)self delegateAsResponder];
                        if (v238) {
                          BOOL v239 = [(_UIKeyboardStateManager *)self _canHandleResponderCommand:sel_findNext_];
                        }
                        else {
                          BOOL v239 = 0;
                        }
                        *((unsigned char *)v309 + 24) = v239;

                        if ((v266 & 2) == 0 && *((unsigned char *)v309 + 24))
                        {
                          v160 = [(_UIKeyboardStateManager *)self _targetForResponderCommand:sel_findNext_];
                          [v160 findNext:0];
                          goto LABEL_594;
                        }
                      }
                      goto LABEL_595;
                    }
                    if ((v266 & 2) != 0) {
                      goto LABEL_570;
                    }
                    goto LABEL_569;
                  }
                }
                if (v253) {
                  goto LABEL_532;
                }
                if (!+[UIKeyboard isKeyboardProcess]
                  || ([(_UIKeyboardStateManager *)self inputDelegateManager],
                      v169 = objc_claimAutoreleasedReturnValue(),
                      char v170 = [v169 shouldRespectForwardingInputDelegate],
                      v169,
                      (v170 & 1) != 0))
                {
                  if (!v262)
                  {
                    v171 = [(_UIKeyboardStateManager *)self delegateAsResponder];
                    if (v171) {
                      BOOL v172 = [(_UIKeyboardStateManager *)self _canHandleResponderCommand:sel_find_];
                    }
                    else {
                      BOOL v172 = 0;
                    }
                    *((unsigned char *)v309 + 24) = v172;

                    if ((v266 & 2) == 0 && *((unsigned char *)v309 + 24))
                    {
                      v160 = [(_UIKeyboardStateManager *)self _targetForResponderCommand:sel_find_];
                      [v160 find:0];
                      goto LABEL_594;
                    }
                    goto LABEL_595;
                  }
                  goto LABEL_531;
                }
                if ((v266 & 2) == 0) {
                  goto LABEL_569;
                }
                goto LABEL_570;
              }
              [(_UIKeyboardStateManager *)self performOnInputSourceSessionActionSelector:sel_toggleUnderline_];
LABEL_560:
              *((unsigned char *)v309 + 24) = 1;
              goto LABEL_324;
            }
          }
LABEL_514:
          if (!+[UIKeyboard isKeyboardProcess]
            || ([(_UIKeyboardStateManager *)self inputDelegateManager],
                v231 = objc_claimAutoreleasedReturnValue(),
                char v232 = [v231 shouldRespectForwardingInputDelegate],
                v231,
                (v232 & 1) != 0))
          {
            v233 = [(_UIKeyboardStateManager *)self delegateAsResponder];
            if (v233) {
              BOOL v234 = [(_UIKeyboardStateManager *)self _canHandleResponderCommand:sel_toggleItalics_];
            }
            else {
              BOOL v234 = 0;
            }
            *((unsigned char *)v309 + 24) = v234;

            if ((v266 & 2) == 0 && *((unsigned char *)v309 + 24))
            {
              v237 = [(_UIKeyboardStateManager *)self _targetForResponderCommand:sel_toggleItalics_];
              [v237 toggleItalics:0];
              goto LABEL_553;
            }
            goto LABEL_324;
          }
          [(_UIKeyboardStateManager *)self performOnInputSourceSessionActionSelector:sel_toggleItalics_];
          goto LABEL_560;
        }
        if (v212 > 16777313)
        {
          if (v212 <= 16777320)
          {
            if (v212 == 16777314) {
              goto LABEL_495;
            }
            unsigned __int16 v214 = 101;
LABEL_489:
            int v215 = v214 | 0x1000000;
            goto LABEL_490;
          }
          if (v212 == 16777321) {
            goto LABEL_514;
          }
          unsigned __int16 v225 = 117;
        }
        else
        {
          if (v212 <= 16777288)
          {
            if (v212 == 16777282) {
              goto LABEL_495;
            }
            unsigned __int16 v214 = 69;
            goto LABEL_489;
          }
          if (v212 == 16777289) {
            goto LABEL_514;
          }
          unsigned __int16 v225 = 85;
        }
        int v226 = v225 | 0x1000000;
        goto LABEL_509;
      }
      if (v125 == 16777334) {
        goto LABEL_321;
      }
      unsigned __int16 v139 = 120;
    }
    else
    {
      if (v125 <= 16777301)
      {
        if (v125 != 16777281)
        {
          unsigned __int16 v128 = 67;
LABEL_292:
          int v129 = v128 | 0x1000000;
          goto LABEL_293;
        }
        goto LABEL_299;
      }
      if (v125 == 16777302) {
        goto LABEL_321;
      }
      unsigned __int16 v139 = 88;
    }
    int v140 = v139 | 0x1000000;
LABEL_315:
    if (v125 != v140 || v253) {
      goto LABEL_322;
    }
    if (!+[UIKeyboard isKeyboardProcess]
      || ([(_UIKeyboardStateManager *)self inputDelegateManager],
          id v141 = objc_claimAutoreleasedReturnValue(),
          char v142 = [v141 shouldRespectForwardingInputDelegate],
          v141,
          (v142 & 1) != 0))
    {
      v143 = [(_UIKeyboardStateManager *)self delegateAsResponder];
      if (v143) {
        BOOL v144 = [(_UIKeyboardStateManager *)self _canHandleResponderCommand:sel_cut_];
      }
      else {
        BOOL v144 = 0;
      }
      *((unsigned char *)v309 + 24) = v144;

      if ((v266 & 2) == 0 && *((unsigned char *)v309 + 24))
      {
        v204 = [(_UIKeyboardStateManager *)self delegateAsResponder];
        uint64_t v205 = [v204 _dataOwnerForCopy];
        v268[0] = MEMORY[0x1E4F143A8];
        v268[1] = 3221225472;
        v268[2] = __63___UIKeyboardStateManager_handleKeyCommand_repeatOkay_options___block_invoke_14;
        v268[3] = &unk_1E52D9F70;
        v268[4] = self;
        +[UIPasteboard _performAsDataOwner:v205 block:v268];

        +[UIKBAnalyticsDispatcher analyticsDispatchEventTextEditingOperation:@"Cut" trigger:@"HWKeyboard"];
      }
      goto LABEL_323;
    }
    if ((v266 & 2) != 0) {
      goto LABEL_465;
    }
    goto LABEL_464;
  }
  uint64_t v307 = 4;
LABEL_610:
  if (a4) {
    *a4 = v306;
  }
  [(_UIKeyboardStateManager *)self setHandlingKeyCommandFromHardwareKeyboard:0];
  if ((v256 & 1) == 0)
  {
    v248 = [(_UIKeyboardStateManager *)self arrowKeyHistory];

    if (v248)
    {
      +[UIKBAnalyticsDispatcher incrementAllowCursorMovementCount];
      [(_UIKeyboardStateManager *)self changingContextWithTrigger:@"arrowKey"];
      [(_UIKeyboardStateManager *)self updateForChangedSelection];
      +[UIKBAnalyticsDispatcher decrementAllowCursorMovementCount];
    }
  }
  unint64_t v25 = v307;

LABEL_616:
  _Block_object_dispose(&v308, 8);

  return v25;
}

- (BOOL)handleInputManagerBasedKeybind:(id)a3 testOnly:(BOOL)a4
{
  id v6 = a3;
  if ([(_UIKeyboardStateManager *)self isInHardwareKeyboardMode])
  {
    BOOL v7 = [(_UIKeyboardStateManager *)self inputManagerState];
    BOOL v8 = [v7 keyEventMap];
    id v9 = [v6 _modifiedInput];
    uint64_t v10 = [v6 _unmodifiedInput];
    unsigned __int16 v11 = objc_msgSend(v8, "inputEventForInputString:stringWithoutModifiers:modifierFlags:keyboardState:", v9, v10, objc_msgSend(v6, "_gsModifierFlags"), self->m_keyboardState);

    BOOL v12 = v11 != 0;
    if (v11 && !a4)
    {
      if (qword_1EB25F898 != -1) {
        dispatch_once(&qword_1EB25F898, &__block_literal_global_849);
      }
      BOOL v13 = [(_UIKeyboardStateManager *)self taskQueue];
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 3221225472;
      v15[2] = __67___UIKeyboardStateManager_handleInputManagerBasedKeybind_testOnly___block_invoke_3;
      v15[3] = &unk_1E52E3628;
      v15[4] = self;
      id v16 = v11;
      [v13 performSingleTask:v15 breadcrumb:qword_1EB25F890];
    }
  }
  else
  {
    BOOL v12 = 0;
  }

  return v12;
}

- (BOOL)handleCandidateListNavigation:(unsigned int)a3 hasCandidatesForTypedInput:(BOOL)a4 shiftDown:(BOOL)a5 keyCommandTypeHandled:(unint64_t *)a6 allowRepeat:(BOOL *)a7 beforePublic:(BOOL)a8 keyEvent:(id)a9
{
  BOOL v11 = a5;
  BOOL v12 = a4;
  uint64_t v13 = *(void *)&a3;
  id v15 = a9;
  if (![(_UIKeyboardStateManager *)self shouldApplyKeyboardCommandToUIHost])
  {
    if (v12)
    {
      if (a6) {
        *a6 = 2;
      }
      double v19 = [(_UIKeyboardStateManager *)self inputManagerState];
      uint64_t v20 = [v19 keyEventMap];

      if (v20) {
        uint64_t v18 = [v20 candidateNumberKey:v13];
      }
      else {
        uint64_t v18 = u_charDigitValue(v13);
      }
      if (v18 != -1 && v18 <= 9)
      {
        if ([(_UIKeyboardStateManager *)self supportsNumberKeySelection]
          && (objc_opt_respondsToSelector() & 1) != 0)
        {
          LOBYTE(v18) = [(UIKeyboardCandidateList *)self->m_candidateList handleNumberKey:v18];
        }
        else
        {
          LOBYTE(v18) = 0;
        }
        goto LABEL_39;
      }
      int v22 = 0;
      LOBYTE(v18) = 0;
      if ((int)v13 <= 31)
      {
        if (v13 != 10 && v13 != 13) {
          goto LABEL_38;
        }
      }
      else if (v13 != 8388618 && v13 != 1048586)
      {
        if (v13 == 32)
        {
          uint64_t v18 = [(_UIKeyboardStateManager *)self inputManagerState];
          BOOL v23 = [(id)v18 keyboardBehaviors];
          double v24 = [(_UIKeyboardStateManager *)self _keyboardBehaviorState];
          int v22 = [v23 keyBehaviorsForState:v24];

          LOBYTE(v18) = 1;
          switch([v22 spaceKeyBehavior])
          {
            case 2:
              [(_UIKeyboardStateManager *)self performKeyBehaviorConfirm];
              break;
            case 3:
            case 4:
              if (a7) {
                *a7 = 1;
              }
              [(UIKeyboardCandidateList *)self->m_candidateList showCandidateInForwardDirection:v11 ^ 1 granularity:0];
              break;
            case 5:
              [(_UIKeyboardStateManager *)self performKeyBehaviorConfirmFirstCandidate];
              break;
            case 7:
              [(_UIKeyboardStateManager *)self acceptAutocorrectionWithCompletionHandler:0];
              goto LABEL_55;
            case 8:
              goto LABEL_38;
            default:
LABEL_55:
              LOBYTE(v18) = 0;
              break;
          }
        }
        goto LABEL_38;
      }
      LOBYTE(v18) = [(_UIKeyboardStateManager *)self handleReturnKey:v11];
      int v22 = 0;
LABEL_38:

LABEL_39:
      goto LABEL_46;
    }
    if (![(_UIKeyboardStateManager *)self hasEditableMarkedText]) {
      goto LABEL_19;
    }
    LOBYTE(v18) = 0;
    id v21 = 0;
    if ((int)v13 <= 31)
    {
      if (v13 != 10 && v13 != 13) {
        goto LABEL_45;
      }
    }
    else
    {
      if (v13 == 32)
      {
        uint64_t v26 = [(_UIKeyboardStateManager *)self inputManagerState];
        uint64_t v27 = [v26 keyboardBehaviors];
        double v28 = [(_UIKeyboardStateManager *)self _keyboardBehaviorState];
        id v21 = [v27 keyBehaviorsForState:v28];

        uint64_t v29 = [v21 spaceKeyBehavior];
        if ((unint64_t)(v29 - 2) < 4 || v29 == 8)
        {
          [(_UIKeyboardStateManager *)self updateCandidateDisplay];
          LODWORD(v18) = 1;
          if (a6)
          {
LABEL_43:
            if (v18)
            {
              *a6 = 2;
              LOBYTE(v18) = 1;
            }
          }
        }
        else
        {
          LOBYTE(v18) = 0;
        }
LABEL_45:

        goto LABEL_46;
      }
      if (v13 != 8388618 && v13 != 1048586) {
        goto LABEL_45;
      }
    }
    LODWORD(v18) = [(_UIKeyboardStateManager *)self handleReturnKey:v11];
    id v21 = 0;
    if (a6) {
      goto LABEL_43;
    }
    goto LABEL_45;
  }
  id v16 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
  int v17 = [v16 synchronousForwardKeyCommandsBeforePublicToUIHost:v15];

  if (!v17)
  {
LABEL_19:
    LOBYTE(v18) = 0;
    goto LABEL_46;
  }
  if (a6) {
    *a6 = 2;
  }
  LOBYTE(v18) = 1;
  if (v13 == 32 && a7) {
    *a7 = 1;
  }
LABEL_46:

  return v18;
}

- (BOOL)handleReturnKey:(BOOL)a3
{
  BOOL v3 = a3;
  BOOL v5 = [(_UIKeyboardStateManager *)self inputManagerState];
  id v6 = [v5 keyboardBehaviors];
  BOOL v7 = [(_UIKeyboardStateManager *)self _keyboardBehaviorState];
  BOOL v8 = [v6 keyBehaviorsForState:v7];

  char v9 = 0;
  switch([v8 returnKeyBehavior])
  {
    case 2:
      [(_UIKeyboardStateManager *)self performKeyBehaviorConfirm];
      goto LABEL_7;
    case 3:
    case 4:
      [(UIKeyboardCandidateList *)self->m_candidateList showCandidateInForwardDirection:!v3 granularity:0];
      goto LABEL_7;
    case 5:
      [(_UIKeyboardStateManager *)self performKeyBehaviorConfirmFirstCandidate];
      goto LABEL_7;
    case 9:
      id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      BOOL v11 = [WeakRetained layout];
      char v9 = [v11 performReturnAction];

      break;
    case 10:
      [(_UIKeyboardStateManager *)self performKeyBehaviorCommitInline];
LABEL_7:
      char v9 = 1;
      break;
    default:
      break;
  }

  return v9;
}

- (void)handleEmojiPopoverKeyCommand
{
  if ([(_UIKeyboardStateManager *)self shouldApplyKeyboardCommandToUIHost])
  {
    id WeakRetained = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
    [WeakRetained forwardInputDestinationEventToUIHost:sel_handleEmojiPopoverKeyCommand];
  }
  else
  {
    p_presentationDelegate = &self->_presentationDelegate;
    id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    if ([WeakRetained canPresentOrDismissEmojiPopover])
    {
      BOOL v4 = [(_UIKeyboardStateManager *)self hasEditableMarkedText];

      if (v4) {
        return;
      }
      id v5 = objc_loadWeakRetained((id *)p_presentationDelegate);
      int v6 = [v5 isEmojiPopoverPresented];

      id v7 = objc_loadWeakRetained((id *)p_presentationDelegate);
      BOOL v8 = v7;
      if (v6)
      {
        id WeakRetained = v7;
        char v9 = [WeakRetained emojiPopoverController];
        [WeakRetained dismissKeyboardPopover:v9 beforeCleanup:0 completion:0];
      }
      else
      {
        int v10 = [v7 isEmojiPopoverVisibleOrDismissing];

        if (v10) {
          return;
        }
        id WeakRetained = objc_loadWeakRetained((id *)p_presentationDelegate);
        [WeakRetained presentEmojiPopoverViaTrigger:@"keyboardShortcut" completion:0];
      }
    }
  }
}

- (BOOL)currentKeyboardTraitsAllowCandidateBarWhileIgnoringHidePredictionTrait:(BOOL)a3
{
  if ([(_UIKeyboardStateManager *)self keyboardIsKeyPad])
  {
    if (![(_UIKeyboardStateManager *)self canUseCandidateBarAsSupplementToInlineView]&& ![(TIKeyboardCandidateResultSet *)self->m_candidateResultSet hasOnlySlottedCandidates])
    {
      int m_predictionType = self->m_predictionType;
      if (m_predictionType != 4 && m_predictionType != 2) {
        return 0;
      }
    }
  }
  BOOL v6 = [(UITextInputTraits *)self->m_traits isSecureTextEntry];
  BOOL result = !v6;
  if (!v6 && !a3) {
    return ![(UITextInputTraits *)self->m_traits hidePrediction];
  }
  return result;
}

- (BOOL)shouldShowCandidateBar
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  char v3 = [WeakRetained shouldShowCandidateBar];

  return v3;
}

+ (Class)layoutClassForInputMode:(id)a3 keyboardType:(int64_t)a4 screenTraits:(id)a5
{
  unsigned int v6 = a4;
  id v7 = a3;
  id v8 = a5;
  if ([v7 isEqualToString:@"intl_HWR"])
  {
    char v9 = 0;
  }
  else
  {
    if (UIKeyboardInputModeWithTypeUsesKBStar(v7, v6)) {
      [(id)objc_opt_class() _subclassForScreenTraits:v8];
    }
    else {
    char v9 = UIKeyboardLayoutClassForInputMode(v7);
    }
  }

  return (Class)v9;
}

- (double)timestampOfLastTouchesEnded
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  char v3 = [WeakRetained layout];
  [v3 timestampOfLastTouchesEnded];
  double v5 = v4;

  return v5;
}

- (BOOL)shouldAllowSelectionGestures:(BOOL)a3 atPoint:(CGPoint)a4 toBegin:(BOOL)a5
{
  BOOL v7 = a5;
  double y = a4.y;
  double x = a4.x;
  BOOL v10 = a3;
  p_isa = (id *)&self->super.isa;
  BOOL v12 = [(_UIKeyboardStateManager *)self inputDelegate];
  if (v12 && ([p_isa isRotating] & 1) == 0)
  {
    id WeakRetained = [p_isa textInputTraits];
    char v16 = [WeakRetained isSecureTextEntry];

    if (v16) {
      goto LABEL_7;
    }
    if ([p_isa usesCandidateSelection])
    {
      if ((UIKeyboardGetSafeDeviceIdiom() & 0xFFFFFFFFFFFFFFFBLL) != 1)
      {
        id WeakRetained = objc_loadWeakRetained(p_isa + 97);
        int v17 = [WeakRetained candidateController];
        uint64_t v5 = [v17 activeCandidateViewType];

        if ((v5 & 2) != 0)
        {
          id v18 = objc_loadWeakRetained(p_isa + 97);
          id WeakRetained = [v18 candidateController];
          char v19 = [WeakRetained barIsExtended];

          if (v19)
          {
LABEL_7:
            LOBYTE(v13) = 0;
            return v13;
          }
        }
      }
    }
    uint64_t v20 = p_isa + 97;
    BOOL v12 = objc_loadWeakRetained(p_isa + 97);
    char v21 = [v12 keyboardLayoutIsInAnotherProcess];
    if (v21) {
      goto LABEL_15;
    }
    p_isa = (id *)objc_loadWeakRetained(p_isa + 97);
    uint64_t v22 = [p_isa layout];
    if (!v22)
    {
      LOBYTE(v13) = 0;
LABEL_20:

      goto LABEL_4;
    }
    id WeakRetained = (void *)v22;
    uint64_t v5 = (uint64_t)objc_loadWeakRetained(v20);
    unsigned int v6 = [(id)v5 layout];
    if (objc_msgSend(v6, "shouldAllowSelectionGestures:atPoint:toBegin:", v10, v7, x, y))
    {
LABEL_15:
      id v23 = objc_loadWeakRetained(v20);
      double v24 = [v23 _rootInputWindowController];
      int v13 = [v24 isTransitioningBetweenFloatingStates] ^ 1;

      if (v21) {
        goto LABEL_4;
      }
    }
    else
    {
      LOBYTE(v13) = 0;
    }

    goto LABEL_20;
  }
  LOBYTE(v13) = 0;
LABEL_4:

  return v13;
}

- (void)setTwoFingerTapTimestamp:(double)a3
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  double v4 = [WeakRetained layout];
  [v4 setTwoFingerTapTimestamp:a3];
}

- (void)updateInputAssistantButtonItems
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained updateInputAssistantButtonItems];
}

- (unsigned)setMarkedText:(id)a3 selectedRange:(_NSRange)a4 inputString:(id)a5 lastInputString:(id)a6 searchString:(id)a7 candidateOffset:(int64_t)a8 liveConversionSegments:(id)a9 highlighSegmentIndex:(unint64_t)a10
{
  NSUInteger length = a4.length;
  NSUInteger location = a4.location;
  id v16 = a3;
  id v34 = a5;
  id v33 = a6;
  id v17 = a7;
  id v35 = a9;
  [(_UIKeyboardStateManager *)self setCandidateViewOffset:a8];
  if ([(_UIKeyboardStateManager *)self liveConversionEnabled]
    || [(_UIKeyboardStateManager *)self shouldApplyKeyboardCommandToUIHost])
  {
    id v18 = (void *)[objc_alloc(MEMORY[0x1E4F28E48]) initWithString:v16];
    id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    int v20 = [WeakRetained caretVisible];

    if (a10 == 0x7FFFFFFFFFFFFFFFLL)
    {
      if ((v20 & 1) == 0)
      {
        id v21 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
        uint64_t v22 = v21;
        uint64_t v23 = 1;
LABEL_8:
        [v21 setCaretVisible:v23];
      }
    }
    else if (v20)
    {
      id v21 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      uint64_t v22 = v21;
      uint64_t v23 = 0;
      goto LABEL_8;
    }
    uint64_t v40 = 0;
    uint64_t v41 = &v40;
    uint64_t v42 = 0x3010000000;
    unsigned int v43 = &unk_186D7DBA7;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    v36[0] = MEMORY[0x1E4F143A8];
    v36[1] = 3221225472;
    v36[2] = __156___UIKeyboardStateManager_setMarkedText_selectedRange_inputString_lastInputString_searchString_candidateOffset_liveConversionSegments_highlighSegmentIndex___block_invoke;
    v36[3] = &unk_1E52E37B8;
    id v24 = v18;
    double v38 = &v40;
    unint64_t v39 = a10;
    id v37 = v24;
    [v35 enumerateObjectsUsingBlock:v36];
    -[_UIKeyboardStateManager _configureMarkedTextAttributesForConversion:selectedRange:highlightRange:](self, "_configureMarkedTextAttributesForConversion:selectedRange:highlightRange:", v24, location, length, v41[4], v41[5]);
    uint64_t v26 = v33;
    unint64_t v25 = v34;
    uint64_t v27 = (void *)[v24 copy];
    LOBYTE(v32) = 1;
    unsigned int v28 = -[_UIKeyboardStateManager _setAttributedMarkedText:selectedRange:inputString:lastInputString:searchString:compareAttributes:](self, "_setAttributedMarkedText:selectedRange:inputString:lastInputString:searchString:compareAttributes:", v27, location, length, v34, v33, v17, v32);

    _Block_object_dispose(&v40, 8);
    goto LABEL_10;
  }
  if (v16)
  {
    char v31 = (void *)[objc_alloc(MEMORY[0x1E4F28E48]) initWithString:v16];
    -[_UIKeyboardStateManager _configureMarkedTextAttributesForConversion:selectedRange:highlightRange:](self, "_configureMarkedTextAttributesForConversion:selectedRange:highlightRange:", v31, location, length, 0, 0);
    LOBYTE(v32) = 0;
    uint64_t v26 = v33;
    unint64_t v25 = v34;
    unsigned int v28 = -[_UIKeyboardStateManager _setAttributedMarkedText:selectedRange:inputString:lastInputString:searchString:compareAttributes:](self, "_setAttributedMarkedText:selectedRange:inputString:lastInputString:searchString:compareAttributes:", v31, location, length, v34, v33, v17, v32);
  }
  else
  {
    unsigned int v28 = 0;
    uint64_t v26 = v33;
    unint64_t v25 = v34;
  }
LABEL_10:
  [(_UIKeyboardStateManager *)self updateShiftState];
  id v29 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [v29 updateHostedInlineCandidateView];

  return v28;
}

- (void)_configureMarkedTextAttributesForConversion:(id)a3 selectedRange:(_NSRange)a4 highlightRange:(_NSRange)a5
{
  NSUInteger length = a5.length;
  NSUInteger location = a5.location;
  NSUInteger v7 = a4.length;
  NSUInteger v8 = a4.location;
  id v20 = a3;
  uint64_t v10 = [v20 length];
  BOOL v11 = [MEMORY[0x1E4F1CA48] array];
  if (+[UIKeyboard isRedesignedTextCursorEnabled])
  {
    [v20 beginEditing];
    uint64_t v12 = *(void *)off_1E52D23E8;
    objc_msgSend(v20, "addAttribute:value:range:", *(void *)off_1E52D23E8, &unk_1ED3F3858, 0, v10);
    if (length) {
      objc_msgSend(v20, "addAttribute:value:range:", v12, &unk_1ED3F3870, location, length);
    }
    [v11 addObject:v12];
    int v13 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    BOOL v14 = [v13 tintColor];

    if (v14)
    {
      uint64_t v15 = *(void *)off_1E52D23E0;
      objc_msgSend(v20, "addAttribute:value:range:", *(void *)off_1E52D23E0, v14, 0, v10);
      [v11 addObject:v15];
    }
    id v16 = v20;
    if (v7)
    {
      unint64_t v17 = [v20 length];
      id v16 = v20;
      if (v8 + v7 <= v17)
      {
        objc_msgSend(v20, "addAttribute:value:range:", @"NSMarkedTextSelectionAttributeName", MEMORY[0x1E4F1CC38], v8, v7);
        [v11 addObject:@"NSMarkedTextSelectionAttributeName"];
        id v16 = v20;
      }
    }
    [v16 endEditing];
  }
  else
  {
    uint64_t v18 = *(void *)off_1E52D1F58;
    char v19 = +[UIColor _markedTextBackgroundColor];
    objc_msgSend(v20, "addAttribute:value:range:", v18, v19, 0, v10);

    [v11 addObject:v18];
  }
  objc_msgSend(v20, "addAttribute:value:range:", 0x1ED176740, v11, 0, v10);
}

- (void)setAttributedMarkedText:(id)a3 selectedRange:(_NSRange)a4 inputString:(id)a5 searchString:(id)a6
{
  LOBYTE(v6) = 1;
  -[_UIKeyboardStateManager _setAttributedMarkedText:selectedRange:inputString:lastInputString:searchString:compareAttributes:](self, "_setAttributedMarkedText:selectedRange:inputString:lastInputString:searchString:compareAttributes:", a3, a4.location, a4.length, a5, 0, a6, v6);
}

- (void)setInlineCompletionAsMarkedText:(id)a3 selectedRange:(_NSRange)a4 inputString:(id)a5 searchString:(id)a6
{
  NSUInteger length = a4.length;
  NSUInteger location = a4.location;
  id v11 = a6;
  id v12 = a5;
  id v14 = a3;
  [(_UIKeyboardStateManager *)self _noteInlineCompletionAsMarkedText:v14];
  LOBYTE(v13) = 1;
  -[_UIKeyboardStateManager _setAttributedMarkedText:selectedRange:inputString:lastInputString:searchString:compareAttributes:](self, "_setAttributedMarkedText:selectedRange:inputString:lastInputString:searchString:compareAttributes:", v14, location, length, v12, 0, v11, v13);
}

- (unsigned)_setAttributedMarkedText:(id)a3 selectedRange:(_NSRange)a4 inputString:(id)a5 lastInputString:(id)a6 searchString:(id)a7 compareAttributes:(BOOL)a8
{
  NSUInteger length = a4.length;
  NSUInteger location = a4.location;
  id v13 = a3;
  id v14 = a5;
  id v15 = a6;
  id v16 = a7;
  unint64_t v17 = [(_UIKeyboardStateManager *)self inlineTextCompletionController];
  uint64_t v18 = [v17 presentingTextCompletionAsMarkedText];

  char v70 = v18;
  id v65 = v16;
  if ([v18 length])
  {
    char v19 = [v13 string];
    int v20 = [v18 isEqualToString:v19];

    if (![(_UIKeyboardStateManager *)self usesCandidateSelection] && v20)
    {
      int v21 = 0;
      goto LABEL_7;
    }
  }
  else
  {
    [(_UIKeyboardStateManager *)self usesCandidateSelection];
  }
  -[TIKeyboardState setInputForMarkedText:](self->m_keyboardState, "setInputForMarkedText:", v14, v16);
  [(TIKeyboardState *)self->m_keyboardState setSearchStringForMarkedText:v16];
  int v21 = 1;
LABEL_7:
  id v67 = v14;
  uint64_t v22 = objc_msgSend(v13, "string", v65);
  uint64_t v23 = (void *)v22;
  if (v22) {
    id v24 = (__CFString *)v22;
  }
  else {
    id v24 = &stru_1ED0E84C0;
  }
  unint64_t v25 = v24;

  id v26 = v13;
  if (a8)
  {
    uint64_t v27 = v25;
    unsigned int v28 = v26;
    NSUInteger v29 = location;
    if (!v26) {
      goto LABEL_22;
    }
    BOOL v30 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    char v31 = [v30 attributedMarkedText];
    char v32 = [v31 isEqualToAttributedString:v28];

    if ((v32 & 1) == 0) {
      goto LABEL_22;
    }
  }
  else
  {
    unsigned int v28 = v13;
    uint64_t v33 = [(_UIKeyboardStateManager *)self _markedText];
    id v34 = (void *)v33;
    if (v33) {
      id v35 = (__CFString *)v33;
    }
    else {
      id v35 = &stru_1ED0E84C0;
    }
    uint64_t v36 = v35;

    uint64_t v27 = v25;
    int v37 = [(__CFString *)v36 isEqualToString:v25];

    NSUInteger v29 = location;
    if (!v37) {
      goto LABEL_22;
    }
  }
  double v38 = v27;
  if (![(__CFString *)v27 length])
  {
    unsigned int v43 = 0;
    int v51 = v66;
    int v61 = v67;
    uint64_t v53 = v70;
    goto LABEL_50;
  }
  unint64_t v39 = [(_UIKeyboardStateManager *)self documentState];
  uint64_t v40 = [v39 selectedRangeInMarkedText];
  uint64_t v42 = v41;

  if (v29 == v40 && length == v42)
  {
    unsigned int v43 = 0;
LABEL_49:
    int v51 = v66;
    int v61 = v67;
    uint64_t v53 = v70;
    double v38 = v27;
    goto LABEL_50;
  }
LABEL_22:
  BOOL v44 = +[UIKeyboard usesInputSystemUI];
  if (v15)
  {
    if (v44)
    {
      uint64_t v45 = [MEMORY[0x1E4F28B88] newlineCharacterSet];
      uint64_t v46 = [v15 rangeOfCharacterFromSet:v45];

      if (v46 == 0x7FFFFFFFFFFFFFFFLL
        && ![(_UIKeyboardStateManager *)self callShouldInsertText:v15])
      {
        unsigned int v43 = 2;
        goto LABEL_49;
      }
    }
  }
  id v69 = v15;
  double v38 = v27;
  if (v21)
  {
    uint64_t v47 = [(_UIKeyboardStateManager *)self documentState];
    char v48 = objc_msgSend(v47, "documentStateAfterSettingMarkedText:selectedRange:", v27, v29, length);
    [(_UIKeyboardStateManager *)self setDocumentState:v48];
  }
  self->m_textInputChangesIgnored = 1;
  BOOL v49 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  objc_msgSend(v49, "setAttributedMarkedText:selectedRange:", v28, v29, length);

  self->m_textInputChangesIgnored = 0;
  char v50 = [(_UIKeyboardStateManager *)self inputForMarkedText];
  if ([v50 length] && !-[_UIKeyboardStateManager _hasMarkedText](self, "_hasMarkedText"))
  {
    id v58 = [(_UIKeyboardStateManager *)self inputManagerState];
    char v59 = [v58 suppressPlaceholderCandidate];

    int v51 = v66;
    id v15 = v69;
    if ((v59 & 1) == 0)
    {
      if (qword_1EB25F8A8 != -1) {
        dispatch_once(&qword_1EB25F8A8, &__block_literal_global_867);
      }
      char v60 = [(_UIKeyboardStateManager *)self taskQueue];
      v72[0] = MEMORY[0x1E4F143A8];
      v72[1] = 3221225472;
      v72[2] = __125___UIKeyboardStateManager__setAttributedMarkedText_selectedRange_inputString_lastInputString_searchString_compareAttributes___block_invoke_3;
      v72[3] = &unk_1E52E34C8;
      v72[4] = self;
      [v60 addTask:v72 breadcrumb:qword_1EB25F8A0];
    }
  }
  else
  {

    int v51 = v66;
    id v15 = v69;
  }
  int v52 = [(_UIKeyboardStateManager *)self asyncCapableInputDelegate];

  uint64_t v53 = v70;
  if (!v52 || ![(_UIKeyboardStateManager *)self isInHardwareKeyboardMode]) {
    goto LABEL_42;
  }
  uint64_t v54 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  if (([v54 delegateRespondsToSelector:sel_requestDocumentContext_completionHandler_] & 1) == 0)
  {

    id v15 = v69;
    goto LABEL_42;
  }
  int64_t v55 = [(_UIKeyboardStateManager *)self candidateViewOffset];

  id v15 = v69;
  if (v55 == 0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_42:
    [(_UIKeyboardStateManager *)self setCharacterRectsForCharacterRange:0];
    goto LABEL_43;
  }
  int v56 = objc_alloc_init(UIWKDocumentRequest);
  [(UIWKDocumentRequest *)v56 setFlags:33];
  char v57 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  v71[0] = MEMORY[0x1E4F143A8];
  v71[1] = 3221225472;
  v71[2] = __125___UIKeyboardStateManager__setAttributedMarkedText_selectedRange_inputString_lastInputString_searchString_compareAttributes___block_invoke_4;
  v71[3] = &unk_1E52E37E0;
  v71[4] = self;
  [v57 requestDocumentContext:v56 completionHandler:v71];

  uint64_t v53 = v70;
LABEL_43:
  if (objc_opt_respondsToSelector())
  {
    m_candidateList = self->m_candidateList;
    double v63 = [(_UIKeyboardStateManager *)self inputStringFromPhraseBoundary];
    [(UIKeyboardCandidateList *)m_candidateList setInlineText:v63];

    uint64_t v53 = v70;
  }
  int v61 = v67;
  if ([(UIKeyboardCandidateList *)self->m_candidateList isExtendedList]) {
    self->m_hasEditedMarkedTextInExtendedView = 1;
  }
  [(_UIKeyboardStateManager *)self setChangedDelegate];
  unsigned int v43 = 1;
LABEL_50:

  return v43;
}

- (void)clearInputForMarkedText
{
  self->m_hasEditedMarkedTextInExtendedView = 0;
}

- (BOOL)supportsSetPhraseBoundary
{
  char v3 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
  double v4 = [v3 rtiInputSourceState];

  if (v4)
  {
    uint64_t v5 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
    uint64_t v6 = [v5 rtiInputSourceState];
    char v7 = [v6 supportsSetPhraseBoundary];
  }
  else
  {
    uint64_t v5 = [(_UIKeyboardStateManager *)self inputManagerState];
    char v7 = [v5 supportsSetPhraseBoundary];
  }

  return v7;
}

- (BOOL)hasEditableMarkedText
{
  BOOL v3 = [(_UIKeyboardStateManager *)self _hasMarkedText];
  if (v3)
  {
    LOBYTE(v3) = [(_UIKeyboardStateManager *)self supportsSetPhraseBoundary];
  }
  return v3;
}

- (BOOL)hasInlineCompletionAsMarkedText
{
  double v2 = [(_UIKeyboardStateManager *)self inlineCompletionAsMarkedText];
  BOOL v3 = v2 != 0;

  return v3;
}

- (id)inputForMarkedText
{
  return (id)[(TIKeyboardState *)self->m_keyboardState inputForMarkedText];
}

- (void)smartSelectionForTextInDocument:(id)a3 inRange:(_NSRange)a4 options:(unint64_t)a5 completion:(id)a6
{
  NSUInteger length = a4.length;
  NSUInteger location = a4.location;
  id v11 = (__CFString *)a3;
  id v12 = a6;
  id v13 = [MEMORY[0x1E4F1CA48] array];
  CFIndex v14 = [(__CFString *)v11 length];
  CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFLocaleRef v16 = (const __CFLocale *)[MEMORY[0x1E4F1CA20] currentLocale];
  v39.NSUInteger location = 0;
  v39.NSUInteger length = v14;
  CFStringTokenizerRef v17 = CFStringTokenizerCreate(v15, v11, v39, 0, v16);
  if (v17)
  {
    uint64_t v18 = v17;
    while (CFStringTokenizerAdvanceToNextToken(v18))
    {
      CFRange CurrentTokenRange = CFStringTokenizerGetCurrentTokenRange(v18);
      int v20 = objc_msgSend(MEMORY[0x1E4F29238], "valueWithRange:", CurrentTokenRange.location, CurrentTokenRange.length);
      [v13 addObject:v20];
    }
    CFRelease(v18);
    int v21 = +[UIKeyboardInputModeController sharedInputModeController];
    uint64_t v22 = [v21 currentInputMode];
    uint64_t v23 = [v22 normalizedIdentifier];

    int v24 = 0;
    uint64_t v25 = 0;
    do
      v25 |= TISmartSelectionOptionFromUISmartSelectionOption((1 << v24++) & a5);
    while (v24 != 64);
    id v26 = objc_alloc_init(MEMORY[0x1E4F28BB0]);
    [v26 lock];
    uint64_t v35 = 0;
    uint64_t v36 = &v35;
    uint64_t v37 = 0x2020000000;
    char v38 = 0;
    [v26 unlock];
    uint64_t v27 = [(_UIKeyboardStateManager *)self inputManager];
    v31[0] = MEMORY[0x1E4F143A8];
    v31[1] = 3221225472;
    v31[2] = __86___UIKeyboardStateManager_smartSelectionForTextInDocument_inRange_options_completion___block_invoke;
    v31[3] = &unk_1E52E3808;
    id v28 = v26;
    id v32 = v28;
    id v34 = &v35;
    id v29 = v12;
    id v33 = v29;
    objc_msgSend(v27, "smartSelectionForTextInDocument:inRange:language:tokenizedRanges:options:completion:", v11, location, length, v23, v13, v25, v31);

    [v28 lock];
    if (!*((unsigned char *)v36 + 24))
    {
      BOOL v30 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceNow:1.0];
      [v28 waitUntilDate:v30];

      if (!*((unsigned char *)v36 + 24))
      {
        (*((void (**)(id, NSUInteger, NSUInteger))v29 + 2))(v29, location, length);
        *((unsigned char *)v36 + 24) = 1;
      }
    }
    [v28 unlock];

    _Block_object_dispose(&v35, 8);
  }
  else
  {
    (*((void (**)(id, NSUInteger, NSUInteger))v12 + 2))(v12, location, length);
  }
}

- (id)searchStringForMarkedText
{
  BOOL v3 = [(TIKeyboardState *)self->m_keyboardState searchStringForMarkedText];
  double v4 = v3;
  if (v3)
  {
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v6 = [(_UIKeyboardStateManager *)self _markedText];
    char v7 = (void *)v6;
    NSUInteger v8 = &stru_1ED0E84C0;
    if (v6) {
      NSUInteger v8 = (__CFString *)v6;
    }
    uint64_t v5 = v8;
  }
  return v5;
}

- (id)inputStringFromPhraseBoundary
{
  BOOL v3 = [(_UIKeyboardStateManager *)self documentState];
  double v4 = [v3 markedText];
  uint64_t v5 = (void *)[v4 copy];

  if ([(_UIKeyboardStateManager *)self supportsSetPhraseBoundary])
  {
    uint64_t v6 = [(_UIKeyboardStateManager *)self documentState];
    unint64_t v7 = [v6 selectedRangeInMarkedText];

    if (v7)
    {
      if (v7 < [v5 length])
      {
        uint64_t v8 = [v5 substringToIndex:v7];

        uint64_t v5 = (void *)v8;
      }
    }
  }
  return v5;
}

- (BOOL)cursorIsAtEndOfMarkedText
{
  if (![(_UIKeyboardStateManager *)self supportsSetPhraseBoundary]) {
    return 0;
  }
  BOOL v3 = [(_UIKeyboardStateManager *)self documentState];
  uint64_t v4 = [v3 selectedRangeInMarkedText];

  uint64_t v5 = [(_UIKeyboardStateManager *)self documentState];
  uint64_t v6 = [v5 markedText];
  uint64_t v7 = [v6 length];

  return v4 == v7;
}

- (BOOL)cursorIsAtStartOfInlineCompletionMarkedText
{
  BOOL v3 = [(_UIKeyboardStateManager *)self inlineCompletionAsMarkedText];

  if (v3)
  {
    uint64_t v4 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    uint64_t v5 = [v4 selectedTextRange];

    uint64_t v6 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    uint64_t v7 = [v6 markedTextRange];

    if ([v5 isEmpty])
    {
      uint64_t v8 = [v5 end];
      char v9 = [v7 start];
      char v10 = [v8 isEqual:v9];

      if (v10) {
        return 1;
      }
    }
    else
    {
    }
  }
  return 0;
}

- (void)syncDocumentStateToInputDelegate
{
  if (qword_1EB25F8B8 != -1) {
    dispatch_once(&qword_1EB25F8B8, &__block_literal_global_879);
  }
  BOOL v3 = [(_UIKeyboardStateManager *)self taskQueue];
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __59___UIKeyboardStateManager_syncDocumentStateToInputDelegate__block_invoke_3;
  v4[3] = &unk_1E52E34C8;
  v4[4] = self;
  [v3 performSingleTask:v4 breadcrumb:qword_1EB25F8B0];
}

- (void)documentStateFromInputDelegate:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(_UIKeyboardStateManager *)self inputSystemSourceSession];
  if (v5)
  {
    if (!self->m_textInputChangingText && !self->m_textInputUpdatingSelection)
    {
      uint64_t v6 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      uint64_t v7 = [v6 forwardingInputDelegate];

      if (!v7)
      {
        CFAllocatorRef v15 = [v5 documentState];
        uint64_t v16 = [v15 documentState];
        goto LABEL_16;
      }
    }
  }
  uint64_t v8 = [(_UIKeyboardStateManager *)self asyncInputDelegate];
  if (!v8)
  {
    char v9 = [(_UIKeyboardStateManager *)self webInputDelegate];

    if (v9) {
      goto LABEL_8;
    }
    id v12 = [(_UIKeyboardStateManager *)self asyncWebKitInteractionDelegate];

    if (v12)
    {
      id v13 = [(_UIKeyboardStateManager *)self asyncWebKitInteractionDelegate];
      v47[0] = MEMORY[0x1E4F143A8];
      v47[1] = 3221225472;
      v47[2] = __58___UIKeyboardStateManager_documentStateFromInputDelegate___block_invoke_2;
      v47[3] = &unk_1E52E3858;
      id v48 = v4;
      [v13 requestAutocorrectionContextWithCompletionHandler:v47];

      id v11 = v48;
      goto LABEL_9;
    }
    if ([(UITextInputTraits *)self->m_traits isSecureTextEntry])
    {
      CFIndex v14 = (void *)MEMORY[0x1E4FAE2A8];
      CFAllocatorRef v15 = [(_UIKeyboardStateManager *)self inputDelegate];
      uint64_t v16 = [v14 documentStateOfSecureTextDocument:v15];
LABEL_16:
      CFStringTokenizerRef v17 = (void *)v16;
      (*((void (**)(id, uint64_t))v4 + 2))(v4, v16);

      goto LABEL_10;
    }
    if (v5
      || ([(TIKeyboardState *)self->m_keyboardState textInputTraits],
          uint64_t v18 = objc_claimAutoreleasedReturnValue(),
          [v18 recentInputIdentifier],
          char v19 = objc_claimAutoreleasedReturnValue(),
          v19,
          v18,
          v19))
    {
      int v20 = (void *)MEMORY[0x1E4FAE2A8];
      int v21 = [(_UIKeyboardStateManager *)self inputDelegate];
      uint64_t v22 = [v20 documentStateOfDocumentWithRecentInputIdentifier:v21];
    }
    else
    {
      unsigned int v43 = (void *)MEMORY[0x1E4FAE2A8];
      int v21 = [(_UIKeyboardStateManager *)self inputDelegate];
      uint64_t v22 = [v43 documentStateOfDocument:v21];
    }
    uint64_t v23 = (void *)v22;

    int v24 = +[UIKeyboardInputModeController sharedInputModeController];
    uint64_t v25 = [v24 currentInputMode];
    int v26 = [v25 isExtensionInputMode];

    if (!v26)
    {
LABEL_31:
      (*((void (**)(id, void *))v4 + 2))(v4, v23);

      goto LABEL_10;
    }
    if (WebKitFramework)
    {
      uint64_t v27 = [(_UIKeyboardStateManager *)self inputDelegate];
      objc_opt_class();
      char isKindOfClass = objc_opt_isKindOfClass();

      if (isKindOfClass)
      {
        id v29 = [v23 contextBeforeInput];
        uint64_t v30 = [v29 length];

        if (!v30)
        {
          uint64_t v31 = [v23 documentStateAfterInsertingText:@"\n"];

          uint64_t v23 = (void *)v31;
        }
      }
    }
    id v32 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    id v33 = [v32 selectedTextRange];

    if (v33)
    {
      id v34 = [(_UIKeyboardStateManager *)self inputDelegate];
      uint64_t v35 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      uint64_t v36 = [v35 beginningOfDocument];
      uint64_t v37 = [v33 start];
      if ([v34 comparePosition:v36 toPosition:v37] == 1)
      {
      }
      else
      {
        [(_UIKeyboardStateManager *)self inputDelegate];
        v38 = uint64_t v45 = v35;
        [v33 end];
        v39 = uint64_t v46 = v34;
        uint64_t v40 = [(_UIKeyboardStateManager *)self inputDelegateManager];
        uint64_t v41 = [v40 endOfDocument];
        uint64_t v44 = [v38 comparePosition:v39 toPosition:v41];

        if (v44 != 1)
        {
LABEL_30:

          goto LABEL_31;
        }
      }
    }
    uint64_t v42 = objc_msgSend(objc_alloc(MEMORY[0x1E4FAE2A8]), "initWithContextBefore:markedText:selectedText:contextAfter:selectedRangeInMarkedText:", 0, 0, 0, 0, 0x7FFFFFFFFFFFFFFFLL, 0);

    uint64_t v23 = (void *)v42;
    goto LABEL_30;
  }

LABEL_8:
  char v10 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  v49[0] = MEMORY[0x1E4F143A8];
  v49[1] = 3221225472;
  v49[2] = __58___UIKeyboardStateManager_documentStateFromInputDelegate___block_invoke;
  v49[3] = &unk_1E52E3830;
  id v50 = v4;
  [v10 requestTextContextForAutocorrectionWithCompletionHandler:v49];

  id v11 = v50;
LABEL_9:

LABEL_10:
}

- (void)syncDocumentStateToInputDelegateWithExecutionContext:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(_UIKeyboardStateManager *)self documentState];
  uint64_t v6 = [v5 _selectedTextRange];
  uint64_t v8 = v7;

  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  void v10[2] = __80___UIKeyboardStateManager_syncDocumentStateToInputDelegateWithExecutionContext___block_invoke;
  v10[3] = &unk_1E52E38A8;
  id v11 = v4;
  id v12 = self;
  uint64_t v13 = v6;
  uint64_t v14 = v8;
  id v9 = v4;
  [(_UIKeyboardStateManager *)self documentStateFromInputDelegate:v10];
}

- (void)prepareForSelectionChange
{
  if (!self->m_selecting && !self->m_textInputChangesIgnored)
  {
    BOOL v3 = [(_UIKeyboardStateManager *)self taskQueue];
    if (([v3 isMainThreadExecutingTask] & 1) == 0)
    {
      id v4 = [(_UIKeyboardStateManager *)self autocorrectionController];
      char v5 = [v4 requestedAutocorrection];

      if (v5) {
        goto LABEL_7;
      }
      BOOL v3 = [(_UIKeyboardStateManager *)self taskQueue];
      [v3 waitUntilAllTasksAreFinished];
    }

LABEL_7:
    if (self->m_textInputChangingText)
    {
LABEL_13:
      [(_UIKeyboardStateManager *)self dismissTextChoicePrompt];
      self->m_selecting = 1;
      id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      [WeakRetained assertCursorForForSelectionChange];

      id v9 = [(_UIKeyboardStateManager *)self textInteractionAssistant];
      char v10 = [v9 activeSelection];
      id v11 = [v10 selectedRange];
      self->m_selectionIsEmptdouble y = [v11 isEmpty];

      return;
    }
    uint64_t v6 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    if (([v6 insideKeyInputDelegateCall] & 1) == 0
      && ![(_UIKeyboardStateManager *)self hasEditableMarkedText])
    {
      uint64_t v7 = +[UIDictationController activeInstance];
      if (![v7 dictationIsModifyingText])
      {
        BOOL v12 = [(_UIKeyboardStateManager *)self utlizeEuclidModelForDictationReplacement];

        if (v12) {
          goto LABEL_13;
        }
        if (+[UIKeyboard usesInputSystemUI]
          && ([(_UIKeyboardStateManager *)self inlineCompletionAsMarkedText],
              uint64_t v13 = objc_claimAutoreleasedReturnValue(),
              v13,
              !v13))
        {
          int v24 = [(_UIKeyboardStateManager *)self inputDelegateManager];
          uint64_t v25 = [v24 selectedTextRange];
          pendingAutocorrectRange = self->_pendingAutocorrectRange;
          self->_pendingAutocorrectRange = v25;

          v27[0] = MEMORY[0x1E4F143A8];
          v27[1] = 3221225472;
          void v27[2] = __52___UIKeyboardStateManager_prepareForSelectionChange__block_invoke;
          v27[3] = &unk_1E52DC3A0;
          v27[4] = self;
          CFAllocatorRef v15 = v27;
          uint64_t v14 = self;
        }
        else
        {
          if (![(_UIKeyboardStateManager *)self _shouldAcceptAutocorrectionOnSelectionChange])
          {
            if (self->m_userChangedSelection) {
              goto LABEL_13;
            }
            uint64_t v16 = [(_UIKeyboardStateManager *)self inputManagerState];

            if (!v16) {
              goto LABEL_13;
            }
            CFStringTokenizerRef v17 = (void *)MEMORY[0x1E4FAE318];
            uint64_t v18 = [(_UIKeyboardStateManager *)self inputManagerState];
            uint64_t v19 = [v18 inputString];
            uint64_t v6 = [v17 candidateWithUnchangedInput:v19];

            int v20 = [(_UIKeyboardStateManager *)self inputManagerState];
            LOBYTE(v19) = objc_opt_respondsToSelector();

            if (v19)
            {
              id v21 = v6;
              uint64_t v22 = [(_UIKeyboardStateManager *)self inputManagerState];
              uint64_t v23 = [v22 valueForKey:@"learningFlagsForLastAcceptedCandidate"];
              [v21 performSelector:sel_setLearningFlags_ withObject:v23];
            }
            [(_UIKeyboardStateManager *)self textAccepted:v6];
            goto LABEL_12;
          }
          uint64_t v14 = self;
          CFAllocatorRef v15 = 0;
        }
        [(_UIKeyboardStateManager *)v14 acceptAutocorrectionWithCompletionHandler:v15];
        goto LABEL_13;
      }
    }
LABEL_12:

    goto LABEL_13;
  }
}

- (void)selectionWillChange:(id)a3
{
  id v4 = a3;
  unint64_t m_textInputChangingCount = self->m_textInputChangingCount;
  self->unint64_t m_textInputChangingCount = m_textInputChangingCount + 1;
  if (!m_textInputChangingCount && !self->m_textInputChangesIgnored)
  {
    id v16 = v4;
    [(_UIKeyboardStateManager *)self prepareForSelectionChange];
    uint64_t v6 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    uint64_t v7 = [v6 forwardingInputDelegate];
    if ([v7 isEditing])
    {
      char v8 = objc_opt_respondsToSelector();

      if (v8)
      {
        id v9 = [v16 interactionAssistant];
        char v10 = [v9 view];
        id v11 = [(_UIKeyboardStateManager *)self inputDelegateManager];
        BOOL v12 = [v11 forwardingInputDelegate];

        if (v10 == v12) {
          goto LABEL_11;
        }
        goto LABEL_10;
      }
    }
    else
    {
    }
    if (!+[UIKeyboard usesInputSystemUI]) {
      goto LABEL_11;
    }
    uint64_t v13 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    int v14 = [v13 shouldRespectForwardingInputDelegate];

    if (!v14) {
      goto LABEL_11;
    }
LABEL_10:
    [(_UIKeyboardStateManager *)self clearForwardingInputDelegateAndResign:1];
LABEL_11:
    CFAllocatorRef v15 = [(_UIKeyboardStateManager *)self inlineTextCompletionController];
    [v15 selectionWillChange];

    id v4 = v16;
  }
}

- (void)setSelectionWithPoint:(CGPoint)a3
{
  double y = a3.y;
  double x = a3.x;
  char v5 = [(_UIKeyboardStateManager *)self textInteractionAssistant];
  id v6 = [v5 activeSelection];

  objc_msgSend(v6, "setSelectionWithPoint:", x, y);
  [v6 commit];
}

- (void)updateForChangedSelection
{
  if (qword_1EB25F8D8 != -1) {
    dispatch_once(&qword_1EB25F8D8, &__block_literal_global_900);
  }
  BOOL v3 = [(_UIKeyboardStateManager *)self taskQueue];
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __52___UIKeyboardStateManager_updateForChangedSelection__block_invoke_3;
  v4[3] = &unk_1E52E34C8;
  v4[4] = self;
  [v3 performSingleTask:v4 breadcrumb:qword_1EB25F8D0];
}

- (void)updateForChangedSelectionWithExecutionContext:(id)a3
{
  id v4 = a3;
  if (![(_UIKeyboardStateManager *)self _hasMarkedText]
    || ![(_UIKeyboardStateManager *)self supportsSetPhraseBoundary])
  {
    [(_UIKeyboardStateManager *)self setCurrentCandidateRequest:0];
  }
  if ([(_UIKeyboardStateManager *)self hasAdvancedInputDelegate])
  {
    [(_UIKeyboardStateManager *)self clearTransientState];
    if ([(_UIKeyboardStateManager *)self _hasMarkedText])
    {
      id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      [WeakRetained clearCursorAssertion];

      [(_UIKeyboardStateManager *)self updateCandidateDisplay];
      id v6 = &__block_literal_global_906;
    }
    else
    {
      [(_UIKeyboardStateManager *)self clearInput];
      [(_UIKeyboardStateManager *)self setPreviousInputString:0];
      self->m_userChangedSelection = 1;
      self->m_suggestionsShownForCurrentDeletion = 0;
      v9[0] = MEMORY[0x1E4F143A8];
      v9[1] = 3221225472;
      v9[2] = __73___UIKeyboardStateManager_updateForChangedSelectionWithExecutionContext___block_invoke_3;
      v9[3] = &unk_1E52E34C8;
      v9[4] = self;
      id v6 = v9;
    }
    char v8 = [v4 childWithContinuation:v6];
    [(_UIKeyboardStateManager *)self syncDocumentStateToInputDelegateWithExecutionContext:v8];
  }
  else
  {
    uint64_t v7 = objc_msgSend(objc_alloc(MEMORY[0x1E4FAE2A8]), "initWithContextBefore:markedText:selectedText:contextAfter:selectedRangeInMarkedText:", 0, 0, 0, 0, 0x7FFFFFFFFFFFFFFFLL, 0);
    [(_UIKeyboardStateManager *)self setDocumentState:v7];

    char v8 = [v4 childWithContinuation:&__block_literal_global_904];
    [(_UIKeyboardStateManager *)self syncInputManagerToKeyboardStateWithExecutionContext:v8];
  }
}

- (BOOL)shouldGenerateCandidatesAfterSelectionChange
{
  if ([(_UIKeyboardStateManager *)self usesCandidateSelection]) {
    return 1;
  }
  if (![(_UIKeyboardStateManager *)self _shouldLoadPredictionsBasedOnCurrentTraits])
  {
    if ([(id)UIApp _isSpringBoard])
    {
      BOOL v3 = [(_UIKeyboardStateManager *)self autocorrectionController];
      int v4 = [v3 hasAutocorrection];

      if (v4)
      {
        char v5 = [(_UIKeyboardStateManager *)self autocorrectionController];
        id v6 = [v5 autocorrectionList];
        if (v6)
        {
        }
        else
        {
          uint64_t v7 = [(_UIKeyboardStateManager *)self autocorrectionController];
          char v8 = [v7 textSuggestionList];

          if (!v8) {
            return 0;
          }
        }
      }
    }
  }
  if ([(UITextInputTraits *)self->m_traits contentsIsSingleValue]) {
    return 1;
  }
  id v9 = [(_UIKeyboardStateManager *)self inputManagerState];
  char v10 = [v9 shouldExtendPriorWord];

  if (v10) {
    return 1;
  }
  return [(_UIKeyboardStateManager *)self _shouldLoadPredictionsBasedOnCurrentTraits];
}

- (void)completeUpdateForChangedSelection:(BOOL)a3
{
  BOOL v3 = a3;
  [(_UIKeyboardStateManager *)self setShiftOffIfNeeded];
  if (v3)
  {
    [(_UIKeyboardStateManager *)self updateReturnKey];
    [(_UIKeyboardStateManager *)self updateCandidateDisplay];
  }
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  int v6 = [WeakRetained hasCursorAssertion];

  if (v6)
  {
    uint64_t v7 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    [v7 clearCursorAssertion];
  }
  else
  {
    uint64_t v7 = [(_UIKeyboardStateManager *)self _activeAssertionController];
    [v7 _updateSubjectWithAssertionState];
  }

  if ([(_UIKeyboardStateManager *)self noContent]) {
    [(_UIKeyboardStateManager *)self setInitialDirection];
  }
  self->m_doubleSpacePeriodWasAppliedInCurrentContext = 0;
  self->m_suggestionsShownForCurrentDeletion = 0;
  id v8 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [v8 updateStylingTraitsIfNeeded];

  self->m_didAutomaticallyInsertSpace = 0;
  if (!self->m_textInputChangingText)
  {
    id v9 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    [v9 changedSelection];
  }
  char v10 = [(_UIKeyboardStateManager *)self textSelectionController];
  [v10 selectionDidChange];

  id v11 = [(_UIKeyboardStateManager *)self inlineTextCompletionController];
  [v11 selectionDidChange];

  BOOL v12 = [(_UIKeyboardStateManager *)self _textChoicesAssistant];
  [v12 selectionDidChange];

  m_selectionIsEmptdouble y = self->m_selectionIsEmpty;
  int v14 = [(_UIKeyboardStateManager *)self textInteractionAssistant];
  CFAllocatorRef v15 = [v14 activeSelection];
  id v16 = [v15 selectedRange];
  int v17 = [v16 isEmpty];

  if (m_selectionIsEmpty != v17) {
    self->m_editingTraitsMarkedDirtdouble y = 1;
  }
}

- (void)selectionDidChange:(id)a3
{
  id v4 = a3;
  if (_os_feature_enabled_impl())
  {
    char v5 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    int v6 = [v5 keyInputDelegate];
    char v7 = objc_opt_respondsToSelector();

    if (v7)
    {
      id v8 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      id v9 = [v8 keyInputDelegate];
      [v9 _selectionDidUpdate];
    }
  }
  unint64_t m_textInputChangingCount = self->m_textInputChangingCount;
  if (m_textInputChangingCount == 1)
  {
    if (!self->m_ignoreSelectionChange || !self->m_textInputChangesIgnored || self->m_textInputChangingText)
    {
      self->unint64_t m_textInputChangingCount = 0;
      goto LABEL_14;
    }
    if (qword_1EB25F8E8 != -1) {
      dispatch_once(&qword_1EB25F8E8, &__block_literal_global_912);
    }
    id v11 = [(_UIKeyboardStateManager *)self taskQueue];
    v40[0] = MEMORY[0x1E4F143A8];
    v40[1] = 3221225472;
    v40[2] = __46___UIKeyboardStateManager_selectionDidChange___block_invoke_3;
    v40[3] = &unk_1E52E34C8;
    v40[4] = self;
    [v11 addTask:v40 breadcrumb:qword_1EB25F8E0];

    unint64_t m_textInputChangingCount = self->m_textInputChangingCount;
  }
  if (!m_textInputChangingCount) {
    goto LABEL_39;
  }
  unint64_t v12 = m_textInputChangingCount - 1;
  self->unint64_t m_textInputChangingCount = v12;
  if (v12) {
    goto LABEL_39;
  }
LABEL_14:
  if (self->m_textInputChangesIgnored) {
    goto LABEL_39;
  }
  self->m_textInputUpdatingSelection = 1;
  if (self->m_textInputChangingText)
  {
    [(_UIKeyboardStateManager *)self textChanged:v4];
  }
  else if ([(_UIKeyboardStateManager *)self noContent])
  {
    if (qword_1EB25F8F8 != -1) {
      dispatch_once(&qword_1EB25F8F8, &__block_literal_global_918);
    }
    uint64_t v13 = [(_UIKeyboardStateManager *)self taskQueue];
    v39[0] = MEMORY[0x1E4F143A8];
    v39[1] = 3221225472;
    v39[2] = __46___UIKeyboardStateManager_selectionDidChange___block_invoke_6;
    v39[3] = &unk_1E52E34C8;
    v39[4] = self;
    [v13 addTask:v39 breadcrumb:qword_1EB25F8F0];
  }
  else
  {
    [(_UIKeyboardStateManager *)self updateForChangedSelection];
  }
  self->m_textInputChangingText = 0;
  self->m_textInputUpdatingSelection = 0;
  int v14 = [(_UIKeyboardStateManager *)self inputDelegate];
  CFAllocatorRef v15 = [v14 _textSelectingContainer];
  id v16 = [v15 interactionAssistant];

  if (!v16)
  {
    if ([(_UIKeyboardStateManager *)self supportsSetPhraseBoundary])
    {
      int v17 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      uint64_t v18 = [v17 markedTextRange];

      if (!v18)
      {
        uint64_t v19 = [(_UIKeyboardStateManager *)self inputDelegate];
        [v19 _setGestureRecognizers];
      }
    }
  }
  int v20 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
  if (([v20 inputSystemClientEnabled] & 1) == 0) {
    goto LABEL_31;
  }
  id v21 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
  char v22 = [v21 isNotifyingDelegateOfRemoteOutputOperation];

  if ((v22 & 1) == 0)
  {
    if (qword_1EB25F908 != -1) {
      dispatch_once(&qword_1EB25F908, &__block_literal_global_924);
    }
    int v20 = [(_UIKeyboardStateManager *)self taskQueue];
    v38[0] = MEMORY[0x1E4F143A8];
    v38[1] = 3221225472;
    v38[2] = __46___UIKeyboardStateManager_selectionDidChange___block_invoke_9;
    v38[3] = &unk_1E52E34C8;
    v38[4] = self;
    [v20 addTask:v38 breadcrumb:qword_1EB25F900];
LABEL_31:
  }
  if (!self->_remoteTextInputPartner) {
    goto LABEL_39;
  }
  uint64_t v23 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
  if ([v23 isNotifyingDelegateOfRemoteOutputOperation]) {
    goto LABEL_34;
  }
  int v24 = [(_UIKeyboardStateManager *)self inputDelegate];
  char v25 = objc_opt_respondsToSelector();

  if (v25)
  {
    uint64_t v23 = [(_UIKeyboardStateManager *)self inputSystemSourceSession];
    if (v23)
    {
      BOOL v26 = +[UIKeyboard isMajelSupported]
         && +[UIDictationController isRunning];
      uint64_t v27 = +[UIKeyboardCameraSession activeSession];

      if (!self->m_suppressingDocumentAssertions && !v26 && !v27)
      {
        id v28 = [(_UIKeyboardStateManager *)self documentState];
        id v29 = [v28 contextBeforeInput];
        uint64_t v30 = [v29 length];
        uint64_t v31 = [v28 selectedText];
        uint64_t v32 = [v31 length];

        if (!+[UIKeyboard isKeyboardProcess])
        {
          id v33 = [v28 fullString];
          id v34 = [v23 textOperations];
          [v34 setTextToAssert:v33];
        }
        uint64_t v35 = [v23 textOperations];
        objc_msgSend(v35, "setSelectionRangeToAssert:", v30, v32);

        uint64_t v36 = [(_UIKeyboardStateManager *)self buildInputSourceState];
        uint64_t v37 = [v23 textOperations];
        [v37 setInputSourceState:v36];

        [v23 flushOperations];
      }
    }
LABEL_34:
  }
LABEL_39:
  [(_UIKeyboardStateManager *)self setArrowKeyHistory:0];
  if (!self->m_textInputChangesIgnored) {
    [(_UIKeyboardStateManager *)self postInputResponderCapabilitiesChangedNotification];
  }
}

- (void)updateTextChoicePromptSelection:(id)a3 toRange:(id)a4
{
  id v13 = a3;
  id v6 = a4;
  char v7 = [v13 selectedTextRange];
  if (v7)
  {
    id v8 = [v6 start];
    id v9 = [v7 start];
    if ([v13 comparePosition:v8 toPosition:v9])
    {
    }
    else
    {
      char v10 = [v6 end];
      id v11 = [v7 end];
      uint64_t v12 = [v13 comparePosition:v10 toPosition:v11];

      if (!v12) {
        goto LABEL_6;
      }
    }
  }
  [(_UIKeyboardStateManager *)self selectionWillChange:v13];
  [v13 setSelectedTextRange:v6];
  [(_UIKeyboardStateManager *)self selectionDidChange:v13];
LABEL_6:
}

- (void)deleteHandwritingStrokesAtIndexes:(id)a3
{
  id v10 = a3;
  p_presentationDelegate = &self->_presentationDelegate;
  id WeakRetained = objc_loadWeakRetained((id *)p_presentationDelegate);
  id v6 = [WeakRetained layout];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  if (isKindOfClass)
  {
    id v8 = objc_loadWeakRetained((id *)p_presentationDelegate);
    id v9 = [v8 layout];
    [v9 deleteHandwritingStrokesAtIndexes:v10];
  }
}

- (void)showSelectionCommands
{
  id v2 = [(_UIKeyboardStateManager *)self _editMenuAssistant];
  [v2 showSelectionCommands];
}

- (void)acceptingCandidateWithTrigger:(id)a3
{
  v10[1] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (+[UIKeyboard usesInputSystemUI])
  {
    id v5 = objc_alloc_init(NSClassFromString(&cfstr_Rtiinputoperat.isa));
    [v5 setActionSelector:sel_acceptingCandidateWithTrigger_];
    id v9 = @"candidateAcceptedTrigger";
    v10[0] = v4;
    id v6 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v10 forKeys:&v9 count:1];

    [v5 setCustomInfo:v6];
    [v5 setCustomInfoType:0x1ED14BCE0];
    char v7 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
    [v7 performInputOperation:v5];
  }
  else
  {
    id v8 = [(_UIKeyboardStateManager *)self inputManager];
    [v8 acceptingCandidateWithTrigger:v4];
  }
}

- (void)changingContextWithTrigger:(id)a3
{
  v10[1] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (+[UIKeyboard usesInputSystemUI])
  {
    id v5 = objc_alloc_init(NSClassFromString(&cfstr_Rtiinputoperat.isa));
    [v5 setActionSelector:sel_changingContextWithTrigger_];
    id v9 = @"contextChangeTrigger";
    v10[0] = v4;
    id v6 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v10 forKeys:&v9 count:1];

    [v5 setCustomInfo:v6];
    [v5 setCustomInfoType:0x1ED14BCE0];
    char v7 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
    [v7 performInputOperation:v5];
  }
  else
  {
    id v8 = [(_UIKeyboardStateManager *)self inputManager];
    [v8 changingContextWithTrigger:v4];
  }
}

- (void)syncInputManagerToKeyboardState
{
  if (qword_1EB25F918 != -1) {
    dispatch_once(&qword_1EB25F918, &__block_literal_global_941);
  }
  BOOL v3 = [(_UIKeyboardStateManager *)self taskQueue];
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __58___UIKeyboardStateManager_syncInputManagerToKeyboardState__block_invoke_3;
  v4[3] = &unk_1E52E34C8;
  v4[4] = self;
  [v3 performSingleTask:v4 breadcrumb:qword_1EB25F910];
}

- (void)syncInputManagerToKeyboardStateWithExecutionContext:(id)a3
{
  id v4 = a3;
  [(_UIKeyboardStateManager *)self flushTouchEventWaitingForKeyInputEventIfNecessary];
  [(_UIKeyboardStateManager *)self refreshKeyboardState];
  id v5 = (void *)[(TIKeyboardState *)self->m_keyboardState copy];
  objc_msgSend(v5, "setAutofillMode:", +[UIKBAutofillController translateToTextInputAutofillMode:](UIKBAutofillController, "translateToTextInputAutofillMode:", -[TIKeyboardState autofillMode](self->m_keyboardState, "autofillMode")));
  objc_msgSend(v5, "setAutofillSubMode:", +[UIKBAutofillController translateToTextInputAutofillMode:](UIKBAutofillController, "translateToTextInputAutofillMode:", -[TIKeyboardState autofillSubMode](self->m_keyboardState, "autofillSubMode")));
  uint64_t v18 = MEMORY[0x1E4F143A8];
  uint64_t v19 = 3221225472;
  int v20 = __79___UIKeyboardStateManager_syncInputManagerToKeyboardStateWithExecutionContext___block_invoke;
  id v21 = &unk_1E52E38F0;
  id v6 = v4;
  id v22 = v6;
  uint64_t v23 = self;
  char v7 = (void *)[&v18 copy];
  id v8 = +[_UIRemoteKeyboards sharedRemoteKeyboards];
  if ([v8 oldPathForSnapshot]
    && !+[UIKeyboard isKeyboardProcess])
  {
    id v13 = +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate];
    int v14 = [v13 visualModeManager];
    if ([v14 useVisualModeWindowed])
    {
      BOOL v15 = [(_UIKeyboardStateManager *)self shouldAccessInputManagerService];

      if (v15) {
        goto LABEL_4;
      }
    }
    else
    {
    }
  }
  else
  {
    BOOL v9 = [(_UIKeyboardStateManager *)self shouldAccessInputManagerService];

    if (v9)
    {
LABEL_4:
      id v10 = [MEMORY[0x1E4FAE410] sharedInstance];
      id v11 = [v10 flush];
      [v5 setStatisticChanges:v11];

      uint64_t v12 = [(_UIKeyboardStateManager *)self backendController];
      [v12 syncToKeyboardState:v5 completionHandler:v7];

      goto LABEL_10;
    }
  }
  [v6 returnExecutionToParent];
LABEL_10:
  id v16 = [v5 inputContextHistory];

  if (v16)
  {
    int v17 = [v5 inputContextHistory];
    [v17 assertCheckpointForCoding];
  }
}

- (void)syncKeyboardToConfiguration:(id)a3
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [v4 inputManagerState];
  [(_UIKeyboardStateManager *)self setInputManagerState:v5];

  id v6 = [v4 intermediateText];

  if (v6)
  {
    char v7 = [v4 intermediateText];
    [(_UIKeyboardStateManager *)self assertIntermediateText:v7];
  }
  if ([v4 assertDefaultKeyPlane]
    && [(_UIKeyboardStateManager *)self isShifted]
    && ![(_UIKeyboardStateManager *)self isShiftLocked])
  {
    [(_UIKeyboardStateManager *)self setShift:0];
  }
  id v8 = [v4 layoutTag];

  if (v8)
  {
    id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    id v10 = [WeakRetained layout];
    id v11 = [v4 layoutTag];
    [v10 setLayoutTag:v11];
  }
  uint64_t v12 = [v4 accentKeyString];

  if (v12)
  {
    id v13 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    int v14 = [v4 accentKeyString];
    [v13 setLabel:v14 forKey:@"_keyid_accent_"];
  }
  uint64_t v45 = self;
  BOOL v15 = objc_msgSend(v4, "contextualDisplayKeys", v4);
  id v16 = v15;
  if (v15)
  {
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    uint64_t v47 = [v15 countByEnumeratingWithState:&v52 objects:v57 count:16];
    if (v47)
    {
      uint64_t v46 = *(void *)v53;
      p_presentationDelegate = &self->_presentationDelegate;
      do
      {
        for (uint64_t i = 0; i != v47; ++i)
        {
          if (*(void *)v53 != v46) {
            objc_enumerationMutation(v16);
          }
          uint64_t v19 = *(void *)(*((void *)&v52 + 1) + 8 * i);
          int v20 = v16;
          id v21 = [v16 objectForKey:v19];
          id v22 = objc_loadWeakRetained((id *)p_presentationDelegate);
          uint64_t v23 = [v22 activeLayout];
          int v24 = [v23 currentKeyplane];
          char v25 = [v24 keysWithRepresentedString:v19];

          long long v50 = 0u;
          long long v51 = 0u;
          long long v48 = 0u;
          long long v49 = 0u;
          id v26 = v25;
          uint64_t v27 = [v26 countByEnumeratingWithState:&v48 objects:v56 count:16];
          if (v27)
          {
            uint64_t v28 = v27;
            uint64_t v29 = *(void *)v49;
            do
            {
              for (uint64_t j = 0; j != v28; ++j)
              {
                if (*(void *)v49 != v29) {
                  objc_enumerationMutation(v26);
                }
                uint64_t v31 = *(void **)(*((void *)&v48 + 1) + 8 * j);
                id v32 = objc_loadWeakRetained((id *)p_presentationDelegate);
                id v33 = [v31 name];
                [v32 setLabel:v21 forKey:v33];
              }
              uint64_t v28 = [v26 countByEnumeratingWithState:&v48 objects:v56 count:16];
            }
            while (v28);
          }

          id v16 = v20;
        }
        uint64_t v47 = [v20 countByEnumeratingWithState:&v52 objects:v57 count:16];
      }
      while (v47);
    }
  }
  else if (!v12)
  {
    goto LABEL_30;
  }
  id v34 = objc_loadWeakRetained((id *)&v45->_presentationDelegate);
  uint64_t v35 = [v34 layout];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  if (isKindOfClass)
  {
    id v37 = objc_loadWeakRetained((id *)&v45->_presentationDelegate);
    char v38 = [v37 layout];
    [v38 updateKeyCentroids];
  }
LABEL_30:
  CFRange v39 = +[UIKeyboardInputModeController sharedInputModeController];
  uint64_t v40 = [v39 currentInputMode];

  uint64_t v41 = [v44 multilingualLanguages];
  [v40 setMultilingualLanguages:v41];

  if (+[UIKBMultilingualKeyboardIntroductionView shouldShowIntroductionForInputMode:v40])
  {
    id v42 = objc_loadWeakRetained((id *)&v45->_presentationDelegate);
    [v42 presentMultilingualKeyboardTip:v40];
LABEL_34:

    goto LABEL_35;
  }
  if (+[UIKBMultilingualSettingIntroductionView shouldShowIntroductionForInputMode:v40])
  {
    id v42 = objc_loadWeakRetained((id *)&v45->_presentationDelegate);
    [v42 presentMultilingualSettingTip:v40];
    goto LABEL_34;
  }
LABEL_35:
  unsigned int v43 = [v44 trialParameters];
  +[UIKBAnalyticsDispatcher setKeyboardTrialParameters:v43];
}

- (void)handleKeyboardInput:(id)a3 executionContext:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  kdebug_trace();
  kac_get_log();
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  os_signpost_id_t v9 = os_signpost_id_make_with_pointer(v8, v6);
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v10 = v9;
    if (os_signpost_enabled(v8))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1853B0000, v8, OS_SIGNPOST_INTERVAL_BEGIN, v10, "appInput", " enableTelemetry=YES ", buf, 2u);
    }
  }

  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [(id)objc_opt_class() sendPerformanceNotification:@"UIKeyboardPerformanceHandleInputStartNotification"];

  [(_UIKeyboardStateManager *)self cancelCandidateRequests];
  [(_UIKeyboardStateManager *)self refreshKeyboardStateUpdatingSecureCandidateRenderTraits:0];
  uint64_t v12 = [(_UIKeyboardStateManager *)self touchEventWaitingForKeyInputEvent];
  [v6 setTouchEvent:v12];

  [(_UIKeyboardStateManager *)self setTouchEventWaitingForKeyInputEvent:0];
  id v13 = [v6 touchEvent];
  [v13 timestamp];
  BOOL v15 = v14;

  id v16 = (void *)[(TIKeyboardState *)self->m_keyboardState copy];
  objc_msgSend(v16, "setAutofillMode:", +[UIKBAutofillController translateToTextInputAutofillMode:](UIKBAutofillController, "translateToTextInputAutofillMode:", -[TIKeyboardState autofillMode](self->m_keyboardState, "autofillMode")));
  objc_msgSend(v16, "setAutofillSubMode:", +[UIKBAutofillController translateToTextInputAutofillMode:](UIKBAutofillController, "translateToTextInputAutofillMode:", -[TIKeyboardState autofillSubMode](self->m_keyboardState, "autofillSubMode")));
  int v17 = [v6 acceptedCandidate];
  int v18 = [v17 slotID];
  BOOL v19 = v18 != 0;

  int v20 = [v6 acceptedCandidate];
  int v21 = 0;
  if (objc_opt_respondsToSelector())
  {
    id v22 = [v6 acceptedCandidate];
    int v21 = [v22 isHideMyEmailType];
  }
  if (v18 && self->m_cachedAutofillMode == 1) {
    BOOL v23 = 1;
  }
  else {
    BOOL v23 = (+[UIKeyboard isKeyboardProcess] & v21) == 1
  }
       && self->m_cachedAutofillMode == 3;
  if ([v6 isBackspace])
  {
    [(_UIKeyboardStateManager *)self removeTextChoicePromptWithUnderline];
    if ([(_UIKeyboardStateManager *)self usesCandidateSelection]
      && [(_UIKeyboardStateManager *)self markedTextFromClient])
    {
      int v24 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      [v24 deleteBackward];

      [(_UIKeyboardStateManager *)self syncInputManagerToKeyboardState];
      [(_UIKeyboardStateManager *)self setMarkedTextFromClient:0];
    }
  }
  else
  {
    [(_UIKeyboardStateManager *)self removeTextChoicePrompt];
  }
  id location = 0;
  char v25 = [v6 acceptedCandidate];
  uint64_t v26 = [v25 customInfoType];

  if (v26)
  {
    uint64_t v27 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
    uint64_t v28 = [v27 autofillPayloadDelegate];
    objc_storeWeak(&location, v28);
  }
  *(void *)buf = 0;
  uint64_t v47 = buf;
  uint64_t v48 = 0x2020000000;
  int64_t m_textInputSource = self->m_textInputSource;
  v38[0] = MEMORY[0x1E4F143A8];
  v38[1] = 3221225472;
  v38[2] = __64___UIKeyboardStateManager_handleKeyboardInput_executionContext___block_invoke;
  v38[3] = &unk_1E52E3990;
  id v29 = v6;
  v43[1] = v15;
  id v39 = v29;
  uint64_t v40 = self;
  BOOL v44 = v19;
  objc_copyWeak(v43, &location);
  id v42 = buf;
  BOOL v45 = v23;
  id v30 = v7;
  id v41 = v30;
  uint64_t v31 = (void *)[v38 copy];
  if (v23)
  {
    objc_initWeak(&from, v30);
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __64___UIKeyboardStateManager_handleKeyboardInput_executionContext___block_invoke_7;
    aBlock[3] = &unk_1E52DC308;
    objc_copyWeak(&v36, &from);
    id v32 = _Block_copy(aBlock);
    [v30 setPendingCompletionBlock:v32];

    objc_destroyWeak(&v36);
    objc_destroyWeak(&from);
  }
  if ([(_UIKeyboardStateManager *)self shouldAccessInputManagerService])
  {
    id v33 = _UIKeyboardLog();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(from) = 0;
      _os_log_impl(&dword_1853B0000, v33, OS_LOG_TYPE_DEFAULT, "Keyboard sends inputEvent to kbd", (uint8_t *)&from, 2u);
    }

    id v34 = [(_UIKeyboardStateManager *)self backendController];
    [v34 handleKeyboardInput:v29 keyboardState:v16 completionHandler:v31];
  }
  else
  {
    [v30 returnExecutionToParent];
  }

  objc_destroyWeak(v43);
  _Block_object_dispose(buf, 8);
  objc_destroyWeak(&location);
}

- (void)updateKeyboardOutput:(id)a3 withInputForSmartPunctuation:(id)a4 keyboardConfiguration:(id)a5
{
  id v21 = a3;
  id v8 = a4;
  id v9 = a5;
  if ([v8 isPopupVariant]) {
    uint64_t v10 = 1;
  }
  else {
    uint64_t v10 = [v8 isFlick];
  }
  m_smartPunctuationController = self->m_smartPunctuationController;
  uint64_t v12 = [v21 insertionText];
  id v13 = [(_UIKeyboardStateManager *)self documentState];
  int v14 = [(TISmartPunctuationController *)m_smartPunctuationController smartPunctuationOutputForInput:v12 isLockedInput:v10 documentState:v13];

  if ([v14 deletionCount])
  {
    BOOL v15 = [v9 intermediateText];
    id v16 = [v15 displayString];
    uint64_t v17 = [v16 length];

    if (!v17) {
      objc_msgSend(v21, "setDeletionCount:", objc_msgSend(v14, "deletionCount"));
    }
  }
  int v18 = [v14 insertionText];
  if ([v18 length])
  {
    BOOL v19 = [v21 insertionText];
    uint64_t v20 = [v19 length];

    if (!v20) {
      goto LABEL_11;
    }
    int v18 = [v14 insertionText];
    [v21 setInsertionText:v18];
  }

LABEL_11:
}

- (void)replaceAllTextInResponder:(id)a3 withText:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  if (!+[UIKeyboard isModelessActive])
  {
    id v8 = +[UIDictationController activeInstance];
    [v8 cancelDictation];
  }
  id v9 = [(_UIKeyboardStateManager *)self inputDelegate];

  if (v9 == v6)
  {
    if (!+[UIKeyboard isKeyboardProcess]
      && (objc_opt_respondsToSelector() & 1) != 0)
    {
      [v6 setText:&stru_1ED0E84C0];
    }
    [(_UIKeyboardStateManager *)self callShouldInsertText:v7];
    uint64_t v10 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    int v11 = [v10 hasAsyncCapableInputDelegate];

    if (v11)
    {
      if (qword_1EB25F948 != -1) {
        dispatch_once(&qword_1EB25F948, &__block_literal_global_1011);
      }
      uint64_t v12 = [(_UIKeyboardStateManager *)self taskQueue];
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 3221225472;
      v20[2] = __62___UIKeyboardStateManager_replaceAllTextInResponder_withText___block_invoke_3;
      v20[3] = &unk_1E52E34C8;
      v20[4] = self;
      [v12 addTask:v20 breadcrumb:qword_1EB25F940];

      id v13 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      int v14 = [v13 textInputDelegate];

      if (!v14) {
        goto LABEL_18;
      }
      BOOL v15 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      id v16 = [v15 textInputDelegate];
      [v16 selectAll:0];

      uint64_t v17 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      int v18 = [v17 textInputDelegate];
      [v18 insertText:v7];
    }
    else
    {
      uint64_t v17 = [(_UIKeyboardStateManager *)self inputDelegate];
      [v17 _replaceDocumentWithText:v7];
    }

LABEL_18:
    BOOL v19 = +[_UIRemoteKeyboards sharedRemoteKeyboards];
    [v19 restoreKeyboardIfNeeded];

    goto LABEL_19;
  }
  if ([v6 conformsToProtocol:&unk_1ED42F658])
  {
    [(_UIKeyboardStateManager *)self callShouldInsertText:v7 onDelegate:v6];
    [v6 _replaceDocumentWithText:v7];
  }
  else if (objc_opt_respondsToSelector())
  {
    [v6 setText:v7];
  }
LABEL_19:
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && [v6 isSecureTextEntry]) {
    [v6 _forceObscureAllText];
  }
}

- (BOOL)dontPushOneTimeCode
{
  BOOL v3 = +[UIKeyboard keyboardBundleIdentifier];
  if ([v3 hasPrefix:@"com.apple"]) {
    int v4 = [v3 hasPrefix:@"com.apple.social"] ^ 1;
  }
  else {
    LOBYTE(v4) = 0;
  }
  id v5 = [(UITextInputTraits *)self->m_traits textContentType];
  char v6 = v4 & ~[v5 isEqualToString:@"one-time-code"];

  return v6;
}

- (BOOL)insertAutoFillTextSuggestion:(id)a3
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v5 = [(_UIKeyboardStateManager *)self delegateAsResponder];
    char v6 = +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate];
    id v22 = (void *)v5;
    [v6 _beginPinningInputViewsOnBehalfOfResponder:v5];

    id v23 = v4;
    id v7 = [v4 contents];
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    id v8 = +[UIKBAutofillController preferredInsertionOrder];
    uint64_t v9 = [v8 countByEnumeratingWithState:&v24 objects:v28 count:16];
    if (v9)
    {
      uint64_t v10 = v9;
      char v11 = 0;
      uint64_t v12 = *(void *)v25;
      do
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          if (*(void *)v25 != v12) {
            objc_enumerationMutation(v8);
          }
          uint64_t v14 = *(void *)(*((void *)&v24 + 1) + 8 * i);
          BOOL v15 = [v7 objectForKey:v14];

          if (v15)
          {
            id v16 = [(_UIKeyboardStateManager *)self autofillController];
            uint64_t v17 = [v16 autofillGroup];
            int v18 = [v17 objectForKey:v14];

            [v18 becomeFirstResponder];
            +[_UIKeyboardUsageTracking appAutofillDetectedDecrement];
            BOOL v19 = [v7 objectForKey:v14];
            [(_UIKeyboardStateManager *)self replaceAllTextInResponder:v18 withText:v19];

            char v11 = 1;
          }
        }
        uint64_t v10 = [v8 countByEnumeratingWithState:&v24 objects:v28 count:16];
      }
      while (v10);
    }
    else
    {
      char v11 = 0;
    }

    uint64_t v20 = +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate];
    [v20 _stopPinningInputViewsOnBehalfOfResponder:v22];

    id v4 = v23;
  }
  else
  {
    char v11 = 0;
  }

  return v11 & 1;
}

- (void)performKeyboardOutputInfo:(id)a3
{
  uint64_t v158 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  char v6 = v5;
  if (v5)
  {
    uint64_t v7 = *MEMORY[0x1E4FAE8D8];
    v143 = [v5 objectForKey:*MEMORY[0x1E4FAE8D8]];
    if (v143
      && ([(_UIKeyboardStateManager *)self textInputTraits],
          id v8 = objc_claimAutoreleasedReturnValue(),
          int v9 = [v8 acceptsPayloads],
          v8,
          v9))
    {
      uint64_t v10 = +[UITextInputPayloadController sharedInstance];
      char v11 = [v10 payloadDelegate];

      if (v11)
      {
        uint64_t v12 = (void *)[v6 mutableCopy];
        [v12 removeObjectForKey:v7];
        [v11 handlePayload:v12 withPayloadId:v143];
      }
    }
    else
    {
      id v13 = [v6 objectForKey:*MEMORY[0x1E4FAE920]];
      int v14 = [v13 BOOLValue];

      if (v14) {
        [(_UIKeyboardStateManager *)self performSendCurrentLocation];
      }
    }
    if ([(_UIKeyboardStateManager *)self dontPushOneTimeCode]
      || ([v6 objectForKey:@"AutofillOneTimeCodeAvailable"],
          BOOL v15 = objc_claimAutoreleasedReturnValue(),
          (id v141 = v15) == 0))
    {
      id v141 = 0;
    }
    else if ([v15 BOOLValue])
    {
      [(_UIKeyboardStateManager *)self refreshKeyboardState];
      [(_UIKeyboardStateManager *)self generateAutofillCandidate];
    }
    char v142 = [v6 objectForKey:@"ExternalCredentialData"];
    id v16 = v142;
    if (v142)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        UIKeyboardSafariPresentExternalCredentialViewControllerForCredentialData(v142);
LABEL_108:

        goto LABEL_109;
      }
    }
    self->m_isAutofilling = 1;
    uint64_t v17 = [(_UIKeyboardStateManager *)self autofillController];
    int v18 = [v17 autofillGroup];
    BOOL v19 = [v18 objectForKey:@"UIAutofillContextKey"];

    if (!v19)
    {
      if (AutoFillUILibraryCore()
        && ([(_UIKeyboardStateManager *)self inputDelegateManager],
            uint64_t v20 = objc_claimAutoreleasedReturnValue(),
            int v21 = [v20 hasAsyncCapableInputDelegate],
            v20,
            v21))
      {
        id v22 = [(_UIKeyboardStateManager *)self autofillController];
        id v23 = [v22 autofillGroup];
        uint64_t v153 = 0;
        v154 = &v153;
        uint64_t v155 = 0x2020000000;
        long long v24 = (void *)qword_1EB25FDF8;
        uint64_t v156 = qword_1EB25FDF8;
        if (!qword_1EB25FDF8)
        {
          uint64_t v148 = MEMORY[0x1E4F143A8];
          uint64_t v149 = 3221225472;
          int v150 = __getAFUIAutoFillContextKeySymbolLoc_block_invoke;
          v151 = &unk_1E52D9900;
          char v152 = &v153;
          long long v25 = AutoFillUILibrary();
          v154[3] = (uint64_t)dlsym(v25, "AFUIAutoFillContextKey");
          qword_1EB25FDF8 = *(void *)(v152[1] + 24);
          long long v24 = (void *)v154[3];
        }
        _Block_object_dispose(&v153, 8);
        if (!v24)
        {
          v132 = [MEMORY[0x1E4F28B00] currentHandler];
          BOOL v133 = [NSString stringWithUTF8String:"NSString *getAFUIAutoFillContextKey(void)"];
          objc_msgSend(v132, "handleFailureInFunction:file:lineNumber:description:", v133, @"_UIKeyboardStateManager.m", 292, @"%s", dlerror());

          goto LABEL_114;
        }
        BOOL v19 = [v23 objectForKey:*v24];
      }
      else
      {
        BOOL v19 = 0;
      }
    }
    unsigned __int16 v138 = v19;
    uint64_t v26 = [v19 count];
    uint64_t v27 = *MEMORY[0x1E4FAE938];
    if (!v26) {
      goto LABEL_52;
    }
    uint64_t v28 = [v6 objectForKey:*MEMORY[0x1E4FAE938]];
    if (v28)
    {
    }
    else
    {
      uint64_t v29 = [v6 objectForKey:*MEMORY[0x1E4FAE918]];
      BOOL v30 = v29 == 0;

      if (v30) {
        goto LABEL_52;
      }
    }
    uint64_t v31 = [(_UIKeyboardStateManager *)self inputDelegate];
    id v32 = [v19 objectForKey:@"_WebViewURL"];

    if (v31) {
      goto LABEL_47;
    }
    BOOL v33 = v32 != 0;
    id v34 = [(_UIKeyboardStateManager *)self delegateAsResponder];
    if (!v34) {
      BOOL v33 = 0;
    }

    if (v33)
    {
      uint64_t v31 = [(_UIKeyboardStateManager *)self delegateAsResponder];
      if (v31) {
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v31 = 0;
    }
    if (!v32) {
      goto LABEL_46;
    }
    uint64_t v35 = [(_UIKeyboardStateManager *)self autofillController];
    id v36 = [v35 autofillGroup];
    id v37 = [v36 objectForKey:@"UIAutofillPossibleRespondersKey"];

    if (!AutoFillUILibraryCore() || v37)
    {
LABEL_43:
      uint64_t v31 = [v37 firstObject];
      if (objc_opt_respondsToSelector()) {
        [v31 becomeFirstResponder];
      }

LABEL_46:
      if (!v31)
      {
        objc_storeStrong((id *)&self->m_autofillCustomInfo, a3);
        goto LABEL_52;
      }
LABEL_47:
      id v42 = [(_UIKeyboardStateManager *)self autofillController];
      unsigned int v43 = [v42 autofillContextForInputDelegate:v31];

      if ([v43 count] && (objc_msgSend(v138, "isEqualToDictionary:", v43) & 1) != 0)
      {
        uint64_t v44 = [v6 objectForKey:v27];
        BOOL v45 = [v6 objectForKey:*MEMORY[0x1E4FAE918]];
        uint64_t v46 = +[UITextAutofillSuggestion autofillSuggestionWithUsername:v44 password:v45];

        uint64_t v47 = [(_UIKeyboardStateManager *)self inputDelegateManager];
        LOBYTE(v44) = [v47 insertTextSuggestion:v46];

        if (v44)
        {
          char v48 = 0;
          char v49 = 1;
          goto LABEL_55;
        }
      }
      else
      {
      }
LABEL_52:
      long long v50 = [v6 objectForKey:v27];
      BOOL v51 = v50 == 0;

      if (v51)
      {
        char v49 = 0;
        char v48 = 0;
      }
      else
      {
        long long v52 = [(_UIKeyboardStateManager *)self autofillController];
        long long v53 = [v52 autofillGroup];
        long long v54 = [v53 objectForKey:@"username"];

        [v54 becomeFirstResponder];
        +[_UIKeyboardUsageTracking appAutofillDetectedDecrement];
        long long v55 = [v6 objectForKey:v27];
        [(_UIKeyboardStateManager *)self replaceAllTextInResponder:v54 withText:v55];

        char v49 = 0;
        char v48 = 1;
      }
LABEL_55:
      uint64_t v56 = *MEMORY[0x1E4FAE930];
      char v57 = [v6 objectForKey:*MEMORY[0x1E4FAE930]];

      if (!v57) {
        goto LABEL_65;
      }
      uint64_t v58 = [(_UIKeyboardStateManager *)self autofillController];
      char v59 = [v58 autofillGroup];
      char v60 = [v59 objectForKey:@"username"];

      int v61 = [(_UIKeyboardStateManager *)self autofillController];
      uint64_t v62 = [v61 autofillGroup];
      double v63 = v62;
      if (v60)
      {
        uint64_t v64 = [v62 objectForKey:@"username"];
      }
      else
      {
        id v65 = [v62 objectForKey:@"email"];

        if (!v65)
        {
          id v66 = 0;
LABEL_61:
          [v66 becomeFirstResponder];
          id v67 = [v6 objectForKey:v56];
          [(_UIKeyboardStateManager *)self replaceAllTextInResponder:v66 withText:v67];

          int v68 = [(_UIKeyboardStateManager *)self autofillController];
          id v69 = [v68 autofillGroup];
          char v70 = [v69 objectForKey:@"password"];

          if (v70) {
            goto LABEL_63;
          }
          id v71 = [(_UIKeyboardStateManager *)self autofillController];
          char v72 = [v71 autofillGroup];
          char v70 = [v72 objectForKey:@"new-password"];

          if (v70)
          {
LABEL_63:
            [v66 resignFirstResponder];
            [v70 becomeFirstResponder];
          }
LABEL_65:
          uint64_t v73 = *MEMORY[0x1E4FAE908];
          char v74 = [v6 objectForKey:*MEMORY[0x1E4FAE908]];

          if (!v74) {
            goto LABEL_82;
          }
          char v75 = [(_UIKeyboardStateManager *)self autofillController];
          uint64_t v76 = [v75 autofillGroup];
          char v77 = [(id)v76 objectForKey:@"one-time-code"];

          char v78 = [(_UIKeyboardStateManager *)self delegateAsResponder];
          LOBYTE(v76) = [v78 isFirstResponder];

          if ((v76 & 1) == 0)
          {
            char v79 = [(_UIKeyboardStateManager *)self delegateAsResponder];
            [v79 becomeFirstResponder];
          }
          char v80 = [v6 objectForKey:v73];
          int v81 = [(_UIKeyboardStateManager *)self inputDelegate];
          if (v77 == v81)
          {
            objc_opt_class();
            char isKindOfClass = objc_opt_isKindOfClass();

            if (isKindOfClass)
            {
              [(_UIKeyboardStateManager *)self replaceAllTextInResponder:v77 withText:&stru_1ED0E84C0];
              int v83 = [v80 length];
              if (v83 >= 1)
              {
                uint64_t v84 = 0;
                uint64_t v85 = v83;
                do
                {
                  char v86 = objc_msgSend(v80, "substringWithRange:", v84, 1);
                  if ([(_UIKeyboardStateManager *)self callShouldInsertText:v86])
                  {
                    BOOL v87 = [(_UIKeyboardStateManager *)self inputDelegateManager];
                    [v87 insertText:v86];
                  }
                  ++v84;
                }
                while (v85 != v84);
              }
              goto LABEL_81;
            }
          }
          else
          {
          }
          if (objc_opt_respondsToSelector())
          {
            [v77 setText:v80];
          }
          else if ([v77 conformsToProtocol:&unk_1ED42EEC0])
          {
            [v77 insertText:v80];
          }
LABEL_81:
          char v88 = [(_UIKeyboardStateManager *)self inputDelegateManager];
          [v88 moveSelectionToEndOfWord];

          id v89 = [(_UIKeyboardStateManager *)self inputDelegate];
          int64_t v90 = [(_UIKeyboardStateManager *)self needAutofillCandidate:v89];
          id v91 = [(_UIKeyboardStateManager *)self autofillController];
          [v91 setDelegateNeedsAutofillMode:v90];

LABEL_82:
          if ((v49 & 1) == 0)
          {
            uint64_t v92 = *MEMORY[0x1E4FAE918];
            id v93 = [v6 objectForKey:*MEMORY[0x1E4FAE918]];
            BOOL v94 = v93 == 0;

            if (!v94)
            {
              char v95 = [(_UIKeyboardStateManager *)self autofillController];
              BOOL v96 = [v95 autofillGroup];
              v97 = [v96 objectForKey:@"password"];

              [v97 becomeFirstResponder];
              +[_UIKeyboardUsageTracking appAutofillDetectedDecrement];
              int v98 = [v6 objectForKey:v92];
              [(_UIKeyboardStateManager *)self replaceAllTextInResponder:v97 withText:v98];

              char v48 = 1;
            }
          }
          id v99 = [v6 objectForKey:@"NewPassword"];

          if (v99)
          {
            BOOL v100 = [(_UIKeyboardStateManager *)self autofillController];
            BOOL v101 = [v100 autofillGroup];
            char v102 = [v101 objectForKey:@"new-password"];

            [v102 becomeFirstResponder];
            +[_UIKeyboardUsageTracking appAutofillDetectedDecrement];
            v103 = [v6 objectForKey:@"NewPassword"];
            [(_UIKeyboardStateManager *)self replaceAllTextInResponder:v102 withText:v103];

            char v48 = 1;
          }
          char v104 = [v6 objectForKey:@"AutofillCellularEID"];

          if (v104)
          {
            id v105 = [(_UIKeyboardStateManager *)self autofillController];
            int v106 = [v105 autofillGroup];
            id v107 = [v106 objectForKey:@"esim-eid"];

            [v107 becomeFirstResponder];
            +[_UIKeyboardUsageTracking appAutofillDetectedDecrement];
            int v108 = [v6 objectForKey:@"AutofillCellularEID"];
            [(_UIKeyboardStateManager *)self replaceAllTextInResponder:v107 withText:v108];

            char v48 = 1;
          }
          char v109 = [v6 objectForKey:@"AutofillCellularIMEI"];

          if (v109)
          {
            int v110 = [(_UIKeyboardStateManager *)self autofillController];
            id v111 = [v110 autofillGroup];
            char v112 = [v111 objectForKey:@"esim-imei"];

            [v112 becomeFirstResponder];
            +[_UIKeyboardUsageTracking appAutofillDetectedDecrement];
            id v113 = [v6 objectForKey:@"AutofillCellularIMEI"];
            [(_UIKeyboardStateManager *)self replaceAllTextInResponder:v112 withText:v113];

            char v48 = 1;
          }
          int v140 = [(_UIKeyboardStateManager *)self delegateAsResponder];
          v114 = [(_UIKeyboardStateManager *)self autofillController];
          unsigned __int16 v139 = [v114 textContentTypeForInputDelegate:v140];

          char v115 = [v6 objectForKey:v139];

          if (v115)
          {
            BOOL v137 = +[UIAutoFillTextSuggestion autoFillSuggestionWithContents:v6];
            char v116 = [(_UIKeyboardStateManager *)self inputDelegateManager];
            char v117 = [v116 insertTextSuggestion:v137];

            if ((v117 & 1) == 0)
            {
              v136 = [(_UIKeyboardStateManager *)self delegateAsResponder];
              v118 = +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate];
              [v118 _beginPinningInputViewsOnBehalfOfResponder:v136];

              long long v146 = 0u;
              long long v147 = 0u;
              long long v144 = 0u;
              long long v145 = 0u;
              char v119 = +[UIKBAutofillController preferredInsertionOrder];
              uint64_t v120 = [v119 countByEnumeratingWithState:&v144 objects:v157 count:16];
              if (v120)
              {
                uint64_t v121 = *(void *)v145;
                do
                {
                  for (uint64_t i = 0; i != v120; ++i)
                  {
                    if (*(void *)v145 != v121) {
                      objc_enumerationMutation(v119);
                    }
                    uint64_t v123 = *(void *)(*((void *)&v144 + 1) + 8 * i);
                    unsigned int v124 = [v6 objectForKey:v123];

                    if (v124)
                    {
                      int v125 = [(_UIKeyboardStateManager *)self autofillController];
                      v126 = [v125 autofillGroup];
                      unsigned __int16 v127 = [v126 objectForKey:v123];

                      [v127 becomeFirstResponder];
                      +[_UIKeyboardUsageTracking appAutofillDetectedDecrement];
                      unsigned __int16 v128 = [v6 objectForKey:v123];
                      [(_UIKeyboardStateManager *)self replaceAllTextInResponder:v127 withText:v128];

                      char v48 = 1;
                    }
                  }
                  uint64_t v120 = [v119 countByEnumeratingWithState:&v144 objects:v157 count:16];
                }
                while (v120);
              }

              int v129 = +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate];
              [v129 _stopPinningInputViewsOnBehalfOfResponder:v136];

              if ((v48 & 1) == 0)
              {
                uint64_t v130 = [v6 objectForKey:&stru_1ED0E84C0];
                objc_opt_class();
                if (objc_opt_isKindOfClass())
                {
                  char v131 = [(_UIKeyboardStateManager *)self inputDelegate];
                  [(_UIKeyboardStateManager *)self replaceAllTextInResponder:v131 withText:v130];
                }
              }
            }
          }
          +[_UIKeyboardUsageTracking appAutofillFilled];
          self->m_isAutofilling = 0;

          id v16 = v142;
          goto LABEL_108;
        }
        int v61 = [(_UIKeyboardStateManager *)self autofillController];
        double v63 = [v61 autofillGroup];
        uint64_t v64 = [v63 objectForKey:@"email"];
      }
      id v66 = (void *)v64;

      goto LABEL_61;
    }
    char v38 = [(_UIKeyboardStateManager *)self autofillController];
    id v39 = [v38 autofillGroup];
    uint64_t v153 = 0;
    v154 = &v153;
    uint64_t v155 = 0x2020000000;
    uint64_t v40 = (void *)qword_1EB25FE00;
    uint64_t v156 = qword_1EB25FE00;
    if (!qword_1EB25FE00)
    {
      uint64_t v148 = MEMORY[0x1E4F143A8];
      uint64_t v149 = 3221225472;
      int v150 = __getAFUIAutoFillPossibleRespondersKeySymbolLoc_block_invoke;
      v151 = &unk_1E52D9900;
      char v152 = &v153;
      id v41 = AutoFillUILibrary();
      v154[3] = (uint64_t)dlsym(v41, "AFUIAutoFillPossibleRespondersKey");
      qword_1EB25FE00 = *(void *)(v152[1] + 24);
      uint64_t v40 = (void *)v154[3];
    }
    _Block_object_dispose(&v153, 8);
    if (v40)
    {
      id v37 = [v39 objectForKey:*v40];

      goto LABEL_43;
    }
    v134 = [MEMORY[0x1E4F28B00] currentHandler];
    char v135 = [NSString stringWithUTF8String:"NSString *getAFUIAutoFillPossibleRespondersKey(void)"];
    objc_msgSend(v134, "handleFailureInFunction:file:lineNumber:description:", v135, @"_UIKeyboardStateManager.m", 291, @"%s", dlerror());

LABEL_114:
    __break(1u);
  }
LABEL_109:
}

- (void)_cancelPendingSupplementalCandidateInsertion
{
  uint64_t v3 = [(_UIKeyboardStateManager *)self pendingSupplementalCandidateToInsert];
  if (v3)
  {
    id v4 = (void *)v3;
    id v5 = [(_UIKeyboardStateManager *)self inputDelegate];
    char v6 = objc_opt_respondsToSelector();

    if (v6)
    {
      self->m_textInputChangesIgnored = 1;
      uint64_t v7 = [(_UIKeyboardStateManager *)self inputDelegate];
      [v7 _cancelChooseSupplementalItemToInsert];

      self->m_textInputChangesIgnored = 0;
    }
  }
  [(_UIKeyboardStateManager *)self setPendingSupplementalCandidateToInsert:0];
}

- (void)insertDictationResult:(id)a3
{
  id v4 = a3;
  id v5 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  [v5 insertDictationResult:v4];
}

- (void)handleRemoteIndirectGestureWithState:(id)a3
{
  id v12 = a3;
  id v4 = [(_UIKeyboardStateManager *)self delegateAsResponder];
  id v5 = [v4 _responderForEditing];
  char v6 = objc_msgSend(v5, "__textInteractionFromAssistant");

  uint64_t v7 = [v6 interactionWithGestureForName:0x1ED14EF60];
  if (!v7)
  {
    uint64_t v7 = [v6 interactionWithGestureForName:0x1ED14EF80];
    if (!v7)
    {
      customInputDelegateSelectionInteraction = self->_customInputDelegateSelectionInteraction;
      if (!customInputDelegateSelectionInteraction)
      {
        int v9 = +[_UIKeyboardTextSelectionGestureController sharedInstance];
        uint64_t v10 = [v9 textSelectionInteractionForRTIForwarding];
        char v11 = self->_customInputDelegateSelectionInteraction;
        self->_customInputDelegateSelectionInteraction = v10;

        customInputDelegateSelectionInteraction = self->_customInputDelegateSelectionInteraction;
      }
      uint64_t v7 = customInputDelegateSelectionInteraction;
    }
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    [(_UIKeyboardTextSelectionInteraction *)v7 handleRemoteIndirectGestureWithState:v12];
  }
}

- (void)performKeyboardOutput:(id)a3
{
  id v7 = a3;
  id v4 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  id v5 = [v4 forwardingInputDelegate];
  BOOL v6 = v5 == 0;

  [(_UIKeyboardStateManager *)self performKeyboardOutput:v7 forwardToRemoteInputSource:v6];
}

- (void)performKeyboardOutput:(id)a3 forwardToRemoteInputSource:(BOOL)a4
{
  [(_UIKeyboardStateManager *)self performKeyboardOutput:a3 checkingDelegate:0 forwardToRemoteInputSource:a4];
  [(_UIKeyboardStateManager *)self _cancelPendingSupplementalCandidateInsertion];
  id v5 = [(_UIKeyboardStateManager *)self lastMatchedSupplementalCandidate];

  if (v5)
  {
    [(_UIKeyboardStateManager *)self generateCandidates];
  }
}

- (BOOL)performKeyboardEvent:(id)a3
{
  id v4 = a3;
  if ([v4 keyEventForwardedFromInputUIHost])
  {
    if (qword_1EB25F958 != -1) {
      dispatch_once(&qword_1EB25F958, &__block_literal_global_1039);
    }
    id v5 = [(_UIKeyboardStateManager *)self taskQueue];
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __48___UIKeyboardStateManager_performKeyboardEvent___block_invoke_3;
    void v12[3] = &unk_1E52E3628;
    void v12[4] = self;
    id v13 = v4;
    [v5 addTask:v12 breadcrumb:qword_1EB25F950];

    BOOL v6 = v13;
LABEL_10:

    BOOL v7 = 1;
    goto LABEL_11;
  }
  if (![v4 keyCommandHandlingBeforePublic])
  {
    if (qword_1EB25F968 != -1) {
      dispatch_once(&qword_1EB25F968, &__block_literal_global_1045);
    }
    id v8 = [(_UIKeyboardStateManager *)self taskQueue];
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    void v10[2] = __48___UIKeyboardStateManager_performKeyboardEvent___block_invoke_6;
    v10[3] = &unk_1E52E3628;
    void v10[4] = self;
    id v11 = v4;
    [v8 addTask:v10 breadcrumb:qword_1EB25F960];

    BOOL v6 = v11;
    goto LABEL_10;
  }
  BOOL v7 = [(_UIKeyboardStateManager *)self handleKeyCommandsBeforePublicAsInputUIHost:v4];
LABEL_11:

  return v7;
}

- (void)performKeyboardOutputAsRTIClient:(id)a3
{
  id v4 = a3;
  if (qword_1EB25F978 != -1) {
    dispatch_once(&qword_1EB25F978, &__block_literal_global_1049);
  }
  id v5 = [(_UIKeyboardStateManager *)self taskQueue];
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = __60___UIKeyboardStateManager_performKeyboardOutputAsRTIClient___block_invoke_3;
  v8[3] = &unk_1E52E3628;
  v8[4] = self;
  id v9 = v4;
  uint64_t v6 = qword_1EB25F970;
  id v7 = v4;
  [v5 addTask:v8 breadcrumb:v6];
}

- (void)performKeyboardOutput:(id)a3 checkingDelegate:(BOOL)a4
{
}

- (BOOL)performKeyboardOutput:(id)a3 checkingDelegate:(BOOL)a4 forwardToRemoteInputSource:(BOOL)a5
{
  BOOL v140 = a4;
  BOOL v141 = a5;
  uint64_t v155 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = _UIKeyboardLog();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    v126 = "NO";
    *(void *)&uint8_t buf[4] = "-[_UIKeyboardStateManager performKeyboardOutput:checkingDelegate:forwardToRemoteInputSource:]";
    if (v140) {
      unsigned __int16 v127 = "YES";
    }
    else {
      unsigned __int16 v127 = "NO";
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&buf[14] = v127;
    *(_WORD *)&buf[12] = 2080;
    if (v141) {
      v126 = "YES";
    }
    *(_WORD *)&buf[22] = 2080;
    v154 = v126;
    _os_log_debug_impl(&dword_1853B0000, v9, OS_LOG_TYPE_DEBUG, "%s shouldCheckDelegate=%s, forwardToRemote=%s", buf, 0x20u);
  }

  *(void *)buf = 0;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&buf[16] = 0x2020000000;
  LOBYTE(v154) = 0;
  if (+[UIDictationController isRunning]
    && (+[UIKeyboard isKeyboardProcess]
     || !+[UIKeyboard usesInputSystemUI]))
  {
    [(_UIKeyboardStateManager *)self updateIdleDetection:2];
  }
  uint64_t v10 = [(_UIKeyboardStateManager *)self inlineTextCompletionController];
  [v10 willPerformKeyboardOutput:v8];

  if (!v141)
  {
    id v9 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    id v5 = [v9 inputSystemSourceSession];
    if (v5)
    {
      uint64_t v6 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      id v12 = [v6 forwardingInputDelegate];
      if (!v12) {
        goto LABEL_7;
      }
    }
LABEL_18:

    goto LABEL_19;
  }
LABEL_7:
  id v11 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];

  if (v141)
  {
    if (!v11) {
      goto LABEL_19;
    }
    goto LABEL_14;
  }

  if (v11)
  {
LABEL_14:
    if (+[UIKeyboard isKeyboardProcess])
    {
      id v13 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      int v14 = [v13 delegateAdoptsWebTextInputPrivate];

      if (v14) {
        [(_UIKeyboardStateManager *)self updateChangeTimeAndIncrementCount];
      }
    }
    v148[0] = MEMORY[0x1E4F143A8];
    v148[1] = 3221225472;
    v148[2] = __93___UIKeyboardStateManager_performKeyboardOutput_checkingDelegate_forwardToRemoteInputSource___block_invoke;
    v148[3] = &unk_1E52E39B8;
    uint64_t v149 = v8;
    int v150 = self;
    v151 = buf;
    [(_UIKeyboardStateManager *)self performKeyboardOutputOnInputSourceSession:v148 shouldFlush:0];
    id v9 = v149;
    goto LABEL_18;
  }
LABEL_19:
  self->m_didSyncDocumentStateToInputDelegate = 0;
  BOOL v15 = [v8 acceptedCandidate];

  if (v15)
  {
    id v16 = [v8 acceptedCandidate];
    BOOL v17 = [(_UIKeyboardStateManager *)self acceptAutofillExtraCandidateIfNeeded:v16];

    if (!v17)
    {
      if (!+[UIKeyboard usesInputSystemUI]) {
        goto LABEL_24;
      }
      int v18 = [v8 acceptedCandidate];
      int v19 = [v18 isSupplementalItemCandidate];

      if (!v19
        || ([v8 acceptedCandidate],
            uint64_t v20 = objc_claimAutoreleasedReturnValue(),
            BOOL v21 = [(_UIKeyboardStateManager *)self _insertSupplementalCandidate:v20 overridingCandidateText:0], v20, !v21))
      {
LABEL_24:
        id v22 = [v8 acceptedCandidate];
        [(_UIKeyboardStateManager *)self acceptCandidate:v22];
      }
    }
  }
  if (*(unsigned char *)(*(void *)&buf[8] + 24)) {
    [(_UIKeyboardStateManager *)self flushKeyboardOutputOnInputSourceSession];
  }
  if (+[UIKeyboard usesInputSystemUI]
    && [v8 positionOffset])
  {
    int v23 = [v8 positionOffset];
    long long v24 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    [v24 collapseSelectionAndAdjustByOffset:v23];

    BOOL v25 = 0;
  }
  else
  {
    BOOL v25 = 1;
  }
  uint64_t v26 = [v8 textToCommit];

  if (v26)
  {
    uint64_t v27 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    uint64_t v28 = [v8 deletionCount];
    uint64_t v29 = [v8 textToCommit];
    LODWORD(v28) = [v27 callShouldReplaceExtendedRange:v28 withText:v29 includeMarkedText:1];

    if (v28)
    {
      BOOL v30 = [v8 textToCommit];
      [(_UIKeyboardStateManager *)self unmarkText:v30];
    }
    else
    {
      [(_UIKeyboardStateManager *)self unmarkText:&stru_1ED0E84C0];
      BOOL v25 = 0;
    }
  }
  if ([v8 unmarkIfNecessary]
    && [(_UIKeyboardStateManager *)self _hasMarkedText])
  {
    self->m_textInputChangesIgnored = 1;
    uint64_t v31 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    [v31 unmarkText];

    self->m_textInputChangesIgnored = 0;
  }
  if ([v8 forwardDeletionCount])
  {
    for (unint64_t i = 0; i < [v8 forwardDeletionCount]; ++i)
      -[_UIKeyboardStateManager deleteForwardAndNotify:producedByDeleteInput:](self, "deleteForwardAndNotify:producedByDeleteInput:", 0, [v8 producedByDeleteInput]);
  }
  BOOL v33 = [v8 insertionTextAfterSelection];

  if (v33)
  {
    self->m_suppressingDocumentAssertions = 1;
    id v34 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    uint64_t v35 = [v8 insertionTextAfterSelection];
    [v34 insertTextAfterSelection:v35];

    self->m_suppressingDocumentAssertions = 0;
  }
  uint64_t v139 = [v8 performSelector:sel_producedByDeleteInput];
  if ([v8 deletionCount])
  {
    if (v140
      && v139
      && ([(_UIKeyboardStateManager *)self inputDelegateManager],
          id v36 = objc_claimAutoreleasedReturnValue(),
          int v37 = objc_msgSend(v36, "callShouldDeleteBackwardWithCount:", objc_msgSend(v8, "deletionCount")),
          v36,
          !v37))
    {
      id v43 = objc_alloc_init(MEMORY[0x1E4F95EB8]);
      id v44 = objc_alloc_init(MEMORY[0x1E4FAE328]);
      [v43 setKeyboardInput:v44];

      id v45 = objc_alloc_init(MEMORY[0x1E4FAE370]);
      uint64_t v46 = [v43 keyboardInput];
      [v46 setOutput:v45];

      [v45 setDeletionCount:0];
      uint64_t v47 = [v8 insertionText];
      int v48 = [v47 length];

      for (unsigned int j = v48 - 1; (j & 0x80000000) == 0; j -= v52)
      {
        objc_msgSend(v45, "setDeletionCount:", objc_msgSend(v45, "deletionCount") + 1);
        long long v50 = [v8 insertionText];
        [v50 _rangeOfBackwardDeletionClusterAtIndex:j];
        int v52 = v51;
      }
      long long v53 = [MEMORY[0x1E4F28E78] string];
      long long v54 = [(_UIKeyboardStateManager *)self documentState];
      long long v55 = [v54 contextBeforeInput];

      LODWORD(v54) = [v55 length];
      int v56 = [v8 deletionCount];
      unsigned int v57 = v54 - 1;
      if ((int)v54 - 1 >= 0)
      {
        int v58 = v56;
        if (v56 >= 1)
        {
          do
          {
            uint64_t v59 = [v55 _rangeOfBackwardDeletionClusterAtIndex:v57];
            int v61 = v60;
            uint64_t v62 = objc_msgSend(v55, "substringWithRange:", v59, v60);
            [v53 insertString:v62 atIndex:0];

            v57 -= v61;
            if ((v57 & 0x80000000) != 0) {
              break;
            }
          }
          while (v58-- > 1);
        }
      }
      [v45 setInsertionText:v53];
      uint64_t v64 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
      [v64 performInputOperation:v43];

      [v8 setInsertionText:0];
      BOOL v25 = 0;
    }
    else
    {
      char v38 = [v8 insertionText];

      if (v38)
      {
        id v39 = [(_UIKeyboardStateManager *)self asyncCapableInputDelegate];
        BOOL v40 = v39 == 0;
      }
      else
      {
        BOOL v40 = 0;
      }
      -[_UIKeyboardStateManager deleteBackwardAndNotifyAtEnd:deletionCount:reinsertTextInLoop:](self, "deleteBackwardAndNotifyAtEnd:deletionCount:reinsertTextInLoop:", v38 == 0, [v8 deletionCount], v40);
    }
    id v42 = +[UIDictationController activeInstance];
    [v42 markKeyboardDeleteMetricEvent];
  }
  else
  {
    id v41 = +[UIDictationController activeInstance];
    [v41 markKeyboardInputMetricEvent];

    id v42 = +[UIDictationController activeInstance];
    [v42 markDictationTipInputEvent];
  }

  if (_os_feature_enabled_impl())
  {
    id v65 = [v8 acceptedCandidate];
    id v66 = [v65 stickerIdentifier];
    if (v66)
    {
      id v67 = [v8 acceptedCandidate];
      BOOL v68 = [v67 customInfoType] == 4096;

      if (v68)
      {
        id v69 = [v8 acceptedCandidate];
        char v70 = [v69 stickerIdentifier];

        v152[0] = @"com.apple.stickers.role.still";
        v152[1] = @"com.apple.stickers.role.animated";
        v152[2] = @"com.apple.stickers.role.stillVariant_40";
        v152[3] = @"com.apple.stickers.role.stillVariant_64";
        v152[4] = @"com.apple.stickers.role.stillVariant_96";
        v152[5] = @"com.apple.stickers.role.stillVariant_160";
        v152[6] = @"com.apple.stickers.role.stillVariant_320";
        id v71 = [MEMORY[0x1E4F1C978] arrayWithObjects:v152 count:7];
        char v72 = [(_UIKeyboardStateManager *)self backendController];
        [v72 stickerWithIdentifier:v70 stickerRoles:v71 completionHandler:&__block_literal_global_1062];

        goto LABEL_72;
      }
    }
    else
    {
    }
  }
  uint64_t v73 = [v8 insertionText];
  if (![v73 length])
  {

    goto LABEL_72;
  }
  char v74 = [v8 customInfo];
  char v75 = [v74 objectForKey:@"AutofillOneTimeCode"];
  BOOL v76 = v75 == 0;

  if (v76)
  {
    char v77 = +[UIKeyboardInputModeController sharedInputModeController];
    char v78 = [v77 currentInputMode];
    char v79 = [v78 identifier];
    int v80 = [v79 isEqualToString:@"autofillsignup"];

    if (v80)
    {
      int v81 = +[UIKeyboardInputModeController sharedInputModeController];
      char v82 = [v81 currentLinguisticInputMode];
      char v83 = [v82 isDefaultRightToLeft];

      uint64_t v84 = [(_UIKeyboardStateManager *)self autofillController];
      v145[0] = MEMORY[0x1E4F143A8];
      v145[1] = 3221225472;
      v145[2] = __93___UIKeyboardStateManager_performKeyboardOutput_checkingDelegate_forwardToRemoteInputSource___block_invoke_4;
      v145[3] = &unk_1E52E3A00;
      v145[4] = self;
      id v146 = v8;
      char v147 = v83;
      [v84 enumeratePasswordFieldsUsingBlock:v145];

      goto LABEL_72;
    }
    if (v140)
    {
      uint64_t v123 = [v8 insertionText];
      BOOL v124 = [(_UIKeyboardStateManager *)self callShouldInsertText:v123];

      if (!v124)
      {
        BOOL v25 = 0;
        goto LABEL_72;
      }
    }
    if (_UIIsPrivateMainBundle() && !dyld_program_sdk_at_least())
    {
      int v125 = 0;
    }
    else
    {
      int v125 = 1;
      self->m_textInputChangesIgnored = 1;
    }
    unsigned __int16 v128 = [(_UIKeyboardStateManager *)self documentState];
    [v128 _selectedTextRange];
    if (v129)
    {
      uint64_t v130 = [(_UIKeyboardStateManager *)self documentState];
      char v131 = [v130 contextBeforeInput];
      if (!v131)
      {
        v136 = [(_UIKeyboardStateManager *)self documentState];
        BOOL v137 = [v136 contextAfterInput];
        BOOL v138 = v137 == 0;

        if (v138) {
          [(_UIKeyboardStateManager *)self setInitialDirectionIgnoreRangeCheck:1];
        }
        goto LABEL_129;
      }
    }
LABEL_129:
    v132 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    BOOL v133 = [v8 insertionText];
    [v132 insertText:v133];

    if (v139)
    {
      v134 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      [v134 callShouldDeleteBackwardWithCount:1];
    }
    if (v125) {
      self->m_textInputChangesIgnored = 0;
    }
    char v135 = _UIKeyboardLog();
    if (os_log_type_enabled(v135, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long v144 = 0;
      _os_log_impl(&dword_1853B0000, v135, OS_LOG_TYPE_DEFAULT, "Keyboard inserts text", v144, 2u);
    }
  }
LABEL_72:
  uint64_t v85 = [v8 shortcutConversion];
  if (v85)
  {
    BOOL v86 = +[UIKeyboard usesInputSystemUI];

    if (!v86)
    {
      BOOL v87 = [v8 shortcutConversion];
      char v88 = [(_UIKeyboardStateManager *)self documentState];
      id v89 = [v88 contextBeforeInput];

      if ([v8 deletionCount])
      {
        if (v89)
        {
          int64_t v90 = [v87 input];
          char v91 = [v89 hasSuffix:v90];

          if ((v91 & 1) == 0)
          {
            uint64_t v92 = [v8 insertionText];
            id v93 = [v87 candidate];
            uint64_t v94 = [v87 candidateByReplacingWithCandidate:v93 input:v92];

            BOOL v87 = (void *)v94;
          }
        }
      }
      [(_UIKeyboardStateManager *)self setAutocorrection:v87];
      if ([(_UIKeyboardStateManager *)self hasAutocorrectPrompt])
      {
        char v95 = [(_UIKeyboardStateManager *)self inputDelegateManager];
        BOOL v96 = [v95 asyncCapableInputDelegate];
        BOOL v97 = v96 == 0;

        if (!v97) {
          [(_UIKeyboardStateManager *)self removeAutocorrectPrompt];
        }
        int v98 = [v8 shortcutConversion];
        [(_UIKeyboardStateManager *)self updateAutocorrectPrompt:v98];
      }
      else
      {
        [(_UIKeyboardStateManager *)self touchAutocorrectPromptTimer];
      }
    }
  }
  id v99 = [v8 handwritingStrokesToDelete];

  if (v99)
  {
    BOOL v100 = [v8 handwritingStrokesToDelete];
    [(_UIKeyboardStateManager *)self deleteHandwritingStrokesAtIndexes:v100];
  }
  BOOL v101 = [v8 customInfo];

  if (v101)
  {
    char v102 = [v8 customInfo];
    [(_UIKeyboardStateManager *)self performKeyboardOutputInfo:v102];

    if (v141)
    {
      v103 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
      if (v103)
      {
        BOOL v104 = *(unsigned char *)(*(void *)&buf[8] + 24) == 0;

        if (v104)
        {
          v142[0] = MEMORY[0x1E4F143A8];
          v142[1] = 3221225472;
          v142[2] = __93___UIKeyboardStateManager_performKeyboardOutput_checkingDelegate_forwardToRemoteInputSource___block_invoke_1067;
          v142[3] = &unk_1E52E3A28;
          id v143 = v8;
          [(_UIKeyboardStateManager *)self performKeyboardOutputOnInputSourceSession:v142];
        }
      }
    }
  }
  id v105 = [(_UIKeyboardStateManager *)self inlineTextCompletionController];
  [v105 didPerformKeyboardOutput:v8];

  if (+[UIKeyboard usesInputSystemUI])
  {
    int v106 = [(UITextInputTraits *)self->m_traits textSuggestionDelegate];
    BOOL v107 = v106 == 0;

    if (!v107) {
      [(_UIKeyboardStateManager *)self delegateSuggestionsForCurrentInput];
    }
  }
  [(_UIKeyboardStateManager *)self _postInputResponderCapabilitiesChangedNotificationWithOutput:v8 selectionChanged:0];
  uint64_t v108 = [(_UIKeyboardStateManager *)self _acquireWaitingOnPerformAutocorrect];
  char v109 = (void *)v108;
  if (v108) {
    (*(void (**)(uint64_t, uint64_t))(v108 + 16))(v108, 1);
  }
  if (+[UITextSelectionDisplayInteraction isTextAccelerationUIEnabled])
  {
    if ([v8 deletionCount])
    {
      [(_UIKeyboardStateManager *)self removeTextChoicePromptWithUnderline];
      int v110 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      id v111 = [v110 selectedTextRange];

      if (v111)
      {
        char v112 = [(_UIKeyboardStateManager *)self _textChoicesAssistant];
        id v113 = [(_UIKeyboardStateManager *)self inputDelegateManager];
        v114 = [v113 selectedTextRange];
        char v115 = [v114 start];
        [v112 updateUnderlinesIfNeededAfterPosition:v115];
LABEL_102:
      }
    }
    else
    {
      char v116 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      char v117 = [v116 selectedTextRange];

      if (v117)
      {
        char v112 = [(_UIKeyboardStateManager *)self _textChoicesAssistant];
        id v113 = [(_UIKeyboardStateManager *)self inputDelegateManager];
        v114 = [v113 selectedTextRange];
        char v115 = [v114 start];
        [v112 clearUnderlinesIfNeededBeforePosition:v115];
        goto LABEL_102;
      }
    }
  }
  v118 = [v8 insertionText];
  if (![v118 length] && !objc_msgSend(v8, "deletionCount"))
  {
LABEL_110:

    goto LABEL_111;
  }
  BOOL v119 = +[UIKeyboard isKeyboardProcess];

  if (!v119)
  {
    uint64_t v120 = +[UIEventSessionActionAnalytics sharedInstance];
    v118 = v120;
    if (self->m_textInputSource == 4) {
      uint64_t v121 = 6;
    }
    else {
      uint64_t v121 = 5;
    }
    [v120 didTypingWithSource:v121];
    goto LABEL_110;
  }
LABEL_111:

  _Block_object_dispose(buf, 8);
  return v25;
}

- (void)generateCandidatesAsynchronously
{
  unint64_t v3 = [(TIKeyboardCandidateResultSet *)self->m_candidateResultSet generatedCandidateCount];
  id v4 = [(TIKeyboardCandidateResultSet *)self->m_candidateResultSet candidates];
  unint64_t v5 = [v4 count];

  if (v3 > v5)
  {
    id v6 = [(TIKeyboardCandidateResultSet *)self->m_candidateResultSet candidates];
    -[_UIKeyboardStateManager generateCandidatesAsynchronouslyWithRange:selectedCandidate:](self, "generateCandidatesAsynchronouslyWithRange:selectedCandidate:", [v6 count], 0x7FFFFFFFLL, 0);
  }
}

- (void)generateCandidatesAsynchronouslyWithRange:(_NSRange)a3 selectedCandidate:(id)a4
{
  NSUInteger length = a3.length;
  NSUInteger location = a3.location;
  v32[4] = *MEMORY[0x1E4F143B8];
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [(id)objc_opt_class() sendPerformanceNotification:@"UIKeyboardPerformanceSearchCandidatesStartNotification"];

  [(_UIKeyboardStateManager *)self cancelCandidateRequests];
  if (self->m_shiftNeedsUpdate)
  {
    self->m_shiftNeedsUpdate = 0;
    [(_UIKeyboardStateManager *)self updateShiftState];
  }
  [(_UIKeyboardStateManager *)self refreshKeyboardState];
  id v9 = (void *)[(TIKeyboardState *)self->m_keyboardState copy];
  objc_msgSend(v9, "setAutofillMode:", +[UIKBAutofillController translateToTextInputAutofillMode:](UIKBAutofillController, "translateToTextInputAutofillMode:", -[TIKeyboardState autofillMode](self->m_keyboardState, "autofillMode")));
  objc_msgSend(v9, "setAutofillSubMode:", +[UIKBAutofillController translateToTextInputAutofillMode:](UIKBAutofillController, "translateToTextInputAutofillMode:", -[TIKeyboardState autofillSubMode](self->m_keyboardState, "autofillSubMode")));
  uint64_t v10 = [MEMORY[0x1E4FAE288] tokenForKeyboardState:v9];
  [(_UIKeyboardStateManager *)self setCurrentCandidateRequest:v10];
  v31[0] = @"keyboardState";
  id v11 = v9;
  if (!v9)
  {
    id v11 = [MEMORY[0x1E4F1CA98] null];
  }
  v32[0] = v11;
  v31[1] = @"index";
  NSUInteger v25 = location;
  id v12 = [NSNumber numberWithUnsignedInteger:location];
  v32[1] = v12;
  v31[2] = @"candidateCount";
  NSUInteger v13 = length;
  int v14 = [NSNumber numberWithUnsignedInteger:length];
  v32[2] = v14;
  v31[3] = @"selectedCandidate";
  BOOL v15 = v7;
  if (!v7)
  {
    BOOL v15 = [MEMORY[0x1E4F1CA98] null];
  }
  v32[3] = v15;
  id v16 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v32 forKeys:v31 count:4];
  [(_UIKeyboardStateManager *)self setCurrentCandidateRequestInfo:v16];

  if (!v7) {
  if (!v9)
  }

  BOOL v17 = (const void *)arc4random();
  kdebug_trace();
  kac_get_log();
  int v18 = (id)objc_claimAutoreleasedReturnValue();
  os_signpost_id_t v19 = os_signpost_id_make_with_pointer(v18, v17);
  if (v19 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v20 = v19;
    if (os_signpost_enabled(v18))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1853B0000, v18, OS_SIGNPOST_INTERVAL_BEGIN, v20, "appCandidates", " enableTelemetry=YES ", buf, 2u);
    }
  }

  v26[0] = MEMORY[0x1E4F143A8];
  v26[1] = 3221225472;
  v26[2] = __87___UIKeyboardStateManager_generateCandidatesAsynchronouslyWithRange_selectedCandidate___block_invoke;
  v26[3] = &unk_1E52E3A78;
  v26[4] = self;
  id v27 = v10;
  id v28 = v9;
  uint64_t v29 = v17;
  id v21 = v9;
  id v22 = v10;
  int v23 = (void *)[v26 copy];
  long long v24 = [(_UIKeyboardStateManager *)self inputManager];
  objc_msgSend(v24, "generateCandidatesWithKeyboardState:candidateRange:requestToken:completionHandler:", v21, v25, v13, v22, v23);
}

- (void)cancelCandidateRequests
{
  [(_UIKeyboardStateManager *)self setCurrentCandidateRequest:0];
  [(_UIKeyboardStateManager *)self setCurrentCandidateRequestInfo:0];
  unint64_t v3 = [(_UIKeyboardStateManager *)self delayedCandidateRequest];
  [v3 invalidate];

  [(_UIKeyboardStateManager *)self setDelayedCandidateRequest:0];
}

- (BOOL)shouldPrioritizeTextSuggestionsOverCandidateResultSet:(id)a3
{
  id v4 = a3;
  unint64_t v5 = [v4 candidates];
  uint64_t v6 = [v5 count];
  if (!v6)
  {
    unint64_t v3 = [v4 committedText];
    if (![v3 length])
    {
      LOBYTE(v7) = 1;
LABEL_9:

      goto LABEL_10;
    }
  }
  LOBYTE(v7) = [v4 isDummySet];
  if ((v7 & 1) == 0 && [v4 hasOnlyCompletionCandidates]) {
    int v7 = [v4 hasAutofillCandidates] ^ 1;
  }
  if (!v6) {
    goto LABEL_9;
  }
LABEL_10:

  return v7;
}

- (int64_t)preferredCandidateViewTypeForCandidateResultSet:(id)a3
{
  id v4 = a3;
  unint64_t v5 = [(TIKeyboardState *)self->m_keyboardState inputForMarkedText];
  if (![v5 length]
    || ([v4 hasOnlyCompletionCandidates] & 1) != 0
    || ([v4 hasOnlySlottedCandidates] & 1) != 0)
  {
    int v6 = 1;
  }
  else
  {
    int v6 = [v4 hasOnlyProactiveCandidates];
  }

  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  id v8 = [WeakRetained candidateController];
  uint64_t v9 = [v8 activeCandidateViewType];

  if (v9 == 4 && (v6 & 1) != 0)
  {
    int64_t v10 = 0;
  }
  else if ([(_UIKeyboardStateManager *)self canUseCandidateBarAsSupplementToInlineView])
  {
    id v11 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    id v12 = [v11 candidateController];
    uint64_t v13 = [v12 activeCandidateViewType];

    uint64_t v14 = 4;
    if (v6) {
      uint64_t v14 = 2;
    }
    if (v13 == 6) {
      int64_t v10 = v14;
    }
    else {
      int64_t v10 = -1;
    }
  }
  else
  {
    int64_t v10 = -1;
  }

  return v10;
}

- (id)_rangeForSupplementalItemText:(id)a3
{
  id v4 = a3;
  self->m_textInputChangesIgnored = 1;
  unint64_t v5 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  int v6 = [v5 selectedTextRange];

  self->m_textInputChangesIgnored = 0;
  if (v6)
  {
    if ([v4 length])
    {
      self->m_textInputChangesIgnored = 1;
      unint64_t v7 = [v4 length];
      uint64_t v8 = [v6 end];
      uint64_t v9 = (void *)v8;
      if (v8 && v7)
      {
        unint64_t v10 = 1;
        while (1)
        {
          id v11 = [(_UIKeyboardStateManager *)self inputDelegateManager];
          id v12 = [v11 _rangeOfText:v4 endingAtPosition:v9];

          if (v12) {
            break;
          }
          uint64_t v13 = [(_UIKeyboardStateManager *)self inputDelegateManager];
          uint64_t v14 = [v13 positionFromPosition:v9 offset:1];

          if (v14)
          {
            uint64_t v9 = (void *)v14;
            if (v10++ < v7) {
              continue;
            }
          }
          goto LABEL_14;
        }
        self->m_textInputChangesIgnored = 0;
      }
      else
      {
        uint64_t v14 = v8;
LABEL_14:
        self->m_textInputChangesIgnored = 0;
        id v12 = v6;
        uint64_t v9 = (void *)v14;
      }
    }
    else
    {
      id v12 = v6;
    }
  }
  else
  {
    id v12 = 0;
  }

  return v12;
}

- (void)_dispatchInsertionPointEnteredText:(id)a3 range:(id)a4 withSupplementalCandidate:(id)a5
{
  id v23 = a3;
  id v8 = a4;
  id v9 = a5;
  if (+[UIKeyboard isKeyboardProcess])
  {
    unint64_t v10 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
    id v11 = objc_msgSend(v10, "textOperation_insertionPointEnteredText:withSupplementalCandidate:", v23, v9);

    uint64_t v12 = [(_UIKeyboardStateManager *)self inputSystemSourceSession];
    uint64_t v13 = (void *)v12;
    if (v11 && v12)
    {
      uint64_t v14 = [v11 customInfoType];
      BOOL v15 = [v13 textOperations];
      [v15 setCustomInfoType:v14];

      id v16 = [v11 customInfo];
      BOOL v17 = [v13 textOperations];
      [v17 setCustomInfo:v16];

      [v13 flushOperations];
    }
  }
  else if (([v8 isEmpty] & 1) == 0)
  {
    int v18 = [(_UIKeyboardStateManager *)self inputDelegate];
    char v19 = objc_opt_respondsToSelector();

    if (v19)
    {
      self->m_textInputChangesIgnored = 1;
      os_signpost_id_t v20 = [(_UIKeyboardStateManager *)self inputDelegate];
      id v21 = [v9 input];
      id v22 = objc_msgSend(v9, "ui_supplementalItems");
      [v20 _insertionPointEnteredRange:v8 string:v21 supplementalItems:v22];

      self->m_textInputChangesIgnored = 0;
    }
  }
}

- (void)_inputManagerDidGenerateSupplementalCandidates:(id)a3
{
  id v21 = a3;
  if (self->m_selecting
    || self->m_autoDeleteOK
    || [(_UIKeyboardStateManager *)self continuousPathUnderway]
    || ![v21 count]
    || self->m_autoDeleteUseForce && ![(_UIKeyboardStateManager *)self usesCandidateSelection]
    || (uint64_t v4 = [v21 indexOfObjectPassingTest:&__block_literal_global_1092], v4 == 0x7FFFFFFFFFFFFFFFLL))
  {
    [(_UIKeyboardStateManager *)self _insertionPointExitedRangeWithSupplementalCandidate];
    goto LABEL_9;
  }
  unint64_t v5 = [v21 objectAtIndexedSubscript:v4];
  int v6 = [v5 input];
  unint64_t v7 = [(_UIKeyboardStateManager *)self _rangeForSupplementalItemText:v6];

  id v8 = [_UIStringAndPositionPair alloc];
  id v9 = [v5 input];
  unint64_t v10 = [v7 start];
  id v11 = -[_UIStringAndPositionPair initWithString:position:]((id *)&v8->super.isa, v9, v10);

  uint64_t v12 = [(_UIKeyboardStateManager *)self lastMatchedSupplementalCandidate];
  if (v12)
  {
  }
  else
  {
    int v18 = [v5 inputWithoutSupplementalItemPrefix];
    uint64_t v19 = [v18 length];

    if (v19)
    {
      if ([v7 isEmpty])
      {
LABEL_21:
        [(_UIKeyboardStateManager *)self setLastMatchedSupplementalCandidate:v11];
        goto LABEL_22;
      }
LABEL_20:
      os_signpost_id_t v20 = [v5 input];
      [(_UIKeyboardStateManager *)self _dispatchInsertionPointEnteredText:v20 range:v7 withSupplementalCandidate:v5];

      goto LABEL_21;
    }
  }
  uint64_t v13 = [(_UIKeyboardStateManager *)self lastMatchedSupplementalCandidate];
  uint64_t v14 = [(_UIKeyboardStateManager *)self inputDelegate];
  BOOL v15 = -[_UIStringAndPositionPair isEqualToPair:inputDelegate:]((uint64_t)v13, v11, v14);

  if (!v15)
  {
    [(_UIKeyboardStateManager *)self _insertionPointExitedRangeWithSupplementalCandidate];
    if ([v7 isEmpty]) {
      goto LABEL_21;
    }
    id v16 = [v5 inputWithoutSupplementalItemPrefix];
    uint64_t v17 = [v16 length];

    if (!v17) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
LABEL_22:

LABEL_9:
}

- (void)inputManagerDidGenerateCandidateResultSet:(id)a3
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (![(_UIKeyboardStateManager *)self _hasMarkedText])
  {
    unint64_t v5 = objc_msgSend(v4, "ui_uniqueSupplementalCandidates");
    [(_UIKeyboardStateManager *)self _inputManagerDidGenerateSupplementalCandidates:v5];
  }
  int v6 = [v4 acceptedCandidate];

  if (v6)
  {
    unint64_t v7 = [v4 acceptedCandidate];
    [(_UIKeyboardStateManager *)self acceptCandidate:v7];

    [(_UIKeyboardStateManager *)self flushKeyboardOutputOnInputSourceSession];
  }
  if (v4)
  {
    if ([(_UIKeyboardStateManager *)self shouldPrioritizeTextSuggestionsOverCandidateResultSet:v4])
    {
      if ([(TIKeyboardCandidateResultSet *)self->m_candidateResultSet hasOnlySlottedCandidates])
      {
        goto LABEL_24;
      }
      id v8 = [(UIKeyboardAutocorrectionController *)self->m_autocorrectionController textSuggestionList];
      id v9 = [v8 predictions];
      uint64_t v10 = [v9 count];

      if (v10)
      {
        long long v24 = v4;
        id v11 = [MEMORY[0x1E4F1CA48] array];
        long long v25 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        uint64_t v12 = [(UIKeyboardAutocorrectionController *)self->m_autocorrectionController textSuggestionList];
        uint64_t v13 = [v12 predictions];

        uint64_t v14 = [v13 countByEnumeratingWithState:&v25 objects:v29 count:16];
        if (v14)
        {
          uint64_t v15 = v14;
          uint64_t v16 = *(void *)v26;
          do
          {
            for (uint64_t i = 0; i != v15; ++i)
            {
              if (*(void *)v26 != v16) {
                objc_enumerationMutation(v13);
              }
              int v18 = *(void **)(*((void *)&v25 + 1) + 8 * i);
              if ([v18 customInfoType] == 32)
              {
                uint64_t v19 = [(UIKeyboardAutocorrectionController *)self->m_autocorrectionController textSuggestionList];
                os_signpost_id_t v20 = [v19 predictions];
                unint64_t v21 = [v20 count];

                if (v21 > 1) {
                  continue;
                }
              }
              [v11 addObject:v18];
            }
            uint64_t v15 = [v13 countByEnumeratingWithState:&v25 objects:v29 count:16];
          }
          while (v15);
        }

        id v4 = [MEMORY[0x1E4FAE310] setWithCandidates:v11];
      }
    }
    [(_UIKeyboardStateManager *)self updateCandidateDisplayAsyncWithCandidateSet:v4];
  }
  id v22 = [(_UIKeyboardStateManager *)self currentCandidateRequestInfo];
  id v23 = [v22 objectForKey:@"selectedCandidate"];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    [(UIKeyboardCandidateList *)self->m_candidateList showCandidate:v23];
  }

LABEL_24:
}

- (void)generateAutocorrectionWithExecutionContext:(id)a3
{
  id v4 = a3;
  unint64_t v5 = sharedInputManagerMux();
  if (![v5 hasSystemInputManager]
    || !+[UIKeyboard isKeyboardProcess] && self->m_disableSyncTextChanged
    || +[UIKeyboard usesInputSystemUI]
    || ([(_UIKeyboardStateManager *)self inputDelegate],
        int v6 = objc_claimAutoreleasedReturnValue(),
        BOOL v7 = [(_UIKeyboardStateManager *)self suppressOptOutASPCandidateUpdateForDelegate:v6], v6, v7))
  {
    [v4 returnExecutionToParent];
  }
  else
  {
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = __70___UIKeyboardStateManager_generateAutocorrectionWithExecutionContext___block_invoke;
    v8[3] = &unk_1E52E3AC0;
    id v9 = v4;
    uint64_t v10 = self;
    [(_UIKeyboardStateManager *)self generateAutocorrectionsWithCompletionHandler:v8];
  }
}

- (void)generateAutocorrectionsWithCompletionHandler:(id)a3
{
  id v4 = (void (**)(id, void))a3;
  BOOL v5 = [(_UIKeyboardStateManager *)self shouldAccessInputManagerService];
  if (v4 && !v5) {
    v4[2](v4, 0);
  }
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [(id)objc_opt_class() sendPerformanceNotification:@"UIKeyboardPerformanceSearchCandidatesStartNotification"];

  [(_UIKeyboardStateManager *)self refreshKeyboardState];
  BOOL v7 = (void *)[(TIKeyboardState *)self->m_keyboardState copy];
  objc_msgSend(v7, "setAutofillMode:", +[UIKBAutofillController translateToTextInputAutofillMode:](UIKBAutofillController, "translateToTextInputAutofillMode:", -[TIKeyboardState autofillMode](self->m_keyboardState, "autofillMode")));
  objc_msgSend(v7, "setAutofillSubMode:", +[UIKBAutofillController translateToTextInputAutofillMode:](UIKBAutofillController, "translateToTextInputAutofillMode:", -[TIKeyboardState autofillSubMode](self->m_keyboardState, "autofillSubMode")));
  id v11 = (id)[v4 copy];

  id v8 = [MEMORY[0x1E4FAE288] tokenForKeyboardState:v7];
  [(_UIKeyboardStateManager *)self setCurrentCandidateRequest:v8];
  id v9 = [(_UIKeyboardStateManager *)self backendController];
  uint64_t v10 = [(_UIKeyboardStateManager *)self autocorrectionController];
  objc_msgSend(v9, "generateAutocorrectionsWithKeyboardState:candidateRange:requestToken:completionHandler:", v7, 0, objc_msgSend(v10, "maximumNumberOfCandidates"), v8, v11);
}

- (BOOL)shouldAcceptContinuousPathConversion:(id)a3
{
  id v3 = a3;
  if ([v3 isContinuousPathConversion]) {
    char v4 = [v3 shouldAccept];
  }
  else {
    char v4 = 0;
  }

  return v4;
}

- (void)_insertionPointExitedRangeWithSupplementalCandidate
{
  id v3 = [(_UIKeyboardStateManager *)self lastMatchedSupplementalCandidate];

  if (v3)
  {
    [(_UIKeyboardStateManager *)self _dispatchInsertionPointExitedRangeWithSupplementalCandidate];
    [(_UIKeyboardStateManager *)self setLastMatchedSupplementalCandidate:0];
  }
}

- (void)_dispatchInsertionPointExitedRangeWithSupplementalCandidate
{
  if (+[UIKeyboard isKeyboardProcess])
  {
    id v3 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
    objc_msgSend(v3, "textOperation_insertionPointExitedTextWithSupplementalItems");
    id v12 = (id)objc_claimAutoreleasedReturnValue();

    char v4 = [(_UIKeyboardStateManager *)self inputSystemSourceSession];
    if (v12 && v4)
    {
      BOOL v5 = [v12 customInfoType];
      int v6 = [v4 textOperations];
      [v6 setCustomInfoType:v5];

      BOOL v7 = [v12 customInfo];
      id v8 = [v4 textOperations];
      [v8 setCustomInfo:v7];

      [v4 flushOperations];
    }
  }
  else
  {
    id v9 = [(_UIKeyboardStateManager *)self inputDelegate];
    char v10 = objc_opt_respondsToSelector();

    if (v10)
    {
      self->m_textInputChangesIgnored = 1;
      id v11 = [(_UIKeyboardStateManager *)self inputDelegate];
      [v11 _insertionPointExitedRangeWithSupplementalItems];

      self->m_textInputChangesIgnored = 0;
    }
  }
}

- (void)inputManagerDidGenerateAutocorrections:(id)a3 executionContext:(id)a4
{
}

- (void)inputManagerDidGenerateAutocorrections:(id)a3 forPredictiveInput:(id)a4 executionContext:(id)a5
{
  uint64_t v101 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v81 = a4;
  id v9 = a5;
  char v10 = objc_msgSend(v8, "ui_allSupplementalCandidates");
  [(_UIKeyboardStateManager *)self _inputManagerDidGenerateSupplementalCandidates:v10];

  if ((_os_feature_enabled_impl() & 1) == 0)
  {
    id v11 = [v8 candidates];
    id v12 = [v11 firstObject];
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();

    if (isKindOfClass)
    {
      uint64_t v14 = [v8 candidates];
      uint64_t v15 = [v14 firstObject];

      if (objc_opt_respondsToSelector())
      {
        if (([v15 candidateProperty] & 0x20) != 0)
        {
          if (os_variant_has_internal_diagnostics())
          {
            int v80 = __UIFaultDebugAssertLog();
            if (os_log_type_enabled(v80, OS_LOG_TYPE_FAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_fault_impl(&dword_1853B0000, v80, OS_LOG_TYPE_FAULT, "The enum for the LongFormReply candidateProperty has changed. Please update to latest TextInputUI and TextInput", buf, 2u);
            }
          }
          else
          {
            char v79 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &inputManagerDidGenerateAutocorrections_forPredictiveInput_executionContext____s_category)+ 8);
            if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_1853B0000, v79, OS_LOG_TYPE_ERROR, "The enum for the LongFormReply candidateProperty has changed. Please update to latest TextInputUI and TextInput", buf, 2u);
            }
          }
        }
        if ((objc_msgSend(v15, "candidateProperty", v81) & 0x40) != 0)
        {
          long long v55 = _UIKeyboardSmartReplyLog();
          if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1853B0000, v55, OS_LOG_TYPE_DEFAULT, "Received long form reply, accepting immediately", buf, 2u);
          }

          v94[0] = MEMORY[0x1E4F143A8];
          v94[1] = 3221225472;
          v94[2] = __102___UIKeyboardStateManager_inputManagerDidGenerateAutocorrections_forPredictiveInput_executionContext___block_invoke;
          v94[3] = &unk_1E52E3628;
          id v95 = v15;
          BOOL v96 = self;
          id v56 = v15;
          unsigned int v57 = [v9 childWithContinuation:v94];
          [(_UIKeyboardStateManager *)self acceptPredictiveInput:v56 appendSeparator:0 executionContext:v57];

LABEL_72:
          goto LABEL_73;
        }
      }
    }
  }
  uint64_t v16 = objc_msgSend(v8, "emojiList", v81);
  if (v16)
  {
  }
  else
  {
    uint64_t v17 = [v8 predictions];

    if (!v17)
    {
      int v20 = 0;
      char v21 = 0;
      goto LABEL_14;
    }
  }
  int v18 = [v8 corrections];
  uint64_t v19 = [v18 autocorrection];
  if (v19 || ([v8 containsAutofillCandidates] & 1) != 0) {
    int v20 = 0;
  }
  else {
    int v20 = [v8 containsProactiveTriggers] ^ 1;
  }

  char v21 = 1;
LABEL_14:
  [v8 updateLabelsWithSmartPunctuation:self->m_smartPunctuationController];
  id v22 = [v8 corrections];
  id v23 = [v22 autocorrection];
  if (([v23 isContinuousPathConversion] & 1) == 0)
  {

LABEL_18:
    [(_UIKeyboardStateManager *)self setAutocorrectionToAcceptBeforeProgressiveCandidates:0];
    uint64_t v30 = [v8 corrections];
    uint64_t v31 = [v30 autocorrection];
    BOOL v32 = [(_UIKeyboardStateManager *)self shouldAcceptContinuousPathConversion:v31];

    if (v32)
    {
      BOOL v33 = [v8 corrections];
      id v34 = [v33 autocorrection];
      v89[0] = MEMORY[0x1E4F143A8];
      v89[1] = 3221225472;
      v89[2] = __102___UIKeyboardStateManager_inputManagerDidGenerateAutocorrections_forPredictiveInput_executionContext___block_invoke_4;
      v89[3] = &unk_1E52E3628;
      id v90 = v8;
      char v91 = self;
      uint64_t v35 = [v9 childWithContinuation:v89];
      [(_UIKeyboardStateManager *)self acceptPredictiveInput:v34 executionContext:v35];

      uint64_t v29 = v90;
      goto LABEL_20;
    }
    int v36 = [v8 proactiveSuggestionsEmpty];
    if (v20
      && ([v81 isContinuousPathConversion] & 1) == 0
      && ![(_UIKeyboardStateManager *)self _shouldLoadPredictionsBasedOnCurrentTraits]&& [(_UIKeyboardStateManager *)self autocorrectionPreferenceForTraits] == 2)
    {
      int v37 = self;
      id v38 = 0;
LABEL_36:
      [(_UIKeyboardStateManager *)v37 setAutocorrectionList:v38];
LABEL_54:
      long long v85 = 0u;
      long long v86 = 0u;
      long long v83 = 0u;
      long long v84 = 0u;
      uint64_t v62 = [v8 candidates];
      uint64_t v63 = [v62 countByEnumeratingWithState:&v83 objects:v100 count:16];
      if (v63)
      {
        uint64_t v64 = *(void *)v84;
        while (2)
        {
          for (uint64_t i = 0; i != v63; ++i)
          {
            if (*(void *)v84 != v64) {
              objc_enumerationMutation(v62);
            }
            if ([*(id *)(*((void *)&v83 + 1) + 8 * i) slotID])
            {
              uint64_t v63 = 1;
              goto LABEL_64;
            }
          }
          uint64_t v63 = [v62 countByEnumeratingWithState:&v83 objects:v100 count:16];
          if (v63) {
            continue;
          }
          break;
        }
      }
LABEL_64:

      id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      id v67 = objc_opt_class();
      int v98 = @"UIKeyboardPerformanceSearchFoundProactiveResults";
      BOOL v68 = [NSNumber numberWithBool:v63];
      id v99 = v68;
      id v69 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v99 forKeys:&v98 count:1];
      [v67 sendPerformanceNotification:@"UIKeyboardPerformanceSearchCandidatesEndNotification" userInfo:v69];

      char v70 = [(_UIKeyboardStateManager *)self autocorrectionController];
      if ([v70 hasAutocorrection])
      {
        id v71 = [(_UIKeyboardStateManager *)self autocorrectionController];
        id v56 = [v71 autocorrection];
      }
      else
      {
        id v56 = 0;
      }

      if ([(_UIKeyboardStateManager *)self hasAutocorrectPrompt])
      {
        v82[0] = MEMORY[0x1E4F143A8];
        v82[1] = 3221225472;
        v82[2] = __102___UIKeyboardStateManager_inputManagerDidGenerateAutocorrections_forPredictiveInput_executionContext___block_invoke_6;
        v82[3] = &unk_1E52E34C8;
        v82[4] = self;
        char v72 = [v9 childWithContinuation:v82];
        [(_UIKeyboardStateManager *)self updateAutocorrectPrompt:v56 executionContext:v72];
      }
      else
      {
        [(_UIKeyboardStateManager *)self touchAutocorrectPromptTimer];
        uint64_t v73 = [v8 candidates];
        -[_UIKeyboardStateManager _conditionallyNotifyPredictionsAreAvailableForCandidates:containingProactiveTriggers:](self, "_conditionallyNotifyPredictionsAreAvailableForCandidates:containingProactiveTriggers:", v73, [v8 containsProactiveTriggers]);

        char v74 = [(_UIKeyboardStateManager *)self inlineTextCompletionController];

        if (v74)
        {
          char v75 = [(_UIKeyboardStateManager *)self inlineTextCompletionController];
          [v75 updateTextCompletionPromptExecutionContext:v9];
        }
        else
        {
          [v9 returnExecutionToParent];
        }
      }
      goto LABEL_72;
    }
    if ((v21 & 1) != 0
      || ([v8 corrections],
          id v39 = objc_claimAutoreleasedReturnValue(),
          [v39 autocorrection],
          BOOL v40 = objc_claimAutoreleasedReturnValue(),
          int v41 = [v40 isContinuousPathConversion],
          v40,
          v39,
          v41))
    {
      if (![v8 containsProactiveTriggers])
      {
        int v37 = self;
        id v38 = v8;
        goto LABEL_36;
      }
      id v42 = +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate];
      [(_UIKeyboardStateManager *)self setAutocorrectionList:v8];
      id v43 = [(_UIKeyboardStateManager *)self autocorrectionController];
      [v43 setAutocorrectionList:v8];

      id v44 = [v42 systemInputAssistantViewController];
      if ([v44 isInputAssistantItemEmpty])
      {
        id v45 = [v42 systemInputAssistantViewController];
        uint64_t v46 = [v45 view];
        uint64_t v47 = [v46 window];
        char v48 = [v47 _isRemoteKeyboardWindow];

        if ((v48 & 1) == 0)
        {
          char v49 = [v42 containerRootController];
          int v50 = [v49 isTransitioning];

          if (v50)
          {
            int v51 = [v42 containerRootController];
            v87[0] = MEMORY[0x1E4F143A8];
            v87[1] = 3221225472;
            v87[2] = __102___UIKeyboardStateManager_inputManagerDidGenerateAutocorrections_forPredictiveInput_executionContext___block_invoke_5;
            v87[3] = &unk_1E52D9F70;
            id v88 = v42;
            [v51 addPendingActivity:v87];
          }
          else
          {
            [v42 forceReloadInputViews];
          }
          goto LABEL_53;
        }
      }
      else
      {
      }
      [(_UIKeyboardStateManager *)self updateAssistantView];
LABEL_53:

      goto LABEL_54;
    }
    int v52 = [(_UIKeyboardStateManager *)self autocorrectionController];
    id v42 = v52;
    if (!v36)
    {
      [v52 setAutocorrectionList:v8];
      goto LABEL_53;
    }
    if ([v52 hasAutocorrection])
    {
      long long v53 = [(_UIKeyboardStateManager *)self autocorrectionController];
      long long v54 = [v53 autocorrection];
      if (v54)
      {

LABEL_52:
        goto LABEL_53;
      }
      uint64_t v59 = [(_UIKeyboardStateManager *)self autocorrectionController];
      uint64_t v60 = [v59 autocorrectionList];
      int v61 = [v60 emojiList];
      if (v61)
      {

        goto LABEL_52;
      }
      BOOL v76 = [(_UIKeyboardStateManager *)self autocorrectionController];
      char v77 = [v76 autocorrectionList];
      char v78 = [v77 predictions];

      if (v78) {
        goto LABEL_54;
      }
    }
    else
    {
    }
    int v58 = [(_UIKeyboardStateManager *)self autocorrectionController];
    [v58 clearAutocorrectionAndNotifyObservers:1];

    [(_UIKeyboardStateManager *)self updateAssistantView];
    goto LABEL_54;
  }
  long long v24 = [(_UIKeyboardStateManager *)self autocorrectionToAcceptBeforeProgressiveCandidates];
  long long v25 = [v24 input];
  uint64_t v26 = [v25 length];

  if (!v26) {
    goto LABEL_18;
  }
  [(_UIKeyboardStateManager *)self acceptingCandidateWithTrigger:*MEMORY[0x1E4FAE560]];
  long long v27 = [(_UIKeyboardStateManager *)self autocorrectionToAcceptBeforeProgressiveCandidates];
  v92[0] = MEMORY[0x1E4F143A8];
  v92[1] = 3221225472;
  v92[2] = __102___UIKeyboardStateManager_inputManagerDidGenerateAutocorrections_forPredictiveInput_executionContext___block_invoke_3;
  v92[3] = &unk_1E52E3628;
  v92[4] = self;
  id v93 = v8;
  long long v28 = [v9 childWithContinuation:v92];
  [(_UIKeyboardStateManager *)self acceptPredictiveInput:v27 executionContext:v28];

  uint64_t v29 = v93;
LABEL_20:

LABEL_73:
}

- (BOOL)_insertSupplementalCandidate:(id)a3 overridingCandidateText:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __80___UIKeyboardStateManager__insertSupplementalCandidate_overridingCandidateText___block_invoke;
  aBlock[3] = &unk_1E52E3AE8;
  void aBlock[4] = self;
  id v8 = (uint64_t (**)(void *, void *, id, void *))_Block_copy(aBlock);
  id v9 = objc_msgSend(v6, "ui_supplementalItems");
  char v10 = [v9 objectAtIndexedSubscript:0];

  if (v7)
  {
    id v11 = [(_UIKeyboardStateManager *)self _rangeForSupplementalItemText:v7];
  }
  else
  {
    id v12 = [v6 input];
    id v11 = [(_UIKeyboardStateManager *)self _rangeForSupplementalItemText:v12];
  }
  BOOL v13 = ([v11 isEmpty] & 1) == 0 && (v8[2](v8, v10, v6, v11) & 1) != 0;

  return v13;
}

- (void)_willReplaceText:(id)a3 withSupplementalCandidate:(id)a4
{
  id v12 = a3;
  BOOL v5 = [(_UIKeyboardStateManager *)self _hasMarkedText];
  id v6 = v12;
  if (!v5)
  {
    id v7 = [(_UIKeyboardStateManager *)self _rangeForSupplementalItemText:v12];
    if (v7)
    {
      self->m_textInputChangesIgnored = 1;
      id v8 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      id v9 = [v7 end];
      [v8 _setSelectionToPosition:v9];

      [(_UIKeyboardStateManager *)self updateForChangedSelection];
      objc_msgSend(v12, "rangeOfComposedCharacterSequencesForRange:", 0, objc_msgSend(v12, "length"));
      if (v10)
      {
        uint64_t v11 = v10;
        do
        {
          --v11;
          [(_UIKeyboardStateManager *)self deleteBackwardAndNotify:0];
        }
        while (v11);
      }
      self->m_textInputChangesIgnored = 0;
    }

    id v6 = v12;
  }
}

- (void)_didReplaceText:(id)a3 withSupplementalCandidate:(id)a4
{
  id v12 = a3;
  id v6 = a4;
  id v7 = [v6 input];
  if ([v7 length])
  {
    id v8 = [v6 input];
    int v9 = [v8 characterAtIndex:0];
    BOOL v10 = v9 == [v6 supplementalItemPrefix];
  }
  else
  {
    BOOL v10 = 0;
  }

  if ([v6 supplementalItemPrefix] && !v10)
  {
    uint64_t v11 = [(_UIKeyboardStateManager *)self _rangeForSupplementalItemText:v12];
    if (v11) {
      self->m_textInputChangesIgnored = 0;
    }
  }
}

- (void)_acceptAutofillCandidateRequiringAuthentication:(id)a3 payloadDelegate:(id)a4 executionContext:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  uint64_t v11 = _UIKeyboardImplLog();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl(&dword_1853B0000, v11, OS_LOG_TYPE_DEFAULT, "Accepting autofill candidate requiring authentication", (uint8_t *)buf, 2u);
  }

  id v12 = (void *)[(TIKeyboardState *)self->m_keyboardState copy];
  objc_msgSend(v12, "setAutofillMode:", +[UIKBAutofillController translateToTextInputAutofillMode:](UIKBAutofillController, "translateToTextInputAutofillMode:", -[TIKeyboardState autofillMode](self->m_keyboardState, "autofillMode")));
  objc_msgSend(v12, "setAutofillSubMode:", +[UIKBAutofillController translateToTextInputAutofillMode:](UIKBAutofillController, "translateToTextInputAutofillMode:", -[TIKeyboardState autofillSubMode](self->m_keyboardState, "autofillSubMode")));
  objc_initWeak(buf, v9);
  BOOL v13 = [(_UIKeyboardStateManager *)self inputManager];
  uint64_t v14 = MEMORY[0x1E4F143A8];
  uint64_t v15 = 3221225472;
  uint64_t v16 = __108___UIKeyboardStateManager__acceptAutofillCandidateRequiringAuthentication_payloadDelegate_executionContext___block_invoke;
  uint64_t v17 = &unk_1E52E3B38;
  int v18 = self;
  objc_copyWeak(&v19, buf);
  [v13 handleAcceptedCandidate:v8 keyboardState:v12 completionHandler:&v14];

  objc_msgSend(v10, "returnExecutionToParent", v14, v15, v16, v17, v18);
  objc_destroyWeak(&v19);
  objc_destroyWeak(buf);
}

- (void)handleAcceptedCandidate:(id)a3 executionContext:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  [(_UIKeyboardStateManager *)self refreshKeyboardState];
  if (+[UIKeyboard isKeyboardProcess]
    && (int v8 = [v6 slotID], v9 = objc_msgSend(v6, "customInfoType"), v8)
    && self->m_cachedAutofillMode == 1
    && v9
    && ([(_UIKeyboardStateManager *)self remoteTextInputPartner],
        id v10 = objc_claimAutoreleasedReturnValue(),
        [v10 autofillPayloadDelegate],
        uint64_t v11 = objc_claimAutoreleasedReturnValue(),
        v10,
        v11))
  {
    [(_UIKeyboardStateManager *)self _acceptAutofillCandidateRequiringAuthentication:v6 payloadDelegate:v11 executionContext:v7];
  }
  else
  {
    uint64_t v11 = (void *)[(TIKeyboardState *)self->m_keyboardState copy];
    objc_msgSend(v11, "setAutofillMode:", +[UIKBAutofillController translateToTextInputAutofillMode:](UIKBAutofillController, "translateToTextInputAutofillMode:", -[TIKeyboardState autofillMode](self->m_keyboardState, "autofillMode")));
    objc_msgSend(v11, "setAutofillSubMode:", +[UIKBAutofillController translateToTextInputAutofillMode:](UIKBAutofillController, "translateToTextInputAutofillMode:", -[TIKeyboardState autofillSubMode](self->m_keyboardState, "autofillSubMode")));
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = __68___UIKeyboardStateManager_handleAcceptedCandidate_executionContext___block_invoke;
    v15[3] = &unk_1E52E3B60;
    id v16 = v7;
    id v12 = v6;
    id v17 = v12;
    int v18 = self;
    BOOL v13 = (void *)[v15 copy];
    uint64_t v14 = [(_UIKeyboardStateManager *)self inputManager];
    [v14 handleAcceptedCandidate:v12 keyboardState:v11 completionHandler:v13];
  }
}

- (void)generateReplacementsForString:(id)a3 candidatesHandler:(id)a4 executionContext:(id)a5
{
  id v8 = a4;
  id v9 = a5;
  uint64_t v16 = MEMORY[0x1E4F143A8];
  uint64_t v17 = 3221225472;
  int v18 = __92___UIKeyboardStateManager_generateReplacementsForString_candidatesHandler_executionContext___block_invoke;
  id v19 = &unk_1E52E3BB0;
  id v20 = v9;
  id v21 = v8;
  id v10 = v8;
  id v11 = v9;
  id v12 = a3;
  BOOL v13 = (void *)[&v16 copy];
  uint64_t v14 = [(_UIKeyboardStateManager *)self inputManager];
  uint64_t v15 = [(TIKeyboardState *)self->m_keyboardState keyLayout];
  [v14 generateReplacementsForString:v12 keyLayout:v15 continuation:v13];
}

- (void)skipHitTestForTouchEvent:(id)a3
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    id v7 = a3;
    char v4 = (void *)MEMORY[0x1E4F1C978];
    id v5 = a3;
    id v6 = [v4 arrayWithObjects:&v7 count:1];

    -[_UIKeyboardStateManager skipHitTestForTouchEvents:](self, "skipHitTestForTouchEvents:", v6, v7, v8);
  }
}

- (void)skipHitTestForTouchEvents:(id)a3
{
  id v6 = a3;
  if ([v6 count])
  {
    if ([v6 indexOfObjectPassingTest:&__block_literal_global_1136] != 0x7FFFFFFFFFFFFFFFLL) {
      [(_UIKeyboardStateManager *)self refreshKeyboardStateUpdatingSecureCandidateRenderTraits:0];
    }
    char v4 = (void *)[(TIKeyboardState *)self->m_keyboardState copy];
    objc_msgSend(v4, "setAutofillMode:", +[UIKBAutofillController translateToTextInputAutofillMode:](UIKBAutofillController, "translateToTextInputAutofillMode:", -[TIKeyboardState autofillMode](self->m_keyboardState, "autofillMode")));
    objc_msgSend(v4, "setAutofillSubMode:", +[UIKBAutofillController translateToTextInputAutofillMode:](UIKBAutofillController, "translateToTextInputAutofillMode:", -[TIKeyboardState autofillSubMode](self->m_keyboardState, "autofillSubMode")));
    id v5 = [(_UIKeyboardStateManager *)self backendController];
    [v5 skipHitTestForTouchEvents:v6 keyboardState:v4];
  }
}

- (void)skipHitTestForTouchEvent:(id)a3 delayed:(BOOL)a4
{
  if (a4) {
    [(_UIKeyboardStateManager *)self setTouchEventWaitingForKeyInputEvent:a3];
  }
  else {
    [(_UIKeyboardStateManager *)self skipHitTestForTouchEvent:a3];
  }
}

- (void)performHitTestForTouchEvent:(id)a3 executionContextPassingNSNumber:(id)a4
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v10 = a3;
  id v6 = (void *)MEMORY[0x1E4F1C978];
  id v7 = a4;
  id v8 = a3;
  id v9 = [v6 arrayWithObjects:&v10 count:1];

  -[_UIKeyboardStateManager performHitTestForTouchEvents:executionContextPassingNSNumber:](self, "performHitTestForTouchEvents:executionContextPassingNSNumber:", v9, v7, v10, v11);
}

- (void)performHitTestForTouchEvents:(id)a3 executionContextPassingNSNumber:(id)a4
{
  id v6 = a4;
  id v7 = a3;
  if (![(_UIKeyboardStateManager *)self shouldAccessInputManagerService]) {
    [v6 returnExecutionToParent];
  }
  [(_UIKeyboardStateManager *)self refreshKeyboardStateUpdatingSecureCandidateRenderTraits:0];
  id v8 = (void *)[(TIKeyboardState *)self->m_keyboardState copy];
  objc_msgSend(v8, "setAutofillMode:", +[UIKBAutofillController translateToTextInputAutofillMode:](UIKBAutofillController, "translateToTextInputAutofillMode:", -[TIKeyboardState autofillMode](self->m_keyboardState, "autofillMode")));
  objc_msgSend(v8, "setAutofillSubMode:", +[UIKBAutofillController translateToTextInputAutofillMode:](UIKBAutofillController, "translateToTextInputAutofillMode:", -[TIKeyboardState autofillSubMode](self->m_keyboardState, "autofillSubMode")));
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __88___UIKeyboardStateManager_performHitTestForTouchEvents_executionContextPassingNSNumber___block_invoke;
  void v12[3] = &unk_1E52DC698;
  id v13 = v6;
  id v9 = v6;
  id v10 = (void *)[v12 copy];
  uint64_t v11 = [(_UIKeyboardStateManager *)self backendController];
  [v11 performHitTestForTouchEvents:v7 keyboardState:v8 completionHandler:v10];
}

- (void)adjustPhraseBoundaryInForwardDirection:(BOOL)a3 granularity:(int)a4 executionContext:(id)a5
{
  uint64_t v5 = *(void *)&a4;
  BOOL v6 = a3;
  id v8 = a5;
  [(_UIKeyboardStateManager *)self refreshKeyboardState];
  id v9 = (void *)[(TIKeyboardState *)self->m_keyboardState copy];
  objc_msgSend(v9, "setAutofillMode:", +[UIKBAutofillController translateToTextInputAutofillMode:](UIKBAutofillController, "translateToTextInputAutofillMode:", -[TIKeyboardState autofillMode](self->m_keyboardState, "autofillMode")));
  objc_msgSend(v9, "setAutofillSubMode:", +[UIKBAutofillController translateToTextInputAutofillMode:](UIKBAutofillController, "translateToTextInputAutofillMode:", -[TIKeyboardState autofillSubMode](self->m_keyboardState, "autofillSubMode")));
  uint64_t v13 = MEMORY[0x1E4F143A8];
  uint64_t v14 = 3221225472;
  uint64_t v15 = __95___UIKeyboardStateManager_adjustPhraseBoundaryInForwardDirection_granularity_executionContext___block_invoke;
  uint64_t v16 = &unk_1E52E38F0;
  id v17 = v8;
  int v18 = self;
  id v10 = v8;
  uint64_t v11 = (void *)[&v13 copy];
  id v12 = [(_UIKeyboardStateManager *)self inputManager];
  [v12 adjustPhraseBoundaryInForwardDirection:v6 granularity:v5 keyboardState:v9 completionHandler:v11];
}

- (void)removeAllDynamicDictionaries
{
  id v2 = (void *)[objc_alloc(MEMORY[0x1E4F29268]) initWithMachServiceName:@"com.apple.TextInput.rdt" options:4096];
  id v3 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1ED7006F0];
  [v2 setRemoteObjectInterface:v3];

  [v2 resume];
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __55___UIKeyboardStateManager_removeAllDynamicDictionaries__block_invoke;
  aBlock[3] = &unk_1E52E3C18;
  id v8 = v2;
  id v4 = v2;
  uint64_t v5 = _Block_copy(aBlock);
  BOOL v6 = [v4 remoteObjectProxyWithErrorHandler:v5];
  [v6 removeAllDynamicDictionariesWithCompletionHandler:v5];
}

- (TIKeyboardInputManagerStub)inputManager
{
  id v3 = sharedInputManagerMux();
  if (([v3 hasSystemInputManager] & 1) == 0) {
    [(_UIKeyboardStateManager *)self setInputManagerFromCurrentInputMode];
  }
  return (TIKeyboardInputManagerStub *)v3;
}

- (BOOL)shouldAccessInputManagerService
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  if (WeakRetained) {
    char v3 = [(id)objc_opt_class() shouldAccessInputManagerService];
  }
  else {
    char v3 = 1;
  }

  return v3;
}

- (TUIKeyboardBackendController)backendController
{
  if ([(_UIKeyboardStateManager *)self shouldAccessInputManagerService])
  {
    char v3 = sharedInputManagerMux();
    if (([v3 hasSystemInputManager] & 1) == 0) {
      [(_UIKeyboardStateManager *)self setInputManagerFromCurrentInputMode];
    }
    uint64_t v10 = 0;
    uint64_t v11 = &v10;
    uint64_t v12 = 0x2050000000;
    id v4 = (void *)getTUIKeyboardBackendControllerClass_softClass;
    uint64_t v13 = getTUIKeyboardBackendControllerClass_softClass;
    if (!getTUIKeyboardBackendControllerClass_softClass)
    {
      v9[0] = MEMORY[0x1E4F143A8];
      v9[1] = 3221225472;
      v9[2] = __getTUIKeyboardBackendControllerClass_block_invoke;
      v9[3] = &unk_1E52D9900;
      v9[4] = &v10;
      __getTUIKeyboardBackendControllerClass_block_invoke((uint64_t)v9);
      id v4 = (void *)v11[3];
    }
    id v5 = v4;
    _Block_object_dispose(&v10, 8);
    BOOL v6 = [v5 sharedInstance];
    if (objc_opt_respondsToSelector())
    {
      id v7 = [(_UIKeyboardStateManager *)self implProxy];
      [v6 setCandidateReceiver:v7];
    }
  }
  else
  {
    BOOL v6 = 0;
  }
  return (TUIKeyboardBackendController *)v6;
}

- (void)releaseInputManager
{
  m_inputManagerState = self->m_inputManagerState;
  self->m_inputManagerState = 0;

  [(_UIKeyboardImplProxy *)self->m_implProxy setDelegate:0];
  sharedInputManagerMux();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [v4 releaseConnectedClients];
  [(_UISmartReplyFeedbackManager *)self->_smartReplyFeedbackManager resetWithDebug:@"releaseInputManager"];
}

- (void)releaseInputManagerIfInactive
{
  char v3 = [(_UIKeyboardStateManager *)self delegate];

  if (!v3)
  {
    [(_UIKeyboardStateManager *)self releaseInputManager];
  }
}

- (BOOL)switchMode:(id)a3 withHUD:(BOOL)a4 withDelay:(BOOL)a5 fromCapsLock:(BOOL)a6
{
  uint64_t v6 = a6;
  BOOL v7 = a4;
  id v9 = a3;
  [(_UIKeyboardStateManager *)self showCursorAccessory];
  uint64_t v10 = +[UIInputSwitcher sharedInstance];
  LOBYTE(v6) = [v10 switchMode:v9 withHUD:v7 withDelay:v7 fromCapsLock:v6];

  return v6;
}

- (BOOL)shouldSwitchInputMode:(id)a3
{
  id v4 = a3;
  id v5 = [(_UIKeyboardStateManager *)self autofillController];
  unint64_t v6 = [v5 delegateNeedsAutofillMode];

  int64_t v7 = [(UITextInputTraits *)self->m_traits keyboardType];
  BOOL v8 = v7 == 1;
  id v9 = +[UIKeyboard keyboardBundleIdentifier];
  if ([v9 isEqualToString:@"com.apple.purplebuddy"])
  {
    BOOL v10 = +[UITextInputTraits keyboardTypeRequiresASCIICapable:[(UITextInputTraits *)self->m_traits keyboardType]];
    BOOL v8 = v7 == 1 || v10;
  }
  char v11 = [v4 isDesiredForTraits:self->m_traits withExtended:0];
  LOBYTE(v12) = v11 ^ 1;
  if ((v11 & 1) == 0 && !v8) {
    unsigned int v12 = (v6 < 5) & (0x16u >> v6) | [(UITextInputTraits *)self->m_traits isCarPlayIdiom];
  }

  return v12;
}

- (id)desirableInputModesWithExtensions:(BOOL)a3
{
  BOOL v3 = a3;
  v56[1] = *MEMORY[0x1E4F143B8];
  if ([(UITextInputTraits *)self->m_traits keyboardType] == 124)
  {
    id v5 = +[UIKeyboardInputMode keyboardInputModeWithIdentifier:@"emoji@sw=Emoji"];
    v56[0] = v5;
    id v6 = [MEMORY[0x1E4F1C978] arrayWithObjects:v56 count:1];
  }
  else
  {
    int64_t v7 = +[UIKeyboardInputModeController sharedInputModeController];
    if ([(UITextInputTraits *)self->m_traits isSecureTextEntry]
      || [(UITextInputTraits *)self->m_traits keyboardType] == 7
      || [(UITextInputTraits *)self->m_traits keyboardType] == 3)
    {
      BOOL v8 = (void *)[(UITextInputTraits *)self->m_traits copy];
      [v8 setKeyboardType:1];
    }
    else
    {
      BOOL v8 = 0;
    }
    if ([(UITextInputTraits *)self->m_traits loadKeyboardsForSiriLanguage]) {
      [v7 loadSuggestedInputModesForSiriLanguage];
    }
    id v9 = [MEMORY[0x1E4F1CA48] array];
    BOOL v10 = [MEMORY[0x1E4F1CA48] array];
    self->m_needsToRecomputeDesirableModes = 0;
    if (v3)
    {
      char v11 = [(UITextInputTraits *)self->m_traits textContentType];
      char v12 = [v11 isEqualToString:@"cc-number"];
    }
    else
    {
      char v12 = 1;
    }
    BOOL v40 = v7;
    uint64_t v13 = [v7 activeInputModes];
    v49[0] = MEMORY[0x1E4F143A8];
    v49[1] = 3221225472;
    v49[2] = __61___UIKeyboardStateManager_desirableInputModesWithExtensions___block_invoke;
    v49[3] = &unk_1E52E3C40;
    char v53 = v12;
    void v49[4] = self;
    id v14 = v8;
    id v50 = v14;
    id v15 = v9;
    id v51 = v15;
    id v16 = v10;
    id v52 = v16;
    [v13 enumerateObjectsUsingBlock:v49];

    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    id v17 = v15;
    uint64_t v18 = [v17 countByEnumeratingWithState:&v45 objects:v55 count:16];
    if (v18)
    {
      uint64_t v19 = v18;
      id v38 = v16;
      uint64_t v20 = *(void *)v46;
      while (2)
      {
        for (uint64_t i = 0; i != v19; ++i)
        {
          if (*(void *)v46 != v20) {
            objc_enumerationMutation(v17);
          }
          id v22 = *(void **)(*((void *)&v45 + 1) + 8 * i);
          id v23 = [v22 identifier];
          char v24 = [v23 hasPrefix:@"emoji"];

          if (v24 & 1) == 0 && ([v22 isDesiredForTraits:self->m_traits])
          {
            int v39 = 1;
            goto LABEL_23;
          }
        }
        uint64_t v19 = [v17 countByEnumeratingWithState:&v45 objects:v55 count:16];
        if (v19) {
          continue;
        }
        break;
      }
      int v39 = 0;
LABEL_23:
      id v16 = v38;
    }
    else
    {
      int v39 = 0;
    }

    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    id v25 = v16;
    uint64_t v26 = [v25 countByEnumeratingWithState:&v41 objects:v54 count:16];
    if (v26)
    {
      uint64_t v27 = v26;
      int v28 = 0;
      uint64_t v29 = *(void *)v42;
      do
      {
        for (uint64_t j = 0; j != v27; ++j)
        {
          if (*(void *)v42 != v29) {
            objc_enumerationMutation(v25);
          }
          uint64_t v31 = *(void **)(*((void *)&v41 + 1) + 8 * j);
          int v32 = [v31 isDesiredForTraits:v14];
          if (([v17 containsObject:v31] & 1) == 0) {
            [v17 addObject:v31];
          }
          v28 |= v32;
        }
        uint64_t v27 = [v25 countByEnumeratingWithState:&v41 objects:v54 count:16];
      }
      while (v27);
    }
    else
    {
      int v28 = 0;
    }

    if ((v39 & ((v14 == 0) | v28) & 1) == 0)
    {
      BOOL v33 = +[UIKeyboardInputMode intlInputMode];
      [v17 addObject:v33];
    }
    id v5 = v40;
    if ([(_UIKeyboardStateManager *)self shouldLoadAutofillSignUpInputViewController])
    {
      id v34 = +[UIKeyboardInputMode autofillSignupInputMode];
      [v17 addObject:v34];
    }
    unsigned int v35 = [(UITextInputTraits *)self->m_traits keyboardType];
    if (v35 <= 0xB && ((1 << v35) & 0x930) != 0 || v35 == 127)
    {
      id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      objc_msgSend((id)objc_opt_class(), "uniqueNumberPadInputModesFromInputModes:forKeyboardType:", v17, -[UITextInputTraits keyboardType](self->m_traits, "keyboardType"));
      id v6 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      id v6 = v17;
    }
  }
  return v6;
}

- (void)recomputeActiveInputModesWithExtensions:(BOOL)a3
{
  BOOL v3 = a3;
  BOOL v5 = [(UITextInputTraits *)self->m_traits acceptsInitialEmojiKeyboard];
  [(_UIKeyboardStateManager *)self recomputeActiveInputModesWithExtensions:v3 allowNonLinguisticInputModes:v5];
}

- (void)recomputeActiveInputModesWithExtensions:(BOOL)a3 allowNonLinguisticInputModes:(BOOL)a4
{
  BOOL v4 = a4;
  BOOL v5 = a3;
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  if (![(_UIKeyboardStateManager *)self skipRecomputeInputMode])
  {
    int64_t v7 = +[UIKeyboardSceneDelegate automaticKeyboardArbiterClient];
    char v8 = [v7 handlingRemoteEvent];

    if ((v8 & 1) == 0)
    {
      id v9 = +[UIKeyboardInputModeController sharedInputModeController];
      BOOL v10 = [(_UIKeyboardStateManager *)self delegateAsResponder];
      char v11 = [v10 _additionalTextInputLocales];
      [v9 setAdditionalTextInputLocales:v11];

      id v81 = [(_UIKeyboardStateManager *)self desirableInputModesWithExtensions:v5];
      char v12 = objc_msgSend(v9, "identifiersFromInputModes:");
      id v13 = (id)UIKeyboardActiveInputModes;
      char v14 = [v13 isEqualToArray:v12];

      UIKeyboardSetActiveInputModes(v12);
      if ((v14 & 1) == 0)
      {
        id v15 = [MEMORY[0x1E4F28EB8] defaultCenter];
        [v15 postNotificationName:@"UIKeyboardActiveInputModesDidChange" object:0 userInfo:0];
      }
      id v16 = +[UIKeyboardInputModeController sharedInputModeController];
      int v17 = [v16 lastInputModeSwitchTriggeredByASCIIToggle];

      if (v17) {
        [v9 currentInputModeInPreference];
      }
      else {
      uint64_t v18 = [v9 currentInputMode];
      }
      uint64_t v19 = +[UIKeyboardInputMode dictationInputMode];
      int v20 = [v18 isEqual:v19];

      if (v20)
      {
        id v21 = +[UIKeyboardInputMode dictationInputMode];
        uint64_t v22 = [v21 currentInputModeForDictation];

        uint64_t v18 = (void *)v22;
      }
      id v23 = v18;
      char v24 = [v9 inputModeContextIdentifier];

      id v25 = v23;
      if (!v24)
      {
        if (self->_suppressUpdateInputMode || !v4)
        {
          id v25 = v23;
          if (self->_suppressUpdateInputMode) {
            goto LABEL_11;
          }
        }
        else
        {
          BOOL v40 = [v23 normalizedIdentifier];
          char IsNonLinguistic = UIKeyboardInputModeIsNonLinguistic(v40);

          id v25 = v23;
          if (IsNonLinguistic) {
            goto LABEL_11;
          }
        }
        id v25 = v23;
        if (!+[UIKeyboard isKeyboardProcess])
        {
          char v49 = [(_UIKeyboardStateManager *)self delegateAsResponder];
          id v50 = [v9 textInputModeForResponder:v49];
          id v25 = [v9 lastUsedInputModeForTextInputMode:v50];
        }
        if (!v25)
        {
          id v25 = [v9 currentInputModeInPreference];
        }
      }
LABEL_11:
      if ([(_UIKeyboardStateManager *)self shouldLoadAutofillSignUpInputViewController])
      {
        uint64_t v26 = +[UIKeyboardInputMode autofillSignupInputMode];
        [(_UIKeyboardStateManager *)self setKeyboardInputMode:v26 userInitiated:0];

        uint64_t v27 = +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate];
        id v28 = (id)[v27 remoteHostInputViewSet:0];

        uint64_t v29 = v81;
LABEL_74:

        return;
      }
      int v80 = v12;
      if ((unint64_t)(self->m_cachedAutofillMode - 1) > 2)
      {
        if (!self->_restoresToEmojiInputMode)
        {
          uint64_t v29 = v81;
LABEL_51:
          if (([v25 isEqual:v23] & 1) != 0
            || [v29 indexOfObject:v25] == 0x7FFFFFFFFFFFFFFFLL)
          {
            if (([v23 isDisplayed] & 1) == 0) {
              [(_UIKeyboardStateManager *)self postInputViewControllerShouldUpdateNotification:v23];
            }
          }
          else
          {
            if (!+[UIKeyboard usesInputSystemUI]) {
              goto LABEL_57;
            }
            id v56 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
            v95[0] = @"inputMode";
            v95[1] = @"isUserInitiated";
            v96[0] = v25;
            v96[1] = MEMORY[0x1E4F1CC28];
            unsigned int v57 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v96 forKeys:v95 count:2];
            [v56 forwardInputDestinationEventToUIHost:sel_setKeyboardInputMode_userInitiated_ params:v57];

            int v58 = [v9 currentInputMode];
            uint64_t v59 = [v58 identifier];
            LODWORD(v57) = [v59 isEqualToString:@"autofillsignup"];

            if (v57) {
LABEL_57:
            }
              [(_UIKeyboardStateManager *)self setKeyboardInputMode:v25 userInitiated:0];
            id v60 = v25;

            id v23 = v60;
          }
          uint64_t v61 = [v29 indexOfObject:v23];
          if (v61 == 0x7FFFFFFFFFFFFFFFLL
            || ([v29 objectAtIndex:v61],
                uint64_t v62 = objc_claimAutoreleasedReturnValue(),
                BOOL v63 = [(_UIKeyboardStateManager *)self shouldSwitchInputMode:v62],
                v62,
                v63))
          {
            id v79 = v23;
            uint64_t v64 = +[UIKeyboardInputModeController sharedInputModeController];
            id v65 = [v9 currentInputMode];
            id v66 = [v64 fallbackCurrentInputModeForFilteredInputMode:v65 fromInputModes:v29];

            id v67 = [MEMORY[0x1E4F1CA48] array];
            BOOL v68 = v67;
            if (v66) {
              [v67 addObject:v66];
            }
            id v69 = v29;
            [v68 addObjectsFromArray:v29];
            long long v84 = 0u;
            long long v85 = 0u;
            long long v82 = 0u;
            long long v83 = 0u;
            id v70 = v68;
            uint64_t v71 = [v70 countByEnumeratingWithState:&v82 objects:v94 count:16];
            if (v71)
            {
              uint64_t v72 = v71;
              uint64_t v73 = *(void *)v83;
              while (2)
              {
                for (uint64_t i = 0; i != v72; ++i)
                {
                  if (*(void *)v83 != v73) {
                    objc_enumerationMutation(v70);
                  }
                  char v75 = *(void **)(*((void *)&v82 + 1) + 8 * i);
                  if ([v75 isDesiredForTraits:self->m_traits withExtended:0])
                  {
                    id v76 = (id)[v9 currentInputMode];
                    [(_UIKeyboardStateManager *)self setKeyboardInputMode:v75 userInitiated:0];
                    id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
                    [WeakRetained setShowInputModeIndicator:1];

                    goto LABEL_73;
                  }
                }
                uint64_t v72 = [v70 countByEnumeratingWithState:&v82 objects:v94 count:16];
                if (v72) {
                  continue;
                }
                break;
              }
            }
LABEL_73:

            id v23 = v79;
            char v12 = v80;
            uint64_t v29 = v69;
          }
          goto LABEL_74;
        }
        long long v42 = v12;
        self->_BOOL restoresToEmojiInputMode = 0;
        long long v86 = 0u;
        long long v87 = 0u;
        long long v88 = 0u;
        long long v89 = 0u;
        id v43 = v81;
        uint64_t v44 = [v43 countByEnumeratingWithState:&v86 objects:v97 count:16];
        if (v44)
        {
          uint64_t v45 = v44;
          uint64_t v46 = *(void *)v87;
          while (2)
          {
            for (uint64_t j = 0; j != v45; ++j)
            {
              if (*(void *)v87 != v46) {
                objc_enumerationMutation(v43);
              }
              long long v48 = *(void **)(*((void *)&v86 + 1) + 8 * j);
              if ([v48 isEmojiInputMode])
              {
                id v51 = v48;

                id v25 = v51;
                goto LABEL_44;
              }
            }
            uint64_t v45 = [v43 countByEnumeratingWithState:&v86 objects:v97 count:16];
            if (v45) {
              continue;
            }
            break;
          }
        }
LABEL_44:
        char v12 = v42;
        uint64_t v29 = v43;
      }
      else
      {
        uint64_t v30 = [v25 identifier];
        int v31 = [v30 hasPrefix:@"emoji"];

        if (v31)
        {
          long long v92 = 0u;
          long long v93 = 0u;
          long long v90 = 0u;
          long long v91 = 0u;
          id v32 = v81;
          uint64_t v33 = [v32 countByEnumeratingWithState:&v90 objects:v98 count:16];
          if (v33)
          {
            uint64_t v34 = v33;
            uint64_t v35 = *(void *)v91;
            id v78 = v23;
            while (2)
            {
              uint64_t v36 = 0;
              int v37 = v25;
              do
              {
                if (*(void *)v91 != v35) {
                  objc_enumerationMutation(v32);
                }
                id v25 = *(id *)(*((void *)&v90 + 1) + 8 * v36);

                id v38 = [v25 identifier];
                int v39 = [v38 hasPrefix:@"emoji"];

                if (!v39)
                {
                  id v23 = v78;
                  goto LABEL_47;
                }
                ++v36;
                int v37 = v25;
              }
              while (v34 != v36);
              uint64_t v34 = [v32 countByEnumeratingWithState:&v90 objects:v98 count:16];
              id v23 = v78;
              if (v34) {
                continue;
              }
              break;
            }
          }

          id v25 = 0;
LABEL_47:

          char v12 = v80;
        }
        uint64_t v29 = v81;
        id v52 = [v25 identifier];
        int v53 = [v52 hasPrefix:@"emoji"];

        if (!v53) {
          goto LABEL_51;
        }
        uint64_t v54 = +[UIKeyboardInputMode intlInputMode];

        uint64_t v55 = [v81 arrayByAddingObject:v54];

        id v43 = [v9 identifiersFromInputModes:v55];
        UIKeyboardSetActiveInputModes(v43);
        id v25 = (id)v54;
        uint64_t v29 = (void *)v55;
      }

      goto LABEL_51;
    }
  }
}

- (void)setRestoresToEmojiInputMode
{
  self->_BOOL restoresToEmojiInputMode = 1;
}

- (void)notifyShiftState
{
  [(_UIKeyboardStateManager *)self callLayoutSetShift:self->m_shift];
  p_presentationDelegate = &self->_presentationDelegate;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  int v5 = [WeakRetained hasLanguageIndicator];

  if (v5) {
    [(_UIKeyboardStateManager *)self updateInputModeIndicatorOnSingleKeyOnly:0 preserveIfPossible:1];
  }
  [(_UIKeyboardStateManager *)self callLayoutSetAutoshift:self->m_autoshift];
  [(_UIKeyboardStateManager *)self callLayoutUpdateLocalizedKeys];
  int v6 = [(TIKeyboardState *)self->m_keyboardState shiftState];
  if (self->m_shiftLocked && ![(_UIKeyboardStateManager *)self isMinimized])
  {
LABEL_7:
    id v9 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    uint64_t v10 = [v9 layout];
    if (v10)
    {
      char v11 = (void *)v10;
      BOOL v12 = [(_UIKeyboardStateManager *)self callLayoutIsShiftKeyBeingHeld];

      if (v12)
      {
        m_keyboardState = self->m_keyboardState;
LABEL_14:
        uint64_t v14 = 1;
        goto LABEL_17;
      }
    }
    else
    {
    }
    m_keyboardState = self->m_keyboardState;
    uint64_t v14 = 3;
    goto LABEL_17;
  }
  id v7 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  if ([v7 isCapsLockSignOn])
  {
    BOOL v8 = [(_UIKeyboardStateManager *)self isMinimized];

    if (v8) {
      goto LABEL_7;
    }
  }
  else
  {
  }
  if (!self->m_autoshift)
  {
    m_keyboardState = self->m_keyboardState;
    if (!self->m_shift)
    {
      uint64_t v14 = 0;
      goto LABEL_17;
    }
    goto LABEL_14;
  }
  m_keyboardState = self->m_keyboardState;
  uint64_t v14 = 2;
LABEL_17:
  [(TIKeyboardState *)m_keyboardState setShiftState:v14];
  [(_UIKeyboardStateManager *)self updateKeyboardConfigurations];
  int v15 = [(TIKeyboardState *)self->m_keyboardState shiftState];
  id v16 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  int v17 = [v16 layout];
  int v18 = [v17 isAlphabeticPlane];

  if (v15 != v6 && v18)
  {
    if ([(_UIKeyboardStateManager *)self usesAutocorrectionLists])
    {
      uint64_t v19 = [(_UIKeyboardStateManager *)self autocorrectionController];
      [v19 updateAfterShiftStateChange];
    }
    if ([(TIKeyboardState *)self->m_keyboardState longPredictionListEnabled])
    {
      if ([(_UIKeyboardStateManager *)self usesCandidateSelection])
      {
        if (![(_UIKeyboardStateManager *)self usesAutocorrectionLists]
          || ([(_UIKeyboardStateManager *)self autocorrectionController],
              int v20 = objc_claimAutoreleasedReturnValue(),
              char v21 = [v20 hasAutocorrection],
              v20,
              (v21 & 1) == 0))
        {
          [(_UIKeyboardStateManager *)self generateCandidates];
        }
      }
    }
  }
  if (v15 != v6)
  {
    id v22 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    uint64_t v23 = [v22 layout];
    if (v23)
    {
      char v24 = (void *)v23;
      id v25 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      int v26 = [v25 hasAsyncCapableInputDelegate];

      if (v26)
      {
        uint64_t v27 = [(_UIKeyboardStateManager *)self inputDelegateManager];
        objc_initWeak(&location, v27);

        int v28 = [(TIKeyboardState *)self->m_keyboardState shiftState];
        if (qword_1EB25F9F8[0] != -1) {
          dispatch_once(qword_1EB25F9F8, &__block_literal_global_1175);
        }
        uint64_t v29 = [(_UIKeyboardStateManager *)self taskQueue];
        v31[0] = MEMORY[0x1E4F143A8];
        v31[1] = 3221225472;
        v31[2] = __43___UIKeyboardStateManager_notifyShiftState__block_invoke_3;
        v31[3] = &unk_1E52E3C68;
        objc_copyWeak(&v32, &location);
        int v33 = v6;
        int v34 = v28;
        [v29 addTask:v31 breadcrumb:qword_1EB25F9F0];

        objc_destroyWeak(&v32);
        objc_destroyWeak(&location);
      }
    }
    else
    {
    }
  }
  id v30 = objc_loadWeakRetained((id *)p_presentationDelegate);
  [v30 setCapsLockSign];
}

- (void)updateShiftState
{
  id v25 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  uint64_t v3 = [v25 keyInputDelegate];
  if (v3)
  {
    BOOL v4 = (void *)v3;
    BOOL v5 = [(_UIKeyboardStateManager *)self suppressUpdateShiftState];

    if (v5) {
      return;
    }
    id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    [WeakRetained layout];

    if (+[UIKeyboard isKeyboardProcess])
    {
      if ([(_UIKeyboardStateManager *)self noContent])
      {
        id v7 = [(_UIKeyboardStateManager *)self inputSystemSourceSession];
        BOOL v8 = [v7 documentState];
        id v9 = [v8 documentState];

        if (!v9) {
          return;
        }
      }
    }
    id v10 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    uint64_t v11 = [v10 layout];
    if (v11)
    {
      BOOL v12 = (void *)v11;
      BOOL v13 = [(_UIKeyboardStateManager *)self callLayoutIsShiftKeyPlaneChooser];

      if (v13) {
        goto LABEL_39;
      }
    }
    else
    {
    }
    id v14 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    uint64_t v15 = [v14 layout];
    if (v15)
    {
      id v16 = (void *)v15;
      BOOL v17 = [(_UIKeyboardStateManager *)self callLayoutIsShiftKeyBeingHeld];

      if (v17)
      {
        if (!self->m_shift || self->m_shiftHeldDownNeedsUpdated) {
          return;
        }
        self->m_shiftHeldDownNeedsUpdated = 1;
        goto LABEL_39;
      }
    }
    else
    {
    }
    self->m_shiftHeldDownNeedsUpdated = 0;
    if ([(_UIKeyboardStateManager *)self keyboardIsKeyPad])
    {
      BOOL m_disableAutocapitalization = 1;
    }
    else if ([(_UIKeyboardStateManager *)self _delegateRequiresKeyEvents])
    {
      BOOL m_disableAutocapitalization = self->m_disableAutocapitalization;
    }
    else
    {
      BOOL m_disableAutocapitalization = 0;
    }
    if (!self->m_autocapitalizationPreference || self->m_shiftPreventAutoshift) {
      goto LABEL_39;
    }
    if (self->m_shiftLocked) {
      BOOL m_disableAutocapitalization = 1;
    }
    if (m_disableAutocapitalization
      || [(UITextInputTraits *)self->m_traits isSecureTextEntry]
      && ![(UITextInputTraits *)self->m_traits displaySecureTextUsingPlainText])
    {
LABEL_39:
      [(_UIKeyboardStateManager *)self notifyShiftState];
      return;
    }
    if (![(_UIKeyboardStateManager *)self callLayoutUsesAutoShift]
      || [(UITextInputTraits *)self->m_traits autocapitalizationType] == 1
      && ([(_UIKeyboardStateManager *)self inputDelegateManager],
          uint64_t v19 = objc_claimAutoreleasedReturnValue(),
          [v19 markedTextRange],
          int v20 = objc_claimAutoreleasedReturnValue(),
          v20,
          v19,
          v20))
    {
      *(_WORD *)&self->m_autoshift = 0;
    }
    else
    {
      char v21 = [(_UIKeyboardStateManager *)self inputDelegate];

      if (v21)
      {
        self->m_autoshift = 0;
        int64_t v22 = [(UITextInputTraits *)self->m_traits autocapitalizationType];
        if (v22 == 1)
        {
          uint64_t v23 = [(_UIKeyboardStateManager *)self inputDelegateManager];
          unsigned int v24 = [v23 _characterBeforeCaretSelection];

          if ((v24 > 0x20 || ((1 << v24) & 0x100000401) == 0) && v24 != 160) {
            goto LABEL_36;
          }
        }
        else if (v22 != 3 {
               && (v22 != 2
        }
                || ![(_UIKeyboardStateManager *)self isSelectionAtSentenceAutoshiftBoundary:1]))
        {
          goto LABEL_36;
        }
        *(_WORD *)&self->m_autoshift = 257;
      }
    }
LABEL_36:
    [(_UIKeyboardStateManager *)self notifyShiftState];
    [(_UIKeyboardStateManager *)self _forwardNeededShiftStatesToDestination];
    return;
  }
}

- (void)_forwardNeededShiftStatesToDestination
{
  v14[3] = *MEMORY[0x1E4F143B8];
  if (+[UIKeyboard isKeyboardProcess])
  {
    id WeakRetained = objc_loadWeakRetained(&qword_1EB25FA00);
    BOOL v4 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    id v5 = [v4 keyInputDelegate];

    if (self->m_shift != byte_1EB25F759
      || self->m_autoshift != byte_1EB25F75A
      || WeakRetained != v5
      || self->m_shiftLocked != byte_1EB25F75B)
    {
      int v6 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
      v13[0] = @"shift";
      id v7 = [NSNumber numberWithBool:self->m_shift];
      v14[0] = v7;
      v13[1] = @"autoShift";
      BOOL v8 = [NSNumber numberWithBool:self->m_autoshift];
      v14[1] = v8;
      v13[2] = @"shiftLocked";
      id v9 = [NSNumber numberWithBool:self->m_shiftLocked];
      v14[2] = v9;
      id v10 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v14 forKeys:v13 count:3];
      [v6 forwardKeyboardOperation:sel_setShiftStatesNeededInDestination_autoShifted_shiftLocked_ object:v10];

      uint64_t v11 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      BOOL v12 = [v11 keyInputDelegate];
      objc_storeWeak(&qword_1EB25FA00, v12);

      byte_1EB25F759 = self->m_shift;
      byte_1EB25F75A = self->m_autoshift;
      byte_1EB25F75B = self->m_shiftLocked;
    }
  }
}

- (BOOL)canPasteImage
{
  if (!self->m_needsPasteSupportUpdate) {
    return self->m_delegateSupportsImagePaste;
  }
  BOOL result = [(_UIKeyboardStateManager *)self uncachedDelegateSupportsImagePaste];
  self->m_delegateSupportsImagePaste = result;
  self->m_needsPasteSupportUpdate = 0;
  return result;
}

- (BOOL)canInsertAdaptiveImageGlyph
{
  id v2 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  uint64_t v3 = [v2 delegateRespectingForwardingDelegate:0];

  char v4 = 0;
  if (+[UIKeyboard isRemoteEmojiCollectionViewEnabled])
  {
    if (objc_opt_respondsToSelector()) {
      char v4 = [v3 supportsAdaptiveImageGlyph];
    }
    else {
      char v4 = 0;
    }
  }

  return v4;
}

- (BOOL)canInsertEmojiImageTextAttachment
{
  id v2 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  uint64_t v3 = [v2 delegateRespectingForwardingDelegate:0];

  char v4 = 0;
  if (+[UIKeyboard isRemoteEmojiCollectionViewEnabled])
  {
    if (objc_opt_respondsToSelector()) {
      char v4 = [v3 supportsEmojiImageTextAttachments];
    }
    else {
      char v4 = 0;
    }
  }

  return v4;
}

- (BOOL)canInsertStickerAsTextInputPayload
{
  id v2 = +[UITextInputPayloadController sharedInstance];
  uint64_t v3 = [v2 supportedPayloadIds];

  LOBYTE(v2) = [v3 containsObject:@"com.apple.messages.stageSticker"];
  return (char)v2;
}

- (BOOL)isSelectionAtSentenceAutoshiftBoundary:(BOOL)a3
{
  BOOL v3 = a3;
  id v5 = [(_UIKeyboardStateManager *)self inputManagerState];

  if (v5 && v3)
  {
    int v6 = [(_UIKeyboardStateManager *)self inputManagerState];
    char v7 = [v6 nextInputWouldStartSentence];
  }
  else
  {
    BOOL v8 = [(_UIKeyboardStateManager *)self inputDelegate];
    unsigned int v9 = [v8 _characterInRelationToRangedSelection:0xFFFFFFFFLL];

    char v7 = (v9 & 0xFFFFFF7F) == 32;
    if ((v9 & 0xFFFFFF7F) != 0x20) {
      goto LABEL_22;
    }
    uint64_t v10 = 4294967294;
    unint64_t v11 = -1;
    do
    {
      ++v11;
      BOOL v12 = [(_UIKeyboardStateManager *)self inputDelegate];
      unsigned int v9 = [v12 _characterInRelationToRangedSelection:v10];

      uint64_t v10 = (v10 - 1);
    }
    while ((v9 & 0xFFFFFF7F) == 0x20 && v11 < 2);
    if (v11 > 1)
    {
      return 1;
    }
    else
    {
LABEL_22:
      if (v9 > 0x3F) {
        return v9 == 161 || v9 == 191;
      }
      if (((1 << v9) & 0x8000400200000000) == 0)
      {
        char v7 = 1;
        if (((1 << v9) & 0x401) == 0) {
          return v9 == 161 || v9 == 191;
        }
      }
    }
  }
  return v7;
}

- (BOOL)nextInputWouldStartSentence
{
  BOOL v3 = [(_UIKeyboardStateManager *)self inputManagerState];

  if (!v3) {
    return 0;
  }
  char v4 = [(_UIKeyboardStateManager *)self inputManagerState];
  char v5 = [v4 nextInputWouldStartSentence];

  return v5;
}

- (void)setShiftOffIfNeeded
{
  p_presentationDelegate = &self->_presentationDelegate;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  char v5 = [WeakRetained layout];

  if (v5 && !self->m_shiftLocked)
  {
    id v6 = objc_loadWeakRetained((id *)p_presentationDelegate);
    uint64_t v7 = [v6 layout];
    if (v7)
    {
      BOOL v8 = (void *)v7;
      BOOL v9 = [(_UIKeyboardStateManager *)self callLayoutIsShiftKeyBeingHeld];

      if (v9) {
        return;
      }
    }
    else
    {
    }
    id v10 = objc_loadWeakRetained((id *)p_presentationDelegate);
    uint64_t v11 = [v10 layout];
    if (v11)
    {
      BOOL v12 = (void *)v11;
      BOOL v13 = [(_UIKeyboardStateManager *)self callLayoutIsShiftKeyPlaneChooser];

      if (v13) {
        return;
      }
    }
    else
    {
    }
    [(_UIKeyboardStateManager *)self setShift:0];
    [(_UIKeyboardStateManager *)self setShiftPreventAutoshift:0];
  }
}

- (void)toggleShift
{
}

- (void)setShift:(BOOL)a3
{
}

- (void)setShift:(BOOL)a3 autoshift:(BOOL)a4
{
  if ((!a4 || [(_UIKeyboardStateManager *)self callLayoutUsesAutoShift])
    && !self->m_settingShift)
  {
    self->m_settingShift = 1;
    self->m_shift = a3;
    self->m_autoshift = a4;
    if (!a3) {
      self->m_shiftLocked = 0;
    }
    [(_UIKeyboardStateManager *)self setShiftNeedsUpdate];
    self->m_settingShift = 0;
    [(_UIKeyboardStateManager *)self _forwardNeededShiftStatesToDestination];
  }
}

- (void)setShiftPreventAutoshift:(BOOL)a3
{
  self->m_shiftPreventAutoshift = a3;
  [(_UIKeyboardStateManager *)self setShiftNeedsUpdate];
}

- (void)setShiftNeedsUpdate
{
  self->m_shiftNeedsUpdate = 1;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained updateObserverState];
}

- (void)_setShiftNeedsUpdate:(BOOL)a3
{
  self->m_shiftNeedsUpdate = a3;
}

- (void)setShiftLocked:(BOOL)a3
{
  if (self->m_shiftLockedEnabled)
  {
    self->m_shiftLocked = a3;
    if (a3) {
      [(_UIKeyboardStateManager *)self setShift:1 autoshift:0];
    }
    else {
      [(_UIKeyboardStateManager *)self _forwardNeededShiftStatesToDestination];
    }
  }
}

- (void)setShiftLockedForced:(BOOL)a3
{
  self->m_shiftLocked = a3;
  if (a3) {
    [(_UIKeyboardStateManager *)self setShift:1 autoshift:0];
  }
}

- (BOOL)isShifted
{
  return self->m_shift;
}

- (BOOL)isAutoShifted
{
  return self->m_autoshift;
}

- (BOOL)isShiftLocked
{
  return self->m_shiftLocked;
}

- (void)setShiftStatesNeededInDestination:(BOOL)a3 autoShifted:(BOOL)a4 shiftLocked:(BOOL)a5
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  int v10 = [WeakRetained keyboardLayoutIsInAnotherProcess];

  if (v10)
  {
    self->m_shift = a3;
    self->m_autoshift = a4;
    self->m_shiftLocked = a5;
  }
}

- (void)updateShiftStateAfterAsyncSelectionChange
{
  if ([(UITextInputTraits *)self->m_traits autocapitalizationType] == 1
    && ![(_UIKeyboardStateManager *)self isShiftLocked])
  {
    [(_UIKeyboardStateManager *)self clearShiftState];
  }
}

- (BOOL)shiftLockedEnabled
{
  return self->m_shiftLockedEnabled;
}

- (BOOL)isCapsLockASCIIToggle
{
  if (![(_UIKeyboardStateManager *)self isCapsLockSwitchEnabled]) {
    return 0;
  }
  BOOL v3 = +[UIKeyboardInputModeController sharedInputModeController];
  char v4 = [v3 inputModeForASCIIToggleWithTraits:self->m_traits];
  BOOL v5 = v4 != 0;

  return v5;
}

- (void)unsetDidUpdateCapsLockLanguageSwitchSetting
{
  self->m_didUpdateCapsLockLanguageSwitchSetting = 0;
}

- (BOOL)isCapsLockSwitchEnabled
{
  BOOL v3 = +[UIKeyboardPreferencesController sharedPreferencesController];
  char v4 = [v3 preferencesActions];
  BOOL v5 = [v4 valueForPreferenceKey:*MEMORY[0x1E4FAE5F8]];

  if (!v5)
  {
    if (self->m_didUpdateCapsLockLanguageSwitchSetting)
    {
LABEL_10:
      char m_shouldEnableCapsLockLanguageSwitchByDefault = self->m_shouldEnableCapsLockLanguageSwitchByDefault;
      goto LABEL_11;
    }
    uint64_t v7 = [MEMORY[0x1E4F1CAD0] setWithArray:&unk_1ED3EF290];
    BOOL v8 = (void *)MEMORY[0x1E4F1CA20];
    BOOL v9 = [MEMORY[0x1E4F1CA20] _deviceLanguage];
    int v10 = [v8 localeWithLocaleIdentifier:v9];
    uint64_t v11 = [v10 languageCode];

    if ([v7 containsObject:v11])
    {
      char HasLanguageSwitchLabel = 1;
    }
    else
    {
      if (self->m_shouldEnableCapsLockLanguageSwitchByDefault)
      {
LABEL_9:
        self->m_didUpdateCapsLockLanguageSwitchSetting = 1;

        goto LABEL_10;
      }
      char HasLanguageSwitchLabel = BKSHIDServicesCapsLockKeyHasLanguageSwitchLabel();
    }
    self->char m_shouldEnableCapsLockLanguageSwitchByDefault = HasLanguageSwitchLabel;
    goto LABEL_9;
  }
  char m_shouldEnableCapsLockLanguageSwitchByDefault = [v5 BOOLValue];
LABEL_11:

  return m_shouldEnableCapsLockLanguageSwitchByDefault;
}

- (void)clearShiftState
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  int v4 = [WeakRetained keyboardLayoutIsInAnotherProcess];

  if (v4)
  {
    id v5 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
    [v5 forwardInputDestinationEventToUIHost:sel_clearShiftState];
  }
  else
  {
    [(_UIKeyboardStateManager *)self setShift:0];
    [(_UIKeyboardStateManager *)self setShiftPreventAutoshift:0];
  }
}

- (void)forceShiftUpdate
{
  self->m_shiftNeedsUpdate = 0;
}

- (void)forceShiftUpdateIfKeyboardStateChanged
{
  BOOL v3 = [(_UIKeyboardStateManager *)self changedDelegate];

  if (v3)
  {
    [(_UIKeyboardStateManager *)self updateShiftState];
    self->m_shiftNeedsUpdate = 0;
  }
}

- (BOOL)shouldSkipCandidateSelection
{
  return [(TIKeyboardState *)self->m_keyboardState shouldSkipCandidateSelection];
}

- (void)setShouldSkipCandidateSelection:(BOOL)a3
{
}

- (void)setShouldSkipCandidateSelection:(BOOL)a3 userInitiated:(BOOL)a4
{
  BOOL v4 = a4;
  uint64_t v6 = [(UITextInputTraits *)self->m_traits isSecureTextEntry] | a3;
  if (v4
    && v6
    && ([(TIKeyboardState *)self->m_keyboardState shouldSkipCandidateSelection] & 1) == 0
    && [(_UIKeyboardStateManager *)self usesCandidateSelection])
  {
    uint64_t v7 = [(_UIKeyboardStateManager *)self updatedKeyBehaviors];
    uint64_t v8 = [v7 returnKeyBehavior];

    if (v8 == 10) {
      id v9 = [(_UIKeyboardStateManager *)self acceptInlineCandidate];
    }
    else {
      [(_UIKeyboardStateManager *)self acceptAutocorrectionWithCompletionHandler:0];
    }
  }
  m_keyboardState = self->m_keyboardState;
  [(TIKeyboardState *)m_keyboardState setShouldSkipCandidateSelection:v6];
}

- (void)setInputManagerState:(id)a3
{
  id v5 = (TIKeyboardInputManagerState *)a3;
  m_inputManagerState = self->m_inputManagerState;
  if (m_inputManagerState == v5) {
    goto LABEL_14;
  }
  p_m_inputManagerState = (id *)&self->m_inputManagerState;
  BOOL v17 = v5;
  char v8 = [(TIKeyboardInputManagerState *)m_inputManagerState usesContinuousPath];
  int v9 = [(TIKeyboardInputManagerState *)self->m_inputManagerState supportsSetPhraseBoundary];
  int v10 = [(TIKeyboardInputManagerState *)v17 supportsSetPhraseBoundary];
  objc_storeStrong((id *)&self->m_inputManagerState, a3);
  if ([(TIKeyboardState *)self->m_keyboardState longPredictionListEnabled])
  {
    if (self->m_usesCandidateSelection) {
      goto LABEL_9;
    }
    self->int m_usesCandidateSelection = 1;
  }
  else
  {
    if (!*p_m_inputManagerState) {
      goto LABEL_9;
    }
    int m_usesCandidateSelection = self->m_usesCandidateSelection;
    if (m_usesCandidateSelection == [*p_m_inputManagerState usesCandidateSelection]) {
      goto LABEL_9;
    }
    self->int m_usesCandidateSelection = [(TIKeyboardInputManagerState *)self->m_inputManagerState usesCandidateSelection];
  }
  [(_UIKeyboardStateManager *)self updateShowCandidateBar];
LABEL_9:
  int v12 = v9 ^ v10;
  [(TISmartPunctuationController *)self->m_smartPunctuationController setAutoQuoteType:[(TIKeyboardInputManagerState *)self->m_inputManagerState autoquoteType]];
  BOOL v13 = +[UIKeyboardInputModeController sharedInputModeController];
  id v14 = [v13 currentInputMode];
  uint64_t v15 = [v14 primaryLanguage];
  [(_UIKeyboardStateManager *)self updateSmartPunctuationOptionsForLocaleIdentifier:v15];

  if ((v8 & 1) == 0 && [*p_m_inputManagerState usesContinuousPath])
  {
    id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    [WeakRetained presentContinuousPathIntroductionView];
  }
  id v5 = v17;
  if (v12)
  {
    [(_UIKeyboardStateManager *)self notifyInputSourceStateChangeIfNeeded];
    id v5 = v17;
  }
LABEL_14:
}

- (void)updateShowCandidateBar
{
  BOOL v3 = [(_UIKeyboardStateManager *)self shouldShowCandidateBar];
  [(_UIKeyboardStateManager *)self setShowsCandidateBar:v3];
}

- (BOOL)usesCandidateSelection
{
  BOOL v3 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
  BOOL v4 = [v3 rtiInputSourceState];

  if (v4)
  {
    id v5 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
    uint64_t v6 = [v5 rtiInputSourceState];
    char v7 = [v6 usesCandidateSelection];

    return v7;
  }
  if (self->m_usesCandidateSelection)
  {
    if (UIKeyboardNeverShowCandidateBarForCurrentInputMode()) {
      return 0;
    }
  }
  else if ((UIKeyboardAlwaysShowCandidateBarForCurrentInputMode() & 1) == 0)
  {
    return 0;
  }
  return [(TIKeyboardState *)self->m_keyboardState suppressingCandidateSelection] ^ 1;
}

- (void)setUsesCandidateSelection:(BOOL)a3
{
  BOOL v3 = a3;
  BOOL v5 = [(_UIKeyboardStateManager *)self usesCandidateSelection];
  BOOL v6 = !v3;
  [(TIKeyboardState *)self->m_keyboardState setSuppressingCandidateSelection:v6];
  if (!v6)
  {
    char v7 = [(_UIKeyboardStateManager *)self inputManagerState];
    int v8 = [v7 usesCandidateSelection];

    if (((v5 | v8 ^ 1) & 1) == 0)
    {
      [(_UIKeyboardStateManager *)self clearInput];
    }
  }
}

- (BOOL)usesContinuousPath
{
  return [(TIKeyboardInputManagerState *)self->m_inputManagerState usesContinuousPath];
}

- (BOOL)usesContinuousPathProgressiveCandidates
{
  return [(TIKeyboardInputManagerState *)self->m_inputManagerState usesContinuousPathProgressiveCandidates];
}

- (void)setLayoutAllowsContinuousPath:(BOOL)a3
{
  self->m_layoutAllowsCP = a3;
}

- (BOOL)continuousPathUnderway
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  char v3 = [WeakRetained continuousPathUnderway];

  return v3;
}

- (BOOL)suppliesCompletions
{
  m_candidateList = self->m_candidateList;
  if (m_candidateList
    && [(UIKeyboardCandidateList *)m_candidateList isFloatingList]
    && ![(_UIKeyboardStateManager *)self canUseCandidateBarAsSupplementToInlineView])
  {
    return 0;
  }
  BOOL v4 = [(_UIKeyboardStateManager *)self textInputTraits];
  int v5 = [v4 isSingleLineDocument];

  BOOL v6 = [(_UIKeyboardStateManager *)self inputManagerState];
  char v7 = v6;
  if (v5)
  {
    if ([v6 suppressCompletionsForFieldEditor])
    {
      BOOL v8 = [(TIKeyboardCandidateResultSet *)self->m_candidateResultSet hasOnlySlottedCandidates];
LABEL_10:
      BOOL v9 = v8;
      goto LABEL_11;
    }
  }
  else if (([v6 suppliesCompletions] & 1) == 0)
  {
    BOOL v8 = [(_UIKeyboardStateManager *)self shouldShowLongPredictionList];
    goto LABEL_10;
  }
  BOOL v9 = 1;
LABEL_11:

  return v9;
}

- (BOOL)supportsNumberKeySelection
{
  id v2 = [(_UIKeyboardStateManager *)self inputManagerState];
  char v3 = [v2 supportsNumberKeySelection];

  return v3;
}

- (BOOL)shouldUsePinyinStyleRowNavigation
{
  id v2 = [(_UIKeyboardStateManager *)self inputManagerState];
  char v3 = [v2 usesPunctuationKeysForRowNavigation];

  return v3;
}

- (void)handleDeleteAsRepeat:(BOOL)a3 executionContext:(id)a4
{
  BOOL v4 = a3;
  id v8 = a4;
  if (![(_UIKeyboardStateManager *)self _delegateRequiresKeyEvents]
    || +[UIKeyboard isKeyboardProcess]
    && [(_UIKeyboardStateManager *)self _hasMarkedText])
  {
    if (v4 && self->m_repeatDeleteWord)
    {
      uint64_t v6 = 512;
    }
    else if ([(_UIKeyboardStateManager *)self shouldUseAdaptiveDelete])
    {
      uint64_t v6 = 512;
    }
    else
    {
      uint64_t v6 = 0;
    }
    [(_UIKeyboardStateManager *)self deleteFromInputWithFlags:v6 executionContext:v8];
  }
  else
  {
    char v7 = [(_UIKeyboardStateManager *)self physicalKeyboardEventWithInput:@"\x7F" inputFlags:v4];
    [(_UIKeyboardStateManager *)self _handleKeyEvent:v7 executionContext:v8];
  }
}

- (void)startDelayDeleteTimer
{
}

- (void)handleDeleteWithExecutionContext:(id)a3
{
  id v12 = a3;
  BOOL v4 = [(_UIKeyboardStateManager *)self inlineTextCompletionController];
  int v5 = [v4 canUndoAcceptedTextCompletion];

  if (v5)
  {
    [(_UIKeyboardStateManager *)self flushTouchEventWaitingForKeyInputEventIfNecessary];
    [(_UIKeyboardStateManager *)self setDeleteWordLastDelete:-*MEMORY[0x1E4F1CF68]];
    [(_UIKeyboardStateManager *)self setDeletedString:0];
    id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    [WeakRetained playDeleteKeyFeedbackIfNecessaryRepeat:0 rapid:0];

    char v7 = [(_UIKeyboardStateManager *)self inlineTextCompletionController];
    id v8 = [v12 childWithContinuation:&__block_literal_global_1211];
    [v7 undoAcceptedTextCompletionExecutionContext:v8];
  }
  else
  {
    double Current = CFAbsoluteTimeGetCurrent();
    [(_UIKeyboardStateManager *)self deleteWordLastDelete];
    if (Current - v10 <= 1.0)
    {
      [(_UIKeyboardStateManager *)self startDelayDeleteTimer];
      [(_UIKeyboardStateManager *)self flushTouchEventWaitingForKeyInputEventIfNecessary];
      [v12 returnExecutionToParent];
    }
    else
    {
      [(_UIKeyboardStateManager *)self setDeleteWordLastDelete:-*MEMORY[0x1E4F1CF68]];
      [(_UIKeyboardStateManager *)self setDeletedString:0];
      id v11 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      [v11 playDeleteKeyFeedbackIfNecessaryRepeat:0 rapid:0];

      [(_UIKeyboardStateManager *)self handleDeleteAsRepeat:0 executionContext:v12];
    }
  }
}

- (void)completeDelete
{
  char v3 = [(_UIKeyboardStateManager *)self autocorrectionController];
  char v4 = [v3 isSmartReplyCandidates];

  if ((v4 & 1) == 0)
  {
    [(_UIKeyboardStateManager *)self generateCandidates];
    [(_UIKeyboardStateManager *)self updateCandidateDisplay];
  }
  [(_UIKeyboardStateManager *)self updateReturnKey];
  [(_UIKeyboardStateManager *)self updateNoContentViews];
}

- (BOOL)shouldUseAdaptiveDelete
{
  if (+[UIKeyboard isKeyboardProcess])
  {
    char v3 = [(_UIKeyboardStateManager *)self inputSystemSourceSession];
    char v4 = [v3 documentState];
    int v5 = [v4 documentState];
  }
  else
  {
    int v5 = [(_UIKeyboardStateManager *)self documentState];
  }
  uint64_t v6 = [v5 contextBeforeInput];
  char v7 = [v6 _lastGrapheme];
  char v8 = [v7 containsString:@"\n"];

  if (v8)
  {
    LOBYTE(v9) = 0;
  }
  else
  {
    double v10 = +[UIDictationController sharedInstance];
    int v9 = [v10 languageSupportsAdaptiveDelete];

    if (v9)
    {
      id v11 = +[UIDictationController sharedInstance];
      unint64_t v12 = [v11 startRangeOfCurrentHypothesis];
      BOOL v13 = [v5 contextBeforeInput];
      id v14 = [MEMORY[0x1E4F28B88] whitespaceAndNewlineCharacterSet];
      uint64_t v15 = [v13 stringByTrimmingCharactersInSet:v14];
      unint64_t v16 = [v15 length];

      if (v12 >= v16)
      {
        uint64_t v23 = +[UIDictationController sharedInstance];
        objc_msgSend(v23, "setStartRangeOfCurrentHypothesis:", 0x7FFFFFFFFFFFFFFFLL, 0);
        LOBYTE(v9) = 0;
      }
      else
      {
        BOOL v17 = +[UIDictationUtilities trackingPunctuations];
        int v18 = [v5 contextBeforeInput];
        uint64_t v19 = [MEMORY[0x1E4F28B88] whitespaceAndNewlineCharacterSet];
        int v20 = [v18 stringByTrimmingCharactersInSet:v19];
        char v21 = [v20 _lastGrapheme];
        int v22 = [v17 containsObject:v21];

        uint64_t v23 = +[UIDictationController sharedInstance];
        int v9 = [v23 shouldDeleteWordOnBackspaceTap] & (v22 ^ 1);
      }
    }
  }

  return v9;
}

- (void)handleDeleteWordWithExecutionContext:(id)a3
{
  id v8 = a3;
  [(_UIKeyboardStateManager *)self clearDelayDeleteTimer];
  char v4 = [(_UIKeyboardStateManager *)self deletedString];

  if (v4)
  {
    int v5 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    uint64_t v6 = [(_UIKeyboardStateManager *)self deletedString];
    [v5 insertText:v6];

    [(_UIKeyboardStateManager *)self setDeletedString:0];
  }
  else
  {
    id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    [WeakRetained playDeleteKeyFeedbackRepeat:0 rapid:0];
  }
  [(_UIKeyboardStateManager *)self deleteFromInputWithFlags:512 executionContext:v8];
}

- (void)handleDelete
{
  char v4 = [(_UIKeyboardStateManager *)self taskQueue];
  int v5 = [v4 isMainThreadExecutingTask];

  if (v5)
  {
    char v7 = [MEMORY[0x1E4F28B00] currentHandler];
    objc_msgSend(v7, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, @"_UIKeyboardStateManager.m", 10992, @"Received %s while performing another keyboard action.", "-[_UIKeyboardStateManager handleDelete]");
  }
  if (qword_1EB25FA10 != -1) {
    dispatch_once(&qword_1EB25FA10, &__block_literal_global_1217);
  }
  uint64_t v6 = [(_UIKeyboardStateManager *)self taskQueue];
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = __39___UIKeyboardStateManager_handleDelete__block_invoke_3;
  v8[3] = &unk_1E52E34C8;
  void v8[4] = self;
  [v6 addTask:v8 breadcrumb:qword_1EB25FA08];
}

- (BOOL)canHandleDelete
{
  return ![(_UIKeyboardStateManager *)self noContent];
}

- (void)handleClearWithInsertBeforeAdvance:(id)a3
{
  id v4 = a3;
  id v5 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  [v5 replaceRange:0 oldText:0 withText:v4 forReplaceAction:2];
}

- (void)handleClear
{
  char v3 = [(_UIKeyboardStateManager *)self taskQueue];
  char v4 = [v3 isMainThreadExecutingTask];

  if ((v4 & 1) == 0)
  {
    id v5 = [(_UIKeyboardStateManager *)self taskQueue];
    [v5 waitUntilAllTasksAreFinished];
  }
  if (qword_1EB25FA20 != -1) {
    dispatch_once(&qword_1EB25FA20, &__block_literal_global_1221);
  }
  uint64_t v6 = [(_UIKeyboardStateManager *)self taskQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __38___UIKeyboardStateManager_handleClear__block_invoke_3;
  v7[3] = &unk_1E52E34C8;
  v7[4] = self;
  [v6 addTask:v7 breadcrumb:qword_1EB25FA18];
}

- (void)handleClearWithExecutionContext:(id)a3
{
  id v7 = a3;
  char v4 = [(_UIKeyboardStateManager *)self inputDelegate];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  if (isKindOfClass)
  {
    uint64_t v6 = [(_UIKeyboardStateManager *)self inputDelegate];
    [v6 _clearButtonClicked:0];
  }
  else
  {
    uint64_t v6 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    [v6 replaceRange:0 oldText:0 withText:&stru_1ED0E84C0 forReplaceAction:2];
  }

  [v7 returnExecutionToParent];
}

- (BOOL)handleMoveCursorToStartOfLine:(BOOL)a3 beforePublicKeyCommands:(BOOL)a4 testOnly:(BOOL)a5 savedHistory:(id)a6 force:(BOOL)a7 canHandleSelectableInputDelegateCommand:(id)a8 keyEvent:(id)a9
{
  BOOL v10 = a7;
  BOOL v12 = a4;
  id v15 = a6;
  unint64_t v16 = (uint64_t (**)(id, char *))a8;
  id v17 = a9;
  BOOL v18 = [(_UIKeyboardStateManager *)self hasEditableMarkedText];
  if ([(_UIKeyboardStateManager *)self _hasMarkedText])
  {
    [(_UIKeyboardStateManager *)self inputManagerState];
    id v32 = self;
    BOOL v19 = v12;
    BOOL v20 = v10;
    char v21 = v16;
    id v22 = v17;
    id v23 = v15;
    BOOL v24 = a5;
    v26 = BOOL v25 = a3;
    int v27 = [v26 supportsSetPhraseBoundary] ^ 1;

    a3 = v25;
    a5 = v24;
    id v15 = v23;
    id v17 = v22;
    unint64_t v16 = v21;
    BOOL v10 = v20;
    BOOL v12 = v19;
    self = v32;
    if (!v18) {
      goto LABEL_3;
    }
LABEL_6:
    if (v10)
    {
      LOBYTE(v28) = 1;
      [(_UIKeyboardStateManager *)self movePhraseBoundaryToDirection:1 granularity:4];
      goto LABEL_16;
    }
LABEL_15:
    LOBYTE(v28) = 1;
    goto LABEL_16;
  }
  int v27 = 0;
  if (v18) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v12 | v27))
  {
    LOBYTE(v28) = !v12;
    goto LABEL_16;
  }
  if (+[UIKeyboard isKeyboardProcess])
  {
    uint64_t v29 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    char v30 = [v29 shouldRespectForwardingInputDelegate];

    if ((v30 & 1) == 0)
    {
      if (!a5) {
        [(_UIKeyboardStateManager *)self forwardKeyboardEventBackToDestination:v17];
      }
      goto LABEL_15;
    }
  }
  int v28 = v16[2](v16, sel__moveToStartOfLine_withHistory_);
  if (v28 && !a5)
  {
    v33[0] = MEMORY[0x1E4F143A8];
    v33[1] = 3221225472;
    v33[2] = __158___UIKeyboardStateManager_handleMoveCursorToStartOfLine_beforePublicKeyCommands_testOnly_savedHistory_force_canHandleSelectableInputDelegateCommand_keyEvent___block_invoke;
    v33[3] = &unk_1E52DC3D0;
    v33[4] = self;
    BOOL v35 = a3;
    id v34 = v15;
    [(_UIKeyboardStateManager *)self performBlockWithTextInputChangesIgnoredForNonMacOS:v33];
  }
LABEL_16:

  return v28;
}

- (BOOL)handleMoveCursorToEndOfLine:(BOOL)a3 beforePublicKeyCommands:(BOOL)a4 testOnly:(BOOL)a5 savedHistory:(id)a6 force:(BOOL)a7 canHandleSelectableInputDelegateCommand:(id)a8 keyEvent:(id)a9
{
  BOOL v10 = a7;
  BOOL v12 = a4;
  id v15 = a6;
  unint64_t v16 = (uint64_t (**)(id, char *))a8;
  id v17 = a9;
  BOOL v18 = [(_UIKeyboardStateManager *)self hasEditableMarkedText];
  if ([(_UIKeyboardStateManager *)self _hasMarkedText])
  {
    [(_UIKeyboardStateManager *)self inputManagerState];
    id v32 = self;
    BOOL v19 = v12;
    BOOL v20 = v10;
    char v21 = v16;
    id v22 = v17;
    id v23 = v15;
    BOOL v24 = a5;
    v26 = BOOL v25 = a3;
    int v27 = [v26 supportsSetPhraseBoundary] ^ 1;

    a3 = v25;
    a5 = v24;
    id v15 = v23;
    id v17 = v22;
    unint64_t v16 = v21;
    BOOL v10 = v20;
    BOOL v12 = v19;
    self = v32;
    if (!v18) {
      goto LABEL_3;
    }
LABEL_6:
    if (v10) {
      [(_UIKeyboardStateManager *)self movePhraseBoundaryToDirection:0 granularity:4];
    }
    goto LABEL_8;
  }
  int v27 = 0;
  if (v18) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v12 | v27))
  {
    LOBYTE(v28) = !v12;
    goto LABEL_9;
  }
  if (+[UIKeyboard isKeyboardProcess])
  {
    char v30 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    char v31 = [v30 shouldRespectForwardingInputDelegate];

    if ((v31 & 1) == 0)
    {
      if (!a5) {
        [(_UIKeyboardStateManager *)self forwardKeyboardEventBackToDestination:v17];
      }
LABEL_8:
      LOBYTE(v28) = 1;
      goto LABEL_9;
    }
  }
  int v28 = v16[2](v16, sel__moveToEndOfLine_withHistory_);
  if (v28 && !a5)
  {
    v33[0] = MEMORY[0x1E4F143A8];
    v33[1] = 3221225472;
    v33[2] = __156___UIKeyboardStateManager_handleMoveCursorToEndOfLine_beforePublicKeyCommands_testOnly_savedHistory_force_canHandleSelectableInputDelegateCommand_keyEvent___block_invoke;
    v33[3] = &unk_1E52DC3D0;
    v33[4] = self;
    BOOL v35 = a3;
    id v34 = v15;
    [(_UIKeyboardStateManager *)self performBlockWithTextInputChangesIgnoredForNonMacOS:v33];
  }
LABEL_9:

  return v28;
}

- (void)forwardKeyboardEventBackToDestination:(id)a3
{
  id v4 = a3;
  id v7 = [(_UIKeyboardStateManager *)self inputSystemSourceSession];
  id v5 = [v7 textOperations];
  [v4 setKeyEventForwardedFromInputUIHost:1];
  [v5 setCustomInfoType:0x1ED14BB60];
  [v5 setCustomInfo:v4];

  uint64_t v6 = [(_UIKeyboardStateManager *)self buildInputSourceState];
  [v5 setInputSourceState:v6];

  [v7 flushOperations];
}

- (BOOL)handleHorizontalArrow:(BOOL)a3 shiftDown:(BOOL)a4 beforePublicKeyCommands:(BOOL)a5 testOnly:(BOOL)a6 isVerticalCandidate:(BOOL)a7 hasCandidatesForTypedInput:(BOOL)a8 shouldNavigateCandidateList:(BOOL)a9 canHandleInputDelegateCommand:(id)a10 savedHistory:(id)a11 keyCommandTypeHandled:(unint64_t *)a12 keyEvent:(id)a13
{
  BOOL v13 = a8;
  BOOL v14 = a7;
  BOOL v16 = a5;
  BOOL v49 = a4;
  int v17 = a3;
  BOOL v19 = (uint64_t (**)(id, char *))a10;
  id v50 = a11;
  id v20 = a13;
  BOOL v21 = [(_UIKeyboardStateManager *)self liveConversionEnabled];
  if (v16)
  {
    if ([(_UIKeyboardStateManager *)self shouldApplyKeyboardCommandToUIHost])
    {
      [v20 setKeyCommandHandlingBeforePublic:1];
      id v22 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
      LOBYTE(v23) = [v22 synchronousForwardKeyCommandsBeforePublicToUIHost:v20];

LABEL_52:
      BOOL v25 = v19;
      goto LABEL_53;
    }
    if (![(_UIKeyboardStateManager *)self hasEditableMarkedText])
    {
      LOBYTE(v23) = 0;
      goto LABEL_52;
    }
    goto LABEL_12;
  }
  if (![(_UIKeyboardStateManager *)self hasEditableMarkedText])
  {
    if (v13)
    {
      if (a12) {
        *a12 = 2;
      }
      if (a6) {
        goto LABEL_51;
      }
      m_candidateList = self->m_candidateList;
      if (v14)
      {
        [(UIKeyboardCandidateList *)m_candidateList showCandidateInForwardDirection:v17 ^ 1u granularity:0];
LABEL_51:
        LOBYTE(v23) = 1;
        goto LABEL_52;
      }
      id v34 = +[UIKeyboardInputModeController sharedInputModeController];
      BOOL v35 = [v34 currentInputMode];
      uint64_t v36 = [v35 normalizedIdentifier];
      [(UIKeyboardCandidateList *)m_candidateList showCandidateInForwardDirection:UIKeyboardInputModeIsDefaultRightToLeft(v36) ^ v17 granularity:0];
    }
    else
    {
      if ([(_UIKeyboardStateManager *)self _hasMarkedText])
      {
        uint64_t v29 = [(_UIKeyboardStateManager *)self inputManagerState];
        if ([v29 supportsSetPhraseBoundary])
        {
        }
        else
        {
          int v37 = [(_UIKeyboardStateManager *)self inlineCompletionAsMarkedText];

          if (!v37) {
            goto LABEL_51;
          }
        }
      }
      if (+[UIKeyboard isKeyboardProcess])
      {
        id v38 = [(_UIKeyboardStateManager *)self inputDelegateManager];
        char v39 = [v38 shouldRespectForwardingInputDelegate];

        if ((v39 & 1) == 0)
        {
          if (!a6) {
            [(_UIKeyboardStateManager *)self forwardKeyboardEventBackToDestination:v20];
          }
          goto LABEL_51;
        }
      }
      BOOL v40 = +[UIKeyboardInputModeController sharedInputModeController];
      long long v41 = [v40 currentInputMode];
      long long v42 = [v41 normalizedIdentifier];
      int IsDefaultRightToLeft = UIKeyboardInputModeIsDefaultRightToLeft(v42);

      if (IsDefaultRightToLeft == v17
        || ![(_UIKeyboardStateManager *)self cursorIsAtStartOfInlineCompletionMarkedText])
      {
        uint64_t v44 = [(_UIKeyboardStateManager *)self inlineTextCompletionController];
        [v44 removeTextCompletionPrompt];

        BOOL v25 = v19;
        uint64_t v45 = v19[2];
        if (v17)
        {
          int v23 = v45(v19, sel__moveRight_withHistory_);
          if (!v23 || a6) {
            goto LABEL_53;
          }
          v54[0] = MEMORY[0x1E4F143A8];
          v54[1] = 3221225472;
          v54[2] = __241___UIKeyboardStateManager_handleHorizontalArrow_shiftDown_beforePublicKeyCommands_testOnly_isVerticalCandidate_hasCandidatesForTypedInput_shouldNavigateCandidateList_canHandleInputDelegateCommand_savedHistory_keyCommandTypeHandled_keyEvent___block_invoke;
          v54[3] = &unk_1E52DC3D0;
          v54[4] = self;
          BOOL v56 = v49;
          uint64_t v46 = v50;
          id v55 = v50;
          [(_UIKeyboardStateManager *)self performBlockWithTextInputChangesIgnoredForNonMacOS:v54];
          long long v47 = v55;
        }
        else
        {
          int v23 = v45(v19, sel__moveLeft_withHistory_);
          if (!v23 || a6) {
            goto LABEL_53;
          }
          v51[0] = MEMORY[0x1E4F143A8];
          v51[1] = 3221225472;
          v51[2] = __241___UIKeyboardStateManager_handleHorizontalArrow_shiftDown_beforePublicKeyCommands_testOnly_isVerticalCandidate_hasCandidatesForTypedInput_shouldNavigateCandidateList_canHandleInputDelegateCommand_savedHistory_keyCommandTypeHandled_keyEvent___block_invoke_2;
          v51[3] = &unk_1E52DC3D0;
          v51[4] = self;
          BOOL v53 = v49;
          uint64_t v46 = v50;
          id v52 = v50;
          [(_UIKeyboardStateManager *)self performBlockWithTextInputChangesIgnoredForNonMacOS:v51];
          long long v47 = v52;
        }

        goto LABEL_54;
      }
      id v34 = [(_UIKeyboardStateManager *)self inlineTextCompletionController];
      [v34 acceptTextCompletionWithInteraction:4 wordTerminator:0];
    }

    goto LABEL_51;
  }
LABEL_12:
  if (v14)
  {
    if (a12) {
      *a12 = 2;
    }
    BOOL v25 = v19;
    if (!a6) {
      [(UIKeyboardCandidateList *)self->m_candidateList showCandidateInForwardDirection:v17 ^ 1u granularity:0];
    }
    goto LABEL_29;
  }
  BOOL v25 = v19;
  if (v21)
  {
    if (a12) {
      *a12 = 2;
    }
    if (a6) {
      goto LABEL_29;
    }
    uint64_t v26 = v17 ^ 1u;
    BOOL v27 = v49;
    int v28 = self;
    goto LABEL_28;
  }
  if (v49)
  {
    uint64_t v26 = v17 ^ 1u;
    int v28 = self;
    BOOL v27 = 0;
LABEL_28:
    [(_UIKeyboardStateManager *)v28 movePhraseBoundaryToDirection:v26 granularity:v27];
LABEL_29:
    LOBYTE(v23) = 1;
LABEL_53:
    uint64_t v46 = v50;
    goto LABEL_54;
  }
  if (a9)
  {
    if (!a6)
    {
      char v30 = self->m_candidateList;
      char v31 = +[UIKeyboardInputModeController sharedInputModeController];
      id v32 = [v31 currentInputMode];
      int v33 = [v32 normalizedIdentifier];
      [(UIKeyboardCandidateList *)v30 showCandidateInForwardDirection:UIKeyboardInputModeIsDefaultRightToLeft(v33) ^ v17 granularity:0];
    }
    goto LABEL_29;
  }
  uint64_t v46 = v50;
  if (v17)
  {
    [(_UIKeyboardStateManager *)self movePhraseBoundaryToDirection:0 granularity:0];
    LOBYTE(v23) = 1;
  }
  else
  {
    LOBYTE(v23) = 1;
    [(_UIKeyboardStateManager *)self movePhraseBoundaryToDirection:1 granularity:1];
  }
LABEL_54:

  return v23;
}

- (BOOL)handleKeyCommandsBeforePublicAsInputUIHost:(id)a3
{
  id v4 = a3;
  [v4 _gsModifierFlags];
  [(_UIKeyboardStateManager *)self liveConversionEnabled];
  if (!self->m_candidateList
    || [(_UIKeyboardStateManager *)self isPredictionViewControllerVisible]
    || ![(UIKeyboardCandidateList *)self->m_candidateList hasCandidates]
    || ![(TIKeyboardCandidateResultSet *)self->m_candidateResultSet hasCandidates])
  {
    goto LABEL_9;
  }
  id v5 = [(TIKeyboardState *)self->m_keyboardState inputForMarkedText];
  if ([v5 length])
  {
  }
  else
  {
    uint64_t v6 = [(UIKeyboardCandidateList *)self->m_candidateList currentIndex];

    if (v6 == 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_9;
    }
  }
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  id v8 = [WeakRetained candidateController];
  [v8 inlineRectIsVertical];

LABEL_9:
  [(_UIKeyboardStateManager *)self hasEditableMarkedText];
  if ([(_UIKeyboardStateManager *)self handleInputSwitcherForKeyEvent:v4])
  {
    BOOL v9 = 1;
  }
  else
  {
    char v11 = 0;
    BOOL v9 = [(_UIKeyboardStateManager *)self handleKeyCommand:v4 repeatOkay:&v11 options:1] != 0;
  }

  return v9;
}

- (BOOL)handleInputSwitcherForKeyEvent:(id)a3
{
  id v4 = a3;
  if ([(_UIKeyboardStateManager *)self shouldApplyKeyboardCommandToUIHost])
  {
    id v5 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
    char v6 = [v5 synchronousForwardKeyCommandsBeforePublicToUIHost:v4];

    goto LABEL_17;
  }
  int v7 = [v4 _gsModifierFlags];
  if (!+[UIKeyboard isKeyboardProcess]) {
    goto LABEL_14;
  }
  if (![v4 _isGlobeKey])
  {
    if ((v7 & 0x4000000) != 0) {
      [(_UIKeyboardStateManager *)self setPreviousGlobeKeyEvent:0];
    }
    goto LABEL_14;
  }
  if ([v4 _isKeyDown])
  {
    [(_UIKeyboardStateManager *)self setPreviousGlobeKeyEvent:v4];
    goto LABEL_16;
  }
  if (self->m_previousGlobeKeyEvent)
  {
    [v4 _hidEvent];
    id v8 = BKSHIDEventGetBaseAttributes();
    BOOL v9 = ([v8 options] & 0x80) == 0;
  }
  else
  {
    BOOL v9 = 1;
  }
  [v4 timestamp];
  double v11 = v10;
  [(UIEvent *)self->m_previousGlobeKeyEvent timestamp];
  double v13 = v12;
  [(_UIKeyboardStateManager *)self setPreviousGlobeKeyEvent:0];
  char v6 = 0;
  if (!v9 && v11 - v13 <= 0.9)
  {
LABEL_14:
    [(_UIKeyboardStateManager *)self showCursorAccessory];
    BOOL v14 = +[UIInputSwitcher sharedInstance];
    int v15 = [v14 handleSwitchingKeyEvent:v4];

    if (v15)
    {
      [(_UIKeyboardStateManager *)self setCapsLockIfNeeded];
      char v6 = 1;
      goto LABEL_17;
    }
LABEL_16:
    char v6 = 0;
  }
LABEL_17:

  return v6;
}

- (BOOL)handleVerticalArrow:(BOOL)a3 shiftDown:(BOOL)a4 beforePublicKeyCommands:(BOOL)a5 testOnly:(BOOL)a6 isVerticalCandidate:(BOOL)a7 hasCandidatesForTypedInput:(BOOL)a8 inputDelegateCommandEnabled:(BOOL)a9 canHandleInputDelegateCommand:(id)a10 savedHistory:(id)a11 keyCommandTypeHandled:(unint64_t *)a12 keyEvent:(id)a13
{
  BOOL v13 = a8;
  BOOL v14 = a7;
  BOOL v17 = a4;
  BOOL v35 = a3;
  BOOL v19 = (uint64_t (**)(id, char *))a10;
  id v20 = a11;
  id v21 = a13;
  BOOL v22 = [(_UIKeyboardStateManager *)self liveConversionEnabled];
  if ([(_UIKeyboardStateManager *)self _hasMarkedText])
  {
    if (!a6
      && [(_UIKeyboardStateManager *)self shouldApplyKeyboardCommandToUIHost])
    {
      int v23 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
      LOBYTE(v24) = [v23 synchronousForwardKeyCommandsBeforePublicToUIHost:v21];

      goto LABEL_32;
    }
    if (v14)
    {
      BOOL v27 = [(_UIKeyboardStateManager *)self inputManagerState];
      int v28 = [v27 supportsSetPhraseBoundary];

      if (v28)
      {
        if (a6)
        {
LABEL_31:
          LOBYTE(v24) = 1;
          goto LABEL_32;
        }
        uint64_t v29 = v22 & v17;
        BOOL v30 = !v35;
        char v31 = self;
LABEL_28:
        [(_UIKeyboardStateManager *)v31 movePhraseBoundaryToDirection:v30 granularity:v29];
        goto LABEL_31;
      }
    }
    if (!v13)
    {
      if (!v22) {
        goto LABEL_31;
      }
      id v32 = [(_UIKeyboardStateManager *)self inputManagerState];
      int v33 = [v32 supportsSetPhraseBoundary];

      if (!v33) {
        goto LABEL_31;
      }
      if (a12) {
        *a12 = 2;
      }
      if (a6) {
        goto LABEL_31;
      }
      BOOL v30 = !v35;
      char v31 = self;
      uint64_t v29 = 4;
      goto LABEL_28;
    }
    if (a12) {
      *a12 = 2;
    }
    LOBYTE(v24) = 1;
    if ([(UIKeyboardCandidateList *)self->m_candidateList hasCandidates] && !a6) {
      [(UIKeyboardCandidateList *)self->m_candidateList showCandidateInForwardDirection:v35 granularity:!v22];
    }
  }
  else
  {
    LOBYTE(v24) = !a9;
    if (a9 && !a5)
    {
      if (+[UIKeyboard isKeyboardProcess])
      {
        BOOL v25 = [(_UIKeyboardStateManager *)self inputDelegateManager];
        char v26 = [v25 shouldRespectForwardingInputDelegate];

        if ((v26 & 1) == 0)
        {
          if (!a6) {
            [(_UIKeyboardStateManager *)self forwardKeyboardEventBackToDestination:v21];
          }
          goto LABEL_31;
        }
      }
      int v24 = v19[2](v19, sel__moveDown_withHistory_);
      if (v24 && !a6)
      {
        v36[0] = MEMORY[0x1E4F143A8];
        v36[1] = 3221225472;
        v36[2] = __239___UIKeyboardStateManager_handleVerticalArrow_shiftDown_beforePublicKeyCommands_testOnly_isVerticalCandidate_hasCandidatesForTypedInput_inputDelegateCommandEnabled_canHandleInputDelegateCommand_savedHistory_keyCommandTypeHandled_keyEvent___block_invoke;
        v36[3] = &unk_1E52DD128;
        BOOL v38 = v35;
        void v36[4] = self;
        BOOL v39 = v17;
        id v37 = v20;
        [(_UIKeyboardStateManager *)self performBlockWithTextInputChangesIgnoredForNonMacOS:v36];
      }
    }
  }
LABEL_32:

  return v24;
}

- (BOOL)handleTabWithShift:(BOOL)a3
{
  return [(_UIKeyboardStateManager *)self handleTabWithShift:a3 beforePublicKeyCommands:0 isMoveAction:0 testOnly:0];
}

- (BOOL)handleMoveResponderWithShift:(BOOL)a3
{
  return [(_UIKeyboardStateManager *)self handleTabWithShift:a3 beforePublicKeyCommands:0 isMoveAction:1 testOnly:0];
}

- (BOOL)handleTabWithShift:(BOOL)a3 beforePublicKeyCommands:(BOOL)a4
{
  return [(_UIKeyboardStateManager *)self handleTabWithShift:a3 beforePublicKeyCommands:a4 isMoveAction:0 testOnly:0];
}

- (BOOL)inputUIHandleTabWithShift:(BOOL)a3 testOnly:(BOOL)a4
{
  BOOL v5 = a3;
  int v7 = [(_UIKeyboardStateManager *)self candidateList];
  if (objc_opt_respondsToSelector())
  {
    id v8 = [(_UIKeyboardStateManager *)self candidateList];
    char v9 = [v8 handleTabKeyWithShift:v5];

    if (v9)
    {
      BOOL v10 = 1;
      goto LABEL_15;
    }
  }
  else
  {
  }
  if ([(_UIKeyboardStateManager *)self hasEditableMarkedText])
  {
    double v11 = [(_UIKeyboardStateManager *)self inputManagerState];
    double v12 = [v11 keyboardBehaviors];
    BOOL v13 = [(_UIKeyboardStateManager *)self _keyboardBehaviorState];
    BOOL v14 = [v12 keyBehaviorsForState:v13];

    unint64_t v15 = [v14 tabKeyBehavior] - 5;
    BOOL v10 = v15 > 0xFFFFFFFFFFFFFFFDLL;
    if (v15 >= 0xFFFFFFFFFFFFFFFELL && !a4)
    {
      BOOL v16 = [(_UIKeyboardStateManager *)self candidateList];

      if (v16)
      {
        BOOL v17 = [(_UIKeyboardStateManager *)self candidateList];
        [v17 showCandidateInForwardDirection:v5 ^ 1 granularity:0];
      }
      else if ([(_UIKeyboardStateManager *)self liveConversionEnabled])
      {
        [(_UIKeyboardStateManager *)self movePhraseBoundaryToDirection:v5 granularity:4];
      }
      BOOL v10 = 1;
    }
  }
  else
  {
    BOOL v10 = 0;
  }
LABEL_15:
  BOOL v18 = [(_UIKeyboardStateManager *)self inlineTextCompletionController];
  int v19 = [v18 hasPrompt];

  if (v19)
  {
    id v20 = [(_UIKeyboardStateManager *)self inlineTextCompletionController];
    BOOL v10 = 1;
    [v20 acceptTextCompletionWithInteraction:1 wordTerminator:0];
  }
  return v10;
}

- (void)becomeFirstResponderAndMakeVisible:(BOOL)a3
{
  BOOL v5 = [(_UIKeyboardStateManager *)self delegateAsResponder];
  id v11 = v5;
  if (a3) {
    [v5 _previousKeyResponder];
  }
  else {
  char v6 = [v5 _nextKeyResponder];
  }
  if (v6)
  {
    int v7 = [(_UIKeyboardStateManager *)self delegate];

    if (v6 != v7)
    {
      id v8 = [(_UIKeyboardStateManager *)self textInputTraits];
      m_traitsForPreviousDelegate = self->m_traitsForPreviousDelegate;
      self->m_traitsForPreviousDelegate = v8;

      [v6 _becomeFirstResponderAndMakeVisible];
      BOOL v10 = self->m_traitsForPreviousDelegate;
      self->m_traitsForPreviousDelegate = 0;
    }
  }
}

- (BOOL)handleTabWithShift:(BOOL)a3 beforePublicKeyCommands:(BOOL)a4 isMoveAction:(BOOL)a5 testOnly:(BOOL)a6
{
  BOOL v6 = a6;
  BOOL v8 = a4;
  BOOL v9 = a3;
  if ([(_UIKeyboardStateManager *)self shouldApplyKeyboardCommandToUIHost] && v8)
  {
    id v11 = objc_alloc_init(UIPhysicalKeyboardEvent);
    [(UIPhysicalKeyboardEvent *)v11 setKeyCommandCode:43];
    [(UIPhysicalKeyboardEvent *)v11 setShiftDown:v9];
    double v12 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
    int v13 = [v12 synchronousForwardKeyCommandsBeforePublicToUIHost:v11];
  }
  else
  {
    int v13 = [(_UIKeyboardStateManager *)self inputUIHandleTabWithShift:v9 testOnly:v6];
  }
  BOOL v14 = [(_UIKeyboardStateManager *)self delegateAsResponder];
  if (!v14)
  {
    if ([(id)UIApp _isSpringBoard])
    {
      BOOL v14 = 0;
    }
    else
    {
      BOOL v14 = +[UIWindow _applicationKeyWindow];
    }
  }
  unint64_t v15 = [v14 _responderWindow];
  BOOL v16 = 0;
  if (dyld_program_sdk_at_least() && v15)
  {
    BOOL v17 = +[_UIFocusSystemSceneComponent sceneComponentForEnvironment:v15];
    BOOL v18 = [v17 focusSystem];
    BOOL v16 = v18 != 0;
  }
  if (((v13 | v16) & 1) != 0 || v8) {
    goto LABEL_35;
  }
  if (!+[UIKeyboard isInputSystemUI])
  {
    if (v9)
    {
      uint64_t v20 = [v14 _previousKeyResponder];
    }
    else
    {
      if (!a5)
      {
        uint64_t v23 = [(_UIKeyboardStateManager *)self delegateAsResponder];
        if (v23)
        {
          int v24 = (void *)v23;
          BOOL v25 = [(_UIKeyboardStateManager *)self textInputTraits];
          int v26 = [v25 isSingleLineDocument];

          if (!v26)
          {
            id v21 = 0;
            goto LABEL_33;
          }
        }
      }
      uint64_t v20 = [v14 _nextKeyResponder];
    }
    id v21 = (void *)v20;
    if (v20)
    {
      BOOL v27 = [(_UIKeyboardStateManager *)self delegate];

      LOBYTE(v13) = v21 != v27;
      if (v21 == v27 || v6) {
        goto LABEL_34;
      }
      int v28 = [(_UIKeyboardStateManager *)self textInputTraits];
      m_traitsForPreviousDelegate = self->m_traitsForPreviousDelegate;
      self->m_traitsForPreviousDelegate = v28;

      [v21 _becomeFirstResponderAndMakeVisible];
      BOOL v22 = self->m_traitsForPreviousDelegate;
      self->m_traitsForPreviousDelegate = 0;
      LOBYTE(v13) = 1;
      goto LABEL_31;
    }
LABEL_33:
    LOBYTE(v13) = 0;
    goto LABEL_34;
  }
  if (v9) {
    BOOL v19 = [(_UIKeyboardStateManager *)self hasPreviousKeyResponder];
  }
  else {
    BOOL v19 = [(_UIKeyboardStateManager *)self hasNextKeyResponder];
  }
  LOBYTE(v13) = v19;
  if (v19 && !v6)
  {
    id v21 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
    BOOL v22 = [NSNumber numberWithBool:v9];
    [v21 forwardKeyboardOperation:sel_becomeFirstResponderAndMakeVisible_ object:v22];
LABEL_31:

LABEL_34:
  }
LABEL_35:

  return v13;
}

- (void)handleStringInput:(id)a3 withFlags:(unint64_t)a4 withInputManagerHint:(id)a5 executionContext:(id)a6
{
  id v16 = a3;
  id v10 = a5;
  id v11 = a6;
  if ([v16 length])
  {
    if ([v16 characterAtIndex:0] == 46
      && (unint64_t)[v16 length] >= 2)
    {
      double v12 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      int v13 = [v12 _characterBeforeCaretSelection];

      id v14 = v16;
      if (v13 == 46)
      {
        uint64_t v15 = [v16 substringFromIndex:1];

        id v14 = (id)v15;
      }
    }
    else
    {
      id v14 = v16;
    }
    id v16 = v14;
    [(_UIKeyboardStateManager *)self addInputString:v14 withFlags:a4 withInputManagerHint:v10 executionContext:v11];
  }
  else
  {
    [v11 returnExecutionToParent];
  }
}

- (BOOL)acceptInputString:(id)a3
{
  id v4 = a3;
  BOOL v5 = [(_UIKeyboardStateManager *)self inputManagerState];
  if (v5)
  {
    BOOL v6 = [(_UIKeyboardStateManager *)self inputManagerState];
    char v7 = [v6 acceptInputString:v4];
  }
  else
  {
    char v7 = 1;
  }

  return v7;
}

- (void)setPreviousInputString:(id)a3
{
  id v4 = (NSString *)[a3 copy];
  m_previousInputString = self->m_previousInputString;
  self->m_previousInputString = v4;
}

- (void)setPreviousGlobeKeyEvent:(id)a3
{
  id v4 = (UIPhysicalKeyboardEvent *)[a3 _cloneEvent];
  m_previousGlobeKeyEvent = self->m_previousGlobeKeyEvent;
  self->m_previousGlobeKeyEvent = v4;
}

- (void)updateKeyboardStateForReplacingText:(id)a3 withText:(id)a4
{
  id v6 = a4;
  id v7 = a3;
  id v9 = [(_UIKeyboardStateManager *)self documentState];
  BOOL v8 = [v9 documentStateAfterReplacingText:v7 withText:v6];

  [(_UIKeyboardStateManager *)self setDocumentState:v8];
}

- (void)updateKeyboardStateForInsertion:(id)a3
{
  id v6 = a3;
  if (![(_UIKeyboardStateManager *)self showingEmojiSearch]
    || ([v6 _containsEmojiOnly] & 1) == 0)
  {
    id v4 = [(_UIKeyboardStateManager *)self documentState];
    BOOL v5 = [v4 documentStateAfterInsertingText:v6];
    [(_UIKeyboardStateManager *)self setDocumentState:v5];
  }
  [(_UIKeyboardStateManager *)self clearInputForMarkedText];
}

- (void)moveCursorByAmount:(int64_t)a3
{
  id v4 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  [v4 _moveCurrentSelection:a3];
}

- (void)deleteBackwardAndNotify:(BOOL)a3
{
}

- (void)deleteBackwardAndNotifyAtEnd:(BOOL)a3 deletionCount:(unint64_t)a4 reinsertTextInLoop:(BOOL)a5
{
  BOOL v5 = a5;
  BOOL v7 = a3;
  id v9 = +[UIDictationLandingView activeInstance];
  int v10 = [v9 hasActivePlaceholder];

  if (v10)
  {
    id v11 = +[UIDictationLandingView activeInstance];
    [v11 stopLanding];

    id v14 = +[UIDictationController activeInstance];
    [v14 cancelDictation];
  }
  else
  {
    if (+[UIDictationController isRunning]
      && !+[UIDictationController isRunningInTypeAndTalkMode])
    {
      double v12 = +[UIDictationController activeInstance];
      [v12 cancelDictation];
    }
    [(_UIKeyboardStateManager *)self removeTextChoicePromptWithUnderline];
    int v13 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    id v14 = v13;
    if (a4 < 2) {
      [v13 _deleteBackwardAndNotify:v7 reinsertText:v5];
    }
    else {
      [v13 _deleteBackwardWhileOverridingContextAndNotifyAtEnd:v7 deletionCount:a4 reinsertTextInLoop:v5];
    }
  }
}

- (unint64_t)textLengthToDeleteBeforeSelectedRangeForSmartDelete
{
  id v2 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  unint64_t v3 = [v2 _textLengthToDeleteBeforeSelectedRangeForSmartDelete];

  return v3;
}

- (void)updateKeyboardStateForDeletion
{
  unint64_t v3 = [(_UIKeyboardStateManager *)self inputSystemSourceSession];
  id v9 = v3;
  if (v3)
  {
    id v4 = [v3 documentState];
    BOOL v5 = [v4 documentState];
    id v6 = [v5 contextBeforeInput];
  }
  else
  {
    id v4 = [(_UIKeyboardStateManager *)self documentState];
    id v6 = [v4 contextBeforeInput];
  }

  if ([v6 length] && !objc_msgSend(v6, "_isNewlineOrReturn"))
  {
    BOOL v7 = [(_UIKeyboardStateManager *)self documentState];
    BOOL v8 = [v7 documentStateAfterDeletingBackward];
    [(_UIKeyboardStateManager *)self setDocumentState:v8];
  }
  else
  {
    [(_UIKeyboardStateManager *)self syncDocumentStateToInputDelegate];
    [(_UIKeyboardStateManager *)self _requestInputManagerSync];
  }
  [(_UIKeyboardStateManager *)self clearInputForMarkedText];
}

- (BOOL)_canDeleteForward
{
  if (![(_UIKeyboardStateManager *)self _delegateRequiresKeyEvents]) {
    return 1;
  }
  unint64_t v3 = [(_UIKeyboardStateManager *)self delegateAsResponder];
  id v4 = [v3 _responderForEditing];
  if ([v4 canPerformAction:sel__deleteForwardAndNotify_ withSender:0])
  {
    char v5 = 1;
  }
  else
  {
    id v6 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    char v5 = [v6 canHandleInputDelegateCommandAction:1];
  }
  return v5;
}

- (BOOL)deleteForwardAndNotify:(BOOL)a3
{
  return [(_UIKeyboardStateManager *)self deleteForwardAndNotify:a3 producedByDeleteInput:0];
}

- (BOOL)deleteForwardAndNotify:(BOOL)a3 producedByDeleteInput:(BOOL)a4
{
  BOOL v5 = a3;
  BOOL v7 = [(_UIKeyboardStateManager *)self _canDeleteForward];
  if (v7)
  {
    if (+[UIKeyboard isKeyboardProcess])
    {
      self->m_suppressingDocumentAssertions = 1;
      BOOL v8 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      int v9 = [v8 _deleteForwardAndNotify:v5];

      LOBYTE(v7) = 0;
      self->m_suppressingDocumentAssertions = 0;
      if (v9)
      {
        v13[0] = MEMORY[0x1E4F143A8];
        v13[1] = 3221225472;
        v13[2] = __72___UIKeyboardStateManager_deleteForwardAndNotify_producedByDeleteInput___block_invoke;
        void v13[3] = &__block_descriptor_33_e26_v16__0__TIKeyboardOutput_8l;
        BOOL v14 = a4;
        [(_UIKeyboardStateManager *)self performKeyboardOutputOnInputSourceSession:v13];
        LOBYTE(v7) = 1;
      }
    }
    else
    {
      int v10 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      char v11 = [v10 _deleteForwardAndNotify:v5];

      LOBYTE(v7) = v11;
    }
  }
  return v7;
}

- (void)deleteBackward
{
}

- (BOOL)isCallingInputDelegate
{
  id v2 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  char v3 = [v2 insideKeyInputDelegateCall];

  return v3;
}

- (BOOL)_handleKeyInputMethodCommandForEvent:(id)a3 canHandleAppKeyCommand:(BOOL)a4
{
  id v6 = a3;
  unint64_t v7 = [(_UIKeyboardStateManager *)self _handleKeyCommandCommon:v6 options:2];
  if (v7 == 2)
  {
    [(_UIKeyboardStateManager *)self _handleKeyCommandCommon:v6 options:0];
    BOOL v8 = 1;
    self->m_webEventWasHandledByInputManager = 1;
    goto LABEL_23;
  }
  if (v7 != 1 && (v7 || !a4))
  {
    int v9 = [v6 _modifiedInput];
    if (![(_UIKeyboardStateManager *)self _shouldEmitString:v9 forKeyEvent:v6]
      || ![(_UIKeyboardStateManager *)self _isValidKeyInput:v9]
      || ![(_UIKeyboardStateManager *)self _hasMarkedText]
      && (([v9 _isNewlineOrReturn] & 1) != 0
       || ([v9 _isDelete] & 1) != 0
       || ([v9 isEqualToString:@"\t"] & 1) != 0))
    {
      goto LABEL_21;
    }
    BOOL v10 = [(_UIKeyboardStateManager *)self shouldAllowRepeatEvent:v6];
    if (![v6 _isARepeat] || v10)
    {
      if (![(_UIKeyboardStateManager *)self usesCandidateSelection]
        || ([(TIKeyboardState *)self->m_keyboardState longPredictionListEnabled] & 1) != 0)
      {
LABEL_21:
        BOOL v8 = 0;
        goto LABEL_22;
      }
      if (qword_1EB25FA30 != -1) {
        dispatch_once(&qword_1EB25FA30, &__block_literal_global_1238);
      }
      char v11 = [(_UIKeyboardStateManager *)self taskQueue];
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 3221225472;
      v13[2] = __87___UIKeyboardStateManager__handleKeyInputMethodCommandForEvent_canHandleAppKeyCommand___block_invoke_3;
      void v13[3] = &unk_1E52E3678;
      void v13[4] = self;
      id v14 = v9;
      id v15 = v6;
      [v11 addTask:v13 breadcrumb:qword_1EB25FA28];
    }
    BOOL v8 = 1;
    self->m_webEventWasHandledByInputManager = 1;
LABEL_22:

    goto LABEL_23;
  }
  BOOL v8 = 0;
LABEL_23:

  return v8;
}

- (BOOL)handleKeyInputMethodCommandForCurrentEvent
{
  if (!self->m_webEventIsKeyDown) {
    return 0;
  }
  char v3 = [(_UIKeyboardStateManager *)self eventForCurrentWebEvent];
  if (v3)
  {
    uint64_t v4 = [(id)UIApp _hasKeyCommandForKeyboardEvent:v3];
    if ([(_UIKeyboardStateManager *)self shouldApplyKeyboardCommandToUIHost])
    {
      BOOL v5 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
      self->BOOL m_webEventWasHandledByInputManager = [v5 synchronousForwardKeyInputMethodCommandEventToUIHost:v3 canHandleAppKeyCommand:v4];

      BOOL m_webEventWasHandledByInputManager = self->m_webEventWasHandledByInputManager;
    }
    else
    {
      BOOL m_webEventWasHandledByInputManager = [(_UIKeyboardStateManager *)self _handleKeyInputMethodCommandForEvent:v3 canHandleAppKeyCommand:v4];
      self->BOOL m_webEventWasHandledByInputManager = m_webEventWasHandledByInputManager;
    }
  }
  else
  {
    BOOL m_webEventWasHandledByInputManager = 0;
  }

  return m_webEventWasHandledByInputManager;
}

- (BOOL)handleKeyTextCommandForCurrentEvent
{
  if (self->m_webEventWasHandledAsKeyCommand || self->m_webEventWasHandledByInputManager) {
    return 0;
  }
  BOOL v5 = [(_UIKeyboardStateManager *)self eventForCurrentWebEvent];
  if ([v5 _isKeyDown])
  {
    id v6 = [(id)UIApp _keyCommandForKeyboardEvent:v5];
    if ([v6 wantsPriorityOverSystemBehavior])
    {
      BOOL m_webEventWasHandledAsKeyCommand = 0;
    }
    else
    {
      self->m_inHandleKeyTextCommandForCurrentEvent = 1;
      if ([(_UIKeyboardStateManager *)self shouldApplyKeyboardCommandToUIHost])
      {
        unint64_t v7 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
        self->BOOL m_webEventWasHandledAsKeyCommand = [v7 synchronousForwardKeyCommandsToUIHost:v5];

        BOOL m_webEventWasHandledAsKeyCommand = self->m_webEventWasHandledAsKeyCommand;
      }
      else
      {
        BOOL m_webEventWasHandledAsKeyCommand = [(_UIKeyboardStateManager *)self _handleKeyCommand:v5];
        self->BOOL m_webEventWasHandledAsKeyCommand = m_webEventWasHandledAsKeyCommand;
      }
      self->m_inHandleKeyTextCommandForCurrentEvent = 0;
    }
  }
  else
  {
    BOOL m_webEventWasHandledAsKeyCommand = 0;
  }

  return m_webEventWasHandledAsKeyCommand;
}

- (BOOL)handleKeyAppCommandForCurrentEvent
{
  if (self->m_webEventWasHandledAsKeyCommand || self->m_webEventWasHandledByInputManager) {
    return 0;
  }
  BOOL v5 = [(_UIKeyboardStateManager *)self eventForCurrentWebEvent];
  if ([v5 _isKeyDown])
  {
    if (self->m_inHandleKeyAppCommandForCurrentEvent || self->m_inHandleKeyTextCommandForCurrentEvent)
    {
      char v3 = 1;
    }
    else
    {
      id v6 = [(id)UIApp _keyCommandForKeyboardEvent:v5];
      unint64_t v7 = v6;
      if (v6
        && ([v6 wantsPriorityOverSystemBehavior] & 1) == 0
        && ([v7 _isLikelyToConflictWithTextInputForResponder:0] & 1) != 0)
      {
        char v3 = 0;
      }
      else
      {
        self->m_inHandleKeyAppCommandForCurrentEvent = 1;
        char v3 = [(id)UIApp _handleKeyCommandForKeyboardEvent:v5 allowsRepeat:0];
        self->BOOL m_webEventWasHandledAsKeyCommand = v3;
        self->m_inHandleKeyAppCommandForCurrentEvent = 0;
      }
    }
  }
  else
  {
    char v3 = 0;
  }

  return v3;
}

- (void)addInputString:(id)a3
{
}

- (void)addInputString:(id)a3 fromVariantKey:(BOOL)a4
{
  if (a4) {
    uint64_t v4 = 2;
  }
  else {
    uint64_t v4 = 0;
  }
  [(_UIKeyboardStateManager *)self addInputString:a3 withFlags:v4];
}

- (id)inputEventForInputString:(id)a3
{
  id v4 = a3;
  id v5 = objc_alloc_init(MEMORY[0x1E4FAE328]);
  if (![(_UIKeyboardStateManager *)self isInHardwareKeyboardMode])
  {
    if ([(_UIKeyboardStateManager *)self callLayoutIgnoresShiftState]) {
      goto LABEL_13;
    }
    [v5 setUppercase:self->m_shift];
    BOOL m_autoshift = self->m_autoshift;
    goto LABEL_12;
  }
  if (self->m_autoshift)
  {
    [v5 setAutoshifted:1];
    id v6 = (void *)MEMORY[0x1E4F1CA20];
    unint64_t v7 = +[UIKeyboardInputModeController sharedInputModeController];
    BOOL v8 = [v7 currentInputMode];
    int v9 = [v8 languageWithRegion];
    BOOL v10 = [v6 localeWithLocaleIdentifier:v9];
    uint64_t v11 = [v4 uppercaseStringWithLocale:v10];

    id v4 = (id)v11;
  }
  if (v4)
  {
    double v12 = [MEMORY[0x1E4F28B88] uppercaseLetterCharacterSet];
    uint64_t v13 = [v4 rangeOfCharacterFromSet:v12];

    BOOL v14 = v13 == 0;
  }
  else
  {
    BOOL v14 = 0;
  }
  [v5 setUppercase:v14];
  if ([v5 isAutoshifted] && (objc_msgSend(v5, "isUppercase") & 1) == 0)
  {
    BOOL m_autoshift = 0;
LABEL_12:
    [v5 setAutoshifted:m_autoshift];
  }
LABEL_13:
  [v5 setString:v4];

  return v5;
}

- (void)updateDoubleSpacePeriodStateForCharacter:(unsigned int)a3
{
  if (self->m_doubleSpacePeriodWasAppliedInCurrentContext)
  {
    if (TICharEstablishesContextForDoubleSpacePeriod()) {
      self->m_doubleSpacePeriodWasAppliedInCurrentContext = 0;
    }
  }
}

- (void)updateDoubleSpacePeriodStateForString:(id)a3
{
  id v4 = a3;
  id v5 = v4;
  if (self->m_doubleSpacePeriodWasAppliedInCurrentContext)
  {
    int v9 = v4;
    uint64_t v6 = [v4 length];
    id v5 = v9;
    if (v6)
    {
      uint64_t v7 = [v9 characterAtIndex:0];
      if ([v9 length] == 2 && (v7 & 0xFC00) == 0xD800)
      {
        int v8 = [v9 characterAtIndex:1];
        if ((v8 & 0xFC00) == 0xDC00) {
          uint64_t v7 = (v8 + (v7 << 10) - 56613888);
        }
        else {
          uint64_t v7 = v7;
        }
      }
      [(_UIKeyboardStateManager *)self updateDoubleSpacePeriodStateForCharacter:v7];
      id v5 = v9;
    }
  }
}

- (BOOL)willDoubleSpacePeriodForInputString:(id)a3 afterSpace:(BOOL)a4 elapsedTime:(double)a5
{
  BOOL v6 = a4;
  id v8 = a3;
  if (!self->m_doubleSpacePeriodPreference) {
    goto LABEL_10;
  }
  BOOL v9 = 0;
  if ([(UITextInputTraits *)self->m_traits isSecureTextEntry] || !v6) {
    goto LABEL_11;
  }
  if (![v8 _isPlainSpace]) {
    goto LABEL_10;
  }
  BOOL v10 = [(_UIKeyboardStateManager *)self inputManagerState];
  char v11 = [v10 nextInputWouldStartSentence];

  if ((v11 & 1) != 0
    || ([(_UIKeyboardStateManager *)self inputDelegate],
        double v12 = objc_claimAutoreleasedReturnValue(),
        [v12 _characterInRelationToCaretSelection:4294967294],
        v12,
        !TICharEstablishesContextForDoubleSpacePeriod()))
  {
LABEL_10:
    BOOL v9 = 0;
    goto LABEL_11;
  }
  BOOL v9 = 0;
  if (a5 <= 1.2 && !self->m_doubleSpacePeriodWasAppliedInCurrentContext)
  {
    BOOL v9 = 1;
    self->m_doubleSpacePeriodWasAppliedInCurrentContext = 1;
  }
LABEL_11:

  return v9;
}

- (BOOL)shouldDeleteAutospaceBeforeTerminator:(id)a3
{
  id v4 = a3;
  if ([v4 isEqualToString:@" "]) {
    goto LABEL_5;
  }
  id v5 = [(_UIKeyboardStateManager *)self inputManagerState];
  char v6 = [v5 shouldDeleteAutospaceBeforeTerminator:v4];

  if (v6) {
    goto LABEL_5;
  }
  uint64_t v7 = [(_UIKeyboardStateManager *)self textInputTraits];
  if ([v7 keyboardType] != 7)
  {

    goto LABEL_8;
  }
  char v8 = [v4 isEqualToString:@"@"];

  if ((v8 & 1) == 0)
  {
LABEL_8:
    BOOL v9 = 0;
    goto LABEL_6;
  }
LABEL_5:
  BOOL v9 = 1;
LABEL_6:

  return v9;
}

- (id)handleDeleteAutospaceForInputString:(id)a3 afterSpace:(BOOL)a4
{
  BOOL v4 = a4;
  id v6 = a3;
  if ([(_UIKeyboardStateManager *)self usesAutocorrectionLists])
  {
    if (!v4)
    {
LABEL_9:
      id v7 = 0;
      goto LABEL_10;
    }
LABEL_6:
    if (self->m_didAutomaticallyInsertSpace
      && [(_UIKeyboardStateManager *)self shouldDeleteAutospaceBeforeTerminator:v6])
    {
      self->m_didAutomaticallyInsertSpace = 0;
      id v7 = v6;
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  id v7 = 0;
  if ([(_UIKeyboardStateManager *)self shouldShowLongPredictionList] && v4) {
    goto LABEL_6;
  }
LABEL_10:

  return v7;
}

- (id)handleReplacement:(id)a3 forSpaceAndInput:(id)a4
{
  id v6 = a4;
  id v7 = a3;
  uint64_t v8 = objc_msgSend(v7, "rangeOfComposedCharacterSequenceAtIndex:", objc_msgSend(v7, "length") - 1);
  BOOL v10 = objc_msgSend(v7, "substringWithRange:", v8, v9);
  [v6 setString:v10];

  char v11 = [v7 substringToIndex:v8];

  if (([v11 isEqualToString:@" "] & 1) == 0)
  {
    double v12 = [v6 acceptedCandidate];

    if (!v12)
    {
      uint64_t v13 = [MEMORY[0x1E4FAE318] candidateWithCandidate:v11 forInput:@" "];
      [v6 setAcceptedCandidate:v13];

      if ([v11 length])
      {
        v17[0] = MEMORY[0x1E4F143A8];
        v17[1] = 3221225472;
        v17[2] = __62___UIKeyboardStateManager_handleReplacement_forSpaceAndInput___block_invoke_2;
        v17[3] = &unk_1E52E3A28;
        id v14 = v6;
        id v18 = v14;
        [(_UIKeyboardStateManager *)self performKeyboardOutputOnInputSourceSession:v17];
        id v15 = [v14 acceptedCandidate];
        [(_UIKeyboardStateManager *)self applyAutocorrection:v15];
      }
      else
      {
        [(_UIKeyboardStateManager *)self performKeyboardOutputOnInputSourceSession:&__block_literal_global_1245];
        [(_UIKeyboardStateManager *)self deleteBackwardAndNotify:0];
      }
    }
  }

  return v6;
}

- (BOOL)shouldAcceptCandidate:(id)a3 beforeInputString:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [v6 candidate];
  if ([v8 length] || objc_msgSend(v6, "slotID"))
  {
  }
  else
  {
    uint64_t v20 = [v6 customInfoType];

    if (!v20) {
      goto LABEL_5;
    }
  }
  uint64_t v9 = [(_UIKeyboardStateManager *)self inputManagerState];
  char v10 = [v9 shouldSuppressAutocorrectionWithTerminator:v7];

  if (v10)
  {
LABEL_5:
    BOOL v11 = 0;
    goto LABEL_12;
  }
  if (([v6 isForShortcutConversion] & 1) == 0
    && [v7 length]
    && ([v6 input], (uint64_t v12 = objc_claimAutoreleasedReturnValue()) != 0))
  {
    uint64_t v13 = (void *)v12;
    uint64_t v14 = [v6 candidate];
    if (v14)
    {
      id v15 = (void *)v14;
      id v16 = [v6 input];
      BOOL v17 = [v16 stringByAppendingString:v7];
      id v18 = [v6 candidate];
      BOOL v11 = [v18 rangeOfString:v17 options:9] == 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      BOOL v11 = 1;
    }
  }
  else
  {
    BOOL v11 = 1;
  }
LABEL_12:

  return v11;
}

- (void)removeSpaceAfterEmojiForInputString:(id)a3
{
  id v4 = a3;
  id v5 = v4;
  if (self->m_didAutomaticallyInsertSpace)
  {
    id v13 = v4;
    int v6 = [v4 _containsEmoji];
    id v5 = v13;
    if (v6)
    {
      id v7 = [(_UIKeyboardStateManager *)self documentState];
      uint64_t v8 = [v7 contextBeforeInput];

      if ((unint64_t)[v8 length] >= 2)
      {
        uint64_t v9 = objc_msgSend(v8, "substringFromIndex:", objc_msgSend(v8, "length") - 1);
        if ([v9 _isPlainSpace])
        {
          uint64_t v10 = objc_msgSend(v8, "rangeOfComposedCharacterSequenceAtIndex:", objc_msgSend(v8, "length") - 2);
          uint64_t v12 = objc_msgSend(v8, "substringWithRange:", v10, v11);

          if ([v12 _containsEmoji]) {
            [(_UIKeyboardStateManager *)self deleteBackwardAndNotify:0];
          }
        }
        else
        {
          uint64_t v12 = v9;
        }
      }
      id v5 = v13;
    }
  }
}

- (void)_scheduleInputAdditionOrDeletion:(id)a3
{
  id v7 = a3;
  id v4 = [(_UIKeyboardStateManager *)self taskQueue];
  if ([v4 isMainThreadExecutingTask])
  {

LABEL_4:
    [(_UIKeyboardStateManager *)self setExternalTask:v7];
    goto LABEL_8;
  }
  BOOL v5 = [(_UIKeyboardStateManager *)self delegateRequiresKeyEvents];

  if (v5) {
    goto LABEL_4;
  }
  if (qword_1EB25FA40 != -1) {
    dispatch_once(&qword_1EB25FA40, &__block_literal_global_1247);
  }
  int v6 = [(_UIKeyboardStateManager *)self taskQueue];
  [v6 addTask:v7 breadcrumb:qword_1EB25FA38];

LABEL_8:
}

- (void)addInputString:(id)a3 withFlags:(unint64_t)a4
{
  id v6 = a3;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = __52___UIKeyboardStateManager_addInputString_withFlags___block_invoke;
  v8[3] = &unk_1E52E3CD0;
  void v8[4] = self;
  id v9 = v6;
  unint64_t v10 = a4;
  id v7 = v6;
  [(_UIKeyboardStateManager *)self _scheduleInputAdditionOrDeletion:v8];
}

- (void)addInputString:(id)a3 withFlags:(unint64_t)a4 withInputManagerHint:(id)a5
{
  id v8 = a3;
  id v9 = a5;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __73___UIKeyboardStateManager_addInputString_withFlags_withInputManagerHint___block_invoke;
  void v12[3] = &unk_1E52E3CF8;
  void v12[4] = self;
  id v13 = v8;
  id v14 = v9;
  unint64_t v15 = a4;
  id v10 = v9;
  id v11 = v8;
  [(_UIKeyboardStateManager *)self _scheduleInputAdditionOrDeletion:v12];
}

- (void)_addInputString:(id)a3 withFlags:(unint64_t)a4 withInputManagerHint:(id)a5 withInputSource:(int64_t)a6
{
  id v10 = a3;
  id v11 = a5;
  if (qword_1EB25FA50 != -1) {
    dispatch_once(&qword_1EB25FA50, &__block_literal_global_1251);
  }
  uint64_t v12 = [(_UIKeyboardStateManager *)self taskQueue];
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  v16[2] = __90___UIKeyboardStateManager__addInputString_withFlags_withInputManagerHint_withInputSource___block_invoke_3;
  v16[3] = &unk_1E52E3D20;
  v16[4] = self;
  id v17 = v10;
  id v18 = v11;
  unint64_t v19 = a4;
  int64_t v20 = a6;
  uint64_t v13 = qword_1EB25FA48;
  id v14 = v11;
  id v15 = v10;
  [v12 addTask:v16 breadcrumb:v13];
}

- (void)addInputString:(id)a3 withFlags:(unint64_t)a4 executionContext:(id)a5
{
}

+ (BOOL)_isInputEligibleForSpaceAutodelete:(id)a3
{
  id v3 = a3;
  id v4 = [v3 string];
  if (![(__CFString *)v4 isEqualToString:@" "])
  {
    BOOL v18 = 0;
LABEL_16:

    goto LABEL_17;
  }
  BOOL v5 = [v3 acceptedCandidate];

  if (v5)
  {
    id v6 = [v3 acceptedCandidate];
    id v7 = [v6 input];
    uint64_t v8 = [v7 lowercaseString];
    id v9 = (void *)v8;
    if (v8) {
      id v10 = (__CFString *)v8;
    }
    else {
      id v10 = &stru_1ED0E84C0;
    }
    id v4 = v10;

    id v11 = [v3 acceptedCandidate];
    uint64_t v12 = [v11 candidate];
    uint64_t v13 = [v12 lowercaseString];
    id v14 = (void *)v13;
    if (v13) {
      id v15 = (__CFString *)v13;
    }
    else {
      id v15 = &stru_1ED0E84C0;
    }
    id v16 = v15;

    if ([(__CFString *)v4 length] && ![(__CFString *)v16 hasPrefix:v4])
    {
      BOOL v18 = 0;
    }
    else
    {
      unint64_t v17 = [(__CFString *)v4 length];
      BOOL v18 = v17 < [(__CFString *)v16 length];
    }

    goto LABEL_16;
  }
  BOOL v18 = 0;
LABEL_17:

  return v18;
}

- (void)addInputString:(id)a3 withFlags:(unint64_t)a4 withInputManagerHint:(id)a5 executionContext:(id)a6
{
}

- (void)addInputString:(id)a3 withFlags:(unint64_t)a4 withInputManagerHint:(id)a5 withInputSource:(int64_t)a6 executionContext:(id)a7
{
  id v12 = a3;
  uint64_t v13 = (__CFString *)a5;
  id v14 = a7;
  id v15 = _UIKeyboardLog();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1853B0000, v15, OS_LOG_TYPE_DEFAULT, "Keyboard adds a string", buf, 2u);
  }

  if ([(_UIKeyboardStateManager *)self isCurrentEditResponderWebKit]
    && [(_UIKeyboardStateManager *)self shouldApplyKeyboardInputToUIHost])
  {
    id v16 = [(_UIKeyboardStateManager *)self eventForCurrentWebEvent];
    id v17 = objc_alloc_init(NSClassFromString(&cfstr_Rtiinputoperat.isa));
    id v18 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    [v18 setObject:v12 forKey:@"string"];
    unint64_t v19 = [NSNumber numberWithUnsignedInteger:a4];
    [v18 setObject:v19 forKey:@"flags"];

    if (v13) {
      int64_t v20 = v13;
    }
    else {
      int64_t v20 = &stru_1ED0E84C0;
    }
    [v18 setObject:v20 forKey:@"inputManagerHint"];
    [v18 setObject:@"_addInputString:withFlags:withInputManagerHint:withInputSource:" forKey:@"selector"];
    id v21 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v16, "source"));
    [v18 setObject:v21 forKey:@"source"];

    BOOL v22 = (void *)[v18 copy];
    [v17 setCustomInfo:v22];

    [v17 setCustomInfoType:0x1ED14BC00];
    uint64_t v23 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
    [v23 performInputOperation:v17];

    [v14 returnExecutionToParent];
    goto LABEL_17;
  }
  int v24 = +[UIKeyboardInputModeController sharedInputModeController];
  BOOL v25 = +[UIKeyboardInputModeController sharedInputModeController];
  int v26 = [v25 currentInputMode];
  [v24 updateLastUsedInputMode:v26];

  [(_UIKeyboardStateManager *)self setDeleteWordLastDelete:-*MEMORY[0x1E4F1CF68]];
  if (![(_UIKeyboardStateManager *)self _isValidKeyInput:v12]) {
    goto LABEL_16;
  }
  [(_UIKeyboardStateManager *)self removeSpaceAfterEmojiForInputString:v12];
  if ((a4 & 0x80) != 0)
  {
    if ([(_UIKeyboardStateManager *)self callShouldInsertText:v12])
    {
      id v32 = objc_alloc_init(MEMORY[0x1E4FAE370]);
      [v32 setInsertionText:v12];
      [(_UIKeyboardStateManager *)self performKeyboardOutput:v32];
      [(_UIKeyboardStateManager *)self updateReturnKey];
      [(_UIKeyboardStateManager *)self updateNoContentViews];
    }
    goto LABEL_16;
  }
  if (![(_UIKeyboardStateManager *)self acceptInputString:v12])
  {
LABEL_16:
    [v14 returnExecutionToParent];
    goto LABEL_17;
  }
  BOOL v27 = [(_UIKeyboardStateManager *)self inputEventForInputString:v12];
  [v27 setPopupVariant:(a4 >> 1) & 1];
  [v27 setMultitap:(a4 >> 2) & 1];
  [v27 setFlick:(a4 >> 6) & 1];
  [v27 setGesture:(a4 >> 8) & 1];
  [v27 setInputManagerHint:v13];
  int v28 = +[UIKBAnalyticsDispatcher sharedInstance];
  [v28 setNextCandidateReplacementSource:1];

  uint64_t v36 = MEMORY[0x1E4F143A8];
  uint64_t v37 = 3221225472;
  BOOL v38 = __106___UIKeyboardStateManager_addInputString_withFlags_withInputManagerHint_withInputSource_executionContext___block_invoke;
  BOOL v39 = &unk_1E52DD450;
  BOOL v40 = self;
  id v41 = v12;
  id v42 = v14;
  id v29 = v27;
  id v43 = v29;
  BOOL v30 = _Block_copy(&v36);
  char v31 = v30;
  if (a6) {
    -[_UIKeyboardStateManager performOperations:withTextInputSource:](self, "performOperations:withTextInputSource:", v30, a6, v36, v37, v38, v39, v40, v41, v42);
  }
  else {
    (*((void (**)(void *))v30 + 2))(v30);
  }
  int v33 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  char v34 = [v33 hasText];

  if ((v34 & 1) == 0)
  {
    int64_t m_cachedAutofillMode = self->m_cachedAutofillMode;
    if (m_cachedAutofillMode == 2)
    {
      +[_UIKeyboardUsageTracking signupPasswordFromKeyboardIncrement];
    }
    else if (m_cachedAutofillMode == 1)
    {
      +[_UIKeyboardUsageTracking loginPasswordFromKeyboardIncrement];
    }
  }

LABEL_17:
}

- (void)addInputEvent:(id)a3 executionContext:(id)a4
{
  id v7 = a3;
  id v8 = a4;
  id v9 = [v7 string];
  double m_changeTime = self->m_changeTime;
  [(_UIKeyboardStateManager *)self updateChangeTimeAndIncrementCount];
  id v11 = [(_UIKeyboardStateManager *)self inputManagerState];
  int v12 = [v11 stringEndsWord:v9];

  if ([v9 isEqualToString:@"'"])
  {
    uint64_t v13 = [(_UIKeyboardStateManager *)self autocorrectionController];
    if ([v13 hasAutocorrection])
    {
      id v14 = [(_UIKeyboardStateManager *)self autocorrectionController];
      id v15 = [v14 autocorrection];
      int v16 = [v15 isForShortcutConversion];
    }
    else
    {
      int v16 = 0;
    }
  }
  else
  {
    int v16 = 0;
  }
  int v17 = v16 | v12;
  if ([v7 isSynthesizedByAcceptingCandidate])
  {
    id v18 = [v7 string];
    uint64_t v19 = [v18 length];

    if (!v19) {
      int v17 = 1;
    }
  }
  uint64_t v20 = [(NSString *)self->m_previousInputString _isPlainSpace];
  [(_UIKeyboardStateManager *)self setPreviousInputString:v9];
  self->m_acceptingCandidate = 0;
  [(_UIKeyboardStateManager *)self clearTransientState];
  if (!v17
    || [(UITextInputTraits *)self->m_traits contentsIsSingleValue]
    || ![(_UIKeyboardStateManager *)self hasAdvancedInputDelegate])
  {
    if (![(_UIKeyboardStateManager *)self callShouldInsertText:v9])
    {
      [(_UIKeyboardStateManager *)self setShiftOffIfNeeded];
      [(_UIKeyboardStateManager *)self updateReturnKey];
      [(_UIKeyboardStateManager *)self updateNoContentViews];
      [(_UIKeyboardStateManager *)self clearInputForMarkedText];
      [v8 returnExecutionToParent];
      goto LABEL_25;
    }
    if ([(TIKeyboardInputManagerState *)self->m_inputManagerState shouldExtendPriorWord])
    {
      int v26 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      BOOL v27 = [v26 selectedTextRange];
      int v28 = [v27 _isRanged];

      if (v28) {
        [(_UIKeyboardStateManager *)self willReplaceTextInRangedSelectionWithKeyboardInput];
      }
    }
    id v29 = [(_UIKeyboardStateManager *)self autocorrectionController];
    [v29 clearAutocorrection];

    BOOL v30 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    char v31 = [v30 keyInputDelegate];

    [(_UIKeyboardStateManager *)self updateTextInputKeyboardSource];
    id v32 = [(_UIKeyboardStateManager *)self handleDeleteAutospaceForInputString:v9 afterSpace:v20];
    if ([v32 length])
    {
      uint64_t v33 = [(_UIKeyboardStateManager *)self handleReplacement:v32 forSpaceAndInput:v7];

      id v7 = (id)v33;
    }
    uint64_t v37 = MEMORY[0x1E4F143A8];
    uint64_t v38 = 3221225472;
    BOOL v39 = __58___UIKeyboardStateManager_addInputEvent_executionContext___block_invoke_2;
    BOOL v40 = &unk_1E52E3628;
    id v41 = self;
    id v42 = v9;
    char v34 = [v8 childWithContinuation:&v37];
    -[_UIKeyboardStateManager handleKeyboardInput:executionContext:](self, "handleKeyboardInput:executionContext:", v7, v34, v37, v38, v39, v40, v41);

    goto LABEL_23;
  }
  double v21 = self->m_changeTime - m_changeTime;
  BOOL v22 = [(_UIKeyboardStateManager *)self inputManagerState];
  uint64_t v23 = [v22 inputString];
  int v24 = [(_UIKeyboardStateManager *)self inputManagerState];
  +[UITextChecker setString:isExemptFromChecker:](UITextChecker, "setString:isExemptFromChecker:", v23, [v24 inputStringIsExemptFromChecker]);

  if ([(_UIKeyboardStateManager *)self usesCandidateSelection]
    && ![(_UIKeyboardStateManager *)self shouldShowLongPredictionList])
  {
    if (self->m_candidateList
      && ([(TIKeyboardCandidateResultSet *)self->m_candidateResultSet candidates],
          BOOL v35 = objc_claimAutoreleasedReturnValue(),
          uint64_t v36 = [v35 count],
          v35,
          v36))
    {
      char v31 = [(_UIKeyboardStateManager *)self acceptCurrentCandidateForInput:v7];
      [(_UIKeyboardStateManager *)self setPreviousInputString:v9];
    }
    else
    {
      char v31 = 0;
    }
    [(_UIKeyboardStateManager *)self addWordTerminator:v7 afterSpace:v20 afterAcceptingCandidate:v31 elapsedTime:v8 executionContext:v21];
LABEL_23:

    goto LABEL_25;
  }
  v43[0] = MEMORY[0x1E4F143A8];
  v43[1] = 3221225472;
  id v43[2] = __58___UIKeyboardStateManager_addInputEvent_executionContext___block_invoke;
  v43[3] = &unk_1E52E3D48;
  SEL v46 = a2;
  v43[4] = self;
  id v44 = v9;
  id v7 = v7;
  id v45 = v7;
  char v48 = v20;
  double v47 = v21;
  BOOL v25 = [v8 childWithContinuation:v43];
  [(_UIKeyboardStateManager *)self acceptAutocorrectionForWordTerminator:v7 executionContextPassingTIKeyboardCandidate:v25];

LABEL_25:
}

- (id)acceptAutocorrectionForWordTerminator:(id)a3
{
  id v4 = a3;
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x3032000000;
  id v15 = __Block_byref_object_copy__38;
  int v16 = __Block_byref_object_dispose__38;
  id v17 = 0;
  if (qword_1EB25FA60 != -1) {
    dispatch_once(&qword_1EB25FA60, &__block_literal_global_1279);
  }
  BOOL v5 = [(_UIKeyboardStateManager *)self taskQueue];
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __65___UIKeyboardStateManager_acceptAutocorrectionForWordTerminator___block_invoke_3;
  v9[3] = &unk_1E52E3D98;
  v9[4] = self;
  id v6 = v4;
  id v10 = v6;
  id v11 = &v12;
  [v5 performSingleTask:v9 breadcrumb:qword_1EB25FA58];

  id v7 = (id)v13[5];
  _Block_object_dispose(&v12, 8);

  return v7;
}

- (void)acceptAutocorrectionForWordTerminator:(id)a3 executionContextPassingTIKeyboardCandidate:(id)a4
{
  id v7 = a3;
  id v8 = a4;
  if (!+[UIKeyboard doesSpacebarAcceptInlineTextCompletion])goto LABEL_17; {
  id v9 = [(_UIKeyboardStateManager *)self inlineTextCompletionController];
  }
  int v10 = [v9 currentlyAcceptingInlineCompletionByDirectTap];

  uint64_t v11 = v10 ? 2 : 0;
  uint64_t v12 = [(_UIKeyboardStateManager *)self inlineTextCompletionController];
  uint64_t v13 = [v7 string];
  uint64_t v14 = [v12 acceptTextCompletionWithInteraction:v11 wordTerminator:v13 outputHandledByCaller:1];

  if (!v14)
  {
LABEL_17:
    id v15 = [(_UIKeyboardStateManager *)self autocorrectionController];
    uint64_t v14 = [v15 autocorrection];

    if (v14)
    {
      int v16 = [(_UIKeyboardStateManager *)self inlineTextCompletionController];
      [v16 removeTextCompletionPrompt];
    }
  }
  id v17 = [v7 string];
  BOOL v18 = [(_UIKeyboardStateManager *)self shouldAcceptCandidate:v14 beforeInputString:v17];

  if (v18
    && ([(_UIKeyboardStateManager *)self autocorrectionPreferenceForTraits] != 2
     || ([v7 isSynthesizedByAcceptingCandidate] & 1) != 0
     || [v14 isForShortcutConversion]))
  {
    uint64_t v21 = MEMORY[0x1E4F143A8];
    uint64_t v22 = 3221225472;
    uint64_t v23 = __108___UIKeyboardStateManager_acceptAutocorrectionForWordTerminator_executionContextPassingTIKeyboardCandidate___block_invoke;
    int v24 = &unk_1E52E3CF8;
    SEL v28 = a2;
    BOOL v25 = self;
    id v19 = v14;
    id v26 = v19;
    id v27 = v7;
    uint64_t v20 = [v8 childWithContinuation:&v21];
    -[_UIKeyboardStateManager acceptAutocorrection:executionContextPassingTIKeyboardCandidate:](self, "acceptAutocorrection:executionContextPassingTIKeyboardCandidate:", v19, v20, v21, v22, v23, v24, v25);
  }
  else
  {
    [(_UIKeyboardStateManager *)self didAcceptAutocorrection:0 inputCandidate:v14 wordTerminator:v7];
    [(_UIKeyboardStateManager *)self setAutocorrection:0];
    [v8 returnExecutionToParent];
  }
}

- (id)inputWordForTerminatorAtSelection
{
  id v3 = [(_UIKeyboardStateManager *)self documentState];

  if (v3)
  {
    id v4 = [(_UIKeyboardStateManager *)self documentState];
    id v3 = [v4 selectedText];

    if (!v3)
    {
      BOOL v5 = [(_UIKeyboardStateManager *)self documentState];
      v7[0] = MEMORY[0x1E4F143A8];
      v7[1] = 3221225472;
      v7[2] = __60___UIKeyboardStateManager_inputWordForTerminatorAtSelection__block_invoke;
      v7[3] = &unk_1E52E3DC0;
      v7[4] = self;
      id v3 = [v5 inputStemWithTerminatorPredicate:v7];

      if (![v3 length])
      {

        id v3 = 0;
      }
    }
  }
  return v3;
}

- (void)didAcceptAutocorrection:(id)a3 inputCandidate:(id)a4 wordTerminator:(id)a5
{
}

- (void)didAcceptAutocorrection:(id)a3 inputCandidate:(id)a4 wordTerminator:(id)a5 learningFlagsMask:(unint64_t)a6
{
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  uint64_t v13 = [(_UIKeyboardStateManager *)self inputWordForTerminatorAtSelection];
  if (v13)
  {
    uint64_t v14 = UIKeyboardGetCurrentInputMode();
    id v15 = UIKeyboardInputModeGetIdentifierWithKeyboardLayouts(v14);

    int v16 = TIStatisticGetKeyForInputMode();
    TIStatisticScalarIncrement();

    if ([v10 isContinuousPathConversion]) {
      ++self->m_numCPwords;
    }
    if ([(_UIKeyboardStateManager *)self autocorrectionPreferenceForTraits] == 1)
    {
      id v17 = TIStatisticGetKeyForInputMode();
      TIStatisticScalarIncrement();
    }
    if ([(_UIKeyboardStateManager *)self usesAutocorrectionLists])
    {
      BOOL v18 = TIStatisticGetKeyForInputMode();
      TIStatisticScalarIncrement();
    }
    if (self->m_layoutAllowsCP
      && (unint64_t)[v13 length] >= 2
      && self->m_numCPwords
      && ([v10 isContinuousPathConversion] & 1) == 0
      && ([v10 isEmojiCandidate] & 1) == 0
      && ([v10 isPunctuationKeyCandidate] & 1) == 0
      && ([v10 isCompletionCandidate] & 1) == 0)
    {
      id v19 = TIStatisticGetKeyForInputMode();
      TIStatisticScalarIncrement();
    }
  }
  if ([(UITextInputTraits *)self->m_traits isSingleLineDocument])
  {
    uint64_t v20 = [v12 string];
    int v21 = [v20 isEqualToString:@"\n"];
  }
  else
  {
    int v21 = 0;
  }
  if (v12) {
    int v22 = v21;
  }
  else {
    int v22 = 1;
  }
  if (v10)
  {
    if (v22 && [(_UIKeyboardStateManager *)self nextCharacterIsWordCharacter])
    {
      uint64_t v23 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      uint64_t v24 = [(TIKeyboardInputManagerState *)self->m_inputManagerState wordSeparator];
      BOOL v25 = (void *)v24;
      if (v24) {
        id v26 = (__CFString *)v24;
      }
      else {
        id v26 = @" ";
      }
      [v23 insertText:v26 updateInputSource:0];
    }
    id v27 = self;
    id v28 = v10;
LABEL_31:
    [(_UIKeyboardStateManager *)v27 syncInputManagerToAcceptedAutocorrection:v28 forInput:v12];
    goto LABEL_32;
  }
  if (v22 && [(_UIKeyboardStateManager *)self nextCharacterIsWordCharacter])
  {
    id v29 = [(_UIKeyboardStateManager *)self inputDelegate];
    uint64_t v30 = [v29 _wordContainingCaretSelection];

    if (v21)
    {
      char v31 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      [v31 moveSelectionToEndOfWord];
    }
    uint64_t v13 = (void *)v30;
  }
  if ([v13 length])
  {
    id v32 = [v12 acceptedCandidate];
    int v33 = [v32 slotID];

    if (!v33)
    {
      if (v11)
      {
        uint64_t v45 = 0;
        SEL v46 = &v45;
        uint64_t v47 = 0x2050000000;
        char v34 = (void *)getTUITypedStringCandidateClass_softClass;
        uint64_t v48 = getTUITypedStringCandidateClass_softClass;
        if (!getTUITypedStringCandidateClass_softClass)
        {
          v44[0] = MEMORY[0x1E4F143A8];
          v44[1] = 3221225472;
          v44[2] = __getTUITypedStringCandidateClass_block_invoke;
          v44[3] = &unk_1E52D9900;
          v44[4] = &v45;
          __getTUITypedStringCandidateClass_block_invoke((uint64_t)v44);
          char v34 = (void *)v46[3];
        }
        id v35 = v34;
        _Block_object_dispose(&v45, 8);
        if (objc_opt_isKindOfClass())
        {
          id v36 = objc_alloc(MEMORY[0x1E4FAE318]);
          uint64_t v37 = [v11 candidate];
          uint64_t v38 = [v11 input];
          BOOL v39 = [v11 rawInput];
          uint64_t v40 = [v36 initWithCandidate:v37 forInput:v38 rawInput:v39];

          id v11 = (id)v40;
        }
      }
      else
      {
        id v11 = [MEMORY[0x1E4FAE318] candidateWithUnchangedInput:v13];
      }
      if (objc_opt_respondsToSelector())
      {
        id v41 = NSNumber;
        id v42 = v11;
        id v43 = [v41 numberWithUnsignedInt:a6];
        [v42 performSelector:sel_setLearningFlags_ withObject:v43];
      }
      id v27 = self;
      id v28 = v11;
      goto LABEL_31;
    }
  }
LABEL_32:
}

- (void)syncInputManagerToAcceptedAutocorrection:(id)a3 forInput:(id)a4
{
  id v7 = a3;
  id v6 = a4;
  if (![(UITextInputTraits *)self->m_traits isSecureTextEntry])
  {
    if (v6)
    {
      [v6 setAcceptedCandidate:v7];
    }
    else
    {
      [(_UIKeyboardStateManager *)self flushTouchEventWaitingForKeyInputEventIfNecessary];
      [(_UIKeyboardStateManager *)self textAccepted:v7];
    }
  }
}

- (void)setDocumentStateForAutocorrection:(id)a3
{
  id v23 = a3;
  id v4 = [v23 candidate];
  BOOL v5 = [(_UIKeyboardStateManager *)self documentState];
  id v6 = [v23 input];
  uint64_t v7 = [v6 length];

  if (v7)
  {
    id v8 = [v23 input];
    id v9 = [v5 documentStateAfterReplacingText:v8 withText:v4];

    if (!v9)
    {
      id v10 = objc_alloc(MEMORY[0x1E4FAE2A8]);
      id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      id v12 = [v5 contextBeforeInput];
      uint64_t v13 = [WeakRetained _normalizedStringForRangeComparison:v12];
      uint64_t v14 = [v5 markedText];
      id v15 = [v5 selectedText];
      int v16 = [v5 contextAfterInput];
      uint64_t v17 = [v5 selectedRangeInMarkedText];
      id v19 = objc_msgSend(v10, "initWithContextBefore:markedText:selectedText:contextAfter:selectedRangeInMarkedText:", v13, v14, v15, v16, v17, v18);

      uint64_t v20 = [v23 input];
      id v9 = [v19 documentStateAfterReplacingText:v20 withText:v4];

      if (!v9) {
        goto LABEL_4;
      }
    }
  }
  else
  {
    id v9 = [v5 documentStateAfterInsertingText:v4];
    if (!v9)
    {
LABEL_4:
      int v21 = (void *)MEMORY[0x1E4FAE2A8];
      id v9 = [(_UIKeyboardStateManager *)self inputDelegate];
      int v22 = [v21 documentStateOfDocument:v9];
      [(_UIKeyboardStateManager *)self setDocumentState:v22];

      goto LABEL_7;
    }
  }
  [(_UIKeyboardStateManager *)self setDocumentState:v9];
LABEL_7:
}

- (void)insertedEmojiFromPopover:(id)a3 selectionMethod:(id)a4
{
  id v6 = a3;
  +[UIKBAnalyticsDispatcher emojiInsertedByMethod:a4 inputType:@"Popover"];
  uint64_t v7 = [v6 emojiString];

  id v8 = [(_UIKeyboardStateManager *)self inputEventForInputString:v7];

  [v8 setPopupVariant:1];
  [(_UIKeyboardStateManager *)self handleEmojiInput:v8 keyboardState:self->m_keyboardState];
}

- (void)insertedAccentVariantFromPopover:(id)a3
{
  id v4 = a3;
  if (qword_1EB25FA70 != -1) {
    dispatch_once(&qword_1EB25FA70, &__block_literal_global_1289);
  }
  BOOL v5 = [(_UIKeyboardStateManager *)self taskQueue];
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __60___UIKeyboardStateManager_insertedAccentVariantFromPopover___block_invoke_3;
  void v12[3] = &unk_1E52E34C8;
  void v12[4] = self;
  [v5 performSingleTask:v12 breadcrumb:qword_1EB25FA68];

  if (qword_1EB25FA80 != -1) {
    dispatch_once(&qword_1EB25FA80, &__block_literal_global_1295);
  }
  id v6 = [(_UIKeyboardStateManager *)self taskQueue];
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __60___UIKeyboardStateManager_insertedAccentVariantFromPopover___block_invoke_6;
  v9[3] = &unk_1E52E3628;
  id v10 = v4;
  id v11 = self;
  uint64_t v7 = qword_1EB25FA78;
  id v8 = v4;
  [v6 performSingleTask:v9 breadcrumb:v7];
}

- (void)emojiSearchWillInsertEmoji:(id)a3 forSearchQuery:(id)a4
{
  id v12 = a3;
  id v6 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained updateIdleDetection:0];

  if (+[UIDictationController isRunning])
  {
    id v8 = +[UIDictationController sharedInstance];
    id v9 = [v8 dictationTipController];
    [v9 signalDictationInsertionTip:v12];
  }
  id v10 = @"Search";
  if (!v6 || ![v6 length])
  {
    id v11 = @"SearchFavorites";

    id v10 = v11;
  }
  [(_UIKeyboardStateManager *)self emojiSearchWillInsertEmoji:v12 forSearchQuery:v6 selectionMethod:@"Touch" inputType:v10];
}

- (void)emojiSearchWillInsertEmoji:(id)a3 forSearchQuery:(id)a4 selectionMethod:(id)a5 inputType:(id)a6
{
  id v10 = a6;
  id v11 = a5;
  id v12 = a4;
  id v13 = a3;
  [(_UIKeyboardStateManager *)self refreshKeyboardState];
  id v19 = (id)[(TIKeyboardState *)self->m_keyboardState copy];
  objc_msgSend(v19, "setAutofillMode:", +[UIKBAutofillController translateToTextInputAutofillMode:](UIKBAutofillController, "translateToTextInputAutofillMode:", -[TIKeyboardState autofillMode](self->m_keyboardState, "autofillMode")));
  objc_msgSend(v19, "setAutofillSubMode:", +[UIKBAutofillController translateToTextInputAutofillMode:](UIKBAutofillController, "translateToTextInputAutofillMode:", -[TIKeyboardState autofillSubMode](self->m_keyboardState, "autofillSubMode")));
  uint64_t v14 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  id v15 = [v14 delegateRespectingForwardingDelegate:0];

  if ([v15 conformsToProtocol:&unk_1ED42F658])
  {
    int v16 = [MEMORY[0x1E4FAE2A8] documentStateOfDocument:v15];
    [v19 setDocumentState:v16];
  }
  uint64_t v17 = [(_UIKeyboardStateManager *)self inputEventForInputString:v13];
  uint64_t v18 = [MEMORY[0x1E4FAE318] candidateWithCandidate:v13 forInput:v12];

  [v17 setAcceptedCandidate:v18];
  [v17 setSynthesizedByAcceptingCandidate:1];
  [(_UIKeyboardStateManager *)self acceptingCandidateWithTrigger:*MEMORY[0x1E4FAE568]];
  [(_UIKeyboardStateManager *)self handleEmojiInput:v17 keyboardState:v19];
  +[UIKBAnalyticsDispatcher emojiInsertedByMethod:v11 inputType:v10];
}

- (void)handleEmojiInput:(id)a3 keyboardState:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  if ([(_UIKeyboardStateManager *)self shouldAccessInputManagerService])
  {
    if (qword_1EB25FA90 != -1) {
      dispatch_once(&qword_1EB25FA90, &__block_literal_global_1301);
    }
    id v8 = [(_UIKeyboardStateManager *)self taskQueue];
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = __58___UIKeyboardStateManager_handleEmojiInput_keyboardState___block_invoke_3;
    v9[3] = &unk_1E52E3678;
    void v9[4] = self;
    id v10 = v6;
    id v11 = v7;
    [v8 addTask:v9 breadcrumb:qword_1EB25FA88];
  }
}

- (BOOL)currentInputModeRequiresLTRMathExpression
{
  id v2 = +[UIKeyboardInputModeController sharedInputModeController];
  id v3 = [v2 currentInputMode];
  id v4 = [v3 primaryLanguage];
  char v5 = [v4 isEqual:@"he-IL"];

  return v5;
}

- (void)acceptAutocorrection:(id)a3 executionContextPassingTIKeyboardCandidate:(id)a4
{
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  if (+[UIKeyboard isKeyboardProcess]
    || ![v6 isSupplementalItemCandidate]
    || ![(_UIKeyboardStateManager *)self _insertSupplementalCandidate:v6 overridingCandidateText:0])
  {
    id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    id v9 = [WeakRetained autocorrectPrompt];

    if (v9)
    {
      [v9 frame];
      double v11 = v10;
      double v13 = v12;
      double v15 = v14;
      double v17 = v16;
    }
    else
    {
      double v11 = *MEMORY[0x1E4F1DB20];
      double v13 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
      double v15 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
      double v17 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
    }
    id v18 = v6;
    m_smartPunctuationController = self->m_smartPunctuationController;
    uint64_t v20 = [v18 candidate];
    int v21 = [(TISmartPunctuationController *)m_smartPunctuationController smartPunctuationResultsForString:v20];

    id v22 = v18;
    if ([v21 count])
    {
      char v77 = v9;
      id v73 = v7;
      id v74 = v6;
      id v23 = [v18 candidate];
      uint64_t v24 = (void *)[v23 mutableCopy];

      long long v103 = 0u;
      long long v104 = 0u;
      long long v101 = 0u;
      long long v102 = 0u;
      char v75 = v21;
      id v25 = v21;
      uint64_t v26 = [v25 countByEnumeratingWithState:&v101 objects:v105 count:16];
      if (v26)
      {
        uint64_t v27 = v26;
        uint64_t v28 = *(void *)v102;
        do
        {
          for (uint64_t i = 0; i != v27; ++i)
          {
            if (*(void *)v102 != v28) {
              objc_enumerationMutation(v25);
            }
            uint64_t v30 = *(void **)(*((void *)&v101 + 1) + 8 * i);
            uint64_t v31 = [v30 range];
            uint64_t v33 = v32;
            char v34 = [v30 replacementString];
            objc_msgSend(v24, "replaceCharactersInRange:withString:", v31, v33, v34);
          }
          uint64_t v27 = [v25 countByEnumeratingWithState:&v101 objects:v105 count:16];
        }
        while (v27);
      }

      id v22 = [v18 candidateByReplacingWithCandidate:v24];

      id v7 = v73;
      id v6 = v74;
      int v21 = v75;
      id v9 = v77;
    }
    if ([(_UIKeyboardStateManager *)self shouldApplyAcceptedAutocorrection:v18])
    {
      id v35 = off_1E52D4000;
      if (+[UITextSelectionDisplayInteraction isTextAccelerationUIEnabled]&& [(_UIKeyboardStateManager *)self shouldUnderlineCandidate:v22])
      {
        id v36 = [(_UIKeyboardStateManager *)self autocorrectionController];
        uint64_t v37 = [v36 storedListForCandidate:v22];

        uint64_t v38 = [(_UIKeyboardStateManager *)self _textChoicesAssistant];
        [v38 addList:v37 forCandidate:v22];

        BOOL v39 = [v22 candidate];
        +[UITextChecker setString:v39 isExemptFromChecker:1];

        id v35 = off_1E52D4000;
      }
      uint64_t v40 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      id v41 = [v40 forwardingInputDelegate];

      if (!v41)
      {
        v99[0] = MEMORY[0x1E4F143A8];
        v99[1] = 3221225472;
        v99[2] = __91___UIKeyboardStateManager_acceptAutocorrection_executionContextPassingTIKeyboardCandidate___block_invoke;
        v99[3] = &unk_1E52E3A28;
        id v100 = v22;
        [(_UIKeyboardStateManager *)self performKeyboardOutputOnInputSourceSession:v99];
      }
      if ([(_UIKeyboardStateManager *)self hasAsyncCapableInputDelegate])
      {
        self->m_textInputChangesIgnored = 1;
        if ([v18 isContinuousPathConversion])
        {
          id v42 = [(_UIKeyboardStateManager *)self inputDelegateManager];
          id v43 = [v42 selectedTextRange];
          char v44 = [v43 isEmpty];

          if ((v44 & 1) == 0)
          {
            id v76 = v21;
            id v78 = v9;
            id v45 = v7;
            SEL v46 = [v18 input];
            uint64_t v47 = [v22 candidate];
            uint64_t v48 = [(_UIKeyboardStateManager *)self inputDelegateManager];
            BOOL v49 = [(_UIKeyboardStateManager *)self inputDelegateManager];
            id v50 = [v49 selectedTextRange];
            id v51 = [v48 textInRange:v50];

            if (([v51 hasPrefix:@" "] & 1) != 0
              || ![v47 hasPrefix:@" "])
            {
              id v7 = v45;
              id v9 = v78;
            }
            else
            {
              id v7 = v45;
              id v9 = v78;
              if ((unint64_t)[v47 length] >= 2)
              {
                uint64_t v52 = [v47 substringFromIndex:1];

                uint64_t v47 = (void *)v52;
              }
            }
            int v21 = v76;
            uint64_t v60 = [v22 candidateByReplacingWithCandidate:v47 input:v51];

            id v22 = (id)v60;
          }
          id v35 = off_1E52D4000;
        }
        if ([(__objc2_class *)v35[356] isTextAccelerationUIEnabled])
        {
          uint64_t v61 = [(_UIKeyboardStateManager *)self inputDelegateManager];
          uint64_t v62 = [v22 candidate];
          BOOL v63 = [v22 input];
          BOOL v64 = [(_UIKeyboardStateManager *)self shouldUnderlineCandidate:v22];
          v92[0] = MEMORY[0x1E4F143A8];
          v92[1] = 3221225472;
          v92[2] = __91___UIKeyboardStateManager_acceptAutocorrection_executionContextPassingTIKeyboardCandidate___block_invoke_2;
          v92[3] = &unk_1E52E3E38;
          v92[4] = self;
          id v22 = v22;
          id v93 = v22;
          id v94 = v7;
          double v95 = v11;
          double v96 = v13;
          double v97 = v15;
          double v98 = v17;
          [v61 applyAutocorrection:v62 toString:v63 shouldUnderline:v64 withCompletionHandler:v92];
        }
        else
        {
          aBlock[0] = MEMORY[0x1E4F143A8];
          aBlock[1] = 3221225472;
          aBlock[2] = __91___UIKeyboardStateManager_acceptAutocorrection_executionContextPassingTIKeyboardCandidate___block_invoke_6;
          aBlock[3] = &unk_1E52E3E38;
          void aBlock[4] = self;
          id v22 = v22;
          id v86 = v22;
          id v87 = v7;
          double v88 = v11;
          double v89 = v13;
          double v90 = v15;
          double v91 = v17;
          id v65 = _Block_copy(aBlock);
          id v66 = [(_UIKeyboardStateManager *)self webInputDelegate];

          id v67 = v9;
          if (v66)
          {
            BOOL v68 = [(_UIKeyboardStateManager *)self webInputDelegate];
            id v69 = [v22 input];
            id v70 = [v22 candidate];
            v83[0] = MEMORY[0x1E4F143A8];
            v83[1] = 3221225472;
            v83[2] = __91___UIKeyboardStateManager_acceptAutocorrection_executionContextPassingTIKeyboardCandidate___block_invoke_10;
            v83[3] = &unk_1E52E3E60;
            uint64_t v71 = &v84;
            id v84 = v65;
            [v68 replaceText:v69 withText:v70 options:0 completionHandler:v83];
          }
          else
          {
            uint64_t v72 = [(_UIKeyboardStateManager *)self asyncInputDelegate];

            if (v72)
            {
              BOOL v68 = [(_UIKeyboardStateManager *)self asyncInputDelegate];
              id v69 = [v22 input];
              id v70 = [v22 candidate];
              v81[0] = MEMORY[0x1E4F143A8];
              v81[1] = 3221225472;
              v81[2] = __91___UIKeyboardStateManager_acceptAutocorrection_executionContextPassingTIKeyboardCandidate___block_invoke_11;
              v81[3] = &unk_1E52E3E60;
              uint64_t v71 = &v82;
              id v82 = v65;
              [v68 replaceText:v69 withText:v70 options:0 withCompletionHandler:v81];
            }
            else
            {
              BOOL v68 = [(_UIKeyboardStateManager *)self asyncWebKitInteractionDelegate];
              id v69 = [v22 candidate];
              id v70 = [v22 input];
              v79[0] = MEMORY[0x1E4F143A8];
              v79[1] = 3221225472;
              v79[2] = __91___UIKeyboardStateManager_acceptAutocorrection_executionContextPassingTIKeyboardCandidate___block_invoke_12;
              v79[3] = &unk_1E52E3E88;
              uint64_t v71 = &v80;
              id v80 = v65;
              [v68 applyAutocorrection:v69 toString:v70 withCompletionHandler:v79];
            }
          }

          id v9 = v67;
        }
        goto LABEL_37;
      }
      [(_UIKeyboardStateManager *)self deleteWordLastDelete];
      double v56 = -*MEMORY[0x1E4F1CF68];
      if (v57 > v56)
      {
        int v58 = [(_UIKeyboardStateManager *)self inputDelegateManager];
        [v58 insertText:@" " updateInputSource:0];

        [(_UIKeyboardStateManager *)self setDeleteWordLastDelete:v56];
      }
      if ([(_UIKeyboardStateManager *)self applyAutocorrection:v22])
      {
        [(_UIKeyboardStateManager *)self underlineCandidate:v22];
        uint64_t v59 = [v18 candidate];
        -[_UIKeyboardStateManager animateAutocorrectionToText:fromRect:](self, "animateAutocorrectionToText:fromRect:", v59, v11, v13, v15, v17);

        -[_UIKeyboardStateManager didApplyAutocorrection:autocorrectPromptFrame:](self, "didApplyAutocorrection:autocorrectPromptFrame:", v18, v11, v13, v15, v17);
        [v7 returnExecutionToParentWithInfo:v22];
LABEL_37:

        goto LABEL_38;
      }
    }
    else
    {
      BOOL v53 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      uint64_t v54 = [v53 selectedTextRange];
      char v55 = [v54 isEmpty];

      if ((v55 & 1) == 0) {
        [(_UIKeyboardStateManager *)self collapseSelection];
      }
    }
    [v7 returnExecutionToParent];
    goto LABEL_37;
  }
  [v7 returnExecutionToParent];
LABEL_38:
}

- (BOOL)shouldApplyAcceptedAutocorrection:(id)a3
{
  id v5 = a3;
  BOOL v6 = (objc_opt_respondsToSelector() & 1) == 0 || ([v5 candidateProperty] & 4) == 0;
  BOOL v7 = (objc_opt_respondsToSelector() & 1) == 0
    || [v5 performSelector:sel_shouldHintAtAlternativeInput] == 0;
  id v8 = [v5 candidate];
  if (!v8)
  {
    id v3 = [v5 input];
    if (!v3) {
      goto LABEL_23;
    }
  }
  id v9 = [v5 candidate];
  double v10 = [v5 input];
  if ([v9 isEqualToString:v10])
  {
    char v11 = v6 & ~[v5 isSupplementalItemCandidate] & v7;

    if (v8)
    {

      if (v11) {
        goto LABEL_23;
      }
    }
    else
    {

      if (v11)
      {
LABEL_23:
        char v13 = 0;
        goto LABEL_26;
      }
    }
  }
  else
  {

    if (v8) {
      double v12 = v8;
    }
    else {
      double v12 = v3;
    }
  }
  if ([v5 slotID]
    || ([(_UIKeyboardStateManager *)self inputDelegate],
        double v14 = objc_claimAutoreleasedReturnValue(),
        v14,
        !v14))
  {
    char v13 = 1;
  }
  else
  {
    double v15 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    double v16 = [v15 selectedTextRange];
    if ([v16 isEmpty])
    {
      double v17 = [v5 input];
      uint64_t v18 = [v17 length];
    }
    else
    {
      uint64_t v18 = 0;
    }

    id v19 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    uint64_t v20 = [v5 candidate];
    char v13 = [v19 callShouldReplaceExtendedRange:v18 withText:v20 includeMarkedText:0];
  }
LABEL_26:

  return v13;
}

- (void)didApplyAutocorrection:(id)a3 autocorrectPromptFrame:(CGRect)a4
{
  CGFloat height = a4.size.height;
  CGFloat width = a4.size.width;
  CGFloat y = a4.origin.y;
  CGFloat x = a4.origin.x;
  id v19 = a3;
  id v9 = [v19 input];
  uint64_t v10 = [v9 length];

  if (!v10)
  {
    id v11 = objc_alloc_init(MEMORY[0x1E4FAE370]);
    [v11 setAcceptedCandidate:v19];
    double v12 = [v19 candidate];
    [v11 insertText:v12];

    [(_UIKeyboardStateManager *)self _postInputResponderCapabilitiesChangedNotificationWithOutput:v11 selectionChanged:0];
  }
  [(_UIKeyboardStateManager *)self setChangedDelegate];
  if ([(_UIKeyboardStateManager *)self isAutoFillMode])
  {
    char v13 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    double v14 = [v13 privateInputDelegate];
    char v15 = objc_opt_respondsToSelector();

    if (v15)
    {
      double v16 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      double v17 = [v16 privateInputDelegate];
      uint64_t v18 = [v19 candidate];
      [v17 acceptedAutoFillWord:v18];
    }
  }
  v21.origin.CGFloat x = x;
  v21.origin.CGFloat y = y;
  v21.size.CGFloat width = width;
  v21.size.CGFloat height = height;
  [(_UIKeyboardStateManager *)self trackUsageForAcceptedAutocorrection:v19 promptWasShowing:!CGRectIsNull(v21)];
}

- (void)addWordTerminator:(id)a3 afterSpace:(BOOL)a4 afterAcceptingCandidate:(id)a5 elapsedTime:(double)a6 executionContext:(id)a7
{
  BOOL v10 = a4;
  id v12 = a3;
  id v13 = a5;
  id v14 = a7;
  char v15 = [v12 string];
  if (![(_UIKeyboardStateManager *)self callShouldInsertText:v15])
  {
    double v16 = [v12 acceptedCandidate];
    if ([v16 isAutofillCandidate])
    {
    }
    else
    {
      double v17 = [v12 acceptedCandidate];
      int v18 = [v17 isSlottedCandidate];

      if (!v18)
      {
        self->m_textInputChangingText = 1;
        [(_UIKeyboardStateManager *)self updateForChangedSelection];
        self->m_textInputChangingText = 0;
        [v14 returnExecutionToParent];
        goto LABEL_17;
      }
    }
  }
  [(_UIKeyboardStateManager *)self clearInputWithCandidatesCleared:0];
  id v19 = [(_UIKeyboardStateManager *)self handleDeleteAutospaceForInputString:v15 afterSpace:v10];
  if (!v19)
  {
    if ([(_UIKeyboardStateManager *)self willDoubleSpacePeriodForInputString:v15 afterSpace:v10 elapsedTime:a6])
    {
      uint64_t v20 = [(_UIKeyboardStateManager *)self inputManagerState];
      CGRect v21 = [v20 replacementForDoubleSpace];
      uint64_t v22 = [v21 copy];
      id v23 = (void *)v22;
      uint64_t v24 = @". ";
      if (v22) {
        uint64_t v24 = (__CFString *)v22;
      }
      id v19 = v24;

      if ([(_UIKeyboardStateManager *)self _hasMarkedText])
      {
        self->m_textInputChangesIgnored = 1;
        id v25 = [(_UIKeyboardStateManager *)self inputDelegateManager];
        [v25 unmarkText];

        self->m_textInputChangesIgnored = 0;
      }
    }
    else
    {
      id v19 = 0;
    }
  }
  if ([(__CFString *)v19 length])
  {
    uint64_t v26 = [(_UIKeyboardStateManager *)self handleReplacement:v19 forSpaceAndInput:v12];

    id v12 = (id)v26;
  }
  if (v12)
  {
    uint64_t v27 = [(_UIKeyboardStateManager *)self autocorrectionController];
    [v27 clearAutocorrection];

    +[UITextChecker noteWordTerminator:v12 replacement:v19];
    v29[0] = MEMORY[0x1E4F143A8];
    v29[1] = 3221225472;
    v29[2] = __109___UIKeyboardStateManager_addWordTerminator_afterSpace_afterAcceptingCandidate_elapsedTime_executionContext___block_invoke;
    v29[3] = &unk_1E52E3678;
    v29[4] = self;
    id v30 = v13;
    id v31 = v15;
    uint64_t v28 = [v14 childWithContinuation:v29];
    [(_UIKeyboardStateManager *)self handleKeyboardInput:v12 executionContext:v28];
  }
LABEL_17:
}

- (void)completeAddInputString:(id)a3
{
}

- (void)completeAddInputString:(id)a3 generateCandidates:(BOOL)a4
{
  BOOL v4 = a4;
  id v6 = a3;
  [(_UIKeyboardStateManager *)self setShiftOffIfNeeded];
  if (v4) {
    [(_UIKeyboardStateManager *)self generateCandidates];
  }
  if ([v6 isEqualToString:@"\n"]
    && ![(UITextInputTraits *)self->m_traits isSingleLineDocument])
  {
    [(_UIKeyboardStateManager *)self setInitialDirection];
  }
  [(_UIKeyboardStateManager *)self updateCandidateDisplay];
  [(_UIKeyboardStateManager *)self updateReturnKey];
  [(_UIKeyboardStateManager *)self updateNoContentViews];
  [(_UIKeyboardStateManager *)self setChangedDelegate];
  [(_UIKeyboardStateManager *)self updateDoubleSpacePeriodStateForString:v6];
  self->m_suggestionsShownForCurrentDeletion = 0;
  self->m_didAutomaticallyInsertSpace = 0;
  [(_UIKeyboardStateManager *)self removeTextChoicePrompt];
}

- (void)updateDocumentViewsAfterKeyboardOutput:(id)a3
{
  id v12 = a3;
  BOOL v4 = [v12 insertionText];
  if ([v4 _isNewlineOrReturn])
  {
    BOOL v5 = [(UITextInputTraits *)self->m_traits isSingleLineDocument];

    if (!v5) {
      [(_UIKeyboardStateManager *)self setInitialDirection];
    }
  }
  else
  {
  }
  [(_UIKeyboardStateManager *)self updateNoContentViews];
  [(_UIKeyboardStateManager *)self setChangedDelegate];
  id v6 = [v12 insertionText];

  if (v6)
  {
    BOOL v7 = [v12 insertionText];
    id v8 = [MEMORY[0x1E4F28B88] newlineCharacterSet];
    uint64_t v9 = [v7 rangeOfCharacterFromSet:v8];

    if (v9 != 0x7FFFFFFFFFFFFFFFLL)
    {
      if ([(UITextInputTraits *)self->m_traits returnKeyGoesToNextResponder])
      {
        BOOL v10 = [(_UIKeyboardStateManager *)self delegateAsResponder];
        id v11 = [v10 _nextKeyResponder];
        [v11 becomeFirstResponder];
      }
      else
      {
        BOOL v10 = [MEMORY[0x1E4F28EB8] defaultCenter];
        [v10 postNotificationName:@"UIKeyboardReturnKeyPressed" object:0];
      }
    }
  }
  self->unint64_t m_textInputChangingCount = 0;
  *(_WORD *)&self->m_textInputChangesIgnored = 0;
  self->m_textInputChangingDirection = 0;
}

- (void)didChangePhraseBoundary
{
  if ([(_UIKeyboardStateManager *)self supportsSetPhraseBoundary])
  {
    [(_UIKeyboardStateManager *)self syncDocumentStateToInputDelegate];
    if (+[UIKeyboard isKeyboardProcess]
      || !+[UIKeyboard usesInputSystemUI])
    {
      [(_UIKeyboardStateManager *)self setUserSelectedCurrentCandidate:0];
      [(_UIKeyboardStateManager *)self generateCandidates];
      [(_UIKeyboardStateManager *)self updateCandidateDisplay];
    }
  }
}

- (unint64_t)phraseBoundary
{
  if (![(_UIKeyboardStateManager *)self supportsSetPhraseBoundary]) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  id v3 = [(_UIKeyboardStateManager *)self documentState];

  if (!v3) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  BOOL v4 = [(_UIKeyboardStateManager *)self documentState];
  BOOL v5 = [v4 markedText];
  uint64_t v6 = [v5 length];

  if (!v6) {
    return 0;
  }
  BOOL v7 = [(_UIKeyboardStateManager *)self documentState];
  unint64_t v8 = [v7 selectedRangeInMarkedText];

  return v8;
}

- (void)adjustSegmentSize:(int64_t)a3
{
  if (a3 >= 0) {
    int64_t v5 = a3;
  }
  else {
    int64_t v5 = -a3;
  }
  uint64_t v6 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  BOOL v7 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  unint64_t v8 = [v7 markedTextRange];
  uint64_t v9 = [v6 textInRange:v8];
  uint64_t v10 = [v9 length];

  if (v10 >= v5) {
    int64_t v11 = v5;
  }
  else {
    int64_t v11 = v10;
  }
  if (v10 <= 0) {
    uint64_t v12 = v5;
  }
  else {
    uint64_t v12 = v11;
  }
  if (v12 >= 1)
  {
    unint64_t v13 = (unint64_t)a3 >> 63;
    do
    {
      [(_UIKeyboardStateManager *)self movePhraseBoundaryToDirection:v13 granularity:1];
      --v12;
    }
    while (v12);
  }
}

- (void)movePhraseBoundaryToDirection:(int64_t)a3 granularity:(int64_t)a4
{
  if ([(_UIKeyboardStateManager *)self hasEditableMarkedText]
    && [(_UIKeyboardStateManager *)self phraseBoundary] != 0x7FFFFFFFFFFFFFFFLL)
  {
    if (qword_1EB25FAD0 != -1) {
      dispatch_once(&qword_1EB25FAD0, &__block_literal_global_1331);
    }
    BOOL v7 = [(_UIKeyboardStateManager *)self taskQueue];
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = __69___UIKeyboardStateManager_movePhraseBoundaryToDirection_granularity___block_invoke_3;
    v8[3] = &unk_1E52E3EB0;
    void v8[4] = self;
    void v8[5] = a3;
    v8[6] = a4;
    [v7 performTask:v8 breadcrumb:qword_1EB25FAC8];
  }
}

- (void)updateLayoutAndSetShift
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained updateLayout];

  [(_UIKeyboardStateManager *)self setShift:1];
}

- (void)deleteOnceFromInputWithExecutionContext:(id)a3
{
  id v4 = a3;
  int64_t v5 = [(_UIKeyboardStateManager *)self inputManagerState];
  unint64_t v6 = [v5 inputIndex];

  if (!v6) {
    goto LABEL_5;
  }
  BOOL v7 = [(_UIKeyboardStateManager *)self inputManagerState];
  unint64_t v8 = [v7 shadowTyping];

  if ([v8 length] < v6)
  {

LABEL_5:
    uint64_t v10 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    int v9 = [v10 _characterBeforeCaretSelection];

    goto LABEL_6;
  }
  int v9 = [v8 characterAtIndex:v6 - 1];

  if (!v9) {
    goto LABEL_5;
  }
LABEL_6:
  id v11 = objc_alloc_init(MEMORY[0x1E4FAE328]);
  [v11 setBackspace:1];
  objc_msgSend(v11, "setShiftDown:", -[_UIKeyboardStateManager isShiftKeyBeingHeld](self, "isShiftKeyBeingHeld"));
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = __67___UIKeyboardStateManager_deleteOnceFromInputWithExecutionContext___block_invoke;
  void v13[3] = &unk_1E52E3ED8;
  void v13[4] = self;
  int v14 = v9;
  uint64_t v12 = [v4 childWithContinuation:v13];

  [(_UIKeyboardStateManager *)self handleKeyboardInput:v11 executionContext:v12];
}

- (BOOL)nextCharacterIsWordCharacter
{
  id v3 = [(_UIKeyboardStateManager *)self inputDelegate];
  uint64_t v4 = [v3 _characterAfterCaretSelection];

  m_inputManagerState = self->m_inputManagerState;
  if (m_inputManagerState) {
    BOOL v6 = v4 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    LOBYTE(v8) = 0;
  }
  else
  {
    BOOL v7 = [NSString _stringWithUnichar:v4];
    int v8 = [(TIKeyboardInputManagerState *)m_inputManagerState stringEndsWord:v7] ^ 1;
  }
  return v8;
}

- (void)collapseSelection
{
  id v2 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  [v2 collapseSelectionAndAdjustByOffset:0];
}

- (BOOL)supportsScheduleReplacementsAfterDeletionToEndOfWord
{
  return [(TIKeyboardInputManagerState *)self->m_inputManagerState supportsReversionUI];
}

- (void)scheduleReplacementsAfterDeletionToEndOfWord
{
  if ([(_UIKeyboardStateManager *)self supportsScheduleReplacementsAfterDeletionToEndOfWord])
  {
    BOOL v3 = +[UITextSelectionDisplayInteraction isTextAccelerationUIEnabled];
    uint64_t v4 = 9;
    if (v3) {
      uint64_t v4 = 41;
    }
    if (self->m_suggestionsShownForCurrentDeletion) {
      uint64_t v5 = v4 | 2;
    }
    else {
      uint64_t v5 = v4;
    }
    self->m_suggestionsShownForCurrentDeletion = 1;
    BOOL v6 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    int v7 = [v6 hasAsyncCapableInputDelegate];

    if (v7) {
      uint64_t v8 = v5 | 0x10;
    }
    else {
      uint64_t v8 = v5;
    }
    [(_UIKeyboardStateManager *)self scheduleReplacementsWithOptions:v8];
  }
}

- (void)completeDeleteOnceFromInputWithCharacterBefore:(unsigned int)a3
{
  uint64_t v3 = *(void *)&a3;
  uint64_t v5 = objc_msgSend(NSString, "_stringWithUnichar:");
  [(_UIKeyboardStateManager *)self setDeletedString:v5];

  if (![(_UIKeyboardStateManager *)self usesCandidateSelection]
    || [(_UIKeyboardStateManager *)self shouldShowLongPredictionList])
  {
    BOOL v6 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    char v7 = [v6 hasAsyncCapableInputDelegate];

    uint64_t v8 = [(_UIKeyboardStateManager *)self inputManagerState];
    int v9 = [(_UIKeyboardStateManager *)self deletedString];
    int v10 = [v8 stringEndsWord:v9];
    if (!v10 || (v7 & 1) != 0)
    {

      if (!v10) {
        goto LABEL_14;
      }
    }
    else
    {
      id v11 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      char v12 = [v11 selectionIsEndOfWord];

      if ((v12 & 1) == 0) {
        goto LABEL_14;
      }
    }
    [(_UIKeyboardStateManager *)self clearInput];
    [(_UIKeyboardStateManager *)self scheduleReplacementsAfterDeletionToEndOfWord];
    [(_UIKeyboardStateManager *)self syncDocumentStateToInputDelegate];
    goto LABEL_14;
  }
  if (!self->m_candidateList) {
    goto LABEL_14;
  }
  unint64_t v13 = [(_UIKeyboardStateManager *)self _markedText];
  if (![v13 length])
  {
    id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    char v15 = [WeakRetained candidateController];
    int v16 = [v15 barIsExtended];

    if (!v16) {
      goto LABEL_14;
    }
    unint64_t v13 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    double v17 = [v13 candidateController];
    [v17 collapse];
  }
LABEL_14:
  int v18 = [(_UIKeyboardStateManager *)self autocorrectionController];
  if ([v18 hasProactiveCandidates])
  {
    id v19 = [(_UIKeyboardStateManager *)self documentState];
    uint64_t v20 = [v19 contextBeforeInput];

    if (v3 && !v20)
    {
      CGRect v21 = [(_UIKeyboardStateManager *)self autocorrectionController];
      [v21 clearAutocorrectionAndNotifyObservers:1];

      [(_UIKeyboardStateManager *)self updateAssistantView];
    }
  }
  else
  {
  }
  [(_UIKeyboardStateManager *)self setShiftOffIfNeeded];
  [(_UIKeyboardStateManager *)self updateDoubleSpacePeriodStateForCharacter:v3];
  self->m_didAutomaticallyInsertSpace = 0;
}

- (void)deleteFromInput
{
}

- (void)_deleteFromInputWithFlags:(unint64_t)a3
{
  if (qword_1EB25FAE0 != -1) {
    dispatch_once(&qword_1EB25FAE0, &__block_literal_global_1335);
  }
  uint64_t v5 = [(_UIKeyboardStateManager *)self taskQueue];
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __53___UIKeyboardStateManager__deleteFromInputWithFlags___block_invoke_3;
  v6[3] = &unk_1E52E3F00;
  v6[4] = self;
  v6[5] = a3;
  [v5 addTask:v6 breadcrumb:qword_1EB25FAD8];
}

- (void)deleteFromInputWithFlags:(unint64_t)a3
{
  void v11[2] = *MEMORY[0x1E4F143B8];
  if ([(_UIKeyboardStateManager *)self isCurrentEditResponderWebKit]
    && [(_UIKeyboardStateManager *)self shouldApplyKeyboardInputToUIHost])
  {
    id v5 = objc_alloc_init(NSClassFromString(&cfstr_Rtiinputoperat.isa));
    v10[0] = @"flags";
    BOOL v6 = [NSNumber numberWithUnsignedInteger:a3];
    v10[1] = @"selector";
    v11[0] = v6;
    v11[1] = @"_deleteFromInputWithFlags:";
    char v7 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v11 forKeys:v10 count:2];
    [v5 setCustomInfo:v7];

    [v5 setCustomInfoType:0x1ED14BC00];
    uint64_t v8 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
    [v8 performInputOperation:v5];
  }
  else
  {
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = __52___UIKeyboardStateManager_deleteFromInputWithFlags___block_invoke;
    v9[3] = &unk_1E52E3F00;
    void v9[4] = self;
    void v9[5] = a3;
    [(_UIKeyboardStateManager *)self _scheduleInputAdditionOrDeletion:v9];
  }
}

- (void)undoWithKeyboardInput:(id)a3
{
  id v4 = a3;
  if (qword_1EB25FAF0 != -1) {
    dispatch_once(&qword_1EB25FAF0, &__block_literal_global_1342);
  }
  id v5 = [(_UIKeyboardStateManager *)self taskQueue];
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = __49___UIKeyboardStateManager_undoWithKeyboardInput___block_invoke_3;
  v8[3] = &unk_1E52E3628;
  void v8[4] = self;
  id v9 = v4;
  uint64_t v6 = qword_1EB25FAE8;
  id v7 = v4;
  [v5 addTask:v8 breadcrumb:v6];
}

- (void)performAutoDeleteNumberOfTimes:(unint64_t)a3 deleteOneWord:(BOOL)a4 forwardToInputSource:(BOOL)a5
{
  BOOL v56 = a5;
  if (a3)
  {
    uint64_t v6 = 0;
    BOOL v53 = v63;
    uint64_t v54 = v60;
    char v55 = v65;
    while (1)
    {
      id v7 = [(_UIKeyboardStateManager *)self inputSystemSourceSession];
      uint64_t v8 = [v7 textOperations];
      id v9 = [v8 keyboardOutput];
      [v9 setProducedByDeleteInput:1];

      uint64_t v73 = 0;
      id v74 = &v73;
      uint64_t v75 = 0x2020000000;
      int v76 = 0;
      if (!a4 && (a3 == 1 || ![(_UIKeyboardStateManager *)self usesAutoDeleteWord]))
      {
        char v13 = 0;
        goto LABEL_9;
      }
      int v10 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      id v11 = [v10 asyncCapableInputDelegate];

      if (v11)
      {
        char v12 = [(_UIKeyboardStateManager *)self inputDelegateManager];
        [v12 _deleteByWord];

        char v13 = 1;
LABEL_9:
        int v14 = [(_UIKeyboardStateManager *)self inputDelegateManager];
        self->m_autoDeleteShiftCharacter = [v14 _characterBeforeCaretSelection];

        char v15 = 0;
        int v16 = 1;
        goto LABEL_10;
      }
      id v25 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      uint64_t v26 = [v25 selectedTextRange];

      uint64_t v27 = [v26 start];
      if (!v27) {
        break;
      }
      uint64_t v28 = [(_UIKeyboardStateManager *)self inputDelegate];
      id v29 = [v26 start];
      id v30 = [v28 _positionAtStartOfWords:1 beforePosition:v29];

      if (!v30) {
        goto LABEL_30;
      }
      id v31 = [v26 end];
      if (v31)
      {
        uint64_t v32 = [(_UIKeyboardStateManager *)self inputDelegate];
        uint64_t v33 = [v26 end];
        char v15 = [v32 textRangeFromPosition:v30 toPosition:v33];
      }
      else
      {
        char v15 = 0;
      }

LABEL_49:
      self->m_autoDeleteShiftCharacter = 0;
      id v41 = [(_UIKeyboardStateManager *)self inputSystemSourceSession];
      id v42 = [v41 documentState];
      id v43 = [v42 documentState];
      char v44 = [v43 contextBeforeInput];

      uint64_t v69 = 0;
      id v70 = &v69;
      uint64_t v71 = 0x2020000000;
      int v72 = 0;
      uint64_t v45 = [v44 length];
      v64[0] = MEMORY[0x1E4F143A8];
      v64[1] = 3221225472;
      v65[0] = __93___UIKeyboardStateManager_performAutoDeleteNumberOfTimes_deleteOneWord_forwardToInputSource___block_invoke;
      v65[1] = &unk_1E52E3F50;
      id v67 = &v73;
      BOOL v68 = &v69;
      id v46 = v44;
      id v66 = v46;
      objc_msgSend(v46, "enumerateSubstringsInRange:options:usingBlock:", 0, v45, 258, v64);
      *((_DWORD *)v74 + 6) += *((_DWORD *)v70 + 6);

      _Block_object_dispose(&v69, 8);
      char v13 = 0;
      int v16 = 0;
      if (!v15) {
        goto LABEL_9;
      }
LABEL_10:
      if (![(_UIKeyboardStateManager *)self shouldShowLongPredictionList]
        && [(_UIKeyboardStateManager *)self usesCandidateSelection]
        && ([(_UIKeyboardStateManager *)self inputManagerState],
            double v17 = objc_claimAutoreleasedReturnValue(),
            uint64_t v18 = [v17 inputCount],
            v17,
            v18))
      {
        if (v16)
        {
          id v19 = [NSString _stringWithUnichar:self->m_autoDeleteShiftCharacter];
        }
        else
        {
          char v34 = [(_UIKeyboardStateManager *)self inputDelegateManager];
          id v19 = [v34 textInRange:v15];
        }
        unint64_t v35 = [v19 length];
        if (v35 <= 1) {
          unint64_t v36 = 1;
        }
        else {
          unint64_t v36 = v35;
        }
        uint64_t v37 = [(_UIKeyboardStateManager *)self inputManagerState];
        unint64_t v38 = [v37 inputCount];

        if (v36 >= v38) {
          int v39 = v38;
        }
        else {
          int v39 = v36;
        }
        if (v56)
        {
          v62[0] = MEMORY[0x1E4F143A8];
          v62[1] = 3221225472;
          v63[0] = __93___UIKeyboardStateManager_performAutoDeleteNumberOfTimes_deleteOneWord_forwardToInputSource___block_invoke_3;
          v63[1] = &unk_1E52E3F78;
          v63[2] = &v73;
          [(_UIKeyboardStateManager *)self performKeyboardOutputOnInputSourceSession:v62];
        }
        if (v39 >= 1)
        {
          do
          {
            if (qword_1EB25FB00 != -1) {
              dispatch_once(&qword_1EB25FB00, &__block_literal_global_1347);
            }
            uint64_t v40 = [(_UIKeyboardStateManager *)self taskQueue];
            v61[0] = MEMORY[0x1E4F143A8];
            v61[1] = 3221225472;
            v61[2] = __93___UIKeyboardStateManager_performAutoDeleteNumberOfTimes_deleteOneWord_forwardToInputSource___block_invoke_6;
            v61[3] = &unk_1E52E34C8;
            v61[4] = self;
            [v40 performSingleTask:v61 breadcrumb:qword_1EB25FAF8];

            --v39;
          }
          while (v39);
        }
      }
      else
      {
        if ((v16 & 1) == 0)
        {
          self->m_textInputChangesIgnored = 1;
          uint64_t v20 = [(_UIKeyboardStateManager *)self inputDelegateManager];
          [v20 setSelectedTextRange:v15];

          [(_UIKeyboardStateManager *)self syncDocumentStateToInputDelegate];
          self->m_textInputChangesIgnored = 0;
        }
        if (v56)
        {
          CGRect v21 = [(_UIKeyboardStateManager *)self inputDelegateManager];
          int v22 = [v21 hasAsyncCapableInputDelegate];

          id v23 = &__block_literal_global_1351;
          if (((v16 | v22) & 1) == 0)
          {
            int v24 = [(_UIKeyboardStateManager *)self textLengthToDeleteBeforeSelectedRangeForSmartDelete];
            *((_DWORD *)v74 + 6) += v24;
            id v23 = v59;
            v59[0] = MEMORY[0x1E4F143A8];
            v59[1] = 3221225472;
            v60[0] = __93___UIKeyboardStateManager_performAutoDeleteNumberOfTimes_deleteOneWord_forwardToInputSource___block_invoke_7;
            v60[1] = &unk_1E52E3F78;
            v60[2] = &v73;
          }
          [(_UIKeyboardStateManager *)self performKeyboardOutputOnInputSourceSession:v23];
        }
        if ((v13 & 1) == 0) {
          [(_UIKeyboardStateManager *)self deleteBackward];
        }
        [(_UIKeyboardStateManager *)self syncInputManagerToKeyboardState];
        if (+[UIKeyboard isKeyboardProcess])
        {
          [(_UIKeyboardStateManager *)self changingContextWithTrigger:@"rapidDeletion"];
          [(_UIKeyboardStateManager *)self removeAutocorrectPromptAndCandidateList];
        }
      }
      _Block_object_dispose(&v73, 8);

      if (++v6 == a3) {
        goto LABEL_51;
      }
    }
    id v30 = 0;
LABEL_30:
    char v15 = 0;
    goto LABEL_49;
  }
LABEL_51:
  if (+[UITextSelectionDisplayInteraction isTextAccelerationUIEnabled])
  {
    uint64_t v47 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    uint64_t v48 = [v47 selectedTextRange];

    if (v48)
    {
      BOOL v49 = [(_UIKeyboardStateManager *)self _textChoicesAssistant];
      id v50 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      id v51 = [v50 selectedTextRange];
      uint64_t v52 = [v51 start];
      [v49 updateUnderlinesIfNeededAfterPosition:v52];
    }
  }
}

- (void)deleteFromInputWithFlags:(unint64_t)a3 executionContext:(id)a4
{
  id v6 = a4;
  [(_UIKeyboardStateManager *)self setPreviousInputString:0];
  if ((a3 & 0x80) != 0)
  {
    [(_UIKeyboardStateManager *)self flushTouchEventWaitingForKeyInputEventIfNecessary];
    if (![(_UIKeyboardStateManager *)self callShouldDeleteWithWordCountForRapidDelete:2 characterCountForRapidDelete:3])
    {
LABEL_25:
      [v6 returnExecutionToParent];
      goto LABEL_26;
    }
    id v9 = objc_alloc_init(MEMORY[0x1E4FAE370]);
    [v9 setDeletionCount:1];
    [v9 setProducedByDeleteInput:1];
    [(_UIKeyboardStateManager *)self performKeyboardOutput:v9];
    [(_UIKeyboardStateManager *)self updateReturnKey];
    [(_UIKeyboardStateManager *)self updateNoContentViews];
LABEL_24:

    goto LABEL_25;
  }
  if ((a3 & 0x400) == 0
    && ![(_UIKeyboardStateManager *)self callShouldDeleteWithWordCountForRapidDelete:2 characterCountForRapidDelete:3])
  {
    [(_UIKeyboardStateManager *)self flushTouchEventWaitingForKeyInputEventIfNecessary];
    self->m_needsOneShotGenerateCandidatesAfterStoppingAutoDelete = 1;
    if (qword_1EB25FB10 != -1) {
      dispatch_once(&qword_1EB25FB10, &__block_literal_global_1356);
    }
    id v9 = [(_UIKeyboardStateManager *)self taskQueue];
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3221225472;
    v17[2] = __69___UIKeyboardStateManager_deleteFromInputWithFlags_executionContext___block_invoke_3;
    v17[3] = &unk_1E52E34C8;
    void v17[4] = self;
    [v9 addTask:v17 breadcrumb:qword_1EB25FB08];
    goto LABEL_24;
  }
  [(_UIKeyboardStateManager *)self updateChangeTimeAndIncrementCount];
  [(_UIKeyboardStateManager *)self clearTransientState];
  if ((a3 & 0x200) != 0 || self->m_autoDeleteOK)
  {
    if ((a3 & 0x200) != 0 || self->m_autoDeleteCount < 0x14)
    {
      uint64_t v11 = 0;
      uint64_t v10 = 1;
    }
    else
    {
      if ([(_UIKeyboardStateManager *)self usesAutoDeleteWord]) {
        uint64_t v10 = 2;
      }
      else {
        uint64_t v10 = 3;
      }
      [(_UIKeyboardStateManager *)self setLastDeletionCountForFastDelete:v10];
      uint64_t v11 = 1;
    }
    id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    [WeakRetained playDeleteKeyFeedbackIfNecessaryRepeat:1 rapid:v11];

    char v13 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    int v14 = [v13 forwardingInputDelegate];
    BOOL v15 = v14 == 0;

    [(_UIKeyboardStateManager *)self performAutoDeleteNumberOfTimes:v10 deleteOneWord:(a3 >> 9) & 1 forwardToInputSource:v15];
    self->m_doubleSpacePeriodWasAppliedInCurrentContext = 0;
    self->m_didAutomaticallyInsertSpace = 0;
    [(_UIKeyboardStateManager *)self setShiftOffIfNeeded];
    [(_UIKeyboardStateManager *)self completeDeleteFromInput];
    goto LABEL_25;
  }
  if ([(_UIKeyboardStateManager *)self userSelectedCurrentCandidate])
  {
    [(UIKeyboardCandidateList *)self->m_candidateList showCandidateAtIndex:0x7FFFFFFFFFFFFFFFLL];
    [(_UIKeyboardStateManager *)self setUserSelectedCurrentCandidate:0];
  }
  if (self->m_acceptingCandidate)
  {
    id v7 = [(_UIKeyboardStateManager *)self inputManager];
    [v7 lastAcceptedCandidateCorrected];
  }
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  v16[2] = __69___UIKeyboardStateManager_deleteFromInputWithFlags_executionContext___block_invoke_8;
  v16[3] = &unk_1E52E34C8;
  v16[4] = self;
  uint64_t v8 = [v6 childWithContinuation:v16];

  [(_UIKeyboardStateManager *)self deleteOnceFromInputWithExecutionContext:v8];
  id v6 = (id)v8;
LABEL_26:
}

- (void)completeDeleteFromInput
{
  uint64_t v3 = [(_UIKeyboardStateManager *)self documentState];
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __50___UIKeyboardStateManager_completeDeleteFromInput__block_invoke;
  v6[3] = &unk_1E52E3DC0;
  v6[4] = self;
  id v4 = [v3 inputStringWithTerminatorPredicate:v6];

  if (![v4 length])
  {
    [(_UIKeyboardStateManager *)self setInitialDirection];
    id v5 = [(_UIKeyboardStateManager *)self _textChoicesAssistant];
    [v5 clearSecureCandidateHashes];
  }
  [(_UIKeyboardStateManager *)self setChangedDelegate];
}

- (void)willReplaceTextInRangedSelectionWithKeyboardInput
{
  uint64_t v3 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  id v11 = [v3 selectedTextRange];

  id v4 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  int v5 = [v4 selectionIsWord];

  if (v5)
  {
    id v6 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    id v7 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    uint64_t v8 = [v7 selectedTextRange];
    id v9 = [v6 textInRange:v8];

    if ([v9 length])
    {
      uint64_t v10 = [(_UIKeyboardStateManager *)self inputManager];
      [v10 setOriginalInput:v9];
    }
  }
  [(_UIKeyboardStateManager *)self removeTextChoicePrompt];
  if (([v11 isEmpty] & 1) == 0) {
    [(_UIKeyboardStateManager *)self removeTextChoiceUnderlinesInRange:v11];
  }
}

- (id)_acquireWaitingOnPerformAutocorrect
{
  id v2 = self;
  objc_sync_enter(v2);
  uint64_t v3 = _Block_copy(v2->_waitingOnPerformAutocorrect);
  id waitingOnPerformAutocorrect = v2->_waitingOnPerformAutocorrect;
  v2->_id waitingOnPerformAutocorrect = 0;

  int v5 = _Block_copy(v3);
  objc_sync_exit(v2);

  return v5;
}

- (void)_setWaitingOnPerformAutocorrect:(id)a3
{
  id v7 = a3;
  id v4 = self;
  objc_sync_enter(v4);
  uint64_t v5 = [v7 copy];
  id waitingOnPerformAutocorrect = v4->_waitingOnPerformAutocorrect;
  v4->_id waitingOnPerformAutocorrect = (id)v5;

  objc_sync_exit(v4);
}

- (BOOL)_shouldAcceptAutocorrectionOnSelectionChange
{
  if (self->m_skipAcceptAutocorrection) {
    return 0;
  }
  id v4 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  uint64_t v5 = [v4 delegateRespectingForwardingDelegate:0];

  if ((objc_opt_respondsToSelector() & 1) != 0 && ![v5 _shouldAcceptAutocorrection])
  {
    BOOL v2 = 0;
  }
  else
  {
    id v6 = [(_UIKeyboardStateManager *)self autocorrectionController];
    if ([v6 requestedAutocorrection])
    {
      BOOL v2 = [(_UIKeyboardStateManager *)self _hasMarkedText];
    }
    else
    {
      id v7 = [(_UIKeyboardStateManager *)self autocorrectionController];
      uint64_t v8 = [v7 autocorrection];
      if (v8) {
        BOOL v2 = 1;
      }
      else {
        BOOL v2 = [(_UIKeyboardStateManager *)self _hasMarkedText];
      }
    }
  }

  return v2;
}

- (void)acceptAutocorrectionWithCompletionHandler:(id)a3
{
}

- (void)acceptInlineCompletionWithCompletionHandler:(id)a3
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = _UIKeyboardLog();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    uint64_t v10 = "-[_UIKeyboardStateManager acceptInlineCompletionWithCompletionHandler:]";
    _os_log_impl(&dword_1853B0000, v5, OS_LOG_TYPE_DEFAULT, "%s Initiating accept inline completion", buf, 0xCu);
  }

  [(_UIKeyboardStateManager *)self beginAcceptingInlineCompletionByDirectTap];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __71___UIKeyboardStateManager_acceptInlineCompletionWithCompletionHandler___block_invoke;
  v7[3] = &unk_1E52E45A0;
  v7[4] = self;
  id v8 = v4;
  id v6 = v4;
  [(_UIKeyboardStateManager *)self acceptAutocorrectionWithCompletionHandler:v7];
}

- (void)beginAcceptingInlineCompletionByDirectTap
{
  if (+[UIKeyboard usesInputSystemUI])
  {
    id v3 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
    [v3 forwardInputDestinationEventToUIHost:sel_beginAcceptingInlineCompletionByDirectTap];
  }
  else
  {
    id v3 = [(_UIKeyboardStateManager *)self inlineTextCompletionController];
    [v3 setCurrentlyAcceptingInlineCompletionByDirectTap:1];
  }
}

- (void)endAcceptingInlineCompletionByDirectTap
{
  if (+[UIKeyboard usesInputSystemUI])
  {
    id v3 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
    [v3 forwardInputDestinationEventToUIHost:sel_endAcceptingInlineCompletionByDirectTap];
  }
  else
  {
    id v3 = [(_UIKeyboardStateManager *)self inlineTextCompletionController];
    [v3 setCurrentlyAcceptingInlineCompletionByDirectTap:0];
  }
}

- (void)acceptAutocorrectionWithCompletionHandler:(id)a3 requestedByRemoteInputDestination:(BOOL)a4
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  if (+[UIKeyboard usesInputSystemUI])
  {
    uint64_t v25 = 0;
    uint64_t v26 = &v25;
    uint64_t v27 = 0x2020000000;
    char v28 = 1;
    id v8 = _UIKeyboardLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      id v30 = "-[_UIKeyboardStateManager acceptAutocorrectionWithCompletionHandler:requestedByRemoteInputDestination:]";
      _os_log_impl(&dword_1853B0000, v8, OS_LOG_TYPE_DEFAULT, "%s Forwarding to keyboard UI host", buf, 0xCu);
    }

    id v9 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = __103___UIKeyboardStateManager_acceptAutocorrectionWithCompletionHandler_requestedByRemoteInputDestination___block_invoke;
    v21[3] = &unk_1E52E3FA0;
    id v10 = v7;
    v21[4] = self;
    id v22 = v10;
    id v23 = &v25;
    SEL v24 = a2;
    [v9 forwardSelectorToUIHost:sel_acceptAutocorrectionWithCompletionHandler_requestedByRemoteInputDestination_ completionHandler:v21];

    if (!v10)
    {
      uint64_t v11 = [MEMORY[0x1E4F28B50] mainBundle];
      char v12 = [v11 bundleIdentifier];
      char v13 = [v12 hasPrefix:@"com.apple."];

      if ((v13 & 1) == 0)
      {
        if (*((unsigned char *)v26 + 24))
        {
          uint64_t v14 = *MEMORY[0x1E4F1C3A0];
          do
          {
            BOOL v15 = [MEMORY[0x1E4F1CAC0] currentRunLoop];
            int v16 = [MEMORY[0x1E4F1C9C8] distantFuture];
            [v15 runMode:v14 beforeDate:v16];
          }
          while (*((unsigned char *)v26 + 24));
        }
      }
    }

    _Block_object_dispose(&v25, 8);
  }
  else
  {
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __103___UIKeyboardStateManager_acceptAutocorrectionWithCompletionHandler_requestedByRemoteInputDestination___block_invoke_3;
    aBlock[3] = &unk_1E52E3538;
    void aBlock[4] = self;
    BOOL v20 = a4;
    id v19 = v7;
    double v17 = (void (**)(void))_Block_copy(aBlock);
    if (pthread_main_np() == 1) {
      v17[2](v17);
    }
    else {
      dispatch_async(MEMORY[0x1E4F14428], v17);
    }
  }
}

- (void)_local_acceptAutocorrection
{
  id v3 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  id v4 = [v3 privateInputDelegate];

  if (!v4 || [v4 isEditing])
  {
    uint64_t v5 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    int v6 = [v5 hasAsyncCapableInputDelegate];

    if (v6
      && ([(_UIKeyboardStateManager *)self taskQueue],
          id v7 = objc_claimAutoreleasedReturnValue(),
          char v8 = [v7 isMainThreadExecutingTask],
          v7,
          (v8 & 1) == 0))
    {
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 3221225472;
      aBlock[2] = __54___UIKeyboardStateManager__local_acceptAutocorrection__block_invoke;
      aBlock[3] = &unk_1E52E34C8;
      void aBlock[4] = self;
      char v12 = _Block_copy(aBlock);
      if (qword_1EB25FB30 != -1) {
        dispatch_once(&qword_1EB25FB30, &__block_literal_global_1380);
      }
      char v13 = [(_UIKeyboardStateManager *)self taskQueue];
      [v13 addTask:v12 breadcrumb:qword_1EB25FB28];
    }
    else if ([(_UIKeyboardStateManager *)self _hasMarkedText] {
           && ([(_UIKeyboardStateManager *)self inputDelegateManager],
    }
               id v9 = objc_claimAutoreleasedReturnValue(),
               [v9 keyInputDelegate],
               id v10 = objc_claimAutoreleasedReturnValue(),
               v10,
               v9,
               v10))
    {
      self->m_textInputChangesIgnored = 1;
      uint64_t v11 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      [v11 unmarkText];

      self->m_textInputChangesIgnored = 0;
    }
    else
    {
      [(_UIKeyboardStateManager *)self clearInput];
    }
  }
}

- (void)_acceptAutocorrection
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v4 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  uint64_t v5 = [v4 privateInputDelegate];

  if (!v5 || [v5 isEditing])
  {
    int v6 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    int v7 = [v6 hasAsyncCapableInputDelegate];

    if (v7)
    {
      char v8 = [(_UIKeyboardStateManager *)self taskQueue];
      char v9 = [v8 isMainThreadExecutingTask];

      if ((v9 & 1) == 0)
      {
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 3221225472;
        aBlock[2] = __48___UIKeyboardStateManager__acceptAutocorrection__block_invoke;
        aBlock[3] = &unk_1E52E34C8;
        void aBlock[4] = self;
        uint64_t v14 = _Block_copy(aBlock);
        if (qword_1EB25FB40 != -1) {
          dispatch_once(&qword_1EB25FB40, &__block_literal_global_1384);
        }
        uint64_t v26 = [(_UIKeyboardStateManager *)self taskQueue];
        [v26 addTask:v14 breadcrumb:qword_1EB25FB38];

        goto LABEL_37;
      }
    }
    id v10 = [(_UIKeyboardStateManager *)self autocorrectionController];
    int v11 = [v10 requestedAutocorrection];

    if (v11)
    {
      char v12 = _UIKeyboardImplLog();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315138;
        char v34 = "-[_UIKeyboardStateManager _acceptAutocorrection]";
        _os_log_debug_impl(&dword_1853B0000, v12, OS_LOG_TYPE_DEBUG, "Detected and avoided autocorrect deadlock in %s", buf, 0xCu);
      }
    }
    else
    {
      char v13 = [(_UIKeyboardStateManager *)self autocorrectionController];
      uint64_t v14 = [v13 autocorrection];

      if (v14)
      {
        int v15 = 0;
        goto LABEL_13;
      }
    }
    char v13 = [(_UIKeyboardStateManager *)self inlineTextCompletionController];
    if (([v13 currentlyAcceptingInlineCompletionByDirectTap] & 1) == 0)
    {

      uint64_t v14 = 0;
      goto LABEL_20;
    }
    uint64_t v14 = 0;
    int v15 = 1;
LABEL_13:
    int v16 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    BOOL v2 = [v16 keyInputDelegate];

    if (v15) {
    if (v2)
    }
    {
      [(_UIKeyboardStateManager *)self updateChangeTimeAndIncrementCount];
      double v17 = [(_UIKeyboardStateManager *)self inlineTextCompletionController];
      int v18 = [v17 currentlyAcceptingInlineCompletionByDirectTap];

      if (v18)
      {
        id v19 = [(_UIKeyboardStateManager *)self inlineTextCompletionController];
        [v19 acceptTextCompletionWithInteraction:2 wordTerminator:0];
LABEL_18:

        goto LABEL_35;
      }
      id v27 = [(_UIKeyboardStateManager *)self acceptAutocorrectionForWordTerminator:0];
LABEL_35:
      if (![(_UIKeyboardStateManager *)self usesCandidateSelection]) {
        [(_UIKeyboardStateManager *)self clearInput];
      }
LABEL_37:

      goto LABEL_38;
    }
LABEL_20:
    if (![(_UIKeyboardStateManager *)self currentKeyboardTraitsAllowCandidateBarWhileIgnoringHidePredictionTrait:1]|| ![(_UIKeyboardStateManager *)self usesCandidateSelection]|| [(_UIKeyboardStateManager *)self shouldShowLongPredictionList])
    {
      goto LABEL_35;
    }
    id v19 = [(_UIKeyboardStateManager *)self inputManagerState];
    uint64_t v20 = [v19 inputCount];
    if (!v20)
    {
      BOOL v2 = [(TIKeyboardCandidateResultSet *)self->m_candidateResultSet candidates];
      if (![v2 count])
      {

        goto LABEL_18;
      }
    }
    CGRect v21 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    id v22 = [v21 keyInputDelegate];

    if (!v20) {
    if (!v22)
    }
      goto LABEL_35;
    [(_UIKeyboardStateManager *)self updateChangeTimeAndIncrementCount];
    self->m_shouldSkipCandidateGeneration = 1;
    id v23 = [(_UIKeyboardStateManager *)self inputManagerState];
    if ([v23 acceptAutocorrectionCommitsInline])
    {
      char v24 = [(TIKeyboardState *)self->m_keyboardState userSelectedCurrentCandidate];

      if ((v24 & 1) == 0)
      {
        id v25 = [(_UIKeyboardStateManager *)self acceptInlineCandidate];
LABEL_41:
        id v29 = [(_UIKeyboardStateManager *)self inputManagerState];
        uint64_t v30 = [v29 inputCount];

        if (v30)
        {
          [(_UIKeyboardStateManager *)self cancelCandidateRequests];
          id v31 = [(_UIKeyboardStateManager *)self acceptCurrentCandidate];
        }
        self->m_shouldSkipCandidateGeneration = 0;
        goto LABEL_35;
      }
    }
    else
    {
    }
    id v28 = [(_UIKeyboardStateManager *)self acceptCurrentCandidate];
    goto LABEL_41;
  }
LABEL_38:
}

- (void)acceptAutocorrection
{
  if (+[UIKeyboard usesInputSystemUI]
    && ([(_UIKeyboardStateManager *)self remoteTextInputPartner],
        id v3 = objc_claimAutoreleasedReturnValue(),
        v3,
        v3))
  {
    objc_initWeak(&location, self);
    dispatch_time_t v4 = dispatch_time(0, 800000000);
    uint64_t v5 = dispatch_get_global_queue(25, 0);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __47___UIKeyboardStateManager_acceptAutocorrection__block_invoke;
    block[3] = &unk_1E52DC308;
    objc_copyWeak(&v16, &location);
    dispatch_after(v4, v5, block);

    if (qword_1EB25FB60 != -1) {
      dispatch_once(&qword_1EB25FB60, &__block_literal_global_1395);
    }
    int v6 = [(_UIKeyboardStateManager *)self taskQueue];
    uint64_t v9 = MEMORY[0x1E4F143A8];
    uint64_t v10 = 3221225472;
    int v11 = __47___UIKeyboardStateManager_acceptAutocorrection__block_invoke_6;
    char v12 = &unk_1E52E3FF0;
    objc_copyWeak(&v14, &location);
    char v13 = self;
    [v6 performSingleTask:&v9 breadcrumb:qword_1EB25FB58];

    objc_destroyWeak(&v14);
    int v7 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
    char v8 = [v7 pendingOutputOperation];
    [(_UIKeyboardStateManager *)self performKeyboardOutput:v8 checkingDelegate:1 forwardToRemoteInputSource:0];

    objc_destroyWeak(&v16);
    objc_destroyWeak(&location);
  }
  else
  {
    [(_UIKeyboardStateManager *)self _acceptAutocorrection];
  }
}

- (void)removeAutocorrection
{
  [(_UIKeyboardStateManager *)self removeAutocorrectPrompt];
  [(_UIKeyboardStateManager *)self setAutocorrection:0];
}

- (void)insertTextSuggestionCandidate:(id)a3
{
  id v17 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  uint64_t v5 = [WeakRetained candidateController];
  [v5 clearCurrentCandidate];

  if (+[UIKeyboard isKeyboardProcess]
    && ([(_UIKeyboardStateManager *)self inputSystemSourceSession],
        (uint64_t v6 = objc_claimAutoreleasedReturnValue()) != 0))
  {
    int v7 = (void *)v6;
    char v8 = [v17 textSuggestion];
    uint64_t v9 = [v7 textOperations];
    [v9 setCustomInfo:v8];

    uint64_t v10 = [v7 textOperations];
    [v10 setCustomInfoType:0x1ED14BB00];

    [v7 flushOperations];
  }
  else
  {
    int v7 = [v17 textSuggestion];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      [v7 performActionWihSender:self];
    }
    else
    {
      int v11 = [(_UIKeyboardStateManager *)self autocorrectionController];
      [v11 setTextSuggestionList:0];

      char v12 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      char v13 = [v12 insertTextSuggestion:v7];

      if ((v13 & 1) == 0)
      {
        if (objc_opt_class(), (objc_opt_isKindOfClass())
          && ![(_UIKeyboardStateManager *)self insertAutoFillTextSuggestion:v7]
          || !-[_UIKeyboardStateManager acceptWord:firstDelete:](self, "acceptWord:firstDelete:", v17, [v17 deleteCount]))
        {
          id v14 = [(_UIKeyboardStateManager *)self inputDelegateManager];
          int v15 = [v14 textInputDelegate];
          id v16 = [v7 inputText];
          [(_UIKeyboardStateManager *)self replaceAllTextInResponder:v15 withText:v16];
        }
      }
    }
    self->int m_predictionType = 0;
  }
}

- (id)emojiCandidate:(id)a3
{
  id v3 = a3;
  dispatch_time_t v4 = +[UIKeyboardEmojiPreferences sharedInstance];
  uint64_t v5 = [v3 candidate];
  uint64_t v6 = +[UIKeyboardInputModeController sharedInputModeController];
  int v7 = [v6 currentInputMode];
  char v8 = [v7 primaryLanguage];
  uint64_t v9 = [v4 typingNameForEmoji:v5 language:v8];

  uint64_t v10 = [v3 candidate];
  int v11 = [v3 input];
  LODWORD(v6) = [v10 isEqualToString:v11];

  if (v6)
  {
    char v12 = (void *)MEMORY[0x1E4FAE318];
    char v13 = [v3 input];
    [v12 candidateWithCandidate:v9 forInput:v13];
    id v14 = v3;
    id v3 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    char v13 = [v3 input];
    if ([v13 _containsEmoji])
    {
      int v15 = +[UIKeyboardEmojiPreferences sharedInstance];
      id v16 = +[UIKeyboardInputModeController sharedInputModeController];
      id v17 = [v16 currentInputMode];
      int v18 = [v17 primaryLanguage];
      uint64_t v19 = [v15 typingNameForEmoji:v13 language:v18];

      char v13 = (void *)v19;
    }
    id v14 = +[UIKeyboardEmojiPreferences sharedInstance];
    uint64_t v20 = [v3 candidate];
    CGRect v21 = +[UIKeyboardInputModeController sharedInputModeController];
    id v22 = [v21 currentInputMode];
    id v23 = [v22 primaryLanguage];
    [v14 emojiPredicted:v20 typingName:v13 language:v23];
  }
  return v3;
}

- (void)_acceptSupplementalCandidate:(id)a3 completion:(id)a4
{
  v30[1] = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  uint64_t v24 = MEMORY[0x1E4F143A8];
  uint64_t v25 = 3221225472;
  uint64_t v26 = __67___UIKeyboardStateManager__acceptSupplementalCandidate_completion___block_invoke;
  id v27 = &unk_1E52E4040;
  id v28 = self;
  id v8 = v7;
  id v29 = v8;
  uint64_t v9 = (uint64_t (**)(void *, void *, id, void *))_Block_copy(&v24);
  uint64_t v10 = objc_msgSend(v6, "ui_supplementalItems", v24, v25, v26, v27, v28);
  int v11 = [v6 input];
  char v12 = [(_UIKeyboardStateManager *)self _rangeForSupplementalItemText:v11];

  char v13 = [_UIStringAndPositionPair alloc];
  id v14 = [v6 input];
  int v15 = [v12 start];
  id v16 = -[_UIStringAndPositionPair initWithString:position:]((id *)&v13->super.isa, v14, v15);

  id v17 = [(_UIKeyboardStateManager *)self pendingSupplementalCandidateToInsert];
  int v18 = [(_UIKeyboardStateManager *)self inputDelegate];
  BOOL v19 = -[_UIStringAndPositionPair isEqualToPair:inputDelegate:]((uint64_t)v17, v16, v18);

  if (!v19)
  {
    [(_UIKeyboardStateManager *)self setPendingSupplementalCandidateToInsert:v16];
    if ([v10 count] == 1 || (v9[2](v9, v10, v6, v12) & 1) == 0)
    {
      [(_UIKeyboardStateManager *)self setPendingSupplementalCandidateToInsert:0];
      uint64_t v20 = NSNumber;
      CGRect v21 = [v10 objectAtIndexedSubscript:0];
      id v22 = objc_msgSend(v20, "numberWithUnsignedLongLong:", objc_msgSend(v21[1], "identifier"));
      v30[0] = v22;
      id v23 = [MEMORY[0x1E4F1C978] arrayWithObjects:v30 count:1];
      [v6 setSupplementalItemIdentifiers:v23];

      (*((void (**)(id, id))v8 + 2))(v8, v6);
    }
  }
}

- (void)acceptPredictiveInput:(id)a3
{
}

- (void)acceptPredictiveInput:(id)a3 appendSeparator:(BOOL)a4
{
  id v6 = a3;
  if (v6)
  {
    id v7 = v6;
    id v8 = [(_UIKeyboardStateManager *)self inlineTextCompletionController];
    [v8 willAcceptPredictiveInput:v7];

    [(_UIKeyboardStateManager *)self acceptingCandidateWithTrigger:*MEMORY[0x1E4FAE568]];
    int64_t m_cachedAutofillMode = self->m_cachedAutofillMode;
    if (m_cachedAutofillMode == 2)
    {
      +[_UIKeyboardUsageTracking signupPasswordFromAutofillIncrement];
    }
    else if (m_cachedAutofillMode == 1)
    {
      +[_UIKeyboardUsageTracking loginPasswordFromAutofillIncrement];
    }
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      [(_UIKeyboardStateManager *)self insertTextSuggestionCandidate:v7];
    }
    else
    {
      if (_os_feature_enabled_impl() && ([v7 candidateProperty] & 0x10) != 0)
      {
        CGRect v21 = +[UIKeyboardImpl activeInstance];
        id v22 = [v21 textInputTraits];
        id v15 = [v22 inputContextHistory];

        if (+[_UISmartReplyFeedbackManager candidateIsSmartReply:v7])
        {
          id v23 = [(_UIKeyboardStateManager *)self smartReplyFeedbackManager];
          uint64_t v24 = [v7 label];
          uint64_t v25 = [(TIKeyboardState *)self->m_keyboardState inputContextHistory];
          uint64_t v26 = [v25 threadIdentifier];
          [v23 userSelectedSmartReply:v24 isLongForm:1 withMailOrMsgThreadId:v26];
        }
        id v16 = [(_UIKeyboardStateManager *)self inputDelegateManager];
        id v27 = [v16 textInputDelegate];
        id v28 = [v7 candidate];
        id v29 = [v15 tiInputContextHistory];
        [v27 _startWritingToolsWithTool:@"WTUIRequestedToolSmartReply" prompt:0 entryPoint:v28 inputContextHistory:v29 sender:self];
      }
      else
      {
        if ((objc_opt_respondsToSelector() & 1) == 0
          || ([v7 candidateProperty] & 0x10) == 0
          || ([(_UIKeyboardStateManager *)self backendController],
              uint64_t v10 = objc_claimAutoreleasedReturnValue(),
              char v11 = objc_opt_respondsToSelector(),
              v10,
              (v11 & 1) == 0))
        {
          objc_initWeak(&location, self);
          aBlock[0] = MEMORY[0x1E4F143A8];
          aBlock[1] = 3221225472;
          aBlock[2] = __65___UIKeyboardStateManager_acceptPredictiveInput_appendSeparator___block_invoke_5;
          aBlock[3] = &unk_1E52E40E0;
          objc_copyWeak(&v31, &location);
          BOOL v32 = a4;
          id v17 = (void (**)(void *, id))_Block_copy(aBlock);
          if ([v7 isSupplementalItemCandidate])
          {
            [(_UIKeyboardStateManager *)self _acceptSupplementalCandidate:v7 completion:v17];
          }
          else
          {
            int v18 = [v7 candidate];
            int v19 = [v18 _containsEmoji];

            if (v19)
            {
              uint64_t v20 = [(_UIKeyboardStateManager *)self emojiCandidate:v7];

              id v7 = (id)v20;
            }
            v17[2](v17, v7);
          }

          objc_destroyWeak(&v31);
          objc_destroyWeak(&location);
          goto LABEL_26;
        }
        +[UIKeyboardImpl sendPerformanceNotification:@"UIKeyboardPerformanceSearchCandidatesStartNotification"];
        [(_UIKeyboardStateManager *)self refreshKeyboardState];
        char v12 = (void *)[(TIKeyboardState *)self->m_keyboardState copy];
        char v13 = [MEMORY[0x1E4FAE288] tokenForKeyboardState:v12];
        [(_UIKeyboardStateManager *)self setCurrentCandidateRequest:v13];
        objc_initWeak(&location, self);
        if (qword_1EB25FB80 != -1) {
          dispatch_once(&qword_1EB25FB80, &__block_literal_global_1419);
        }
        id v14 = [(_UIKeyboardStateManager *)self taskQueue];
        v33[0] = MEMORY[0x1E4F143A8];
        v33[1] = 3221225472;
        v33[2] = __65___UIKeyboardStateManager_acceptPredictiveInput_appendSeparator___block_invoke_3;
        v33[3] = &unk_1E52E4090;
        objc_copyWeak(&v37, &location);
        id v7 = v7;
        id v34 = v7;
        id v15 = v12;
        id v35 = v15;
        id v16 = v13;
        id v36 = v16;
        [v14 addTask:v33 breadcrumb:qword_1EB25FB78];

        objc_destroyWeak(&v37);
        objc_destroyWeak(&location);
      }
    }
LABEL_26:
  }
}

- (void)rejectAutocorrection:(id)a3
{
  id v4 = a3;
  if (v4)
  {
    if (qword_1EB25FBA0 != -1) {
      dispatch_once(&qword_1EB25FBA0, &__block_literal_global_1428);
    }
    uint64_t v5 = [(_UIKeyboardStateManager *)self taskQueue];
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = __48___UIKeyboardStateManager_rejectAutocorrection___block_invoke_3;
    v6[3] = &unk_1E52E3628;
    v6[4] = self;
    id v7 = v4;
    [v5 addTask:v6 breadcrumb:qword_1EB25FB98];
  }
}

- (BOOL)insertsSpaceAfterPredictiveInput
{
  BOOL v2 = [(_UIKeyboardStateManager *)self inputManagerState];
  char v3 = [v2 insertsSpaceAfterPredictiveInput];

  return v3;
}

- (void)textAccepted:(id)a3
{
  id v4 = a3;
  if ((objc_opt_respondsToSelector() & 1) != 0 && ([v4 candidateProperty] & 4) != 0)
  {
    id v6 = (void *)MEMORY[0x1E4FAE318];
    id v7 = [v4 candidate];
    id v8 = [v4 input];
    objc_msgSend(v6, "candidateWithCandidate:forInput:property:", v7, v8, objc_msgSend(v4, "candidateProperty"));
    id v5 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v5 = v4;
  }
  uint64_t v9 = +[UIKeyboardInputModeController sharedInputModeController];
  uint64_t v10 = [v9 currentInputMode];

  if (qword_1EB25FBB0 != -1) {
    dispatch_once(&qword_1EB25FBB0, &__block_literal_global_1432);
  }
  char v11 = [(_UIKeyboardStateManager *)self taskQueue];
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = __40___UIKeyboardStateManager_textAccepted___block_invoke_3;
  v15[3] = &unk_1E52E3678;
  id v16 = v10;
  id v17 = self;
  id v18 = v5;
  uint64_t v12 = qword_1EB25FBA8;
  id v13 = v5;
  id v14 = v10;
  [v11 addTask:v15 breadcrumb:v12];
}

- (void)textAccepted:(id)a3 executionContext:(id)a4
{
  id v6 = a4;
  id v7 = a3;
  id v8 = [(_UIKeyboardStateManager *)self inputManager];
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  void v10[2] = __57___UIKeyboardStateManager_textAccepted_executionContext___block_invoke;
  v10[3] = &unk_1E52E38F0;
  id v11 = v6;
  uint64_t v12 = self;
  id v9 = v6;
  [v8 textAccepted:v7 completionHandler:v10];
}

- (BOOL)shouldForwardInsertSpaceAfterAcceptingPredictiveInput:(id)a3
{
  return [a3 shouldInsertSpaceAfterSelection];
}

- (BOOL)acceptAutofillExtraCandidateIfNeeded:(id)a3
{
  id v4 = a3;
  unint64_t v5 = [v4 customInfoType];
  if ((v5 & 0x20) != 0)
  {
    if (+[UIKeyboard isKeyboardProcess])
    {
      v8[0] = MEMORY[0x1E4F143A8];
      v8[1] = 3221225472;
      v8[2] = __64___UIKeyboardStateManager_acceptAutofillExtraCandidateIfNeeded___block_invoke;
      v8[3] = &unk_1E52E3A28;
      id v9 = v4;
      [(_UIKeyboardStateManager *)self performKeyboardOutputOnInputSourceSession:v8];
    }
    else
    {
      UIKeyboardSafariPresentCredentialPickerForType(1);
      +[_UIKeyboardUsageTracking appAutofillExtraKeyTapped];
    }
  }

  return (v5 >> 5) & 1;
}

- (void)acceptPredictiveInput:(id)a3 executionContext:(id)a4
{
}

- (void)acceptPredictiveInput:(id)a3 appendSeparator:(BOOL)a4 executionContext:(id)a5
{
  id v8 = a3;
  id v9 = a5;
  if ([(_UIKeyboardStateManager *)self acceptAutofillExtraCandidateIfNeeded:v8])
  {
    goto LABEL_5;
  }
  if (([v8 customInfoType] & 0x8000) == 0)
  {
    uint64_t v10 = [v8 handler];

    if (v10)
    {
      id v11 = [v8 handler];
      v11[2]();

LABEL_5:
      [v9 returnExecutionToParent];
      goto LABEL_9;
    }
    if (_os_feature_enabled_impl()
      && (objc_opt_respondsToSelector() & 1) != 0
      && [v8 isHideMyEmailType])
    {
      [(_UIKeyboardStateManager *)self proceedShouldReturnIfNeededForASP];
    }
    if (a4)
    {
      if ([(_UIKeyboardStateManager *)self insertsSpaceAfterPredictiveInput]
        || ([v8 isContinuousPathConversion] & 1) == 0)
      {
        [(_UIKeyboardStateManager *)self shouldForwardInsertSpaceAfterAcceptingPredictiveInput:v8];
        goto LABEL_22;
      }
      char v17 = [v8 shouldAccept];
      BOOL v18 = [(_UIKeyboardStateManager *)self shouldForwardInsertSpaceAfterAcceptingPredictiveInput:v8];
      if ((v17 & 1) == 0)
      {
LABEL_22:
        id v23 = UICellAccessoryConfiguration;
        uint64_t v24 = +[UIKBAnalyticsDispatcher sharedInstance];
        uint64_t v25 = [v24 nextCandidateReplacementSource];

        if (v25 == 7)
        {
          if ([v8 isToucanInlineCompletionCandidate])
          {
LABEL_27:
            id v29 = [(_UIKeyboardStateManager *)self inputManagerState];
            uint64_t v30 = [v29 wordSeparator];

            int v31 = [v8 isAutofillCandidate];
            if ([(_UIKeyboardStateManager *)self textInputTraitsNeedContactAutoFill])
            {
              BOOL v32 = [(_UIKeyboardStateManager *)self autocorrectionController];
              uint64_t v33 = [v32 autocorrectionList];
              int v34 = [v33 containsProactiveTriggers];
            }
            else
            {
              int v34 = 0;
            }
            if ([v8 isSlottedCandidate])
            {
              id v35 = [(UITextInputTraits *)self->m_traits textContentType];
              if (v35)
              {
                id v36 = [(UITextInputTraits *)self->m_traits textContentType];
                int v37 = [v36 isEqualToString:&stru_1ED0E84C0] ^ 1;
              }
              else
              {
                int v37 = 0;
              }
            }
            else
            {
              int v37 = 0;
            }
            if (v30)
            {
              unint64_t v38 = [v8 candidate];
              int v39 = [v38 hasSuffix:v30];
            }
            else
            {
              int v39 = 1;
            }
            uint64_t v40 = [(_UIKeyboardStateManager *)self inputDelegate];
            if (v40)
            {
              id v41 = (void *)v40;
              char v55 = v30;
              id v42 = [(_UIKeyboardStateManager *)self inputDelegateManager];
              [v42 selectedTextRange];
              v44 = int v43 = v34;
              int v45 = [v44 isEmpty] ^ 1 | v31 | v43 | v37 | v39;

              if (v45 == 1)
              {

                uint64_t v30 = &stru_1ED0E84C0;
                id v23 = UICellAccessoryConfiguration;
              }
              else
              {
                id v23 = UICellAccessoryConfiguration;
                uint64_t v30 = v55;
              }
            }
            id v46 = [(_UIKeyboardStateManager *)self inputEventForInputString:v30];
            [v46 setAcceptedCandidate:v8];
            [v46 setSynthesizedByAcceptingCandidate:1];
            if (v31)
            {
              uint64_t v47 = [MEMORY[0x1E4FAE278] listWithCorrections:0 predictions:0];
              uint64_t v48 = [(_UIKeyboardStateManager *)self autocorrectionController];
              [v48 setAutocorrectionList:v47];
            }
            else
            {
              uint64_t v47 = (void *)[objc_alloc(MEMORY[0x1E4FAE2A0]) initWithAutocorrection:v8 alternateCorrections:0];
              uint64_t v48 = [MEMORY[0x1E4FAE278] listWithCorrections:v47 predictions:0];
              BOOL v49 = [(_UIKeyboardStateManager *)self autocorrectionController];
              [v49 setAutocorrectionList:v48];
            }
            [(_UIKeyboardStateManager *)self setPreviousInputString:0];
            self->m_doubleSpacePeriodWasAppliedInCurrentContext = 0;
            id v50 = [v8 candidate];
            [(_UIKeyboardStateManager *)self removeSpaceAfterEmojiForInputString:v50];

            id v51 = [v8 candidate];
            int v52 = [v51 _containsEmojiOnly];

            if (v52) {
              [&v23[33] emojiInsertedByMethod:@"Touch" inputType:@"PredictionBar"];
            }
            self->m_didAutomaticallyInsertSpace = 0;
            v59[0] = MEMORY[0x1E4F143A8];
            v59[1] = 3221225472;
            void v59[2] = __82___UIKeyboardStateManager_acceptPredictiveInput_appendSeparator_executionContext___block_invoke;
            v59[3] = &unk_1E52E3678;
            v59[4] = self;
            uint64_t v60 = v30;
            id v61 = v8;
            BOOL v53 = v30;
            uint64_t v54 = [v9 childWithContinuation:v59];
            [(_UIKeyboardStateManager *)self addInputEvent:v46 executionContext:v54];

            goto LABEL_9;
          }
          uint64_t v26 = +[UIKBAnalyticsDispatcher sharedInstance];
          id v27 = v26;
          uint64_t v28 = 4;
        }
        else
        {
          uint64_t v26 = +[UIKBAnalyticsDispatcher sharedInstance];
          id v27 = v26;
          uint64_t v28 = 5;
        }
        [v26 setNextCandidateReplacementSource:v28];

        goto LABEL_27;
      }
    }
    else
    {
      BOOL v18 = [(_UIKeyboardStateManager *)self shouldForwardInsertSpaceAfterAcceptingPredictiveInput:v8];
    }
    BOOL v19 = v18;
    uint64_t v20 = +[UIKBAnalyticsDispatcher sharedInstance];
    [v20 setNextCandidateReplacementSource:2];

    v56[0] = MEMORY[0x1E4F143A8];
    v56[1] = 3221225472;
    v56[2] = __82___UIKeyboardStateManager_acceptPredictiveInput_appendSeparator_executionContext___block_invoke_2;
    void v56[3] = &unk_1E52E3560;
    v56[4] = self;
    id v21 = v8;
    id v57 = v21;
    BOOL v58 = v19;
    id v22 = [v9 childWithContinuation:v56];
    [(_UIKeyboardStateManager *)self acceptAutocorrection:v21 executionContextPassingTIKeyboardCandidate:v22];

    goto LABEL_9;
  }
  uint64_t v12 = [(_UIKeyboardStateManager *)self delegateAsResponder];
  id v13 = [v12 _responderForEditing];

  if (objc_opt_respondsToSelector())
  {
    id v14 = [(_UIKeyboardStateManager *)self autocorrectionController];
    id v15 = [v14 autocorrectionList];

    self->m_skipAcceptAutocorrection = 1;
    [v13 performSelector:sel__showTextFormattingAnimationOptions_ withObject:0];
    self->m_skipAcceptAutocorrection = 0;
    id v16 = [(_UIKeyboardStateManager *)self autocorrectionController];
    [v16 setAutocorrectionList:v15];
  }
  [v9 returnExecutionToParent];

LABEL_9:
}

- (void)acceptCandidate:(id)a3
{
}

- (void)acceptCandidate:(id)a3 forInput:(id)a4
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  if (![(_UIKeyboardStateManager *)self committingCandidate])
  {
    int v8 = 1;
    [(_UIKeyboardStateManager *)self setCommittingCandidate:1];
    [(_UIKeyboardStateManager *)self updateChangeTimeAndIncrementCount];
    m_candidateResultSet = self->m_candidateResultSet;
    uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    if (m_candidateResultSet)
    {
      id v11 = [(TIKeyboardCandidateResultSet *)m_candidateResultSet candidates];
      uint64_t v12 = [v11 indexOfObject:v6];

      if (v12 != 0x7FFFFFFFFFFFFFFFLL)
      {
        [(UIKeyboardCandidateList *)self->m_candidateList candidateAcceptedAtIndex:v12];
        int v8 = 0;
        uint64_t v10 = v12;
      }
    }
    if (+[UITextSelectionDisplayInteraction isTextAccelerationUIEnabled])
    {
      if ([(_UIKeyboardStateManager *)self shouldUnderlineCandidate:v6])
      {
        id v13 = [(_UIKeyboardStateManager *)self autocorrectionController];
        id v14 = [v13 storedListForCandidate:v6];

        id v15 = [(_UIKeyboardStateManager *)self _textChoicesAssistant];
        [v15 addList:v14 forCandidate:v6];

        id v16 = [v6 candidate];
        +[UITextChecker setString:v16 isExemptFromChecker:1];
LABEL_8:

        goto LABEL_12;
      }
      if (+[UIKeyboard usesInputSystemUI])
      {
        if (([v6 isAutocorrection] & 1) == 0)
        {
          char v17 = [v6 candidate];
          BOOL v18 = [v6 input];
          char v19 = [v17 isEqualToString:v18];

          if ((v19 & 1) == 0)
          {
            id v67 = [v6 input];
            id v14 = [(_UIKeyboardStateManager *)self _rangeForAutocorrectionText:v67];

            BOOL v68 = [v6 candidate];
            uint64_t v69 = [v68 length];
            id v70 = [v6 input];
            uint64_t v71 = v69 - [v70 length];

            id v16 = [(_UIKeyboardStateManager *)self _textChoicesAssistant];
            int v72 = [v14 start];
            [v16 adjustRangesAfterPosition:v72 byOffset:v71];

            goto LABEL_8;
          }
        }
      }
    }
LABEL_12:
    if (v6)
    {
      uint64_t v20 = [(UIKeyboardCandidateList *)self->m_candidateList currentCandidate];
      int v21 = [(id)objc_opt_class() type];

      if (v21 != 3)
      {
        id v22 = UIKeyboardGetCurrentInputMode();
        id v23 = UIKeyboardInputModeGetIdentifierWithKeyboardLayouts(v22);
        uint64_t v24 = [(UIKeyboardCandidateList *)self->m_candidateList statisticsIdentifier];
        uint64_t v25 = TIStatisticGetKeyForCandidateAccepted();
        TIStatisticScalarIncrement();

        if (v8)
        {
          uint64_t v26 = [(TIKeyboardCandidateResultSet *)self->m_candidateResultSet candidates];
          v82[0] = MEMORY[0x1E4F143A8];
          v82[1] = 3221225472;
          v82[2] = __52___UIKeyboardStateManager_acceptCandidate_forInput___block_invoke;
          v82[3] = &unk_1E52E4130;
          id v83 = v6;
          uint64_t v10 = [v26 indexOfObjectPassingTest:v82];
        }
        if (self->m_hasEditedMarkedTextInExtendedView)
        {
          id v27 = TIStatisticGetKeyForCandidateAccepted();
          TIStatisticScalarIncrement();
        }
        uint64_t v28 = TIStatisticGetKeyForCandidateAccepted();
        id v29 = [v6 candidate];
        [v29 length];
        TIStatisticDistributionPushValue();

        if ([v6 isExtensionCandidate])
        {
          uint64_t v30 = TIStatisticGetKeyForCandidateAccepted();
          TIStatisticScalarIncrement();
        }
        if ([v6 isCompletionCandidate])
        {
          int v31 = TIStatisticGetKeyForCandidateAccepted();
          TIStatisticScalarIncrement();
        }
        if ([v6 isInlineCompletionCandidate])
        {
          BOOL v32 = TIStatisticGetKeyForCandidateAccepted();
          TIStatisticScalarIncrement();
        }
        if ([v6 isForShortcutConversion])
        {
          uint64_t v33 = TIStatisticGetKeyForCandidateAccepted();
          TIStatisticScalarIncrement();
        }
        if ([v6 isEmojiCandidate])
        {
          int v34 = TIStatisticGetKeyForCandidateAccepted();
          TIStatisticScalarIncrement();
        }
        if ([v6 isStickerCandidate])
        {
          id v35 = TIStatisticGetKeyForCandidateAccepted();
          TIStatisticScalarIncrement();
        }
        if ([v6 isFacemarkCandidate])
        {
          id v36 = TIStatisticGetKeyForCandidateAccepted();
          TIStatisticScalarIncrement();
        }
        if ([v6 isOTAWordListCandidate])
        {
          int v37 = TIStatisticGetKeyForCandidateAccepted();
          TIStatisticScalarIncrement();
        }
        if ([v6 isRegionalCandidate])
        {
          unint64_t v38 = TIStatisticGetKeyForCandidateAccepted();
          TIStatisticScalarIncrement();
        }
        if (([v6 isCompletionCandidate] & 1) == 0 && !v10)
        {
          int v39 = TIStatisticGetKeyForCandidateAccepted();
          TIStatisticScalarIncrement();
        }
        if ([v6 isFullwidthCandidate])
        {
          uint64_t v40 = TIStatisticGetKeyForCandidateAccepted();
          TIStatisticScalarIncrement();
        }
        if ([v6 isPunctuationKeyCandidate])
        {
          id v41 = TIStatisticGetKeyForCandidateAccepted();
          TIStatisticScalarIncrement();
        }
        if ([v6 isPunctuationCompletionCandidate])
        {
          id v42 = TIStatisticGetKeyForCandidateAccepted();
          TIStatisticScalarIncrement();
        }
        if (v10 != 0x7FFFFFFFFFFFFFFFLL)
        {
          int v43 = TIStatisticGetKeyForCandidateAccepted();
          TIStatisticDistributionPushValue();

          if ((objc_opt_respondsToSelector() & 1) != 0
            && [(UIKeyboardCandidateList *)self->m_candidateList rowForCandidateAtIndex:v10] != 0x7FFFFFFFFFFFFFFFLL)
          {
            char v44 = TIStatisticGetKeyForCandidateAccepted();
            TIStatisticDistributionPushValue();
          }
          int v76 = v8;
          if ((objc_opt_respondsToSelector() & 1) != 0
            && [(UIKeyboardCandidateList *)self->m_candidateList viewOffsetForCandidateAtIndex:v10] != 0x7FFFFFFFFFFFFFFFLL)
          {
            int v45 = TIStatisticGetKeyForCandidateAccepted();
            TIStatisticDistributionPushValue();
          }
          uint64_t v73 = v24;
          id v74 = v23;
          uint64_t v75 = v22;
          id v77 = v7;
          int v46 = [v6 isOTAWordListCandidate];
          int v47 = [v6 isRegionalCandidate];
          long long v78 = 0u;
          long long v79 = 0u;
          long long v80 = 0u;
          long long v81 = 0u;
          uint64_t v48 = [(TIKeyboardCandidateResultSet *)self->m_candidateResultSet candidates];
          uint64_t v49 = [v48 countByEnumeratingWithState:&v78 objects:v84 count:16];
          if (v49)
          {
            uint64_t v50 = v49;
            uint64_t v51 = 0;
            uint64_t v52 = *(void *)v79;
            do
            {
              for (uint64_t i = 0; i != v50; ++i)
              {
                if (*(void *)v79 != v52) {
                  objc_enumerationMutation(v48);
                }
                uint64_t v54 = *(void **)(*((void *)&v78 + 1) + 8 * i);
                if (v46)
                {
                  int v46 = 1;
                  if ((v47 & 1) == 0) {
                    goto LABEL_59;
                  }
                }
                else
                {
                  int v46 = [*(id *)(*((void *)&v78 + 1) + 8 * i) isOTAWordListCandidate];
                  if ((v47 & 1) == 0)
                  {
LABEL_59:
                    int v47 = [v54 isRegionalCandidate];
                    goto LABEL_62;
                  }
                }
                int v47 = 1;
LABEL_62:
                if (v51 + i == 9) {
                  goto LABEL_65;
                }
              }
              uint64_t v50 = [v48 countByEnumeratingWithState:&v78 objects:v84 count:16];
              v51 += i;
            }
            while (v50);
          }
LABEL_65:

          uint64_t v24 = v73;
          id v23 = v74;
          if (v46)
          {
            char v55 = TIStatisticGetKeyForCandidateAccepted();
            TIStatisticScalarIncrement();
          }
          id v7 = v77;
          int v8 = v76;
          id v22 = v75;
          if (v47)
          {
            BOOL v56 = TIStatisticGetKeyForCandidateAccepted();
            TIStatisticScalarIncrement();
          }
        }
      }
      id v57 = (void *)[v6 copy];

      self->m_acceptingCandidate = 1;
      if (!v8
        || ([v57 candidate],
            BOOL v58 = objc_claimAutoreleasedReturnValue(),
            uint64_t v59 = [v58 length],
            v58,
            v59))
      {
        uint64_t v60 = [v57 candidate];
        [(_UIKeyboardStateManager *)self setPreviousInputString:v60];
      }
      id v61 = [(_UIKeyboardStateManager *)self inputManagerState];
      if ([v61 commitsAcceptedCandidate])
      {

LABEL_77:
        id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
        [WeakRetained setSuppressUpdateCandidateView:1];

        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          [(_UIKeyboardStateManager *)self insertTextSuggestionCandidate:v57];
        }
        else {
          -[_UIKeyboardStateManager acceptWord:firstDelete:forInput:](self, "acceptWord:firstDelete:forInput:", v57, [v57 deleteCount], v7);
        }
        id v65 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
        [v65 setSuppressUpdateCandidateView:0];

LABEL_81:
        if ([(UIKeyboardCandidateList *)self->m_candidateList isFloatingList]
          && ([(UIKeyboardCandidateList *)self->m_candidateList isExtendedList] & 1) != 0)
        {
          uint64_t v66 = 0;
        }
        else if ([(UIKeyboardCandidateList *)self->m_candidateList isFloatingList])
        {
          uint64_t v66 = 1;
        }
        else
        {
          uint64_t v66 = [(UIKeyboardCandidateList *)self->m_candidateList isExtendedList] ^ 1;
        }
        [(_UIKeyboardStateManager *)self clearInputWithCandidatesCleared:v66];
        goto LABEL_88;
      }
      id v62 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      int v63 = [v62 keyboardLayoutIsInAnotherProcess];

      if (v63) {
        goto LABEL_77;
      }
      [(TIKeyboardState *)self->m_keyboardState setUserSelectedCurrentCandidate:0];
      self->m_doubleSpacePeriodWasAppliedInCurrentContext = 0;
      if ([(id)objc_opt_class() type] != 3)
      {
        [(_UIKeyboardStateManager *)self handleDeletionForCandidate:v57];
        goto LABEL_81;
      }
    }
    else
    {
      id v57 = 0;
    }
LABEL_88:
    [(_UIKeyboardStateManager *)self setCommittingCandidate:0];
    id v6 = v57;
  }
}

- (void)handleDeletionForCandidate:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [v4 deleteCount];
  id v6 = [v4 candidate];

  if (v5)
  {
    id v7 = [(_UIKeyboardStateManager *)self inputDelegate];

    if (v7)
    {
      int v8 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      int v9 = objc_msgSend(v8, "callShouldReplaceExtendedRange:withText:includeMarkedText:", v5, v6, -[_UIKeyboardStateManager _hasMarkedText](self, "_hasMarkedText"));

      if (v9)
      {
        v10[0] = MEMORY[0x1E4F143A8];
        v10[1] = 3221225472;
        void v10[2] = __54___UIKeyboardStateManager_handleDeletionForCandidate___block_invoke;
        v10[3] = &__block_descriptor_40_e26_v16__0__TIKeyboardOutput_8l;
        void v10[4] = v5;
        [(_UIKeyboardStateManager *)self performKeyboardOutputOnInputSourceSession:v10];
        [(_UIKeyboardStateManager *)self deleteBackwardAndNotifyAtEnd:0 deletionCount:v5 reinsertTextInLoop:0];
        [(_UIKeyboardStateManager *)self setChangedDelegate];
      }
    }
  }
}

- (void)acceptHandwritingCandidate
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  id v4 = [WeakRetained layout];
  int v5 = [v4 isHandwritingPlane];

  if (v5) {
    id v6 = [(_UIKeyboardStateManager *)self acceptCurrentCandidate];
  }
}

- (id)acceptCurrentCandidate
{
  return [(_UIKeyboardStateManager *)self acceptCurrentCandidateForInput:0];
}

- (id)acceptInlineCandidate
{
  return [(_UIKeyboardStateManager *)self acceptInlineCandidateForInput:0];
}

- (id)acceptCurrentCandidateForInput:(id)a3
{
  id v4 = a3;
  int v5 = [(UIKeyboardCandidateList *)self->m_candidateList currentCandidate];
  id v6 = v5;
  if (v5)
  {
    id v7 = v5;
  }
  else
  {
    id v7 = [(TIKeyboardCandidateResultSet *)self->m_candidateResultSet defaultCandidate];
  }
  int v8 = v7;

  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    [(_UIKeyboardStateManager *)self insertTextSuggestionCandidate:v8];
    id v9 = v8;
  }
  else
  {
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __58___UIKeyboardStateManager_acceptCurrentCandidateForInput___block_invoke;
    aBlock[3] = &unk_1E52E4178;
    void aBlock[4] = self;
    uint64_t v10 = _Block_copy(aBlock);
    if ([v8 isSupplementalItemCandidate])
    {
      v14[0] = MEMORY[0x1E4F143A8];
      v14[1] = 3221225472;
      v14[2] = __58___UIKeyboardStateManager_acceptCurrentCandidateForInput___block_invoke_5;
      v14[3] = &unk_1E52E41A0;
      id v16 = v10;
      id v15 = v4;
      [(_UIKeyboardStateManager *)self _acceptSupplementalCandidate:v8 completion:v14];
      id v11 = v8;
    }
    else
    {
      if (([v8 customInfoType] & 0x20) != 0) {
        [(_UIKeyboardStateManager *)self acceptAutofillExtraCandidateIfNeeded:v8];
      }
      (*((void (**)(void *, void *, id))v10 + 2))(v10, v8, v4);
      id v12 = v8;
    }
  }
  return v8;
}

- (id)acceptInlineCandidateForInput:(id)a3
{
  id v4 = a3;
  int v5 = [(TIKeyboardCandidateResultSet *)self->m_candidateResultSet defaultCandidate];
  if (qword_1EB25FBE0 != -1) {
    dispatch_once(&qword_1EB25FBE0, &__block_literal_global_1462);
  }
  id v6 = [(_UIKeyboardStateManager *)self taskQueue];
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  void v11[2] = __57___UIKeyboardStateManager_acceptInlineCandidateForInput___block_invoke_3;
  void v11[3] = &unk_1E52E3678;
  void v11[4] = self;
  id v7 = v5;
  id v12 = v7;
  id v13 = v4;
  uint64_t v8 = qword_1EB25FBD8;
  id v9 = v4;
  [v6 performSingleTask:v11 breadcrumb:v8];

  return v7;
}

- (void)acceptCandidate:(id)a3 forInput:(id)a4 executionContext:(id)a5
{
  id v8 = a3;
  id v9 = a5;
  [(_UIKeyboardStateManager *)self acceptCandidate:v8 forInput:a4];
  [(_UIKeyboardStateManager *)self flushKeyboardOutputOnInputSourceSession];
  if ([(_UIKeyboardStateManager *)self usesAutocorrectionLists])
  {
    [v9 returnExecutionToParent];
  }
  else
  {
    uint64_t v12 = MEMORY[0x1E4F143A8];
    uint64_t v13 = 3221225472;
    id v14 = __69___UIKeyboardStateManager_acceptCandidate_forInput_executionContext___block_invoke;
    id v15 = &unk_1E52E3628;
    id v16 = self;
    id v10 = v8;
    id v17 = v10;
    id v11 = [v9 childWithContinuation:&v12];

    -[_UIKeyboardStateManager handleAcceptedCandidate:executionContext:](self, "handleAcceptedCandidate:executionContext:", v10, v11, v12, v13, v14, v15, v16);
  }
}

- (void)acceptFirstCandidate
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  char v3 = [(TIKeyboardCandidateResultSet *)self->m_candidateResultSet candidates];
  uint64_t v4 = [v3 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v20;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v20 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v19 + 1) + 8 * i);
        id v9 = [MEMORY[0x1E4F1CA98] null];

        if (v8 != v9)
        {
          if ([v8 isSupplementalItemCandidate]) {
            id v10 = 0;
          }
          else {
            id v10 = v8;
          }
          if ([v8 supplementalItemPrefix])
          {
            id v11 = [v8 supplementalItemIdentifiers];
            uint64_t v12 = [v11 count];

            if (v12 == 1)
            {
              id v13 = v8;

              id v10 = v13;
            }
          }
          if ([(_UIKeyboardStateManager *)self liveConversionEnabled]
            && ([v8 isInlineCandidate] & 1) == 0)
          {
          }
          else if (v10)
          {

            goto LABEL_21;
          }
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v5);
  }

  id v10 = [(TIKeyboardCandidateResultSet *)self->m_candidateResultSet defaultCandidate];
  if (v10)
  {
LABEL_21:
    if (qword_1EB25FBF0 != -1) {
      dispatch_once(&qword_1EB25FBF0, &__block_literal_global_1466);
    }
    id v14 = [(_UIKeyboardStateManager *)self taskQueue];
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3221225472;
    v17[2] = __47___UIKeyboardStateManager_acceptFirstCandidate__block_invoke_3;
    v17[3] = &unk_1E52E3628;
    void v17[4] = self;
    id v18 = v10;
    uint64_t v15 = qword_1EB25FBE8;
    id v16 = v10;
    [v14 performTask:v17 breadcrumb:v15];
  }
}

- (BOOL)userSelectedCurrentCandidate
{
  return [(TIKeyboardState *)self->m_keyboardState userSelectedCurrentCandidate];
}

- (void)setUserSelectedCurrentCandidate:(BOOL)a3
{
}

- (void)acceptCurrentCandidateIfSelected
{
  if ([(_UIKeyboardStateManager *)self userSelectedCurrentCandidate])
  {
    id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    char v4 = [WeakRetained geometryIsChanging];

    if ((v4 & 1) == 0)
    {
      if (qword_1EB25FC00 != -1) {
        dispatch_once(&qword_1EB25FC00, &__block_literal_global_1470);
      }
      uint64_t v5 = [(_UIKeyboardStateManager *)self taskQueue];
      v6[0] = MEMORY[0x1E4F143A8];
      v6[1] = 3221225472;
      v6[2] = __59___UIKeyboardStateManager_acceptCurrentCandidateIfSelected__block_invoke_3;
      v6[3] = &unk_1E52E34C8;
      v6[4] = self;
      [v5 performSingleTask:v6 breadcrumb:qword_1EB25FBF8];
    }
  }
}

- (void)acceptCurrentCandidateIfSelectedWithExecutionContext:(id)a3
{
  id v4 = a3;
  if ([(_UIKeyboardStateManager *)self userSelectedCurrentCandidate])
  {
    uint64_t v5 = [(UIKeyboardCandidateList *)self->m_candidateList currentCandidate];
    [(_UIKeyboardStateManager *)self acceptCandidate:v5];
    [(_UIKeyboardStateManager *)self flushKeyboardOutputOnInputSourceSession];
    uint64_t v8 = MEMORY[0x1E4F143A8];
    uint64_t v9 = 3221225472;
    id v10 = __80___UIKeyboardStateManager_acceptCurrentCandidateIfSelectedWithExecutionContext___block_invoke;
    id v11 = &unk_1E52E3628;
    uint64_t v12 = self;
    id v13 = v5;
    id v6 = v5;
    id v7 = [v4 childWithContinuation:&v8];
    -[_UIKeyboardStateManager handleAcceptedCandidate:executionContext:](self, "handleAcceptedCandidate:executionContext:", v6, v7, v8, v9, v10, v11, v12);
  }
  else
  {
    [v4 returnExecutionToParent];
  }
}

- (void)completeAcceptCandidate:(id)a3
{
  uint64_t v5 = [(_UIKeyboardStateManager *)self inputManagerState];
  uint64_t v6 = [v5 inputCount];

  if (v6)
  {
    [(_UIKeyboardStateManager *)self completeAddInputString:0];
    if (!a3) {
      return;
    }
  }
  else if (!self->m_shouldSkipCandidateGeneration {
         && (BOOL v7 = [(_UIKeyboardStateManager *)self suppliesCompletions], a3)
  }
         && v7)
  {
    [(_UIKeyboardStateManager *)self generateCandidatesWithOptions:2];
    [(_UIKeyboardStateManager *)self updateCandidateDisplay];
    [(_UIKeyboardStateManager *)self updateReturnKey];
  }
  else
  {
    [(_UIKeyboardStateManager *)self updateReturnKey];
    if (!a3) {
      return;
    }
  }
  [(_UIKeyboardStateManager *)self _postInputResponderCapabilitiesChangedNotificationWithOutput:0 selectionChanged:0];
}

- (void)candidateListAcceptCandidate:(id)a3
{
  id v4 = (UIKeyboardCandidateList *)a3;
  [(_UIKeyboardStateManager *)self acceptingCandidateWithTrigger:*MEMORY[0x1E4FAE568]];
  if (self->m_candidateList == v4)
  {
    uint64_t v5 = [(UIKeyboardCandidateList *)v4 currentCandidate];
    int v6 = [(id)objc_opt_class() type];

    if (v6 != 3) {
      [(_UIKeyboardStateManager *)self trackUsageForCandidateAcceptedAction:*MEMORY[0x1E4FAEB78]];
    }
    if ([(_UIKeyboardStateManager *)self usesCandidateSelection]
      && ![(_UIKeyboardStateManager *)self shouldShowLongPredictionList])
    {
      id v8 = [(_UIKeyboardStateManager *)self acceptCurrentCandidate];
    }
    else
    {
      if (qword_1EB25FC10 != -1) {
        dispatch_once(&qword_1EB25FC10, &__block_literal_global_1474);
      }
      BOOL v7 = [(_UIKeyboardStateManager *)self taskQueue];
      v9[0] = MEMORY[0x1E4F143A8];
      v9[1] = 3221225472;
      v9[2] = __56___UIKeyboardStateManager_candidateListAcceptCandidate___block_invoke_3;
      v9[3] = &unk_1E52E34C8;
      void v9[4] = self;
      [v7 performTask:v9 breadcrumb:qword_1EB25FC08];
    }
  }
}

- (void)candidateListSelectionDidChange:(id)a3
{
  uint64_t v15 = (UIKeyboardCandidateList *)a3;
  uint64_t v4 = [(UIKeyboardCandidateList *)v15 currentIndex];
  if (v4 != [(TIKeyboardCandidateResultSet *)self->m_candidateResultSet initialSelectedIndex])
  {
    uint64_t v5 = [(UIKeyboardCandidateList *)v15 currentCandidate];
    if (v5)
    {
      int v6 = (void *)v5;
      BOOL v7 = [(UIKeyboardCandidateList *)v15 currentCandidate];
      int v8 = [(id)objc_opt_class() type];

      if (v8 != 3) {
        [(_UIKeyboardStateManager *)self setUserSelectedCurrentCandidate:1];
      }
    }
  }
  BOOL v9 = [(_UIKeyboardStateManager *)self committingCandidate];
  id v10 = v15;
  if (!v9 && self->m_candidateList == v15)
  {
    BOOL v11 = [(_UIKeyboardStateManager *)self usesAutocorrectionLists];
    id v10 = v15;
    if (!v11)
    {
      id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      id v13 = [WeakRetained layout];
      char v14 = [v13 hasActiveContinuousPathInput];

      id v10 = v15;
      if ((v14 & 1) == 0)
      {
        [(_UIKeyboardStateManager *)self syncInputManagerToKeyboardState];
        [(_UIKeyboardStateManager *)self updateKeyboardConfigurations];
        id v10 = v15;
      }
    }
  }
}

- (void)candidateListInvalidateSelection:(id)a3
{
}

- (void)clearInput
{
  BOOL v3 = ![(_UIKeyboardStateManager *)self usesAutocorrectionLists]
    && ![(_UIKeyboardStateManager *)self usesCandidateSelection]
    || !self->m_hasInputOnAcceptCandidate;
  [(_UIKeyboardStateManager *)self clearInputWithCandidatesCleared:v3];
}

- (void)clearInputWithCandidatesCleared:(BOOL)a3
{
  BOOL v3 = a3;
  [(_UIKeyboardStateManager *)self clearInputForMarkedText];
  if (v3)
  {
    if (!self->m_disableClearingTextSuggestions)
    {
      if (self->m_textInputUpdatingSelection) {
        int v5 = ![(_UIKeyboardStateManager *)self noContent];
      }
      else {
        LOBYTE(v5) = 1;
      }
      if ((v5 & self->m_shouldClearTextSuggestions) != 0)
      {
        char v14 = [(_UIKeyboardStateManager *)self autocorrectionController];
        [v14 clearAutofillAndTextSuggestions];
      }
    }
    if ([(_UIKeyboardStateManager *)self noContent])
    {
      [(_UIKeyboardStateManager *)self removeTextChoiceUnderlines];
      [(_UIKeyboardStateManager *)self removeTextChoicePrompt];
    }
    [(_UIKeyboardStateManager *)self setAutocorrection:0];
    [(_UIKeyboardStateManager *)self setCandidates:0];
    [(_UIKeyboardStateManager *)self updateCandidateDisplay];
    if (self->_isSettingExtensionInputMode) {
      self->_needsUpdateAssistantView = 1;
    }
    else {
      [(_UIKeyboardStateManager *)self updateAssistantView];
    }
    [(_UISmartReplyFeedbackManager *)self->_smartReplyFeedbackManager resetOnKeyboardCandidatesCleared];
  }
  else
  {
    id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    BOOL v7 = [WeakRetained candidateController];
    [v7 clearCurrentCandidate];

    int v8 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    BOOL v9 = [v8 selectedTextRange];

    if (v9)
    {
      id v10 = [(_UIKeyboardStateManager *)self _textChoicesAssistant];
      BOOL v11 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      uint64_t v12 = [v11 selectedTextRange];
      id v13 = [v12 start];
      [v10 clearUnderlinesIfNeededBeforePosition:v13];
    }
  }
  id v15 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  id v16 = [v15 layout];
  [v16 didClearInput];

  if (!self->m_hasInputOnAcceptCandidate)
  {
    id v18 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    id v17 = [v18 layout];
    [v17 restoreDefaultsForAllKeys];
  }
}

- (void)removeRecentInput:(id)a3 completionHandler:(id)a4
{
  id v16 = (void (**)(id, void *))a4;
  int v6 = (void *)MEMORY[0x1E4FAE3E8];
  m_keyboardState = self->m_keyboardState;
  id v8 = a3;
  BOOL v9 = [(TIKeyboardState *)m_keyboardState textInputTraits];
  id v10 = [v9 recentInputIdentifier];
  [v6 removeInput:v8 forSystemIdentifier:v10];

  BOOL v11 = (void *)MEMORY[0x1E4FAE3E8];
  uint64_t v12 = [(TIKeyboardState *)self->m_keyboardState textInputTraits];
  id v13 = [v12 recentInputIdentifier];
  char v14 = [v11 recentInputForIdentifier:v13];

  id v15 = +[UILexicon _lexiconWithTILexicon:v14];
  if (v16) {
    v16[2](v16, v15);
  }
}

- (void)acceptRecentInput:(id)a3
{
  id v4 = a3;
  if (qword_1EB25FC20 != -1) {
    dispatch_once(&qword_1EB25FC20, &__block_literal_global_1480);
  }
  int v5 = [(_UIKeyboardStateManager *)self taskQueue];
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = __45___UIKeyboardStateManager_acceptRecentInput___block_invoke_3;
  v8[3] = &unk_1E52E3628;
  void v8[4] = self;
  id v9 = v4;
  uint64_t v6 = qword_1EB25FC18;
  id v7 = v4;
  [v5 performTask:v8 breadcrumb:v6];
}

- (void)addInputObject:(id)a3
{
  id v5 = a3;
  uint64_t v6 = [(_UIKeyboardStateManager *)self taskQueue];
  int v7 = [v6 isMainThreadExecutingTask];

  if (v7)
  {
    BOOL v11 = [MEMORY[0x1E4F28B00] currentHandler];
    objc_msgSend(v11, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, @"_UIKeyboardStateManager.m", 14583, @"Received %s while performing another keyboard action.", "-[_UIKeyboardStateManager addInputObject:]");
  }
  if (qword_1EB25FC30 != -1) {
    dispatch_once(&qword_1EB25FC30, &__block_literal_global_1484);
  }
  id v8 = [(_UIKeyboardStateManager *)self taskQueue];
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __42___UIKeyboardStateManager_addInputObject___block_invoke_3;
  void v12[3] = &unk_1E52E3628;
  void v12[4] = self;
  id v13 = v5;
  uint64_t v9 = qword_1EB25FC28;
  id v10 = v5;
  [v8 addTask:v12 breadcrumb:v9];
}

- (void)addInputObject:(id)a3 executionContext:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  if ([(_UIKeyboardStateManager *)self isInHardwareKeyboardMode])
  {
    [(TIKeyboardState *)self->m_keyboardState setHardwareKeyboardMode:0];
    [(_UIKeyboardStateManager *)self syncInputManagerToKeyboardState];
    [(_UIKeyboardStateManager *)self removeCandidateList];
    if (qword_1EB25FC40 != -1) {
      dispatch_once(&qword_1EB25FC40, &__block_literal_global_1488);
    }
    id v8 = [(_UIKeyboardStateManager *)self taskQueue];
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    v16[2] = __59___UIKeyboardStateManager_addInputObject_executionContext___block_invoke_3;
    v16[3] = &unk_1E52E34C8;
    v16[4] = self;
    [v8 addTask:v16 breadcrumb:qword_1EB25FC38];
  }
  uint64_t v9 = +[UIKeyboardInputModeController sharedInputModeController];
  id v10 = +[UIKeyboardInputModeController sharedInputModeController];
  BOOL v11 = [v10 currentInputMode];
  [v9 updateLastUsedInputMode:v11];

  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = __59___UIKeyboardStateManager_addInputObject_executionContext___block_invoke_4;
  v14[3] = &unk_1E52E3628;
  void v14[4] = self;
  id v15 = v6;
  id v12 = v6;
  id v13 = [v7 childWithContinuation:v14];

  [(_UIKeyboardStateManager *)self acceptCurrentCandidateIfSelectedWithExecutionContext:v13];
}

- (void)completeAcceptCandidateBeforeAddingInputObject:(id)a3 executionContext:(id)a4
{
  id v6 = a4;
  id v7 = a3;
  [(_UIKeyboardStateManager *)self updateChangeTimeAndIncrementCount];
  [(_UIKeyboardStateManager *)self setPreviousInputString:&stru_1ED0E84C0];
  self->m_acceptingCandidate = 0;
  [(_UIKeyboardStateManager *)self clearTransientState];
  id v8 = objc_alloc_init(MEMORY[0x1E4FAE328]);
  [v8 setObject:v7];

  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  void v10[2] = __91___UIKeyboardStateManager_completeAcceptCandidateBeforeAddingInputObject_executionContext___block_invoke;
  v10[3] = &unk_1E52E34C8;
  void v10[4] = self;
  uint64_t v9 = [v6 childWithContinuation:v10];

  [(_UIKeyboardStateManager *)self handleKeyboardInput:v8 executionContext:v9];
}

- (BOOL)_isSelecting
{
  return self->m_selecting;
}

- (void)clearTransientState
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained clearTransientState];

  self->m_selecting = 0;
  *(_WORD *)&self->m_userChangedSelection = 0;
}

- (void)clearDelegate
{
  BOOL v3 = [(_UIKeyboardStateManager *)self inputDelegate];
  id v4 = [v3 inputDelegate];

  if (v4 == self)
  {
    id v5 = [(_UIKeyboardStateManager *)self inputDelegate];
    [v5 setInputDelegate:0];
  }
  id v6 = [(_UIKeyboardStateManager *)self asyncInputDelegate];

  if (v6)
  {
    id v7 = [(_UIKeyboardStateManager *)self asyncInputDelegate];
    id v8 = [v7 asyncSystemInputDelegate];

    if (v8 == self)
    {
      uint64_t v9 = [(_UIKeyboardStateManager *)self asyncInputDelegate];
      [v9 setAsyncSystemInputDelegate:0];
    }
  }
  id v10 = [(_UIKeyboardStateManager *)self webInputDelegate];

  if (v10)
  {
    BOOL v11 = [(_UIKeyboardStateManager *)self webInputDelegate];
    id v12 = [v11 asyncInputDelegate];

    if (v12 == self)
    {
      id v13 = [(_UIKeyboardStateManager *)self webInputDelegate];
      [v13 setAsyncInputDelegate:0];
    }
  }
  id v14 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  [v14 clearDelegate];
}

- (void)clearRemoteTextInputPartner
{
  if (+[UIKeyboard usesInputSystemUI])
  {
    [(UIKBRTIPartner *)self->_remoteTextInputPartner invalidate];
    [(UIKBRTIPartner *)self->_remoteTextInputPartner setPartnerDelegate:0];
    remoteTextInputPartner = self->_remoteTextInputPartner;
    self->_remoteTextInputPartner = 0;
  }
}

- (void)textInput:(id)a3 deferReplaceTextActionToSystem:(id)a4
{
}

- (void)deferReplaceTextActionToSystem:(id)a3
{
  id v6 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    id v5 = [MEMORY[0x1E4F28B00] currentHandler];
    [v5 handleFailureInMethod:a2 object:self file:@"_UIKeyboardStateManager.m" lineNumber:14691 description:@"Expected argument to be of class UITextReplacement"];
  }
  [(_UIKeyboardStateManager *)self replaceText:v6];
}

- (void)replaceText:(id)a3
{
  id v40 = a3;
  id v4 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  int v5 = [v4 hasAsyncCapableInputDelegate];

  id v6 = [(_UIKeyboardStateManager *)self inputDelegate];
  id v7 = v6;
  if (!v6 || v5)
  {
  }
  else
  {
    id v8 = [v40 originalText];
    uint64_t v9 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    id v10 = [v40 range];
    BOOL v11 = [v9 textInRange:v10];
    int v12 = [v8 isEqual:v11];

    if (!v12) {
      goto LABEL_25;
    }
  }
  id v13 = [(_UIKeyboardStateManager *)self inputDelegate];
  [(_UIKeyboardStateManager *)self textWillChange:v13];

  id v14 = [v40 range];
  id v15 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  [v15 setSelectedTextRange:v14];

  +[UITextChecker noteTextReplacement:v40];
  id v16 = [v40 replacementText];
  if ([v40 isDictationCommandReplacement]
    && [(_UIKeyboardStateManager *)self isSelectionAtSentenceAutoshiftBoundary:0])
  {
    uint64_t v17 = +[UIDictationUtilities capitalizeFirstWord:v16];

    id v16 = (void *)v17;
  }
  id v18 = (void *)MEMORY[0x1E4FAE318];
  long long v19 = [v40 originalText];
  long long v20 = [v18 candidateWithCandidate:v16 forInput:v19];

  long long v21 = [v20 candidate];
  int v22 = [v21 _containsEmojiOnly];

  if (v22)
  {
    uint64_t v23 = [(_UIKeyboardStateManager *)self emojiCandidate:v20];

    long long v20 = (void *)v23;
  }
  uint64_t v24 = 1;
  self->m_replacingWord = 1;
  [(_UIKeyboardStateManager *)self acceptWord:v20 firstDelete:0];
  [(_UIKeyboardStateManager *)self flushKeyboardOutputOnInputSourceSession];
  self->m_replacingWord = 0;
  self->m_suppressingDocumentAssertions = 1;
  uint64_t v25 = [(_UIKeyboardStateManager *)self inputDelegate];
  [(_UIKeyboardStateManager *)self textDidChange:v25];

  self->m_suppressingDocumentAssertions = 0;
  uint64_t v26 = [v16 lowercaseString];
  id v27 = [v40 originalText];
  uint64_t v28 = [v27 lowercaseString];
  char v29 = [v26 isEqualToString:v28];

  if ((v29 & 1) == 0)
  {
    uint64_t v30 = [v40 replacementText];
    double v31 = latinRatio(v30);

    BOOL v32 = [v40 originalText];
    double v33 = latinRatio(v32);

    if (v31 <= v33)
    {
      if (v33 <= v31) {
        uint64_t v24 = 0;
      }
      else {
        uint64_t v24 = 3;
      }
    }
    else
    {
      uint64_t v24 = 2;
    }
  }
  int v34 = +[UIKBAnalyticsDispatcher sharedInstance];
  uint64_t v35 = [v34 nextCandidateReplacementSource];

  if (v35 == 8)
  {
    id v36 = [v40 originalText];
    +[UIKBAnalyticsDispatcher didCandidateReplacementWithRemovedText:v36 insertedText:v16];
    goto LABEL_21;
  }
  if (!v35)
  {
    id v36 = +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate];
    int v37 = [v36 _textInputSessionAnalytics];
    [v37 didReplaceWithCandidate:v24];

LABEL_21:
  }
  if ([v40 usageTrackingMask])
  {
    unint64_t v38 = UIKeyboardGetCurrentInputMode();
    int v39 = UIKeyboardInputModeGetIdentifierWithKeyboardLayouts(v38);

    [v40 usageTrackingMask];
    TIStatisticScalarIncrementAutocorrectionKey();
  }
LABEL_25:
}

- (void)scheduleReplacementsWithOptions:(unint64_t)a3
{
  int v5 = [(_UIKeyboardStateManager *)self inputDelegate];
  id v11 = [v5 interactionAssistant];

  id v6 = v11;
  if (v11)
  {
    [v11 scheduleReplacementsWithOptions:a3];
  }
  else
  {
    if ((a3 & 0x20) == 0) {
      goto LABEL_6;
    }
    id v7 = [(_UIKeyboardStateManager *)self _textChoicesAssistant];
    id v8 = [(_UIKeyboardStateManager *)self inputDelegate];
    uint64_t v9 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    id v10 = [v9 selectedTextRange];
    [v7 showAutocorrectReplacementChoicesIfNeeded:v8 forRange:v10];
  }
  id v6 = v11;
LABEL_6:
}

- (BOOL)acceptWord:(id)a3 firstDelete:(unint64_t)a4
{
  return [(_UIKeyboardStateManager *)self acceptWord:a3 firstDelete:a4 forInput:0];
}

- (BOOL)acceptWord:(id)a3 firstDelete:(unint64_t)a4 forInput:(id)a5
{
  id v8 = a3;
  id v9 = a5;
  id v10 = v8;
  id v11 = [v10 candidate];
  int v12 = [v11 length];
  id v13 = [v10 input];
  id v14 = [(_UIKeyboardStateManager *)self inputManagerState];
  id v15 = [v14 inputString];

  if (!v13) {
    id v13 = v15;
  }
  id v57 = v15;
  unsigned int v16 = [v13 length];
  uint64_t v17 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  id v18 = [v17 forwardingInputDelegate];

  if (!v11)
  {
    BOOL v38 = 0;
    uint64_t v26 = v57;
    goto LABEL_57;
  }
  id v56 = v9;
  if (+[UIKeyboard usesInputSystemUI]
    && [(_UIKeyboardStateManager *)self isRTIClient])
  {
    uint64_t v19 = [(_UIKeyboardStateManager *)self performingRemoteTextOperations];
    if (!v12) {
      goto LABEL_23;
    }
  }
  else
  {
    long long v20 = [(TIKeyboardCandidateResultSet *)self->m_candidateResultSet candidates];
    uint64_t v19 = [v20 count];

    if (!v12) {
      goto LABEL_23;
    }
  }
  if ([(_UIKeyboardStateManager *)self usesCandidateSelection] && v19)
  {
    long long v21 = [(_UIKeyboardStateManager *)self inputDelegate];

    if (!v21
      || ([(_UIKeyboardStateManager *)self inputDelegateManager],
          int v22 = objc_claimAutoreleasedReturnValue(),
          int v23 = objc_msgSend(v22, "callShouldReplaceExtendedRange:withText:includeMarkedText:", a4, v11, -[_UIKeyboardStateManager _hasMarkedText](self, "_hasMarkedText")), v22, v23))
    {
      if (!v18)
      {
        v61[0] = MEMORY[0x1E4F143A8];
        v61[1] = 3221225472;
        v61[2] = __59___UIKeyboardStateManager_acceptWord_firstDelete_forInput___block_invoke;
        v61[3] = &unk_1E52E41C8;
        id v62 = v10;
        id v63 = v11;
        [(_UIKeyboardStateManager *)self performKeyboardOutputOnInputSourceSession:v61 shouldFlush:0];
      }
      if (a4 > v16)
      {
        if (v16)
        {
          self->m_textInputChangesIgnored = 1;
          uint64_t v24 = [(_UIKeyboardStateManager *)self inputDelegateManager];
          [v24 unmarkText];

          self->m_textInputChangesIgnored = 0;
          a4 -= v16;
        }
        [(_UIKeyboardStateManager *)self deleteBackwardAndNotifyAtEnd:0 deletionCount:a4 reinsertTextInLoop:0];
      }
      self->m_textInputChangesIgnored = 1;
      int v25 = [v10 isSupplementalItemCandidate];
      if (v25) {
        [(_UIKeyboardStateManager *)self _willReplaceText:v11 withSupplementalCandidate:v10];
      }
      uint64_t v26 = v57;
      if (self->m_replacingWord
        || ([v13 isEqualToString:@" "] & 1) == 0
        && (+[UIKeyboard isKeyboardProcess]
         || !_AXSExtendedKeyboardPredictionsEnabled()))
      {
        id v27 = [(_UIKeyboardStateManager *)self documentState];
        uint64_t v28 = objc_msgSend(v27, "documentStateAfterSettingMarkedText:selectedRange:", v11, objc_msgSend(v11, "length"), 0);
        [(_UIKeyboardStateManager *)self setDocumentState:v28];

        char v29 = [(_UIKeyboardStateManager *)self inputDelegateManager];
        objc_msgSend(v29, "_setMarkedText:selectedRange:", v11, objc_msgSend(v11, "length"), 0);

        uint64_t v30 = [(_UIKeyboardStateManager *)self inputDelegateManager];
        [v30 unmarkText];
      }
      else
      {
        [(_UIKeyboardStateManager *)self applyAutocorrection:v10];
      }
      id v9 = v56;
      if (!+[UIKeyboard isKeyboardProcess] && ((v25 ^ 1) & 1) == 0)
      {
        [(_UIKeyboardStateManager *)self _didReplaceText:v11 withSupplementalCandidate:v10];
        [(_UIKeyboardStateManager *)self _insertSupplementalCandidate:v10 overridingCandidateText:v11];
      }
      self->m_textInputChangesIgnored = 0;
      [(_UIKeyboardStateManager *)self removeAutocorrectPromptAndCandidateList];
      char v39 = 0;
      BOOL v38 = 1;
      goto LABEL_52;
    }
    goto LABEL_35;
  }
LABEL_23:
  if (!v16 || ([v11 isEqualToString:v13] & 1) == 0)
  {
    double v31 = [(_UIKeyboardStateManager *)self inputDelegate];

    if (!v31) {
      goto LABEL_30;
    }
    BOOL v32 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    double v33 = [v32 selectedTextRange];
    uint64_t v34 = [v33 isEmpty] ? v16 : 0;

    uint64_t v35 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    int v36 = [v35 callShouldReplaceExtendedRange:v34 withText:v11 includeMarkedText:0];

    if (v36)
    {
LABEL_30:
      if (!v18)
      {
        v58[0] = MEMORY[0x1E4F143A8];
        v58[1] = 3221225472;
        v58[2] = __59___UIKeyboardStateManager_acceptWord_firstDelete_forInput___block_invoke_2;
        v58[3] = &unk_1E52E41C8;
        id v59 = v10;
        id v60 = v11;
        [(_UIKeyboardStateManager *)self performKeyboardOutputOnInputSourceSession:v58 shouldFlush:0];
      }
      if (self->m_replacingWord)
      {
        int v37 = [(_UIKeyboardStateManager *)self inputDelegateManager];
        [v37 replaceRange:0 oldText:0 withText:v11 forReplaceAction:1];
        uint64_t v26 = v57;
      }
      else
      {
        id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
        int v37 = [WeakRetained autocorrectPrompt];

        if (v37)
        {
          [v37 frame];
          double v42 = v41;
          double v44 = v43;
          double v46 = v45;
          double v48 = v47;
        }
        else
        {
          double v42 = *MEMORY[0x1E4F1DB20];
          double v44 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
          double v46 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
          double v48 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
        }
        uint64_t v26 = v57;
        [(_UIKeyboardStateManager *)self applyAutocorrection:v10];
        [(_UIKeyboardStateManager *)self underlineCandidate:v10];
        uint64_t v49 = [v10 candidate];
        -[_UIKeyboardStateManager animateAutocorrectionToText:fromRect:](self, "animateAutocorrectionToText:fromRect:", v49, v42, v44, v46, v48);

        [(_UIKeyboardStateManager *)self setAutocorrection:0];
      }

      if ([(_UIKeyboardStateManager *)self isAutoFillMode])
      {
        uint64_t v50 = [(_UIKeyboardStateManager *)self inputDelegateManager];
        uint64_t v51 = [v50 keyInputDelegate];
        char v52 = objc_opt_respondsToSelector();

        if (v52)
        {
          BOOL v53 = [(_UIKeyboardStateManager *)self inputDelegateManager];
          uint64_t v54 = [v53 keyInputDelegate];
          [v54 acceptedAutoFillWord:v11];
        }
      }
      char v39 = 0;
      BOOL v38 = 1;
      id v9 = v56;
      goto LABEL_52;
    }
  }
LABEL_35:
  BOOL v38 = 0;
  char v39 = 1;
  id v9 = v56;
  uint64_t v26 = v57;
LABEL_52:
  if (![(UITextInputTraits *)self->m_traits isSecureTextEntry])
  {
    if (!v9)
    {
      [(_UIKeyboardStateManager *)self flushTouchEventWaitingForKeyInputEventIfNecessary];
      [(_UIKeyboardStateManager *)self textAccepted:v10];
      if (v39) {
        goto LABEL_57;
      }
      goto LABEL_56;
    }
    [v9 setAcceptedCandidate:v10];
  }
  if ((v39 & 1) == 0) {
LABEL_56:
  }
    [(_UIKeyboardStateManager *)self setChangedDelegate];
LABEL_57:

  return v38;
}

- (void)processPayloadInfo:(id)a3
{
  id v4 = a3;
  uint64_t v7 = MEMORY[0x1E4F143A8];
  uint64_t v8 = 3221225472;
  id v9 = __46___UIKeyboardStateManager_processPayloadInfo___block_invoke;
  id v10 = &unk_1E52D9F98;
  id v11 = self;
  id v12 = v4;
  id v5 = v4;
  id v6 = (void (**)(void))_Block_copy(&v7);
  if (pthread_main_np() == 1) {
    v6[2](v6);
  }
  else {
    dispatch_async(MEMORY[0x1E4F14428], v6);
  }
  +[_UIKeyboardUsageTracking appAutofillCredentialFromSafariUI];
}

- (void)pushAutocorrections:(id)a3 requestToken:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  if (qword_1EB25FC50 != -1) {
    dispatch_once(&qword_1EB25FC50, &__block_literal_global_1496);
  }
  uint64_t v8 = [(_UIKeyboardStateManager *)self taskQueue];
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __60___UIKeyboardStateManager_pushAutocorrections_requestToken___block_invoke_3;
  void v12[3] = &unk_1E52E3678;
  void v12[4] = self;
  id v13 = v7;
  id v14 = v6;
  uint64_t v9 = qword_1EB25FC48;
  id v10 = v6;
  id v11 = v7;
  [v8 addTask:v12 breadcrumb:v9];
}

- (void)pushCandidateResultSet:(id)a3 requestToken:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  if (qword_1EB25FC60 != -1) {
    dispatch_once(&qword_1EB25FC60, &__block_literal_global_1509);
  }
  uint64_t v8 = [(_UIKeyboardStateManager *)self taskQueue];
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __63___UIKeyboardStateManager_pushCandidateResultSet_requestToken___block_invoke_3;
  void v12[3] = &unk_1E52E3678;
  void v12[4] = self;
  id v13 = v7;
  id v14 = v6;
  uint64_t v9 = qword_1EB25FC58;
  id v10 = v6;
  id v11 = v7;
  [v8 addDeferredTask:v12 breadcrumb:v9];
}

- (id)candidateList
{
  return self->m_candidateList;
}

- (id)candidateResultSet
{
  return self->m_candidateResultSet;
}

- (void)setCandidateList:(id)a3
{
  id v5 = (UIKeyboardCandidateList *)a3;
  m_candidateList = self->m_candidateList;
  if (m_candidateList != v5)
  {
    id v11 = v5;
    if (([(UIKeyboardCandidateList *)m_candidateList isExtendedList] & 1) != 0
      || ![(UIKeyboardCandidateList *)v11 isExtendedList])
    {
      int v7 = 0;
    }
    else
    {
      int v7 = [(TIKeyboardCandidateResultSet *)self->m_candidateResultSet hasMetadata] ^ 1;
    }
    uint64_t v8 = self->m_candidateList;
    objc_storeStrong((id *)&self->m_candidateList, a3);
    [(UIKeyboardCandidateList *)self->m_candidateList setUIKeyboardCandidateListDelegate:self];
    [(_UIKeyboardStateManager *)self setUserSelectedCurrentCandidate:0];
    if (v7)
    {
      uint64_t v9 = [(UIKeyboardCandidateList *)v8 currentCandidate];
      -[_UIKeyboardStateManager generateCandidatesAsynchronouslyWithRange:selectedCandidate:](self, "generateCandidatesAsynchronouslyWithRange:selectedCandidate:", 0, 0x7FFFFFFFLL, v9);

      [(_UIKeyboardStateManager *)self updateKeyboardConfigurations];
    }
    else
    {
      if (![(_UIKeyboardStateManager *)self committingCandidate]) {
        [(_UIKeyboardStateManager *)self syncInputManagerToKeyboardState];
      }
      [(_UIKeyboardStateManager *)self updateKeyboardConfigurations];
      id v10 = [(UIKeyboardCandidateList *)v8 currentCandidate];
      [(_UIKeyboardStateManager *)self updateCandidateDisplay];
      [(UIKeyboardCandidateList *)self->m_candidateList showCandidate:v10];
    }
    id v5 = v11;
  }
}

- (void)_setCandidateList:(id)a3
{
}

- (void)_conditionallyNotifyPredictionsAreAvailableForCandidates:(id)a3 containingProactiveTriggers:(BOOL)a4
{
  BOOL v4 = a4;
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v6 = a3;
  uint64_t v7 = [v6 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    char v9 = 0;
    uint64_t v10 = *(void *)v18;
    while (2)
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v18 != v10) {
          objc_enumerationMutation(v6);
        }
        id v12 = *(void **)(*((void *)&v17 + 1) + 8 * i);
        if (objc_msgSend(v12, "isResponseKitCandidate", (void)v17))
        {
          id v13 = [v12 responseKitCategory];
          char v14 = [&unk_1ED3EF2A8 containsObject:v13];

          if ((v14 & 1) == 0)
          {

            BOOL v4 = 1;
            goto LABEL_15;
          }
          char v9 = 1;
        }
      }
      uint64_t v8 = [v6 countByEnumeratingWithState:&v17 objects:v21 count:16];
      if (v8) {
        continue;
      }
      break;
    }

    if (v9) {
      BOOL v4 = 0;
    }
  }
  else
  {
  }
LABEL_15:
  BOOL v15 = [(_UIKeyboardStateManager *)self predictionFromPreference];
  if (v15) {
    BOOL v15 = [(_UIKeyboardStateManager *)self continuousPathUnderway];
  }
  if (v15 || v4)
  {
    unsigned int v16 = [MEMORY[0x1E4F28EB8] defaultCenter];
    [v16 postNotificationName:@"UIKeyboardPredictionsAvailable" object:0];
  }
}

- (void)setCandidateDisplayIsExtended:(BOOL)a3
{
  BOOL v3 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  BOOL v4 = [WeakRetained candidateController];
  [v4 setIsExtended:v3];
}

- (void)updateCandidateDisplayAsyncWithCandidateSet:(id)a3
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  [v4 candidates];
  long long v63 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v6 = [v5 countByEnumeratingWithState:&v63 objects:v71 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v64;
    while (2)
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v64 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void **)(*((void *)&v63 + 1) + 8 * i);
        if (objc_msgSend(v10, "slotID", (void)v63)
          || ([v10 isResponseKitCandidate] & 1) != 0)
        {
          uint64_t v11 = 1;
          goto LABEL_13;
        }
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v63 objects:v71 count:16];
      uint64_t v11 = 0;
      if (v7) {
        continue;
      }
      break;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
LABEL_13:

  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  id v13 = objc_opt_class();
  uint64_t v69 = @"UIKeyboardPerformanceSearchFoundProactiveResults";
  char v14 = [NSNumber numberWithBool:v11];
  id v70 = v14;
  BOOL v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v70 forKeys:&v69 count:1];
  [v13 sendPerformanceNotification:@"UIKeyboardPerformanceSearchCandidatesEndNotification" userInfo:v15];

  unsigned int v16 = [v4 committedText];

  if (v16)
  {
    long long v17 = [(_UIKeyboardStateManager *)self inputDelegate];

    if (!v17) {
      goto LABEL_16;
    }
    long long v18 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    long long v19 = [v4 committedText];
    int v20 = objc_msgSend(v18, "callShouldReplaceExtendedRange:withText:includeMarkedText:", 0, v19, -[_UIKeyboardStateManager _hasMarkedText](self, "_hasMarkedText"));

    if (!v20)
    {
      [(_UIKeyboardStateManager *)self unmarkText:&stru_1ED0E84C0];
    }
    else
    {
LABEL_16:
      long long v21 = objc_msgSend(v4, "committedText", (void)v63);
      [(_UIKeyboardStateManager *)self unmarkText:v21];
    }
    id v22 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    int v23 = [v22 candidateController];
    int v24 = [v23 barIsExtended];

    if (v24)
    {
      id v25 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      uint64_t v26 = [v25 candidateController];
      [v26 collapse];
    }
  }
  id v27 = objc_msgSend(v4, "uncommittedText", (void)v63);
  if ([(_UIKeyboardStateManager *)self _hasMarkedText])
  {
    BOOL v28 = 0;
    if (!v27) {
      goto LABEL_29;
    }
  }
  else
  {
    char v29 = [v27 displayString];
    if ([v29 length] || (objc_msgSend(v27, "selectedRange"), v30))
    {
      BOOL v28 = 0;
    }
    else
    {
      id v61 = [v27 inputString];
      if ([v61 length])
      {
        BOOL v28 = 0;
      }
      else
      {
        id v62 = [v27 searchString];
        BOOL v28 = [v62 length] == 0;
      }
    }

    if (!v27) {
      goto LABEL_29;
    }
  }
  if (!v28) {
    [(_UIKeyboardStateManager *)self assertIntermediateText:v27];
  }
LABEL_29:
  if (![(_UIKeyboardStateManager *)self userSelectedCurrentCandidate])
  {
    [(_UIKeyboardStateManager *)self setCommittingCandidate:0];
    [(_UIKeyboardStateManager *)self setCandidates:v4];
    if ([v4 hasCandidates]
      && ((v11 & 1) != 0
       || ![(_UIKeyboardStateManager *)self shouldPrioritizeTextSuggestionsOverCandidateResultSet:v4]))
    {
      double v31 = [MEMORY[0x1E4F28EB8] defaultCenter];
      [v31 postNotificationName:@"UIKeyboardCandidatesAvailable" object:0];

      if (+[UIKeyboard isKeyboardProcess])
      {
        BOOL v32 = [(_UIKeyboardStateManager *)self textInputTraits];
        int v33 = [v32 hidePrediction];

        if (v33)
        {
          uint64_t v34 = [(_UIKeyboardStateManager *)self textInputTraits];
          [v34 setHidePrediction:0];

          uint64_t v35 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
          id v67 = @"name";
          BOOL v68 = @"UIKeyboardCandidatesAvailable";
          int v36 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v68 forKeys:&v67 count:1];
          [v35 forwardKeyboardOperation:sel_postNotificationName_ object:v36];
        }
      }
    }
    [(_UIKeyboardStateManager *)self updateCandidateDisplay];
    [(_UIKeyboardStateManager *)self updateReturnKey];
    int v37 = +[UIKeyboard activeKeyboard];
    [v37 _didChangeCandidateList];

    if ([(_UIKeyboardStateManager *)self shouldShowLongPredictionList]
      && (objc_opt_respondsToSelector() & 1) != 0)
    {
      BOOL v38 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      char v39 = [v38 selectedTextRange];
      id v40 = [v39 start];

      double v41 = [(_UIKeyboardStateManager *)self inputDelegate];
      double v42 = [v41 tokenizer];
      double v43 = [v42 rangeEnclosingPosition:v40 withGranularity:2 inDirection:1];

      if (v43)
      {
        double v44 = [v43 start];
        double v45 = [(_UIKeyboardStateManager *)self inputDelegate];
        double v46 = [v45 textRangeFromPosition:v44 toPosition:v40];

        double v47 = [(_UIKeyboardStateManager *)self inputDelegateManager];
        double v48 = [v47 textInRange:v46];

        [(UIKeyboardCandidateList *)self->m_candidateList setInlineText:v48];
      }
    }
    unint64_t v49 = [v4 generatedCandidateCount];
    uint64_t v50 = [v4 batchCandidateLocation];
    uint64_t v51 = [v4 candidates];
    unint64_t v52 = [v51 count] + v50;

    if (v49 > v52)
    {
      BOOL v53 = [(_UIKeyboardStateManager *)self delayedCandidateRequest];
      [v53 invalidate];

      uint64_t v54 = +[_UIActionWhenIdle actionWhenIdleWithTarget:self selector:sel_generateCandidatesAsynchronously object:0];
      [(_UIKeyboardStateManager *)self setDelayedCandidateRequest:v54];
LABEL_43:

      goto LABEL_48;
    }
    if (self->m_candidateList)
    {
      if (![(_UIKeyboardStateManager *)self _hasMarkedText])
      {
        char v55 = [(_UIKeyboardStateManager *)self inputDelegateManager];
        id v56 = [v55 selectedTextRange];
        int v57 = [v56 isEmpty];

        if (v57)
        {
          BOOL v58 = UIKeyboardGetCurrentInputMode();
          uint64_t v54 = UIKeyboardInputModeGetIdentifierWithKeyboardLayouts(v58);

          id v59 = [(UIKeyboardCandidateList *)self->m_candidateList statisticsIdentifier];
          id v60 = TIStatisticGetKeyForCandidateAccepted();
          TIStatisticScalarIncrement();

          goto LABEL_43;
        }
      }
    }
  }
LABEL_48:
  [(_UIKeyboardStateManager *)self _setNeedsCandidates:0];
}

- (unsigned)assertIntermediateText:(id)a3
{
  id v4 = a3;
  id v5 = [v4 displayString];
  uint64_t v6 = [v4 selectedRange];
  uint64_t v8 = v7;
  char v9 = [v4 inputString];
  uint64_t v10 = [v4 lastInputString];
  uint64_t v11 = [v4 searchString];
  uint64_t v12 = [v4 candidateOffset];
  id v13 = [v4 liveConversionSegments];
  unsigned int v14 = -[_UIKeyboardStateManager setMarkedText:selectedRange:inputString:lastInputString:searchString:candidateOffset:liveConversionSegments:highlighSegmentIndex:](self, "setMarkedText:selectedRange:inputString:lastInputString:searchString:candidateOffset:liveConversionSegments:highlighSegmentIndex:", v5, v6, v8, v9, v10, v11, v12, v13, [v4 highlightSegmentIndex]);

  BOOL v15 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  unsigned int v16 = [v15 forwardingInputDelegate];

  long long v17 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];

  if (v17 && !v16)
  {
    long long v18 = [(_UIKeyboardStateManager *)self inputSystemSourceSession];
    long long v19 = v18;
    if (v18)
    {
      int v20 = [v18 textOperations];
      [v20 setIntermediateText:v4];

      [v19 flushOperations];
    }
  }
  return v14;
}

- (BOOL)presentTextCompletionAsMarkedText:(id)a3
{
  id v4 = a3;
  if ([(_UIKeyboardStateManager *)self _hasMarkedText]
    && ![(_UIKeyboardStateManager *)self hasInlineCompletionAsMarkedText])
  {
    BOOL v12 = 0;
  }
  else
  {
    id v5 = [v4 displayString];
    [(_UIKeyboardStateManager *)self _noteInlineCompletionAsMarkedText:v5];

    uint64_t v6 = [v4 displayString];
    uint64_t v7 = [v4 selectedRange];
    uint64_t v9 = v8;
    uint64_t v10 = [v4 inputString];
    uint64_t v11 = [v4 searchString];
    BOOL v12 = 1;
    LOBYTE(v21) = 1;
    -[_UIKeyboardStateManager _setAttributedMarkedText:selectedRange:inputString:lastInputString:searchString:compareAttributes:](self, "_setAttributedMarkedText:selectedRange:inputString:lastInputString:searchString:compareAttributes:", v6, v7, v9, v10, 0, v11, v21);

    id v13 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    unsigned int v14 = [v13 forwardingInputDelegate];

    BOOL v15 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];

    if (v15 && !v14)
    {
      unsigned int v16 = [(_UIKeyboardStateManager *)self inputSystemSourceSession];
      long long v17 = v16;
      if (v16)
      {
        long long v18 = [v16 textOperations];
        [v18 setStyledIntermediateText:v4];

        long long v19 = [v17 textOperations];
        [v19 setCustomInfoType:0x1ED14BCC0];

        [v17 flushOperations];
      }

      BOOL v12 = 1;
    }
  }

  return v12;
}

- (void)removeTextCompletionFromMarkedText:(id)a3
{
  id v21 = a3;
  if ([v21 length])
  {
    id v4 = [(_UIKeyboardStateManager *)self _markedText];
    if (!v4 || [v21 isEqualToString:v4])
    {
      [(_UIKeyboardStateManager *)self _noteInlineCompletionAsMarkedText:0];
      id v5 = (void *)[objc_alloc(MEMORY[0x1E4F28B18]) initWithString:&stru_1ED0E84C0];
      uint64_t v6 = [MEMORY[0x1E4F95EF8] intermediateTextWithInputString:&stru_1ED0E84C0 displayString:v5 selectionLocation:0];
      uint64_t v7 = [v6 displayString];
      uint64_t v8 = [v6 selectedRange];
      uint64_t v10 = v9;
      uint64_t v11 = [v6 inputString];
      BOOL v12 = [v6 searchString];
      LOBYTE(v20) = 1;
      -[_UIKeyboardStateManager _setAttributedMarkedText:selectedRange:inputString:lastInputString:searchString:compareAttributes:](self, "_setAttributedMarkedText:selectedRange:inputString:lastInputString:searchString:compareAttributes:", v7, v8, v10, v11, 0, v12, v20);

      id v13 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      unsigned int v14 = [v13 forwardingInputDelegate];

      BOOL v15 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];

      if (v15 && !v14)
      {
        unsigned int v16 = [(_UIKeyboardStateManager *)self inputSystemSourceSession];
        long long v17 = v16;
        if (v16)
        {
          long long v18 = [v16 textOperations];
          [v18 setStyledIntermediateText:v6];

          long long v19 = [v17 textOperations];
          [v19 setCustomInfoType:0x1ED14BCC0];

          [v17 flushOperations];
        }
      }
    }
  }
}

- (BOOL)needsToDeferUpdateTextCandidateView
{
  int v3 = [(TIKeyboardCandidateResultSet *)self->m_candidateResultSet hasCandidates];
  if (v3)
  {
    id v4 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    id v5 = [v4 keyInputDelegate];
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();

    if ((isKindOfClass & 1) == 0) {
      goto LABEL_4;
    }
    uint64_t v7 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    uint64_t v8 = [v7 keyInputDelegate];
    uint64_t v9 = [v8 superview];

    ClassName = object_getClassName(v9);
    LODWORD(v7) = strcmp(ClassName, "RecipientTextField");

    if (!v7) {
      LOBYTE(v3) = 1;
    }
    else {
LABEL_4:
    }
      LOBYTE(v3) = 0;
  }
  return v3;
}

- (void)updateCandidateDisplay
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained updateCandidateDisplay];
}

- (BOOL)canUseCandidateBarAsSupplementToInlineView
{
  p_presentationDelegate = &self->_presentationDelegate;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  id v5 = [WeakRetained _rootInputWindowController];
  uint64_t v6 = [v5 placement];

  uint64_t v7 = +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate];
  uint64_t v8 = [v7 visualModeManager];
  if ([v8 useVisualModeWindowed])
  {
    uint64_t v9 = [v7 visualModeManager];
    if ([v9 windowingModeEnabled]) {
      int v10 = [v6 isFloatingAssistantView];
    }
    else {
      int v10 = 0;
    }
  }
  else
  {
    int v10 = 0;
  }

  if ((UIKeyboardGetSafeDeviceIdiom() & 0xFFFFFFFFFFFFFFFBLL) == 1)
  {
    id v11 = objc_loadWeakRetained((id *)p_presentationDelegate);
    if ([(id)objc_opt_class() isFloating]
      && ![v6 isFloatingAssistantView])
    {
      char v14 = 0;
    }
    else
    {
      if ([(UITextInputTraits *)self->m_traits autocorrectionType] == 1) {
        int v12 = 1;
      }
      else {
        int v12 = v10;
      }
      if (v12 == 1)
      {
        id v13 = [(_UIKeyboardStateManager *)self autocorrectionController];
        char v14 = [v13 hasAutofillCandidates];
      }
      else
      {
        char v14 = 1;
      }
    }
  }
  else
  {
    char v14 = 0;
  }

  return v14;
}

- (BOOL)showsCandidateInline
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  char v3 = [WeakRetained showsCandidateInline];

  return v3;
}

- (BOOL)showsCandidateBar
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  char v3 = [WeakRetained showsCandidateBar];

  return v3;
}

- (void)setShowsCandidateBar:(BOOL)a3
{
  BOOL v3 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained setShowsCandidateBar:v3];
}

- (void)candidateBarDidExtendWithGesture
{
  id v2 = [(_UIKeyboardStateManager *)self inputManager];
  [v2 logDiscoverabilityEvent:1 userInfo:0];
}

- (BOOL)isMinimized
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  char v3 = [WeakRetained isMinimized];

  return v3;
}

- (BOOL)maximizing
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  char v3 = [WeakRetained maximizing];

  return v3;
}

- (void)layoutDidResize
{
  id v2 = [(_UIKeyboardStateManager *)self inputManager];
  [v2 logDiscoverabilityEvent:0 userInfo:0];
}

- (void)responseContextDidChange
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  char v3 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  id v4 = [v3 privateInputDelegate];
  id v5 = [v4 textInputTraits];
  uint64_t v6 = [v5 responseContext];

  if (!v6)
  {
    uint64_t v7 = [(_UIKeyboardStateManager *)self delegate];
    char v8 = objc_opt_respondsToSelector();

    if (v8)
    {
      uint64_t v9 = [(_UIKeyboardStateManager *)self delegate];
      uint64_t v6 = [v9 responseContext];
    }
    else
    {
      uint64_t v6 = 0;
    }
  }
  [(TIKeyboardState *)self->m_keyboardState setResponseContext:v6];
  int v10 = [(TIKeyboardState *)self->m_keyboardState inputContextHistory];
  id v11 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  int v12 = [v11 textInputTraits];
  id v13 = [v12 inputContextHistory];

  if (!v13)
  {
    char v14 = [(_UIKeyboardStateManager *)self delegate];
    char v15 = objc_opt_respondsToSelector();

    if (v15)
    {
      unsigned int v16 = [(_UIKeyboardStateManager *)self delegate];
      id v13 = [v16 inputContextHistory];
    }
    else
    {
      id v13 = 0;
    }
  }
  long long v17 = _UIKeyboardSmartReplyLog();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    long long v18 = [v10 debugDescription];
    long long v19 = [v13 tiInputContextHistory];
    uint64_t v20 = [v19 debugDescription];
    int v36 = 138478083;
    int v37 = v18;
    __int16 v38 = 2113;
    char v39 = v20;
    _os_log_impl(&dword_1853B0000, v17, OS_LOG_TYPE_DEFAULT, "Handling responseContextDidChange - existing: %{private}@, new: %{private}@", (uint8_t *)&v36, 0x16u);
  }
  if (!v13
    || ([v13 tiInputContextHistory],
        id v21 = objc_claimAutoreleasedReturnValue(),
        v21,
        v21 == v10))
  {
    int v28 = 0;
  }
  else
  {
    id v22 = [v13 tiInputContextHistory];
    [(TIKeyboardState *)self->m_keyboardState setInputContextHistory:v22];

    int v23 = _UIKeyboardSmartReplyLog();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      int v24 = [(TIKeyboardState *)self->m_keyboardState inputContextHistory];
      id v25 = [v24 debugDescription];
      int v36 = 138477827;
      int v37 = v25;
      _os_log_impl(&dword_1853B0000, v23, OS_LOG_TYPE_DEFAULT, "Handling setting state to: %{private}@", (uint8_t *)&v36, 0xCu);
    }
    uint64_t v26 = [(_UIKeyboardStateManager *)self textInputTraits];
    [v26 setInputContextHistory:v13];

    uint64_t v27 = [v13 tiInputContextHistory];

    int v28 = 1;
    int v10 = (void *)v27;
  }
  if (+[UIKeyboard usesInputSystemUI])
  {
    char v29 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
    [v29 documentTraitsChanged];
LABEL_19:

    goto LABEL_20;
  }
  uint64_t v30 = [v10 mostRecentNonSenderTextEntry];
  if (v30 && (double v31 = (void *)v30, v32 = [v10 mostRecentTextEntryIsByMe], v31, !v32)
    || [v6 length])
  {
    int v33 = [(_UIKeyboardStateManager *)self inputDelegate];
    if ([v33 hasText])
    {
      char v34 = v28 | [v10 hasPendingEntries];

      if ((v34 & 1) == 0) {
        goto LABEL_20;
      }
    }
    else
    {
    }
  }
  else if ((v28 | [v10 hasPendingEntries]) != 1)
  {
    goto LABEL_20;
  }
  uint64_t v35 = _UIKeyboardSmartReplyLog();
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v36) = 0;
    _os_log_impl(&dword_1853B0000, v35, OS_LOG_TYPE_DEFAULT, "Will regenerate smart replies for responseContextDidChange", (uint8_t *)&v36, 2u);
  }

  if ([(_UIKeyboardStateManager *)self canShowPredictionBar]
    && ![(_UIKeyboardStateManager *)self shouldShowLongPredictionList])
  {
    [(_UIKeyboardStateManager *)self _requestInputManagerSync];
    char v29 = [(_UIKeyboardStateManager *)self autocorrectionController];
    [v29 setNeedsAutocorrection];
    goto LABEL_19;
  }
  if ([(_UIKeyboardStateManager *)self usesCandidateSelection])
  {
    [(_UIKeyboardStateManager *)self _requestInputManagerSync];
    -[_UIKeyboardStateManager generateCandidatesAsynchronouslyWithRange:selectedCandidate:](self, "generateCandidatesAsynchronouslyWithRange:selectedCandidate:", 0, 0x7FFFFFFFLL, 0);
  }
LABEL_20:
}

- (void)setAutocorrection:(id)a3
{
  id v6 = a3;
  if (v6)
  {
    id v4 = (void *)[objc_alloc(MEMORY[0x1E4FAE2A0]) initWithAutocorrection:v6 alternateCorrections:0];
    id v5 = [MEMORY[0x1E4FAE278] listWithCorrections:v4 predictions:0];
    [(_UIKeyboardStateManager *)self setAutocorrectionList:v5];
  }
  else
  {
    id v4 = [(_UIKeyboardStateManager *)self autocorrectionController];
    [v4 clearAutocorrection];
  }
}

- (id)_supplementalCandidateIcon:(id)a3
{
  id v4 = objc_msgSend(a3, "ui_supplementalItems");
  if (![v4 count])
  {
    uint64_t v7 = 0;
    goto LABEL_9;
  }
  if ([v4 count] == 1)
  {
    id v5 = [v4 objectAtIndexedSubscript:0];
    uint64_t v6 = [v5 icon];
LABEL_7:
    uint64_t v7 = (void *)v6;

    goto LABEL_9;
  }
  char v8 = [(_UIKeyboardStateManager *)self textInputTraits];
  uint64_t v9 = [v8 supplementalLexiconAmbiguousItemIcon];

  if (v9)
  {
    id v5 = [(_UIKeyboardStateManager *)self textInputTraits];
    uint64_t v6 = [v5 supplementalLexiconAmbiguousItemIcon];
    goto LABEL_7;
  }
  uint64_t v7 = +[UIImage systemImageNamed:@"questionmark.circle"];
LABEL_9:

  return v7;
}

- (void)setAutocorrectionList:(id)a3
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __49___UIKeyboardStateManager_setAutocorrectionList___block_invoke;
  aBlock[3] = &unk_1E52E4218;
  void aBlock[4] = self;
  id v5 = (void (**)(void *, void *))_Block_copy(aBlock);
  uint64_t v6 = [v4 autocorrectionIfSupplemental];
  if (v6) {
    v5[2](v5, v6);
  }
  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  uint64_t v7 = [v4 predictionsIfSupplemental];
  uint64_t v8 = [v7 countByEnumeratingWithState:&v53 objects:v58 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v54;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v54 != v10) {
          objc_enumerationMutation(v7);
        }
        v5[2](v5, *(void **)(*((void *)&v53 + 1) + 8 * i));
      }
      uint64_t v9 = [v7 countByEnumeratingWithState:&v53 objects:v58 count:16];
    }
    while (v9);
  }

  if (self->m_pendingAutofillIndex < 0
    || ([v4 predictions], int v12 = objc_claimAutoreleasedReturnValue(), v12, !v12))
  {
    char v15 = [v4 predictions];
    unsigned int v16 = [v15 firstObject];

    if ([(_UIKeyboardStateManager *)self usesCandidateSelection])
    {
      if (![v16 slotID])
      {
LABEL_21:
        long long v19 = [v4 corrections];
        uint64_t v20 = [v19 autocorrection];
        char v21 = [v20 isContinuousPathConversion];

        if ((v21 & 1) == 0)
        {
          int m_predictionType = self->m_predictionType;
          if ((m_predictionType | 2) == 3)
          {
            self->int m_predictionType = 0;
            goto LABEL_32;
          }
LABEL_26:
          if (m_predictionType == 4 || m_predictionType == 2)
          {
            uint64_t v26 = [v4 corrections];
            uint64_t v27 = [v26 autocorrection];
            int v28 = [v27 isForShortcutConversion];

            if (!v28) {
              goto LABEL_45;
            }
          }
          goto LABEL_32;
        }
      }
LABEL_22:
      int v18 = 1;
      goto LABEL_23;
    }
    int v17 = [v16 isAutofillCandidate];
    if ([v16 slotID])
    {
      if (!v17) {
        goto LABEL_22;
      }
    }
    else if ((v17 & 1) == 0)
    {
      goto LABEL_21;
    }
    int v18 = 3;
LABEL_23:
    self->int m_predictionType = v18;
    id v22 = [v4 corrections];
    int v23 = [v22 autocorrection];
    char v24 = [v23 isContinuousPathConversion];

    if (v24)
    {
      self->int m_predictionType = 5;
LABEL_32:
      if ([(_UIKeyboardStateManager *)self prewarmsPredictiveCandidates])
      {
        int v29 = 1;
      }
      else
      {
        uint64_t v30 = +[UIKeyboardPreferencesController sharedPreferencesController];
        double v31 = [v30 preferencesActions];
        if ([v31 predictionEnabled])
        {
          int v29 = 1;
        }
        else
        {
          int v32 = [v4 corrections];
          int v33 = [v32 autocorrection];
          int v29 = v33 != 0;
        }
      }
      int v34 = self->m_predictionType;
      if ((v34 | 2) == 3 || ((v34 != 5) & ~v29) == 0)
      {
        uint64_t v35 = [(_UIKeyboardStateManager *)self autocorrectionController];
        int v36 = v35;
        id v37 = v4;
LABEL_46:
        [v35 setAutocorrectionList:v37];
        goto LABEL_47;
      }
      __int16 v38 = [v4 corrections];
      char v39 = [v38 autocorrection];
      uint64_t v40 = [v39 input];
      if (v40)
      {
        unint64_t v52 = (void *)v40;
        uint64_t v50 = [v4 corrections];
        unint64_t v49 = [v50 autocorrection];
        double v41 = [v49 input];
        [v4 corrections];
        double v42 = v51 = v38;
        double v43 = [v42 autocorrection];
        double v44 = [v43 candidate];
        char v48 = [v41 isEqualToString:v44];

        if ((v48 & 1) == 0)
        {
          double v45 = (void *)MEMORY[0x1E4FAE278];
          int v36 = [v4 corrections];
          double v46 = [v45 listWithCorrections:v36 predictions:0];
          double v47 = [(_UIKeyboardStateManager *)self autocorrectionController];
          [v47 setAutocorrectionList:v46];

LABEL_47:
          goto LABEL_48;
        }
      }
      else
      {
      }
LABEL_45:
      uint64_t v35 = [(_UIKeyboardStateManager *)self autocorrectionController];
      int v36 = v35;
      id v37 = 0;
      goto LABEL_46;
    }
    int m_predictionType = self->m_predictionType;
    goto LABEL_26;
  }
  id v13 = [v4 predictions];
  char v14 = [v13 objectAtIndex:self->m_pendingAutofillIndex];
  [(_UIKeyboardStateManager *)self acceptPredictiveInput:v14];

  self->m_pendingAutofillIndeCGFloat x = -1;
LABEL_48:
}

- (BOOL)hasAutocorrectPrompt
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  char v3 = [WeakRetained hasAutocorrectPrompt];

  return v3;
}

- (void)removeAutocorrectPrompt
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained removeAutocorrectPrompt];
}

- (void)removeCandidateList
{
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __46___UIKeyboardStateManager_removeCandidateList__block_invoke;
  aBlock[3] = &unk_1E52D9F70;
  void aBlock[4] = self;
  char v3 = (void (**)(void))_Block_copy(aBlock);
  if (+[UIViewPropertyAnimator _trackedAnimationsStartPaused])
  {
    +[UIView performWithoutAnimation:v3];
  }
  else
  {
    v3[2](v3);
  }
  m_candidateList = self->m_candidateList;
  self->m_candidateList = 0;

  [(_UIKeyboardStateManager *)self setUserSelectedCurrentCandidate:0];
  [(_UIKeyboardStateManager *)self updateKeyboardConfigurations];
}

- (void)removeAutocorrectPromptAndCandidateList
{
  [(_UIKeyboardStateManager *)self removeAutocorrectPrompt];
  [(_UIKeyboardStateManager *)self removeCandidateList];
  [(_UIKeyboardStateManager *)self removeTextChoicePrompt];
  id v3 = [(_UIKeyboardStateManager *)self inlineTextCompletionController];
  [v3 removeTextCompletionPrompt];
}

- (void)removeInlineTextCompletionPrompt
{
  if (+[UIKeyboard usesInputSystemUI])
  {
    id v3 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
    [v3 forwardInputDestinationEventToUIHost:sel_removeInlineTextCompletionPrompt];
  }
  else
  {
    id v3 = [(_UIKeyboardStateManager *)self inlineTextCompletionController];
    [v3 removeTextCompletionPrompt];
  }
}

- (void)removeTextChoicePromptWithUnderline
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained removeTextChoicePromptWithUnderline];
}

- (void)removeTextChoicePrompt
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained removeTextChoicePrompt];
}

- (void)removeTextChoicePromptAndAutocorrection
{
  if (+[UITextSelectionDisplayInteraction isTextAccelerationUIEnabled])
  {
    [(_UIKeyboardStateManager *)self removeTextChoicePrompt];
  }
  else
  {
    [(_UIKeyboardStateManager *)self removeAutocorrection];
  }
}

- (void)removeTextChoiceUnderlines
{
  if (+[UITextSelectionDisplayInteraction isTextAccelerationUIEnabled])
  {
    id v3 = [(_UIKeyboardStateManager *)self _textChoicesAssistant];
    [v3 removeAllUnderlines];
  }
}

- (void)removeTextChoiceUnderlinesInRange:(id)a3
{
  id v10 = a3;
  BOOL v4 = +[UITextSelectionDisplayInteraction isTextAccelerationUIEnabled];
  id v5 = v10;
  if (v10 && v4)
  {
    int v6 = [v10 isEmpty];
    uint64_t v7 = [(_UIKeyboardStateManager *)self _textChoicesAssistant];
    uint64_t v8 = v7;
    if (v6)
    {
      uint64_t v9 = [v10 start];
      [v8 clearUnderlineForPosition:v9];
    }
    else
    {
      [v7 removeAllUnderlines];
    }

    id v5 = v10;
  }
}

- (id)_autocorrectionListDemotingAutocorrectionFromList:(id)a3
{
  v33[1] = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  BOOL v4 = [v3 corrections];
  id v5 = [v4 autocorrection];

  if (!v5) {
    goto LABEL_6;
  }
  int v6 = [v5 candidate];
  uint64_t v7 = [v5 input];
  uint64_t v8 = v7;
  uint64_t v9 = v7 ? v7 : &stru_1ED0E84C0;
  char v10 = [v6 isEqualToString:v9];

  if ((v10 & 1) == 0)
  {
    int v12 = (void *)MEMORY[0x1E4FAE318];
    uint64_t v13 = [v5 input];
    char v14 = (void *)v13;
    if (v13) {
      char v15 = (__CFString *)v13;
    }
    else {
      char v15 = &stru_1ED0E84C0;
    }
    unsigned int v16 = [v12 candidateWithUnchangedInput:v15];

    v33[0] = v5;
    int v17 = [MEMORY[0x1E4F1C978] arrayWithObjects:v33 count:1];
    int v18 = [v3 corrections];
    uint64_t v19 = [v18 alternateCorrections];
    uint64_t v20 = (void *)v19;
    if (v19) {
      uint64_t v21 = v19;
    }
    else {
      uint64_t v21 = MEMORY[0x1E4F1CBF0];
    }
    id v22 = [v17 arrayByAddingObjectsFromArray:v21];

    int v23 = (void *)[objc_alloc(MEMORY[0x1E4FAE2A0]) initWithAutocorrection:v16 alternateCorrections:v22 autocorrectionBlocked:1];
    char v24 = [v3 predictions];

    if (v24)
    {
      int v32 = v5;
      id v25 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v32 count:1];
      uint64_t v26 = [v3 predictions];
      char v24 = [v25 arrayByAddingObjectsFromArray:v26];
    }
    uint64_t v27 = (void *)MEMORY[0x1E4FAE278];
    int v28 = [v3 emojiList];
    int v29 = [v3 inlineCompletions];
    uint64_t v30 = [v3 proactiveTriggers];
    id v11 = [v27 listWithCorrections:v23 predictions:v24 emojiList:v28 inlineCompletionList:v29 proactiveTriggers:v30];
  }
  else
  {
LABEL_6:
    id v11 = v3;
  }

  return v11;
}

- (void)dismissTextChoicePrompt
{
  if (+[UIKeyboard usesInputSystemUI])
  {
    id v8 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
    [v8 forwardInputDestinationEventToUIHost:sel_dismissTextChoicePrompt];
  }
  else
  {
    [(_UIKeyboardStateManager *)self removeTextChoicePrompt];
    id v3 = [(_UIKeyboardStateManager *)self autocorrectionController];
    int v4 = [v3 hasAutocorrection];

    if (!v4) {
      return;
    }
    id v5 = [(_UIKeyboardStateManager *)self autocorrectionController];
    id v8 = [v5 autocorrectionList];

    id v6 = [(_UIKeyboardStateManager *)self _autocorrectionListDemotingAutocorrectionFromList:v8];
    if (v8 != v6)
    {
      uint64_t v7 = [(_UIKeyboardStateManager *)self autocorrectionController];
      [v7 setAutocorrectionList:v6];
    }
  }
}

- (void)presentTextChoicePromptForRange:(id)a3
{
  id v5 = a3;
  if (+[UIKeyboard usesInputSystemUI])
  {
    int v4 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
    [v4 forwardInputDestinationEventToUIHost:sel_presentTextChoicePromptForRange_];
  }
  else
  {
    int v4 = [(_UIKeyboardStateManager *)self _textChoicesAssistant];
    [v4 presentIfNeededForRange:v5];
  }
}

- (void)setCandidates:(id)a3
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  int v4 = (TIKeyboardCandidateResultSet *)a3;
  id v5 = v4;
  p_m_candidateResultSet = &self->m_candidateResultSet;
  if (self->m_candidateResultSet != v4)
  {
    uint64_t v7 = v4;
    if ([(TIKeyboardCandidateResultSet *)v7 batchCandidateLocation])
    {
      id v8 = [(TIKeyboardCandidateResultSet *)*p_m_candidateResultSet setByAppendingSet:v7];
      uint64_t v9 = v8;
      if (!v8) {
        uint64_t v9 = *p_m_candidateResultSet;
      }
      char v10 = v9;

      uint64_t v7 = v10;
    }
    if (*p_m_candidateResultSet != v7)
    {
      id v11 = [(TIKeyboardCandidateResultSet *)v7 candidates];
      uint64_t v12 = [v11 count];

      if (v12)
      {
        objc_storeStrong((id *)&self->m_candidateResultSet, v7);
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        uint64_t v13 = [(TIKeyboardCandidateResultSet *)v7 candidatesIfSupplemental];
        uint64_t v14 = [v13 countByEnumeratingWithState:&v40 objects:v45 count:16];
        if (v14)
        {
          uint64_t v15 = v14;
          uint64_t v16 = *(void *)v41;
          do
          {
            for (uint64_t i = 0; i != v15; ++i)
            {
              if (*(void *)v41 != v16) {
                objc_enumerationMutation(v13);
              }
              int v18 = *(void **)(*((void *)&v40 + 1) + 8 * i);
              uint64_t v19 = [(_UIKeyboardStateManager *)self _supplementalCandidateIcon:v18];
              [v18 setIcon:v19];
            }
            uint64_t v15 = [v13 countByEnumeratingWithState:&v40 objects:v45 count:16];
          }
          while (v15);
        }

        uint64_t v20 = [(TIKeyboardCandidateResultSet *)self->m_candidateResultSet candidates];
        uint64_t v21 = [v20 firstObject];

        if ([(_UIKeyboardStateManager *)self shouldShowLongPredictionList])
        {
          id v22 = [MEMORY[0x1E4F1CA98] null];

          if (v21 != v22)
          {
            uint64_t v34 = MEMORY[0x1E4F143A8];
            uint64_t v35 = 3221225472;
            int v36 = __41___UIKeyboardStateManager_setCandidates___block_invoke;
            id v37 = &unk_1E52E3628;
            id v38 = v21;
            char v39 = self;
            int v23 = _Block_copy(&v34);
            if (qword_1EB25FC70 != -1) {
              dispatch_once(&qword_1EB25FC70, &__block_literal_global_1581);
            }
            char v24 = [(_UIKeyboardStateManager *)self taskQueue];
            [v24 addTask:v23 breadcrumb:qword_1EB25FC68];
          }
        }
      }
      else
      {
        id v25 = *p_m_candidateResultSet;
        *p_m_candidateResultSet = 0;
      }
    }

    int v4 = *p_m_candidateResultSet;
  }
  if ([(TIKeyboardCandidateResultSet *)v4 hasCandidates])
  {
    self->_receivedCandidatesInCurrentInputMode = 1;
    if (!self->m_candidateList)
    {
      [(_UIKeyboardStateManager *)self updateTextCandidateView];
      uint64_t v26 = +[UIKeyboard activeKeyboard];
      [v26 _didChangeCandidateList];

      uint64_t v27 = +[UIDevice currentDevice];
      uint64_t v28 = [v27 userInterfaceIdiom];

      if (!v28)
      {
        if ([(_UIKeyboardStateManager *)self isMinimized])
        {
          int v29 = [(TIKeyboardCandidateResultSet *)*p_m_candidateResultSet firstCandidate];
          int v30 = [v29 slotID];

          if (v30)
          {
            double v31 = [(_UIKeyboardStateManager *)self _textChoicesAssistant];
            int v32 = [(TIKeyboardCandidateResultSet *)self->m_candidateResultSet firstCandidate];
            double v44 = v32;
            int v33 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v44 count:1];
            [v31 showChoicesForCandidates:v33];
          }
        }
      }
    }
  }
}

- (BOOL)noContent
{
  id v3 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  int v4 = [v3 keyInputDelegate];

  if (!v4) {
    return 0;
  }
  id v5 = +[UIDictationLandingView activeInstance];
  char v6 = [v5 delegateWasEmpty];

  if (v6) {
    return 1;
  }
  if (+[UIKeyboard isKeyboardProcess])
  {
    id v8 = [(_UIKeyboardStateManager *)self inputSystemSourceSession];
    uint64_t v9 = [v8 documentState];
    char v10 = [v9 hasText];
  }
  else
  {
    id v8 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    char v10 = [v8 hasText];
  }
  char v7 = v10 ^ 1;

  return v7;
}

- (int)returnKeyType
{
  if ([(UITextInputTraits *)self->m_traits emptyContentReturnKeyType]
    && [(_UIKeyboardStateManager *)self noContent])
  {
    m_traits = self->m_traits;
    return [(UITextInputTraits *)m_traits emptyContentReturnKeyType];
  }
  else
  {
    BOOL v5 = [(UITextInputTraits *)self->m_traits suppressReturnKeyStyling];
    int result = [(UITextInputTraits *)self->m_traits returnKeyType];
    if (v5) {
      return -result;
    }
  }
  return result;
}

- (BOOL)returnKeyEnabled
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  char v3 = [WeakRetained returnKeyEnabled];

  return v3;
}

- (void)setReturnKeyEnabled:(BOOL)a3
{
  BOOL v3 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained setReturnKeyEnabled:v3];
}

- (void)updateReturnKey
{
}

- (void)updateReturnKey:(BOOL)a3
{
  BOOL v3 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained updateReturnKey:v3];
}

- (void)_handleKeyBehavior:(unint64_t)a3 forKeyType:(id)a4
{
  p_presentationDelegate = &self->_presentationDelegate;
  id v6 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)p_presentationDelegate);
  [WeakRetained _handleKeyBehavior:a3 forKeyType:v6];
}

- (void)performKeyBehaviorConfirm
{
  if ([(_UIKeyboardStateManager *)self usesCandidateSelection])
  {
    BOOL v3 = [(_UIKeyboardStateManager *)self handlingKeyCommandFromHardwareKeyboard];
    int v4 = (void *)MEMORY[0x1E4FAEBD0];
    if (!v3) {
      int v4 = (void *)MEMORY[0x1E4FAEB90];
    }
    [(_UIKeyboardStateManager *)self trackUsageForCandidateAcceptedAction:*v4];
    id v5 = [(_UIKeyboardStateManager *)self acceptCurrentCandidate];
  }
  else
  {
    [(_UIKeyboardStateManager *)self acceptAutocorrectionWithCompletionHandler:0];
    [(_UIKeyboardStateManager *)self removeTextChoicePrompt];
    if ([(_UIKeyboardStateManager *)self usesAutocorrectionLists])
    {
      id v6 = [(_UIKeyboardStateManager *)self inputManagerState];
      char v7 = [v6 wordSeparator];
      int v8 = [v7 isEqualToString:&stru_1ED0E84C0];

      if (v8)
      {
        [(_UIKeyboardStateManager *)self generateCandidates];
        [(_UIKeyboardStateManager *)self updateCandidateDisplay];
      }
    }
  }
}

- (void)performKeyBehaviorConfirmFirstCandidate
{
  BOOL v3 = [(_UIKeyboardStateManager *)self handlingKeyCommandFromHardwareKeyboard];
  int v4 = (void *)MEMORY[0x1E4FAEBC8];
  if (!v3) {
    int v4 = (void *)MEMORY[0x1E4FAEB88];
  }
  [(_UIKeyboardStateManager *)self trackUsageForCandidateAcceptedAction:*v4];
  [(_UIKeyboardStateManager *)self acceptFirstCandidate];
}

- (void)performKeyBehaviorCommitInline
{
  BOOL v3 = [(_UIKeyboardStateManager *)self acceptInlineCandidate];
  if (!v3)
  {
    int v4 = [(_UIKeyboardStateManager *)self autocorrectionController];
    id v5 = [v4 autocorrectionList];
    id v6 = [v5 predictions];
    char v7 = [v6 firstObject];
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();

    BOOL v3 = 0;
    if (isKindOfClass)
    {
      id v9 = objc_alloc_init(MEMORY[0x1E4FAE370]);
      [v9 setInsertionText:@"\n"];
      [(_UIKeyboardStateManager *)self performKeyboardOutput:v9];

      BOOL v3 = 0;
    }
  }
}

- (id)_keyboardBehaviorState
{
  id v3 = objc_alloc_init(MEMORY[0x1E4FAE2E8]);
  int v4 = [(_UIKeyboardStateManager *)self inputManagerState];
  if ([v4 usesCandidateSelection])
  {
    objc_msgSend(v3, "setHasInput:", -[_UIKeyboardStateManager _hasMarkedText](self, "_hasMarkedText"));
  }
  else
  {
    id v5 = [(_UIKeyboardStateManager *)self autocorrectionController];
    if ([v5 hasAutocorrection])
    {
      id v6 = [(_UIKeyboardStateManager *)self autocorrectionController];
      char v7 = [v6 autocorrection];
      [v3 setHasInput:v7 != 0];
    }
    else
    {
      [v3 setHasInput:1];
    }
  }
  int v8 = [(_UIKeyboardStateManager *)self autocorrectionController];
  if ([v8 hasAutocorrection])
  {
    id v9 = [(_UIKeyboardStateManager *)self autocorrectionController];
    char v10 = [v9 autocorrection];
  }
  else
  {
    char v10 = 0;
  }

  id v11 = [v10 candidate];
  if ([v11 length])
  {
    uint64_t v12 = [v10 input];
    uint64_t v13 = [v10 candidate];
    objc_msgSend(v3, "setHasAutocorrection:", objc_msgSend(v12, "isEqualToString:", v13) ^ 1);
  }
  else
  {
    [v3 setHasAutocorrection:0];
  }

  if (objc_opt_respondsToSelector()) {
    objc_msgSend(v3, "setContinuousPathUnderway:", -[_UIKeyboardStateManager continuousPathUnderway](self, "continuousPathUnderway"));
  }
  objc_msgSend(v3, "setHasCandidates:", -[TIKeyboardCandidateResultSet hasCandidates](self->m_candidateResultSet, "hasCandidates"));
  m_candidateList = self->m_candidateList;
  if (m_candidateList) {
    BOOL v15 = [(UIKeyboardCandidateList *)m_candidateList currentIndex] != 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    BOOL v15 = 0;
  }
  [v3 setHasCandidateSelected:v15];
  if (objc_opt_respondsToSelector()) {
    objc_msgSend(v3, "setHasNextPage:", -[UIKeyboardCandidateList hasCandidateInForwardDirection:granularity:](self->m_candidateList, "hasCandidateInForwardDirection:granularity:", 1, 2));
  }
  objc_msgSend(v3, "setUserSelectedCurrentCandidate:", -[TIKeyboardState userSelectedCurrentCandidate](self->m_keyboardState, "userSelectedCurrentCandidate"));
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  int v17 = [WeakRetained candidateController];
  objc_msgSend(v3, "setShowsExtendedList:", objc_msgSend(v17, "isExtended"));

  int v18 = [(TIKeyboardState *)self->m_keyboardState layoutState];
  objc_msgSend(v3, "setShowsCandidatesInLayout:", objc_msgSend(v18, "hasCandidateKey"));

  uint64_t v19 = [(_UIKeyboardStateManager *)self _markedText];
  uint64_t v20 = [v19 _lastGrapheme];

  if ([v20 _containsBopomofoOnly]) {
    uint64_t v21 = [v20 _containsBopomofoToneOnly] ^ 1;
  }
  else {
    uint64_t v21 = 0;
  }
  [v3 setFollowsZhuyin:v21];
  objc_msgSend(v3, "setFollowsIncompleteRomaji:", -[TIKeyboardInputManagerState shouldFixupIncompleteRomaji](self->m_inputManagerState, "shouldFixupIncompleteRomaji"));
  id v22 = +[UIKeyboardPreferencesController sharedPreferencesController];
  int v23 = [v22 preferencesActions];
  char v24 = [v23 valueForPreferenceKey:*MEMORY[0x1E4FAEAA8]];

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v25 = 1;
    goto LABEL_27;
  }
  if (v24)
  {
    uint64_t v25 = [v24 BOOLValue];
LABEL_27:

    goto LABEL_29;
  }
  uint64_t v25 = 1;
LABEL_29:
  [v3 setSpaceConfirmation:v25];
  objc_msgSend(v3, "setHardwareKeyboardMode:", -[_UIKeyboardStateManager isInHardwareKeyboardMode](self, "isInHardwareKeyboardMode"));

  return v3;
}

- (id)updateKeyBehaviors:(id)a3 withBehaviors:(id)a4 forState:(id)a5
{
  id v7 = a3;
  int v8 = [a4 keyBehaviorsForState:a5];
  uint64_t v9 = [v8 spaceKeyBehavior];
  if (!v9) {
    uint64_t v9 = [v7 spaceKeyBehavior];
  }
  uint64_t v10 = [v8 returnKeyBehavior];
  if (!v10) {
    uint64_t v10 = [v7 returnKeyBehavior];
  }
  if ([v8 spaceKeyBehavior] != v9 || objc_msgSend(v8, "returnKeyBehavior") != v10)
  {
    uint64_t v11 = [MEMORY[0x1E4FAE358] behaviorForSpaceKey:v9 forReturnKey:v10];

    int v8 = (void *)v11;
  }

  return v8;
}

- (id)updatedKeyBehaviors
{
  id v3 = [(_UIKeyboardStateManager *)self _keyboardBehaviorState];
  int v4 = [(UIKeyboardCandidateList *)self->m_candidateList keyboardBehaviors];
  id v5 = [(_UIKeyboardStateManager *)self updateKeyBehaviors:0 withBehaviors:v4 forState:v3];

  id v6 = [(_UIKeyboardStateManager *)self inputManagerState];
  id v7 = [v6 keyboardBehaviors];
  int v8 = [(_UIKeyboardStateManager *)self updateKeyBehaviors:v5 withBehaviors:v7 forState:v3];

  return v8;
}

- (void)_updateKeyboardConfigurations
{
  id v3 = [(UIKeyboardCandidateList *)self->m_candidateList keyboardBehaviors];
  if (v3)
  {
  }
  else
  {
    int v4 = [(_UIKeyboardStateManager *)self inputManagerState];
    id v5 = [v4 keyboardBehaviors];

    if (!v5)
    {
      id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      id v6 = [WeakRetained layout];
      [v6 restoreDefaultsForAllKeys];

      goto LABEL_10;
    }
  }
  if (self->m_hasInputOnAcceptCandidate)
  {
    [(_UIKeyboardStateManager *)self _handleKeyBehavior:8 forKeyType:@"_keyid_space_"];
    [(_UIKeyboardStateManager *)self _handleKeyBehavior:8 forKeyType:@"_keyid_return_"];
    return;
  }
  id WeakRetained = [(_UIKeyboardStateManager *)self updatedKeyBehaviors];
  -[_UIKeyboardStateManager _handleKeyBehavior:forKeyType:](self, "_handleKeyBehavior:forKeyType:", [WeakRetained spaceKeyBehavior], @"_keyid_space_");
  -[_UIKeyboardStateManager _handleKeyBehavior:forKeyType:](self, "_handleKeyBehavior:forKeyType:", [WeakRetained returnKeyBehavior], @"_keyid_return_");
LABEL_10:
}

- (void)updateKeyboardConfigurations
{
  if (!self->m_inDealloc) {
    [(_UIKeyboardStateManager *)self _updateKeyboardConfigurations];
  }
}

- (id)activeLayout
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  id v3 = [WeakRetained activeLayout];

  return v3;
}

- (BOOL)callLayoutUsesAutoShift
{
  id v3 = +[UIKeyboardInputModeController sharedInputModeController];
  int v4 = [v3 currentInputMode];
  int v5 = [v4 isExtensionInputMode];

  if (v5) {
    return self->m_usesAutoShiftFor3PK;
  }
  p_presentationDelegate = &self->_presentationDelegate;
  id WeakRetained = objc_loadWeakRetained((id *)p_presentationDelegate);
  uint64_t v9 = [WeakRetained layout];

  if (!v9) {
    return 1;
  }
  id v10 = objc_loadWeakRetained((id *)p_presentationDelegate);
  uint64_t v11 = [v10 layout];
  char v12 = objc_opt_respondsToSelector();

  if ((v12 & 1) == 0) {
    return 0;
  }
  id v13 = objc_loadWeakRetained((id *)p_presentationDelegate);
  uint64_t v14 = [v13 layout];
  char v15 = [v14 usesAutoShift];

  return v15;
}

- (BOOL)callLayoutIgnoresShiftState
{
  p_presentationDelegate = &self->_presentationDelegate;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  int v4 = [WeakRetained layout];

  if (!v4) {
    return 0;
  }
  id v5 = objc_loadWeakRetained((id *)p_presentationDelegate);
  id v6 = [v5 layout];
  char v7 = objc_opt_respondsToSelector();

  if ((v7 & 1) == 0) {
    return 0;
  }
  id v8 = objc_loadWeakRetained((id *)p_presentationDelegate);
  uint64_t v9 = [v8 layout];
  char v10 = [v9 ignoresShiftState];

  return v10;
}

- (BOOL)callLayoutIsShiftKeyPlaneChooser
{
  p_presentationDelegate = &self->_presentationDelegate;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  int v4 = [WeakRetained layout];

  if (!v4) {
    return 1;
  }
  id v5 = objc_loadWeakRetained((id *)p_presentationDelegate);
  id v6 = [v5 layout];
  char v7 = objc_opt_respondsToSelector();

  if ((v7 & 1) == 0) {
    return 0;
  }
  id v8 = objc_loadWeakRetained((id *)p_presentationDelegate);
  uint64_t v9 = [v8 layout];
  char v10 = [v9 isShiftKeyPlaneChooser];

  return v10;
}

- (BOOL)callLayoutIsShiftKeyBeingHeld
{
  p_presentationDelegate = &self->_presentationDelegate;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  int v4 = [WeakRetained layout];
  char v5 = objc_opt_respondsToSelector();

  if ((v5 & 1) == 0) {
    return 0;
  }
  id v6 = objc_loadWeakRetained((id *)p_presentationDelegate);
  char v7 = [v6 layout];
  char v8 = [v7 isShiftKeyBeingHeld];

  return v8;
}

- (void)callLayoutSetShift:(BOOL)a3
{
  BOOL v3 = a3;
  p_presentationDelegate = &self->_presentationDelegate;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  id v6 = [WeakRetained layout];
  char v7 = objc_opt_respondsToSelector();

  if (v7)
  {
    id v9 = objc_loadWeakRetained((id *)p_presentationDelegate);
    char v8 = [v9 layout];
    [v8 setShift:v3];
  }
}

- (void)callLayoutSetAutoshift:(BOOL)a3
{
  BOOL v3 = a3;
  p_presentationDelegate = &self->_presentationDelegate;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  id v6 = [WeakRetained layout];
  char v7 = objc_opt_respondsToSelector();

  if (v7)
  {
    id v9 = objc_loadWeakRetained((id *)p_presentationDelegate);
    char v8 = [v9 layout];
    [v8 setAutoshift:v3];
  }
}

- (void)callLayoutLongPressAction
{
  BOOL v3 = [(_UIKeyboardStateManager *)self activeLayout];
  char v4 = objc_opt_respondsToSelector();

  if (v4)
  {
    id v5 = [(_UIKeyboardStateManager *)self activeLayout];
    [v5 longPressAction];
  }
}

- (void)callLayoutUpdateLocalizedKeys
{
  p_presentationDelegate = &self->_presentationDelegate;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  char v4 = [WeakRetained layout];
  char v5 = objc_opt_respondsToSelector();

  if (v5)
  {
    id v7 = objc_loadWeakRetained((id *)p_presentationDelegate);
    id v6 = [v7 layout];
    [v6 updateLocalizedKeys:0];
  }
}

- (void)callLayoutUpdateAllLocalizedKeys
{
  p_presentationDelegate = &self->_presentationDelegate;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  char v4 = [WeakRetained layout];
  char v5 = objc_opt_respondsToSelector();

  if (v5)
  {
    id v7 = objc_loadWeakRetained((id *)p_presentationDelegate);
    id v6 = [v7 layout];
    [v6 updateLocalizedKeys:1];
  }
}

- (UIView)inputOverlayContainer
{
  return (UIView *)[(_UIKeyboardStateManager *)self inputOverlayContainerForCandidateView:0];
}

- (id)inputOverlayContainerForCandidateView:(BOOL)a3
{
  BOOL v3 = a3;
  if ([(_UIKeyboardStateManager *)self usesCandidateSelection])
  {
    if ((UIKeyboardGetSafeDeviceIdiom() & 0xFFFFFFFFFFFFFFFBLL) == 1)
    {
      char v5 = [(_UIKeyboardStateManager *)self delegate];
      id v6 = [v5 textInputView];
      id v7 = +[_UIPopoverView popoverViewContainingView:v6];
      if (v7)
      {

        if (!v3) {
          goto LABEL_13;
        }
        goto LABEL_9;
      }

      if (v3)
      {
LABEL_9:
        id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
        id v9 = [WeakRetained candidateController];
        if ([v9 inlineRectIsVertical])
        {
          char v10 = +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate];
          uint64_t v11 = [v10 visualModeManager];
          int v12 = [v11 shouldShowWithinAppWindow];

          if (v12)
          {
            id v13 = +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate];
            uint64_t v14 = [v13 keyboardWindow];
            goto LABEL_16;
          }
        }
        else
        {
        }
LABEL_13:
        id v15 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
        int v16 = [v15 isEmojiPopoverPresented];

        if (v16)
        {
          id v13 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
          int v17 = [v13 emojiPopoverController];
          int v18 = [v17 popoverPresentationController];
          uint64_t v19 = [v18 containerView];

          goto LABEL_17;
        }
        id v13 = +[UIPeripheralHost sharedInstance];
        uint64_t v14 = [v13 transformedContainerView];
LABEL_16:
        uint64_t v19 = (void *)v14;
LABEL_17:

        if (v19) {
          goto LABEL_30;
        }
      }
    }
    else if (v3)
    {
      goto LABEL_9;
    }
  }
  id v20 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  int v21 = [v20 selectionScrolling];

  if (!v21
    || ([(_UIKeyboardStateManager *)self inputDelegate],
        id v22 = objc_claimAutoreleasedReturnValue(),
        [v22 textInputView],
        uint64_t v19 = objc_claimAutoreleasedReturnValue(),
        v22,
        !v19))
  {
    if (![(_UIKeyboardStateManager *)self usesCandidateSelection]
      || ![(_UIKeyboardStateManager *)self showsCandidateInline]
      && ![(_UIKeyboardStateManager *)self floatingForced]
      || [(_UIKeyboardStateManager *)self isMinimized]
      || (+[UIPeripheralHost sharedInstance],
          int v23 = objc_claimAutoreleasedReturnValue(),
          [v23 transformedContainerView],
          uint64_t v19 = objc_claimAutoreleasedReturnValue(),
          v23,
          !v19))
    {
      char v24 = [(_UIKeyboardStateManager *)self inputDelegateManager];

      if (!v24
        || ([(_UIKeyboardStateManager *)self inputDelegateManager],
            uint64_t v25 = objc_claimAutoreleasedReturnValue(),
            [v25 automaticallySelectedOverlay],
            uint64_t v19 = objc_claimAutoreleasedReturnValue(),
            v25,
            !v19))
      {
        uint64_t v26 = [(_UIKeyboardStateManager *)self inputDelegate];
        char v27 = objc_opt_respondsToSelector();

        if ((v27 & 1) == 0
          || ([(_UIKeyboardStateManager *)self inputDelegate],
              uint64_t v28 = objc_claimAutoreleasedReturnValue(),
              [v28 textInputView],
              uint64_t v19 = objc_claimAutoreleasedReturnValue(),
              v28,
              !v19))
        {
          int v29 = +[UIPeripheralHost sharedInstance];
          uint64_t v19 = [v29 transformedContainerView];
        }
      }
    }
  }
LABEL_30:
  return v19;
}

- (CGRect)correctionRect
{
  [(_UIKeyboardStateManager *)self getCorrectionRectIsVertical:0];
  result.size.CGFloat height = v5;
  result.size.CGFloat width = v4;
  result.origin.CGFloat y = v3;
  result.origin.CGFloat x = v2;
  return result;
}

- (CGRect)getCorrectionRectIsVertical:(BOOL *)a3
{
  CGFloat x = *MEMORY[0x1E4F1DB20];
  CGFloat y = *(double *)(MEMORY[0x1E4F1DB20] + 8);
  CGFloat width = *(double *)(MEMORY[0x1E4F1DB20] + 16);
  CGFloat height = *(double *)(MEMORY[0x1E4F1DB20] + 24);
  id v9 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  char v10 = [v9 markedTextRange];

  uint64_t v11 = [(_UIKeyboardStateManager *)self inputManagerState];
  uint64_t v12 = [v11 inputIndex];
  unint64_t v13 = v12 - [(_UIKeyboardStateManager *)self candidateViewOffset];

  if (v13 >= 5) {
    unint64_t v14 = 5;
  }
  else {
    unint64_t v14 = v13;
  }
  if (!v10) {
    goto LABEL_13;
  }
  if ([(_UIKeyboardStateManager *)self candidateViewOffset] == 0x7FFFFFFFFFFFFFFFLL) {
    goto LABEL_10;
  }
  id v15 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  int v16 = [v10 start];
  int v17 = objc_msgSend(v15, "positionFromPosition:offset:", v16, -[_UIKeyboardStateManager candidateViewOffset](self, "candidateViewOffset"));

  int v18 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  uint64_t v19 = [v18 positionFromPosition:v17 offset:v14];

  if (!v19
    || ([(_UIKeyboardStateManager *)self inputDelegate],
        id v20 = objc_claimAutoreleasedReturnValue(),
        [v10 end],
        int v21 = objc_claimAutoreleasedReturnValue(),
        uint64_t v22 = [v20 comparePosition:v19 toPosition:v21],
        v21,
        v20,
        v22 == 1))
  {
    uint64_t v23 = [v10 end];

    uint64_t v19 = (void *)v23;
  }
  char v24 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  uint64_t v25 = [v24 textRangeFromPosition:v17 toPosition:v19];

  char v10 = (void *)v25;
  if (v25)
  {
LABEL_10:
    uint64_t v26 = [(_UIKeyboardStateManager *)self inputDelegate];
    [v26 _lastRectForRange:v10];
    CGFloat x = v27;
    CGFloat y = v28;
    CGFloat width = v29;
    CGFloat height = v30;

    double v31 = [(_UIKeyboardStateManager *)self inputDelegate];
    [v31 firstRectForRange:v10];
    CGFloat v33 = v32;
    CGFloat v35 = v34;
    CGFloat v37 = v36;
    CGFloat v39 = v38;

    v122.origin.CGFloat x = x;
    v122.origin.CGFloat y = y;
    v122.size.CGFloat width = width;
    v122.size.CGFloat height = height;
    v131.origin.CGFloat x = v33;
    v131.origin.CGFloat y = v35;
    v131.size.CGFloat width = v37;
    v131.size.CGFloat height = v39;
    if (!CGRectEqualToRect(v122, v131))
    {
      v123.origin.CGFloat x = x;
      v123.origin.CGFloat y = y;
      v123.size.CGFloat width = width;
      v123.size.CGFloat height = height;
      v132.origin.CGFloat x = v33;
      v132.origin.CGFloat y = v35;
      v132.size.CGFloat width = v37;
      v132.size.CGFloat height = v39;
      CGRect v124 = CGRectUnion(v123, v132);
      CGFloat x = v124.origin.x;
      CGFloat y = v124.origin.y;
      CGFloat width = v124.size.width;
      CGFloat height = v124.size.height;
    }
    char v40 = 1;
  }
  else
  {
LABEL_13:
    char v40 = 0;
  }
  long long v41 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  uint64_t v42 = [v41 asyncCapableInputDelegate];
  if (!v42)
  {

    goto LABEL_25;
  }
  long long v43 = (void *)v42;
  double v44 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  int v45 = [v44 hasMarkedText];

  if (!v45) {
    goto LABEL_25;
  }
  uint64_t v46 = [(_UIKeyboardStateManager *)self characterRectsForCharacterRange];

  if (v46)
  {
    double v47 = [(_UIKeyboardStateManager *)self characterRectsForCharacterRange];
    char v48 = [v47 firstObject];
    [v48 rectValue];
    CGFloat x = v49;
    CGFloat y = v50;
    CGFloat width = v51;
    CGFloat height = v52;

    long long v53 = [(_UIKeyboardStateManager *)self characterRectsForCharacterRange];
    long long v54 = [v53 lastObject];
    [v54 rectValue];
    CGFloat v56 = v55;
    CGFloat v58 = v57;
    CGFloat v60 = v59;
    CGFloat v62 = v61;

    if ([(_UIKeyboardStateManager *)self candidateViewOffset] != 0x7FFFFFFFFFFFFFFFLL)
    {
      unint64_t v63 = [(_UIKeyboardStateManager *)self candidateViewOffset];
      long long v64 = [(_UIKeyboardStateManager *)self characterRectsForCharacterRange];
      unint64_t v65 = [v64 count];

      if (v63 < v65)
      {
        long long v66 = [(_UIKeyboardStateManager *)self characterRectsForCharacterRange];
        id v67 = objc_msgSend(v66, "objectAtIndexedSubscript:", -[_UIKeyboardStateManager candidateViewOffset](self, "candidateViewOffset"));
        [v67 rectValue];
        CGFloat x = v68;
        CGFloat y = v69;
        CGFloat width = v70;
        CGFloat height = v71;
      }
      uint64_t v72 = [(_UIKeyboardStateManager *)self characterRectsForCharacterRange];
      unint64_t v73 = [v72 count];

      if (v14 < v73)
      {
        id v74 = [(_UIKeyboardStateManager *)self characterRectsForCharacterRange];
        uint64_t v75 = [v74 objectAtIndexedSubscript:v14];
        [v75 rectValue];
        CGFloat v56 = v76;
        CGFloat v58 = v77;
        CGFloat v60 = v78;
        CGFloat v62 = v79;
      }
    }
  }
  else
  {
    long long v80 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    [v80 textLastRect];
    CGFloat x = v81;
    CGFloat y = v82;
    CGFloat width = v83;
    CGFloat height = v84;

    uint64_t v85 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    [v85 textFirstRect];
    CGFloat v56 = v86;
    CGFloat v58 = v87;
    CGFloat v60 = v88;
    CGFloat v62 = v89;

    v125.origin.CGFloat x = x;
    v125.origin.CGFloat y = y;
    v125.size.CGFloat width = width;
    v125.size.CGFloat height = height;
    v133.origin.CGFloat x = v56;
    v133.origin.CGFloat y = v58;
    v133.size.CGFloat width = v60;
    v133.size.CGFloat height = v62;
    if (CGRectEqualToRect(v125, v133)) {
      goto LABEL_25;
    }
  }
  v126.origin.CGFloat x = x;
  v126.origin.CGFloat y = y;
  v126.size.CGFloat width = width;
  v126.size.CGFloat height = height;
  v134.origin.CGFloat x = v56;
  v134.origin.CGFloat y = v58;
  v134.size.CGFloat width = v60;
  v134.size.CGFloat height = v62;
  CGRect v127 = CGRectUnion(v126, v134);
  CGFloat x = v127.origin.x;
  CGFloat y = v127.origin.y;
  CGFloat width = v127.size.width;
  CGFloat height = v127.size.height;
LABEL_25:
  v128.origin.CGFloat x = x;
  v128.origin.CGFloat y = y;
  v128.size.CGFloat width = width;
  v128.size.CGFloat height = height;
  if (CGRectIsEmpty(v128))
  {
    double v90 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    double v91 = [v90 selectedTextRange];

    if (v91)
    {
      long long v92 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      id v93 = [v91 start];
      [v92 caretRectForPosition:v93];
      CGFloat x = v94;
      CGFloat y = v95;
      CGFloat width = v96;
      CGFloat height = v97;
    }
  }
  v129.origin.CGFloat x = x;
  v129.origin.CGFloat y = y;
  v129.size.CGFloat width = width;
  v129.size.CGFloat height = height;
  if (CGRectIsNull(v129))
  {
    double v98 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    uint64_t v99 = [v98 privateInputDelegate];
    if (v99)
    {
      id v100 = (void *)v99;
      long long v101 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      long long v102 = objc_msgSend(v101, "__content");

      if (!v102) {
        goto LABEL_34;
      }
      double v98 = [(_UIKeyboardStateManager *)self textInteractionAssistant];
      long long v103 = [v98 activeSelection];
      [v103 caretRect];
      CGFloat x = v104;
      CGFloat y = v105;
      CGFloat width = v106;
      CGFloat height = v107;
    }
  }
LABEL_34:
  char v108 = v40 ^ 1;
  if (!a3) {
    char v108 = 1;
  }
  if ((v108 & 1) == 0)
  {
    char v109 = [(_UIKeyboardStateManager *)self inputDelegate];
    char v110 = objc_opt_respondsToSelector();

    if (v110)
    {
      id v111 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      char v112 = [v111 selectionRectsForRange:v10];
      id v113 = [v112 lastObject];

      *a3 = [v113 isVertical];
      if ([v113 isVertical])
      {
        [v113 rect];
        CGFloat x = v114;
        CGFloat y = v115;
        CGFloat width = v116;
        CGFloat height = v117;
      }
    }
  }

  double v118 = x;
  double v119 = y;
  double v120 = width;
  double v121 = height;
  result.size.CGFloat height = v121;
  result.size.CGFloat width = v120;
  result.origin.CGFloat y = v119;
  result.origin.CGFloat x = v118;
  return result;
}

- (void)updateTextCandidateView
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained updateTextCandidateView];
}

- (void)sendCallbacksForPreCorrectionsDisplay
{
  double v3 = [(_UIKeyboardStateManager *)self inputDelegate];
  char v4 = objc_opt_respondsToSelector();

  if (v4)
  {
    id v5 = [(_UIKeyboardStateManager *)self inputDelegate];
    [v5 _willShowCorrections];
  }
}

- (void)sendCallbacksForPostCorrectionsRemoval
{
  double v3 = [(_UIKeyboardStateManager *)self inputDelegate];
  char v4 = objc_opt_respondsToSelector();

  if (v4)
  {
    id v5 = [(_UIKeyboardStateManager *)self inputDelegate];
    [v5 _didHideCorrections];
  }
}

- (void)touchAutocorrectPromptTimer
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained touchAutocorrectPromptTimer];
}

- (void)clearDelayDeleteTimer
{
  [(UIKeyboardScheduledTask *)self->m_delayDeleteTask invalidate];
  m_delayDeleteTask = self->m_delayDeleteTask;
  self->m_delayDeleteTask = 0;
}

- (void)touchDelayDeleteTimerWithThreshold:(double)a3
{
  [(_UIKeyboardStateManager *)self clearDelayDeleteTimer];
  if (qword_1EB25FC80 != -1) {
    dispatch_once(&qword_1EB25FC80, &__block_literal_global_1613);
  }
  id v5 = [(_UIKeyboardStateManager *)self taskQueue];
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = __62___UIKeyboardStateManager_touchDelayDeleteTimerWithThreshold___block_invoke_3;
  v8[3] = &unk_1E52E34C8;
  void v8[4] = self;
  id v6 = [v5 scheduleTask:v8 timeInterval:0 repeats:qword_1EB25FC78 breadcrumb:a3];
  m_delayDeleteTask = self->m_delayDeleteTask;
  self->m_delayDeleteTask = v6;
}

- (void)clearAutocorrectPromptTimer
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained clearAutocorrectPromptTimer];
}

- (id)_rangeForAutocorrectionText:(id)a3
{
  id v4 = a3;
  if (!+[UIKeyboard usesInputSystemUI]) {
    goto LABEL_4;
  }
  if (!self->_pendingAutocorrectRange) {
    goto LABEL_4;
  }
  id v5 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  id v6 = [(UITextRange *)self->_pendingAutocorrectRange end];
  id v7 = [v5 _rangeOfText:v4 endingAtPosition:v6];

  if (!v7)
  {
LABEL_4:
    char v8 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    id v9 = [v8 selectedTextRange];

    if (!v9) {
      goto LABEL_8;
    }
    if ([v4 length])
    {
      char v10 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      uint64_t v11 = [v9 end];
      id v7 = [v10 _rangeOfText:v4 endingAtPosition:v11];

      if (v7)
      {
LABEL_10:

        goto LABEL_11;
      }
      if ([v9 isEmpty])
      {
LABEL_8:
        id v7 = 0;
        goto LABEL_10;
      }
    }
    id v7 = v9;
    goto LABEL_10;
  }
LABEL_11:

  return v7;
}

- (id)autocorrectPromptRectsFromFirstDelegateRect:(CGRect)a3 lastDelegateRect:(CGRect)a4
{
  CGFloat height = a4.size.height;
  CGFloat width = a4.size.width;
  CGFloat y = a4.origin.y;
  CGFloat x = a4.origin.x;
  CGFloat v8 = a3.size.height;
  CGFloat v9 = a3.size.width;
  CGFloat v10 = a3.origin.y;
  CGFloat v11 = a3.origin.x;
  v36[6] = *MEMORY[0x1E4F143B8];
  if (CGRectIsNull(a3))
  {
    uint64_t v13 = 0;
  }
  else
  {
    *(CGFloat *)CGFloat v35 = v11;
    *(CGFloat *)&v35[1] = v10;
    uint64_t v13 = 1;
    *(CGFloat *)double v36 = v9;
    *(CGFloat *)&v36[1] = v8;
  }
  v38.origin.CGFloat x = x;
  v38.origin.CGFloat y = y;
  v38.size.CGFloat width = width;
  v38.size.CGFloat height = height;
  if (!CGRectIsEmpty(v38))
  {
    v39.origin.CGFloat x = x;
    v39.origin.CGFloat y = y;
    v39.size.CGFloat width = width;
    v39.size.CGFloat height = height;
    v40.origin.CGFloat x = v11;
    v40.origin.CGFloat y = v10;
    v40.size.CGFloat width = v9;
    v40.size.CGFloat height = v8;
    if (!CGRectIntersectsRect(v39, v40))
    {
      unint64_t v14 = (CGFloat *)&v35[4 * v13];
      CGFloat *v14 = x;
      v14[1] = y;
      ++v13;
      v14[2] = width;
      v14[3] = height;
    }
  }
  id v15 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:v13];
  if (v13)
  {
    int v16 = (double *)v36;
    do
    {
      int v17 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      int v18 = [v17 textInputView];

      id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      id v20 = [(_UIKeyboardStateManager *)self inputOverlayContainer];
      double v21 = *(v16 - 2);
      double v22 = *(v16 - 1);
      double v23 = *v16;
      double v24 = v16[1];
      v16 += 4;
      objc_msgSend(WeakRetained, "convertRectToAutocorrectRect:delegateView:container:", v18, v20, v21, v22, v23, v24);
      double v26 = v25;
      double v28 = v27;
      double v30 = v29;
      double v32 = v31;

      CGFloat v33 = +[UISimpleSelectionRect rectWithCGRect:](UISimpleSelectionRect, "rectWithCGRect:", v26, v28, v30, v32);
      [v15 addObject:v33];

      --v13;
    }
    while (v13);
  }
  return v15;
}

- (void)updateAutocorrectPrompt:(id)a3
{
  p_presentationDelegate = &self->_presentationDelegate;
  id v4 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)p_presentationDelegate);
  [WeakRetained updateAutocorrectPrompt:v4];
}

- (void)updateAutocorrectPrompt:(id)a3 executionContext:(id)a4
{
  p_presentationDelegate = &self->_presentationDelegate;
  id v6 = a4;
  id v7 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)p_presentationDelegate);
  [WeakRetained updateAutocorrectPrompt:v7 executionContext:v6];
}

- (void)insertText:(id)a3 withAlternativePredictions:(id)a4
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  CGFloat v8 = [MEMORY[0x1E4F1CA48] array];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v9 = v7;
  uint64_t v10 = [v9 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)v17;
    do
    {
      uint64_t v13 = 0;
      do
      {
        if (*(void *)v17 != v12) {
          objc_enumerationMutation(v9);
        }
        unint64_t v14 = objc_msgSend(*(id *)(*((void *)&v16 + 1) + 8 * v13), "candidate", (void)v16);
        [v8 addObject:v14];

        ++v13;
      }
      while (v11 != v13);
      uint64_t v11 = [v9 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v11);
  }

  id v15 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  [v15 insertText:v6 alternatives:v8 style:1];
}

- (BOOL)applyAutocorrection:(id)a3
{
  id v4 = a3;
  id v5 = v4;
  if ((!v4 || [v4 slotID]) && objc_msgSend(v5, "customInfoType") != 4096)
  {
    LOBYTE(v6) = 0;
    goto LABEL_59;
  }
  if (![(_UIKeyboardStateManager *)self hasAsyncCapableInputDelegate])
  {
    unint64_t v14 = +[UIKBAnalyticsDispatcher sharedInstance];
    uint64_t v15 = [v14 nextCandidateReplacementSource];

    if (v15 != 1) {
      goto LABEL_19;
    }
    if ([v5 isToucanInlineCompletionCandidate])
    {
      long long v16 = +[UIKBAnalyticsDispatcher sharedInstance];
      long long v17 = v16;
      uint64_t v18 = 6;
    }
    else
    {
      long long v19 = [v5 input];
      uint64_t v20 = [v19 length];

      if (!v20) {
        goto LABEL_17;
      }
      long long v16 = +[UIKBAnalyticsDispatcher sharedInstance];
      long long v17 = v16;
      uint64_t v18 = 3;
    }
    [v16 setNextCandidateReplacementSource:v18];

LABEL_17:
    uint64_t v21 = +[UIKBAnalyticsDispatcher sharedInstance];
    uint64_t v22 = [v21 nextCandidateReplacementSource];

    if (v22 != 1)
    {
      double v23 = [v5 input];
      double v24 = +[UIKBAnalyticsDispatcher sharedInstance];
      [v24 setNextCandidateReplacementRemovedText:v23];

      double v25 = [v5 label];
      double v26 = +[UIKBAnalyticsDispatcher sharedInstance];
      [v26 setNextCandidateReplacementInsertedText:v25];

      double v27 = +[UIKBAnalyticsDispatcher sharedInstance];
      [v27 setAnalyticsSkipDidKeyPress:1];
    }
LABEL_19:
    double v28 = [v5 input];
    uint64_t v29 = [v28 length];

    if (!v29)
    {
      LOBYTE(v6) = 1;
      self->m_textInputChangesIgnored = 1;
      double v30 = [v5 candidate];
      double v32 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      [v32 insertText:v30];

      self->m_textInputChangesIgnored = 0;
LABEL_58:

      goto LABEL_59;
    }
    double v30 = [v5 input];
    if (objc_opt_respondsToSelector())
    {
      double v31 = [v5 performSelector:sel_rawInput];
    }
    else
    {
      double v31 = 0;
    }
    CGFloat v33 = [(_UIKeyboardStateManager *)self _rangeForAutocorrectionText:v30];
    if (!v33 && v31)
    {
      if ([v31 isEqual:v30])
      {
        CGFloat v33 = 0;
LABEL_36:
        LOBYTE(v6) = 0;
        goto LABEL_57;
      }
      CGFloat v33 = [(_UIKeyboardStateManager *)self _rangeForAutocorrectionText:v31];
    }
    if (!v33) {
      goto LABEL_36;
    }
    id v6 = [(_UIKeyboardStateManager *)self inputDelegate];

    if (!v6)
    {
LABEL_57:

      goto LABEL_58;
    }
    self->m_textInputChangesIgnored = 1;
    id v6 = [v5 candidate];
    if (-[_UIKeyboardStateManager currentInputModeRequiresLTRMathExpression](self, "currentInputModeRequiresLTRMathExpression")&& [v5 candidateProperty] == 1)
    {
      uint64_t v34 = [NSString stringWithFormat:@"%@%@%@", @"⁨", v6, @"⁩"];

      id v6 = (void *)v34;
    }
    CGFloat v35 = [(_UIKeyboardStateManager *)self attributedCorrectionFromTextAnimationCandidate:v5];
    double v36 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    double v68 = [v36 selectedTextRange];

    CGFloat v37 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    CGRect v38 = v37;
    if (v35) {
      [v37 replaceRange:v33 oldText:0 withAttributedText:v35 forReplaceAction:0];
    }
    else {
      [v37 replaceRange:v33 oldText:0 withText:v6 forReplaceAction:0];
    }

    CGRect v39 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    CGRect v40 = [v39 selectedTextRange];

    if (self->_pendingAutocorrectRange) {
      objc_storeStrong((id *)&self->_pendingAutocorrectRange, v40);
    }
    if (!+[UIKeyboard usesInputSystemUI]
      || ([v68 isEqual:v40] & 1) != 0
      || !self->_pendingAutocorrectRange)
    {
LABEL_53:
      long long v53 = v40;
      long long v54 = [(_UIKeyboardStateManager *)self documentState];
      double v55 = [v54 documentStateAfterReplacingText:v30 withText:v6];
      if (v55)
      {
        [(_UIKeyboardStateManager *)self setDocumentState:v55];
      }
      else
      {
        id v67 = v35;
        CGFloat v56 = (void *)MEMORY[0x1E4FAE2A8];
        [(_UIKeyboardStateManager *)self inputDelegate];
        double v57 = v65 = v6;
        CGFloat v58 = [v56 documentStateOfDocument:v57];
        [(_UIKeyboardStateManager *)self setDocumentState:v58];

        CGFloat v35 = v67;
        id v6 = v65;
      }

      self->m_textInputChangesIgnored = 0;
      LOBYTE(v6) = 1;
      goto LABEL_57;
    }
    id v41 = v68;
    long long v66 = [(_UIKeyboardStateManager *)self inputDelegate];
    if (v66 && v41)
    {
      unint64_t v63 = v40;
      uint64_t v61 = [v6 length];
      uint64_t v42 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      [v33 start];
      long long v43 = v64 = v41;
      double v44 = [v33 end];
      uint64_t v60 = [v42 offsetFromPosition:v43 toPosition:v44];

      int v45 = [v64 start];
      uint64_t v46 = [v33 end];
      uint64_t v47 = [v66 comparePosition:v45 toPosition:v46];

      uint64_t v48 = v61 - v60;
      if (v61 == v60 || v47 != 1)
      {
        CGRect v40 = v63;
        id v41 = v64;
LABEL_51:
        double v52 = [(_UIKeyboardStateManager *)self inputDelegateManager];
        [v52 setSelectedTextRange:v41];

LABEL_52:
        goto LABEL_53;
      }
      double v49 = [v64 start];
      CGFloat v62 = [v66 positionFromPosition:v49 offset:v48];

      double v50 = [v64 end];
      double v51 = [v66 positionFromPosition:v50 offset:v48];

      id v41 = [v66 textRangeFromPosition:v62 toPosition:v51];

      CGRect v40 = v63;
    }
    if (!v41) {
      goto LABEL_52;
    }
    goto LABEL_51;
  }
  LOBYTE(v6) = 1;
  self->m_textInputChangesIgnored = 1;
  id v7 = [(_UIKeyboardStateManager *)self inputDelegateManager];

  if (v7)
  {
    BOOL v8 = +[UITextSelectionDisplayInteraction isTextAccelerationUIEnabled];
    id v9 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    uint64_t v10 = [v5 candidate];
    uint64_t v11 = [v5 input];
    if (v8)
    {
      BOOL v12 = [(_UIKeyboardStateManager *)self shouldUnderlineCandidate:v5];
      v71[0] = MEMORY[0x1E4F143A8];
      v71[1] = 3221225472;
      v71[2] = __47___UIKeyboardStateManager_applyAutocorrection___block_invoke;
      v71[3] = &unk_1E52E4240;
      v71[4] = self;
      id v72 = v5;
      [v9 applyAutocorrection:v10 toString:v11 shouldUnderline:v12 withCompletionHandler:v71];

      uint64_t v13 = v72;
    }
    else
    {
      v69[0] = MEMORY[0x1E4F143A8];
      v69[1] = 3221225472;
      v69[2] = __47___UIKeyboardStateManager_applyAutocorrection___block_invoke_2;
      v69[3] = &unk_1E52E4240;
      v69[4] = self;
      id v70 = v5;
      [v9 applyAutocorrection:v10 toString:v11 withCompletionHandler:v69];

      uint64_t v13 = v70;
    }

    LOBYTE(v6) = 1;
  }
LABEL_59:

  return (char)v6;
}

- (id)attributedCorrectionFromTextAnimationCandidate:(id)a3
{
  id v4 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    BOOL v8 = 0;
    goto LABEL_10;
  }
  id v5 = v4;
  id v6 = [v5 textEffectName];
  if ([&unk_1ED3EF2C0 containsObject:v6])
  {
    uint64_t v7 = [(_UIKeyboardStateManager *)self _attributedCorrectionTextEffectAnimation:v5];
  }
  else
  {
    if (![&unk_1ED3EF2D8 containsObject:v6])
    {
      BOOL v8 = 0;
      goto LABEL_9;
    }
    uint64_t v7 = [(_UIKeyboardStateManager *)self _attributedCorrectionTextEffectStyle:v5];
  }
  BOOL v8 = (void *)v7;
LABEL_9:

LABEL_10:
  return v8;
}

- (id)_attributedCorrectionTextEffectAnimation:(id)a3
{
  id v3 = a3;
  id v4 = [v3 textEffectName];
  id v5 = +[_UITextAnimation animationWithName:v4];

  if (v5
    && ([v3 candidate],
        id v6 = objc_claimAutoreleasedReturnValue(),
        uint64_t v7 = [v6 length],
        v6,
        v7))
  {
    BOOL v8 = [v3 candidate];
    uint64_t v9 = [v8 length];

    id v10 = objc_alloc(MEMORY[0x1E4F28E48]);
    uint64_t v11 = [v3 candidate];
    BOOL v12 = (void *)[v10 initWithString:v11];

    objc_msgSend(v12, "addAttribute:value:range:", *(void *)off_1E52D2298, v5, 0, v9);
  }
  else
  {
    BOOL v12 = 0;
  }

  return v12;
}

- (id)_attributedCorrectionTextEffectStyle:(id)a3
{
  id v3 = a3;
  id v4 = [v3 textEffectName];
  id v5 = [v3 candidate];
  uint64_t v6 = [v5 length];

  if ([v4 isEqualToString:@"bold"])
  {
    id v7 = objc_alloc(MEMORY[0x1E4F28E48]);
    BOOL v8 = [v3 candidate];
    uint64_t v9 = (void *)[v7 initWithString:v8];

    uint64_t v10 = *(void *)off_1E52D2040;
    uint64_t v11 = [off_1E52D39B8 boldSystemFontOfSize:12.0];
LABEL_5:
    unint64_t v14 = (void *)v11;
    objc_msgSend(v9, "addAttribute:value:range:", v10, v11, 0, v6);

    goto LABEL_12;
  }
  if ([v4 isEqualToString:@"italic"])
  {
    id v12 = objc_alloc(MEMORY[0x1E4F28E48]);
    uint64_t v13 = [v3 candidate];
    uint64_t v9 = (void *)[v12 initWithString:v13];

    uint64_t v10 = *(void *)off_1E52D2040;
    uint64_t v11 = [off_1E52D39B8 italicSystemFontOfSize:12.0];
    goto LABEL_5;
  }
  if ([v4 isEqualToString:@"underline"])
  {
    id v15 = objc_alloc(MEMORY[0x1E4F28E48]);
    long long v16 = [v3 candidate];
    uint64_t v9 = (void *)[v15 initWithString:v16];

    long long v17 = off_1E52D23E8;
LABEL_10:
    objc_msgSend(v9, "addAttribute:value:range:", *v17, &unk_1ED3F3858, 0, v6);
    goto LABEL_12;
  }
  if ([v4 isEqualToString:@"strikeThrough"])
  {
    id v18 = objc_alloc(MEMORY[0x1E4F28E48]);
    long long v19 = [v3 candidate];
    uint64_t v9 = (void *)[v18 initWithString:v19];

    long long v17 = off_1E52D2250;
    goto LABEL_10;
  }
  uint64_t v9 = 0;
LABEL_12:

  return v9;
}

- (void)animateAutocorrectionToText:(id)a3 fromRect:(CGRect)a4
{
  double height = a4.size.height;
  double width = a4.size.width;
  double y = a4.origin.y;
  double x = a4.origin.x;
  p_presentationDelegate = &self->_presentationDelegate;
  id v9 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)p_presentationDelegate);
  objc_msgSend(WeakRetained, "animateAutocorrectionToText:fromRect:", v9, x, y, width, height);
}

- (void)animateAutocorrectionToRect:(CGRect)a3 fromRect:(CGRect)a4
{
  double height = a4.size.height;
  double width = a4.size.width;
  double y = a4.origin.y;
  double x = a4.origin.x;
  double v8 = a3.size.height;
  double v9 = a3.size.width;
  double v10 = a3.origin.y;
  double v11 = a3.origin.x;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "animateAutocorrectionToRect:fromRect:", v11, v10, v9, v8, x, y, width, height);
}

- (void)rejectAutocorrectionForPromptFade
{
  id v5 = [(_UIKeyboardStateManager *)self inputManager];
  id v3 = [(_UIKeyboardStateManager *)self autocorrectionController];
  id v4 = [v3 autocorrection];
  [v5 candidateRejected:v4];
}

- (void)fadeAutocorrectPrompt
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained fadeAutocorrectPrompt];
}

- (void)underlineCandidate:(id)a3
{
  p_presentationDelegate = &self->_presentationDelegate;
  id v4 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)p_presentationDelegate);
  [WeakRetained underlineCandidate:v4];
}

- (BOOL)shouldUnderlineCandidate:(id)a3
{
  id v3 = a3;
  if ((objc_opt_respondsToSelector() & 1) != 0
    && [v3 performSelector:sel_shouldHintAtAlternativeInput])
  {
    BOOL v4 = 1;
  }
  else if ([v3 confidence])
  {
    BOOL v4 = [v3 confidence] != 3;
  }
  else
  {
    BOOL v4 = 0;
  }

  return v4;
}

- (id)autocorrectionRecordForWord:(id)a3
{
  id v4 = a3;
  id v5 = [(_UIKeyboardStateManager *)self inputManagerState];
  uint64_t v6 = [v5 inputString];
  int v7 = [v4 isEqualToString:v6];

  if (!v7
    || ([(_UIKeyboardStateManager *)self inputManagerState],
        double v8 = objc_claimAutoreleasedReturnValue(),
        [v8 autocorrectionRecordForInputString],
        double v9 = objc_claimAutoreleasedReturnValue(),
        v8,
        !v9))
  {
    if (+[UITextSelectionDisplayInteraction isTextAccelerationUIEnabled])
    {
      double v10 = [(_UIKeyboardStateManager *)self _textChoicesAssistant];
      double v9 = [v10 candidateForFinalString:v4];
    }
    else
    {
      double v9 = 0;
    }
  }

  return v9;
}

- (BOOL)delegateSuggestionsForCurrentInput
{
  id v3 = [(UITextInputTraits *)self->m_traits textSuggestionDelegate];
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
LABEL_34:
    BOOL v28 = 1;
    goto LABEL_35;
  }
  if ((objc_opt_respondsToSelector() & 1) == 0 || [v3 hasCurrentSuggestions])
  {
    id v4 = [(_UIKeyboardStateManager *)self inputDelegate];
    id v5 = [v4 _fullText];

    uint64_t v6 = [(_UIKeyboardStateManager *)self inputDelegate];
    uint64_t v7 = [v6 _selectedNSRange];

    double v8 = (void *)[v3 suggestionsForString:v5 inputIndex:v7];
    unint64_t v10 = v9;
    id v11 = v8;
    if ([v11 count])
    {
      id v12 = [v11 objectAtIndex:0];
    }
    else
    {
      id v12 = 0;
    }
    uint64_t v13 = [v12 length];
    if (v13)
    {
      unint64_t v14 = v13;
      if ([v5 isEqualToString:v12])
      {
LABEL_28:
        if ((unint64_t)[v11 count] < 2)
        {
          double v32 = 0;
        }
        else
        {
          double v30 = [v11 objectAtIndex:1];
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();

          if (isKindOfClass)
          {
            double v32 = [v11 objectAtIndex:1];
          }
          else
          {
            CGFloat v33 = (void *)MEMORY[0x1E4FAE318];
            uint64_t v34 = [v11 objectAtIndex:1];
            double v32 = [v33 candidateWithCandidate:v34 forInput:v5];
          }
        }
        [(_UIKeyboardStateManager *)self setAutocorrection:v32];
        [(_UIKeyboardStateManager *)self syncInputManagerToKeyboardState];

        goto LABEL_34;
      }
      if (!delegateSuggestionsForCurrentInput_nbspString)
      {
        uint64_t v15 = [NSString _stringWithUnichar:160];
        long long v16 = (void *)delegateSuggestionsForCurrentInput_nbspString;
        delegateSuggestionsForCurrentInput_nbspString = v15;
      }
      long long v17 = (void *)[objc_alloc(MEMORY[0x1E4F28E78]) initWithString:v12];
      objc_msgSend(v17, "replaceOccurrencesOfString:withString:options:range:", @" ", delegateSuggestionsForCurrentInput_nbspString, 2, 0, v14);
      self->m_textInputChangesIgnored = 1;
      id v18 = [(_UIKeyboardStateManager *)self inputDelegate];
      [v18 _selectAll];

      [(_UIKeyboardStateManager *)self syncDocumentStateToInputDelegate];
      self->m_textInputChangesIgnored = 0;
      long long v19 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      [v19 insertText:v17 updateInputSource:0];

      if (v10 >= v14) {
        unint64_t v20 = v14;
      }
      else {
        unint64_t v20 = v10;
      }
      if (v14 > v10)
      {
        self->m_textInputChangesIgnored = 1;
        uint64_t v21 = [(_UIKeyboardStateManager *)self inputDelegate];
        [(id)v21 _moveCurrentSelection:(v20 - v14)];

        uint64_t v22 = [(_UIKeyboardStateManager *)self inputDelegate];
        LOBYTE(v21) = objc_opt_respondsToSelector();

        if (v21)
        {
          char v23 = [v12 _isNaturallyRTL];
          if (v20 > 5 || (v23 & 1) != 0)
          {
            char v29 = v23 ^ 1;
            if (v20 < v14 - 5) {
              char v29 = 1;
            }
            if (v29) {
              goto LABEL_26;
            }
            double v24 = [(_UIKeyboardStateManager *)self inputDelegate];
            double v25 = v24;
            unint64_t v26 = v14 - 1;
          }
          else
          {
            double v24 = [(_UIKeyboardStateManager *)self inputDelegate];
            double v25 = v24;
            unint64_t v26 = 0;
          }
          objc_msgSend(v24, "_scrollRangeToVisible:animated:", v26, 0, 0);
        }
LABEL_26:
        [(_UIKeyboardStateManager *)self syncDocumentStateToInputDelegate];
        self->m_textInputChangesIgnored = 0;
      }
    }
    else
    {
      self->m_textInputChangesIgnored = 1;
      double v27 = [(_UIKeyboardStateManager *)self inputDelegate];
      [v27 _selectAll];

      [(_UIKeyboardStateManager *)self syncDocumentStateToInputDelegate];
      self->m_textInputChangesIgnored = 0;
      long long v17 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      [v17 insertText:&stru_1ED0E84C0 updateInputSource:0];
    }

    goto LABEL_28;
  }
  BOOL v28 = 0;
LABEL_35:

  return v28;
}

- (BOOL)canShowAppConnections
{
  id v3 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  id v4 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  id v5 = [v4 beginningOfDocument];
  uint64_t v6 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  uint64_t v7 = [v6 endOfDocument];
  uint64_t v8 = [v3 comparePosition:v5 toPosition:v7];

  unint64_t v9 = [(_UIKeyboardStateManager *)self textInputTraits];
  unint64_t v10 = [v9 textContentType];

  if (v8) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = v10 == 0;
  }
  return !v11;
}

- (void)generateCandidates
{
}

- (void)generateCandidatesWithOptions:(int)a3
{
  char v3 = a3;
  v55[1] = *MEMORY[0x1E4F143B8];
  if ((a3 & 0x10) == 0) {
    [(_UIKeyboardStateManager *)self setCurrentCandidateRequest:0];
  }
  if (![(_UIKeyboardStateManager *)self canShowPredictionBar]
    && ![(_UIKeyboardStateManager *)self usesCandidateSelection])
  {
    [(_UIKeyboardStateManager *)self setCandidates:0];
  }
  id v5 = [(_UIKeyboardStateManager *)self delegateAsResponder];
  if (+[UIKeyboardCameraSession shouldShowTextSuggestionForResponder:v5])
  {
    uint64_t v6 = [(_UIKeyboardStateManager *)self autocorrectionController];
    uint64_t v7 = [v6 autocorrectionList];
    uint64_t v8 = [v7 predictions];
    BOOL v9 = [v8 count] == 0;
  }
  else
  {
    BOOL v9 = 0;
  }

  BOOL v10 = [(_UIKeyboardStateManager *)self canShowAppConnections];
  if (![(_UIKeyboardStateManager *)self canShowPredictionBar])
  {
    BOOL v11 = [(_UIKeyboardStateManager *)self usesCandidateSelection];
    BOOL v12 = !self->m_userChangedSelection || v11;
    if (!v12 && !v10 && !v9)
    {
      [(_UIKeyboardStateManager *)self setAutocorrection:0];
      return;
    }
  }
  if (!v9
    && [(_UIKeyboardStateManager *)self _isShowingSuggestionForKeyboardCamera])
  {
    [(_UIKeyboardStateManager *)self setSuggestions:0];
  }
  uint64_t v13 = [(_UIKeyboardStateManager *)self delegateAsResponder];
  if ([v13 _shouldDisplayWritingToolsCandidateOptions])
  {
    unint64_t v14 = [(_UIKeyboardStateManager *)self autocorrectionController];
    uint64_t v15 = [v14 autocorrectionList];
    long long v16 = [v15 predictions];
    uint64_t v17 = [v16 count];

    if (!v17)
    {
      int v18 = 1;
      goto LABEL_23;
    }
  }
  else
  {
  }
  long long v19 = [(_UIKeyboardStateManager *)self autocorrectionController];
  unint64_t v20 = [v19 textSuggestionList];
  int v18 = [v20 isShowingSuggestionForWritingTools];

  if (v18)
  {
    [(_UIKeyboardStateManager *)self setSuggestions:0];
    int v18 = 0;
  }
LABEL_23:
  if ((v3 & 4) == 0)
  {
    uint64_t v21 = [(UITextInputTraits *)self->m_traits textSuggestionDelegate];
    if (v21)
    {
      uint64_t v22 = (void *)v21;
      BOOL v23 = [(_UIKeyboardStateManager *)self delegateSuggestionsForCurrentInput];

      if (v23)
      {
        double v24 = [(_UIKeyboardStateManager *)self autocorrectionController];
        unsigned int v25 = v9 & ~[v24 hasTextSuggestionCandidates];

        if (v25 != 1)
        {
          unint64_t v26 = [(_UIKeyboardStateManager *)self autocorrectionController];
          int v27 = v18 & ([v26 hasTextSuggestionCandidates] ^ 1);

          if (v27 != 1) {
            return;
          }
          goto LABEL_64;
        }
        goto LABEL_79;
      }
    }
  }
  BOOL v28 = [(_UIKeyboardStateManager *)self usesCandidateSelection];
  BOOL v29 = [(_UIKeyboardStateManager *)self utlizeEuclidModelForDictationReplacement];
  if ((v3 & 4) == 0 && v29)
  {
    [(_UIKeyboardStateManager *)self populateEuclidCandidates:v28];
    return;
  }
  if (v28)
  {
    if ((v3 & 4) != 0)
    {
      [(_UIKeyboardStateManager *)self setUserSelectedCurrentCandidate:0];
    }
    else if (v9 {
           && ([(_UIKeyboardStateManager *)self inputForMarkedText],
    }
               double v31 = objc_claimAutoreleasedReturnValue(),
               v31,
               !v31))
    {
      [(_UIKeyboardStateManager *)self _generateTextSuggestionForKeyboardCamera];
    }
    else if (v18)
    {
      double v32 = [(_UIKeyboardStateManager *)self inputForMarkedText];

      if (!v32)
      {
        CGFloat v33 = [(_UIKeyboardStateManager *)self delegateAsResponder];
        uint64_t v34 = [v33 _textSuggestionsForWritingTools];
        [(_UIKeyboardStateManager *)self setSuggestions:v34];
      }
    }
    int v45 = [(_UIKeyboardStateManager *)self inputManagerState];
    -[_UIKeyboardStateManager generateCandidatesAsynchronouslyWithRange:selectedCandidate:](self, "generateCandidatesAsynchronouslyWithRange:selectedCandidate:", 0, [v45 initialCandidateBatchCount], 0);

    uint64_t v46 = (void *)MEMORY[0x1E4FAE318];
    uint64_t v47 = [(_UIKeyboardStateManager *)self inputManagerState];
    if ([v47 suppressPlaceholderCandidate])
    {
      uint64_t v48 = [v46 candidateWithUnchangedInput:0];
    }
    else
    {
      double v49 = [(_UIKeyboardStateManager *)self _markedText];
      uint64_t v48 = [v46 candidateWithUnchangedInput:v49];
    }
    double v50 = (void *)MEMORY[0x1E4FAE310];
    double v51 = [MEMORY[0x1E4F1CA98] null];
    v55[0] = v51;
    double v52 = [MEMORY[0x1E4F1C978] arrayWithObjects:v55 count:1];
    long long v53 = [v50 setWithCandidates:v52 initialSelectedIndex:0x7FFFFFFFFFFFFFFFLL defaultCandidate:v48 sortMethods:0 sortMethodGroups:0 indexTitles:0 showExtensionCandidates:0 disambiguationCandidates:0 selectedDisambiguationCandidateIndex:0x7FFFFFFFFFFFFFFFLL];
    [(_UIKeyboardStateManager *)self setCandidates:v53];

    [(_UIKeyboardStateManager *)self updateKeyboardConfigurations];
    return;
  }
  if ([(_UIKeyboardStateManager *)self autocorrectionPreferenceForTraits]) {
    BOOL v30 = [(_UIKeyboardStateManager *)self changeCount] != 0;
  }
  else {
    BOOL v30 = 0;
  }
  BOOL v35 = [(_UIKeyboardStateManager *)self _shouldLoadPredictionsBasedOnCurrentTraits];
  char v36 = [(TIKeyboardState *)self->m_keyboardState needContactAutofill];
  if (v3 & 4) != 0 || v30 || v35 || v10 || (v36)
  {
    if ((v3 & 4) == 0) {
      goto LABEL_61;
    }
    CGRect v38 = [(_UIKeyboardStateManager *)self autocorrectionToAcceptBeforeProgressiveCandidates];

    if (v38) {
      goto LABEL_78;
    }
    CGRect v39 = [(_UIKeyboardStateManager *)self autocorrectionController];
    CGRect v40 = [v39 autocorrection];

    if ([v40 isContinuousPathConversion])
    {
    }
    else if (v40)
    {
LABEL_77:
      [(_UIKeyboardStateManager *)self setAutocorrectionToAcceptBeforeProgressiveCandidates:v40];

      goto LABEL_78;
    }
    CGRect v40 = [MEMORY[0x1E4FAE318] candidateWithUnchangedInput:&stru_1ED0E84C0];
    goto LABEL_77;
  }
  if ((UIKeyboardCurrentInputModeIsKoreanEnglishBilingual() & 1) == 0)
  {
    if (!v9)
    {
      CGFloat v37 = self;
      if (!v18)
      {
        if ([(_UIKeyboardStateManager *)self _isShowingSuggestionForKeyboardCamera])
        {
          [(_UIKeyboardStateManager *)self setSuggestions:0];
        }
        id v54 = [(_UIKeyboardStateManager *)self autocorrectionController];
        [v54 clearAutocorrectionAndNotifyObservers:1];
        goto LABEL_83;
      }
      goto LABEL_65;
    }
    goto LABEL_79;
  }
LABEL_61:
  if (![(_UIKeyboardStateManager *)self usesAutocorrectionLists]
    || ([(_UIKeyboardStateManager *)self inputDelegateManager],
        id v41 = objc_claimAutoreleasedReturnValue(),
        [v41 selectedTextRange],
        uint64_t v42 = objc_claimAutoreleasedReturnValue(),
        int v43 = [v42 _isRanged],
        v42,
        v41,
        !v43))
  {
LABEL_78:
    if (!v9)
    {
      id v54 = [(_UIKeyboardStateManager *)self autocorrectionController];
      [v54 setNeedsAutocorrection];
      goto LABEL_83;
    }
LABEL_79:
    [(_UIKeyboardStateManager *)self _generateTextSuggestionForKeyboardCamera];
    return;
  }
  if (v18)
  {
LABEL_64:
    CGFloat v37 = self;
LABEL_65:
    id v54 = [(_UIKeyboardStateManager *)v37 delegateAsResponder];
    double v44 = [v54 _textSuggestionsForWritingTools];
    [(_UIKeyboardStateManager *)self setSuggestions:v44];

LABEL_83:

    return;
  }
  [(_UIKeyboardStateManager *)self generateCandidatesFromReplacements];
}

- (void)populateEuclidCandidates:(BOOL)a3
{
  id v5 = [(_UIKeyboardStateManager *)self inputDelegate];
  char v6 = objc_opt_respondsToSelector();

  if (v6)
  {
    uint64_t v7 = [(_UIKeyboardStateManager *)self inputDelegate];
    uint64_t v8 = [v7 performSelector:sel_textLayoutController];

    BOOL v9 = -[_UITextLayoutControllerBase textInputController](v8);
  }
  else
  {
    BOOL v9 = 0;
    uint64_t v8 = 0;
  }
  BOOL v10 = [v9 _selectedText];
  BOOL v11 = +[UIDictationController activeInstance];
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = __52___UIKeyboardStateManager_populateEuclidCandidates___block_invoke;
  void v13[3] = &unk_1E52E4268;
  void v13[4] = self;
  id v14 = v10;
  BOOL v15 = a3;
  id v12 = v10;
  [v11 euclidPhoneticString:v12 maxResultsCount:10 completion:v13];
}

- (BOOL)utlizeEuclidModelForDictationReplacement
{
  char v3 = [(_UIKeyboardStateManager *)self inputDelegate];
  char v4 = objc_opt_respondsToSelector();

  if (v4)
  {
    id v5 = [(_UIKeyboardStateManager *)self inputDelegate];
    char v6 = [v5 performSelector:sel_textLayoutController];

    uint64_t v7 = -[_UITextLayoutControllerBase textInputController](v6);
    uint64_t v8 = [v7 _selectedText];
    uint64_t v9 = [v8 length];
    if (!v9)
    {
      LOBYTE(v12) = 0;
LABEL_15:

      return v12;
    }
    uint64_t v18 = 0;
    long long v19 = &v18;
    uint64_t v20 = 0x2020000000;
    uint64_t v21 = 0;
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3221225472;
    v17[2] = __67___UIKeyboardStateManager_utlizeEuclidModelForDictationReplacement__block_invoke;
    v17[3] = &unk_1E52E3F28;
    void v17[4] = &v18;
    objc_msgSend(v8, "enumerateSubstringsInRange:options:usingBlock:", 0, v9, 3, v17);
    if (v19[3] > 4)
    {
      LOBYTE(v12) = 0;
LABEL_14:
      _Block_object_dispose(&v18, 8);
      goto LABEL_15;
    }
    BOOL v10 = [v7 dictationLanguageForSelectedText];
    if (v10)
    {
      BOOL v11 = +[UIDictationController activeInstance];
      int v12 = [v11 enableEuclidAlternatives];
      if (!v12)
      {
LABEL_8:

LABEL_13:
        goto LABEL_14;
      }
      int v13 = [v10 isEqualToString:@"en_US"];

      if (v13)
      {
        BOOL v11 = +[UIDictationController sharedInstance];
        id v14 = [(_UIKeyboardStateManager *)self _sessionIdentifier];
        BOOL v15 = [v14 UUIDString];
        [v11 preheatEuclidModelWithLanguageCode:v10 clientID:v15];

        goto LABEL_8;
      }
    }
    LOBYTE(v12) = 0;
    goto LABEL_13;
  }
  LOBYTE(v12) = 0;
  return v12;
}

- (BOOL)_isShowingSuggestionForKeyboardCamera
{
  double v2 = [(_UIKeyboardStateManager *)self autocorrectionController];
  char v3 = [v2 textSuggestionList];
  char v4 = [v3 isShowingSuggestionForKeyboardCamera];

  return v4;
}

- (void)_generateTextSuggestionForKeyboardCamera
{
  v8[1] = *MEMORY[0x1E4F143B8];
  char v3 = [(_UIKeyboardStateManager *)self delegate];
  char v4 = +[UIAction _textFromCameraTitleForResponder:v3];
  id v5 = +[UITextSuggestion textSuggestionWithInputText:v4];
  [v5 setTarget:v3];
  [v5 setAction:sel_captureTextFromCamera_];
  char v6 = +[UIAction _textFromCameraImage];
  [v5 setImage:v6];

  v8[0] = v5;
  uint64_t v7 = [MEMORY[0x1E4F1C978] arrayWithObjects:v8 count:1];
  [(_UIKeyboardStateManager *)self setSuggestions:v7];
}

- (id)replacementsFromSelectedText
{
  char v3 = objc_alloc_init(UITextReplacementGeneratorForCorrections);
  char v4 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  id v5 = [v4 selectedTextRange];
  [(UITextReplacementGenerator *)v3 setReplacementRange:v5];

  char v6 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  uint64_t v7 = [(UITextReplacementGenerator *)v3 replacementRange];
  uint64_t v8 = [v6 textInRange:v7];
  [(UITextReplacementGenerator *)v3 setStringToReplace:v8];

  id v9 = [[UITextChecker alloc] _initWithAsynchronousLoading:1];
  if ([v9 _doneLoading]) {
    id v10 = v9;
  }
  else {
    id v10 = 0;
  }
  [(UITextReplacementGeneratorForCorrections *)v3 setTextChecker:v10];
  BOOL v11 = [(UITextReplacementGenerator *)v3 stringToReplace];
  int v12 = [(_UIKeyboardStateManager *)self autocorrectionRecordForWord:v11];
  [(UITextReplacementGeneratorForCorrections *)v3 setAutocorrectionRecord:v12];

  [(UITextReplacementGeneratorForCorrections *)v3 setForceHistoryReplacement:1];
  [(UITextReplacementGeneratorForCorrections *)v3 setForceAutocorrectionGuesses:1];
  [(UITextReplacementGeneratorForCorrections *)v3 setForceSpellingGuesses:1];
  [(UITextReplacementGeneratorForCorrections *)v3 setMaxCountAfterAutocorrectionGuesses:1];
  [(UITextReplacementGeneratorForCorrections *)v3 setMaxCountAfterSpellingGuesses:3];
  int v13 = [(UITextReplacementGeneratorForCorrections *)v3 replacements];

  return v13;
}

- (void)generateCandidatesFromReplacements
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  char v3 = [(_UIKeyboardStateManager *)self replacementsFromSelectedText];
  char v4 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v3, "count"));
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v5 = v3;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v19;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v19 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = *(void **)(*((void *)&v18 + 1) + 8 * i);
        BOOL v11 = (void *)MEMORY[0x1E4FAE318];
        int v12 = objc_msgSend(v10, "replacementText", (void)v18);
        int v13 = [v10 originalText];
        id v14 = [v11 candidateWithCandidate:v12 forInput:v13];
        [v4 addObject:v14];
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v18 objects:v22 count:16];
    }
    while (v7);
  }

  BOOL v15 = [MEMORY[0x1E4FAE278] listWithCorrections:0 predictions:v4];
  [v15 updateLabelsWithSmartPunctuation:self->m_smartPunctuationController];
  long long v16 = [(_UIKeyboardStateManager *)self autocorrectionController];
  [v16 setAutocorrectionList:v15];

  uint64_t v17 = [MEMORY[0x1E4FAE310] setWithCandidates:v4];
  [(_UIKeyboardStateManager *)self setCandidates:v17];
}

- (id)generateAutocorrectionReplacements:(id)a3
{
  id v4 = a3;
  uint64_t v12 = 0;
  int v13 = &v12;
  uint64_t v14 = 0x3032000000;
  BOOL v15 = __Block_byref_object_copy__38;
  long long v16 = __Block_byref_object_dispose__38;
  id v17 = 0;
  if (qword_1EB25FC90 != -1) {
    dispatch_once(&qword_1EB25FC90, &__block_literal_global_1689);
  }
  id v5 = [(_UIKeyboardStateManager *)self taskQueue];
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __62___UIKeyboardStateManager_generateAutocorrectionReplacements___block_invoke_3;
  v9[3] = &unk_1E52E3D98;
  void v9[4] = self;
  id v6 = v4;
  id v10 = v6;
  BOOL v11 = &v12;
  [v5 performSingleTask:v9 breadcrumb:qword_1EB25FC88];

  [(id)v13[5] updateLabelsWithSmartPunctuation:self->m_smartPunctuationController];
  uint64_t v7 = [(id)v13[5] predictions];
  _Block_object_dispose(&v12, 8);

  return v7;
}

- (id)generateAutocorrectionListForSelectedText
{
  if ([(_UIKeyboardStateManager *)self shouldAccessInputManagerService]
    && ([(_UIKeyboardStateManager *)self refreshKeyboardState],
        ([(TIKeyboardState *)self->m_keyboardState autocorrectionListUIDisplayed] & 1) == 0))
  {
    uint64_t v12 = 0;
    int v13 = &v12;
    uint64_t v14 = 0x3032000000;
    BOOL v15 = __Block_byref_object_copy__38;
    long long v16 = __Block_byref_object_dispose__38;
    id v17 = 0;
    id v4 = (void *)[(TIKeyboardState *)self->m_keyboardState copy];
    objc_msgSend(v4, "setAutofillMode:", +[UIKBAutofillController translateToTextInputAutofillMode:](UIKBAutofillController, "translateToTextInputAutofillMode:", -[TIKeyboardState autofillMode](self->m_keyboardState, "autofillMode")));
    objc_msgSend(v4, "setAutofillSubMode:", +[UIKBAutofillController translateToTextInputAutofillMode:](UIKBAutofillController, "translateToTextInputAutofillMode:", -[TIKeyboardState autofillSubMode](self->m_keyboardState, "autofillSubMode")));
    if (qword_1EB25FCA0 != -1) {
      dispatch_once(&qword_1EB25FCA0, &__block_literal_global_1693);
    }
    id v5 = [(_UIKeyboardStateManager *)self taskQueue];
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    void v8[2] = __68___UIKeyboardStateManager_generateAutocorrectionListForSelectedText__block_invoke_3;
    v8[3] = &unk_1E52E3D98;
    id v6 = v4;
    id v9 = v6;
    id v10 = self;
    BOOL v11 = &v12;
    [v5 performSingleTask:v8 breadcrumb:qword_1EB25FC98];

    [(id)v13[5] updateLabelsWithSmartPunctuation:self->m_smartPunctuationController];
    id v3 = (id)v13[5];

    _Block_object_dispose(&v12, 8);
  }
  else
  {
    id v3 = 0;
  }
  return v3;
}

- (id)savedAutocorrectionListForCandidate:(id)a3
{
  id v4 = a3;
  id v5 = [(_UIKeyboardStateManager *)self _textChoicesAssistant];
  id v6 = [v4 candidate];

  uint64_t v7 = [v5 listForFinalString:v6];

  return v7;
}

- (void)clearAutoDeleteTimer
{
  [(UIKeyboardScheduledTask *)self->m_autoDeleteTask invalidate];
  m_autoDeleteTask = self->m_autoDeleteTask;
  self->m_autoDeleteTask = 0;
}

- (void)touchAutoDeleteTimerWithThreshold:(double)a3 adjustForPartialCompletion:(BOOL)a4
{
  BOOL v4 = a4;
  [(_UIKeyboardStateManager *)self clearAutoDeleteTimer];
  double v7 = a3;
  if (v4) {
    double v7 = a3 - (CFAbsoluteTimeGetCurrent() - self->m_autoDeleteLastDelete);
  }
  if (qword_1EB25FCC0 != -1) {
    dispatch_once(&qword_1EB25FCC0, &__block_literal_global_1701);
  }
  uint64_t v8 = [(_UIKeyboardStateManager *)self taskQueue];
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  void v11[2] = __88___UIKeyboardStateManager_touchAutoDeleteTimerWithThreshold_adjustForPartialCompletion___block_invoke_3;
  void v11[3] = &unk_1E52E42E0;
  BOOL v12 = v4;
  void v11[4] = self;
  *(double *)&void v11[5] = a3;
  id v9 = [v8 scheduleTask:v11 timeInterval:!v4 repeats:qword_1EB25FCB8 breadcrumb:v7];
  m_autoDeleteTask = self->m_autoDeleteTask;
  self->m_autoDeleteTask = v9;
}

- (void)handleAutoDeleteContinuationOnDestinationWithDeletionCount:(unint64_t)a3
{
  id v5 = [(_UIKeyboardStateManager *)self inputDelegate];

  if (v5)
  {
    id v6 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    int v7 = [v6 _selectionAtDocumentStart];

    if (v7)
    {
      id v8 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
      [v8 forwardInputDestinationEventToUIHost:sel_performStopAutoDeleteAtDocumentStart];
    }
    else
    {
      if (!a3) {
        return;
      }
      [(_UIKeyboardStateManager *)self performAutoDeleteNumberOfTimes:a3 deleteOneWord:1 forwardToInputSource:0];
      id v8 = +[UIDictationController activeInstance];
      [v8 markKeyboardDeleteMetricEvent];
    }
  }
}

- (void)performStopAutoDeleteAtDocumentStart
{
  if (qword_1EB25FCD0 != -1) {
    dispatch_once(&qword_1EB25FCD0, &__block_literal_global_1707);
  }
  id v3 = [(_UIKeyboardStateManager *)self taskQueue];
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __63___UIKeyboardStateManager_performStopAutoDeleteAtDocumentStart__block_invoke_3;
  v4[3] = &unk_1E52E34C8;
  v4[4] = self;
  [v3 addTask:v4 breadcrumb:qword_1EB25FCC8];
}

- (void)_stopAutoDeleteAtDocumentStart
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  BOOL v4 = [WeakRetained layout];
  [v4 deactivateActiveKeys];

  [(_UIKeyboardStateManager *)self clearAutoDeleteTimer];
  [(_UIKeyboardStateManager *)self clearShiftState];
}

- (void)handleAutoDeleteWithExecutionContext:(id)a3
{
  id v4 = a3;
  if (![(_UIKeyboardStateManager *)self hasAdvancedInputDelegate]) {
    goto LABEL_10;
  }
  self->m_autoDeleteOK = 1;
  id v5 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  int v6 = [v5 _selectionAtDocumentStart];

  if (v6)
  {
    int v7 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    id v8 = [v7 forwardingInputDelegate];

    if (!+[UIKeyboard isKeyboardProcess] || v8)
    {
      [(_UIKeyboardStateManager *)self _stopAutoDeleteAtDocumentStart];
    }
    else
    {
      id v9 = [(_UIKeyboardStateManager *)self inputSystemSourceSession];
      id v10 = [v9 textOperations];
      [v10 setCustomInfoType:0x1ED14BBE0];

      BOOL v11 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", -[_UIKeyboardStateManager lastDeletionCountForFastDelete](self, "lastDeletionCountForFastDelete"));
      BOOL v12 = [v9 textOperations];
      [v12 setCustomInfo:v11];

      [v9 flushOperations];
    }
    goto LABEL_10;
  }
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  if (self->m_autoDeleteCount)
  {
    if (Current - self->m_autoDeleteLastDelete < self->m_autoDeleteInterval * 0.5)
    {
LABEL_10:
      [v4 returnExecutionToParent];
      goto LABEL_11;
    }
  }
  self->m_autoDeleteLastDelete = Current;
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = __64___UIKeyboardStateManager_handleAutoDeleteWithExecutionContext___block_invoke;
  v15[3] = &unk_1E52E34C8;
  void v15[4] = self;
  uint64_t v14 = [v4 childWithContinuation:v15];
  [(_UIKeyboardStateManager *)self handleDeleteAsRepeat:1 executionContext:v14];

LABEL_11:
}

- (void)completeHandleAutoDelete
{
  double m_autoDeleteInterval = self->m_autoDeleteInterval;
  if (self->m_repeatDeleteWord)
  {
    id v4 = [(TIKeyboardCandidateResultSet *)self->m_candidateResultSet uncommittedText];

    if (!v4)
    {
      int v7 = +[UIKeyboardPreferencesController sharedPreferencesController];
      id v8 = [v7 preferencesActions];
      id v9 = [v8 valueForPreferenceKey:@"RepeatDeleteWordRepeatInterfal"];
      [v9 floatValue];
      double v11 = v10;

      BOOL v12 = +[UIKeyboardPreferencesController sharedPreferencesController];
      int v13 = [v12 preferencesActions];
      uint64_t v14 = [v13 valueForPreferenceKey:@"RepeatDeleteWordCountForDecrement"];
      unint64_t v15 = [v14 integerValue];

      double m_autoDeleteInterval = v11 + (double)(self->m_autoDeleteCount / v15) * -0.1;
LABEL_10:
      if (m_autoDeleteInterval < 0.05) {
        goto LABEL_15;
      }
      goto LABEL_13;
    }
  }
  unsigned int m_autoDeleteCount = self->m_autoDeleteCount;
  if (m_autoDeleteCount != 20)
  {
    if (m_autoDeleteCount) {
      goto LABEL_10;
    }
    if (!self->m_autoDeleteUseForce)
    {
      double m_autoDeleteInterval = 0.1;
      goto LABEL_13;
    }
    goto LABEL_8;
  }
  if (self->m_autoDeleteUseForce)
  {
LABEL_8:
    [(_UIKeyboardStateManager *)self timeoutForCurrentForce];
    double m_autoDeleteInterval = v6;
    goto LABEL_10;
  }
  double m_autoDeleteInterval = 0.35;
LABEL_13:
  if (m_autoDeleteInterval != self->m_autoDeleteInterval)
  {
    self->double m_autoDeleteInterval = m_autoDeleteInterval;
    [(_UIKeyboardStateManager *)self touchAutoDeleteTimerWithThreshold:0 adjustForPartialCompletion:m_autoDeleteInterval];
  }
LABEL_15:
  ++self->m_autoDeleteCount;
}

- (void)startAutoDeleteTimer
{
  id v3 = +[UIKeyboardPreferencesController sharedPreferencesController];
  id v4 = [v3 preferencesActions];
  self->m_repeatDeleteWord = [v4 BOOLForPreferenceKey:@"RepeatDeleteWordEnabled"];

  if (self->m_repeatDeleteWord)
  {
    id v5 = +[UIKeyboardPreferencesController sharedPreferencesController];
    double v6 = [v5 preferencesActions];
    int v7 = [v6 valueForPreferenceKey:@"RepeatDeleteWordFirstDelay"];
    [v7 floatValue];
    self->double m_autoDeleteInterval = v8;

    double m_autoDeleteInterval = self->m_autoDeleteInterval;
  }
  else
  {
    self->double m_autoDeleteInterval = 0.5;
    double m_autoDeleteInterval = 0.5;
  }
  [(_UIKeyboardStateManager *)self touchAutoDeleteTimerWithThreshold:0 adjustForPartialCompletion:m_autoDeleteInterval];
  self->unsigned int m_autoDeleteCount = 0;
  self->m_autoDeleteLastDelete = -*MEMORY[0x1E4F1CF68];
  self->m_autoDeleteShiftCharacter = 0;
}

- (double)convertForceToGrams:(double)a3
{
  return self->m_autoDeleteCurrentForceMultipler * a3 * 60.0;
}

- (double)scaleCurrentForceFrom:(double)result to:(double)a4
{
  if (self->m_autoDeleteUseForce) {
    double v4 = (self->m_autoDeleteCurrentForce + -80.0) / 420.0;
  }
  else {
    double v4 = 0.5;
  }
  double v5 = (a4 - result) * v4 + result;
  if (result >= a4) {
    double v6 = result;
  }
  else {
    double v6 = a4;
  }
  if (result >= a4) {
    CGRect result = a4;
  }
  if (v5 >= v6) {
    double v7 = v6;
  }
  else {
    double v7 = v5;
  }
  if (v7 >= result) {
    return v7;
  }
  return result;
}

- (double)timeoutForCurrentForce
{
  BOOL v3 = [(_UIKeyboardStateManager *)self shouldRapidDelete];
  double v4 = 0.3;
  if (!v3) {
    double v4 = 0.1;
  }
  -[_UIKeyboardStateManager scaleCurrentForceFrom:to:](self, "scaleCurrentForceFrom:to:", v4);
  return result;
}

- (void)startAutoDeleteTimerForForce:(double)a3
{
  if (_AXSForceTouchEnabled())
  {
    self->m_autoDeleteUseForce = 1;
    _AXSForceTouchSensitivity();
    self->m_autoDeleteCurrentForceMultipler = v5;
    [(_UIKeyboardStateManager *)self convertForceToGrams:a3];
    self->m_autoDeleteCurrentForce = v6;
  }
  [(_UIKeyboardStateManager *)self startAutoDeleteTimer];
}

- (void)adjustAutoDeleteTimerForForce:(double)a3
{
  if (self->m_autoDeleteUseForce)
  {
    [(_UIKeyboardStateManager *)self convertForceToGrams:a3];
    if (v4 != self->m_autoDeleteCurrentForce)
    {
      self->m_autoDeleteCurrentForce = v4;
      if (self->m_autoDeleteCount)
      {
        [(_UIKeyboardStateManager *)self timeoutForCurrentForce];
        -[_UIKeyboardStateManager touchAutoDeleteTimerWithThreshold:adjustForPartialCompletion:](self, "touchAutoDeleteTimerWithThreshold:adjustForPartialCompletion:", 1);
      }
    }
  }
}

- (void)stopAutoDelete
{
  if (pthread_main_np())
  {
    if ([(UIKeyboardScheduledTask *)self->m_autoDeleteTask isValid]
      || self->m_repeatDeleteFromHardwareKeyboard)
    {
      self->m_autoDeleteOK = 0;
      [(_UIKeyboardStateManager *)self clearAutoDeleteTimer];
      self->m_autoDeleteUseForce = 0;
      if (self->m_needsOneShotGenerateCandidatesAfterStoppingAutoDelete
        || self->m_autoDeleteCount > self->m_repeatDeleteFromHardwareKeyboard)
      {
        [(_UIKeyboardStateManager *)self syncDocumentStateToInputDelegate];
        [(_UIKeyboardStateManager *)self completeDelete];
      }
      self->m_repeatDeleteFromHardwareKeyboard = 0;
      self->m_needsOneShotGenerateCandidatesAfterStoppingAutoDelete = 0;
    }
  }
  else
  {
    [(_UIKeyboardStateManager *)self performSelectorOnMainThread:a2 withObject:0 waitUntilDone:0];
  }
}

- (void)touchUpdateLastUsedInputModeAction
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  double v4 = [WeakRetained layout];
  int v5 = [v4 isPossibleToTypeFast];

  if (v5)
  {
    double v6 = +[UIKeyboardInputModeController sharedInputModeController];
    char v7 = [v6 disablesUpdateLastUsedInputModeTimer];

    if ((v7 & 1) == 0)
    {
      m_updateLastUsedInputModeAction = self->m_updateLastUsedInputModeAction;
      if (m_updateLastUsedInputModeAction)
      {
        [(UIDelayedAction *)m_updateLastUsedInputModeAction touch];
      }
      else
      {
        if (TIGetUpdateLastUsedInputModeDelayValue_onceToken[0] != -1) {
          dispatch_once(TIGetUpdateLastUsedInputModeDelayValue_onceToken, &__block_literal_global_3663);
        }
        id v9 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
        float v10 = [v9 valueForPreferenceKey:@"UpdateLastUsedInputModeDelay"];

        [v10 doubleValue];
        double v12 = v11;

        if (v12 > 0.0)
        {
          int v13 = [[UIDelayedAction alloc] initWithTarget:self action:sel_handleUpdateLastUsedInputModeAction_ userInfo:0 delay:v12];
          uint64_t v14 = self->m_updateLastUsedInputModeAction;
          self->m_updateLastUsedInputModeAction = v13;
        }
      }
    }
  }
}

- (void)clearUpdateLastUsedInputModeAction
{
  [(UIDelayedAction *)self->m_updateLastUsedInputModeAction cancel];
  m_updateLastUsedInputModeAction = self->m_updateLastUsedInputModeAction;
  self->m_updateLastUsedInputModeAction = 0;
}

- (void)handleUpdateLastUsedInputModeAction:(id)a3
{
  BOOL v3 = +[UIKeyboardInputModeController sharedInputModeController];
  id v5 = [v3 currentInputMode];

  if (([v5 isEmojiInputMode] & 1) == 0)
  {
    double v4 = +[UIKeyboardInputModeController sharedInputModeController];
    [v4 updateLastUsedInputMode:v5];
  }
}

- (void)touchLongPressTimerWithDelay:(double)a3 userInfo:(id)a4
{
  id v10 = a4;
  m_longPressAction = self->m_longPressAction;
  if (!m_longPressAction) {
    goto LABEL_4;
  }
  [(UIDelayedAction *)m_longPressAction delay];
  if (v7 != a3)
  {
    [(_UIKeyboardStateManager *)self clearLongPressTimer];
LABEL_4:
    float v8 = [[UIDelayedAction alloc] initWithTarget:self action:sel_handleDelayedActionLongPress_ userInfo:v10 delay:a3];
    id v9 = self->m_longPressAction;
    self->m_longPressAction = v8;

    goto LABEL_6;
  }
  [(UIDelayedAction *)self->m_longPressAction touch];
LABEL_6:
}

- (void)touchLongPressTimerWithDelay:(double)a3
{
}

- (void)touchLongPressTimer
{
}

- (void)clearLongPressTimer
{
  [(UIDelayedAction *)self->m_longPressAction setTarget:0];
  m_longPressAction = self->m_longPressAction;
  self->m_longPressAction = 0;

  self->m_longPress = 0;
}

- (double)shouldExtendLongPressAction:(id)a3
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [MEMORY[0x1E4F28F80] processInfo];
  [v5 systemUptime];
  double v7 = v6;

  [(_UIKeyboardStateManager *)self timestampOfLastTouchesEnded];
  double v9 = 0.0;
  if (v8 + 0.4 < v7)
  {
    if (self->m_didExtendLongPressDelayForContinuousPath) {
      goto LABEL_5;
    }
    id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    double v11 = [WeakRetained layout];
    double v12 = [v11 typingStyleEstimator];
    unint64_t v13 = [v12 currentTypingStyleEstimation];

    if (v13 < 2)
    {
LABEL_5:
      self->m_didExtendLongPressDelayForContinuousPath = 0;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      id v14 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      unint64_t v15 = objc_msgSend(v14, "layout", 0);
      long long v16 = [v15 gestureRecognizers];

      uint64_t v17 = [v16 countByEnumeratingWithState:&v26 objects:v30 count:16];
      if (v17)
      {
        uint64_t v18 = v17;
        uint64_t v19 = *(void *)v27;
        do
        {
          uint64_t v20 = 0;
          do
          {
            if (*(void *)v27 != v19) {
              objc_enumerationMutation(v16);
            }
            long long v21 = *(void **)(*((void *)&v26 + 1) + 8 * v20);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0
              && ![v21 state]
              && [v21 forceHasIncreasedForTimeInterval:0.1])
            {
              [v21 minimumPressDuration];
              double v23 = v22;
              [v4 delay];
              double v9 = v23 - v24 + 0.01;
            }
            ++v20;
          }
          while (v18 != v20);
          uint64_t v18 = [v16 countByEnumeratingWithState:&v26 objects:v30 count:16];
        }
        while (v18);
      }
    }
    else
    {
      self->m_didExtendLongPressDelayForContinuousPath = 1;
      double v9 = 1.0;
    }
  }

  return v9;
}

- (void)handleDelayedActionLongPress:(id)a3
{
  id v4 = a3;
  [(_UIKeyboardStateManager *)self shouldExtendLongPressAction:self->m_longPressAction];
  if (v5 <= 0.0)
  {
    double v6 = self->m_longPressAction;
    if (qword_1EB25FCE0 != -1) {
      dispatch_once(&qword_1EB25FCE0, &__block_literal_global_1718);
    }
    double v7 = [(_UIKeyboardStateManager *)self taskQueue];
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    void v10[2] = __56___UIKeyboardStateManager_handleDelayedActionLongPress___block_invoke_3;
    v10[3] = &unk_1E52E3678;
    double v11 = v6;
    double v12 = self;
    id v13 = v4;
    uint64_t v8 = qword_1EB25FCD8;
    double v9 = v6;
    [v7 addTask:v10 breadcrumb:v8];
  }
  else
  {
    -[_UIKeyboardStateManager touchLongPressTimerWithDelay:](self, "touchLongPressTimerWithDelay:");
  }
}

- (void)longPressAction:(id)a3
{
  [(_UIKeyboardStateManager *)self clearLongPressTimer];
  self->m_longPress = 1;
  [(_UIKeyboardStateManager *)self callLayoutLongPressAction];
}

- (void)longPressAction
{
}

- (BOOL)isLongPress
{
  return self->m_longPress;
}

- (void)clearTimers
{
  if (pthread_main_np())
  {
    [(_UIKeyboardStateManager *)self clearLongPressTimer];
    [(_UIKeyboardStateManager *)self clearAutocorrectPromptTimer];
    [(_UIKeyboardStateManager *)self clearAutoDeleteTimer];
    [(_UIKeyboardStateManager *)self clearCapsLockDelayOverrideTimer];
    [(_UIKeyboardStateManager *)self clearUpdateLastUsedInputModeAction];
    [(_UIKeyboardStateManager *)self clearIdleDetectionAction];
  }
  else
  {
    [(_UIKeyboardStateManager *)self performSelectorOnMainThread:a2 withObject:0 waitUntilDone:0];
  }
}

- (void)clearChangeTimeAndCount
{
  self->m_changeCount = 0;
  self->double m_changeTime = 0.0;
}

- (void)updateChangeTimeAndIncrementCount
{
  self->double m_changeTime = CFAbsoluteTimeGetCurrent();
}

- (int)changeCount
{
  return self->m_changeCount;
}

- (void)updateHardwareKeyboardLayout
{
}

- (void)updateHardwareKeyboardLayout:(BOOL)a3
{
  BOOL v3 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained updateHardwareKeyboardLayout:v3];
}

- (void)setInHardwareKeyboardMode:(BOOL)a3
{
}

- (void)setInHardwareKeyboardMode:(BOOL)a3 forceRebuild:(BOOL)a4
{
}

- (void)proceedShouldReturnIfNeededForASP
{
  BOOL v3 = +[UIKeyboardInputModeController sharedInputModeController];
  id v4 = [v3 currentInputMode];
  double v5 = [v4 identifier];
  if ([v5 isEqualToString:@"autofillsignup"])
  {
    BOOL v6 = [(_UIKeyboardStateManager *)self delegateAlreadyInAutofillGroup];

    if (v6)
    {
      double v7 = [(_UIKeyboardStateManager *)self inputDelegate];
      objc_opt_class();
      char isKindOfClass = objc_opt_isKindOfClass();

      if (isKindOfClass)
      {
        id v11 = [(_UIKeyboardStateManager *)self inputDelegate];
        double v9 = [v11 delegate];
        char v10 = objc_opt_respondsToSelector();

        if (v10) {
          [(_UIKeyboardStateManager *)self callShouldInsertText:@"\n"];
        }
        else {
          [(_UIKeyboardStateManager *)self dismissKeyboard];
        }

        return;
      }
    }
  }
  else
  {
  }
  [(_UIKeyboardStateManager *)self dismissKeyboard];
}

- (void)nonDestructivelyDismissKeyboard
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained nonDestructivelyDismissKeyboard];
}

- (void)dismissKeyboard
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained dismissKeyboard];
}

- (void)_attemptAuthenticationWithMessage:(id)a3
{
  if (a3) {
    -[TIKeyboardState setEventAuthenticationMessage:](self->m_keyboardState, "setEventAuthenticationMessage:");
  }
}

- (void)cancelAllKeyEvents
{
}

- (BOOL)_isValidKeyInput:(id)a3
{
  id v4 = a3;
  if ([(UITextInputTraits *)self->m_traits isSecureTextEntry])
  {
    p_presentationDelegate = &self->_presentationDelegate;
    id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    uint64_t v7 = [WeakRetained layout];
    if (v7)
    {
      uint64_t v8 = (void *)v7;
      id v9 = objc_loadWeakRetained((id *)p_presentationDelegate);
      char v10 = [v9 layout];
      int v11 = [v10 canProduceString:v4];

      if (!v11)
      {
        BOOL v12 = 0;
        goto LABEL_16;
      }
    }
    else
    {
    }
  }
  uint64_t v13 = [v4 length];
  if (v13)
  {
    unint64_t v14 = v13;
    BOOL v12 = 0;
    for (i = 0; i != v14; BOOL v12 = i >= v14)
    {
      unsigned int v16 = [v4 characterAtIndex:i];
      if (v16 <= 0x1F && ((1 << v16) & 0xFFFFD8FF) != 0) {
        break;
      }
      ++i;
    }
  }
  else
  {
    BOOL v12 = 1;
  }
LABEL_16:

  return v12;
}

- (void)updateKeyboardEventsLagging:(id)a3
{
  id v4 = a3;
  double v5 = (double)(unint64_t)GSCurrentEventTimestamp() / 1000000000.0;
  [v4 timestamp];
  double v7 = v6;

  m_keyboardState = self->m_keyboardState;
  -[TIKeyboardState setKeyboardEventsLagging:](m_keyboardState, "setKeyboardEventsLagging:", v5 - v7 > 0.004, v5 - v7);
}

- (void)_handleWebKeyEvent:(id)a3 withEventType:(unint64_t)a4 withInputString:(id)a5 withInputStringIgnoringModifiers:(id)a6
{
  id v10 = a3;
  id v11 = a5;
  id v12 = a6;
  if (qword_1EB25FCF0 != -1) {
    dispatch_once(&qword_1EB25FCF0, &__block_literal_global_1725);
  }
  uint64_t v13 = [(_UIKeyboardStateManager *)self taskQueue];
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  v18[2] = __109___UIKeyboardStateManager__handleWebKeyEvent_withEventType_withInputString_withInputStringIgnoringModifiers___block_invoke_3;
  v18[3] = &unk_1E52E3A50;
  void v18[4] = self;
  id v19 = v10;
  id v21 = v12;
  unint64_t v22 = a4;
  id v20 = v11;
  uint64_t v14 = qword_1EB25FCE8;
  id v15 = v12;
  id v16 = v11;
  id v17 = v10;
  [v13 addTask:v18 breadcrumb:v14];
}

- (void)_handleWebKeyEvent:(id)a3 withEventType:(int)a4 withInputString:(id)a5 withInputStringIgnoringModifiers:(id)a6 executionContext:(id)a7
{
  uint64_t v10 = *(void *)&a4;
  id v12 = a3;
  id v13 = a5;
  id v14 = a6;
  id v15 = a7;
  if (+[UIKeyboard isKeyboardProcess])
  {
    id v16 = [(_UIKeyboardStateManager *)self inputSystemSourceSession];
    id v17 = v16;
    if (v16)
    {
      uint64_t v18 = [v16 textOperations];
      [v12 setKeyEventForwardedFromInputUIHost:1];
      [v18 setCustomInfoType:0x1ED14BC00];
      id v19 = [MEMORY[0x1E4F1CA60] dictionary];
      [v19 setObject:@"_handleWebKeyEvent:withEventType:withInputString:withInputStringIgnoringModifiers:" forKeyedSubscript:@"selector"];
      [v19 setObject:v12 forKeyedSubscript:@"keyEvent"];
      id v20 = [NSNumber numberWithUnsignedInt:v10];
      [v19 setObject:v20 forKeyedSubscript:@"webEventType"];

      if (v13) {
        [v19 setObject:v13 forKeyedSubscript:@"inputString"];
      }
      if (v14) {
        [v19 setObject:v14 forKeyedSubscript:@"inputStringIgnoringModifiers"];
      }
      [v18 setCustomInfo:v19];
      id v21 = [(_UIKeyboardStateManager *)self buildInputSourceState];
      [v18 setInputSourceState:v21];

      [v17 flushOperations];
    }
    [v15 returnExecutionToParent];
  }
  else
  {
    id location = 0;
    p_id location = &location;
    uint64_t v59 = 0x2050000000;
    id v22 = (id)qword_1EB25FE08;
    uint64_t v60 = qword_1EB25FE08;
    if (!qword_1EB25FE08)
    {
      uint64_t v51 = MEMORY[0x1E4F143A8];
      uint64_t v52 = 3221225472;
      uint64_t v53 = (uint64_t)__getWebEventClass_block_invoke;
      id v54 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E52D9900;
      double v55 = &location;
      __getWebEventClass_block_invoke((uint64_t)&v51);
      id v22 = p_location[3];
    }
    double v23 = (objc_class *)v22;
    _Block_object_dispose(&location, 8);
    id v24 = [v23 alloc];
    [v12 timestamp];
    double v26 = v25;
    unsigned int v27 = [v12 _gsModifierFlags];
    id v43 = v14;
    id v44 = v13;
    id val = v15;
    if ([v12 _hidEvent] || self->m_shiftLocked) {
      int v28 = 0;
    }
    else {
      int v28 = self->m_shift << 17;
    }
    uint64_t v29 = v28 | v27;
    uint64_t v30 = [v12 _isARepeat];
    uint64_t v31 = [v12 _inputFlags];
    double v32 = [v12 _hint];
    __int16 v33 = [v12 _keyCode];
    uint64_t v34 = [v12 _modifiedInput];
    BYTE2(v41) = [v34 isEqualToString:@"\t"];
    LOWORD(v41) = v33;
    BOOL v35 = objc_msgSend(v24, "initWithKeyEventType:timeStamp:characters:charactersIgnoringModifiers:modifiers:isRepeating:withFlags:withInputManagerHint:keyCode:isTabKey:", v10, v44, v43, v29, v30, v31, v26, v32, v41);

    char v36 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    int v37 = [v36 delegateAdoptsWebTextInputPrivate];

    if (v37)
    {
      uint64_t v51 = 0;
      uint64_t v52 = (uint64_t)&v51;
      uint64_t v53 = 0x3032000000;
      id v54 = __Block_byref_object_copy__38;
      double v55 = (id *)__Block_byref_object_dispose__38;
      id v56 = 0;
      id v15 = val;
      objc_initWeak(&location, val);
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 3221225472;
      aBlock[2] = __126___UIKeyboardStateManager__handleWebKeyEvent_withEventType_withInputString_withInputStringIgnoringModifiers_executionContext___block_invoke;
      aBlock[3] = &unk_1E52E4308;
      objc_copyWeak(&v50, &location);
      void aBlock[4] = &v51;
      CGRect v38 = _Block_copy(aBlock);
      [val setPendingCompletionBlock:v38];
      ++self->m_changeCount;
      CGRect v39 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      v45[0] = MEMORY[0x1E4F143A8];
      v45[1] = 3221225472;
      v45[2] = __126___UIKeyboardStateManager__handleWebKeyEvent_withEventType_withInputString_withInputStringIgnoringModifiers_executionContext___block_invoke_2;
      v45[3] = &unk_1E52E4330;
      uint64_t v47 = self;
      uint64_t v48 = &v51;
      id v46 = val;
      [v39 handleKeyWebEvent:v35 withCompletionHandler:v45];

      objc_destroyWeak(&v50);
      objc_destroyWeak(&location);
      _Block_object_dispose(&v51, 8);
    }
    else
    {
      CGRect v40 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      [v40 handleKeyWebEvent:v35];

      id v15 = val;
      [val returnExecutionToParentWithInfo:MEMORY[0x1E4F1CC38]];
    }
    id v14 = v43;
    id v13 = v44;
  }
}

- (void)_handleWebKeyEvent:(id)a3 withIndex:(unint64_t)a4 inInputString:(id)a5
{
  id v8 = a3;
  id v9 = a5;
  if (qword_1EB25FD00 != -1) {
    dispatch_once(&qword_1EB25FD00, &__block_literal_global_1745);
  }
  uint64_t v10 = [(_UIKeyboardStateManager *)self taskQueue];
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = __70___UIKeyboardStateManager__handleWebKeyEvent_withIndex_inInputString___block_invoke_3;
  v14[3] = &unk_1E52E3CF8;
  void v14[4] = self;
  id v15 = v8;
  id v16 = v9;
  unint64_t v17 = a4;
  uint64_t v11 = qword_1EB25FCF8;
  id v12 = v9;
  id v13 = v8;
  [v10 addTask:v14 breadcrumb:v11];
}

- (void)_handleWebKeyEvent:(id)a3 withIndex:(unint64_t)a4 inInputString:(id)a5 executionContext:(id)a6
{
  id v10 = a3;
  uint64_t v11 = (__CFString *)a5;
  id v12 = a6;
  if ([(__CFString *)v11 length] <= a4)
  {
    [v12 returnExecutionToParent];
  }
  else
  {
    if (+[UIKeyboard isKeyboardProcess])
    {
      id v13 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      int v14 = [v13 delegateAdoptsWebTextInputPrivate];

      if (v14) {
        [(_UIKeyboardStateManager *)self updateChangeTimeAndIncrementCount];
      }
      id v15 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      id v16 = [v15 inputSystemSourceSession];

      if (v16)
      {
        unint64_t v17 = [v16 textOperations];
        uint64_t v18 = [MEMORY[0x1E4F1CA60] dictionary];
        [v18 setObject:@"_handleWebKeyEvent:withIndex:inInputString:" forKeyedSubscript:@"selector"];
        [v18 setObject:v10 forKeyedSubscript:@"event"];
        id v19 = [NSNumber numberWithUnsignedInteger:a4];
        [v18 setObject:v19 forKeyedSubscript:@"index"];

        if (v11) {
          id v20 = v11;
        }
        else {
          id v20 = &stru_1ED0E84C0;
        }
        [v18 setObject:v20 forKeyedSubscript:@"inputString"];
        [v17 setCustomInfoType:0x1ED14BC00];
        [v17 setCustomInfo:v18];
        [v16 flushOperations];
      }
      [v12 returnExecutionToParent];
    }
    else
    {
      [(_UIKeyboardStateManager *)self setExternalTask:0];
      [(_UIKeyboardStateManager *)self setEventForCurrentWebEvent:v10];
      *(_WORD *)&self->BOOL m_webEventWasHandledAsKeyCommand = 0;
      uint64_t v21 = [(__CFString *)v11 rangeOfComposedCharacterSequenceAtIndex:a4];
      uint64_t v22 = [(__CFString *)v11 length];
      if (v22)
      {
        double v23 = v11;
        id v24 = [v10 _shiftModifiedInput];
        double v25 = v24;
        uint64_t v48 = v23;
        if (v24)
        {
          id v26 = v24;
        }
        else
        {
          id v26 = [v10 _unmodifiedInput];
        }
        uint64_t v47 = v26;
      }
      else
      {
        uint64_t v48 = -[__CFString substringWithRange:](v11, "substringWithRange:", v21, 0);
        uint64_t v47 = (void *)[v48 copy];
      }
      uint64_t v27 = [v10 _hidEvent];
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 3221225472;
      aBlock[2] = __87___UIKeyboardStateManager__handleWebKeyEvent_withIndex_inInputString_executionContext___block_invoke;
      aBlock[3] = &unk_1E52E3D20;
      void aBlock[4] = self;
      id v28 = v10;
      id v64 = v28;
      uint64_t v66 = v21;
      uint64_t v67 = v22;
      unint64_t v65 = v11;
      uint64_t v29 = _Block_copy(aBlock);
      v62[0] = MEMORY[0x1E4F143A8];
      v62[1] = 3221225472;
      void v62[2] = __87___UIKeyboardStateManager__handleWebKeyEvent_withIndex_inInputString_executionContext___block_invoke_2;
      v62[3] = &unk_1E52E4358;
      v62[4] = self;
      uint64_t v30 = _Block_copy(v62);
      v60[0] = MEMORY[0x1E4F143A8];
      v60[1] = 3221225472;
      v60[2] = __87___UIKeyboardStateManager__handleWebKeyEvent_withIndex_inInputString_executionContext___block_invoke_3;
      void v60[3] = &unk_1E52E4380;
      BOOL v61 = v27 != 0;
      v60[4] = self;
      uint64_t v31 = _Block_copy(v60);
      if (v27)
      {
        if ([v28 _isKeyDown]) {
          uint64_t v32 = 4;
        }
        else {
          uint64_t v32 = 5;
        }
        self->m_webEventIsKeyDown = [v28 _isKeyDown];
        v56[0] = MEMORY[0x1E4F143A8];
        v56[1] = 3221225472;
        v56[2] = __87___UIKeyboardStateManager__handleWebKeyEvent_withIndex_inInputString_executionContext___block_invoke_4;
        void v56[3] = &unk_1E52E43D0;
        v56[4] = self;
        id v57 = v30;
        id v58 = v31;
        id v59 = v29;
        id v33 = v31;
        uint64_t v34 = [v12 childWithContinuation:v56];
        BOOL v35 = self;
        uint64_t v36 = v32;
        int v37 = v47;
        id v16 = v48;
        [(_UIKeyboardStateManager *)v35 _handleWebKeyEvent:v28 withEventType:v36 withInputString:v48 withInputStringIgnoringModifiers:v47 executionContext:v34];

        CGRect v38 = v57;
      }
      else
      {
        self->m_webEventIsKeyDown = 1;
        v49[0] = MEMORY[0x1E4F143A8];
        v49[1] = 3221225472;
        v49[2] = __87___UIKeyboardStateManager__handleWebKeyEvent_withIndex_inInputString_executionContext___block_invoke_8;
        v49[3] = &unk_1E52E43F8;
        void v49[4] = self;
        id v46 = v28;
        id v50 = v46;
        id v45 = v48;
        id v51 = v45;
        int v37 = v47;
        id v39 = v47;
        id v52 = v39;
        id v53 = v30;
        id v54 = v31;
        id v55 = v29;
        id v40 = v31;
        [v12 childWithContinuation:v49];
        uint64_t v41 = v30;
        v43 = uint64_t v42 = v29;
        id v44 = self;
        id v16 = v48;
        [(_UIKeyboardStateManager *)v44 _handleWebKeyEvent:v46 withEventType:4 withInputString:v45 withInputStringIgnoringModifiers:v39 executionContext:v43];

        uint64_t v29 = v42;
        uint64_t v30 = v41;

        CGRect v38 = v50;
      }
    }
  }
}

- (void)triggerPendingKeyup
{
  if (self->_pendingKeyupOperation)
  {
    if (qword_1EB25FD50 != -1) {
      dispatch_once(&qword_1EB25FD50, &__block_literal_global_1776);
    }
    BOOL v3 = [(_UIKeyboardStateManager *)self taskQueue];
    id v4 = [(_UIKeyboardImplHeldOperation *)self->_pendingKeyupOperation operation];
    [v3 addDeferredTask:v4 breadcrumb:qword_1EB25FD48];

    pendingKeyupOperation = self->_pendingKeyupOperation;
    self->_pendingKeyupOperation = 0;
  }
}

- (void)_handleWebKeyEvent:(id)a3 withInputString:(id)a4 executionContext:(id)a5
{
  id v15 = a3;
  id v8 = a4;
  id v9 = a5;
  if ((unint64_t)[v8 length] >= 2
    && [v8 characterAtIndex:0] == 46)
  {
    id v10 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    uint64_t v11 = [v10 privateInputDelegate];
    if (v11)
    {
      id v12 = (void *)v11;
      id v13 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      int v14 = [v13 _characterBeforeCaretSelection];

      if (v14 != 46) {
        goto LABEL_7;
      }
      [v8 substringFromIndex:1];
      id v10 = v8;
      id v8 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
LABEL_7:
  [(_UIKeyboardStateManager *)self _handleWebKeyEvent:v15 withIndex:0 inInputString:v8 executionContext:v9];
}

- (void)_remapKeyEvent:(id)a3 withKeyEventMap:(id)a4
{
  id v12 = a3;
  id v6 = a4;
  LODWORD(a4) = [v12 _gsModifierFlags];
  double v7 = [v12 _modifiedInput];
  id v8 = [v12 _unmodifiedInput];
  id v9 = [v6 remapKeyWithString:v7 stringWithoutModifiers:v8 modifierFlags:a4 keyboardState:self->m_keyboardState];

  if (v9)
  {
    id v10 = [v12 _modifiedInput];
    char v11 = [v10 isEqualToString:v9];

    if ((v11 & 1) == 0) {
      objc_msgSend(v12, "set_modifiedInput:", v9);
    }
  }
}

- (void)flushTouchEventWaitingForKeyInputEventIfNecessary
{
  BOOL v3 = [(_UIKeyboardStateManager *)self touchEventWaitingForKeyInputEvent];

  if (v3)
  {
    id v4 = [(_UIKeyboardStateManager *)self touchEventWaitingForKeyInputEvent];
    [(_UIKeyboardStateManager *)self skipHitTestForTouchEvent:v4];

    [(_UIKeyboardStateManager *)self setTouchEventWaitingForKeyInputEvent:0];
  }
}

- (void)_handleKeyEvent:(id)a3 executionContext:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  [(_UIKeyboardStateManager *)self setExternalTask:0];
  kdebug_trace();
  kac_get_log();
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  os_signpost_id_t v9 = os_signpost_id_make_with_pointer(v8, v6);
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v10 = v9;
    if (os_signpost_enabled(v8))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1853B0000, v8, OS_SIGNPOST_INTERVAL_BEGIN, v10, "appKey", "", buf, 2u);
    }
  }

  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained allowResponderChainFirstChanceToHandleKeyEvent:v6];

  kdebug_trace();
  kac_get_log();
  id v12 = (id)objc_claimAutoreleasedReturnValue();
  os_signpost_id_t v13 = os_signpost_id_make_with_pointer(v12, v6);
  if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v14 = v13;
    if (os_signpost_enabled(v12))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1853B0000, v12, OS_SIGNPOST_INTERVAL_END, v14, "appKey", "", buf, 2u);
    }
  }

  id v15 = [(_UIKeyboardStateManager *)self externalTask];

  if (v15)
  {
    id v16 = [(_UIKeyboardStateManager *)self externalTask];
    [(_UIKeyboardStateManager *)self setExternalTask:0];
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    v18[2] = __60___UIKeyboardStateManager__handleKeyEvent_executionContext___block_invoke;
    v18[3] = &unk_1E52E34C8;
    void v18[4] = self;
    unint64_t v17 = [v7 childWithContinuation:v18];
    ((void (**)(void, void *))v16)[2](v16, v17);
  }
  else
  {
    [(_UIKeyboardStateManager *)self flushTouchEventWaitingForKeyInputEventIfNecessary];
    [v7 returnExecutionToParent];
  }
}

- (void)handleKeyEvent:(id)a3
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  double v5 = v4;
  if ([v4 _hidEvent])
  {
    double v5 = (void *)[v4 _cloneEvent];
  }
  id v6 = _UIKeyboardLog();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218240;
    uint64_t v18 = [v4 type];
    __int16 v19 = 2048;
    uint64_t v20 = [v4 subtype];
    _os_log_impl(&dword_1853B0000, v6, OS_LOG_TYPE_DEFAULT, "Keyboard receives keyEvent type: %li; subtype: %li",
      buf,
      0x16u);
  }

  if (![v5 _hidEvent]
    || [v5 _modifierFlags] != 0x40000
    || [v5 _keyCode] != 40)
  {
    uint64_t v11 = MEMORY[0x1E4F143A8];
    uint64_t v12 = 3221225472;
    os_signpost_id_t v13 = __42___UIKeyboardStateManager_handleKeyEvent___block_invoke;
    os_signpost_id_t v14 = &unk_1E52E3628;
    id v15 = self;
    id v16 = v5;
    id v7 = _Block_copy(&v11);
    id v8 = [(_UIKeyboardStateManager *)self taskQueue];
    int v9 = [v8 isMainThreadExecutingTask];

    if (v9)
    {
      [(_UIKeyboardStateManager *)self setExternalTask:v7];
    }
    else
    {
      if (qword_1EB25FD60 != -1) {
        dispatch_once(&qword_1EB25FD60, &__block_literal_global_1780);
      }
      os_signpost_id_t v10 = [(_UIKeyboardStateManager *)self taskQueue];
      [v10 addTask:v7 breadcrumb:qword_1EB25FD58];
    }
  }
}

- (BOOL)_isKeyCommand:(id)a3
{
  return [(_UIKeyboardStateManager *)self _handleKeyCommandCommon:a3 options:2] != 0;
}

- (BOOL)_handlesKeyCommandForEvent:(id)a3
{
  return [(_UIKeyboardStateManager *)self _handleKeyCommandCommon:a3 options:6] != 0;
}

- (BOOL)_handleKeyCommand:(id)a3
{
  return [(_UIKeyboardStateManager *)self _handleKeyCommandCommon:a3 options:0] != 0;
}

- (unint64_t)_handleKeyCommandCommon:(id)a3 options:(unint64_t)a4
{
  char v10 = 0;
  id v6 = a3;
  uint64_t v7 = [v6 _hidEvent];
  unint64_t v8 = [(_UIKeyboardStateManager *)self handleKeyCommand:v6 repeatOkay:&v10 options:a4];

  unint64_t result = 0;
  if (v7 && v8)
  {
    if ((a4 & 2) == 0 && !v10) {
      [(_UIKeyboardStateManager *)self cancelAllKeyEvents];
    }
    return v8;
  }
  return result;
}

- (BOOL)_shouldEmitString:(id)a3 forKeyEvent:(id)a4
{
  id v6 = a3;
  if (([a4 _inputFlags] & 0x10) != 0
    && ([(TIKeyboardInputManagerState *)self->m_inputManagerState ignoresDeadKeys] & 1) != 0
    || (id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate),
        int v8 = [WeakRetained returnKeyState],
        WeakRetained,
        v8 == 1)
    && ([v6 _isNewlineOrReturn] & 1) != 0)
  {
    BOOL v9 = 0;
  }
  else
  {
    char v10 = [(_UIKeyboardStateManager *)self inputManagerState];
    uint64_t v11 = [v10 keyboardBehaviors];
    uint64_t v12 = [(_UIKeyboardStateManager *)self _keyboardBehaviorState];
    os_signpost_id_t v13 = [v11 keyBehaviorsForState:v12];

    BOOL v9 = !v13
      || ([v13 tabKeyBehavior] == 1 || (objc_msgSend(v6, "isEqualToString:", @"\t") & 1) == 0)
      && ((unint64_t)([v13 spaceKeyBehavior] - 3) > 1
       || ([v6 isEqualToString:@" "] & 1) == 0);
  }
  return v9;
}

- (void)handleKeyEvent:(id)a3 executionContext:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  [v6 _privatize];
  if ([(_UIKeyboardStateManager *)self shouldApplyKeyboardCommandToUIHost]
    || +[UIKeyboard usesInputSystemUI]
    && ([v6 _inputFlags] & 0x80) != 0)
  {
    int v8 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
    [v8 forwardKeyboardEventToUIHost:v6];

    [v7 returnExecutionToParent];
  }
  else
  {
    if (([v6 _inputFlags] & 0x20) == 0)
    {
      [(_UIKeyboardStateManager *)self updateKeyboardEventsLagging:v6];
      uint64_t v9 = [v6 _hidEvent];
      p_presentationDelegate = &self->_presentationDelegate;
      id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      uint64_t v12 = [WeakRetained isEmojiPopoverPresented];

      os_signpost_id_t v13 = +[UIKeyboardInputModeController sharedInputModeController];
      os_signpost_id_t v14 = [v13 currentInputMode];
      char v15 = [v14 isExtensionInputMode];

      if (self->m_hardwareKeyboardAttached)
      {
        if (v9 && [(_UIKeyboardStateManager *)self exclusivityIdentifierMatched]) {
          uint64_t v16 = 1;
        }
        else {
          uint64_t v16 = v12;
        }
      }
      else
      {
        uint64_t v16 = 0;
      }
      [(_UIKeyboardStateManager *)self setInHardwareKeyboardMode:v16];
      if (self->m_hardwareKeyboardAttached && v9)
      {
        id v17 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
        [v17 setHardwareKeyboardIsSeen];

        if ((v15 & 1) == 0)
        {
          [(_UIKeyboardStateManager *)self setAutomaticMinimizationEnabled:1];
          id v18 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
          __int16 v19 = [v18 geometryDelegate];
          char v20 = [v19 isMinimized];

          if ((v20 & 1) == 0) {
            [(_UIKeyboardStateManager *)self toggleSoftwareKeyboard];
          }
          id v21 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
          [v21 dismissFloatingKeyboardFromPencilKitIfNeeded];
        }
        uint64_t v22 = +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate];
        [v22 updateSystemInputAssistantVisibilityAfterHardwareKeyEvent];
        if ([(_UIKeyboardStateManager *)self isCapsLockASCIIToggle])
        {
          double v23 = [(_UIKeyboardStateManager *)self updateCapsLockDelayOverrideForNonTyping];
          int v24 = [v23 scheduled];

          if (v24)
          {
            m_updateCapsLockDelayOverrideForNonTyping = [(_UIKeyboardStateManager *)self updateCapsLockDelayOverrideForNonTyping];
            [m_updateCapsLockDelayOverrideForNonTyping touch];
          }
          else
          {
            [(_UIKeyboardStateManager *)self adjustCapsLockDelayOverride];
            [(_UIKeyboardStateManager *)self clearCapsLockDelayOverrideTimer];
            id v26 = [[UIDelayedAction alloc] initWithTarget:self action:sel_removeCapsLockDelayOverride userInfo:0 delay:0.15];
            m_updateCapsLockDelayOverrideForNonTyping = self->m_updateCapsLockDelayOverrideForNonTyping;
            self->m_updateCapsLockDelayOverrideForNonTyping = v26;
          }
        }
      }
      else if (!v9)
      {
        goto LABEL_36;
      }
      if ([v6 _isKeyDown])
      {
        if ([v6 _isARepeat])
        {
          uint64_t v27 = [v6 _modifiedInput];
          int v28 = [v27 _isDelete];

          if (v28)
          {
            self->m_repeatDeleteFromHardwareKeyboard = 1;
            self->unsigned int m_autoDeleteCount = 0;
          }
        }
      }
      if ([v6 _isKeyDown] && objc_msgSend(v6, "_isARepeat"))
      {
        uint64_t v29 = [(_UIKeyboardStateManager *)self inputDelegate];
        if (!v29 || [(_UIKeyboardStateManager *)self _hasMarkedText])
        {
LABEL_35:

          goto LABEL_36;
        }
        BOOL v40 = [(_UIKeyboardStateManager *)self canPresentPressAndHoldPopover:v6];

        if (v40)
        {
          uint64_t v41 = [(_UIKeyboardStateManager *)self documentState];
          uint64_t v29 = [v41 contextBeforeInput];

          if ([v29 length])
          {
            uint64_t v42 = objc_msgSend(v29, "rangeOfComposedCharacterSequenceAtIndex:", objc_msgSend(v29, "length") - 1);
            id v44 = objc_msgSend(v29, "substringWithRange:", v42, v43);
            if (+[UIPressAndHoldPopoverController canPresentPressAndHoldPopoverForKeyString:v44])
            {
              id v45 = objc_loadWeakRetained((id *)p_presentationDelegate);
              [v45 presentPressAndHoldPopoverWithKeyString:v44];
            }
            [v7 returnExecutionToParent];

            goto LABEL_113;
          }
          goto LABEL_35;
        }
      }
LABEL_36:
      uint64_t v29 = +[UIInputSwitcher activeInstance];
      if (!v9) {
        goto LABEL_63;
      }
      if ([v6 _isARepeat])
      {
LABEL_53:
        id v46 = [(_UIKeyboardStateManager *)self updatedKeyBehaviors];
        if (![v6 _isKeyDown]) {
          goto LABEL_111;
        }
        uint64_t v47 = [v6 _modifiedInput];
        if ([v47 _isPlainSpace] && objc_msgSend(v46, "spaceKeyBehavior") == 8)
        {

          goto LABEL_111;
        }
        uint64_t v48 = [v6 _modifiedInput];
        if ([v48 _isNewlineOrReturn])
        {
          uint64_t v89 = v9;
          int v49 = v12;
          uint64_t v12 = (uint64_t)v29;
          id v50 = p_presentationDelegate;
          uint64_t v51 = [v46 returnKeyBehavior];

          BOOL v52 = v51 == 8;
          p_presentationDelegate = v50;
          uint64_t v29 = (void *)v12;
          LODWORD(v12) = v49;
          uint64_t v9 = v89;
          if (v52) {
            goto LABEL_111;
          }
        }
        else
        {
        }
LABEL_63:
        id location = (id *)p_presentationDelegate;
        id v53 = (const void *)[(id)UIApp _hardwareKeyboardForPhysicalKeyboardEvent:v6 createIfNeeded:0];
        id v54 = v53;
        if (v53)
        {
          CFRetain(v53);
          int ModifierState = GSKeyboardGetModifierState();
        }
        else
        {
          int ModifierState = 0;
        }
        [v29 hideSwitcherIfNeeded];
        uint64_t v56 = [(id)UIApp _hardwareKeyboardForPhysicalKeyboardEvent:v6 createIfNeeded:0];
        if (v9)
        {
          uint64_t v57 = v56;
          if (v54 != (const void *)v56)
          {
            if ((ModifierState & 0x220000) != 0)
            {
              __int16 v96 = 0;
              uint64_t v87 = 0;
              uint64_t v88 = 7;
              uint64_t v85 = 0;
              double v86 = &v96;
              uint64_t v83 = 0;
              double v84 = &v96;
              double v82 = &v96;
              GSKeyboardTranslateKeyExtendedCommandWithUsagePage();
            }
            objc_msgSend(v6, "_setHIDEvent:keyboard:", objc_msgSend(v6, "_hidEvent", v82, v83, v84, v85, v86, v87, v88), v57);
          }
        }
        if (v54) {
          CFRelease(v54);
        }
        if (+[UIKeyboard isRedesignedTextCursorEnabled]
          && [v6 _keyCode] != 57
          && ([v6 _isGlobeKey] & 1) == 0)
        {
          id v58 = [(_UIKeyboardStateManager *)self inputModeIndicatorController];
          [v58 keyPressed];

          m_showCursorAccessordouble y = self->m_showCursorAccessory;
          if (!m_showCursorAccessory)
          {
            uint64_t v60 = [[UIDelayedAction alloc] initWithTarget:self action:sel_showCursorAccessory userInfo:0 delay:0.5];
            BOOL v61 = self->m_showCursorAccessory;
            self->m_showCursorAccessordouble y = v60;

            m_showCursorAccessordouble y = self->m_showCursorAccessory;
          }
          [(UIDelayedAction *)m_showCursorAccessory touch];
          if (!self->m_hideCursorAccessoriesAssertion)
          {
            CGFloat v62 = [(_UIKeyboardStateManager *)self textInteractionAssistant];
            unint64_t v63 = [v62 _selectionViewManager];
            id v64 = [v63 _obtainHideCursorAccessoriesAssertionWithReason:@"key press"];
            m_hideCursorAccessoriesAssertion = self->m_hideCursorAccessoriesAssertion;
            self->m_hideCursorAccessoriesAssertion = v64;
          }
        }
        uint64_t v66 = [(_UIKeyboardStateManager *)self inputManagerState];
        uint64_t v67 = [v66 keyEventMap];

        if (v67)
        {
          double v68 = [(_UIKeyboardStateManager *)self inputManagerState];
          double v69 = [v68 keyEventMap];
          [(_UIKeyboardStateManager *)self _remapKeyEvent:v6 withKeyEventMap:v69];
        }
        id v46 = [v6 _modifiedInput];
        int v70 = [(_UIKeyboardStateManager *)self _shouldEmitString:v46 forKeyEvent:v6];
        if (v70)
        {
          if ([v46 length])
          {
            if ([(_UIKeyboardStateManager *)self _isValidKeyInput:v46])
            {
              if ([(_UIKeyboardStateManager *)self delayedCandidateList])
              {
                if (self->m_candidateList)
                {
                  if (![(_UIKeyboardStateManager *)self isPredictionViewControllerVisible])
                  {
                    id v90 = objc_loadWeakRetained(location);
                    double v71 = [v90 candidateController];
                    id v72 = [v71 inlineCandidateView];

                    if (v72) {
                      [(_UIKeyboardStateManager *)self removeCandidateList];
                    }
                  }
                }
              }
            }
          }
        }
        if (v12 && [v6 _isKeyDown])
        {
          id v73 = objc_loadWeakRetained(location);
          id v74 = [v73 emojiPopoverController];
          int v75 = [v74 handleHardwareKeyboardEvent:v6];

          int v70 = v75 ^ 1;
          if ((v75 & 1) != 0 || v9) {
            goto LABEL_96;
          }
          id v76 = objc_loadWeakRetained(location);
          double v77 = [v76 emojiPopoverController];
          [v76 dismissKeyboardPopover:v77 beforeCleanup:0 completion:0];
        }
        LOBYTE(v75) = 0;
LABEL_96:
        if (![(_UIKeyboardStateManager *)self _delegateRequiresKeyEvents]
          || ([v6 _isGlobeKey] & 1) != 0
          || ((v70 ^ 1) & 1) != 0)
        {
          if ((v75 & 1) == 0 && [(_UIKeyboardStateManager *)self _handleKeyCommand:v6]) {
            goto LABEL_111;
          }
          long long v80 = [(_UIKeyboardStateManager *)self inputDelegateManager];
          double v81 = [v80 keyInputDelegate];

          if (!v81
            || !v70
            || [v46 length]
            && ![(_UIKeyboardStateManager *)self _isValidKeyInput:v46])
          {
            goto LABEL_111;
          }
          if ([v46 length])
          {
            v92[0] = MEMORY[0x1E4F143A8];
            v92[1] = 3221225472;
            v92[2] = __59___UIKeyboardStateManager_handleKeyEvent_executionContext___block_invoke;
            v92[3] = &unk_1E52DD450;
            v92[4] = self;
            id v93 = v46;
            id v94 = v6;
            id v95 = v7;
            -[_UIKeyboardStateManager performOperations:withTextInputSource:](self, "performOperations:withTextInputSource:", v92, [v94 source]);

LABEL_112:
            goto LABEL_113;
          }
        }
        else
        {
          [v29 hideSwitcherIfNeeded];
          if ([v46 length])
          {
            [(_UIKeyboardStateManager *)self _handleWebKeyEvent:v6 withInputString:v46 executionContext:v7];
            if (([v6 _modifierFlags] & 0x100000) != 0)
            {
              m_hardwareKeyDownCodeToEventMap = self->m_hardwareKeyDownCodeToEventMap;
              double v79 = objc_msgSend(NSNumber, "numberWithLong:", objc_msgSend(v6, "_keyCode"));
              [(NSMutableDictionary *)m_hardwareKeyDownCodeToEventMap removeObjectForKey:v79];
            }
            goto LABEL_112;
          }
        }
        [(_UIKeyboardStateManager *)self completeHandleKeyEvent:v6];
LABEL_111:
        [v7 returnExecutionToParent];
        goto LABEL_112;
      }
      int v30 = [v6 _isKeyDown];
      uint64_t v31 = self->m_hardwareKeyDownCodeToEventMap;
      uint64_t v32 = objc_msgSend(NSNumber, "numberWithLong:", objc_msgSend(v6, "_keyCode"));
      if (v30)
      {
        [(NSMutableDictionary *)v31 setObject:v6 forKey:v32];
      }
      else
      {
        id v33 = [(NSMutableDictionary *)v31 objectForKey:v32];

        if (v33)
        {
          uint64_t v34 = self->m_hardwareKeyDownCodeToEventMap;
          BOOL v35 = objc_msgSend(NSNumber, "numberWithLong:", objc_msgSend(v6, "_keyCode"));
          [(NSMutableDictionary *)v34 removeObjectForKey:v35];

          if (self->m_repeatDeleteFromHardwareKeyboard) {
            [(_UIKeyboardStateManager *)self stopAutoDelete];
          }
          if ([(_UIKeyboardStateManager *)self _delegateRequiresKeyEvents])
          {
            uint64_t v36 = (void *)[v6 _cloneEvent];
            int v37 = [v33 _modifiedInput];
            objc_msgSend(v36, "set_modifiedInput:", v37);

            CGRect v38 = [v33 _unmodifiedInput];
            objc_msgSend(v36, "set_unmodifiedInput:", v38);

            id v39 = [v36 _modifiedInput];
            [(_UIKeyboardStateManager *)self _handleWebKeyEvent:v36 withInputString:v39 executionContext:v7];

LABEL_113:
            goto LABEL_114;
          }
          p_presentationDelegate = &self->_presentationDelegate;
          uint64_t v32 = v33;
          goto LABEL_52;
        }
        uint64_t v32 = 0;
      }
      p_presentationDelegate = &self->_presentationDelegate;
LABEL_52:

      goto LABEL_53;
    }
    [(_UIKeyboardStateManager *)self handleModifiersChangeForKeyEvent:v6 executionContext:v7];
  }
LABEL_114:
}

- (void)handleModifiersChangeForKeyEvent:(id)a3 executionContext:(id)a4
{
  id v23 = a3;
  id v6 = a4;
  if ([v23 _hidEvent] && (objc_msgSend(v23, "_modifierFlags") & 0x20000) != 0 && self->m_autoshift)
  {
    self->BOOL m_autoshift = 0;
    [(_UIKeyboardStateManager *)self _forwardNeededShiftStatesToDestination];
  }
  [(_UIKeyboardStateManager *)self showCursorAccessory];
  id v7 = +[UIInputSwitcher sharedInstance];
  [v7 handleModifiersChangedEvent:v23];

  __int16 v8 = [v23 _keyCode];
  if ([(_UIKeyboardStateManager *)self shouldShowKeyboardMenu]
    && v8 == 57
    && [v23 _hidEvent]
    && [(_UIKeyboardStateManager *)self isCapsLockSwitchEnabled]
    && [v23 _isKeyDown])
  {
    uint64_t v9 = +[UIKeyboardInputModeController sharedInputModeController];
    char v10 = [v9 inputModeForASCIIToggleWithTraits:self->m_traits];

    if (v10)
    {
      uint64_t v11 = +[UIKeyboardInputModeController sharedInputModeController];
      uint64_t v12 = [v11 activeInputModes];
      int v13 = [v12 containsObject:v10];

      if (v13)
      {
        [(_UIKeyboardStateManager *)self showCursorAccessory];
        os_signpost_id_t v14 = [v10 identifier];
        BOOL v15 = [(_UIKeyboardStateManager *)self switchMode:v14 withHUD:1 withDelay:1 fromCapsLock:1];

        if (!v15) {
          goto LABEL_15;
        }
        uint64_t v16 = (void *)UIApp;
        char v10 = +[UIKeyboardInputModeController sharedInputModeController];
        id v17 = [v10 hardwareInputMode];
        id v18 = [v17 automaticHardwareLayout];
        [v16 setHardwareKeyboardLayoutName:v18];
      }
    }
  }
LABEL_15:
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained setCapsLockIfNeededForPhysicalKeyboardEvent:v23];

  if ([v23 _isKeyDown]) {
    uint64_t v20 = 4;
  }
  else {
    uint64_t v20 = 5;
  }
  id v21 = [v23 _unmodifiedInput];
  uint64_t v22 = [v23 _modifiedInput];
  [(_UIKeyboardStateManager *)self _handleWebKeyEvent:v23 withEventType:v20 withInputString:v21 withInputStringIgnoringModifiers:v22 executionContext:v6];
}

- (void)cancelDictationOnSendReturnKeyPressed
{
  if ([(UITextInputTraits *)self->m_traits returnKeyType] == 7
    && +[UIDictationController isRunning])
  {
    id v2 = +[UIDictationController sharedInstance];
    [v2 cancelDictation];
  }
}

- (void)handleKeyWithString:(id)a3 forKeyEvent:(id)a4 executionContext:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  unsigned int v11 = [v9 _inputFlags];
  uint64_t v12 = v11;
  uint64_t v13 = v11 & 0x18;
  BOOL v14 = v13 != 0;
  if ((unint64_t)[v8 length] >= 2)
  {
    BOOL v15 = objc_msgSend(v8, "substringFromIndex:", objc_msgSend(v8, "length") - 1);
    char v16 = [v15 _isDelete];

    if ((v16 & 1) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    [WeakRetained playDeleteKeyFeedbackIfNecessaryRepeat:0 rapid:0];

    v36[0] = MEMORY[0x1E4F143A8];
    v36[1] = 3221225472;
    v36[2] = __76___UIKeyboardStateManager_handleKeyWithString_forKeyEvent_executionContext___block_invoke;
    v36[3] = &unk_1E52E3628;
    void v36[4] = self;
    id v37 = v9;
    uint64_t v20 = [v10 childWithContinuation:v36];
    [(_UIKeyboardStateManager *)self handleDeleteAsRepeat:0 executionContext:v20];

    id v21 = v37;
LABEL_19:

    goto LABEL_20;
  }
  if ([v8 _isDelete]) {
    goto LABEL_7;
  }
LABEL_3:
  if (![v8 _isNewlineOrReturn])
  {
    BOOL v22 = [(_UIKeyboardStateManager *)self shouldSkipCandidateSelection];
    self->m_originalShouldSkipCandidateSelection = v22;
    if ((v13 != 0) == v22 || [(_UIKeyboardStateManager *)self isInHardwareKeyboardMode])
    {
      id v23 = [(_UIKeyboardStateManager *)self textInputTraits];
      unsigned int v24 = [v23 keyboardType];
      if ((v24 > 0xB || ((1 << v24) & 0x930) == 0) && v24 != 127)
      {

        goto LABEL_15;
      }

      BOOL v14 = 1;
    }
    [(_UIKeyboardStateManager *)self setShouldSkipCandidateSelection:v14];
LABEL_15:
    if (+[UIKeyboard usesInputSystemUI]) {
      [(_UIKeyboardStateManager *)self updateShiftState];
    }
    double v25 = [v9 _hint];
    uint64_t v28 = MEMORY[0x1E4F143A8];
    uint64_t v29 = 3221225472;
    int v30 = __76___UIKeyboardStateManager_handleKeyWithString_forKeyEvent_executionContext___block_invoke_3;
    uint64_t v31 = &unk_1E52E3628;
    uint64_t v32 = self;
    id v33 = v9;
    id v26 = [v10 childWithContinuation:&v28];
    -[_UIKeyboardStateManager handleStringInput:withFlags:withInputManagerHint:executionContext:](self, "handleStringInput:withFlags:withInputManagerHint:executionContext:", v8, v12, v25, v26, v28, v29, v30, v31, v32);

    id v21 = v33;
    goto LABEL_19;
  }
  [(_UIKeyboardStateManager *)self cancelDictationOnSendReturnKeyPressed];
  if (![(UITextInputTraits *)self->m_traits returnKeyGoesToNextResponder])
  {
    v34[0] = MEMORY[0x1E4F143A8];
    v34[1] = 3221225472;
    v34[2] = __76___UIKeyboardStateManager_handleKeyWithString_forKeyEvent_executionContext___block_invoke_2;
    v34[3] = &unk_1E52E3628;
    v34[4] = self;
    id v35 = v9;
    uint64_t v27 = [v10 childWithContinuation:v34];
    [(_UIKeyboardStateManager *)self handleStringInput:@"\n" withFlags:v12 withInputManagerHint:0 executionContext:v27];

    id v21 = v35;
    goto LABEL_19;
  }
  id v17 = [(_UIKeyboardStateManager *)self delegateAsResponder];
  id v18 = [v17 _nextKeyResponder];
  [v18 becomeFirstResponder];

  [(_UIKeyboardStateManager *)self completeHandleKeyEvent:v9];
  [v10 returnExecutionToParent];
LABEL_20:
}

- (void)completeHandleKeyEvent:(id)a3
{
  id v7 = [a3 _markedInput];
  if ([v7 length])
  {
    self->m_textInputChangesIgnored = 1;
    id v4 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    objc_msgSend(v4, "_setMarkedText:selectedRange:", v7, objc_msgSend(v7, "length"), 0);

    double v5 = [(_UIKeyboardStateManager *)self documentState];
    id v6 = objc_msgSend(v5, "documentStateAfterSettingMarkedText:selectedRange:", v7, objc_msgSend(v7, "length"), 0);
    [(_UIKeyboardStateManager *)self setDocumentState:v6];

    [(TIKeyboardState *)self->m_keyboardState setInputForMarkedText:v7];
    self->m_textInputChangesIgnored = 0;
    [(_UIKeyboardStateManager *)self updateChangeTimeAndIncrementCount];
    [(_UIKeyboardStateManager *)self setShiftOffIfNeeded];
  }
  self->unint64_t m_textInputChangingCount = 0;
  *(_WORD *)&self->m_textInputChangesIgnored = 0;
  self->m_textInputChangingDirection = 0;
}

- (BOOL)shouldDeferEventHandlingToSystemForTextInput:(id)a3 context:(id)a4
{
  double v5 = objc_msgSend(a4, "_uikitKeyEventContext", a3);
  LOBYTE(self) = [(_UIKeyboardStateManager *)self deferEventHandlingToSystemWithContext:v5];

  return (char)self;
}

- (BOOL)deferEventHandlingToSystemWithContext:(id)a3
{
  id v4 = a3;
  double v5 = [v4 keyEvent];
  if (![v4 shouldEvaluateForInputSystemHandling])
  {
    if (([v4 documentIsEditable] & 1) == 0 && objc_msgSend(v5, "keyCode") == 43)
    {
      id v8 = _UIKeyboardImplLog();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t v20 = 0;
        id v9 = "deferEventHandlingToSystemWithContext, handled tab";
LABEL_41:
        _os_log_debug_impl(&dword_1853B0000, v8, OS_LOG_TYPE_DEBUG, v9, v20, 2u);
        goto LABEL_42;
      }
      goto LABEL_42;
    }
    if (([v4 shouldInsertChar] & 1) == 0
      && [(_UIKeyboardStateManager *)self handleKeyTextCommandForCurrentEvent])
    {
      id v10 = _UIKeyboardImplLog();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t v20 = 0;
        unsigned int v11 = "deferEventHandlingToSystemWithContext, handleKeyTextCommandForCurrentEvent";
LABEL_45:
        _os_log_debug_impl(&dword_1853B0000, v10, OS_LOG_TYPE_DEBUG, v11, v20, 2u);
        goto LABEL_16;
      }
      goto LABEL_16;
    }
    if ([v4 shouldInsertChar]
      && [(_UIKeyboardStateManager *)self handleKeyAppCommandForCurrentEvent])
    {
      id v10 = _UIKeyboardImplLog();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t v20 = 0;
        unsigned int v11 = "deferEventHandlingToSystemWithContext, handleKeyAppCommandForCurrentEvent";
        goto LABEL_45;
      }
      goto LABEL_16;
    }
    if (([v5 modifierFlags] & 0x100000) != 0)
    {
      id v8 = _UIKeyboardImplLog();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t v20 = 0;
        id v9 = "deferEventHandlingToSystemWithContext, handled command modifier";
        goto LABEL_41;
      }
LABEL_42:

      BOOL v7 = 0;
      goto LABEL_43;
    }
    uint64_t v12 = [v5 characters];
    uint64_t v13 = [v12 length];

    if (!v13)
    {
      id v8 = _UIKeyboardImplLog();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t v20 = 0;
        id v9 = "deferEventHandlingToSystemWithContext, handled no characters";
        goto LABEL_41;
      }
      goto LABEL_42;
    }
    BOOL v14 = [v5 characters];
    int v15 = [v14 characterAtIndex:0];

    if (v15 > 12)
    {
      if (v15 != 13)
      {
        if (v15 != 127) {
          goto LABEL_22;
        }
        goto LABEL_32;
      }
    }
    else if (v15 != 3)
    {
      if (v15 != 8)
      {
LABEL_22:
        if ([v4 documentIsEditable] && objc_msgSend(v4, "shouldInsertChar"))
        {
          char v16 = [v5 characters];
          uint64_t v17 = [v5 inputFlags];
          id v18 = [v5 inputManagerHint];
          [(_UIKeyboardStateManager *)self addInputString:v16 withFlags:v17 withInputManagerHint:v18];

          id v10 = _UIKeyboardImplLog();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)uint64_t v20 = 0;
            unsigned int v11 = "deferEventHandlingToSystemWithContext, addInputString for character";
            goto LABEL_45;
          }
LABEL_16:

          BOOL v7 = 1;
          goto LABEL_43;
        }
LABEL_39:
        id v8 = _UIKeyboardImplLog();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)uint64_t v20 = 0;
          id v9 = "deferEventHandlingToSystemWithContext, did not handle";
          goto LABEL_41;
        }
        goto LABEL_42;
      }
LABEL_32:
      if ([v4 documentIsEditable])
      {
        -[_UIKeyboardStateManager deleteFromInputWithFlags:](self, "deleteFromInputWithFlags:", [v5 inputFlags]);
        id v10 = _UIKeyboardImplLog();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)uint64_t v20 = 0;
          unsigned int v11 = "deferEventHandlingToSystemWithContext, deleteFromInputWithFlags";
          goto LABEL_45;
        }
        goto LABEL_16;
      }
      goto LABEL_39;
    }
    if ([v4 documentIsEditable] && objc_msgSend(v4, "shouldInsertChar"))
    {
      [(_UIKeyboardStateManager *)self addInputString:@"\n" withFlags:0 withInputManagerHint:0];
      id v10 = _UIKeyboardImplLog();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t v20 = 0;
        unsigned int v11 = "deferEventHandlingToSystemWithContext, addInputString for enter";
        goto LABEL_45;
      }
      goto LABEL_16;
    }
    goto LABEL_39;
  }
  id v6 = _UIKeyboardImplLog();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v20 = 0;
    _os_log_debug_impl(&dword_1853B0000, v6, OS_LOG_TYPE_DEBUG, "deferEventHandlingToSystemWithContext, shouldEvaluateForInputSystemHandling", v20, 2u);
  }

  BOOL v7 = [(_UIKeyboardStateManager *)self handleKeyInputMethodCommandForCurrentEvent];
LABEL_43:

  return v7;
}

- (void)toggleSoftwareKeyboard
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained toggleSoftwareKeyboard];
}

- (void)ejectKeyDown
{
  if ([(_UIKeyboardStateManager *)self shouldApplyKeyboardCommandToUIHost])
  {
    id v4 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
    [v4 forwardInputDestinationEventToUIHost:sel_ejectKeyDown];
  }
  else
  {
    id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    [WeakRetained setHardwareKeyboardIsSeen];

    [(_UIKeyboardStateManager *)self toggleSoftwareKeyboard];
  }
}

- (void)setKeyboardMinimizedByDictation:(BOOL)a3
{
  BOOL v3 = a3;
  v21[2] = *MEMORY[0x1E4F143B8];
  p_presentationDelegate = &self->_presentationDelegate;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  BOOL v7 = [WeakRetained geometryDelegate];
  int v8 = [v7 isMinimized];

  if (v8 != v3)
  {
    id v9 = +[UIDictationController activeInstance];
    [v9 setShouldSuppressSoftwareKeyboard:v3];

    id v10 = objc_loadWeakRetained((id *)p_presentationDelegate);
    unsigned int v11 = [v10 geometryDelegate];
    [v11 setMinimized:v3];

    if (+[UIKeyboard isKeyboardProcess])
    {
      uint64_t v12 = [(_UIKeyboardStateManager *)self inputSystemSourceSession];
      uint64_t v13 = v12;
      if (v12)
      {
        BOOL v14 = [v12 textOperations];
        [v14 setCustomInfoType:0x1ED14BAA0];
        v20[0] = @"selector";
        int v15 = NSStringFromSelector(sel_setKeyboardMinimizedByDictation_);
        v20[1] = @"minimized";
        v21[0] = v15;
        char v16 = [NSNumber numberWithBool:v3];
        v21[1] = v16;
        uint64_t v17 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v21 forKeys:v20 count:2];
        [v14 setCustomInfo:v17];

        [v13 flushOperations];
      }
    }
    else if (+[UIKeyboard usesInputSystemUI])
    {
      id v19 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
      id v18 = [NSNumber numberWithBool:v3];
      [v19 forwardDictationEventToUIHost:sel_setKeyboardMinimizedByDictation_ withOptionalObject:v18];
    }
  }
}

- (id)_activeAssertionController
{
  BOOL v3 = [(_UIKeyboardStateManager *)self textInteractionAssistant];
  id v4 = [v3 _assertionController];

  if (!v4)
  {
    double v5 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    id v6 = [v5 selectionDisplayInteraction];
    id v4 = [v6 _cursorAssertionController];
  }
  return v4;
}

- (void)setCaretVisible:(BOOL)a3
{
  BOOL v3 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained setCaretVisible:v3];
}

- (void)clearSelection
{
  BOOL v3 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  id v4 = objc_msgSend(v3, "__content");
  char v5 = objc_opt_respondsToSelector();

  if (v5)
  {
    self->m_textInputChangesIgnored = 1;
    id v6 = [(_UIKeyboardStateManager *)self textInteractionAssistant];
    id v7 = [v6 activeSelection];

    [v7 clearSelection];
    [v7 commit];
    [(_UIKeyboardStateManager *)self syncDocumentStateToInputDelegate];
    self->m_textInputChangesIgnored = 0;
  }
}

- (id)dynamicCaretList
{
  id v2 = [(_UIKeyboardStateManager *)self textInteractionAssistant];
  BOOL v3 = [v2 _legacySelectionView];
  id v4 = [v3 dynamicCaretList];

  return v4;
}

- (void)updateNoContentViews
{
  BOOL v3 = [(_UIKeyboardStateManager *)self dynamicCaretList];

  if (v3)
  {
    id v5 = [(_UIKeyboardStateManager *)self textInteractionAssistant];
    id v4 = [v5 _legacySelectionView];
    objc_msgSend(v4, "updateDocumentHasContent:", -[_UIKeyboardStateManager noContent](self, "noContent") ^ 1);
  }
}

- (BOOL)canHandleKeyHitTest
{
  id v2 = [(_UIKeyboardStateManager *)self inputManagerState];
  char v3 = [v2 canHandleKeyHitTest];

  return v3;
}

- (BOOL)isAutoFillMode
{
  char v3 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  id v4 = [v3 keyInputDelegate];
  if (objc_opt_respondsToSelector())
  {
    id v5 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    id v6 = [v5 keyInputDelegate];
    char v7 = [v6 isAutoFillMode];
  }
  else
  {
    char v7 = 0;
  }

  return v7;
}

- (void)trackUsageForAcceptedAutocorrection:(id)a3 promptWasShowing:(BOOL)a4
{
  BOOL v4 = a4;
  id v8 = a3;
  id v5 = UIKeyboardGetCurrentInputMode();
  id v6 = UIKeyboardInputModeGetIdentifierWithKeyboardLayouts(v5);

  if ([v8 isForShortcutConversion])
  {
    char v7 = TIStatisticGetKeyForCandidateAccepted();
    TIStatisticScalarIncrement();
  }
  else if ([v8 wordOriginFeedbackID])
  {
    [v8 usageTrackingMask];
    TIStatisticScalarIncrementAutocorrectionKey();
    if (v4)
    {
      [v8 usageTrackingMask];
      TIStatisticScalarIncrementAutocorrectionKey();
    }
  }
}

- (void)trackUsageForPromptedCorrection:(id)a3 inputString:(id)a4 previousPrompt:(id)a5
{
  id v14 = a5;
  id v7 = a3;
  id v8 = [v14 correction];
  char v9 = [v7 isEqualToString:v8];

  if ((v9 & 1) == 0)
  {
    id v10 = UIKeyboardGetCurrentInputMode();
    unsigned int v11 = UIKeyboardInputModeGetIdentifierWithKeyboardLayouts(v10);

    if (v8)
    {
      [v14 usageTrackingMask];
      TIStatisticScalarIncrementAutocorrectionKey();
    }
    uint64_t v12 = [(_UIKeyboardStateManager *)self autocorrectionController];
    uint64_t v13 = [v12 autocorrection];
    [v13 usageTrackingMask];
    TIStatisticScalarIncrementAutocorrectionKey();
  }
}

- (void)trackUsageForCandidateAcceptedAction:(id)a3
{
  id v17 = a3;
  BOOL v4 = [(UIKeyboardCandidateList *)self->m_candidateList statisticsIdentifier];
  if (!v4) {
    goto LABEL_11;
  }
  id v5 = UIKeyboardGetCurrentInputMode();
  id v6 = UIKeyboardInputModeGetIdentifierWithKeyboardLayouts(v5);

  id v7 = TIStatisticGetKeyForCandidateAccepted();
  TIStatisticScalarIncrement();

  if ((UIKeyboardGetSafeDeviceIdiom() & 0xFFFFFFFFFFFFFFFBLL) != 1)
  {
    id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    char v9 = [WeakRetained layout];
    uint64_t v10 = [v9 currentKeyplane];
    if (!v10)
    {

      goto LABEL_7;
    }
    unsigned int v11 = (void *)v10;
    id v12 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    uint64_t v13 = [v12 layout];
    id v14 = [v13 currentKeyplane];
    char v15 = [v14 visualStyling];

    if ((v15 & 0x40) != 0)
    {
      id WeakRetained = TIStatisticGetKeyForCandidateAccepted();
      TIStatisticScalarIncrement();
LABEL_7:
    }
  }
  if ([(UIKeyboardCandidateList *)self->m_candidateList selectedSortIndex] != 0x7FFFFFFFFFFFFFFFLL)
  {
    char v16 = TIStatisticGetKeyForCandidateAcceptedSelectedSortingMethod();
    TIStatisticScalarIncrement();
  }
LABEL_11:
}

- (id)responderForSendCurrentLocation
{
  id v2 = [(_UIKeyboardStateManager *)self inputDelegate];
  if ((objc_opt_respondsToSelector() & 1) != 0 && (uint64_t v3 = [v2 _sendCurrentLocationAction]) != 0)
  {
    BOOL v4 = [v2 targetForAction:v3 withSender:0];
  }
  else
  {
    BOOL v4 = 0;
  }

  return v4;
}

- (void)performSendCurrentLocation
{
  id v5 = [(_UIKeyboardStateManager *)self inputDelegate];
  uint64_t v3 = [(_UIKeyboardStateManager *)self responderForSendCurrentLocation];
  if (v3)
  {
    BOOL v4 = (const char *)[v5 _sendCurrentLocationAction];
    if (dyld_program_sdk_at_least()) {
      [v3 v4];
    }
    else {
      objc_msgSend(v3, sel_performSelector_, v4);
    }
  }
}

- (void)enableTransientInputDelegateSelectionMode
{
  uint64_t v3 = [MEMORY[0x1E4F1CAC0] mainRunLoop];
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __68___UIKeyboardStateManager_enableTransientInputDelegateSelectionMode__block_invoke;
  v4[3] = &unk_1E52D9F70;
  v4[4] = self;
  [v3 performBlock:v4];
}

- (void)enableTransientSelectionMode
{
  uint64_t v3 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  BOOL v4 = [v3 delegateRespectingForwardingDelegate:0];
  [(_UIKeyboardStateManager *)self _setTransientSelectionModeEnabled:1 forInputDelegate:v4];

  if (+[UIKeyboard isKeyboardProcess])
  {
    id v5 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    id v7 = [v5 inputSystemSourceSession];

    if (v7)
    {
      id v6 = [v7 textOperations];
      [v6 setEditingActionSelector:sel_enableTransientSelectionMode];
      [v7 flushOperations];
    }
  }
}

- (void)disableTransientSelectionMode
{
  uint64_t v3 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  BOOL v4 = [v3 delegateRespectingForwardingDelegate:0];
  [(_UIKeyboardStateManager *)self _setTransientSelectionModeEnabled:0 forInputDelegate:v4];

  if (+[UIKeyboard isKeyboardProcess])
  {
    id v5 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    id v7 = [v5 inputSystemSourceSession];

    if (v7)
    {
      id v6 = [v7 textOperations];
      [v6 setEditingActionSelector:sel_disableTransientSelectionMode];
      [v7 flushOperations];
    }
  }
}

- (void)didChangeForwardingInputDelegate:(id)a3
{
  [(_UIKeyboardStateManager *)self takeTextInputTraitsFromDelegate];
  if (a3)
  {
    id v5 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    id v6 = [v5 forwardingInputDelegate];
    uint64_t v7 = [v6 keyboardType];

    if (v7 == 122)
    {
      [(_UIKeyboardStateManager *)self recomputeActiveInputModesWithExtensions:0 allowNonLinguisticInputModes:1];
    }
  }
  else
  {
    [(_UIKeyboardStateManager *)self disableTransientSelectionMode];
    [(_UIKeyboardStateManager *)self recomputeActiveInputModesWithExtensions:1 allowNonLinguisticInputModes:1];
    id v8 = +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate];
    [v8 updateRenderConfigForCurrentResponder];

    [(_UIKeyboardStateManager *)self reinitializeAfterInputModeSwitch:0];
    p_presentationDelegate = &self->_presentationDelegate;
    id WeakRetained = objc_loadWeakRetained((id *)p_presentationDelegate);
    unsigned int v11 = [WeakRetained layout];
    char v12 = objc_opt_respondsToSelector();

    if (v12)
    {
      id v14 = objc_loadWeakRetained((id *)p_presentationDelegate);
      uint64_t v13 = [v14 layout];
      [v13 didTriggerDestructiveRenderConfigChange];
    }
  }
}

- (void)_setTransientSelectionModeEnabled:(BOOL)a3 forInputDelegate:(id)a4
{
  BOOL v4 = a3;
  id v6 = a4;
  if (objc_opt_respondsToSelector())
  {
    id v5 = [v6 interactionAssistant];
    [v5 setSelectionDisplayVisible:1];
    [v5 setCursorBlinkAnimationEnabled:v4 ^ 1];
    [v5 setGhostAppearance:v4];
  }
}

- (void)_performKeyboardOutput:(id)a3 respectingForwardingDelegate:(BOOL)a4
{
  BOOL v4 = a4;
  id v14 = (void (**)(void))a3;
  id v6 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  uint64_t v7 = [v6 forwardingInputDelegate];

  if (!v7 || v4)
  {
    v14[2]();
  }
  else
  {
    id v8 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    uint64_t v9 = [v8 shouldRespectForwardingInputDelegate];

    uint64_t v10 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    [v10 setShouldRespectForwardingInputDelegate:0];

    unsigned int v11 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    [v11 updateRespectForwardingInputDelegateFlagInDestination];

    v14[2]();
    char v12 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    [v12 setShouldRespectForwardingInputDelegate:v9];

    uint64_t v13 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    [v13 updateRespectForwardingInputDelegateFlagInDestination];
  }
}

- (void)_ensureRTIConnection
{
  id v2 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
  [v2 ensureRTIConnection];
}

- (id)buildInputSourceState
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  uint64_t v3 = [WeakRetained buildInputSourceState];

  return v3;
}

- (void)notifyInputSourceStateChangeIfNeeded
{
  if (+[UIKeyboard isKeyboardProcess])
  {
    uint64_t v3 = [(_UIKeyboardStateManager *)self inputSystemSourceSession];
    if (v3)
    {
      id v6 = v3;
      BOOL v4 = [v3 textOperations];
      id v5 = [(_UIKeyboardStateManager *)self buildInputSourceState];
      [v4 setInputSourceState:v5];

      [v6 flushOperations];
      uint64_t v3 = v6;
    }
  }
}

- (id)remoteTextEditingMetadata
{
  return (id)[MEMORY[0x1E4F1CA60] dictionary];
}

- (unint64_t)delegateConformanceType
{
  id v2 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  unint64_t v3 = [v2 delegateConformanceType];

  return v3;
}

- (void)resetInputDelegate
{
  id v3 = [(_UIKeyboardStateManager *)self delegate];
  [(_UIKeyboardStateManager *)self setDelegate:0];
  [(_UIKeyboardStateManager *)self setDelegate:v3];
}

- (id)inputSystemSourceSession
{
  id v2 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  id v3 = [v2 inputSystemSourceSession];

  return v3;
}

- (void)modifyTextInputTraits:(id)a3 forceSync:(BOOL)a4
{
  BOOL v4 = a4;
  remoteTextInputTraits = self->_remoteTextInputTraits;
  uint64_t v7 = (void (**)(id, id))a3;
  id v8 = (id)[(UITextInputTraits *)remoteTextInputTraits copy];
  v7[2](v7, v8);

  [(_UIKeyboardStateManager *)self updateInputDelegateForRemoteTraitChange:v8 forceSync:v4];
}

- (void)updateInputDelegateForRemoteTraitChange:(id)a3 forceSync:(BOOL)a4
{
  BOOL v4 = a4;
  v98[1] = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  if (![(_UIKeyboardStateManager *)self showingEmojiSearch])
  {
    objc_storeStrong((id *)&self->_remoteTextInputTraits, a3);
    uint64_t v8 = [v7 autocapitalizationType];
    uint64_t v9 = [(_UIKeyboardStateManager *)self inputDelegate];
    [v9 setAutocapitalizationType:v8];

    uint64_t v10 = [v7 autocorrectionType];
    unsigned int v11 = [(_UIKeyboardStateManager *)self inputDelegate];
    [v11 setAutocorrectionType:v10];

    uint64_t v12 = [v7 spellCheckingType];
    uint64_t v13 = [(_UIKeyboardStateManager *)self inputDelegate];
    [v13 setSpellCheckingType:v12];

    uint64_t v14 = [v7 keyboardType];
    char v15 = [(_UIKeyboardStateManager *)self inputDelegate];
    [v15 setKeyboardType:v14];

    uint64_t v16 = [v7 returnKeyType];
    id v17 = [(_UIKeyboardStateManager *)self inputDelegate];
    [v17 setReturnKeyType:v16];

    uint64_t v18 = [v7 enablesReturnKeyAutomatically];
    id v19 = [(_UIKeyboardStateManager *)self inputDelegate];
    [v19 setEnablesReturnKeyAutomatically:v18];

    uint64_t v20 = [v7 isSecureTextEntry];
    id v21 = [(_UIKeyboardStateManager *)self inputDelegate];
    [v21 setSecureTextEntry:v20];

    BOOL v22 = [v7 textContentType];
    id v23 = [(_UIKeyboardStateManager *)self inputDelegate];
    [v23 setTextContentType:v22];

    uint64_t v24 = [v7 smartInsertDeleteType];
    uint64_t v25 = [(_UIKeyboardStateManager *)self inputDelegate];
    [(id)v25 setSmartInsertDeleteType:v24];

    id v26 = [(_UIKeyboardStateManager *)self inputDelegate];
    LOBYTE(v25) = objc_opt_respondsToSelector();

    if (v25)
    {
      uint64_t v27 = [(_UIKeyboardStateManager *)self inputDelegate];
      objc_msgSend(v27, "setForceEnableDictation:", objc_msgSend(v7, "forceEnableDictation"));
    }
    uint64_t v28 = [(_UIKeyboardStateManager *)self inputDelegate];
    char v29 = objc_opt_respondsToSelector();

    if (v29)
    {
      int v30 = [(_UIKeyboardStateManager *)self inputDelegate];
      objc_msgSend(v30, "setDevicePasscodeEntry:", objc_msgSend(v7, "isDevicePasscodeEntry"));
    }
    -[UITextInputTraits setHidePrediction:](self->m_traits, "setHidePrediction:", [v7 hidePrediction]);
    uint64_t v31 = [(_UIKeyboardStateManager *)self inputDelegate];
    char v32 = objc_opt_respondsToSelector();

    if (v32)
    {
      id v33 = [(_UIKeyboardStateManager *)self inputDelegate];
      objc_msgSend(v33, "setHidePrediction:", objc_msgSend(v7, "hidePrediction"));
    }
    -[UITextInputTraits setDisablePrediction:](self->m_traits, "setDisablePrediction:", [v7 disablePrediction]);
    uint64_t v34 = [(_UIKeyboardStateManager *)self inputDelegate];
    char v35 = objc_opt_respondsToSelector();

    if (v35)
    {
      uint64_t v36 = [(_UIKeyboardStateManager *)self inputDelegate];
      objc_msgSend(v36, "setDisablePrediction:", objc_msgSend(v7, "disablePrediction"));
    }
    id v37 = [(_UIKeyboardStateManager *)self inputDelegate];
    char v38 = objc_opt_respondsToSelector();

    id v39 = [(_UIKeyboardStateManager *)self inputDelegate];
    if (v38)
    {
      objc_msgSend(v39, "setInlinePredictionType:", objc_msgSend(v7, "inlinePredictionType"));
    }
    else
    {
      char v40 = objc_opt_respondsToSelector();

      if ((v40 & 1) == 0) {
        goto LABEL_15;
      }
      id v39 = [(_UIKeyboardStateManager *)self inputDelegate];
      objc_msgSend(v39, "setInlineCompletionType:", objc_msgSend(v7, "inlinePredictionType"));
    }
  }
LABEL_15:
  int v41 = [(UITextInputTraits *)self->m_traits forceFloatingKeyboard];
  if (v41 != [v7 forceFloatingKeyboard])
  {
    -[UITextInputTraits setForceFloatingKeyboard:](self->m_traits, "setForceFloatingKeyboard:", [v7 forceFloatingKeyboard]);
    -[_UIKeyboardStateManager setFloatingForced:](self, "setFloatingForced:", [v7 forceFloatingKeyboard]);
    id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    [WeakRetained refreshRivenPreferences];

    [(_UIKeyboardStateManager *)self notifyInputSourceStateChangeIfNeeded];
  }
  uint64_t v43 = [(TIKeyboardState *)self->m_keyboardState autofillMode];
  id v44 = [(_UIKeyboardStateManager *)self autofillController];
  uint64_t v94 = v43;
  [v44 setDelegateNeedsAutofillMode:v43];

  if (v4) {
    [(_UIKeyboardStateManager *)self _requestInputManagerSync];
  }
  int v45 = [v7 forceEnableDictation];
  BOOL v46 = [(UITextInputTraits *)self->m_traits forceEnableDictation];
  uint64_t v47 = [v7 inputContextHistory];
  id v93 = [(UITextInputTraits *)self->m_traits inputContextHistory];

  id v95 = v47;
  uint64_t v48 = [v7 responseContext];
  int v49 = (void *)v48;
  if (v48) {
    id v50 = (__CFString *)v48;
  }
  else {
    id v50 = &stru_1ED0E84C0;
  }
  uint64_t v51 = [(UITextInputTraits *)self->m_traits responseContext];
  BOOL v52 = (void *)v51;
  if (v51) {
    id v53 = (__CFString *)v51;
  }
  else {
    id v53 = &stru_1ED0E84C0;
  }
  int v96 = [(__CFString *)v50 isEqualToString:v53];

  uint64_t v54 = [v7 keyboardAppearance];
  int64_t v55 = [(UITextInputTraits *)self->m_traits keyboardAppearance];
  uint64_t v56 = [v7 updateResultComparedToTraits:self->m_traits];
  int v57 = [(UITextInputTraits *)self->m_traits isSecureTextEntry];
  if (v57 == [v7 isSecureTextEntry]
    && (int64_t v58 = -[UITextInputTraits keyboardType](self->m_traits, "keyboardType"), v58 == [v7 keyboardType]))
  {
    int64_t v91 = v55;
    id v59 = [(UITextInputTraits *)self->m_traits textContentType];
    uint64_t v60 = [v7 textContentType];
    if (v59 == (void *)v60)
    {

      double v86 = (UITextInputTraits *)[v7 copy];
      m_traits = self->m_traits;
      self->m_traits = v86;

      goto LABEL_32;
    }
    BOOL v61 = (void *)v60;
    [(UITextInputTraits *)self->m_traits textContentType];
    CGFloat v62 = v90 = v54;
    unint64_t v63 = [v7 textContentType];
    char v89 = [v62 isEqualToString:v63];

    uint64_t v54 = v90;
    id v64 = (UITextInputTraits *)[v7 copy];
    unint64_t v65 = self->m_traits;
    self->m_traits = v64;

    int64_t v55 = v91;
    if (v89) {
      goto LABEL_32;
    }
  }
  else
  {
    uint64_t v66 = (UITextInputTraits *)[v7 copy];
    uint64_t v67 = self->m_traits;
    self->m_traits = v66;
  }
  -[_UIKeyboardStateManager recomputeActiveInputModesWithExtensions:](self, "recomputeActiveInputModesWithExtensions:", [v7 isSecureTextEntry] ^ 1);
LABEL_32:
  int v68 = v45 ^ v46;
  if (v4
    && ([(_UIKeyboardStateManager *)self delegate],
        double v69 = objc_claimAutoreleasedReturnValue(),
        v69,
        v69)
    && v56 == 2)
  {
    int64_t v92 = v55;
    uint64_t v70 = v54;
    id v72 = v93;
    uint64_t v71 = v94;
    if (self->m_shift)
    {
      id v73 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      id v74 = [v73 layout];
      if (!v74
        || self->m_shiftLocked
        || [(_UIKeyboardStateManager *)self callLayoutIsShiftKeyBeingHeld])
      {
      }
      else
      {
        BOOL v88 = [(_UIKeyboardStateManager *)self callLayoutIsShiftKeyPlaneChooser];

        if (v88) {
          [(_UIKeyboardStateManager *)self clearShiftState];
        }
      }
    }
    if (v70 != v92 && +[UIKeyboard isKeyboardProcess])
    {
      int v75 = +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate];
      [v75 traitCollectionDidChange];
    }
    id v76 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    [v76 updateLayout];

    double v77 = v95;
  }
  else
  {
    BOOL v78 = v56 == 1;
    uint64_t v71 = v94;
    double v77 = v95;
    id v72 = v93;
    if (v78) {
      [(_UIKeyboardStateManager *)self updateReturnKey:1];
    }
  }
  if (v68)
  {
    double v79 = +[UIDictationController sharedInstance];
    uint64_t v97 = 0x1ED0EED40;
    v98[0] = @"Dictation state changed due to trait change";
    long long v80 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v98 forKeys:&v97 count:1];
    [v79 postNotificationName:@"UIKeyboardDictationAvailabilityDidChangeNotification" userInfo:v80];
  }
  self->int64_t m_cachedAutofillMode = [(_UIKeyboardStateManager *)self needAutofill];
  if (v71)
  {
    double v81 = [(_UIKeyboardStateManager *)self autocorrectionController];
    if ([v81 hasAutofillCandidates])
    {
    }
    else
    {
      BOOL v82 = [(TIKeyboardCandidateResultSet *)self->m_candidateResultSet hasOnlySlottedCandidates];

      if (!v82) {
        [(_UIKeyboardStateManager *)self generateAutofillCandidateByAddingTask:1];
      }
    }
  }
  if (v77 == v72) {
    int v83 = v96;
  }
  else {
    int v83 = 1;
  }
  if (v83 == 1) {
    [(_UIKeyboardStateManager *)self responseContextDidChange];
  }
  if ((+[UIKeyboard usesInputSystemUI]
     || +[UIKeyboard usesInputSystemUIForAutoFillOnlyWithRTI])&& [(_UIKeyboardStateManager *)self isRTIClient])
  {
    double v84 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
    [v84 documentTraitsChanged];
  }
  if (+[UIKeyboard isKeyboardProcess])
  {
    uint64_t v85 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    [v85 updateDelegateConformanceForRemoteTraits];
  }
}

- (void)updateInputDelegateForRemoteDocumentStateChange:(id)a3 selectedTextRange:(_NSRange)a4 hasText:(BOOL)a5 forceSync:(BOOL)a6
{
  NSUInteger length = a4.length;
  NSUInteger location = a4.location;
  id v11 = a3;
  uint64_t v12 = [v11 fullString];
  uint64_t v13 = [v11 selectedText];
  if (v13)
  {
    uint64_t v14 = (void *)v13;
    char v15 = [v11 selectedText];
    uint64_t v16 = [v15 length];

    if (!v16)
    {
      id v27 = objc_alloc(MEMORY[0x1E4FAE2A8]);
      id v26 = [v11 contextBeforeInput];
      id v17 = [v11 markedText];
      uint64_t v18 = [v11 contextAfterInput];
      uint64_t v19 = [v11 selectedRangeInMarkedText];
      uint64_t v21 = objc_msgSend(v27, "initWithUnboundedContextBefore:markedText:selectedText:unboundedContextAfter:selectedRangeInMarkedText:", v26, v17, 0, v18, v19, v20);

      id v11 = (id)v21;
    }
  }
  if (qword_1EB25FD70 != -1) {
    dispatch_once(&qword_1EB25FD70, &__block_literal_global_1821);
  }
  BOOL v22 = [(_UIKeyboardStateManager *)self taskQueue];
  v28[0] = MEMORY[0x1E4F143A8];
  v28[1] = 3221225472;
  v28[2] = __111___UIKeyboardStateManager_updateInputDelegateForRemoteDocumentStateChange_selectedTextRange_hasText_forceSync___block_invoke_3;
  void v28[3] = &unk_1E52E4448;
  BOOL v33 = a6;
  BOOL v34 = a5;
  v28[4] = self;
  id v29 = v12;
  id v30 = v11;
  NSUInteger v31 = location;
  NSUInteger v32 = length;
  uint64_t v23 = qword_1EB25FD68;
  id v24 = v11;
  id v25 = v12;
  [v22 addTask:v28 breadcrumb:v23];
}

- (void)updateForExpectedRemoteDocumentStateChange:(id)a3 selectedTextRange:(_NSRange)a4 forceSync:(BOOL)a5
{
  BOOL v5 = a5;
  id v7 = a3;
  if (v5
    && [(_UIKeyboardStateManager *)self hasAutocorrectPrompt]
    && +[UIKeyboard isKeyboardProcess])
  {
    uint64_t v8 = [(_UIKeyboardStateManager *)self autocorrectionController];
    uint64_t v9 = [v8 autocorrection];
    [(_UIKeyboardStateManager *)self updateAutocorrectPrompt:v9];
  }
  if (qword_1EB25FD80 != -1) {
    dispatch_once(&qword_1EB25FD80, &__block_literal_global_1825);
  }
  uint64_t v10 = [(_UIKeyboardStateManager *)self taskQueue];
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  void v11[2] = __98___UIKeyboardStateManager_updateForExpectedRemoteDocumentStateChange_selectedTextRange_forceSync___block_invoke_3;
  void v11[3] = &unk_1E52E34C8;
  void v11[4] = self;
  [v10 addTask:v11 breadcrumb:qword_1EB25FD78];
}

- (BOOL)assertTextForRemoteDocument:(id)a3 withSelectionDelta:(id)a4 updatingSelection:(BOOL)a5
{
  BOOL v5 = a5;
  int64_t var1 = a4.var1;
  int64_t var0 = a4.var0;
  id v9 = a3;
  BOOL v10 = v9 != 0;
  if (v9)
  {
    id v11 = [(_UIKeyboardStateManager *)self inputDelegate];
    [(_UIKeyboardStateManager *)self replaceAllTextInResponder:v11 withText:v9];
  }
  if (var0 | var1)
  {
    uint64_t v12 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    uint64_t v13 = [v12 asyncCapableInputDelegate];

    if (v13)
    {
      uint64_t v14 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      v19[0] = MEMORY[0x1E4F143A8];
      v19[1] = 3221225472;
      v19[2] = __92___UIKeyboardStateManager_assertTextForRemoteDocument_withSelectionDelta_updatingSelection___block_invoke;
      v19[3] = &unk_1E52D9F70;
      v19[4] = self;
      objc_msgSend(v14, "adjustSelection:completionHandler:", var0, var1, v19);

      BOOL v10 = 1;
    }
    else
    {
      char v15 = [(_UIKeyboardStateManager *)self inputDelegate];
      uint64_t v16 = objc_msgSend(v15, "_rangeFromCurrentRangeWithDelta:", var0, var1);

      id v17 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      [v17 setSelectedTextRange:v16];

      if (v5)
      {
        [(_UIKeyboardStateManager *)self updateForChangedSelection];
        BOOL v10 = 1;
      }
    }
  }

  return v10;
}

- (id)asyncWebKitInteractionDelegate
{
  id v2 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  id v3 = [v2 asyncWebKitInteractionDelegate];

  return v3;
}

- (void)insertAttributedText:(id)a3
{
  id v4 = a3;
  id v5 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  [v5 insertAttributedText:v4];
}

- (void)insertAdaptiveImageGlyph:(id)a3
{
  id v7 = a3;
  id v4 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  id v5 = [v4 delegateRespectingForwardingDelegate:0];

  if ([(_UIKeyboardStateManager *)self canInsertAdaptiveImageGlyph]
    && (objc_opt_respondsToSelector() & 1) != 0)
  {
    id v6 = [v5 selectedTextRange];
    [v5 insertAdaptiveImageGlyph:v7 replacementRange:v6];

    [(_UIKeyboardStateManager *)self setPreviousInputString:0];
  }
}

- (void)insertEmojiImageTextAttachment:(id)a3
{
  id v7 = a3;
  id v4 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  id v5 = [v4 delegateRespectingForwardingDelegate:0];

  if ([(_UIKeyboardStateManager *)self canInsertEmojiImageTextAttachment]
    && (objc_opt_respondsToSelector() & 1) != 0)
  {
    id v6 = [v5 selectedTextRange];
    [v5 insertEmojiImageTextAttachment:v7 replacementRange:v6];

    [(_UIKeyboardStateManager *)self setPreviousInputString:0];
  }
}

- (void)updateAssistantViewInfo:(id)a3
{
  p_presentationDelegate = &self->_presentationDelegate;
  id v4 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)p_presentationDelegate);
  [WeakRetained updateAssistantViewInfo:v4];
}

- (void)applyAssistantItem:(id)a3
{
  p_presentationDelegate = &self->_presentationDelegate;
  id v4 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)p_presentationDelegate);
  [WeakRetained applyAssistantItem:v4];
}

- (void)unmarkText:(id)a3
{
  id v4 = a3;
  id v5 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  [v5 unmarkText:v4];
}

- (id)_markedText
{
  id v2 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  id v3 = [v2 markedText];

  return v3;
}

- (void)handleRemoteDictationEvent_switchToDictationInputModeWithOptions:(id)a3
{
  id v3 = a3;
  int has_internal_diagnostics = os_variant_has_internal_diagnostics();
  BOOL v5 = +[UIKeyboard isKeyboardProcess];
  if (has_internal_diagnostics)
  {
    if (!v5)
    {
      id v7 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1853B0000, v7, OS_LOG_TYPE_FAULT, "Unexpected event handling", buf, 2u);
      }
    }
  }
  else if (!v5)
  {
    uint64_t v8 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &handleRemoteDictationEvent_switchToDictationInputModeWithOptions____s_category)+ 8);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v9 = 0;
      _os_log_impl(&dword_1853B0000, v8, OS_LOG_TYPE_ERROR, "Unexpected event handling", v9, 2u);
    }
  }
  id v6 = +[UIDictationController sharedInstance];
  [v6 switchToDictationInputModeWithOptions:v3];
}

- (void)handleRemoteDictationEvent_switchToDictationLanguage:(id)a3
{
  id v3 = a3;
  int has_internal_diagnostics = os_variant_has_internal_diagnostics();
  BOOL v5 = +[UIKeyboard isKeyboardProcess];
  if (has_internal_diagnostics)
  {
    if (!v5)
    {
      id v7 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1853B0000, v7, OS_LOG_TYPE_FAULT, "Unexpected event handling", buf, 2u);
      }
    }
  }
  else if (!v5)
  {
    uint64_t v8 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &handleRemoteDictationEvent_switchToDictationLanguage____s_category)+ 8);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v9 = 0;
      _os_log_impl(&dword_1853B0000, v8, OS_LOG_TYPE_ERROR, "Unexpected event handling", v9, 2u);
    }
  }
  id v6 = +[UIDictationController sharedInstance];
  [v6 switchToDictationLanguage:v3];
}

- (void)handleRemoteDictationEvent_startDictation
{
  int has_internal_diagnostics = os_variant_has_internal_diagnostics();
  BOOL v3 = +[UIKeyboard isKeyboardProcess];
  if (has_internal_diagnostics)
  {
    if (!v3)
    {
      BOOL v5 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1853B0000, v5, OS_LOG_TYPE_FAULT, "Unexpected event handling", buf, 2u);
      }
    }
  }
  else if (!v3)
  {
    id v6 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &handleRemoteDictationEvent_startDictation___s_category)
                      + 8);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v7 = 0;
      _os_log_impl(&dword_1853B0000, v6, OS_LOG_TYPE_ERROR, "Unexpected event handling", v7, 2u);
    }
  }
  id v4 = +[UIDictationController sharedInstance];
  [v4 startDictation];
}

- (void)handleRemoteDictationEvent_stopDictation:(BOOL)a3
{
  BOOL v3 = a3;
  int has_internal_diagnostics = os_variant_has_internal_diagnostics();
  BOOL v5 = +[UIKeyboard isKeyboardProcess];
  if (has_internal_diagnostics)
  {
    if (!v5)
    {
      uint64_t v8 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1853B0000, v8, OS_LOG_TYPE_FAULT, "Unexpected event handling", buf, 2u);
      }
    }
  }
  else if (!v5)
  {
    id v9 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &handleRemoteDictationEvent_stopDictation____s_category)
                      + 8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)BOOL v10 = 0;
      _os_log_impl(&dword_1853B0000, v9, OS_LOG_TYPE_ERROR, "Unexpected event handling", v10, 2u);
    }
  }
  id v6 = +[UIDictationController sharedInstance];
  [v6 stopDictation:v3];

  id v7 = +[UIDictationController activeInstance];
  [v7 resignFirstResponderWhenIdleIfNeeded];
}

- (void)handleRemoteDictationEvent_cancelDictation
{
  int has_internal_diagnostics = os_variant_has_internal_diagnostics();
  BOOL v3 = +[UIKeyboard isKeyboardProcess];
  if (has_internal_diagnostics)
  {
    if (!v3)
    {
      id v6 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1853B0000, v6, OS_LOG_TYPE_FAULT, "Unexpected event handling", buf, 2u);
      }
    }
  }
  else if (!v3)
  {
    id v7 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &handleRemoteDictationEvent_cancelDictation___s_category)
                      + 8);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_1853B0000, v7, OS_LOG_TYPE_ERROR, "Unexpected event handling", v8, 2u);
    }
  }
  id v4 = +[UIDictationController sharedInstance];
  [v4 cancelDictation];

  BOOL v5 = +[UIDictationController activeInstance];
  [v5 resignFirstResponderWhenIdleIfNeeded];
}

- (void)handleRemoteDictationEvent_handleTip:(id)a3
{
  id v4 = a3;
  int has_internal_diagnostics = os_variant_has_internal_diagnostics();
  BOOL v6 = +[UIKeyboard isKeyboardProcess];
  if (has_internal_diagnostics)
  {
    if (!v6)
    {
      uint64_t v12 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1853B0000, v12, OS_LOG_TYPE_FAULT, "Unexpected event handling", buf, 2u);
      }
    }
  }
  else if (!v6)
  {
    uint64_t v13 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &handleRemoteDictationEvent_handleTip____s_category) + 8);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl(&dword_1853B0000, v13, OS_LOG_TYPE_ERROR, "Unexpected event handling", v14, 2u);
    }
  }
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  uint64_t v8 = [WeakRetained dictationPopoverController];
  id v9 = v8;
  if (v4)
  {
    BOOL v10 = [v4 objectForKeyedSubscript:@"text"];
    id v11 = [v4 objectForKeyedSubscript:@"title"];
    [v9 presentTip:v10 tipDescription:v11];
  }
  else
  {
    [v8 dismissTip];
  }
}

- (void)handleRemoteDictationEvent_movePopoverView:(id)a3
{
  id v4 = a3;
  int has_internal_diagnostics = os_variant_has_internal_diagnostics();
  BOOL v6 = +[UIKeyboard isKeyboardProcess];
  if (has_internal_diagnostics)
  {
    if (!v6)
    {
      id v17 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1853B0000, v17, OS_LOG_TYPE_FAULT, "Unexpected event handling", buf, 2u);
      }
    }
  }
  else if (!v6)
  {
    uint64_t v18 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &handleRemoteDictationEvent_movePopoverView____s_category)+ 8);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl(&dword_1853B0000, v18, OS_LOG_TYPE_ERROR, "Unexpected event handling", v19, 2u);
    }
  }
  id v7 = [(_UIKeyboardStateManager *)self inputDelegate];
  uint64_t v8 = [v7 _window];
  p_presentationDelegate = &self->_presentationDelegate;
  id WeakRetained = objc_loadWeakRetained((id *)p_presentationDelegate);
  id v11 = [WeakRetained window];

  if (v8 != v11)
  {
    id v12 = objc_loadWeakRetained((id *)p_presentationDelegate);
    uint64_t v13 = [v12 dictationPopoverController];
    uint64_t v14 = [v4 objectForKeyedSubscript:@"sourceRect"];
    [v14 rectValue];
    objc_msgSend(v13, "movePopoverView:");

    char v15 = [v4 objectForKeyedSubscript:@"editMenuFrame"];
    if (v15)
    {
      id v16 = objc_loadWeakRetained((id *)p_presentationDelegate);
      [v15 rectValue];
      objc_msgSend(v16, "setEditMenuFrame:");
    }
  }
}

- (void)handleRemoteDictationEvent_setEditMenuFrame:(id)a3
{
  id v4 = a3;
  int has_internal_diagnostics = os_variant_has_internal_diagnostics();
  BOOL v6 = +[UIKeyboard isKeyboardProcess];
  if (has_internal_diagnostics)
  {
    if (!v6)
    {
      uint64_t v14 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1853B0000, v14, OS_LOG_TYPE_FAULT, "Unexpected event handling", buf, 2u);
      }
    }
  }
  else if (!v6)
  {
    char v15 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &handleRemoteDictationEvent_setEditMenuFrame____s_category)+ 8);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v16 = 0;
      _os_log_impl(&dword_1853B0000, v15, OS_LOG_TYPE_ERROR, "Unexpected event handling", v16, 2u);
    }
  }
  id v7 = [(_UIKeyboardStateManager *)self inputDelegate];
  uint64_t v8 = [v7 _window];
  p_presentationDelegate = &self->_presentationDelegate;
  id WeakRetained = objc_loadWeakRetained((id *)p_presentationDelegate);
  id v11 = [WeakRetained window];

  if (v8 != v11)
  {
    id v12 = objc_loadWeakRetained((id *)p_presentationDelegate);
    uint64_t v13 = [v4 objectForKeyedSubscript:@"editMenuFrame"];
    [v13 rectValue];
    objc_msgSend(v12, "setEditMenuFrame:");
  }
}

- (void)handleRemoteDictationEvent_updateIdleDetection:(int64_t)a3
{
  int has_internal_diagnostics = os_variant_has_internal_diagnostics();
  BOOL v6 = +[UIKeyboard isKeyboardProcess];
  if (has_internal_diagnostics)
  {
    if (!v6)
    {
      id v7 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1853B0000, v7, OS_LOG_TYPE_FAULT, "Unexpected event handling", buf, 2u);
      }
    }
  }
  else if (!v6)
  {
    uint64_t v8 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &handleRemoteDictationEvent_updateIdleDetection____s_category)+ 8);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v9 = 0;
      _os_log_impl(&dword_1853B0000, v8, OS_LOG_TYPE_ERROR, "Unexpected event handling", v9, 2u);
    }
  }
  [(_UIKeyboardStateManager *)self updateIdleDetection:a3];
}

- (void)handleRemoteDictationEvent_stopDictationIgnoreFinalizePhrases
{
  int has_internal_diagnostics = os_variant_has_internal_diagnostics();
  BOOL v3 = +[UIKeyboard isKeyboardProcess];
  if (has_internal_diagnostics)
  {
    if (!v3)
    {
      BOOL v5 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1853B0000, v5, OS_LOG_TYPE_FAULT, "Unexpected event handling", buf, 2u);
      }
    }
  }
  else if (!v3)
  {
    BOOL v6 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &handleRemoteDictationEvent_stopDictationIgnoreFinalizePhrases___s_category)+ 8);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v7 = 0;
      _os_log_impl(&dword_1853B0000, v6, OS_LOG_TYPE_ERROR, "Unexpected event handling", v7, 2u);
    }
  }
  id v4 = +[UIDictationController sharedInstance];
  [v4 stopDictationIgnoreFinalizePhrases];
}

- (void)handleRemoteDictationEvent_resumeDictation
{
  int has_internal_diagnostics = os_variant_has_internal_diagnostics();
  BOOL v3 = +[UIKeyboard isKeyboardProcess];
  if (has_internal_diagnostics)
  {
    if (!v3)
    {
      BOOL v5 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1853B0000, v5, OS_LOG_TYPE_FAULT, "Unexpected event handling", buf, 2u);
      }
    }
  }
  else if (!v3)
  {
    BOOL v6 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &handleRemoteDictationEvent_resumeDictation___s_category)
                      + 8);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v7 = 0;
      _os_log_impl(&dword_1853B0000, v6, OS_LOG_TYPE_ERROR, "Unexpected event handling", v7, 2u);
    }
  }
  id v4 = +[UIDictationController sharedInstance];
  [v4 resumeDictation];
}

- (void)handleRemoteKeyboardCameraEvent_startCameraInput:(id)a3
{
  id v4 = a3;
  int has_internal_diagnostics = os_variant_has_internal_diagnostics();
  BOOL v6 = +[UIKeyboard isKeyboardProcess];
  if (has_internal_diagnostics)
  {
    if (!v6)
    {
      id v9 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1853B0000, v9, OS_LOG_TYPE_FAULT, "Unexpected event handling", buf, 2u);
      }
    }
  }
  else if (!v6)
  {
    BOOL v10 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &handleRemoteKeyboardCameraEvent_startCameraInput____s_category)+ 8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v11 = 0;
      _os_log_impl(&dword_1853B0000, v10, OS_LOG_TYPE_ERROR, "Unexpected event handling", v11, 2u);
    }
  }
  id v7 = +[UIKeyboardCameraSession sharedSession];
  uint64_t v8 = [(_UIKeyboardStateManager *)self inputDelegate];
  [v7 showForResponder:v8 sender:0 rtiConfiguration:v4];
}

- (void)handleEventFromRemoteSource_insertSupplementalCandidate:(id)a3 textToCommit:(id)a4
{
  id v12 = a3;
  BOOL v6 = (__CFString *)a4;
  self->m_didSyncDocumentStateToInputDelegate = 0;
  if (!v6) {
    goto LABEL_11;
  }
  id v7 = [(_UIKeyboardStateManager *)self inputDelegate];

  if (v7
    && ([(_UIKeyboardStateManager *)self inputDelegateManager],
        uint64_t v8 = objc_claimAutoreleasedReturnValue(),
        int v9 = objc_msgSend(v8, "callShouldReplaceExtendedRange:withText:includeMarkedText:", 0, v6, -[_UIKeyboardStateManager _hasMarkedText](self, "_hasMarkedText")), v8, !v9))
  {
    BOOL v10 = &stru_1ED0E84C0;
    id v11 = self;
  }
  else
  {
    if ([v12 isSupplementalItemCandidate])
    {
      [(_UIKeyboardStateManager *)self _willReplaceText:v6 withSupplementalCandidate:v12];
      [(_UIKeyboardStateManager *)self unmarkText:v6];
      [(_UIKeyboardStateManager *)self _didReplaceText:v6 withSupplementalCandidate:v12];
      goto LABEL_9;
    }
    id v11 = self;
    BOOL v10 = v6;
  }
  [(_UIKeyboardStateManager *)v11 unmarkText:v10];
LABEL_9:
  if ([v12 isSupplementalItemCandidate]) {
    [(_UIKeyboardStateManager *)self _insertSupplementalCandidate:v12 overridingCandidateText:v6];
  }
LABEL_11:
}

- (void)handleEventFromRemoteSource_chooseSupplementalItem:(id)a3 toReplaceText:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __92___UIKeyboardStateManager_handleEventFromRemoteSource_chooseSupplementalItem_toReplaceText___block_invoke;
  aBlock[3] = &unk_1E52E4470;
  void aBlock[4] = self;
  uint64_t v8 = (void (**)(void *, void *, id))_Block_copy(aBlock);
  int v9 = [(_UIKeyboardStateManager *)self inputDelegate];
  char v10 = objc_opt_respondsToSelector();

  if ((v10 & 1) != 0 && [v6 count])
  {
    id v11 = [(_UIKeyboardStateManager *)self _rangeForSupplementalItemText:v7];
    id v12 = [_UIStringAndPositionPair alloc];
    uint64_t v13 = [v11 start];
    uint64_t v14 = -[_UIStringAndPositionPair initWithString:position:]((id *)&v12->super.isa, v7, v13);

    char v15 = [(_UIKeyboardStateManager *)self pendingSupplementalCandidateToInsert];
    id v16 = [(_UIKeyboardStateManager *)self inputDelegate];
    BOOL v17 = -[_UIStringAndPositionPair isEqualToPair:inputDelegate:]((uint64_t)v15, v14, v16);

    if (!v17)
    {
      [(_UIKeyboardStateManager *)self setPendingSupplementalCandidateToInsert:v14];
      if ([v6 count] == 1)
      {
        [(_UIKeyboardStateManager *)self setPendingSupplementalCandidateToInsert:0];
        uint64_t v18 = [v6 firstObject];
        v8[2](v8, v18, v7);
      }
      else
      {
        objc_initWeak(&location, self);
        uint64_t v19 = (void *)(self->m_lastChooseSupplementalItemToInsertCallbackIdentifier + 1);
        self->m_lastChooseSupplementalItemToInsertCallbackIdentifier = (unint64_t)v19;
        self->m_textInputChangesIgnored = 1;
        uint64_t v20 = [(_UIKeyboardStateManager *)self inputDelegate];
        v21[0] = MEMORY[0x1E4F143A8];
        v21[1] = 3221225472;
        v21[2] = __92___UIKeyboardStateManager_handleEventFromRemoteSource_chooseSupplementalItem_toReplaceText___block_invoke_2;
        void v21[3] = &unk_1E52E4498;
        objc_copyWeak(v25, &location);
        id v24 = v8;
        id v22 = v7;
        v25[1] = v19;
        id v23 = v11;
        [v20 _chooseSupplementalItemToInsert:v6 replacementRange:v23 completionHandler:v21];

        self->m_textInputChangesIgnored = 0;
        objc_destroyWeak(v25);
        objc_destroyWeak(&location);
      }
    }
  }
  else
  {
    v8[2](v8, 0, v7);
  }
}

- (void)handleEventCallbackFromRemoteDestination_didChooseSupplementalItem:(id)a3 toReplaceText:(id)a4
{
  id v9 = a3;
  id v6 = a4;
  id v7 = [(_UIKeyboardStateManager *)self chooseSupplementalCandidateCompletion];

  if (v7)
  {
    uint64_t v8 = [(_UIKeyboardStateManager *)self chooseSupplementalCandidateCompletion];
    ((void (**)(void, id, id))v8)[2](v8, v9, v6);

    [(_UIKeyboardStateManager *)self setChooseSupplementalCandidateCompletion:0];
  }
}

- (void)handleEventFromRemoteSource_insertionPointEnteredText:(id)a3 withSupplementalCandidate:(id)a4
{
  id v8 = a3;
  id v6 = a4;
  id v7 = [(_UIKeyboardStateManager *)self _rangeForSupplementalItemText:v8];
  if (([v7 isEmpty] & 1) == 0) {
    [(_UIKeyboardStateManager *)self _dispatchInsertionPointEnteredText:v8 range:v7 withSupplementalCandidate:v6];
  }
}

- (void)handleEventFromRemoteDestination_canSuggestSupplementalItemsForCurrentSelection:(BOOL)a3
{
  if (qword_1EB25FD90 != -1) {
    dispatch_once(&qword_1EB25FD90, &__block_literal_global_1844);
  }
  BOOL v5 = [(_UIKeyboardStateManager *)self taskQueue];
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __107___UIKeyboardStateManager_handleEventFromRemoteDestination_canSuggestSupplementalItemsForCurrentSelection___block_invoke_3;
  v6[3] = &unk_1E52E4108;
  v6[4] = self;
  BOOL v7 = a3;
  [v5 addTask:v6 breadcrumb:qword_1EB25FD88];
}

- (void)handleEventFromRemoteSource_insertAutofillContent:(id)a3
{
  id v4 = (objc_class *)MEMORY[0x1E4FAE370];
  id v5 = a3;
  id v6 = objc_alloc_init(v4);
  BOOL v7 = (void *)[v5 copy];

  [v6 setCustomInfo:v7];
  if (qword_1EB25FDA0 != -1) {
    dispatch_once(&qword_1EB25FDA0, &__block_literal_global_1848);
  }
  id v8 = [(_UIKeyboardStateManager *)self taskQueue];
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  void v11[2] = __77___UIKeyboardStateManager_handleEventFromRemoteSource_insertAutofillContent___block_invoke_3;
  void v11[3] = &unk_1E52E3628;
  void v11[4] = self;
  id v12 = v6;
  uint64_t v9 = qword_1EB25FD98;
  id v10 = v6;
  [v8 addTask:v11 breadcrumb:v9];
}

- (void)handleEventFromRemoteSource_autoFillIsMenuPresented:(BOOL)a3
{
  if (self->m_isAutoFillMenuPresented == a3)
  {
    if (a3) {
LABEL_3:
    }
      self->m_shouldSuppressSelectionCommands = 1;
  }
  else
  {
    self->m_isAutoFillMenuPresented = a3;
    if (a3)
    {
      +[UIPeripheralHost visiblePeripheralFrame];
      CGFloat v5 = v4;
      CGFloat v7 = v6;
      CGFloat v9 = v8;
      CGFloat v11 = v10;
      id v12 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
      uint64_t v13 = [v12 rtiDocumentState];
      [v13 caretRectInWindow];
      v50.origin.double x = v14;
      v50.origin.double y = v15;
      v50.size.double width = v16;
      v50.size.double height = v17;
      v48.origin.double x = v5;
      v48.origin.double y = v7;
      v48.size.double width = v9;
      v48.size.double height = v11;
      BOOL v18 = CGRectContainsRect(v48, v50);

      if (v18)
      {
        [(_UIKeyboardStateManager *)self dismissAutoFillMenu];
        uint64_t v19 = [(_UIKeyboardStateManager *)self inputDelegateManager];
        uint64_t v20 = [(_UIKeyboardStateManager *)self inputDelegateManager];
        uint64_t v21 = [v20 selectedTextRange];
        id v22 = [v21 start];
        [v19 caretRectForPosition:v22];
        double v24 = v23;
        double v26 = v25;
        double v28 = v27;
        double v30 = v29;

        NSUInteger v31 = [(_UIKeyboardStateManager *)self inputDelegate];
        NSUInteger v32 = [v31 textInputView];
        BOOL v33 = [(_UIKeyboardStateManager *)self inputDelegate];
        BOOL v34 = [v33 textInputView];
        char v35 = [v34 window];
        objc_msgSend(v32, "convertRect:toView:", v35, v24, v26, v28, v30);
        CGFloat v37 = v36;
        CGFloat v39 = v38;
        CGFloat v41 = v40;
        CGFloat v43 = v42;

        +[UIPeripheralHost visiblePeripheralFrame];
        v51.origin.double x = v37;
        v51.origin.double y = v39;
        v51.size.double width = v41;
        v51.size.double height = v43;
        if (CGRectContainsRect(v49, v51)) {
          return;
        }
        id v46 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
        [v46 documentStateChanged];
      }
      else
      {
        id v44 = [(_UIKeyboardStateManager *)self _editMenuAssistant];
        int v45 = [v44 _editMenuIsVisible];

        if (!v45) {
          goto LABEL_3;
        }
        id v46 = [(_UIKeyboardStateManager *)self _editMenuAssistant];
        [v46 hideSelectionCommands];
      }
    }
    else
    {
      self->m_shouldSuppressSelectionCommands = 0;
    }
  }
}

- (void)dismissAutoFillMenu
{
  if (self->m_isAutoFillMenuPresented)
  {
    BOOL v3 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
    [v3 forwardInputDestinationEventToUIHost:sel_dismissAutoFillMenu];

    self->m_isAutoFillMenuPresented = 0;
    self->m_shouldSuppressSelectionCommands = 0;
  }
}

- (BOOL)shouldSuppressSelectionCommands
{
  BOOL m_shouldSuppressSelectionCommands = self->m_shouldSuppressSelectionCommands;
  if (self->m_shouldSuppressSelectionCommands)
  {
    self->BOOL m_shouldSuppressSelectionCommands = 0;
  }
  else if (self->m_isAutoFillMenuPresented)
  {
    [(_UIKeyboardStateManager *)self dismissAutoFillMenu];
  }
  return m_shouldSuppressSelectionCommands;
}

- (void)resumeDictationForResponderChange
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained resumeDictationForResponderChange];
}

- (BOOL)isSelecting
{
  if (self->m_selecting)
  {
    LOBYTE(v2) = 1;
  }
  else
  {
    BOOL v3 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    double v4 = [v3 selectedTextRange];
    int v2 = [v4 isEmpty] ^ 1;
  }
  return v2;
}

- (BOOL)inlineTextCompletionAllowedForTraits
{
  return [(_UIKeyboardStateManager *)self autocorrectionPreferenceForTraits] == 1;
}

- (void)_noteInlineCompletionAsMarkedText:(id)a3
{
  id v8 = a3;
  double v4 = [v8 string];
  uint64_t v5 = [v4 length];

  if (v5)
  {
    double v6 = (NSAttributedString *)[v8 copy];
    inlineCompletionAsMarkedText = self->_inlineCompletionAsMarkedText;
    self->_inlineCompletionAsMarkedText = v6;
  }
  else
  {
    inlineCompletionAsMarkedText = self->_inlineCompletionAsMarkedText;
    self->_inlineCompletionAsMarkedText = 0;
  }
}

- (id)inlineCompletionAsMarkedText
{
  return self->_inlineCompletionAsMarkedText;
}

- (void)handleGrammarCorrectionEntries:(id)a3
{
  id v5 = a3;
  if (+[UIKeyboard usesInputSystemUI])
  {
    double v4 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
    [v4 forwardGrammarCorrectionEntries:v5];
  }
  else
  {
    +[UITextChecker handleGrammarCorrectionEntries:v5];
  }
}

- (void)_setInputManager:(id)a3
{
  id v4 = a3;
  sharedInputManagerMux();
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  [v5 addClient:v4];

  [(_UIKeyboardStateManager *)self syncInputManagerToKeyboardState];
}

- (void)_setShiftLockedEnabled:(BOOL)a3
{
  self->m_shiftLockedEnabled = a3;
}

- (void)updateFromTextInputTraits
{
  [(_UIKeyboardStateManager *)self takeTextInputTraitsFromDelegate];
  [(_UIKeyboardStateManager *)self updateReturnKey:1];
}

- (BOOL)_isShowingCandidateUIWithAvailableCandidates
{
  _UIDeviceNativeUserInterfaceIdiom();
  int v3 = [(_UIKeyboardStateManager *)self showsCandidateBar];
  if (v3)
  {
    m_candidateList = self->m_candidateList;
    LOBYTE(v3) = [(UIKeyboardCandidateList *)m_candidateList hasCandidates];
  }
  return v3;
}

- (unint64_t)textInputChangingCount
{
  return self->m_textInputChangingCount;
}

- (BOOL)isAutoDeleteActive
{
  return [(UIKeyboardScheduledTask *)self->m_autoDeleteTask isValid];
}

- (void)_setAutofillGroup:(id)a3
{
  id v4 = a3;
  [(_UIKeyboardStateManager *)self _clearAutofillGroup];
  id v5 = [(_UIKeyboardStateManager *)self autofillController];
  [v5 performSelector:sel__setAutofillGroup_ withObject:v4];
}

- (id)_autofillGroup
{
  int v2 = [(_UIKeyboardStateManager *)self autofillController];
  int v3 = [v2 autofillGroup];

  return v3;
}

- (id)_fallbackAutofillGroup
{
  int v2 = [(_UIKeyboardStateManager *)self autofillController];
  int v3 = [v2 fallbackAutofillGroup];

  return v3;
}

- (BOOL)_containsUsernamePasswordPairsInAutofillGroup:(id)a3
{
  id v4 = a3;
  id v5 = [(_UIKeyboardStateManager *)self autofillController];
  char v6 = [v5 containsUsernamePasswordPairsInAutofillGroup:v4];

  return v6;
}

- (BOOL)isSelectionChanging
{
  return self->m_textInputChangingCount && !self->m_textInputChangesIgnored;
}

- (void)createTypoTrackerReport
{
  int v3 = [(_UIKeyboardStateManager *)self inputManager];
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __50___UIKeyboardStateManager_createTypoTrackerReport__block_invoke;
  v4[3] = &unk_1E52E44C0;
  v4[4] = self;
  [v3 writeTypologyLogWithCompletionHandler:v4];
}

- (void)presentKeyboardFeedbackAssistantViewControllerForLogURL:(id)a3
{
  p_presentationDelegate = &self->_presentationDelegate;
  id v4 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)p_presentationDelegate);
  [WeakRetained presentKeyboardFeedbackAssistantViewControllerForLogURL:v4];
}

- (void)_performInputViewControllerOutput:(id)a3
{
  id v4 = a3;
  if (qword_1EB25FDB0 != -1) {
    dispatch_once(&qword_1EB25FDB0, &__block_literal_global_1857);
  }
  id v5 = [(_UIKeyboardStateManager *)self taskQueue];
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  void v8[2] = __61___UIKeyboardStateManager__performInputViewControllerOutput___block_invoke_3;
  v8[3] = &unk_1E52E3628;
  id v9 = v4;
  double v10 = self;
  uint64_t v6 = qword_1EB25FDA8;
  id v7 = v4;
  [v5 addTask:v8 breadcrumb:v6];
}

- (void)_requestInputManagerSync
{
  if (qword_1EB25FDC0 != -1) {
    dispatch_once(&qword_1EB25FDC0, &__block_literal_global_1861);
  }
  int v3 = [(_UIKeyboardStateManager *)self taskQueue];
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __51___UIKeyboardStateManager__requestInputManagerSync__block_invoke_3;
  v4[3] = &unk_1E52E34C8;
  v4[4] = self;
  [v3 addTask:v4 breadcrumb:qword_1EB25FDB8];
}

- (void)_tagTouchForTypingMenu:(unsigned int)a3
{
  uint64_t v3 = *(void *)&a3;
  uint64_t v8 = 0;
  id v9 = &v8;
  uint64_t v10 = 0x2020000000;
  id v4 = (void (*)(uint64_t))off_1EB25FE18;
  CGFloat v11 = off_1EB25FE18;
  if (!off_1EB25FE18)
  {
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    v7[2] = __getSBSTagTouchForTypingMenuSymbolLoc_block_invoke;
    v7[3] = &unk_1E52D9900;
    v7[4] = &v8;
    __getSBSTagTouchForTypingMenuSymbolLoc_block_invoke(v7);
    id v4 = (void (*)(uint64_t))v9[3];
  }
  _Block_object_dispose(&v8, 8);
  if (v4)
  {
    v4(v3);
  }
  else
  {
    id v5 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v6 = [NSString stringWithUTF8String:"void UIKBSBSTagTouchForTypingMenu(uint32_t)"];
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, @"_UIKeyboardStateManager.m", 234, @"%s", dlerror());

    __break(1u);
  }
}

- (void)setInitialDirection
{
}

- (void)setInitialDirectionIgnoreRangeCheck:(BOOL)a3
{
  BOOL v3 = a3;
  v23[1] = *MEMORY[0x1E4F143B8];
  id v5 = [(_UIKeyboardStateManager *)self inputDelegate];
  if (v5)
  {
    uint64_t v6 = v5;
    if (v3)
    {
    }
    else
    {
      id v7 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      uint64_t v8 = [v7 selectedTextRange];
      int v9 = [v8 isEmpty];

      if (!v9) {
        return;
      }
    }
    unint64_t v10 = [(UITextInputTraits *)self->m_traits keyboardType];
    if (v10 > 0xB || ((1 << v10) & 0x930) == 0)
    {
      CGFloat v11 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      int v12 = [v11 _characterBeforeCaretSelection];

      if (v12 == 10 || !v12)
      {
        uint64_t v13 = [(_UIKeyboardStateManager *)self inputDelegate];
        int v14 = [v13 _characterAfterCaretSelection];

        if ((v14 == 10 || !v14) && !self->m_textInputChangingDirection)
        {
          self->m_textInputChangingDirection = 1;
          CGFloat v15 = [(_UIKeyboardStateManager *)self inputDelegateManager];
          int64_t m_currentDirection = self->m_currentDirection;
          CGFloat v17 = [(_UIKeyboardStateManager *)self inputDelegateManager];
          BOOL v18 = [v17 selectedTextRange];
          [v15 setBaseWritingDirection:m_currentDirection forRange:v18];

          uint64_t v19 = [MEMORY[0x1E4F28EB8] defaultCenter];
          id v22 = @"writingDirection";
          uint64_t v20 = [NSNumber numberWithInteger:self->m_currentDirection];
          v23[0] = v20;
          uint64_t v21 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v23 forKeys:&v22 count:1];
          [v19 postNotificationName:0x1ED148420 object:0 userInfo:v21];

          self->m_textInputChangingDirection = 0;
        }
      }
    }
  }
}

- (_UITextInteractionEditMenuAssistant)_editMenuAssistant
{
  int v2 = [(_UIKeyboardStateManager *)self textInteractionAssistant];
  BOOL v3 = [v2 _editMenuAssistant];

  return (_UITextInteractionEditMenuAssistant *)v3;
}

- (_UITextChoiceAccelerationAssistant)_textChoicesAssistant
{
  BOOL v3 = [(_UIKeyboardStateManager *)self textInteractionAssistant];

  if (v3)
  {
    id v4 = [(_UIKeyboardStateManager *)self textInteractionAssistant];
    id v5 = [v4 _textChoicesAssistant];

    [v5 setDelegate:self];
    uint64_t v6 = [(_UIKeyboardStateManager *)self textInteractionAssistant];
    id v7 = [v6 _textChoicesAssistant];
  }
  else
  {
    id v5 = [(_UIKeyboardStateManager *)self inputDelegate];
    customInputDelegateChoiceAccelerationAssistant = self->_customInputDelegateChoiceAccelerationAssistant;
    if (!customInputDelegateChoiceAccelerationAssistant
      || ([(_UITextChoiceAccelerationAssistant *)customInputDelegateChoiceAccelerationAssistant textInputResponder], int v9 = objc_claimAutoreleasedReturnValue(), v9, v9 != v5))
    {
      unint64_t v10 = [[_UITextChoiceAccelerationAssistant alloc] initWithTextInputResponder:v5];
      CGFloat v11 = self->_customInputDelegateChoiceAccelerationAssistant;
      self->_customInputDelegateChoiceAccelerationAssistant = v10;

      [(_UITextChoiceAccelerationAssistant *)self->_customInputDelegateChoiceAccelerationAssistant setDelegate:self];
    }
    id v7 = self->_customInputDelegateChoiceAccelerationAssistant;
  }

  return v7;
}

- (void)traitCollectionDidChange
{
  [(_UIKeyboardStateManager *)self takeTextInputTraitsFromDelegate];
  BOOL v3 = [(_UIKeyboardStateManager *)self activeLayout];
  [v3 traitCollectionDidChange];

  if (+[UIKeyboard usesInputSystemUI]
    || +[UIKeyboard usesInputSystemUIForAutoFillOnlyWithRTI])
  {
    id v4 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
    [v4 documentTraitsChanged];
  }
}

- (void)_dynamicUserInterfaceTraitDidChange
{
  BOOL v3 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  id v4 = [v3 keyInputDelegate];

  if ((objc_msgSend(v4, "__isKindOfUIResponder") & 1) == 0)
  {
    uint64_t v5 = [(_UIKeyboardStateManager *)self delegateAsResponder];

    id v4 = (void *)v5;
  }
  if (v4)
  {
    BOOL v6 = (objc_opt_respondsToSelector() & 1) == 0 || [v4 keyboardAppearance] == 10;
  }
  else
  {
    BOOL v6 = 1;
  }
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  uint64_t v8 = [WeakRetained traitCollection];
  uint64_t v9 = [v8 userInterfaceStyle];

  if (v6)
  {
    m_traits = self->m_traits;
    if (m_traits)
    {
      if (v9 == 2) {
        uint64_t v11 = 1;
      }
      else {
        uint64_t v11 = 2;
      }
      [(UITextInputTraits *)m_traits setKeyboardAppearance:v11];
    }
  }
}

- (void)setTextInputChangesIgnored:(BOOL)a3
{
  self->m_textInputChangesIgnored = a3;
}

- (BOOL)allowsReachableKeyboard
{
  BOOL v3 = +[UIScreen mainScreen];
  [v3 _unjailedReferenceBounds];
  double v5 = v4;

  _UIDeviceNativeUserInterfaceIdiom();
  unint64_t v6 = UIKeyboardGetSafeDeviceIdiom() & 0xFFFFFFFFFFFFFFFBLL;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  uint64_t v8 = [WeakRetained layout];
  uint64_t v9 = [v8 orientation];

  BOOL result = 0;
  if (v6 != 1 && v5 > 320.0 && (unint64_t)(v9 - 3) >= 2) {
    return ![(_UIKeyboardStateManager *)self keyboardIsKeyPad];
  }
  return result;
}

- (int64_t)currentHandBias
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  BOOL v3 = [WeakRetained layout];
  int64_t v4 = [v3 currentHandBias];

  return v4;
}

- (double)biasedKeyboardWidthRatio
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  BOOL v3 = [WeakRetained layout];
  [v3 biasedKeyboardWidthRatio];
  double v5 = v4;

  return v5;
}

- (void)acceptAutocorrectionAndEndComposition
{
  BOOL v3 = [(_UIKeyboardStateManager *)self autocorrectionController];
  double v4 = [v3 autocorrection];

  if (v4)
  {
    [(_UIKeyboardStateManager *)self acceptAutocorrectionWithCompletionHandler:0];
  }
  else
  {
    [(_UIKeyboardStateManager *)self textAccepted:0];
  }
}

- (id)internationalKeyDisplayStringOnEmojiKeyboard
{
  BOOL v3 = +[UIKeyboardInputModeController sharedInputModeController];
  double v4 = [v3 currentInputMode];
  char v5 = [v4 isExtensionInputMode];

  if (v5)
  {
    unint64_t v6 = 0;
  }
  else
  {
    id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    uint64_t v8 = [WeakRetained layout];
    unint64_t v6 = [v8 internationalKeyDisplayStringOnEmojiKeyboard];
  }
  return v6;
}

- (id)_autofillContext
{
  return (id)[(TIKeyboardState *)self->m_keyboardState autofillContext];
}

- (id)_remoteAppId
{
  int v2 = [(_UIKeyboardStateManager *)self inputSystemSourceSession];
  BOOL v3 = [v2 documentTraits];
  double v4 = [v3 appId];

  return v4;
}

- (id)_remoteLocalizedAppName
{
  int v2 = [(_UIKeyboardStateManager *)self inputSystemSourceSession];
  BOOL v3 = [v2 documentTraits];
  double v4 = [v3 localizedAppName];

  return v4;
}

- (id)_remoteUnlocalizedAppName
{
  int v2 = [(_UIKeyboardStateManager *)self inputSystemSourceSession];
  BOOL v3 = [v2 documentTraits];
  double v4 = [v3 appName];

  return v4;
}

- (id)_remoteAssociatedDomains
{
  int v2 = [(_UIKeyboardStateManager *)self inputSystemSourceSession];
  BOOL v3 = [v2 documentTraits];
  double v4 = [v3 associatedDomains];

  return v4;
}

- (BOOL)shouldLoadAutofillSignUpInputViewController
{
  BOOL v3 = [(_UIKeyboardStateManager *)self _shouldLoadAutofillSignUpInputViewController];
  if (v3) {
    LOBYTE(v3) = !self->m_usesSystemKeyboardForASP;
  }
  else {
    self->m_usesSystemKeyboardForASP = 0;
  }
  return v3;
}

- (BOOL)_shouldLoadAutofillSignUpInputViewController
{
  if ((self->m_cachedAutofillMode & 0xFFFFFFFFFFFFFFFELL) != 2) {
    return 0;
  }
  BOOL v3 = [(_UIKeyboardStateManager *)self _autofillContext];
  double v4 = [v3 objectForKey:@"_automaticPasswordKeyboard"];
  char v5 = [v4 BOOLValue];

  if (v5) {
    return 1;
  }
  id v7 = +[UIKeyboardInputMode autofillSignupInputMode];
  uint64_t v8 = [v7 viewControllerClass];

  if (!v8) {
    return 0;
  }
  if (+[UIKeyboard isKeyboardProcess])
  {
    uint64_t v9 = [(_UIKeyboardStateManager *)self inputSystemSourceSession];
    unint64_t v10 = [(id)v9 documentTraits];

    LOBYTE(v9) = [v10 shouldLoadAutofillSignUp];
    if (v9) {
      return 1;
    }
  }
  uint64_t v11 = [(_UIKeyboardStateManager *)self autofillController];
  int v12 = [v11 autofillGroup];
  uint64_t v13 = [v12 objectForKey:@"UIAutofillASPOptInKey"];

  if (v13 && ![v13 BOOLValue])
  {
    char v6 = 0;
  }
  else
  {
    int v14 = [(_UIKeyboardStateManager *)self inputDelegate];
    if ((objc_msgSend(v14, "__isKindOfUIResponder") & 1) == 0)
    {
      uint64_t v15 = [(_UIKeyboardStateManager *)self delegateAsResponder];

      int v14 = (void *)v15;
    }
    CGFloat v16 = [(_UIKeyboardStateManager *)self autofillController];
    char v6 = [v16 shouldLoadASPForResponder:v14];
  }
  return v6;
}

- (void)_showAutofillExtras
{
}

- (void)_deactiveActiveKeys
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  int v2 = [WeakRetained layout];
  [v2 deactivateActiveKeys];
}

- (void)performBlockWithTextInputChangesIgnoredForNonMacOS:(id)a3
{
  BOOL m_textInputChangesIgnored = self->m_textInputChangesIgnored;
  self->BOOL m_textInputChangesIgnored = 1;
  (*((void (**)(id, SEL))a3 + 2))(a3, a2);
  self->BOOL m_textInputChangesIgnored = m_textInputChangesIgnored;
}

- (BOOL)exclusivityIdentifierMatched
{
  BOOL v3 = +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate];
  double v4 = [v3 hardwareKeyboardExclusivityIdentifier];

  char v5 = [(_UIKeyboardStateManager *)self hardwareKeyboardExclusivityIdentifier];
  if (v5 == v4)
  {
    char v7 = 1;
  }
  else
  {
    char v6 = [(_UIKeyboardStateManager *)self hardwareKeyboardExclusivityIdentifier];
    char v7 = [v4 isEqualToString:v6];
  }
  return v7;
}

+ (BOOL)isHardwareShiftKeyBeingHeld
{
  return (GSKeyboardGetLiveModifierState() & 0x220000) != 0;
}

+ (BOOL)isHardwareCommandKeyBeingHeld
{
  return (GSKeyboardGetLiveModifierState() & 0x1010000) != 0;
}

- (BOOL)isShiftKeyBeingHeld
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  char v4 = [(id)objc_opt_class() isHardwareShiftKeyBeingHeld];

  LOBYTE(WeakRetained) = [(_UIKeyboardStateManager *)self callLayoutIsShiftKeyBeingHeld];
  return v4 | WeakRetained | [(_UIKeyboardStateManager *)self _mimicShiftBeingHeld];
}

- (void)lookUpResponderChainForCustomInputView
{
  BOOL v3 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  id v8 = [v3 inputSystemSourceSession];

  if (v8)
  {
    char v4 = [v8 textOperations];
    [v4 setEditingActionSelector:sel_lookUpResponderChainForCustomInputView];
    [v8 flushOperations];
  }
  uint64_t v5 = [(_UIKeyboardStateManager *)self inputDelegate];
  if (v5)
  {
    char v6 = (void *)v5;
    while ((objc_opt_respondsToSelector() & 1) == 0)
    {
      uint64_t v7 = [v6 nextResponder];

      char v6 = (void *)v7;
      if (!v7) {
        goto LABEL_9;
      }
    }
    [v6 _showCustomInputView];
  }
LABEL_9:
}

- (id)attributedText
{
  BOOL v3 = [(_UIKeyboardStateManager *)self inputDelegate];
  char v4 = [v3 _textSelectingContainer];
  char v5 = objc_opt_respondsToSelector();

  char v6 = [(_UIKeyboardStateManager *)self inputDelegate];
  uint64_t v7 = v6;
  if (v5)
  {
    id v8 = [v6 _textSelectingContainer];
    uint64_t v9 = [v8 attributedText];

LABEL_5:
    goto LABEL_7;
  }
  char v10 = objc_opt_respondsToSelector();

  if (v10)
  {
    uint64_t v7 = [(_UIKeyboardStateManager *)self inputDelegate];
    uint64_t v9 = [v7 attributedText];
    goto LABEL_5;
  }
  uint64_t v9 = 0;
LABEL_7:
  return v9;
}

- (void)showTextAlternativesInRange:(_NSRange)a3
{
  self->m_textAlternativesRange = a3;
  [(_UIKeyboardStateManager *)self showFirstTextAlternativeWithRangeAdjustment:0];
}

- (void)showFirstTextAlternativeWithRangeAdjustment:(int64_t)a3
{
  NSUInteger location = self->m_textAlternativesRange.location;
  if (location != 0x7FFFFFFFFFFFFFFFLL)
  {
    self->m_textAlternativesRange.NSUInteger location = location - a3;
    char v5 = [(_UIKeyboardStateManager *)self attributedText];
    NSUInteger v6 = self->m_textAlternativesRange.length + self->m_textAlternativesRange.location;
    if (v6 <= [v5 length])
    {
      NSUInteger v8 = self->m_textAlternativesRange.location;
      NSUInteger length = self->m_textAlternativesRange.length;
    }
    else
    {
      NSUInteger v7 = [v5 length];
      NSUInteger v8 = self->m_textAlternativesRange.location;
      NSUInteger length = v7 - v8;
      if (v7 <= v8)
      {
        NSUInteger length = 0;
        self->m_textAlternativesRange.NSUInteger location = v7;
        self->m_textAlternativesRange.NSUInteger length = 0;
        NSUInteger v8 = v7;
      }
      else
      {
        self->m_textAlternativesRange.NSUInteger length = length;
      }
    }
    uint64_t v13 = 0;
    int v14 = &v13;
    uint64_t v15 = 0x2020000000;
    BOOL v16 = length == 0;
    objc_msgSend(v5, "enumerateAttribute:inRange:options:usingBlock:", *(void *)off_1E52D2288, v8);
    if (*((unsigned char *)v14 + 24))
    {
      char v10 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      uint64_t v11 = objc_msgSend(v10, "_textRangeFromNSRange:", self->m_textAlternativesRange.location, self->m_textAlternativesRange.length);
      int v12 = [(_UIKeyboardStateManager *)self inputDelegateManager];
      [v12 setSelectedTextRange:v11];
    }
    _Block_object_dispose(&v13, 8);
  }
}

- (void)clearTextAlternativesRange
{
  self->m_textAlternativesRange.NSUInteger location = 0x7FFFFFFFFFFFFFFFLL;
  self->m_textAlternativesRange.NSUInteger length = 0;
}

- (BOOL)callShouldInsertText:(id)a3 onDelegate:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  if ([v7 conformsToProtocol:&unk_1ED42E8E0]) {
    NSUInteger v8 = v7;
  }
  else {
    NSUInteger v8 = 0;
  }
  id v9 = v8;
  if ([v7 conformsToProtocol:&unk_1ED42F658]) {
    char v10 = v7;
  }
  else {
    char v10 = 0;
  }
  id v11 = v10;
  if (objc_opt_respondsToSelector())
  {
    char v12 = [v9 keyboardInput:v9 shouldInsertText:v6 isMarkedText:0];
  }
  else if (objc_opt_respondsToSelector())
  {
    uint64_t v13 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    int v14 = [v13 selectedTextRange];
    char v12 = [v11 shouldChangeTextInRange:v14 replacementText:v6];
  }
  else
  {
    char v12 = 1;
  }

  return v12;
}

- (BOOL)keyboardLayoutIsInAnotherProcess
{
  if (+[UIKeyboard usesInputSystemUI]
    && [(_UIKeyboardStateManager *)self isRTIClient])
  {
    BOOL v3 = +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate];
    if ([v3 automaticAppearanceEnabled]) {
      BOOL v4 = !+[UIKeyboard usesLocalKeyboard];
    }
    else {
      LOBYTE(v4) = 0;
    }
  }
  else
  {
    LOBYTE(v4) = 0;
  }
  return v4;
}

- (BOOL)shouldApplyKeyboardCommandToUIHost
{
  if (!self->m_hardwareKeyboardAttached) {
    return 0;
  }
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  char v3 = [WeakRetained keyboardLayoutIsInAnotherProcess];

  return v3;
}

- (BOOL)shouldApplyKeyboardInputToUIHost
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  char v3 = [WeakRetained keyboardLayoutIsInAnotherProcess];

  return v3;
}

- (void)performKeyboardOutputOnInputSourceSession:(id)a3
{
}

- (void)performKeyboardOutputOnInputSourceSession:(id)a3 shouldFlush:(BOOL)a4
{
  BOOL v4 = a4;
  id v11 = (void (**)(id, void *))a3;
  id v6 = [(_UIKeyboardStateManager *)self inputSystemSourceSession];
  if (v11 && v6)
  {
    id v7 = [(_UIKeyboardStateManager *)self buildInputSourceState];
    NSUInteger v8 = [v6 textOperations];
    [v8 setInputSourceState:v7];

    id v9 = [v6 textOperations];
    char v10 = [v9 keyboardOutput];

    v11[2](v11, v10);
    if (v4) {
      [v6 flushOperations];
    }
  }
}

- (void)flushKeyboardOutputOnInputSourceSession
{
  int v2 = [(_UIKeyboardStateManager *)self inputSystemSourceSession];
  if (v2)
  {
    id v3 = v2;
    [v2 flushOperations];
    int v2 = v3;
  }
}

- (void)performOnInputSourceSessionActionSelector:(SEL)a3
{
  BOOL v4 = [(_UIKeyboardStateManager *)self inputSystemSourceSession];
  if (v4)
  {
    id v6 = v4;
    char v5 = [v4 textOperations];
    [v5 setEditingActionSelector:a3];

    [v6 flushOperations];
    BOOL v4 = v6;
  }
}

- (void)presentContinuousPathIntroductionView
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  [WeakRetained presentContinuousPathIntroductionView];
}

- (id)implProxy
{
  return self->m_implProxy;
}

- (unint64_t)serviceRole
{
  return self->_serviceRole;
}

- (void)setServiceRole:(unint64_t)a3
{
  self->_serviceRole = a3;
  [(UIKBRTIPartner *)self->_remoteTextInputPartner setInputSystemClientEnabled:a3 == 1];
}

- (BOOL)isOutOfProcess
{
  return self->_serviceRole - 1 < 2;
}

- (id)keyboardWindowSnapshot
{
  return self->m_keyboardWindowSnapshot;
}

- (void)updateIdleDetection:(int64_t)a3
{
  if (+[UIKeyboard usesInputSystemUI])
  {
    [(_UIKeyboardStateManager *)self forwardDictationEvent_updateIdleDetection:a3];
  }
  else
  {
    self->m_userInteraction = a3;
    char v5 = [(_UIKeyboardStateManager *)self userInteractionDelegate];

    if (v5)
    {
      m_idleDetection = self->m_idleDetection;
      if (m_idleDetection)
      {
        [(UIDelayedAction *)m_idleDetection touch];
      }
      else
      {
        id v7 = [[UIDelayedAction alloc] initWithTarget:self action:sel_handleIdleDetectionAction userInfo:0 delay:0.5];
        NSUInteger v8 = self->m_idleDetection;
        self->m_idleDetection = v7;
      }
      id v9 = [(_UIKeyboardStateManager *)self userInteractionDelegate];
      [v9 beginUserInteraction:a3];
    }
  }
}

- (void)handleIdleDetectionAction
{
  [(_UIKeyboardStateManager *)self clearIdleDetectionAction];
  BOOL v4 = [(_UIKeyboardStateManager *)self taskQueue];
  if (![v4 isEmpty]
    || [(UIDelayedAction *)self->m_longPressAction scheduled]
    || [(_UIKeyboardStateManager *)self isAutoDeleteActive])
  {
    goto LABEL_11;
  }
  BOOL v5 = [(_UIKeyboardStateManager *)self usesCandidateSelection];
  BOOL v6 = v5;
  if (v5)
  {
    int v2 = [(_UIKeyboardStateManager *)self inputDelegateManager];
    if ([v2 _hasMarkedText]) {
      goto LABEL_10;
    }
  }
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  NSUInteger v8 = [WeakRetained layout];
  if ([v8 hasActiveContinuousPathInput]) {
    goto LABEL_9;
  }
  id v9 = [(_UIKeyboardStateManager *)self textInteractionAssistant];
  if ([v9 hasActiveSelectionInteraction])
  {

LABEL_9:
    if (!v6)
    {
LABEL_11:

LABEL_12:
      int64_t m_userInteraction = self->m_userInteraction;
      id v11 = self;
LABEL_13:
      [(_UIKeyboardStateManager *)v11 updateIdleDetection:m_userInteraction];
      return;
    }
LABEL_10:

    goto LABEL_11;
  }
  BOOL v12 = [(_UIKeyboardStateManager *)self isRotating];

  if (v6) {
  if (v12)
  }
    goto LABEL_12;
  BOOL v4 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  int v2 = [v4 emojiPopoverController];
  uint64_t v13 = [v2 layout];
  if ([v13 hasActiveKeys])
  {

    goto LABEL_10;
  }
  id v14 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  char v15 = [v14 isPressAndHoldPopoverPresented];

  if (v15) {
    goto LABEL_12;
  }
  id v16 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  CGFloat v17 = [v16 layout];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  if (isKindOfClass)
  {
    id v19 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    uint64_t v20 = [v19 layout];

    LODWORD(v19) = [v20 hasActiveKeys];
    if (v19) {
      goto LABEL_12;
    }
  }
  if ([(_UIKeyboardStateManager *)self isTrackpadMode])
  {
    uint64_t v21 = +[UIKeyboardInputMode dictationInputMode];
    int v22 = [v21 usingTypeAndTalk];

    if (v22)
    {
      id v11 = self;
      int64_t m_userInteraction = 0;
      goto LABEL_13;
    }
  }
  id v23 = [(_UIKeyboardStateManager *)self userInteractionDelegate];
  [v23 endUserInteraction];
}

- (void)clearIdleDetectionAction
{
  [(UIDelayedAction *)self->m_idleDetection cancel];
  m_idleDetection = self->m_idleDetection;
  self->m_idleDetection = 0;
}

- (void)forwardDictationEvent_switchToDictationInputModeWithOptions:(id)a3
{
  id v4 = a3;
  int has_internal_diagnostics = os_variant_has_internal_diagnostics();
  BOOL v6 = +[UIKeyboard usesInputSystemUI];
  if (has_internal_diagnostics)
  {
    if (!v6)
    {
      NSUInteger v8 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1853B0000, v8, OS_LOG_TYPE_FAULT, "Unexpected forwarding event", buf, 2u);
      }
    }
  }
  else if (!v6)
  {
    id v9 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &forwardDictationEvent_switchToDictationInputModeWithOptions____s_category)+ 8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)char v10 = 0;
      _os_log_impl(&dword_1853B0000, v9, OS_LOG_TYPE_ERROR, "Unexpected forwarding event", v10, 2u);
    }
  }
  id v7 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
  [v7 forwardDictationEventToUIHost:sel_handleRemoteDictationEvent_switchToDictationInputModeWithOptions_ withOptionalObject:v4];
}

- (void)forwardDictationEvent_handleDictationShouldPause:(BOOL)a3 withNewDelagate:(BOOL)a4
{
  BOOL v4 = a4;
  BOOL v5 = a3;
  v17[2] = *MEMORY[0x1E4F143B8];
  int has_internal_diagnostics = os_variant_has_internal_diagnostics();
  BOOL v8 = +[UIKeyboard usesInputSystemUI];
  if (has_internal_diagnostics)
  {
    if (!v8)
    {
      uint64_t v13 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)char v15 = 0;
        _os_log_fault_impl(&dword_1853B0000, v13, OS_LOG_TYPE_FAULT, "Unexpected forwarding event", v15, 2u);
      }
    }
  }
  else if (!v8)
  {
    id v14 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &forwardDictationEvent_handleDictationShouldPause_withNewDelagate____s_category)+ 8);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)char v15 = 0;
      _os_log_impl(&dword_1853B0000, v14, OS_LOG_TYPE_ERROR, "Unexpected forwarding event", v15, 2u);
    }
  }
  id v9 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
  v16[0] = @"shouldPause";
  char v10 = [NSNumber numberWithBool:v5];
  v16[1] = @"withNewDelagate";
  v17[0] = v10;
  id v11 = [NSNumber numberWithBool:v4];
  v17[1] = v11;
  BOOL v12 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v17 forKeys:v16 count:2];
  [v9 forwardDictationEventToUIHost:sel_handleDictationShouldPause_withNewDelagate_ withOptionalObject:v12];
}

- (void)forwardDictationEvent_switchToDictationLanguage:(id)a3
{
  id v4 = a3;
  int has_internal_diagnostics = os_variant_has_internal_diagnostics();
  BOOL v6 = +[UIKeyboard usesInputSystemUI];
  if (has_internal_diagnostics)
  {
    if (!v6)
    {
      BOOL v8 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1853B0000, v8, OS_LOG_TYPE_FAULT, "Unexpected forwarding event", buf, 2u);
      }
    }
  }
  else if (!v6)
  {
    id v9 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &forwardDictationEvent_switchToDictationLanguage____s_category)+ 8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)char v10 = 0;
      _os_log_impl(&dword_1853B0000, v9, OS_LOG_TYPE_ERROR, "Unexpected forwarding event", v10, 2u);
    }
  }
  id v7 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
  [v7 forwardDictationEventToUIHost:sel_handleRemoteDictationEvent_switchToDictationLanguage_ withOptionalObject:v4];
}

- (void)forwardDictationEvent_startDictation
{
  int has_internal_diagnostics = os_variant_has_internal_diagnostics();
  BOOL v4 = +[UIKeyboard usesInputSystemUI];
  if (has_internal_diagnostics)
  {
    if (!v4)
    {
      BOOL v6 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1853B0000, v6, OS_LOG_TYPE_FAULT, "Unexpected forwarding event", buf, 2u);
      }
    }
  }
  else if (!v4)
  {
    id v7 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &forwardDictationEvent_startDictation___s_category) + 8);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)BOOL v8 = 0;
      _os_log_impl(&dword_1853B0000, v7, OS_LOG_TYPE_ERROR, "Unexpected forwarding event", v8, 2u);
    }
  }
  BOOL v5 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
  [v5 forwardDictationEventToUIHost:sel_handleRemoteDictationEvent_startDictation withOptionalObject:0];
}

- (void)forwardDictationEvent_stopDictation:(BOOL)a3
{
  BOOL v3 = a3;
  int has_internal_diagnostics = os_variant_has_internal_diagnostics();
  BOOL v6 = +[UIKeyboard usesInputSystemUI];
  if (has_internal_diagnostics)
  {
    if (!v6)
    {
      id v9 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1853B0000, v9, OS_LOG_TYPE_FAULT, "Unexpected forwarding event", buf, 2u);
      }
    }
  }
  else if (!v6)
  {
    char v10 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &forwardDictationEvent_stopDictation____s_category) + 8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v11 = 0;
      _os_log_impl(&dword_1853B0000, v10, OS_LOG_TYPE_ERROR, "Unexpected forwarding event", v11, 2u);
    }
  }
  id v7 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
  BOOL v8 = [NSNumber numberWithBool:v3];
  [v7 forwardDictationEventToUIHost:sel_handleRemoteDictationEvent_stopDictation_ withOptionalObject:v8];
}

- (void)forwardDictationEvent_cancelDictation
{
  int has_internal_diagnostics = os_variant_has_internal_diagnostics();
  BOOL v4 = +[UIKeyboard usesInputSystemUI];
  if (has_internal_diagnostics)
  {
    if (!v4)
    {
      BOOL v6 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1853B0000, v6, OS_LOG_TYPE_FAULT, "Unexpected forwarding event", buf, 2u);
      }
    }
  }
  else if (!v4)
  {
    id v7 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &forwardDictationEvent_cancelDictation___s_category) + 8);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)BOOL v8 = 0;
      _os_log_impl(&dword_1853B0000, v7, OS_LOG_TYPE_ERROR, "Unexpected forwarding event", v8, 2u);
    }
  }
  BOOL v5 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
  [v5 forwardDictationEventToUIHost:sel_handleRemoteDictationEvent_cancelDictation withOptionalObject:0];
}

- (void)forwardDictationEvent_movePopoverView:(id)a3
{
  id v4 = a3;
  int has_internal_diagnostics = os_variant_has_internal_diagnostics();
  BOOL v6 = +[UIKeyboard usesInputSystemUI];
  if (has_internal_diagnostics)
  {
    if (!v6)
    {
      BOOL v8 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1853B0000, v8, OS_LOG_TYPE_FAULT, "Unexpected forwarding event", buf, 2u);
      }
    }
  }
  else if (!v6)
  {
    id v9 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &forwardDictationEvent_movePopoverView____s_category) + 8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)char v10 = 0;
      _os_log_impl(&dword_1853B0000, v9, OS_LOG_TYPE_ERROR, "Unexpected forwarding event", v10, 2u);
    }
  }
  id v7 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
  [v7 forwardDictationEventToUIHost:sel_handleRemoteDictationEvent_movePopoverView_ withOptionalObject:v4];
}

- (void)forwardDictationEvent_handleTip:(id)a3 title:(id)a4
{
  v17[2] = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  int has_internal_diagnostics = os_variant_has_internal_diagnostics();
  BOOL v9 = +[UIKeyboard usesInputSystemUI];
  if (has_internal_diagnostics)
  {
    if (!v9)
    {
      uint64_t v13 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)char v15 = 0;
        _os_log_fault_impl(&dword_1853B0000, v13, OS_LOG_TYPE_FAULT, "Unexpected forwarding event", v15, 2u);
      }
    }
  }
  else if (!v9)
  {
    id v14 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &forwardDictationEvent_handleTip_title____s_category) + 8);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)char v15 = 0;
      _os_log_impl(&dword_1853B0000, v14, OS_LOG_TYPE_ERROR, "Unexpected forwarding event", v15, 2u);
    }
  }
  char v10 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
  id v11 = v10;
  if (v6)
  {
    v16[0] = @"text";
    v16[1] = @"title";
    v17[0] = v6;
    v17[1] = v7;
    BOOL v12 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v17 forKeys:v16 count:2];
    [v11 forwardDictationEventToUIHost:sel_handleRemoteDictationEvent_handleTip_ withOptionalObject:v12];
  }
  else
  {
    [v10 forwardDictationEventToUIHost:sel_handleRemoteDictationEvent_handleTip_ withOptionalObject:0];
  }
}

- (void)forwardDictationEvent_updateIdleDetection:(int64_t)a3
{
  int has_internal_diagnostics = os_variant_has_internal_diagnostics();
  BOOL v6 = +[UIKeyboard usesInputSystemUI];
  if (has_internal_diagnostics)
  {
    if (!v6)
    {
      char v10 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1853B0000, v10, OS_LOG_TYPE_FAULT, "Unexpected forwarding event", buf, 2u);
      }
    }
  }
  else if (!v6)
  {
    id v11 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &forwardDictationEvent_updateIdleDetection____s_category)+ 8);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)BOOL v12 = 0;
      _os_log_impl(&dword_1853B0000, v11, OS_LOG_TYPE_ERROR, "Unexpected forwarding event", v12, 2u);
    }
  }
  id v7 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
  BOOL v8 = [NSNumber numberWithInteger:a3];
  [v7 forwardDictationEventToUIHost:sel_handleRemoteDictationEvent_updateIdleDetection_ withOptionalObject:v8];

  BOOL v9 = +[UIDictationController sharedInstance];
  [v9 insertLastHypothesisAsFinalResultLocally];
}

- (void)forwardDictationEvent_stopDictationIgnoreFinalizePhrases
{
  int has_internal_diagnostics = os_variant_has_internal_diagnostics();
  BOOL v4 = +[UIKeyboard usesInputSystemUI];
  if (has_internal_diagnostics)
  {
    if (!v4)
    {
      BOOL v6 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1853B0000, v6, OS_LOG_TYPE_FAULT, "Unexpected forwarding event", buf, 2u);
      }
    }
  }
  else if (!v4)
  {
    id v7 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &forwardDictationEvent_stopDictationIgnoreFinalizePhrases___s_category)+ 8);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)BOOL v8 = 0;
      _os_log_impl(&dword_1853B0000, v7, OS_LOG_TYPE_ERROR, "Unexpected forwarding event", v8, 2u);
    }
  }
  BOOL v5 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
  [v5 forwardDictationEventToUIHost:sel_handleRemoteDictationEvent_stopDictationIgnoreFinalizePhrases withOptionalObject:0];
}

- (void)forwardDictationEvent_resumeDictation
{
  int has_internal_diagnostics = os_variant_has_internal_diagnostics();
  BOOL v4 = +[UIKeyboard usesInputSystemUI];
  if (has_internal_diagnostics)
  {
    if (!v4)
    {
      BOOL v6 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1853B0000, v6, OS_LOG_TYPE_FAULT, "Unexpected forwarding event", buf, 2u);
      }
    }
  }
  else if (!v4)
  {
    id v7 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &forwardDictationEvent_resumeDictation___s_category) + 8);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)BOOL v8 = 0;
      _os_log_impl(&dword_1853B0000, v7, OS_LOG_TYPE_ERROR, "Unexpected forwarding event", v8, 2u);
    }
  }
  BOOL v5 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
  [v5 forwardDictationEventToUIHost:sel_handleRemoteDictationEvent_resumeDictation withOptionalObject:0];
}

- (void)forwardKeyboardCameraEvent_startCameraInput:(id)a3
{
  id v4 = a3;
  int has_internal_diagnostics = os_variant_has_internal_diagnostics();
  BOOL v6 = +[UIKeyboard usesInputSystemUI];
  if (has_internal_diagnostics)
  {
    if (!v6)
    {
      BOOL v8 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1853B0000, v8, OS_LOG_TYPE_FAULT, "Unexpected forwarding event", buf, 2u);
      }
    }
  }
  else if (!v6)
  {
    BOOL v9 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &forwardKeyboardCameraEvent_startCameraInput____s_category)+ 8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)char v10 = 0;
      _os_log_impl(&dword_1853B0000, v9, OS_LOG_TYPE_ERROR, "Unexpected forwarding event", v10, 2u);
    }
  }
  id v7 = [(_UIKeyboardStateManager *)self remoteTextInputPartner];
  objc_msgSend(v7, "forwardKeyboardCameraEvent_startCameraInput:", v4);
}

- (void)forwardKeyboardCameraEvent_selfDestruct
{
  int has_internal_diagnostics = os_variant_has_internal_diagnostics();
  BOOL v4 = +[UIKeyboard isInputSystemUI];
  if (has_internal_diagnostics)
  {
    if (!v4)
    {
      BOOL v8 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1853B0000, v8, OS_LOG_TYPE_FAULT, "Unexpected forwarding event", buf, 2u);
      }
    }
  }
  else if (!v4)
  {
    BOOL v9 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &forwardKeyboardCameraEvent_selfDestruct___s_category) + 8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)char v10 = 0;
      _os_log_impl(&dword_1853B0000, v9, OS_LOG_TYPE_ERROR, "Unexpected forwarding event", v10, 2u);
    }
  }
  BOOL v5 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  BOOL v6 = [v5 inputSystemSourceSession];

  if (v6)
  {
    id v7 = [v6 textOperations];
    [v7 setEditingActionSelector:sel_handleRemoteKeyboardCameraEvent_selfDestruct];
    [v6 flushOperations];
  }
}

- (void)forwardKeyboardCameraEvent_updatePreviewText:(id)a3 asMarkedText:(BOOL)a4
{
  BOOL v4 = a4;
  id v6 = a3;
  int has_internal_diagnostics = os_variant_has_internal_diagnostics();
  BOOL v8 = +[UIKeyboard isKeyboardProcess];
  if (has_internal_diagnostics)
  {
    if (!v8)
    {
      char v15 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1853B0000, v15, OS_LOG_TYPE_FAULT, "Unexpected forwarding event", buf, 2u);
      }
    }
  }
  else if (!v8)
  {
    id v16 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &forwardKeyboardCameraEvent_updatePreviewText_asMarkedText____s_category)+ 8);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)CGFloat v17 = 0;
      _os_log_impl(&dword_1853B0000, v16, OS_LOG_TYPE_ERROR, "Unexpected forwarding event", v17, 2u);
    }
  }
  BOOL v9 = [(_UIKeyboardStateManager *)self inputDelegateManager];
  char v10 = [v9 inputSystemSourceSession];

  if (v10)
  {
    if (v4)
    {
      id v11 = [MEMORY[0x1E4FAE350] intermediateTextWithInputString:&stru_1ED0E84C0 displayString:v6];
      BOOL v12 = [v10 textOperations];
      [v12 setIntermediateText:v11];
    }
    else
    {
      uint64_t v13 = [MEMORY[0x1E4FAE350] intermediateTextWithInputString:&stru_1ED0E84C0 displayString:&stru_1ED0E84C0];
      id v14 = [v10 textOperations];
      [v14 setIntermediateText:v13];

      id v11 = [v10 textOperations];
      BOOL v12 = [v11 keyboardOutput];
      [v12 insertText:v6];
    }

    [v10 flushOperations];
  }
}

- (void)handleTextChoiceBubbleTapped
{
}

- (id)_getCurrentKeyplaneName
{
  p_presentationDelegate = &self->_presentationDelegate;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  BOOL v4 = [WeakRetained layout];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  if (isKindOfClass)
  {
    id v6 = objc_loadWeakRetained((id *)p_presentationDelegate);
    id v7 = [v6 layout];
    BOOL v8 = [v7 keyplaneName];
  }
  else
  {
    BOOL v8 = 0;
  }
  return v8;
}

- (id)_getCurrentKeyboardName
{
  p_presentationDelegate = &self->_presentationDelegate;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  BOOL v4 = [WeakRetained layout];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  if (isKindOfClass)
  {
    id v6 = objc_loadWeakRetained((id *)p_presentationDelegate);
    id v7 = [v6 layout];
    BOOL v8 = [v7 keyboardName];
  }
  else
  {
    BOOL v8 = 0;
  }
  return v8;
}

- (id)_getLocalizedInputMode
{
  p_presentationDelegate = &self->_presentationDelegate;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  BOOL v4 = [WeakRetained layout];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  if (isKindOfClass)
  {
    id v6 = objc_loadWeakRetained((id *)p_presentationDelegate);
    id v7 = [v6 layout];
    BOOL v8 = [v7 localizedInputMode];
  }
  else
  {
    BOOL v8 = 0;
  }
  return v8;
}

- (void)_setAutocorrects:(BOOL)a3
{
}

- (id)_getAutocorrection
{
  int v2 = [(_UIKeyboardStateManager *)self autocorrectionController];
  BOOL v3 = [v2 autocorrection];
  BOOL v4 = [v3 candidate];

  return v4;
}

- (id)_getAutocorrectionList
{
  int v2 = +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate];
  BOOL v3 = [v2 systemInputAssistantViewController];
  BOOL v4 = [v3 centerViewController];
  BOOL v5 = [v4 displayedCandidates];

  return v5;
}

- (id)_getCandidateList
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  BOOL v3 = [WeakRetained candidateController];
  BOOL v4 = [v3 candidates];
  BOOL v5 = [v4 candidates];

  return v5;
}

- (BOOL)_hasCandidates
{
  return [(TIKeyboardCandidateResultSet *)self->m_candidateResultSet hasCandidates];
}

- (int64_t)_positionInCandidateList:(id)a3
{
  return [(TIKeyboardCandidateResultSet *)self->m_candidateResultSet positionInCandidateList:a3];
}

- (void)_setNeedsCandidates:(BOOL)a3
{
  self->m_needsCandidates = a3;
}

- (BOOL)_needsCandidates
{
  return self->m_needsCandidates;
}

- (BOOL)prewarmsPredictiveCandidates
{
  int v2 = +[UIKeyboardPreferencesController sharedPreferencesController];
  BOOL v3 = [v2 preferencesActions];
  char v4 = [v3 predictionEnabled];
  if (kbPrewarmsPredictiveCandidates) {
    BOOL v5 = v4;
  }
  else {
    BOOL v5 = 0;
  }

  return v5;
}

- (void)setPrewarmsPredictiveCandidates:(BOOL)a3
{
  kbPrewarmsPredictiveCandidates = a3;
}

- (UIPhysicalKeyboardEvent)eventForCurrentWebEvent
{
  return self->m_currentEventForKeyCommand;
}

- (void)setEventForCurrentWebEvent:(id)a3
{
}

- (TIKeyboardInputManagerState)inputManagerState
{
  return self->m_inputManagerState;
}

- (TIKeyboardTouchEvent)touchEventWaitingForKeyInputEvent
{
  return self->m_touchEventWaitingForKeyInputEvent;
}

- (void)setTouchEventWaitingForKeyInputEvent:(id)a3
{
}

- (_UIActionWhenIdle)delayedCandidateRequest
{
  return self->m_delayedCandidateRequest;
}

- (void)setDelayedCandidateRequest:(id)a3
{
}

- (_UIActionWhenIdle)deferredDidSetDelegateAction
{
  return self->m_deferredDidSetDelegateAction;
}

- (void)setDeferredDidSetDelegateAction:(id)a3
{
}

- (id)changedDelegate
{
  return self->m_changedDelegate;
}

- (void)setChangedDelegate:(id)a3
{
}

- (BOOL)committingCandidate
{
  return self->committingCandidate;
}

- (void)setCommittingCandidate:(BOOL)a3
{
  self->committingCandidate = a3;
}

- (BOOL)disableSmartInsertDelete
{
  return self->m_disableSmartInsertDelete;
}

- (void)setDisableSmartInsertDelete:(BOOL)a3
{
  self->m_disableSmartInsertDelete = a3;
}

- (BOOL)suppressUpdateLayout
{
  return self->m_suppressUpdateLayout;
}

- (void)setSuppressUpdateLayout:(BOOL)a3
{
  self->m_suppressUpdateLayout = a3;
}

- (BOOL)suppressUpdateShiftState
{
  return self->m_suppressUpdateShiftState;
}

- (void)setSuppressUpdateShiftState:(BOOL)a3
{
  self->m_suppressUpdateShiftState = a3;
}

- (int)predictionType
{
  return self->m_predictionType;
}

- (void)setPredictionType:(int)a3
{
  self->int m_predictionType = a3;
}

- (void)setAutofillController:(id)a3
{
}

- (UIDelayedAction)updateCapsLockDelayOverrideForNonTyping
{
  return self->m_updateCapsLockDelayOverrideForNonTyping;
}

- (void)setUpdateCapsLockDelayOverrideForNonTyping:(id)a3
{
}

- (BOOL)delegateRequiresKeyEvents
{
  return self->m_delegateRequiresKeyEvents;
}

- (BOOL)everPresentedPasswordAutofillPanel
{
  return self->m_everPresentedPasswordAutofillPanel;
}

- (void)setEverPresentedPasswordAutofillPanel:(BOOL)a3
{
  self->m_everPresentedPasswordAutofillPanel = a3;
}

- (TIKeyboardState)keyboardState
{
  return self->m_keyboardState;
}

- (void)setKeyboardState:(id)a3
{
}

- (BOOL)textInputChangesIgnored
{
  return self->m_textInputChangesIgnored;
}

- (void)setTextInputChangingCount:(unint64_t)a3
{
  self->unint64_t m_textInputChangingCount = a3;
}

- (BOOL)textInputChangingText
{
  return self->m_textInputChangingText;
}

- (void)setTextInputChangingText:(BOOL)a3
{
  self->m_textInputChangingText = a3;
}

- (BOOL)textInputChangingDirection
{
  return self->m_textInputChangingDirection;
}

- (void)setTextInputChangingDirection:(BOOL)a3
{
  self->m_textInputChangingDirection = a3;
}

- (BOOL)textInputUpdatingSelection
{
  return self->m_textInputUpdatingSelection;
}

- (void)setTextInputUpdatingSelection:(BOOL)a3
{
  self->m_textInputUpdatingSelection = a3;
}

- (BOOL)autoshifted
{
  return self->m_autoshift;
}

- (void)setAutoshifted:(BOOL)a3
{
  self->BOOL m_autoshift = a3;
}

- (BOOL)shifted
{
  return self->m_shift;
}

- (void)setShifted:(BOOL)a3
{
  self->m_shift = a3;
}

- (BOOL)shiftLocked
{
  return self->m_shiftLocked;
}

- (void)setShiftLockedEnabled:(BOOL)a3
{
  self->m_shiftLockedEnabled = a3;
}

- (BOOL)shiftNeedsUpdate
{
  return self->m_shiftNeedsUpdate;
}

- (void)setShiftNeedsUpdate:(BOOL)a3
{
  self->m_shiftNeedsUpdate = a3;
}

- (BOOL)shiftPreventAutoshift
{
  return self->m_shiftPreventAutoshift;
}

- (int64_t)textInputSource
{
  return self->m_textInputSource;
}

- (void)setTextInputSource:(int64_t)a3
{
  self->int64_t m_textInputSource = a3;
}

- (UIKeyboardScheduledTask)autoDeleteTask
{
  return self->m_autoDeleteTask;
}

- (BOOL)autoDeleteOK
{
  return self->m_autoDeleteOK;
}

- (unsigned)autoDeleteCount
{
  return self->m_autoDeleteCount;
}

- (void)setAutoDeleteCount:(unsigned int)a3
{
  self->unsigned int m_autoDeleteCount = a3;
}

- (void)setAutocapitalizationPreference:(BOOL)a3
{
  self->m_autocapitalizationPreference = a3;
}

- (void)setAutocorrectionPreference:(BOOL)a3
{
  self->m_autocorrectionPreference = a3;
}

- (BOOL)originalShouldSkipCandidateSelection
{
  return self->m_originalShouldSkipCandidateSelection;
}

- (void)setOriginalShouldSkipCandidateSelection:(BOOL)a3
{
  self->m_originalShouldSkipCandidateSelection = a3;
}

- (BOOL)editingTraitsMarkedDirty
{
  return self->m_editingTraitsMarkedDirty;
}

- (void)setEditingTraitsMarkedDirty:(BOOL)a3
{
  self->m_editingTraitsMarkedDirtdouble y = a3;
}

- (void)setShouldSuppressSelectionCommands:(BOOL)a3
{
  self->BOOL m_shouldSuppressSelectionCommands = a3;
}

- (UITextInputTraits)traitsForPreviousDelegate
{
  return self->m_traitsForPreviousDelegate;
}

- (void)setTraitsForPreviousDelegate:(id)a3
{
}

- (BOOL)markedTextFromClient
{
  return self->markedTextFromClient;
}

- (void)setMarkedTextFromClient:(BOOL)a3
{
  self->markedTextFromClient = a3;
}

- (unint64_t)lastChooseSupplementalItemToInsertCallbackIdentifier
{
  return self->m_lastChooseSupplementalItemToInsertCallbackIdentifier;
}

- (void)setLastChooseSupplementalItemToInsertCallbackIdentifier:(unint64_t)a3
{
  self->m_lastChooseSupplementalItemToInsertCallbackIdentifier = a3;
}

- (BOOL)performingRemoteTextOperations
{
  return self->performingRemoteTextOperations;
}

- (void)setPerformingRemoteTextOperations:(BOOL)a3
{
  self->performingRemoteTextOperations = a3;
}

- (void)setInputDelegateManager:(id)a3
{
}

- (_UITextInputUserInteractionDelegate)userInteractionDelegate
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_userInteractionDelegate);
  return (_UITextInputUserInteractionDelegate *)WeakRetained;
}

- (void)setUserInteractionDelegate:(id)a3
{
}

- (id)didTeardownExistingDelegate
{
  return self->_didTeardownExistingDelegate;
}

- (id)willSetupNewDelegate
{
  return self->_willSetupNewDelegate;
}

- (BOOL)forCustomInputView
{
  return self->_forCustomInputView;
}

- (void)setForCustomInputView:(BOOL)a3
{
  self->_forCustomInputView = a3;
}

- (void)setReceivedCandidatesInCurrentInputMode:(BOOL)a3
{
  self->_receivedCandidatesInCurrentInputMode = a3;
}

- (double)deleteWordLastDelete
{
  return self->_deleteWordLastDelete;
}

- (void)setDeleteWordLastDelete:(double)a3
{
  self->_deleteWordLastDelete = a3;
}

- (UIKeyboardTaskQueue)taskQueue
{
  return self->_taskQueue;
}

- (BOOL)suppressUpdateAssistantView
{
  return self->_suppressUpdateAssistantView;
}

- (void)setSuppressUpdateAssistantView:(BOOL)a3
{
  self->_suppressUpdateAssistantView = a3;
}

- (BOOL)suppressUpdateInputMode
{
  return self->_suppressUpdateInputMode;
}

- (void)setSuppressUpdateInputMode:(BOOL)a3
{
  self->_suppressUpdateInputMode = a3;
}

- (BOOL)isCallingTextChangedDuringInputModeSwitch
{
  return self->_isCallingTextChangedDuringInputModeSwitch;
}

- (void)setIsCallingTextChangedDuringInputModeSwitch:(BOOL)a3
{
  self->_isCallingTextChangedDuringInputModeSwitch = a3;
}

- (NSString)activeDictationLanguage
{
  return self->_activeDictationLanguage;
}

- (void)setActiveDictationLanguage:(id)a3
{
}

- (NSString)hardwareKeyboardExclusivityIdentifier
{
  return self->_hardwareKeyboardExclusivityIdentifier;
}

- (_UIStringAndPositionPair)lastMatchedSupplementalCandidate
{
  return self->_lastMatchedSupplementalCandidate;
}

- (void)setLastMatchedSupplementalCandidate:(id)a3
{
}

- (_UIStringAndPositionPair)pendingSupplementalCandidateToInsert
{
  return self->_pendingSupplementalCandidateToInsert;
}

- (void)setPendingSupplementalCandidateToInsert:(id)a3
{
}

- (BOOL)isSettingDelegate
{
  return self->_isSettingDelegate;
}

- (BOOL)keyboardDelegateStateNeedsRefresh
{
  return self->_keyboardDelegateStateNeedsRefresh;
}

- (void)setKeyboardDelegateStateNeedsRefresh:(BOOL)a3
{
  self->_keyboardDelegateStateNeedsRefresh = a3;
}

- (BOOL)_mimicShiftBeingHeld
{
  return self->__mimicShiftBeingHeld;
}

- (void)set_mimicShiftBeingHeld:(BOOL)a3
{
  self->__mimicShiftBeingHeld = a3;
}

- (BOOL)hasPreviousKeyResponder
{
  return self->_hasPreviousKeyResponder;
}

- (void)setHasPreviousKeyResponder:(BOOL)a3
{
  self->_hasPreviousKeyResponder = a3;
}

- (BOOL)hasNextKeyResponder
{
  return self->_hasNextKeyResponder;
}

- (void)setHasNextKeyResponder:(BOOL)a3
{
  self->_hasNextKeyResponder = a3;
}

- (UIKeyboardInputModeIndicatorController)inputModeIndicatorController
{
  return self->_inputModeIndicatorController;
}

- (BOOL)skipRecomputeInputMode
{
  return self->_skipRecomputeInputMode;
}

- (void)setSkipRecomputeInputMode:(BOOL)a3
{
  self->_skipRecomputeInputMode = a3;
}

- (BOOL)syncingDictationLanguageForInputModeSwitch
{
  return self->_syncingDictationLanguageForInputModeSwitch;
}

- (void)setSyncingDictationLanguageForInputModeSwitch:(BOOL)a3
{
  self->_syncingDictationLanguageForInputModeSwitch = a3;
}

- (UITextInputArrowKeyHistory)arrowKeyHistory
{
  return self->_arrowKeyHistory;
}

- (void)setArrowKeyHistory:(id)a3
{
}

- (BOOL)floatingForced
{
  return self->_floatingForced;
}

- (void)setFloatingForced:(BOOL)a3
{
  self->_floatingForced = a3;
}

- (_UISmartReplyFeedbackManager)smartReplyFeedbackManager
{
  return self->_smartReplyFeedbackManager;
}

- (void)setSmartReplyFeedbackManager:(id)a3
{
}

- (_UIKeyboardPresentationDelegate)presentationDelegate
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  return (_UIKeyboardPresentationDelegate *)WeakRetained;
}

- (void)setPresentationDelegate:(id)a3
{
}

- (id)externalTask
{
  return self->_externalTask;
}

- (void)setExternalTask:(id)a3
{
}

- (_UITextChoiceAccelerationAssistant)customInputDelegateChoiceAccelerationAssistant
{
  return self->_customInputDelegateChoiceAccelerationAssistant;
}

- (void)setCustomInputDelegateChoiceAccelerationAssistant:(id)a3
{
}

- (_UIKeyboardTextSelectionController)customInputDelegateSelectionController
{
  return self->_customInputDelegateSelectionController;
}

- (void)setCustomInputDelegateSelectionController:(id)a3
{
}

- (_UIKeyboardTextSelectionInteraction)customInputDelegateSelectionInteraction
{
  return self->_customInputDelegateSelectionInteraction;
}

- (void)setCustomInputDelegateSelectionInteraction:(id)a3
{
}

- (NSUUID)resigningRTISessionIdentifier
{
  return self->_resigningRTISessionIdentifier;
}

- (void)setResigningRTISessionIdentifier:(id)a3
{
}

- (BOOL)handlingKeyCommandFromHardwareKeyboard
{
  return self->_handlingKeyCommandFromHardwareKeyboard;
}

- (void)setHandlingKeyCommandFromHardwareKeyboard:(BOOL)a3
{
  self->_handlingKeyCommandFromHardwareKeyboard = a3;
}

- (TICandidateRequestToken)currentCandidateRequest
{
  return self->_currentCandidateRequest;
}

- (NSDictionary)currentCandidateRequestInfo
{
  return self->_currentCandidateRequestInfo;
}

- (void)setCurrentCandidateRequestInfo:(id)a3
{
}

- (NSMutableDictionary)delegateForCandidateRequest
{
  return self->_delegateForCandidateRequest;
}

- (void)setDelegateForCandidateRequest:(id)a3
{
}

- (TIKeyboardCandidate)autocorrectionToAcceptBeforeProgressiveCandidates
{
  return self->_autocorrectionToAcceptBeforeProgressiveCandidates;
}

- (void)setAutocorrectionToAcceptBeforeProgressiveCandidates:(id)a3
{
}

- (int64_t)candidateViewOffset
{
  return self->_candidateViewOffset;
}

- (void)setCandidateViewOffset:(int64_t)a3
{
  self->_candidateViewOffset = a3;
}

- (NSString)deletedString
{
  return self->_deletedString;
}

- (void)setDeletedString:(id)a3
{
}

- (NSArray)characterRectsForCharacterRange
{
  return self->_characterRectsForCharacterRange;
}

- (void)setCharacterRectsForCharacterRange:(id)a3
{
}

- (id)chooseSupplementalCandidateCompletion
{
  return self->_chooseSupplementalCandidateCompletion;
}

- (void)setChooseSupplementalCandidateCompletion:(id)a3
{
}

- (unint64_t)lastDeletionCountForFastDelete
{
  return self->_lastDeletionCountForFastDelete;
}

- (void)setLastDeletionCountForFastDelete:(unint64_t)a3
{
  self->_lastDeletionCountForFastDelete = a3;
}

- (UIView)overlayContainerObserved
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_overlayContainerObserved);
  return (UIView *)WeakRetained;
}

- (void)setOverlayContainerObserved:(id)a3
{
}

- (void)skippedEndInputSession
{
  return self->_skippedEndInputSession;
}

- (void)setSkippedEndInputSession:(void *)a3
{
  self->_skippedEndInputSession = a3;
}

- (NSUUID)skippedEndInputSessionID
{
  return self->_skippedEndInputSessionID;
}

- (void)setSkippedEndInputSessionID:(id)a3
{
}

- (TUISmartReplyGenerator_Staging)smartReplyGenerator
{
  return self->_smartReplyGenerator;
}

- (void)setSmartReplyGenerator:(id)a3
{
}

- (void).cxx_destruct
{
  objc_storeStrong((id *)&self->_smartReplyGenerator, 0);
  objc_storeStrong((id *)&self->_skippedEndInputSessionID, 0);
  objc_destroyWeak((id *)&self->_overlayContainerObserved);
  objc_storeStrong(&self->_chooseSupplementalCandidateCompletion, 0);
  objc_storeStrong((id *)&self->_characterRectsForCharacterRange, 0);
  objc_storeStrong((id *)&self->_deletedString, 0);
  objc_storeStrong((id *)&self->_autocorrectionToAcceptBeforeProgressiveCandidates, 0);
  objc_storeStrong((id *)&self->_delegateForCandidateRequest, 0);
  objc_storeStrong((id *)&self->_currentCandidateRequestInfo, 0);
  objc_storeStrong((id *)&self->_currentCandidateRequest, 0);
  objc_storeStrong((id *)&self->_resigningRTISessionIdentifier, 0);
  objc_storeStrong((id *)&self->_customInputDelegateSelectionInteraction, 0);
  objc_storeStrong((id *)&self->_customInputDelegateSelectionController, 0);
  objc_storeStrong((id *)&self->_customInputDelegateChoiceAccelerationAssistant, 0);
  objc_storeStrong(&self->_externalTask, 0);
  objc_destroyWeak((id *)&self->_presentationDelegate);
  objc_storeStrong((id *)&self->_smartReplyFeedbackManager, 0);
  objc_storeStrong((id *)&self->_arrowKeyHistory, 0);
  objc_storeStrong((id *)&self->_inputModeIndicatorController, 0);
  objc_storeStrong((id *)&self->_pendingSupplementalCandidateToInsert, 0);
  objc_storeStrong((id *)&self->_lastMatchedSupplementalCandidate, 0);
  objc_storeStrong((id *)&self->_hardwareKeyboardExclusivityIdentifier, 0);
  objc_storeStrong((id *)&self->_activeDictationLanguage, 0);
  objc_storeStrong((id *)&self->_taskQueue, 0);
  objc_storeStrong(&self->_willSetupNewDelegate, 0);
  objc_storeStrong(&self->_didTeardownExistingDelegate, 0);
  objc_destroyWeak((id *)&self->_userInteractionDelegate);
  objc_storeStrong((id *)&self->_inputDelegateManager, 0);
  objc_storeStrong((id *)&self->m_traitsForPreviousDelegate, 0);
  objc_storeStrong((id *)&self->m_autoDeleteTask, 0);
  objc_storeStrong((id *)&self->m_keyboardState, 0);
  objc_storeStrong((id *)&self->m_updateCapsLockDelayOverrideForNonTyping, 0);
  objc_storeStrong(&self->m_changedDelegate, 0);
  objc_storeStrong((id *)&self->m_deferredDidSetDelegateAction, 0);
  objc_storeStrong((id *)&self->m_delayedCandidateRequest, 0);
  objc_storeStrong((id *)&self->m_touchEventWaitingForKeyInputEvent, 0);
  objc_storeStrong((id *)&self->m_smartPunctuationController, 0);
  objc_storeStrong((id *)&self->m_inlineTextCompletionController, 0);
  objc_storeStrong((id *)&self->m_inputManagerState, 0);
  objc_storeStrong((id *)&self->m_currentEventForKeyCommand, 0);
  objc_storeStrong((id *)&self->_pendingKeyupOperation, 0);
  objc_storeStrong((id *)&self->_pendingAutocorrectRange, 0);
  objc_storeStrong(&self->_waitingOnPerformAutocorrect, 0);
  objc_storeStrong((id *)&self->_inlineCompletionAsMarkedText, 0);
  objc_storeStrong((id *)&self->m_keyboardWindowSnapshot, 0);
  objc_storeStrong((id *)&self->_remoteTextInputTraits, 0);
  objc_storeStrong((id *)&self->_remoteTextInputPartner, 0);
  objc_storeStrong((id *)&self->m_hardwareKeyDownCodeToEventMap, 0);
  objc_storeStrong(&self->_deferredUpdateTask, 0);
  objc_storeStrong((id *)&self->m_delayDeleteTask, 0);
  objc_storeStrong((id *)&self->m_implProxy, 0);
  objc_storeStrong((id *)&self->m_autofillCustomInfo, 0);
  objc_storeStrong((id *)&self->m_autofillController, 0);
  objc_storeStrong((id *)&self->m_hideCursorAccessoriesAssertion, 0);
  objc_storeStrong((id *)&self->m_showCursorAccessory, 0);
  objc_storeStrong((id *)&self->m_idleDetection, 0);
  objc_storeStrong((id *)&self->m_updateLastUsedInputModeAction, 0);
  objc_storeStrong((id *)&self->_hostingController, 0);
  objc_storeStrong((id *)&self->m_previousGlobeKeyEvent, 0);
  objc_storeStrong((id *)&self->m_overrideTraits, 0);
  objc_storeStrong((id *)&self->m_traits, 0);
  objc_storeStrong((id *)&self->m_defaultTraits, 0);
  objc_storeStrong((id *)&self->m_longPressAction, 0);
  objc_storeStrong((id *)&self->m_candidateList, 0);
  objc_storeStrong((id *)&self->m_candidateResultSet, 0);
  objc_storeStrong((id *)&self->m_autocorrectionController, 0);
  objc_storeStrong((id *)&self->m_previousInputString, 0);
}

@end