@interface UIKBAutofillController
+ (id)preferredInsertionOrder;
+ (int64_t)translateToUIAutofillMode:(unint64_t)a3;
+ (unint64_t)translateToTextInputAutofillMode:(int64_t)a3;
- (BOOL)_prohibitAutofill:(id)a3 needASPKeyboard:(BOOL)a4;
- (BOOL)containsUsernamePasswordPairsInAutofillGroup:(id)a3;
- (BOOL)preferFallbackAutofillGroup;
- (BOOL)shouldLoadASPForResponder:(id)a3;
- (BOOL)shouldSaveAutofill;
- (BOOL)signupHintForUsername:(id)a3 password:(id)a4 responder:(id)a5;
- (NSMutableDictionary)autofillGroup;
- (NSMutableDictionary)fallbackAutofillGroup;
- (UIColor)textFieldOrigColor;
- (UIKBAutofillController)init;
- (id)accessibilityLoginKeywordList;
- (id)accessibilitySignupKeywordList;
- (id)addressKeywordSet;
- (id)autofillContextForInputDelegate:(id)a3;
- (id)contactAutoFillKeywordsForKey:(id)a3 value:(id)a4 localizedKeywords:(id)a5;
- (id)emailKeywordSet;
- (id)loginKeywordList;
- (id)phoneKeywordSet;
- (id)processLocalizedString:(id)a3;
- (id)searchKeywordSet;
- (id)signupKeywordList;
- (id)textContentTypeForInputDelegate:(id)a3;
- (id)textSignalsForResponder:(id)a3;
- (int64_t)_needAutofillCandidate:(id)a3 delegateAsResponder:(id)a4;
- (int64_t)contactAutofillModeWithAutofillGroup:(id)a3 responders:(id)a4;
- (int64_t)containsIndicationInText:(id)a3 withAccessibilityHints:(BOOL)a4;
- (int64_t)delegateNeedsAutofillMode;
- (int64_t)doTraits:(id)a3 matchTextContentType:(id)a4;
- (int64_t)needAutofillCandidate:(id)a3 delegateAsResponder:(id)a4 keyboardState:(id)a5;
- (int64_t)signUpSignalFromButton:(id)a3;
- (int64_t)signUpSignalFromNavBarItem:(id)a3;
- (int64_t)signUpSignalFromViewControllerHierarchy:(id)a3;
- (void)_clearASPInTextField:(id)a3;
- (void)_setAutofillGroup:(id)a3;
- (void)addTemporaryTextColorToTextField:(id)a3;
- (void)clearASPInPasswordFields;
- (void)clearASPVisualEffectsInTextField:(id)a3;
- (void)clearAutofillGroup;
- (void)clearFallbackAutofillGroup;
- (void)didOptOutOfAutofillSignup;
- (void)enumeratePasswordFieldsUsingBlock:(id)a3;
- (void)handleAutofillCredentialSaveIfNeeded:(id)a3 fromASP:(BOOL)a4;
- (void)handleWebviewCredentialsSaveForResponder:(id)a3 WebsiteURL:(id)a4 user:(id)a5 password:(id)a6 passwordIsAutoGenerated:(BOOL)a7;
- (void)optOutASPInTextField;
- (void)removeTemporaryTextColorFromTextField:(id)a3;
- (void)setDelegateNeedsAutofillMode:(int64_t)a3;
- (void)setFallbackAutofillGroup:(id)a3;
- (void)setShouldSaveAutofill:(BOOL)a3;
- (void)setTextFieldOrigColor:(id)a3;
- (void)showASPInTextField:(id)a3 isRightToLeft:(BOOL)a4;
- (void)trackResponderForAutofillIfNeeded:(id)a3;
- (void)updateAutofillContextForInputDelegate:(id)a3;
@end

@implementation UIKBAutofillController

- (NSMutableDictionary)autofillGroup
{
  targetDetectionController = self->_targetDetectionController;
  if (targetDetectionController)
  {
    v4 = [(AFUITargetDetectionController_Staging *)targetDetectionController autoFillGroup];
  }
  else
  {
    v4 = self->_autofillGroup;
  }
  return v4;
}

- (NSMutableDictionary)fallbackAutofillGroup
{
  targetDetectionController = self->_targetDetectionController;
  if (targetDetectionController)
  {
    v4 = [(AFUITargetDetectionController_Staging *)targetDetectionController fallbackAutoFillGroup];
  }
  else
  {
    v4 = self->_fallbackAutofillGroup;
  }
  return v4;
}

- (int64_t)delegateNeedsAutofillMode
{
  targetDetectionController = self->_targetDetectionController;
  if (!targetDetectionController) {
    return self->_delegateNeedsAutofillMode;
  }
  int64_t result = [(AFUITargetDetectionController_Staging *)targetDetectionController delegateNeedsAutofillMode];
  if ((unint64_t)(result - 1) >= 0xA) {
    return 0;
  }
  return result;
}

+ (unint64_t)translateToTextInputAutofillMode:(int64_t)a3
{
  if ((unint64_t)(a3 - 1) > 9) {
    return 0;
  }
  else {
    return qword_186B9AFC8[a3 - 1];
  }
}

- (UIKBAutofillController)init
{
  v11.receiver = self;
  v11.super_class = (Class)UIKBAutofillController;
  v2 = [(UIKBAutofillController *)&v11 init];
  if (v2)
  {
    if ((_os_feature_enabled_impl() & 1) != 0
      || (_os_feature_enabled_impl() & 1) != 0
      || _os_feature_enabled_impl())
    {
      uint64_t v13 = 0;
      v14 = &v13;
      uint64_t v15 = 0x2050000000;
      v3 = (void *)qword_1EB261F80;
      uint64_t v16 = qword_1EB261F80;
      if (!qword_1EB261F80)
      {
        v12[0] = MEMORY[0x1E4F143A8];
        v12[1] = 3221225472;
        v12[2] = __getAFUITargetDetectionControllerClass_block_invoke;
        v12[3] = &unk_1E52D9900;
        v12[4] = &v13;
        __getAFUITargetDetectionControllerClass_block_invoke((uint64_t)v12);
        v3 = (void *)v14[3];
      }
      v4 = v3;
      _Block_object_dispose(&v13, 8);
      v5 = (AFUITargetDetectionController_Staging *)objc_alloc_init(v4);
      targetDetectionController = v2->_targetDetectionController;
      v2->_targetDetectionController = v5;
    }
    v2->_delegateNeedsAutofillMode = 0;
    v2->_shouldSaveAutofill = 0;
    uint64_t v7 = [MEMORY[0x1E4F1CA60] dictionary];
    autofillGroup = v2->_autofillGroup;
    v2->_autofillGroup = (NSMutableDictionary *)v7;

    fallbackAutofillGroup = v2->_fallbackAutofillGroup;
    v2->_fallbackAutofillGroup = 0;
  }
  return v2;
}

- (void)setDelegateNeedsAutofillMode:(int64_t)a3
{
  targetDetectionController = self->_targetDetectionController;
  if (targetDetectionController)
  {
    if ((unint64_t)(a3 - 1) >= 0xA) {
      a3 = 0;
    }
    [(AFUITargetDetectionController_Staging *)targetDetectionController setDelegateNeedsAutofillMode:a3];
  }
  else
  {
    self->_delegateNeedsAutofillMode = a3;
  }
}

- (void)setFallbackAutofillGroup:(id)a3
{
  id v5 = a3;
  targetDetectionController = self->_targetDetectionController;
  id v7 = v5;
  if (targetDetectionController) {
    -[AFUITargetDetectionController_Staging setFallbackAutoFillGroup:](targetDetectionController, "setFallbackAutoFillGroup:");
  }
  else {
    objc_storeStrong((id *)&self->_fallbackAutofillGroup, a3);
  }
}

+ (id)preferredInsertionOrder
{
  v4[31] = *MEMORY[0x1E4F143B8];
  v4[0] = @"username";
  v4[1] = @"password";
  v4[2] = @"new-password";
  v4[3] = @"email";
  v4[4] = @"name";
  v4[5] = @"given-name";
  v4[6] = @"additional-name";
  v4[7] = @"family-name";
  v4[8] = @"street-address";
  v4[9] = @"address-line1";
  v4[10] = @"address-line2";
  v4[11] = @"address-level2";
  v4[12] = @"address-level1";
  v4[13] = @"address-level1+2";
  v4[14] = @"address-level3";
  v4[15] = @"country-name";
  v4[16] = @"postal-code";
  v4[17] = @"tel";
  v4[18] = @"bday";
  v4[19] = @"bday-day";
  v4[20] = @"bday-month";
  v4[21] = @"bday-year";
  v4[22] = @"cc-name";
  v4[23] = @"cc-given-name";
  v4[24] = @"cc-additional-name";
  v4[25] = @"cc-family-name";
  v4[26] = @"cc-number";
  v4[27] = @"cc-csc";
  v4[28] = @"cc-exp";
  v4[29] = @"cc-exp-month";
  v4[30] = @"cc-exp-year";
  v2 = [MEMORY[0x1E4F1C978] arrayWithObjects:v4 count:31];
  return v2;
}

+ (int64_t)translateToUIAutofillMode:(unint64_t)a3
{
  if (a3 - 1 > 7) {
    return 0;
  }
  else {
    return qword_186B9B018[a3 - 1];
  }
}

- (int64_t)doTraits:(id)a3 matchTextContentType:(id)a4
{
  id v5 = a3;
  v6 = (__CFString *)a4;
  id v7 = v6;
  if (!v5) {
    goto LABEL_38;
  }
  if (@"username" == v6)
  {
    uint64_t v13 = [v5 textContentType];
    char v14 = [v13 isEqualToString:v7];

    if (v14) {
      goto LABEL_36;
    }
    if ([v5 keyboardType]
      && [v5 keyboardType] != 7
      && [v5 keyboardType] != 1)
    {
      goto LABEL_38;
    }
    v12 = [v5 textContentType];
    if (v12 == @"password" || [v5 autocorrectionType] != 1) {
      goto LABEL_37;
    }
    char v15 = [v5 isSecureTextEntry];

    if (v15) {
      goto LABEL_38;
    }
LABEL_42:
    int64_t v19 = 1;
    goto LABEL_39;
  }
  if (@"password" == v6) {
    goto LABEL_28;
  }
  if (@"one-time-code" == v6)
  {
    v20 = [v5 textContentType];
    char v21 = [v20 isEqualToString:v7];

    if (v21) {
      goto LABEL_36;
    }
    if ([v5 keyboardType] && (objc_msgSend(v5, "isSecureTextEntry") & 1) == 0)
    {
      unsigned int v23 = [v5 keyboardType];
      int64_t v19 = 1;
      if (v23 <= 0xB && ((1 << v23) & 0x930) != 0 || v23 == 127) {
        goto LABEL_39;
      }
      if ([v5 keyboardType] != 1) {
        goto LABEL_38;
      }
    }
    goto LABEL_42;
  }
  if (@"new-password" != v6)
  {
    if (@"email" != v6 && @"tel" != v6 && @"street-address" != v6) {
      goto LABEL_38;
    }
    v10 = [v5 textContentType];
    char v11 = [v10 isEqualToString:v7];

    if ((v11 & 1) == 0)
    {
      if (([v5 isSecureTextEntry] & 1) == 0)
      {
        v12 = [v5 textContentType];
        if (v12)
        {
LABEL_37:

          goto LABEL_38;
        }
        if ([v5 autocorrectionType] != 1 || (_UIIsPrivateMainBundle() & 1) != 0)
        {
          v12 = 0;
          goto LABEL_37;
        }
        goto LABEL_31;
      }
LABEL_38:
      int64_t v19 = 0;
      goto LABEL_39;
    }
LABEL_36:
    int64_t v19 = 2;
    goto LABEL_39;
  }
LABEL_28:
  uint64_t v16 = [v5 textContentType];
  char v17 = [v16 isEqualToString:v7];

  if (v17) {
    goto LABEL_36;
  }
  if (![v5 isSecureTextEntry]
    || ([v5 displaySecureTextUsingPlainText] & 1) != 0)
  {
    goto LABEL_38;
  }
LABEL_31:
  unsigned int v18 = [v5 keyboardType];
  int64_t v19 = 1;
  if (v18 <= 0xB && ((1 << v18) & 0x930) != 0 || v18 == 127) {
    goto LABEL_38;
  }
LABEL_39:

  return v19;
}

- (id)textContentTypeForInputDelegate:(id)a3
{
  id v4 = a3;
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x3032000000;
  char v15 = __Block_byref_object_copy__143;
  uint64_t v16 = __Block_byref_object_dispose__143;
  id v17 = 0;
  id v5 = [(UIKBAutofillController *)self autofillGroup];
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __58__UIKBAutofillController_textContentTypeForInputDelegate___block_invoke;
  v9[3] = &unk_1E52E3650;
  id v6 = v4;
  id v10 = v6;
  char v11 = &v12;
  [v5 enumerateKeysAndObjectsUsingBlock:v9];

  id v7 = (id)v13[5];
  _Block_object_dispose(&v12, 8);

  return v7;
}

void __58__UIKBAutofillController_textContentTypeForInputDelegate___block_invoke(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v8 = a2;
  if (*(void *)(a1 + 32) == a3)
  {
    id v9 = v8;
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
    id v8 = v9;
    *a4 = 1;
  }
}

- (id)autofillContextForInputDelegate:(id)a3
{
  id v4 = a3;
  targetDetectionController = self->_targetDetectionController;
  if (targetDetectionController)
  {
    id v6 = [(AFUITargetDetectionController_Staging *)targetDetectionController autoFillContextForResponder:v4];
  }
  else if (objc_opt_respondsToSelector())
  {
    id v7 = [v4 _autofillContext];
    id v6 = (void *)[v7 copy];
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

- (void)updateAutofillContextForInputDelegate:(id)a3
{
  id v4 = a3;
  targetDetectionController = self->_targetDetectionController;
  id v10 = v4;
  if (targetDetectionController)
  {
    [(AFUITargetDetectionController_Staging *)targetDetectionController updateAutofillContextForResponder:v4];
  }
  else
  {
    id v6 = [(UIKBAutofillController *)self autofillContextForInputDelegate:v4];
    id v7 = [(UIKBAutofillController *)self autofillGroup];
    id v8 = v7;
    if (v6)
    {
      [v7 setObject:v6 forKey:@"UIAutofillContextKey"];

      id v9 = [(UIKBAutofillController *)self autofillGroup];
      [v9 setObject:v10 forKey:@"UIAutofillContextDelegateKey"];
    }
    else
    {
      [v7 removeObjectForKey:@"UIAutofillContextDelegateKey"];

      id v9 = [(UIKBAutofillController *)self autofillGroup];
      [v9 removeObjectForKey:@"UIAutofillContextKey"];
    }
  }
}

- (int64_t)needAutofillCandidate:(id)a3 delegateAsResponder:(id)a4 keyboardState:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  char v11 = [(UIKBAutofillController *)self autofillContextForInputDelegate:v8];
  [v10 setAutofillContext:v11];
  uint64_t v12 = [v11 objectForKey:@"_automaticPasswordKeyboard"];
  uint64_t v13 = [v12 BOOLValue];

  uint64_t v14 = [v11 objectForKey:@"_acceptsLoginCredentials"];
  unsigned int v15 = [v14 BOOLValue];

  if ([(UIKBAutofillController *)self _prohibitAutofill:v8 needASPKeyboard:v13]) {
    goto LABEL_2;
  }
  if (v11)
  {
    id v17 = [(UIKBAutofillController *)self autofillGroup];
    [v17 setObject:v11 forKey:@"UIAutofillContextKey"];

    if ((v13 | v15) == 1)
    {
      unsigned int v18 = [(UIKBAutofillController *)self autofillGroup];
      [v18 removeObjectForKey:@"username"];

      int64_t v19 = [(UIKBAutofillController *)self autofillGroup];
      [v19 removeObjectForKey:@"password"];

      v20 = [(UIKBAutofillController *)self autofillGroup];
      [v20 removeObjectForKey:@"one-time-code"];

      id v21 = v8;
      if ((objc_msgSend(v21, "__isKindOfUIResponder") & 1) == 0)
      {
        id v22 = v9;

        id v21 = v22;
      }
      unsigned int v23 = [(UIKBAutofillController *)self autofillGroup];
      [v23 setObject:v21 forKey:@"UIAutofillContextDelegateKey"];

      if (v13)
      {
        int64_t v16 = 2;
        goto LABEL_15;
      }
      int64_t v16 = v15;
LABEL_14:
      if (!v16) {
        goto LABEL_18;
      }
      goto LABEL_15;
    }
  }
  targetDetectionController = self->_targetDetectionController;
  if (!targetDetectionController)
  {
    int64_t v16 = [(UIKBAutofillController *)self _needAutofillCandidate:v8 delegateAsResponder:v9];
    goto LABEL_14;
  }
  int64_t v16 = [(AFUITargetDetectionController_Staging *)targetDetectionController autoFillModeForResponder:v8];
  if ((unint64_t)(v16 - 1) >= 0xA)
  {
LABEL_2:
    int64_t v16 = 0;
    goto LABEL_18;
  }
LABEL_15:
  uint64_t v25 = [(UIKBAutofillController *)self autofillContextForInputDelegate:v8];

  [v10 setAutofillContext:v25];
  v26 = [v10 documentIdentifier];

  if (v26)
  {
    v27 = [(UIKBAutofillController *)self autofillGroup];
    v28 = [v10 documentIdentifier];
    [v27 setObject:v28 forKey:@"UIAutofillUUIDKey"];
  }
  char v11 = (void *)v25;
LABEL_18:

  return v16;
}

- (BOOL)_prohibitAutofill:(id)a3 needASPKeyboard:(BOOL)a4
{
  BOOL v4 = a4;
  id v5 = a3;
  id v6 = +[UIKeyboard keyboardBundleIdentifier];
  if (([v6 isEqualToString:@"com.apple.purplebuddy"] & 1) != 0
    || ([v6 isEqualToString:@"com.apple.PassbookUIService"] & 1) != 0)
  {
    int v19 = 1;
  }
  else
  {
    int v19 = [v6 isEqualToString:@"com.apple.Spotlight"];
  }
  int v7 = [(id)UIApp _isSpringBoard];
  char IsPasswordManagerExtension = _UIApplicationIsPasswordManagerExtension();
  int v9 = [v6 isEqualToString:@"com.apple.SafariViewService"];
  if (([v6 isEqualToString:@"com.apple.mobilesafari"] & 1) != 0
    || ([v6 isEqualToString:@"com.apple.DataActivation"] & 1) != 0)
  {
    int v10 = 1;
  }
  else
  {
    int v10 = [v6 isEqualToString:@"com.apple.WebSheet"];
  }
  char v11 = +[UIKeyboardPreferencesController sharedPreferencesController];
  uint64_t v12 = [v11 preferencesActions];
  int v13 = [v12 isPasswordAutoFillAllowed];

  if (v13)
  {
    if (v4 && ((v9 | v10) & 1) != 0)
    {
      char v14 = 0;
    }
    else
    {
      objc_opt_class();
      char isKindOfClass = objc_opt_isKindOfClass();
      char v16 = [v5 conformsToProtocol:&unk_1ED700D60];
      if ((v16 & 1) == 0 && (isKindOfClass & 1) == 0) {
        char v16 = [v5 _conformsToProtocolBETextInput];
      }
      if (v19 | v7) {
        char v17 = 1;
      }
      else {
        char v17 = IsPasswordManagerExtension;
      }
      if ((v17 | v9)) {
        char v14 = 1;
      }
      else {
        char v14 = v10 & v16;
      }
    }
  }
  else
  {
    char v14 = 1;
  }

  return v14;
}

- (id)signupKeywordList
{
  if (qword_1EB261F08 != -1) {
    dispatch_once(&qword_1EB261F08, &__block_literal_global_395);
  }
  v2 = (void *)qword_1EB261F00;
  return v2;
}

void __43__UIKBAutofillController_signupKeywordList__block_invoke()
{
  v0 = (void *)qword_1EB261F00;
  qword_1EB261F00 = (uint64_t)&unk_1ED3F0AD8;
}

- (id)loginKeywordList
{
  if (qword_1EB261F18 != -1) {
    dispatch_once(&qword_1EB261F18, &__block_literal_global_236);
  }
  v2 = (void *)qword_1EB261F10;
  return v2;
}

void __42__UIKBAutofillController_loginKeywordList__block_invoke()
{
  v0 = (void *)qword_1EB261F10;
  qword_1EB261F10 = (uint64_t)&unk_1ED3F0AF0;
}

- (id)accessibilitySignupKeywordList
{
  if (qword_1EB261F28 != -1) {
    dispatch_once(&qword_1EB261F28, &__block_literal_global_253_0);
  }
  v2 = (void *)qword_1EB261F20;
  return v2;
}

void __56__UIKBAutofillController_accessibilitySignupKeywordList__block_invoke()
{
  v0 = (void *)qword_1EB261F20;
  qword_1EB261F20 = (uint64_t)&unk_1ED3F0B08;
}

- (id)accessibilityLoginKeywordList
{
  if (qword_1EB261F38 != -1) {
    dispatch_once(&qword_1EB261F38, &__block_literal_global_258_2);
  }
  v2 = (void *)qword_1EB261F30;
  return v2;
}

void __55__UIKBAutofillController_accessibilityLoginKeywordList__block_invoke()
{
  v0 = (void *)qword_1EB261F30;
  qword_1EB261F30 = (uint64_t)&unk_1ED3F0B20;
}

- (id)contactAutoFillKeywordsForKey:(id)a3 value:(id)a4 localizedKeywords:(id)a5
{
  id v7 = a4;
  id v8 = a3;
  int v9 = [a5 componentsSeparatedByString:@"|"];
  int v10 = _UIKitBundle();
  char v11 = [v10 _preferredEnglishLocalizationBundle];

  uint64_t v12 = [v11 localizedStringForKey:v8 value:v7 table:@"Localizable"];

  int v13 = [v12 componentsSeparatedByString:@"|"];

  char v14 = (void *)[objc_alloc(MEMORY[0x1E4F1CA80]) initWithArray:v9];
  [v14 addObjectsFromArray:v13];
  unsigned int v15 = (void *)[v14 copy];

  return v15;
}

- (id)searchKeywordSet
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __42__UIKBAutofillController_searchKeywordSet__block_invoke;
  block[3] = &unk_1E52D9F70;
  block[4] = self;
  if (qword_1EB261F48 != -1) {
    dispatch_once(&qword_1EB261F48, block);
  }
  return (id)qword_1EB261F40;
}

void __42__UIKBAutofillController_searchKeywordSet__block_invoke(uint64_t a1)
{
  v1 = *(void **)(a1 + 32);
  _UINSLocalizedStringWithDefaultValue(@"SEARCH_FIELD_SEARCH_TERMS", @"search|query");
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v2 = [v1 contactAutoFillKeywordsForKey:@"SEARCH_FIELD_SEARCH_TERMS" value:@"search|query" localizedKeywords:v4];
  v3 = (void *)qword_1EB261F40;
  qword_1EB261F40 = v2;
}

- (id)addressKeywordSet
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __43__UIKBAutofillController_addressKeywordSet__block_invoke;
  block[3] = &unk_1E52D9F70;
  block[4] = self;
  if (qword_1EB261F58 != -1) {
    dispatch_once(&qword_1EB261F58, block);
  }
  return (id)qword_1EB261F50;
}

void __43__UIKBAutofillController_addressKeywordSet__block_invoke(uint64_t a1)
{
  v1 = *(void **)(a1 + 32);
  _UINSLocalizedStringWithDefaultValue(@"Address_FIELD_SEARCH_TERMS", @"address|where|destination|location");
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v2 = [v1 contactAutoFillKeywordsForKey:@"Address_FIELD_SEARCH_TERMS" value:@"address|where|destination|location" localizedKeywords:v4];
  v3 = (void *)qword_1EB261F50;
  qword_1EB261F50 = v2;
}

- (id)phoneKeywordSet
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __41__UIKBAutofillController_phoneKeywordSet__block_invoke;
  block[3] = &unk_1E52D9F70;
  block[4] = self;
  if (qword_1EB261F68 != -1) {
    dispatch_once(&qword_1EB261F68, block);
  }
  return (id)qword_1EB261F60;
}

void __41__UIKBAutofillController_phoneKeywordSet__block_invoke(uint64_t a1)
{
  v1 = *(void **)(a1 + 32);
  _UINSLocalizedStringWithDefaultValue(@"PHONE_FIELD_SEARCH_TERMS", @"phone|mobile|telephone");
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v2 = [v1 contactAutoFillKeywordsForKey:@"PHONE_FIELD_SEARCH_TERMS" value:@"phone|mobile|telephone" localizedKeywords:v4];
  v3 = (void *)qword_1EB261F60;
  qword_1EB261F60 = v2;
}

- (id)emailKeywordSet
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __41__UIKBAutofillController_emailKeywordSet__block_invoke;
  block[3] = &unk_1E52D9F70;
  block[4] = self;
  if (qword_1EB261F78 != -1) {
    dispatch_once(&qword_1EB261F78, block);
  }
  return (id)qword_1EB261F70;
}

void __41__UIKBAutofillController_emailKeywordSet__block_invoke(uint64_t a1)
{
  v1 = *(void **)(a1 + 32);
  _UINSLocalizedStringWithDefaultValue(@"EMAIL_FIELD_SEARCH_TERMS", @"email|e-mail");
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v2 = [v1 contactAutoFillKeywordsForKey:@"EMAIL_FIELD_SEARCH_TERMS" value:@"email|e-mail" localizedKeywords:v4];
  v3 = (void *)qword_1EB261F70;
  qword_1EB261F70 = v2;
}

- (id)processLocalizedString:(id)a3
{
  id v3 = a3;
  id v4 = [MEMORY[0x1E4F1CA48] array];
  if (v3)
  {
    id v5 = [MEMORY[0x1E4F28B50] mainBundle];
    id v17 = 0;
    id v18 = 0;
    [v5 _searchForLocalizedString:v3 foundKey:&v18 foundTable:&v17];
    id v6 = v18;
    id v7 = v17;

    if (!v6) {
      goto LABEL_5;
    }
    if (!v7) {
      goto LABEL_5;
    }
    id v8 = [MEMORY[0x1E4F28B50] mainBundle];
    int v9 = [v8 _preferredEnglishLocalizationBundle];

    id v10 = [v9 localizedStringForKey:v6 value:v3 table:v7];

    if (!v10) {
LABEL_5:
    }
      id v10 = v3;
    uint64_t v11 = [v10 length];
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = __49__UIKBAutofillController_processLocalizedString___block_invoke;
    v15[3] = &unk_1E52FB708;
    id v12 = v4;
    id v16 = v12;
    objc_msgSend(v10, "enumerateSubstringsInRange:options:usingBlock:", 0, v11, 3, v15);
    int v13 = [v10 lowercaseString];
    [v12 addObject:v13];
  }
  return v4;
}

void __49__UIKBAutofillController_processLocalizedString___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [a2 lowercaseString];
  [v2 addObject:v3];
}

- (id)textSignalsForResponder:(id)a3
{
  id v4 = a3;
  id v5 = [MEMORY[0x1E4F1CA80] set];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v6 = [v4 _viewControllerForAncestor];
    if (objc_opt_respondsToSelector())
    {
      id v7 = [v6 performSelector:sel_textField];
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v8 = [v7 placeholder];
        int v9 = [(UIKBAutofillController *)self processLocalizedString:v8];
        [v5 addObjectsFromArray:v9];
      }
    }
  }
  id v10 = [v4 accessibilityHint];
  uint64_t v11 = [(UIKBAutofillController *)self processLocalizedString:v10];
  [v5 addObjectsFromArray:v11];

  id v12 = [v4 accessibilityLabel];
  int v13 = [(UIKBAutofillController *)self processLocalizedString:v12];
  [v5 addObjectsFromArray:v13];

  if (objc_opt_respondsToSelector())
  {
    char v14 = [v4 performSelector:sel_placeholder];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      unsigned int v15 = [(UIKBAutofillController *)self processLocalizedString:v14];
      [v5 addObjectsFromArray:v15];
    }
  }
  id v16 = (void *)[v5 copy];

  return v16;
}

- (int64_t)containsIndicationInText:(id)a3 withAccessibilityHints:(BOOL)a4
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = v6;
  if (v6 && [v6 length])
  {
    if (a4) {
      [(UIKBAutofillController *)self accessibilityLoginKeywordList];
    }
    else {
      [(UIKBAutofillController *)self loginKeywordList];
    }
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    id v9 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v10 = [v9 countByEnumeratingWithState:&v24 objects:v29 count:16];
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = *(void *)v25;
      int64_t v8 = 1;
      while (2)
      {
        for (uint64_t i = 0; i != v11; ++i)
        {
          if (*(void *)v25 != v12) {
            objc_enumerationMutation(v9);
          }
          if ([v7 localizedCaseInsensitiveContainsString:*(void *)(*((void *)&v24 + 1) + 8 * i)])
          {
            id v14 = v9;
            goto LABEL_29;
          }
        }
        uint64_t v11 = [v9 countByEnumeratingWithState:&v24 objects:v29 count:16];
        if (v11) {
          continue;
        }
        break;
      }
    }

    if (a4) {
      [(UIKBAutofillController *)self accessibilitySignupKeywordList];
    }
    else {
      [(UIKBAutofillController *)self signupKeywordList];
    }
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    id v14 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v15 = [v14 countByEnumeratingWithState:&v20 objects:v28 count:16];
    if (v15)
    {
      uint64_t v16 = v15;
      uint64_t v17 = *(void *)v21;
      int64_t v8 = 2;
LABEL_21:
      uint64_t v18 = 0;
      while (1)
      {
        if (*(void *)v21 != v17) {
          objc_enumerationMutation(v14);
        }
        if (objc_msgSend(v7, "localizedCaseInsensitiveContainsString:", *(void *)(*((void *)&v20 + 1) + 8 * v18), (void)v20))break; {
        if (v16 == ++v18)
        }
        {
          uint64_t v16 = [v14 countByEnumeratingWithState:&v20 objects:v28 count:16];
          if (v16) {
            goto LABEL_21;
          }
          goto LABEL_27;
        }
      }
    }
    else
    {
LABEL_27:
      int64_t v8 = 0;
    }

LABEL_29:
  }
  else
  {
    int64_t v8 = 0;
  }

  return v8;
}

- (int64_t)signUpSignalFromButton:(id)a3
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = objc_msgSend(v4, "titleForState:", objc_msgSend(v4, "state"));
  if (!v5)
  {
    id v6 = [v4 titleLabel];
    id v5 = [v6 text];
  }
  int64_t v7 = [(UIKBAutofillController *)self containsIndicationInText:v5 withAccessibilityHints:0];
  if (!v7)
  {
    [v4 allTargets];
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    id v8 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v21 = [v8 countByEnumeratingWithState:&v27 objects:v32 count:16];
    if (v21)
    {
      uint64_t v9 = *(void *)v28;
      uint64_t v20 = *(void *)v28;
      do
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          if (*(void *)v28 != v9) {
            objc_enumerationMutation(v8);
          }
          uint64_t v11 = [v4 actionsForTarget:*(void *)(*((void *)&v27 + 1) + 8 * i) forControlEvent:64];
          long long v23 = 0u;
          long long v24 = 0u;
          long long v25 = 0u;
          long long v26 = 0u;
          id v12 = v11;
          uint64_t v13 = [v12 countByEnumeratingWithState:&v23 objects:v31 count:16];
          if (v13)
          {
            uint64_t v14 = v13;
            uint64_t v15 = *(void *)v24;
            while (2)
            {
              for (uint64_t j = 0; j != v14; ++j)
              {
                if (*(void *)v24 != v15) {
                  objc_enumerationMutation(v12);
                }
                int64_t v17 = [(UIKBAutofillController *)self containsIndicationInText:*(void *)(*((void *)&v23 + 1) + 8 * j) withAccessibilityHints:0];
                if (v17)
                {
                  int64_t v7 = v17;

                  goto LABEL_23;
                }
              }
              uint64_t v14 = [v12 countByEnumeratingWithState:&v23 objects:v31 count:16];
              if (v14) {
                continue;
              }
              break;
            }
          }

          uint64_t v9 = v20;
        }
        uint64_t v21 = [v8 countByEnumeratingWithState:&v27 objects:v32 count:16];
      }
      while (v21);
    }

    if ([v5 length])
    {
      uint64_t v18 = [MEMORY[0x1E4F28B50] mainBundle];
      id v22 = 0;
      [v18 _searchForLocalizedString:v5 foundKey:&v22 foundTable:0];
      id v8 = v22;

      if (v8) {
        int64_t v7 = [(UIKBAutofillController *)self containsIndicationInText:v8 withAccessibilityHints:0];
      }
      else {
        int64_t v7 = 0;
      }
LABEL_23:
    }
    else
    {
      int64_t v7 = 0;
    }
  }

  return v7;
}

- (int64_t)signUpSignalFromViewControllerHierarchy:(id)a3
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (objc_class *)objc_opt_class();
  id v6 = NSStringFromClass(v5);
  int64_t v7 = [(UIKBAutofillController *)self containsIndicationInText:v6 withAccessibilityHints:0];

  if (!v7)
  {
    [v4 childViewControllers];
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    id v8 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v9 = [v8 countByEnumeratingWithState:&v18 objects:v22 count:16];
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = *(void *)v19;
      do
      {
        uint64_t v12 = 0;
        do
        {
          if (*(void *)v19 != v11) {
            objc_enumerationMutation(v8);
          }
          uint64_t v13 = *(_DWORD **)(*((void *)&v18 + 1) + 8 * v12);
          if ((objc_msgSend(v13, "isBeingPresented", (void)v18) & 1) != 0
            || ([v13 isMovingToParentViewController] & 1) != 0
            || v13 && ((v13[94] >> 1) & 3u) - 1 <= 1)
          {
            uint64_t v14 = (objc_class *)objc_opt_class();
            uint64_t v15 = NSStringFromClass(v14);
            int64_t v7 = [(UIKBAutofillController *)self containsIndicationInText:v15 withAccessibilityHints:0];

            if (v7) {
              goto LABEL_18;
            }
          }
          else
          {
            int64_t v7 = [(UIKBAutofillController *)self signUpSignalFromViewControllerHierarchy:v13];
          }
          ++v12;
        }
        while (v10 != v12);
        uint64_t v16 = [v8 countByEnumeratingWithState:&v18 objects:v22 count:16];
        uint64_t v10 = v16;
      }
      while (v16);
    }
    else
    {
      int64_t v7 = 0;
    }
LABEL_18:
  }
  return v7;
}

- (int64_t)signUpSignalFromNavBarItem:(id)a3
{
  id v4 = a3;
  id v5 = [v4 navigationBar];
  id v6 = [v5 topItem];
  int64_t v7 = [v6 rightBarButtonItem];

  uint64_t v8 = [v7 customView];
  if (!v8) {
    goto LABEL_19;
  }
  uint64_t v9 = (void *)v8;
  uint64_t v10 = [v7 customView];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) == 0
    || ([v7 customView],
        uint64_t v12 = objc_claimAutoreleasedReturnValue(),
        [v12 titleForState:0],
        uint64_t v13 = objc_claimAutoreleasedReturnValue(),
        v12,
        !v13))
  {
LABEL_19:
    uint64_t v13 = [v7 title];

    if (!v13) {
      goto LABEL_13;
    }
    uint64_t v13 = [v7 title];
    if (!v13) {
      goto LABEL_13;
    }
  }
  if (([v4 isNavigationBarHidden] & 1) == 0)
  {
    if ([v13 length])
    {
      int64_t v14 = [(UIKBAutofillController *)self containsIndicationInText:v13 withAccessibilityHints:0];
      if (v14)
      {
        int64_t v15 = v14;
        goto LABEL_16;
      }
    }
  }
  if (![v13 length])
  {
LABEL_13:
    int64_t v15 = 0;
    goto LABEL_16;
  }
  uint64_t v16 = [MEMORY[0x1E4F28B50] mainBundle];
  id v19 = 0;
  [v16 _searchForLocalizedString:v13 foundKey:&v19 foundTable:0];
  id v17 = v19;

  if (v17) {
    int64_t v15 = [(UIKBAutofillController *)self containsIndicationInText:v17 withAccessibilityHints:0];
  }
  else {
    int64_t v15 = 0;
  }

LABEL_16:
  return v15;
}

- (int64_t)contactAutofillModeWithAutofillGroup:(id)a3 responders:(id)a4
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id v6 = [v5 objectForKey:@"email"];

  if (v6)
  {
    int64_t v7 = 5;
  }
  else
  {
    uint64_t v8 = [v5 objectForKey:@"tel"];

    if (v8)
    {
      int64_t v7 = 6;
    }
    else
    {
      uint64_t v9 = [v5 objectForKey:@"street-address"];

      if (v9)
      {
        int64_t v7 = 7;
      }
      else
      {
        uint64_t v10 = [v5 objectForKey:@"UIAutofillContactHeuristicsKey"];

        if (v10)
        {
          uint64_t v11 = [v5 objectForKey:@"UIAutofillContactHeuristicsKey"];
          uint64_t v12 = +[UITextInputTraits traitsByAdoptingTraits:v11 lightweight:1];
          uint64_t v13 = [(UIKBAutofillController *)self textSignalsForResponder:v11];
          int64_t v14 = [(UIKBAutofillController *)self emailKeywordSet];
          int v15 = _UIKBTextSignalsFoundInKeywordsList(v13, v14);

          if (v15)
          {
            [v12 keyboardType];
            int64_t v7 = 5;
          }
          else
          {
            v34 = v13;
            uint64_t v33 = self;
            long long v38 = 0u;
            long long v39 = 0u;
            long long v36 = 0u;
            long long v37 = 0u;
            id v16 = v13;
            uint64_t v17 = [v16 countByEnumeratingWithState:&v36 objects:v40 count:16];
            v35 = v11;
            if (v17)
            {
              uint64_t v18 = v17;
              char v19 = 0;
              uint64_t v20 = *(void *)v37;
              do
              {
                uint64_t v21 = 0;
                do
                {
                  if (*(void *)v37 != v20) {
                    objc_enumerationMutation(v16);
                  }
                  id v22 = *(void **)(*((void *)&v36 + 1) + 8 * v21);
                  if (qword_1EB261F98 != -1) {
                    dispatch_once(&qword_1EB261F98, &__block_literal_global_845);
                  }
                  id v23 = (id)qword_1EB261F90;
                  uint64_t v24 = objc_msgSend(v23, "numberOfMatchesInString:options:range:", v22, 0, 0, objc_msgSend(v22, "length"));

                  v19 |= v24 != 0;
                  ++v21;
                }
                while (v18 != v21);
                uint64_t v18 = [v16 countByEnumeratingWithState:&v36 objects:v40 count:16];
              }
              while (v18);
            }
            else
            {
              char v19 = 0;
            }

            int64_t v7 = 5;
            uint64_t v11 = v35;
            if ([v12 keyboardType] == 7)
            {
              uint64_t v13 = v34;
            }
            else
            {
              uint64_t v13 = v34;
              if ((v19 & 1) == 0)
              {
                long long v25 = [(UIKBAutofillController *)v33 searchKeywordSet];
                BOOL v26 = (_UIKBTextSignalsFoundInKeywordsList(v16, v25) & 1) == 0
                   && [v12 returnKeyType] != 6;

                long long v27 = [(UIKBAutofillController *)v33 addressKeywordSet];
                int v28 = _UIKBTextSignalsFoundInKeywordsList(v16, v27);

                if (qword_1EB261FA0 != -1) {
                  dispatch_once(&qword_1EB261FA0, &__block_literal_global_851_1);
                }
                if (_MergedGlobals_1165) {
                  int v29 = v26;
                }
                else {
                  int v29 = 1;
                }
                if (v29 == 1 && (!v28 || [v12 keyboardType] == 10))
                {
                  long long v30 = [(UIKBAutofillController *)v33 phoneKeywordSet];
                  int v31 = _UIKBTextSignalsFoundInKeywordsList(v16, v30);

                  if (v31 && [v12 keyboardType] != 3) {
                    int64_t v7 = 6;
                  }
                  else {
                    int64_t v7 = 0;
                  }
                }
                else
                {
                  int64_t v7 = 7;
                }
              }
            }
          }
        }
        else
        {
          int64_t v7 = 0;
        }
      }
    }
  }

  return v7;
}

- (BOOL)signupHintForUsername:(id)a3 password:(id)a4 responder:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v11 = v8;
  }
  else {
    id v11 = 0;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v12 = v9;
  }
  else {
    id v12 = 0;
  }
  uint64_t v13 = [v11 accessibilityHint];
  int64_t v14 = [(UIKBAutofillController *)self containsIndicationInText:v13 withAccessibilityHints:1];

  if (v14) {
    goto LABEL_13;
  }
  int v15 = [v11 accessibilityLabel];
  int64_t v14 = [(UIKBAutofillController *)self containsIndicationInText:v15 withAccessibilityHints:1];

  if (v14) {
    goto LABEL_13;
  }
  id v16 = [v11 accessibilityIdentifier];
  int64_t v14 = [(UIKBAutofillController *)self containsIndicationInText:v16 withAccessibilityHints:1];

  if (v14) {
    goto LABEL_13;
  }
  uint64_t v17 = [v12 accessibilityHint];
  int64_t v14 = [(UIKBAutofillController *)self containsIndicationInText:v17 withAccessibilityHints:1];

  if (v14) {
    goto LABEL_13;
  }
  uint64_t v18 = [v12 accessibilityLabel];
  int64_t v14 = [(UIKBAutofillController *)self containsIndicationInText:v18 withAccessibilityHints:1];

  if (v14
    || ([v12 accessibilityIdentifier],
        char v19 = objc_claimAutoreleasedReturnValue(),
        int64_t v14 = [(UIKBAutofillController *)self containsIndicationInText:v19 withAccessibilityHints:1], v19, v14))
  {
LABEL_13:
    uint64_t v48 = 0;
    v49 = &v48;
    uint64_t v50 = 0x2020000000;
    uint64_t v51 = 0;
  }
  else
  {
    if ([v8 isFirstResponder]
      && (objc_opt_class(), isKindOfClass = objc_opt_isKindOfClass(), id v22 = v8, (isKindOfClass & 1) != 0)
      || [v9 isFirstResponder]
      && (objc_opt_class(), char v23 = objc_opt_isKindOfClass(), v22 = v9, (v23 & 1) != 0))
    {
      uint64_t v24 = [v22 _viewControllerForAncestor];
      int64_t v14 = [(UIKBAutofillController *)self signUpSignalFromViewControllerHierarchy:v24];
    }
    else
    {
      int64_t v14 = 0;
      uint64_t v24 = 0;
    }
    long long v25 = [v24 parentViewController];
    objc_opt_class();
    char v26 = objc_opt_isKindOfClass();

    if (v26)
    {
      long long v27 = [v24 parentViewController];
      int64_t v28 = [(UIKBAutofillController *)self signUpSignalFromNavBarItem:v27];
    }
    else
    {
      int64_t v28 = 0;
    }
    objc_opt_class();
    char v29 = objc_opt_isKindOfClass();
    BOOL v31 = v28 == v14 && v28 != 0;
    char v32 = v29 | v31;
    if (!v14)
    {
      uint64_t v33 = +[UIWindow _applicationKeyWindow];
      [v33 rootViewController];
      v34 = char v43 = v32;
      v35 = [v34 presentedViewController];

      char v32 = v43;
      int64_t v14 = [(UIKBAutofillController *)self signUpSignalFromViewControllerHierarchy:v35];
    }
    uint64_t v48 = 0;
    v49 = &v48;
    uint64_t v50 = 0x2020000000;
    uint64_t v51 = 0;
    if ((v32 & 1) == 0 || !v14)
    {
      long long v36 = [(UIKBAutofillController *)self autofillGroup];
      long long v37 = [v36 allValues];

      long long v38 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:3];
      v45[0] = MEMORY[0x1E4F143A8];
      v45[1] = 3221225472;
      v45[2] = __67__UIKBAutofillController_signupHintForUsername_password_responder___block_invoke;
      v45[3] = &unk_1E52FEC88;
      id v39 = v37;
      id v46 = v39;
      id v40 = v38;
      id v47 = v40;
      [v10 enumerateObjectsWithOptions:2 usingBlock:v45];
      unint64_t v41 = [v40 count];
      v44[0] = MEMORY[0x1E4F143A8];
      v44[1] = 3221225472;
      v44[2] = __67__UIKBAutofillController_signupHintForUsername_password_responder___block_invoke_2;
      v44[3] = &unk_1E52FECB0;
      v44[4] = self;
      v44[5] = &v48;
      [v40 enumerateObjectsUsingBlock:v44];

      uint64_t v42 = v49[3];
      if (v14)
      {
        if (v42 && v14 != v42 && v41 < 3) {
          int64_t v14 = v49[3];
        }
      }
      else
      {
        int64_t v14 = v49[3];
      }
    }
  }
  _Block_object_dispose(&v48, 8);

  return v14 == 2;
}

void __67__UIKBAutofillController_signupHintForUsername_password_responder___block_invoke(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v6 = a2;
  if (objc_msgSend(*(id *)(a1 + 32), "containsObject:")) {
    *a4 = 1;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    [*(id *)(a1 + 40) insertObject:v6 atIndex:0];
  }
}

uint64_t __67__UIKBAutofillController_signupHintForUsername_password_responder___block_invoke_2(uint64_t result, uint64_t a2, unint64_t a3, unsigned char *a4)
{
  if (a3 > 2 || (uint64_t v4 = result, *(void *)(*(void *)(*(void *)(result + 40) + 8) + 24)))
  {
    *a4 = 1;
  }
  else
  {
    int64_t result = [*(id *)(result + 32) signUpSignalFromButton:a2];
    *(void *)(*(void *)(*(void *)(v4 + 40) + 8) + 24) = result;
  }
  return result;
}

- (int64_t)_needAutofillCandidate:(id)a3 delegateAsResponder:(id)a4
{
  uint64_t v156 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id v139 = a4;
  if (objc_msgSend(v5, "__isKindOfUIResponder")) {
    int v6 = [v5 conformsToProtocol:&unk_1ED42EE38];
  }
  else {
    int v6 = 0;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    int v7 = [v5 conformsToProtocol:&unk_1ED3FCF40];
  }
  else {
    int v7 = 0;
  }
  if (v6) {
    id v8 = v5;
  }
  else {
    id v8 = 0;
  }
  v136 = v5;
  if ((v6 | v7) == 1)
  {
    [(UIKBAutofillController *)self clearAutofillGroup];
    id v138 = v5;
    id v134 = v8;
    uint64_t v151 = 0;
    v152 = &v151;
    uint64_t v153 = 0x2020000000;
    uint64_t v154 = 0x7FFFFFFFFFFFFFFFLL;
    id v9 = [MEMORY[0x1E4F1CA48] array];
    [v134 _gatherKeyResponders:v9 indexOfSelf:v152 + 3 visibilityTest:&__block_literal_global_574_0 passingTest:&__block_literal_global_576 subviewsTest:&__block_literal_global_711_0];
    v137 = v9;
    if ((unint64_t)[v9 count] >= 3)
    {
      v141 = [MEMORY[0x1E4F1CA48] array];
      long long v149 = 0u;
      long long v150 = 0u;
      long long v147 = 0u;
      long long v148 = 0u;
      id v10 = v9;
      uint64_t v11 = [v10 countByEnumeratingWithState:&v147 objects:v155 count:16];
      if (v11)
      {
        uint64_t v12 = *(void *)v148;
        do
        {
          for (uint64_t i = 0; i != v11; ++i)
          {
            if (*(void *)v148 != v12) {
              objc_enumerationMutation(v10);
            }
            int64_t v14 = *(void **)(*((void *)&v147 + 1) + 8 * i);
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              id v15 = v14;
              [v15 frame];
              if (!CGRectIsEmpty(v157))
              {
                [v15 bounds];
                objc_msgSend(v15, "convertRect:toView:", 0);
                double v17 = v16;
                double v19 = v18;
                double v21 = v20;
                double v23 = v22;
                uint64_t v24 = [v15 window];
                long long v25 = [v15 window];
                char v26 = [v25 windowScene];
                long long v27 = [v26 coordinateSpace];
                objc_msgSend(v24, "convertRect:toCoordinateSpace:", v27, v17, v19, v21, v23);
                CGFloat v29 = v28;
                CGFloat v31 = v30;
                CGFloat v33 = v32;
                CGFloat v35 = v34;

                long long v36 = [v15 window];
                long long v37 = [v36 windowScene];
                long long v38 = [v37 coordinateSpace];
                [v38 bounds];
                v161.origin.CGFloat x = v39;
                v161.origin.CGFloat y = v40;
                v161.size.CGFloat width = v41;
                v161.size.CGFloat height = v42;
                v158.origin.CGFloat x = v29;
                v158.origin.CGFloat y = v31;
                v158.size.CGFloat width = v33;
                v158.size.CGFloat height = v35;
                CGRect v159 = CGRectIntersection(v158, v161);
                CGFloat x = v159.origin.x;
                CGFloat y = v159.origin.y;
                CGFloat width = v159.size.width;
                CGFloat height = v159.size.height;

                v160.origin.CGFloat x = x;
                v160.origin.CGFloat y = y;
                v160.size.CGFloat width = width;
                v160.size.CGFloat height = height;
                if (CGRectIsEmpty(v160)) {
                  [v141 addObject:v15];
                }
              }
            }
          }
          uint64_t v11 = [v10 countByEnumeratingWithState:&v147 objects:v155 count:16];
        }
        while (v11);
      }

      uint64_t v47 = [v10 count];
      if ((unint64_t)(v47 - [v141 count]) >= 4) {
        [v10 removeObjectsInArray:v141];
      }

      id v9 = v137;
    }
    v152[3] = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v48 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v9, "count"));
    v143[0] = MEMORY[0x1E4F143A8];
    v143[1] = 3221225472;
    v143[2] = __69__UIKBAutofillController__needAutofillCandidate_delegateAsResponder___block_invoke_4;
    v143[3] = &unk_1E52FECF8;
    id v121 = v134;
    id v144 = v121;
    v146 = &v151;
    id v142 = v48;
    id v145 = v142;
    [v9 enumerateObjectsUsingBlock:v143];
    v49 = [(UIKBAutofillController *)self autofillGroup];
    [v49 setObject:v142 forKey:@"UIAutofillPossibleRespondersKey"];

    if (v152[3] == 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v50 = 0;
      v133 = 0;
      uint64_t v51 = 0;
      uint64_t v52 = 0;
      v53 = v137;
    }
    else
    {
      v53 = v137;
      if ([v142 count])
      {
        uint64_t v56 = [v142 count];
        unint64_t v57 = v152[3];
        if (v57)
        {
          uint64_t v50 = [v142 objectAtIndex:v57 - 1];
          uint64_t v58 = 0;
          unint64_t v57 = v152[3];
          if (v57 >= 2 && v56 >= 3)
          {
            uint64_t v58 = [v142 objectAtIndex:v57 - 2];
            unint64_t v57 = v152[3];
          }
        }
        else
        {
          uint64_t v50 = 0;
          uint64_t v58 = 0;
        }
        uint64_t v51 = 0;
        if (v56 >= 1 && v57 < v56 - 1)
        {
          uint64_t v51 = [v142 objectAtIndex:v57 + 1];
          unint64_t v57 = v152[3];
        }
        uint64_t v52 = 0;
        v133 = (void *)v58;
        if (v56 >= 2 && v57 < v56 - 2)
        {
          uint64_t v52 = [v142 objectAtIndex:v57 + 2];
        }
      }
      else
      {
        uint64_t v50 = 0;
        v133 = 0;
        uint64_t v51 = 0;
        uint64_t v52 = 0;
      }
    }
    v59 = +[UITextInputTraits traitsByAdoptingTraits:v138 lightweight:1];
    if (v50)
    {
      v127 = +[UITextInputTraits traitsByAdoptingTraits:v50 lightweight:1];
    }
    else
    {
      v127 = 0;
    }
    if (v133)
    {
      v125 = +[UITextInputTraits traitsByAdoptingTraits:v133 lightweight:1];
      if (v51) {
        goto LABEL_51;
      }
    }
    else
    {
      v125 = 0;
      if (v51)
      {
LABEL_51:
        v129 = +[UITextInputTraits traitsByAdoptingTraits:v51 lightweight:1];
        if (v52)
        {
LABEL_52:
          v123 = +[UITextInputTraits traitsByAdoptingTraits:v52 lightweight:1];
LABEL_56:
          int64_t v135 = -[UIKBAutofillController doTraits:matchTextContentType:](self, "doTraits:matchTextContentType:", v59);
          int64_t v126 = -[UIKBAutofillController doTraits:matchTextContentType:](self, "doTraits:matchTextContentType:", v59);
          int64_t v60 = -[UIKBAutofillController doTraits:matchTextContentType:](self, "doTraits:matchTextContentType:", v59);
          int64_t v61 = -[UIKBAutofillController doTraits:matchTextContentType:](self, "doTraits:matchTextContentType:", v59);
          int64_t v128 = -[UIKBAutofillController doTraits:matchTextContentType:](self, "doTraits:matchTextContentType:", v59);
          int64_t v120 = -[UIKBAutofillController doTraits:matchTextContentType:](self, "doTraits:matchTextContentType:", v59);
          int64_t v124 = -[UIKBAutofillController doTraits:matchTextContentType:](self, "doTraits:matchTextContentType:", v59);
          BOOL v132 = 0;
          v130 = (void *)v51;
          v131 = (void *)v50;
          v122 = (void *)v52;
          if (v61 && v61 > v135 && v61 > v126)
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              BOOL v132 = 0;
            }
            else
            {
              BOOL v132 = v61 == 2;
              v62 = [(UIKBAutofillController *)self autofillGroup];
              [v62 setObject:v138 forKey:@"one-time-code"];

              v53 = v137;
            }
          }
          int v63 = dyld_program_sdk_at_least();
          if (v132) {
            goto LABEL_63;
          }
          int v66 = v63;
          if (v135)
          {
            v67 = [(UIKBAutofillController *)self autofillGroup];
            [v67 setObject:v138 forKey:@"username"];

            id v65 = v59;
            v53 = v137;
            if ([(UIKBAutofillController *)self doTraits:v129 matchTextContentType:@"new-password"] == 2)
            {
              v68 = [(UIKBAutofillController *)self autofillGroup];
              [v68 setObject:v51 forKey:@"new-password"];

LABEL_77:
              BOOL v64 = 0;
LABEL_78:
              int v119 = 1;
LABEL_79:
              v53 = v137;
              goto LABEL_80;
            }
            if ([(UIKBAutofillController *)self doTraits:v129 matchTextContentType:@"password"])
            {
              v72 = [(UIKBAutofillController *)self autofillGroup];
              [v72 setObject:v51 forKey:@"password"];

              v53 = v137;
              uint64_t v73 = v52;
              if ([(UIKBAutofillController *)self doTraits:v123 matchTextContentType:@"new-password"])
              {
LABEL_76:
                v74 = [(UIKBAutofillController *)self autofillGroup];
                [v74 setObject:v73 forKey:@"new-password"];

                goto LABEL_77;
              }
              if (v135 == 2) {
                int v100 = v66;
              }
              else {
                int v100 = 0;
              }
              if (v100 == 1)
              {
                int64_t v101 = [(UIKBAutofillController *)self doTraits:v129 matchTextContentType:@"password"];
                int v119 = 0;
LABEL_169:
                BOOL v64 = v101 == 2;
                goto LABEL_80;
              }
LABEL_156:
              BOOL v64 = 0;
              int v119 = 0;
              goto LABEL_80;
            }
            if ([(UIKBAutofillController *)self doTraits:v127 matchTextContentType:@"password"]&& !v125)
            {
              v99 = [(UIKBAutofillController *)self autofillGroup];
              [v99 setObject:v50 forKey:@"password"];

              BOOL v64 = 0;
              int v119 = 0;
              goto LABEL_79;
            }
            BOOL v64 = 0;
            BOOL v104 = v127 != 0;
LABEL_155:
            int v119 = v104;
            goto LABEL_80;
          }
          if (v50 && v60 == 2)
          {
            if ([(UIKBAutofillController *)self doTraits:v127 matchTextContentType:@"new-password"]|| [(UIKBAutofillController *)self doTraits:v127 matchTextContentType:@"password"])
            {
              if ([(UIKBAutofillController *)self doTraits:v125 matchTextContentType:@"username"])
              {
                v69 = [(UIKBAutofillController *)self autofillGroup];
                [v69 setObject:v133 forKey:@"username"];

                id v65 = v125;
                v70 = [(UIKBAutofillController *)self autofillGroup];
                [v70 setObject:v50 forKey:@"password"];

                v71 = [(UIKBAutofillController *)self autofillGroup];
                [v71 setObject:v138 forKey:@"new-password"];

                goto LABEL_77;
              }
            }
            else
            {
              if (![(UIKBAutofillController *)self doTraits:v129 matchTextContentType:@"new-password"]&& ![(UIKBAutofillController *)self doTraits:v129 matchTextContentType:@"password"])
              {
                v116 = [(UIKBAutofillController *)self autofillGroup];
                [v116 setObject:v50 forKey:@"username"];

                id v65 = v127;
                v117 = [(UIKBAutofillController *)self autofillGroup];
                [v117 setObject:v138 forKey:@"new-password"];

                goto LABEL_77;
              }
              if ([(UIKBAutofillController *)self doTraits:v127 matchTextContentType:@"username"])
              {
                v113 = [(UIKBAutofillController *)self autofillGroup];
                [v113 setObject:v50 forKey:@"username"];

                id v65 = v127;
                v114 = [(UIKBAutofillController *)self autofillGroup];
                [v114 setObject:v138 forKey:@"password"];

                v115 = [(UIKBAutofillController *)self autofillGroup];
                [v115 setObject:v51 forKey:@"new-password"];

                goto LABEL_77;
              }
            }
            goto LABEL_63;
          }
          if (!v126)
          {
            if (([v59 isSecureTextEntry] & 1) == 0
              && [(UIKBAutofillController *)self doTraits:v129 matchTextContentType:@"password"])
            {
              v102 = [(UIKBAutofillController *)self autofillGroup];
              [v102 setObject:v138 forKey:@"username"];

              id v65 = v59;
              v103 = [(UIKBAutofillController *)self autofillGroup];
              [v103 setObject:v51 forKey:@"password"];

              v53 = v137;
              uint64_t v73 = v52;
              if ([(UIKBAutofillController *)self doTraits:v123 matchTextContentType:@"new-password"])
              {
                goto LABEL_76;
              }
              goto LABEL_156;
            }
LABEL_63:
            BOOL v64 = 0;
            int v119 = 0;
LABEL_64:
            id v65 = 0;
LABEL_80:
            if (v128 || v124 || v120)
            {
              if (v128 == 2)
              {
                v75 = [(UIKBAutofillController *)self autofillGroup];
                [v75 setObject:v138 forKey:@"email"];
              }
              else if (v124 == 2)
              {
                v75 = [(UIKBAutofillController *)self autofillGroup];
                [v75 setObject:v138 forKey:@"tel"];
              }
              else
              {
                v75 = [(UIKBAutofillController *)self autofillGroup];
                if (v120 == 2) {
                  [v75 setObject:v138 forKey:@"street-address"];
                }
                else {
                  [v75 setObject:v138 forKey:@"UIAutofillContactHeuristicsKey"];
                }
              }

              v53 = v137;
            }
            v78 = [(UIKBAutofillController *)self autofillGroup];
            int64_t v79 = [(UIKBAutofillController *)self contactAutofillModeWithAutofillGroup:v78 responders:v53];

            v80 = [(UIKBAutofillController *)self autofillGroup];
            v81 = [v80 objectForKey:@"one-time-code"];

            v82 = [(UIKBAutofillController *)self autofillGroup];
            id v83 = [v82 objectForKey:@"username"];

            v84 = [(UIKBAutofillController *)self autofillGroup];
            uint64_t v85 = [v84 objectForKey:@"password"];

            if (v65)
            {
              if ((unsigned int v86 = [v65 keyboardType], v86 <= 0xB) && ((1 << v86) & 0x930) != 0 || v86 == 127)
              {
                if (v83 == v138)
                {
                  v87 = [(UIKBAutofillController *)self autofillGroup];
                  [v87 removeObjectForKey:@"username"];

                  v88 = [(UIKBAutofillController *)self autofillGroup];
                  [v88 removeObjectForKey:@"password"];

                  id v83 = 0;
                  uint64_t v85 = 0;
                }
                BOOL v64 = 1;
              }
            }
            v89 = [(UIKBAutofillController *)self autofillGroup];
            uint64_t v90 = [v89 objectForKey:@"new-password"];

            if (v83) {
              BOOL v91 = (v85 | v90) != 0;
            }
            else {
              BOOL v91 = 0;
            }
            if (v83) {
              BOOL v92 = v135 == 2;
            }
            else {
              BOOL v92 = 0;
            }
            char v93 = v92;
            if (v91 || (v93 & 1) != 0 || v85 && (unint64_t)(v126 - 1) <= 1)
            {
              BOOL v94 = !v64
                 && [(UIKBAutofillController *)self signupHintForUsername:v83 password:v85 responder:v137];
              int v95 = v119;
              if (v90) {
                int v95 = 1;
              }
              if ((v91 & (v95 | v94)) == 1)
              {
                if (self->_didOptOutOfAutofillSignup)
                {
                  char v96 = 0;
                  int64_t v55 = 4;
                }
                else
                {
                  char v96 = 0;
                  if (v83 == v139 || v83 == v138) {
                    int64_t v55 = 3;
                  }
                  else {
                    int64_t v55 = 2;
                  }
                }
              }
              else
              {
                char v96 = 0;
                int64_t v55 = 1;
              }
            }
            else if (v132)
            {
              char v96 = 0;
              int64_t v55 = 8;
            }
            else
            {
              char v96 = 0;
              if (v79) {
                int64_t v55 = v79;
              }
              else {
                int64_t v55 = 8;
              }
              if (!v79 && !v81)
              {
                [(UIKBAutofillController *)self clearAutofillGroup];
                char v96 = 1;
              }
            }

            _Block_object_dispose(&v151, 8);
            if (v96) {
              goto LABEL_140;
            }
            goto LABEL_141;
          }
          if (v51
            && ![(UIKBAutofillController *)self doTraits:v129 matchTextContentType:@"new-password"])
          {
            if (v50
              && [(UIKBAutofillController *)self doTraits:v127 matchTextContentType:@"password"])
            {
              v105 = [(UIKBAutofillController *)self autofillGroup];
              [v105 setObject:v138 forKey:@"new-password"];

              v106 = [(UIKBAutofillController *)self autofillGroup];
              [v106 setObject:v50 forKey:@"password"];

              if (!v133)
              {
                BOOL v64 = 0;
                id v65 = 0;
                goto LABEL_78;
              }
              v53 = v137;
              if ([(UIKBAutofillController *)self doTraits:v125 matchTextContentType:@"username"])
              {
                v107 = [(UIKBAutofillController *)self autofillGroup];
                [v107 setObject:v133 forKey:@"username"];

                id v65 = v125;
                goto LABEL_77;
              }
              BOOL v64 = 0;
              id v65 = 0;
              BOOL v104 = 1;
              goto LABEL_155;
            }
          }
          else
          {
            v76 = [(UIKBAutofillController *)self autofillGroup];
            [v76 setObject:v138 forKey:@"password"];

            if (v51)
            {
              v77 = [(UIKBAutofillController *)self autofillGroup];
              [v77 setObject:v51 forKey:@"new-password"];

              int v119 = 1;
              goto LABEL_163;
            }
          }
          int v119 = 0;
LABEL_163:
          v108 = [(UIKBAutofillController *)self autofillGroup];
          [v108 setObject:v138 forKey:@"password"];

          v53 = v137;
          id v65 = (id)v50;
          if ([(UIKBAutofillController *)self doTraits:v127 matchTextContentType:@"username"])
          {
            v109 = [(UIKBAutofillController *)self autofillGroup];
            [v109 setObject:v50 forKey:@"username"];

            id v65 = v127;
            if (v126 == 2) {
              int v110 = v66;
            }
            else {
              int v110 = 0;
            }
            if (v110 == 1)
            {
              int64_t v101 = [(UIKBAutofillController *)self doTraits:v65 matchTextContentType:@"username"];
              v53 = v137;
              goto LABEL_169;
            }
          }
          else
          {
            if ([(UIKBAutofillController *)self doTraits:v129 matchTextContentType:@"username"])
            {
              v111 = [(UIKBAutofillController *)self autofillGroup];
              [v111 setObject:v51 forKey:@"username"];

              v112 = v129;
            }
            else
            {
              if (!v50)
              {
                BOOL v64 = 0;
                goto LABEL_80;
              }
              if ([(UIKBAutofillController *)self doTraits:v127 matchTextContentType:@"password"])
              {
                BOOL v64 = 0;
                goto LABEL_64;
              }
              v118 = [(UIKBAutofillController *)self autofillGroup];
              [v118 setObject:v50 forKey:@"username"];

              v112 = v127;
            }
            id v65 = v112;
          }
          BOOL v64 = 0;
          goto LABEL_79;
        }
LABEL_55:
        v123 = 0;
        goto LABEL_56;
      }
    }
    v129 = 0;
    if (v52) {
      goto LABEL_52;
    }
    goto LABEL_55;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0
    || (objc_opt_respondsToSelector() & 1) == 0 && (objc_opt_respondsToSelector() & 1) == 0)
  {
LABEL_140:
    int64_t v55 = 0;
    goto LABEL_141;
  }
  v54 = [(UIKBAutofillController *)self autofillGroup];
  [v54 setObject:v139 forKey:@"one-time-code"];

  int64_t v55 = 8;
LABEL_141:

  return v55;
}

BOOL __69__UIKBAutofillController__needAutofillCandidate_delegateAsResponder___block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v3 = v2;
    BOOL v5 = 0;
    if (([v3 isHidden] & 1) == 0)
    {
      [v3 alpha];
      if (v4 != 0.0) {
        BOOL v5 = 1;
      }
    }
  }
  else
  {
    BOOL v5 = 1;
  }

  return v5;
}

BOOL __69__UIKBAutofillController__needAutofillCandidate_delegateAsResponder___block_invoke_2(uint64_t a1, void *a2)
{
  id v2 = a2;
  if ([v2 _requiresKeyboardWhenFirstResponder]
    && (([v2 conformsToProtocol:&unk_1ED42F658] & 1) != 0 || (objc_opt_respondsToSelector() & 1) != 0))
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0 || ([v2 frame], !CGRectIsEmpty(v7)))
    {
      BOOL v3 = 1;
      goto LABEL_13;
    }
LABEL_10:
    BOOL v3 = 0;
    goto LABEL_13;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    goto LABEL_10;
  }
  id v4 = v2;
  BOOL v5 = [v4 allTargets];
  if ([v5 count])
  {
    [v4 frame];
    BOOL v3 = !CGRectIsEmpty(v8);
  }
  else
  {
    BOOL v3 = 0;
  }

LABEL_13:
  return v3;
}

BOOL __69__UIKBAutofillController__needAutofillCandidate_delegateAsResponder___block_invoke_3(uint64_t a1, void *a2)
{
  id v2 = a2;
  if ([v2 _requiresKeyboardWhenFirstResponder])
  {
    BOOL v3 = 0;
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v4 = [v2 allTargets];
      BOOL v3 = [v4 count] == 0;
    }
    else
    {
      BOOL v3 = 1;
    }
  }

  return v3;
}

void __69__UIKBAutofillController__needAutofillCandidate_delegateAsResponder___block_invoke_4(uint64_t a1, void *a2)
{
  id v5 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    id v3 = v5;
    if (*(id *)(a1 + 32) == v5)
    {
      uint64_t v4 = [*(id *)(a1 + 40) count];
      id v3 = v5;
      *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v4;
    }
    [*(id *)(a1 + 40) addObject:v3];
  }
}

- (void)clearAutofillGroup
{
  targetDetectionController = self->_targetDetectionController;
  if (targetDetectionController)
  {
    [(AFUITargetDetectionController_Staging *)targetDetectionController clearAutoFillGroup];
  }
  else
  {
    uint64_t v4 = [(UIKBAutofillController *)self autofillGroup];
    [v4 removeAllObjects];

    self->_didOptOutOfAutofillSignup = 0;
  }
}

- (void)clearFallbackAutofillGroup
{
  self->_didOptOutOfAutofillSignup = 0;
}

- (BOOL)containsUsernamePasswordPairsInAutofillGroup:(id)a3
{
  id v4 = a3;
  targetDetectionController = self->_targetDetectionController;
  if (targetDetectionController)
  {
    char v6 = [(AFUITargetDetectionController_Staging *)targetDetectionController containsUsernamePasswordPairsInAutoFillGroup:v4];
  }
  else if (v4)
  {
    CGRect v7 = [v4 objectForKey:@"username"];
    if (v7)
    {
      CGRect v8 = [v4 objectForKey:@"password"];
      if (v8)
      {
        char v6 = 1;
      }
      else
      {
        id v9 = [v4 objectForKey:@"new-password"];
        char v6 = v9 != 0;
      }
    }
    else
    {
      char v6 = 0;
    }
  }
  else
  {
    char v6 = 0;
  }

  return v6;
}

- (BOOL)preferFallbackAutofillGroup
{
  targetDetectionController = self->_targetDetectionController;
  if (targetDetectionController)
  {
    LOBYTE(v4) = [(AFUITargetDetectionController_Staging *)targetDetectionController shouldPreferFallbackAutoFillGroup];
  }
  else
  {
    uint64_t v4 = [(UIKBAutofillController *)self fallbackAutofillGroup];
    if (v4)
    {
      id v5 = (void *)v4;
      char v6 = [(UIKBAutofillController *)self fallbackAutofillGroup];
      uint64_t v7 = [v6 count];

      if (v7)
      {
        CGRect v8 = [(UIKBAutofillController *)self autofillGroup];
        char v9 = [(UIKBAutofillController *)self containsUsernamePasswordPairsInAutofillGroup:v8];

        id v10 = [(UIKBAutofillController *)self fallbackAutofillGroup];
        BOOL v11 = [(UIKBAutofillController *)self containsUsernamePasswordPairsInAutofillGroup:v10];

        LOBYTE(v4) = v11 & ~v9;
      }
      else
      {
        LOBYTE(v4) = 0;
      }
    }
  }
  return v4;
}

- (void)handleAutofillCredentialSaveIfNeeded:(id)a3 fromASP:(BOOL)a4
{
  BOOL v4 = a4;
  id v6 = a3;
  targetDetectionController = self->_targetDetectionController;
  if (!targetDetectionController)
  {
    if ([(UIKBAutofillController *)self preferFallbackAutofillGroup]) {
      [(UIKBAutofillController *)self fallbackAutofillGroup];
    }
    else {
    CGRect v8 = [(UIKBAutofillController *)self autofillGroup];
    }
    char v9 = v8;
    if (!v8)
    {
LABEL_26:
      [(UIKBAutofillController *)self clearFallbackAutofillGroup];

      goto LABEL_27;
    }
    id v10 = [v8 objectForKey:@"username"];
    objc_opt_class();
    if (objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass()))
    {
      BOOL v11 = [v10 text];
    }
    else
    {
      BOOL v11 = 0;
    }
    uint64_t v12 = [v9 objectForKey:@"new-password"];
    if (!v12)
    {
      uint64_t v12 = [v9 objectForKey:@"password"];
    }
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v24 = [v12 text];
      if (!v11) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v24 = 0;
      if (!v11) {
        goto LABEL_23;
      }
    }
    uint64_t v13 = [MEMORY[0x1E4F28B88] whitespaceCharacterSet];
    double v23 = v11;
    id v14 = [v11 stringByTrimmingCharactersInSet:v13];
    if (![v14 length] || !v24)
    {
LABEL_22:

      BOOL v11 = v23;
      goto LABEL_23;
    }
    [MEMORY[0x1E4F28B88] whitespaceCharacterSet];
    id v15 = v22 = v10;
    double v16 = [v24 stringByTrimmingCharactersInSet:v15];
    uint64_t v17 = [v16 length];

    id v10 = v22;
    BOOL v11 = v23;
    if (v17)
    {
      double v18 = [v9 objectForKeyedSubscript:@"UIAutofillContextKey"];
      uint64_t v13 = [v18 objectForKeyedSubscript:@"_WebViewURL"];

      id v14 = objc_alloc_init((Class)get_SFAppPasswordSavingViewControllerClass());
      if (objc_opt_respondsToSelector())
      {
        v25[0] = MEMORY[0x1E4F143A8];
        v25[1] = 3221225472;
        v25[2] = __71__UIKBAutofillController_handleAutofillCredentialSaveIfNeeded_fromASP___block_invoke_2;
        v25[3] = &unk_1E52DC3A0;
        id v26 = v14;
        [v26 credentialsSubmittedForWebsiteURL:v13 user:v23 password:v24 passwordIsAutoGenerated:v4 completionHandler:v25];
      }
      goto LABEL_22;
    }
LABEL_23:
    double v19 = [(UIKBAutofillController *)self autofillGroup];
    double v20 = [v19 allKeysForObject:v6];
    uint64_t v21 = [v20 count];

    if (v21) {
      [(UIKBAutofillController *)self clearAutofillGroup];
    }

    goto LABEL_26;
  }
  [(AFUITargetDetectionController_Staging *)targetDetectionController saveAutoFillCredentialIfNeeded:v6 passwordIsAutoGenerated:v4 block:&__block_literal_global_716_0];
LABEL_27:
}

void __71__UIKBAutofillController_handleAutofillCredentialSaveIfNeeded_fromASP___block_invoke(uint64_t a1, void *a2)
{
}

void __71__UIKBAutofillController_handleAutofillCredentialSaveIfNeeded_fromASP___block_invoke_2(uint64_t a1, int a2)
{
  if (a2) {
    UIKeyboardSafariPresentCredentialPickerVC(*(void **)(a1 + 32));
  }
}

- (void)handleWebviewCredentialsSaveForResponder:(id)a3 WebsiteURL:(id)a4 user:(id)a5 password:(id)a6 passwordIsAutoGenerated:(BOOL)a7
{
  BOOL v7 = a7;
  id v12 = a4;
  id v13 = a5;
  id v14 = a6;
  targetDetectionController = self->_targetDetectionController;
  if (targetDetectionController)
  {
    [(AFUITargetDetectionController_Staging *)targetDetectionController saveWebviewCredentialsForResponder:a3 WebsiteURL:v12 user:v13 password:v14 passwordIsAutoGenerated:v7 block:&__block_literal_global_725];
  }
  else
  {
    id v16 = objc_alloc_init((Class)get_SFAppPasswordSavingViewControllerClass());
    if (objc_opt_respondsToSelector())
    {
      v17[0] = MEMORY[0x1E4F143A8];
      v17[1] = 3221225472;
      v17[2] = __116__UIKBAutofillController_handleWebviewCredentialsSaveForResponder_WebsiteURL_user_password_passwordIsAutoGenerated___block_invoke_2;
      v17[3] = &unk_1E52DC3A0;
      id v18 = v16;
      [v18 credentialsSubmittedForWebsiteURL:v12 user:v13 password:v14 passwordIsAutoGenerated:v7 completionHandler:v17];
    }
  }
}

void __116__UIKBAutofillController_handleWebviewCredentialsSaveForResponder_WebsiteURL_user_password_passwordIsAutoGenerated___block_invoke(uint64_t a1, void *a2)
{
}

void __116__UIKBAutofillController_handleWebviewCredentialsSaveForResponder_WebsiteURL_user_password_passwordIsAutoGenerated___block_invoke_2(uint64_t a1, int a2)
{
  if (a2) {
    UIKeyboardSafariPresentCredentialPickerVC(*(void **)(a1 + 32));
  }
}

- (void)trackResponderForAutofillIfNeeded:(id)a3
{
  id v28 = a3;
  int64_t v4 = [(UIKBAutofillController *)self delegateNeedsAutofillMode];
  id v5 = v28;
  if (!v4)
  {
    id v6 = [(UIKBAutofillController *)self autofillGroup];
    BOOL v7 = [v6 objectForKey:@"password"];

    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 && v7)
    {
      id v8 = v7;
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        char v9 = v28;
      }
      else {
        char v9 = 0;
      }
      id v10 = v9;
      [v10 frame];
      objc_msgSend(v10, "convertRect:toView:", 0);
      double v12 = v11;
      double v14 = v13;
      double v16 = v15;
      double v18 = v17;

      [v8 frame];
      objc_msgSend(v8, "convertRect:toView:", 0);
      double v20 = v19;
      double v22 = v21;
      double v24 = v23;
      double v26 = v25;

      BOOL v27 = v14 + v18 * 0.5 > v22 + v26 * 0.5 || v12 + v16 * 0.5 > v20 + v24 * 0.5;
      [(UIKBAutofillController *)self setShouldSaveAutofill:v27];
    }

    id v5 = v28;
  }
}

- (BOOL)shouldLoadASPForResponder:(id)a3
{
  id v4 = a3;
  targetDetectionController = self->_targetDetectionController;
  if (targetDetectionController)
  {
    char v6 = [(AFUITargetDetectionController_Staging *)targetDetectionController shouldLoadASPForResponder:v4];
  }
  else
  {
    BOOL v7 = [(UIKBAutofillController *)self autofillGroup];
    id v8 = [v7 objectForKey:@"username"];

    char v9 = [(UIKBAutofillController *)self autofillGroup];
    id v10 = [v9 objectForKey:@"password"];
    if (v10 == v4)
    {
      BOOL v13 = 1;
    }
    else
    {
      double v11 = [(UIKBAutofillController *)self autofillGroup];
      id v12 = [v11 objectForKey:@"new-password"];
      BOOL v13 = v12 == v4;
    }
    if (v8) {
      char v6 = v13;
    }
    else {
      char v6 = 0;
    }
  }

  return v6;
}

- (void)didOptOutOfAutofillSignup
{
  if (self->_targetDetectionController) {
    [(AFUITargetDetectionController_Staging *)self->_targetDetectionController didOptOutOfAutoFillSignup];
  }
  else {
    self->_didOptOutOfAutofillSignup = 1;
  }
}

- (void)showASPInTextField:(id)a3 isRightToLeft:(BOOL)a4
{
  BOOL v4 = a4;
  v40[1] = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  targetDetectionController = self->_targetDetectionController;
  if (targetDetectionController)
  {
    [(AFUITargetDetectionController_Staging *)targetDetectionController showASPInTextField:v6 isRightToLeft:v4];
  }
  else
  {
    [v6 frame];
    double v9 = v8;
    double v11 = v10;
    double v13 = v12;
    double v15 = v14;
    double v16 = [v6 rightView];
    [v16 size];
    double v18 = v17;
    double v19 = [v6 leftView];
    [v19 size];
    double v21 = v9 + v20;
    double v22 = v13 - (v18 + v20);
    double v23 = v11 + 0.0;

    BOOL v24 = v4 || [v6 textAlignment] == 2;
    uint64_t v39 = *(void *)off_1E52D2040;
    double v25 = [v6 font];
    v40[0] = v25;
    double v26 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v40 forKeys:&v39 count:1];

    BOOL v27 = [v6 text];
    [v27 sizeWithAttributes:v26];
    double v29 = v28;

    double v30 = +[UIKBASPCoverView ASPCoverView:withFrame:isRightToLeft:withTextWidth:](UIKBASPCoverView, "ASPCoverView:withFrame:isRightToLeft:withTextWidth:", 1, v24, v21, v23, v22, v15, v29);
    [v6 frame];
    CGFloat v31 = +[UIKBASPCoverView ASPCoverView:withFrame:isRightToLeft:withTextWidth:](UIKBASPCoverView, "ASPCoverView:withFrame:isRightToLeft:withTextWidth:", 0, v24);
    double v32 = [(UIKBAutofillController *)self autofillGroup];
    CGFloat v33 = [v32 objectForKey:@"UIAutofillASPOptInKey"];
    char v34 = [v33 BOOLValue];

    if ((v34 & 1) == 0)
    {
      CGFloat v35 = [v6 backgroundColor];
      [(UIKBAutofillController *)self setTextFieldOrigColor:v35];

      long long v36 = [(UIKBAutofillController *)self autofillGroup];
      long long v37 = [NSNumber numberWithBool:1];
      [v36 setObject:v37 forKey:@"UIAutofillASPOptInKey"];
    }
    if (dyld_program_sdk_at_least()) {
      uint64_t v38 = 3;
    }
    else {
      uint64_t v38 = 1;
    }
    [v6 _setContentCoverViewMode:v38];
    [v6 _setContentCoverView:v30];
    [v6 _setBackgroundCoverViewMode:v38];
    [v6 _setBackgroundCoverView:v31];
  }
}

- (void)clearASPVisualEffectsInTextField:(id)a3
{
  targetDetectionController = self->_targetDetectionController;
  id v4 = a3;
  id v6 = v4;
  if (targetDetectionController)
  {
    [(AFUITargetDetectionController_Staging *)targetDetectionController clearASPVisualEffectsInTextField:v4];
  }
  else
  {
    [v4 _setContentCoverViewMode:0];
    [v6 _setContentCoverView:0];
    id v5 = [v6 _backgroundCoverView];
    [v5 removeFromSuperview];

    [v6 _setBackgroundCoverView:0];
  }
}

- (void)_clearASPInTextField:(id)a3
{
  id v5 = a3;
  id v4 = [(UIKBAutofillController *)self autofillGroup];
  [v4 removeObjectForKey:@"UIAutofillASPOptInKey"];

  [(UIKBAutofillController *)self removeTemporaryTextColorFromTextField:v5];
  [(UIKBAutofillController *)self clearASPVisualEffectsInTextField:v5];
  [v5 setText:&stru_1ED0E84C0];
}

- (void)clearASPInPasswordFields
{
  id v3 = [(UIKBAutofillController *)self autofillGroup];
  id v6 = [v3 objectForKey:@"password"];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    [(UIKBAutofillController *)self _clearASPInTextField:v6];
  }
  id v4 = [(UIKBAutofillController *)self autofillGroup];
  id v5 = [v4 objectForKey:@"new-password"];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    [(UIKBAutofillController *)self _clearASPInTextField:v5];
  }
}

- (void)optOutASPInTextField
{
  targetDetectionController = self->_targetDetectionController;
  if (targetDetectionController)
  {
    [(AFUITargetDetectionController_Staging *)targetDetectionController optOutASPInPasswordFields];
  }
  else
  {
    [(UIKBAutofillController *)self clearASPInPasswordFields];
    id v5 = [(UIKBAutofillController *)self autofillGroup];
    id v4 = [NSNumber numberWithBool:0];
    [v5 setObject:v4 forKey:@"UIAutofillASPOptInKey"];
  }
}

- (void)enumeratePasswordFieldsUsingBlock:(id)a3
{
  id v4 = (void (**)(void, void *))a3;
  targetDetectionController = self->_targetDetectionController;
  if (targetDetectionController)
  {
    double v10 = v4;
    [(AFUITargetDetectionController_Staging *)targetDetectionController enumeratePasswordFieldsUsingBlock:v4];
  }
  else
  {
    if (!v4) {
      goto LABEL_10;
    }
    double v10 = v4;
    id v6 = [(UIKBAutofillController *)self autofillGroup];
    BOOL v7 = [v6 objectForKey:@"password"];

    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      v10[2](v10, v7);
    }
    double v8 = [(UIKBAutofillController *)self autofillGroup];
    double v9 = [v8 objectForKey:@"new-password"];

    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      v10[2](v10, v9);
    }
  }
  id v4 = v10;
LABEL_10:
}

- (void)addTemporaryTextColorToTextField:(id)a3
{
  v12[2] = *MEMORY[0x1E4F143B8];
  targetDetectionController = self->_targetDetectionController;
  id v4 = a3;
  id v5 = v4;
  if (targetDetectionController)
  {
    [(AFUITargetDetectionController_Staging *)targetDetectionController addTemporaryTextColorToTextField:v4];
  }
  else
  {
    id v6 = [v4 textLayoutController];
    BOOL v7 = [v6 documentRange];
    v11[0] = *(void *)off_1E52D2048;
    double v8 = +[UIColor blackColor];
    v12[0] = v8;
    v11[1] = *(void *)off_1E52D1F58;
    double v9 = +[UIColor clearColor];
    v12[1] = v9;
    double v10 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v12 forKeys:v11 count:2];
    [v6 addRenderingAttributes:v10 forRange:v7];

    [v5 setNeedsDisplay];
    id v5 = v6;
  }
}

- (void)removeTemporaryTextColorFromTextField:(id)a3
{
  v10[2] = *MEMORY[0x1E4F143B8];
  targetDetectionController = self->_targetDetectionController;
  id v4 = a3;
  id v5 = v4;
  if (targetDetectionController)
  {
    [(AFUITargetDetectionController_Staging *)targetDetectionController removeTemporaryTextColorFromTextField:v4];
  }
  else
  {
    id v6 = [v4 textLayoutController];
    BOOL v7 = [v6 documentRange];
    uint64_t v8 = *(void *)off_1E52D1F58;
    v10[0] = *(void *)off_1E52D2048;
    v10[1] = v8;
    double v9 = [MEMORY[0x1E4F1C978] arrayWithObjects:v10 count:2];
    [v6 removeRenderingAttributes:v9 forRange:v7];

    [v5 setNeedsDisplay];
    id v5 = v6;
  }
}

- (UIColor)textFieldOrigColor
{
  return self->_textFieldOrigColor;
}

- (void)setTextFieldOrigColor:(id)a3
{
}

- (BOOL)shouldSaveAutofill
{
  return self->_shouldSaveAutofill;
}

- (void)setShouldSaveAutofill:(BOOL)a3
{
  self->_shouldSaveAutofill = a3;
}

- (void).cxx_destruct
{
  objc_storeStrong((id *)&self->_textFieldOrigColor, 0);
  objc_storeStrong((id *)&self->_fallbackAutofillGroup, 0);
  objc_storeStrong((id *)&self->_autofillGroup, 0);
  objc_storeStrong((id *)&self->_targetDetectionController, 0);
}

- (void)_setAutofillGroup:(id)a3
{
}

@end