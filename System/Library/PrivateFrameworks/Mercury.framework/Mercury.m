uint64_t XPCDictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1D769B6D4(a1, a2, a3, a4, a5, (uint64_t)sub_1D769A1E8, (void (*)(uint64_t *__return_ptr, uint64_t, void *, uint64_t, void, uint64_t, void))sub_1D76BFC1C);
}

{
  return sub_1D769B6D4(a1, a2, a3, a4, a5, (uint64_t)sub_1D76C8EB0, (void (*)(uint64_t *__return_ptr, uint64_t, void *, uint64_t, void, uint64_t, void))sub_1D76BFC1C);
}

{
  return sub_1D769B6D4(a1, a2, a3, a4, a5, (uint64_t)sub_1D76C8E90, (void (*)(uint64_t *__return_ptr, uint64_t, void *, uint64_t, void, uint64_t, void))sub_1D76BEEC0);
}

ValueMetadata *type metadata accessor for XPCDictionary()
{
  return &type metadata for XPCDictionary;
}

uint64_t XPCDictionary.withUnsafeUnderlyingDictionary<A>(_:)(uint64_t (*a1)(void))
{
  return a1(*v1);
}

uint64_t sub_1D7699DF8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1D7699E0C(a1, a2);
  }
  return a1;
}

uint64_t sub_1D7699E0C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t Error<>.init(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a4 - 8);
  MEMORY[0x1F4188788](a1);
  v12 = &v21[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (v13)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBA33F18);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1D76FA300;
    *(void *)(inited + 32) = sub_1D76F7FF4();
    *(void *)(inited + 40) = v15;
    *(void *)(inited + 48) = a2;
    *(void *)(inited + 56) = a3;
    uint64_t v16 = inited;
  }
  else
  {
    uint64_t v16 = MEMORY[0x1E4FBC860];
  }
  unint64_t v17 = sub_1D769A048(v16);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a4);
  unint64_t v18 = sub_1D769ACCC(v17);
  swift_bridgeObjectRelease();
  unint64_t v19 = sub_1D769C348(MEMORY[0x1E4FBC860]);
  Error<>.init(_:userInfo:defaultUserInfo:)((uint64_t)v12, v18, v19, a4, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(a1, a4);
}

xpc_object_t XPCDictionary.init()@<X0>(void *a1@<X8>)
{
  xpc_object_t result = xpc_dictionary_create(0, 0, 0);
  *a1 = result;
  a1[1] = 0xD000000000000019;
  a1[2] = 0x80000001D76FD660;
  return result;
}

unint64_t sub_1D769A048(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBA33EE8);
  v2 = (void *)sub_1D76F8604();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_1D769B2B0(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    v12 = (void *)(v2[7] + 16 * result);
    void *v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t destroy for XPCDictionary()
{
  swift_unknownObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s7Mercury13XPCDictionaryVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

xpc_object_t sub_1D769A1E8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1D769B918(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t XPCDictionary.subscript.setter(uint64_t a1, unint64_t a2)
{
  sub_1D769A250(a1, a2);

  return sub_1D7699DF8(a1, a2);
}

{
  uint64_t vars8;

  sub_1D769A250(a1, a2);

  return sub_1D7699DF8(a1, a2);
}

uint64_t sub_1D769A250(uint64_t a1, unint64_t a2)
{
  bytes[2] = *MEMORY[0x1E4F143C0];
  if (a2 >> 60 == 15)
  {
    xpc_object_t v2 = 0;
    return XPCDictionary.subscript.setter((uint64_t)v2);
  }
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v6 = (int)a1;
      uint64_t v7 = (a1 >> 32) - (int)a1;
      if (a1 >> 32 < (int)a1)
      {
        __break(1u);
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
      uint64_t v8 = sub_1D76F7AC4();
      if (!v8) {
        goto LABEL_9;
      }
      uint64_t v9 = sub_1D76F7AE4();
      if (__OFSUB__(v6, v9))
      {
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
      }
      v8 += v6 - v9;
LABEL_9:
      uint64_t v10 = sub_1D76F7AD4();
      if (v10 >= v7) {
        size_t v11 = v7;
      }
      else {
        size_t v11 = v10;
      }
      if (v8) {
        size_t v4 = v11;
      }
      else {
        size_t v4 = 0;
      }
      uint64_t v5 = (void *)v8;
LABEL_28:
      xpc_object_t v2 = xpc_data_create(v5, v4);
      return XPCDictionary.subscript.setter((uint64_t)v2);
    case 2uLL:
      uint64_t v12 = *(void *)(a1 + 16);
      uint64_t v13 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      BOOL v14 = (char *)sub_1D76F7AC4();
      if (!v14) {
        goto LABEL_19;
      }
      uint64_t v15 = sub_1D76F7AE4();
      if (__OFSUB__(v12, v15)) {
        goto LABEL_33;
      }
      v14 += v12 - v15;
LABEL_19:
      BOOL v16 = __OFSUB__(v13, v12);
      uint64_t v17 = v13 - v12;
      if (v16) {
        goto LABEL_31;
      }
      uint64_t v18 = sub_1D76F7AD4();
      if (v18 >= v17) {
        size_t v19 = v17;
      }
      else {
        size_t v19 = v18;
      }
      if (v14) {
        size_t v20 = v19;
      }
      else {
        size_t v20 = 0;
      }
      xpc_object_t v2 = xpc_data_create(v14, v20);
      swift_release();
      swift_release();
      return XPCDictionary.subscript.setter((uint64_t)v2);
    case 3uLL:
      memset(bytes, 0, 14);
      uint64_t v5 = bytes;
      size_t v4 = 0;
      goto LABEL_28;
    default:
      bytes[0] = a1;
      LOWORD(bytes[1]) = a2;
      BYTE2(bytes[1]) = BYTE2(a2);
      BYTE3(bytes[1]) = BYTE3(a2);
      unint64_t v3 = a2 >> 40;
      BYTE4(bytes[1]) = BYTE4(a2);
      size_t v4 = BYTE6(a2);
      BYTE5(bytes[1]) = v3;
      uint64_t v5 = bytes;
      goto LABEL_28;
  }
}

BOOL static _Error.~= infix(_:_:)()
{
  swift_getErrorValue();
  uint64_t v0 = sub_1D76F8CC4();
  uint64_t v2 = v1;
  if (v0 == sub_1D76F7A74() && v2 == v3)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_8;
  }
  char v5 = sub_1D76F89E4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  BOOL result = 0;
  if (v5)
  {
LABEL_8:
    uint64_t v7 = sub_1D76F7A94();
    swift_getErrorValue();
    return v7 == sub_1D76F8CB4();
  }
  return result;
}

{
  return static _Error.~= infix(_:_:)();
}

uint64_t Error<>.init(_:userInfo:defaultUserInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v19 = a2;
  sub_1D769A710(a3, (uint64_t)sub_1D769C2AC, 0, isUniquelyReferenced_nonNull_native, &v19);
  uint64_t v11 = v19;
  swift_bridgeObjectRelease();
  uint64_t v12 = sub_1D76F7A84();
  char v13 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v19 = v11;
  sub_1D769A710(v12, (uint64_t)sub_1D769C2AC, 0, v13, &v19);
  uint64_t v14 = v19;
  swift_bridgeObjectRelease();
  uint64_t v15 = sub_1D76F7A94();
  uint64_t v16 = sub_1D769B40C(v15, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 24))(v16, v14, a4, a5);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8);

  return v17(a1, a4);
}

uint64_t sub_1D769A710(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = -v7;
  uint64_t v36 = a1;
  uint64_t v37 = a1 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  uint64_t v38 = v8;
  uint64_t v39 = 0;
  uint64_t v40 = v11 & v9;
  uint64_t v41 = a2;
  uint64_t v42 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1D769AA20(&v34);
  uint64_t v12 = *((void *)&v34 + 1);
  if (!*((void *)&v34 + 1))
  {
LABEL_19:
    swift_release();
    swift_bridgeObjectRelease();
    sub_1D76B13F0();
    return swift_release();
  }
  while (1)
  {
    uint64_t v15 = v34;
    sub_1D769B2A0(&v35, v33);
    uint64_t v16 = *a5;
    unint64_t v18 = sub_1D769B2B0(v15, v12);
    uint64_t v19 = *(void *)(v16 + 16);
    BOOL v20 = (v17 & 1) == 0;
    uint64_t v21 = v19 + v20;
    if (__OFADD__(v19, v20)) {
      break;
    }
    char v22 = v17;
    if (*(void *)(v16 + 24) >= v21)
    {
      if (a4)
      {
        if (v17) {
          goto LABEL_6;
        }
      }
      else
      {
        sub_1D76F5E48();
        if (v22) {
          goto LABEL_6;
        }
      }
    }
    else
    {
      sub_1D76F4CD4(v21, a4 & 1);
      unint64_t v23 = sub_1D769B2B0(v15, v12);
      if ((v22 & 1) != (v24 & 1)) {
        goto LABEL_22;
      }
      unint64_t v18 = v23;
      if (v22)
      {
LABEL_6:
        uint64_t v13 = 32 * v18;
        sub_1D769A9C4(*(void *)(*a5 + 56) + v13, (uint64_t)v31);
        sub_1D769A9C4((uint64_t)v31, (uint64_t)v32);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v31);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v33);
        swift_bridgeObjectRelease();
        uint64_t v14 = (_OWORD *)(*(void *)(*a5 + 56) + v13);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v14);
        sub_1D769B2A0(v32, v14);
        goto LABEL_7;
      }
    }
    v25 = (void *)*a5;
    *(void *)(*a5 + 8 * (v18 >> 6) + 64) |= 1 << v18;
    v26 = (uint64_t *)(v25[6] + 16 * v18);
    uint64_t *v26 = v15;
    v26[1] = v12;
    sub_1D769B2A0(v33, (_OWORD *)(v25[7] + 32 * v18));
    uint64_t v27 = v25[2];
    BOOL v28 = __OFADD__(v27, 1);
    uint64_t v29 = v27 + 1;
    if (v28) {
      goto LABEL_21;
    }
    v25[2] = v29;
LABEL_7:
    sub_1D769AA20(&v34);
    uint64_t v12 = *((void *)&v34 + 1);
    a4 = 1;
    if (!*((void *)&v34 + 1)) {
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = sub_1D76F8C84();
  __break(1u);
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1Tm(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1D769A9C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1D769AA20@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    uint64_t v11 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v10);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    sub_1D769A9C4(*(void *)(v3 + 56) + 32 * v10, (uint64_t)v24);
    *(void *)&long long v23 = v13;
    *((void *)&v23 + 1) = v12;
    swift_bridgeObjectRetain();
    goto LABEL_23;
  }
  int64_t v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  int64_t v15 = (unint64_t)(v6 + 64) >> 6;
  if (v14 < v15)
  {
    unint64_t v16 = *(void *)(v4 + 8 * v14);
    if (v16)
    {
LABEL_7:
      uint64_t v9 = (v16 - 1) & v16;
      unint64_t v10 = __clz(__rbit64(v16)) + (v14 << 6);
      int64_t v7 = v14;
      goto LABEL_3;
    }
    int64_t v17 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v15)
    {
      unint64_t v16 = *(void *)(v4 + 8 * v17);
      if (v16)
      {
LABEL_10:
        int64_t v14 = v17;
        goto LABEL_7;
      }
      int64_t v7 = v5 + 2;
      if (v5 + 3 < v15)
      {
        unint64_t v16 = *(void *)(v4 + 8 * (v5 + 3));
        if (v16)
        {
          int64_t v14 = v5 + 3;
          goto LABEL_7;
        }
        int64_t v17 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v15)
        {
          unint64_t v16 = *(void *)(v4 + 8 * v17);
          if (v16) {
            goto LABEL_10;
          }
          int64_t v14 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v15)
          {
            unint64_t v16 = *(void *)(v4 + 8 * v14);
            if (v16) {
              goto LABEL_7;
            }
            int64_t v7 = v15 - 1;
            int64_t v18 = v5 + 6;
            while (v15 != v18)
            {
              unint64_t v16 = *(void *)(v4 + 8 * v18++);
              if (v16)
              {
                int64_t v14 = v18 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v9 = 0;
  memset(v24, 0, sizeof(v24));
  long long v23 = 0u;
LABEL_23:
  uint64_t *v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  uint64_t v19 = (void (*)(_OWORD *))v1[5];
  uint64_t result = sub_1D76B13F8((uint64_t)&v23, (uint64_t)v22, (uint64_t *)&unk_1EBA33E80);
  if (*((void *)&v22[0] + 1))
  {
    v21[0] = v22[0];
    v21[1] = v22[1];
    v21[2] = v22[2];
    v19(v21);
    return sub_1D769AC0C((uint64_t)v21, &qword_1EBA33E78);
  }
  else
  {
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

uint64_t sub_1D769AC0C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1D769AC68(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_1D769ACCC(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33EF8);
    uint64_t v2 = (void *)sub_1D76F8604();
  }
  else
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
  }
  uint64_t v32 = v1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(v1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v31 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = &v37;
  int64_t v7 = &v39;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t i = 0;
  uint64_t v10 = MEMORY[0x1E4FBC840] + 8;
  uint64_t v11 = MEMORY[0x1E4FBB1A0];
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v20 = i + 1;
  if (__OFADD__(i, 1)) {
    goto LABEL_35;
  }
  if (v20 >= v31) {
    goto LABEL_32;
  }
  unint64_t v21 = *(void *)(v32 + 8 * v20);
  int64_t v22 = i + 1;
  if (!v21)
  {
    int64_t v22 = i + 2;
    if (i + 2 >= v31) {
      goto LABEL_32;
    }
    unint64_t v21 = *(void *)(v32 + 8 * v22);
    if (!v21)
    {
      int64_t v22 = i + 3;
      if (i + 3 >= v31) {
        goto LABEL_32;
      }
      unint64_t v21 = *(void *)(v32 + 8 * v22);
      if (!v21)
      {
        int64_t v22 = i + 4;
        if (i + 4 >= v31) {
          goto LABEL_32;
        }
        unint64_t v21 = *(void *)(v32 + 8 * v22);
        if (!v21)
        {
          int64_t v23 = i + 5;
          if (i + 5 < v31)
          {
            unint64_t v21 = *(void *)(v32 + 8 * v23);
            if (v21)
            {
              int64_t v22 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              int64_t v22 = v23 + 1;
              if (__OFADD__(v23, 1)) {
                goto LABEL_36;
              }
              if (v22 >= v31) {
                break;
              }
              unint64_t v21 = *(void *)(v32 + 8 * v22);
              ++v23;
              if (v21) {
                goto LABEL_26;
              }
            }
          }
LABEL_32:
          sub_1D76B13F0();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  uint64_t v34 = (v21 - 1) & v21;
  unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
  for (i = v22; ; unint64_t v19 = __clz(__rbit64(v5)) | (i << 6))
  {
    char v24 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v19);
    uint64_t v35 = *v24;
    uint64_t v36 = v24[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_1D769B2A0(v6, v7);
    sub_1D769B2A0(v7, v40);
    sub_1D769B2A0(v40, &v38);
    unint64_t result = sub_1D769B2B0(v35, v36);
    unint64_t v25 = result;
    if (v26)
    {
      int64_t v33 = i;
      uint64_t v12 = v7;
      uint64_t v13 = v6;
      uint64_t v14 = v1;
      uint64_t v15 = v11;
      uint64_t v16 = v10;
      int64_t v17 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *int64_t v17 = v35;
      v17[1] = v36;
      uint64_t v10 = v16;
      uint64_t v11 = v15;
      uint64_t v1 = v14;
      uint64_t v6 = v13;
      int64_t v7 = v12;
      int64_t i = v33;
      int64_t v18 = (_OWORD *)(v2[7] + 32 * v25);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      unint64_t result = (unint64_t)sub_1D769B2A0(&v38, v18);
      unint64_t v5 = v34;
      if (!v34) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v27 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v27 = v35;
    v27[1] = v36;
    unint64_t result = (unint64_t)sub_1D769B2A0(&v38, (_OWORD *)(v2[7] + 32 * result));
    uint64_t v28 = v2[2];
    BOOL v29 = __OFADD__(v28, 1);
    uint64_t v30 = v28 + 1;
    if (v29) {
      goto LABEL_34;
    }
    v2[2] = v30;
    unint64_t v5 = v34;
    if (!v34) {
      goto LABEL_11;
    }
LABEL_10:
    uint64_t v34 = (v5 - 1) & v5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t static Error<>.networkingError.getter(uint64_t a1, uint64_t a2)
{
  return Error<>.init(_:_:)(4, 0xD00000000000001CLL, 0x80000001D76FF040, a1, a2);
}

uint64_t Error<>.init(_:_:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F28);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D76FA300;
  *(void *)(inited + 32) = sub_1D76F7FF4();
  *(void *)(inited + 40) = v11;
  *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
  *(void *)(inited + 48) = a2;
  *(void *)(inited + 56) = a3;
  unint64_t v12 = sub_1D769B168(inited);
  uint64_t v13 = sub_1D769B40C(v9, a4, a5);
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(a5 + 24))(v13, v12, a4, a5);
}

unint64_t sub_1D769B168(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33EF8);
  uint64_t v2 = sub_1D76F8604();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1D769AC68(v6, (uint64_t)&v15, &qword_1EBA33E90);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_1D769B2B0(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_1D769B2A0(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

_OWORD *sub_1D769B2A0(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t sub_1D769B2B0(uint64_t a1, uint64_t a2)
{
  sub_1D76F8D24();
  sub_1D76F8094();
  uint64_t v4 = sub_1D76F8D54();

  return sub_1D769B328(a1, a2, v4);
}

unint64_t sub_1D769B328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    char v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_1D76F89E4() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        BOOL v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_1D76F89E4() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_1D769B40C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = *(void *)(a2 - 8);
  uint64_t v7 = MEMORY[0x1F4188788](a1);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v7)
  {
    if (v5 == (int)v5) {
      return v5;
    }
    sub_1D76F82C4();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBA33F30);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_1D76FB290;
    uint64_t v23 = a2;
    swift_getMetatypeMetadata();
    uint64_t v11 = sub_1D76F8044();
    uint64_t v13 = v12;
    *(void *)(v10 + 56) = MEMORY[0x1E4FBB1A0];
    unint64_t v14 = sub_1D76B6EA0();
    *(void *)(v10 + 32) = v11;
    *(void *)(v10 + 40) = v13;
    uint64_t v15 = MEMORY[0x1E4FBB5C8];
    *(void *)(v10 + 96) = MEMORY[0x1E4FBB550];
    *(void *)(v10 + 104) = v15;
    *(void *)(v10 + 64) = v14;
    *(void *)(v10 + 72) = v5;
    sub_1D76BBA90(0, (unint64_t *)&qword_1EA83A920);
    uint64_t v16 = (void *)sub_1D76F8394();
  }
  else
  {
    sub_1D76F82C4();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBA33F30);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_1D76FA300;
    uint64_t v23 = a2;
    swift_getMetatypeMetadata();
    uint64_t v18 = sub_1D76F8044();
    uint64_t v20 = v19;
    *(void *)(v17 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v17 + 64) = sub_1D76B6EA0();
    *(void *)(v17 + 32) = v18;
    *(void *)(v17 + 40) = v20;
    sub_1D76BBA90(0, (unint64_t *)&qword_1EA83A920);
    uint64_t v16 = (void *)sub_1D76F8394();
  }
  sub_1D76F7D84();
  swift_bridgeObjectRelease();

  Error<>.init(_:_:)(0xFFFFFFFFLL, 0xD00000000000001ALL, 0x80000001D76FE7E0, a2, a3);
  uint64_t v5 = sub_1D76F7A94();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, a2);
  if (v5 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v5 <= 0x7FFFFFFF)
  {
    return v5;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D769B6D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t *__return_ptr, uint64_t, void *, uint64_t, void, uint64_t, void))
{
  sub_1D769B74C(a1, a2, a3, a4, a5, a6, a7);
  uint64_t v8 = sub_1D76F83A4();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);

  return v9(a1, v8);
}

uint64_t sub_1D769B74C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t *__return_ptr, uint64_t, void *, uint64_t, void, uint64_t, void))
{
  v12[2] = a4;
  v12[3] = a5;
  uint64_t v9 = sub_1D76F83A4();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA334D0);
  a7(&v13, a6, v12, v9, MEMORY[0x1E4FBC248], v10, MEMORY[0x1E4FBC278]);
  return XPCDictionary.subscript.setter(v13);
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t XPCDictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  if (a2)
  {
    uint64_t v4 = sub_1D76F8054();
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_1D76F8054();
    swift_bridgeObjectRelease();
    xpc_dictionary_set_string(v3, (const char *)(v4 + 32), (const char *)(v5 + 32));
    swift_release();
  }
  else
  {
    uint64_t v6 = sub_1D76F8054();
    swift_bridgeObjectRelease();
    xpc_dictionary_set_value(v3, (const char *)(v6 + 32), 0);
  }

  return swift_release();
}

xpc_object_t sub_1D769B918@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  v70 = a4;
  uint64_t v66 = *(void *)(*(void *)(*(void *)(a3 + 8) + 24) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = MEMORY[0x1F4188788](AssociatedTypeWitness);
  v65 = (char *)&AssociatedTypeWitness - v7;
  uint64_t v8 = *(void *)(a2 - 8);
  uint64_t v9 = MEMORY[0x1F4188788](v6);
  v63 = (char *)&AssociatedTypeWitness - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188788](v9);
  v64 = (char *)&AssociatedTypeWitness - v12;
  uint64_t v13 = MEMORY[0x1F4188788](v11);
  uint64_t v15 = (char *)&AssociatedTypeWitness - v14;
  uint64_t v16 = MEMORY[0x1F4188788](v13);
  v69 = (char *)&AssociatedTypeWitness - v17;
  uint64_t v18 = MEMORY[0x1F4188788](v16);
  v67 = (char *)&AssociatedTypeWitness - v19;
  uint64_t v20 = MEMORY[0x1F4188788](v18);
  v73 = (char *)&AssociatedTypeWitness - v21;
  uint64_t v22 = MEMORY[0x1F4188788](v20);
  char v24 = (char *)&AssociatedTypeWitness - v23;
  MEMORY[0x1F4188788](v22);
  char v26 = (char *)&AssociatedTypeWitness - v25;
  uint64_t v71 = v8;
  uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v27((char *)&AssociatedTypeWitness - v25, a1, a2);
  LOBYTE(a1) = sub_1D76F8424();
  v72 = v27;
  v27(v24, (uint64_t)v26, a2);
  v68 = v15;
  BOOL v28 = (a1 & 1) != 0 && sub_1D76F8414() > 64;
  BOOL v29 = v26;
  uint64_t v30 = v73;
  int64_t v31 = *(void (**)(char *, uint64_t))(v71 + 8);
  v31(v24, a2);
  uint64_t v32 = (void (*)(char *, char *, uint64_t))v72;
  v72(v30, (uint64_t)v29, a2);
  v73 = (char *)v31;
  if (!v28)
  {
    v31(v30, a2);
    goto LABEL_9;
  }
  int64_t v75 = 0x8000000000000000;
  if ((sub_1D76F8424() & 1) == 0)
  {
    char v45 = sub_1D76F8424();
    uint64_t v46 = sub_1D76F8414();
    if ((v45 & 1) == 0)
    {
      uint64_t v32 = (void (*)(char *, char *, uint64_t))v72;
      if (v46 >= 64)
      {
        ((void (*)(char *, uint64_t))v73)(v30, a2);
        goto LABEL_9;
      }
      goto LABEL_28;
    }
    uint64_t v32 = (void (*)(char *, char *, uint64_t))v72;
    if (v46 <= 64)
    {
      swift_getAssociatedConformanceWitness();
      sub_1D76F8C64();
      v57 = v67;
      sub_1D76F89C4();
      char v58 = sub_1D76F7F84();
      ((void (*)(char *, uint64_t))v73)(v57, a2);
      v59 = v63;
      (*(void (**)(char *, char *, uint64_t))(v71 + 32))(v63, v30, a2);
      if (v58)
      {
        ((void (*)(char *, uint64_t))v73)(v59, a2);
      }
      else
      {
        int64_t v60 = v75;
        uint64_t v61 = sub_1D76F8404();
        ((void (*)(char *, uint64_t))v73)(v59, a2);
        if (v61 >= v60) {
          goto LABEL_9;
        }
      }
LABEL_36:
      ((void (*)(char *, uint64_t))v73)(v29, a2);
      xpc_object_t result = 0;
      goto LABEL_37;
    }
LABEL_18:
    sub_1D76ACD18();
    v47 = v67;
    sub_1D76F83E4();
    char v48 = sub_1D76F7F84();
    v49 = (void (*)(char *, uint64_t))v73;
    ((void (*)(char *, uint64_t))v73)(v47, a2);
    v49(v30, a2);
    if ((v48 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_36;
  }
  if (sub_1D76F8414() >= 64) {
    goto LABEL_18;
  }
LABEL_28:
  uint64_t v54 = sub_1D76F8404();
  ((void (*)(char *, uint64_t))v73)(v30, a2);
  if (v54 < v75) {
    goto LABEL_36;
  }
LABEL_9:
  uint64_t v33 = sub_1D76F8414();
  uint64_t v34 = v69;
  v32(v69, v29, a2);
  if (v33 >= 65)
  {
    ((void (*)(char *, uint64_t))v73)(v34, a2);
    uint64_t v35 = v68;
    v32(v68, v29, a2);
    goto LABEL_13;
  }
  uint64_t v36 = sub_1D76F8414();
  ((void (*)(char *, uint64_t))v73)(v34, a2);
  if (v36 != 64)
  {
    uint64_t v35 = v68;
    v32(v68, v29, a2);
    goto LABEL_23;
  }
  char v37 = sub_1D76F8424();
  uint64_t v35 = v68;
  v32(v68, v29, a2);
  if (v37)
  {
LABEL_23:
    v50 = v35;
    uint64_t v51 = a2;
    uint64_t v41 = (void (*)(char *, uint64_t))v73;
    goto LABEL_24;
  }
LABEL_13:
  int64_t v75 = 0x7FFFFFFFFFFFFFFFLL;
  long long v38 = v35;
  char v39 = sub_1D76F8424();
  uint64_t v40 = sub_1D76F8414();
  if (v39)
  {
    uint64_t v41 = (void (*)(char *, uint64_t))v73;
    if (v40 > 64)
    {
      sub_1D76ACD18();
      uint64_t v42 = v67;
      sub_1D76F83E4();
      char v43 = sub_1D76F7F84();
      v41(v42, a2);
      v44 = v38;
      goto LABEL_31;
    }
    goto LABEL_21;
  }
  uint64_t v41 = (void (*)(char *, uint64_t))v73;
  if (v40 <= 63)
  {
LABEL_21:
    sub_1D76F8404();
    v50 = v38;
    uint64_t v51 = a2;
LABEL_24:
    v41(v50, v51);
    goto LABEL_25;
  }
  uint64_t v74 = 0x7FFFFFFFFFFFFFFFLL;
  v55 = v67;
  (*(void (**)(char *, char *, uint64_t))(v71 + 32))(v67, v38, a2);
  sub_1D76ACD18();
  v56 = v64;
  sub_1D76F83E4();
  char v43 = sub_1D76F7F84();
  v41(v56, a2);
  v44 = v55;
LABEL_31:
  v41(v44, a2);
  if (v43)
  {
    v41(v29, a2);
    xpc_object_t result = 0;
    goto LABEL_37;
  }
LABEL_25:
  int64_t v52 = sub_1D76F8404();
  v41(v29, a2);
  xpc_object_t result = xpc_int64_create(v52);
LABEL_37:
  void *v70 = result;
  return result;
}

uint64_t XPCDictionary.subscript.setter(uint64_t a1)
{
  if (a1)
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    OS_xpc_object.type.getter();
  }
  long long v2 = *v1;
  uint64_t v3 = sub_1D76F8054();
  swift_bridgeObjectRelease();
  xpc_dictionary_set_value(v2, (const char *)(v3 + 32), 0);
  swift_release();

  return swift_unknownObjectRelease();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  long long v2 = sub_1D76F7C94();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188788](v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBA34380);
  MEMORY[0x1F4188788](v6 - 8);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D769AC68(a1, (uint64_t)v8, (uint64_t *)&unk_1EBA34380);
  uint64_t v9 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1) {
    goto LABEL_4;
  }
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
  sub_1D76F7C64();
  xpc_object_t result = xpc_date_create_absolute();
  if (result)
  {
    uint64_t v9 = result;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
LABEL_4:
    XPCDictionary.subscript.setter(v9);
    return sub_1D769AC0C(a1, (uint64_t *)&unk_1EBA34380);
  }
  __break(1u);
  return result;
}

void OS_xpc_object.type.getter()
{
}

uint64_t sub_1D769C2AC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  sub_1D769A9C4((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  *a2 = v4;
  a2[1] = v3;

  return swift_bridgeObjectRetain();
}

uint64_t static Error<>.dataCorrupted.getter(uint64_t a1, uint64_t a2)
{
  return Error<>.init(_:_:)(5, 0xD00000000000002FLL, 0x80000001D76FEE70, a1, a2);
}

unint64_t sub_1D769C348(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33EF8);
  uint64_t v2 = sub_1D76F8604();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1D769AC68(v6, (uint64_t)&v15, &qword_1EBA33E90);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_1D76AF5A4(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_1D769B2A0(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void connect_loopback_sync()
{
  remote_control_detach_loopback();
  remote_control_attach_loopback();
  remote_control_connect_loopback();
  uint64_t v0 = remote_device_copy_unique_of_type();
  if (!v0) {
    connect_loopback_sync_cold_1();
  }
  uint64_t v1 = (void *)v0;
  dispatch_semaphore_t v2 = dispatch_semaphore_create(0);
  dispatch_queue_t v3 = dispatch_queue_create("loopback connect", 0);
  dispatch_semaphore_t v5 = v2;
  uint64_t v4 = v2;
  remote_device_set_connected_callback();
  dispatch_semaphore_wait(v4, 0xFFFFFFFFFFFFFFFFLL);
}

void __connect_loopback_sync_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (remote_device_get_state() != 2) {
    __connect_loopback_sync_block_invoke_cold_1();
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t XPCFileTransfer_open(const char *a1, int a2, void *a3, int a4, void *a5)
{
  id v9 = a3;
  id v10 = a5;
  uint64_t v11 = v10;
  if (v9)
  {
    if (XPCFileTransfer_open_once[0] != -1) {
      dispatch_once(XPCFileTransfer_open_once, &__block_literal_global);
    }
    uint64_t v12 = [(id)XPCFileTransfer_open_protectionTypes objectForKeyedSubscript:v9];
    BOOL v13 = v12;
    if (v12) {
      int v14 = [v12 intValue];
    }
    else {
      int v14 = -1;
    }

    if (v11) {
      goto LABEL_10;
    }
  }
  else
  {
    int v14 = -1;
    if (v10)
    {
LABEL_10:
      uint64_t v15 = [v11 intValue];
      goto LABEL_11;
    }
  }
  uint64_t v15 = 438;
LABEL_11:
  uint64_t v16 = open_dprotected_np(a1, a2, v14, a4, v15);

  return v16;
}

uint64_t XPCTypeGetMachSendOnce()
{
  return MEMORY[0x1E4F145D0];
}

uint64_t XPCErrorGetPeerCodeSigningRequirement()
{
  uint64_t v0 = MEMORY[0x1E4F14540];
  id v1 = MEMORY[0x1E4F14540];
  return v0;
}

void initializeXPCShim()
{
  XPCErrorKeyDescription = *MEMORY[0x1E4F14538];
  XPCEventKeyName = *MEMORY[0x1E4F14558];
}

uint64_t XPCaudit_token_to_auid(_OWORD *a1)
{
  long long v1 = a1[1];
  *(_OWORD *)v3.val = *a1;
  *(_OWORD *)&v3.val[4] = v1;
  return audit_token_to_auid(&v3);
}

uint64_t XPCaudit_token_to_euid(_OWORD *a1)
{
  long long v1 = a1[1];
  *(_OWORD *)v3.val = *a1;
  *(_OWORD *)&v3.val[4] = v1;
  return audit_token_to_euid(&v3);
}

uint64_t XPCaudit_token_to_egid(_OWORD *a1)
{
  long long v1 = a1[1];
  *(_OWORD *)v3.val = *a1;
  *(_OWORD *)&v3.val[4] = v1;
  return audit_token_to_egid(&v3);
}

uint64_t XPCaudit_token_to_ruid(_OWORD *a1)
{
  long long v1 = a1[1];
  *(_OWORD *)v3.val = *a1;
  *(_OWORD *)&v3.val[4] = v1;
  return audit_token_to_ruid(&v3);
}

uint64_t XPCaudit_token_to_rgid(_OWORD *a1)
{
  long long v1 = a1[1];
  *(_OWORD *)v3.val = *a1;
  *(_OWORD *)&v3.val[4] = v1;
  return audit_token_to_rgid(&v3);
}

uint64_t XPCaudit_token_to_pid(_OWORD *a1)
{
  long long v1 = a1[1];
  *(_OWORD *)v3.val = *a1;
  *(_OWORD *)&v3.val[4] = v1;
  return audit_token_to_pid(&v3);
}

uint64_t XPCaudit_token_to_asid(_OWORD *a1)
{
  long long v1 = a1[1];
  *(_OWORD *)v3.val = *a1;
  *(_OWORD *)&v3.val[4] = v1;
  return audit_token_to_asid(&v3);
}

uint64_t XPCaudit_token_to_pidversion(_OWORD *a1)
{
  long long v1 = a1[1];
  *(_OWORD *)v3.val = *a1;
  *(_OWORD *)&v3.val[4] = v1;
  return audit_token_to_pidversion(&v3);
}

uint64_t sub_1D769CB14(uint64_t (*a1)(void))
{
  return a1(*(void *)(v1 + 16));
}

uint64_t XPCEndpoint.deinit()
{
  swift_unknownObjectRelease();
  return v0;
}

uint64_t XPCEndpoint.__deallocating_deinit()
{
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186488](v0, 24, 7);
}

uint64_t XPCPeerEndpoint.deinit()
{
  swift_unknownObjectRelease();
  return v0;
}

uint64_t _s7Mercury15XPCPeerEndpointCfD_0()
{
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186488](v0, 24, 7);
}

uint64_t SystemXPCListenerConnection.createEndpoint()()
{
  xpc_endpoint_t v1 = xpc_endpoint_create(*(xpc_connection_t *)(v0 + 24));
  type metadata accessor for XPCPeerEndpoint();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v1;
  return result;
}

uint64_t type metadata accessor for XPCPeerEndpoint()
{
  return self;
}

uint64_t type metadata accessor for XPCEndpoint()
{
  return self;
}

uint64_t method lookup function for XPCEndpoint(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for XPCEndpoint);
}

uint64_t dispatch thunk of XPCEndpoint.withUnsafeUnderlyingEndpoint<A>(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t type metadata accessor for XPCListenerEndpoint()
{
  return self;
}

uint64_t initializeBufferWithCopyOfBuffer for XPCReplyProviding(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

void *__swift_memcpy8192_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x2000uLL);
}

uint64_t sub_1D769CD34(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 0x2000)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1D769CD58(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8184) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 4344) = 0u;
    *(_OWORD *)(result + 4328) = 0u;
    *(_OWORD *)(result + 4312) = 0u;
    *(_OWORD *)(result + 4296) = 0u;
    *(_OWORD *)(result + 4280) = 0u;
    *(_OWORD *)(result + 4264) = 0u;
    *(_OWORD *)(result + 4248) = 0u;
    *(_OWORD *)(result + 4232) = 0u;
    *(_OWORD *)(result + 4216) = 0u;
    *(_OWORD *)(result + 4200) = 0u;
    *(_OWORD *)(result + 4184) = 0u;
    *(_OWORD *)(result + 4168) = 0u;
    *(_OWORD *)(result + 4152) = 0u;
    *(_OWORD *)(result + 4136) = 0u;
    *(_OWORD *)(result + 4120) = 0u;
    *(_OWORD *)(result + 4104) = 0u;
    *(_OWORD *)(result + 4088) = 0u;
    *(_OWORD *)(result + 4072) = 0u;
    *(_OWORD *)(result + 4056) = 0u;
    *(_OWORD *)(result + 4040) = 0u;
    *(_OWORD *)(result + 4024) = 0u;
    *(_OWORD *)(result + 4008) = 0u;
    *(_OWORD *)(result + 3992) = 0u;
    *(_OWORD *)(result + 3976) = 0u;
    *(_OWORD *)(result + 3960) = 0u;
    *(_OWORD *)(result + 3944) = 0u;
    *(_OWORD *)(result + 3928) = 0u;
    *(_OWORD *)(result + 3912) = 0u;
    *(_OWORD *)(result + 3896) = 0u;
    *(_OWORD *)(result + 3880) = 0u;
    *(_OWORD *)(result + 3864) = 0u;
    *(_OWORD *)(result + 3848) = 0u;
    *(_OWORD *)(result + 3832) = 0u;
    *(_OWORD *)(result + 3816) = 0u;
    *(_OWORD *)(result + 3800) = 0u;
    *(_OWORD *)(result + 3784) = 0u;
    *(_OWORD *)(result + 3768) = 0u;
    *(_OWORD *)(result + 3752) = 0u;
    *(_OWORD *)(result + 3736) = 0u;
    *(_OWORD *)(result + 3720) = 0u;
    *(_OWORD *)(result + 3704) = 0u;
    *(_OWORD *)(result + 3688) = 0u;
    *(_OWORD *)(result + 3672) = 0u;
    *(_OWORD *)(result + 3656) = 0u;
    *(_OWORD *)(result + 3640) = 0u;
    *(_OWORD *)(result + 3624) = 0u;
    *(_OWORD *)(result + 3608) = 0u;
    *(_OWORD *)(result + 3592) = 0u;
    *(_OWORD *)(result + 3576) = 0u;
    *(_OWORD *)(result + 3560) = 0u;
    *(_OWORD *)(result + 3544) = 0u;
    *(_OWORD *)(result + 3528) = 0u;
    *(_OWORD *)(result + 3512) = 0u;
    *(_OWORD *)(result + 3496) = 0u;
    *(_OWORD *)(result + 3480) = 0u;
    *(_OWORD *)(result + 3464) = 0u;
    *(_OWORD *)(result + 3448) = 0u;
    *(_OWORD *)(result + 3432) = 0u;
    *(_OWORD *)(result + 3416) = 0u;
    *(_OWORD *)(result + 3400) = 0u;
    *(_OWORD *)(result + 3384) = 0u;
    *(_OWORD *)(result + 3368) = 0u;
    *(_OWORD *)(result + 3352) = 0u;
    *(_OWORD *)(result + 3336) = 0u;
    *(_OWORD *)(result + 3320) = 0u;
    *(_OWORD *)(result + 3304) = 0u;
    *(_OWORD *)(result + 3288) = 0u;
    *(_OWORD *)(result + 3272) = 0u;
    *(_OWORD *)(result + 3256) = 0u;
    *(_OWORD *)(result + 3240) = 0u;
    *(_OWORD *)(result + 3224) = 0u;
    *(_OWORD *)(result + 3208) = 0u;
    *(_OWORD *)(result + 3192) = 0u;
    *(_OWORD *)(result + 3176) = 0u;
    *(_OWORD *)(result + 3160) = 0u;
    *(_OWORD *)(result + 3144) = 0u;
    *(_OWORD *)(result + 3128) = 0u;
    *(_OWORD *)(result + 3112) = 0u;
    *(_OWORD *)(result + 3096) = 0u;
    *(_OWORD *)(result + 3080) = 0u;
    *(_OWORD *)(result + 3064) = 0u;
    *(_OWORD *)(result + 3048) = 0u;
    *(_OWORD *)(result + 3032) = 0u;
    *(_OWORD *)(result + 3016) = 0u;
    *(_OWORD *)(result + 3000) = 0u;
    *(_OWORD *)(result + 2984) = 0u;
    *(_OWORD *)(result + 2968) = 0u;
    *(_OWORD *)(result + 2952) = 0u;
    *(_OWORD *)(result + 2936) = 0u;
    *(_OWORD *)(result + 2920) = 0u;
    *(_OWORD *)(result + 2904) = 0u;
    *(_OWORD *)(result + 2888) = 0u;
    *(_OWORD *)(result + 2872) = 0u;
    *(_OWORD *)(result + 2856) = 0u;
    *(_OWORD *)(result + 2840) = 0u;
    *(_OWORD *)(result + 2824) = 0u;
    *(_OWORD *)(result + 2808) = 0u;
    *(_OWORD *)(result + 2792) = 0u;
    *(_OWORD *)(result + 2776) = 0u;
    *(_OWORD *)(result + 2760) = 0u;
    *(_OWORD *)(result + 2744) = 0u;
    *(_OWORD *)(result + 2728) = 0u;
    *(_OWORD *)(result + 2712) = 0u;
    *(_OWORD *)(result + 2696) = 0u;
    *(_OWORD *)(result + 2680) = 0u;
    *(_OWORD *)(result + 2664) = 0u;
    *(_OWORD *)(result + 2648) = 0u;
    *(_OWORD *)(result + 2632) = 0u;
    *(_OWORD *)(result + 2616) = 0u;
    *(_OWORD *)(result + 2600) = 0u;
    *(_OWORD *)(result + 2584) = 0u;
    *(_OWORD *)(result + 2568) = 0u;
    *(_OWORD *)(result + 2552) = 0u;
    *(_OWORD *)(result + 2536) = 0u;
    *(_OWORD *)(result + 2520) = 0u;
    *(_OWORD *)(result + 2504) = 0u;
    *(_OWORD *)(result + 2488) = 0u;
    *(_OWORD *)(result + 2472) = 0u;
    *(_OWORD *)(result + 2456) = 0u;
    *(_OWORD *)(result + 2440) = 0u;
    *(_OWORD *)(result + 2424) = 0u;
    *(_OWORD *)(result + 2408) = 0u;
    *(_OWORD *)(result + 2392) = 0u;
    *(_OWORD *)(result + 2376) = 0u;
    *(_OWORD *)(result + 2360) = 0u;
    *(_OWORD *)(result + 2344) = 0u;
    *(_OWORD *)(result + 2328) = 0u;
    *(_OWORD *)(result + 2312) = 0u;
    *(_OWORD *)(result + 2296) = 0u;
    *(_OWORD *)(result + 2280) = 0u;
    *(_OWORD *)(result + 2264) = 0u;
    *(_OWORD *)(result + 2248) = 0u;
    *(_OWORD *)(result + 2232) = 0u;
    *(_OWORD *)(result + 2216) = 0u;
    *(_OWORD *)(result + 2200) = 0u;
    *(_OWORD *)(result + 2184) = 0u;
    *(_OWORD *)(result + 2168) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_OWORD *)(result + 8168) = 0u;
    *(_OWORD *)(result + 8152) = 0u;
    *(_OWORD *)(result + 8136) = 0u;
    *(_OWORD *)(result + 8120) = 0u;
    *(_OWORD *)(result + 8104) = 0u;
    *(_OWORD *)(result + 8088) = 0u;
    *(_OWORD *)(result + 8072) = 0u;
    *(_OWORD *)(result + 8056) = 0u;
    *(_OWORD *)(result + 8040) = 0u;
    *(_OWORD *)(result + 8024) = 0u;
    *(_OWORD *)(result + 8008) = 0u;
    *(_OWORD *)(result + 7992) = 0u;
    *(_OWORD *)(result + 7976) = 0u;
    *(_OWORD *)(result + 7960) = 0u;
    *(_OWORD *)(result + 7944) = 0u;
    *(_OWORD *)(result + 7928) = 0u;
    *(_OWORD *)(result + 7912) = 0u;
    *(_OWORD *)(result + 7896) = 0u;
    *(_OWORD *)(result + 7880) = 0u;
    *(_OWORD *)(result + 7864) = 0u;
    *(_OWORD *)(result + 7848) = 0u;
    *(_OWORD *)(result + 7832) = 0u;
    *(_OWORD *)(result + 7816) = 0u;
    *(_OWORD *)(result + 7800) = 0u;
    *(_OWORD *)(result + 7784) = 0u;
    *(_OWORD *)(result + 7768) = 0u;
    *(_OWORD *)(result + 7752) = 0u;
    *(_OWORD *)(result + 7736) = 0u;
    *(_OWORD *)(result + 7720) = 0u;
    *(_OWORD *)(result + 7704) = 0u;
    *(_OWORD *)(result + 7688) = 0u;
    *(_OWORD *)(result + 7672) = 0u;
    *(_OWORD *)(result + 7656) = 0u;
    *(_OWORD *)(result + 7640) = 0u;
    *(_OWORD *)(result + 7624) = 0u;
    *(_OWORD *)(result + 7608) = 0u;
    *(_OWORD *)(result + 7592) = 0u;
    *(_OWORD *)(result + 7576) = 0u;
    *(_OWORD *)(result + 7560) = 0u;
    *(_OWORD *)(result + 7544) = 0u;
    *(_OWORD *)(result + 7528) = 0u;
    *(_OWORD *)(result + 7512) = 0u;
    *(_OWORD *)(result + 7496) = 0u;
    *(_OWORD *)(result + 7480) = 0u;
    *(_OWORD *)(result + 7464) = 0u;
    *(_OWORD *)(result + 7448) = 0u;
    *(_OWORD *)(result + 7432) = 0u;
    *(_OWORD *)(result + 7416) = 0u;
    *(_OWORD *)(result + 7400) = 0u;
    *(_OWORD *)(result + 7384) = 0u;
    *(_OWORD *)(result + 7368) = 0u;
    *(_OWORD *)(result + 7352) = 0u;
    *(_OWORD *)(result + 7336) = 0u;
    *(_OWORD *)(result + 7320) = 0u;
    *(_OWORD *)(result + 7304) = 0u;
    *(_OWORD *)(result + 7288) = 0u;
    *(_OWORD *)(result + 7272) = 0u;
    *(_OWORD *)(result + 7256) = 0u;
    *(_OWORD *)(result + 7240) = 0u;
    *(_OWORD *)(result + 7224) = 0u;
    *(_OWORD *)(result + 7208) = 0u;
    *(_OWORD *)(result + 7192) = 0u;
    *(_OWORD *)(result + 7176) = 0u;
    *(_OWORD *)(result + 7160) = 0u;
    *(_OWORD *)(result + 7144) = 0u;
    *(_OWORD *)(result + 7128) = 0u;
    *(_OWORD *)(result + 7112) = 0u;
    *(_OWORD *)(result + 7096) = 0u;
    *(_OWORD *)(result + 7080) = 0u;
    *(_OWORD *)(result + 7064) = 0u;
    *(_OWORD *)(result + 7048) = 0u;
    *(_OWORD *)(result + 7032) = 0u;
    *(_OWORD *)(result + 7016) = 0u;
    *(_OWORD *)(result + 7000) = 0u;
    *(_OWORD *)(result + 6984) = 0u;
    *(_OWORD *)(result + 6968) = 0u;
    *(_OWORD *)(result + 6952) = 0u;
    *(_OWORD *)(result + 6936) = 0u;
    *(_OWORD *)(result + 6920) = 0u;
    *(_OWORD *)(result + 6904) = 0u;
    *(_OWORD *)(result + 6888) = 0u;
    *(_OWORD *)(result + 6872) = 0u;
    *(_OWORD *)(result + 6856) = 0u;
    *(_OWORD *)(result + 6840) = 0u;
    *(_OWORD *)(result + 6824) = 0u;
    *(_OWORD *)(result + 6808) = 0u;
    *(_OWORD *)(result + 6792) = 0u;
    *(_OWORD *)(result + 6776) = 0u;
    *(_OWORD *)(result + 6760) = 0u;
    *(_OWORD *)(result + 6744) = 0u;
    *(_OWORD *)(result + 6728) = 0u;
    *(_OWORD *)(result + 6712) = 0u;
    *(_OWORD *)(result + 6696) = 0u;
    *(_OWORD *)(result + 6680) = 0u;
    *(_OWORD *)(result + 6664) = 0u;
    *(_OWORD *)(result + 6648) = 0u;
    *(_OWORD *)(result + 6632) = 0u;
    *(_OWORD *)(result + 6616) = 0u;
    *(_OWORD *)(result + 6600) = 0u;
    *(_OWORD *)(result + 6584) = 0u;
    *(_OWORD *)(result + 6568) = 0u;
    *(_OWORD *)(result + 6552) = 0u;
    *(_OWORD *)(result + 6536) = 0u;
    *(_OWORD *)(result + 6520) = 0u;
    *(_OWORD *)(result + 6504) = 0u;
    *(_OWORD *)(result + 6488) = 0u;
    *(_OWORD *)(result + 6472) = 0u;
    *(_OWORD *)(result + 6456) = 0u;
    *(_OWORD *)(result + 6440) = 0u;
    *(_OWORD *)(result + 6424) = 0u;
    *(_OWORD *)(result + 6408) = 0u;
    *(_OWORD *)(result + 6392) = 0u;
    *(_OWORD *)(result + 6376) = 0u;
    *(_OWORD *)(result + 6360) = 0u;
    *(_OWORD *)(result + 6344) = 0u;
    *(_OWORD *)(result + 6328) = 0u;
    *(_OWORD *)(result + 6312) = 0u;
    *(_OWORD *)(result + 6296) = 0u;
    *(_OWORD *)(result + 6280) = 0u;
    *(_OWORD *)(result + 6264) = 0u;
    *(_OWORD *)(result + 6248) = 0u;
    *(_OWORD *)(result + 6232) = 0u;
    *(_OWORD *)(result + 6216) = 0u;
    *(_OWORD *)(result + 6200) = 0u;
    *(_OWORD *)(result + 6184) = 0u;
    *(_OWORD *)(result + 6168) = 0u;
    *(_OWORD *)(result + 6152) = 0u;
    *(_OWORD *)(result + 6136) = 0u;
    *(_OWORD *)(result + 6120) = 0u;
    *(_OWORD *)(result + 6104) = 0u;
    *(_OWORD *)(result + 6088) = 0u;
    *(_OWORD *)(result + 6072) = 0u;
    *(_OWORD *)(result + 6056) = 0u;
    *(_OWORD *)(result + 6040) = 0u;
    *(_OWORD *)(result + 6024) = 0u;
    *(_OWORD *)(result + 6008) = 0u;
    *(_OWORD *)(result + 5992) = 0u;
    *(_OWORD *)(result + 5976) = 0u;
    *(_OWORD *)(result + 5960) = 0u;
    *(_OWORD *)(result + 5944) = 0u;
    *(_OWORD *)(result + 5928) = 0u;
    *(_OWORD *)(result + 5912) = 0u;
    *(_OWORD *)(result + 5896) = 0u;
    *(_OWORD *)(result + 5880) = 0u;
    *(_OWORD *)(result + 5864) = 0u;
    *(_OWORD *)(result + 5848) = 0u;
    *(_OWORD *)(result + 5832) = 0u;
    *(_OWORD *)(result + 5816) = 0u;
    *(_OWORD *)(result + 5800) = 0u;
    *(_OWORD *)(result + 5784) = 0u;
    *(_OWORD *)(result + 5768) = 0u;
    *(_OWORD *)(result + 5752) = 0u;
    *(_OWORD *)(result + 5736) = 0u;
    *(_OWORD *)(result + 5720) = 0u;
    *(_OWORD *)(result + 5704) = 0u;
    *(_OWORD *)(result + 5688) = 0u;
    *(_OWORD *)(result + 5672) = 0u;
    *(_OWORD *)(result + 5656) = 0u;
    *(_OWORD *)(result + 5640) = 0u;
    *(_OWORD *)(result + 5624) = 0u;
    *(_OWORD *)(result + 5608) = 0u;
    *(_OWORD *)(result + 5592) = 0u;
    *(_OWORD *)(result + 5576) = 0u;
    *(_OWORD *)(result + 5560) = 0u;
    *(_OWORD *)(result + 5544) = 0u;
    *(_OWORD *)(result + 5528) = 0u;
    *(_OWORD *)(result + 5512) = 0u;
    *(_OWORD *)(result + 5496) = 0u;
    *(_OWORD *)(result + 5480) = 0u;
    *(_OWORD *)(result + 5464) = 0u;
    *(_OWORD *)(result + 5448) = 0u;
    *(_OWORD *)(result + 5432) = 0u;
    *(_OWORD *)(result + 5416) = 0u;
    *(_OWORD *)(result + 5400) = 0u;
    *(_OWORD *)(result + 5384) = 0u;
    *(_OWORD *)(result + 5368) = 0u;
    *(_OWORD *)(result + 5352) = 0u;
    *(_OWORD *)(result + 5336) = 0u;
    *(_OWORD *)(result + 5320) = 0u;
    *(_OWORD *)(result + 5304) = 0u;
    *(_OWORD *)(result + 5288) = 0u;
    *(_OWORD *)(result + 5272) = 0u;
    *(_OWORD *)(result + 5256) = 0u;
    *(_OWORD *)(result + 5240) = 0u;
    *(_OWORD *)(result + 5224) = 0u;
    *(_OWORD *)(result + 5208) = 0u;
    *(_OWORD *)(result + 5192) = 0u;
    *(_OWORD *)(result + 5176) = 0u;
    *(_OWORD *)(result + 5160) = 0u;
    *(_OWORD *)(result + 5144) = 0u;
    *(_OWORD *)(result + 5128) = 0u;
    *(_OWORD *)(result + 5112) = 0u;
    *(_OWORD *)(result + 5096) = 0u;
    *(_OWORD *)(result + 5080) = 0u;
    *(_OWORD *)(result + 5064) = 0u;
    *(_OWORD *)(result + 5048) = 0u;
    *(_OWORD *)(result + 5032) = 0u;
    *(_OWORD *)(result + 5016) = 0u;
    *(_OWORD *)(result + 5000) = 0u;
    *(_OWORD *)(result + 4984) = 0u;
    *(_OWORD *)(result + 4968) = 0u;
    *(_OWORD *)(result + 4952) = 0u;
    *(_OWORD *)(result + 4936) = 0u;
    *(_OWORD *)(result + 4920) = 0u;
    *(_OWORD *)(result + 4904) = 0u;
    *(_OWORD *)(result + 4888) = 0u;
    *(_OWORD *)(result + 4872) = 0u;
    *(_OWORD *)(result + 4856) = 0u;
    *(_OWORD *)(result + 4840) = 0u;
    *(_OWORD *)(result + 4824) = 0u;
    *(_OWORD *)(result + 4808) = 0u;
    *(_OWORD *)(result + 4792) = 0u;
    *(_OWORD *)(result + 4776) = 0u;
    *(_OWORD *)(result + 4760) = 0u;
    *(_OWORD *)(result + 4744) = 0u;
    *(_OWORD *)(result + 4728) = 0u;
    *(_OWORD *)(result + 4712) = 0u;
    *(_OWORD *)(result + 4696) = 0u;
    *(_OWORD *)(result + 4680) = 0u;
    *(_OWORD *)(result + 4664) = 0u;
    *(_OWORD *)(result + 4648) = 0u;
    *(_OWORD *)(result + 4632) = 0u;
    *(_OWORD *)(result + 4616) = 0u;
    *(_OWORD *)(result + 4600) = 0u;
    *(_OWORD *)(result + 4584) = 0u;
    *(_OWORD *)(result + 4568) = 0u;
    *(_OWORD *)(result + 4552) = 0u;
    *(_OWORD *)(result + 4536) = 0u;
    *(_OWORD *)(result + 4520) = 0u;
    *(_OWORD *)(result + 4504) = 0u;
    *(_OWORD *)(result + 4488) = 0u;
    *(_OWORD *)(result + 4472) = 0u;
    *(_OWORD *)(result + 4456) = 0u;
    *(_OWORD *)(result + 4440) = 0u;
    *(_OWORD *)(result + 4424) = 0u;
    *(_OWORD *)(result + 4408) = 0u;
    *(_OWORD *)(result + 4392) = 0u;
    *(_OWORD *)(result + 4376) = 0u;
    *(_OWORD *)(result + 4360) = 0u;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 0x2000) = v3;
  return result;
}

void type metadata accessor for _opaque_pthread_t(uint64_t a1)
{
}

void type metadata accessor for URLFileProtection(uint64_t a1)
{
}

void *__swift_memcpy8_4(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t sub_1D769D674(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1D769D694(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 8) = v3;
  return result;
}

void type metadata accessor for pollfd(uint64_t a1)
{
}

void type metadata accessor for remote_device_type_t(uint64_t a1)
{
}

void type metadata accessor for remote_device_state_t(uint64_t a1)
{
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1D769D71C(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 72)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1D769D73C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 72) = v3;
  return result;
}

void type metadata accessor for termios(uint64_t a1)
{
}

uint64_t sub_1D769D78C()
{
  xpc_endpoint_t v1 = xpc_endpoint_create(*(xpc_connection_t *)(v0 + 24));
  type metadata accessor for XPCPeerEndpoint();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v1;
  return result;
}

_DWORD *sub_1D769D7C8@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

void sub_1D769D7D8(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_1D769D7E4(uint64_t a1, uint64_t a2)
{
  return sub_1D769DB28(a1, a2, MEMORY[0x1E4F27EB8]);
}

uint64_t sub_1D769D7FC(uint64_t a1, id *a2)
{
  uint64_t result = sub_1D76F7FD4();
  *a2 = 0;
  return result;
}

uint64_t sub_1D769D874(uint64_t a1, id *a2)
{
  char v3 = sub_1D76F7FE4();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_1D769D8F4@<X0>(uint64_t *a1@<X8>)
{
  sub_1D76F7FF4();
  uint64_t v2 = sub_1D76F7FC4();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

void sub_1D769D938(void *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_1D769D944(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1D769D958@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_1D76F7FC4();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1D769D9A0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1D76F7FF4();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1D769D9CC(uint64_t a1)
{
  uint64_t v2 = sub_1D769DACC(&qword_1EA83A5A0);
  uint64_t v3 = sub_1D769DACC(&qword_1EA83A5A8);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t sub_1D769DA64()
{
  return sub_1D769DACC(&qword_1EA83A588);
}

uint64_t sub_1D769DA98()
{
  return sub_1D769DACC(&qword_1EA83A590);
}

uint64_t sub_1D769DACC(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for URLFileProtection(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D769DB10(uint64_t a1, uint64_t a2)
{
  return sub_1D769DB28(a1, a2, MEMORY[0x1E4FBB198]);
}

uint64_t sub_1D769DB28(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = sub_1D76F7FF4();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1D769DB6C()
{
  sub_1D76F7FF4();
  sub_1D76F8094();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1D769DBC0()
{
  sub_1D76F7FF4();
  sub_1D76F8D24();
  sub_1D76F8094();
  uint64_t v0 = sub_1D76F8D54();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1D769DC34()
{
  uint64_t v0 = sub_1D76F7FF4();
  uint64_t v2 = v1;
  if (v0 == sub_1D76F7FF4() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = sub_1D76F89E4();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_1D769DCC0()
{
  return sub_1D769DACC(&qword_1EA83A598);
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t sub_1D769DD08(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t sub_1D769DD64(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

void type metadata accessor for __darwin_pthread_handler_rec(uint64_t a1)
{
}

void sub_1D769DDCC(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t XPCObjectEncoder.encode<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)(v2 + 16);
  swift_retain();
  uint64_t v8 = MEMORY[0x1E4FBC860];
  unint64_t v9 = sub_1D769E554(MEMORY[0x1E4FBC860]);
  uint64_t v10 = type metadata accessor for _XPCObjectEncoder();
  uint64_t v11 = (void *)swift_allocObject();
  v11[2] = 0;
  v11[3] = v7;
  v11[4] = v8;
  v11[5] = v9;
  uint64_t v18 = v10;
  uint64_t v19 = sub_1D76AB700(&qword_1EBA347A0, (void (*)(void))type metadata accessor for _XPCObjectEncoder);
  unint64_t v16 = (unint64_t)v11;
  swift_retain();
  sub_1D76F7F34();
  if (v3)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v16);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v16);
    uint64_t v4 = v11[2];
    if (v4)
    {
      swift_unknownObjectRetain();
    }
    else
    {
      uint64_t v4 = sub_1D76F8524();
      swift_allocError();
      int v14 = v13;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A8C0);
      v14[3] = a2;
      boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(v14);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(boxed_opaque_existential_0Tm, a1, a2);
      unint64_t v16 = 0;
      unint64_t v17 = 0xE000000000000000;
      sub_1D76F8464();
      swift_bridgeObjectRelease();
      unint64_t v16 = 0xD000000000000029;
      unint64_t v17 = 0x80000001D76FCE90;
      sub_1D76F8DF4();
      sub_1D76F80A4();
      swift_bridgeObjectRelease();
      sub_1D76F84E4();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v4 - 8) + 104))(v14, *MEMORY[0x1E4FBBAA0], v4);
      swift_willThrow();
    }
    swift_release();
  }
  return v4;
}

uint64_t XPCObjectEncoder.encode<A>(_:into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MEMORY[0x1D94771B0](a2) == XPCTypeDictionary)
  {
    uint64_t result = XPCObjectEncoder.encode<A>(_:)(a1, a3);
    if (!v3)
    {
      uint64_t v11 = (void *)result;
      if (MEMORY[0x1D94771B0]() == XPCTypeDictionary)
      {
        uint64_t v15 = swift_allocObject();
        *(void *)(v15 + 16) = a2;
        uint64_t v16 = swift_allocObject();
        *(void *)(v16 + 16) = sub_1D76AB660;
        *(void *)(v16 + 24) = v15;
        v19[4] = sub_1D76AB698;
        v19[5] = v16;
        v19[0] = MEMORY[0x1E4F143A0];
        v19[1] = 1107296256;
        v19[2] = sub_1D769E44C;
        v19[3] = &block_descriptor;
        unint64_t v17 = _Block_copy(v19);
        swift_unknownObjectRetain();
        swift_retain();
        swift_release();
        xpc_dictionary_apply(v11, v17);
        swift_unknownObjectRelease();
        _Block_release(v17);
        char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
        swift_release();
        uint64_t result = swift_release();
        if (isEscapingClosureAtFileLocation) {
          __break(1u);
        }
      }
      else
      {
        uint64_t v12 = sub_1D76F8524();
        swift_allocError();
        int v14 = v13;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A8C0);
        v14[3] = swift_getObjectType();
        *int v14 = a2;
        swift_unknownObjectRetain();
        sub_1D76F84E4();
        (*(void (**)(void *, void, uint64_t))(*(void *)(v12 - 8) + 104))(v14, *MEMORY[0x1E4FBBAA0], v12);
        swift_willThrow();
        return swift_unknownObjectRelease();
      }
    }
  }
  else
  {
    uint64_t v7 = sub_1D76F8524();
    swift_allocError();
    unint64_t v9 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A8C0);
    v9[3] = swift_getObjectType();
    *unint64_t v9 = a2;
    swift_unknownObjectRetain();
    sub_1D76F84E4();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v7 - 8) + 104))(v9, *MEMORY[0x1E4FBBAA0], v7);
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1D769E3F4(char *key, xpc_object_t value, xpc_object_t xdict)
{
  return 1;
}

uint64_t sub_1D769E420(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3() & 1;
}

uint64_t sub_1D769E44C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_unknownObjectRetain();
  char v6 = v5(a2, a3);
  swift_unknownObjectRelease();
  return v6 & 1;
}

uint64_t XPCObjectEncoder.encode<A>(_:into:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  XPCObjectEncoder.encode<A>(_:into:)(a1, v5, a3);
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_1D769E524@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = XPCObjectEncoder.encode<A>(_:)(a1, a2);
  if (!v3) {
    *a3 = result;
  }
  return result;
}

unint64_t sub_1D769E554(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34C68);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188788](v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA83A690);
  uint64_t v6 = sub_1D76F8604();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  unint64_t v9 = &v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1D769AC68(v12, (uint64_t)v5, &qword_1EBA34C68);
    unint64_t result = sub_1D76E0A88((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = sub_1D76F8594();
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    unint64_t result = (unint64_t)sub_1D769B2A0(v9, (_OWORD *)(v7[7] + 32 * v16));
    uint64_t v19 = v7[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1D769E754(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A678);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188788](v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA83A680);
  uint64_t v6 = sub_1D76F8604();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1D769AC68(v12, (uint64_t)v5, &qword_1EA83A678);
    unint64_t result = sub_1D76E0B70((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for RemoteDevice.Identity();
    unint64_t result = sub_1D76AC558((uint64_t)v5, v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16);
    *(void *)(v7[7] + 8 * v16) = *(void *)&v5[v9];
    uint64_t v19 = v7[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1D769E930(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A670);
  uint64_t v2 = (void *)sub_1D76F8604();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t result = sub_1D769B2B0(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    unint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *unint64_t v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    void *v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v2[2] = v15;
    v4 += 4;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1D769EA54()
{
  *(void *)(v0 + 16) = xpc_dictionary_create(0, 0, 0);
  uint64_t result = swift_unknownObjectRelease();
  if (*(void *)(v0 + 16))
  {
    type metadata accessor for XPCObjectKeyedEncodingContainer();
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    return sub_1D76F8794();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1D769EB2C@<X0>(void *a1@<X8>)
{
  *(void *)(v1 + 16) = xpc_array_create(0, 0);
  uint64_t result = swift_unknownObjectRelease();
  uint64_t v4 = *(void *)(v1 + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(v1 + 32);
    a1[3] = &type metadata for XPCObjectUnkeyedEncodingContainer;
    a1[4] = sub_1D76ABD64();
    *a1 = v1;
    a1[1] = v4;
    a1[2] = v5;
    swift_unknownObjectRetain();
    swift_retain();
    return swift_bridgeObjectRetain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1D769EBC0()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186488](v0, 48, 7);
}

uint64_t sub_1D769EC10()
{
  return sub_1D769EA54();
}

uint64_t sub_1D769EC34@<X0>(void *a1@<X8>)
{
  return sub_1D769EB2C(a1);
}

uint64_t sub_1D769EC58@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(v3 + 32);
  a1[3] = &type metadata for XPCObjectSingleValueEncodingContainer;
  a1[4] = sub_1D76ABD10();
  *a1 = v3;
  a1[1] = v4;
  swift_retain();

  return swift_bridgeObjectRetain();
}

uint64_t sub_1D769ECBC()
{
  uint64_t v1 = *(void **)(v0 + 8);
  sub_1D76F8DB4();
  uint64_t v2 = sub_1D76F8054();
  swift_bridgeObjectRelease();
  xpc_dictionary_set_value(v1, (const char *)(v2 + 32), 0);
  return swift_release();
}

uint64_t sub_1D769ED28(char a1)
{
  uint64_t v3 = *(void **)(v1 + 8);
  sub_1D76F8DB4();
  uint64_t v4 = sub_1D76F8054();
  swift_bridgeObjectRelease();
  xpc_dictionary_set_BOOL(v3, (const char *)(v4 + 32), a1 & 1);
  return swift_release();
}

uint64_t sub_1D769EDA0()
{
  uint64_t v1 = *(void **)(v0 + 8);
  sub_1D76F8DB4();
  uint64_t v2 = sub_1D76F8054();
  swift_bridgeObjectRelease();
  uint64_t v3 = sub_1D76F8054();
  xpc_dictionary_set_string(v1, (const char *)(v2 + 32), (const char *)(v3 + 32));
  swift_release();
  return swift_release();
}

uint64_t sub_1D769EE34(double a1)
{
  uint64_t v3 = *(void **)(v1 + 8);
  sub_1D76F8DB4();
  uint64_t v4 = sub_1D76F8054();
  swift_bridgeObjectRelease();
  xpc_dictionary_set_double(v3, (const char *)(v4 + 32), a1);
  return swift_release();
}

uint64_t sub_1D769EEAC(float a1)
{
  uint64_t v3 = *(void **)(v1 + 8);
  sub_1D76F8DB4();
  uint64_t v4 = sub_1D76F8054();
  swift_bridgeObjectRelease();
  xpc_dictionary_set_double(v3, (const char *)(v4 + 32), a1);
  return swift_release();
}

uint64_t sub_1D769EF28(char a1)
{
  uint64_t v3 = *(void **)(v1 + 8);
  sub_1D76F8DB4();
  uint64_t v4 = sub_1D76F8054();
  swift_bridgeObjectRelease();
  xpc_dictionary_set_int64(v3, (const char *)(v4 + 32), a1);
  return swift_release();
}

uint64_t sub_1D769EFA4(__int16 a1)
{
  uint64_t v3 = *(void **)(v1 + 8);
  sub_1D76F8DB4();
  uint64_t v4 = sub_1D76F8054();
  swift_bridgeObjectRelease();
  xpc_dictionary_set_int64(v3, (const char *)(v4 + 32), a1);
  return swift_release();
}

uint64_t sub_1D769F020(int a1)
{
  uint64_t v3 = *(void **)(v1 + 8);
  sub_1D76F8DB4();
  uint64_t v4 = sub_1D76F8054();
  swift_bridgeObjectRelease();
  xpc_dictionary_set_int64(v3, (const char *)(v4 + 32), a1);
  return swift_release();
}

uint64_t sub_1D769F09C(unsigned __int8 a1)
{
  uint64_t v3 = *(void **)(v1 + 8);
  sub_1D76F8DB4();
  uint64_t v4 = sub_1D76F8054();
  swift_bridgeObjectRelease();
  xpc_dictionary_set_uint64(v3, (const char *)(v4 + 32), a1);
  return swift_release();
}

uint64_t sub_1D769F118(unsigned __int16 a1)
{
  uint64_t v3 = *(void **)(v1 + 8);
  sub_1D76F8DB4();
  uint64_t v4 = sub_1D76F8054();
  swift_bridgeObjectRelease();
  xpc_dictionary_set_uint64(v3, (const char *)(v4 + 32), a1);
  return swift_release();
}

uint64_t sub_1D769F194(unsigned int a1)
{
  uint64_t v3 = *(void **)(v1 + 8);
  sub_1D76F8DB4();
  uint64_t v4 = sub_1D76F8054();
  swift_bridgeObjectRelease();
  xpc_dictionary_set_uint64(v3, (const char *)(v4 + 32), a1);
  return swift_release();
}

uint64_t sub_1D769F210(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = *(void *)(v4 + 8);
  sub_1D76F8DB4();
  uint64_t v8 = sub_1D76F8054();
  swift_bridgeObjectRelease();
  a4(v7, v8 + 32, a1);
  return swift_release();
}

uint64_t sub_1D769F290(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, char *a5)
{
  v93 = a5;
  uint64_t v98 = a3;
  uint64_t v101 = a2;
  uint64_t v102 = a1;
  v104[12] = *MEMORY[0x1E4F143C0];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34390);
  MEMORY[0x1F4188788](v6 - 8);
  v94 = (void (*)(uint64_t *, uint64_t, uint64_t))((char *)&v90 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v96 = sub_1D76F7D04();
  uint64_t v95 = *(void *)(v96 - 8);
  MEMORY[0x1F4188788](v96);
  v90 = (char *)&v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBA34380);
  uint64_t v10 = MEMORY[0x1F4188788](v9 - 8);
  uint64_t v12 = (char *)&v90 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *((void *)a4 - 1);
  uint64_t v14 = MEMORY[0x1F4188788](v10);
  v91 = (char *)&v90 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188788](v14);
  *(void *)&long long v92 = (char *)&v90 - v17;
  uint64_t v18 = MEMORY[0x1F4188788](v16);
  BOOL v20 = (char *)&v90 - v19;
  MEMORY[0x1F4188788](v18);
  uint64_t v22 = (char *)&v90 - v21;
  uint64_t v23 = sub_1D76F7C94();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x1F4188788](v23);
  char v26 = (char *)&v90 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = *(void (**)(char *, uint64_t, char *))(v13 + 16);
  uint64_t v97 = v13 + 16;
  v27(v22, v102, a4);
  int v28 = swift_dynamicCast();
  BOOL v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56);
  if (v28)
  {
    v29(v12, 0, 1, v23);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v12, 1, v23) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v26, v12, v23);
      uint64_t v30 = (void *)v100[1];
      swift_unknownObjectRetain();
      sub_1D76F8DB4();
      int64_t v31 = sub_1D76BBE1C();
      uint64_t v32 = sub_1D76F8054();
      swift_bridgeObjectRelease();
      xpc_dictionary_set_date(v30, (const char *)(v32 + 32), v31);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
      return swift_release();
    }
  }
  else
  {
    v29(v12, 1, 1, v23);
  }
  sub_1D769AC0C((uint64_t)v12, (uint64_t *)&unk_1EBA34380);
  uint64_t v33 = v102;
  v27(v20, v102, a4);
  uint64_t v34 = (uint64_t)v94;
  uint64_t v35 = v96;
  int v36 = swift_dynamicCast();
  uint64_t v37 = v95;
  long long v38 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v95 + 56);
  if (v36)
  {
    v38(v34, 0, 1, v35);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v34, 1, v35) != 1)
    {
      char v39 = v90;
      (*(void (**)(char *, uint64_t, uint64_t))(v37 + 32))(v90, v34, v35);
      *(void *)&long long v103 = sub_1D76F7CE4();
      WORD4(v103) = v40;
      BYTE10(v103) = v41;
      BYTE11(v103) = v42;
      BYTE12(v103) = v43;
      BYTE13(v103) = v44;
      BYTE14(v103) = v45;
      HIBYTE(v103) = v46;
      sub_1D76A0038((const unsigned __int8 *)&v103, (uint64_t)v104, (uint64_t)v100);
      return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v39, v35);
    }
  }
  else
  {
    v38(v34, 1, 1, v35);
  }
  sub_1D769AC0C(v34, &qword_1EBA34390);
  v27((char *)v92, v33, a4);
  uint64_t v48 = swift_dynamicCast();
  if (v48)
  {
    unint64_t v50 = *((void *)&v103 + 1);
    uint64_t v49 = v103;
    MEMORY[0x1F4188788](v48);
    uint64_t v51 = *(char **)(v98 + 24);
    *(&v90 - 6) = *(char **)(v98 + 16);
    *(&v90 - 5) = a4;
    int64_t v52 = v93;
    *(&v90 - 4) = v51;
    *(&v90 - 3) = v52;
    v88 = v100;
    uint64_t v89 = v101;
    switch(v50 >> 62)
    {
      case 1uLL:
        if (v49 >> 32 < (int)v49) {
          __break(1u);
        }
        swift_retain();
        uint64_t v76 = v99;
        sub_1D76ABFD4((int)v49, v49 >> 32, (uint64_t (*)(uint64_t, uint64_t))sub_1D76AC4E0);
        if (v76) {
          goto LABEL_30;
        }
        sub_1D7699E0C(v49, v50);
        break;
      case 2uLL:
        uint64_t v73 = *(void *)(v49 + 16);
        uint64_t v74 = *(void *)(v49 + 24);
        swift_retain();
        swift_retain();
        uint64_t v75 = v99;
        sub_1D76ABFD4(v73, v74, (uint64_t (*)(uint64_t, uint64_t))sub_1D76AC4E0);
        if (v75)
        {
          swift_release();
          swift_release();
          __break(1u);
LABEL_30:
          sub_1D7699E0C(v49, v50);
          __break(1u);
          JUMPOUT(0x1D76A0028);
        }
        swift_release();
        swift_release();
        break;
      case 3uLL:
        *(void *)((char *)&v103 + 6) = 0;
        *(void *)&long long v103 = 0;
        v53 = (char *)&v103;
        goto LABEL_20;
      default:
        *(void *)&long long v103 = v49;
        WORD4(v103) = v50;
        BYTE10(v103) = BYTE2(v50);
        BYTE11(v103) = BYTE3(v50);
        BYTE12(v103) = BYTE4(v50);
        BYTE13(v103) = BYTE5(v50);
        v53 = (char *)&v104[-2] + BYTE6(v50);
LABEL_20:
        sub_1D76A00D0(&v103, (uint64_t)v53, (uint64_t)v100);
        break;
    }
    return sub_1D7699E0C(v49, v50);
  }
  else
  {
    v27(v91, v33, a4);
    if (swift_dynamicCast())
    {
      uint64_t v54 = (void *)v103;
      v55 = (void *)v100[1];
      swift_unknownObjectRetain();
      sub_1D76F8DB4();
      uint64_t v56 = sub_1D76F8054();
      swift_unknownObjectRetain();
      swift_bridgeObjectRelease();
      xpc_dictionary_set_value(v55, (const char *)(v56 + 32), v54);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease_n();
      return swift_release();
    }
    v94 = (void (*)(uint64_t *, uint64_t, uint64_t))v27;
    uint64_t v57 = *(void *)(*v100 + 24);
    uint64_t v96 = (uint64_t)a4;
    uint64_t v58 = v100[2];
    uint64_t v95 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34C78);
    uint64_t inited = swift_initStackObject();
    long long v92 = xmmword_1D76FA300;
    *(_OWORD *)(inited + 16) = xmmword_1D76FA300;
    uint64_t v60 = v98;
    uint64_t v61 = *(void *)(v98 + 16);
    *(void *)(inited + 56) = v61;
    uint64_t v98 = *(void *)(v60 + 24);
    *(void *)(inited + 64) = v98;
    boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)(inited + 32));
    uint64_t v63 = *(void *)(v61 - 8);
    v64 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v63 + 16);
    v65 = (char *)(v63 + 16);
    v64(boxed_opaque_existential_0Tm, v101, v61);
    *(void *)&long long v103 = v58;
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1D76F76A8(inited);
    uint64_t v66 = v103;
    unint64_t v67 = sub_1D769E554(MEMORY[0x1E4FBC860]);
    uint64_t v68 = type metadata accessor for _XPCObjectEncoder();
    v69 = (void *)swift_allocObject();
    v69[2] = 0;
    v69[3] = v57;
    uint64_t v70 = v96;
    v69[4] = v66;
    v69[5] = v67;
    uint64_t v71 = v102;
    v104[1] = v68;
    v104[2] = sub_1D76AB700(&qword_1EBA347A0, (void (*)(void))type metadata accessor for _XPCObjectEncoder);
    *(void *)&long long v103 = v69;
    swift_retain();
    uint64_t v72 = v99;
    sub_1D76F7F34();
    if (!v72)
    {
      v93 = v65;
      uint64_t v77 = v98;
      uint64_t v78 = v70;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v103);
      v79 = (void *)v69[2];
      if (v79)
      {
        v80 = (void *)v100[1];
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        sub_1D76F8DB4();
        uint64_t v81 = sub_1D76F8054();
        swift_unknownObjectRetain();
        swift_bridgeObjectRelease();
        xpc_dictionary_set_value(v80, (const char *)(v81 + 32), v79);
        swift_release();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease_n();
      }
      else
      {
        v91 = (char *)sub_1D76F8524();
        uint64_t v99 = swift_allocError();
        v83 = v82;
        v90 = (char *)v82 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A8C0) + 48);
        v83[3] = v78;
        v84 = __swift_allocate_boxed_opaque_existential_0Tm(v83);
        v94(v84, v71, v78);
        uint64_t v85 = v100[2];
        uint64_t v86 = swift_initStackObject();
        *(_OWORD *)(v86 + 16) = v92;
        *(void *)(v86 + 56) = v61;
        *(void *)(v86 + 64) = v77;
        v87 = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)(v86 + 32));
        v64(v87, v101, v61);
        *(void *)&long long v103 = v85;
        swift_bridgeObjectRetain();
        sub_1D76F76A8(v86);
        *(void *)&long long v103 = 0;
        *((void *)&v103 + 1) = 0xE000000000000000;
        sub_1D76F8464();
        swift_bridgeObjectRelease();
        *(void *)&long long v103 = 0xD00000000000001FLL;
        *((void *)&v103 + 1) = 0x80000001D76FD110;
        sub_1D76F8DF4();
        sub_1D76F80A4();
        swift_bridgeObjectRelease();
        sub_1D76F84E4();
        (*(void (**)(uint64_t *, void))(*((void *)v91 - 1) + 104))(v83, *MEMORY[0x1E4FBBAA0]);
        swift_willThrow();
      }
      return swift_release();
    }
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v103);
  }
}

uint64_t sub_1D76A0038(const unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void **)(a3 + 8);
  swift_unknownObjectRetain();
  uint64_t result = sub_1D76F8DB4();
  if (a1)
  {
    uint64_t v6 = sub_1D76F8054();
    swift_bridgeObjectRelease();
    xpc_dictionary_set_uuid(v4, (const char *)(v6 + 32), a1);
    swift_unknownObjectRelease();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1D76A00D0(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void **)(a3 + 8);
  swift_unknownObjectRetain();
  uint64_t result = sub_1D76F8DB4();
  if (a1)
  {
    uint64_t v7 = sub_1D76F8054();
    swift_bridgeObjectRelease();
    xpc_dictionary_set_data(v5, (const char *)(v7 + 32), a1, a2 - (void)a1);
    swift_unknownObjectRelease();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1D76A0174(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
  uint64_t v8 = *(void **)(v4 + 8);
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(a3 + 24);
  sub_1D76F8DB4();
  uint64_t v11 = sub_1D76F8054();
  swift_unknownObjectRetain();
  swift_bridgeObjectRelease();
  xpc_dictionary_set_value(v8, (const char *)(v11 + 32), v7);
  swift_unknownObjectRelease();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34C78);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D76FA300;
  *(void *)(inited + 56) = v9;
  *(void *)(inited + 64) = v10;
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)(inited + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(boxed_opaque_existential_0Tm, a2, v9);
  swift_unknownObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1D76F76A8(inited);
  type metadata accessor for XPCObjectKeyedEncodingContainer();
  swift_getWitnessTable();
  sub_1D76F8794();
  return swift_unknownObjectRelease();
}

uint64_t sub_1D76A034C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = v3;
  xpc_object_t v8 = xpc_array_create(0, 0);
  uint64_t v9 = (void *)v4[1];
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v11 = *(void *)(a2 + 24);
  sub_1D76F8DB4();
  uint64_t v12 = sub_1D76F8054();
  swift_unknownObjectRetain();
  swift_bridgeObjectRelease();
  xpc_dictionary_set_value(v9, (const char *)(v12 + 32), v8);
  swift_release();
  uint64_t v13 = *v4;
  uint64_t v14 = v4[2];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34C78);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D76FA300;
  *(void *)(inited + 56) = v10;
  *(void *)(inited + 64) = v11;
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)(inited + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(boxed_opaque_existential_0Tm, a1, v10);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1D76F76A8(inited);
  a3[3] = &type metadata for XPCObjectUnkeyedEncodingContainer;
  a3[4] = sub_1D76ABD64();
  uint64_t result = swift_unknownObjectRelease();
  *a3 = v13;
  a3[1] = v8;
  a3[2] = v14;
  return result;
}

void sub_1D76A04D4()
{
}

void sub_1D76A0530()
{
}

uint64_t sub_1D76A058C()
{
  return sub_1D769ECBC();
}

uint64_t sub_1D76A05A4(char a1)
{
  return sub_1D769ED28(a1);
}

uint64_t sub_1D76A05BC()
{
  return sub_1D769EDA0();
}

uint64_t sub_1D76A05D4(double a1)
{
  return sub_1D769EE34(a1);
}

uint64_t sub_1D76A05EC(float a1)
{
  return sub_1D769EEAC(a1);
}

uint64_t sub_1D76A0604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D769F210(a1, a2, a3, MEMORY[0x1E4F14B70]);
}

uint64_t sub_1D76A0630(char a1)
{
  return sub_1D769EF28(a1);
}

uint64_t sub_1D76A0648(__int16 a1)
{
  return sub_1D769EFA4(a1);
}

uint64_t sub_1D76A0660(int a1)
{
  return sub_1D769F020(a1);
}

uint64_t sub_1D76A0678()
{
  return sub_1D76F8C44();
}

uint64_t sub_1D76A0690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D769F210(a1, a2, a3, MEMORY[0x1E4F14B78]);
}

uint64_t sub_1D76A06BC(unsigned __int8 a1)
{
  return sub_1D769F09C(a1);
}

uint64_t sub_1D76A06D4(unsigned __int16 a1)
{
  return sub_1D769F118(a1);
}

uint64_t sub_1D76A06EC(unsigned int a1)
{
  return sub_1D769F194(a1);
}

uint64_t sub_1D76A0704()
{
  return sub_1D76F8C54();
}

uint64_t sub_1D76A071C(uint64_t a1, uint64_t a2, char *a3, char *a4, uint64_t a5)
{
  return sub_1D769F290(a1, a2, a5, a3, a4);
}

uint64_t sub_1D76A0744()
{
  return sub_1D76F8C34();
}

uint64_t sub_1D76A0770()
{
  return sub_1D76F8BA4();
}

uint64_t sub_1D76A0788()
{
  return sub_1D76F8B94();
}

uint64_t sub_1D76A07A0()
{
  return sub_1D76F8BB4();
}

uint64_t sub_1D76A07BC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D76A09B0(a1, a2, a3, a4, MEMORY[0x1E4FBBFF0]);
}

uint64_t sub_1D76A07E8()
{
  return sub_1D76F8BC4();
}

uint64_t sub_1D76A0804(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D76A0908(a1, a2, a3, a4, MEMORY[0x1E4FBC008]);
}

uint64_t sub_1D76A0830(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D76A095C(a1, a2, a3, a4, MEMORY[0x1E4FBC010]);
}

uint64_t sub_1D76A085C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D76A09B0(a1, a2, a3, a4, MEMORY[0x1E4FBC018]);
}

uint64_t sub_1D76A0888()
{
  return sub_1D76F8BF4();
}

uint64_t sub_1D76A08A4()
{
  return sub_1D76F8C04();
}

uint64_t sub_1D76A08C0()
{
  return sub_1D76F8BD4();
}

uint64_t sub_1D76A08DC(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D76A0908(a1, a2, a3, a4, MEMORY[0x1E4FBC028]);
}

uint64_t sub_1D76A0908(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5(a1 & 0x1FF);
}

uint64_t sub_1D76A0930(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D76A095C(a1, a2, a3, a4, MEMORY[0x1E4FBC038]);
}

uint64_t sub_1D76A095C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5(a1 & 0x1FFFF);
}

uint64_t sub_1D76A0984(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D76A09B0(a1, a2, a3, a4, MEMORY[0x1E4FBC040]);
}

uint64_t sub_1D76A09B0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  return a5(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t sub_1D76A09E0()
{
  return sub_1D76F8C14();
}

uint64_t sub_1D76A09FC()
{
  return sub_1D76F8C24();
}

uint64_t sub_1D76A0A18()
{
  return sub_1D76F8BE4();
}

uint64_t sub_1D76A0A44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1D76A0174(a1, a2, a5);
}

uint64_t sub_1D76A0A64()
{
  uint64_t v1 = sub_1D76F8524();
  swift_allocError();
  uint64_t v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A8C0);
  *(void *)(v3 + 24) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBA34248);
  *(unsigned char *)uint64_t v3 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34C78);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D76FA300;
  size_t count = xpc_array_get_count(*(xpc_object_t *)(v0 + 8));
  sub_1D76F87A4();
  sub_1D76F80A4();
  swift_bridgeObjectRelease();
  *(void *)(inited + 56) = &type metadata for CodableIndexKey;
  *(void *)(inited + 64) = sub_1D76AC504();
  uint64_t v5 = swift_allocObject();
  *(void *)(inited + 32) = v5;
  *(void *)(v5 + 16) = 0x207865646E49;
  *(void *)(v5 + 24) = 0xE600000000000000;
  *(void *)(v5 + 32) = count;
  *(unsigned char *)(v5 + 40) = 0;
  swift_bridgeObjectRetain();
  sub_1D76F76A8(inited);
  sub_1D76F84E4();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v1 - 8) + 104))(v3, *MEMORY[0x1E4FBBAA0], v1);
  return swift_willThrow();
}

uint64_t sub_1D76A0C60(uint64_t a1, uint64_t a2, char *a3)
{
  v90 = a3;
  uint64_t v104 = *MEMORY[0x1E4F143C0];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34390);
  MEMORY[0x1F4188788](v5 - 8);
  v94 = (void (*)(uint64_t *, uint64_t, uint64_t))((char *)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v96 = sub_1D76F7D04();
  uint64_t v95 = *(void *)(v96 - 8);
  MEMORY[0x1F4188788](v96);
  v91 = (char *)&v89 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBA34380);
  uint64_t v9 = MEMORY[0x1F4188788](v8 - 8);
  uint64_t v11 = (char *)&v89 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a2 - 8);
  uint64_t v13 = MEMORY[0x1F4188788](v9);
  long long v92 = (char *)&v89 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188788](v13);
  *(void *)&long long v93 = (char *)&v89 - v16;
  uint64_t v17 = MEMORY[0x1F4188788](v15);
  uint64_t v19 = (char *)&v89 - v18;
  MEMORY[0x1F4188788](v17);
  uint64_t v21 = (char *)&v89 - v20;
  uint64_t v22 = sub_1D76F7C94();
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x1F4188788](v22);
  uint64_t v25 = (char *)&v89 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = *(char **)(v12 + 16);
  uint64_t v26 = v12 + 16;
  uint64_t v97 = a1;
  uint64_t v28 = a1;
  BOOL v29 = v27;
  ((void (*)(char *, uint64_t, uint64_t))v27)(v21, v28, a2);
  uint64_t v30 = a2;
  int v31 = swift_dynamicCast();
  uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56);
  if (v31)
  {
    v32(v11, 0, 1, v22);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v11, 1, v22) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v25, v11, v22);
      uint64_t v33 = (void *)v99[1];
      swift_unknownObjectRetain();
      int64_t v34 = sub_1D76BBE1C();
      xpc_object_t v35 = xpc_date_create(v34);
      xpc_array_append_value(v33, v35);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v25, v22);
    }
  }
  else
  {
    v32(v11, 1, 1, v22);
  }
  sub_1D769AC0C((uint64_t)v11, (uint64_t *)&unk_1EBA34380);
  uint64_t v37 = v97;
  ((void (*)(char *, uint64_t, uint64_t))v29)(v19, v97, a2);
  uint64_t v38 = (uint64_t)v94;
  uint64_t v39 = v96;
  int v40 = swift_dynamicCast();
  uint64_t v41 = v95;
  char v42 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v95 + 56);
  if (v40)
  {
    v42(v38, 0, 1, v39);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v38, 1, v39) != 1)
    {
      char v43 = v91;
      (*(void (**)(char *, uint64_t, uint64_t))(v41 + 32))(v91, v38, v39);
      *(void *)uuid = sub_1D76F7CE4();
      *(_WORD *)&uuid[8] = v44;
      uuid[10] = v45;
      uuid[11] = v46;
      uuid[12] = v47;
      uuid[13] = v48;
      uuid[14] = v49;
      uuid[15] = v50;
      uint64_t v51 = (void *)v99[1];
      swift_unknownObjectRetain();
      xpc_object_t v52 = xpc_uuid_create(uuid);
      xpc_array_append_value(v51, v52);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v43, v39);
    }
  }
  else
  {
    v42(v38, 1, 1, v39);
  }
  sub_1D769AC0C(v38, &qword_1EBA34390);
  ((void (*)(void, uint64_t, uint64_t))v29)(v93, v37, v30);
  if (swift_dynamicCast())
  {
    unint64_t v54 = *(void *)&uuid[8];
    uint64_t v53 = *(void *)uuid;
    uint64_t v55 = v98;
    uint64_t v56 = (uint64_t)v99;
    switch(*(void *)&uuid[8] >> 62)
    {
      case 1:
        if (*(int *)&uuid[4] < (uint64_t)*(int *)uuid) {
          __break(1u);
        }
        swift_retain();
        sub_1D76ABF18((int)v53, v53 >> 32, v54 & 0x3FFFFFFFFFFFFFFFLL, v56);
        if (v55) {
          goto LABEL_30;
        }
        sub_1D7699E0C(v53, v54);
        break;
      case 2:
        uint64_t v74 = *(void *)(*(void *)uuid + 16);
        uint64_t v75 = *(void *)(*(void *)uuid + 24);
        swift_retain();
        swift_retain();
        sub_1D76ABF18(v74, v75, v54 & 0x3FFFFFFFFFFFFFFFLL, v56);
        if (v55)
        {
          swift_release();
          swift_release();
          __break(1u);
LABEL_30:
          sub_1D7699E0C(v53, v54);
          __break(1u);
          JUMPOUT(0x1D76A195CLL);
        }
        swift_release();
        swift_release();
        break;
      case 3:
        *(void *)&uuid[6] = 0;
        *(void *)uuid = 0;
        uint64_t v57 = (void *)v99[1];
        swift_unknownObjectRetain();
        size_t v58 = 0;
        goto LABEL_19;
      default:
        uint64_t v57 = (void *)v99[1];
        swift_unknownObjectRetain();
        size_t v58 = BYTE6(v54);
LABEL_19:
        xpc_object_t v76 = xpc_data_create(uuid, v58);
        xpc_array_append_value(v57, v76);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        break;
    }
    return sub_1D7699E0C(v53, v54);
  }
  else
  {
    ((void (*)(char *, uint64_t, uint64_t))v29)(v92, v37, v30);
    if (swift_dynamicCast())
    {
      xpc_array_append_value((xpc_object_t)v99[1], *(xpc_object_t *)uuid);
      return swift_unknownObjectRelease();
    }
    else
    {
      v94 = (void (*)(uint64_t *, uint64_t, uint64_t))v29;
      uint64_t v95 = v26;
      uint64_t v59 = *(void *)(*v99 + 24);
      uint64_t v60 = v99[2];
      uint64_t v96 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34C78);
      uint64_t inited = swift_initStackObject();
      long long v93 = xmmword_1D76FA300;
      *(_OWORD *)(inited + 16) = xmmword_1D76FA300;
      swift_retain();
      swift_bridgeObjectRetain_n();
      swift_retain();
      v62 = (void *)swift_unknownObjectRetain();
      size_t count = xpc_array_get_count(v62);
      *(void *)uuid = 0x207865646E49;
      *(void *)&uuid[8] = 0xE600000000000000;
      size_t v100 = count;
      sub_1D76F87A4();
      uint64_t v89 = v30;
      sub_1D76F80A4();
      swift_bridgeObjectRelease();
      long long v64 = *(_OWORD *)uuid;
      *(void *)(inited + 56) = &type metadata for CodableIndexKey;
      unint64_t v65 = sub_1D76AC504();
      *(void *)(inited + 64) = v65;
      uint64_t v66 = swift_allocObject();
      *(void *)(inited + 32) = v66;
      *(_OWORD *)(v66 + 16) = v64;
      *(void *)(v66 + 32) = count;
      *(unsigned char *)(v66 + 40) = 0;
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_release();
      *(void *)uuid = v60;
      sub_1D76F76A8(inited);
      uint64_t v67 = *(void *)uuid;
      unint64_t v68 = sub_1D769E554(MEMORY[0x1E4FBC860]);
      uint64_t v69 = type metadata accessor for _XPCObjectEncoder();
      uint64_t v70 = (void *)swift_allocObject();
      v70[2] = 0;
      v70[3] = v59;
      v70[4] = v67;
      v70[5] = v68;
      uint64_t v71 = v97;
      uint64_t v72 = v89;
      uint64_t v102 = v69;
      uint64_t v103 = sub_1D76AB700(&qword_1EBA347A0, (void (*)(void))type metadata accessor for _XPCObjectEncoder);
      *(void *)uuid = v70;
      swift_retain();
      uint64_t v73 = v98;
      sub_1D76F7F34();
      if (v73)
      {
        swift_release();
        return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)uuid);
      }
      else
      {
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)uuid);
        uint64_t v77 = (void *)v70[2];
        if (v77)
        {
          xpc_array_append_value((xpc_object_t)v99[1], v77);
        }
        else
        {
          long long v92 = (char *)sub_1D76F8524();
          uint64_t v98 = swift_allocError();
          v79 = v78;
          uint64_t v80 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A8C0) + 48);
          v91 = (char *)v79;
          v90 = (char *)v79 + v80;
          v79[3] = v72;
          boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(v79);
          v94(boxed_opaque_existential_0Tm, v71, v72);
          v82 = v99;
          uint64_t v83 = v99[2];
          uint64_t v84 = swift_initStackObject();
          *(_OWORD *)(v84 + 16) = v93;
          uint64_t v97 = *v82;
          swift_bridgeObjectRetain_n();
          swift_retain();
          uint64_t v85 = (void *)swift_unknownObjectRetain();
          size_t v86 = xpc_array_get_count(v85);
          *(void *)uuid = 0x207865646E49;
          *(void *)&uuid[8] = 0xE600000000000000;
          size_t v100 = v86;
          sub_1D76F87A4();
          sub_1D76F80A4();
          swift_bridgeObjectRelease();
          long long v87 = *(_OWORD *)uuid;
          *(void *)(v84 + 56) = &type metadata for CodableIndexKey;
          *(void *)(v84 + 64) = v65;
          uint64_t v88 = swift_allocObject();
          *(void *)(v84 + 32) = v88;
          *(_OWORD *)(v88 + 16) = v87;
          *(void *)(v88 + 32) = v86;
          *(unsigned char *)(v88 + 40) = 0;
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          swift_release();
          *(void *)uuid = v83;
          sub_1D76F76A8(v84);
          *(void *)uuid = 0;
          *(void *)&uuid[8] = 0xE000000000000000;
          sub_1D76F8464();
          swift_bridgeObjectRelease();
          *(void *)uuid = 0xD00000000000001FLL;
          *(void *)&uuid[8] = 0x80000001D76FD110;
          sub_1D76F8DF4();
          sub_1D76F80A4();
          swift_bridgeObjectRelease();
          sub_1D76F84E4();
          (*(void (**)(char *, void))(*((void *)v92 - 1) + 104))(v91, *MEMORY[0x1E4FBBAA0]);
          swift_willThrow();
        }
        return swift_release();
      }
    }
  }
}

uint64_t sub_1D76A196C()
{
  xpc_object_t v1 = xpc_dictionary_create(0, 0, 0);
  uint64_t v2 = *(void **)(v0 + 8);
  xpc_array_append_value(v2, v1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34C78);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D76FA300;
  swift_unknownObjectRetain();
  swift_retain();
  size_t count = xpc_array_get_count(v2);
  sub_1D76F87A4();
  sub_1D76F80A4();
  swift_bridgeObjectRelease();
  *(void *)(inited + 56) = &type metadata for CodableIndexKey;
  *(void *)(inited + 64) = sub_1D76AC504();
  uint64_t v4 = swift_allocObject();
  *(void *)(inited + 32) = v4;
  *(void *)(v4 + 16) = 0x207865646E49;
  *(void *)(v4 + 24) = 0xE600000000000000;
  *(void *)(v4 + 32) = count;
  *(unsigned char *)(v4 + 40) = 0;
  swift_bridgeObjectRetain();
  sub_1D76F76A8(inited);
  type metadata accessor for XPCObjectKeyedEncodingContainer();
  swift_getWitnessTable();
  sub_1D76F8794();
  return swift_unknownObjectRelease();
}

uint64_t sub_1D76A1B48@<X0>(void *a1@<X8>)
{
  xpc_object_t v3 = xpc_array_create(0, 0);
  uint64_t v4 = (void *)v1[1];
  xpc_array_append_value(v4, v3);
  uint64_t v5 = *v1;
  uint64_t v6 = v1[2];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34C78);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D76FA300;
  swift_unknownObjectRetain();
  swift_retain();
  size_t count = xpc_array_get_count(v4);
  sub_1D76F87A4();
  sub_1D76F80A4();
  swift_bridgeObjectRelease();
  *(void *)(inited + 56) = &type metadata for CodableIndexKey;
  *(void *)(inited + 64) = sub_1D76AC504();
  uint64_t v8 = swift_allocObject();
  *(void *)(inited + 32) = v8;
  *(void *)(v8 + 16) = 0x207865646E49;
  *(void *)(v8 + 24) = 0xE600000000000000;
  *(void *)(v8 + 32) = count;
  *(unsigned char *)(v8 + 40) = 0;
  swift_bridgeObjectRetain();
  sub_1D76F76A8(inited);
  a1[3] = &type metadata for XPCObjectUnkeyedEncodingContainer;
  a1[4] = sub_1D76ABD64();
  uint64_t result = swift_unknownObjectRelease();
  *a1 = v5;
  a1[1] = v3;
  a1[2] = v6;
  return result;
}

size_t sub_1D76A1CDC()
{
  return xpc_array_get_count(*(xpc_object_t *)(v0 + 8));
}

uint64_t sub_1D76A1CE4()
{
  return sub_1D76A0A64();
}

uint64_t sub_1D76A1CFC(char a1)
{
  uint64_t v2 = *(void **)(v1 + 8);
  xpc_object_t v3 = xpc_BOOL_create(a1 & 1);
  xpc_array_append_value(v2, v3);
  return swift_unknownObjectRelease();
}

uint64_t sub_1D76A1D4C()
{
  uint64_t v1 = *(void **)(v0 + 8);
  uint64_t v2 = sub_1D76F8054();
  xpc_object_t v3 = xpc_string_create((const char *)(v2 + 32));
  swift_release();
  xpc_array_append_value(v1, v3);
  return swift_unknownObjectRelease();
}

uint64_t sub_1D76A1DAC(double a1)
{
  uint64_t v2 = *(void **)(v1 + 8);
  xpc_object_t v3 = xpc_double_create(a1);
  xpc_array_append_value(v2, v3);
  return swift_unknownObjectRelease();
}

uint64_t sub_1D76A1DF8(float a1)
{
  uint64_t v2 = *(void **)(v1 + 8);
  xpc_object_t v3 = xpc_double_create(a1);
  xpc_array_append_value(v2, v3);
  return swift_unknownObjectRelease();
}

uint64_t sub_1D76A1E48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D76A2098(a1, a2, a3, MEMORY[0x1E4F14B80]);
}

uint64_t sub_1D76A1E74(char a1)
{
  uint64_t v2 = *(void **)(v1 + 8);
  xpc_object_t v3 = xpc_int64_create(a1);
  xpc_array_append_value(v2, v3);
  return swift_unknownObjectRelease();
}

uint64_t sub_1D76A1EC4(__int16 a1)
{
  uint64_t v2 = *(void **)(v1 + 8);
  xpc_object_t v3 = xpc_int64_create(a1);
  xpc_array_append_value(v2, v3);
  return swift_unknownObjectRelease();
}

uint64_t sub_1D76A1F14(int a1)
{
  uint64_t v2 = *(void **)(v1 + 8);
  xpc_object_t v3 = xpc_int64_create(a1);
  xpc_array_append_value(v2, v3);
  return swift_unknownObjectRelease();
}

uint64_t sub_1D76A1F64()
{
  return sub_1D76F8994();
}

uint64_t sub_1D76A1F7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D76A2098(a1, a2, a3, MEMORY[0x1E4F14BA8]);
}

uint64_t sub_1D76A1FA8(unsigned __int8 a1)
{
  uint64_t v2 = *(void **)(v1 + 8);
  xpc_object_t v3 = xpc_uint64_create(a1);
  xpc_array_append_value(v2, v3);
  return swift_unknownObjectRelease();
}

uint64_t sub_1D76A1FF8(unsigned __int16 a1)
{
  uint64_t v2 = *(void **)(v1 + 8);
  xpc_object_t v3 = xpc_uint64_create(a1);
  xpc_array_append_value(v2, v3);
  return swift_unknownObjectRelease();
}

uint64_t sub_1D76A2048(uint64_t value)
{
  uint64_t v2 = *(void **)(v1 + 8);
  xpc_object_t v3 = xpc_uint64_create(value);
  xpc_array_append_value(v2, v3);
  return swift_unknownObjectRelease();
}

uint64_t sub_1D76A2098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v5 = *(void **)(v4 + 8);
  uint64_t v6 = (void *)a4();
  xpc_array_append_value(v5, v6);
  return swift_unknownObjectRelease();
}

uint64_t sub_1D76A20E8()
{
  return sub_1D76F89A4();
}

uint64_t sub_1D76A2100(uint64_t a1, uint64_t a2, char *a3)
{
  return sub_1D76A0C60(a1, a2, a3);
}

uint64_t sub_1D76A2118()
{
  return sub_1D76F8874();
}

uint64_t sub_1D76A2144()
{
  return sub_1D76F88A4();
}

uint64_t sub_1D76A2170()
{
  return sub_1D76F8894();
}

uint64_t sub_1D76A219C()
{
  return sub_1D76F88B4();
}

uint64_t sub_1D76A21C8()
{
  return sub_1D76F88C4();
}

uint64_t sub_1D76A21F4()
{
  return sub_1D76F88D4();
}

uint64_t sub_1D76A2220()
{
  return sub_1D76F88F4();
}

uint64_t sub_1D76A224C()
{
  return sub_1D76F8904();
}

uint64_t sub_1D76A2278()
{
  return sub_1D76F8914();
}

uint64_t sub_1D76A22A4()
{
  return sub_1D76F8924();
}

uint64_t sub_1D76A22D0()
{
  return sub_1D76F8944();
}

uint64_t sub_1D76A22FC()
{
  return sub_1D76F88E4();
}

uint64_t sub_1D76A2328()
{
  return sub_1D76F8934();
}

uint64_t sub_1D76A2354()
{
  return sub_1D76F8954();
}

uint64_t sub_1D76A2380()
{
  return sub_1D76F8964();
}

uint64_t sub_1D76A23AC()
{
  return sub_1D76F8974();
}

uint64_t sub_1D76A23D8()
{
  return sub_1D76F8984();
}

uint64_t sub_1D76A2404()
{
  return sub_1D76F8884();
}

void sub_1D76A2440()
{
}

uint64_t sub_1D76A249C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v88 = a3;
  uint64_t v97 = a1;
  uint64_t v103 = *MEMORY[0x1E4F143C0];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34390);
  MEMORY[0x1F4188788](v6 - 8);
  long long v93 = (char *)&v88 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1D76F7D04();
  uint64_t v94 = *(void *)(v8 - 8);
  uint64_t v95 = (void (*)(void, void, void))v8;
  MEMORY[0x1F4188788](v8);
  uint64_t v89 = (char *)&v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBA34380);
  uint64_t v11 = MEMORY[0x1F4188788](v10 - 8);
  uint64_t v13 = (char *)&v88 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(a2 - 8);
  uint64_t v15 = MEMORY[0x1F4188788](v11);
  v90 = (char *)&v88 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188788](v15);
  v91 = (char *)&v88 - v18;
  uint64_t v19 = MEMORY[0x1F4188788](v17);
  uint64_t v21 = (char *)&v88 - v20;
  MEMORY[0x1F4188788](v19);
  uint64_t v23 = (char *)&v88 - v22;
  uint64_t v24 = sub_1D76F7C94();
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x1F4188788](v24);
  uint64_t v27 = (char *)&v88 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = v4;
  if (*(void *)(*v4 + 16))
  {
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
  }
  long long v92 = v21;
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  uint64_t v29 = v97;
  uint64_t v96 = v14 + 16;
  v28(v23, v97, a2);
  uint64_t v30 = v28;
  int v31 = swift_dynamicCast();
  uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56);
  uint64_t v33 = a2;
  if (v31)
  {
    v32(v13, 0, 1, v24);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v13, 1, v24) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v27, v13, v24);
      uint64_t v34 = *v98;
      int64_t v35 = sub_1D76BBE1C();
      xpc_object_t v36 = xpc_date_create(v35);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v24);
      *(void *)(v34 + 16) = v36;
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    v32(v13, 1, 1, v24);
  }
  sub_1D769AC0C((uint64_t)v13, (uint64_t *)&unk_1EBA34380);
  v30(v92, v29, a2);
  uint64_t v37 = (uint64_t)v93;
  uint64_t v38 = v95;
  int v39 = swift_dynamicCast();
  uint64_t v40 = v94;
  uint64_t v41 = *(void (**)(uint64_t, uint64_t, uint64_t, void (*)(void, void, void)))(v94 + 56);
  if (v39)
  {
    v41(v37, 0, 1, v38);
    if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v40 + 48))(v37, 1, v38) != 1)
    {
      uint64_t v42 = v37;
      char v43 = v89;
      (*(void (**)(char *, uint64_t, void))(v40 + 32))(v89, v42, v38);
      uint64_t v44 = *v98;
      *(void *)uuid = sub_1D76F7CE4();
      *(_WORD *)&uuid[8] = v45;
      uuid[10] = v46;
      uuid[11] = v47;
      uuid[12] = v48;
      uuid[13] = v49;
      uuid[14] = v50;
      uuid[15] = v51;
      xpc_object_t v52 = xpc_uuid_create(uuid);
      (*(void (**)(char *, void (*)(void, void, void)))(v40 + 8))(v43, v38);
      *(void *)(v44 + 16) = v52;
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    v41(v37, 1, 1, v38);
  }
  sub_1D769AC0C(v37, &qword_1EBA34390);
  v30(v91, v29, a2);
  if (swift_dynamicCast())
  {
    long long v53 = *(_OWORD *)uuid;
    uint64_t v54 = *v98;
    switch(*(void *)&uuid[8] >> 62)
    {
      case 1:
        uint64_t v67 = *(int *)&uuid[4] - (uint64_t)*(int *)uuid;
        if (*(int *)&uuid[4] < (uint64_t)*(int *)uuid) {
          goto LABEL_48;
        }
        sub_1D76ABEC0(*(uint64_t *)uuid, *(unint64_t *)&uuid[8]);
        unint64_t v68 = (char *)sub_1D76F7AC4();
        if (!v68) {
          goto LABEL_21;
        }
        uint64_t v69 = sub_1D76F7AE4();
        if (__OFSUB__((int)v53, v69)) {
          goto LABEL_50;
        }
        v68 += (int)v53 - v69;
LABEL_21:
        uint64_t v70 = sub_1D76F7AD4();
        if (v70 >= v67) {
          uint64_t v71 = ((uint64_t)v53 >> 32) - (int)v53;
        }
        else {
          uint64_t v71 = v70;
        }
        if (v68) {
          size_t v72 = v71;
        }
        else {
          size_t v72 = 0;
        }
        xpc_object_t v73 = xpc_data_create(v68, v72);
        sub_1D7699E0C(v53, *((unint64_t *)&v53 + 1));
        break;
      case 2:
        uint64_t v74 = *(void *)(*(void *)uuid + 16);
        uint64_t v75 = *(void *)(*(void *)uuid + 24);
        swift_retain();
        swift_retain();
        xpc_object_t v76 = (char *)sub_1D76F7AC4();
        if (!v76) {
          goto LABEL_31;
        }
        uint64_t v77 = sub_1D76F7AE4();
        if (__OFSUB__(v74, v77)) {
          goto LABEL_51;
        }
        v76 += v74 - v77;
LABEL_31:
        BOOL v78 = __OFSUB__(v75, v74);
        uint64_t v79 = v75 - v74;
        if (v78) {
          goto LABEL_49;
        }
        uint64_t v80 = sub_1D76F7AD4();
        if (v80 >= v79) {
          size_t v81 = v79;
        }
        else {
          size_t v81 = v80;
        }
        if (v76) {
          size_t v82 = v81;
        }
        else {
          size_t v82 = 0;
        }
        xpc_object_t v73 = xpc_data_create(v76, v82);
        swift_release();
        swift_release();
        break;
      case 3:
        *(void *)&uuid[6] = 0;
        *(void *)uuid = 0;
        size_t v55 = 0;
        goto LABEL_40;
      default:
        size_t v55 = uuid[14];
LABEL_40:
        xpc_object_t v73 = xpc_data_create(uuid, v55);
        break;
    }
    sub_1D7699E0C(v53, *((unint64_t *)&v53 + 1));
    *(void *)(v54 + 16) = v73;
  }
  else
  {
    uint64_t v95 = (void (*)(void, void, void))v30;
    v30(v90, v29, a2);
    int v56 = swift_dynamicCast();
    uint64_t v57 = v29;
    uint64_t v58 = v33;
    uint64_t v59 = v98;
    if (v56)
    {
      *(void *)(*v98 + 16) = *(void *)uuid;
    }
    else
    {
      uint64_t v60 = v98[1];
      uint64_t v61 = *(void *)(*v98 + 24);
      uint64_t v62 = *(void *)(*v98 + 40);
      uint64_t v63 = type metadata accessor for _XPCObjectEncoder();
      long long v64 = (void *)swift_allocObject();
      v64[2] = 0;
      v64[3] = v61;
      v64[4] = v60;
      v64[5] = v62;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v101 = v63;
      uint64_t v102 = sub_1D76AB700(&qword_1EBA347A0, (void (*)(void))type metadata accessor for _XPCObjectEncoder);
      *(void *)uuid = v64;
      swift_retain();
      uint64_t v65 = v99;
      sub_1D76F7F34();
      if (v65)
      {
        swift_release();
        return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)uuid);
      }
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)uuid);
      uint64_t v83 = v64[2];
      if (!v83)
      {
        uint64_t v84 = sub_1D76F8524();
        uint64_t v99 = swift_allocError();
        size_t v86 = v85;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A8C0);
        v86[3] = v58;
        boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(v86);
        v95(boxed_opaque_existential_0Tm, v57, v58);
        *(void *)uuid = 0;
        *(void *)&uuid[8] = 0xE000000000000000;
        swift_bridgeObjectRetain();
        sub_1D76F8464();
        swift_bridgeObjectRelease();
        *(void *)uuid = 0xD00000000000001FLL;
        *(void *)&uuid[8] = 0x80000001D76FD110;
        sub_1D76F8DF4();
        sub_1D76F80A4();
        swift_bridgeObjectRelease();
        sub_1D76F84E4();
        (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v84 - 8) + 104))(v86, *MEMORY[0x1E4FBBAA0], v84);
        swift_willThrow();
        return swift_release();
      }
      swift_unknownObjectRetain();
      swift_release();
      *(void *)(*v59 + 16) = v83;
    }
  }
  return swift_unknownObjectRelease();
}

uint64_t sub_1D76A2EE4()
{
  return swift_bridgeObjectRetain();
}

void sub_1D76A2EEC()
{
  uint64_t v1 = *v0;
  if (*(void *)(v1 + 16))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v1 + 16) = xpc_null_create();
    swift_unknownObjectRelease();
  }
}

uint64_t sub_1D76A2F34(uint64_t result)
{
  uint64_t v2 = *v1;
  if (*(void *)(v2 + 16))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v2 + 16) = xpc_BOOL_create(result & 1);
    return swift_unknownObjectRelease();
  }
  return result;
}

void sub_1D76A2F80()
{
  uint64_t v1 = *v0;
  if (*(void *)(*v0 + 16))
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = sub_1D76F8054();
    xpc_object_t v3 = xpc_string_create((const char *)(v2 + 32));
    swift_release();
    *(void *)(v1 + 16) = v3;
    swift_unknownObjectRelease();
  }
}

void sub_1D76A2FE4(double a1)
{
  uint64_t v2 = *v1;
  if (*(void *)(v2 + 16))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v2 + 16) = xpc_double_create(a1);
    swift_unknownObjectRelease();
  }
}

void sub_1D76A302C(float a1)
{
  uint64_t v2 = *v1;
  if (*(void *)(v2 + 16))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v2 + 16) = xpc_double_create(a1);
    swift_unknownObjectRelease();
  }
}

void sub_1D76A3078(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1D76A30A4(uint64_t result)
{
  uint64_t v2 = *v1;
  if (*(void *)(v2 + 16))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v2 + 16) = xpc_int64_create((char)result);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1D76A30F0(uint64_t result)
{
  uint64_t v2 = *v1;
  if (*(void *)(v2 + 16))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v2 + 16) = xpc_int64_create((__int16)result);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1D76A313C(uint64_t result)
{
  uint64_t v2 = *v1;
  if (*(void *)(v2 + 16))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v2 + 16) = xpc_int64_create((int)result);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1D76A3188()
{
  return sub_1D76F8A34();
}

void sub_1D76A31A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1D76A31CC(uint64_t result)
{
  uint64_t v2 = *v1;
  if (*(void *)(v2 + 16))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v2 + 16) = xpc_uint64_create(result);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1D76A3218(uint64_t result)
{
  uint64_t v2 = *v1;
  if (*(void *)(v2 + 16))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v2 + 16) = xpc_uint64_create((unsigned __int16)result);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1D76A3264(uint64_t value)
{
  uint64_t v2 = *v1;
  if (*(void *)(v2 + 16))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v2 + 16) = xpc_uint64_create(value);
    return swift_unknownObjectRelease();
  }
  return value;
}

void sub_1D76A32B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v5 = *v4;
  if (*(void *)(v5 + 16))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v5 + 16) = a4();
    swift_unknownObjectRelease();
  }
}

uint64_t sub_1D76A32FC()
{
  return sub_1D76F8A44();
}

uint64_t sub_1D76A3314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D76A249C(a1, a2, a3);
}

uint64_t XPCObjectDecoder.underlyingConnection.getter()
{
  return swift_retain();
}

uint64_t XPCObjectDecoder.__allocating_init()()
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  return result;
}

uint64_t XPCObjectDecoder.init()()
{
  uint64_t result = v0;
  *(void *)(v0 + 16) = 0;
  return result;
}

uint64_t XPCObjectDecoder.__allocating_init(underlyingConnection:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t XPCObjectDecoder.init(underlyingConnection:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

uint64_t _s7Mercury16XPCObjectEncoderC20underlyingConnectionACSo13OS_xpc_object_p_tcfC_0(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  self;
  uint64_t v3 = swift_dynamicCastObjCClass();
  if (v3)
  {
    uint64_t v4 = v3;
    type metadata accessor for RemoteXPCPeerConnection();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 72) = 0;
    *(void *)(v5 + 48) = 0;
    *(void *)(v5 + 56) = 0;
    *(unsigned char *)(v5 + 64) = 0;
    *(void *)(v5 + 32) = 0;
    *(void *)(v5 + 40) = 0;
    *(void *)(v5 + 24) = v4;
  }
  else
  {
    type metadata accessor for SystemXPCPeerConnection();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 32) = 0;
    *(void *)(v5 + 40) = 0;
    *(void *)(v5 + 24) = a1;
  }
  *(void *)(v5 + 16) = MEMORY[0x1E4FBC860];
  *(void *)(v2 + 16) = v5;
  return v2;
}

uint64_t _s7Mercury16XPCObjectEncoderC20underlyingConnectionACSo13OS_xpc_object_p_tcfc_0(uint64_t a1)
{
  self;
  uint64_t v3 = swift_dynamicCastObjCClass();
  if (v3)
  {
    uint64_t v4 = v3;
    type metadata accessor for RemoteXPCPeerConnection();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 72) = 0;
    *(void *)(v5 + 48) = 0;
    *(void *)(v5 + 56) = 0;
    *(unsigned char *)(v5 + 64) = 0;
    *(void *)(v5 + 32) = 0;
    *(void *)(v5 + 40) = 0;
    *(void *)(v5 + 24) = v4;
  }
  else
  {
    type metadata accessor for SystemXPCPeerConnection();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 32) = 0;
    *(void *)(v5 + 40) = 0;
    *(void *)(v5 + 24) = a1;
  }
  *(void *)(v5 + 16) = MEMORY[0x1E4FBC860];
  *(void *)(v1 + 16) = v5;
  return v1;
}

uint64_t XPCObjectDecoder.decode<A>(_:from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(v2 + 16);
  swift_retain();
  swift_unknownObjectRetain();
  uint64_t v5 = MEMORY[0x1E4FBC860];
  unint64_t v6 = sub_1D769E554(MEMORY[0x1E4FBC860]);
  type metadata accessor for _XPCObjectDecoder();
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = a2;
  v7[3] = v4;
  v7[4] = v5;
  v7[5] = v6;
  sub_1D76AB700((unint64_t *)&unk_1EBA346D0, (void (*)(void))type metadata accessor for _XPCObjectDecoder);
  return sub_1D76F8254();
}

uint64_t XPCObjectDecoder.decode<A>(_:from:)()
{
  return XPCDictionary.withUnsafeUnderlyingDictionary<A>(_:)(sub_1D76AB744);
}

uint64_t XPCObjectDecoder.deinit()
{
  swift_release();
  return v0;
}

uint64_t _s7Mercury16XPCObjectEncoderCfD_0()
{
  swift_release();

  return MEMORY[0x1F4186488](v0, 24, 7);
}

uint64_t sub_1D76A36B8(uint64_t a1, uint64_t *a2)
{
  return XPCObjectDecoder.decode<A>(_:from:)(a1, *a2);
}

uint64_t sub_1D76A36E0(uint64_t a1, uint64_t a2)
{
  if (MEMORY[0x1D94771B0](*(void *)(v2 + 16)) == XPCTypeDictionary)
  {
    type metadata accessor for XPCObjectKeyedDecodingContainer();
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    return sub_1D76F86F4();
  }
  else
  {
    uint64_t v4 = sub_1D76F8504();
    swift_allocError();
    unint64_t v6 = v5;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34240);
    *unint64_t v6 = a2;
    swift_bridgeObjectRetain();
    sub_1D76F84E4();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v4 - 8) + 104))(v6, *MEMORY[0x1E4FBBA70], v4);
    return swift_willThrow();
  }
}

uint64_t sub_1D76A3868@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  if (MEMORY[0x1D94771B0](v3) == XPCTypeArray)
  {
    uint64_t v8 = *(void *)(v1 + 32);
    a1[3] = &type metadata for XPCObjectUnkeyedDecodingContainer;
    a1[4] = sub_1D76ABE0C();
    uint64_t v9 = (void *)swift_allocObject();
    *a1 = v9;
    v9[2] = v1;
    v9[3] = v3;
    v9[4] = v8;
    v9[5] = 0;
    swift_unknownObjectRetain();
    swift_retain();
    return swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v4 = sub_1D76F8504();
    swift_allocError();
    unint64_t v6 = v5;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34240);
    *unint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A648);
    swift_bridgeObjectRetain();
    sub_1D76F84E4();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v4 - 8) + 104))(v6, *MEMORY[0x1E4FBBA70], v4);
    return swift_willThrow();
  }
}

uint64_t sub_1D76A39CC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D76A39D8()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D76A39E4(uint64_t a1, uint64_t a2)
{
  return sub_1D76A36E0(a1, a2);
}

uint64_t sub_1D76A3A08@<X0>(void *a1@<X8>)
{
  return sub_1D76A3868(a1);
}

uint64_t sub_1D76A3A2C@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(v3 + 16);
  uint64_t v5 = *(void *)(v3 + 32);
  a1[3] = &type metadata for XPCObjectSingleValueDecodingContainer;
  a1[4] = sub_1D76ABDB8();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  swift_unknownObjectRetain();
  swift_retain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D76A3AA4()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1D76A3AD4@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  return result;
}

uint64_t sub_1D76A3B08()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_1D76A3B14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1D76F87A4();
  sub_1D76F80A4();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = 0x207865646E49;
  *(void *)(a2 + 8) = 0xE600000000000000;
  *(void *)(a2 + 16) = a1;
  *(unsigned char *)(a2 + 24) = 0;
  return result;
}

uint64_t sub_1D76A3B9C(uint64_t a1)
{
  unint64_t v2 = sub_1D76AC504();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1D76A3BD8(uint64_t a1)
{
  unint64_t v2 = sub_1D76AC504();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1D76A3C14(uint64_t a1, void *a2)
{
  uint64_t v9 = MEMORY[0x1E4FBC860];
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = &v9;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = sub_1D76ACECC;
  *(void *)(v4 + 24) = v3;
  aBlock[4] = sub_1D76AD01C;
  aBlock[5] = v4;
  aBlock[0] = MEMORY[0x1E4F143A0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1D769E44C;
  aBlock[3] = &block_descriptor_99;
  uint64_t v5 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  xpc_dictionary_apply(a2, v5);
  _Block_release(v5);
  LOBYTE(a2) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (a2)
  {
    __break(1u);
  }
  else
  {
    aBlock[0] = v9;
    MEMORY[0x1F4188788](v9);
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33EB0);
    sub_1D76ACF48();
    uint64_t v7 = sub_1D76F8144();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    return v7;
  }
  return result;
}

uint64_t sub_1D76A3E14(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t result = sub_1D76F7FA4();
  if (v5)
  {
    uint64_t v6 = result;
    uint64_t v7 = v5;
    uint64_t v8 = *a3;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a3 = v8;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v8 = sub_1D76E0404(0, v8[2] + 1, 1, v8);
      *a3 = v8;
    }
    unint64_t v11 = v8[2];
    unint64_t v10 = v8[3];
    if (v11 >= v10 >> 1)
    {
      uint64_t v8 = sub_1D76E0404((void *)(v10 > 1), v11 + 1, 1, v8);
      *a3 = v8;
    }
    v8[2] = v11 + 1;
    uint64_t v12 = &v8[2 * v11];
    v12[4] = v6;
    void v12[5] = v7;
    return 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

xpc_object_t sub_1D76A3ED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  sub_1D76F8DB4();
  uint64_t v11 = sub_1D76F8054();
  swift_bridgeObjectRelease();
  xpc_object_t v12 = xpc_dictionary_get_value(a5, (const char *)(v11 + 32));
  swift_release();
  if (v12)
  {
    if (MEMORY[0x1D94771B0](v12) != a2)
    {
      v19[3] = swift_getObjectType();
      v19[0] = v12;
      sub_1D76F8504();
      swift_allocError();
      uint64_t v14 = v13;
      type metadata accessor for XPCObjectKeyedDecodingContainer();
      swift_unknownObjectRetain();
      swift_getWitnessTable();
      static DecodingError.typeMismatchError<A>(expecting:butFound:forKey:in:debugDescription:)(a1, (uint64_t)v19, a3, 0, v14);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v19);
      swift_willThrow();
      swift_unknownObjectRelease();
    }
  }
  else
  {
    v19[0] = a4;
    v19[1] = a5;
    v19[2] = a6;
    sub_1D76F8504();
    swift_allocError();
    uint64_t v16 = v15;
    type metadata accessor for XPCObjectKeyedDecodingContainer();
    swift_getWitnessTable();
    static DecodingError.keyNotFoundError<A>(expecting:in:debugDescription:)(a3, 0, 0, v16);
    swift_willThrow();
  }
  return v12;
}

xpc_object_t sub_1D76A40D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t *a11, uint64_t (*a12)(void), void (*a13)(uint64_t))
{
  uint64_t v42 = a5;
  uint64_t v32 = a9;
  uint64_t v20 = sub_1D76F83A4();
  uint64_t v31 = *(void *)(v20 - 8);
  MEMORY[0x1F4188788](v20);
  uint64_t v34 = (char *)v30 - v21;
  uint64_t v22 = *a11;
  uint64_t v35 = a1;
  uint64_t v33 = a7;
  uint64_t v23 = v36;
  xpc_object_t result = sub_1D76A3ED4(a1, v22, a2, a3, a4, v42);
  if (!v23)
  {
    v30[0] = v20;
    v30[1] = a6;
    v30[2] = a8;
    uint64_t v36 = a2;
    uint64_t v25 = a12();
    uint64_t v26 = swift_unknownObjectRelease();
    uint64_t v39 = v25;
    a13(v26);
    uint64_t v27 = v34;
    uint64_t v28 = v33;
    sub_1D76F8264();
    uint64_t v29 = *(void *)(v28 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28) == 1)
    {
      (*(void (**)(char *, void))(v31 + 8))(v27, v30[0]);
      uint64_t v39 = a3;
      uint64_t v40 = a4;
      uint64_t v41 = v42;
      unint64_t v37 = 0;
      unint64_t v38 = 0xE000000000000000;
      sub_1D76F8464();
      swift_bridgeObjectRelease();
      unint64_t v37 = 0xD000000000000015;
      unint64_t v38 = 0x80000001D76FD360;
      sub_1D76F8DF4();
      sub_1D76F80A4();
      swift_bridgeObjectRelease();
      sub_1D76F8504();
      swift_allocError();
      type metadata accessor for XPCObjectKeyedDecodingContainer();
      swift_getWitnessTable();
      sub_1D76F84D4();
      swift_bridgeObjectRelease();
      return (xpc_object_t)swift_willThrow();
    }
    else
    {
      return (xpc_object_t)(*(uint64_t (**)(uint64_t, char *, uint64_t))(v29 + 32))(v32, v27, v28);
    }
  }
  return result;
}

BOOL sub_1D76A43F0(uint64_t a1, uint64_t a2, void *a3)
{
  sub_1D76F8DB4();
  uint64_t v4 = sub_1D76F8054();
  swift_bridgeObjectRelease();
  xpc_object_t v5 = xpc_dictionary_get_value(a3, (const char *)(v4 + 32));
  swift_release();
  if (v5) {
    swift_unknownObjectRelease();
  }
  return v5 != 0;
}

BOOL sub_1D76A4470(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v9 = sub_1D76F8504();
  uint64_t v19 = *(void *)(v9 - 8);
  MEMORY[0x1F4188788](v9);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBA34248);
  sub_1D76A3ED4(v12, XPCTypeNull, a1, a2, a3, a4);
  if (!v4)
  {
    swift_unknownObjectRelease();
    return v4 == 0;
  }
  id v20 = v4;
  id v13 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F40);
  if (!swift_dynamicCast())
  {
LABEL_7:

    return v4 == 0;
  }
  uint64_t v14 = v19;
  if ((*(unsigned int (**)(char *, uint64_t))(v19 + 88))(v11, v9) != *MEMORY[0x1E4FBBA70])
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v9);
    goto LABEL_7;
  }

  (*(void (**)(char *, uint64_t))(v14 + 96))(v11, v9);
  uint64_t v15 = &v11[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34240) + 48)];
  uint64_t v16 = sub_1D76F84F4();
  (*(void (**)(char *, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);

  return v4 == 0;
}

BOOL sub_1D76A46A8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  xpc_object_t v6 = sub_1D76A3ED4(MEMORY[0x1E4FBB390], XPCTypeBool, a1, a2, a3, a4);
  if (!v4)
  {
    BOOL value = xpc_BOOL_get_value(v6);
    swift_unknownObjectRelease();
  }
  return value;
}

uint64_t sub_1D76A4730(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  xpc_object_t v6 = sub_1D76A3ED4(MEMORY[0x1E4FBB1A0], XPCTypeString, a1, a2, a3, a4);
  if (!v4)
  {
    uint64_t v7 = v6;
    xpc_string_get_string_ptr(v6);
    xpc_string_get_length(v7);
    uint64_t v5 = sub_1D76F8074();
    swift_unknownObjectRelease();
  }
  return v5;
}

xpc_object_t sub_1D76A47EC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  xpc_object_t result = sub_1D76A3ED4(MEMORY[0x1E4FBB3D0], XPCTypeDouble, a1, a2, a3, a4);
  if (!v4)
  {
    xpc_double_get_value(result);
    return (xpc_object_t)swift_unknownObjectRelease();
  }
  return result;
}

void *sub_1D76A4874(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  xpc_object_t result = sub_1D76A3ED4(MEMORY[0x1E4FBB3D0], XPCTypeDouble, a1, a2, a3, a4);
  if (!v4)
  {
    double value = xpc_double_get_value(result);
    xpc_object_t result = (void *)swift_unknownObjectRelease();
    float v7 = value;
    if (value != v7)
    {
      sub_1D76F8504();
      swift_allocError();
      type metadata accessor for XPCObjectKeyedDecodingContainer();
      swift_getWitnessTable();
      sub_1D76F84D4();
      return (void *)swift_willThrow();
    }
  }
  return result;
}

xpc_object_t sub_1D76A49D0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v13 = sub_1D76ACE14();
  xpc_object_t result = sub_1D76A40D4(MEMORY[0x1E4FBC098], a1, a2, a3, a4, a5, MEMORY[0x1E4FBC098], a6, (uint64_t)&v15, v13, &XPCTypeInt64, MEMORY[0x1E4F14B90], (void (*)(uint64_t))sub_1D76ACD18);
  if (!v6) {
    return (xpc_object_t)v15;
  }
  return result;
}

xpc_object_t sub_1D76A4AA4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v13 = sub_1D76ACDC0();
  xpc_object_t result = sub_1D76A40D4(MEMORY[0x1E4FBC0F8], a1, a2, a3, a4, a5, MEMORY[0x1E4FBC0F8], a6, (uint64_t)&v15, v13, &XPCTypeInt64, MEMORY[0x1E4F14B90], (void (*)(uint64_t))sub_1D76ACD18);
  if (!v6) {
    return (xpc_object_t)v15;
  }
  return result;
}

xpc_object_t sub_1D76A4B78(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v13 = sub_1D76ACD6C();
  xpc_object_t result = sub_1D76A40D4(MEMORY[0x1E4FBC150], a1, a2, a3, a4, a5, MEMORY[0x1E4FBC150], a6, (uint64_t)&v15, v13, &XPCTypeInt64, MEMORY[0x1E4F14B90], (void (*)(uint64_t))sub_1D76ACD18);
  if (!v6) {
    return (xpc_object_t)v15;
  }
  return result;
}

xpc_object_t sub_1D76A4C4C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void), uint64_t a8)
{
  uint64_t v16 = a7();
  xpc_object_t result = sub_1D76A40D4(a8, a1, a2, a3, a4, a5, a8, a6, (uint64_t)&v18, v16, &XPCTypeInt64, MEMORY[0x1E4F14B90], (void (*)(uint64_t))sub_1D76ACD18);
  if (!v8) {
    return (xpc_object_t)v18;
  }
  return result;
}

xpc_object_t sub_1D76A4D24(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v13 = sub_1D76ACC1C();
  xpc_object_t result = sub_1D76A40D4(MEMORY[0x1E4FBC358], a1, a2, a3, a4, a5, MEMORY[0x1E4FBC358], a6, (uint64_t)&v15, v13, &XPCTypeUInt64, MEMORY[0x1E4F14BB0], (void (*)(uint64_t))sub_1D76ACB20);
  if (!v6) {
    return (xpc_object_t)v15;
  }
  return result;
}

xpc_object_t sub_1D76A4DF8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v13 = sub_1D76ACBC8();
  xpc_object_t result = sub_1D76A40D4(MEMORY[0x1E4FBC450], a1, a2, a3, a4, a5, MEMORY[0x1E4FBC450], a6, (uint64_t)&v15, v13, &XPCTypeUInt64, MEMORY[0x1E4F14BB0], (void (*)(uint64_t))sub_1D76ACB20);
  if (!v6) {
    return (xpc_object_t)v15;
  }
  return result;
}

xpc_object_t sub_1D76A4ECC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v13 = sub_1D76ACB74();
  xpc_object_t result = sub_1D76A40D4(MEMORY[0x1E4FBC4C0], a1, a2, a3, a4, a5, MEMORY[0x1E4FBC4C0], a6, (uint64_t)&v15, v13, &XPCTypeUInt64, MEMORY[0x1E4F14BB0], (void (*)(uint64_t))sub_1D76ACB20);
  if (!v6) {
    return (xpc_object_t)v15;
  }
  return result;
}

xpc_object_t sub_1D76A4FA0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void), uint64_t a8)
{
  uint64_t v16 = a7();
  xpc_object_t result = sub_1D76A40D4(a8, a1, a2, a3, a4, a5, a8, a6, (uint64_t)&v18, v16, &XPCTypeUInt64, MEMORY[0x1E4F14BB0], (void (*)(uint64_t))sub_1D76ACB20);
  if (!v8) {
    return (xpc_object_t)v18;
  }
  return result;
}

void *sub_1D76A5078@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v57 = a6;
  uint64_t v54 = a9;
  uint64_t v55 = a5;
  uint64_t v53 = a1;
  uint64_t v62 = *MEMORY[0x1E4F143C0];
  uint64_t v15 = sub_1D76F7D04();
  MEMORY[0x1F4188788](v15);
  uint64_t v17 = (char *)v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_1D76F7C94();
  MEMORY[0x1F4188788](v18);
  if (swift_dynamicCastMetatype())
  {
    uint64_t v19 = v56;
    xpc_object_t result = sub_1D76A3ED4(v18, XPCTypeDate, a2, a3, a4, v55);
    if (v19) {
      return result;
    }
    xpc_date_get_value(result);
    swift_unknownObjectRelease();
    sub_1D76F7C74();
    return (void *)swift_dynamicCast();
  }
  xpc_object_t v52 = v17;
  uint64_t v21 = a4;
  uint64_t v22 = v55;
  if (!swift_dynamicCastMetatype())
  {
    if (!swift_dynamicCastMetatype())
    {
      xpc_object_t v52 = a7;
      uint64_t v32 = swift_dynamicCastMetatype();
      uint64_t v33 = a2;
      sub_1D76F8DB4();
      uint64_t v34 = sub_1D76F8054();
      swift_bridgeObjectRelease();
      xpc_object_t v35 = xpc_dictionary_get_value(v21, (const char *)(v34 + 32));
      swift_release();
      if (v32)
      {
        if (v35)
        {
          *(void *)&long long v58 = v35;
          return (void *)swift_dynamicCast();
        }
        *(void *)&long long v58 = a3;
        *((void *)&v58 + 1) = v21;
        uint64_t v59 = v22;
      }
      else
      {
        xpc_object_t v36 = v35;
        uint64_t v37 = v22;
        uint64_t v38 = a3;
        if (v36)
        {
          xpc_object_t v39 = v36;
          v51[1] = a10;
          uint64_t v40 = *(void *)(v38 + 24);
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34C78);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_1D76FA300;
          uint64_t v42 = v57;
          *(void *)(inited + 56) = v57;
          *(void *)(inited + 64) = a8;
          boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)(inited + 32));
          (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v42 - 8) + 16))(boxed_opaque_existential_0Tm, v33, v42);
          *(void *)&long long v58 = v37;
          swift_retain();
          xpc_object_t v44 = v39;
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          sub_1D76F76A8(inited);
          uint64_t v45 = v58;
          uint64_t v46 = *(void *)(v38 + 40);
          uint64_t v47 = type metadata accessor for _XPCObjectDecoder();
          unsigned __int8 v48 = (void *)swift_allocObject();
          v48[2] = v44;
          v48[3] = v40;
          v48[4] = v45;
          v48[5] = v46;
          uint64_t v60 = v47;
          uint64_t v61 = sub_1D76AB700((unint64_t *)&unk_1EBA346D0, (void (*)(void))type metadata accessor for _XPCObjectDecoder);
          *(void *)&long long v58 = v48;
          swift_bridgeObjectRetain();
          sub_1D76F8254();
          return (void *)swift_unknownObjectRelease();
        }
        *(void *)&long long v58 = a3;
        *((void *)&v58 + 1) = v21;
        uint64_t v59 = v22;
      }
      sub_1D76F8504();
      swift_allocError();
      unsigned __int8 v50 = v49;
      type metadata accessor for XPCObjectKeyedDecodingContainer();
      swift_getWitnessTable();
      static DecodingError.keyNotFoundError<A>(expecting:in:debugDescription:)(a2, 0, 0, v50);
      return (void *)swift_willThrow();
    }
    uint64_t v25 = v56;
    xpc_object_t result = sub_1D76A3ED4(MEMORY[0x1E4F277C0], XPCTypeData, a2, a3, a4, v22);
    if (v25) {
      return result;
    }
    uint64_t v26 = result;
    if ((uint64_t)xpc_data_get_length(result) < 1)
    {
      swift_unknownObjectRelease();
      long long v58 = xmmword_1D76FA310;
      return (void *)swift_dynamicCast();
    }
    xpc_object_t result = (void *)xpc_data_get_bytes_ptr(v26);
    if (result)
    {
      uint64_t v27 = result;
      size_t length = xpc_data_get_length(v26);
      uint64_t v29 = sub_1D76C84FC(v27, length);
      uint64_t v31 = v30;
      swift_unknownObjectRelease();
      *(void *)&long long v58 = v29;
      *((void *)&v58 + 1) = v31;
      return (void *)swift_dynamicCast();
    }
LABEL_25:
    __break(1u);
    return result;
  }
  uint64_t v23 = v56;
  xpc_object_t result = sub_1D76A3ED4(v15, XPCTypeUUID, a2, a3, a4, v22);
  if (v23) {
    return result;
  }
  bytes = xpc_uuid_get_bytes(result);
  xpc_object_t result = (void *)swift_unknownObjectRelease();
  if (!bytes)
  {
    __break(1u);
    goto LABEL_25;
  }
  sub_1D76F7CD4();
  return (void *)swift_dynamicCast();
}

xpc_object_t sub_1D76A5638(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  xpc_object_t result = sub_1D76A3ED4(a7, XPCTypeDictionary, a2, a3, a4, a5);
  if (!v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34C78);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1D76FA300;
    *(void *)(inited + 56) = a6;
    *(void *)(inited + 64) = a8;
    boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)(inited + 32));
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 16))(boxed_opaque_existential_0Tm, a2, a6);
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1D76F76A8(inited);
    type metadata accessor for XPCObjectKeyedDecodingContainer();
    swift_getWitnessTable();
    sub_1D76F86F4();
    return (xpc_object_t)swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1D76A57F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A648);
  uint64_t result = (uint64_t)sub_1D76A3ED4(v15, XPCTypeArray, a1, a2, a3, a4);
  if (!v7)
  {
    uint64_t v17 = result;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34C78);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1D76FA300;
    *(void *)(inited + 56) = a5;
    *(void *)(inited + 64) = a6;
    boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)(inited + 32));
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(boxed_opaque_existential_0Tm, a1, a5);
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1D76F76A8(inited);
    uint64_t v20 = a4;
    a7[3] = &type metadata for XPCObjectUnkeyedDecodingContainer;
    a7[4] = sub_1D76ABE0C();
    uint64_t v21 = (void *)swift_allocObject();
    *a7 = v21;
    uint64_t result = swift_unknownObjectRelease();
    v21[2] = a2;
    _OWORD v21[3] = v17;
    v21[4] = v20;
    v21[5] = 0;
  }
  return result;
}

uint64_t sub_1D76A599C()
{
  uint64_t v0 = type metadata accessor for _XPCObjectDecoder();
  uint64_t v1 = sub_1D76F8504();
  swift_allocError();
  uint64_t v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34240);
  *uint64_t v3 = v0;
  swift_bridgeObjectRetain();
  sub_1D76F84E4();
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v1 - 8) + 104))(v3, *MEMORY[0x1E4FBBA80], v1);
  return swift_willThrow();
}

uint64_t sub_1D76A5A88(uint64_t a1)
{
  sub_1D76F8504();
  swift_allocError();
  uint64_t v3 = v2;
  type metadata accessor for XPCObjectKeyedDecodingContainer();
  swift_getWitnessTable();
  static DecodingError.keyNotFoundError<A>(expecting:in:debugDescription:)(a1, 0xD000000000000016, 0x80000001D76FD320, v3);
  return swift_willThrow();
}

uint64_t sub_1D76A5B5C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D76A5B64()
{
  return sub_1D76A3C14(*(void *)v0, *(void **)(v0 + 8));
}

BOOL sub_1D76A5B78(uint64_t a1)
{
  return sub_1D76A43F0(a1, *(void *)v1, *(void **)(v1 + 8));
}

uint64_t sub_1D76A5B8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D76A5BEC(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_1D76A4470) & 1;
}

uint64_t sub_1D76A5BBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D76A5BEC(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_1D76A46A8) & 1;
}

uint64_t sub_1D76A5BEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void, void, void, void))
{
  return a4(a1, *v4, v4[1], v4[2], *(void *)(a2 + 16), *(void *)(a2 + 24)) & 1;
}

uint64_t sub_1D76A5C20(uint64_t a1)
{
  return sub_1D76A4730(a1, *(void *)v1, *(void **)(v1 + 8), *(void *)(v1 + 16));
}

xpc_object_t sub_1D76A5C48(uint64_t a1)
{
  return sub_1D76A47EC(a1, *(void *)v1, *(void **)(v1 + 8), *(void *)(v1 + 16));
}

void *sub_1D76A5C70(uint64_t a1)
{
  return sub_1D76A4874(a1, *(void *)v1, *(void **)(v1 + 8), *(void *)(v1 + 16));
}

uint64_t sub_1D76A5C98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D76A5F68(a1, a2, a3, (uint64_t)sub_1D76ACE68, MEMORY[0x1E4FBB550], (uint64_t (*)(uint64_t, void, void, void, void, void, uint64_t, uint64_t))sub_1D76A4C4C);
}

uint64_t sub_1D76A5CE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D76A5E38(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_1D76A49D0);
}

uint64_t sub_1D76A5D0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D76A5E94(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_1D76A4AA4);
}

uint64_t sub_1D76A5D38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D76A5EF0(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_1D76A4B78);
}

uint64_t sub_1D76A5D64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D76A5F68(a1, a2, a3, (uint64_t)sub_1D76ACCC4, MEMORY[0x1E4FBC1C8], (uint64_t (*)(uint64_t, void, void, void, void, void, uint64_t, uint64_t))sub_1D76A4C4C);
}

uint64_t sub_1D76A5DAC()
{
  return sub_1D76F8B44();
}

uint64_t sub_1D76A5DC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D76A5F68(a1, a2, a3, (uint64_t)sub_1D76ACC70, MEMORY[0x1E4FBB808], (uint64_t (*)(uint64_t, void, void, void, void, void, uint64_t, uint64_t))sub_1D76A4FA0);
}

uint64_t sub_1D76A5E0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D76A5E38(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_1D76A4D24);
}

uint64_t sub_1D76A5E38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void, void, void, void))
{
  return a4(a1, *v4, v4[1], v4[2], *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t sub_1D76A5E68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D76A5E94(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_1D76A4DF8);
}

uint64_t sub_1D76A5E94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void, void, void, void))
{
  return a4(a1, *v4, v4[1], v4[2], *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t sub_1D76A5EC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D76A5EF0(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_1D76A4ECC);
}

uint64_t sub_1D76A5EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void, void, void, void))
{
  return a4(a1, *v4, v4[1], v4[2], *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t sub_1D76A5F20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D76A5F68(a1, a2, a3, (uint64_t)sub_1D76ACACC, MEMORY[0x1E4FBC538], (uint64_t (*)(uint64_t, void, void, void, void, void, uint64_t, uint64_t))sub_1D76A4FA0);
}

uint64_t sub_1D76A5F68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, void, void, void, void, void, uint64_t, uint64_t))
{
  return a6(a1, *v6, v6[1], v6[2], *(void *)(a2 + 16), *(void *)(a2 + 24), a4, a5);
}

uint64_t sub_1D76A5FA0()
{
  return sub_1D76F8B54();
}

uint64_t sub_1D76A5FB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1D76A6370(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, uint64_t, void, uint64_t))sub_1D76A5078);
}

uint64_t sub_1D76A5FE4()
{
  return sub_1D76F8AD4();
}

uint64_t sub_1D76A5FFC()
{
  return sub_1D76F8AC4();
}

uint64_t sub_1D76A6014()
{
  uint64_t result = sub_1D76F8AE4();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_1D76A6038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D76A6264(a1, a2, a3, MEMORY[0x1E4FBBF60]);
}

uint64_t sub_1D76A6064()
{
  uint64_t result = sub_1D76F8AF4();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_1D76A6088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D76A61AC(a1, a2, a3, MEMORY[0x1E4FBBF78]);
}

uint64_t sub_1D76A60B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D76A6208(a1, a2, a3, MEMORY[0x1E4FBBF80]);
}

uint64_t sub_1D76A60E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D76A6264(a1, a2, a3, MEMORY[0x1E4FBBF88]);
}

uint64_t sub_1D76A610C()
{
  uint64_t result = sub_1D76F8B24();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_1D76A6130(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D76A62EC(a1, a2, a3, MEMORY[0x1E4FBBFA0]);
}

uint64_t sub_1D76A615C()
{
  uint64_t result = sub_1D76F8B04();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_1D76A6180(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D76A61AC(a1, a2, a3, MEMORY[0x1E4FBBF98]);
}

uint64_t sub_1D76A61AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4() & 0x1FF;
}

uint64_t sub_1D76A61DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D76A6208(a1, a2, a3, MEMORY[0x1E4FBBFA8]);
}

uint64_t sub_1D76A6208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4() & 0x1FFFF;
}

uint64_t sub_1D76A6238(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D76A6264(a1, a2, a3, MEMORY[0x1E4FBBFB0]);
}

uint64_t sub_1D76A6264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  unint64_t v4 = a4();
  return v4 | ((HIDWORD(v4) & 1) << 32);
}

uint64_t sub_1D76A629C()
{
  uint64_t result = sub_1D76F8B34();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_1D76A62C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D76A62EC(a1, a2, a3, MEMORY[0x1E4FBBFC0]);
}

uint64_t sub_1D76A62EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result = a4();
  if (v4) {
    return v6;
  }
  return result;
}

uint64_t sub_1D76A6318()
{
  return sub_1D76F8B14();
}

uint64_t sub_1D76A6344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1D76A6370(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, uint64_t, void, uint64_t))sub_1D76A5638);
}

uint64_t sub_1D76A6370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, void, void, void, void, uint64_t, void, uint64_t))
{
  return a7(a1, a2, *v7, v7[1], v7[2], *(void *)(a5 + 16), a3, *(void *)(a5 + 24), a4);
}

uint64_t sub_1D76A63B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D76A6434(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_1D76A57F4);
}

uint64_t sub_1D76A63E0()
{
  return sub_1D76A599C();
}

uint64_t sub_1D76A6408(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D76A6434(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_1D76A5A88);
}

uint64_t sub_1D76A6434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void, void, void, void))
{
  return a4(a1, *v4, v4[1], v4[2], *(void *)(a2 + 16), *(void *)(a2 + 24));
}

xpc_object_t sub_1D76A6464(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 8);
  int64_t v5 = *(void *)(a2 + 24);
  if (v5 >= (uint64_t)xpc_array_get_count(v4))
  {
    xpc_object_t v6 = *(xpc_object_t *)a2;
    uint64_t v12 = *(void *)(a2 + 16);
    uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    unint64_t v20 = sub_1D76ABE0C();
    unint64_t v13 = (void *)swift_allocObject();
    v18[0] = v13;
    v13[2] = v6;
    v13[3] = v4;
    v13[4] = v12;
    v13[5] = v5;
    sub_1D76F8504();
    swift_allocError();
    uint64_t v15 = v14;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)(MEMORY[0x1E4FBB390], v18, 0x80000001D76FD340, v15);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
    swift_willThrow();
  }
  else
  {
    xpc_object_t v6 = xpc_array_get_value(v4, v5);
    if (MEMORY[0x1D94771B0]() == a1)
    {
      *(void *)(a2 + 24) = v5 + 1;
    }
    else
    {
      v17[3] = swift_getObjectType();
      v17[0] = v6;
      xpc_object_t v7 = *(xpc_object_t *)a2;
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      unint64_t v20 = sub_1D76ABE0C();
      uint64_t v9 = (void *)swift_allocObject();
      v18[0] = v9;
      v9[2] = v7;
      v9[3] = v4;
      v9[4] = v8;
      v9[5] = v5;
      sub_1D76F8504();
      swift_allocError();
      uint64_t v11 = v10;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)(MEMORY[0x1E4FBB390], (uint64_t)v17, v18, 0, v11);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      swift_willThrow();
      swift_unknownObjectRelease();
    }
  }
  return v6;
}

xpc_object_t sub_1D76A667C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 8);
  int64_t v5 = *(void *)(a2 + 24);
  if (v5 >= (uint64_t)xpc_array_get_count(v4))
  {
    xpc_object_t v6 = *(xpc_object_t *)a2;
    uint64_t v12 = *(void *)(a2 + 16);
    uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    unint64_t v20 = sub_1D76ABE0C();
    unint64_t v13 = (void *)swift_allocObject();
    v18[0] = v13;
    v13[2] = v6;
    v13[3] = v4;
    v13[4] = v12;
    v13[5] = v5;
    sub_1D76F8504();
    swift_allocError();
    uint64_t v15 = v14;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)(MEMORY[0x1E4FBB1A0], v18, 0x80000001D76FD340, v15);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
    swift_willThrow();
  }
  else
  {
    xpc_object_t v6 = xpc_array_get_value(v4, v5);
    if (MEMORY[0x1D94771B0]() == a1)
    {
      *(void *)(a2 + 24) = v5 + 1;
    }
    else
    {
      v17[3] = swift_getObjectType();
      v17[0] = v6;
      xpc_object_t v7 = *(xpc_object_t *)a2;
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      unint64_t v20 = sub_1D76ABE0C();
      uint64_t v9 = (void *)swift_allocObject();
      v18[0] = v9;
      v9[2] = v7;
      v9[3] = v4;
      v9[4] = v8;
      v9[5] = v5;
      sub_1D76F8504();
      swift_allocError();
      uint64_t v11 = v10;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)(MEMORY[0x1E4FBB1A0], (uint64_t)v17, v18, 0, v11);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      swift_willThrow();
      swift_unknownObjectRelease();
    }
  }
  return v6;
}

xpc_object_t sub_1D76A6894(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 8);
  int64_t v5 = *(void *)(a2 + 24);
  if (v5 >= (uint64_t)xpc_array_get_count(v4))
  {
    xpc_object_t v6 = *(xpc_object_t *)a2;
    uint64_t v12 = *(void *)(a2 + 16);
    uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    unint64_t v20 = sub_1D76ABE0C();
    unint64_t v13 = (void *)swift_allocObject();
    v18[0] = v13;
    v13[2] = v6;
    v13[3] = v4;
    v13[4] = v12;
    v13[5] = v5;
    sub_1D76F8504();
    swift_allocError();
    uint64_t v15 = v14;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)(MEMORY[0x1E4FBB3D0], v18, 0x80000001D76FD340, v15);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
    swift_willThrow();
  }
  else
  {
    xpc_object_t v6 = xpc_array_get_value(v4, v5);
    if (MEMORY[0x1D94771B0]() == a1)
    {
      *(void *)(a2 + 24) = v5 + 1;
    }
    else
    {
      v17[3] = swift_getObjectType();
      v17[0] = v6;
      xpc_object_t v7 = *(xpc_object_t *)a2;
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      unint64_t v20 = sub_1D76ABE0C();
      uint64_t v9 = (void *)swift_allocObject();
      v18[0] = v9;
      v9[2] = v7;
      v9[3] = v4;
      v9[4] = v8;
      v9[5] = v5;
      sub_1D76F8504();
      swift_allocError();
      uint64_t v11 = v10;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)(MEMORY[0x1E4FBB3D0], (uint64_t)v17, v18, 0, v11);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      swift_willThrow();
      swift_unknownObjectRelease();
    }
  }
  return v6;
}

xpc_object_t sub_1D76A6AAC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  xpc_object_t v6 = *(void **)(a2 + 8);
  int64_t v7 = *(void *)(a2 + 24);
  if (v7 >= (uint64_t)xpc_array_get_count(v6))
  {
    xpc_object_t v8 = *(xpc_object_t *)a2;
    uint64_t v14 = *(void *)(a2 + 16);
    uint64_t v21 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    unint64_t v22 = sub_1D76ABE0C();
    uint64_t v15 = (void *)swift_allocObject();
    v20[0] = v15;
    v15[2] = v8;
    v15[3] = v6;
    v15[4] = v14;
    v15[5] = v7;
    sub_1D76F8504();
    swift_allocError();
    uint64_t v17 = v16;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)(v5, v20, 0x80000001D76FD340, v17);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v20);
    swift_willThrow();
  }
  else
  {
    xpc_object_t v8 = xpc_array_get_value(v6, v7);
    if (MEMORY[0x1D94771B0]() == a1)
    {
      *(void *)(a2 + 24) = v7 + 1;
    }
    else
    {
      v19[3] = swift_getObjectType();
      v19[0] = v8;
      xpc_object_t v9 = *(xpc_object_t *)a2;
      uint64_t v10 = *(void *)(a2 + 16);
      uint64_t v21 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      unint64_t v22 = sub_1D76ABE0C();
      uint64_t v11 = (void *)swift_allocObject();
      v20[0] = v11;
      v11[2] = v9;
      v11[3] = v6;
      v11[4] = v10;
      v11[5] = v7;
      sub_1D76F8504();
      swift_allocError();
      unint64_t v13 = v12;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)(v5, (uint64_t)v19, v20, 0, v13);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v20);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v19);
      swift_willThrow();
      swift_unknownObjectRelease();
    }
  }
  return v8;
}

xpc_object_t sub_1D76A6CD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 8);
  int64_t v5 = *(void *)(a2 + 24);
  if (v5 >= (uint64_t)xpc_array_get_count(v4))
  {
    xpc_object_t v6 = *(xpc_object_t *)a2;
    uint64_t v12 = *(void *)(a2 + 16);
    uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    unint64_t v20 = sub_1D76ABE0C();
    unint64_t v13 = (void *)swift_allocObject();
    v18[0] = v13;
    v13[2] = v6;
    v13[3] = v4;
    v13[4] = v12;
    v13[5] = v5;
    sub_1D76F8504();
    swift_allocError();
    uint64_t v15 = v14;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)(MEMORY[0x1E4F277C0], v18, 0x80000001D76FD340, v15);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
    swift_willThrow();
  }
  else
  {
    xpc_object_t v6 = xpc_array_get_value(v4, v5);
    if (MEMORY[0x1D94771B0]() == a1)
    {
      *(void *)(a2 + 24) = v5 + 1;
    }
    else
    {
      v17[3] = swift_getObjectType();
      v17[0] = v6;
      xpc_object_t v7 = *(xpc_object_t *)a2;
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      unint64_t v20 = sub_1D76ABE0C();
      xpc_object_t v9 = (void *)swift_allocObject();
      v18[0] = v9;
      v9[2] = v7;
      v9[3] = v4;
      v9[4] = v8;
      v9[5] = v5;
      sub_1D76F8504();
      swift_allocError();
      uint64_t v11 = v10;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)(MEMORY[0x1E4F277C0], (uint64_t)v17, v18, 0, v11);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      swift_willThrow();
      swift_unknownObjectRelease();
    }
  }
  return v6;
}

xpc_object_t sub_1D76A6EEC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  xpc_object_t v6 = *(void **)(a2 + 8);
  int64_t v7 = *(void *)(a2 + 24);
  if (v7 >= (uint64_t)xpc_array_get_count(v6))
  {
    xpc_object_t v8 = *(xpc_object_t *)a2;
    uint64_t v14 = *(void *)(a2 + 16);
    uint64_t v21 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    unint64_t v22 = sub_1D76ABE0C();
    uint64_t v15 = (void *)swift_allocObject();
    v20[0] = v15;
    v15[2] = v8;
    v15[3] = v6;
    v15[4] = v14;
    v15[5] = v7;
    sub_1D76F8504();
    swift_allocError();
    uint64_t v17 = v16;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)(v5, v20, 0x80000001D76FD340, v17);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v20);
    swift_willThrow();
  }
  else
  {
    xpc_object_t v8 = xpc_array_get_value(v6, v7);
    if (MEMORY[0x1D94771B0]() == a1)
    {
      *(void *)(a2 + 24) = v7 + 1;
    }
    else
    {
      v19[3] = swift_getObjectType();
      v19[0] = v8;
      xpc_object_t v9 = *(xpc_object_t *)a2;
      uint64_t v10 = *(void *)(a2 + 16);
      uint64_t v21 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      unint64_t v22 = sub_1D76ABE0C();
      uint64_t v11 = (void *)swift_allocObject();
      v20[0] = v11;
      v11[2] = v9;
      v11[3] = v6;
      v11[4] = v10;
      v11[5] = v7;
      sub_1D76F8504();
      swift_allocError();
      unint64_t v13 = v12;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)(v5, (uint64_t)v19, v20, 0, v13);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v20);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v19);
      swift_willThrow();
      swift_unknownObjectRelease();
    }
  }
  return v8;
}

uint64_t sub_1D76A7110(uint64_t a1, uint64_t a2, void (*a3)(void, void *, void, int64_t, xpc_object_t))
{
  uint64_t v5 = v3;
  xpc_object_t v9 = (void *)v3[1];
  int64_t v10 = v5[3];
  if (v10 >= (uint64_t)xpc_array_get_count(v9))
  {
    uint64_t v18 = *v5;
    uint64_t v19 = a1;
    uint64_t v20 = v5[2];
    uint64_t v26 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    unint64_t v27 = sub_1D76ABE0C();
    uint64_t v21 = (void *)swift_allocObject();
    v25[0] = v21;
    v21[2] = v18;
    _OWORD v21[3] = v9;
    v21[4] = v20;
    v21[5] = v10;
    sub_1D76F8504();
    swift_allocError();
    uint64_t v23 = v22;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)(v19, v25, 0x80000001D76FD340, v23);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v25);
    return swift_willThrow();
  }
  else
  {
    uint64_t v28 = a1;
    xpc_object_t v11 = xpc_array_get_value(v9, v10);
    if (MEMORY[0x1D94771B0]() == a2)
    {
      a3(*v5, v9, v5[2], v10, v11);
      uint64_t result = swift_unknownObjectRelease();
      if (!v4) {
        v5[3] = v10 + 1;
      }
    }
    else
    {
      v24[3] = swift_getObjectType();
      v24[0] = v11;
      uint64_t v12 = *v5;
      uint64_t v13 = v5[2];
      uint64_t v26 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      unint64_t v27 = sub_1D76ABE0C();
      uint64_t v14 = (void *)swift_allocObject();
      v25[0] = v14;
      v14[2] = v12;
      v14[3] = v9;
      v14[4] = v13;
      v14[5] = v10;
      sub_1D76F8504();
      swift_allocError();
      uint64_t v16 = v15;
      swift_unknownObjectRetain();
      swift_retain();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)(v28, (uint64_t)v24, v25, 0, v16);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v25);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v24);
      swift_willThrow();
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1D76A737C()
{
  uint64_t v1 = XPCTypeInt64;
  uint64_t v2 = (void *)v0[1];
  int64_t v3 = v0[3];
  if (v3 >= (uint64_t)xpc_array_get_count(v2))
  {
    uint64_t v11 = *v0;
    uint64_t v12 = v0[2];
    uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    unint64_t v20 = sub_1D76ABE0C();
    uint64_t v13 = (void *)swift_allocObject();
    v18[0] = v13;
    v13[2] = v11;
    v13[3] = v2;
    v13[4] = v12;
    v13[5] = v3;
    sub_1D76F8504();
    swift_allocError();
    uint64_t v15 = v14;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)(MEMORY[0x1E4FBB550], v18, 0x80000001D76FD340, v15);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
    return swift_willThrow();
  }
  else
  {
    xpc_object_t v4 = xpc_array_get_value(v2, v3);
    if (MEMORY[0x1D94771B0]() == v1)
    {
      int64_t value = xpc_int64_get_value(v4);
      swift_unknownObjectRelease();
      v0[3] = v3 + 1;
      return value;
    }
    else
    {
      v17[3] = swift_getObjectType();
      v17[0] = v4;
      uint64_t v5 = *v0;
      uint64_t v6 = v0[2];
      uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      unint64_t v20 = sub_1D76ABE0C();
      int64_t v7 = (void *)swift_allocObject();
      v18[0] = v7;
      v7[2] = v5;
      v7[3] = v2;
      v7[4] = v6;
      v7[5] = v3;
      sub_1D76F8504();
      swift_allocError();
      xpc_object_t v9 = v8;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)(MEMORY[0x1E4FBB550], (uint64_t)v17, v18, 0, v9);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      swift_willThrow();
      return swift_unknownObjectRelease();
    }
  }
}

void *sub_1D76A75B0()
{
  uint64_t v2 = XPCTypeInt64;
  int64_t v3 = (void *)v0[1];
  int64_t v4 = v0[3];
  if (v4 >= (uint64_t)xpc_array_get_count(v3))
  {
    uint64_t v11 = *v0;
    uint64_t v12 = v0[2];
    uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    unint64_t v20 = sub_1D76ABE0C();
    uint64_t v13 = (void *)swift_allocObject();
    v18[0] = v13;
    v13[2] = v11;
    v13[3] = v3;
    v13[4] = v12;
    v13[5] = v4;
    sub_1D76F8504();
    swift_allocError();
    uint64_t v15 = v14;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)(MEMORY[0x1E4FBC098], v18, 0x80000001D76FD340, v15);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
    swift_willThrow();
  }
  else
  {
    xpc_object_t v5 = xpc_array_get_value(v3, v4);
    if (MEMORY[0x1D94771B0]() == v2)
    {
      int64_t v3 = (void *)sub_1D76A7EC8(*v0, (uint64_t)v3, v0[2], v4, v5);
      swift_unknownObjectRelease();
      if (!v1) {
        v0[3] = v4 + 1;
      }
    }
    else
    {
      v17[3] = swift_getObjectType();
      v17[0] = v5;
      uint64_t v6 = *v0;
      uint64_t v7 = v0[2];
      uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      unint64_t v20 = sub_1D76ABE0C();
      xpc_object_t v8 = (void *)swift_allocObject();
      v18[0] = v8;
      v8[2] = v6;
      v8[3] = v3;
      v8[4] = v7;
      v8[5] = v4;
      sub_1D76F8504();
      swift_allocError();
      int64_t v10 = v9;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)(MEMORY[0x1E4FBC098], (uint64_t)v17, v18, 0, v10);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      swift_willThrow();
      swift_unknownObjectRelease();
    }
  }
  return v3;
}

void *sub_1D76A77FC()
{
  uint64_t v2 = XPCTypeInt64;
  int64_t v3 = (void *)v0[1];
  int64_t v4 = v0[3];
  if (v4 >= (uint64_t)xpc_array_get_count(v3))
  {
    uint64_t v11 = *v0;
    uint64_t v12 = v0[2];
    uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    unint64_t v20 = sub_1D76ABE0C();
    uint64_t v13 = (void *)swift_allocObject();
    v18[0] = v13;
    v13[2] = v11;
    v13[3] = v3;
    v13[4] = v12;
    v13[5] = v4;
    sub_1D76F8504();
    swift_allocError();
    uint64_t v15 = v14;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)(MEMORY[0x1E4FBC0F8], v18, 0x80000001D76FD340, v15);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
    swift_willThrow();
  }
  else
  {
    xpc_object_t v5 = xpc_array_get_value(v3, v4);
    if (MEMORY[0x1D94771B0]() == v2)
    {
      int64_t v3 = (void *)sub_1D76A7FE0(*v0, (uint64_t)v3, v0[2], v4, v5);
      swift_unknownObjectRelease();
      if (!v1) {
        v0[3] = v4 + 1;
      }
    }
    else
    {
      v17[3] = swift_getObjectType();
      v17[0] = v5;
      uint64_t v6 = *v0;
      uint64_t v7 = v0[2];
      uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      unint64_t v20 = sub_1D76ABE0C();
      xpc_object_t v8 = (void *)swift_allocObject();
      v18[0] = v8;
      v8[2] = v6;
      v8[3] = v3;
      v8[4] = v7;
      v8[5] = v4;
      sub_1D76F8504();
      swift_allocError();
      int64_t v10 = v9;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)(MEMORY[0x1E4FBC0F8], (uint64_t)v17, v18, 0, v10);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      swift_willThrow();
      swift_unknownObjectRelease();
    }
  }
  return v3;
}

void *sub_1D76A7A48()
{
  uint64_t v2 = XPCTypeInt64;
  int64_t v3 = (void *)v0[1];
  int64_t v4 = v0[3];
  if (v4 >= (uint64_t)xpc_array_get_count(v3))
  {
    uint64_t v11 = *v0;
    uint64_t v12 = v0[2];
    uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    unint64_t v20 = sub_1D76ABE0C();
    uint64_t v13 = (void *)swift_allocObject();
    v18[0] = v13;
    v13[2] = v11;
    v13[3] = v3;
    v13[4] = v12;
    v13[5] = v4;
    sub_1D76F8504();
    swift_allocError();
    uint64_t v15 = v14;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)(MEMORY[0x1E4FBC150], v18, 0x80000001D76FD340, v15);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
    swift_willThrow();
  }
  else
  {
    xpc_object_t v5 = xpc_array_get_value(v3, v4);
    if (MEMORY[0x1D94771B0]() == v2)
    {
      int64_t v3 = (void *)sub_1D76A80F8(*v0, (uint64_t)v3, v0[2], v4, v5);
      swift_unknownObjectRelease();
      if (!v1) {
        v0[3] = v4 + 1;
      }
    }
    else
    {
      v17[3] = swift_getObjectType();
      v17[0] = v5;
      uint64_t v6 = *v0;
      uint64_t v7 = v0[2];
      uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      unint64_t v20 = sub_1D76ABE0C();
      xpc_object_t v8 = (void *)swift_allocObject();
      v18[0] = v8;
      v8[2] = v6;
      v8[3] = v3;
      v8[4] = v7;
      v8[5] = v4;
      sub_1D76F8504();
      swift_allocError();
      int64_t v10 = v9;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)(MEMORY[0x1E4FBC150], (uint64_t)v17, v18, 0, v10);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      swift_willThrow();
      swift_unknownObjectRelease();
    }
  }
  return v3;
}

uint64_t sub_1D76A7C94()
{
  uint64_t v1 = XPCTypeInt64;
  uint64_t v2 = (void *)v0[1];
  int64_t v3 = v0[3];
  if (v3 >= (uint64_t)xpc_array_get_count(v2))
  {
    uint64_t v11 = *v0;
    uint64_t v12 = v0[2];
    uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    unint64_t v20 = sub_1D76ABE0C();
    uint64_t v13 = (void *)swift_allocObject();
    v18[0] = v13;
    v13[2] = v11;
    v13[3] = v2;
    v13[4] = v12;
    v13[5] = v3;
    sub_1D76F8504();
    swift_allocError();
    uint64_t v15 = v14;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)(MEMORY[0x1E4FBC1C8], v18, 0x80000001D76FD340, v15);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
    return swift_willThrow();
  }
  else
  {
    xpc_object_t v4 = xpc_array_get_value(v2, v3);
    if (MEMORY[0x1D94771B0]() == v1)
    {
      int64_t value = xpc_int64_get_value(v4);
      swift_unknownObjectRelease();
      v0[3] = v3 + 1;
      return value;
    }
    else
    {
      v17[3] = swift_getObjectType();
      v17[0] = v4;
      uint64_t v5 = *v0;
      uint64_t v6 = v0[2];
      uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      unint64_t v20 = sub_1D76ABE0C();
      uint64_t v7 = (void *)swift_allocObject();
      v18[0] = v7;
      v7[2] = v5;
      v7[3] = v2;
      v7[4] = v6;
      v7[5] = v3;
      sub_1D76F8504();
      swift_allocError();
      xpc_object_t v9 = v8;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)(MEMORY[0x1E4FBC1C8], (uint64_t)v17, v18, 0, v9);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      swift_willThrow();
      return swift_unknownObjectRelease();
    }
  }
}

int64_t sub_1D76A7EC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, xpc_object_t xint)
{
  int64_t result = xpc_int64_get_value(xint);
  if (result != (char)result)
  {
    v11[3] = &type metadata for XPCObjectUnkeyedDecodingContainer;
    v11[4] = sub_1D76ABE0C();
    int64_t v10 = (void *)swift_allocObject();
    v10[2] = a1;
    v10[3] = a2;
    v10[4] = a3;
    v10[5] = a4;
    v11[0] = v10;
    swift_retain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    sub_1D76F8464();
    swift_bridgeObjectRelease();
    sub_1D76F8504();
    swift_allocError();
    sub_1D76F84C4();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
    return swift_willThrow();
  }
  return result;
}

int64_t sub_1D76A7FE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, xpc_object_t xint)
{
  int64_t result = xpc_int64_get_value(xint);
  if (result != (__int16)result)
  {
    v11[3] = &type metadata for XPCObjectUnkeyedDecodingContainer;
    v11[4] = sub_1D76ABE0C();
    int64_t v10 = (void *)swift_allocObject();
    v10[2] = a1;
    v10[3] = a2;
    v10[4] = a3;
    v10[5] = a4;
    v11[0] = v10;
    swift_retain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    sub_1D76F8464();
    swift_bridgeObjectRelease();
    sub_1D76F8504();
    swift_allocError();
    sub_1D76F84C4();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
    return swift_willThrow();
  }
  return result;
}

int64_t sub_1D76A80F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, xpc_object_t xint)
{
  int64_t result = xpc_int64_get_value(xint);
  if (result != (int)result)
  {
    v11[3] = &type metadata for XPCObjectUnkeyedDecodingContainer;
    v11[4] = sub_1D76ABE0C();
    int64_t v10 = (void *)swift_allocObject();
    v10[2] = a1;
    v10[3] = a2;
    v10[4] = a3;
    v10[5] = a4;
    v11[0] = v10;
    swift_retain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    sub_1D76F8464();
    swift_bridgeObjectRelease();
    sub_1D76F8504();
    swift_allocError();
    sub_1D76F84C4();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1D76A8210()
{
  uint64_t v1 = XPCTypeUInt64;
  uint64_t v2 = (void *)v0[1];
  int64_t v3 = v0[3];
  if (v3 >= (uint64_t)xpc_array_get_count(v2))
  {
    uint64_t v11 = *v0;
    uint64_t v12 = v0[2];
    uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    unint64_t v20 = sub_1D76ABE0C();
    uint64_t v13 = (void *)swift_allocObject();
    v18[0] = v13;
    v13[2] = v11;
    v13[3] = v2;
    v13[4] = v12;
    v13[5] = v3;
    sub_1D76F8504();
    swift_allocError();
    uint64_t v15 = v14;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)(MEMORY[0x1E4FBB808], v18, 0x80000001D76FD340, v15);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
    return swift_willThrow();
  }
  else
  {
    xpc_object_t v4 = xpc_array_get_value(v2, v3);
    if (MEMORY[0x1D94771B0]() == v1)
    {
      uint64_t value = xpc_uint64_get_value(v4);
      swift_unknownObjectRelease();
      v0[3] = v3 + 1;
      return value;
    }
    else
    {
      v17[3] = swift_getObjectType();
      v17[0] = v4;
      uint64_t v5 = *v0;
      uint64_t v6 = v0[2];
      uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      unint64_t v20 = sub_1D76ABE0C();
      uint64_t v7 = (void *)swift_allocObject();
      v18[0] = v7;
      v7[2] = v5;
      v7[3] = v2;
      v7[4] = v6;
      v7[5] = v3;
      sub_1D76F8504();
      swift_allocError();
      xpc_object_t v9 = v8;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)(MEMORY[0x1E4FBB808], (uint64_t)v17, v18, 0, v9);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      swift_willThrow();
      return swift_unknownObjectRelease();
    }
  }
}

void *sub_1D76A8444()
{
  uint64_t v2 = XPCTypeUInt64;
  int64_t v3 = (void *)v0[1];
  int64_t v4 = v0[3];
  if (v4 >= (uint64_t)xpc_array_get_count(v3))
  {
    uint64_t v11 = *v0;
    uint64_t v12 = v0[2];
    uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    unint64_t v20 = sub_1D76ABE0C();
    uint64_t v13 = (void *)swift_allocObject();
    v18[0] = v13;
    v13[2] = v11;
    v13[3] = v3;
    v13[4] = v12;
    v13[5] = v4;
    sub_1D76F8504();
    swift_allocError();
    uint64_t v15 = v14;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)(MEMORY[0x1E4FBC358], v18, 0x80000001D76FD340, v15);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
    swift_willThrow();
  }
  else
  {
    xpc_object_t v5 = xpc_array_get_value(v3, v4);
    if (MEMORY[0x1D94771B0]() == v2)
    {
      int64_t v3 = (void *)sub_1D76A8D5C(*v0, (uint64_t)v3, v0[2], v4, v5);
      swift_unknownObjectRelease();
      if (!v1) {
        v0[3] = v4 + 1;
      }
    }
    else
    {
      v17[3] = swift_getObjectType();
      v17[0] = v5;
      uint64_t v6 = *v0;
      uint64_t v7 = v0[2];
      uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      unint64_t v20 = sub_1D76ABE0C();
      xpc_object_t v8 = (void *)swift_allocObject();
      v18[0] = v8;
      v8[2] = v6;
      v8[3] = v3;
      v8[4] = v7;
      v8[5] = v4;
      sub_1D76F8504();
      swift_allocError();
      int64_t v10 = v9;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)(MEMORY[0x1E4FBC358], (uint64_t)v17, v18, 0, v10);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      swift_willThrow();
      swift_unknownObjectRelease();
    }
  }
  return v3;
}

void *sub_1D76A8690()
{
  uint64_t v2 = XPCTypeUInt64;
  int64_t v3 = (void *)v0[1];
  int64_t v4 = v0[3];
  if (v4 >= (uint64_t)xpc_array_get_count(v3))
  {
    uint64_t v11 = *v0;
    uint64_t v12 = v0[2];
    uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    unint64_t v20 = sub_1D76ABE0C();
    uint64_t v13 = (void *)swift_allocObject();
    v18[0] = v13;
    v13[2] = v11;
    v13[3] = v3;
    v13[4] = v12;
    v13[5] = v4;
    sub_1D76F8504();
    swift_allocError();
    uint64_t v15 = v14;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)(MEMORY[0x1E4FBC450], v18, 0x80000001D76FD340, v15);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
    swift_willThrow();
  }
  else
  {
    xpc_object_t v5 = xpc_array_get_value(v3, v4);
    if (MEMORY[0x1D94771B0]() == v2)
    {
      int64_t v3 = (void *)sub_1D76A8E74(*v0, (uint64_t)v3, v0[2], v4, v5);
      swift_unknownObjectRelease();
      if (!v1) {
        v0[3] = v4 + 1;
      }
    }
    else
    {
      v17[3] = swift_getObjectType();
      v17[0] = v5;
      uint64_t v6 = *v0;
      uint64_t v7 = v0[2];
      uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      unint64_t v20 = sub_1D76ABE0C();
      xpc_object_t v8 = (void *)swift_allocObject();
      v18[0] = v8;
      v8[2] = v6;
      v8[3] = v3;
      v8[4] = v7;
      v8[5] = v4;
      sub_1D76F8504();
      swift_allocError();
      int64_t v10 = v9;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)(MEMORY[0x1E4FBC450], (uint64_t)v17, v18, 0, v10);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      swift_willThrow();
      swift_unknownObjectRelease();
    }
  }
  return v3;
}

void *sub_1D76A88DC()
{
  uint64_t v2 = XPCTypeUInt64;
  int64_t v3 = (void *)v0[1];
  int64_t v4 = v0[3];
  if (v4 >= (uint64_t)xpc_array_get_count(v3))
  {
    uint64_t v11 = *v0;
    uint64_t v12 = v0[2];
    uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    unint64_t v20 = sub_1D76ABE0C();
    uint64_t v13 = (void *)swift_allocObject();
    v18[0] = v13;
    v13[2] = v11;
    v13[3] = v3;
    v13[4] = v12;
    v13[5] = v4;
    sub_1D76F8504();
    swift_allocError();
    uint64_t v15 = v14;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)(MEMORY[0x1E4FBC4C0], v18, 0x80000001D76FD340, v15);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
    swift_willThrow();
  }
  else
  {
    xpc_object_t v5 = xpc_array_get_value(v3, v4);
    if (MEMORY[0x1D94771B0]() == v2)
    {
      int64_t v3 = (void *)sub_1D76A8F8C(*v0, (uint64_t)v3, v0[2], v4, v5);
      swift_unknownObjectRelease();
      if (!v1) {
        v0[3] = v4 + 1;
      }
    }
    else
    {
      v17[3] = swift_getObjectType();
      v17[0] = v5;
      uint64_t v6 = *v0;
      uint64_t v7 = v0[2];
      uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      unint64_t v20 = sub_1D76ABE0C();
      xpc_object_t v8 = (void *)swift_allocObject();
      v18[0] = v8;
      v8[2] = v6;
      v8[3] = v3;
      v8[4] = v7;
      v8[5] = v4;
      sub_1D76F8504();
      swift_allocError();
      int64_t v10 = v9;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)(MEMORY[0x1E4FBC4C0], (uint64_t)v17, v18, 0, v10);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      swift_willThrow();
      swift_unknownObjectRelease();
    }
  }
  return v3;
}

uint64_t sub_1D76A8B28()
{
  uint64_t v1 = XPCTypeUInt64;
  uint64_t v2 = (void *)v0[1];
  int64_t v3 = v0[3];
  if (v3 >= (uint64_t)xpc_array_get_count(v2))
  {
    uint64_t v11 = *v0;
    uint64_t v12 = v0[2];
    uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    unint64_t v20 = sub_1D76ABE0C();
    uint64_t v13 = (void *)swift_allocObject();
    v18[0] = v13;
    v13[2] = v11;
    v13[3] = v2;
    v13[4] = v12;
    v13[5] = v3;
    sub_1D76F8504();
    swift_allocError();
    uint64_t v15 = v14;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)(MEMORY[0x1E4FBC538], v18, 0x80000001D76FD340, v15);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
    return swift_willThrow();
  }
  else
  {
    xpc_object_t v4 = xpc_array_get_value(v2, v3);
    if (MEMORY[0x1D94771B0]() == v1)
    {
      uint64_t value = xpc_uint64_get_value(v4);
      swift_unknownObjectRelease();
      v0[3] = v3 + 1;
      return value;
    }
    else
    {
      v17[3] = swift_getObjectType();
      v17[0] = v4;
      uint64_t v5 = *v0;
      uint64_t v6 = v0[2];
      uint64_t v19 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      unint64_t v20 = sub_1D76ABE0C();
      uint64_t v7 = (void *)swift_allocObject();
      v18[0] = v7;
      v7[2] = v5;
      v7[3] = v2;
      v7[4] = v6;
      v7[5] = v3;
      sub_1D76F8504();
      swift_allocError();
      xpc_object_t v9 = v8;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)(MEMORY[0x1E4FBC538], (uint64_t)v17, v18, 0, v9);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
      swift_willThrow();
      return swift_unknownObjectRelease();
    }
  }
}

uint64_t sub_1D76A8D5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, xpc_object_t xuint)
{
  uint64_t result = xpc_uint64_get_value(xuint);
  if (result > 0xFF)
  {
    v11[3] = &type metadata for XPCObjectUnkeyedDecodingContainer;
    v11[4] = sub_1D76ABE0C();
    int64_t v10 = (void *)swift_allocObject();
    v10[2] = a1;
    v10[3] = a2;
    v10[4] = a3;
    v10[5] = a4;
    v11[0] = v10;
    swift_retain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    sub_1D76F8464();
    swift_bridgeObjectRelease();
    sub_1D76F8504();
    swift_allocError();
    sub_1D76F84C4();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1D76A8E74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, xpc_object_t xuint)
{
  uint64_t result = xpc_uint64_get_value(xuint);
  if (result >> 16)
  {
    v11[3] = &type metadata for XPCObjectUnkeyedDecodingContainer;
    v11[4] = sub_1D76ABE0C();
    int64_t v10 = (void *)swift_allocObject();
    v10[2] = a1;
    v10[3] = a2;
    v10[4] = a3;
    v10[5] = a4;
    v11[0] = v10;
    swift_retain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    sub_1D76F8464();
    swift_bridgeObjectRelease();
    sub_1D76F8504();
    swift_allocError();
    sub_1D76F84C4();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1D76A8F8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, xpc_object_t xuint)
{
  uint64_t result = xpc_uint64_get_value(xuint);
  if (HIDWORD(result))
  {
    v11[3] = &type metadata for XPCObjectUnkeyedDecodingContainer;
    v11[4] = sub_1D76ABE0C();
    int64_t v10 = (void *)swift_allocObject();
    v10[2] = a1;
    v10[3] = a2;
    v10[4] = a3;
    v10[5] = a4;
    v11[0] = v10;
    swift_retain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    sub_1D76F8464();
    swift_bridgeObjectRelease();
    sub_1D76F8504();
    swift_allocError();
    sub_1D76F84C4();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1D76A90A4()
{
  uint64_t v2 = sub_1D76F8504();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188788](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D76A6EEC(XPCTypeNull, v0, (uint64_t *)&unk_1EBA34248);
  if (!v1)
  {
    swift_unknownObjectRelease();
    return v1 == 0;
  }
  id v13 = v1;
  id v6 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F40);
  if (!swift_dynamicCast())
  {
LABEL_8:

    return v1 == 0;
  }
  if ((*(unsigned int (**)(char *, uint64_t))(v3 + 88))(v5, v2) != *MEMORY[0x1E4FBBA70])
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    goto LABEL_8;
  }

  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 96))(v5, v2);
  uint64_t v8 = *(void *)(v0 + 24);
  uint64_t v9 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    int64_t v10 = &v5[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34240) + 48)];
    *(void *)(v0 + 24) = v9;
    uint64_t v11 = sub_1D76F84F4();
    (*(void (**)(char *, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);

    return v1 == 0;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D76A929C()
{
  xpc_object_t v3 = sub_1D76A667C(XPCTypeString, v0);
  if (!v1)
  {
    uint64_t v4 = v3;
    xpc_string_get_string_ptr(v3);
    xpc_string_get_length(v4);
    uint64_t v2 = sub_1D76F8074();
    swift_unknownObjectRelease();
  }
  return v2;
}

void *sub_1D76A932C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v46 = a3;
  uint64_t v47 = a1;
  uint64_t v48 = a4;
  uint64_t v54 = *MEMORY[0x1E4F143C0];
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x1F4188788](a1);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1D76F7D04();
  MEMORY[0x1F4188788](v10);
  uint64_t v11 = sub_1D76F7C94();
  MEMORY[0x1F4188788](v11);
  if (swift_dynamicCastMetatype())
  {
    uint64_t result = sub_1D76A6AAC(XPCTypeDate, v4, MEMORY[0x1E4F27928]);
    if (v5) {
      return result;
    }
    xpc_date_get_value(result);
    swift_unknownObjectRelease();
    sub_1D76F7C74();
    return (void *)swift_dynamicCast();
  }
  id v13 = v9;
  uint64_t v45 = v7;
  if (swift_dynamicCastMetatype())
  {
    uint64_t result = sub_1D76A6AAC(XPCTypeUUID, v4, MEMORY[0x1E4F27990]);
    if (v5) {
      return result;
    }
    bytes = xpc_uuid_get_bytes(result);
    uint64_t result = (void *)swift_unknownObjectRelease();
    if (bytes)
    {
      sub_1D76F7CD4();
      return (void *)swift_dynamicCast();
    }
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v15 = v4;
  if (swift_dynamicCastMetatype())
  {
    uint64_t result = sub_1D76A6CD4(XPCTypeData, v4);
    if (v5) {
      return result;
    }
    uint64_t v16 = result;
    uint64_t result = (void *)xpc_data_get_bytes_ptr(result);
    if (result)
    {
      uint64_t v17 = result;
      size_t length = xpc_data_get_length(v16);
      uint64_t v19 = sub_1D76C84FC(v17, length);
      unint64_t v21 = v20;
      swift_unknownObjectRelease();
      uint64_t v50 = v19;
      unint64_t v51 = v21;
      return (void *)swift_dynamicCast();
    }
LABEL_23:
    __break(1u);
    return result;
  }
  uint64_t v22 = swift_dynamicCastMetatype();
  uint64_t v23 = *(void **)(v4 + 8);
  int64_t v24 = *(void *)(v15 + 24);
  if (v22)
  {
    if (v24 >= (uint64_t)xpc_array_get_count(*(xpc_object_t *)(v15 + 8)))
    {
      uint64_t v35 = *(void *)v15;
      uint64_t v36 = *(void *)(v15 + 16);
      xpc_object_t v52 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      unint64_t v53 = sub_1D76ABE0C();
      uint64_t v37 = (void *)swift_allocObject();
      uint64_t v50 = (uint64_t)v37;
      v37[2] = v35;
      v37[3] = v23;
      v37[4] = v36;
      v37[5] = v24;
      sub_1D76F8504();
      swift_allocError();
      xpc_object_t v39 = v38;
      swift_retain();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)(v47, &v50, 0x80000001D76FD340, v39);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v50);
      return (void *)swift_willThrow();
    }
    id v25 = xpc_array_get_value(v23, v24);
    *(void *)(v15 + 24) = v24 + 1;
    uint64_t v50 = (uint64_t)v25;
    return (void *)swift_dynamicCast();
  }
  xpc_object_t v41 = xpc_array_get_value(*(xpc_object_t *)(v15 + 8), *(void *)(v15 + 24));
  uint64_t v44 = *(void *)v15;
  uint64_t v43 = *(void *)(v44 + 24);
  uint64_t v42 = *(void *)(v15 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34C78);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D76FA300;
  uint64_t v50 = 0x207865646E49;
  unint64_t v51 = 0xE600000000000000;
  int64_t v49 = v24;
  swift_retain();
  swift_unknownObjectRetain();
  sub_1D76F87A4();
  sub_1D76F80A4();
  swift_bridgeObjectRelease();
  uint64_t v27 = v50;
  unint64_t v28 = v51;
  *(void *)(inited + 56) = &type metadata for CodableIndexKey;
  *(void *)(inited + 64) = sub_1D76AC504();
  uint64_t v29 = swift_allocObject();
  *(void *)(inited + 32) = v29;
  *(void *)(v29 + 16) = v27;
  *(void *)(v29 + 24) = v28;
  int64_t v40 = v24;
  *(void *)(v29 + 32) = v24;
  *(unsigned char *)(v29 + 40) = 0;
  uint64_t v50 = v42;
  swift_bridgeObjectRetain();
  sub_1D76F76A8(inited);
  uint64_t v30 = v50;
  uint64_t v31 = *(void *)(v44 + 40);
  uint64_t v32 = type metadata accessor for _XPCObjectDecoder();
  uint64_t v33 = (void *)swift_allocObject();
  uint64_t v34 = v43;
  _OWORD v33[2] = v41;
  v33[3] = v34;
  v33[4] = v30;
  v33[5] = v31;
  xpc_object_t v52 = (ValueMetadata *)v32;
  unint64_t v53 = sub_1D76AB700((unint64_t *)&unk_1EBA346D0, (void (*)(void))type metadata accessor for _XPCObjectDecoder);
  uint64_t v50 = (uint64_t)v33;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1D76F8254();
  swift_release();
  uint64_t result = (void *)swift_unknownObjectRelease();
  if (!v5)
  {
    if (__OFADD__(v40, 1)) {
      __break(1u);
    }
    *(void *)(v15 + 24) = v40 + 1;
    return (void *)(*(uint64_t (**)(uint64_t, char *, uint64_t))(v45 + 32))(v48, v13, a2);
  }
  return result;
}

uint64_t sub_1D76A9990(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = XPCTypeDictionary;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA334D0);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = v6;
  sub_1D76A7110(a2, v5, (void (*)(void, void *, void, int64_t, xpc_object_t))sub_1D76ACA24);
  uint64_t result = swift_release();
  if (!v3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34C78);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1D76FA300;
    uint64_t v10 = *(void *)(v2 + 24);
    swift_retain();
    sub_1D76F87A4();
    sub_1D76F80A4();
    swift_bridgeObjectRelease();
    *(void *)(inited + 56) = &type metadata for CodableIndexKey;
    *(void *)(inited + 64) = sub_1D76AC504();
    uint64_t v11 = swift_allocObject();
    *(void *)(inited + 32) = v11;
    *(void *)(v11 + 16) = 0x207865646E49;
    *(void *)(v11 + 24) = 0xE600000000000000;
    *(void *)(v11 + 32) = v10;
    *(unsigned char *)(v11 + 40) = 0;
    swift_bridgeObjectRetain();
    sub_1D76F76A8(inited);
    type metadata accessor for XPCObjectKeyedDecodingContainer();
    swift_getWitnessTable();
    return sub_1D76F86F4();
  }
  return result;
}

void *sub_1D76A9BF0@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_1D76A6EEC(XPCTypeArray, (uint64_t)v1, &qword_1EA83A648);
  if (!v2)
  {
    uint64_t v5 = result;
    uint64_t v6 = *v1;
    uint64_t v7 = v1[2];
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34C78);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1D76FA300;
    uint64_t v9 = v1[3];
    swift_retain();
    sub_1D76F87A4();
    sub_1D76F80A4();
    swift_bridgeObjectRelease();
    *(void *)(inited + 56) = &type metadata for CodableIndexKey;
    *(void *)(inited + 64) = sub_1D76AC504();
    uint64_t v10 = swift_allocObject();
    *(void *)(inited + 32) = v10;
    *(void *)(v10 + 16) = 0x207865646E49;
    *(void *)(v10 + 24) = 0xE600000000000000;
    *(void *)(v10 + 32) = v9;
    *(unsigned char *)(v10 + 40) = 0;
    swift_bridgeObjectRetain();
    sub_1D76F76A8(inited);
    a1[3] = &type metadata for XPCObjectUnkeyedDecodingContainer;
    a1[4] = sub_1D76ABE0C();
    uint64_t result = (void *)swift_allocObject();
    *a1 = result;
    result[2] = v6;
    result[3] = v5;
    result[4] = v7;
    result[5] = 0;
  }
  return result;
}

size_t sub_1D76A9D98()
{
  return xpc_array_get_count(*(xpc_object_t *)(v0 + 8));
}

BOOL sub_1D76A9DB8()
{
  uint64_t v1 = *(void *)(v0 + 24);
  return v1 >= (uint64_t)xpc_array_get_count(*(xpc_object_t *)(v0 + 8));
}

uint64_t sub_1D76A9DE8()
{
  return *(void *)(v0 + 24);
}

uint64_t sub_1D76A9DF0()
{
  return sub_1D76A90A4() & 1;
}

BOOL sub_1D76A9E0C()
{
  xpc_object_t v3 = sub_1D76A6464(XPCTypeBool, v0);
  if (!v1)
  {
    BOOL value = xpc_BOOL_get_value(v3);
    swift_unknownObjectRelease();
  }
  return value;
}

uint64_t sub_1D76A9E68()
{
  return sub_1D76A929C();
}

xpc_object_t sub_1D76A9E80()
{
  xpc_object_t result = sub_1D76A6894(XPCTypeDouble, v0);
  if (!v1)
  {
    xpc_double_get_value(result);
    return (xpc_object_t)swift_unknownObjectRelease();
  }
  return result;
}

float sub_1D76A9EDC()
{
  return sub_1D76AC07C();
}

uint64_t sub_1D76A9EF4()
{
  return sub_1D76A737C();
}

void *sub_1D76A9F0C()
{
  return sub_1D76A75B0();
}

void *sub_1D76A9F24()
{
  return sub_1D76A77FC();
}

void *sub_1D76A9F3C()
{
  return sub_1D76A7A48();
}

uint64_t sub_1D76A9F54()
{
  return sub_1D76A7C94();
}

uint64_t sub_1D76A9F6C()
{
  return sub_1D76F8854();
}

uint64_t sub_1D76A9F84()
{
  return sub_1D76A8210();
}

void *sub_1D76A9F9C()
{
  return sub_1D76A8444();
}

void *sub_1D76A9FB4()
{
  return sub_1D76A8690();
}

void *sub_1D76A9FCC()
{
  return sub_1D76A88DC();
}

uint64_t sub_1D76A9FE4()
{
  return sub_1D76A8B28();
}

uint64_t sub_1D76A9FFC()
{
  return sub_1D76F8864();
}

void *sub_1D76AA014@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1D76A932C(a1, a2, a3, a4);
}

uint64_t sub_1D76AA02C()
{
  return sub_1D76F87E4();
}

uint64_t sub_1D76AA044()
{
  return sub_1D76F87D4();
}

uint64_t sub_1D76AA05C()
{
  uint64_t result = sub_1D76F87F4();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_1D76AA080(uint64_t a1, uint64_t a2)
{
  return sub_1D76AA2AC(a1, a2, MEMORY[0x1E4FBBE18]);
}

uint64_t sub_1D76AA0AC()
{
  uint64_t result = sub_1D76F8804();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_1D76AA0D0(uint64_t a1, uint64_t a2)
{
  return sub_1D76AA1F4(a1, a2, MEMORY[0x1E4FBBE20]);
}

uint64_t sub_1D76AA0FC(uint64_t a1, uint64_t a2)
{
  return sub_1D76AA250(a1, a2, MEMORY[0x1E4FBBE28]);
}

uint64_t sub_1D76AA128(uint64_t a1, uint64_t a2)
{
  return sub_1D76AA2AC(a1, a2, MEMORY[0x1E4FBBE30]);
}

uint64_t sub_1D76AA154()
{
  uint64_t result = sub_1D76F8834();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_1D76AA178(uint64_t a1, uint64_t a2)
{
  return sub_1D76AA334(a1, a2, MEMORY[0x1E4FBBE40]);
}

uint64_t sub_1D76AA1A4()
{
  uint64_t result = sub_1D76F8814();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_1D76AA1C8(uint64_t a1, uint64_t a2)
{
  return sub_1D76AA1F4(a1, a2, MEMORY[0x1E4FBBE38]);
}

uint64_t sub_1D76AA1F4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3() & 0x1FF;
}

uint64_t sub_1D76AA224(uint64_t a1, uint64_t a2)
{
  return sub_1D76AA250(a1, a2, MEMORY[0x1E4FBBE48]);
}

uint64_t sub_1D76AA250(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3() & 0x1FFFF;
}

uint64_t sub_1D76AA280(uint64_t a1, uint64_t a2)
{
  return sub_1D76AA2AC(a1, a2, MEMORY[0x1E4FBBE50]);
}

uint64_t sub_1D76AA2AC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  unint64_t v3 = a3();
  return v3 | ((HIDWORD(v3) & 1) << 32);
}

uint64_t sub_1D76AA2E4()
{
  uint64_t result = sub_1D76F8844();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_1D76AA308(uint64_t a1, uint64_t a2)
{
  return sub_1D76AA334(a1, a2, MEMORY[0x1E4FBBE58]);
}

uint64_t sub_1D76AA334(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t result = a3();
  if (v3) {
    return v5;
  }
  return result;
}

uint64_t sub_1D76AA360()
{
  return sub_1D76F8824();
}

uint64_t sub_1D76AA38C(uint64_t a1, uint64_t a2)
{
  return sub_1D76A9990(a1, a2);
}

void *sub_1D76AA3A4@<X0>(void *a1@<X8>)
{
  return sub_1D76A9BF0(a1);
}

uint64_t sub_1D76AA3BC()
{
  uint64_t v0 = type metadata accessor for _XPCObjectDecoder();
  uint64_t v1 = sub_1D76F8504();
  swift_allocError();
  uint64_t v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34240);
  *uint64_t v3 = v0;
  swift_bridgeObjectRetain();
  sub_1D76F84E4();
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v1 - 8) + 104))(v3, *MEMORY[0x1E4FBBA80], v1);
  return swift_willThrow();
}

void *sub_1D76AA4A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (void *)sub_1D76B05F8(XPCTypeInt64, a1, a2);
  if (!v3)
  {
    uint64_t result = (void *)xpc_int64_get_value(result);
    if (result != (void *)(char)result)
    {
      v8[3] = &type metadata for XPCObjectSingleValueDecodingContainer;
      v8[0] = a1;
      v8[1] = a2;
      v8[4] = sub_1D76ABDB8();
      v8[2] = a3;
      swift_retain();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      sub_1D76F8464();
      swift_bridgeObjectRelease();
      sub_1D76F8504();
      swift_allocError();
      sub_1D76F84B4();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v8);
      return (void *)swift_willThrow();
    }
  }
  return result;
}

void *sub_1D76AA5B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (void *)sub_1D76B06F0(XPCTypeInt64, a1, a2);
  if (!v3)
  {
    uint64_t result = (void *)xpc_int64_get_value(result);
    if (result != (void *)(__int16)result)
    {
      v8[3] = &type metadata for XPCObjectSingleValueDecodingContainer;
      v8[0] = a1;
      v8[1] = a2;
      v8[4] = sub_1D76ABDB8();
      v8[2] = a3;
      swift_retain();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      sub_1D76F8464();
      swift_bridgeObjectRelease();
      sub_1D76F8504();
      swift_allocError();
      sub_1D76F84B4();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v8);
      return (void *)swift_willThrow();
    }
  }
  return result;
}

void *sub_1D76AA6C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (void *)sub_1D76B07E8(XPCTypeInt64, a1, a2);
  if (!v3)
  {
    uint64_t result = (void *)xpc_int64_get_value(result);
    if (result != (void *)(int)result)
    {
      v8[3] = &type metadata for XPCObjectSingleValueDecodingContainer;
      v8[0] = a1;
      v8[1] = a2;
      v8[4] = sub_1D76ABDB8();
      v8[2] = a3;
      swift_retain();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      sub_1D76F8464();
      swift_bridgeObjectRelease();
      sub_1D76F8504();
      swift_allocError();
      sub_1D76F84B4();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v8);
      return (void *)swift_willThrow();
    }
  }
  return result;
}

void *sub_1D76AA7D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (void *)sub_1D76B0AD0(XPCTypeUInt64, a1, a2);
  if (!v3)
  {
    uint64_t result = (void *)xpc_uint64_get_value(result);
    if ((unint64_t)result > 0xFF)
    {
      v8[3] = &type metadata for XPCObjectSingleValueDecodingContainer;
      v8[0] = a1;
      v8[1] = a2;
      v8[4] = sub_1D76ABDB8();
      v8[2] = a3;
      swift_retain();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      sub_1D76F8464();
      swift_bridgeObjectRelease();
      sub_1D76F8504();
      swift_allocError();
      sub_1D76F84B4();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v8);
      return (void *)swift_willThrow();
    }
  }
  return result;
}

unint64_t sub_1D76AA8E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result = sub_1D76B0BC8(XPCTypeUInt64, a1, a2);
  if (!v3)
  {
    unint64_t result = xpc_uint64_get_value((xpc_object_t)result);
    if (result >> 16)
    {
      v8[3] = &type metadata for XPCObjectSingleValueDecodingContainer;
      v8[0] = a1;
      v8[1] = a2;
      v8[4] = sub_1D76ABDB8();
      v8[2] = a3;
      swift_retain();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      sub_1D76F8464();
      swift_bridgeObjectRelease();
      sub_1D76F8504();
      swift_allocError();
      sub_1D76F84B4();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v8);
      return swift_willThrow();
    }
  }
  return result;
}

unint64_t sub_1D76AA9F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result = sub_1D76B0CC0(XPCTypeUInt64, a1, a2);
  if (!v3)
  {
    unint64_t result = xpc_uint64_get_value((xpc_object_t)result);
    if (HIDWORD(result))
    {
      v8[3] = &type metadata for XPCObjectSingleValueDecodingContainer;
      v8[0] = a1;
      v8[1] = a2;
      v8[4] = sub_1D76ABDB8();
      v8[2] = a3;
      swift_retain();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      sub_1D76F8464();
      swift_bridgeObjectRelease();
      sub_1D76F8504();
      swift_allocError();
      sub_1D76F84B4();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v8);
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t sub_1D76AAB08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1D76B0218(XPCTypeString, a1, a2);
  if (!v2)
  {
    uint64_t v5 = (void *)v4;
    uint64_t v6 = (void *)swift_unknownObjectRetain();
    xpc_string_get_string_ptr(v6);
    xpc_string_get_length(v5);
    uint64_t v3 = sub_1D76F8074();
    swift_unknownObjectRelease();
  }
  return v3;
}

void *sub_1D76AABA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_1D76F7D04();
  MEMORY[0x1F4188788](v8);
  uint64_t v9 = sub_1D76F7C94();
  MEMORY[0x1F4188788](v9);
  if (swift_dynamicCastMetatype())
  {
    unint64_t result = (void *)sub_1D76AFEF8(XPCTypeDate, a2, a3, a4);
    if (v4) {
      return result;
    }
    xpc_date_get_value(result);
    sub_1D76F7C74();
    return (void *)swift_dynamicCast();
  }
  if (swift_dynamicCastMetatype())
  {
    unint64_t result = (void *)sub_1D76AFECC(XPCTypeUUID, a2, a3, a4);
    if (v4) {
      return result;
    }
    unint64_t result = (void *)xpc_uuid_get_bytes(result);
    if (result)
    {
      sub_1D76F7CD4();
      return (void *)swift_dynamicCast();
    }
    __break(1u);
    goto LABEL_18;
  }
  if (swift_dynamicCastMetatype())
  {
    unint64_t result = (void *)sub_1D76B0028(XPCTypeData, a2, a3);
    if (v4) {
      return result;
    }
    uint64_t v11 = result;
    uint64_t v12 = (void *)swift_unknownObjectRetain();
    unint64_t result = (void *)xpc_data_get_bytes_ptr(v12);
    if (result)
    {
      id v13 = result;
      size_t length = xpc_data_get_length(v11);
      sub_1D76C84FC(v13, length);
      swift_unknownObjectRelease();
      return (void *)swift_dynamicCast();
    }
LABEL_18:
    __break(1u);
    return result;
  }
  if (swift_dynamicCastMetatype())
  {
    swift_unknownObjectRetain();
    return (void *)swift_dynamicCast();
  }
  else
  {
    uint64_t v15 = a2;
    uint64_t v16 = *(void *)(a2 + 24);
    uint64_t v17 = *(void *)(v15 + 40);
    type metadata accessor for _XPCObjectDecoder();
    uint64_t v18 = (void *)swift_allocObject();
    v18[2] = a3;
    void v18[3] = v16;
    v18[4] = a4;
    v18[5] = v17;
    sub_1D76AB700((unint64_t *)&unk_1EBA346D0, (void (*)(void))type metadata accessor for _XPCObjectDecoder);
    swift_retain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return (void *)sub_1D76F8254();
  }
}

BOOL sub_1D76AAF28()
{
  return MEMORY[0x1D94771B0](*(void *)(v0 + 8)) == XPCTypeNull;
}

uint64_t sub_1D76AAF58()
{
  uint64_t v2 = sub_1D76B0120(XPCTypeBool, *v0, v0[1]);
  if (!v1) {
    LOBYTE(v2) = xpc_BOOL_get_value((xpc_object_t)v2);
  }
  return v2 & 1;
}

uint64_t sub_1D76AAFA8()
{
  return sub_1D76AAB08(*v0, v0[1]);
}

double sub_1D76AAFC8()
{
  uint64_t v2 = (void *)sub_1D76B0310(XPCTypeDouble, *v0, v0[1]);
  if (!v1) {
    return xpc_double_get_value(v2);
  }
  return result;
}

void sub_1D76AB00C()
{
  sub_1D76AC370(*v0, v0[1], v0[2]);
}

uint64_t sub_1D76AB02C(uint64_t a1, uint64_t a2)
{
  return sub_1D76AB2E4(a1, a2, &XPCTypeInt64, (uint64_t (*)(void, void, void, void))sub_1D76B0500, MEMORY[0x1E4F14B90]);
}

uint64_t sub_1D76AB074(uint64_t a1, uint64_t a2)
{
  return sub_1D76AB1CC(a1, a2, (uint64_t (*)(void, void, void))sub_1D76AA4A8);
}

uint64_t sub_1D76AB0A0(uint64_t a1, uint64_t a2)
{
  return sub_1D76AB220(a1, a2, (uint64_t (*)(void, void, void))sub_1D76AA5B8);
}

uint64_t sub_1D76AB0CC(uint64_t a1, uint64_t a2)
{
  return sub_1D76AB274(a1, a2, (uint64_t (*)(void, void, void))sub_1D76AA6C8);
}

uint64_t sub_1D76AB0F8(uint64_t a1, uint64_t a2)
{
  return sub_1D76AB2E4(a1, a2, &XPCTypeInt64, (uint64_t (*)(void, void, void, void))sub_1D76B08E0, MEMORY[0x1E4F14B90]);
}

uint64_t sub_1D76AB140()
{
  return sub_1D76F8A14();
}

uint64_t sub_1D76AB158(uint64_t a1, uint64_t a2)
{
  return sub_1D76AB2E4(a1, a2, &XPCTypeUInt64, (uint64_t (*)(void, void, void, void))sub_1D76B09D8, MEMORY[0x1E4F14BB0]);
}

uint64_t sub_1D76AB1A0(uint64_t a1, uint64_t a2)
{
  return sub_1D76AB1CC(a1, a2, (uint64_t (*)(void, void, void))sub_1D76AA7D8);
}

uint64_t sub_1D76AB1CC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void, void))
{
  return a3(*v3, v3[1], v3[2]);
}

uint64_t sub_1D76AB1F4(uint64_t a1, uint64_t a2)
{
  return sub_1D76AB220(a1, a2, (uint64_t (*)(void, void, void))sub_1D76AA8E8);
}

uint64_t sub_1D76AB220(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void, void))
{
  return a3(*v3, v3[1], v3[2]);
}

uint64_t sub_1D76AB248(uint64_t a1, uint64_t a2)
{
  return sub_1D76AB274(a1, a2, (uint64_t (*)(void, void, void))sub_1D76AA9F8);
}

uint64_t sub_1D76AB274(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void, void))
{
  return a3(*v3, v3[1], v3[2]);
}

uint64_t sub_1D76AB29C(uint64_t a1, uint64_t a2)
{
  return sub_1D76AB2E4(a1, a2, &XPCTypeUInt64, (uint64_t (*)(void, void, void, void))sub_1D76B0DB8, MEMORY[0x1E4F14BB0]);
}

uint64_t sub_1D76AB2E4(uint64_t a1, uint64_t a2, void *a3, uint64_t (*a4)(void, void, void, void), uint64_t (*a5)(uint64_t))
{
  uint64_t result = a4(*a3, *v5, v5[1], v5[2]);
  if (!v6) {
    return a5(result);
  }
  return result;
}

uint64_t sub_1D76AB334()
{
  return sub_1D76F8A24();
}

void *sub_1D76AB34C(uint64_t a1)
{
  return sub_1D76AABA4(a1, *v1, v1[1], v1[2]);
}

uint64_t (*XPCObjectContainer.object.modify())()
{
  return nullsub_1;
}

uint64_t XPCObjectContainer.init(wrappedValue:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void XPCObjectContainer.init(from:)()
{
}

void XPCObjectContainer.encode(to:)()
{
}

uint64_t XPCObjectContainer.wrappedValue.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t XPCObjectContainer.wrappedValue.setter(uint64_t a1)
{
  uint64_t result = swift_unknownObjectRelease();
  void *v1 = a1;
  return result;
}

uint64_t (*XPCObjectContainer.wrappedValue.modify(void *a1))(uint64_t *a1, char a2)
{
  *a1 = *v1;
  a1[1] = v1;
  swift_unknownObjectRetain();
  return sub_1D76AB4D8;
}

uint64_t sub_1D76AB4D8(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)a1[1];
  if (a2)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *uint64_t v3 = v2;
    return swift_unknownObjectRelease();
  }
  else
  {
    uint64_t result = swift_unknownObjectRelease();
    *uint64_t v3 = v2;
  }
  return result;
}

void sub_1D76AB54C()
{
}

void sub_1D76AB5A8()
{
}

uint64_t type metadata accessor for _XPCObjectEncoder()
{
  return self;
}

uint64_t sub_1D76AB628()
{
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1D76AB660(char *key, xpc_object_t value)
{
  xpc_dictionary_set_value(*(xpc_object_t *)(v2 + 16), key, value);
  return 1;
}

uint64_t sub_1D76AB688()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D76AB698()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t type metadata accessor for _XPCObjectDecoder()
{
  return self;
}

uint64_t sub_1D76AB700(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D76AB744(uint64_t a1)
{
  return XPCObjectDecoder.decode<A>(_:from:)(a1, a1);
}

uint64_t sub_1D76AB770@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_unknownObjectRetain();
}

uint64_t sub_1D76AB77C(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  swift_unknownObjectRetain();
  uint64_t result = swift_unknownObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t type metadata accessor for XPCObjectEncoder()
{
  return self;
}

uint64_t method lookup function for XPCObjectEncoder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for XPCObjectEncoder);
}

uint64_t dispatch thunk of XPCObjectEncoder.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of XPCObjectEncoder.__allocating_init(underlyingConnection:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t type metadata accessor for XPCObjectDecoder()
{
  return self;
}

uint64_t method lookup function for XPCObjectDecoder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for XPCObjectDecoder);
}

uint64_t dispatch thunk of XPCObjectDecoder.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of XPCObjectDecoder.__allocating_init(underlyingConnection:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

ValueMetadata *type metadata accessor for XPCObjectContainer()
{
  return &type metadata for XPCObjectContainer;
}

uint64_t sub_1D76AB8C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 32);
}

uint64_t type metadata accessor for XPCObjectKeyedEncodingContainer()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for XPCObjectSingleValueDecodingContainer()
{
  return &type metadata for XPCObjectSingleValueDecodingContainer;
}

uint64_t destroy for XPCObjectSingleValueEncodingContainer()
{
  swift_release();

  return swift_bridgeObjectRelease();
}

void *_s7Mercury37XPCObjectSingleValueEncodingContainerVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for XPCObjectSingleValueEncodingContainer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

_OWORD *assignWithTake for XPCObjectSingleValueEncodingContainer(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for XPCObjectSingleValueEncodingContainer(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCObjectSingleValueEncodingContainer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCObjectSingleValueEncodingContainer()
{
  return &type metadata for XPCObjectSingleValueEncodingContainer;
}

uint64_t destroy for CodableIndexKey()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CodableIndexKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CodableIndexKey(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for CodableIndexKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for CodableIndexKey(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 25)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CodableIndexKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CodableIndexKey()
{
  return &type metadata for CodableIndexKey;
}

unint64_t sub_1D76ABC64()
{
  unint64_t result = qword_1EA83A628;
  if (!qword_1EA83A628)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83A628);
  }
  return result;
}

unint64_t sub_1D76ABCBC()
{
  unint64_t result = qword_1EA83A630;
  if (!qword_1EA83A630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83A630);
  }
  return result;
}

unint64_t sub_1D76ABD10()
{
  unint64_t result = qword_1EBA33E28;
  if (!qword_1EBA33E28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBA33E28);
  }
  return result;
}

unint64_t sub_1D76ABD64()
{
  unint64_t result = qword_1EA83A640;
  if (!qword_1EA83A640)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83A640);
  }
  return result;
}

unint64_t sub_1D76ABDB8()
{
  unint64_t result = qword_1EBA34258;
  if (!qword_1EBA34258)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBA34258);
  }
  return result;
}

unint64_t sub_1D76ABE0C()
{
  unint64_t result = qword_1EA83A650;
  if (!qword_1EA83A650)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83A650);
  }
  return result;
}

uint64_t sub_1D76ABE60()
{
  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t type metadata accessor for XPCObjectKeyedDecodingContainer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1D76ABEC0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_1D76ABF18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_1D76F7AC4();
  uint64_t v8 = (char *)result;
  if (result)
  {
    uint64_t result = sub_1D76F7AE4();
    if (__OFSUB__(a1, result))
    {
LABEL_11:
      __break(1u);
      goto LABEL_12;
    }
    v8 += a1 - result;
  }
  BOOL v9 = __OFSUB__(a2, a1);
  int64_t v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t result = sub_1D76F7AD4();
  if (!v8)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  if (result >= v10) {
    size_t v11 = v10;
  }
  else {
    size_t v11 = result;
  }
  uint64_t v12 = *(void **)(a4 + 8);
  swift_unknownObjectRetain();
  xpc_object_t v13 = xpc_data_create(v8, v11);
  xpc_array_append_value(v12, v13);
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_1D76ABFD4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t result = sub_1D76F7AC4();
  uint64_t v7 = result;
  if (result)
  {
    uint64_t result = sub_1D76F7AE4();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v7 += a1 - result;
  }
  BOOL v8 = __OFSUB__(a2, a1);
  uint64_t v9 = a2 - a1;
  if (v8)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v10 = sub_1D76F7AD4();
  if (v10 >= v9) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = v10;
  }
  uint64_t v12 = v7 + v11;
  if (v7) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  return a3(v7, v13);
}

float sub_1D76AC07C()
{
  uint64_t v2 = XPCTypeDouble;
  uint64_t v3 = (void *)v0[1];
  int64_t v4 = v0[3];
  if (v4 >= (uint64_t)xpc_array_get_count(v3))
  {
    uint64_t v12 = *v0;
    uint64_t v13 = v0[2];
    int64_t v24 = &type metadata for XPCObjectUnkeyedDecodingContainer;
    unint64_t v25 = sub_1D76ABE0C();
    uint64_t v14 = (void *)swift_allocObject();
    v23[0] = v14;
    v14[2] = v12;
    v14[3] = v3;
    v14[4] = v13;
    v14[5] = v4;
    sub_1D76F8504();
    swift_allocError();
    uint64_t v16 = v15;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)(MEMORY[0x1E4FBB470], v23, 0x80000001D76FD340, v16);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v23);
    swift_willThrow();
  }
  else
  {
    xpc_object_t v5 = xpc_array_get_value(v3, v4);
    if (MEMORY[0x1D94771B0]() == v2)
    {
      uint64_t v18 = *v0;
      uint64_t v19 = v0[2];
      double value = xpc_double_get_value(v5);
      float v1 = value;
      if (value == v1)
      {
        swift_unknownObjectRelease();
        v0[3] = v4 + 1;
        return v1;
      }
      int64_t v24 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      unint64_t v25 = sub_1D76ABE0C();
      unint64_t v21 = (void *)swift_allocObject();
      v23[0] = v21;
      v21[2] = v18;
      _OWORD v21[3] = v3;
      v21[4] = v19;
      v21[5] = v4;
      sub_1D76F8504();
      swift_allocError();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      sub_1D76F84C4();
      uint64_t v11 = v23;
    }
    else
    {
      _OWORD v22[3] = swift_getObjectType();
      v22[0] = v5;
      uint64_t v6 = *v0;
      uint64_t v7 = v0[2];
      int64_t v24 = &type metadata for XPCObjectUnkeyedDecodingContainer;
      unint64_t v25 = sub_1D76ABE0C();
      BOOL v8 = (void *)swift_allocObject();
      v23[0] = v8;
      v8[2] = v6;
      v8[3] = v3;
      v8[4] = v7;
      void v8[5] = v4;
      sub_1D76F8504();
      swift_allocError();
      uint64_t v10 = v9;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)(MEMORY[0x1E4FBB470], (uint64_t)v22, v23, 0, v10);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v23);
      uint64_t v11 = v22;
    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
    swift_willThrow();
    swift_unknownObjectRelease();
  }
  return v1;
}

void sub_1D76AC370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)sub_1D76B0408(XPCTypeDouble, a1, a2);
  if (!v3)
  {
    double value = xpc_double_get_value(v7);
    float v9 = value;
    if (value != v9)
    {
      v10[3] = &type metadata for XPCObjectSingleValueDecodingContainer;
      v10[0] = a1;
      v10[1] = a2;
      v10[4] = sub_1D76ABDB8();
      v10[2] = a3;
      sub_1D76F8504();
      swift_allocError();
      swift_retain();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      sub_1D76F84B4();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v10);
      swift_willThrow();
    }
  }
}

uint64_t *__swift_allocate_boxed_opaque_existential_0Tm(uint64_t *a1)
{
  float v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_1D76AC4E0(const void *a1, uint64_t a2)
{
  return sub_1D76A00D0(a1, a2, *(void *)(v2 + 48));
}

unint64_t sub_1D76AC504()
{
  unint64_t result = qword_1EA83A660;
  if (!qword_1EA83A660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83A660);
  }
  return result;
}

uint64_t sub_1D76AC558(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RemoteDevice.Identity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

void *initializeWithCopy for XPCObjectUnkeyedDecodingContainer(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for XPCObjectUnkeyedDecodingContainer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for XPCObjectUnkeyedDecodingContainer(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_unknownObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for XPCReplyProviding(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCReplyProviding(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCObjectUnkeyedDecodingContainer()
{
  return &type metadata for XPCObjectUnkeyedDecodingContainer;
}

uint64_t _s7Mercury37XPCObjectSingleValueDecodingContainerVwxx_0()
{
  swift_release();
  swift_unknownObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s7Mercury37XPCObjectSingleValueDecodingContainerVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *_s7Mercury37XPCObjectSingleValueDecodingContainerVwca_0(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s7Mercury37XPCObjectSingleValueDecodingContainerVwta_0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_unknownObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for XPCDictionary(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCDictionary(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCObjectUnkeyedEncodingContainer()
{
  return &type metadata for XPCObjectUnkeyedEncodingContainer;
}

uint64_t sub_1D76AC9AC(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24);
}

uint64_t sub_1D76AC9B4()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 41, 7);
}

void *sub_1D76AC9EC()
{
  __n128 result = (*(void *(**)(uint64_t *__return_ptr))(v0 + 16))(&v3);
  if (!v1) {
    return (void *)v3;
  }
  return result;
}

uint64_t sub_1D76ACA24@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t sub_1D76ACA58()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D76ACA68()
{
  return swift_dynamicCast();
}

unint64_t sub_1D76ACACC()
{
  unint64_t result = qword_1EBA33F60;
  if (!qword_1EBA33F60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBA33F60);
  }
  return result;
}

unint64_t sub_1D76ACB20()
{
  unint64_t result = qword_1EBA33F70;
  if (!qword_1EBA33F70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBA33F70);
  }
  return result;
}

unint64_t sub_1D76ACB74()
{
  unint64_t result = qword_1EA83A6A0;
  if (!qword_1EA83A6A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83A6A0);
  }
  return result;
}

unint64_t sub_1D76ACBC8()
{
  unint64_t result = qword_1EA83A6A8;
  if (!qword_1EA83A6A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83A6A8);
  }
  return result;
}

unint64_t sub_1D76ACC1C()
{
  unint64_t result = qword_1EA83A6B0;
  if (!qword_1EA83A6B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83A6B0);
  }
  return result;
}

unint64_t sub_1D76ACC70()
{
  unint64_t result = qword_1EA83A6B8;
  if (!qword_1EA83A6B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83A6B8);
  }
  return result;
}

unint64_t sub_1D76ACCC4()
{
  unint64_t result = qword_1EA83A6C0;
  if (!qword_1EA83A6C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83A6C0);
  }
  return result;
}

unint64_t sub_1D76ACD18()
{
  unint64_t result = qword_1EA83A6C8;
  if (!qword_1EA83A6C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83A6C8);
  }
  return result;
}

unint64_t sub_1D76ACD6C()
{
  unint64_t result = qword_1EA83A6D0;
  if (!qword_1EA83A6D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83A6D0);
  }
  return result;
}

unint64_t sub_1D76ACDC0()
{
  unint64_t result = qword_1EA83A6D8;
  if (!qword_1EA83A6D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83A6D8);
  }
  return result;
}

unint64_t sub_1D76ACE14()
{
  unint64_t result = qword_1EA83A6E0;
  if (!qword_1EA83A6E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83A6E0);
  }
  return result;
}

unint64_t sub_1D76ACE68()
{
  unint64_t result = qword_1EA83A6E8;
  if (!qword_1EA83A6E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83A6E8);
  }
  return result;
}

uint64_t sub_1D76ACEBC()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1D76ACECC(uint64_t a1, uint64_t a2)
{
  return sub_1D76A3E14(a1, a2, *(void ***)(v2 + 16));
}

uint64_t sub_1D76ACED4()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D76ACEE4()
{
  return sub_1D76F8DC4();
}

unint64_t sub_1D76ACF48()
{
  unint64_t result = qword_1EBA33EB8;
  if (!qword_1EBA33EB8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EBA33EB0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBA33EB8);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_1D76AD02C(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v40 = *MEMORY[0x1E4F143C0];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34390);
  MEMORY[0x1F4188788](v5 - 8);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1D76F7D04();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188788](v8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *v3;
  if (*(void *)(*v3 + 16)) {
    __break(1u);
  }
  uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v35(v7, a1, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
    *(void *)uuid = sub_1D76F7CE4();
    LOWORD(v37) = v21;
    BYTE2(v37) = v22;
    BYTE3(v37) = v23;
    BYTE4(v37) = v24;
    BYTE5(v37) = v25;
    BYTE6(v37) = v26;
    HIBYTE(v37) = v27;
    xpc_object_t v28 = xpc_uuid_create(uuid);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    *(void *)(v12 + 16) = v28;
    return swift_unknownObjectRelease();
  }
  sub_1D769AC0C((uint64_t)v7, &qword_1EBA34390);
  uint64_t v13 = v3[1];
  uint64_t v14 = *(void *)(*v3 + 24);
  uint64_t v15 = *(void *)(*v3 + 40);
  uint64_t v16 = type metadata accessor for _XPCObjectEncoder();
  uint64_t v34 = v2;
  uint64_t v17 = v16;
  uint64_t v18 = (void *)swift_allocObject();
  v18[2] = 0;
  void v18[3] = v14;
  v18[4] = v13;
  v18[5] = v15;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v38 = v17;
  uint64_t v39 = sub_1D76B1498(&qword_1EBA347A0, (void (*)(uint64_t))type metadata accessor for _XPCObjectEncoder);
  *(void *)uuid = v18;
  sub_1D76B1498(&qword_1EA83A708, MEMORY[0x1E4F27990]);
  swift_retain();
  uint64_t v19 = v34;
  sub_1D76F7F34();
  if (v19)
  {
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)uuid);
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)uuid);
  uint64_t v29 = v18[2];
  if (v29)
  {
    swift_unknownObjectRetain();
    swift_release();
    *(void *)(*v3 + 16) = v29;
    return swift_unknownObjectRelease();
  }
  uint64_t v30 = sub_1D76F8524();
  swift_allocError();
  uint64_t v32 = v31;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A8C0);
  v32[3] = v8;
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(v32);
  v35((char *)boxed_opaque_existential_0Tm, a1, v8);
  *(void *)uuid = 0;
  unint64_t v37 = 0xE000000000000000;
  swift_bridgeObjectRetain();
  sub_1D76F8464();
  swift_bridgeObjectRelease();
  sub_1D76F84E4();
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v30 - 8) + 104))(v32, *MEMORY[0x1E4FBBAA0], v30);
  swift_willThrow();
  return swift_release();
}

id sub_1D76AD4F8()
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28FD0]), sel_init);
  qword_1EBA33E30 = (uint64_t)result;
  return result;
}

uint64_t sub_1D76AD52C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34390);
  MEMORY[0x1F4188788](v4 - 8);
  uint64_t v6 = &v18[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = sub_1D76F7D04();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188788](v7);
  uint64_t v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1D769AC68(a1, (uint64_t)v6, &qword_1EBA34390);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    uint64_t v11 = sub_1D769AC0C((uint64_t)v6, &qword_1EBA34390);
    uint64_t v12 = *v2;
    uint64_t v13 = v2[2];
    MEMORY[0x1F4188788](v11);
    *(void *)&v18[-32] = v12;
    *(void *)&v18[-24] = v14;
    *(void *)&v18[-16] = v13;
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    sub_1D76C5070((void *(*)(uint64_t *__return_ptr, void *))sub_1D76B1478, (uint64_t)&v18[-48], 0xD00000000000001FLL, 0x80000001D76FD5B0);
    swift_unknownObjectRelease();
    sub_1D769AC0C(a1, &qword_1EBA34390);
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 32))(v10, v6, v7);
    sub_1D76F7CB4();
    uint64_t v16 = *v2;
    uint64_t v17 = sub_1D76F8054();
    swift_bridgeObjectRelease();
    xpc_dictionary_set_string(v16, "XPCSideChannel.uniqueIdentifier", (const char *)(v17 + 32));
    swift_release();
    sub_1D769AC0C(a1, &qword_1EBA34390);
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
  }
}

uint64_t sub_1D76AD7A4()
{
  swift_unknownObjectWeakInit();

  return swift_unknownObjectRelease();
}

uint64_t sub_1D76AD7E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_1D76AD7A4();
  *(unsigned char *)(a1 + 8) = 0;
  return result;
}

uint64_t sub_1D76AD814@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = MEMORY[0x1D9476D00](v1);
  *a1 = result;
  return result;
}

void sub_1D76AD840()
{
  off_1EBA33500 = (_UNKNOWN *)MEMORY[0x1E4FBC868];
}

void *static XPCSideChannel.makeActiveSideChannelIterator()()
{
  if (qword_1EBA33E40 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1EBA33E30;
  objc_msgSend((id)qword_1EBA33E30, sel_lock);
  if (qword_1EBA33508 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v1 = (char *)off_1EBA33500;
  uint64_t v2 = -1;
  uint64_t v3 = -1 << *((unsigned char *)off_1EBA33500 + 32);
  if (-v3 < 64) {
    uint64_t v2 = ~(-1 << -(char)v3);
  }
  uint64_t v4 = v2 & *((void *)off_1EBA33500 + 8);
  uint64_t v5 = ~v3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A6F0);
  uint64_t v6 = (void *)swift_allocObject();
  v6[2] = v1;
  v6[3] = v1 + 64;
  v6[4] = v5;
  v6[5] = 0;
  v6[6] = v4;
  v6[7] = sub_1D76AD9CC;
  v6[8] = 0;
  v6[9] = sub_1D76AFEA8;
  v6[10] = 0;
  v6[11] = sub_1D76AFEB8;
  v6[12] = 0;
  swift_bridgeObjectRetain();
  objc_msgSend(v0, sel_unlock);
  return v6;
}

uint64_t sub_1D76AD9D0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    sub_1D769AC0C(a1, &qword_1EBA33590);
    sub_1D76AF868(a2, (uint64_t)v9);
    uint64_t v4 = sub_1D76F7D04();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a2, v4);
    return sub_1D769AC0C((uint64_t)v9, &qword_1EBA33590);
  }
  else
  {
    sub_1D76B13F8(a1, (uint64_t)v9, &qword_1EA83A700);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    sub_1D76EE628((uint64_t)v9, a2, isUniquelyReferenced_nonNull_native);
    uint64_t *v2 = v8;
    swift_bridgeObjectRelease();
    uint64_t v7 = sub_1D76F7D04();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a2, v7);
  }
}

uint64_t XPCSideChannel.__allocating_init(on:)(uint64_t a1, uint64_t a2)
{
  swift_allocObject();
  uint64_t v4 = sub_1D76B0EB0(a1, a2);
  swift_release();
  return v4;
}

uint64_t static XPCSideChannel.anonymousListener()()
{
  return sub_1D76B0EB0(0, 0);
}

uint64_t XPCSideChannel.deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC7Mercury14XPCSideChannel__uniqueIdentifier;
  if (qword_1EBA33E40 != -1) {
    swift_once();
  }
  uint64_t v3 = (void *)qword_1EBA33E30;
  objc_msgSend((id)qword_1EBA33E30, sel_lock);
  if (qword_1EBA33508 != -1) {
    swift_once();
  }
  swift_beginAccess();
  sub_1D76AF868(v1 + v2, (uint64_t)v6);
  swift_endAccess();
  sub_1D769AC0C((uint64_t)v6, &qword_1EBA33590);
  objc_msgSend(v3, sel_unlock);
  uint64_t v4 = sub_1D76F7D04();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v1 + v2, v4);
  swift_release();
  swift_release();
  return v1;
}

uint64_t XPCSideChannel.__deallocating_deinit()
{
  XPCSideChannel.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

id XPCSideChannel.setEventHandler(_:)(uint64_t a1, uint64_t a2)
{
  if (qword_1EBA33E40 != -1) {
    swift_once();
  }
  uint64_t v5 = (void *)qword_1EBA33E30;
  objc_msgSend((id)qword_1EBA33E30, sel_lock);
  uint64_t v6 = (void *)(v2 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__eventHandler);
  *uint64_t v6 = a1;
  v6[1] = a2;
  swift_retain();
  swift_release();

  return objc_msgSend(v5, sel_unlock);
}

BOOL XPCSideChannel.isAnonymousListener.getter()
{
  return *(void *)(v0 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection) == 0;
}

uint64_t XPCSideChannel.send(message:)(uint64_t *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34390);
  uint64_t result = MEMORY[0x1F4188788](v3 - 8);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(v1 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection);
  if (v7)
  {
    uint64_t v8 = *a1;
    uint64_t v9 = a1[1];
    uint64_t v10 = a1[2];
    uint64_t v16 = v8;
    uint64_t v17 = v9;
    uint64_t v18 = v10;
    uint64_t v11 = v1 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__uniqueIdentifier;
    uint64_t v12 = sub_1D76F7D04();
    uint64_t v13 = *(void *)(v12 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v6, v11, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v6, 0, 1, v12);
    swift_retain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    sub_1D76AD52C((uint64_t)v6);
    uint64_t v16 = v8;
    uint64_t v17 = v9;
    uint64_t v18 = v10;
    uint64_t v14 = *(void (**)(uint64_t *))(*(void *)v7 + 168);
    swift_retain();
    v14(&v16);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    return swift_release_n();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t XPCSideChannel.sendSync(message:)(uint64_t *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34390);
  uint64_t result = MEMORY[0x1F4188788](v3 - 8);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(v1 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection);
  if (v7)
  {
    uint64_t v8 = *a1;
    uint64_t v9 = a1[1];
    uint64_t v10 = a1[2];
    uint64_t v16 = v8;
    uint64_t v17 = v9;
    uint64_t v18 = v10;
    uint64_t v11 = v1 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__uniqueIdentifier;
    uint64_t v12 = sub_1D76F7D04();
    uint64_t v13 = *(void *)(v12 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v6, v11, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v6, 0, 1, v12);
    swift_retain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    sub_1D76AD52C((uint64_t)v6);
    uint64_t v16 = v8;
    uint64_t v17 = v9;
    uint64_t v18 = v10;
    uint64_t v14 = *(void (**)(uint64_t *))(*(void *)v7 + 176);
    swift_retain();
    v14(&v16);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    return swift_release_n();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t XPCSideChannel.send(message:replyQueue:replyHandler:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a4;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34390);
  uint64_t result = MEMORY[0x1F4188788](v8 - 8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v4 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection);
  if (v12)
  {
    uint64_t v13 = *a1;
    uint64_t v14 = a1[1];
    uint64_t v15 = a1[2];
    uint64_t v21 = v13;
    uint64_t v22 = v14;
    uint64_t v23 = v15;
    uint64_t v16 = v4 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__uniqueIdentifier;
    uint64_t v17 = sub_1D76F7D04();
    uint64_t v18 = *(void *)(v17 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v11, v16, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v11, 0, 1, v17);
    swift_retain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    sub_1D76AD52C((uint64_t)v11);
    uint64_t v21 = v13;
    uint64_t v22 = v14;
    uint64_t v23 = v15;
    uint64_t v19 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 160);
    swift_retain();
    v19(&v21, a2, a3, v20);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    return swift_release_n();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1D76AE35C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (qword_1EBA33508 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v4 = off_1EBA33500;
  if (!*((void *)off_1EBA33500 + 2) || (unint64_t v5 = sub_1D76E0AEC(a1), (v6 & 1) == 0))
  {
    uint64_t v13 = 0;
    char v14 = 1;
    sub_1D769AC0C((uint64_t)&v13, &qword_1EBA33590);
    uint64_t result = swift_endAccess();
    uint64_t Strong = 0;
    goto LABEL_8;
  }
  sub_1D769AC68(v4[7] + 8 * v5, (uint64_t)&v13, &qword_1EA83A700);
  char v14 = 0;
  uint64_t Strong = swift_weakLoadStrong();
  sub_1D769AC0C((uint64_t)&v13, &qword_1EBA33590);
  uint64_t result = swift_endAccess();
  if (!Strong)
  {
LABEL_8:
    uint64_t v12 = 0;
    uint64_t v11 = 0;
    goto LABEL_9;
  }
  uint64_t v10 = *(void *)(Strong + OBJC_IVAR____TtC7Mercury14XPCSideChannel__eventHandler);
  uint64_t v9 = *(void *)(Strong + OBJC_IVAR____TtC7Mercury14XPCSideChannel__eventHandler + 8);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v10;
  *(void *)(v11 + 24) = v9;
  uint64_t result = swift_retain();
  uint64_t v12 = sub_1D76B13C0;
LABEL_9:
  *a2 = Strong;
  a2[1] = (uint64_t)v12;
  a2[2] = v11;
  return result;
}

uint64_t sub_1D76AE4C8(uint64_t a1, uint64_t a2, void **a3)
{
  void (*v19)(uint64_t *__return_ptr, uint64_t (*)(uint64_t), uint64_t, void);
  int64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v28;
  unint64_t v29;
  int64_t v30;
  char *v32;
  uint64_t v34;
  uint64_t v36;
  unsigned char v37[16];
  uint64_t v38;
  char v39;
  char v40[8];

  if (qword_1EBA33508 != -1) {
LABEL_45:
  }
    swift_once();
  swift_beginAccess();
  uint64_t v32 = (char *)off_1EBA33500 + 64;
  uint64_t v3 = -1 << *((unsigned char *)off_1EBA33500 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *((void *)off_1EBA33500 + 8);
  int64_t v6 = (unint64_t)(63 - v3) >> 6;
  int64_t v7 = 0;
  uint64_t v34 = swift_bridgeObjectRetain();
  uint64_t v8 = &qword_1EBA33590;
  uint64_t v9 = &qword_1EA83A700;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v7 << 6);
LABEL_10:
      sub_1D769AC68(*(void *)(v34 + 56) + 8 * v12, (uint64_t)&v38, v9);
      char v13 = 0;
      goto LABEL_20;
    }
    int64_t v14 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    if (v14 < v6)
    {
      unint64_t v15 = *(void *)&v32[8 * v14];
      if (v15) {
        goto LABEL_14;
      }
      int64_t v16 = v7 + 2;
      if (v7 + 2 >= v6)
      {
        ++v7;
      }
      else
      {
        unint64_t v15 = *(void *)&v32[8 * v16];
        if (v15) {
          goto LABEL_17;
        }
        uint64_t v30 = v7 + 3;
        if (v7 + 3 >= v6) {
          goto LABEL_40;
        }
        unint64_t v15 = *(void *)&v32[8 * v30];
        if (v15) {
          goto LABEL_30;
        }
        int64_t v16 = v7 + 4;
        if (v7 + 4 >= v6)
        {
LABEL_41:
          int64_t v7 = v30;
          goto LABEL_19;
        }
        unint64_t v15 = *(void *)&v32[8 * v16];
        if (v15)
        {
LABEL_17:
          int64_t v14 = v16;
LABEL_14:
          unint64_t v5 = (v15 - 1) & v15;
          unint64_t v12 = __clz(__rbit64(v15)) + (v14 << 6);
          int64_t v7 = v14;
          goto LABEL_10;
        }
        uint64_t v30 = v7 + 5;
        if (v7 + 5 >= v6)
        {
LABEL_40:
          int64_t v7 = v16;
        }
        else
        {
          unint64_t v15 = *(void *)&v32[8 * v30];
          if (v15)
          {
LABEL_30:
            int64_t v14 = v30;
            goto LABEL_14;
          }
          int64_t v14 = v7 + 6;
          if (v7 + 6 >= v6) {
            goto LABEL_41;
          }
          unint64_t v15 = *(void *)&v32[8 * v14];
          if (v15) {
            goto LABEL_14;
          }
          while (v6 - 7 != v7)
          {
            unint64_t v15 = *(void *)(v34 + 120 + 8 * v7++);
            if (v15)
            {
              int64_t v14 = v7 + 6;
              goto LABEL_14;
            }
          }
          int64_t v7 = v6 - 1;
        }
      }
    }
LABEL_19:
    unint64_t v5 = 0;
    uint64_t v38 = 0;
    char v13 = 1;
LABEL_20:
    uint64_t v39 = v13;
    sub_1D76B13F8((uint64_t)&v38, (uint64_t)v37, v8);
    if (v37[8]) {
      return sub_1D76B13F0();
    }
    sub_1D76B13F8((uint64_t)v37, (uint64_t)v40, v9);
    sub_1D76AE914((uint64_t)v40, &v36);
    uint64_t v17 = v36;
    sub_1D769AC0C((uint64_t)v40, v9);
    if (v17)
    {
      uint64_t v18 = *(void *)(v17 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection);
      if (!v18
        || (uint64_t v19 = *(void (**)(uint64_t *__return_ptr, uint64_t (*)(uint64_t), uint64_t, void))(*(void *)a1 + 208),
            swift_retain(),
            v19(&v38, sub_1D76B145C, v18, MEMORY[0x1E4FBB390]),
            swift_release(),
            (v38 & 1) != 0))
      {
        uint64_t v20 = v7;
        uint64_t v21 = v9;
        uint64_t v22 = v8;
        uint64_t v23 = *(void *)(v17 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__eventHandler);
        char v24 = *(void *)(v17 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__eventHandler + 8);
        char v25 = swift_allocObject();
        *(void *)(v25 + 16) = v23;
        *(void *)(v25 + 24) = v24;
        char v26 = *a3;
        swift_retain();
        swift_retain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *a3 = v26;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          char v26 = sub_1D76E0514(0, v26[2] + 1, 1, v26);
          *a3 = v26;
        }
        uint64_t v29 = v26[2];
        xpc_object_t v28 = v26[3];
        if (v29 >= v28 >> 1) {
          char v26 = sub_1D76E0514((void *)(v28 > 1), v29 + 1, 1, v26);
        }
        v26[2] = v29 + 1;
        uint64_t v10 = &v26[3 * v29];
        v10[4] = v17;
        void v10[5] = sub_1D76B14E4;
        v10[6] = v25;
        *a3 = v26;
        uint64_t v8 = v22;
        uint64_t v9 = v21;
        int64_t v7 = v20;
      }
      swift_release();
    }
  }
}

uint64_t sub_1D76AE914@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1D769AC68(a1, (uint64_t)v5, &qword_1EA83A700);
  uint64_t Strong = swift_weakLoadStrong();
  uint64_t result = sub_1D769AC0C((uint64_t)v5, &qword_1EA83A700);
  *a2 = Strong;
  return result;
}

uint64_t XPCSideChannel.encode(to:)(uint64_t a1)
{
  sub_1D76B116C(a1, (uint64_t)v14);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA83ACA0);
  type metadata accessor for _XPCObjectEncoder();
  if (swift_dynamicCast())
  {
    uint64_t v2 = v15;
    uint64_t v3 = *(void *)(v15 + 24);
    if (v3 && (swift_conformsToProtocol2() ? (uint64_t v4 = v3) : (uint64_t v4 = 0), v4))
    {
      uint64_t v5 = *(void *)(v2 + 32);
      v14[3] = &type metadata for XPCObjectSingleValueEncodingContainer;
      v14[4] = sub_1D76ABD10();
      v14[0] = v2;
      v14[1] = v5;
      uint64_t v6 = v1 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__uniqueIdentifier;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v14, (uint64_t)&type metadata for XPCObjectSingleValueEncodingContainer);
      swift_retain();
      swift_bridgeObjectRetain();
      sub_1D76AD02C(v6);
      swift_release();
      return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v14);
    }
    else
    {
      uint64_t v11 = *(void *)(v1 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection);
      swift_retain();
      unint64_t v12 = sub_1D769C348(MEMORY[0x1E4FBC860]);
      sub_1D76B10C8();
      swift_allocError();
      static XPCError.xpcCoderRequired(_:from:userInfo:)(0xD000000000000064, 0x80000001D76FD3C0, v11, v12, v13);
      swift_release();
      swift_bridgeObjectRelease();
      swift_willThrow();
      return swift_release();
    }
  }
  else
  {
    uint64_t v8 = *(void *)(v1 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection);
    swift_retain();
    unint64_t v9 = sub_1D769C348(MEMORY[0x1E4FBC860]);
    sub_1D76B10C8();
    swift_allocError();
    static XPCError.xpcCoderRequired(_:from:userInfo:)(0xD00000000000003ALL, 0x80000001D76FD380, v8, v9, v10);
    swift_release();
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
}

uint64_t XPCSideChannel.__allocating_init(from:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  XPCSideChannel.init(from:)(a1);
  return v2;
}

const uint8_t *XPCSideChannel.init(from:)(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v1;
  uint64_t v6 = sub_1D76F7D04();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188788](v6);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188788](v8);
  unint64_t v12 = (char *)&v35 - v11;
  char v13 = (uint64_t *)((char *)v1 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__eventHandler);
  *char v13 = nullsub_1;
  v13[1] = 0;
  sub_1D76B116C(a1, (uint64_t)v42);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA83ACF0);
  type metadata accessor for _XPCObjectDecoder();
  if ((swift_dynamicCast() & 1) == 0)
  {
    unint64_t v24 = sub_1D769C348(MEMORY[0x1E4FBC860]);
    sub_1D76B10C8();
    swift_allocError();
    static XPCError.xpcCoderRequired(_:from:userInfo:)(0xD00000000000003ALL, 0x80000001D76FD430, 0, v24, v25);
    swift_bridgeObjectRelease();
    swift_willThrow();
LABEL_14:
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
    goto LABEL_15;
  }
  uint64_t v40 = v7;
  uint64_t v14 = v41;
  uint64_t v15 = *(void *)(v41 + 24);
  if (!v15
    || ((uint64_t v16 = swift_conformsToProtocol2()) != 0 ? (v17 = v16) : (v17 = 0), v16 ? (v18 = v15) : (v18 = 0), !v18))
  {
    unint64_t v26 = sub_1D769C348(MEMORY[0x1E4FBC860]);
    sub_1D76B10C8();
    swift_allocError();
    static XPCError.xpcCoderRequired(_:from:userInfo:)(0xD000000000000064, 0x80000001D76FD470, 0, v26, v27);
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_release();
    goto LABEL_14;
  }
  uint64_t v36 = v18;
  uint64_t v37 = v17;
  uint64_t v38 = v6;
  uint64_t v39 = v5;
  uint64_t v19 = *(void *)(v14 + 16);
  uint64_t v20 = *(void *)(v14 + 32);
  v42[3] = &type metadata for XPCObjectSingleValueDecodingContainer;
  unint64_t v21 = sub_1D76ABDB8();
  v42[0] = v14;
  v42[1] = v19;
  v42[4] = v21;
  v42[2] = v20;
  uint64_t v22 = XPCTypeUUID;
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v23 = (void *)sub_1D76AFF24(v22, v14, v19, v20, MEMORY[0x1E4F27990]);
  if (v3)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
    swift_release();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v42);
LABEL_15:
    swift_release();
    swift_deallocPartialClassInstance();
    return (const uint8_t *)v1;
  }
  uint64_t result = xpc_uuid_get_bytes(v23);
  if (result)
  {
    sub_1D76F7CD4();
    uint64_t v29 = v40;
    uint64_t v30 = v38;
    (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v12, v10, v38);
    (*(void (**)(uint64_t, char *, uint64_t))(v29 + 16))((uint64_t)v1 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__uniqueIdentifier, v12, v30);
    uint64_t v31 = (uint64_t *)((char *)v1 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection);
    uint64_t v32 = v37;
    *uint64_t v31 = v36;
    v31[1] = v32;
    uint64_t v33 = qword_1EBA33E40;
    swift_retain();
    if (v33 != -1) {
      swift_once();
    }
    uint64_t v34 = (void *)qword_1EBA33E30;
    objc_msgSend((id)qword_1EBA33E30, sel_lock);
    sub_1D76AF18C((uint64_t)v1);
    objc_msgSend(v34, sel_unlock);
    swift_release();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v12, v30);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v42);
    return (const uint8_t *)v1;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D76AF18C(uint64_t a1)
{
  uint64_t v2 = sub_1D76F7D04();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188788](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBA33508 != -1) {
    swift_once();
  }
  uint64_t v6 = a1 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__uniqueIdentifier;
  swift_beginAccess();
  uint64_t v7 = off_1EBA33500;
  if (*((void *)off_1EBA33500 + 2) && (unint64_t v8 = sub_1D76E0AEC(v6), (v9 & 1) != 0))
  {
    sub_1D769AC68(v7[7] + 8 * v8, (uint64_t)&v13, &qword_1EA83A700);
    char v14 = 0;
    uint64_t Strong = swift_weakLoadStrong();
    sub_1D769AC0C((uint64_t)&v13, &qword_1EBA33590);
    swift_endAccess();
    swift_release();
    if (Strong)
    {
      sub_1D76F8504();
      swift_allocError();
      sub_1D76F84B4();
      return swift_willThrow();
    }
  }
  else
  {
    uint64_t v13 = 0;
    char v14 = 1;
    sub_1D769AC0C((uint64_t)&v13, &qword_1EBA33590);
    swift_endAccess();
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  swift_weakInit();
  char v14 = 0;
  swift_beginAccess();
  sub_1D76AD9D0((uint64_t)&v13, (uint64_t)v5);
  return swift_endAccess();
}

BOOL static XPCSideChannel.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t XPCSideChannel.hash(into:)()
{
  return sub_1D76F8D34();
}

uint64_t XPCSideChannel.hashValue.getter()
{
  return sub_1D76F8D54();
}

const uint8_t *sub_1D76AF45C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = swift_allocObject();
  uint64_t result = XPCSideChannel.init(from:)(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_1D76AF4B4(uint64_t a1)
{
  return XPCSideChannel.encode(to:)(a1);
}

uint64_t sub_1D76AF4D8()
{
  return sub_1D76F8D54();
}

uint64_t sub_1D76AF520()
{
  return sub_1D76F8D34();
}

uint64_t sub_1D76AF54C()
{
  return sub_1D76F8D54();
}

BOOL sub_1D76AF590(void *a1, void *a2)
{
  return *a1 == *a2;
}

unint64_t sub_1D76AF5A4(uint64_t a1, uint64_t a2)
{
  sub_1D76F8D24();
  sub_1D76F8094();
  uint64_t v4 = sub_1D76F8D54();

  return sub_1D76AF61C(a1, a2, v4);
}

unint64_t sub_1D76AF61C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t i = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (sub_1D76F89E4() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      unint64_t i = (i + 1) & v12;
      if ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
      {
        uint64_t v13 = (void *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (sub_1D76F89E4() & 1) == 0)
        {
          for (unint64_t i = (i + 1) & v12; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v12)
          {
            uint64_t v15 = (void *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2) {
              break;
            }
            if (sub_1D76F89E4()) {
              break;
            }
          }
        }
      }
    }
  }
  return i;
}

double sub_1D76AF764@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_1D769B2B0(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    uint64_t *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1D76F5E48();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_1D769B2A0((_OWORD *)(*(void *)(v11 + 56) + 32 * v8), a3);
    sub_1D76AF984(v8, v11);
    uint64_t *v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_1D76AF868@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1D76E0AEC(a1);
  char v8 = v7;
  uint64_t result = swift_bridgeObjectRelease();
  if (v8)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v3;
    uint64_t v14 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1D76F6030();
      uint64_t v11 = v14;
    }
    uint64_t v12 = *(void *)(v11 + 48);
    uint64_t v13 = sub_1D76F7D04();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12 + *(void *)(*(void *)(v13 - 8) + 72) * v6, v13);
    sub_1D76B13F8(*(void *)(v11 + 56) + 8 * v6, a2, &qword_1EA83A700);
    sub_1D76AFB5C(v6, v11);
    *uint64_t v3 = v11;
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)a2 = 0;
  }
  *(unsigned char *)(a2 + 8) = (v8 & 1) == 0;
  return result;
}

unint64_t sub_1D76AF984(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = sub_1D76F8444();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_1D76F8D24();
        swift_bridgeObjectRetain();
        sub_1D76F8094();
        uint64_t v10 = sub_1D76F8D54();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          uint64_t v13 = (_OWORD *)(v12 + 16 * v3);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            *uint64_t v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          uint64_t v16 = (_OWORD *)(v15 + 32 * v3);
          uint64_t v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            long long v9 = v17[1];
            *uint64_t v16 = *v17;
            v16[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *uint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1D76AFB5C(int64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1D76F7D04();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = MEMORY[0x1F4188788](v4);
  unint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a2 + 64;
  uint64_t v10 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v11 = (a1 + 1) & ~v10;
  if (((1 << v11) & *(void *)(a2 + 64 + 8 * (v11 >> 6))) != 0)
  {
    uint64_t v12 = ~v10;
    unint64_t result = sub_1D76F8444();
    if ((*(void *)(v9 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
    {
      unint64_t v34 = (result + 1) & v12;
      uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v13 = v5 + 16;
      uint64_t v33 = v14;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v35 = v13;
      uint64_t v36 = v15;
      uint64_t v16 = (uint64_t (**)(char *, uint64_t))(v13 - 8);
      uint64_t v17 = v12;
      do
      {
        uint64_t v18 = v9;
        int64_t v19 = v36 * v11;
        uint64_t v20 = v17;
        v33(v8, *(void *)(a2 + 48) + v36 * v11, v4);
        sub_1D76B1498((unint64_t *)&qword_1EA83A710, MEMORY[0x1E4F27990]);
        uint64_t v21 = sub_1D76F7F54();
        unint64_t result = (*v16)(v8, v4);
        uint64_t v17 = v20;
        unint64_t v22 = v21 & v20;
        if (a1 >= (uint64_t)v34)
        {
          if (v22 >= v34 && a1 >= (uint64_t)v22)
          {
LABEL_16:
            uint64_t v25 = *(void *)(a2 + 48);
            unint64_t result = v25 + v36 * a1;
            if (v36 * a1 < v19 || result >= v25 + v19 + v36)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v36 * a1 != v19)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
            }
            if (a1 < (uint64_t)v11 || *(void *)(a2 + 56) + 8 * a1 >= *(void *)(a2 + 56) + 8 * v11 + 8)
            {
              __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A700);
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
              a1 = v11;
              uint64_t v17 = v20;
            }
            else
            {
              BOOL v26 = a1 == v11;
              a1 = v11;
              uint64_t v17 = v20;
              if (!v26)
              {
                __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A700);
                unint64_t result = swift_arrayInitWithTakeBackToFront();
                uint64_t v17 = v20;
                a1 = v11;
              }
            }
          }
        }
        else if (v22 >= v34 || a1 >= (uint64_t)v22)
        {
          goto LABEL_16;
        }
        unint64_t v11 = (v11 + 1) & v17;
        uint64_t v9 = v18;
      }
      while (((*(void *)(v18 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
    }
    char v27 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v28 = *v27;
    uint64_t v29 = (-1 << a1) - 1;
  }
  else
  {
    char v27 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v29 = *v27;
    uint64_t v28 = (-1 << a1) - 1;
  }
  *char v27 = v29 & v28;
  uint64_t v30 = *(void *)(a2 + 16);
  BOOL v31 = __OFSUB__(v30, 1);
  uint64_t v32 = v30 - 1;
  if (v31)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v32;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

BOOL sub_1D76AFEA8(void *a1)
{
  return *a1 != 0;
}

uint64_t sub_1D76AFEB8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = *a1;
  if (result)
  {
    *a2 = result;
    return swift_retain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1D76AFECC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D76AFF24(a1, a2, a3, a4, MEMORY[0x1E4F27990]);
}

uint64_t sub_1D76AFEF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D76AFF24(a1, a2, a3, a4, MEMORY[0x1E4F27928]);
}

uint64_t sub_1D76AFF24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v7 = a5(0);
  if (MEMORY[0x1D94771B0](a3) != a1)
  {
    v11[3] = swift_getObjectType();
    v11[0] = a3;
    sub_1D76F8504();
    swift_allocError();
    uint64_t v9 = v8;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)(v7, (uint64_t)v11, 0, v9);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
    swift_willThrow();
  }
  return a3;
}

uint64_t sub_1D76B0028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MEMORY[0x1D94771B0](a3) != a1)
  {
    v7[3] = swift_getObjectType();
    v7[0] = a3;
    sub_1D76F8504();
    swift_allocError();
    uint64_t v5 = v4;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)(MEMORY[0x1E4F277C0], (uint64_t)v7, 0, v5);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
    swift_willThrow();
  }
  return a3;
}

uint64_t sub_1D76B0120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MEMORY[0x1D94771B0](a3) != a1)
  {
    v7[3] = swift_getObjectType();
    v7[0] = a3;
    sub_1D76F8504();
    swift_allocError();
    uint64_t v5 = v4;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)(MEMORY[0x1E4FBB390], (uint64_t)v7, 0, v5);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
    swift_willThrow();
  }
  return a3;
}

uint64_t sub_1D76B0218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MEMORY[0x1D94771B0](a3) != a1)
  {
    v7[3] = swift_getObjectType();
    v7[0] = a3;
    sub_1D76F8504();
    swift_allocError();
    uint64_t v5 = v4;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)(MEMORY[0x1E4FBB1A0], (uint64_t)v7, 0, v5);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
    swift_willThrow();
  }
  return a3;
}

uint64_t sub_1D76B0310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MEMORY[0x1D94771B0](a3) != a1)
  {
    v7[3] = swift_getObjectType();
    v7[0] = a3;
    sub_1D76F8504();
    swift_allocError();
    uint64_t v5 = v4;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)(MEMORY[0x1E4FBB3D0], (uint64_t)v7, 0, v5);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
    swift_willThrow();
  }
  return a3;
}

uint64_t sub_1D76B0408(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MEMORY[0x1D94771B0](a3) != a1)
  {
    v7[3] = swift_getObjectType();
    v7[0] = a3;
    sub_1D76F8504();
    swift_allocError();
    uint64_t v5 = v4;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)(MEMORY[0x1E4FBB470], (uint64_t)v7, 0, v5);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
    swift_willThrow();
  }
  return a3;
}

uint64_t sub_1D76B0500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MEMORY[0x1D94771B0](a3) != a1)
  {
    v7[3] = swift_getObjectType();
    v7[0] = a3;
    sub_1D76F8504();
    swift_allocError();
    uint64_t v5 = v4;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)(MEMORY[0x1E4FBB550], (uint64_t)v7, 0, v5);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
    swift_willThrow();
  }
  return a3;
}

uint64_t sub_1D76B05F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MEMORY[0x1D94771B0](a3) != a1)
  {
    v7[3] = swift_getObjectType();
    v7[0] = a3;
    sub_1D76F8504();
    swift_allocError();
    uint64_t v5 = v4;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)(MEMORY[0x1E4FBC098], (uint64_t)v7, 0, v5);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
    swift_willThrow();
  }
  return a3;
}

uint64_t sub_1D76B06F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MEMORY[0x1D94771B0](a3) != a1)
  {
    v7[3] = swift_getObjectType();
    v7[0] = a3;
    sub_1D76F8504();
    swift_allocError();
    uint64_t v5 = v4;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)(MEMORY[0x1E4FBC0F8], (uint64_t)v7, 0, v5);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
    swift_willThrow();
  }
  return a3;
}

uint64_t sub_1D76B07E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MEMORY[0x1D94771B0](a3) != a1)
  {
    v7[3] = swift_getObjectType();
    v7[0] = a3;
    sub_1D76F8504();
    swift_allocError();
    uint64_t v5 = v4;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)(MEMORY[0x1E4FBC150], (uint64_t)v7, 0, v5);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
    swift_willThrow();
  }
  return a3;
}

uint64_t sub_1D76B08E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MEMORY[0x1D94771B0](a3) != a1)
  {
    v7[3] = swift_getObjectType();
    v7[0] = a3;
    sub_1D76F8504();
    swift_allocError();
    uint64_t v5 = v4;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)(MEMORY[0x1E4FBC1C8], (uint64_t)v7, 0, v5);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
    swift_willThrow();
  }
  return a3;
}

uint64_t sub_1D76B09D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MEMORY[0x1D94771B0](a3) != a1)
  {
    v7[3] = swift_getObjectType();
    v7[0] = a3;
    sub_1D76F8504();
    swift_allocError();
    uint64_t v5 = v4;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)(MEMORY[0x1E4FBB808], (uint64_t)v7, 0, v5);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
    swift_willThrow();
  }
  return a3;
}

uint64_t sub_1D76B0AD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MEMORY[0x1D94771B0](a3) != a1)
  {
    v7[3] = swift_getObjectType();
    v7[0] = a3;
    sub_1D76F8504();
    swift_allocError();
    uint64_t v5 = v4;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)(MEMORY[0x1E4FBC358], (uint64_t)v7, 0, v5);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
    swift_willThrow();
  }
  return a3;
}

uint64_t sub_1D76B0BC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MEMORY[0x1D94771B0](a3) != a1)
  {
    v7[3] = swift_getObjectType();
    v7[0] = a3;
    sub_1D76F8504();
    swift_allocError();
    uint64_t v5 = v4;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)(MEMORY[0x1E4FBC450], (uint64_t)v7, 0, v5);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
    swift_willThrow();
  }
  return a3;
}

uint64_t sub_1D76B0CC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MEMORY[0x1D94771B0](a3) != a1)
  {
    v7[3] = swift_getObjectType();
    v7[0] = a3;
    sub_1D76F8504();
    swift_allocError();
    uint64_t v5 = v4;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)(MEMORY[0x1E4FBC4C0], (uint64_t)v7, 0, v5);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
    swift_willThrow();
  }
  return a3;
}

uint64_t sub_1D76B0DB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MEMORY[0x1D94771B0](a3) != a1)
  {
    v7[3] = swift_getObjectType();
    v7[0] = a3;
    sub_1D76F8504();
    swift_allocError();
    uint64_t v5 = v4;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)(MEMORY[0x1E4FBC538], (uint64_t)v7, 0, v5);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
    swift_willThrow();
  }
  return a3;
}

uint64_t sub_1D76B0EB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_1D76F7D04();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188788](v6);
  uint64_t v9 = v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  uint64_t v10 = (void *)(v3 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__eventHandler);
  *uint64_t v10 = nullsub_1;
  v10[1] = 0;
  sub_1D76F7CF4();
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v7 + 32))(v3 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__uniqueIdentifier, v9, v6);
  unint64_t v11 = (void *)(v3 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection);
  *unint64_t v11 = a1;
  v11[1] = a2;
  uint64_t v12 = qword_1EBA33E40;
  swift_retain();
  if (v12 != -1) {
    swift_once();
  }
  uint64_t v13 = (void *)qword_1EBA33E30;
  objc_msgSend((id)qword_1EBA33E30, sel_lock);
  if (qword_1EBA33508 != -1) {
    swift_once();
  }
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16))(v9, v3 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__uniqueIdentifier, v6);
  swift_weakInit();
  v16[8] = 0;
  swift_beginAccess();
  sub_1D76AD9D0((uint64_t)v16, (uint64_t)v9);
  swift_endAccess();
  objc_msgSend(v13, sel_unlock);
  return v3;
}

unint64_t sub_1D76B10C8()
{
  unint64_t result = qword_1EBA34070;
  if (!qword_1EBA34070)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBA34070);
  }
  return result;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_1D76B116C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1D76B11D0()
{
  return sub_1D76B1498(&qword_1EA83A6F8, (void (*)(uint64_t))type metadata accessor for XPCSideChannel);
}

uint64_t type metadata accessor for XPCSideChannel()
{
  uint64_t result = qword_1EBA33598;
  if (!qword_1EBA33598) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1D76B1264()
{
  return type metadata accessor for XPCSideChannel();
}

uint64_t sub_1D76B126C()
{
  uint64_t result = sub_1D76F7D04();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for XPCSideChannel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for XPCSideChannel);
}

uint64_t dispatch thunk of XPCSideChannel.__allocating_init(from:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t sub_1D76B1354(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 16);
}

uint64_t type metadata accessor for XPCSideChannel.Weak()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1D76B1388()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D76B13C0(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(v2 + 16))(a1, *a2, a2[1]);
}

uint64_t sub_1D76B13F0()
{
  return swift_release();
}

uint64_t sub_1D76B13F8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1D76B145C(uint64_t a1)
{
  return sub_1D76CCC88(a1, v1);
}

void sub_1D76B1478(char *a1@<X0>, void *a2@<X8>)
{
  sub_1D76C4F98(a1, *(xpc_object_t *)(v2 + 16), a2);
}

uint64_t sub_1D76B1498(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t RemoteDeviceBrowser.serviceName.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t RemoteDeviceBrowser.deviceType.getter()
{
  return *(unsigned int *)(v0 + 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 36) << 32);
}

id RemoteDeviceBrowser.targetQueue.getter()
{
  return *(id *)(v0 + 40);
}

uint64_t sub_1D76B1540()
{
  return sub_1D76B15FC();
}

uint64_t sub_1D76B1558@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = sub_1D76CDB00(v2);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t sub_1D76B15C8@<X0>(void *a1@<X8>)
{
  return sub_1D76B1558(a1);
}

uint64_t sub_1D76B15E4()
{
  return sub_1D76B15FC();
}

uint64_t sub_1D76B15FC()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A718);
  sub_1D76F8344();
  return v1;
}

uint64_t sub_1D76B165C@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v2 = swift_bridgeObjectRetain();
  unint64_t v3 = (unint64_t)sub_1D76CDB00(v2);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v8 = MEMORY[0x1E4FBC860];
  if ((v3 & 0x8000000000000000) == 0 && (v3 & 0x4000000000000000) == 0)
  {
    uint64_t v5 = *(void *)(v3 + 16);
    if (v5) {
      goto LABEL_4;
    }
LABEL_15:
    uint64_t result = swift_release();
    uint64_t v7 = MEMORY[0x1E4FBC860];
LABEL_16:
    *a1 = v7;
    return result;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_1D76F85C4();
  uint64_t result = swift_release();
  if (!v5) {
    goto LABEL_15;
  }
LABEL_4:
  if (v5 >= 1)
  {
    swift_beginAccess();
    for (uint64_t i = 0; i != v5; ++i)
    {
      if ((v3 & 0xC000000000000001) != 0) {
        MEMORY[0x1D94758B0](i, v3);
      }
      else {
        swift_retain();
      }
      if (remote_device_get_state() == dword_1EA83A944)
      {
        sub_1D76F8544();
        sub_1D76F8564();
        sub_1D76F8574();
        sub_1D76F8554();
      }
      else
      {
        swift_release();
      }
    }
    uint64_t result = swift_release();
    uint64_t v7 = v8;
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D76B1808@<X0>(void *a1@<X8>)
{
  return sub_1D76B165C(a1);
}

uint64_t RemoteDeviceBrowser.__allocating_init(for:deviceType:targetQueue:eventHandler:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = swift_allocObject();
  RemoteDeviceBrowser.init(for:deviceType:targetQueue:eventHandler:)(a1, a2, a3 | ((HIDWORD(a3) & 1) << 32), a4, a5, a6);
  return v12;
}

uint64_t RemoteDeviceBrowser.init(for:deviceType:targetQueue:eventHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v33 = a5;
  uint64_t v34 = a6;
  uint64_t v29 = a4;
  uint64_t v30 = a1;
  uint64_t v31 = a2;
  uint64_t v32 = a3;
  uint64_t v8 = sub_1D76F8324();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188788](v8);
  unint64_t v11 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1D76F8314();
  MEMORY[0x1F4188788](v12);
  uint64_t v13 = sub_1D76F7E84();
  MEMORY[0x1F4188788](v13 - 8);
  sub_1D76B1BA4();
  sub_1D76F7E74();
  uint64_t v35 = MEMORY[0x1E4FBC860];
  unint64_t v14 = sub_1D76B1BE4();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A728);
  v27[1] = sub_1D76B1C3C();
  v27[2] = v15;
  v27[3] = v14;
  sub_1D76F8434();
  uint64_t v16 = *MEMORY[0x1E4FBCC58];
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 104);
  uint64_t v28 = v8;
  uint64_t v18 = v17;
  v17(v11, v16, v8);
  uint64_t v19 = sub_1D76F8364();
  uint64_t v20 = MEMORY[0x1E4FBC860];
  *(void *)(v7 + 48) = v19;
  *(void *)(v7 + 72) = 0;
  unint64_t v21 = sub_1D769E754(v20);
  uint64_t v22 = v29;
  uint64_t v23 = v30;
  *(void *)(v7 + 80) = v21;
  *(unsigned char *)(v7 + 88) = 0;
  uint64_t v24 = v31;
  *(void *)(v7 + 16) = v23;
  *(void *)(v7 + 24) = v24;
  BYTE4(v24) = BYTE4(v32);
  *(_DWORD *)(v7 + 32) = v32;
  *(unsigned char *)(v7 + 36) = BYTE4(v24) & 1;
  if (!v22)
  {
    sub_1D76F7E74();
    uint64_t v35 = v20;
    sub_1D76F8434();
    v18(v11, v16, v28);
    uint64_t v22 = sub_1D76F8364();
  }
  *(void *)(v7 + 40) = v22;
  uint64_t v25 = v34;
  *(void *)(v7 + 56) = v33;
  *(void *)(v7 + 64) = v25;
  return v7;
}

unint64_t sub_1D76B1BA4()
{
  unint64_t result = qword_1EBA34230;
  if (!qword_1EBA34230)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EBA34230);
  }
  return result;
}

unint64_t sub_1D76B1BE4()
{
  unint64_t result = qword_1EA83A720;
  if (!qword_1EA83A720)
  {
    sub_1D76F8314();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83A720);
  }
  return result;
}

unint64_t sub_1D76B1C3C()
{
  unint64_t result = qword_1EA83A730;
  if (!qword_1EA83A730)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA83A728);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83A730);
  }
  return result;
}

void sub_1D76B1C98()
{
  uint64_t v1 = *(NSObject **)(v0 + 48);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = sub_1D76B25C8;
  *(void *)(v2 + 24) = v0;
  uint64_t v17 = sub_1D76B25E0;
  uint64_t v18 = v2;
  uint64_t aBlock = MEMORY[0x1E4F143A0];
  uint64_t v14 = 1107296256;
  uint64_t v15 = sub_1D76B20FC;
  uint64_t v16 = &block_descriptor_0;
  unint64_t v3 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v1, v3);
  _Block_release(v3);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v1 & 1) == 0)
  {
    uint64_t v4 = swift_allocObject();
    swift_weakInit();
    if (*(void *)(v0 + 24))
    {
      xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
      uint64_t v6 = sub_1D76F8054();
      xpc_dictionary_set_string(v5, "AvailableService", (const char *)(v6 + 32));
      swift_release();
      if (*(unsigned char *)(v0 + 36))
      {
LABEL_4:
        xpc_dictionary_set_value(v5, "DeviceType", 0);
LABEL_9:
        uint64_t v17 = sub_1D76B2658;
        uint64_t v18 = v4;
        uint64_t aBlock = MEMORY[0x1E4F143A0];
        uint64_t v14 = 1107296256;
        uint64_t v15 = sub_1D76B2660;
        uint64_t v16 = &block_descriptor_9;
        unint64_t v11 = _Block_copy(&aBlock);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_release();
        uint64_t started = remote_device_start_browsing_matching();
        _Block_release(v11);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        uint64_t v9 = *(void **)(v0 + 72);
        *(void *)(v0 + 72) = started;
        swift_release();
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        goto LABEL_10;
      }
    }
    else
    {
      if (*(unsigned char *)(v0 + 36))
      {
        swift_beginAccess();
        uint64_t v17 = sub_1D76B2658;
        uint64_t v18 = v4;
        uint64_t aBlock = MEMORY[0x1E4F143A0];
        uint64_t v14 = 1107296256;
        uint64_t v15 = sub_1D76B2660;
        uint64_t v16 = &block_descriptor_6;
        uint64_t v7 = _Block_copy(&aBlock);
        swift_retain();
        swift_release();
        uint64_t v8 = remote_device_start_browsing();
        _Block_release(v7);
        uint64_t v9 = *(void **)(v0 + 72);
        *(void *)(v0 + 72) = v8;
        swift_release();
LABEL_10:
        swift_release();

        return;
      }
      xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
      xpc_dictionary_set_value(v5, "AvailableService", 0);
      if (*(unsigned char *)(v0 + 36)) {
        goto LABEL_4;
      }
    }
    remote_device_type_get_description();
    sub_1D76F80B4();
    uint64_t v10 = sub_1D76F8054();
    swift_bridgeObjectRelease();
    xpc_dictionary_set_string(v5, "DeviceType", (const char *)(v10 + 32));
    swift_release();
    goto LABEL_9;
  }
  __break(1u);
}

uint64_t sub_1D76B2084(uint64_t result)
{
  if (*(unsigned char *)(result + 88))
  {
    unint64_t result = sub_1D76F85B4();
    __break(1u);
  }
  else
  {
    *(unsigned char *)(result + 88) = 1;
  }
  return result;
}

uint64_t sub_1D76B20FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

void sub_1D76B2124(void *a1, char a2)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = Strong;
    if (a2)
    {
      uint64_t v6 = *(void (**)(void *))(Strong + 56);
      aBlock[0] = 0;
      v6(aBlock);
    }
    if (a1)
    {
      uint64_t v7 = *(void **)(v5 + 40);
      uint64_t v8 = swift_allocObject();
      swift_weakInit();
      uint64_t v9 = swift_allocObject();
      *(void *)(v9 + 16) = v8;
      *(void *)(v9 + 24) = a1;
      aBlock[4] = sub_1D76B2A98;
      aBlock[5] = v9;
      aBlock[0] = MEMORY[0x1E4F143A0];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1D76BCE88;
      aBlock[3] = &block_descriptor_26;
      uint64_t v10 = _Block_copy(aBlock);
      id v11 = a1;
      id v12 = v7;
      swift_release();
      remote_device_set_connected_callback();
      _Block_release(v10);
      swift_release();
    }
    else
    {
      swift_release();
    }
  }
}

uint64_t sub_1D76B229C(uint64_t a1, uint64_t a2, void *a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v5 = result;
    int state = remote_device_get_state();
    swift_beginAccess();
    if (state == dword_1EA83A944)
    {
      type metadata accessor for RemoteDevice();
      uint64_t v7 = swift_allocObject();
      *(void *)(v7 + 16) = a3;
      uint64_t v8 = *(NSObject **)(v5 + 48);
      uint64_t v9 = swift_allocObject();
      *(void *)(v9 + 16) = v5;
      *(void *)(v9 + 24) = v7;
      uint64_t v10 = swift_allocObject();
      *(void *)(v10 + 16) = sub_1D76B2AE0;
      *(void *)(v10 + 24) = v9;
      v15[4] = sub_1D76B2B54;
      v15[5] = v10;
      v15[0] = MEMORY[0x1E4F143A0];
      v15[1] = 1107296256;
      v15[2] = sub_1D76B20FC;
      v15[3] = &block_descriptor_36;
      id v11 = _Block_copy(v15);
      id v12 = a3;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_release();
      dispatch_sync(v8, v11);
      _Block_release(v11);
      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      uint64_t result = swift_release();
      if (isEscapingClosureAtFileLocation)
      {
        __break(1u);
      }
      else
      {
        uint64_t v14 = *(void (**)(void *))(v5 + 56);
        v15[0] = v7;
        swift_retain();
        v14(v15);
        swift_release();
        swift_release();
        return swift_release_n();
      }
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1D76B24B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RemoteDevice.Identity();
  uint64_t v5 = v4 - 8;
  MEMORY[0x1F4188788](v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D76BD5D0((uint64_t)v7);
  remote_device_get_name();
  uint64_t v8 = sub_1D76F80B4();
  uint64_t v9 = (uint64_t *)&v7[*(int *)(v5 + 28)];
  *uint64_t v9 = v8;
  v9[1] = v10;
  swift_beginAccess();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = 0x8000000000000000;
  sub_1D76EE7F4(a2, (uint64_t)v7, isUniquelyReferenced_nonNull_native);
  *(void *)(a1 + 80) = v13;
  swift_bridgeObjectRelease();
  sub_1D76B2AF8((uint64_t)v7);
  return swift_endAccess();
}

uint64_t sub_1D76B25C8()
{
  return sub_1D76B2084(v0);
}

uint64_t sub_1D76B25D0()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D76B25E0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t sub_1D76B2620()
{
  swift_weakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

void sub_1D76B2658(void *a1, char a2)
{
}

void sub_1D76B2660(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void (**)(void *, uint64_t))(a1 + 32);
  swift_retain();
  id v6 = a2;
  v5(a2, a3);
  swift_release();
}

void sub_1D76B26D8()
{
  uint64_t v1 = *(void **)(v0 + 72);
  if (v1)
  {
    *(void *)(v0 + 72) = 0;
    id v2 = v1;
    remote_device_browser_cancel();
  }
}

id *RemoteDeviceBrowser.deinit()
{
  id v1 = v0[9];
  if (v1)
  {
    v0[9] = 0;
    remote_device_browser_cancel();
  }
  swift_bridgeObjectRelease();

  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t RemoteDeviceBrowser.__deallocating_deinit()
{
  RemoteDeviceBrowser.deinit();

  return MEMORY[0x1F4186488](v0, 89, 7);
}

uint64_t type metadata accessor for RemoteDeviceBrowser()
{
  return self;
}

uint64_t method lookup function for RemoteDeviceBrowser(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for RemoteDeviceBrowser);
}

uint64_t dispatch thunk of RemoteDeviceBrowser.discoveredDevices.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of RemoteDeviceBrowser.connectedDevices.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of RemoteDeviceBrowser.__allocating_init(for:deviceType:targetQueue:eventHandler:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(v3 + 232))(a1, a2, a3 | ((HIDWORD(a3) & 1) << 32));
}

uint64_t dispatch thunk of RemoteDeviceBrowser.startBrowsing()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of RemoteDeviceBrowser.cancel()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

void *initializeBufferWithCopyOfBuffer for RemoteDeviceBrowser.Event(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t destroy for RemoteDeviceBrowser.Event()
{
  return swift_release();
}

void *assignWithCopy for RemoteDeviceBrowser.Event(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

void *assignWithTake for RemoteDeviceBrowser.Event(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for RemoteDeviceBrowser.Event(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for RemoteDeviceBrowser.Event(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = 0;
    *(_DWORD *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

uint64_t sub_1D76B2A10(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_1D76B2A28(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *uint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for RemoteDeviceBrowser.Event()
{
  return &type metadata for RemoteDeviceBrowser.Event;
}

uint64_t sub_1D76B2A58()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D76B2A98(uint64_t a1)
{
  return sub_1D76B229C(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_1D76B2AA0()
{
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D76B2AE0()
{
  return sub_1D76B24B8(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1D76B2AE8()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D76B2AF8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RemoteDevice.Identity();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t XPCFileDescriptor.__allocating_init(forReadingFileAt:)(char *a1)
{
  return sub_1D76B67B4(a1);
}

uint64_t sub_1D76B2B94(uint64_t a1, _DWORD *a2)
{
  if (a1)
  {
    uint64_t result = sub_1D76F7DE4();
    *a2 = result;
  }
  else
  {
    unint64_t v4 = sub_1D769C348(MEMORY[0x1E4FBC860]);
    sub_1D76B10C8();
    swift_allocError();
    static XPCError.unknown(_:from:userInfo:)(0xD000000000000010, 0x80000001D76FD970, 0, v4, v5);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  return result;
}

id XPCFileDescriptor.WriteOptions.fileProtection.getter()
{
  id v1 = *v0;
  id v2 = *v0;
  return v1;
}

void XPCFileDescriptor.WriteOptions.fileProtection.setter(void *a1)
{
  id *v1 = a1;
}

uint64_t (*XPCFileDescriptor.WriteOptions.fileProtection.modify())()
{
  return nullsub_1;
}

void *XPCFileDescriptor.WriteOptions.fileSecurity.getter()
{
  id v1 = *(void **)(v0 + 8);
  id v2 = v1;
  return v1;
}

void XPCFileDescriptor.WriteOptions.fileSecurity.setter(uint64_t a1)
{
  *(void *)(v1 + 8) = a1;
}

uint64_t (*XPCFileDescriptor.WriteOptions.fileSecurity.modify())()
{
  return nullsub_1;
}

void XPCFileDescriptor.WriteOptions.init()(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void XPCFileDescriptor.__allocating_init(forWritingFileAt:options:)(char *a1, uint64_t a2)
{
}

void sub_1D76B2D44(const char *a1@<X0>, void *a2@<X1>, __CFFileSecurity *a3@<X2>, _DWORD *a4@<X8>)
{
  uint64_t v21 = *MEMORY[0x1E4F143C0];
  uint64_t v8 = sub_1D76F7A64();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188788](v8);
  id v12 = &v19[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188788](v10);
  uint64_t v14 = &v19[-v13];
  if (a1)
  {
    if (a3)
    {
      mode_t mode = 0;
      if (CFFileSecurityGetMode(a3, &mode)) {
        a3 = (__CFFileSecurity *)sub_1D76F8D74();
      }
      else {
        a3 = 0;
      }
    }
    int v17 = XPCFileTransfer_open(a1, 1537, a2, 0, a3);

    if ((v17 & 0x80000000) == 0)
    {
      *a4 = v17;
      return;
    }
    int v18 = MEMORY[0x1D9475210]();
    sub_1D769C348(MEMORY[0x1E4FBC860]);
    if (v18)
    {
      POSIXError.init(uncheckedCode:userInfo:)(v18, (uint64_t)v12);
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v9 + 32))(v14, v12, v8);
    }
    else
    {
      POSIXError.init(uncheckedCode:userInfo:)(5, (uint64_t)v14);
    }
    sub_1D76F7A44();
    (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v14, v8);
  }
  else
  {
    unint64_t v15 = sub_1D769C348(MEMORY[0x1E4FBC860]);
    sub_1D76B10C8();
    swift_allocError();
    static XPCError.unknown(_:from:userInfo:)(0xD000000000000010, 0x80000001D76FD970, 0, v15, v16);
    swift_bridgeObjectRelease();
  }
  swift_willThrow();
}

uint64_t XPCFileDescriptor.__allocating_init(fileDescriptor:closeWhenDone:)(int a1, char a2)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = j__read;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = j__write;
  *(void *)(result + 40) = 0;
  *(void *)(result + 48) = j__poll;
  *(void *)(result + 56) = 0;
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    *(_DWORD *)(result + 64) = a1;
    *(unsigned char *)(result + 68) = a2 & 1;
  }
  return result;
}

uint64_t XPCFileDescriptor.init(fileDescriptor:closeWhenDone:)(uint64_t result, char a2)
{
  *(void *)(v2 + 16) = j__read;
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = j__write;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 48) = j__poll;
  *(void *)(v2 + 56) = 0;
  if ((result & 0x80000000) != 0)
  {
    __break(1u);
  }
  else
  {
    *(_DWORD *)(v2 + 64) = result;
    *(unsigned char *)(v2 + 68) = a2 & 1;
    return v2;
  }
  return result;
}

uint64_t XPCFileDescriptor.__allocating_init(duplicatingFileDescriptor:)(int a1)
{
  uint64_t result = sub_1D76B3118(a1);
  int v3 = result;
  if (!v1)
  {
    type metadata accessor for XPCFileDescriptor();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = j__read;
    *(void *)(result + 24) = 0;
    *(void *)(result + 32) = j__write;
    *(void *)(result + 40) = 0;
    *(void *)(result + 48) = j__poll;
    *(void *)(result + 56) = 0;
    if (v3 < 0)
    {
      __break(1u);
    }
    else
    {
      *(_DWORD *)(result + 64) = v3;
      *(unsigned char *)(result + 68) = 1;
    }
  }
  return result;
}

uint64_t sub_1D76B3118(int a1)
{
  uint64_t v2 = sub_1D76F7A64();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188788](v2);
  id v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188788](v4);
  uint64_t v8 = (char *)&v12 - v7;
  uint64_t v9 = dup(a1);
  if ((v9 & 0x80000000) != 0)
  {
    int v10 = MEMORY[0x1D9475210]();
    sub_1D769C348(MEMORY[0x1E4FBC860]);
    if (v10)
    {
      POSIXError.init(uncheckedCode:userInfo:)(v10, (uint64_t)v6);
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v8, v6, v2);
    }
    else
    {
      POSIXError.init(uncheckedCode:userInfo:)(5, (uint64_t)v8);
    }
    sub_1D76F7A44();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    swift_willThrow();
  }
  return v9;
}

uint64_t XPCFileDescriptor.__allocating_init(duplicating:)(uint64_t a1)
{
  int v3 = sub_1D76B3118(*(_DWORD *)(a1 + 64));
  if (v1)
  {
    swift_release();
    return v2;
  }
  int v4 = v3;
  type metadata accessor for XPCFileDescriptor();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = j__read;
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = j__write;
  *(void *)(v2 + 40) = 0;
  uint64_t result = swift_release();
  *(void *)(v2 + 48) = j__poll;
  *(void *)(v2 + 56) = 0;
  if ((v4 & 0x80000000) == 0)
  {
    *(_DWORD *)(v2 + 64) = v4;
    *(unsigned char *)(v2 + 68) = 1;
    return v2;
  }
  __break(1u);
  return result;
}

void XPCFileDescriptor.__allocating_init(duplicating:)(void *a1)
{
  int v3 = sub_1D76B3118((int)objc_msgSend(a1, sel_fileDescriptor));
  if (v1)
  {
  }
  else
  {
    int v4 = v3;
    type metadata accessor for XPCFileDescriptor();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = j__read;
    *(void *)(v5 + 24) = 0;
    *(void *)(v5 + 32) = j__write;
    *(void *)(v5 + 40) = 0;

    *(void *)(v5 + 48) = j__poll;
    *(void *)(v5 + 56) = 0;
    if (v4 < 0)
    {
      __break(1u);
    }
    else
    {
      *(_DWORD *)(v5 + 64) = v4;
      *(unsigned char *)(v5 + 68) = 1;
    }
  }
}

uint64_t XPCFileDescriptor.__allocating_init(duplicating:)(void *a1)
{
  uint64_t result = MEMORY[0x1D94771B0]();
  if (result == XPCTypeFD)
  {
    int v3 = xpc_fd_dup(a1);
    if (v3 < 0)
    {
      unint64_t v5 = sub_1D769C348(MEMORY[0x1E4FBC860]);
      sub_1D76B10C8();
      swift_allocError();
      static XPCError.unknown(_:from:userInfo:)(0xD00000000000002ALL, 0x80000001D76FD7D0, 0, v5, v6);
      swift_bridgeObjectRelease();
      swift_willThrow();
      return swift_unknownObjectRelease();
    }
    else
    {
      int v4 = v3;
      swift_unknownObjectRelease();
      type metadata accessor for XPCFileDescriptor();
      uint64_t result = swift_allocObject();
      *(void *)(result + 16) = j__read;
      *(void *)(result + 24) = 0;
      *(void *)(result + 32) = j__write;
      *(void *)(result + 40) = 0;
      *(void *)(result + 48) = j__poll;
      *(void *)(result + 56) = 0;
      *(_DWORD *)(result + 64) = v4;
      *(unsigned char *)(result + 68) = 1;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t XPCFileDescriptor.__allocating_init(duplicating:)(int a1)
{
  uint64_t result = sub_1D76B3118(a1);
  int v3 = result;
  if (!v1)
  {
    type metadata accessor for XPCFileDescriptor();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = j__read;
    *(void *)(result + 24) = 0;
    *(void *)(result + 32) = j__write;
    *(void *)(result + 40) = 0;
    *(void *)(result + 48) = j__poll;
    *(void *)(result + 56) = 0;
    if (v3 < 0)
    {
      __break(1u);
    }
    else
    {
      *(_DWORD *)(result + 64) = v3;
      *(unsigned char *)(result + 68) = 1;
    }
  }
  return result;
}

void XPCFileDescriptor.__allocating_init(duplicating:)(__CFFileDescriptor *a1)
{
  CFFileDescriptorNativeDescriptor NativeDescriptor = CFFileDescriptorGetNativeDescriptor(a1);
  int v4 = sub_1D76B3118(NativeDescriptor);
  if (v1)
  {
  }
  else
  {
    int v5 = v4;
    type metadata accessor for XPCFileDescriptor();
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = j__read;
    *(void *)(v6 + 24) = 0;
    *(void *)(v6 + 32) = j__write;
    *(void *)(v6 + 40) = 0;

    *(void *)(v6 + 48) = j__poll;
    *(void *)(v6 + 56) = 0;
    if (v5 < 0)
    {
      __break(1u);
    }
    else
    {
      *(_DWORD *)(v6 + 64) = v5;
      *(unsigned char *)(v6 + 68) = 1;
    }
  }
}

uint64_t static XPCFileDescriptor.createPipe()()
{
  return sub_1D76B6520();
}

char *static XPCFileDescriptor.createPseudoterminal(terminalParameters:windowSize:)(uint64_t a1, tcflag_t a2, int a3)
{
  int v64 = a3;
  tcflag_t v62 = a2;
  uint64_t v75 = *MEMORY[0x1E4F143C0];
  sub_1D76B6D40(a1, (uint64_t)v70);
  tcflag_t v58 = v70[1];
  tcflag_t v59 = v70[0];
  uint64_t v4 = v70[4];
  tcflag_t v56 = v70[3];
  tcflag_t v57 = v70[2];
  uint64_t v6 = v70[5];
  int v5 = v71;
  speed_t v60 = v73;
  speed_t v61 = v72;
  uint64_t v63 = sub_1D76F7A64();
  uint64_t v65 = *(void *)(v63 - 8);
  uint64_t v7 = MEMORY[0x1F4188788](v63);
  uint64_t v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188788](v7);
  uint64_t v12 = (char *)&v52 - v11;
  uint64_t v13 = MEMORY[0x1F4188788](v10);
  unint64_t v15 = (char *)&v52 - v14;
  uint64_t v16 = MEMORY[0x1F4188788](v13);
  int v18 = (char *)&v52 - v17;
  uint64_t v19 = MEMORY[0x1F4188788](v16);
  uint64_t v53 = (uint64_t)&v52 - v20;
  uint64_t v21 = MEMORY[0x1F4188788](v19);
  uint64_t v55 = (char *)&v52 - v22;
  uint64_t v23 = MEMORY[0x1F4188788](v21);
  uint64_t v52 = (uint64_t)&v52 - v24;
  MEMORY[0x1F4188788](v23);
  uint64_t v54 = (char *)&v52 - v25;
  sub_1D76B6D40(a1, (uint64_t)v74);
  if ((v74[72] & 1) == 0)
  {
    v69.int c_iflag = v59;
    v69.c_oflag = v58;
    v69.c_cflag = v57;
    v69.c_lflag = v56;
    *(void *)v69.c_cc = v4;
    *(void *)&v69.c_cc[8] = v6;
    *(_DWORD *)&v69.c_cc[16] = v5;
    v69.c_ispeed = v61;
    v69.c_ospeed = v60;
    if (v64)
    {
      LODWORD(v67) = -1;
      int v68 = -1;
      int v38 = openpty((int *)&v67, &v68, 0, &v69, 0);
      uint64_t v12 = (char *)v63;
      uint64_t v30 = v65;
      if (!v38) {
        goto LABEL_26;
      }
      int v39 = MEMORY[0x1D9475210]();
      sub_1D769C348(MEMORY[0x1E4FBC860]);
      if (v39)
      {
        uint64_t v40 = v53;
        POSIXError.init(uncheckedCode:userInfo:)(v39, v53);
        uint64_t v33 = (uint64_t)v55;
        (*(void (**)(char *, uint64_t, char *))(v30 + 32))(v55, v40, v12);
        goto LABEL_37;
      }
      uint64_t v33 = (uint64_t)v55;
    }
    else
    {
      tcflag_t v67 = v62;
      int v68 = -1;
      int v66 = -1;
      int v29 = openpty(&v68, &v66, 0, &v69, (winsize *)&v67);
      uint64_t v12 = (char *)v63;
      uint64_t v30 = v65;
      if (!v29) {
        goto LABEL_20;
      }
      int v31 = MEMORY[0x1D9475210]();
      sub_1D769C348(MEMORY[0x1E4FBC860]);
      if (v31)
      {
        uint64_t v32 = v52;
        POSIXError.init(uncheckedCode:userInfo:)(v31, v52);
        uint64_t v33 = (uint64_t)v54;
        (*(void (**)(char *, uint64_t, char *))(v30 + 32))(v54, v32, v12);
LABEL_37:
        sub_1D76F7A44();
        (*(void (**)(uint64_t, char *))(v30 + 8))(v33, v12);
LABEL_38:
        swift_willThrow();
        return v12;
      }
      uint64_t v33 = (uint64_t)v54;
    }
    POSIXError.init(uncheckedCode:userInfo:)(5, v33);
    goto LABEL_37;
  }
  if (v64)
  {
    LODWORD(v69.c_iflag) = -1;
    LODWORD(v67) = -1;
    int v34 = openpty((int *)&v69, (int *)&v67, 0, 0, 0);
    uint64_t v35 = v65;
    if (v34)
    {
      int v36 = MEMORY[0x1D9475210]();
      sub_1D769C348(MEMORY[0x1E4FBC860]);
      if (v36)
      {
        POSIXError.init(uncheckedCode:userInfo:)(v36, (uint64_t)v9);
        uint64_t v37 = v63;
        (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v12, v9, v63);
      }
      else
      {
        POSIXError.init(uncheckedCode:userInfo:)(5, (uint64_t)v12);
        uint64_t v37 = v63;
      }
      sub_1D76F7A44();
      (*(void (**)(char *, uint64_t))(v35 + 8))(v12, v37);
      goto LABEL_38;
    }
    goto LABEL_23;
  }
  v69.int c_iflag = v62;
  LODWORD(v67) = -1;
  int v68 = -1;
  int v26 = openpty((int *)&v67, &v68, 0, 0, (winsize *)&v69);
  uint64_t v27 = v65;
  if (v26)
  {
    int v28 = MEMORY[0x1D9475210]();
    sub_1D769C348(MEMORY[0x1E4FBC860]);
    if (v28)
    {
      POSIXError.init(uncheckedCode:userInfo:)(v28, (uint64_t)v15);
      uint64_t v12 = (char *)v63;
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v18, v15, v63);
    }
    else
    {
      POSIXError.init(uncheckedCode:userInfo:)(5, (uint64_t)v18);
      uint64_t v12 = (char *)v63;
    }
    sub_1D76F7A44();
    (*(void (**)(char *, char *))(v27 + 8))(v18, v12);
    goto LABEL_38;
  }
  int v41 = v67;
  type metadata accessor for XPCFileDescriptor();
  uint64_t v42 = swift_allocObject();
  *(void *)(v42 + 16) = j__read;
  *(void *)(v42 + 24) = 0;
  *(void *)(v42 + 32) = j__write;
  *(void *)(v42 + 40) = 0;
  *(void *)(v42 + 48) = j__poll;
  *(void *)(v42 + 56) = 0;
  if (v41 < 0)
  {
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v12 = (char *)v42;
  *(_DWORD *)(v42 + 64) = v41;
  *(unsigned char *)(v42 + 68) = 1;
  int v43 = v68;
  uint64_t v44 = swift_allocObject();
  *(void *)(v44 + 16) = j__read;
  *(void *)(v44 + 24) = 0;
  *(void *)(v44 + 32) = j__write;
  *(void *)(v44 + 40) = 0;
  *(void *)(v44 + 48) = j__poll;
  *(void *)(v44 + 56) = 0;
  if ((v43 & 0x80000000) == 0) {
    goto LABEL_28;
  }
  __break(1u);
LABEL_20:
  int v45 = v68;
  type metadata accessor for XPCFileDescriptor();
  uint64_t v46 = swift_allocObject();
  *(void *)(v46 + 16) = j__read;
  *(void *)(v46 + 24) = 0;
  *(void *)(v46 + 32) = j__write;
  *(void *)(v46 + 40) = 0;
  *(void *)(v46 + 48) = j__poll;
  *(void *)(v46 + 56) = 0;
  if (v45 < 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v12 = (char *)v46;
  *(_DWORD *)(v46 + 64) = v45;
  *(unsigned char *)(v46 + 68) = 1;
  int v43 = v66;
  uint64_t v44 = swift_allocObject();
  *(void *)(v44 + 16) = j__read;
  *(void *)(v44 + 24) = 0;
  *(void *)(v44 + 32) = j__write;
  *(void *)(v44 + 40) = 0;
  *(void *)(v44 + 48) = j__poll;
  *(void *)(v44 + 56) = 0;
  if ((v43 & 0x80000000) == 0) {
    goto LABEL_28;
  }
  __break(1u);
LABEL_23:
  int c_iflag = v69.c_iflag;
  type metadata accessor for XPCFileDescriptor();
  uint64_t v48 = swift_allocObject();
  *(void *)(v48 + 16) = j__read;
  *(void *)(v48 + 24) = 0;
  *(void *)(v48 + 32) = j__write;
  *(void *)(v48 + 40) = 0;
  *(void *)(v48 + 48) = j__poll;
  *(void *)(v48 + 56) = 0;
  if (c_iflag < 0)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  uint64_t v12 = (char *)v48;
  *(_DWORD *)(v48 + 64) = c_iflag;
  *(unsigned char *)(v48 + 68) = 1;
  int v43 = v67;
  uint64_t v44 = swift_allocObject();
  *(void *)(v44 + 16) = j__read;
  *(void *)(v44 + 24) = 0;
  *(void *)(v44 + 32) = j__write;
  *(void *)(v44 + 40) = 0;
  *(void *)(v44 + 48) = j__poll;
  *(void *)(v44 + 56) = 0;
  if (v43 < 0)
  {
    __break(1u);
LABEL_26:
    int v49 = v67;
    type metadata accessor for XPCFileDescriptor();
    uint64_t v50 = swift_allocObject();
    *(void *)(v50 + 16) = j__read;
    *(void *)(v50 + 24) = 0;
    *(void *)(v50 + 32) = j__write;
    *(void *)(v50 + 40) = 0;
    *(void *)(v50 + 48) = j__poll;
    *(void *)(v50 + 56) = 0;
    if ((v49 & 0x80000000) == 0)
    {
      uint64_t v12 = (char *)v50;
      *(_DWORD *)(v50 + 64) = v49;
      *(unsigned char *)(v50 + 68) = 1;
      int v43 = v68;
      uint64_t v44 = swift_allocObject();
      *(void *)(v44 + 16) = j__read;
      *(void *)(v44 + 24) = 0;
      *(void *)(v44 + 32) = j__write;
      *(void *)(v44 + 40) = 0;
      *(void *)(v44 + 48) = j__poll;
      *(void *)(v44 + 56) = 0;
      if ((v43 & 0x80000000) == 0) {
        goto LABEL_28;
      }
LABEL_44:
      __break(1u);
    }
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
LABEL_28:
  *(_DWORD *)(v44 + 64) = v43;
  *(unsigned char *)(v44 + 68) = 1;
  return v12;
}

uint64_t XPCFileDescriptor.deinit()
{
  if (*(unsigned char *)(v0 + 68) == 1) {
    close(*(_DWORD *)(v0 + 64));
  }
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t XPCFileDescriptor.__deallocating_deinit()
{
  if (*(unsigned char *)(v0 + 68) == 1) {
    close(*(_DWORD *)(v0 + 64));
  }
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x1F4186488](v0, 69, 7);
}

uint64_t sub_1D76B3FFC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v4 = *(void *)(v3 + 24);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = v4;
  *a2 = sub_1D76B76D8;
  a2[1] = v6;
  return swift_retain();
}

uint64_t sub_1D76B407C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  uint64_t v6 = *a2;
  swift_beginAccess();
  *(void *)(v6 + 16) = sub_1D76B7680;
  *(void *)(v6 + 24) = v5;
  swift_retain();
  return swift_release();
}

uint64_t sub_1D76B410C()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 16);
  swift_retain();
  return v1;
}

uint64_t sub_1D76B4158(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_release();
}

uint64_t (*sub_1D76B41AC())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1D76B4204@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  uint64_t v5 = *(void *)(v3 + 32);
  uint64_t v4 = *(void *)(v3 + 40);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = v4;
  *a2 = sub_1D76B7684;
  a2[1] = v6;
  return swift_retain();
}

uint64_t sub_1D76B4284(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  uint64_t v6 = *a2;
  swift_beginAccess();
  *(void *)(v6 + 32) = sub_1D76B7680;
  *(void *)(v6 + 40) = v5;
  swift_retain();
  return swift_release();
}

uint64_t sub_1D76B4314()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 32);
  swift_retain();
  return v1;
}

uint64_t sub_1D76B4360(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return swift_release();
}

uint64_t (*sub_1D76B43B4())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1D76B440C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  uint64_t v5 = *(void *)(v3 + 48);
  uint64_t v4 = *(void *)(v3 + 56);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = v4;
  *a2 = sub_1D76B7644;
  a2[1] = v6;
  return swift_retain();
}

uint64_t sub_1D76B448C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  uint64_t v6 = *a2;
  swift_beginAccess();
  *(void *)(v6 + 48) = sub_1D76B75F8;
  *(void *)(v6 + 56) = v5;
  swift_retain();
  return swift_release();
}

uint64_t sub_1D76B451C()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 48);
  swift_retain();
  return v1;
}

uint64_t sub_1D76B4568(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  return swift_release();
}

uint64_t (*sub_1D76B45BC())()
{
  return j__swift_endAccess;
}

uint64_t sub_1D76B4614(uint64_t (*a1)(void))
{
  return a1(*(unsigned int *)(v1 + 64));
}

uint64_t sub_1D76B4644()
{
  uint64_t v1 = sub_1D76F7A64();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x1F4188788](v1);
  uint64_t v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188788](v3);
  uint64_t v7 = (char *)v11 - v6;
  uint64_t v8 = dup(*(_DWORD *)(v0 + 64));
  if ((v8 & 0x80000000) != 0)
  {
    int v9 = MEMORY[0x1D9475210]();
    sub_1D769C348(MEMORY[0x1E4FBC860]);
    if (v9)
    {
      POSIXError.init(uncheckedCode:userInfo:)(v9, (uint64_t)v5);
      (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v7, v5, v1);
    }
    else
    {
      POSIXError.init(uncheckedCode:userInfo:)(5, (uint64_t)v7);
    }
    sub_1D76F7A44();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v1);
    swift_willThrow();
  }
  return v8;
}

uint64_t sub_1D76B47B4()
{
  uint64_t v1 = sub_1D76F7A64();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x1F4188788](v1);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x1F4188788](v3);
  uint64_t v8 = (char *)&v10 - v7;
  if (*(unsigned char *)(v0 + 68))
  {
    __break(1u);
  }
  else
  {
    uint64_t result = close(*(_DWORD *)(v0 + 64));
    if (result)
    {
      int v9 = MEMORY[0x1D9475210]();
      sub_1D769C348(MEMORY[0x1E4FBC860]);
      if (v9)
      {
        POSIXError.init(uncheckedCode:userInfo:)(v9, (uint64_t)v5);
        (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v8, v5, v1);
      }
      else
      {
        POSIXError.init(uncheckedCode:userInfo:)(5, (uint64_t)v8);
      }
      sub_1D76F7A44();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v8, v1);
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t sub_1D76B4920(uint64_t a1)
{
  uint64_t v3 = sub_1D76F7A64();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188788](v3);
  uint64_t v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188788](v5);
  int v9 = (char *)v12 - v8;
  uint64_t result = MEMORY[0x1D9475220](*(unsigned int *)(v1 + 64), 4, a1);
  if (result)
  {
    int v11 = MEMORY[0x1D9475210]();
    sub_1D769C348(MEMORY[0x1E4FBC860]);
    if (v11)
    {
      POSIXError.init(uncheckedCode:userInfo:)(v11, (uint64_t)v7);
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v7, v3);
    }
    else
    {
      POSIXError.init(uncheckedCode:userInfo:)(5, (uint64_t)v9);
    }
    sub_1D76F7A44();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1D76B4A94(unsigned __int8 *a1)
{
  int v1 = *a1;
  int v2 = sub_1D76F7E24();
  if (v1 == 1) {
    uint64_t v3 = v2 & 0xFFFFFFFB;
  }
  else {
    uint64_t v3 = v2 | 4u;
  }
  return sub_1D76B4920(v3);
}

uint64_t sub_1D76B4B1C()
{
  return (sub_1D76F7E24() >> 2) & 1;
}

uint64_t sub_1D76B4B40(char a1)
{
  int v2 = sub_1D76F7E24();
  if (a1) {
    uint64_t v3 = v2 & 0xFFFFFFFB;
  }
  else {
    uint64_t v3 = v2 | 4u;
  }
  return sub_1D76B4920(v3);
}

uint64_t (*sub_1D76B4BC0(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 64);
  *(unsigned char *)(a1 + 12) = (sub_1D76F7E24() & 4) != 0;
  return sub_1D76B4C18;
}

uint64_t sub_1D76B4C18(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 12);
  int v2 = sub_1D76F7E24();
  if (v1) {
    uint64_t v3 = v2 & 0xFFFFFFFB;
  }
  else {
    uint64_t v3 = v2 | 4u;
  }
  return sub_1D76B4920(v3);
}

uint64_t sub_1D76B4CA4(char a1)
{
  int v2 = sub_1D76F7E24();
  if (a1) {
    uint64_t v3 = v2 & 0xFFFFFFFB;
  }
  else {
    uint64_t v3 = v2 | 4u;
  }
  return sub_1D76B4920(v3);
}

BOOL sub_1D76B4CEC()
{
  return sub_1D76F7E24() == 0;
}

void sub_1D76B4D14(char a1)
{
  uint64_t v3 = sub_1D76F7A64();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188788](v3);
  uint64_t v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188788](v5);
  int v9 = &v12[-v8];
  if (MEMORY[0x1D9475220](*(unsigned int *)(v1 + 64), 73, (a1 & 1) == 0))
  {
    int v10 = MEMORY[0x1D9475210]();
    sub_1D769C348(MEMORY[0x1E4FBC860]);
    if (v10)
    {
      POSIXError.init(uncheckedCode:userInfo:)(v10, (uint64_t)v7);
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v4 + 32))(v9, v7, v3);
    }
    else
    {
      POSIXError.init(uncheckedCode:userInfo:)(5, (uint64_t)v9);
    }
    int v11 = (void *)sub_1D76F7A44();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v9, v3);
    swift_willThrow();
  }
}

void (*sub_1D76B4E84(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = sub_1D76F7E24() == 0;
  return sub_1D76B4EDC;
}

void sub_1D76B4EDC(uint64_t a1)
{
}

uint64_t sub_1D76B4F04(char a1)
{
  uint64_t v3 = sub_1D76F7A64();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188788](v3);
  uint64_t v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188788](v5);
  int v9 = (char *)v12 - v8;
  uint64_t result = MEMORY[0x1D9475220](*(unsigned int *)(v1 + 64), 73, (a1 & 1) == 0);
  if (result)
  {
    int v11 = MEMORY[0x1D9475210]();
    sub_1D769C348(MEMORY[0x1E4FBC860]);
    if (v11)
    {
      POSIXError.init(uncheckedCode:userInfo:)(v11, (uint64_t)v7);
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v7, v3);
    }
    else
    {
      POSIXError.init(uncheckedCode:userInfo:)(5, (uint64_t)v9);
    }
    sub_1D76F7A44();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1D76B507C@<X0>(char *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A740);
  MEMORY[0x1F4188788](v3 - 8);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(unsigned int *)(v1 + 64);
  uint64_t v7 = swift_slowAlloc();
  int v8 = MEMORY[0x1D9475230](v6, 50, v7);
  uint64_t v9 = sub_1D76F7C04();
  int v10 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
  if (v8 == -1)
  {
    v10(a1, 1, 1, v9);
    JUMPOUT(0x1D9476C10);
  }
  v10(v5, 1, 1, v9);
  sub_1D76F7BE4();
  sub_1D76B6DA8((uint64_t)v5);
  v10(a1, 0, 1, v9);
  return MEMORY[0x1D9476C10](v7, -1, -1);
}

uint64_t sub_1D76B5210(uint64_t a1)
{
  sub_1D76B116C(a1, (uint64_t)v15);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA83ACA0);
  type metadata accessor for _XPCObjectEncoder();
  if (!swift_dynamicCast())
  {
    unint64_t v5 = sub_1D769C348(MEMORY[0x1E4FBC860]);
    sub_1D76B10C8();
    swift_allocError();
    static XPCError.xpcCoderRequired(_:from:userInfo:)(0xD00000000000003DLL, 0x80000001D76FD800, 0, v5, v6);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  uint64_t v2 = *(void *)(v14 + 24);
  if (v2)
  {
    type metadata accessor for RemoteXPCConnection();
    if (swift_dynamicCastClass())
    {
      swift_retain();
      unint64_t v3 = sub_1D769C348(MEMORY[0x1E4FBC860]);
      sub_1D76B10C8();
      swift_allocError();
      static XPCError.xpcCoderRequired(_:from:userInfo:)(0xD00000000000006FLL, 0x80000001D76FD880, v2, v3, v4);
LABEL_10:
      swift_bridgeObjectRelease();
      swift_willThrow();
      swift_release();
      return swift_release();
    }
  }
  int v8 = *(_DWORD *)(v1 + 64);
  swift_retain();
  xpc_object_t v9 = xpc_fd_create(v8);
  if (!v9)
  {
    unint64_t v12 = sub_1D769C348(MEMORY[0x1E4FBC860]);
    sub_1D76B10C8();
    swift_allocError();
    static XPCError.unknown(_:from:userInfo:)(0xD00000000000003DLL, 0x80000001D76FD840, v2, v12, v13);
    goto LABEL_10;
  }
  xpc_object_t v10 = v9;
  uint64_t v11 = *(void *)(v14 + 32);
  v15[3] = &type metadata for XPCObjectSingleValueEncodingContainer;
  v15[4] = sub_1D76ABD10();
  v15[0] = v14;
  v15[1] = v11;
  uint64_t result = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v15, (uint64_t)&type metadata for XPCObjectSingleValueEncodingContainer);
  if (*(void *)(*(void *)result + 16))
  {
    __break(1u);
  }
  else
  {
    *(void *)(*(void *)result + 16) = v10;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v15);
  }
  return result;
}

uint64_t XPCFileDescriptor.__allocating_init(from:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  XPCFileDescriptor.init(from:)(a1);
  return v2;
}

uint64_t XPCFileDescriptor.init(from:)(void *a1)
{
  *(void *)(v1 + 16) = j__read;
  *(void *)(v1 + 24) = 0;
  *(void *)(v1 + 32) = j__write;
  *(void *)(v1 + 40) = 0;
  *(void *)(v1 + 48) = j__poll;
  *(void *)(v1 + 56) = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D76F8D84();
  if (v2) {
    goto LABEL_11;
  }
  __swift_project_boxed_opaque_existential_1(v15, v15[3]);
  sub_1D76B6E4C();
  sub_1D76F8A04();
  uint64_t v4 = MEMORY[0x1D94771B0](v14[0]);
  if (v4 != XPCTypeFD)
  {
    unint64_t v5 = (const _xpc_type_s *)v4;
    sub_1D76B116C((uint64_t)a1, (uint64_t)v14);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA83ACF0);
    type metadata accessor for _XPCObjectDecoder();
    if (swift_dynamicCast())
    {
      uint64_t v6 = *(void *)(v15[6] + 24);
      swift_retain();
      swift_release();
    }
    else
    {
      uint64_t v6 = 0;
    }
    unint64_t v9 = sub_1D769C348(MEMORY[0x1E4FBC860]);
    sub_1D76B10C8();
    swift_allocError();
    static XPCError.invalidType(_:expecting:from:userInfo:)(v5, 0, v6, v9, v10);
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_unknownObjectRelease();
    swift_release();
    goto LABEL_10;
  }
  int v7 = xpc_fd_dup(v14[0]);
  if (v7 < 0)
  {
    unint64_t v12 = sub_1D769C348(MEMORY[0x1E4FBC860]);
    sub_1D76B10C8();
    swift_allocError();
    static XPCError.unknown(_:from:userInfo:)(0xD00000000000002ALL, 0x80000001D76FD7D0, 0, v12, v13);
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_unknownObjectRelease();
LABEL_10:
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v15);
LABEL_11:
    swift_release();
    swift_release();
    swift_release();
    type metadata accessor for XPCFileDescriptor();
    swift_deallocPartialClassInstance();
    goto LABEL_12;
  }
  int v8 = v7;
  swift_unknownObjectRelease();
  *(_DWORD *)(v1 + 64) = v8;
  *(unsigned char *)(v1 + 68) = 1;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v15);
LABEL_12:
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return v1;
}

uint64_t sub_1D76B57A8()
{
  uint64_t v1 = *v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A740);
  uint64_t v3 = MEMORY[0x1F4188788](v2 - 8);
  unint64_t v5 = (char *)v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188788](v3);
  int v7 = (char *)v32 - v6;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBA33F30);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1D76FB0D0;
  v32[1] = v1;
  swift_getMetatypeMetadata();
  uint64_t v9 = sub_1D76F8044();
  uint64_t v11 = v10;
  uint64_t v12 = MEMORY[0x1E4FBB1A0];
  *(void *)(v8 + 56) = MEMORY[0x1E4FBB1A0];
  unint64_t v13 = sub_1D76B6EA0();
  unint64_t v14 = v13;
  *(void *)(v8 + 32) = v9;
  *(void *)(v8 + 40) = v11;
  uint64_t v15 = MEMORY[0x1E4FBBAC8];
  *(void *)(v8 + 96) = MEMORY[0x1E4FBBAB8];
  *(void *)(v8 + 104) = v15;
  *(void *)(v8 + 64) = v13;
  *(void *)(v8 + 72) = v0;
  uint64_t v16 = *((unsigned int *)v0 + 16);
  uint64_t v17 = MEMORY[0x1E4FBC1C0];
  *(void *)(v8 + 136) = MEMORY[0x1E4FBC150];
  *(void *)(v8 + 144) = v17;
  *(_DWORD *)(v8 + 112) = v16;
  uint64_t v18 = 1702195828;
  if (!*((unsigned char *)v0 + 68)) {
    uint64_t v18 = 0x65736C6166;
  }
  unint64_t v19 = 0xE500000000000000;
  if (*((unsigned char *)v0 + 68)) {
    unint64_t v19 = 0xE400000000000000;
  }
  *(void *)(v8 + 176) = v12;
  *(void *)(v8 + 184) = v13;
  *(void *)(v8 + 152) = v18;
  *(void *)(v8 + 160) = v19;
  uint64_t v20 = swift_slowAlloc();
  int v21 = MEMORY[0x1D9475230](v16, 50, v20);
  uint64_t v22 = sub_1D76F7C04();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56);
  if (v21 == -1)
  {
    uint64_t v25 = 1;
  }
  else
  {
    v24(v5, 1, 1, v22);
    sub_1D76F7BE4();
    sub_1D76B6DA8((uint64_t)v5);
    uint64_t v25 = 0;
  }
  uint64_t v26 = MEMORY[0x1E4FBB1A0];
  v24(v7, v25, 1, v22);
  MEMORY[0x1D9476C10](v20, -1, -1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v7, 1, v22) == 1)
  {
    sub_1D76B6DA8((uint64_t)v7);
    uint64_t v27 = (uint64_t *)(v8 + 192);
    *(void *)(v8 + 216) = v26;
    *(void *)(v8 + 224) = v14;
LABEL_12:
    *uint64_t v27 = 0x29656E6F6E28;
    unint64_t v30 = 0xE600000000000000;
    goto LABEL_13;
  }
  uint64_t v28 = sub_1D76F7BF4();
  unint64_t v30 = v29;
  (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v22);
  uint64_t v27 = (uint64_t *)(v8 + 192);
  *(void *)(v8 + 216) = v26;
  *(void *)(v8 + 224) = v14;
  if (!v30) {
    goto LABEL_12;
  }
  *uint64_t v27 = v28;
LABEL_13:
  *(void *)(v8 + 200) = v30;
  return sub_1D76F8004();
}

uint64_t sub_1D76B5AD4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for XPCFileDescriptor();
  uint64_t v5 = swift_allocObject();
  uint64_t result = XPCFileDescriptor.init(from:)(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_1D76B5B2C(uint64_t a1)
{
  return sub_1D76B5210(a1);
}

uint64_t sub_1D76B5B50()
{
  return sub_1D76B57A8();
}

uint64_t sub_1D76B5B74(uint64_t a1, char a2, char a3, uint64_t a4, int a5)
{
  int v45 = a5;
  uint64_t v10 = sub_1D76F7A64();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188788](v10);
  uint64_t v37 = (uint64_t)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x1F4188788](v12);
  uint64_t v16 = (char *)&v37 - v15;
  if (a2) {
    int v17 = 251;
  }
  else {
    int v17 = 56;
  }
  if (a3) {
    v17 |= 0x104u;
  }
  int64_t v18 = *(void *)(a1 + 16);
  unint64_t v19 = (void *)MEMORY[0x1E4FBC860];
  if (v18)
  {
    uint64_t v38 = a4;
    uint64_t v39 = v5;
    uint64_t v40 = (char *)&v37 - v15;
    uint64_t v41 = v11;
    uint64_t v42 = v10;
    int v43 = (void *)MEMORY[0x1E4FBC860];
    int v44 = v17;
    uint64_t result = sub_1D76E1518(0, v18, 0);
    __int16 v20 = v44;
    uint64_t v21 = 0;
    unint64_t v19 = v43;
    uint64_t v22 = a1 + 32;
    uint64_t v23 = v43[2];
    uint64_t v24 = v23;
    do
    {
      int v25 = *(_DWORD *)(v22 + 4 * v21);
      int v43 = v19;
      unint64_t v26 = v19[3];
      uint64_t v27 = v23 + v21 + 1;
      if (v23 + v21 >= v26 >> 1)
      {
        uint64_t result = sub_1D76E1518(v26 > 1, v23 + v21 + 1, 1);
        __int16 v20 = v44;
        unint64_t v19 = v43;
      }
      ++v21;
      v19[2] = v27;
      uint64_t v28 = &v19[v24];
      *((_DWORD *)v28 + 8) = v25;
      *((_WORD *)v28 + 18) = v20;
      *((_WORD *)v28 + 19) = 0;
      ++v24;
    }
    while (v18 != v21);
    uint64_t v11 = v41;
    uint64_t v10 = v42;
    uint64_t v5 = v39;
    uint64_t v16 = v40;
    a4 = v38;
  }
  if ((v45 & 1) == 0)
  {
    double v29 = *(double *)&a4 * 1000.0;
    if ((~COERCE__INT64(*(double *)&a4 * 1000.0) & 0x7FF0000000000000) != 0)
    {
      if (v29 > -2147483650.0)
      {
        if (v29 < 2147483650.0)
        {
          uint64_t v30 = (int)v29;
          goto LABEL_18;
        }
LABEL_31:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v30 = 100;
LABEL_18:
  swift_beginAccess();
  int v31 = *(uint64_t (**)(void *, unint64_t, uint64_t))(v5 + 48);
  unint64_t v32 = v19[2];
  if (HIDWORD(v32))
  {
    swift_retain();
    unint64_t v32 = 0xFFFFFFFFLL;
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_20:
  }
    unint64_t v19 = sub_1D76E063C(0, v19[2], 0, v19);
LABEL_21:
  swift_bridgeObjectRetain();
  int v33 = v31(v19 + 4, v32, v30);
  swift_bridgeObjectRelease();
  swift_release();
  if (v33 < 0)
  {
    uint64_t v34 = swift_bridgeObjectRelease();
    int v35 = MEMORY[0x1D9475210](v34);
    sub_1D769C348(MEMORY[0x1E4FBC860]);
    if (v35)
    {
      uint64_t v36 = v37;
      POSIXError.init(uncheckedCode:userInfo:)(v35, v37);
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v16, v36, v10);
    }
    else
    {
      POSIXError.init(uncheckedCode:userInfo:)(5, (uint64_t)v16);
    }
    sub_1D76F7A44();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
    swift_willThrow();
  }
  return (uint64_t)v19;
}

void *XPCFileDescriptor.read(into:polling:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D76B61D4(a1, a2, a3, (void *(*)(uint64_t *__return_ptr, void, uint64_t, uint64_t, uint64_t, uint64_t, void))sub_1D76B5F24);
}

uint64_t sub_1D76B5F24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v29 = a5;
  uint64_t v11 = sub_1D76F7A64();
  uint64_t v27 = *(void *)(v11 - 8);
  uint64_t v28 = v11;
  uint64_t v12 = MEMORY[0x1F4188788](v11);
  unint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188788](v12);
  uint64_t v16 = (char *)&v26 - v15;
  uint64_t result = swift_beginAccess();
  if (a3)
  {
    int64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a2 + 16);
    swift_retain();
    uint64_t v19 = v18(a1, a3, a4 - a3);
    uint64_t result = swift_release();
    if (!v19)
    {
      uint64_t v20 = 0;
      goto LABEL_6;
    }
    if ((v19 & 0x8000000000000000) == 0)
    {
      uint64_t v20 = v19;
LABEL_6:
      *(void *)a6 = v20;
      *(unsigned char *)(a6 + 8) = v19 == 0;
      return result;
    }
    if ((v29 & 1) != 0 && ((uint64_t result = MEMORY[0x1D9475210](result), result == 35) || result == 4))
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83ABF0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1D76FA300;
      *(_DWORD *)(inited + 32) = a1;
      uint64_t v22 = v30;
      sub_1D76B5B74(inited, 1, 0, 0, 1);
      if (!v22)
      {
        swift_bridgeObjectRelease();
        uint64_t result = swift_setDeallocating();
        uint64_t v20 = 0;
        goto LABEL_6;
      }
      return swift_setDeallocating();
    }
    else
    {
      int v23 = MEMORY[0x1D9475210](result);
      sub_1D769C348(MEMORY[0x1E4FBC860]);
      if (v23)
      {
        POSIXError.init(uncheckedCode:userInfo:)(v23, (uint64_t)v14);
        uint64_t v25 = v27;
        uint64_t v24 = v28;
        (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v16, v14, v28);
      }
      else
      {
        POSIXError.init(uncheckedCode:userInfo:)(5, (uint64_t)v16);
        uint64_t v25 = v27;
        uint64_t v24 = v28;
      }
      sub_1D76F7A44();
      (*(void (**)(char *, uint64_t))(v25 + 8))(v16, v24);
      return swift_willThrow();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *XPCFileDescriptor.write(from:polling:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D76B61D4(a1, a2, a3, (void *(*)(uint64_t *__return_ptr, void, uint64_t, uint64_t, uint64_t, uint64_t, void))sub_1D76B624C);
}

void *sub_1D76B61D4(uint64_t a1, uint64_t a2, uint64_t a3, void *(*a4)(uint64_t *__return_ptr, void, uint64_t, uint64_t, uint64_t, uint64_t, void))
{
  uint64_t result = a4(&v7, *(unsigned int *)(v4 + 64), v4, a1, a2, a3, *(void *)v4);
  if (!v5) {
    return (void *)v7;
  }
  return result;
}

uint64_t sub_1D76B624C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  int v33 = a5;
  uint64_t v34 = a6;
  uint64_t v10 = sub_1D76F7A64();
  uint64_t v32 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x1F4188788](v10);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188788](v11);
  uint64_t v15 = (char *)&v31 - v14;
  uint64_t result = swift_beginAccess();
  if (!a3) {
    goto LABEL_28;
  }
  int v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a2 + 32);
  swift_retain();
  uint64_t v18 = v17(a1, a3, a4 - a3);
  uint64_t result = swift_release();
  if (!v18)
  {
    LOBYTE(v19) = 1;
    goto LABEL_6;
  }
  if ((v18 & 0x8000000000000000) == 0)
  {
    LOBYTE(v19) = 0;
LABEL_6:
    uint64_t v20 = v34;
    *uint64_t v34 = v18;
    *((unsigned char *)v20 + 8) = v19;
    return result;
  }
  if ((v33 & 1) != 0 && ((uint64_t result = MEMORY[0x1D9475210](result), result == 35) || result == 4))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83ABF0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1D76FA300;
    *(_DWORD *)(inited + 32) = a1;
    uint64_t v22 = v35;
    uint64_t v23 = sub_1D76B5B74(inited, 0, 1, 0, 1);
    uint64_t result = swift_setDeallocating();
    if (!v22)
    {
      uint64_t v24 = *(void *)(v23 + 16);
      if (!v24) {
        goto LABEL_15;
      }
      if ((*(_WORD *)(v23 + 38) & 0x10) != 0)
      {
        LOBYTE(v19) = 1;
        goto LABEL_21;
      }
      if (v24 == 1)
      {
LABEL_15:
        LOBYTE(v19) = 0;
LABEL_21:
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v18 = 0;
        goto LABEL_6;
      }
      uint64_t v27 = (unsigned __int16 *)(v23 + 46);
      uint64_t v28 = 1;
      while (1)
      {
        uint64_t v29 = v28 + 1;
        if (__OFADD__(v28, 1)) {
          break;
        }
        unsigned int v30 = *v27;
        v27 += 4;
        int v19 = (v30 >> 4) & 1;
        if ((v30 & 0x10) == 0)
        {
          ++v28;
          if (v29 != v24) {
            continue;
          }
        }
        goto LABEL_21;
      }
      __break(1u);
LABEL_28:
      __break(1u);
    }
  }
  else
  {
    int v25 = MEMORY[0x1D9475210](result);
    sub_1D769C348(MEMORY[0x1E4FBC860]);
    if (v25)
    {
      POSIXError.init(uncheckedCode:userInfo:)(v25, (uint64_t)v13);
      uint64_t v26 = v32;
      (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v15, v13, v10);
    }
    else
    {
      POSIXError.init(uncheckedCode:userInfo:)(5, (uint64_t)v15);
      uint64_t v26 = v32;
    }
    sub_1D76F7A44();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v15, v10);
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1D76B6520()
{
  uint64_t v0 = sub_1D76F7A64();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = MEMORY[0x1F4188788](v0);
  uint64_t v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188788](v2);
  uint64_t v6 = (char *)v14 - v5;
  uint64_t v7 = sub_1D76F8214();
  *(void *)(v7 + 16) = 2;
  *(void *)(v7 + 32) = -1;
  uint64_t result = pipe((int *)(v7 + 32));
  if (result)
  {
    int v9 = MEMORY[0x1D9475210]();
    sub_1D769C348(MEMORY[0x1E4FBC860]);
    if (v9)
    {
      POSIXError.init(uncheckedCode:userInfo:)(v9, (uint64_t)v4);
      (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v6, v4, v0);
    }
    else
    {
      POSIXError.init(uncheckedCode:userInfo:)(5, (uint64_t)v6);
    }
    sub_1D76F7A44();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v6, v0);
    swift_willThrow();
    swift_bridgeObjectRelease();
    return (uint64_t)v6;
  }
  unint64_t v10 = *(void *)(v7 + 16);
  if (!v10)
  {
    __break(1u);
    goto LABEL_13;
  }
  int v11 = *(_DWORD *)(v7 + 32);
  type metadata accessor for XPCFileDescriptor();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = j__read;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = j__write;
  *(void *)(result + 40) = 0;
  *(void *)(result + 48) = j__poll;
  *(void *)(result + 56) = 0;
  if (v11 < 0)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v6 = (char *)result;
  *(_DWORD *)(result + 64) = v11;
  *(unsigned char *)(result + 68) = 1;
  if (v10 < 2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  int v12 = *(_DWORD *)(v7 + 36);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = j__read;
  *(void *)(v13 + 24) = 0;
  *(void *)(v13 + 32) = j__write;
  *(void *)(v13 + 40) = 0;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v13 + 48) = j__poll;
  *(void *)(v13 + 56) = 0;
  if ((v12 & 0x80000000) == 0)
  {
    *(_DWORD *)(v13 + 64) = v12;
    *(unsigned char *)(v13 + 68) = 1;
    return (uint64_t)v6;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_1D76B67B4(char *a1)
{
  uint64_t v3 = sub_1D76F7A64();
  uint64_t v22 = *(void *)(v3 - 8);
  uint64_t v23 = v3;
  uint64_t v4 = MEMORY[0x1F4188788](v3);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188788](v4);
  uint64_t v8 = (char *)&v22 - v7;
  uint64_t v9 = sub_1D76F7C04();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188788](v9);
  int v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, a1, v9);
  char v13 = sub_1D76F7BC4();
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
  uint64_t result = v14(v12, v9);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  int v24 = -1;
  MEMORY[0x1F4188788](result);
  *(&v22 - 2) = (uint64_t)&v24;
  uint64_t v16 = sub_1D76F7BD4();
  if (v1) {
    return v14(a1, v9);
  }
  if ((v24 & 0x80000000) == 0)
  {
    v14(a1, v9);
    int v17 = v24;
    type metadata accessor for XPCFileDescriptor();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = j__read;
    *(void *)(result + 24) = 0;
    *(void *)(result + 32) = j__write;
    *(void *)(result + 40) = 0;
    *(void *)(result + 48) = j__poll;
    *(void *)(result + 56) = 0;
    if ((v17 & 0x80000000) == 0)
    {
      *(_DWORD *)(result + 64) = v17;
      *(unsigned char *)(result + 68) = 1;
      return result;
    }
    goto LABEL_12;
  }
  int v18 = MEMORY[0x1D9475210](v16);
  sub_1D769C348(MEMORY[0x1E4FBC860]);
  if (v18)
  {
    POSIXError.init(uncheckedCode:userInfo:)(v18, (uint64_t)v6);
    uint64_t v19 = v22;
    uint64_t v20 = v6;
    uint64_t v21 = v23;
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v8, v20, v23);
  }
  else
  {
    POSIXError.init(uncheckedCode:userInfo:)(5, (uint64_t)v8);
    uint64_t v19 = v22;
    uint64_t v21 = v23;
  }
  sub_1D76F7A44();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v21);
  swift_willThrow();
  return v14(a1, v9);
}

void sub_1D76B6B08(char *a1, uint64_t a2)
{
  uint64_t v5 = sub_1D76F7C04();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188788](v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void **)a2;
  uint64_t v9 = *(void **)(a2 + 8);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, a1, v5);
  LOBYTE(a2) = sub_1D76F7BC4();
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t))(v6 + 8);
  uint64_t v12 = v11(v8, v5);
  if ((a2 & 1) == 0)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return;
  }
  MEMORY[0x1F4188788](v12);
  *(&v15 - 2) = (uint64_t)v10;
  *(&v15 - 1) = (uint64_t)v9;
  sub_1D76F7BD4();
  if (v2)
  {
    v11(a1, v5);

    return;
  }
  v11(a1, v5);

  int v13 = v16;
  type metadata accessor for XPCFileDescriptor();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = j__read;
  *(void *)(v14 + 24) = 0;
  *(void *)(v14 + 32) = j__write;
  *(void *)(v14 + 40) = 0;
  *(void *)(v14 + 48) = j__poll;
  *(void *)(v14 + 56) = 0;
  if (v13 < 0) {
    goto LABEL_8;
  }
  *(_DWORD *)(v14 + 64) = v13;
  *(unsigned char *)(v14 + 68) = 1;
}

uint64_t type metadata accessor for XPCFileDescriptor()
{
  return self;
}

uint64_t sub_1D76B6D40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A738);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D76B6DA8(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A740);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_1D76B6E4C()
{
  unint64_t result = qword_1EA83ACE0;
  if (!qword_1EA83ACE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83ACE0);
  }
  return result;
}

unint64_t sub_1D76B6EA0()
{
  unint64_t result = qword_1EBA33E70;
  if (!qword_1EBA33E70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBA33E70);
  }
  return result;
}

uint64_t sub_1D76B6F0C@<X0>(BOOL *a1@<X8>)
{
  uint64_t result = sub_1D76F7E24();
  *a1 = (result & 4) != 0;
  return result;
}

uint64_t sub_1D76B6F48@<X0>(BOOL *a1@<X8>)
{
  uint64_t result = sub_1D76F7E24();
  *a1 = result == 0;
  return result;
}

void sub_1D76B6F84(char *a1)
{
}

uint64_t method lookup function for XPCFileDescriptor(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for XPCFileDescriptor);
}

uint64_t dispatch thunk of XPCFileDescriptor.__allocating_init(fileDescriptor:closeWhenDone:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of XPCFileDescriptor._read.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of XPCFileDescriptor._read.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of XPCFileDescriptor._read.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of XPCFileDescriptor._write.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of XPCFileDescriptor._write.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of XPCFileDescriptor._write.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of XPCFileDescriptor._poll.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of XPCFileDescriptor._poll.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of XPCFileDescriptor._poll.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of XPCFileDescriptor.withUnsafeUnderlyingFileDescriptor<A>(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of XPCFileDescriptor.duplicate()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of XPCFileDescriptor.close()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of XPCFileDescriptor.isBlocking.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of XPCFileDescriptor.isBlocking.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of XPCFileDescriptor.isBlocking.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of XPCFileDescriptor.setBlocking(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of XPCFileDescriptor.isSignalling.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of XPCFileDescriptor.isSignalling.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of XPCFileDescriptor.isSignalling.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of XPCFileDescriptor.setSignalling(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t dispatch thunk of XPCFileDescriptor.url.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

uint64_t dispatch thunk of XPCFileDescriptor.encode(to:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

uint64_t dispatch thunk of XPCFileDescriptor.__allocating_init(from:)()
{
  return (*(uint64_t (**)(void))(v0 + 320))();
}

uint64_t dispatch thunk of XPCFileDescriptor.debugDescription.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328))();
}

void *initializeBufferWithCopyOfBuffer for XPCFileDescriptor.WriteOptions(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  id v6 = v4;
  return a1;
}

void destroy for XPCFileDescriptor.WriteOptions(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
}

uint64_t assignWithCopy for XPCFileDescriptor.WriteOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  id v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  uint64_t v7 = *(void **)(a1 + 8);
  uint64_t v8 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v8;
  id v9 = v8;

  return a1;
}

uint64_t assignWithTake for XPCFileDescriptor.WriteOptions(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for XPCFileDescriptor.WriteOptions(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCFileDescriptor.WriteOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCFileDescriptor.WriteOptions()
{
  return &type metadata for XPCFileDescriptor.WriteOptions;
}

uint64_t sub_1D76B75C0()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D76B75F8(uint64_t a1, int a2, int a3)
{
  void (*v4)(uint64_t *__return_ptr, uint64_t *, int *, char *);
  uint64_t v6;
  int v7;
  uint64_t v8;

  int v4 = *(void (**)(uint64_t *__return_ptr, uint64_t *, int *, char *))(v3 + 16);
  uint64_t v8 = a1;
  HIDWORD(v6) = a3;
  uint64_t v7 = a2;
  v4(&v6, &v8, &v7, (char *)&v6 + 4);
  return v6;
}

uint64_t sub_1D76B7644@<X0>(void *a1@<X0>, unsigned int *a2@<X1>, unsigned int *a3@<X2>, _DWORD *a4@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void, void, void))(v4 + 16))(*a1, *a2, *a3);
  *a4 = result;
  return result;
}

uint64_t sub_1D76B7684@<X0>(unsigned int *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1D76B76E0(a1, a2, a3, a4);
}

uint64_t sub_1D76B768C(int a1, uint64_t a2, uint64_t a3)
{
  void (*v4)(uint64_t *__return_ptr, int *, uint64_t *, uint64_t *);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  uint64_t v4 = *(void (**)(uint64_t *__return_ptr, int *, uint64_t *, uint64_t *))(v3 + 16);
  id v9 = a1;
  uint64_t v7 = a3;
  uint64_t v8 = a2;
  v4(&v6, &v9, &v8, &v7);
  return v6;
}

uint64_t sub_1D76B76D8@<X0>(unsigned int *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1D76B76E0(a1, a2, a3, a4);
}

uint64_t sub_1D76B76E0@<X0>(unsigned int *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void, void, void))(v4 + 16))(*a1, *a2, *a3);
  *a4 = result;
  return result;
}

void sub_1D76B7718(const char *a1@<X0>, _DWORD *a2@<X8>)
{
  sub_1D76B2D44(a1, *(void **)(v2 + 16), *(__CFFileSecurity **)(v2 + 24), a2);
}

uint64_t sub_1D76B7734(uint64_t a1)
{
  return sub_1D76B2B94(a1, *(_DWORD **)(v1 + 16));
}

uint64_t static TypeUtils.typeName(_:)()
{
  return sub_1D76F8DF4();
}

BOOL static TypeUtils.NominalTypeKind.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t TypeUtils.NominalTypeKind.hash(into:)()
{
  return sub_1D76F8D34();
}

uint64_t TypeUtils.NominalTypeKind.hashValue.getter()
{
  return sub_1D76F8D54();
}

BOOL sub_1D76B77FC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1D76B7810()
{
  return sub_1D76F8D54();
}

uint64_t sub_1D76B7858()
{
  return sub_1D76F8D34();
}

uint64_t sub_1D76B7884()
{
  return sub_1D76F8D54();
}

unint64_t sub_1D76B78CC()
{
  unint64_t result = qword_1EA83A748;
  if (!qword_1EA83A748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83A748);
  }
  return result;
}

ValueMetadata *type metadata accessor for TypeUtils()
{
  return &type metadata for TypeUtils;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for TypeUtils.NominalTypeKind(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for TypeUtils.NominalTypeKind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D76B7A98);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t sub_1D76B7AC0(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_1D76B7AC8(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for TypeUtils.NominalTypeKind()
{
  return &type metadata for TypeUtils.NominalTypeKind;
}

uint64_t NSFileHandle.url.getter@<X0>(char *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A740);
  MEMORY[0x1F4188788](v3 - 8);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = objc_msgSend(v1, sel_fileDescriptor);
  uint64_t v7 = swift_slowAlloc();
  int v8 = MEMORY[0x1D9475230](v6, 50, v7);
  uint64_t v9 = sub_1D76F7C04();
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
  if (v8 == -1)
  {
    v10(a1, 1, 1, v9);
    JUMPOUT(0x1D9476C10);
  }
  v10(v5, 1, 1, v9);
  sub_1D76F7BE4();
  sub_1D76B6DA8((uint64_t)v5);
  v10(a1, 0, 1, v9);
  return MEMORY[0x1D9476C10](v7, -1, -1);
}

unint64_t sub_1D76B7C84()
{
  unint64_t result = 0x6E69616D6F64;
  switch(*v0)
  {
    case 1:
      unint64_t result = 1701080931;
      break;
    case 2:
      unint64_t result = 0x6F666E4972657375;
      break;
    case 3:
      unint64_t result = 0xD00000000000001ALL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1D76B7D0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1D76BB848(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D76B7D34()
{
  return 0;
}

void sub_1D76B7D40(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1D76B7D4C(uint64_t a1)
{
  unint64_t v2 = sub_1D76BA1B8();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1D76B7D88(uint64_t a1)
{
  unint64_t v2 = sub_1D76BA1B8();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1D76B7DC4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

void sub_1D76B7DCC(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t sub_1D76B7DD4(uint64_t a1)
{
  unint64_t v2 = sub_1D76BBA3C();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1D76B7E10(uint64_t a1)
{
  unint64_t v2 = sub_1D76BBA3C();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1D76B7E4C(uint64_t a1)
{
  v224[4] = *MEMORY[0x1E4F143C0];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34390);
  MEMORY[0x1F4188788](v3 - 8);
  v179 = (char *)&v160 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v188 = sub_1D76F7D04();
  uint64_t v5 = *(void *)(v188 - 8);
  MEMORY[0x1F4188788](v188);
  v191 = (char *)&v160 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A740);
  MEMORY[0x1F4188788](v7 - 8);
  v178 = (char *)&v160 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v180 = sub_1D76F7C04();
  uint64_t v9 = *(void *)(v180 - 8);
  MEMORY[0x1F4188788](v180);
  v171 = (char *)&v160 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v194 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A808);
  uint64_t v172 = *(void *)(v194 - 8);
  MEMORY[0x1F4188788](v194);
  v195 = (char *)&v160 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = objc_msgSend(v1, sel_userInfo);
  uint64_t v13 = sub_1D76F7ED4();

  unint64_t v196 = v13;
  *(void *)&long long v209 = v1;
  sub_1D76BBA90(0, (unint64_t *)&qword_1EA83A778);
  swift_bridgeObjectRetain();
  id v14 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A810);
  if (swift_dynamicCast())
  {
    sub_1D76BBC14(&v219, (uint64_t)&v222);
    uint64_t v15 = sub_1D76F7FF4();
    uint64_t v17 = v16;
    uint64_t v18 = sub_1D76F7FF4();
    if (*(void *)(v13 + 16) && (unint64_t v20 = sub_1D769B2B0(v18, v19), (v21 & 1) != 0))
    {
      sub_1D769A9C4(*(void *)(v13 + 56) + 32 * v20, (uint64_t)&v215);
    }
    else
    {
      long long v215 = 0u;
      long long v216 = 0u;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1D76B116C((uint64_t)&v222, (uint64_t)&v219);
    if (*((void *)&v216 + 1))
    {
      sub_1D769B2A0(&v215, &v217);
    }
    else
    {
      __swift_project_boxed_opaque_existential_1(&v219, *((uint64_t *)&v220 + 1));
      uint64_t v22 = sub_1D76F7B24();
      if (v23)
      {
        *((void *)&v218 + 1) = MEMORY[0x1E4FBB1A0];
        *(void *)&long long v217 = v22;
        *((void *)&v217 + 1) = v23;
      }
      else
      {
        long long v217 = 0u;
        long long v218 = 0u;
      }
      sub_1D769AC0C((uint64_t)&v215, (uint64_t *)&unk_1EBA33F78);
    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v219);
    if (*((void *)&v218 + 1))
    {
      sub_1D769B2A0(&v217, &v209);
      unint64_t v24 = v196;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long v203 = v24;
      unint64_t v196 = 0x8000000000000000;
      sub_1D76EE330(&v209, v15, v17, isUniquelyReferenced_nonNull_native);
      unint64_t v196 = v203;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1D769AC0C((uint64_t)&v217, (uint64_t *)&unk_1EBA33F78);
      sub_1D76AF764(v15, v17, &v209);
      swift_bridgeObjectRelease();
      sub_1D769AC0C((uint64_t)&v209, (uint64_t *)&unk_1EBA33F78);
    }
    uint64_t v26 = sub_1D76F7FF4();
    uint64_t v28 = v27;
    uint64_t v29 = sub_1D76F7FF4();
    unint64_t v31 = v196;
    if (*(void *)(v196 + 16) && (unint64_t v32 = sub_1D769B2B0(v29, v30), (v33 & 1) != 0))
    {
      sub_1D769A9C4(*(void *)(v31 + 56) + 32 * v32, (uint64_t)&v211);
    }
    else
    {
      long long v211 = 0u;
      long long v212 = 0u;
    }
    swift_bridgeObjectRelease();
    sub_1D76B116C((uint64_t)&v222, (uint64_t)&v209);
    if (*((void *)&v212 + 1))
    {
      sub_1D769B2A0(&v211, &v213);
    }
    else
    {
      __swift_project_boxed_opaque_existential_1(&v209, *((uint64_t *)&v210 + 1));
      uint64_t v34 = sub_1D76F7B14();
      if (v35)
      {
        *((void *)&v214 + 1) = MEMORY[0x1E4FBB1A0];
        *(void *)&long long v213 = v34;
        *((void *)&v213 + 1) = v35;
      }
      else
      {
        long long v213 = 0u;
        long long v214 = 0u;
      }
      sub_1D769AC0C((uint64_t)&v211, (uint64_t *)&unk_1EBA33F78);
    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v209);
    if (*((void *)&v214 + 1))
    {
      sub_1D769B2A0(&v213, &v203);
      unint64_t v36 = v196;
      char v37 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v196 = 0x8000000000000000;
      *(void *)&long long v197 = v36;
      sub_1D76EE330(&v203, v26, v28, v37);
      unint64_t v196 = v197;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1D769AC0C((uint64_t)&v213, (uint64_t *)&unk_1EBA33F78);
      sub_1D76AF764(v26, v28, &v203);
      swift_bridgeObjectRelease();
      sub_1D769AC0C((uint64_t)&v203, (uint64_t *)&unk_1EBA33F78);
    }
    uint64_t v38 = sub_1D76F7FF4();
    uint64_t v40 = v39;
    uint64_t v41 = sub_1D76F7FF4();
    unint64_t v43 = v196;
    if (*(void *)(v196 + 16) && (unint64_t v44 = sub_1D769B2B0(v41, v42), (v45 & 1) != 0))
    {
      sub_1D769A9C4(*(void *)(v43 + 56) + 32 * v44, (uint64_t)&v205);
    }
    else
    {
      long long v205 = 0u;
      long long v206 = 0u;
    }
    swift_bridgeObjectRelease();
    sub_1D76B116C((uint64_t)&v222, (uint64_t)&v203);
    if (*((void *)&v206 + 1))
    {
      sub_1D769B2A0(&v205, &v207);
    }
    else
    {
      __swift_project_boxed_opaque_existential_1(&v203, v204);
      uint64_t v46 = sub_1D76F7B34();
      if (v47)
      {
        *((void *)&v208 + 1) = MEMORY[0x1E4FBB1A0];
        *(void *)&long long v207 = v46;
        *((void *)&v207 + 1) = v47;
      }
      else
      {
        long long v207 = 0u;
        long long v208 = 0u;
      }
      sub_1D769AC0C((uint64_t)&v205, (uint64_t *)&unk_1EBA33F78);
    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v203);
    if (*((void *)&v208 + 1))
    {
      sub_1D769B2A0(&v207, &v197);
      unint64_t v48 = v196;
      char v49 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long v201 = v48;
      unint64_t v196 = 0x8000000000000000;
      sub_1D76EE330(&v197, v38, v40, v49);
      unint64_t v196 = v201;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1D769AC0C((uint64_t)&v207, (uint64_t *)&unk_1EBA33F78);
      sub_1D76AF764(v38, v40, &v197);
      swift_bridgeObjectRelease();
      sub_1D769AC0C((uint64_t)&v197, (uint64_t *)&unk_1EBA33F78);
    }
    uint64_t v50 = sub_1D76F7FF4();
    uint64_t v52 = v51;
    uint64_t v53 = sub_1D76F7FF4();
    unint64_t v55 = v196;
    if (*(void *)(v196 + 16) && (unint64_t v56 = sub_1D769B2B0(v53, v54), (v57 & 1) != 0))
    {
      sub_1D769A9C4(*(void *)(v55 + 56) + 32 * v56, (uint64_t)&v199);
    }
    else
    {
      long long v199 = 0u;
      long long v200 = 0u;
    }
    swift_bridgeObjectRelease();
    sub_1D76B116C((uint64_t)&v222, (uint64_t)&v197);
    if (*((void *)&v200 + 1))
    {
      sub_1D769B2A0(&v199, &v201);
    }
    else
    {
      __swift_project_boxed_opaque_existential_1(&v197, v198);
      uint64_t v58 = sub_1D76F7B04();
      if (v59)
      {
        *((void *)&v202 + 1) = MEMORY[0x1E4FBB1A0];
        *(void *)&long long v201 = v58;
        *((void *)&v201 + 1) = v59;
      }
      else
      {
        long long v201 = 0u;
        long long v202 = 0u;
      }
      sub_1D769AC0C((uint64_t)&v199, (uint64_t *)&unk_1EBA33F78);
    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v197);
    if (*((void *)&v202 + 1))
    {
      sub_1D769B2A0(&v201, &v197);
      unint64_t v60 = v196;
      char v61 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long v199 = v60;
      unint64_t v196 = 0x8000000000000000;
      sub_1D76EE330(&v197, v50, v52, v61);
      unint64_t v196 = v199;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1D769AC0C((uint64_t)&v201, (uint64_t *)&unk_1EBA33F78);
      sub_1D76AF764(v50, v52, &v197);
      swift_bridgeObjectRelease();
      sub_1D769AC0C((uint64_t)&v197, (uint64_t *)&unk_1EBA33F78);
    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v222);
  }
  else
  {
    *(void *)&long long v221 = 0;
    long long v219 = 0u;
    long long v220 = 0u;
    swift_bridgeObjectRelease();
    sub_1D769AC0C((uint64_t)&v219, &qword_1EA83A818);
  }
  unint64_t v62 = v196;
  if (*(void *)(v196 + 16))
  {
    LOBYTE(v222) = 2;
    uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A758);
    uint64_t v64 = sub_1D76BBB88(&qword_1EA83A820, &qword_1EA83A758);
    sub_1D76BBA3C();
    uint64_t v163 = v63;
    uint64_t v164 = a1;
    uint64_t v162 = v64;
    sub_1D76F8B64();
    uint64_t v65 = *(void *)(v62 + 64);
    unint64_t v181 = v62 + 64;
    uint64_t v66 = 1 << *(unsigned char *)(v62 + 32);
    uint64_t v67 = -1;
    if (v66 < 64) {
      uint64_t v67 = ~(-1 << v66);
    }
    unint64_t v68 = v67 & v65;
    v189 = &v220;
    v193 = v224;
    v177 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v173 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    v167 = (void (**)(char *, uint64_t))(v9 + 8);
    v168 = (void (**)(char *, uint64_t, uint64_t))(v9 + 32);
    v175 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v170 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    v165 = (void (**)(char *, uint64_t))(v5 + 8);
    v166 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
    uint64_t v187 = *MEMORY[0x1E4F28A50];
    int64_t v184 = (unint64_t)(v66 + 63) >> 6;
    int64_t v161 = v184 - 1;
    swift_bridgeObjectRetain();
    int64_t v69 = 0;
    uint64_t v192 = MEMORY[0x1E4FBC840] + 8;
    unint64_t v183 = (unint64_t)"Unsupported type";
    unint64_t v185 = 0x80000001D76FDB40;
    long long v186 = xmmword_1D76FA300;
    long long v174 = xmmword_1D76FB290;
    long long v176 = xmmword_1D76FB280;
    uint64_t v169 = 0x80000001D76FDB20;
    uint64_t v70 = v188;
    uint64_t v71 = v191;
    unint64_t v182 = v62;
    while (v68)
    {
      unint64_t v72 = __clz(__rbit64(v68));
      v68 &= v68 - 1;
      unint64_t v73 = v72 | (v69 << 6);
LABEL_62:
      uint64_t v74 = *(void *)(v62 + 56);
      uint64_t v75 = (void *)(*(void *)(v62 + 48) + 16 * v73);
      uint64_t v76 = v75[1];
      *(void *)&long long v219 = *v75;
      *((void *)&v219 + 1) = v76;
      sub_1D769A9C4(v74 + 32 * v73, (uint64_t)v189);
      swift_bridgeObjectRetain();
LABEL_72:
      sub_1D76BBACC((uint64_t)&v219, (uint64_t)&v222);
      unint64_t v79 = v223;
      if (!v223)
      {
        swift_release();
        (*(void (**)(char *, uint64_t))(v172 + 8))(v195, v194);
        v143 = self;
        swift_bridgeObjectRetain();
        uint64_t v144 = MEMORY[0x1E4FBB1A0];
        v145 = (void *)sub_1D76F7EC4();
        swift_bridgeObjectRelease();
        id v222 = 0;
        id v146 = objc_msgSend(v143, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v145, 1, &v222);

        id v147 = v222;
        if (v146)
        {
          v148 = (void *)sub_1D76F7C44();
          unint64_t v150 = v149;

          id v222 = v148;
          unint64_t v223 = v150;
          LOBYTE(v219) = 3;
          sub_1D76BBB34();
          sub_1D76F8B84();
          sub_1D7699E0C((uint64_t)v148, v150);
        }
        else
        {
          v151 = v147;
          v152 = (void *)sub_1D76F7B94();

          swift_willThrow();
          sub_1D76F82B4();
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBA33F30);
          uint64_t v153 = swift_allocObject();
          *(_OWORD *)(v153 + 16) = v186;
          id v222 = v152;
          id v154 = v152;
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F40);
          uint64_t v155 = sub_1D76F8044();
          uint64_t v157 = v156;
          *(void *)(v153 + 56) = v144;
          *(void *)(v153 + 64) = sub_1D76B6EA0();
          *(void *)(v153 + 32) = v155;
          *(void *)(v153 + 40) = v157;
          sub_1D76BBA90(0, (unint64_t *)&qword_1EA83A920);
          v158 = (void *)sub_1D76F8394();
          sub_1D76F7D84();
          swift_bridgeObjectRelease();
        }
        return swift_bridgeObjectRelease();
      }
      id v80 = v222;
      sub_1D769B2A0(v193, &v219);
      sub_1D769A9C4((uint64_t)&v219, (uint64_t)&v209);
      swift_bridgeObjectRetain();
      if (swift_dynamicCast())
      {
        *(void *)&long long v209 = v80;
        *((void *)&v209 + 1) = v79;
        sub_1D76F8714();
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v219);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        uint64_t v71 = v191;
      }
      else
      {
        sub_1D769A9C4((uint64_t)&v219, (uint64_t)&v209);
        if (swift_dynamicCast())
        {
          *(void *)&long long v209 = v80;
          *((void *)&v209 + 1) = v79;
          sub_1D76F8724();
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v219);
          swift_bridgeObjectRelease_n();
        }
        else
        {
          int64_t v190 = v69;
          sub_1D769A9C4((uint64_t)&v219, (uint64_t)&v209);
          sub_1D76BBA90(0, &qword_1EA83A7E0);
          if (swift_dynamicCast())
          {
            uint64_t v95 = (void *)v203;
            if (CFNumberIsFloatType((CFNumberRef)v203))
            {
              objc_msgSend(v95, sel_doubleValue);
              *(void *)&long long v209 = v80;
              *((void *)&v209 + 1) = v79;
              sub_1D76F8734();
              __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v219);
              swift_bridgeObjectRelease_n();

              goto LABEL_118;
            }
            v129 = (void *)sub_1D76F8384();
            id v130 = objc_msgSend(v95, sel_compare_, v129);

            if (v130 == (id)-1)
            {
              objc_msgSend(v95, sel_longLongValue);
              *(void *)&long long v209 = v80;
              *((void *)&v209 + 1) = v79;
              sub_1D76F8764();
            }
            else
            {
              objc_msgSend(v95, sel_unsignedLongLongValue);
              *(void *)&long long v209 = v80;
              *((void *)&v209 + 1) = v79;
              sub_1D76F8774();
            }
            int64_t v69 = v190;
            __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v219);
            swift_bridgeObjectRelease_n();

            uint64_t v71 = v191;
          }
          else
          {
            sub_1D769A9C4((uint64_t)&v219, (uint64_t)&v209);
            uint64_t v111 = (uint64_t)v178;
            uint64_t v112 = v180;
            char v113 = swift_dynamicCast();
            v114 = *v177;
            uint64_t v115 = (uint64_t)v179;
            if (v113)
            {
              v114(v111, 0, 1, v112);
              if ((*v173)(v111, 1, v112) == 1) {
                goto LABEL_101;
              }
              v116 = v171;
              uint64_t v117 = v111;
              uint64_t v118 = v180;
              (*v168)(v171, v117, v180);
              *(void *)&long long v209 = v80;
              *((void *)&v209 + 1) = v79;
              sub_1D76BBBCC(&qword_1EA83A840, MEMORY[0x1E4F276F0]);
              sub_1D76F8754();
              swift_bridgeObjectRelease();
              (*v167)(v116, v118);
              __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v219);
              swift_bridgeObjectRelease();
LABEL_104:
              unint64_t v62 = v182;
              int64_t v69 = v190;
            }
            else
            {
              v114(v111, 1, 1, v112);
LABEL_101:
              sub_1D769AC0C(v111, &qword_1EA83A740);
              sub_1D769A9C4((uint64_t)&v219, (uint64_t)&v209);
              int v119 = swift_dynamicCast();
              v120 = *v175;
              if (!v119)
              {
                v120(v115, 1, 1, v70);
                unint64_t v62 = v182;
                int64_t v69 = v190;
                goto LABEL_108;
              }
              v120(v115, 0, 1, v70);
              int v121 = (*v170)(v115, 1, v70);
              unint64_t v62 = v182;
              int64_t v69 = v190;
              if (v121 == 1)
              {
LABEL_108:
                sub_1D769AC0C(v115, &qword_1EBA34390);
                sub_1D769A9C4((uint64_t)&v219, (uint64_t)&v209);
                __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F40);
                if (swift_dynamicCast())
                {
                  v131 = (void *)v203;
                  v132 = (void *)sub_1D76F7B84();
                  *(void *)&long long v209 = v80;
                  *((void *)&v209 + 1) = v79;
                  *(void *)&long long v203 = v132;
                  sub_1D76BBB88(&qword_1EA83A838, &qword_1EA83A808);
                  sub_1D76BA164();
                  sub_1D76F8B84();
                  swift_bridgeObjectRelease();

                  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v219);
                  swift_bridgeObjectRelease();
                  goto LABEL_117;
                }
                swift_bridgeObjectRelease();
                unint64_t v133 = sub_1D769C348(MEMORY[0x1E4FBC860]);
                sub_1D76B10C8();
                v134 = (void *)swift_allocError();
                static XPCError.unknown(_:from:userInfo:)(0xD000000000000010, v169, 0, v133, v135);
                swift_bridgeObjectRelease();
                swift_willThrow();
                if ((v80 != (id)0xD00000000000001DLL || v79 != v185) && (sub_1D76F89E4() & 1) == 0)
                {
                  int64_t v190 = v69;
                  sub_1D769A9C4((uint64_t)&v219, (uint64_t)&v209);
                  id v103 = v134;
                  sub_1D76F8044();
                  *(void *)&long long v209 = v80;
                  *((void *)&v209 + 1) = v79;
                  swift_bridgeObjectRetain();
                  sub_1D76F8714();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  sub_1D76F82D4();
                  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBA33F30);
                  uint64_t v122 = swift_allocObject();
                  *(_OWORD *)(v122 + 16) = v174;
                  uint64_t v123 = MEMORY[0x1E4FBB1A0];
                  *(void *)(v122 + 56) = MEMORY[0x1E4FBB1A0];
                  unint64_t v124 = sub_1D76B6EA0();
                  *(void *)(v122 + 64) = v124;
                  *(void *)(v122 + 32) = v80;
                  *(void *)(v122 + 40) = v79;
                  *(void *)&long long v209 = v134;
                  id v125 = v134;
                  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F40);
                  uint64_t v126 = sub_1D76F8044();
                  *(void *)(v122 + 96) = v123;
                  *(void *)(v122 + 104) = v124;
                  *(void *)(v122 + 72) = v126;
                  *(void *)(v122 + 80) = v127;
                  sub_1D76BBA90(0, (unint64_t *)&qword_1EA83A920);
                  v128 = (void *)sub_1D76F8394();
                  sub_1D76F7D84();
                  swift_bridgeObjectRelease();

                  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v219);
                  uint64_t v70 = v188;
                  uint64_t v71 = v191;
                  goto LABEL_104;
                }
                id v81 = v134;
                swift_bridgeObjectRelease();
                uint64_t v82 = sub_1D76F7FF4();
                unint64_t v84 = v196;
                if (*(void *)(v196 + 16) && (unint64_t v85 = sub_1D769B2B0(v82, v83), (v86 & 1) != 0))
                {
                  sub_1D769A9C4(*(void *)(v84 + 56) + 32 * v85, (uint64_t)&v209);
                }
                else
                {
                  long long v209 = 0u;
                  long long v210 = 0u;
                }
                swift_bridgeObjectRelease();
                uint64_t v87 = *((void *)&v210 + 1);
                sub_1D769AC0C((uint64_t)&v209, (uint64_t *)&unk_1EBA33F78);
                if (v87)
                {
                  sub_1D76F82D4();
                  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBA33F30);
                  int64_t v88 = v69;
                  uint64_t v89 = swift_allocObject();
                  *(_OWORD *)(v89 + 16) = v186;
                  *(void *)&long long v209 = v134;
                  id v90 = v134;
                  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F40);
                  uint64_t v91 = sub_1D76F8044();
                  uint64_t v93 = v92;
                  *(void *)(v89 + 56) = MEMORY[0x1E4FBB1A0];
                  *(void *)(v89 + 64) = sub_1D76B6EA0();
                  *(void *)(v89 + 32) = v91;
                  *(void *)(v89 + 40) = v93;
                  uint64_t v70 = v188;
                  sub_1D76BBA90(0, (unint64_t *)&qword_1EA83A920);
                  uint64_t v94 = (void *)sub_1D76F8394();
                  sub_1D76F7D84();
                  int64_t v69 = v88;
                  swift_bridgeObjectRelease();

                  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v219);
                  uint64_t v71 = v191;
                }
                else
                {
                  unint64_t v96 = v196;
                  if (!*(void *)(v196 + 16)
                    || (unint64_t v97 = sub_1D769B2B0(0xD00000000000001DLL, v183 | 0x8000000000000000), (v98 & 1) == 0)
                    || (sub_1D769A9C4(*(void *)(v96 + 56) + 32 * v97, (uint64_t)&v209),
                        __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A830),
                        (swift_dynamicCast() & 1) == 0))
                  {
                    int64_t v104 = v69;
                    goto LABEL_96;
                  }
                  if (*(void *)(v203 + 16))
                  {
                    int64_t v190 = v69;
                    uint64_t v99 = *(void **)(v203 + 32);
                    id v100 = v99;
                    swift_bridgeObjectRelease();
                    uint64_t v101 = (void *)sub_1D76F7B84();
                    *(void *)&long long v209 = sub_1D76F7FF4();
                    *((void *)&v209 + 1) = v102;
                    *(void *)&long long v203 = v101;
                    sub_1D76BBB88(&qword_1EA83A838, &qword_1EA83A808);
                    sub_1D76BA164();
                    sub_1D76F8B84();
                    swift_bridgeObjectRelease();

                    sub_1D76F82D4();
                    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBA33F30);
                    uint64_t v137 = swift_allocObject();
                    *(_OWORD *)(v137 + 16) = v186;
                    *(void *)&long long v209 = v134;
                    id v138 = v134;
                    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F40);
                    uint64_t v139 = sub_1D76F8044();
                    uint64_t v141 = v140;
                    *(void *)(v137 + 56) = MEMORY[0x1E4FBB1A0];
                    *(void *)(v137 + 64) = sub_1D76B6EA0();
                    *(void *)(v137 + 32) = v139;
                    *(void *)(v137 + 40) = v141;
                    sub_1D76BBA90(0, (unint64_t *)&qword_1EA83A920);
                    v142 = (void *)sub_1D76F8394();
                    sub_1D76F7D84();

                    swift_bridgeObjectRelease();
                    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v219);
LABEL_117:
                    uint64_t v70 = v188;
LABEL_118:
                    int64_t v69 = v190;
                    uint64_t v71 = v191;
                  }
                  else
                  {
                    int64_t v104 = v69;
                    swift_bridgeObjectRelease();
LABEL_96:
                    sub_1D76F82B4();
                    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBA33F30);
                    uint64_t v105 = swift_allocObject();
                    *(_OWORD *)(v105 + 16) = v186;
                    *(void *)&long long v209 = v134;
                    id v106 = v134;
                    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F40);
                    uint64_t v107 = sub_1D76F8044();
                    uint64_t v109 = v108;
                    *(void *)(v105 + 56) = MEMORY[0x1E4FBB1A0];
                    *(void *)(v105 + 64) = sub_1D76B6EA0();
                    *(void *)(v105 + 32) = v107;
                    *(void *)(v105 + 40) = v109;
                    sub_1D76BBA90(0, (unint64_t *)&qword_1EA83A920);
                    v110 = (void *)sub_1D76F8394();
                    sub_1D76F7D84();
                    swift_bridgeObjectRelease();

                    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v219);
                    uint64_t v70 = v188;
                    uint64_t v71 = v191;
                    int64_t v69 = v104;
                  }
                }
              }
              else
              {
                (*v166)(v71, v115, v70);
                *(void *)&long long v209 = v80;
                *((void *)&v209 + 1) = v79;
                sub_1D76BBBCC(&qword_1EA83A708, MEMORY[0x1E4F27990]);
                sub_1D76F8754();
                swift_bridgeObjectRelease();
                (*v165)(v71, v70);
                __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v219);
                swift_bridgeObjectRelease();
              }
            }
          }
        }
      }
    }
    int64_t v77 = v69 + 1;
    if (__OFADD__(v69, 1))
    {
      __break(1u);
LABEL_134:
      __break(1u);
    }
    if (v77 >= v184) {
      goto LABEL_71;
    }
    unint64_t v78 = *(void *)(v181 + 8 * v77);
    if (v78)
    {
LABEL_66:
      unint64_t v68 = (v78 - 1) & v78;
      unint64_t v73 = __clz(__rbit64(v78)) + (v77 << 6);
      int64_t v69 = v77;
      goto LABEL_62;
    }
    v69 += 2;
    if (v77 + 1 >= v184)
    {
      int64_t v69 = v77;
LABEL_71:
      unint64_t v68 = 0;
      long long v220 = 0u;
      long long v221 = 0u;
      long long v219 = 0u;
      goto LABEL_72;
    }
    unint64_t v78 = *(void *)(v181 + 8 * v69);
    if (v78)
    {
LABEL_69:
      int64_t v77 = v69;
      goto LABEL_66;
    }
    int64_t v136 = v77 + 2;
    if (v77 + 2 >= v184) {
      goto LABEL_71;
    }
    unint64_t v78 = *(void *)(v181 + 8 * v136);
    if (!v78)
    {
      int64_t v69 = v77 + 3;
      if (v77 + 3 >= v184)
      {
        int64_t v69 = v77 + 2;
        goto LABEL_71;
      }
      unint64_t v78 = *(void *)(v181 + 8 * v69);
      if (v78) {
        goto LABEL_69;
      }
      int64_t v136 = v77 + 4;
      if (v77 + 4 >= v184) {
        goto LABEL_71;
      }
      unint64_t v78 = *(void *)(v181 + 8 * v136);
      if (!v78)
      {
        while (1)
        {
          int64_t v77 = v136 + 1;
          if (__OFADD__(v136, 1)) {
            goto LABEL_134;
          }
          if (v77 >= v184) {
            break;
          }
          unint64_t v78 = *(void *)(v181 + 8 * v77);
          ++v136;
          if (v78) {
            goto LABEL_66;
          }
        }
        int64_t v69 = v161;
        goto LABEL_71;
      }
    }
    int64_t v77 = v136;
    goto LABEL_66;
  }
  return swift_bridgeObjectRelease();
}

uint64_t KeyedEncodingContainerProtocol.encode(_:forKey:)()
{
  return sub_1D76F8B84();
}

uint64_t NSError.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A758);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188788](v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D76BA1B8();
  sub_1D76F8DA4();
  id v9 = objc_msgSend(v3, sel_domain);
  sub_1D76F7FF4();

  v11[15] = 0;
  sub_1D76F8714();
  if (v2)
  {
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    objc_msgSend(v3, sel_code);
    v11[14] = 1;
    sub_1D76F8744();
    sub_1D76B7E4C((uint64_t)v8);
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

void *KeyedDecodingContainerProtocol.decode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D76BA540(a1, a2, a3, a4, MEMORY[0x1E4FBBF50]);
}

void *NSError.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A770);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188788](v3);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D76BA1B8();
  sub_1D76F8D94();
  if (!v1)
  {
    char v15 = 0;
    sub_1D76F8664();
    char v14 = 1;
    uint64_t v13 = sub_1D76F8694();
    sub_1D76BA700();
    id v9 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    uint64_t v10 = (void *)sub_1D76F7FC4();
    swift_bridgeObjectRelease();
    uint64_t v11 = (void *)sub_1D76F7EC4();
    swift_bridgeObjectRelease();
    uint64_t v7 = objc_msgSend(v9, sel_initWithDomain_code_userInfo_, v10, v13, v11);

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return v7;
}

id NSErrorContainer.rawValue.getter()
{
  return *v0;
}

void NSErrorContainer.rawValue.setter(void *a1)
{
  id *v1 = a1;
}

uint64_t (*NSErrorContainer.rawValue.modify())()
{
  return nullsub_1;
}

void __swiftcall NSErrorContainer.init(rawValue:)(Mercury::NSErrorContainer *__return_ptr retstr, NSError *rawValue)
{
  retstr->rawValue.super.isa = (Class)rawValue;
}

unint64_t sub_1D76BA164()
{
  unint64_t result = qword_1EA83A750;
  if (!qword_1EA83A750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83A750);
  }
  return result;
}

unint64_t sub_1D76BA1B8()
{
  unint64_t result = qword_1EA83A760;
  if (!qword_1EA83A760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83A760);
  }
  return result;
}

unint64_t sub_1D76BA20C()
{
  unint64_t result = qword_1EA83A768;
  if (!qword_1EA83A768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83A768);
  }
  return result;
}

uint64_t NSErrorContainer.encode(to:)(void *a1)
{
  return NSError.encode(to:)(a1);
}

uint64_t NSErrorContainer.init(from:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_1D76BBA90(0, (unint64_t *)&qword_1EA83A778);
  sub_1D76B116C(a1, (uint64_t)v7);
  uint64_t v5 = NSError.init(from:)(v7);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

void *sub_1D76BA30C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

id sub_1D76BA318@<X0>(void **a1@<X8>)
{
  uint64_t v2 = *v1;
  *a1 = *v1;
  return v2;
}

uint64_t sub_1D76BA324@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_1D76BBA90(0, (unint64_t *)&qword_1EA83A778);
  sub_1D76B116C(a1, (uint64_t)v7);
  uint64_t v5 = NSError.init(from:)(v7);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_1D76BA3AC(void *a1)
{
  return NSError.encode(to:)(a1);
}

uint64_t KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)()
{
  return sub_1D76F8B74();
}

uint64_t KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)()
{
  sub_1D76BA20C();
  uint64_t result = sub_1D76F8A94();
  if (!v0) {
    return v2;
  }
  return result;
}

uint64_t TopLevelEncoder.encode(_:)()
{
  return sub_1D76F7E54();
}

void *TopLevelDecoder.decode(_:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D76BA540(a1, a2, a3, a4, MEMORY[0x1E4F1AB58]);
}

void *sub_1D76BA540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *(*a5)(uint64_t *__return_ptr, ValueMetadata *, uint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t))
{
  unint64_t v10 = sub_1D76BA20C();
  uint64_t result = a5(&v12, &type metadata for NSErrorContainer, a2, &type metadata for NSErrorContainer, v10, a3, a4);
  if (!v5) {
    return (void *)v12;
  }
  return result;
}

uint64_t sub_1D76BA5BC()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A7C8);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1D76FB2A0;
  *(void *)(v0 + 32) = sub_1D76BBA90(0, &qword_1EA83A7D0);
  *(void *)(v0 + 40) = sub_1D76BBA90(0, &qword_1EA83A7D8);
  *(void *)(v0 + 48) = sub_1D76BBA90(0, &qword_1EA83A900);
  *(void *)(v0 + 56) = sub_1D76BBA90(0, &qword_1EA83A7E0);
  *(void *)(v0 + 64) = sub_1D76BBA90(0, &qword_1EA83A7E8);
  *(void *)(v0 + 72) = sub_1D76BBA90(0, &qword_1EA83A7F0);
  *(void *)(v0 + 80) = sub_1D76BBA90(0, &qword_1EA83A7F8);
  *(void *)(v0 + 88) = sub_1D76BBA90(0, &qword_1EA83A800);
  *(void *)(v0 + 96) = sub_1D76BBA90(0, (unint64_t *)&qword_1EA83A778);
  return v0;
}

unint64_t sub_1D76BA700()
{
  uint64_t v52 = *MEMORY[0x1E4F143C0];
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A798);
  uint64_t v0 = *(void *)(v45 - 8);
  MEMORY[0x1F4188788](v45);
  uint64_t v46 = (char *)&v42 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v48) = 3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A770);
  sub_1D76BBB88(&qword_1EA83A7A0, &qword_1EA83A770);
  sub_1D76BB9E8();
  sub_1D76F8A94();
  unint64_t v12 = *((void *)&v50 + 1);
  if (*((void *)&v50 + 1) >> 60 != 15)
  {
    uint64_t v13 = v50;
    sub_1D76BBA90(0, (unint64_t *)&unk_1EA83A8A0);
    sub_1D76BA5BC();
    sub_1D76F82F4();
    swift_bridgeObjectRelease();
    if (MetatypeMetadata)
    {
      sub_1D769B2A0(&v48, &v50);
      sub_1D769A9C4((uint64_t)&v50, (uint64_t)&v48);
      uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A7C0);
      if (swift_dynamicCast())
      {
        sub_1D7699DF8(v13, v12);
        unint64_t v10 = v47;
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v50);
        return (unint64_t)v10;
      }
      __swift_project_boxed_opaque_existential_1(&v50, v51);
      uint64_t DynamicType = swift_getDynamicType();
      uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
      *(void *)&long long v48 = DynamicType;
      sub_1D76F8504();
      char v37 = (void *)swift_allocError();
      unint64_t v43 = v39;
      uint64_t v44 = v13;
      uint64_t v40 = sub_1D76F8A84();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34C78);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1D76FA300;
      *(void *)(inited + 56) = &_s10_CodingKeyON;
      *(void *)(inited + 64) = sub_1D76BA1B8();
      *(unsigned char *)(inited + 32) = 3;
      uint64_t v47 = (void *)v40;
      sub_1D76F76A8(inited);
      static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)(v36, (uint64_t)&v48, 0, v43);
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v48);
      swift_willThrow();
      sub_1D7699DF8(v44, v12);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v50);
    }
    else
    {
      sub_1D769AC0C((uint64_t)&v48, (uint64_t *)&unk_1EBA33F78);
      LOBYTE(v50) = 3;
      sub_1D76F8504();
      char v37 = (void *)swift_allocError();
      sub_1D76F84D4();
      swift_willThrow();
      sub_1D7699DF8(v13, v12);
    }
    sub_1D76F82B4();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBA33F30);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_1D76FA300;
    *(void *)&long long v50 = v37;
    id v3 = v37;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F40);
    uint64_t v4 = sub_1D76F8044();
    uint64_t v6 = v5;
    *(void *)(v2 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v2 + 64) = sub_1D76B6EA0();
    *(void *)(v2 + 32) = v4;
    *(void *)(v2 + 40) = v6;
    sub_1D76BBA90(0, (unint64_t *)&qword_1EA83A920);
    uint64_t v7 = (void *)sub_1D76F8394();
    sub_1D76F7D84();
    swift_bridgeObjectRelease();
  }
  LOBYTE(v50) = 2;
  char v8 = sub_1D76F8AB4();
  id v9 = v46;
  if ((v8 & 1) == 0) {
    return sub_1D769B168(MEMORY[0x1E4FBC860]);
  }
  LOBYTE(v50) = 2;
  sub_1D76BBA3C();
  sub_1D76F8A74();
  uint64_t v44 = v0;
  uint64_t v14 = v45;
  char v15 = (void *)sub_1D76F86D4();
  uint64_t v16 = v15[2];
  unint64_t v43 = v15;
  if (!v16)
  {
    unint64_t v10 = (void *)MEMORY[0x1E4FBC868];
LABEL_29:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v9, v14);
    return (unint64_t)v10;
  }
  uint64_t v17 = v15 + 5;
  unint64_t v10 = (void *)MEMORY[0x1E4FBC868];
  while (1)
  {
    uint64_t v20 = *v17;
    *(void *)&long long v50 = *(v17 - 1);
    uint64_t v19 = v50;
    *((void *)&v50 + 1) = v20;
    swift_bridgeObjectRetain();
    uint64_t v21 = sub_1D76F8664();
    uint64_t v51 = MEMORY[0x1E4FBB1A0];
    *(void *)&long long v50 = v21;
    *((void *)&v50 + 1) = v22;
    sub_1D769B2A0(&v50, &v48);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v47 = v10;
    unint64_t v25 = sub_1D769B2B0(v19, v20);
    uint64_t v26 = v10[2];
    BOOL v27 = (v24 & 1) == 0;
    uint64_t v28 = v26 + v27;
    if (__OFADD__(v26, v27))
    {
      __break(1u);
      __break(1u);
LABEL_33:
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
    }
    char v29 = v24;
    if (v10[3] < v28) {
      break;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      id v9 = v46;
      unint64_t v10 = v47;
      if (v24) {
        goto LABEL_11;
      }
    }
    else
    {
      sub_1D76F5E48();
      id v9 = v46;
      unint64_t v10 = v47;
      if (v29)
      {
LABEL_11:
        uint64_t v18 = (_OWORD *)(v10[7] + 32 * v25);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
        sub_1D769B2A0(&v48, v18);
        goto LABEL_12;
      }
    }
LABEL_20:
    v10[(v25 >> 6) + 8] |= 1 << v25;
    unint64_t v32 = (uint64_t *)(v10[6] + 16 * v25);
    *unint64_t v32 = v19;
    v32[1] = v20;
    sub_1D769B2A0(&v48, (_OWORD *)(v10[7] + 32 * v25));
    uint64_t v33 = v10[2];
    BOOL v34 = __OFADD__(v33, 1);
    uint64_t v35 = v33 + 1;
    if (v34) {
      goto LABEL_33;
    }
    v10[2] = v35;
    swift_bridgeObjectRetain();
LABEL_12:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v14 = v45;
    v17 += 2;
    if (!--v16) {
      goto LABEL_29;
    }
  }
  sub_1D76F4CD4(v28, isUniquelyReferenced_nonNull_native);
  unint64_t v30 = sub_1D769B2B0(v19, v20);
  if ((v29 & 1) == (v31 & 1))
  {
    unint64_t v25 = v30;
    id v9 = v46;
    unint64_t v10 = v47;
    if (v29) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
  unint64_t result = sub_1D76F8C84();
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for NSErrorContainer()
{
  return &type metadata for NSErrorContainer;
}

unsigned char *_s10_CodingKeyOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D76BB708);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *_s10_CodingKeyOMa()
{
  return &_s10_CodingKeyON;
}

unint64_t sub_1D76BB744()
{
  unint64_t result = qword_1EA83A780;
  if (!qword_1EA83A780)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83A780);
  }
  return result;
}

unint64_t sub_1D76BB79C()
{
  unint64_t result = qword_1EA83A788;
  if (!qword_1EA83A788)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83A788);
  }
  return result;
}

unint64_t sub_1D76BB7F4()
{
  unint64_t result = qword_1EA83A790;
  if (!qword_1EA83A790)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83A790);
  }
  return result;
}

uint64_t sub_1D76BB848(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E69616D6F64 && a2 == 0xE600000000000000;
  if (v2 || (sub_1D76F89E4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701080931 && a2 == 0xE400000000000000 || (sub_1D76F89E4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6F666E4972657375 && a2 == 0xE800000000000000 || (sub_1D76F89E4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x80000001D76FD990)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = sub_1D76F89E4();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

unint64_t sub_1D76BB9E8()
{
  unint64_t result = qword_1EA83A7A8;
  if (!qword_1EA83A7A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83A7A8);
  }
  return result;
}

unint64_t sub_1D76BBA3C()
{
  unint64_t result = qword_1EA83A7B0;
  if (!qword_1EA83A7B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83A7B0);
  }
  return result;
}

uint64_t sub_1D76BBA90(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1D76BBACC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBA33E80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1D76BBB34()
{
  unint64_t result = qword_1EA83A828;
  if (!qword_1EA83A828)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83A828);
  }
  return result;
}

uint64_t sub_1D76BBB88(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D76BBBCC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D76BBC14(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void *_s18_UserInfoCodingKeyVwCP(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *_s18_UserInfoCodingKeyVwca(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *_s18_UserInfoCodingKeyVwta(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s18_UserInfoCodingKeyVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s18_UserInfoCodingKeyVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *_s18_UserInfoCodingKeyVMa()
{
  return &_s18_UserInfoCodingKeyVN;
}

unint64_t sub_1D76BBD6C()
{
  unint64_t result = qword_1EA83A848;
  if (!qword_1EA83A848)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83A848);
  }
  return result;
}

unint64_t sub_1D76BBDC4()
{
  unint64_t result = qword_1EA83A850;
  if (!qword_1EA83A850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83A850);
  }
  return result;
}

uint64_t sub_1D76BBE1C()
{
  uint64_t v1 = sub_1D76F7C94();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x1F4188788](v1);
  uint64_t v5 = (char *)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188788](v3);
  uint64_t v7 = (char *)v28 - v6;
  sub_1D76F7C84();
  if (v8 < -9223372040.0)
  {
    if (qword_1EA83A4B0 != -1) {
      swift_once();
    }
    uint64_t v9 = sub_1D76F7DB4();
    __swift_project_value_buffer(v9, (uint64_t)qword_1EA83A858);
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v7, v0, v1);
    unint64_t v10 = sub_1D76F7D94();
    os_log_type_t v11 = sub_1D76F82B4();
    if (os_log_type_enabled(v10, v11))
    {
      unint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      uint64_t v30 = v13;
      *(_DWORD *)unint64_t v12 = 136315138;
      sub_1D76BCAC4();
      uint64_t v14 = sub_1D76F87A4();
      uint64_t v29 = sub_1D76BC3E0(v14, v15, &v30);
      sub_1D76F83B4();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v1);
      _os_log_impl(&dword_1D7690000, v10, v11, "Provided date '%s' was outside of the expressible range of libxpc. It has been clipped to '1677-09-21 00:12:44'.", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D9476C10](v13, -1, -1);
      MEMORY[0x1D9476C10](v12, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v1);
    }

    return 0x8000000000000000;
  }
  sub_1D76F7C84();
  if (v16 > 9223372040.0)
  {
    if (qword_1EA83A4B0 != -1) {
      swift_once();
    }
    uint64_t v17 = 0x7FFFFFFFC4653800;
    uint64_t v18 = sub_1D76F7DB4();
    __swift_project_value_buffer(v18, (uint64_t)qword_1EA83A858);
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v5, v0, v1);
    uint64_t v19 = sub_1D76F7D94();
    os_log_type_t v20 = sub_1D76F82B4();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      uint64_t v30 = v22;
      *(_DWORD *)uint64_t v21 = 136315138;
      v28[1] = v21 + 4;
      sub_1D76BCAC4();
      uint64_t v23 = sub_1D76F87A4();
      uint64_t v29 = sub_1D76BC3E0(v23, v24, &v30);
      sub_1D76F83B4();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
      _os_log_impl(&dword_1D7690000, v19, v20, "Provided date '%s' was outside of the expressible range of libxpc. It has been clipped to '2262-04-11 23:47:15'.", v21, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D9476C10](v22, -1, -1);
      MEMORY[0x1D9476C10](v21, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
    }

    return v17;
  }
  uint64_t result = sub_1D76F7C84();
  double v27 = v26 * 1000000000.0;
  if ((~*(void *)&v27 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (v27 <= -9.22337204e18)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v27 < 9.22337204e18) {
    return (uint64_t)v27;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_1D76BC2D8()
{
  uint64_t v0 = sub_1D76F7DB4();
  __swift_allocate_value_buffer(v0, qword_1EA83A858);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EA83A858);
  return sub_1D76F7DA4();
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_1D76BC394(uint64_t result, unsigned char **a2)
{
  uint64_t v2 = *a2;
  unsigned char *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_1D76BC3A4(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t sub_1D76BC3E0(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_1D76BC4B4(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_1D769A9C4((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x1E4FBB9B0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_1D769A9C4((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
  return v7;
}

uint64_t sub_1D76BC4B4(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_1D76F83C4();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_1D76BC670(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = sub_1D76F8534();
  if (!v8)
  {
    sub_1D76F85A4();
    __break(1u);
LABEL_17:
    uint64_t result = sub_1D76F8614();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_1D76BC670(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_1D76BC708(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1D76BC964(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1D76BC964(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_1D76BC708(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_1D76BC880(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = sub_1D76F8474();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      sub_1D76F85A4();
      __break(1u);
LABEL_10:
      uint64_t v2 = sub_1D76F80C4();
      if (!v2) {
        return MEMORY[0x1E4FBC860];
      }
    }
    sub_1D76F8614();
    __break(1u);
LABEL_14:
    uint64_t result = sub_1D76F85A4();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC860];
  }
  return result;
}

void *sub_1D76BC880(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A878);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_1D76BC8E8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = sub_1D76F8114();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = MEMORY[0x1D9475500](15, a1 >> 16);
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

uint64_t sub_1D76BC964(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A878);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_1D76F8614();
  __break(1u);
  return result;
}

unsigned char **sub_1D76BCAB4(unsigned char **result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4 = *result;
  unsigned char *v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

unint64_t sub_1D76BCAC4()
{
  unint64_t result = qword_1EA83A870;
  if (!qword_1EA83A870)
  {
    sub_1D76F7C94();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83A870);
  }
  return result;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_1D76BCB84()
{
  swift_release();
  swift_release();

  return MEMORY[0x1F4186488](v0, 40, 7);
}

uint64_t sub_1D76BCBC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  v14[1] = *(pthread_t *)MEMORY[0x1E4F143C0];
  uint64_t v6 = sub_1D76F7A64();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188788](v6);
  int64_t v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v3 + 16) = 0;
  type metadata accessor for POSIXThread.Context();
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = v3;
  v10[3] = a1;
  v10[4] = a2;
  v14[0] = 0;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t result = pthread_create(v14, 0, (void *(__cdecl *)(void *))sub_1D76BCDAC, v10);
  if (result)
  {
    int v12 = result;
    swift_release();
    swift_release();
    sub_1D769C348(MEMORY[0x1E4FBC860]);
    POSIXError.init(uncheckedCode:userInfo:)(v12, (uint64_t)v9);
    sub_1D76F7A44();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    swift_willThrow();
    swift_release();
    swift_release();
    return v3;
  }
  pthread_t v13 = v14[0];
  if (v14[0])
  {
    swift_release();
    swift_release();
    *(void *)(v3 + 16) = v13;
    return v3;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D76BCDAC(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 24);
  uint64_t v2 = swift_retain();
  v1(v2);
  swift_release();
  swift_release();
  return 0;
}

uint64_t sub_1D76BCDFC()
{
  return MEMORY[0x1F4186488](v0, 24, 7);
}

uint64_t type metadata accessor for POSIXThread()
{
  return self;
}

uint64_t type metadata accessor for POSIXThread.Context()
{
  return self;
}

uint64_t RemoteDevice.__allocating_init(underlyingDevice:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

void sub_1D76BCE88(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t RemoteDevice.Identity.hash(into:)()
{
  sub_1D76F7D04();
  sub_1D76BDBA4((unint64_t *)&qword_1EA83A710, MEMORY[0x1E4F27990]);
  sub_1D76F7F64();
  type metadata accessor for RemoteDevice.Identity();
  swift_bridgeObjectRetain();
  sub_1D76F8094();

  return swift_bridgeObjectRelease();
}

uint64_t static RemoteDevice.Identity.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((sub_1D76F7CC4() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = *(int *)(type metadata accessor for RemoteDevice.Identity() + 20);
  uint64_t v5 = *(void *)(a1 + v4);
  uint64_t v6 = *(void *)(a1 + v4 + 8);
  uint64_t v7 = (void *)(a2 + v4);
  if (v5 == *v7 && v6 == v7[1]) {
    return 1;
  }

  return sub_1D76F89E4();
}

uint64_t RemoteDevice.Identity.hashValue.getter()
{
  return sub_1D76F8D54();
}

uint64_t sub_1D76BD0E4()
{
  return sub_1D76F8D54();
}

uint64_t sub_1D76BD1A4()
{
  sub_1D76F7D04();
  sub_1D76BDBA4((unint64_t *)&qword_1EA83A710, MEMORY[0x1E4F27990]);
  sub_1D76F7F64();
  swift_bridgeObjectRetain();
  sub_1D76F8094();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1D76BD258()
{
  return sub_1D76F8D54();
}

uint64_t sub_1D76BD314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((sub_1D76F7CC4() & 1) == 0) {
    return 0;
  }
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = *(void *)(a1 + v6);
  uint64_t v8 = *(void *)(a1 + v6 + 8);
  int64_t v9 = (void *)(a2 + v6);
  if (v7 == *v9 && v8 == v9[1]) {
    return 1;
  }

  return sub_1D76F89E4();
}

uint64_t static RemoteDevice.loopbackDevice()()
{
  swift_beginAccess();
  uint64_t result = remote_device_copy_unique_of_type();
  if (result)
  {
    uint64_t v1 = result;
    type metadata accessor for RemoteDevice();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v1;
  }
  return result;
}

uint64_t RemoteDevice.init(underlyingDevice:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

uint64_t type metadata accessor for RemoteDevice.Identity()
{
  uint64_t result = qword_1EA83A888;
  if (!qword_1EA83A888) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for RemoteDevice()
{
  return self;
}

BOOL sub_1D76BD47C()
{
  int state = remote_device_get_state();
  swift_beginAccess();
  return state == dword_1EA83A944;
}

uint64_t sub_1D76BD4D4()
{
  return remote_device_get_state();
}

uint64_t sub_1D76BD4DC@<X0>(uint64_t a1@<X8>)
{
  sub_1D76BD5D0(a1);
  remote_device_get_name();
  uint64_t v2 = sub_1D76F80B4();
  uint64_t v4 = v3;
  uint64_t result = type metadata accessor for RemoteDevice.Identity();
  uint64_t v6 = (uint64_t *)(a1 + *(int *)(result + 20));
  *uint64_t v6 = v2;
  v6[1] = v4;
  return result;
}

uint64_t sub_1D76BD530()
{
  remote_device_get_name();

  return sub_1D76F80B4();
}

uint64_t sub_1D76BD55C()
{
  uint64_t v0 = (void *)remote_device_copy_property();
  if (!v0) {
    return 0;
  }
  if (!xpc_string_get_string_ptr(v0))
  {
    swift_unknownObjectRelease();
    return 0;
  }
  uint64_t v1 = sub_1D76F80B4();
  swift_unknownObjectRelease();
  return v1;
}

uint64_t sub_1D76BD5D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v25 = a1;
  uint64_t v42 = *MEMORY[0x1E4F143C0];
  uint64_t v1 = sub_1D76F7D04();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188788](v1);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D76F7CF4();
  unint64_t v5 = sub_1D76F7CE4();
  char v6 = v5;
  char v8 = v7;
  unint64_t v9 = v5 >> 8;
  unint64_t v10 = v5 >> 16;
  unint64_t v11 = v5 >> 24;
  unint64_t v12 = HIDWORD(v5);
  unint64_t v13 = v5 >> 40;
  unint64_t v16 = HIWORD(v5);
  unint64_t v17 = HIBYTE(v5);
  unint64_t v18 = v7 >> 8;
  unint64_t v19 = v7 >> 16;
  unint64_t v20 = v7 >> 24;
  unint64_t v21 = HIDWORD(v7);
  unint64_t v23 = v7 >> 40;
  unint64_t v24 = HIWORD(v7);
  uint64_t v14 = *(void (**)(char *, uint64_t))(v2 + 8);
  unint64_t v22 = HIBYTE(v7);
  v14(v4, v1);
  char v26 = v6;
  char v27 = v9;
  char v28 = v10;
  char v29 = v11;
  char v30 = v12;
  char v31 = v13;
  char v32 = v16;
  char v33 = v17;
  char v34 = v8;
  char v35 = v18;
  char v36 = v19;
  char v37 = v20;
  char v38 = v21;
  char v39 = v23;
  char v40 = v24;
  char v41 = v22;
  remote_device_copy_uuid();
  return sub_1D76F7CD4();
}

void sub_1D76BD7DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a2;
  *(void *)(v5 + 24) = a3;
  unint64_t v13 = sub_1D76BDAE4;
  uint64_t v14 = v5;
  uint64_t v9 = MEMORY[0x1E4F143A0];
  uint64_t v10 = 1107296256;
  unint64_t v11 = sub_1D76BCE88;
  unint64_t v12 = &block_descriptor_1;
  char v6 = _Block_copy(&v9);
  swift_retain();
  swift_release();
  remote_device_set_connected_callback();
  _Block_release(v6);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a3;
  unint64_t v13 = sub_1D76BDB04;
  uint64_t v14 = v7;
  uint64_t v9 = MEMORY[0x1E4F143A0];
  uint64_t v10 = 1107296256;
  unint64_t v11 = sub_1D76BCE88;
  unint64_t v12 = &block_descriptor_6_0;
  char v8 = _Block_copy(&v9);
  swift_retain();
  swift_release();
  remote_device_set_disconnected_callback();
  _Block_release(v8);
}

uint64_t sub_1D76BD970(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t state = remote_device_get_state();
  uint64_t result = swift_beginAccess();
  if (state == dword_1EA83A944) {
    return a2(state);
  }
  return result;
}

uint64_t sub_1D76BD9E0()
{
  sub_1D76F8054();
  uint64_t v0 = (void *)remote_device_copy_service();
  swift_release();
  if (!v0) {
    return 0;
  }
  uint64_t v1 = xpc_remote_connection_create_with_remote_service();

  return v1;
}

uint64_t RemoteDevice.deinit()
{
  return v0;
}

uint64_t RemoteDevice.__deallocating_deinit()
{
  return MEMORY[0x1F4186488](v0, 24, 7);
}

uint64_t sub_1D76BDAAC()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D76BDAE4(uint64_t a1)
{
  return sub_1D76BD970(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t sub_1D76BDB04()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 16);
  swift_beginAccess();
  return v1(dword_1EA83A948);
}

uint64_t sub_1D76BDB5C()
{
  return sub_1D76BDBA4(&qword_1EA83A880, (void (*)(uint64_t))type metadata accessor for RemoteDevice.Identity);
}

uint64_t sub_1D76BDBA4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for RemoteDevice(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for RemoteDevice);
}

uint64_t dispatch thunk of RemoteDevice.__allocating_init(underlyingDevice:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of RemoteDevice.connected.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of RemoteDevice.state.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of RemoteDevice.identity.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of RemoteDevice.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of RemoteDevice.model.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of RemoteDevice.uuid.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of RemoteDevice.setDeviceStateHandler(queue:_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of RemoteDevice.remoteConnection(forService:handlerQueue:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of RemoteDevice.withUnsafeUnderlyingRemoteDevice<A>(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t *initializeBufferWithCopyOfBuffer for RemoteDevice.Identity(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1D76F7D04();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for RemoteDevice.Identity(uint64_t a1)
{
  uint64_t v2 = sub_1D76F7D04();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for RemoteDevice.Identity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1D76F7D04();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RemoteDevice.Identity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1D76F7D04();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for RemoteDevice.Identity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1D76F7D04();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for RemoteDevice.Identity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1D76F7D04();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RemoteDevice.Identity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1D76BE100);
}

uint64_t sub_1D76BE100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1D76F7D04();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for RemoteDevice.Identity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1D76BE1D8);
}

uint64_t sub_1D76BE1D8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_1D76F7D04();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_1D76BE298()
{
  uint64_t result = sub_1D76F7D04();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1D76BE338(void *a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  swift_retain();
  uint64_t v5 = MEMORY[0x1E4FBC860];
  unint64_t v6 = sub_1D769E554(MEMORY[0x1E4FBC860]);
  uint64_t v7 = type metadata accessor for _XPCObjectEncoder();
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = 0;
  v8[3] = v4;
  v8[4] = v5;
  void v8[5] = v6;
  v13[3] = v7;
  v13[4] = sub_1D76C8D94(&qword_1EBA347A0, (void (*)(uint64_t))type metadata accessor for _XPCObjectEncoder);
  v13[0] = v8;
  swift_retain();
  NSError.encode(to:)(v13);
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v13);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v13);
    uint64_t v5 = v8[2];
    if (v5)
    {
      swift_unknownObjectRetain();
    }
    else
    {
      uint64_t v5 = sub_1D76F8524();
      swift_allocError();
      uint64_t v11 = v10;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A8C0);
      v11[3] = &type metadata for NSErrorContainer;
      *uint64_t v11 = a1;
      v13[0] = 0;
      v13[1] = 0xE000000000000000;
      id v12 = a1;
      sub_1D76F8464();
      swift_bridgeObjectRelease();
      sub_1D76F84E4();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v5 - 8) + 104))(v11, *MEMORY[0x1E4FBBAA0], v5);
      swift_willThrow();
    }
    swift_release();
  }
  return v5;
}

uint64_t sub_1D76BE544(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  swift_retain();
  uint64_t v5 = MEMORY[0x1E4FBC860];
  unint64_t v6 = sub_1D769E554(MEMORY[0x1E4FBC860]);
  uint64_t v7 = type metadata accessor for _XPCObjectEncoder();
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = 0;
  v8[3] = v4;
  v8[4] = v5;
  void v8[5] = v6;
  uint64_t v12[3] = v7;
  v12[4] = sub_1D76C8D94(&qword_1EBA347A0, (void (*)(uint64_t))type metadata accessor for _XPCObjectEncoder);
  v12[0] = v8;
  swift_retain();
  XPCSideChannel.encode(to:)((uint64_t)v12);
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
    uint64_t v5 = v8[2];
    if (v5)
    {
      swift_unknownObjectRetain();
    }
    else
    {
      uint64_t v5 = sub_1D76F8524();
      swift_allocError();
      uint64_t v11 = v10;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A8C0);
      v11[3] = type metadata accessor for XPCSideChannel();
      *uint64_t v11 = a1;
      v12[0] = 0;
      v12[1] = 0xE000000000000000;
      swift_retain();
      sub_1D76F8464();
      swift_bridgeObjectRelease();
      sub_1D76F84E4();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v5 - 8) + 104))(v11, *MEMORY[0x1E4FBBAA0], v5);
      swift_willThrow();
    }
    swift_release();
  }
  return v5;
}

uint64_t sub_1D76BE754(void *a1, char a2)
{
  int v5 = a2 & 1;
  uint64_t v6 = *(void *)(v2 + 16);
  swift_retain();
  uint64_t v7 = MEMORY[0x1E4FBC860];
  unint64_t v8 = sub_1D769E554(MEMORY[0x1E4FBC860]);
  uint64_t v9 = type metadata accessor for _XPCObjectEncoder();
  unint64_t v10 = (void *)swift_allocObject();
  v10[2] = 0;
  v10[3] = v6;
  v10[4] = v7;
  void v10[5] = v8;
  v14[3] = v9;
  v14[4] = sub_1D76C8D94(&qword_1EBA347A0, (void (*)(uint64_t))type metadata accessor for _XPCObjectEncoder);
  v14[0] = v10;
  swift_retain();
  sub_1D76C7938(v14, (uint64_t)a1, v5);
  if (v3)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v14);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v14);
    uint64_t v7 = v10[2];
    if (v7)
    {
      swift_unknownObjectRetain();
    }
    else
    {
      uint64_t v7 = sub_1D76F8524();
      swift_allocError();
      uint64_t v13 = v12;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A8C0);
      *(void *)(v13 + 24) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A8C8);
      *(void *)uint64_t v13 = a1;
      *(unsigned char *)(v13 + 8) = v5 != 0;
      v14[0] = 0;
      v14[1] = 0xE000000000000000;
      sub_1D76C8BF4(a1, v5);
      sub_1D76F8464();
      swift_bridgeObjectRelease();
      sub_1D76F84E4();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v7 - 8) + 104))(v13, *MEMORY[0x1E4FBBAA0], v7);
      swift_willThrow();
    }
    swift_release();
  }
  return v7;
}

const uint8_t *sub_1D76BE980(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  swift_unknownObjectRetain();
  uint64_t v4 = MEMORY[0x1E4FBC860];
  unint64_t v5 = sub_1D769E554(MEMORY[0x1E4FBC860]);
  uint64_t v6 = type metadata accessor for _XPCObjectDecoder();
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = a1;
  v7[3] = v3;
  void v7[4] = v4;
  void v7[5] = v5;
  v9[3] = v6;
  v9[4] = sub_1D76C8D94((unint64_t *)&unk_1EBA346D0, (void (*)(uint64_t))type metadata accessor for _XPCObjectDecoder);
  v9[0] = v7;
  type metadata accessor for XPCSideChannel();
  swift_allocObject();
  return XPCSideChannel.init(from:)((uint64_t)v9);
}

uint64_t sub_1D76BEA74@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v19 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F08);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188788](v5);
  unint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v2 + 16);
  swift_retain();
  swift_unknownObjectRetain();
  uint64_t v10 = MEMORY[0x1E4FBC860];
  unint64_t v11 = sub_1D769E554(MEMORY[0x1E4FBC860]);
  type metadata accessor for _XPCObjectDecoder();
  uint64_t v12 = (void *)swift_allocObject();
  void v12[2] = a1;
  uint64_t v12[3] = v9;
  v12[4] = v10;
  void v12[5] = v11;
  sub_1D76BEC18();
  if (v3) {
    return swift_release();
  }
  uint64_t v13 = v19;
  char v20 = 0;
  uint64_t v14 = sub_1D76F8664();
  uint64_t v16 = v15;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = swift_release();
  *uint64_t v13 = v14;
  v13[1] = v16;
  return result;
}

uint64_t sub_1D76BEC18()
{
  if (MEMORY[0x1D94771B0](*(void *)(v0 + 16)) == XPCTypeDictionary)
  {
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(qword_1EBA33D98);
    sub_1D76BBB88(&qword_1EBA33D90, qword_1EBA33D98);
    return sub_1D76F86F4();
  }
  else
  {
    uint64_t v1 = sub_1D76F8504();
    swift_allocError();
    uint64_t v3 = v2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34240);
    *uint64_t v3 = &type metadata for DynamicCodableContainerCodingKeys;
    swift_bridgeObjectRetain();
    sub_1D76F84E4();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v1 - 8) + 104))(v3, *MEMORY[0x1E4FBBA70], v1);
    return swift_willThrow();
  }
}

uint64_t XPCDictionary.subscript.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (const char *)(sub_1D76F8054() + 32);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t string = (uint64_t)xpc_dictionary_get_string(v1, v2);
  swift_release();
  if (string) {
    uint64_t string = sub_1D76F80B4();
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return string;
}

{
  void **v0;
  void *v1;
  const char *v2;
  xpc_object_t v3;

  uint64_t v1 = *v0;
  uint64_t v2 = (const char *)(sub_1D76F8054() + 32);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v3 = xpc_dictionary_get_value(v1, v2);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  if (v3)
  {
    swift_getObjectType();
    OS_xpc_object.type.getter();
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return 2;
}

{
  void **v0;
  void *v1;
  const char *v2;
  xpc_object_t v3;

  uint64_t v1 = *v0;
  uint64_t v2 = (const char *)(sub_1D76F8054() + 32);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v3 = xpc_dictionary_get_value(v1, v2);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  if (v3)
  {
    swift_getObjectType();
    OS_xpc_object.type.getter();
  }
  return 0;
}

{
  void **v0;
  void *v1;
  const char *v2;
  xpc_object_t v3;

  uint64_t v1 = *v0;
  uint64_t v2 = (const char *)(sub_1D76F8054() + 32);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v3 = xpc_dictionary_get_value(v1, v2);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  if (v3)
  {
    swift_getObjectType();
    OS_xpc_object.type.getter();
  }
  swift_bridgeObjectRelease_n();
  swift_unknownObjectRelease_n();
  return 2;
}

{
  void **v0;
  void *v1;
  const char *v2;
  xpc_object_t v3;

  uint64_t v1 = *v0;
  uint64_t v2 = (const char *)(sub_1D76F8054() + 32);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v3 = xpc_dictionary_get_value(v1, v2);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  if (v3)
  {
    XPCDictionary.underlyingConnection.getter();
    sub_1D769C348(MEMORY[0x1E4FBC860]);
    swift_unknownObjectRetain();
    XPCError.init(_:from:userInfo:)();
  }
  return 0;
}

void *XPCDictionary.removeValue(forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 16);
  v5[1] = *(_OWORD *)v2;
  uint64_t v6 = v3;
  return sub_1D76C50D8((void *(*)(uint64_t *__return_ptr, void *))sub_1D76C5004, (uint64_t)v5, a1, a2, (uint64_t *)&unk_1EA83A930, (uint64_t (*)(void))sub_1D76C8CA8);
}

uint64_t sub_1D76BEEC0@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v25 = a5;
  uint64_t v26 = a2;
  uint64_t v28 = a4;
  char v27 = a1;
  uint64_t v24 = *(void *)(a3 - 8);
  uint64_t v10 = ((uint64_t (*)(void))MEMORY[0x1F4188788])();
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x1F4188788](v10);
  uint64_t v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188788](v16);
  char v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v6);
  uint64_t v22 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1, v14) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
    v27(v18, v12);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    if (v7) {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v24 + 32))(v25, v12, a3);
    }
    uint64_t v22 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(a6, v22, 1);
}

uint64_t XPCDictionary.createReply()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34390);
  uint64_t v4 = MEMORY[0x1F4188788](v3 - 8);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188788](v4);
  unint64_t v8 = (char *)v15 - v7;
  xpc_object_t v9 = *v1;
  uint64_t result = (uint64_t)xpc_dictionary_create_reply(*v1);
  if (!result)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    return result;
  }
  uint64_t v11 = result;
  v15[1] = result;
  v15[2] = 0xD000000000000019;
  v15[3] = 0x80000001D76FD660;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  if (xpc_dictionary_get_string(v9, "XPCSideChannel.uniqueIdentifier"))
  {
    sub_1D76F80B4();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    sub_1D76F7CA4();
    swift_bridgeObjectRelease();
    uint64_t v12 = sub_1D76F7D04();
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v6, 1, v12) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v8, v6, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v8, 0, 1, v12);
      goto LABEL_9;
    }
    sub_1D769AC0C((uint64_t)v6, &qword_1EBA34390);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
  uint64_t v14 = sub_1D76F7D04();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v8, 1, 1, v14);
LABEL_9:
  sub_1D76AD52C((uint64_t)v8);
  uint64_t result = swift_unknownObjectRelease();
  *a1 = v11;
  a1[1] = 0xD000000000000019;
  a1[2] = 0x80000001D76FD660;
  return result;
}

Swift::Bool __swiftcall XPCDictionary.sendReply()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = xpc_dictionary_get_remote_connection(v1);
  if (v2)
  {
    self;
    if (swift_dynamicCastObjCClass()) {
      xpc_remote_connection_send_message();
    }
    else {
      xpc_connection_send_message(v2, v1);
    }
    swift_unknownObjectRelease();
  }
  return v2 != 0;
}

void *sub_1D76BF45C(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  swift_unknownObjectRetain();
  uint64_t v4 = MEMORY[0x1E4FBC860];
  unint64_t v5 = sub_1D769E554(MEMORY[0x1E4FBC860]);
  uint64_t v6 = type metadata accessor for _XPCObjectDecoder();
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = a1;
  v7[3] = v3;
  void v7[4] = v4;
  void v7[5] = v5;
  v11[3] = v6;
  void v11[4] = sub_1D76C8D94((unint64_t *)&unk_1EBA346D0, (void (*)(uint64_t))type metadata accessor for _XPCObjectDecoder);
  v11[0] = v7;
  sub_1D76BBA90(0, (unint64_t *)&qword_1EA83A778);
  sub_1D76B116C((uint64_t)v11, (uint64_t)v10);
  unint64_t v8 = NSError.init(from:)(v10);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
  return v8;
}

uint64_t XPCDictionary.init(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  a2[1] = 0xD000000000000019;
  a2[2] = 0x80000001D76FD660;
  return result;
}

xpc_connection_t XPCDictionary.underlyingConnection.getter()
{
  xpc_connection_t result = xpc_dictionary_get_remote_connection(*v0);
  if (result)
  {
    xpc_connection_t v2 = result;
    self;
    uint64_t v3 = swift_dynamicCastObjCClass();
    if (v3)
    {
      uint64_t v4 = v3;
      type metadata accessor for RemoteXPCPeerConnection();
      xpc_connection_t result = (xpc_connection_t)swift_allocObject();
      *((void *)result + 9) = 0;
      *((void *)result + 6) = 0;
      *((void *)result + 7) = 0;
      *((unsigned char *)result + 64) = 0;
      *((void *)result + 4) = 0;
      *((void *)result + 5) = 0;
      *((void *)result + 3) = v4;
    }
    else
    {
      type metadata accessor for SystemXPCPeerConnection();
      xpc_connection_t result = (xpc_connection_t)swift_allocObject();
      *((void *)result + 4) = 0;
      *((void *)result + 5) = 0;
      *((void *)result + 3) = v2;
    }
    *((void *)result + 2) = MEMORY[0x1E4FBC860];
  }
  return result;
}

uint64_t XPCDictionary.withUnsafeUnderlyingConnection<A>(_:)(void (*a1)(void))
{
  uint64_t v3 = xpc_dictionary_get_remote_connection(*v1);
  a1();
  return swift_unknownObjectRelease();
}

uint64_t XPCDictionary.auditToken.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *MEMORY[0x1E4F143C0];
  xpc_dictionary_get_audit_token();
  memset(v3, 0, sizeof(v3));
  uint64_t result = XPCaudit_token_to_pid(v3);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = result == 0;
  return result;
}

xpc_object_t XPCDictionary.entitlements.getter@<X0>(void *a1@<X8>)
{
  uint64_t v13 = *MEMORY[0x1E4F143C0];
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  xpc_dictionary_get_audit_token();
  memset(v4, 0, sizeof(v4));
  int v1 = XPCaudit_token_to_pid(v4);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  if (v1)
  {
    int v5 = 0;
    int v6 = 0;
    int v7 = 0;
    int v8 = 0;
    int v9 = 0;
    int v10 = 0;
    int v11 = 0;
    int v12 = 0;
    if (xpc_copy_entitlements_data_for_token())
    {
      swift_getObjectType();
      OS_xpc_object.type.getter();
    }
  }
  xpc_object_t result = xpc_dictionary_create(0, 0, 0);
  *a1 = result;
  a1[1] = 0xD000000000000019;
  a1[2] = 0x80000001D76FD660;
  return result;
}

uint64_t XPCDictionary.subscript.getter@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  int v5 = *v2;
  int v6 = (const char *)(sub_1D76F8054() + 32);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  xpc_object_t v7 = xpc_dictionary_get_value(v5, v6);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  if (v7)
  {
    swift_getObjectType();
    OS_xpc_object.type.getter();
  }
  int v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56);

  return v8(a2, 1, 1, a1);
}

{
  void **v2;
  void *v5;
  const char *v6;
  xpc_object_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t vars8;

  int v5 = *v2;
  int v6 = (const char *)(sub_1D76F8054() + 32);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  xpc_object_t v7 = xpc_dictionary_get_value(v5, v6);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  if (v7)
  {
    swift_getObjectType();
    OS_xpc_object.type.getter();
  }
  int v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56);

  return v8(a2, 1, 1, a1);
}

xpc_object_t XPCDictionary.subscript.getter()
{
  int v1 = *v0;
  uint64_t v2 = sub_1D76F8054();
  xpc_object_t v3 = xpc_dictionary_get_value(v1, (const char *)(v2 + 32));
  swift_release();
  return v3;
}

{
  void **v0;
  void *v1;
  const char *v2;
  xpc_object_t v3;

  int v1 = *v0;
  uint64_t v2 = (const char *)(sub_1D76F8054() + 32);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  xpc_object_t v3 = xpc_dictionary_get_value(v1, v2);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  return v3;
}

uint64_t sub_1D76BFC1C@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v29 = a2;
  char v30 = a1;
  uint64_t v10 = *(void *)(a3 - 8);
  uint64_t v27 = a5;
  uint64_t v28 = v10;
  uint64_t v11 = MEMORY[0x1F4188788](a1);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(v14 + 16);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x1F4188788](v11);
  uint64_t v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188788](v17);
  uint64_t v21 = (char *)&v26 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v22 + 16))(v21, v23);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v21, 1, v15) == 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 56))(a6, 1, 1, a4);
  }
  uint64_t v25 = v28;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v21, v15);
  v30(v19, v13);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  if (v6) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v25 + 32))(v27, v13, a3);
  }
  return result;
}

void (*XPCDictionary.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t **a1, char a2)
{
  uint64_t v11 = malloc(0x48uLL);
  *a1 = v11;
  v11[3] = a5;
  void v11[4] = v5;
  v11[1] = a3;
  void v11[2] = a4;
  *uint64_t v11 = a2;
  uint64_t v12 = sub_1D76F83A4();
  void v11[5] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v11[6] = v13;
  size_t v14 = *(void *)(v13 + 64);
  v11[7] = malloc(v14);
  v11[8] = malloc(v14);
  XPCDictionary.subscript.getter(a2, a3, a4, a5);
  return sub_1D76BFFE8;
}

{
  uint64_t v5;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;

  uint64_t v11 = malloc(0x48uLL);
  *a1 = v11;
  v11[3] = a5;
  void v11[4] = v5;
  v11[1] = a3;
  void v11[2] = a4;
  *uint64_t v11 = a2;
  uint64_t v12 = sub_1D76F83A4();
  void v11[5] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v11[6] = v13;
  size_t v14 = *(void *)(v13 + 64);
  v11[7] = malloc(v14);
  v11[8] = malloc(v14);
  XPCDictionary.subscript.getter(a2, a3, a4, a5);
  return sub_1D76C08F0;
}

{
  uint64_t v5;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  void *v15;

  uint64_t v11 = malloc(0x48uLL);
  *a1 = v11;
  v11[3] = a5;
  void v11[4] = v5;
  v11[1] = a3;
  void v11[2] = a4;
  *uint64_t v11 = a2;
  uint64_t v12 = sub_1D76F83A4();
  void v11[5] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v11[6] = v13;
  size_t v14 = *(void *)(v13 + 64);
  v11[7] = malloc(v14);
  uint64_t v15 = malloc(v14);
  v11[8] = v15;
  XPCDictionary.subscript.getter(a4, (uint64_t)v15);
  return sub_1D76C0F58;
}

void sub_1D76BFFE8(uint64_t **a1, char a2)
{
  sub_1D76C091C(a1, a2, (uint64_t)sub_1D769A1E8, (void (*)(uint64_t *__return_ptr, uint64_t, void *, uint64_t, void, uint64_t, void))sub_1D76BFC1C);
}

uint64_t _s7Mercury13XPCDictionaryVyxSgSScSZRzluig_0@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  XPCDictionary.subscript.getter(a1, a2);
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t sub_1D76C00C4(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 16);
  uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 8);
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  a4(v7, v8, v5, v6);
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

xpc_object_t sub_1D76C01A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v54 = a4;
  unint64_t v6 = *(void *)(a3 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = MEMORY[0x1F4188788](AssociatedTypeWitness);
  uint64_t v52 = (char *)&v47 - v8;
  uint64_t v9 = *(void *)(a2 - 8);
  uint64_t v10 = MEMORY[0x1F4188788](v7);
  char v49 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188788](v10);
  unint64_t v55 = (char *)&v47 - v13;
  uint64_t v14 = MEMORY[0x1F4188788](v12);
  uint64_t v16 = (char *)&v47 - v15;
  uint64_t v17 = MEMORY[0x1F4188788](v14);
  uint64_t v19 = (char *)&v47 - v18;
  MEMORY[0x1F4188788](v17);
  uint64_t v21 = (char *)&v47 - v20;
  uint64_t v57 = v9;
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v22((char *)&v47 - v20, a1, a2);
  unint64_t v56 = v6;
  LOBYTE(a1) = sub_1D76F8424();
  v22(v19, (uint64_t)v21, a2);
  if ((a1 & 1) == 0)
  {
    long long v48 = v16;
    uint64_t v51 = *(void (**)(char *, uint64_t))(v57 + 8);
    v51(v19, a2);
    goto LABEL_6;
  }
  long long v50 = v21;
  swift_getAssociatedConformanceWitness();
  sub_1D76F8C64();
  sub_1D76F89C4();
  char v23 = sub_1D76F7F84();
  uint64_t v24 = *(void (**)(char *, uint64_t))(v57 + 8);
  v24(v16, a2);
  v24(v19, a2);
  if ((v23 & 1) == 0)
  {
    long long v48 = v16;
    uint64_t v51 = v24;
    uint64_t v21 = v50;
LABEL_6:
    uint64_t v27 = sub_1D76F8414();
    uint64_t v28 = v55;
    v22(v55, (uint64_t)v21, a2);
    if (v27 <= 63)
    {
      uint64_t v29 = v51;
      v51(v28, a2);
      uint64_t v26 = v54;
      char v30 = v29;
      goto LABEL_8;
    }
    unint64_t v58 = -1;
    char v32 = sub_1D76F8424();
    uint64_t v33 = sub_1D76F8414();
    if (v32)
    {
      if (v33 <= 64)
      {
        long long v50 = v21;
        swift_getAssociatedConformanceWitness();
        sub_1D76F8C64();
        char v34 = v48;
        sub_1D76F89C4();
        char v35 = v55;
        char v36 = sub_1D76F7F74();
        uint64_t v37 = v57;
        char v38 = v34;
        char v30 = v51;
        v51(v38, a2);
        unint64_t v56 = v58;
        char v39 = v49;
        (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v49, v35, a2);
        if ((v36 & 1) == 0)
        {
          v30(v39, a2);
          uint64_t v26 = v54;
          uint64_t v21 = v50;
          goto LABEL_8;
        }
        unint64_t v40 = sub_1D76F8404();
        v30(v39, a2);
        uint64_t v26 = v54;
        uint64_t v21 = v50;
        if (v56 >= v40)
        {
LABEL_8:
          uint64_t v31 = sub_1D76F8404();
          v30(v21, a2);
          xpc_object_t result = xpc_uint64_create(v31);
          goto LABEL_19;
        }
LABEL_18:
        v30(v21, a2);
        xpc_object_t result = 0;
        goto LABEL_19;
      }
    }
    else if (v33 < 65)
    {
      uint64_t v45 = v55;
      unint64_t v46 = sub_1D76F8404();
      char v30 = v51;
      v51(v45, a2);
      uint64_t v26 = v54;
      if (v58 >= v46) {
        goto LABEL_8;
      }
      goto LABEL_18;
    }
    sub_1D76ACB20();
    char v41 = v48;
    sub_1D76F83E4();
    uint64_t v42 = v55;
    char v43 = sub_1D76F7F84();
    uint64_t v44 = v41;
    char v30 = v51;
    v51(v44, a2);
    v30(v42, a2);
    uint64_t v26 = v54;
    if ((v43 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
  v24(v50, a2);
  xpc_object_t result = 0;
  uint64_t v26 = v54;
LABEL_19:
  void *v26 = result;
  return result;
}

void sub_1D76C08F0(uint64_t **a1, char a2)
{
  sub_1D76C091C(a1, a2, (uint64_t)sub_1D76C8EB0, (void (*)(uint64_t *__return_ptr, uint64_t, void *, uint64_t, void, uint64_t, void))sub_1D76BFC1C);
}

void sub_1D76C091C(uint64_t **a1, char a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t, void *, uint64_t, void, uint64_t, void))
{
  uint64_t v4 = *a1;
  uint64_t v5 = (void *)(*a1)[7];
  unint64_t v6 = (void *)(*a1)[8];
  uint64_t v7 = (*a1)[5];
  uint64_t v8 = (*a1)[6];
  uint64_t v9 = (*a1)[3];
  uint64_t v11 = (*a1)[1];
  uint64_t v10 = (*a1)[2];
  uint64_t v12 = **a1;
  if (a2)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v8 + 16))((*a1)[7], v6, v7);
    swift_bridgeObjectRetain();
    sub_1D769B74C((uint64_t)v5, v12, v11, v10, v9, a3, a4);
    uint64_t v13 = *(void (**)(void *, uint64_t))(v8 + 8);
    v13(v5, v7);
    v13(v6, v7);
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_1D769B74C((uint64_t)v6, v12, v11, v10, v9, a3, a4);
    (*(void (**)(void *, uint64_t))(v8 + 8))(v6, v7);
  }
  free(v6);
  free(v5);

  free(v4);
}

uint64_t XPCDictionary.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(void)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  return sub_1D76C0F9C(a1, a2, a3, a4, a5, a6, a7, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))XPCDictionary.subscript.getter, a8);
}

{
  return sub_1D76C0F9C(a1, a2, a3, a4, a5, a6, a7, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))XPCDictionary.subscript.getter, a8);
}

uint64_t XPCDictionary.subscript.getter@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  XPCDictionary.subscript.getter(a1, a2);
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

xpc_object_t sub_1D76C0D38@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  MEMORY[0x1F4188788](a1);
  (*(void (**)(char *))(v4 + 16))((char *)v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1D76C78E4();
  sub_1D76F7EB4();
  xpc_object_t result = xpc_double_create(*(double *)&v6[1]);
  *a2 = result;
  return result;
}

void sub_1D76C0F58(uint64_t **a1, char a2)
{
  sub_1D76C091C(a1, a2, (uint64_t)sub_1D76C8E90, (void (*)(uint64_t *__return_ptr, uint64_t, void *, uint64_t, void, uint64_t, void))sub_1D76BEEC0);
}

uint64_t sub_1D76C0F9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(void)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X7>, uint64_t a9@<X8>)
{
  char v23 = a4;
  uint64_t v24 = a8;
  v22[1] = a5;
  uint64_t v25 = a9;
  v22[0] = sub_1D76F83A4();
  uint64_t v15 = *(void *)(v22[0] - 8);
  MEMORY[0x1F4188788](v22[0]);
  uint64_t v17 = (char *)v22 - v16;
  uint64_t v18 = v9[1];
  uint64_t v19 = v9[2];
  uint64_t v26 = *v9;
  uint64_t v27 = v18;
  uint64_t v28 = v19;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  v24(a1, a2, a3, a6, a7);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v20 = *(void *)(a6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v17, 1, a6) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v20 + 32))(v25, v17, a6);
  }
  v23();
  return (*(uint64_t (**)(char *, void))(v15 + 8))(v17, v22[0]);
}

uint64_t sub_1D76C1434@<X0>(unsigned char *a1@<X8>)
{
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  char v2 = XPCDictionary.subscript.getter();
  swift_bridgeObjectRelease();
  uint64_t result = swift_unknownObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1D76C14B8(unsigned __int8 *a1)
{
  int v1 = *a1;
  if (v1 == 2)
  {
    swift_bridgeObjectRetain();
    xpc_object_t v2 = 0;
  }
  else
  {
    BOOL v3 = v1 & 1;
    swift_bridgeObjectRetain();
    xpc_object_t v2 = xpc_BOOL_create(v3);
  }
  return XPCDictionary.subscript.setter((uint64_t)v2);
}

uint64_t XPCDictionary.subscript.setter(char a1)
{
  if (a1 == 2) {
    xpc_object_t v1 = 0;
  }
  else {
    xpc_object_t v1 = xpc_BOOL_create(a1 & 1);
  }

  return XPCDictionary.subscript.setter((uint64_t)v1);
}

uint64_t (*XPCDictionary.subscript.modify(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = v3;
  *(void *)a1 = a2;
  *(unsigned char *)(a1 + 24) = XPCDictionary.subscript.getter();
  return sub_1D76C15F0;
}

uint64_t sub_1D76C15F0(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 24);
  if (v1 == 2)
  {
    swift_bridgeObjectRetain();
    xpc_object_t v2 = 0;
  }
  else
  {
    BOOL v3 = v1 & 1;
    swift_bridgeObjectRetain();
    xpc_object_t v2 = xpc_BOOL_create(v3);
  }
  return XPCDictionary.subscript.setter((uint64_t)v2);
}

uint64_t XPCDictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5 = *v3;
  unint64_t v6 = (const char *)(sub_1D76F8054() + 32);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  xpc_object_t v7 = xpc_dictionary_get_value(v5, v6);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  if (v7)
  {
    swift_getObjectType();
    OS_xpc_object.type.getter();
  }
  swift_bridgeObjectRelease_n();
  uint64_t v8 = swift_unknownObjectRelease_n();
  return a3(v8) & 1;
}

uint64_t XPCDictionary.subscript.getter@<X0>(void *a1@<X8>)
{
  BOOL v3 = *v1;
  uint64_t v4 = sub_1D76F8054();
  xpc_object_t v5 = xpc_dictionary_get_dictionary(v3, (const char *)(v4 + 32));
  uint64_t result = swift_release();
  unint64_t v7 = 0xD000000000000019;
  if (!v5) {
    unint64_t v7 = 0;
  }
  unint64_t v8 = 0x80000001D76FD660;
  if (!v5) {
    unint64_t v8 = 0;
  }
  *a1 = v5;
  a1[1] = v7;
  a1[2] = v8;
  return result;
}

{
  void **v1;
  void *v3;
  const char *v4;
  xpc_object_t v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;

  BOOL v3 = *v1;
  uint64_t v4 = (const char *)(sub_1D76F8054() + 32);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  xpc_object_t v5 = xpc_dictionary_get_dictionary(v3, v4);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t result = swift_unknownObjectRelease();
  unint64_t v7 = 0xD000000000000019;
  if (!v5) {
    unint64_t v7 = 0;
  }
  unint64_t v8 = 0x80000001D76FD660;
  if (!v5) {
    unint64_t v8 = 0;
  }
  *a1 = v5;
  a1[1] = v7;
  a1[2] = v8;
  return result;
}

double sub_1D76C18D4@<D0>(uint64_t a1@<X8>)
{
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  XPCDictionary.subscript.getter(&v4);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v2 = v5;
  double result = *(double *)&v4;
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 16) = v2;
  return result;
}

uint64_t sub_1D76C1964(void **a1, void **a2)
{
  uint64_t v2 = *a1;
  BOOL v3 = *a2;
  if (*a1) {
    swift_unknownObjectRetain();
  }
  uint64_t v4 = sub_1D76F8054();
  xpc_dictionary_set_value(v3, (const char *)(v4 + 32), v2);
  swift_unknownObjectRelease();

  return swift_release();
}

uint64_t XPCDictionary.subscript.setter(void **a1)
{
  uint64_t v2 = *a1;
  BOOL v3 = *v1;
  if (*a1)
  {
    uint64_t v4 = swift_unknownObjectRetain();
    sub_1D76C85B0(v4);
  }
  uint64_t v5 = sub_1D76F8054();
  swift_bridgeObjectRelease();
  xpc_dictionary_set_value(v3, (const char *)(v5 + 32), v2);
  swift_unknownObjectRelease();

  return swift_release();
}

void (*XPCDictionary.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(void ***a1, char a2)
{
  unint64_t v7 = malloc(0x30uLL);
  *a1 = v7;
  void v7[4] = a3;
  void v7[5] = v3;
  v7[3] = a2;
  unint64_t v8 = *v3;
  uint64_t v9 = (const char *)(sub_1D76F8054() + 32);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  xpc_object_t v10 = xpc_dictionary_get_dictionary(v8, v9);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  unint64_t v11 = 0xD000000000000019;
  if (!v10) {
    unint64_t v11 = 0;
  }
  unint64_t v12 = 0x80000001D76FD660;
  if (!v10) {
    unint64_t v12 = 0;
  }
  *unint64_t v7 = v10;
  v7[1] = v11;
  v7[2] = v12;
  return sub_1D76C1B6C;
}

void sub_1D76C1B6C(void ***a1, char a2)
{
  uint64_t v2 = *a1;
  BOOL v3 = **a1;
  uint64_t v4 = *(void **)(*a1)[5];
  if (a2)
  {
    if (v3) {
      swift_unknownObjectRetain();
    }
    uint64_t v5 = sub_1D76F8054();
    xpc_dictionary_set_value(v4, (const char *)(v5 + 32), v3);
    swift_release();
    swift_unknownObjectRelease();
    sub_1D76C85B0((uint64_t)*v2);
  }
  else
  {
    swift_bridgeObjectRetain();
    if (v3)
    {
      uint64_t v6 = swift_unknownObjectRetain();
      sub_1D76C85B0(v6);
    }
    uint64_t v7 = sub_1D76F8054();
    swift_bridgeObjectRelease();
    xpc_dictionary_set_value(v4, (const char *)(v7 + 32), v3);
    swift_release();
    swift_unknownObjectRelease();
  }

  free(v2);
}

uint64_t sub_1D76C1CF4@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  BOOL v3 = *a1;
  uint64_t v4 = (const char *)(sub_1D76F8054() + 32);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  xpc_object_t v5 = xpc_dictionary_get_value(v3, v4);
  swift_bridgeObjectRelease_n();
  swift_unknownObjectRelease_n();
  uint64_t result = swift_release();
  *a2 = v5;
  return result;
}

uint64_t sub_1D76C1D90(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return XPCDictionary.subscript.setter(v1);
}

uint64_t (*XPCDictionary.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  a1[2] = a3;
  a1[3] = v3;
  a1[1] = a2;
  xpc_object_t v5 = *v3;
  uint64_t v6 = (const char *)(sub_1D76F8054() + 32);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  xpc_object_t v7 = xpc_dictionary_get_value(v5, v6);
  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  *a1 = v7;
  return sub_1D76C1E94;
}

uint64_t sub_1D76C1E94(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    XPCDictionary.subscript.setter(v2);
    return swift_unknownObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    return XPCDictionary.subscript.setter(v2);
  }
}

uint64_t XPCDictionary.subscript.getter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = sub_1D76F8034();
  MEMORY[0x1F4188788](v5 - 8);
  uint64_t v6 = *v3;
  uint64_t v7 = sub_1D76F8054();
  uint64_t string = xpc_dictionary_get_string(v6, (const char *)(v7 + 32));
  swift_release();
  if (!string) {
    return 0;
  }
  if ((a3 & 1) == 0) {
    return sub_1D76F80B4();
  }
  strlen(string);
  sub_1D76F8014();
  return sub_1D76F7FB4();
}

{
  void **v3;
  void *v5;
  const char *v6;
  xpc_object_t v7;
  uint64_t v8;

  uint64_t v5 = *v3;
  uint64_t v6 = (const char *)(sub_1D76F8054() + 32);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v7 = xpc_dictionary_get_value(v5, v6);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  if (!v7) {
    return 0;
  }
  unint64_t v8 = sub_1D76C2420(v7, a3 & 1);
  swift_unknownObjectRelease();
  return v8;
}

{
  void **v3;
  void *v5;
  const char *v6;
  xpc_object_t v7;
  uint64_t v8;

  uint64_t v5 = *v3;
  uint64_t v6 = (const char *)(sub_1D76F8054() + 32);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v7 = xpc_dictionary_get_value(v5, v6);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  if (v7)
  {
    unint64_t v8 = sub_1D76C2420(v7, a3 & 1);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    return 0;
  }
  return v8;
}

uint64_t sub_1D76C2014@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  BOOL v3 = *a1;
  uint64_t v4 = (const char *)(sub_1D76F8054() + 32);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t string = (uint64_t)xpc_dictionary_get_string(v3, v4);
  swift_release();
  if (string)
  {
    uint64_t string = sub_1D76F80B4();
    uint64_t v7 = v6;
    swift_bridgeObjectRelease_n();
    uint64_t result = swift_unknownObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    uint64_t result = swift_unknownObjectRelease_n();
    uint64_t v7 = 0;
  }
  *a2 = string;
  a2[1] = v7;
  return result;
}

uint64_t sub_1D76C20DC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return XPCDictionary.subscript.setter(v1, v2);
}

void (*XPCDictionary.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1, char a2)
{
  uint64_t v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[3] = a3;
  void v7[4] = v3;
  v7[2] = a2;
  unint64_t v8 = *v3;
  uint64_t v9 = (const char *)(sub_1D76F8054() + 32);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t string = (uint64_t)xpc_dictionary_get_string(v8, v9);
  swift_release();
  if (string)
  {
    uint64_t string = sub_1D76F80B4();
    uint64_t v12 = v11;
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v12 = 0;
  }
  *uint64_t v7 = string;
  v7[1] = v12;
  return sub_1D76C2230;
}

{
  uint64_t v3;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  size_t v11;
  void *v12;

  uint64_t v7 = malloc(0x58uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *uint64_t v7 = a2;
  unint64_t v8 = sub_1D76F7C94();
  v7[3] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  void v7[4] = v9;
  xpc_object_t v10 = *(void *)(v9 + 64);
  void v7[5] = malloc(v10);
  v7[6] = malloc(v10);
  uint64_t v11 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBA34380) - 8) + 64);
  v7[7] = malloc(v11);
  v7[8] = malloc(v11);
  v7[9] = malloc(v11);
  uint64_t v12 = malloc(v11);
  v7[10] = v12;
  XPCDictionary.subscript.getter((uint64_t)v12);
  return sub_1D76C4BD0;
}

void sub_1D76C2230(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  BOOL v3 = *(void ***)(*(void *)a1 + 32);
  uint64_t v4 = *(void *)(*(void *)a1 + 8);
  if (a2)
  {
    if (v4)
    {
      uint64_t v5 = *v3;
      uint64_t v6 = (const char *)(sub_1D76F8054() + 32);
      uint64_t v7 = sub_1D76F8054();
      xpc_dictionary_set_string(v5, v6, (const char *)(v7 + 32));
      swift_release();
    }
    else
    {
      uint64_t v11 = *v3;
      uint64_t v12 = sub_1D76F8054();
      xpc_dictionary_set_value(v11, (const char *)(v12 + 32), 0);
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (v4)
    {
      unint64_t v8 = *v3;
      uint64_t v9 = (const char *)(sub_1D76F8054() + 32);
      uint64_t v10 = sub_1D76F8054();
      swift_bridgeObjectRelease();
      xpc_dictionary_set_string(v8, v9, (const char *)(v10 + 32));
      swift_release();
    }
    else
    {
      uint64_t v13 = *v3;
      uint64_t v14 = sub_1D76F8054();
      xpc_dictionary_set_value(v13, (const char *)(v14 + 32), 0);
    }
    swift_release();
  }

  free(v2);
}

uint64_t sub_1D76C2420(void *a1, char a2)
{
  uint64_t v4 = sub_1D76F7C24();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188788](v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = XPCTypeData;
  if (v8 != MEMORY[0x1D94771B0](a1)) {
    return 0;
  }
  bytes_ptr = xpc_data_get_bytes_ptr(a1);
  if (!bytes_ptr) {
    return 0;
  }
  uint64_t v12 = bytes_ptr;
  size_t length = xpc_data_get_length(a1);
  if ((a2 & 1) == 0) {
    return sub_1D76C84FC(v12, length);
  }
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E4F27740], v4);
  sub_1D76F7C14();
  if (length)
  {
    sub_1D76F7AF4();
    swift_allocObject();
    swift_retain();
    uint64_t v14 = sub_1D76F7AA4();
    uint64_t v9 = sub_1D76C85F0(v14, length);
    swift_release();
  }
  else
  {
    uint64_t v15 = (void (*)(unsigned char *, void))sub_1D76F7C14();
    v15(v12, 0);
    swift_release();
    swift_release();
    uint64_t v9 = 0;
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v9;
}

unsigned char *XPCDictionary.subscript.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (const char *)(sub_1D76F8054() + 32);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  xpc_object_t v3 = xpc_dictionary_get_value(v1, v2);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  if (!v3)
  {
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  uint64_t v4 = XPCTypeData;
  if (v4 != MEMORY[0x1D94771B0](v3))
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
LABEL_5:
    swift_unknownObjectRelease();
    return 0;
  }
  bytes_ptr = xpc_data_get_bytes_ptr(v3);
  if (bytes_ptr)
  {
    size_t length = xpc_data_get_length(v3);
    bytes_ptr = (unsigned char *)sub_1D76C84FC(bytes_ptr, length);
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return bytes_ptr;
}

uint64_t sub_1D76C276C@<X0>(void *a1@<X8>)
{
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v2 = XPCDictionary.subscript.getter();
  uint64_t v4 = v3;
  swift_bridgeObjectRelease();
  uint64_t result = swift_unknownObjectRelease();
  *a1 = v2;
  a1[1] = v4;
  return result;
}

uint64_t sub_1D76C27F4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = a1[1];
  swift_bridgeObjectRetain();
  sub_1D76C86E8(v1, v2);
  sub_1D769A250(v1, v2);

  return sub_1D7699DF8(v1, v2);
}

void (*XPCDictionary.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[3] = a3;
  void v7[4] = v3;
  v7[2] = a2;
  *uint64_t v7 = XPCDictionary.subscript.getter();
  v7[1] = v8;
  return sub_1D76C2904;
}

void sub_1D76C2904(uint64_t **a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = **a1;
  unint64_t v5 = (*a1)[1];
  swift_bridgeObjectRetain();
  if (a2)
  {
    sub_1D76C86E8(v4, v5);
    sub_1D769A250(v4, v5);
    sub_1D7699DF8(v4, v5);
    uint64_t v6 = *v3;
    unint64_t v7 = v3[1];
  }
  else
  {
    sub_1D769A250(v4, v5);
    uint64_t v6 = v4;
    unint64_t v7 = v5;
  }
  sub_1D7699DF8(v6, v7);

  free(v3);
}

uint64_t sub_1D76C2A9C@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *a1;
  char v5 = *(unsigned char *)(a2 + 16);
  uint64_t v6 = (const char *)(sub_1D76F8054() + 32);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  xpc_object_t v7 = xpc_dictionary_get_value(v4, v6);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  if (v7)
  {
    uint64_t v8 = sub_1D76C2420(v7, v5);
    unint64_t v10 = v9;
    swift_bridgeObjectRelease_n();
    swift_unknownObjectRelease_n();
    uint64_t result = swift_unknownObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    uint64_t result = swift_unknownObjectRelease_n();
    uint64_t v8 = 0;
    unint64_t v10 = 0xF000000000000000;
  }
  *a3 = v8;
  a3[1] = v10;
  return result;
}

void (*XPCDictionary.subscript.modify(void *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1, char a2)
{
  unint64_t v9 = malloc(0x28uLL);
  *a1 = v9;
  v9[3] = a3;
  v9[4] = v4;
  v9[2] = a2;
  unint64_t v10 = *v4;
  uint64_t v11 = (const char *)(sub_1D76F8054() + 32);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  xpc_object_t v12 = xpc_dictionary_get_value(v10, v11);
  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  if (v12)
  {
    uint64_t v13 = sub_1D76C2420(v12, a4 & 1);
    unint64_t v15 = v14;
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v13 = 0;
    unint64_t v15 = 0xF000000000000000;
  }
  *unint64_t v9 = v13;
  v9[1] = v15;
  return sub_1D76C2904;
}

uint64_t sub_1D76C304C@<X0>(uint64_t *a1@<X8>)
{
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v2 = XPCDictionary.subscript.getter();
  swift_bridgeObjectRelease();
  uint64_t result = swift_unknownObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1D76C30D0(void **a1)
{
  uint64_t v1 = *a1;
  swift_bridgeObjectRetain();
  id v2 = v1;
  return XPCDictionary.subscript.setter(v1);
}

uint64_t XPCDictionary.subscript.setter(void *a1)
{
  if (a1)
  {
    uint64_t v3 = (void *)sub_1D76F7B84();
    uint64_t v4 = *v1;
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    char v5 = xpc_dictionary_get_remote_connection(v4);
    sub_1D76C325C((uint64_t)v5, v3, v1);
    swift_unknownObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  else
  {
    xpc_object_t v7 = *v1;
    uint64_t v8 = sub_1D76F8054();
    swift_unknownObjectRetain();
    swift_bridgeObjectRelease();
    xpc_dictionary_set_value(v7, (const char *)(v8 + 32), 0);
    swift_unknownObjectRelease();
    return swift_release();
  }
}

uint64_t sub_1D76C325C(uint64_t a1, void *a2, void **a3)
{
  if (a1)
  {
    type metadata accessor for XPCObjectEncoder();
    swift_allocObject();
    XPCObjectEncoder.init(underlyingConnection:)(a1);
  }
  else
  {
    type metadata accessor for XPCObjectEncoder();
    *(void *)(swift_allocObject() + 16) = 0;
  }
  swift_unknownObjectRetain();
  swift_retain();
  uint64_t v7 = sub_1D76BE338(a2);
  if (v3)
  {

    swift_release();
    sub_1D76F82B4();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBA33F30);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_1D76FA300;
    id v9 = a2;
    id v10 = objc_msgSend(v9, sel_description);
    uint64_t v11 = sub_1D76F7FF4();
    uint64_t v13 = v12;

    *(void *)(v8 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v8 + 64) = sub_1D76B6EA0();
    *(void *)(v8 + 32) = v11;
    *(void *)(v8 + 40) = v13;
    sub_1D76BBA90(0, (unint64_t *)&qword_1EA83A920);
    unint64_t v14 = (void *)sub_1D76F8394();
    sub_1D76F7D84();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v15 = (void *)v7;
    swift_release();
    uint64_t v16 = *a3;
    uint64_t v17 = (const char *)(sub_1D76F8054() + 32);
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    xpc_dictionary_set_value(v16, v17, v15);
    swift_release();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease_n();
  }
  return swift_release();
}

void (*XPCDictionary.subscript.modify(uint64_t *a1, uint64_t a2, uint64_t a3))(void **a1, char a2)
{
  a1[2] = a3;
  a1[3] = v3;
  a1[1] = a2;
  *a1 = XPCDictionary.subscript.getter();
  return sub_1D76C34DC;
}

void sub_1D76C34DC(void **a1, char a2)
{
  id v2 = *a1;
  if (a2)
  {
    swift_bridgeObjectRetain();
    id v3 = v2;
    XPCDictionary.subscript.setter(v2);
  }
  else
  {
    swift_bridgeObjectRetain();
    XPCDictionary.subscript.setter(v2);
  }
}

uint64_t XPCDictionary.subscript.getter@<X0>(uint64_t a1@<X8>)
{
  id v3 = *v1;
  uint64_t v4 = (const char *)(sub_1D76F8054() + 32);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  xpc_object_t v5 = xpc_dictionary_get_value(v3, v4);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  if (v5)
  {
    xpc_uuid_get_uuid(_:)(v5);
    if (v6)
    {
      uint64_t v11 = sub_1D76F7D04();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(a1, 1, 1, v11);
    }
    else
    {
      sub_1D76F7CD4();
      uint64_t v7 = sub_1D76F7D04();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a1, 0, 1, v7);
    }
    return swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v8 = sub_1D76F7D04();
    id v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
    return v9(a1, 1, 1, v8);
  }
}

{
  void **v1;
  void *v3;
  const char *v4;
  xpc_object_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t vars8;

  id v3 = *v1;
  uint64_t v4 = (const char *)(sub_1D76F8054() + 32);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  xpc_object_t v5 = xpc_dictionary_get_value(v3, v4);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  if (v5)
  {
    xpc_uuid_get_uuid(_:)(v5);
    if (v6)
    {
      id v9 = sub_1D76F7D04();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(a1, 1, 1, v9);
    }
    else
    {
      sub_1D76F7CD4();
      uint64_t v7 = sub_1D76F7D04();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a1, 0, 1, v7);
    }
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v8 = sub_1D76F7D04();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a1, 1, 1, v8);
    swift_bridgeObjectRelease();
  }

  return swift_unknownObjectRelease();
}

{
  void **v1;
  void *v3;
  const char *v4;
  xpc_object_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t vars8;

  id v3 = *v1;
  uint64_t v4 = (const char *)(sub_1D76F8054() + 32);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  xpc_object_t v5 = xpc_dictionary_get_value(v3, v4);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  if (v5)
  {
    swift_getObjectType();
    OS_xpc_object.type.getter();
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  char v6 = sub_1D76F7C94();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(a1, 1, 1, v6);
}

{
  void **v1;
  void *v3;
  const char *v4;
  xpc_object_t v5;
  uint64_t v6;
  uint64_t vars8;

  id v3 = *v1;
  uint64_t v4 = (const char *)(sub_1D76F8054() + 32);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  xpc_object_t v5 = xpc_dictionary_get_value(v3, v4);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  if (v5)
  {
    swift_getObjectType();
    OS_xpc_object.type.getter();
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  char v6 = sub_1D76F7C94();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(a1, 1, 1, v6);
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t sub_1D76C3940(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34390);
  MEMORY[0x1F4188788](v5 - 8);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *a3;
  uint64_t v8 = a3[1];
  sub_1D769AC68(a1, (uint64_t)v7, &qword_1EBA34390);
  swift_bridgeObjectRetain();
  return XPCDictionary.subscript.setter((uint64_t)v7, v9, v8);
}

uint64_t XPCDictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143C0];
  uint64_t v6 = sub_1D76F7D04();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188788](v6);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34390);
  MEMORY[0x1F4188788](v10 - 8);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D769AC68(a1, (uint64_t)v12, &qword_1EBA34390);
  int v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6);
  xpc_object_t v14 = 0;
  if (v13 != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v12, v6);
    unint64_t v15 = sub_1D76F7CE4();
    unsigned __int8 v16 = v15;
    unsigned __int8 v18 = v17;
    unint64_t v19 = v15 >> 8;
    uint64_t v35 = a2;
    uint64_t v36 = a3;
    unint64_t v20 = v15 >> 16;
    unint64_t v21 = v15 >> 24;
    uint64_t v37 = a1;
    unint64_t v22 = v15 >> 40;
    unint64_t v25 = HIDWORD(v15);
    unint64_t v26 = HIWORD(v15);
    unint64_t v27 = HIBYTE(v15);
    unint64_t v28 = v17 >> 8;
    unint64_t v29 = v17 >> 16;
    unint64_t v30 = v17 >> 24;
    unint64_t v33 = v17 >> 40;
    unint64_t v34 = HIWORD(v17);
    char v23 = *(void (**)(char *, uint64_t))(v7 + 8);
    unint64_t v31 = HIDWORD(v17);
    unint64_t v32 = HIBYTE(v17);
    v23(v9, v6);
    uuid[0] = v16;
    uuid[1] = v19;
    uuid[2] = v20;
    uuid[3] = v21;
    uuid[4] = v25;
    uuid[5] = v22;
    a1 = v37;
    uuid[6] = v26;
    uuid[7] = v27;
    unsigned __int8 uuid[8] = v18;
    uuid[9] = v28;
    uuid[10] = v29;
    uuid[11] = v30;
    uuid[12] = v31;
    uuid[13] = v33;
    uuid[14] = v34;
    uuid[15] = v32;
    xpc_object_t v14 = xpc_uuid_create(uuid);
  }
  XPCDictionary.subscript.setter((uint64_t)v14);
  return sub_1D769AC0C(a1, &qword_1EBA34390);
}

void (*XPCDictionary.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  uint64_t v7 = malloc(0x70uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *uint64_t v7 = a2;
  uint64_t v8 = sub_1D76F7D04();
  v7[3] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = v9;
  void v7[4] = v9;
  void v7[5] = malloc(*(void *)(v9 + 64));
  size_t v11 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34390) - 8) + 64);
  v7[6] = malloc(v11);
  v7[7] = malloc(v11);
  v7[8] = malloc(v11);
  uint64_t v12 = malloc(v11);
  v7[9] = v12;
  int v13 = *v3;
  xpc_object_t v14 = (const char *)(sub_1D76F8054() + 32);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  xpc_object_t v15 = xpc_dictionary_get_value(v13, v14);
  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  if (v15)
  {
    xpc_uuid_get_uuid(_:)(v15);
    if (v16)
    {
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v12, 1, 1, v8);
    }
    else
    {
      sub_1D76F7CD4();
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, v8);
    }
    swift_unknownObjectRelease();
  }
  else
  {
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v12, 1, 1, v8);
  }
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return sub_1D76C3F58;
}

void sub_1D76C3F58(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  if (a2)
  {
    uint64_t v5 = *(void *)(v2 + 48);
    uint64_t v4 = *(void *)(v2 + 56);
    uint64_t v6 = *(void *)(v2 + 24);
    uint64_t v7 = *(void *)(v2 + 32);
    sub_1D769AC68(v3, v4, &qword_1EBA34390);
    sub_1D769AC68(v4, v5, &qword_1EBA34390);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    {
      swift_bridgeObjectRetain();
      xpc_object_t v8 = 0;
    }
    else
    {
      uint64_t v13 = *(void *)(v2 + 40);
      uint64_t v14 = *(void *)(v2 + 24);
      uint64_t v15 = *(void *)(v2 + 32);
      (*(void (**)(uint64_t, void, uint64_t))(v15 + 32))(v13, *(void *)(v2 + 48), v14);
      swift_bridgeObjectRetain();
      unint64_t v16 = sub_1D76F7CE4();
      char v17 = v16;
      char v19 = v18;
      unint64_t v20 = v16 >> 8;
      unint64_t v21 = v16 >> 16;
      unint64_t v22 = v16 >> 24;
      unint64_t v23 = HIDWORD(v16);
      unint64_t v40 = v16 >> 40;
      unint64_t v42 = HIWORD(v16);
      unint64_t v44 = HIBYTE(v16);
      unint64_t v46 = v18 >> 8;
      unint64_t v48 = v18 >> 16;
      unint64_t v50 = v18 >> 24;
      unint64_t v56 = v18 >> 40;
      unint64_t v58 = HIWORD(v18);
      unint64_t v52 = HIDWORD(v18);
      unint64_t v54 = HIBYTE(v18);
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
      *(unsigned char *)(v2 + 80) = v17;
      *(unsigned char *)(v2 + 81) = v20;
      *(unsigned char *)(v2 + 82) = v21;
      *(unsigned char *)(v2 + 83) = v22;
      *(unsigned char *)(v2 + 84) = v23;
      *(unsigned char *)(v2 + 85) = v40;
      *(unsigned char *)(v2 + 86) = v42;
      *(unsigned char *)(v2 + 87) = v44;
      *(unsigned char *)(v2 + 88) = v19;
      *(unsigned char *)(v2 + 89) = v46;
      *(unsigned char *)(v2 + 90) = v48;
      *(unsigned char *)(v2 + 91) = v50;
      *(unsigned char *)(v2 + 92) = v52;
      *(unsigned char *)(v2 + 93) = v56;
      *(unsigned char *)(v2 + 94) = v58;
      *(unsigned char *)(v2 + 95) = v54;
      xpc_object_t v8 = xpc_uuid_create((const unsigned __int8 *)(v2 + 80));
    }
    unint64_t v25 = *(void **)(v2 + 64);
    uint64_t v24 = *(void **)(v2 + 72);
    unint64_t v27 = *(void **)(v2 + 48);
    unint64_t v26 = *(void **)(v2 + 56);
    unint64_t v28 = *(void **)(v2 + 40);
    XPCDictionary.subscript.setter((uint64_t)v8);
    sub_1D769AC0C((uint64_t)v26, &qword_1EBA34390);
  }
  else
  {
    uint64_t v9 = *(void *)(v2 + 64);
    uint64_t v10 = *(void *)(v2 + 24);
    uint64_t v11 = *(void *)(v2 + 32);
    sub_1D769AC68(v3, v9, &qword_1EBA34390);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    {
      swift_bridgeObjectRetain();
      xpc_object_t v12 = 0;
    }
    else
    {
      uint64_t v30 = *(void *)(v2 + 32);
      uint64_t v29 = *(void *)(v2 + 40);
      uint64_t v31 = *(void *)(v2 + 24);
      (*(void (**)(uint64_t, void, uint64_t))(v30 + 32))(v29, *(void *)(v2 + 64), v31);
      swift_bridgeObjectRetain();
      unint64_t v32 = sub_1D76F7CE4();
      char v33 = v32;
      char v35 = v34;
      unint64_t v36 = v32 >> 8;
      unint64_t v37 = v32 >> 16;
      unint64_t v38 = v32 >> 24;
      unint64_t v39 = HIDWORD(v32);
      unint64_t v41 = v32 >> 40;
      unint64_t v43 = HIWORD(v32);
      unint64_t v45 = HIBYTE(v32);
      unint64_t v47 = v34 >> 8;
      unint64_t v49 = v34 >> 16;
      unint64_t v51 = v34 >> 24;
      unint64_t v57 = v34 >> 40;
      unint64_t v59 = HIWORD(v34);
      unint64_t v53 = HIDWORD(v34);
      unint64_t v55 = HIBYTE(v34);
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
      *(unsigned char *)(v2 + 96) = v33;
      *(unsigned char *)(v2 + 97) = v36;
      *(unsigned char *)(v2 + 98) = v37;
      *(unsigned char *)(v2 + 99) = v38;
      *(unsigned char *)(v2 + 100) = v39;
      *(unsigned char *)(v2 + 101) = v41;
      *(unsigned char *)(v2 + 102) = v43;
      *(unsigned char *)(v2 + 103) = v45;
      *(unsigned char *)(v2 + 104) = v35;
      *(unsigned char *)(v2 + 105) = v47;
      *(unsigned char *)(v2 + 106) = v49;
      *(unsigned char *)(v2 + 107) = v51;
      *(unsigned char *)(v2 + 108) = v53;
      *(unsigned char *)(v2 + 109) = v57;
      *(unsigned char *)(v2 + 110) = v59;
      *(unsigned char *)(v2 + 111) = v55;
      xpc_object_t v12 = xpc_uuid_create((const unsigned __int8 *)(v2 + 96));
    }
    unint64_t v25 = *(void **)(v2 + 64);
    uint64_t v24 = *(void **)(v2 + 72);
    unint64_t v27 = *(void **)(v2 + 48);
    unint64_t v26 = *(void **)(v2 + 56);
    unint64_t v28 = *(void **)(v2 + 40);
    XPCDictionary.subscript.setter((uint64_t)v12);
  }
  sub_1D769AC0C((uint64_t)v24, &qword_1EBA34390);
  free(v24);
  free(v25);
  free(v26);
  free(v27);
  free(v28);

  free((void *)v2);
}

uint64_t sub_1D76C4620(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  a4(v5, v6);
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t sub_1D76C46BC(uint64_t a1)
{
  uint64_t v2 = sub_1D76F7C94();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188788](v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBA34380);
  uint64_t v7 = MEMORY[0x1F4188788](v6 - 8);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188788](v7);
  uint64_t v11 = (char *)&v14 - v10;
  sub_1D769AC68(a1, (uint64_t)&v14 - v10, (uint64_t *)&unk_1EBA34380);
  sub_1D769AC68((uint64_t)v11, (uint64_t)v9, (uint64_t *)&unk_1EBA34380);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v9, 1, v2) == 1)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = 0;
LABEL_5:
    XPCDictionary.subscript.setter(v12);
    return sub_1D769AC0C((uint64_t)v11, (uint64_t *)&unk_1EBA34380);
  }
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v9, v2);
  swift_bridgeObjectRetain();
  sub_1D76F7C64();
  uint64_t result = xpc_date_create_absolute();
  if (result)
  {
    uint64_t v12 = result;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

void sub_1D76C4BD0(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 80);
  if ((a2 & 1) == 0)
  {
    uint64_t v9 = v2[9];
    uint64_t v10 = v2[3];
    uint64_t v11 = v2[4];
    sub_1D769AC68(v3, v9, (uint64_t *)&unk_1EBA34380);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    {
      swift_bridgeObjectRetain();
      uint64_t v12 = 0;
    }
    else
    {
      (*(void (**)(void, void, void))(v2[4] + 32))(v2[6], v2[9], v2[3]);
      swift_bridgeObjectRetain();
      sub_1D76F7C64();
      uint64_t absolute = xpc_date_create_absolute();
      if (!absolute) {
        goto LABEL_16;
      }
      uint64_t v12 = absolute;
      (*(void (**)(void, void))(v2[4] + 8))(v2[6], v2[3]);
    }
    uint64_t v15 = (void *)v2[9];
    uint64_t v14 = (void *)v2[10];
    char v17 = (void *)v2[7];
    unint64_t v16 = (void *)v2[8];
    char v19 = (void *)v2[5];
    unint64_t v18 = (void *)v2[6];
    XPCDictionary.subscript.setter(v12);
    goto LABEL_12;
  }
  uint64_t v5 = v2[7];
  uint64_t v4 = v2[8];
  uint64_t v6 = v2[3];
  uint64_t v7 = v2[4];
  sub_1D769AC68(v3, v4, (uint64_t *)&unk_1EBA34380);
  sub_1D769AC68(v4, v5, (uint64_t *)&unk_1EBA34380);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
  {
    (*(void (**)(void, void, void))(v2[4] + 32))(v2[5], v2[7], v2[3]);
    swift_bridgeObjectRetain();
    sub_1D76F7C64();
    uint64_t v13 = xpc_date_create_absolute();
    if (v13)
    {
      uint64_t v8 = v13;
      (*(void (**)(void, void))(v2[4] + 8))(v2[5], v2[3]);
      goto LABEL_8;
    }
    __break(1u);
LABEL_16:
    __break(1u);
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = 0;
LABEL_8:
  uint64_t v15 = (void *)v2[9];
  uint64_t v14 = (void *)v2[10];
  char v17 = (void *)v2[7];
  unint64_t v16 = (void *)v2[8];
  char v19 = (void *)v2[5];
  unint64_t v18 = (void *)v2[6];
  XPCDictionary.subscript.setter(v8);
  sub_1D769AC0C((uint64_t)v16, (uint64_t *)&unk_1EBA34380);
LABEL_12:
  sub_1D769AC0C((uint64_t)v14, (uint64_t *)&unk_1EBA34380);
  free(v14);
  free(v15);
  free(v16);
  free(v17);
  free(v18);
  free(v19);

  free(v2);
}

uint64_t XPCDictionary.copy(into:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = *v1;
  uint64_t v6 = (void *)swift_allocObject();
  void v6[2] = v2;
  v6[3] = v3;
  v6[4] = v4;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_1D76AB660;
  *(void *)(v7 + 24) = v6;
  v10[4] = sub_1D76C874C;
  void v10[5] = v7;
  v10[0] = MEMORY[0x1E4F143A0];
  v10[1] = 1107296256;
  v10[2] = sub_1D769E44C;
  v10[3] = &block_descriptor_2;
  uint64_t v8 = _Block_copy(v10);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  xpc_dictionary_apply(v5, v8);
  _Block_release(v8);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v5) {
    __break(1u);
  }
  return result;
}

void sub_1D76C4F98(char *key@<X0>, xpc_object_t xdict@<X1>, void *a3@<X8>)
{
  xpc_object_t v6 = xpc_dictionary_get_value(xdict, key);
  xpc_dictionary_set_value(xdict, key, 0);
  *a3 = v6;
}

void sub_1D76C5004(char *key@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *(void **)(v2 + 16);
  xpc_object_t v6 = xpc_dictionary_get_value(v5, key);
  xpc_dictionary_set_value(v5, key, 0);
  *a2 = v6;
}

void *sub_1D76C5070(void *(*a1)(uint64_t *__return_ptr, void *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D76C50D8(a1, a2, a3, a4, (uint64_t *)&unk_1EA83A930, (uint64_t (*)(void))sub_1D76C8CA8);
}

void *sub_1D76C50A4(void *(*a1)(uint64_t *__return_ptr, void *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D76C50D8(a1, a2, a3, a4, &qword_1EA83A8F8, (uint64_t (*)(void))sub_1D76C8CA8);
}

void *sub_1D76C50D8(void *(*a1)(uint64_t *__return_ptr, void *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if ((a4 & 0x1000000000000000) != 0 || !(a4 & 0x2000000000000000 | a3 & 0x1000000000000000))
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t result = (void *)sub_1D76F8454();
    if (!v6) {
      return (void *)v15[2];
    }
  }
  else
  {
    MEMORY[0x1F4188788](a1);
    if ((a4 & 0x2000000000000000) != 0)
    {
      v15[0] = a3;
      v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      uint64_t result = a1(&v14, v15);
      if (!v6) {
        return (void *)v14;
      }
    }
    else
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        uint64_t v11 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v12 = a3 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v11 = sub_1D76F8534();
      }
      return (void *)sub_1D76C7AE8(v11, v12, a6);
    }
  }
  return result;
}

BOOL XPCDictionary.isEmpty.getter()
{
  return xpc_dictionary_get_count(*v0) == 0;
}

size_t XPCDictionary.count.getter()
{
  return xpc_dictionary_get_count(*v0);
}

uint64_t XPCDictionary.forEach(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v2;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  sub_1D76C5314((uint64_t)sub_1D76C877C, v7, v6);
  if (v3) {
    return swift_release();
  }
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

{
  void **v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t result;
  char isEscapingClosureAtFileLocation;
  void v8[4];

  v8[3] = a2;
  uint64_t v4 = *v2;
  v8[2] = a1;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_1D76C87A4;
  *(void *)(v5 + 24) = v8;
  sub_1D76C5314((uint64_t)sub_1D76C87A4, v5, v4);
  if (v3) {
    return swift_release();
  }
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1D76C5314(uint64_t a1, uint64_t a2, void *a3)
{
  id v12 = 0;
  uint64_t v6 = (void *)swift_allocObject();
  void v6[2] = a1;
  v6[3] = a2;
  v6[4] = &v12;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_1D76C8E74;
  *(void *)(v7 + 24) = v6;
  aBlock[4] = sub_1D76C8F30;
  aBlock[5] = v7;
  aBlock[0] = MEMORY[0x1E4F143A0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1D769E44C;
  aBlock[3] = &block_descriptor_98;
  uint64_t v8 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  xpc_dictionary_apply(a3, v8);
  _Block_release(v8);
  LOBYTE(a3) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (a3)
  {
    __break(1u);
  }
  else
  {
    if (v12)
    {
      id v10 = v12;
      swift_willThrow();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1D76C54B0(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v4 = sub_1D76F80B4();
  a3(v4);
  swift_bridgeObjectRelease();
  return 1;
}

void *sub_1D76C5618(uint64_t a1, uint64_t a2, xpc_object_t xdict)
{
  int64_t count = xpc_dictionary_get_count(xdict);
  uint64_t v8 = (void *)MEMORY[0x1E4FBC860];
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || count > v8[3] >> 1)
  {
    if (v8[2] <= count) {
      int64_t v10 = count;
    }
    else {
      int64_t v10 = v8[2];
    }
    char isUniquelyReferenced_nonNull_native = sub_1D76E0404(isUniquelyReferenced_nonNull_native, v10, 0, v8);
    uint64_t v8 = isUniquelyReferenced_nonNull_native;
  }
  char v17 = v8;
  uint64_t v11 = MEMORY[0x1F4188788](isUniquelyReferenced_nonNull_native);
  v16[6] = &v17;
  v16[7] = a1;
  v16[8] = a2;
  MEMORY[0x1F4188788](v11);
  v16[2] = sub_1D76C8E0C;
  v16[3] = v12;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = sub_1D76C87A4;
  *(void *)(v13 + 24) = v16;
  sub_1D76C5314((uint64_t)sub_1D76C87A4, v13, xdict);
  if (v3)
  {
    swift_release();
    return (void *)swift_bridgeObjectRelease();
  }
  else
  {
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    uint64_t result = (void *)swift_release();
    if (isEscapingClosureAtFileLocation) {
      __break(1u);
    }
    else {
      return v17;
    }
  }
  return result;
}

uint64_t sub_1D76C57D4(uint64_t a1, uint64_t a2, xpc_object_t xdict)
{
  uint64_t v16 = MEMORY[0x1E4FBC860];
  size_t count = xpc_dictionary_get_count(xdict);
  sub_1D76C7B28(count, 0);
  sub_1D76F81D4();
  uint64_t v13 = &v16;
  uint64_t v14 = a1;
  uint64_t v15 = a2;
  void v11[2] = sub_1D76C8DDC;
  v11[3] = &v12;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_1D76C87A4;
  *(void *)(v8 + 24) = v11;
  sub_1D76C5314((uint64_t)sub_1D76C87A4, v8, xdict);
  if (v3)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    uint64_t result = swift_release();
    if (isEscapingClosureAtFileLocation) {
      __break(1u);
    }
    else {
      return v16;
    }
  }
  return result;
}

uint64_t XPCDictionary.map<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v20 = sub_1D76F7E94();
  xpc_dictionary_get_count(v7);
  sub_1D76F8244();
  sub_1D76F81E4();
  uint64_t v16 = a3;
  char v17 = &v20;
  uint64_t v18 = a1;
  uint64_t v19 = a2;
  uint64_t v13 = sub_1D76C87CC;
  uint64_t v14 = &v15;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_1D76C87A4;
  *(void *)(v8 + 24) = &v12;
  sub_1D76C5314((uint64_t)sub_1D76C87A4, v8, v7);
  if (v11)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    uint64_t result = swift_release();
    if (isEscapingClosureAtFileLocation) {
      __break(1u);
    }
    else {
      return v20;
    }
  }
  return result;
}

uint64_t sub_1D76C5A90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, void *(*a5)(void *__return_ptr))
{
  uint64_t result = (uint64_t)a5(v14);
  if (!v5)
  {
    uint64_t v8 = v14[0];
    uint64_t v9 = v14[1];
    int64_t v10 = (void *)*a4;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *a4 = (uint64_t)v10;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1D76E0404(0, v10[2] + 1, 1, v10);
      int64_t v10 = (void *)result;
      *a4 = result;
    }
    unint64_t v12 = v10[2];
    unint64_t v11 = v10[3];
    if (v12 >= v11 >> 1)
    {
      uint64_t result = (uint64_t)sub_1D76E0404((void *)(v11 > 1), v12 + 1, 1, v10);
      int64_t v10 = (void *)result;
      *a4 = result;
    }
    v10[2] = v12 + 1;
    uint64_t v13 = &v10[2 * v12];
    v13[4] = v8;
    void v13[5] = v9;
  }
  return result;
}

void *sub_1D76C5B68(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *(*a5)(uint64_t *__return_ptr))
{
  uint64_t result = a5(&v8);
  if (!v5)
  {
    MEMORY[0x1D94755D0](result);
    if (*(void *)((*a4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      sub_1D76F81F4();
    }
    sub_1D76F8224();
    return (void *)sub_1D76F81D4();
  }
  return result;
}

uint64_t sub_1D76C5C04(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1F4188788](a1);
  uint64_t result = v3(v2);
  if (!v1)
  {
    sub_1D76F8244();
    return sub_1D76F8234();
  }
  return result;
}

uint64_t XPCDictionary.keys.getter()
{
  return sub_1D76C5D2C((uint64_t)sub_1D76C5CE0, (uint64_t (*)(uint64_t, void, void, void, void))sub_1D76C5618);
}

uint64_t sub_1D76C5CE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  return swift_bridgeObjectRetain();
}

uint64_t XPCDictionary.values.getter()
{
  return sub_1D76C5D2C((uint64_t)sub_1D76C5D6C, (uint64_t (*)(uint64_t, void, void, void, void))sub_1D76C57D4);
}

uint64_t sub_1D76C5D2C(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void))
{
  return a2(a1, 0, *v2, v2[1], v2[2]);
}

uint64_t sub_1D76C5D6C@<X0>(uint64_t a1@<X2>, void *a2@<X8>)
{
  *a2 = a1;
  return swift_unknownObjectRetain();
}

const uint8_t *XPCDictionary.sideChannel.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (const char *)(sub_1D76F8054() + 32);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  xpc_object_t v3 = xpc_dictionary_get_value(v1, v2);
  swift_bridgeObjectRelease_n();
  swift_unknownObjectRelease_n();
  swift_release();
  if (!v3) {
    return 0;
  }
  xpc_connection_t v4 = XPCDictionary.underlyingConnection.getter();
  if (v4)
  {
    xpc_connection_t v5 = v4;
    type metadata accessor for XPCObjectDecoder();
    *(void *)(swift_initStackObject() + 16) = v5;
    uint64_t v6 = sub_1D76BE980((uint64_t)v3);
    swift_release();
  }
  else
  {
    sub_1D76B10C8();
    swift_allocError();
    uint64_t v6 = v7;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F28);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1D76FA300;
    *(void *)(inited + 32) = sub_1D76F7FF4();
    *(void *)(inited + 40) = v9;
    *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
    *(void *)(inited + 48) = 0xD00000000000001FLL;
    *(void *)(inited + 56) = 0x80000001D76FE190;
    unint64_t v10 = sub_1D769B168(inited);
    Swift::Int32 v11 = sub_1D76EE0BC((ValueMetadata *)0x3E9);
    XPCError.init(code:userInfo:)(v11, (Swift::OpaquePointer)v10);
    swift_willThrow();
  }
  swift_unknownObjectRelease();
  return v6;
}

uint64_t XPCDictionary.setSideChannel(_:withUnderlyingConnection:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v2;
  type metadata accessor for XPCObjectEncoder();
  *(void *)(swift_initStackObject() + 16) = a2;
  swift_retain();
  uint64_t v7 = sub_1D76BE544(a1);
  if (!v3)
  {
    uint64_t v8 = (void *)v7;
    uint64_t v9 = sub_1D76F8054();
    xpc_dictionary_set_value(v6, (const char *)(v9 + 32), v8);
    swift_release();
    swift_unknownObjectRelease();
  }
  return swift_release();
}

BOOL static XPCDictionary.== infix(_:_:)(xpc_object_t *a1, xpc_object_t *a2)
{
  return xpc_equal(*a1, *a2);
}

BOOL sub_1D76C603C(xpc_object_t *a1, xpc_object_t *a2)
{
  return xpc_equal(*a1, *a2);
}

uint64_t XPCDictionary.hash(into:)()
{
  xpc_hash(*v0);
  return sub_1D76F8D34();
}

uint64_t XPCDictionary.hashValue.getter()
{
  uint64_t v1 = *v0;
  sub_1D76F8D24();
  xpc_hash(v1);
  sub_1D76F8D34();
  return sub_1D76F8D54();
}

uint64_t sub_1D76C60D8()
{
  uint64_t v1 = *v0;
  sub_1D76F8D24();
  xpc_hash(v1);
  sub_1D76F8D34();
  return sub_1D76F8D54();
}

uint64_t sub_1D76C6124()
{
  xpc_hash(*v0);
  return sub_1D76F8D34();
}

uint64_t sub_1D76C6154()
{
  uint64_t v1 = *v0;
  sub_1D76F8D24();
  xpc_hash(v1);
  sub_1D76F8D34();
  return sub_1D76F8D54();
}

uint64_t XPCDictionary.debugDescription.getter()
{
  uint64_t v1 = (void *)MEMORY[0x1D9476EE0](*v0);
  uint64_t v2 = sub_1D76F80B4();
  free(v1);
  return v2;
}

uint64_t sub_1D76C61E8()
{
  uint64_t v1 = (void *)MEMORY[0x1D9476EE0](*v0);
  uint64_t v2 = sub_1D76F80B4();
  free(v1);
  return v2;
}

uint64_t XPCDictionary.decode<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  xpc_connection_t v5 = XPCDictionary.underlyingConnection.getter();
  type metadata accessor for XPCObjectDecoder();
  *(void *)(swift_allocObject() + 16) = v5;
  XPCObjectDecoder.decode<A>(_:from:)(a2, v4);
  return swift_release();
}

void XPCDictionary.init(nsDictionary:)(void *a1@<X0>, void *a2@<X8>)
{
  xpc_object_t v4 = sub_1D76C633C(a1);

  *a2 = v4;
  a2[1] = 0xD000000000000019;
  a2[2] = 0x80000001D76FD660;
}

xpc_object_t sub_1D76C633C(id a1)
{
  uint64_t v2 = sub_1D76F7BB4();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188788](v2);
  xpc_connection_t v5 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (unint64_t *)sub_1D76F8034();
  uint64_t v7 = *(v6 - 1);
  MEMORY[0x1F4188788](v6);
  uint64_t v9 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  self;
  uint64_t v10 = swift_dynamicCastObjCClass();
  if (v10)
  {
    Swift::Int32 v11 = (void *)v10;
    a1 = a1;
    objc_msgSend(v11, sel_timeIntervalSince1970);
    double v13 = v12 * 1000000000.0;
    if ((~*(void *)&v13 & 0x7FF0000000000000) != 0)
    {
      if (v13 > -9.22337204e18)
      {
        if (v13 < 9.22337204e18)
        {
          xpc_object_t v14 = xpc_date_create((uint64_t)v13);
LABEL_6:
          xpc_object_t v15 = v14;
LABEL_7:

          return v15;
        }
        goto LABEL_60;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  self;
  uint64_t v17 = swift_dynamicCastObjCClass();
  if (!v17)
  {
    self;
    uint64_t v28 = swift_dynamicCastObjCClass();
    if (v28)
    {
      uint64_t v29 = (void *)v28;
      a1 = a1;
      uint64_t v30 = (void *)sub_1D76F8214();
      v30[2] = 16;
      v30[5] = 0;
      v30[4] = 0;
      uint64_t v31 = (const unsigned __int8 *)(v30 + 4);
      objc_msgSend(v29, sel_getUUIDBytes_, v30 + 4);
      xpc_object_t v15 = xpc_uuid_create(v31);
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    self;
    if (swift_dynamicCastObjCClass()) {
      goto LABEL_22;
    }
    self;
    if (swift_dynamicCastObjCClass())
    {
      id v56 = a1;
      xpc_object_t v55 = xpc_array_create(0, 0);
      sub_1D76F8374();
      sub_1D76F7BA4();
      if (v78)
      {
        uint64_t v6 = &qword_1EA83A908;
        while (1)
        {
          sub_1D769B2A0(&v77, v75);
          sub_1D76BBA90(0, &qword_1EA83A908);
          if (!swift_dynamicCast()) {
            break;
          }
          unint64_t v57 = (void *)v73[0];
          unint64_t v58 = (void *)sub_1D76C633C(v73[0]);
          xpc_array_append_value(v55, v58);

          swift_unknownObjectRelease();
          sub_1D76F7BA4();
          if (!v78) {
            goto LABEL_35;
          }
        }
        while (1)
        {
LABEL_65:
          sub_1D76F85B4();
          __break(1u);
LABEL_66:
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v6);
        }
      }
LABEL_35:
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);

      return v55;
    }
    self;
    uint64_t v59 = swift_dynamicCastObjCClass();
    if (v59)
    {
      CFNumberRef v60 = (const __CFNumber *)v59;
      a1 = a1;
      CFNumberType Type = CFNumberGetType(v60);
      if ((unint64_t)Type <= kCFNumberCGFloatType && ((1 << Type) & 0xCF80) == 0)
      {
        if (((1 << Type) & 0x13060) != 0)
        {
          [(__CFNumber *)v60 doubleValue];
          xpc_object_t v14 = xpc_double_create(v62);
          goto LABEL_6;
        }
        if (((1 << Type) & 0x1E) != 0)
        {
          xpc_object_t v14 = xpc_int64_create((int64_t)[(__CFNumber *)v60 longLongValue]);
          goto LABEL_6;
        }
      }
      xpc_object_t v14 = xpc_uint64_create((uint64_t)[(__CFNumber *)v60 unsignedLongLongValue]);
      goto LABEL_6;
    }
LABEL_47:
    self;
    if (swift_dynamicCastObjCClass())
    {
      id v71 = a1;
      xpc_object_t v55 = xpc_dictionary_create(0, 0, 0);
      sub_1D76F8274();
      swift_retain();
      sub_1D76F8284();
      if (v78)
      {
        uint64_t v6 = (unint64_t *)v74;
        while (1)
        {
          sub_1D769B2A0(&v77, v75);
          sub_1D769B2A0(&v79, v76);
          sub_1D769A9C4((uint64_t)v75, (uint64_t)v73);
          sub_1D769A9C4((uint64_t)v76, (uint64_t)v74);
          sub_1D76BBA90(0, &qword_1EA83A900);
          if (!swift_dynamicCast()) {
            goto LABEL_66;
          }
          uint64_t v64 = v72;
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v74);
          sub_1D769A9C4((uint64_t)v75, (uint64_t)v73);
          sub_1D769A9C4((uint64_t)v76, (uint64_t)v74);
          sub_1D76BBA90(0, &qword_1EA83A908);
          if (!swift_dynamicCast()) {
            break;
          }
          uint64_t v65 = v72;
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v73);
          id v66 = v64;
          uint64_t v67 = (const char *)objc_msgSend(v66, sel_UTF8String);
          if (!v67) {
            goto LABEL_62;
          }
          unint64_t v68 = v67;
          int64_t v69 = (void *)sub_1D76C633C(v65);
          xpc_dictionary_set_value(v55, v68, v69);

          swift_unknownObjectRelease();
          sub_1D769AC0C((uint64_t)v75, (uint64_t *)&unk_1EA83A910);
          sub_1D76F8284();
          if (!v78) {
            goto LABEL_54;
          }
        }
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v73);
        goto LABEL_65;
      }
LABEL_54:

      swift_release_n();
      return v55;
    }
LABEL_22:
    return xpc_null_create();
  }
  uint64_t v18 = (void *)v17;
  a1 = a1;
  uint64_t v19 = (void *)sub_1D76F7FC4();
  unsigned int v20 = objc_msgSend(v18, sel_hasPrefix_, v19);

  if (!v20)
  {
    unint64_t v32 = (void *)sub_1D76F7FC4();
    unsigned int v33 = objc_msgSend(v18, sel_hasPrefix_, v32);

    if (!v33)
    {
      unint64_t v40 = (void *)sub_1D76F7FC4();
      unsigned int v41 = objc_msgSend(v18, sel_hasPrefix_, v40);

      if (v41)
      {
        unint64_t v42 = (void *)sub_1D76F7FC4();
        unint64_t v43 = (void *)sub_1D76F7FC4();
        id v44 = objc_msgSend(v18, sel_stringByReplacingOccurrencesOfString_withString_, v42, v43);

        uint64_t v45 = sub_1D76F7FF4();
        unint64_t v47 = v46;

        uint64_t v48 = sub_1D76C7590(v45, v47);
        if ((v49 & 1) == 0)
        {
          xpc_object_t v14 = xpc_uint64_create(v48);
          goto LABEL_6;
        }
        goto LABEL_63;
      }
      sub_1D76F8014();
      uint64_t v51 = sub_1D76F8024();
      (*(void (**)(char *, unint64_t *))(v7 + 8))(v9, v6);
      id v52 = a1;
      unint64_t v53 = (const char *)objc_msgSend(v18, sel_cStringUsingEncoding_, v51);
      id v54 = v18;
      if (!v53)
      {
LABEL_64:
        __break(1u);
        goto LABEL_65;
      }
      xpc_object_t v55 = xpc_string_create(v53);

      return v55;
    }
    unint64_t v34 = (void *)sub_1D76F7FC4();
    char v35 = (void *)sub_1D76F7FC4();
    id v36 = objc_msgSend(v18, sel_stringByReplacingOccurrencesOfString_withString_, v34, v35);

    uint64_t v37 = sub_1D76F7FF4();
    uint64_t v39 = v38;

    if (v37 == 1702195828 && v39 == 0xE400000000000000 || (sub_1D76F89E4() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      BOOL v50 = 1;
LABEL_27:
      xpc_object_t v14 = xpc_BOOL_create(v50);
      goto LABEL_6;
    }
    if (v37 == 0x65736C6166 && v39 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
      BOOL v50 = 0;
      goto LABEL_27;
    }
    char v63 = sub_1D76F89E4();
    swift_bridgeObjectRelease();
    BOOL v50 = 0;
    if (v63) {
      goto LABEL_27;
    }
    __break(1u);
    goto LABEL_47;
  }
  unint64_t v21 = (void *)sub_1D76F7FC4();
  unint64_t v22 = (void *)sub_1D76F7FC4();
  id v23 = objc_msgSend(v18, sel_stringByReplacingOccurrencesOfString_withString_, v21, v22);

  sub_1D76F7FF4();
  id v24 = objc_allocWithZone(MEMORY[0x1E4F29128]);
  unint64_t v25 = (void *)sub_1D76F7FC4();
  swift_bridgeObjectRelease();
  id v26 = objc_msgSend(v24, sel_initWithUUIDString_, v25);

  if (!v26) {
    goto LABEL_61;
  }
  uint64_t v27 = sub_1D76C633C(v26);

  return (xpc_object_t)v27;
}

NSDictionary_optional __swiftcall XPCDictionary.toNSDictionary()()
{
  id v1 = sub_1D76C6E44(*v0);
  self;
  uint64_t v2 = (objc_class *)swift_dynamicCastObjCClass();
  if (!v2)
  {

    uint64_t v2 = 0;
  }
  result.value.super.isa = v2;
  result.is_nil = v3;
  return result;
}

id sub_1D76C6E44(uint64_t isEscapingClosureAtFileLocation)
{
  uint64_t v2 = sub_1D76F8034();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188788](v2);
  xpc_connection_t v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1D94771B0](isEscapingClosureAtFileLocation);
  if (XPCTypeDate == v6)
  {
    xpc_date_get_value((xpc_object_t)isEscapingClosureAtFileLocation);
    id v7 = objc_allocWithZone(MEMORY[0x1E4F1C9C8]);
    uint64_t v8 = sel_initWithTimeIntervalSince1970_;
    goto LABEL_15;
  }
  if (XPCTypeString != v6)
  {
    if (XPCTypeUUID != v6)
    {
      if (XPCTypeBool == v6)
      {
        uint64_t aBlock = 0;
        unint64_t v26 = 0xE000000000000000;
        sub_1D76F8464();
        swift_bridgeObjectRelease();
        uint64_t aBlock = 0x72756372654D5F5FLL;
        unint64_t v26 = 0xEF5F4C4F4F425F79;
        xpc_BOOL_get_value((xpc_object_t)isEscapingClosureAtFileLocation);
      }
      else
      {
        if (XPCTypeNull == v6) {
          goto LABEL_11;
        }
        if (XPCTypeInt64 == v6)
        {
          xpc_int64_get_value((xpc_object_t)isEscapingClosureAtFileLocation);
          id v7 = objc_allocWithZone(NSNumber);
          uint64_t v8 = sel_initWithLongLong_;
          return [v7 v8];
        }
        if (XPCTypeUInt64 != v6)
        {
          if (XPCTypeDouble != v6)
          {
            if (XPCTypeArray == v6)
            {
              id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1CA48]), sel_init);
              uint64_t v16 = swift_allocObject();
              *(void *)(v16 + 16) = v15;
              uint64_t v17 = swift_allocObject();
              *(void *)(v17 + 16) = sub_1D76C8D10;
              *(void *)(v17 + 24) = v16;
              uint64_t v29 = sub_1D76C8D68;
              uint64_t v30 = v17;
              uint64_t aBlock = MEMORY[0x1E4F143A0];
              unint64_t v26 = 1107296256;
              uint64_t v27 = sub_1D76C77F0;
              uint64_t v28 = &block_descriptor_78;
              uint64_t v18 = _Block_copy(&aBlock);
              id v11 = v15;
              swift_retain();
              swift_release();
              xpc_array_apply((xpc_object_t)isEscapingClosureAtFileLocation, v18);
              _Block_release(v18);
              char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
              swift_release();
              swift_release();
              if ((isEscapingClosureAtFileLocation & 1) == 0) {
                return v11;
              }
              __break(1u);
            }
            else if (XPCTypeDictionary != v6)
            {
LABEL_11:
              id v7 = objc_allocWithZone(MEMORY[0x1E4F1CA98]);
              uint64_t v8 = sel_init;
              return [v7 v8];
            }
            id v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1CA60]), sel_init);
            uint64_t v20 = swift_allocObject();
            *(void *)(v20 + 16) = v19;
            uint64_t v21 = swift_allocObject();
            *(void *)(v21 + 16) = sub_1D76C8CF8;
            *(void *)(v21 + 24) = v20;
            uint64_t v29 = sub_1D76C8F30;
            uint64_t v30 = v21;
            uint64_t aBlock = MEMORY[0x1E4F143A0];
            unint64_t v26 = 1107296256;
            uint64_t v27 = sub_1D769E44C;
            uint64_t v28 = &block_descriptor_69;
            unint64_t v22 = _Block_copy(&aBlock);
            id v11 = v19;
            swift_retain();
            swift_release();
            xpc_dictionary_apply((xpc_object_t)isEscapingClosureAtFileLocation, v22);
            _Block_release(v22);
            char v23 = swift_isEscapingClosureAtFileLocation();
            swift_release();
            id result = (id)swift_release();
            if (v23)
            {
              __break(1u);
              goto LABEL_34;
            }
            return v11;
          }
          xpc_double_get_value((xpc_object_t)isEscapingClosureAtFileLocation);
          id v7 = objc_allocWithZone(NSNumber);
          uint64_t v8 = sel_initWithDouble_;
LABEL_15:
          return [v7 v8];
        }
        uint64_t aBlock = 0;
        unint64_t v26 = 0xE000000000000000;
        sub_1D76F8464();
        swift_bridgeObjectRelease();
        uint64_t aBlock = 0x72756372654D5F5FLL;
        unint64_t v26 = 0xEF5F746E49555F79;
        v24[1] = xpc_uint64_get_value((xpc_object_t)isEscapingClosureAtFileLocation);
        sub_1D76F87A4();
      }
      sub_1D76F80A4();
      swift_bridgeObjectRelease();
      id v11 = (id)sub_1D76F7FC4();
      swift_bridgeObjectRelease();
      return v11;
    }
LABEL_21:
    id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F29128]), sel_initWithUUIDBytes_, xpc_uuid_get_bytes((xpc_object_t)isEscapingClosureAtFileLocation));
    uint64_t aBlock = 0;
    unint64_t v26 = 0xE000000000000000;
    sub_1D76F8464();
    swift_bridgeObjectRelease();
    uint64_t aBlock = 0x72756372654D5F5FLL;
    unint64_t v26 = 0xEF5F444955555F79;
    id v13 = objc_msgSend(v12, sel_UUIDString);
    sub_1D76F7FF4();

    sub_1D76F80A4();
    swift_bridgeObjectRelease();
    uint64_t v14 = sub_1D76F7FC4();

    swift_bridgeObjectRelease();
    return (id)v14;
  }
  id result = (id)xpc_string_get_string_ptr((xpc_object_t)isEscapingClosureAtFileLocation);
  if (result)
  {
    char isEscapingClosureAtFileLocation = (uint64_t)result;
    sub_1D76F8014();
    uint64_t v10 = sub_1D76F8024();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    id v11 = objc_msgSend(objc_allocWithZone(NSString), sel_initWithCString_encoding_, isEscapingClosureAtFileLocation, v10);
    if (v11) {
      return v11;
    }
    __break(1u);
    goto LABEL_21;
  }
LABEL_34:
  __break(1u);
  return result;
}

unint64_t sub_1D76C7590(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = HIBYTE(a2) & 0xF;
  uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v6)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    unint64_t v8 = (unint64_t)sub_1D76C7BE8(a1, a2, 10);
    char v10 = v22;
    goto LABEL_39;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0) {
      id v7 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      id v7 = (unsigned __int8 *)sub_1D76F8534();
    }
    unint64_t v8 = (unint64_t)sub_1D76C7CD0(v7, v5, 10);
    char v10 = v9 & 1;
    goto LABEL_39;
  }
  v23[0] = a1;
  v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (a1 == 43)
  {
    if (!v4) {
      goto LABEL_52;
    }
    if (v4 == 1 || (BYTE1(a1) - 48) > 9u) {
      goto LABEL_36;
    }
    unint64_t v8 = (BYTE1(a1) - 48);
    uint64_t v15 = v4 - 2;
    if (v15)
    {
      uint64_t v16 = (unsigned __int8 *)v23 + 2;
      while (1)
      {
        unsigned int v17 = *v16 - 48;
        if (v17 > 9) {
          goto LABEL_36;
        }
        if (!is_mul_ok(v8, 0xAuLL)) {
          goto LABEL_36;
        }
        BOOL v14 = __CFADD__(10 * v8, v17);
        unint64_t v8 = 10 * v8 + v17;
        if (v14) {
          goto LABEL_36;
        }
        char v10 = 0;
        ++v16;
        if (!--v15) {
          goto LABEL_39;
        }
      }
    }
LABEL_38:
    char v10 = 0;
    goto LABEL_39;
  }
  if (a1 != 45)
  {
    if (!v4 || (a1 - 48) > 9u) {
      goto LABEL_36;
    }
    unint64_t v8 = (a1 - 48);
    uint64_t v18 = v4 - 1;
    if (v18)
    {
      uint64_t v20 = (unsigned __int8 *)v23 + 1;
      while (1)
      {
        unsigned int v21 = *v20 - 48;
        if (v21 > 9) {
          goto LABEL_36;
        }
        if (!is_mul_ok(v8, 0xAuLL)) {
          goto LABEL_36;
        }
        BOOL v14 = __CFADD__(10 * v8, v21);
        unint64_t v8 = 10 * v8 + v21;
        if (v14) {
          goto LABEL_36;
        }
        char v10 = 0;
        ++v20;
        if (!--v18) {
          goto LABEL_39;
        }
      }
    }
    goto LABEL_38;
  }
  if (v4)
  {
    if (v4 != 1 && (BYTE1(a1) - 48) <= 9u)
    {
      unint64_t v2 = 0;
      unint64_t v8 = -(uint64_t)(BYTE1(a1) - 48);
      if (BYTE1(a1) == 48)
      {
        uint64_t v11 = v4 - 2;
        if (v11)
        {
          id v12 = (unsigned __int8 *)v23 + 2;
          while (1)
          {
            unsigned int v13 = *v12 - 48;
            if (v13 > 9) {
              goto LABEL_36;
            }
            if (!is_mul_ok(v8, 0xAuLL)) {
              goto LABEL_36;
            }
            BOOL v14 = 10 * v8 >= v13;
            unint64_t v8 = 10 * v8 - v13;
            if (!v14) {
              goto LABEL_36;
            }
            char v10 = 0;
            ++v12;
            if (!--v11) {
              goto LABEL_39;
            }
          }
        }
        goto LABEL_38;
      }
      goto LABEL_53;
    }
LABEL_36:
    unint64_t v8 = 0;
    char v10 = 1;
    goto LABEL_39;
  }
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  char v10 = 1;
  unint64_t v8 = v2;
LABEL_39:
  swift_bridgeObjectRelease();
  if (v10) {
    return 0;
  }
  else {
    return v8;
  }
}

uint64_t sub_1D76C77F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_unknownObjectRetain();
  char v6 = v5(a2, a3);
  swift_unknownObjectRelease();
  return v6 & 1;
}

uint64_t sub_1D76C7848(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = sub_1D76F80B4();
  uint64_t v7 = v6;
  unint64_t v8 = (void *)sub_1D76C6E44(a2);
  swift_bridgeObjectRetain();
  objc_msgSend(a3, sel___swift_setObject_forKeyedSubscript_, v8, sub_1D76F8C74(), v5, v7);
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  return 1;
}

unint64_t sub_1D76C78E4()
{
  unint64_t result = qword_1EA83A898;
  if (!qword_1EA83A898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83A898);
  }
  return result;
}

uint64_t sub_1D76C7938(void *a1, uint64_t a2, char a3)
{
  uint64_t v11 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A8D0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188788](v5);
  unint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A8D8);
  sub_1D76BBB88(&qword_1EA83A8E0, &qword_1EA83A8D8);
  sub_1D76F8DA4();
  if (a3)
  {
    char v14 = 0;
    sub_1D76C8C00();
  }
  else
  {
    uint64_t v12 = v11;
    char v13 = 1;
    sub_1D76C8C54();
  }
  sub_1D76F8754();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1D76C7AE8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t result = a3();
  if (!v3) {
    return v5;
  }
  return result;
}

uint64_t sub_1D76C7B28(uint64_t a1, char a2)
{
  unint64_t v5 = *v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  uint64_t *v2 = v5;
  uint64_t v7 = 0;
  if ((result & 1) != 0 && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    if (a1 <= *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      return result;
    }
    uint64_t v7 = 1;
  }
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_1D76F85C4();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 <= a1) {
    uint64_t v9 = a1;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t result = MEMORY[0x1D94758C0](v7, v9, a2 & 1, v5);
  uint64_t *v2 = result;
  return result;
}

unsigned __int8 *sub_1D76C7BE8(uint64_t a1, uint64_t a2, int64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_1D76F8124();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = sub_1D76C7F4C();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    uint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v7 = (unsigned __int8 *)sub_1D76F8534();
  }
LABEL_7:
  uint64_t v11 = sub_1D76C7CD0(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

unsigned __int8 *sub_1D76C7CD0(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            unint64_t v9 = 0;
            for (uint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              if (!is_mul_ok(v9, a3)) {
                return 0;
              }
              unint64_t v13 = v9 * a3;
              unsigned __int8 v14 = v11 + v12;
              BOOL v15 = v13 >= v14;
              unint64_t v9 = v13 - v14;
              if (!v15) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      unsigned __int8 v25 = a3 + 48;
      unsigned __int8 v26 = a3 + 55;
      unsigned __int8 v27 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v25 = 58;
      }
      else
      {
        unsigned __int8 v27 = 97;
        unsigned __int8 v26 = 65;
      }
      if (result)
      {
        unint64_t v28 = 0;
        do
        {
          unsigned int v29 = *result;
          if (v29 < 0x30 || v29 >= v25)
          {
            if (v29 < 0x41 || v29 >= v26)
            {
              if (v29 < 0x61 || v29 >= v27) {
                return 0;
              }
              char v30 = -87;
            }
            else
            {
              char v30 = -55;
            }
          }
          else
          {
            char v30 = -48;
          }
          if (!is_mul_ok(v28, a3)) {
            return 0;
          }
          unint64_t v31 = v28 * a3;
          unsigned __int8 v32 = v29 + v30;
          BOOL v15 = __CFADD__(v31, v32);
          unint64_t v28 = v31 + v32;
          if (v15) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)v28;
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  uint64_t v16 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v17 = a3 + 48;
  unsigned __int8 v18 = a3 + 55;
  unsigned __int8 v19 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v17 = 58;
  }
  else
  {
    unsigned __int8 v19 = 97;
    unsigned __int8 v18 = 65;
  }
  if (!result) {
    return 0;
  }
  unint64_t v9 = 0;
  uint64_t v20 = result + 1;
  do
  {
    unsigned int v21 = *v20;
    if (v21 < 0x30 || v21 >= v17)
    {
      if (v21 < 0x41 || v21 >= v18)
      {
        if (v21 < 0x61 || v21 >= v19) {
          return 0;
        }
        char v22 = -87;
      }
      else
      {
        char v22 = -55;
      }
    }
    else
    {
      char v22 = -48;
    }
    if (!is_mul_ok(v9, a3)) {
      return 0;
    }
    unint64_t v23 = v9 * a3;
    unsigned __int8 v24 = v21 + v22;
    BOOL v15 = __CFADD__(v23, v24);
    unint64_t v9 = v23 + v24;
    if (v15) {
      return 0;
    }
    ++v20;
    --v16;
  }
  while (v16);
  return (unsigned __int8 *)v9;
}

uint64_t sub_1D76C7F4C()
{
  unint64_t v0 = sub_1D76F8134();
  uint64_t v4 = sub_1D76C7FCC(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1D76C7FCC(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = sub_1D76C8124(a1, a2, a3, a4);
    if (v9)
    {
      uint64_t v10 = v9;
      unsigned int v11 = sub_1D76BC880(v9, 0);
      unint64_t v12 = sub_1D76C8224((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
LABEL_11:
        sub_1D76F8534();
LABEL_4:
        JUMPOUT(0x1D94754A0);
      }
    }
    else
    {
      unsigned int v11 = (void *)MEMORY[0x1E4FBC860];
    }
    uint64_t v13 = MEMORY[0x1D94754A0](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x1D94754A0]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

uint64_t sub_1D76C8124(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v5 = a3;
  unint64_t v6 = a2;
  unint64_t v7 = a1;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((a1 & 0xC) == 4 << v8)
  {
    a1 = sub_1D76BC8E8(a1, a3, a4);
    unint64_t v7 = a1;
  }
  if ((v6 & 0xC) == v9)
  {
    a1 = sub_1D76BC8E8(v6, v5, v4);
    unint64_t v6 = a1;
    if ((v4 & 0x1000000000000000) == 0) {
      return (v6 >> 16) - (v7 >> 16);
    }
  }
  else if ((v4 & 0x1000000000000000) == 0)
  {
    return (v6 >> 16) - (v7 >> 16);
  }
  unint64_t v11 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0) {
    unint64_t v11 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (v11 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v11 >= v6 >> 16)
  {
    a1 = v7;
    a2 = v6;
    a3 = v5;
    a4 = v4;
    return MEMORY[0x1F4183AA8](a1, a2, a3, a4);
  }
  __break(1u);
  return MEMORY[0x1F4183AA8](a1, a2, a3, a4);
}

unint64_t sub_1D76C8224(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    *uint64_t v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    uint64_t result = v12;
    if (v17 == v15) {
      uint64_t result = sub_1D76BC8E8(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      uint64_t result = sub_1D76F8104();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          uint64_t result = sub_1D76F8534();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    uint64_t result = sub_1D76BC8E8(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = sub_1D76F80D4();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1D76C8438(unsigned char *__src, unsigned char *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143C0];
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_1D76C84FC(unsigned char *__src, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 <= 14) {
    return sub_1D76C8438(__src, &__src[a2]);
  }
  sub_1D76F7AF4();
  swift_allocObject();
  sub_1D76F7AB4();
  if ((unint64_t)a2 < 0x7FFFFFFF) {
    return a2 << 32;
  }
  sub_1D76F7C34();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t sub_1D76C85B0(uint64_t result)
{
  if (result)
  {
    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1D76C85F0(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    swift_release();
    return 0;
  }
  if (a2 > 14)
  {
    if ((unint64_t)a2 < 0x7FFFFFFF) {
      return a2 << 32;
    }
    sub_1D76F7C34();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = 0;
    *(void *)(v3 + 24) = a2;
    return v3;
  }
  if (a2 < 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  unint64_t v4 = (unsigned char *)sub_1D76F7AC4();
  if (v4)
  {
    uint64_t v5 = sub_1D76F7AE4();
    if (!__OFSUB__(0, v5))
    {
      v4 -= v5;
      goto LABEL_10;
    }
LABEL_20:
    __break(1u);
    JUMPOUT(0x1D76C86D8);
  }
LABEL_10:
  uint64_t v6 = sub_1D76F7AD4();
  if (v6 >= a2) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = v6;
  }
  uint64_t v8 = &v4[v7];
  if (v4) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v3 = sub_1D76C8438(v4, v9);
  swift_release();
  return v3;
}

uint64_t sub_1D76C86E8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1D76ABEC0(a1, a2);
  }
  return a1;
}

uint64_t sub_1D76C86FC()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_1D76C873C()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D76C874C(uint64_t a1, uint64_t a2)
{
  return sub_1D769E420(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t sub_1D76C876C()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D76C877C()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1D76C87A4()
{
  return sub_1D76C877C();
}

uint64_t sub_1D76C87BC()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D76C87CC(uint64_t a1)
{
  return sub_1D76C5C04(a1);
}

uint64_t sub_1D76C87EC()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

unint64_t sub_1D76C8800()
{
  unint64_t result = qword_1EA83A8B0;
  if (!qword_1EA83A8B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83A8B0);
  }
  return result;
}

uint64_t sub_1D76C8854(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_1D76C00C4(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))XPCDictionary.subscript.getter);
}

uint64_t sub_1D76C8880(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, (uint64_t)sub_1D769A1E8, (void (*)(uint64_t *__return_ptr, uint64_t, void *, uint64_t, void, uint64_t, void))sub_1D76BFC1C);
}

uint64_t sub_1D76C88AC()
{
  return 16;
}

__n128 sub_1D76C88B8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1D76C88C4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_1D76C00C4(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))XPCDictionary.subscript.getter);
}

uint64_t sub_1D76C88F0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, (uint64_t)sub_1D76C8EB0, (void (*)(uint64_t *__return_ptr, uint64_t, void *, uint64_t, void, uint64_t, void))sub_1D76BFC1C);
}

uint64_t keypath_setTm(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t *__return_ptr, uint64_t, void *, uint64_t, void, uint64_t, void))
{
  uint64_t v9 = *(uint64_t *)((char *)a3 + a4 - 16);
  uint64_t v10 = *(uint64_t *)((char *)a3 + a4 - 8);
  uint64_t v11 = *a3;
  uint64_t v12 = a3[1];
  swift_bridgeObjectRetain();
  return sub_1D769B74C(a1, v11, v12, v9, v10, a5, a6);
}

uint64_t sub_1D76C8994()
{
  return 16;
}

__n128 sub_1D76C89A0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1D76C89AC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_1D76C00C4(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))XPCDictionary.subscript.getter);
}

uint64_t sub_1D76C89D8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, (uint64_t)sub_1D76C8E90, (void (*)(uint64_t *__return_ptr, uint64_t, void *, uint64_t, void, uint64_t, void))sub_1D76BEEC0);
}

uint64_t sub_1D76C8A04()
{
  return 16;
}

__n128 sub_1D76C8A10(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1D76C8A24()
{
  return 0;
}

uint64_t sub_1D76C8A3C()
{
  return 0;
}

uint64_t sub_1D76C8A54()
{
  return 0;
}

uint64_t sub_1D76C8A6C()
{
  return 0;
}

uint64_t sub_1D76C8A84()
{
  return 0;
}

uint64_t sub_1D76C8A9C()
{
  return 0;
}

uint64_t sub_1D76C8AB4()
{
  return 0;
}

uint64_t sub_1D76C8AC4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_1D76C4620(a1, a2, a3, (void (*)(uint64_t, uint64_t))XPCDictionary.subscript.getter);
}

uint64_t sub_1D76C8AF4()
{
  return 0;
}

uint64_t sub_1D76C8B04(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_1D76C4620(a1, a2, a3, (void (*)(uint64_t, uint64_t))XPCDictionary.subscript.getter);
}

uint64_t sub_1D76C8B34()
{
  return 0;
}

void *assignWithCopy for XPCDictionary(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for XPCDictionary(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRelease();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

id sub_1D76C8BF4(id result, char a2)
{
  if ((a2 & 1) == 0) {
    return result;
  }
  return result;
}

unint64_t sub_1D76C8C00()
{
  unint64_t result = qword_1EA83A8E8;
  if (!qword_1EA83A8E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83A8E8);
  }
  return result;
}

unint64_t sub_1D76C8C54()
{
  unint64_t result = qword_1EBA34260;
  if (!qword_1EBA34260)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBA34260);
  }
  return result;
}

void *sub_1D76C8CA8@<X0>(void *a1@<X8>)
{
  return sub_1D76C8ED0(a1);
}

uint64_t sub_1D76C8CC0()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1D76C8CF8(uint64_t a1, uint64_t a2)
{
  return sub_1D76C7848(a1, a2, *(void **)(v2 + 16));
}

uint64_t sub_1D76C8D00()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D76C8D10(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(v2 + 16);
  uint64_t v4 = (void *)sub_1D76C6E44(a2);
  objc_msgSend(v3, sel_addObject_, v4);

  return 1;
}

uint64_t sub_1D76C8D58()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D76C8D68()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t sub_1D76C8D94(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_1D76C8DDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D76C5B68(a1, a2, a3, *(void **)(v3 + 16), *(void *(**)(uint64_t *__return_ptr))(v3 + 24));
}

uint64_t sub_1D76C8DFC()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D76C8E0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D76C5A90(a1, a2, a3, *(uint64_t **)(v3 + 16), *(void *(**)(void *__return_ptr))(v3 + 24));
}

uint64_t sub_1D76C8E2C()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D76C8E3C()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_1D76C8E74(uint64_t a1, uint64_t a2)
{
  return sub_1D76C54B0(a1, a2, *(void (**)(uint64_t))(v2 + 16));
}

uint64_t sub_1D76C8E80()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

xpc_object_t sub_1D76C8E90@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1D76C0D38(a1, a2);
}

xpc_object_t sub_1D76C8EB0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1D76C01A4(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

void *sub_1D76C8ED0@<X0>(void *a1@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

uint64_t static remote_device_state_t.attached.getter()
{
  return dword_1EA83A940;
}

uint64_t static remote_device_state_t.attached.setter(int a1)
{
  uint64_t result = swift_beginAccess();
  dword_1EA83A940 = a1;
  return result;
}

uint64_t (*static remote_device_state_t.attached.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t static remote_device_state_t.connected.getter()
{
  return dword_1EA83A944;
}

uint64_t static remote_device_state_t.connected.setter(int a1)
{
  uint64_t result = swift_beginAccess();
  dword_1EA83A944 = a1;
  return result;
}

uint64_t (*static remote_device_state_t.connected.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t static remote_device_state_t.disconnected.getter()
{
  return dword_1EA83A948;
}

uint64_t static remote_device_state_t.disconnected.setter(int a1)
{
  uint64_t result = swift_beginAccess();
  dword_1EA83A948 = a1;
  return result;
}

uint64_t (*static remote_device_state_t.disconnected.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t static remote_device_type_t.invalidOrUnknown.getter()
{
  return dword_1EA83A94C;
}

uint64_t static remote_device_type_t.invalidOrUnknown.setter(int a1)
{
  uint64_t result = swift_beginAccess();
  dword_1EA83A94C = a1;
  return result;
}

uint64_t (*static remote_device_type_t.invalidOrUnknown.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t static remote_device_type_t.loopback.getter()
{
  return dword_1EA83A950;
}

uint64_t static remote_device_type_t.loopback.setter(int a1)
{
  uint64_t result = swift_beginAccess();
  dword_1EA83A950 = a1;
  return result;
}

uint64_t (*static remote_device_type_t.loopback.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t static remote_device_type_t.eos.getter()
{
  return dword_1EA83A954;
}

uint64_t static remote_device_type_t.eos.setter(int a1)
{
  uint64_t result = swift_beginAccess();
  dword_1EA83A954 = a1;
  return result;
}

uint64_t (*static remote_device_type_t.eos.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t static remote_device_type_t.bridgeCoproc.getter()
{
  return dword_1EA83A958;
}

uint64_t static remote_device_type_t.bridgeCoproc.setter(int a1)
{
  uint64_t result = swift_beginAccess();
  dword_1EA83A958 = a1;
  return result;
}

uint64_t (*static remote_device_type_t.bridgeCoproc.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t static remote_device_type_t.bridgeHost.getter()
{
  return dword_1EA83A95C;
}

uint64_t static remote_device_type_t.bridgeHost.setter(int a1)
{
  uint64_t result = swift_beginAccess();
  dword_1EA83A95C = a1;
  return result;
}

uint64_t (*static remote_device_type_t.bridgeHost.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t static remote_device_type_t.bridgeCoprocExternal.getter()
{
  return dword_1EA83A960;
}

uint64_t static remote_device_type_t.bridgeCoprocExternal.setter(int a1)
{
  uint64_t result = swift_beginAccess();
  dword_1EA83A960 = a1;
  return result;
}

uint64_t (*static remote_device_type_t.bridgeCoprocExternal.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t static remote_device_type_t.bridgeHostExternal.getter()
{
  return dword_1EA83A964;
}

uint64_t static remote_device_type_t.bridgeHostExternal.setter(int a1)
{
  uint64_t result = swift_beginAccess();
  dword_1EA83A964 = a1;
  return result;
}

uint64_t (*static remote_device_type_t.bridgeHostExternal.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t static remote_device_type_t.bonjourPeer.getter()
{
  return dword_1EA83A968;
}

uint64_t static remote_device_type_t.bonjourPeer.setter(int a1)
{
  uint64_t result = swift_beginAccess();
  dword_1EA83A968 = a1;
  return result;
}

uint64_t (*static remote_device_type_t.bonjourPeer.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t static remote_device_type_t.ncmDevice.getter()
{
  return dword_1EA83A96C;
}

uint64_t static remote_device_type_t.ncmDevice.setter(int a1)
{
  uint64_t result = swift_beginAccess();
  dword_1EA83A96C = a1;
  return result;
}

uint64_t (*static remote_device_type_t.ncmDevice.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t static remote_device_type_t.ncmHost.getter()
{
  return dword_1EA83A970;
}

uint64_t static remote_device_type_t.ncmHost.setter(int a1)
{
  uint64_t result = swift_beginAccess();
  dword_1EA83A970 = a1;
  return result;
}

uint64_t (*static remote_device_type_t.ncmHost.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t static remote_device_type_t.coreDevice.getter()
{
  return dword_1EA83A974;
}

uint64_t static remote_device_type_t.coreDevice.setter(int a1)
{
  uint64_t result = swift_beginAccess();
  dword_1EA83A974 = a1;
  return result;
}

uint64_t (*static remote_device_type_t.coreDevice.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t static remote_device_type_t.coreDeviceDevice.getter()
{
  return dword_1EA83A978;
}

uint64_t static remote_device_type_t.coreDeviceDevice.setter(int a1)
{
  uint64_t result = swift_beginAccess();
  dword_1EA83A978 = a1;
  return result;
}

uint64_t (*static remote_device_type_t.coreDeviceDevice.modify())()
{
  return j__swift_endAccess;
}

uint64_t static remote_device_type_t.coreDeviceHost.getter()
{
  return dword_1EA83A97C;
}

uint64_t static remote_device_type_t.coreDeviceHost.setter(int a1)
{
  uint64_t result = swift_beginAccess();
  dword_1EA83A97C = a1;
  return result;
}

uint64_t (*static remote_device_type_t.coreDeviceHost.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t static remote_device_type_t.max.getter()
{
  return dword_1EA83A980;
}

uint64_t static remote_device_type_t.max.setter(int a1)
{
  uint64_t result = swift_beginAccess();
  dword_1EA83A980 = a1;
  return result;
}

uint64_t (*static remote_device_type_t.max.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t static remote_device_type_t.any.getter()
{
  return dword_1EA83A984;
}

uint64_t static remote_device_type_t.any.setter(int a1)
{
  uint64_t result = swift_beginAccess();
  dword_1EA83A984 = a1;
  return result;
}

uint64_t (*static remote_device_type_t.any.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t static XPCConnection.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t (*)(uint64_t), uint64_t, void))(*(void *)a1 + 208))(&v3, sub_1D76CCCF8, a2, MEMORY[0x1E4FBB390]);
  return v3;
}

uint64_t XPCConnection.send<A>(value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v19 = a1;
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188788](a1);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for MessageWrapper();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188788](v9);
  uint64_t v12 = (uint64_t *)((char *)&v18 - v11);
  type metadata accessor for XPCObjectEncoder();
  *(void *)(swift_initStackObject() + 16) = v4;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v19, a2);
  swift_retain();
  MessageWrapper.init(value:)((uint64_t)v8, a2, v12);
  swift_getWitnessTable();
  uint64_t v13 = v20[7];
  uint64_t v14 = XPCObjectEncoder.encode<A>(_:)((uint64_t)v12, v9);
  if (v13)
  {
    (*(void (**)(uint64_t *, uint64_t))(v10 + 8))(v12, v9);
    swift_setDeallocating();
    return swift_release();
  }
  else
  {
    uint64_t v16 = v14;
    (*(void (**)(uint64_t *, uint64_t))(v10 + 8))(v12, v9);
    swift_setDeallocating();
    swift_release();
    v20[0] = v16;
    v20[1] = 0xD000000000000019;
    v20[2] = 0x80000001D76FD660;
    unint64_t v17 = *(void (**)(void *))(*(void *)v4 + 168);
    swift_unknownObjectRetain();
    v17(v20);
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease_n();
  }
}

uint64_t XPCConnection.send<A, B>(value:replyQueue:replyHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t v17 = sub_1D76CCD10();
  return XPCConnection.send<A, B, C>(value:replyQueue:errorWrapperType:replyHandler:)(a1, a2, (uint64_t)&type metadata for DispatcherErrorWrapper, a3, a4, a5, a6, (uint64_t)&type metadata for DispatcherErrorWrapper, a7, a8, a9, a10, v17);
}

uint64_t XPCConnection.send<A, B, C>(value:replyQueue:errorWrapperType:replyHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v35 = a7;
  uint64_t v36 = a8;
  uint64_t v38 = a4;
  uint64_t v39 = a5;
  uint64_t v37 = a3;
  uint64_t v40 = a2;
  uint64_t v41 = a1;
  uint64_t v15 = *(void *)(a6 - 8);
  MEMORY[0x1F4188788](a1);
  unint64_t v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for MessageWrapper();
  uint64_t v42 = *(void *)(v18 - 8);
  MEMORY[0x1F4188788](v18);
  uint64_t v20 = (uint64_t *)((char *)&v33 - v19);
  type metadata accessor for XPCObjectEncoder();
  *(void *)(swift_initStackObject() + 16) = v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v41, a6);
  uint64_t v34 = v13;
  swift_retain();
  uint64_t v41 = a9;
  MessageWrapper.init(value:)((uint64_t)v17, a6, v20);
  swift_getWitnessTable();
  uint64_t v21 = v44;
  uint64_t v22 = XPCObjectEncoder.encode<A>(_:)((uint64_t)v20, v18);
  if (v21)
  {
    (*(void (**)(uint64_t *, uint64_t))(v42 + 8))(v20, v18);
    swift_setDeallocating();
    return swift_release();
  }
  else
  {
    uint64_t v24 = v22;
    uint64_t v44 = a11;
    (*(void (**)(uint64_t *, uint64_t))(v42 + 8))(v20, v18);
    swift_setDeallocating();
    swift_release();
    v43[0] = v24;
    v43[1] = 0xD000000000000019;
    v43[2] = 0x80000001D76FD660;
    unsigned __int8 v25 = (void *)swift_allocObject();
    uint64_t v26 = v35;
    v25[2] = a6;
    void v25[3] = v26;
    uint64_t v27 = v41;
    v25[4] = v36;
    v25[5] = v27;
    uint64_t v28 = v44;
    v25[6] = a10;
    v25[7] = v28;
    v25[8] = a12;
    v25[9] = a13;
    uint64_t v29 = v34;
    uint64_t v30 = v37;
    v25[10] = v34;
    v25[11] = v30;
    uint64_t v31 = v39;
    v25[12] = v38;
    v25[13] = v31;
    unsigned __int8 v32 = *(void (**)(void *, uint64_t, uint64_t (*)(uint64_t), void *))(*(void *)v29 + 160);
    swift_retain();
    swift_unknownObjectRetain();
    swift_retain();
    v32(v43, v40, sub_1D76CCDA4, v25);
    swift_unknownObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
}

uint64_t sub_1D76CA630(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v29 = a8;
  uint64_t v30 = a2;
  uint64_t v31 = a3;
  uint64_t v32 = a5;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EBA33F40);
  uint64_t v12 = sub_1D76F8D64();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188788](v12);
  uint64_t v16 = (void *)((char *)v28 - v15);
  uint64_t v18 = *(void *)a1;
  uint64_t v17 = *(void *)(a1 + 8);
  if (*(unsigned char *)(a1 + 24))
  {
    sub_1D76B10C8();
    uint64_t v19 = swift_allocError();
    *uint64_t v20 = v18;
    v20[1] = v17;
    *uint64_t v16 = v19;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    a4(v16);
  }
  else
  {
    v28[1] = v28;
    uint64_t v21 = *(void *)(a1 + 16);
    MEMORY[0x1F4188788](v14);
    v28[0] = a4;
    v28[-14] = a6;
    v28[-13] = a7;
    v28[-12] = v29;
    v28[-11] = v22;
    v28[-10] = v24;
    v28[-9] = v23;
    v28[-8] = v26;
    v28[-7] = v25;
    v28[-6] = v30;
    v28[-5] = v18;
    v28[-4] = v17;
    v28[-3] = v21;
    v28[-2] = v31;
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    sub_1D76CAC68((void (*)(unsigned char *))sub_1D76CDE7C, (uint64_t)v16);
    ((void (*)(uint64_t *))v28[0])(v16);
    sub_1D76CDED8(v18, v17, v21, 0);
  }
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v13 + 8))(v16, v12);
}

void sub_1D76CA868(long long *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v31 = a4;
  uint64_t v33 = *(void *)(a3 - 8);
  MEMORY[0x1F4188788](a1);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v36 = v10;
  *((void *)&v36 + 1) = v11;
  uint64_t v37 = v12;
  uint64_t v38 = v13;
  uint64_t v32 = v14;
  long long v39 = *(_OWORD *)(v14 + 8);
  uint64_t v15 = type metadata accessor for DispatcherResponse();
  uint64_t v35 = *(void *)(v15 - 8);
  uint64_t v16 = MEMORY[0x1F4188788](v15);
  uint64_t v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188788](v16);
  uint64_t v21 = (char *)&v30 - v20;
  MEMORY[0x1F4188788](v19);
  uint64_t v23 = (char *)&v30 - v22;
  uint64_t v24 = *((void *)a1 + 2);
  long long v36 = *a1;
  uint64_t v37 = v24;
  swift_getWitnessTable();
  XPCDictionary.decode<A>(_:)(v15, v15);
  if (v4)
  {
    *(void *)&long long v36 = 0;
    *((void *)&v36 + 1) = 0xE000000000000000;
    sub_1D76F8464();
    sub_1D76F80A4();
    uint64_t v40 = v4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F40);
    sub_1D76F8584();
    long long v25 = v36;
    unint64_t v26 = sub_1D769C348(MEMORY[0x1E4FBC860]);
    sub_1D76B10C8();
    swift_allocError();
    static XPCError.unknown(_:from:userInfo:)(v25, *((uint64_t *)&v25 + 1), v34, v26, v27);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
  else
  {
    uint64_t v34 = a2;
    uint64_t v28 = v33;
    uint64_t v29 = v35;
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v23, v21, v15);
    (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v18, v23, v15);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(char *, uint64_t))(v35 + 8))(v23, v15);
      (*(void (**)(uint64_t, char *))(*(void *)(v34 - 8) + 32))(v31, v18);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v9, v18, a3);
      (*(void (**)(long long *__return_ptr, uint64_t))(v32 + 64))(&v36, a3);
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v9, a3);
      (*(void (**)(char *, uint64_t))(v35 + 8))(v23, v15);
    }
  }
}

uint64_t sub_1D76CAC68@<X0>(void (*a1)(unsigned char *)@<X0>, uint64_t a2@<X8>)
{
  MEMORY[0x1F4188788](a1);
  uint64_t v5 = &v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = sub_1D76F8D64();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188788](v6);
  uint64_t v9 = &v11[-v8];
  a1(v5);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v7 + 32))(a2, v9, v6);
}

uint64_t XPCConnection.sendSync<A, B>(value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  return XPCConnection.sendSync<A, B, C>(value:errorWrapperType:)(a1, (uint64_t)&type metadata for DispatcherErrorWrapper, a2, a3, (uint64_t)&type metadata for DispatcherErrorWrapper, a4, a5, a6);
}

uint64_t XPCConnection.sendSync<A, B, C>(value:errorWrapperType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  void (*v22)(long long *__return_ptr, void *);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void v30[3];
  long long v31;
  uint64_t v32;

  long long v25 = a5;
  unint64_t v26 = a7;
  uint64_t v28 = a6;
  uint64_t v29 = a1;
  uint64_t v23 = a2;
  uint64_t v24 = a4;
  uint64_t v27 = a8;
  uint64_t v10 = *(void *)(a3 - 8);
  MEMORY[0x1F4188788](a1);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for MessageWrapper();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188788](v13);
  uint64_t v16 = (uint64_t *)((char *)&v23 - v15);
  type metadata accessor for XPCObjectEncoder();
  *(void *)(swift_initStackObject() + 16) = v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v29, a3);
  swift_retain();
  MessageWrapper.init(value:)((uint64_t)v12, a3, v16);
  swift_getWitnessTable();
  uint64_t v17 = v32;
  uint64_t v18 = XPCObjectEncoder.encode<A>(_:)((uint64_t)v16, v13);
  if (v17)
  {
    (*(void (**)(uint64_t *, uint64_t))(v14 + 8))(v16, v13);
    swift_setDeallocating();
    return swift_release();
  }
  else
  {
    uint64_t v20 = v18;
    uint64_t v21 = v27;
    (*(void (**)(uint64_t *, uint64_t))(v14 + 8))(v16, v13);
    swift_setDeallocating();
    swift_release();
    v30[0] = v20;
    v30[1] = 0xD000000000000019;
    v30[2] = 0x80000001D76FD660;
    uint64_t v22 = *(void (**)(long long *__return_ptr, void *))(*(void *)v8 + 176);
    swift_unknownObjectRetain();
    v22(&v31, v30);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    sub_1D76CA868(&v31, v24, v25, v21);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
}

uint64_t XPCPeerConnection.setEventHandler<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = swift_allocObject();
  swift_weakInit();
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = a3;
  void v15[3] = a4;
  void v15[4] = a5;
  void v15[5] = a6;
  void v15[6] = a7;
  void v15[7] = v14;
  v15[8] = a1;
  v15[9] = a2;
  uint64_t v16 = *(void (**)(uint64_t (*)(uint64_t), void *, uint64_t, uint64_t))(a5 + 8);
  swift_retain();
  swift_retain();
  v16(sub_1D76CCE60, v15, a3, a5);
  swift_release();

  return swift_release();
}

uint64_t sub_1D76CB2B8(uint64_t a1, uint64_t a2, void (*a3)(char *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v31 = a7;
  uint64_t v32 = a8;
  uint64_t v29 = a5;
  uint64_t v30 = a2;
  uint64_t v33 = a4;
  uint64_t v34 = a3;
  uint64_t v28 = a9;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EBA33F40);
  uint64_t v11 = sub_1D76F8D64();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188788](v11);
  uint64_t v14 = (char *)&v27 - v13;
  uint64_t v15 = *(void *)a1;
  uint64_t v16 = *(void *)(a1 + 8);
  uint64_t v17 = *(void *)(a1 + 16);
  int v18 = *(unsigned __int8 *)(a1 + 24);
  uint64_t v19 = (void *)v15;
  uint64_t v20 = v16;
  uint64_t v21 = v17;
  if (v18 == 1)
  {
    sub_1D76B10C8();
    uint64_t v19 = (void *)swift_allocError();
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    *uint64_t v22 = v15;
    v22[1] = v16;
  }
  uint64_t v35 = v19;
  uint64_t v36 = v20;
  uint64_t v37 = v21;
  char v38 = v18;
  MEMORY[0x1F4188788](v19);
  *(&v27 - 6) = v29;
  *(&v27 - 5) = a6;
  uint64_t v23 = v32;
  *(&v27 - 4) = v31;
  *(&v27 - 3) = v23;
  uint64_t v24 = v30;
  *(&v27 - 2) = v28;
  *(&v27 - 1) = v24;
  sub_1D76CDDF0(v15, v16, v17, v18);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F48);
  sub_1D76CB798((void (*)(char *))sub_1D76CDDE0, v25, (uint64_t)v14);
  sub_1D76CDE30(v35, v36, v37, v38);
  v34(v14);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_1D76CB4C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for MessageWrapper();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188788](v6);
  uint64_t v9 = &v12[-v8];
  uint64_t v10 = *(void *)(a1 + 16);
  *(_OWORD *)&v12[24] = *(_OWORD *)a1;
  uint64_t v13 = v10;
  swift_getWitnessTable();
  XPCDictionary.decode<A>(_:)(v6, v6);
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)(a2 - 8) + 16))(a3, &v9[*(int *)(v6 + 44)], a2);
  (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EBA33F40);
  sub_1D76F8D64();
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1D76CB798@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188788](a1);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188788](v8);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v13 + 16))(v12, v14);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(uint64_t, char *, void))(*(void *)(*(void *)(a2 + 24) - 8) + 32))(a3, v12, *(void *)(a2 + 24));
    sub_1D76F8D64();
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v12, v6);
    a1(v10);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
}

uint64_t sub_1D76CB9A4(long long *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *((void *)a1 + 2);
  long long v6 = *a1;
  uint64_t v7 = v4;
  return (*(uint64_t (**)(long long *, void, uint64_t, uint64_t))(*(void *)v3 + 160))(&v6, 0, a2, a3);
}

uint64_t XPCConnection.__allocating_init()()
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = MEMORY[0x1E4FBC860];
  return result;
}

uint64_t XPCConnection.init()()
{
  uint64_t result = v0;
  *(void *)(v0 + 16) = MEMORY[0x1E4FBC860];
  return result;
}

uint64_t sub_1D76CBA48()
{
  uint64_t v1 = v0;
  uint64_t v2 = swift_allocObject();
  swift_weakInit();
  uint64_t v3 = swift_allocObject();
  swift_weakInit();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA83A988);
  uint64_t v4 = swift_allocObject();
  *(unsigned char *)(v4 + 104) = 0;
  *(void *)(v4 + 112) = sub_1D769E930(MEMORY[0x1E4FBC860]);
  type metadata accessor for XPCObjectEncoder();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = 0;
  type metadata accessor for XPCObjectDecoder();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(unsigned char *)(v4 + 80) = 1;
  *(void *)(v4 + 88) = v5;
  *(void *)(v4 + 96) = v6;
  swift_beginAccess();
  uint64_t v7 = *(void *)(v4 + 16);
  *(void *)(v4 + 16) = sub_1D76CCE94;
  *(void *)(v4 + 24) = v2;
  *(void *)(v4 + 32) = sub_1D76CCE9C;
  *(void *)(v4 + 40) = v3;
  swift_retain();
  sub_1D76CCEA4(v7);
  uint64_t v8 = *(void *)(v4 + 48);
  *(void *)(v4 + 48) = 0;
  *(void *)(v4 + 56) = 0;
  sub_1D76CCEE8(v8);
  uint64_t v9 = *(void *)(v4 + 64);
  *(void *)(v4 + 64) = 0;
  *(void *)(v4 + 72) = 0;
  sub_1D76CCEE8(v9);
  swift_release();
  *(unsigned char *)(v4 + 80) = 0;
  swift_beginAccess();
  uint64_t v10 = swift_retain();
  MEMORY[0x1D94755D0](v10);
  if (*(void *)((*(void *)(v1 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v1 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
    sub_1D76F81F4();
  sub_1D76F8224();
  sub_1D76F81D4();
  swift_endAccess();
  return v4;
}

uint64_t sub_1D76CBC54@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    v10[0] = v3;
    v10[1] = v4;
    v10[2] = v5;
    (*(void (**)(void *__return_ptr, void *))(*(void *)result + 152))(v11, v10);
    uint64_t result = swift_release();
    uint64_t v7 = v11[0];
    uint64_t v8 = v11[1];
    uint64_t v9 = v11[2];
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
  }
  *a2 = v7;
  a2[1] = v8;
  a2[2] = v9;
  return result;
}

uint64_t sub_1D76CBD18(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    v5[0] = v1;
    v5[1] = v2;
    _OWORD v5[2] = v3;
    (*(void (**)(void *))(*(void *)result + 168))(v5);
    return swift_release();
  }
  return result;
}

void sub_1D76CBDB4()
{
}

uint64_t sub_1D76CBDF0(uint64_t a1)
{
  if (a1 == XPCTypeDictionary)
  {
    v7[0] = v1;
    v7[1] = 0xD000000000000019;
    v7[2] = 0x80000001D76FD660;
    swift_beginAccess();
    unint64_t v6 = *(void *)(v4 + 16);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    sub_1D76CBEB0(v7, v6, v3, v2);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    LOBYTE(v7[0]) = 0;
    return v3((char *)v7);
  }
}

uint64_t *sub_1D76CBEB0(uint64_t *result, unint64_t a2, uint64_t (*a3)(char *), uint64_t a4)
{
  uint64_t v7 = *result;
  uint64_t v8 = result[1];
  uint64_t v9 = result[2];
  if (!(a2 >> 62))
  {
    if (*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_3;
    }
LABEL_10:
    char v13 = 0;
    return (uint64_t *)a3(&v13);
  }
  swift_bridgeObjectRetain();
  uint64_t v12 = sub_1D76F85C4();
  uint64_t result = (uint64_t *)swift_bridgeObjectRelease();
  if (!v12) {
    goto LABEL_10;
  }
LABEL_3:
  if ((a2 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    MEMORY[0x1D94758B0](0, a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (!*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return result;
    }
    swift_retain();
  }
  uint64_t v10 = swift_allocObject();
  swift_weakInit();
  uint64_t v11 = (void *)swift_allocObject();
  void v11[2] = v10;
  void v11[3] = a3;
  void v11[4] = a4;
  void v11[5] = v7;
  v11[6] = v8;
  v11[7] = v9;
  v11[8] = a2;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  sub_1D76E3524(v7, v8, v9, (uint64_t)sub_1D76CDDCC, (uint64_t)v11);
  swift_release();
  swift_release();

  return (uint64_t *)swift_release();
}

uint64_t sub_1D76CC088(unsigned __int8 *a1, uint64_t a2, uint64_t (*a3)(void *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = *a1;
  swift_beginAccess();
  if (!swift_weakLoadStrong())
  {
    LOBYTE(v25[0]) = 0;
    return a3(v25);
  }
  if ((v14 & 1) == 0)
  {
    v25[0] = a5;
    v25[1] = a6;
    v25[2] = a7;
    if ((unint64_t)a8 >> 62)
    {
      if (a8 < 0) {
        a6 = a8;
      }
      else {
        a6 = a8 & 0xFFFFFFFFFFFFFF8;
      }
      swift_bridgeObjectRetain();
      uint64_t result = sub_1D76F85C4();
      if (result < 0)
      {
        __break(1u);
        return result;
      }
      unint64_t v16 = result;
      if (result >= 1) {
        uint64_t v17 = 1;
      }
      else {
        uint64_t v17 = result;
      }
      swift_bridgeObjectRetain();
      uint64_t v14 = sub_1D76F85C4();
      swift_bridgeObjectRelease();
      if (v14 >= v17)
      {
        swift_bridgeObjectRetain();
        a6 = sub_1D76F85C4();
        swift_bridgeObjectRelease();
        if (a6 >= (uint64_t)v16) {
          goto LABEL_10;
        }
        __break(1u);
      }
    }
    else
    {
      unint64_t v16 = *(void *)((a8 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if ((uint64_t)v16 >= 1) {
        uint64_t v17 = 1;
      }
      else {
        uint64_t v17 = *(void *)((a8 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRetain();
      if (v16 >= v17)
      {
LABEL_10:
        if ((a8 & 0xC000000000000001) != 0 && v16 >= 2)
        {
          uint64_t v18 = v17;
          do
          {
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA83A988);
            sub_1D76F8484();
            ++v18;
          }
          while (v16 != v18);
        }
        if ((unint64_t)a8 >> 62)
        {
          swift_bridgeObjectRetain();
          a6 = sub_1D76F85D4();
          uint64_t v14 = v19;
          uint64_t v17 = v20;
          unint64_t v16 = v21;
          swift_bridgeObjectRelease_n();
          if (v16) {
            goto LABEL_19;
          }
        }
        else
        {
          a6 = a8 & 0xFFFFFFFFFFFFFF8;
          uint64_t v14 = (a8 & 0xFFFFFFFFFFFFFF8) + 32;
          unint64_t v16 = (2 * v16) | 1;
          if (v16)
          {
LABEL_19:
            sub_1D76F8A54();
            swift_unknownObjectRetain_n();
            uint64_t v23 = swift_dynamicCastClass();
            if (!v23)
            {
              swift_unknownObjectRelease();
              uint64_t v23 = MEMORY[0x1E4FBC860];
            }
            uint64_t v24 = *(void *)(v23 + 16);
            swift_release();
            if (!__OFSUB__(v16 >> 1, v17))
            {
              if (v24 == (v16 >> 1) - v17)
              {
                uint64_t v22 = swift_dynamicCastClass();
                if (!v22)
                {
                  swift_unknownObjectRelease();
                  uint64_t v22 = MEMORY[0x1E4FBC860];
                }
                goto LABEL_25;
              }
              goto LABEL_40;
            }
LABEL_39:
            __break(1u);
LABEL_40:
            swift_unknownObjectRelease();
          }
        }
        uint64_t v22 = sub_1D76CDBEC(a6, v14, v17, v16);
LABEL_25:
        swift_unknownObjectRelease();
        sub_1D76CBEB0(v25, v22, a3, a4);
        swift_release();
        return swift_release();
      }
    }
    __break(1u);
    goto LABEL_39;
  }
  LOBYTE(v25[0]) = 1;
  a3(v25);
  return swift_release();
}

uint64_t sub_1D76CC35C@<X0>(xpc_object_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34390);
  uint64_t v5 = MEMORY[0x1F4188788](v4 - 8);
  uint64_t v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188788](v5);
  uint64_t v9 = (char *)v17 - v8;
  xpc_object_t v10 = *a1;
  xpc_object_t reply = xpc_dictionary_create_reply(*a1);
  if (reply)
  {
    uint64_t v12 = (uint64_t)reply;
    v17[1] = reply;
    v17[2] = 0xD000000000000019;
    v17[3] = 0x80000001D76FD660;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    if (xpc_dictionary_get_string(v10, "XPCSideChannel.uniqueIdentifier"))
    {
      sub_1D76F80B4();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      sub_1D76F7CA4();
      swift_bridgeObjectRelease();
      uint64_t v13 = sub_1D76F7D04();
      uint64_t v14 = *(void *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v7, 1, v13) != 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v9, v7, v13);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v9, 0, 1, v13);
        goto LABEL_9;
      }
      sub_1D76CCEF8((uint64_t)v7);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }
    uint64_t v16 = sub_1D76F7D04();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v9, 1, 1, v16);
LABEL_9:
    sub_1D76AD52C((uint64_t)v9);
    uint64_t result = swift_unknownObjectRelease();
    goto LABEL_10;
  }
  uint64_t result = (uint64_t)xpc_dictionary_create(0, 0, 0);
  uint64_t v12 = result;
LABEL_10:
  *a2 = v12;
  a2[1] = 0xD000000000000019;
  a2[2] = 0x80000001D76FD660;
  return result;
}

void sub_1D76CC5DC()
{
}

void sub_1D76CC638()
{
}

void sub_1D76CC694()
{
}

uint64_t sub_1D76CC6F0(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 104) = a1;
  *(void *)(v3 + 112) = v2;
  *(_OWORD *)(v3 + 120) = *(_OWORD *)a2;
  *(void *)(v3 + 136) = *(void *)(a2 + 16);
  return MEMORY[0x1F4188298](sub_1D76CC720, 0, 0);
}

uint64_t sub_1D76CC720()
{
  uint64_t v9 = v0;
  uint64_t v1 = *(void *)(v0 + 136);
  long long v6 = *(_OWORD *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 112);
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 80;
  *(void *)(v0 + 24) = sub_1D76CC850;
  uint64_t v3 = swift_continuation_init();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  long long v7 = v6;
  uint64_t v8 = v1;
  (*(void (**)(long long *, void, uint64_t (*)(uint64_t *), uint64_t))(*(void *)v2 + 160))(&v7, 0, sub_1D76CCF68, v4);
  swift_release();
  return MEMORY[0x1F41881E8](v0 + 16);
}

uint64_t sub_1D76CC850()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  if (*(void *)(*v0 + 48))
  {
    swift_willThrow();
  }
  else
  {
    long long v3 = *(_OWORD *)(v1 + 80);
    uint64_t v6 = v1 + 96;
    uint64_t v4 = *(void *)(v1 + 96);
    uint64_t v5 = *(void *)(v6 + 8);
    *(_OWORD *)uint64_t v5 = v3;
    *(void *)(v5 + 16) = v4;
  }
  long long v7 = *(uint64_t (**)(void))(v2 + 8);
  return v7();
}

uint64_t sub_1D76CC968(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  if (a1[3])
  {
    sub_1D76B10C8();
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = v4;
    v6[1] = v3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F40);
    uint64_t v7 = swift_allocError();
    *uint64_t v8 = v5;
    swift_bridgeObjectRetain();
    return MEMORY[0x1F4188208](a2, v7);
  }
  else
  {
    uint64_t v9 = a1[2];
    uint64_t v10 = *(void **)(*(void *)(a2 + 64) + 40);
    *uint64_t v10 = v4;
    v10[1] = v3;
    v10[2] = v9;
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    return MEMORY[0x1F4188200](a2);
  }
}

void sub_1D76CCA60()
{
}

void sub_1D76CCABC()
{
}

void sub_1D76CCB18()
{
}

void sub_1D76CCB74()
{
}

uint64_t sub_1D76CCBD0()
{
  (*(void (**)(uint64_t *__return_ptr, size_t (*)@<X0>(void *@<X0>, size_t *@<X8>), void, void))(*(void *)v0 + 208))(&v2, sub_1D76CCC58, 0, MEMORY[0x1E4FBB550]);
  return sub_1D76F8D34();
}

size_t sub_1D76CCC58@<X0>(void *a1@<X0>, size_t *a2@<X8>)
{
  size_t result = xpc_hash(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1D76CCC88(uint64_t a1, uint64_t a2)
{
  v3[2] = a1;
  return (*(uint64_t (**)(BOOL (*)@<W0>(xpc_object_t@<X0>, unsigned char *@<X8>), void *, void))(*(void *)a2 + 208))(sub_1D76CE114, v3, MEMORY[0x1E4FBB390]);
}

uint64_t sub_1D76CCCF8(uint64_t a1)
{
  return sub_1D76CDA9C(a1);
}

unint64_t sub_1D76CCD10()
{
  unint64_t result = qword_1EBA34270[0];
  if (!qword_1EBA34270[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EBA34270);
  }
  return result;
}

uint64_t sub_1D76CCD64()
{
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 112, 7);
}

uint64_t sub_1D76CCDA4(uint64_t a1)
{
  return sub_1D76CA630(a1, *(void *)(v1 + 80), *(void *)(v1 + 88), *(void (**)(uint64_t *))(v1 + 96), *(void *)(v1 + 104), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1D76CCDE8()
{
  swift_weakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1D76CCE20()
{
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 80, 7);
}

uint64_t sub_1D76CCE60(uint64_t a1)
{
  return sub_1D76CB2B8(a1, *(void *)(v1 + 56), *(void (**)(char *))(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_1D76CCE94@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_1D76CBC54(a1, a2);
}

uint64_t sub_1D76CCE9C(uint64_t *a1)
{
  return sub_1D76CBD18(a1);
}

uint64_t sub_1D76CCEA4(uint64_t result)
{
  if (result)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1D76CCEE8(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_1D76CCEF8(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34390);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1D76CCF58()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1D76CCF68(uint64_t *a1)
{
  return sub_1D76CC968(a1, *(void *)(v1 + 16));
}

uint64_t sub_1D76CCF70()
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, void *@<X8>), void, void))(*(void *)v0 + 208))(&v2, sub_1D76CCFE4, 0, MEMORY[0x1E4FBB058]);
  return v2;
}

uint64_t sub_1D76CCFE4@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_1D76CCFEC()
{
  uint64_t v1 = MEMORY[0x1E4FBB1A0];
  (*(void (**)(void *__return_ptr, void (*)(uint64_t *@<X8>), void, void))(*(void *)v0 + 208))(v11, sub_1D76CD140, 0, MEMORY[0x1E4FBB1A0]);
  uint64_t v2 = v11[0];
  uint64_t v3 = v11[1];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBA33F30);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1D76FB280;
  v11[0] = *(void *)v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA334E0);
  uint64_t v5 = sub_1D76F8044();
  uint64_t v7 = v6;
  *(void *)(v4 + 56) = v1;
  unint64_t v8 = sub_1D76B6EA0();
  *(void *)(v4 + 32) = v5;
  *(void *)(v4 + 40) = v7;
  uint64_t v9 = MEMORY[0x1E4FBBAC8];
  *(void *)(v4 + 96) = MEMORY[0x1E4FBBAB8];
  *(void *)(v4 + 104) = v9;
  *(void *)(v4 + 64) = v8;
  *(void *)(v4 + 72) = v0;
  *(void *)(v4 + 136) = v1;
  *(void *)(v4 + 144) = v8;
  *(void *)(v4 + 112) = v2;
  *(void *)(v4 + 120) = v3;
  return sub_1D76F8004();
}

void sub_1D76CD140(uint64_t *a1@<X8>)
{
  uint64_t v2 = (void *)MEMORY[0x1D9476EE0]();
  *a1 = sub_1D76F80B4();
  a1[1] = v3;
  free(v2);
}

uint64_t XPCConnection.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t XPCConnection.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186488](v0, 24, 7);
}

uint64_t sub_1D76CD1E0()
{
  sub_1D76F8D24();
  (*(void (**)(uint64_t *__return_ptr, size_t (*)@<X0>(void *@<X0>, size_t *@<X8>), void, void))(*(void *)v0 + 208))(&v2, sub_1D76CCC58, 0, MEMORY[0x1E4FBB550]);
  sub_1D76F8D34();
  return sub_1D76F8D54();
}

uint64_t sub_1D76CD278()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 248))();
}

uint64_t sub_1D76CD2BC()
{
  (*(void (**)(uint64_t *__return_ptr, size_t (*)@<X0>(void *@<X0>, size_t *@<X8>), void, void))(**(void **)v0 + 208))(&v2, sub_1D76CCC58, 0, MEMORY[0x1E4FBB550]);
  return sub_1D76F8D34();
}

unint64_t sub_1D76CD34C()
{
  unint64_t result = qword_1EBA334D8;
  if (!qword_1EBA334D8)
  {
    type metadata accessor for XPCConnection();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBA334D8);
  }
  return result;
}

uint64_t type metadata accessor for XPCConnection()
{
  return self;
}

uint64_t sub_1D76CD3C4()
{
  sub_1D76F8D24();
  (*(void (**)(uint64_t *__return_ptr, size_t (*)@<X0>(void *@<X0>, size_t *@<X8>), void, void))(**(void **)v0 + 208))(&v2, sub_1D76CCC58, 0, MEMORY[0x1E4FBB550]);
  sub_1D76F8D34();
  return sub_1D76F8D54();
}

uint64_t sub_1D76CD45C()
{
  return MEMORY[0x1E4FBB060];
}

void *sub_1D76CD468@<X0>(void *a1@<X8>)
{
  unint64_t result = (*(void *(**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, void *@<X8>), void, void))(**(void **)v1 + 208))(&v4, sub_1D76CCFE4, 0, MEMORY[0x1E4FBB058]);
  *a1 = v4;
  return result;
}

uint64_t sub_1D76CD4F0()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 240))();
}

uint64_t sub_1D76CD534(uint64_t a1, void *a2)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t (*)(uint64_t), void, void))(**(void **)a1
                                                                                                 + 208))(&v3, sub_1D76CCCF8, *a2, MEMORY[0x1E4FBB390]);
  return v3;
}

uint64_t dispatch thunk of XPCListenerConnection.setPeerConnectionHandler(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of XPCListenerConnection.createEndpoint()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of XPCPeerConnection.setEventHandler(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of XPCConnectionChainedDispatching.createDispatcher()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t method lookup function for XPCConnection(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for XPCConnection);
}

uint64_t dispatch thunk of XPCConnection.send(message:replyHandler:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t dispatch thunk of XPCConnection.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of XPCConnection.createDispatcher()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of XPCConnection.offerEventToDispatchers(event:completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of XPCConnection.createReply(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of XPCConnection.send(message:replyQueue:replyHandler:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of XPCConnection.send(message:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of XPCConnection.sendSync(message:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of XPCConnection.sendMessage(_:)(uint64_t a1, uint64_t a2)
{
  unint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v2 + 184) + **(int **)(*(void *)v2 + 184));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_1D76CD850;
  return v8(a1, a2);
}

uint64_t sub_1D76CD850()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t dispatch thunk of XPCConnection.activate()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of XPCConnection.setTargetQueue(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of XPCConnection.withUnsafeUnderlyingConnection<A>(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of XPCConnection.cancel()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of XPCConnection.hash(into:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of XPCConnection.id.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of XPCConnection.debugDescription.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of XPCConnection.hashValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t sub_1D76CDA78()
{
  return sub_1D76CBA48();
}

uint64_t sub_1D76CDA9C(uint64_t a1)
{
  v3[2] = a1;
  return (*(uint64_t (**)(BOOL (*)@<W0>(xpc_object_t@<X0>, unsigned char *@<X8>), void *, void))(*(void *)v1 + 208))(sub_1D76CE114, v3, MEMORY[0x1E4FBB390]);
}

void *sub_1D76CDB00(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA83A9A0);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 25;
  }
  v3[2] = v1;
  v3[3] = (2 * (v5 >> 3)) | 1;
  uint64_t v6 = sub_1D76CDF18((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_1D76B13F0();
  if (v6 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x1E4FBC860];
  }
  return v3;
}

uint64_t sub_1D76CDBEC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return MEMORY[0x1E4FBC860];
    }
    uint64_t v8 = v5;
    if (v5 <= 0)
    {
      uint64_t v9 = (void *)MEMORY[0x1E4FBC860];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0) {
          goto LABEL_19;
        }
        unint64_t v12 = a2 + 8 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8) {
          goto LABEL_19;
        }
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA83A988);
        swift_arrayInitWithCopy();
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA83A9A0);
      uint64_t v9 = (void *)swift_allocObject();
      int64_t v10 = _swift_stdlib_malloc_size(v9);
      uint64_t v11 = v10 - 32;
      if (v10 < 32) {
        uint64_t v11 = v10 - 25;
      }
      v9[2] = v5;
      v9[3] = (2 * (v11 >> 3)) | 1;
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  uint64_t result = sub_1D76F8614();
  __break(1u);
  return result;
}

uint64_t sub_1D76CDD74()
{
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 72, 7);
}

uint64_t sub_1D76CDDCC(unsigned __int8 *a1)
{
  return sub_1D76CC088(a1, *(void *)(v1 + 16), *(uint64_t (**)(void *))(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64));
}

uint64_t sub_1D76CDDE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1D76CB4C8(a1, *(void *)(v2 + 24), a2);
}

uint64_t sub_1D76CDDF0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) == 0)
  {
    swift_unknownObjectRetain();
    uint64_t v4 = vars8;
  }
  return swift_bridgeObjectRetain();
}

void sub_1D76CDE30(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4)
  {
  }
  else
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
}

void sub_1D76CDE7C(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v6 = *(void *)(v2 + 32);
  uint64_t v7 = *(void *)(v2 + 104);
  long long v8 = *(_OWORD *)(v2 + 88);
  uint64_t v9 = v7;
  sub_1D76CA868(&v8, v5, v6, a2);
  if (v3) {
    *a1 = v3;
  }
}

uint64_t sub_1D76CDED8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) == 0)
  {
    swift_unknownObjectRelease();
    uint64_t v4 = vars8;
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D76CDF18(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    _OWORD v5[2] = ~v7;
    void v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    *uint64_t v11 = *(void *)(*(void *)(a4 + 56) + 8 * v16);
    if (v13 == v10)
    {
      swift_retain();
      goto LABEL_38;
    }
    ++v11;
    uint64_t result = swift_retain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

BOOL sub_1D76CE114@<W0>(xpc_object_t object2@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = xpc_equal(*(xpc_object_t *)(v2 + 16), object2);
  *a2 = result;
  return result;
}

uint64_t static RemoteXPCConnection.unsafePeer(from:)(void *a1)
{
  type metadata accessor for RemoteXPCPeerConnection();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 72) = 0;
  *(void *)(v2 + 48) = 0;
  *(void *)(v2 + 56) = 0;
  *(unsigned char *)(v2 + 64) = 0;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 16) = MEMORY[0x1E4FBC860];
  *(void *)(v2 + 24) = a1;
  id v3 = a1;
  return v2;
}

uint64_t type metadata accessor for RemoteXPCPeerConnection()
{
  return self;
}

uint64_t sub_1D76CE1E4()
{
  return xpc_remote_connection_activate();
}

void sub_1D76CE1EC()
{
}

uint64_t sub_1D76CE240()
{
  if (v6)
  {
    sub_1D76B10C8();
    swift_bridgeObjectRetain();
    swift_willThrowTypedImpl();
    swift_allocError();
    uint64_t *v1 = v3;
    v1[1] = v4;
    swift_unknownObjectRelease();
    return sub_1D76CDED8(v3, v4, v5, 1);
  }
  else
  {
    uint64_t result = swift_unknownObjectRelease();
    *uint64_t v0 = v3;
    v0[1] = v4;
    v0[2] = v5;
  }
  return result;
}

uint64_t sub_1D76CE2E4()
{
  return xpc_remote_connection_send_message();
}

uint64_t sub_1D76CE2F0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *a1;
  swift_weakInit();
  sub_1D76CE368(v8, v4, a2, (uint64_t)v10, a3, a4);
  return swift_weakDestroy();
}

uint64_t sub_1D76CE368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA83A9C8);
  uint64_t v8 = swift_allocObject();
  *(unsigned char *)(v8 + 16) = 0;
  uint64_t v9 = swift_allocObject();
  swift_beginAccess();
  swift_weakLoadStrong();
  swift_weakInit();
  swift_release();
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = v8;
  void v10[3] = v9;
  v10[4] = a5;
  void v10[5] = a6;
  aBlock[4] = sub_1D76D06D4;
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x1E4F143A0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1D76CE6E0;
  aBlock[3] = &block_descriptor_120;
  uint64_t v11 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  xpc_remote_connection_send_message_with_reply();
  _Block_release(v11);
  return swift_release();
}

void sub_1D76CE500(uint64_t a1, uint64_t a2)
{
  if ((atomic_fetch_or((atomic_uchar *volatile)(a2 + 16), 0x80u) & 0x80) == 0)
  {
    swift_beginAccess();
    swift_weakLoadStrong();
    swift_unknownObjectRetain();
    sub_1D76ECDC8();
  }
  sub_1D76F82B4();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBA33F30);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1D76FB290;
  swift_beginAccess();
  swift_weakLoadStrong();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A9D8);
  uint64_t v3 = sub_1D76F8044();
  uint64_t v5 = v4;
  uint64_t v6 = MEMORY[0x1E4FBB1A0];
  *(void *)(v2 + 56) = MEMORY[0x1E4FBB1A0];
  unint64_t v7 = sub_1D76B6EA0();
  *(void *)(v2 + 64) = v7;
  *(void *)(v2 + 32) = v3;
  *(void *)(v2 + 40) = v5;
  swift_unknownObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA334D0);
  uint64_t v8 = sub_1D76F8044();
  *(void *)(v2 + 96) = v6;
  *(void *)(v2 + 104) = v7;
  *(void *)(v2 + 72) = v8;
  *(void *)(v2 + 80) = v9;
  sub_1D76BBA90(0, (unint64_t *)&qword_1EA83A920);
  uint64_t v10 = (void *)sub_1D76F8394();
  sub_1D76F7D84();
  swift_bridgeObjectRelease();
}

uint64_t sub_1D76CE6E0(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t sub_1D76CE740(uint64_t a1)
{
  return MEMORY[0x1F4149898](*(void *)(v1 + 24), a1);
}

uint64_t sub_1D76CE74C(uint64_t (*a1)(void))
{
  return a1(*(void *)(v1 + 24));
}

uint64_t sub_1D76CE77C()
{
  return sub_1D76CE7B4();
}

uint64_t sub_1D76CE7B4()
{
  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t sub_1D76CE7DC()
{
  return MEMORY[0x1F41497F8](*(void *)(v0 + 24));
}

uint64_t sub_1D76CE7E4()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F88);
  MEMORY[0x1F4188788](v1 - 8);
  uint64_t v3 = (char *)v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1D76CCFEC();
  uint64_t v13 = v4;
  unint64_t v14 = v5;
  if (*(void *)(v0 + 40))
  {
    unint64_t v11 = v4;
    unint64_t v12 = v5;
    v10[0] = 0xD00000000000001CLL;
    v10[1] = 0x80000001D76FE3D0;
    uint64_t v6 = sub_1D76F7D14();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v3, 1, 1, v6);
    sub_1D76CE9C4();
    swift_bridgeObjectRetain();
    sub_1D76F83D4();
    char v8 = v7;
    sub_1D76CEA18((uint64_t)v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v8 & 1) == 0)
    {
      unint64_t v11 = 0;
      unint64_t v12 = 0xE000000000000000;
      sub_1D76F8464();
      swift_bridgeObjectRelease();
      unint64_t v11 = 0xD000000000000016;
      unint64_t v12 = 0x80000001D76FE3F0;
      sub_1D76F80A4();
      sub_1D76CEA78();
      sub_1D76F8064();
      swift_bridgeObjectRelease();
    }
  }
  return v13;
}

unint64_t sub_1D76CE9C4()
{
  unint64_t result = qword_1EA83A9B0;
  if (!qword_1EA83A9B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83A9B0);
  }
  return result;
}

uint64_t sub_1D76CEA18(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F88);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1D76CEA78()
{
  unint64_t result = qword_1EA83A9B8;
  if (!qword_1EA83A9B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83A9B8);
  }
  return result;
}

void RemoteXPCConnection.__allocating_init()()
{
}

void RemoteXPCConnection.init()()
{
}

uint64_t sub_1D76CEB2C()
{
  return swift_bridgeObjectRelease();
}

uint64_t RemoteXPCConnection.deinit()
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t RemoteXPCConnection.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186488](v0, 48, 7);
}

uint64_t sub_1D76CEBD4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(v2 + 48);
  *(void *)(v3 + 48) = a1;
  *(void *)(v3 + 56) = a2;
  swift_retain();
  sub_1D76CCEE8(v6);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = 0;
  uint64_t v8 = swift_allocObject();
  swift_weakInit();
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = v7;
  v9[3] = v8;
  v9[4] = a1;
  void v9[5] = a2;
  v12[4] = sub_1D76CF29C;
  void v12[5] = v9;
  v12[0] = MEMORY[0x1E4F143A0];
  v12[1] = 1107296256;
  void v12[2] = sub_1D76CE6E0;
  uint64_t v12[3] = &block_descriptor_3;
  uint64_t v10 = _Block_copy(v12);
  swift_retain();
  swift_retain();
  swift_release();
  xpc_remote_connection_set_event_handler();
  _Block_release(v10);
  return swift_release();
}

uint64_t sub_1D76CED30()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1D76CED68(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *), uint64_t a5)
{
  void v20[8] = a5;
  unint64_t v21 = a4;
  uint64_t v7 = sub_1D76F7E64();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188788](v7);
  uint64_t v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1D76F7E84();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188788](v11);
  unint64_t v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  if (*(void *)(a2 + 16))
  {
    swift_retain();
    sub_1D76CFB64(a1);
    return swift_release();
  }
  v20[7] = a2 + 16;
  v20[1] = a2;
  v20[2] = v14;
  unint64_t v16 = v21;
  void v20[3] = v10;
  v20[4] = v11;
  v20[5] = v12;
  v20[6] = v8;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    self;
    uint64_t v17 = swift_dynamicCastObjCClass();
    if (!v17)
    {
      swift_getObjectType();
      OS_xpc_object.type.getter();
    }
    uint64_t v18 = v17;
    type metadata accessor for RemoteXPCPeerConnection();
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 72) = 0;
    *(void *)(v19 + 48) = 0;
    *(void *)(v19 + 56) = 0;
    *(unsigned char *)(v19 + 64) = 0;
    *(void *)(v19 + 32) = 0;
    *(void *)(v19 + 40) = 0;
    *(void *)(v19 + 16) = MEMORY[0x1E4FBC860];
    *(void *)(v19 + 24) = v18;
    v22[0] = v19;
    v22[1] = &protocol witness table for RemoteXPCPeerConnection;
    char v23 = 0;
    swift_unknownObjectRetain();
    v16(v22);
    swift_release();
    return swift_release();
  }
  return result;
}

void sub_1D76CEFE8(uint64_t a1)
{
  if (XPCTypeError != a1)
  {
    uint64_t v6 = *(void **)(v3 + 24);
    type metadata accessor for RemoteXPCPeerConnection();
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 72) = 0;
    *(void *)(v7 + 48) = 0;
    *(void *)(v7 + 56) = 0;
    *(void *)(v7 + 32) = 0;
    *(void *)(v7 + 40) = 0;
    uint64_t v8 = MEMORY[0x1E4FBC860];
    *(void *)(v7 + 16) = MEMORY[0x1E4FBC860];
    *(void *)(v7 + 24) = v6;
    *(unsigned char *)(v7 + 64) = 1;
    uint64_t v9 = *(uint64_t **)(v5 - 264);
    swift_beginAccess();
    *uint64_t v9 = v7;
    id v10 = v6;
    swift_release();
    swift_beginAccess();
    uint64_t v11 = *v9;
    if (v11)
    {
      *(void *)(v5 - 232) = v11;
      *(void *)(v5 - 224) = &protocol witness table for RemoteXPCPeerConnection;
      *(unsigned char *)(v5 - 216) = 0;
      swift_retain();
      v4(v5 - 232);
      swift_release();
      uint64_t v12 = *(void **)(v3 + 64);
      uint64_t v13 = swift_allocObject();
      *(void *)(v13 + 16) = *(void *)(v5 - 312);
      *(void *)(v13 + 24) = v1;
      *(void *)(v5 - 200) = sub_1D76D0680;
      *(void *)(v5 - 192) = v13;
      *(void *)(v5 - 232) = MEMORY[0x1E4F143A0];
      *(void *)(v5 - 224) = 1107296256;
      *(void *)(v5 - 216) = sub_1D76CF320;
      *(void *)(v5 - 208) = &block_descriptor_111;
      unint64_t v14 = _Block_copy((const void *)(v5 - 232));
      swift_unknownObjectRetain();
      id v15 = v12;
      swift_retain();
      uint64_t v16 = *(void *)(v5 - 304);
      sub_1D76F7E74();
      *(void *)(v5 - 240) = v8;
      sub_1D76D04C4();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33E98);
      sub_1D76D051C();
      uint64_t v17 = *(void *)(v5 - 296);
      sub_1D76F8434();
      MEMORY[0x1D9475770](0, v16, v17, v14);
      _Block_release(v14);
      swift_release();

      (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 272) + 8))(v17, v2);
      (*(void (**)(uint64_t, void))(*(void *)(v5 - 280) + 8))(v16, *(void *)(v5 - 288));
      JUMPOUT(0x1D76CEEC4);
    }
    __break(1u);
    JUMPOUT(0x1D76CF294);
  }
  swift_unknownObjectRetain();
  swift_retain();
  sub_1D769C348(MEMORY[0x1E4FBC860]);
  XPCError.init(_:from:userInfo:)();
}

uint64_t sub_1D76CF29C(uint64_t a1)
{
  return sub_1D76CED68(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void (**)(void *))(v1 + 32), *(void *)(v1 + 40));
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t sub_1D76CF2C0(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_beginAccess();
  if (*(void *)(a1 + 16))
  {
    swift_retain();
    sub_1D76CFB64(a2);
    return swift_release();
  }
  return result;
}

uint64_t sub_1D76CF320(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

void sub_1D76CF364()
{
}

uint64_t sub_1D76CF3C8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = (void *)a1;
  if (!a1)
  {
    sub_1D76BBA90(0, (unint64_t *)&qword_1EBA34230);
    a1 = sub_1D76F8334();
  }
  uint64_t v4 = *(void **)(v1 + 64);
  *(void *)(v1 + 64) = a1;
  id v5 = v3;

  uint64_t v6 = *(void *)(v2 + 24);

  return MEMORY[0x1F4149898](v6, v5);
}

void sub_1D76CF448()
{
  sub_1D76CCEE8(*(void *)(v0 + 48));
  uint64_t v1 = *(void **)(v0 + 64);
}

uint64_t RemoteXPCListenerConnection.deinit()
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  sub_1D76CCEE8(*(void *)(v0 + 48));

  return v0;
}

uint64_t RemoteXPCListenerConnection.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  sub_1D76CCEE8(*(void *)(v0 + 48));

  return MEMORY[0x1F4186488](v0, 72, 7);
}

void sub_1D76CF514(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 48);
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  swift_retain();
  sub_1D76CCEE8(v3);
  if ((*(unsigned char *)(v2 + 64) & 1) == 0)
  {
    uint64_t v4 = swift_allocObject();
    swift_weakInit();
    v6[4] = sub_1D76CF9E8;
    v6[5] = v4;
    v6[0] = MEMORY[0x1E4F143A0];
    v6[1] = 1107296256;
    void v6[2] = sub_1D76CE6E0;
    v6[3] = &block_descriptor_12;
    id v5 = _Block_copy(v6);
    swift_release();
    xpc_remote_connection_set_event_handler();
    _Block_release(v5);
  }
}

uint64_t sub_1D76CF60C(void *a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v3 = (const char *)result;
    uint64_t v4 = XPCTypeDictionary;
    if (v4 != MEMORY[0x1D94771B0](a1)
      || (uint64_t v5 = type metadata accessor for XPCSideChannel(),
          swift_unknownObjectRetain(),
          swift_retain(),
          LOBYTE(v5) = sub_1D76E51E4(a1, 0xD000000000000019, 0x80000001D76FD660, v3, v5),
          swift_bridgeObjectRelease(),
          swift_unknownObjectRelease(),
          swift_release(),
          (v5 & 1) == 0))
    {
      swift_unknownObjectRetain();
      swift_retain();
      sub_1D769C348(MEMORY[0x1E4FBC860]);
      XPCError.init(_:from:userInfo:)();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1D76CF9E8(void *a1)
{
  return sub_1D76CF60C(a1);
}

void sub_1D76CF9F0(void *a1)
{
  uint64_t v2 = *(void **)(v1 + 72);
  *(void *)(v1 + 72) = a1;
  id v3 = a1;

  if ((*(unsigned char *)(v1 + 64) & 1) == 0)
  {
    uint64_t v4 = *(void *)(v1 + 24);
    MEMORY[0x1F4149898](v4, v3);
  }
}

uint64_t sub_1D76CFA58()
{
  if (!*(void *)(v0 + 48))
  {
    *(void *)(v0 + 48) = nullsub_1;
    *(void *)(v0 + 56) = 0;
    sub_1D76CCEE8(0);
    if ((*(unsigned char *)(v0 + 64) & 1) == 0)
    {
      uint64_t v1 = swift_allocObject();
      swift_weakInit();
      _OWORD v4[4] = sub_1D76CF9E8;
      v4[5] = v1;
      v4[0] = MEMORY[0x1E4F143A0];
      v4[1] = 1107296256;
      v4[2] = sub_1D76CE6E0;
      v4[3] = &block_descriptor_17;
      uint64_t v2 = _Block_copy(v4);
      swift_release();
      xpc_remote_connection_set_event_handler();
      _Block_release(v2);
    }
  }
  return xpc_remote_connection_activate();
}

uint64_t sub_1D76CFB64(uint64_t a1)
{
  uint64_t v3 = sub_1D76F7E64();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188788](v3);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1D76F7E84();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t result = MEMORY[0x1F4188788](v7);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void **)(v1 + 72);
  if (v12)
  {
    uint64_t v19 = result;
    uint64_t v13 = swift_allocObject();
    swift_weakInit();
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = v13;
    *(void *)(v14 + 24) = a1;
    aBlock[4] = sub_1D76D04BC;
    aBlock[5] = v14;
    aBlock[0] = MEMORY[0x1E4F143A0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1D76CF320;
    aBlock[3] = &block_descriptor_96;
    id v15 = _Block_copy(aBlock);
    id v16 = v12;
    swift_retain();
    swift_unknownObjectRetain();
    sub_1D76F7E74();
    void aBlock[6] = MEMORY[0x1E4FBC860];
    sub_1D76D04C4();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33E98);
    sub_1D76D051C();
    sub_1D76F8434();
    MEMORY[0x1D9475770](0, v11, v6, v15);
    _Block_release(v15);

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v19);
    swift_release();
    return swift_release();
  }
  else
  {
    uint64_t v17 = *(void *)(v1 + 48);
    if (v17)
    {
      swift_unknownObjectRetain();
      sub_1D76D04A8(v17);
      swift_retain();
      sub_1D76ECDC8();
    }
  }
  return result;
}

uint64_t sub_1D76CFE98()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (*(void *)(result + 48))
    {
      sub_1D76D04A8(*(void *)(result + 48));
      swift_unknownObjectRetain();
      swift_retain();
      sub_1D76ECDC8();
    }
    return swift_release();
  }
  return result;
}

void sub_1D76CFF88()
{
  sub_1D76CCEE8(*(void *)(v0 + 48));
  uint64_t v1 = *(void **)(v0 + 72);
}

uint64_t RemoteXPCPeerConnection.deinit()
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  sub_1D76CCEE8(*(void *)(v0 + 48));

  return v0;
}

uint64_t RemoteXPCPeerConnection.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  sub_1D76CCEE8(*(void *)(v0 + 48));

  return MEMORY[0x1F4186488](v0, 80, 7);
}

void *static RemoteXPCConnection.remoteServiceListenerConnection(serviceName:targetQueue:)()
{
  sub_1D76F8054();
  uint64_t remote_service_listener = xpc_remote_connection_create_remote_service_listener();
  swift_release();
  type metadata accessor for RemoteXPCListenerConnection();
  uint64_t v1 = (void *)swift_allocObject();
  sub_1D76BBA90(0, (unint64_t *)&qword_1EBA34230);
  v1[6] = 0;
  v1[7] = 0;
  v1[8] = sub_1D76F8334();
  v1[4] = 0;
  v1[5] = 0;
  v1[2] = MEMORY[0x1E4FBC860];
  v1[3] = remote_service_listener;
  return v1;
}

uint64_t type metadata accessor for RemoteXPCListenerConnection()
{
  return self;
}

uint64_t static RemoteXPCConnection.connectionToRemoteService(device:serviceName:targetQueue:)()
{
  sub_1D76F8054();
  uint64_t v0 = (void *)remote_device_copy_service();
  swift_release();
  if (!v0) {
    return 0;
  }
  uint64_t v1 = xpc_remote_connection_create_with_remote_service();

  if (!v1) {
    return 0;
  }
  type metadata accessor for RemoteXPCPeerConnection();
  uint64_t result = swift_allocObject();
  *(void *)(result + 72) = 0;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(unsigned char *)(result + 64) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 16) = MEMORY[0x1E4FBC860];
  *(void *)(result + 24) = v1;
  return result;
}

void *static RemoteXPCConnection.unsafeListener(from:)(void *a1)
{
  type metadata accessor for RemoteXPCListenerConnection();
  uint64_t v2 = (void *)swift_allocObject();
  sub_1D76BBA90(0, (unint64_t *)&qword_1EBA34230);
  v2[6] = 0;
  v2[7] = 0;
  id v3 = a1;
  v2[8] = sub_1D76F8334();
  v2[4] = 0;
  v2[5] = 0;
  v2[2] = MEMORY[0x1E4FBC860];
  v2[3] = v3;
  return v2;
}

void *static RemoteXPCConnection.unsafeListener(from:forServiceNamed:)(void *a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for RemoteXPCListenerConnection();
  uint64_t v6 = (void *)swift_allocObject();
  sub_1D76BBA90(0, (unint64_t *)&qword_1EBA34230);
  void v6[6] = 0;
  v6[7] = 0;
  id v7 = a1;
  swift_bridgeObjectRetain();
  v6[8] = sub_1D76F8334();
  v6[4] = a2;
  v6[5] = a3;
  void v6[2] = MEMORY[0x1E4FBC860];
  v6[3] = v7;
  return v6;
}

uint64_t static RemoteXPCConnection.unsafePeer(from:forServiceNamed:)(void *a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for RemoteXPCPeerConnection();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 72) = 0;
  *(void *)(v6 + 48) = 0;
  *(void *)(v6 + 56) = 0;
  *(unsigned char *)(v6 + 64) = 0;
  *(void *)(v6 + 32) = a2;
  *(void *)(v6 + 40) = a3;
  *(void *)(v6 + 16) = MEMORY[0x1E4FBC860];
  *(void *)(v6 + 24) = a1;
  id v7 = a1;
  swift_bridgeObjectRetain();
  return v6;
}

uint64_t type metadata accessor for RemoteXPCConnection()
{
  return self;
}

uint64_t method lookup function for RemoteXPCConnection(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for RemoteXPCConnection);
}

uint64_t dispatch thunk of RemoteXPCConnection.withUnsafeUnderlyingConnection<A>(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t method lookup function for RemoteXPCListenerConnection(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for RemoteXPCListenerConnection);
}

uint64_t dispatch thunk of RemoteXPCListenerConnection.setPeerConnectionHandler(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 352))();
}

uint64_t dispatch thunk of RemoteXPCListenerConnection.createEndpoint()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 360))();
}

uint64_t method lookup function for RemoteXPCPeerConnection(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for RemoteXPCPeerConnection);
}

uint64_t dispatch thunk of RemoteXPCPeerConnection.setEventHandler(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 384))();
}

uint64_t sub_1D76D04A8(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_1D76D04BC()
{
  return sub_1D76CFE98();
}

unint64_t sub_1D76D04C4()
{
  unint64_t result = qword_1EBA33E60;
  if (!qword_1EBA33E60)
  {
    sub_1D76F7E64();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBA33E60);
  }
  return result;
}

unint64_t sub_1D76D051C()
{
  unint64_t result = qword_1EBA33EA0;
  if (!qword_1EBA33EA0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EBA33E98);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBA33EA0);
  }
  return result;
}

unsigned char *sub_1D76D057C(unsigned char *result)
{
  if ((*result & 1) == 0) {
    return (unsigned char *)sub_1D76CFB64(*(void *)(v1 + 24));
  }
  return result;
}

uint64_t sub_1D76D05AC()
{
  swift_weakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1D76D05E4()
{
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 72, 7);
}

uint64_t objectdestroy_92Tm()
{
  swift_release();
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D76D0680()
{
  return sub_1D76CF2C0(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t objectdestroy_5Tm()
{
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

void sub_1D76D06D4(uint64_t a1)
{
  sub_1D76CE500(a1, *(void *)(v1 + 16));
}

uint64_t audit_token_t.processIdentifier.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D76D07D4(a1, a2, a3, a4, (uint64_t (*)(void *))XPCaudit_token_to_pid);
}

uint64_t audit_token_t.auditUserIdentifier.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D76D07D4(a1, a2, a3, a4, (uint64_t (*)(void *))XPCaudit_token_to_auid);
}

uint64_t audit_token_t.effectiveUserIdentifier.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D76D07D4(a1, a2, a3, a4, (uint64_t (*)(void *))XPCaudit_token_to_euid);
}

uint64_t audit_token_t.effectiveGroupIdentifier.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D76D07D4(a1, a2, a3, a4, (uint64_t (*)(void *))XPCaudit_token_to_egid);
}

uint64_t audit_token_t.realUserIdentifier.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D76D07D4(a1, a2, a3, a4, (uint64_t (*)(void *))XPCaudit_token_to_ruid);
}

uint64_t audit_token_t.realGroupIdentifier.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D76D07D4(a1, a2, a3, a4, (uint64_t (*)(void *))XPCaudit_token_to_rgid);
}

uint64_t audit_token_t.auditSessionIdentifier.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D76D07D4(a1, a2, a3, a4, (uint64_t (*)(void *))XPCaudit_token_to_asid);
}

uint64_t audit_token_t.processIdentifierVersion.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D76D07D4(a1, a2, a3, a4, (uint64_t (*)(void *))XPCaudit_token_to_pidversion);
}

uint64_t sub_1D76D07D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void *))
{
  v6[0] = a1;
  v6[1] = a2;
  void v6[2] = a3;
  v6[3] = a4;
  return a5(v6);
}

uint64_t static audit_token_t.current()()
{
  v5[1] = *MEMORY[0x1E4F143C0];
  task_name_t v1 = *MEMORY[0x1E4F14958];
  memset(v4, 0, sizeof(v4));
  uint64_t result = sub_1D76D0C40((integer_t *)v4, (uint64_t)v5, v1, &v3);
  if (!v0) {
    return *(void *)&v4[0];
  }
  return result;
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> audit_token_t.init(taskName:)(audit_token_t *__return_ptr retstr, Swift::UInt32 taskName)
{
  v4[1] = *MEMORY[0x1E4F143C0];
  memset(v3, 0, sizeof(v3));
  sub_1D76D0C40((integer_t *)v3, (uint64_t)v4, taskName, &v2);
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> audit_token_t.init(processIdentifier:expectedProcessIdentifierVersion:)(audit_token_t *__return_ptr retstr, Swift::Int32 processIdentifier, Swift::Int32_optional expectedProcessIdentifierVersion)
{
  kern_return_t v14;
  int v15;
  mach_port_name_t v16;
  uint64_t v17;
  ipc_space_t v18;
  mach_port_name_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  long long v29;
  long long v30;
  uint64_t v31;
  uint64_t v32;

  uint64_t v3 = *(void *)&expectedProcessIdentifierVersion.value;
  uint64_t v32 = *MEMORY[0x1E4F143C0];
  uint64_t v5 = sub_1D76F7A64();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188788](v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1D76F7D74();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188788](v9);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  HIDWORD(v31) = 0;
  uint64_t v13 = (ipc_space_t *)MEMORY[0x1E4F14958];
  uint64_t v14 = task_name_for_pid(*MEMORY[0x1E4F14958], processIdentifier, (mach_port_name_t *)&v31 + 1);
  if (v14)
  {
    id v15 = v14;
    sub_1D769C348(MEMORY[0x1E4FBC860]);
    MachError.init(uncheckedCode:userInfo:)(v15, (uint64_t)v12);
    sub_1D76F7D64();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    swift_willThrow();
    return;
  }
  uint64_t v25 = v5;
  unint64_t v26 = v6;
  id v16 = HIDWORD(v31);
  uint64_t v29 = 0u;
  uint64_t v30 = 0u;
  uint64_t v17 = v27;
  sub_1D76D0C40((integer_t *)&v29, (uint64_t)&v31, HIDWORD(v31), &v28);
  if (v17)
  {
    uint64_t v18 = *v13;
    uint64_t v19 = v16;
  }
  else
  {
    uint64_t v27 = DWORD1(v29);
    uint64_t v24 = DWORD2(v29);
    char v23 = HIDWORD(v29);
    uint64_t v22 = v30;
    if ((v3 & 0x100000000) != 0
      || (*(void *)((char *)&v29 + 4) = __PAIR64__(v24, v27),
          HIDWORD(v29) = v23,
          LODWORD(v30) = v22,
          XPCaudit_token_to_pidversion(&v29) == v3))
    {
      mach_port_deallocate(*v13, v16);
      return;
    }
    LODWORD(v29) = 3;
    sub_1D769C348(MEMORY[0x1E4FBC860]);
    sub_1D76D0DB0();
    uint64_t v20 = v25;
    sub_1D76F7B74();
    sub_1D76F7A44();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v8, v20);
    swift_willThrow();
    uint64_t v18 = *v13;
    uint64_t v19 = HIDWORD(v31);
  }
  mach_port_deallocate(v18, v19);
}

uint64_t sub_1D76D0C40(integer_t *a1, uint64_t a2, task_name_t a3, uint64_t *a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143C0];
  uint64_t v7 = sub_1D76F7D74();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188788](v7);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  HIDWORD(v14) = 8;
  if (!a1) {
    __break(1u);
  }
  uint64_t result = task_info(a3, 0xFu, a1, (mach_msg_type_number_t *)&v14 + 1);
  if (result)
  {
    int v12 = result;
    sub_1D769C348(MEMORY[0x1E4FBC860]);
    MachError.init(uncheckedCode:userInfo:)(v12, (uint64_t)v10);
    uint64_t v13 = sub_1D76F7D64();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    uint64_t result = swift_willThrow();
    *a4 = v13;
  }
  return result;
}

unint64_t sub_1D76D0DB0()
{
  unint64_t result = qword_1EA83AC90;
  if (!qword_1EA83AC90)
  {
    sub_1D76F7A64();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83AC90);
  }
  return result;
}

uint64_t XPCReplyProviding.init(createReply:sendReply:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = result;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  return result;
}

uint64_t XPCMessageDispatcher.__allocating_init(xpcReplyProviding:inboundObserver:outboundObserver:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return XPCMessageDispatcher.init(xpcReplyProviding:inboundObserver:outboundObserver:)(a1, a2, a3, a4, a5);
}

uint64_t XPCMessageDispatcher.errorOnUnregisteredTypes.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 80) = a1;
  return result;
}

_xpc_connection_s *sub_1D76D0EC4(xpc_object_t *a1)
{
  xpc_object_t v1 = *a1;
  uint64_t result = xpc_dictionary_get_remote_connection(*a1);
  if (result)
  {
    uint64_t v3 = result;
    self;
    if (swift_dynamicCastObjCClass()) {
      xpc_remote_connection_send_message();
    }
    else {
      xpc_connection_send_message(v3, v1);
    }
    return (_xpc_connection_s *)swift_unknownObjectRelease();
  }
  return result;
}

void static XPCReplyProviding.passthrough.getter(void *a1@<X8>)
{
  *a1 = sub_1D76D0EC0;
  a1[1] = 0;
  a1[2] = sub_1D76D0EC4;
  a1[3] = 0;
}

uint64_t XPCReplyProviding.init(sendReply:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = sub_1D76D0EC0;
  a3[1] = 0;
  a3[2] = result;
  a3[3] = a2;
  return result;
}

uint64_t sub_1D76D0F98@<X0>(xpc_object_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34390);
  uint64_t v5 = MEMORY[0x1F4188788](v4 - 8);
  uint64_t v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188788](v5);
  uint64_t v9 = (char *)v16 - v8;
  xpc_object_t v10 = *a1;
  uint64_t result = (uint64_t)xpc_dictionary_create_reply(*a1);
  if (!result)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return result;
  }
  uint64_t v12 = result;
  v16[1] = result;
  v16[2] = 0xD000000000000019;
  v16[3] = 0x80000001D76FD660;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  if (xpc_dictionary_get_string(v10, "XPCSideChannel.uniqueIdentifier"))
  {
    sub_1D76F80B4();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    sub_1D76F7CA4();
    swift_bridgeObjectRelease();
    uint64_t v13 = sub_1D76F7D04();
    uint64_t v14 = *(void *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v7, 1, v13) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v9, v7, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v9, 0, 1, v13);
      goto LABEL_9;
    }
    sub_1D76CCEF8((uint64_t)v7);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
  uint64_t v15 = sub_1D76F7D04();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v9, 1, 1, v15);
LABEL_9:
  sub_1D76AD52C((uint64_t)v9);
  uint64_t result = swift_unknownObjectRelease();
  *a2 = v12;
  a2[1] = 0xD000000000000019;
  a2[2] = 0x80000001D76FD660;
  return result;
}

uint64_t XPCReplyProviding.createReply(_:)(long long *a1)
{
  uint64_t v2 = *((void *)a1 + 2);
  uint64_t v3 = *v1;
  long long v5 = *a1;
  uint64_t v6 = v2;
  return v3(&v5);
}

uint64_t XPCReplyProviding.sendReply(_:)(long long *a1)
{
  uint64_t v2 = *((void *)a1 + 2);
  uint64_t v3 = *(uint64_t (**)(long long *))(v1 + 16);
  long long v5 = *a1;
  uint64_t v6 = v2;
  return v3(&v5);
}

uint64_t XPCMessageDispatchTraits.replyProvider.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  *a1 = *v1;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return sub_1D76D1E88(v2);
}

__n128 XPCMessageDispatchTraits.replyProvider.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  uint64_t v2 = a1[1].n128_i64[0];
  uint64_t v3 = a1[1].n128_i64[1];
  sub_1D76CCEA4(*v1);
  __n128 result = v5;
  *(__n128 *)uint64_t v1 = v5;
  v1[2] = v2;
  v1[3] = v3;
  return result;
}

uint64_t (*XPCMessageDispatchTraits.replyProvider.modify())()
{
  return nullsub_1;
}

uint64_t sub_1D76D1318@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  if (v3)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = sub_1D76D2BF0;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)())v5;

  return sub_1D76D04A8(v3);
}

uint64_t sub_1D76D1398(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = sub_1D76D2BC8;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *(void *)(a2 + 32);
  sub_1D76D04A8(v3);
  uint64_t result = sub_1D76CCEE8(v7);
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 40) = v5;
  return result;
}

uint64_t XPCMessageDispatchTraits.inboundObserver.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  sub_1D76D04A8(v1);
  return v1;
}

uint64_t XPCMessageDispatchTraits.inboundObserver.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1D76CCEE8(*(void *)(v2 + 32));
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

uint64_t (*XPCMessageDispatchTraits.inboundObserver.modify())()
{
  return nullsub_1;
}

uint64_t sub_1D76D14C0@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  if (v3)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = sub_1D76D2BA0;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)())v5;

  return sub_1D76D04A8(v3);
}

uint64_t sub_1D76D1540(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = sub_1D76D2B78;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *(void *)(a2 + 48);
  sub_1D76D04A8(v3);
  uint64_t result = sub_1D76CCEE8(v7);
  *(void *)(a2 + 48) = v6;
  *(void *)(a2 + 56) = v5;
  return result;
}

uint64_t XPCMessageDispatchTraits.outboundObserver.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  sub_1D76D04A8(v1);
  return v1;
}

uint64_t XPCMessageDispatchTraits.outboundObserver.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1D76CCEE8(*(void *)(v2 + 48));
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  return result;
}

uint64_t (*XPCMessageDispatchTraits.outboundObserver.modify())()
{
  return nullsub_1;
}

double XPCMessageDispatchTraits.init()@<D0>(uint64_t a1@<X8>)
{
  type metadata accessor for XPCObjectEncoder();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = 0;
  type metadata accessor for XPCObjectDecoder();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(unsigned char *)(a1 + 64) = 1;
  *(void *)(a1 + 72) = v2;
  *(void *)(a1 + 80) = v3;
  return result;
}

uint64_t XPCMessageDispatchTraits.isDispatchable(encodedData:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  long long v3 = v1[3];
  long long v9 = v1[2];
  long long v10 = v3;
  long long v11 = v1[4];
  uint64_t v12 = *((void *)v1 + 10);
  long long v4 = v1[1];
  long long v7 = *v1;
  long long v8 = v4;
  sub_1D76D1734(v2, (char *)&v6);
  return v6;
}

void sub_1D76D1734(uint64_t a1@<X0>, char *a2@<X8>)
{
  sub_1D76BEA74(a1, &v5);
  if (v2)
  {

    char v4 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    char v4 = 1;
  }
  *a2 = v4;
}

uint64_t *XPCMessageDispatchTraits.prepareForEncodingHandlerValue(from:)@<X0>(uint64_t *result@<X0>, uint64_t **a2@<X8>)
{
  void (**v2)(void *__return_ptr, void *);
  uint64_t v3;
  uint64_t v5;
  void (*v6)(void *__return_ptr, void *);
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  void v12[3];
  void v13[5];

  uint64_t v5 = *result;
  if (*result)
  {
    v13[4] = v3;
    unsigned __int8 v6 = *v2;
    if (*v2)
    {
      long long v8 = result[1];
      long long v7 = result[2];
      v12[0] = v5;
      v12[1] = v8;
      void v12[2] = v7;
      sub_1D76D1ECC(v5);
      sub_1D76D1E88((uint64_t)v6);
      v6(v13, v12);
      sub_1D76CCEA4((uint64_t)v6);
      long long v9 = (uint64_t *)v13[0];
      if (v13[0])
      {
        long long v11 = (uint64_t *)v13[1];
        long long v10 = (uint64_t *)v13[2];
        double result = (uint64_t *)sub_1D76C85B0(v5);
        *a2 = v9;
        a2[1] = v11;
        a2[2] = v10;
      }
      else
      {
        sub_1D76D1F0C();
        swift_allocError();
        swift_willThrow();
        return (uint64_t *)sub_1D76C85B0(v5);
      }
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    double result = (uint64_t *)xpc_dictionary_create(0, 0, 0);
    *a2 = result;
    a2[1] = (uint64_t *)0xD000000000000019;
    a2[2] = (uint64_t *)0x80000001D76FD660;
  }
  return result;
}

uint64_t XPCMessageDispatchTraits.encode<A>(value:into:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *a2;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  XPCObjectEncoder.encode<A>(_:into:)(a1, v6, a4);
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t XPCMessageDispatchTraits.decode<A>(encodedData:)()
{
  return XPCDictionary.withUnsafeUnderlyingDictionary<A>(_:)(sub_1D76D1F60);
}

uint64_t XPCMessageDispatchTraits.readEncodedRequestType(from:)(uint64_t *a1)
{
  uint64_t result = sub_1D76BEA74(*a1, &v3);
  if (!v1) {
    return v3;
  }
  return result;
}

uint64_t XPCMessageDispatchTraits.sink(handlerValue:)(uint64_t result)
{
  uint64_t v2 = *v1;
  if (*v1)
  {
    uint64_t v3 = (void (*)(long long *))v1[2];
    uint64_t v4 = *(void *)(result + 16);
    long long v5 = *(_OWORD *)result;
    uint64_t v6 = v4;
    swift_retain();
    swift_retain();
    v3(&v5);
    return sub_1D76CCEA4(v2);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t XPCMessageDispatchTraits.willDispatch(value:)()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 32);
  if (v1) {
    return v1();
  }
  return result;
}

uint64_t XPCMessageDispatchTraits.shouldPass(error:)(void *a1)
{
  if ((*(unsigned char *)(v1 + 64) & 1) != 0
    || (id v2 = a1,
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F40),
        !swift_dynamicCast()))
  {
    char v3 = 0;
  }
  else
  {
    char v3 = v5 ^ 1;
  }
  return v3 & 1;
}

uint64_t XPCMessageDispatchTraits.didDispatch(value:result:)()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 48);
  if (v1) {
    return v1();
  }
  return result;
}

uint64_t *sub_1D76D1BA4@<X0>(uint64_t *a1@<X0>, uint64_t **a2@<X8>)
{
  return XPCMessageDispatchTraits.prepareForEncodingHandlerValue(from:)(a1, a2);
}

uint64_t sub_1D76D1BBC(uint64_t *a1)
{
  return XPCMessageDispatchTraits.readEncodedRequestType(from:)(a1);
}

uint64_t sub_1D76D1BD4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return XPCMessageDispatchTraits.encode<A>(value:into:)(a1, a2, a3, a3);
}

uint64_t sub_1D76D1BF0()
{
  return XPCMessageDispatchTraits.decode<A>(encodedData:)();
}

uint64_t sub_1D76D1C24(uint64_t a1)
{
  return XPCMessageDispatchTraits.sink(handlerValue:)(a1);
}

uint64_t XPCMessageDispatcher.errorOnUnregisteredTypes.getter()
{
  sub_1D76D395C((uint64_t)v4);
  uint64_t v0 = v4[4];
  uint64_t v1 = v4[6];
  uint64_t v2 = v5;
  sub_1D76CCEA4(v4[0]);
  sub_1D76CCEE8(v0);
  sub_1D76CCEE8(v1);
  swift_release();
  swift_release();
  return v2;
}

void (*XPCMessageDispatcher.errorOnUnregisteredTypes.modify(void *a1))(uint64_t a1)
{
  char v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[6] = v1;
  *((unsigned char *)v3 + 56) = XPCMessageDispatcher.errorOnUnregisteredTypes.getter() & 1;
  return sub_1D76D1D2C;
}

void sub_1D76D1D2C(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  char v2 = *(unsigned char *)(*(void *)a1 + 56);
  swift_beginAccess();
  *(unsigned char *)(v1[6] + 80) = v2;

  free(v1);
}

uint64_t XPCMessageDispatcher.init(xpcReplyProviding:inboundObserver:outboundObserver:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void *)a1;
  long long v15 = *(_OWORD *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = CodableDispatcher.init()(a1);
  swift_beginAccess();
  uint64_t v11 = *(void *)(v10 + 16);
  *(void *)(v10 + 16) = v8;
  *(_OWORD *)(v10 + 24) = v15;
  *(void *)(v10 + 40) = v9;
  swift_retain();
  sub_1D76CCEA4(v11);
  uint64_t v12 = *(void *)(v10 + 48);
  *(void *)(v10 + 48) = a2;
  *(void *)(v10 + 56) = a3;
  sub_1D76D04A8(a2);
  sub_1D76CCEE8(v12);
  uint64_t v13 = *(void *)(v10 + 64);
  *(void *)(v10 + 64) = a4;
  *(void *)(v10 + 72) = a5;
  sub_1D76CCEE8(v13);
  sub_1D76CCEE8(a2);
  swift_release();
  return v10;
}

uint64_t sub_1D76D1E88(uint64_t result)
{
  if (result)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_1D76D1ECC(uint64_t result)
{
  if (result)
  {
    swift_unknownObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_1D76D1F0C()
{
  unint64_t result = qword_1EA83A9E0;
  if (!qword_1EA83A9E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83A9E0);
  }
  return result;
}

uint64_t sub_1D76D1F60(uint64_t a1)
{
  return XPCObjectDecoder.decode<A>(_:from:)(*(void *)(v1 + 24), a1);
}

void XPCMessageDispatcher.__allocating_init()()
{
}

void XPCMessageDispatcher.init()()
{
}

uint64_t XPCMessageDispatcher.__deallocating_deinit()
{
  uint64_t v0 = CodableDispatcher.deinit();

  return MEMORY[0x1F4186488](v0, 120, 7);
}

uint64_t XPCDispatchError.init(rawValue:)@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = result != 0;
  return result;
}

uint64_t XPCDispatchError.rawValue.getter()
{
  return 0;
}

uint64_t sub_1D76D2028()
{
  return 1;
}

uint64_t sub_1D76D2030()
{
  return sub_1D76F8D54();
}

uint64_t sub_1D76D2074()
{
  return sub_1D76F8D34();
}

uint64_t sub_1D76D209C()
{
  return sub_1D76F8D54();
}

void *sub_1D76D20DC@<X0>(void *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 0;
  return result;
}

void sub_1D76D20F0(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1D76D20F8()
{
  return sub_1D76F81A4();
}

uint64_t sub_1D76D2158()
{
  return sub_1D76F8164();
}

uint64_t sub_1D76D21AC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1D76D2C18();
  unint64_t v5 = sub_1D76D2C6C();

  return MEMORY[0x1F4185E20](a1, a2, v4, v5);
}

void sub_1D76D220C()
{
}

unint64_t sub_1D76D2240()
{
  unint64_t result = qword_1EA83A9E8;
  if (!qword_1EA83A9E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83A9E8);
  }
  return result;
}

uint64_t sub_1D76D229C()
{
  return 8;
}

void *sub_1D76D22A8(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1D76D22BC()
{
  return 8;
}

uint64_t sub_1D76D22C8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = XPCMessageDispatcher.errorOnUnregisteredTypes.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1D76D22F8(char *a1)
{
  return XPCMessageDispatcher.errorOnUnregisteredTypes.setter(*a1);
}

uint64_t sub_1D76D2320()
{
  return 8;
}

uint64_t destroy for XPCReplyProviding()
{
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for XPCReplyProviding(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for XPCReplyProviding(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for XPCReplyProviding(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for XPCReplyProviding()
{
  return &type metadata for XPCReplyProviding;
}

uint64_t sub_1D76D246C(void *a1)
{
  if (*a1)
  {
    swift_release();
    swift_release();
  }
  if (a1[4]) {
    swift_release();
  }
  if (a1[6]) {
    swift_release();
  }
  swift_release();

  return swift_release();
}

uint64_t sub_1D76D24E0(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2)
  {
    *(void *)a1 = *(void *)a2;
    uint64_t v4 = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = v4;
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
  }
  uint64_t v6 = *(void *)(a2 + 32);
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = v6;
    *(void *)(a1 + 40) = v7;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (v8)
  {
    uint64_t v9 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = v8;
    *(void *)(a1 + 56) = v9;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  }
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v10 = *(void *)(a2 + 72);
  uint64_t v11 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = v10;
  *(void *)(a1 + 80) = v11;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_1D76D25B4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (*(void *)a1)
  {
    if (v4)
    {
      uint64_t v5 = a2[1];
      *(void *)a1 = v4;
      *(void *)(a1 + 8) = v5;
      swift_retain();
      swift_release();
      uint64_t v6 = a2[3];
      *(void *)(a1 + 16) = a2[2];
      *(void *)(a1 + 24) = v6;
      swift_retain();
      swift_release();
    }
    else
    {
      sub_1D76D2750(a1);
      long long v9 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v9;
    }
  }
  else if (v4)
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = v4;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v8;
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v10 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
  }
  uint64_t v11 = a2[4];
  if (*(void *)(a1 + 32))
  {
    if (v11)
    {
      uint64_t v12 = a2[5];
      *(void *)(a1 + 32) = v11;
      *(void *)(a1 + 40) = v12;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v11)
  {
    uint64_t v13 = a2[5];
    *(void *)(a1 + 32) = v11;
    *(void *)(a1 + 40) = v13;
    swift_retain();
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
LABEL_15:
  uint64_t v14 = a2[6];
  if (!*(void *)(a1 + 48))
  {
    if (v14)
    {
      uint64_t v16 = a2[7];
      *(void *)(a1 + 48) = v14;
      *(void *)(a1 + 56) = v16;
      swift_retain();
      goto LABEL_22;
    }
LABEL_21:
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    goto LABEL_22;
  }
  if (!v14)
  {
    swift_release();
    goto LABEL_21;
  }
  uint64_t v15 = a2[7];
  *(void *)(a1 + 48) = v14;
  *(void *)(a1 + 56) = v15;
  swift_retain();
  swift_release();
LABEL_22:
  *(unsigned char *)(a1 + 64) = *((unsigned char *)a2 + 64);
  *(void *)(a1 + 72) = a2[9];
  swift_retain();
  swift_release();
  *(void *)(a1 + 80) = a2[10];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1D76D2750(uint64_t a1)
{
  return a1;
}

__n128 __swift_memcpy88_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t sub_1D76D27A8(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1)
  {
    if (*(void *)a2)
    {
      uint64_t v4 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v4;
      swift_release();
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      swift_release();
      goto LABEL_6;
    }
    sub_1D76D2750(a1);
  }
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
LABEL_6:
  uint64_t v6 = *(void *)(a2 + 32);
  if (*(void *)(a1 + 32))
  {
    if (v6)
    {
      uint64_t v7 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = v6;
      *(void *)(a1 + 40) = v7;
      swift_release();
      goto LABEL_13;
    }
    swift_release();
  }
  else if (v6)
  {
    uint64_t v8 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = v6;
    *(void *)(a1 + 40) = v8;
    goto LABEL_13;
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
LABEL_13:
  uint64_t v9 = *(void *)(a2 + 48);
  if (!*(void *)(a1 + 48))
  {
    if (v9)
    {
      uint64_t v11 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = v9;
      *(void *)(a1 + 56) = v11;
      goto LABEL_20;
    }
LABEL_19:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    goto LABEL_20;
  }
  if (!v9)
  {
    swift_release();
    goto LABEL_19;
  }
  uint64_t v10 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  swift_release();
LABEL_20:
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_release();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_release();
  return a1;
}

uint64_t sub_1D76D28DC(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 72);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1D76D2924(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 72) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for XPCMessageDispatchTraits()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1D76D2994()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for XPCMessageDispatcher()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for XPCMessageDispatcher(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for XPCMessageDispatcher);
}

uint64_t dispatch thunk of XPCMessageDispatcher.__allocating_init(xpcReplyProviding:inboundObserver:outboundObserver:)()
{
  return (*(uint64_t (**)(void))(v0 + 288))();
}

uint64_t getEnumTagSinglePayload for XPCDispatchError(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for XPCDispatchError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1D76D2B00);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1D76D2B28()
{
  return 0;
}

ValueMetadata *type metadata accessor for XPCDispatchError()
{
  return &type metadata for XPCDispatchError;
}

uint64_t sub_1D76D2B40()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D76D2B78()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1D76D2BA0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1D76D2BC8()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1D76D2BF0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

unint64_t sub_1D76D2C18()
{
  unint64_t result = qword_1EA83A9F0;
  if (!qword_1EA83A9F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83A9F0);
  }
  return result;
}

unint64_t sub_1D76D2C6C()
{
  unint64_t result = qword_1EA83A9F8;
  if (!qword_1EA83A9F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83A9F8);
  }
  return result;
}

uint64_t Optional.withUnsafeMutablePointer<A>(_:)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v36 = a1;
  uint64_t v35 = a2;
  v38[1] = *MEMORY[0x1E4F143C0];
  uint64_t v33 = *(void *)(a4 - 8);
  uint64_t v8 = MEMORY[0x1F4188788](a1);
  uint64_t v34 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188788](v8);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(v15 + 16);
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188788](v12);
  uint64_t v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v21 = v20;
  (*(void (**)(char *, char *))(v11 + 16))(v14, v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v16) == 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, a3);
    return v36(0);
  }
  else
  {
    uint64_t v31 = a5;
    uint64_t v30 = *(uint64_t (**)(char *, char *, uint64_t))(v17 + 32);
    uint64_t v23 = v30(v19, v14, v16);
    uint64_t v32 = &v30;
    uint64_t v24 = MEMORY[0x1F4188788](v23);
    *(&v30 - 4) = (uint64_t (*)(char *, char *, uint64_t))v16;
    *(&v30 - 3) = (uint64_t (*)(char *, char *, uint64_t))a4;
    MEMORY[0x1F4188788](v24);
    *(&v30 - 4) = (uint64_t (*)(char *, char *, uint64_t))v16;
    *(&v30 - 3) = (uint64_t (*)(char *, char *, uint64_t))a4;
    uint64_t v29 = v25;
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F40);
    uint64_t v28 = 15938;
    uint64_t v27 = v37;
    sub_1D76D33E8((uint64_t)v19, (uint64_t)sub_1D76D33CC, (uint64_t)(&v30 - 6), v16, v26, a4, MEMORY[0x1E4FBC0F0], (uint64_t)v38);
    if (v27)
    {
      return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v21, a3);
      v30(v21, v19, v16);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v21, 0, 1, v16);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v33 + 32))(v31, v34, a4);
    }
  }
}

uint64_t Optional.withUnsafePointer<A>(_:)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v24 = a4;
  v25[1] = *MEMORY[0x1E4F143C0];
  uint64_t v7 = *(void *)(a2 - 8);
  uint64_t v8 = MEMORY[0x1F4188788](a1);
  uint64_t v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v11 + 16);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188788](v8);
  uint64_t v15 = (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v10, v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, a2);
    return a1(0);
  }
  else
  {
    uint64_t v18 = (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 32))(v15, v10, v12);
    uint64_t v19 = MEMORY[0x1F4188788](v18);
    *(&v24 - 4) = v12;
    *(&v24 - 3) = a3;
    MEMORY[0x1F4188788](v19);
    *(&v24 - 4) = v12;
    *(&v24 - 3) = a3;
    uint64_t v23 = v20;
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F40);
    uint64_t v22 = 63553;
    sub_1D76D33E8((uint64_t)v15, (uint64_t)sub_1D76D34EC, (uint64_t)(&v24 - 6), v12, v21, a3, MEMORY[0x1E4FBC0F0], (uint64_t)v25);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
}

uint64_t sub_1D76D33A4()
{
  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t sub_1D76D33CC(uint64_t a1, void *a2)
{
  return sub_1D76D3508(a1, a2);
}

uint64_t sub_1D76D33E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a5 - 8);
  uint64_t v12 = MEMORY[0x1F4188788](a1);
  uint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = v15(v12, v14);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  }
  return result;
}

uint64_t sub_1D76D34C4()
{
  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t sub_1D76D34EC(uint64_t a1, void *a2)
{
  return sub_1D76D3508(a1, a2);
}

uint64_t sub_1D76D3508(uint64_t a1, void *a2)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 32))();
  if (v3) {
    *a2 = v3;
  }
  return result;
}

uint64_t MessageWrapper.init(value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = (char *)a3 + *(int *)(type metadata accessor for MessageWrapper() + 44);
  uint64_t v7 = *(void *)(a2 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v6, a1, a2);
  uint64_t v8 = sub_1D76F8DF4();
  uint64_t v10 = v9;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, a2);
  *a3 = v8;
  a3[1] = v10;
  return result;
}

uint64_t type metadata accessor for MessageWrapper()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1D76D3628@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (swift_getEnumCaseMultiPayload() != 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 32))(a3, v3);
  }
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)(a1 + 24) - 8) + 32))(a2, v3, *(void *)(a1 + 24));
  return swift_willThrowTypedImpl();
}

BOOL static DispatchOutcome.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t CodableDispatcher.init()(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 80);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188788](a1);
  uint64_t v6 = (char *)&v11 - v5;
  *(unsigned char *)(v2 + *(void *)(v7 + 112)) = 0;
  uint64_t v8 = *(void *)(*(void *)v2 + 120);
  uint64_t v9 = *(void *)(v7 + 96);
  type metadata accessor for CodableDispatcher.OperationInfo();
  swift_getTupleTypeMetadata2();
  sub_1D76F8204();
  *(void *)(v2 + v8) = sub_1D76F7EE4();
  (*(void (**)(uint64_t, uint64_t))(v9 + 16))(v3, v9);
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v2 + *(void *)(*(void *)v2 + 104), v6, v3);
  return v2;
}

uint64_t CodableDispatcher.deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 104));
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1D76D395C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 104);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 16))(a1, v4);
}

uint64_t sub_1D76D3A00(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 104);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 40))(v4, a1);
  return swift_endAccess();
}

uint64_t (*sub_1D76D3AAC())()
{
  return j__swift_endAccess;
}

uint64_t sub_1D76D3B14()
{
  return *(unsigned __int8 *)(v0 + *(void *)(*(void *)v0 + 112));
}

uint64_t sub_1D76D3B30(uint64_t result)
{
  *(unsigned char *)(v1 + *(void *)(*(void *)v1 + 112)) = result;
  return result;
}

uint64_t sub_1D76D3B4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1D76D3D9C(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, ValueMetadata *, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))sub_1D76D3B80);
}

void sub_1D76D3B80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12 = *(void **)v11;
  if (*(unsigned char *)(v11 + *(void *)(*(void *)v11 + 112)))
  {
    __break(1u);
  }
  else
  {
    sub_1D76F8DF4();
    uint64_t v18 = swift_allocObject();
    swift_weakInit();
    uint64_t v19 = (void *)swift_allocObject();
    v19[2] = v12[10];
    v19[3] = v12[11];
    void v19[4] = a4;
    v19[5] = a5;
    unsigned char v19[6] = a6;
    v19[7] = v12[12];
    v19[8] = a7;
    v19[9] = a8;
    v19[10] = a9;
    v19[11] = a10;
    v19[12] = a11;
    v19[13] = v18;
    v19[14] = a2;
    v19[15] = a3;
    swift_beginAccess();
    type metadata accessor for CodableDispatcher.OperationInfo();
    sub_1D76F7F04();
    swift_retain();
    sub_1D76F7F24();
    swift_endAccess();
  }
}

uint64_t sub_1D76D3D68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1D76D3D9C(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, ValueMetadata *, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))sub_1D76D3E38);
}

uint64_t sub_1D76D3D9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, ValueMetadata *, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))
{
  unint64_t v17 = sub_1D76CCD10();
  return a9(v17, a1, a2, a3, a4, &type metadata for DispatcherErrorWrapper, a5, a6, a7, a8, v17);
}

void sub_1D76D3E38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12 = *(void **)v11;
  if (*(unsigned char *)(v11 + *(void *)(*(void *)v11 + 112)))
  {
    __break(1u);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EBA33F40);
    sub_1D76CCD10();
    uint64_t v30 = type metadata accessor for CompositeDynamicCodableContainer();
    unint64_t v17 = (void *)swift_allocObject();
    uint64_t v18 = a6;
    uint64_t v27 = a6;
    uint64_t v19 = v12[10];
    v17[2] = v19;
    uint64_t v20 = v12[11];
    v17[3] = v20;
    void v17[4] = a4;
    v17[5] = a5;
    v17[6] = v18;
    uint64_t v21 = v12[12];
    v17[7] = v21;
    v17[8] = a7;
    v17[9] = a8;
    v17[10] = a9;
    v17[11] = a10;
    v17[12] = a11;
    v17[13] = a2;
    v17[14] = a3;
    uint64_t v22 = (void *)swift_allocObject();
    void v22[2] = v19;
    _OWORD v22[3] = v20;
    void v22[4] = a4;
    v22[5] = a5;
    v22[6] = v27;
    v22[7] = v21;
    v22[8] = a7;
    v22[9] = a8;
    v22[10] = a9;
    v22[11] = a10;
    v22[12] = a11;
    v22[13] = sub_1D76DA01C;
    v22[14] = v17;
    swift_retain();
    uint64_t WitnessTable = swift_getWitnessTable();
    sub_1D76D3B80(WitnessTable, (uint64_t)sub_1D76DA05C, (uint64_t)v22, a4, a5, v30, a7, a8, a9, a10, WitnessTable);
    swift_release();
  }
}

uint64_t sub_1D76D404C()
{
  swift_beginAccess();
  type metadata accessor for CodableDispatcher.OperationInfo();
  swift_bridgeObjectRetain();
  sub_1D76F8DF4();
  sub_1D76F7EF4();
  swift_getWitnessTable();
  char v0 = sub_1D76F8154();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0 & 1;
}

uint64_t sub_1D76D4188@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void, void, void)@<X2>, uint64_t (*a4)(char *, uint64_t, uint64_t)@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, char *a7@<X8>)
{
  id v103 = a4;
  uint64_t v115 = a2;
  v116 = a7;
  uint64_t v12 = *v7;
  *(void *)&long long v119 = &type metadata for UnknownResultType;
  *((void *)&v119 + 1) = a5;
  unint64_t v120 = sub_1D76DCE0C();
  unint64_t v121 = sub_1D76C8C00();
  long long v122 = *(_OWORD *)(a6 + 8);
  uint64_t v102 = type metadata accessor for DispatcherResponse();
  uint64_t v101 = *(void *)(v102 - 8);
  MEMORY[0x1F4188788](v102);
  id v100 = (char *)v91 - v13;
  uint64_t v14 = *(void *)(v12 + 96);
  uint64_t v15 = *(void *)(v12 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v109 = sub_1D76F83A4();
  uint64_t v107 = *(void *)(v109 - 8);
  uint64_t v17 = MEMORY[0x1F4188788](v109);
  int64_t v104 = (char *)v91 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188788](v17);
  uint64_t v108 = (char *)v91 - v20;
  uint64_t v21 = MEMORY[0x1F4188788](v19);
  v110 = (char *)v91 - v22;
  uint64_t v112 = AssociatedTypeWitness;
  uint64_t v111 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v23 = MEMORY[0x1F4188788](v21);
  id v106 = (char *)v91 - v24;
  uint64_t v113 = *(void *)(a5 - 8);
  uint64_t v25 = MEMORY[0x1F4188788](v23);
  uint64_t v117 = (char *)v91 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x1F4188788](v25);
  uint64_t v99 = (uint64_t)v91 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = MEMORY[0x1F4188788](v27);
  uint64_t v105 = (char *)v91 - v30;
  uint64_t v31 = MEMORY[0x1F4188788](v29);
  uint64_t v33 = (char *)v91 - v32;
  MEMORY[0x1F4188788](v31);
  uint64_t v35 = (char *)v91 - v34;
  uint64_t v118 = v7;
  uint64_t v37 = v36;
  sub_1D76D395C((uint64_t)v91 - v34);
  char v38 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 80))(a1, v15, v14);
  uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
  uint64_t v39 = v37 + 8;
  v114 = v40;
  v40((uint64_t)v35, v15);
  if ((v38 & 1) == 0)
  {
    *(void *)&long long v119 = a1;
    id v42 = a1;
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F40);
    if ((swift_dynamicCast() & 1) == 0 || v124 != 1)
    {
      uint64_t v92 = v33;
      unint64_t v96 = v35;
      v91[1] = v43;
      uint64_t v97 = v39;
      *(void *)&long long v119 = a1;
      uint64_t v44 = a5;
      uint64_t v45 = *(void (**)(long long *, uint64_t, uint64_t))(a6 + 56);
      id v93 = a1;
      id v46 = a1;
      uint64_t v98 = v44;
      v45(&v119, v44, a6);
      unint64_t v47 = a3;
      uint64_t v48 = v107;
      char v49 = *(void (**)(char *, uint64_t (*)(void, void, void), uint64_t))(v107 + 16);
      BOOL v50 = v108;
      uint64_t v51 = v109;
      v49(v108, (uint64_t (*)(void, void, void))v103, v109);
      id v52 = v104;
      v49(v104, v47, v51);
      uint64_t v53 = v111;
      id v54 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v111 + 48);
      uint64_t v55 = v112;
      int v56 = v54(v50, 1, v112);
      uint64_t v95 = v15;
      uint64_t v94 = v14;
      if (v56 == 1)
      {
        id v103 = v54;
        uint64_t v57 = (uint64_t)v92;
        sub_1D76D395C((uint64_t)v92);
        (*(void (**)(char *, uint64_t, uint64_t))(v14 + 32))(v52, v15, v14);
        v114(v57, v15);
        uint64_t v64 = *(void (**)(char *, uint64_t))(v107 + 8);
        uint64_t v65 = v109;
        v64(v52, v109);
        id v66 = v108;
        uint64_t v67 = v110;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v53 + 56))(v110, 0, 1, v55);
        v64(v66, v65);
        int v68 = v103(v67, 1, v55);
        double v62 = v106;
        uint64_t v69 = v65;
        uint64_t v63 = (uint64_t)v105;
        uint64_t v70 = (uint64_t)v96;
        if (v68 == 1)
        {
          v64(v67, v69);
          sub_1D76F82B4();
          sub_1D76DCE60();
          id v71 = (void *)sub_1D76F8394();
          sub_1D76F7D84();

          sub_1D76DCEA0(v115, (uint64_t)&v119);
          unint64_t v58 = v116;
          if (v121)
          {
            sub_1D76DCF08(&v119, &v124);
            sub_1D76D395C(v70);
            *(void *)&long long v119 = v93;
            char v123 = 1;
            uint64_t v72 = v94;
            unint64_t v73 = *(void (**)(long long *, long long *, uint64_t, uint64_t))(v94 + 72);
            id v74 = v93;
            uint64_t v75 = v95;
            v73(&v124, &v119, v95, v72);
            sub_1D769AC0C((uint64_t)&v119, (uint64_t *)&unk_1EBA33F50);
            v114(v70, v75);
            __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v124);
            uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v113 + 8))(v117, v98);
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v113 + 8))(v117, v98);
            uint64_t result = sub_1D769AC0C((uint64_t)&v119, &qword_1EA83AC30);
          }
LABEL_19:
          char v59 = 1;
          goto LABEL_20;
        }
        uint64_t v61 = v98;
        CFNumberRef v60 = *(void (**)(char *, char *, uint64_t))(v53 + 32);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v48 + 8))(v52, v51);
        CFNumberRef v60 = *(void (**)(char *, char *, uint64_t))(v53 + 32);
        uint64_t v67 = v110;
        v60(v110, v50, v55);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v53 + 56))(v67, 0, 1, v55);
        uint64_t v61 = v98;
        double v62 = v106;
        uint64_t v63 = (uint64_t)v105;
      }
      v60(v62, v67, v55);
      sub_1D76D395C(v63);
      uint64_t v76 = v62;
      long long v77 = v100;
      (*(void (**)(char *, char *, uint64_t))(v113 + 16))(v100, v117, v61);
      uint64_t v78 = v102;
      swift_storeEnumTagMultiPayload();
      uint64_t v79 = v94;
      v110 = *(char **)(v94 + 48);
      uint64_t WitnessTable = swift_getWitnessTable();
      uint64_t v81 = swift_getWitnessTable();
      uint64_t v82 = v62;
      uint64_t v83 = v63;
      uint64_t v84 = v95;
      ((void (*)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v110)(v77, v82, v78, WitnessTable, v81, v95, v79);
      uint64_t v85 = v115;
      (*(void (**)(char *, uint64_t))(v101 + 8))(v77, v78);
      char v86 = v114;
      v114(v83, v84);
      uint64_t v87 = v99;
      sub_1D76D395C(v99);
      (*(void (**)(char *, uint64_t, uint64_t))(v79 + 96))(v76, v84, v79);
      v86(v87, v84);
      (*(void (**)(char *, uint64_t))(v111 + 8))(v76, v112);
      sub_1D76DCEA0(v85, (uint64_t)&v119);
      if (v121)
      {
        sub_1D76DCF08(&v119, &v124);
        uint64_t v88 = (uint64_t)v96;
        sub_1D76D395C((uint64_t)v96);
        *(void *)&long long v119 = v93;
        char v123 = 1;
        uint64_t v89 = *(void (**)(long long *, long long *, uint64_t, uint64_t))(v79 + 72);
        id v90 = v93;
        v89(&v124, &v119, v84, v79);
        sub_1D769AC0C((uint64_t)&v119, (uint64_t *)&unk_1EBA33F50);
        v86(v88, v84);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v124);
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v113 + 8))(v117, v98);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v113 + 8))(v117, v98);
        uint64_t result = sub_1D769AC0C((uint64_t)&v119, &qword_1EA83AC30);
      }
      unint64_t v58 = v116;
      goto LABEL_19;
    }
  }
  sub_1D76DCEA0(v115, (uint64_t)&v124);
  if (v125)
  {
    sub_1D76DCF08(&v124, &v119);
    sub_1D76D395C((uint64_t)v35);
    (*(void (**)(long long *, uint64_t, uint64_t))(v14 + 88))(&v119, v15, v14);
    v114((uint64_t)v35, v15);
    uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v119);
  }
  else
  {
    uint64_t result = sub_1D769AC0C((uint64_t)&v124, &qword_1EA83AC30);
  }
  unint64_t v58 = v116;
  char v59 = 0;
LABEL_20:
  *unint64_t v58 = v59;
  return result;
}

void sub_1D76D4F10(uint64_t a1, uint64_t a2, void (*a3)(_OWORD *), uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v53 = a4;
  uint64_t v55 = a3;
  uint64_t v7 = (void *)*v4;
  uint64_t v48 = a2;
  char v49 = v7;
  uint64_t v8 = v7[12];
  uint64_t v9 = v7[10];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = sub_1D76F83A4();
  uint64_t v51 = *(void *)(v10 - 8);
  uint64_t v52 = v10;
  uint64_t v11 = MEMORY[0x1F4188788](v10);
  uint64_t v13 = (uint64_t (*)(char *, uint64_t, uint64_t))((char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = MEMORY[0x1F4188788](v11);
  uint64_t v16 = (uint64_t (*)(char *, uint64_t, uint64_t))((char *)&v46 - v15);
  uint64_t v17 = *(void *)(v9 - 8);
  uint64_t v18 = MEMORY[0x1F4188788](v14);
  uint64_t v20 = (char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188788](v18);
  uint64_t v22 = (char *)&v46 - v21;
  *((unsigned char *)v5 + v7[14]) = 1;
  sub_1D76D395C((uint64_t)&v46 - v21);
  uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 24);
  uint64_t v54 = a1;
  LOBYTE(v7) = v23(a1, v9, v8);
  uint64_t v24 = *(void (**)(char *, uint64_t))(v17 + 8);
  v24(v22, v9);
  if (v7)
  {
    id v46 = v16;
    unint64_t v47 = v13;
    sub_1D76D395C((uint64_t)v20);
    uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 40))(v54, v9, v8);
    uint64_t v31 = v30;
    v24(v20, v9);
    uint64_t v32 = (void *)((char *)v5 + *(void *)(*v5 + 120));
    swift_beginAccess();
    uint64_t v33 = *v32;
    v56[0] = v29;
    v56[1] = v31;
    uint64_t v34 = type metadata accessor for CodableDispatcher.OperationInfo();
    swift_bridgeObjectRetain();
    MEMORY[0x1D9475330](v57, v56, v33, MEMORY[0x1E4FBB1A0], v34, MEMORY[0x1E4FBB1B0]);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v35 = *(void (**)(uint64_t, uint64_t, char *(*)(char *), uint64_t))&v57[0];
    uint64_t v37 = v51;
    uint64_t v36 = v52;
    char v38 = v47;
    uint64_t v39 = v46;
    uint64_t v40 = AssociatedTypeWitness;
    if (*(void *)&v57[0])
    {
      uint64_t v41 = swift_allocObject();
      uint64_t v42 = (uint64_t)v55;
      uint64_t v43 = v53;
      *(void *)(v41 + 16) = v55;
      *(void *)(v41 + 24) = v43;
      sub_1D76D04A8((uint64_t)v35);
      sub_1D76D04A8(v42);
      v35(v54, v48, sub_1D76DA530, v41);
      swift_release();
      sub_1D76CCEE8((uint64_t)v35);
      sub_1D76CCEE8((uint64_t)v35);
    }
    else
    {
      sub_1D76DA49C();
      uint64_t v44 = (void *)swift_allocError();
      *uint64_t v45 = 0;
      swift_willThrow();
      memset(v57, 0, 48);
      uint64_t v25 = *(void *)(v40 - 8);
      (*(void (**)(uint64_t (*)(char *, uint64_t, uint64_t), uint64_t, uint64_t))(v25 + 16))(v39, v54, v40);
      uint64_t v26 = *(void (**)(uint64_t (*)(void, void, void), void, uint64_t, uint64_t))(v25 + 56);
      v26((uint64_t (*)(void, void, void))v39, 0, 1, v40);
      v26((uint64_t (*)(void, void, void))v38, 1, 1, v40);
      unint64_t v27 = sub_1D76CCD10();
      sub_1D76D4188(v44, (uint64_t)v57, (uint64_t (*)(void, void, void))v39, v38, (uint64_t)&type metadata for DispatcherErrorWrapper, v27, (char *)v56);
      uint64_t v28 = *(void (**)(uint64_t (*)(char *, uint64_t, uint64_t), uint64_t))(v37 + 8);
      v28(v38, v36);
      v28(v39, v36);
      sub_1D769AC0C((uint64_t)v57, &qword_1EA83AC30);
      if (v55)
      {
        LOBYTE(v57[0]) = v56[0];
        v55(v57);
      }
    }
  }
  else if (v55)
  {
    LOBYTE(v57[0]) = 0;
    v55(v57);
  }
}

uint64_t sub_1D76D54C4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *, uint64_t, uint64_t (*)(uint64_t a1), char *), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v125 = a7;
  uint64_t v124 = a6;
  uint64_t v101 = a5;
  uint64_t v102 = a4;
  uint64_t v99 = a3;
  uint64_t v100 = a2;
  uint64_t v139 = a1;
  uint64_t v123 = a15;
  uint64_t v97 = (void *)*v15;
  uint64_t v135 = v97[12];
  uint64_t v17 = v97[10];
  uint64_t v122 = a10;
  uint64_t v18 = v17;
  uint64_t v140 = v17;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v95 = *(void *)(v20 + 64);
  MEMORY[0x1F4188788](AssociatedTypeWitness);
  unint64_t v96 = (char *)&v93 - v21;
  uint64_t v22 = sub_1D76F83A4();
  uint64_t v127 = *(void *)(v22 - 8);
  uint64_t v23 = MEMORY[0x1F4188788](v22);
  v116 = (char *)&v93 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x1F4188788](v23);
  uint64_t v107 = (char *)&v93 - v26;
  MEMORY[0x1F4188788](v25);
  uint64_t v105 = (char *)&v93 - v27;
  uint64_t v130 = a11;
  uint64_t v131 = a12;
  uint64_t v109 = type metadata accessor for MessageWrapper();
  uint64_t v104 = *(void *)(v109 - 8);
  uint64_t v28 = MEMORY[0x1F4188788](v109);
  v110 = (char *)&v93 - v29;
  uint64_t v138 = *(void *)(v18 - 8);
  uint64_t v30 = MEMORY[0x1F4188788](v28);
  uint64_t v106 = (uint64_t)&v93 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = MEMORY[0x1F4188788](v30);
  uint64_t v108 = (uint64_t)&v93 - v33;
  MEMORY[0x1F4188788](v32);
  uint64_t v35 = (char *)&v93 - v34;
  uint64_t v36 = sub_1D76F83A4();
  uint64_t v136 = *(void *)(v36 - 8);
  uint64_t v37 = MEMORY[0x1F4188788](v36);
  uint64_t v115 = (char *)&v93 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = MEMORY[0x1F4188788](v37);
  v114 = (char *)&v93 - v40;
  uint64_t v41 = MEMORY[0x1F4188788](v39);
  uint64_t v43 = (char *)&v93 - v42;
  MEMORY[0x1F4188788](v41);
  uint64_t v45 = (char *)&v93 - v44;
  uint64_t v128 = v22;
  uint64_t v120 = swift_allocBox();
  uint64_t v129 = *(void *)(a8 - 8);
  uint64_t v47 = v129 + 56;
  id v46 = *(void (**)(void))(v129 + 56);
  uint64_t v126 = v48;
  uint64_t v133 = a8;
  id v103 = v46;
  v46();
  uint64_t v137 = v36;
  uint64_t v119 = swift_allocBox();
  uint64_t v50 = v49;
  uint64_t v51 = v20;
  uint64_t v52 = v20 + 56;
  uint64_t v53 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
  v53(v49, 1, 1, AssociatedTypeWitness);
  v134 = v15;
  sub_1D76D395C((uint64_t)v35);
  uint64_t v98 = v51;
  uint64_t v54 = *(void (**)(char *, uint64_t, uint64_t))(v51 + 16);
  uint64_t v118 = v51 + 16;
  uint64_t v117 = v54;
  v54(v43, v139, AssociatedTypeWitness);
  uint64_t v55 = AssociatedTypeWitness;
  uint64_t v132 = v52;
  v53((uint64_t)v43, 0, 1, AssociatedTypeWitness);
  int v56 = v45;
  (*(void (**)(char *, uint64_t))(v135 + 32))(v43, v140);
  uint64_t v121 = v55;
  uint64_t v113 = v50;
  uint64_t v112 = v53;
  uint64_t v93 = v47;
  uint64_t v57 = v136;
  uint64_t v58 = v137;
  uint64_t v111 = *(void (**)(char *, uint64_t))(v136 + 8);
  v111(v43, v137);
  char v59 = *(void (**)(uint64_t, uint64_t))(v138 + 8);
  uint64_t v60 = v140;
  v138 += 8;
  uint64_t v94 = v59;
  v59((uint64_t)v35, v140);
  v53((uint64_t)v56, 0, 1, v55);
  (*(void (**)(uint64_t, char *, uint64_t))(v57 + 40))(v50, v56, v58);
  uint64_t v61 = v108;
  sub_1D76D395C(v108);
  uint64_t v62 = v135;
  uint64_t v63 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v135 + 56);
  uint64_t v64 = v109;
  uint64_t WitnessTable = swift_getWitnessTable();
  v63(v139, v64, WitnessTable, v60, v62);
  uint64_t v66 = v140;
  v94(v61, v140);
  uint64_t v67 = v110;
  uint64_t v68 = v129;
  uint64_t v69 = v105;
  uint64_t v70 = v133;
  (*(void (**)(char *, char *, uint64_t))(v129 + 16))(v105, &v110[*(int *)(v64 + 44)], v133);
  (*(void (**)(char *, uint64_t))(v104 + 8))(v67, v64);
  ((void (*)(char *, void, uint64_t, uint64_t))v103)(v69, 0, 1, v70);
  uint64_t v71 = v127;
  uint64_t v72 = v126;
  uint64_t v73 = v128;
  (*(void (**)(uint64_t, char *, uint64_t))(v127 + 40))(v126, v69, v128);
  uint64_t v74 = v106;
  sub_1D76D395C(v106);
  *((void *)&v144 + 1) = v73;
  uint64_t v142 = v130;
  uint64_t v145 = swift_getWitnessTable();
  uint64_t v141 = v131;
  uint64_t v146 = swift_getWitnessTable();
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)&v143);
  uint64_t v76 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v71 + 16);
  v76(boxed_opaque_existential_0Tm, v72, v73);
  (*(void (**)(long long *, uint64_t))(v135 + 64))(&v143, v66);
  v94(v74, v66);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v143);
  long long v77 = v107;
  v76((uint64_t *)v107, v72, v73);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v68 + 48))(v77, 1, v70);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v79 = swift_allocObject();
    swift_weakInit();
    id v80 = v96;
    uint64_t v81 = v121;
    v117(v96, v139, v121);
    uint64_t v82 = v98;
    unint64_t v83 = (*(unsigned __int8 *)(v98 + 80) + 144) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80);
    unint64_t v84 = (v95 + v83 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v85 = (char *)swift_allocObject();
    *((void *)v85 + 2) = v140;
    uint64_t v86 = v133;
    *((void *)v85 + 3) = v97[11];
    *((void *)v85 + 4) = v86;
    uint64_t v87 = v122;
    *((void *)v85 + 5) = a9;
    *((void *)v85 + 6) = v87;
    uint64_t v88 = v130;
    *((void *)v85 + 7) = v135;
    *((void *)v85 + 8) = v88;
    *((void *)v85 + 9) = v131;
    *((void *)v85 + 10) = a13;
    uint64_t v89 = v123;
    *((void *)v85 + 11) = a14;
    *((void *)v85 + 12) = v89;
    uint64_t v90 = v119;
    *((void *)v85 + 13) = v79;
    *((void *)v85 + 14) = v90;
    uint64_t v91 = v124;
    *((void *)v85 + 15) = v120;
    *((void *)v85 + 16) = v91;
    *((void *)v85 + 17) = v125;
    (*(void (**)(char *, char *, uint64_t))(v82 + 32))(&v85[v83], v80, v81);
    *(void *)&v85[v84] = v99;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v92 = v107;
    v102(v107, v100, sub_1D76DCC98, v85);
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v129 + 8))(v92, v133);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1D76D625C(uint64_t a1, uint64_t a2, void (*a3)(_OWORD *), uint64_t a4, uint64_t a5)
{
  uint64_t v56 = a4;
  uint64_t v66 = a3;
  uint64_t v51 = a2;
  uint64_t v70 = a1;
  uint64_t v6 = *v5;
  uint64_t v68 = *(void *)(a5 - 8);
  MEMORY[0x1F4188788](a1);
  uint64_t v57 = (char *)v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = v8;
  uint64_t v67 = v9;
  uint64_t v69 = v10;
  uint64_t v55 = type metadata accessor for MessageWrapper();
  uint64_t v54 = *(void *)(v55 - 8);
  MEMORY[0x1F4188788](v55);
  uint64_t v53 = (void *)((char *)v50 - v11);
  uint64_t v12 = *(void *)(v6 + 96);
  uint64_t v13 = *(void *)(v6 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = sub_1D76F83A4();
  uint64_t v77 = *(void *)(v15 - 8);
  uint64_t v16 = MEMORY[0x1F4188788](v15);
  uint64_t v63 = (char *)v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188788](v16);
  uint64_t v75 = (char *)v50 - v19;
  uint64_t v20 = MEMORY[0x1F4188788](v18);
  uint64_t v76 = (char *)v50 - v21;
  uint64_t v22 = MEMORY[0x1F4188788](v20);
  uint64_t v24 = (char *)v50 - v23;
  uint64_t v25 = *(void *)(v13 - 8);
  uint64_t v26 = MEMORY[0x1F4188788](v22);
  uint64_t v74 = (char *)v50 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x1F4188788](v26);
  char v59 = (char *)v50 - v29;
  uint64_t v30 = MEMORY[0x1F4188788](v28);
  uint64_t v32 = (char *)v50 - v31;
  uint64_t v33 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188788](v30);
  uint64_t v35 = (char *)v50 - v34;
  uint64_t v79 = v5;
  sub_1D76D395C((uint64_t)v32);
  uint64_t v52 = v33;
  uint64_t v36 = *(void (**)(void, void, void, void))(v33 + 56);
  uint64_t v78 = AssociatedTypeWitness;
  uint64_t v73 = v36;
  uint64_t v60 = v33 + 56;
  v36(v24, 1, 1, AssociatedTypeWitness);
  uint64_t v37 = *(void (**)(void, void, void))(v12 + 32);
  uint64_t v58 = v35;
  uint64_t v65 = v12;
  uint64_t v38 = v12;
  uint64_t v39 = v37;
  v37(v24, v13, v38);
  uint64_t v64 = v15;
  uint64_t v62 = v25;
  v50[1] = v39;
  uint64_t v61 = *(void (**)(char *, uint64_t))(v77 + 8);
  v61(v24, v15);
  uint64_t v72 = *(void (**)(char *, uint64_t))(v25 + 8);
  v72(v32, v13);
  sub_1D76D395C((uint64_t)v59);
  uint64_t v40 = (uint64_t)v57;
  uint64_t v41 = v71;
  (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v57, v70, v71);
  uint64_t v42 = v53;
  MessageWrapper.init(value:)(v40, v41, v53);
  uint64_t v43 = v65;
  uint64_t v57 = *(char **)(v65 + 48);
  uint64_t v44 = v55;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v46 = swift_getWitnessTable();
  ((void (*)(uint64_t *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v57)(v42, v58, v44, WitnessTable, v46, v13, v43);
  uint64_t v47 = (uint64_t (**)(uint64_t, uint64_t))(v52 + 8);
  (*(void (**)(uint64_t *, uint64_t))(v54 + 8))(v42, v44);
  v72(v59, v13);
  uint64_t v48 = (uint64_t)v58;
  sub_1D76D4F10((uint64_t)v58, v51, v66, v56);
  return (*v47)(v48, v78);
}

uint64_t sub_1D76D6B58()
{
  return 0;
}

uint64_t sub_1D76D6B64@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

void sub_1D76D6B94(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1D76D6BA0(uint64_t a1)
{
  unint64_t v2 = sub_1D76DA574();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1D76D6BDC(uint64_t a1)
{
  unint64_t v2 = sub_1D76DA574();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t UnknownResultType.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AA08);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188788](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D76DA574();
  sub_1D76F8DA4();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t UnknownResultType.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1Tm(a1);
}

uint64_t sub_1D76D6D50(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1Tm(a1);
}

uint64_t sub_1D76D6D78(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AA08);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188788](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D76DA574();
  sub_1D76F8DA4();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t MessageHeader.mangledTypeName.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MessageHeader.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F08);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188788](v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D76DA5C8();
  sub_1D76F8D94();
  if (!v2)
  {
    char v14 = 0;
    uint64_t v9 = sub_1D76F8664();
    uint64_t v11 = v10;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9;
    a2[1] = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
}

uint64_t sub_1D76D7030@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return MessageHeader.init(from:)(a1, a2);
}

uint64_t MessageWrapper.mangledTypeName.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MessageWrapper.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 44));
}

uint64_t MessageWrapper.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34C70);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188788](v3);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D76DA5C8();
  sub_1D76F8DA4();
  char v10 = 0;
  sub_1D76F8714();
  if (!v1)
  {
    char v9 = 1;
    sub_1D76F8754();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t MessageWrapper.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v24 = a4;
  uint64_t v23 = *(void *)(a2 - 8);
  MEMORY[0x1F4188788](a1);
  uint64_t v26 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F08);
  uint64_t v25 = *(void *)(v28 - 8);
  MEMORY[0x1F4188788](v28);
  char v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = a3;
  uint64_t v11 = type metadata accessor for MessageWrapper();
  uint64_t v22 = *(void *)(v11 - 8);
  MEMORY[0x1F4188788](v11);
  uint64_t v13 = (void *)((char *)v20 - v12);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D76DA5C8();
  sub_1D76F8D94();
  if (v4) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  uint64_t v21 = v11;
  char v14 = v26;
  uint64_t v15 = v25;
  char v30 = 0;
  *uint64_t v13 = sub_1D76F8664();
  v13[1] = v16;
  v20[1] = v16;
  char v29 = 1;
  sub_1D76F86A4();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v10, v28);
  uint64_t v17 = v21;
  (*(void (**)(char *, char *, uint64_t))(v23 + 32))((char *)v13 + *(int *)(v21 + 44), v14, a2);
  uint64_t v18 = v22;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(v22 + 16))(v24, v13, v17);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v18 + 8))(v13, v17);
}

uint64_t sub_1D76D7574()
{
  uint64_t v0 = sub_1D76F8634();
  swift_bridgeObjectRelease();
  if (v0 == 1) {
    unsigned int v1 = 1;
  }
  else {
    unsigned int v1 = 2;
  }
  if (v0) {
    return v1;
  }
  else {
    return 0;
  }
}

uint64_t sub_1D76D75C8(char a1)
{
  if (a1) {
    return 0x726F727265;
  }
  else {
    return 0x65736E6F70736572;
  }
}

uint64_t sub_1D76D75FC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return MessageWrapper.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t sub_1D76D7620(void *a1)
{
  return MessageWrapper.encode(to:)(a1);
}

uint64_t sub_1D76D7638(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1C8];

  return MEMORY[0x1F4185BB0](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_1D76D76AC(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4183DE0](a1, a2, WitnessTable, v5);
}

uint64_t sub_1D76D7718(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4183DF0](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_1D76D7788(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4183DE8](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_1D76D77F8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1D76D7574();
  *a1 = result;
  return result;
}

uint64_t sub_1D76D7828@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1D76D75C8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1D76D7854()
{
  return sub_1D76D75C8(*v0);
}

uint64_t sub_1D76D785C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1D76D7574();
  *a1 = result;
  return result;
}

uint64_t sub_1D76D7884@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1D76DCA7C();
  *a1 = result;
  return result;
}

uint64_t sub_1D76D78BC(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t sub_1D76D7910(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t DispatcherResponse.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char *a8@<X8>)
{
  uint64_t v48 = a8;
  uint64_t v46 = sub_1D76F83A4();
  uint64_t v52 = *(void *)(v46 - 8);
  uint64_t v15 = MEMORY[0x1F4188788](v46);
  uint64_t v57 = (char *)&v42 - v16;
  uint64_t v51 = *(void *)(a3 - 8);
  MEMORY[0x1F4188788](v15);
  uint64_t v45 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = a2;
  uint64_t v60 = a3;
  uint64_t v61 = a4;
  uint64_t v62 = a5;
  uint64_t v63 = a6;
  uint64_t v64 = a7;
  type metadata accessor for DispatcherResponse.CodingKeys();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v18 = sub_1D76F86E4();
  uint64_t v49 = *(void *)(v18 - 8);
  uint64_t v50 = v18;
  MEMORY[0x1F4188788](v18);
  uint64_t v20 = (char *)&v42 - v19;
  uint64_t v53 = a2;
  uint64_t v54 = a4;
  uint64_t v59 = a2;
  uint64_t v60 = a3;
  uint64_t v55 = a6;
  uint64_t v56 = a3;
  uint64_t v61 = a4;
  uint64_t v62 = a5;
  uint64_t v63 = a6;
  uint64_t v64 = a7;
  uint64_t v21 = type metadata accessor for DispatcherResponse();
  uint64_t v47 = *(void *)(v21 - 8);
  uint64_t v22 = MEMORY[0x1F4188788](v21);
  uint64_t v24 = (char *)&v42 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188788](v22);
  uint64_t v26 = (char *)&v42 - v25;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v27 = v65;
  sub_1D76F8D94();
  if (v27)
  {
    uint64_t v32 = (uint64_t)a1;
  }
  else
  {
    uint64_t v43 = v24;
    uint64_t v44 = v26;
    uint64_t v28 = v51;
    uint64_t v29 = v52;
    uint64_t WitnessTable = v21;
    uint64_t v65 = a1;
    LOBYTE(v59) = 1;
    uint64_t v31 = v49;
    uint64_t v30 = v50;
    sub_1D76F8644();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v57, 1, v56) == 1)
    {
      (*(void (**)(char *, uint64_t))(v29 + 8))(v57, v46);
      LOBYTE(v59) = 0;
      uint64_t v34 = v43;
      sub_1D76F86A4();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v20, v30);
      uint64_t v35 = WitnessTable;
      swift_storeEnumTagMultiPayload();
      uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v47 + 32);
      uint64_t v37 = v44;
      v36(v44, v34, v35);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v31 + 8))(v20, v30);
      uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v28 + 32);
      uint64_t v39 = v45;
      uint64_t v40 = v56;
      v38(v45, v57, v56);
      uint64_t v37 = v44;
      v38(v44, v39, v40);
      uint64_t v35 = WitnessTable;
      swift_storeEnumTagMultiPayload();
      uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v47 + 32);
    }
    uint64_t v41 = (uint64_t)v65;
    v36(v48, v37, v35);
    uint64_t v32 = v41;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm(v32);
}

uint64_t DispatcherResponse.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v36 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v4 = MEMORY[0x1F4188788](a1);
  uint64_t v35 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = *(void *)(*(void *)(v6 + 24) - 8);
  uint64_t v7 = MEMORY[0x1F4188788](v4);
  uint64_t v32 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188788](v7);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v13 + 32);
  uint64_t v15 = *(void *)(v13 + 56);
  uint64_t v37 = v16;
  uint64_t v41 = v16;
  uint64_t v42 = v17;
  uint64_t v34 = v17;
  uint64_t v43 = v14;
  long long v30 = *(_OWORD *)(v13 + 40);
  long long v44 = v30;
  uint64_t v31 = v15;
  uint64_t v45 = v15;
  type metadata accessor for DispatcherResponse.CodingKeys();
  swift_getWitnessTable();
  uint64_t v18 = sub_1D76F8784();
  uint64_t v39 = *(void *)(v18 - 8);
  uint64_t v40 = v18;
  MEMORY[0x1F4188788](v18);
  uint64_t v20 = (char *)&v30 - v19;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D76F8DA4();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v38, a2);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v22 = v35;
    uint64_t v21 = v36;
    uint64_t v23 = v37;
    (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v35, v12, v37);
    LOBYTE(v41) = 0;
    uint64_t v24 = v40;
    sub_1D76F8754();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v22, v23);
    return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v20, v24);
  }
  else
  {
    uint64_t v27 = v32;
    uint64_t v26 = v33;
    uint64_t v28 = v34;
    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v32, v12, v34);
    LOBYTE(v41) = 1;
    uint64_t v29 = v40;
    sub_1D76F8754();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v28);
    return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v20, v29);
  }
}

uint64_t sub_1D76D8228@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X8>)
{
  return DispatcherResponse.init(from:)(a1, a2[2], a2[3], a2[4], a2[5], a2[6], a2[7], a3);
}

uint64_t sub_1D76D8250(void *a1, uint64_t a2)
{
  return DispatcherResponse.encode(to:)(a1, a2);
}

uint64_t CodableDispatchTraits.shouldPass(error:)()
{
  return 0;
}

uint64_t DispatchOutcome.hash(into:)()
{
  return sub_1D76F8D34();
}

uint64_t DispatchOutcome.hashValue.getter()
{
  return sub_1D76F8D54();
}

BOOL sub_1D76D82EC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Mercury::CodableDispatcherError_optional __swiftcall CodableDispatcherError.init(rawValue:)(Swift::Int rawValue)
{
  if (rawValue == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (!rawValue) {
    char v2 = 0;
  }
  char *v1 = v2;
  return (Mercury::CodableDispatcherError_optional)rawValue;
}

uint64_t CodableDispatcherError.rawValue.getter()
{
  return *v0;
}

void *sub_1D76D8328@<X0>(void *result@<X0>, char *a2@<X8>)
{
  if (*result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  *a2 = v3;
  return result;
}

void sub_1D76D8348(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_1D76D8354(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1D76DCDB8();
  unint64_t v5 = sub_1D76D2C6C();

  return MEMORY[0x1F4185E20](a1, a2, v4, v5);
}

uint64_t sub_1D76D83AC()
{
  return sub_1D76F81A4();
}

uint64_t sub_1D76D840C()
{
  return sub_1D76F8164();
}

unint64_t sub_1D76D845C()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AA38);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1D76FA300;
  unint64_t v1 = sub_1D76DC9D4();
  unint64_t result = sub_1D76DCA28();
  *(void *)(v0 + 32) = &type metadata for CodableDispatcherError;
  *(void *)(v0 + 40) = v1;
  *(void *)(v0 + 48) = result;
  qword_1EA83D970 = v0;
  return result;
}

uint64_t sub_1D76D84C4()
{
  sub_1D76DA49C();
  uint64_t result = swift_allocError();
  unsigned char *v1 = 0;
  qword_1EA83D978 = result;
  return result;
}

uint64_t sub_1D76D8500()
{
  if (qword_1EA83A4B8 != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

id sub_1D76D855C@<X0>(void *a1@<X8>)
{
  if (qword_1EA83A4C0 != -1) {
    swift_once();
  }
  char v2 = (void *)qword_1EA83D978;
  *a1 = qword_1EA83D978;

  return v2;
}

id sub_1D76D85C8@<X0>(void **a1@<X8>)
{
  char v2 = *v1;
  *a1 = *v1;
  return v2;
}

uint64_t sub_1D76D85D4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1D76DA084(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1D76D8600(void *a1)
{
  return sub_1D76D861C(a1, *v1);
}

uint64_t sub_1D76D861C(void *a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34C70);
  uint64_t v33 = *(void *)(v4 - 8);
  MEMORY[0x1F4188788](v4);
  uint64_t v6 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  unint64_t v7 = sub_1D76DA5C8();
  uint64_t v32 = v6;
  v29[1] = v7;
  sub_1D76F8DA4();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F40);
  uint64_t v37 = v8;
  v36[0] = a2;
  __swift_project_boxed_opaque_existential_1(v36, v8);
  swift_getDynamicType();
  id v9 = a2;
  id v10 = a2;
  uint64_t v11 = sub_1D76F8DF4();
  uint64_t v13 = v12;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v36);
  if (qword_1EA83A4B8 != -1) {
    swift_once();
  }
  uint64_t v14 = *(void *)(qword_1EA83D970 + 16);
  if (v14)
  {
    uint64_t v30 = v4;
    swift_bridgeObjectRetain();
    uint64_t v15 = 32;
    while (sub_1D76F8DF4() != v11 || v16 != v13)
    {
      char v18 = sub_1D76F89E4();
      swift_bridgeObjectRelease();
      if (v18) {
        goto LABEL_18;
      }
      v15 += 24;
      if (!--v14)
      {
        swift_bridgeObjectRelease();
        uint64_t v4 = v30;
        goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
LABEL_18:
    swift_bridgeObjectRelease();
    uint64_t v4 = v30;
    uint64_t v20 = v32;
  }
  else
  {
LABEL_12:
    if (qword_1EA83A4C0 != -1) {
      swift_once();
    }
    uint64_t v19 = (void *)qword_1EA83D978;
    uint64_t v20 = v32;
    if (!qword_1EA83D978)
    {
      sub_1D76DCA84();
      swift_allocError();
      *(void *)uint64_t v23 = v11;
      *(void *)(v23 + 8) = v13;
      *(unsigned char *)(v23 + 40) = 0;
      swift_willThrow();

      return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v20, v4);
    }
    id v21 = (id)qword_1EA83D978;
    swift_bridgeObjectRelease();
    uint64_t v37 = v8;
    v36[0] = v19;
    __swift_project_boxed_opaque_existential_1(v36, v8);
    swift_getDynamicType();
    id v22 = v19;
    sub_1D76F8DF4();

    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v36);
    a2 = v19;
  }
  uint64_t v38 = a2;
  id v24 = a2;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AA60);
  if (!swift_dynamicCast())
  {
    uint64_t v35 = 0;
    memset(v34, 0, sizeof(v34));
    swift_bridgeObjectRelease();
    sub_1D769AC0C((uint64_t)v34, &qword_1EA83AA68);
    sub_1D76DCA84();
    swift_allocError();
    *(void *)uint64_t v27 = a2;
    *(void *)(v27 + 24) = v8;
    *(void *)(v27 + 32) = v25;
    *(unsigned char *)(v27 + 40) = 1;
    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v20, v4);
  }
  sub_1D76BBC14(v34, (uint64_t)v36);
  LOBYTE(v34[0]) = 0;
  uint64_t v26 = v31;
  sub_1D76F8714();
  swift_bridgeObjectRelease();
  if (!v26)
  {
    __swift_project_boxed_opaque_existential_1(v36, v37);
    LOBYTE(v34[0]) = 1;
    sub_1D76F0F70();
  }

  (*(void (**)(char *, uint64_t))(v33 + 8))(v20, v4);
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v36);
}

uint64_t sub_1D76D8AA0(uint64_t a1)
{
  MEMORY[0x1F4188788](a1);
  uint64_t v2 = (char *)&v5 - v1;
  (*(void (**)(char *))(v3 + 16))((char *)&v5 - v1);
  return sub_1D76D3A00((uint64_t)v2);
}

uint64_t CodableDispatcher.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  CodableDispatcher.init()(v0);
  return v0;
}

uint64_t sub_1D76D8B98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(char *, uint64_t, uint64_t (*)(uint64_t a1), char *), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EBA33F40);
    sub_1D76CCD10();
    uint64_t v24 = type metadata accessor for CompositeDynamicCodableContainer();
    uint64_t WitnessTable = swift_getWitnessTable();
    sub_1D76D54C4(a1, a2, v24, a6, a7, a3, a4, a10, a11, v24, a14, a15, a16, a17, WitnessTable);
    return swift_release();
  }
  return result;
}

uint64_t sub_1D76D8CD8(uint64_t a1, uint64_t a2, void (*a3)(char *), uint64_t a4, void (*a5)(uint64_t, uint64_t), uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v22[1] = a4;
  uint64_t v23 = a3;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EBA33F40);
  uint64_t v13 = sub_1D76F8D64();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188788](v13);
  uint64_t v17 = (char *)v22 - v16;
  uint64_t v18 = *(void *)(a10 - 8);
  MEMORY[0x1F4188788](v15);
  uint64_t v20 = (char *)v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  a5(a1, a2);
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v17, v20, a10);
  swift_storeEnumTagMultiPayload();
  v23(v17);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, a10);
}

char *sub_1D76D8F0C(char *result, uint64_t (*a2)(char *))
{
  if (a2)
  {
    char v2 = *result;
    return (char *)a2(&v2);
  }
  return result;
}

uint64_t sub_1D76D8F50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *), uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, long long a17, uint64_t a18)
{
  uint64_t v95 = a7;
  uint64_t v103 = a6;
  uint64_t v100 = a5;
  uint64_t v106 = a4;
  uint64_t v102 = a1;
  uint64_t v93 = a11;
  uint64_t v99 = sub_1D76F83A4();
  uint64_t v98 = *(void *)(v99 - 8);
  MEMORY[0x1F4188788](v99);
  uint64_t v92 = (char *)&v70 - v18;
  uint64_t v87 = a14;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v101 = sub_1D76F83A4();
  uint64_t v104 = *(void *)(v101 - 8);
  uint64_t v20 = MEMORY[0x1F4188788](v101);
  uint64_t v94 = (char *)&v70 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1F4188788](v20);
  uint64_t v91 = (char *)&v70 - v23;
  uint64_t v24 = MEMORY[0x1F4188788](v22);
  unint64_t v83 = (char *)&v70 - v25;
  uint64_t v85 = a9;
  uint64_t v89 = *(void *)(a9 - 8);
  uint64_t v26 = MEMORY[0x1F4188788](v24);
  uint64_t v80 = (uint64_t)&v70 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x1F4188788](v26);
  uint64_t v82 = (uint64_t)&v70 - v29;
  MEMORY[0x1F4188788](v28);
  uint64_t v31 = (char *)&v70 - v30;
  v107[0] = a12;
  uint64_t v96 = a13;
  v107[1] = a13;
  long long v81 = a17;
  long long v108 = a17;
  uint64_t v97 = a18;
  long long v109 = *(_OWORD *)(a18 + 8);
  uint64_t v32 = type metadata accessor for DispatcherResponse();
  uint64_t v84 = *(void *)(v32 - 8);
  MEMORY[0x1F4188788](v32);
  uint64_t v88 = (char *)&v70 - v33;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EBA33F40);
  uint64_t v34 = sub_1D76F8D64();
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v36 = MEMORY[0x1F4188788](v34);
  uint64_t v38 = (char *)&v70 - v37;
  uint64_t v90 = *(void *)(a12 - 8);
  MEMORY[0x1F4188788](v36);
  uint64_t v40 = (char *)&v70 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v105 = swift_projectBox();
  uint64_t v41 = swift_projectBox();
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v43 = result;
    uint64_t v86 = v41;
    uint64_t v79 = a16;
    uint64_t v78 = a15;
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v38, v102, v34);
    sub_1D76D3628(v34, (uint64_t)v107, (uint64_t)v40);
    uint64_t v106 = v43;
    long long v44 = *(void (**)(uint64_t *, char *, uint64_t))(v90 + 16);
    uint64_t v45 = AssociatedTypeWitness;
    uint64_t v46 = v88;
    uint64_t v76 = v40;
    uint64_t v77 = a12;
    uint64_t v73 = v90 + 16;
    uint64_t v72 = v44;
    v44((uint64_t *)v88, v40, a12);
    swift_storeEnumTagMultiPayload();
    sub_1D76D395C((uint64_t)v31);
    uint64_t v47 = v105;
    swift_beginAccess();
    uint64_t v74 = *(void *)(v45 - 8);
    uint64_t v48 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v74 + 48);
    uint64_t v102 = v45;
    uint64_t v75 = v48;
    uint64_t result = v48((char *)v47, 1, v45);
    if (result == 1)
    {
      __break(1u);
    }
    else
    {
      uint64_t v49 = v87;
      uint64_t v50 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v87 + 48);
      uint64_t WitnessTable = swift_getWitnessTable();
      uint64_t v52 = swift_getWitnessTable();
      uint64_t v53 = WitnessTable;
      uint64_t v54 = v85;
      v50(v46, v47, v32, v53, v52, v85, v49);
      swift_endAccess();
      uint64_t v55 = *(void (**)(uint64_t, uint64_t))(v89 + 8);
      v89 += 8;
      uint64_t v71 = v55;
      v55((uint64_t)v31, v54);
      uint64_t v56 = v82;
      sub_1D76D395C(v82);
      uint64_t v57 = v105;
      swift_beginAccess();
      uint64_t v58 = v83;
      (*(void (**)(char *, uint64_t, uint64_t))(v104 + 16))(v83, v57, v101);
      uint64_t v59 = v102;
      uint64_t result = v75(v58, 1, v102);
      if (result != 1)
      {
        uint64_t v60 = v87;
        (*(void (**)(char *, uint64_t, uint64_t))(v87 + 96))(v58, v54, v87);
        uint64_t v61 = v56;
        uint64_t v62 = v99;
        uint64_t v63 = v71;
        v71(v61, v54);
        (*(void (**)(char *, uint64_t))(v74 + 8))(v58, v59);
        uint64_t v64 = v80;
        sub_1D76D395C(v80);
        uint64_t v65 = v86;
        swift_beginAccess();
        v113[3] = v62;
        uint64_t v112 = v78;
        v113[4] = swift_getWitnessTable();
        uint64_t v111 = v79;
        v113[5] = swift_getWitnessTable();
        boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(v113);
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(v98 + 16))(boxed_opaque_existential_0Tm, v65, v62);
        uint64_t v67 = v77;
        *((void *)&v108 + 1) = v77;
        long long v109 = v81;
        uint64_t v68 = __swift_allocate_boxed_opaque_existential_0Tm(v107);
        uint64_t v69 = v76;
        v72(v68, v76, v67);
        char v110 = 0;
        (*(void (**)(uint64_t *, uint64_t *, uint64_t, uint64_t))(v60 + 72))(v113, v107, v54, v60);
        v63(v64, v54);
        sub_1D769AC0C((uint64_t)v107, (uint64_t *)&unk_1EBA33F50);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v113);
        LOBYTE(v107[0]) = 1;
        v100(v107);
        swift_release();
        (*(void (**)(char *, uint64_t))(v84 + 8))(v88, v32);
        return (*(uint64_t (**)(char *, uint64_t))(v90 + 8))(v69, v67);
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t CodableDispatcher.__deallocating_deinit()
{
  CodableDispatcher.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t sub_1D76D9DAC@<X0>(uint64_t a1@<X8>)
{
  return sub_1D76D395C(a1);
}

uint64_t sub_1D76D9DD0(uint64_t a1)
{
  return sub_1D76D3A00(a1);
}

void (*sub_1D76D9DF4(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_1D76D3AAC();
  return sub_1D76D9E50;
}

void sub_1D76D9E50(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t sub_1D76D9E98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1D76D3D68(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1D76D9EBC()
{
  return sub_1D76D404C() & 1;
}

void sub_1D76D9EE4(uint64_t a1, uint64_t a2, void (*a3)(_OWORD *), uint64_t a4)
{
}

uint64_t type metadata accessor for CodableDispatcher.OperationInfo()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1D76D9F20()
{
  swift_weakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1D76D9F58()
{
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 128, 7);
}

uint64_t sub_1D76D9F98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D76D8B98(a1, a2, a3, a4, *(void *)(v4 + 104), *(void (**)(char *, uint64_t, uint64_t (*)(uint64_t), char *))(v4 + 112), *(void *)(v4 + 120), *(void *)(v4 + 16), *(void *)(v4 + 24), *(void *)(v4 + 32), *(void *)(v4 + 40), *(void *)(v4 + 48), *(void *)(v4 + 56), *(void *)(v4 + 64), *(void *)(v4 + 72), *(void *)(v4 + 80), *(void *)(v4 + 88));
}

uint64_t sub_1D76D9FE4()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 120, 7);
}

uint64_t sub_1D76DA01C(uint64_t a1, uint64_t a2, void (*a3)(char *), uint64_t a4)
{
  return sub_1D76D8CD8(a1, a2, a3, a4, *(void (**)(uint64_t, uint64_t))(v4 + 104), *(void *)(v4 + 112), *(void *)(v4 + 16), *(void *)(v4 + 24), *(void *)(v4 + 32), *(void *)(v4 + 40));
}

uint64_t sub_1D76DA05C()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t sub_1D76DA084(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F08);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188788](v3);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (uint64_t)__swift_project_boxed_opaque_existential_1(a1, a1[3]);
  unint64_t v8 = sub_1D76DA5C8();
  sub_1D76F8D94();
  if (!v1)
  {
    LOBYTE(v34[0]) = 0;
    uint64_t v9 = sub_1D76F8664();
    uint64_t v7 = v10;
    unint64_t v31 = v8;
    if (qword_1EA83A4B8 != -1) {
      swift_once();
    }
    uint64_t v11 = *(void *)(qword_1EA83D970 + 16);
    if (v11)
    {
      uint64_t v28 = v3;
      uint64_t v29 = v6;
      uint64_t v30 = v4;
      uint64_t v27 = swift_bridgeObjectRetain();
      uint64_t v12 = (_OWORD *)(v27 + 40);
      while (1)
      {
        uint64_t v13 = *((void *)v12 - 1);
        long long v32 = *v12;
        if (sub_1D76F8DF4() == v9 && v14 == v7)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          goto LABEL_18;
        }
        char v16 = sub_1D76F89E4();
        swift_bridgeObjectRelease();
        if (v16) {
          break;
        }
        uint64_t v12 = (_OWORD *)((char *)v12 + 24);
        if (!--v11)
        {
          swift_bridgeObjectRelease();
          uint64_t v6 = v29;
          uint64_t v4 = v30;
          uint64_t v3 = v28;
          goto LABEL_13;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_18:
      v33[0] = 1;
      uint64_t v35 = v13;
      long long v36 = v32;
      __swift_allocate_boxed_opaque_existential_0Tm(v34);
      uint64_t v19 = v29;
      sub_1D76F0FE0();
      uint64_t v20 = v30;
      sub_1D76DCB2C((uint64_t)v34, (uint64_t)v33);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AA58);
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F40);
      if (swift_dynamicCast())
      {
        uint64_t v7 = v37;
        (*(void (**)(char *, uint64_t))(v20 + 8))(v19, v28);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v34);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
        return v7;
      }
      sub_1D76DCA84();
      swift_allocError();
      uint64_t v22 = v21;
      uint64_t v23 = v35;
      uint64_t v24 = __swift_project_boxed_opaque_existential_1(v34, v35);
      *(void *)(v22 + 24) = v23;
      boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)v22);
      (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v23 - 8) + 16))(boxed_opaque_existential_0Tm, v24, v23);
      *(void *)(v22 + 32) = v7;
      *(unsigned char *)(v22 + 40) = 1;
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v20 + 8))(v19, v28);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v34);
    }
    else
    {
LABEL_13:
      sub_1D76DCA84();
      swift_allocError();
      *(void *)uint64_t v17 = v9;
      *(void *)(v17 + 8) = v7;
      *(unsigned char *)(v17 + 40) = 0;
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    }
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return v7;
}

unint64_t sub_1D76DA49C()
{
  unint64_t result = qword_1EA83AA00;
  if (!qword_1EA83AA00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83AA00);
  }
  return result;
}

uint64_t sub_1D76DA4F0()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  return MEMORY[0x1F4186498](v0, 32, 7);
}

char *sub_1D76DA530(char *result)
{
  uint64_t v2 = *(uint64_t (**)(char *))(v1 + 16);
  if (v2)
  {
    char v3 = *result;
    return (char *)v2(&v3);
  }
  return result;
}

unint64_t sub_1D76DA574()
{
  unint64_t result = qword_1EA83AA10;
  if (!qword_1EA83AA10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83AA10);
  }
  return result;
}

unint64_t sub_1D76DA5C8()
{
  unint64_t result = qword_1EBA34C48;
  if (!qword_1EBA34C48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBA34C48);
  }
  return result;
}

uint64_t type metadata accessor for DispatcherResponse.CodingKeys()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for DispatcherResponse()
{
  return swift_getGenericMetadata();
}

unint64_t sub_1D76DA650()
{
  unint64_t result = qword_1EA83AA18;
  if (!qword_1EA83AA18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83AA18);
  }
  return result;
}

unint64_t sub_1D76DA6A8()
{
  unint64_t result = qword_1EA83AA20;
  if (!qword_1EA83AA20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83AA20);
  }
  return result;
}

uint64_t sub_1D76DA6FC(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 96);
}

uint64_t sub_1D76DA704@<X0>(uint64_t a1@<X8>)
{
  return sub_1D76D395C(a1);
}

uint64_t sub_1D76DA72C()
{
  return 24;
}

__n128 sub_1D76DA738(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

ValueMetadata *type metadata accessor for UnknownResultType()
{
  return &type metadata for UnknownResultType;
}

ValueMetadata *type metadata accessor for MessageHeader()
{
  return &type metadata for MessageHeader;
}

uint64_t sub_1D76DA76C()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1D76DA808(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 16) & (unint64_t)~v6) + *(void *)(v5 + 64) > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    uint64_t v11 = ((unint64_t)a1 + v6 + 16) & ~v6;
    uint64_t v12 = ((unint64_t)a2 + v6 + 16) & ~v6;
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v13(v11, v12, v4);
  }
  return a1;
}

uint64_t sub_1D76DA910(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

void *sub_1D76DA984(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(a3 + 16);
  unint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 16) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 16) & ~v7;
  swift_bridgeObjectRetain();
  v6(v8, v9, v5);
  return a1;
}

void *sub_1D76DAA14(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_OWORD *sub_1D76DAAAC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

void *sub_1D76DAB1C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_1D76DABA4(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 16) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 16) & ~v6);
      }
      unint64_t v15 = *((void *)a1 + 1);
      if (v15 >= 0xFFFFFFFF) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void sub_1D76DAD44(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 16) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x1D76DAFA4);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v18 = (unint64_t)&a1[v9 + 16] & ~v9;
          uint64_t v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *(void *)a1 = a2 ^ 0x80000000;
          *((void *)a1 + 1) = 0;
        }
        else
        {
          *((void *)a1 + 1) = a2 - 1;
        }
      }
      return;
  }
}

uint64_t sub_1D76DAFCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 56);
}

uint64_t sub_1D76DAFD4()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

void *sub_1D76DB0A0(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(v5 + 64) <= *(void *)(v4 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(v5 + 64);
  }
  uint64_t v7 = (*(unsigned char *)(v5 + 80) | *(unsigned char *)(v4 + 80));
  if (v7 <= 7
    && (unint64_t)(v6 + 1) <= 0x18
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) == 0)
  {
    unsigned int v11 = a2[v6];
    unsigned int v12 = v11 - 2;
    if (v11 >= 2)
    {
      if (v6 <= 3) {
        uint64_t v13 = v6;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a2;
          goto LABEL_21;
        case 2:
          int v14 = *(unsigned __int16 *)a2;
          goto LABEL_21;
        case 3:
          int v14 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_21;
        case 4:
          int v14 = *(_DWORD *)a2;
LABEL_21:
          int v15 = (v14 | (v12 << (8 * v6))) + 2;
          unsigned int v11 = v14 + 2;
          if (v6 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    if (v11 == 1)
    {
      (*(void (**)(void *))(v5 + 16))(a1);
      *((unsigned char *)v3 + v6) = 1;
    }
    else
    {
      (*(void (**)(void *))(v4 + 16))(a1);
      *((unsigned char *)v3 + v6) = 0;
    }
  }
  else
  {
    uint64_t v10 = *(void *)a2;
    *char v3 = *(void *)a2;
    char v3 = (void *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v3;
}

uint64_t sub_1D76DB274(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16) - 8;
  uint64_t v3 = *(void *)v2;
  unint64_t v4 = *(void *)(*(void *)v2 + 64);
  if (v4 <= *(void *)(*(void *)(*(void *)(a2 + 24) - 8) + 64)) {
    unint64_t v4 = *(void *)(*(void *)(*(void *)(a2 + 24) - 8) + 64);
  }
  unsigned int v5 = a1[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a1;
        goto LABEL_12;
      case 2:
        int v8 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v8 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v8 = *(_DWORD *)a1;
LABEL_12:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1) {
    uint64_t v10 = v3;
  }
  else {
    uint64_t v10 = *(void *)(*(void *)(a2 + 24) - 8);
  }
  return (*(uint64_t (**)(void))(v10 + 8))();
}

uint64_t sub_1D76DB3B0(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  if (*(void *)(*(void *)(v4 - 8) + 64) <= *(void *)(v5 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  unsigned int v7 = a2[v6];
  unsigned int v8 = v7 - 2;
  if (v7 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a2;
        goto LABEL_13;
      case 2:
        int v10 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v10 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v10 = *(_DWORD *)a2;
LABEL_13:
        int v11 = (v10 | (v8 << (8 * v6))) + 2;
        unsigned int v7 = v10 + 2;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  BOOL v12 = v7 == 1;
  if (v7 == 1) {
    uint64_t v5 = *(void *)(v4 - 8);
  }
  (*(void (**)(uint64_t))(v5 + 16))(a1);
  *(unsigned char *)(a1 + v6) = v12;
  return a1;
}

unsigned __int8 *sub_1D76DB524(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = *(void *)(a3 + 16);
    uint64_t v5 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
    }
    else {
      uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    unsigned int v10 = a1[v9];
    unsigned int v11 = v10 - 2;
    if (v10 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a1;
          goto LABEL_14;
        case 2:
          int v13 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v13 = *(_DWORD *)a1;
LABEL_14:
          int v14 = (v13 | (v11 << (8 * v9))) + 2;
          unsigned int v10 = v13 + 2;
          if (v9 < 4) {
            unsigned int v10 = v14;
          }
          break;
        default:
          break;
      }
    }
    if (v10 == 1) {
      uint64_t v15 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v15 = *(void *)(*(void *)(a3 + 24) - 8);
    }
    if (v10 == 1) {
      uint64_t v16 = *(void *)(a3 + 16);
    }
    else {
      uint64_t v16 = *(void *)(a3 + 24);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v15 + 8))(a1, v16);
    unsigned int v17 = a2[v9];
    unsigned int v18 = v17 - 2;
    if (v17 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v19 = v9;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          goto LABEL_31;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v20 = *(_DWORD *)a2;
LABEL_31:
          int v21 = (v20 | (v18 << (8 * v9))) + 2;
          unsigned int v17 = v20 + 2;
          if (v9 < 4) {
            unsigned int v17 = v21;
          }
          break;
        default:
          break;
      }
    }
    BOOL v22 = v17 == 1;
    if (v17 == 1) {
      uint64_t v23 = v8;
    }
    else {
      uint64_t v23 = v7;
    }
    if (v17 == 1) {
      uint64_t v24 = v6;
    }
    else {
      uint64_t v24 = v5;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v23 + 16))(a1, a2, v24);
    a1[v9] = v22;
  }
  return a1;
}

uint64_t sub_1D76DB764(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  if (*(void *)(*(void *)(v4 - 8) + 64) <= *(void *)(v5 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  unsigned int v7 = a2[v6];
  unsigned int v8 = v7 - 2;
  if (v7 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a2;
        goto LABEL_13;
      case 2:
        int v10 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v10 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v10 = *(_DWORD *)a2;
LABEL_13:
        int v11 = (v10 | (v8 << (8 * v6))) + 2;
        unsigned int v7 = v10 + 2;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  BOOL v12 = v7 == 1;
  if (v7 == 1) {
    uint64_t v5 = *(void *)(v4 - 8);
  }
  (*(void (**)(uint64_t))(v5 + 32))(a1);
  *(unsigned char *)(a1 + v6) = v12;
  return a1;
}

unsigned __int8 *sub_1D76DB8D8(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = *(void *)(a3 + 16);
    uint64_t v5 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
    }
    else {
      uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    unsigned int v10 = a1[v9];
    unsigned int v11 = v10 - 2;
    if (v10 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a1;
          goto LABEL_14;
        case 2:
          int v13 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v13 = *(_DWORD *)a1;
LABEL_14:
          int v14 = (v13 | (v11 << (8 * v9))) + 2;
          unsigned int v10 = v13 + 2;
          if (v9 < 4) {
            unsigned int v10 = v14;
          }
          break;
        default:
          break;
      }
    }
    if (v10 == 1) {
      uint64_t v15 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v15 = *(void *)(*(void *)(a3 + 24) - 8);
    }
    if (v10 == 1) {
      uint64_t v16 = *(void *)(a3 + 16);
    }
    else {
      uint64_t v16 = *(void *)(a3 + 24);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v15 + 8))(a1, v16);
    unsigned int v17 = a2[v9];
    unsigned int v18 = v17 - 2;
    if (v17 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v19 = v9;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          goto LABEL_31;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v20 = *(_DWORD *)a2;
LABEL_31:
          int v21 = (v20 | (v18 << (8 * v9))) + 2;
          unsigned int v17 = v20 + 2;
          if (v9 < 4) {
            unsigned int v17 = v21;
          }
          break;
        default:
          break;
      }
    }
    BOOL v22 = v17 == 1;
    if (v17 == 1) {
      uint64_t v23 = v8;
    }
    else {
      uint64_t v23 = v7;
    }
    if (v17 == 1) {
      uint64_t v24 = v6;
    }
    else {
      uint64_t v24 = v5;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v23 + 32))(a1, a2, v24);
    a1[v9] = v22;
  }
  return a1;
}

uint64_t sub_1D76DBB18(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (v3 <= *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64)) {
    unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_22;
  }
  unint64_t v4 = v3 + 1;
  char v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    unsigned int v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      int v6 = *(_DWORD *)((char *)a1 + v4);
      if (!v6) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      int v6 = *(unsigned __int16 *)((char *)a1 + v4);
      if (!*(unsigned __int16 *)((char *)a1 + v4)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_22:
      unsigned int v10 = *((unsigned __int8 *)a1 + v3);
      if (v10 >= 2) {
        return (v10 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v6 = *((unsigned __int8 *)a1 + v4);
  if (!*((unsigned char *)a1 + v4)) {
    goto LABEL_22;
  }
LABEL_14:
  int v9 = (v6 - 1) << v5;
  if (v4 > 3) {
    int v9 = 0;
  }
  if (v4)
  {
    if (v4 > 3) {
      LODWORD(v4) = 4;
    }
    switch((int)v4)
    {
      case 2:
        LODWORD(v4) = *a1;
        break;
      case 3:
        LODWORD(v4) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v4) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v4) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v4 | v9) + 255;
}

void sub_1D76DBC5C(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  if (*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v8 = a2 - 255;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x1D76DBE34);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_1D76DBE5C(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  if (v2 <= *(void *)(*(void *)(*(void *)(a2 + 24) - 8) + 64)) {
    unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 24) - 8) + 64);
  }
  uint64_t v3 = a1[v2];
  int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v7 = (v6 | (v4 << (8 * v2))) + 2;
        LODWORD(v3) = v6 + 2;
        if (v2 >= 4) {
          uint64_t v3 = v3;
        }
        else {
          uint64_t v3 = v7;
        }
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_1D76DBF24(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  if (a2 > 1)
  {
    uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
    if (*(void *)(v6 + 64) <= *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64)) {
      size_t v7 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a2 - 2;
    if (v7 < 4)
    {
      unsigned int v9 = v8 >> (8 * v7);
      int v10 = v8 & ~(-1 << (8 * v7));
      a1[v7] = v9 + 2;
      bzero(a1, v7);
      if (v7 == 3)
      {
        *(_WORD *)a1 = v10;
        a1[2] = BYTE2(v10);
      }
      else if (v7 == 2)
      {
        *(_WORD *)a1 = v10;
      }
      else
      {
        *a1 = v10;
      }
    }
    else
    {
      a1[v7] = 2;
      bzero(a1, v7);
      *(_DWORD *)a1 = v8;
    }
  }
  else
  {
    uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
    if (*(void *)(v4 + 64) > v5) {
      unint64_t v5 = *(void *)(v4 + 64);
    }
    a1[v5] = a2;
  }
}

uint64_t dispatch thunk of CodableDispatchTraits.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CodableDispatchTraits.isDispatchable(encodedData:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of CodableDispatchTraits.prepareForEncodingHandlerValue(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of CodableDispatchTraits.readEncodedRequestType(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of CodableDispatchTraits.encode<A>(value:into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 48))();
}

uint64_t dispatch thunk of CodableDispatchTraits.decode<A>(encodedData:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 56))();
}

uint64_t dispatch thunk of CodableDispatchTraits.willDispatch(value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of CodableDispatchTraits.didDispatch(value:result:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 72))();
}

uint64_t dispatch thunk of CodableDispatchTraits.shouldPass(error:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of CodableDispatchTraits.didPass(value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of CodableDispatchTraits.sink(handlerValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

unsigned char *sub_1D76DC194(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for DispatchOutcome()
{
  return &type metadata for DispatchOutcome;
}

uint64_t dispatch thunk of CodableDispatching.traits.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of CodableDispatching.traits.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of CodableDispatching.traits.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of CodableDispatching.register<A, B>(handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return (*(uint64_t (**)(void))(a10 + 56))();
}

uint64_t dispatch thunk of CodableDispatching.hasRegistration(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of CodableDispatching.dispatch(encodedData:context:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 72))();
}

ValueMetadata *type metadata accessor for CodableDispatcherError()
{
  return &type metadata for CodableDispatcherError;
}

uint64_t sub_1D76DC240()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for CodableDispatcher()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for CodableDispatcher(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CodableDispatcher);
}

uint64_t dispatch thunk of CodableDispatcher.traits.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of CodableDispatcher.traits.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of CodableDispatcher.traits.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of CodableDispatcher.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of CodableDispatcher.register<A, B>(handler:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of CodableDispatcher.register<A, B, C>(errorWrapperType:handler:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of CodableDispatcher.hasRegistration(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of CodableDispatcher.dispatch(encodedData:context:completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of CodableDispatcher.dispatch<A>(value:context:completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t sub_1D76DC4C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 48);
}

uint64_t getEnumTagSinglePayload for DynamicCodableContainerCodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s7Mercury15DispatchOutcomeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D76DC62CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UnknownResultType.CodingKeys()
{
  return &type metadata for UnknownResultType.CodingKeys;
}

void *sub_1D76DC664(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t sub_1D76DC694()
{
  return swift_release();
}

void *sub_1D76DC69C(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_1D76DC6D8(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

void *initializeBufferWithCopyOfBuffer for DispatcherErrorWrapper(void *a1, id *a2)
{
  id v3 = *a2;
  id v4 = *a2;
  *a1 = v3;
  return a1;
}

void destroy for DispatcherErrorWrapper(id *a1)
{
}

void **assignWithCopy for DispatcherErrorWrapper(void **a1, id *a2)
{
  id v3 = *a2;
  id v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = v3;

  return a1;
}

void **assignWithTake for DispatcherErrorWrapper(void **a1, void **a2)
{
  id v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for DispatcherErrorWrapper(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 8)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DispatcherErrorWrapper(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 8) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DispatcherErrorWrapper()
{
  return &type metadata for DispatcherErrorWrapper;
}

uint64_t sub_1D76DC84C()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D76DC868()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D76DC884()
{
  return swift_getWitnessTable();
}

unint64_t sub_1D76DC8A4()
{
  unint64_t result = qword_1EA83AA28;
  if (!qword_1EA83AA28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83AA28);
  }
  return result;
}

unint64_t sub_1D76DC8FC()
{
  unint64_t result = qword_1EA83AA30;
  if (!qword_1EA83AA30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83AA30);
  }
  return result;
}

unint64_t sub_1D76DC950(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1D76DC980();
  unint64_t result = sub_1D76C8C54();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1D76DC980()
{
  unint64_t result = qword_1EBA34268;
  if (!qword_1EBA34268)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBA34268);
  }
  return result;
}

unint64_t sub_1D76DC9D4()
{
  unint64_t result = qword_1EA83AA40;
  if (!qword_1EA83AA40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83AA40);
  }
  return result;
}

unint64_t sub_1D76DCA28()
{
  unint64_t result = qword_1EA83AA48;
  if (!qword_1EA83AA48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83AA48);
  }
  return result;
}

uint64_t sub_1D76DCA7C()
{
  return 2;
}

unint64_t sub_1D76DCA84()
{
  unint64_t result = qword_1EA83AA50;
  if (!qword_1EA83AA50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83AA50);
  }
  return result;
}

uint64_t __swift_deallocate_boxed_opaque_existential_2(uint64_t result)
{
  if ((*(_DWORD *)(*(void *)(*(void *)(result + 24) - 8) + 80) & 0x20000) != 0) {
    JUMPOUT(0x1D9476C10);
  }
  return result;
}

uint64_t sub_1D76DCB2C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1D76DCB90()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 144) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, AssociatedTypeWitness);

  return MEMORY[0x1F4186498](v0, v6, v5);
}

uint64_t sub_1D76DCC98(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 40);
  uint64_t v5 = *(void *)(v1 + 48);
  uint64_t v6 = *(void *)(v1 + 56);
  long long v12 = *(_OWORD *)(v1 + 64);
  long long v13 = *(_OWORD *)(v1 + 24);
  long long v11 = *(_OWORD *)(v1 + 80);
  uint64_t v7 = *(void *)(v1 + 96);
  uint64_t v8 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 144) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  return sub_1D76D8F50(a1, *(void *)(v1 + 104), *(void *)(v1 + 112), *(void *)(v1 + 120), *(void (**)(uint64_t *))(v1 + 128), *(void *)(v1 + 136), v1 + v9, *(void *)(v1 + ((*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8)), v3, v13, *((uint64_t *)&v13 + 1), v4, v5, v6, v12, *((uint64_t *)&v12 + 1), v11, v7);
}

unint64_t sub_1D76DCDB8()
{
  unint64_t result = qword_1EA83AA70;
  if (!qword_1EA83AA70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83AA70);
  }
  return result;
}

unint64_t sub_1D76DCE0C()
{
  unint64_t result = qword_1EA83AA78;
  if (!qword_1EA83AA78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83AA78);
  }
  return result;
}

unint64_t sub_1D76DCE60()
{
  unint64_t result = qword_1EA83A920;
  if (!qword_1EA83A920)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EA83A920);
  }
  return result;
}

uint64_t sub_1D76DCEA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AC30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_OWORD *sub_1D76DCF08(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

id sub_1D76DCF34()
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28E08]), sel_init);
  qword_1EA83AA88 = (uint64_t)result;
  return result;
}

uint64_t sub_1D76DCF68()
{
  uint64_t v0 = sub_1D76F7E84();
  MEMORY[0x1F4188788](v0 - 8);
  uint64_t v1 = sub_1D76F8324();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188788](v1);
  uint64_t v4 = (char *)v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1D76F8314();
  MEMORY[0x1F4188788](v5);
  sub_1D76BBA90(0, (unint64_t *)&qword_1EBA34230);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA83AA90);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1D76FA300;
  sub_1D76F8304();
  v8[1] = v6;
  sub_1D76DE2CC((unint64_t *)&qword_1EA83A720, MEMORY[0x1E4FBCC10]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A728);
  sub_1D76DE314((unint64_t *)&qword_1EA83A730, &qword_1EA83A728);
  sub_1D76F8434();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FBCC68], v1);
  sub_1D76F7E74();
  uint64_t result = sub_1D76F8364();
  qword_1EA83D980 = result;
  return result;
}

uint64_t static XPCFileDescriptor.splice(from:to:on:reportingProgressUsing:completion:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3)
  {
    id v15 = a3;
  }
  else
  {
    if (qword_1EA83A4D0 != -1) {
      swift_once();
    }
    id v15 = (id)qword_1EA83D980;
  }
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = v15;
  v16[3] = a6;
  void v16[4] = a7;
  unsigned int v17 = (void *)swift_allocObject();
  v17[2] = a1;
  v17[3] = a2;
  void v17[4] = a4;
  v17[5] = a5;
  v17[6] = sub_1D76DD734;
  v17[7] = v16;
  v17[8] = v7;
  type metadata accessor for POSIXThread();
  swift_allocObject();
  id v18 = a3;
  swift_retain();
  id v19 = v15;
  swift_retain();
  swift_retain();
  sub_1D76D04A8(a4);
  swift_retain();
  sub_1D76BCBC4((uint64_t)sub_1D76DDCFC, (uint64_t)v17);
  swift_release();

  return swift_release();
}

uint64_t sub_1D76DD434(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v21[0] = a3;
  uint64_t v9 = sub_1D76F7E64();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188788](v9);
  long long v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1D76F7E84();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188788](v13);
  uint64_t v16 = (char *)v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned int v17 = (void *)swift_allocObject();
  v17[2] = a4;
  v17[3] = a5;
  void v17[4] = a1;
  v17[5] = a2;
  aBlock[4] = sub_1D76DE284;
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E4F143A0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1D76CF320;
  aBlock[3] = &block_descriptor_4;
  id v18 = _Block_copy(aBlock);
  swift_retain();
  id v19 = a2;
  sub_1D76F7E74();
  v21[1] = MEMORY[0x1E4FBC860];
  sub_1D76DE2CC((unint64_t *)&qword_1EBA33E60, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33E98);
  sub_1D76DE314((unint64_t *)&qword_1EBA33EA0, &qword_1EBA33E98);
  sub_1D76F8434();
  MEMORY[0x1D9475770](0, v16, v12, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  return swift_release();
}

uint64_t sub_1D76DD6F4()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_1D76DD734(uint64_t a1, void *a2)
{
  return sub_1D76DD434(a1, a2, v2[2], v2[3], v2[4]);
}

void *sub_1D76DD740(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, char *), uint64_t a4, void (*a5)(uint64_t, void), uint64_t a6)
{
  uint64_t v50 = a6;
  uint64_t v51 = a5;
  uint64_t v10 = sub_1D76F7A64();
  uint64_t v52 = *(void *)(v10 - 8);
  MEMORY[0x1F4188788](v10);
  long long v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D76DE0C4();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA83A9A0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D76FC2D0;
  *(void *)(inited + 32) = a1;
  *(void *)(inited + 40) = a2;
  unint64_t v54 = inited;
  sub_1D76F81D4();
  unint64_t v14 = v54;
  swift_retain();
  swift_retain();
  uint64_t v15 = sub_1D76DDD10(v14);
  uint64_t v17 = v16;
  swift_bridgeObjectRelease();
  sub_1D76DDF48(a3, a4, 0);
  uint64_t v49 = a4;
  uint64_t result = XPCFileDescriptor.read(into:polling:)(v15, v17, 1);
  uint64_t v20 = (uint64_t)result;
  uint64_t v46 = v17;
  uint64_t v47 = a1;
  uint64_t v45 = v10;
  uint64_t v21 = 0;
  BOOL v22 = v51;
  uint64_t v48 = v15;
  while ((v19 & 1) == 0)
  {
    if (!v15) {
      goto LABEL_28;
    }
    if (!v20) {
      sub_1D76DDF48(a3, v49, v21);
    }
    uint64_t v23 = v15 + v20;
    uint64_t v24 = v20;
    if (v20 >= 1)
    {
      uint64_t v25 = v15;
      do
      {
        unint64_t v26 = (unint64_t)XPCFileDescriptor.write(from:polling:)(v25, v23, 1);
        if (v27) {
          break;
        }
        unint64_t v28 = v26;
        uint64_t v29 = v52;
        if ((v26 & 0x8000000000000000) == 0)
        {
          BOOL v30 = __CFADD__(v21, v26);
          v21 += v26;
          if (v30) {
            uint64_t v21 = -1;
          }
        }
        v53[0] = 0;
        if (a3)
        {
          a3(v21, v53);
          if (v53[0] == 1)
          {
            LODWORD(v54) = 89;
            sub_1D769C348(MEMORY[0x1E4FBC860]);
            sub_1D76DE2CC((unint64_t *)&qword_1EA83AC90, MEMORY[0x1E4F26C30]);
            uint64_t v32 = v45;
            sub_1D76F7B74();
            uint64_t v33 = (void *)sub_1D76F7A44();
            (*(void (**)(char *, uint64_t))(v29 + 8))(v12, v32);
            swift_willThrow();
            uint64_t v34 = (void (*)(uint64_t, void *))v51;
            MEMORY[0x1D9476C10](v48, -1, -1);
            sub_1D76F82B4();
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBA33F30);
            uint64_t v35 = swift_allocObject();
            *(_OWORD *)(v35 + 16) = xmmword_1D76FA300;
            unint64_t v54 = (unint64_t)v33;
            id v36 = v33;
            __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F40);
            uint64_t v37 = sub_1D76F8044();
            uint64_t v39 = v38;
            *(void *)(v35 + 56) = MEMORY[0x1E4FBB1A0];
            *(void *)(v35 + 64) = sub_1D76B6EA0();
            *(void *)(v35 + 32) = v37;
            *(void *)(v35 + 40) = v39;
            sub_1D76BBA90(0, (unint64_t *)&qword_1EA83A920);
            uint64_t v40 = (void *)sub_1D76F8394();
            sub_1D76F7D84();
            swift_bridgeObjectRelease();

            id v41 = v33;
            v34(v21, v33);

            goto LABEL_20;
          }
        }
        BOOL v31 = __OFSUB__(v24, v28);
        v24 -= v28;
        if (v31)
        {
          __break(1u);
          goto LABEL_26;
        }
        v25 += v28;
        uint64_t v23 = v25 + v24;
      }
      while (v24 > 0);
    }
    uint64_t v15 = v48;
    uint64_t result = XPCFileDescriptor.read(into:polling:)(v48, v46, 1);
    uint64_t v20 = (uint64_t)result;
    BOOL v22 = v51;
  }
  sub_1D76DDF48(a3, v49, v21);
  sub_1D76F8294();
  sub_1D76BBA90(0, (unint64_t *)&qword_1EA83A920);
  uint64_t v43 = (void *)sub_1D76F8394();
  sub_1D76F7D84();

  v22(v21, 0);
  if (v15) {
    MEMORY[0x1D9476C10](v15, -1, -1);
  }
LABEL_20:
  if (qword_1EA83A4C8 != -1) {
LABEL_26:
  }
    swift_once();
  uint64_t v42 = (void *)qword_1EA83AA88;
  uint64_t result = objc_msgSend((id)qword_1EA83AA88, sel_lock);
  if (!__OFSUB__(qword_1EA83AA80, 1))
  {
    --qword_1EA83AA80;
    return objc_msgSend(v42, sel_unlock);
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1D76DDCA4()
{
  swift_release();
  swift_release();
  if (*(void *)(v0 + 32)) {
    swift_release();
  }
  swift_release();

  return MEMORY[0x1F4186498](v0, 72, 7);
}

void *sub_1D76DDCFC()
{
  return sub_1D76DD740(*(void *)(v0 + 16), *(void *)(v0 + 24), *(uint64_t (**)(uint64_t, char *))(v0 + 32), *(void *)(v0 + 40), *(void (**)(uint64_t, void))(v0 + 48), *(void *)(v0 + 56));
}

uint64_t sub_1D76DDD10(unint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143C0];
  uint64_t v3 = *MEMORY[0x1E4F14B08];
  if ((*MEMORY[0x1E4F14B08] & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  if ((unint64_t)(v3 - 0x2000000000000000) >> 62 != 3)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  unint64_t v2 = a1;
  uint64_t v1 = 4 * v3;
  if (!(a1 >> 62))
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v4) {
      goto LABEL_18;
    }
    goto LABEL_5;
  }
LABEL_17:
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_1D76F85C4();
  if (!v4) {
    goto LABEL_18;
  }
LABEL_5:
  if (v4 < 1) {
    __break(1u);
  }
  for (uint64_t i = 0; i != v4; ++i)
  {
    if ((v2 & 0xC000000000000001) != 0)
    {
      uint64_t v6 = MEMORY[0x1D94758B0](i, v2);
    }
    else
    {
      uint64_t v6 = *(void *)(v2 + 8 * i + 32);
      swift_retain();
    }
    int v7 = *(_DWORD *)(v6 + 64);
    memset(&v14, 0, 28);
    memset(&v14.st_atimespec, 0, 112);
    int v8 = fstat(v7, &v14);
    swift_release();
    uint64_t st_blksize = v14.st_blksize;
    if (v1 > v14.st_blksize) {
      uint64_t st_blksize = v1;
    }
    if (!v8) {
      uint64_t v1 = st_blksize;
    }
  }
LABEL_18:
  swift_bridgeObjectRelease();
  sub_1D76F82A4();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBA33F30);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1D76FA300;
  uint64_t v11 = MEMORY[0x1E4FBB868];
  *(void *)(v10 + 56) = MEMORY[0x1E4FBB808];
  *(void *)(v10 + 64) = v11;
  *(void *)(v10 + 32) = v1 & ~(v1 >> 63);
  sub_1D76BBA90(0, (unint64_t *)&qword_1EA83A920);
  long long v12 = (void *)sub_1D76F8394();
  sub_1D76F7D84();
  swift_bridgeObjectRelease();

  return swift_slowAlloc();
}

uint64_t sub_1D76DDF48(uint64_t (*a1)(uint64_t, char *), uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1D76F7A64();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t result = MEMORY[0x1F4188788](v5);
  uint64_t v9 = (char *)&v10 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v12 = 0;
  if (a1)
  {
    uint64_t result = a1(a3, &v12);
    if (v12)
    {
      int v11 = 89;
      sub_1D769C348(MEMORY[0x1E4FBC860]);
      sub_1D76DE2CC((unint64_t *)&qword_1EA83AC90, MEMORY[0x1E4F26C30]);
      sub_1D76F7B74();
      sub_1D76F7A44();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      return swift_willThrow();
    }
  }
  return result;
}

void sub_1D76DE0C4()
{
  if (qword_1EA83A4C8 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1EA83AA88;
  objc_msgSend((id)qword_1EA83AA88, sel_lock);
  uint64_t v1 = qword_1EA83AA80 + 1;
  if (__OFADD__(qword_1EA83AA80, 1))
  {
    __break(1u);
  }
  else
  {
    ++qword_1EA83AA80;
    objc_msgSend(v0, sel_unlock);
    if (v1 >= 17)
    {
      os_log_type_t v2 = sub_1D76F82C4();
      sub_1D76BBA90(0, (unint64_t *)&qword_1EA83A920);
      log = sub_1D76F8394();
      if (os_log_type_enabled(log, v2))
      {
        uint64_t v3 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v3 = 134217984;
        sub_1D76F83B4();
        _os_log_impl(&dword_1D7690000, log, v2, "Unexpectedly high number of concurrent XPCFileDescriptor.splice operations: %ld", v3, 0xCu);
        MEMORY[0x1D9476C10](v3, -1, -1);
      }
      else
      {
      }
    }
  }
}

uint64_t sub_1D76DE244()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_1D76DE284()
{
  return (*(uint64_t (**)(void, void))(v0 + 16))(*(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t sub_1D76DE2CC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D76DE314(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t static xpc_event_publisher_action_t.add.getter()
{
  return 0;
}

uint64_t static xpc_event_publisher_action_t.remove.getter()
{
  return 1;
}

uint64_t static xpc_event_publisher_action_t.initialBarrier.getter()
{
  return 2;
}

uint64_t XPCEventPublisher.Token.rawValue.getter()
{
  return *(void *)v0;
}

uint64_t XPCEventPublisher.Token.rawValue.setter(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t (*XPCEventPublisher.Token.rawValue.modify())()
{
  return nullsub_1;
}

uint64_t XPCEventPublisher.Token.init(rawValue:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void *sub_1D76DE3B4@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

uint64_t sub_1D76DE3C4()
{
  return sub_1D76F8D54();
}

uint64_t sub_1D76DE40C()
{
  return sub_1D76F8D44();
}

uint64_t sub_1D76DE438()
{
  return sub_1D76F8D54();
}

uint64_t XPCEventPublisher.__allocating_init(publisher:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t XPCEventPublisher.init(publisher:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

uint64_t XPCEventPublisher.__allocating_init(streamName:queue:)(uint64_t a1, uint64_t a2, void *a3)
{
  void v6[2] = a3;
  uint64_t v4 = sub_1D76C50A4((void *(*)(uint64_t *__return_ptr, void *))sub_1D76DE54C, (uint64_t)v6, a1, a2);

  swift_bridgeObjectRelease();
  if (!v4) {
    return 0;
  }
  type metadata accessor for XPCEventPublisher();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v4;
  return result;
}

id sub_1D76DE54C@<X0>(void *a1@<X8>)
{
  id result = (id)xpc_event_publisher_create();
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for XPCEventPublisher()
{
  return self;
}

uint64_t sub_1D76DE5AC()
{
  return MEMORY[0x1F40CF050](*(void *)(v0 + 16));
}

void sub_1D76DE5B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  void v6[4] = sub_1D76DE824;
  v6[5] = v4;
  v6[0] = MEMORY[0x1E4F143A0];
  v6[1] = 1107296256;
  void v6[2] = sub_1D76DE82C;
  v6[3] = &block_descriptor_5;
  uint64_t v5 = _Block_copy(v6);
  swift_retain();
  swift_release();
  xpc_event_publisher_set_handler();
  _Block_release(v5);
}

uint64_t sub_1D76DE690(uint64_t result, uint64_t a2, uint64_t a3, void (*a4)(void *))
{
  if (result == 2)
  {
    a2 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v9 = 0;
    char v8 = 2;
  }
  else if (result == 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v9 = 0;
    char v8 = 1;
  }
  else
  {
    if (result) {
      return result;
    }
    uint64_t v6 = a3;
    uint64_t v7 = 0xD000000000000019;
    if (!a3)
    {
      id result = sub_1D76F85B4();
      __break(1u);
      return result;
    }
    swift_unknownObjectRetain();
    char v8 = 0;
    uint64_t v9 = 0x80000001D76FD660;
  }
  v10[0] = a2;
  v10[1] = v6;
  void v10[2] = v7;
  void v10[3] = v9;
  char v11 = v8;
  sub_1D76DEFC8(a2, v6, v7, v9, v8);
  a4(v10);
  sub_1D76DF024(a2, v6, v7, v9, v8);
  return sub_1D76DF024(a2, v6, v7, v9, v8);
}

uint64_t sub_1D76DE7EC()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D76DE824(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D76DE690(a1, a2, a3, *(void (**)(void *))(v3 + 16));
}

uint64_t sub_1D76DE82C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  v7(a2, a3, a4);
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

void sub_1D76DE8C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  void v6[4] = sub_1D76DEBB0;
  v6[5] = v4;
  v6[0] = MEMORY[0x1E4F143A0];
  v6[1] = 1107296256;
  void v6[2] = sub_1D76DEBB8;
  v6[3] = &block_descriptor_6_1;
  uint64_t v5 = _Block_copy(v6);
  swift_retain();
  swift_release();
  xpc_event_publisher_set_error_handler();
  _Block_release(v5);
}

void sub_1D76DE9A0(uint64_t a1, void (*a2)(void))
{
  uint64_t v3 = sub_1D76F7A64();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188788](v3);
  uint64_t v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1D76F7DD4();
  if ((v7 & 0x100000000) != 0)
  {
    uint64_t v9 = xpc_strerror();
    if (v9) {
      uint64_t v9 = sub_1D76F80B4();
    }
    else {
      uint64_t v10 = 0;
    }
    if (v10) {
      uint64_t v11 = v9;
    }
    else {
      uint64_t v11 = 0xD00000000000001ALL;
    }
    if (v10) {
      uint64_t v12 = v10;
    }
    else {
      uint64_t v12 = 0x80000001D76FE7E0;
    }
    unint64_t v13 = sub_1D769C348(MEMORY[0x1E4FBC860]);
    static XPCError.unknown(_:from:userInfo:)(v11, v12, 0, v13, v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v14 = v18[0];
    uint64_t v15 = v18[1];
    sub_1D76B10C8();
    uint64_t v16 = (void *)swift_allocError();
    *uint64_t v17 = v14;
    v17[1] = v15;
    a2();
  }
  else
  {
    LODWORD(v18[0]) = v7;
    sub_1D769C348(MEMORY[0x1E4FBC860]);
    sub_1D76D0DB0();
    sub_1D76F7B74();
    char v8 = (void *)sub_1D76F7A44();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    ((void (*)(void *))a2)(v8);
  }
}

void sub_1D76DEBB0(uint64_t a1)
{
  sub_1D76DE9A0(a1, *(void (**)(void))(v1 + 16));
}

uint64_t sub_1D76DEBB8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

uint64_t sub_1D76DEC0C(void *a1, uint64_t *a2, char a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = j__xpc_event_publisher_fire_noboost;
  if (a3) {
    uint64_t v5 = j__xpc_event_publisher_fire;
  }
  return ((uint64_t (*)(void, uint64_t, void))v5)(*(void *)(v3 + 16), v4, *a1);
}

void sub_1D76DEC78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a4;
  *(void *)(v7 + 24) = a5;
  v9[4] = sub_1D76DEE0C;
  void v9[5] = v7;
  v9[0] = MEMORY[0x1E4F143A0];
  v9[1] = 1107296256;
  v9[2] = sub_1D76CE6E0;
  v9[3] = &block_descriptor_12_0;
  char v8 = _Block_copy(v9);
  swift_retain();
  swift_release();
  xpc_event_publisher_fire_with_reply();
  _Block_release(v8);
}

void sub_1D76DED7C()
{
}

uint64_t sub_1D76DEDB0()
{
  uint64_t v1 = v8;
  uint64_t v2 = v9;
  uint64_t v3 = v10;
  char v4 = v11;
  v6[0] = v8;
  v6[1] = v9;
  void v6[2] = v10;
  char v7 = v11;
  v0(v6);
  return sub_1D76CDED8(v1, v2, v3, v4);
}

void sub_1D76DEE0C()
{
}

uint64_t XPCEventPublisher.deinit()
{
  return v0;
}

uint64_t XPCEventPublisher.__deallocating_deinit()
{
  return MEMORY[0x1F4186488](v0, 24, 7);
}

unint64_t sub_1D76DEE70()
{
  unint64_t result = qword_1EBA33F90;
  if (!qword_1EBA33F90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBA33F90);
  }
  return result;
}

uint64_t method lookup function for XPCEventPublisher(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for XPCEventPublisher);
}

uint64_t dispatch thunk of XPCEventPublisher.__allocating_init(publisher:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of XPCEventPublisher.__allocating_init(streamName:queue:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of XPCEventPublisher.activate()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of XPCEventPublisher.setHandler(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of XPCEventPublisher.setErrorHandler(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of XPCEventPublisher.fire(event:forToken:boost:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of XPCEventPublisher.fire(event:forToken:replyQueue:replyHandler:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

ValueMetadata *type metadata accessor for XPCEventPublisher.Token()
{
  return &type metadata for XPCEventPublisher.Token;
}

uint64_t sub_1D76DEFC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (!a5)
  {
    swift_unknownObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for XPCEventPublisher.SubscriptionAction(uint64_t a1)
{
  return sub_1D76DF024(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t sub_1D76DF024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (!a5)
  {
    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for XPCEventPublisher.SubscriptionAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  sub_1D76DEFC8(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for XPCEventPublisher.SubscriptionAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  sub_1D76DEFC8(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  char v12 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v7;
  sub_1D76DF024(v8, v9, v10, v11, v12);
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for XPCEventPublisher.SubscriptionAction(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  char v9 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v3;
  sub_1D76DF024(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for XPCEventPublisher.SubscriptionAction(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCEventPublisher.SubscriptionAction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1D76DF234(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 32) <= 1u) {
    return *(unsigned __int8 *)(a1 + 32);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_1D76DF24C(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)__n128 result = a2 - 2;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 2;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
  }
  *(unsigned char *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for XPCEventPublisher.SubscriptionAction()
{
  return &type metadata for XPCEventPublisher.SubscriptionAction;
}

uint64_t XPCTypeDescriptor.type.getter()
{
  return *(void *)v0;
}

uint64_t XPCTypeDescriptor.name.getter()
{
  xpc_type_get_name(*v0);

  return sub_1D76F80B4();
}

uint64_t sub_1D76DF2CC()
{
  uint64_t result = XPCTypeGetMachSendOnce();
  qword_1EA83AAA0 = result;
  return result;
}

uint64_t XPCTypeMachSendOnce.getter()
{
  if (qword_1EA83A4D8 != -1) {
    swift_once();
  }
  return qword_1EA83AAA0;
}

void static XPCTypeDescriptor.error.getter(void *a1@<X8>)
{
  *a1 = XPCTypeError;
}

void static XPCTypeDescriptor.bundle.getter(void *a1@<X8>)
{
  *a1 = XPCTypeBundle;
}

void static XPCTypeDescriptor.connection.getter(void *a1@<X8>)
{
  *a1 = XPCTypeConnection;
}

void static XPCTypeDescriptor.endpoint.getter(void *a1@<X8>)
{
  *a1 = XPCTypeEndpoint;
}

void static XPCTypeDescriptor.dictionary.getter(void *a1@<X8>)
{
  *a1 = XPCTypeDictionary;
}

void static XPCTypeDescriptor.array.getter(void *a1@<X8>)
{
  *a1 = XPCTypeArray;
}

void static XPCTypeDescriptor.BOOL.getter(void *a1@<X8>)
{
  *a1 = XPCTypeBool;
}

void static XPCTypeDescriptor.data.getter(void *a1@<X8>)
{
  *a1 = XPCTypeData;
}

void static XPCTypeDescriptor.date.getter(void *a1@<X8>)
{
  *a1 = XPCTypeDate;
}

void static XPCTypeDescriptor.double.getter(void *a1@<X8>)
{
  *a1 = XPCTypeDouble;
}

void static XPCTypeDescriptor.fd.getter(void *a1@<X8>)
{
  *a1 = XPCTypeFD;
}

void static XPCTypeDescriptor.fileTransfer.getter(void *a1@<X8>)
{
  *a1 = XPCTypeFileTransfer;
}

void static XPCTypeDescriptor.machSend.getter(void *a1@<X8>)
{
  *a1 = XPCTypeMachSend;
}

uint64_t static XPCTypeDescriptor.machSendOnce.getter@<X0>(void *a1@<X8>)
{
  if (qword_1EA83A4D8 != -1) {
    uint64_t result = swift_once();
  }
  *a1 = qword_1EA83AAA0;
  return result;
}

void static XPCTypeDescriptor.machRecv.getter(void *a1@<X8>)
{
  *a1 = XPCTypeMachRecv;
}

void static XPCTypeDescriptor.pipe.getter(void *a1@<X8>)
{
  *a1 = XPCTypePipe;
}

void static XPCTypeDescriptor.pointer.getter(void *a1@<X8>)
{
  *a1 = XPCTypePointer;
}

void static XPCTypeDescriptor.remoteConnection.getter(void *a1@<X8>)
{
  *a1 = XPCTypeRemoteConnection;
}

void static XPCTypeDescriptor.serializer.getter(void *a1@<X8>)
{
  *a1 = XPCTypeSerializer;
}

void static XPCTypeDescriptor.service.getter(void *a1@<X8>)
{
  *a1 = XPCTypeService;
}

void static XPCTypeDescriptor.serviceInstance.getter(void *a1@<X8>)
{
  *a1 = XPCTypeServiceInstance;
}

void static XPCTypeDescriptor.int64.getter(void *a1@<X8>)
{
  *a1 = XPCTypeInt64;
}

void static XPCTypeDescriptor.uint64.getter(void *a1@<X8>)
{
  *a1 = XPCTypeUInt64;
}

void static XPCTypeDescriptor.string.getter(void *a1@<X8>)
{
  *a1 = XPCTypeString;
}

void static XPCTypeDescriptor.uuid.getter(void *a1@<X8>)
{
  *a1 = XPCTypeUUID;
}

void static XPCTypeDescriptor.shmem.getter(void *a1@<X8>)
{
  *a1 = XPCTypeShmem;
}

void static XPCTypeDescriptor.null.getter(void *a1@<X8>)
{
  *a1 = XPCTypeNull;
}

void static XPCTypeDescriptor.activity.getter(void *a1@<X8>)
{
  *a1 = XPCTypeActivity;
}

uint64_t static XPCTypeDescriptor.registry.getter()
{
  if (qword_1EA83A4E0 != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

uint64_t sub_1D76DF60C()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AAB0);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1D76FC410;
  *(void *)(v0 + 56) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AAB8);
  *(void *)(v0 + 64) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 32) = XPCTypeError;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AAC0);
  *(void *)(v0 + 96) = v1;
  *(void *)(v0 + 104) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 72) = XPCTypeBundle;
  *(void *)(v0 + 136) = v1;
  *(void *)(v0 + 144) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 112) = XPCTypeConnection;
  *(void *)(v0 + 176) = v1;
  *(void *)(v0 + 184) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 152) = XPCTypeEndpoint;
  *(void *)(v0 + 216) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AAC8);
  *(void *)(v0 + 224) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 192) = XPCTypeDictionary;
  *(void *)(v0 + 256) = v1;
  *(void *)(v0 + 264) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 232) = XPCTypeActivity;
  *(void *)(v0 + 296) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AAD0);
  *(void *)(v0 + 304) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 272) = XPCTypeArray;
  *(void *)(v0 + 336) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AAD8);
  *(void *)(v0 + 344) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 312) = XPCTypeBool;
  *(void *)(v0 + 376) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AAE0);
  *(void *)(v0 + 384) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 352) = XPCTypeData;
  *(void *)(v0 + 416) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AAE8);
  *(void *)(v0 + 424) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 392) = XPCTypeDate;
  *(void *)(v0 + 456) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AAF0);
  *(void *)(v0 + 464) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 432) = XPCTypeDouble;
  *(void *)(v0 + 496) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AAF8);
  *(void *)(v0 + 504) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 472) = XPCTypeFD;
  *(void *)(v0 + 536) = v1;
  *(void *)(v0 + 544) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 512) = XPCTypeFileTransfer;
  *(void *)(v0 + 576) = v1;
  *(void *)(v0 + 584) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 552) = XPCTypeMachSend;
  *(void *)(v0 + 616) = v1;
  *(void *)(v0 + 624) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 592) = XPCTypeMachRecv;
  *(void *)(v0 + 656) = v1;
  *(void *)(v0 + 664) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 632) = XPCTypePipe;
  *(void *)(v0 + 696) = v1;
  *(void *)(v0 + 704) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 672) = XPCTypePointer;
  *(void *)(v0 + 736) = v1;
  *(void *)(v0 + 744) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 712) = XPCTypeSerializer;
  *(void *)(v0 + 776) = v1;
  *(void *)(v0 + 784) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 752) = XPCTypeService;
  *(void *)(v0 + 816) = v1;
  *(void *)(v0 + 824) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 792) = XPCTypeServiceInstance;
  *(void *)(v0 + 856) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AB00);
  *(void *)(v0 + 864) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 832) = XPCTypeInt64;
  *(void *)(v0 + 896) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AB08);
  *(void *)(v0 + 904) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 872) = XPCTypeUInt64;
  *(void *)(v0 + 936) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AB10);
  *(void *)(v0 + 944) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 912) = XPCTypeString;
  *(void *)(v0 + 976) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AB18);
  *(void *)(v0 + 984) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 952) = XPCTypeUUID;
  *(void *)(v0 + 1016) = v1;
  *(void *)(v0 + 1024) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 992) = XPCTypeShmem;
  *(void *)(v0 + 1056) = __swift_instantiateConcreteTypeFromMangledName(qword_1EA83AB20);
  *(void *)(v0 + 1064) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 1032) = XPCTypeNull;
  if (qword_1EA83A4D8 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1EA83AAA0;
  unint64_t v4 = *(void *)(v0 + 16);
  unint64_t v3 = *(void *)(v0 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v0 = (uint64_t)sub_1D76E0848((void *)(v3 > 1), v4 + 1, 1, (void *)v0, &qword_1EA83AAB0, &qword_1EA83ABC8);
  }
  uint64_t v7 = v1;
  long long v8 = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)&long long v6 = v2;
  *(void *)(v0 + 16) = v4 + 1;
  sub_1D76BBC14(&v6, v0 + 40 * v4 + 32);
  return v0;
}

void *static XPCTypeDescriptor.allCases.getter()
{
  uint64_t v8 = *MEMORY[0x1E4F143C0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AAB0);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1D76FC410;
  *(void *)(v0 + 56) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AAB8);
  *(void *)(v0 + 64) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 32) = XPCTypeError;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AAC0);
  *(void *)(v0 + 96) = v1;
  *(void *)(v0 + 104) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 72) = XPCTypeBundle;
  *(void *)(v0 + 136) = v1;
  *(void *)(v0 + 144) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 112) = XPCTypeConnection;
  *(void *)(v0 + 176) = v1;
  *(void *)(v0 + 184) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 152) = XPCTypeEndpoint;
  *(void *)(v0 + 216) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AAC8);
  *(void *)(v0 + 224) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 192) = XPCTypeDictionary;
  *(void *)(v0 + 256) = v1;
  *(void *)(v0 + 264) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 232) = XPCTypeActivity;
  *(void *)(v0 + 296) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AAD0);
  *(void *)(v0 + 304) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 272) = XPCTypeArray;
  *(void *)(v0 + 336) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AAD8);
  *(void *)(v0 + 344) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 312) = XPCTypeBool;
  *(void *)(v0 + 376) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AAE0);
  *(void *)(v0 + 384) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 352) = XPCTypeData;
  *(void *)(v0 + 416) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AAE8);
  *(void *)(v0 + 424) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 392) = XPCTypeDate;
  *(void *)(v0 + 456) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AAF0);
  *(void *)(v0 + 464) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 432) = XPCTypeDouble;
  *(void *)(v0 + 496) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AAF8);
  *(void *)(v0 + 504) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 472) = XPCTypeFD;
  *(void *)(v0 + 536) = v1;
  *(void *)(v0 + 544) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 512) = XPCTypeFileTransfer;
  *(void *)(v0 + 576) = v1;
  *(void *)(v0 + 584) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 552) = XPCTypeMachSend;
  *(void *)(v0 + 616) = v1;
  *(void *)(v0 + 624) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 592) = XPCTypeMachRecv;
  *(void *)(v0 + 656) = v1;
  *(void *)(v0 + 664) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 632) = XPCTypePipe;
  *(void *)(v0 + 696) = v1;
  *(void *)(v0 + 704) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 672) = XPCTypePointer;
  *(void *)(v0 + 736) = v1;
  *(void *)(v0 + 744) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 712) = XPCTypeSerializer;
  *(void *)(v0 + 776) = v1;
  *(void *)(v0 + 784) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 752) = XPCTypeService;
  *(void *)(v0 + 816) = v1;
  *(void *)(v0 + 824) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 792) = XPCTypeServiceInstance;
  *(void *)(v0 + 856) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AB00);
  *(void *)(v0 + 864) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 832) = XPCTypeInt64;
  *(void *)(v0 + 896) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AB08);
  *(void *)(v0 + 904) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 872) = XPCTypeUInt64;
  *(void *)(v0 + 936) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AB10);
  *(void *)(v0 + 944) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 912) = XPCTypeString;
  *(void *)(v0 + 976) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AB18);
  *(void *)(v0 + 984) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 952) = XPCTypeUUID;
  *(void *)(v0 + 1016) = v1;
  *(void *)(v0 + 1024) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 992) = XPCTypeShmem;
  *(void *)(v0 + 1056) = __swift_instantiateConcreteTypeFromMangledName(qword_1EA83AB20);
  *(void *)(v0 + 1064) = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)(v0 + 1032) = XPCTypeNull;
  if (qword_1EA83A4D8 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1EA83AAA0;
  unint64_t v3 = sub_1D76E0848((void *)1, 27, 1, (void *)v0, &qword_1EA83AAB0, &qword_1EA83ABC8);
  uint64_t v6 = v1;
  uint64_t v7 = &protocol witness table for XPCTypeDescriptor<A, B>;
  *(void *)&long long v5 = v2;
  _OWORD v3[2] = 27;
  sub_1D76BBC14(&v5, (uint64_t)(v3 + 134));
  return v3;
}

void *sub_1D76DFDF4()
{
  uint64_t result = (void *)sub_1D76DFE14();
  off_1EA83AAA8 = result;
  return result;
}

uint64_t sub_1D76DFE14()
{
  uint64_t v0 = sub_1D76DF60C();
  int64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v19 = MEMORY[0x1E4FBC860];
    sub_1D76E1538(0, v1, 0);
    uint64_t v2 = v19;
    uint64_t v3 = v0 + 32;
    do
    {
      sub_1D76B116C(v3, (uint64_t)&v15);
      uint64_t v4 = v16;
      uint64_t v5 = v17;
      __swift_project_boxed_opaque_existential_1(&v15, v16);
      *(void *)&v18[0] = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
      sub_1D76BBC14(&v15, (uint64_t)v18 + 8);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v19 = v2;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1D76E1538(0, *(void *)(v2 + 16) + 1, 1);
        uint64_t v2 = v19;
      }
      unint64_t v8 = *(void *)(v2 + 16);
      unint64_t v7 = *(void *)(v2 + 24);
      if (v8 >= v7 >> 1)
      {
        sub_1D76E1538(v7 > 1, v8 + 1, 1);
        uint64_t v2 = v19;
      }
      *(void *)(v2 + 16) = v8 + 1;
      char v9 = (_OWORD *)(v2 + 48 * v8);
      long long v10 = v18[0];
      long long v11 = v18[2];
      v9[3] = v18[1];
      v9[4] = v11;
      v9[2] = v10;
      v3 += 40;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
    if (*(void *)(v2 + 16)) {
      goto LABEL_9;
    }
LABEL_11:
    uint64_t v12 = MEMORY[0x1E4FBC868];
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  if (!*(void *)(MEMORY[0x1E4FBC860] + 16)) {
    goto LABEL_11;
  }
LABEL_9:
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83ABD0);
  uint64_t v12 = sub_1D76F8604();
LABEL_12:
  *(void *)&v18[0] = v12;
  uint64_t v13 = swift_bridgeObjectRetain();
  sub_1D76E1860(v13, 1, v18);
  swift_bridgeObjectRelease();
  return *(void *)&v18[0];
}

uint64_t static XPCTypeDescriptor<>.descriptor(for:)@<X0>(xpc_type_t type@<X0>, uint64_t a2@<X8>)
{
  if (qword_1EA83A4E0 != -1) {
    swift_once();
  }
  uint64_t v4 = off_1EA83AAA8;
  if (*((void *)off_1EA83AAA8 + 2) && (unint64_t v5 = sub_1D76E0C44((uint64_t)type), (v6 & 1) != 0))
  {
    uint64_t v7 = v4[7] + 40 * v5;
    return sub_1D76B116C(v7, a2);
  }
  else
  {
    xpc_type_get_name(type);
    sub_1D76F80B4();
    sub_1D76F8464();
    sub_1D76F80A4();
    sub_1D76F8584();
    sub_1D76F80A4();
    sub_1D76F80A4();
    sub_1D76F80A4();
    uint64_t result = sub_1D76F85B4();
    __break(1u);
  }
  return result;
}

xpc_object_t XPCTypeDescriptor<>.create()()
{
  return xpc_dictionary_create(0, 0, 0);
}

char *sub_1D76E01B8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83ABF0);
      long long v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 29;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 2);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      long long v10 = (char *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (char *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32]) {
          memmove(v13, a4 + 32, 4 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_1D76E1C00(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1D76E02C8(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1D76E0848(a1, a2, a3, a4, &qword_1EBA34C78, (uint64_t *)&unk_1EBA34C80);
}

void *sub_1D76E02DC(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AA38);
      long long v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      void v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      long long v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1D76E1CEC(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1D76E0404(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F10);
      long long v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      void v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      long long v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1D76E1DDC(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1D76E0514(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83ABB8);
      long long v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      void v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      long long v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1D76E1ED0(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1D76E063C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83ABE8);
      long long v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      void v10[2] = v8;
      void v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      long long v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1D76E1FE0(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_1D76E074C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    int64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      int64_t v9 = *((void *)a4 + 2);
    }
    else {
      int64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A878);
      long long v10 = (char *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * v11 - 64;
      uint64_t v12 = v10 + 32;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32]) {
          memmove(v12, a4 + 32, v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      long long v10 = (char *)MEMORY[0x1E4FBC860];
      uint64_t v12 = (char *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1D76E20CC(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1D76E0848(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v13 = (void *)swift_allocObject();
      size_t v14 = _swift_stdlib_malloc_size(v13);
      v13[2] = v11;
      v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
      long long v15 = v13 + 4;
      if (v8)
      {
LABEL_13:
        if (v13 != a4 || v15 >= &a4[5 * v11 + 4]) {
          memmove(v15, a4 + 4, 40 * v11);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v13 = (void *)MEMORY[0x1E4FBC860];
      long long v15 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1D76E21B4(0, v11, (unint64_t)v15, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

void *sub_1D76E0978(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83ABA8);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      void v10[2] = v8;
      void v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1D76E22C0(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

unint64_t sub_1D76E0A88(uint64_t a1)
{
  sub_1D76F8594();
  uint64_t v2 = sub_1D76F7F54();

  return sub_1D76E0EF0(a1, v2);
}

unint64_t sub_1D76E0AEC(uint64_t a1)
{
  sub_1D76F7D04();
  sub_1D76E23CC((unint64_t *)&qword_1EA83A710);
  uint64_t v2 = sub_1D76F7F54();

  return sub_1D76E1088(a1, v2);
}

unint64_t sub_1D76E0B70(uint64_t a1)
{
  sub_1D76F8D24();
  sub_1D76F7D04();
  sub_1D76E23CC((unint64_t *)&qword_1EA83A710);
  sub_1D76F7F64();
  type metadata accessor for RemoteDevice.Identity();
  swift_bridgeObjectRetain();
  sub_1D76F8094();
  swift_bridgeObjectRelease();
  uint64_t v2 = sub_1D76F8D54();

  return sub_1D76E1234(a1, v2);
}

unint64_t sub_1D76E0C44(uint64_t a1)
{
  sub_1D76F8D24();
  sub_1D76F8D34();
  uint64_t v2 = sub_1D76F8D54();

  return sub_1D76E13A8(a1, v2);
}

uint64_t dispatch thunk of AnyXPCTypeDescriptor.type.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AnyXPCTypeDescriptor.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

ValueMetadata *type metadata accessor for XPCTypeRole()
{
  return &type metadata for XPCTypeRole;
}

ValueMetadata *type metadata accessor for XPCTypeRole.Scalar()
{
  return &type metadata for XPCTypeRole.Scalar;
}

ValueMetadata *type metadata accessor for XPCTypeRole.Date()
{
  return &type metadata for XPCTypeRole.Date;
}

ValueMetadata *type metadata accessor for XPCTypeRole.String()
{
  return &type metadata for XPCTypeRole.String;
}

ValueMetadata *type metadata accessor for XPCTypeRole.Reference()
{
  return &type metadata for XPCTypeRole.Reference;
}

ValueMetadata *type metadata accessor for XPCTypeRole.Array()
{
  return &type metadata for XPCTypeRole.Array;
}

ValueMetadata *type metadata accessor for XPCTypeRole.Dictionary()
{
  return &type metadata for XPCTypeRole.Dictionary;
}

ValueMetadata *type metadata accessor for XPCTypeRole.Error()
{
  return &type metadata for XPCTypeRole.Error;
}

ValueMetadata *type metadata accessor for XPCTypeRole.UUID()
{
  return &type metadata for XPCTypeRole.UUID;
}

ValueMetadata *type metadata accessor for XPCTypeRole.Null()
{
  return &type metadata for XPCTypeRole.Null;
}

uint64_t sub_1D76E0D78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 24);
}

uint64_t sub_1D76E0D80(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 != 1 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)a1) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t sub_1D76E0DC4(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)uint64_t result = a2 - 2;
    if (a3 >= 2) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 2) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for XPCTypeDescriptor()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t sub_1D76E0E18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1D76F8D24();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBA33E50);
  sub_1D76F8044();
  sub_1D76F8094();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1D76F8094();
  swift_bridgeObjectRelease();
  uint64_t v8 = sub_1D76F8D54();
  return sub_1D76E1444(a1, a2, a3, a4, v8);
}

unint64_t sub_1D76E0EF0(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = a1;
  uint64_t v4 = sub_1D76F8594();
  MEMORY[0x1F4188788](v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  uint64_t v20 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v11 = v5 + 16;
    uint64_t v12 = v13;
    uint64_t v14 = *(void *)(v11 + 56);
    long long v15 = (void (**)(char *, uint64_t))(v11 - 8);
    do
    {
      uint64_t v16 = v11;
      v12(v7, *(void *)(v22 + 48) + v14 * v9, v4);
      char v17 = sub_1D76F7F94();
      (*v15)(v7, v4);
      if (v17) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
      uint64_t v11 = v16;
    }
    while (((*(void *)(v20 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

unint64_t sub_1D76E1088(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a1;
  uint64_t v4 = sub_1D76F7D04();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188788](v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  uint64_t v18 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    uint64_t v11 = v13;
    uint64_t v14 = *(void *)(v12 + 56);
    do
    {
      v11(v7, *(void *)(v20 + 48) + v14 * v9, v4);
      sub_1D76E23CC(&qword_1EA83ABB0);
      char v15 = sub_1D76F7F94();
      (*(void (**)(char *, uint64_t))(v12 - 8))(v7, v4);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v18 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

unint64_t sub_1D76E1234(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for RemoteDevice.Identity();
  MEMORY[0x1F4188788](v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v10 = a2 & ~v9;
  if ((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v6 + 72);
    while (1)
    {
      sub_1D76E2478(*(void *)(v2 + 48) + v12 * v10, (uint64_t)v8);
      if (sub_1D76F7CC4())
      {
        uint64_t v13 = *(int *)(v5 + 20);
        uint64_t v14 = *(void *)&v8[v13];
        uint64_t v15 = *(void *)&v8[v13 + 8];
        uint64_t v16 = (void *)(a1 + v13);
        BOOL v17 = v14 == *v16 && v15 == v16[1];
        if (v17 || (sub_1D76F89E4() & 1) != 0) {
          break;
        }
      }
      sub_1D76B2AF8((uint64_t)v8);
      unint64_t v10 = (v10 + 1) & v11;
      if (((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        return v10;
      }
    }
    sub_1D76B2AF8((uint64_t)v8);
  }
  return v10;
}

unint64_t sub_1D76E13A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_1D76E1444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = a5 & ~v7;
  if ((*(void *)(v5 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
  {
    uint64_t v12 = ~v7;
    uint64_t v13 = *(void *)(v5 + 48);
    do
    {
      uint64_t v14 = (void *)(v13 + 32 * v8);
      if (*v14 == a1)
      {
        BOOL v15 = v14[2] == a3 && v14[3] == a4;
        if (v15 || (sub_1D76F89E4() & 1) != 0) {
          break;
        }
      }
      unint64_t v8 = (v8 + 1) & v12;
    }
    while (((*(void *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  return v8;
}

uint64_t sub_1D76E1518(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1D76E1558(a1, a2, a3, *v3);
  *int v3 = (char *)result;
  return result;
}

uint64_t sub_1D76E1538(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1D76E16B8(a1, a2, a3, (void *)*v3);
  *int v3 = result;
  return result;
}

uint64_t sub_1D76E1558(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83ABE8);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_1D76F8614();
  __break(1u);
  return result;
}

uint64_t sub_1D76E16B8(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83ABE0);
    unint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    void v10[2] = v8;
    void v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    unint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 48 * v8) {
      memmove(v10 + 4, a4 + 4, 48 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 48 * v8 || v12 >= v13 + 48 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83ABD8);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_1D76F8614();
  __break(1u);
  return result;
}

void sub_1D76E1860(uint64_t a1, char a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  sub_1D76E2410(a1 + 32, (uint64_t)&v38);
  uint64_t v7 = v38;
  uint64_t v40 = v38;
  sub_1D76BBC14(v39, (uint64_t)v37);
  uint64_t v8 = (void *)*a3;
  unint64_t v10 = sub_1D76E0C44(v7);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12)) {
    goto LABEL_23;
  }
  char v14 = v9;
  if (v8[3] >= v13)
  {
    if (a2)
    {
      if (v9) {
        goto LABEL_10;
      }
    }
    else
    {
      sub_1D76F654C();
      if (v14) {
        goto LABEL_10;
      }
    }
LABEL_13:
    uint64_t v19 = (void *)*a3;
    *(void *)(*a3 + 8 * (v10 >> 6) + 64) |= 1 << v10;
    *(void *)(v19[6] + 8 * v10) = v7;
    sub_1D76BBC14(v37, v19[7] + 40 * v10);
    uint64_t v20 = v19[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v19[2] = v22;
    uint64_t v23 = v4 - 1;
    if (!v23)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    uint64_t v24 = a1 + 80;
    while (1)
    {
      sub_1D76E2410(v24, (uint64_t)&v38);
      uint64_t v25 = v38;
      uint64_t v40 = v38;
      sub_1D76BBC14(v39, (uint64_t)v37);
      unint64_t v26 = (void *)*a3;
      unint64_t v27 = sub_1D76E0C44(v25);
      uint64_t v29 = v26[2];
      BOOL v30 = (v28 & 1) == 0;
      BOOL v21 = __OFADD__(v29, v30);
      uint64_t v31 = v29 + v30;
      if (v21) {
        break;
      }
      char v32 = v28;
      if (v26[3] < v31)
      {
        sub_1D76F57F0(v31, 1);
        unint64_t v27 = sub_1D76E0C44(v25);
        if ((v32 & 1) != (v33 & 1)) {
          goto LABEL_25;
        }
      }
      if (v32) {
        goto LABEL_10;
      }
      uint64_t v34 = (void *)*a3;
      *(void *)(*a3 + 8 * (v27 >> 6) + 64) |= 1 << v27;
      *(void *)(v34[6] + 8 * v27) = v25;
      sub_1D76BBC14(v37, v34[7] + 40 * v27);
      uint64_t v35 = v34[2];
      BOOL v21 = __OFADD__(v35, 1);
      uint64_t v36 = v35 + 1;
      if (v21) {
        goto LABEL_24;
      }
      long long v34[2] = v36;
      v24 += 48;
      if (!--v23) {
        goto LABEL_22;
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_1D76F57F0(v13, a2 & 1);
  unint64_t v15 = sub_1D76E0C44(v7);
  if ((v14 & 1) == (v16 & 1))
  {
    unint64_t v10 = v15;
    if ((v14 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    BOOL v17 = (void *)swift_allocError();
    swift_willThrow();
    id v18 = v17;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F40);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v37);
      swift_bridgeObjectRelease();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  sub_1D76F8C84();
  __break(1u);
LABEL_26:
  sub_1D76F8464();
  sub_1D76F80A4();
  sub_1D76F8584();
  sub_1D76F80A4();
  sub_1D76F85B4();
  __break(1u);
}

char *sub_1D76E1C00(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 4 * a1 + 32);
    size_t v6 = 4 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)sub_1D76F8614();
  __break(1u);
  return result;
}

char *sub_1D76E1CEC(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 24 * a1 + 32);
    size_t v6 = 24 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)sub_1D76F8614();
  __break(1u);
  return result;
}

uint64_t sub_1D76E1DDC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1D76F8614();
  __break(1u);
  return result;
}

uint64_t sub_1D76E1ED0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83ABC0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1D76F8614();
  __break(1u);
  return result;
}

char *sub_1D76E1FE0(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)sub_1D76F8614();
  __break(1u);
  return result;
}

char *sub_1D76E20CC(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + a1 + 32);
    size_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  uint64_t result = (char *)sub_1D76F8614();
  __break(1u);
  return result;
}

uint64_t sub_1D76E21B4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 40 * a1 + 32;
    unint64_t v7 = a3 + 40 * v5;
    if (v6 >= v7 || v6 + 40 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = sub_1D76F8614();
  __break(1u);
  return result;
}

uint64_t sub_1D76E22C0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F40);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1D76F8614();
  __break(1u);
  return result;
}

uint64_t sub_1D76E23CC(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1D76F7D04();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D76E2410(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83ABD8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D76E2478(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RemoteDevice.Identity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t MachError.init(uncheckedCode:userInfo:)@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_1D76F7D74();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t result = MEMORY[0x1F4188788](v4);
  uint64_t v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v9 = sub_1D76F7DC4();
    if ((v9 & 0x100000000) != 0)
    {
      sub_1D76F7FF4();
      id v10 = objc_allocWithZone(MEMORY[0x1E4F28C58]);
      uint64_t v11 = (void *)sub_1D76F7FC4();
      swift_bridgeObjectRelease();
      BOOL v12 = (void *)sub_1D76F7EC4();
      swift_bridgeObjectRelease();
      id v13 = objc_msgSend(v10, sel_initWithDomain_code_userInfo_, v11, a1, v12);

      id v15 = v13;
      sub_1D76E26B8();
      swift_dynamicCast();
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v8, v4);
    }
    else
    {
      v14[1] = v9;
      sub_1D76E26F8();
      return sub_1D76F7B74();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_1D76E26B8()
{
  unint64_t result = qword_1EA83A778;
  if (!qword_1EA83A778)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EA83A778);
  }
  return result;
}

unint64_t sub_1D76E26F8()
{
  unint64_t result = qword_1EA83ABF8;
  if (!qword_1EA83ABF8)
  {
    sub_1D76F7D74();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83ABF8);
  }
  return result;
}

uint64_t MachError.errorCodeComponents.getter()
{
  sub_1D76F7D74();
  sub_1D76E26F8();
  uint64_t v0 = sub_1D76F7B64();
  if (v0 == (int)v0) {
    return v0 >> 26;
  }
  else {
    return 0;
  }
}

void *static SystemXPCConnection.unsafePeer(from:)(uint64_t a1)
{
  type metadata accessor for SystemXPCPeerConnection();
  uint64_t v2 = (void *)swift_allocObject();
  v2[4] = 0;
  v2[5] = 0;
  v2[2] = MEMORY[0x1E4FBC860];
  v2[3] = a1;
  swift_unknownObjectRetain();
  return v2;
}

uint64_t type metadata accessor for SystemXPCPeerConnection()
{
  return self;
}

uint64_t sub_1D76E2840(void *a1, char a2, uint64_t a3)
{
  if (MEMORY[0x1D94771B0](a3) == XPCTypeDictionary)
  {
    uint64_t result = sub_1D76BE754(a1, a2 & 1);
    if (!v3)
    {
      uint64_t v11 = (void *)result;
      if (MEMORY[0x1D94771B0]() == XPCTypeDictionary)
      {
        uint64_t v15 = swift_allocObject();
        *(void *)(v15 + 16) = a3;
        uint64_t v16 = swift_allocObject();
        *(void *)(v16 + 16) = sub_1D76E68F0;
        *(void *)(v16 + 24) = v15;
        void v19[4] = sub_1D76C874C;
        v19[5] = v16;
        v19[0] = MEMORY[0x1E4F143A0];
        v19[1] = 1107296256;
        v19[2] = sub_1D769E44C;
        v19[3] = &block_descriptor_114;
        BOOL v17 = _Block_copy(v19);
        swift_unknownObjectRetain();
        swift_retain();
        swift_release();
        xpc_dictionary_apply(v11, v17);
        swift_unknownObjectRelease();
        _Block_release(v17);
        char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
        swift_release();
        uint64_t result = swift_release();
        if (isEscapingClosureAtFileLocation) {
          __break(1u);
        }
      }
      else
      {
        uint64_t v12 = sub_1D76F8524();
        swift_allocError();
        char v14 = v13;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A8C0);
        void v14[3] = swift_getObjectType();
        *char v14 = a3;
        swift_unknownObjectRetain();
        sub_1D76F84E4();
        (*(void (**)(void *, void, uint64_t))(*(void *)(v12 - 8) + 104))(v14, *MEMORY[0x1E4FBBAA0], v12);
        swift_willThrow();
        return swift_unknownObjectRelease();
      }
    }
  }
  else
  {
    uint64_t v7 = sub_1D76F8524();
    swift_allocError();
    uint64_t v9 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A8C0);
    v9[3] = swift_getObjectType();
    *uint64_t v9 = a3;
    swift_unknownObjectRetain();
    sub_1D76F84E4();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v7 - 8) + 104))(v9, *MEMORY[0x1E4FBBAA0], v7);
    return swift_willThrow();
  }
  return result;
}

void sub_1D76E2B8C(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>)
{
  void (*v39)(long long *__return_ptr, long long *);
  id v40;
  void *v41;
  id v42;
  xpc_object_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  long long v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  long long v62;
  uint64_t v63;

  uint64_t v10 = v9;
  uint64_t v49 = (uint64_t *)(v10 + 16);
  swift_beginAccess();
  uint64_t v57 = a1;
  uint64_t v52 = a7;
  uint64_t v53 = a8;
  if ((*(unsigned char *)(v10 + 80) & 1) == 0)
  {
    uint64_t v48 = a5;
    uint64_t v18 = *(void *)(v10 + 16);
    uint64_t v19 = *(void *)(v10 + 48);
    uint64_t v20 = *(void *)(v10 + 64);
    uint64_t v21 = *(void *)(v10 + 88);
    *(void *)&uint64_t v58 = a1;
    uint64_t v46 = v18;
    sub_1D76D1E88(v18);
    sub_1D76D04A8(v19);
    sub_1D76D04A8(v20);
    uint64_t v56 = v21;
    swift_retain();
    swift_retain();
    id v22 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F40);
    if (swift_dynamicCast())
    {
      sub_1D76CCEA4(v46);
      sub_1D76CCEE8(v19);
      sub_1D76CCEE8(v20);
      swift_release();
      swift_release();
      a7 = v52;
      a8 = v53;
      a5 = v48;
      if ((v62 & 1) == 0)
      {
LABEL_8:
        char v24 = 0;
LABEL_25:
        *a9 = v24;
        return;
      }
    }
    else
    {
      sub_1D76CCEA4(v46);
      sub_1D76CCEE8(v19);
      sub_1D76CCEE8(v20);
      swift_release();
      swift_release();
      a7 = v52;
      a8 = v53;
      a5 = v48;
    }
  }
  *(void *)&uint64_t v58 = a1;
  id v23 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F40);
  if (swift_dynamicCast() & 1) != 0 && (v62) {
    goto LABEL_8;
  }
  if (!a6)
  {
    if (a3)
    {
      uint64_t v38 = a3;
      uint64_t v39 = *(void (**)(long long *__return_ptr, long long *))(v10 + 16);
      if (!v39) {
        goto LABEL_33;
      }
      uint64_t v45 = *(void *)(v10 + 48);
      uint64_t v47 = *(void *)(v10 + 64);
      *(void *)&uint64_t v62 = v38;
      *((void *)&v62 + 1) = a4;
      uint64_t v63 = a5;
      uint64_t v40 = a1;
      sub_1D76D1ECC(v38);
      sub_1D76D1E88((uint64_t)v39);
      sub_1D76D04A8(v45);
      sub_1D76D04A8(v47);
      swift_retain();
      swift_retain();
      sub_1D76D1E88((uint64_t)v39);
      v39(&v58, &v62);
      sub_1D76CCEA4((uint64_t)v39);
      uint64_t v56 = v58;
      if ((void)v58)
      {
        unint64_t v54 = v59;
        uint64_t v55 = *((void *)&v58 + 1);
        sub_1D76CCEA4((uint64_t)v39);
        sub_1D76CCEE8(v45);
        sub_1D76CCEE8(v47);
        swift_release();
        swift_release();
        sub_1D76E6860(v38, a4, a5, MEMORY[0x1E4FBC8F8], MEMORY[0x1E4FBC898]);
        goto LABEL_11;
      }
      sub_1D76CCEA4((uint64_t)v39);
      sub_1D76CCEE8(v45);
      sub_1D76CCEE8(v47);
      swift_release();
      swift_release();
      sub_1D76E6860(v38, a4, a5, MEMORY[0x1E4FBC8F8], MEMORY[0x1E4FBC898]);
    }
    else
    {
      uint64_t v42 = a1;
      uint64_t v43 = xpc_dictionary_create(0, 0, 0);
      if (v43)
      {
        uint64_t v55 = 0xD000000000000019;
        uint64_t v56 = (uint64_t)v43;
        unint64_t v54 = 0x80000001D76FD660;
        goto LABEL_11;
      }
    }
    sub_1D76F82B4();
    sub_1D76BBA90(0, (unint64_t *)&qword_1EA83A920);
    uint64_t v44 = (void *)sub_1D76F8394();
    sub_1D76F7D84();

    sub_1D76DCEA0(a2, (uint64_t)&v58);
    if (v60)
    {
      sub_1D76DCF08(&v58, &v62);
      uint64_t v33 = *(void *)(v10 + 16);
      uint64_t v34 = *(void *)(v10 + 48);
      uint64_t v36 = a1;
      uint64_t v35 = *(void (**)(long long *, long long *))(v10 + 64);
      goto LABEL_14;
    }
    id v41 = a1;
LABEL_21:

    sub_1D769AC0C((uint64_t)&v58, &qword_1EA83AC30);
LABEL_24:
    char v24 = 1;
    goto LABEL_25;
  }
  id v25 = a1;
  uint64_t v55 = a7;
  uint64_t v56 = a6;
  unint64_t v54 = a8;
LABEL_11:
  uint64_t v26 = *(void *)(v10 + 16);
  uint64_t v27 = *(void *)(v10 + 48);
  uint64_t v28 = *(void *)(v10 + 64);
  id v29 = a1;
  sub_1D76D1ECC(a6);
  sub_1D76D1E88(v26);
  sub_1D76D04A8(v27);
  sub_1D76D04A8(v28);
  swift_retain();
  swift_retain();
  a6 = v54;
  sub_1D76D1ECC(v56);
  a8 = 0;
  sub_1D76E2840(a1, 0, v56);
  sub_1D76E6860(v56, v55, v54, MEMORY[0x1E4FBC8F8], MEMORY[0x1E4FBC898]);

  sub_1D76CCEA4(v26);
  sub_1D76CCEE8(v27);
  sub_1D76CCEE8(v28);
  swift_release();
  swift_release();
  a7 = *v49;
  if (*v49)
  {
    uint64_t v30 = *(void *)(v10 + 64);
    uint64_t v31 = *(void *)(v10 + 48);
    char v32 = *(void (**)(long long *))(v10 + 32);
    *(void *)&uint64_t v58 = v56;
    *((void *)&v58 + 1) = v55;
    uint64_t v59 = v54;
    sub_1D76D1E88(a7);
    sub_1D76D04A8(v31);
    sub_1D76D04A8(v30);
    swift_retain();
    swift_retain();
    sub_1D76D1E88(a7);
    v32(&v58);
    sub_1D76CCEA4(a7);
    sub_1D76CCEA4(a7);
    sub_1D76CCEE8(v31);
    sub_1D76CCEE8(v30);
    swift_release();
    swift_release();
    sub_1D76E6860(v56, v55, v54, MEMORY[0x1E4FBC8F8], MEMORY[0x1E4FBC898]);
    sub_1D76DCEA0(a2, (uint64_t)&v58);
    if (v60)
    {
      sub_1D76DCF08(&v58, &v62);
      uint64_t v33 = *(void *)(v10 + 16);
      uint64_t v34 = *(void *)(v10 + 48);
      uint64_t v35 = *(void (**)(long long *, long long *))(v10 + 64);
      uint64_t v36 = v57;
LABEL_14:
      *(void *)&uint64_t v58 = v36;
      uint64_t v61 = 1;
      id v37 = v36;
      sub_1D76D1E88(v33);
      sub_1D76D04A8(v34);
      if (v35)
      {
        sub_1D76D04A8((uint64_t)v35);
        swift_retain();
        swift_retain();
        v35(&v62, &v58);
      }
      else
      {
        sub_1D76D04A8(0);
        swift_retain();
        swift_retain();
      }
      sub_1D769AC0C((uint64_t)&v58, (uint64_t *)&unk_1EBA33F50);
      sub_1D76CCEA4(v33);
      sub_1D76CCEE8(v34);
      sub_1D76CCEE8((uint64_t)v35);
      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v62);

      goto LABEL_24;
    }
    id v41 = a1;
    goto LABEL_21;
  }
  __break(1u);
LABEL_33:
  __break(1u);
  sub_1D76E6860(v56, a7, a6, MEMORY[0x1E4FBC8F8], MEMORY[0x1E4FBC898]);
  *(void *)&uint64_t v58 = 0;
  *((void *)&v58 + 1) = 0xE000000000000000;
  sub_1D76F8464();
  sub_1D76F80A4();
  *(void *)&uint64_t v62 = a8;
  sub_1D76F8584();
  sub_1D76F85B4();
  __break(1u);
}

void sub_1D76E3524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v29 = a1;
  uint64_t v30 = a2;
  uint64_t v31 = a3;
  *(unsigned char *)(v5 + 104) = 1;
  swift_beginAccess();
  uint64_t v7 = *(void *)(v5 + 16);
  uint64_t v8 = *(void *)(v5 + 48);
  uint64_t v9 = *(void *)(v5 + 64);
  sub_1D76D1E88(v7);
  sub_1D76D04A8(v8);
  sub_1D76D04A8(v9);
  swift_retain();
  swift_retain();
  sub_1D76BEA74(a1, (uint64_t *)v27);
  swift_bridgeObjectRelease();
  sub_1D76CCEA4(v7);
  sub_1D76CCEE8(v8);
  sub_1D76CCEE8(v9);
  swift_release();
  swift_release();
  uint64_t v10 = *(void *)(v5 + 16);
  uint64_t v11 = *(void *)(v5 + 48);
  uint64_t v12 = *(void *)(v5 + 64);
  sub_1D76D1E88(v10);
  sub_1D76D04A8(v11);
  sub_1D76D04A8(v12);
  swift_retain();
  swift_retain();
  sub_1D76BEA74(a1, (uint64_t *)v27);
  sub_1D76CCEA4(v10);
  sub_1D76CCEE8(v11);
  sub_1D76CCEE8(v12);
  swift_release();
  swift_release();
  long long v13 = v27[0];
  swift_beginAccess();
  uint64_t v14 = *(void *)(v5 + 112);
  if (*(void *)(v14 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v15 = sub_1D769B2B0(v13, *((uint64_t *)&v13 + 1));
    uint64_t v16 = (void (*)(_OWORD *))a4;
    if (v17)
    {
      uint64_t v18 = *(void (**)(uint64_t *))(*(void *)(v14 + 56) + 16 * v15);
      swift_retain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v19 = swift_allocObject();
      *(void *)(v19 + 16) = a4;
      *(void *)(v19 + 24) = a5;
      swift_retain();
      sub_1D76D04A8(a4);
      v18(&v29);
      swift_release_n();
      swift_release();
      return;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v16 = (void (*)(_OWORD *))a4;
  }
  sub_1D76DA49C();
  uint64_t v20 = (void *)swift_allocError();
  *uint64_t v21 = 0;
  swift_willThrow();
  uint64_t v22 = v29;
  uint64_t v23 = v30;
  uint64_t v24 = v31;
  memset(v27, 0, sizeof(v27));
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  sub_1D76E2B8C(v20, (uint64_t)v27, v22, v23, v24, 0, 0, 0, v28);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  sub_1D769AC0C((uint64_t)v27, &qword_1EA83AC30);
  if (v16)
  {
    LOBYTE(v27[0]) = v28[0];
    v16(v27);
  }
}

void sub_1D76E3950()
{
  xpc_connection_activate(*(xpc_connection_t *)(v0 + 24));
}

void sub_1D76E3958(xpc_object_t *a1)
{
  xpc_connection_send_message(*(xpc_connection_t *)(v1 + 24), *a1);
}

void sub_1D76E3964(xpc_object_t *a1)
{
  xpc_connection_send_message_with_reply_sync(*(xpc_connection_t *)(v1 + 24), *a1);
  swift_unknownObjectRetain();
  swift_retain();
  sub_1D76ECDC8();
}

uint64_t sub_1D76E39B8()
{
  if (v6)
  {
    sub_1D76B10C8();
    swift_bridgeObjectRetain();
    swift_willThrowTypedImpl();
    swift_allocError();
    uint64_t *v1 = v3;
    v1[1] = v4;
    swift_unknownObjectRelease();
    return sub_1D76CDED8(v3, v4, v5, 1);
  }
  else
  {
    uint64_t result = swift_unknownObjectRelease();
    *uint64_t v0 = v3;
    v0[1] = v4;
    v0[2] = v5;
  }
  return result;
}

uint64_t sub_1D76E3A5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  v17[2] = a3;
  uint64_t v18 = a1;
  v17[1] = a4;
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188788](a1);
  uint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for MessageWrapper();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188788](v9);
  uint64_t v12 = (void *)((char *)v17 - v11);
  type metadata accessor for XPCObjectEncoder();
  *(void *)(swift_initStackObject() + 16) = v4;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v18, a2);
  uint64_t v18 = v4;
  swift_retain();
  MessageWrapper.init(value:)((uint64_t)v8, a2, v12);
  swift_getWitnessTable();
  xpc_object_t v13 = v19[7];
  uint64_t v14 = XPCObjectEncoder.encode<A>(_:)((uint64_t)v12, v9);
  if (!v13)
  {
    uint64_t v16 = (void *)v14;
    (*(void (**)(uint64_t *, uint64_t))(v10 + 8))(v12, v9);
    swift_setDeallocating();
    swift_release();
    v19[0] = v16;
    v19[1] = (xpc_object_t)0xD000000000000019;
    v19[2] = (xpc_object_t)0x80000001D76FD660;
    swift_unknownObjectRetain();
    sub_1D76E3964(v19);
  }
  (*(void (**)(uint64_t *, uint64_t))(v10 + 8))(v12, v9);
  swift_setDeallocating();
  return swift_release();
}

uint64_t sub_1D76E3CD8(void **a1, NSObject *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v9 = *a1;
  swift_weakInit();
  uint64_t v10 = *(_xpc_connection_s **)(v5 + 24);
  uint64_t v11 = swift_allocObject();
  swift_beginAccess();
  swift_weakLoadStrong();
  swift_weakInit();
  swift_release();
  uint64_t v12 = (void *)swift_allocObject();
  void v12[2] = a3;
  uint64_t v12[3] = a4;
  v12[4] = v11;
  void v15[4] = sub_1D76E3F68;
  void v15[5] = v12;
  v15[0] = MEMORY[0x1E4F143A0];
  v15[1] = 1107296256;
  v15[2] = sub_1D76CE6E0;
  void v15[3] = &block_descriptor_6;
  xpc_object_t v13 = _Block_copy(v15);
  swift_retain();
  swift_release();
  xpc_connection_send_message_with_reply(v10, v9, a2, v13);
  _Block_release(v13);
  return swift_weakDestroy();
}

uint64_t sub_1D76E3E40()
{
  swift_weakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

void sub_1D76E3E78()
{
}

uint64_t sub_1D76E3ED8()
{
  uint64_t v1 = v8;
  uint64_t v2 = v9;
  uint64_t v3 = v10;
  char v4 = v11;
  v6[0] = v8;
  v6[1] = v9;
  void v6[2] = v10;
  char v7 = v11;
  v0(v6);
  return sub_1D76CDED8(v1, v2, v3, v4);
}

uint64_t sub_1D76E3F28()
{
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

void sub_1D76E3F68()
{
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

void sub_1D76E3F8C(dispatch_queue_t targetq)
{
  xpc_connection_set_target_queue(*(xpc_connection_t *)(v1 + 24), targetq);
}

void sub_1D76E3F98()
{
  xpc_connection_cancel(*(xpc_connection_t *)(v0 + 24));
}

void SystemXPCConnection.__allocating_init()()
{
}

void SystemXPCConnection.init()()
{
}

uint64_t sub_1D76E4000()
{
  return swift_unknownObjectRelease();
}

uint64_t SystemXPCConnection.deinit()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t SystemXPCConnection.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186488](v0, 32, 7);
}

void sub_1D76E4070(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2[4];
  v2[4] = a1;
  v2[5] = a2;
  swift_retain();
  sub_1D76CCEE8(v3);
  char v4 = (_xpc_connection_s *)v2[3];
  uint64_t v5 = swift_allocObject();
  swift_weakInit();
  void v7[4] = sub_1D76E4354;
  void v7[5] = v5;
  v7[0] = MEMORY[0x1E4F143A0];
  v7[1] = 1107296256;
  v7[2] = sub_1D76CE6E0;
  v7[3] = &block_descriptor_9_0;
  uint64_t v6 = _Block_copy(v7);
  swift_release();
  xpc_connection_set_event_handler(v4, v6);
  _Block_release(v6);
}

uint64_t sub_1D76E4160()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (*(void *)(result + 32))
    {
      swift_getObjectType();
      swift_retain();
      OS_xpc_object.type.getter();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1D76E4354()
{
  return sub_1D76E4160();
}

uint64_t SystemXPCListenerConnection.deinit()
{
  return sub_1D76E4C74((void (*)(void, void))sub_1D76E6944);
}

uint64_t SystemXPCListenerConnection.__deallocating_deinit()
{
  return sub_1D76E4CCC((void (*)(void, void))sub_1D76E6944);
}

void sub_1D76E4390(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = v2[4];
  void v3[4] = a1;
  v3[5] = a2;
  swift_retain();
  sub_1D76CCEE8(v6);
  char v7 = (_xpc_connection_s *)v3[3];
  uint64_t v8 = swift_allocObject();
  swift_weakInit();
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = v8;
  v9[3] = a1;
  v9[4] = a2;
  void v11[4] = sub_1D76E4A0C;
  void v11[5] = v9;
  v11[0] = MEMORY[0x1E4F143A0];
  v11[1] = 1107296256;
  void v11[2] = sub_1D76CE6E0;
  void v11[3] = &block_descriptor_18;
  uint64_t v10 = _Block_copy(v11);
  swift_retain();
  swift_release();
  xpc_connection_set_event_handler(v7, v10);
  _Block_release(v10);
}

uint64_t sub_1D76E44C0(void *a1)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    swift_unknownObjectRetain();
    sub_1D76ECDC8();
  }
  uint64_t v3 = (const char *)Strong;
  uint64_t v4 = XPCTypeDictionary;
  if (v4 != MEMORY[0x1D94771B0](a1)
    || (uint64_t v5 = type metadata accessor for XPCSideChannel(),
        swift_unknownObjectRetain(),
        swift_retain(),
        LOBYTE(v5) = sub_1D76E5AE4(a1, 0xD000000000000019, 0x80000001D76FD660, v3, v5),
        swift_bridgeObjectRelease(),
        swift_unknownObjectRelease(),
        swift_release(),
        (v5 & 1) == 0))
  {
    swift_unknownObjectRetain();
    swift_retain();
    sub_1D769C348(MEMORY[0x1E4FBC860]);
    XPCError.init(_:from:userInfo:)();
  }
  return swift_release();
}

uint64_t sub_1D76E4A0C(void *a1)
{
  return sub_1D76E44C0(a1);
}

unsigned char *sub_1D76E4A18(unsigned char *result)
{
  if ((*result & 1) == 0)
  {
    swift_unknownObjectRetain();
    swift_retain();
    sub_1D76ECDC8();
  }
  return result;
}

void sub_1D76E4ABC()
{
  if (!*(void *)(v0 + 32))
  {
    *(void *)(v0 + 32) = nullsub_1;
    *(void *)(v0 + 40) = 0;
    sub_1D76CCEE8(0);
    uint64_t v1 = *(_xpc_connection_s **)(v0 + 24);
    uint64_t v2 = swift_allocObject();
    swift_weakInit();
    uint64_t v3 = (void *)swift_allocObject();
    _OWORD v3[2] = v2;
    v3[3] = nullsub_1;
    void v3[4] = 0;
    v5[4] = sub_1D76E6940;
    v5[5] = v3;
    v5[0] = MEMORY[0x1E4F143A0];
    v5[1] = 1107296256;
    void v5[2] = sub_1D76CE6E0;
    void v5[3] = &block_descriptor_26_0;
    uint64_t v4 = _Block_copy(v5);
    swift_release();
    xpc_connection_set_event_handler(v1, v4);
    _Block_release(v4);
  }
  xpc_connection_activate(*(xpc_connection_t *)(v0 + 24));
}

uint64_t objectdestroy_14Tm()
{
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

const char *sub_1D76E4C24()
{
  uint64_t result = xpc_connection_get_name(*(xpc_connection_t *)(v0 + 24));
  if (result) {
    return (const char *)sub_1D76F80B4();
  }
  return result;
}

uint64_t sub_1D76E4C54()
{
  return sub_1D76CCEE8(*(void *)(v0 + 32));
}

uint64_t SystemXPCPeerConnection.deinit()
{
  return sub_1D76E4C74((void (*)(void, void))sub_1D76CCEE8);
}

uint64_t sub_1D76E4C74(void (*a1)(void, void))
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  a1(*(void *)(v1 + 32), *(void *)(v1 + 40));
  return v1;
}

uint64_t SystemXPCPeerConnection.__deallocating_deinit()
{
  return sub_1D76E4CCC((void (*)(void, void))sub_1D76CCEE8);
}

uint64_t sub_1D76E4CCC(void (*a1)(void, void))
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  a1(*(void *)(v1 + 32), *(void *)(v1 + 40));

  return MEMORY[0x1F4186488](v1, 48, 7);
}

void *static SystemXPCConnection.anonymousListenerConnection(targetQueue:)(dispatch_queue_t targetq)
{
  xpc_connection_t v1 = xpc_connection_create(0, targetq);
  type metadata accessor for SystemXPCListenerConnection();
  uint64_t result = (void *)swift_allocObject();
  result[4] = 0;
  result[5] = 0;
  result[2] = MEMORY[0x1E4FBC860];
  result[3] = v1;
  return result;
}

uint64_t type metadata accessor for SystemXPCListenerConnection()
{
  return self;
}

void *static SystemXPCConnection.machServiceListenerConnection(name:targetQueue:)(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v4 = sub_1D76F8054();
  xpc_connection_t mach_service = xpc_connection_create_mach_service((const char *)(v4 + 32), a3, 1uLL);
  swift_release();
  type metadata accessor for SystemXPCListenerConnection();
  uint64_t result = (void *)swift_allocObject();
  result[4] = 0;
  result[5] = 0;
  result[2] = MEMORY[0x1E4FBC860];
  result[3] = mach_service;
  return result;
}

void *static SystemXPCConnection.connectionToMachService(name:privilegedService:targetQueue:)(uint64_t a1, uint64_t a2, char a3, NSObject *a4)
{
  if (a3) {
    uint64_t v5 = 2;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = sub_1D76F8054();
  xpc_connection_t mach_service = xpc_connection_create_mach_service((const char *)(v6 + 32), a4, v5);
  swift_release();
  type metadata accessor for SystemXPCPeerConnection();
  uint64_t result = (void *)swift_allocObject();
  result[4] = 0;
  result[5] = 0;
  result[2] = MEMORY[0x1E4FBC860];
  result[3] = mach_service;
  return result;
}

void *static SystemXPCConnection.xpcServiceConnection(name:targetQueue:)(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v4 = sub_1D76F8054();
  xpc_connection_t v5 = xpc_connection_create((const char *)(v4 + 32), a3);
  swift_release();
  type metadata accessor for SystemXPCPeerConnection();
  uint64_t result = (void *)swift_allocObject();
  result[4] = 0;
  result[5] = 0;
  result[2] = MEMORY[0x1E4FBC860];
  result[3] = v5;
  return result;
}

void *static SystemXPCConnection.unsafeListener(from:)(uint64_t a1)
{
  type metadata accessor for SystemXPCListenerConnection();
  uint64_t v2 = (void *)swift_allocObject();
  v2[4] = 0;
  v2[5] = 0;
  v2[2] = MEMORY[0x1E4FBC860];
  v2[3] = a1;
  swift_unknownObjectRetain();
  return v2;
}

void *XPCPeerEndpoint.createConnection()()
{
  swift_getObjectType();
  xpc_connection_t v0 = OS_xpc_object.createConnection()();
  type metadata accessor for SystemXPCPeerConnection();
  uint64_t result = (void *)swift_allocObject();
  result[4] = 0;
  result[5] = 0;
  result[2] = MEMORY[0x1E4FBC860];
  result[3] = v0;
  return result;
}

void *XPCListenerEndpoint.createConnection()()
{
  swift_getObjectType();
  xpc_connection_t v0 = OS_xpc_object.createConnection()();
  type metadata accessor for SystemXPCListenerConnection();
  uint64_t result = (void *)swift_allocObject();
  result[4] = 0;
  result[5] = 0;
  result[2] = MEMORY[0x1E4FBC860];
  result[3] = v0;
  return result;
}

uint64_t type metadata accessor for SystemXPCConnection()
{
  return self;
}

uint64_t method lookup function for SystemXPCConnection(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SystemXPCConnection);
}

uint64_t dispatch thunk of SystemXPCConnection.sendSync<A>(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t method lookup function for SystemXPCListenerConnection(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SystemXPCListenerConnection);
}

uint64_t dispatch thunk of SystemXPCListenerConnection.setPeerConnectionHandler(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

uint64_t method lookup function for SystemXPCPeerConnection(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SystemXPCPeerConnection);
}

uint64_t dispatch thunk of SystemXPCPeerConnection.setEventHandler(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

uint64_t dispatch thunk of SystemXPCPeerConnection.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320))();
}

uint64_t sub_1D76E5138()
{
  swift_release();
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

unsigned char *sub_1D76E5180(unsigned char *result)
{
  return sub_1D76E4A18(result);
}

uint64_t sub_1D76E518C()
{
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 72, 7);
}

uint64_t sub_1D76E51E4(void *a1, uint64_t a2, unint64_t a3, const char *a4, uint64_t a5)
{
  void (**v38)(void *__return_ptr, void, void, void);
  const char *v39;
  _UNKNOWN **v40;
  const char *v41;
  uint64_t (*v42)(uint64_t, uint64_t, uint64_t);
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  xpc_object_t reply;
  void *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _xpc_connection_s *v57;
  _xpc_connection_s *v58;
  void (**v59)(void *__return_ptr, void, void, void);
  void (*v60)(long long *__return_ptr, uint64_t (*)(uint64_t), uint64_t, void);
  void (*v61)(char *, char *, uint64_t);
  void (*v62)(long long *, void *);
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  unsigned int (*v67)(uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  const char *v73;
  uint64_t v74;
  void v75[2];
  long long v76;
  unint64_t v77;
  char v78;

  uint64_t v73 = a4;
  uint64_t v74 = a5;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34390);
  uint64_t v9 = MEMORY[0x1F4188788](v8 - 8);
  char v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188788](v9);
  uint64_t v14 = (char *)&v59 - v13;
  uint64_t v15 = MEMORY[0x1F4188788](v12);
  char v17 = (char *)&v59 - v16;
  MEMORY[0x1F4188788](v15);
  uint64_t v19 = (char *)&v59 - v18;
  uint64_t v20 = sub_1D76F7D04();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x1F4188788](v20);
  uint64_t v23 = (char *)&v59 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  if (!xpc_dictionary_get_string(a1, "XPCSideChannel.uniqueIdentifier"))
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    goto LABEL_5;
  }
  uint64_t v70 = v11;
  uint64_t v71 = v14;
  uint64_t v72 = v23;
  sub_1D76F80B4();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  sub_1D76F7CA4();
  swift_bridgeObjectRelease();
  uint64_t v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  if (v24(v17, 1, v20) == 1)
  {
    sub_1D769AC0C((uint64_t)v17, &qword_1EBA34390);
LABEL_5:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v19, 1, 1, v20);
LABEL_6:
    sub_1D769AC0C((uint64_t)v19, &qword_1EBA34390);
    return 0;
  }
  uint64_t v68 = a2;
  uint64_t v69 = a3;
  uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
  v26(v19, v17, v20);
  uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56);
  v27((uint64_t)v19, 0, 1, v20);
  uint64_t v67 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v24;
  if (v24(v19, 1, v20) == 1) {
    goto LABEL_6;
  }
  uint64_t v64 = v27;
  uint64_t v65 = v21 + 56;
  uint64_t v28 = (uint64_t)v72;
  uint64_t v63 = v21 + 32;
  v26(v72, v19, v20);
  uint64_t v29 = v26;
  if (qword_1EBA33E40 != -1) {
    swift_once();
  }
  uint64_t v30 = (void *)qword_1EBA33E30;
  objc_msgSend((id)qword_1EBA33E30, sel_lock);
  sub_1D76AE35C(v28, (uint64_t *)&v76);
  objc_msgSend(v30, sel_unlock);
  uint64_t v31 = v76;
  unint64_t v32 = v69;
  if (!(void)v76)
  {
    uint64_t v42 = 0;
    uint64_t v74 = 0;
    goto LABEL_20;
  }
  uint64_t v61 = v29;
  uint64_t v33 = (void (*)(long long *, void *))*((void *)&v76 + 1);
  unint64_t v34 = v77;
  uint64_t v35 = swift_allocObject();
  uint64_t v62 = v33;
  *(void *)(v35 + 16) = v33;
  *(void *)(v35 + 24) = v34;
  uint64_t v74 = v35;
  uint64_t v36 = v31 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection;
  uint64_t v37 = *(void *)(v31 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection);
  if (!v37)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    *(void *)&uint64_t v76 = a1;
    *((void *)&v76 + 1) = v68;
    uint64_t v77 = v32;
    uint64_t v78 = 0;
    goto LABEL_17;
  }
  uint64_t v38 = (void (**)(void *__return_ptr, void, void, void))(*(void *)v73 + 208);
  uint64_t v60 = (void (*)(long long *__return_ptr, uint64_t (*)(uint64_t), uint64_t, void))*v38;
  uint64_t v59 = v38;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v66 = v31;
  v60(&v76, sub_1D76B145C, v37, MEMORY[0x1E4FBB390]);
  swift_release();
  if ((v76 & 1) == 0)
  {
    LODWORD(v68) = sub_1D76F82B4();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBA33F30);
    uint64_t v44 = swift_allocObject();
    *(_OWORD *)(v44 + 16) = xmmword_1D76FB290;
    uint64_t v76 = *(_OWORD *)v36;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA83AC08);
    sub_1D76F8044();
    uint64_t v45 = sub_1D76F7FC4();
    swift_bridgeObjectRelease();
    uint64_t v46 = sub_1D76BBA90(0, &qword_1EA83A900);
    *(void *)(v44 + 56) = v46;
    uint64_t v47 = sub_1D76E67B0();
    *(void *)(v44 + 64) = v47;
    *(void *)(v44 + 32) = v45;
    *(void *)&uint64_t v76 = v73;
    *((void *)&v76 + 1) = &protocol witness table for RemoteXPCPeerConnection;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA83AC20);
    sub_1D76F8044();
    uint64_t v48 = sub_1D76F7FC4();
    swift_bridgeObjectRelease();
    *(void *)(v44 + 96) = v46;
    *(void *)(v44 + 104) = v47;
    *(void *)(v44 + 72) = v48;
    sub_1D76BBA90(0, (unint64_t *)&qword_1EA83A920);
    uint64_t v49 = (void *)sub_1D76F8394();
    sub_1D76F7D84();
    uint64_t v50 = v66;
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();

    uint64_t v42 = sub_1D76E67AC;
    uint64_t v31 = v50;
    uint64_t v29 = v61;
LABEL_20:
    xpc_object_t reply = xpc_dictionary_create_reply(a1);
    if (!reply)
    {
      sub_1D76E6860(v31, (uint64_t)v42, v74, MEMORY[0x1E4FBC8D0], MEMORY[0x1E4FBC8D0]);
      unint64_t v54 = v72;
LABEL_34:
      (*(void (**)(char *, uint64_t))(v21 + 8))(v54, v20);
      return 1;
    }
    uint64_t v52 = reply;
    uint64_t v66 = v31;
    *(void *)&uint64_t v76 = reply;
    *((void *)&v76 + 1) = 0xD000000000000019;
    uint64_t v73 = "v20@?0@\"OS_remote_device\"8B16";
    uint64_t v77 = 0x80000001D76FD660;
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    if (xpc_dictionary_get_string(a1, "XPCSideChannel.uniqueIdentifier"))
    {
      sub_1D76F80B4();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      uint64_t v53 = (uint64_t)v70;
      sub_1D76F7CA4();
      swift_bridgeObjectRelease();
      if (v67(v53, 1, v20) != 1)
      {
        uint64_t v56 = (uint64_t)v71;
        v29(v71, (char *)v53, v20);
        uint64_t v55 = 0;
        unint64_t v54 = v72;
        goto LABEL_28;
      }
      sub_1D769AC0C(v53, &qword_1EBA34390);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }
    uint64_t v55 = 1;
    uint64_t v56 = (uint64_t)v71;
    unint64_t v54 = v72;
LABEL_28:
    v64(v56, v55, 1, v20);
    sub_1D76AD52C(v56);
    swift_unknownObjectRelease();
    uint64_t v57 = xpc_dictionary_get_remote_connection(v52);
    if (v57)
    {
      uint64_t v58 = v57;
      self;
      if (swift_dynamicCastObjCClass()) {
        xpc_remote_connection_send_message();
      }
      else {
        xpc_connection_send_message(v58, v52);
      }
      swift_unknownObjectRelease();
    }
    sub_1D76E6860(v66, (uint64_t)v42, v74, MEMORY[0x1E4FBC8D0], MEMORY[0x1E4FBC8D0]);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    goto LABEL_34;
  }
  uint64_t v39 = *(const char **)v36;
  *(void *)&uint64_t v76 = a1;
  *((void *)&v76 + 1) = v68;
  uint64_t v77 = v69;
  uint64_t v78 = 0;
  if (!v39)
  {
LABEL_17:
    id v41 = v73;
    swift_retain();
    uint64_t v40 = &protocol witness table for RemoteXPCPeerConnection;
    goto LABEL_18;
  }
  uint64_t v40 = *(_UNKNOWN ***)(v36 + 8);
  id v41 = v39;
LABEL_18:
  uint64_t v43 = v72;
  v75[0] = v41;
  v75[1] = v40;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  v62(&v76, v75);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  swift_release_n();
  swift_release();
  swift_release_n();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v43, v20);
  return 1;
}

uint64_t sub_1D76E5AE4(void *a1, uint64_t a2, unint64_t a3, const char *a4, uint64_t a5)
{
  void (**v38)(void *__return_ptr, void, void, void);
  const char *v39;
  _UNKNOWN **v40;
  const char *v41;
  uint64_t (*v42)(uint64_t, uint64_t, uint64_t);
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  xpc_object_t reply;
  void *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _xpc_connection_s *v57;
  _xpc_connection_s *v58;
  void (**v59)(void *__return_ptr, void, void, void);
  void (*v60)(long long *__return_ptr, uint64_t (*)(uint64_t), uint64_t, void);
  void (*v61)(char *, char *, uint64_t);
  void (*v62)(long long *, void *);
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  unsigned int (*v67)(uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  const char *v73;
  uint64_t v74;
  void v75[2];
  long long v76;
  unint64_t v77;
  char v78;

  uint64_t v73 = a4;
  uint64_t v74 = a5;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34390);
  uint64_t v9 = MEMORY[0x1F4188788](v8 - 8);
  char v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188788](v9);
  uint64_t v14 = (char *)&v59 - v13;
  uint64_t v15 = MEMORY[0x1F4188788](v12);
  char v17 = (char *)&v59 - v16;
  MEMORY[0x1F4188788](v15);
  uint64_t v19 = (char *)&v59 - v18;
  uint64_t v20 = sub_1D76F7D04();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x1F4188788](v20);
  uint64_t v23 = (char *)&v59 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  if (!xpc_dictionary_get_string(a1, "XPCSideChannel.uniqueIdentifier"))
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    goto LABEL_5;
  }
  uint64_t v70 = v11;
  uint64_t v71 = v14;
  uint64_t v72 = v23;
  sub_1D76F80B4();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  sub_1D76F7CA4();
  swift_bridgeObjectRelease();
  uint64_t v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  if (v24(v17, 1, v20) == 1)
  {
    sub_1D769AC0C((uint64_t)v17, &qword_1EBA34390);
LABEL_5:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v19, 1, 1, v20);
LABEL_6:
    sub_1D769AC0C((uint64_t)v19, &qword_1EBA34390);
    return 0;
  }
  uint64_t v68 = a2;
  uint64_t v69 = a3;
  uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
  v26(v19, v17, v20);
  uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56);
  v27((uint64_t)v19, 0, 1, v20);
  uint64_t v67 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v24;
  if (v24(v19, 1, v20) == 1) {
    goto LABEL_6;
  }
  uint64_t v64 = v27;
  uint64_t v65 = v21 + 56;
  uint64_t v28 = (uint64_t)v72;
  uint64_t v63 = v21 + 32;
  v26(v72, v19, v20);
  uint64_t v29 = v26;
  if (qword_1EBA33E40 != -1) {
    swift_once();
  }
  uint64_t v30 = (void *)qword_1EBA33E30;
  objc_msgSend((id)qword_1EBA33E30, sel_lock);
  sub_1D76AE35C(v28, (uint64_t *)&v76);
  objc_msgSend(v30, sel_unlock);
  uint64_t v31 = v76;
  unint64_t v32 = v69;
  if (!(void)v76)
  {
    uint64_t v42 = 0;
    uint64_t v74 = 0;
    goto LABEL_20;
  }
  uint64_t v61 = v29;
  uint64_t v33 = (void (*)(long long *, void *))*((void *)&v76 + 1);
  unint64_t v34 = v77;
  uint64_t v35 = swift_allocObject();
  uint64_t v62 = v33;
  *(void *)(v35 + 16) = v33;
  *(void *)(v35 + 24) = v34;
  uint64_t v74 = v35;
  uint64_t v36 = v31 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection;
  uint64_t v37 = *(void *)(v31 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection);
  if (!v37)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    *(void *)&uint64_t v76 = a1;
    *((void *)&v76 + 1) = v68;
    uint64_t v77 = v32;
    uint64_t v78 = 0;
    goto LABEL_17;
  }
  uint64_t v38 = (void (**)(void *__return_ptr, void, void, void))(*(void *)v73 + 208);
  uint64_t v60 = (void (*)(long long *__return_ptr, uint64_t (*)(uint64_t), uint64_t, void))*v38;
  uint64_t v59 = v38;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v66 = v31;
  v60(&v76, sub_1D76B145C, v37, MEMORY[0x1E4FBB390]);
  swift_release();
  if ((v76 & 1) == 0)
  {
    LODWORD(v68) = sub_1D76F82B4();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBA33F30);
    uint64_t v44 = swift_allocObject();
    *(_OWORD *)(v44 + 16) = xmmword_1D76FB290;
    uint64_t v76 = *(_OWORD *)v36;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA83AC08);
    sub_1D76F8044();
    uint64_t v45 = sub_1D76F7FC4();
    swift_bridgeObjectRelease();
    uint64_t v46 = sub_1D76BBA90(0, &qword_1EA83A900);
    *(void *)(v44 + 56) = v46;
    uint64_t v47 = sub_1D76E67B0();
    *(void *)(v44 + 64) = v47;
    *(void *)(v44 + 32) = v45;
    *(void *)&uint64_t v76 = v73;
    *((void *)&v76 + 1) = &protocol witness table for SystemXPCPeerConnection;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA83AC20);
    sub_1D76F8044();
    uint64_t v48 = sub_1D76F7FC4();
    swift_bridgeObjectRelease();
    *(void *)(v44 + 96) = v46;
    *(void *)(v44 + 104) = v47;
    *(void *)(v44 + 72) = v48;
    sub_1D76BBA90(0, (unint64_t *)&qword_1EA83A920);
    uint64_t v49 = (void *)sub_1D76F8394();
    sub_1D76F7D84();
    uint64_t v50 = v66;
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();

    uint64_t v42 = sub_1D76E67AC;
    uint64_t v31 = v50;
    uint64_t v29 = v61;
LABEL_20:
    xpc_object_t reply = xpc_dictionary_create_reply(a1);
    if (!reply)
    {
      sub_1D76E6860(v31, (uint64_t)v42, v74, MEMORY[0x1E4FBC8D0], MEMORY[0x1E4FBC8D0]);
      unint64_t v54 = v72;
LABEL_34:
      (*(void (**)(char *, uint64_t))(v21 + 8))(v54, v20);
      return 1;
    }
    uint64_t v52 = reply;
    uint64_t v66 = v31;
    *(void *)&uint64_t v76 = reply;
    *((void *)&v76 + 1) = 0xD000000000000019;
    uint64_t v73 = "v20@?0@\"OS_remote_device\"8B16";
    uint64_t v77 = 0x80000001D76FD660;
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    if (xpc_dictionary_get_string(a1, "XPCSideChannel.uniqueIdentifier"))
    {
      sub_1D76F80B4();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      uint64_t v53 = (uint64_t)v70;
      sub_1D76F7CA4();
      swift_bridgeObjectRelease();
      if (v67(v53, 1, v20) != 1)
      {
        uint64_t v56 = (uint64_t)v71;
        v29(v71, (char *)v53, v20);
        uint64_t v55 = 0;
        unint64_t v54 = v72;
        goto LABEL_28;
      }
      sub_1D769AC0C(v53, &qword_1EBA34390);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }
    uint64_t v55 = 1;
    uint64_t v56 = (uint64_t)v71;
    unint64_t v54 = v72;
LABEL_28:
    v64(v56, v55, 1, v20);
    sub_1D76AD52C(v56);
    swift_unknownObjectRelease();
    uint64_t v57 = xpc_dictionary_get_remote_connection(v52);
    if (v57)
    {
      uint64_t v58 = v57;
      self;
      if (swift_dynamicCastObjCClass()) {
        xpc_remote_connection_send_message();
      }
      else {
        xpc_connection_send_message(v58, v52);
      }
      swift_unknownObjectRelease();
    }
    sub_1D76E6860(v66, (uint64_t)v42, v74, MEMORY[0x1E4FBC8D0], MEMORY[0x1E4FBC8D0]);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    goto LABEL_34;
  }
  uint64_t v39 = *(const char **)v36;
  *(void *)&uint64_t v76 = a1;
  *((void *)&v76 + 1) = v68;
  uint64_t v77 = v69;
  uint64_t v78 = 0;
  if (!v39)
  {
LABEL_17:
    id v41 = v73;
    swift_retain();
    uint64_t v40 = &protocol witness table for SystemXPCPeerConnection;
    goto LABEL_18;
  }
  uint64_t v40 = *(_UNKNOWN ***)(v36 + 8);
  id v41 = v39;
LABEL_18:
  uint64_t v43 = v72;
  v75[0] = v41;
  v75[1] = v40;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  v62(&v76, v75);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  swift_release_n();
  swift_release();
  swift_release_n();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v43, v20);
  return 1;
}

uint64_t sub_1D76E63E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = (void *)MEMORY[0x1E4FBC860];
  if (qword_1EBA33E40 != -1) {
    swift_once();
  }
  uint64_t v6 = (void *)qword_1EBA33E30;
  objc_msgSend((id)qword_1EBA33E30, sel_lock);
  sub_1D76AE4C8(a3, (uint64_t)&protocol witness table for RemoteXPCPeerConnection, &v18);
  objc_msgSend(v6, sel_unlock);
  char v7 = v18;
  uint64_t v8 = v18[2];
  if (v8)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v9 = v7 + 6;
    do
    {
      uint64_t v13 = *(v9 - 2);
      uint64_t v12 = (void (*)(void *, void *))*(v9 - 1);
      v16[0] = a1;
      v16[1] = a2;
      v16[2] = 0;
      char v17 = 1;
      if (*(void *)(v13 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection))
      {
        char v11 = *(_UNKNOWN ***)(v13 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection + 8);
        uint64_t v10 = *(void *)(v13 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection);
      }
      else
      {
        swift_retain();
        uint64_t v10 = a3;
        char v11 = &protocol witness table for RemoteXPCPeerConnection;
      }
      v15[0] = v10;
      v15[1] = v11;
      swift_retain_n();
      swift_retain();
      swift_retain();
      v12(v16, v15);
      swift_release();
      swift_release_n();
      swift_release();
      v9 += 3;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_1D76E65AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = (void *)MEMORY[0x1E4FBC860];
  if (qword_1EBA33E40 != -1) {
    swift_once();
  }
  uint64_t v6 = (void *)qword_1EBA33E30;
  objc_msgSend((id)qword_1EBA33E30, sel_lock);
  sub_1D76AE4C8(a3, (uint64_t)&protocol witness table for SystemXPCPeerConnection, &v18);
  objc_msgSend(v6, sel_unlock);
  char v7 = v18;
  uint64_t v8 = v18[2];
  if (v8)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v9 = v7 + 6;
    do
    {
      uint64_t v13 = *(v9 - 2);
      uint64_t v12 = (void (*)(void *, void *))*(v9 - 1);
      v16[0] = a1;
      v16[1] = a2;
      v16[2] = 0;
      char v17 = 1;
      if (*(void *)(v13 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection))
      {
        char v11 = *(_UNKNOWN ***)(v13 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection + 8);
        uint64_t v10 = *(void *)(v13 + OBJC_IVAR____TtC7Mercury14XPCSideChannel__connection);
      }
      else
      {
        swift_retain();
        uint64_t v10 = a3;
        char v11 = &protocol witness table for SystemXPCPeerConnection;
      }
      v15[0] = v10;
      v15[1] = v11;
      swift_retain_n();
      swift_retain();
      swift_retain();
      v12(v16, v15);
      swift_release();
      swift_release_n();
      swift_release();
      v9 += 3;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_1D76E6774()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

unint64_t sub_1D76E67B0()
{
  unint64_t result = qword_1EA83AC18;
  if (!qword_1EA83AC18)
  {
    sub_1D76BBA90(255, &qword_1EA83A900);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83AC18);
  }
  return result;
}

uint64_t sub_1D76E6818()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  return MEMORY[0x1F4186498](v0, 32, 7);
}

char *sub_1D76E6858(char *a1)
{
  return sub_1D76D8F0C(a1, *(uint64_t (**)(char *))(v1 + 16));
}

uint64_t sub_1D76E6860(uint64_t result, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t (*a5)(uint64_t))
{
  if (result)
  {
    a4();
    return a5(a3);
  }
  return result;
}

uint64_t sub_1D76E68B8()
{
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1D76E68F0(char *a1, void *a2)
{
  return sub_1D769E3F4(a1, a2, *(xpc_object_t *)(v2 + 16));
}

uint64_t sub_1D76E68F8()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D76E6908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t, void *))(v3 + 16);
  v6[0] = a2;
  v6[1] = a3;
  return v4(a1, v6);
}

uint64_t sub_1D76E697C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1D76F7D34();
  uint64_t v57 = *(void *)(v4 - 8);
  uint64_t v58 = v4;
  uint64_t v5 = MEMORY[0x1F4188788](v4);
  uint64_t v60 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188788](v5);
  uint64_t v61 = (char *)&v55 - v7;
  uint64_t v8 = sub_1D76F7A34();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188788](v8);
  uint64_t v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(a1 - 8);
  uint64_t v14 = MEMORY[0x1F4188788](v10);
  uint64_t v56 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188788](v14);
  uint64_t v59 = (char *)&v55 - v17;
  uint64_t v18 = MEMORY[0x1F4188788](v16);
  uint64_t v62 = (char *)&v55 - v19;
  uint64_t v20 = MEMORY[0x1F4188788](v18);
  uint64_t v22 = (char *)&v55 - v21;
  MEMORY[0x1F4188788](v20);
  uint64_t v24 = (char *)&v55 - v23;
  id v25 = *(void (**)(char *, void, uint64_t))(v13 + 16);
  v25((char *)&v55 - v23, v65, a1);
  sub_1D76F7A04();
  uint64_t v65 = (void (*)(void, void, void))v24;
  uint64_t v63 = v25;
  v25(v22, v24, a1);
  uint64_t v26 = sub_1D76F89B4();
  uint64_t v64 = a2;
  if (v26)
  {
    uint64_t v27 = (void *)v26;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v22, a1);
  }
  else
  {
    uint64_t v27 = (void *)swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v28, v22, a1);
  }
  uint64_t v29 = v65;
  sub_1D76E9800(&qword_1EA83AC80, MEMORY[0x1E4F26C08]);
  char v30 = sub_1D76F7B54();

  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  if (v30) {
    goto LABEL_9;
  }
  int v66 = sub_1D76F7A54();
  uint64_t v31 = v62;
  unint64_t v32 = v63;
  v63(v62, v29, a1);
  uint64_t v33 = sub_1D76F89B4();
  if (v33)
  {
    unint64_t v34 = (void *)v33;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v31, a1);
  }
  else
  {
    unint64_t v34 = (void *)swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v35, v31, a1);
  }
  sub_1D76E97AC();
  char v36 = sub_1D76F7B54();

  if (v36)
  {
LABEL_9:
    (*(void (**)(void (*)(void, void, void), uint64_t))(v13 + 8))(v29, a1);
LABEL_10:
    char v37 = 1;
    return v37 & 1;
  }
  sub_1D76F7D54();
  uint64_t v39 = v59;
  v32(v59, v29, a1);
  uint64_t v40 = sub_1D76F89B4();
  if (v40)
  {
    id v41 = (void *)v40;
    uint64_t v42 = v13;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v39, a1);
  }
  else
  {
    id v41 = (void *)swift_allocError();
    uint64_t v42 = v13;
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v43, v39, a1);
  }
  uint64_t v45 = v57;
  uint64_t v44 = v58;
  sub_1D76E9800(&qword_1EA83AC88, MEMORY[0x1E4F27DB8]);
  uint64_t v46 = v61;
  char v47 = sub_1D76F7B54();

  uint64_t v48 = *(void (**)(char *, uint64_t))(v45 + 8);
  v48(v46, v44);
  if (v47)
  {
    (*(void (**)(void (*)(void, void, void), uint64_t))(v42 + 8))(v65, a1);
    goto LABEL_10;
  }
  sub_1D76F7D24();
  uint64_t v49 = v56;
  uint64_t v50 = v65;
  uint64_t v65 = *(void (**)(void, void, void))(v42 + 32);
  v65(v56, v50, a1);
  uint64_t v51 = sub_1D76F89B4();
  if (v51)
  {
    uint64_t v52 = (void *)v51;
    (*(void (**)(char *, uint64_t))(v42 + 8))(v49, a1);
  }
  else
  {
    uint64_t v52 = (void *)swift_allocError();
    v65(v53, v49, a1);
  }
  unint64_t v54 = v60;
  char v37 = sub_1D76F7B54();

  v48(v54, v44);
  return v37 & 1;
}

uint64_t sub_1D76E6FFC(uint64_t a1, uint64_t a2)
{
  uint64_t v60 = a2;
  uint64_t v4 = sub_1D76F7D34();
  uint64_t v53 = *(void *)(v4 - 8);
  uint64_t v54 = v4;
  MEMORY[0x1F4188788](v4);
  uint64_t v55 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1D76F7A34();
  uint64_t v61 = *(void *)(v6 - 8);
  uint64_t v7 = MEMORY[0x1F4188788](v6);
  uint64_t v59 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188788](v7);
  uint64_t v11 = (char *)&v52 - v10;
  uint64_t v12 = *(void *)(a1 - 8);
  uint64_t v13 = MEMORY[0x1F4188788](v9);
  uint64_t v57 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188788](v13);
  uint64_t v58 = (char *)&v52 - v16;
  uint64_t v17 = MEMORY[0x1F4188788](v15);
  uint64_t v19 = (char *)&v52 - v18;
  uint64_t v20 = MEMORY[0x1F4188788](v17);
  uint64_t v22 = (char *)&v52 - v21;
  MEMORY[0x1F4188788](v20);
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v23((char *)&v52 - v24, v2, a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AC70);
  if (swift_dynamicCast())
  {
    sub_1D76BBC14(&v62, (uint64_t)v65);
    __swift_project_boxed_opaque_existential_1(v65, v66);
    uint64_t v25 = sub_1D76F7A94();
    __swift_project_boxed_opaque_existential_1(v65, v66);
    uint64_t DynamicType = swift_getDynamicType();
    uint64_t v27 = v67;
    *((void *)&v63 + 1) = DynamicType;
    uint64_t v64 = v67;
    __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)&v62);
    static Error<>.unknown.getter(DynamicType, v27);
    char v28 = v25 == sub_1D76F7A94();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v62);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v65);
  }
  else
  {
    uint64_t v64 = 0;
    long long v62 = 0u;
    long long v63 = 0u;
    sub_1D769AC0C((uint64_t)&v62, &qword_1EA83AC78);
    v23(v22, v2, a1);
    sub_1D76F7A14();
    v23(v19, (uint64_t)v22, a1);
    uint64_t v29 = sub_1D76F89B4();
    uint64_t v56 = v12;
    if (v29)
    {
      char v30 = (void *)v29;
      (*(void (**)(char *, uint64_t))(v12 + 8))(v19, a1);
    }
    else
    {
      char v30 = (void *)swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v31, v19, a1);
    }
    sub_1D76E9800(&qword_1EA83AC80, MEMORY[0x1E4F26C08]);
    char v32 = sub_1D76F7B54();

    uint64_t v33 = v61 + 8;
    unint64_t v34 = *(void (**)(char *, uint64_t))(v61 + 8);
    v34(v11, v6);
    if (v32) {
      goto LABEL_11;
    }
    uint64_t v61 = v33;
    sub_1D76F7A24();
    uint64_t v35 = v58;
    v23(v58, (uint64_t)v22, a1);
    uint64_t v36 = sub_1D76F89B4();
    if (v36)
    {
      char v37 = (void *)v36;
      (*(void (**)(char *, uint64_t))(v56 + 8))(v35, a1);
    }
    else
    {
      char v37 = (void *)swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v56 + 32))(v38, v35, a1);
    }
    uint64_t v39 = v57;
    uint64_t v40 = v34;
    id v41 = v59;
    char v42 = sub_1D76F7B54();

    v40(v41, v6);
    if (v42)
    {
LABEL_11:
      (*(void (**)(char *, uint64_t))(v56 + 8))(v22, a1);
      char v28 = 1;
    }
    else
    {
      uint64_t v43 = v55;
      sub_1D76F7D44();
      uint64_t v44 = v56;
      uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v56 + 32);
      v45(v39, v22, a1);
      uint64_t v46 = sub_1D76F89B4();
      if (v46)
      {
        char v47 = (void *)v46;
        (*(void (**)(char *, uint64_t))(v44 + 8))(v39, a1);
      }
      else
      {
        char v47 = (void *)swift_allocError();
        v45(v48, v39, a1);
      }
      uint64_t v50 = v53;
      uint64_t v49 = v54;
      sub_1D76E9800(&qword_1EA83AC88, MEMORY[0x1E4F27DB8]);
      char v28 = sub_1D76F7B54();

      (*(void (**)(char *, uint64_t))(v50 + 8))(v43, v49);
    }
  }
  return v28 & 1;
}

uint64_t Error.normalized<A>(as:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  uint64_t v5 = MEMORY[0x1F4188788](a1);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188788](v5);
  uint64_t v10 = (char *)&v21 - v9;
  uint64_t v15 = sub_1D76E7860(v8, v11, v12, v13, v14);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v16(v10, v2, a2);
  if (v15) {
    goto LABEL_5;
  }
  v16(v7, (uint64_t)v10, a2);
  uint64_t v17 = sub_1D76F89B4();
  if (!v17)
  {
    uint64_t v15 = swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v19, v7, a2);
LABEL_5:
    (*(void (**)(char *, uint64_t))(v4 + 8))(v10, a2);
    return v15;
  }
  uint64_t v15 = v17;
  uint64_t v18 = *(void (**)(char *, uint64_t))(v4 + 8);
  v18(v7, a2);
  v18(v10, a2);
  return v15;
}

uint64_t sub_1D76E7860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v96 = a5;
  uint64_t v98 = a4;
  uint64_t v94 = a1;
  uint64_t v89 = sub_1D76F7A64();
  uint64_t v88 = *(void *)(v89 - 8);
  uint64_t v9 = MEMORY[0x1F4188788](v89);
  uint64_t v87 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(a3 - 8);
  uint64_t v12 = MEMORY[0x1F4188788](v9);
  uint64_t v93 = (char *)&v83 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188788](v12);
  uint64_t v91 = (char *)&v83 - v15;
  uint64_t v16 = MEMORY[0x1F4188788](v14);
  uint64_t v18 = (char *)&v83 - v17;
  uint64_t v19 = *(void *)(a2 - 8);
  uint64_t v20 = MEMORY[0x1F4188788](v16);
  uint64_t v85 = (char *)&v83 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1F4188788](v20);
  uint64_t v86 = (char *)&v83 - v23;
  uint64_t v24 = MEMORY[0x1F4188788](v22);
  uint64_t v90 = (char *)&v83 - v25;
  uint64_t v26 = MEMORY[0x1F4188788](v24);
  uint64_t v92 = (char *)&v83 - v27;
  uint64_t v28 = MEMORY[0x1F4188788](v26);
  uint64_t v95 = (char *)&v83 - v29;
  uint64_t v30 = MEMORY[0x1F4188788](v28);
  char v32 = (char *)&v83 - v31;
  uint64_t v33 = MEMORY[0x1F4188788](v30);
  uint64_t v35 = (char *)&v83 - v34;
  MEMORY[0x1F4188788](v33);
  uint64_t v97 = v19;
  uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  v36((char *)&v83 - v37, v6, a2);
  if (swift_dynamicCast())
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, a3);
    v36(v35, v6, a2);
    uint64_t v38 = sub_1D76F89B4();
    if (v38)
    {
      uint64_t v39 = v38;
      (*(void (**)(char *, uint64_t))(v97 + 8))(v35, a2);
    }
    else
    {
      uint64_t v39 = swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v97 + 32))(v50, v35, a2);
    }
  }
  else
  {
    uint64_t v84 = v11;
    uint64_t v40 = v98;
    v36(v32, v6, a2);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AC58);
    if (swift_dynamicCast())
    {
      sub_1D76BBC14(v99, (uint64_t)&v101);
      uint64_t v41 = v102;
      uint64_t v42 = v103;
      __swift_project_boxed_opaque_existential_1(&v101, v102);
      uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 16))(v94, a3, v96, v41, v42);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v101);
    }
    else
    {
      uint64_t v100 = 0;
      memset(v99, 0, sizeof(v99));
      sub_1D769AC0C((uint64_t)v99, &qword_1EA83AC60);
      uint64_t v43 = v40;
      char v44 = sub_1D76E697C(a2, v40);
      uint64_t v45 = v95;
      v36(v95, v6, a2);
      unint64_t v83 = (void (*)(uint64_t *, uint64_t, uint64_t))v36;
      if (v44)
      {
        LODWORD(v101) = sub_1D76F7A54();
        uint64_t v46 = v92;
        v36(v92, (uint64_t)v45, a2);
        uint64_t v47 = sub_1D76F89B4();
        if (v47)
        {
          uint64_t v48 = (void *)v47;
          uint64_t v49 = v97;
          (*(void (**)(char *, uint64_t))(v97 + 8))(v46, a2);
        }
        else
        {
          uint64_t v48 = (void *)swift_allocError();
          uint64_t v49 = v97;
          (*(void (**)(uint64_t, char *, uint64_t))(v97 + 32))(v52, v46, a2);
        }
        sub_1D76E97AC();
        char v53 = sub_1D76F7B54();

        uint64_t v51 = *(void (**)(char *, uint64_t))(v49 + 8);
        v51(v95, a2);
        uint64_t v43 = v40;
        if ((v53 & 1) == 0)
        {
          LODWORD(v101) = 89;
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F28);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_1D76FA300;
          *(void *)(inited + 32) = sub_1D76F7FF4();
          *(void *)(inited + 40) = v66;
          *(void *)(inited + 72) = a2;
          boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)(inited + 48));
          v83(boxed_opaque_existential_0Tm, v6, a2);
          sub_1D769B168(inited);
          sub_1D76E9800((unint64_t *)&qword_1EA83AC90, MEMORY[0x1E4F26C30]);
          uint64_t v68 = v87;
          uint64_t v69 = v89;
          sub_1D76F7B74();
          uint64_t v39 = sub_1D76F7A44();
          (*(void (**)(char *, uint64_t))(v88 + 8))(v68, v69);
          return v39;
        }
      }
      else
      {
        uint64_t v51 = *(void (**)(char *, uint64_t))(v97 + 8);
        v51(v45, a2);
      }
      if (sub_1D76E6FFC(a2, v43))
      {
        uint64_t v54 = a3;
        uint64_t v55 = v96;
        static Error<>.unknown.getter(a3, v96);
        uint64_t v56 = v90;
        v83((uint64_t *)v90, v6, a2);
        uint64_t v57 = sub_1D76F89B4();
        if (v57)
        {
          uint64_t v58 = (void *)v57;
          v51(v56, a2);
        }
        else
        {
          uint64_t v58 = (void *)swift_allocError();
          (*(void (**)(uint64_t, char *, uint64_t))(v97 + 32))(v70, v56, a2);
        }
        uint64_t v71 = v84;
        uint64_t v72 = v91;
        uint64_t v73 = v93;
        _Error.wrapping(_:)((uint64_t)v58, v54, v55);

        uint64_t v74 = *(void (**)(char *, uint64_t))(v71 + 8);
        v74(v73, v54);
        uint64_t v75 = sub_1D76F89B4();
        if (v75)
        {
          uint64_t v39 = v75;
          v74(v72, v54);
        }
        else
        {
          uint64_t v39 = swift_allocError();
          (*(void (**)(uint64_t, char *, uint64_t))(v71 + 32))(v78, v72, v54);
        }
      }
      else
      {
        sub_1D76E26B8();
        uint64_t v59 = sub_1D76F8CC4();
        uint64_t v61 = static NSError.normalizationProvider<A>(forDomain:normalizingAs:)(v59, v60, v94, a3, v96);
        swift_bridgeObjectRelease();
        if (v61)
        {
          long long v62 = v86;
          v83((uint64_t *)v86, v6, a2);
          uint64_t v63 = sub_1D76F89B4();
          if (v63)
          {
            uint64_t v64 = (void *)v63;
            v51(v62, a2);
          }
          else
          {
            uint64_t v64 = (void *)swift_allocError();
            (*(void (**)(uint64_t, char *, uint64_t))(v97 + 32))(v79, v62, a2);
          }
          uint64_t v80 = (void *)sub_1D76F7B84();

          uint64_t v39 = v61((uint64_t)v80);
          sub_1D76CCEE8((uint64_t)v61);
        }
        else
        {
          uint64_t v76 = v85;
          v83((uint64_t *)v85, v6, a2);
          uint64_t v77 = sub_1D76F89B4();
          if (v77)
          {
            uint64_t v39 = v77;
            v51(v76, a2);
          }
          else
          {
            uint64_t v39 = swift_allocError();
            (*(void (**)(uint64_t, char *, uint64_t))(v97 + 32))(v82, v76, a2);
          }
        }
      }
    }
  }
  return v39;
}

void *Error.normalized<A>(as:fallingBackTo:)(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 - 8);
  uint64_t v8 = MEMORY[0x1F4188788](a1);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1D76E7860(v8, v11, v12, v13, v14);
  if (v15) {
    return (void *)v15;
  }
  uint64_t v16 = (void *)a2();
  uint64_t v36 = v16;
  id v17 = v16;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F40);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AC38);
  if (swift_dynamicCast())
  {
    sub_1D76BBC14(&v33, (uint64_t)v37);
    uint64_t v18 = v38;
    uint64_t v19 = v39;
    __swift_project_boxed_opaque_existential_1(v37, v38);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v4, a4);
    uint64_t v20 = sub_1D76F89B4();
    if (v20)
    {
      uint64_t v21 = (void *)v20;
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, a4);
    }
    else
    {
      uint64_t v21 = (void *)swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v22, v10, a4);
    }
    *((void *)&v34 + 1) = v18;
    uint64_t v35 = v19;
    boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)&v33);
    CustomNSError.wrapping(_:)(v21, v18, (uint64_t)boxed_opaque_existential_0Tm);

    uint64_t v24 = *((void *)&v34 + 1);
    uint64_t v25 = __swift_project_boxed_opaque_existential_1(&v33, *((uint64_t *)&v34 + 1));
    uint64_t v26 = *(void *)(v24 - 8);
    MEMORY[0x1F4188788](v25);
    uint64_t v28 = (char *)&v33 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v26 + 16))(v28);
    uint64_t v29 = sub_1D76F89B4();
    if (v29)
    {
      uint64_t v30 = v29;
      (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v24);
    }
    else
    {
      uint64_t v30 = swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(v31, v28, v24);
    }

    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v33);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v37);
    return (void *)v30;
  }
  else
  {
    uint64_t v35 = 0;
    long long v33 = 0u;
    long long v34 = 0u;
    sub_1D769AC0C((uint64_t)&v33, &qword_1EA83AC40);
  }
  return v16;
}

uint64_t (*static NSError.normalizationProvider<A>(forDomain:normalizingAs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t a1)
{
  if (qword_1EBA33EE0 != -1) {
    swift_once();
  }
  uint64_t v9 = (void *)qword_1EBA33ED8;
  objc_msgSend((id)qword_1EBA33ED8, sel_lock);
  sub_1D76E957C(a3, a1, a2, a5, &v12);
  objc_msgSend(v9, sel_unlock);
  if (!(void)v12) {
    return 0;
  }
  long long v11 = v12;
  *(_OWORD *)(swift_allocObject() + 16) = v11;
  return sub_1D76E96D4;
}

void withErrorsNormalized<A, B>(as:_:)(uint64_t a1, void (*a2)(void))
{
  a2();
  if (v2)
  {
    swift_getErrorValue();
    Error.normalized<A>(as:)(a1, v4);
    swift_willThrow();
  }
}

void withErrorsNormalized<A, B>(as:fallingBackTo:_:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4();
  if (v4)
  {
    uint64_t ErrorValue = swift_getErrorValue();
    MEMORY[0x1F4188788](ErrorValue);
    void v10[2] = a2;
    void v10[3] = a3;
    Error.normalized<A>(as:fallingBackTo:)(a1, sub_1D76E9714, (uint64_t)v10, v9);
    swift_willThrow();
  }
}

uint64_t withErrorsNormalized<A, B>(as:_:)(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[7] = a5;
  v7[8] = a7;
  void v7[6] = a2;
  long long v11 = (uint64_t (*)(uint64_t))((char *)a3 + *a3);
  uint64_t v9 = (void *)swift_task_alloc();
  v7[9] = v9;
  *uint64_t v9 = v7;
  v9[1] = sub_1D76E89CC;
  return v11(a1);
}

uint64_t sub_1D76E89CC()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](sub_1D76E8B00, 0, 0);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1D76E8B00()
{
  uint64_t v1 = (void *)v0[10];
  uint64_t v2 = v0[6];
  swift_getErrorValue();
  Error.normalized<A>(as:)(v2, v0[3]);
  swift_willThrow();

  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t withErrorsNormalized<A, B>(as:fallingBackTo:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7)
{
  v7[9] = a7;
  v7[10] = v13;
  v7[7] = a3;
  v7[8] = a4;
  void v7[6] = a2;
  long long v11 = (uint64_t (*)(uint64_t))((char *)a5 + *a5);
  uint64_t v9 = (void *)swift_task_alloc();
  v7[11] = v9;
  *uint64_t v9 = v7;
  v9[1] = sub_1D76E8CA0;
  return v11(a1);
}

uint64_t sub_1D76E8CA0()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](sub_1D76E8DD4, 0, 0);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1D76E8DD4()
{
  uint64_t v1 = *(void **)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 48);
  long long v7 = *(_OWORD *)(v0 + 56);
  swift_getErrorValue();
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = swift_task_alloc();
  *(_OWORD *)(v4 + 16) = v7;
  Error.normalized<A>(as:fallingBackTo:)(v2, sub_1D76E9978, v4, v3);
  swift_task_dealloc();
  swift_willThrow();

  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t XPCError.normalized<A>(as:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 - 8);
  uint64_t v7 = MEMORY[0x1F4188788](a1);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (ValueMetadata *)MEMORY[0x1F4188788](v7);
  uint64_t v12 = (char *)&v23 - v11;
  uint64_t v14 = *v3;
  uint64_t v13 = v3[1];
  if (v10 == &type metadata for XPCError)
  {
    sub_1D76B10C8();
    uint64_t v19 = swift_allocError();
    *uint64_t v20 = v14;
    v20[1] = v13;
    swift_bridgeObjectRetain();
  }
  else
  {
    static Error<>.xpcError.getter(a2, a3);
    sub_1D76B10C8();
    uint64_t v15 = (void *)swift_allocError();
    *uint64_t v16 = v14;
    v16[1] = v13;
    swift_bridgeObjectRetain();
    _Error.wrapping(_:)((uint64_t)v15, a2, a3);

    id v17 = *(void (**)(char *, uint64_t))(v6 + 8);
    v17(v9, a2);
    uint64_t v18 = sub_1D76F89B4();
    if (v18)
    {
      uint64_t v19 = v18;
      v17(v12, a2);
    }
    else
    {
      uint64_t v19 = swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v21, v12, a2);
    }
  }
  return v19;
}

uint64_t sub_1D76E90E0()
{
  return sub_1D76F8D54();
}

uint64_t sub_1D76E9184()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D76E9218()
{
  return sub_1D76F8D54();
}

uint64_t sub_1D76E92B8(void *a1, void *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  if (a1[2] == a2[2] && a1[3] == a2[3]) {
    return 1;
  }
  else {
    return sub_1D76F89E4();
  }
}

void sub_1D76E9300()
{
  off_1EBA33EC0 = (_UNKNOWN *)MEMORY[0x1E4FBC868];
}

id sub_1D76E9314()
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28E08]), sel_init);
  qword_1EBA33ED8 = (uint64_t)result;
  return result;
}

id static NSError.setNormalizationProvider<A>(forDomain:normalizingAs:provider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  if (qword_1EBA33EE0 != -1) {
    swift_once();
  }
  uint64_t v16 = (void *)qword_1EBA33ED8;
  objc_msgSend((id)qword_1EBA33ED8, sel_lock);
  sub_1D76E9438(a3, a1, a2, v8, a4, a5, a6, a7);

  return objc_msgSend(v16, sel_unlock);
}

uint64_t sub_1D76E9438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = qword_1EBA33EC8;
  swift_bridgeObjectRetain();
  if (v14 != -1) {
    swift_once();
  }
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a5;
  *(void *)(v15 + 24) = a6;
  swift_beginAccess();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v18 = off_1EBA33EC0;
  off_1EBA33EC0 = (_UNKNOWN *)0x8000000000000000;
  sub_1D76EE960((uint64_t)sub_1D76E9778, v15, a1, a8, a2, a3, isUniquelyReferenced_nonNull_native);
  off_1EBA33EC0 = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

uint64_t sub_1D76E957C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X5>, void *a5@<X8>)
{
  uint64_t v10 = qword_1EBA33EC8;
  swift_bridgeObjectRetain();
  if (v10 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v11 = off_1EBA33EC0;
  if (*((void *)off_1EBA33EC0 + 2))
  {
    swift_bridgeObjectRetain();
    unint64_t v12 = sub_1D76E0E18(a1, a4, a2, a3);
    if (v13)
    {
      uint64_t v14 = (uint64_t *)(v11[7] + 16 * v12);
      uint64_t v16 = *v14;
      uint64_t v15 = v14[1];
      swift_retain();
    }
    else
    {
      uint64_t v16 = 0;
      uint64_t v15 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v15 = 0;
  }
  *a5 = v16;
  a5[1] = v15;
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D76E969C()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D76E96D4(uint64_t a1)
{
  void (*v2)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v4;
  uint64_t v5;

  uint64_t v2 = *(void (**)(uint64_t *__return_ptr, uint64_t *))(v1 + 16);
  uint64_t v5 = a1;
  v2(&v4, &v5);
  return v4;
}

uint64_t sub_1D76E9714()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

unint64_t sub_1D76E973C(uint64_t a1)
{
  unint64_t result = sub_1D76B10C8();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t dispatch thunk of _NormalizableError.normalized<A>(as:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t sub_1D76E9778@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 16))(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1D76E97AC()
{
  unint64_t result = qword_1EA83AC68;
  if (!qword_1EA83AC68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83AC68);
  }
  return result;
}

uint64_t sub_1D76E9800(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s25_NormalizationProviderKeyVwxx()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s25_NormalizationProviderKeyVwcp(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s25_NormalizationProviderKeyVwca(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s25_NormalizationProviderKeyVwta(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *_s25_NormalizationProviderKeyVMa()
{
  return &_s25_NormalizationProviderKeyVN;
}

unint64_t sub_1D76E9924()
{
  unint64_t result = qword_1EBA33ED0;
  if (!qword_1EBA33ED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBA33ED0);
  }
  return result;
}

uint64_t XPCFileTransfer.__allocating_init(forFileAt:)(char *a1)
{
  uint64_t v2 = swift_allocObject();
  XPCFileTransfer.init(forFileAt:)(a1);
  return v2;
}

uint64_t XPCFileTransfer.init(forFileAt:)(char *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1D76F7C04();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188788](v4);
  uint64_t v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188788](v6);
  uint64_t v10 = (char *)v20 - v9;
  *(void *)(v2 + 16) = 0;
  *(unsigned char *)(v2 + 24) = -1;
  *(void *)(v2 + 32) = 0;
  *(unsigned char *)(v2 + 40) = 1;
  *(void *)(v2 + 48) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28E08]), sel_init);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  uint64_t v21 = a1;
  v11(v10, a1, v4);
  LOBYTE(a1) = sub_1D76F7BC4();
  unint64_t v12 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
  uint64_t result = v12(v10, v4);
  if (a1)
  {
    uint64_t v14 = v21;
    v11(v8, v21, v4);
    uint64_t v15 = v20[1];
    uint64_t v16 = sub_1D76B67B4(v8);
    if (v15)
    {
      swift_release();
      v12(v14, v4);
    }
    else
    {
      uint64_t v17 = v16;
      v12(v14, v4);
      uint64_t v18 = *(void *)(v2 + 16);
      *(void *)(v2 + 16) = v17;
      unsigned __int8 v19 = *(unsigned char *)(v2 + 24);
      *(unsigned char *)(v2 + 24) = 0;
      sub_1D76EB8B4(v18, v19);
    }
    return v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t XPCFileTransfer.__allocating_init(fileDescriptor:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 32) = 0;
  *(unsigned char *)(v2 + 40) = 1;
  *(void *)(v2 + 48) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28E08]), sel_init);
  *(void *)(v2 + 16) = a1;
  *(unsigned char *)(v2 + 24) = 0;
  sub_1D76EB8B4(0, 0xFFu);
  return v2;
}

uint64_t XPCFileTransfer.init(fileDescriptor:)(uint64_t a1)
{
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = -1;
  *(void *)(v1 + 32) = 0;
  *(unsigned char *)(v1 + 40) = 1;
  *(void *)(v1 + 48) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28E08]), sel_init);
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = a1;
  unsigned __int8 v4 = *(unsigned char *)(v1 + 24);
  *(unsigned char *)(v1 + 24) = 0;
  sub_1D76EB8B4(v3, v4);
  return v1;
}

uint64_t sub_1D76E9C9C()
{
  uint64_t v1 = *(void **)(v0 + 48);
  objc_msgSend(v1, sel_lock);
  sub_1D76E9D04(v0, (uint64_t)&v3);
  objc_msgSend(v1, sel_unlock);
  return v3;
}

uint64_t sub_1D76E9D04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v12 = *MEMORY[0x1E4F143C0];
  if (*(unsigned char *)(a1 + 40) != 1)
  {
    uint64_t result = *(void *)(a1 + 32);
    goto LABEL_13;
  }
  int v4 = *(unsigned __int8 *)(a1 + 24);
  if (v4 == 255) {
    goto LABEL_10;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t result = xpc_file_transfer_get_size();
    goto LABEL_11;
  }
  int v6 = *(_DWORD *)(v5 + 64);
  memset(&v11, 0, 28);
  memset(&v11.st_atimespec, 0, 112);
  sub_1D76EB8D8(v5, 0);
  if (fstat(v6, &v11))
  {
    sub_1D76EB8B4(v5, v4);
    uint64_t result = -1;
    goto LABEL_11;
  }
  st_mode_t mode = v11.st_mode;
  int v9 = sub_1D76F7E34() & st_mode;
  LOWORD(st_mode) = sub_1D76F7E44();
  sub_1D76EB8B4(v5, v4);
  if (v9 != (unsigned __int16)st_mode) {
LABEL_10:
  }
    uint64_t result = -1;
  else {
    uint64_t result = v11.st_size & ~(v11.st_size >> 63);
  }
LABEL_11:
  if (*(unsigned char *)(a1 + 40) == 1)
  {
    *(void *)(a1 + 32) = result;
    *(unsigned char *)(a1 + 40) = 0;
  }
LABEL_13:
  if (result == -1)
  {
    uint64_t result = 0;
    char v10 = 1;
  }
  else
  {
    char v10 = 0;
  }
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v10;
  return result;
}

uint64_t sub_1D76E9E7C()
{
  uint64_t v3 = v0;
  uint64_t v13 = *MEMORY[0x1E4F143C0];
  int v4 = *(void **)(v0 + 48);
  objc_msgSend(v4, sel_lock);
  int v5 = *(unsigned __int8 *)(v3 + 24);
  if (v5 == 255)
  {
    uint64_t result = sub_1D76F85B4();
    __break(1u);
  }
  else
  {
    uint64_t v6 = *(void *)(v3 + 16);
    *(void *)(v3 + 16) = 0;
    *(unsigned char *)(v3 + 24) = -1;
    sub_1D76EB8D8(v6, v5 & 1);
    sub_1D76EB8B4(v6, v5);
    objc_msgSend(v4, sel_unlock);
    if ((v5 & 1) == 0) {
      return v6;
    }
    uint64_t v7 = sub_1D76B6520();
    if (v1)
    {
      sub_1D76EB8B4(v6, v5);
    }
    else
    {
      uint64_t v2 = v7;
      uint64_t v9 = sub_1D76B4644();
      int v12 = 1;
      MEMORY[0x1D9475230](*(unsigned int *)(v2 + 64), 73, &v12);
      MEMORY[0x1D9475230](v9, 73, &v12);
      aBlock[4] = sub_1D76EC104;
      aBlock[5] = v3;
      aBlock[0] = MEMORY[0x1E4F143A0];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1D76DEBB8;
      aBlock[3] = &block_descriptor_25;
      char v10 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      xpc_file_transfer_write_to_fd();
      sub_1D76EB8B4(v6, v5);
      swift_release();
      _Block_release(v10);
    }
    return v2;
  }
  return result;
}

void sub_1D76EA0BC(int a1)
{
  uint64_t v2 = sub_1D76F7A64();
  MEMORY[0x1F4188788](v2);
  int v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    sub_1D76F82B4();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBA33F30);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = MEMORY[0x1E4FBC150];
    *(_OWORD *)(v5 + 16) = xmmword_1D76FB290;
    uint64_t v7 = MEMORY[0x1E4FBC1C0];
    *(void *)(v5 + 56) = v6;
    *(void *)(v5 + 64) = v7;
    *(_DWORD *)(v5 + 32) = a1;
    sub_1D769C348(MEMORY[0x1E4FBC860]);
    POSIXError.init(uncheckedCode:userInfo:)(a1, (uint64_t)v4);
    uint64_t v8 = sub_1D76F8044();
    uint64_t v10 = v9;
    *(void *)(v5 + 96) = MEMORY[0x1E4FBB1A0];
    *(void *)(v5 + 104) = sub_1D76B6EA0();
    *(void *)(v5 + 72) = v8;
    *(void *)(v5 + 80) = v10;
    sub_1D76DCE60();
    stat v11 = (void *)sub_1D76F8394();
    sub_1D76F7D84();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1D76EA218()
{
  uint64_t v2 = *(void **)(v0 + 48);
  objc_msgSend(v2, sel_lock);
  int v3 = *(unsigned __int8 *)(v0 + 24);
  if (v3 != 255)
  {
    uint64_t v4 = *(void *)(v0 + 16);
    *(void *)(v0 + 16) = 0;
    *(unsigned char *)(v0 + 24) = -1;
    sub_1D76EB8D8(v4, v3 & 1);
    sub_1D76EB8B4(v4, v3);
    objc_msgSend(v2, sel_unlock);
    if ((v3 & 1) == 0)
    {
      sub_1D76B4644();
      if (!v1)
      {
        aBlock[4] = nullsub_1;
        aBlock[5] = 0;
        aBlock[0] = MEMORY[0x1E4F143A0];
        aBlock[1] = 1107296256;
        aBlock[2] = sub_1D76DEBB8;
        aBlock[3] = &block_descriptor_22;
        uint64_t v5 = _Block_copy(aBlock);
        uint64_t v6 = xpc_file_transfer_create_with_fd();
        _Block_release(v5);
        if (v6)
        {
          sub_1D76EB8B4(v4, v3);
          return v6;
        }
        unint64_t v8 = sub_1D769C348(MEMORY[0x1E4FBC860]);
        sub_1D76B10C8();
        swift_allocError();
        static XPCError.unknown(_:from:userInfo:)(0xD000000000000023, 0x80000001D76FEBB0, 0, v8, v9);
        swift_bridgeObjectRelease();
        swift_willThrow();
      }
      sub_1D76EB8B4(v4, v3);
    }
    return v4;
  }
  uint64_t result = sub_1D76F85B4();
  __break(1u);
  return result;
}

uint64_t sub_1D76EA42C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, double), uint64_t a4, void (*a5)(void *), uint64_t a6)
{
  uint64_t v12 = sub_1D76F7C04();
  MEMORY[0x1F4188788](v12);
  uint64_t v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void **)a2;
  uint64_t v15 = *(void **)(a2 + 8);
  (*(void (**)(char *, uint64_t))(v17 + 16))(v14, a1);
  v23[0] = v16;
  v23[1] = v15;
  id v18 = v15;
  id v19 = v16;
  sub_1D76B6B08(v14, (uint64_t)v23);
  sub_1D76EA588(v20, a3, a4, a5, a6);
  return swift_release();
}

void sub_1D76EA588(uint64_t a1, uint64_t (*a2)(uint64_t, double), uint64_t a3, void (*a4)(void *), uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = sub_1D76F7A64();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188788](v12);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t v16 = swift_retain();
    if ((a2(v16, 0.0) & 1) == 0)
    {
      LODWORD(aBlock[0]) = 89;
      sub_1D769C348(MEMORY[0x1E4FBC860]);
      sub_1D76EBB0C((unint64_t *)&qword_1EA83AC90, MEMORY[0x1E4F26C30]);
      sub_1D76F7B74();
      uint64_t v23 = (void *)sub_1D76F7A44();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
      a4(v23);
      sub_1D76CCEE8((uint64_t)a2);

      return;
    }
    sub_1D76CCEE8((uint64_t)a2);
  }
  uint64_t v29 = a4;
  uint64_t v17 = *(void **)(v5 + 48);
  objc_msgSend(*(id *)(v6 + 48), sel_lock);
  int v18 = *(unsigned __int8 *)(v6 + 24);
  if (v18 == 255)
  {
    sub_1D76F85B4();
    __break(1u);
  }
  else
  {
    uint64_t v19 = *(void *)(v6 + 16);
    *(void *)(v6 + 16) = 0;
    *(unsigned char *)(v6 + 24) = -1;
    sub_1D76EB8D8(v19, v18 & 1);
    sub_1D76EB8B4(v19, v18);
    objc_msgSend(v17, sel_unlock);
    if (v18)
    {
      sub_1D76B4644();
      uint64_t v24 = (void *)swift_allocObject();
      void v24[2] = a2;
      v24[3] = a3;
      void v24[4] = v29;
      v24[5] = a5;
      v24[6] = v6;
      aBlock[4] = sub_1D76EB8E8;
      aBlock[5] = v24;
      aBlock[0] = MEMORY[0x1E4F143A0];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1D76DEBB8;
      aBlock[3] = &block_descriptor_7;
      uint64_t v25 = _Block_copy(aBlock);
      sub_1D76D04A8((uint64_t)a2);
      swift_retain();
      swift_retain();
      swift_release();
      xpc_file_transfer_write_to_fd();
      sub_1D76EB8B4(v19, v18);
      _Block_release(v25);
    }
    else
    {
      uint64_t v28 = a1;
      uint64_t v20 = a5;
      if (a2)
      {
        uint64_t v21 = (void *)swift_allocObject();
        void v21[2] = a2;
        _OWORD v21[3] = a3;
        v21[4] = v6;
        swift_retain();
        uint64_t v22 = sub_1D76EB9FC;
      }
      else
      {
        uint64_t v22 = 0;
        uint64_t v21 = 0;
      }
      type metadata accessor for XPCFileDescriptor();
      uint64_t v26 = (void *)swift_allocObject();
      v26[2] = a2;
      v26[3] = a3;
      v26[4] = v29;
      v26[5] = v20;
      v26[6] = v6;
      sub_1D76D04A8((uint64_t)a2);
      sub_1D76D04A8((uint64_t)a2);
      swift_retain();
      swift_retain();
      static XPCFileDescriptor.splice(from:to:on:reportingProgressUsing:completion:)(v19, v28, 0, (uint64_t)v22, (uint64_t)v21, (uint64_t)sub_1D76EB964, (uint64_t)v26);
      swift_release();
      sub_1D76CCEE8((uint64_t)v22);
      sub_1D76EB8B4(v19, v18);
    }
  }
}

uint64_t sub_1D76EAA64(uint64_t result, BOOL *a2, uint64_t (*a3)(uint64_t, __n128), __n128 a4, uint64_t a5, uint64_t a6)
{
  if (!result)
  {
    a4.n128_u64[0] = 0;
    goto LABEL_6;
  }
  unint64_t v9 = result;
  uint64_t v10 = *(void **)(a6 + 48);
  objc_msgSend(v10, sel_lock);
  sub_1D76E9D04(a6, (uint64_t)&v11);
  uint64_t result = (uint64_t)objc_msgSend(v10, sel_unlock);
  if ((v12 & 1) == 0 && v11 > v9)
  {
    a4.n128_f64[0] = (double)v9 / (double)v11;
LABEL_6:
    uint64_t result = a3(result, a4);
    *a2 = (result & 1) == 0;
  }
  return result;
}

void sub_1D76EAB20(int a1, void (*a2)(uint64_t, double), uint64_t a3, void (*a4)(void *))
{
  uint64_t v7 = sub_1D76F7A64();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188788](v7);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    sub_1D769C348(MEMORY[0x1E4FBC860]);
    POSIXError.init(uncheckedCode:userInfo:)(a1, (uint64_t)v10);
    unint64_t v11 = (void *)sub_1D76F7A44();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    a4(v11);
  }
  else
  {
    if (a2)
    {
      uint64_t v12 = swift_retain();
      a2(v12, 1.0);
      sub_1D76CCEE8((uint64_t)a2);
    }
    a4(0);
  }
}

unint64_t sub_1D76EAC74()
{
  uint64_t v1 = 0x54656C6946637078;
  if (*v0 != 1) {
    uint64_t v1 = 0x6465746365707865;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0xD000000000000011;
  }
}

uint64_t sub_1D76EACEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1D76EB718(a1, a2);
  *a3 = result;
  return result;
}

void sub_1D76EAD14(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1D76EAD20(uint64_t a1)
{
  unint64_t v2 = sub_1D76EBAB8();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1D76EAD5C(uint64_t a1)
{
  unint64_t v2 = sub_1D76EBAB8();

  return MEMORY[0x1F41862B0](a1, v2);
}

id sub_1D76EAD98(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = (uint64_t)v1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AC98);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188788](v6);
  uint64_t v9 = (char *)&v19[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D76B116C(a1, (uint64_t)v19);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA83ACA0);
  type metadata accessor for _XPCObjectEncoder();
  if (!swift_dynamicCast())
  {
    unint64_t v13 = sub_1D769C348(MEMORY[0x1E4FBC860]);
    sub_1D76B10C8();
    swift_allocError();
    static XPCError.xpcCoderRequired(_:from:userInfo:)(0xD00000000000003BLL, 0x80000001D76FEAA0, 0, v13, v14);
    swift_bridgeObjectRelease();
    return (id)swift_willThrow();
  }
  uint64_t v10 = v18;
  if (!*(void *)(v18 + 24))
  {
    unint64_t v16 = sub_1D769C348(MEMORY[0x1E4FBC860]);
    sub_1D76B10C8();
    swift_allocError();
    static XPCError.xpcCoderRequired(_:from:userInfo:)(0xD000000000000060, 0x80000001D76FEAE0, 0, v16, v17);
    swift_bridgeObjectRelease();
    swift_willThrow();
    return (id)swift_release();
  }
  swift_retain();
  *(void *)(v10 + 16) = xpc_dictionary_create(0, 0, 0);
  swift_unknownObjectRelease();
  uint64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    uint64_t v12 = *(void *)(v10 + 32);
    v19[0] = v10;
    v19[1] = v11;
    v19[2] = v12;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83ACB0);
    sub_1D76EBA08();
    sub_1D76F8794();
    uint64_t v1 = (void *)v1[6];
    objc_msgSend(*(id *)(v4 + 48), sel_lock);
    sub_1D76E9D04(v4, (uint64_t)v19);
    if (!v3)
    {
      objc_msgSend(v1, sel_unlock);
      LOBYTE(v19[0]) = 2;
      sub_1D76F8704();
      type metadata accessor for RemoteXPCConnection();
      if (swift_dynamicCastClass())
      {
        v19[0] = sub_1D76EA218();
        LOBYTE(v18) = 1;
        sub_1D76EBA64();
        swift_unknownObjectRetain();
        sub_1D76F8754();
        swift_release();
        swift_unknownObjectRelease_n();
        swift_release();
        return (id)(*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      }
      v19[0] = sub_1D76E9E7C();
      LOBYTE(v18) = 0;
      type metadata accessor for XPCFileDescriptor();
      sub_1D76EBB0C(&qword_1EA83ACC0, (void (*)(uint64_t))type metadata accessor for XPCFileDescriptor);
      sub_1D76F8754();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      swift_release();
      swift_release();
      return (id)swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  id result = objc_msgSend(v1, sel_unlock);
  __break(1u);
  return result;
}

uint64_t XPCFileTransfer.__allocating_init(from:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  XPCFileTransfer.init(from:)(a1);
  return v2;
}

uint64_t XPCFileTransfer.init(from:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83ACD0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188788](v5);
  uint64_t v8 = (char *)&v19[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = -1;
  *(void *)(v1 + 32) = 0;
  *(unsigned char *)(v1 + 40) = 1;
  *(void *)(v1 + 48) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28E08]), sel_init);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D76EBAB8();
  sub_1D76F8D94();
  if (v2)
  {
    swift_release();
    goto LABEL_4;
  }
  LOBYTE(v19[0]) = 2;
  *(void *)(v1 + 32) = sub_1D76F8654();
  *(unsigned char *)(v1 + 40) = v10 & 1;
  LOBYTE(v20) = 1;
  sub_1D76B6E4C();
  sub_1D76F8644();
  uint64_t v11 = v19[0];
  if (!v19[0])
  {
    type metadata accessor for XPCFileDescriptor();
    LOBYTE(v20) = 0;
    sub_1D76EBB0C(&qword_1EA83ACE8, (void (*)(uint64_t))type metadata accessor for XPCFileDescriptor);
    sub_1D76F86A4();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v14 = *(void *)(v3 + 16);
    *(void *)(v3 + 16) = v19[0];
    unsigned __int8 v15 = *(unsigned char *)(v3 + 24);
    *(unsigned char *)(v3 + 24) = 0;
LABEL_11:
    sub_1D76EB8B4(v14, v15);
    goto LABEL_4;
  }
  uint64_t v12 = (const _xpc_type_s *)MEMORY[0x1D94771B0](v19[0]);
  if (v12 == (const _xpc_type_s *)XPCTypeFileTransfer)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v14 = *(void *)(v3 + 16);
    *(void *)(v3 + 16) = v11;
    unsigned __int8 v15 = *(unsigned char *)(v3 + 24);
    *(unsigned char *)(v3 + 24) = 1;
    goto LABEL_11;
  }
  uint64_t v18 = v12;
  swift_release();
  sub_1D76B116C((uint64_t)a1, (uint64_t)v19);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA83ACF0);
  type metadata accessor for _XPCObjectDecoder();
  if (swift_dynamicCast())
  {
    uint64_t v13 = *(void *)(v20 + 24);
    swift_retain();
    swift_release();
  }
  else
  {
    uint64_t v13 = 0;
  }
  unint64_t v16 = sub_1D769C348(MEMORY[0x1E4FBC860]);
  sub_1D76B10C8();
  swift_allocError();
  static XPCError.invalidType(_:expecting:from:userInfo:)(v18, 0, v13, v16, v17);
  swift_bridgeObjectRelease();
  swift_willThrow();
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
LABEL_4:
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return v3;
}

uint64_t XPCFileTransfer.deinit()
{
  sub_1D76EB8B4(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));

  return v0;
}

uint64_t XPCFileTransfer.__deallocating_deinit()
{
  sub_1D76EB8B4(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));

  return MEMORY[0x1F4186488](v0, 56, 7);
}

uint64_t sub_1D76EB69C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for XPCFileTransfer();
  uint64_t v5 = swift_allocObject();
  uint64_t result = XPCFileTransfer.init(from:)(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

id sub_1D76EB6F4(uint64_t a1)
{
  return sub_1D76EAD98(a1);
}

uint64_t sub_1D76EB718(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x80000001D76FEB90 || (sub_1D76F89E4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x54656C6946637078 && a2 == 0xEF726566736E6172 || (sub_1D76F89E4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6465746365707865 && a2 == 0xEE006874676E654CLL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v5 = sub_1D76F89E4();
    swift_bridgeObjectRelease();
    if (v5) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1D76EB8B4(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return sub_1D76EB8CC(result, a2 & 1);
  }
  return result;
}

uint64_t sub_1D76EB8CC(uint64_t a1, char a2)
{
  if (a2) {
    return swift_unknownObjectRelease();
  }
  else {
    return swift_release();
  }
}

uint64_t sub_1D76EB8D8(uint64_t a1, char a2)
{
  if (a2) {
    return swift_unknownObjectRetain();
  }
  else {
    return swift_retain();
  }
}

void sub_1D76EB8E8(int a1)
{
  sub_1D76EAB20(a1, *(void (**)(uint64_t, double))(v1 + 16), *(void *)(v1 + 24), *(void (**)(void *))(v1 + 32));
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t objectdestroyTm()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t sub_1D76EB964(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v2 + 32);
  if (!a2)
  {
    char v5 = *(void (**)(double))(v2 + 16);
    if (v5) {
      v5(1.0);
    }
  }
  return v4(a2);
}

uint64_t sub_1D76EB9BC()
{
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_1D76EB9FC(uint64_t a1, BOOL *a2, __n128 a3)
{
  return sub_1D76EAA64(a1, a2, *(uint64_t (**)(uint64_t, __n128))(v3 + 16), a3, *(void *)(v3 + 24), *(void *)(v3 + 32));
}

unint64_t sub_1D76EBA08()
{
  unint64_t result = qword_1EA83ACB8;
  if (!qword_1EA83ACB8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA83ACB0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83ACB8);
  }
  return result;
}

unint64_t sub_1D76EBA64()
{
  unint64_t result = qword_1EA83ACC8;
  if (!qword_1EA83ACC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83ACC8);
  }
  return result;
}

unint64_t sub_1D76EBAB8()
{
  unint64_t result = qword_1EA83ACD8;
  if (!qword_1EA83ACD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83ACD8);
  }
  return result;
}

uint64_t sub_1D76EBB0C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for XPCFileTransfer()
{
  return self;
}

uint64_t method lookup function for XPCFileTransfer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for XPCFileTransfer);
}

uint64_t dispatch thunk of XPCFileTransfer.__allocating_init(forFileAt:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of XPCFileTransfer.__allocating_init(fileDescriptor:)()
{
  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t dispatch thunk of XPCFileTransfer.expectedLength.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of XPCFileTransfer.write(to:options:reportingProgressUsing:completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of XPCFileTransfer.write(to:reportingProgressUsing:completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of XPCFileTransfer.encode(to:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of XPCFileTransfer.__allocating_init(from:)()
{
  return (*(uint64_t (**)(void))(v0 + 224))();
}

uint64_t initializeBufferWithCopyOfBuffer for XPCFileTransfer.Value(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  sub_1D76EB8D8(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for XPCFileTransfer.Value(uint64_t a1)
{
  return sub_1D76EB8CC(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t assignWithCopy for XPCFileTransfer.Value(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  sub_1D76EB8D8(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  sub_1D76EB8CC(v5, v6);
  return a1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t assignWithTake for XPCFileTransfer.Value(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v4 = *((unsigned char *)a2 + 8);
  uint64_t v5 = *(void *)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  sub_1D76EB8CC(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for XPCFileTransfer.Value(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCFileTransfer.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1D76EBE44(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_1D76EBE4C(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for XPCFileTransfer.Value()
{
  return &type metadata for XPCFileTransfer.Value;
}

uint64_t getEnumTagSinglePayload for XPCFileTransfer._CodingKey(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for XPCFileTransfer._CodingKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D76EBFC4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCFileTransfer._CodingKey()
{
  return &type metadata for XPCFileTransfer._CodingKey;
}

unint64_t sub_1D76EC000()
{
  unint64_t result = qword_1EA83AD00;
  if (!qword_1EA83AD00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83AD00);
  }
  return result;
}

unint64_t sub_1D76EC058()
{
  unint64_t result = qword_1EA83AD08;
  if (!qword_1EA83AD08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83AD08);
  }
  return result;
}

unint64_t sub_1D76EC0B0()
{
  unint64_t result = qword_1EA83AD10;
  if (!qword_1EA83AD10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83AD10);
  }
  return result;
}

void sub_1D76EC104(int a1)
{
}

uint64_t static XPCError.xpcCoderRequired(_:from:userInfo:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = sub_1D76F7FF4();
  uint64_t v12 = v11;
  uint64_t v13 = MEMORY[0x1E4FBB1A0];
  uint64_t v22 = MEMORY[0x1E4FBB1A0];
  *(void *)&long long v21 = a1;
  *((void *)&v21 + 1) = a2;
  sub_1D769B2A0(&v21, v20);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1D76EE330(v20, v10, v12, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F28);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D76FA300;
  *(void *)(inited + 32) = sub_1D76F7FF4();
  *(void *)(inited + 40) = v16;
  *(void *)(inited + 72) = v13;
  *(void *)(inited + 48) = 0xD00000000000005FLL;
  *(void *)(inited + 56) = 0x80000001D76FEC20;
  unint64_t v17 = sub_1D769B168(inited);
  XPCError.init(code:userInfo:)(1005, (Swift::OpaquePointer)v17);
  v20[0] = v21;
  swift_retain();
  unint64_t v18 = sub_1D769B168(MEMORY[0x1E4FBC860]);
  return sub_1D76EDC4C((uint64_t)v20, a4, a3, v18, a5);
}

uint64_t static XPCError.unknown(_:from:userInfo:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = sub_1D76F7FF4();
  uint64_t v12 = v11;
  uint64_t v13 = MEMORY[0x1E4FBB1A0];
  uint64_t v24 = MEMORY[0x1E4FBB1A0];
  *(void *)&long long v23 = a1;
  *((void *)&v23 + 1) = a2;
  sub_1D769B2A0(&v23, v22);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v25 = 0x8000000000000000;
  sub_1D76EE330(v22, v10, v12, isUniquelyReferenced_nonNull_native);
  unint64_t v25 = a4;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a3)
  {
    uint64_t v24 = type metadata accessor for XPCConnection();
    *(void *)&long long v23 = a3;
    sub_1D769B2A0(&v23, v22);
    swift_retain();
    uint64_t v15 = v25;
    char v16 = swift_isUniquelyReferenced_nonNull_native();
    sub_1D76EE330(v22, 0x656E6E6F43435058, 0xED00006E6F697463, v16);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1D76AF764(0x656E6E6F43435058, 0xED00006E6F697463, &v23);
    sub_1D76EE484((uint64_t)&v23);
    uint64_t v15 = v25;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F28);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D76FA300;
  *(void *)(inited + 32) = sub_1D76F7FF4();
  *(void *)(inited + 40) = v18;
  *(void *)(inited + 72) = v13;
  *(void *)(inited + 48) = 0xD00000000000001ALL;
  *(void *)(inited + 56) = 0x80000001D76FE7E0;
  unint64_t v19 = sub_1D769B168(inited);
  XPCError.init(code:userInfo:)(-1, (Swift::OpaquePointer)v19);
  v22[0] = v23;
  swift_retain();
  unint64_t v20 = sub_1D769B168(MEMORY[0x1E4FBC860]);
  return sub_1D76EDC4C((uint64_t)v22, v15, a3, v20, a5);
}

uint64_t static XPCError.invalidType(_:expecting:from:userInfo:)@<X0>(const _xpc_type_s *a1@<X0>, const _xpc_type_s *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  xpc_type_get_name(a1);
  uint64_t v7 = sub_1D76F80B4();
  uint64_t v8 = MEMORY[0x1E4FBB1A0];
  uint64_t v34 = MEMORY[0x1E4FBB1A0];
  *(void *)&long long v33 = v7;
  *((void *)&v33 + 1) = v9;
  sub_1D769B2A0(&v33, v32);
  swift_bridgeObjectRetain();
  unint64_t v10 = MEMORY[0x1E4FBC868];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1D76EE330(v32, 0x79546C6175746341, 0xEA00000000006570, isUniquelyReferenced_nonNull_native);
  unint64_t v35 = v10;
  swift_bridgeObjectRelease();
  if (a2)
  {
    xpc_type_get_name(a2);
    uint64_t v12 = sub_1D76F80B4();
    uint64_t v34 = MEMORY[0x1E4FBB1A0];
    *(void *)&long long v33 = v12;
    *((void *)&v33 + 1) = v13;
    sub_1D769B2A0(&v33, v32);
    swift_bridgeObjectRetain();
    char v14 = swift_isUniquelyReferenced_nonNull_native();
    sub_1D76EE330(v32, 0x6465746365707845, 0xEC00000065707954, v14);
    unint64_t v35 = v10;
    swift_bridgeObjectRelease();
    uint64_t v15 = sub_1D76F7FF4();
    uint64_t v17 = v16;
    *(void *)&long long v33 = 0;
    *((void *)&v33 + 1) = 0xE000000000000000;
    sub_1D76F8464();
    sub_1D76F80A4();
    sub_1D76F80A4();
    swift_bridgeObjectRelease();
    sub_1D76F80A4();
    uint64_t v8 = MEMORY[0x1E4FBB1A0];
    sub_1D76F80A4();
    swift_bridgeObjectRelease();
    sub_1D76F80A4();
    uint64_t v34 = v8;
    sub_1D769B2A0(&v33, v32);
    unint64_t v18 = v35;
    char v19 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v35 = 0x8000000000000000;
    sub_1D76EE330(v32, v15, v17, v19);
  }
  else
  {
    uint64_t v20 = sub_1D76F7FF4();
    uint64_t v22 = v21;
    *(void *)&long long v33 = 0;
    *((void *)&v33 + 1) = 0xE000000000000000;
    sub_1D76F8464();
    swift_bridgeObjectRelease();
    *(void *)&long long v33 = 0xD000000000000010;
    *((void *)&v33 + 1) = 0x80000001D76FEC80;
    sub_1D76F80A4();
    swift_bridgeObjectRelease();
    sub_1D76F80A4();
    uint64_t v34 = v8;
    sub_1D769B2A0(&v33, v32);
    unint64_t v18 = v35;
    char v23 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v35 = 0x8000000000000000;
    sub_1D76EE330(v32, v20, v22, v23);
  }
  unint64_t v35 = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a3)
  {
    uint64_t v34 = type metadata accessor for XPCConnection();
    *(void *)&long long v33 = a3;
    sub_1D769B2A0(&v33, v32);
    swift_retain();
    uint64_t v24 = v35;
    char v25 = swift_isUniquelyReferenced_nonNull_native();
    sub_1D76EE330(v32, 0x656E6E6F43435058, 0xED00006E6F697463, v25);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1D76AF764(0x656E6E6F43435058, 0xED00006E6F697463, &v33);
    sub_1D76EE484((uint64_t)&v33);
    uint64_t v24 = v35;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F28);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D76FA300;
  *(void *)(inited + 32) = sub_1D76F7FF4();
  *(void *)(inited + 40) = v27;
  *(void *)(inited + 72) = v8;
  *(void *)(inited + 48) = 0xD000000000000022;
  *(void *)(inited + 56) = 0x80000001D76FECC0;
  unint64_t v28 = sub_1D769B168(inited);
  XPCError.init(code:userInfo:)(1004, (Swift::OpaquePointer)v28);
  v32[0] = v33;
  swift_retain();
  swift_bridgeObjectRetain();
  return sub_1D76EDC4C((uint64_t)v32, a4, a3, v24, a5);
}

void XPCError.init(_:from:userInfo:)()
{
}

uint64_t sub_1D76EC9A8(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  if (a1 != XPCTypeError)
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    uint64_t result = swift_release();
    void *v62 = 0;
    v62[1] = 0;
    return result;
  }
  if (xpc_equal(v63, (xpc_object_t)XPCErrorConnectionInterrupted))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F28);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1D76FA300;
    *(void *)(inited + 32) = sub_1D76F7FF4();
    *(void *)(inited + 40) = v69;
    *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
    *(void *)(inited + 48) = 0xD00000000000001FLL;
    *(void *)(inited + 56) = 0x80000001D76FEDD0;
    unint64_t v70 = sub_1D769B168(inited);
    Swift::Int32 v71 = 1000;
  }
  else if (xpc_equal(v63, (xpc_object_t)XPCErrorConnectionInvalid))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F28);
    uint64_t v72 = swift_initStackObject();
    *(_OWORD *)(v72 + 16) = xmmword_1D76FA300;
    *(void *)(v72 + 32) = sub_1D76F7FF4();
    *(void *)(v72 + 40) = v73;
    *(void *)(v72 + 72) = MEMORY[0x1E4FBB1A0];
    *(void *)(v72 + 48) = 0xD00000000000001FLL;
    *(void *)(v72 + 56) = 0x80000001D76FE190;
    unint64_t v70 = sub_1D769B168(v72);
    Swift::Int32 v71 = 1001;
  }
  else if (xpc_equal(v63, (xpc_object_t)XPCErrorTerminationImminent))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F28);
    uint64_t v74 = swift_initStackObject();
    *(_OWORD *)(v74 + 16) = xmmword_1D76FA300;
    *(void *)(v74 + 32) = sub_1D76F7FF4();
    *(void *)(v74 + 40) = v75;
    *(void *)(v74 + 72) = MEMORY[0x1E4FBB1A0];
    *(void *)(v74 + 48) = 0xD000000000000015;
    *(void *)(v74 + 56) = 0x80000001D76FEDB0;
    unint64_t v70 = sub_1D769B168(v74);
    Swift::Int32 v71 = 1002;
  }
  else
  {
    if (qword_1EA83A4E8 != -1) {
      swift_once();
    }
    if (!xpc_equal(v63, (xpc_object_t)qword_1EA83AD18))
    {
      if (xpc_dictionary_get_string(v63, (const char *)XPCErrorKeyDescription))
      {
        uint64_t v81 = sub_1D76F80B4();
        static XPCError.unknown(_:from:userInfo:)(v81, v82, v64, v65, (void *)(v66 - 64));
        swift_bridgeObjectRelease();
      }
      else
      {
        static XPCError.unknown(_:from:userInfo:)(0xD000000000000010, 0x80000001D76FED20, v64, v65, (void *)(v66 - 64));
      }
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      uint64_t result = swift_release();
      goto LABEL_14;
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F28);
    uint64_t v76 = swift_initStackObject();
    *(_OWORD *)(v76 + 16) = xmmword_1D76FA300;
    *(void *)(v76 + 32) = sub_1D76F7FF4();
    *(void *)(v76 + 40) = v77;
    *(void *)(v76 + 72) = MEMORY[0x1E4FBB1A0];
    *(void *)(v76 + 48) = 0xD000000000000060;
    *(void *)(v76 + 56) = 0x80000001D76FED40;
    unint64_t v70 = sub_1D769B168(v76);
    Swift::Int32 v71 = 1006;
  }
  XPCError.init(code:userInfo:)(v71, (Swift::OpaquePointer)v70);
  uint64_t v78 = *(void *)(v66 - 72);
  *(void *)(v66 - 176) = *(void *)(v66 - 80);
  *(void *)(v66 - 168) = v78;
  unint64_t v79 = sub_1D769B168(MEMORY[0x1E4FBC860]);
  sub_1D76EDC4C(v66 - 176, v65, v64, v79, (void *)(v66 - 64));
  uint64_t result = swift_unknownObjectRelease();
LABEL_14:
  uint64_t v80 = *(void *)(v66 - 56);
  void *v62 = *(void *)(v66 - 64);
  v62[1] = v80;
  return result;
}

Swift::Int static XPCError.connectionInvalid.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F28);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D76FA300;
  *(void *)(inited + 32) = sub_1D76F7FF4();
  *(void *)(inited + 40) = v1;
  *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
  *(void *)(inited + 48) = 0xD00000000000001FLL;
  *(void *)(inited + 56) = 0x80000001D76FE190;
  unint64_t v2 = sub_1D769B168(inited);
  return XPCError.init(code:userInfo:)(1001, (Swift::OpaquePointer)v2).errorCode;
}

void sub_1D76ECDC8()
{
}

uint64_t sub_1D76ECE00(uint64_t a1)
{
  uint64_t v4 = XPCTypeDictionary;
  if (XPCTypeDictionary != a1)
  {
    sub_1D769B168(MEMORY[0x1E4FBC860]);
    swift_retain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    XPCError.init(_:from:userInfo:)();
  }
  uint64_t result = swift_release();
  *(void *)uint64_t v1 = v2;
  *(void *)(v1 + 8) = 0xD000000000000019;
  *(void *)(v1 + 16) = 0x80000001D76FD660;
  *(unsigned char *)(v1 + 24) = v4 != a1;
  return result;
}

id sub_1D76ECF1C()
{
  id result = (id)XPCErrorGetPeerCodeSigningRequirement();
  qword_1EA83AD18 = (uint64_t)result;
  return result;
}

uint64_t XPCErrorPeerCodeSigningRequirement.getter()
{
  if (qword_1EA83A4E8 != -1) {
    swift_once();
  }

  return swift_unknownObjectRetain();
}

unint64_t static XPCError.errorDomain.getter()
{
  return 0xD000000000000017;
}

uint64_t XPCError.errorCode.getter()
{
  return *(void *)v0;
}

uint64_t XPCError.errorUserInfo.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D76ECFCC(uint64_t a1)
{
  unint64_t v2 = sub_1D76EE514();

  return MEMORY[0x1F40E6E20](a1, v2);
}

uint64_t sub_1D76ED008(uint64_t a1)
{
  unint64_t v2 = sub_1D76EE514();

  return MEMORY[0x1F40E6E10](a1, v2);
}

Mercury::XPCError __swiftcall XPCError.init(code:userInfo:)(Swift::Int32 code, Swift::OpaquePointer userInfo)
{
  uint64_t v4 = v2;
  rawValue = userInfo._rawValue;
  if (!*((void *)userInfo._rawValue + 2))
  {
    long long v17 = 0u;
    long long v18 = 0u;
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1D769B2B0(0x656E6E6F43435058, 0xED00006E6F697463);
  if ((v7 & 1) == 0)
  {
    long long v17 = 0u;
    long long v18 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  sub_1D769A9C4(*((void *)userInfo._rawValue + 7) + 32 * v6, (uint64_t)&v17);
  swift_bridgeObjectRelease();
  if (!*((void *)&v18 + 1))
  {
LABEL_8:
    sub_1D76EE484((uint64_t)&v17);
    goto LABEL_9;
  }
  type metadata accessor for XPCConnection();
  if (swift_dynamicCast())
  {
    *(void *)&long long v17 = *(void *)&v16[0];
    swift_retain();
    uint64_t v8 = sub_1D76F8044();
    *((void *)&v18 + 1) = MEMORY[0x1E4FBB1A0];
    *(void *)&long long v17 = v8;
    *((void *)&v17 + 1) = v9;
    sub_1D769B2A0(&v17, v16);
    unint64_t v10 = rawValue;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1D76EE330(v16, 0xD000000000000018, 0x80000001D76FEE10, isUniquelyReferenced_nonNull_native);
    rawValue = v10;
    swift_release();
    swift_bridgeObjectRelease();
  }
LABEL_9:
  sub_1D76AF764(0x656E6E6F43435058, 0xED00006E6F697463, &v17);
  Swift::Int v12 = sub_1D76EE484((uint64_t)&v17);
  char v14 = rawValue;
  void *v4 = code;
  v4[1] = v14;
  result.errorUserInfo._rawValue = v13;
  result.errorCode = v12;
  return result;
}

Swift::Int sub_1D76ED200@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  id v4 = objc_msgSend(a1, sel_domain);
  uint64_t v5 = sub_1D76F7FF4();
  uint64_t v7 = v6;

  if (v5 == 0xD000000000000017 && v7 == 0x80000001D76FEDF0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v8 = sub_1D76F89E4();
    Swift::Int result = swift_bridgeObjectRelease();
    if ((v8 & 1) == 0)
    {
      *a2 = 0;
      a2[1] = 0;
      return result;
    }
  }
  unint64_t v10 = (ValueMetadata *)objc_msgSend(a1, sel_code);
  id v11 = objc_msgSend(a1, sel_userInfo);
  uint64_t v12 = sub_1D76F7ED4();

  Swift::Int32 v13 = sub_1D76EE0BC(v10);

  return XPCError.init(code:userInfo:)(v13, (Swift::OpaquePointer)v12).errorCode;
}

unint64_t sub_1D76ED34C()
{
  return 0xD000000000000017;
}

uint64_t sub_1D76ED368()
{
  return *(void *)v0;
}

uint64_t XPCError.hashValue.getter()
{
  return sub_1D76F8D54();
}

id sub_1D76ED3B8(void *a1, void *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v2 = (void *)sub_1D76F7EC4();
  swift_bridgeObjectRetain();
  int v3 = (void *)sub_1D76F7EC4();
  swift_bridgeObjectRelease();
  id v4 = objc_msgSend(v2, sel_isEqual_, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v4;
}

uint64_t sub_1D76ED4A0(uint64_t a1)
{
  return sub_1D76ED4B8(a1);
}

uint64_t sub_1D76ED4B8(uint64_t a1)
{
  uint64_t v3 = v1;
  sub_1D76BBA90(0, (unint64_t *)&qword_1EA83A778);
  sub_1D76B116C(a1, (uint64_t)&v31);
  uint64_t v5 = NSError.init(from:)(&v31);
  if (!v2)
  {
    uint64_t v6 = v5;
    id v7 = objc_msgSend(v5, sel_domain);
    uint64_t v8 = sub_1D76F7FF4();
    uint64_t v10 = v9;

    if (v8 == 0xD000000000000017 && v10 == 0x80000001D76FEDF0)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v11 = sub_1D76F89E4();
      swift_bridgeObjectRelease();
      if ((v11 & 1) == 0)
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F28);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1D76FA300;
        *(void *)(inited + 32) = sub_1D76F7FF4();
        *(void *)(inited + 40) = v17;
        *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
        *(void *)(inited + 48) = 0xD00000000000002FLL;
        *(void *)(inited + 56) = 0x80000001D76FEE70;
        unint64_t v18 = sub_1D769B168(inited);
        XPCError.init(code:userInfo:)(5, (Swift::OpaquePointer)v18);
        uint64_t v31 = 0;
        unint64_t v32 = 0xE000000000000000;
        sub_1D76F8464();
        sub_1D76F80A4();
        uint64_t v33 = v3;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AD38);
        sub_1D76F8044();
        sub_1D76F80A4();
        swift_bridgeObjectRelease();
        sub_1D76F80A4();
        uint64_t v19 = v31;
        unint64_t v20 = v32;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBA33F18);
        uint64_t v21 = swift_initStackObject();
        *(_OWORD *)(v21 + 16) = xmmword_1D76FA300;
        *(void *)(v21 + 32) = sub_1D76F7FF4();
        *(void *)(v21 + 40) = v22;
        *(void *)(v21 + 48) = v19;
        *(void *)(v21 + 56) = v20;
        unint64_t v23 = sub_1D769A048(v21);
        swift_bridgeObjectRetain();
        unint64_t v24 = sub_1D769ACCC(v23);
        swift_bridgeObjectRelease();
        unint64_t v25 = sub_1D769C348(MEMORY[0x1E4FBC860]);
        sub_1D76EDB3C(v29, v30, v24, v25);
        swift_bridgeObjectRelease();
        sub_1D76B10C8();
        if (sub_1D76F89B4())
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_allocError();
          unint64_t v26 = v32;
          *uint64_t v27 = v31;
          v27[1] = v26;
        }
        swift_willThrow();
        goto LABEL_11;
      }
    }
    uint64_t v12 = (ValueMetadata *)objc_msgSend(v6, sel_code);
    id v13 = objc_msgSend(v6, sel_userInfo);
    uint64_t v14 = sub_1D76F7ED4();

    Swift::Int32 v15 = sub_1D76EE0BC(v12);
    XPCError.init(code:userInfo:)(v15, (Swift::OpaquePointer)v14);
LABEL_11:
  }
  return __swift_destroy_boxed_opaque_existential_1Tm(a1);
}

void sub_1D76ED828(void *a1)
{
  sub_1D76ED844(a1, *v1, v1[1]);
}

void sub_1D76ED844(void *a1, uint64_t a2, uint64_t a3)
{
  sub_1D76B10C8();
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_1D76F89B4();
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = (void *)swift_allocError();
    *uint64_t v6 = a2;
    v6[1] = a3;
  }
  id v7 = (void *)sub_1D76F7B84();

  NSError.encode(to:)(a1);
}

uint64_t sub_1D76ED914()
{
  return sub_1D76ED9A4(*v0, v0[1]);
}

uint64_t sub_1D76ED938()
{
  return sub_1D76ED9A4(*v0, v0[1]);
}

uint64_t sub_1D76ED95C()
{
  return sub_1D76ED9A4(*v0, v0[1]);
}

uint64_t sub_1D76ED980()
{
  return sub_1D76ED9A4(*v0, v0[1]);
}

uint64_t sub_1D76ED9A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_1D76F7FF4();
  uint64_t v5 = v4;
  if (!*(void *)(a2 + 16))
  {
    long long v11 = 0u;
    long long v12 = 0u;
LABEL_10:
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  uint64_t v6 = v3;
  swift_bridgeObjectRetain();
  unint64_t v7 = sub_1D769B2B0(v6, v5);
  if ((v8 & 1) == 0)
  {
    long long v11 = 0u;
    long long v12 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  sub_1D769A9C4(*(void *)(a2 + 56) + 32 * v7, (uint64_t)&v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((void *)&v12 + 1))
  {
LABEL_11:
    sub_1D76EE484((uint64_t)&v11);
    return 0;
  }
  if (swift_dynamicCast()) {
    return v10;
  }
  else {
    return 0;
  }
}

Swift::Int static XPCError.xpcError.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F28);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D76FA300;
  *(void *)(inited + 32) = sub_1D76F7FF4();
  *(void *)(inited + 40) = v1;
  *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
  *(void *)(inited + 48) = 0xD00000000000003CLL;
  *(void *)(inited + 56) = 0x80000001D76FEE30;
  unint64_t v2 = sub_1D769B168(inited);
  return XPCError.init(code:userInfo:)(3, (Swift::OpaquePointer)v2).errorCode;
}

uint64_t sub_1D76EDB3C(ValueMetadata *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v14 = (void *)a3;
  sub_1D76F68E4(a4, (uint64_t)sub_1D769C2AC, 0, isUniquelyReferenced_nonNull_native, (uint64_t *)&v14);
  uint64_t v9 = (uint64_t)v14;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  char v10 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v14 = (void *)v9;
  sub_1D76F68E4(a2, (uint64_t)sub_1D769C2AC, 0, v10, (uint64_t *)&v14);
  v11._rawValue = v14;
  swift_bridgeObjectRelease();
  Swift::Int32 v12 = sub_1D76EE0BC(a1);
  XPCError.init(code:userInfo:)(v12, v11);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1D76EDC4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v9 = *(ValueMetadata **)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v17 = a2;
  if (a3)
  {
    uint64_t v10 = a2;
    uint64_t v16 = type metadata accessor for XPCConnection();
    *(void *)&long long v15 = a3;
    sub_1D769B2A0(&v15, v14);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1D76EE330(v14, 0x656E6E6F43435058, 0xED00006E6F697463, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1D76AF764(0x656E6E6F43435058, 0xED00006E6F697463, &v15);
    sub_1D76EE484((uint64_t)&v15);
    uint64_t v10 = v17;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1D76EDB3C(v9, v8, v10, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  uint64_t v13 = *((void *)&v15 + 1);
  *a5 = v15;
  a5[1] = v13;
  return result;
}

Swift::Int static XPCError.connectionInterrupted.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F28);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D76FA300;
  *(void *)(inited + 32) = sub_1D76F7FF4();
  *(void *)(inited + 40) = v1;
  *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
  *(void *)(inited + 48) = 0xD00000000000001FLL;
  *(void *)(inited + 56) = 0x80000001D76FEDD0;
  unint64_t v2 = sub_1D769B168(inited);
  return XPCError.init(code:userInfo:)(1000, (Swift::OpaquePointer)v2).errorCode;
}

Swift::Int static XPCError.terminationImminent.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F28);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D76FA300;
  *(void *)(inited + 32) = sub_1D76F7FF4();
  *(void *)(inited + 40) = v1;
  *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
  *(void *)(inited + 48) = 0xD000000000000015;
  *(void *)(inited + 56) = 0x80000001D76FEDB0;
  unint64_t v2 = sub_1D769B168(inited);
  return XPCError.init(code:userInfo:)(1002, (Swift::OpaquePointer)v2).errorCode;
}

Swift::Int static XPCError.invalidType.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F28);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D76FA300;
  *(void *)(inited + 32) = sub_1D76F7FF4();
  *(void *)(inited + 40) = v1;
  *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
  *(void *)(inited + 48) = 0xD000000000000022;
  *(void *)(inited + 56) = 0x80000001D76FECC0;
  unint64_t v2 = sub_1D769B168(inited);
  return XPCError.init(code:userInfo:)(1004, (Swift::OpaquePointer)v2).errorCode;
}

Swift::Int static XPCError.xpcCoderRequired.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F28);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D76FA300;
  *(void *)(inited + 32) = sub_1D76F7FF4();
  *(void *)(inited + 40) = v1;
  *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
  *(void *)(inited + 48) = 0xD00000000000005FLL;
  *(void *)(inited + 56) = 0x80000001D76FEC20;
  unint64_t v2 = sub_1D769B168(inited);
  return XPCError.init(code:userInfo:)(1005, (Swift::OpaquePointer)v2).errorCode;
}

Swift::Int static XPCError.peerCodeSigningRequirement.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F28);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D76FA300;
  *(void *)(inited + 32) = sub_1D76F7FF4();
  *(void *)(inited + 40) = v1;
  *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
  *(void *)(inited + 48) = 0xD000000000000060;
  *(void *)(inited + 56) = 0x80000001D76FED40;
  unint64_t v2 = sub_1D769B168(inited);
  return XPCError.init(code:userInfo:)(1006, (Swift::OpaquePointer)v2).errorCode;
}

uint64_t sub_1D76EE0BC(ValueMetadata *a1)
{
  uint64_t v1 = MEMORY[0x1E4FBB1A0];
  if (a1)
  {
    unint64_t v2 = a1;
    if (a1 == (ValueMetadata *)(int)a1) {
      return (uint64_t)v2;
    }
    sub_1D76F82C4();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBA33F30);
    uint64_t v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_1D76FB290;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AD38);
    uint64_t v4 = sub_1D76F8044();
    uint64_t v6 = v5;
    *(void *)(v3 + 56) = v1;
    unint64_t v7 = sub_1D76B6EA0();
    *(void *)(v3 + 32) = v4;
    *(void *)(v3 + 40) = v6;
    uint64_t v8 = MEMORY[0x1E4FBB5C8];
    *(void *)(v3 + 96) = MEMORY[0x1E4FBB550];
    *(void *)(v3 + 104) = v8;
    *(void *)(v3 + 64) = v7;
    *(void *)(v3 + 72) = v2;
    sub_1D76BBA90(0, (unint64_t *)&qword_1EA83A920);
    uint64_t v9 = (void *)sub_1D76F8394();
  }
  else
  {
    sub_1D76F82C4();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBA33F30);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_1D76FA300;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AD38);
    uint64_t v11 = sub_1D76F8044();
    uint64_t v13 = v12;
    *(void *)(v10 + 56) = v1;
    *(void *)(v10 + 64) = sub_1D76B6EA0();
    *(void *)(v10 + 32) = v11;
    *(void *)(v10 + 40) = v13;
    sub_1D76BBA90(0, (unint64_t *)&qword_1EA83A920);
    uint64_t v9 = (void *)sub_1D76F8394();
  }
  sub_1D76F7D84();
  swift_bridgeObjectRelease();

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F28);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D76FA300;
  *(void *)(inited + 32) = sub_1D76F7FF4();
  *(void *)(inited + 40) = v15;
  *(void *)(inited + 72) = v1;
  *(void *)(inited + 48) = 0xD00000000000001ALL;
  *(void *)(inited + 56) = 0x80000001D76FE7E0;
  unint64_t v16 = sub_1D769B168(inited);
  XPCError.init(code:userInfo:)(-1, (Swift::OpaquePointer)v16);
  unint64_t v2 = &type metadata for XPCError;
  uint64_t result = swift_bridgeObjectRelease();
  if ((uint64_t)&type metadata for XPCError < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if ((uint64_t)&type metadata for XPCError <= 0x7FFFFFFF)
  {
    return (uint64_t)v2;
  }
  __break(1u);
  return result;
}

_OWORD *sub_1D76EE330(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_1D769B2B0(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1D76F5E48();
      goto LABEL_7;
    }
    sub_1D76F4CD4(v15, a4 & 1);
    unint64_t v21 = sub_1D769B2B0(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      unint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)sub_1D76F8C84();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = (_OWORD *)(v18[7] + 32 * v12);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v19);
    return sub_1D769B2A0(a1, v19);
  }
LABEL_13:
  sub_1D76EEAE4(v12, a2, a3, a1, v18);

  return (_OWORD *)swift_bridgeObjectRetain();
}

uint64_t sub_1D76EE484(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBA33F78);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1D76EE4E4(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1D76EE514();
  unint64_t result = sub_1D76EE568();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1D76EE514()
{
  unint64_t result = qword_1EA83AD20;
  if (!qword_1EA83AD20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83AD20);
  }
  return result;
}

unint64_t sub_1D76EE568()
{
  unint64_t result = qword_1EA83AD28;
  if (!qword_1EA83AD28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83AD28);
  }
  return result;
}

unint64_t sub_1D76EE5C4()
{
  unint64_t result = qword_1EA83AD30;
  if (!qword_1EA83AD30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83AD30);
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCError()
{
  return &type metadata for XPCError;
}

uint64_t sub_1D76EE628(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = sub_1D76F7D04();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188788](v8);
  char v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_1D76E0AEC(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_1D76F6030();
      goto LABEL_7;
    }
    sub_1D76F4FD4(v17, a3 & 1);
    unint64_t v23 = sub_1D76E0AEC(a2);
    if ((v18 & 1) == (v24 & 1))
    {
      unint64_t v14 = v23;
      unint64_t v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_1D76EEB50(v14, (uint64_t)v11, a1, v20);
    }
LABEL_15:
    uint64_t result = sub_1D76F8C84();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v21 = v20[7] + 8 * v14;

  return sub_1D76EED00(a1, v21);
}

uint64_t sub_1D76EE7F4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for RemoteDevice.Identity();
  MEMORY[0x1F4188788](v8);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v11 = (void *)*v3;
  unint64_t v13 = sub_1D76E0B70(a2);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v17 = v12;
  uint64_t v18 = v11[3];
  if (v18 >= v16 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v19 = *v4;
    if (v17)
    {
LABEL_8:
      uint64_t v20 = v19[7];
      uint64_t result = swift_release();
      *(void *)(v20 + 8 * v13) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v18 >= v16 && (a3 & 1) == 0)
  {
    sub_1D76F62EC();
    goto LABEL_7;
  }
  sub_1D76F5400(v16, a3 & 1);
  unint64_t v22 = sub_1D76E0B70(a2);
  if ((v17 & 1) != (v23 & 1))
  {
LABEL_14:
    uint64_t result = sub_1D76F8C84();
    __break(1u);
    return result;
  }
  unint64_t v13 = v22;
  uint64_t v19 = *v4;
  if (v17) {
    goto LABEL_8;
  }
LABEL_11:
  sub_1D76E2478(a2, (uint64_t)v10);
  return sub_1D76EEC10(v13, (uint64_t)v10, a1, v19);
}

uint64_t sub_1D76EE960(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v8 = (void **)v7;
  BOOL v15 = (void *)*v7;
  unint64_t v17 = sub_1D76E0E18(a3, a4, a5, a6);
  uint64_t v18 = v15[2];
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v21 = v16;
  uint64_t v22 = v15[3];
  if (v22 >= v20 && (a7 & 1) != 0)
  {
LABEL_7:
    char v23 = *v8;
    if (v21)
    {
LABEL_8:
      uint64_t v24 = (uint64_t *)(v23[7] + 16 * v17);
      uint64_t result = swift_release();
      *uint64_t v24 = a1;
      v24[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v22 >= v20 && (a7 & 1) == 0)
  {
    sub_1D76F6714();
    goto LABEL_7;
  }
  sub_1D76F5AD0(v20, a7 & 1);
  unint64_t v26 = sub_1D76E0E18(a3, a4, a5, a6);
  if ((v21 & 1) != (v27 & 1))
  {
LABEL_15:
    uint64_t result = sub_1D76F8C84();
    __break(1u);
    return result;
  }
  unint64_t v17 = v26;
  char v23 = *v8;
  if (v21) {
    goto LABEL_8;
  }
LABEL_11:
  sub_1D76EECB0(v17, a3, a4, a5, a6, a1, a2, v23);

  return swift_bridgeObjectRetain();
}

_OWORD *sub_1D76EEAE4(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_1D769B2A0(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

uint64_t sub_1D76EEB50(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = sub_1D76F7D04();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t result = sub_1D76EED68(a3, a4[7] + 8 * a1);
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_1D76EEC10(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for RemoteDevice.Identity();
  uint64_t result = sub_1D76AC558(a2, v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

unint64_t sub_1D76EECB0(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  a8[(result >> 6) + 8] |= 1 << result;
  uint64_t v8 = (void *)(a8[6] + 32 * result);
  *uint64_t v8 = a2;
  v8[1] = a3;
  void v8[2] = a4;
  v8[3] = a5;
  uint64_t v9 = (void *)(a8[7] + 16 * result);
  *uint64_t v9 = a6;
  v9[1] = a7;
  uint64_t v10 = a8[2];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a8[2] = v12;
  }
  return result;
}

uint64_t sub_1D76EED00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A700);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D76EED68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A700);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t CustomNSError.wrapping(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v73 = *(void *)(a2 - 8);
  MEMORY[0x1F4188788](a1);
  uint64_t v9 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1D76F83A4();
  uint64_t v11 = MEMORY[0x1F4188788](v10);
  uint64_t v14 = (char *)&v67 - v13;
  if (a1)
  {
    uint64_t v70 = v12;
    uint64_t v71 = v11;
    uint64_t v72 = v9;
    id v15 = a1;
    uint64_t v16 = sub_1D76F7A84();
    unint64_t v80 = v16;
    uint64_t v69 = *MEMORY[0x1E4F28750];
    uint64_t v17 = sub_1D76F7FF4();
    uint64_t v19 = v18;
    if (*(void *)(v16 + 16))
    {
      uint64_t v20 = v17;
      swift_bridgeObjectRetain();
      unint64_t v21 = sub_1D769B2B0(v20, v19);
      if (v22)
      {
        sub_1D769A9C4(*(void *)(v16 + 56) + 32 * v21, (uint64_t)&v78);
        swift_bridgeObjectRelease();
        if (*((void *)&v79 + 1))
        {
          uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A830);
          if (swift_dynamicCast())
          {
            swift_bridgeObjectRelease();
            uint64_t v24 = *(void **)&v75[0];
            id v25 = a1;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v24 = sub_1D76E0978(0, v24[2] + 1, 1, v24);
            }
            unint64_t v27 = v24[2];
            unint64_t v26 = v24[3];
            uint64_t v68 = a3;
            if (v27 >= v26 >> 1) {
              uint64_t v24 = sub_1D76E0978((void *)(v26 > 1), v27 + 1, 1, v24);
            }
            void v24[2] = v27 + 1;
            v24[v27 + 4] = a1;
            uint64_t v28 = sub_1D76F7FF4();
            uint64_t v30 = v29;
            *((void *)&v79 + 1) = v23;
            *(void *)&long long v78 = v24;
            sub_1D769B2A0(&v78, v75);
            unint64_t v31 = v80;
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            unint64_t v74 = v31;
            unint64_t v80 = 0x8000000000000000;
            sub_1D76EE330(v75, v28, v30, isUniquelyReferenced_nonNull_native);
            unint64_t v80 = v74;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            a3 = v68;
            goto LABEL_27;
          }
LABEL_18:
          uint64_t v35 = sub_1D76F7FF4();
          if (*(void *)(v16 + 16) && (unint64_t v37 = sub_1D769B2B0(v35, v36), (v38 & 1) != 0))
          {
            sub_1D769A9C4(*(void *)(v16 + 56) + 32 * v37, (uint64_t)&v78);
          }
          else
          {
            long long v78 = 0u;
            long long v79 = 0u;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (*((void *)&v79 + 1))
          {
            __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F40);
            if (swift_dynamicCast())
            {
              uint64_t v39 = *(void **)&v75[0];
              __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83ABA8);
              uint64_t v40 = swift_allocObject();
              uint64_t v68 = a3;
              uint64_t v41 = v40;
              *(_OWORD *)(v40 + 16) = xmmword_1D76FB290;
              *(void *)(v40 + 32) = v39;
              *(void *)(v40 + 40) = a1;
              uint64_t v42 = sub_1D76F7FF4();
              uint64_t v44 = v43;
              id v45 = a1;
              id v46 = v39;
              sub_1D76AF764(v42, v44, &v78);
              swift_bridgeObjectRelease();
              sub_1D76EE484((uint64_t)&v78);
              uint64_t v47 = sub_1D76F7FF4();
              uint64_t v49 = v48;
              *((void *)&v79 + 1) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83A830);
              *(void *)&long long v78 = v41;
              a3 = v68;
              sub_1D769B2A0(&v78, v75);
              unint64_t v50 = v80;
              char v51 = swift_isUniquelyReferenced_nonNull_native();
              unint64_t v74 = v50;
              unint64_t v80 = 0x8000000000000000;
              sub_1D76EE330(v75, v47, v49, v51);
              unint64_t v80 = v74;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              goto LABEL_27;
            }
          }
          else
          {
            sub_1D76EE484((uint64_t)&v78);
          }
          uint64_t v52 = sub_1D76F7FF4();
          uint64_t v54 = v53;
          swift_getErrorValue();
          uint64_t v55 = v76;
          uint64_t v56 = v77;
          *((void *)&v79 + 1) = v77;
          boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)&v78);
          (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v56 - 8) + 16))(boxed_opaque_existential_0Tm, v55, v56);
          sub_1D769B2A0(&v78, v75);
          unint64_t v58 = v80;
          char v59 = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v74 = v58;
          unint64_t v80 = 0x8000000000000000;
          sub_1D76EE330(v75, v52, v54, v59);
          unint64_t v80 = v74;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_27:
          sub_1D76F7A74();
          uint64_t v60 = sub_1D76F7A94();
          id v61 = objc_allocWithZone(MEMORY[0x1E4F28C58]);
          long long v62 = (void *)sub_1D76F7FC4();
          swift_bridgeObjectRelease();
          uint64_t v63 = (void *)sub_1D76F7EC4();
          swift_bridgeObjectRelease();
          id v64 = objc_msgSend(v61, sel_initWithDomain_code_userInfo_, v62, v60, v63);

          *(void *)&long long v78 = v64;
          sub_1D76E26B8();
          int v65 = swift_dynamicCast();
          (*(void (**)(char *, void, uint64_t, uint64_t))(v73 + 56))(v14, v65 ^ 1u, 1, a2);
          uint64_t v66 = v72;
          (*(void (**)(char *, uint64_t, uint64_t))(v73 + 16))(v72, v4, a2);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v14, 1, a2) == 1)
          {
            (*(void (**)(uint64_t, char *, uint64_t))(v73 + 32))(a3, v66, a2);
            return (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v14, v71);
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v73 + 8))(v66, a2);
            return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v73 + 32))(a3, v14, a2);
          }
        }
LABEL_17:
        sub_1D76EE484((uint64_t)&v78);
        goto LABEL_18;
      }
      long long v78 = 0u;
      long long v79 = 0u;
    }
    else
    {
      long long v78 = 0u;
      long long v79 = 0u;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v73 + 16);

  return v33(a3, v4, a2);
}

uint64_t _Error.wrapping(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D76EF940(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))CustomNSError.wrapping(_:));
}

{
  return sub_1D76EF940(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))CustomNSError.wrapping(_:));
}

uint64_t CustomNSError.wrapping(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188788](a1);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a3, v9, a2);
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    uint64_t v12 = (void (**)(uint64_t, uint64_t))(v6 + 8);
    uint64_t v13 = (void (**)(uint64_t, char *, uint64_t))(v6 + 32);
    swift_bridgeObjectRetain();
    uint64_t v14 = 0;
    do
    {
      id v15 = *(void **)(a1 + 8 * v14++ + 32);
      id v16 = v15;
      CustomNSError.wrapping(_:)(v15, a2, (uint64_t)v8);

      (*v12)(a3, a2);
      (*v13)(a3, v8, a2);
    }
    while (v11 != v14);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t CustomNSError.wrap(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  uint64_t v5 = (void *)MEMORY[0x1F4188788](a1);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  CustomNSError.wrapping(_:)(v5, v8, (uint64_t)v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, a2);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(v2, v7, a2);
}

uint64_t CustomNSError.underlyingErrors.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  MEMORY[0x1F4188788](a1);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v5, a1);
  uint64_t v6 = sub_1D76F89B4();
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  }
  else
  {
    uint64_t v7 = (void *)swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v8, v4, a1);
  }
  uint64_t v9 = (void *)sub_1D76F7B84();

  id v10 = objc_msgSend(v9, sel_underlyingErrors);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F40);
  uint64_t v11 = sub_1D76F81C4();

  return v11;
}

uint64_t sub_1D76EF940(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = *(void *)(a3 + 8);
  uint64_t v14 = a2;
  uint64_t v15 = v8;
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(v13);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(boxed_opaque_existential_0Tm, v4, a2);
  uint64_t v10 = v14;
  uint64_t v11 = v15;
  __swift_project_boxed_opaque_existential_1(v13, v14);
  void v16[3] = v10;
  void v16[4] = v11;
  __swift_allocate_boxed_opaque_existential_0Tm(v16);
  a4(a1, v10, v11);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AC38);
  swift_dynamicCast();
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v13);
}

uint64_t _Error.wrap(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  uint64_t v5 = MEMORY[0x1F4188788](a1);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  _Error.wrapping(_:)(v5, v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, a2);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(v2, v7, a2);
}

uint64_t _Error.underlyingErrors.getter(uint64_t a1)
{
  return CustomNSError.underlyingErrors.getter(a1);
}

uint64_t static POSIXError.current(or:)@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_1D76F7A64();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188788](v4);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v9 = MEMORY[0x1D9475210](v6);
  sub_1D769C348(MEMORY[0x1E4FBC860]);
  if (v9)
  {
    POSIXError.init(uncheckedCode:userInfo:)(v9, (uint64_t)v8);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v8, v4);
  }
  else
  {
    return POSIXError.init(uncheckedCode:userInfo:)(a1, a2);
  }
}

uint64_t POSIXError.init(uncheckedCode:userInfo:)@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_1D76F7A64();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t result = MEMORY[0x1F4188788](v4);
  uint64_t v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v9 = sub_1D76F7DD4();
    if ((v9 & 0x100000000) != 0)
    {
      sub_1D76F7FF4();
      id v10 = objc_allocWithZone(MEMORY[0x1E4F28C58]);
      uint64_t v11 = (void *)sub_1D76F7FC4();
      swift_bridgeObjectRelease();
      uint64_t v12 = (void *)sub_1D76F7EC4();
      swift_bridgeObjectRelease();
      id v13 = objc_msgSend(v10, sel_initWithDomain_code_userInfo_, v11, a1, v12);

      id v15 = v13;
      sub_1D76E26B8();
      swift_dynamicCast();
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v8, v4);
    }
    else
    {
      v14[1] = v9;
      sub_1D76D0DB0();
      return sub_1D76F7B74();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static POSIXError.current.getter@<X0>(uint64_t a1@<X8>)
{
  int v2 = MEMORY[0x1D9475210]();
  if (v2)
  {
    int v3 = v2;
    sub_1D769C348(MEMORY[0x1E4FBC860]);
    POSIXError.init(uncheckedCode:userInfo:)(v3, a1);
    uint64_t v4 = sub_1D76F7A64();
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
    uint64_t v6 = v4;
    uint64_t v7 = a1;
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v9 = sub_1D76F7A64();
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
    uint64_t v6 = v9;
    uint64_t v7 = a1;
    uint64_t v8 = 1;
  }

  return v5(v7, v8, 1, v6);
}

uint64_t xpc_uuid_get_uuid(_:)(void *a1)
{
  bytes = xpc_uuid_get_bytes(a1);
  if (bytes) {
    return *(void *)bytes;
  }
  else {
    return 0;
  }
}

xpc_object_t xpc_uuid_create_with_uuid(_:)(unsigned __int8 a1, unsigned __int8 a2, unsigned __int8 a3, unsigned __int8 a4, unsigned __int8 a5, unsigned __int8 a6, unsigned __int8 a7, unsigned __int8 a8, int a9, int a10)
{
  uint64_t v14 = *MEMORY[0x1E4F143C0];
  uuid[0] = a1;
  uuid[1] = a2;
  uuid[2] = a3;
  uuid[3] = a4;
  uuid[4] = a5;
  uuid[5] = a6;
  uuid[6] = a7;
  uuid[7] = a8;
  int v12 = a9;
  int v13 = a10;
  return xpc_uuid_create(uuid);
}

uint64_t _ss13OpaquePointerV7MercuryE10descriptorAC20AnyXPCTypeDescriptor_pvg_0@<X0>(xpc_type_t type@<X0>, uint64_t a2@<X8>)
{
  if (qword_1EA83A4E0 != -1) {
    swift_once();
  }
  uint64_t v4 = off_1EA83AAA8;
  if (*((void *)off_1EA83AAA8 + 2) && (unint64_t v5 = sub_1D76E0C44((uint64_t)type), (v6 & 1) != 0))
  {
    uint64_t v7 = v4[7] + 40 * v5;
    return sub_1D76B116C(v7, a2);
  }
  else
  {
    xpc_type_get_name(type);
    sub_1D76F80B4();
    sub_1D76F8464();
    sub_1D76F80A4();
    sub_1D76F8584();
    sub_1D76F80A4();
    sub_1D76F80A4();
    sub_1D76F80A4();
    uint64_t result = sub_1D76F85B4();
    __break(1u);
  }
  return result;
}

xpc_connection_t OS_xpc_object.createConnection()()
{
  return xpc_connection_create_from_endpoint(v0);
}

uint64_t static OpaquePointer.error.getter()
{
  return XPCTypeError;
}

uint64_t static OpaquePointer.connection.getter()
{
  return XPCTypeConnection;
}

uint64_t static OpaquePointer.endpoint.getter()
{
  return XPCTypeEndpoint;
}

uint64_t static OpaquePointer.dictionary.getter()
{
  return XPCTypeDictionary;
}

uint64_t static OpaquePointer.array.getter()
{
  return XPCTypeArray;
}

uint64_t static OpaquePointer.data.getter()
{
  return XPCTypeData;
}

uint64_t static OpaquePointer.date.getter()
{
  return XPCTypeDate;
}

uint64_t static OpaquePointer.double.getter()
{
  return XPCTypeDouble;
}

uint64_t static OpaquePointer.fd.getter()
{
  return XPCTypeFD;
}

uint64_t static OpaquePointer.int64.getter()
{
  return XPCTypeInt64;
}

uint64_t static OpaquePointer.fileTransfer.getter()
{
  return XPCTypeFileTransfer;
}

uint64_t OS_xpc_object.descriptor.getter@<X0>(uint64_t a1@<X8>)
{
  int v3 = (const _xpc_type_s *)MEMORY[0x1D94771B0](v1);

  return _ss13OpaquePointerV7MercuryE10descriptorAC20AnyXPCTypeDescriptor_pvg_0(v3, a1);
}

id NSLocking.withLock<A>(perform:)(void (*a1)(id))
{
  a1(objc_msgSend(v1, sel_lock));
  return objc_msgSend(v1, sel_unlock);
}

uint64_t sub_1D76F0298(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x65756C6176;
  }
  else {
    uint64_t v3 = 0x5464656C676E616DLL;
  }
  if (v2) {
    unint64_t v4 = 0xEF656D614E657079;
  }
  else {
    unint64_t v4 = 0xE500000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x65756C6176;
  }
  else {
    uint64_t v5 = 0x5464656C676E616DLL;
  }
  if (a2) {
    unint64_t v6 = 0xE500000000000000;
  }
  else {
    unint64_t v6 = 0xEF656D614E657079;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_1D76F89E4();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t static DynamicCodable.defaultEncodingValue(forUnencodableValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
}

uint64_t DynamicCodable.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v49 = a4;
  uint64_t v54 = a3;
  uint64_t v52 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1D76F83A4();
  uint64_t v47 = *(void *)(v6 - 8);
  uint64_t v48 = v6;
  uint64_t v7 = MEMORY[0x1F4188788](v6);
  unint64_t v50 = (char *)&v43 - v8;
  uint64_t v51 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = MEMORY[0x1F4188788](v7);
  id v46 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188788](v9);
  int v12 = (char *)&v43 - v11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F08);
  uint64_t v53 = *(void *)(v13 - 8);
  MEMORY[0x1F4188788](v13);
  id v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  unint64_t v16 = sub_1D76DA5C8();
  uint64_t v17 = v60;
  sub_1D76F8D94();
  if (!v17)
  {
    unint64_t v45 = v16;
    uint64_t v44 = v12;
    uint64_t v18 = v54;
    uint64_t v60 = a1;
    LOBYTE(v56[0]) = 0;
    uint64_t v21 = sub_1D76F8664();
    uint64_t v23 = v22;
    uint64_t v24 = static DynamicCodable.supportedType(named:)(v21, v22, v52, v18);
    if (v24)
    {
      uint64_t v27 = v24;
      uint64_t v28 = v25;
      uint64_t v29 = v26;
      swift_bridgeObjectRelease();
      v55[0] = 1;
      uint64_t v57 = v27;
      uint64_t v58 = v28;
      uint64_t v59 = v29;
      __swift_allocate_boxed_opaque_existential_0Tm(v56);
      sub_1D76F86E4();
      sub_1D76F86A4();
      sub_1D76DCB2C((uint64_t)v56, (uint64_t)v55);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AA58);
      unint64_t v31 = v50;
      uint64_t v32 = AssociatedTypeWitness;
      char v33 = swift_dynamicCast();
      uint64_t v34 = v51;
      uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v51 + 56);
      if (v33)
      {
        v35(v31, 0, 1, v32);
        uint64_t v36 = v44;
        (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v44, v31, v32);
        unint64_t v37 = v46;
        (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v46, v36, v32);
        (*(void (**)(char *, uint64_t, uint64_t))(v18 + 56))(v37, v52, v18);
        (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v32);
        (*(void (**)(char *, uint64_t))(v53 + 8))(v15, v13);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v56);
        uint64_t v19 = (uint64_t)v60;
        return __swift_destroy_boxed_opaque_existential_1Tm(v19);
      }
      v35(v31, 1, 1, v32);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v31, v48);
      sub_1D76DCA84();
      swift_allocError();
      uint64_t v39 = v38;
      uint64_t v40 = v57;
      uint64_t v41 = __swift_project_boxed_opaque_existential_1(v56, v57);
      *(void *)(v39 + 24) = v40;
      boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)v39);
      (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v40 - 8) + 16))(boxed_opaque_existential_0Tm, v41, v40);
      *(void *)(v39 + 32) = v32;
      *(unsigned char *)(v39 + 40) = 1;
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v53 + 8))(v15, v13);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v56);
    }
    else
    {
      sub_1D76DCA84();
      swift_allocError();
      *(void *)uint64_t v30 = v21;
      *(void *)(v30 + 8) = v23;
      *(unsigned char *)(v30 + 40) = 0;
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v53 + 8))(v15, v13);
    }
    a1 = v60;
  }
  uint64_t v19 = (uint64_t)a1;
  return __swift_destroy_boxed_opaque_existential_1Tm(v19);
}

uint64_t DynamicCodable.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v45 = sub_1D76F83A4();
  uint64_t v42 = *(void *)(v45 - 8);
  uint64_t v7 = MEMORY[0x1F4188788](v45);
  id v46 = (char *)&v39 - v8;
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = MEMORY[0x1F4188788](v7);
  uint64_t v47 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188788](v10);
  uint64_t v43 = (char *)&v39 - v13;
  MEMORY[0x1F4188788](v12);
  id v15 = (char *)&v39 - v14;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34C70);
  uint64_t v49 = *(void *)(v16 - 8);
  uint64_t v50 = v16;
  MEMORY[0x1F4188788](v16);
  uint64_t v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  unint64_t v19 = sub_1D76DA5C8();
  uint64_t v48 = v18;
  unint64_t v41 = v19;
  sub_1D76F8DA4();
  (*(void (**)(uint64_t, uint64_t))(a3 + 64))(a2, a3);
  uint64_t v54 = AssociatedTypeWitness;
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(v53);
  uint64_t v55 = *(void (**)(uint64_t *, char *, uint64_t))(v9 + 16);
  v55(boxed_opaque_existential_0Tm, v15, AssociatedTypeWitness);
  __swift_project_boxed_opaque_existential_1(v53, v54);
  swift_getDynamicType();
  uint64_t v21 = sub_1D76F8DF4();
  uint64_t v23 = v22;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v53);
  if (static DynamicCodable.supportedType(named:)(v21, v23, a2, a3))
  {
    uint64_t v45 = v9;
    uint64_t v24 = (void (*)(char *, char *, uint64_t))v55;
    v55((uint64_t *)v47, v15, AssociatedTypeWitness);
  }
  else
  {
    uint64_t v40 = v21;
    uint64_t v25 = v46;
    (*(void (**)(char *, uint64_t, uint64_t))(a3 + 48))(v15, a2, a3);
    uint64_t v26 = (void (**)(char *, uint64_t))(v9 + 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v25, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v42 + 8))(v46, v45);
      sub_1D76DCA84();
      swift_allocError();
      *(void *)uint64_t v27 = v40;
      *(void *)(v27 + 8) = v23;
      *(unsigned char *)(v27 + 40) = 0;
      swift_willThrow();
      (*v26)(v15, AssociatedTypeWitness);
      return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v48, v50);
    }
    swift_bridgeObjectRelease();
    uint64_t v45 = v9;
    uint64_t v28 = v9 + 32;
    uint64_t v42 = *(void *)(v9 + 32);
    uint64_t v29 = v43;
    ((void (*)(char *, char *, uint64_t))v42)(v43, v46, AssociatedTypeWitness);
    uint64_t v54 = AssociatedTypeWitness;
    uint64_t v30 = __swift_allocate_boxed_opaque_existential_0Tm(v53);
    uint64_t v24 = (void (*)(char *, char *, uint64_t))v55;
    v55(v30, v29, AssociatedTypeWitness);
    id v46 = (char *)v26;
    __swift_project_boxed_opaque_existential_1(v53, v54);
    swift_getDynamicType();
    sub_1D76F8DF4();
    (*(void (**)(char *, uint64_t))(v28 - 24))(v15, AssociatedTypeWitness);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v53);
    ((void (*)(char *, char *, uint64_t))v42)(v15, v29, AssociatedTypeWitness);
    v24(v47, v15, AssociatedTypeWitness);
  }
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AA60);
  if (!swift_dynamicCast())
  {
    uint64_t v52 = 0;
    memset(v51, 0, sizeof(v51));
    swift_bridgeObjectRelease();
    sub_1D76F1640((uint64_t)v51);
    sub_1D76DCA84();
    swift_allocError();
    uint64_t v36 = v35;
    v35[3] = AssociatedTypeWitness;
    unint64_t v37 = __swift_allocate_boxed_opaque_existential_0Tm(v35);
    v24((char *)v37, v15, AssociatedTypeWitness);
    v36[4] = v31;
    *((unsigned char *)v36 + 40) = 1;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v15, AssociatedTypeWitness);
    return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v48, v50);
  }
  sub_1D76BBC14(v51, (uint64_t)v53);
  LOBYTE(v51[0]) = 0;
  uint64_t v32 = v50;
  char v33 = v48;
  uint64_t v34 = v44;
  sub_1D76F8714();
  swift_bridgeObjectRelease();
  if (!v34)
  {
    __swift_project_boxed_opaque_existential_1(v53, v54);
    LOBYTE(v51[0]) = 1;
    sub_1D76F8784();
    sub_1D76F8754();
  }
  (*(void (**)(char *, uint64_t))(v45 + 8))(v15, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v33, v32);
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v53);
}

uint64_t sub_1D76F0F70()
{
  return sub_1D76F8754();
}

uint64_t sub_1D76F0FE0()
{
  return sub_1D76F86A4();
}

Mercury::DynamicCodableContainerCodingKeys_optional __swiftcall DynamicCodableContainerCodingKeys.init(rawValue:)(Swift::String rawValue)
{
  BOOL v2 = v1;
  uint64_t v3 = sub_1D76F8634();
  result.double value = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  char *v2 = v5;
  return result;
}

Mercury::DynamicCodableContainerCodingKeys_optional __swiftcall DynamicCodableContainerCodingKeys.init(stringValue:)(Swift::String stringValue)
{
  BOOL v2 = v1;
  uint64_t v3 = sub_1D76F8634();
  result.double value = swift_bridgeObjectRelease();
  if (v3)
  {
    if (v3 == 1) {
      char v5 = 1;
    }
    else {
      char v5 = 2;
    }
  }
  else
  {
    char v5 = 0;
  }
  char *v2 = v5;
  return result;
}

Mercury::DynamicCodableContainerCodingKeys_optional __swiftcall DynamicCodableContainerCodingKeys.init(intValue:)(Swift::Int intValue)
{
  unsigned char *v1 = 2;
  return (Mercury::DynamicCodableContainerCodingKeys_optional)intValue;
}

uint64_t DynamicCodableContainerCodingKeys.intValue.getter()
{
  return 0;
}

uint64_t DynamicCodableContainerCodingKeys.rawValue.getter()
{
  if (*v0) {
    return 0x65756C6176;
  }
  else {
    return 0x5464656C676E616DLL;
  }
}

uint64_t DynamicCodableContainerCodingKeys.stringValue.getter()
{
  if (*v0) {
    return 0x65756C6176;
  }
  else {
    return 0x5464656C676E616DLL;
  }
}

uint64_t sub_1D76F11D0(char *a1, char *a2)
{
  return sub_1D76F0298(*a1, *a2);
}

uint64_t sub_1D76F11DC()
{
  return sub_1D76F8D54();
}

uint64_t sub_1D76F1268()
{
  sub_1D76F8094();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1D76F12E0()
{
  return sub_1D76F8D54();
}

Mercury::DynamicCodableContainerCodingKeys_optional sub_1D76F1368(Swift::String *a1)
{
  return DynamicCodableContainerCodingKeys.init(rawValue:)(*a1);
}

void sub_1D76F1374(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x5464656C676E616DLL;
  if (*v1) {
    uint64_t v2 = 0x65756C6176;
  }
  unint64_t v3 = 0xEF656D614E657079;
  if (*v1) {
    unint64_t v3 = 0xE500000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1D76F13BC()
{
  if (*v0) {
    return 0x65756C6176;
  }
  else {
    return 0x5464656C676E616DLL;
  }
}

void sub_1D76F1404(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1D76F1410(uint64_t a1)
{
  unint64_t v2 = sub_1D76DA5C8();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1D76F144C(uint64_t a1)
{
  unint64_t v2 = sub_1D76DA5C8();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1D76F1488@<X0>(uint64_t a1@<X8>)
{
  return static DynamicCodable.defaultEncodingValue.getter(a1);
}

uint64_t static DynamicCodable.defaultEncodingValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);

  return v3(a1, 1, 1, AssociatedTypeWitness);
}

uint64_t static DynamicCodable.supportedType(named:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = v6 + 48; ; i += 24)
    {
      uint64_t v9 = *(void *)(i - 16);
      if (sub_1D76F8DF4() == a1 && v10 == a2)
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        return v9;
      }
      char v12 = sub_1D76F89E4();
      swift_bridgeObjectRelease();
      if (v12) {
        break;
      }
      if (!--v7)
      {
        swift_bridgeObjectRelease_n();
        return 0;
      }
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v9;
}

uint64_t sub_1D76F1640(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AA68);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

BOOL static DynamicCodable.canEncode(value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = AssociatedTypeWitness;
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(v13);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(boxed_opaque_existential_0Tm, a1, AssociatedTypeWitness);
  __swift_project_boxed_opaque_existential_1(v13, v14);
  swift_getDynamicType();
  uint64_t v8 = sub_1D76F8DF4();
  uint64_t v10 = v9;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v13);
  uint64_t v11 = static DynamicCodable.supportedType(named:)(v8, v10, a2, a3);
  swift_bridgeObjectRelease();
  return v11 != 0;
}

uint64_t KeyedEncodingContainerProtocol.encode<A, B>(_:using:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = MEMORY[0x1F4188788](a1);
  char v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188788](v10);
  uint64_t v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v17 + 16))(v12);
  (*(void (**)(char *, uint64_t, uint64_t))(a8 + 56))(v12, a5, a8);
  sub_1D76F8B84();
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, a5);
}

uint64_t KeyedDecodingContainerProtocol.decode<A, B>(using:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = *(void *)(a4 - 8);
  MEMORY[0x1F4188788](a1);
  char v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = sub_1D76F8AA4();
  if (!v7)
  {
    (*(void (**)(uint64_t, uint64_t))(a7 + 64))(a4, a7);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, a4);
  }
  return result;
}

uint64_t static CompositeDynamicCodableContainer.supportedTypes.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 32))(a3, a5);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 32))(a2, a4);
  sub_1D76F7858(v8);
  return v7;
}

uint64_t static CompositeDynamicCodableContainer.defaultEncodingValue(forUnencodableValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v20 = a4;
  uint64_t v21 = a6;
  uint64_t v12 = *(void *)(a2 - 8);
  MEMORY[0x1F4188788](a1);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1D76F83A4();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188788](v15);
  uint64_t v18 = (char *)&v20 - v17;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a5 + 48))(a1, a3, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v18, 1, a2) == 1)
  {
    (*(void (**)(char *))(v21 + 48))(v14);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a2);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a2);
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(a7, v18, a2);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(a7, 0, 1, a2);
  }
}

uint64_t CompositeDynamicCodableContainer.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t CompositeDynamicCodableContainer.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t CompositeDynamicCodableContainer.encode(to:)(uint64_t a1, void *a2)
{
  uint64_t v69 = a1;
  uint64_t v4 = a2[2];
  uint64_t v5 = sub_1D76F83A4();
  uint64_t v62 = *(void *)(v5 - 8);
  uint64_t v63 = v5;
  uint64_t v6 = MEMORY[0x1F4188788](v5);
  id v61 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188788](v6);
  uint64_t v9 = a2[4];
  uint64_t v66 = (char *)&v55 - v10;
  uint64_t v67 = v9;
  uint64_t v65 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1F4188788](v8);
  uint64_t v60 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188788](v11);
  id v64 = (char *)&v55 - v14;
  uint64_t v70 = v4;
  uint64_t v73 = *(void *)(v4 - 8);
  uint64_t v15 = MEMORY[0x1F4188788](v13);
  uint64_t v59 = (char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188788](v15);
  uint64_t v19 = (char *)&v55 - v18;
  uint64_t v20 = MEMORY[0x1F4188788](v17);
  uint64_t v22 = (char *)&v55 - v21;
  uint64_t v23 = a2[3];
  uint64_t v68 = *(void *)(v23 - 8);
  uint64_t v24 = MEMORY[0x1F4188788](v20);
  uint64_t v26 = (char *)&v55 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188788](v24);
  uint64_t v28 = (char *)&v55 - v27;
  uint64_t v29 = a2[5];
  uint64_t v30 = v2;
  if (static DynamicCodable.canEncode(value:)(v2, v23, v29))
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v73 + 16))(v22, v2, v70);
    (*(void (**)(char *, uint64_t, uint64_t))(v29 + 56))(v22, v23, v29);
    sub_1D76F7F34();
    return (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v28, v23);
  }
  else
  {
    uint64_t v56 = v26;
    uint64_t v57 = v19;
    char v33 = v66;
    uint64_t v32 = v67;
    uint64_t v58 = v22;
    uint64_t v34 = v70;
    uint64_t v35 = a2[6];
    if (static DynamicCodable.canEncode(value:)(v2, v67, v35))
    {
      uint64_t v36 = v58;
      (*(void (**)(char *, uint64_t, uint64_t))(v73 + 16))(v58, v2, v34);
      unint64_t v37 = v64;
      (*(void (**)(char *, uint64_t, uint64_t))(v35 + 56))(v36, v32, v35);
      sub_1D76F7F34();
      return (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v37, v32);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v2, v23, v29);
      uint64_t v38 = v73;
      id v64 = *(char **)(v73 + 48);
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v64)(v33, 1, v34) == 1)
      {
        uint64_t v68 = *(void *)(v62 + 8);
        ((void (*)(char *, uint64_t))v68)(v33, v63);
        uint64_t v39 = v61;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v30, v32, v35);
        uint64_t v40 = v32;
        uint64_t v41 = v34;
        if (((unsigned int (*)(char *, uint64_t, uint64_t))v64)(v39, 1, v34) == 1)
        {
          ((void (*)(char *, uint64_t))v68)(v39, v63);
          sub_1D76DCA84();
          swift_allocError();
          uint64_t v43 = v42;
          uint64_t v72 = v34;
          boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(v71);
          (*(void (**)(uint64_t *, uint64_t, uint64_t))(v73 + 16))(boxed_opaque_existential_0Tm, v30, v34);
          __swift_project_boxed_opaque_existential_1(v71, v72);
          swift_getDynamicType();
          uint64_t v45 = sub_1D76F8DF4();
          uint64_t v47 = v46;
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v71);
          *(void *)uint64_t v43 = v45;
          *(void *)(v43 + 8) = v47;
          *(unsigned char *)(v43 + 40) = 0;
          return swift_willThrow();
        }
        else
        {
          uint64_t v51 = v73;
          uint64_t v52 = v59;
          (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v59, v39, v41);
          uint64_t v53 = v58;
          (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v58, v52, v41);
          uint64_t v54 = v60;
          (*(void (**)(char *, uint64_t, uint64_t))(v35 + 56))(v53, v40, v35);
          sub_1D76F7F34();
          (*(void (**)(char *, uint64_t))(v65 + 8))(v54, v40);
          return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v52, v41);
        }
      }
      else
      {
        uint64_t v48 = v57;
        (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v57, v33, v34);
        uint64_t v49 = v58;
        (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v58, v48, v34);
        uint64_t v50 = v56;
        (*(void (**)(char *, uint64_t, uint64_t))(v29 + 56))(v49, v23, v29);
        sub_1D76F7F34();
        (*(void (**)(char *, uint64_t))(v68 + 8))(v50, v23);
        return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v48, v34);
      }
    }
  }
}

void CompositeDynamicCodableContainer.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v27 = a5;
  uint64_t v28 = a3;
  uint64_t v30 = a6;
  uint64_t v26 = *(void *)(a3 - 8);
  uint64_t v10 = MEMORY[0x1F4188788](a1);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188788](v10);
  uint64_t v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = v18;
  uint64_t v29 = *(void *)(v18 - 8);
  uint64_t v19 = MEMORY[0x1F4188788](v15);
  uint64_t v21 = (char *)&v25 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D76B116C(v19, (uint64_t)v33);
  sub_1D76F8254();
  if (!v6)
  {
    (*(void (**)(uint64_t, uint64_t))(a4 + 64))(a2, a4);
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, a2);
LABEL_6:
    (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v30, v21, v31);
    return;
  }
  id v34 = v6;
  id v22 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F40);
  if ((swift_dynamicCast() & 1) == 0)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
    goto LABEL_9;
  }
  if ((v33[40] & 1) == 0)
  {

    sub_1D76F2868((uint64_t)v33);
    sub_1D76B116C(a1, (uint64_t)v32);
    uint64_t v24 = v27;
    uint64_t v23 = v28;
    sub_1D76F8254();
    (*(void (**)(uint64_t, uint64_t))(v24 + 64))(v23, v24);
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v12, v23);

    goto LABEL_6;
  }
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  sub_1D76F2868((uint64_t)v33);
LABEL_9:
}

uint64_t sub_1D76F27FC(uint64_t *a1)
{
  return static CompositeDynamicCodableContainer.supportedTypes.getter((uint64_t)a1, a1[3], a1[4], a1[5], a1[6]);
}

uint64_t sub_1D76F2808@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return static CompositeDynamicCodableContainer.defaultEncodingValue(forUnencodableValue:)(a1, a2[2], a2[3], a2[4], a2[5], a2[6], a3);
}

uint64_t sub_1D76F281C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return CompositeDynamicCodableContainer.init(wrappedValue:)(a1, *(void *)(a2 + 16), a3);
}

void sub_1D76F2828(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
}

uint64_t sub_1D76F2850(uint64_t a1, void *a2)
{
  return CompositeDynamicCodableContainer.encode(to:)(a1, a2);
}

uint64_t sub_1D76F2868(uint64_t a1)
{
  return a1;
}

unint64_t sub_1D76F289C()
{
  unint64_t result = qword_1EA83AD40;
  if (!qword_1EA83AD40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83AD40);
  }
  return result;
}

unint64_t sub_1D76F28F4()
{
  unint64_t result = qword_1EBA34C58;
  if (!qword_1EBA34C58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBA34C58);
  }
  return result;
}

unint64_t sub_1D76F294C()
{
  unint64_t result = qword_1EBA34C50;
  if (!qword_1EBA34C50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBA34C50);
  }
  return result;
}

uint64_t sub_1D76F29A0(uint64_t a1)
{
  *(void *)(a1 + 8) = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t destroy for DynamicCodableError(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 2) {
    unsigned int v1 = *(_DWORD *)a1 + 2;
  }
  if (v1 == 1) {
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DynamicCodableError(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 40);
  if (v4 >= 2) {
    unsigned int v4 = *(_DWORD *)a2 + 2;
  }
  if (v4 == 1)
  {
    uint64_t v5 = *(void *)(a2 + 24);
    *(void *)(a1 + 24) = v5;
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    char v6 = 1;
  }
  else
  {
    uint64_t v7 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v7;
    swift_bridgeObjectRetain();
    char v6 = 0;
  }
  *(unsigned char *)(a1 + 40) = v6;
  return a1;
}

uint64_t assignWithCopy for DynamicCodableError(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1) {
      __swift_destroy_boxed_opaque_existential_1Tm(a1);
    }
    else {
      swift_bridgeObjectRelease();
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      uint64_t v6 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v6;
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(unsigned char *)(a1 + 40) = 1;
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(unsigned char *)(a1 + 40) = 0;
      swift_bridgeObjectRetain();
    }
  }
  return a1;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for DynamicCodableError(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1) {
      __swift_destroy_boxed_opaque_existential_1Tm(a1);
    }
    else {
      swift_bridgeObjectRelease();
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      long long v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      char v7 = 1;
    }
    else
    {
      char v7 = 0;
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    *(unsigned char *)(a1 + 40) = v7;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for DynamicCodableError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 2) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for DynamicCodableError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1D76F2D10(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 2) {
    return (*(_DWORD *)a1 + 2);
  }
  return result;
}

uint64_t sub_1D76F2D2C(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(void *)(result + 32) = 0;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for DynamicCodableError()
{
  return &type metadata for DynamicCodableError;
}

unsigned char *storeEnumTagSinglePayload for DynamicCodableContainerCodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D76F2E30);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DynamicCodableContainerCodingKeys()
{
  return &type metadata for DynamicCodableContainerCodingKeys;
}

uint64_t dispatch thunk of static DynamicCodable.supportedTypes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of static DynamicCodable.defaultEncodingValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of static DynamicCodable.defaultEncodingValue(forUnencodableValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of DynamicCodable.init(wrappedValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of DynamicCodable.wrappedValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t sub_1D76F2ECC()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1D76F2F5C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7
    && *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    uint64_t v8 = *a2;
    *int v3 = *a2;
    int v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t sub_1D76F3014(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_1D76F3040(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_1D76F3090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_1D76F30E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_1D76F3130(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_1D76F3180(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void sub_1D76F32DC(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1D76F34F4);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for CompositeDynamicCodableContainer()
{
  return swift_getGenericMetadata();
}

uint64_t static Error<>.unknown.getter(uint64_t a1, uint64_t a2)
{
  return Error<>.init(_:_:)(-1, 0xD00000000000001ALL, 0x80000001D76FE7E0, a1, a2);
}

uint64_t static Error<>.xpcError.getter(uint64_t a1, uint64_t a2)
{
  return Error<>.init(_:_:)(3, 0xD00000000000003CLL, 0x80000001D76FEE30, a1, a2);
}

uint64_t _Error.init(_bridgedNSError:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  id v8 = objc_msgSend(a1, sel_domain);
  uint64_t v9 = sub_1D76F7FF4();
  uint64_t v11 = v10;

  if (v9 == sub_1D76F7A74() && v11 == v12)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v14 = sub_1D76F89E4();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v14 & 1) == 0)
    {
      uint64_t v15 = 1;
      goto LABEL_9;
    }
  }
  id v16 = objc_msgSend(a1, sel_code);
  id v17 = objc_msgSend(a1, sel_userInfo);
  uint64_t v18 = sub_1D76F7ED4();

  uint64_t v19 = sub_1D769B40C((uint64_t)v16, a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 24))(v19, v18, a2, a3);
  uint64_t v15 = 0;
LABEL_9:
  uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56);

  return v20(a4, v15, 1, a2);
}

id static _Error<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 - 8);
  uint64_t v7 = MEMORY[0x1F4188788](a1);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188788](v7);
  uint64_t v11 = (char *)&v19 - v10;
  uint64_t v19 = sub_1D76F7A94();
  uint64_t v12 = sub_1D76F7A94();
  uint64_t v20 = v6;
  int v13 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v13(v11, a1, a3);
  v13(v9, a2, a3);
  if (v19 == v12)
  {
    sub_1D76F7A84();
    char v14 = (void *)sub_1D76F7EC4();
    swift_bridgeObjectRelease();
    sub_1D76F7A84();
    uint64_t v15 = (void *)sub_1D76F7EC4();
    swift_bridgeObjectRelease();
    id v16 = objc_msgSend(v14, sel_isEqual_, v15);
  }
  else
  {
    id v16 = 0;
  }
  id v17 = *(void (**)(char *, uint64_t))(v20 + 8);
  v17(v9, a3);
  v17(v11, a3);
  return v16;
}

uint64_t _Error<>.hash(into:)()
{
  return sub_1D76F8D34();
}

uint64_t _Error<>.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v45 = a3;
  uint64_t v9 = *(void *)(a2 - 8);
  uint64_t v10 = MEMORY[0x1F4188788](a1);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188788](v10);
  char v14 = (char *)&v37 - v13;
  sub_1D76BBA90(0, (unint64_t *)&qword_1EA83A778);
  sub_1D76B116C(a1, (uint64_t)&v46);
  uint64_t v15 = NSError.init(from:)(&v46);
  if (v5)
  {
    uint64_t v16 = a1;
    return __swift_destroy_boxed_opaque_existential_1Tm(v16);
  }
  uint64_t v40 = a4;
  uint64_t v41 = 0;
  unint64_t v37 = v12;
  uint64_t v38 = v14;
  uint64_t v42 = v4;
  uint64_t v43 = a1;
  uint64_t v39 = v9;
  id v44 = v15;
  id v18 = objc_msgSend(v15, sel_domain);
  uint64_t v19 = sub_1D76F7FF4();
  uint64_t v21 = v20;

  uint64_t v22 = v45;
  if (v19 == sub_1D76F7A74() && v21 == v23)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v25 = sub_1D76F89E4();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v25 & 1) == 0)
    {
      uint64_t v26 = (uint64_t)v37;
      Error<>.init(_:_:)(5, 0xD00000000000002FLL, 0x80000001D76FEE70, a2, v22);
      uint64_t v46 = 0;
      uint64_t v47 = 0xE000000000000000;
      sub_1D76F8464();
      sub_1D76F80A4();
      uint64_t v48 = a2;
      swift_getMetatypeMetadata();
      sub_1D76F8044();
      sub_1D76F80A4();
      swift_bridgeObjectRelease();
      sub_1D76F80A4();
      uint64_t v27 = v38;
      Error<>.init(_:_:)(v26, v46, v47, a2, v22);
      uint64_t v28 = sub_1D76F89B4();
      uint64_t v29 = v43;
      id v30 = v44;
      if (v28)
      {
        (*(void (**)(char *, uint64_t))(v39 + 8))(v27, a2);
      }
      else
      {
        swift_allocError();
        (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v36, v27, a2);
      }
      swift_willThrow();

      uint64_t v16 = v29;
      return __swift_destroy_boxed_opaque_existential_1Tm(v16);
    }
  }
  id v31 = v44;
  id v32 = objc_msgSend(v44, sel_code);
  id v33 = objc_msgSend(v31, sel_userInfo);
  uint64_t v34 = sub_1D76F7ED4();

  uint64_t v35 = sub_1D769B40C((uint64_t)v32, a2, v22);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 24))(v35, v34, a2, v22);

  return __swift_destroy_boxed_opaque_existential_1Tm(v43);
}

void _Error<>.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188788](a1);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, a2);
  uint64_t v8 = sub_1D76F89B4();
  if (v8)
  {
    uint64_t v9 = (void *)v8;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a2);
  }
  else
  {
    uint64_t v9 = (void *)swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v10, v6, a2);
  }
  uint64_t v11 = (void *)sub_1D76F7B84();

  NSError.encode(to:)(a1);
}

uint64_t _Error<>.errorDescription.getter()
{
  return sub_1D76F3F34();
}

uint64_t _Error<>.failureReason.getter()
{
  return sub_1D76F3F34();
}

uint64_t sub_1D76F3F34()
{
  uint64_t v0 = sub_1D76F7A84();
  uint64_t v1 = sub_1D76F7FF4();
  if (!*(void *)(v0 + 16) || (unint64_t v3 = sub_1D769B2B0(v1, v2), (v4 & 1) == 0))
  {
    long long v7 = 0u;
    long long v8 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  sub_1D769A9C4(*(void *)(v0 + 56) + 32 * v3, (uint64_t)&v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((void *)&v8 + 1))
  {
LABEL_9:
    sub_1D769AC0C((uint64_t)&v7, (uint64_t *)&unk_1EBA33F78);
    return 0;
  }
  if (swift_dynamicCast()) {
    return v6;
  }
  else {
    return 0;
  }
}

uint64_t _Error<>.recoverySuggestion.getter()
{
  return sub_1D76F3F34();
}

uint64_t _Error<>.helpAnchor.getter()
{
  return sub_1D76F3F34();
}

void sub_1D76F4030()
{
}

void _Error.init(code:userInfo:)()
{
}

uint64_t _Error.init(code:userInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_1D769B40C(a1, a3, a4);
  long long v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 24);

  return v8(v7, a2, a3, a4);
}

BOOL static _Error.~= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  MEMORY[0x1F4188788](a1);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  uint64_t v7 = sub_1D76F89B4();
  if (v7)
  {
    long long v8 = (void *)v7;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a3);
  }
  else
  {
    long long v8 = (void *)swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v9, v6, a3);
  }
  BOOL v10 = static _Error.~= infix(_:_:)();

  return v10;
}

id sub_1D76F4344()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for _HandlerBox();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t _Error<>.recoveryOptions.getter()
{
  uint64_t v0 = sub_1D76F7A84();
  uint64_t v1 = sub_1D76F7FF4();
  if (!*(void *)(v0 + 16) || (unint64_t v3 = sub_1D769B2B0(v1, v2), (v4 & 1) == 0))
  {
    long long v7 = 0u;
    long long v8 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  sub_1D769A9C4(*(void *)(v0 + 56) + 32 * v3, (uint64_t)&v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((void *)&v8 + 1))
  {
LABEL_7:
    sub_1D769AC0C((uint64_t)&v7, (uint64_t *)&unk_1EBA33F78);
    return MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33EB0);
  if (swift_dynamicCast()) {
    return v6;
  }
  return MEMORY[0x1E4FBC860];
}

uint64_t _Error<>.attemptRecovery(optionIndex:resultHandler:)(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *(void *)(a4 - 8);
  MEMORY[0x1F4188788](a1);
  uint64_t v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1D76F7A84();
  uint64_t v14 = sub_1D76F7FF4();
  if (!*(void *)(v13 + 16) || (unint64_t v16 = sub_1D769B2B0(v14, v15), (v17 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  sub_1D769A9C4(*(void *)(v13 + 56) + 32 * v16, (uint64_t)v50);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v18 = (uint64_t)v51;
  if (!v51)
  {
LABEL_8:
    char v32 = sub_1D76F7B44();
    return a2(v32 & 1);
  }
  uint64_t v44 = v10;
  uint64_t v46 = a1;
  uint64_t v19 = __swift_project_boxed_opaque_existential_1(v50, (uint64_t)v51);
  uint64_t v45 = &v43;
  uint64_t v20 = *(void *)(v18 - 8);
  MEMORY[0x1F4188788](v19);
  uint64_t v22 = (char *)&v43 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v20 + 16))(v22);
  uint64_t v23 = (void *)sub_1D76F89D4();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v18);
  uint64_t v24 = v23;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v50);
  if ((objc_msgSend(v23, sel_respondsToSelector_, sel_attemptRecoveryFromError_optionIndex_delegate_didRecoverSelector_contextInfo_) & 1) == 0)
  {
    swift_unknownObjectRelease();
    goto LABEL_8;
  }
  char v25 = (objc_class *)type metadata accessor for _HandlerBox();
  uint64_t v26 = (char *)objc_allocWithZone(v25);
  uint64_t v27 = &v26[OBJC_IVAR____TtC7MercuryP33_2B1830E49151A2D290BADAC81D16B73411_HandlerBox_handler];
  *(void *)uint64_t v27 = a2;
  *((void *)v27 + 1) = a3;
  v49.receiver = v26;
  v49.super_class = v25;
  swift_unknownObjectRetain();
  swift_retain();
  id v28 = objc_msgSendSuper2(&v49, sel_init);
  uint64_t v29 = v44;
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v12, v5, a4);
  uint64_t v30 = sub_1D76F89B4();
  if (v30)
  {
    id v31 = (void *)v30;
    (*(void (**)(char *, uint64_t))(v29 + 8))(v12, a4);
  }
  else
  {
    id v31 = (void *)swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v34, v12, a4);
  }
  uint64_t v51 = v25;
  v50[0] = v28;
  id v35 = v28;
  uint64_t v36 = (void *)sub_1D76F7B84();
  sub_1D769AC68((uint64_t)v50, (uint64_t)v47, (uint64_t *)&unk_1EBA33F78);
  uint64_t v37 = v48;
  if (v48)
  {
    uint64_t v38 = __swift_project_boxed_opaque_existential_1(v47, v48);
    uint64_t v39 = *(void *)(v37 - 8);
    MEMORY[0x1F4188788](v38);
    uint64_t v41 = (char *)&v43 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v39 + 16))(v41);
    uint64_t v42 = sub_1D76F89D4();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v41, v37);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v47);
  }
  else
  {
    uint64_t v42 = 0;
  }
  objc_msgSend(v24, sel_attemptRecoveryFromError_optionIndex_delegate_didRecoverSelector_contextInfo_, v36, v46, v42, sel_invoke::, 0);

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  return sub_1D769AC0C((uint64_t)v50, (uint64_t *)&unk_1EBA33F78);
}

id _Error<>.attemptRecovery(optionIndex:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188788](a1);
  long long v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1D76F7A84();
  uint64_t v10 = sub_1D76F7FF4();
  if (!*(void *)(v9 + 16) || (unint64_t v12 = sub_1D769B2B0(v10, v11), (v13 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  sub_1D769A9C4(*(void *)(v9 + 56) + 32 * v12, (uint64_t)v29);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v14 = v30;
  if (!v30) {
    return 0;
  }
  uint64_t v28 = a1;
  uint64_t v15 = __swift_project_boxed_opaque_existential_1(v29, v30);
  uint64_t v16 = *(void *)(v14 - 8);
  MEMORY[0x1F4188788](v15);
  uint64_t v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v16 + 16))(v18);
  uint64_t v19 = (void *)sub_1D76F89D4();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v14);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v29);
  if ((objc_msgSend(v19, sel_respondsToSelector_, sel_attemptRecoveryFromError_optionIndex_) & 1) == 0)
  {
    swift_unknownObjectRelease();
    return 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v3, a2);
  swift_unknownObjectRetain();
  uint64_t v20 = sub_1D76F89B4();
  uint64_t v21 = v28;
  if (v20)
  {
    uint64_t v22 = (void *)v20;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a2);
  }
  else
  {
    uint64_t v22 = (void *)swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v25, v8, a2);
  }
  uint64_t v26 = (void *)sub_1D76F7B84();
  id v23 = objc_msgSend(v19, sel_attemptRecoveryFromError_optionIndex_, v26, v21);
  swift_unknownObjectRelease_n();

  return v23;
}

uint64_t static Error<>.unimplemented.getter(uint64_t a1, uint64_t a2)
{
  return Error<>.init(_:_:)(1, 0xD00000000000003ALL, 0x80000001D76FEFB0, a1, a2);
}

uint64_t static Error<>.permissionDenied.getter(uint64_t a1, uint64_t a2)
{
  return Error<>.init(_:_:)(2, 0xD000000000000047, 0x80000001D76FEFF0, a1, a2);
}

uint64_t sub_1D76F4CD4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33EF8);
  uint64_t v6 = sub_1D76F85F4();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      uint64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      uint64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        sub_1D769B2A0(v24, v35);
      }
      else
      {
        sub_1D769A9C4((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      sub_1D76F8D24();
      sub_1D76F8094();
      uint64_t result = sub_1D76F8D54();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      uint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      *uint64_t v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)sub_1D769B2A0(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1D76F4FD4(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v44 = sub_1D76F7D04();
  uint64_t v5 = *(void *)(v44 - 8);
  MEMORY[0x1F4188788](v44);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AD50);
  int v45 = a2;
  uint64_t v9 = sub_1D76F85F4();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  uint64_t v40 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  else {
    uint64_t v13 = -1;
  }
  unint64_t v14 = v13 & v12;
  uint64_t v38 = v2;
  int64_t v39 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v41 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
  uint64_t v46 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
  uint64_t v15 = v9 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  uint64_t v42 = v8;
  uint64_t v43 = v7;
  while (1)
  {
    if (v14)
    {
      unint64_t v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v20 = v19 | (v17 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v39) {
      break;
    }
    uint64_t v22 = v40;
    unint64_t v23 = v40[v21];
    ++v17;
    if (!v23)
    {
      int64_t v17 = v21 + 1;
      if (v21 + 1 >= v39) {
        goto LABEL_34;
      }
      unint64_t v23 = v40[v17];
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v39)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v38;
          if ((v45 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = v40[v24];
        if (!v23)
        {
          while (1)
          {
            int64_t v17 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v39) {
              goto LABEL_34;
            }
            unint64_t v23 = v40[v17];
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v17 = v24;
      }
    }
LABEL_21:
    unint64_t v14 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_22:
    uint64_t v25 = v5;
    uint64_t v26 = *(void *)(v5 + 72);
    unint64_t v27 = *(void *)(v8 + 48) + v26 * v20;
    char v28 = v43;
    uint64_t v29 = v44;
    if (v45)
    {
      (*v46)(v43, v27, v44);
      sub_1D76B13F8(*(void *)(v8 + 56) + 8 * v20, (uint64_t)v47, &qword_1EA83A700);
    }
    else
    {
      (*v41)(v43, v27, v44);
      sub_1D769AC68(*(void *)(v8 + 56) + 8 * v20, (uint64_t)v47, &qword_1EA83A700);
    }
    sub_1D76F6934();
    uint64_t result = sub_1D76F7F54();
    uint64_t v30 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v31 = result & ~v30;
    unint64_t v32 = v31 >> 6;
    if (((-1 << v31) & ~*(void *)(v15 + 8 * (v31 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v31) & ~*(void *)(v15 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v33 = 0;
      unint64_t v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v35 = v32 == v34;
        if (v32 == v34) {
          unint64_t v32 = 0;
        }
        v33 |= v35;
        uint64_t v36 = *(void *)(v15 + 8 * v32);
      }
      while (v36 == -1);
      unint64_t v18 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    (*v46)((char *)(*(void *)(v10 + 48) + v26 * v18), (unint64_t)v28, v29);
    uint64_t result = sub_1D76B13F8((uint64_t)v47, *(void *)(v10 + 56) + 8 * v18, &qword_1EA83A700);
    ++*(void *)(v10 + 16);
    uint64_t v5 = v25;
    uint64_t v8 = v42;
  }
  swift_release();
  uint64_t v3 = v38;
  uint64_t v22 = v40;
  if ((v45 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v37 = 1 << *(unsigned char *)(v8 + 32);
  if (v37 >= 64) {
    bzero(v22, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v37;
  }
  *(void *)(v8 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

uint64_t sub_1D76F5400(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for RemoteDevice.Identity();
  uint64_t v40 = *(void *)(v5 - 8);
  uint64_t v41 = v5;
  MEMORY[0x1F4188788](v5);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA83A680);
  int v42 = a2;
  uint64_t v9 = sub_1D76F85F4();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  int64_t v39 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  else {
    uint64_t v13 = -1;
  }
  unint64_t v14 = v13 & v12;
  uint64_t v37 = v2;
  int64_t v38 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = v9 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  while (1)
  {
    if (v14)
    {
      unint64_t v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v20 = v19 | (v17 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v38) {
      break;
    }
    uint64_t v22 = v39;
    unint64_t v23 = v39[v21];
    ++v17;
    if (!v23)
    {
      int64_t v17 = v21 + 1;
      if (v21 + 1 >= v38) {
        goto LABEL_34;
      }
      unint64_t v23 = v39[v17];
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v38)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v37;
          if ((v42 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = v39[v24];
        if (!v23)
        {
          while (1)
          {
            int64_t v17 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v38) {
              goto LABEL_34;
            }
            unint64_t v23 = v39[v17];
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v17 = v24;
      }
    }
LABEL_21:
    unint64_t v14 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_22:
    uint64_t v25 = *(void *)(v40 + 72);
    uint64_t v26 = *(void *)(v8 + 48) + v25 * v20;
    if (v42)
    {
      sub_1D76AC558(v26, (uint64_t)v7);
      uint64_t v27 = *(void *)(*(void *)(v8 + 56) + 8 * v20);
    }
    else
    {
      sub_1D76E2478(v26, (uint64_t)v7);
      uint64_t v27 = *(void *)(*(void *)(v8 + 56) + 8 * v20);
      swift_retain();
    }
    sub_1D76F8D24();
    sub_1D76F7D04();
    sub_1D76F6934();
    sub_1D76F7F64();
    swift_bridgeObjectRetain();
    sub_1D76F8094();
    swift_bridgeObjectRelease();
    uint64_t result = sub_1D76F8D54();
    uint64_t v28 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v15 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v29) & ~*(void *)(v15 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v33 = v30 == v32;
        if (v30 == v32) {
          unint64_t v30 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v15 + 8 * v30);
      }
      while (v34 == -1);
      unint64_t v18 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t result = sub_1D76AC558((uint64_t)v7, *(void *)(v10 + 48) + v25 * v18);
    *(void *)(*(void *)(v10 + 56) + 8 * v18) = v27;
    ++*(void *)(v10 + 16);
  }
  swift_release();
  uint64_t v3 = v37;
  uint64_t v22 = v39;
  if ((v42 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v35 = 1 << *(unsigned char *)(v8 + 32);
  if (v35 >= 64) {
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v35;
  }
  *(void *)(v8 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

uint64_t sub_1D76F57F0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83ABD0);
  uint64_t result = sub_1D76F85F4();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    unint64_t v30 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v29 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v14 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v15 = v14 | (v8 << 6);
      }
      else
      {
        int64_t v16 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v16 >= v29) {
          goto LABEL_34;
        }
        unint64_t v17 = v30[v16];
        ++v8;
        if (!v17)
        {
          int64_t v8 = v16 + 1;
          if (v16 + 1 >= v29) {
            goto LABEL_34;
          }
          unint64_t v17 = v30[v8];
          if (!v17)
          {
            int64_t v18 = v16 + 2;
            if (v18 >= v29)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_41;
              }
              uint64_t v28 = 1 << *(unsigned char *)(v5 + 32);
              if (v28 >= 64) {
                bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *unint64_t v30 = -1 << v28;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v17 = v30[v18];
            if (!v17)
            {
              while (1)
              {
                int64_t v8 = v18 + 1;
                if (__OFADD__(v18, 1)) {
                  goto LABEL_43;
                }
                if (v8 >= v29) {
                  goto LABEL_34;
                }
                unint64_t v17 = v30[v8];
                ++v18;
                if (v17) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v18;
          }
        }
LABEL_21:
        unint64_t v11 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v8 << 6);
      }
      uint64_t v19 = *(void *)(*(void *)(v5 + 48) + 8 * v15);
      unint64_t v20 = (long long *)(*(void *)(v5 + 56) + 40 * v15);
      if (a2) {
        sub_1D76BBC14(v20, (uint64_t)v31);
      }
      else {
        sub_1D76B116C((uint64_t)v20, (uint64_t)v31);
      }
      sub_1D76F8D24();
      sub_1D76F8D34();
      uint64_t result = sub_1D76F8D54();
      uint64_t v21 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v12 + 8 * (v22 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v22) & ~*(void *)(v12 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v26 = v23 == v25;
          if (v23 == v25) {
            unint64_t v23 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v12 + 8 * v23);
        }
        while (v27 == -1);
        unint64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v7 + 48) + 8 * v13) = v19;
      uint64_t result = sub_1D76BBC14(v31, *(void *)(v7 + 56) + 40 * v13);
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1D76F5AD0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F00);
  char v38 = a2;
  uint64_t v6 = sub_1D76F85F4();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v35 = v2;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    int64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 32 * v20);
    uint64_t v30 = *v29;
    uint64_t v31 = v29[1];
    uint64_t v33 = v29[2];
    uint64_t v32 = v29[3];
    long long v39 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    sub_1D76F8D24();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBA33E50);
    sub_1D76F8044();
    sub_1D76F8094();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_1D76F8094();
    swift_bridgeObjectRelease();
    uint64_t result = sub_1D76F8D54();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    int64_t v18 = (void *)(*(void *)(v7 + 48) + 32 * v17);
    *int64_t v18 = v30;
    v18[1] = v31;
    void v18[2] = v33;
    _OWORD v18[3] = v32;
    *(_OWORD *)(*(void *)(v7 + 56) + 16 * v17) = v39;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  unint64_t v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

void *sub_1D76F5E48()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33EF8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1D76F85E4();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    uint64_t *v1 = v4;
    return result;
  }
  char v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_1D769A9C4(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    int64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v21 = v19;
    v21[1] = v18;
    sub_1D769B2A0(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1D76F6030()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1D76F7D04();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188788](v2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AD50);
  uint64_t v6 = *v0;
  uint64_t v7 = sub_1D76F85E4();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_25:
    uint64_t *v1 = v8;
    return result;
  }
  int64_t v22 = v1;
  uint64_t result = (void *)(v7 + 64);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    uint64_t result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 64);
  uint64_t v23 = v6 + 64;
  int64_t v24 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v25 = v3 + 32;
  uint64_t v26 = v3 + 16;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v19 >= v24) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v23 + 8 * v19);
    ++v11;
    if (!v20)
    {
      int64_t v11 = v19 + 1;
      if (v19 + 1 >= v24) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v23 + 8 * v11);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    uint64_t v18 = 8 * v16;
    sub_1D769AC68(*(void *)(v6 + 56) + v18, (uint64_t)v27, &qword_1EA83A700);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v17, v5, v2);
    uint64_t result = (void *)sub_1D76B13F8((uint64_t)v27, *(void *)(v8 + 56) + v18, &qword_1EA83A700);
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v24)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v22;
    goto LABEL_25;
  }
  unint64_t v20 = *(void *)(v23 + 8 * v21);
  if (v20)
  {
    int64_t v11 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v11 >= v24) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v23 + 8 * v11);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_1D76F62EC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for RemoteDevice.Identity();
  uint64_t v25 = *(void *)(v2 - 8);
  MEMORY[0x1F4188788](v2 - 8);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA83A680);
  uint64_t v5 = *v0;
  uint64_t v6 = sub_1D76F85E4();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_25:
    uint64_t *v1 = v7;
    return result;
  }
  int64_t v24 = v1;
  uint64_t result = (void *)(v6 + 64);
  uint64_t v9 = v5 + 64;
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v9 + 8 * v10) {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v10);
  }
  int64_t v11 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v17 = v16 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v21 >= v15) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v9 + 8 * v21);
    ++v11;
    if (!v22)
    {
      int64_t v11 = v21 + 1;
      if (v21 + 1 >= v15) {
        goto LABEL_23;
      }
      unint64_t v22 = *(void *)(v9 + 8 * v11);
      if (!v22) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v22 - 1) & v22;
    unint64_t v17 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_9:
    unint64_t v18 = *(void *)(v25 + 72) * v17;
    sub_1D76E2478(*(void *)(v5 + 48) + v18, (uint64_t)v4);
    uint64_t v19 = 8 * v17;
    uint64_t v20 = *(void *)(*(void *)(v5 + 56) + 8 * v17);
    sub_1D76AC558((uint64_t)v4, *(void *)(v7 + 48) + v18);
    *(void *)(*(void *)(v7 + 56) + v19) = v20;
    uint64_t result = (void *)swift_retain();
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v15)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v24;
    goto LABEL_25;
  }
  unint64_t v22 = *(void *)(v9 + 8 * v23);
  if (v22)
  {
    int64_t v11 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v11 >= v15) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v9 + 8 * v11);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_1D76F654C()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83ABD0);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1D76F85E4();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 40 * v15;
    sub_1D76B116C(*(void *)(v2 + 56) + 40 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t result = (void *)sub_1D76BBC14(v22, *(void *)(v4 + 56) + v18);
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1D76F6714()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA33F00);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1D76F85E4();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 32 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 32 * v15;
    uint64_t v19 = *(void *)(v17 + 16);
    uint64_t v18 = *(void *)(v17 + 24);
    uint64_t v20 = 16 * v15;
    uint64_t v21 = *(void *)(v4 + 48) + v16;
    long long v22 = *(_OWORD *)(*(void *)(v2 + 56) + v20);
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v17;
    *(void *)(v21 + 16) = v19;
    *(void *)(v21 + 24) = v18;
    *(_OWORD *)(*(void *)(v4 + 56) + v20) = v22;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_retain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1D76F68E4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  return sub_1D769A710(a1, a2, a3, a4, a5);
}

uint64_t type metadata accessor for _HandlerBox()
{
  return self;
}

uint64_t dispatch thunk of _Error.init(code:userInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

unint64_t sub_1D76F6934()
{
  unint64_t result = qword_1EA83A710;
  if (!qword_1EA83A710)
  {
    sub_1D76F7D04();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA83A710);
  }
  return result;
}

uint64_t static DecodingError.keyNotFoundError<A>(expecting:in:debugDescription:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v21 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = MEMORY[0x1F4188788](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v18 - v9;
  a4[3] = v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  a4[4] = AssociatedConformanceWitness;
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(a4);
  unint64_t v12 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v7 + 16);
  v12(boxed_opaque_existential_0Tm, a1, AssociatedTypeWitness);
  uint64_t v13 = v21;
  sub_1D76F8A84();
  v12((uint64_t *)v10, a1, AssociatedTypeWitness);
  if (!v13)
  {
    unint64_t v22 = 0;
    unint64_t v23 = 0xE000000000000000;
    sub_1D76F8464();
    swift_bridgeObjectRelease();
    unint64_t v22 = 0xD000000000000015;
    unint64_t v23 = 0x80000001D76FF0E0;
    sub_1D76F8DB4();
    sub_1D76F80A4();
    swift_bridgeObjectRelease();
    sub_1D76F80A4();
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA83AD58);
  unint64_t v14 = *(void (**)(char *, uint64_t))(v7 + 8);
  swift_bridgeObjectRetain();
  v14(v10, AssociatedTypeWitness);
  sub_1D76F84E4();
  uint64_t v15 = *MEMORY[0x1E4FBBA68];
  uint64_t v16 = sub_1D76F8504();
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 104))(a4, v15, v16);
}

uint64_t static DecodingError.typeMismatchError<A>(expecting:butFound:forKey:in:debugDescription:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X5>, void *a5@<X8>)
{
  sub_1D76F8A84();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34C78);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D76FA300;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *(void *)(inited + 56) = AssociatedTypeWitness;
  *(void *)(inited + 64) = swift_getAssociatedConformanceWitness();
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)(inited + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(boxed_opaque_existential_0Tm, a3, AssociatedTypeWitness);
  sub_1D76F76A8(inited);
  static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)(a1, a2, a4, a5);
  return swift_bridgeObjectRelease();
}

uint64_t static DecodingError.valueNotFoundError(expectingValueOfType:atCodingPath:debugDescription:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, void *a3@<X8>)
{
  *a3 = a1;
  if (!a2)
  {
    sub_1D76F8464();
    swift_bridgeObjectRelease();
    sub_1D76F8DF4();
    sub_1D76F80A4();
    swift_bridgeObjectRelease();
    sub_1D76F80A4();
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34240);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1D76F84E4();
  uint64_t v4 = *MEMORY[0x1E4FBBA80];
  uint64_t v5 = sub_1D76F8504();
  uint64_t v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104);

  return v6(a3, v4, v5);
}

uint64_t static DecodingError.valueNotFoundError(expectingValueOfType:in:debugDescription:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X3>, void *a4@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  sub_1D76F87B4();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34C78);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D76FA300;
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  uint64_t v11 = sub_1D76F87C4();
  sub_1D76F87A4();
  sub_1D76F80A4();
  swift_bridgeObjectRelease();
  *(void *)(inited + 56) = &type metadata for CodableIndexKey;
  *(void *)(inited + 64) = sub_1D76AC504();
  uint64_t v9 = swift_allocObject();
  *(void *)(inited + 32) = v9;
  *(void *)(v9 + 16) = 0x207865646E49;
  *(void *)(v9 + 24) = 0xE600000000000000;
  *(void *)(v9 + 32) = v11;
  *(unsigned char *)(v9 + 40) = 0;
  sub_1D76F76A8(inited);
  static DecodingError.valueNotFoundError(expectingValueOfType:atCodingPath:debugDescription:)(a1, a3, a4);
  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  sub_1D76F89F4();
  static DecodingError.valueNotFoundError(expectingValueOfType:atCodingPath:debugDescription:)(a1, a3, a4);

  return swift_bridgeObjectRelease();
}

uint64_t static DecodingError.typeMismatchError(expecting:butFound:in:debugDescription:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X4>, void *a5@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a3, a3[3]);
  sub_1D76F87B4();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34C78);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D76FA300;
  __swift_project_boxed_opaque_existential_1(a3, a3[3]);
  uint64_t v13 = sub_1D76F87C4();
  sub_1D76F87A4();
  sub_1D76F80A4();
  swift_bridgeObjectRelease();
  *(void *)(inited + 56) = &type metadata for CodableIndexKey;
  *(void *)(inited + 64) = sub_1D76AC504();
  uint64_t v10 = swift_allocObject();
  *(void *)(inited + 32) = v10;
  *(void *)(v10 + 16) = 0x207865646E49;
  *(void *)(v10 + 24) = 0xE600000000000000;
  *(void *)(v10 + 32) = v13;
  *(unsigned char *)(v10 + 40) = 0;
  sub_1D76F76A8(inited);
  static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)(a1, a2, a4, a5);
  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  __swift_project_boxed_opaque_existential_1(a3, a3[3]);
  sub_1D76F89F4();
  static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)(a1, a2, a4, a5);

  return swift_bridgeObjectRelease();
}

uint64_t static DecodingError.typeMismatchError(expecting:butFound:atCodingPath:debugDescription:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, void *a4@<X8>)
{
  *a4 = a1;
  sub_1D769A9C4(a2, (uint64_t)v9);
  if (!a3)
  {
    sub_1D76F8464();
    swift_bridgeObjectRelease();
    sub_1D76F8DF4();
    sub_1D76F80A4();
    swift_bridgeObjectRelease();
    sub_1D76F80A4();
    __swift_project_boxed_opaque_existential_1(v9, v9[3]);
    swift_getDynamicType();
    sub_1D76F8DF4();
    sub_1D76F80A4();
    swift_bridgeObjectRelease();
    sub_1D76F80A4();
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34240);
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v9);
  swift_bridgeObjectRetain();
  sub_1D76F84E4();
  uint64_t v6 = *MEMORY[0x1E4FBBA70];
  uint64_t v7 = sub_1D76F8504();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 104))(a4, v6, v7);
}

uint64_t static DecodingError.valueNotFoundError<A>(expectingValueOfType:forKey:in:debugDescription:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, void *a4@<X8>)
{
  sub_1D76F8A84();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBA34C78);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D76FA300;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *(void *)(inited + 56) = AssociatedTypeWitness;
  *(void *)(inited + 64) = swift_getAssociatedConformanceWitness();
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)(inited + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(boxed_opaque_existential_0Tm, a2, AssociatedTypeWitness);
  sub_1D76F76A8(inited);
  static DecodingError.valueNotFoundError(expectingValueOfType:atCodingPath:debugDescription:)(a1, a3, a4);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D76F76A8(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  uint64_t v3 = sub_1D76E02C8(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v10 = (unint64_t)&v3[5 * v9 + 4];
  if (a1 + 32 < v10 + 40 * v8 && v10 < a1 + 32 + 40 * v8) {
    goto LABEL_24;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBA34C80);
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    _OWORD v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_1D76F8614();
  __break(1u);
  return result;
}

uint64_t sub_1D76F7820()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 41, 7);
}

uint64_t sub_1D76F7858(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  uint64_t v3 = sub_1D76E02DC(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v10 = &v3[3 * v9 + 4];
  if (a1 + 32 < (unint64_t)&v10[3 * v8] && (unint64_t)v10 < a1 + 32 + 24 * v8) {
    goto LABEL_24;
  }
  memcpy(v10, (const void *)(a1 + 32), 24 * v8);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    _OWORD v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_1D76F8614();
  __break(1u);
  return result;
}

void connect_loopback_sync_cold_1()
{
}

void __connect_loopback_sync_block_invoke_cold_1()
{
  __assert_rtn("connect_loopback_sync_block_invoke", "loopback.m", 59, "remote_device_get_state(dev) == REMOTE_DEVICE_STATE_CONNECTED");
}

uint64_t sub_1D76F7A04()
{
  return MEMORY[0x1F40E2D38]();
}

uint64_t sub_1D76F7A14()
{
  return MEMORY[0x1F40E2D50]();
}

uint64_t sub_1D76F7A24()
{
  return MEMORY[0x1F40E2D58]();
}

uint64_t sub_1D76F7A34()
{
  return MEMORY[0x1F40E2DF0]();
}

uint64_t sub_1D76F7A44()
{
  return MEMORY[0x1F40E2E28]();
}

uint64_t sub_1D76F7A54()
{
  return MEMORY[0x1F40E2E38]();
}

uint64_t sub_1D76F7A64()
{
  return MEMORY[0x1F40E2E50]();
}

uint64_t sub_1D76F7A74()
{
  return MEMORY[0x1F40E35E8]();
}

uint64_t sub_1D76F7A84()
{
  return MEMORY[0x1F40E35F0]();
}

uint64_t sub_1D76F7A94()
{
  return MEMORY[0x1F40E35F8]();
}

uint64_t sub_1D76F7AA4()
{
  return MEMORY[0x1F40E37C0]();
}

uint64_t sub_1D76F7AB4()
{
  return MEMORY[0x1F40E37D0]();
}

uint64_t sub_1D76F7AC4()
{
  return MEMORY[0x1F40E37E0]();
}

uint64_t sub_1D76F7AD4()
{
  return MEMORY[0x1F40E3800]();
}

uint64_t sub_1D76F7AE4()
{
  return MEMORY[0x1F40E3818]();
}

uint64_t sub_1D76F7AF4()
{
  return MEMORY[0x1F40E3830]();
}

uint64_t sub_1D76F7B04()
{
  return MEMORY[0x1F40E3A68]();
}

uint64_t sub_1D76F7B14()
{
  return MEMORY[0x1F40E3A70]();
}

uint64_t sub_1D76F7B24()
{
  return MEMORY[0x1F40E3A78]();
}

uint64_t sub_1D76F7B34()
{
  return MEMORY[0x1F40E3A80]();
}

uint64_t sub_1D76F7B44()
{
  return MEMORY[0x1F40E3F20]();
}

uint64_t sub_1D76F7B54()
{
  return MEMORY[0x1F40E4138]();
}

uint64_t sub_1D76F7B64()
{
  return MEMORY[0x1F40E44F0]();
}

uint64_t sub_1D76F7B74()
{
  return MEMORY[0x1F40E44F8]();
}

uint64_t sub_1D76F7B84()
{
  return MEMORY[0x1F40E4540]();
}

uint64_t sub_1D76F7B94()
{
  return MEMORY[0x1F40E4550]();
}

uint64_t sub_1D76F7BA4()
{
  return MEMORY[0x1F40E46B8]();
}

uint64_t sub_1D76F7BB4()
{
  return MEMORY[0x1F40E46D0]();
}

uint64_t sub_1D76F7BC4()
{
  return MEMORY[0x1F40E4898]();
}

uint64_t sub_1D76F7BD4()
{
  return MEMORY[0x1F40E4A58]();
}

uint64_t sub_1D76F7BE4()
{
  return MEMORY[0x1F40E4A60]();
}

uint64_t sub_1D76F7BF4()
{
  return MEMORY[0x1F40E4AC0]();
}

uint64_t sub_1D76F7C04()
{
  return MEMORY[0x1F40E4B80]();
}

uint64_t sub_1D76F7C14()
{
  return MEMORY[0x1F40E4BF0]();
}

uint64_t sub_1D76F7C24()
{
  return MEMORY[0x1F40E4C00]();
}

uint64_t sub_1D76F7C34()
{
  return MEMORY[0x1F40E4C80]();
}

uint64_t sub_1D76F7C44()
{
  return MEMORY[0x1F40E4DA8]();
}

uint64_t sub_1D76F7C54()
{
  return MEMORY[0x1F40E4ED0]();
}

uint64_t sub_1D76F7C64()
{
  return MEMORY[0x1F40E4EE0]();
}

uint64_t sub_1D76F7C74()
{
  return MEMORY[0x1F40E52A0]();
}

uint64_t sub_1D76F7C84()
{
  return MEMORY[0x1F40E52B0]();
}

uint64_t sub_1D76F7C94()
{
  return MEMORY[0x1F40E5388]();
}

uint64_t sub_1D76F7CA4()
{
  return MEMORY[0x1F40E53A0]();
}

uint64_t sub_1D76F7CB4()
{
  return MEMORY[0x1F40E53B0]();
}

uint64_t sub_1D76F7CC4()
{
  return MEMORY[0x1F40E53E8]();
}

uint64_t sub_1D76F7CD4()
{
  return MEMORY[0x1F40E5418]();
}

uint64_t sub_1D76F7CE4()
{
  return MEMORY[0x1F40E5428]();
}

uint64_t sub_1D76F7CF4()
{
  return MEMORY[0x1F40E5438]();
}

uint64_t sub_1D76F7D04()
{
  return MEMORY[0x1F40E5448]();
}

uint64_t sub_1D76F7D14()
{
  return MEMORY[0x1F40E5890]();
}

uint64_t sub_1D76F7D24()
{
  return MEMORY[0x1F40E5D90]();
}

uint64_t sub_1D76F7D34()
{
  return MEMORY[0x1F40E5E28]();
}

uint64_t sub_1D76F7D44()
{
  return MEMORY[0x1F40E5E30]();
}

uint64_t sub_1D76F7D54()
{
  return MEMORY[0x1F40E5E40]();
}

uint64_t sub_1D76F7D64()
{
  return MEMORY[0x1F40E5F10]();
}

uint64_t sub_1D76F7D74()
{
  return MEMORY[0x1F40E5F18]();
}

uint64_t sub_1D76F7D84()
{
  return MEMORY[0x1F4188500]();
}

uint64_t sub_1D76F7D94()
{
  return MEMORY[0x1F4188670]();
}

uint64_t sub_1D76F7DA4()
{
  return MEMORY[0x1F4188680]();
}

uint64_t sub_1D76F7DB4()
{
  return MEMORY[0x1F41886A0]();
}

uint64_t sub_1D76F7DC4()
{
  return MEMORY[0x1F4186B70]();
}

uint64_t sub_1D76F7DD4()
{
  return MEMORY[0x1F4188490]();
}

uint64_t sub_1D76F7DE4()
{
  return MEMORY[0x1F4186B80]();
}

uint64_t sub_1D76F7DF4()
{
  return MEMORY[0x1F41884A8]();
}

uint64_t sub_1D76F7E04()
{
  return MEMORY[0x1F4186B88]();
}

uint64_t sub_1D76F7E14()
{
  return MEMORY[0x1F4186B90]();
}

uint64_t sub_1D76F7E24()
{
  return MEMORY[0x1F4186B98]();
}

uint64_t sub_1D76F7E34()
{
  return MEMORY[0x1F4186BB0]();
}

uint64_t sub_1D76F7E44()
{
  return MEMORY[0x1F4186BD8]();
}

uint64_t sub_1D76F7E54()
{
  return MEMORY[0x1F40D69C0]();
}

uint64_t sub_1D76F7E64()
{
  return MEMORY[0x1F4186CB0]();
}

uint64_t sub_1D76F7E74()
{
  return MEMORY[0x1F4186CF8]();
}

uint64_t sub_1D76F7E84()
{
  return MEMORY[0x1F4186D60]();
}

uint64_t sub_1D76F7E94()
{
  return MEMORY[0x1F4183280]();
}

uint64_t sub_1D76F7EA4()
{
  return MEMORY[0x1F41832C0]();
}

uint64_t sub_1D76F7EB4()
{
  return MEMORY[0x1F41832D0]();
}

uint64_t sub_1D76F7EC4()
{
  return MEMORY[0x1F40E6000]();
}

uint64_t sub_1D76F7ED4()
{
  return MEMORY[0x1F40E6030]();
}

uint64_t sub_1D76F7EE4()
{
  return MEMORY[0x1F4183358]();
}

uint64_t sub_1D76F7EF4()
{
  return MEMORY[0x1F4183398]();
}

uint64_t sub_1D76F7F04()
{
  return MEMORY[0x1F41834A8]();
}

uint64_t sub_1D76F7F14()
{
  return MEMORY[0x1F41834F8]();
}

uint64_t sub_1D76F7F24()
{
  return MEMORY[0x1F4183500]();
}

uint64_t sub_1D76F7F34()
{
  return MEMORY[0x1F4183510]();
}

uint64_t sub_1D76F7F44()
{
  return MEMORY[0x1F4183568]();
}

uint64_t sub_1D76F7F54()
{
  return MEMORY[0x1F41835C0]();
}

uint64_t sub_1D76F7F64()
{
  return MEMORY[0x1F41835C8]();
}

uint64_t sub_1D76F7F74()
{
  return MEMORY[0x1F4183738]();
}

uint64_t sub_1D76F7F84()
{
  return MEMORY[0x1F4183740]();
}

uint64_t sub_1D76F7F94()
{
  return MEMORY[0x1F4183838]();
}

uint64_t sub_1D76F7FA4()
{
  return MEMORY[0x1F40E6068]();
}

uint64_t sub_1D76F7FB4()
{
  return MEMORY[0x1F40E6078]();
}

uint64_t sub_1D76F7FC4()
{
  return MEMORY[0x1F40E6190]();
}

uint64_t sub_1D76F7FD4()
{
  return MEMORY[0x1F40E61B8]();
}

uint64_t sub_1D76F7FE4()
{
  return MEMORY[0x1F40E61C8]();
}

uint64_t sub_1D76F7FF4()
{
  return MEMORY[0x1F40E61D8]();
}

uint64_t sub_1D76F8004()
{
  return MEMORY[0x1F40E6238]();
}

uint64_t sub_1D76F8014()
{
  return MEMORY[0x1F40E6268]();
}

uint64_t sub_1D76F8024()
{
  return MEMORY[0x1F40E6290]();
}

uint64_t sub_1D76F8034()
{
  return MEMORY[0x1F40E62A0]();
}

uint64_t sub_1D76F8044()
{
  return MEMORY[0x1F4183880]();
}

uint64_t sub_1D76F8054()
{
  return MEMORY[0x1F41838B8]();
}

uint64_t sub_1D76F8064()
{
  return MEMORY[0x1F4183900]();
}

uint64_t sub_1D76F8074()
{
  return MEMORY[0x1F4183950]();
}

uint64_t sub_1D76F8084()
{
  return MEMORY[0x1F4183958]();
}

uint64_t sub_1D76F8094()
{
  return MEMORY[0x1F41839B0]();
}

uint64_t sub_1D76F80A4()
{
  return MEMORY[0x1F4183A38]();
}

uint64_t sub_1D76F80B4()
{
  return MEMORY[0x1F4183A60]();
}

uint64_t sub_1D76F80C4()
{
  return MEMORY[0x1F4183A80]();
}

uint64_t sub_1D76F80D4()
{
  return MEMORY[0x1F4183A88]();
}

uint64_t sub_1D76F80E4()
{
  return MEMORY[0x1F4183AA0]();
}

uint64_t sub_1D76F8104()
{
  return MEMORY[0x1F4183AB0]();
}

uint64_t sub_1D76F8114()
{
  return MEMORY[0x1F4183B10]();
}

uint64_t sub_1D76F8124()
{
  return MEMORY[0x1F4183B90]();
}

uint64_t sub_1D76F8134()
{
  return MEMORY[0x1F4183BA0]();
}

uint64_t sub_1D76F8144()
{
  return MEMORY[0x1F4183BE8]();
}

uint64_t sub_1D76F8154()
{
  return MEMORY[0x1F4183CE0]();
}

uint64_t sub_1D76F8164()
{
  return MEMORY[0x1F4183D98]();
}

uint64_t sub_1D76F81A4()
{
  return MEMORY[0x1F4183E10]();
}

uint64_t sub_1D76F81B4()
{
  return MEMORY[0x1F4183E80]();
}

uint64_t sub_1D76F81C4()
{
  return MEMORY[0x1F40E6370]();
}

uint64_t sub_1D76F81D4()
{
  return MEMORY[0x1F4183E98]();
}

uint64_t sub_1D76F81E4()
{
  return MEMORY[0x1F4183EB8]();
}

uint64_t sub_1D76F81F4()
{
  return MEMORY[0x1F4183EC8]();
}

uint64_t sub_1D76F8204()
{
  return MEMORY[0x1F4183EF0]();
}

uint64_t sub_1D76F8214()
{
  return MEMORY[0x1F4183F08]();
}

uint64_t sub_1D76F8224()
{
  return MEMORY[0x1F4183F38]();
}

uint64_t sub_1D76F8234()
{
  return MEMORY[0x1F4183F60]();
}

uint64_t sub_1D76F8244()
{
  return MEMORY[0x1F4183FA8]();
}

uint64_t sub_1D76F8254()
{
  return MEMORY[0x1F4184090]();
}

uint64_t sub_1D76F8264()
{
  return MEMORY[0x1F4184280]();
}

uint64_t sub_1D76F8274()
{
  return MEMORY[0x1F40E6528]();
}

uint64_t sub_1D76F8284()
{
  return MEMORY[0x1F40E6548]();
}

uint64_t sub_1D76F8294()
{
  return MEMORY[0x1F41886C0]();
}

uint64_t sub_1D76F82A4()
{
  return MEMORY[0x1F41886D0]();
}

uint64_t sub_1D76F82B4()
{
  return MEMORY[0x1F41886E0]();
}

uint64_t sub_1D76F82C4()
{
  return MEMORY[0x1F41886E8]();
}

uint64_t sub_1D76F82D4()
{
  return MEMORY[0x1F4188700]();
}

uint64_t sub_1D76F82E4()
{
  return MEMORY[0x1F40E66C8]();
}

uint64_t sub_1D76F82F4()
{
  return MEMORY[0x1F40E66D8]();
}

uint64_t sub_1D76F8304()
{
  return MEMORY[0x1F4186FC0]();
}

uint64_t sub_1D76F8314()
{
  return MEMORY[0x1F4186FD8]();
}

uint64_t sub_1D76F8324()
{
  return MEMORY[0x1F41870A0]();
}

uint64_t sub_1D76F8334()
{
  return MEMORY[0x1F41870B8]();
}

uint64_t sub_1D76F8344()
{
  return MEMORY[0x1F41870D8]();
}

uint64_t sub_1D76F8354()
{
  return MEMORY[0x1F41870E0]();
}

uint64_t sub_1D76F8364()
{
  return MEMORY[0x1F4187100]();
}

uint64_t sub_1D76F8374()
{
  return MEMORY[0x1F40E6840]();
}

uint64_t sub_1D76F8384()
{
  return MEMORY[0x1F40E6910]();
}

uint64_t sub_1D76F8394()
{
  return MEMORY[0x1F4188728]();
}

uint64_t sub_1D76F83A4()
{
  return MEMORY[0x1F4184640]();
}

uint64_t sub_1D76F83B4()
{
  return MEMORY[0x1F41847C0]();
}

uint64_t sub_1D76F83C4()
{
  return MEMORY[0x1F4184820]();
}

uint64_t sub_1D76F83D4()
{
  return MEMORY[0x1F40E6D38]();
}

uint64_t sub_1D76F83E4()
{
  return MEMORY[0x1F41848C0]();
}

uint64_t sub_1D76F83F4()
{
  return MEMORY[0x1F4184930]();
}

uint64_t sub_1D76F8404()
{
  return MEMORY[0x1F4184938]();
}

uint64_t sub_1D76F8414()
{
  return MEMORY[0x1F4184940]();
}

uint64_t sub_1D76F8424()
{
  return MEMORY[0x1F4184950]();
}

uint64_t sub_1D76F8434()
{
  return MEMORY[0x1F4184B18]();
}

uint64_t sub_1D76F8444()
{
  return MEMORY[0x1F4184B20]();
}

uint64_t sub_1D76F8454()
{
  return MEMORY[0x1F4184CC0]();
}

uint64_t sub_1D76F8464()
{
  return MEMORY[0x1F4184CE8]();
}

uint64_t sub_1D76F8474()
{
  return MEMORY[0x1F4184CF0]();
}

uint64_t sub_1D76F8484()
{
  return MEMORY[0x1F4184D70]();
}

uint64_t sub_1D76F8494()
{
  return MEMORY[0x1F4184D80]();
}

uint64_t sub_1D76F84A4()
{
  return MEMORY[0x1F4184D88]();
}

uint64_t sub_1D76F84B4()
{
  return MEMORY[0x1F4184DB0]();
}

uint64_t sub_1D76F84C4()
{
  return MEMORY[0x1F4184DB8]();
}

uint64_t sub_1D76F84D4()
{
  return MEMORY[0x1F4184DC0]();
}

uint64_t sub_1D76F84E4()
{
  return MEMORY[0x1F4184DD0]();
}

uint64_t sub_1D76F84F4()
{
  return MEMORY[0x1F4184DE8]();
}

uint64_t sub_1D76F8504()
{
  return MEMORY[0x1F4184DF0]();
}

uint64_t sub_1D76F8514()
{
  return MEMORY[0x1F4184DF8]();
}

uint64_t sub_1D76F8524()
{
  return MEMORY[0x1F4184E18]();
}

uint64_t sub_1D76F8534()
{
  return MEMORY[0x1F4184E68]();
}

uint64_t sub_1D76F8544()
{
  return MEMORY[0x1F4184EC8]();
}

uint64_t sub_1D76F8554()
{
  return MEMORY[0x1F4184ED8]();
}

uint64_t sub_1D76F8564()
{
  return MEMORY[0x1F4184F28]();
}

uint64_t sub_1D76F8574()
{
  return MEMORY[0x1F4184F30]();
}

uint64_t sub_1D76F8584()
{
  return MEMORY[0x1F4185050]();
}

uint64_t sub_1D76F8594()
{
  return MEMORY[0x1F41850C0]();
}

uint64_t sub_1D76F85A4()
{
  return MEMORY[0x1F4185298]();
}

uint64_t sub_1D76F85B4()
{
  return MEMORY[0x1F41852A0]();
}

uint64_t sub_1D76F85C4()
{
  return MEMORY[0x1F4185350]();
}

uint64_t sub_1D76F85D4()
{
  return MEMORY[0x1F4185358]();
}

uint64_t sub_1D76F85E4()
{
  return MEMORY[0x1F4185368]();
}

uint64_t sub_1D76F85F4()
{
  return MEMORY[0x1F4185370]();
}

uint64_t sub_1D76F8604()
{
  return MEMORY[0x1F4185380]();
}

uint64_t sub_1D76F8614()
{
  return MEMORY[0x1F4185398]();
}

uint64_t sub_1D76F8634()
{
  return MEMORY[0x1F41854C8]();
}

uint64_t sub_1D76F8644()
{
  return MEMORY[0x1F4185528]();
}

uint64_t sub_1D76F8654()
{
  return MEMORY[0x1F4185560]();
}

uint64_t sub_1D76F8664()
{
  return MEMORY[0x1F4185568]();
}

uint64_t sub_1D76F8674()
{
  return MEMORY[0x1F4185570]();
}

uint64_t sub_1D76F8684()
{
  return MEMORY[0x1F4185578]();
}

uint64_t sub_1D76F8694()
{
  return MEMORY[0x1F4185588]();
}

uint64_t sub_1D76F86A4()
{
  return MEMORY[0x1F4185598]();
}

uint64_t sub_1D76F86B4()
{
  return MEMORY[0x1F41855B8]();
}

uint64_t sub_1D76F86C4()
{
  return MEMORY[0x1F41855D8]();
}

uint64_t sub_1D76F86D4()
{
  return MEMORY[0x1F41855E0]();
}

uint64_t sub_1D76F86E4()
{
  return MEMORY[0x1F41855F0]();
}

uint64_t sub_1D76F86F4()
{
  return MEMORY[0x1F41855F8]();
}

uint64_t sub_1D76F8704()
{
  return MEMORY[0x1F4185688]();
}

uint64_t sub_1D76F8714()
{
  return MEMORY[0x1F4185690]();
}

uint64_t sub_1D76F8724()
{
  return MEMORY[0x1F4185698]();
}

uint64_t sub_1D76F8734()
{
  return MEMORY[0x1F41856A0]();
}

uint64_t sub_1D76F8744()
{
  return MEMORY[0x1F41856B0]();
}

uint64_t sub_1D76F8754()
{
  return MEMORY[0x1F41856C0]();
}

uint64_t sub_1D76F8764()
{
  return MEMORY[0x1F41856E0]();
}

uint64_t sub_1D76F8774()
{
  return MEMORY[0x1F4185700]();
}

uint64_t sub_1D76F8784()
{
  return MEMORY[0x1F4185710]();
}

uint64_t sub_1D76F8794()
{
  return MEMORY[0x1F4185718]();
}

uint64_t sub_1D76F87A4()
{
  return MEMORY[0x1F4185758]();
}

uint64_t sub_1D76F87B4()
{
  return MEMORY[0x1F4185790]();
}

uint64_t sub_1D76F87C4()
{
  return MEMORY[0x1F4185798]();
}

uint64_t sub_1D76F87D4()
{
  return MEMORY[0x1F4185828]();
}

uint64_t sub_1D76F87E4()
{
  return MEMORY[0x1F4185830]();
}

uint64_t sub_1D76F87F4()
{
  return MEMORY[0x1F4185838]();
}

uint64_t sub_1D76F8804()
{
  return MEMORY[0x1F4185840]();
}

uint64_t sub_1D76F8814()
{
  return MEMORY[0x1F4185848]();
}

uint64_t sub_1D76F8824()
{
  return MEMORY[0x1F4185850]();
}

uint64_t sub_1D76F8834()
{
  return MEMORY[0x1F4185858]();
}

uint64_t sub_1D76F8844()
{
  return MEMORY[0x1F4185860]();
}

uint64_t sub_1D76F8854()
{
  return MEMORY[0x1F4185868]();
}

uint64_t sub_1D76F8864()
{
  return MEMORY[0x1F4185870]();
}

uint64_t sub_1D76F8874()
{
  return MEMORY[0x1F4185908]();
}

uint64_t sub_1D76F8884()
{
  return MEMORY[0x1F4185910]();
}

uint64_t sub_1D76F8894()
{
  return MEMORY[0x1F4185918]();
}

uint64_t sub_1D76F88A4()
{
  return MEMORY[0x1F4185920]();
}

uint64_t sub_1D76F88B4()
{
  return MEMORY[0x1F4185928]();
}

uint64_t sub_1D76F88C4()
{
  return MEMORY[0x1F4185930]();
}

uint64_t sub_1D76F88D4()
{
  return MEMORY[0x1F4185938]();
}

uint64_t sub_1D76F88E4()
{
  return MEMORY[0x1F4185940]();
}

uint64_t sub_1D76F88F4()
{
  return MEMORY[0x1F4185948]();
}

uint64_t sub_1D76F8904()
{
  return MEMORY[0x1F4185950]();
}

uint64_t sub_1D76F8914()
{
  return MEMORY[0x1F4185958]();
}

uint64_t sub_1D76F8924()
{
  return MEMORY[0x1F4185960]();
}

uint64_t sub_1D76F8934()
{
  return MEMORY[0x1F4185968]();
}

uint64_t sub_1D76F8944()
{
  return MEMORY[0x1F4185970]();
}

uint64_t sub_1D76F8954()
{
  return MEMORY[0x1F4185978]();
}

uint64_t sub_1D76F8964()
{
  return MEMORY[0x1F4185980]();
}

uint64_t sub_1D76F8974()
{
  return MEMORY[0x1F4185988]();
}

uint64_t sub_1D76F8984()
{
  return MEMORY[0x1F4185990]();
}

uint64_t sub_1D76F8994()
{
  return MEMORY[0x1F4185998]();
}

uint64_t sub_1D76F89A4()
{
  return MEMORY[0x1F41859A0]();
}

uint64_t sub_1D76F89B4()
{
  return MEMORY[0x1F41859A8]();
}

uint64_t sub_1D76F89C4()
{
  return MEMORY[0x1F4185A20]();
}

uint64_t sub_1D76F89D4()
{
  return MEMORY[0x1F4185A30]();
}

uint64_t sub_1D76F89E4()
{
  return MEMORY[0x1F4185A40]();
}

uint64_t sub_1D76F89F4()
{
  return MEMORY[0x1F4185A50]();
}

uint64_t sub_1D76F8A04()
{
  return MEMORY[0x1F4185A88]();
}

uint64_t sub_1D76F8A14()
{
  return MEMORY[0x1F4185AC8]();
}

uint64_t sub_1D76F8A24()
{
  return MEMORY[0x1F4185AD0]();
}

uint64_t sub_1D76F8A34()
{
  return MEMORY[0x1F4185B70]();
}

uint64_t sub_1D76F8A44()
{
  return MEMORY[0x1F4185B78]();
}

uint64_t sub_1D76F8A54()
{
  return MEMORY[0x1F4185B98]();
}

uint64_t sub_1D76F8A74()
{
  return MEMORY[0x1F4185BC0]();
}

uint64_t sub_1D76F8A84()
{
  return MEMORY[0x1F4185BC8]();
}

uint64_t sub_1D76F8A94()
{
  return MEMORY[0x1F4185BD0]();
}

uint64_t sub_1D76F8AA4()
{
  return MEMORY[0x1F4185BD8]();
}

uint64_t sub_1D76F8AB4()
{
  return MEMORY[0x1F4185BE0]();
}

uint64_t sub_1D76F8AC4()
{
  return MEMORY[0x1F4185BE8]();
}

uint64_t sub_1D76F8AD4()
{
  return MEMORY[0x1F4185BF0]();
}

uint64_t sub_1D76F8AE4()
{
  return MEMORY[0x1F4185BF8]();
}

uint64_t sub_1D76F8AF4()
{
  return MEMORY[0x1F4185C00]();
}

uint64_t sub_1D76F8B04()
{
  return MEMORY[0x1F4185C08]();
}

uint64_t sub_1D76F8B14()
{
  return MEMORY[0x1F4185C10]();
}

uint64_t sub_1D76F8B24()
{
  return MEMORY[0x1F4185C18]();
}

uint64_t sub_1D76F8B34()
{
  return MEMORY[0x1F4185C20]();
}

uint64_t sub_1D76F8B44()
{
  return MEMORY[0x1F4185C28]();
}

uint64_t sub_1D76F8B54()
{
  return MEMORY[0x1F4185C30]();
}

uint64_t sub_1D76F8B64()
{
  return MEMORY[0x1F4185C40]();
}

uint64_t sub_1D76F8B74()
{
  return MEMORY[0x1F4185C50]();
}

uint64_t sub_1D76F8B84()
{
  return MEMORY[0x1F4185C78]();
}

uint64_t sub_1D76F8B94()
{
  return MEMORY[0x1F4185C88]();
}

uint64_t sub_1D76F8BA4()
{
  return MEMORY[0x1F4185C90]();
}

uint64_t sub_1D76F8BB4()
{
  return MEMORY[0x1F4185C98]();
}

uint64_t sub_1D76F8BC4()
{
  return MEMORY[0x1F4185CA0]();
}

uint64_t sub_1D76F8BD4()
{
  return MEMORY[0x1F4185CA8]();
}

uint64_t sub_1D76F8BE4()
{
  return MEMORY[0x1F4185CB0]();
}

uint64_t sub_1D76F8BF4()
{
  return MEMORY[0x1F4185CB8]();
}

uint64_t sub_1D76F8C04()
{
  return MEMORY[0x1F4185CC0]();
}

uint64_t sub_1D76F8C14()
{
  return MEMORY[0x1F4185CC8]();
}

uint64_t sub_1D76F8C24()
{
  return MEMORY[0x1F4185CD0]();
}

uint64_t sub_1D76F8C34()
{
  return MEMORY[0x1F4185CD8]();
}

uint64_t sub_1D76F8C44()
{
  return MEMORY[0x1F4185CE0]();
}

uint64_t sub_1D76F8C54()
{
  return MEMORY[0x1F4185CE8]();
}

uint64_t sub_1D76F8C64()
{
  return MEMORY[0x1F4185D58]();
}

uint64_t sub_1D76F8C74()
{
  return MEMORY[0x1F4185D68]();
}

uint64_t sub_1D76F8C84()
{
  return MEMORY[0x1F4185DE0]();
}

uint64_t sub_1D76F8CB4()
{
  return MEMORY[0x1F4185DE8]();
}

uint64_t sub_1D76F8CC4()
{
  return MEMORY[0x1F4185DF0]();
}

uint64_t sub_1D76F8CD4()
{
  return MEMORY[0x1F4185E00]();
}

uint64_t sub_1D76F8CE4()
{
  return MEMORY[0x1F4185E08]();
}

uint64_t sub_1D76F8CF4()
{
  return MEMORY[0x1F4185E10]();
}

uint64_t sub_1D76F8D04()
{
  return MEMORY[0x1F4185E18]();
}

uint64_t sub_1D76F8D24()
{
  return MEMORY[0x1F4185EB0]();
}

uint64_t sub_1D76F8D34()
{
  return MEMORY[0x1F4185EC8]();
}

uint64_t sub_1D76F8D44()
{
  return MEMORY[0x1F4185EE8]();
}

uint64_t sub_1D76F8D54()
{
  return MEMORY[0x1F4185EF8]();
}

uint64_t sub_1D76F8D64()
{
  return MEMORY[0x1F4185F68]();
}

uint64_t sub_1D76F8D74()
{
  return MEMORY[0x1F40E6E90]();
}

uint64_t sub_1D76F8D84()
{
  return MEMORY[0x1F4185FB8]();
}

uint64_t sub_1D76F8D94()
{
  return MEMORY[0x1F4185FC8]();
}

uint64_t sub_1D76F8DA4()
{
  return MEMORY[0x1F4185FF0]();
}

uint64_t sub_1D76F8DB4()
{
  return MEMORY[0x1F4186288]();
}

uint64_t sub_1D76F8DC4()
{
  return MEMORY[0x1F4186290]();
}

uint64_t sub_1D76F8DF4()
{
  return MEMORY[0x1F4186318]();
}

CFFileDescriptorNativeDescriptor CFFileDescriptorGetNativeDescriptor(CFFileDescriptorRef f)
{
  return MEMORY[0x1F40D7AF0](f);
}

Boolean CFFileSecurityGetMode(CFFileSecurityRef fileSec, mode_t *mode)
{
  return MEMORY[0x1F40D7B30](fileSec, mode);
}

CFNumberType CFNumberGetType(CFNumberRef number)
{
  return MEMORY[0x1F40D7E08](number);
}

Boolean CFNumberIsFloatType(CFNumberRef number)
{
  return MEMORY[0x1F40D7E30](number);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1F40C9A78](aBlock);
}

void _Block_release(const void *aBlock)
{
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1F4186388]();
}

au_asid_t audit_token_to_asid(audit_token_t *atoken)
{
  return MEMORY[0x1F417E2B8](atoken);
}

uid_t audit_token_to_auid(audit_token_t *atoken)
{
  return MEMORY[0x1F417E2C8](atoken);
}

gid_t audit_token_to_egid(audit_token_t *atoken)
{
  return MEMORY[0x1F417E2D0](atoken);
}

uid_t audit_token_to_euid(audit_token_t *atoken)
{
  return MEMORY[0x1F417E2D8](atoken);
}

pid_t audit_token_to_pid(audit_token_t *atoken)
{
  return MEMORY[0x1F417E2E8](atoken);
}

int audit_token_to_pidversion(audit_token_t *atoken)
{
  return MEMORY[0x1F417E2F0](atoken);
}

gid_t audit_token_to_rgid(audit_token_t *atoken)
{
  return MEMORY[0x1F417E2F8](atoken);
}

uid_t audit_token_to_ruid(audit_token_t *atoken)
{
  return MEMORY[0x1F417E300](atoken);
}

void bzero(void *a1, size_t a2)
{
}

int close(int a1)
{
  return MEMORY[0x1F40CB3F0](*(void *)&a1);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC8](label, attr);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1F40CBC28](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1F40CBC38](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBC48](dsema, timeout);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

int dup(int a1)
{
  return MEMORY[0x1F40CBDF0](*(void *)&a1);
}

void free(void *a1)
{
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1F40CC2C0](*(void *)&a1, a2);
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return MEMORY[0x1F40CC9B0](*(void *)&task, *(void *)&name);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1F40CCB18](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1F40CCB78](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF8](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD08](__dst, __src, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1F4181640](a1);
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F4181798](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t self
{
  return MEMORY[0x1F41817D0]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1F41818B8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C8](a1);
}

void objc_storeStrong(id *location, id obj)
{
}

int open_dprotected_np(const char *a1, int a2, int a3, int a4, ...)
{
  return MEMORY[0x1F40CD0E8](a1, *(void *)&a2, *(void *)&a3, *(void *)&a4);
}

int openpty(int *a1, int *a2, char *a3, termios *a4, winsize *a5)
{
  return MEMORY[0x1F40CD128](a1, a2, a3, a4, a5);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B0](oslog, type);
}

int pipe(int a1[2])
{
  return MEMORY[0x1F40CD768](a1);
}

int poll(pollfd *a1, nfds_t a2, int a3)
{
  return MEMORY[0x1F40CD778](a1, *(void *)&a2, *(void *)&a3);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x1F40CD9B0](a1, a2, a3, a4);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1F40CDC58](*(void *)&a1, a2, a3);
}

uint64_t remote_control_attach_loopback()
{
  return MEMORY[0x1F4149658]();
}

uint64_t remote_control_connect_loopback()
{
  return MEMORY[0x1F4149660]();
}

uint64_t remote_control_detach_loopback()
{
  return MEMORY[0x1F4149668]();
}

uint64_t remote_device_browser_cancel()
{
  return MEMORY[0x1F4149678]();
}

uint64_t remote_device_copy_property()
{
  return MEMORY[0x1F41496B0]();
}

uint64_t remote_device_copy_service()
{
  return MEMORY[0x1F41496C8]();
}

uint64_t remote_device_copy_unique_of_type()
{
  return MEMORY[0x1F41496D0]();
}

uint64_t remote_device_copy_uuid()
{
  return MEMORY[0x1F41496E0]();
}

uint64_t remote_device_get_name()
{
  return MEMORY[0x1F4149708]();
}

uint64_t remote_device_get_state()
{
  return MEMORY[0x1F4149718]();
}

uint64_t remote_device_set_connected_callback()
{
  return MEMORY[0x1F4149740]();
}

uint64_t remote_device_set_disconnected_callback()
{
  return MEMORY[0x1F4149758]();
}

uint64_t remote_device_start_browsing()
{
  return MEMORY[0x1F4149760]();
}

uint64_t remote_device_start_browsing_matching()
{
  return MEMORY[0x1F4149770]();
}

uint64_t remote_device_type_get_description()
{
  return MEMORY[0x1F4149780]();
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C0](__s);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1F41863D0]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x1F41863E0]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1F41863E8]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x1F41863F0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1F4186410]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1F4186418]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x1F4186420]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x1F4186428]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1F4186430]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1F4186440]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1F4186448]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1F4186450]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1F4186458]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x1F4186460]();
}

uint64_t swift_conformsToProtocol2()
{
  return MEMORY[0x1F4186478]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x1F41881F0]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x1F41864A0]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1F41864B8]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x1F41864C0]();
}

uint64_t swift_dynamicCastMetatype()
{
  return MEMORY[0x1F41864D0]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x1F41864E0]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x1F4186518]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1F4186528]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1F4186530]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x1F4186538]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x1F4186540]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x1F4186568]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x1F4186570]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x1F4186580]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1F41865A8]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x1F41865E0]();
}

uint64_t swift_getMetatypeMetadata()
{
  return MEMORY[0x1F41865F0]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x1F41865F8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1F4186608]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1F4186610]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1F4186628]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x1F4186650]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1F4186668]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1F4186670]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1F4186680]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x1F4186688]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x1F4186690]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1F41866A8]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1F41866B8]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x1F41866C8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x1F41866F8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1F4186700]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x1F4186710]();
}

uint64_t swift_once()
{
  return MEMORY[0x1F4186728]();
}

uint64_t swift_projectBox()
{
  return MEMORY[0x1F4186730]();
}

uint64_t swift_release()
{
  return MEMORY[0x1F4186758]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1F4186760]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1F4186770]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1F4186778]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x1F4186790]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1F4186798]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1F41867A0]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x1F41867B8]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x1F4188250]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x1F4188260]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x1F41867D8]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1F41867E0]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x1F41867E8]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1F41867F0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x1F41867F8]();
}

uint64_t swift_unknownObjectWeakCopyAssign()
{
  return MEMORY[0x1F4186848]();
}

uint64_t swift_unknownObjectWeakCopyInit()
{
  return MEMORY[0x1F4186850]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x1F4186858]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x1F4186860]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x1F4186868]();
}

uint64_t swift_unknownObjectWeakTakeAssign()
{
  return MEMORY[0x1F4186870]();
}

uint64_t swift_unknownObjectWeakTakeInit()
{
  return MEMORY[0x1F4186878]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x1F4186898]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x1F41868B8]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x1F41868C0]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x1F41868C8]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1F41868E0]();
}

uint64_t swift_willThrowTypedImpl()
{
  return MEMORY[0x1F41868E8]();
}

kern_return_t task_info(task_name_t target_task, task_flavor_t flavor, task_info_t task_info_out, mach_msg_type_number_t *task_info_outCnt)
{
  return MEMORY[0x1F40CE468](*(void *)&target_task, *(void *)&flavor, task_info_out, task_info_outCnt);
}

kern_return_t task_name_for_pid(mach_port_name_t target_tport, int pid, mach_port_name_t *tn)
{
  return MEMORY[0x1F40CE488](*(void *)&target_tport, *(void *)&pid, tn);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x1F40CE930](*(void *)&__fd, __buf, __nbyte);
}

void xpc_array_append_value(xpc_object_t xarray, xpc_object_t value)
{
}

BOOL xpc_array_apply(xpc_object_t xarray, xpc_array_applier_t applier)
{
  return MEMORY[0x1F40CEA20](xarray, applier);
}

xpc_object_t xpc_array_create(xpc_object_t *objects, size_t count)
{
  return (xpc_object_t)MEMORY[0x1F40CEA28](objects, count);
}

size_t xpc_array_get_count(xpc_object_t xarray)
{
  return MEMORY[0x1F40CEA60](xarray);
}

xpc_object_t xpc_array_get_value(xpc_object_t xarray, size_t index)
{
  return (xpc_object_t)MEMORY[0x1F40CEAB0](xarray, index);
}

xpc_object_t xpc_BOOL_create(BOOL value)
{
  return (xpc_object_t)MEMORY[0x1F40CEB08](value);
}

BOOL xpc_BOOL_get_value(xpc_object_t xBOOL)
{
  return MEMORY[0x1F40CEB20](xBOOL);
}

void xpc_connection_activate(xpc_connection_t connection)
{
}

void xpc_connection_cancel(xpc_connection_t connection)
{
}

xpc_connection_t xpc_connection_create(const char *name, dispatch_queue_t targetq)
{
  return (xpc_connection_t)MEMORY[0x1F40CEBA0](name, targetq);
}

xpc_connection_t xpc_connection_create_from_endpoint(xpc_endpoint_t endpoint)
{
  return (xpc_connection_t)MEMORY[0x1F40CEBB8](endpoint);
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return (xpc_connection_t)MEMORY[0x1F40CEBC8](name, targetq, flags);
}

const char *__cdecl xpc_connection_get_name(xpc_connection_t connection)
{
  return (const char *)MEMORY[0x1F40CEC10](connection);
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
}

void xpc_connection_send_message_with_reply(xpc_connection_t connection, xpc_object_t message, dispatch_queue_t replyq, xpc_handler_t handler)
{
}

xpc_object_t xpc_connection_send_message_with_reply_sync(xpc_connection_t connection, xpc_object_t message)
{
  return (xpc_object_t)MEMORY[0x1F40CEC60](connection, message);
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
}

void xpc_connection_set_target_queue(xpc_connection_t connection, dispatch_queue_t targetq)
{
}

char *__cdecl xpc_copy_description(xpc_object_t object)
{
  return (char *)MEMORY[0x1F40CED20](object);
}

uint64_t xpc_copy_entitlements_data_for_token()
{
  return MEMORY[0x1F40CED40]();
}

uint64_t xpc_create_from_plist()
{
  return MEMORY[0x1F40CED70]();
}

xpc_object_t xpc_data_create(const void *bytes, size_t length)
{
  return (xpc_object_t)MEMORY[0x1F40CED98](bytes, length);
}

const void *__cdecl xpc_data_get_bytes_ptr(xpc_object_t xdata)
{
  return (const void *)MEMORY[0x1F40CEDB8](xdata);
}

size_t xpc_data_get_length(xpc_object_t xdata)
{
  return MEMORY[0x1F40CEDC8](xdata);
}

xpc_object_t xpc_date_create(int64_t interval)
{
  return (xpc_object_t)MEMORY[0x1F40CEDD0](interval);
}

uint64_t xpc_date_create_absolute()
{
  return MEMORY[0x1F40CEDE0]();
}

int64_t xpc_date_get_value(xpc_object_t xdate)
{
  return MEMORY[0x1F40CEDE8](xdate);
}

uint64_t xpc_date_get_value_absolute()
{
  return MEMORY[0x1F40CEDF8]();
}

BOOL xpc_dictionary_apply(xpc_object_t xdict, xpc_dictionary_applier_t applier)
{
  return MEMORY[0x1F40CEE00](xdict, applier);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1F40CEE28](keys, values, count);
}

xpc_object_t xpc_dictionary_create_reply(xpc_object_t original)
{
  return (xpc_object_t)MEMORY[0x1F40CEE48](original);
}

uint64_t xpc_dictionary_get_audit_token()
{
  return MEMORY[0x1F40CEE70]();
}

size_t xpc_dictionary_get_count(xpc_object_t xdict)
{
  return MEMORY[0x1F40CEE90](xdict);
}

xpc_object_t xpc_dictionary_get_dictionary(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1F40CEEB0](xdict, key);
}

xpc_connection_t xpc_dictionary_get_remote_connection(xpc_object_t xdict)
{
  return (xpc_connection_t)MEMORY[0x1F40CEED8](xdict);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return (const char *)MEMORY[0x1F40CEEE8](xdict, key);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1F40CEF08](xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
}

void xpc_dictionary_set_connection(xpc_object_t xdict, const char *key, xpc_connection_t connection)
{
}

void xpc_dictionary_set_data(xpc_object_t xdict, const char *key, const void *bytes, size_t length)
{
}

void xpc_dictionary_set_date(xpc_object_t xdict, const char *key, int64_t value)
{
}

void xpc_dictionary_set_double(xpc_object_t xdict, const char *key, double value)
{
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
}

void xpc_dictionary_set_uint64(xpc_object_t xdict, const char *key, uint64_t value)
{
}

void xpc_dictionary_set_uuid(xpc_object_t xdict, const char *key, const unsigned __int8 *uuid)
{
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
}

xpc_object_t xpc_double_create(double value)
{
  return (xpc_object_t)MEMORY[0x1F40CEFF0](value);
}

double xpc_double_get_value(xpc_object_t xdouble)
{
  MEMORY[0x1F40CF000](xdouble);
  return result;
}

xpc_endpoint_t xpc_endpoint_create(xpc_connection_t connection)
{
  return (xpc_endpoint_t)MEMORY[0x1F40CF010](connection);
}

BOOL xpc_equal(xpc_object_t object1, xpc_object_t object2)
{
  return MEMORY[0x1F40CF038](object1, object2);
}

uint64_t xpc_event_publisher_create()
{
  return MEMORY[0x1F40CF058]();
}

uint64_t xpc_event_publisher_fire()
{
  return MEMORY[0x1F40CF070]();
}

uint64_t xpc_event_publisher_fire_noboost()
{
  return MEMORY[0x1F40CF078]();
}

uint64_t xpc_event_publisher_fire_with_reply()
{
  return MEMORY[0x1F40CF088]();
}

uint64_t xpc_event_publisher_set_error_handler()
{
  return MEMORY[0x1F40CF098]();
}

uint64_t xpc_event_publisher_set_handler()
{
  return MEMORY[0x1F40CF0A0]();
}

xpc_object_t xpc_fd_create(int fd)
{
  return (xpc_object_t)MEMORY[0x1F40CF0C0](*(void *)&fd);
}

int xpc_fd_dup(xpc_object_t xfd)
{
  return MEMORY[0x1F40CF0C8](xfd);
}

uint64_t xpc_file_transfer_create_with_fd()
{
  return MEMORY[0x1F40CF0E0]();
}

uint64_t xpc_file_transfer_get_size()
{
  return MEMORY[0x1F40CF0F0]();
}

uint64_t xpc_file_transfer_write_to_fd()
{
  return MEMORY[0x1F40CF118]();
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1F40CF140](object);
}

size_t xpc_hash(xpc_object_t object)
{
  return MEMORY[0x1F40CF160](object);
}

xpc_object_t xpc_int64_create(int64_t value)
{
  return (xpc_object_t)MEMORY[0x1F40CF180](value);
}

int64_t xpc_int64_get_value(xpc_object_t xint)
{
  return MEMORY[0x1F40CF198](xint);
}

xpc_object_t xpc_null_create(void)
{
  return (xpc_object_t)MEMORY[0x1F40CF210]();
}

uint64_t xpc_remote_connection_activate()
{
  return MEMORY[0x1F41497F0]();
}

uint64_t xpc_remote_connection_create_connected_pair()
{
  return MEMORY[0x1F4149808]();
}

uint64_t xpc_remote_connection_create_remote_service_listener()
{
  return MEMORY[0x1F4149818]();
}

uint64_t xpc_remote_connection_create_with_remote_service()
{
  return MEMORY[0x1F4149828]();
}

uint64_t xpc_remote_connection_get_version_flags()
{
  return MEMORY[0x1F4149840]();
}

uint64_t xpc_remote_connection_send_message()
{
  return MEMORY[0x1F4149858]();
}

uint64_t xpc_remote_connection_send_message_with_reply()
{
  return MEMORY[0x1F4149870]();
}

uint64_t xpc_remote_connection_send_message_with_reply_sync()
{
  return MEMORY[0x1F4149878]();
}

uint64_t xpc_remote_connection_set_event_handler()
{
  return MEMORY[0x1F4149888]();
}

uint64_t xpc_strerror()
{
  return MEMORY[0x1F40CF280]();
}

xpc_object_t xpc_string_create(const char *string)
{
  return (xpc_object_t)MEMORY[0x1F40CF298](string);
}

size_t xpc_string_get_length(xpc_object_t xstring)
{
  return MEMORY[0x1F40CF2C0](xstring);
}

const char *__cdecl xpc_string_get_string_ptr(xpc_object_t xstring)
{
  return (const char *)MEMORY[0x1F40CF2D0](xstring);
}

const char *__cdecl xpc_type_get_name(xpc_type_t type)
{
  return (const char *)MEMORY[0x1F40CF318](type);
}

xpc_object_t xpc_uint64_create(uint64_t value)
{
  return (xpc_object_t)MEMORY[0x1F40CF328](value);
}

uint64_t xpc_uint64_get_value(xpc_object_t xuint)
{
  return MEMORY[0x1F40CF338](xuint);
}

xpc_object_t xpc_uuid_create(const unsigned __int8 *uuid)
{
  return (xpc_object_t)MEMORY[0x1F40CF358](uuid);
}

const uint8_t *__cdecl xpc_uuid_get_bytes(xpc_object_t xuuid)
{
  return (const uint8_t *)MEMORY[0x1F40CF370](xuuid);
}