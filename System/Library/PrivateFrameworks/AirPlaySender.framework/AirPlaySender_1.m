uint64_t __bufferedAudioEngine_updateDataProcessingTargetQueueInternal_block_invoke()
{
  uint64_t result;

  bufferedAudioEngine_updateDataProcessingTargetQueueInternal_defaultPriorityLimitMs = FigGetCFPreferenceNumberWithDefault();
  result = FigGetCFPreferenceNumberWithDefault();
  bufferedAudioEngine_updateDataProcessingTargetQueueInternal_urgentPriorityLimitMs = result;
  return result;
}

BOOL bufferedAudioEngine_engineBufferedToStartWaterMark()
{
  int v6 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTime v5 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime v4 = v5;
  bufferedAudioEngine_getCurrentRemoteMediaTimeInternal(&v6, &v5);
  if (v6)
  {
    APSLogErrorAt();
    return 1;
  }
  else
  {
    CMTime lhs = v5;
    CMTime v2 = *(CMTime *)(DerivedStorage + 156);
    CMTimeAdd(&v4, &lhs, &v2);
    CMTime lhs = *(CMTime *)(DerivedStorage + 676);
    CMTime v2 = v4;
    return CMTimeCompare(&lhs, &v2) > 0;
  }
}

uint64_t __bufferedAudioEngine_updateCriticalBufferingState_block_invoke()
{
  uint64_t result = APSSettingsGetIntWithDefault();
  bufferedAudioEngine_updateCriticalBufferingState_sHoseShouldReportCritical = result;
  return result;
}

__n128 bufferedAudioEngine_getLastDeliveredRemoteMediaTimeForHose@<Q0>(uint64_t a1@<X1>, __n128 *a2@<X8>)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v21 = 0;
  CMTime v20 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  int v19 = 0;
  int v18 = 0;
  uint64_t v17 = 0;
  if (!*(unsigned char *)(a1 + 25)
    || (uint64_t v5 = DerivedStorage, (v6 = *(void *)(DerivedStorage + 560)) == 0)
    || !APMessageRingBufferedGetUsedCount(v6)
    || (*(unsigned char *)(a1 + 44) & 1) == 0)
  {
LABEL_14:
    if (v21) {
      CFRelease(v21);
    }
    goto LABEL_28;
  }
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  v10 = *(unsigned int (**)(uint64_t, void, void, CFTypeRef *))(v9 + 48);
  if (!v10 || v10(v7, *MEMORY[0x1E4F49FE0], *MEMORY[0x1E4F1CF80], &v21))
  {
LABEL_13:
    APSLogErrorAt();
    goto LABEL_14;
  }
  if (v21)
  {
    if (*(unsigned char *)(v5 + 520))
    {
      if (APSAPAPBBufDecodeHeader()) {
        goto LABEL_13;
      }
    }
    else
    {
      if (APSTransportMessageGetBufferedAudioDataTimestamp()
        || APSTransportMessageGetBufferedAudioDataExtendedSequenceNumber())
      {
        goto LABEL_13;
      }
      CMTimeMake(&v20, *(void *)(a1 + 32) + (int)(v19 - *(void *)(a1 + 32)), *(_DWORD *)(a1 + 40));
    }
    APMessageRingBufferedGetFirstValidReadIndex(*(void *)(v5 + 560), (_DWORD *)&v17 + 1);
    if (((HIDWORD(v17) - v18) & 0x800000) == 0 && ((HIDWORD(v17) ^ v18) & 0xFFFFFF) != 0) {
      goto LABEL_14;
    }
    APMessageRingBufferedGetLastValidReadIndexAndTimestamp(*(void *)(v5 + 560), &v17, 0);
    if (((v17 - v18) & 0x800000) != 0 && ((v17 ^ v18) & 0xFFFFFF) != 0) {
      goto LABEL_14;
    }
    int v11 = *(_DWORD *)(a1 + 28);
    if (((v11 - v18) & 0x800000) != 0 && ((v11 ^ v18) & 0xFFFFFF) != 0) {
      goto LABEL_14;
    }
    CMTime time1 = v20;
    CMTime v15 = *(CMTime *)(a1 + 32);
    int32_t v12 = CMTimeCompare(&time1, &v15);
    if (v21) {
      CFRelease(v21);
    }
    if (v12 <= 0)
    {
      v13 = (__n128 *)&v20;
      goto LABEL_29;
    }
  }
LABEL_28:
  v13 = (__n128 *)MEMORY[0x1E4F1F9F8];
LABEL_29:
  __n128 result = *v13;
  *a2 = *v13;
  a2[1].n128_u64[0] = v13[1].n128_u64[0];
  return result;
}

uint64_t bufferedAudioEngine_wakeUpHoses()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  v1 = *(uint64_t **)(result + 584);
  if (v1)
  {
    uint64_t v2 = result;
    do
    {
      *((unsigned char *)v1 + 56) = 0;
      v1[10] = 0;
      if (*(_DWORD *)(v2 + 804) != 1886614642)
      {
        uint64_t result = mach_absolute_time();
        v1[9] = result;
      }
      v1 = (uint64_t *)*v1;
    }
    while (v1);
  }
  return result;
}

uint64_t bufferedAudioEngine_getActiveAudioEngineSet(uint64_t a1, uint64_t a2)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __bufferedAudioEngine_getActiveAudioEngineSet_block_invoke;
  block[3] = &__block_descriptor_tmp_236;
  block[4] = a1;
  if (bufferedAudioEngine_getActiveAudioEngineSet_sSetOnce != -1) {
    dispatch_once(&bufferedAudioEngine_getActiveAudioEngineSet_sSetOnce, block);
  }
  v3 = &bufferedAudioEngine_getActiveAudioEngineSet_sSetSidePlay;
  if (a2 != 1) {
    v3 = &bufferedAudioEngine_getActiveAudioEngineSet_sSetMedia;
  }
  return *(void *)v3;
}

uint64_t __bufferedAudioEngine_getActiveAudioEngineSet_block_invoke(uint64_t a1)
{
  if (APSThreadSafeSetCreate())
  {
    if (gLogCategory_APAudioEngineBuffered <= 90
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (!*(void *)(a1 + 32)) {
        goto LABEL_15;
      }
LABEL_5:
      CMBaseObjectGetDerivedStorage();
LABEL_15:
      LogPrintF();
    }
  }
  else if (gLogCategory_APAudioEngineBuffered <= 50 {
         && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  }
  {
    if (!*(void *)(a1 + 32)) {
      goto LABEL_15;
    }
    goto LABEL_5;
  }
  uint64_t result = APSThreadSafeSetCreate();
  if (result)
  {
    if (gLogCategory_APAudioEngineBuffered <= 90)
    {
      if (gLogCategory_APAudioEngineBuffered != -1 || (uint64_t result = _LogCategory_Initialize(), result))
      {
        if (!*(void *)(a1 + 32)) {
          return LogPrintF();
        }
LABEL_20:
        CMBaseObjectGetDerivedStorage();
        return LogPrintF();
      }
    }
  }
  else if (gLogCategory_APAudioEngineBuffered <= 50)
  {
    if (gLogCategory_APAudioEngineBuffered != -1 || (uint64_t result = _LogCategory_Initialize(), result))
    {
      if (!*(void *)(a1 + 32)) {
        return LogPrintF();
      }
      goto LABEL_20;
    }
  }
  return result;
}

void bufferedAudioEngine_callSetRateAndAnchorTimeClientCompletionCallbackInternal(uint64_t *a1)
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*a1) {
      CMBaseObjectGetDerivedStorage();
    }
    CMTime time = *(CMTime *)((unsigned char *)a1 + 1);
    CMTimeGetSeconds(&time);
    LogPrintF();
  }
  uint64_t v2 = (void (*)(uint64_t, uint64_t, CMTime *, long long *, uint64_t, uint64_t, double))a1[10];
  if (v2)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = *((unsigned int *)a1 + 2);
    double v5 = *((double *)a1 + 2);
    uint64_t v6 = a1[11];
    CMTime time = *(CMTime *)((unsigned char *)a1 + 1);
    long long v9 = *((_OWORD *)a1 + 3);
    uint64_t v7 = a1[9];
    uint64_t v10 = a1[8];
    v2(v3, v4, &time, &v9, v7, v6, v5);
  }
  uint64_t v8 = (const void *)a1[9];
  if (v8) {
    CFRelease(v8);
  }
  if (*a1) {
    CFRelease((CFTypeRef)*a1);
  }
}

void bufferedAudioEngine_audioFormatDurationDictToArrayForRTC(const void *a1, const __CFDictionary *a2, __CFArray *a3)
{
  CMTime v9 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    uint64_t v7 = Mutable;
    CMTimeMakeFromDictionary(&v9, a2);
    CFDictionarySetValue(v7, @"audioFormat", a1);
    CMTime v8 = v9;
    CMTimeGetSeconds(&v8);
    CFDictionarySetInt64();
    CFArrayAppendValue(a3, v7);
    CFRelease(v7);
  }
  else
  {
    APSLogErrorAt();
  }
}

uint64_t bufferedAudioEngine_getCryptorIDForCryptor(uint64_t a1)
{
  uint64_t v1 = a1;
  CFTypeRef cf = 0;
  if (bufferedAudioEngine_getCryptorIDForCryptor_sRandomBytesOnce == -1)
  {
    if (a1)
    {
LABEL_3:
      uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v2) {
        uint64_t v3 = v2;
      }
      else {
        uint64_t v3 = 0;
      }
      uint64_t v4 = *(unsigned int (**)(uint64_t, void, void, CFTypeRef *))(v3 + 48);
      if (!v4
        || v4(v1, *MEMORY[0x1E4F1FE10], *MEMORY[0x1E4F1CF80], &cf)
        || CFStringGetOrCopyCStringUTF8())
      {
        APSLogErrorAt();
        uint64_t v1 = 0;
      }
      else
      {
        uint64_t v1 = SipHash();
      }
    }
  }
  else
  {
    dispatch_once(&bufferedAudioEngine_getCryptorIDForCryptor_sRandomBytesOnce, &__block_literal_global_344);
    if (v1) {
      goto LABEL_3;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return v1;
}

uint64_t bufferedAudioEngine_handleCryptorKeyUpdated(uint64_t a1, const void *a2, uint64_t a3, const void *a4)
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a2) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  uint64_t v6 = malloc_type_calloc(1uLL, 0x10uLL, 0x60040FAFB2B2FuLL);
  if (v6)
  {
    uint64_t v7 = v6;
    if (a2) {
      CFTypeRef v8 = CFRetain(a2);
    }
    else {
      CFTypeRef v8 = 0;
    }
    *uint64_t v7 = v8;
    if (a4) {
      CFTypeRef v9 = CFRetain(a4);
    }
    else {
      CFTypeRef v9 = 0;
    }
    v7[1] = v9;
    return APSPriorityDispatcherAsyncF();
  }
  else
  {
    return APSLogErrorAt();
  }
}

uint64_t __bufferedAudioEngine_getCryptorIDForCryptor_block_invoke()
{
  return RandomBytes();
}

uint64_t FigCPECryptorCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10) {
    return 4294954514;
  }
  return v10(a1, a2, a3, a4);
}

void bufferedAudioEngine_handleCryptorKeyUpdatedInternal(void *a1)
{
  if (!*(void *)a1) {
    goto LABEL_14;
  }
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    uint64_t v3 = DerivedStorage;
    if (!APSSettingsIsFeatureEnabled())
    {
      if (!bufferedAudioEngine_setCryptorForAllHoses(*(const void **)a1, *((void *)a1 + 1))) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
    uint64_t v4 = *((void *)v3 + 210);
    uint64_t v5 = *((void *)a1 + 1);
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t))(v7 + 64);
    if (!v8 || v8(v4, v5)) {
LABEL_11:
    }
      APSLogErrorAt();
  }
LABEL_12:
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
LABEL_14:
  uint64_t v9 = (const void *)*((void *)a1 + 1);
  if (v9) {
    CFRelease(v9);
  }
  free(a1);
}

uint64_t APAudioHoseManagerBufferedSetCryptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 64);
  if (!v6) {
    return 4294954514;
  }
  return v6(a1, a2);
}

uint64_t bufferedAudioEngine_setCryptorForAllHoses(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v5 = (void *)(DerivedStorage + 584);
    while (1)
    {
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        return 0;
      }
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (a1) {
          CMBaseObjectGetDerivedStorage();
        }
        bufferedAudioEngine_getCryptorIDForCryptor(a2);
        LogPrintF();
      }
      if (a1) {
        CFRetain(a1);
      }
      uint64_t v6 = (const void *)v5[2];
      uint64_t CryptorIDForCryptor = bufferedAudioEngine_getCryptorIDForCryptor(a2);
      APSEndpointStreamAudioHoseProtocolGetProtocolID();
      uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
      if (!ProtocolVTable || (uint64_t v9 = *(void *)(ProtocolVTable + 16)) == 0)
      {
        uint64_t v12 = 4294954508;
        goto LABEL_20;
      }
      uint64_t v10 = *(uint64_t (**)(const void *, uint64_t, uint64_t, uint64_t (*)(const void *, uint64_t, int, const void *), const void *))(v9 + 96);
      if (!v10) {
        break;
      }
      uint64_t v11 = v10(v6, CryptorIDForCryptor, a2, bufferedAudioEngine_hoseSetCryptorCallbackCompletionHandler, a1);
      if (v11)
      {
        uint64_t v12 = v11;
        goto LABEL_20;
      }
    }
    uint64_t v12 = 4294954514;
    bufferedAudioEngine_hoseSetCryptorCallbackCompletionHandler(v6, CryptorIDForCryptor, -12782, a1);
LABEL_20:
    if (gLogCategory_APAudioEngineBuffered <= 90
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1) {
        CMBaseObjectGetDerivedStorage();
      }
      LogPrintF();
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294951815;
  }
  return v12;
}

uint64_t bufferedAudioEngine_hoseSetCryptorCallbackCompletionHandler(const void *a1, uint64_t a2, int a3, const void *a4)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v8 = malloc_type_calloc(1uLL, 0x20uLL, 0x10200401C4E69EBuLL);
  if (!v8)
  {
    APSLogErrorAt();
    uint64_t v12 = 4294951816;
    if (!a4) {
      return v12;
    }
    goto LABEL_9;
  }
  uint64_t v9 = v8;
  if (a4) {
    CFTypeRef v10 = CFRetain(a4);
  }
  else {
    CFTypeRef v10 = 0;
  }
  *uint64_t v9 = v10;
  if (a1) {
    CFTypeRef v11 = CFRetain(a1);
  }
  else {
    CFTypeRef v11 = 0;
  }
  v9[1] = v11;
  v9[2] = a2;
  *((_DWORD *)v9 + 6) = a3;
  APSPriorityDispatcherAsyncF();
  uint64_t v12 = 0;
  if (a4) {
LABEL_9:
  }
    CFRelease(a4);
  return v12;
}

void bufferedAudioEngine_hoseSetCryptorCallbackCompletionHandlerInternal(uint64_t a1)
{
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage()) {
    goto LABEL_26;
  }
  HoseDecriptorFromHose = bufferedAudioEngine_getHoseDecriptorFromHose();
  if (HoseDecriptorFromHose)
  {
    uint64_t v3 = HoseDecriptorFromHose;
    int v4 = *(_DWORD *)(a1 + 24);
    if (v4)
    {
      if (v4 == 200501)
      {
        if (gLogCategory_APAudioEngineBuffered <= 90
          && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
        {
          if (!*(void *)a1)
          {
LABEL_23:
            LogPrintF();
            goto LABEL_26;
          }
LABEL_8:
          CMBaseObjectGetDerivedStorage();
          goto LABEL_23;
        }
        goto LABEL_26;
      }
      if (gLogCategory_APAudioEngineBuffered > 90
        || gLogCategory_APAudioEngineBuffered == -1 && !_LogCategory_Initialize())
      {
LABEL_25:
        *((unsigned char *)v3 + 204) = 1;
        goto LABEL_26;
      }
      if (!*(void *)a1)
      {
LABEL_24:
        LogPrintF();
        goto LABEL_25;
      }
    }
    else
    {
      if (gLogCategory_APAudioEngineBuffered > 50
        || gLogCategory_APAudioEngineBuffered == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_25;
      }
      if (!*(void *)a1) {
        goto LABEL_24;
      }
    }
    CMBaseObjectGetDerivedStorage();
    goto LABEL_24;
  }
  if (gLogCategory_APAudioEngineBuffered <= 90
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (!*(void *)a1) {
      goto LABEL_23;
    }
    goto LABEL_8;
  }
LABEL_26:
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  uint64_t v5 = *(const void **)(a1 + 8);
  if (v5) {
    CFRelease(v5);
  }
  free((void *)a1);
}

uint64_t bufferedAudioEngine_getMagicCookieIDForMagicCookieData(CFDataRef theData)
{
  if (bufferedAudioEngine_getMagicCookieIDForMagicCookieData_sRandomBytesOnce != -1)
  {
    dispatch_once(&bufferedAudioEngine_getMagicCookieIDForMagicCookieData_sRandomBytesOnce, &__block_literal_global_355);
    if (theData) {
      goto LABEL_3;
    }
    return 0;
  }
  if (!theData) {
    return 0;
  }
LABEL_3:
  CFDataGetBytePtr(theData);
  CFDataGetLength(theData);
  return SipHash();
}

uint64_t __bufferedAudioEngine_getMagicCookieIDForMagicCookieData_block_invoke()
{
  return RandomBytes();
}

uint64_t bufferedAudioEngine_copyPropertyDispatch(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (const void *)a1[1];
  CFAllocatorRef v3 = (const __CFAllocator *)a1[2];
  int v4 = (void *)a1[3];
  unsigned int v18 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTimeValue v17 = 0;
  if (!v2 || !v4)
  {
    APSLogErrorAt();
    return 4294951815;
  }
  uint64_t v6 = DerivedStorage;
  if (CFEqual(v2, (CFTypeRef)*MEMORY[0x1E4F32938]))
  {
    if (gLogCategory_APAudioEngineBuffered <= 40
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (v1) {
        CMBaseObjectGetDerivedStorage();
      }
      LogPrintF();
    }
    uint64_t v8 = *(const void **)(v6 + 536);
    if (!v8) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (!CFEqual(v2, (CFTypeRef)*MEMORY[0x1E4F32948]))
  {
    if (CFEqual(v2, @"currentRTPTime"))
    {
      CMTime v16 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
      CMTime v15 = v16;
      if (APSAudioFormatDescriptionListSupports44kHz()
        && APSAudioFormatDescriptionListSupports48kHz())
      {
        if (gLogCategory_APAudioEngineBuffered <= 90
          && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
        {
          if (v1) {
            CMBaseObjectGetDerivedStorage();
          }
          LogPrintF();
        }
      }
      else
      {
        bufferedAudioEngine_getCurrentRemoteMediaTimeInternal((int *)&v18, &v16);
        if (v18)
        {
          APSLogErrorAt();
          return v18;
        }
        if (APSAudioFormatDescriptionListSupports44kHz()) {
          int32_t v11 = 44100;
        }
        else {
          int32_t v11 = 48000;
        }
        CMTime time = v16;
        CMTimeConvertScale(&v15, &time, v11, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
      }
      CMTime time = v15;
      CFDictionaryRef v12 = CMTimeCopyAsDictionary(&time, v3);
      if (v12)
      {
        *int v4 = v12;
      }
      else
      {
        APSLogErrorAt();
        return -15480;
      }
      return v18;
    }
    if (CFEqual(v2, (CFTypeRef)*MEMORY[0x1E4F32960]))
    {
      if (*(void *)(v6 + 920))
      {
        uint64_t FigEndpointStreamAudioFormatDescriptionArray = APSAudioFormatDescriptionListCreateFigEndpointStreamAudioFormatDescriptionArray();
        if (!FigEndpointStreamAudioFormatDescriptionArray)
        {
          CMTimeValue value = v17;
LABEL_38:
          *int v4 = value;
          return FigEndpointStreamAudioFormatDescriptionArray;
        }
        goto LABEL_57;
      }
    }
    else
    {
      if (CFEqual(v2, (CFTypeRef)*MEMORY[0x1E4F32958]))
      {
        CMTime v16 = *(CMTime *)(v6 + 156);
        uint64_t v8 = CMTimeCopyAsDictionary(&v16, v3);
        if (!v8)
        {
          APSLogErrorAt();
          return 4294951816;
        }
        goto LABEL_24;
      }
      if (!CFEqual(v2, (CFTypeRef)*MEMORY[0x1E4F32968]))
      {
        if (!CFEqual(v2, (CFTypeRef)*MEMORY[0x1E4F32940])) {
          return 4294954509;
        }
        uint64_t v8 = *(const void **)(v6 + 1120);
        if (!v8) {
          goto LABEL_24;
        }
        goto LABEL_23;
      }
      v16.CMTimeValue value = 0;
      if (*(void *)(v6 + 928))
      {
        uint64_t FigEndpointStreamAudioFormatDescriptionArray = APSAudioFormatDescriptionCopyFigEndpointStreamAudioFormatDescription();
        if (!FigEndpointStreamAudioFormatDescriptionArray)
        {
          CMTimeValue value = v16.value;
          goto LABEL_38;
        }
LABEL_57:
        APSLogErrorAt();
        return FigEndpointStreamAudioFormatDescriptionArray;
      }
    }
    APSLogErrorAt();
    return 4294951814;
  }
  uint64_t v7 = (const void **)MEMORY[0x1E4F1CFD0];
  if (!*(unsigned char *)(v6 + 464)) {
    uint64_t v7 = (const void **)MEMORY[0x1E4F1CFC8];
  }
  uint64_t v8 = *v7;
LABEL_23:
  uint64_t v8 = CFRetain(v8);
LABEL_24:
  uint64_t FigEndpointStreamAudioFormatDescriptionArray = 0;
  *int v4 = v8;
  return FigEndpointStreamAudioFormatDescriptionArray;
}

uint64_t bufferedAudioEngine_setPropertyDispatch(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (const void *)a1[1];
  CFAllocatorRef v3 = (__CFString *)a1[2];
  values = v3;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(v2, (CFTypeRef)*MEMORY[0x1E4F32928]))
  {
    if (!v3 || (CFTypeID v5 = CFGetTypeID(v3), v5 == CFNumberGetTypeID()))
    {
      if (gLogCategory_APAudioEngineBuffered <= 40
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (v1) {
          CMBaseObjectGetDerivedStorage();
        }
        LogPrintF();
      }
      uint64_t v8 = *(const void **)(DerivedStorage + 376);
      *(void *)(DerivedStorage + 376) = v3;
      if (!v3) {
        goto LABEL_27;
      }
      goto LABEL_26;
    }
    goto LABEL_78;
  }
  if (CFEqual(v2, (CFTypeRef)*MEMORY[0x1E4F32920]))
  {
    if (!v3 || (CFTypeID v6 = CFGetTypeID(v3), v6 == CFDataGetTypeID()))
    {
      if (gLogCategory_APAudioEngineBuffered <= 40
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (v1) {
          CMBaseObjectGetDerivedStorage();
        }
        LogPrintF();
      }
      uint64_t v8 = *(const void **)(DerivedStorage + 384);
      *(void *)(DerivedStorage + 384) = v3;
      if (!v3) {
        goto LABEL_27;
      }
LABEL_26:
      CFRetain(v3);
LABEL_27:
      if (v8) {
        CFRelease(v8);
      }
      return 0;
    }
LABEL_78:
    APSLogErrorAt();
    return 4294951815;
  }
  if (!CFEqual(v2, (CFTypeRef)*MEMORY[0x1E4F32950]))
  {
    if (!CFEqual(v2, (CFTypeRef)*MEMORY[0x1E4F32930])) {
      return 4294954509;
    }
    if (!v3 || (CFTypeID v11 = CFGetTypeID(v3), v11 == CFNumberGetTypeID()))
    {
      if (gLogCategory_APAudioEngineBuffered <= 40
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (v1) {
          CMBaseObjectGetDerivedStorage();
        }
        LogPrintF();
      }
      CFNumberGetValue((CFNumberRef)v3, kCFNumberSInt32Type, (void *)(DerivedStorage + 524));
      return 0;
    }
    goto LABEL_78;
  }
  if (!v3) {
    goto LABEL_78;
  }
  CFTypeID v7 = CFGetTypeID(v3);
  if (v7 != CFStringGetTypeID()) {
    goto LABEL_78;
  }
  if (gLogCategory_APAudioEngineBuffered <= 40
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (v1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  *(unsigned char *)(DerivedStorage + 392) = 0;
  CFStringGetCString(v3, (char *)(DerivedStorage + 392), 16, 0x600u);
  if (*(void *)(DerivedStorage + 536) && APSGetFBOPropertyInt64()) {
    __strlcat_chk();
  }
  __strlcat_chk();
  int IsFeatureEnabled = APSSettingsIsFeatureEnabled();
  v13 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (IsFeatureEnabled)
  {
    CFStringRef v14 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const char *)(DerivedStorage + 392), 0x600u);
    uint64_t CMBaseObject = APAudioHoseManagerBufferedGetCMBaseObject(*(void *)(DerivedStorage + 1680));
    uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v16) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = 0;
    }
    unsigned int v18 = *(void (**)(uint64_t, __CFString *, CFStringRef))(v17 + 56);
    if (v18) {
      v18(CMBaseObject, @"LoggingID", v14);
    }
  }
  else
  {
    CFStringRef v14 = 0;
  }
  if (*(void *)(DerivedStorage + 992))
  {
    uint64_t v9 = 0;
    CFDictionaryRef v19 = 0;
  }
  else
  {
    CFDictionaryRef v19 = CFDictionaryCreate(*v13, MEMORY[0x1E4F4A228], (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!v19)
    {
      APSLogErrorAt();
      uint64_t v9 = 4294951816;
      goto LABEL_59;
    }
    APSWirelessCoexManagerCreateWithOptions();
    if (APSSettingsIsFeatureEnabled())
    {
      uint64_t v20 = *(void *)(DerivedStorage + 1680);
      uint64_t v21 = *(void *)(DerivedStorage + 992);
      uint64_t v22 = APAudioHoseManagerBufferedGetCMBaseObject(v20);
      uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v23) {
        uint64_t v24 = v23;
      }
      else {
        uint64_t v24 = 0;
      }
      v25 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v24 + 56);
      if (v25)
      {
        uint64_t v9 = v25(v22, @"CoexManager", v21);
        if (!v9) {
          goto LABEL_59;
        }
      }
      else
      {
        uint64_t v9 = 4294954514;
      }
      APSLogErrorAt();
      goto LABEL_59;
    }
    uint64_t v9 = 0;
  }
LABEL_59:
  if (v14) {
    CFRelease(v14);
  }
  if (v19) {
    CFRelease(v19);
  }
  return v9;
}

__CFString *bufferedAudioEngine_audioHoseProtocolCopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"APAudioEngineBuffered <APSEndpointStreamAudioHoseRegistrarProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t bufferedAudioEngine_audioHoseRegistrarRegisterHose(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t result = APSPriorityDispatcherSyncTask();
  *a4 = &bufferedAudioEngine_audioHoseRegistrarRegisterHose_callbacks;
  return result;
}

uint64_t bufferedAudioEngine_audioHoseRegistrarDeregisterHose()
{
  return APSPriorityDispatcherSyncTask();
}

uint64_t bufferedAudioEngine_CopyAudioDataBBufsForHose(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 && a3)
  {
    APSPriorityDispatcherSyncF();
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294951815;
  }
}

uint64_t bufferedAudioEngine_audioHoseRegistrarRegisterHoseInternal(uint64_t *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t valuePtr = 0;
  CFTypeRef cf = 0;
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  if (bufferedAudioEngine_getHoseDecriptorFromHose())
  {
    APSLogErrorAt();
    goto LABEL_129;
  }
  if (!*(void *)(DerivedStorage + 560))
  {
LABEL_129:
    uint64_t v54 = APSSignalErrorAt();
    goto LABEL_111;
  }
  uint64_t v3 = *a1;
  int v4 = (const void *)a1[1];
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  if (!bufferedAudioEngine_getHoseDecriptorFromHose())
  {
    bufferedAudioEngine_reportAndResetRTCBufferLevelAndUnderrunDataForAllExistingHoses(v3);
    uint64_t v6 = *(void *)(v5 + 584);
    CFTypeID v7 = malloc_type_calloc(1uLL, 0x1E8uLL, 0x106004080B4243AuLL);
    *(void *)(v5 + 584) = v7;
    if (v7)
    {
      if (v4)
      {
        CFTypeRef v8 = CFRetain(v4);
        CFTypeID v7 = *(void **)(v5 + 584);
      }
      else
      {
        CFTypeRef v8 = 0;
      }
      v7[2] = v8;
      __int16 FirstValidReadIndex = APMessageRingBufferedGetFirstValidReadIndex(*(void *)(v5 + 560), &valuePtr);
      uint64_t v10 = *(void *)(v5 + 584);
      *(_WORD *)(v10 + 26) = FirstValidReadIndex;
      *(unsigned char *)(v10 + 56) = 0;
      *(void *)(v10 + 80) = 0;
      uint64_t v11 = mach_absolute_time();
      uint64_t v12 = *(void *)(v5 + 584);
      *(void *)(v12 + 72) = v11;
      *(unsigned char *)(v12 + 57) = 1;
      *(_DWORD *)(v12 + 140) = 0;
      v13 = (long long *)MEMORY[0x1E4F1FA48];
      uint64_t v14 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
      *(void *)(v12 + 104) = v14;
      long long v15 = *v13;
      *(_OWORD *)(v12 + 88) = *v13;
      uint64_t v16 = *(void *)(v5 + 584);
      *(void *)(v16 + 48) = v14;
      long long v69 = v15;
      *(_OWORD *)(v16 + 32) = v15;
      uint64_t v17 = *(void *)(v5 + 584);
      *(_DWORD *)(v17 + 136) = 0;
      *(unsigned char *)(v17 + 204) = 0;
      *(unsigned char *)(v17 + 168) = 0;
      context = 0;
      uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v18) {
        uint64_t v19 = v18;
      }
      else {
        uint64_t v19 = 0;
      }
      uint64_t v20 = *(uint64_t (**)(const void *, void, void, const void **))(v19 + 48);
      if (!v20)
      {
        BOOL v23 = 0;
        goto LABEL_23;
      }
      int v21 = v20(v4, *MEMORY[0x1E4F21368], 0, &context);
      uint64_t v22 = context;
      if (v21)
      {
        BOOL v23 = 0;
        if (!context) {
          goto LABEL_23;
        }
      }
      else
      {
        BOOL v23 = FigCFEqual() != 0;
        uint64_t v22 = context;
        if (!context)
        {
LABEL_23:
          uint64_t v24 = *(void *)(v5 + 584);
          *(unsigned char *)(v24 + 24) = v23;
          *(unsigned char *)(v24 + 256) = 0;
          *(_OWORD *)(v24 + 112) = v69;
          *(void *)(v24 + 128) = v14;
          uint64_t v25 = *(void *)(v5 + 584);
          if (*(unsigned char *)(v25 + 24)) {
            *(unsigned char *)(v5 + 1080) = 1;
          }
          uint64_t v26 = *(void *)(v25 + 16);
          uint64_t v27 = *MEMORY[0x1E4F1CF80];
          uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v28) {
            uint64_t v29 = v28;
          }
          else {
            uint64_t v29 = 0;
          }
          v30 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v29 + 48);
          if (v30) {
            v30(v26, *MEMORY[0x1E4F49FE8], v27, v25 + 248);
          }
          uint64_t v31 = *(void *)(v5 + 584);
          *(void *)uint64_t v31 = v6;
          if (v6) {
            *(void *)(v6 + 8) = v31;
          }
          ++*(_DWORD *)(v5 + 592);
          int v32 = *(_DWORD *)(v5 + 1208);
          *(_DWORD *)(v5 + 1208) = v32 + 1;
          *(_DWORD *)(v31 + 264) = v32;
          *(void *)(v31 + 272) = 0;
          uint64_t v33 = *(void *)(v31 + 16);
          uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v34) {
            uint64_t v35 = v34;
          }
          else {
            uint64_t v35 = 0;
          }
          v36 = *(void (**)(uint64_t, __CFString *, uint64_t, uint64_t))(v35 + 48);
          if (v36) {
            v36(v33, @"Model", v27, v31 + 280);
          }
          uint64_t v37 = *(void *)(v5 + 584);
          uint64_t v38 = *(void *)(v37 + 16);
          uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v39) {
            uint64_t v40 = v39;
          }
          else {
            uint64_t v40 = 0;
          }
          v41 = *(void (**)(uint64_t, __CFString *, uint64_t, uint64_t))(v40 + 48);
          if (v41) {
            v41(v38, @"OSBuildVersion", v27, v37 + 288);
          }
          bufferedAudioEngine_resetAllRTCDataForHose(v3, *(void *)(v5 + 584));
          unsigned int v42 = *(_DWORD *)(v5 + 592);
          if (v42 > *(_DWORD *)(v5 + 1212)) {
            *(_DWORD *)(v5 + 1212) = v42;
          }
          goto LABEL_44;
        }
      }
      CFRelease(v22);
      goto LABEL_23;
    }
  }
  APSLogErrorAt();
  uint64_t v54 = APSSignalErrorAt();
  if (v54) {
    goto LABEL_66;
  }
LABEL_44:
  if (CFDictionaryGetInt64())
  {
    *(unsigned char *)(DerivedStorage + 1160) = 1;
    bufferedAudioEngine_setEchoCancellationIsEnabledToAllHoses(*a1, 1);
  }
  if (*(unsigned char *)(DerivedStorage + 1160))
  {
    uint64_t v43 = a1[1];
    uint64_t v44 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v45 = v44 ? v44 : 0;
    v46 = *(void (**)(uint64_t, void, void))(v45 + 56);
    if (v46) {
      v46(v43, *MEMORY[0x1E4F49FB0], *MEMORY[0x1E4F1CFD0]);
    }
  }
  uint64_t v47 = a1[1];
  uint64_t v48 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v48) {
    uint64_t v49 = v48;
  }
  else {
    uint64_t v49 = 0;
  }
  v50 = *(uint64_t (**)(uint64_t, void, void, CFTypeRef *))(v49 + 48);
  if (!v50)
  {
    uint64_t v54 = 4294954514;
LABEL_66:
    APSLogErrorAt();
    goto LABEL_111;
  }
  uint64_t v51 = v50(v47, *MEMORY[0x1E4F49F90], 0, &cf);
  if (v51)
  {
    uint64_t v54 = v51;
    goto LABEL_66;
  }
  if (cf && (CFTypeID v52 = CFGetTypeID(cf), v52 == CFNumberGetTypeID()))
  {
    CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt32Type, (char *)&valuePtr + 4);
    signed int v53 = *(_DWORD *)(DerivedStorage + 120) * HIDWORD(valuePtr) / 0x64u;
    if (*(_DWORD *)(DerivedStorage + 116) < v53) {
      signed int v53 = *(_DWORD *)(DerivedStorage + 116);
    }
    *(_DWORD *)(*(void *)(DerivedStorage + 584) + 156) = HIDWORD(valuePtr) - v53;
    if (gLogCategory_APAudioEngineBuffered <= 50
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (*a1) {
        CMBaseObjectGetDerivedStorage();
      }
      LogPrintF();
    }
    *(_DWORD *)(*(void *)(DerivedStorage + 584) + 160) = *(_DWORD *)(DerivedStorage + 180)
                                                           * HIDWORD(valuePtr)
                                                           / 0x64u;
    if (gLogCategory_APAudioEngineBuffered <= 50
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (*a1) {
        CMBaseObjectGetDerivedStorage();
      }
      LogPrintF();
    }
    bufferedAudioEngine_updateStartWatermarkTime(*a1);
    int v55 = HIDWORD(valuePtr);
    if (*(_DWORD *)(DerivedStorage + 648) < HIDWORD(valuePtr))
    {
      if (HIDWORD(valuePtr) >= 0x753000) {
        int v55 = 7680000;
      }
      *(_DWORD *)(DerivedStorage + 648) = v55;
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (*a1) {
          CMBaseObjectGetDerivedStorage();
        }
        LogPrintF();
      }
    }
    char v56 = *(unsigned char *)(DerivedStorage + 325);
    if (v56) {
      char v56 = APSIsFBOPropertyAvailable() != 0;
    }
    *(unsigned char *)(*(void *)(DerivedStorage + 584) + 25) = v56;
    if (gLogCategory_APAudioEngineBuffered <= 50)
    {
      if (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize())
      {
        if (*a1) {
          CMBaseObjectGetDerivedStorage();
        }
        LogPrintF();
      }
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (*a1) {
          CMBaseObjectGetDerivedStorage();
        }
        LogPrintF();
      }
    }
    *(_WORD *)(DerivedStorage + 800) = 0;
    bufferedAudioEngine_updateInternalBadgeInfoAndPostNotificationIfNecessary(*a1, *(const void **)(DerivedStorage + 960), 0);
    bufferedAudioEngine_updateMATAtmosPlaybackPreferenceIfNecessary();
    uint64_t v57 = *a1;
    uint64_t v58 = *(void *)(DerivedStorage + 584);
    uint64_t v59 = CMBaseObjectGetDerivedStorage();
    context = (const void *)v57;
    uint64_t v73 = v58;
    if (v58) {
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(v59 + 1136), (CFDictionaryApplierFunction)bufferedAudioEngine_setCryptorForHoseCallback, &context);
    }
    uint64_t v60 = *a1;
    uint64_t v61 = *(void *)(DerivedStorage + 584);
    uint64_t v62 = CMBaseObjectGetDerivedStorage();
    context = (const void *)v60;
    uint64_t v73 = v61;
    if (v61 && *(unsigned char *)(v62 + 520)) {
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(v62 + 976), (CFDictionaryApplierFunction)bufferedAudioEngine_setMagicCookieForHoseCallback, &context);
    }
    if (*(unsigned char *)(*(void *)(DerivedStorage + 584) + 24) || !*(unsigned char *)(DerivedStorage + 520))
    {
      uint64_t v54 = 0;
    }
    else
    {
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (*a1) {
          CMBaseObjectGetDerivedStorage();
        }
        LogPrintF();
      }
      uint64_t v64 = a1[1];
      uint64_t v65 = gSoundCheckEnabled;
      APSEndpointStreamAudioHoseProtocolGetProtocolID();
      uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable && (uint64_t v67 = *(void *)(ProtocolVTable + 16)) != 0)
      {
        v68 = *(uint64_t (**)(uint64_t, uint64_t))(v67 + 112);
        if (v68) {
          uint64_t v54 = v68(v64, v65);
        }
        else {
          uint64_t v54 = 4294954514;
        }
      }
      else
      {
        uint64_t v54 = 4294954508;
      }
    }
    bufferedAudioEngine_wakeUpHosesAndAudioTimer(*a1);
  }
  else
  {
    APSLogErrorAt();
    uint64_t v54 = 4294960540;
  }
LABEL_111:
  if (cf) {
    CFRelease(cf);
  }
  return v54;
}

void bufferedAudioEngine_copyAudioDataBBufDispatchInternal(uint64_t a1)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 464))
  {
    APSLogErrorAt();
    int v15 = -15485;
    goto LABEL_25;
  }
  uint64_t v3 = DerivedStorage;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(int *)(DerivedStorage + 296), MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
    APSLogErrorAt();
    int v15 = -15480;
    goto LABEL_25;
  }
  CFArrayRef v6 = Mutable;
  if (!*(unsigned char *)(v3 + 464))
  {
    APSLogErrorAt();
    int v15 = 0;
    if (gLogCategory_APAudioEngineBuffered <= 50)
    {
      if (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize())
      {
        if (*(void *)a1) {
          CMBaseObjectGetDerivedStorage();
        }
        LogPrintF();
      }
      int v15 = 0;
    }
    goto LABEL_98;
  }
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = CMBaseObjectGetDerivedStorage();
  uint64_t v9 = MEMORY[0x1E4F1F9F8];
  CMTimeValue v37 = *MEMORY[0x1E4F1F9F8];
  CMTimeValue v47 = *MEMORY[0x1E4F1F9F8];
  CMTimeScale v36 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
  CMTimeScale v48 = v36;
  CMTime v38 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  if (*(unsigned char *)v8)
  {
LABEL_22:
    char v13 = 0;
    goto LABEL_23;
  }
  uint64_t v10 = v8;
  if (*(void *)(v8 + 560))
  {
    HoseDecriptorFromHose = (int *)bufferedAudioEngine_getHoseDecriptorFromHose();
    if (!HoseDecriptorFromHose)
    {
      if (gLogCategory_APAudioEngineBuffered <= 60
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (v7) {
          CMBaseObjectGetDerivedStorage();
        }
        LogPrintF();
      }
      goto LABEL_22;
    }
    uint64_t v12 = (uint64_t)HoseDecriptorFromHose;
    if (HoseDecriptorFromHose[43] >= 1)
    {
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (v7) {
          CMBaseObjectGetDerivedStorage();
        }
        LogPrintF();
      }
      *(unsigned char *)(v12 + 57) = 1;
      goto LABEL_22;
    }
    if (*((unsigned char *)HoseDecriptorFromHose + 56))
    {
      bufferedAudioEngine_logForSendRate(v7, (uint64_t)HoseDecriptorFromHose, 0);
      goto LABEL_22;
    }
    CFArrayRef v33 = v6;
    if (gLogCategory_APAudioEngineBuffered > 10) {
      goto LABEL_38;
    }
    if (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize())
    {
      if (v7) {
        CMBaseObjectGetDerivedStorage();
      }
      CMTime time = *(CMTime *)(v12 + 88);
      CMTimeGetSeconds(&time);
      LogPrintF();
      uint64_t v9 = MEMORY[0x1E4F1F9F8];
    }
    if (*(unsigned char *)(v12 + 56))
    {
      CMBlockBufferRef v16 = 0;
    }
    else
    {
LABEL_38:
      CFAllocatorRef structureAllocator = v4;
      CMBlockBufferRef v16 = 0;
      CMTimeFlags v30 = *(_DWORD *)(v9 + 12);
      CMTimeEpoch v35 = *(void *)(v9 + 16);
      uint64_t v17 = (_OWORD *)(v12 + 88);
      int v32 = (_OWORD *)(v12 + 32);
      while (1)
      {
        if (!*(_DWORD *)(v10 + 296) || CFArrayGetCount(v6) >= *(int *)(v10 + 296))
        {
          if ((*(unsigned char *)(v10 + 312) & 1) == 0) {
            break;
          }
          CMTime time = v38;
          CMTime time2 = *(CMTime *)(v10 + 300);
          if ((CMTimeCompare(&time, &time2) & 0x80000000) == 0) {
            break;
          }
        }
        if (v16) {
          CFRelease(v16);
        }
        int v44 = 0;
        uint64_t v18 = CMBaseObjectGetDerivedStorage();
        *(_OWORD *)&v43.CMTimeValue value = *(_OWORD *)v9;
        v43.CMTimeEpoch epoch = v35;
        *(_OWORD *)&v42.CMTimeValue value = *(_OWORD *)&v43.value;
        v42.CMTimeEpoch epoch = v35;
        uint64_t v40 = 0;
        CMBlockBufferRef blockBufferOut = 0;
        if (!*(void *)(v18 + 560))
        {
          APSLogErrorAt();
          int v29 = APSSignalErrorAt();
          CMBlockBufferRef v16 = 0;
          if (!v29) {
            break;
          }
          int v15 = v29;
LABEL_91:
          APSLogErrorAt();
          char v13 = 0;
          goto LABEL_34;
        }
        uint64_t v19 = v18;
        long long v34 = *(_OWORD *)&v43.value;
        CMTimeValue v47 = v37;
        CMTimeScale v48 = v36;
        bufferedAudioEngine_getCurrentRemoteMediaTimeInternal(&v44, &time);
        CMTimeValue value = time.value;
        CMTimeScale timescale = time.timescale;
        uint64_t v49 = *(void *)&time.flags;
        int epoch_high = HIDWORD(time.epoch);
        if (v44)
        {
          APSLogErrorAt();
          CMBlockBufferRef v16 = 0;
          CMTimeFlags flags = v30;
          CMTimeEpoch epoch = v35;
        }
        else
        {
          MessageAtIndex = (OpaqueCMBlockBuffer *)APMessageRingBufferedGetMessageAtIndex(*(void *)(v19 + 560), *(unsigned __int16 *)(v12 + 26), (_DWORD *)&v40 + 1, (uint64_t)&v43, (uint64_t)&v42);
          if (MessageAtIndex)
          {
            BOOL v23 = MessageAtIndex;
            size_t DataLength = CMBlockBufferGetDataLength(MessageAtIndex);
            CMBlockBufferCreateWithBufferReference(structureAllocator, v23, 0, DataLength, 0, &blockBufferOut);
            *(void *)(v12 + 80) += DataLength;
            CMTime time2 = v43;
            rhs.CMTimeValue value = value;
            rhs.CMTimeScale timescale = timescale;
            *(void *)&rhs.CMTimeFlags flags = v49;
            HIDWORD(rhs.epoch) = epoch_high;
            CMTimeSubtract(&time, &time2, &rhs);
            *uint64_t v17 = *(_OWORD *)&time.value;
            *(void *)(v12 + 104) = time.epoch;
            *int v32 = *(_OWORD *)&v43.value;
            *(void *)(v12 + 48) = v43.epoch;
            if (v42.flags)
            {
              *(_OWORD *)&time2.CMTimeValue value = *v17;
              time2.CMTimeEpoch epoch = *(void *)(v12 + 104);
              CMTime rhs = v42;
              CMTimeAdd(&time, &time2, &rhs);
              *uint64_t v17 = *(_OWORD *)&time.value;
              *(void *)(v12 + 104) = time.epoch;
              *(_OWORD *)&time2.CMTimeValue value = *v32;
              time2.CMTimeEpoch epoch = *(void *)(v12 + 48);
              CMTime rhs = v42;
              CMTimeAdd(&time, &time2, &rhs);
              *int v32 = *(_OWORD *)&time.value;
              *(void *)(v12 + 48) = time.epoch;
            }
            *(_DWORD *)(v12 + 28) = HIDWORD(v40);
            ++*(void *)(v12 + 144);
            unsigned __int16 v25 = *(_WORD *)(v12 + 26) + 1;
            *(_WORD *)(v12 + 26) = v25;
            APMessageRingBufferedGetByteCountAtIndex(*(void *)(v19 + 560), v25, (int *)(v12 + 136));
            int v44 = 0;
            uint64_t v26 = CMBaseObjectGetDerivedStorage();
            CFArrayRef v6 = v33;
            if (*(_DWORD *)(v12 + 136) >= *(_DWORD *)(v12 + 156)
              || (*(_OWORD *)&time.CMTimeValue value = *v17,
                  time.CMTimeEpoch epoch = *(void *)(v12 + 104),
                  CMTime time2 = *(CMTime *)(v26 + 124),
                  CMTimeCompare(&time, &time2) >= 1))
            {
              *(_WORD *)(v12 + 56) = 257;
              if (gLogCategory_APAudioEngineBuffered <= 50
                && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
              {
                if (v7) {
                  CMBaseObjectGetDerivedStorage();
                }
                CMTime time = v43;
                CMTimeGetSeconds(&time);
                *(_OWORD *)&time.CMTimeValue value = *v17;
                time.CMTimeEpoch epoch = *(void *)(v12 + 104);
                CMTimeGetSeconds(&time);
                LogPrintF();
                CFArrayRef v6 = v33;
              }
            }
            CMBlockBufferRef v16 = blockBufferOut;
            CMBlockBufferRef blockBufferOut = 0;
            CMTimeValue v47 = v42.value;
            CMTimeFlags flags = v42.flags;
            CMTimeScale v48 = v42.timescale;
            CMTimeEpoch epoch = v42.epoch;
            bufferedAudioEngine_logForSendRate(v7, v12, DataLength);
            if (blockBufferOut) {
              CFRelease(blockBufferOut);
            }
          }
          else
          {
            *(_OWORD *)&time.CMTimeValue value = v34;
            time.CMTimeEpoch epoch = v35;
            APMessageRingBufferedGetLastValidReadIndexAndTimestamp(*(void *)(v19 + 560), &v40, (uint64_t)&time);
            if (gLogCategory_APAudioEngineBuffered <= 50
              && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
            {
              if (v7) {
                CMBaseObjectGetDerivedStorage();
              }
              time2.CMTimeValue value = value;
              time2.CMTimeScale timescale = timescale;
              *(void *)&time2.CMTimeFlags flags = v49;
              HIDWORD(time2.epoch) = epoch_high;
              CMTimeGetSeconds(&time2);
              CMTime time2 = time;
              CMTimeGetSeconds(&time2);
              LogPrintF();
            }
            CMBlockBufferRef v16 = 0;
            CMTimeFlags flags = v30;
            CMTimeEpoch epoch = v35;
            CFArrayRef v6 = v33;
          }
        }
        int v15 = v44;
        if (v44) {
          goto LABEL_91;
        }
        uint64_t v9 = MEMORY[0x1E4F1F9F8];
        if (v16)
        {
          if (flags)
          {
            CMTime time = v38;
            time2.CMTimeValue value = v47;
            time2.CMTimeScale timescale = v48;
            time2.CMTimeFlags flags = flags;
            time2.CMTimeEpoch epoch = epoch;
            CMTimeAdd(&v38, &time, &time2);
          }
          CFArrayAppendValue(v6, v16);
          if (!*(unsigned char *)(v12 + 56)) {
            continue;
          }
        }
        break;
      }
    }
    if ((*(unsigned char *)(v10 + 1096) & 1) != 0
      && (CMTime time = *(CMTime *)(v10 + 1084), time2 = *(CMTime *)(v12 + 32), !CMTimeCompare(&time, &time2)))
    {
      int v15 = 0;
      char v13 = 1;
    }
    else
    {
      int v15 = 0;
      char v13 = *(unsigned char *)(v12 + 56);
    }
LABEL_34:
    if (v16) {
      CFRelease(v16);
    }
    if (!v15) {
      goto LABEL_23;
    }
    goto LABEL_37;
  }
  APSLogErrorAt();
  int v15 = APSSignalErrorAt();
  char v13 = 0;
  if (v15)
  {
LABEL_37:
    APSLogErrorAt();
LABEL_98:
    CFRelease(v6);
    goto LABEL_25;
  }
LABEL_23:
  **(void **)(a1 + 16) = v6;
  uint64_t v14 = *(char **)(a1 + 24);
  int v15 = 0;
  if (v14) {
    *uint64_t v14 = v13;
  }
LABEL_25:
  **(_DWORD **)(a1 + 32) = v15;
}

uint64_t bufferedAudioEngine_logForSendRate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  int v34 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = mach_absolute_time();
  uint64_t v8 = result;
  if (*(unsigned char *)(a2 + 24)) {
    unint64_t v9 = 10000;
  }
  else {
    unint64_t v9 = 100;
  }
  if (*(unsigned char *)(a2 + 56))
  {
    if (!*(unsigned char *)(a2 + 240))
    {
      uint64_t v10 = UpTicksToMilliseconds();
      uint64_t result = UpTicksToMilliseconds();
      if (v10 && result != 0)
      {
        if (gLogCategory_APAudioEngineBuffered <= 50)
        {
          if (gLogCategory_APAudioEngineBuffered != -1 || (uint64_t result = _LogCategory_Initialize(), result))
          {
            if (a1) {
              CMBaseObjectGetDerivedStorage();
            }
            uint64_t result = LogPrintF();
          }
        }
        *(void *)(a2 + 224) = 0;
        *(void *)(a2 + 232) = 0;
        *(unsigned char *)(a2 + 240) = 1;
      }
    }
  }
  else
  {
    *(int32x2_t *)(a2 + 232) = vadd_s32(*(int32x2_t *)(a2 + 232), (int32x2_t)0x100000001);
    *(void *)(a2 + 224) += a3;
    if (*(unsigned char *)(a2 + 240))
    {
      *(void *)(a2 + 208) = result;
      *(void *)(a2 + 216) = result;
      *(unsigned char *)(a2 + 240) = 0;
    }
    else
    {
      if (!*(void *)(a2 + 208))
      {
        *(void *)(a2 + 208) = result;
        *(void *)(a2 + 216) = result;
      }
      unint64_t v12 = UpTicksToMilliseconds();
      uint64_t result = UpTicksToMilliseconds();
      if (v12 && result && v12 >= v9)
      {
        unint64_t v30 = result;
        bufferedAudioEngine_getCurrentRemoteMediaTimeInternal(&v34, &v33);
        CMTimeValue value = v33.value;
        CMTimeScale timescale = v33.timescale;
        uint64_t v39 = *(void *)&v33.flags;
        int epoch_high = HIDWORD(v33.epoch);
        if (v34)
        {
          return APSLogErrorAt();
        }
        else
        {
          CMTimeValue v15 = *(void *)(a2 + 32);
          CMTimeScale v16 = *(_DWORD *)(a2 + 40);
          uint64_t v37 = *(void *)(a2 + 44);
          int v38 = *(_DWORD *)(a2 + 52);
          bufferedAudioEngine_getLastDeliveredRemoteMediaTimeForHose(a2, (__n128 *)&v33);
          CMTimeValue v27 = v33.value;
          CMTimeScale v28 = v33.timescale;
          uint64_t v35 = *(void *)&v33.flags;
          int v36 = HIDWORD(v33.epoch);
          int32_t SampleRateFromTransportAudioFormat = bufferedAudioEngine_getSampleRateFromTransportAudioFormat();
          time.CMTimeValue value = v15;
          time.CMTimeScale timescale = v16;
          *(void *)&time.CMTimeFlags flags = v37;
          HIDWORD(time.epoch) = v38;
          CMTimeConvertScale(&v33, &time, SampleRateFromTransportAudioFormat, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
          CMTimeValue v18 = v33.value;
          CMTimeScale v29 = v33.timescale;
          uint64_t v37 = *(void *)&v33.flags;
          int v38 = HIDWORD(v33.epoch);
          time.CMTimeValue value = value;
          time.CMTimeScale timescale = timescale;
          *(void *)&time.CMTimeFlags flags = v39;
          HIDWORD(time.epoch) = epoch_high;
          CMTimeConvertScale(&v33, &time, SampleRateFromTransportAudioFormat, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
          CMTimeValue v19 = v33.value;
          CMTimeScale v20 = v33.timescale;
          uint64_t v39 = *(void *)&v33.flags;
          int epoch_high = HIDWORD(v33.epoch);
          LODWORD(v21) = *(_DWORD *)(a2 + 236);
          double v22 = (double)v21 / (double)v30 * 1000.0;
          if (gLogCategory_APAudioEngineBuffered <= 50
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (a1) {
              CMBaseObjectGetDerivedStorage();
            }
            v33.CMTimeValue value = v18;
            v33.CMTimeScale timescale = v29;
            *(void *)&v33.CMTimeFlags flags = v37;
            HIDWORD(v33.epoch) = v38;
            CMTimeGetSeconds(&v33);
            v33.CMTimeValue value = v27;
            v33.CMTimeScale timescale = v28;
            *(void *)&v33.CMTimeFlags flags = v35;
            HIDWORD(v33.epoch) = v36;
            CMTimeGetSeconds(&v33);
            v33.CMTimeValue value = v19;
            v33.CMTimeScale timescale = v20;
            *(void *)&v33.CMTimeFlags flags = v39;
            HIDWORD(v33.epoch) = epoch_high;
            CMTimeGetSeconds(&v33);
            CMClockGetTime(&v31, *(CMClockRef *)(DerivedStorage + 448));
            CMTimeGetSeconds(&v31);
            LogPrintF();
          }
          *(_DWORD *)(a2 + 232) = 0;
          *(void *)(a2 + 216) = v8;
          *(void *)(a2 + 224) = 0;
          uint64_t result = CMBaseObjectGetDerivedStorage();
          if (*(void *)(result + 1176))
          {
            unint64_t v23 = *(void *)(a2 + 344);
            double v24 = *(double *)(a2 + 328);
            *(void *)(a2 + 344) = v23 + 1;
            double v25 = v22 + v24 * (double)v23;
            double v26 = (double)(v23 + 1);
            *(double *)(a2 + 328) = v25 / v26;
            if (*(double *)(a2 + 312) > v22) {
              *(double *)(a2 + 312) = v22;
            }
            if (*(double *)(a2 + 320) < v22) {
              *(double *)(a2 + 320) = v22;
            }
            *(double *)(a2 + 336) = *(double *)(a2 + 336) + (v22 - *(double *)(a2 + 336)) / v26;
          }
        }
      }
    }
  }
  return result;
}

uint64_t bufferedAudioEngine_getSampleRateFromTransportAudioFormat()
{
  if (*(void *)(CMBaseObjectGetDerivedStorage() + 928))
  {
    APSAudioFormatDescriptionGetSampleRate();
    return (int)v0;
  }
  else
  {
    APSLogErrorAt();
    APSSignalErrorAt();
    return 0;
  }
}

uint64_t bufferedAudioEngine_setEchoCancellationIsEnabledToAllHoses(uint64_t a1, int a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v4 = *(void **)(result + 584);
  if (v4)
  {
    uint64_t v5 = *MEMORY[0x1E4F49FB0];
    CFArrayRef v6 = (uint64_t *)MEMORY[0x1E4F1CFC8];
    if (a2) {
      CFArrayRef v6 = (uint64_t *)MEMORY[0x1E4F1CFD0];
    }
    uint64_t v7 = *v6;
    do
    {
      uint64_t v8 = v4[2];
      uint64_t VTable = CMBaseObjectGetVTable();
      uint64_t v11 = *(void *)(VTable + 8);
      uint64_t result = VTable + 8;
      uint64_t v10 = v11;
      if (v11) {
        uint64_t v12 = v10;
      }
      else {
        uint64_t v12 = 0;
      }
      char v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 56);
      if (v13) {
        uint64_t result = v13(v8, v5, v7);
      }
      CFAllocatorRef v4 = (void *)*v4;
    }
    while (v4);
  }
  return result;
}

uint64_t bufferedAudioEngine_updateMATAtmosPlaybackPreferenceIfNecessary()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(uint64_t **)(result + 584);
  if (!v1) {
    return result;
  }
  uint64_t v2 = result;
  while (1)
  {
    uint64_t result = APSGetFBOPropertyInt64();
    if (!result) {
      goto LABEL_12;
    }
    uint64_t result = APSGetFBOPropertyInt64();
    if (result || *((unsigned char *)v1 + 24)) {
      goto LABEL_12;
    }
    if (*(_DWORD *)(v2 + 592) == 1 && !APSGetFBOPropertyInt64()) {
      break;
    }
    uint64_t v3 = v1[2];
    APSEndpointStreamAudioHoseProtocolGetProtocolID();
    uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (!ProtocolVTable) {
      goto LABEL_20;
    }
    uint64_t v5 = *(void *)(ProtocolVTable + 16);
    if (!v5) {
      goto LABEL_20;
    }
    CFArrayRef v6 = *(uint64_t (**)(uint64_t, void))(v5 + 120);
    if (!v6) {
      goto LABEL_20;
    }
    uint64_t result = v6(v3, 0);
    if (result) {
      goto LABEL_20;
    }
LABEL_12:
    uint64_t v1 = (uint64_t *)*v1;
    if (!v1) {
      return result;
    }
  }
  uint64_t v7 = v1[2];
  APSEndpointStreamAudioHoseProtocolGetProtocolID();
  uint64_t v8 = CMBaseObjectGetProtocolVTable();
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 16);
    if (v9)
    {
      uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 120);
      if (v10)
      {
        uint64_t result = v10(v7, 1);
        if (!result) {
          goto LABEL_12;
        }
      }
    }
  }
LABEL_20:
  return APSLogErrorAt();
}

unsigned char *bufferedAudioEngine_wakeUpHosesAndAudioTimer(uint64_t a1)
{
  uint64_t result = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*result)
  {
    uint64_t v3 = result;
    if (APSSettingsIsFeatureEnabled())
    {
      uint64_t v4 = *((void *)v3 + 210);
      uint64_t VTable = CMBaseObjectGetVTable();
      uint64_t v7 = *(void *)(VTable + 16);
      uint64_t result = (unsigned char *)(VTable + 16);
      uint64_t v6 = v7;
      if (v7) {
        uint64_t v8 = v6;
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t v9 = *(uint64_t (**)(uint64_t))(v8 + 24);
      if (v9) {
        uint64_t result = (unsigned char *)v9(v4);
      }
    }
    else
    {
      uint64_t result = (unsigned char *)bufferedAudioEngine_wakeUpHoses();
    }
    if (v3[464] && !v3[480])
    {
      kdebug_trace();
      if (gLogCategory_APAudioEngineBuffered <= 40
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (a1) {
          CMBaseObjectGetDerivedStorage();
        }
        LogPrintF();
      }
      uint64_t result = (unsigned char *)APSPriorityDispatchSourceResume();
      v3[480] = 1;
    }
    else if (gLogCategory_APAudioEngineBuffered <= 40)
    {
      if (gLogCategory_APAudioEngineBuffered != -1 || (uint64_t result = (unsigned char *)_LogCategory_Initialize(), result))
      {
        if (a1) {
          CMBaseObjectGetDerivedStorage();
        }
        return (unsigned char *)LogPrintF();
      }
    }
  }
  return result;
}

uint64_t bufferedAudioEngine_setCryptorForHoseCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(const void **)a3;
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    uint64_t v7 = *(void *)(a3 + 8);
    if (v7)
    {
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (v5) {
          CMBaseObjectGetDerivedStorage();
        }
        bufferedAudioEngine_getCryptorIDForCryptor(a1);
        LogPrintF();
      }
      if (v5) {
        CFRetain(v5);
      }
      uint64_t v8 = *(const void **)(v7 + 16);
      uint64_t CryptorIDForCryptor = bufferedAudioEngine_getCryptorIDForCryptor(a1);
      APSEndpointStreamAudioHoseProtocolGetProtocolID();
      uint64_t result = CMBaseObjectGetProtocolVTable();
      if (result)
      {
        uint64_t v11 = *(void *)(result + 16);
        result += 16;
        uint64_t v10 = v11;
        if (v11)
        {
          uint64_t v12 = *(uint64_t (**)(const void *, uint64_t, uint64_t, uint64_t (*)(const void *, uint64_t, int, const void *), const void *))(v10 + 96);
          if (v12)
          {
            uint64_t result = v12(v8, CryptorIDForCryptor, a1, bufferedAudioEngine_hoseSetCryptorCallbackCompletionHandler, v5);
            if (!result) {
              return result;
            }
          }
          else
          {
            uint64_t result = bufferedAudioEngine_hoseSetCryptorCallbackCompletionHandler(v8, CryptorIDForCryptor, -12782, v5);
          }
        }
      }
      if (gLogCategory_APAudioEngineBuffered <= 90)
      {
        if (gLogCategory_APAudioEngineBuffered != -1 || (uint64_t result = _LogCategory_Initialize(), result))
        {
          if (v5) {
            CMBaseObjectGetDerivedStorage();
          }
          return LogPrintF();
        }
      }
    }
  }
  return result;
}

uint64_t bufferedAudioEngine_setMagicCookieForHoseCallback(const __CFData *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(const void **)a3;
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    uint64_t v7 = *(void *)(a3 + 8);
    if (v7)
    {
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (v5) {
          CMBaseObjectGetDerivedStorage();
        }
        bufferedAudioEngine_getMagicCookieIDForMagicCookieData(a1);
        LogPrintF();
      }
      if (v5) {
        CFRetain(v5);
      }
      uint64_t v8 = *(const void **)(v7 + 16);
      uint64_t MagicCookieIDForMagicCookieData = bufferedAudioEngine_getMagicCookieIDForMagicCookieData(a1);
      APSEndpointStreamAudioHoseProtocolGetProtocolID();
      uint64_t result = CMBaseObjectGetProtocolVTable();
      if (result)
      {
        uint64_t v11 = *(void *)(result + 16);
        result += 16;
        uint64_t v10 = v11;
        if (v11)
        {
          uint64_t v12 = *(uint64_t (**)(const void *, uint64_t, const __CFData *, uint64_t (*)(const void *, uint64_t, int, const void *), const void *))(v10 + 104);
          if (v12)
          {
            uint64_t result = v12(v8, MagicCookieIDForMagicCookieData, a1, bufferedAudioEngine_hoseSetMagicCookieCallbackCompletionHandler, v5);
            if (!result) {
              return result;
            }
          }
          else
          {
            uint64_t result = bufferedAudioEngine_hoseSetMagicCookieCallbackCompletionHandler(v8, MagicCookieIDForMagicCookieData, -12782, v5);
          }
        }
      }
      if (gLogCategory_APAudioEngineBuffered <= 90)
      {
        if (gLogCategory_APAudioEngineBuffered != -1 || (uint64_t result = _LogCategory_Initialize(), result))
        {
          if (v5) {
            CMBaseObjectGetDerivedStorage();
          }
          return LogPrintF();
        }
      }
    }
  }
  return result;
}

uint64_t bufferedAudioEngine_hoseSetMagicCookieCallbackCompletionHandler(const void *a1, uint64_t a2, int a3, const void *a4)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v8 = malloc_type_calloc(1uLL, 0x20uLL, 0x10200401C4E69EBuLL);
  if (!v8)
  {
    APSLogErrorAt();
    uint64_t v12 = 4294951816;
    if (!a4) {
      return v12;
    }
    goto LABEL_9;
  }
  uint64_t v9 = v8;
  if (a4) {
    CFTypeRef v10 = CFRetain(a4);
  }
  else {
    CFTypeRef v10 = 0;
  }
  *uint64_t v9 = v10;
  if (a1) {
    CFTypeRef v11 = CFRetain(a1);
  }
  else {
    CFTypeRef v11 = 0;
  }
  v9[1] = v11;
  v9[2] = a2;
  *((_DWORD *)v9 + 6) = a3;
  APSPriorityDispatcherAsyncF();
  uint64_t v12 = 0;
  if (a4) {
LABEL_9:
  }
    CFRelease(a4);
  return v12;
}

void bufferedAudioEngine_hoseSetMagicCookieCallbackCompletionHandlerInternal(uint64_t a1)
{
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage()) {
    goto LABEL_18;
  }
  if (!bufferedAudioEngine_getHoseDecriptorFromHose())
  {
    if (gLogCategory_APAudioEngineBuffered > 90
      || gLogCategory_APAudioEngineBuffered == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_18;
    }
    if (!*(void *)a1) {
      goto LABEL_17;
    }
LABEL_28:
    CMBaseObjectGetDerivedStorage();
    goto LABEL_17;
  }
  if (!*(_DWORD *)(a1 + 24))
  {
    if (gLogCategory_APAudioEngineBuffered > 50
      || gLogCategory_APAudioEngineBuffered == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_18;
    }
    if (!*(void *)a1)
    {
LABEL_17:
      LogPrintF();
      goto LABEL_18;
    }
    goto LABEL_28;
  }
  if (gLogCategory_APAudioEngineBuffered <= 90
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (!*(void *)a1) {
      goto LABEL_17;
    }
    goto LABEL_28;
  }
LABEL_18:
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  free((void *)a1);
}

uint64_t bufferedAudioEngine_audioHoseRegistrarDeregisterHoseInternal(uint64_t *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  uint64_t v3 = bufferedAudioEngine_removeHose(*a1);
  if (v3)
  {
    APSLogErrorAt();
  }
  else
  {
    if (CFDictionaryGetInt64())
    {
      *(unsigned char *)(DerivedStorage + 1160) = 0;
      bufferedAudioEngine_setEchoCancellationIsEnabledToAllHoses(*a1, 0);
    }
    bufferedAudioEngine_updateInternalBadgeInfoAndPostNotificationIfNecessary(*a1, *(const void **)(DerivedStorage + 960), 0);
    bufferedAudioEngine_updateMATAtmosPlaybackPreferenceIfNecessary();
  }
  return v3;
}

void bufferedAudioEngine_Resume(const void *a1, const void *a2, void (*a3)(const void *, uint64_t, uint64_t), uint64_t a4)
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  uint64_t v8 = LogCategoryCopyOSLogHandle();
  uint64_t v9 = (void *)v8;
  if (v8) {
    CFTypeRef v10 = v8;
  }
  else {
    CFTypeRef v10 = MEMORY[0x1E4F14500];
  }
  if (os_signpost_enabled(v10))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D0945000, v10, OS_SIGNPOST_EVENT, 0x2B16058CuLL, "AIRPLAY_SIGNPOST_AUDIOENGINE_RESUME_START", (const char *)&unk_1D0B9874E, buf, 2u);
  }
  if (v9) {
    os_release(v9);
  }
  kdebug_trace();
  CFTypeRef v11 = malloc_type_malloc(0x28uLL, 0x10E0040139F2759uLL);
  if (!v11)
  {
    APSLogErrorAt();
    uint64_t v16 = 4294951816;
LABEL_30:
    if (a3) {
      a3(a1, v16, a4);
    }
    return;
  }
  uint64_t v12 = v11;
  if (a1) {
    CFTypeRef v13 = CFRetain(a1);
  }
  else {
    CFTypeRef v13 = 0;
  }
  *uint64_t v12 = v13;
  if (a2) {
    CFTypeRef v14 = CFRetain(a2);
  }
  else {
    CFTypeRef v14 = 0;
  }
  v12[1] = v14;
  v12[2] = a3;
  v12[3] = a4;
  *((_DWORD *)v12 + 8) = 0;
  uint64_t v15 = APSDispatchSectionEnterWithPriorityDispatcher();
  if (v15)
  {
    uint64_t v16 = v15;
    APSLogErrorAt();
    if (*v12) {
      CFRelease((CFTypeRef)*v12);
    }
    uint64_t v17 = (const void *)v12[1];
    if (v17) {
      CFRelease(v17);
    }
    free(v12);
    goto LABEL_30;
  }
}

void bufferedAudioEngine_Suspend(const void *a1, const void *a2, void (*a3)(const void *, uint64_t, uint64_t), uint64_t a4)
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  uint64_t v7 = malloc_type_malloc(0x28uLL, 0x10E0040139F2759uLL);
  if (v7)
  {
    uint64_t v8 = v7;
    if (a1) {
      CFTypeRef v9 = CFRetain(a1);
    }
    else {
      CFTypeRef v9 = 0;
    }
    *uint64_t v8 = v9;
    if (a2) {
      CFTypeRef v10 = CFRetain(a2);
    }
    else {
      CFTypeRef v10 = 0;
    }
    v8[1] = v10;
    v8[2] = a3;
    v8[3] = a4;
    *((_DWORD *)v8 + 8) = 0;
    uint64_t v11 = APSDispatchSectionEnterWithPriorityDispatcher();
    if (!v11) {
      return;
    }
    uint64_t v12 = v11;
    APSLogErrorAt();
    if (*v8) {
      CFRelease((CFTypeRef)*v8);
    }
    CFTypeRef v13 = (const void *)v8[1];
    if (v13) {
      CFRelease(v13);
    }
    free(v8);
  }
  else
  {
    APSLogErrorAt();
    uint64_t v12 = 4294951816;
  }
  if (a3)
  {
    a3(a1, v12, a4);
  }
}

void bufferedAudioEngine_SetEndpointStream(const void *a1, const void *a2, void (*a3)(const void *, uint64_t, uint64_t), uint64_t a4)
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  kdebug_trace();
  uint64_t v7 = malloc_type_malloc(0x28uLL, 0x10A0040DE786E1EuLL);
  if (v7)
  {
    uint64_t v8 = v7;
    if (a1) {
      CFTypeRef v9 = CFRetain(a1);
    }
    else {
      CFTypeRef v9 = 0;
    }
    *uint64_t v8 = v9;
    if (a2) {
      CFTypeRef v10 = CFRetain(a2);
    }
    else {
      CFTypeRef v10 = 0;
    }
    v8[1] = v10;
    v8[2] = a3;
    v8[3] = a4;
    *((_DWORD *)v8 + 8) = 0;
    uint64_t v11 = APSDispatchSectionEnterWithPriorityDispatcher();
    if (!v11) {
      return;
    }
    uint64_t v12 = v11;
    APSLogErrorAt();
    if (*v8) {
      CFRelease((CFTypeRef)*v8);
    }
    CFTypeRef v13 = (const void *)v8[1];
    if (v13) {
      CFRelease(v13);
    }
    free(v8);
  }
  else
  {
    APSLogErrorAt();
    uint64_t v12 = 4294951816;
  }
  if (a3)
  {
    a3(a1, v12, a4);
  }
}

uint64_t bufferedAudioEngine_Flush(uint64_t a1)
{
  CMBaseObjectGetDerivedStorage();
  FigCFDictionaryGetCMTimeIfPresent();
  CFDictionaryGetInt64();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  uint64_t v2 = APSPriorityDispatcherSyncTask();
  if (v2) {
    APSLogErrorAt();
  }
  return v2;
}

uint64_t bufferedAudioEngine_FlushWithinSampleRange(const void *a1, long long *a2)
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1) {
      CMBaseObjectGetDerivedStorage();
    }
    *(_OWORD *)&time.start.CMTimeValue value = *a2;
    time.start.CMTimeEpoch epoch = *((void *)a2 + 2);
    CMTimeGetSeconds(&time.start);
    long long v4 = a2[1];
    *(_OWORD *)&time.start.CMTimeValue value = *a2;
    *(_OWORD *)&time.start.CMTimeEpoch epoch = v4;
    *(_OWORD *)&time.duration.CMTimeScale timescale = a2[2];
    CMTimeRangeGetEnd(&v12, &time);
    CMTimeGetSeconds(&v12);
    LogPrintF();
  }
  uint64_t v5 = (char *)malloc_type_calloc(1uLL, 0x38uLL, 0x10200404F37B891uLL);
  if (v5)
  {
    if (a1) {
      CFTypeRef v6 = CFRetain(a1);
    }
    else {
      CFTypeRef v6 = 0;
    }
    *(void *)uint64_t v5 = v6;
    long long v7 = *a2;
    long long v8 = a2[1];
    *(_OWORD *)(v5 + 40) = a2[2];
    *(_OWORD *)(v5 + 24) = v8;
    *(_OWORD *)(v5 + 8) = v7;
    uint64_t v9 = APSPriorityDispatcherAsyncF();
    if (v9) {
      APSLogErrorAt();
    }
    else {
      uint64_t v5 = 0;
    }
  }
  else
  {
    APSLogErrorAt();
    uint64_t v9 = 4294951816;
  }
  free(v5);
  return v9;
}

void bufferedAudioEngine_SetRateAndAnchorTime(const void *a1, CMTime *a2, CMTime *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1) {
      CMBaseObjectGetDerivedStorage();
    }
    CMTime time = *a2;
    CMTimeGetSeconds(&time);
    CMTime time = *a3;
    CMTimeGetSeconds(&time);
    LogPrintF();
  }
  BOOL v14 = a7 == 0.0 || a7 == 1.0;
  if (v14 && (uint64_t v15 = (char *)malloc_type_calloc(1uLL, 0x58uLL, 0x10A0040F3A75D44uLL)) != 0)
  {
    uint64_t v16 = v15;
    if (a1) {
      CFTypeRef v17 = CFRetain(a1);
    }
    else {
      CFTypeRef v17 = 0;
    }
    *(void *)uint64_t v16 = v17;
    *((double *)v16 + 1) = a7;
    long long v18 = *(_OWORD *)&a2->value;
    *((void *)v16 + 4) = a2->epoch;
    *((_OWORD *)v16 + 1) = v18;
    CMTimeEpoch epoch = a3->epoch;
    *(_OWORD *)(v16 + 40) = *(_OWORD *)&a3->value;
    *((void *)v16 + 7) = epoch;
    *((void *)v16 + 8) = a4;
    *((void *)v16 + 9) = a5;
    if (a7 != 1.0 || !a6)
    {
      APSPriorityDispatcherAsyncEnforcePriorityF();
      return;
    }
    uint64_t MutableCopy = FigCFDictionaryCreateMutableCopy();
    if (MutableCopy)
    {
      unint64_t v21 = (const void *)MutableCopy;
      FigCFDictionaryGetValue();
      uint64_t v22 = FigCFDictionaryCreateMutableCopy();
      if (v22)
      {
        unint64_t v23 = (const void *)v22;
        mach_absolute_time();
        FigCFDictionarySetInt64();
        FigCFDictionarySetValue();
        *((void *)v16 + 10) = CFRetain(v21);
        APSPriorityDispatcherAsyncEnforcePriorityF();
        CFRelease(v23);
        CFRelease(v21);
        return;
      }
      APSLogErrorAt();
      CFRelease(v21);
    }
    else
    {
      APSLogErrorAt();
    }
    if (*(void *)v16) {
      CFRelease(*(CFTypeRef *)v16);
    }
    double v24 = (const void *)*((void *)v16 + 10);
    if (v24) {
      CFRelease(v24);
    }
    free(v16);
  }
  else
  {
    APSLogErrorAt();
  }
  if (a4)
  {
    if (gLogCategory_APAudioEngineBuffered <= 50
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1) {
        CMBaseObjectGetDerivedStorage();
      }
      LogPrintF();
    }
    bufferedAudioEngine_callSetRateAndAnchorTimeClientCompletionCallback(a1, 4294949714, MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], 0);
  }
}

uint64_t bufferedAudioEngine_SetEndOfSiriTTSUtteranceMediaTime(CMTimeValue a1, CMTime *a2)
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1) {
      CMBaseObjectGetDerivedStorage();
    }
    CMTime time = *a2;
    CMTimeGetSeconds(&time);
    LogPrintF();
  }
  time.CMTimeValue value = a1;
  *(_OWORD *)&time.CMTimeScale timescale = *(_OWORD *)&a2->value;
  CMTimeEpoch epoch = a2->epoch;
  uint64_t v4 = APSPriorityDispatcherSyncTask();
  if (v4) {
    APSLogErrorAt();
  }
  return v4;
}

uint64_t bufferedAudioEngine_ApplyVolumeFade(uint64_t a1)
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  uint64_t v2 = APSPriorityDispatcherSyncTask();
  if (v2) {
    APSLogErrorAt();
  }
  return v2;
}

void bufferedAudioEngine_resumeInternalStage1(uint64_t *a1)
{
  uint64_t v117 = *MEMORY[0x1E4F143B8];
  int v100 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v98 = 0;
  CFTypeRef v99 = 0;
  CFTypeRef v97 = 0;
  int valuePtr = 0;
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  kdebug_trace();
  if (*(unsigned char *)(DerivedStorage + 464)) {
    goto LABEL_246;
  }
  CFDictionaryRef v3 = (const __CFDictionary *)a1[1];
  uint64_t v4 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (!v3)
  {
    CFNumberRef Value = 0;
    CFTypeRef v6 = 0;
    long long v7 = 0;
    goto LABEL_27;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v3, (const void *)*MEMORY[0x1E4F32970]);
  CFTypeRef v6 = CFDictionaryGetValue((CFDictionaryRef)a1[1], (const void *)*MEMORY[0x1E4F32980]);
  long long v7 = CFDictionaryGetValue((CFDictionaryRef)a1[1], (const void *)*MEMORY[0x1E4F32990]);
  if (CFDictionaryGetValue((CFDictionaryRef)a1[1], (const void *)*MEMORY[0x1E4F32988]))
  {
    int v100 = APSAudioFormatDescriptionCreateWithFigEndpointStreamAudioFormatDescription();
    if (!v100)
    {
      *(void *)&long long bytes = 0;
      APSAudioFormatDescriptionCopyDebugString();
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (*a1) {
          CMBaseObjectGetDerivedStorage();
        }
        LogPrintF();
      }
      goto LABEL_20;
    }
    APSLogErrorAt();
LABEL_246:
    CFTypeRef v10 = 0;
    goto LABEL_151;
  }
LABEL_20:
  if (Value)
  {
    CFDataRef v8 = *(const __CFData **)(DerivedStorage + 384);
    if (!v8
      || CFDataGetLength(v8) != 32
      || (BytePtr = CFDataGetBytePtr(*(CFDataRef *)(DerivedStorage + 384)),
          long long v94 = *(_OWORD *)BytePtr,
          long long v95 = *((_OWORD *)BytePtr + 1),
          ((unint64_t)v94 & *((void *)&v94 + 1) & (unint64_t)v95 & *((void *)&v95 + 1)) == 0xFFFFFFFFFFFFFFFFLL))
    {
      APSLogErrorAt();
      CFTypeRef v10 = 0;
      int v100 = -15481;
      goto LABEL_152;
    }
    CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
    CFTypeRef v10 = (const void *)CFStringCreateF();
    if (v100) {
      goto LABEL_150;
    }
    long long bytes = v94;
    long long v113 = v95;
    int v100 = FigAudioSessionCreateWithAVAudioSessionSiblingForAudioSessionID();
    if (v100) {
      goto LABEL_150;
    }
    goto LABEL_28;
  }
LABEL_27:
  CFTypeRef v10 = 0;
LABEL_28:
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  if (APSSettingsGetIntWithDefault())
  {
    if (v6) {
      BOOL v11 = APSGetFBOPropertyInt64() != 0;
    }
    else {
      BOOL v11 = 1;
    }
  }
  else
  {
    BOOL v11 = 0;
  }
  *(unsigned char *)(DerivedStorage + 520) = v11;
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  if (!v7) {
    goto LABEL_232;
  }
  CMTime v12 = *(const void **)(DerivedStorage + 512);
  *(void *)(DerivedStorage + 512) = 0;
  if (v12) {
    CFRelease(v12);
  }
  CFTypeRef v13 = *(const void **)(DerivedStorage + 488);
  *(void *)(DerivedStorage + 488) = Value;
  if (Value) {
    CFRetain(Value);
  }
  if (v13) {
    CFRelease(v13);
  }
  BOOL v14 = *(const void **)(DerivedStorage + 496);
  CFTypeRef v15 = v99;
  *(void *)(DerivedStorage + 496) = v99;
  if (v15) {
    CFRetain(v15);
  }
  if (v14) {
    CFRelease(v14);
  }
  uint64_t v16 = *(const void **)(DerivedStorage + 504);
  CFTypeRef v17 = v98;
  *(void *)(DerivedStorage + 504) = v98;
  if (v17) {
    CFRetain(v17);
  }
  if (v16) {
    CFRelease(v16);
  }
  long long v18 = *(const void **)(DerivedStorage + 1376);
  CFTypeRef v19 = v97;
  *(void *)(DerivedStorage + 1376) = v97;
  if (v19) {
    CFRetain(v19);
  }
  if (v18) {
    CFRelease(v18);
  }
  uint64_t v20 = *a1;
  uint64_t v21 = CMBaseObjectGetDerivedStorage();
  *(void *)&long long bytes = 0;
  CFTypeID v22 = CFGetTypeID(v7);
  if (v22 == CFArrayGetTypeID())
  {
    int v23 = APSAudioFormatDescriptionListCreateWithFigEndpointStreamAudioFormatDescriptionArray();
    if (v23)
    {
      int v27 = v23;
      APSLogErrorAt();
    }
    else if (APSAudioFormatDescriptionListSupports44kHz() {
           || APSAudioFormatDescriptionListSupports48kHz())
    }
    {
      if (!*(unsigned char *)(v21 + 464) && !*(void *)(v21 + 928))
      {
        DefaultFormat = (const void *)APSAudioFormatDescriptionListGetDefaultFormat();
        if (DefaultFormat) {
          DefaultFormat = CFRetain(DefaultFormat);
        }
        *(void *)(v21 + 928) = DefaultFormat;
      }
      double v25 = *(const void **)(v21 + 920);
      double v26 = (const void *)bytes;
      *(void *)(v21 + 920) = bytes;
      if (v26) {
        CFRetain(v26);
      }
      if (v25) {
        CFRelease(v25);
      }
      CFTypeRef v108 = 0;
      APSAudioFormatDescriptionListCopyDebugString();
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (v20) {
          CMBaseObjectGetDerivedStorage();
        }
        LogPrintF();
      }
      if (v108) {
        CFRelease(v108);
      }
      CFTypeRef v108 = 0;
      APSAudioFormatDescriptionCopyDebugString();
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (v20) {
          CMBaseObjectGetDerivedStorage();
        }
        LogPrintF();
      }
      if (v108) {
        CFRelease(v108);
      }
      int v27 = 0;
    }
    else
    {
      CFTypeRef v108 = 0;
      APSAudioFormatDescriptionListCopyDebugString();
      if (gLogCategory_APAudioEngineBuffered <= 90
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (v20) {
          CMBaseObjectGetDerivedStorage();
        }
        LogPrintF();
      }
      if (v108) {
        CFRelease(v108);
      }
      int v27 = -15490;
    }
  }
  else
  {
    APSLogErrorAt();
    int v27 = -15481;
  }
  if ((void)bytes) {
    CFRelease((CFTypeRef)bytes);
  }
  int v100 = v27;
  if (v27) {
    goto LABEL_150;
  }
  if (!APSAudioFormatDescriptionListContainsFormat())
  {
LABEL_232:
    APSLogErrorAt();
    int v100 = APSSignalErrorAt();
    if (v100) {
      goto LABEL_152;
    }
    goto LABEL_233;
  }
  v92 = v10;
  uint64_t v28 = *a1;
  CFTypeRef v108 = 0;
  v109 = &v108;
  uint64_t v110 = 0x2000000000;
  int v111 = 0;
  CMBaseObjectGetDerivedStorage();
  CFArrayRef v107 = 0;
  uint64_t AudioFormatIndex = 0;
  int CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  uint64_t v102 = 0;
  v103 = &v102;
  uint64_t v104 = 0x2000000000;
  int v105 = 256000;
  CFAllocatorRef v30 = *v4;
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(*v4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    APSRemoteConfigGetShared();
    CFTypeRef v93 = (CFTypeRef)APSRemoteConfigCopyValue();
    int v32 = APSAudioFormatDescriptionListCopyAudioFormatDescriptionsArray();
    *((_DWORD *)v109 + 6) = v32;
    if (v32)
    {
      APSLogErrorAt();
    }
    else
    {
      uint64_t v91 = DerivedStorage;
      CFIndex Count = CFArrayGetCount(v107);
      if (Count < 1)
      {
LABEL_131:
        uint64_t DerivedStorage = v91;
      }
      else
      {
        CFIndex v34 = Count;
        v90 = a1;
        CFIndex v35 = 0;
        while (1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v107, v35);
          uint64_t AudioFormatIndex = APSAudioFormatDescriptionGetAudioFormatIndex();
          uint64_t v37 = v103;
          *((_DWORD *)v103 + 6) = 256000;
          if (CFPreferenceNumberWithDefault)
          {
            *((_DWORD *)v37 + 6) = CFPreferenceNumberWithDefault;
          }
          else
          {
            ChannelCFIndex Count = APSAudioFormatDescriptionGetChannelCount();
            int v39 = 256000;
            if (ChannelCount != 1)
            {
              if (APSAudioFormatDescriptionGetChannelCount() == 2) {
                int v39 = 256000;
              }
              else {
                int v39 = 512000;
              }
            }
            uint64_t v37 = v103;
            *((_DWORD *)v103 + 6) = v39;
            if (v93)
            {
              *(void *)&long long bytes = MEMORY[0x1E4F143A8];
              *((void *)&bytes + 1) = 0x40000000;
              *(void *)&long long v113 = __bufferedAudioEngine_createTargetVBROptions_block_invoke;
              *((void *)&v113 + 1) = &unk_1E6893680;
              v114 = &v108;
              v115 = &v102;
              v116 = ValueAtIndex;
              CFDictionaryApplyBlock();
              *((_DWORD *)v109 + 6) = 0;
              uint64_t v37 = v103;
            }
          }
          CFNumberRef v40 = CFNumberCreate(v30, kCFNumberSInt32Type, v37 + 3);
          if (!v40)
          {
            APSLogErrorAt();
            *((_DWORD *)v109 + 6) = -6728;
LABEL_130:
            a1 = v90;
            goto LABEL_131;
          }
          CFNumberRef v41 = v40;
          CFAllocatorRef v42 = v30;
          CFNumberRef v43 = CFNumberCreate(v30, kCFNumberSInt64Type, &AudioFormatIndex);
          if (!v43) {
            break;
          }
          CFNumberRef v44 = v43;
          CFTypeRef v101 = 0;
          APSAudioFormatDescriptionCopyDebugString();
          if (gLogCategory_APAudioEngineBuffered <= 30
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (v28) {
              CMBaseObjectGetDerivedStorage();
            }
            LogPrintF();
          }
          if (v101) {
            CFRelease(v101);
          }
          CFDictionaryAddValue(Mutable, v44, v41);
          CFRelease(v41);
          CFRelease(v44);
          ++v35;
          CFAllocatorRef v30 = v42;
          if (v34 == v35) {
            goto LABEL_130;
          }
        }
        APSLogErrorAt();
        *((_DWORD *)v109 + 6) = -6728;
        CFRelease(v41);
        a1 = v90;
        uint64_t DerivedStorage = v91;
      }
    }
  }
  else
  {
    APSLogErrorAt();
    CFTypeRef v93 = 0;
    *((_DWORD *)v109 + 6) = -6728;
  }
  CFTypeRef v10 = v92;
  if (v107) {
    CFRelease(v107);
  }
  if (v93) {
    CFRelease(v93);
  }
  _Block_object_dispose(&v102, 8);
  _Block_object_dispose(&v108, 8);
  *(void *)(DerivedStorage + 528) = Mutable;
  uint64_t v45 = *(void *)(DerivedStorage + 328);
  uint64_t v46 = *a1;
  uint64_t v47 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v47) {
    uint64_t v48 = v47;
  }
  else {
    uint64_t v48 = 0;
  }
  uint64_t v49 = *(uint64_t (**)(uint64_t, uint64_t))(v48 + 80);
  if (!v49)
  {
    int v100 = -12782;
    goto LABEL_150;
  }
  int v100 = v49(v45, v46);
  if (v100) {
    goto LABEL_150;
  }
  if (*(void *)(DerivedStorage + 448)) {
    goto LABEL_142;
  }
  uint64_t CMBaseObject = APSNetworkClockGetCMBaseObject();
  uint64_t v58 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v58) {
    uint64_t v59 = v58;
  }
  else {
    uint64_t v59 = 0;
  }
  uint64_t v60 = *(uint64_t (**)(uint64_t, void, const __CFAllocator *, uint64_t))(v59 + 48);
  if (!v60)
  {
    int v100 = -12782;
    goto LABEL_150;
  }
  int v100 = v60(CMBaseObject, *MEMORY[0x1E4F4A138], v30, DerivedStorage + 448);
  if (v100)
  {
LABEL_150:
    APSLogErrorAt();
    goto LABEL_151;
  }
  CMClockGetTime((CMTime *)&bytes, *(CMClockRef *)(DerivedStorage + 448));
  *(_OWORD *)(DerivedStorage + 1448) = bytes;
  *(void *)(DerivedStorage + 1464) = v113;
  HostTimeClock = CMClockGetHostTimeClock();
  CMClockGetTime((CMTime *)&bytes, HostTimeClock);
  *(_OWORD *)(DerivedStorage + 1496) = bytes;
  *(void *)(DerivedStorage + 1512) = v113;
  uint64_t v62 = *(void *)(DerivedStorage + 328);
  uint64_t v63 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v63) {
    uint64_t v64 = v63;
  }
  else {
    uint64_t v64 = 0;
  }
  v71 = *(void (**)(uint64_t, uint64_t))(v64 + 8);
  if (v71) {
    v71(v62, DerivedStorage + 1424);
  }
LABEL_142:
  if (*(void *)(DerivedStorage + 992)) {
    goto LABEL_143;
  }
  int v100 = APSWirelessCoexManagerCreateWithOptions();
  if (v100)
  {
    if (gLogCategory_APAudioEngineBuffered <= 50
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (*a1) {
        CMBaseObjectGetDerivedStorage();
      }
      LogPrintF();
    }
    int v100 = 0;
  }
  if (!APSSettingsIsFeatureEnabled())
  {
LABEL_143:
    if (v100) {
      goto LABEL_150;
    }
  }
  else
  {
    uint64_t v85 = *(void *)(DerivedStorage + 992);
    uint64_t v86 = APAudioHoseManagerBufferedGetCMBaseObject(*(void *)(DerivedStorage + 1680));
    uint64_t v87 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v87) {
      uint64_t v88 = v87;
    }
    else {
      uint64_t v88 = 0;
    }
    v89 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v88 + 56);
    if (!v89)
    {
      int v100 = -12782;
      goto LABEL_150;
    }
    int v100 = v89(v86, @"CoexManager", v85);
    if (v100) {
      goto LABEL_150;
    }
  }
  CFAllocatorRef v50 = v30;
  uint64_t v51 = *a1;
  uint64_t v52 = CMBaseObjectGetDerivedStorage();
  CFTypeRef v108 = 0;
  RandomBytes();
  CFDataRef v53 = CFDataCreate(v50, (const UInt8 *)&bytes, 32);
  uint64_t v54 = (uint64_t)v50;
  int v55 = APSCryptorChaCha20Poly1305Create();
  if (v55)
  {
    APSLogErrorAt();
    if (v53) {
LABEL_179:
    }
      CFRelease(v53);
  }
  else
  {
    if (gLogCategory_APAudioEngineBuffered <= 40
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (v51) {
        CMBaseObjectGetDerivedStorage();
      }
      LogPrintF();
    }
    uint64_t v65 = *(const void **)(v52 + 544);
    *(void *)(v52 + 544) = v53;
    if (v53) {
      CFRetain(v53);
    }
    if (v65) {
      CFRelease(v65);
    }
    v66 = *(const void **)(v52 + 552);
    CFTypeRef v67 = v108;
    *(void *)(v52 + 552) = v108;
    if (v67) {
      CFRetain(v67);
    }
    if (v66) {
      CFRelease(v66);
    }
    if (v53) {
      goto LABEL_179;
    }
  }
  if (v108) {
    CFRelease(v108);
  }
  int v100 = v55;
  if (v55) {
    goto LABEL_150;
  }
  uint64_t v68 = *a1;
  int v69 = *(unsigned __int8 *)(DerivedStorage + 520);
  v70 = (void *)CMBaseObjectGetDerivedStorage();
  if (!v70[70])
  {
    APSSettingsIsFeatureEnabled();
    v70[7] = (int)FigGetCFPreferenceNumberWithDefault();
    if (gLogCategory_APAudioEngineBuffered <= 50
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (v68) {
        CMBaseObjectGetDerivedStorage();
      }
      LogPrintF();
    }
    size_t v72 = v70[7];
    DefaultAirPlayMallocZone = (malloc_zone_t *)APSAllocatorGetDefaultAirPlayMallocZone();
    uint64_t DefaultAirPlayMallocZoneCFAllocator = APSAllocatorGetDefaultAirPlayMallocZoneCFAllocator();
    v75 = v69
        ? bufferedAudioEngine_messageRingSetMessageSequenceNumberCallbackAPAP
        : bufferedAudioEngine_messageRingSetMessageSequenceNumberCallbackRTP;
    int v76 = APMessageRingBufferedCreate(v54, v72, DefaultAirPlayMallocZone, (uint64_t)bufferedAudioEngine_createMessageBackingBBuf, DefaultAirPlayMallocZoneCFAllocator, (uint64_t)v75, 0, v70 + 70);
    if (v76)
    {
      int v84 = v76;
LABEL_215:
      APSLogErrorAt();
      int v100 = v84;
      goto LABEL_150;
    }
  }
  if (APSSettingsIsFeatureEnabled())
  {
    uint64_t v77 = v70[210];
    uint64_t v78 = v70[70];
    uint64_t v79 = APAudioHoseManagerBufferedGetCMBaseObject(v77);
    uint64_t v80 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v80) {
      uint64_t v81 = v80;
    }
    else {
      uint64_t v81 = 0;
    }
    v82 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v81 + 56);
    if (v82)
    {
      int v83 = v82(v79, @"MessageRing", v78);
      if (!v83) {
        goto LABEL_212;
      }
      int v84 = v83;
    }
    else
    {
      int v84 = -12782;
    }
    goto LABEL_215;
  }
LABEL_212:
  int v100 = 0;
  bufferedAudioEngine_initializeRTCReporting(*a1);
  int v100 = 0;
  bufferedAudioEngine_initializeResumeState((const void *)*a1);
  int v100 = 0;
  int v100 = bufferedAudioEngine_createAndResumeAudioTimerInternal(*a1);
  if (v100) {
    goto LABEL_150;
  }
  bufferedAudioEngine_markSessionStartedForRTC();
  APSOasisCPUFloorRaiserRetainAssertion();
  *(unsigned char *)(DerivedStorage + 464) = 1;
LABEL_151:
  if (v100)
  {
LABEL_152:
    bufferedAudioEngine_sendSessionFailureEvent(*a1, @"Session failed to resume");
    bufferedAudioEngine_tearDownResumedStateAndStructuresInternal((const void *)*a1, 0);
    int v56 = v100;
    goto LABEL_234;
  }
LABEL_233:
  int v56 = 0;
LABEL_234:
  *((_DWORD *)a1 + 8) = v56;
  APSPriorityDispatcherAsyncF();
  if (v99) {
    CFRelease(v99);
  }
  if (v98) {
    CFRelease(v98);
  }
  if (v97) {
    CFRelease(v97);
  }
  if (v10) {
    CFRelease(v10);
  }
}

uint64_t bufferedAudioEngine_initializeRTCReporting(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = APSRTCReportingAgentCreate();
  if (result)
  {
    if (gLogCategory_APAudioEngineBuffered <= 90)
    {
      if (gLogCategory_APAudioEngineBuffered != -1 || (uint64_t result = _LogCategory_Initialize(), result))
      {
        if (a1) {
          CMBaseObjectGetDerivedStorage();
        }
        return LogPrintF();
      }
    }
  }
  else
  {
    if (gLogCategory_APAudioEngineBuffered <= 40
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1) {
        CMBaseObjectGetDerivedStorage();
      }
      LogPrintF();
    }
    uint64_t v4 = MEMORY[0x1E4F1F9F8];
    *(_OWORD *)(DerivedStorage + 1216) = *MEMORY[0x1E4F1F9F8];
    *(void *)(DerivedStorage + 1232) = *(void *)(v4 + 16);
    uint64_t v5 = MEMORY[0x1E4F1FA48];
    long long v8 = *MEMORY[0x1E4F1FA48];
    *(_OWORD *)(DerivedStorage + 1240) = *MEMORY[0x1E4F1FA48];
    uint64_t v6 = *(void *)(v5 + 16);
    *(void *)(DerivedStorage + 1256) = v6;
    *(void *)(DerivedStorage + 1208) = 0;
    uint64_t result = APSThreadSafeDictionaryCreate();
    if (*(void *)(DerivedStorage + 1264))
    {
      CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t result = (uint64_t)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
      *(void *)(DerivedStorage + 1272) = result;
      if (result)
      {
        *(_OWORD *)(DerivedStorage + 1280) = v8;
        *(void *)(DerivedStorage + 1296) = v6;
        *(_OWORD *)(DerivedStorage + 1304) = v8;
        *(void *)(DerivedStorage + 1320) = v6;
        uint64_t result = (uint64_t)CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        *(void *)(DerivedStorage + 1328) = result;
        if (result)
        {
          uint64_t result = (uint64_t)CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          *(void *)(DerivedStorage + 1336) = result;
          if (result)
          {
            uint64_t result = (uint64_t)CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            *(void *)(DerivedStorage + 1344) = result;
            if (result)
            {
              *(void *)(DerivedStorage + 1368) = 0;
              *(void *)(DerivedStorage + 1360) = 0;
              uint64_t result = (uint64_t)CFArrayCreateMutable(v7, 0, MEMORY[0x1E4F1D510]);
              *(void *)(DerivedStorage + 1392) = result;
              if (result)
              {
                *(void *)(DerivedStorage + 1408) = 0;
                *(void *)(DerivedStorage + 1400) = 0;
                return APSCopyClusterInfo();
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void bufferedAudioEngine_initializeResumeState(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTime v11 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  bufferedAudioEngine_updateMaxAudioBurstIfNecessary((uint64_t)a1);
  int CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  CMTimeMake(&v10, CFPreferenceNumberWithDefault, 1000);
  *(CMTime *)(DerivedStorage + 28) = v10;
  bufferedAudioEngine_generateNewFirstRemoteMediaTime((uint64_t)a1, &v11);
  *(unsigned char *)(DerivedStorage + 912) = 1;
  long long v4 = *(_OWORD *)&v11.value;
  *(void *)(DerivedStorage + 692) = v11.epoch;
  *(_OWORD *)(DerivedStorage + 676) = v4;
  CMTimeEpoch epoch = v11.epoch;
  *(_OWORD *)(DerivedStorage + 700) = *(_OWORD *)&v11.value;
  *(void *)(DerivedStorage + 716) = epoch;
  uint64_t v6 = MEMORY[0x1E4F1F9F8];
  long long v7 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)(DerivedStorage + 724) = *MEMORY[0x1E4F1F9F8];
  uint64_t v8 = *(void *)(v6 + 16);
  *(void *)(DerivedStorage + 740) = v8;
  *(_OWORD *)(DerivedStorage + 652) = v7;
  *(void *)(DerivedStorage + 668) = v8;
  *(void *)(DerivedStorage + 816) = 0xBFF0000000000000;
  *(unsigned char *)(DerivedStorage + 760) = 0;
  *(unsigned char *)(DerivedStorage + 802) = 0;
  *(void *)(DerivedStorage + 752) = 0;
  *(_DWORD *)(DerivedStorage + 984) = 0;
  bufferedAudioEngine_updatePlaybackState((uint64_t)a1, 1937010544);
  CMTime v10 = v11;
  bufferedAudioEngine_updateNextTranscodeBurstTimeAndUnRest((uint64_t)a1, &v10);
  APSTimedInfoManagerCreate();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  *(_OWORD *)(DerivedStorage + 952) = 0u;
  if (*(void *)(DerivedStorage + 872))
  {
    bufferedAudioEngine_callSetRateAndAnchorTimeClientCompletionCallback(a1, 4294949714, MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], 0);
    *(void *)(DerivedStorage + 872) = 0;
    *(void *)(DerivedStorage + 880) = 0;
  }
  RandomBytes();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1) {
      CMBaseObjectGetDerivedStorage();
    }
    APSAudioFormatDescriptionGetASBD();
    LogPrintF();
  }
  bufferedAudioEngine_readSoundCheck((uint64_t)a1);
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, a1, (CFNotificationCallback)bufferedAudioEngine_soundCheckChanged, @"com.apple.mobileipod-prefsChanged", 0, (CFNotificationSuspensionBehavior)0);
}

uint64_t bufferedAudioEngine_createAndResumeAudioTimerInternal(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = FigCFWeakReferenceHolderCreateWithReferencedObject();
  if (!v3)
  {
    uint64_t v11 = 4294895206;
    goto LABEL_26;
  }
  long long v4 = (const void *)v3;
  uint64_t v5 = APSPriorityDispatchSourceCreate();
  if (v5)
  {
    uint64_t v11 = v5;
LABEL_24:
    APSLogErrorAt();
    CFRelease(v4);
    return v11;
  }
  uint64_t v6 = APSPriorityDispatchSourceSetTimer();
  if (v6)
  {
    uint64_t v11 = v6;
    goto LABEL_26;
  }
  if (gLogCategory_APAudioEngineBuffered <= 40
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  uint64_t v7 = APSPriorityDispatchSourceResume();
  if (v7)
  {
    uint64_t v11 = v7;
    goto LABEL_26;
  }
  uint64_t v8 = FigCFWeakReferenceHolderCreateWithReferencedObject();
  if (!v8)
  {
    uint64_t v11 = 4294895206;
    goto LABEL_26;
  }
  long long v4 = (const void *)v8;
  uint64_t v9 = APSPriorityDispatchSourceCreate();
  if (v9)
  {
    uint64_t v11 = v9;
    goto LABEL_24;
  }
  uint64_t v10 = APSPriorityDispatchSourceSetTimer();
  if (v10)
  {
    uint64_t v11 = v10;
    goto LABEL_26;
  }
  uint64_t v11 = APSPriorityDispatchSourceResume();
  if (v11)
  {
LABEL_26:
    APSLogErrorAt();
    return v11;
  }
  *(unsigned char *)(DerivedStorage + 480) = 1;
  return v11;
}

double bufferedAudioEngine_markSessionStartedForRTC()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 1176))
  {
    uint64_t v2 = DerivedStorage;
    HostTimeClock = CMClockGetHostTimeClock();
    CMClockGetTime(&v4, HostTimeClock);
    double result = *(double *)&v4.value;
    *(CMTime *)(v2 + 1184) = v4;
  }
  return result;
}

void bufferedAudioEngine_sendSessionFailureEvent(uint64_t a1, const void *a2)
{
  if (*(void *)(CMBaseObjectGetDerivedStorage() + 1176))
  {
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CMTime v4 = Mutable;
      if (a2) {
        CFDictionarySetValue(Mutable, @"pointOfFailure", a2);
      }
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt64();
      CFDictionarySetValue(v4, @"sessionType", @"AudioBuffered");
      APSRTCReportingAgentSendEvent();
      CFRelease(v4);
    }
  }
}

void bufferedAudioEngine_resumeInternalStageEnd(CFTypeRef *a1)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v2 = (void (*)(CFTypeRef, void, CFTypeRef))a1[2];
  if (v2) {
    v2(*a1, *((unsigned int *)a1 + 8), a1[3]);
  }
  APSDispatchSectionLeave();
  uint64_t v3 = LogCategoryCopyOSLogHandle();
  CMTime v4 = (void *)v3;
  if (v3) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = MEMORY[0x1E4F14500];
  }
  if (os_signpost_enabled(v5))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D0945000, v5, OS_SIGNPOST_EVENT, 0x2B160590uLL, "AIRPLAY_SIGNPOST_AUDIOENGINE_RESUME_END", (const char *)&unk_1D0B9874E, buf, 2u);
  }
  if (v4) {
    os_release(v4);
  }
  kdebug_trace();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  CFTypeRef v6 = a1[1];
  if (v6) {
    CFRelease(v6);
  }
  if (*a1) {
    CFRelease(*a1);
  }
  free(a1);
}

uint64_t __bufferedAudioEngine_createTargetVBROptions_block_invoke(uint64_t a1)
{
  int v2 = CFGetInt64Ranged();
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)
    || APSAudioFormatDescriptionGetChannelCount() != v2
    || (*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = CFGetInt64Ranged(),
        uint64_t result = *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24),
        result))
  {
    return APSLogErrorAt();
  }
  return result;
}

uint64_t bufferedAudioEngine_createMessageBackingBBuf(CFAllocatorRef blockAllocator, size_t blockLength, CMBlockBufferRef *a3)
{
  CMBlockBufferRef blockBufferOut = 0;
  uint64_t v4 = CMBlockBufferCreateWithMemoryBlock(blockAllocator, 0, blockLength, blockAllocator, 0, 0, blockLength, 1u, &blockBufferOut);
  if (v4) {
    APSLogErrorAt();
  }
  else {
    *a3 = blockBufferOut;
  }
  return v4;
}

uint64_t bufferedAudioEngine_messageRingSetMessageSequenceNumberCallbackAPAP()
{
  return MEMORY[0x1F41072A8]();
}

uint64_t bufferedAudioEngine_messageRingSetMessageSequenceNumberCallbackRTP()
{
  return MEMORY[0x1F4107FD8]();
}

uint64_t bufferedAudioEngine_updateMaxAudioBurstIfNecessary(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = *(void *)(DerivedStorage + 928);
  if (result)
  {
    APSAudioFormatDescriptionGetSampleRate();
    APSAudioFormatDescriptionGetFramesPerPacket();
    uint64_t result = FigGetCFPreferenceNumberWithDefault();
    if (*(_DWORD *)(DerivedStorage + 24) != result)
    {
      *(_DWORD *)(DerivedStorage + 24) = result;
      if (gLogCategory_APAudioEngineBuffered <= 50)
      {
        if (gLogCategory_APAudioEngineBuffered != -1 || (uint64_t result = _LogCategory_Initialize(), result))
        {
          if (a1) {
            CMBaseObjectGetDerivedStorage();
          }
          APSAudioFormatDescriptionGetSampleRate();
          APSAudioFormatDescriptionGetFramesPerPacket();
          return LogPrintF();
        }
      }
    }
  }
  return result;
}

CMTime *bufferedAudioEngine_generateNewFirstRemoteMediaTime@<X0>(uint64_t a1@<X0>, CMTime *a2@<X8>)
{
  uint64_t v4 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&a2->CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  a2->CMTimeEpoch epoch = *(void *)(v4 + 16);
  if (bufferedAudioEngine_generateNewFirstRemoteMediaTime_onceToken != -1) {
    dispatch_once(&bufferedAudioEngine_generateNewFirstRemoteMediaTime_onceToken, &__block_literal_global_448);
  }
  int32_t SampleRateFromTransportAudioFormat = bufferedAudioEngine_getSampleRateFromTransportAudioFormat();
  if (bufferedAudioEngine_generateNewFirstRemoteMediaTime_prefsDeltaFromRolloverSecs)
  {
    if (bufferedAudioEngine_generateNewFirstRemoteMediaTime_prefsUseRandomizedOffset)
    {
      RandomBytes();
      float v6 = (double)bufferedAudioEngine_generateNewFirstRemoteMediaTime_prefsDeltaFromRolloverSecs * 0.5;
      float v7 = (float)(0u % bufferedAudioEngine_generateNewFirstRemoteMediaTime_prefsDeltaFromRolloverSecs) + v6;
    }
    else
    {
      float v7 = (float)bufferedAudioEngine_generateNewFirstRemoteMediaTime_prefsDeltaFromRolloverSecs;
    }
    uint64_t result = CMTimeMake(a2, 0xFFFFFFFFLL - (uint64_t)(float)(v7 * (float)SampleRateFromTransportAudioFormat), SampleRateFromTransportAudioFormat);
    if (gLogCategory_APAudioEngineBuffered <= 50)
    {
      if (gLogCategory_APAudioEngineBuffered != -1 || (uint64_t result = (CMTime *)_LogCategory_Initialize(), result))
      {
        if (a1) {
          CMBaseObjectGetDerivedStorage();
        }
        return (CMTime *)LogPrintF();
      }
    }
  }
  else
  {
    RandomBytes();
    return CMTimeMake(a2, 0, SampleRateFromTransportAudioFormat);
  }
  return result;
}

uint64_t bufferedAudioEngine_updateNextTranscodeBurstTimeAndUnRest(uint64_t a1, CMTime *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = (CMTime *)(DerivedStorage + 1036);
  CMTimeMake(&rhs, *(unsigned int *)(DerivedStorage + 152), 1000);
  CMTime v7 = *a2;
  CMTimeAdd(&v9, &v7, &rhs);
  *uint64_t v5 = v9;
  bufferedAudioEngine_setTranscodeIsRestingAndUpdateConsumer(a1, 0);
  return kdebug_trace();
}

uint64_t bufferedAudioEngine_readSoundCheck(uint64_t a1)
{
  CFPreferencesSynchronize(@"com.apple.mobileipod", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  uint64_t result = FigGetCFPreferenceBooleanWithDefault();
  gSoundCheckEnabled = result;
  if (gLogCategory_APAudioEngineBuffered <= 50)
  {
    if (gLogCategory_APAudioEngineBuffered != -1 || (uint64_t result = _LogCategory_Initialize(), result))
    {
      if (a1) {
        CMBaseObjectGetDerivedStorage();
      }
      return LogPrintF();
    }
  }
  return result;
}

uint64_t bufferedAudioEngine_soundCheckChanged(uint64_t a1, const void *a2)
{
  if (a2) {
    CFRetain(a2);
  }
  return APSPriorityDispatcherAsync();
}

uint64_t __bufferedAudioEngine_generateNewFirstRemoteMediaTime_block_invoke()
{
  bufferedAudioEngine_generateNewFirstRemoteMediaTime_prefsDeltaFromRolloverSecs = FigGetCFPreferenceNumberWithDefault();
  uint64_t result = FigGetCFPreferenceNumberWithDefault();
  bufferedAudioEngine_generateNewFirstRemoteMediaTime_prefsUseRandomizedOffset = result;
  return result;
}

void __bufferedAudioEngine_soundCheckChanged_block_invoke(uint64_t a1)
{
  bufferedAudioEngine_readSoundCheck(*(void *)(a1 + 32));
  if (APSSettingsIsFeatureEnabled())
  {
    if (gSoundCheckEnabled) {
      int v2 = (void *)MEMORY[0x1E4F1CFD0];
    }
    else {
      int v2 = (void *)MEMORY[0x1E4F1CFC8];
    }
    uint64_t CMBaseObject = APAudioHoseManagerBufferedGetCMBaseObject(*(void *)(*(void *)(a1 + 40) + 1680));
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v20 = *(void (**)(uint64_t, __CFString *, void))(v5 + 56);
    if (v20) {
      v20(CMBaseObject, @"LoudnessNormalization", *v2);
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    CFTypeRef cf = 0;
    if (*(unsigned char *)(DerivedStorage + 520))
    {
      uint64_t v8 = *(uint64_t **)(DerivedStorage + 584);
      if (v8)
      {
        uint64_t v9 = *MEMORY[0x1E4F213E0];
        do
        {
          uint64_t v10 = v8[2];
          uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v11) {
            uint64_t v12 = v11;
          }
          else {
            uint64_t v12 = 0;
          }
          CFTypeRef v13 = *(void (**)(uint64_t, uint64_t, void, CFTypeRef *))(v12 + 48);
          if (v13) {
            v13(v10, v9, 0, &cf);
          }
          CFTypeRef v14 = cf;
          if (!*((unsigned char *)v8 + 24) && cf)
          {
            if (gLogCategory_APAudioEngineBuffered <= 50
              && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
            {
              if (v6) {
                CMBaseObjectGetDerivedStorage();
              }
              LogPrintF();
            }
            uint64_t v15 = v8[2];
            uint64_t v16 = gSoundCheckEnabled;
            APSEndpointStreamAudioHoseProtocolGetProtocolID();
            uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
            if (ProtocolVTable)
            {
              uint64_t v18 = *(void *)(ProtocolVTable + 16);
              if (v18)
              {
                CFTypeRef v19 = *(void (**)(uint64_t, uint64_t))(v18 + 112);
                if (v19) {
                  v19(v15, v16);
                }
              }
            }
            CFTypeRef v14 = cf;
          }
          if (v14)
          {
            CFRelease(v14);
            CFTypeRef cf = 0;
          }
          uint64_t v8 = (uint64_t *)*v8;
        }
        while (v8);
      }
    }
  }
  uint64_t v21 = *(const void **)(a1 + 32);
  if (v21) {
    CFRelease(v21);
  }
}

void bufferedAudioEngine_weakAudioTimer()
{
  uint64_t v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    uint64_t v1 = (const void *)v0;
    bufferedAudioEngine_audioTimer(v0);
    CFRelease(v1);
  }
}

void bufferedAudioEngine_weakPriorityTimer()
{
  uint64_t v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    uint64_t v1 = (const void *)v0;
    bufferedAudioEngine_updateDataProcessingTargetQueueInternal(v0);
    CFRelease(v1);
  }
}

void bufferedAudioEngine_audioTimer(uint64_t a1)
{
  uint64_t v214 = *MEMORY[0x1E4F143B8];
  TotalByteCFIndex Count = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_OWORD *)&v199.CMTimeValue value = *MEMORY[0x1E4F1FA48];
  CMTimeEpoch v3 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  v199.CMTimeEpoch epoch = v3;
  *(_OWORD *)&v198.CMTimeValue value = *(_OWORD *)&v199.value;
  v198.CMTimeEpoch epoch = v3;
  *(_OWORD *)&v197.CMTimeValue value = *(_OWORD *)&v199.value;
  v197.CMTimeEpoch epoch = v3;
  *(_OWORD *)&v196.CMTimeValue value = *(_OWORD *)&v199.value;
  v196.CMTimeEpoch epoch = v3;
  *(_OWORD *)&v195.CMTimeValue value = *(_OWORD *)&v199.value;
  v195.CMTimeEpoch epoch = v3;
  *(_OWORD *)allocator = *(_OWORD *)&v199.value;
  *(_OWORD *)&v194.CMTimeValue value = *(_OWORD *)&v199.value;
  v194.CMTimeEpoch epoch = v3;
  uint64_t v4 = mach_absolute_time();
  uint64_t v5 = MillisecondsToUpTicks();
  BOOL v193 = 0;
  memset(&v192, 0, sizeof(v192));
  int32_t v6 = *(_DWORD *)(DerivedStorage + 16);
  CMTime time = *(CMTime *)(DerivedStorage + 28);
  CMTimeMultiplyByRatio(&v192, &time, v6, 1000);
  unsigned int v191 = 0;
  *(_OWORD *)&v181.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&v190.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  v181.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  v190.CMTimeEpoch epoch = v181.epoch;
  int v189 = 0;
  uint64_t v180 = DerivedStorage;
  if (gLogCategory_APAudioEngineBuffered <= 10
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
    {
      uint64_t v7 = a1;
      CMBaseObjectGetDerivedStorage();
    }
    else
    {
      uint64_t v7 = 0;
    }
    bufferedAudioEngine_playbackStateGetCString(*(_DWORD *)(DerivedStorage + 804));
    LogPrintF();
    a1 = v7;
  }
  APSNetworkClockLogCurrentNetworkTime();
  if (*(unsigned char *)DerivedStorage || !*(unsigned char *)(DerivedStorage + 480)) {
    return;
  }
  uint64_t v172 = v5;
  key = (char *)v4;
  CMBaseObjectGetDerivedStorage();
  uint64_t v8 = CMBaseObjectGetDerivedStorage();
  CMTime time = v181;
  CMTime v210 = v181;
  CMTime v209 = *(CMTime *)*(void *)&MEMORY[0x1E4F4A160];
  CFTypeRef cf = 0;
  CFTypeRef v203 = 0;
  int v202 = 0;
  uint64_t v183 = a1;
  if (!*(unsigned char *)v8)
  {
    uint64_t v9 = v8;
    CMClockGetTime(&time, *(CMClockRef *)(v8 + 448));
    HostTimeClock = CMClockGetHostTimeClock();
    CMClockGetTime(&v210, HostTimeClock);
    uint64_t v11 = *(void *)(v9 + 328);
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    CFTypeRef v14 = *(void (**)(uint64_t, CMTime *))(v13 + 8);
    if (v14) {
      v14(v11, &v209);
    }
    uint64_t v15 = (_OWORD *)(v9 + 1448);
    CMTime time1 = time;
    CMTime time2 = *(CMTime *)(v9 + 1448);
    int32_t v16 = CMTimeCompare(&time1, &time2);
    CFTypeRef v17 = (_OWORD *)(v9 + 1472);
    if (v16)
    {
      *CFTypeRef v17 = *(_OWORD *)&v181.value;
      *(void *)(v9 + 1488) = v181.epoch;
      memset(&time1, 0, sizeof(time1));
      CMTime time2 = v210;
      CMTime rhs = *(CMTime *)(v9 + 1496);
      CMTimeSubtract(&time1, &time2, &rhs);
      CMTimeMake(&time2, 1, 1);
      CMTime rhs = time1;
      if (CMTimeCompare(&rhs, &time2) > 0) {
        goto LABEL_59;
      }
      memset(&rhs, 0, sizeof(rhs));
      CMTime lhs = time;
      *(_OWORD *)&v211.CMTimeValue value = *v15;
      v211.CMTimeEpoch epoch = *(void *)(v9 + 1464);
      CMTimeSubtract(&v205, &lhs, &v211);
      CMTimeAbsoluteValue(&rhs, &v205);
      CMTimeMake(&lhs, 2, 1);
      CMTime v211 = rhs;
      if (CMTimeCompare(&v211, &lhs) < 0) {
        goto LABEL_59;
      }
      BOOL v18 = 0;
    }
    else if (*(unsigned char *)(v9 + 1484))
    {
      memset(&time1, 0, sizeof(time1));
      CMTime time2 = v210;
      *(_OWORD *)&rhs.CMTimeValue value = *v17;
      rhs.CMTimeEpoch epoch = *(void *)(v9 + 1488);
      CMTimeSubtract(&time1, &time2, &rhs);
      CMTimeMake(&time2, 5, 1);
      CMTime rhs = time1;
      BOOL v18 = CMTimeCompare(&rhs, &time2) >= 0;
    }
    else
    {
      BOOL v18 = 0;
      *CFTypeRef v17 = *(_OWORD *)&v210.value;
      *(void *)(v9 + 1488) = v210.epoch;
    }
    CMTime time1 = v210;
    CMTime rhs = *(CMTime *)(v9 + 1520);
    if (CMTimeCompare(&time1, &rhs) < 0) {
      goto LABEL_59;
    }
    CMTimeMake(&rhs, 10, 1);
    CMTime v211 = v210;
    CMTimeAdd(&time1, &v211, &rhs);
    *(CMTime *)(v9 + 1520) = time1;
    if (gLogCategory_APAudioEngineBuffered <= 90
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1) {
        CMBaseObjectGetDerivedStorage();
      }
      *(_OWORD *)&time1.CMTimeValue value = *v15;
      time1.CMTimeEpoch epoch = *(void *)(v9 + 1464);
      CMTimeGetSeconds(&time1);
      CMTime time1 = time;
      CMTimeGetSeconds(&time1);
      LogPrintF();
    }
    CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t CMBaseObject = APSNetworkClockGetCMBaseObject();
    uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v21) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = 0;
    }
    int v23 = *(void (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v22 + 48);
    if (v23) {
      v23(CMBaseObject, *MEMORY[0x1E4F4A120], v19, &cf);
    }
    if (gLogCategory_APAudioEngineBuffered <= 90
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1) {
        CMBaseObjectGetDerivedStorage();
      }
      LogPrintF();
      if (!v18) {
        goto LABEL_59;
      }
    }
    else if (!v18)
    {
      goto LABEL_59;
    }
    double v24 = (CMTime *)(v9 + 1544);
    CMTime time1 = v210;
    CMTime v211 = *(CMTime *)(v9 + 1544);
    if (CMTimeCompare(&time1, &v211) < 0)
    {
LABEL_59:
      CFMutableStringRef v26 = 0;
      int v27 = 0;
LABEL_60:
      *uint64_t v15 = *(_OWORD *)&time.value;
      *(void *)(v9 + 1464) = time.epoch;
      *(CMTime *)(v9 + 1496) = v210;
      *(CMTime *)(v9 + 1424) = v209;
      goto LABEL_61;
    }
    CFMutableStringRef Mutable = CFStringCreateMutable(v19, 0);
    if (!Mutable) {
      goto LABEL_65;
    }
    CFMutableStringRef v26 = Mutable;
    int v202 = CFStringAppendF();
    if (v202) {
      goto LABEL_529;
    }
    int v202 = CFStringAppendF();
    if (v202) {
      goto LABEL_529;
    }
    CMTime time1 = time;
    CMTimeGetSeconds(&time1);
    *(_OWORD *)&time1.CMTimeValue value = *v15;
    time1.CMTimeEpoch epoch = *(void *)(v9 + 1464);
    CMTimeGetSeconds(&time1);
    int v202 = CFStringAppendF();
    if (v202) {
      goto LABEL_529;
    }
    CMTime time1 = v210;
    CMTimeGetSeconds(&time1);
    CMTime time1 = *(CMTime *)(v9 + 1496);
    CMTimeGetSeconds(&time1);
    int v202 = CFStringAppendF();
    if (v202 || (int v202 = CFStringAppendF()) != 0 || (int v202 = CFStringAppendF()) != 0 || (int v202 = CFStringAppendF()) != 0)
    {
LABEL_529:
      APSLogErrorAt();
      int v27 = 0;
LABEL_62:
      CFRelease(v26);
LABEL_63:
      if (v27) {
        CFRelease(v27);
      }
      goto LABEL_65;
    }
    if (!APSSettingsIsFeatureEnabled())
    {
      v82 = (void *)(v9 + 584);
      while (1)
      {
        v82 = (void *)*v82;
        if (!v82) {
          break;
        }
        int v202 = CFStringAppendF();
        if (v202)
        {
          APSLogErrorAt();
          int v27 = 0;
          goto LABEL_203;
        }
      }
    }
    int v27 = (const void *)CFStringCreateF();
    if (v202)
    {
      APSLogErrorAt();
LABEL_203:
      a1 = v183;
    }
    else
    {
      a1 = v183;
      if (!*(void *)(v9 + 536)) {
        goto LABEL_428;
      }
      uint64_t v28 = FigEndpointStreamGetCMBaseObject();
      uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v29) {
        uint64_t v30 = v29;
      }
      else {
        uint64_t v30 = 0;
      }
      v151 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v30 + 48);
      if (v151)
      {
        int v202 = v151(v28, @"EndpointIDs", v19, &v203);
        double v24 = (CMTime *)(v9 + 1544);
        if (!v202)
        {
LABEL_428:
          if (gLogCategory_APAudioEngineBuffered <= 50
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (v183) {
              CMBaseObjectGetDerivedStorage();
            }
            LogPrintF();
          }
          APSTapToRadarInvoke();
          CMTimeMake(&v211, 300, 1);
          CMTime v201 = v210;
          CMTimeAdd(&time1, &v201, &v211);
          *double v24 = time1;
          goto LABEL_60;
        }
      }
      else
      {
        int v202 = -12782;
      }
      APSLogErrorAt();
    }
LABEL_61:
    if (!v26) {
      goto LABEL_63;
    }
    goto LABEL_62;
  }
LABEL_65:
  if (cf) {
    CFRelease(cf);
  }
  if (v203) {
    CFRelease(v203);
  }
  bufferedAudioEngine_updatePrerollingState(a1);
  CMTime v31 = &unk_1EB9F5000;
  if (*(_DWORD *)(DerivedStorage + 804) != 1937011316) {
    goto LABEL_151;
  }
  LODWORD(cf) = 0;
  uint64_t v32 = CMBaseObjectGetDerivedStorage();
  LOWORD(v202) = 0;
  CMTime time2 = v181;
  CMTime rhs = v181;
  CMTime v205 = v181;
  LODWORD(v203) = 0;
  if (bufferedAudioEngine_pruneMessageRingToCurrentRemoteMediaTimeWithForwardMargin_onceToken != -1) {
    dispatch_once(&bufferedAudioEngine_pruneMessageRingToCurrentRemoteMediaTimeWithForwardMargin_onceToken, &__block_literal_global_491);
  }
  if (!*(unsigned char *)v32)
  {
    bufferedAudioEngine_getCurrentRemoteMediaTimeInternal((int *)&cf, &time);
    CMTimeValue value = time.value;
    v211.CMTimeValue value = *(void *)&time.flags;
    CMTimeScale timescale = time.timescale;
    v211.CMTimeScale timescale = HIDWORD(time.epoch);
    if (cf) {
      goto LABEL_505;
    }
    if (APSSettingsIsFeatureEnabled())
    {
      CMTimeMake(&time2, bufferedAudioEngine_pruneMessageRingToCurrentRemoteMediaTimeWithForwardMargin_defaultForwardPruningMarginMs, 1000);
      time.CMTimeValue value = value;
      *(void *)&time.CMTimeFlags flags = v211.value;
      time.CMTimeScale timescale = timescale;
      HIDWORD(time.epoch) = v211.timescale;
      CMTime v210 = time2;
      CMTimeAdd(&rhs, &time, &v210);
    }
    else
    {
      CMTimeMake(&time, 1000, 1000);
      CMTime time2 = time;
      v210.CMTimeValue value = value;
      *(void *)&v210.CMTimeFlags flags = v211.value;
      v210.CMTimeScale timescale = timescale;
      HIDWORD(v210.epoch) = v211.timescale;
      CMTime v209 = time;
      CMTimeSubtract(&time, &v210, &v209);
      CMTime rhs = time;
      *(_OWORD *)&v210.CMTimeValue value = *(_OWORD *)allocator;
      v210.CMTimeEpoch epoch = v3;
      if (CMTimeCompare(&time, &v210) <= 0)
      {
        APSLogErrorAt();
        if (gLogCategory_APAudioEngineBuffered <= 90
          && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
        {
          if (a1) {
            CMBaseObjectGetDerivedStorage();
          }
          time.CMTimeValue value = value;
          *(void *)&time.CMTimeFlags flags = v211.value;
          time.CMTimeScale timescale = timescale;
          HIDWORD(time.epoch) = v211.timescale;
          CMTimeGetSeconds(&time);
          CMTime time = time2;
          CMTimeGetSeconds(&time);
          LogPrintF();
        }
        TotalByteCFIndex Count = -15481;
        goto LABEL_185;
      }
    }
    uint64_t v35 = *(void *)(v32 + 560);
    CMTime time = rhs;
    LODWORD(cf) = APMessageRingBufferedPruneMessagesUntilTimestamp(v35, (uint64_t)&time, &v202);
    if (cf)
    {
LABEL_505:
      APSLogErrorAt();
    }
    else
    {
      APMessageRingBufferedGetMessageAtIndex(*(void *)(v32 + 560), (unsigned __int16)v202, &v203, (uint64_t)&v205, 0);
      if (APSSettingsIsFeatureEnabled())
      {
        UInt16 = (const void *)FigCFNumberCreateUInt16();
        uint64_t v37 = APAudioHoseManagerBufferedGetCMBaseObject(*(void *)(v32 + 1680));
        uint64_t v38 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v38) {
          uint64_t v39 = v38;
        }
        else {
          uint64_t v39 = 0;
        }
        CFDataRef v53 = *(uint64_t (**)(uint64_t, __CFString *, const void *))(v39 + 56);
        if (v53) {
          int v54 = v53(v37, @"NextValidReadIdx", UInt16);
        }
        else {
          int v54 = -12782;
        }
        LODWORD(cf) = v54;
        if (!UInt16) {
          goto LABEL_140;
        }
        CFRelease(UInt16);
      }
      else
      {
        CMTimeValue v168 = value;
        CMTimeScale v169 = timescale;
        uint64_t v40 = *(void *)(v32 + 584);
        if (v40)
        {
          CMTimeFlags v170 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 12);
          CMTimeEpoch v167 = v3;
          do
          {
            uint64_t v41 = CMBaseObjectGetDerivedStorage();
            LODWORD(v201.value) = 0;
            CMTime time = v181;
            *(_OWORD *)&v210.CMTimeValue value = *(_OWORD *)allocator;
            v210.CMTimeEpoch epoch = v3;
            if (*(void *)(v41 + 1176))
            {
              if (*(unsigned char *)(v40 + 25))
              {
                bufferedAudioEngine_getLastDeliveredRemoteMediaTimeForHose(v40, (__n128 *)&v209);
                lhs.CMTimeValue value = v209.value;
                CMTimeFlags flags = v209.flags;
                lhs.CMTimeScale timescale = v209.timescale;
                CMTimeEpoch epoch = v209.epoch;
              }
              else
              {
                lhs.CMTimeValue value = *(void *)(v40 + 32);
                CMTimeFlags flags = *(_DWORD *)(v40 + 44);
                lhs.CMTimeScale timescale = *(_DWORD *)(v40 + 40);
                CMTimeEpoch epoch = *(void *)(v40 + 48);
              }
              bufferedAudioEngine_getCurrentRemoteMediaTimeInternal((int *)&v201, &time);
              if (LODWORD(v201.value))
              {
                APSLogErrorAt();
              }
              else
              {
                if (!*(unsigned char *)(v40 + 25))
                {
                  v209.CMTimeValue value = lhs.value;
                  v209.CMTimeScale timescale = lhs.timescale;
                  v209.CMTimeFlags flags = flags;
                  v209.CMTimeEpoch epoch = epoch;
                  CMTime time1 = time;
                  if (CMTimeCompare(&v209, &time1) < 0)
                  {
                    lhs.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
                    lhs.CMTimeScale timescale = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
                    CMTimeFlags flags = v170;
                    CMTimeEpoch epoch = v181.epoch;
                  }
                }
                int v44 = v31[560];
                if (v44 <= 10 && (v44 != -1 || _LogCategory_Initialize()))
                {
                  if (a1)
                  {
                    uint64_t v45 = a1;
                    CMBaseObjectGetDerivedStorage();
                  }
                  else
                  {
                    uint64_t v45 = 0;
                  }
                  v209.CMTimeValue value = lhs.value;
                  v209.CMTimeScale timescale = lhs.timescale;
                  v209.CMTimeFlags flags = flags;
                  v209.CMTimeEpoch epoch = epoch;
                  CMTimeGetSeconds(&v209);
                  CMTime v209 = *(CMTime *)(v40 + 368);
                  CMTimeGetSeconds(&v209);
                  CMTime v209 = time;
                  CMTimeGetSeconds(&v209);
                  LogPrintF();
                  a1 = v45;
                }
                uint64_t v46 = (_OWORD *)(v40 + 368);
                int v47 = *(_DWORD *)(v40 + 380);
                if (flags)
                {
                  if (v47)
                  {
                    CMTime v209 = time;
                    *(_OWORD *)&time1.CMTimeValue value = *v46;
                    time1.CMTimeEpoch epoch = *(void *)(v40 + 384);
                    CMTimeSubtract(&v210, &v209, &time1);
                    int v50 = v31[560];
                    if (v50 <= 50 && (v50 != -1 || _LogCategory_Initialize()))
                    {
                      if (a1)
                      {
                        uint64_t v51 = a1;
                        CMBaseObjectGetDerivedStorage();
                      }
                      else
                      {
                        uint64_t v51 = 0;
                      }
                      v209.CMTimeValue value = lhs.value;
                      v209.CMTimeScale timescale = lhs.timescale;
                      v209.CMTimeFlags flags = flags;
                      v209.CMTimeEpoch epoch = epoch;
                      CMTimeGetSeconds(&v209);
                      CMTime v209 = v210;
                      CMTimeGetSeconds(&v209);
                      LogPrintF();
                      a1 = v51;
                      CMTime v31 = &unk_1EB9F5000;
                    }
                    CMTime v209 = v210;
                    bufferedAudioEngine_updateRTCUnderrunStatisticsForHose(a1, v40, &v209);
                    *uint64_t v46 = *(_OWORD *)&v181.value;
                    *(void *)(v40 + 384) = v181.epoch;
                  }
                }
                else if ((v47 & 1) == 0 && *(_DWORD *)(v40 + 140) == 3)
                {
                  *uint64_t v46 = *(_OWORD *)&time.value;
                  *(void *)(v40 + 384) = time.epoch;
                  ++*(_DWORD *)(v40 + 392);
                  int v48 = v31[560];
                  if (v48 <= 50 && (v48 != -1 || _LogCategory_Initialize()))
                  {
                    if (a1)
                    {
                      uint64_t v49 = a1;
                      CMBaseObjectGetDerivedStorage();
                    }
                    else
                    {
                      uint64_t v49 = 0;
                    }
                    *(_OWORD *)&v209.CMTimeValue value = *v46;
                    v209.CMTimeEpoch epoch = *(void *)(v40 + 384);
                    CMTimeGetSeconds(&v209);
                    LogPrintF();
                    a1 = v49;
                  }
                }
              }
            }
            uint64_t DerivedStorage = v180;
            if (((*(unsigned __int16 *)(v40 + 26) - (unsigned __int16)v202) & 0x8000) != 0)
            {
              int v52 = v31[560];
              if (v52 <= 50 && (v52 != -1 || _LogCategory_Initialize()))
              {
                if (a1) {
                  CMBaseObjectGetDerivedStorage();
                }
                time.CMTimeValue value = v168;
                time.CMTimeScale timescale = v169;
                *(void *)&time.CMTimeFlags flags = v211.value;
                HIDWORD(time.epoch) = v211.timescale;
                CMTimeGetSeconds(&time);
                CMTime time = v205;
                CMTimeGetSeconds(&time);
                LogPrintF();
                uint64_t DerivedStorage = v180;
                CMTime v31 = (_DWORD *)&unk_1EB9F5000;
                CMTimeEpoch v3 = v167;
              }
              *(_WORD *)(v40 + 26) = v202;
              if (APSSettingsIsFeatureEnabled()) {
                *(_WORD *)(v40 + 56) = 256;
              }
            }
            uint64_t v40 = *(void *)v40;
          }
          while (v40);
        }
      }
    }
  }
  int v54 = (int)cf;
LABEL_140:
  TotalByteCFIndex Count = v54;
  if (v54) {
    goto LABEL_185;
  }
  if (APSSettingsIsFeatureEnabled())
  {
    unsigned int Index = APMessageRingBufferedGetFirstValidReadIndex(*(void *)(DerivedStorage + 560), 0);
    APMessageRingBufferedGetMessageAtIndex(*(void *)(DerivedStorage + 560), Index, 0, (uint64_t)&v190, 0);
    if ((v190.flags & 1) == 0) {
      goto LABEL_151;
    }
    uint64_t v56 = *(void *)(DerivedStorage + 1680);
    CMTime v210 = v190;
    uint64_t v57 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v57) {
      uint64_t v58 = v57;
    }
    else {
      uint64_t v58 = 0;
    }
    uint64_t v59 = *(uint64_t (**)(uint64_t, CMTime *))(v58 + 112);
    if (v59)
    {
      CMTime time = v210;
      TotalByteCFIndex Count = v59(v56, &time);
      if (!TotalByteCount) {
        goto LABEL_151;
      }
    }
    else
    {
      TotalByteCFIndex Count = -12782;
    }
LABEL_185:
    APSLogErrorAt();
    return;
  }
  TotalByteCFIndex Count = bufferedAudioEngine_releaseCryptors(a1, 1);
  if (TotalByteCount) {
    goto LABEL_185;
  }
  TotalByteCFIndex Count = bufferedAudioEngine_releaseMagicCookies(a1, 1);
  if (TotalByteCount) {
    goto LABEL_185;
  }
LABEL_151:
  bufferedAudioEngine_getCurrentRemoteMediaTimeInternal(&TotalByteCount, &v197);
  if (TotalByteCount) {
    goto LABEL_185;
  }
  uint64_t v60 = CMBaseObjectGetDerivedStorage();
  CMTime time = *(CMTime *)(v60 + 624);
  *(_OWORD *)&v210.CMTimeValue value = *(_OWORD *)allocator;
  v210.CMTimeEpoch epoch = v3;
  *(_OWORD *)&time1.CMTimeValue value = *(_OWORD *)allocator;
  time1.CMTimeEpoch epoch = v3;
  *(_OWORD *)&time2.CMTimeValue value = *(_OWORD *)allocator;
  time2.CMTimeEpoch epoch = v3;
  *(_OWORD *)&rhs.CMTimeValue value = *(_OWORD *)allocator;
  rhs.CMTimeEpoch epoch = v3;
  if (*(unsigned char *)v60) {
    goto LABEL_187;
  }
  uint64_t v61 = v60;
  uint64_t v62 = (CMTime *)(v60 + 724);
  if ((*(_DWORD *)(v60 + 736) & 1) == 0) {
    uint64_t v62 = (CMTime *)(v60 + 700);
  }
  CMTime v209 = *v62;
  bufferedAudioEngine_getCurrentRemoteMediaTimeInternal(0, &v210);
  if (APSSettingsIsFeatureEnabled())
  {
    uint64_t v63 = *(void *)(v61 + 1680);
    uint64_t v64 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v64) {
      uint64_t v65 = v64;
    }
    else {
      uint64_t v65 = 0;
    }
    CFTypeRef v67 = *(void (**)(uint64_t, CMTime *, CMTime *))(v65 + 56);
    if (v67) {
      v67(v63, &rhs, &time2);
    }
    goto LABEL_173;
  }
  int v66 = *(_DWORD *)(v61 + 592);
  if (v66 == 1)
  {
    uint64_t v68 = *(void *)(v61 + 584);
    if (!v68) {
      goto LABEL_173;
    }
    if (*(unsigned char *)(v68 + 24))
    {
      CMTimeMake(&rhs, 18, 1);
      CMTime time2 = *(CMTime *)(*(void *)(v61 + 584) + 88);
      goto LABEL_173;
    }
LABEL_168:
    CMTimeMake(&rhs, 125, 1);
    CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10];
    for (i = *(uint64_t **)(v61 + 584); i; i = (uint64_t *)*i)
    {
      if (!*((unsigned char *)i + 24))
      {
        CMTime v205 = *(CMTime *)(i + 11);
        CMTime lhs = time2;
        if (CMTimeCompare(&v205, &lhs) < 0) {
          CMTime time2 = *(CMTime *)(i + 11);
        }
      }
    }
    goto LABEL_173;
  }
  if (v66)
  {
    if (!*(void *)(v61 + 584)) {
      goto LABEL_173;
    }
    goto LABEL_168;
  }
  CMTimeMake(&rhs, 18, 1);
  *(_OWORD *)&time2.CMTimeValue value = *(_OWORD *)allocator;
  time2.CMTimeEpoch epoch = v3;
LABEL_173:
  v70 = (_OWORD *)(v61 + 624);
  *(CMTime *)(v61 + 600) = rhs;
  CMTime v205 = time2;
  CMTime lhs = *(CMTime *)(v61 + 88);
  CMTimeAdd(&time1, &v205, &lhs);
  CMTime v205 = time1;
  CMTime lhs = *(CMTime *)(v61 + 64);
  if (CMTimeCompare(&v205, &lhs) < 0 || (v205 = v210, CMTime lhs = v209, CMTimeCompare(&v205, &lhs) <= 0))
  {
    _OWORD *v70 = *(_OWORD *)(v61 + 64);
    CMTimeEpoch v71 = *(void *)(v61 + 80);
  }
  else
  {
    _OWORD *v70 = *(_OWORD *)&time1.value;
    CMTimeEpoch v71 = time1.epoch;
  }
  *(void *)(v61 + 640) = v71;
  CMTime v205 = time;
  *(_OWORD *)&lhs.CMTimeValue value = *v70;
  lhs.CMTimeEpoch epoch = *(void *)(v61 + 640);
  if (CMTimeCompare(&v205, &lhs))
  {
    int v72 = v31[560];
    if (v72 <= 30 && (v72 != -1 || _LogCategory_Initialize()))
    {
      if (v183) {
        CMBaseObjectGetDerivedStorage();
      }
      CMTime v205 = *(CMTime *)(v61 + 600);
      CMTimeGetSeconds(&v205);
      *(_OWORD *)&v205.CMTimeValue value = *v70;
      v205.CMTimeEpoch epoch = *(void *)(v61 + 640);
      CMTimeGetSeconds(&v205);
      LogPrintF();
    }
  }
LABEL_187:
  uint64_t v73 = v180;
  CMTime time = v197;
  CMTime v210 = *(CMTime *)(v180 + 624);
  CMTimeAdd(&v196, &time, &v210);
  v74 = (_OWORD *)(v180 + 676);
  CMTime v198 = *(CMTime *)(v180 + 676);
  CMTime time = v197;
  CMTime v210 = *(CMTime *)(v180 + 600);
  CMTimeAdd(&v195, &time, &v210);
  v75 = (CMTime *)(v180 + 724);
  if ((*(_DWORD *)(v180 + 736) & 1) == 0) {
    v75 = (CMTime *)(v180 + 700);
  }
  CMTime v194 = *v75;
  CMTime time = v197;
  CMTime v210 = v194;
  int32_t v171 = CMTimeCompare(&time, &v210);
  TotalByteCFIndex Count = APMessageRingBufferedGetTotalByteCount(*(void *)(v180 + 560), (int *)&v191);
  if (TotalByteCount) {
    goto LABEL_185;
  }
  int v76 = (const void *)v183;
  uint64_t v77 = CMBaseObjectGetDerivedStorage();
  BOOL started = bufferedAudioEngine_engineBufferedToStartWaterMark();
  uint64_t v79 = mach_absolute_time();
  uint64_t v80 = v79;
  if (!started
    || *(unsigned char *)(v77 + 1032) && v79 > *(void *)(v77 + 1064) && !bufferedAudioEngine_shouldSkipTranscodeForStartup())
  {
    if (*(unsigned char *)(v77 + 1032))
    {
      int v81 = v31[560];
      if (v81 <= 50 && (v81 != -1 || _LogCategory_Initialize()))
      {
        if (v183) {
          CMBaseObjectGetDerivedStorage();
        }
        CMTime time = *(CMTime *)(v77 + 676);
        CMTimeGetSeconds(&time);
        CMTime time = *(CMTime *)(v77 + 1036);
        CMTimeGetSeconds(&time);
        CMTime time = v197;
        CMTimeGetSeconds(&time);
        UpTicksPerSecond();
        UpTicksPerSecond();
        LogPrintF();
        uint64_t v73 = v180;
      }
    }
    *(void *)(v77 + 1072) = v80;
    bufferedAudioEngine_setTranscodeIsRestingAndUpdateConsumer(v183, 0);
    kdebug_trace();
  }
  if (*(unsigned char *)(v73 + 1032)
    || (*(_OWORD *)&time.CMTimeValue value = *v74, time.epoch = *(void *)(v180 + 692),
                                       CMTime v210 = v195,
                                       CMTimeCompare(&time, &v210) > 0))
  {
    int v179 = 0;
  }
  else
  {
    int v179 = 0;
    unsigned int v87 = 0;
    do
    {
      if (mach_absolute_time() >= (unint64_t)&key[v172]) {
        break;
      }
      if (v87 >= *(_DWORD *)(v73 + 24)) {
        break;
      }
      *(_OWORD *)&time.CMTimeValue value = *v74;
      time.CMTimeEpoch epoch = *(void *)(v180 + 692);
      CMTime v210 = v196;
      if ((CMTimeCompare(&time, &v210) & 0x80000000) == 0)
      {
        CMTime time = v199;
        CMTime v210 = v192;
        if ((CMTimeCompare(&time, &v210) & 0x80000000) == 0 || v171 < 1) {
          break;
        }
      }
      if (v191 >= *(_DWORD *)(v73 + 648)) {
        break;
      }
      TotalByteCFIndex Count = bufferedAudioEngine_prepareOneMessageForSending(v76, 0, &v193);
      if (!v193) {
        break;
      }
      *(_OWORD *)&time.CMTimeValue value = *v74;
      time.CMTimeEpoch epoch = *(void *)(v180 + 692);
      CMTime v210 = v198;
      CMTimeSubtract(&v199, &time, &v210);
      TotalByteCFIndex Count = APMessageRingBufferedGetTotalByteCount(*(void *)(v73 + 560), (int *)&v191);
      if (TotalByteCount) {
        goto LABEL_185;
      }
      uint64_t v88 = CMBaseObjectGetDerivedStorage();
      *(_OWORD *)&time.CMTimeValue value = *(_OWORD *)allocator;
      time.CMTimeEpoch epoch = v3;
      LODWORD(time2.value) = 0;
      if (*(_DWORD *)(v88 + 148)
        && (uint64_t v89 = v88,
            v90 = (CMTime *)(v88 + 676),
            uint64_t v91 = (CMTime *)(v88 + 1036),
            CMTime v210 = *(CMTime *)(v88 + 676),
            CMTime v209 = *(CMTime *)(v88 + 1036),
            CMTimeCompare(&v210, &v209) >= 1)
        && bufferedAudioEngine_engineBufferedToStartWaterMark())
      {
        uint64_t v92 = mach_absolute_time();
        bufferedAudioEngine_getCurrentRemoteMediaTimeInternal((int *)&time2, &time);
        if (LODWORD(time2.value))
        {
          APSLogErrorAt();
          CMTime v31 = &unk_1EB9F5000;
          uint64_t v73 = v180;
          if (gLogCategory_APAudioEngineBuffered <= 50
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (v76) {
              CMBaseObjectGetDerivedStorage();
            }
            int v76 = (const void *)v183;
            LogPrintF();
            uint64_t v73 = v180;
          }
        }
        else
        {
          unint64_t v93 = v92 - *(void *)(v89 + 1072);
          if (v93 > MillisecondsToUpTicks()) {
            unint64_t v93 = MillisecondsToUpTicks();
          }
          *(void *)(v89 + 1064) = v92 - v93 + MillisecondsToUpTicks();
          CMTimeMake(&v209, *(unsigned int *)(v89 + 152), 1000);
          CMTime time1 = *v90;
          CMTimeAdd(&v210, &time1, &v209);
          *uint64_t v91 = v210;
          if (!*(unsigned char *)(v89 + 1032)
            && gLogCategory_APAudioEngineBuffered <= 50
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (v76) {
              CMBaseObjectGetDerivedStorage();
            }
            UpTicksPerSecond();
            UpTicksPerSecond();
            CMTime v210 = *v90;
            CMTimeGetSeconds(&v210);
            CMTime v210 = *v91;
            CMTimeGetSeconds(&v210);
            CMTime v210 = time;
            CMTimeGetSeconds(&v210);
            LogPrintF();
          }
          bufferedAudioEngine_setTranscodeIsRestingAndUpdateConsumer((uint64_t)v76, 1);
          kdebug_trace();
          uint64_t v73 = v180;
          CMTime v31 = (_DWORD *)&unk_1EB9F5000;
        }
      }
      else
      {
        uint64_t v73 = v180;
        if (bufferedAudioEngine_shouldSkipTranscodeForStartup())
        {
          int v94 = v31[560];
          if (v94 <= 50 && (v94 != -1 || _LogCategory_Initialize()))
          {
            if (v76) {
              CMBaseObjectGetDerivedStorage();
            }
            LogPrintF();
          }
          bufferedAudioEngine_setTranscodeIsRestingAndUpdateConsumer((uint64_t)v76, 1);
        }
      }
      if (*(unsigned char *)(v73 + 1032))
      {
        int v179 = 1;
        break;
      }
      ++v87;
      *(_OWORD *)&time.CMTimeValue value = *v74;
      time.CMTimeEpoch epoch = *(void *)(v180 + 692);
      CMTime v210 = v195;
      int v179 = 1;
    }
    while (CMTimeCompare(&time, &v210) < 1);
  }
  mach_absolute_time();
  unint64_t v83 = UpTicksToSeconds() / (unint64_t)*(unsigned int *)(v73 + 112);
  if (*(_DWORD *)(v73 + 788) != v83)
  {
    *(_DWORD *)(v73 + 788) = v83;
    int32_t SampleRateFromTransportAudioFormat = bufferedAudioEngine_getSampleRateFromTransportAudioFormat();
    int v85 = v31[560];
    if (v85 <= 50)
    {
      int32_t v86 = SampleRateFromTransportAudioFormat;
      if (v85 != -1 || _LogCategory_Initialize())
      {
        if (v76) {
          CMBaseObjectGetDerivedStorage();
        }
        *(_OWORD *)&time.CMTimeValue value = *v74;
        time.CMTimeEpoch epoch = *(void *)(v180 + 692);
        CMTimeConvertScale(&v188, &time, v86, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
        CMTime time = v195;
        CMTimeConvertScale(&v187, &time, v86, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
        mach_absolute_time();
        CMTime time = v196;
        CMTimeConvertScale(&v186, &time, v86, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
        CMTime time = v199;
        CMTimeConvertScale(&v185, &time, v86, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
        CMTime time = v192;
        CMTimeConvertScale(&v184, &time, v86, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
        uint64_t v73 = v180;
        LogPrintF();
        CMTime v31 = &unk_1EB9F5000;
      }
    }
    if (APSSettingsIsFeatureEnabled())
    {
      uint64_t v95 = *(void *)(v73 + 1680);
      uint64_t v96 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v96) {
        uint64_t v97 = v96;
      }
      else {
        uint64_t v97 = 0;
      }
      CFTypeRef v98 = *(void (**)(uint64_t))(v97 + 24);
      if (v98) {
        v98(v95);
      }
    }
    else
    {
      bufferedAudioEngine_wakeUpHoses();
    }
    uint64_t v99 = CMBaseObjectGetDerivedStorage();
    LODWORD(time1.value) = 0;
    if (!*(unsigned char *)v99)
    {
      uint64_t v100 = v99;
      UsedCFIndex Count = APMessageRingBufferedGetUsedCount(*(void *)(v99 + 560));
      if (*(void *)(v100 + 56))
      {
        if (!UsedCount)
        {
LABEL_273:
          int v102 = v31[560];
          if (v102 <= 50 && (v102 != -1 || _LogCategory_Initialize()))
          {
            if (v76) {
              CMBaseObjectGetDerivedStorage();
            }
            bufferedAudioEngine_getCurrentRemoteMediaTimeInternal(0, &v210);
            CMTime v209 = *(CMTime *)(v100 + 676);
            CMTimeSubtract(&time, &v209, &v210);
            CMTimeGetSeconds(&time);
            LogPrintF();
            uint64_t v73 = v180;
          }
          goto LABEL_282;
        }
      }
      else if (!UsedCount)
      {
        goto LABEL_273;
      }
      APMessageRingBufferedGetTotalByteCount(*(void *)(v100 + 560), (int *)&time1);
      goto LABEL_273;
    }
  }
LABEL_282:
  if (!APSSettingsIsFeatureEnabled()) {
    bufferedAudioEngine_updateCriticalBufferingState((uint64_t)v76);
  }
  APMessageRingBufferedGetFirstValidReadIndex(*(void *)(v73 + 560), &v189);
  if (APSSettingsIsFeatureEnabled())
  {
    uint64_t v103 = *(void *)(v73 + 1680);
    uint64_t v104 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v104) {
      uint64_t v105 = v104;
    }
    else {
      uint64_t v105 = 0;
    }
    v143 = *(uint64_t (**)(uint64_t))(v105 + 32);
    if (v143) {
      int v144 = v143(v103);
    }
    else {
      int v144 = -12782;
    }
    TotalByteCFIndex Count = v144;
    unsigned __int8 v145 = 1;
    goto LABEL_510;
  }
  uint64_t v106 = *(void *)(v73 + 584);
  if (v106)
  {
    CFAllocatorRef allocatora = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    keya = (void *)*MEMORY[0x1E4F4A1F8];
    v173 = (void *)*MEMORY[0x1E4F4A200];
    do
    {
      LODWORD(rhs.value) = 0;
      uint64_t v107 = CMBaseObjectGetDerivedStorage();
      CMTime time = v181;
      CMTime v210 = v181;
      if (!*(void *)(v107 + 1176) || *(double *)(v106 + 64) == 0.0) {
        goto LABEL_314;
      }
      uint64_t v108 = v107;
      if (!*(void *)(v106 + 304))
      {
        int v109 = v31[560];
        if (v109 <= 30 && (v109 != -1 || _LogCategory_Initialize()))
        {
          if (v76) {
            CMBaseObjectGetDerivedStorage();
          }
          LogPrintF();
        }
        if (!*(void *)(CMBaseObjectGetDerivedStorage() + 1176))
        {
          int v123 = -15481;
LABEL_347:
          LODWORD(rhs.value) = v123;
          goto LABEL_348;
        }
        uint64_t v110 = CFDictionaryCreateMutable(allocatora, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (!v110)
        {
          APSLogErrorAt();
LABEL_346:
          int v123 = -15480;
          CMTime v31 = (_DWORD *)&unk_1EB9F5000;
          goto LABEL_347;
        }
        int v111 = v110;
        CFDictionarySetValue(v110, keya, @"Histogram_ReceiverBufferLevel");
        CFDictionarySetValue(v111, v173, @"ms");
        FigCFDictionarySetDouble();
        FigCFDictionarySetDouble();
        FigCFDictionarySetInt32();
        v112 = (const void *)APSStatsHistogramCreate();
        if (!v112)
        {
          APSLogErrorAt();
          CFRelease(v111);
          goto LABEL_346;
        }
        long long v113 = v112;
        *(void *)(v106 + 304) = CFRetain(v112);
        CFRelease(v111);
        CFRelease(v113);
        LODWORD(rhs.value) = 0;
        CMTime v31 = &unk_1EB9F5000;
      }
      mach_absolute_time();
      if ((unint64_t)UpTicksToMilliseconds() < 0x3E8) {
        goto LABEL_314;
      }
      *(void *)(v106 + 296) = mach_absolute_time();
      bufferedAudioEngine_getBufferLevelTimeEstimateForHose(v106, 0, &time);
      bufferedAudioEngine_getCurrentRemoteMediaTimeInternal((int *)&rhs, &v210);
      if (!LODWORD(rhs.value))
      {
        CMTime time1 = *(CMTime *)(v108 + 676);
        CMTime time2 = v210;
        CMTimeSubtract(&v209, &time1, &time2);
        CMTimeGetSeconds(&v209);
        CMTime time1 = time;
        CMTimeGetSeconds(&time1);
        int v114 = v31[560];
        if (v114 <= 30 && (v114 != -1 || _LogCategory_Initialize()))
        {
          if (v76)
          {
            v115 = v76;
            CMBaseObjectGetDerivedStorage();
          }
          else
          {
            v115 = 0;
          }
          CMTime time1 = time;
          CMTimeGetSeconds(&time1);
          CMTime time1 = v210;
          CMTimeGetSeconds(&time1);
          LogPrintF();
          int v76 = v115;
        }
        APSStatsHistogramAddValue();
        goto LABEL_314;
      }
LABEL_348:
      APSLogErrorAt();
LABEL_314:
      TotalByteCFIndex Count = 0;
      int v116 = v31[560];
      if (v116 <= 10 && (v116 != -1 || _LogCategory_Initialize()))
      {
        if (v76) {
          CMBaseObjectGetDerivedStorage();
        }
        LogPrintF();
      }
      if (*(unsigned char *)(v106 + 56))
      {
        if (v179) {
          *(unsigned char *)(v106 + 57) = 1;
        }
      }
      else if (!*(_DWORD *)(v106 + 172) && (v179 || *(unsigned char *)(v106 + 57)))
      {
        *(unsigned char *)(v106 + 57) = 0;
        uint64_t v117 = *(void *)(v106 + 16);
        APSEndpointStreamAudioHoseProtocolGetProtocolID();
        uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
        if (ProtocolVTable && (uint64_t v119 = *(void *)(ProtocolVTable + 16)) != 0)
        {
          v120 = *(uint64_t (**)(uint64_t))(v119 + 40);
          int v121 = v120 ? v120(v117) : -12782;
        }
        else
        {
          int v121 = -12788;
        }
        TotalByteCFIndex Count = v121;
        int v122 = v31[560];
        if (v122 <= 20 && (v122 != -1 || _LogCategory_Initialize()))
        {
          if (v76) {
            CMBaseObjectGetDerivedStorage();
          }
          LogPrintF();
        }
      }
      uint64_t v106 = *(void *)v106;
    }
    while (v106);
  }
  uint64_t v124 = CMBaseObjectGetDerivedStorage();
  uint64_t v125 = mach_absolute_time();
  BOOL isRateZero = bufferedAudioEngine_isRateZero();
  uint64_t v126 = *(void *)(v124 + 584);
  if (v126)
  {
    int v127 = 0;
    int v128 = 0;
    allocatorb = (_OWORD *)(v124 + 1000);
    unint64_t v129 = -1;
    while (1)
    {
      int v130 = v31[560];
      if (v130 <= 10 && (v130 != -1 || _LogCategory_Initialize()))
      {
        if (v76) {
          CMBaseObjectGetDerivedStorage();
        }
        LogPrintF();
      }
      if (*(_DWORD *)(v126 + 140)) {
        goto LABEL_395;
      }
      if (*(unsigned char *)(v124 + 1012))
      {
        bufferedAudioEngine_getBufferLevelTimeEstimateForHose(v126, 1, &v209);
        *(_OWORD *)&time.CMTimeValue value = *allocatorb;
        time.CMTimeEpoch epoch = *(void *)(v124 + 1016);
        BOOL v131 = CMTimeCompare(&v209, &time) >= 0;
      }
      else
      {
        BOOL v131 = 0;
      }
      int v132 = *(void *)(v124 + 1144) ? *(unsigned __int8 *)(v126 + 204) : 1;
      if (isRateZero)
      {
        BOOL v133 = 0;
      }
      else
      {
        uint64_t v134 = 240;
        if (!*(unsigned char *)(v124 + 800)) {
          uint64_t v134 = 232;
        }
        BOOL v133 = v125 - *(void *)(v126 + 72) >= *(void *)(v124 + v134);
      }
      uint64_t v135 = CMBaseObjectGetDerivedStorage();
      if (*(_DWORD *)(v126 + 136) < *(_DWORD *)(v126 + 156))
      {
        uint64_t v136 = v135;
        bufferedAudioEngine_getBufferLevelTimeEstimateForHose(v126, 1, &time);
        CMTime v210 = *(CMTime *)(v136 + 156);
        if (CMTimeCompare(&time, &v210) <= 0) {
          break;
        }
      }
      if (!v132)
      {
        BOOL v137 = 0;
        goto LABEL_375;
      }
LABEL_378:
      *(_DWORD *)(v126 + 140) = 1;
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (v183) {
          CMBaseObjectGetDerivedStorage();
        }
        bufferedAudioEngine_getBufferLevelTimeEstimateForHose(v126, 1, &time1);
        CMTimeGetSeconds(&time1);
        CMTime time = *(CMTime *)(v124 + 156);
        CMTimeGetSeconds(&time);
        UpTicksToMilliseconds();
        if (!isRateZero) {
          UpTicksToMilliseconds();
        }
        CMTime time = *(CMTime *)(v126 + 88);
        CMTimeGetSeconds(&time);
        *(_OWORD *)&time.CMTimeValue value = *allocatorb;
        time.CMTimeEpoch epoch = *(void *)(v124 + 1016);
        CMTimeGetSeconds(&time);
        LogPrintF();
      }
      uint64_t v138 = LogCategoryCopyOSLogHandle();
      v139 = (void *)v138;
      if (v138) {
        v140 = v138;
      }
      else {
        v140 = MEMORY[0x1E4F14500];
      }
      if (os_signpost_enabled(v140))
      {
        uint64_t v141 = *(void *)(v126 + 16);
        CMTime time = *(CMTime *)(v126 + 88);
        Float64 Seconds = CMTimeGetSeconds(&time);
        LODWORD(time.value) = 67109376;
        HIDWORD(time.value) = v141;
        LOWORD(time.timescale) = 2048;
        *(Float64 *)((char *)&time.timescale + 2) = Seconds;
        _os_signpost_emit_with_name_impl(&dword_1D0945000, v140, OS_SIGNPOST_EVENT, 0x2B160580uLL, "AIRPLAY_SIGNPOST_AUDIOENGINE_HOSE_PRIMED", "PRIMED hose 0x%x, bufferLevelTime %1.3f", (uint8_t *)&time, 0x12u);
      }
      if (v139) {
        os_release(v139);
      }
      CMTime time = *(CMTime *)(v126 + 88);
      CMTimeGetSeconds(&time);
      kdebug_trace();
LABEL_395:
      if (*(_DWORD *)(v126 + 140)) {
        ++v128;
      }
      if (v125 - *(void *)(v126 + 72) < v129) {
        unint64_t v129 = v125 - *(void *)(v126 + 72);
      }
      uint64_t v126 = *(void *)v126;
      ++v127;
      int v76 = (const void *)v183;
      CMTime v31 = (_DWORD *)&unk_1EB9F5000;
      if (!v126) {
        goto LABEL_407;
      }
    }
    BOOL v137 = v132 != 0;
LABEL_375:
    if (!v131) {
      BOOL v137 = 0;
    }
    if (!v137 && !v133) {
      goto LABEL_395;
    }
    goto LABEL_378;
  }
  int v128 = 0;
  int v127 = 0;
LABEL_407:
  int v146 = v31[560];
  if (v146 < 11 && (v146 != -1 || _LogCategory_Initialize()))
  {
    if (v76) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  uint64_t v147 = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(v147 + 800)) {
    goto LABEL_446;
  }
  uint64_t v148 = v147;
  if (v128 == v127)
  {
    int v149 = v31[560];
    if (v149 > 50 || v149 == -1 && !_LogCategory_Initialize()) {
      goto LABEL_445;
    }
    if (!v76) {
      goto LABEL_444;
    }
LABEL_419:
    CMBaseObjectGetDerivedStorage();
LABEL_444:
    LogPrintF();
    goto LABEL_445;
  }
  if (100 * v128 < *(_DWORD *)(v147 + 256) * v127) {
    goto LABEL_446;
  }
  int v150 = v31[560];
  if (v150 <= 50 && (v150 != -1 || _LogCategory_Initialize()))
  {
    if (!v76) {
      goto LABEL_444;
    }
    goto LABEL_419;
  }
LABEL_445:
  *(unsigned char *)(v148 + 800) = 1;
LABEL_446:
  uint64_t v152 = CMBaseObjectGetDerivedStorage();
  time.CMTimeValue value = 0;
  uint64_t v153 = mach_absolute_time();
  if (!*(unsigned char *)(v152 + 800) || (v154 = *(void **)(v152 + 584)) == 0)
  {
LABEL_507:
    unsigned __int8 v145 = 0;
    uint64_t v73 = v180;
    goto LABEL_508;
  }
  uint64_t v155 = v153;
  unsigned __int8 v145 = 0;
  CFDictionaryRef v156 = 0;
  uint64_t v157 = *MEMORY[0x1E4F49FA8];
  while (1)
  {
    uint64_t v158 = v154[2];
    uint64_t v159 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v160 = v159 ? v159 : 0;
    v161 = *(unsigned int (**)(uint64_t, uint64_t, void, CMTime *))(v160 + 48);
    if (!v161 || v161(v158, v157, 0, &time)) {
      break;
    }
    BOOL isHoseInStereoPair = bufferedAudioEngine_isHoseInStereoPair(v154[2]);
    int v163 = *((_DWORD *)v154 + 35);
    if (!isHoseInStereoPair)
    {
      if (v163 != 1) {
        goto LABEL_492;
      }
      *((_DWORD *)v154 + 35) = 2;
      unsigned __int8 v145 = 1;
      *(unsigned char *)(v152 + 801) = 1;
      if (gLogCategory_APAudioEngineBuffered > 50
        || gLogCategory_APAudioEngineBuffered == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_492;
      }
      if (!v76) {
        goto LABEL_491;
      }
      goto LABEL_485;
    }
    if (v163)
    {
      if (!v156)
      {
        CFDictionaryRef v156 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], 0);
        if (!v156)
        {
          APSLogErrorAt();
          goto LABEL_507;
        }
      }
      if (CFDictionaryContainsKey(v156, (const void *)time.value))
      {
        v164 = CFDictionaryGetValue(v156, (const void *)time.value);
        if (v164[35] == 1)
        {
          v164[35] = 2;
          unsigned __int8 v145 = 1;
          *(unsigned char *)(v152 + 801) = 1;
          if (gLogCategory_APAudioEngineBuffered <= 50
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (v76) {
              CMBaseObjectGetDerivedStorage();
            }
            LogPrintF();
          }
        }
        if (*((_DWORD *)v154 + 35) != 1) {
          goto LABEL_492;
        }
        *((_DWORD *)v154 + 35) = 2;
        unsigned __int8 v145 = 1;
        *(unsigned char *)(v152 + 801) = 1;
        if (gLogCategory_APAudioEngineBuffered > 50
          || gLogCategory_APAudioEngineBuffered == -1 && !_LogCategory_Initialize())
        {
          goto LABEL_492;
        }
        if (v76) {
          goto LABEL_485;
        }
LABEL_491:
        LogPrintF();
        goto LABEL_492;
      }
      CFDictionaryAddValue(v156, (const void *)time.value, v154);
      if (*((_DWORD *)v154 + 35) != 1) {
        goto LABEL_492;
      }
      if (v155 - v154[9] < *(void *)(v152 + 248)) {
        goto LABEL_492;
      }
      *((_DWORD *)v154 + 35) = 2;
      unsigned __int8 v145 = 1;
      *(unsigned char *)(v152 + 801) = 1;
      if (gLogCategory_APAudioEngineBuffered > 50
        || gLogCategory_APAudioEngineBuffered == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_492;
      }
      if (!v76) {
        goto LABEL_491;
      }
LABEL_485:
      CMBaseObjectGetDerivedStorage();
      goto LABEL_491;
    }
LABEL_492:
    if (time.value)
    {
      CFRelease((CFTypeRef)time.value);
      time.CMTimeValue value = 0;
    }
    if (*((_DWORD *)v154 + 35) == 2 && !v154[34]) {
      v154[34] = UpTicksToMilliseconds();
    }
    v154 = (void *)*v154;
    if (!v154) {
      goto LABEL_500;
    }
  }
  APSLogErrorAt();
  unsigned __int8 v145 = 0;
LABEL_500:
  uint64_t v73 = v180;
  if (v156) {
    CFRelease(v156);
  }
LABEL_508:
  if (time.value) {
    CFRelease((CFTypeRef)time.value);
  }
LABEL_510:
  bufferedAudioEngine_startPlaybackIfNecessary(v76, v145);
  bufferedAudioEngine_updatePrerollingState((uint64_t)v76);
  BOOL v165 = bufferedAudioEngine_isRateZero();
  if (!v179 && v165 && *(_DWORD *)(v73 + 804) != 1886547820)
  {
    if (gLogCategory_APAudioEngineBuffered <= 40
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (v76)
      {
        v166 = v76;
        CMBaseObjectGetDerivedStorage();
      }
      else
      {
        v166 = 0;
      }
      bufferedAudioEngine_playbackStateGetCString(*(_DWORD *)(v73 + 804));
      LogPrintF();
      int v76 = v166;
    }
    bufferedAudioEngine_audioTimerPause();
  }
  bufferedAudioEngine_updateDataProcessingTargetQueueInternal((uint64_t)v76);
}

uint64_t bufferedAudioEngine_updatePrerollingState(uint64_t a1)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  int v3 = *(_DWORD *)(result + 804);
  if (v3 == 1886547820)
  {
    if (!*(unsigned char *)(result + 800)) {
      return result;
    }
    int v4 = 1937010544;
  }
  else
  {
    if (v3 != 1937010544 || *(unsigned char *)(result + 800)) {
      return result;
    }
    int v4 = 1886547820;
  }
  return bufferedAudioEngine_updatePlaybackState(a1, v4);
}

uint64_t bufferedAudioEngine_prepareOneMessageForSending(const void *a1, int a2, BOOL *a3)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  int v56 = 0;
  if (*DerivedStorage)
  {
    uint64_t v18 = 0;
    goto LABEL_38;
  }
  uint64_t v7 = DerivedStorage;
  CFArrayRef v8 = *(const __CFArray **)(CMBaseObjectGetDerivedStorage() + 568);
  if (v8 && CFArrayGetCount(v8))
  {
    uint64_t v9 = CMBaseObjectGetDerivedStorage();
    CMTime time = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    CMTime v61 = time;
    size_t lengthAtOffsetOut = 0;
    dataPointerOut.CMTimeValue value = 0;
    if (!*(void *)(v9 + 560))
    {
      APSLogErrorAt();
      uint64_t v18 = APSSignalErrorAt();
      if (!v18)
      {
LABEL_30:
        BOOL v34 = 1;
        goto LABEL_127;
      }
      goto LABEL_37;
    }
    uint64_t v10 = v9;
    uint64_t v11 = CMBaseObjectGetDerivedStorage();
    CFArrayRef v12 = *(const __CFArray **)(v11 + 568);
    if (v12 && CFArrayGetCount(v12) >= 1)
    {
      ValueAtunsigned int Index = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v11 + 568), 0);
      CFTypeRef v14 = (OpaqueCMBlockBuffer *)CFArrayGetValueAtIndex(ValueAtIndex, 0);
      size_t DataLength = CMBlockBufferGetDataLength(v14);
    }
    else
    {
      size_t DataLength = 0;
    }
    uint64_t NextFreeBacking = APMessageRingBufferedGetNextFreeBacking(*(void *)(v10 + 560), DataLength);
    if (NextFreeBacking)
    {
      uint64_t v22 = (OpaqueCMBlockBuffer *)NextFreeBacking;
      uint64_t v23 = CMBaseObjectGetDerivedStorage();
      CFArrayRef v24 = *(const __CFArray **)(v23 + 568);
      if (v24 && CFArrayGetCount(v24) > 0)
      {
        int v55 = a3;
        CFArrayRef v25 = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v23 + 568), 0);
        CFMutableStringRef v26 = CFArrayGetValueAtIndex(v25, 0);
        CFDictionaryRef v27 = (const __CFDictionary *)CFArrayGetValueAtIndex(v25, 1);
        CFDictionaryRef v28 = (const __CFDictionary *)CFArrayGetValueAtIndex(v25, 2);
        uint64_t v29 = (OpaqueCMBlockBuffer *)CFRetain(v26);
        CMTimeMakeFromDictionary(&time, v27);
        CMTimeMakeFromDictionary(&v61, v28);
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v23 + 568), 0);
        uint64_t DataPointer = CMBlockBufferGetDataPointer(v22, 0, &lengthAtOffsetOut, 0, (char **)&dataPointerOut);
        if (DataPointer)
        {
          uint64_t v18 = DataPointer;
          APSLogErrorAt();
        }
        else
        {
          size_t v31 = lengthAtOffsetOut;
          if (v31 >= CMBlockBufferGetDataLength(v29))
          {
            uint64_t v32 = CMBlockBufferCopyDataBytes(v29, 0, DataLength, (void *)dataPointerOut.value);
            a3 = v55;
            if (v32)
            {
              uint64_t v18 = v32;
            }
            else
            {
              uint64_t v33 = *(void *)(v10 + 560);
              CMTime rhs = time;
              CMTime lhs = v61;
              uint64_t v18 = APMessageRingBufferedEnqueueMessageForSending(v33, v22, (long long *)&rhs.value, (long long *)&lhs.value);
              if (!v18) {
                goto LABEL_27;
              }
            }
            APSLogErrorAt();
LABEL_27:
            if (v29) {
              CFRelease(v29);
            }
            if (!v18) {
              goto LABEL_30;
            }
            goto LABEL_37;
          }
          APSLogErrorAt();
          uint64_t v18 = APSSignalErrorAt();
        }
        a3 = v55;
        goto LABEL_27;
      }
      APSLogErrorAt();
      APSLogErrorAt();
    }
    uint64_t v18 = 4294895201;
LABEL_37:
    APSLogErrorAt();
LABEL_38:
    BOOL v34 = 0;
    goto LABEL_137;
  }
  if (!APMessageRingBufferedIsFull(*((void *)v7 + 70)))
  {
    uint64_t v16 = CMBaseObjectGetDerivedStorage();
    if (!*(void *)(v16 + 560))
    {
      APSLogErrorAt();
      uint64_t v18 = APSSignalErrorAt();
LABEL_110:
      CFDictionaryRef v19 = 0;
      goto LABEL_114;
    }
    uint64_t v17 = v16;
    if (CMBufferQueueGetBufferCount(*(CMBufferQueueRef *)(v16 + 1112)))
    {
      uint64_t v18 = bufferedAudioEngine_enqueueMessagesFromBufferQueue(a1, 1, &v56);
      if (!v18)
      {
        CFDictionaryRef v19 = 0;
        uint64_t v20 = MEMORY[0x1E4F1F9F8];
        *(_OWORD *)(v17 + 1084) = *MEMORY[0x1E4F1F9F8];
        *(void *)(v17 + 1100) = *(void *)(v20 + 16);
LABEL_114:
        if (APSSettingsIsFeatureEnabled() && v19) {
          CFRelease(v19);
        }
        if (!v18)
        {
          BOOL v34 = v56 > 0;
          if (*((_DWORD *)v7 + 224))
          {
            if (gLogCategory_APAudioEngineBuffered <= 10
              && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
            {
              if (a1) {
                CMBaseObjectGetDerivedStorage();
              }
              LogPrintF();
            }
            *((_DWORD *)v7 + 224) = 0;
          }
          goto LABEL_127;
        }
        goto LABEL_37;
      }
      goto LABEL_109;
    }
    LODWORD(lengthAtOffsetOut) = 0;
    uint64_t v35 = CMBaseObjectGetDerivedStorage();
    CMTime time = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    CMTime v61 = time;
    bufferedAudioEngine_getCurrentRemoteMediaTimeInternal((int *)&lengthAtOffsetOut, &time);
    if (lengthAtOffsetOut)
    {
      APSLogErrorAt();
    }
    else
    {
      bufferedAudioEngine_getStartUpDelay((uint64_t)a1, 0, (uint64_t)&rhs);
      CMTime lhs = time;
      CMTimeAdd(&v61, &lhs, &rhs);
      CMTime lhs = *(CMTime *)(v35 + 676);
      CMTime dataPointerOut = *(CMTime *)(v35 + 700);
      if (CMTimeCompare(&lhs, &dataPointerOut))
      {
        CMTime lhs = v61;
        CMTime dataPointerOut = *(CMTime *)(v35 + 676);
        if ((CMTimeCompare(&lhs, &dataPointerOut) & 0x80000000) == 0 && (*(unsigned char *)(v35 + 1096) & 1) == 0)
        {
          if (gLogCategory_APAudioEngineBuffered <= 50
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (a1) {
              CMBaseObjectGetDerivedStorage();
            }
            LogPrintF();
          }
          uint64_t v38 = bufferedAudioEngine_createAndEnqueueEmptyMessageForSending((uint64_t)a1, 0);
          if (v38)
          {
            uint64_t v18 = v38;
LABEL_109:
            APSLogErrorAt();
            goto LABEL_110;
          }
          if (APSSettingsIsFeatureEnabled())
          {
            CFAllocatorRef v39 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            CMTime time = *(CMTime *)(v17 + 676);
            CFDictionaryRef v19 = CMTimeCopyAsDictionary(&time, v39);
            uint64_t CMBaseObject = APAudioHoseManagerBufferedGetCMBaseObject(*(void *)(v17 + 1680));
            uint64_t v41 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v41) {
              uint64_t v42 = v41;
            }
            else {
              uint64_t v42 = 0;
            }
            CFNumberRef v43 = *(uint64_t (**)(uint64_t, __CFString *, CFDictionaryRef))(v42 + 56);
            if (v43)
            {
              uint64_t v44 = v43(CMBaseObject, @"ImmediateTransmitRemoteMediaTimestamp", v19);
              if (!v44) {
                goto LABEL_75;
              }
              uint64_t v18 = v44;
            }
            else
            {
              uint64_t v18 = 4294954514;
            }
            APSLogErrorAt();
            goto LABEL_114;
          }
          CFDictionaryRef v19 = 0;
LABEL_75:
          *(_OWORD *)(v17 + 1084) = *(_OWORD *)(v17 + 676);
          *(void *)(v17 + 1100) = *(void *)(v17 + 692);
          if (APSSettingsIsFeatureEnabled())
          {
            uint64_t v45 = *(void *)(v17 + 1680);
            uint64_t v46 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v46) {
              uint64_t v47 = v46;
            }
            else {
              uint64_t v47 = 0;
            }
            CFDataRef v53 = *(void (**)(uint64_t))(v47 + 32);
            if (v53) {
              v53(v45);
            }
          }
          else
          {
            int v48 = *(void **)(v17 + 584);
            if (v48)
            {
              do
              {
                uint64_t v49 = *(void *)(*(void *)(v17 + 584) + 16);
                APSEndpointStreamAudioHoseProtocolGetProtocolID();
                uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
                if (ProtocolVTable && (uint64_t v51 = *(void *)(ProtocolVTable + 16)) != 0)
                {
                  int v52 = *(uint64_t (**)(uint64_t))(v51 + 40);
                  if (v52) {
                    uint64_t v18 = v52(v49);
                  }
                  else {
                    uint64_t v18 = 4294954514;
                  }
                }
                else
                {
                  uint64_t v18 = 4294954508;
                }
                if (gLogCategory_APAudioEngineBuffered <= 20
                  && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
                {
                  if (a1) {
                    CMBaseObjectGetDerivedStorage();
                  }
                  LogPrintF();
                }
                int v48 = (void *)*v48;
              }
              while (v48);
              goto LABEL_113;
            }
          }
          uint64_t v18 = 0;
LABEL_113:
          ++*(_DWORD *)(v17 + 908);
          goto LABEL_114;
        }
      }
    }
    uint64_t v18 = 0;
    CFDictionaryRef v19 = 0;
    goto LABEL_113;
  }
  if (!a2)
  {
    uint64_t v18 = 4294895201;
    ++*((_DWORD *)v7 + 224);
    if (gLogCategory_APAudioEngineBuffered <= 10
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1) {
        CMBaseObjectGetDerivedStorage();
      }
      LogPrintF();
    }
    goto LABEL_38;
  }
  if (gLogCategory_APAudioEngineBuffered <= 20
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  uint64_t v36 = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioEngineBuffered <= 90
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  if (CMBufferQueueGetBufferCount(*(CMBufferQueueRef *)(v36 + 1112)))
  {
    uint64_t v37 = bufferedAudioEngine_enqueueMessagesFromBufferQueue(a1, 0, &v56);
    if (v37)
    {
      uint64_t v18 = v37;
      APSLogErrorAt();
      goto LABEL_37;
    }
    BOOL v34 = v56 > 0;
  }
  else
  {
    BOOL v34 = 0;
  }
LABEL_127:
  if (v7[912])
  {
    if (gLogCategory_APAudioEngineBuffered <= 50
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1) {
        CMBaseObjectGetDerivedStorage();
      }
      LogPrintF();
    }
    uint64_t v18 = 0;
    v7[912] = 0;
  }
  else
  {
    uint64_t v18 = 0;
  }
LABEL_137:
  if (a3) {
    *a3 = v34;
  }
  return v18;
}

uint64_t bufferedAudioEngine_startPlaybackIfNecessary(const void *a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFBooleanRef BOOLean = 0;
  if (!APSSettingsIsFeatureEnabled())
  {
    if (*(unsigned char *)(DerivedStorage + 801)) {
      goto LABEL_11;
    }
LABEL_20:
    if (gLogCategory_APAudioEngineBuffered <= 10
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1) {
        CMBaseObjectGetDerivedStorage();
      }
      LogPrintF();
    }
    goto LABEL_41;
  }
  uint64_t CMBaseObject = APAudioHoseManagerBufferedGetCMBaseObject(*(void *)(DerivedStorage + 1680));
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  CFArrayRef v8 = *(uint64_t (**)(uint64_t, __CFString *, void, CFBooleanRef *))(v7 + 48);
  if (!v8)
  {
    uint64_t v11 = 4294954514;
LABEL_19:
    APSLogErrorAt();
    goto LABEL_42;
  }
  uint64_t v9 = v8(CMBaseObject, @"IsRunning", *MEMORY[0x1E4F1CF80], &BOOLean);
  if (v9)
  {
    uint64_t v11 = v9;
    goto LABEL_19;
  }
  if (!BOOLean || CFBooleanGetValue(BOOLean)) {
    goto LABEL_20;
  }
LABEL_11:
  int v10 = *(_DWORD *)(DerivedStorage + 804);
  if (v10 == 1937207905)
  {
    if (*(unsigned char *)(DerivedStorage + 856))
    {
      uint64_t v12 = *(void *)(DerivedStorage + 848);
      if (v12 <= mach_absolute_time())
      {
        HoseDecriptorFromHose = bufferedAudioEngine_getHoseDecriptorFromHose();
        if (!HoseDecriptorFromHose || !*((unsigned char *)HoseDecriptorFromHose + 168))
        {
          *(unsigned char *)(DerivedStorage + 856) = 0;
          *(void *)(DerivedStorage + 848) = 0;
          if (bufferedAudioEngine_shouldUseReceiverChoosesAnchor())
          {
            if (gLogCategory_APAudioEngineBuffered <= 50
              && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
            {
              if (a1) {
                CMBaseObjectGetDerivedStorage();
              }
              LogPrintF();
            }
            uint64_t v11 = bufferedAudioEngine_handleSetRateToOneWithReceiverAnchor(a1);
            if (v11) {
              goto LABEL_19;
            }
          }
          else
          {
            uint64_t v18 = *(const void **)(DerivedStorage + 864);
            if (v18)
            {
              CFRelease(v18);
              *(void *)(DerivedStorage + 864) = 0;
            }
            if (gLogCategory_APAudioEngineBuffered <= 50
              && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
            {
              if (a1) {
                CMBaseObjectGetDerivedStorage();
              }
              LogPrintF();
            }
            bufferedAudioEngine_updatePlaybackState((uint64_t)a1, 1937011305);
            uint64_t v11 = bufferedAudioEngine_handleSetRateToOne(a1);
            if (v11) {
              goto LABEL_19;
            }
          }
          goto LABEL_42;
        }
        if (gLogCategory_APAudioEngineBuffered <= 50
          && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
        {
          if (a1) {
            CMBaseObjectGetDerivedStorage();
          }
          LogPrintF();
        }
        *(unsigned char *)(DerivedStorage + 856) = 0;
        *(void *)(DerivedStorage + 848) = 0;
        if (a1) {
          CFRetain(a1);
        }
        APSEndpointStreamAudioHoseGetAnchor(*(void *)(DerivedStorage + 864), a1);
      }
    }
    goto LABEL_41;
  }
  if (v10 == 1937011316)
  {
    if (a2
      || *(unsigned char *)(DerivedStorage + 760)
      || *(unsigned char *)(DerivedStorage + 856) && (uint64_t v15 = *(void *)(DerivedStorage + 848), v15 <= mach_absolute_time()))
    {
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (a1) {
          CMBaseObjectGetDerivedStorage();
        }
        LogPrintF();
      }
      uint64_t v11 = bufferedAudioEngine_handleSetRateToOne_sendAnchorToAllHoses(a1);
      if (v11) {
        goto LABEL_19;
      }
      goto LABEL_42;
    }
LABEL_41:
    uint64_t v11 = 0;
    goto LABEL_42;
  }
  if (v10 != 1886614642) {
    goto LABEL_41;
  }
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  if (*(unsigned char *)(DerivedStorage + 836))
  {
    int v17 = gLogCategory_APAudioEngineBuffered;
    goto LABEL_65;
  }
  int shouldUseReceiverChoosesAnchor = bufferedAudioEngine_shouldUseReceiverChoosesAnchor();
  int v17 = gLogCategory_APAudioEngineBuffered;
  if (!shouldUseReceiverChoosesAnchor)
  {
LABEL_65:
    if (v17 <= 50 && (v17 != -1 || _LogCategory_Initialize()))
    {
      if (a1) {
        CMBaseObjectGetDerivedStorage();
      }
      LogPrintF();
    }
    bufferedAudioEngine_updatePlaybackState((uint64_t)a1, 1937011305);
    uint64_t v11 = bufferedAudioEngine_handleSetRateToOne(a1);
    if (v11) {
      goto LABEL_19;
    }
    goto LABEL_42;
  }
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  bufferedAudioEngine_updatePlaybackState((uint64_t)a1, 1937207905);
  uint64_t v11 = bufferedAudioEngine_handleSetRateToOneWithReceiverAnchor(a1);
  if (v11) {
    goto LABEL_19;
  }
LABEL_42:
  if (BOOLean) {
    CFRelease(BOOLean);
  }
  return v11;
}

BOOL bufferedAudioEngine_isRateZero()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  int v1 = *(_DWORD *)(DerivedStorage + 804);
  BOOL v3 = v1 == 1886614642 || v1 == 1937207905 || v1 == 1937011305;
  int v4 = (double *)(DerivedStorage + 808);
  if (v3) {
    int v4 = (double *)(DerivedStorage + 816);
  }
  return *v4 == 0.0;
}

uint64_t bufferedAudioEngine_audioTimerPause()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(result + 480))
  {
    *(unsigned char *)(result + 480) = 0;
    uint64_t v1 = *(void *)(result + 472);
    return MEMORY[0x1F4107BC8](v1);
  }
  return result;
}

uint64_t __bufferedAudioEngine_pruneMessageRingToCurrentRemoteMediaTimeWithForwardMargin_block_invoke()
{
  uint64_t result = FigGetCFPreferenceNumberWithDefault();
  bufferedAudioEngine_pruneMessageRingToCurrentRemoteMediaTimeWithForwardMargin_defaultForwardPruningMarginMs = result;
  return result;
}

BOOL bufferedAudioEngine_shouldSkipTranscodeForStartup()
{
  int v0 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 804);
  if (v0 != 1886614642 && v0 != 1937207905 && v0 != 1937011305) {
    return 0;
  }
  return bufferedAudioEngine_engineBufferedToStartWaterMark();
}

uint64_t bufferedAudioEngine_createAndEnqueueEmptyMessageForSending(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v20 = 0;
  CMBlockBufferRef blockBufferOut = 0;
  if (*(void *)(DerivedStorage + 560))
  {
    uint64_t v5 = DerivedStorage;
    uint64_t v6 = CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, &blockBufferOut);
    if (v6)
    {
      uint64_t v12 = v6;
    }
    else
    {
      uint64_t v7 = *(void *)(v5 + 560);
      size_t EncodeMessageBackingSize = bufferedAudioEngine_getEncodeMessageBackingSize(a1, 0);
      uint64_t NextFreeBacking = APMessageRingBufferedGetNextFreeBacking(v7, EncodeMessageBackingSize);
      if (NextFreeBacking)
      {
        long long v18 = *(_OWORD *)(v5 + 676);
        uint64_t v19 = *(void *)(v5 + 692);
        long long v16 = *(_OWORD *)(v5 + 676);
        uint64_t v17 = *(void *)(v5 + 692);
        uint64_t v10 = bufferedAudioEngine_encodeMessage(a1, NextFreeBacking, (uint64_t)&v16, a2, blockBufferOut, &v20);
        if (v10)
        {
          uint64_t v12 = v10;
        }
        else
        {
          uint64_t v11 = *(void *)(v5 + 560);
          long long v16 = v18;
          uint64_t v17 = v19;
          long long v14 = *MEMORY[0x1E4F1FA48];
          uint64_t v15 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
          uint64_t v12 = APMessageRingBufferedEnqueueMessageForSending(v11, v20, &v16, &v14);
          if (!v12) {
            goto LABEL_6;
          }
        }
      }
      else
      {
        uint64_t v12 = 4294895201;
      }
    }
    APSLogErrorAt();
  }
  else
  {
    APSLogErrorAt();
    uint64_t v12 = APSSignalErrorAt();
  }
LABEL_6:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (v20) {
    CFRelease(v20);
  }
  return v12;
}

uint64_t bufferedAudioEngine_enqueueMessagesFromBufferQueue(const void *a1, char a2, _DWORD *a3)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  CFTypeRef v88 = 0;
  uint64_t v87 = 0;
  long long v86 = 0u;
  long long v84 = 0u;
  memset(v85, 0, sizeof(v85));
  long long v83 = 0u;
  CFTypeRef v82 = 0;
  uint64_t v7 = MEMORY[0x1E4F1F9F8];
  CMTimeValue v95 = *MEMORY[0x1E4F1F9F8];
  CMTimeScale v96 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
  long long v80 = 0u;
  long long v81 = 0u;
  long long v79 = 0u;
  memset(v78, 0, sizeof(v78));
  CFTypeRef v76 = 0;
  size_t sizeOut = 0;
  if (!*(void *)(DerivedStorage + 560))
  {
    APSLogErrorAt();
    uint64_t v13 = APSSignalErrorAt();
LABEL_16:
    uint64_t v10 = 0;
LABEL_104:
    CFDataRef v37 = 0;
    CFDictionaryRef v38 = 0;
    goto LABEL_105;
  }
  uint64_t v8 = DerivedStorage;
  uint64_t v9 = bufferedAudioEngine_processAndRetainSBufFromBufferQueue((uint64_t)a1);
  if (!v9)
  {
    ++*(_DWORD *)(v8 + 900);
    if (gLogCategory_APAudioEngineBuffered <= 30
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1) {
        CMBaseObjectGetDerivedStorage();
      }
      LogPrintF();
    }
    uint64_t v13 = 0;
    goto LABEL_16;
  }
  uint64_t v10 = v9;
  char v67 = a2;
  CFTypeRef v11 = CMGetAttachment(v9, (CFStringRef)*MEMORY[0x1E4F21A28], 0);
  CFTypeRef v12 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
  if (v11 == (CFTypeRef)*MEMORY[0x1E4F1CFD0])
  {
    CMTime lhs = *(CMTime *)(v8 + 676);
    CMTime rhs = *(CMTime *)(v8 + 700);
    CMTimeSubtract((CMTime *)time, &lhs, &rhs);
    *(_OWORD *)(v8 + 1000) = *(_OWORD *)time;
    *(void *)(v8 + 1016) = *(void *)&time[16];
    if (gLogCategory_APAudioEngineBuffered <= 50
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1) {
        CMBaseObjectGetDerivedStorage();
      }
      *(_OWORD *)CMTime time = *(_OWORD *)(v8 + 1000);
      *(void *)&time[16] = *(void *)(v8 + 1016);
      CMTimeGetSeconds((CMTime *)time);
      LogPrintF();
    }
  }
  uint64_t v14 = CMBaseObjectGetDerivedStorage();
  if (*(void *)(v14 + 560))
  {
    uint64_t v15 = v14;
    CFStringRef v16 = (const __CFString *)*MEMORY[0x1E4F329B0];
    CFTypeRef v17 = CMGetAttachment(v10, (CFStringRef)*MEMORY[0x1E4F329B0], 0);
    if (v17)
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(v15 + 1168), v17);
      CMRemoveAttachment(v10, v16);
    }
  }
  else
  {
    APSLogErrorAt();
    APSSignalErrorAt();
  }
  CFDictionaryRef v18 = (const __CFDictionary *)CMGetAttachment(v10, (CFStringRef)*MEMORY[0x1E4F21A20], 0);
  if (v18)
  {
    CFDictionaryRef v19 = v18;
    if (gLogCategory_APAudioEngineBuffered <= 50
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1) {
        CMBaseObjectGetDerivedStorage();
      }
      LogPrintF();
    }
    uint64_t v20 = CMBaseObjectGetDerivedStorage();
    if (FigCFEqual()) {
      goto LABEL_37;
    }
    if (CFDictionaryContainsKey(v19, (const void *)*MEMORY[0x1E4F4EC60]))
    {
      uint64_t v21 = (void *)(v20 + 1360);
    }
    else
    {
      if (!CFDictionaryContainsKey(v19, (const void *)*MEMORY[0x1E4F4EC78])) {
        goto LABEL_37;
      }
      uint64_t v21 = (void *)(v20 + 1368);
    }
    ++*v21;
LABEL_37:
    uint64_t v22 = *(const void **)(v8 + 1152);
    *(void *)(v8 + 1152) = v19;
    CFRetain(v19);
    if (v22) {
      CFRelease(v22);
    }
  }
  uint64_t v23 = (const opaqueCMFormatDescription *)CMGetAttachment(v10, (CFStringRef)*MEMORY[0x1E4F329A0], 0);
  CFArrayRef v24 = v23;
  if (v23)
  {
    CFArrayRef v25 = *(const void **)(v8 + 944);
    *(void *)(v8 + 944) = v23;
    CFRetain(v23);
    if (v25) {
      CFRelease(v25);
    }
  }
  uint64_t v26 = CMBaseObjectGetDerivedStorage();
  StreamBasicDescription = 0;
  long long v100 = 0u;
  long long v101 = 0u;
  memset(time, 0, sizeof(time));
  lhs.CMTimeValue value = 0;
  *(void *)&lhs.CMTimeScale timescale = 0;
  *(void *)&rhs.CMTimeScale timescale = 0;
  rhs.CMTimeValue value = 0;
  *(void *)__str = 0;
  uint64_t v98 = 0;
  CFDictionaryRef v27 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (v24)
  {
    uint64_t v28 = v26;
    if (CMAudioFormatDescriptionGetRichestDecodableFormatAndChannelLayout())
    {
      StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(v24);
      if (StreamBasicDescription)
      {
        FourCharCodeToCString();
        __strlcat_chk();
        snprintf((char *)&lhs, 0x10uLL, "%llu", (unint64_t)StreamBasicDescription->mSampleRate);
        __strlcat_chk();
        __strlcat_chk();
        uint64_t v29 = StreamBasicDescription;
        int mFormatID = StreamBasicDescription->mFormatID;
        if (mFormatID > 1902928226)
        {
          if (mFormatID == 2053923171) {
            goto LABEL_53;
          }
          int v31 = 1902928227;
        }
        else
        {
          if (mFormatID == 1634492771) {
            goto LABEL_53;
          }
          int v31 = 1668047203;
        }
        if (mFormatID != v31)
        {
LABEL_57:
          snprintf((char *)&rhs, 0x10uLL, "%u", v29->mChannelsPerFrame);
          __strlcat_chk();
          CFStringRef v34 = CFStringCreateWithCString(*v27, time, 0x8000100u);
          CFStringRef v35 = v34;
          uint64_t v36 = *(const void **)(v28 + 1352);
          *(void *)(v28 + 1352) = v34;
          if (v34) {
            CFRetain(v34);
          }
          if (v36) {
            CFRelease(v36);
          }
          if (v35) {
            CFRelease(v35);
          }
          goto LABEL_63;
        }
LABEL_53:
        int v32 = StreamBasicDescription->mFormatFlags - 1;
        if (v32 > 3) {
          int v33 = 0;
        }
        else {
          int v33 = dword_1D0B888A0[v32];
        }
        snprintf(__str, 0x10uLL, "%u", v33);
        __strlcat_chk();
        __strlcat_chk();
        uint64_t v29 = StreamBasicDescription;
        goto LABEL_57;
      }
    }
  }
LABEL_63:
  if (CMGetAttachment(v10, (CFStringRef)*MEMORY[0x1E4F1F2F8], 0))
  {
    *(void *)&long long v79 = FigCFNumberGetUInt64();
    BYTE8(v79) = 1;
    bufferedAudioEngine_createAndEnqueueEmptyMessageForSending((uint64_t)a1, (uint64_t)v78);
    uint64_t v13 = 0;
    CFDataRef v37 = 0;
    CFDictionaryRef v38 = 0;
    *(void *)&v85[0] = 1;
    goto LABEL_105;
  }
  if (!CMSampleBufferGetNumSamples(v10)) {
    goto LABEL_103;
  }
  CMFormatDescriptionRef FormatDescription = CMSampleBufferGetFormatDescription(v10);
  CFAllocatorRef v40 = *v27;
  uint64_t v41 = APSAudioFormatDescriptionCreateWithCMFormatDescription();
  if (v41)
  {
    uint64_t v13 = v41;
LABEL_212:
    APSLogErrorAt();
    goto LABEL_104;
  }
  if (APSAudioFormatDescriptionCreateWithCMFormatDescription()
    && gLogCategory_APAudioEngineBuffered <= 30
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  CFAllocatorRef allocator = v40;
  APSAudioFormatDescriptionGetASBD();
  if (!APSAudioFormatDescriptionListContainsFormat())
  {
    *(void *)CMTime time = 0;
    APSAudioFormatDescriptionCopyDebugString();
    if (gLogCategory_APAudioEngineBuffered <= 90
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1) {
        CMBaseObjectGetDerivedStorage();
      }
      LogPrintF();
    }
    if (*(void *)time) {
      CFRelease(*(CFTypeRef *)time);
    }
    *(void *)CMTime time = 0;
    APSAudioFormatDescriptionListCopyDebugString();
    if (gLogCategory_APAudioEngineBuffered <= 90
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1) {
        CMBaseObjectGetDerivedStorage();
      }
      LogPrintF();
    }
    if (*(void *)time) {
      CFRelease(*(CFTypeRef *)time);
    }
LABEL_103:
    uint64_t v13 = 0;
    goto LABEL_104;
  }
  if (!FigCFEqual())
  {
    uint64_t v42 = *(const void **)(v8 + 928);
    CFTypeRef v43 = cf;
    *(void *)(v8 + 928) = cf;
    if (v43) {
      CFRetain(v43);
    }
    if (v42) {
      CFRelease(v42);
    }
    *(void *)CMTime time = 0;
    APSAudioFormatDescriptionCopyDebugString();
    if (gLogCategory_APAudioEngineBuffered <= 50
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1) {
        CMBaseObjectGetDerivedStorage();
      }
      LogPrintF();
    }
    if (*(void *)time) {
      CFRelease(*(CFTypeRef *)time);
    }
    bufferedAudioEngine_updateMaxAudioBurstIfNecessary((uint64_t)a1);
  }
  CFBooleanRef v45 = (const __CFBoolean *)CMGetAttachment(v10, (CFStringRef)*MEMORY[0x1E4F329A8], 0);
  if (v45 && CFBooleanGetValue(v45))
  {
    uint64_t v46 = *(const void **)(v8 + 944);
    *(void *)(v8 + 944) = FormatDescription;
    if (FormatDescription) {
      CFRetain(FormatDescription);
    }
    if (v46) {
      CFRelease(v46);
    }
  }
  uint64_t v47 = APSBadgingFormatInfoCopyBadgeType();
  if (v47)
  {
    uint64_t v13 = v47;
    goto LABEL_212;
  }
  if (FigCFEqual())
  {
    CFDictionaryRef v38 = 0;
  }
  else
  {
    int v48 = *(const void **)(v8 + 952);
    CFTypeRef v49 = v76;
    *(void *)(v8 + 952) = v76;
    if (v49) {
      CFRetain(v49);
    }
    if (v48) {
      CFRelease(v48);
    }
    if (gLogCategory_APAudioEngineBuffered <= 50
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1) {
        CMBaseObjectGetDerivedStorage();
      }
      *(_OWORD *)CMTime time = *(_OWORD *)(v8 + 676);
      *(void *)&time[16] = *(void *)(v8 + 692);
      CMTimeGetSeconds((CMTime *)time);
      LogPrintF();
    }
    keys = @"ContentType";
    values = (void *)v76;
    CFDictionaryRef v38 = CFDictionaryCreate(allocator, (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!v38)
    {
      APSLogErrorAt();
      CFDataRef v37 = 0;
      uint64_t v13 = 4294951816;
      goto LABEL_105;
    }
    *(_OWORD *)CMTime time = *(_OWORD *)(v8 + 676);
    *(void *)&time[16] = *(void *)(v8 + 692);
    APSTimedInfoManagerAddTimedInfo();
  }
  MagicCookie = (const UInt8 *)CMAudioFormatDescriptionGetMagicCookie(FormatDescription, &sizeOut);
  if (MagicCookie)
  {
    CFDataRef v37 = CFDataCreate(allocator, MagicCookie, sizeOut);
    if (!v37)
    {
      APSLogErrorAt();
      uint64_t v13 = 0;
      goto LABEL_105;
    }
  }
  else
  {
    CFDataRef v37 = 0;
  }
  if (!FigCFEqual())
  {
    uint64_t v51 = *(const void **)(v8 + 968);
    *(void *)(v8 + 968) = v37;
    if (v37) {
      CFRetain(v37);
    }
    if (v51) {
      CFRelease(v51);
    }
    *(_DWORD *)(v8 + 984) = 0;
    if (APSSettingsIsFeatureEnabled())
    {
      uint64_t v52 = APAudioHoseManagerBufferedSetMagicCookie(*(void *)(v8 + 1680), *(void *)(v8 + 968));
      if (v52)
      {
        uint64_t v13 = v52;
LABEL_207:
        APSLogErrorAt();
        goto LABEL_105;
      }
    }
    else
    {
      uint64_t v53 = bufferedAudioEngine_setMagicCookieForAllHoses(a1, *(const __CFData **)(v8 + 968));
      if (v53)
      {
        uint64_t v13 = v53;
        goto LABEL_207;
      }
    }
  }
  uint64_t Decryptor = FigSampleBufferGetDecryptor();
  if (Decryptor != *(void *)(v8 + 1144))
  {
    *(void *)(v8 + 1144) = Decryptor;
    if (Decryptor)
    {
      if (FigCPECryptorCopyProperty(Decryptor, *MEMORY[0x1E4F1FE08], (uint64_t)allocator, (uint64_t)&v82)
        || v82 != v12)
      {
        if (gLogCategory_APAudioEngineBuffered <= 90
          && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
        {
          if (a1) {
            CMBaseObjectGetDerivedStorage();
          }
          bufferedAudioEngine_getCryptorIDForCryptor(*(void *)(v8 + 1144));
          LogPrintF();
        }
        CMNotificationCenterGetDefaultLocalCenter();
        FigDispatchAsyncPostNotification();
      }
      else if (APSSettingsIsFeatureEnabled())
      {
        uint64_t v55 = APAudioHoseManagerBufferedSetCryptor(*(void *)(v8 + 1680), *(void *)(v8 + 1144));
        if (v55)
        {
          uint64_t v13 = v55;
          goto LABEL_207;
        }
      }
      else
      {
        uint64_t v56 = bufferedAudioEngine_setCryptorForAllHoses(a1, *(void *)(v8 + 1144));
        if (v56)
        {
          uint64_t v13 = v56;
          goto LABEL_207;
        }
      }
    }
  }
  *(_OWORD *)CFAllocatorRef allocatora = *(_OWORD *)v7;
  *(_OWORD *)((char *)v85 + 8) = *(_OWORD *)v7;
  uint64_t v57 = *(void *)(v7 + 16);
  *((void *)&v85[1] + 1) = v57;
  CFDictionaryRef v58 = (const __CFDictionary *)CMGetAttachment(v10, (CFStringRef)*MEMORY[0x1E4F1F308], 0);
  if (v58)
  {
    CMTimeMakeFromDictionary((CMTime *)time, v58);
    CMTimeValue v95 = *(void *)time;
    CMTimeFlags v59 = *(_DWORD *)&time[12];
    CMTimeScale v96 = *(_DWORD *)&time[8];
    if (time[12])
    {
      CMTimeEpoch v60 = *(void *)&time[16];
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (a1) {
          CMBaseObjectGetDerivedStorage();
        }
        *(void *)CMTime time = v95;
        *(void *)&time[8] = __PAIR64__(v59, v96);
        *(void *)&time[16] = v60;
        CMTimeGetSeconds((CMTime *)time);
        CMSampleBufferGetPresentationTimeStamp(&v75, v10);
        CMTimeGetSeconds(&v75);
        CMSampleBufferGetOutputPresentationTimeStamp(&v74, v10);
        CMTimeGetSeconds(&v74);
        CMSampleBufferGetDuration(&v73, v10);
        CMTimeGetSeconds(&v73);
        CMSampleBufferGetOutputDuration(&v72, v10);
        CMTimeGetSeconds(&v72);
        LogPrintF();
      }
      CMSampleBufferGetPresentationTimeStamp(&v71, v10);
      *(void *)CMTime time = v95;
      *(void *)&time[8] = __PAIR64__(v59, v96);
      *(void *)&time[16] = v60;
      CMTimeAdd((CMTime *)((char *)v85 + 8), &v71, (CMTime *)time);
      CMTime v61 = (_OWORD *)(v8 + 676);
      CMTime lhs = *(CMTime *)(v8 + 676);
      rhs.CMTimeValue value = v95;
      rhs.CMTimeScale timescale = v96;
      rhs.CMTimeFlags flags = v59;
      rhs.CMTimeEpoch epoch = v60;
      CMTimeSubtract((CMTime *)time, &lhs, &rhs);
      *(_OWORD *)(v8 + 676) = *(_OWORD *)time;
      *(void *)(v8 + 692) = *(void *)&time[16];
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (a1) {
          CMBaseObjectGetDerivedStorage();
        }
        *(_OWORD *)CMTime time = *v61;
        *(void *)&time[16] = *(void *)(v8 + 692);
        lhs.CMTimeValue value = v95;
        lhs.CMTimeScale timescale = v96;
        lhs.CMTimeFlags flags = v59;
        lhs.CMTimeEpoch epoch = v60;
        CMTimeAdd(&v70, (CMTime *)time, &lhs);
        CMTimeGetSeconds(&v70);
        *(_OWORD *)CMTime time = *v61;
        *(void *)&time[16] = *(void *)(v8 + 692);
        CMTimeGetSeconds((CMTime *)time);
        LogPrintF();
      }
    }
  }
  long long v86 = *(_OWORD *)allocatora;
  uint64_t v87 = v57;
  CFDictionaryRef v62 = (const __CFDictionary *)CMGetAttachment(v10, (CFStringRef)*MEMORY[0x1E4F1F300], 0);
  if (v62)
  {
    CMTimeMakeFromDictionary((CMTime *)time, v62);
    CMTimeValue v95 = *(void *)time;
    CMTimeFlags v63 = *(_DWORD *)&time[12];
    CMTimeScale v96 = *(_DWORD *)&time[8];
    if (time[12])
    {
      CMTimeEpoch v64 = *(void *)&time[16];
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (a1) {
          CMBaseObjectGetDerivedStorage();
        }
        *(void *)CMTime time = v95;
        *(void *)&time[8] = __PAIR64__(v63, v96);
        *(void *)&time[16] = v64;
        CMTimeGetSeconds((CMTime *)time);
        LogPrintF();
      }
      CMSampleBufferGetPresentationTimeStamp(&v69, v10);
      CMSampleBufferGetDuration(&v68, v10);
      CMTimeAdd((CMTime *)time, &v69, &v68);
      long long v86 = *(_OWORD *)time;
      uint64_t v87 = *(void *)&time[16];
      CMTime lhs = *(CMTime *)time;
      rhs.CMTimeValue value = v95;
      rhs.CMTimeScale timescale = v96;
      rhs.CMTimeFlags flags = v63;
      rhs.CMTimeEpoch epoch = v64;
      CMTimeSubtract((CMTime *)time, &lhs, &rhs);
      long long v86 = *(_OWORD *)time;
      uint64_t v87 = *(void *)&time[16];
    }
  }
  *(void *)&long long v83 = a1;
  *((void *)&v83 + 1) = cf;
  *(void *)&long long v84 = v88;
  BYTE8(v84) = v67;
  *(void *)&v85[0] = 0;
  bufferedAudioEngine_recordPreparedAudioDataAndAudioFormatDuration((uint64_t)a1, v10);
  bufferedAudioEngine_adjustRemoteMediaTimeForDiscontinuity((uint64_t)a1, v10);
  uint64_t v13 = bufferedAudioEngine_processAndEnqueueSampleBuffer(v10, &v83);
  if (v13) {
    goto LABEL_207;
  }
LABEL_105:
  if (a3) {
    *a3 = v85[0];
  }
  if (v82) {
    CFRelease(v82);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v88) {
    CFRelease(v88);
  }
  if (v37) {
    CFRelease(v37);
  }
  if (v76) {
    CFRelease(v76);
  }
  if (v38) {
    CFRelease(v38);
  }
  return v13;
}

double bufferedAudioEngine_getStartUpDelay@<D0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (bufferedAudioEngine_getStartUpDelay_onceToken != -1) {
    dispatch_once(&bufferedAudioEngine_getStartUpDelay_onceToken, &__block_literal_global_515);
  }
  int64_t v6 = bufferedAudioEngine_getStartUpDelay_defaultsWriteStartupDelayMS;
  if (bufferedAudioEngine_getStartUpDelay_defaultsWriteStartupDelayMS == -1234)
  {
    if (bufferedAudioEngine_isSpeakerPlayingBySelf())
    {
      int64_t v6 = 200;
    }
    else if (a2)
    {
      int64_t v6 = 750;
    }
    else
    {
      int64_t v6 = 500;
    }
  }
  CMTimeMake(&time, v6, 1000);
  *(CMTime *)bufferedAudioEngine_getStartUpDelay_bufferedStartUpDelay = time;
  if (gLogCategory_APAudioEngineBuffered <= 30
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1) {
      CMBaseObjectGetDerivedStorage();
    }
    CMTime time = *(CMTime *)bufferedAudioEngine_getStartUpDelay_bufferedStartUpDelay;
    CMTimeGetSeconds(&time);
    LogPrintF();
  }
  double result = *(double *)bufferedAudioEngine_getStartUpDelay_bufferedStartUpDelay;
  *(_OWORD *)a3 = *(_OWORD *)bufferedAudioEngine_getStartUpDelay_bufferedStartUpDelay;
  *(void *)(a3 + 16) = *(void *)&bufferedAudioEngine_getStartUpDelay_bufferedStartUpDelay[16];
  return result;
}

uint64_t __bufferedAudioEngine_getStartUpDelay_block_invoke()
{
  uint64_t result = FigGetCFPreferenceNumberWithDefault();
  bufferedAudioEngine_getStartUpDelay_defaultsWriteStartupDelayMS = result;
  return result;
}

uint64_t bufferedAudioEngine_isSpeakerPlayingBySelf()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = APSIsAPMSpeaker();
  if (result) {
    return *(_DWORD *)(DerivedStorage + 592) == 1 && *(unsigned char *)(*(void *)(DerivedStorage + 584) + 24) != 0;
  }
  return result;
}

uint64_t bufferedAudioEngine_getEncodeMessageBackingSize(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 520))
  {
    APSAPAPBBufEncodeGetMinBackingSize();
    return 0;
  }
  else
  {
    uint64_t v3 = a2 + 11;
    uint64_t v4 = *(void *)(CMBaseObjectGetDerivedStorage() + 552);
    if (v4)
    {
      uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v5) {
        uint64_t v6 = v5;
      }
      else {
        uint64_t v6 = 0;
      }
      uint64_t v7 = *(uint64_t (**)(uint64_t))(v6 + 8);
      if (v7) {
        uint64_t v8 = v7(v4);
      }
      else {
        uint64_t v8 = 0;
      }
      v3 += v8;
    }
  }
  return v3;
}

uint64_t bufferedAudioEngine_encodeMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, OpaqueCMBlockBuffer *a5, OpaqueCMBlockBuffer **a6)
{
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 520)) {
    return APSAPAPBBufEncode();
  }
  uint64_t v13 = *(char **)a3;
  int v14 = *(_DWORD *)(a3 + 8);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  size_t v53 = 0;
  int v54 = 0;
  size_t DataLength = CMBlockBufferGetDataLength(a5);
  uint64_t v52 = 0;
  uint64_t v17 = *(void *)(DerivedStorage + 552);
  if (v17)
  {
    uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v18) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t v20 = *(uint64_t (**)(uint64_t))(v19 + 8);
    if (v20) {
      uint64_t v17 = v20(v17);
    }
    else {
      uint64_t v17 = 0;
    }
  }
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  size_t lengthAtOffsetOut = 0;
  CMTime dataPointerOut = 0;
  uint64_t v47 = 0;
  if (*(unsigned char *)DerivedStorage) {
    goto LABEL_54;
  }
  if (v14 == bufferedAudioEngine_getSampleRateFromTransportAudioFormat())
  {
    *(_DWORD *)uint64_t v46 = 0;
    *(void *)&v46[3] = v13;
    if (a4)
    {
      v46[7] = *(void *)a4;
      if (*(unsigned char *)(a4 + 16))
      {
        if (gLogCategory_APAudioEngineBuffered <= 50
          && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
        {
          if (a1) {
            uint64_t v21 = (const char *)(CMBaseObjectGetDerivedStorage() + 392);
          }
          else {
            uint64_t v21 = "";
          }
          uint64_t v40 = *(unsigned __int16 *)(DerivedStorage + 466);
          uint64_t v41 = v13;
          CFAllocatorRef v39 = v21;
          LogPrintF();
        }
        v46[8] = 1;
      }
    }
    uint64_t v22 = APSTransportMessageSetBufferedAudioDataHeader();
    if (v22)
    {
      uint64_t v11 = v22;
      goto LABEL_53;
    }
    BufferedAudiouint64_t DataPointer = APSTransportMessageGetBufferedAudioDataPointer();
    if (BufferedAudioDataPointer)
    {
      uint64_t v11 = BufferedAudioDataPointer;
      goto LABEL_53;
    }
    if (v53 >= v17 + DataLength)
    {
      if (DataLength && (uint64_t v24 = CMBlockBufferCopyDataBytes(a5, 0, DataLength, v54), v24))
      {
        uint64_t v11 = v24;
      }
      else
      {
        ReferencingBBufWithAudiosize_t DataLength = APSTransportMessageBufferedCreateReferencingBBufWithAudioDataLength();
        if (ReferencingBBufWithAudioDataLength)
        {
          uint64_t v11 = ReferencingBBufWithAudioDataLength;
        }
        else
        {
          if (!*(void *)(DerivedStorage + 552)) {
            goto LABEL_50;
          }
          uint64_t BufferedAudioAADPointer = APSTransportMessageGetBufferedAudioAADPointer();
          if (BufferedAudioAADPointer)
          {
            uint64_t v11 = BufferedAudioAADPointer;
          }
          else
          {
            if (gLogCategory_APAudioEngineBuffered <= 10
              && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
            {
              if (a1) {
                CFDictionaryRef v27 = (const char *)(CMBaseObjectGetDerivedStorage() + 392);
              }
              else {
                CFDictionaryRef v27 = "";
              }
              uint64_t v44 = v51[6];
              uint64_t v45 = v51[7];
              uint64_t v42 = v51[4];
              uint64_t v43 = v51[5];
              uint64_t v40 = v50;
              uint64_t v41 = v51;
              CFAllocatorRef v39 = v27;
              LogPrintF();
            }
            uint64_t DataPointer = CMBlockBufferGetDataPointer(v52, 0xBuLL, &lengthAtOffsetOut, 0, &dataPointerOut);
            if (DataPointer)
            {
              uint64_t v11 = DataPointer;
            }
            else
            {
              if (v17)
              {
                uint64_t v29 = CMBlockBufferGetDataPointer(v52, DataLength + 11, 0, 0, &v47);
                if (v29)
                {
                  uint64_t v11 = v29;
                  goto LABEL_53;
                }
                uint64_t v30 = v47;
              }
              else
              {
                uint64_t v30 = 0;
              }
              uint64_t v31 = *(void *)(DerivedStorage + 552);
              uint64_t v33 = v50;
              int v32 = v51;
              CFStringRef v34 = dataPointerOut;
              uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v35) {
                uint64_t v36 = v35;
              }
              else {
                uint64_t v36 = 0;
              }
              CFDataRef v37 = *(uint64_t (**)(uint64_t, char *, uint64_t, char *, size_t, char *, size_t, char *, uint64_t, const char *, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, void, _DWORD))(v36 + 16);
              if (v37)
              {
                uint64_t v38 = v37(v31, v32, v33, v34, DataLength, v34, DataLength, v30, v17, v39, v40, v41, v42, v43, v44, v45, *(void *)v46, *(_DWORD *)&v46[8]);
                if (!v38)
                {
LABEL_50:
                  if (a6)
                  {
                    uint64_t v11 = 0;
                    *a6 = v52;
                    return v11;
                  }
LABEL_54:
                  uint64_t v11 = 0;
                  goto LABEL_55;
                }
                uint64_t v11 = v38;
              }
              else
              {
                uint64_t v11 = 4294954514;
              }
            }
          }
        }
      }
LABEL_53:
      APSLogErrorAt();
      goto LABEL_55;
    }
    APSLogErrorAt();
    uint64_t v11 = 4294960553;
  }
  else
  {
    APSLogErrorAt();
    uint64_t v11 = 4294960591;
  }
LABEL_55:
  if (v52) {
    CFRelease(v52);
  }
  return v11;
}

uint64_t bufferedAudioEngine_encodeMaxExtensionItemSizesAPAP(uint64_t (*a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, void *a3)
{
  uint64_t v6 = a1(1, 8, a2);
  if (v6)
  {
    uint64_t v24 = v6;
    goto LABEL_39;
  }
  uint64_t v7 = a1(2, 8, a2);
  if (v7)
  {
    uint64_t v24 = v7;
    goto LABEL_39;
  }
  uint64_t v8 = a1(20, 8, a2);
  if (v8)
  {
    uint64_t v24 = v8;
    goto LABEL_39;
  }
  uint64_t v9 = a1(3, 8, a2);
  if (v9)
  {
    uint64_t v24 = v9;
    goto LABEL_39;
  }
  uint64_t v10 = a1(17, 8, a2);
  if (v10)
  {
    uint64_t v24 = v10;
    goto LABEL_39;
  }
  uint64_t v11 = a1(18, 8, a2);
  if (v11)
  {
    uint64_t v24 = v11;
    goto LABEL_39;
  }
  uint64_t v12 = a1(4, 12, a2);
  if (v12)
  {
    uint64_t v24 = v12;
    goto LABEL_39;
  }
  uint64_t v13 = a1(5, 12, a2);
  if (v13)
  {
    uint64_t v24 = v13;
    goto LABEL_39;
  }
  uint64_t v14 = a1(13, 12, a2);
  if (v14)
  {
    uint64_t v24 = v14;
    goto LABEL_39;
  }
  uint64_t v15 = a1(12, 8, a2);
  if (v15)
  {
    uint64_t v24 = v15;
    goto LABEL_39;
  }
  uint64_t v16 = a1(11, 12, a2);
  if (v16)
  {
    uint64_t v24 = v16;
    goto LABEL_39;
  }
  uint64_t v17 = a1(7, 20 * *a3, a2);
  if (v17)
  {
    uint64_t v24 = v17;
    goto LABEL_39;
  }
  uint64_t v18 = a1(8, 4, a2);
  if (v18)
  {
    uint64_t v24 = v18;
    goto LABEL_39;
  }
  uint64_t v19 = a1(14, 4, a2);
  if (v19)
  {
    uint64_t v24 = v19;
    goto LABEL_39;
  }
  uint64_t v20 = a1(15, 4, a2);
  if (v20)
  {
    uint64_t v24 = v20;
    goto LABEL_39;
  }
  uint64_t v21 = a1(16, 4, a2);
  if (v21)
  {
    uint64_t v24 = v21;
    goto LABEL_39;
  }
  uint64_t v22 = a1(9, 16, a2);
  if (v22)
  {
    uint64_t v24 = v22;
    goto LABEL_39;
  }
  uint64_t v23 = a1(10, 8, a2);
  if (v23)
  {
    uint64_t v24 = v23;
    goto LABEL_39;
  }
  uint64_t v24 = a1(19, 20, a2);
  if (v24) {
LABEL_39:
  }
    APSLogErrorAt();
  return v24;
}

uint64_t bufferedAudioEngine_encodeExtensionAPAP(uint64_t (*a1)(uint64_t, CFTypeRef, uint64_t), uint64_t a2, uint64_t a3)
{
  CFTypeRef v70 = 0;
  CMTime dataPointerOut = 0;
  CFTypeRef v68 = 0;
  CFTypeRef v69 = 0;
  CFTypeRef v66 = 0;
  CFTypeRef v67 = 0;
  CMBlockBufferRef v64 = 0;
  CMBlockBufferRef blockBufferOut = 0;
  CFTypeRef cf = 0;
  CMBlockBufferRef v63 = 0;
  CFTypeRef v60 = 0;
  CFTypeRef v61 = 0;
  CFDictionaryRef v58 = 0;
  CFTypeRef v59 = 0;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  CFTypeRef v54 = 0;
  CFTypeRef v55 = 0;
  CMBlockBufferRef v52 = 0;
  CFTypeRef v53 = 0;
  unsigned int v51 = 0;
  unint64_t memoryBlock = 0;
  unsigned int v49 = 0;
  unint64_t v48 = 0;
  if (!a3) {
    goto LABEL_59;
  }
  uint64_t v6 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (*(unsigned char *)(a3 + 16))
  {
    uint64_t BigUIntWithUInt64 = APSCMBlockBufferCreateBigUIntWithUInt64();
    if (BigUIntWithUInt64)
    {
      uint64_t v46 = BigUIntWithUInt64;
      goto LABEL_128;
    }
    uint64_t v8 = a1(1, v70, a2);
    if (v8)
    {
      uint64_t v46 = v8;
      goto LABEL_128;
    }
  }
  if (*(void *)a3)
  {
    uint64_t v9 = APSCMBlockBufferCreateBigUIntWithUInt64();
    if (v9)
    {
      uint64_t v46 = v9;
      goto LABEL_128;
    }
    uint64_t v10 = a1(2, v69, a2);
    if (v10)
    {
      uint64_t v46 = v10;
      goto LABEL_128;
    }
  }
  if (*(void *)(a3 + 8))
  {
    uint64_t v11 = APSCMBlockBufferCreateBigUIntWithUInt64();
    if (v11)
    {
      uint64_t v46 = v11;
      goto LABEL_128;
    }
    uint64_t v12 = a1(20, v68, a2);
    if (v12)
    {
      uint64_t v46 = v12;
      goto LABEL_128;
    }
  }
  if (*(void *)(a3 + 24))
  {
    uint64_t v13 = APSCMBlockBufferCreateBigUIntWithUInt64();
    if (v13)
    {
      uint64_t v46 = v13;
      goto LABEL_128;
    }
    uint64_t v14 = a1(3, v67, a2);
    if (v14)
    {
      uint64_t v46 = v14;
      goto LABEL_128;
    }
  }
  if (*(void *)(a3 + 32))
  {
    uint64_t v15 = APSCMBlockBufferCreateBigUIntWithUInt64();
    if (v15)
    {
      uint64_t v46 = v15;
      goto LABEL_128;
    }
    uint64_t v16 = a1(17, v66, a2);
    if (v16)
    {
      uint64_t v46 = v16;
      goto LABEL_128;
    }
  }
  CFDataRef v17 = *(const __CFData **)(a3 + 40);
  if (v17)
  {
    size_t Length = CFDataGetLength(v17);
    uint64_t v19 = CMBlockBufferCreateWithMemoryBlock(*v6, 0, Length, *v6, 0, 0, Length, 1u, &blockBufferOut);
    if (v19)
    {
      uint64_t v46 = v19;
      goto LABEL_128;
    }
    uint64_t DataPointer = CMBlockBufferGetDataPointer(blockBufferOut, 0, 0, 0, &dataPointerOut);
    if (DataPointer)
    {
      uint64_t v46 = DataPointer;
      goto LABEL_128;
    }
    uint64_t v21 = dataPointerOut;
    BytePtr = CFDataGetBytePtr(*(CFDataRef *)(a3 + 40));
    memcpy(v21, BytePtr, Length);
    uint64_t v23 = a1(18, blockBufferOut, a2);
    if (v23)
    {
      uint64_t v46 = v23;
      goto LABEL_128;
    }
  }
  if (*(unsigned char *)(a3 + 60))
  {
    unint64_t memoryBlock = bswap64(*(void *)(a3 + 48));
    unsigned int v51 = bswap32(*(_DWORD *)(a3 + 56));
    uint64_t v24 = CMBlockBufferCreateWithMemoryBlock(*v6, &memoryBlock, 0xCuLL, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0], 0, 0, 0xCuLL, 0, &v64);
    if (v24)
    {
      uint64_t v46 = v24;
      goto LABEL_128;
    }
    uint64_t v25 = a1(4, v64, a2);
    if (v25)
    {
      uint64_t v46 = v25;
      goto LABEL_128;
    }
  }
  unsigned int v51 = 0;
  unint64_t memoryBlock = 0;
  if (*(unsigned char *)(a3 + 84))
  {
    unint64_t memoryBlock = bswap64(*(void *)(a3 + 72));
    unsigned int v51 = bswap32(*(_DWORD *)(a3 + 80));
    uint64_t v26 = CMBlockBufferCreateWithMemoryBlock(*v6, &memoryBlock, 0xCuLL, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0], 0, 0, 0xCuLL, 0, &v63);
    if (v26)
    {
      uint64_t v46 = v26;
      goto LABEL_128;
    }
    uint64_t v27 = a1(5, v63, a2);
    if (v27)
    {
      uint64_t v46 = v27;
      goto LABEL_128;
    }
  }
  if (*(unsigned char *)(a3 + 152))
  {
    unint64_t v48 = bswap64(*(void *)(a3 + 140));
    unsigned int v49 = bswap32(*(_DWORD *)(a3 + 148));
    uint64_t v28 = CMBlockBufferCreateWithMemoryBlock(*v6, &v48, 0xCuLL, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0], 0, 0, 0xCuLL, 0, &v52);
    if (v28)
    {
      uint64_t v46 = v28;
      goto LABEL_128;
    }
    uint64_t v29 = a1(13, v52, a2);
    if (v29)
    {
      uint64_t v46 = v29;
      goto LABEL_128;
    }
  }
  if (*(void *)(a3 + 96))
  {
    if (!APSAPAPExtensionConvertLoudnessInfoDictLoudnessParametersToBBuf())
    {
      uint64_t v30 = a1(11, cf, a2);
      if (v30)
      {
        uint64_t v46 = v30;
        goto LABEL_128;
      }
    }
    if (!APSAPAPExtensionConvertLoudnessInfoDictSoundCheckInfoToBBuf())
    {
      uint64_t v31 = a1(7, v60, a2);
      if (v31)
      {
        uint64_t v46 = v31;
        goto LABEL_128;
      }
    }
    if (!APSAPAPExtensionConvertLoudnessInfoDictMediaKindToBBuf())
    {
      uint64_t v32 = a1(12, v53, a2);
      if (v32)
      {
        uint64_t v46 = v32;
        goto LABEL_128;
      }
    }
  }
  if (*(_DWORD *)(a3 + 104))
  {
    uint64_t v33 = APSCMBlockBufferCreateBigUIntWithUInt64();
    if (v33)
    {
      uint64_t v46 = v33;
      goto LABEL_128;
    }
    uint64_t v34 = a1(8, v59, a2);
    if (v34)
    {
      uint64_t v46 = v34;
      goto LABEL_128;
    }
  }
  if (*(_DWORD *)(a3 + 108))
  {
    uint64_t v35 = APSCMBlockBufferCreateBigUIntWithUInt64();
    if (v35)
    {
      uint64_t v46 = v35;
      goto LABEL_128;
    }
    uint64_t v36 = a1(14, v58, a2);
    if (v36)
    {
      uint64_t v46 = v36;
      goto LABEL_128;
    }
  }
  if (*(_DWORD *)(a3 + 112))
  {
    uint64_t v37 = APSCMBlockBufferCreateBigUIntWithUInt64();
    if (v37)
    {
      uint64_t v46 = v37;
      goto LABEL_128;
    }
    uint64_t v38 = a1(15, v57, a2);
    if (v38)
    {
      uint64_t v46 = v38;
      goto LABEL_128;
    }
  }
  if (*(_DWORD *)(a3 + 116))
  {
    uint64_t v39 = APSCMBlockBufferCreateBigUIntWithUInt64();
    if (v39)
    {
      uint64_t v46 = v39;
      goto LABEL_128;
    }
    uint64_t v40 = a1(16, v56, a2);
    if (v40)
    {
      uint64_t v46 = v40;
      goto LABEL_128;
    }
  }
  if (*(void *)(a3 + 120))
  {
    uint64_t v41 = APSCMBlockBufferCreateWithUUID();
    if (v41)
    {
      uint64_t v46 = v41;
      goto LABEL_128;
    }
    uint64_t v42 = a1(9, v55, a2);
    if (v42)
    {
      uint64_t v46 = v42;
      goto LABEL_128;
    }
  }
  if (!*(unsigned char *)(a3 + 136)) {
    goto LABEL_55;
  }
  uint64_t v43 = APSCMBlockBufferCreateBigUIntWithUInt64();
  if (v43)
  {
    uint64_t v46 = v43;
  }
  else
  {
    uint64_t v44 = a1(10, v54, a2);
    if (!v44)
    {
LABEL_55:
      if (*(void *)(a3 + 168))
      {
        uint64_t v45 = APSAPAPExtensionConvertSbufTracerDictToBBuf();
        if (v45)
        {
          uint64_t v46 = v45;
        }
        else
        {
          uint64_t v46 = a1(19, v61, a2);
          if (!v46) {
            goto LABEL_60;
          }
        }
        goto LABEL_128;
      }
LABEL_59:
      uint64_t v46 = 0;
      goto LABEL_60;
    }
    uint64_t v46 = v44;
  }
LABEL_128:
  APSLogErrorAt();
LABEL_60:
  if (v70) {
    CFRelease(v70);
  }
  if (v69) {
    CFRelease(v69);
  }
  if (v68) {
    CFRelease(v68);
  }
  if (v67) {
    CFRelease(v67);
  }
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (v66) {
    CFRelease(v66);
  }
  if (v64) {
    CFRelease(v64);
  }
  if (v63) {
    CFRelease(v63);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v61) {
    CFRelease(v61);
  }
  if (v60) {
    CFRelease(v60);
  }
  if (v59) {
    CFRelease(v59);
  }
  if (v55) {
    CFRelease(v55);
  }
  if (v54) {
    CFRelease(v54);
  }
  if (v52) {
    CFRelease(v52);
  }
  if (v53) {
    CFRelease(v53);
  }
  return v46;
}

opaqueCMSampleBuffer *bufferedAudioEngine_processAndRetainSBufFromBufferQueue(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = (opaqueCMSampleBuffer *)CMBufferQueueDequeueAndRetain(*(CMBufferQueueRef *)(DerivedStorage + 1112));
  uint64_t v4 = v3;
  if (v3)
  {
    CMSampleBufferGetOutputPresentationTimeStamp(&time1, v3);
    CMTimeValue value = time1.value;
    CMTimeFlags flags = time1.flags;
    CMTimeScale timescale = time1.timescale;
    CMTimeEpoch epoch = time1.epoch;
    CMItemCount NumSamples = CMSampleBufferGetNumSamples(v4);
    if (flags & 1) != 0 && (*(unsigned char *)(DerivedStorage + 664))
    {
      uint64_t v8 = NumSamples;
      uint64_t v9 = (_OWORD *)(DerivedStorage + 652);
      time1.CMTimeValue value = value;
      time1.CMTimeScale timescale = timescale;
      time1.CMTimeFlags flags = flags;
      time1.CMTimeEpoch epoch = epoch;
      CMTime time2 = *(CMTime *)(DerivedStorage + 652);
      if (CMTimeCompare(&time1, &time2) < 0 && v8 >= 1)
      {
        if (gLogCategory_APAudioEngineBuffered <= 50
          && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
        {
          if (a1) {
            CMBaseObjectGetDerivedStorage();
          }
          *(_OWORD *)&time1.CMTimeValue value = *v9;
          time1.CMTimeEpoch epoch = *(void *)(DerivedStorage + 668);
          CMTimeGetSeconds(&time1);
          time1.CMTimeValue value = value;
          time1.CMTimeScale timescale = timescale;
          time1.CMTimeFlags flags = flags;
          time1.CMTimeEpoch epoch = epoch;
          CMTimeGetSeconds(&time1);
          LogPrintF();
        }
        uint64_t v10 = MEMORY[0x1E4F1F9F8];
        *uint64_t v9 = *MEMORY[0x1E4F1F9F8];
        *(void *)(DerivedStorage + 668) = *(void *)(v10 + 16);
      }
    }
  }
  return v4;
}

uint64_t APAudioHoseManagerBufferedSetMagicCookie(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 72);
  if (!v6) {
    return 4294954514;
  }
  return v6(a1, a2);
}

uint64_t bufferedAudioEngine_setMagicCookieForAllHoses(const void *a1, const __CFData *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    if (*(unsigned char *)(DerivedStorage + 520))
    {
      uint64_t v5 = (void *)(DerivedStorage + 584);
      while (1)
      {
        uint64_t v5 = (void *)*v5;
        if (!v5) {
          return 0;
        }
        if (gLogCategory_APAudioEngineBuffered <= 50
          && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
        {
          if (a1) {
            CMBaseObjectGetDerivedStorage();
          }
          bufferedAudioEngine_getMagicCookieIDForMagicCookieData(a2);
          LogPrintF();
        }
        if (a1) {
          CFRetain(a1);
        }
        uint64_t v6 = (const void *)v5[2];
        uint64_t MagicCookieIDForMagicCookieData = bufferedAudioEngine_getMagicCookieIDForMagicCookieData(a2);
        APSEndpointStreamAudioHoseProtocolGetProtocolID();
        uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
        if (!ProtocolVTable) {
          break;
        }
        uint64_t v9 = *(void *)(ProtocolVTable + 16);
        if (!v9) {
          break;
        }
        uint64_t v10 = *(uint64_t (**)(const void *, uint64_t, const __CFData *, uint64_t (*)(const void *, uint64_t, int, const void *), const void *))(v9 + 104);
        if (!v10)
        {
          uint64_t v12 = 4294954514;
          bufferedAudioEngine_hoseSetMagicCookieCallbackCompletionHandler(v6, MagicCookieIDForMagicCookieData, -12782, a1);
          goto LABEL_21;
        }
        uint64_t v11 = v10(v6, MagicCookieIDForMagicCookieData, a2, bufferedAudioEngine_hoseSetMagicCookieCallbackCompletionHandler, a1);
        if (v11)
        {
          uint64_t v12 = v11;
LABEL_21:
          if (gLogCategory_APAudioEngineBuffered <= 90
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (a1) {
              CMBaseObjectGetDerivedStorage();
            }
            LogPrintF();
          }
          return v12;
        }
      }
      uint64_t v12 = 4294954508;
      goto LABEL_21;
    }
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294951815;
  }
}

void bufferedAudioEngine_recordPreparedAudioDataAndAudioFormatDuration(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  CMBaseObjectGetDerivedStorage();
  CMTime v3 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CMSampleBufferGetOutputDuration(&v3, a2);
  APSAudioFormatDescriptionCopyDebugString();
  APSLogErrorAt();
}

uint64_t bufferedAudioEngine_adjustRemoteMediaTimeForDiscontinuity(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTime v16 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CMTime v15 = v16;
  CMTime v14 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime v13 = v14;
  CMTime v12 = v14;
  uint64_t result = CMSampleBufferGetNumSamples(a2);
  if (result >= 1)
  {
    CMSampleBufferGetOutputDuration(&v15, a2);
    CMSampleBufferGetOutputPresentationTimeStamp(&v16, a2);
    CMTime lhs = v16;
    CMTime rhs = v15;
    uint64_t result = (uint64_t)CMTimeAdd(&v14, &lhs, &rhs);
    uint64_t v6 = (_OWORD *)(DerivedStorage + 652);
    if (*(unsigned char *)(DerivedStorage + 664))
    {
      CMTime lhs = v16;
      *(_OWORD *)&rhs.CMTimeValue value = *v6;
      rhs.CMTimeEpoch epoch = *(void *)(DerivedStorage + 668);
      uint64_t result = CMTimeCompare(&lhs, &rhs);
      if (result)
      {
        CMTime lhs = v16;
        *(_OWORD *)&rhs.CMTimeValue value = *v6;
        rhs.CMTimeEpoch epoch = *(void *)(DerivedStorage + 668);
        CMTimeSubtract(&v13, &lhs, &rhs);
        uint64_t v7 = (_OWORD *)(DerivedStorage + 676);
        CMTime lhs = *(CMTime *)(DerivedStorage + 676);
        CMTime rhs = v13;
        uint64_t result = (uint64_t)CMTimeAdd(&v12, &lhs, &rhs);
        if (gLogCategory_APAudioEngineBuffered <= 50)
        {
          if (gLogCategory_APAudioEngineBuffered != -1 || (uint64_t result = _LogCategory_Initialize(), result))
          {
            if (a1) {
              CMBaseObjectGetDerivedStorage();
            }
            *(_OWORD *)&lhs.CMTimeValue value = *v6;
            lhs.CMTimeEpoch epoch = *(void *)(DerivedStorage + 668);
            CMTimeGetSeconds(&lhs);
            CMTime lhs = v16;
            CMTimeGetSeconds(&lhs);
            CMTime lhs = v13;
            CMTimeGetSeconds(&lhs);
            *(_OWORD *)&lhs.CMTimeValue value = *v7;
            lhs.CMTimeEpoch epoch = *(void *)(DerivedStorage + 692);
            CMTimeGetSeconds(&lhs);
            CMTime lhs = v12;
            CMTimeGetSeconds(&lhs);
            CMSampleBufferGetPresentationTimeStamp(&time, a2);
            CMTimeGetSeconds(&time);
            CMSampleBufferGetDuration(&v8, a2);
            CMTimeGetSeconds(&v8);
            CMTime lhs = v16;
            CMTimeGetSeconds(&lhs);
            CMTime lhs = v15;
            CMTimeGetSeconds(&lhs);
            uint64_t result = LogPrintF();
          }
        }
        *uint64_t v7 = *(_OWORD *)&v12.value;
        *(void *)(DerivedStorage + 692) = v12.epoch;
      }
    }
    *uint64_t v6 = *(_OWORD *)&v14.value;
    *(void *)(DerivedStorage + 668) = v14.epoch;
  }
  return result;
}

uint64_t bufferedAudioEngine_processAndEnqueueSampleBuffer(opaqueCMSampleBuffer *a1, void *a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  size_t packetDescriptionsSizeOut = 0;
  packetDescriptionsPointerOut = 0;
  CMBlockBufferRef blockBufferOut = 0;
  int v2 = (CMTime *)MEMORY[0x1E4F1F9F8];
  memset(&v32, 0, sizeof(v32));
  CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  CMTimeScale timescale = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
  CMSampleBufferRef sbuf = 0;
  if (!a2) {
    goto LABEL_37;
  }
  uint64_t v4 = a1;
  if (CMSampleBufferGetSampleSize(a1, 0))
  {
    uint64_t v5 = 0;
    goto LABEL_23;
  }
  uint64_t NumSamples = CMSampleBufferGetNumSamples(v4);
  if (CMSampleBufferGetAudioStreamPacketDescriptionsPtr(v4, (const AudioStreamPacketDescription **)&packetDescriptionsPointerOut, &packetDescriptionsSizeOut)|| !packetDescriptionsSizeOut|| NumSamples != packetDescriptionsSizeOut >> 4|| (DataBuffer = CMSampleBufferGetDataBuffer(v4)) == 0|| (CMTime v8 = DataBuffer, (v9 = CMSampleBufferGetFormatDescription(v4)) == 0))
  {
LABEL_37:
    APSLogErrorAt();
    uint64_t v27 = 4294954516;
    goto LABEL_27;
  }
  uint64_t v10 = v9;
  CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CMTime v12 = (size_t *)CFAllocatorAllocate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 8 * NumSamples, 0);
  if (!v12)
  {
    APSLogErrorAt();
    uint64_t v27 = 4294954510;
    goto LABEL_27;
  }
  uint64_t v5 = v12;
  uint64_t v13 = CMBlockBufferCreateEmpty(v11, NumSamples, 0, &blockBufferOut);
  if (v13)
  {
    uint64_t v27 = v13;
LABEL_33:
    APSLogErrorAt();
    goto LABEL_26;
  }
  formatDescription = v10;
  if (NumSamples >= 1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    while (1)
    {
      CMTime v16 = &packetDescriptionsPointerOut[v14];
      size_t mDataByteSize = packetDescriptionsPointerOut[v14].mDataByteSize;
      v5[v15] = mDataByteSize;
      uint64_t appended = CMBlockBufferAppendBufferReference(blockBufferOut, v8, v16->mStartOffset, mDataByteSize, 0);
      if (appended) {
        break;
      }
      ++v15;
      ++v14;
      if (NumSamples == v15) {
        goto LABEL_15;
      }
    }
    uint64_t v27 = appended;
    goto LABEL_33;
  }
LABEL_15:
  CMSampleBufferGetPresentationTimeStamp(&v30, v4);
  CMTimeValue value = v30.value;
  CMTimeScale timescale = v30.timescale;
  if ((v30.flags & 1) == 0)
  {
    APSLogErrorAt();
    uint64_t v27 = 4294954516;
    goto LABEL_25;
  }
  v32.presentationTimeStamp.CMTimeValue value = value;
  v32.presentationTimeStamp.CMTimeScale timescale = timescale;
  v32.presentationTimeStamp.CMTimeFlags flags = v30.flags;
  v32.presentationTimeStamp.CMTimeEpoch epoch = v30.epoch;
  int64_t FramesPerPacket = APSAudioFormatDescriptionGetFramesPerPacket();
  APSAudioFormatDescriptionGetSampleRate();
  CMTimeMake(&v32.duration, FramesPerPacket, (int)v20);
  v32.decodeTimeStamp = *v2;
  uint64_t v21 = CMSampleBufferCreateReady(v11, blockBufferOut, formatDescription, NumSamples, 1, &v32, NumSamples, v5, &sbuf);
  if (v21)
  {
    uint64_t v27 = v21;
    APSLogErrorAt();
    goto LABEL_25;
  }
  CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(v4, 0);
  if (SampleAttachmentsArray)
  {
    CFArrayRef v23 = SampleAttachmentsArray;
    CFArrayRef v24 = CMSampleBufferGetSampleAttachmentsArray(sbuf, 1u);
    if (!v24)
    {
      APSLogErrorAt();
      uint64_t v27 = 4294954510;
      goto LABEL_25;
    }
    if (NumSamples >= 1)
    {
      CFArrayRef v25 = v24;
      for (CFIndex i = 0; i != NumSamples; ++i)
      {
        CFArrayGetValueAtIndex(v25, i);
        CFArrayGetValueAtIndex(v23, i);
        FigCFDictionarySetAllValuesFromDictionary();
      }
    }
  }
  uint64_t v4 = sbuf;
LABEL_23:
  uint64_t v27 = CMSampleBufferCallForEachSample(v4, (OSStatus (__cdecl *)(CMSampleBufferRef, CMItemCount, void *))bufferedAudioEngine_enqueueSingleSampleCompressedSBufCallback, a2);
  if (!v27)
  {
    if (!v5) {
      goto LABEL_27;
    }
    goto LABEL_25;
  }
  APSLogErrorAt();
  if (v5)
  {
LABEL_25:
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
LABEL_26:
    CFAllocatorDeallocate(v11, v5);
  }
LABEL_27:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (sbuf) {
    CFRelease(sbuf);
  }
  return v27;
}

void bufferedAudioEngine_setAudioFormatDurationDict(CMTime *a1, __CFDictionary *a2, const void *a3)
{
  CMTime v12 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  if (FigCFDictionaryGetCMTimeIfPresent())
  {
    CMTime lhs = *a1;
    CMTime v9 = v12;
    CMTimeAdd(&time, &lhs, &v9);
    *a1 = time;
  }
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CMTime time = *a1;
  CFDictionaryRef v7 = CMTimeCopyAsDictionary(&time, v6);
  if (v7)
  {
    CFDictionaryRef v8 = v7;
    CFDictionarySetValue(a2, a3, v7);
    CFRelease(v8);
  }
  else
  {
    APSLogErrorAt();
  }
}

uint64_t bufferedAudioEngine_enqueueSingleSampleCompressedSBufCallback(opaqueCMSampleBuffer *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v142 = *MEMORY[0x1E4F143B8];
  uint64_t v114 = *(void *)a3;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v6 = *(unsigned __int8 *)(a3 + 24);
  CFTypeRef cf = 0;
  CFTypeRef v127 = 0;
  uint64_t v7 = MEMORY[0x1E4F1F9F8];
  uint64_t v139 = *(void *)(MEMORY[0x1E4F1F9F8] + 12);
  int epoch_high = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 20);
  uint64_t v137 = v139;
  int v138 = epoch_high;
  long long v125 = 0u;
  memset(v126, 0, sizeof(v126));
  long long v123 = 0u;
  long long v124 = 0u;
  long long v121 = 0u;
  long long v122 = 0u;
  long long v119 = 0u;
  long long v120 = 0u;
  long long v118 = 0u;
  CMTimeValue v8 = *MEMORY[0x1E4F1F9F8];
  CMTimeValue v135 = v8;
  CMTimeScale v9 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
  CMTimeScale v136 = v9;
  CMTimeEpoch v10 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  CMTimeValue v133 = v8;
  CMTimeScale v134 = v9;
  long long v107 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&v117.CMTimeScale value = *MEMORY[0x1E4F1F9F8];
  uint64_t v110 = (const void *)v10;
  v117.CMTimeEpoch epoch = v10;
  long long v11 = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 48);
  *(_OWORD *)&timingInfoOut.presentationTimeStamp.CMTimeScale timescale = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 32);
  *(_OWORD *)&timingInfoOut.decodeTimeStamp.CMTimeScale value = v11;
  timingInfoOut.decodeTimeStamp.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA70] + 64);
  long long v12 = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 16);
  *(_OWORD *)&timingInfoOut.duration.CMTimeScale value = *MEMORY[0x1E4F1FA70];
  *(_OWORD *)&timingInfoOut.duration.CMTimeEpoch epoch = v12;
  if (!a1)
  {
    APSLogErrorAt();
    if (gLogCategory_APAudioEngineBuffered > 90
      || gLogCategory_APAudioEngineBuffered == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_200;
    }
    if (!v114) {
      goto LABEL_199;
    }
    goto LABEL_128;
  }
  CMBlockBufferRef DataBuffer = CMSampleBufferGetDataBuffer(a1);
  if (!DataBuffer)
  {
    APSLogErrorAt();
    if (gLogCategory_APAudioEngineBuffered > 90
      || gLogCategory_APAudioEngineBuffered == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_200;
    }
    if (!v114) {
      goto LABEL_199;
    }
    goto LABEL_128;
  }
  uint64_t v14 = DataBuffer;
  size_t TotalSampleSize = CMSampleBufferGetTotalSampleSize(a1);
  if (!TotalSampleSize)
  {
    APSLogErrorAt();
    if (gLogCategory_APAudioEngineBuffered > 90
      || gLogCategory_APAudioEngineBuffered == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_200;
    }
    if (!v114)
    {
LABEL_199:
      LogPrintF();
LABEL_200:
      CFArrayRef v51 = 0;
      uint64_t v23 = 0;
      goto LABEL_178;
    }
LABEL_128:
    CMBaseObjectGetDerivedStorage();
    goto LABEL_199;
  }
  uint64_t v16 = TotalSampleSize;
  CMTimeScale v99 = v9;
  CMTimeValue v100 = v8;
  uint64_t v111 = a3;
  CMSampleBufferGetPresentationTimeStamp(&lhs, a1);
  CMTimeValue v17 = lhs.value;
  uint64_t v139 = *(void *)&lhs.flags;
  CMTimeScale value = lhs.timescale;
  int epoch_high = HIDWORD(lhs.epoch);
  CMSampleBufferGetOutputPresentationTimeStamp(&lhs, a1);
  CMTimeValue v101 = lhs.value;
  uint64_t v137 = *(void *)&lhs.flags;
  CMTimeScale timescale = lhs.timescale;
  int v138 = HIDWORD(lhs.epoch);
  unsigned int FramesPerPacket = APSAudioFormatDescriptionGetFramesPerPacket();
  CFDataRef v19 = *(const __CFData **)(DerivedStorage + 968);
  if (v19) {
    CFDataGetLength(v19);
  }
  if (FigCFDictionaryGetValue()) {
    APSAudioFormatDescriptionGetChannelCount();
  }
  size_t EncodeMessageBackingSize = bufferedAudioEngine_getEncodeMessageBackingSize(v114, v16);
  uint64_t v21 = v111;
  if (v6)
  {
    uint64_t NextFreeBacking = (const void *)APMessageRingBufferedGetNextFreeBacking(*(void *)(DerivedStorage + 560), EncodeMessageBackingSize);
    if (NextFreeBacking)
    {
      CFTypeRef cf = CFRetain(NextFreeBacking);
      if (cf)
      {
        int v97 = 1;
        goto LABEL_26;
      }
    }
    else
    {
      CFTypeRef cf = 0;
    }
    if (gLogCategory_APAudioEngineBuffered <= 90
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (v114) {
        CMBaseObjectGetDerivedStorage();
      }
      LogPrintF();
    }
  }
  if (bufferedAudioEngine_createMessageBackingBBuf(*(CFAllocatorRef *)(DerivedStorage + 360), EncodeMessageBackingSize, (CMBlockBufferRef *)&cf))
  {
    uint64_t v23 = 4294895201;
    if (gLogCategory_APAudioEngineBuffered <= 90
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (v114) {
        CMBaseObjectGetDerivedStorage();
      }
      LogPrintF();
    }
    CFArrayRef v51 = 0;
    goto LABEL_178;
  }
  int v97 = 0;
LABEL_26:
  CMTimeValue v24 = *(void *)(DerivedStorage + 676);
  CMTimeEpoch v25 = *(void *)(DerivedStorage + 692);
  uint64_t v98 = (long long *)(DerivedStorage + 676);
  uint64_t v26 = *(void *)(DerivedStorage + 684);
  APSAudioFormatDescriptionGetSampleRate();
  time.CMTimeScale value = v24;
  *(void *)&time.CMTimeScale timescale = v26;
  time.CMTimeEpoch epoch = v25;
  CMTimeConvertScale(&lhs, &time, (int)v27, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
  CMTimeValue v112 = lhs.value;
  CMTimeScale v113 = lhs.timescale;
  CMTimeFlags flags = lhs.flags;
  CMTimeValue v105 = v17;
  CMTimeEpoch epoch = lhs.epoch;
  if (*(void *)(DerivedStorage + 1128) >= *(void *)(DerivedStorage + 408)) {
    int v28 = 20;
  }
  else {
    int v28 = 50;
  }
  if (v28 >= gLogCategory_APAudioEngineBuffered
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (v114) {
      CMBaseObjectGetDerivedStorage();
    }
    lhs.CMTimeScale value = v17;
    *(void *)&lhs.CMTimeFlags flags = v139;
    lhs.CMTimeScale timescale = value;
    HIDWORD(lhs.epoch) = epoch_high;
    CMTimeGetSeconds(&lhs);
    lhs.CMTimeScale value = v101;
    *(void *)&lhs.CMTimeFlags flags = v137;
    lhs.CMTimeScale timescale = timescale;
    HIDWORD(lhs.epoch) = v138;
    CMTimeGetSeconds(&lhs);
    lhs.CMTimeScale value = v112;
    lhs.CMTimeScale timescale = v113;
    lhs.CMTimeFlags flags = flags;
    lhs.CMTimeEpoch epoch = epoch;
    CMTimeGetSeconds(&lhs);
    LogPrintF();
    uint64_t v21 = v111;
  }
  *(void *)&long long v118 = APSAudioFormatDescriptionGetAudioFormatIndex();
  *((void *)&v118 + 1) = APSAudioFormatDescriptionGetAudioFormatIndex();
  LOBYTE(v119) = 0;
  LOBYTE(v126[1]) = 0;
  int IsFeatureEnabled = APSSettingsIsFeatureEnabled();
  uint64_t v30 = *(void *)(DerivedStorage + 1144);
  if (IsFeatureEnabled)
  {
    CMTimeScale v31 = value;
    if (v30)
    {
      uint64_t v32 = *(void *)(DerivedStorage + 1680);
      uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v33) {
        uint64_t v34 = v33;
      }
      else {
        uint64_t v34 = 0;
      }
      if (*(void *)(v34 + 64)) {
        uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 80))(v32, v30);
      }
      else {
        uint64_t v37 = -12782;
      }
      *((void *)&v119 + 1) = v37;
      CMTimeScale v31 = value;
    }
    uint64_t v38 = *(void *)(DerivedStorage + 968);
    if (v38)
    {
      uint64_t v39 = *(void *)(DerivedStorage + 1680);
      uint64_t v40 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v41 = v40 ? v40 : 0;
      uint64_t v42 = *(uint64_t (**)(uint64_t, uint64_t))(v41 + 88);
      uint64_t v43 = v42 ? v42(v39, v38) : -12782;
      *(void *)&long long v120 = v43;
      unsigned int v36 = *(_DWORD *)(DerivedStorage + 984);
      CMTimeScale v31 = value;
      if (v36 < 0xA)
      {
LABEL_60:
        *((void *)&v120 + 1) = *(void *)(DerivedStorage + 968);
        *(_DWORD *)(DerivedStorage + 984) = v36 + 1;
      }
    }
  }
  else
  {
    CMTimeScale v31 = value;
    if (v30) {
      *((void *)&v119 + 1) = bufferedAudioEngine_getCryptorIDForCryptor(*(void *)(DerivedStorage + 1144));
    }
    CFDataRef v35 = *(const __CFData **)(DerivedStorage + 968);
    if (v35)
    {
      *(void *)&long long v120 = bufferedAudioEngine_getMagicCookieIDForMagicCookieData(v35);
      unsigned int v36 = *(_DWORD *)(DerivedStorage + 984);
      if (v36 <= 9) {
        goto LABEL_60;
      }
    }
  }
  CMTimeFlags v44 = *(_DWORD *)(v7 + 12);
  CMSampleBufferGetDuration(&lhs, a1);
  CMTimeFlags v45 = lhs.flags;
  CMTimeScale v134 = lhs.timescale;
  CMTimeValue v133 = lhs.value;
  CMTimeEpoch v46 = lhs.epoch;
  CMTimeValue v47 = v105;
  lhs.CMTimeScale value = v105;
  *(void *)&lhs.CMTimeFlags flags = v139;
  lhs.CMTimeScale timescale = v31;
  HIDWORD(lhs.epoch) = epoch_high;
  time.CMTimeScale value = v133;
  time.CMTimeScale timescale = v134;
  time.CMTimeFlags flags = v45;
  CMTimeFlags v104 = v45;
  CMTimeEpoch v102 = v46;
  time.CMTimeEpoch epoch = v46;
  CMTimeAdd(&v117, &lhs, &time);
  if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 1168)) >= 1)
  {
    v126[5] = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 1168), 0);
    CMSetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F329B0], v126[5], 1u);
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 1168), 0);
    FigEndpointStreamAudioEngineSbufTracerDebugPrint();
  }
  if (*(unsigned char *)(v21 + 52))
  {
    unint64_t v48 = (_OWORD *)(v21 + 40);
    CMTime lhs = *(CMTime *)(v21 + 40);
    CMTime time = v117;
    if (CMTimeCompare(&lhs, &time) < 0)
    {
      *(_OWORD *)&lhs.CMTimeScale value = *v48;
      lhs.CMTimeEpoch epoch = *(void *)(v21 + 56);
      time.CMTimeScale value = v105;
      *(void *)&time.CMTimeFlags flags = v139;
      time.CMTimeScale timescale = v31;
      HIDWORD(time.epoch) = epoch_high;
      CMTimeFlags v49 = v44;
      CMTimeEpoch v50 = (CMTimeEpoch)v110;
      if (CMTimeCompare(&lhs, &time) >= 1)
      {
        *(_OWORD *)&lhs.CMTimeScale value = *v48;
        lhs.CMTimeEpoch epoch = *(void *)(v21 + 56);
        CMTime time = v117;
        CMTimeFlags v49 = v44;
        CMTimeEpoch v50 = (CMTimeEpoch)v110;
        if (CMTimeCompare(&lhs, &time) < 0)
        {
          *(_OWORD *)&time.CMTimeScale value = *v48;
          time.CMTimeEpoch epoch = *(void *)(v21 + 56);
          rhs.CMTimeScale value = v105;
          *(void *)&rhs.CMTimeFlags flags = v139;
          rhs.CMTimeScale timescale = v31;
          HIDWORD(rhs.epoch) = epoch_high;
          CMTimeSubtract(&lhs, &time, &rhs);
          CMTimeValue v135 = lhs.value;
          CMTimeFlags v49 = lhs.flags;
          CMTimeScale v136 = lhs.timescale;
          CMTimeEpoch v50 = lhs.epoch;
        }
      }
    }
    else
    {
      CMTimeValue v135 = v133;
      CMTimeScale v136 = v134;
      CMTimeFlags v49 = v104;
      CMTimeEpoch v50 = v102;
    }
    CMTimeValue v47 = v105;
    if (v49)
    {
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (v114) {
          CMBaseObjectGetDerivedStorage();
        }
        lhs.CMTimeScale value = v135;
        lhs.CMTimeScale timescale = v136;
        lhs.CMTimeFlags flags = v49;
        lhs.CMTimeEpoch epoch = v50;
        CMTimeGetSeconds(&lhs);
        lhs.CMTimeScale value = v112;
        lhs.CMTimeScale timescale = v113;
        lhs.CMTimeFlags flags = flags;
        lhs.CMTimeEpoch epoch = epoch;
        CMTimeGetSeconds(&lhs);
        LogPrintF();
        uint64_t v21 = v111;
        CMTimeScale v31 = value;
        CMTimeValue v47 = v105;
      }
      *(void *)&long long v121 = v135;
      *((void *)&v121 + 1) = __PAIR64__(v49, v136);
      *(void *)&long long v122 = v50;
    }
  }
  if (*(unsigned char *)(v21 + 76))
  {
    CMBlockBufferRef v52 = (_OWORD *)(v21 + 64);
    CMTimeValue v135 = v100;
    CMTimeScale v136 = v99;
    CMTime lhs = *(CMTime *)(v21 + 64);
    time.CMTimeScale value = v47;
    *(void *)&time.CMTimeFlags flags = v139;
    time.CMTimeScale timescale = v31;
    HIDWORD(time.epoch) = epoch_high;
    if (CMTimeCompare(&lhs, &time) <= 0)
    {
      CMTimeValue v135 = v133;
      CMTimeScale v136 = v134;
      CMTimeFlags v44 = v104;
      CMTimeEpoch v53 = v102;
    }
    else
    {
      *(_OWORD *)&lhs.CMTimeScale value = *v52;
      lhs.CMTimeEpoch epoch = *(void *)(v21 + 80);
      time.CMTimeScale value = v47;
      *(void *)&time.CMTimeFlags flags = v139;
      time.CMTimeScale timescale = v31;
      HIDWORD(time.epoch) = epoch_high;
      if (CMTimeCompare(&lhs, &time) < 1)
      {
        CMTimeEpoch v53 = (CMTimeEpoch)v110;
        if ((v44 & 1) == 0) {
          goto LABEL_98;
        }
        goto LABEL_88;
      }
      *(_OWORD *)&lhs.CMTimeScale value = *v52;
      lhs.CMTimeEpoch epoch = *(void *)(v21 + 80);
      CMTime time = v117;
      CMTimeEpoch v53 = (CMTimeEpoch)v110;
      if (CMTimeCompare(&lhs, &time) < 0)
      {
        CMTime time = v117;
        *(_OWORD *)&rhs.CMTimeScale value = *v52;
        rhs.CMTimeEpoch epoch = *(void *)(v21 + 80);
        CMTimeSubtract(&lhs, &time, &rhs);
        CMTimeValue v135 = lhs.value;
        CMTimeFlags v44 = lhs.flags;
        CMTimeScale v136 = lhs.timescale;
        CMTimeEpoch v53 = lhs.epoch;
        if ((lhs.flags & 1) == 0) {
          goto LABEL_98;
        }
        goto LABEL_88;
      }
    }
    if ((v44 & 1) == 0) {
      goto LABEL_98;
    }
LABEL_88:
    if (gLogCategory_APAudioEngineBuffered <= 50
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (v114) {
        CMBaseObjectGetDerivedStorage();
      }
      lhs.CMTimeScale value = v135;
      lhs.CMTimeScale timescale = v136;
      lhs.CMTimeFlags flags = v44;
      lhs.CMTimeEpoch epoch = v53;
      CMTimeGetSeconds(&lhs);
      lhs.CMTimeScale value = v112;
      lhs.CMTimeScale timescale = v113;
      lhs.CMTimeFlags flags = flags;
      lhs.CMTimeEpoch epoch = epoch;
      CMTimeGetSeconds(&lhs);
      LogPrintF();
    }
    *((void *)&v122 + 1) = v135;
    *(void *)&long long v123 = __PAIR64__(v44, v136);
    *((void *)&v123 + 1) = v53;
    uint64_t v21 = v111;
  }
LABEL_98:
  if (CMSampleBufferGetSampleTimingInfo(a1, 0, &timingInfoOut))
  {
    *(_OWORD *)((char *)&v126[1] + 4) = v107;
    *(CFTypeRef *)((char *)&v126[3] + 4) = v110;
    APSSignalErrorAt();
  }
  else
  {
    *(_OWORD *)((char *)&v126[1] + 4) = *(_OWORD *)&timingInfoOut.duration.value;
    *(CMTimeEpoch *)((char *)&v126[3] + 4) = timingInfoOut.duration.epoch;
  }
  CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a1, 0);
  CFArrayRef v51 = SampleAttachmentsArray;
  if (SampleAttachmentsArray)
  {
    if (CFArrayGetCount(SampleAttachmentsArray) >= 1
      && (ValueAtunsigned int Index = (const __CFDictionary *)CFArrayGetValueAtIndex(v51, 0),
          (CFStringRef v56 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E4F21A08])) != 0))
    {
      CFArrayRef v51 = CFUUIDCreateFromString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v56);
      *((void *)&v125 + 1) = v51;
    }
    else
    {
      CFArrayRef v51 = 0;
    }
  }
  if (*(void *)(DerivedStorage + 1152)) {
    *(void *)&long long v124 = *(void *)(DerivedStorage + 1152);
  }
  *((void *)&v124 + 1) = APSAudioFormatDescriptionGetFramesPerPacket();
  *(void *)&long long v125 = 0;
  APSAudioFormatDescriptionGetSampleRate();
  double v58 = v57;
  uint64_t v59 = CMBaseObjectGetDerivedStorage();
  *(_OWORD *)&lhs.CMTimeScale value = v107;
  lhs.CMTimeEpoch epoch = (CMTimeEpoch)v110;
  *(_OWORD *)&time.CMTimeScale value = v107;
  time.CMTimeEpoch epoch = (CMTimeEpoch)v110;
  if ((flags & 1) == 0)
  {
    APSLogErrorAt();
LABEL_130:
    char v61 = 0;
    goto LABEL_131;
  }
  uint64_t v60 = v59;
  if (CFArrayGetCount(*(CFArrayRef *)(v59 + 1024)) < 1) {
    goto LABEL_130;
  }
  rhs.CMTimeScale value = v112;
  rhs.CMTimeScale timescale = v113;
  rhs.CMTimeFlags flags = flags;
  rhs.CMTimeEpoch epoch = epoch;
  CMTime v130 = *(CMTime *)(v60 + 700);
  CMTimeSubtract(&time, &rhs, &v130);
  CMTimeMake(&v130, FramesPerPacket, (int)v58);
  CMTime time2 = time;
  CMTimeAdd(&rhs, &time2, &v130);
  CMTime time = rhs;
  if (CFArrayGetCount(*(CFArrayRef *)(v60 + 1024)) < 1) {
    goto LABEL_130;
  }
  char v61 = 0;
  CFIndex v62 = 0;
  do
  {
    CFDictionaryRef v63 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v60 + 1024), v62);
    CMTimeMakeFromDictionary(&lhs, v63);
    CMTime rhs = time;
    CMTime time2 = lhs;
    if (CMTimeCompare(&rhs, &time2) < 0)
    {
      ++v62;
    }
    else
    {
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v60 + 1024), v62);
      char v61 = 1;
    }
  }
  while (v62 < CFArrayGetCount(*(CFArrayRef *)(v60 + 1024)));
LABEL_131:
  LOBYTE(v119) = v119 | v61;
  lhs.CMTimeScale value = v112;
  lhs.CMTimeScale timescale = v113;
  lhs.CMTimeFlags flags = flags;
  lhs.CMTimeEpoch epoch = epoch;
  uint64_t v64 = bufferedAudioEngine_encodeMessage(v114, (uint64_t)cf, (uint64_t)&lhs, (uint64_t)&v118, v14, (OpaqueCMBlockBuffer **)&v127);
  if (v64)
  {
    uint64_t v23 = v64;
    APSLogErrorAt();
    goto LABEL_178;
  }
  APSAudioFormatDescriptionGetSampleRate();
  CMTimeMake(&v115, FramesPerPacket, (int)v65);
  long long v66 = *v98;
  time.CMTimeEpoch epoch = *(void *)(DerivedStorage + 692);
  *(_OWORD *)&time.CMTimeScale value = v66;
  CMTimeAdd(&lhs, &time, &v115);
  long long v67 = *(_OWORD *)&lhs.value;
  *(void *)(DerivedStorage + 692) = lhs.epoch;
  *uint64_t v98 = v67;
  int v68 = APSSettingsIsFeatureEnabled();
  uint64_t v69 = *(void *)(DerivedStorage + 1144);
  if (!v68)
  {
    if (v69)
    {
      CFAllocatorRef v73 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      lhs.CMTimeScale value = v112;
      lhs.CMTimeScale timescale = v113;
      lhs.CMTimeFlags flags = flags;
      lhs.CMTimeEpoch epoch = epoch;
      CFDictionaryRef v74 = CMTimeCopyAsDictionary(&lhs, v73);
      if (v74)
      {
        CFDictionaryRef v75 = v74;
        if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(DerivedStorage + 1136), *(const void **)(DerivedStorage + 1144)))
        {
          CMNotificationCenterGetDefaultLocalCenter();
          uint64_t v76 = FigNotificationCenterAddWeakListener();
          if (v76)
          {
            uint64_t v23 = v76;
            APSLogErrorAt();
            goto LABEL_177;
          }
        }
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 1136), *(const void **)(DerivedStorage + 1144), v75);
        uint64_t v77 = *(const void **)(DerivedStorage + 968);
        if (!v77) {
          goto LABEL_156;
        }
LABEL_154:
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 976), v77, v75);
        goto LABEL_156;
      }
    }
    else
    {
      if (!*(void *)(DerivedStorage + 968))
      {
LABEL_155:
        CFDictionaryRef v75 = 0;
        goto LABEL_156;
      }
      CFAllocatorRef v83 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      lhs.CMTimeScale value = v112;
      lhs.CMTimeScale timescale = v113;
      lhs.CMTimeFlags flags = flags;
      lhs.CMTimeEpoch epoch = epoch;
      CFDictionaryRef v84 = CMTimeCopyAsDictionary(&lhs, v83);
      if (v84)
      {
        CFDictionaryRef v75 = v84;
        uint64_t v77 = *(const void **)(DerivedStorage + 968);
        goto LABEL_154;
      }
    }
    APSLogErrorAt();
    uint64_t v23 = 4294951816;
    goto LABEL_178;
  }
  if (v69)
  {
    uint64_t v70 = *(void *)(DerivedStorage + 1680);
    uint64_t v71 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v72 = v71 ? v71 : 0;
    uint64_t v78 = *(void (**)(uint64_t, uint64_t, CMTime *))(v72 + 96);
    if (v78)
    {
      lhs.CMTimeScale value = v112;
      lhs.CMTimeScale timescale = v113;
      lhs.CMTimeFlags flags = flags;
      lhs.CMTimeEpoch epoch = epoch;
      v78(v70, v69, &lhs);
    }
  }
  CFDictionaryRef v75 = *(CFDictionaryRef *)(DerivedStorage + 968);
  if (v75)
  {
    uint64_t v79 = *(void *)(DerivedStorage + 1680);
    uint64_t v80 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v80) {
      uint64_t v81 = v80;
    }
    else {
      uint64_t v81 = 0;
    }
    CFTypeRef v82 = *(void (**)(uint64_t, CFDictionaryRef, CMTime *))(v81 + 104);
    if (v82)
    {
      lhs.CMTimeScale value = v112;
      lhs.CMTimeScale timescale = v113;
      lhs.CMTimeFlags flags = flags;
      lhs.CMTimeEpoch epoch = epoch;
      v82(v79, v75, &lhs);
    }
    goto LABEL_155;
  }
LABEL_156:
  if (v97)
  {
    ++*(_DWORD *)(DerivedStorage + 904);
    uint64_t v85 = *(void *)(DerivedStorage + 560);
    lhs.CMTimeScale value = v112;
    lhs.CMTimeScale timescale = v113;
    lhs.CMTimeFlags flags = flags;
    lhs.CMTimeEpoch epoch = epoch;
    time.CMTimeScale value = v133;
    time.CMTimeScale timescale = v134;
    time.CMTimeFlags flags = v104;
    time.CMTimeEpoch epoch = v102;
    uint64_t v23 = APMessageRingBufferedEnqueueMessageForSending(v85, (CMBlockBufferRef)v127, (long long *)&lhs.value, (long long *)&time.value);
  }
  else
  {
    CFTypeRef v86 = v127;
    uint64_t v87 = CMBaseObjectGetDerivedStorage();
    if (v86)
    {
      uint64_t v88 = v87;
      CFAllocatorRef v89 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      if ((*(void *)(v87 + 568)
         || (CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]),
             (*(void *)(v88 + 568) = Mutable) != 0))
        && (lhs.CMTimeScale value = v112,
            lhs.CMTimeScale timescale = v113,
            lhs.CMTimeFlags flags = flags,
            lhs.CMTimeEpoch epoch = epoch,
            (CFDictionaryRef v91 = CMTimeCopyAsDictionary(&lhs, v89)) != 0))
      {
        CFDictionaryRef v92 = v91;
        lhs.CMTimeScale value = v133;
        lhs.CMTimeScale timescale = v134;
        lhs.CMTimeFlags flags = v104;
        lhs.CMTimeEpoch epoch = v102;
        CFDictionaryRef v93 = CMTimeCopyAsDictionary(&lhs, v89);
        if (v93)
        {
          CFDictionaryRef v94 = v93;
          lhs.CMTimeScale value = (CMTimeValue)v86;
          *(void *)&lhs.CMTimeScale timescale = v92;
          lhs.CMTimeEpoch epoch = (CMTimeEpoch)v93;
          CFArrayRef v95 = CFArrayCreate(v89, (const void **)&lhs, 3, MEMORY[0x1E4F1D510]);
          if (v95)
          {
            CFArrayAppendValue(*(CFMutableArrayRef *)(v88 + 568), v95);
            uint64_t v23 = 0;
          }
          else
          {
            APSLogErrorAt();
            uint64_t v23 = 4294951816;
          }
          CFRelease(v94);
          CFRelease(v92);
          if (v95) {
            CFRelease(v95);
          }
        }
        else
        {
          APSLogErrorAt();
          CFRelease(v92);
          uint64_t v23 = 4294951816;
        }
        uint64_t v21 = v111;
      }
      else
      {
        APSLogErrorAt();
        uint64_t v23 = 4294951816;
      }
    }
    else
    {
      APSLogErrorAt();
      uint64_t v23 = 4294951815;
    }
    if (gLogCategory_APAudioEngineBuffered <= 10
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (v114) {
        CMBaseObjectGetDerivedStorage();
      }
      LogPrintF();
    }
  }
  if (!v23)
  {
    *(void *)(v21 + 32) += FramesPerPacket;
    ++*(void *)(DerivedStorage + 1128);
    if (!v75) {
      goto LABEL_178;
    }
    goto LABEL_177;
  }
  APSLogErrorAt();
  if (v75) {
LABEL_177:
  }
    CFRelease(v75);
LABEL_178:
  if (cf) {
    CFRelease(cf);
  }
  if (v127) {
    CFRelease(v127);
  }
  if (v51) {
    CFRelease(v51);
  }
  return v23;
}

uint64_t bufferedAudioEngine_shouldUseReceiverChoosesAnchor()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFBooleanRef v1 = (const __CFBoolean *)*MEMORY[0x1E4F1CFC8];
  CFBooleanRef v7 = (const __CFBoolean *)*MEMORY[0x1E4F1CFC8];
  if (APSSettingsIsFeatureEnabled())
  {
    uint64_t CMBaseObject = APAudioHoseManagerBufferedGetCMBaseObject(*(void *)(DerivedStorage + 1680));
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v3) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    int v6 = *(void (**)(uint64_t, __CFString *, void, const __CFBoolean **))(v4 + 48);
    if (v6)
    {
      v6(CMBaseObject, @"ShouldUseReceiverChoosesAnchor", *MEMORY[0x1E4F1CF80], &v7);
      CFBooleanRef v1 = v7;
    }
    return CFBooleanGetValue(v1);
  }
  else
  {
    return *(_DWORD *)(DerivedStorage + 592) == 1 && !APSGetFBOPropertyInt64() && APSGetFBOPropertyInt64() != 0;
  }
}

uint64_t bufferedAudioEngine_handleSetRateToOneWithReceiverAnchor(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = *(void *)(DerivedStorage + 584);
  double v4 = *(double *)(DerivedStorage + 816);
  v28[0] = *MEMORY[0x1E4F49F28];
  *(_OWORD *)((char *)v28 + 12) = *(_OWORD *)(MEMORY[0x1E4F49F28] + 12);
  if (*(unsigned char *)DerivedStorage) {
    goto LABEL_40;
  }
  uint64_t v5 = DerivedStorage;
  if (*(_DWORD *)(DerivedStorage + 804) != 1937207905) {
    goto LABEL_40;
  }
  uint64_t v6 = v4;
  CMBaseObjectGetDerivedStorage();
  if (APSSettingsIsFeatureEnabled())
  {
    if (*(_DWORD *)(v5 + 736)) {
      CFBooleanRef v7 = (long long *)(v5 + 732);
    }
    else {
      CFBooleanRef v7 = (long long *)(v5 + 708);
    }
    if (*(_DWORD *)(v5 + 736)) {
      CMTimeValue v8 = (uint64_t *)(v5 + 724);
    }
    else {
      CMTimeValue v8 = (uint64_t *)(v5 + 700);
    }
    uint64_t v9 = *v8;
    long long v29 = *v7;
    if (*(unsigned char *)(v5 + 520))
    {
      *(void *)uint64_t v30 = v9;
      *(_OWORD *)&v30[8] = v29;
      APSAudioTransportTimeMakeWithMediaTime();
      if (!a1)
      {
LABEL_13:
        uint64_t v10 = *(void *)(v5 + 1680);
        *(_OWORD *)double v27 = v28[0];
        *(_OWORD *)&v27[12] = *(_OWORD *)((char *)v28 + 12);
        uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v11) {
          uint64_t v12 = v11;
        }
        else {
          uint64_t v12 = 0;
        }
        uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, unsigned char *, void, const void *))(v12 + 48);
        if (v22)
        {
          *(_OWORD *)uint64_t v30 = *(_OWORD *)v27;
          *(_OWORD *)&v30[12] = *(_OWORD *)&v27[12];
          uint64_t v20 = v22(v10, v6, v30, bufferedAudioEngine_hoseManagerSetRateCallbackCompletionHandler, a1);
        }
        else
        {
          uint64_t v20 = 4294954514;
        }
        goto LABEL_41;
      }
    }
    else
    {
      int32_t SampleRateFromTransportAudioFormat = bufferedAudioEngine_getSampleRateFromTransportAudioFormat();
      *(void *)double v27 = v9;
      *(_OWORD *)&v27[8] = v29;
      CMTimeConvertScale((CMTime *)v30, (CMTime *)v27, SampleRateFromTransportAudioFormat, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
      APSAudioTransportTimeMakeWithRTPTime();
      if (!a1) {
        goto LABEL_13;
      }
    }
    CFRetain(a1);
    goto LABEL_13;
  }
  if (!*(void *)(v5 + 584))
  {
LABEL_40:
    uint64_t v20 = 0;
    goto LABEL_41;
  }
  if (*(_DWORD *)(v5 + 736)) {
    uint64_t v13 = (long long *)(v5 + 732);
  }
  else {
    uint64_t v13 = (long long *)(v5 + 708);
  }
  if (*(_DWORD *)(v5 + 736)) {
    uint64_t v14 = (uint64_t *)(v5 + 724);
  }
  else {
    uint64_t v14 = (uint64_t *)(v5 + 700);
  }
  uint64_t v15 = *v14;
  long long v29 = *v13;
  if (*(unsigned char *)(v5 + 520))
  {
    *(void *)uint64_t v30 = v15;
    *(_OWORD *)&v30[8] = v29;
    APSAudioTransportTimeMakeWithMediaTime();
    if (!a1) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  int32_t v26 = bufferedAudioEngine_getSampleRateFromTransportAudioFormat();
  *(void *)double v27 = v15;
  *(_OWORD *)&v27[8] = v29;
  CMTimeConvertScale((CMTime *)v30, (CMTime *)v27, v26, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
  APSAudioTransportTimeMakeWithRTPTime();
  if (a1) {
LABEL_24:
  }
    CFRetain(a1);
LABEL_25:
  uint64_t v16 = *(void *)(*(void *)(v5 + 584) + 16);
  *(_OWORD *)double v27 = v28[0];
  *(_OWORD *)&v27[12] = *(_OWORD *)((char *)v28 + 12);
  APSEndpointStreamAudioHoseProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable && (uint64_t v18 = *(void *)(ProtocolVTable + 16)) != 0)
  {
    CFDataRef v19 = *(uint64_t (**)(uint64_t, uint64_t, unsigned char *, void, const void *))(v18 + 80);
    if (v19)
    {
      *(_OWORD *)uint64_t v30 = *(_OWORD *)v27;
      *(_OWORD *)&v30[12] = *(_OWORD *)&v27[12];
      uint64_t v20 = v19(v16, v6, v30, bufferedAudioEngine_hoseSetRateCallbackCompletionHandler, a1);
    }
    else
    {
      uint64_t v20 = 4294954514;
      bufferedAudioEngine_hoseSetRateCallbackCompletionHandler(v16, MEMORY[0x1E4F49F28], MEMORY[0x1E4F4A160], 4294954514, a1);
    }
  }
  else
  {
    uint64_t v20 = 4294954508;
  }
  *(_DWORD *)(*(void *)(v5 + 584) + 140) = 3;
  uint64_t v23 = *(const void **)(v5 + 864);
  CMTimeValue v24 = *(const void **)(v3 + 16);
  *(void *)(v5 + 864) = v24;
  if (v24) {
    CFRetain(v24);
  }
  if (v23) {
    CFRelease(v23);
  }
LABEL_41:
  CMBaseObjectGetDerivedStorage();
  return v20;
}

uint64_t bufferedAudioEngine_handleSetRateToOne(const void *a1)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = MEMORY[0x1E4F1F9F8];
  if (!*(unsigned char *)DerivedStorage && *(_DWORD *)(DerivedStorage + 804) == 1937011305)
  {
    uint64_t v55 = DerivedStorage;
    CMBaseObjectGetDerivedStorage();
    uint64_t v4 = CMBaseObjectGetDerivedStorage();
    *(_OWORD *)&v75.CMTimeScale value = *(_OWORD *)v3;
    CMTimeEpoch v5 = *(void *)(v3 + 16);
    v75.CMTimeEpoch epoch = v5;
    *(_OWORD *)&v74.CMTimeScale value = *(_OWORD *)&v75.value;
    v74.CMTimeEpoch epoch = v5;
    uint64_t v72 = *(void *)(v3 + 12);
    int v73 = *(_DWORD *)(v3 + 20);
    long long v56 = *MEMORY[0x1E4F1FA48];
    *(_OWORD *)&v67.CMTimeScale value = *MEMORY[0x1E4F1FA48];
    CMTimeEpoch v6 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    v67.CMTimeEpoch epoch = v6;
    *(_OWORD *)long long v66 = *MEMORY[0x1E4F49F28];
    *(_OWORD *)&v66[12] = *(_OWORD *)(MEMORY[0x1E4F49F28] + 12);
    *(_OWORD *)&v65.CMTimeScale value = *(_OWORD *)&v75.value;
    v65.CMTimeEpoch epoch = v5;
    long long v59 = *(_OWORD *)&v75.value;
    *(_OWORD *)&v64.CMTimeScale value = *(_OWORD *)&v75.value;
    v64.CMTimeEpoch epoch = v5;
    if (*(_DWORD *)(v4 + 804) != 1937011305) {
      goto LABEL_75;
    }
    uint64_t v7 = v4;
    CMTimeValue v8 = (uint64_t *)(v4 + 700);
    CMBaseObjectGetDerivedStorage();
    if (*(unsigned char *)(v7 + 836))
    {
      CMTime v75 = *(CMTime *)(v7 + 824);
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (a1) {
          CMBaseObjectGetDerivedStorage();
        }
        *(CMTime *)CMTime time = v75;
        CMTimeGetSeconds((CMTime *)time);
        HostTimeClock = CMClockGetHostTimeClock();
        CMClockGetTime(&v63, HostTimeClock);
        CMTimeGetSeconds(&v63);
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v9 = CMClockGetHostTimeClock();
      CMClockGetTime(&v75, v9);
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (a1) {
          CMBaseObjectGetDerivedStorage();
        }
        *(CMTime *)CMTime time = v75;
        CMTimeGetSeconds((CMTime *)time);
LABEL_19:
        LogPrintF();
      }
    }
    uint64_t v11 = v8 + 3;
    int v12 = *(_DWORD *)(v7 + 836);
    double v58 = v8 + 3;
    if (*(unsigned char *)(v7 + 736))
    {
      if (v12)
      {
        *(_OWORD *)&v67.CMTimeScale value = v56;
        v67.CMTimeEpoch epoch = v6;
      }
      else
      {
        bufferedAudioEngine_getStartUpDelay((uint64_t)a1, 1, (uint64_t)&v67);
      }
      uint64_t MaxFirstAvailableTransportTimestampForStartUp = bufferedAudioEngine_getMaxFirstAvailableTransportTimestampForStartUp((uint64_t)a1, (uint64_t)v66);
      if (MaxFirstAvailableTransportTimestampForStartUp)
      {
        uint64_t v26 = MaxFirstAvailableTransportTimestampForStartUp;
        APSLogErrorAt();
LABEL_73:
        *(void *)(v7 + 816) = 0xBFF0000000000000;
        *(_OWORD *)uint64_t v11 = v59;
        v11[2] = v5;
        bufferedAudioEngine_updatePlaybackState((uint64_t)a1, 1937010544);
        goto LABEL_74;
      }
      *(_OWORD *)CMTime time = *(_OWORD *)v66;
      *(_OWORD *)&time[12] = *(_OWORD *)&v66[12];
      uint64_t v16 = (const void *)APSAudioTransportTimeCopyDebugDesc();
      *(_OWORD *)CMTime time = *(_OWORD *)v66;
      *(_OWORD *)&time[12] = *(_OWORD *)&v66[12];
      if (APSAudioTransportTimeIsValid())
      {
        if (*(_DWORD *)v66 == 2)
        {
          double v57 = v16;
          long long v21 = *(_OWORD *)v11;
          lhs.CMTimeEpoch epoch = v11[2];
          *(_OWORD *)&lhs.CMTimeScale value = v21;
          CMTime rhs = *(CMTime *)&v66[4];
          CMTimeMaximum((CMTime *)time, &lhs, &rhs);
        }
        else
        {
          if (*(_DWORD *)v66 != 1)
          {
            CFDictionaryRef v25 = 0;
            uint64_t v26 = 4294960587;
            if (!v16) {
              goto LABEL_70;
            }
            goto LABEL_69;
          }
          double v57 = v16;
          CMTimeMake(&v61, (*(_DWORD *)&v66[4] - *(_DWORD *)v11) & ~((*(_DWORD *)&v66[4] - *(_DWORD *)v11) >> 31), *(_DWORD *)(v7 + 732));
          long long v17 = *(_OWORD *)v11;
          lhs.CMTimeEpoch epoch = v11[2];
          *(_OWORD *)&lhs.CMTimeScale value = v17;
          CMTimeAdd((CMTime *)time, &lhs, &v61);
        }
        CMTimeValue v18 = *(void *)time;
        CMTimeScale v19 = *(_DWORD *)&time[8];
        uint64_t v72 = *(void *)&time[12];
        int v20 = *(_DWORD *)&time[20];
      }
      else
      {
        double v57 = v16;
        CMTimeValue v18 = *v11;
        CMTimeScale v19 = *(_DWORD *)(v7 + 732);
        uint64_t v72 = *(void *)(v7 + 736);
        int v20 = *(_DWORD *)(v7 + 744);
      }
      int v73 = v20;
      int32_t v22 = *(_DWORD *)(v7 + 732);
      lhs.CMTimeScale value = v18;
      *(void *)&lhs.CMTimeFlags flags = v72;
      lhs.CMTimeScale timescale = v19;
      HIDWORD(lhs.epoch) = v20;
      char v23 = 1;
      CMTimeConvertScale((CMTime *)time, &lhs, v22, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
      uint64_t v13 = *(void *)time;
      int v24 = *(_DWORD *)&time[8];
      uint64_t v72 = *(void *)&time[12];
      int v73 = *(_DWORD *)&time[20];
      CMTime lhs = v75;
      CMTime rhs = v67;
      CMTimeAdd((CMTime *)time, &lhs, &rhs);
      CMTime v75 = *(CMTime *)time;
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (a1) {
          CMBaseObjectGetDerivedStorage();
        }
        *(void *)CMTime time = v13;
        *(_DWORD *)&time[8] = v24;
        *(void *)&time[12] = v72;
        *(_DWORD *)&time[20] = v73;
        CMTimeGetSeconds((CMTime *)time);
        long long v28 = *(_OWORD *)v58;
        *(void *)&time[16] = v58[2];
        *(_OWORD *)CMTime time = v28;
        CMTimeGetSeconds((CMTime *)time);
        *(CMTime *)CMTime time = v67;
        CMTimeGetSeconds((CMTime *)time);
        LogPrintF();
        char v23 = 1;
      }
    }
    else
    {
      if (v12)
      {
        *(_OWORD *)&v67.CMTimeScale value = v56;
        v67.CMTimeEpoch epoch = v6;
      }
      else
      {
        bufferedAudioEngine_getStartUpDelay((uint64_t)a1, 0, (uint64_t)&v67);
      }
      uint64_t v13 = *v8;
      int v14 = *(_DWORD *)(v7 + 708);
      uint64_t v72 = *(void *)(v7 + 712);
      int v73 = *(_DWORD *)(v7 + 720);
      CMTime lhs = v75;
      CMTime rhs = v67;
      CMTimeAdd((CMTime *)time, &lhs, &rhs);
      CMTime v75 = *(CMTime *)time;
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (a1) {
          CMBaseObjectGetDerivedStorage();
        }
        *(void *)CMTime time = v13;
        *(_DWORD *)&time[8] = v14;
        *(void *)&time[12] = v72;
        *(_DWORD *)&time[20] = v73;
        CMTimeGetSeconds((CMTime *)time);
        long long v27 = *(_OWORD *)v8;
        *(void *)&time[16] = v8[2];
        *(_OWORD *)CMTime time = v27;
        CMTimeGetSeconds((CMTime *)time);
        *(CMTime *)CMTime time = v67;
        CMTimeGetSeconds((CMTime *)time);
        LogPrintF();
        char v23 = 0;
        double v57 = 0;
        int v24 = v14;
      }
      else
      {
        char v23 = 0;
        double v57 = 0;
        int v24 = v14;
      }
    }
    CFAllocatorRef v29 = CFGetAllocator(a1);
    uint64_t v30 = CMTimebaseCreateWithSourceClock(v29, *(CMClockRef *)(v7 + 448), (CMTimebaseRef *)(v7 + 792));
    if (v30)
    {
      uint64_t v26 = v30;
    }
    else
    {
      APSTimedInfoManagerResume();
      uint64_t v31 = mach_absolute_time();
      *(CMTime *)CMTime time = v67;
      CMTimeGetSeconds((CMTime *)time);
      uint64_t v32 = MillisecondsToUpTicks();
      bufferedAudioEngine_recordStartTimebaseTimeStampForRTC((uint64_t)a1, v32 + v31);
      CMClockRef v33 = CMClockGetHostTimeClock();
      uint64_t v34 = *(const void **)(v7 + 448);
      *(CMTime *)CMTime time = v75;
      CMSyncConvertTime(&v74, (CMTime *)time, v33, v34);
      CFDataRef v35 = *(OpaqueCMTimebase **)(v7 + 792);
      *(void *)CMTime time = v13;
      *(_DWORD *)&time[8] = v24;
      *(void *)&time[12] = v72;
      *(_DWORD *)&time[20] = v73;
      CMTime lhs = v74;
      uint64_t v36 = CMTimebaseSetRateAndAnchorTime(v35, 1.0, (CMTime *)time, &lhs);
      if (!v36)
      {
        if (gLogCategory_APAudioEngineBuffered <= 50
          && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
        {
          if (a1) {
            CMBaseObjectGetDerivedStorage();
          }
          *(void *)CMTime time = v13;
          *(_DWORD *)&time[8] = v24;
          *(void *)&time[12] = v72;
          *(_DWORD *)&time[20] = v73;
          CMTimeGetSeconds((CMTime *)time);
          LogPrintF();
        }
        CFAllocatorRef v37 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        values = *(void **)(v7 + 952);
        keys = @"ContentType";
        CFDictionaryRef v25 = CFDictionaryCreate(v37, (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (v25)
        {
          *(void *)CMTime time = v13;
          *(_DWORD *)&time[8] = v24;
          *(void *)&time[12] = v72;
          *(_DWORD *)&time[20] = v73;
          APSTimedInfoManagerAddTimedInfo();
          bufferedAudioEngine_getPlaybackStartupTime(&v64);
          uint64_t v38 = CMClockGetHostTimeClock();
          CMClockGetTime(&v60, v38);
          *(CMTime *)CMTime time = v75;
          CMTimeSubtract(&v65, (CMTime *)time, &v60);
          if (gLogCategory_APAudioEngineBuffered <= 50
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (a1) {
              CMBaseObjectGetDerivedStorage();
            }
            *(CMTime *)CMTime time = v65;
            CMTimeGetSeconds((CMTime *)time);
            *(CMTime *)CMTime time = v64;
            CMTimeGetSeconds((CMTime *)time);
            LogPrintF();
          }
          *(CMTime *)CMTime time = v65;
          CMTimeGetSeconds((CMTime *)time);
          kdebug_trace();
          uint64_t v39 = CMBaseObjectGetDerivedStorage();
          uint64_t v40 = CMClockGetHostTimeClock();
          CMClockGetTime((CMTime *)time, v40);
          *(_OWORD *)(v39 + 1620) = *(_OWORD *)time;
          *(void *)(v39 + 1636) = *(void *)&time[16];
          *(_DWORD *)(v39 + 1644) = *(_DWORD *)(v39 + 592);
          uint64_t v41 = CMBaseObjectGetDerivedStorage();
          *(_OWORD *)CMTime time = *(_OWORD *)(v41 + 676);
          *(void *)&time[16] = *(void *)(v41 + 692);
          CMTime lhs = *(CMTime *)(v41 + 700);
          CMTimeSubtract(&rhs, (CMTime *)time, &lhs);
          float Seconds = CMTimeGetSeconds(&rhs);
          *(float *)(v39 + 1648) = Seconds;
          bufferedAudioEngine_getStreamInfoForStartup((uint64_t)a1, (float *)(v39 + 1652), (float *)(v39 + 1656), (float *)(v39 + 1660), (_WORD *)(v39 + 1664), (char *)(v39 + 1670), (_WORD *)(v39 + 1666), (_WORD *)(v39 + 1668));
          *(unsigned char *)(v39 + 1671) = v23;
          kdebug_trace();
          bufferedAudioEngine_logStartupTime((uint64_t)a1);
          *(void *)(v7 + 808) = *(void *)(v7 + 816);
          *(void *)(v7 + 816) = 0xBFF0000000000000;
          uint64_t v11 = v58;
          *(_OWORD *)double v58 = v59;
          v58[2] = v5;
          bufferedAudioEngine_updatePlaybackState((uint64_t)a1, 1937011316);
          uint64_t v26 = 0;
          uint64_t v16 = v57;
          if (v57) {
            goto LABEL_69;
          }
LABEL_70:
          if (v25) {
            CFRelease(v25);
          }
          if (v26) {
            goto LABEL_73;
          }
LABEL_75:
          uint64_t v26 = bufferedAudioEngine_handleSetRateToOne_sendAnchorToAllHoses(a1);
          if (!v26)
          {
            *(_OWORD *)(v55 + 1036) = *(_OWORD *)(v55 + 676);
            *(void *)(v55 + 1052) = *(void *)(v55 + 692);
            *(_OWORD *)(v55 + 1000) = v59;
            *(void *)(v55 + 1016) = v5;
            goto LABEL_77;
          }
LABEL_74:
          APSLogErrorAt();
LABEL_77:
          uint64_t v3 = MEMORY[0x1E4F1F9F8];
          goto LABEL_78;
        }
        APSLogErrorAt();
        uint64_t v26 = 4294951816;
        goto LABEL_96;
      }
      uint64_t v26 = v36;
    }
    APSLogErrorAt();
    CFDictionaryRef v25 = 0;
LABEL_96:
    uint64_t v16 = v57;
    uint64_t v11 = v58;
    if (!v57) {
      goto LABEL_70;
    }
LABEL_69:
    CFRelease(v16);
    goto LABEL_70;
  }
  uint64_t v26 = 0;
LABEL_78:
  CMBaseObjectGetDerivedStorage();
  uint64_t v43 = CMBaseObjectGetDerivedStorage();
  *(_OWORD *)long long v66 = *(_OWORD *)v3;
  *(void *)&v66[16] = *(void *)(v3 + 16);
  v75.CMTimeScale value = *(void *)(v3 + 12);
  v75.CMTimeScale timescale = *(_DWORD *)(v3 + 20);
  v74.CMTimeScale value = v75.value;
  v74.CMTimeScale timescale = v75.timescale;
  if (*(void *)(v43 + 872))
  {
    uint64_t v44 = v43;
    if (v26)
    {
      CMTimeValue v45 = *(void *)v3;
      CMTimeScale v46 = *(_DWORD *)(v3 + 8);
      CMTimeValue v47 = v45;
      CMTimeScale v48 = v46;
    }
    else
    {
      CMTimebaseGetTimeClampedAboveAnchorTime();
      CMTimeValue v45 = *(void *)time;
      CMTimeScale v46 = *(_DWORD *)&time[8];
      v75.CMTimeScale value = *(void *)&time[12];
      v75.CMTimeScale timescale = *(_DWORD *)&time[20];
      CMTimeFlags v49 = *(const void **)(v44 + 792);
      CMClockRef v50 = CMClockGetHostTimeClock();
      *(void *)CMTime time = v45;
      *(_DWORD *)&time[8] = v46;
      *(void *)&time[12] = v75.value;
      *(_DWORD *)&time[20] = v75.timescale;
      CMSyncConvertTime((CMTime *)v66, (CMTime *)time, v49, v50);
      lhs.CMTimeScale value = v45;
      *(void *)&lhs.CMTimeFlags flags = v75.value;
      lhs.CMTimeScale timescale = v46;
      HIDWORD(lhs.epoch) = v75.timescale;
      CMTime rhs = *(CMTime *)(v44 + 700);
      CMTimeSubtract((CMTime *)time, &lhs, &rhs);
      CMTimeValue v47 = *(void *)time;
      CMTimeScale v48 = *(_DWORD *)&time[8];
      v74.CMTimeScale value = *(void *)&time[12];
      v74.CMTimeScale timescale = *(_DWORD *)&time[20];
    }
    if (gLogCategory_APAudioEngineBuffered <= 50
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1) {
        CMBaseObjectGetDerivedStorage();
      }
      *(void *)CMTime time = v47;
      *(_DWORD *)&time[8] = v48;
      *(void *)&time[12] = v74.value;
      *(_DWORD *)&time[20] = v74.timescale;
      CMTimeGetSeconds((CMTime *)time);
      *(void *)CMTime time = v45;
      *(_DWORD *)&time[8] = v46;
      *(void *)&time[12] = v75.value;
      *(_DWORD *)&time[20] = v75.timescale;
      CMTimeGetSeconds((CMTime *)time);
      long long v51 = *(_OWORD *)(v44 + 700);
      *(void *)&time[16] = *(void *)(v44 + 716);
      *(_OWORD *)CMTime time = v51;
      CMTimeGetSeconds((CMTime *)time);
      long long v52 = *(_OWORD *)(v44 + 724);
      *(void *)&time[16] = *(void *)(v44 + 740);
      *(_OWORD *)CMTime time = v52;
      CMTimeGetSeconds((CMTime *)time);
      LogPrintF();
    }
    CMTimeEpoch v53 = *(const void **)(v44 + 888);
    *(void *)CMTime time = v47;
    *(_DWORD *)&time[8] = v48;
    *(void *)&time[12] = v74.value;
    *(_DWORD *)&time[20] = v74.timescale;
    CMTime lhs = *(CMTime *)v66;
    bufferedAudioEngine_callSetRateAndAnchorTimeClientCompletionCallback(a1, v26, (uint64_t)time, (uint64_t)&lhs, v53);
    *(void *)(v44 + 872) = 0;
    *(void *)(v44 + 880) = 0;
  }
  return v26;
}

uint64_t APSEndpointStreamAudioHoseGetAnchor(uint64_t a1, const void *a2)
{
  APSEndpointStreamAudioHoseProtocolGetProtocolID();
  uint64_t result = CMBaseObjectGetProtocolVTable();
  if (result)
  {
    uint64_t v6 = *(void *)(result + 16);
    result += 16;
    uint64_t v5 = v6;
    if (v6)
    {
      uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, const void *), const void *))(v5 + 88);
      if (v7)
      {
        return v7(a1, 1, bufferedAudioEngine_hoseGetAnchorCallbackCompletionHandler, a2);
      }
      else
      {
        uint64_t v8 = MEMORY[0x1E4F49F28];
        uint64_t v9 = MEMORY[0x1E4F4A160];
        return bufferedAudioEngine_hoseGetAnchorCallbackCompletionHandler(a1, v8, v9, 4294954514, a2);
      }
    }
  }
  return result;
}

uint64_t bufferedAudioEngine_hoseGetAnchorCallbackCompletionHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  if (a5) {
    CFRelease(a5);
  }
  return 0;
}

uint64_t bufferedAudioEngine_handleSetRateToOne_sendAnchorToAllHoses(const void *a1)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  CMTime v63 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  long long v61 = 0uLL;
  uint64_t v62 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  v60[0] = *MEMORY[0x1E4F49F28];
  long long v3 = v60[0];
  *(_OWORD *)((char *)v60 + 12) = *(_OWORD *)(MEMORY[0x1E4F49F28] + 12);
  v59[0] = v3;
  *(_OWORD *)((char *)v59 + 12) = *(_OWORD *)((char *)v60 + 12);
  if (*(_DWORD *)(DerivedStorage + 804) != 1937011316) {
    return 0;
  }
  uint64_t v4 = DerivedStorage;
  CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(v4 + 760) = 0;
  *(unsigned char *)(v4 + 856) = 0;
  *(void *)(v4 + 848) = 0;
  CMClockRef HostTimeClock = CMClockGetHostTimeClock();
  CMSyncGetTime(&v63, HostTimeClock);
  uint64_t v6 = *(void *)(v4 + 328);
  *(CMTime *)hostTime = v63;
  uint64_t v7 = CMClockConvertHostTimeToSystemUnits((CMTime *)hostTime);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v9 = v8 ? v8 : 0;
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, long long *))(v9 + 16);
  if (v10)
  {
    int v11 = v10(v6, v7, &v61);
    if (!v11) {
      goto LABEL_36;
    }
  }
  else
  {
    int v11 = -12782;
  }
  if (gLogCategory_APAudioEngineBuffered <= 90
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1) {
      CMBaseObjectGetDerivedStorage();
    }
    *(CMTime *)hostTime = v63;
    CMTimeGetSeconds((CMTime *)hostTime);
    *(CMTime *)hostTime = v63;
    CMClockConvertHostTimeToSystemUnits((CMTime *)hostTime);
    LogPrintF();
  }
  uint64_t v12 = mach_absolute_time();
  uint64_t v13 = *(void *)(v4 + 752);
  if (!v13)
  {
    uint64_t v13 = MillisecondsToUpTicks() + v12;
    *(void *)(v4 + 752) = v13;
  }
  if (v12 < v13)
  {
    uint64_t v14 = 0;
    *(unsigned char *)(v4 + 760) = 1;
    return v14;
  }
  uint64_t v15 = *(uint64_t **)(CMBaseObjectGetDerivedStorage() + 584);
  if (gLogCategory_APAudioEngineBuffered <= 90
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    FigCFDictionarySetInt32();
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F212C8], @"Network clock failed to lock");
  }
  for (; v15; uint64_t v15 = (uint64_t *)*v15)
  {
    if (!*((unsigned char *)v15 + 24))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
    }
  }
  bufferedAudioEngine_sendSessionFailureEvent((uint64_t)a1, @"Network clock failed to lock");
  bufferedAudioEngine_maybeTriggerTTR((uint64_t)a1, 0, 0, v11);
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (!*(unsigned char *)(v4 + 1080)) {
    return 0;
  }
LABEL_36:
  *(void *)(v4 + 752) = 0;
  CMClockRef v17 = CMClockGetHostTimeClock();
  CMTimeValue v18 = *(const void **)(v4 + 792);
  *(CMTime *)CMTime time = v63;
  CMSyncConvertTime((CMTime *)hostTime, (CMTime *)time, v17, v18);
  int v19 = *(_DWORD *)&hostTime[12];
  if ((hostTime[12] & 0x1D) != 1)
  {
    APSLogErrorAt();
    return APSSignalErrorAt();
  }
  uint64_t v20 = *(void *)hostTime;
  int v21 = *(_DWORD *)&hostTime[8];
  uint64_t v22 = *(void *)&hostTime[16];
  uint64_t MaxFirstAvailableTransportTimestampForStartUp = bufferedAudioEngine_getMaxFirstAvailableTransportTimestampForStartUp((uint64_t)a1, (uint64_t)v60);
  if (MaxFirstAvailableTransportTimestampForStartUp)
  {
    uint64_t v14 = MaxFirstAvailableTransportTimestampForStartUp;
    APSLogErrorAt();
    return v14;
  }
  *(_OWORD *)hostTime = v60[0];
  *(_OWORD *)&hostTime[12] = *(_OWORD *)((char *)v60 + 12);
  int v24 = (const void *)APSAudioTransportTimeCopyDebugDesc();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1) {
      CMBaseObjectGetDerivedStorage();
    }
    *(void *)hostTime = v20;
    *(_DWORD *)&hostTime[8] = v21;
    *(_DWORD *)&hostTime[12] = v19;
    *(void *)&hostTime[16] = v22;
    CMTimeGetSeconds((CMTime *)hostTime);
    *(_OWORD *)hostTime = *(_OWORD *)(v4 + 700);
    *(void *)&hostTime[16] = *(void *)(v4 + 716);
    CMTimeGetSeconds((CMTime *)hostTime);
    *(CMTime *)hostTime = v63;
    CMTimeGetSeconds((CMTime *)hostTime);
    CFDictionaryRef v25 = CMClockGetHostTimeClock();
    CMClockGetTime(&v58, v25);
    CMTimeGetSeconds(&v58);
    LogPrintF();
  }
  if (*(unsigned char *)(v4 + 520))
  {
    *(void *)hostTime = v20;
    *(_DWORD *)&hostTime[8] = v21;
    *(_DWORD *)&hostTime[12] = v19;
    *(void *)&hostTime[16] = v22;
    APSAudioTransportTimeMakeWithMediaTime();
  }
  else
  {
    int32_t SampleRateFromTransportAudioFormat = bufferedAudioEngine_getSampleRateFromTransportAudioFormat();
    *(void *)CMTime time = v20;
    *(_DWORD *)&time[8] = v21;
    *(_DWORD *)&time[12] = v19;
    *(void *)&time[16] = v22;
    CMTimeConvertScale((CMTime *)hostTime, (CMTime *)time, SampleRateFromTransportAudioFormat, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
    APSAudioTransportTimeMakeWithRTPTime();
    v59[0] = *(_OWORD *)hostTime;
    *(_OWORD *)((char *)v59 + 12) = *(_OWORD *)&hostTime[12];
  }
  if (APSSettingsIsFeatureEnabled())
  {
    uint64_t v27 = *(void *)(v4 + 1680);
    double v28 = *(double *)(v4 + 808);
    *(_OWORD *)long long v56 = v59[0];
    *(_OWORD *)&v56[12] = *(_OWORD *)((char *)v59 + 12);
    long long v52 = v61;
    uint64_t v54 = v62;
    *(_OWORD *)CMClockRef v50 = v60[0];
    *(_OWORD *)&v50[12] = *(_OWORD *)((char *)v60 + 12);
    uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v29) {
      uint64_t v30 = v29;
    }
    else {
      uint64_t v30 = 0;
    }
    CMTimeValue v45 = *(uint64_t (**)(uint64_t, void, unsigned char *, long long *, unsigned char *))(v30 + 40);
    if (v45)
    {
      *(_OWORD *)hostTime = *(_OWORD *)v56;
      *(_OWORD *)&hostTime[12] = *(_OWORD *)&v56[12];
      long long v65 = v52;
      uint64_t v66 = v54;
      *(_OWORD *)CMTime time = *(_OWORD *)v50;
      *(_OWORD *)&time[12] = *(_OWORD *)&v50[12];
      uint64_t v14 = v45(v27, v28, hostTime, &v65, time);
    }
    else
    {
      uint64_t v14 = 4294954514;
    }
    goto LABEL_94;
  }
  uint64_t v14 = *(void *)(v4 + 584);
  if (v14)
  {
    uint64_t v48 = *MEMORY[0x1E4F1CFD0];
    uint64_t v49 = *MEMORY[0x1E4F49FD8];
    while (1)
    {
      double v31 = *(double *)(v4 + 808);
      if (*(double *)(v14 + 64) == v31) {
        break;
      }
      int v32 = gLogCategory_APAudioEngineBuffered;
      if (*(_DWORD *)(v14 + 140) != 2) {
        goto LABEL_60;
      }
      uint64_t v33 = v31;
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (a1) {
          CMBaseObjectGetDerivedStorage();
        }
        LogPrintF();
      }
      if (a1) {
        CFRetain(a1);
      }
      uint64_t v34 = LogCategoryCopyOSLogHandle();
      if (v34) {
        CFDataRef v35 = v34;
      }
      else {
        CFDataRef v35 = MEMORY[0x1E4F14500];
      }
      if (os_signpost_enabled(v35))
      {
        uint64_t v36 = *(void *)(v14 + 16);
        *(_DWORD *)hostTime = 67109120;
        *(_DWORD *)&hostTime[4] = v36;
        _os_signpost_emit_with_name_impl(&dword_1D0945000, v35, OS_SIGNPOST_INTERVAL_BEGIN, 0x2B160578uLL, "AIRPLAY_SIGNPOST_AUDIOENGINE_HOSE_SETRATE_1", "REQUEST hose=0x%x", hostTime, 8u);
      }
      uint64_t v37 = *(void *)(v14 + 16);
      *(_OWORD *)double v57 = v59[0];
      *(_OWORD *)&v57[12] = *(_OWORD *)((char *)v59 + 12);
      long long v53 = v61;
      uint64_t v55 = v62;
      *(_OWORD *)long long v51 = v60[0];
      *(_OWORD *)&v51[12] = *(_OWORD *)((char *)v60 + 12);
      APSEndpointStreamAudioHoseProtocolGetProtocolID();
      uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable)
      {
        uint64_t v39 = *(void *)(ProtocolVTable + 16);
        if (v39)
        {
          uint64_t v40 = *(void (**)(uint64_t, uint64_t, unsigned char *, long long *, unsigned char *, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const void *), const void *))(v39 + 48);
          if (v40)
          {
            *(_OWORD *)hostTime = *(_OWORD *)v57;
            *(_OWORD *)&hostTime[12] = *(_OWORD *)&v57[12];
            long long v65 = v53;
            uint64_t v66 = v55;
            *(_OWORD *)CMTime time = *(_OWORD *)v51;
            *(_OWORD *)&time[12] = *(_OWORD *)&v51[12];
            v40(v37, v33, hostTime, &v65, time, bufferedAudioEngine_hoseSetRateAndAnchorTimeCallbackCompletionHandler, a1);
          }
          else
          {
            bufferedAudioEngine_hoseSetRateAndAnchorTimeCallbackCompletionHandler(v37, 0, MEMORY[0x1E4F49F28], MEMORY[0x1E4F4A160], MEMORY[0x1E4F49F28], 4294954514, a1);
          }
        }
      }
      uint64_t v41 = *(void *)(v14 + 16);
      uint64_t v42 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v42) {
        uint64_t v43 = v42;
      }
      else {
        uint64_t v43 = 0;
      }
      uint64_t v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 56);
      if (v44) {
        v44(v41, v49, v48);
      }
      *(void *)(v14 + 64) = *(void *)(v4 + 808);
      *(_DWORD *)(v14 + 140) = 3;
LABEL_88:
      uint64_t v14 = *(void *)v14;
      if (!v14) {
        goto LABEL_94;
      }
    }
    int v32 = gLogCategory_APAudioEngineBuffered;
LABEL_60:
    if (v32 <= 50 && (v32 != -1 || _LogCategory_Initialize()))
    {
      if (a1) {
        CMBaseObjectGetDerivedStorage();
      }
      LogPrintF();
    }
    goto LABEL_88;
  }
LABEL_94:
  if ((*(unsigned char *)(v4 + 1228) & 1) == 0)
  {
    CMTimeScale v46 = CMClockGetHostTimeClock();
    CMClockGetTime((CMTime *)hostTime, v46);
    *(_OWORD *)(v4 + 1216) = *(_OWORD *)hostTime;
    *(void *)(v4 + 1232) = *(void *)&hostTime[16];
  }
  if (v24) {
    CFRelease(v24);
  }
  return v14;
}

uint64_t bufferedAudioEngine_hoseManagerSetRateCallbackCompletionHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  if (a5) {
    CFRelease(a5);
  }
  return 0;
}

uint64_t bufferedAudioEngine_hoseSetRateCallbackCompletionHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  if (a5) {
    CFRelease(a5);
  }
  return 0;
}

void bufferedAudioEngine_hoseManagerSetRateCallbackCompletionHandlerInternal(uint64_t a1)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage) {
    goto LABEL_43;
  }
  long long v3 = DerivedStorage;
  if (!*(void *)(a1 + 16))
  {
    if (gLogCategory_APAudioEngineBuffered <= 90
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (*(void *)a1) {
        CMBaseObjectGetDerivedStorage();
      }
      LogPrintF();
    }
    goto LABEL_43;
  }
  if (DerivedStorage[802])
  {
    if (gLogCategory_APAudioEngineBuffered <= 50
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (*(void *)a1) {
        CMBaseObjectGetDerivedStorage();
      }
      LogPrintF();
    }
    bufferedAudioEngine_updatePlaybackState(*(void *)a1, 1937010793);
    int started = bufferedAudioEngine_handleSetRateToZero(*(const void **)a1);
    v3[802] = 0;
    goto LABEL_26;
  }
  int v4 = *(_DWORD *)(a1 + 80);
  if (v4)
  {
    if (v4 == 200501)
    {
      if (gLogCategory_APAudioEngineBuffered <= 90
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (*(void *)a1) {
          CMBaseObjectGetDerivedStorage();
        }
        LogPrintF();
      }
      bufferedAudioEngine_updatePlaybackState(*(void *)a1, 1937011305);
      int started = bufferedAudioEngine_handleSetRateToOne(*(const void **)a1);
      goto LABEL_26;
    }
    if (gLogCategory_APAudioEngineBuffered <= 90
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (*(void *)a1) {
        CMBaseObjectGetDerivedStorage();
      }
      LogPrintF();
    }
    bufferedAudioEngine_callSetRateAndAnchorTimeClientCompletionCallback(*(const void **)a1, *(unsigned int *)(a1 + 80), MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], 0);
    *((void *)v3 + 110) = 0;
    *((void *)v3 + 109) = 0;
    bufferedAudioEngine_updatePlaybackState(*(void *)a1, 1937010793);
    bufferedAudioEngine_handleTerminalSetRateErrorForHoseManager(*(void *)a1, *(void *)(a1 + 16), *(_DWORD *)(a1 + 80), 1);
LABEL_43:
    int started = 0;
    goto LABEL_26;
  }
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*(void *)a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  uint64_t v6 = *(const void **)a1;
  v8[0] = *(_OWORD *)(a1 + 24);
  *(_OWORD *)((char *)v8 + 12) = *(_OWORD *)(a1 + 36);
  CMTime v7 = *(CMTime *)(a1 + 56);
  int started = bufferedAudioEngine_startRemoteMediaTimebaseWithReceiverAnchor(v6, (uint64_t)v8, &v7);
  if (started)
  {
    if (gLogCategory_APAudioEngineBuffered <= 90
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (*(void *)a1) {
        CMBaseObjectGetDerivedStorage();
      }
      LogPrintF();
    }
    bufferedAudioEngine_handleTerminalSetRateErrorForHoseManager(*(void *)a1, *(void *)(a1 + 16), started, 0);
  }
LABEL_26:
  **(_DWORD **)(a1 + 88) = started;
}

uint64_t bufferedAudioEngine_handleSetRateToZero(const void *a1)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  int v2 = (CMTime *)MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&v64.CMTimeScale value = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v3 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  v64.CMTimeEpoch epoch = v3;
  long long v48 = *(_OWORD *)&v64.value;
  *(_OWORD *)&v63.CMTimeScale value = *(_OWORD *)&v64.value;
  v63.CMTimeEpoch epoch = v3;
  long long v50 = *MEMORY[0x1E4F49F28];
  v62[0] = *MEMORY[0x1E4F49F28];
  long long v49 = *(_OWORD *)(MEMORY[0x1E4F49F28] + 12);
  *(_OWORD *)((char *)v62 + 12) = v49;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = DerivedStorage;
  if (*(unsigned char *)DerivedStorage || *(_DWORD *)(DerivedStorage + 804) != 1937010793)
  {
LABEL_74:
    uint64_t v42 = 0;
    goto LABEL_77;
  }
  CMBaseObjectGetDerivedStorage();
  CMClockRef HostTimeClock = CMClockGetHostTimeClock();
  CMClockGetTime(&v64, HostTimeClock);
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1) {
      CMBaseObjectGetDerivedStorage();
    }
    *(CMTime *)CMTime time = v64;
    CMTimeGetSeconds((CMTime *)time);
    LogPrintF();
  }
  CMTimeEpoch v47 = v3;
  CMClockRef v7 = CMClockGetHostTimeClock();
  uint64_t v8 = *(const void **)(v5 + 792);
  *(CMTime *)CMTime rhs = v64;
  CMSyncConvertTime((CMTime *)time, (CMTime *)rhs, v7, v8);
  uint64_t v9 = *(void *)time;
  int v11 = *(_DWORD *)&time[8];
  int v10 = *(_DWORD *)&time[12];
  uint64_t v12 = *(void *)&time[16];
  if ((time[12] & 0x1D) == 1 || *(unsigned char *)(v5 + 802))
  {
    uint64_t v13 = MEMORY[0x1E4F4A160];
    unsigned int v53 = *(_DWORD *)(MEMORY[0x1E4F4A160] + 16);
    CMTimeValue v51 = *MEMORY[0x1E4F4A160];
    uint64_t v52 = *(void *)(MEMORY[0x1E4F4A160] + 8);
    uint64_t v14 = (void *)(v5 + 724);
    if (gLogCategory_APAudioEngineBuffered <= 50
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1) {
        CMBaseObjectGetDerivedStorage();
      }
      *(void *)CMTime time = v9;
      *(_DWORD *)&time[8] = v11;
      *(_DWORD *)&time[12] = v10;
      *(void *)&time[16] = v12;
      CMTimeGetSeconds((CMTime *)time);
      *(CMTime *)CMTime time = v64;
      CMTimeGetSeconds((CMTime *)time);
      uint64_t v15 = CMClockGetHostTimeClock();
      CMClockGetTime(&v61, v15);
      CMTimeGetSeconds(&v61);
      LogPrintF();
      int v2 = (CMTime *)MEMORY[0x1E4F1F9F8];
    }
    *uint64_t v14 = v9;
    *(_DWORD *)(v5 + 732) = v11;
    *(_DWORD *)(v5 + 736) = v10;
    *(void *)(v5 + 740) = v12;
    *(void *)(v5 + 808) = *(void *)(v5 + 816);
    if (*(unsigned char *)(v5 + 520))
    {
      *(void *)CMTime time = v9;
      *(_DWORD *)&time[8] = v11;
      *(_DWORD *)&time[12] = v10;
      *(void *)&time[16] = v12;
      APSAudioTransportTimeMakeWithMediaTime();
    }
    else
    {
      int32_t SampleRateFromTransportAudioFormat = bufferedAudioEngine_getSampleRateFromTransportAudioFormat();
      *(void *)CMTime rhs = v9;
      *(_DWORD *)&rhs[8] = v11;
      *(_DWORD *)&rhs[12] = v10;
      *(void *)&rhs[16] = v12;
      CMTimeConvertScale((CMTime *)time, (CMTime *)rhs, SampleRateFromTransportAudioFormat, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
      APSAudioTransportTimeMakeWithRTPTime();
      v62[0] = *(_OWORD *)time;
      *(_OWORD *)((char *)v62 + 12) = *(_OWORD *)&time[12];
    }
    unsigned int v17 = *(_DWORD *)(v13 + 20);
    uint64_t v54 = *(double *)(v5 + 808);
    if (!APSSettingsIsFeatureEnabled())
    {
      unsigned int v46 = v17;
      uint64_t v21 = *(void *)(v5 + 584);
      if (v21)
      {
        uint64_t v22 = MEMORY[0x1E4F14500];
        do
        {
          uint64_t v23 = LogCategoryCopyOSLogHandle();
          if (v23) {
            int v24 = v23;
          }
          else {
            int v24 = v22;
          }
          if (os_signpost_enabled(v24))
          {
            uint64_t v25 = *(void *)(v21 + 16);
            *(_DWORD *)CMTime time = 67109120;
            *(_DWORD *)&time[4] = v25;
            _os_signpost_emit_with_name_impl(&dword_1D0945000, v24, OS_SIGNPOST_INTERVAL_BEGIN, 0x2B16057CuLL, "AIRPLAY_SIGNPOST_AUDIOENGINE_HOSE_SETRATE_0", "REQUEST hose=0x%x", time, 8u);
          }
          if (*(double *)(v21 + 64) == *(double *)(v5 + 808) || *(_DWORD *)(v21 + 140) != 3)
          {
            if (gLogCategory_APAudioEngineBuffered <= 50
              && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
            {
              if (a1) {
                CMBaseObjectGetDerivedStorage();
              }
              LogPrintF();
            }
          }
          else
          {
            if (gLogCategory_APAudioEngineBuffered <= 50
              && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
            {
              if (a1) {
                CMBaseObjectGetDerivedStorage();
              }
              LogPrintF();
            }
            bufferedAudioEngine_cancelRTCUnderrunForHose((uint64_t)a1, v21);
            if (a1) {
              CFRetain(a1);
            }
            uint64_t v26 = *(void *)(v21 + 16);
            *(_OWORD *)CMTime v60 = v62[0];
            *(_OWORD *)&v60[12] = *(_OWORD *)((char *)v62 + 12);
            APSEndpointStreamAudioHoseProtocolGetProtocolID();
            uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
            if (ProtocolVTable)
            {
              uint64_t v28 = *(void *)(ProtocolVTable + 16);
              if (v28)
              {
                uint64_t v29 = *(void (**)(uint64_t, uint64_t, unsigned char *, CMTime *, unsigned char *, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const void *), const void *))(v28 + 48);
                if (v29)
                {
                  *(_OWORD *)CMTime time = *(_OWORD *)v60;
                  *(_OWORD *)&time[12] = *(_OWORD *)&v60[12];
                  v66.CMTimeScale value = v51;
                  *(void *)&v66.CMTimeScale timescale = v52;
                  v66.CMTimeEpoch epoch = __PAIR64__(v46, v53);
                  *(_OWORD *)CMTime rhs = v50;
                  *(_OWORD *)&rhs[12] = v49;
                  v29(v26, v54, time, &v66, rhs, bufferedAudioEngine_hoseSetRateAndAnchorTimeCallbackCompletionHandler, a1);
                }
                else
                {
                  bufferedAudioEngine_hoseSetRateAndAnchorTimeCallbackCompletionHandler(v26, 0, MEMORY[0x1E4F49F28], MEMORY[0x1E4F4A160], MEMORY[0x1E4F49F28], 4294954514, a1);
                }
              }
            }
            *(void *)(v21 + 64) = *(void *)(v5 + 808);
            *(_DWORD *)(v21 + 140) = 2;
            *(unsigned char *)(v21 + 168) = 0;
          }
          uint64_t v21 = *(void *)v21;
        }
        while (v21);
      }
      goto LABEL_61;
    }
    uint64_t v18 = *(void *)(v5 + 1680);
    *(_OWORD *)CMTime v60 = v62[0];
    *(_OWORD *)&v60[12] = *(_OWORD *)((char *)v62 + 12);
    uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v19) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t, unsigned char *, CMTime *, unsigned char *))(v20 + 40);
    if (v30)
    {
      *(_OWORD *)CMTime time = *(_OWORD *)v60;
      *(_OWORD *)&time[12] = *(_OWORD *)&v60[12];
      v66.CMTimeScale value = v51;
      *(void *)&v66.CMTimeScale timescale = v52;
      v66.CMTimeEpoch epoch = __PAIR64__(v17, v53);
      *(_OWORD *)CMTime rhs = v50;
      *(_OWORD *)&rhs[12] = v49;
      uint64_t v31 = v30(v18, v54, time, &v66, rhs);
      if (!v31)
      {
LABEL_61:
        long long v32 = *(_OWORD *)v14;
        *(void *)&time[16] = *(void *)(v5 + 740);
        *(_OWORD *)CMTime time = v32;
        *(_OWORD *)CMTime rhs = *(_OWORD *)(v5 + 700);
        *(void *)&rhs[16] = *(void *)(v5 + 716);
        CMTimeSubtract(&v63, (CMTime *)time, (CMTime *)rhs);
        if (*(unsigned char *)(v5 + 1228))
        {
          memset(time, 0, 24);
          uint64_t v33 = CMClockGetHostTimeClock();
          CMClockGetTime(&lhs, v33);
          *(_OWORD *)CMTime rhs = *(_OWORD *)(v5 + 1216);
          *(void *)&rhs[16] = *(void *)(v5 + 1232);
          CMTimeSubtract((CMTime *)time, &lhs, (CMTime *)rhs);
          *(_OWORD *)CMTime v60 = *(_OWORD *)(v5 + 1240);
          *(void *)&v60[16] = *(void *)(v5 + 1256);
          CMTime v66 = *(CMTime *)time;
          CMTimeAdd((CMTime *)rhs, (CMTime *)v60, &v66);
          *(_OWORD *)(v5 + 1240) = *(_OWORD *)rhs;
          *(void *)(v5 + 1256) = *(void *)&rhs[16];
          *(_OWORD *)(v5 + 1216) = v48;
          *(void *)(v5 + 1232) = v47;
        }
        APSTimedInfoManagerSuspend();
        uint64_t v34 = *(const void **)(v5 + 792);
        int v2 = (CMTime *)MEMORY[0x1E4F1F9F8];
        if (v34)
        {
          CFRelease(v34);
          *(void *)(v5 + 792) = 0;
        }
        if (!APSSettingsIsFeatureEnabled())
        {
          CFDataRef v35 = *(void **)(v5 + 584);
          if (v35)
          {
            uint64_t v36 = *MEMORY[0x1E4F49FD8];
            uint64_t v37 = *MEMORY[0x1E4F1CFC8];
            do
            {
              uint64_t v38 = v35[2];
              uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v39) {
                uint64_t v40 = v39;
              }
              else {
                uint64_t v40 = 0;
              }
              uint64_t v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 56);
              if (v41) {
                v41(v38, v36, v37);
              }
              CFDataRef v35 = (void *)*v35;
            }
            while (v35);
          }
        }
        goto LABEL_74;
      }
      uint64_t v42 = v31;
    }
    else
    {
      uint64_t v42 = 4294954514;
    }
    APSLogErrorAt();
  }
  else
  {
    APSLogErrorAt();
    uint64_t v42 = APSSignalErrorAt();
  }
LABEL_77:
  *(void *)(v5 + 816) = 0xBFF0000000000000;
  bufferedAudioEngine_updatePlaybackState((uint64_t)a1, 1937010544);
  uint64_t v43 = &v63;
  if (v42) {
    uint64_t v43 = v2;
  }
  uint64_t v44 = &v64;
  if (v42) {
    uint64_t v44 = v2;
  }
  long long v57 = *(_OWORD *)&v43->value;
  CMTimeEpoch epoch = v43->epoch;
  long long v55 = *(_OWORD *)&v44->value;
  CMTimeEpoch v56 = v44->epoch;
  bufferedAudioEngine_callSetRateAndAnchorTimeClientCompletionCallback(a1, v42, (uint64_t)&v57, (uint64_t)&v55, 0);
  *(unsigned char *)(v5 + 760) = 0;
  *(void *)(v5 + 752) = 0;
  *(void *)(v5 + 880) = 0;
  *(void *)(v5 + 872) = 0;
  return v42;
}

uint64_t bufferedAudioEngine_startRemoteMediaTimebaseWithReceiverAnchor(const void *a1, uint64_t a2, CMTime *a3)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v7 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&v63.CMTimeValue value = v7;
  CMTimeEpoch v8 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  v63.CMTimeEpoch epoch = v8;
  *(_OWORD *)&v62.CMTimeValue value = v7;
  v62.CMTimeEpoch epoch = v8;
  uint64_t v68 = *(void *)(MEMORY[0x1E4F1F9F8] + 12);
  int epoch_high = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 20);
  *(_OWORD *)&v61.CMTimeValue value = v7;
  v61.CMTimeEpoch epoch = v8;
  v59.CMTimeEpoch epoch = v8;
  uint64_t hostTime = 0;
  *(_OWORD *)&v59.CMTimeValue value = v7;
  if (*(_DWORD *)(DerivedStorage + 804) != 1937207905) {
    return 0;
  }
  uint64_t v9 = DerivedStorage;
  long long v51 = v7;
  uint64_t v10 = *(void *)(DerivedStorage + 328);
  CMTime immediateSourceTime = *a3;
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(uint64_t (**)(uint64_t, CMTime *, uint64_t *))(v12 + 24);
  if (!v13)
  {
    uint64_t v19 = 4294954514;
LABEL_11:
    APSLogErrorAt();
    if (gLogCategory_APAudioEngineBuffered <= 90
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1) {
        CMBaseObjectGetDerivedStorage();
      }
      LogPrintF();
    }
    return v19;
  }
  CMTime time = immediateSourceTime;
  uint64_t v14 = v13(v10, &time, &hostTime);
  if (v14)
  {
    uint64_t v19 = v14;
    goto LABEL_11;
  }
  CMClockMakeHostTimeFromSystemUnits(&v63, hostTime);
  if (*(_DWORD *)a2 == 2)
  {
    CMTimeValue v52 = *(void *)(a2 + 4);
    CMTimeScale v17 = *(_DWORD *)(a2 + 12);
    uint64_t v70 = *(void *)(a2 + 16);
    int v18 = *(_DWORD *)(a2 + 24);
LABEL_16:
    int v71 = v18;
    CFAllocatorRef v20 = CFGetAllocator(a1);
    uint64_t v21 = CMTimebaseCreateWithSourceClock(v20, *(CMClockRef *)(v9 + 448), (CMTimebaseRef *)(v9 + 792));
    if (v21)
    {
      uint64_t v19 = v21;
    }
    else
    {
      APSTimedInfoManagerResume();
      bufferedAudioEngine_recordStartTimebaseTimeStampForRTC((uint64_t)a1, hostTime);
      CMClockRef HostTimeClock = CMClockGetHostTimeClock();
      uint64_t v23 = *(const void **)(v9 + 448);
      CMTime time = v63;
      CMSyncConvertTime(&v62, &time, HostTimeClock, v23);
      int v24 = *(OpaqueCMTimebase **)(v9 + 792);
      time.CMTimeValue value = v52;
      *(void *)&time.CMTimeFlags flags = v70;
      time.CMTimeScale timescale = v17;
      HIDWORD(time.epoch) = v71;
      CMTime immediateSourceTime = v62;
      uint64_t v25 = CMTimebaseSetRateAndAnchorTime(v24, 1.0, &time, &immediateSourceTime);
      if (!v25)
      {
        if (gLogCategory_APAudioEngineBuffered <= 50
          && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
        {
          if (a1) {
            CMBaseObjectGetDerivedStorage();
          }
          time.CMTimeValue value = v52;
          *(void *)&time.CMTimeFlags flags = v70;
          time.CMTimeScale timescale = v17;
          HIDWORD(time.epoch) = v71;
          CMTimeGetSeconds(&time);
          LogPrintF();
        }
        CFAllocatorRef v26 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        values = *(void **)(v9 + 952);
        keys = @"ContentType";
        CFDictionaryRef v27 = CFDictionaryCreate(v26, (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (!v27)
        {
          APSLogErrorAt();
          return 4294951816;
        }
        uint64_t v28 = (long long *)(v9 + 700);
        time.CMTimeValue value = v52;
        *(void *)&time.CMTimeFlags flags = v70;
        time.CMTimeScale timescale = v17;
        HIDWORD(time.epoch) = v71;
        CFDictionaryRef cf = v27;
        APSTimedInfoManagerAddTimedInfo();
        if (gLogCategory_APAudioEngineBuffered <= 50
          && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
        {
          if (a1) {
            CMBaseObjectGetDerivedStorage();
          }
          time.CMTimeValue value = v52;
          *(void *)&time.CMTimeFlags flags = v70;
          time.CMTimeScale timescale = v17;
          HIDWORD(time.epoch) = v71;
          CMTimeGetSeconds(&time);
          CMTime time = v63;
          CMTimeGetSeconds(&time);
          uint64_t v29 = CMClockGetHostTimeClock();
          CMClockGetTime(&v58, v29);
          CMTimeGetSeconds(&v58);
          CMTime time = v62;
          CMTimeGetSeconds(&time);
          CMClockGetTime(&v57, *(CMClockRef *)(v9 + 448));
          CMTimeGetSeconds(&v57);
          LogPrintF();
        }
        uint64_t v30 = (long long *)(v9 + 724);
        if (*(_DWORD *)(v9 + 736)) {
          uint64_t v31 = (CMTime *)(v9 + 724);
        }
        else {
          uint64_t v31 = (CMTime *)(v9 + 700);
        }
        CMTime time = *v31;
        long long v32 = *(const void **)(v9 + 792);
        CMClockRef v33 = CMClockGetHostTimeClock();
        CMTime immediateSourceTime = time;
        CMSyncConvertTime(&lhs, &immediateSourceTime, v32, v33);
        uint64_t v34 = CMClockGetHostTimeClock();
        CMClockGetTime(&rhs, v34);
        CMTimeSubtract(&v61, &lhs, &rhs);
        bufferedAudioEngine_getPlaybackStartupTime(&v59);
        if (gLogCategory_APAudioEngineBuffered <= 50
          && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
        {
          if (a1) {
            CMBaseObjectGetDerivedStorage();
          }
          CMTime immediateSourceTime = v61;
          CMTimeGetSeconds(&immediateSourceTime);
          CMTime immediateSourceTime = v59;
          CMTimeGetSeconds(&immediateSourceTime);
          LogPrintF();
        }
        uint64_t v35 = LogCategoryCopyOSLogHandle();
        uint64_t v36 = (void *)v35;
        if (v35) {
          uint64_t v37 = v35;
        }
        else {
          uint64_t v37 = MEMORY[0x1E4F14500];
        }
        if (os_signpost_enabled(v37))
        {
          CMTime immediateSourceTime = v61;
          Float64 Seconds = CMTimeGetSeconds(&immediateSourceTime);
          LODWORD(immediateSourceTime.value) = 134217984;
          *(Float64 *)((char *)&immediateSourceTime.value + 4) = Seconds;
          _os_signpost_emit_with_name_impl(&dword_1D0945000, v37, OS_SIGNPOST_EVENT, 0x2B1605C4uLL, "AIRPLAY_SIGNPOST_AUDIOENGINE_FIRST_AUDIBLE_TIME_RELATIVE_TO_NOW_MS", "First audible time relative to now: %1.6f \n", (uint8_t *)&immediateSourceTime, 0xCu);
        }
        if (v36) {
          os_release(v36);
        }
        bufferedAudioEngine_logStartupTime((uint64_t)a1);
        *(void *)(v9 + 808) = *(void *)(v9 + 816);
        *(void *)(v9 + 816) = 0xBFF0000000000000;
        *uint64_t v30 = v51;
        *(void *)(v9 + 740) = v8;
        uint64_t v39 = *(void *)(v9 + 864);
        uint64_t v40 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v40) {
          uint64_t v41 = v40;
        }
        else {
          uint64_t v41 = 0;
        }
        uint64_t v42 = *(void (**)(uint64_t, void, void))(v41 + 56);
        if (v42) {
          v42(v39, *MEMORY[0x1E4F49FD8], *MEMORY[0x1E4F1CFD0]);
        }
        bufferedAudioEngine_updatePlaybackState((uint64_t)a1, 1937011316);
        v54.CMTimeValue value = v52;
        v54.CMTimeScale timescale = v17;
        *(void *)&v54.CMTimeFlags flags = v70;
        HIDWORD(v54.epoch) = v71;
        long long v43 = *v28;
        v53.CMTimeEpoch epoch = *(void *)(v9 + 716);
        *(_OWORD *)&v53.CMTimeValue value = v43;
        CMTimeSubtract(&immediateSourceTime, &v54, &v53);
        CMTimeValue value = immediateSourceTime.value;
        uint64_t v68 = *(void *)&immediateSourceTime.flags;
        CMTimeScale timescale = immediateSourceTime.timescale;
        int epoch_high = HIDWORD(immediateSourceTime.epoch);
        if (gLogCategory_APAudioEngineBuffered <= 50
          && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
        {
          if (a1) {
            CMBaseObjectGetDerivedStorage();
          }
          immediateSourceTime.CMTimeValue value = value;
          *(void *)&immediateSourceTime.CMTimeFlags flags = v68;
          immediateSourceTime.CMTimeScale timescale = timescale;
          HIDWORD(immediateSourceTime.epoch) = epoch_high;
          CMTimeGetSeconds(&immediateSourceTime);
          immediateSourceTime.CMTimeValue value = v52;
          *(void *)&immediateSourceTime.CMTimeFlags flags = v70;
          immediateSourceTime.CMTimeScale timescale = v17;
          HIDWORD(immediateSourceTime.epoch) = v71;
          CMTimeGetSeconds(&immediateSourceTime);
          long long v46 = *v28;
          immediateSourceTime.CMTimeEpoch epoch = *(void *)(v9 + 716);
          *(_OWORD *)&immediateSourceTime.CMTimeValue value = v46;
          CMTimeGetSeconds(&immediateSourceTime);
          long long v47 = *v30;
          immediateSourceTime.CMTimeEpoch epoch = *(void *)(v9 + 740);
          *(_OWORD *)&immediateSourceTime.CMTimeValue value = v47;
          CMTimeGetSeconds(&immediateSourceTime);
          LogPrintF();
        }
        long long v48 = *(const void **)(v9 + 888);
        immediateSourceTime.CMTimeValue value = value;
        *(void *)&immediateSourceTime.CMTimeFlags flags = v68;
        immediateSourceTime.CMTimeScale timescale = timescale;
        HIDWORD(immediateSourceTime.epoch) = epoch_high;
        CMTime v54 = v63;
        bufferedAudioEngine_callSetRateAndAnchorTimeClientCompletionCallback(a1, 0, (uint64_t)&immediateSourceTime, (uint64_t)&v54, v48);
        *(void *)(v9 + 880) = 0;
        *(void *)(v9 + 872) = 0;
        CFRelease(cf);
        return 0;
      }
      uint64_t v19 = v25;
    }
    APSLogErrorAt();
    return v19;
  }
  if (*(_DWORD *)a2 == 1)
  {
    int64_t v15 = *(unsigned int *)(a2 + 4);
    int32_t SampleRateFromTransportAudioFormat = bufferedAudioEngine_getSampleRateFromTransportAudioFormat();
    CMTimeMake(&time, v15, SampleRateFromTransportAudioFormat);
    CMTimeValue v52 = time.value;
    uint64_t v70 = *(void *)&time.flags;
    CMTimeScale v17 = time.timescale;
    int v18 = HIDWORD(time.epoch);
    goto LABEL_16;
  }
  return 4294960587;
}

void bufferedAudioEngine_handleTerminalSetRateErrorForHoseManager(uint64_t a1, uint64_t a2, int a3, int a4)
{
  CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    if (a4)
    {
      if (gLogCategory_APAudioEngineBuffered <= 90
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (a1) {
          CMBaseObjectGetDerivedStorage();
        }
        LogPrintF();
      }
      CMTimeEpoch v8 = @"Too many retries setting the rate to 1";
    }
    else
    {
      if (gLogCategory_APAudioEngineBuffered <= 90
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (a1) {
          CMBaseObjectGetDerivedStorage();
        }
        LogPrintF();
      }
      CMTimeEpoch v8 = @"SetRate encountered terminal error";
    }
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      FigCFDictionarySetInt32();
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F212C8], v8);
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    if (a3 == -71976) {
      uint64_t v10 = @"SetRate 1 failed due to not agreeing on grandmaster";
    }
    else {
      uint64_t v10 = @"SetRate 1 failed due to error";
    }
    bufferedAudioEngine_sendSessionFailureEvent(a1, v10);
    bufferedAudioEngine_maybeTriggerTTR(a1, 0, 0, a3);
    if (Mutable)
    {
      CFRelease(Mutable);
    }
  }
  else if (gLogCategory_APAudioEngineBuffered <= 90 {
         && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  }
  {
    if (a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
}

uint64_t bufferedAudioEngine_hoseSetRateAndAnchorTimeCallbackCompletionHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const void *a7)
{
  if (a7) {
    CFRelease(a7);
  }
  return 0;
}

void bufferedAudioEngine_hoseSetRateAndAnchorTimeCallbackCompletionHandlerInternal(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    CMTimeEpoch v3 = DerivedStorage;
    HoseDecriptorFromHose = bufferedAudioEngine_getHoseDecriptorFromHose();
    if (HoseDecriptorFromHose)
    {
      uint64_t v5 = HoseDecriptorFromHose;
      if (*(_DWORD *)(a1 + 16))
      {
        uint64_t v6 = MEMORY[0x1E4F49F28];
        *((_OWORD *)HoseDecriptorFromHose + 11) = *MEMORY[0x1E4F49F28];
        *(_OWORD *)((char *)HoseDecriptorFromHose + 188) = *(_OWORD *)(v6 + 12);
        if (*(_DWORD *)(a1 + 100))
        {
          ++*((_DWORD *)HoseDecriptorFromHose + 41);
          if (gLogCategory_APAudioEngineBuffered <= 90
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (*(void *)a1) {
              CMBaseObjectGetDerivedStorage();
            }
            LogPrintF();
          }
          uint64_t v8 = LogCategoryCopyOSLogHandle();
          uint64_t v9 = (void *)v8;
          if (v8) {
            uint64_t v10 = v8;
          }
          else {
            uint64_t v10 = MEMORY[0x1E4F14500];
          }
          if (os_signpost_enabled(v10))
          {
            uint64_t v11 = *(void *)(a1 + 8);
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v11;
            _os_signpost_emit_with_name_impl(&dword_1D0945000, v10, OS_SIGNPOST_INTERVAL_END, 0x2B160578uLL, "AIRPLAY_SIGNPOST_AUDIOENGINE_HOSE_SETRATE_1", "FAILURE hose=0x%x", buf, 8u);
          }
          if (v9) {
            os_release(v9);
          }
          if (*((_DWORD *)v5 + 41) < 0x32u)
          {
            if (*((double *)v3 + 101) == 1.0 && *((double *)v5 + 8) == 1.0)
            {
              v5[8] = 0;
              *((_DWORD *)v5 + 35) = 2;
              if (!v3[856])
              {
                uint64_t v12 = MicrosecondsToUpTicks();
                *((void *)v3 + 106) = mach_absolute_time() + v12;
                v3[856] = 1;
              }
            }
          }
          else
          {
            bufferedAudioEngine_handleTerminalSetRateError(*(void *)a1, *(void *)(a1 + 8), *(_DWORD *)(a1 + 100));
          }
        }
        else
        {
          *((_DWORD *)HoseDecriptorFromHose + 41) = 0;
          if (gLogCategory_APAudioEngineBuffered <= 50
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (*(void *)a1) {
              CMBaseObjectGetDerivedStorage();
            }
            LogPrintF();
          }
          uint64_t v17 = LogCategoryCopyOSLogHandle();
          int v18 = (void *)v17;
          if (v17) {
            uint64_t v19 = v17;
          }
          else {
            uint64_t v19 = MEMORY[0x1E4F14500];
          }
          if (os_signpost_enabled(v19))
          {
            uint64_t v20 = *(void *)(a1 + 8);
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v20;
            _os_signpost_emit_with_name_impl(&dword_1D0945000, v19, OS_SIGNPOST_INTERVAL_END, 0x2B160578uLL, "AIRPLAY_SIGNPOST_AUDIOENGINE_HOSE_SETRATE_1", "SUCCESS hose=0x%x", buf, 8u);
          }
          if (v18) {
            os_release(v18);
          }
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 100))
        {
          if (gLogCategory_APAudioEngineBuffered <= 90
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (*(void *)a1) {
              CMBaseObjectGetDerivedStorage();
            }
            LogPrintF();
          }
          uint64_t v13 = LogCategoryCopyOSLogHandle();
          uint64_t v14 = (void *)v13;
          if (v13) {
            int64_t v15 = v13;
          }
          else {
            int64_t v15 = MEMORY[0x1E4F14500];
          }
          if (os_signpost_enabled(v15))
          {
            uint64_t v16 = *(void *)(a1 + 8);
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v16;
            _os_signpost_emit_with_name_impl(&dword_1D0945000, v15, OS_SIGNPOST_INTERVAL_END, 0x2B16057CuLL, "AIRPLAY_SIGNPOST_AUDIOENGINE_HOSE_SETRATE_0", "REQUEST hose=0x%x", buf, 8u);
          }
          long long v7 = 0;
        }
        else
        {
          *(_OWORD *)buf = *(_OWORD *)(a1 + 72);
          *(_OWORD *)&buf[12] = *(_OWORD *)(a1 + 84);
          long long v7 = (const void *)APSAudioTransportTimeCopyDebugDesc();
          if (gLogCategory_APAudioEngineBuffered <= 50
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (*(void *)a1) {
              CMBaseObjectGetDerivedStorage();
            }
            LogPrintF();
          }
          uint64_t v21 = LogCategoryCopyOSLogHandle();
          uint64_t v14 = (void *)v21;
          if (v21) {
            uint64_t v22 = v21;
          }
          else {
            uint64_t v22 = MEMORY[0x1E4F14500];
          }
          if (os_signpost_enabled(v22))
          {
            uint64_t v23 = *(void *)(a1 + 8);
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v23;
            _os_signpost_emit_with_name_impl(&dword_1D0945000, v22, OS_SIGNPOST_INTERVAL_END, 0x2B16057CuLL, "AIRPLAY_SIGNPOST_AUDIOENGINE_HOSE_SETRATE_0", "SUCCESS hose=0x%x", buf, 8u);
          }
        }
        if (v14) {
          os_release(v14);
        }
        if (!*((_DWORD *)v5 + 43))
        {
          long long v24 = *(_OWORD *)(a1 + 72);
          *(_OWORD *)((char *)v5 + 188) = *(_OWORD *)(a1 + 84);
          *((_OWORD *)v5 + 11) = v24;
        }
        if (v7) {
          CFRelease(v7);
        }
      }
    }
    else if (gLogCategory_APAudioEngineBuffered <= 90 {
           && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    }
    {
      if (*(void *)a1) {
        CMBaseObjectGetDerivedStorage();
      }
      LogPrintF();
    }
  }
  **(_DWORD **)(a1 + 104) = 0;
}

void bufferedAudioEngine_handleTerminalSetRateError(uint64_t a1, uint64_t a2, int a3)
{
  CMBaseObjectGetDerivedStorage();
  HoseDecriptorFromHose = bufferedAudioEngine_getHoseDecriptorFromHose();
  if (HoseDecriptorFromHose)
  {
    long long v7 = HoseDecriptorFromHose;
    if (gLogCategory_APAudioEngineBuffered <= 90
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1) {
        CMBaseObjectGetDerivedStorage();
      }
      LogPrintF();
    }
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      FigCFDictionarySetInt32();
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F212C8], @"Too many retries setting the rate to 1");
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    if (a3 == -71976) {
      uint64_t v9 = @"SetRate 1 failed due to not agreeing on grandmaster";
    }
    else {
      uint64_t v9 = @"SetRate 1 failed due to error";
    }
    bufferedAudioEngine_sendSessionFailureEvent(a1, v9);
    bufferedAudioEngine_maybeTriggerTTR(a1, a2, v7[31], a3);
    if (Mutable)
    {
      CFRelease(Mutable);
    }
  }
  else if (gLogCategory_APAudioEngineBuffered <= 90 {
         && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  }
  {
    if (a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
}

void bufferedAudioEngine_maybeTriggerTTR(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v22 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  uint64_t v8 = mach_absolute_time();
  if (v8 < bufferedAudioEngine_maybeTriggerTTR_nextDialogTicks)
  {
    if (gLogCategory_APAudioEngineBuffered <= 50
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1) {
        CMBaseObjectGetDerivedStorage();
      }
      LogPrintF();
    }
    goto LABEL_37;
  }
  uint64_t v9 = v8;
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (*(void *)(DerivedStorage + 536))
  {
    uint64_t CMBaseObject = FigEndpointStreamGetCMBaseObject();
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v13 + 48);
    if (v14)
    {
      int v22 = v14(CMBaseObject, @"EndpointIDs", v10, &cf);
      if (!v22) {
        goto LABEL_12;
      }
    }
    else
    {
      int v22 = -12782;
    }
    APSLogErrorAt();
    goto LABEL_37;
  }
LABEL_12:
  CFMutableStringRef Mutable = CFStringCreateMutable(v10, 0);
  if (!Mutable)
  {
LABEL_37:
    uint64_t v17 = 0;
    goto LABEL_56;
  }
  CFMutableStringRef v16 = Mutable;
  int v22 = CFStringAppendF();
  if (v22)
  {
    APSLogErrorAt();
    uint64_t v17 = 0;
LABEL_67:
    uint64_t v20 = v16;
    goto LABEL_55;
  }
  if (a4 == -6722)
  {
    uint64_t v17 = (const void *)CFStringCreateF();
    if (!v22) {
      goto LABEL_28;
    }
    goto LABEL_66;
  }
  if (a4 != -71974)
  {
    if (a4 == -71976)
    {
      uint64_t v17 = (const void *)CFStringCreateF();
      if (!v22) {
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v17 = (const void *)CFStringCreateF();
      if (!v22) {
        goto LABEL_28;
      }
    }
    goto LABEL_66;
  }
  uint64_t v17 = (const void *)CFStringCreateF();
  if (v22)
  {
LABEL_66:
    APSLogErrorAt();
    goto LABEL_67;
  }
LABEL_28:
  uint64_t v18 = CFStringCreateF();
  if (!v22)
  {
    if (a2)
    {
      if (a1) {
        CMBaseObjectGetDerivedStorage();
      }
      int v22 = CFStringAppendF();
      if (v22) {
        goto LABEL_44;
      }
    }
    else
    {
      if (a1) {
        CMBaseObjectGetDerivedStorage();
      }
      int v22 = CFStringAppendF();
      if (v22) {
        goto LABEL_44;
      }
    }
    int v22 = CFStringAppendF();
    if (!v22)
    {
      int v22 = CFStringAppendF();
      if (!v22)
      {
        uint64_t v19 = (void *)(DerivedStorage + 584);
        while (1)
        {
          uint64_t v19 = (void *)*v19;
          if (!v19) {
            break;
          }
          int v22 = CFStringAppendF();
          if (v22) {
            goto LABEL_44;
          }
        }
        if (gLogCategory_APAudioEngineBuffered <= 50
          && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
        {
          if (a1) {
            CMBaseObjectGetDerivedStorage();
          }
          LogPrintF();
        }
        bufferedAudioEngine_maybeTriggerTTR_nextDialogTicks = v9 + 36000 * UpTicksPerSecond();
        APSTapToRadarInvoke();
        goto LABEL_53;
      }
    }
  }
LABEL_44:
  APSLogErrorAt();
LABEL_53:
  CFRelease(v16);
  if (!v18) {
    goto LABEL_56;
  }
  uint64_t v20 = (const void *)v18;
LABEL_55:
  CFRelease(v20);
LABEL_56:
  if (cf) {
    CFRelease(cf);
  }
  if (v17) {
    CFRelease(v17);
  }
}

void bufferedAudioEngine_recordStartTimebaseTimeStampForRTC(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage[147])
  {
    uint64_t v5 = DerivedStorage;
    if (DerivedStorage[173])
    {
      FigCFDictionarySetInt64();
      uint64_t v6 = (const void *)v5[111];
      if (v6)
      {
        CFRelease(v6);
        v5[111] = 0;
      }
      v5[111] = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFDictionaryRef)v5[173]);
      FigCFDictionarySetInt64();
      APSAudioFormatDescriptionCopyDebugString();
      APSLogErrorAt();
    }
    else
    {
      DerivedStorage[175] = a2;
      bufferedAudioEngine_updateActiveAudioEngineCount(a1, 1);
      bufferedAudioEngine_reportPlayingAudioEngineEvent(a1);
    }
  }
}

CMTime *bufferedAudioEngine_getPlaybackStartupTime@<X0>(CMTime *a1@<X8>)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&a1->CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  a1->CMTimeEpoch epoch = *(void *)(v3 + 16);
  uint64_t result = *(CMTime **)(DerivedStorage + 888);
  if (result)
  {
    uint64_t result = (CMTime *)FigCFDictionaryGetInt64IfPresent();
    if (result)
    {
      uint64_t result = (CMTime *)FigCFDictionaryGetInt64IfPresent();
      if (result)
      {
        int64_t v5 = UpTicksToMilliseconds();
        return CMTimeMake(a1, v5, 1000);
      }
    }
  }
  return result;
}

void bufferedAudioEngine_logStartupTime(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t AudioFormatIndex = APSAudioFormatDescriptionGetAudioFormatIndex();
  int v4 = "PCM/24000/16/1";
  switch(AudioFormatIndex)
  {
    case 2:
      int v4 = "PCM/8000/16/1";
      break;
    case 3:
      int v4 = "PCM/8000/16/2";
      break;
    case 4:
      int v4 = "PCM/16000/16/1";
      break;
    case 5:
      int v4 = "PCM/16000/16/2";
      break;
    case 6:
      break;
    case 7:
      int v4 = "PCM/24000/16/2";
      break;
    case 8:
      int v4 = "PCM/32000/16/1";
      break;
    case 9:
      int v4 = "PCM/32000/16/2";
      break;
    case 10:
      int v4 = "PCM/44100/16/1";
      break;
    case 11:
      int v4 = "PCM/44100/16/2";
      break;
    case 12:
      int v4 = "PCM/44100/24/1";
      break;
    case 13:
      int v4 = "PCM/44100/24/2";
      break;
    case 14:
      int v4 = "PCM/48000/16/1";
      break;
    case 15:
      int v4 = "PCM/48000/16/2";
      break;
    case 16:
      int v4 = "PCM/48000/24/1";
      break;
    case 17:
      int v4 = "PCM/48000/24/2";
      break;
    case 18:
      int v4 = "ALAC/44100/16/2";
      break;
    case 19:
      int v4 = "ALAC/44100/24/2";
      break;
    case 20:
      int v4 = "ALAC/48000/16/2";
      break;
    case 21:
      int v4 = "ALAC/48000/24/2";
      break;
    case 22:
      int v4 = "AAC-LC/44100/2";
      break;
    case 23:
      int v4 = "AAC-LC/48000/2";
      break;
    case 24:
      int v4 = "AAC-ELD/44100/2";
      break;
    case 25:
      int v4 = "AAC-ELD/48000/2";
      break;
    case 26:
      int v4 = "AAC-ELD/16000/1";
      break;
    case 27:
      int v4 = "AAC-ELD/24000/1";
      break;
    case 28:
      int v4 = "OPUS/16000/1";
      break;
    case 29:
      int v4 = "OPUS/24000/1";
      break;
    case 30:
      int v4 = "OPUS/48000/1";
      break;
    case 31:
      int v4 = "AAC-ELD/44100/1";
      break;
    case 32:
      int v4 = "AAC-ELD/48000/1";
      break;
    case 33:
      int v4 = "QC3/48000/5.1.2";
      break;
    case 34:
      int v4 = "QC3/48000/7.1.4";
      break;
    case 35:
      int v4 = "QC3/48000/9.1.6";
      break;
    case 38:
      int v4 = "PCM/48000/16/5.1.2";
      break;
    case 39:
      int v4 = "AAC_LC/48000/5.1";
      break;
    case 40:
      int v4 = "AAC_LC/48000/5.1.2";
      break;
    case 41:
      int v4 = "AAC_ELD/48000/5.1";
      break;
    case 42:
      int v4 = "AAC_ELD/48000/5.1.2";
      break;
    case 43:
      int v4 = "AAC-ELD/32000/1";
      break;
    case 44:
      int v4 = "PCM/48000/16/5.1";
      break;
    case 45:
      int v4 = "PCM/48000/32f/1";
      break;
    case 46:
      int v4 = "PCM/48000/32f/2";
      break;
    case 47:
      int v4 = "PCM/48000/32f/5.1";
      break;
    case 48:
      int v4 = "PCM/48000/32f/5.1.2";
      break;
    case 49:
      int v4 = "DDPLUS/48000/2";
      break;
    case 50:
      int v4 = "DDPLUS/48000/5.1";
      break;
    case 51:
      int v4 = "DDPLUS/48000/5.1.2";
      break;
    case 52:
      int v4 = "DDPLUS/48000/7.1.4";
      break;
    case 53:
      int v4 = "DDPLUS/48000/9.1.6";
      break;
    case 54:
      int v4 = "QAAC/48000/2";
      break;
    case 55:
      int v4 = "QAAC/48000/5.1";
      break;
    case 56:
      int v4 = "QAAC/48000/5.1.2";
      break;
    case 57:
      int v4 = "QAACHE/48000/2";
      break;
    case 58:
      int v4 = "QAACHE/48000/5.1";
      break;
    case 60:
      int v4 = "QAACHE/48000/5.1.2";
      break;
    case 61:
      int v4 = "QLAC/48000/24/2";
      break;
    case 62:
      int v4 = "QC3/48000/2";
      break;
    case 63:
      int v4 = "QC3/48000/5.1";
      break;
    case 64:
      int v4 = "APAC/48000/2";
      break;
    case 65:
      int v4 = "APAC/48000/5.1";
      break;
    case 66:
      int v4 = "APAC/48000/5.1.2";
      break;
    case 67:
      int v4 = "APAC/48000/7.1";
      break;
    case 68:
      int v4 = "APAC/48000/7.1.4";
      break;
    case 69:
      int v4 = "PCM/48000/32f/7.1.4";
      break;
    case 70:
      int v4 = "QAAC/44100/2";
      break;
    case 71:
      int v4 = "QAACHE/44100/2";
      break;
    case 72:
      int v4 = "QAACHEV2/44100/2";
      break;
    case 73:
      int v4 = "QLAC/44100/24/2";
      break;
    case 74:
      int v4 = "MP3/44100/2";
      break;
    case 76:
      int v4 = "APAC/48000/5.1.4";
      break;
    case 77:
      int v4 = "APAC/48000/7.1.2";
      break;
    case 78:
      int v4 = "PCM/48000/16/7.1";
      break;
    case 79:
      int v4 = "PCM/48000/32f/7.1";
      break;
    case 80:
      int v4 = "PCM/48000/16/5.1.4";
      break;
    case 81:
      int v4 = "PCM/48000/32f/5.1.4";
      break;
    case 82:
      int v4 = "PCM/48000/16/7.1.2";
      break;
    case 83:
      int v4 = "PCM/48000/32f/7.1.2";
      break;
    case 84:
      int v4 = "PCM/48000/16/7.1.4";
      break;
    case 85:
      int v4 = "ALAC/44100/20/2";
      break;
    case 86:
      int v4 = "ALAC/48000/20/2";
      break;
    case 87:
      int v4 = "QAC3/48000/5.1";
      break;
    case 88:
      int v4 = "QEC3/48000/7.1";
      break;
    case 89:
      int v4 = "PAAC/44100/2";
      break;
    case 90:
      int v4 = "AAC_LC/48000/7.1";
      break;
    case 91:
      int v4 = "EAC3/48000/5.1";
      break;
    default:
      if (AudioFormatIndex == 75) {
        int v4 = "MP3/48000/2";
      }
      else {
        int v4 = "";
      }
      break;
  }
  CMTime lhs = *(CMTime *)(DerivedStorage + 1620);
  CMTime rhs = *(CMTime *)(DerivedStorage + 1568);
  CMTimeSubtract(&time, &lhs, &rhs);
  CMTimeGetSeconds(&time);
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  if (*(void *)(DerivedStorage + 1176))
  {
    CFMutableStringRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      uint64_t v6 = Mutable;
      CFDictionarySetValue(Mutable, @"sessionType", @"AudioBuffered");
      strlen(v4);
      CFDictionarySetCString();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      APSRTCReportingAgentSendEvent();
      CFRelease(v6);
    }
    else
    {
      APSLogErrorAt();
    }
  }
}

void bufferedAudioEngine_hoseSetRateCallbackCompletionHandlerInternal(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage) {
    goto LABEL_71;
  }
  uint64_t v3 = DerivedStorage;
  HoseDecriptorFromHose = bufferedAudioEngine_getHoseDecriptorFromHose();
  if (!HoseDecriptorFromHose)
  {
    if (gLogCategory_APAudioEngineBuffered > 90
      || gLogCategory_APAudioEngineBuffered == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_71;
    }
    if (!*(void *)a1) {
      goto LABEL_46;
    }
    goto LABEL_20;
  }
  int64_t v5 = HoseDecriptorFromHose;
  if (v3[802])
  {
    if (gLogCategory_APAudioEngineBuffered <= 50
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (*(void *)a1) {
        CMBaseObjectGetDerivedStorage();
      }
      LogPrintF();
    }
    bufferedAudioEngine_updatePlaybackState(*(void *)a1, 1937010793);
    uint64_t v7 = LogCategoryCopyOSLogHandle();
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = MEMORY[0x1E4F14500];
    }
    if (os_signpost_enabled(v8))
    {
      uint64_t v9 = *(void *)(a1 + 8);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v9;
      _os_signpost_emit_with_name_impl(&dword_1D0945000, v8, OS_SIGNPOST_INTERVAL_BEGIN, 0x2B16057CuLL, "AIRPLAY_SIGNPOST_AUDIOENGINE_HOSE_SETRATE_0", "REQUEST hose=0x%x", buf, 8u);
    }
    LODWORD(v10) = bufferedAudioEngine_handleSetRateToZero(*(const void **)a1);
    v3[802] = 0;
    goto LABEL_76;
  }
  int v6 = *(_DWORD *)(a1 + 80);
  if (v6 == -17580)
  {
    if (gLogCategory_APAudioEngineBuffered > 50
      || gLogCategory_APAudioEngineBuffered == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_71;
    }
    if (!*(void *)a1) {
      goto LABEL_46;
    }
LABEL_20:
    CMBaseObjectGetDerivedStorage();
LABEL_46:
    LogPrintF();
    goto LABEL_71;
  }
  if (v6)
  {
    if (v6 == 200501)
    {
      if (gLogCategory_APAudioEngineBuffered <= 90
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (*(void *)a1) {
          CMBaseObjectGetDerivedStorage();
        }
        LogPrintF();
      }
      bufferedAudioEngine_updatePlaybackState(*(void *)a1, 1937011305);
      *((_DWORD *)v5 + 35) = 2;
      LODWORD(v10) = bufferedAudioEngine_handleSetRateToOne(*(const void **)a1);
      goto LABEL_76;
    }
    ++*((_DWORD *)HoseDecriptorFromHose + 41);
    if (gLogCategory_APAudioEngineBuffered <= 90
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (*(void *)a1) {
        CMBaseObjectGetDerivedStorage();
      }
      LogPrintF();
    }
    uint64_t v19 = LogCategoryCopyOSLogHandle();
    uint64_t v20 = (void *)v19;
    if (v19) {
      uint64_t v21 = v19;
    }
    else {
      uint64_t v21 = MEMORY[0x1E4F14500];
    }
    if (os_signpost_enabled(v21))
    {
      uint64_t v22 = *(void *)(a1 + 8);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v22;
      _os_signpost_emit_with_name_impl(&dword_1D0945000, v21, OS_SIGNPOST_INTERVAL_END, 0x2B160578uLL, "AIRPLAY_SIGNPOST_AUDIOENGINE_HOSE_SETRATE_1", "FAILURE hose=0x%x", buf, 8u);
    }
    if (v20) {
      os_release(v20);
    }
    *((_DWORD *)v5 + 35) = 2;
    bufferedAudioEngine_handleErrorWithReceiverAnchor(*(const void **)a1, *(void *)(a1 + 8), 0);
LABEL_71:
    LODWORD(v10) = 0;
    goto LABEL_76;
  }
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*(void *)a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  *((_DWORD *)v5 + 41) = 0;
  *((unsigned char *)v5 + 168) = 1;
  v5[8] = *((void *)v3 + 102);
  uint64_t v11 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)(v3 + 1000) = *MEMORY[0x1E4F1F9F8];
  *((void *)v3 + 127) = *(void *)(v11 + 16);
  uint64_t v12 = LogCategoryCopyOSLogHandle();
  uint64_t v13 = (void *)v12;
  if (v12) {
    uint64_t v14 = v12;
  }
  else {
    uint64_t v14 = MEMORY[0x1E4F14500];
  }
  if (os_signpost_enabled(v14))
  {
    uint64_t v15 = *(void *)(a1 + 8);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v15;
    _os_signpost_emit_with_name_impl(&dword_1D0945000, v14, OS_SIGNPOST_INTERVAL_END, 0x2B160578uLL, "AIRPLAY_SIGNPOST_AUDIOENGINE_HOSE_SETRATE_1", "SUCCESS hose=0x%x", buf, 8u);
  }
  if (v13) {
    os_release(v13);
  }
  CFMutableStringRef v16 = *(const void **)a1;
  *(_OWORD *)buf = *(_OWORD *)(a1 + 24);
  *(_OWORD *)&buf[12] = *(_OWORD *)(a1 + 36);
  CMTime v23 = *(CMTime *)(a1 + 56);
  uint64_t started = bufferedAudioEngine_startRemoteMediaTimebaseWithReceiverAnchor(v16, (uint64_t)buf, &v23);
  if (!started)
  {
    *((_DWORD *)v5 + 41) = 0;
    uint64_t v18 = (const void *)*((void *)v3 + 108);
    if (v18)
    {
      CFRelease(v18);
      LODWORD(v10) = 0;
      *((void *)v3 + 108) = 0;
      goto LABEL_76;
    }
    goto LABEL_71;
  }
  uint64_t v10 = started;
  ++*((_DWORD *)v5 + 41);
  if (gLogCategory_APAudioEngineBuffered <= 90
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*(void *)a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  bufferedAudioEngine_handleErrorWithReceiverAnchor(*(const void **)a1, *(void *)(a1 + 8), v10);
LABEL_76:
  **(_DWORD **)(a1 + 88) = v10;
}

void bufferedAudioEngine_handleErrorWithReceiverAnchor(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  HoseDecriptorFromHose = bufferedAudioEngine_getHoseDecriptorFromHose();
  if (HoseDecriptorFromHose)
  {
    if (*((_DWORD *)HoseDecriptorFromHose + 41) < 0x32u)
    {
      if (*(_DWORD *)(DerivedStorage + 804) == 1937207905 && !*(unsigned char *)(DerivedStorage + 856))
      {
        uint64_t v9 = MicrosecondsToUpTicks();
        *(void *)(DerivedStorage + 848) = mach_absolute_time() + v9;
        *(unsigned char *)(DerivedStorage + 856) = 1;
      }
    }
    else
    {
      *((_DWORD *)HoseDecriptorFromHose + 41) = 0;
      bufferedAudioEngine_callSetRateAndAnchorTimeClientCompletionCallback(a1, a3, MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], 0);
      *(void *)(DerivedStorage + 880) = 0;
      *(void *)(DerivedStorage + 872) = 0;
      bufferedAudioEngine_handleTerminalSetRateError((uint64_t)a1, a2, a3);
      uint64_t v8 = *(const void **)(DerivedStorage + 864);
      if (v8)
      {
        CFRelease(v8);
        *(void *)(DerivedStorage + 864) = 0;
      }
    }
  }
  else if (gLogCategory_APAudioEngineBuffered <= 90 {
         && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  }
  {
    if (a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
}

uint64_t bufferedAudioEngine_getMaxFirstAvailableTransportTimestampForStartUp(uint64_t a1, uint64_t a2)
{
  int v3 = *MEMORY[0x1E4F49F28];
  long long v8 = *(_OWORD *)(MEMORY[0x1E4F49F28] + 4);
  long long v9 = v8;
  uint64_t v4 = *(void *)(MEMORY[0x1E4F49F28] + 20);
  uint64_t v10 = v4;
  if (!bufferedAudioEngine_isSpeakerPlayingBySelf())
  {
    int64_t v5 = *(uint64_t **)(CMBaseObjectGetDerivedStorage() + 584);
    long long v11 = v8;
    for (i = v4; v5; int64_t v5 = (uint64_t *)*v5)
    {
      if (APSAudioTransportTimeIsValid())
      {
        if (APSAudioTransportTimeIsValid())
        {
          if (*((_DWORD *)v5 + 44) != v3)
          {
            APSLogErrorAt();
            uint64_t v6 = 4294960540;
            APSLogErrorAt();
            return v6;
          }
          APSAudioTransportTimeMax();
        }
        else
        {
          long long v11 = *(_OWORD *)((char *)v5 + 180);
          uint64_t i = *(uint64_t *)((char *)v5 + 196);
          int v3 = *((_DWORD *)v5 + 44);
        }
      }
    }
    long long v9 = v11;
    uint64_t v10 = i;
  }
  uint64_t v6 = 0;
  if (a2)
  {
    *(_DWORD *)a2 = v3;
    *(_OWORD *)(a2 + 4) = v9;
    *(void *)(a2 + 20) = v10;
  }
  return v6;
}

void bufferedAudioEngine_getStreamInfoForStartup(uint64_t a1, float *a2, float *a3, float *a4, _WORD *a5, char *a6, _WORD *a7, _WORD *a8)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v9 = *(uint64_t **)(DerivedStorage + 584);
  cf[0] = 0;
  float v10 = 0.0;
  uint64_t v28 = DerivedStorage;
  if (v9)
  {
    __int16 v11 = 0;
    CFMutableStringRef Mutable = 0;
    char v13 = 0;
    int v14 = 0;
    uint64_t v15 = (CMTime *)(DerivedStorage + 156);
    uint64_t v16 = *MEMORY[0x1E4F49FA8];
    float v17 = 0.0;
    float v18 = 99999.0;
    float v19 = -99999.0;
    do
    {
      CMTime time = *(CMTime *)(v9 + 11);
      float Seconds = CMTimeGetSeconds(&time);
      CMTime time = *(CMTime *)(v9 + 11);
      CMTime time2 = *v15;
      unsigned int v21 = CMTimeCompare(&time, &time2);
      if (v18 >= Seconds) {
        float v18 = Seconds;
      }
      if (v19 <= Seconds) {
        float v19 = Seconds;
      }
      if (*((unsigned char *)v9 + 24)) {
        char v13 = 1;
      }
      BOOL isHoseInStereoPair = bufferedAudioEngine_isHoseInStereoPair(v9[2]);
      if (cf[0])
      {
        CFRelease(cf[0]);
        cf[0] = 0;
      }
      uint64_t v23 = v9[2];
      uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v24) {
        uint64_t v25 = v24;
      }
      else {
        uint64_t v25 = 0;
      }
      uint64_t v26 = *(void (**)(uint64_t, uint64_t, void, CFTypeRef *))(v25 + 48);
      if (v26) {
        v26(v23, v16, 0, cf);
      }
      if (isHoseInStereoPair)
      {
        if (!Mutable) {
          CFMutableStringRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], 0);
        }
        if (CFDictionaryContainsKey(Mutable, cf[0]))
        {
          CFDictionarySetValue(Mutable, cf[0], (const void *)2);
          ++v11;
        }
        else
        {
          CFDictionarySetValue(Mutable, cf[0], (const void *)1);
        }
      }
      float v17 = v17 + Seconds;
      v14 += v21 >> 31;
      long long v9 = (uint64_t *)*v9;
    }
    while (v9);
  }
  else
  {
    LOWORD(v14) = 0;
    char v13 = 0;
    CFMutableStringRef Mutable = 0;
    __int16 v11 = 0;
    float v19 = -99999.0;
    float v18 = 99999.0;
    float v17 = 0.0;
  }
  unsigned int v27 = *(_DWORD *)(v28 + 592);
  if (v27) {
    float v10 = v17 / (float)v27;
  }
  *a2 = v10;
  *a3 = v18;
  *a4 = v19;
  *a5 = v14;
  *a6 = v13;
  *a7 = FigCFDictionaryGetCount();
  *a8 = FigCFDictionaryGetCount() - v11;
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
}

BOOL bufferedAudioEngine_isHoseInStereoPair(uint64_t a1)
{
  CFTypeRef v20 = 0;
  CFTypeRef cf = 0;
  CFNumberRef number = 0;
  CFTypeRef v17 = (CFTypeRef)*MEMORY[0x1E4F1CFC8];
  int valuePtr = 0;
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(unsigned int (**)(uint64_t, void, void, CFTypeRef *))(v3 + 48);
  if (!v4 || v4(a1, *MEMORY[0x1E4F49FA8], 0, &v20)) {
    goto LABEL_17;
  }
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v6 = v5 ? v5 : 0;
  uint64_t v7 = *(unsigned int (**)(uint64_t, void, void, CFNumberRef *))(v6 + 48);
  if (!v7 || v7(a1, *MEMORY[0x1E4F49FA0], 0, &number)) {
    goto LABEL_17;
  }
  BOOL v8 = 0;
  if (v20 && number)
  {
    CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
    if (valuePtr != 2)
    {
      if (valuePtr == 1)
      {
        BOOL v8 = 1;
        goto LABEL_19;
      }
      goto LABEL_18;
    }
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(unsigned int (**)(uint64_t, void, void, CFTypeRef *))(v11 + 48);
    if (v12 && !v12(a1, *MEMORY[0x1E4F49F98], 0, &cf))
    {
      if (FigCFNumberGetUInt32() != 3) {
        goto LABEL_18;
      }
      uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v13) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t v15 = *(unsigned int (**)(uint64_t, void, void, CFTypeRef *))(v14 + 48);
      if (v15 && !v15(a1, *MEMORY[0x1E4F49FC0], 0, &v17))
      {
        BOOL v8 = CFBooleanGetValue((CFBooleanRef)v17) == 0;
        goto LABEL_19;
      }
    }
LABEL_17:
    APSLogErrorAt();
LABEL_18:
    BOOL v8 = 0;
  }
LABEL_19:
  if (cf) {
    CFRelease(cf);
  }
  if (v20) {
    CFRelease(v20);
  }
  if (number) {
    CFRelease(number);
  }
  if (v17) {
    CFRelease(v17);
  }
  return v8;
}

void bufferedAudioEngine_hoseGetAnchorCallbackCompletionHandlerInternal(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  v12[0] = *(_OWORD *)(a1 + 16);
  *(_OWORD *)((char *)v12 + 12) = *(_OWORD *)(a1 + 28);
  uint64_t v3 = (const void *)APSAudioTransportTimeCopyDebugDesc();
  if (!*(unsigned char *)DerivedStorage)
  {
    HoseDecriptorFromHose = bufferedAudioEngine_getHoseDecriptorFromHose();
    if (HoseDecriptorFromHose)
    {
      uint64_t v5 = HoseDecriptorFromHose;
      int v6 = *(_DWORD *)(a1 + 72);
      if (v6)
      {
        if (v6 == 200501)
        {
          if (gLogCategory_APAudioEngineBuffered <= 90
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (!*(void *)a1)
            {
LABEL_23:
              LogPrintF();
              goto LABEL_35;
            }
LABEL_8:
            CMBaseObjectGetDerivedStorage();
            goto LABEL_23;
          }
        }
        else
        {
          if (gLogCategory_APAudioEngineBuffered <= 90
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (*(void *)a1) {
              CMBaseObjectGetDerivedStorage();
            }
            LogPrintF();
          }
          ++*((_DWORD *)v5 + 41);
          bufferedAudioEngine_handleErrorWithReceiverAnchor(*(const void **)a1, *(void *)(a1 + 8), *(unsigned int *)(a1 + 72));
        }
      }
      else
      {
        if (gLogCategory_APAudioEngineBuffered <= 50
          && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
        {
          if (*(void *)a1) {
            CMBaseObjectGetDerivedStorage();
          }
          LogPrintF();
        }
        uint64_t v7 = *(const void **)a1;
        v12[0] = *(_OWORD *)(a1 + 16);
        *(_OWORD *)((char *)v12 + 12) = *(_OWORD *)(a1 + 28);
        CMTime v11 = *(CMTime *)(a1 + 48);
        uint64_t started = bufferedAudioEngine_startRemoteMediaTimebaseWithReceiverAnchor(v7, (uint64_t)v12, &v11);
        if (started)
        {
          uint64_t v9 = started;
          ++*((_DWORD *)v5 + 41);
          if (gLogCategory_APAudioEngineBuffered <= 90
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (*(void *)a1) {
              CMBaseObjectGetDerivedStorage();
            }
            LogPrintF();
          }
          bufferedAudioEngine_handleErrorWithReceiverAnchor(*(const void **)a1, *(void *)(a1 + 8), v9);
          if (v3) {
            goto LABEL_36;
          }
          goto LABEL_37;
        }
        v5[8] = *(void *)(DerivedStorage + 808);
        *((_DWORD *)v5 + 41) = 0;
        uint64_t v10 = *(const void **)(DerivedStorage + 864);
        if (v10)
        {
          CFRelease(v10);
          LODWORD(v9) = 0;
          *(void *)(DerivedStorage + 864) = 0;
          if (!v3) {
            goto LABEL_37;
          }
          goto LABEL_36;
        }
      }
    }
    else if (gLogCategory_APAudioEngineBuffered <= 90 {
           && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    }
    {
      if (!*(void *)a1) {
        goto LABEL_23;
      }
      goto LABEL_8;
    }
  }
LABEL_35:
  LODWORD(v9) = 0;
  if (v3) {
LABEL_36:
  }
    CFRelease(v3);
LABEL_37:
  **(_DWORD **)(a1 + 80) = v9;
}

void bufferedAudioEngine_getBufferLevelTimeEstimateForHose(uint64_t a1@<X1>, int a2@<W2>, CMTime *a3@<X8>)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  int v14 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = MEMORY[0x1E4F1FA48];
  *(_OWORD *)&a3->CMTimeValue value = *MEMORY[0x1E4F1FA48];
  a3->CMTimeEpoch epoch = *(void *)(v7 + 16);
  bufferedAudioEngine_getCurrentRemoteMediaTimeInternal(&v14, &time1);
  CMTimeValue value = time1.value;
  CMTimeScale timescale = time1.timescale;
  if (v14)
  {
    APSLogErrorAt();
    return;
  }
  CMTimeFlags flags = time1.flags;
  if (time1.flags)
  {
    CMTimeEpoch epoch = time1.epoch;
    if (a2)
    {
      if (!*(unsigned char *)(DerivedStorage + 326)) {
        goto LABEL_9;
      }
    }
    else if (!*(unsigned char *)(DerivedStorage + 325))
    {
      goto LABEL_9;
    }
    if (*(unsigned char *)(a1 + 25))
    {
      bufferedAudioEngine_getLastDeliveredRemoteMediaTimeForHose(a1, (__n128 *)&time1);
      CMTimeValue v15 = time1.value;
      CMTimeFlags v10 = time1.flags;
      CMTimeScale v16 = time1.timescale;
      CMTimeEpoch v11 = time1.epoch;
      goto LABEL_10;
    }
LABEL_9:
    CMTimeValue v15 = *(void *)(a1 + 32);
    CMTimeFlags v10 = *(_DWORD *)(a1 + 44);
    CMTimeScale v16 = *(_DWORD *)(a1 + 40);
    CMTimeEpoch v11 = *(void *)(a1 + 48);
LABEL_10:
    if (v10)
    {
      v12.CMTimeEpoch epoch = v11;
      time1.CMTimeValue value = value;
      time1.CMTimeScale timescale = timescale;
      time1.CMTimeFlags flags = flags;
      time1.CMTimeEpoch epoch = epoch;
      v12.CMTimeValue value = v15;
      v12.CMTimeScale timescale = v16;
      v12.CMTimeFlags flags = v10;
      if (CMTimeCompare(&time1, &v12) <= 0)
      {
        v12.CMTimeEpoch epoch = epoch;
        time1.CMTimeValue value = v15;
        time1.CMTimeScale timescale = v16;
        time1.CMTimeFlags flags = v10;
        time1.CMTimeEpoch epoch = v11;
        v12.CMTimeValue value = value;
        v12.CMTimeScale timescale = timescale;
        v12.CMTimeFlags flags = flags;
        CMTimeSubtract(a3, &time1, &v12);
      }
    }
  }
}

void bufferedAudioEngine_suspendInternal(void **a1)
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = DerivedStorage;
  if (!*(unsigned char *)(DerivedStorage + 464))
  {
    CFDictionaryRef v5 = 0;
    goto LABEL_44;
  }
  if (*(void *)(DerivedStorage + 536))
  {
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    values = *a1;
    keys[0] = @"HoseRegistrar";
    CFDictionaryRef v5 = CFDictionaryCreate(v4, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!v5) {
      goto LABEL_54;
    }
    if (APSSettingsIsFeatureEnabled())
    {
      uint64_t v6 = *(void *)(v3 + 1680);
      uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v7) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0;
      }
      CMTime v12 = *(void (**)(uint64_t))(v8 + 128);
      if (v12) {
        v12(v6);
      }
    }
    else
    {
      uint64_t v9 = *a1;
      uint64_t v10 = CMBaseObjectGetDerivedStorage();
      if (*(_DWORD *)(v10 + 592))
      {
        uint64_t v11 = v10;
        while (*(void *)(v11 + 584))
          bufferedAudioEngine_removeHose((uint64_t)v9);
      }
      else
      {
        APSLogErrorAt();
      }
    }
    if (FigEndpointStreamSuspend())
    {
LABEL_54:
      APSLogErrorAt();
      goto LABEL_44;
    }
  }
  else
  {
    CFDictionaryRef v5 = 0;
  }
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  bufferedAudioEngine_tearDownResumedStateAndStructuresInternal(*a1, 1);
  uint64_t v13 = *(const void **)(v3 + 512);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(v3 + 512) = 0;
  }
  int v14 = *(const void **)(v3 + 544);
  if (v14)
  {
    CFRelease(v14);
    *(void *)(v3 + 544) = 0;
  }
  CMTimeValue v15 = *(const void **)(v3 + 552);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(v3 + 552) = 0;
  }
  CMTimeScale v16 = *(const void **)(v3 + 536);
  if (v16)
  {
    CFRelease(v16);
    *(void *)(v3 + 536) = 0;
  }
  CFTypeRef v17 = *(const void **)(v3 + 1152);
  if (v17)
  {
    CFRelease(v17);
    *(void *)(v3 + 1152) = 0;
  }
  float v18 = *(const void **)(v3 + 944);
  if (v18)
  {
    CFRelease(v18);
    *(void *)(v3 + 944) = 0;
  }
  APSOasisCPUFloorRaiserReleaseAssertion();
  if (*(unsigned char *)(v3 + 392))
  {
    uint64_t v19 = strstr((char *)(v3 + 392), "-SP");
    if (v19) {
      *(_WORD *)uint64_t v19 = 32;
    }
  }
  uint64_t v20 = *(void *)(v3 + 328);
  unsigned int v21 = *a1;
  uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v22) {
    uint64_t v23 = v22;
  }
  else {
    uint64_t v23 = 0;
  }
  uint64_t v24 = *(void (**)(uint64_t, void *))(v23 + 88);
  if (v24) {
    v24(v20, v21);
  }
  *(unsigned char *)(v3 + 464) = 0;
LABEL_44:
  uint64_t v25 = (void (*)(void *, void, void *))a1[2];
  if (v25) {
    v25(*a1, *((unsigned int *)a1 + 8), a1[3]);
  }
  APSDispatchSectionLeave();
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v26 = a1[1];
  if (v26) {
    CFRelease(v26);
  }
  if (*a1) {
    CFRelease(*a1);
  }
  free(a1);
}

void bufferedAudioEngine_setEndpointStreamInternalStage1(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*(void *)a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  if (!*(unsigned char *)(DerivedStorage + 464))
  {
    APSLogErrorAt();
    int v24 = -15485;
LABEL_80:
    *(_DWORD *)(a1 + 32) = v24;
    goto LABEL_81;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (*(void *)(DerivedStorage + 536) == v3)
  {
LABEL_81:
    uint64_t v25 = *(NSObject **)(DerivedStorage + 344);
    dispatch_async_f(v25, (void *)a1, (dispatch_function_t)bufferedAudioEngine_setEndpointStreamInternalStageEnd);
    return;
  }
  if (v3)
  {
    int v4 = FigEndpointStreamSuspend();
    if (v4)
    {
      int v24 = v4;
LABEL_79:
      APSLogErrorAt();
      goto LABEL_80;
    }
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*(void *)a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  if (!*(void *)(DerivedStorage + 536)) {
    goto LABEL_24;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  int v5 = FigNotificationCenterRemoveWeakListeners();
  if (v5)
  {
    int v24 = v5;
    goto LABEL_79;
  }
  int v6 = FigEndpointStreamSuspend();
  if (v6)
  {
    int v24 = v6;
    goto LABEL_79;
  }
  uint64_t v7 = *(const void **)(DerivedStorage + 536);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(DerivedStorage + 536) = 0;
  }
LABEL_24:
  uint64_t v8 = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*(void *)a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  if (*(void *)(a1 + 8))
  {
    uint64_t v9 = APSGetFBOPropertyInt64();
    int v10 = *(unsigned __int8 *)(v8 + 520);
    if (APSSettingsGetIntWithDefault()) {
      BOOL v11 = v9 == 0;
    }
    else {
      BOOL v11 = 1;
    }
    int v12 = !v11;
    if (v10 == v12)
    {
      APSAudioFormatDescriptionCopyDebugString();
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (*(void *)a1) {
          CMBaseObjectGetDerivedStorage();
        }
        LogPrintF();
      }
      CFMutableStringRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (Mutable)
      {
        APSSettingsIsFeatureEnabled();
        FigCFDictionarySetValue();
        FigCFDictionarySetValue();
        FigCFDictionarySetValue();
        FigCFDictionarySetValue();
        FigCFDictionarySetValue();
        FigCFDictionarySetValue();
        FigCFDictionarySetValue();
        FigCFDictionarySetValue();
        FigCFDictionarySetValue();
        int v14 = (const void *)*MEMORY[0x1E4F1CFD0];
        CMTimeValue v15 = (const void *)*MEMORY[0x1E4F1CFC8];
        if (*(unsigned char *)(v8 + 520)) {
          CMTimeScale v16 = (const void *)*MEMORY[0x1E4F1CFD0];
        }
        else {
          CMTimeScale v16 = (const void *)*MEMORY[0x1E4F1CFC8];
        }
        CFDictionarySetValue(Mutable, @"UseAPAP", v16);
        if (APSSettingsGetIntWithDefault()) {
          CFTypeRef v17 = v14;
        }
        else {
          CFTypeRef v17 = v15;
        }
        CFDictionarySetValue(Mutable, @"PrefersAPAP", v17);
        FigCFDictionarySetValue();
        kdebug_trace();
        uint64_t v18 = *(void *)(a1 + 8);
        uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v19) {
          uint64_t v20 = v19;
        }
        else {
          uint64_t v20 = 0;
        }
        unsigned int v21 = *(uint64_t (**)(uint64_t, __CFDictionary *, void (*)(uint64_t, int, _DWORD *), uint64_t))(v20 + 16);
        if (v21)
        {
          int v22 = v21(v18, Mutable, bufferedAudioEngine_setEndpointStreamInternalStage4, a1);
          if (!v22)
          {
LABEL_73:
            CFRelease(Mutable);
            return;
          }
          int v23 = v22;
        }
        else
        {
          int v23 = -12782;
        }
        APSLogErrorAt();
      }
      else
      {
        APSLogErrorAt();
        int v23 = -12786;
      }
    }
    else
    {
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (*(void *)a1) {
          CMBaseObjectGetDerivedStorage();
        }
        APSSettingsGetIntWithDefault();
        LogPrintF();
      }
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
      CFMutableStringRef Mutable = 0;
      int v23 = -6734;
    }
    *(_DWORD *)(a1 + 32) = v23;
    dispatch_async_f(*(dispatch_queue_t *)(v8 + 344), (void *)a1, (dispatch_function_t)bufferedAudioEngine_setEndpointStreamInternalStageEnd);
    if (!Mutable) {
      return;
    }
    goto LABEL_73;
  }
  bufferedAudioEngine_setEndpointStreamInternalStage5((void *)a1);
}

void bufferedAudioEngine_setEndpointStreamInternalStageEnd(uint64_t a1)
{
  CMBaseObjectGetDerivedStorage();
  kdebug_trace();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*(void *)a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  uint64_t v2 = *(void (**)(void, void, void))(a1 + 16);
  if (v2) {
    v2(*(void *)a1, *(unsigned int *)(a1 + 32), *(void *)(a1 + 24));
  }
  APSDispatchSectionLeave();
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  uint64_t v3 = *(const void **)(a1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  free((void *)a1);
}

void bufferedAudioEngine_setEndpointStreamInternalStage4(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  kdebug_trace();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*(void *)a3) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
    if (a2) {
      goto LABEL_7;
    }
LABEL_11:
    APSPriorityDispatcherAsyncF();
    return;
  }
  if (!a2) {
    goto LABEL_11;
  }
LABEL_7:
  a3[8] = a2;
  int v6 = *(NSObject **)(DerivedStorage + 344);
  dispatch_async_f(v6, a3, (dispatch_function_t)bufferedAudioEngine_setEndpointStreamInternalStageEnd);
}

void bufferedAudioEngine_setEndpointStreamInternalStage5(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  if (!a1[1])
  {
    uint64_t v9 = (void *)(DerivedStorage + 536);
    int v10 = *(const void **)(DerivedStorage + 536);
    *(void *)(DerivedStorage + 536) = 0;
LABEL_20:
    if (v10) {
      CFRelease(v10);
    }
    if (*v9
      && APSGetFBOPropertyInt64()
      && *(unsigned char *)(DerivedStorage + 392)
      && !strstr((char *)(DerivedStorage + 392), "-SP"))
    {
      *(unsigned char *)(strlen((const char *)(DerivedStorage + 392)) + DerivedStorage + 391) = 0;
      __strlcat_chk();
      __strlcat_chk();
    }
    int v11 = 0;
    goto LABEL_36;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  int v3 = FigNotificationCenterAddWeakListeners();
  if (v3)
  {
    int v11 = v3;
    APSLogErrorAt();
    goto LABEL_36;
  }
  uint64_t v4 = APSGetFBOPropertyInt64();
  int v5 = *(unsigned __int8 *)(DerivedStorage + 520);
  if (APSSettingsGetIntWithDefault()) {
    BOOL v6 = v4 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  int v7 = !v6;
  if (v5 == v7)
  {
    uint64_t v8 = (const void *)a1[1];
    uint64_t v9 = (void *)(DerivedStorage + 536);
    int v10 = *(const void **)(DerivedStorage + 536);
    *(void *)(DerivedStorage + 536) = v8;
    if (v8) {
      CFRetain(v8);
    }
    goto LABEL_20;
  }
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*a1) {
      CMBaseObjectGetDerivedStorage();
    }
    APSSettingsGetIntWithDefault();
    LogPrintF();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListeners();
  FigEndpointStreamSuspend();
  CMNotificationCenterGetDefaultLocalCenter();
  FigDispatchAsyncPostNotification();
  int v11 = -6734;
LABEL_36:
  *((_DWORD *)a1 + 8) = v11;
  dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 344), a1, (dispatch_function_t)bufferedAudioEngine_setEndpointStreamInternalStageEnd);
}

uint64_t bufferedAudioEngine_flushInternal(uint64_t *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  unsigned int v70 = 0;
  unsigned __int16 v69 = 0;
  if (*(unsigned char *)DerivedStorage) {
    return 0;
  }
  uint64_t v3 = DerivedStorage;
  if (!*(void *)(DerivedStorage + 472)) {
    return 0;
  }
  int v4 = *(_DWORD *)(DerivedStorage + 804);
  uint64_t v5 = *a1;
  uint64_t v6 = CMBaseObjectGetDerivedStorage();
  if (*(void *)(v6 + 1176))
  {
    for (uint64_t i = *(void **)(v6 + 584); i; uint64_t i = (void *)*i)
      bufferedAudioEngine_cancelRTCUnderrunForHose(v5, (uint64_t)i);
  }
  *(void *)(v3 + 808) = 0;
  uint64_t v8 = *(opaqueCMBufferQueue **)(v3 + 1112);
  if (v8)
  {
    uint64_t v9 = CMBufferQueueReset(v8);
    if (v9)
    {
      uint64_t v57 = v9;
      goto LABEL_101;
    }
    *(void *)(v3 + 1128) = 0;
  }
  *(_WORD *)(v3 + 800) = 0;
  *(unsigned char *)(v3 + 596) = 0;
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(v3 + 1024));
  uint64_t v10 = bufferedAudioEngine_releaseCryptors(*a1, 0);
  if (v10)
  {
    uint64_t v57 = v10;
    goto LABEL_101;
  }
  *(void *)(v3 + 1144) = 0;
  uint64_t v11 = bufferedAudioEngine_releaseMagicCookies(*a1, 0);
  if (v11)
  {
    uint64_t v57 = v11;
    goto LABEL_101;
  }
  int v12 = *(const void **)(v3 + 968);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(v3 + 968) = 0;
  }
  *(unsigned char *)(v3 + 760) = 0;
  *(void *)(v3 + 816) = 0xBFF0000000000000;
  uint64_t v13 = MEMORY[0x1E4F1F9F8];
  long long v67 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)(v3 + 1084) = *MEMORY[0x1E4F1F9F8];
  uint64_t v14 = *(void *)(v13 + 16);
  *(void *)(v3 + 1100) = v14;
  bufferedAudioEngine_updatePlaybackState(*a1, 1937010544);
  if (v4 > 1937011304)
  {
    if (v4 != 1937207905)
    {
      unsigned __int16 v15 = 29289;
LABEL_18:
      if (v4 != (v15 | 0x73740000)) {
        goto LABEL_27;
      }
    }
  }
  else if (v4 != 1886614642)
  {
    unsigned __int16 v15 = 28777;
    goto LABEL_18;
  }
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  bufferedAudioEngine_callSetRateAndAnchorTimeClientCompletionCallback((const void *)*a1, 4294949716, MEMORY[0x1E4F1FA48], MEMORY[0x1E4F1F9F8], 0);
  *(void *)(v3 + 880) = 0;
  *(void *)(v3 + 872) = 0;
LABEL_27:
  CMTimeScale v16 = (uint64_t *)(v3 + 676);
  *(void *)(v3 + 904) = 0;
  *(void *)(v3 + 896) = 0;
  APSTimedInfoManagerFlush();
  APSTimedInfoManagerSuspend();
  CFTypeRef v17 = *(const void **)(v3 + 792);
  if (v17)
  {
    CFRelease(v17);
    *(void *)(v3 + 792) = 0;
  }
  uint64_t v18 = *v16;
  int v63 = *(_DWORD *)(v3 + 684);
  int v19 = *(_DWORD *)(v3 + 688);
  uint64_t v62 = *(void *)(v3 + 692);
  bufferedAudioEngine_generateNewFirstRemoteMediaTime(*a1, (CMTime *)time);
  uint64_t v20 = *(void *)time;
  int v21 = *(_DWORD *)&time[8];
  int v22 = *(_DWORD *)&time[12];
  if ((time[12] & 0x1D) != 1)
  {
    APSLogErrorAt();
    if (gLogCategory_APAudioEngineBuffered > 90
      || gLogCategory_APAudioEngineBuffered == -1 && !_LogCategory_Initialize())
    {
      return 4294951815;
    }
    if (!*a1) {
      goto LABEL_119;
    }
    goto LABEL_108;
  }
  int v61 = v19;
  if ((v19 & 0x1D) != 1)
  {
    APSLogErrorAt();
    if (gLogCategory_APAudioEngineBuffered > 90
      || gLogCategory_APAudioEngineBuffered == -1 && !_LogCategory_Initialize())
    {
      return 4294951815;
    }
    if (!*a1)
    {
LABEL_119:
      LogPrintF();
      return 4294951815;
    }
LABEL_108:
    CMBaseObjectGetDerivedStorage();
    goto LABEL_119;
  }
  uint64_t v23 = *(void *)&time[16];
  *(unsigned char *)(v3 + 912) = 1;
  *CMTimeScale v16 = v20;
  *(_DWORD *)(v3 + 684) = v21;
  *(_DWORD *)(v3 + 688) = v22;
  *(void *)(v3 + 692) = v23;
  *(void *)(v3 + 700) = v20;
  *(_DWORD *)(v3 + 708) = v21;
  *(_DWORD *)(v3 + 712) = v22;
  *(void *)(v3 + 716) = v23;
  *(_OWORD *)(v3 + 724) = v67;
  *(void *)(v3 + 740) = v14;
  *(_OWORD *)(v3 + 652) = v67;
  *(void *)(v3 + 668) = v14;
  int v24 = *(const void **)(v3 + 1152);
  if (v24)
  {
    CFRelease(v24);
    *(void *)(v3 + 1152) = 0;
  }
  uint64_t v25 = *a1;
  *(void *)CMTime time = v20;
  *(_DWORD *)&time[8] = v21;
  *(_DWORD *)&time[12] = v22;
  *(void *)&time[16] = v23;
  bufferedAudioEngine_updateNextTranscodeBurstTimeAndUnRest(v25, (CMTime *)time);
  int v26 = v19;
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  if (!APSSettingsIsFeatureEnabled())
  {
    unsigned int v27 = *(void **)(v3 + 584);
    if (v27)
    {
      uint64_t v28 = *MEMORY[0x1E4F49FD8];
      uint64_t v29 = *MEMORY[0x1E4F1CFC8];
      do
      {
        uint64_t v30 = v27[2];
        uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v31) {
          uint64_t v32 = v31;
        }
        else {
          uint64_t v32 = 0;
        }
        CMClockRef v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 56);
        if (v33) {
          v33(v30, v28, v29);
        }
        unsigned int v27 = (void *)*v27;
      }
      while (v27);
    }
  }
  uint64_t v34 = APMessageRingBufferedFlush(*(void *)(v3 + 560), &v69, &v70);
  if (v34)
  {
    uint64_t v57 = v34;
    goto LABEL_101;
  }
  uint64_t v35 = *(const void **)(v3 + 568);
  if (v35)
  {
    CFRelease(v35);
    *(void *)(v3 + 568) = 0;
  }
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(v3 + 1168));
  uint64_t v36 = &unk_1EB9F5000;
  if (APSSettingsIsFeatureEnabled())
  {
    uint64_t v37 = *(void *)(v3 + 1680);
    uint64_t v38 = v69;
    uint64_t v39 = v70;
    uint64_t SampleRateFromTransportAudioFormat = bufferedAudioEngine_getSampleRateFromTransportAudioFormat();
    uint64_t v41 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v41) {
      uint64_t v42 = v41;
    }
    else {
      uint64_t v42 = 0;
    }
    long long v55 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned char *, uint64_t))(v42 + 8);
    if (v55)
    {
      *(void *)CMTime time = v18;
      *(_DWORD *)&time[8] = v63;
      *(_DWORD *)&time[12] = v19;
      *(void *)&time[16] = v62;
      uint64_t v56 = v55(v37, v38, v39, time, SampleRateFromTransportAudioFormat);
      if (!v56) {
        goto LABEL_98;
      }
      uint64_t v57 = v56;
    }
    else
    {
      uint64_t v57 = 4294954514;
    }
LABEL_101:
    APSLogErrorAt();
    return v57;
  }
  long long v43 = *(uint64_t **)(v3 + 584);
  if (v43)
  {
    long long v66 = *(_OWORD *)(MEMORY[0x1E4F49F28] + 12);
    long long v68 = *MEMORY[0x1E4F49F28];
    long long v65 = *MEMORY[0x1E4F1FA48];
    uint64_t v44 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    uint64_t v59 = v18;
    CMTime v60 = a1;
    while (1)
    {
      int v45 = v36[560];
      if (v45 <= 50 && (v45 != -1 || _LogCategory_Initialize()))
      {
        if (*a1) {
          CMBaseObjectGetDerivedStorage();
        }
        LogPrintF();
        uint64_t v36 = &unk_1EB9F5000;
      }
      *((_WORD *)v43 + 13) = v69;
      long long v46 = (const void *)*a1;
      uint64_t v64 = v70;
      uint64_t v47 = CMBaseObjectGetDerivedStorage();
      BOOL v48 = *((double *)v43 + 8) != 0.0 || v43[18] != 0;
      v72[0] = v68;
      *(_OWORD *)((char *)v72 + 12) = v66;
      v43[8] = 0;
      v43[17] = 0;
      v43[18] = 0;
      *(_OWORD *)(v43 + 11) = v65;
      v43[13] = v44;
      *((_OWORD *)v43 + 2) = v65;
      v43[6] = v44;
      *((_WORD *)v43 + 28) = 256;
      v43[10] = 0;
      v43[9] = mach_absolute_time();
      *((_OWORD *)v43 + 11) = v68;
      *(_OWORD *)((char *)v43 + 188) = v66;
      *((unsigned char *)v43 + 204) = 0;
      *((unsigned char *)v43 + 256) = 0;
      *((_OWORD *)v43 + 7) = v65;
      v43[16] = v44;
      *((unsigned char *)v43 + 168) = 0;
      int v49 = v36[560];
      if (!v48)
      {
        if (v49 <= 50 && (v49 != -1 || _LogCategory_Initialize()))
        {
          if (v46) {
            CMBaseObjectGetDerivedStorage();
          }
          LogPrintF();
        }
        goto LABEL_93;
      }
      if (v49 <= 50 && (v49 != -1 || _LogCategory_Initialize()))
      {
        if (v46) {
          CMBaseObjectGetDerivedStorage();
        }
        uint64_t v18 = v59;
        *(void *)CMTime time = v59;
        int v26 = v61;
        *(_DWORD *)&time[8] = v63;
        *(_DWORD *)&time[12] = v61;
        *(void *)&time[16] = v62;
        CMTimeGetSeconds((CMTime *)time);
        LogPrintF();
        a1 = v60;
        uint64_t v36 = (_DWORD *)&unk_1EB9F5000;
      }
      if (*(unsigned char *)(v47 + 520)) {
        break;
      }
      int32_t v54 = bufferedAudioEngine_getSampleRateFromTransportAudioFormat();
      *(void *)int v71 = v18;
      *(_DWORD *)&v71[8] = v63;
      *(_DWORD *)&v71[12] = v26;
      *(void *)&v71[16] = v62;
      CMTimeConvertScale((CMTime *)time, (CMTime *)v71, v54, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
      APSAudioTransportTimeMakeWithRTPTime();
      if (v46) {
        goto LABEL_83;
      }
LABEL_84:
      uint64_t v50 = v43[2];
      *(_OWORD *)int v71 = v72[0];
      *(_OWORD *)&v71[12] = *(_OWORD *)((char *)v72 + 12);
      APSEndpointStreamAudioHoseProtocolGetProtocolID();
      uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable)
      {
        uint64_t v52 = *(void *)(ProtocolVTable + 16);
        if (v52)
        {
          CMTime v53 = *(void (**)(uint64_t, uint64_t, unsigned char *, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, const void *), const void *))(v52 + 24);
          if (v53)
          {
            *(_OWORD *)CMTime time = *(_OWORD *)v71;
            *(_OWORD *)&time[12] = *(_OWORD *)&v71[12];
            v53(v50, v64, time, bufferedAudioEngine_hoseFlushCallbackCompletionHandler, v46);
          }
          else
          {
            bufferedAudioEngine_hoseFlushCallbackCompletionHandler(v50, 0, MEMORY[0x1E4F49F28], 4294954514, v46);
          }
        }
      }
      ++*((_DWORD *)v43 + 43);
LABEL_93:
      long long v43 = (uint64_t *)*v43;
      if (!v43) {
        goto LABEL_98;
      }
    }
    *(void *)CMTime time = v18;
    *(_DWORD *)&time[8] = v63;
    *(_DWORD *)&time[12] = v26;
    *(void *)&time[16] = v62;
    APSAudioTransportTimeMakeWithMediaTime();
    if (!v46) {
      goto LABEL_84;
    }
LABEL_83:
    CFRetain(v46);
    goto LABEL_84;
  }
LABEL_98:
  bufferedAudioEngine_wakeUpHosesAndAudioTimer(*a1);
  return 0;
}

uint64_t bufferedAudioEngine_hoseFlushCallbackCompletionHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  if (a5) {
    CFRelease(a5);
  }
  return 0;
}

uint64_t bufferedAudioEngine_hoseFlushCallbackCompletionHandlerInternal(uint64_t a1)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)result)
  {
    uint64_t v3 = result;
    uint64_t result = (uint64_t)bufferedAudioEngine_getHoseDecriptorFromHose();
    if (result)
    {
      uint64_t v4 = result;
      --*(_DWORD *)(result + 172);
      if (*(_DWORD *)(a1 + 48))
      {
        if (gLogCategory_APAudioEngineBuffered <= 90)
        {
          if (gLogCategory_APAudioEngineBuffered != -1 || (uint64_t result = _LogCategory_Initialize(), result))
          {
            if (!*(void *)a1)
            {
LABEL_14:
              uint64_t result = LogPrintF();
              goto LABEL_19;
            }
LABEL_7:
            CMBaseObjectGetDerivedStorage();
            goto LABEL_14;
          }
        }
      }
      else
      {
        if (gLogCategory_APAudioEngineBuffered <= 50)
        {
          if (gLogCategory_APAudioEngineBuffered != -1 || (uint64_t result = _LogCategory_Initialize(), result))
          {
            if (*(void *)a1) {
              CMBaseObjectGetDerivedStorage();
            }
            uint64_t result = LogPrintF();
          }
        }
        uint64_t v5 = MEMORY[0x1E4F1F9F8];
        *(_OWORD *)(v3 + 724) = *MEMORY[0x1E4F1F9F8];
        *(void *)(v3 + 740) = *(void *)(v5 + 16);
        uint64_t v6 = MEMORY[0x1E4F49F28];
        *(_OWORD *)(v4 + 176) = *MEMORY[0x1E4F49F28];
        *(_OWORD *)(v4 + 188) = *(_OWORD *)(v6 + 12);
      }
    }
    else if (gLogCategory_APAudioEngineBuffered <= 90)
    {
      if (gLogCategory_APAudioEngineBuffered != -1 || (uint64_t result = _LogCategory_Initialize(), result))
      {
        if (!*(void *)a1) {
          goto LABEL_14;
        }
        goto LABEL_7;
      }
    }
  }
LABEL_19:
  **(_DWORD **)(a1 + 56) = 0;
  return result;
}

void bufferedAudioEngine_flushWithinSampleRangeInternal(uint64_t a1)
{
  uint64_t v105 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = DerivedStorage;
  uint64_t v90 = 0;
  uint64_t v102 = *(void *)(MEMORY[0x1E4F1FA20] + 36);
  int epoch_high = *(_DWORD *)(MEMORY[0x1E4F1FA20] + 44);
  uint64_t v4 = MEMORY[0x1E4F1F9F8];
  CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  CMTimeScale timescale = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
  unsigned int v89 = 0;
  unsigned __int16 v88 = 0;
  BOOL v87 = 0;
  uint64_t v98 = *(void *)(MEMORY[0x1E4F1F9F8] + 12);
  int v99 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 20);
  if (*(unsigned char *)DerivedStorage || !*(void *)(DerivedStorage + 472)) {
    goto LABEL_209;
  }
  uint64_t v5 = (CMTimeValue *)(DerivedStorage + 676);
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*(void *)a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  *(_OWORD *)CMTime lhs = *(_OWORD *)(v3 + 700);
  *(void *)&lhs[16] = *(void *)(v3 + 716);
  *(_OWORD *)CMTime rhs = *(_OWORD *)(a1 + 8);
  *(void *)&rhs[16] = *(void *)(a1 + 24);
  CMTimeAdd(&time1.start, (CMTime *)lhs, (CMTime *)rhs);
  CMTimeValue value = time1.start.value;
  CMTimeScale timescale = time1.start.timescale;
  if ((time1.start.flags & 0x1D) != 1)
  {
    APSLogErrorAt();
    int v55 = APSSignalErrorAt();
    CFDictionaryRef v22 = 0;
    goto LABEL_207;
  }
  *(void *)CMTime lhs = value;
  *(_DWORD *)&lhs[8] = timescale;
  *(_DWORD *)&lhs[12] = time1.start.flags;
  *(void *)&lhs[16] = time1.start.epoch;
  *(_OWORD *)CMTime rhs = *(_OWORD *)(a1 + 32);
  *(void *)&rhs[16] = *(void *)(a1 + 48);
  CMTimeRangeMake(&time1, (CMTime *)lhs, (CMTime *)rhs);
  CMTimeValue v6 = time1.start.value;
  CMTimeScale v7 = time1.start.timescale;
  CMTimeFlags flags = time1.start.flags;
  uint64_t v102 = *(void *)&time1.duration.flags;
  int epoch_high = HIDWORD(time1.duration.epoch);
  CMTimeEpoch epoch = time1.start.epoch;
  CMTimeScale v75 = time1.duration.timescale;
  CMTimeValue v77 = time1.duration.value;
  APSTimedInfoManagerFlushWithinTimeRange();
  HIDWORD(v90) = 0;
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*(void *)a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  bufferedAudioEngine_getCurrentRemoteMediaTimeInternal((int *)&v90 + 1, &time1.start);
  if (HIDWORD(v90))
  {
LABEL_208:
    APSLogErrorAt();
LABEL_209:
    CFDictionaryRef v22 = 0;
    goto LABEL_187;
  }
  CMTimeValue v9 = time1.start.value;
  CMTimeScale v68 = time1.start.timescale;
  CMTimeFlags v72 = time1.start.flags;
  CMTimeEpoch v63 = time1.start.epoch;
  long long v10 = *(_OWORD *)v5;
  time1.start.CMTimeEpoch epoch = *(void *)(v3 + 692);
  *(_OWORD *)&time1.start.CMTimeValue value = v10;
  *(void *)CMTime lhs = v6;
  *(_DWORD *)&lhs[8] = v7;
  *(_DWORD *)&lhs[12] = flags;
  *(void *)&lhs[16] = epoch;
  int32_t v11 = CMTimeCompare(&time1.start, (CMTime *)lhs);
  if (v11 >= 1)
  {
    if (gLogCategory_APAudioEngineBuffered <= 50
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (*(void *)a1) {
        CMBaseObjectGetDerivedStorage();
      }
      LogPrintF();
    }
    uint64_t v12 = *(void *)(v3 + 560);
    time1.start.CMTimeValue value = v6;
    time1.start.CMTimeScale timescale = v7;
    time1.start.CMTimeFlags flags = flags;
    time1.start.CMTimeEpoch epoch = epoch;
    HIDWORD(v90) = APMessageRingBufferedPruneMessagesFromTimestamp(v12, (uint64_t)&time1, &v88, &v89, &v90);
    if (!HIDWORD(v90))
    {
      *(_DWORD *)(v3 + 896) = 0;
      goto LABEL_29;
    }
    goto LABEL_208;
  }
LABEL_29:
  CMTimeValue v60 = v9;
  CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  keys = (void *)*MEMORY[0x1E4F328E8];
  values = (void *)*MEMORY[0x1E4F328D0];
  CFDictionaryRef v14 = CFDictionaryCreate(v13, (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v14)
  {
    APSLogErrorAt();
    CFDictionaryRef v22 = 0;
    HIDWORD(v90) = -15480;
    goto LABEL_189;
  }
  CFDictionaryRef v15 = v14;
  CMNotificationCenterGetDefaultLocalCenter();
  FigDispatchAsyncPostNotification();
  if (*(unsigned char *)(v3 + 1032)) {
    bufferedAudioEngine_setTranscodeIsRestingAndUpdateConsumer(*(void *)a1, 0);
  }
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*(void *)a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  int v65 = v11;
  CFDictionaryRef v61 = v15;
  long long v16 = *(_OWORD *)v5;
  time1.start.CMTimeEpoch epoch = *(void *)(v3 + 692);
  *(_OWORD *)&time1.start.CMTimeValue value = v16;
  *(void *)CMTime lhs = v6;
  *(_DWORD *)&lhs[8] = v7;
  *(_DWORD *)&lhs[12] = flags;
  *(void *)&lhs[16] = epoch;
  int v17 = 0;
  if ((CMTimeCompare(&time1.start, (CMTime *)lhs) & 0x80000000) == 0)
  {
LABEL_40:
    if (HIDWORD(v90)) {
      goto LABEL_219;
    }
    uint64_t v62 = v3;
    CMTimeScale v80 = v7;
    if (gLogCategory_APAudioEngineBuffered >= 51)
    {
      CMTimeValue v18 = *v5;
      CMTimeScale v19 = *(_DWORD *)(v3 + 684);
      uint64_t v98 = *(void *)(v3 + 688);
      int v99 = *(_DWORD *)(v3 + 696);
    }
    else
    {
      if (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize())
      {
        if (*(void *)a1) {
          CMBaseObjectGetDerivedStorage();
        }
        LogPrintF();
      }
      CMTimeValue v18 = *v5;
      CMTimeScale v19 = *(_DWORD *)(v3 + 684);
      uint64_t v98 = *(void *)(v3 + 688);
      int v99 = *(_DWORD *)(v3 + 696);
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (*(void *)a1) {
          CMBaseObjectGetDerivedStorage();
        }
        time1.start.CMTimeValue value = v6;
        time1.start.CMTimeScale timescale = v7;
        time1.start.CMTimeFlags flags = flags;
        CMTimeEpoch v23 = epoch;
        time1.start.CMTimeEpoch epoch = epoch;
        time1.duration.CMTimeValue value = v77;
        *(void *)&time1.duration.CMTimeFlags flags = v102;
        time1.duration.CMTimeScale timescale = v75;
        HIDWORD(time1.duration.epoch) = epoch_high;
        CMTimeRangeGetEnd(&v84, &time1);
        time1.start.CMTimeValue value = v6;
        time1.start.CMTimeScale timescale = v7;
        time1.start.CMTimeFlags flags = flags;
        time1.start.CMTimeEpoch epoch = epoch;
        time1.duration.CMTimeValue value = v77;
        *(void *)&time1.duration.CMTimeFlags flags = v102;
        time1.duration.CMTimeScale timescale = v75;
        HIDWORD(time1.duration.epoch) = epoch_high;
        CMTimeRangeGetEnd(&v83, &time1);
        LogPrintF();
        goto LABEL_64;
      }
    }
    CMTimeEpoch v23 = epoch;
LABEL_64:
    int v70 = 0;
    CMTimeFlags v79 = flags;
LABEL_65:
    int v24 = 0;
    while (1)
    {
      time1.start.CMTimeValue value = v6;
      time1.start.CMTimeScale timescale = v7;
      time1.start.CMTimeFlags flags = flags;
      time1.start.CMTimeEpoch epoch = v23;
      time1.duration.CMTimeValue value = v77;
      time1.duration.CMTimeScale timescale = v75;
      *(void *)&time1.duration.CMTimeFlags flags = v102;
      HIDWORD(time1.duration.epoch) = epoch_high;
      CMTimeRangeGetEnd(&time2, &time1);
      time1.start.CMTimeValue value = v18;
      time1.start.CMTimeScale timescale = v19;
      *(void *)&time1.start.CMTimeFlags flags = v98;
      HIDWORD(time1.start.epoch) = v99;
      if ((CMTimeCompare(&time1.start, &time2) & 0x80000000) == 0) {
        break;
      }
      uint64_t v25 = *(void *)a1;
      uint64_t v26 = CMBaseObjectGetDerivedStorage();
      if (!*(unsigned char *)v26 && CMBufferQueueGetBufferCount(*(CMBufferQueueRef *)(v26 + 1112)))
      {
        uint64_t v27 = a1;
        uint64_t v28 = bufferedAudioEngine_processAndRetainSBufFromBufferQueue(v25);
        if (v28)
        {
          uint64_t v29 = v28;
          CMFormatDescriptionRef FormatDescription = CMSampleBufferGetFormatDescription(v28);
          StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(FormatDescription);
          if (StreamBasicDescription)
          {
            p_mSampleRate = &StreamBasicDescription->mSampleRate;
            int64_t v33 = CMSampleBufferGetNumSamples(v29) * StreamBasicDescription->mFramesPerPacket;
            CMTimeFlags flags = v79;
            if (v33)
            {
              CMTimeMake((CMTime *)lhs, v33, (int)*p_mSampleRate);
              *(void *)CMTime rhs = v18;
              *(_DWORD *)&rhs[8] = v19;
              *(void *)&rhs[12] = v98;
              *(_DWORD *)&rhs[20] = v99;
              CMTimeAdd(&time1.start, (CMTime *)rhs, (CMTime *)lhs);
              int v34 = 0;
              CMTimeValue v18 = time1.start.value;
              CMTimeScale v19 = time1.start.timescale;
              uint64_t v98 = *(void *)&time1.start.flags;
              int v99 = HIDWORD(time1.start.epoch);
            }
            else
            {
              int v34 = 0;
            }
          }
          else
          {
            APSLogErrorAt();
            int v34 = -72091;
            CMTimeFlags flags = v79;
          }
          CFRelease(v29);
          HIDWORD(v90) = v34;
          ++v70;
          a1 = v27;
          CMTimeScale v7 = v80;
          CMTimeEpoch v23 = epoch;
          goto LABEL_65;
        }
        CMTimeEpoch v23 = epoch;
        if (gLogCategory_APAudioEngineBuffered <= 30
          && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
        {
          if (v25) {
            CMBaseObjectGetDerivedStorage();
          }
          LogPrintF();
        }
      }
      HIDWORD(v90) = 0;
      if ((unsigned __int16)++v24 >= 0x14u)
      {
        CMTimeFlags flags = v79;
        CMTimeScale v7 = v80;
        if (gLogCategory_APAudioEngineBuffered > 90) {
          goto LABEL_106;
        }
        if (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize())
        {
          if (*(void *)a1) {
            CMBaseObjectGetDerivedStorage();
          }
          LogPrintF();
        }
        break;
      }
      usleep(0x186A0u);
      CMTimeFlags flags = v79;
      CMTimeScale v7 = v80;
    }
    if (gLogCategory_APAudioEngineBuffered <= 50
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (*(void *)a1) {
        CMBaseObjectGetDerivedStorage();
      }
      LogPrintF();
    }
LABEL_106:
    if ((v72 & 0x1D) != 1)
    {
      APSLogErrorAt();
      int v55 = APSSignalErrorAt();
      HIDWORD(v90) = v55;
      CFDictionaryRef v22 = v61;
      goto LABEL_188;
    }
    CFDictionaryRef v22 = v61;
    uint64_t v37 = v62;
    if (gLogCategory_APAudioEngineBuffered <= 50
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (*(void *)a1) {
        CMBaseObjectGetDerivedStorage();
      }
      time1.start.CMTimeValue value = v60;
      time1.start.CMTimeScale timescale = v68;
      time1.start.CMTimeFlags flags = v72;
      time1.start.CMTimeEpoch epoch = v63;
      CMTimeGetSeconds(&time1.start);
      long long v38 = *(_OWORD *)v5;
      time1.start.CMTimeEpoch epoch = v5[2];
      *(_OWORD *)&time1.start.CMTimeValue value = v38;
      CMTimeGetSeconds(&time1.start);
      time1.start.CMTimeValue value = v6;
      time1.start.CMTimeScale timescale = v7;
      time1.start.CMTimeFlags flags = flags;
      time1.start.CMTimeEpoch epoch = epoch;
      CMTimeGetSeconds(&time1.start);
      uint64_t v37 = v62;
      LogPrintF();
    }
    if ((flags & 0x1D) == 1)
    {
      CMTimeFlags v74 = *(_DWORD *)(v37 + 688);
      if ((v74 & 0x1D) == 1)
      {
        CMTimeScale v71 = *(_DWORD *)(v37 + 684);
        CMTimeValue v73 = *v5;
        CMTimeEpoch v69 = v5[2];
        *(unsigned char *)(v37 + 912) = 1;
        *uint64_t v5 = v6;
        *(_DWORD *)(v37 + 684) = v7;
        *(_DWORD *)(v37 + 688) = flags;
        v5[2] = epoch;
        uint64_t v39 = *(void *)a1;
        time1.start.CMTimeValue value = v6;
        time1.start.CMTimeScale timescale = v7;
        time1.start.CMTimeFlags flags = flags;
        time1.start.CMTimeEpoch epoch = epoch;
        bufferedAudioEngine_updateNextTranscodeBurstTimeAndUnRest(v39, &time1.start);
        if (gLogCategory_APAudioEngineBuffered <= 50
          && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
        {
          if (*(void *)a1) {
            CMBaseObjectGetDerivedStorage();
          }
          time1.start.CMTimeValue value = v73;
          time1.start.CMTimeScale timescale = v71;
          time1.start.CMTimeFlags flags = v74;
          time1.start.CMTimeEpoch epoch = v69;
          CMTimeGetSeconds(&time1.start);
          long long v40 = *(_OWORD *)v5;
          time1.start.CMTimeEpoch epoch = v5[2];
          *(_OWORD *)&time1.start.CMTimeValue value = v40;
          CMTimeGetSeconds(&time1.start);
          LogPrintF();
        }
        if (v65 < 1) {
          goto LABEL_186;
        }
        uint64_t v41 = *(const void **)a1;
        unsigned int v67 = v88;
        uint64_t v58 = v89;
        uint64_t v57 = v90;
        uint64_t v59 = CMBaseObjectGetDerivedStorage();
        if (gLogCategory_APAudioEngineBuffered <= 50
          && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
        {
          if (v41) {
            CMBaseObjectGetDerivedStorage();
          }
          LogPrintF();
        }
        uint64_t v56 = a1;
        if (APSSettingsIsFeatureEnabled())
        {
          uint64_t v42 = *(void *)(v59 + 1680);
          uint64_t SampleRateFromTransportAudioFormat = bufferedAudioEngine_getSampleRateFromTransportAudioFormat();
          uint64_t v44 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v44) {
            uint64_t v45 = v44;
          }
          else {
            uint64_t v45 = 0;
          }
          int32_t v54 = *(void (**)(uint64_t, void, uint64_t, CMTimeRange *, uint64_t, unsigned char *, uint64_t))(v45 + 16);
          if (v54)
          {
            time1.start.CMTimeValue value = v6;
            time1.start.CMTimeScale timescale = v7;
            time1.start.CMTimeFlags flags = flags;
            time1.start.CMTimeEpoch epoch = epoch;
            *(void *)CMTime lhs = v73;
            *(_DWORD *)&lhs[8] = v71;
            *(_DWORD *)&lhs[12] = v74;
            *(void *)&lhs[16] = v69;
            v54(v42, v67, v58, &time1, v57, lhs, SampleRateFromTransportAudioFormat);
          }
          goto LABEL_185;
        }
        uint64_t v46 = *(void *)(v59 + 584);
        if (!v46)
        {
LABEL_185:
          HIDWORD(v90) = 0;
          a1 = v56;
          CFDictionaryRef v22 = v61;
LABEL_186:
          bufferedAudioEngine_wakeUpHosesAndAudioTimer(*(void *)a1);
          goto LABEL_187;
        }
        long long v78 = *MEMORY[0x1E4F1FA48];
        CMTimeEpoch v76 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
        long long v64 = *(_OWORD *)(MEMORY[0x1E4F49F28] + 12);
        long long v66 = *MEMORY[0x1E4F49F28];
        while (1)
        {
          if ((__int16)(*(_WORD *)(v46 + 26) - v67) >= 1) {
            *(_WORD *)(v46 + 26) = v67;
          }
          CMTimeEpoch v47 = epoch;
          if (gLogCategory_APAudioEngineBuffered <= 50
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (v41) {
              CMBaseObjectGetDerivedStorage();
            }
            *(_OWORD *)&time1.start.CMTimeValue value = *(_OWORD *)(v46 + 88);
            time1.start.CMTimeEpoch epoch = *(void *)(v46 + 104);
            CMTimeGetSeconds(&time1.start);
            LogPrintF();
            CMTimeFlags flags = v79;
            CMTimeScale v7 = v80;
            CMTimeEpoch v47 = epoch;
          }
          uint64_t v48 = CMBaseObjectGetDerivedStorage();
          *(_OWORD *)&v94.CMTimeValue value = v78;
          v94.CMTimeEpoch epoch = v76;
          *(_OWORD *)CMTime rhs = v66;
          *(_OWORD *)&rhs[12] = v64;
          *(_OWORD *)CFDictionaryRef v92 = v66;
          *(_OWORD *)&v92[12] = v64;
          *(_OWORD *)&time1.start.CMTimeValue value = *(_OWORD *)(v46 + 32);
          time1.start.CMTimeEpoch epoch = *(void *)(v46 + 48);
          *(void *)CMTime lhs = v6;
          *(_DWORD *)&lhs[8] = v7;
          *(_DWORD *)&lhs[12] = flags;
          *(void *)&lhs[16] = v47;
          CMTimeSubtract(&v94, &time1.start, (CMTime *)lhs);
          if (gLogCategory_APAudioEngineBuffered <= 50
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (v41) {
              CMBaseObjectGetDerivedStorage();
            }
            *(_OWORD *)&time1.start.CMTimeValue value = *(_OWORD *)(v46 + 88);
            time1.start.CMTimeEpoch epoch = *(void *)(v46 + 104);
            CMTimeGetSeconds(&time1.start);
            LogPrintF();
            CMTimeFlags flags = v79;
            CMTimeScale v7 = v80;
          }
          *(_OWORD *)CMTime lhs = *(_OWORD *)(v46 + 88);
          *(void *)&lhs[16] = *(void *)(v46 + 104);
          *(CMTime *)CMTimeFlags v104 = v94;
          CMTimeSubtract(&time1.start, (CMTime *)lhs, (CMTime *)v104);
          *(_OWORD *)(v46 + 88) = *(_OWORD *)&time1.start.value;
          *(void *)(v46 + 104) = time1.start.epoch;
          if (gLogCategory_APAudioEngineBuffered <= 50
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (v41) {
              CMBaseObjectGetDerivedStorage();
            }
            time1.start = v94;
            CMTimeGetSeconds(&time1.start);
            *(_OWORD *)&time1.start.CMTimeValue value = *(_OWORD *)(v46 + 88);
            time1.start.CMTimeEpoch epoch = *(void *)(v46 + 104);
            CMTimeGetSeconds(&time1.start);
            LogPrintF();
            CMTimeFlags flags = v79;
            CMTimeScale v7 = v80;
          }
          *(_WORD *)(v46 + 56) = 256;
          *(void *)(v46 + 80) = 0;
          *(void *)(v46 + 72) = mach_absolute_time();
          *(unsigned char *)(v46 + 256) = 0;
          *(_OWORD *)(v46 + 112) = v78;
          *(void *)(v46 + 128) = v76;
          bufferedAudioEngine_cancelRTCUnderrunForHose((uint64_t)v41, v46);
          time1.start.CMTimeValue value = v6;
          time1.start.CMTimeScale timescale = v7;
          time1.start.CMTimeFlags flags = flags;
          time1.start.CMTimeEpoch epoch = v47;
          *(_OWORD *)CMTime lhs = *(_OWORD *)(v46 + 32);
          *(void *)&lhs[16] = *(void *)(v46 + 48);
          if (CMTimeCompare(&time1.start, (CMTime *)lhs) < 0)
          {
            *(void *)(v46 + 32) = v6;
            *(_DWORD *)(v46 + 40) = v7;
            *(_DWORD *)(v46 + 44) = flags;
            *(void *)(v46 + 48) = v47;
          }
          if (gLogCategory_APAudioEngineBuffered <= 50
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (v41) {
              CMBaseObjectGetDerivedStorage();
            }
            time1.start.CMTimeValue value = v6;
            CMTimeScale v7 = v80;
            time1.start.CMTimeScale timescale = v80;
            time1.start.CMTimeFlags flags = flags;
            time1.start.CMTimeEpoch epoch = v47;
            CMTimeGetSeconds(&time1.start);
            time1.start.CMTimeValue value = v73;
            time1.start.CMTimeScale timescale = v71;
            time1.start.CMTimeFlags flags = v74;
            time1.start.CMTimeEpoch epoch = v69;
            CMTimeEpoch v47 = epoch;
            CMTimeGetSeconds(&time1.start);
            LogPrintF();
          }
          if (*(unsigned char *)(v48 + 520)) {
            break;
          }
          int32_t v53 = bufferedAudioEngine_getSampleRateFromTransportAudioFormat();
          *(void *)CMTime lhs = v6;
          *(_DWORD *)&lhs[8] = v7;
          *(_DWORD *)&lhs[12] = flags;
          *(void *)&lhs[16] = v47;
          CMTimeConvertScale(&time1.start, (CMTime *)lhs, v53, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
          APSAudioTransportTimeMakeWithRTPTime();
          *(void *)CMTime lhs = v73;
          *(_DWORD *)&lhs[8] = v71;
          *(_DWORD *)&lhs[12] = v74;
          *(void *)&lhs[16] = v69;
          CMTimeConvertScale(&time1.start, (CMTime *)lhs, v53, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
          APSAudioTransportTimeMakeWithRTPTime();
          if (v41) {
            goto LABEL_170;
          }
LABEL_171:
          uint64_t v49 = *(void *)(v46 + 16);
          *(_OWORD *)CMTimeFlags v104 = *(_OWORD *)rhs;
          *(_OWORD *)&v104[12] = *(_OWORD *)&rhs[12];
          v91[0] = *(_OWORD *)v92;
          *(_OWORD *)((char *)v91 + 12) = *(_OWORD *)&v92[12];
          APSEndpointStreamAudioHoseProtocolGetProtocolID();
          uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
          if (ProtocolVTable)
          {
            uint64_t v51 = *(void *)(ProtocolVTable + 16);
            if (v51)
            {
              uint64_t v52 = *(void (**)(uint64_t, uint64_t, CMTimeRange *, uint64_t, unsigned char *, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const void *), const void *))(v51 + 32);
              if (v52)
              {
                *(_OWORD *)&time1.start.CMTimeValue value = *(_OWORD *)v104;
                *(_OWORD *)&time1.start.CMTimeFlags flags = *(_OWORD *)&v104[12];
                *(_OWORD *)CMTime lhs = v91[0];
                *(_OWORD *)&lhs[12] = *(_OWORD *)((char *)v91 + 12);
                v52(v49, v58, &time1, v57, lhs, bufferedAudioEngine_hoseFlushWithinSampleRangeCallbackCompletionHandler, v41);
              }
              else
              {
                bufferedAudioEngine_hoseFlushWithinSampleRangeCallbackCompletionHandler(v49, 0, MEMORY[0x1E4F49F28], 0, MEMORY[0x1E4F49F28], 4294954514, v41);
              }
            }
          }
          ++*(_DWORD *)(v46 + 172);
          if (APMessageRingBufferedGetByteCountAtIndex(*(void *)(v48 + 560), (unsigned __int16)(*(_WORD *)(v46 + 26) + 1), (int *)(v46 + 136)))APSLogErrorAt(); {
          uint64_t v46 = *(void *)v46;
          }
          if (!v46) {
            goto LABEL_185;
          }
        }
        time1.start.CMTimeValue value = v6;
        time1.start.CMTimeScale timescale = v7;
        time1.start.CMTimeFlags flags = flags;
        time1.start.CMTimeEpoch epoch = v47;
        APSAudioTransportTimeMakeWithMediaTime();
        time1.start.CMTimeValue value = v73;
        time1.start.CMTimeScale timescale = v71;
        time1.start.CMTimeFlags flags = v74;
        time1.start.CMTimeEpoch epoch = v69;
        APSAudioTransportTimeMakeWithMediaTime();
        if (!v41) {
          goto LABEL_171;
        }
LABEL_170:
        CFRetain(v41);
        goto LABEL_171;
      }
    }
    APSLogErrorAt();
    int v55 = APSSignalErrorAt();
LABEL_207:
    HIDWORD(v90) = v55;
    goto LABEL_188;
  }
  int v20 = 0;
  while (1)
  {
    HIDWORD(v90) = bufferedAudioEngine_prepareOneMessageForSending(*(const void **)a1, 1, &v87);
    if (HIDWORD(v90) == -72095)
    {
      CFDictionaryRef v22 = v15;
      goto LABEL_189;
    }
    if (!v87) {
      break;
    }
    int v20 = 0;
    ++v17;
LABEL_52:
    long long v21 = *(_OWORD *)v5;
    time1.start.CMTimeEpoch epoch = *(void *)(v3 + 692);
    *(_OWORD *)&time1.start.CMTimeValue value = v21;
    *(void *)CMTime lhs = v6;
    *(_DWORD *)&lhs[8] = v7;
    *(_DWORD *)&lhs[12] = flags;
    *(void *)&lhs[16] = epoch;
    if ((CMTimeCompare(&time1.start, (CMTime *)lhs) & 0x80000000) == 0) {
      goto LABEL_40;
    }
  }
  if ((unsigned __int16)++v20 < 0xAu)
  {
    usleep(0x186A0u);
    goto LABEL_52;
  }
  CMTimeMake(&v85, 10, 1000);
  *(void *)CMTimeFlags v104 = *v5;
  *(_DWORD *)&v104[8] = *(_DWORD *)(v3 + 684);
  int v35 = *(_DWORD *)(v3 + 688);
  uint64_t v36 = *(void *)(v3 + 692);
  *(_OWORD *)&time1.start.CMTimeValue value = *(_OWORD *)v4;
  time1.start.CMTimeEpoch epoch = *(void *)(v4 + 16);
  *(_OWORD *)CMTime lhs = *(_OWORD *)&time1.start.value;
  *(void *)&lhs[16] = time1.start.epoch;
  if (v35 & 1) != 0 && (flags & 1) != 0 && (v85.flags)
  {
    *(void *)CMTime rhs = v6;
    *(_DWORD *)&rhs[8] = v7;
    *(_DWORD *)&rhs[12] = flags;
    *(void *)&rhs[16] = epoch;
    *(CMTime *)CFDictionaryRef v92 = v85;
    CMTimeSubtract(&time1.start, (CMTime *)rhs, (CMTime *)v92);
    *(void *)CMTime rhs = v6;
    *(_DWORD *)&rhs[8] = v7;
    *(_DWORD *)&rhs[12] = flags;
    *(void *)&rhs[16] = epoch;
    *(CMTime *)CFDictionaryRef v92 = v85;
    CMTimeAdd((CMTime *)lhs, (CMTime *)rhs, (CMTime *)v92);
    *(void *)CMTime rhs = *(void *)v104;
    *(_DWORD *)&rhs[8] = *(_DWORD *)&v104[8];
    *(_DWORD *)&rhs[12] = v35;
    *(void *)&rhs[16] = v36;
    *(_OWORD *)CFDictionaryRef v92 = *(_OWORD *)&time1.start.value;
    *(void *)&v92[16] = time1.start.epoch;
    if ((CMTimeCompare((CMTime *)rhs, (CMTime *)v92) & 0x80000000) == 0)
    {
      *(void *)CMTime rhs = *(void *)v104;
      *(_DWORD *)&rhs[8] = *(_DWORD *)&v104[8];
      *(_DWORD *)&rhs[12] = v35;
      *(void *)&rhs[16] = v36;
      *(_OWORD *)CFDictionaryRef v92 = *(_OWORD *)lhs;
      *(void *)&v92[16] = *(void *)&lhs[16];
      uint64_t v5 = (CMTimeValue *)(v3 + 676);
      if (CMTimeCompare((CMTime *)rhs, (CMTime *)v92) < 1) {
        goto LABEL_40;
      }
    }
  }
  else
  {
    APSLogErrorAt();
  }
  if (gLogCategory_APAudioEngineBuffered <= 90
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*(void *)a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  HIDWORD(v90) = -17583;
LABEL_219:
  APSLogErrorAt();
  CFDictionaryRef v22 = v61;
LABEL_187:
  int v55 = HIDWORD(v90);
LABEL_188:
  if (v55)
  {
LABEL_189:
    if (gLogCategory_APAudioEngineBuffered <= 90
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (*(void *)a1) {
        CMBaseObjectGetDerivedStorage();
      }
      LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
  }
  if (v22) {
    CFRelease(v22);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  free((void *)a1);
}

uint64_t bufferedAudioEngine_hoseFlushWithinSampleRangeCallbackCompletionHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const void *a7)
{
  if (a7) {
    CFRelease(a7);
  }
  return 0;
}

uint64_t bufferedAudioEngine_hoseFlushWithinSampleRangeCallbackCompletionHandlerInternal(uint64_t a1)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)result) {
    goto LABEL_18;
  }
  uint64_t result = (uint64_t)bufferedAudioEngine_getHoseDecriptorFromHose();
  if (!result)
  {
    if (gLogCategory_APAudioEngineBuffered > 90) {
      goto LABEL_18;
    }
    if (gLogCategory_APAudioEngineBuffered == -1)
    {
      uint64_t result = _LogCategory_Initialize();
      if (!result) {
        goto LABEL_18;
      }
    }
    if (!*(void *)a1) {
      goto LABEL_17;
    }
LABEL_22:
    CMBaseObjectGetDerivedStorage();
    goto LABEL_17;
  }
  --*(_DWORD *)(result + 172);
  if (!*(_DWORD *)(a1 + 80))
  {
    if (gLogCategory_APAudioEngineBuffered > 50) {
      goto LABEL_18;
    }
    if (gLogCategory_APAudioEngineBuffered == -1)
    {
      uint64_t result = _LogCategory_Initialize();
      if (!result) {
        goto LABEL_18;
      }
    }
    if (!*(void *)a1)
    {
LABEL_17:
      uint64_t result = LogPrintF();
      goto LABEL_18;
    }
    goto LABEL_22;
  }
  if (gLogCategory_APAudioEngineBuffered <= 90)
  {
    if (gLogCategory_APAudioEngineBuffered != -1 || (uint64_t result = _LogCategory_Initialize(), result))
    {
      if (!*(void *)a1) {
        goto LABEL_17;
      }
      goto LABEL_22;
    }
  }
LABEL_18:
  **(_DWORD **)(a1 + 88) = 0;
  return result;
}

void bufferedAudioEngine_setRateAndAnchorTimeInternal(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTime v25 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*(void *)a1) {
      CMBaseObjectGetDerivedStorage();
    }
    bufferedAudioEngine_playbackStateGetCString(*(_DWORD *)(DerivedStorage + 804));
    LogPrintF();
  }
  if (*(void *)(DerivedStorage + 472)) {
    int v3 = 0;
  }
  else {
    int v3 = -72094;
  }
  if (*(unsigned char *)DerivedStorage) {
    int v4 = -15487;
  }
  else {
    int v4 = v3;
  }
  if (v4)
  {
    bufferedAudioEngine_callSetRateAndAnchorTimeClientCompletionCallback(*(const void **)a1, 4294949714, MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], 0);
LABEL_16:
    APSLogErrorAt();
    goto LABEL_17;
  }
  if (*(unsigned char *)(DerivedStorage + 736))
  {
    CMTime lhs = *(CMTime *)(DerivedStorage + 724);
    CMTime rhs = *(CMTime *)(DerivedStorage + 700);
    CMTimeSubtract(&v25, &lhs, &rhs);
  }
  else
  {
    CMTime v25 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  }
  CMBaseObjectGetDerivedStorage();
  double v6 = *(double *)(a1 + 8);
  if (v6 == 1.0) {
    *(unsigned char *)(DerivedStorage + 802) = 0;
  }
  int v7 = *(_DWORD *)(DerivedStorage + 804);
  if (v7 <= 1937011304)
  {
    if (v7 == 1886547820)
    {
LABEL_31:
      if (v6 == 1.0)
      {
        if (gLogCategory_APAudioEngineBuffered <= 50
          && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
        {
          if (*(void *)a1) {
            CMBaseObjectGetDerivedStorage();
          }
          LogPrintF();
        }
        uint64_t v8 = *(const void **)a1;
        uint64_t v9 = CMBaseObjectGetDerivedStorage();
        CMClockRef HostTimeClock = CMClockGetHostTimeClock();
        CMClockGetTime(&lhs, HostTimeClock);
        *(CMTime *)(v9 + 1568) = lhs;
        *(_DWORD *)(v9 + 1592) = *(_DWORD *)(v9 + 592);
        uint64_t v11 = CMBaseObjectGetDerivedStorage();
        CMTime lhs = *(CMTime *)(v11 + 676);
        CMTime rhs = *(CMTime *)(v11 + 700);
        CMTimeSubtract(&time, &lhs, &rhs);
        float Seconds = CMTimeGetSeconds(&time);
        *(float *)(v9 + 1596) = Seconds;
        bufferedAudioEngine_getStreamInfoForStartup((uint64_t)v8, (float *)(v9 + 1600), (float *)(v9 + 1604), (float *)(v9 + 1608), (_WORD *)(v9 + 1612), (char *)(v9 + 1618), (_WORD *)(v9 + 1614), (_WORD *)(v9 + 1616));
        kdebug_trace();
        goto LABEL_63;
      }
      if (v6 == 0.0)
      {
        if (gLogCategory_APAudioEngineBuffered <= 50
          && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
        {
          if (*(void *)a1) {
            CMBaseObjectGetDerivedStorage();
          }
          bufferedAudioEngine_playbackStateGetCString(*(_DWORD *)(DerivedStorage + 804));
          LogPrintF();
        }
        long long v21 = *(const void **)a1;
        CMTime lhs = v25;
        uint64_t v24 = MEMORY[0x1E4F1F9F8];
        p_CMTime lhs = &lhs;
        uint64_t v23 = 0;
LABEL_120:
        bufferedAudioEngine_callSetRateAndAnchorTimeClientCompletionCallback(v21, v23, (uint64_t)p_lhs, v24, 0);
        goto LABEL_17;
      }
      goto LABEL_89;
    }
    if (v7 != 1886614642)
    {
      if (v7 != 1937010544) {
        goto LABEL_89;
      }
      goto LABEL_31;
    }
    goto LABEL_79;
  }
  if (v7 == 1937011305)
  {
LABEL_79:
    if (v6 == 0.0)
    {
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (*(void *)a1) {
          CMBaseObjectGetDerivedStorage();
        }
        CMTime lhs = v25;
        CMTimeGetSeconds(&lhs);
        LogPrintF();
      }
      int v17 = *(const void **)a1;
      CMTime lhs = v25;
      uint64_t v18 = MEMORY[0x1E4F1F9F8];
      bufferedAudioEngine_callSetRateAndAnchorTimeClientCompletionCallback(v17, 4294949716, (uint64_t)&lhs, MEMORY[0x1E4F1F9F8], 0);
      CMTimeScale v19 = *(const void **)a1;
      CMTime lhs = v25;
      bufferedAudioEngine_callSetRateAndAnchorTimeClientCompletionCallback(v19, 0, (uint64_t)&lhs, v18, 0);
      *(unsigned char *)(DerivedStorage + 760) = 0;
      *(void *)(DerivedStorage + 816) = 0xBFF0000000000000;
      *(void *)(DerivedStorage + 880) = 0;
      *(void *)(DerivedStorage + 872) = 0;
      bufferedAudioEngine_updatePlaybackState(*(void *)a1, 1937010544);
      goto LABEL_17;
    }
LABEL_84:
    if (v6 == 1.0)
    {
      if (gLogCategory_APAudioEngineBuffered <= 90
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (*(void *)a1) {
          CMBaseObjectGetDerivedStorage();
        }
        LogPrintF();
      }
      long long v21 = *(const void **)a1;
      CMTime lhs = v25;
      uint64_t v24 = MEMORY[0x1E4F1F9F8];
      p_CMTime lhs = &lhs;
      uint64_t v23 = 4294949715;
      goto LABEL_120;
    }
LABEL_89:
    if (gLogCategory_APAudioEngineBuffered <= 90
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (*(void *)a1) {
        CMBaseObjectGetDerivedStorage();
      }
      LogPrintF();
    }
    goto LABEL_17;
  }
  if (v7 != 1937011316)
  {
    if (v7 != 1937207905) {
      goto LABEL_89;
    }
    if (v6 == 0.0)
    {
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (*(void *)a1) {
          CMBaseObjectGetDerivedStorage();
        }
        LogPrintF();
      }
      *(unsigned char *)(DerivedStorage + 802) = 1;
      int v20 = *(const void **)a1;
      CMTime lhs = v25;
      bufferedAudioEngine_callSetRateAndAnchorTimeClientCompletionCallback(v20, 4294949716, (uint64_t)&lhs, MEMORY[0x1E4F1F9F8], 0);
      *(void *)(DerivedStorage + 816) = *(void *)(a1 + 8);
      *(_OWORD *)(DerivedStorage + 872) = *(_OWORD *)(a1 + 64);
      goto LABEL_17;
    }
    goto LABEL_84;
  }
  if (v6 == 1.0)
  {
    if (gLogCategory_APAudioEngineBuffered <= 90
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (*(void *)a1) {
        CMBaseObjectGetDerivedStorage();
      }
      LogPrintF();
    }
    long long v21 = *(const void **)a1;
    p_CMTime lhs = (CMTime *)MEMORY[0x1E4F1F9F8];
    uint64_t v23 = 4294949715;
    uint64_t v24 = MEMORY[0x1E4F1F9F8];
    goto LABEL_120;
  }
  if (v6 != 0.0) {
    goto LABEL_89;
  }
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*(void *)a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  if (*(void *)(DerivedStorage + 1400))
  {
    mach_absolute_time();
    *(void *)(DerivedStorage + 1408) += UpTicksToMilliseconds();
    *(void *)(DerivedStorage + 1400) = 0;
  }
LABEL_63:
  *(void *)(DerivedStorage + 816) = *(void *)(a1 + 8);
  long long v13 = *(_OWORD *)(a1 + 40);
  *(void *)(DerivedStorage + 840) = *(void *)(a1 + 56);
  *(_OWORD *)(DerivedStorage + 824) = v13;
  *(_OWORD *)(DerivedStorage + 872) = *(_OWORD *)(a1 + 64);
  if (*(void *)(a1 + 80))
  {
    CFNumberRef Value = (const void *)FigCFDictionaryGetValue();
    CFDictionaryRef v15 = *(const void **)(DerivedStorage + 1384);
    *(void *)(DerivedStorage + 1384) = Value;
    if (Value) {
      CFRetain(Value);
    }
    if (v15) {
      CFRelease(v15);
    }
  }
  long long v16 = *(const void **)a1;
  if (*(double *)(DerivedStorage + 816) == 0.0)
  {
    bufferedAudioEngine_updatePlaybackState((uint64_t)v16, 1937010793);
    if (bufferedAudioEngine_handleSetRateToZero(*(const void **)a1)) {
      goto LABEL_16;
    }
  }
  else
  {
    bufferedAudioEngine_wakeUpHosesAndAudioTimer((uint64_t)v16);
    bufferedAudioEngine_updatePlaybackState(*(void *)a1, 1886614642);
    if (*(void *)(DerivedStorage + 536))
    {
      if (bufferedAudioEngine_startPlaybackIfNecessary(*(const void **)a1, 0)) {
        goto LABEL_16;
      }
    }
    else
    {
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (*(void *)a1) {
          CMBaseObjectGetDerivedStorage();
        }
        LogPrintF();
      }
      bufferedAudioEngine_updatePlaybackState(*(void *)a1, 1937011305);
      if (bufferedAudioEngine_handleSetRateToOne(*(const void **)a1)) {
        goto LABEL_16;
      }
    }
  }
LABEL_17:
  bufferedAudioEngine_updateDataProcessingTargetQueueInternal(*(void *)a1);
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  uint64_t v5 = *(const void **)(a1 + 80);
  if (v5) {
    CFRelease(v5);
  }
  free((void *)a1);
}

uint64_t bufferedAudioEngine_setEndOfSiriTTSUtteranceMediaTimeInternal(uint64_t a1)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  long long v37 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&v57.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v3 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  int v55 = 0;
  CMBlockBufferRef blockBufferOut = 0;
  CMTimeValue v4 = *(void *)(a1 + 8);
  v57.CMTimeEpoch epoch = v3;
  CMTimeValue value = v4;
  CMTimeScale timescale = *(_DWORD *)(a1 + 16);
  if (*DerivedStorage) {
    goto LABEL_8;
  }
  CMTimeFlags v5 = *(_DWORD *)(a1 + 20);
  if ((v5 & 1) == 0) {
    goto LABEL_39;
  }
  double v6 = DerivedStorage;
  CMTimeEpoch v7 = *(void *)(a1 + 24);
  time1.CMTimeValue value = *(void *)(a1 + 8);
  time1.CMTimeScale timescale = *(_DWORD *)(a1 + 16);
  time1.CMTimeFlags flags = v5;
  time1.CMTimeEpoch epoch = v7;
  long long v36 = *MEMORY[0x1E4F1FA48];
  *(_OWORD *)&time2.CMTimeValue value = *MEMORY[0x1E4F1FA48];
  CMTimeEpoch v8 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  time2.CMTimeEpoch epoch = v8;
  if (CMTimeCompare(&time1, &time2) <= 0)
  {
LABEL_39:
    APSLogErrorAt();
    uint64_t v16 = 4294951815;
    goto LABEL_9;
  }
  CMTime time1 = *(CMTime *)(v6 + 676);
  CMTime time2 = *(CMTime *)(v6 + 700);
  CMTimeSubtract(&v57, &time1, &time2);
  int64_t FramesPerPacket = APSAudioFormatDescriptionGetFramesPerPacket();
  APSAudioFormatDescriptionGetSampleRate();
  CMTimeMake(&rhs, FramesPerPacket, (int)v10);
  time2.CMTimeValue value = value;
  time2.CMTimeScale timescale = timescale;
  time2.CMTimeFlags flags = v5;
  time2.CMTimeEpoch epoch = v7;
  CMTimeSubtract(&time1, &time2, &rhs);
  CMTimeValue value = time1.value;
  CMTimeFlags flags = time1.flags;
  CMTimeScale timescale = time1.timescale;
  CMTimeEpoch epoch = time1.epoch;
  if (*((_DWORD *)v6 + 201) == 1852990835
    || (time1.CMTimeValue value = value, time1.timescale = timescale, time2 = v57, CMTimeCompare(&time1, &time2) >= 1))
  {
    CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    time1.CMTimeValue value = value;
    time1.CMTimeScale timescale = timescale;
    time1.CMTimeFlags flags = flags;
    time1.CMTimeEpoch epoch = epoch;
    CFDictionaryRef v14 = CMTimeCopyAsDictionary(&time1, v13);
    if (v14)
    {
      CFDictionaryRef v15 = v14;
      CFArrayAppendValue(*((CFMutableArrayRef *)v6 + 128), v14);
      CFRelease(v15);
LABEL_8:
      uint64_t v16 = 0;
      goto LABEL_9;
    }
    APSLogErrorAt();
    uint64_t v16 = 4294951816;
    goto LABEL_9;
  }
  if (gLogCategory_APAudioEngineBuffered <= 90
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*(void *)a1) {
      CMBaseObjectGetDerivedStorage();
    }
    time1.CMTimeValue value = value;
    time1.CMTimeScale timescale = timescale;
    time1.CMTimeFlags flags = flags;
    time1.CMTimeEpoch epoch = epoch;
    CMTimeGetSeconds(&time1);
    CMTime time1 = v57;
    CMTimeGetSeconds(&time1);
    LogPrintF();
  }
  uint64_t v18 = CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, &blockBufferOut);
  if (v18)
  {
    uint64_t v16 = v18;
    goto LABEL_42;
  }
  uint64_t v19 = *((void *)v6 + 70);
  size_t EncodeMessageBackingSize = bufferedAudioEngine_getEncodeMessageBackingSize(*(void *)a1, 0);
  uint64_t NextFreeBacking = APMessageRingBufferedGetNextFreeBacking(v19, EncodeMessageBackingSize);
  if (!NextFreeBacking)
  {
    APSLogErrorAt();
    uint64_t v16 = 4294895201;
    goto LABEL_9;
  }
  uint64_t v22 = NextFreeBacking;
  CMTime v57 = *(CMTime *)(v6 + 676);
  if (APSSettingsIsFeatureEnabled())
  {
    uint64_t v23 = *((void *)v6 + 210);
    uint64_t v24 = *((void *)v6 + 143);
    uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v25) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = 0;
    }
    if (*(void *)(v26 + 64)) {
      uint64_t CryptorIDForCryptor = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 80))(v23, v24);
    }
    else {
      uint64_t CryptorIDForCryptor = -12782;
    }
    uint64_t v29 = *((void *)v6 + 210);
    uint64_t v30 = *((void *)v6 + 121);
    uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v31) {
      uint64_t v32 = v31;
    }
    else {
      uint64_t v32 = 0;
    }
    int64_t v33 = *(uint64_t (**)(uint64_t, uint64_t))(v32 + 88);
    if (v33) {
      uint64_t MagicCookieIDForMagicCookieData = v33(v29, v30);
    }
    else {
      uint64_t MagicCookieIDForMagicCookieData = -12782;
    }
  }
  else
  {
    uint64_t CryptorIDForCryptor = bufferedAudioEngine_getCryptorIDForCryptor(*((void *)v6 + 143));
    uint64_t MagicCookieIDForMagicCookieData = bufferedAudioEngine_getMagicCookieIDForMagicCookieData(*((CFDataRef *)v6 + 121));
  }
  uint64_t v34 = *(void *)a1;
  v38[0] = 0;
  v38[1] = 0;
  char v39 = 1;
  uint64_t v40 = CryptorIDForCryptor;
  uint64_t v41 = MagicCookieIDForMagicCookieData;
  uint64_t v42 = 0;
  long long v43 = v37;
  CMTimeEpoch v44 = v3;
  long long v45 = v37;
  CMTimeEpoch v46 = v3;
  long long v47 = 0u;
  memset(v48, 0, sizeof(v48));
  long long v49 = v37;
  CMTimeEpoch v50 = v3;
  uint64_t v51 = 0;
  CMTime time1 = v57;
  bufferedAudioEngine_encodeMessage(v34, v22, (uint64_t)&time1, (uint64_t)v38, blockBufferOut, &v55);
  uint64_t v35 = *((void *)v6 + 70);
  CMTime time1 = v57;
  *(_OWORD *)&time2.CMTimeValue value = v36;
  time2.CMTimeEpoch epoch = v8;
  uint64_t v16 = APMessageRingBufferedEnqueueMessageForSending(v35, v55, (long long *)&time1.value, (long long *)&time2.value);
  if (v16) {
LABEL_42:
  }
    APSLogErrorAt();
LABEL_9:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (v55) {
    CFRelease(v55);
  }
  return v16;
}

uint64_t bufferedAudioEngine_applyVolumeFadeInternal(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  CMTimeValue v19 = *(void *)(a1 + 12);
  CMTimeScale v20 = *(_DWORD *)(a1 + 20);
  if (*DerivedStorage) {
    return 0;
  }
  CMTimeValue v4 = DerivedStorage;
  if (!DerivedStorage[1080]) {
    return 0;
  }
  CMTimeFlags v5 = *(_DWORD *)(a1 + 24);
  if ((v5 & 1) == 0)
  {
    APSLogErrorAt();
    return 4294951815;
  }
  if ((v3 - 1) < 2)
  {
    CMTimeEpoch v17 = *(void *)(a1 + 28);
    if (APSSettingsIsFeatureEnabled())
    {
      uint64_t v6 = *((void *)v4 + 210);
      uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v7) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0;
      }
      CFDictionaryRef v14 = *(void (**)(uint64_t, uint64_t, CMTime *))(v8 + 120);
      if (v14)
      {
        time.CMTimeValue value = v19;
        time.CMTimeScale timescale = v20;
        time.CMTimeFlags flags = v5;
        time.CMTimeEpoch epoch = v17;
        v14(v6, v3, &time);
      }
    }
    else
    {
      for (uint64_t i = (uint64_t *)*((void *)v4 + 73); i; uint64_t i = (uint64_t *)*i)
      {
        if (*((unsigned char *)i + 24))
        {
          if (gLogCategory_APAudioEngineBuffered <= 50
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (*(void *)a1) {
              CMBaseObjectGetDerivedStorage();
            }
            LogPrintF();
          }
        }
        else
        {
          if (gLogCategory_APAudioEngineBuffered <= 50
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (*(void *)a1) {
              CMBaseObjectGetDerivedStorage();
            }
            APSGetVolumeFadeTypeName();
            time.CMTimeValue value = v19;
            time.CMTimeScale timescale = v20;
            time.CMTimeFlags flags = v5;
            time.CMTimeEpoch epoch = v17;
            CMTimeGetSeconds(&time);
            LogPrintF();
          }
          uint64_t v10 = i[2];
          APSEndpointStreamAudioHoseProtocolGetProtocolID();
          uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
          if (ProtocolVTable)
          {
            uint64_t v12 = *(void *)(ProtocolVTable + 16);
            if (v12)
            {
              CFAllocatorRef v13 = *(void (**)(uint64_t, uint64_t, CMTime *))(v12 + 72);
              if (v13)
              {
                time.CMTimeValue value = v19;
                time.CMTimeScale timescale = v20;
                time.CMTimeFlags flags = v5;
                time.CMTimeEpoch epoch = v17;
                v13(v10, v3, &time);
              }
            }
          }
        }
      }
    }
    return 0;
  }
  if (gLogCategory_APAudioEngineBuffered <= 90
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*(void *)a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  uint64_t v15 = 4294951815;
  APSLogErrorAt();
  return v15;
}

void bufferedAudioEngine_handleClockLockStateChangedInternal(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    uint64_t v3 = DerivedStorage;
    if (*(void *)(DerivedStorage + 328) && !*(unsigned char *)DerivedStorage)
    {
      uint64_t v4 = APSGetFBOPropertyInt64();
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        CMBaseObjectGetDerivedStorage();
        LogPrintF();
      }
      if (v4 && *(unsigned char *)(v3 + 760) && *(_DWORD *)(v3 + 804) == 1937011316 && *(unsigned char *)(v3 + 801))
      {
        CMBaseObjectGetDerivedStorage();
        if (gLogCategory_APAudioEngineBuffered <= 50
          && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
        {
          CMBaseObjectGetDerivedStorage();
          LogPrintF();
        }
        bufferedAudioEngine_handleSetRateToOne_sendAnchorToAllHoses(a1);
      }
    }
    CFRelease(a1);
  }
}

uint64_t hidClient_getTypeID(uint64_t *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

uint64_t APHIDClientCreate(const __CFAllocator *a1, const __CFArray *a2, void *a3)
{
  if (a2)
  {
    if (APHIDClientGetTypeID_sInitOnce != -1) {
      dispatch_once_f(&APHIDClientGetTypeID_sInitOnce, &APHIDClientGetTypeID_sTypeID, (dispatch_function_t)hidClient_getTypeID);
    }
    Instance = (void *)_CFRuntimeCreateInstance();
    if (Instance)
    {
      uint64_t v7 = Instance;
      Instance[2] = 0;
      Instance[3] = 0;
      Instance[4] = 0;
      Instance[2] = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
      uint64_t v8 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
      uint64_t v9 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
      v7[3] = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      v7[4] = CFDictionaryCreateMutable(a1, 0, v8, v9);
      CFArrayGetCount(a2);
      CFArrayApplyBlock();
      if (gLogCategory_APHIDClient <= 30 && (gLogCategory_APHIDClient != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      uint64_t v10 = 0;
      *a3 = v7;
    }
    else
    {
      APSLogErrorAt();
      return 4294895256;
    }
  }
  else
  {
    uint64_t v10 = 4294895253;
    APSLogErrorAt();
  }
  return v10;
}

void __APHIDClientCreate_block_invoke(uint64_t a1, const void *a2)
{
  uint64_t v3 = *(CFMutableArrayRef **)(a1 + 32);
  int v17 = 0;
  CFMutableStringRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    APSLogErrorAt();
LABEL_30:
    if (gLogCategory_APHIDClient <= 60 && (gLogCategory_APHIDClient != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    return;
  }
  CMTimeFlags v5 = Mutable;
  CFDictionarySetValue(Mutable, @"Category", @"Automotive");
  CFNumberGetTypeID();
  TypedCFNumberRef Value = (const void *)CFDictionaryGetTypedValue();
  if (TypedValue) {
    CFDictionarySetValue(v5, @"CountryCode", TypedValue);
  }
  CFDataGetTypeID();
  uint64_t v7 = (const void *)CFDictionaryGetTypedValue();
  CFDictionarySetValue(v5, @"ReportDescriptor", v7);
  CFStringGetTypeID();
  uint64_t v8 = (const void *)CFDictionaryGetTypedValue();
  CFDictionarySetValue(v5, @"SerialNumber", v8);
  CFStringGetTypeID();
  uint64_t v9 = (const void *)CFDictionaryGetTypedValue();
  if (v9) {
    CFDictionarySetValue(v5, @"Product", v9);
  }
  CFNumberGetTypeID();
  uint64_t v10 = (const void *)CFDictionaryGetTypedValue();
  if (v10) {
    CFDictionarySetValue(v5, @"ProductID", v10);
  }
  CFDictionarySetValue(v5, @"Transport", @"AirPlay");
  CFNumberGetTypeID();
  uint64_t v11 = (const void *)CFDictionaryGetTypedValue();
  if (v11) {
    CFDictionarySetValue(v5, @"VendorID", v11);
  }
  CFDictionarySetInt64();
  CFStringGetTypeID();
  uint64_t v12 = (const void *)CFDictionaryGetTypedValue();
  if (v12) {
    CFDictionarySetValue(v5, @"displayUUID", v12);
  }
  CFAllocatorRef v13 = (const void *)IOHIDUserDeviceCreate();
  if (v13)
  {
    CFDictionaryRef v14 = v13;
    CFDictionarySetValue(v3[3], v8, v13);
    CFNumberGetTypeID();
    uint64_t v15 = (const void *)CFDictionaryGetTypedValue();
    if (v15) {
      CFDictionarySetValue(v3[4], v8, v15);
    }
    else {
      CFDictionarySetInt64();
    }
    CFArrayAppendValue(v3[2], a2);
    if (gLogCategory_APHIDClient <= 40 && (gLogCategory_APHIDClient != -1 || _LogCategory_Initialize()))
    {
      CFDictionaryGetValue((CFDictionaryRef)a2, @"name");
      int v16 = gLogCategory_APHIDClient;
      if (gLogCategory_APHIDClient <= 20)
      {
        if (gLogCategory_APHIDClient != -1
          || (_LogCategory_Initialize(), int v16 = gLogCategory_APHIDClient, gLogCategory_APHIDClient <= 20))
        {
          if (v16 == -1) {
            _LogCategory_Initialize();
          }
        }
      }
      LogPrintF();
    }
    CFRelease(v14);
  }
  else
  {
    APSLogErrorAt();
    int v17 = -72041;
  }
  CFRelease(v5);
  if (v17) {
    goto LABEL_30;
  }
}

uint64_t APHIDClientCopyHIDs(uint64_t a1, uint64_t a2, void *a3)
{
  CFTypeRef v4 = *(CFTypeRef *)(a1 + 16);
  if (v4) {
    CFTypeRef v4 = CFRetain(v4);
  }
  *a3 = v4;
  return 0;
}

uint64_t APHIDClientHandleHIDReport(uint64_t a1)
{
  int v2 = gLogCategory_APHIDClient;
  if (gLogCategory_APHIDClient <= 20)
  {
    if (gLogCategory_APHIDClient == -1)
    {
      if (!_LogCategory_Initialize()) {
        goto LABEL_10;
      }
      int v2 = gLogCategory_APHIDClient;
    }
    if (v2 == -1) {
      _LogCategory_Initialize();
    }
    if (gLogCategory_APHIDClient == -1) {
      _LogCategory_Initialize();
    }
    LogPrintF();
  }
LABEL_10:
  CFDataGetTypeID();
  TypedCFNumberRef Value = (const __CFData *)CFDictionaryGetTypedValue();
  CFStringGetTypeID();
  CFTypeRef v4 = (const void *)CFDictionaryGetTypedValue();
  uint64_t v5 = mach_absolute_time();
  uint64_t v6 = v5;
  if (APHIDClientHandleHIDReport_lastLogTime
    && (float v7 = (float)(v5 - APHIDClientHandleHIDReport_lastLogTime),
        (float)(v7 / (float)(unint64_t)UpTicksPerSecond()) < 1.0))
  {
    int v8 = 0;
  }
  else
  {
    APHIDClientHandleHIDReport_lastLogTime = v6;
    int v8 = 1;
  }
  CFDictionaryGetInt64();
  unint64_t v9 = NTPtoUpTicks();
  uint64_t v10 = v9;
  if (v9 <= v6) {
    unint64_t v11 = v6 - v9;
  }
  else {
    unint64_t v11 = v9 - v6;
  }
  if (v11 <= UpTicksPerSecond())
  {
    uint64_t v6 = v10;
  }
  else if (gLogCategory_APHIDClient <= 50 {
         && (gLogCategory_APHIDClient != -1 || _LogCategory_Initialize()))
  }
  {
    LogPrintF();
  }
  CFNumberRef Value = (__IOHIDUserDevice *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), v4);
  if (Value)
  {
    CFAllocatorRef v13 = Value;
    BytePtr = CFDataGetBytePtr(TypedValue);
    CFIndex Length = CFDataGetLength(TypedValue);
    unsigned int v17 = IOHIDUserDeviceHandleReportWithTimeStamp(v13, v6, BytePtr, Length);
    if (!v17)
    {
      if (!v8
        || gLogCategory_APHIDClient > 50
        || gLogCategory_APHIDClient == -1 && !_LogCategory_Initialize())
      {
        return v17;
      }
LABEL_27:
      LogPrintF();
      return v17;
    }
    APSLogErrorAt();
  }
  else
  {
    APSLogErrorAt();
    unsigned int v17 = -72042;
  }
  if (gLogCategory_APHIDClient <= 50 && (gLogCategory_APHIDClient != -1 || _LogCategory_Initialize())) {
    goto LABEL_27;
  }
  return v17;
}

uint64_t APHIDClientCopyInputModeForUUID(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  unsigned int v6 = 0;
  CFNumberGetTypeID();
  TypedCFNumberRef Value = (const void *)CFDictionaryGetTypedValue();
  if (TypedValue)
  {
    *a3 = CFRetain(TypedValue);
  }
  else
  {
    APSLogErrorAt();
    return -72042;
  }
  return v6;
}

uint64_t APHIDClientSetInputModeForUUID(uint64_t a1, const void *a2, const void *a3)
{
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 32), a2))
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), a2, a3);
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294895254;
  }
}

void hidClient_Finalize(void *a1)
{
  if (gLogCategory_APHIDClient <= 30 && (gLogCategory_APHIDClient != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  int v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0;
  }
  uint64_t v3 = (const void *)a1[3];
  if (v3)
  {
    CFRelease(v3);
    a1[3] = 0;
  }
  CFTypeRef v4 = (const void *)a1[4];
  if (v4)
  {
    CFRelease(v4);
    a1[4] = 0;
  }
}

uint64_t APCarPlayBTPairingInfoHelperGetTypeID()
{
  if (APCarPlayBTPairingInfoHelperGetTypeID_initOnce != -1) {
    dispatch_once(&APCarPlayBTPairingInfoHelperGetTypeID_initOnce, &__block_literal_global_19);
  }
  return APCarPlayBTPairingInfoHelperGetTypeID_typeID;
}

uint64_t __APCarPlayBTPairingInfoHelperGetTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  APCarPlayBTPairingInfoHelperGetTypeID_typeID = result;
  return result;
}

void _APCarPlayBTPairingInfoHelperFinalize(uint64_t a1)
{
  int v2 = *(NSObject **)(a1 + 16);
  if (v2)
  {
    dispatch_release(v2);
    *(void *)(a1 + 16) = 0;
  }
}

uint64_t *APCarPlayBTPairingInfoHelperCreate()
{
  if (APCarPlayBTPairingInfoHelperGetTypeID_initOnce != -1) {
    dispatch_once(&APCarPlayBTPairingInfoHelperGetTypeID_initOnce, &__block_literal_global_19);
  }
  Instance = (uint64_t *)_CFRuntimeCreateInstance();
  CFBooleanRef v1 = Instance;
  if (!Instance)
  {
    APSLogErrorAt();
    goto LABEL_7;
  }
  Instance[2] = 0;
  Instance[3] = 0;
  int v2 = Instance + 2;
  Instance[4] = 0;
  dispatch_queue_t v3 = dispatch_queue_create("APCarPlayBTPairingInfoHelper", 0);
  *int v2 = (uint64_t)v3;
  if (!v3)
  {
LABEL_15:
    APSLogErrorAt();
    CFRelease(v1);
    CFBooleanRef v1 = 0;
    goto LABEL_7;
  }
  uint64_t v4 = FigCFWeakReferenceHolderCreateWithReferencedObject();
  if (!v4)
  {
    APSLogErrorAt();
    goto LABEL_15;
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkBTSessionAttachWithQueue[0])((uint64_t)"APCarPlayBTPairingInfoHelper", (uint64_t)&callbacks, v4, *v2);
LABEL_7:
  if (gLogCategory_APCarPlayBTPairingInfoHelper <= 30
    && (gLogCategory_APCarPlayBTPairingInfoHelper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v1;
}

uint64_t APCarPlayBTPairingInfoHelperIsPaired(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v13 = 0;
  CFDictionaryRef v14 = &v13;
  uint64_t v15 = 0x2000000000;
  int v16 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x2000000000;
  char v12 = 0;
  if (a1 && a2 && a3)
  {
    uint64_t v4 = *(NSObject **)(a1 + 16);
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 0x40000000;
    _OWORD v8[2] = __APCarPlayBTPairingInfoHelperIsPaired_block_invoke;
    v8[3] = &unk_1E6893768;
    v8[6] = a1;
    v8[7] = a2;
    v8[4] = &v9;
    v8[5] = &v13;
    dispatch_sync(v4, v8);
    uint64_t v5 = v14;
    uint64_t v6 = *((unsigned int *)v14 + 6);
    if (!v6)
    {
      *a3 = *((unsigned char *)v10 + 24);
      uint64_t v6 = *((unsigned int *)v5 + 6);
    }
  }
  else
  {
    APSLogErrorAt();
    uint64_t v6 = 4294960591;
    *((_DWORD *)v14 + 6) = -6705;
  }
  _Block_object_dispose(&v9, 8);
  _Block_object_dispose(&v13, 8);
  return v6;
}

void __APCarPlayBTPairingInfoHelperIsPaired_block_invoke(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (*(void *)(*(void *)(a1 + 48) + 32))
  {
    v17[1] = v17;
    unint64_t v19 = 0;
    uint64_t v2 = MEMORY[0x1F4188790]();
    memset(v16, 0, 512);
    int v3 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkBTLocalDeviceGetPairedDevices[0])(*(void *)(*(void *)(v2 + 48) + 32), (uint64_t)v16, (uint64_t)&v19, 256);
    if (v3)
    {
      int v15 = v3;
    }
    else
    {
      CFArrayRef v4 = *(const __CFArray **)(a1 + 56);
      if (!v4) {
        return;
      }
      CFIndex Count = CFArrayGetCount(v4);
      if (Count < 1) {
        return;
      }
      CFIndex v5 = 0;
      CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      while (1)
      {
        ValueAtunsigned int Index = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), v5);
        if (ValueAtIndex && v19 != 0) {
          break;
        }
        uint64_t v9 = *(void *)(a1 + 32);
LABEL_26:
        ++v5;
        if (*(unsigned char *)(*(void *)(v9 + 8) + 24)) {
          BOOL v14 = 1;
        }
        else {
          BOOL v14 = v5 == Count;
        }
        if (v14) {
          return;
        }
      }
      CFStringRef v10 = ValueAtIndex;
      uint64_t v11 = 0;
      while (1)
      {
        memset(v20, 0, 256);
        int v12 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTDeviceGetAddressString[0])(v16[v11], (uint64_t)v20, 256);
        if (v12) {
          break;
        }
        CFStringRef v13 = CFStringCreateWithCString(v6, v20, 0x8000100u);
        if (gLogCategory_APCarPlayBTPairingInfoHelper <= 50
          && (gLogCategory_APCarPlayBTPairingInfoHelper != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        if (CFStringCompare(v10, v13, 1uLL) == kCFCompareEqualTo)
        {
          *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
          if (gLogCategory_APCarPlayBTPairingInfoHelper <= 50
            && (gLogCategory_APCarPlayBTPairingInfoHelper != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
        }
        if (v13) {
          CFRelease(v13);
        }
        uint64_t v9 = *(void *)(a1 + 32);
        if (!*(unsigned char *)(*(void *)(v9 + 8) + 24) && ++v11 < v19) {
          continue;
        }
        goto LABEL_26;
      }
      int v15 = v12;
    }
    APSLogErrorAt();
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v15;
    if (gLogCategory_APCarPlayBTPairingInfoHelper <= 90
      && (gLogCategory_APCarPlayBTPairingInfoHelper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
}

uint64_t APCarPlayBTPairingInfoHelperDissociate(uint64_t a1)
{
  if (a1)
  {
    CFBooleanRef v1 = (void *)(a1 + 24);
    if (*(void *)(a1 + 24)) {
      ((void (*)(uint64_t))softLinkBTSessionDetachWithQueue[0])(a1 + 24);
    }
    uint64_t result = 0;
    void *v1 = 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
  return result;
}

uint64_t initBTSessionAttachWithQueue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (MobileBluetoothLibrary_sOnce != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_11);
  }
  int v8 = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib, "BTSessionAttachWithQueue");
  softLinkBTSessionAttachWithQueue[0] = v8;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v8)(a1, a2, a3, a4);
}

void *__MobileBluetoothLibrary_block_invoke()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/MobileBluetooth.framework/MobileBluetooth", 2);
  MobileBluetoothLibrary_sLib = (uint64_t)result;
  return result;
}

void BluetoothSessionEvent(uint64_t a1, int a2, int a3, const void *a4)
{
  uint64_t v8 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v8) {
    return;
  }
  uint64_t v9 = (const void *)v8;
  if ((a2 - 1) < 3)
  {
    *(void *)(v8 + 24) = 0;
    *(void *)(v8 + 32) = 0;
LABEL_4:
    if (a4) {
      CFRelease(a4);
    }
    goto LABEL_20;
  }
  if (!a2)
  {
    if (!a3)
    {
      if (*(void *)(v8 + 24) != a1)
      {
        *(void *)(v8 + 24) = a1;
        if (((unsigned int (*)(uint64_t, uint64_t))softLinkBTLocalDeviceGetDefault[0])(a1, v8 + 32))
        {
          if (gLogCategory_APCarPlayBTPairingInfoHelper <= 90
            && (gLogCategory_APCarPlayBTPairingInfoHelper != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
        }
      }
      goto LABEL_20;
    }
    if (gLogCategory_APCarPlayBTPairingInfoHelper <= 90
      && (gLogCategory_APCarPlayBTPairingInfoHelper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_4;
  }
LABEL_20:
  CFRelease(v9);
}

uint64_t initBTLocalDeviceGetDefault(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_11);
  }
  CFArrayRef v4 = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib, "BTLocalDeviceGetDefault");
  softLinkBTLocalDeviceGetDefault[0] = v4;
  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

uint64_t initBTLocalDeviceGetPairedDevices(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (MobileBluetoothLibrary_sOnce != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_11);
  }
  uint64_t v8 = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib, "BTLocalDeviceGetPairedDevices");
  softLinkBTLocalDeviceGetPairedDevices[0] = v8;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v8)(a1, a2, a3, a4);
}

uint64_t initBTDeviceGetAddressString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_11);
  }
  CFAllocatorRef v6 = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib, "BTDeviceGetAddressString");
  softLinkBTDeviceGetAddressString[0] = v6;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(a1, a2, a3);
}

uint64_t initBTSessionDetachWithQueue(uint64_t a1)
{
  if (MobileBluetoothLibrary_sOnce != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_11);
  }
  uint64_t v2 = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib, "BTSessionDetachWithQueue");
  softLinkBTSessionDetachWithQueue[0] = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

uint64_t APEndpointPlaybackSessionAirPlayCreate(uint64_t a1, const void *a2, const void *a3, const __CFDictionary *a4, void *a5)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  long long v27 = 0u;
  long long v28 = 0u;
  *(_OWORD *)label = 0u;
  long long v26 = 0u;
  if (!a2 || !a3)
  {
    APSLogErrorAt();
    return 4294950556;
  }
  FigEndpointPlaybackSessionGetClassID();
  uint64_t v10 = CMDerivedObjectCreate();
  if (v10)
  {
    uint64_t v23 = v10;
LABEL_30:
    APSLogErrorAt();
    return v23;
  }
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v12 = FigSimpleMutexCreate();
  DerivedStorage[6] = v12;
  if (!v12) {
    goto LABEL_28;
  }
  uint64_t v13 = FigSimpleMutexCreate();
  DerivedStorage[21] = v13;
  if (!v13) {
    goto LABEL_28;
  }
  DerivedStorage[19] = 1;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  DerivedStorage[20] = Mutable;
  if (!Mutable) {
    goto LABEL_28;
  }
  SNPrintF();
  dispatch_queue_t v15 = dispatch_queue_create(label, 0);
  DerivedStorage[15] = v15;
  if (!v15
    || (SNPrintF(), dispatch_queue_t v16 = dispatch_queue_create(label, 0), (DerivedStorage[22] = v16) == 0)
    || (SNPrintF(), dispatch_queue_t v17 = dispatch_queue_create(label, 0), (DerivedStorage[5] = v17) == 0))
  {
LABEL_28:
    APSLogErrorAt();
    return 4294950555;
  }
  if (a1) {
    uint64_t v18 = (__CFString *)a1;
  }
  else {
    uint64_t v18 = @"unnamed APEndpointPlaybackSessionAirPlay";
  }
  *uint64_t DerivedStorage = v18;
  CFRetain(v18);
  if (CFDictionaryContainsKey(a4, @"VolumeDB"))
  {
    CFNumberGetTypeID();
    TypedCFNumberRef Value = (const void *)CFDictionaryGetTypedValue();
    apPlayback_setPropertyInternal(0, @"VolumeDB", TypedValue);
  }
  DerivedStorage[2] = CFRetain(a2);
  DerivedStorage[4] = CFRetain(a3);
  if (CFDictionaryContainsKey(a4, @"MetadataSource"))
  {
    CFNumberRef Value = CFDictionaryGetValue(a4, @"MetadataSource");
    DerivedStorage[12] = CFRetain(Value);
  }
  if (CFDictionaryContainsKey(a4, @"NetworkClock"))
  {
    uint64_t v21 = CFDictionaryGetValue(a4, @"NetworkClock");
    DerivedStorage[3] = CFRetain(v21);
  }
  uint64_t v22 = APEndpointPlaybackSessionStatsCreate(@"AP", a1, (uint64_t)a4, DerivedStorage + 28);
  if (v22)
  {
    uint64_t v23 = v22;
    goto LABEL_30;
  }
  if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 30
    && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v23 = 0;
  *a5 = 0;
  return v23;
}

void apPlayback_setPropertyInternal(void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, @"VolumeDB"))
  {
    CFGetDouble();
    float v8 = v7;
    uint64_t v9 = CMBaseObjectGetDerivedStorage();
    if (*(float *)(v9 + 88) != v8)
    {
      uint64_t v10 = v9;
      *(float *)(v9 + 88) = v8;
      *(unsigned char *)(v9 + 92) = 1;
      if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 30
        && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (*(unsigned char *)(v10 + 72))
      {
        CFRetain(a1);
        dispatch_queue_t v15 = *(NSObject **)(v10 + 176);
        dispatch_async_f(v15, a1, (dispatch_function_t)apPlayback_processPendingAudioVolumeChanges);
      }
    }
  }
  else if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20B38]))
  {
    uint64_t v11 = *(const void **)(DerivedStorage + 80);
    *(void *)(DerivedStorage + 80) = a3;
    if (a3) {
      CFRetain(a3);
    }
    if (v11) {
      CFRelease(v11);
    }
    if (FigCFEqual()) {
      uint64_t v12 = @"moviePlayback";
    }
    else {
      uint64_t v12 = @"default";
    }
    apPlayback_SetProxiedProperty(a1, @"audioMode", 0, v12);
  }
  else if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20B48]))
  {
    int Value = CFBooleanGetValue((CFBooleanRef)a3);
    uint64_t v14 = *(void *)(DerivedStorage + 224);
    APEndpointPlaybackSessionSetIsParticipatingInCoordinatedPlayback(v14, Value);
  }
  else if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20B80]))
  {
    memset(&v18, 0, sizeof(v18));
    CMTimeMakeFromDictionary(&v18, (CFDictionaryRef)a3);
    dispatch_queue_t v16 = *(void **)(DerivedStorage + 224);
    CMTime v17 = v18;
    APEndpointPlaybackSessionSetVideoSyncTime(v16, (uint64_t)&v17);
  }
  else if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 30 {
         && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
  }
  {
    LogPrintF();
  }
}

uint64_t apPlayback_Invalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  APEndpointPlaybackSessionStatsUpdateAtInvalidate(*(void *)(DerivedStorage + 224));
  apPlayback_unsubscribeMetadataEvents();
  CMNotificationCenterGetDefaultLocalCenter();
  FigDispatchAsyncPostNotification();
  CFBooleanRef v1 = *(void **)(DerivedStorage + 8);
  if (v1)
  {

    *(void *)(DerivedStorage + 8) = 0;
  }
  return 0;
}

void apPlayback_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 50
    && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *(unsigned char *)(DerivedStorage + 72) = 0;
  *(unsigned char *)(DerivedStorage + 92) = 0;
  CFBooleanRef v1 = *(const void **)(DerivedStorage + 80);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 80) = 0;
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 96);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(DerivedStorage + 96) = 0;
  }
  int v3 = *(const void **)(DerivedStorage + 64);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 64) = 0;
  }
  CFArrayRef v4 = *(const void **)(DerivedStorage + 112);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DerivedStorage + 112) = 0;
  }
  CFIndex v5 = (void *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 30
    && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (v5[23])
  {
    CFAllocatorRef v6 = (const void *)v5[25];
    if (v6) {
      CFRetain(v6);
    }
    double v7 = (const void *)v5[2];
    if (v7) {
      CFRetain(v7);
    }
    v5[23] = 0;
    APSDispatchAsyncFHelper();
  }
  if (v5[24])
  {
    v5[24] = 0;
    v5[26] = 0;
    APSDispatchAsyncFHelper();
  }
  uint64_t v8 = *(void *)(DerivedStorage + 216);
  if (v8)
  {
    APLocalPlaybackServerDestroy(v8);
    *(void *)(DerivedStorage + 216) = 0;
  }
  *(void *)(DerivedStorage + 128) = 0;
  *(void *)(DerivedStorage + 136) = 0;
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  uint64_t v9 = *(const void **)(DerivedStorage + 16);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(DerivedStorage + 16) = 0;
  }
  uint64_t v10 = *(const void **)(DerivedStorage + 24);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(DerivedStorage + 24) = 0;
  }
  uint64_t v11 = *(const void **)(DerivedStorage + 32);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(DerivedStorage + 32) = 0;
  }
  uint64_t v12 = *(const void **)(DerivedStorage + 200);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(DerivedStorage + 200) = 0;
  }
  uint64_t v13 = *(const void **)(DerivedStorage + 144);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(DerivedStorage + 144) = 0;
  }
  uint64_t v14 = *(NSObject **)(DerivedStorage + 120);
  if (v14)
  {
    dispatch_release(v14);
    *(void *)(DerivedStorage + 120) = 0;
  }
  FigSimpleMutexDestroy();
  dispatch_queue_t v15 = *(const void **)(DerivedStorage + 160);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(DerivedStorage + 160) = 0;
  }
  dispatch_queue_t v16 = *(NSObject **)(DerivedStorage + 176);
  if (v16)
  {
    dispatch_release(v16);
    *(void *)(DerivedStorage + 176) = 0;
  }
  CMTime v17 = *(NSObject **)(DerivedStorage + 40);
  if (v17)
  {
    dispatch_release(v17);
    *(void *)(DerivedStorage + 40) = 0;
  }
  FigSimpleMutexDestroy();
  APEndpointPlaybackSessionStatsDestroy((uint64_t *)(DerivedStorage + 224));
}

CFStringRef apPlayback_CopyDebugDesc()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  return CFStringCreateWithFormat(0, 0, @"<APEndpointPlaybackSessionAirPlay '%@'>", *DerivedStorage);
}

uint64_t apPlayback_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, CFDictionaryRef *a4)
{
  unsigned int v13 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20B58])) {
    goto LABEL_2;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20B78]) || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20B70]))
  {
LABEL_5:
    double v7 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    goto LABEL_6;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20B60]))
  {
    if (!*(void *)(DerivedStorage + 32) || !APSGetFBOPropertyInt64())
    {
LABEL_2:
      double v7 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20B68])) {
    goto LABEL_5;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20B50]))
  {
    if (*(void *)(DerivedStorage + 32))
    {
      BOOL v9 = APSGetFBOPropertyInt64() <= 2413299;
      double v7 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
      char v10 = !v9;
      if ((v10 & 1) == 0) {
        double v7 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
      }
      goto LABEL_6;
    }
    goto LABEL_2;
  }
  if (CFEqual(a2, @"Activated"))
  {
    double v7 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    int v11 = *(unsigned __int8 *)(DerivedStorage + 56);
  }
  else if (CFEqual(a2, @"IsPlaying"))
  {
    double v7 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    int v11 = *(unsigned __int8 *)(DerivedStorage + 57);
  }
  else
  {
    if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20B40]))
    {
      if (CFEqual(a2, @"RTCStats"))
      {
        APEndpointPlaybackSessionCopyRTCStats(*(void *)(DerivedStorage + 224), a4);
        if (*a4) {
          return v13;
        }
        APSLogErrorAt();
        return -16741;
      }
      else
      {
        return -12787;
      }
    }
    double v7 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    int v11 = *(unsigned __int8 *)(DerivedStorage + 72);
  }
  if (!v11) {
    double v7 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
  }
LABEL_6:
  *a4 = (CFDictionaryRef)CFRetain(*v7);
  return v13;
}

uint64_t apPlayback_SetProperty(void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 30
    && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 48));
  apPlayback_setPropertyInternal(a1, a2, a3);
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 48));
  return 0;
}

void apPlayback_unsubscribeMetadataEvents()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1D25EB370](DerivedStorage[6]);
  if (DerivedStorage[12] && DerivedStorage[13])
  {
    if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 30
      && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    APMetadataSourceRemoveEventCallback(DerivedStorage[12], DerivedStorage[13]);
    DerivedStorage[13] = 0;
  }
  JUMPOUT(0x1D25EB390);
}

void apPlayback_teardownTransportStream(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  CFIndex v5 = *(void (**)(uint64_t, uint64_t, void, void))(v4 + 56);
  if (v5) {
    v5(v2, 1937010544, 0, 0);
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    double v7 = *(const void **)a1;
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v9 = v8 ? v8 : 0;
    char v10 = *(void (**)(uint64_t, uint64_t, const void *))(v9 + 48);
    if (v10) {
      v10(v6, 120, v7);
    }
  }
  uint64_t CMBaseObject = FigTransportStreamGetCMBaseObject();
  if (CMBaseObject)
  {
    uint64_t v12 = CMBaseObject;
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v14 = v13 ? v13 : 0;
    dispatch_queue_t v15 = *(void (**)(uint64_t))(v14 + 24);
    if (v15) {
      v15(v12);
    }
  }
  CFRelease(*(CFTypeRef *)(a1 + 16));
  dispatch_queue_t v16 = *(const void **)(a1 + 8);
  if (v16) {
    CFRelease(v16);
  }
  CMTime v17 = *(const void **)a1;
  if (*(void *)a1)
  {
    CFRelease(v17);
  }
}

void apPlayback_invalidateTransportEventStream(const void **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  CFIndex v5 = *(void (**)(const void *, void, void, void))(v4 + 24);
  if (v5) {
    v5(v2, 0, 0, 0);
  }
  uint64_t CMBaseObject = FigTransportStreamGetCMBaseObject();
  if (CMBaseObject)
  {
    uint64_t v7 = CMBaseObject;
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v9 = v8 ? v8 : 0;
    char v10 = *(void (**)(uint64_t))(v9 + 24);
    if (v10) {
      v10(v7);
    }
  }
  int v11 = a1[1];
  if (v11) {
    CFRelease(v11);
  }
  uint64_t v12 = *a1;
  CFRelease(v12);
}

uint64_t apPlayback_AuthorizeItem(const void *a1, const void *a2, const void *a3)
{
  if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 30
    && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRetain(a1);
  if (a2) {
    CFRetain(a2);
  }
  if (a3) {
    CFRetain(a3);
  }
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t apPlayback_Play(const void *a1, const __CFDictionary *a2)
{
  v6[9] = *(CFMutableDictionaryRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6[0] = 0;
  if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 50
    && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F20A88]);
    CFDictionaryContainsKey(a2, (const void *)*MEMORY[0x1E4F209E8]);
    LogPrintF();
  }
  if (!*(void *)(DerivedStorage + 8))
  {
    SNPrintF();
    *(void *)(DerivedStorage + 8) = os_transaction_create();
  }
  APEndpointPlaybackSessionStatsUpdateAtPlay(*(void *)(DerivedStorage + 224), a2);
  CFRetain(a1);
  APEndpointPlaybackSessionCreatePlayParamsWithTimesInSeconds(a2, v6);
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t apPlayback_InsertPlayQueueItem(const void *a1, const __CFDictionary *a2, const __CFDictionary *a3)
{
  CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef v8 = 0;
  if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 50
    && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    uint64_t v6 = (const void *)*MEMORY[0x1E4F20A88];
    CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F20A88]);
    CFDictionaryContainsKey(a2, (const void *)*MEMORY[0x1E4F209E8]);
    if (a3) {
      CFDictionaryGetValue(a3, v6);
    }
    LogPrintF();
  }
  APEndpointPlaybackSessionCreatePlayParamsWithTimesInSeconds(a2, &v8);
  if (a1) {
    CFRetain(a1);
  }
  if (a3) {
    CFRetain(a3);
  }
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t apPlayback_RemovePlayQueueItem(const void *a1, const __CFDictionary *a2)
{
  if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 50
    && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F20A88]);
    LogPrintF();
  }
  if (a1) {
    CFRetain(a1);
  }
  if (a2) {
    CFRetain(a2);
  }
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t apPlayback_Stop(const void *a1)
{
  if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 50
    && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRetain(a1);
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t apPlayback_GetPlaybackInfo(const void *a1)
{
  if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 30
    && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRetain(a1);
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t apPlayback_SeekToTime(const void *a1, CMTime *a2, const void *a3, uint64_t a4, uint64_t a5)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v12 = a1;
  long long v13 = *(_OWORD *)&a2->value;
  CMTimeEpoch epoch = a2->epoch;
  dispatch_queue_t v15 = a3;
  uint64_t v16 = a4;
  uint64_t v17 = a5;
  if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 50
    && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    CMTime time = *a2;
    CMTimeGetSeconds(&time);
    LogPrintF();
  }
  CFRetain(a1);
  if (a3) {
    CFRetain(a3);
  }
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t apPlayback_SeekToDate(const void *a1, const void *a2)
{
  if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 30
    && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRetain(a1);
  if (a2) {
    CFRetain(a2);
  }
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t apPlayback_SetRate(const void *a1, const void *a2)
{
  if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 50
    && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRetain(a1);
  if (a2) {
    CFRetain(a2);
  }
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t apPlayback_GetProxiedProperty(const void *a1, const void *a2, const void *a3)
{
  if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 30
    && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRetain(a1);
  if (a2) {
    CFRetain(a2);
  }
  if (a3) {
    CFRetain(a3);
  }
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t apPlayback_SetProxiedProperty(const void *a1, const void *a2, const void *a3, const void *a4)
{
  if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 30
    && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRetain(a1);
  if (a2) {
    CFRetain(a2);
  }
  if (a3) {
    CFRetain(a3);
  }
  if (a4) {
    CFRetain(a4);
  }
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t apPlayback_PerformRemoteAction(const void *a1, const void *a2, const void *a3)
{
  if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 30
    && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRetain(a1);
  if (a2) {
    CFRetain(a2);
  }
  if (a3) {
    CFRetain(a3);
  }
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t apPlayback_SetEventHandler(const void *a1, uint64_t a2, uint64_t a3, const void *a4)
{
  if (a1) {
    CFRetain(a1);
  }
  if (a4) {
    CFRetain(a4);
  }
  APSDispatchAsyncFHelper();
  return 0;
}

void apPlayback_authorizeItemInternal(uint64_t a1)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v2 = apPlayback_ensureTransportStreamsCreated();
  if (v2)
  {
    uint64_t v7 = v2;
  }
  else
  {
    CFDataGetBytePtr(*(CFDataRef *)(a1 + 8));
    CFDataGetLength(*(CFDataRef *)(a1 + 8));
    uint64_t v3 = Base64EncodeCopyEx();
    if (!v3)
    {
      ASPrintF();
      APSLogErrorAt();
      uint64_t v7 = 4294950555;
      goto LABEL_4;
    }
    uint64_t v7 = v3;
  }
  APSLogErrorAt();
LABEL_4:
  uint64_t v4 = *(void (**)(void, void, uint64_t, void))(a1 + 24);
  if (v4) {
    v4(0, 0, v7, *(void *)(a1 + 32));
  }
  free(0);
  free(0);
  CFRelease(*(CFTypeRef *)a1);
  CFIndex v5 = *(const void **)(a1 + 8);
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = *(const void **)(a1 + 16);
  if (v6) {
    CFRelease(v6);
  }
}

uint64_t apPlayback_ensureTransportStreamsCreated()
{
  unsigned int v44 = 0;
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  CFBooleanRef v1 = DerivedStorage + 23;
  if (DerivedStorage[23]) {
    return v44;
  }
  uint64_t v2 = DerivedStorage;
  uint64_t v3 = DerivedStorage + 24;
  if (DerivedStorage[24]) {
    goto LABEL_12;
  }
  uint64_t v4 = DerivedStorage[2];
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *, void, void))(v6 + 40);
  if (!v7)
  {
    unsigned int v44 = -12782;
LABEL_11:
    APSLogErrorAt();
LABEL_12:
    CFMutableDictionaryRef Mutable = 0;
LABEL_26:
    CFMutableDictionaryRef v15 = 0;
    goto LABEL_27;
  }
  unsigned int v44 = v7(v4, 120, 0, &cf, 0, 0);
  if (v44) {
    goto LABEL_11;
  }
  CFTypeRef v8 = cf ? CFRetain(cf) : 0;
  v2[25] = v8;
  CFDictionaryGetInt64();
  if (v44) {
    goto LABEL_11;
  }
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    APSLogErrorAt();
    CFMutableDictionaryRef v15 = 0;
LABEL_70:
    unsigned int v44 = -16741;
    goto LABEL_27;
  }
  CFDictionarySetInt64();
  CFDictionarySetInt64();
  uint64_t v11 = v2[2];
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(uint64_t (**)(uint64_t, CFMutableDictionaryRef, uint64_t *))(v13 + 56);
  if (!v14)
  {
    unsigned int v44 = -12782;
    goto LABEL_25;
  }
  unsigned int v44 = v14(v11, Mutable, v1);
  if (v44)
  {
LABEL_25:
    APSLogErrorAt();
    goto LABEL_26;
  }
  CFMutableDictionaryRef v15 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v15)
  {
    APSLogErrorAt();
    goto LABEL_70;
  }
  CFDictionarySetInt64();
  CFDictionarySetInt64();
  uint64_t v16 = v2[2];
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  CMTimeScale v20 = *(uint64_t (**)(uint64_t, CFMutableDictionaryRef, uint64_t *))(v18 + 56);
  if (!v20)
  {
    unsigned int v44 = -12782;
    goto LABEL_48;
  }
  unsigned int v44 = v20(v16, v15, v3);
  if (v44)
  {
LABEL_48:
    APSLogErrorAt();
    goto LABEL_27;
  }
  uint64_t v21 = FigCFWeakReferenceHolderCreateWithReferencedObject();
  v2[26] = v21;
  if (v21)
  {
    uint64_t v22 = v21;
    uint64_t v23 = *v3;
    uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v24) {
      uint64_t v25 = v24;
    }
    else {
      uint64_t v25 = 0;
    }
    long long v26 = *(uint64_t (**)(uint64_t, void, uint64_t (*)(uint64_t, int, uint64_t, uint64_t, void *), uint64_t))(v25 + 24);
    if (v26)
    {
      unsigned int v44 = v26(v23, 0, apPlayback_handleMessageCreatingReply, v22);
      if (!v44)
      {
        uint64_t v27 = *v1;
        uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v28) {
          uint64_t v29 = v28;
        }
        else {
          uint64_t v29 = 0;
        }
        uint64_t v30 = *(void (**)(uint64_t))(v29 + 8);
        if (v30) {
          v30(v27);
        }
        uint64_t v31 = *v3;
        uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v32) {
          uint64_t v33 = v32;
        }
        else {
          uint64_t v33 = 0;
        }
        uint64_t v34 = *(void (**)(uint64_t))(v33 + 8);
        if (v34) {
          v34(v31);
        }
        uint64_t v35 = *v1;
        uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v36) {
          uint64_t v37 = v36;
        }
        else {
          uint64_t v37 = 0;
        }
        long long v38 = *(void (**)(uint64_t))(v37 + 16);
        if (v38) {
          v38(v35);
        }
        uint64_t v39 = *v3;
        uint64_t v40 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v40) {
          uint64_t v41 = v40;
        }
        else {
          uint64_t v41 = 0;
        }
        uint64_t v42 = *(void (**)(uint64_t))(v41 + 16);
        if (v42) {
          v42(v39);
        }
        goto LABEL_27;
      }
    }
    else
    {
      unsigned int v44 = -12782;
    }
    goto LABEL_48;
  }
LABEL_27:
  if (cf) {
    CFRelease(cf);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v15) {
    CFRelease(v15);
  }
  return v44;
}

uint64_t apPlayback_sendSpecialMessageCreatingReply(uint64_t a1, uint64_t a2, __CFDictionary *a3, const void *a4, uint64_t a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3)
  {
    APSLogErrorAt();
    return 4294950556;
  }
  uint64_t v10 = DerivedStorage;
  if (a4) {
    CFDictionarySetValue(a3, (const void *)*MEMORY[0x1E4F4A218], a4);
  }
  CFDataRef Data = CFPropertyListCreateData((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a3, kCFPropertyListBinaryFormat_v1_0, 0, 0);
  if (!Data)
  {
    APSLogErrorAt();
    return 4294950555;
  }
  CFDataRef v12 = Data;
  uint64_t BlockBufferWithCFDataNoCopy = FigCreateBlockBufferWithCFDataNoCopy();
  if (BlockBufferWithCFDataNoCopy)
  {
    uint64_t v18 = BlockBufferWithCFDataNoCopy;
    goto LABEL_13;
  }
  uint64_t v14 = *(void *)(v10 + 184);
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v16 + 56);
  if (!v17)
  {
    uint64_t v18 = 4294954514;
LABEL_13:
    APSLogErrorAt();
    goto LABEL_14;
  }
  uint64_t v18 = v17(v14, a2, 0, a5);
  if (v18) {
    goto LABEL_13;
  }
LABEL_14:
  CFRelease(v12);
  return v18;
}

uint64_t apPlayback_handleMessageCreatingReply(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v20 = 0;
  uint64_t v21 = &v20;
  uint64_t v22 = 0x2020000000;
  int v23 = 0;
  CFDataRef data = 0;
  uint64_t v7 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v7) {
    goto LABEL_15;
  }
  if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 50
    && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 != 1702260340) {
    goto LABEL_18;
  }
  uint64_t v9 = DerivedStorage;
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  int CFDataWithBlockBufferNoCopy = FigCreateCFDataWithBlockBufferNoCopy();
  *((_DWORD *)v21 + 6) = CFDataWithBlockBufferNoCopy;
  if (CFDataWithBlockBufferNoCopy)
  {
    APSLogErrorAt();
    uint64_t v13 = 0;
    goto LABEL_11;
  }
  CFPropertyListRef v12 = CFPropertyListCreateWithData(v10, data, 0, 0, 0);
  uint64_t v13 = v12;
  if (!v12)
  {
LABEL_18:
    APSLogErrorAt();
    uint64_t v13 = 0;
LABEL_20:
    *((_DWORD *)v21 + 6) = -16740;
    goto LABEL_11;
  }
  CFTypeID v14 = CFGetTypeID(v12);
  if (v14 != CFDictionaryGetTypeID())
  {
    APSLogErrorAt();
    goto LABEL_20;
  }
  uint64_t v15 = *(NSObject **)(v9 + 120);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __apPlayback_handleMessageCreatingReply_block_invoke;
  block[3] = &unk_1E6893828;
  block[4] = &v20;
  void block[5] = v7;
  block[6] = v13;
  block[7] = v9;
  dispatch_sync(v15, block);
  *a5 = 0;
LABEL_11:
  CFRelease(v7);
  if (data) {
    CFRelease(data);
  }
  if (v13) {
    CFRelease(v13);
  }
LABEL_15:
  uint64_t v16 = *((unsigned int *)v21 + 6);
  _Block_object_dispose(&v20, 8);
  return v16;
}

void sub_1D0A1C5FC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void __apPlayback_handleMessageCreatingReply_block_invoke(void *a1)
{
  uint64_t v3 = a1[5];
  CFDictionaryRef v2 = (const __CFDictionary *)a1[6];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTimeValue value = 0;
  uint64_t v5 = &unk_1EA628000;
  if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 30
    && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFStringGetTypeID();
  Typedint Value = (const void *)CFDictionaryGetTypedValue();
  if (TypedValue)
  {
    MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 48));
    apPlayback_handlePlaybackStateChanged(v3, TypedValue);
    MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 48));
  }
  int v7 = CFDictionaryContainsKey(v2, @"messageID");
  CFTypeRef v8 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (v7)
  {
    unsigned int v39 = 0;
    uint64_t v37 = DerivedStorage;
    if (!v2) {
      goto LABEL_84;
    }
    uint64_t v9 = CFDictionaryGetValue(v2, @"messageID");
    if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 50
      && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (!v9) {
      goto LABEL_49;
    }
    if (!CFDictionaryGetValue(v2, @"type"))
    {
LABEL_84:
      APSLogErrorAt();
      goto LABEL_49;
    }
    if (!FigCFEqual())
    {
LABEL_49:
      uint64_t DerivedStorage = v37;
      goto LABEL_50;
    }
    if (CFDictionaryGetValue(v2, @"error"))
    {
      FigCFDictionaryGetInt32IfPresent();
      uint64_t v10 = v39;
    }
    else
    {
      uint64_t v10 = 0;
    }
    uint64_t v11 = CMBaseObjectGetDerivedStorage();
    if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 30
      && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CFAllocatorRef v12 = *v8;
    CFMutableArrayRef Mutable = CFArrayCreateMutable(*v8, 0, MEMORY[0x1E4F1D510]);
    if (!Mutable)
    {
      APSLogErrorAt();
      uint64_t v5 = (_DWORD *)&unk_1EA628000;
      goto LABEL_49;
    }
    CFTypeID v14 = Mutable;
    MEMORY[0x1D25EB370](*(void *)(v11 + 168));
    if (CFDictionaryContainsKey(*(CFDictionaryRef *)(v11 + 160), v9))
    {
      uint64_t v15 = CFDictionaryGetValue(*(CFDictionaryRef *)(v11 + 160), v9);
      CFArrayAppendValue(v14, v15);
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v11 + 160), v9);
    }
    if (CFDictionaryGetCount(*(CFDictionaryRef *)(v11 + 160)) < 1)
    {
      MEMORY[0x1D25EB390](*(void *)(v11 + 168));
      uint64_t v5 = (_DWORD *)&unk_1EA628000;
      if (apPlayback_sendResultsSeekToTimeRequests(v14, v10, (uint64_t)v2))
      {
        CFMutableArrayRef v17 = 0;
        goto LABEL_92;
      }
LABEL_36:
      uint64_t v24 = v14;
LABEL_48:
      CFRelease(v24);
      goto LABEL_49;
    }
    uint64_t v35 = v10;
    uint64_t v36 = v14;
    uint64_t v16 = CMBaseObjectGetDerivedStorage();
    CFMutableArrayRef v17 = CFArrayCreateMutable(v12, 0, MEMORY[0x1E4F1D510]);
    if (v17)
    {
      int64_t Count = CFDictionaryGetCount(*(CFDictionaryRef *)(v16 + 160));
      unint64_t v19 = (const void **)malloc_type_calloc(Count, 8uLL, 0x80040B8603338uLL);
      if (!v19)
      {
        APSLogErrorAt();
        CFRelease(v17);
        MEMORY[0x1D25EB390](*(void *)(v11 + 168));
        CFTypeRef v8 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
LABEL_90:
        APSLogErrorAt();
        uint64_t v5 = (_DWORD *)&unk_1EA628000;
        CFTypeID v14 = v36;
        goto LABEL_36;
      }
      uint64_t v20 = v19;
      CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(v16 + 160), v19, 0);
      if (Count >= 1)
      {
        for (uint64_t i = 0; i != Count; ++i)
        {
          uint64_t v22 = v20[i];
          if (CFNumberCompare((CFNumberRef)v22, (CFNumberRef)v9, 0) == kCFCompareLessThan)
          {
            int v23 = CFDictionaryGetValue(*(CFDictionaryRef *)(v16 + 160), v22);
            CFArrayAppendValue(v17, v23);
            CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v16 + 160), v22);
          }
        }
      }
    }
    else
    {
      APSLogErrorAt();
      uint64_t v20 = 0;
    }
    free(v20);
    MEMORY[0x1D25EB390](*(void *)(v11 + 168));
    CFTypeRef v8 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
    if (v17)
    {
      CFTypeID v14 = v36;
      uint64_t v5 = &unk_1EA628000;
      if (!apPlayback_sendResultsSeekToTimeRequests(v36, v35, (uint64_t)v2))
      {
        if (CFArrayGetCount(v17) >= 1)
        {
          if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 30
            && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
          {
            CFArrayGetCount(v17);
            LogPrintF();
          }
          if (apPlayback_sendResultsSeekToTimeRequests(v17, 4294960574, (uint64_t)v2)) {
            APSLogErrorAt();
          }
        }
        CFRelease(v36);
LABEL_47:
        uint64_t v24 = v17;
        goto LABEL_48;
      }
LABEL_92:
      APSLogErrorAt();
      CFRelease(v14);
      if (!v17) {
        goto LABEL_49;
      }
      goto LABEL_47;
    }
    goto LABEL_90;
  }
LABEL_50:
  CFDictionaryGetValue(v2, (const void *)*MEMORY[0x1E4F20840]);
  if (FigCFDictionaryGetInt32IfPresent()) {
    APEndpointPlaybackSessionStatsSetLastError(*(void **)(DerivedStorage + 224));
  }
  CFStringGetTypeID();
  CFDictionaryGetTypedValue();
  if (FigCFEqual())
  {
    int v25 = v5[742];
    if (v25 > 30)
    {
      uint64_t v26 = 5;
      goto LABEL_66;
    }
    if (v25 == -1)
    {
      uint64_t v26 = 5;
      if (!_LogCategory_Initialize()) {
        goto LABEL_66;
      }
    }
    else
    {
      uint64_t v26 = 5;
    }
  }
  else
  {
    if (!FigCFEqual()) {
      goto LABEL_67;
    }
    int v27 = v5[742];
    if (v27 > 30)
    {
      uint64_t v26 = 4;
      goto LABEL_66;
    }
    if (v27 == -1)
    {
      uint64_t v26 = 4;
      if (!_LogCategory_Initialize()) {
        goto LABEL_66;
      }
    }
    else
    {
      uint64_t v26 = 4;
    }
  }
  LogPrintF();
LABEL_66:
  ((void (*)(uint64_t, uint64_t))softLinkMRMediaRemoteSendCommand[0])(v26, 0);
LABEL_67:
  if (!FigCFEqual())
  {
    uint64_t v29 = (void *)CFRetain(v2);
    goto LABEL_73;
  }
  CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(*v8, 0, v2);
  uint64_t v29 = MutableCopy;
  if (!MutableCopy)
  {
    APSLogErrorAt();
    int PlayPlaybackInfoTimesInCMTime = -16741;
    goto LABEL_74;
  }
  uint64_t v30 = (const void *)*MEMORY[0x1E4F207B8];
  CFDictionaryRef v31 = (const __CFDictionary *)CFDictionaryGetValue(MutableCopy, (const void *)*MEMORY[0x1E4F207B8]);
  if (!v31)
  {
LABEL_73:
    int PlayPlaybackInfoTimesInCMTime = 0;
    goto LABEL_74;
  }
  int PlayPlaybackInfoTimesInCMTime = APEndpointPlaybackSessionCreatePlayPlaybackInfoTimesInCMTime(v31, (__CFDictionary **)&value);
  if (PlayPlaybackInfoTimesInCMTime)
  {
    APSLogErrorAt();
    CFRelease(v29);
    uint64_t v29 = 0;
  }
  else
  {
    CFDictionarySetValue((CFMutableDictionaryRef)v29, v30, value);
  }
LABEL_74:
  if (value) {
    CFRelease(value);
  }
  *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = PlayPlaybackInfoTimesInCMTime;
  if (*(_DWORD *)(*(void *)(a1[4] + 8) + 24))
  {
    APSLogErrorAt();
    if (v29) {
LABEL_80:
    }
      CFRelease(v29);
  }
  else
  {
    uint64_t v33 = (void *)a1[7];
    uint64_t v34 = (void (*)(void, void *, void, void))v33[16];
    if (v34) {
      v34(a1[5], v29, v33[17], v33[18]);
    }
    if (v29) {
      goto LABEL_80;
    }
  }
}

void apPlayback_handlePlaybackStateChanged(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v5 = CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20C58]);
  uint64_t v6 = CMBaseObjectGetDerivedStorage();
  int v7 = *(const void **)(v6 + 112);
  if (v5)
  {
    if (v7)
    {
      if (gLogCategory_APEndpointPlaybackSessionAirPlay > 30
        || gLogCategory_APEndpointPlaybackSessionAirPlay == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_19;
      }
      goto LABEL_13;
    }
    uint64_t v8 = APSPowerAssertionCreate();
    *(void *)(v6 + 112) = v8;
    if (v8)
    {
      APSPowerAssertionRaiseTemporary();
      if (gLogCategory_APEndpointPlaybackSessionAirPlay > 30
        || gLogCategory_APEndpointPlaybackSessionAirPlay == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_19;
      }
LABEL_13:
      LogPrintF();
      goto LABEL_19;
    }
    APSLogErrorAt();
  }
  else if (v7)
  {
    if (gLogCategory_APEndpointPlaybackSessionAirPlay > 30) {
      goto LABEL_18;
    }
    if (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()) {
      LogPrintF();
    }
    int v7 = *(const void **)(v6 + 112);
    if (v7)
    {
LABEL_18:
      CFRelease(v7);
      *(void *)(v6 + 112) = 0;
    }
  }
LABEL_19:
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20C50])) {
    int v9 = 1;
  }
  else {
    int v9 = CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20C60]) != 0;
  }
  if (*(unsigned __int8 *)(DerivedStorage + 57) != v9)
  {
    APEndpointPlaybackSessionUpdateNowPlayingTransaction(a1, v9, &gLogCategory_APEndpointPlaybackSessionAirPlay, (const void **)(DerivedStorage + 64));
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v11 = Mutable;
    CFAllocatorRef v12 = (const void **)MEMORY[0x1E4F1CFC8];
    if (v9) {
      CFAllocatorRef v12 = (const void **)MEMORY[0x1E4F1CFD0];
    }
    CFDictionarySetValue(Mutable, @"Playing", *v12);
    *(unsigned char *)(DerivedStorage + 57) = v9;
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    CFRelease(v11);
  }
}

uint64_t apPlayback_sendResultsSeekToTimeRequests(const __CFArray *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    if (CFArrayGetCount(a1) < 1) {
      return 0;
    }
    CFIndex v6 = 0;
    while (1)
    {
      ValueAtunsigned int Index = (const __CFData *)CFArrayGetValueAtIndex(a1, v6);
      BytePtr = CFDataGetBytePtr(ValueAtIndex);
      if (!BytePtr || !*(void *)BytePtr) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t, void))BytePtr)(a3, a2, *((void *)BytePtr + 1));
      if (++v6 >= CFArrayGetCount(a1)) {
        return 0;
      }
    }
  }
  APSLogErrorAt();
  return 4294950556;
}

uint64_t initMRMediaRemoteSendCommand(uint64_t a1, uint64_t a2)
{
  if (MediaRemoteLibrary_sOnce_0 != -1) {
    dispatch_once(&MediaRemoteLibrary_sOnce_0, &__block_literal_global_20);
  }
  uint64_t v4 = (uint64_t (*)())dlsym((void *)MediaRemoteLibrary_sLib_0, "MRMediaRemoteSendCommand");
  softLinkMRMediaRemoteSendCommand[0] = v4;
  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

void *__MediaRemoteLibrary_block_invoke_0()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote", 2);
  MediaRemoteLibrary_sLib_0 = (uint64_t)result;
  return result;
}

void apPlayback_playInternal(uint64_t *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t Int64 = CFDictionaryGetInt64();
  unsigned int v29 = apPlayback_ensureTransportStreamsCreated();
  if (!v29)
  {
    MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 48));
    *(unsigned char *)(DerivedStorage + 72) = Int64 != 0;
    uint64_t v28 = Int64;
    if (FigCFEqual())
    {
      uint64_t v4 = @"default";
    }
    else
    {
      int v5 = FigCFEqual();
      uint64_t v4 = @"moviePlayback";
      if (!v5) {
        uint64_t v4 = 0;
      }
    }
    int v27 = v4;
    MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 48));
    CFIndex v6 = (const void *)*MEMORY[0x1E4F209E8];
    CFStringGetTypeID();
    Typedint Value = CFDictionaryGetTypedValue();
    uint64_t v8 = *a1;
    CFDictionaryRef v9 = (const __CFDictionary *)a1[1];
    if (TypedValue)
    {
      CFStringRef v10 = (const __CFString *)TypedValue;
      uint64_t v11 = CMBaseObjectGetDerivedStorage();
      CFTypeRef cf = 0;
      CMTimeValue value = 0;
      unsigned int MediaTypeFromPlayParams = APEndpointPlaybackSessionGetMediaTypeFromPlayParams(v9);
      BOOL v12 = CFDictionaryGetInt64() != 0;
      if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 30
        && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      int v32 = apPlayback_ensureLocalPlaybackServerCreated();
      if (v32
        || (CFStringGetTypeID(),
            CFStringRef v16 = (const __CFString *)CFDictionaryGetTypedValue(),
            (int v32 = APLocalPlaybackServerRegisterPathCreatingHostAndURL(*(void *)(v11 + 216), v10, v16, (CFTypeRef *)&value, (CFStringRef *)&cf)) != 0))
      {
        APSLogErrorAt();
        CFDictionaryRef MutableCopy = 0;
        uint64_t v18 = v28;
        uint64_t v15 = (_DWORD *)&unk_1EA628000;
      }
      else
      {
        uint64_t v15 = &unk_1EA628000;
        if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 30
          && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v9);
        if (MutableCopy)
        {
          apPlayback_appendCommonPlayParamsToMessage(v8, v12, MediaTypeFromPlayParams, v27, MutableCopy);
          int v32 = 0;
          CFDictionarySetValue(MutableCopy, @"host", value);
          CFDictionarySetValue(MutableCopy, v6, cf);
          if (apPlayback_isTLSEnabled()) {
            CFDictionarySetValue(MutableCopy, @"tlsPSKEnabled", (const void *)*MEMORY[0x1E4F1CFD0]);
          }
          int v32 = apPlayback_sendPlistMessageCreatingReply(v8, 1886151033, MutableCopy, 0);
          if (v32) {
            APSLogErrorAt();
          }
        }
        else
        {
          APSLogErrorAt();
          int v32 = -16741;
        }
        uint64_t v18 = v28;
      }
      if (cf) {
        CFRelease(cf);
      }
      if (value) {
        CFRelease(value);
      }
      if (MutableCopy) {
        CFRelease(MutableCopy);
      }
      unsigned int v29 = v32;
      if (v32) {
        goto LABEL_59;
      }
    }
    else
    {
      LODWORD(value) = 0;
      CMBaseObjectGetDerivedStorage();
      uint64_t v13 = APEndpointPlaybackSessionGetMediaTypeFromPlayParams(v9);
      uint64_t v14 = CFDictionaryGetInt64();
      CFStringGetTypeID();
      CFDictionaryGetTypedValue();
      uint64_t v15 = &unk_1EA628000;
      if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 30
        && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      unint64_t v19 = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v9);
      if (!v19)
      {
        APSLogErrorAt();
        unsigned int v29 = -16741;
LABEL_59:
        APSLogErrorAt();
        goto LABEL_48;
      }
      CFDataRef v20 = v19;
      apPlayback_appendCommonPlayParamsToMessage(v8, v14 != 0, v13, v27, v19);
      LODWORD(value) = apPlayback_sendPlistMessageCreatingReply(v8, 1886151033, v20, 0);
      if (value) {
        APSLogErrorAt();
      }
      CFRelease(v20);
      uint64_t v18 = v28;
      unsigned int v29 = value;
      if (value) {
        goto LABEL_59;
      }
    }
    if (v18)
    {
      uint64_t v21 = *a1;
      uint64_t v22 = (void *)CMBaseObjectGetDerivedStorage();
      MEMORY[0x1D25EB370](v22[6]);
      if (v22[12])
      {
        int v23 = v15[742];
        if (v23 <= 30 && (v23 != -1 || _LogCategory_Initialize())) {
          LogPrintF();
        }
        v22[13] = APMetadataSourceAddEventCallback(v22[12], v21, (uint64_t)apPlayback_handleMetadataEvent);
      }
      MEMORY[0x1D25EB390](v22[6]);
    }
    MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 48));
    *(unsigned char *)(DerivedStorage + 56) = 1;
    apPlayback_handlePlaybackStateChanged(*a1, (const void *)*MEMORY[0x1E4F20C60]);
    MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 48));
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
LABEL_48:
    if (!v29) {
      goto LABEL_50;
    }
    goto LABEL_49;
  }
  APSLogErrorAt();
LABEL_49:
  APEndpointPlaybackSessionStatsSetLastError(*(void **)(DerivedStorage + 224));
LABEL_50:
  uint64_t v24 = (void (*)(void, uint64_t))a1[2];
  if (v24) {
    v24(v29, a1[3]);
  }
  CFRelease((CFTypeRef)*a1);
  int v25 = (const void *)a1[1];
  if (v25) {
    CFRelease(v25);
  }
}

uint64_t apPlayback_ensureLocalPlaybackServerCreated()
{
  unsigned int v21 = 0;
  theCFDataRef Data = 0;
  int v0 = (void *)(CMBaseObjectGetDerivedStorage() + 216);
  if (*v0) {
    return v21;
  }
  memset(buffer, 0, sizeof(buffer));
  uint64_t CMBaseObject = FigTransportStreamGetCMBaseObject();
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, void, CFDataRef *))(v3 + 48);
  if (!v4)
  {
    unsigned int v21 = -12782;
LABEL_12:
    APSLogErrorAt();
    goto LABEL_31;
  }
  uint64_t v5 = *MEMORY[0x1E4F1CF80];
  unsigned int v21 = v4(CMBaseObject, *MEMORY[0x1E4F47758], *MEMORY[0x1E4F1CF80], &theData);
  if (v21) {
    goto LABEL_12;
  }
  v23.location = 0;
  v23.length = 28;
  CFDataGetBytes(theData, v23, buffer);
  char v6 = APSGetFBOPropertyInt64() != 0;
  if (v21) {
    goto LABEL_12;
  }
  if (!apPlayback_isTLSEnabled())
  {
    uint64_t v11 = 0;
    goto LABEL_28;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf[0] = 0;
  uint64_t v22 = 0;
  uint64_t v8 = APSenderSessionGetCMBaseObject(*(void *)(DerivedStorage + 16));
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  BOOL v12 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v10 + 48);
  if (!v12 || v12(v8, @"KeyHolder", v5, cf)) {
    goto LABEL_24;
  }
  CFTypeRef v13 = cf[0];
  if (cf[0])
  {
    uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    CFStringRef v16 = *(unsigned int (**)(CFTypeRef, const char *, uint64_t, void, void, uint64_t, const void **))(v15 + 48);
    if (v16 && !v16(v13, "Pair-TLS-PSK", 12, 0, 0, 16, &v22))
    {
LABEL_25:
      if (cf[0]) {
        CFRelease(cf[0]);
      }
      goto LABEL_27;
    }
LABEL_24:
    APSLogErrorAt();
    goto LABEL_25;
  }
LABEL_27:
  uint64_t v11 = v22;
LABEL_28:
  *(_OWORD *)CFTypeRef cf = *(_OWORD *)buffer;
  *(_OWORD *)((char *)&cf[1] + 4) = *(_OWORD *)&buffer[12];
  unsigned int v21 = APLocalPlaybackServerMake(cf, v6, v11, v0);
  if (!v21)
  {
    if (!v11) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  APSLogErrorAt();
  if (v11) {
LABEL_30:
  }
    CFRelease(v11);
LABEL_31:
  if (theData) {
    CFRelease(theData);
  }
  return v21;
}

void apPlayback_appendCommonPlayParamsToMessage(uint64_t a1, int a2, uint64_t a3, const void *a4, __CFDictionary *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v9 = DerivedStorage;
    MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 48));
    MEMORY[0x1D25EB390](*(void *)(v9 + 48));
    APSVolumeConvertDBToClampedSliderValue();
  }
  CFDictionarySetDouble();
  GetDeviceModelString();
  CFDictionarySetCString();
  GetSystemBuildVersionString();
  CFDictionarySetCString();
  CFDictionarySetInt64();
  if (a4) {
    CFDictionarySetValue(a5, @"audioMode", a4);
  }
}

BOOL apPlayback_isTLSEnabled()
{
  int v12 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  uint64_t v1 = *(void *)(DerivedStorage + 32);
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(unsigned int (**)(uint64_t, uint64_t))(v3 + 16);
  if (!v4 || !v4(v1, 35)) {
    goto LABEL_16;
  }
  uint64_t CMBaseObject = APSenderSessionGetCMBaseObject(*(void *)(DerivedStorage + 16));
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v7 + 48);
  if (!v8)
  {
    int v12 = -12782;
    goto LABEL_15;
  }
  int v12 = v8(CMBaseObject, @"KeyHolder", *MEMORY[0x1E4F1CF80], &cf);
  if (v12)
  {
LABEL_15:
    APSLogErrorAt();
LABEL_16:
    BOOL v9 = 0;
    goto LABEL_17;
  }
  if (!cf) {
    return 0;
  }
  BOOL v9 = APSGetFBOPropertyInt64() != 0;
  if (v12) {
    APSLogErrorAt();
  }
LABEL_17:
  if (cf) {
    CFRelease(cf);
  }
  return v9;
}

uint64_t apPlayback_sendPlistMessageCreatingReply(uint64_t a1, uint64_t a2, CFDataRef a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v22 = 0;
  CFTypeRef cf = 0;
  if (a3)
  {
    CFDataRef Data = CFPropertyListCreateData((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a3, kCFPropertyListBinaryFormat_v1_0, 0, 0);
    if (!Data)
    {
      APSLogErrorAt();
      CFStringRef v16 = 0;
      uint64_t v15 = 4294950555;
      goto LABEL_22;
    }
    a3 = Data;
    uint64_t BlockBufferWithCFDataNoCopy = FigCreateBlockBufferWithCFDataNoCopy();
    if (BlockBufferWithCFDataNoCopy)
    {
      uint64_t v15 = BlockBufferWithCFDataNoCopy;
      APSLogErrorAt();
      CFStringRef v16 = 0;
      goto LABEL_21;
    }
    CFTypeRef v10 = cf;
  }
  else
  {
    CFTypeRef v10 = 0;
  }
  uint64_t v11 = *(void *)(DerivedStorage + 184);
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef, CFTypeRef *))(v13 + 56);
  if (!v14)
  {
    uint64_t v15 = 4294954514;
    goto LABEL_18;
  }
  uint64_t v15 = v14(v11, a2, v10, &v22);
  if (v15)
  {
LABEL_18:
    APSLogErrorAt();
    goto LABEL_19;
  }
  CFStringRef v16 = 0;
  if (!a4 || !v22)
  {
LABEL_20:
    if (!a3) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  CFAllocatorRef v17 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t CFDataWithBlockBufferNoCopy = FigCreateCFDataWithBlockBufferNoCopy();
  if (CFDataWithBlockBufferNoCopy)
  {
    uint64_t v15 = CFDataWithBlockBufferNoCopy;
    goto LABEL_18;
  }
  CFPropertyListRef v19 = CFPropertyListCreateWithData(v17, 0, 0, 0, 0);
  CFStringRef v16 = v19;
  if (v19)
  {
    CFTypeID v20 = CFGetTypeID(v19);
    if (v20 == CFDictionaryGetTypeID())
    {
      uint64_t v15 = 0;
      *a4 = v16;
LABEL_19:
      CFStringRef v16 = 0;
      goto LABEL_20;
    }
  }
  APSLogErrorAt();
  uint64_t v15 = 4294950556;
  if (a3) {
LABEL_21:
  }
    CFRelease(a3);
LABEL_22:
  if (cf) {
    CFRelease(cf);
  }
  if (v22) {
    CFRelease(v22);
  }
  if (v16) {
    CFRelease(v16);
  }
  return v15;
}

void apPlayback_handleMetadataEvent(uint64_t a1, const void *a2, int a3, const void *a4)
{
  if (a4)
  {
    if (a3 > 1836217186)
    {
      if (a3 > 1886547814)
      {
        if (a3 == 1886547815) {
          return;
        }
        int v4 = 1952807028;
      }
      else
      {
        if (a3 == 1836217187) {
          return;
        }
        int v4 = 1852860704;
      }
      goto LABEL_11;
    }
    if (a3 != 1634629920)
    {
      if (a3 == 1634890784) {
        return;
      }
      int v4 = 1836216435;
LABEL_11:
      if (a3 != v4
        && gLogCategory_APEndpointPlaybackSessionAirPlay <= 90
        && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      return;
    }
    apPlayback_SetProxiedProperty(a2, @"metaData", 0, a4);
  }
  else
  {
    APSLogErrorAt();
  }
}

void apPlayback_insertPlayQueueItemInternal(uint64_t a1)
{
  unsigned int v20 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  CMTimeValue value = 0;
  APEndpointPlaybackSessionGetMediaTypeFromPlayParams(*(const __CFDictionary **)(a1 + 8));
  if (!*(void *)(DerivedStorage + 184))
  {
    uint64_t v12 = 0;
    CFDictionaryRef MutableCopy = 0;
    goto LABEL_16;
  }
  CFStringRef v3 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 8), (const void *)*MEMORY[0x1E4F20A88]);
  if (!v3)
  {
    APSLogErrorAt();
    uint64_t v12 = 0;
    CFDictionaryRef MutableCopy = 0;
    int v17 = -16740;
LABEL_38:
    unsigned int v20 = v17;
    goto LABEL_16;
  }
  CFStringRef v4 = v3;
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, *(CFDictionaryRef *)(a1 + 8));
  if (!MutableCopy)
  {
    APSLogErrorAt();
    uint64_t v12 = 0;
LABEL_37:
    int v17 = -16741;
    goto LABEL_38;
  }
  uint64_t v7 = (const void *)*MEMORY[0x1E4F209E8];
  CFStringGetTypeID();
  Typedint Value = CFDictionaryGetTypedValue();
  if (TypedValue)
  {
    CFStringRef v9 = (const __CFString *)TypedValue;
    if (apPlayback_isTLSEnabled()) {
      CFDictionarySetValue(MutableCopy, @"tlsPSKEnabled", (const void *)*MEMORY[0x1E4F1CFD0]);
    }
    unsigned int v20 = apPlayback_ensureLocalPlaybackServerCreated();
    if (v20
      || (CFStringGetTypeID(),
          CFStringRef v10 = (const __CFString *)CFDictionaryGetTypedValue(),
          (unsigned int v20 = APLocalPlaybackServerRegisterPathWithUUIDCreatingHostAndURL(*(void *)(DerivedStorage + 216), v4, v9, v10, (CFTypeRef *)&value, (CFStringRef *)&cf)) != 0))
    {
      APSLogErrorAt();
      uint64_t v12 = 0;
      goto LABEL_16;
    }
    CFDictionarySetInt64();
    CFDictionarySetValue(MutableCopy, @"host", value);
    CFDictionarySetValue(MutableCopy, v7, cf);
  }
  else
  {
    CFDictionarySetInt64();
  }
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v12 = Mutable;
  if (!Mutable)
  {
    APSLogErrorAt();
    goto LABEL_37;
  }
  CFDictionarySetValue(Mutable, @"item", MutableCopy);
  uint64_t v13 = *(const void **)(a1 + 16);
  if (v13) {
    CFDictionarySetValue(v12, @"afterItem", v13);
  }
  unsigned int v20 = apPlayback_performRemoteActionInternal(*(void *)a1, @"playlistInsert", v12, 0, 0);
  if (v20) {
    APSLogErrorAt();
  }
LABEL_16:
  uint64_t v14 = *(void (**)(void, void))(a1 + 24);
  if (v14) {
    v14(v20, *(void *)(a1 + 32));
  }
  if (value) {
    CFRelease(value);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  uint64_t v15 = *(const void **)(a1 + 8);
  if (v15) {
    CFRelease(v15);
  }
  CFStringRef v16 = *(const void **)(a1 + 16);
  if (v16) {
    CFRelease(v16);
  }
}

uint64_t apPlayback_performRemoteActionInternal(uint64_t a1, const void *a2, const void *a3, void (*a4)(uint64_t, const void *, uint64_t), uint64_t a5)
{
  CFDictionaryRef theDict = 0;
  if (*(void *)(CMBaseObjectGetDerivedStorage() + 184))
  {
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v11 = Mutable;
    if (!Mutable)
    {
      APSLogErrorAt();
      int Value = 0;
      uint64_t Int64 = 4294950555;
      goto LABEL_7;
    }
    CFDictionarySetValue(Mutable, @"type", a2);
    if (a3) {
      CFDictionarySetValue(v11, @"params", a3);
    }
    uint64_t v12 = apPlayback_sendPlistMessageCreatingReply(a1, 1633907822, v11, &theDict);
    if (!v12)
    {
      uint64_t Int64 = CFDictionaryGetInt64();
      int Value = CFDictionaryGetValue(theDict, @"params");
      goto LABEL_7;
    }
    uint64_t Int64 = v12;
    APSLogErrorAt();
  }
  else
  {
    uint64_t Int64 = 0;
    uint64_t v11 = 0;
  }
  int Value = 0;
LABEL_7:
  if (a4) {
    a4(Int64, Value, a5);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (theDict) {
    CFRelease(theDict);
  }
  return Int64;
}

void apPlayback_removePlayQueueItemInternal(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 184))
  {
    uint64_t v3 = DerivedStorage;
    int Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 8), (const void *)*MEMORY[0x1E4F20A88]);
    if (Value)
    {
      CFAllocatorRef v5 = Value;
      uint64_t v6 = *(void *)(v3 + 216);
      if (v6) {
        APLocalPlaybackServerUnRegisterUUID(v6, v5);
      }
      CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      uint64_t v8 = Mutable;
      if (Mutable)
      {
        CFDictionarySetValue(Mutable, @"item", *(const void **)(a1 + 8));
        uint64_t v9 = apPlayback_performRemoteActionInternal(*(void *)a1, @"playlistRemove", v8, 0, 0);
        if (v9) {
          APSLogErrorAt();
        }
      }
      else
      {
        APSLogErrorAt();
        uint64_t v9 = 4294950555;
      }
    }
    else
    {
      APSLogErrorAt();
      uint64_t v8 = 0;
      uint64_t v9 = 4294950556;
    }
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  CFStringRef v10 = *(void (**)(uint64_t, void))(a1 + 16);
  if (v10) {
    v10(v9, *(void *)(a1 + 24));
  }
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v11 = *(const void **)(a1 + 8);
  if (v11) {
    CFRelease(v11);
  }
  uint64_t v12 = *(const void **)a1;
  if (*(void *)a1)
  {
    CFRelease(v12);
  }
}

void apPlayback_stopInternal(uint64_t *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = *(void *)(DerivedStorage + 184);
  if (v3)
  {
    uint64_t v4 = DerivedStorage;
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, void, void))(v6 + 56);
    if (v7)
    {
      uint64_t v3 = v7(v3, 1937010544, 0, 0);
      if (!v3)
      {
        apPlayback_unsubscribeMetadataEvents();
        MEMORY[0x1D25EB370](*(void *)(v4 + 48));
        *(unsigned char *)(v4 + 72) = 0;
        MEMORY[0x1D25EB390](*(void *)(v4 + 48));
        MEMORY[0x1D25EB370](*(void *)(v4 + 48));
        *(unsigned char *)(v4 + 56) = 0;
        apPlayback_handlePlaybackStateChanged(*a1, (const void *)*MEMORY[0x1E4F20C68]);
        MEMORY[0x1D25EB390](*(void *)(v4 + 48));
        CMNotificationCenterGetDefaultLocalCenter();
        FigDispatchAsyncPostNotification();
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v3 = 4294954514;
    }
    APSLogErrorAt();
  }
LABEL_10:
  uint64_t v8 = (void (*)(uint64_t, uint64_t))a1[1];
  if (v8) {
    v8(v3, a1[2]);
  }
  uint64_t v9 = (const void *)*a1;
  CFRelease(v9);
}

void apPlayback_getPlaybackInfoInternal(uint64_t a1)
{
  CFTypeRef v19 = 0;
  CFTypeRef cf = 0;
  uint64_t Value = *(void *)(CMBaseObjectGetDerivedStorage() + 184);
  if (!Value) {
    goto LABEL_16;
  }
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(v4 + 56);
  if (!v5)
  {
    uint64_t Value = 4294954514;
LABEL_15:
    APSLogErrorAt();
LABEL_16:
    CFDictionaryRef v17 = 0;
    goto LABEL_28;
  }
  uint64_t v6 = v5(Value, 1886283375, 0, &cf);
  if (v6)
  {
    uint64_t Value = v6;
    goto LABEL_15;
  }
  CFTypeRef v7 = cf;
  CFDataRef data = 0;
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t CFDataWithBlockBufferNoCopy = FigCreateCFDataWithBlockBufferNoCopy();
  if (CFDataWithBlockBufferNoCopy)
  {
    uint64_t Value = CFDataWithBlockBufferNoCopy;
    APSLogErrorAt();
    CFDictionaryRef v17 = 0;
    CFDictionaryRef v11 = 0;
    CFDateRef v16 = 0;
    goto LABEL_20;
  }
  CFDictionaryRef v10 = (const __CFDictionary *)CFPropertyListCreateWithData(v8, data, 1uLL, 0, 0);
  CFDictionaryRef v11 = v10;
  if (!v10 || (CFTypeID v12 = CFGetTypeID(v10), v12 != CFDictionaryGetTypeID()))
  {
    APSLogErrorAt();
    CFDictionaryRef v17 = 0;
    CFDateRef v16 = 0;
    uint64_t Value = 4294950556;
    goto LABEL_20;
  }
  uint64_t Value = (uint64_t)CFDictionaryGetValue(v11, (const void *)*MEMORY[0x1E4F20AE0]);
  if (Value)
  {
    CFDictionaryRef v13 = (const __CFDictionary *)CMGetAttachment(v7, (CFStringRef)*MEMORY[0x1E4F4A210], 0);
    if (v13)
    {
      memset(&v22, 0, sizeof(v22));
      CMTimeMakeFromDictionary(&v22, v13);
      double v14 = MEMORY[0x1D25E9980](Value);
      CMTime time = v22;
      Float64 Seconds = CMTimeGetSeconds(&time);
      CFDateRef v16 = CFDateCreate(0, v14 + Seconds);
      if (!v16)
      {
        APSLogErrorAt();
        CFDictionaryRef v17 = 0;
        uint64_t Value = 4294950555;
        goto LABEL_20;
      }
      CFDictionarySetValue(v11, @"Start-Estimated-Date", v16);
      uint64_t Value = 0;
      goto LABEL_19;
    }
    uint64_t Value = 0;
  }
  CFDateRef v16 = 0;
LABEL_19:
  CFDictionaryRef v17 = v11;
  CFDictionaryRef v11 = 0;
LABEL_20:
  if (data) {
    CFRelease(data);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (v16) {
    CFRelease(v16);
  }
  if (Value
    || (uint64_t Value = APEndpointPlaybackSessionCreatePlayPlaybackInfoTimesInCMTime(v17, (__CFDictionary **)&v19), Value))
  {
    APSLogErrorAt();
  }
LABEL_28:
  uint64_t v18 = *(void (**)(CFTypeRef, uint64_t, void))(a1 + 8);
  if (v18) {
    v18(v19, Value, *(void *)(a1 + 16));
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (v19) {
    CFRelease(v19);
  }
  CFRelease(*(CFTypeRef *)a1);
}

void apPlayback_seekToTimeInternal(uint64_t a1)
{
  CFTypeRef v19 = 0;
  if (!*(void *)(CMBaseObjectGetDerivedStorage() + 184))
  {
    CFDictionaryRef MutableCopy = 0;
    CFMutableArrayRef Mutable = 0;
    uint64_t v13 = 0;
LABEL_48:
    CFTypeRef v7 = 0;
    goto LABEL_27;
  }
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable || (CMTime time = *(CMTime *)(a1 + 8), CMTimeGetSeconds(&time), ASPrintF(), !v19))
  {
    APSLogErrorAt();
    CFDictionaryRef MutableCopy = 0;
LABEL_50:
    CFTypeRef v7 = 0;
    uint64_t v13 = 4294950555;
    goto LABEL_27;
  }
  CFDictionarySetCString();
  CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 32);
  if (v4)
  {
    CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v2, 0, v4);
    if (!MutableCopy)
    {
LABEL_49:
      APSLogErrorAt();
      goto LABEL_50;
    }
  }
  else
  {
    CFDictionaryRef MutableCopy = 0;
  }
  if (!APSGetFBOPropertyInt64())
  {
    CFTypeRef v7 = 0;
    goto LABEL_23;
  }
  if (!MutableCopy)
  {
    CFDictionaryRef MutableCopy = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!MutableCopy) {
      goto LABEL_49;
    }
  }
  long long v17 = *(_OWORD *)(a1 + 40);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 30
    && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  Uuint64_t Int64 = FigCFNumberCreateUInt64();
  if (!UInt64)
  {
    APSLogErrorAt();
LABEL_47:
    uint64_t v13 = 4294950555;
    APSLogErrorAt();
    goto LABEL_48;
  }
  CFTypeRef v7 = (const void *)UInt64;
  ++*(void *)(DerivedStorage + 152);
  *(_OWORD *)&time.CMTimeValue value = v17;
  CFDataRef v9 = CFDataCreate(v2, (const UInt8 *)&time, 16);
  if (!v9)
  {
    APSLogErrorAt();
    CFRelease(v7);
    goto LABEL_47;
  }
  CFDataRef v10 = v9;
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 168));
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 160), v7, v10);
  CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 160));
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 168));
  if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 50
    && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRelease(v10);
  CFDictionarySetValue(MutableCopy, @"messageID", v7);
LABEL_23:
  uint64_t v11 = apPlayback_sendSpecialPlistMessageCreatingReply(*(void *)a1, 1936024939, Mutable, MutableCopy, 0);
  if (!v11)
  {
    if (v7)
    {
      free(v19);
      char v12 = 0;
LABEL_31:
      CFRelease(Mutable);
      goto LABEL_32;
    }
    uint64_t v13 = 0;
    goto LABEL_27;
  }
  uint64_t v13 = v11;
  APSLogErrorAt();
  if (!v7)
  {
LABEL_27:
    char v12 = 1;
    goto LABEL_28;
  }
  uint64_t v16 = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 30
    && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1D25EB370](*(void *)(v16 + 168));
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v16 + 160), v7);
  MEMORY[0x1D25EB390](*(void *)(v16 + 168));
  char v12 = 0;
LABEL_28:
  double v14 = *(void (**)(void, uint64_t, void))(a1 + 40);
  if (v14) {
    v14(0, v13, *(void *)(a1 + 48));
  }
  free(v19);
  if (Mutable) {
    goto LABEL_31;
  }
LABEL_32:
  CFRelease(*(CFTypeRef *)a1);
  uint64_t v15 = *(const void **)(a1 + 32);
  if (v15) {
    CFRelease(v15);
  }
  if ((v12 & 1) == 0) {
    CFRelease(v7);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
}

uint64_t apPlayback_sendSpecialPlistMessageCreatingReply(uint64_t a1, uint64_t a2, __CFDictionary *a3, CFDataRef Data, void *a5)
{
  CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  if (!a3)
  {
    APSLogErrorAt();
    char v12 = 0;
    uint64_t v11 = 4294950556;
    goto LABEL_14;
  }
  CFDataRef v10 = (const __CFAllocator **)MEMORY[0x1E4F1CF80];
  if (Data)
  {
    CFDataRef Data = CFPropertyListCreateData((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Data, kCFPropertyListBinaryFormat_v1_0, 0, 0);
    if (!Data)
    {
      APSLogErrorAt();
      char v12 = 0;
      uint64_t v11 = 4294950555;
      goto LABEL_14;
    }
  }
  uint64_t v11 = apPlayback_sendSpecialMessageCreatingReply(a1, a2, a3, Data, (uint64_t)&cf);
  if (v11)
  {
LABEL_23:
    APSLogErrorAt();
    goto LABEL_11;
  }
  char v12 = 0;
  if (!a5 || !cf)
  {
LABEL_12:
    if (!Data) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  CFAllocatorRef v13 = *v10;
  uint64_t CFDataWithBlockBufferNoCopy = FigCreateCFDataWithBlockBufferNoCopy();
  if (CFDataWithBlockBufferNoCopy)
  {
    uint64_t v11 = CFDataWithBlockBufferNoCopy;
    goto LABEL_23;
  }
  CFPropertyListRef v15 = CFPropertyListCreateWithData(v13, 0, 0, 0, 0);
  char v12 = v15;
  if (v15)
  {
    CFTypeID v16 = CFGetTypeID(v15);
    if (v16 == CFDictionaryGetTypeID())
    {
      uint64_t v11 = 0;
      *a5 = v12;
LABEL_11:
      char v12 = 0;
      goto LABEL_12;
    }
  }
  APSLogErrorAt();
  uint64_t v11 = 4294950556;
  if (Data) {
LABEL_13:
  }
    CFRelease(Data);
LABEL_14:
  if (cf) {
    CFRelease(cf);
  }
  if (v12) {
    CFRelease(v12);
  }
  return v11;
}

void apPlayback_setProxiedPropertyInternal(uint64_t a1)
{
  if (*(void *)(CMBaseObjectGetDerivedStorage() + 184))
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable) {
      ASPrintF();
    }
    APSLogErrorAt();
    uint64_t v7 = 4294950555;
  }
  else
  {
    CFMutableDictionaryRef Mutable = 0;
    uint64_t v7 = 0;
  }
  uint64_t v3 = *(void (**)(void, uint64_t, void))(a1 + 32);
  if (v3) {
    v3(0, v7, *(void *)(a1 + 40));
  }
  free(0);
  if (Mutable) {
    CFRelease(Mutable);
  }
  CFDictionaryRef v4 = *(const void **)(a1 + 8);
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *(const void **)(a1 + 16);
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = *(const void **)(a1 + 24);
  if (v6) {
    CFRelease(v6);
  }
  CFRelease(*(CFTypeRef *)a1);
}

void apPlayback_setRateInternal(uint64_t a1)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  *(_OWORD *)__str = 0u;
  long long v33 = 0u;
  memset(v31, 0, sizeof(v31));
  CMTime v30 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  long long v3 = *MEMORY[0x1E4F4A160];
  *(_OWORD *)&v29.CMTimeValue value = *MEMORY[0x1E4F4A160];
  CMTimeEpoch v4 = *(void *)(MEMORY[0x1E4F4A160] + 16);
  v29.CMTimeEpoch epoch = v4;
  if (!*(void *)(DerivedStorage + 184))
  {
    uint64_t v22 = 0;
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_53;
  }
  uint64_t v5 = (void *)DerivedStorage;
  long long v27 = v3;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    APSLogErrorAt();
    uint64_t v16 = 0;
    uint64_t v22 = 4294950555;
    goto LABEL_43;
  }
  uint64_t v7 = v5[4];
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  CFDataRef v10 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 16);
  if (v10) {
    int v11 = v10(v7, 69);
  }
  else {
    int v11 = 0;
  }
  if (*(void *)(a1 + 16))
  {
    char v12 = (const void *)*MEMORY[0x1E4F20950];
    uint64_t Int64 = CFDictionaryGetInt64();
    unint64_t Value = 0;
    CFDictionaryRef v15 = *(const __CFDictionary **)(a1 + 16);
    if (v15)
    {
      uint64_t v16 = 0;
      if (v11)
      {
        unint64_t Value = (unint64_t)CFDictionaryGetValue(v15, (const void *)*MEMORY[0x1E4F209A0]);
        if (FigCFDictionaryGetCMTimeIfPresent())
        {
          uint64_t v16 = v5[3];
          if (!v16)
          {
            APSLogErrorAt();
            uint64_t v22 = 4294950553;
            goto LABEL_43;
          }
          if (v30.flags)
          {
            CMTime hostTime = v30;
            uint64_t v17 = CMClockConvertHostTimeToSystemUnits(&hostTime);
            uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v19 = v18 ? v18 : 0;
            unsigned int v20 = *(unsigned int (**)(uint64_t, uint64_t, CMTime *))(v19 + 16);
            if (!v20 || v20(v16, v17, &v29))
            {
              if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 90
                && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
              {
                CMTime hostTime = v30;
                CMTimeGetSeconds(&hostTime);
                LogPrintF();
              }
              *(_OWORD *)&v29.CMTimeValue value = v27;
              v29.CMTimeEpoch epoch = v4;
            }
          }
          CMTime hostTime = v29;
          uint64_t v16 = APSNetworkTimeCopyAsDictionary();
        }
        else
        {
          uint64_t v16 = 0;
        }
      }
    }
    else
    {
      uint64_t v16 = 0;
    }
    if (Value | v16)
    {
      FigCFDictionarySetFloat32();
      FigCFDictionarySetValue();
      FigCFDictionarySetValue();
      if (Int64) {
        CFDictionarySetValue(Mutable, v12, (const void *)*MEMORY[0x1E4F1CFD0]);
      }
      if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 30
        && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      uint64_t v23 = apPlayback_sendPlistMessageCreatingReply(*(void *)a1, 1918984564, Mutable, 0);
      if (v23)
      {
        uint64_t v22 = v23;
        APSLogErrorAt();
        goto LABEL_43;
      }
      goto LABEL_40;
    }
    if (Int64)
    {
      strcpy((char *)v31, "&forInterstitial=1");
      BYTE3(v31[1]) = 0;
      DWORD1(v31[1]) = 0;
      *((void *)&v31[1] + 1) = 0;
    }
  }
  snprintf(__str, 0x80uLL, "/rate?value=%f%s", *(float *)(a1 + 8), (const char *)v31);
  CFDictionarySetCString();
  uint64_t v21 = apPlayback_sendSpecialPlistMessageCreatingReply(*(void *)a1, 1918989413, Mutable, 0, 0);
  uint64_t v16 = 0;
  if (v21)
  {
    uint64_t v22 = v21;
    APSLogErrorAt();
LABEL_53:
    uint64_t v16 = 0;
    goto LABEL_43;
  }
LABEL_40:
  MEMORY[0x1D25EB370](v5[6]);
  uint64_t v24 = (const void **)MEMORY[0x1E4F20C58];
  if (*(float *)(a1 + 8) != 0.0) {
    uint64_t v24 = (const void **)MEMORY[0x1E4F20C60];
  }
  apPlayback_handlePlaybackStateChanged(*(void *)a1, *v24);
  MEMORY[0x1D25EB390](v5[6]);
  uint64_t v22 = 0;
LABEL_43:
  int v25 = *(void (**)(uint64_t, void))(a1 + 24);
  if (v25) {
    v25(v22, *(void *)(a1 + 32));
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  CFRelease(*(CFTypeRef *)a1);
  uint64_t v26 = *(const void **)(a1 + 16);
  if (v26) {
    CFRelease(v26);
  }
  if (v16) {
    CFRelease((CFTypeRef)v16);
  }
}

void apPlayback_getProxiedPropertyInternal(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFDictionaryRef theDict = 0;
  double v14 = 0;
  if (!*(void *)(DerivedStorage + 184))
  {
    CFMutableDictionaryRef Mutable = 0;
    uint64_t v6 = 0;
    unint64_t Value = 0;
    uint64_t Int64 = 0;
    goto LABEL_12;
  }
  uint64_t v3 = DerivedStorage;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    APSLogErrorAt();
    uint64_t v6 = 0;
    goto LABEL_29;
  }
  ASPrintF();
  CFDictionarySetCString();
  if (*(void *)(a1 + 16))
  {
    uint64_t v6 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v6)
    {
      if (FigCFEqual() && APEndpointDescriptionIsSourceVersionOlderThan(*(void *)(v3 + 32), 0x657DA5u))
      {
        FigCFDictionaryGetValue();
        FigCFDictionarySetValue();
      }
      else
      {
        CFDictionarySetValue(v6, @"qualifier", *(const void **)(a1 + 16));
      }
      goto LABEL_10;
    }
    APSLogErrorAt();
LABEL_29:
    unint64_t Value = 0;
    uint64_t Int64 = 4294950555;
    goto LABEL_12;
  }
  uint64_t v6 = 0;
LABEL_10:
  uint64_t v7 = apPlayback_sendSpecialPlistMessageCreatingReply(*(void *)a1, 1735422066, Mutable, v6, &theDict);
  if (v7)
  {
    uint64_t Int64 = v7;
    APSLogErrorAt();
    unint64_t Value = 0;
  }
  else
  {
    uint64_t Int64 = CFDictionaryGetInt64();
    unint64_t Value = CFDictionaryGetValue(theDict, @"value");
  }
LABEL_12:
  CFDataRef v10 = *(void (**)(void, const void *, uint64_t, void))(a1 + 24);
  if (v10) {
    v10(*(void *)(a1 + 8), Value, Int64, *(void *)(a1 + 32));
  }
  free(v14);
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (theDict) {
    CFRelease(theDict);
  }
  CFRelease(*(CFTypeRef *)a1);
  int v11 = *(const void **)(a1 + 8);
  if (v11) {
    CFRelease(v11);
  }
  char v12 = *(const void **)(a1 + 16);
  if (v12) {
    CFRelease(v12);
  }
}

void apPlayback_deferredPerformRemoteActionInternal(uint64_t a1)
{
  apPlayback_performRemoteActionInternal(*(void *)a1, *(const void **)(a1 + 8), *(const void **)(a1 + 16), *(void (**)(uint64_t, const void *, uint64_t))(a1 + 24), *(void *)(a1 + 32));
  CFRelease(*(CFTypeRef *)a1);
  CFAllocatorRef v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 16);
  if (v3)
  {
    CFRelease(v3);
  }
}

void apPlayback_SetEventHandlerInternal(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_OWORD *)(DerivedStorage + 128) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(const void **)(a1 + 24);
  if (v3)
  {
    CFAllocatorRef v4 = *(const void **)(DerivedStorage + 144);
    *(void *)(DerivedStorage + 144) = v3;
    CFRetain(v3);
    if (v4) {
      CFRelease(v4);
    }
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  uint64_t v5 = *(const void **)(a1 + 24);
  if (v5)
  {
    CFRelease(v5);
  }
}

void apPlayback_processPendingAudioVolumeChanges(const void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  *(_OWORD *)__str = 0u;
  long long v9 = 0u;
  if (*(void *)(DerivedStorage + 184))
  {
    uint64_t v3 = DerivedStorage;
    MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 48));
    int v4 = *(unsigned __int8 *)(v3 + 92);
    *(unsigned char *)(v3 + 92) = 0;
    MEMORY[0x1D25EB390](*(void *)(v3 + 48));
    if (v4)
    {
      if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 30
        && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (Mutable)
      {
        uint64_t v6 = Mutable;
        APSVolumeConvertDBToClampedSliderValue();
        snprintf(__str, 0x80uLL, "/volume?volume=%f", v7);
        CFDictionarySetCString();
        if (apPlayback_sendSpecialPlistMessageCreatingReply((uint64_t)a1, 1886809964, v6, 0, 0)) {
          APSLogErrorAt();
        }
        CFRelease(v6);
      }
      else
      {
        APSLogErrorAt();
      }
    }
  }
  CFRelease(a1);
}

uint64_t APSRTPPacketHandlerCreate(const __CFAllocator *a1, int a2, unsigned int a3, uint64_t a4, uint64_t *a5)
{
  if (APSRTPPacketHandlerGetTypeID_once != -1) {
    dispatch_once(&APSRTPPacketHandlerGetTypeID_once, &__block_literal_global_21);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    APSLogErrorAt();
    if (a4)
    {
      uint64_t v22 = *(void (**)(void))(a4 + 8);
      if (v22) {
        v22(*(void *)a4);
      }
    }
    uint64_t v11 = 0;
    uint64_t v14 = 4294960568;
    goto LABEL_32;
  }
  uint64_t v11 = Instance;
  bzero((void *)(Instance + 16), 0x6A8uLL);
  *(_DWORD *)(v11 + 24) = a2;
  *(_DWORD *)(v11 + 28) = a3;
  if (!a4)
  {
    if ((a2 & 1) == 0) {
      goto LABEL_29;
    }
LABEL_11:
    APSLogErrorAt();
    uint64_t v14 = 4294960591;
    goto LABEL_12;
  }
  long long v12 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v11 + 32) = *(_OWORD *)a4;
  *(_OWORD *)(v11 + 48) = v12;
  if ((a2 & 1) == 0) {
    goto LABEL_29;
  }
  if (!*(void *)(a4 + 16)) {
    goto LABEL_11;
  }
  if (a3 < 2)
  {
    *(void *)(v11 + 96) = 0;
LABEL_14:
    uint64_t v15 = a3 + 20;
    uint64_t v16 = CFAllocatorAllocate(a1, 8 * (v15 + 2 * v15), 0);
    *(void *)(v11 + 64) = v16;
    if (!v16)
    {
LABEL_30:
      uint64_t v14 = 0;
      goto LABEL_32;
    }
    *(void *)(v11 + 72) = v15;
    bzero(v16, 8 * (v15 + 2 * v15));
    uint64_t v17 = CMSimpleQueueCreate(a1, v15, (CMSimpleQueueRef *)(v11 + 80));
    if (v17)
    {
      uint64_t v14 = v17;
    }
    else
    {
      uint64_t v23 = a5;
      if (v15)
      {
        for (uint64_t i = 0; 24 * v15 != i; i += 24)
        {
          uint64_t v14 = (*(uint64_t (**)(void, uint64_t))(v11 + 48))(*(void *)(v11 + 32), *(void *)(v11 + 64) + i + 8);
          if (v14 || (uint64_t v19 = *(void *)(v11 + 64), !*(void *)(v19 + i + 8)))
          {
            if (gLogCategory_APSRTPPacketHandler <= 90
              && (gLogCategory_APSRTPPacketHandler != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            if (v14)
            {
              APSLogErrorAt();
              a5 = v23;
              goto LABEL_12;
            }
            uint64_t v19 = *(void *)(v11 + 64);
          }
          CMSimpleQueueEnqueue(*(CMSimpleQueueRef *)(v11 + 80), (const void *)(v19 + i));
        }
      }
      uint64_t v20 = CMSimpleQueueCreate(a1, v15, (CMSimpleQueueRef *)(v11 + 88));
      a5 = v23;
      if (!v20)
      {
LABEL_29:
        if ((a2 & 2) != 0)
        {
          QueueInit(a1, v11 + 1664, *(_DWORD *)(v11 + 28) - 1);
          uint64_t v14 = 0;
          *(void *)(v11 + 1656) = 0;
          *(void *)(v11 + 160) = 0;
          *(void *)(v11 + 168) = v11 + 176;
          goto LABEL_32;
        }
        goto LABEL_30;
      }
      uint64_t v14 = v20;
    }
    goto LABEL_41;
  }
  uint64_t v13 = CMSimpleQueueCreate(a1, a3 - 1, (CMSimpleQueueRef *)(v11 + 96));
  if (!v13)
  {
    QueueInit(a1, v11 + 104, *(_DWORD *)(v11 + 28) - 1);
    goto LABEL_14;
  }
  uint64_t v14 = v13;
LABEL_41:
  APSLogErrorAt();
LABEL_12:
  CFRelease((CFTypeRef)v11);
  uint64_t v11 = 0;
LABEL_32:
  *a5 = v11;
  return v14;
}

uint64_t QueueInit(const __CFAllocator *a1, uint64_t a2, unsigned int a3)
{
  *(void *)a2 = a1;
  if (a3) {
    uint64_t v5 = CFAllocatorAllocate(a1, 4 * a3, 0);
  }
  else {
    uint64_t v5 = 0;
  }
  *(void *)(a2 + 32) = v5;
  *(_DWORD *)(a2 + 44) = 0;
  *(_DWORD *)(a2 + 48) = 0;
  *(_DWORD *)(a2 + 40) = a3;
  return __strlcpy_chk();
}

void APSRTPPacketHandlerFinalize(CFTypeRef cf)
{
  if (gLogCategory_APSRTPPacketHandler <= 30
    && (gLogCategory_APSRTPPacketHandler != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFAllocatorRef v2 = (const void *)*((void *)cf + 12);
  if (v2) {
    CFRelease(v2);
  }
  *((void *)cf + 12) = 0;
  uint64_t v3 = (const void *)*((void *)cf + 10);
  if (v3) {
    CFRelease(v3);
  }
  *((void *)cf + 10) = 0;
  int v4 = (const void *)*((void *)cf + 11);
  if (v4) {
    CFRelease(v4);
  }
  *((void *)cf + 11) = 0;
  uint64_t v5 = *((void *)cf + 8);
  if (v5)
  {
    if (*((void *)cf + 9))
    {
      uint64_t v6 = 0;
      unint64_t v7 = 0;
      do
      {
        uint64_t v8 = *(const void **)(v5 + v6 + 16);
        if (v8)
        {
          CFRelease(v8);
          uint64_t v5 = *((void *)cf + 8);
          *(void *)(v5 + v6 + 16) = 0;
        }
        if (*(void *)(v5 + v6 + 8))
        {
          long long v9 = (void (*)(void))*((void *)cf + 7);
          if (v9)
          {
            v9(*((void *)cf + 4));
            uint64_t v5 = *((void *)cf + 8);
          }
          *(void *)(v5 + v6 + 8) = 0;
        }
        ++v7;
        v6 += 24;
      }
      while (v7 < *((void *)cf + 9));
    }
    CFAllocatorRef v10 = CFGetAllocator(cf);
    CFAllocatorDeallocate(v10, *((void **)cf + 8));
  }
  *((void *)cf + 8) = 0;
  uint64_t v11 = (void *)*((void *)cf + 212);
  if (v11)
  {
    CFAllocatorDeallocate(*((CFAllocatorRef *)cf + 208), v11);
    *((void *)cf + 212) = 0;
  }
  *((_DWORD *)cf + 428) = 0;
  *((void *)cf + 213) = 0;
  long long v12 = (void *)*((void *)cf + 17);
  if (v12)
  {
    CFAllocatorDeallocate(*((CFAllocatorRef *)cf + 13), v12);
    *((void *)cf + 17) = 0;
  }
  *((_DWORD *)cf + 38) = 0;
  *((void *)cf + 18) = 0;
  uint64_t v13 = (const void *)*((void *)cf + 20);
  if (v13)
  {
    CFRelease(v13);
    *((void *)cf + 20) = 0;
  }
  *((_DWORD *)cf + 7) = 0;
  uint64_t v14 = (void (*)(void))*((void *)cf + 5);
  if (v14) {
    v14(*((void *)cf + 4));
  }
  if (gLogCategory_APSRTPPacketHandler <= 30
    && (gLogCategory_APSRTPPacketHandler != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

void *APSRTPPacketHandlerGetEmptyBBuf(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if (CMSimpleQueueGetCount(*(CMSimpleQueueRef *)(a1 + 88)) >= 1)
    {
      int32_t Count = CMSimpleQueueGetCount(*(CMSimpleQueueRef *)(a1 + 88));
      if (Count)
      {
        int32_t v3 = Count;
        do
        {
          int v4 = CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(a1 + 88));
          if (v4) {
            CMSimpleQueueEnqueue(*(CMSimpleQueueRef *)(a1 + 80), v4);
          }
          --v3;
        }
        while (v3);
      }
    }
    uint64_t v5 = CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(a1 + 80));
    uint64_t v6 = v5;
    if (v5)
    {
      unint64_t v7 = (const void *)v5[2];
      v6[2] = 0;
      if (v7) {
        CFRelease(v7);
      }
      *(_DWORD *)uint64_t v6 = 0;
    }
  }
  else
  {
    APSLogErrorAt();
    return 0;
  }
  return v6;
}

uint64_t APSRTPPacketHandlerReturnBBuf(uint64_t a1, void *element)
{
  if ((*(unsigned char *)(a1 + 24) & 1) != 0 && element)
  {
    int v4 = (const void *)element[2];
    element[2] = 0;
    if (v4) {
      CFRelease(v4);
    }
    uint64_t v5 = *(opaqueCMSimpleQueue **)(a1 + 80);
    return CMSimpleQueueEnqueue(v5, element);
  }
  else
  {
    return APSLogErrorAt();
  }
}

uint64_t APSRTPPacketHandlerReturnComposedBBuf(uint64_t a1, void *element)
{
  if ((*(unsigned char *)(a1 + 24) & 1) != 0 && element)
  {
    int v4 = (const void *)element[2];
    element[2] = 0;
    if (v4) {
      CFRelease(v4);
    }
    uint64_t v5 = *(opaqueCMSimpleQueue **)(a1 + 88);
    return CMSimpleQueueEnqueue(v5, element);
  }
  else
  {
    return APSLogErrorAt();
  }
}

uint64_t APSRTPPacketHandlerComposeRTPPacketWithBBuf(uint64_t a1, void *a2, unsigned int a3, int *a4, _DWORD *a5)
{
  int32_t Count = CMSimpleQueueGetCount(*(CMSimpleQueueRef *)(a1 + 96));
  if ((*(unsigned char *)(a1 + 24) & 1) == 0)
  {
    APSLogErrorAt();
    uint64_t v32 = 4294960561;
    goto LABEL_62;
  }
  if (!a4 || !a2 || !a5)
  {
    APSLogErrorAt();
    uint64_t v32 = 4294960591;
    goto LABEL_62;
  }
  int32_t v11 = Count;
  *a5 = 0;
  uint64_t AudioDataHeader = APSTransportMessageGetAudioDataHeader();
  if (AudioDataHeader)
  {
    uint64_t v32 = AudioDataHeader;
LABEL_61:
    APSLogErrorAt();
    goto LABEL_62;
  }
  uint64_t v13 = APSTransportMessageSetAudioDataHeader();
  if (v13)
  {
    uint64_t v32 = v13;
    goto LABEL_61;
  }
  *a4 = *(_DWORD *)a2;
  uint64_t AudioDataTimestamp = APSTransportMessageGetAudioDataTimestamp();
  if (AudioDataTimestamp)
  {
    uint64_t v32 = AudioDataTimestamp;
    goto LABEL_61;
  }
  Audiouint64_t DataPointer = APSTransportMessageGetAudioDataPointer();
  if (AudioDataPointer)
  {
    uint64_t v32 = AudioDataPointer;
    goto LABEL_61;
  }
  if (*(_DWORD *)(a1 + 28) < 2u) {
    goto LABEL_47;
  }
  uint64_t v16 = 0;
  int v17 = *(_DWORD *)a2;
  if (*(int *)a2 > 100)
  {
    if (v17 == 101)
    {
      int v17 = 105;
    }
    else if (v17 == 106)
    {
      int v17 = 108;
    }
  }
  else if (v17 == 96)
  {
    int v17 = 97;
  }
  else if (v17 == 100)
  {
    int v17 = 104;
  }
  element = a2;
  *a4 = v17;
  if (*(_DWORD *)(a1 + 152))
  {
    APSTransportMessageGetAudioDataPointer();
    APSTransportMessageGetAudioDataPointer();
    unsigned int v19 = *(_DWORD *)(a1 + 148);
    int v18 = *(_DWORD *)(a1 + 152);
    if (v18) {
      unsigned int v19 = (v18 + v19 - 1) % *(_DWORD *)(a1 + 144);
    }
    QueueIsIndexInRange((_DWORD *)(a1 + 104), v19);
    unint64_t v20 = a3 + (unint64_t)*(unsigned int *)(*(void *)(a1 + 136) + 4 * v19) + 5;
    if (a3 + (unint64_t)*(unsigned int *)(*(void *)(a1 + 136) + 4 * v19) == -5)
    {
      int v22 = 1;
      do
      {
        int v21 = v22;
        if (!QueueIsIndexInRange((_DWORD *)(a1 + 104), v19) || v19 == *(_DWORD *)(a1 + 148)) {
          break;
        }
        if (!v19) {
          unsigned int v19 = *(_DWORD *)(a1 + 144);
        }
        QueueIsIndexInRange((_DWORD *)(a1 + 104), --v19);
        v20 += *(unsigned int *)(*(void *)(a1 + 136) + 4 * v19) + 4;
        int v22 = v21 + 1;
      }
      while (!v20);
    }
    else
    {
      int v21 = 0;
    }
  }
  else
  {
    int v21 = 0;
  }
  int v23 = 1;
  if (!v11)
  {
LABEL_46:
    a2 = element;
    *uint64_t v16 = *element & 0x7F;
LABEL_47:
    uint64_t v30 = APSTransportMessageGetAudioDataPointer();
    if (!v30)
    {
      APSLogErrorAt();
      uint64_t v32 = 4294960569;
      goto LABEL_62;
    }
    uint64_t v32 = v30;
    goto LABEL_61;
  }
  unsigned int v24 = 0;
  while (1)
  {
    int v25 = CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(a1 + 96));
    if (!v25)
    {
      APSLogErrorAt();
      return 0;
    }
    uint64_t v26 = v25;
    if (v24 >= v11 - v21) {
      break;
    }
LABEL_39:
    if (v24 || v11 != *(_DWORD *)(a1 + 28) - 1)
    {
      CMSimpleQueueEnqueue(*(CMSimpleQueueRef *)(a1 + 96), v26);
    }
    else
    {
      APSRTPPacketHandlerReturnBBuf(a1, v26);
      unsigned int v29 = *(_DWORD *)(a1 + 152);
      if (v29 && v29 == *(_DWORD *)(a1 + 144))
      {
        *(_DWORD *)(a1 + 148) = (*(_DWORD *)(a1 + 148) + 1) % v29;
        *(_DWORD *)(a1 + 152) = v29 - 1;
      }
    }
    if (v11 == ++v24) {
      goto LABEL_46;
    }
  }
  uint64_t v27 = APSTransportMessageGetAudioDataPointer();
  if (v27)
  {
    uint64_t v32 = v27;
    goto LABEL_53;
  }
  uint64_t v28 = APSTransportMessageGetAudioDataTimestamp();
  if (!v28)
  {
    *(_DWORD *)uint64_t v16 = bswap32((*v26 << 24) | 0x80000000);
    v16 += 4;
    ++v23;
    goto LABEL_39;
  }
  uint64_t v32 = v28;
LABEL_53:
  APSLogErrorAt();
  a2 = element;
LABEL_62:
  if (gLogCategory_APSRTPPacketHandler <= 90
    && (gLogCategory_APSRTPPacketHandler != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a2) {
    APSRTPPacketHandlerReturnBBuf(a1, a2);
  }
  return v32;
}

uint64_t QueueAddEntry(uint64_t result, int a2)
{
  unsigned int v2 = *(_DWORD *)(result + 48);
  unsigned int v3 = *(_DWORD *)(result + 40);
  if (v2 >= v3)
  {
    if (v3)
    {
      if (gLogCategory_APSRTPPacketHandler <= 90)
      {
        if (gLogCategory_APSRTPPacketHandler != -1 || (uint64_t result = _LogCategory_Initialize(), result))
        {
          return LogPrintF();
        }
      }
    }
  }
  else
  {
    *(_DWORD *)(*(void *)(result + 32) + 4 * ((*(_DWORD *)(result + 44) + v2) % v3)) = a2;
    ++*(_DWORD *)(result + 48);
  }
  return result;
}

uint64_t APSRTPPacketHandlerReadNewMessage(uint64_t a1, void *cf, char a3)
{
  size_t lengthAtOffsetOut = 0;
  CMTime dataPointerOut = 0;
  if ((*(unsigned char *)(a1 + 24) & 2) != 0)
  {
    if (cf)
    {
      if (*(void *)(a1 + 160))
      {
        if (gLogCategory_APSRTPPacketHandler <= 60
          && (gLogCategory_APSRTPPacketHandler != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        CFRelease(*(CFTypeRef *)(a1 + 160));
      }
      *(void *)(a1 + 160) = CFRetain(cf);
      uint64_t DataPointer = CMBlockBufferGetDataPointer((CMBlockBufferRef)cf, 0, &lengthAtOffsetOut, 0, &dataPointerOut);
      if (lengthAtOffsetOut >= 0x5C9)
      {
        APSLogErrorAt();
        APSSignalErrorAt();
      }
      else
      {
        memcpy((void *)(*(void *)(a1 + 168) + 2), dataPointerOut, lengthAtOffsetOut);
        *(unsigned char *)(*(void *)(a1 + 168) + 1) = a3;
        size_t DataLength = CMBlockBufferGetDataLength((CMBlockBufferRef)cf);
        uint64_t v8 = *(void *)(a1 + 168);
        *(void *)(v8 + 1472) = DataLength + 2;
        *(_DWORD *)(a1 + 1660) = 0;
        int v9 = 1;
        unsigned int v10 = (*(unsigned char *)(v8 + 1) & 0x7F) - 96;
        if (v10 <= 0xD
          && (((1 << v10) & 0x3302) != 0 || (*(unsigned char *)(v8 + 1) & 0x7F) == 0x60 && *(_DWORD *)(a1 + 28) >= 2u))
        {
          int v17 = 0;
          uint64_t v16 = (unsigned int *)(v8 + 12);
          while (1)
          {
            APSRTPPacketHandlerReadExtendedHeader(v16, &v17, &v16);
            if ((v17 & 0x80) == 0) {
              break;
            }
            if (++v9 > *(_DWORD *)(a1 + 28))
            {
              if (gLogCategory_APSRTPPacketHandler <= 90
                && (gLogCategory_APSRTPPacketHandler != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
              int v9 = 0;
              break;
            }
          }
        }
        *(_DWORD *)(a1 + 1656) = v9;
        int v11 = *(_DWORD *)(a1 + 1712);
        if (v11)
        {
          unsigned int v12 = (v11 + *(_DWORD *)(a1 + 1708) - 1) % *(_DWORD *)(a1 + 1704);
          QueueIsIndexInRange((_DWORD *)(a1 + 1664), v12);
          if (bswap32(*(unsigned __int16 *)(*(void *)(a1 + 168) + 2)) >> 16 != (unsigned __int16)(*(_WORD *)(*(void *)(a1 + 1696) + 4 * v12) + 1)
            && gLogCategory_APSRTPPacketHandler <= 30
            && (gLogCategory_APSRTPPacketHandler != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
        }
      }
    }
    else
    {
      APSLogErrorAt();
      return 4294960591;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960561;
  }
  return DataPointer;
}

uint64_t APSRTPPacketHandlerDecryptCurrentMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = 0;
  if ((*(unsigned char *)(a1 + 24) & 2) == 0)
  {
    APSLogErrorAt();
    return 4294960561;
  }
  if (!*(void *)(a1 + 160) || (uint64_t v3 = *(void *)(a1 + 168)) == 0)
  {
    APSLogErrorAt();
    return 0;
  }
  unsigned int v5 = (*(unsigned char *)(v3 + 1) & 0x7F) - 96;
  if (v5 <= 0xD && (((1 << v5) & 0x3302) != 0 || (*(unsigned char *)(v3 + 1) & 0x7F) == 0x60 && *(_DWORD *)(a1 + 28) >= 2u))
  {
    uint64_t v6 = (4 * *(_DWORD *)(a1 + 1656) - 3);
    uint64_t v7 = v3 + v6 + 12;
    uint64_t v8 = *(void *)(v3 + 1472) - v6;
  }
  else
  {
    uint64_t v7 = v3 + 12;
    uint64_t v8 = *(void *)(v3 + 1472);
  }
  uint64_t AudioAADPointer = APSTransportMessageGetAudioAADPointer();
  if (AudioAADPointer)
  {
    uint64_t v13 = AudioAADPointer;
    goto LABEL_18;
  }
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  unsigned int v12 = *(uint64_t (**)(uint64_t, void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(v11 + 24);
  if (!v12)
  {
    uint64_t v13 = 4294954514;
    goto LABEL_18;
  }
  uint64_t v13 = v12(a2, 0, 0, v7, v8 - 12, v7, 1472, &v15);
  if (v13)
  {
LABEL_18:
    APSLogErrorAt();
    return v13;
  }
  *(void *)(*(void *)(a1 + 168) + 1472) += v15 - v8 + 12;
  return v13;
}

uint64_t APSRTPPacketHandlerGetNextPacket(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 24) & 2) != 0)
  {
    uint64_t v4 = a1 + 1664;
    while (1)
    {
      unsigned int v5 = *(_DWORD *)(a1 + 1660);
      if (v5 >= *(_DWORD *)(a1 + 1656)) {
        return 0;
      }
      uint64_t v6 = *(void *)(a1 + 168);
      if (!v6) {
        goto LABEL_59;
      }
      unsigned int v7 = (*(unsigned char *)(v6 + 1) & 0x7F) - 96;
      if (v7 <= 0xD && (((1 << v7) & 0x3302) != 0 || !v7 && *(_DWORD *)(a1 + 28) >= 2u))
      {
        int SeqNumOfPacket = APSRTPPacketHandlerGetSeqNumOfPacket(a1, *(_DWORD *)(a1 + 1660));
        int v9 = *(_DWORD *)(a1 + 1712);
        if (v9)
        {
          unsigned int v10 = *(_DWORD *)(a1 + 1708);
          while (*(_DWORD *)(*(void *)(a1 + 1696) + 4 * (v10 % *(_DWORD *)(a1 + 1704))) != SeqNumOfPacket)
          {
            ++v10;
            if (!--v9) {
              goto LABEL_15;
            }
          }
          char v11 = 1;
          goto LABEL_47;
        }
      }
LABEL_15:
      unsigned int v12 = *(_DWORD *)(a1 + 1656);
      if (v12 > v5)
      {
        uint64_t v13 = *(void *)(a1 + 168);
        if (v13) {
          break;
        }
      }
      APSLogErrorAt();
LABEL_35:
      if (*(_DWORD *)(a1 + 1656) > v5 && (uint64_t v22 = *(void *)(a1 + 168)) != 0)
      {
        int v32 = 0;
        int v23 = *(_DWORD *)(v22 + 8);
        *(void *)a2 = *(void *)v22;
        *(_DWORD *)(a2 + 8) = v23;
        uint64_t v24 = *(void *)(a1 + 168);
        unsigned int v25 = (*(unsigned char *)(v24 + 1) & 0x7F) - 96;
        if (v25 <= 0xD
          && (((1 << v25) & 0x3302) != 0 || (*(unsigned char *)(v24 + 1) & 0x7F) == 0x60 && *(_DWORD *)(a1 + 28) >= 2u))
        {
          if (*(_DWORD *)(a1 + 1656) - 1 <= v5)
          {
            unsigned int v26 = bswap32(*(_DWORD *)(v24 + 4));
          }
          else
          {
            unsigned int v33 = 0;
            APSRTPPacketHandlerGetExtendedHeaderOfPacket(a1, v5, &v33);
            unsigned int v26 = bswap32(*(_DWORD *)(*(void *)(a1 + 168) + 4)) - ((v33 >> 8) & 0x3FFF);
          }
          *(_DWORD *)(a2 + 4) = bswap32(v26);
          *(_WORD *)(a2 + 2) = __rev16(APSRTPPacketHandlerGetSeqNumOfPacket(a1, v5));
          APSRTPPacketHandlerGetExtendedHeaderOfPacket(a1, v5, &v32);
          *(unsigned char *)(a2 + 1) = v32 & 0x7F;
        }
      }
      else
      {
        APSLogErrorAt();
      }
      unsigned int v27 = *(_DWORD *)(a1 + 1712);
      if (v27 && v27 == *(_DWORD *)(a1 + 1704))
      {
        *(_DWORD *)(a1 + 1708) = (*(_DWORD *)(a1 + 1708) + 1) % v27;
        *(_DWORD *)(a1 + 1712) = v27 - 1;
      }
      QueueAddEntry(v4, bswap32(*(unsigned __int16 *)(a2 + 2)) >> 16);
      char v11 = 0;
LABEL_47:
      int v28 = *(_DWORD *)(a1 + 1660) + 1;
      *(_DWORD *)(a1 + 1660) = v28;
      if (v28 == *(_DWORD *)(a1 + 1656))
      {
        unsigned int v29 = *(const void **)(a1 + 160);
        if (v29) {
          CFRelease(v29);
        }
        *(void *)(a1 + 160) = 0;
      }
      if ((v11 & 1) == 0) {
        return 1;
      }
    }
    int v14 = *(unsigned char *)(v13 + 1) & 0x7F;
    if ((v14 - 96) <= 0xD)
    {
      if (((1 << (v14 - 96)) & 0x3302) != 0)
      {
        unsigned int v31 = 0;
        unsigned int v15 = v14 - 97;
        BOOL v16 = v15 > 0xC;
        int v17 = (1 << v15) & 0x1981;
        if (v16 || v17 == 0) {
          goto LABEL_24;
        }
        goto LABEL_23;
      }
      if (v14 == 96 && *(_DWORD *)(a1 + 28) >= 2u)
      {
        unsigned int v31 = 0;
LABEL_23:
        v13 += 4 * v12 - 3;
LABEL_24:
        uint64_t v19 = v13 + 12;
        if (v5)
        {
          for (unsigned int i = 0; i != v5; ++i)
          {
            APSRTPPacketHandlerGetExtendedHeaderOfPacket(a1, i, &v31);
            v19 += (unint64_t)v31 >> 22;
          }
          unsigned int v12 = *(_DWORD *)(a1 + 1656);
        }
        *(void *)(a2 + 16) = v19;
        if (v12 - 1 <= v5)
        {
          unint64_t v21 = *(void *)(*(void *)(a1 + 168) + 1472) - (v19 - *(void *)(a1 + 168));
        }
        else
        {
          APSRTPPacketHandlerGetExtendedHeaderOfPacket(a1, v5, &v31);
          unint64_t v21 = (unint64_t)v31 >> 22;
        }
        goto LABEL_34;
      }
    }
    *(void *)(a2 + 16) = v13 + 12;
    unint64_t v21 = *(void *)(*(void *)(a1 + 168) + 1472) - 12;
LABEL_34:
    *(void *)(a2 + 24) = v21;
    goto LABEL_35;
  }
LABEL_59:
  APSLogErrorAt();
  return 0;
}

uint64_t __APSRTPPacketHandlerGetTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  APSRTPPacketHandlerGetTypeID_typeID = result;
  return result;
}

uint64_t QueueIsIndexInRange(_DWORD *a1, unsigned int a2)
{
  unsigned int v2 = a1[11];
  int v3 = a1[12];
  unsigned int v4 = v2;
  if (!v3 || (unsigned int v4 = (v3 + v2 - 1) % a1[10], v2 <= v4))
  {
    if (v2 <= a2 && v4 >= a2) {
      return 1;
    }
    if (gLogCategory_APSRTPPacketHandler <= 90)
    {
      if (gLogCategory_APSRTPPacketHandler != -1) {
        goto LABEL_14;
      }
      uint64_t result = _LogCategory_Initialize();
      if (result) {
        goto LABEL_14;
      }
      return result;
    }
    return 0;
  }
  uint64_t result = 1;
  if (v2 <= a2 || v4 >= a2) {
    return result;
  }
  if (gLogCategory_APSRTPPacketHandler > 90) {
    return 0;
  }
  if (gLogCategory_APSRTPPacketHandler != -1 || (uint64_t result = _LogCategory_Initialize(), result))
  {
LABEL_14:
    LogPrintF();
    return 0;
  }
  return result;
}

unsigned int *APSRTPPacketHandlerReadExtendedHeader(unsigned int *result, _DWORD *a2, unsigned int **a3)
{
  if (!a2) {
    return (unsigned int *)APSLogErrorAt();
  }
  int v3 = *(char *)result;
  int v4 = *(unsigned __int8 *)result;
  *a2 = v4;
  if (v3 < 0)
  {
    unsigned int v5 = bswap32(*result);
    v4 |= (v5 >> 2) & 0x3FFF00 | (v5 << 22);
    *a2 = v4;
  }
  if (a3)
  {
    BOOL v6 = (v4 & 0x80) == 0;
    unsigned int v7 = result + 1;
    if (v6) {
      unsigned int v7 = (unsigned int *)((char *)result + 1);
    }
    *a3 = v7;
  }
  return result;
}

uint64_t APSRTPPacketHandlerGetSeqNumOfPacket(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 168);
  if (v2)
  {
    return (unsigned __int16)(a2 - *(_DWORD *)(a1 + 1656) + (bswap32(*(unsigned __int16 *)(v2 + 2)) >> 16) + 1);
  }
  else
  {
    APSLogErrorAt();
    LOWORD(v3) = 0;
  }
  return (unsigned __int16)v3;
}

unsigned int *APSRTPPacketHandlerGetExtendedHeaderOfPacket(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v3 = *(void *)(a1 + 168);
  if (v3) {
    return APSRTPPacketHandlerReadExtendedHeader((unsigned int *)(v3 + 4 * a2 + 12), a3, 0);
  }
  else {
    return (unsigned int *)APSLogErrorAt();
  }
}

uint64_t APAuthenticationClientFairPlayCreate(uint64_t a1, const void *a2, void *a3)
{
  if (a2)
  {
    APAuthenticationClientGetClassID();
    uint64_t v5 = CMDerivedObjectCreate();
    if (v5)
    {
      uint64_t v6 = v5;
      APSLogErrorAt();
    }
    else
    {
      *(void *)(CMBaseObjectGetDerivedStorage() + 8) = a2;
      CFRetain(a2);
      if (gLogCategory_APAuthenticationClientFairPlay <= 30
        && (gLogCategory_APAuthenticationClientFairPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      uint64_t v6 = 0;
      *a3 = 0;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294895495;
  }
  return v6;
}

void fpAuthentication_Finalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAuthenticationClientFairPlay <= 30
    && (gLogCategory_APAuthenticationClientFairPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*DerivedStorage)
  {
    IPaI1oem5iL();
    *uint64_t DerivedStorage = 0;
  }
  uint64_t v1 = (const void *)DerivedStorage[1];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[1] = 0;
  }
}

__CFString *fpAuthentication_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<APAuthenticationClientFairPlay %p>", a1);
  return Mutable;
}

uint64_t fpAuthentication_GetAuthenticationType()
{
  return 4;
}

uint64_t fpAuthentication_AuthenticateEndpoint()
{
  dataPointerOut[4] = *(char **)MEMORY[0x1E4F143B8];
  size_t lengthAtOffsetOut = 0;
  dataPointerOut[0] = 0;
  int v16 = 0;
  unsigned __int8 v15 = -1;
  CFTypeRef v13 = 0;
  CFTypeRef cf = 0;
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v17 = 0;
  if (gLogCategory_APAuthenticationClientFairPlay <= 40
    && (gLogCategory_APAuthenticationClientFairPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  memset(&dataPointerOut[1], 0, 24);
  uint64_t FairPlayHWInfo = GetFairPlayHWInfo();
  if (FairPlayHWInfo)
  {
    uint64_t v4 = FairPlayHWInfo;
    goto LABEL_27;
  }
  if (*DerivedStorage)
  {
    IPaI1oem5iL();
    *uint64_t DerivedStorage = 0;
  }
  cp2g1b9ro();
  if (v2)
  {
    uint64_t v4 = v2;
    goto LABEL_27;
  }
  size_t lengthAtOffsetOut = 0;
  dataPointerOut[0] = 0;
  Mib5yocT();
  if (v3)
  {
LABEL_25:
    uint64_t v4 = v3;
LABEL_27:
    APSLogErrorAt();
    goto LABEL_28;
  }
  while (1)
  {
    uint64_t v4 = v15;
    if (!v15) {
      break;
    }
    if (v15 != 1)
    {
      APSLogErrorAt();
      uint64_t v4 = 4294895494;
      break;
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    if (v13)
    {
      CFRelease(v13);
      CFTypeRef v13 = 0;
    }
    uint64_t BlockBufferCopyingMemoryBlock = FigCreateBlockBufferCopyingMemoryBlock();
    if (BlockBufferCopyingMemoryBlock)
    {
      uint64_t v4 = BlockBufferCopyingMemoryBlock;
      goto LABEL_27;
    }
    if (v17)
    {
      jEHf8Xzsv8K(v17);
      uint64_t v17 = 0;
    }
    uint64_t v6 = DerivedStorage[1];
    CFTypeRef v7 = cf;
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef, CFTypeRef *))(v9 + 56);
    if (!v10)
    {
      uint64_t v4 = 4294954514;
      goto LABEL_27;
    }
    uint64_t v11 = v10(v6, 1718628917, v7, &v13);
    if (v11)
    {
      uint64_t v4 = v11;
      goto LABEL_27;
    }
    CMBlockBufferGetDataPointer((CMBlockBufferRef)v13, 0, &lengthAtOffsetOut, 0, dataPointerOut);
    Mib5yocT();
    if (v3) {
      goto LABEL_25;
    }
  }
LABEL_28:
  if (cf) {
    CFRelease(cf);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v17)
  {
    jEHf8Xzsv8K(v17);
    uint64_t v17 = 0;
  }
  if (v4)
  {
    if (*DerivedStorage)
    {
      IPaI1oem5iL();
      *uint64_t DerivedStorage = 0;
    }
    if (gLogCategory_APAuthenticationClientFairPlay <= 60
      && (gLogCategory_APAuthenticationClientFairPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  return v4;
}

uint64_t fpAuthentication_CreateEncryptedKey(uint64_t a1, const __CFData *a2, const __CFAllocator *a3, CFDataRef *a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (!*(void *)CMBaseObjectGetDerivedStorage())
  {
    uint64_t v9 = 4294895493;
LABEL_10:
    APSLogErrorAt();
    goto LABEL_5;
  }
  v14.location = 0;
  v14.length = 16;
  CFDataGetBytes(a2, v14, buffer);
  U4HBs();
  if (v7)
  {
    uint64_t v9 = v7;
    goto LABEL_10;
  }
  CFDataRef v8 = CFDataCreate(a3, 0, 0);
  if (v8)
  {
    uint64_t v9 = 0;
    *a4 = v8;
  }
  else
  {
    APSLogErrorAt();
    uint64_t v9 = 4294895496;
  }
LABEL_5:
  jEHf8Xzsv8K(0);
  for (uint64_t i = 0; i != 16; ++i)
    buffer[i] = 0;
  return v9;
}

uint64_t APEndpointStreamAggregateAudioCreate(const __CFAllocator *a1, const void *a2, uint64_t a3, const void *a4, const void *a5, uint64_t a6, char a7, char a8, char a9, char a10, char a11, const void *a12, void *a13)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if (!a2 || !a5) {
    goto LABEL_42;
  }
  FigEndpointStreamAirPlayGetClassID();
  uint64_t v19 = CMDerivedObjectCreate();
  if (v19)
  {
    uint64_t v44 = v19;
LABEL_60:
    APSLogErrorAt();
    return v44;
  }
  char v47 = a7;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(void *)(DerivedStorage + 192) = CFRetain(a2);
  *(unsigned char *)(DerivedStorage + 200) = a8;
  *(unsigned char *)(DerivedStorage + 201) = a9;
  *(unsigned char *)(DerivedStorage + 202) = a10;
  *(unsigned char *)(DerivedStorage + 203) = a11;
  if (a12) {
    CFTypeRef v21 = CFRetain(a12);
  }
  else {
    CFTypeRef v21 = 0;
  }
  *(void *)(DerivedStorage + 216) = v21;
  uint64_t v22 = FigSimpleMutexCreate();
  *(void *)uint64_t DerivedStorage = v22;
  if (!v22) {
    goto LABEL_54;
  }
  if (!a4)
  {
LABEL_42:
    APSLogErrorAt();
    return 4294950536;
  }
  *(void *)(DerivedStorage + 176) = CFRetain(a4);
  *(void *)(DerivedStorage + 184) = CFRetain(a5);
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  CFStringRef v24 = CFStringCreateWithFormat(a1, 0, @"%@-%llu-%@", a3, UpTimeNanoseconds, a2);
  *(void *)(DerivedStorage + 24) = v24;
  if (!v24) {
    goto LABEL_54;
  }
  CFAllocatorRef v25 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *(void *)(DerivedStorage + 32) = Mutable;
  if (!Mutable) {
    goto LABEL_54;
  }
  CFMutableArrayRef v27 = CFArrayCreateMutable(v25, 0, MEMORY[0x1E4F1D510]);
  *(void *)(DerivedStorage + 40) = v27;
  if (!v27) {
    goto LABEL_54;
  }
  CFMutableDictionaryRef v28 = CFDictionaryCreateMutable(v25, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *(void *)(DerivedStorage + 112) = v28;
  if (!v28) {
    goto LABEL_54;
  }
  CFMutableDictionaryRef v29 = CFDictionaryCreateMutable(v25, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *(void *)(DerivedStorage + 120) = v29;
  if (!v29) {
    goto LABEL_54;
  }
  *(_DWORD *)(DerivedStorage + 48) = 0;
  uint64_t v30 = CMSimpleQueueCreate(v25, 32, (CMSimpleQueueRef *)(DerivedStorage + 88));
  if (v30)
  {
    uint64_t v44 = v30;
    goto LABEL_60;
  }
  SNPrintF();
  uint64_t v31 = FigDispatchQueueCreateWithPriority();
  *(void *)(DerivedStorage + 208) = v31;
  if (!v31
    || (SNPrintF(), uint64_t v32 = FigDispatchQueueCreateWithPriority(), (*(void *)(DerivedStorage + 96) = v32) == 0)
    || (CFMutableDictionaryRef v33 = CFDictionaryCreateMutable(v25, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]),
        (*(void *)(DerivedStorage + 104) = v33) == 0))
  {
LABEL_54:
    APSLogErrorAt();
    return 4294950535;
  }
  *(_DWORD *)(DerivedStorage + 144) = 1065353216;
  *(_DWORD *)(DerivedStorage + 148) = FigGetCFPreferenceNumberWithDefault();
  *(unsigned char *)(DerivedStorage + 153) = 0;
  if (*(unsigned char *)(DerivedStorage + 203)) {
    *(unsigned char *)(DerivedStorage + 153) = APSSettingsIsFeatureEnabled();
  }
  uint64_t v34 = APSAudioFormatDescriptionListCreate();
  if (v34)
  {
    uint64_t v44 = v34;
    goto LABEL_60;
  }
  *(unsigned char *)(DerivedStorage + 17) = FigCFEqual();
  *(unsigned char *)(DerivedStorage + 18) = FigCFEqual();
  *(unsigned char *)(DerivedStorage + 152) = FigCFEqual();
  if (a6)
  {
    MEMORY[0x1D25EB370](*(void *)DerivedStorage);
    streamAggregateAudio_addSubStreamFromEndpoint();
    MEMORY[0x1D25EB390](*(void *)DerivedStorage);
    goto LABEL_25;
  }
  if (!*(unsigned char *)(DerivedStorage + 202))
  {
LABEL_57:
    APSLogErrorAt();
    return APSSignalErrorAt();
  }
  uint64_t v35 = streamAggregateAudio_enableLocalPlayback(0, v47);
  if (v35)
  {
    uint64_t v44 = v35;
    goto LABEL_60;
  }
LABEL_25:
  if (!FigCFDictionaryGetCount()) {
    goto LABEL_57;
  }
  if (gLogCategory_APEndpointStreamAggregateAudio <= 50
    && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  SNPrintF();
  dispatch_queue_t v36 = dispatch_queue_create(label, 0);
  *(void *)(DerivedStorage + 160) = v36;
  if (!v36) {
    goto LABEL_54;
  }
  long long v37 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
  if (!v37)
  {
    APSLogErrorAt();
    return FigSignalErrorAt();
  }
  long long v38 = v37;
  long long v39 = *(NSObject **)(DerivedStorage + 160);
  uint64_t v40 = (void *)CFRetain(v37);
  dispatch_set_context(v39, v40);
  dispatch_set_finalizer_f(*(dispatch_object_t *)(DerivedStorage + 160), (dispatch_function_t)streamAggregateAudio_darwinQueueFinalizer);
  *(_DWORD *)(DerivedStorage + 168) = -1;
  uint64_t v41 = CMBaseObjectGetDerivedStorage();
  if ((APSIsAPMSpeaker() || IsAppleTV())
    && (uint64_t v42 = *(NSObject **)(v41 + 160),
        handler[0] = MEMORY[0x1E4F143A8],
        handler[1] = 0x40000000,
        handler[2] = __streamAggregateAudio_registerForAirPlayPrefsChangedNotification_block_invoke,
        handler[3] = &__block_descriptor_tmp_115,
        handler[4] = v42,
        uint64_t v43 = notify_register_dispatch("com.apple.airplay.prefsChanged", (int *)(v41 + 168), v42, handler),
        v43))
  {
    uint64_t v44 = v43;
    APSLogErrorAt();
  }
  else
  {
    uint64_t v44 = 0;
    *a13 = 0;
  }
  CFRelease(v38);
  return v44;
}

void streamAggregateAudio_addSubStreamFromEndpoint()
{
  if (FigEndpointCopyFirstStreamOfType()) {
    APSLogErrorAt();
  }
}

uint64_t streamAggregateAudio_enableLocalPlayback(void *a1, char a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  if (FigCFEqual())
  {
    APSLogErrorAt();
    uint64_t v5 = APSSignalErrorAt();
  }
  else if (*(void *)(DerivedStorage + 128))
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = APEndpointStreamLocalCreate(0, @"Local Playback Stream", *(const void **)(DerivedStorage + 192), 0, *(const void **)(DerivedStorage + 184), a2, &cf);
    if (v5)
    {
      APSLogErrorAt();
    }
    else
    {
      streamAggregateAudio_addSubStream(a1, @"localEndpointKey", (void *)cf);
      streamAggregateAudio_updateDynamicProperties((uint64_t)a1, 0);
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(DerivedStorage + 120), (CFDictionaryApplierFunction)streamAggregateAudio_setPropertyForLocalSubStreamIterator, a1);
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return v5;
}

void streamAggregateAudio_darwinQueueFinalizer(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t streamAggregateAudio_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(NSObject **)(DerivedStorage + 208);
  if (v1)
  {
    dispatch_release(v1);
    *(void *)(DerivedStorage + 208) = 0;
  }
  FigSimpleMutexDestroy();
  uint64_t v2 = *(const void **)(DerivedStorage + 176);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(DerivedStorage + 176) = 0;
  }
  uint64_t v3 = *(const void **)(DerivedStorage + 184);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 184) = 0;
  }
  uint64_t v4 = *(const void **)(DerivedStorage + 216);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DerivedStorage + 216) = 0;
  }
  uint64_t v5 = *(const void **)(DerivedStorage + 24);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(DerivedStorage + 24) = 0;
  }
  uint64_t v6 = *(const void **)(DerivedStorage + 32);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(DerivedStorage + 32) = 0;
  }
  uint64_t v7 = *(const void **)(DerivedStorage + 40);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(DerivedStorage + 40) = 0;
  }
  CFDataRef v8 = *(const void **)(DerivedStorage + 56);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(DerivedStorage + 56) = 0;
  }
  uint64_t v9 = *(const void **)(DerivedStorage + 112);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(DerivedStorage + 112) = 0;
  }
  unsigned int v10 = *(const void **)(DerivedStorage + 120);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(DerivedStorage + 120) = 0;
  }
  uint64_t v11 = *(const void **)(DerivedStorage + 128);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(DerivedStorage + 128) = 0;
  }
  unsigned int v12 = *(const void **)(DerivedStorage + 136);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(DerivedStorage + 136) = 0;
  }
  uint64_t v13 = *(const void **)(DerivedStorage + 80);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(DerivedStorage + 80) = 0;
  }
  CFRange v14 = *(const void **)(DerivedStorage + 8);
  if (v14)
  {
    CFRelease(v14);
    *(void *)(DerivedStorage + 8) = 0;
  }
  int v16 = (CMSimpleQueueRef *)(DerivedStorage + 88);
  unsigned __int8 v15 = *(opaqueCMSimpleQueue **)(DerivedStorage + 88);
  if (v15)
  {
    uint64_t v17 = (void *)CMSimpleQueueDequeue(v15);
    if (v17)
    {
      int v18 = v17;
      do
      {
        if (gLogCategory_APEndpointStreamAggregateAudio <= 50
          && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        free(v18);
        int v18 = (void *)CMSimpleQueueDequeue(*v16);
      }
      while (v18);
    }
    if (*v16)
    {
      CFRelease(*v16);
      *int v16 = 0;
    }
    uint64_t v19 = *(const void **)(DerivedStorage + 104);
    if (v19)
    {
      CFRelease(v19);
      *(void *)(DerivedStorage + 104) = 0;
    }
  }
  unint64_t v20 = *(NSObject **)(DerivedStorage + 96);
  if (v20)
  {
    dispatch_release(v20);
    *(void *)(DerivedStorage + 96) = 0;
  }
  CFTypeRef v21 = *(NSObject **)(DerivedStorage + 160);
  if (v21)
  {
    dispatch_release(v21);
    *(void *)(DerivedStorage + 160) = 0;
  }
  uint64_t result = *(unsigned int *)(DerivedStorage + 168);
  if (result != -1)
  {
    uint64_t result = notify_cancel(result);
    *(_DWORD *)(DerivedStorage + 168) = -1;
  }
  return result;
}

CFStringRef streamAggregateAudio_CopyDebugDescription(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<APEndpointStreamAggregateAudio %p>", a1);
}

uint64_t streamAggregateAudio_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFDictionaryRef *a4)
{
  CFTypeRef v32 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v30 = 0;
  CFTypeRef v31 = 0;
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1D25EB370](*DerivedStorage);
  if (gLogCategory_APEndpointStreamAggregateAudio <= 10
    && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21408]))
  {
    uint64_t v9 = (const void *)DerivedStorage[24];
    if (!v9)
    {
      APSLogErrorAt();
      unsigned int v10 = 0;
      uint64_t FigEndpointStreamAudioFormatDescriptionArray = 4294954516;
      goto LABEL_50;
    }
LABEL_18:
    CFDictionaryRef UInt32 = (const __CFDictionary *)CFRetain(v9);
    if (UInt32)
    {
LABEL_19:
      uint64_t FigEndpointStreamAudioFormatDescriptionArray = 0;
      unsigned int v10 = 0;
      *a4 = UInt32;
      goto LABEL_50;
    }
    goto LABEL_48;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21370]))
  {
    int v12 = *((_DWORD *)DerivedStorage + 12);
    if (v12 == 4 || v12 == 2) {
      uint64_t v13 = (const void **)MEMORY[0x1E4F1CFD0];
    }
    else {
      uint64_t v13 = (const void **)MEMORY[0x1E4F1CFC8];
    }
LABEL_17:
    uint64_t v9 = *v13;
    goto LABEL_18;
  }
  if (CFEqual(a2, @"IsInUse"))
  {
    int v14 = streamAggregateAudio_isInUse(*((_DWORD *)DerivedStorage + 12));
    uint64_t v13 = (const void **)MEMORY[0x1E4F1CFD0];
    if (!v14) {
      uint64_t v13 = (const void **)MEMORY[0x1E4F1CFC8];
    }
    goto LABEL_17;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21368]))
  {
    uint64_t v9 = (const void *)DerivedStorage[3];
    goto LABEL_18;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F213C8]))
  {
    if (CFEqual((CFTypeRef)DerivedStorage[24], (CFTypeRef)*MEMORY[0x1E4F21478]))
    {
      unsigned int v10 = (const void *)APSAudioFormatDescriptionListCreateForLowLatencySender();
      uint64_t IntersectionList = APSAudioFormatDescriptionListCreateIntersectionList();
      if (IntersectionList)
      {
        uint64_t FigEndpointStreamAudioFormatDescriptionArray = IntersectionList;
        goto LABEL_71;
      }
      uint64_t ASRDArrayPCM = APSAudioFormatDescriptionListCreateASRDArrayPCM();
      if (ASRDArrayPCM)
      {
        uint64_t FigEndpointStreamAudioFormatDescriptionArray = ASRDArrayPCM;
LABEL_71:
        APSLogErrorAt();
        goto LABEL_50;
      }
LABEL_34:
      uint64_t FigEndpointStreamAudioFormatDescriptionArray = 0;
      *a4 = (CFDictionaryRef)cf;
      CFTypeRef cf = 0;
      goto LABEL_50;
    }
    uint64_t v18 = APSAudioFormatDescriptionListCreate();
    if (v18)
    {
      uint64_t FigEndpointStreamAudioFormatDescriptionArray = v18;
    }
    else
    {
      uint64_t appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList();
      if (appended)
      {
        uint64_t FigEndpointStreamAudioFormatDescriptionArray = appended;
      }
      else
      {
        uint64_t v20 = APSAudioFormatDescriptionListCreateASRDArrayPCM();
        if (!v20)
        {
          unsigned int v10 = 0;
          goto LABEL_34;
        }
        uint64_t FigEndpointStreamAudioFormatDescriptionArray = v20;
      }
    }
LABEL_90:
    APSLogErrorAt();
    goto LABEL_49;
  }
  if (FigCFEqual())
  {
    APSAudioFormatDescriptionListGetMaxChannelCount();
LABEL_29:
    CFDictionaryRef UInt32 = (const __CFDictionary *)FigCFNumberCreateUInt32();
    goto LABEL_19;
  }
  if (FigCFEqual())
  {
    uint64_t v21 = streamAggregateAudio_copySupportedAudioFormats(a1, &v31);
    if (v21)
    {
      uint64_t FigEndpointStreamAudioFormatDescriptionArray = v21;
    }
    else
    {
      uint64_t FigEndpointStreamAudioFormatDescriptionArray = APSAudioFormatDescriptionListCreateFigEndpointStreamAudioFormatDescriptionArray();
      if (!FigEndpointStreamAudioFormatDescriptionArray)
      {
        unsigned int v10 = 0;
        *a4 = (CFDictionaryRef)v32;
        CFTypeRef v32 = 0;
        goto LABEL_50;
      }
    }
    goto LABEL_90;
  }
  if (FigCFEqual())
  {
    uint64_t v22 = streamAggregateAudio_copySupportedAudioFormats(a1, &v31);
    if (v22)
    {
      uint64_t FigEndpointStreamAudioFormatDescriptionArray = v22;
    }
    else
    {
      uint64_t FigEndpointStreamAudioFormatDescriptionArray = APSAudioFormatDescriptionListCopyRichestFormatAsFigEndpointStreamAudioFormatDescription();
      if (!FigEndpointStreamAudioFormatDescriptionArray)
      {
        unsigned int v10 = 0;
        *a4 = (CFDictionaryRef)v30;
        CFTypeRef v30 = 0;
        goto LABEL_50;
      }
    }
    goto LABEL_90;
  }
  if (FigCFEqual())
  {
    CFDictionaryRef UInt32 = (const __CFDictionary *)DerivedStorage[1];
    if (!UInt32) {
      goto LABEL_19;
    }
LABEL_45:
    CFDictionaryRef UInt32 = (const __CFDictionary *)CFRetain(UInt32);
    goto LABEL_19;
  }
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      uint64_t FigEndpointStreamAudioFormatDescriptionArray = streamAggregateAudio_copySupportedAudioCapabilities(a1, a4);
      if (!FigEndpointStreamAudioFormatDescriptionArray) {
        goto LABEL_49;
      }
      goto LABEL_90;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21328]))
    {
      uint64_t FigEndpointStreamAudioFormatDescriptionArray = APAudioEngineVendorVend((void *)DerivedStorage[22], (uint64_t)a4);
      if (!FigEndpointStreamAudioFormatDescriptionArray) {
        goto LABEL_49;
      }
      goto LABEL_90;
    }
    if (CFEqual(a2, @"HoseRegistrar"))
    {
      CFDictionaryRef UInt32 = (const __CFDictionary *)DerivedStorage[10];
      if (!UInt32) {
        goto LABEL_19;
      }
      goto LABEL_45;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21358]))
    {
      int IsCluster = streamAggregateAudio_subStreamHasRemoteStreamOrIsCluster();
      unsigned int v26 = (const void **)MEMORY[0x1E4F1CFC8];
      if (IsCluster) {
        unsigned int v26 = (const void **)MEMORY[0x1E4F1CFD0];
      }
      goto LABEL_75;
    }
    if (CFEqual(a2, @"SupportAPAP"))
    {
      CFMutableArrayRef v27 = (const void **)MEMORY[0x1E4F1CFD0];
      int v28 = *((unsigned __int8 *)DerivedStorage + 17);
      goto LABEL_85;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F213E0]))
    {
      CFMutableArrayRef v27 = (const void **)MEMORY[0x1E4F1CFD0];
      int v28 = *((unsigned __int8 *)DerivedStorage + 18);
      goto LABEL_85;
    }
    if (CFEqual(a2, @"EndpointIDs"))
    {
      uint64_t FigEndpointStreamAudioFormatDescriptionArray = streamAggregateAudio_copyNonLocalEndpointIDs(a1, (CFTypeRef *)a4);
      if (!FigEndpointStreamAudioFormatDescriptionArray) {
        goto LABEL_49;
      }
      goto LABEL_90;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F213D8]))
    {
      if (APSSettingsIsFeatureEnabled())
      {
        CFMutableArrayRef v27 = (const void **)MEMORY[0x1E4F1CFD0];
        int v28 = *((unsigned __int8 *)DerivedStorage + 152);
LABEL_85:
        if (!v28) {
          CFMutableArrayRef v27 = (const void **)MEMORY[0x1E4F1CFC8];
        }
        CFDictionaryRef UInt32 = (const __CFDictionary *)*v27;
        if (!*v27) {
          goto LABEL_19;
        }
        goto LABEL_45;
      }
    }
    else if (!CFEqual(a2, @"IsSidePlayStream"))
    {
      if (CFEqual(a2, @"NumberOfSubStreams"))
      {
        streamAggregateAudio_getTotalNumberOfAudioStreams();
        goto LABEL_29;
      }
      if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21320]))
      {
        unsigned int v10 = 0;
        uint64_t FigEndpointStreamAudioFormatDescriptionArray = 4294954512;
        goto LABEL_50;
      }
      if (!*((unsigned char *)DerivedStorage + 153) || streamAggregateAudio_getTotalNumberOfAudioStreams() < 3)
      {
        unsigned int v26 = (const void **)MEMORY[0x1E4F1CFD0];
        goto LABEL_75;
      }
    }
    unsigned int v26 = (const void **)MEMORY[0x1E4F1CFC8];
LABEL_75:
    CFDictionaryRef UInt32 = (const __CFDictionary *)*v26;
    goto LABEL_45;
  }
  uint64_t valuePtr = APSAudioFormatDescriptionListGetLegacyFormatMask();
  CFNumberRef v23 = CFNumberCreate(a3, kCFNumberSInt64Type, &valuePtr);
  *a4 = v23;
  if (v23)
  {
LABEL_48:
    uint64_t FigEndpointStreamAudioFormatDescriptionArray = 0;
LABEL_49:
    unsigned int v10 = 0;
    goto LABEL_50;
  }
  APSLogErrorAt();
  unsigned int v10 = 0;
  uint64_t FigEndpointStreamAudioFormatDescriptionArray = 4294950535;
LABEL_50:
  MEMORY[0x1D25EB390](*DerivedStorage);
  if (cf) {
    CFRelease(cf);
  }
  if (v32) {
    CFRelease(v32);
  }
  if (v31) {
    CFRelease(v31);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v30) {
    CFRelease(v30);
  }
  return FigEndpointStreamAudioFormatDescriptionArray;
}

uint64_t streamAggregateAudio_SetProperty(void *a1, uint64_t a2, const void *a3)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1D25EB370](*DerivedStorage);
  if (FigCFEqual())
  {
    if (a3)
    {
      CFTypeID v7 = CFGetTypeID(a3);
      if (v7 == CFBooleanGetTypeID())
      {
        if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 202))
        {
          CFTypeID v8 = CFGetTypeID(a3);
          if (v8 == CFBooleanGetTypeID())
          {
            if (gLogCategory_APEndpointStreamAggregateAudio <= 50
              && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            if (CFBooleanGetValue((CFBooleanRef)a3))
            {
              uint64_t v12 = streamAggregateAudio_enableLocalPlayback(a1, 1);
              if (v12)
              {
                uint64_t v10 = v12;
LABEL_51:
                APSLogErrorAt();
                goto LABEL_52;
              }
            }
            else
            {
              uint64_t v13 = CMBaseObjectGetDerivedStorage();
              if (*(void *)(v13 + 128))
              {
                FigEndpointStreamSuspend();
                uint64_t v14 = *(void *)(v13 + 128);
                uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
                uint64_t v16 = v15 ? v15 : 0;
                uint64_t v17 = *(uint64_t (**)(uint64_t))(v16 + 32);
                uint64_t v10 = v17 ? v17(v14) : 4294954514;
                CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v13 + 32), @"localEndpointKey");
                streamAggregateAudio_removeSubStreamNotificationListeners();
                streamAggregateAudio_updateDynamicProperties((uint64_t)a1, 0);
                uint64_t v18 = *(const void **)(v13 + 128);
                if (v18)
                {
                  CFRelease(v18);
                  *(void *)(v13 + 128) = 0;
                }
                if (v10) {
                  goto LABEL_51;
                }
              }
            }
            FigCFDictionarySetValue();
            goto LABEL_34;
          }
          APSLogErrorAt();
          uint64_t v10 = 4294950536;
        }
        else
        {
          APSLogErrorAt();
          uint64_t v22 = APSSignalErrorAt();
          uint64_t v10 = 0;
          if (!v22) {
            goto LABEL_35;
          }
          uint64_t v10 = v22;
        }
LABEL_52:
        APSLogErrorAt();
        goto LABEL_35;
      }
    }
LABEL_50:
    APSLogErrorAt();
    uint64_t v10 = 4294950536;
    goto LABEL_35;
  }
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      uint64_t v11 = (const void *)DerivedStorage[17];
      DerivedStorage[17] = a3;
      if (a3) {
        CFRetain(a3);
      }
      if (v11) {
        CFRelease(v11);
      }
    }
    else if (FigCFEqual())
    {
      if (!a3) {
        goto LABEL_50;
      }
      CFTypeID v20 = CFGetTypeID(a3);
      if (v20 != CFNumberGetTypeID()) {
        goto LABEL_50;
      }
      CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, (char *)DerivedStorage + 148);
    }
    else
    {
      if (!FigCFEqual())
      {
        uint64_t v10 = streamAggregateAudio_setPropertyForAllSubStreamsInternal((uint64_t)a1, a2, (uint64_t)a3);
        if (v10) {
          goto LABEL_52;
        }
        goto LABEL_35;
      }
      uint64_t v21 = DerivedStorage[16];
      if (v21)
      {
        uint64_t v10 = FigEndpointStreamSetProperty(v21, a2, (uint64_t)a3);
        if (v10) {
          goto LABEL_52;
        }
        goto LABEL_35;
      }
    }
LABEL_34:
    uint64_t v10 = 0;
    goto LABEL_35;
  }
  if (!a3) {
    goto LABEL_50;
  }
  CFTypeID v9 = CFGetTypeID(a3);
  if (v9 != CFNumberGetTypeID()) {
    goto LABEL_50;
  }
  uint64_t v10 = streamAggregateAudio_setAndCacheBufferedLocalVolume((uint64_t)a1, a3);
  if (v10) {
    goto LABEL_52;
  }
LABEL_35:
  MEMORY[0x1D25EB390](*DerivedStorage);
  return v10;
}

uint64_t streamAggregateAudio_isInUse(unsigned int a1)
{
  if (a1 >= 5)
  {
    if (gLogCategory_APEndpointStreamAggregateAudio <= 90
      && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    LOBYTE(v1) = 0;
  }
  else
  {
    return (0x101010000uLL >> (8 * a1));
  }
  return v1;
}

uint64_t streamAggregateAudio_copySupportedAudioFormats(uint64_t a1, CFTypeRef *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v12 = 0;
  if (!a2)
  {
    APSLogErrorAt();
    return 4294950536;
  }
  uint64_t v5 = DerivedStorage;
  if (!CFEqual(*(CFTypeRef *)(DerivedStorage + 192), (CFTypeRef)*MEMORY[0x1E4F21470]))
  {
    if (CFEqual(*(CFTypeRef *)(v5 + 192), (CFTypeRef)*MEMORY[0x1E4F21468]))
    {
      CFTypeID v7 = (const void *)APSAudioFormatDescriptionListCreateForRealTimeSender();
      uint64_t IntersectionList = APSAudioFormatDescriptionListCreateIntersectionList();
      if (IntersectionList)
      {
        uint64_t v9 = IntersectionList;
LABEL_13:
        APSLogErrorAt();
        goto LABEL_17;
      }
    }
    else
    {
      if (!CFEqual(*(CFTypeRef *)(v5 + 192), (CFTypeRef)*MEMORY[0x1E4F21478]))
      {
LABEL_15:
        CFTypeID v7 = 0;
        goto LABEL_16;
      }
      CFTypeID v7 = (const void *)APSAudioFormatDescriptionListCreateForLowLatencySender();
      uint64_t v10 = APSAudioFormatDescriptionListCreateIntersectionList();
      if (v10)
      {
        uint64_t v9 = v10;
        goto LABEL_13;
      }
    }
LABEL_16:
    uint64_t v9 = 0;
    *a2 = v12;
    CFTypeRef v12 = 0;
LABEL_17:
    if (v7) {
      CFRelease(v7);
    }
    goto LABEL_19;
  }
  uint64_t v6 = streamAggregateAudio_copySupportedAudioFormatForBufferAudio(a1, (uint64_t)&v12);
  if (!v6)
  {
    APSAudioFormatDescriptionListCopyDebugString();
    if (gLogCategory_APEndpointStreamAggregateAudio <= 50
      && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_15;
  }
  uint64_t v9 = v6;
  APSLogErrorAt();
LABEL_19:
  if (v12) {
    CFRelease(v12);
  }
  return v9;
}

uint64_t streamAggregateAudio_copySupportedAudioCapabilities(uint64_t a1, CFDictionaryRef *a2)
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  if (!FigCFEqual())
  {
    uint64_t v12 = 0;
LABEL_21:
    CFTypeID v7 = 0;
    goto LABEL_11;
  }
  uint64_t v4 = streamAggregateAudio_copySupportedAudioFormatForBufferAudio(a1, (uint64_t)&cf);
  if (v4)
  {
    uint64_t v12 = v4;
LABEL_20:
    APSLogErrorAt();
    goto LABEL_21;
  }
  uint64_t FilteredListWithTranscodeFormats = APSAudioFormatDescriptionListCreateFilteredListWithTranscodeFormats();
  if (FilteredListWithTranscodeFormats)
  {
    uint64_t v12 = FilteredListWithTranscodeFormats;
    goto LABEL_20;
  }
  uint64_t v6 = APSAudioFormatDescriptionListCopyChannelLayoutTags();
  if (v6)
  {
    uint64_t v12 = v6;
    goto LABEL_20;
  }
  CFTypeID v7 = (void *)FigCFDictionaryCopyArrayOfValues();
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v9 = (void *)*MEMORY[0x1E4F21460];
  values = v7;
  keys[0] = v9;
  CFDictionaryRef v10 = CFDictionaryCreate(v8, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v10)
  {
    CFDictionaryRef v11 = v10;
    if (gLogCategory_APEndpointStreamAggregateAudio <= 50
      && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    uint64_t v12 = 0;
    *a2 = v11;
  }
  else
  {
    APSLogErrorAt();
    uint64_t v12 = 4294951816;
  }
LABEL_11:
  if (cf) {
    CFRelease(cf);
  }
  if (v7) {
    CFRelease(v7);
  }
  return v12;
}

uint64_t streamAggregateAudio_subStreamHasRemoteStreamOrIsCluster()
{
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 200)) {
    return 1;
  }
  CFArrayRef v1 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
  if (!v1) {
    return 0;
  }
  CFArrayRef v2 = v1;
  CFIndex Count = CFArrayGetCount(v1);
  if (Count < 1)
  {
LABEL_8:
    uint64_t v0 = 0;
  }
  else
  {
    CFIndex v4 = Count;
    CFIndex v5 = 0;
    while (1)
    {
      CFArrayGetValueAtIndex(v2, v5);
      if (APSGetFBOPropertyInt64()) {
        break;
      }
      if (v4 == ++v5) {
        goto LABEL_8;
      }
    }
    uint64_t v0 = 1;
  }
  CFRelease(v2);
  return v0;
}

uint64_t streamAggregateAudio_copyNonLocalEndpointIDs(uint64_t a1, CFTypeRef *a2)
{
  CMBaseObjectGetDerivedStorage();
  CFArrayRef theArray = 0;
  if (!a2)
  {
    APSLogErrorAt();
    return 4294950536;
  }
  uint64_t v3 = *MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
    APSLogErrorAt();
    return 4294950535;
  }
  CFMutableArrayRef v5 = Mutable;
  CFArrayRef v6 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
  if (CFArrayGetCount(v6) < 1)
  {
LABEL_14:
    uint64_t v14 = 0;
    *a2 = CFRetain(v5);
    if (!v6) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  CFIndex v7 = 0;
  while (1)
  {
    CFArrayGetValueAtIndex(v6, v7);
    if (!APSGetFBOPropertyInt64()) {
      break;
    }
LABEL_13:
    if (++v7 >= CFArrayGetCount(v6)) {
      goto LABEL_14;
    }
  }
  uint64_t CMBaseObject = FigEndpointStreamGetCMBaseObject();
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  CFDictionaryRef v11 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFArrayRef *))(v10 + 48);
  if (!v11)
  {
    uint64_t v14 = 4294954514;
    goto LABEL_20;
  }
  uint64_t v12 = v11(CMBaseObject, @"EndpointIDs", v3, &theArray);
  if (!v12)
  {
    CFArrayRef v13 = theArray;
    v17.length = CFArrayGetCount(theArray);
    v17.location = 0;
    CFArrayAppendArray(v5, v13, v17);
    if (theArray)
    {
      CFRelease(theArray);
      CFArrayRef theArray = 0;
    }
    goto LABEL_13;
  }
  uint64_t v14 = v12;
LABEL_20:
  APSLogErrorAt();
  if (v6) {
LABEL_15:
  }
    CFRelease(v6);
LABEL_16:
  CFRelease(v5);
  if (theArray) {
    CFRelease(theArray);
  }
  return v14;
}

uint64_t streamAggregateAudio_getTotalNumberOfAudioStreams()
{
  CMBaseObjectGetDerivedStorage();
  CFArrayRef v0 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
  if (!v0) {
    return 0;
  }
  CFArrayRef v1 = v0;
  CFIndex Count = CFArrayGetCount(v0);
  if (Count < 1)
  {
    uint64_t v4 = 0;
  }
  else
  {
    CFIndex v3 = Count;
    uint64_t v4 = 0;
    for (CFIndex i = 0; i != v3; ++i)
    {
      CFArrayGetValueAtIndex(v1, i);
      if (APSGetFBOPropertyInt64())
      {
        uint64_t v4 = (v4 + 1);
      }
      else if (APSGetFBOPropertyInt64())
      {
        int v6 = APSGetFBOPropertyInt64();
        uint64_t v4 = (v4 + v6);
      }
    }
  }
  CFRelease(v1);
  return v4;
}

uint64_t streamAggregateAudio_copySupportedAudioFormatForBufferAudio(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x2000000000;
  int v12 = 0;
  v7[0] = 0;
  v7[1] = v7;
  v7[2] = 0x2000000000;
  int v8 = 0;
  v5[0] = 0;
  v5[1] = v5;
  v5[2] = 0x2000000000;
  char v6 = 0;
  CMBaseObjectGetDerivedStorage();
  FigGetCFPreferenceNumberWithDefault();
  CFDictionaryApplyBlock();
  if (*((_DWORD *)v10 + 6))
  {
    APSLogErrorAt();
  }
  else if (a2)
  {
    APSAudioFormatDescriptionListCopyFilterFormatsForCurrentBufferedSenderWithEndpointStreamsInfo();
  }
  uint64_t v3 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(v5, 8);
  _Block_object_dispose(v7, 8);
  _Block_object_dispose(&v9, 8);
  return v3;
}

void __streamAggregateAudio_copySupportedAudioFormatForBufferAudio_block_invoke(void *a1, CFTypeRef cf)
{
  CFTypeRef cfa = 0;
  if (!*(_DWORD *)(*(void *)(a1[4] + 8) + 24))
  {
    if (cf)
    {
      CFTypeID v3 = CFGetTypeID(cf);
      if (v3 == FigEndpointGetTypeID())
      {
        uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
        uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v6 = v5 ? v5 : 0;
        CFIndex v7 = *(uint64_t (**)(uint64_t, void, void, CFTypeRef *))(v6 + 48);
        if (v7)
        {
          int v8 = v7(CMBaseObject, *MEMORY[0x1E4F20D80], *MEMORY[0x1E4F1CF80], &cfa);
          CFTypeRef v9 = cfa;
        }
        else
        {
          CFTypeRef v9 = 0;
          int v8 = -12782;
        }
        *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = v8;
        *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = 0;
        if (v9)
        {
          if (APEndpointFigEndpointClusterTypeToAPSClusterType(v9) == 2) {
            *(_DWORD *)(*(void *)(a1[5] + 8) + 24) = 2;
          }
        }
      }
    }
    if (APSGetFBOPropertyInt64()) {
      *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
    }
  }
  if (cfa) {
    CFRelease(cfa);
  }
}

uint64_t streamAggregateAudio_setAndCacheBufferedLocalVolume(uint64_t a1, const void *a2)
{
  if (!*(void *)(CMBaseObjectGetDerivedStorage() + 128) || !FigCFEqual()) {
    return 0;
  }
  if (!a2 || (CFTypeID v3 = CFGetTypeID(a2), v3 != CFNumberGetTypeID()))
  {
    APSLogErrorAt();
    return 4294950536;
  }
  if (gLogCategory_APEndpointStreamAggregateAudio <= 50
    && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t CMBaseObject = FigEndpointStreamGetCMBaseObject();
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  CFIndex v7 = *(uint64_t (**)(uint64_t, void, const void *))(v6 + 56);
  if (!v7)
  {
    uint64_t v8 = 4294954514;
    goto LABEL_16;
  }
  uint64_t v8 = v7(CMBaseObject, *MEMORY[0x1E4F21298], a2);
  if (v8)
  {
LABEL_16:
    APSLogErrorAt();
    return v8;
  }
  FigCFDictionarySetValue();
  return v8;
}

uint64_t streamAggregateAudio_setPropertyForAllSubStreamsInternal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigCFDictionarySetValue();
  if (gLogCategory_APEndpointStreamAggregateAudio <= 50
    && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  context[1] = a3;
  uint64_t v8 = 0;
  context[0] = a2;
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(DerivedStorage + 32), (CFDictionaryApplierFunction)streamAggregateAudio_setPropertyForSubStreamsIterator, context);
  return v8;
}

uint64_t streamAggregateAudio_removeSubStreamNotificationListeners()
{
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  return FigNotificationCenterRemoveWeakListener();
}

void streamAggregateAudio_updateDynamicProperties(uint64_t a1, unsigned char *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t valuePtr = 0;
  CFNumberRef v38 = 0;
  CFTypeRef cf = 0;
  int v4 = FigCFEqual();
  int v5 = FigCFEqual();
  int v6 = FigCFEqual();
  int v7 = FigCFEqual();
  if (*(unsigned char *)(DerivedStorage + 52))
  {
    APSLogErrorAt();
    CFArrayRef v8 = 0;
    CFTypeRef v30 = 0;
    goto LABEL_154;
  }
  int v32 = v7;
  uint64_t v33 = DerivedStorage;
  uint64_t v34 = a2;
  CFArrayRef v8 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
  CFIndex Count = CFArrayGetCount(v8);
  if (Count >= 1)
  {
    CFIndex v10 = 0;
    int v11 = 0;
    CFTypeRef v35 = 0;
    uint64_t v12 = *MEMORY[0x1E4F1CF80];
    while (1)
    {
      CFArrayRef v13 = v8;
      CFArrayGetValueAtIndex(v8, v10);
      uint64_t CMBaseObject = FigEndpointStreamGetCMBaseObject();
      uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v15) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = 0;
      }
      CFRange v17 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v16 + 48);
      if ((!v17 || v17(CMBaseObject, @"SupportedAudioFormatList", v12, &cf))
        && gLogCategory_APEndpointStreamAggregateAudio <= 30
        && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      CFTypeRef v18 = cf;
      if (!cf)
      {
        uint64_t v19 = FigEndpointStreamGetCMBaseObject();
        uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v20) {
          uint64_t v21 = v20;
        }
        else {
          uint64_t v21 = 0;
        }
        uint64_t v22 = *(void (**)(uint64_t, __CFString *, uint64_t, const __CFNumber **))(v21 + 48);
        if (v22) {
          v22(v19, @"SupportedAPAudioFormats", v12, &v38);
        }
        if (v38)
        {
          CFNumberGetValue(v38, kCFNumberSInt64Type, &valuePtr);
          APSAudioFormatDescriptionListCreateWithLegacyAudioFormatMask();
        }
        CFTypeRef v18 = cf;
        if (!cf)
        {
          if (gLogCategory_APEndpointStreamAggregateAudio <= 50
            && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          goto LABEL_41;
        }
      }
      if (v11)
      {
        if (!APSAudioFormatDescriptionListCreateIntersectionList())
        {
          if (APSAudioFormatDescriptionListGetFormatCount() >= 1)
          {
            CFTypeRef v41 = 0;
            APSAudioFormatDescriptionListCopyDebugString();
            if (gLogCategory_APEndpointStreamAggregateAudio <= 50
              && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            if (v41) {
              CFRelease(v41);
            }
          }
          if (v35) {
            CFRelease(v35);
          }
          int v11 = 1;
          CFTypeRef v35 = 0;
          goto LABEL_41;
        }
      }
      else
      {
        CFTypeRef v35 = CFRetain(v18);
      }
      int v11 = 1;
LABEL_41:
      if ((_BYTE)v4) {
        int v4 = APSGetFBOPropertyInt64() != 0;
      }
      else {
        int v4 = 0;
      }
      if ((_BYTE)v5) {
        int v5 = APSGetFBOPropertyInt64() != 0;
      }
      else {
        int v5 = 0;
      }
      if ((_BYTE)v6) {
        int v6 = APSGetFBOPropertyInt64() != 0;
      }
      else {
        int v6 = 0;
      }
      CFArrayRef v8 = v13;
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
      if (v38)
      {
        CFRelease(v38);
        CFNumberRef v38 = 0;
      }
      if (Count == ++v10) {
        goto LABEL_57;
      }
    }
  }
  CFTypeRef v35 = 0;
LABEL_57:
  CFTypeRef v41 = 0;
  APSAudioFormatDescriptionListCopyDebugString();
  if (gLogCategory_APEndpointStreamAggregateAudio <= 50
    && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (v41) {
    CFRelease(v41);
  }
  CFTypeRef v41 = 0;
  APSAudioFormatDescriptionListCopyDebugString();
  if (gLogCategory_APEndpointStreamAggregateAudio <= 50
    && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (v41) {
    CFRelease(v41);
  }
  if (v4 == *(unsigned __int8 *)(v33 + 17)
    || (*(unsigned char *)(v33 + 17) = v4, (*(_DWORD *)(v33 + 48) - 2) > 2))
  {
    int v25 = 0;
  }
  else
  {
    if (*(unsigned char *)(v33 + 16)) {
      BOOL v23 = v4 == 0;
    }
    else {
      BOOL v23 = 0;
    }
    char v24 = v23;
    if (v23)
    {
      if (gLogCategory_APEndpointStreamAggregateAudio <= 50
        && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
      int v25 = 1;
    }
    else
    {
      int v25 = 0;
    }
    if (CFDictionaryGetInt64() && !*(unsigned char *)(v33 + 16))
    {
      char v31 = *(unsigned char *)(v33 + 17) ? v24 : 1;
      if ((v31 & 1) == 0)
      {
        if (gLogCategory_APEndpointStreamAggregateAudio <= 50
          && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        CMNotificationCenterGetDefaultLocalCenter();
        FigDispatchAsyncPostNotification();
        int v25 = 1;
      }
    }
  }
  if (v5 != *(unsigned __int8 *)(v33 + 18))
  {
    *(unsigned char *)(v33 + 18) = v5;
    if (gLogCategory_APEndpointStreamAggregateAudio <= 50
      && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    int v26 = *(_DWORD *)(v33 + 48);
    if ((v26 & 0xFFFFFFFE) == 2)
    {
      if (v25)
      {
LABEL_98:
        int v25 = 1;
        goto LABEL_99;
      }
LABEL_93:
      if (gLogCategory_APEndpointStreamAggregateAudio <= 50
        && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
      goto LABEL_98;
    }
    if (!v25 && v26 == 4) {
      goto LABEL_93;
    }
  }
LABEL_99:
  if (v6 != *(unsigned __int8 *)(v33 + 152))
  {
    *(unsigned char *)(v33 + 152) = v6;
    if (gLogCategory_APEndpointStreamAggregateAudio <= 50
      && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    int v27 = *(_DWORD *)(v33 + 48);
    if ((v27 & 0xFFFFFFFE) == 2)
    {
      if (v25)
      {
LABEL_114:
        LOBYTE(v25) = 1;
        goto LABEL_115;
      }
    }
    else if (v25 || v27 != 4)
    {
      goto LABEL_115;
    }
    if (gLogCategory_APEndpointStreamAggregateAudio <= 50
      && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    goto LABEL_114;
  }
LABEL_115:
  if (!FigCFEqual())
  {
    CFTypeRef v40 = 0;
    CFTypeRef v41 = 0;
    CFTypeRef v39 = 0;
    if (APSAudioFormatDescriptionListCreateFilteredListWithTranscodeFormats()
      || APSAudioFormatDescriptionListCopyChannelLayoutTags())
    {
      goto LABEL_175;
    }
    if (v41)
    {
      CFRelease(v41);
      CFTypeRef v41 = 0;
    }
    if (APSAudioFormatDescriptionListCreateFilteredListWithTranscodeFormats()
      || APSAudioFormatDescriptionListCopyChannelLayoutTags())
    {
LABEL_175:
      APSLogErrorAt();
      BOOL v28 = 0;
    }
    else
    {
      BOOL v28 = FigCFEqual() == 0;
    }
    if (v41) {
      CFRelease(v41);
    }
    if (v40) {
      CFRelease(v40);
    }
    if (v39) {
      CFRelease(v39);
    }
    if (v28)
    {
      if (gLogCategory_APEndpointStreamAggregateAudio <= 50
        && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
    }
    CFMutableDictionaryRef v29 = *(const void **)(v33 + 8);
    *(void *)(v33 + 8) = v35;
    if (v35) {
      CFRetain(v35);
    }
    if (v29) {
      CFRelease(v29);
    }
    CFTypeRef v41 = 0;
    APSAudioFormatDescriptionListCopyDebugString();
    if (gLogCategory_APEndpointStreamAggregateAudio <= 50
      && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (v41) {
      CFRelease(v41);
    }
    if (gLogCategory_APEndpointStreamAggregateAudio <= 50
      && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    LOBYTE(v25) = 1;
  }
  if (v34 && v32) {
    *uint64_t v34 = v25;
  }
  CFTypeRef v30 = v35;
LABEL_154:
  if (v38) {
    CFRelease(v38);
  }
  if (v30) {
    CFRelease(v30);
  }
  if (v8) {
    CFRelease(v8);
  }
}

void streamAggregateAudio_supportedAudioFormatsChangedNotificationListener(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamAggregateAudio <= 50
    && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1D25EB370](*DerivedStorage);
  streamAggregateAudio_updateDynamicProperties(a2, 0);
  JUMPOUT(0x1D25EB390);
}

void streamAggregateAudio_activeConfigurationDidBecomeInvalidNotificationListener(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamAggregateAudio <= 50
    && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1D25EB370](*DerivedStorage);
  streamAggregateAudio_updateDynamicProperties(a2, 0);
  JUMPOUT(0x1D25EB390);
}

uint64_t streamAggregateAudio_PerformanceReportNotificationListener()
{
  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  return FigDispatchAsyncPostNotification();
}

uint64_t streamAggregateAudio_GlitchReportNotificationListener()
{
  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  return FigDispatchAsyncPostNotification();
}

uint64_t streamAggregateAudio_setPropertyForSubStreamsIterator(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = a3[1];
  uint64_t CMBaseObject = FigEndpointStreamGetCMBaseObject();
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  CFTypeRef v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 56);
  if (!v9)
  {
    uint64_t result = 4294954514;
    goto LABEL_8;
  }
  uint64_t result = v9(CMBaseObject, v4, v5);
  if (result) {
LABEL_8:
  }
    *((_DWORD *)a3 + 4) = result;
  return result;
}

__CFString *streamAggregateAudio_subEndpointAddRemoveObservingProtocolCopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"APEndpointStreamAggregateAudio <APSubEndpointAddRemoveObservingProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t streamAggregateAudio_NotifySubEndpointAdded()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1D25EB370](*DerivedStorage);
  streamAggregateAudio_addSubStreamFromEndpoint();
  MEMORY[0x1D25EB390](*DerivedStorage);
  return 0;
}

uint64_t streamAggregateAudio_NotifySubEndpointRemoved(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1D25EB370](*DerivedStorage);
  unint64_t Value = CFDictionaryGetValue((CFDictionaryRef)DerivedStorage[4], a2);
  if (Value)
  {
    CFArrayRef v6 = (const __CFArray *)DerivedStorage[5];
    v13.length = CFArrayGetCount(v6);
    v13.location = 0;
    FirstIndexOfunint64_t Value = CFArrayGetFirstIndexOfValue(v6, v13, Value);
    if (FirstIndexOfValue != -1)
    {
      CFIndex v8 = FirstIndexOfValue;
      FigEndpointStreamSuspend();
      CFArrayRemoveValueAtIndex((CFMutableArrayRef)DerivedStorage[5], v8);
      if (gLogCategory_APEndpointStreamAggregateAudio > 50) {
        goto LABEL_11;
      }
      if (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()) {
        LogPrintF();
      }
    }
  }
  if (gLogCategory_APEndpointStreamAggregateAudio <= 50
    && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
LABEL_11:
  CFDictionaryRemoveValue((CFMutableDictionaryRef)DerivedStorage[4], a2);
  streamAggregateAudio_removeSubStreamNotificationListeners();
  if (CFDictionaryGetCount((CFDictionaryRef)DerivedStorage[4]) >= 1) {
    streamAggregateAudio_updateDynamicProperties(a1, 0);
  }
  CFTypeRef v9 = (const void *)DerivedStorage[16];
  if (Value == v9 && v9)
  {
    CFRelease(Value);
    DerivedStorage[16] = 0;
  }
  if (!*((unsigned char *)DerivedStorage + 153) || streamAggregateAudio_getTotalNumberOfAudioStreams() > 2) {
    goto LABEL_25;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    APSLogErrorAt();
LABEL_25:
    MEMORY[0x1D25EB390](*DerivedStorage);
    return 0;
  }
  CFMutableDictionaryRef v11 = Mutable;
  FigCFDictionarySetBoolean();
  if (gLogCategory_APEndpointStreamAggregateAudio <= 50
    && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigDispatchAsyncPostNotification();
  MEMORY[0x1D25EB390](*DerivedStorage);
  CFRelease(v11);
  return 0;
}

uint64_t streamAggregateAudio_Suspend(const void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFTypeRef v9 = malloc_type_calloc(1uLL, 0x50uLL, 0x10E0040B3C43913uLL);
  CFIndex v10 = malloc_type_calloc(1uLL, 0x18uLL, 0x1020040EDCEB4C7uLL);
  MEMORY[0x1D25EB370](*DerivedStorage);
  *CFTypeRef v9 = CFRetain(a1);
  if (a2) {
    CFTypeRef v11 = CFRetain(a2);
  }
  else {
    CFTypeRef v11 = 0;
  }
  v9[1] = v11;
  *((_DWORD *)v9 + 14) = 0;
  v9[8] = a4;
  v9[9] = a3;
  uint64_t v12 = APSWrapperCreate();
  if (v12)
  {
    APSLogErrorAt();
    streamAggregateAudio_finalizeSharedContextWrapper(0);
  }
  else
  {
    v10[1] = 0;
    *((_DWORD *)v10 + 4) = 1;
    if (FigCFDictionaryGetValue())
    {
      CFDictionaryGetInt64Ranged();
      CFDictionarySetInt64();
    }
    if (gLogCategory_APEndpointStreamAggregateAudio <= 50
      && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CMSimpleQueueEnqueue((CMSimpleQueueRef)DerivedStorage[11], v10);
    streamAggregateAudio_triggerSuspendOrResumeIfNecessary((const void *)*v9);
  }
  MEMORY[0x1D25EB390](*DerivedStorage);
  return v12;
}

uint64_t streamAggregateAudio_Resume(const void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFTypeRef v9 = malloc_type_calloc(1uLL, 0x50uLL, 0x10E0040B3C43913uLL);
  CFIndex v10 = malloc_type_calloc(1uLL, 0x18uLL, 0x1020040EDCEB4C7uLL);
  MEMORY[0x1D25EB370](*DerivedStorage);
  *(void *)CFTypeRef v9 = CFRetain(a1);
  if (a2) {
    CFTypeRef v11 = CFRetain(a2);
  }
  else {
    CFTypeRef v11 = 0;
  }
  *((void *)v9 + 1) = v11;
  *((void *)v9 + 4) = 1;
  *((unsigned char *)v9 + 41) = 0;
  *((_DWORD *)v9 + 14) = 0;
  *((void *)v9 + 8) = a4;
  *((void *)v9 + 9) = a3;
  uint64_t v12 = APSWrapperCreate();
  if (v12)
  {
    uint64_t v19 = v12;
    APSLogErrorAt();
    streamAggregateAudio_finalizeSharedContextWrapper(0);
LABEL_16:
    MEMORY[0x1D25EB390](*DerivedStorage);
    return v19;
  }
  uint64_t v13 = FigCFWeakReferenceHolderCreateWithReferencedObject();
  if (!v13)
  {
    APSLogErrorAt();
    uint64_t v19 = 4294950535;
    goto LABEL_16;
  }
  uint64_t v14 = (const void *)v13;
  if (*((_DWORD *)DerivedStorage + 37))
  {
    uint64_t v15 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, (dispatch_queue_t)DerivedStorage[12]);
    *((void *)v9 + 6) = v15;
    uint64_t v16 = (void *)CFRetain(v14);
    dispatch_set_context(v15, v16);
    dispatch_source_set_event_handler_f(*((dispatch_source_t *)v9 + 6), (dispatch_function_t)streamAggregateAudio_resumeTimerCallback);
    dispatch_source_set_cancel_handler_f(*((dispatch_source_t *)v9 + 6), (dispatch_function_t)streamAggregateAudio_resumerTimerCancelled);
    CFRange v17 = *((void *)v9 + 6);
    dispatch_time_t v18 = dispatch_time(0, 1000000 * *((unsigned int *)DerivedStorage + 37));
    dispatch_source_set_timer(v17, v18, 0xFFFFFFFFFFFFFFFFLL, 0);
    dispatch_resume(*((dispatch_object_t *)v9 + 6));
  }
  v10[1] = 0;
  *((_DWORD *)v10 + 4) = 2;
  if (gLogCategory_APEndpointStreamAggregateAudio <= 50
    && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CMSimpleQueueEnqueue((CMSimpleQueueRef)DerivedStorage[11], v10);
  streamAggregateAudio_triggerSuspendOrResumeIfNecessary(*(const void **)v9);
  MEMORY[0x1D25EB390](*DerivedStorage);
  CFRelease(v14);
  return 0;
}

uint64_t streamAggregateAudio_Dissociate()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1D25EB370](*DerivedStorage);
  if (gLogCategory_APEndpointStreamAggregateAudio <= 50
    && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFArrayRef v1 = (const __CFArray *)DerivedStorage[5];
  if (v1
    && CFArrayGetCount(v1) >= 1
    && gLogCategory_APEndpointStreamAggregateAudio <= 90
    && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v2 = DerivedStorage[8];
  if (v2)
  {
    APEndpointStreamAudioHoseAggregateDeregisterWithParentRegistrar(v2);
    CFTypeID v3 = (const void *)DerivedStorage[8];
    if (v3)
    {
      CFRelease(v3);
      DerivedStorage[8] = 0;
    }
  }
  *((unsigned char *)DerivedStorage + 52) = 1;
  MEMORY[0x1D25EB390](*DerivedStorage);
  if (DerivedStorage[26])
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
  }
  return 0;
}

uint64_t streamAggregateAudio_Control(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigCFEqual() || FigCFEqual() || FigCFEqual())
  {
    if (gLogCategory_APEndpointStreamAggregateAudio <= 50
      && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    context[0] = a2;
    context[1] = a3;
    CFDictionaryApplyFunction(*(CFDictionaryRef *)(DerivedStorage + 32), (CFDictionaryApplierFunction)streamAggregateAudio_genericCoreCaptureIterator, context);
    return 0;
  }
  else
  {
    if (gLogCategory_APEndpointStreamAggregateAudio <= 90
      && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return 4294950536;
  }
}

void streamAggregateAudio_finalizeSharedContextWrapper(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  CFTypeID v3 = a1[1];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = a1[2];
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = a1[6];
  if (v5) {
    dispatch_release(v5);
  }
  free(a1);
}

uint64_t streamAggregateAudio_triggerSuspendOrResumeIfNecessary(const void *a1)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if ((*(_DWORD *)(result + 48) | 2) == 2)
  {
    uint64_t result = (uint64_t)CMSimpleQueueGetHead(*(CMSimpleQueueRef *)(result + 88));
    if (result)
    {
      if (a1) {
        CFRetain(a1);
      }
      return APSDispatchAsyncFHelper();
    }
  }
  return result;
}

void streamAggregateAudio_triggerSuspendOrResume(CFTypeRef *a1)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1D25EB370](*DerivedStorage);
  if ((*((_DWORD *)DerivedStorage + 12) | 2) != 2) {
    goto LABEL_96;
  }
  CFTypeID v3 = CMSimpleQueueDequeue((CMSimpleQueueRef)DerivedStorage[11]);
  if (!v3) {
    goto LABEL_96;
  }
  uint64_t v4 = v3;
  CFTypeRef v5 = *a1;
  CMBaseObjectGetDerivedStorage();
  APSWrapperGetValue();
  if (gLogCategory_APEndpointStreamAggregateAudio <= 50
    && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  int v6 = v4[4];
  if (v6 == 1)
  {
    uint64_t v12 = (void *)*((void *)v4 + 1);
    uint64_t v13 = CMBaseObjectGetDerivedStorage();
    uint64_t Value = APSWrapperGetValue();
    *(void *)long long bytes = 0;
    if (gLogCategory_APEndpointStreamAggregateAudio <= 50
      && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(void *)(Value + 24) = FigCFDictionaryGetCount();
    int v15 = *(_DWORD *)(v13 + 48);
    if (v15)
    {
      uint64_t v16 = *MEMORY[0x1E4F1CF80];
      CFDictionaryRef MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
      if (MutableCopy)
      {
        CFDictionaryRef v18 = MutableCopy;
        contexta = v12;
        uint64_t v19 = CFDictionaryGetValue(MutableCopy, @"HoseRegistrar");
        CFDictionaryGetInt64();
        uint64_t v20 = *(const void **)(v13 + 80);
        if (v20 && v19 && !CFEqual(v20, v19))
        {
          if (gLogCategory_APEndpointStreamAggregateAudio <= 50
            && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
        }
        else
        {
          streamAggregateAudio_setResumptionStageAndNotifyIfNeeded((uint64_t)v5, 1u);
          if (*(unsigned char *)(v13 + 52))
          {
            APSLogErrorAt();
            int v48 = -16762;
LABEL_137:
            *(_DWORD *)(Value + 56) = v48;
            streamAggregateAudio_suspendCompletion();
LABEL_41:
            CFRelease(v18);
            CFDictionaryRef v27 = *(const __CFDictionary **)bytes;
            if (!*(void *)bytes) {
              goto LABEL_93;
            }
            goto LABEL_92;
          }
          uint64_t v21 = *(void *)(v13 + 64);
          if (v21)
          {
            uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v22) {
              uint64_t v23 = v22;
            }
            else {
              uint64_t v23 = 0;
            }
            char v24 = *(void (**)(uint64_t, __CFString *, uint64_t, UInt8 *))(v23 + 48);
            if (v24) {
              v24(v21, @"PrimaryPacketDropCount", v16, bytes);
            }
            CFGetInt64();
            APEndpointStreamAudioHoseAggregateDeregisterWithParentRegistrar(*(void *)(v13 + 64));
            int v25 = *(const void **)(v13 + 64);
            if (v25)
            {
              CFRelease(v25);
              *(void *)(v13 + 64) = 0;
            }
          }
          CFDictionarySetInt64();
          int v26 = *(const void **)(Value + 8);
          *(void *)(Value + 8) = v18;
          CFRetain(v18);
          if (v26) {
            CFRelease(v26);
          }
          *(unsigned char *)(v13 + 16) = 0;
          if (*(uint64_t *)(Value + 24) >= 1)
          {
            CFDictionaryApplyFunction(*(CFDictionaryRef *)(v13 + 32), (CFDictionaryApplierFunction)streamAggregateAudio_suspendSubStreamIterator, contexta);
            goto LABEL_41;
          }
        }
        int v48 = 0;
        goto LABEL_137;
      }
      APSLogErrorAt();
      int v15 = -16761;
    }
    *(_DWORD *)(Value + 56) = v15;
    streamAggregateAudio_suspendCompletion();
    goto LABEL_93;
  }
  if (v6 != 2)
  {
    if (gLogCategory_APEndpointStreamAggregateAudio <= 90
      && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    streamAggregateAudio_triggerSuspendOrResumeIfNecessary(v5);
    goto LABEL_93;
  }
  uint64_t v7 = (void *)*((void *)v4 + 1);
  uint64_t v8 = CMBaseObjectGetDerivedStorage();
  uint64_t v9 = APSWrapperGetValue();
  cf[0] = 0;
  if (*(_DWORD *)(v8 + 48) == 2)
  {
    CFDataRef v43 = 0;
    int v47 = 0;
    CFDictionaryRef v10 = 0;
LABEL_122:
    CFDictionaryRef Mutable = 0;
    goto LABEL_133;
  }
  streamAggregateAudio_setResumptionStageAndNotifyIfNeeded((uint64_t)v5, 3u);
  CFAllocatorRef context = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDictionaryRef v10 = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
  long long v49 = CFDictionaryGetValue(v10, @"HoseRegistrar");
  if (v49) {
    int Int64Ranged = CFDictionaryGetInt64Ranged();
  }
  else {
    int Int64Ranged = 0;
  }
  if (gLogCategory_APEndpointStreamAggregateAudio <= 50
    && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t Int64 = CFDictionaryGetInt64();
  if (Int64 && !*(unsigned char *)(v8 + 17))
  {
    if (gLogCategory_APEndpointStreamAggregateAudio <= 50
      && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CFDataRef v43 = 0;
    CFDictionaryRef Mutable = 0;
    int v47 = -6735;
LABEL_133:
    *(_DWORD *)(v9 + 56) = v47;
    streamAggregateAudio_resumeCallClientCallback();
    streamAggregateAudio_resumeCompletion(v7);
    if (!v10) {
      goto LABEL_86;
    }
    goto LABEL_85;
  }
  *(unsigned char *)(v8 + 16) = Int64 != 0;
  if (Int64Ranged)
  {
    CFDataRef v43 = 0;
    int v47 = 0;
    goto LABEL_122;
  }
  *(void *)(v9 + 24) = FigCFDictionaryGetCount();
  *(void *)(v9 + 32) = 1;
  if (*(unsigned char *)(v8 + 52))
  {
    APSLogErrorAt();
    CFDataRef v43 = 0;
    CFDictionaryRef Mutable = 0;
    int v47 = -16762;
    goto LABEL_133;
  }
  cf[1] = 0;
  RandomBytes();
  CFDataRef v53 = CFDataCreate(context, bytes, 32);
  int v29 = APSCryptorChaCha20Poly1305Create();
  if (v29)
  {
    int v47 = v29;
    APSLogErrorAt();
    if (v53) {
      CFRelease(v53);
    }
    APSLogErrorAt();
    CFDataRef v43 = 0;
    goto LABEL_122;
  }
  uint64_t v50 = v9;
  CFDictionaryRef theDict = v10;
  uint64_t v52 = v7;
  if (gLogCategory_APEndpointStreamAggregateAudio <= 40
    && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v30 = CMBaseObjectGetDerivedStorage();
  char v31 = (const void *)*MEMORY[0x1E4F21468];
  int v32 = FigCFEqual();
  uint64_t v33 = (const void *)*MEMORY[0x1E4F21470];
  int v34 = FigCFEqual();
  int v35 = FigCFEqual();
  if (*(unsigned char *)(v30 + 200)
    && *(unsigned char *)(v30 + 201)
    && (v32 || v34 && !v35)
    && gLogCategory_APEndpointStreamAggregateAudio <= 50
    && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v36 = CMBaseObjectGetDerivedStorage();
  if (CFEqual(*(CFTypeRef *)(v36 + 192), v31)
    || CFEqual(*(CFTypeRef *)(v36 + 192), v33)
    || !CFEqual(*(CFTypeRef *)(v36 + 192), (CFTypeRef)*MEMORY[0x1E4F21478])
    || !*(unsigned char *)(v36 + 203)
    || !APSSettingsGetIntWithDefault()
    || !APSSettingsGetIntWithDefault()
    || APSGetAllowPersistentGroupsOnInfra()
    || APSIsVirtualMachine())
  {
    CFDictionaryRef Mutable = 0;
    CFDictionaryRef v10 = theDict;
    uint64_t v7 = v52;
    uint64_t v9 = v50;
    goto LABEL_67;
  }
  if (gLogCategory_APEndpointStreamAggregateAudio <= 50
    && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFDictionaryRef Mutable = CFDictionaryCreateMutable(context, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    APSLogErrorAt();
    int v47 = -16761;
    CFDictionaryRef v10 = theDict;
    uint64_t v7 = v52;
    uint64_t v9 = v50;
    goto LABEL_124;
  }
  CFDictionaryRef v10 = theDict;
  CFDictionaryGetValue(theDict, @"BBufBackingProvider");
  FigCFDictionarySetValue();
  int v45 = APEndpointStreamAudioHoseAggregateCreate(context, v49, Mutable, cf);
  uint64_t v7 = v52;
  uint64_t v9 = v50;
  if (v45)
  {
    int v47 = v45;
LABEL_141:
    APSLogErrorAt();
    goto LABEL_124;
  }
  int v46 = APEndpointStreamAudioHoseAggregateRegisterWithParentRegistrar((uint64_t)cf[0]);
  if (v46)
  {
    int v47 = v46;
    goto LABEL_141;
  }
  CFDictionarySetValue(theDict, @"IsAudioDataAggregated", (const void *)*MEMORY[0x1E4F1CFD0]);
  CFDictionarySetValue(theDict, @"HoseRegistrar", cf[0]);
  *(CFTypeRef *)(v8 + 64) = cf[0];
  cf[0] = 0;
LABEL_67:
  CFNumberRef v38 = *(const void **)(v8 + 56);
  *(void *)(v8 + 56) = v10;
  if (v10) {
    CFRetain(v10);
  }
  if (v38) {
    CFRelease(v38);
  }
  CFTypeRef v39 = *(const void **)(v9 + 8);
  *(void *)(v9 + 8) = v10;
  if (v10) {
    CFRetain(v10);
  }
  if (v39) {
    CFRelease(v39);
  }
  CFTypeRef v40 = *(const void **)(v9 + 16);
  CFTypeRef v41 = *(const void **)(v8 + 136);
  *(void *)(v9 + 16) = v41;
  if (v41) {
    CFRetain(v41);
  }
  if (v40) {
    CFRelease(v40);
  }
  uint64_t v42 = *(const void **)(v8 + 72);
  *(void *)(v8 + 72) = v7;
  if (v7) {
    CFRetain(v7);
  }
  if (v42) {
    CFRelease(v42);
  }
  if (*(uint64_t *)(v9 + 24) < 1)
  {
    int v47 = 0;
LABEL_124:
    CFDataRef v43 = v53;
    goto LABEL_133;
  }
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(v8 + 32), (CFDictionaryApplierFunction)streamAggregateAudio_resumeSubStreamIterator, v7);
  CFDataRef v43 = v53;
  if (v10) {
LABEL_85:
  }
    CFRelease(v10);
LABEL_86:
  if (v43) {
    CFRelease(v43);
  }
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (!Mutable) {
    goto LABEL_93;
  }
  CFDictionaryRef v27 = Mutable;
LABEL_92:
  CFRelease(v27);
LABEL_93:
  uint64_t v44 = (const void *)*((void *)v4 + 1);
  if (v44) {
    CFRelease(v44);
  }
  free(v4);
LABEL_96:
  MEMORY[0x1D25EB390](*DerivedStorage);
  if (*a1) {
    CFRelease(*a1);
  }
}

void streamAggregateAudio_setResumptionStageAndNotifyIfNeeded(uint64_t a1, unsigned int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v4 = streamAggregateAudio_isInUse(a2);
  int v5 = streamAggregateAudio_isInUse(*(_DWORD *)(DerivedStorage + 48));
  if (*(_DWORD *)(DerivedStorage + 48) == 3 && (a2 == 4 || a2 == 2))
  {
    if (gLogCategory_APEndpointStreamAggregateAudio <= 30
      && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
  }
  if (v5 == v4) {
    goto LABEL_18;
  }
  CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    uint64_t v7 = Mutable;
    uint64_t v8 = (const void **)MEMORY[0x1E4F1CFC8];
    if (v4) {
      uint64_t v8 = (const void **)MEMORY[0x1E4F1CFD0];
    }
    CFDictionarySetValue(Mutable, @"IsInUse", *v8);
    if (gLogCategory_APEndpointStreamAggregateAudio <= 30
      && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    CFRelease(v7);
LABEL_18:
    *(_DWORD *)(DerivedStorage + 48) = a2;
    return;
  }
  APSLogErrorAt();
}

uint64_t streamAggregateAudio_resumeSubStreamIterator(uint64_t a1, uint64_t a2, CFTypeRef a3)
{
  uint64_t Value = APSWrapperGetValue();
  uint64_t v6 = *(void *)(Value + 16);
  uint64_t CMBaseObject = FigEndpointStreamGetCMBaseObject();
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  CFDictionaryRef v10 = *(void (**)(uint64_t, void, uint64_t))(v9 + 56);
  if (v10) {
    v10(CMBaseObject, *MEMORY[0x1E4F21350], v6);
  }
  uint64_t v11 = *(void *)(Value + 8);
  if (a3) {
    a3 = CFRetain(a3);
  }
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v15 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v14 = v15;
  if (v15) {
    uint64_t v16 = v14;
  }
  else {
    uint64_t v16 = 0;
  }
  CFRange v17 = *(uint64_t (**)(uint64_t, uint64_t, void (*)(const void *, int, const void *), CFTypeRef))(v16 + 16);
  if (v17)
  {
    return v17(a2, v11, streamAggregateAudio_resumeSubStreamCallback, a3);
  }
  return result;
}

void streamAggregateAudio_resumeCallClientCallback()
{
  uint64_t Value = (CFTypeRef *)APSWrapperGetValue();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamAggregateAudio <= 50
    && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFDictionaryRef v2 = *(const __CFDictionary **)(DerivedStorage + 56);
  if (v2)
  {
    CFTypeID v3 = *(const void **)(DerivedStorage + 80);
    int v4 = CFDictionaryGetValue(v2, @"HoseRegistrar");
    *(void *)(DerivedStorage + 80) = v4;
    if (v4) {
      CFRetain(v4);
    }
    if (v3) {
      CFRelease(v3);
    }
  }
  CFRetain(*Value);
  APSDispatchAsyncFHelper();
  streamAggregateAudio_setResumptionStageAndNotifyIfNeeded((uint64_t)*Value, 4u);
}

void streamAggregateAudio_resumeCompletion()
{
  uint64_t Value = APSWrapperGetValue();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(Value + 56))
  {
    if (gLogCategory_APEndpointStreamAggregateAudio <= 50
      && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    uint64_t v2 = *(void *)(DerivedStorage + 64);
    if (v2
      && (APEndpointStreamAudioHoseAggregateDeregisterWithParentRegistrar(v2),
          (CFTypeID v3 = *(const void **)(DerivedStorage + 64)) != 0))
    {
      CFRelease(v3);
      unsigned int v4 = 0;
      *(void *)(DerivedStorage + 64) = 0;
    }
    else
    {
      unsigned int v4 = 0;
    }
  }
  else
  {
    if (gLogCategory_APEndpointStreamAggregateAudio <= 50
      && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    unsigned int v4 = 2;
  }
  streamAggregateAudio_setResumptionStageAndNotifyIfNeeded(*(void *)Value, v4);
  int v5 = *(const void **)(DerivedStorage + 72);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(DerivedStorage + 72) = 0;
  }
  streamAggregateAudio_triggerSuspendOrResumeIfNecessary(*(const void **)Value);
  uint64_t v6 = *(NSObject **)(Value + 48);
  if (v6)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(Value + 48));
    dispatch_release(v6);
    *(void *)(Value + 48) = 0;
  }
}

void streamAggregateAudio_resumeSubStreamCallback(const void *a1, int a2, const void *a3)
{
  uint64_t Value = APSWrapperGetValue();
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1D25EB370](*DerivedStorage);
  v8.i64[0] = -1;
  v8.i64[1] = -1;
  *(int64x2_t *)(Value + 24) = vaddq_s64(*(int64x2_t *)(Value + 24), v8);
  if (a2)
  {
    if (gLogCategory_APEndpointStreamAggregateAudio > 90
      || gLogCategory_APEndpointStreamAggregateAudio == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_13;
    }
    goto LABEL_8;
  }
  CFArrayRef v9 = (const __CFArray *)DerivedStorage[5];
  v11.length = CFArrayGetCount(v9);
  v11.location = 0;
  if (CFArrayGetFirstIndexOfValue(v9, v11, a1) != -1)
  {
    if (gLogCategory_APEndpointStreamAggregateAudio > 50
      || gLogCategory_APEndpointStreamAggregateAudio == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_13;
    }
LABEL_8:
    LogPrintF();
    goto LABEL_13;
  }
  CFArrayAppendValue((CFMutableArrayRef)DerivedStorage[5], a1);
LABEL_13:
  if (*(unsigned char *)(Value + 41) && *(uint64_t *)(Value + 32) < 1 || *(uint64_t *)(Value + 24) <= 0)
  {
    if (!*(unsigned char *)(Value + 40))
    {
      streamAggregateAudio_resumeCallClientCallback();
      *(unsigned char *)(Value + 40) = 1;
    }
    if (*(uint64_t *)(Value + 24) <= 0) {
      streamAggregateAudio_resumeCompletion();
    }
  }
  MEMORY[0x1D25EB390](*DerivedStorage);
  if (a3)
  {
    CFRelease(a3);
  }
}

void streamAggregateAudio_streamNotificationQueueCallback(uint64_t a1)
{
  uint64_t v2 = *(void (**)(void, void, void))(a1 + 24);
  if (v2) {
    v2(*(void *)a1, *(unsigned int *)(a1 + 8), *(void *)(a1 + 16));
  }
  CFTypeID v3 = *(const void **)a1;
  CFRelease(v3);
}

uint64_t streamAggregateAudio_suspendSubStreamIterator(uint64_t a1, uint64_t a2, CFTypeRef a3)
{
  uint64_t v5 = *(void *)(APSWrapperGetValue() + 8);
  if (a3) {
    a3 = CFRetain(a3);
  }
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v9 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v8 = v9;
  if (v9) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = 0;
  }
  CFRange v11 = *(uint64_t (**)(uint64_t, uint64_t, void (*)(const void *, int, const void *), CFTypeRef))(v10 + 8);
  if (v11)
  {
    return v11(a2, v5, streamAggregateAudio_suspendSubStreamCallback, a3);
  }
  return result;
}

uint64_t streamAggregateAudio_suspendCompletion()
{
  uint64_t Value = (uint64_t *)APSWrapperGetValue();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamAggregateAudio <= 50
    && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_DWORD *)(DerivedStorage + 48) == 1)
  {
    streamAggregateAudio_setResumptionStageAndNotifyIfNeeded(*Value, 0);
    uint64_t v2 = *(const void **)(DerivedStorage + 56);
    if (v2)
    {
      CFRelease(v2);
      *(void *)(DerivedStorage + 56) = 0;
    }
    CFTypeID v3 = *(const void **)(DerivedStorage + 80);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(DerivedStorage + 80) = 0;
    }
  }
  CFRetain((CFTypeRef)*Value);
  APSDispatchAsyncFHelper();
  if (!*(_DWORD *)(DerivedStorage + 48) && !*((_DWORD *)Value + 14))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
  }
  uint64_t v4 = FigCFDictionaryGetValue();
  if (v4)
  {
    uint64_t v5 = (const void *)v4;
    if ((int)CFDictionaryGetInt64Ranged() > 1) {
      CFDictionarySetInt64();
    }
    else {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 104), v5);
    }
  }
  return streamAggregateAudio_triggerSuspendOrResumeIfNecessary(*Value);
}

void streamAggregateAudio_suspendSubStreamCallback(const void *a1, int a2, const void *a3)
{
  uint64_t Value = APSWrapperGetValue();
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1D25EB370](*DerivedStorage);
  --*(void *)(Value + 24);
  CFArrayRef v8 = (const __CFArray *)DerivedStorage[5];
  v11.length = CFArrayGetCount(v8);
  v11.location = 0;
  FirstIndexOfuint64_t Value = CFArrayGetFirstIndexOfValue(v8, v11, a1);
  if (FirstIndexOfValue != -1) {
    CFArrayRemoveValueAtIndex((CFMutableArrayRef)DerivedStorage[5], FirstIndexOfValue);
  }
  if (a2 != -16762) {
    *(_DWORD *)(Value + 56) = a2;
  }
  if (*(uint64_t *)(Value + 24) <= 0) {
    streamAggregateAudio_suspendCompletion();
  }
  MEMORY[0x1D25EB390](*DerivedStorage);
  if (a3)
  {
    CFRelease(a3);
  }
}

void streamAggregateAudio_resumeTimerCallback()
{
  uint64_t v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    CFArrayRef v1 = (const void *)v0;
    uint64_t Value = APSWrapperGetValue();
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    MEMORY[0x1D25EB370](*DerivedStorage);
    if (gLogCategory_APEndpointStreamAggregateAudio <= 50
      && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(unsigned char *)(Value + 41) = 1;
    uint64_t v4 = *(NSObject **)(Value + 48);
    if (v4)
    {
      dispatch_source_cancel(*(dispatch_source_t *)(Value + 48));
      dispatch_release(v4);
      *(void *)(Value + 48) = 0;
    }
    if (!*(unsigned char *)(Value + 40) && *(uint64_t *)(Value + 32) <= 0)
    {
      streamAggregateAudio_resumeCallClientCallback();
      *(unsigned char *)(Value + 40) = 1;
    }
    MEMORY[0x1D25EB390](*DerivedStorage);
    CFRelease(v1);
  }
}

void streamAggregateAudio_resumerTimerCancelled(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t streamAggregateAudio_genericCoreCaptureIterator(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = a3[1];
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v9 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v8 = v9;
  if (v9) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = 0;
  }
  CFRange v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 40);
  if (v11)
  {
    return v11(a2, v4, v5);
  }
  return result;
}

uint64_t streamAggregateAudio_copyTransportFormatDescriptionForSourceContentFormatDescription(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t FigEndpointStream = FigEndpointStreamAirPlayGetFigEndpointStream();
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v6 = DerivedStorage;
  CFTypeRef v14 = 0;
  if (!a3)
  {
    APSLogErrorAt();
    uint64_t v12 = 4294950536;
    goto LABEL_21;
  }
  MEMORY[0x1D25EB370](*DerivedStorage);
  if (!CFEqual((CFTypeRef)v6[24], (CFTypeRef)*MEMORY[0x1E4F21470]))
  {
    APSLogErrorAt();
    uint64_t v12 = 4294954514;
    goto LABEL_21;
  }
  uint64_t v7 = streamAggregateAudio_copySupportedAudioFormatForBufferAudio(FigEndpointStream, (uint64_t)&v14);
  if (v7)
  {
    uint64_t v12 = v7;
    goto LABEL_31;
  }
  if (*((unsigned char *)v6 + 153) && streamAggregateAudio_getTotalNumberOfAudioStreams() >= 3)
  {
    uint64_t v8 = APSAudioFormatDescriptionListCreate();
    if (v8)
    {
      uint64_t v12 = v8;
    }
    else
    {
      uint64_t v9 = APSAudioFormatDescriptionListAddSupportedFormatsForALACToList();
      if (v9)
      {
        uint64_t v12 = v9;
      }
      else
      {
        uint64_t v10 = APSAudioFormatDescriptionListAddSupportedEncryptedALACFormatsForPassthrough();
        if (v10)
        {
          uint64_t v12 = v10;
        }
        else
        {
          uint64_t RelativeComplementList = APSAudioFormatDescriptionListCreateRelativeComplementList();
          if (RelativeComplementList)
          {
            uint64_t v12 = RelativeComplementList;
          }
          else
          {
            APSAudioFormatDescriptionListCopyDebugString();
            if (gLogCategory_APEndpointStreamAggregateAudio <= 50
              && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            uint64_t v12 = APSAudioFormatDescriptionListCopyTransportFormatDescriptionForSourceFormatDescription();
            if (!v12) {
              goto LABEL_21;
            }
          }
        }
      }
    }
LABEL_31:
    APSLogErrorAt();
    goto LABEL_21;
  }
  APSAudioFormatDescriptionListCopyDebugString();
  if (gLogCategory_APEndpointStreamAggregateAudio <= 50
    && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v12 = APSAudioFormatDescriptionListCopyTransportFormatDescriptionForSourceFormatDescription();
  if (v12) {
    goto LABEL_31;
  }
LABEL_21:
  MEMORY[0x1D25EB390](*v6);
  if (v14) {
    CFRelease(v14);
  }
  return v12;
}

uint64_t streamAggregateAudio_isPassthroughSupportedForFormatDescription(uint64_t a1, uint64_t a2, char *a3)
{
  FigEndpointStreamAirPlayGetFigEndpointStream();
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  char v15 = 1;
  MEMORY[0x1D25EB370](*DerivedStorage);
  if (a3)
  {
    CFArrayRef v6 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
    CFIndex Count = CFArrayGetCount(v6);
    if (Count >= 1)
    {
      CFIndex v8 = Count;
      CFIndex v9 = 0;
      while (1)
      {
        ValueAtunsigned int Index = CFArrayGetValueAtIndex(v6, v9);
        FigEndpointStreamAirPlayGetClassID();
        if (!CMBaseObjectIsMemberOfClass() || !ValueAtIndex) {
          break;
        }
        uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 24);
        if (v11) {
          uint64_t v12 = v11;
        }
        else {
          uint64_t v12 = 0;
        }
        uint64_t v13 = *(unsigned int (**)(const void *, uint64_t, char *))(v12 + 32);
        if (!v13 || v13(ValueAtIndex, a2, &v15))
        {
          if (gLogCategory_APEndpointStreamAggregateAudio <= 50
            && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          char v15 = 0;
LABEL_23:
          if (gLogCategory_APEndpointStreamAggregateAudio <= 50
            && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          goto LABEL_30;
        }
        if (!v15) {
          goto LABEL_23;
        }
        if (v8 == ++v9) {
          goto LABEL_30;
        }
      }
      if (gLogCategory_APEndpointStreamAggregateAudio <= 50
        && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      char v15 = 0;
    }
LABEL_30:
    *a3 = v15;
    MEMORY[0x1D25EB390](*DerivedStorage);
    if (v6) {
      CFRelease(v6);
    }
    return 0;
  }
  else
  {
    APSLogErrorAt();
    MEMORY[0x1D25EB390](*DerivedStorage);
    return 4294950536;
  }
}

void __streamAggregateAudio_registerForAirPlayPrefsChangedNotification_block_invoke(uint64_t a1)
{
  dispatch_get_context(*(dispatch_object_t *)(a1 + 32));
  uint64_t v1 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v1)
  {
    uint64_t v2 = (const void *)v1;
    CMBaseObjectGetDerivedStorage();
    if (gLogCategory_APEndpointStreamAggregateAudio <= 50
      && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    CFRelease(v2);
  }
}

void streamAggregateAudio_addSubStream(void *a1, const void *a2, void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  char v17 = 0;
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)(DerivedStorage + 32), a2))
  {
    if (gLogCategory_APEndpointStreamAggregateAudio <= 30
      && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return;
  }
  if (APSGetFBOPropertyInt64())
  {
    if (gLogCategory_APEndpointStreamAggregateAudio <= 50
      && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    uint64_t v7 = *(const void **)(DerivedStorage + 128);
    if (v7 && gLogCategory_APEndpointStreamAggregateAudio <= 90)
    {
      if (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()) {
        LogPrintF();
      }
      uint64_t v7 = *(const void **)(DerivedStorage + 128);
    }
    *(void *)(DerivedStorage + 128) = a3;
    if (a3) {
      CFRetain(a3);
    }
    if (v7) {
      CFRelease(v7);
    }
    CFDictionaryApplyFunction(*(CFDictionaryRef *)(DerivedStorage + 120), (CFDictionaryApplierFunction)streamAggregateAudio_setPropertyForLocalSubStreamIterator, a1);
  }
  if (gLogCategory_APEndpointStreamAggregateAudio <= 50
    && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  FigCFDictionarySetValue();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  streamAggregateAudio_updateDynamicProperties((uint64_t)a1, &v17);
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(DerivedStorage + 112), (CFDictionaryApplierFunction)streamAggregateAudio_setPropertiesForSubStreamIterator, a3);
  if (*(unsigned char *)(DerivedStorage + 153) && streamAggregateAudio_getTotalNumberOfAudioStreams() >= 3)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable)
    {
      APSLogErrorAt();
      goto LABEL_63;
    }
    CFMutableDictionaryRef v9 = Mutable;
    FigCFDictionarySetBoolean();
    if (gLogCategory_APEndpointStreamAggregateAudio <= 50
      && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
  }
  else
  {
    CFMutableDictionaryRef v9 = 0;
  }
  int v10 = *(_DWORD *)(DerivedStorage + 48);
  if (v10 != 2 || v17)
  {
    if ((v10 - 3) > 1) {
      return;
    }
    CFTypeRef v14 = *(CFTypeRef *)(DerivedStorage + 72);
    if (v14) {
      CFTypeRef v14 = CFRetain(v14);
    }
    CFTypeRef cf = v14;
    uint64_t Value = (void *)APSWrapperGetValue();
    ++Value[3];
    if (gLogCategory_APEndpointStreamAggregateAudio <= 50)
    {
      if (gLogCategory_APEndpointStreamAggregateAudio != -1
        || (uint64_t Value = (void *)_LogCategory_Initialize(), Value))
      {
        uint64_t Value = (void *)LogPrintF();
      }
    }
LABEL_59:
    if (cf) {
      streamAggregateAudio_resumeSubStreamIterator((uint64_t)Value, (uint64_t)a3, cf);
    }
    if (!v9) {
      goto LABEL_63;
    }
    goto LABEL_62;
  }
  uint64_t v11 = malloc_type_calloc(1uLL, 0x50uLL, 0x10E0040B3C43913uLL);
  *uint64_t v11 = CFRetain(a1);
  CFTypeRef v12 = *(CFTypeRef *)(DerivedStorage + 56);
  if (v12) {
    CFTypeRef v12 = CFRetain(v12);
  }
  v11[1] = v12;
  CFTypeRef v13 = *(CFTypeRef *)(DerivedStorage + 136);
  if (v13) {
    CFTypeRef v13 = CFRetain(v13);
  }
  v11[2] = v13;
  v11[3] = 1;
  *((_DWORD *)v11 + 14) = 0;
  v11[8] = 0;
  v11[9] = 0;
  streamAggregateAudio_setResumptionStageAndNotifyIfNeeded((uint64_t)a1, 4u);
  if (gLogCategory_APEndpointStreamAggregateAudio <= 50
    && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!APSWrapperCreate())
  {
    uint64_t v16 = *(const void **)(DerivedStorage + 72);
    uint64_t Value = cf;
    *(void *)(DerivedStorage + 72) = cf;
    if (Value) {
      uint64_t Value = CFRetain(Value);
    }
    if (v16) {
      CFRelease(v16);
    }
    goto LABEL_59;
  }
  APSLogErrorAt();
  streamAggregateAudio_finalizeSharedContextWrapper((const void **)cf);
  if (v9) {
LABEL_62:
  }
    CFRelease(v9);
LABEL_63:
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t streamAggregateAudio_setPropertyForLocalSubStreamIterator(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (*(void *)(result + 128))
  {
    uint64_t result = FigCFEqual();
    if (!result)
    {
      uint64_t result = FigCFEqual();
      if (result)
      {
        uint64_t result = streamAggregateAudio_setAndCacheBufferedLocalVolume(a3, a2);
        if (result)
        {
          return APSLogErrorAt();
        }
      }
    }
  }
  return result;
}

uint64_t streamAggregateAudio_setPropertiesForSubStreamIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[1] = a2;
  v4[2] = 0;
  v4[0] = a1;
  return streamAggregateAudio_setPropertyForSubStreamsIterator(a1, a3, v4);
}

uint64_t SPHubbedDevicesProviderHomeHubCreate(uint64_t a1, void *a2)
{
  *a2 = 0;
  return 4294960561;
}

CFStringRef carPlayAnalytics_createAnalyticsKeyForStreamType(int a1, CFStringRef format, uint64_t a3)
{
  uint64_t v3 = a3 - 96;
  if (unint64_t)(a3 - 96) < 0x19 && ((0x100FCF1u >> v3))
  {
    uint64_t v4 = off_1E68939F0[v3];
  }
  else
  {
    uint64_t v4 = "?";
    if (a3 == 130) {
      uint64_t v4 = "RemoteControl";
    }
  }
  return CFStringCreateStringWithValidatedFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%s", format, 0, v4);
}

uint64_t APCarPlayAnalyticsGetTypeID()
{
  if (gAPCarPlayAnalyticsInitOnce != -1) {
    dispatch_once_f(&gAPCarPlayAnalyticsInitOnce, 0, (dispatch_function_t)_APCarPlayAnalyticsGetTypeID);
  }
  return gAPCarPlayAnalyticsTypeID;
}

uint64_t _APCarPlayAnalyticsGetTypeID()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gAPCarPlayAnalyticsTypeID = result;
  return result;
}

uint64_t APCarPlayAnalyticsCreate(uint64_t a1, uint64_t *a2)
{
  if (gAPCarPlayAnalyticsInitOnce != -1) {
    dispatch_once_f(&gAPCarPlayAnalyticsInitOnce, 0, (dispatch_function_t)_APCarPlayAnalyticsGetTypeID);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v4 = Instance;
    *(void *)(Instance + 400) = 0;
    *(_OWORD *)(Instance + 368) = 0u;
    *(_OWORD *)(Instance + 384) = 0u;
    *(_OWORD *)(Instance + 336) = 0u;
    *(_OWORD *)(Instance + 352) = 0u;
    *(_OWORD *)(Instance + 304) = 0u;
    *(_OWORD *)(Instance + 320) = 0u;
    *(_OWORD *)(Instance + 272) = 0u;
    *(_OWORD *)(Instance + 288) = 0u;
    *(_OWORD *)(Instance + 240) = 0u;
    *(_OWORD *)(Instance + 256) = 0u;
    *(_OWORD *)(Instance + 208) = 0u;
    *(_OWORD *)(Instance + 224) = 0u;
    *(_OWORD *)(Instance + 176) = 0u;
    *(_OWORD *)(Instance + 192) = 0u;
    *(_OWORD *)(Instance + 144) = 0u;
    *(_OWORD *)(Instance + 160) = 0u;
    *(_OWORD *)(Instance + 112) = 0u;
    *(_OWORD *)(Instance + 128) = 0u;
    *(_OWORD *)(Instance + 80) = 0u;
    *(_OWORD *)(Instance + 96) = 0u;
    *(_OWORD *)(Instance + 48) = 0u;
    *(_OWORD *)(Instance + 64) = 0u;
    *(_OWORD *)(Instance + 16) = 0u;
    *(_OWORD *)(Instance + 32) = 0u;
    *(void *)(Instance + 16) = dispatch_queue_create("com.apple.APCarPlayAnalytics", 0);
    if (gLogCategory_APCarPlayAnalytics <= 40
      && (gLogCategory_APCarPlayAnalytics != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    uint64_t result = 0;
    *a2 = v4;
  }
  else
  {
    APSLogErrorAt();
    return 4294960568;
  }
  return result;
}

uint64_t APCarPlayAnalyticsSubmitToCarPlay(NSObject **cf)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2000000000;
  int v9 = 0;
  if (cf) {
    CFRetain(cf);
  }
  uint64_t v2 = cf[2];
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = __APCarPlayAnalyticsSubmitToCarPlay_block_invoke;
  void v5[3] = &unk_1E68938D8;
  v5[4] = &v6;
  v5[5] = cf;
  dispatch_async(v2, v5);
  uint64_t v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void __APCarPlayAnalyticsSubmitToCarPlay_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    APSLogErrorAt();
    int v22 = -6729;
    goto LABEL_39;
  }
  uint64_t v4 = Mutable;
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v6 = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t v7 = v6;
  if (*(int *)(v2 + 112) >= 1)
  {
    carPlayAnalytics_addValueToReportingString(@"nmnl", v6, *(double *)(v2 + 184));
    carPlayAnalytics_addValueToReportingString(@"mean", v7, *(double *)(v2 + 88));
    carPlayAnalytics_addValueToReportingString(@"stdv", v7, *(double *)(v2 + 104));
    carPlayAnalytics_addValueToReportingString(@"imean", v7, *(double *)(v2 + 152));
    carPlayAnalytics_addValueToReportingString(@"istdv", v7, *(double *)(v2 + 168));
    CFStringRef AnalyticsKeyForStreamType = carPlayAnalytics_createAnalyticsKeyForStreamType(v8, @"APCarPlay_%s_audioSampleRateStatistics", *(unsigned int *)(v2 + 32));
    CFDictionarySetValue(v4, AnalyticsKeyForStreamType, v7);
    if (!v7) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  CFStringRef AnalyticsKeyForStreamType = 0;
  if (v6) {
LABEL_4:
  }
    CFRelease(v7);
LABEL_5:
  if (AnalyticsKeyForStreamType) {
    CFRelease(AnalyticsKeyForStreamType);
  }
  CFMutableStringRef v10 = CFStringCreateMutable(v5, 0);
  unsigned int v11 = 2 * *(_DWORD *)(v2 + 24);
  if (v11)
  {
    if (v11 % 0x3C) {
      unint64_t v12 = v11 / 0x3CuLL + 1;
    }
    else {
      unint64_t v12 = v11 / 0x3CuLL;
    }
    if (!v12)
    {
LABEL_14:
      if (!v10) {
        goto LABEL_16;
      }
      goto LABEL_15;
    }
    carPlayAnalytics_addAnomalyToReportingStringIfExists(v2 + 200, v12, v10);
    carPlayAnalytics_addAnomalyToReportingStringIfExists(v2 + 264, v12, v10);
    carPlayAnalytics_addAnomalyToReportingStringIfExists(v2 + 232, v12, v10);
    carPlayAnalytics_addAnomalyToReportingStringIfExists(v2 + 296, v12, v10);
    carPlayAnalytics_addAnomalyToReportingStringIfExists(v2 + 328, v12, v10);
    carPlayAnalytics_addAnomalyToReportingStringIfExists(v2 + 360, v12, v10);
    CFIndex Length = CFStringGetLength(v10);
    if (Length >= 1)
    {
      unint64_t v12 = (unint64_t)carPlayAnalytics_createAnalyticsKeyForStreamType(Length, @"APCarPlay_%s_audioPercentageWithAnomalies", *(unsigned int *)(v2 + 32));
      CFDictionarySetValue(v4, (const void *)v12, v10);
      goto LABEL_14;
    }
  }
  unint64_t v12 = 0;
  if (v10) {
LABEL_15:
  }
    CFRelease(v10);
LABEL_16:
  if (v12) {
    CFRelease((CFTypeRef)v12);
  }
  CFMutableStringRef v14 = CFStringCreateMutable(v5, 0);
  if (*(unsigned char *)(v2 + 392) && CFSetGetCount(*(CFSetRef *)(v2 + 400)) >= 1)
  {
    size_t Count = CFSetGetCount(*(CFSetRef *)(v2 + 400));
    uint64_t v16 = (const void **)malloc_type_calloc(Count, 8uLL, 0xC0040B8AA526DuLL);
    CFSetGetValues(*(CFSetRef *)(v2 + 400), v16);
    CFIndex v17 = CFSetGetCount(*(CFSetRef *)(v2 + 400));
    if (v17 >= 1)
    {
      for (CFIndex i = 0; i < v17; ++i)
      {
        uint64_t v19 = v16[i];
        if (CFStringGetLength(v14)) {
          uint64_t v20 = " ";
        }
        else {
          uint64_t v20 = "";
        }
        CFStringAppendFormat(v14, 0, @"%s%@", v20, v19);
        CFIndex v17 = CFSetGetCount(*(CFSetRef *)(v2 + 400));
      }
    }
    CFStringRef v21 = carPlayAnalytics_createAnalyticsKeyForStreamType(v17, @"APCarPlay_%s_audioFormats", *(unsigned int *)(v2 + 32));
    CFDictionarySetValue(v4, v21, v14);
    if (!v14) {
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v16 = 0;
    CFStringRef v21 = 0;
    if (!v14) {
      goto LABEL_28;
    }
  }
  CFRelease(v14);
LABEL_28:
  if (v21) {
    CFRelease(v21);
  }
  free(v16);
  if (CFDictionaryGetCount(v4) >= 1)
  {
    if (gLogCategory_APCarPlayAnalytics <= 50
      && (gLogCategory_APCarPlayAnalytics != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    APCarPlay_AddAnalyticsValues(v4, @"SessionEnded");
  }
  CFRelease(v4);
  int v22 = 0;
LABEL_39:
  uint64_t v23 = *(const void **)(a1 + 40);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v22;
  if (v23)
  {
    CFRelease(v23);
  }
}

uint64_t APCarPlayAnalyticsInitASRCollection(uint64_t a1, double a2)
{
  uint64_t v8 = 0;
  int v9 = &v8;
  uint64_t v10 = 0x2000000000;
  int v11 = 0;
  if (gLogCategory_APCarPlayAnalytics <= 50
    && (gLogCategory_APCarPlayAnalytics != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a2 <= 0.0)
  {
    APSLogErrorAt();
    uint64_t v5 = 4294960591;
    *((_DWORD *)v9 + 6) = -6705;
  }
  else
  {
    uint64_t v4 = *(NSObject **)(a1 + 16);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __APCarPlayAnalyticsInitASRCollection_block_invoke;
    block[3] = &unk_1E6893900;
    block[4] = &v8;
    void block[5] = a1;
    *(double *)&block[6] = a2;
    dispatch_sync(v4, block);
    uint64_t v5 = *((unsigned int *)v9 + 6);
  }
  _Block_object_dispose(&v8, 8);
  return v5;
}

uint64_t __APCarPlayAnalyticsInitASRCollection_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(unsigned char *)(v2 + 28))
  {
    uint64_t result = APSLogErrorAt();
    int v5 = -6709;
  }
  else
  {
    double v3 = *(double *)(a1 + 48);
    *(unsigned char *)(v2 + 49) = *(double *)(v2 + 184) != v3;
    *(double *)(v2 + 184) = v3;
    APSDataSetStatisticsInit();
    uint64_t result = APSDataSetStatisticsInit();
    int v5 = 0;
    *(unsigned char *)(v2 + 48) = 1;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v5;
  return result;
}

uint64_t APCarPlayAnalyticsInitAudioAnomaliesCollection(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2000000000;
  int v9 = 0;
  if (gLogCategory_APCarPlayAnalytics <= 50
    && (gLogCategory_APCarPlayAnalytics != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v2 = *(NSObject **)(a1 + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __APCarPlayAnalyticsInitAudioAnomaliesCollection_block_invoke;
  block[3] = &unk_1E6893928;
  block[4] = &v6;
  void block[5] = a1;
  dispatch_sync(v2, block);
  uint64_t v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t __APCarPlayAnalyticsInitAudioAnomaliesCollection_block_invoke(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 40);
  int v3 = *(unsigned __int8 *)(v2 + 28);
  if (*(unsigned char *)(v2 + 28))
  {
    uint64_t result = APSLogErrorAt();
    int v3 = -6709;
  }
  else
  {
    *(void *)(v2 + 384) = 0;
    *(_OWORD *)(v2 + 352) = 0u;
    *(_OWORD *)(v2 + 368) = 0u;
    *(_OWORD *)(v2 + 320) = 0u;
    *(_OWORD *)(v2 + 336) = 0u;
    *(_OWORD *)(v2 + 288) = 0u;
    *(_OWORD *)(v2 + 304) = 0u;
    *(_OWORD *)(v2 + 256) = 0u;
    *(_OWORD *)(v2 + 272) = 0u;
    *(_OWORD *)(v2 + 224) = 0u;
    *(_OWORD *)(v2 + 240) = 0u;
    *(_OWORD *)(v2 + 192) = 0u;
    *(_OWORD *)(v2 + 208) = 0u;
    *(void *)(v2 + 200) = @"glct";
    *(void *)(v2 + 232) = @"lost";
    *(_WORD *)(v2 + 192) = 1;
    *(void *)(v2 + 264) = @"late";
    *(void *)(v2 + 296) = @"unre";
    *(_DWORD *)(v2 + 224) = 3;
    *(_DWORD *)(v2 + 256) = 3;
    *(_DWORD *)(v2 + 288) = 3;
    *(_DWORD *)(v2 + 320) = 3;
    *(void *)(v2 + 328) = @"rtsn";
    *(_DWORD *)(v2 + 352) = 1;
    *(void *)(v2 + 360) = @"rtfu";
    *(_DWORD *)(v2 + 384) = 1;
  }
  *(_DWORD *)(*(void *)(*(void *)(v1 + 32) + 8) + 24) = v3;
  return result;
}

uint64_t APCarPlayAnalyticsInitAudioFormatsCollection(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2000000000;
  int v9 = 0;
  if (gLogCategory_APCarPlayAnalytics <= 50
    && (gLogCategory_APCarPlayAnalytics != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v2 = *(NSObject **)(a1 + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __APCarPlayAnalyticsInitAudioFormatsCollection_block_invoke;
  block[3] = &unk_1E6893950;
  block[4] = &v6;
  void block[5] = a1;
  dispatch_sync(v2, block);
  uint64_t v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void __APCarPlayAnalyticsInitAudioFormatsCollection_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(unsigned char *)(v2 + 28))
  {
    APSLogErrorAt();
    int v4 = -6709;
  }
  else
  {
    *(_WORD *)(v2 + 392) = 1;
    CFMutableDictionaryRef Mutable = *(__CFSet **)(v2 + 400);
    if (!Mutable)
    {
      CFMutableDictionaryRef Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D548]);
      *(void *)(v2 + 400) = Mutable;
    }
    CFSetRemoveAllValues(Mutable);
    int v4 = 0;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v4;
}

uint64_t APCarPlayAnalyticsCollectFromFeedbackResponse(void *a1, CFTypeRef cf, const void *a3)
{
  if (cf && (CFTypeID v6 = CFGetTypeID(cf), v6 == CFDictionaryGetTypeID()))
  {
    if (a1) {
      CFRetain(a1);
    }
    CFRetain(cf);
    if (a3) {
      CFRetain(a3);
    }
    uint64_t v7 = a1[2];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __APCarPlayAnalyticsCollectFromFeedbackResponse_block_invoke;
    block[3] = &__block_descriptor_tmp_26_1;
    block[4] = a1;
    void block[5] = cf;
    void block[6] = a3;
    dispatch_async(v7, block);
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
}

void __APCarPlayAnalyticsCollectFromFeedbackResponse_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  if (*(unsigned char *)(v2 + 28))
  {
    CFDictionaryRef v4 = (const __CFDictionary *)a1[5];
    uint64_t v3 = a1[6];
    ++*(_DWORD *)(v2 + 24);
    if (*(unsigned char *)(v2 + 48))
    {
      CFArrayGetTypeID();
      TypedCFDictionaryRef Value = (const __CFArray *)CFDictionaryGetTypedValue();
      if (!TypedValue) {
        goto LABEL_16;
      }
      CFArrayGetCount(TypedValue);
      CFArrayApplyBlock();
    }
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v4, @"statsDictionary");
    CFDictionaryRef v7 = Value;
    int v8 = *(unsigned __int8 *)(v2 + 192);
    if (Value) {
      BOOL v9 = v8 == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9)
    {
      CFDictionaryApplyFunction(Value, (CFDictionaryApplierFunction)carPlayAnalytics_collectAudioAnomaliesFromStreamIfPresent, (void *)v2);
      int v8 = *(unsigned __int8 *)(v2 + 192);
    }
    if (v3 && v8)
    {
      carPlayAnalytics_updateAnomalyCounter(v2, v3, v2 + 328);
      carPlayAnalytics_updateAnomalyCounter(v2, v3, v2 + 360);
    }
    if (v7 && *(unsigned char *)(v2 + 392)) {
      CFDictionaryApplyFunction(v7, (CFDictionaryApplierFunction)carPlayAnalytics_collectAudioFormatsFromStreamIfPresent, (void *)v2);
    }
  }
LABEL_16:
  uint64_t v10 = (const void *)a1[4];
  if (v10) {
    CFRelease(v10);
  }
  int v11 = (const void *)a1[5];
  if (v11) {
    CFRelease(v11);
  }
  unint64_t v12 = (const void *)a1[6];
  if (v12) {
    CFRelease(v12);
  }
}

void APCarPlayAnalyticsStartCollections(uint64_t a1, int a2, uint64_t a3, char a4)
{
  if (gLogCategory_APCarPlayAnalytics <= 50
    && (gLogCategory_APCarPlayAnalytics != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  int v8 = *(NSObject **)(a1 + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __APCarPlayAnalyticsStartCollections_block_invoke;
  block[3] = &__block_descriptor_tmp_28_1;
  int v10 = a2;
  block[4] = a1;
  void block[5] = a3;
  char v11 = a4;
  dispatch_sync(v8, block);
}

uint64_t __APCarPlayAnalyticsStartCollections_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(unsigned __int8 *)(v1 + 48) | *(unsigned __int8 *)(v1 + 192) | *(unsigned __int8 *)(v1 + 392))
  {
    int v2 = *(_DWORD *)(result + 48);
    uint64_t v3 = *(void *)(result + 40);
    if (*(unsigned __int8 *)(v1 + 193) | *(unsigned __int8 *)(result + 52) | *(unsigned __int8 *)(v1 + 49) | *(unsigned __int8 *)(v1 + 393))
    {
      if (gLogCategory_APCarPlayAnalytics <= 50)
      {
        if (gLogCategory_APCarPlayAnalytics != -1 || (uint64_t result = _LogCategory_Initialize(), result)) {
          uint64_t result = LogPrintF();
        }
      }
      *(_DWORD *)(v1 + 24) = 0;
    }
    *(void *)(v1 + 40) = v3;
    *(_DWORD *)(v1 + 32) = v2;
    *(unsigned char *)(v1 + 28) = 1;
  }
  else if (gLogCategory_APCarPlayAnalytics <= 60)
  {
    if (gLogCategory_APCarPlayAnalytics != -1) {
      return LogPrintF();
    }
    uint64_t result = _LogCategory_Initialize();
    if (result) {
      return LogPrintF();
    }
  }
  return result;
}

void APCarPlayAnalyticsStopCollections(uint64_t a1)
{
  if (gLogCategory_APCarPlayAnalytics <= 50
    && (gLogCategory_APCarPlayAnalytics != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  int v2 = *(NSObject **)(a1 + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __APCarPlayAnalyticsStopCollections_block_invoke;
  block[3] = &__block_descriptor_tmp_30;
  block[4] = a1;
  dispatch_sync(v2, block);
}

uint64_t __APCarPlayAnalyticsStopCollections_block_invoke(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 28) = 0;
  return result;
}

void _APCarPlayAnalyticsFinalize(uint64_t a1)
{
  if (gLogCategory_APCarPlayAnalytics <= 40
    && (gLogCategory_APCarPlayAnalytics != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  int v2 = *(const void **)(a1 + 400);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 400) = 0;
  }
  uint64_t v3 = *(NSObject **)(a1 + 16);
  if (v3)
  {
    dispatch_release(v3);
    *(void *)(a1 + 16) = 0;
  }
}

void carPlayAnalytics_addValueToReportingString(uint64_t a1, __CFString *theString, double a3)
{
  if (a1 && theString)
  {
    CFIndex Length = CFStringGetLength(theString);
    CFDictionaryRef v7 = " ";
    if (!Length) {
      CFDictionaryRef v7 = "";
    }
    CFStringAppendFormat(theString, 0, @"%s%@:%.3lf", v7, a1, *(void *)&a3);
  }
  else
  {
    APSLogErrorAt();
  }
}

void carPlayAnalytics_addAnomalyToReportingStringIfExists(uint64_t a1, unint64_t a2, __CFString *theString)
{
  if (a1 && theString)
  {
    if (*(unsigned char *)(a1 + 8))
    {
      if (*(_DWORD *)(a1 + 16) < *(_DWORD *)(a1 + 24)) {
        unsigned int v3 = *(_DWORD *)(a1 + 20);
      }
      else {
        unsigned int v3 = *(_DWORD *)(a1 + 20) + 1;
      }
      *(_DWORD *)(a1 + 20) = v3;
      carPlayAnalytics_addValueToReportingString(*(void *)a1, theString, (double)v3 * 100.0 / (double)a2);
    }
  }
  else
  {
    APSLogErrorAt();
  }
}

uint64_t __carPlayAnalytics_collectFromFeedbackResponseInternal_block_invoke(uint64_t a1, CFTypeRef cf)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v2 + 48) && cf && (CFTypeID v3 = CFGetTypeID(cf), v3 == CFDictionaryGetTypeID()))
  {
    uint64_t result = CFDictionaryGetInt64();
    uint64_t v5 = result;
    uint64_t v6 = *(void *)(v2 + 40);
    if (gLogCategory_APCarPlayAnalytics <= 30)
    {
      if (gLogCategory_APCarPlayAnalytics != -1 || (uint64_t result = _LogCategory_Initialize(), result)) {
        uint64_t result = LogPrintF();
      }
    }
    if (v5 == v6)
    {
      uint64_t result = FigCFDictionaryGetDoubleIfPresent();
      if (result)
      {
        if (*(_DWORD *)(v2 + 24) > 3u)
        {
          uint64_t result = APSDataSetStatisticsAddValue();
          if (*(_DWORD *)(v2 + 24) <= 0xAu) {
            uint64_t result = APSDataSetStatisticsAddValue();
          }
          if (gLogCategory_APCarPlayAnalytics <= 40)
          {
            if (gLogCategory_APCarPlayAnalytics != -1) {
              return LogPrintF();
            }
            uint64_t result = _LogCategory_Initialize();
            if (result) {
              return LogPrintF();
            }
          }
        }
        else if (gLogCategory_APCarPlayAnalytics <= 40)
        {
          if (gLogCategory_APCarPlayAnalytics != -1) {
            return LogPrintF();
          }
          uint64_t result = _LogCategory_Initialize();
          if (result) {
            return LogPrintF();
          }
        }
      }
    }
  }
  else
  {
    return APSLogErrorAt();
  }
  return result;
}

const void *carPlayAnalytics_collectAudioAnomaliesFromStreamIfPresent(const void *result, const void *a2, uint64_t a3)
{
  if (result)
  {
    CFTypeID v5 = CFGetTypeID(result);
    uint64_t result = (const void *)CFStringGetTypeID();
    if (a2)
    {
      if ((const void *)v5 == result)
      {
        CFTypeID v6 = CFGetTypeID(a2);
        uint64_t result = (const void *)CFDictionaryGetTypeID();
        if ((const void *)v6 == result)
        {
          FigCFDictionaryGetInt32IfPresent();
          uint64_t result = (const void *)carPlayAnalytics_convertCFStringToUint64();
          CFDictionaryRef v7 = result;
          int v8 = *(const void **)(a3 + 40);
          if (gLogCategory_APCarPlayAnalytics <= 30)
          {
            if (gLogCategory_APCarPlayAnalytics != -1
              || (uint64_t result = (const void *)_LogCategory_Initialize(), result))
            {
              uint64_t result = (const void *)LogPrintF();
            }
          }
          if (v7 == v8)
          {
            carPlayAnalytics_updateAnomalyCounter(a3, (uint64_t)a2, a3 + 200);
            carPlayAnalytics_updateAnomalyCounter(a3, (uint64_t)a2, a3 + 232);
            carPlayAnalytics_updateAnomalyCounter(a3, (uint64_t)a2, a3 + 296);
            return (const void *)carPlayAnalytics_updateAnomalyCounter(a3, (uint64_t)a2, a3 + 264);
          }
        }
      }
    }
  }
  return result;
}

unint64_t carPlayAnalytics_convertCFStringToUint64()
{
  CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
  unint64_t v1 = strtoull(CStringPtrAndBufferToFree, 0, 0);
  free(0);
  return v1;
}

uint64_t carPlayAnalytics_updateAnomalyCounter(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = result;
    uint64_t result = FigCFDictionaryGetInt32IfPresent();
    if (result)
    {
      *(unsigned char *)(a3 + 8) = 1;
      if (-*(_DWORD *)(a3 + 12) >= 1) {
        *(_DWORD *)(a3 + 16) -= *(_DWORD *)(a3 + 12);
      }
      *(_DWORD *)(a3 + 12) = 0;
      HIDWORD(v5) = -286331153 * *(_DWORD *)(v4 + 24);
      LODWORD(v5) = HIDWORD(v5);
      if ((v5 >> 1) <= 0x8888888)
      {
        if (*(_DWORD *)(a3 + 16) < *(_DWORD *)(a3 + 24)) {
          int v6 = *(_DWORD *)(a3 + 20);
        }
        else {
          int v6 = *(_DWORD *)(a3 + 20) + 1;
        }
        *(_DWORD *)(a3 + 16) = 0;
        *(_DWORD *)(a3 + 20) = v6;
      }
      if (gLogCategory_APCarPlayAnalytics <= 40)
      {
        if (gLogCategory_APCarPlayAnalytics != -1) {
          return LogPrintF();
        }
        uint64_t result = _LogCategory_Initialize();
        if (result) {
          return LogPrintF();
        }
      }
    }
  }
  return result;
}

void carPlayAnalytics_collectAudioFormatsFromStreamIfPresent(const void *a1, const void *a2, uint64_t a3)
{
  if (a1)
  {
    CFTypeID v5 = CFGetTypeID(a1);
    CFTypeID TypeID = CFStringGetTypeID();
    if (a2)
    {
      if (v5 == TypeID)
      {
        CFTypeID v7 = CFGetTypeID(a2);
        if (v7 == CFDictionaryGetTypeID())
        {
          FigCFDictionaryGetInt32IfPresent();
          unint64_t v8 = carPlayAnalytics_convertCFStringToUint64();
          uint64_t v9 = *(void *)(a3 + 40);
          if (gLogCategory_APCarPlayAnalytics <= 30
            && (gLogCategory_APCarPlayAnalytics != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          if (v8 == v9 && FigCFDictionaryGetInt32IfPresent())
          {
            SInt32 = (const void *)FigCFNumberCreateSInt32();
            CFSetAddValue(*(CFMutableSetRef *)(a3 + 400), SInt32);
            if (gLogCategory_APCarPlayAnalytics <= 40
              && (gLogCategory_APCarPlayAnalytics != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            if (SInt32) {
              CFRelease(SInt32);
            }
          }
        }
      }
    }
  }
}

uint64_t APEndpointStreamInterruptibleWrapperCreate(uint64_t a1, const void *a2, const void *a3, void *a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a2 && a3)
  {
    FigEndpointStreamAirPlayGetClassID();
    uint64_t v7 = CMDerivedObjectCreate();
    if (v7)
    {
      uint64_t v11 = v7;
      APSLogErrorAt();
    }
    else
    {
      uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
      *uint64_t DerivedStorage = CFRetain(a2);
      SNPrintF();
      dispatch_queue_t v9 = dispatch_queue_create(label, 0);
      DerivedStorage[2] = v9;
      if (v9 && (SNPrintF(), dispatch_queue_t v10 = dispatch_queue_create(label, 0), (DerivedStorage[1] = v10) != 0))
      {
        if (*(void *)CMBaseObjectGetDerivedStorage())
        {
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterAddWeakListener();
        }
        DerivedStorage[5] = CFRetain(a3);
        CMNotificationCenterGetDefaultLocalCenter();
        FigBufferedAirPlayGlobalRoutingRegistryGetSharedInstance();
        FigNotificationCenterAddWeakListener();
        if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 50
          && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        uint64_t v11 = 0;
        *a4 = 0;
      }
      else
      {
        APSLogErrorAt();
        return 4294950535;
      }
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294950536;
  }
  return v11;
}

void interruptibleStreamWrapper_bufferedClientUpdateNotificationCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  if (!a2) {
    return;
  }
  if (!a5) {
    goto LABEL_15;
  }
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 50
    && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFDictionaryGetValue(a5, @"RoutingContextUUID");
  if (FigCFEqual())
  {
    if (!interruptibleStreamWrapper_resumeOrSuspendSubstreamAsNecessary()) {
      return;
    }
LABEL_15:
    APSLogErrorAt();
    return;
  }
  if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 50
    && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

uint64_t APEndpointStreamInterruptibleWrapperBeginInterruption()
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v0 = *(void **)(CMBaseObjectGetVTable() + 16);
  if (v0 && v0 == &kAPEndpointStreamInterruptibleWrapper_FigEndpointStreamClassWrapper) {
    return APSDispatchSyncTask();
  }
  APSLogErrorAt();
  return 4294954514;
}

uint64_t interruptibleStreamWrapper_beginInterruptionSync()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 50
    && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *(unsigned char *)(DerivedStorage + 32) = 1;
  uint64_t v1 = interruptibleStreamWrapper_resumeOrSuspendSubstreamAsNecessary();
  if (v1)
  {
    APSLogErrorAt();
    *(unsigned char *)(DerivedStorage + 32) = 0;
  }
  return v1;
}

uint64_t APEndpointStreamInterruptibleWrapperEndInterruption()
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v0 = *(void **)(CMBaseObjectGetVTable() + 16);
  if (v0 && v0 == &kAPEndpointStreamInterruptibleWrapper_FigEndpointStreamClassWrapper) {
    return APSDispatchSyncTask();
  }
  APSLogErrorAt();
  return 4294954514;
}

uint64_t interruptibleStreamWrapper_endInterruptionSync()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 50
    && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *(unsigned char *)(DerivedStorage + 32) = 0;
  uint64_t v1 = interruptibleStreamWrapper_resumeOrSuspendSubstreamAsNecessary();
  if (v1)
  {
    APSLogErrorAt();
    *(unsigned char *)(DerivedStorage + 32) = 1;
  }
  return v1;
}

void interruptibleStreamWrapper_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(void *)CMBaseObjectGetDerivedStorage())
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigBufferedAirPlayGlobalRoutingRegistryGetSharedInstance();
  FigNotificationCenterRemoveWeakListener();
  uint64_t v1 = *(NSObject **)(DerivedStorage + 8);
  if (v1)
  {
    dispatch_release(v1);
    *(void *)(DerivedStorage + 8) = 0;
  }
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 24);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(DerivedStorage + 24) = 0;
  }
  CFTypeID v3 = *(const void **)(DerivedStorage + 40);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 40) = 0;
  }
  uint64_t v4 = *(NSObject **)(DerivedStorage + 16);
  if (v4)
  {
    dispatch_release(v4);
    *(void *)(DerivedStorage + 16) = 0;
  }
}

CFStringRef interruptibleStreamWrapper_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v3, 0, @"<APEndpointStreamInterruptibleWrapper %p; sub: %p>",
           a1,
           *DerivedStorage);
}

uint64_t interruptibleStreamWrapper_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (FigCFEqual())
  {
    if (a4)
    {
      unint64_t v8 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
      if (!*(unsigned char *)(DerivedStorage + 48)) {
        unint64_t v8 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
      }
      CFTypeRef v9 = CFRetain(*v8);
      uint64_t result = 0;
      *a4 = v9;
    }
    else
    {
      APSLogErrorAt();
      return 4294950536;
    }
  }
  else
  {
    uint64_t CMBaseObject = FigEndpointStreamGetCMBaseObject();
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(v13 + 48);
    if (v14)
    {
      return v14(CMBaseObject, a2, a3, a4);
    }
    else
    {
      return 4294954514;
    }
  }
  return result;
}

uint64_t interruptibleStreamWrapper_SetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(unsigned char *)(DerivedStorage + 48) && FigCFEqual())
  {
    return APSSignalErrorAt();
  }
  else
  {
    uint64_t CMBaseObject = FigEndpointStreamGetCMBaseObject();
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    dispatch_queue_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 56);
    if (v10)
    {
      return v10(CMBaseObject, a2, a3);
    }
    else
    {
      return 4294954514;
    }
  }
}

uint64_t interruptibleStreamWrapper_subStreamNotificationCallback()
{
  uint64_t result = FigCFEqual();
  if (!result)
  {
    uint64_t result = FigCFEqual();
    if (!result)
    {
      if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 10
        && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      CMNotificationCenterGetDefaultLocalCenter();
      return CMNotificationCenterPostNotification();
    }
  }
  return result;
}

__CFString *interruptibleStreamWrapper_subEndpointAddRemoveObservingProtocolCopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"APEndpointStreamInterruptibleWrapper <APSubEndpointAddRemoveObservingProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t interruptibleStreamWrapper_NotifySubEndpointAdded(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v4 = *DerivedStorage;
  APSubEndpointAddRemoveObservingProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v6 = *(void *)(ProtocolVTable + 16);
  if (!v6) {
    return 4294954508;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
  if (!v7) {
    return 4294954514;
  }
  return v7(v4, a2);
}

uint64_t interruptibleStreamWrapper_NotifySubEndpointRemoved(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v4 = *DerivedStorage;
  APSubEndpointAddRemoveObservingProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v6 = *(void *)(ProtocolVTable + 16);
  if (!v6) {
    return 4294954508;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 16);
  if (!v7) {
    return 4294954514;
  }
  return v7(v4, a2);
}

uint64_t interruptibleStreamWrapper_Suspend(const void *a1, const void *a2)
{
  if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 50
    && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRetain(a1);
  if (a2) {
    CFRetain(a2);
  }
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t interruptibleStreamWrapper_Resume(const void *a1, const void *a2)
{
  if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 50
    && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRetain(a1);
  if (a2) {
    CFRetain(a2);
  }
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t interruptibleStreamWrapper_Flush()
{
  return APSDispatchSyncTask();
}

uint64_t interruptibleStreamWrapper_Dissociate()
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v1 = *DerivedStorage;
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v3 + 32);
  if (!v4) {
    return 4294954514;
  }
  return v4(v1);
}

void interruptibleStreamWrapper_suspendAsync(uint64_t a1)
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 30
    && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 48))
  {
    uint64_t v3 = DerivedStorage;
    if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 50
      && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    uint64_t v4 = *(const void **)(v3 + 24);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(v3 + 24) = 0;
    }
    *(unsigned char *)(v3 + 48) = 0;
    if (interruptibleStreamWrapper_resumeOrSuspendSubstreamAsNecessary())
    {
      APSLogErrorAt();
      *(unsigned char *)(v3 + 48) = 1;
    }
    else
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
    }
  }
  if (*(void *)(a1 + 16))
  {
    CFRetain(*(CFTypeRef *)a1);
    APSDispatchAsyncFHelper();
  }
  CFRelease(*(CFTypeRef *)a1);
  CFTypeID v5 = *(const void **)(a1 + 8);
  if (v5) {
    CFRelease(v5);
  }
}

void interruptibleStreamWrapper_completionCallback(uint64_t a1)
{
  if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  (*(void (**)(void, void, void))(a1 + 16))(*(void *)a1, *(unsigned int *)(a1 + 8), *(void *)(a1 + 24));
  uint64_t v2 = *(const void **)a1;
  CFRelease(v2);
}

uint64_t interruptibleStreamWrapper_resumeOrSuspendSubstreamAsNecessary()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = CMBaseObjectGetDerivedStorage();
  uint64_t v10 = 0;
  Shareduint64_t Instance = FigBufferedAirPlayGlobalRoutingRegistryGetSharedInstance();
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t *))(v5 + 40);
  if (!v6 || v6(SharedInstance, v3, &v10))
  {
    APSLogErrorAt();
    if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 50
      && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  else
  {
    BOOL v7 = !*(unsigned char *)(v1 + 32) && v10 <= 0 && *(unsigned char *)(v1 + 48);
    if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 50
      && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (!v7)
    {
      if (*(unsigned char *)(DerivedStorage + 49))
      {
        if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 50
          && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        uint64_t v8 = FigEndpointStreamSuspendSync();
        if (!v8)
        {
          *(unsigned char *)(DerivedStorage + 49) = 0;
          return v8;
        }
LABEL_43:
        APSLogErrorAt();
        return v8;
      }
      if (gLogCategory_APEndpointStreamInterruptibleWrapper > 50
        || gLogCategory_APEndpointStreamInterruptibleWrapper == -1 && !_LogCategory_Initialize())
      {
        return 0;
      }
LABEL_38:
      LogPrintF();
      return 0;
    }
  }
  if (*(unsigned char *)(DerivedStorage + 49))
  {
    if (gLogCategory_APEndpointStreamInterruptibleWrapper > 50
      || gLogCategory_APEndpointStreamInterruptibleWrapper == -1 && !_LogCategory_Initialize())
    {
      return 0;
    }
    goto LABEL_38;
  }
  if (!*(unsigned char *)(DerivedStorage + 48)) {
    return 0;
  }
  if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 50
    && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v8 = FigEndpointStreamResumeSync();
  if (v8) {
    goto LABEL_43;
  }
  *(unsigned char *)(DerivedStorage + 49) = 1;
  return v8;
}

void interruptibleStreamWrapper_resumeAsync(uint64_t a1)
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 30
    && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v2 = *(const void **)(a1 + 8);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 48))
  {
    uint64_t v4 = DerivedStorage;
    if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 50
      && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    uint64_t v5 = *(const void **)(v4 + 24);
    *(void *)(v4 + 24) = v2;
    if (v2) {
      CFRetain(v2);
    }
    if (v5) {
      CFRelease(v5);
    }
    *(unsigned char *)(v4 + 48) = 1;
    if (interruptibleStreamWrapper_resumeOrSuspendSubstreamAsNecessary())
    {
      APSLogErrorAt();
      *(unsigned char *)(v4 + 48) = 0;
    }
    else
    {
      if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 50
        && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
    }
  }
  if (*(void *)(a1 + 16))
  {
    CFRetain(*(CFTypeRef *)a1);
    APSDispatchAsyncFHelper();
  }
  CFRelease(*(CFTypeRef *)a1);
  uint64_t v6 = *(const void **)(a1 + 8);
  if (v6) {
    CFRelease(v6);
  }
}

uint64_t interruptibleStreamWrapper_flushSync(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v4 = *DerivedStorage;
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  BOOL v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 24);
  if (!v7) {
    return 4294954514;
  }
  return v7(v4, v1, v2);
}

uint64_t interruptibleStreamWrapper_FlushAudioDataWithinSampleRange()
{
  FigEndpointStreamAirPlayGetFigEndpointStream();
  CMBaseObjectGetDerivedStorage();
  uint64_t v0 = APSDispatchSyncTask();
  if (v0) {
    APSLogErrorAt();
  }
  return v0;
}

uint64_t interruptibleStreamWrapper_SetRateAndAnchorTimeWithCompletionCallback(const void *a1)
{
  if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRetain(a1);
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t interruptibleStreamWrapper_copyTransportFormatDescriptionForSourceContentFormatDescription(uint64_t a1, uint64_t a2, uint64_t a3)
{
  FigEndpointStreamAirPlayGetFigEndpointStream();
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v6 = *DerivedStorage;
  FigEndpointStreamAirPlayGetClassID();
  if (!CMBaseObjectIsMemberOfClass()) {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 24);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 24);
  if (!v9) {
    return 4294954514;
  }
  return v9(v6, a2, a3);
}

uint64_t interruptibleStreamWrapper_isPassthroughSupportedForFormatDescription(uint64_t a1, uint64_t a2, uint64_t a3)
{
  FigEndpointStreamAirPlayGetFigEndpointStream();
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v6 = *DerivedStorage;
  FigEndpointStreamAirPlayGetClassID();
  if (!CMBaseObjectIsMemberOfClass()) {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 24);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
  if (!v9) {
    return 4294954514;
  }
  return v9(v6, a2, a3);
}

uint64_t interruptibleStreamWrapper_flushAudioDataWithinSampleRangeSync(uint64_t a1)
{
  long long v7 = *(_OWORD *)(a1 + 8);
  long long v8 = *(_OWORD *)(a1 + 24);
  long long v9 = *(_OWORD *)(a1 + 40);
  FigEndpointStreamAirPlayGetFigEndpointStream();
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v2 = *DerivedStorage;
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 24);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t, _OWORD *))(v4 + 8);
  if (!v5) {
    return 4294954514;
  }
  v10[0] = v7;
  v10[1] = v8;
  v10[2] = v9;
  return v5(v2, v10);
}

void interruptibleStreamWrapper_setRateAndAnchorTimeWithCompletionCallbackAsync(uint64_t a1)
{
  if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFTypeRef v2 = *(CFTypeRef *)a1;
  double v3 = *(double *)(a1 + 8);
  long long v13 = *(_OWORD *)(a1 + 16);
  uint64_t v14 = *(void *)(a1 + 32);
  long long v10 = *(_OWORD *)(a1 + 64);
  long long v11 = *(_OWORD *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 56);
  FigEndpointStreamAirPlayGetFigEndpointStream();
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v5 = (char *)malloc_type_calloc(1uLL, 0x18uLL, 0xA00402214FCE6uLL);
  if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (v2) {
    CFTypeRef v6 = CFRetain(v2);
  }
  else {
    CFTypeRef v6 = 0;
  }
  *(void *)uint64_t v5 = v6;
  *(_OWORD *)(v5 + 8) = v10;
  uint64_t v7 = *DerivedStorage;
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 24);
  if (v8)
  {
    long long v9 = *(void (**)(uint64_t, long long *, long long *, void (*)(double, uint64_t, uint64_t, long long *, long long *, uint64_t), char *, double))(v8 + 16);
    if (v9)
    {
      long long v17 = v13;
      uint64_t v18 = v14;
      long long v15 = v11;
      uint64_t v16 = v12;
      v9(v7, &v17, &v15, interruptibleStreamWrapper_setRateCompletionCallback, v5, v3);
    }
  }
  CFRelease(*(CFTypeRef *)a1);
}

void interruptibleStreamWrapper_setRateCompletionCallback(double a1, uint64_t a2, uint64_t a3, long long *a4, long long *a5, uint64_t a6)
{
  if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFTypeRef v11 = *(CFTypeRef *)a6;
  uint64_t v12 = *(void (**)(CFTypeRef, uint64_t, long long *, long long *, uint64_t, double))(a6 + 8);
  uint64_t v13 = *(void *)(a6 + 16);
  long long v16 = *a4;
  uint64_t v17 = *((void *)a4 + 2);
  long long v14 = *a5;
  uint64_t v15 = *((void *)a5 + 2);
  v12(v11, a3, &v16, &v14, v13, a1);
  CFRelease(*(CFTypeRef *)a6);
  free((void *)a6);
}

uint64_t APSenderSessionFactoryGetTypeID()
{
  if (gAPSenderSessionFactoryInitOnce != -1) {
    dispatch_once_f(&gAPSenderSessionFactoryInitOnce, 0, (dispatch_function_t)_APSenderSessionFactoryGetTypeID);
  }
  return gAPSenderSessionFactoryTypeID;
}

uint64_t _APSenderSessionFactoryGetTypeID()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gAPSenderSessionFactoryCFTypeID TypeID = result;
  return result;
}

uint64_t APSenderSessionFactoryCreate(uint64_t a1, uint64_t a2, const void *a3, void *a4)
{
  if (a1)
  {
    if (a4)
    {
      if (gAPSenderSessionFactoryInitOnce != -1) {
        dispatch_once_f(&gAPSenderSessionFactoryInitOnce, 0, (dispatch_function_t)_APSenderSessionFactoryGetTypeID);
      }
      uint64_t Instance = (void *)_CFRuntimeCreateInstance();
      if (Instance)
      {
        long long v9 = Instance;
        Instance[2] = 0;
        Instance[3] = 0;
        Instance[4] = 0;
        if (gLogCategory_APSenderSessionFactory <= 50
          && (gLogCategory_APSenderSessionFactory != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v9[2] = a1;
        v9[3] = a2;
        if (a3) {
          CFTypeRef v10 = CFRetain(a3);
        }
        else {
          CFTypeRef v10 = 0;
        }
        uint64_t v11 = 0;
        v9[4] = v10;
        *a4 = v9;
        return v11;
      }
      uint64_t v11 = 4294960568;
    }
    else
    {
      uint64_t v11 = 4294960591;
    }
  }
  else
  {
    uint64_t v11 = 4294960591;
  }
  APSLogErrorAt();
  if (gLogCategory_APSenderSessionFactory <= 90
    && (gLogCategory_APSenderSessionFactory != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v11;
}

uint64_t APSenderSessionFactoryCreateAirPlaySession(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, __int16 a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a1)
  {
    if (gLogCategory_APSenderSessionFactory <= 50)
    {
      uint64_t v29 = a8;
      unsigned int v27 = a6;
      unsigned int v28 = a7;
      uint64_t v25 = a4;
      uint64_t v26 = a5;
      uint64_t v23 = a2;
      uint64_t v24 = a3;
      if (gLogCategory_APSenderSessionFactory != -1) {
        goto LABEL_4;
      }
      int v19 = _LogCategory_Initialize();
      a2 = v23;
      a3 = v24;
      a4 = v25;
      a5 = v26;
      a6 = v27;
      a7 = v28;
      a8 = v29;
      if (v19)
      {
LABEL_4:
        uint64_t v22 = a1;
        LogPrintF();
        a2 = v23;
        a3 = v24;
        a4 = v25;
        a5 = v26;
        a6 = v27;
        a7 = v28;
        a8 = v29;
      }
    }
    BYTE2(v22) = a11;
    LOWORD(v22) = a10;
    uint64_t v20 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t))(a1 + 16))(*(void *)(a1 + 32), a2, a3, a4, a5, a6, a7, a8, a9, v22, a12, a13, a14, a15, a16, a17);
    if (v20) {
      APSLogErrorAt();
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
  return v20;
}

uint64_t APSenderSessionFactoryCreateLegacySession(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a1)
  {
    uint64_t v8 = *(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 24);
    if (v8)
    {
      if (gLogCategory_APSenderSessionFactory <= 50
        && (gLogCategory_APSenderSessionFactory != -1
         || (int v16 = _LogCategory_Initialize(),
             uint64_t v8 = *(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 24),
             v16)))
      {
        LogPrintF();
        uint64_t v15 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 24))(*(void *)(a1 + 32), a2, a3, a4, a5, a6, a7);
      }
      else
      {
        uint64_t v15 = v8(*(void *)(a1 + 32), a2, a3, a4, a5, a6, a7);
      }
      uint64_t v17 = v15;
      if (v15) {
        APSLogErrorAt();
      }
    }
    else
    {
      return 4294960561;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
  return v17;
}

void _APSenderSessionFactoryFinalize(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    CFRelease(v1);
  }
  if (gLogCategory_APSenderSessionFactory <= 50
    && (gLogCategory_APSenderSessionFactory != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

uint64_t APSubEndpointAddRemoveObservingProtocolGetProtocolID()
{
  return sAPSubEndpointAddRemoveObservingProtocolID;
}

uint64_t registerAPSubEndpointAddRemoveObservingProtocolType()
{
  return MEMORY[0x1F40DC660](&sAPSubEndpointAddRemoveObservingProtocolDesc, 0, &sAPSubEndpointAddRemoveObservingProtocolID);
}

uint64_t APEndpointStreamCarPlayAudioRemote_ServerDied()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t APEndpointStreamCarPlayAudioRemoteCreate(uint64_t a1, uint64_t a2, const void *a3, void *a4)
{
  FigEndpointStreamGetClassID();
  uint64_t v7 = CMDerivedObjectCreate();
  if (v7)
  {
    uint64_t v12 = v7;
    goto LABEL_22;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(void *)(DerivedStorage + 8) = a2;
  *(unsigned char *)(DerivedStorage + 16) = 0;
  *(void *)(DerivedStorage + 24) = CFRetain(a3);
  CMBaseObjectGetDerivedStorage();
  xpc_object_t xdict = 0;
  uint64_t v16 = 0;
  CFTypeRef cf1 = 0;
  CFTypeRef cf = 0;
  uint64_t v9 = FigXPCCreateBasicMessage();
  if (v9)
  {
    uint64_t v12 = v9;
LABEL_5:
    APSLogErrorAt();
    goto LABEL_6;
  }
  uint64_t v10 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (!v10)
  {
    APSLogErrorAt();
    uint64_t v12 = 0;
    goto LABEL_6;
  }
  uint64_t v12 = v10;
  if (v10 != -6720) {
    goto LABEL_5;
  }
LABEL_6:
  if (cf) {
    CFRelease(cf);
  }
  if (cf1) {
    CFRelease(cf1);
  }
  if (v12)
  {
    if (v12 == -6720) {
      return v12;
    }
LABEL_22:
    APSLogErrorAt();
    return v12;
  }
  if (gLogCategory_APEndpointStreamCarPlayAudioRemote <= 50
    && (gLogCategory_APEndpointStreamCarPlayAudioRemote != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v12 = 0;
  *a4 = 0;
  return v12;
}

void carRemoteAudioStream_finalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamCarPlayAudioRemote <= 30
    && (gLogCategory_APEndpointStreamCarPlayAudioRemote != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v1 = (const void *)DerivedStorage[3];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[3] = 0;
  }
  CFTypeRef v2 = (const void *)DerivedStorage[4];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[4] = 0;
  }
  if (*DerivedStorage)
  {
    uint64_t v3 = CMBaseObjectGetDerivedStorage();
    if (*(unsigned char *)(v3 + 16)
      && (FigXPCCreateBasicMessage() || FigXPCRemoteClientSendSyncMessage()))
    {
      APSLogErrorAt();
      *(unsigned char *)(v3 + 16) = 0;
      APSLogErrorAt();
    }
    else
    {
      FigXPCRemoteClientDisassociateObject();
      *(unsigned char *)(v3 + 16) = 0;
      *uint64_t DerivedStorage = 0;
    }
  }
}

CFMutableStringRef carRemoteAudioStream_copyDebugDescription()
{
  CMBaseObjectGetDerivedStorage();
  CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendF();
  CFStringAppendF();
  CFStringAppendF();
  return Mutable;
}

uint64_t carRemoteAudioStream_copyProperty(uint64_t a1, const void *a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage)
  {
    uint64_t v7 = DerivedStorage;
    if (*(unsigned char *)(DerivedStorage + 16))
    {
      if (CFEqual(@"CarPlayAudioFormats", a2))
      {
        uint64_t v8 = 0;
        *a4 = CFRetain(*(CFTypeRef *)(v7 + 32));
      }
      else
      {
        uint64_t v8 = FigXPCSendStdCopyPropertyMessage();
        if (v8) {
          APSLogErrorAt();
        }
      }
    }
    else
    {
      APSLogErrorAt();
      return 4294960587;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960578;
  }
  return v8;
}

uint64_t carRemoteAudioStream_setProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(void *)DerivedStorage)
  {
    APSLogErrorAt();
    return 4294960578;
  }
  if (!*(unsigned char *)(DerivedStorage + 16))
  {
    APSLogErrorAt();
    return 4294960587;
  }
  if (CFEqual((CFTypeRef)*MEMORY[0x1E4F21340], a2))
  {
    uint64_t v6 = CMBaseObjectGetDerivedStorage();
    if (*(void *)v6)
    {
      if (*(unsigned char *)(v6 + 16))
      {
        if (a3) {
          uint64_t ObjectID = APAudioSinkSharedMemRemote_GetObjectID();
        }
        else {
          uint64_t ObjectID = 0;
        }
        uint64_t v13 = FigXPCCreateBasicMessage();
        if (v13)
        {
          uint64_t v12 = v13;
        }
        else
        {
          xpc_dictionary_set_uint64(0, kAPCarPlayAVVCMsgParam_XPCSinkObjectID[0], ObjectID);
          uint64_t v12 = FigXPCRemoteClientSendSyncMessage();
          if (!v12) {
            return v12;
          }
        }
        goto LABEL_31;
      }
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (!CFEqual(@"AudioFormatInfo", a2))
  {
    uint64_t v12 = FigXPCSendStdSetPropertyMessage();
    if (!v12) {
      return v12;
    }
LABEL_32:
    APSLogErrorAt();
    return v12;
  }
  uint64_t v8 = CMBaseObjectGetDerivedStorage();
  if (!*(void *)v8)
  {
LABEL_27:
    APSLogErrorAt();
    uint64_t v12 = 4294960578;
    goto LABEL_32;
  }
  if (!*(unsigned char *)(v8 + 16))
  {
LABEL_28:
    APSLogErrorAt();
    uint64_t v12 = 4294960587;
    goto LABEL_32;
  }
  uint64_t Description = APCarPlayAudioFormatInfoGetDescription(a3);
  if (!Description)
  {
    APSLogErrorAt();
    uint64_t v12 = 4294960591;
    goto LABEL_32;
  }
  uint64_t v10 = (const void *)Description;
  uint64_t v11 = FigXPCCreateBasicMessage();
  if (v11)
  {
    uint64_t v12 = v11;
LABEL_31:
    APSLogErrorAt();
    goto LABEL_32;
  }
  xpc_dictionary_set_data(0, kAPCarPlayAVVCMsgParam_Format[0], v10, 0x28uLL);
  uint64_t v12 = FigXPCRemoteClientSendSyncMessage();
  if (v12) {
    goto LABEL_31;
  }
  return v12;
}

uint64_t carRemoteAudioStream_suspend(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage)
  {
    if (*(unsigned char *)(DerivedStorage + 16))
    {
      uint64_t v8 = FigXPCCreateBasicMessage();
      if (v8)
      {
        uint64_t v9 = v8;
      }
      else
      {
        uint64_t v9 = FigXPCRemoteClientSendSyncMessage();
        if (!v9) {
          goto LABEL_5;
        }
      }
      APSLogErrorAt();
    }
    else
    {
      uint64_t v9 = 0;
    }
  }
  else
  {
    APSLogErrorAt();
    uint64_t v9 = 4294960578;
  }
LABEL_5:
  if (a3) {
    a3(a1, v9, a4);
  }
  return v9;
}

uint64_t carRemoteAudioStream_resume(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, void, uint64_t), uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(void *)DerivedStorage)
  {
    APSLogErrorAt();
    return 4294960578;
  }
  if (!*(unsigned char *)(DerivedStorage + 16))
  {
    APSLogErrorAt();
    return 4294960587;
  }
  uint64_t v8 = FigXPCCreateBasicMessage();
  if (v8)
  {
    uint64_t v11 = v8;
LABEL_15:
    APSLogErrorAt();
    return v11;
  }
  uint64_t v9 = FigXPCMessageSetCFDictionary();
  if (v9)
  {
    uint64_t v11 = v9;
    goto LABEL_15;
  }
  uint64_t v10 = FigXPCRemoteClientSendSyncMessage();
  if (v10)
  {
    uint64_t v11 = v10;
    goto LABEL_15;
  }
  if (a3) {
    a3(a1, 0, a4);
  }
  return 0;
}

uint64_t APCarPlayAudioFormatInfoGetTypeID()
{
  if (APCarPlayAudioFormatInfoGetTypeID_initOnce != -1) {
    dispatch_once(&APCarPlayAudioFormatInfoGetTypeID_initOnce, &__block_literal_global_22);
  }
  return APCarPlayAudioFormatInfoGetTypeID_typeID;
}

uint64_t __APCarPlayAudioFormatInfoGetTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  APCarPlayAudioFormatInfoGetTypeID_typeID = result;
  return result;
}

void _APCarPlayAudioFormatInfoFinalize(uint64_t a1)
{
  CFTypeRef v2 = *(const void **)(a1 + 112);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 112) = 0;
  }
}

CFStringRef _APCarPlayAudioFormatInfoCopyFormattingDesc(const void *a1)
{
  AppendPrintF();
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFStringRef v3 = CFStringCreateWithCString(v2, 0, 0x8000100u);
  free(0);
  return v3;
}

uint64_t APCarPlayAudioFormatInfoGetDescription(uint64_t a1)
{
  if (a1) {
    return a1 + 16;
  }
  else {
    return 0;
  }
}

uint64_t APCarPlayAudioFormatInfoGetHALDescription(uint64_t a1)
{
  if (a1) {
    return a1 + 56;
  }
  else {
    return 0;
  }
}

uint64_t APCarPlayAudioFormatInfoGetStreamType(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 104);
  }
  return result;
}

uint64_t APCarPlayAudioFormatInfoGetAudioType(uint64_t result)
{
  if (result) {
    return *(void *)(result + 112);
  }
  return result;
}

uint64_t APCarPlayAudioFormatInfoGetAudioFormat(uint64_t result)
{
  if (result) {
    return *(void *)(result + 96);
  }
  return result;
}

uint64_t APCarPlayAudioFormatInfoGetLatencyInfo(uint64_t a1)
{
  if (a1) {
    return a1 + 120;
  }
  else {
    return 0;
  }
}

uint64_t APCarPlayAudioFormatsCopyFormatsForAudioType(unsigned char *a1, int a2, const __CFString *a3, unint64_t *a4, CFMutableArrayRef *a5, char *a6)
{
  unsigned int v38 = 0;
  if (!a2 || !a3 || (CFArrayGetTypeID(), (TypedCFDictionaryRef Value = (const __CFArray *)CFDictionaryGetTypedValue()) == 0))
  {
    APSLogErrorAt();
    CFMutableArrayRef v28 = 0;
    CFArrayRef Copy = 0;
    goto LABEL_78;
  }
  int v35 = a5;
  CFStringRef v11 = a3;
  CFIndex Count = CFArrayGetCount(TypedValue);
  int v13 = a2;
  int v34 = a6;
  if (Count < 1)
  {
    CFArrayRef Copy = 0;
    uint64_t Int64 = 0;
    char v20 = 0;
    uint64_t v22 = v35;
    uint64_t v23 = a4;
    goto LABEL_37;
  }
  CFIndex v14 = Count;
  uint64_t Int64 = 0;
  uint64_t v16 = 0;
  while (1)
  {
    CFDictionaryGetTypeID();
    TypedValueAtunsigned int Index = (const __CFDictionary *)CFArrayGetTypedValueAtIndex();
    if (CFDictionaryGetInt64() == v13) {
      break;
    }
LABEL_11:
    if (v14 == ++v16)
    {
      uint64_t v19 = 0;
      char v20 = 0;
      CFArrayRef Copy = 0;
      uint64_t v22 = v35;
      goto LABEL_25;
    }
  }
  CFStringGetTypeID();
  CFStringRef v18 = (const __CFString *)CFDictionaryGetTypedValue();
  if (v18 && CFStringCompare(v11, v18, 0))
  {
    int v13 = a2;
    if (FigCFEqual())
    {
      carPlayAudioFormat_getFormatsKeyForAudioType(a2, @"default");
      uint64_t Int64 = CFDictionaryGetInt64();
    }
    goto LABEL_11;
  }
  carPlayAudioFormat_getFormatsKeyForAudioType(a2, v11);
  uint64_t v19 = CFDictionaryGetInt64();
  if (v18)
  {
    char v20 = 0;
    uint64_t v22 = v35;
    goto LABEL_20;
  }
  uint64_t v22 = a5;
  if (gLogCategory_APCarPlayAudioFormat > 30)
  {
    char v20 = 1;
LABEL_20:
    int v13 = a2;
  }
  else
  {
    int v13 = a2;
    if (gLogCategory_APCarPlayAudioFormat != -1 || _LogCategory_Initialize()) {
      LogPrintF();
    }
    char v20 = 1;
  }
  if (!CFDictionaryContainsKey(TypedValueAtIndex, @"audioOutputFormatsExtended"))
  {
    CFArrayRef Copy = 0;
    if (!v19) {
      goto LABEL_25;
    }
    goto LABEL_30;
  }
  CFArrayGetTypeID();
  CFArrayRef v24 = (const __CFArray *)CFDictionaryGetTypedValue();
  CFAllocatorRef v25 = CFGetAllocator(a1);
  CFArrayRef Copy = CFArrayCreateCopy(v25, v24);
  int v13 = a2;
  if (v19) {
    goto LABEL_30;
  }
LABEL_25:
  if (!Int64)
  {
LABEL_30:
    uint64_t Int64 = v19;
    uint64_t v23 = a4;
    goto LABEL_37;
  }
  CFStringGetTypeID();
  CFStringRef v26 = (const __CFString *)CFDictionaryGetTypedValue();
  if (CFStringHasPrefix(v26, @"Apple"))
  {
    uint64_t v23 = a4;
    int v13 = a2;
    if (gLogCategory_APCarPlayAudioFormat <= 30
      && (gLogCategory_APCarPlayAudioFormat != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    char v20 = 1;
  }
  else
  {
    uint64_t Int64 = 0;
    uint64_t v23 = a4;
    int v13 = a2;
  }
LABEL_37:
  if (!a1[28])
  {
    uint64_t v32 = 0x41F04000C3FFFCLL;
    if (!a1[31]) {
      uint64_t v32 = 0x1F0400003FFFCLL;
    }
    unint64_t v27 = v32 & Int64;
    if ((v32 & Int64) == 0) {
      goto LABEL_69;
    }
LABEL_39:
    if (a1[30] && FigCFEqual()) {
      v27 &= 0x80014000114uLL;
    }
    if (v13 == 103 && APSSettingsGetIntWithDefault())
    {
      CFMutableArrayRef v28 = 0;
      if (v23) {
        v27 &= ~0x800000uLL;
      }
      if (v22 && Copy)
      {
        CFAllocatorRef v29 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFIndex v30 = CFArrayGetCount(Copy);
        CFMutableArrayRef MutableCopy = CFArrayCreateMutableCopy(v29, v30, Copy);
        FigCFNumberCreateUInt64();
        while (FigCFArrayRemoveLastElementOfValue())
          ;
        if (MutableCopy) {
          CFRetain(MutableCopy);
        }
        CFRelease(Copy);
        CFMutableArrayRef v28 = MutableCopy;
        goto LABEL_55;
      }
    }
    else
    {
      CFMutableArrayRef v28 = 0;
    }
    CFMutableArrayRef MutableCopy = Copy;
LABEL_55:
    if (v23) {
      *uint64_t v23 = v27;
    }
    if (v22 && MutableCopy)
    {
      *uint64_t v22 = MutableCopy;
      CFMutableArrayRef MutableCopy = 0;
    }
    if (v34) {
      *int v34 = v20;
    }
    CFArrayRef Copy = MutableCopy;
    goto LABEL_71;
  }
  unint64_t v27 = Int64 & 0xF7FE0F8FFFFC0000;
  if ((Int64 & 0xF7FE0F8FFFFC0000) != 0) {
    goto LABEL_39;
  }
LABEL_69:
  APSLogErrorAt();
  CFMutableArrayRef v28 = 0;
LABEL_78:
  unsigned int v38 = -6705;
  if (gLogCategory_APCarPlayAudioFormat <= 50
    && (gLogCategory_APCarPlayAudioFormat != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
LABEL_71:
  if (Copy) {
    CFRelease(Copy);
  }
  if (v28) {
    CFRelease(v28);
  }
  return v38;
}

__CFString *carPlayAudioFormat_getFormatsKeyForAudioType(int a1, CFTypeRef cf1)
{
  if (a1 == 107) {
    return @"audioInputFormats";
  }
  if (a1 != 100) {
    return @"audioOutputFormats";
  }
  if (CFEqual(cf1, @"default")) {
    return @"audioInputFormats";
  }
  CFStringRef v3 = @"audioInputFormats";
  if (!CFEqual(cf1, @"telephony") && !CFEqual(cf1, @"speechRecognition")) {
    return @"audioOutputFormats";
  }
  return v3;
}

uint64_t APCarPlayAudioFormatsGetTypeID()
{
  if (APCarPlayAudioFormatsGetTypeID_initOnce != -1) {
    dispatch_once(&APCarPlayAudioFormatsGetTypeID_initOnce, &__block_literal_global_47);
  }
  return APCarPlayAudioFormatsGetTypeID_typeID;
}

uint64_t __APCarPlayAudioFormatsGetTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  APCarPlayAudioFormatsGetTypeID_typeID = result;
  return result;
}

void _APCarPlayAudioFormatsFinalize(void *a1)
{
  CFAllocatorRef v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0;
  }
  CFStringRef v3 = (const void *)a1[7];
  if (v3)
  {
    CFRelease(v3);
    a1[7] = 0;
  }
  uint64_t v4 = (const void *)a1[8];
  if (v4)
  {
    CFRelease(v4);
    a1[8] = 0;
  }
  uint64_t v5 = (const void *)a1[9];
  if (v5)
  {
    CFRelease(v5);
    a1[9] = 0;
  }
}

CFStringRef _APCarPlayAudioFormatsCopyFormattingDesc(const void *a1)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  uint64_t v8 = 0;
  AppendPrintF();
  CFDictionaryApplyBlock();
  AppendPrintF();
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFStringRef v3 = CFStringCreateWithCString(v2, (const char *)v6[3], 0x8000100u);
  free((void *)v6[3]);
  _Block_object_dispose(&v5, 8);
  return v3;
}

void sub_1D0A2F274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t APCarPlayAudioFormatsCreate(const __CFAllocator *a1, const void *a2, int a3, char a4, char a5, int a6)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  long long v37 = 0u;
  long long v38 = 0u;
  if (a2)
  {
    if (APCarPlayAudioFormatsGetTypeID_initOnce != -1) {
      dispatch_once(&APCarPlayAudioFormatsGetTypeID_initOnce, &__block_literal_global_47);
    }
    uint64_t Instance = (_OWORD *)_CFRuntimeCreateInstance();
    uint64_t v13 = (uint64_t)Instance;
    if (Instance)
    {
      Instance[3] = 0u;
      Instance[4] = 0u;
      Instance[1] = 0u;
      Instance[2] = 0u;
      *((void *)Instance + 2) = CFRetain(a2);
      *(unsigned char *)(v13 + 28) = a3;
      *(unsigned char *)(v13 + 29) = a4;
      *(unsigned char *)(v13 + 31) = a5;
      CFDictionaryGetCString();
      CFAllocatorRef allocator = a1;
      *(_DWORD *)(v13 + 24) = TextToSourceVersion();
      if (!*(unsigned char *)(v13 + 28))
      {
        if (APSSettingsGetInt64())
        {
          if (a6)
          {
            if (gLogCategory_APCarPlayAudioFormat <= 50
              && (gLogCategory_APCarPlayAudioFormat != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            *(unsigned char *)(v13 + 30) = 1;
          }
        }
        else
        {
          long long v35 = 0u;
          long long v36 = 0u;
          long long v33 = 0u;
          long long v34 = 0u;
          uint64_t v19 = objc_msgSend((id)objc_msgSend((Class)getEAAccessoryManagerClass[0](), "sharedAccessoryManager"), "connectedAccessories");
          uint64_t v20 = [v19 countByEnumeratingWithState:&v33 objects:v39 count:16];
          if (v20)
          {
            uint64_t v21 = v20;
            uint64_t v22 = *(void *)v34;
            char v31 = v19;
            do
            {
              for (uint64_t i = 0; i != v21; ++i)
              {
                if (*(void *)v34 != v22) {
                  objc_enumerationMutation(v19);
                }
                CFArrayRef v24 = *(void **)(*((void *)&v33 + 1) + 8 * i);
                if (objc_msgSend(v24, "supportsCarPlay", v26, v27, v28, v29)
                  && (!objc_msgSend((id)objc_msgSend(v24, "manufacturer"), "compare:options:", @"TOYOTA MOTOR CORPORATION", 1)&& !objc_msgSend((id)objc_msgSend(v24, "modelNumber"), "compare:options:", @"172611123", 1)&& (!objc_msgSend((id)objc_msgSend(v24, "firmwareRevision"), "compare:options:", @"010600", 1)|| !objc_msgSend((id)objc_msgSend(v24, "firmwareRevision"), "compare:options:", @"011400", 1)|| !objc_msgSend((id)objc_msgSend(v24, "firmwareRevision"), "compare:options:", @"2012800",
                          1)
                    || !objc_msgSend((id)objc_msgSend(v24, "firmwareRevision"), "compare:options:", @"2013400", 1))|| !objc_msgSend((id)objc_msgSend(v24, "manufacturer"), "compare:options:", @"TOYOTA MOTOR CORPORATION", 1)&& !objc_msgSend((id)objc_msgSend(v24, "modelNumber"), "compare:options:", @"172611251", 1)&& (!objc_msgSend((id)objc_msgSend(v24, "firmwareRevision"), "compare:options:", @"010600", 1)|| !objc_msgSend((id)objc_msgSend(v24, "firmwareRevision"), "compare:options:", @"011400",
                          1)
                    || !objc_msgSend((id)objc_msgSend(v24, "firmwareRevision"), "compare:options:", @"200700", 1)|| !objc_msgSend((id)objc_msgSend(v24, "firmwareRevision"), "compare:options:", @"200960", 1)|| !objc_msgSend((id)objc_msgSend(v24, "firmwareRevision"), "compare:options:", @"201100", 1)|| !objc_msgSend((id)objc_msgSend(v24, "firmwareRevision"), "compare:options:", @"2012800", 1))
                   || !objc_msgSend((id)objc_msgSend(v24, "manufacturer"), "compare:options:", @"TOYOTA MOTOR CORPORATION", 1)&& !objc_msgSend((id)objc_msgSend(v24, "modelNumber"), "compare:options:", @"172611252", 1)&& (!objc_msgSend((id)objc_msgSend(v24, "firmwareRevision"), "compare:options:", @"2000700", 1)|| !objc_msgSend((id)objc_msgSend(v24, "firmwareRevision"), "compare:options:", @"2000960", 1))|| !objc_msgSend((id)objc_msgSend(v24, "manufacturer"), "compare:options:", @"Toyota Multimedia",
                         1)
                   && (!objc_msgSend((id)objc_msgSend(v24, "firmwareRevision"), "compare:options:", @"1.0.2", 1)
                    || !objc_msgSend((id)objc_msgSend(v24, "firmwareRevision"), "compare:options:", @"1.0.3", 1)
                    || !objc_msgSend((id)objc_msgSend(v24, "firmwareRevision"), "compare:options:", @"19.1.18", 1)|| !objc_msgSend((id)objc_msgSend(v24, "firmwareRevision"), "compare:options:", @"19.4.18", 1)|| !objc_msgSend((id)objc_msgSend(v24, "firmwareRevision"), "compare:options:", @"19.8.29", 1))|| !objc_msgSend((id)objc_msgSend(v24, "manufacturer"), "compare:options:", @"Harley-Davidson", 1)
                   && (!objc_msgSend((id)objc_msgSend(v24, "firmwareRevision"), "compare:options:", @"M19.18.26.03", 1)|| !objc_msgSend((id)objc_msgSend(v24, "firmwareRevision"), "compare:options:", @"M19.18.32.01", 1)|| !objc_msgSend((id)objc_msgSend(v24, "firmwareRevision"), "compare:options:", @"M19.18.42.01", 1)|| !objc_msgSend((id)objc_msgSend(v24, "firmwareRevision"), "compare:options:", @"M19.19.02.01", 1)
                    || !objc_msgSend((id)objc_msgSend(v24, "firmwareRevision"), "compare:options:", @"M19.19.03.00", 1)|| !objc_msgSend((id)objc_msgSend(v24, "firmwareRevision"), "compare:options:", @"M20.19.20.01", 1)|| !objc_msgSend((id)objc_msgSend(v24, "firmwareRevision"), "compare:options:", @"M20.19.39.00", 1))))
                {
                  if (gLogCategory_APCarPlayAudioFormat <= 50
                    && (gLogCategory_APCarPlayAudioFormat != -1 || _LogCategory_Initialize()))
                  {
                    uint64_t v32 = [v24 name];
                    uint64_t v25 = [v24 manufacturer];
                    uint64_t v28 = [v24 modelNumber];
                    uint64_t v29 = [v24 firmwareRevision];
                    uint64_t v27 = v25;
                    uint64_t v19 = v31;
                    uint64_t v26 = v32;
                    LogPrintF();
                  }
                  *(unsigned char *)(v13 + 30) = 1;
                }
              }
              uint64_t v21 = [v19 countByEnumeratingWithState:&v33 objects:v39 count:16];
            }
            while (v21);
          }
        }
      }
      if (a3)
      {
        *(_DWORD *)(v13 + 32) = FigGetCFPreferenceNumberWithDefault();
        *(_DWORD *)(v13 + 36) = FigGetCFPreferenceNumberWithDefault();
        CFAllocatorRef v14 = allocator;
      }
      else
      {
        CFAllocatorRef v14 = allocator;
        *(void *)(v13 + 32) = FigGetCFPreferenceNumberWithDefault();
      }
      if (gLogCategory_APCarPlayAudioFormat <= 50
        && (gLogCategory_APCarPlayAudioFormat != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      *(void *)(v13 + 56) = Mutable;
      if (Mutable
        && (CFMutableDictionaryRef v16 = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]),
            (*(void *)(v13 + 64) = v16) != 0)
        && (CFMutableDictionaryRef v17 = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]),
            (*(void *)(v13 + 72) = v17) != 0))
      {
        if (!carPlayAudioFormat_repackageFormatsForStream(v13, 100, (uint64_t)&kMainAudioTypes, 5uLL)
          && !carPlayAudioFormat_repackageFormatsForStream(v13, 101, (uint64_t)&kAltAudioTypes, 1uLL)
          && (!*(unsigned char *)(v13 + 29)
           || !carPlayAudioFormat_repackageFormatsForStream(v13, 106, (uint64_t)&kAuxAudioTypes, 1uLL)
           && !carPlayAudioFormat_repackageFormatsForStream(v13, 107, (uint64_t)&kOutOfBandAVVCAudioTypes, 1uLL))&& (!*(unsigned char *)(v13 + 31)|| !carPlayAudioFormat_repackageFormatsForStream(v13, 103, (uint64_t)&kMainBufferedAudioTypes, 1uLL)))
        {
          goto LABEL_28;
        }
        APSLogErrorAt();
        APSLogErrorAt();
      }
      else
      {
        APSLogErrorAt();
      }
      CFRelease((CFTypeRef)v13);
      uint64_t v13 = 0;
    }
    else
    {
      APSLogErrorAt();
    }
  }
  else
  {
    APSLogErrorAt();
    uint64_t v13 = 0;
  }
LABEL_28:
  if (gLogCategory_APCarPlayAudioFormat <= 30
    && (gLogCategory_APCarPlayAudioFormat != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v13;
}

uint64_t APCarPlayAudioFormatsGetHALDescriptions(uint64_t a1, int a2, int a3, const UInt8 **a4, unint64_t *a5)
{
  if (a2 > 1937010029)
  {
    if (a2 == 1937010030)
    {
      uint64_t v7 = @"main";
    }
    else
    {
      if (a2 != 1937012579) {
        goto LABEL_25;
      }
      uint64_t v7 = @"oovc";
    }
  }
  else if (a2 == 1937006956)
  {
    uint64_t v7 = @"alt";
  }
  else
  {
    if (a2 != 1937006968) {
      goto LABEL_25;
    }
    uint64_t v7 = @"auxo";
  }
  if (a3 <= 1635020132)
  {
    if (a3 == 1635017068)
    {
      uint64_t v8 = @"alert";
      goto LABEL_22;
    }
    if (a3 == 1635017830)
    {
      uint64_t v8 = @"default";
      goto LABEL_22;
    }
LABEL_25:
    APSLogErrorAt();
    return 4294960591;
  }
  if (a3 == 1635021925)
  {
    uint64_t v8 = @"telephony";
    goto LABEL_22;
  }
  if (a3 == 1635021682)
  {
    uint64_t v8 = @"speechRecognition";
    goto LABEL_22;
  }
  if (a3 != 1635020133) {
    goto LABEL_25;
  }
  uint64_t v8 = @"media";
LABEL_22:
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 56), v7);
  if (Value && (CFDataRef v10 = (const __CFData *)CFDictionaryGetValue(Value, v8)) != 0)
  {
    CFDataRef v11 = v10;
    *a4 = CFDataGetBytePtr(v10);
    unint64_t Length = CFDataGetLength(v11);
    uint64_t result = 0;
    *a5 = Length / 0x38;
  }
  else
  {
    APSLogErrorAt();
    return 4294960569;
  }
  return result;
}

uint64_t APCarPlayAudioFormatsCopyAudioFormatInfosForStreamAndType(uint64_t a1, int a2, int a3, void *a4)
{
  if (a2 > 1937010029)
  {
    if (a2 == 1937010030)
    {
      uint64_t v5 = @"main";
    }
    else
    {
      if (a2 != 1937012579) {
        goto LABEL_25;
      }
      uint64_t v5 = @"oovc";
    }
  }
  else if (a2 == 1937006956)
  {
    uint64_t v5 = @"alt";
  }
  else
  {
    if (a2 != 1937006968) {
      goto LABEL_25;
    }
    uint64_t v5 = @"auxo";
  }
  if (a3 <= 1635020132)
  {
    if (a3 == 1635017068)
    {
      uint64_t v6 = @"alert";
      goto LABEL_22;
    }
    if (a3 == 1635017830)
    {
      uint64_t v6 = @"default";
      goto LABEL_22;
    }
LABEL_25:
    APSLogErrorAt();
    return 4294960591;
  }
  if (a3 == 1635021925)
  {
    uint64_t v6 = @"telephony";
    goto LABEL_22;
  }
  if (a3 == 1635021682)
  {
    uint64_t v6 = @"speechRecognition";
    goto LABEL_22;
  }
  if (a3 != 1635020133) {
    goto LABEL_25;
  }
  uint64_t v6 = @"media";
LABEL_22:
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 72), v5);
  if (Value && (uint64_t v8 = CFDictionaryGetValue(Value, v6)) != 0)
  {
    CFTypeRef v9 = CFRetain(v8);
    uint64_t result = 0;
    *a4 = v9;
  }
  else
  {
    APSLogErrorAt();
    return 4294960569;
  }
  return result;
}

uint64_t APCarPlayAudioFormatsCopyFormatInfoForHALDescription(uint64_t a1, int a2, int a3, const void *a4, CFTypeRef *a5)
{
  uint64_t v20 = 0;
  __s1 = 0;
  CFTypeRef cf = 0;
  uint64_t HALDescriptions = APCarPlayAudioFormatsGetHALDescriptions(a1, a2, a3, (const UInt8 **)&__s1, (unint64_t *)&v20);
  if (HALDescriptions)
  {
    uint64_t v13 = HALDescriptions;
    APSLogErrorAt();
  }
  else
  {
    uint64_t v11 = APCarPlayAudioFormatsCopyAudioFormatInfosForStreamAndType(a1, a2, a3, &cf);
    uint64_t v12 = v20;
    if (v20 < 1) {
      goto LABEL_9;
    }
    uint64_t v13 = v11;
    ValueAtunsigned int Index = 0;
    CFIndex v15 = 0;
    CFMutableDictionaryRef v16 = (char *)__s1;
    CFArrayRef v17 = (const __CFArray *)cf;
    do
    {
      if (!memcmp(v16, a4, 0x28uLL)) {
        ValueAtunsigned int Index = CFArrayGetValueAtIndex(v17, v15);
      }
      ++v15;
      v16 += 56;
    }
    while (v12 != v15);
    if (ValueAtIndex)
    {
      *a5 = CFRetain(ValueAtIndex);
    }
    else
    {
LABEL_9:
      APSLogErrorAt();
      uint64_t v13 = 4294960591;
    }
    if (cf) {
      CFRelease(cf);
    }
  }
  return v13;
}

uint64_t APCarPlayAudioFormatsCopyFormatInfoForStreamDescription(uint64_t a1, int a2, int a3, const void *a4, CFTypeRef *a5)
{
  CFArrayRef theArray = 0;
  uint64_t v7 = APCarPlayAudioFormatsCopyAudioFormatInfosForStreamAndType(a1, a2, a3, &theArray);
  if (v7)
  {
    uint64_t v15 = v7;
    APSLogErrorAt();
    CFArrayRef v8 = theArray;
    if (!theArray) {
      return v15;
    }
    goto LABEL_13;
  }
  CFArrayRef v8 = theArray;
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count < 1) {
    goto LABEL_9;
  }
  CFIndex v10 = Count;
  CFIndex v11 = 0;
  while (1)
  {
    ValueAtunsigned int Index = (char *)CFArrayGetValueAtIndex(v8, v11);
    uint64_t v13 = ValueAtIndex;
    CFAllocatorRef v14 = ValueAtIndex ? ValueAtIndex + 16 : 0;
    if (!memcmp(v14, a4, 0x28uLL)) {
      break;
    }
    if (v10 == ++v11) {
      goto LABEL_9;
    }
  }
  CFTypeRef v16 = CFRetain(v13);
  if (!v16)
  {
LABEL_9:
    APSLogErrorAt();
    uint64_t v15 = 4294960591;
    if (!v8) {
      return v15;
    }
    goto LABEL_13;
  }
  uint64_t v15 = 0;
  *a5 = CFRetain(v16);
  if (v8) {
LABEL_13:
  }
    CFRelease(v8);
  return v15;
}

Class initEAAccessoryManager()
{
  if (ExternalAccessoryLibrary_sOnce != -1) {
    dispatch_once(&ExternalAccessoryLibrary_sOnce, &__block_literal_global_175);
  }
  Class result = objc_getClass("EAAccessoryManager");
  classEAAccessoryManager = (uint64_t)result;
  getEAAccessoryManagerClass[0] = EAAccessoryManagerFunction;
  return result;
}

uint64_t EAAccessoryManagerFunction()
{
  return classEAAccessoryManager;
}

void *__ExternalAccessoryLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/Frameworks/ExternalAccessory.framework/ExternalAccessory", 2);
  ExternalAccessoryLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t carPlayAudioFormat_repackageFormatsForStream(uint64_t a1, int a2, uint64_t a3, unint64_t a4)
{
  int v4 = a2 - 100;
  if ((a2 - 100) > 9 || ((0x3CBu >> v4) & 1) == 0)
  {
    APSLogErrorAt();
    return 0;
  }
  int v7 = a2;
  CFTypeRef v9 = (void *)*((void *)&off_1E6893BE8 + v4);
  CFRetain(v9);
  CFAllocatorRef v10 = CFGetAllocator((CFTypeRef)a1);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    APSLogErrorAt();
    int v70 = (__CFDictionary *)v9;
    uint64_t v5 = 4294960568;
    goto LABEL_149;
  }
  CFAllocatorRef v11 = CFGetAllocator((CFTypeRef)a1);
  CFMutableDictionaryRef v12 = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v12
    || (CFAllocatorRef v13 = CFGetAllocator((CFTypeRef)a1),
        (CFMutableDictionaryRef v14 = CFDictionaryCreateMutable(v13, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) == 0))
  {
    APSLogErrorAt();
    CFRelease(v9);
    CMTimeEpoch v69 = 0;
    uint64_t v5 = 4294960568;
    goto LABEL_141;
  }
  CFDictionaryRef theDict = v14;
  long long v78 = v12;
  CFTypeRef cf = v9;
  if (!a4)
  {
    int v18 = *(unsigned __int8 *)(a1 + 28);
LABEL_128:
    int v67 = *(_DWORD *)(a1 + 40);
    if (v18)
    {
      CMTimeScale v68 = (void *)cf;
      CMTimeEpoch v69 = theDict;
      CFMutableDictionaryRef v12 = v78;
      if (v67 != 1633772389 && v67 != 1869641075) {
        goto LABEL_139;
      }
      if (v7 != 103)
      {
        if (v7 == 100 && *(_DWORD *)(a1 + 44) != 1633772320) {
          goto LABEL_139;
        }
        goto LABEL_148;
      }
      if (*(_DWORD *)(a1 + 48) != 1633772320)
      {
LABEL_139:
        APSLogErrorAt();
        uint64_t v5 = 4294960591;
        goto LABEL_140;
      }
    }
    else
    {
      CMTimeScale v68 = (void *)cf;
      CMTimeEpoch v69 = theDict;
      CFMutableDictionaryRef v12 = v78;
      if (v67 != 1819304813) {
        goto LABEL_139;
      }
      if (v7 == 103)
      {
        if (*(_DWORD *)(a1 + 48) != 1633772320) {
          goto LABEL_139;
        }
      }
      else if (v7 == 100 && *(_DWORD *)(a1 + 44))
      {
        goto LABEL_139;
      }
    }
LABEL_148:
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 56), v68, Mutable);
    CFRelease(Mutable);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 64), v68, v12);
    CFRelease(v12);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 72), v68, v69);
    CFRelease(v69);
    int v70 = (__CFDictionary *)v68;
    uint64_t v5 = 0;
LABEL_149:
    CFRelease(v70);
    return v5;
  }
  unint64_t v15 = 0;
  int v16 = 0;
  int v17 = 0;
  int v18 = *(unsigned __int8 *)(a1 + 28);
  uint64_t v86 = a1;
  int v76 = v7;
  uint64_t v75 = a3;
  while (2)
  {
    if (v7 == 100)
    {
      if (!v18)
      {
        CFStringRef v93 = *(const __CFString **)(a3 + 16 * v15);
        uint64_t v81 = (__CFString **)(a3 + 16 * v15);
        int v19 = 100;
        goto LABEL_19;
      }
      if (CFEqual(*(CFTypeRef *)(a3 + 16 * v15), @"media")) {
        int v19 = 102;
      }
      else {
        int v19 = 100;
      }
      int v18 = *(unsigned __int8 *)(a1 + 28);
    }
    else
    {
      int v19 = v7;
    }
    CFStringRef v93 = *(const __CFString **)(a3 + 16 * v15);
    uint64_t v81 = (__CFString **)(a3 + 16 * v15);
    if (!v18)
    {
LABEL_19:
      uint64_t v20 = *(void *)(a3 + 16 * v15 + 8);
      goto LABEL_20;
    }
    uint64_t v20 = 0;
LABEL_20:
    unint64_t v96 = 0;
    char v95 = 0;
    uint64_t v21 = APCarPlayAudioFormatsCopyFormatsForAudioType((unsigned char *)a1, v19, v93, &v96, 0, &v95);
    if (v21)
    {
      uint64_t v5 = v21;
      APSLogErrorAt();
      goto LABEL_157;
    }
    if (v20 && v95 && (v96 & v20) != 0)
    {
      if (gLogCategory_APCarPlayAudioFormat <= 30
        && (gLogCategory_APCarPlayAudioFormat != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v96 &= v20;
    }
    CFAllocatorRef v22 = CFGetAllocator((CFTypeRef)a1);
    uint64_t v23 = CFDataCreateMutable(v22, 3584);
    if (!v23)
    {
      APSLogErrorAt();
      goto LABEL_156;
    }
    CFArrayRef v24 = v23;
    CFDataSetLength(v23, 3584);
    MutableBytePtr = CFDataGetMutableBytePtr(v24);
    CFAllocatorRef v25 = CFGetAllocator((CFTypeRef)a1);
    uint64_t v26 = CFDataCreateMutable(v25, 3584);
    if (!v26)
    {
      APSLogErrorAt();
      CMTimeFlags v72 = v24;
LABEL_155:
      CFRelease(v72);
LABEL_156:
      uint64_t v5 = 4294960568;
LABEL_157:
      APSLogErrorAt();
      goto LABEL_158;
    }
    uint64_t v27 = v26;
    CFDataSetLength(v26, 768);
    CMTime v84 = v27;
    uint64_t v28 = CFDataGetMutableBytePtr(v27);
    CFAllocatorRef v29 = CFGetAllocator((CFTypeRef)a1);
    CFMutableArrayRef v30 = CFArrayCreateMutable(v29, 64, MEMORY[0x1E4F1D510]);
    if (!v30)
    {
      APSLogErrorAt();
      CFRelease(v24);
      CMTimeFlags v72 = v27;
      goto LABEL_155;
    }
    CFMutableArrayRef v31 = v30;
    theCFDataRef Data = v24;
    int v74 = v17;
    int v82 = v16;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 32;
    if (v19 == 102) {
      uint64_t v34 = 36;
    }
    uint64_t v85 = v34;
    CFStringRef v35 = v93;
    uint64_t v90 = v28;
    if (v93) {
      BOOL v36 = v28 == 0;
    }
    else {
      BOOL v36 = 1;
    }
    char v37 = v36;
    char v87 = v37;
    int v94 = v19;
    uint64_t v38 = 1;
    CFTypeRef v39 = &unk_1EA628000;
    unsigned int v89 = v30;
    do
    {
      if ((v96 & v38) == 0) {
        goto LABEL_101;
      }
      if (APAudioFormatToASBD())
      {
        int v40 = v39[950];
        if (v40 <= 50 && (v40 != -1 || _LogCategory_Initialize())) {
          LogPrintF();
        }
        goto LABEL_101;
      }
      CFTypeRef v41 = &MutableBytePtr[56 * v32];
      *(void *)CFTypeRef v41 = 0;
      *((_DWORD *)v41 + 2) = 1819304813;
      *((_DWORD *)v41 + 4) = 0;
      *((_DWORD *)v41 + 5) = 1;
      *((_DWORD *)v41 + 6) = 0;
      *((_DWORD *)v41 + 7) = 0;
      *((void *)v41 + 4) = 0;
      uint64_t v42 = v32;
      CFDataRef v43 = v41;
      *((_DWORD *)v41 + 3) = 12;
      *(int64x2_t *)(v41 + 40) = vdupq_lane_s64(0, 0);
      unsigned int v97 = 0;
      if (v87)
      {
        APSLogErrorAt();
        uint64_t v5 = 4294960591;
LABEL_122:
        APSLogErrorAt();
LABEL_124:
        int v7 = v76;
        a3 = v75;
        int v66 = v82;
        int v17 = v74;
        long long v64 = theData;
        int v65 = v84;
        CFMutableArrayRef v31 = v89;
        goto LABEL_107;
      }
      uint64_t v91 = v42;
      CFDictionaryRef v92 = &v90[12 * v42];
      if (*(_DWORD *)(a1 + 24) <= 0x24D2F3u
        && (CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"manufacturer"), FigCFEqual()))
      {
        int v44 = v39[950];
        if (v44 <= 60 && (v44 != -1 || _LogCategory_Initialize())) {
          LogPrintF();
        }
      }
      else
      {
        CFArrayGetTypeID();
        TypedCFDictionaryRef Value = (const __CFArray *)CFDictionaryGetTypedValue();
        if (v97)
        {
          APSLogErrorAt();
          CFTypeRef v39 = (_DWORD *)&unk_1EA628000;
          goto LABEL_96;
        }
        CFIndex Count = CFArrayGetCount(TypedValue);
        if (Count >= 1)
        {
          CFIndex v47 = Count;
          int v48 = 0;
          int v49 = 0;
          int Int64Ranged = 0;
          uint64_t v51 = 0;
          while (1)
          {
            CFDictionaryGetTypeID();
            CFArrayGetTypedValueAtIndex();
            if (v97) {
              break;
            }
            int Int64 = CFDictionaryGetInt64();
            if (v97 != -6727)
            {
              if (v97) {
                break;
              }
              if (v94 != Int64) {
                goto LABEL_72;
              }
            }
            unsigned int v97 = 0;
            CFStringGetTypeID();
            CFDataRef v53 = (const void *)CFDictionaryGetTypedValue();
            if (v97 != -6727)
            {
              if (v97) {
                break;
              }
              if (!CFEqual(v93, v53)) {
                goto LABEL_72;
              }
            }
            unsigned int v97 = 0;
            uint64_t v54 = CFDictionaryGetInt64();
            if (v97 != -6727)
            {
              if (v97) {
                break;
              }
              if (v54 != (unint64_t)*(double *)v43) {
                goto LABEL_72;
              }
            }
            unsigned int v97 = 0;
            uint64_t v55 = CFDictionaryGetInt64();
            if (v97 != -6727)
            {
              if (v97) {
                break;
              }
              if (v55 != *((_DWORD *)v43 + 8)) {
                goto LABEL_72;
              }
            }
            unsigned int v97 = 0;
            uint64_t v56 = CFDictionaryGetInt64();
            if (v97 == -6727) {
              goto LABEL_71;
            }
            if (v97) {
              break;
            }
            if (v56 == *((_DWORD *)v43 + 7))
            {
LABEL_71:
              unsigned int v97 = 0;
              int Int64Ranged = CFDictionaryGetInt64Ranged();
              int v49 = CFDictionaryGetInt64Ranged();
              int v48 = 1;
            }
            else
            {
LABEL_72:
              unsigned int v97 = 0;
            }
            if (v47 == ++v51) {
              goto LABEL_81;
            }
          }
          APSLogErrorAt();
          a1 = v86;
          CFTypeRef v39 = (_DWORD *)&unk_1EA628000;
          CFStringRef v35 = v93;
          goto LABEL_96;
        }
      }
      int Int64Ranged = 0;
      int v49 = 0;
      int v48 = 0;
LABEL_81:
      a1 = v86;
      int v57 = *(_DWORD *)(v86 + v85);
      *(_DWORD *)CFDictionaryRef v92 = v57;
      double v58 = *(double *)v43;
      v57 *= 1000;
      uint64_t v59 = &v90[12 * v91];
      *((_DWORD *)v59 + 1) = (*(double *)v43 * (double)(v57 + Int64Ranged) / 1000000.0);
      *((_DWORD *)v59 + 2) = (v58 * (double)(v57 + v49) / 1000000.0);
      CFTypeRef v39 = &unk_1EA628000;
      if (v48)
      {
        CFStringRef v35 = v93;
        if (gLogCategory_APCarPlayAudioFormat > 30
          || gLogCategory_APCarPlayAudioFormat == -1 && !_LogCategory_Initialize())
        {
          goto LABEL_96;
        }
      }
      else
      {
        CFStringRef v35 = v93;
        if (gLogCategory_APCarPlayAudioFormat > 60
          || gLogCategory_APCarPlayAudioFormat == -1 && !_LogCategory_Initialize())
        {
          goto LABEL_96;
        }
      }
      LogPrintF();
LABEL_96:
      uint64_t v5 = v97;
      if (v97) {
        goto LABEL_122;
      }
      CFGetAllocator((CFTypeRef)a1);
      CFMutableArrayRef v31 = v89;
      if (APCarPlayAudioFormatInfoGetTypeID_initOnce != -1) {
        dispatch_once(&APCarPlayAudioFormatInfoGetTypeID_initOnce, &__block_literal_global_22);
      }
      uint64_t Instance = _CFRuntimeCreateInstance();
      if (!Instance)
      {
        APSLogErrorAt();
        APSLogErrorAt();
        uint64_t v5 = 4294960568;
        goto LABEL_124;
      }
      uint64_t v61 = Instance;
      *(void *)(Instance + 128) = 0;
      *(_OWORD *)(Instance + 96) = 0u;
      *(_OWORD *)(Instance + 112) = 0u;
      *(_OWORD *)(Instance + 64) = 0u;
      *(_OWORD *)(Instance + 80) = 0u;
      *(_OWORD *)(Instance + 32) = 0u;
      *(_OWORD *)(Instance + 48) = 0u;
      *(_OWORD *)(Instance + 16) = 0u;
      *(_DWORD *)(Instance + 104) = v94;
      *(void *)(Instance + 112) = CFRetain(v35);
      *(_OWORD *)(v61 + 16) = 0u;
      *(_OWORD *)(v61 + 32) = 0u;
      *(void *)(v61 + 48) = 0;
      uint64_t v62 = *((void *)v43 + 4);
      long long v63 = *((_OWORD *)v43 + 1);
      *(_OWORD *)(v61 + 56) = *(_OWORD *)v43;
      *(_OWORD *)(v61 + 72) = v63;
      *(void *)(v61 + 88) = v62;
      *(void *)(v61 + 96) = v38;
      LODWORD(v62) = *((_DWORD *)v92 + 2);
      *(void *)(v61 + 120) = *(void *)v92;
      *(_DWORD *)(v61 + 128) = v62;
      CFArrayAppendValue(v89, (const void *)v61);
      CFRelease((CFTypeRef)v61);
      uint64_t v32 = v91 + 1;
LABEL_101:
      ++v33;
      v38 *= 2;
    }
    while (v33 != 64);
    if (CFArrayGetCount(v31) == v32)
    {
      CFDictionarySetValue(theDict, v35, v31);
      long long v64 = theData;
      CFDataSetLength(theData, 56 * v32);
      CFDictionarySetValue(Mutable, v35, theData);
      int v65 = v84;
      CFDataSetLength(v84, 12 * v32);
      CFDictionarySetValue(v78, v35, v84);
      uint64_t v5 = 0;
      int v17 = 0;
      int v7 = v76;
      a3 = v75;
      int v66 = v82;
    }
    else
    {
      APSLogErrorAt();
      uint64_t v5 = 4294960534;
      int v7 = v76;
      a3 = v75;
      int v66 = v82;
      int v17 = v74;
      long long v64 = theData;
      int v65 = v84;
    }
LABEL_107:
    CFRelease(v64);
    CFRelease(v65);
    CFRelease(v31);
    if (v5) {
      goto LABEL_157;
    }
    int v18 = *(unsigned __int8 *)(a1 + 28);
    if (v7 != 100 || !*(unsigned char *)(a1 + 28))
    {
      if (v7 == 103 && *v81 == @"media")
      {
        if (*(_DWORD *)(a1 + 48)) {
          goto LABEL_159;
        }
        *(_DWORD *)(a1 + 48) = v17;
      }
      else
      {
LABEL_115:
        if (*(_DWORD *)(a1 + 40)) {
          goto LABEL_159;
        }
        *(_DWORD *)(a1 + 40) = v17;
      }
LABEL_117:
      unint64_t v15 = (v66 + 1);
      int v16 = v66 + 1;
      if (v15 >= a4) {
        goto LABEL_128;
      }
      continue;
    }
    break;
  }
  if (*v81 != @"media") {
    goto LABEL_115;
  }
  if (!*(_DWORD *)(a1 + 44))
  {
    *(_DWORD *)(a1 + 44) = v17;
    goto LABEL_117;
  }
LABEL_159:
  APSLogErrorAt();
  uint64_t v5 = 4294960591;
LABEL_158:
  CMTimeEpoch v69 = theDict;
  CFMutableDictionaryRef v12 = v78;
LABEL_140:
  CFRelease(cf);
LABEL_141:
  CFRelease(Mutable);
  if (v12) {
    CFRelease(v12);
  }
  if (v69)
  {
    int v70 = v69;
    goto LABEL_149;
  }
  return v5;
}

uint64_t browserController_registerCMBaseClass()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gAPBrowserControllerCFTypeID TypeID = result;
  return result;
}

uint64_t APBrowserControllerCreate(uint64_t a1, uint64_t a2, void *a3)
{
  if (gLogCategory_APBrowserController <= 30
    && (gLogCategory_APBrowserController != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (gAPBrowserControllerInitOnce != -1) {
    dispatch_once_f(&gAPBrowserControllerInitOnce, 0, (dispatch_function_t)browserController_registerCMBaseClass);
  }
  uint64_t Instance = (_OWORD *)_CFRuntimeCreateInstance();
  if (!Instance)
  {
    uint64_t v22 = 4294895486;
    APSLogErrorAt();
    return v22;
  }
  uint64_t v6 = Instance;
  Instance[7] = 0u;
  Instance[8] = 0u;
  Instance[5] = 0u;
  Instance[6] = 0u;
  Instance[3] = 0u;
  Instance[4] = 0u;
  Instance[1] = 0u;
  Instance[2] = 0u;
  dispatch_queue_t v7 = dispatch_queue_create("com.apple.airplay.APBrowserController.events", 0);
  v6[4] = v7;
  if (!v7)
  {
    uint64_t v22 = 4294895486;
LABEL_39:
    APSLogErrorAt();
    goto LABEL_29;
  }
  dispatch_queue_t v8 = dispatch_queue_create("com.apple.airplay.APBrowserController", 0);
  v6[3] = v8;
  if (!v8)
  {
    uint64_t v22 = 4294895486;
    goto LABEL_39;
  }
  CFTypeRef v9 = (const void *)*MEMORY[0x1E4F205D0];
  if (*MEMORY[0x1E4F205D0])
  {
    v6[7] = CFRetain((CFTypeRef)*MEMORY[0x1E4F205D0]);
    CFTypeRef v10 = CFRetain(v9);
  }
  else
  {
    CFTypeRef v10 = 0;
    v6[7] = 0;
  }
  v6[8] = v10;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], 0);
  v6[16] = Mutable;
  if (!Mutable)
  {
    uint64_t v22 = 4294895486;
    goto LABEL_39;
  }
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableSetRef v13 = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D548]);
  v6[17] = v13;
  if (!v13)
  {
    uint64_t v22 = 4294895486;
    goto LABEL_39;
  }
  CFMutableDictionaryRef v14 = CFDictionaryCreateMutable(v12, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v14)
  {
    uint64_t v22 = 4294895486;
    goto LABEL_39;
  }
  CFMutableDictionaryRef v15 = v14;
  if (a2)
  {
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
  }
  uint64_t v16 = APBrowserCreate();
  if (v16)
  {
    uint64_t v22 = v16;
    goto LABEL_28;
  }
  uint64_t v17 = v6[5];
  uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v18) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = 0;
  }
  uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t (*)(const void *, int, const void *, CFTypeRef), void *))(v19 + 24);
  if (!v20)
  {
    uint64_t v22 = 4294954514;
LABEL_28:
    APSLogErrorAt();
    CFRelease(v15);
LABEL_29:
    CFRelease(v6);
    return v22;
  }
  uint64_t v21 = v20(v17, browserController_browserEventHandler, v6);
  if (v21)
  {
    uint64_t v22 = v21;
    goto LABEL_28;
  }
  if (gLogCategory_APBrowserController <= 50
    && (gLogCategory_APBrowserController != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *a3 = v6;
  CFRetain(v6);
  CFRelease(v15);
  return 0;
}

uint64_t browserController_browserEventHandler(const void *a1, int a2, const void *a3, CFTypeRef cf)
{
  if (a3) {
    CFRetain(a3);
  }
  return APSDispatchAsyncFHelper();
}

uint64_t APBrowserControllerInvalidate(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = APSDispatchSyncTask();
    APSDispatchSyncFlush();
    return v1;
  }
  else
  {
    APSLogErrorAt();
    return APSSignalErrorAt();
  }
}

uint64_t browserController_invalidateInternal(uint64_t a1)
{
  if (gLogCategory_APBrowserController <= 50
    && (gLogCategory_APBrowserController != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *(unsigned char *)(a1 + 16) = 1;
  uint64_t CMBaseObject = APBrowserGetCMBaseObject();
  if (CMBaseObject)
  {
    uint64_t v3 = CMBaseObject;
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v5 = v4 ? v4 : 0;
    uint64_t v6 = *(void (**)(uint64_t))(v5 + 24);
    if (v6) {
      v6(v3);
    }
  }
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  dispatch_queue_t v7 = *(const void **)(a1 + 72);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(a1 + 72) = 0;
  }
  return 0;
}

uint64_t APBrowserControllerRegisterClusterNeedsDiscovery()
{
  return APSDispatchSyncTask();
}

uint64_t browserController_registerClusterNeedsDiscovery(uint64_t *a1)
{
  int v2 = *((unsigned __int8 *)a1 + 16);
  uint64_t v3 = (const void *)a1[1];
  uint64_t v4 = *(__CFSet **)(*a1 + 136);
  if (v2) {
    CFSetAddValue(v4, v3);
  }
  else {
    CFSetRemoveValue(v4, v3);
  }
  browserController_updateDiscoveryMode(*a1);
  return 0;
}

uint64_t APBrowserControllerRegisterEndpointActivating()
{
  return APSDispatchSyncTask();
}

uint64_t browserController_registerEndpointActivating(uint64_t *a1)
{
  CFTypeRef cf = 0;
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  browserController_copyDeviceName(a1[1], (uint64_t *)&cf);
  uint64_t DiscoveryID = APTransportDeviceGetDiscoveryID();
  if (*((unsigned char *)a1 + 16)) {
    uint64_t v4 = "-remote";
  }
  else {
    uint64_t v4 = "";
  }
  CFStringRef v5 = CFStringCreateWithFormat(v2, 0, @"%@%s", DiscoveryID, v4);
  int v6 = gLogCategory_APBrowserController;
  if (gLogCategory_APBrowserController <= 40)
  {
    if (gLogCategory_APBrowserController == -1)
    {
      if (!_LogCategory_Initialize()) {
        goto LABEL_12;
      }
      int v6 = gLogCategory_APBrowserController;
    }
    if (v6 == -1) {
      _LogCategory_Initialize();
    }
    LogPrintF();
  }
LABEL_12:
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)(*a1 + 128), v5))
  {
    if (gLogCategory_APBrowserController <= 40
      && (gLogCategory_APBrowserController != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  else
  {
    if (*((unsigned char *)a1 + 16)) {
      dispatch_queue_t v7 = @"Presence";
    }
    else {
      dispatch_queue_t v7 = @"Detailed";
    }
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(*a1 + 128), v5, v7);
    browserController_updateDiscoveryMode(*a1);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v5) {
    CFRelease(v5);
  }
  return 0;
}

uint64_t APBrowserControllerRegisterEndpointActivated()
{
  return APSDispatchSyncTask();
}

uint64_t browserController_registerEndpointActivated(uint64_t *a1)
{
  CFTypeRef cf = 0;
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  browserController_copyDeviceName(a1[1], (uint64_t *)&cf);
  uint64_t DiscoveryID = APTransportDeviceGetDiscoveryID();
  if (*((unsigned char *)a1 + 16)) {
    uint64_t v4 = "-remote";
  }
  else {
    uint64_t v4 = "";
  }
  CFStringRef v5 = CFStringCreateWithFormat(v2, 0, @"%@%s", DiscoveryID, v4);
  int v6 = gLogCategory_APBrowserController;
  if (gLogCategory_APBrowserController <= 40)
  {
    if (gLogCategory_APBrowserController == -1)
    {
      if (!_LogCategory_Initialize()) {
        goto LABEL_12;
      }
      int v6 = gLogCategory_APBrowserController;
    }
    if (v6 == -1) {
      _LogCategory_Initialize();
    }
    LogPrintF();
  }
LABEL_12:
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)(*a1 + 128), v5))
  {
    if (*((unsigned char *)a1 + 16)) {
      dispatch_queue_t v7 = @"None";
    }
    else {
      dispatch_queue_t v7 = @"Presence";
    }
    CFDictionaryReplaceValue(*(CFMutableDictionaryRef *)(*a1 + 128), v5, v7);
    uint64_t started = APTransportDeviceStartTracking();
    if (started) {
      APSLogErrorAt();
    }
    else {
      browserController_updateDiscoveryMode(*a1);
    }
  }
  else
  {
    uint64_t started = 0;
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v5) {
    CFRelease(v5);
  }
  return started;
}

uint64_t APBrowserControllerDeregisterEndpoint()
{
  return APSDispatchSyncTask();
}

uint64_t browserController_deregisterEndpoint(uint64_t *a1)
{
  CFTypeRef v10 = 0;
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  browserController_copyDeviceName(a1[1], (uint64_t *)&v10);
  uint64_t DiscoveryID = APTransportDeviceGetDiscoveryID();
  if (*((unsigned char *)a1 + 16)) {
    uint64_t v4 = "-remote";
  }
  else {
    uint64_t v4 = "";
  }
  CFStringRef v5 = CFStringCreateWithFormat(v2, 0, @"%@%s", DiscoveryID, v4);
  if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(*a1 + 128), v5)) {
    goto LABEL_11;
  }
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(*a1 + 128), v5);
  uint64_t v6 = APTransportDeviceStopTracking();
  if (v6)
  {
    uint64_t v8 = v6;
    APSLogErrorAt();
LABEL_12:
    dispatch_queue_t v7 = v10;
    if (!v10) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  browserController_updateDiscoveryMode(*a1);
  if (gLogCategory_APBrowserController > 40
    || gLogCategory_APBrowserController == -1 && !_LogCategory_Initialize())
  {
LABEL_11:
    uint64_t v8 = 0;
    goto LABEL_12;
  }
  dispatch_queue_t v7 = v10;
  LogPrintF();
  uint64_t v8 = 0;
  if (v7) {
LABEL_13:
  }
    CFRelease(v7);
LABEL_14:
  if (v5) {
    CFRelease(v5);
  }
  return v8;
}

uint64_t APBrowserControllerCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F40DD3D8](*(void *)(a1 + 24), browserController_copyProperty, a1, a2, a3, a4);
}

uint64_t browserController_copyProperty(uint64_t a1, CFTypeRef cf1, const __CFAllocator *a3, __CFDictionary **a4)
{
  if (!cf1)
  {
    APSLogErrorAt();
    return 4294895485;
  }
  if (!CFEqual(cf1, @"Browser"))
  {
    if (!CFEqual(cf1, @"showInfo"))
    {
      if (CFEqual(cf1, @"isConfiguredForMaximumDiscovery"))
      {
        uint64_t CMBaseObject = APBrowserGetCMBaseObject();
        uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v24) {
          uint64_t v25 = v24;
        }
        else {
          uint64_t v25 = 0;
        }
        uint64_t v33 = *(uint64_t (**)(uint64_t, void, const __CFAllocator *, __CFDictionary **))(v25 + 48);
        if (v33)
        {
          uint64_t v9 = v33(CMBaseObject, *MEMORY[0x1E4F47608], a3, a4);
          if (!v9) {
            return v9;
          }
        }
        else
        {
          uint64_t v9 = 4294954514;
        }
      }
      else
      {
        if (!CFEqual(cf1, @"radiosNeededForMaximumDiscovery")) {
          return 4294954509;
        }
        uint64_t v30 = APBrowserGetCMBaseObject();
        uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v31) {
          uint64_t v32 = v31;
        }
        else {
          uint64_t v32 = 0;
        }
        uint64_t v34 = *(uint64_t (**)(uint64_t, void, const __CFAllocator *, __CFDictionary **))(v32 + 48);
        if (v34)
        {
          uint64_t v9 = v34(v30, *MEMORY[0x1E4F47610], a3, a4);
          if (!v9) {
            return v9;
          }
        }
        else
        {
          uint64_t v9 = 4294954514;
        }
      }
      goto LABEL_49;
    }
    CFDictionaryRef theDict = 0;
    CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 128));
    DiscoveryModeRequiredByEndpoints = (const void *)browserController_getDiscoveryModeRequiredByEndpoints(a1);
    CFMutableDictionaryRef Mutable = CFStringCreateMutable(a3, 0);
    CFMutableSetRef v13 = Mutable;
    CFMutableStringRef theString = Mutable;
    if (Mutable)
    {
      CFStringAppend(Mutable, @"+-+ APBrowserController state +-+\n");
      CFStringAppend(v13, @"\n");
      if (*(unsigned char *)(a1 + 16)) {
        CFMutableDictionaryRef v14 = "yes";
      }
      else {
        CFMutableDictionaryRef v14 = "no";
      }
      CFStringAppendFormat(v13, 0, @"invalidated=%s ", v14);
      StringForMode = browserController_getStringForMode(*(const void **)(a1 + 64));
      uint64_t v16 = browserController_getStringForMode(*(const void **)(a1 + 56));
      CFStringAppendFormat(v13, 0, @"currentDiscoveryMode=%s requestedDiscoveryMode=%s (seed %llu)\n", StringForMode, v16, *(void *)(a1 + 48));
      if (Count <= 0) {
        uint64_t v17 = "no";
      }
      else {
        uint64_t v17 = "yes";
      }
      uint64_t v18 = browserController_getStringForMode(DiscoveryModeRequiredByEndpoints);
      CFIndex v19 = CFSetGetCount(*(CFSetRef *)(a1 + 136));
      CFStringAppendFormat(v13, 0, @"forcedMode=%@ endpointsActivated=%s endpointRequiredDiscoveryMode=%s clustersRequiringDiscovery=%d\n", 0, v17, v18, v19);
      if (CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 128)) >= 1)
      {
        context[1] = a3;
        void context[2] = 0;
        context[0] = &theString;
        CFStringAppend(v13, @"Active devices:\n");
        CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 128), (CFDictionaryApplierFunction)browserController_copyDescriptionForDevice, context);
        CFMutableSetRef v13 = theString;
      }
      CFStringAppend(v13, @"\n");
      uint64_t v20 = APBrowserGetCMBaseObject();
      uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v21) {
        uint64_t v22 = v21;
      }
      else {
        uint64_t v22 = 0;
      }
      uint64_t v26 = *(uint64_t (**)(uint64_t, void, const __CFAllocator *, CFDictionaryRef *))(v22 + 48);
      if (v26)
      {
        uint64_t v9 = v26(v20, *MEMORY[0x1E4F47618], a3, &theDict);
        if (!v9)
        {
          CFDictionaryRef Value = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F47620]);
          CFStringAppendFormat(theString, 0, @"%@", Value);
          CFMutableSetRef v13 = theString;
          CFMutableStringRef theString = 0;
          goto LABEL_27;
        }
      }
      else
      {
        uint64_t v9 = 4294954514;
      }
      APSLogErrorAt();
      if (theString) {
        CFRelease(theString);
      }
      CFMutableSetRef v13 = 0;
    }
    else
    {
      uint64_t v9 = 4294895486;
      APSLogErrorAt();
    }
LABEL_27:
    if (theDict) {
      CFRelease(theDict);
    }
    if (!v9)
    {
      uint64_t v28 = CFDictionaryCreateMutable(a3, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v28)
      {
        CFAllocatorRef v29 = v28;
        CFDictionaryAddValue(v28, @"detailedDescription", v13);
        uint64_t v9 = 0;
        *a4 = v29;
        if (!v13) {
          goto LABEL_33;
        }
        goto LABEL_32;
      }
      uint64_t v9 = 4294895486;
    }
    APSLogErrorAt();
    if (!v13)
    {
LABEL_33:
      if (!v9) {
        return v9;
      }
LABEL_49:
      APSLogErrorAt();
      return v9;
    }
LABEL_32:
    CFRelease(v13);
    goto LABEL_33;
  }
  uint64_t v8 = (__CFDictionary *)CFRetain(*(CFTypeRef *)(a1 + 40));
  uint64_t v9 = 0;
  *a4 = v8;
  return v9;
}

uint64_t APBrowserControllerReconfirmEndpoint(const void *a1, const void *a2)
{
  return APSDispatchAsyncFHelper();
}

void browserController_reconfirmEndpointInternal(uint64_t a1)
{
  if (gLogCategory_APBrowserController <= 40
    && (gLogCategory_APBrowserController != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (APTransportDeviceReconfirm()) {
    APSLogErrorAt();
  }
  CFRelease(*(CFTypeRef *)a1);
  CFAllocatorRef v2 = *(const void **)(a1 + 8);
  CFRelease(v2);
}

uint64_t APBrowserControllerDiscoverAndInjectEndpoint()
{
  uint64_t v0 = APBrowserDiscoverAndInjectDevice();
  if (v0) {
    APSLogErrorAt();
  }
  return v0;
}

uint64_t APBrowserControllerRemoveInjectedEndpoint()
{
  APTransportDeviceGetDiscoveryID();
  uint64_t v0 = APBrowserRemoveInjectedDevice();
  if (v0) {
    APSLogErrorAt();
  }
  return v0;
}

uint64_t APBrowserControllerConfigureForMaximumDiscovery()
{
  return APSDispatchSyncTask();
}

uint64_t browserController_configureForMaximumDiscovery(uint64_t a1)
{
  if (gLogCategory_APBrowserController <= 40
    && (gLogCategory_APBrowserController != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  CFStringRef v5 = *(uint64_t (**)(uint64_t))(v4 + 64);
  if (!v5)
  {
    uint64_t v6 = 4294954514;
LABEL_12:
    APSLogErrorAt();
    return v6;
  }
  uint64_t v6 = v5(v2);
  if (v6) {
    goto LABEL_12;
  }
  return v6;
}

uint64_t APBrowserControllerSetEventHandlers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v13[19] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a3;
  v13[0] = a2;
  uint64_t v10 = a5;
  uint64_t v11 = a4;
  uint64_t v8 = a7;
  uint64_t v9 = a6;
  v13[1] = a1 + 80;
  v13[2] = v13;
  v13[3] = 8;
  v13[4] = a1 + 88;
  v13[5] = &v12;
  v13[6] = 8;
  v13[7] = a1 + 96;
  v13[8] = &v11;
  v13[9] = 8;
  v13[10] = a1 + 104;
  v13[11] = &v10;
  v13[12] = 8;
  v13[13] = a1 + 120;
  v13[14] = &v8;
  v13[15] = 8;
  v13[16] = a1 + 112;
  v13[17] = &v9;
  v13[18] = 8;
  return APSDispatchSyncBatchAssignment();
}

void browserController_Finalize(void *a1)
{
  browserController_invalidateInternal((uint64_t)a1);
  uint64_t v2 = (const void *)a1[16];
  if (v2)
  {
    CFRelease(v2);
    a1[16] = 0;
  }
  uint64_t v3 = (const void *)a1[17];
  if (v3)
  {
    CFRelease(v3);
    a1[17] = 0;
  }
  uint64_t v4 = (const void *)a1[7];
  if (v4)
  {
    CFRelease(v4);
    a1[7] = 0;
  }
  CFStringRef v5 = (const void *)a1[8];
  if (v5)
  {
    CFRelease(v5);
    a1[8] = 0;
  }
  uint64_t v6 = (const void *)a1[5];
  if (v6)
  {
    CFRelease(v6);
    a1[5] = 0;
  }
  dispatch_queue_t v7 = a1[3];
  if (v7)
  {
    dispatch_release(v7);
    a1[3] = 0;
  }
  uint64_t v8 = a1[4];
  if (v8)
  {
    dispatch_release(v8);
    a1[4] = 0;
  }
}

void browserController_browserModeAlreadySet(void *a1)
{
  if (gLogCategory_APBrowserController <= 40
    && (gLogCategory_APBrowserController != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v2 = (void *)*a1;
  if (!*(unsigned char *)(*a1 + 16))
  {
    uint64_t v3 = (void (*)(void, void, void))v2[13];
    if (v3)
    {
      v3(a1[1], a1[2], v2[15]);
      uint64_t v2 = (void *)*a1;
    }
  }
  CFRelease(v2);
  uint64_t v4 = (const void *)a1[1];
  if (v4) {
    CFRelease(v4);
  }
  CFStringRef v5 = (const void *)a1[3];
  if (v5)
  {
    CFRelease(v5);
  }
}

void browserController_copyDeviceName(uint64_t a1, uint64_t *a2)
{
  if (APTransportDeviceGetAdvertiserInfo())
  {
    *a2 = APAdvertiserInfoCopyProperty();
  }
  else
  {
    APSLogErrorAt();
  }
}

const char *browserController_getStringForMode(const void *a1)
{
  if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F205D0])) {
    return "None";
  }
  if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F205D8])) {
    return "Presence";
  }
  if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F205C0])) {
    return "Background";
  }
  if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F205C8])) {
    return "Detailed";
  }
  if (gLogCategory_APBrowserController <= 60
    && (gLogCategory_APBrowserController != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return "Unrecognized";
}

void browserController_copyDescriptionForDevice(uint64_t a1, uint64_t a2, CFMutableStringRef **a3)
{
  uint64_t v4 = *a3;
  CFStringAppendFormat(**a3, 0, @"    %@", a1);
  if (*MEMORY[0x1E4F1CFD0] == a2) {
    CFStringRef v5 = "- Requires Detailed";
  }
  else {
    CFStringRef v5 = "";
  }
  CFStringAppendFormat(*v4, 0, @" %s", v5);
  uint64_t v6 = *v4;
  CFStringAppend(v6, @"\n");
}

void browserController_tickleDetailedMode(const void *a1)
{
  if (APBrowserTickleDetailedMode()) {
    APSLogErrorAt();
  }
  CFRelease(a1);
}

void browserController_browserEventHandlerInternal(void *a1)
{
  if (gLogCategory_APBrowserController <= 30
    && (gLogCategory_APBrowserController != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  switch(*((_DWORD *)a1 + 4))
  {
    case 1:
      uint64_t v4 = *(void (**)(uint64_t, uint64_t))(*a1 + 80);
      if (v4)
      {
        uint64_t v5 = *(void *)(*a1 + 120);
        uint64_t v6 = 1;
        goto LABEL_14;
      }
      break;
    case 2:
      uint64_t v4 = *(void (**)(uint64_t, uint64_t))(*a1 + 80);
      if (v4)
      {
        uint64_t v5 = *(void *)(*a1 + 120);
        uint64_t v6 = 0;
LABEL_14:
        v4(v6, v5);
      }
      break;
    case 3:
    case 4:
      if (!a1[3]) {
        goto LABEL_31;
      }
      if (APTransportDeviceCreate()) {
        goto LABEL_32;
      }
      uint64_t v2 = *a1;
      uint64_t v3 = *(void (**)(void, void))(*a1 + 88);
      if (v3) {
        goto LABEL_18;
      }
      break;
    case 5:
      if (a1[3])
      {
        if (APTransportDeviceCreate())
        {
LABEL_32:
          APSLogErrorAt();
        }
        else
        {
          uint64_t v2 = *a1;
          uint64_t v3 = *(void (**)(void, void))(*a1 + 96);
          if (v3) {
LABEL_18:
          }
            v3(0, *(void *)(v2 + 120));
        }
      }
      else
      {
LABEL_31:
        APSLogErrorAt();
        APSSignalErrorAt();
      }
      break;
    case 7:
      break;
    case 8:
      CFRelease((CFTypeRef)*a1);
      break;
    case 9:
      dispatch_queue_t v7 = *(void (**)(void))(*a1 + 112);
      if (v7) {
        v7(*(void *)(*a1 + 120));
      }
      break;
    default:
      if (gLogCategory_APBrowserController <= 60
        && (gLogCategory_APBrowserController != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      break;
  }
  CFRelease((CFTypeRef)*a1);
  CFRelease((CFTypeRef)a1[1]);
  uint64_t v8 = (const void *)a1[3];
  if (v8) {
    CFRelease(v8);
  }
}

uint64_t APEndpointCarPlayCreateWithTransportDevice(uint64_t a1, const void *a2, const __CFDictionary *a3, CFTypeRef *a4)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  unsigned int LoggingCaches = 0;
  CFTypeRef cf = 0;
  CFTypeRef v40 = 0;
  long long v44 = 0u;
  long long v45 = 0u;
  *(_OWORD *)label = 0u;
  long long v43 = 0u;
  if (!a2 || !a4)
  {
    APSLogErrorAt();
    int v38 = -16720;
LABEL_82:
    unsigned int LoggingCaches = v38;
    goto LABEL_68;
  }
  unsigned int LoggingCaches = APEndpointDescriptionAirPlayCreateWithTransportDevice(a1, a2, 0, &cf);
  if (LoggingCaches) {
    goto LABEL_20;
  }
  if (!APSGetFBOPropertyInt64() || !APSGetFBOPropertyInt64() && !APSGetFBOPropertyInt64())
  {
    APSLogErrorAt();
    int v38 = -71754;
    goto LABEL_82;
  }
  FigEndpointExtendedGetClassID();
  unsigned int LoggingCaches = CMDerivedObjectCreate();
  if (LoggingCaches) {
    goto LABEL_20;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v8 = CFRetain(cf);
  *(void *)(DerivedStorage + 8) = v8;
  uint64_t CMBaseObject = APEndpointDescriptionGetCMBaseObject(v8);
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, uint64_t))(v11 + 48);
  if (!v12)
  {
    unsigned int LoggingCaches = -12782;
    goto LABEL_20;
  }
  unsigned int LoggingCaches = v12(CMBaseObject, @"Name", a1, DerivedStorage + 16);
  if (LoggingCaches)
  {
LABEL_20:
    APSLogErrorAt();
    goto LABEL_68;
  }
  if (!FigCFEqual())
  {
    CFURLRef v15 = 0;
LABEL_22:
    uint64_t v17 = 0;
    goto LABEL_23;
  }
  CFMutableSetRef v13 = *(const void **)(DerivedStorage + 24);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(DerivedStorage + 24) = 0;
  }
  CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFURLRef v15 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x1E4F1CF80], @"/System/Library/PrivateFrameworks/CarKit.framework", kCFURLPOSIXPathStyle, 1u);
  if (!v15) {
    goto LABEL_22;
  }
  uint64_t v16 = CFBundleCreate(v14, v15);
  uint64_t v17 = v16;
  if (v16) {
    *(void *)(DerivedStorage + 24) = CFBundleCopyLocalizedString(v16, @"CARPLAY_LOCKSCREEN_TITLE", @"CARPLAY_LOCKSCREEN_TITLE", @"Localizable");
  }
LABEL_23:
  *(unsigned char *)(DerivedStorage + 40) = APSGetFBOPropertyInt64() == 0;
  if (LoggingCaches || (int v18 = APSGetFBOPropertyInt64(), LoggingCaches))
  {
    APSLogErrorAt();
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_62;
  }
  if (v18 == 32) {
    *(unsigned char *)(DerivedStorage + 41) = 1;
  }
  SNPrintF();
  dispatch_queue_t v19 = dispatch_queue_create(label, 0);
  *(void *)(DerivedStorage + 144) = v19;
  if (!v19) {
    goto LABEL_78;
  }
  SNPrintF();
  dispatch_queue_t v20 = dispatch_queue_create(label, 0);
  *(void *)(DerivedStorage + 472) = v20;
  if (!v20
    || (SNPrintF(), dispatch_queue_t v21 = dispatch_queue_create(label, 0), (*(void *)(DerivedStorage + 456) = v21) == 0)
    || (SNPrintF(), v22 = dispatch_queue_create(label, 0), (*(void *)uint64_t DerivedStorage = v22) == 0))
  {
LABEL_78:
    APSLogErrorAt();
    CFMutableDictionaryRef Mutable = 0;
LABEL_80:
    unsigned int LoggingCaches = -16721;
    goto LABEL_62;
  }
  CFPrefs_GetInt64();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable
    || (CFDictionarySetInt64(),
        unsigned int LoggingCaches = APAudioEngineCarPlayCreate(0, (uint64_t)Mutable, (void *)(DerivedStorage + 256)),
        !*(void *)(DerivedStorage + 256)))
  {
    APSLogErrorAt();
    goto LABEL_80;
  }
  uint64_t v24 = *(void *)(DerivedStorage + 8);
  CFAllocatorRef v25 = CFGetAllocator(v40);
  uint64_t v26 = APEndpointDescriptionGetCMBaseObject(v24);
  uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v27) {
    uint64_t v28 = v27;
  }
  else {
    uint64_t v28 = 0;
  }
  CFAllocatorRef v29 = *(uint64_t (**)(uint64_t, __CFString *, CFAllocatorRef, uint64_t))(v28 + 48);
  if (v29)
  {
    unsigned int LoggingCaches = v29(v26, @"DeviceID", v25, DerivedStorage + 32);
    if (!LoggingCaches)
    {
      *(_DWORD *)(DerivedStorage + 320) = -1;
      *(void *)(DerivedStorage + 392) = -1;
      *(void *)(DerivedStorage + 400) = -1;
      *(_DWORD *)(DerivedStorage + 408) = -1;
      if (CFPrefs_GetInt64() <= 0)
      {
        *(void *)(DerivedStorage + 336) = 0;
        *(void *)(DerivedStorage + 344) = 0;
        if (!a3) {
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t Int64 = CFPrefs_GetInt64();
        BOOL v31 = 60 * Int64 == 0;
        size_t v32 = (unint64_t)(60 * Int64) >> 1;
        *(void *)(DerivedStorage + 336) = 0;
        *(void *)(DerivedStorage + 344) = v32;
        if (!v31) {
          *(void *)(DerivedStorage + 328) = malloc_type_calloc(v32, 8uLL, 0x6004044C4A2DFuLL);
        }
        if (!a3)
        {
LABEL_55:
          unsigned int LoggingCaches = APSEventRecorderCreate();
          if (!LoggingCaches)
          {
            APSEventRecorderAddSignPostForEvent();
            APSEventRecorderAddSignPostForEvent();
            APSEventRecorderAddSignPostForEvent();
            APSEventRecorderAddSignPostForEvent();
            APSEventRecorderAddSignPostForEvent();
            APSEventRecorderAddSignPostForEvent();
            APSEventRecorderAddSignPostForEvent();
            APSEventRecorderAddSignPostForEvent();
            unsigned int LoggingCaches = carEndpoint_createLoggingCaches();
            if (!LoggingCaches)
            {
              if (gLogCategory_APEndpointCarPlay <= 50
                && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
              *a4 = v40;
              CFTypeRef v40 = 0;
              goto LABEL_62;
            }
          }
          goto LABEL_44;
        }
      }
      *(unsigned char *)(DerivedStorage + 136) = CFDictionaryGetInt64() != 0;
      if (CFDictionaryContainsKey(a3, @"sessionHostInfo"))
      {
        uint64_t v33 = *(const void **)(DerivedStorage + 48);
        CFDictionaryRef Value = CFDictionaryGetValue(a3, @"sessionHostInfo");
        *(void *)(DerivedStorage + 48) = Value;
        if (Value) {
          CFRetain(Value);
        }
        if (v33) {
          CFRelease(v33);
        }
      }
      CFStringRef v35 = CFDictionaryGetValue(a3, @"EventRecorder");
      BOOL v36 = *(const void **)(DerivedStorage + 488);
      *(void *)(DerivedStorage + 488) = v35;
      if (v35) {
        CFRetain(v35);
      }
      if (v36) {
        CFRelease(v36);
      }
      goto LABEL_55;
    }
  }
  else
  {
    unsigned int LoggingCaches = -12782;
  }
LABEL_44:
  APSLogErrorAt();
LABEL_62:
  if (v17) {
    CFRelease(v17);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
LABEL_68:
  if (v40) {
    CFRelease(v40);
  }
  if (cf) {
    CFRelease(cf);
  }
  return LoggingCaches;
}

uint64_t carEndpoint_createLoggingCaches()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  Boolean keyExistsAndHasValidFormat = 0;
  *(_DWORD *)(DerivedStorage + 512) = 20;
  AppIntegerCFDictionaryRef Value = CFPreferencesGetAppIntegerValue(@"sendCommandCacheSize", @"com.apple.airplay", &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat) {
    BOOL v2 = AppIntegerValue == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    AppIntegerCFDictionaryRef Value = *(_DWORD *)(DerivedStorage + 512);
  }
  else {
    *(_DWORD *)(DerivedStorage + 512) = AppIntegerValue;
  }
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], AppIntegerValue, MEMORY[0x1E4F1D510]);
  *(void *)(DerivedStorage + 504) = Mutable;
  if (!Mutable) {
    goto LABEL_24;
  }
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *(void *)(DerivedStorage + 496) = FigSimpleMutexCreate();
  *(_DWORD *)(DerivedStorage + 528) = 10;
  Boolean keyExistsAndHasValidFormat = 0;
  unsigned int v5 = CFPreferencesGetAppIntegerValue(@"receivedCommandCacheSize", @"com.apple.airplay", &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat && v5) {
    *(_DWORD *)(DerivedStorage + 528) = v5;
  }
  else {
    unsigned int v5 = *(_DWORD *)(DerivedStorage + 528);
  }
  CFMutableArrayRef v6 = CFArrayCreateMutable(v3, v5, MEMORY[0x1E4F1D510]);
  *(void *)(DerivedStorage + 520) = v6;
  if (!v6)
  {
LABEL_24:
    APSLogErrorAt();
    return 4294950575;
  }
  if (gLogCategory_APEndpointCarPlay > 50) {
    return 0;
  }
  if (gLogCategory_APEndpointCarPlay != -1 || (uint64_t result = _LogCategory_Initialize(), result))
  {
    LogPrintF();
    return 0;
  }
  return result;
}

void carEndpoint_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCarPlay <= 30
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (introspector_getCollectionOfActiveCarPlayEndpoints_once != -1) {
    dispatch_once(&introspector_getCollectionOfActiveCarPlayEndpoints_once, &__block_literal_global_23);
  }
  if (introspector_getCollectionOfActiveCarPlayEndpoints_coll)
  {
    CFAllocatorRef v3 = *(NSObject **)introspector_getCollectionOfActiveCarPlayEndpoints_coll;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __carEndpoint_Finalize_block_invoke;
    block[3] = &__block_descriptor_tmp_24;
    block[4] = introspector_getCollectionOfActiveCarPlayEndpoints_coll;
    void block[5] = a1;
    dispatch_sync(v3, block);
  }
  if (*(void *)DerivedStorage)
  {
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  uint64_t v4 = *(const void **)(DerivedStorage + 8);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DerivedStorage + 8) = 0;
  }
  unsigned int v5 = *(const void **)(DerivedStorage + 16);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(DerivedStorage + 16) = 0;
  }
  CFMutableArrayRef v6 = *(const void **)(DerivedStorage + 24);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(DerivedStorage + 24) = 0;
  }
  dispatch_queue_t v7 = *(const void **)(DerivedStorage + 32);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(DerivedStorage + 32) = 0;
  }
  CFTypeRef v8 = *(const void **)(DerivedStorage + 48);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(DerivedStorage + 48) = 0;
  }
  uint64_t v9 = *(const void **)(DerivedStorage + 488);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(DerivedStorage + 488) = 0;
  }
  uint64_t v10 = *(const void **)(DerivedStorage + 480);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(DerivedStorage + 480) = 0;
  }
  FigSimpleMutexDestroy();
  uint64_t v11 = *(const void **)(DerivedStorage + 504);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(DerivedStorage + 504) = 0;
  }
  uint64_t v12 = *(const void **)(DerivedStorage + 520);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(DerivedStorage + 520) = 0;
  }
  CFMutableSetRef v13 = *(const void **)(DerivedStorage + 192);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(DerivedStorage + 192) = 0;
  }
  CFAllocatorRef v14 = *(NSObject **)(DerivedStorage + 456);
  if (v14)
  {
    dispatch_release(v14);
    *(void *)(DerivedStorage + 456) = 0;
  }
  CFURLRef v15 = *(const void **)(DerivedStorage + 464);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(DerivedStorage + 464) = 0;
  }
  uint64_t v16 = *(const void **)(DerivedStorage + 216);
  if (v16)
  {
    CFRelease(v16);
    *(void *)(DerivedStorage + 216) = 0;
  }
  uint64_t v17 = *(const void **)(DerivedStorage + 232);
  if (v17)
  {
    CFRelease(v17);
    *(void *)(DerivedStorage + 232) = 0;
  }
  int v18 = *(const void **)(DerivedStorage + 240);
  if (v18)
  {
    CFRelease(v18);
    *(void *)(DerivedStorage + 240) = 0;
  }
  dispatch_queue_t v19 = *(const void **)(DerivedStorage + 248);
  if (v19)
  {
    CFRelease(v19);
    *(void *)(DerivedStorage + 248) = 0;
  }
  dispatch_queue_t v20 = *(const void **)(DerivedStorage + 256);
  if (v20)
  {
    CFRelease(v20);
    *(void *)(DerivedStorage + 256) = 0;
  }
  dispatch_queue_t v21 = *(const void **)(DerivedStorage + 264);
  if (v21)
  {
    CFRelease(v21);
    *(void *)(DerivedStorage + 264) = 0;
  }
  dispatch_queue_t v22 = *(const void **)(DerivedStorage + 272);
  if (v22)
  {
    CFRelease(v22);
    *(void *)(DerivedStorage + 272) = 0;
  }
  uint64_t v23 = *(const void **)(DerivedStorage + 280);
  if (v23)
  {
    CFRelease(v23);
    *(void *)(DerivedStorage + 280) = 0;
  }
  uint64_t v24 = *(const void **)(DerivedStorage + 296);
  if (v24)
  {
    CFRelease(v24);
    *(void *)(DerivedStorage + 296) = 0;
  }
  CFAllocatorRef v25 = *(const void **)(DerivedStorage + 312);
  if (v25)
  {
    CFRelease(v25);
    *(void *)(DerivedStorage + 312) = 0;
  }
  uint64_t v26 = *(const void **)(DerivedStorage + 432);
  if (v26)
  {
    CFRelease(v26);
    *(void *)(DerivedStorage + 432) = 0;
  }
  uint64_t v27 = *(const void **)(DerivedStorage + 448);
  if (v27)
  {
    CFRelease(v27);
    *(void *)(DerivedStorage + 448) = 0;
  }
  uint64_t v28 = *(const void **)(DerivedStorage + 440);
  if (v28)
  {
    CFRelease(v28);
    *(void *)(DerivedStorage + 440) = 0;
  }
  CFAllocatorRef v29 = *(NSObject **)(DerivedStorage + 144);
  if (v29)
  {
    dispatch_release(v29);
    *(void *)(DerivedStorage + 144) = 0;
  }
  if (*(void *)(DerivedStorage + 344))
  {
    unint64_t v30 = 0;
    do
    {
      BOOL v31 = *(const void **)(*(void *)(DerivedStorage + 328) + 8 * v30);
      if (!v31) {
        break;
      }
      CFRelease(v31);
      *(void *)(*(void *)(DerivedStorage + 328) + 8 * v30++) = 0;
    }
    while (v30 < *(void *)(DerivedStorage + 344));
  }
  free(*(void **)(DerivedStorage + 328));
  size_t v32 = *(NSObject **)(DerivedStorage + 472);
  if (v32)
  {
    dispatch_release(v32);
    *(void *)(DerivedStorage + 472) = 0;
  }
}

uint64_t carEndpoint_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v12 = 0;
  CFMutableSetRef v13 = &v12;
  uint64_t v14 = 0x2000000000;
  CFMutableStringRef Mutable = 0;
  CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2000000000;
  uint64_t v11 = 0;
  CFAllocatorRef v3 = *(NSObject **)(DerivedStorage + 144);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __carEndpoint_CopyDebugDescription_block_invoke;
  block[3] = &unk_1E6893DB8;
  void block[5] = &v8;
  void block[6] = a1;
  block[4] = &v12;
  dispatch_sync(v3, block);
  uint64_t v4 = (const void *)v9[3];
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = v13[3];
  _Block_object_dispose(&v8, 8);
  _Block_object_dispose(&v12, 8);
  return v5;
}

uint64_t carEndpoint_CopyProperty(const void *a1, const void *a2, const __CFAllocator *a3, CFMutableDictionaryRef *a4)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  if (gLogCategory_APEndpointCarPlay <= 10
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21048]))
  {
    uint64_t v9 = (CFTypeRef *)MEMORY[0x1E4F21560];
LABEL_7:
    CFDictionaryRef Value = (void *)*v9;
LABEL_8:
    CFDictionaryRef Value = (void *)CFRetain(Value);
LABEL_9:
    uint64_t Address = 0;
    *a4 = (CFMutableDictionaryRef)Value;
    return Address;
  }
  if (!CFEqual(a2, @"AirPlayDiagnosticsTargetInfo"))
  {
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20D20]))
    {
      uint64_t CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(void *)(DerivedStorage + 8));
      uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v18) {
        uint64_t v19 = v18;
      }
      else {
        uint64_t v19 = 0;
      }
      uint64_t v26 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFMutableDictionaryRef *))(v19 + 48);
      if (v26)
      {
        uint64_t Address = v26(CMBaseObject, @"BluetoothDeviceIDs", a3, a4);
        if (!Address) {
          return Address;
        }
      }
      else
      {
        uint64_t Address = 4294954514;
      }
LABEL_37:
      APSLogErrorAt();
      if (Address != -12784) {
        goto LABEL_39;
      }
      goto LABEL_38;
    }
    if (CFEqual(a2, @"CarPlayControlSupported"))
    {
      uint64_t v23 = *(void *)(DerivedStorage + 8);
      uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v24) {
        uint64_t v25 = v24;
      }
      else {
        uint64_t v25 = 0;
      }
      CFAllocatorRef v29 = *(unsigned int (**)(uint64_t, uint64_t))(v25 + 16);
      if (v29 && v29(v23, 37))
      {
        uint64_t v9 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
        goto LABEL_7;
      }
      goto LABEL_134;
    }
    if (CFEqual(a2, @"EndpointDescription"))
    {
      CFDictionaryRef Value = *(void **)(DerivedStorage + 8);
      if (!Value) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20E38]))
    {
      CFDictionaryRef Value = *(void **)(DerivedStorage + 32);
      if (!Value) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20E60]))
    {
      int isEndpointConnected = carEndpoint_isEndpointConnected();
      uint64_t v9 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
      if (!isEndpointConnected) {
        uint64_t v9 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
      }
      goto LABEL_7;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20EE0]))
    {
      uint64_t Address = APEndpointDescriptionCopyProperty(*(void *)(DerivedStorage + 8), @"LimitedUIElements", 0, (uint64_t)a4);
      if (!Address) {
        return Address;
      }
      goto LABEL_37;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20F18]))
    {
      uint64_t Address = APEndpointDescriptionCopyProperty(*(void *)(DerivedStorage + 8), @"Model", (uint64_t)a3, (uint64_t)a4);
      if (!Address) {
        return Address;
      }
      goto LABEL_37;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20EF8]))
    {
      uint64_t v31 = APEndpointDescriptionCopyProperty(*(void *)(DerivedStorage + 8), @"Manufacturer", (uint64_t)a3, (uint64_t)a4);
      uint64_t v32 = DerivedStorage;
      uint64_t Address = v31;
      if (!*(void *)(v32 + 48) || v31 != -12784)
      {
        if (!v31) {
          return Address;
        }
        goto LABEL_37;
      }
    }
    else
    {
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20DF0]))
      {
        uint64_t Address = APEndpointDescriptionCopyProperty(*(void *)(DerivedStorage + 8), @"FirmwareVersion", (uint64_t)a3, (uint64_t)a4);
        if (!Address) {
          return Address;
        }
        goto LABEL_37;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21040]))
      {
        uint64_t v33 = (CFTypeRef *)MEMORY[0x1E4F21540];
        if (!*(unsigned char *)(DerivedStorage + 40)) {
          uint64_t v33 = (CFTypeRef *)MEMORY[0x1E4F21538];
        }
        CFDictionaryRef Value = (void *)*v33;
        if (!*v33) {
          goto LABEL_9;
        }
        goto LABEL_8;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20F28]))
      {
        CFDictionaryRef Value = *(void **)(DerivedStorage + 24);
        if (!Value)
        {
          CFDictionaryRef Value = *(void **)(DerivedStorage + 16);
          if (!Value) {
            goto LABEL_9;
          }
        }
        goto LABEL_8;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20FD8]))
      {
        uint64_t Address = APEndpointDescriptionCopyProperty(*(void *)(DerivedStorage + 8), @"SupportsDCXForSpatialAudio", (uint64_t)a3, (uint64_t)a4);
        if (!Address) {
          return Address;
        }
        goto LABEL_37;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20F38]))
      {
        uint64_t Address = APEndpointDescriptionCopyProperty(*(void *)(DerivedStorage + 8), @"OEMIconLabel", (uint64_t)a3, (uint64_t)a4);
        if (!Address) {
          return Address;
        }
        goto LABEL_37;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20F48]))
      {
        uint64_t Address = APEndpointDescriptionCopyProperty(*(void *)(DerivedStorage + 8), @"OEMIcons", (uint64_t)a3, (uint64_t)a4);
        if (!Address) {
          return Address;
        }
        goto LABEL_37;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21060]))
      {
        uint64_t Address = APEndpointDescriptionCopyProperty(*(void *)(DerivedStorage + 8), @"UseLegacyStarkModeActions", (uint64_t)a3, (uint64_t)a4);
        if (!Address) {
          return Address;
        }
        goto LABEL_37;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21058]))
      {
        uint64_t Address = APEndpointDescriptionCopyProperty(*(void *)(DerivedStorage + 8), @"UseIndirectStarkSpeechModeTransitions", (uint64_t)a3, (uint64_t)a4);
        if (!Address) {
          return Address;
        }
        goto LABEL_37;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20CD8]))
      {
        uint64_t Address = APEndpointDescriptionCopyProperty(*(void *)(DerivedStorage + 8), @"AllowCarPlaySpeechStateForMediaAudioType", (uint64_t)a3, (uint64_t)a4);
        if (!Address) {
          return Address;
        }
        goto LABEL_37;
      }
      if (CFEqual(a2, @"ScreenIsOverscanned"))
      {
        uint64_t Address = carEndpoint_copyPropertyForDisplay(a1, @"IsOverscanned", (uint64_t)a3, (uint64_t)a4);
        if (!Address) {
          return Address;
        }
        goto LABEL_37;
      }
      if (CFEqual(a2, @"ScreenSize"))
      {
        uint64_t Address = carEndpoint_copyPropertyForDisplay(a1, @"PixelSize", (uint64_t)a3, (uint64_t)a4);
        if (!Address) {
          return Address;
        }
        goto LABEL_37;
      }
      if (CFEqual(a2, @"SourceVersion"))
      {
        uint64_t Address = APEndpointDescriptionCopyProperty(*(void *)(DerivedStorage + 8), @"SourceVersion", (uint64_t)a3, (uint64_t)a4);
        if (!Address) {
          return Address;
        }
        goto LABEL_37;
      }
      if (CFEqual(a2, @"StatusFlags") || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21018]))
      {
        uint64_t Address = APEndpointDescriptionCopyProperty(*(void *)(DerivedStorage + 8), @"StatusFlags", (uint64_t)a3, (uint64_t)a4);
        if (!Address) {
          return Address;
        }
        goto LABEL_37;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20DB0]))
      {
        uint64_t Address = APEndpointDescriptionCopyProperty(*(void *)(DerivedStorage + 8), @"ExtendedFeatures", (uint64_t)a3, (uint64_t)a4);
        if (!Address) {
          return Address;
        }
        goto LABEL_37;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21000]))
      {
        uint64_t Address = APEndpointDescriptionCopyProperty(*(void *)(DerivedStorage + 8), @"SupportsMixableSiriAudio", (uint64_t)a3, (uint64_t)a4);
        if (!Address) {
          return Address;
        }
        goto LABEL_37;
      }
      if (CFEqual(a2, @"EndpointInfo"))
      {
        uint64_t Address = APEndpointDescriptionCopyProperty(*(void *)(DerivedStorage + 8), @"EndpointInfo", (uint64_t)a3, (uint64_t)a4);
        if (!Address) {
          return Address;
        }
        goto LABEL_37;
      }
      if (CFEqual(a2, @"CornerMasksSupported"))
      {
        uint64_t v9 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
        if (!*(unsigned char *)(DerivedStorage + 62)) {
          uint64_t v9 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
        }
        goto LABEL_7;
      }
      if (CFEqual(a2, @"VoiceTriggerSupported"))
      {
        uint64_t Address = APEndpointDescriptionCopyProperty(*(void *)(DerivedStorage + 8), @"SupportsJarvisVoice", (uint64_t)a3, (uint64_t)a4);
        if (!Address) {
          return Address;
        }
        goto LABEL_37;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21088]))
      {
LABEL_134:
        uint64_t v9 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
        goto LABEL_7;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20FA0]))
      {
        CFDictionaryRef v34 = *(const __CFDictionary **)(DerivedStorage + 48);
        if (!v34)
        {
          uint64_t Address = 0;
          *a4 = 0;
          return Address;
        }
        CFDictionaryRef Value = (void *)CFDictionaryGetValue(v34, @"requestIdentifier");
        if (!Value) {
          goto LABEL_9;
        }
        goto LABEL_8;
      }
    }
LABEL_38:
    CFTypeRef cf = 0;
    p_CFTypeRef cf = &cf;
    uint64_t v37 = 0x2000000000;
    int v38 = 0;
    uint64_t v27 = CMBaseObjectGetDerivedStorage();
    uint64_t v28 = *(NSObject **)(v27 + 144);
    *(void *)&long long block = MEMORY[0x1E4F143A8];
    *((void *)&block + 1) = 0x40000000;
    *(void *)&long long v40 = __carEndpoint_copyStateProperty_block_invoke;
    *((void *)&v40 + 1) = &unk_1E6893E28;
    *(void *)&long long v41 = &cf;
    *((void *)&v41 + 1) = v27;
    *(void *)&long long v42 = a2;
    *((void *)&v42 + 1) = a4;
    *(void *)&long long v43 = a3;
    *((void *)&v43 + 1) = a1;
    dispatch_sync(v28, &block);
    uint64_t Address = *((unsigned int *)p_cf + 6);
    _Block_object_dispose(&cf, 8);
LABEL_39:
    if (Address == -12784)
    {
      if (gLogCategory_APEndpointCarPlay <= 30
        && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      return 4294954512;
    }
    return Address;
  }
  uint64_t v12 = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long block = 0u;
  long long v40 = 0u;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    uint64_t v14 = APEndpointDescriptionGetCMBaseObject(*(void *)(v12 + 8));
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    dispatch_queue_t v20 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v16 + 48);
    if (v20)
    {
      uint64_t v21 = v20(v14, @"TransportDevice", a3, &cf);
      if (v21)
      {
        uint64_t Address = v21;
      }
      else
      {
        uint64_t Address = APTransportDeviceGetAddress();
        if (Address)
        {
          APSLogErrorAt();
        }
        else
        {
          CFDictionarySetCString();
          *a4 = Mutable;
          CFMutableDictionaryRef Mutable = 0;
        }
      }
    }
    else
    {
      uint64_t Address = 4294954514;
    }
  }
  else
  {
    APSLogErrorAt();
    uint64_t Address = 4294950575;
  }
  if (cf) {
    CFRelease(cf);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (Address) {
    goto LABEL_37;
  }
  return Address;
}

uint64_t carEndpoint_SetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2000000000;
  int v14 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCarPlay <= 10
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  dispatch_queue_t v7 = *(NSObject **)(DerivedStorage + 144);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __carEndpoint_SetProperty_block_invoke;
  block[3] = &unk_1E6893EA0;
  block[4] = &v11;
  void block[5] = DerivedStorage;
  void block[6] = a2;
  void block[7] = a3;
  void block[8] = a1;
  dispatch_sync(v7, block);
  uint64_t v8 = *((unsigned int *)v12 + 6);
  _Block_object_dispose(&v11, 8);
  return v8;
}

uint64_t __introspector_getCollectionOfActiveCarPlayEndpoints_block_invoke()
{
  uint64_t result = IsAppleInternalBuild();
  if (result)
  {
    introspector_getCollectionOfActiveCarPlayEndpoints_coll = (uint64_t)malloc_type_calloc(1uLL, 0x18uLL, 0x70040EA3A3B56uLL);
    *(void *)introspector_getCollectionOfActiveCarPlayEndpoints_coll = dispatch_queue_create("CollectionOfActiveCarPlayEndpoints", 0);
    CFMutableSetRef Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
    uint64_t v2 = introspector_getCollectionOfActiveCarPlayEndpoints_coll;
    *(void *)(introspector_getCollectionOfActiveCarPlayEndpoints_coll + 8) = Mutable;
    *(void *)(v2 + 16) = "ActiveCarPlayEndpoints";
    return APSIntrospectorAddCommand();
  }
  return result;
}

void carEndpoint_copyShowInfoDictionary(uint64_t a1, const __CFAllocator *a2, __CFDictionary **a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v38 = 0;
  CFTypeRef cf = 0;
  CMTimeValue value = 0;
  CFMutableSetRef Mutable = CFDictionaryCreateMutable(a2, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    dispatch_queue_t v7 = Mutable;
    CFDictionarySetValue(Mutable, @"Name", *(const void **)(DerivedStorage + 16));
    CFDictionarySetValue(v7, @"DeviceID", *(const void **)(DerivedStorage + 32));
    uint64_t CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(void *)(DerivedStorage + 8));
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v10 + 48);
    if (v11)
    {
      v11(CMBaseObject, @"TransportDevice", a2, &v38);
      if (v38)
      {
        uint64_t DiscoveryID = (const void *)APTransportDeviceGetDiscoveryID();
        CFDictionarySetValue(v7, @"DiscoveryID", DiscoveryID);
        if (v38)
        {
          CFRelease(v38);
          CFTypeRef v38 = 0;
        }
      }
    }
    uint64_t v13 = APEndpointDescriptionGetCMBaseObject(*(void *)(DerivedStorage + 8));
    uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, void **))(v15 + 48);
    if (v16) {
      v16(v13, @"Model", a2, &value);
    }
    CFDictionarySetValue(v7, @"Model", value);
    if (value)
    {
      CFRelease(value);
      CMTimeValue value = 0;
    }
    uint64_t v17 = APEndpointDescriptionGetCMBaseObject(*(void *)(DerivedStorage + 8));
    uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v18) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    dispatch_queue_t v20 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, void **))(v19 + 48);
    if (v20) {
      v20(v17, @"SourceVersion", a2, &value);
    }
    CFDictionarySetValue(v7, @"SourceVersion", value);
    if (value)
    {
      CFRelease(value);
      CMTimeValue value = 0;
    }
    uint64_t v21 = *(void *)(DerivedStorage + 8);
    uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v22) {
      uint64_t v23 = v22;
    }
    else {
      uint64_t v23 = 0;
    }
    uint64_t v24 = *(void (**)(uint64_t, CFTypeRef *))(v23 + 8);
    if (v24)
    {
      v24(v21, &cf);
      CFTypeRef v25 = cf;
    }
    else
    {
      CFTypeRef v25 = 0;
    }
    CFDictionarySetValue(v7, @"AirPlayFeatures", v25);
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    uint64_t v26 = APEndpointDescriptionGetCMBaseObject(*(void *)(DerivedStorage + 8));
    uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v27) {
      uint64_t v28 = v27;
    }
    else {
      uint64_t v28 = 0;
    }
    CFAllocatorRef v29 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, void **))(v28 + 48);
    if (v29) {
      v29(v26, @"StatusFlags", a2, &value);
    }
    CFDictionarySetValue(v7, @"StatusFlags", value);
    if (value)
    {
      CFRelease(value);
      CMTimeValue value = 0;
    }
    unint64_t v30 = (const void **)MEMORY[0x1E4F1CFD0];
    if (!*(void *)(DerivedStorage + 216)) {
      unint64_t v30 = (const void **)MEMORY[0x1E4F1CFC8];
    }
    CFDictionarySetValue(v7, @"Activated", *v30);
    uint64_t v31 = *(void *)(DerivedStorage + 216);
    if (v31)
    {
      uint64_t v32 = APSenderSessionGetCMBaseObject(v31);
      uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v33) {
        uint64_t v34 = v33;
      }
      else {
        uint64_t v34 = 0;
      }
      CFStringRef v35 = *(void (**)(uint64_t, __CFString *, void, void **))(v34 + 48);
      if (v35) {
        v35(v32, @"ShowInfo", *MEMORY[0x1E4F1CF80], &value);
      }
      if (value)
      {
        CFDictionarySetValue(v7, @"SenderSessionInfo", value);
        if (value)
        {
          CFRelease(value);
          CMTimeValue value = 0;
        }
      }
    }
    if (*(void *)(DerivedStorage + 240))
    {
      CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 240));
      CFArrayApplyBlock();
    }
    if (*(_DWORD *)(DerivedStorage + 212)) {
      CFDictionarySetInt64();
    }
    *a3 = v7;
    if (value) {
      CFRelease(value);
    }
  }
  else
  {
    APSLogErrorAt();
  }
}

uint64_t APEndpointDescriptionCopyFeatures(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  CFMutableArrayRef v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (!v6) {
    return 4294954514;
  }
  return v6(a1, a2);
}

void __carEndpoint_copyShowInfoDictionary_block_invoke(uint64_t a1, uint64_t a2)
{
  CMTimeValue value = 0;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t CMBaseObject = FigEndpointStreamGetCMBaseObject();
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(void (**)(uint64_t, __CFString *, uint64_t, void **))(v7 + 48);
  if (v8)
  {
    v8(CMBaseObject, @"EndpointStreamShowInfo", v4, &value);
    if (value)
    {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), *(const void **)(a2 + 24), value);
      CFRelease(value);
    }
  }
}

uint64_t carEndpoint_isEndpointConnected()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2000000000;
  char v8 = 0;
  uint64_t v1 = *(NSObject **)(DerivedStorage + 144);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = __carEndpoint_isEndpointConnected_block_invoke;
  uint64_t v4[3] = &unk_1E6893E00;
  v4[4] = &v5;
  v4[5] = DerivedStorage;
  dispatch_sync(v1, v4);
  uint64_t v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t carEndpoint_copyPropertyForDisplay(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFArrayRef theArray = 0;
  uint64_t v8 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  CFAllocatorRef v9 = CFGetAllocator(a1);
  uint64_t CMBaseObject = APEndpointDescriptionGetCMBaseObject(v8);
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(uint64_t (**)(uint64_t, __CFString *, CFAllocatorRef, CFArrayRef *))(v12 + 48);
  if (!v13)
  {
    uint64_t v16 = 4294954514;
LABEL_10:
    APSLogErrorAt();
    goto LABEL_11;
  }
  uint64_t v14 = v13(CMBaseObject, @"DisplayDescriptionArray", v9, &theArray);
  if (v14)
  {
    uint64_t v16 = v14;
    goto LABEL_10;
  }
  if (CFArrayGetCount(theArray) > 0)
  {
    ValueAtunsigned int Index = CFArrayGetValueAtIndex(theArray, 0);
    uint64_t v16 = APEndpointDisplayDescriptionCopyProperty((uint64_t)ValueAtIndex, a2, a3, a4);
    if (!v16) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  APSLogErrorAt();
  uint64_t v16 = 4294950576;
LABEL_11:
  if (theArray) {
    CFRelease(theArray);
  }
  return v16;
}

uint64_t __carEndpoint_isEndpointConnected_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  if (!*(unsigned char *)(v1 + 152))
  {
    uint64_t v2 = *(void *)(v1 + 216);
    if (v2)
    {
      uint64_t v3 = result;
      uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v4) {
        uint64_t v5 = v4;
      }
      else {
        uint64_t v5 = 0;
      }
      uint64_t v6 = *(uint64_t (**)(uint64_t))(v5 + 8);
      if (v6) {
        uint64_t result = v6(v2);
      }
      else {
        uint64_t result = 0;
      }
      *(unsigned char *)(*(void *)(*(void *)(v3 + 32) + 8) + 24) = result;
    }
  }
  return result;
}

void __carEndpoint_copyStateProperty_block_invoke(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(a1 + 40) + 152))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
    int v4 = -16723;
    goto LABEL_16;
  }
  if (!CFEqual(*(CFTypeRef *)(a1 + 48), (CFTypeRef)*MEMORY[0x1E4F20C90]))
  {
    if (CFEqual(*(CFTypeRef *)(a1 + 48), (CFTypeRef)*MEMORY[0x1E4F20CF8]))
    {
      uint64_t v5 = *(void *)(a1 + 40);
      uint64_t v6 = *(void *)(v5 + 216);
      if (!v6 || !*(unsigned char *)(v5 + 224))
      {
        uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
        int v4 = -12783;
        goto LABEL_16;
      }
      uint64_t v8 = *(void *)(a1 + 56);
      uint64_t v7 = *(void *)(a1 + 64);
      uint64_t CMBaseObject = APSenderSessionGetCMBaseObject(v6);
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = 0;
      }
      uint64_t v16 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, uint64_t))(v11 + 48);
      if (v16) {
        int v17 = v16(CMBaseObject, @"AuthenticationData", v7, v8);
      }
      else {
        int v17 = -12782;
      }
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v17;
      return;
    }
    if (CFEqual(*(CFTypeRef *)(a1 + 48), (CFTypeRef)*MEMORY[0x1E4F20D00]))
    {
      uint64_t v12 = *(CFTypeRef **)(a1 + 56);
      int v35 = 0;
      CMBaseObjectGetDerivedStorage();
      int v13 = APSGetFBOPropertyInt64();
      if (v13)
      {
        if (v13 == 8)
        {
          uint64_t v14 = (CFTypeRef *)MEMORY[0x1E4F203C0];
          goto LABEL_30;
        }
        if (v13 == 32)
        {
          uint64_t v14 = (CFTypeRef *)MEMORY[0x1E4F203B8];
LABEL_30:
          *uint64_t v12 = CFRetain(*v14);
          if (gLogCategory_APEndpointCarPlay <= 30
            && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
LABEL_36:
          *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v35;
          if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
            return;
          }
          goto LABEL_37;
        }
        int v18 = -12782;
      }
      else
      {
        int v18 = -12783;
      }
      int v35 = v18;
      APSLogErrorAt();
      goto LABEL_36;
    }
    if (CFEqual(*(CFTypeRef *)(a1 + 48), (CFTypeRef)*MEMORY[0x1E4F20D08]))
    {
      uint64_t v15 = (CFTypeRef *)MEMORY[0x1E4F203C8];
LABEL_43:
      CFTypeRef v21 = *v15;
      goto LABEL_44;
    }
    if (CFEqual(*(CFTypeRef *)(a1 + 48), (CFTypeRef)*MEMORY[0x1E4F20D10]))
    {
      uint64_t v19 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
      int v20 = *(unsigned __int8 *)(*(void *)(a1 + 40) + 324);
      goto LABEL_40;
    }
    if (CFEqual(*(CFTypeRef *)(a1 + 48), @"EndpointStatus"))
    {
      **(void **)(a1 + 56) = CFNumberCreate(*(CFAllocatorRef *)(a1 + 64), kCFNumberSInt32Type, (const void *)(*(void *)(a1 + 40) + 212));
      if (!**(void **)(a1 + 56)) {
        goto LABEL_5;
      }
      return;
    }
    if (CFEqual(*(CFTypeRef *)(a1 + 48), @"Features"))
    {
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = APEndpointDescriptionCopyFeatures(*(void *)(*(void *)(a1 + 40) + 8), *(void *)(a1 + 56));
      if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
        return;
      }
      goto LABEL_12;
    }
    if (CFEqual(*(CFTypeRef *)(a1 + 48), (CFTypeRef)*MEMORY[0x1E4F20E10]))
    {
      uint64_t v22 = *(void *)(a1 + 40);
      if (*(void *)(v22 + 216) && (uint64_t v23 = *(void *)(v22 + 272)) != 0)
      {
        *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = APHIDClientCopyHIDs(v23, *(void *)(a1 + 64), *(void **)(a1 + 56));
        if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
          return;
        }
      }
      else
      {
        *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = -12783;
      }
      goto LABEL_12;
    }
    if (CFEqual(*(CFTypeRef *)(a1 + 48), @"Statistics"))
    {
      CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(void *)(*(void *)(a1 + 40) + 344), MEMORY[0x1E4F1D510]);
      if (!Mutable) {
        goto LABEL_5;
      }
      CFTypeRef v25 = Mutable;
      uint64_t v26 = *(void **)(a1 + 40);
      unint64_t v27 = v26[43];
      if (v26[42] >= v27)
      {
        if (v27)
        {
          for (unint64_t i = 0; i < v27; ++i)
          {
            CFArrayAppendValue(v25, *(const void **)(v26[41] + 8 * ((i + v26[42]) % v27)));
            uint64_t v26 = *(void **)(a1 + 40);
            unint64_t v27 = v26[43];
          }
        }
      }
      else
      {
        uint64_t v28 = *(const void **)v26[41];
        if (v28)
        {
          uint64_t v29 = 8;
          do
          {
            CFArrayAppendValue(v25, v28);
            uint64_t v28 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 328) + v29);
            v29 += 8;
          }
          while (v28);
        }
      }
      **(void **)(a1 + 56) = v25;
      return;
    }
    if (CFEqual(*(CFTypeRef *)(a1 + 48), (CFTypeRef)*MEMORY[0x1E4F20E40]))
    {
      uint64_t v19 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
      int v20 = *(_DWORD *)(*(void *)(a1 + 40) + 204);
      goto LABEL_40;
    }
    if (CFEqual(*(CFTypeRef *)(a1 + 48), (CFTypeRef)*MEMORY[0x1E4F20ED8]))
    {
      uint64_t v19 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
      int v20 = *(unsigned __int8 *)(*(void *)(a1 + 40) + 305);
LABEL_40:
      if (v20) {
        uint64_t v15 = v19;
      }
      else {
        uint64_t v15 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
      }
      goto LABEL_43;
    }
    if (CFEqual(*(CFTypeRef *)(a1 + 48), (CFTypeRef)*MEMORY[0x1E4F20F30]))
    {
      if (!APSGetFBOPropertyInt64())
      {
        uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
        int v4 = -12782;
        goto LABEL_16;
      }
      uint64_t v19 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
      int v20 = *(unsigned __int8 *)(*(void *)(a1 + 40) + 306);
      goto LABEL_40;
    }
    if (CFEqual(*(CFTypeRef *)(a1 + 48), (CFTypeRef)*MEMORY[0x1E4F20F40])) {
      goto LABEL_81;
    }
    if (CFEqual(*(CFTypeRef *)(a1 + 48), (CFTypeRef)*MEMORY[0x1E4F20F68]))
    {
      uint64_t v15 = (CFTypeRef *)MEMORY[0x1E4F20C80];
      goto LABEL_43;
    }
    if (CFEqual(*(CFTypeRef *)(a1 + 48), (CFTypeRef)*MEMORY[0x1E4F20F70]))
    {
LABEL_81:
      uint64_t v31 = APSGetFBOPropertyInt64();
      uint64_t v15 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
      if (!v31) {
        uint64_t v15 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
      }
      goto LABEL_43;
    }
    if (CFEqual(*(CFTypeRef *)(a1 + 48), (CFTypeRef)*MEMORY[0x1E4F20F80]))
    {
      CFTypeRef v21 = *(CFTypeRef *)(*(void *)(a1 + 40) + 248);
      if (!v21) {
        goto LABEL_45;
      }
      goto LABEL_44;
    }
    if (CFEqual(*(CFTypeRef *)(a1 + 48), @"EndpointShowInfo"))
    {
      carEndpoint_copyShowInfoDictionary(*(void *)(a1 + 72), *(const __CFAllocator **)(a1 + 64), *(__CFDictionary ***)(a1 + 56));
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
      if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
        return;
      }
      goto LABEL_12;
    }
    if (CFEqual(*(CFTypeRef *)(a1 + 48), (CFTypeRef)*MEMORY[0x1E4F20FA8]))
    {
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = carEndpoint_copyStreams(*(void *)(a1 + 72), *(const __CFAllocator **)(a1 + 64), *(CFMutableArrayRef **)(a1 + 56));
      if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
        return;
      }
      goto LABEL_12;
    }
    if (CFEqual(*(CFTypeRef *)(a1 + 48), (CFTypeRef)*MEMORY[0x1E4F20FC0]))
    {
      unint64_t valuePtr = 0;
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = carEndpoint_getSupportedFeatures(*(void *)(a1 + 72), &valuePtr);
      if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
      {
        **(void **)(a1 + 56) = CFNumberCreate(*(CFAllocatorRef *)(a1 + 64), kCFNumberSInt64Type, &valuePtr);
        if (!**(void **)(a1 + 56)) {
          goto LABEL_5;
        }
        return;
      }
LABEL_37:
      APSLogErrorAt();
      return;
    }
    if (CFEqual(*(CFTypeRef *)(a1 + 48), (CFTypeRef)*MEMORY[0x1E4F21070]))
    {
      CFTypeRef v21 = *(CFTypeRef *)(*(void *)(a1 + 40) + 312);
      if (!v21) {
        goto LABEL_45;
      }
      goto LABEL_44;
    }
    if (CFEqual(*(CFTypeRef *)(a1 + 48), @"IsCarInSpeechState"))
    {
      uint64_t v32 = *(_DWORD **)(a1 + 40);
      if (v32[92] != 1) {
        goto LABEL_112;
      }
    }
    else
    {
      if (!CFEqual(*(CFTypeRef *)(a1 + 48), @"IsiOSInSpeechState"))
      {
        if (CFEqual(*(CFTypeRef *)(a1 + 48), @"VoiceTriggerTimestamp"))
        {
          **(void **)(a1 + 56) = CFNumberCreateInt64();
          if (!**(void **)(a1 + 56)) {
            goto LABEL_5;
          }
          return;
        }
        if (!CFEqual(*(CFTypeRef *)(a1 + 48), (CFTypeRef)*MEMORY[0x1E4F20CE8]))
        {
          if (CFEqual(*(CFTypeRef *)(a1 + 48), @"VoiceActivationType"))
          {
            CFNumberGetTypeID();
            **(void **)(a1 + 56) = CFDictionaryGetTypedValue();
            uint64_t v33 = **(const void ***)(a1 + 56);
            if (v33)
            {
              CFRetain(v33);
            }
            return;
          }
          if (!CFEqual(*(CFTypeRef *)(a1 + 48), @"DisplayCornerMasks"))
          {
            uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
            int v4 = -12784;
            goto LABEL_16;
          }
          CFTypeRef v21 = *(CFTypeRef *)(*(void *)(a1 + 40) + 432);
          if (!v21)
          {
LABEL_45:
            **(void **)(a1 + 56) = v21;
            return;
          }
LABEL_44:
          CFTypeRef v21 = CFRetain(v21);
          goto LABEL_45;
        }
        uint64_t v19 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
        int v20 = *(unsigned __int8 *)(*(void *)(a1 + 40) + 412);
        goto LABEL_40;
      }
      uint64_t v32 = *(_DWORD **)(a1 + 40);
      if (v32[94] || v32[92] != 2)
      {
LABEL_112:
        uint64_t v15 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
        goto LABEL_43;
      }
    }
    if (v32[93])
    {
      uint64_t v15 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
      goto LABEL_43;
    }
    goto LABEL_112;
  }
  uint64_t v2 = *(void *)(a1 + 40);
  if (!*(void *)(v2 + 216))
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = -12783;
LABEL_12:
    APSLogErrorAt();
    return;
  }
  **(void **)(a1 + 56) = CFNumberCreate(*(CFAllocatorRef *)(a1 + 64), kCFNumberSInt32Type, (const void *)(v2 + 204));
  if (!**(void **)(a1 + 56))
  {
LABEL_5:
    APSLogErrorAt();
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
    int v4 = -16721;
LABEL_16:
    *(_DWORD *)(v3 + 24) = v4;
  }
}

uint64_t carEndpoint_copyStreams(uint64_t a1, const __CFAllocator *a2, CFMutableArrayRef *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v12 = 0;
  int v13 = &v12;
  uint64_t v14 = 0x2000000000;
  uint64_t v15 = 0;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(a2, 0, MEMORY[0x1E4F1D510]);
  uint64_t v7 = v13;
  v13[3] = (uint64_t)Mutable;
  if (Mutable)
  {
    CFArrayRef v8 = *(const __CFArray **)(DerivedStorage + 240);
    if (v8)
    {
      CFArrayGetCount(v8);
      CFArrayApplyBlock();
      uint64_t v7 = v13;
      CFMutableArrayRef Mutable = (CFMutableArrayRef)v13[3];
    }
    uint64_t v9 = 0;
    *a3 = Mutable;
    void v7[3] = 0;
  }
  else
  {
    APSLogErrorAt();
    uint64_t v11 = (const void *)v13[3];
    if (v11) {
      CFRelease(v11);
    }
    uint64_t v9 = 4294950575;
  }
  _Block_object_dispose(&v12, 8);
  return v9;
}

uint64_t carEndpoint_getSupportedFeatures(uint64_t a1, unint64_t *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  if (!a2)
  {
    APSLogErrorAt();
    return 4294950576;
  }
  uint64_t v4 = DerivedStorage;
  uint64_t v5 = *(void *)(DerivedStorage + 8);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  CFArrayRef v8 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v7 + 8);
  if (v8)
  {
    uint64_t v9 = v8(v5, &cf);
    if (!v9)
    {
      BOOL v10 = APSFeaturesHasFeature() != 0;
      unint64_t v11 = (APSFeaturesHasFeature() != 0) | (unint64_t)(2 * v10);
      if (*(unsigned char *)(v4 + 58)) {
        v11 |= 8uLL;
      }
      *a2 = v11;
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v9 = 4294954514;
  }
  APSLogErrorAt();
LABEL_12:
  if (cf) {
    CFRelease(cf);
  }
  return v9;
}

void __carEndpoint_copyStreams_block_invoke(uint64_t a1, uint64_t a2)
{
}

uint64_t carEndpoint_updateDisplayCornerMasks()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(result + 62))
  {
    uint64_t result = *(void *)(result + 432);
    if (result) {
      return CFDictionaryApplyBlock();
    }
  }
  return result;
}

void __carEndpoint_updateDisplayCornerMasks_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  values = a3;
  if (!*(void *)(a1 + 32) || FigCFEqual())
  {
    uint64_t v34 = 0;
    int v35 = &v34;
    uint64_t v36 = 0x2000000000;
    LOBYTE(v37) = 0;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (*(void *)(DerivedStorage + 240))
    {
      CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 240));
      uint64_t v27 = MEMORY[0x1E4F143A8];
      uint64_t v28 = 0x40000000;
      uint64_t v29 = __carEndpoint_getStreamIsResumedForDisplayUUID_block_invoke;
      unint64_t v30 = &unk_1E6893EF0;
      uint64_t v31 = &v34;
      uint64_t v32 = a2;
      CFArrayApplyBlock();
    }
    int v7 = *((unsigned __int8 *)v35 + 24);
    _Block_object_dispose(&v34, 8);
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v34 = 0;
    int v35 = &v34;
    uint64_t v36 = 0x2000000000;
    uint64_t v37 = 0;
    uint64_t v9 = CMBaseObjectGetDerivedStorage();
    if (*(void *)(v9 + 240))
    {
      CFArrayGetCount(*(CFArrayRef *)(v9 + 240));
      uint64_t v27 = MEMORY[0x1E4F143A8];
      uint64_t v28 = 0x40000000;
      uint64_t v29 = __carEndpoint_copyStreamSubtypeForDisplayUUID_block_invoke;
      unint64_t v30 = &unk_1E6893F18;
      uint64_t v32 = a2;
      uint64_t v33 = v8;
      uint64_t v31 = &v34;
      CFArrayApplyBlock();
    }
    BOOL v10 = (const void *)v35[3];
    _Block_object_dispose(&v34, 8);
    uint64_t ScreenStreamForDisplayUUID = carEndpoint_getScreenStreamForDisplayUUID();
    if (ScreenStreamForDisplayUUID)
    {
      uint64_t v12 = ScreenStreamForDisplayUUID;
      if (FigCFEqual() && v7)
      {
        uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v13) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = 0;
        }
        uint64_t v15 = *(void (**)(uint64_t, void, void, void))(v14 + 8);
        if (v15) {
          v15(v12, 0, 0, 0);
        }
        if (gLogCategory_APEndpointCarPlay <= 50
          && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
      }
      if (!a3 || (void *)*MEMORY[0x1E4F1D260] == a3)
      {
        if (gLogCategory_APEndpointCarPlay <= 50
          && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
      }
      else
      {
        CFAllocatorRef v16 = CFGetAllocator(*(CFTypeRef *)(a1 + 40));
        CFDictionaryRef v17 = CFDictionaryCreate(v16, (const void **)&kAPEndpointStreamCornerMaskKey_TopLeftCornerMask, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (v17)
        {
          CFDictionaryRef v18 = v17;
          if (gLogCategory_APEndpointCarPlay <= 50
            && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          uint64_t CMBaseObject = FigEndpointStreamGetCMBaseObject();
          uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v20) {
            uint64_t v21 = v20;
          }
          else {
            uint64_t v21 = 0;
          }
          uint64_t v22 = *(void (**)(uint64_t, __CFString *, CFDictionaryRef))(v21 + 56);
          if (v22) {
            v22(CMBaseObject, @"ExtraStreamOptions", v18);
          }
          CFRelease(v18);
        }
      }
      if (FigCFEqual())
      {
        uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v23) {
          uint64_t v24 = v23;
        }
        else {
          uint64_t v24 = 0;
        }
        CFTypeRef v25 = *(void (**)(uint64_t, void, void, void))(v24 + 16);
        if (v25) {
          v25(v12, 0, 0, 0);
        }
      }
    }
    if (v10) {
      CFRelease(v10);
    }
  }
}

uint64_t carEndpoint_getScreenStreamForDisplayUUID()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2000000000;
  uint64_t v6 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 240))
  {
    CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 240));
    CFArrayApplyBlock();
  }
  uint64_t v1 = v4[3];
  _Block_object_dispose(&v3, 8);
  return v1;
}

uint64_t __carEndpoint_getStreamIsResumedForDisplayUUID_block_invoke(uint64_t a1, uint64_t a2)
{
  carEndpoint_getDisplayUUIDForStream();
  uint64_t result = FigCFEqual();
  if (result) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(unsigned char *)(a2 + 48);
  }
  return result;
}

const void *carEndpoint_getDisplayUUIDForStream()
{
  CFDictionaryRef theDict = 0;
  uint64_t CMBaseObject = FigEndpointStreamGetCMBaseObject();
  uint64_t v1 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v1) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(void (**)(uint64_t, void, void, CFDictionaryRef *))(v2 + 48);
  if (!v3) {
    return 0;
  }
  v3(CMBaseObject, *MEMORY[0x1E4F34F68], 0, &theDict);
  if (!theDict) {
    return 0;
  }
  CFDictionaryRef Value = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F34EC8]);
  if (theDict) {
    CFRelease(theDict);
  }
  return Value;
}

uint64_t __carEndpoint_copyStreamSubtypeForDisplayUUID_block_invoke(uint64_t a1)
{
  carEndpoint_getDisplayUUIDForStream();
  uint64_t result = FigCFEqual();
  if (result)
  {
    CFAllocatorRef v3 = CFGetAllocator(*(CFTypeRef *)(a1 + 48));
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t CMBaseObject = FigEndpointStreamGetCMBaseObject();
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v8 = *(void *)(VTable + 8);
    uint64_t result = VTable + 8;
    uint64_t v7 = v8;
    uint64_t v9 = v8 ? v7 : 0;
    BOOL v10 = *(uint64_t (**)(uint64_t, uint64_t, CFAllocatorRef, uint64_t))(v9 + 48);
    if (v10)
    {
      uint64_t v11 = *MEMORY[0x1E4F213B0];
      return v10(CMBaseObject, v11, v3, v4 + 24);
    }
  }
  return result;
}

uint64_t __carEndpoint_getScreenStreamForDisplayUUID_block_invoke(uint64_t a1, uint64_t a2)
{
  carEndpoint_getDisplayUUIDForStream();
  uint64_t result = FigCFEqual();
  if (result) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(void *)(a2 + 16);
  }
  return result;
}

uint64_t carEndpoint_Activate(const void *a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  if (a3) {
    CFRetain(a3);
  }
  uint64_t v11 = *(NSObject **)(DerivedStorage + 472);
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 0x40000000;
  v13[2] = __carEndpoint_Activate_block_invoke;
  v13[3] = &__block_descriptor_tmp_108;
  v13[4] = DerivedStorage;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a2;
  v13[9] = a5;
  dispatch_async(v11, v13);
  return 0;
}

uint64_t carEndpoint_Deactivate(const void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  unint64_t v12 = 0;
  carEndpoint_getSupportedFeatures((uint64_t)a1, &v12);
  CFRetain(a1);
  if (a2) {
    CFRetain(a2);
  }
  uint64_t v9 = *(NSObject **)(DerivedStorage + 472);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __carEndpoint_Deactivate_block_invoke;
  block[3] = &__block_descriptor_tmp_1002;
  block[4] = DerivedStorage;
  void block[5] = a2;
  void block[6] = a1;
  void block[7] = a3;
  void block[8] = v12;
  void block[9] = a4;
  dispatch_async(v9, block);
  return 0;
}

uint64_t carEndpoint_Dissociate(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8[0] = 0;
  v8[1] = v8;
  _OWORD v8[2] = 0x2000000000;
  char v9 = 0;
  CFAllocatorRef v3 = *(NSObject **)(DerivedStorage + 144);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __carEndpoint_Dissociate_block_invoke;
  block[3] = &unk_1E6894BD0;
  block[4] = v8;
  void block[5] = DerivedStorage;
  dispatch_sync(v3, block);
  CFRetain(a1);
  uint64_t v4 = *(NSObject **)(DerivedStorage + 472);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = __carEndpoint_Dissociate_block_invoke_2;
  v6[3] = &unk_1E6894BF8;
  v6[4] = v8;
  v6[5] = a1;
  dispatch_async(v4, v6);
  _Block_object_dispose(v8, 8);
  return 0;
}

uint64_t carEndpoint_SetDelegateRemoteControl(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 152))
  {
    APSLogErrorAt();
    return 4294950573;
  }
  else
  {
    uint64_t v4 = DerivedStorage;
    if (gLogCategory_APEndpointCarPlay <= 50
      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    uint64_t v5 = *(NSObject **)(v4 + 144);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __carEndpoint_SetDelegateRemoteControl_block_invoke;
    block[3] = &__block_descriptor_tmp_1010;
    block[4] = v4;
    void block[5] = a2;
    dispatch_sync(v5, block);
    return 0;
  }
}

uint64_t carEndpoint_isDissociated(uint64_t a1)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2000000000;
  char v8 = 0;
  uint64_t v1 = *(NSObject **)(a1 + 144);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = __carEndpoint_isDissociated_block_invoke;
  uint64_t v4[3] = &unk_1E6893FC8;
  v4[4] = &v5;
  v4[5] = a1;
  dispatch_sync(v1, v4);
  uint64_t v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t carEndpoint_activateInternal(const void *a1, const __CFDictionary *a2, NSObject *a3, _DWORD *a4)
{
  uint64_t v140 = 0;
  uint64_t v141 = &v140;
  uint64_t v142 = 0x2000000000;
  int v143 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v138 = 0;
  CFTypeRef cf = 0;
  uint64_t v134 = 0;
  CMTimeValue v135 = &v134;
  uint64_t v136 = 0x2000000000;
  uint64_t v137 = 0;
  uint64_t v130 = 0;
  BOOL v131 = &v130;
  uint64_t v132 = 0x2000000000;
  int v133 = 0;
  if (*(void *)(DerivedStorage + 480)) {
    APSEventRecorderRecordEventWithFlags();
  }
  uint64_t v9 = LogCategoryCopyOSLogHandle();
  BOOL v10 = (void *)v9;
  uint64_t v11 = MEMORY[0x1E4F14500];
  if (v9) {
    unint64_t v12 = v9;
  }
  else {
    unint64_t v12 = MEMORY[0x1E4F14500];
  }
  if (os_signpost_enabled(v12))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D0945000, v12, OS_SIGNPOST_EVENT, 0x2B160198uLL, "AP_SIGNPOST_ENDPOINTSELECTED", (const char *)&unk_1D0B9874E, buf, 2u);
  }
  if (v10) {
    os_release(v10);
  }
  carEndpoint_setFeatureFlagsToDefaultValues(a1, 0, 0);
  uint64_t v13 = *(NSObject **)(DerivedStorage + 144);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __carEndpoint_activateInternal_block_invoke;
  block[3] = &unk_1E6894060;
  block[4] = &v140;
  void block[5] = &v130;
  void block[8] = a1;
  void block[9] = a3;
  void block[6] = &v134;
  void block[7] = DerivedStorage;
  dispatch_sync(v13, block);
  if (*((_DWORD *)v141 + 6))
  {
    CFArrayRef v19 = 0;
    goto LABEL_71;
  }
  if (*(void *)(DerivedStorage + 480)) {
    APSEventRecorderRecordEvent();
  }
  uint64_t v14 = LogCategoryCopyOSLogHandle();
  uint64_t v15 = (void *)v14;
  if (v14) {
    CFAllocatorRef v16 = v14;
  }
  else {
    CFAllocatorRef v16 = v11;
  }
  if (os_signpost_enabled(v16))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D0945000, v16, OS_SIGNPOST_EVENT, 0x2B8D0804uLL, "AP_SIGNPOST_CAR_SETUPREQUESTFEATURELIST_START", (const char *)&unk_1D0B9874E, buf, 2u);
  }
  if (v15) {
    os_release(v15);
  }
  uint64_t v17 = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(v17 + 136))
  {
    if (a2 && (CFDictionaryRef Value = CFDictionaryGetValue(a2, @"FeaturesList")) != 0) {
      CFArrayRef v19 = (const __CFArray *)CFRetain(Value);
    }
    else {
      CFArrayRef v19 = 0;
    }
    if (gLogCategory_APEndpointCarPlay > 50
      || gLogCategory_APEndpointCarPlay == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_49;
    }
    goto LABEL_42;
  }
  *(void *)buf = 0;
  CFDictionaryRef v20 = *(const __CFDictionary **)(v17 + 48);
  if (v20) {
    CFDictionaryRef v20 = (const __CFDictionary *)CFDictionaryGetValue(v20, @"pairedVehicleIdentifier");
  }
  int SessionFeatureKeysWithIdentifier = APCarPlay_FetchSessionFeatureKeysWithIdentifier((uint64_t)v20, (CFTypeRef *)buf);
  if (SessionFeatureKeysWithIdentifier)
  {
    int v28 = SessionFeatureKeysWithIdentifier;
  }
  else if (*(void *)buf)
  {
    CFArrayRef MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, *(CFArrayRef *)buf);
    if (!MutableCopy)
    {
      APSLogErrorAt();
      int v28 = -16721;
      goto LABEL_234;
    }
    CFArrayRef v19 = MutableCopy;
    carEndpoint_overrideFeatureKeyWithPrefValue((int)a1, MutableCopy, @"fileTransfer");
    carEndpoint_overrideFeatureKeyWithPrefValue((int)a1, v19, @"vehicleStateProtocol");
    carEndpoint_overrideFeatureKeyWithPrefValue((int)a1, v19, @"logTransfer");
    carEndpoint_overrideFeatureKeyWithPrefValue((int)a1, v19, @"uiSync");
    carEndpoint_overrideFeatureKeyWithPrefValue((int)a1, v19, @"mainBuffered");
    carEndpoint_overrideFeatureKeyWithPrefValue((int)a1, v19, @"hevc");
    uint64_t v23 = CMBaseObjectGetDerivedStorage();
    char IntWithDefault = APSSettingsGetIntWithDefault();
    v165.length = CFArrayGetCount(v19);
    v165.location = 0;
    CountOfCFDictionaryRef Value = CFArrayGetCountOfValue(v19, v165, @"enhancedSiri");
    if (CountOfValue <= 1)
    {
      BOOL v26 = IntWithDefault == 0;
      if (CountOfValue != 1) {
        BOOL v26 = 0;
      }
      *(unsigned char *)(v23 + 56) = v26;
      if (CountOfValue && IntWithDefault && CountOfValue == 1)
      {
        v166.length = CFArrayGetCount(v19);
        v166.location = 0;
        FirstIndexOfCFDictionaryRef Value = CFArrayGetFirstIndexOfValue(v19, v166, @"enhancedSiri");
        CFArrayRemoveValueAtIndex(v19, FirstIndexOfValue);
      }
      CFRelease(*(CFTypeRef *)buf);
      if (gLogCategory_APEndpointCarPlay > 50
        || gLogCategory_APEndpointCarPlay == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_49;
      }
LABEL_42:
      LogPrintF();
LABEL_49:
      int v28 = 0;
      goto LABEL_50;
    }
    APSLogErrorAt();
    int v28 = -6705;
  }
  else
  {
    if (gLogCategory_APEndpointCarPlay <= 90
      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    int v28 = -16720;
  }
  APSLogErrorAt();
LABEL_234:
  CFArrayRef v19 = 0;
LABEL_50:
  *((_DWORD *)v141 + 6) = v28;
  if (*(void *)(DerivedStorage + 480)) {
    APSEventRecorderRecordEvent();
  }
  uint64_t v29 = LogCategoryCopyOSLogHandle();
  unint64_t v30 = (void *)v29;
  if (v29) {
    uint64_t v31 = v29;
  }
  else {
    uint64_t v31 = v11;
  }
  if (os_signpost_enabled(v31))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D0945000, v31, OS_SIGNPOST_EVENT, 0x2B8D0808uLL, "AP_SIGNPOST_CAR_SETUPREQUESTFEATURELIST_COMPLETE", (const char *)&unk_1D0B9874E, buf, 2u);
  }
  if (v30) {
    os_release(v30);
  }
  if (*((_DWORD *)v141 + 6)) {
    goto LABEL_70;
  }
  uint64_t v32 = v135[3];
  uint64_t v33 = *(void *)(DerivedStorage + 280);
  uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v34) {
    uint64_t v35 = v34;
  }
  else {
    uint64_t v35 = 0;
  }
  uint64_t v36 = *(uint64_t (**)(uint64_t, const __CFArray *, uint64_t, CFTypeRef *))(v35 + 104);
  if (!v36)
  {
    *((_DWORD *)v141 + 6) = -12782;
    goto LABEL_70;
  }
  int v37 = v36(v32, v19, v33, &v138);
  *((_DWORD *)v141 + 6) = v37;
  if (v37)
  {
LABEL_70:
    APSLogErrorAt();
LABEL_71:
    CFArrayRef Mutable = 0;
    goto LABEL_218;
  }
  CFArrayRef Mutable = (const __CFArray *)v138;
  CFArrayRef v124 = v19;
  if (!v138) {
    goto LABEL_180;
  }
  if (gLogCategory_APEndpointCarPlay <= 50)
  {
    if (gLogCategory_APEndpointCarPlay != -1
      || (v39 = _LogCategory_Initialize(), CFArrayRef Mutable = (const __CFArray *)v138, v39))
    {
      LogPrintF();
      CFArrayRef Mutable = (const __CFArray *)v138;
    }
  }
  int v118 = *((_DWORD *)v131 + 6);
  uint64_t v40 = CMBaseObjectGetDerivedStorage();
  v167.length = CFArrayGetCount(Mutable);
  v167.location = 0;
  if (CFArrayContainsValue(Mutable, v167, @"altScreen")) {
    *(unsigned char *)(v40 + 60) = 1;
  }
  v168.length = CFArrayGetCount(Mutable);
  v168.location = 0;
  if (CFArrayContainsValue(Mutable, v168, @"uiContext")) {
    *(unsigned char *)(v40 + 61) = 1;
  }
  v169.length = CFArrayGetCount(Mutable);
  v169.location = 0;
  if (CFArrayContainsValue(Mutable, v169, @"viewAreas")) {
    *(unsigned char *)(v40 + 59) = 1;
  }
  long long v120 = a4;
  long long v122 = a3;
  if (*(unsigned char *)(v40 + 56))
  {
    v170.length = CFArrayGetCount(Mutable);
    v170.location = 0;
    if (CFArrayContainsValue(Mutable, v170, @"enhancedSiri")) {
      *(unsigned char *)(v40 + 57) = 1;
    }
  }
  uint64_t v41 = *(void *)(v40 + 8);
  uint64_t v42 = *MEMORY[0x1E4F1CFD0];
  uint64_t v43 = *MEMORY[0x1E4F1CFC8];
  if (*(unsigned char *)(v40 + 57)) {
    uint64_t v44 = *MEMORY[0x1E4F1CFD0];
  }
  else {
    uint64_t v44 = *MEMORY[0x1E4F1CFC8];
  }
  uint64_t v45 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v45) {
    uint64_t v46 = v45;
  }
  else {
    uint64_t v46 = 0;
  }
  long long v47 = *(void (**)(uint64_t, __CFString *, uint64_t))(v46 + 56);
  if (v47) {
    v47(v41, @"SupportsJarvis", v44);
  }
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v171.length = CFArrayGetCount(Mutable);
  v171.location = 0;
  if (CFArrayContainsValue(Mutable, v171, @"cornerMasks"))
  {
    *(unsigned char *)(v40 + 62) = 1;
    if (gLogCategory_APEndpointCarPlay <= 50
      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  v172.length = CFArrayGetCount(Mutable);
  v172.location = 0;
  if (CFArrayContainsValue(Mutable, v172, @"focusTransfer"))
  {
    *(unsigned char *)(v40 + 63) = 1;
    if (gLogCategory_APEndpointCarPlay <= 50
      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  v173.length = CFArrayGetCount(Mutable);
  v173.location = 0;
  if (CFArrayContainsValue(Mutable, v173, @"hevc")) {
    *(unsigned char *)(v40 + 64) = 1;
  }
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v174.length = CFArrayGetCount(Mutable);
  v174.location = 0;
  if (CFArrayContainsValue(Mutable, v174, @"fileTransfer")) {
    *(unsigned char *)(v40 + 65) = 1;
  }
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v175.length = CFArrayGetCount(Mutable);
  v175.location = 0;
  if (CFArrayContainsValue(Mutable, v175, @"logTransfer")) {
    *(unsigned char *)(v40 + 104) = 1;
  }
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v176.length = CFArrayGetCount(Mutable);
  v176.location = 0;
  if (CFArrayContainsValue(Mutable, v176, @"uiSync")) {
    *(unsigned char *)(v40 + 120) = 1;
  }
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v177.length = CFArrayGetCount(Mutable);
  v177.location = 0;
  if (CFArrayContainsValue(Mutable, v177, @"vehicleStateProtocol")) {
    *(unsigned char *)(v40 + 80) = 1;
  }
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v178.length = CFArrayGetCount(Mutable);
  v178.location = 0;
  if (CFArrayContainsValue(Mutable, v178, @"mainBuffered"))
  {
    *(unsigned char *)(v40 + 58) = 1;
  }
  else if (!*(unsigned char *)(v40 + 58))
  {
    uint64_t v42 = v43;
  }
  a4 = v120;
  long long v48 = MEMORY[0x1E4F14500];
  uint64_t v49 = *(void *)(v40 + 8);
  uint64_t v50 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v50) {
    uint64_t v51 = v50;
  }
  else {
    uint64_t v51 = 0;
  }
  long long v52 = *(void (**)(uint64_t, __CFString *, uint64_t))(v51 + 56);
  if (v52) {
    v52(v49, @"SupportsBufferedAudio", v42);
  }
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  carEndpoint_postNotification(a1, (const void *)*MEMORY[0x1E4F20728], v118, 0);
  *((_DWORD *)v141 + 6) = 0;
  a3 = v122;
  if (*(void *)(DerivedStorage + 480)) {
    APSEventRecorderRecordEvent();
  }
  uint64_t v53 = LogCategoryCopyOSLogHandle();
  long long v54 = (void *)v53;
  if (v53) {
    long long v48 = v53;
  }
  if (os_signpost_enabled(v48))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D0945000, v48, OS_SIGNPOST_EVENT, 0x2B8D080CuLL, "AP_SIGNPOST_CAR_INFOREQUESTFEATURELIST_START", (const char *)&unk_1D0B9874E, buf, 2u);
  }
  if (v54) {
    os_release(v54);
  }
  uint64_t v55 = CMBaseObjectGetDerivedStorage();
  CFTypeRef v160 = 0;
  CFArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    APSLogErrorAt();
    int v60 = -16721;
    goto LABEL_168;
  }
  if (!*(unsigned char *)(v55 + 60))
  {
LABEL_163:
    if (!*(unsigned char *)(v55 + 61))
    {
      int v60 = 0;
      goto LABEL_168;
    }
    int UIContextMasterURLList = APCarPlay_FetchUIContextMasterURLList(&v160);
    if (!UIContextMasterURLList)
    {
      if (v160)
      {
        CFDictionarySetValue(Mutable, @"uiContextURLs", v160);
        int v60 = 0;
        *(unsigned char *)(v55 + 61) = 1;
        goto LABEL_168;
      }
      goto LABEL_379;
    }
    int v60 = UIContextMasterURLList;
    goto LABEL_377;
  }
  int v56 = APCarPlay_CRFetchInstrumentClusterURLs(&v160);
  if (!v56)
  {
    if (!v160)
    {
LABEL_379:
      APSLogErrorAt();
      int v60 = -16721;
      goto LABEL_380;
    }
    CFMutableArrayRef v57 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    if (!v57)
    {
      APSLogErrorAt();
      int v60 = -71750;
      goto LABEL_380;
    }
    CFMutableArrayRef v58 = v57;
    CFArrayGetCount((CFArrayRef)v160);
    *(void *)buf = MEMORY[0x1E4F143A8];
    uint64_t v145 = 0x40000000;
    int v146 = __carEndpoint_createInfoRequestFeatureList_block_invoke;
    uint64_t v147 = &__block_descriptor_tmp_579;
    uint64_t v148 = v58;
    CFArrayApplyBlock();
    CFDictionarySetValue(Mutable, @"altScreenURLs", v58);
    if (v160)
    {
      CFRelease(v160);
      CFTypeRef v160 = 0;
    }
    CFRelease(v58);
    goto LABEL_163;
  }
  int v60 = v56;
LABEL_377:
  APSLogErrorAt();
LABEL_380:
  CFRelease(Mutable);
  CFArrayRef Mutable = 0;
LABEL_168:
  if (v160) {
    CFRelease(v160);
  }
  *((_DWORD *)v141 + 6) = v60;
  if (*(void *)(DerivedStorage + 480)) {
    APSEventRecorderRecordEvent();
  }
  uint64_t v61 = LogCategoryCopyOSLogHandle();
  uint64_t v62 = (void *)v61;
  if (v61) {
    long long v63 = v61;
  }
  else {
    long long v63 = MEMORY[0x1E4F14500];
  }
  if (os_signpost_enabled(v63))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D0945000, v63, OS_SIGNPOST_EVENT, 0x2B8D0810uLL, "AP_SIGNPOST_CAR_INFOREQUESTFEATURELIST_COMPLETE", (const char *)&unk_1D0B9874E, buf, 2u);
  }
  if (v62) {
    os_release(v62);
  }
  if (*((_DWORD *)v141 + 6)) {
    goto LABEL_188;
  }
LABEL_180:
  uint64_t v64 = v135[3];
  uint64_t v65 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v65) {
    uint64_t v66 = v65;
  }
  else {
    uint64_t v66 = 0;
  }
  int v67 = *(uint64_t (**)(uint64_t, const __CFArray *))(v66 + 112);
  if (!v67)
  {
    *((_DWORD *)v141 + 6) = -12782;
    goto LABEL_188;
  }
  int v68 = v67(v64, Mutable);
  *((_DWORD *)v141 + 6) = v68;
  if (v68)
  {
LABEL_188:
    APSLogErrorAt();
    goto LABEL_218;
  }
  uint64_t v69 = CMBaseObjectGetDerivedStorage();
  v164[0] = 0;
  long long v119 = (unsigned char *)v69;
  uint64_t v70 = *(void *)(v69 + 8);
  CFAllocatorRef v71 = CFGetAllocator(a1);
  uint64_t CMBaseObject = APEndpointDescriptionGetCMBaseObject(v70);
  uint64_t v73 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v73) {
    uint64_t v74 = v73;
  }
  else {
    uint64_t v74 = 0;
  }
  uint64_t v75 = *(uint64_t (**)(uint64_t, __CFString *, CFAllocatorRef, CFDictionaryRef *))(v74 + 48);
  if (!v75)
  {
    int v77 = -12782;
    goto LABEL_199;
  }
  int v76 = v75(CMBaseObject, @"EndpointInfo", v71, v164);
  if (v76)
  {
    int v77 = v76;
    goto LABEL_199;
  }
  if (CFDictionaryContainsKey(v164[0], @"uiContextLastOnDisplayURLs")
    || CFDictionaryContainsKey(v164[0], @"uiContextNowOnDisplayURLs"))
  {
    if (!v119[61]
      && gLogCategory_APEndpointCarPlay <= 60
      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  else if (v119[61])
  {
    if (gLogCategory_APEndpointCarPlay <= 90
      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    int v77 = -16720;
    goto LABEL_199;
  }
  CFArrayRef v86 = (const __CFArray *)CFDictionaryGetValue(v164[0], @"displays");
  if (!v86)
  {
    if (gLogCategory_APEndpointCarPlay <= 90
      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    int v77 = -16720;
    goto LABEL_199;
  }
  CFArrayRef v87 = v86;
  CFIndex Count = CFArrayGetCount(v86);
  CFTypeRef v160 = 0;
  v161 = &v160;
  uint64_t v162 = 0x2000000000;
  char v163 = 0;
  int v159 = 0;
  int v89 = CFDictionaryContainsKey(v164[0], @"hevcInfo");
  uint64_t v90 = 8912896;
  if (!v89) {
    uint64_t v90 = 9437184;
  }
  unint64_t v116 = v90;
  if (Count < 1)
  {
    int v115 = 0;
    int v112 = 0;
LABEL_282:
    if (v119[60])
    {
      if (Count <= 1)
      {
        if (gLogCategory_APEndpointCarPlay > 90
          || gLogCategory_APEndpointCarPlay == -1 && !_LogCategory_Initialize())
        {
          goto LABEL_357;
        }
        goto LABEL_337;
      }
    }
    else if (Count >= 2)
    {
      if (gLogCategory_APEndpointCarPlay > 90
        || gLogCategory_APEndpointCarPlay == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_357;
      }
LABEL_337:
      LogPrintF();
LABEL_357:
      APSLogErrorAt();
      goto LABEL_358;
    }
    if (v119[59])
    {
      if (!v115)
      {
        if (gLogCategory_APEndpointCarPlay > 90
          || gLogCategory_APEndpointCarPlay == -1 && !_LogCategory_Initialize())
        {
          goto LABEL_357;
        }
        goto LABEL_337;
      }
    }
    else if (v115 == 1 {
           && gLogCategory_APEndpointCarPlay <= 60
    }
           && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (v119[63])
    {
      if (!*((unsigned char *)v161 + 24))
      {
        v119[63] = 0;
        if (gLogCategory_APEndpointCarPlay > 90
          || gLogCategory_APEndpointCarPlay == -1 && !_LogCategory_Initialize())
        {
          goto LABEL_357;
        }
        goto LABEL_337;
      }
    }
    else if (*((unsigned char *)v161 + 24) == 1 {
           && gLogCategory_APEndpointCarPlay <= 60
    }
           && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (v119[62])
    {
      if (!v112)
      {
        v119[62] = 0;
        if (gLogCategory_APEndpointCarPlay > 90
          || gLogCategory_APEndpointCarPlay == -1 && !_LogCategory_Initialize())
        {
          goto LABEL_357;
        }
        goto LABEL_337;
      }
    }
    else if (v112 == 1 {
           && gLogCategory_APEndpointCarPlay <= 60
    }
           && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    _Block_object_dispose(&v160, 8);
    int v107 = carEndpoint_validateInfoResponseKeyPresentForFeature((int)a1, v164[0], @"hevcInfo", v119[64] != 0);
    if (v107)
    {
      int v77 = v107;
    }
    else
    {
      int v108 = carEndpoint_validateInfoResponseKeyPresentForFeature((int)a1, v164[0], @"mainBufferedInfo", v119[58] != 0);
      if (v108)
      {
        int v77 = v108;
      }
      else
      {
        int v109 = carEndpoint_validateInfoResponseKeyPresentForFeature((int)a1, v164[0], @"fileTransferInfo", v119[65] != 0);
        if (v109)
        {
          int v77 = v109;
        }
        else
        {
          int v110 = carEndpoint_validateInfoResponseKeyPresentForFeature((int)a1, v164[0], @"vehicleStateProtocolInfo", v119[80] != 0);
          if (v110)
          {
            int v77 = v110;
          }
          else
          {
            int v111 = carEndpoint_validateInfoResponseKeyPresentForFeature((int)a1, v164[0], @"logTransferInfo", v119[104] != 0);
            if (v111)
            {
              int v77 = v111;
            }
            else
            {
              int v77 = carEndpoint_validateInfoResponseKeyPresentForFeature((int)a1, v164[0], @"uiSyncInfo", v119[120] != 0);
              if (!v77) {
                goto LABEL_200;
              }
            }
          }
        }
      }
    }
LABEL_199:
    APSLogErrorAt();
    goto LABEL_200;
  }
  int v112 = 0;
  int v115 = 0;
  uint64_t v91 = 0;
  CFArrayRef v113 = Mutable;
  double v92 = *MEMORY[0x1E4F1DB30];
  double v93 = *(double *)(MEMORY[0x1E4F1DB30] + 8);
  long long v121 = a4;
  long long v123 = a3;
  CFDictionaryRef v114 = a2;
  uint64_t v117 = DerivedStorage;
  while (1)
  {
    uint64_t v155 = 0;
    CFDictionaryRef v156 = &v155;
    uint64_t v157 = 0x2000000000;
    char v158 = 0;
    CFDictionaryGetTypeID();
    CFArrayRef v94 = v87;
    TypedValueAtunsigned int Index = CFArrayGetTypedValueAtIndex();
    if (v159) {
      BOOL v96 = 1;
    }
    else {
      BOOL v96 = TypedValueAtIndex == 0;
    }
    if (v96)
    {
      CFArrayRef v19 = v124;
      goto LABEL_275;
    }
    CFDictionaryRef v97 = (const __CFDictionary *)TypedValueAtIndex;
    CFIndex v98 = Count;
    uint64_t Int64 = CFDictionaryGetInt64();
    uint64_t v100 = CFDictionaryGetInt64();
    uint64_t v101 = CFDictionaryGetInt64();
    uint64_t v102 = CFDictionaryGetInt64();
    if (!Int64 || !v100)
    {
      if (gLogCategory_APEndpointCarPlay <= 90
        && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
      {
        goto LABEL_301;
      }
      goto LABEL_329;
    }
    if (v100 * Int64 > v116)
    {
      if (gLogCategory_APEndpointCarPlay <= 90
        && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
      {
        goto LABEL_301;
      }
LABEL_329:
      APSLogErrorAt();
      a4 = v121;
      a3 = v123;
      CFArrayRef Mutable = v113;
      a2 = v114;
      CFArrayRef v19 = v124;
LABEL_330:
      uint64_t DerivedStorage = v117;
      goto LABEL_331;
    }
    BOOL v103 = v92 == (double)(unint64_t)v101 && v93 == (double)(unint64_t)v102;
    if (!v103 && (!v101 || !v102))
    {
      if (gLogCategory_APEndpointCarPlay > 90
        || gLogCategory_APEndpointCarPlay == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_329;
      }
LABEL_301:
      LogPrintF();
      goto LABEL_329;
    }
    CFArrayRef Mutable = v113;
    if (CFDictionaryContainsKey(v97, @"viewAreas")
      || CFDictionaryContainsKey(v97, @"initialViewArea")
      || CFDictionaryContainsKey(v97, @"adjacentViewAreas"))
    {
      CFArrayRef v104 = (const __CFArray *)CFDictionaryGetValue(v97, @"viewAreas");
      if (v104)
      {
        CFArrayRef v105 = v104;
        uint64_t v151 = 0;
        uint64_t v152 = &v151;
        uint64_t v153 = 0x2000000000;
        int v154 = 0;
        CFTypeID v106 = CFGetTypeID(v104);
        if (v106 != CFArrayGetTypeID()) {
          goto LABEL_381;
        }
        CFArrayGetCount(v105);
        *(void *)buf = MEMORY[0x1E4F143A8];
        uint64_t v145 = 0x40000000;
        int v146 = __carEndpoint_validateEnabledFeaturesWithAccessory_block_invoke;
        uint64_t v147 = &unk_1E6894748;
        uint64_t v148 = &v151;
        int v149 = &v160;
        int v150 = &v155;
        CFArrayApplyBlock();
        if (*((_DWORD *)v152 + 6))
        {
LABEL_381:
          APSLogErrorAt();
          _Block_object_dispose(&v151, 8);
          a3 = v123;
          CFArrayRef v19 = v124;
          a2 = v114;
          a4 = v121;
          goto LABEL_330;
        }
        _Block_object_dispose(&v151, 8);
      }
      int v115 = 1;
    }
    if (!CFDictionaryContainsKey(v97, @"cornerMasks"))
    {
      CFArrayRef v19 = v124;
      CFIndex Count = v98;
      goto LABEL_274;
    }
    CFIndex Count = v98;
    if (!CFDictionaryGetInt64())
    {
      CFArrayRef v19 = v124;
LABEL_274:
      a2 = v114;
      a4 = v121;
      a3 = v123;
LABEL_275:
      CFArrayRef v87 = v94;
      goto LABEL_276;
    }
    CFArrayRef v19 = v124;
    a2 = v114;
    if (*((unsigned char *)v156 + 24)) {
      break;
    }
    CFArrayRef v87 = v94;
    int v112 = 1;
    a4 = v121;
    a3 = v123;
LABEL_276:
    uint64_t DerivedStorage = v117;
    _Block_object_dispose(&v155, 8);
    if (Count == ++v91) {
      goto LABEL_282;
    }
  }
  a4 = v121;
  uint64_t DerivedStorage = v117;
  if (gLogCategory_APEndpointCarPlay <= 90
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  APSLogErrorAt();
  a3 = v123;
LABEL_331:
  _Block_object_dispose(&v155, 8);
LABEL_358:
  _Block_object_dispose(&v160, 8);
  int v77 = -16720;
LABEL_200:
  if (v164[0]) {
    CFRelease(v164[0]);
  }
  *((_DWORD *)v141 + 6) = v77;
  if (v77) {
    goto LABEL_188;
  }
  int v78 = APEndpointDescriptionCopyProperty(*(void *)(DerivedStorage + 8), @"HIDs", 0, (uint64_t)&cf);
  *((_DWORD *)v141 + 6) = v78;
  if (v78) {
    goto LABEL_188;
  }
  CMTimeFlags v79 = *(NSObject **)(DerivedStorage + 144);
  v128[0] = MEMORY[0x1E4F143A8];
  v128[1] = 0x40000000;
  v128[2] = __carEndpoint_activateInternal_block_invoke_120;
  v128[3] = &unk_1E6894088;
  v128[4] = &v140;
  v128[5] = DerivedStorage;
  v128[6] = cf;
  v128[7] = a1;
  dispatch_sync(v79, v128);
  if (!*((_DWORD *)v141 + 6))
  {
    carEndpoint_registerForOverrideTurnByTurnConfigurationChangedNotification((uint64_t)a1);
    CMTimeScale v80 = *(NSObject **)(DerivedStorage + 144);
    v127[0] = MEMORY[0x1E4F143A8];
    v127[1] = 0x40000000;
    v127[2] = __carEndpoint_activateInternal_block_invoke_2_125;
    v127[3] = &unk_1E68940B0;
    v127[6] = DerivedStorage;
    v127[7] = a1;
    v127[8] = a2;
    v127[4] = &v140;
    v127[5] = &v130;
    dispatch_sync(v80, v127);
    if (!*((_DWORD *)v141 + 6))
    {
      if (*(unsigned char *)(DerivedStorage + 57))
      {
        carEndpoint_setupNotificationsAndInitialParametersForJarvis((uint64_t)a1);
        APCarPlayAVVCServerRegisterEndpoint(a1);
      }
      APSEventRecorderRecordEvent();
      carEndpoint_postPerformanceReport(a1);
      carEndpoint_powerLogActivation((uint64_t)a1, 1);
      carEndpoint_AccumulateSignpostsAndSendToTimeStore();
      if (gLogCategory_APEndpointCarPlay <= 50
        && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *a4 = *((_DWORD *)v131 + 6);
      if (introspector_getCollectionOfActiveCarPlayEndpoints_once != -1) {
        dispatch_once(&introspector_getCollectionOfActiveCarPlayEndpoints_once, &__block_literal_global_23);
      }
      if (introspector_getCollectionOfActiveCarPlayEndpoints_coll)
      {
        uint64_t v81 = *(NSObject **)introspector_getCollectionOfActiveCarPlayEndpoints_coll;
        v126[0] = MEMORY[0x1E4F143A8];
        v126[1] = 0x40000000;
        v126[2] = __carEndpoint_activateInternal_block_invoke_2_133;
        v126[3] = &__block_descriptor_tmp_134_0;
        v126[4] = introspector_getCollectionOfActiveCarPlayEndpoints_coll;
        v126[5] = a1;
        dispatch_sync(v81, v126);
      }
      if (APSSettingsGetInt64())
      {
        int v82 = *(NSObject **)(DerivedStorage + 144);
        v125[0] = MEMORY[0x1E4F143A8];
        v125[1] = 0x40000000;
        v125[2] = __carEndpoint_activateInternal_block_invoke_3_138;
        v125[3] = &unk_1E68940F8;
        v125[4] = &v140;
        v125[5] = DerivedStorage;
        dispatch_async(v82, v125);
      }
    }
  }
LABEL_218:
  if (*((_DWORD *)v141 + 6))
  {
    dispatch_semaphore_signal(a3);
    carEndpoint_deactivateInternal(a1, 0, @"Activation Failed", 0);
  }
  CMTime v83 = (const void *)v135[3];
  if (v83) {
    CFRelease(v83);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v19) {
    CFRelease(v19);
  }
  if (v138) {
    CFRelease(v138);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  uint64_t v84 = *((unsigned int *)v141 + 6);
  _Block_object_dispose(&v130, 8);
  _Block_object_dispose(&v134, 8);
  _Block_object_dispose(&v140, 8);
  return v84;
}

void carEndpoint_deactivateInternal(const void *a1, int a2, uint64_t a3, _DWORD *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v59 = 0;
  int v60 = &v59;
  uint64_t v61 = 0x2000000000;
  int v62 = 0;
  uint64_t v55 = 0;
  int v56 = &v55;
  uint64_t v57 = 0x2000000000;
  int v58 = 0;
  uint64_t v51 = 0;
  long long v52 = &v51;
  uint64_t v53 = 0x2000000000;
  uint64_t v54 = 0;
  uint64_t v47 = 0;
  long long v48 = &v47;
  uint64_t v49 = 0x2000000000;
  uint64_t v50 = 0;
  uint64_t v43 = 0;
  uint64_t v44 = &v43;
  uint64_t v45 = 0x2000000000;
  uint64_t v46 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = &v39;
  uint64_t v41 = 0x2000000000;
  uint64_t v42 = 0;
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v8 = CMBaseObjectGetDerivedStorage();
  uint64_t v73 = 0;
  LODWORD(v64) = 0;
  LODWORD(v63[0]) = 0;
  MEMORY[0x1D25EB370](*(void *)(v8 + 496));
  CFArrayRef v9 = *(const __CFArray **)(v8 + 504);
  if (v9 && CFArrayGetCount(v9) >= 1)
  {
    uint64_t v34 = a1;
    if (gLogCategory_APEndpointCarPlay <= 50
      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (CFArrayGetCount(*(CFArrayRef *)(v8 + 504)) >= 1)
    {
      for (CFIndex i = 0; i < CFArrayGetCount(*(CFArrayRef *)(v8 + 504)); ++i)
      {
        ValueAtunsigned int Index = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v8 + 504), i);
        CFDictionaryGetValue(ValueAtIndex, @"CarPlaySendCommandCache_Command");
        CFDictionaryGetValue(ValueAtIndex, @"CarPlaySendCommandCache_TimestampBefore");
        FigCFDictionaryGetDoubleIfPresent();
        FigCFDictionaryGetInt32IfPresent();
        FigCFDictionaryGetInt32IfPresent();
        if (LODWORD(v63[0]))
        {
          if (gLogCategory_APEndpointCarPlay > 90
            || gLogCategory_APEndpointCarPlay == -1 && !_LogCategory_Initialize())
          {
            continue;
          }
        }
        else if (gLogCategory_APEndpointCarPlay > 50 {
               || gLogCategory_APEndpointCarPlay == -1 && !_LogCategory_Initialize())
        }
        {
          continue;
        }
        LogPrintF();
      }
    }
    a1 = v34;
    if (gLogCategory_APEndpointCarPlay < 51
      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  MEMORY[0x1D25EB390](*(void *)(v8 + 496));
  uint64_t v12 = CMBaseObjectGetDerivedStorage();
  LODWORD(v73) = 0;
  LODWORD(v64) = 0;
  CFArrayRef v13 = *(const __CFArray **)(v12 + 520);
  if (v13 && CFArrayGetCount(v13) >= 1)
  {
    uint64_t v33 = DerivedStorage;
    if (gLogCategory_APEndpointCarPlay <= 50
      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (CFArrayGetCount(*(CFArrayRef *)(v12 + 520)) >= 1)
    {
      for (CFIndex j = 0; j < CFArrayGetCount(*(CFArrayRef *)(v12 + 520)); ++j)
      {
        CFDictionaryRef v15 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v12 + 520), j);
        CFDictionaryGetValue(v15, @"CarPlayReceivedCommandCache_Command");
        CFDictionaryGetValue(v15, @"CarPlayReceivedCommandCache_Timestamp");
        FigCFDictionaryGetInt32IfPresent();
        FigCFDictionaryGetInt32IfPresent();
        if (v64)
        {
          if (gLogCategory_APEndpointCarPlay > 90
            || gLogCategory_APEndpointCarPlay == -1 && !_LogCategory_Initialize())
          {
            continue;
          }
        }
        else if (gLogCategory_APEndpointCarPlay > 50 {
               || gLogCategory_APEndpointCarPlay == -1 && !_LogCategory_Initialize())
        }
        {
          continue;
        }
        LogPrintF();
      }
    }
    uint64_t DerivedStorage = v33;
    if (gLogCategory_APEndpointCarPlay < 51
      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  uint64_t v16 = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1D25EB370](*(void *)(v16 + 496));
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(v16 + 504));
  MEMORY[0x1D25EB390](*(void *)(v16 + 496));
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(v16 + 520));
  uint64_t v17 = *(NSObject **)(DerivedStorage + 144);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __carEndpoint_deactivateInternal_block_invoke;
  block[3] = &unk_1E68949D0;
  block[4] = &v59;
  void block[5] = &v55;
  void block[6] = DerivedStorage;
  dispatch_sync(v17, block);
  if (*((_DWORD *)v60 + 6))
  {
    APSEventRecorderRecordEvent();
    uint64_t v18 = CMBaseObjectGetDerivedStorage();
    v98[0] = 0;
    v98[1] = v98;
    v98[2] = 0x2000000000;
    v98[3] = 0;
    v96[0] = 0;
    v96[1] = v96;
    v96[2] = 0x2000000000;
    int v97 = 0;
    uint64_t v92 = 0;
    double v93 = &v92;
    uint64_t v94 = 0x2000000000;
    uint64_t v95 = 0;
    uint64_t v88 = 0;
    int v89 = &v88;
    uint64_t v90 = 0x2000000000;
    uint64_t v91 = 0;
    v86[0] = 0;
    v86[1] = v86;
    v86[2] = 0x2000000000;
    int v87 = 0;
    uint64_t v82 = 0;
    CMTime v83 = &v82;
    uint64_t v84 = 0x2000000000;
    CFMutableDictionaryRef Mutable = 0;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFArrayRef v19 = *(NSObject **)(v18 + 144);
    uint64_t v73 = MEMORY[0x1E4F143A8];
    uint64_t v74 = 0x40000000;
    uint64_t v75 = __carEndpoint_postSessionStatistics_block_invoke;
    int v76 = &unk_1E6894A80;
    uint64_t v81 = v18;
    int v77 = v98;
    int v78 = v96;
    CMTimeFlags v79 = &v82;
    CMTimeScale v80 = &v92;
    dispatch_sync(v19, &v73);
    if (gLogCategory_APEndpointCarPlay <= 50
      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      AppendPrintF();
    }
    if (v93[3])
    {
      CFArrayGetCount(*(CFArrayRef *)(v18 + 240));
      uint64_t v64 = MEMORY[0x1E4F143A8];
      uint64_t v65 = 0x40000000;
      uint64_t v66 = __carEndpoint_postSessionStatistics_block_invoke_2;
      int v67 = &unk_1E6894AA8;
      CMTimeFlags v72 = a1;
      int v68 = v96;
      uint64_t v69 = &v88;
      uint64_t v70 = &v82;
      CFAllocatorRef v71 = v86;
      CFArrayApplyBlock();
      CFDictionarySetInt64();
      CFDictionaryRef v20 = *(NSObject **)(v18 + 144);
      v63[0] = MEMORY[0x1E4F143A8];
      v63[1] = 0x40000000;
      v63[2] = __carEndpoint_postSessionStatistics_block_invoke_3;
      v63[3] = &unk_1E6894AF8;
      v63[5] = v18;
      v63[4] = &v82;
      dispatch_sync(v20, v63);
      APCarPlay_AddAnalyticsValues((const void *)v83[3], @"SessionEnded");
      CFRelease((CFTypeRef)v93[3]);
    }
    if (gLogCategory_APEndpointCarPlay <= 50
      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    free((void *)v89[3]);
    uint64_t v21 = (const void *)v83[3];
    if (v21) {
      CFRelease(v21);
    }
    _Block_object_dispose(&v82, 8);
    _Block_object_dispose(v86, 8);
    _Block_object_dispose(&v88, 8);
    _Block_object_dispose(&v92, 8);
    _Block_object_dispose(v96, 8);
    _Block_object_dispose(v98, 8);
    carEndpoint_powerLogActivation((uint64_t)a1, 0);
    uint64_t v22 = CMBaseObjectGetDerivedStorage();
    APSEventRecorderReset();
    uint64_t v23 = *(NSObject **)(v22 + 144);
    uint64_t v73 = MEMORY[0x1E4F143A8];
    uint64_t v74 = 0x40000000;
    uint64_t v75 = __carEndpoint_resetEventRecorderEventsAndStatistics_block_invoke;
    int v76 = &__block_descriptor_tmp_994;
    int v77 = (void *)v22;
    dispatch_sync(v23, &v73);
  }
  uint64_t v24 = *(NSObject **)(DerivedStorage + 144);
  v37[0] = MEMORY[0x1E4F143A8];
  v37[1] = 0x40000000;
  v37[2] = __carEndpoint_deactivateInternal_block_invoke_2;
  v37[3] = &unk_1E68949F8;
  v37[4] = &v51;
  v37[5] = &v47;
  v37[8] = DerivedStorage;
  v37[9] = a1;
  v37[6] = &v39;
  v37[7] = &v43;
  dispatch_sync(v24, v37);
  if (!FigServer_IsAirplayd())
  {
    CFTypeRef v25 = *(NSObject **)(DerivedStorage + 456);
    v36[0] = MEMORY[0x1E4F143A8];
    v36[1] = 0x40000000;
    v36[2] = __carEndpoint_deactivateInternal_block_invoke_3;
    v36[3] = &__block_descriptor_tmp_945;
    v36[4] = DerivedStorage;
    dispatch_sync(v25, v36);
  }
  uint64_t v26 = v40[3];
  if (v26)
  {
    APAccTransportClientConnectionInvalidateEndpoint(v44[3], v26);
    CFRelease((CFTypeRef)v40[3]);
    CFRelease(a1);
  }
  if (v48[3])
  {
    CFArrayGetCount((CFArrayRef)v48[3]);
    v35[6] = MEMORY[0x1E4F143A8];
    v35[7] = 0x40000000;
    v35[8] = __carEndpoint_deactivateInternal_block_invoke_4;
    v35[9] = &__block_descriptor_tmp_946;
    v35[10] = a1;
    CFArrayApplyBlock();
    uint64_t v27 = (const void *)v48[3];
    if (v27)
    {
      CFRelease(v27);
      v48[3] = 0;
    }
  }
  uint64_t v28 = v44[3];
  if (v28)
  {
    APAccTransportClientConnectionClose(v28);
    CFRelease((CFTypeRef)v44[3]);
  }
  uint64_t v29 = v52[3];
  if (v29)
  {
    carEndpoint_teardownSenderSession((uint64_t)a1, v29, a2 == 0);
    unint64_t v30 = (const void *)v52[3];
    if (v30) {
      CFRelease(v30);
    }
  }
  *(_DWORD *)(DerivedStorage + 212) = 0;
  if (*(unsigned char *)(DerivedStorage + 57)) {
    APCarPlayAVVCServerRemoveEndpoint(a1);
  }
  if (a2)
  {
    if (introspector_getCollectionOfActiveCarPlayEndpoints_once != -1) {
      dispatch_once(&introspector_getCollectionOfActiveCarPlayEndpoints_once, &__block_literal_global_23);
    }
    if (introspector_getCollectionOfActiveCarPlayEndpoints_coll)
    {
      uint64_t v31 = *(NSObject **)introspector_getCollectionOfActiveCarPlayEndpoints_coll;
      v35[0] = MEMORY[0x1E4F143A8];
      v35[1] = 0x40000000;
      v35[2] = __carEndpoint_deactivateInternal_block_invoke_5;
      v35[3] = &__block_descriptor_tmp_947;
      v35[4] = introspector_getCollectionOfActiveCarPlayEndpoints_coll;
      v35[5] = a1;
      dispatch_sync(v31, v35);
    }
  }
  carEndpoint_setFeatureFlagsToDefaultValues(a1, 1, *((_DWORD *)v60 + 6));
  if (a4)
  {
    int v32 = *((_DWORD *)v56 + 6);
    if (!v32) {
      int v32 = *((_DWORD *)v60 + 6);
    }
    *a4 = v32;
  }
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  _Block_object_dispose(&v39, 8);
  _Block_object_dispose(&v43, 8);
  _Block_object_dispose(&v47, 8);
  _Block_object_dispose(&v51, 8);
  _Block_object_dispose(&v55, 8);
  _Block_object_dispose(&v59, 8);
}

void carEndpoint_postActivationNotification(const void *a1, const void *a2, int a3)
{
  unint64_t v8 = 0;
  carEndpoint_getSupportedFeatures((uint64_t)a1, &v8);
  CFAllocatorRef v6 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetInt64();
  carEndpoint_postNotification(a1, a2, a3, Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
}

uint64_t __carEndpoint_isDissociated_block_invoke(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(unsigned char *)(*(void *)(result + 40) + 152);
  return result;
}

void carEndpoint_setFeatureFlagsToDefaultValues(const void *a1, int a2, int a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(DerivedStorage + 57) = 0;
  *(_DWORD *)(DerivedStorage + 59) = 0;
  *(_DWORD *)(DerivedStorage + 62) = 0;
  uint64_t v7 = *(const void **)(DerivedStorage + 72);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(DerivedStorage + 72) = 0;
  }
  *(unsigned char *)(DerivedStorage + 80) = 0;
  unint64_t v8 = *(const void **)(DerivedStorage + 88);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(DerivedStorage + 88) = 0;
  }
  CFArrayRef v9 = *(const void **)(DerivedStorage + 96);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(DerivedStorage + 96) = 0;
  }
  *(unsigned char *)(DerivedStorage + 104) = 0;
  BOOL v10 = *(const void **)(DerivedStorage + 112);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(DerivedStorage + 112) = 0;
  }
  *(unsigned char *)(DerivedStorage + 120) = 0;
  uint64_t v11 = *(const void **)(DerivedStorage + 128);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(DerivedStorage + 128) = 0;
  }
  *(unsigned char *)(DerivedStorage + 58) = 0;
  if (a2)
  {
    uint64_t v12 = (const void *)*MEMORY[0x1E4F20728];
    carEndpoint_postNotification(a1, v12, a3, 0);
  }
}

uint64_t __carEndpoint_activateInternal_block_invoke(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 56);
  if (*(unsigned char *)(v2 + 152))
  {
    uint64_t v37 = *(void *)(*(void *)(result + 32) + 8);
    int v38 = -16723;
    goto LABEL_75;
  }
  if (*(_DWORD *)(v2 + 204))
  {
    uint64_t result = APSLogErrorAt();
    uint64_t v37 = *(void *)(*(void *)(v1 + 32) + 8);
    int v38 = -16727;
    goto LABEL_75;
  }
  int v3 = *(_DWORD *)(v2 + 200) + 1;
  *(_DWORD *)(v2 + 200) = v3;
  *(_DWORD *)(*(void *)(*(void *)(result + 40) + 8) + 24) = v3;
  if (!FigServer_IsAirplayd()) {
    goto LABEL_11;
  }
  uint64_t v4 = *(const void **)(*(void *)(v1 + 56) + 296);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(*(void *)(v1 + 56) + 296) = 0;
  }
  *(_DWORD *)(*(void *)(*(void *)(v1 + 32) + 8) + 24) = FigStarkModeCopyController();
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!*(_DWORD *)(*(void *)(*(void *)(v1 + 32) + 8) + 24))
  {
LABEL_11:
    uint64_t v5 = *(const void **)(*(void *)(v1 + 56) + 296);
    if (v5)
    {
      CFRetain(*(CFTypeRef *)(v1 + 64));
      dispatch_retain(*(dispatch_object_t *)(v1 + 72));
      CFRetain(v5);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __carEndpoint_activateInternal_block_invoke_2;
      block[3] = &unk_1E6894038;
      uint64_t v41 = *(void *)(v1 + 72);
      long long v42 = *(_OWORD *)(v1 + 56);
      CFAllocatorRef v6 = *(NSObject **)(v42 + 456);
      uint64_t v43 = v5;
      int8x16_t v40 = vextq_s8(*(int8x16_t *)(v1 + 32), *(int8x16_t *)(v1 + 32), 8uLL);
      dispatch_async(v6, block);
      *(_DWORD *)(*(void *)(*(void *)(v1 + 32) + 8) + 24) = APSNetworkClockNTPServerCreate();
      if (*(_DWORD *)(*(void *)(*(void *)(v1 + 32) + 8) + 24)) {
        return APSLogErrorAt();
      }
      uint64_t v7 = *(void *)(v1 + 64);
      unint64_t v8 = *(const void **)(*(void *)(v1 + 56) + 8);
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (*(void *)(DerivedStorage + 480))
      {
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (!Mutable)
        {
          APSLogErrorAt();
          int v29 = -16721;
          goto LABEL_60;
        }
        uint64_t v11 = Mutable;
        CFDictionarySetValue(Mutable, @"eventRecorder", *(const void **)(DerivedStorage + 480));
      }
      else
      {
        uint64_t v11 = 0;
      }
      unsigned int v12 = APSGetFBOPropertyInt64();
      int v13 = IsAppleInternalBuild();
      uint64_t v14 = (const void **)MEMORY[0x1E4F1CFD0];
      if (v13 || v12 > 0x44AF98 || v12 - 3651004 <= 0xCF463)
      {
        CFDictionarySetValue(v11, @"statsCollectionEnabled", (const void *)*MEMORY[0x1E4F1CFD0]);
        if (gLogCategory_APEndpointCarPlay <= 50
          && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
        {
          goto LABEL_25;
        }
      }
      else
      {
        CFDictionarySetValue(v11, @"statsCollectionEnabled", (const void *)*MEMORY[0x1E4F1CFC8]);
        if (gLogCategory_APEndpointCarPlay <= 50
          && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
        {
LABEL_25:
          LogPrintF();
        }
      }
      if (IsAppleInternalBuild() && APSSettingsGetInt64()) {
        CFDictionarySetValue(v11, @"highFreqStatsCollectionEnabled", *v14);
      }
      CFDictionaryRef v15 = (void *)(DerivedStorage + 216);
      int v16 = APSenderSessionAirPlayCreate(0, *(const void **)(DerivedStorage + 16), v8, 0, 5, 0, *(NSObject **)(DerivedStorage + 456), 0, 0.0, 0, 0, *(CFTypeRef *)(DerivedStorage + 232), 0, 0, 0, v11, (CFTypeRef *)(DerivedStorage + 216));
      if (v16)
      {
        int v29 = v16;
      }
      else
      {
        if (gLogCategory_APEndpointCarPlay <= 50
          && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        uint64_t v17 = *v15;
        uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v18) {
          uint64_t v19 = v18;
        }
        else {
          uint64_t v19 = 0;
        }
        CFDictionaryRef v20 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t (*)(), uint64_t (*)(uint64_t, int, uint64_t, const void *, void *)))(v19 + 96);
        if (v20) {
          v20(v17, v7, v7, carEndpoint_handleEvent, carEndpoint_handleEventCreatingReply);
        }
        CMNotificationCenterGetDefaultLocalCenter();
        int v21 = CMNotificationCenterAddListener();
        if (v21)
        {
          int v29 = v21;
        }
        else
        {
          CMNotificationCenterGetDefaultLocalCenter();
          int v22 = CMNotificationCenterAddListener();
          if (v22)
          {
            int v29 = v22;
          }
          else
          {
            CMNotificationCenterGetDefaultLocalCenter();
            int v23 = CMNotificationCenterAddListener();
            if (v23)
            {
              int v29 = v23;
            }
            else
            {
              CMNotificationCenterGetDefaultLocalCenter();
              int v24 = CMNotificationCenterAddListener();
              if (v24)
              {
                int v29 = v24;
              }
              else
              {
                CMNotificationCenterGetDefaultLocalCenter();
                int v25 = CMNotificationCenterAddListener();
                if (v25)
                {
                  int v29 = v25;
                }
                else
                {
                  if (!CFPrefs_GetInt64())
                  {
                    int v29 = 0;
                    goto LABEL_57;
                  }
                  uint64_t CMBaseObject = APSenderSessionGetCMBaseObject(*v15);
                  uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 8);
                  if (v27) {
                    uint64_t v28 = v27;
                  }
                  else {
                    uint64_t v28 = 0;
                  }
                  unint64_t v30 = *(uint64_t (**)(uint64_t, __CFString *, const void *))(v28 + 56);
                  if (v30)
                  {
                    int v29 = v30(CMBaseObject, @"PublishEncryptionKeyDiagnosticMode", *v14);
                    if (!v29) {
                      goto LABEL_57;
                    }
                  }
                  else
                  {
                    int v29 = -12782;
                  }
                }
              }
            }
          }
        }
      }
      APSLogErrorAt();
LABEL_57:
      if (v11) {
        CFRelease(v11);
      }
      if (!v29)
      {
LABEL_68:
        *(_DWORD *)(*(void *)(*(void *)(v1 + 32) + 8) + 24) = v29;
        if (!*(_DWORD *)(*(void *)(*(void *)(v1 + 32) + 8) + 24))
        {
          uint64_t result = (uint64_t)CFRetain(*(CFTypeRef *)(*(void *)(v1 + 56) + 216));
          *(void *)(*(void *)(*(void *)(v1 + 48) + 8) + 24) = result;
          if (!*(unsigned char *)(*(void *)(v1 + 56) + 41)) {
            return result;
          }
          *(_DWORD *)(*(void *)(*(void *)(v1 + 32) + 8) + 24) = carEndpoint_createAccConnectionIfNeeded();
          uint64_t result = *(unsigned int *)(*(void *)(*(void *)(v1 + 32) + 8) + 24);
          if (!result) {
            return result;
          }
        }
        return APSLogErrorAt();
      }
LABEL_60:
      carEndpoint_teardownSenderSession(v7, *(void *)(DerivedStorage + 216), 0);
      uint64_t v31 = *(void *)(DerivedStorage + 216);
      if (v31)
      {
        uint64_t v32 = APSenderSessionGetCMBaseObject(v31);
        if (v32)
        {
          uint64_t v33 = v32;
          uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v34) {
            uint64_t v35 = v34;
          }
          else {
            uint64_t v35 = 0;
          }
          uint64_t v36 = *(void (**)(uint64_t))(v35 + 24);
          if (v36) {
            v36(v33);
          }
        }
        CFRelease(*(CFTypeRef *)(DerivedStorage + 216));
        *(void *)(DerivedStorage + 216) = 0;
      }
      goto LABEL_68;
    }
    uint64_t result = APSLogErrorAt();
    uint64_t v37 = *(void *)(*(void *)(v1 + 32) + 8);
    int v38 = -16726;
LABEL_75:
    *(_DWORD *)(v37 + 24) = v38;
    return result;
  }
  return APSLogErrorAt();
}

void __carEndpoint_activateInternal_block_invoke_2(uint64_t a1)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 48), 0xFFFFFFFFFFFFFFFFLL);
  if (*(_DWORD *)(*(void *)(a1 + 56) + 204) == *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    if (gLogCategory_APEndpointCarPlay <= 30
      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(void *)(*(void *)(a1 + 56) + 464) = CFRetain(*(CFTypeRef *)(a1 + 72));
    if (!FigServer_IsAirplayd())
    {
      v20[6] = MEMORY[0x1E4F143A8];
      v20[7] = 0x40000000;
      v20[8] = __carEndpoint_activateInternal_block_invoke_3;
      v20[9] = &__block_descriptor_tmp_114;
      v20[10] = *(void *)(a1 + 64);
      FigStarkModeControllerSetExecuteChangeHandler();
    }
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v31 = 0;
    CFTypeRef cf = 0;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    int v26 = 0;
    uint64_t v25 = 0;
    int v24 = 0;
    uint64_t v23 = 0;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long block = 0u;
    long long v35 = 0u;
    memset(v33, 0, sizeof(v33));
    long long v21 = 0u;
    long long v22 = 0u;
    if (!*(void *)(DerivedStorage + 464))
    {
      APSLogErrorAt();
      BOOL v10 = 0;
LABEL_26:
      if (gLogCategory_APEndpointCarPlay <= 50
        && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (!*(void *)(DerivedStorage + 464))
      {
LABEL_51:
        int v11 = 0;
        goto LABEL_52;
      }
      int v11 = FigStarkModeControllerRequestInitialModeChange();
LABEL_52:
      if (cf) {
        CFRelease(cf);
      }
      free(v10);
      *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v11;
      if (*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
      {
        APSLogErrorAt();
      }
      else
      {
        uint64_t v13 = *(void *)(a1 + 64);
        uint64_t v14 = CMBaseObjectGetDerivedStorage();
        if (CFPreferencesGetAppBooleanValue(@"airPlayCarPlayReceiverLogs", @"com.apple.airplay", 0)
          || CFPreferencesGetAppBooleanValue(@"dpCarPlayReceiverLogs", @"com.apple.airplay", 0)
          || CFPreferencesGetAppBooleanValue(@"OEMCarPlayReceiverLogs", @"com.apple.airplay", 0))
        {
          CFDictionaryRef v15 = *(NSObject **)(v14 + 456);
          *(void *)&long long block = MEMORY[0x1E4F143A8];
          *((void *)&block + 1) = 0x40000000;
          *(void *)&long long v35 = __carEndpoint_configureAccessoryLogs_block_invoke;
          *((void *)&v35 + 1) = &__block_descriptor_tmp_220_0;
          *(void *)&long long v36 = v13;
          dispatch_async(v15, &block);
        }
      }
      goto LABEL_59;
    }
    unsigned int v3 = APSGetFBOPropertyInt64();
    uint64_t CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(void *)(DerivedStorage + 8));
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *(unsigned int (**)(uint64_t, __CFString *, void, CFTypeRef *))(v6 + 48);
    if (!v7 || v7(CMBaseObject, @"InitialMode", 0, &cf))
    {
      int v11 = -71960;
    }
    else if (cf)
    {
      int v8 = APStarkModeChangeRequestMakeFromDictionary((uint64_t)cf, v3 > 0x3567DF, (uint64_t)&v27);
      if (v8)
      {
        int v11 = v8;
      }
      else
      {
        unsigned int v9 = APStarkModeInitialOwnerRequestMakeFromDictionary((uint64_t)cf, v3 > 0x3567DF, (uint64_t)&v25, (uint64_t)&v23);
        if (!v9)
        {
          BOOL v10 = (void *)CFDictionaryCopyCString();
          if (gLogCategory_APEndpointCarPlay <= 50
            && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
          {
            APStarkModeChangeRequestToString(&v27, (uint64_t)&block);
            APStarkInitialOwnerRequestToString((uint64_t)&v25, (uint64_t)&v23, (uint64_t)v33);
            LogPrintF();
          }
          int v12 = FigStarkModeControllerRequestInitialModeChange();
          int v11 = v12;
          if (!v12) {
            goto LABEL_52;
          }
          if (v12 == -16739 && v3 < 0x3567E0)
          {
            if (gLogCategory_APEndpointCarPlay <= 90
              && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            if (HIDWORD(v27) == 100) {
              *((void *)&v28 + 1) = 0x6400000064;
            }
            if (DWORD1(v29) == 100) {
              *(void *)&long long v30 = 0x6400000064;
            }
            if (!FigStarkModeControllerRequestInitialModeChange()) {
              goto LABEL_51;
            }
            APSLogErrorAt();
            goto LABEL_26;
          }
          if (gLogCategory_APEndpointCarPlay <= 90
            && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          APSLogErrorAt();
LABEL_25:
          if (v3 >= 0x3567E0) {
            goto LABEL_52;
          }
          goto LABEL_26;
        }
        int v11 = v9;
      }
    }
    else
    {
      int v11 = -71960;
    }
    APSLogErrorAt();
    BOOL v10 = 0;
    goto LABEL_25;
  }
  if (gLogCategory_APEndpointCarPlay <= 30
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
LABEL_59:
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    *(void *)&long long block = 0;
    *((void *)&block + 1) = &block;
    *(void *)&long long v35 = 0x2000000000;
    DWORD2(v35) = 0;
    uint64_t v16 = *(void *)(a1 + 56);
    uint64_t v17 = *(NSObject **)(v16 + 144);
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 0x40000000;
    v20[2] = __carEndpoint_activateInternal_block_invoke_4;
    v20[3] = &unk_1E6894010;
    v20[4] = &block;
    v20[5] = v16;
    dispatch_sync(v17, v20);
    CFAllocatorRef v18 = CFGetAllocator(*(CFTypeRef *)(a1 + 64));
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v18, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionarySetInt64();
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F206A0], (const void *)*MEMORY[0x1E4F20680]);
    carEndpoint_postNotification(*(const void **)(a1 + 64), (const void *)*MEMORY[0x1E4F20730], *(_DWORD *)(*((void *)&block + 1) + 24), Mutable);
    CFRelease(Mutable);
    _Block_object_dispose(&block, 8);
  }
  CFRelease(*(CFTypeRef *)(a1 + 72));
  dispatch_release(*(dispatch_object_t *)(a1 + 48));
  CFRelease(*(CFTypeRef *)(a1 + 64));
}

void __carEndpoint_activateInternal_block_invoke_3(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = dispatch_semaphore_create(0);
  uint64_t v5 = *(const void **)(a1 + 32);
  CMBaseObjectGetDerivedStorage();
  uint64_t v7 = 0;
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  carEndpoint_takeActionOnModeChanges(v5, a2);
  if (APStarkModeCreateDictionaryRepresentation((uint64_t)a2, &v7)
    || carEndpoint_sendCommandInternal(v5, @"modesChanged", v7, 1, v4))
  {
    APSLogErrorAt();
  }
  else if (gLogCategory_APEndpointCarPlay <= 20 {
         && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  }
  {
    LogPrintF();
  }
  if (v7) {
    CFRelease(v7);
  }
  dispatch_time_t v6 = dispatch_time(0, 250000000);
  if (dispatch_semaphore_wait(v4, v6)
    && gLogCategory_APEndpointCarPlay <= 60
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  dispatch_release(v4);
}

uint64_t __carEndpoint_activateInternal_block_invoke_4(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_DWORD *)(*(void *)(result + 40) + 204);
  return result;
}

void carEndpoint_postNotification(const void *a1, const void *a2, int a3, const void *a4)
{
  uint64_t DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  if (a1) {
    CFRetain(a1);
  }
  if (a2) {
    CFRetain(a2);
  }
  if (a4) {
    CFRetain(a4);
  }
  unsigned int v9 = *DerivedStorage;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __carEndpoint_postNotification_block_invoke;
  block[3] = &__block_descriptor_tmp_263;
  void block[4] = DerivedStorage;
  void block[5] = a2;
  int v11 = a3;
  void block[6] = a4;
  void block[7] = a1;
  dispatch_async(v9, block);
}

uint64_t carEndpoint_createAccConnectionIfNeeded()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 280)) {
    return 0;
  }
  uint64_t v2 = (uint64_t *)(DerivedStorage + 280);
  CFDictionaryRef v3 = *(const __CFDictionary **)(DerivedStorage + 48);
  if (v3 && (CFDictionaryRef Value = CFDictionaryGetValue(v3, @"authenticationCertificateSerial")) != 0)
  {
    uint64_t v5 = Value;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v7 = Mutable;
    if (!Mutable)
    {
      APSLogErrorAt();
      uint64_t v1 = 4294960568;
      goto LABEL_15;
    }
    CFDictionarySetValue(Mutable, @"authenticationCertificateSerial", v5);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = APAccTransportClientConnectionCreate(v7, v2);
  if (v8)
  {
    uint64_t v1 = v8;
    goto LABEL_14;
  }
  uint64_t v1 = APAccTransportClientConnectionOpen(*v2);
  if (v1)
  {
LABEL_14:
    APSLogErrorAt();
LABEL_15:
    if (*v2)
    {
      APAccTransportClientConnectionClose(*v2);
      if (*v2)
      {
        CFRelease((CFTypeRef)*v2);
        *uint64_t v2 = 0;
      }
    }
  }
  if (v7) {
    CFRelease(v7);
  }
  return v1;
}

uint64_t __carEndpoint_activateInternal_block_invoke_120(uint64_t result)
{
  uint64_t v1 = (void *)result;
  uint64_t v2 = *(void *)(result + 40);
  if (*(unsigned char *)(v2 + 152))
  {
    *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = -16723;
    return result;
  }
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = APHIDClientCreate(0, *(const __CFArray **)(result + 48), (void *)(v2 + 272));
  uint64_t result = *(unsigned int *)(*(void *)(v1[4] + 8) + 24);
  if (!result)
  {
    if (!*(unsigned char *)(v1[5] + 40)) {
      return result;
    }
    CFDictionaryRef v3 = (const void *)v1[7];
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    int AccConnectionIfNeeded = carEndpoint_createAccConnectionIfNeeded();
    if (AccConnectionIfNeeded)
    {
      int v6 = AccConnectionIfNeeded;
    }
    else
    {
      if (CFStringCompare(@"com.apple.APAccClientEndpoint", @"com.apple.APAccClientEndpoint", 0))
      {
        int v6 = 0;
        goto LABEL_10;
      }
      uint64_t v7 = *(void *)(DerivedStorage + 280);
      uint64_t v8 = (uint64_t *)(DerivedStorage + 288);
      int v6 = APAccTransportClientConnectionCopyEndpoint(v7, (uint64_t)"com.apple.APAccClientEndpoint", (uint64_t)v8);
      if (!v6)
      {
        CFRetain(v3);
        uint64_t v9 = *v8;
        v12[0] = MEMORY[0x1E4F143A8];
        v12[1] = 0x40000000;
        _OWORD v12[2] = __carEndpoint_setUpAPAccClientEndpointForIdType_block_invoke;
        v12[3] = &__block_descriptor_tmp_655;
        v12[4] = v3;
        int v10 = APAccTransportClientEndpointActivate(v9, 0, 0, (uint64_t)v12);
        if (v10)
        {
          int v11 = v10;
          APSLogErrorAt();
          int v6 = v11;
        }
        goto LABEL_10;
      }
    }
    APSLogErrorAt();
LABEL_10:
    *(_DWORD *)(*(void *)(v1[4] + 8) + 24) = v6;
    uint64_t result = *(unsigned int *)(*(void *)(v1[4] + 8) + 24);
    if (result) {
      return APSLogErrorAt();
    }
    return result;
  }
  return APSLogErrorAt();
}

void carEndpoint_registerForOverrideTurnByTurnConfigurationChangedNotification(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  carEndpoint_registerForGlobalNotification(a1, (uint64_t)"com.apple.airplay.overrideTBTPrefsChanged", (uint64_t)carEndpoint_handleOverrideTurnByTurnConfigurationChanged, DerivedStorage + 320);
  CFDictionaryRef v3 = *(NSObject **)(DerivedStorage + 456);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __carEndpoint_registerForOverrideTurnByTurnConfigurationChangedNotification_block_invoke;
  block[3] = &__block_descriptor_tmp_657;
  void block[4] = a1;
  dispatch_async(v3, block);
}

uint64_t __carEndpoint_activateInternal_block_invoke_2_125(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 48);
  if (*(unsigned char *)(v2 + 152))
  {
    *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = -16723;
  }
  else
  {
    if (*(void *)(v2 + 480)) {
      APSEventRecorderRecordEvent();
    }
    uint64_t v3 = LogCategoryCopyOSLogHandle();
    uint64_t v4 = (void *)v3;
    uint64_t v5 = MEMORY[0x1E4F14500];
    if (v3) {
      int v6 = v3;
    }
    else {
      int v6 = MEMORY[0x1E4F14500];
    }
    if (os_signpost_enabled(v6))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1D0945000, v6, OS_SIGNPOST_EVENT, 0x2B8D08B8uLL, "AP_SIGNPOST_CAR_SETUPSTREAMS_START", (const char *)&unk_1D0B9874E, buf, 2u);
    }
    if (v4) {
      os_release(v4);
    }
    *(_DWORD *)(*(void *)(*(void *)(v1 + 32) + 8) + 24) = carEndpoint_setupStreams(*(const void **)(v1 + 56), *(const __CFDictionary **)(v1 + 64));
    if (*(void *)(*(void *)(v1 + 48) + 480)) {
      APSEventRecorderRecordEvent();
    }
    uint64_t v7 = LogCategoryCopyOSLogHandle();
    uint64_t v8 = (void *)v7;
    if (v7) {
      uint64_t v9 = v7;
    }
    else {
      uint64_t v9 = v5;
    }
    if (os_signpost_enabled(v9))
    {
      *(_WORD *)uint64_t v16 = 0;
      _os_signpost_emit_with_name_impl(&dword_1D0945000, v9, OS_SIGNPOST_EVENT, 0x2B8D08BCuLL, "AP_SIGNPOST_CAR_SETUPSTREAMS_COMPLETE", (const char *)&unk_1D0B9874E, v16, 2u);
    }
    if (v8) {
      os_release(v8);
    }
    if (*(_DWORD *)(*(void *)(*(void *)(v1 + 32) + 8) + 24))
    {
      return APSLogErrorAt();
    }
    else
    {
      uint64_t v10 = *(void *)(v1 + 48);
      uint64_t CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(void *)(v10 + 8));
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v12) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v14 = *(void (**)(uint64_t, __CFString *, void, uint64_t))(v13 + 48);
      if (v14) {
        v14(CMBaseObject, @"VehicleInformation", 0, v10 + 312);
      }
      if (gLogCategory_APEndpointCarPlay <= 50
        && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *(unsigned char *)(*(void *)(v1 + 48) + 305) = APSGetFBOPropertyInt64() != 0;
      if (gLogCategory_APEndpointCarPlay <= 50
        && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      uint64_t result = APSGetFBOPropertyInt64();
      uint64_t v15 = *(void *)(v1 + 48);
      *(unsigned char *)(v15 + 306) = result != 0;
      if (gLogCategory_APEndpointCarPlay <= 50)
      {
        if (gLogCategory_APEndpointCarPlay != -1
          || (uint64_t result = _LogCategory_Initialize(), v15 = *(void *)(v1 + 48), result))
        {
          uint64_t result = LogPrintF();
          uint64_t v15 = *(void *)(v1 + 48);
        }
      }
      *(_DWORD *)(v15 + 204) = *(_DWORD *)(*(void *)(*(void *)(v1 + 40) + 8) + 24);
    }
  }
  return result;
}

uint64_t carEndpoint_setupStreams(const void *a1, const __CFDictionary *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  *(void *)(DerivedStorage + 240) = Mutable;
  if (!Mutable || (int v6 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) == 0)
  {
    APSLogErrorAt();
    return 4294950575;
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(const void **)(DerivedStorage + 480);
  if (v8)
  {
    CFDictionarySetValue(v6, @"EventRecorder", v8);
    CFDictionarySetValue(v7, @"EventRecorder", *(const void **)(DerivedStorage + 480));
  }
  if (*(unsigned char *)(DerivedStorage + 64)) {
    CFDictionarySetValue(v7, @"UseCarPlayHEVC", (const void *)*MEMORY[0x1E4F1CFD0]);
  }
  if (a2)
  {
    uint64_t v9 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F20300]);
    if (v9) {
      CFDictionarySetValue(v7, @"clientPID", v9);
    }
    uint64_t v10 = CFDictionaryGetValue(a2, @"ScreenSource");
    if (v10) {
      CFDictionarySetValue(v7, @"ScreenSource", v10);
    }
    int v11 = CFDictionaryGetValue(a2, @"ScreenProcessor");
    if (v11) {
      CFDictionarySetValue(v7, @"ScreenProcessor", v11);
    }
    uint64_t v12 = (const void *)*MEMORY[0x1E4F20340];
    uint64_t v13 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F20340]);
    if (v13) {
      CFDictionarySetValue(v7, v12, v13);
    }
  }
  if (APSGetFBOPropertyInt64())
  {
    uint64_t v14 = (const void *)*MEMORY[0x1E4F21468];
    uint64_t v15 = carEndpoint_setupAudioStream(a1, (const void *)*MEMORY[0x1E4F21468], (const void *)*MEMORY[0x1E4F21440], v7);
    if (v15)
    {
      uint64_t v40 = v15;
    }
    else if (*(unsigned char *)(DerivedStorage + 58) {
           && (uint64_t v16 = carEndpoint_setupAudioStream(a1, (const void *)*MEMORY[0x1E4F21470], (const void *)*MEMORY[0x1E4F21430], v7), v16))
    }
    {
      uint64_t v40 = v16;
    }
    else
    {
      uint64_t v17 = carEndpoint_setupAudioStream(a1, v14, (const void *)*MEMORY[0x1E4F21420], v7);
      if (v17)
      {
        uint64_t v40 = v17;
      }
      else
      {
        if (!*(unsigned char *)(DerivedStorage + 57)) {
          goto LABEL_24;
        }
        uint64_t v18 = carEndpoint_setupAudioStream(a1, v14, (const void *)*MEMORY[0x1E4F21428], v7);
        if (v18)
        {
          uint64_t v40 = v18;
        }
        else
        {
          uint64_t v19 = carEndpoint_setupAudioStream(a1, (const void *)*MEMORY[0x1E4F21480], (const void *)*MEMORY[0x1E4F21448], v7);
          if (!v19) {
            goto LABEL_24;
          }
          uint64_t v40 = v19;
        }
      }
    }
LABEL_364:
    APSLogErrorAt();
    goto LABEL_347;
  }
LABEL_24:
  uint64_t v20 = CMBaseObjectGetDerivedStorage();
  CFArrayRef v169 = 0;
  CFTypeRef v168 = 0;
  CFTypeRef v167 = 0;
  CFTypeRef v166 = 0;
  long long v21 = (void *)CFStringCreateF();
  CFAllocatorRef v22 = CFGetAllocator(a1);
  uint64_t v23 = CMBaseObjectGetDerivedStorage();
  CFArrayRef theArray = 0;
  CFArrayRef v170 = 0;
  CFMutableArrayRef v24 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  CFTypeRef v157 = a1;
  uint64_t v142 = v20;
  if (!v24) {
    goto LABEL_362;
  }
  uint64_t CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(void *)(v23 + 8));
  uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v26) {
    uint64_t v27 = v26;
  }
  else {
    uint64_t v27 = 0;
  }
  long long v28 = *(uint64_t (**)(uint64_t, __CFString *, CFAllocatorRef, CFArrayRef *))(v27 + 48);
  if (!v28)
  {
    uint64_t v40 = 4294954514;
LABEL_64:
    APSLogErrorAt();
    CFArrayRef v32 = 0;
    goto LABEL_252;
  }
  uint64_t v29 = v28(CMBaseObject, @"DisplayDescriptionArray", v22, &theArray);
  if (v29)
  {
    uint64_t v40 = v29;
    goto LABEL_64;
  }
  uint64_t v155 = v23;
  uint64_t v139 = v21;
  CFDictionaryRef theDict = v7;
  if (!theArray)
  {
    CFMutableArrayRef v44 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    if (v44)
    {
      CFArrayRef v32 = v44;
      int v42 = 0;
      CFIndex Count = 0;
LABEL_68:
      long long v43 = a1;
      goto LABEL_69;
    }
LABEL_362:
    APSLogErrorAt();
    CFArrayRef v32 = 0;
    uint64_t v40 = 4294950575;
    goto LABEL_252;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  CFMutableArrayRef v31 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  if (!v31) {
    goto LABEL_362;
  }
  CFArrayRef v32 = v31;
  if (Count < 1)
  {
    int v42 = 0;
    goto LABEL_68;
  }
  CFIndex v33 = 0;
  key = (void *)*MEMORY[0x1E4F211A0];
  CFTypeRef v160 = (void *)*MEMORY[0x1E4F211A8];
  do
  {
    uint64_t v34 = v32;
    ValueAtunsigned int Index = CFArrayGetValueAtIndex(theArray, v33);
    value[0] = 0;
    *(void *)&long long v198 = 0;
    *(void *)&long long v196 = 0;
    long long v36 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!v36)
    {
      uint64_t v40 = 4294895546;
      APSLogErrorAt();
      long long v41 = 0;
      goto LABEL_47;
    }
    uint64_t v37 = APEndpointDisplayDescriptionCopyProperty((uint64_t)ValueAtIndex, @"PhysicalSize", (uint64_t)v22, (uint64_t)&v198);
    if (v37)
    {
      uint64_t v40 = v37;
    }
    else
    {
      if ((void)v198) {
        CFDictionarySetValue(v36, key, (const void *)v198);
      }
      uint64_t v38 = APEndpointDisplayDescriptionCopyProperty((uint64_t)ValueAtIndex, @"PixelSize", (uint64_t)v22, (uint64_t)value);
      if (v38)
      {
        uint64_t v40 = v38;
      }
      else
      {
        if (value[0]) {
          CFDictionarySetValue(v36, v160, value[0]);
        }
        uint64_t v39 = APEndpointDisplayDescriptionCopyProperty((uint64_t)ValueAtIndex, @"ViewAreas", (uint64_t)v22, (uint64_t)&v196);
        if (!v39)
        {
          if (!(void)v196)
          {
            uint64_t v40 = 0;
            long long v41 = v36;
            long long v36 = 0;
            goto LABEL_47;
          }
          CFDictionarySetValue(v36, @"ViewAreas", (const void *)v196);
          uint64_t v40 = 0;
          long long v41 = v36;
          long long v36 = 0;
          goto LABEL_44;
        }
        uint64_t v40 = v39;
      }
    }
    APSLogErrorAt();
    long long v41 = 0;
LABEL_44:
    if ((void)v196) {
      CFRelease((CFTypeRef)v196);
    }
LABEL_47:
    if (value[0]) {
      CFRelease(value[0]);
    }
    if ((void)v198) {
      CFRelease((CFTypeRef)v198);
    }
    if (v36) {
      CFRelease(v36);
    }
    if (v40)
    {
      APSLogErrorAt();
      long long v21 = v139;
      uint64_t v20 = v142;
      CFArrayRef v32 = v34;
      goto LABEL_252;
    }
    CFArrayRef v32 = v34;
    CFArrayAppendValue(v34, v41);
    if (v41) {
      CFRelease(v41);
    }
    ++v33;
  }
  while (Count != v33);
  int v42 = 1;
  long long v43 = v157;
LABEL_69:
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (APCarPlay_CRFetchScaledDisplays((uint64_t)v32, (CFTypeRef *)&v170) || !v170)
  {
    CFMutableArrayRef v45 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    if (!v45)
    {
      APSLogErrorAt();
      uint64_t v40 = 4294950575;
      long long v21 = v139;
      uint64_t v7 = theDict;
      uint64_t v20 = v142;
      goto LABEL_252;
    }
    long long v46 = v45;
    if (v42)
    {
      CFIndex v47 = 0;
      do
      {
        long long v48 = CFArrayGetValueAtIndex(v32, v47);
        CFArrayAppendValue(v46, v48);
        ++v47;
      }
      while (Count != v47);
    }
    CFArrayRef v170 = v46;
    if (gLogCategory_APEndpointCarPlay <= 50
      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  CFArrayRef v127 = v32;
  if (!v42)
  {
LABEL_250:
    uint64_t v40 = 0;
    uint64_t v7 = theDict;
    uint64_t v20 = v142;
    *(void *)(v142 + 248) = v24;
    CFMutableArrayRef v24 = 0;
    long long v21 = v139;
    goto LABEL_251;
  }
  CFIndex v49 = 0;
  CFTypeRef v50 = (CFTypeRef)*MEMORY[0x1E4F1CFC8];
  CFTypeRef v51 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
  uint64_t v134 = (void *)*MEMORY[0x1E4F21200];
  BOOL v131 = (void *)*MEMORY[0x1E4F21208];
  int v133 = (void *)*MEMORY[0x1E4F211F8];
  uint64_t v132 = (void *)*MEMORY[0x1E4F21210];
  uint64_t v152 = (void *)*MEMORY[0x1E4F21178];
  int v128 = (void *)*MEMORY[0x1E4F211B0];
  uint64_t v147 = (void *)*MEMORY[0x1E4F21168];
  int v146 = (void *)*MEMORY[0x1E4F21198];
  uint64_t v145 = (void *)*MEMORY[0x1E4F211A0];
  int v144 = (void *)*MEMORY[0x1E4F211A8];
  int v143 = (void *)*MEMORY[0x1E4F211B8];
  uint64_t v151 = (void *)*MEMORY[0x1E4F21188];
  CGSize v154 = (CGSize)*MEMORY[0x1E4F1DB30];
  int v150 = (void *)*MEMORY[0x1E4F21180];
  unint64_t v129 = (void *)*MEMORY[0x1E4F21170];
  CFTypeRef v138 = (void *)*MEMORY[0x1E4F211E0];
  uint64_t v137 = (void *)*MEMORY[0x1E4F211D0];
  uint64_t v136 = (void *)*MEMORY[0x1E4F211F0];
  CMTimeValue v135 = (void *)*MEMORY[0x1E4F211E8];
  int v149 = (void *)*MEMORY[0x1E4F211C0];
  uint64_t v148 = (void *)*MEMORY[0x1E4F21160];
  uint64_t v130 = (void *)*MEMORY[0x1E4F21190];
  CFDictionaryRef v156 = v24;
  CFIndex v153 = Count;
  CFTypeRef v161 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
  while (2)
  {
    long long v52 = CFArrayGetValueAtIndex(theArray, v49);
    CFDictionaryRef v53 = (const __CFDictionary *)CFArrayGetValueAtIndex(v170, v49);
    uint64_t v54 = *(void *)(v155 + 8);
    unsigned int v207 = 0;
    CFTypeRef v205 = v50;
    CFTypeRef v206 = v50;
    CFTypeRef v203 = v50;
    CFTypeRef v204 = v50;
    CMTime v201 = 0;
    int v202 = 0;
    v200 = 0;
    long long v198 = 0u;
    unsigned long long v199 = 0u;
    long long v196 = 0u;
    unsigned long long v197 = 0u;
    long long v194 = 0u;
    CGSize v195 = (CGSize)0;
    CFDictionaryRef dict = 0;
    CGSize size = v154;
    CFTypeRef v191 = 0;
    CFArrayRef v190 = 0;
    CFTypeRef cf = 0;
    CFBooleanRef BOOLean = (CFBooleanRef)v50;
    CFBooleanRef v187 = (CFBooleanRef)v50;
    CFStringRef theString = 0;
    CFBooleanRef v185 = (CFBooleanRef)v50;
    uint64_t v55 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!v55 || (CFMutableArrayRef v56 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510])) == 0)
    {
      APSLogErrorAt();
      uint64_t v74 = 0;
      uint64_t v75 = 0;
      CFAllocatorRef v71 = 0;
      keya = 0;
      CFDictionaryRef DictionaryRepresentation = 0;
      int v83 = -71750;
LABEL_241:
      unsigned int v207 = v83;
      goto LABEL_182;
    }
    keya = v56;
    unsigned int v207 = APEndpointDisplayDescriptionCopyProperty((uint64_t)v52, @"SupportsKnobInput", (uint64_t)v22, (uint64_t)&v206);
    if (v207) {
      goto LABEL_239;
    }
    if (v206 == v51) {
      CFArrayAppendValue(keya, v134);
    }
    unsigned int v207 = APEndpointDisplayDescriptionCopyProperty((uint64_t)v52, @"SupportsLowFidelityTouch", (uint64_t)v22, (uint64_t)&v205);
    if (v207) {
      goto LABEL_239;
    }
    if (v205 == v51) {
      CFArrayAppendValue(keya, v131);
    }
    unsigned int v207 = APEndpointDisplayDescriptionCopyProperty((uint64_t)v52, @"SupportsHighFidelityTouch", (uint64_t)v22, (uint64_t)&v204);
    if (v207) {
      goto LABEL_239;
    }
    if (v204 == v51) {
      CFArrayAppendValue(keya, v133);
    }
    unsigned int v207 = APEndpointDisplayDescriptionCopyProperty((uint64_t)v52, @"SupportsTouchpadInput", (uint64_t)v22, (uint64_t)&v203);
    if (v207) {
      goto LABEL_239;
    }
    if (v203 == v51) {
      CFArrayAppendValue(keya, v132);
    }
    CFDictionarySetValue(v55, v152, keya);
    unsigned int v207 = APEndpointDisplayDescriptionCopyProperty((uint64_t)v52, @"PrimaryInputDevice", (uint64_t)v22, (uint64_t)&v191);
    if (v207) {
      goto LABEL_239;
    }
    int v57 = CFGetInt64();
    if (v207) {
      goto LABEL_101;
    }
    if (v57 == 1)
    {
      if (v204 == v161)
      {
        int v62 = v55;
        long long v63 = v128;
        uint64_t v64 = v133;
      }
      else
      {
        if (v205 != v161) {
          goto LABEL_101;
        }
        int v62 = v55;
        long long v63 = v128;
        uint64_t v64 = v131;
      }
      goto LABEL_231;
    }
    if (v57 == 2)
    {
      if (v203 != v161) {
        goto LABEL_154;
      }
      int v62 = v55;
      long long v63 = v128;
      uint64_t v64 = v132;
LABEL_231:
      CFDictionarySetValue(v62, v63, v64);
      goto LABEL_101;
    }
    if (v57 == 3 && v206 == v161)
    {
      int v62 = v55;
      long long v63 = v128;
      uint64_t v64 = v134;
      goto LABEL_231;
    }
LABEL_154:
    if (gLogCategory_APEndpointCarPlay <= 60
      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
LABEL_101:
    unsigned int v207 = APEndpointDisplayDescriptionCopyProperty((uint64_t)v52, @"UUID", (uint64_t)v22, (uint64_t)&v202);
    if (v207)
    {
      APSLogErrorAt();
      uint64_t v74 = 0;
      uint64_t v75 = 0;
      CFAllocatorRef v71 = 0;
      CFDictionaryRef DictionaryRepresentation = 0;
LABEL_152:
      CFTypeRef v51 = v161;
      goto LABEL_182;
    }
    if (v202) {
      CFDictionarySetValue(v55, v147, v202);
    }
    unsigned int v207 = APEndpointDisplayDescriptionCopyProperty((uint64_t)v52, @"MaxFPS", (uint64_t)v22, (uint64_t)&v201);
    CFTypeRef v51 = v161;
    if (v207) {
      goto LABEL_239;
    }
    if (v201) {
      CFDictionarySetValue(v55, v146, v201);
    }
    unsigned int v207 = APEndpointDisplayDescriptionCopyProperty((uint64_t)v52, @"PhysicalSize", (uint64_t)v22, (uint64_t)&dict);
    if (v207) {
      goto LABEL_239;
    }
    if (dict)
    {
      CFDictionarySetValue(v55, v145, dict);
      CGSizeMakeWithDictionaryRepresentation(dict, &size);
    }
    unsigned int v207 = APEndpointDisplayDescriptionCopyProperty((uint64_t)v52, @"PixelSize", (uint64_t)v22, (uint64_t)&v200);
    if (v207)
    {
LABEL_239:
      APSLogErrorAt();
      uint64_t v74 = 0;
      uint64_t v75 = 0;
      CFAllocatorRef v71 = 0;
      CFDictionaryRef DictionaryRepresentation = 0;
      goto LABEL_182;
    }
    if (!v200)
    {
      CFDictionaryRef DictionaryRepresentation = 0;
      if (v49) {
        goto LABEL_115;
      }
      goto LABEL_137;
    }
    LODWORD(v183) = 0;
    CFDictionarySetValue(v55, v144, v200);
    CGSizeMakeWithDictionaryRepresentation((CFDictionaryRef)v200, (CGSize *)&v199);
    CFDictionaryRef v58 = (const __CFDictionary *)CFDictionaryGetValue(v53, v144);
    CGSizeMakeWithDictionaryRepresentation(v58, (CGSize *)&v197);
    FigDisplayModes_ConvertNonSquarePixelSizeToSquarePixelSize();
    CFDictionaryRef DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v195);
    CFDictionarySetValue(v55, v143, DictionaryRepresentation);
    CFDictionarySetDouble();
    if (FigCFDictionaryGetInt32IfPresent()) {
      FigCFDictionarySetInt32();
    }
    if (!v49)
    {
LABEL_137:
      if (APSGetFBOPropertyInt64()) {
        uint64_t v65 = v161;
      }
      else {
        uint64_t v65 = v50;
      }
      CFDictionarySetValue(v55, v151, v65);
      if (APSGetFBOPropertyInt64()) {
        uint64_t v66 = v161;
      }
      else {
        uint64_t v66 = v50;
      }
      CFDictionarySetValue(v55, v150, v66);
      uint64_t v67 = APEndpointDescriptionGetCMBaseObject(v54);
      uint64_t v68 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v68) {
        uint64_t v69 = v68;
      }
      else {
        uint64_t v69 = 0;
      }
      uint64_t v70 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v69 + 48);
      if (v70)
      {
        unsigned int v207 = v70(v67, @"LimitedUIElements", 0, &cf);
        if (!v207)
        {
          CFAllocatorRef v71 = 0;
          CFTypeRef v72 = cf;
          if (cf)
          {
            uint64_t v73 = (const void **)MEMORY[0x1E4F21190];
            goto LABEL_166;
          }
LABEL_169:
          CFTypeRef v51 = v161;
          goto LABEL_170;
        }
      }
      else
      {
        unsigned int v207 = -12782;
      }
      APSLogErrorAt();
      uint64_t v74 = 0;
      uint64_t v75 = 0;
      CFAllocatorRef v71 = 0;
      goto LABEL_152;
    }
LABEL_115:
    unsigned int v207 = APEndpointDisplayDescriptionCopyProperty((uint64_t)v52, @"IsNightMode", (uint64_t)v22, (uint64_t)&BOOLean);
    if (v207) {
      goto LABEL_249;
    }
    CFTypeRef v59 = CFBooleanGetValue(BOOLean) ? v161 : v50;
    CFDictionarySetValue(v55, v151, v59);
    unsigned int v207 = APEndpointDisplayDescriptionCopyProperty((uint64_t)v52, @"IsLimitedUI", (uint64_t)v22, (uint64_t)&v187);
    if (v207) {
      goto LABEL_249;
    }
    CFTypeRef v60 = CFBooleanGetValue(v187) ? v161 : v50;
    CFDictionarySetValue(v55, v150, v60);
    unsigned int v207 = APEndpointDisplayDescriptionCopyProperty((uint64_t)v52, @"LimitedUIElements", (uint64_t)v22, (uint64_t)&cf);
    if (v207) {
      goto LABEL_249;
    }
    if (cf) {
      CFDictionarySetValue(v55, v130, cf);
    }
    unsigned int v207 = APEndpointDisplayDescriptionCopyProperty((uint64_t)v52, @"InitialUrl", (uint64_t)v22, (uint64_t)&theString);
    if (v207) {
      goto LABEL_249;
    }
    CFStringRef v61 = theString;
    if (theString) {
      goto LABEL_163;
    }
    if (gLogCategory_APEndpointCarPlay <= 50
      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    unsigned int v207 = APEndpointDisplayDescriptionCopyProperty((uint64_t)v52, @"Url", (uint64_t)v22, (uint64_t)&theString);
    if (v207)
    {
LABEL_249:
      APSLogErrorAt();
      uint64_t v74 = 0;
      uint64_t v75 = 0;
      CFAllocatorRef v71 = 0;
      goto LABEL_182;
    }
    CFStringRef v61 = theString;
    if (theString)
    {
LABEL_163:
      if (CFStringGetLength(v61) >= 1)
      {
        CFURLRef v76 = CFURLCreateWithString(0, theString, 0);
        if (v76)
        {
          CFTypeRef v72 = v76;
          CFDictionarySetValue(v55, v129, v76);
          uint64_t v73 = (const void **)MEMORY[0x1E4F21158];
          CFAllocatorRef v71 = v72;
LABEL_166:
          CFDictionarySetValue(v55, *v73, v72);
        }
        else
        {
          CFAllocatorRef v71 = 0;
        }
        goto LABEL_169;
      }
    }
    CFAllocatorRef v71 = 0;
LABEL_170:
    CFAllocatorRef v77 = CFGetAllocator(v43);
    uint64_t v75 = CFArrayCreateMutable(v77, 0, MEMORY[0x1E4F1D510]);
    if (!v75)
    {
      APSLogErrorAt();
      uint64_t v74 = 0;
      int v83 = -16721;
      goto LABEL_241;
    }
    APEndpointDisplayDescriptionCopyProperty((uint64_t)v52, @"ViewAreas", (uint64_t)v22, (uint64_t)&v190);
    if (!v190 || !CFArrayGetCount(v190))
    {
      long long v183 = 0u;
      unsigned long long v184 = 0u;
      memset(&v182, 0, sizeof(v182));
      CGSizeMakeWithDictionaryRepresentation((CFDictionaryRef)v200, (CGSize *)&v184);
      FigDisplayModes_ConvertNonSquarePixelSizeToSquarePixelSize();
      CFDictionaryRef v78 = CGRectCreateDictionaryRepresentation(v182);
      CFAllocatorRef v79 = CFGetAllocator(v43);
      CMTimeScale v80 = CFDictionaryCreateMutable(v79, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v80)
      {
        uint64_t v81 = v80;
        CFDictionarySetValue(v80, v138, v78);
        CFDictionarySetValue(v81, v137, v78);
        CFDictionarySetValue(v81, v136, v50);
        CFDictionarySetValue(v81, v135, v50);
        CFDictionarySetInt64();
        CFArrayAppendValue(v75, v81);
        CFRelease(v78);
        CFRelease(v81);
        long long v43 = v157;
        CFTypeRef v51 = v161;
        goto LABEL_177;
      }
      APSLogErrorAt();
      uint64_t v74 = 0;
      unsigned int v207 = -16721;
      long long v43 = v157;
      goto LABEL_152;
    }
    long long v183 = 0u;
    unsigned long long v184 = 0u;
    v182.origin.x = 0.0;
    *(void *)&v182.origin.y = &v182;
    *(void *)&v182.size.width = 0x2000000000;
    LODWORD(v182.size.height) = 0;
    CGSizeMakeWithDictionaryRepresentation((CFDictionaryRef)v200, (CGSize *)&v184);
    CFArrayGetCount(v190);
    value[0] = (void *)MEMORY[0x1E4F143A8];
    value[1] = (void *)0x40000000;
    value[2] = __carEndpoint_copyScreenInfoFromDisplayDescription_block_invoke;
    value[3] = &unk_1E6894938;
    long long v173 = v183;
    CGSize v174 = (CGSize)v184;
    value[4] = &v182;
    CFRange v175 = v43;
    CGSize v176 = size;
    long long v177 = v196;
    CGSize v178 = (CGSize)v197;
    long long v179 = v198;
    CGSize v180 = (CGSize)v199;
    CMTime v181 = v75;
    CFArrayApplyBlock();
    if (*(_DWORD *)(*(void *)&v182.origin.y + 24))
    {
      APSLogErrorAt();
      unsigned int v207 = -16720;
      _Block_object_dispose(&v182, 8);
      uint64_t v74 = 0;
      CFTypeRef v51 = v161;
    }
    else
    {
      _Block_object_dispose(&v182, 8);
      CFTypeRef v51 = v161;
LABEL_177:
      CFDictionarySetValue(v55, v149, v75);
      unsigned int v207 = APEndpointDisplayDescriptionCopyProperty((uint64_t)v52, @"cornerMasks", (uint64_t)v22, (uint64_t)&v185);
      if (v207)
      {
        APSLogErrorAt();
        uint64_t v74 = 0;
      }
      else
      {
        if (CFBooleanGetValue(v185)) {
          uint64_t v82 = v51;
        }
        else {
          uint64_t v82 = v50;
        }
        CFDictionarySetValue(v55, v148, v82);
        uint64_t v74 = v55;
        uint64_t v55 = 0;
      }
    }
LABEL_182:
    if (theString) {
      CFRelease(theString);
    }
    if (v71) {
      CFRelease(v71);
    }
    if (v187) {
      CFRelease(v187);
    }
    CFMutableArrayRef v24 = v156;
    if (BOOLean) {
      CFRelease(BOOLean);
    }
    if (cf) {
      CFRelease(cf);
    }
    if (v201) {
      CFRelease(v201);
    }
    if (v200) {
      CFRelease(v200);
    }
    if (DictionaryRepresentation) {
      CFRelease(DictionaryRepresentation);
    }
    if (dict) {
      CFRelease(dict);
    }
    if (v202) {
      CFRelease(v202);
    }
    if (v191) {
      CFRelease(v191);
    }
    if (v206) {
      CFRelease(v206);
    }
    if (v205) {
      CFRelease(v205);
    }
    if (v204) {
      CFRelease(v204);
    }
    if (v203) {
      CFRelease(v203);
    }
    if (keya) {
      CFRelease(keya);
    }
    if (v55) {
      CFRelease(v55);
    }
    if (v190) {
      CFRelease(v190);
    }
    if (v185) {
      CFRelease(v185);
    }
    if (v75) {
      CFRelease(v75);
    }
    uint64_t v40 = v207;
    if (!v207)
    {
      CFArrayAppendValue(v156, v74);
      if (v74) {
        CFRelease(v74);
      }
      if (v153 == ++v49) {
        goto LABEL_250;
      }
      continue;
    }
    break;
  }
  APSLogErrorAt();
  long long v21 = v139;
  uint64_t v7 = theDict;
  uint64_t v20 = v142;
LABEL_251:
  CFArrayRef v32 = v127;
LABEL_252:
  if (theArray) {
    CFRelease(theArray);
  }
  if (v24) {
    CFRelease(v24);
  }
  if (v32) {
    CFRelease(v32);
  }
  if (v170) {
    CFRelease(v170);
  }
  if (v40)
  {
LABEL_272:
    APSLogErrorAt();
    CFDictionaryRef v91 = 0;
    goto LABEL_334;
  }
  uint64_t v84 = APEndpointDescriptionGetCMBaseObject(*(void *)(v20 + 8));
  uint64_t v85 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v85) {
    uint64_t v86 = v85;
  }
  else {
    uint64_t v86 = 0;
  }
  int v87 = *(uint64_t (**)(uint64_t, __CFString *, void, CFArrayRef *))(v86 + 48);
  if (!v87)
  {
    uint64_t v40 = 4294954514;
    goto LABEL_272;
  }
  uint64_t v88 = v87(v84, @"DisplayDescriptionArray", *MEMORY[0x1E4F1CF80], &v169);
  if (v88)
  {
    uint64_t v40 = v88;
    goto LABEL_272;
  }
  if (!v169) {
    goto LABEL_328;
  }
  CFIndex v89 = CFArrayGetCount(v169);
  uint64_t v140 = v21;
  if (v89 >= 2)
  {
    if (*(unsigned char *)(v20 + 60)) {
      uint64_t v90 = v89;
    }
    else {
      uint64_t v90 = 1;
    }
    goto LABEL_275;
  }
  if (v89 == 1)
  {
    uint64_t v90 = 1;
LABEL_275:
    keyb = (void *)v90;
    CFIndex v92 = 0;
    uint64_t v93 = *MEMORY[0x1E4F213B0];
    uint64_t v162 = (void *)*MEMORY[0x1E4F21410];
    CFTypeRef v159 = (CFTypeRef)*MEMORY[0x1E4F20790];
    while (1)
    {
      LODWORD(v198) = 0;
      CFArrayRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v7);
      CFDictionaryRef v91 = MutableCopy;
      if (!MutableCopy) {
        break;
      }
      CFDictionarySetValue(MutableCopy, @"LogPrefix", v140);
      uint64_t v95 = CMBaseObjectGetDerivedStorage();
      value[0] = (void *)0x3FF0000000000000;
      CFIndex v96 = CFArrayGetCount(*(CFArrayRef *)(v95 + 248));
      if (v96 >= 1)
      {
        CFIndex v97 = v96;
        CFIndex v98 = 0;
        while (1)
        {
          CFArrayGetValueAtIndex(*(CFArrayRef *)(v95 + 248), v98);
          if (v92 == v98) {
            break;
          }
          if (v97 == ++v98) {
            goto LABEL_283;
          }
        }
        FigCFDictionaryGetDoubleIfPresent();
      }
LABEL_283:
      CFDictionarySetDouble();
      uint64_t v99 = CMBaseObjectGetDerivedStorage();
      CFIndex v100 = CFArrayGetCount(*(CFArrayRef *)(v99 + 248));
      if (v100 >= 1)
      {
        CFIndex v101 = v100;
        CFIndex v102 = 0;
        while (1)
        {
          CFArrayGetValueAtIndex(*(CFArrayRef *)(v99 + 248), v102);
          if (v92 == v102) {
            break;
          }
          if (v101 == ++v102) {
            goto LABEL_290;
          }
        }
        if (FigCFDictionaryGetInt32IfPresent()) {
          FigCFDictionarySetInt32();
        }
      }
LABEL_290:
      BOOL v103 = CFArrayGetValueAtIndex(v169, v92);
      CFAllocatorRef v104 = CFGetAllocator(v157);
      uint64_t v105 = APEndpointStreamScreenCreate(v104, v91, *(CFTypeRef *)(v142 + 16), *(void *)(v142 + 216), *(const void **)(v142 + 8), v103, *(const void **)(v142 + 232), &v166);
      if (v105)
      {
        uint64_t v40 = v105;
        goto LABEL_331;
      }
      carEndpoint_addEndpointStreamNotificationListeners();
      uint64_t v106 = FigEndpointStreamGetCMBaseObject();
      uint64_t v107 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v107) {
        uint64_t v108 = v107;
      }
      else {
        uint64_t v108 = 0;
      }
      int v109 = *(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(v108 + 48);
      if (!v109)
      {
        uint64_t v40 = 4294954514;
LABEL_331:
        APSLogErrorAt();
        goto LABEL_333;
      }
      uint64_t v110 = v109(v106, v93, 0, &v167);
      if (v110)
      {
        uint64_t v40 = v110;
        goto LABEL_331;
      }
      if (gLogCategory_APEndpointCarPlay <= 50
        && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (*(unsigned char *)(v142 + 59))
      {
        CFAllocatorRef v111 = CFGetAllocator(v157);
        *(void *)(v142 + 264) = CFDictionaryCreateMutable(v111, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        uint64_t v112 = FigEndpointStreamGetCMBaseObject();
        uint64_t v113 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v113) {
          uint64_t v114 = v113;
        }
        else {
          uint64_t v114 = 0;
        }
        int v115 = *(uint64_t (**)(uint64_t, void *, void, CFTypeRef *))(v114 + 48);
        if (!v115)
        {
          uint64_t v40 = 4294954514;
          goto LABEL_331;
        }
        uint64_t v116 = v115(v112, v162, 0, &v168);
        if (v116)
        {
          uint64_t v40 = v116;
          goto LABEL_331;
        }
        carEndpoint_postNotification(v157, v159, *(_DWORD *)(v142 + 204), v168);
      }
      if (FigCFEqual())
      {
        int v117 = 267386880;
        int v118 = 267386881;
      }
      else
      {
        if (!FigCFEqual())
        {
          uint64_t v40 = 4294960561;
          goto LABEL_333;
        }
        int v117 = 267386882;
        int v118 = 267386883;
      }
      if (*(unsigned char *)(v142 + 40)) {
        long long v119 = @"com.apple.airplay.car.wireless.sessionPercentageWithScreen";
      }
      else {
        long long v119 = @"com.apple.airplay.car.wired.sessionPercentageWithScreen";
      }
      long long v120 = (void *)APEndpointCarPlayStreamInfoCreate(v166, @"StreamInfo_Screen", v117, v118, v119);
      if (!v120) {
        break;
      }
      long long v121 = v120;
      v120[4] = v92;
      CFArrayAppendValue(*(CFMutableArrayRef *)(v142 + 240), v120);
      if (v92 && !*(unsigned char *)(v142 + 62))
      {
        CFTypeRef v122 = v166;
        uint64_t v123 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v124 = v123 ? v123 : 0;
        long long v125 = *(void (**)(CFTypeRef, void, void, void))(v124 + 16);
        if (v125) {
          v125(v122, 0, 0, 0);
        }
      }
      CFRelease(v91);
      if (v166)
      {
        CFRelease(v166);
        CFTypeRef v166 = 0;
      }
      CFRelease(v121);
      if (v167)
      {
        CFRelease(v167);
        CFTypeRef v167 = 0;
      }
      if ((void *)++v92 == keyb)
      {
        carEndpoint_updateDisplayCornerMasks();
        uint64_t v40 = 0;
        CFDictionaryRef v91 = 0;
        goto LABEL_333;
      }
    }
    APSLogErrorAt();
    uint64_t v40 = 4294950575;
LABEL_333:
    long long v21 = v140;
  }
  else
  {
LABEL_328:
    APSLogErrorAt();
    CFDictionaryRef v91 = 0;
    uint64_t v40 = 4294950536;
  }
LABEL_334:
  if (v21) {
    CFRelease(v21);
  }
  if (v91) {
    CFRelease(v91);
  }
  if (v166) {
    CFRelease(v166);
  }
  if (v167) {
    CFRelease(v167);
  }
  if (v168) {
    CFRelease(v168);
  }
  if (v169) {
    CFRelease(v169);
  }
  if (v40) {
    goto LABEL_364;
  }
LABEL_347:
  CFRelease(v7);
  return v40;
}

void carEndpoint_setupNotificationsAndInitialParametersForJarvis(uint64_t a1)
{
  uint64_t DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  carEndpoint_registerForGlobalNotification(a1, (uint64_t)"com.apple.coreaudio.BorealisToggled", (uint64_t)carEndpoint_handleJarvisParametersChangedNotification, (uint64_t)DerivedStorage + 396);
  carEndpoint_registerForGlobalNotification(a1, (uint64_t)"com.apple.corespeech.voicetriggerassetchange", (uint64_t)carEndpoint_handleJarvisParametersChangedNotification, (uint64_t)(DerivedStorage + 50));
  carEndpoint_registerForGlobalNotification(a1, (uint64_t)"com.apple.airplay.jarvisParametersChanged", (uint64_t)carEndpoint_handleJarvisParametersChangedNotification, (uint64_t)(DerivedStorage + 49));
  carEndpoint_registerForGlobalNotification(a1, (uint64_t)"com.apple.mobile.keybagd.first_unlock", (uint64_t)carEndpoint_handleJarvisParametersChangedNotification, (uint64_t)DerivedStorage + 404);
  carEndpoint_registerForGlobalNotification(a1, (uint64_t)kAPCarPlaySpringBoardStartNotificationKey, (uint64_t)carEndpoint_handleJarvisParametersChangedNotification, (uint64_t)(DerivedStorage + 51));
  uint64_t v3 = *DerivedStorage;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __carEndpoint_setupNotificationsAndInitialParametersForJarvis_block_invoke;
  block[3] = &__block_descriptor_tmp_756;
  void block[4] = a1;
  dispatch_async(v3, block);
}

void carEndpoint_postPerformanceReport(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v24 = 0;
  uint64_t v25 = &v24;
  uint64_t v26 = 0x2000000000;
  int v27 = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableDictionaryRef v4 = Mutable;
    if (gLogCategory_APEndpointCarPlay <= 50
      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      CFAllocatorRef v5 = CFGetAllocator(a1);
      int v6 = CFStringCreateMutable(v5, 0);
      uint64_t v7 = v6;
      if (v6) {
        CFStringAppendFormat(v6, 0, @"CarPlay Connection: AirPlay Timing Information For %@\n", *(void *)(DerivedStorage + 16));
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
    uint64_t v9 = *(void *)(DerivedStorage + 480);
    uint64_t v8 = *(void *)(DerivedStorage + 488);
    if (*(unsigned char *)(DerivedStorage + 40))
    {
      carEndpoint_addEventIntervalToPerformanceDictionaryAndLog(v8, 268427268, v9, 268304385, @"Total AirPlay Contribution (Endpoint Detected To Endpoint Activate Complete)", (uint64_t)v4, (uint64_t)v7);
      *(_DWORD *)(DerivedStorage + 428) = APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursive();
      uint64_t v10 = *(void *)(DerivedStorage + 488);
      int v11 = @"EndpointDetectedOverWiFiTime";
      uint64_t v12 = 268427268;
    }
    else
    {
      carEndpoint_addEventIntervalToPerformanceDictionaryAndLog(v8, 268427269, v9, 268304385, @"Total AirPlay Contribution (Endpoint Detected To Endpoint Activate Complete)", (uint64_t)v4, (uint64_t)v7);
      *(_DWORD *)(DerivedStorage + 428) = APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursive();
      uint64_t v10 = *(void *)(DerivedStorage + 488);
      int v11 = @"EndpointDetectedOverUSBTime";
      uint64_t v12 = 268427269;
    }
    carEndpoint_addEventToPerformanceDictionaryAndLog(v10, v12, (uint64_t)v11, (uint64_t)v4, (uint64_t)v7);
    carEndpoint_addEventToPerformanceDictionaryAndLog(*(void *)(DerivedStorage + 488), 268427275, @"CarPlayControlConnectCommandReceived", (uint64_t)v4, (uint64_t)v7);
    carEndpoint_addEventToPerformanceDictionaryAndLog(*(void *)(DerivedStorage + 480), 150994945, @"ResolveDNSTime", (uint64_t)v4, (uint64_t)v7);
    carEndpoint_addEventToPerformanceDictionaryAndLog(*(void *)(DerivedStorage + 488), 268427266, @"USBBrowsingStartTime", (uint64_t)v4, (uint64_t)v7);
    carEndpoint_addEventToPerformanceDictionaryAndLog(*(void *)(DerivedStorage + 488), 268427267, @"WiFiBrowsingStartTime", (uint64_t)v4, (uint64_t)v7);
    carEndpoint_addEventToPerformanceDictionaryAndLog(*(void *)(DerivedStorage + 480), 268304384, @"EndpointActivate", (uint64_t)v4, (uint64_t)v7);
    carEndpoint_addEventToPerformanceDictionaryAndLog(*(void *)(DerivedStorage + 480), 150994944, @"QuerySRVTime", (uint64_t)v4, (uint64_t)v7);
    carEndpoint_addEventToPerformanceDictionaryAndLog(*(void *)(DerivedStorage + 480), 150994946, @"ConnectTime", (uint64_t)v4, (uint64_t)v7);
    carEndpoint_addEventToPerformanceDictionaryAndLog(*(void *)(DerivedStorage + 480), 150994948, @"ConnectedTime", (uint64_t)v4, (uint64_t)v7);
    carEndpoint_addEventToPerformanceDictionaryAndLog(*(void *)(DerivedStorage + 480), 250609664, @"EndpointConnectionStartTime", (uint64_t)v4, (uint64_t)v7);
    carEndpoint_addEventToPerformanceDictionaryAndLog(*(void *)(DerivedStorage + 480), 250609668, @"EndpointGetInfoCompleteTime", (uint64_t)v4, (uint64_t)v7);
    carEndpoint_addEventIntervalToPerformanceDictionaryAndLog(*(void *)(DerivedStorage + 480), 250609667, *(void *)(DerivedStorage + 480), 250609668, @"INFOTimeMs", (uint64_t)v4, (uint64_t)v7);
    carEndpoint_addEventIntervalToPerformanceDictionaryAndLog(*(void *)(DerivedStorage + 480), 150994946, *(void *)(DerivedStorage + 480), 150994948, @"ConnectTimeMs", (uint64_t)v4, (uint64_t)v7);
    carEndpoint_addEventIntervalToPerformanceDictionaryAndLog(*(void *)(DerivedStorage + 480), 250609677, *(void *)(DerivedStorage + 480), 250609678, @"EndpointAUTHTimeMs", (uint64_t)v4, (uint64_t)v7);
    carEndpoint_addEventIntervalToPerformanceDictionaryAndLog(*(void *)(DerivedStorage + 480), 250609675, *(void *)(DerivedStorage + 480), 250609676, @"EndpointRECORDTimeMs", (uint64_t)v4, (uint64_t)v7);
    uint64_t TimeBetweenEventsInMilliSecondRecursive = APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursive();
    uint64_t v14 = APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursive() + TimeBetweenEventsInMilliSecondRecursive;
    uint64_t v15 = APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursive();
    uint64_t v16 = v14 + v15 + APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursive();
    uint64_t v17 = APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursive();
    carEndpoint_addIntervalToPerformanceDictionaryAndLog(v16 + v17, @"EndpointTotalSETUPTimeMs", (uint64_t)v4, (uint64_t)v7);
    if (*(void *)(DerivedStorage + 480)) {
      APSEventRecorderRecordEvent();
    }
    uint64_t v18 = LogCategoryCopyOSLogHandle();
    uint64_t v19 = (void *)v18;
    if (v18) {
      uint64_t v20 = v18;
    }
    else {
      uint64_t v20 = MEMORY[0x1E4F14500];
    }
    if (os_signpost_enabled(v20))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1D0945000, v20, OS_SIGNPOST_EVENT, 0x2B8D07E8uLL, "AP_SIGNPOST_CAR_SENT_STATISTICS", (const char *)&unk_1D0B9874E, buf, 2u);
    }
    if (v19) {
      os_release(v19);
    }
    if (gLogCategory_APEndpointCarPlay <= 50
      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    long long v21 = *(NSObject **)(DerivedStorage + 144);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __carEndpoint_postPerformanceReport_block_invoke;
    block[3] = &unk_1E68949A8;
    void block[4] = &v24;
    void block[5] = DerivedStorage;
    dispatch_sync(v21, block);
    carEndpoint_postNotification(a1, (const void *)*MEMORY[0x1E4F20760], *((_DWORD *)v25 + 6), v4);
    CFRelease(v4);
    if (v7) {
      CFRelease(v7);
    }
  }
  else
  {
    APSLogErrorAt();
  }
  _Block_object_dispose(&v24, 8);
}

void carEndpoint_powerLogActivation(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t MutableCopy = FigCFDictionaryCreateMutableCopy();
  if (MutableCopy)
  {
    int v6 = (__CFDictionary *)MutableCopy;
    unint64_t valuePtr = 0;
    uint64_t v7 = FigCFArrayCreateMutableCopy();
    if (v7)
    {
      uint64_t v8 = (const void *)v7;
      APSEventRecorderGetEventTime();
      unint64_t valuePtr = (unint64_t)v9;
      CFNumberRef v10 = CFNumberCreate(v4, kCFNumberSInt64Type, &valuePtr);
      if (v10)
      {
        CFNumberRef v11 = v10;
        CFDictionarySetValue(v6, @"SessionID", v10);
        uint64_t v12 = (const void *)*MEMORY[0x1E4F1CFD0];
        uint64_t v13 = (const void *)*MEMORY[0x1E4F1CFC8];
        if (a2) {
          uint64_t v14 = (const void *)*MEMORY[0x1E4F1CFD0];
        }
        else {
          uint64_t v14 = (const void *)*MEMORY[0x1E4F1CFC8];
        }
        CFDictionarySetValue(v6, @"Activated", v14);
        if (*(unsigned char *)(DerivedStorage + 40)) {
          uint64_t v15 = v12;
        }
        else {
          uint64_t v15 = v13;
        }
        CFDictionarySetValue(v6, @"Wireless", v15);
        PLLogRegisteredEvent();
        CFRelease(v11);
      }
      CFRelease(v8);
    }
    CFRelease(v6);
  }
}

void carEndpoint_AccumulateSignpostsAndSendToTimeStore()
{
  CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    carEndpoint_addSignPostTimeToDictionary();
    carEndpoint_addSignPostTimeToDictionary();
    carEndpoint_addSignPostTimeToDictionary();
    carEndpoint_addSignPostTimeToDictionary();
    carEndpoint_addSignPostTimeToDictionary();
    carEndpoint_addSignPostTimeToDictionary();
    carEndpoint_addSignPostTimeToDictionary();
    carEndpoint_addSignPostTimeToDictionary();
    carEndpoint_addSignPostTimeToDictionary();
    carEndpoint_addSignPostTimeToDictionary();
    carEndpoint_addSignPostTimeToDictionary();
    carEndpoint_addSignPostTimeToDictionary();
    carEndpoint_addSignPostTimeToDictionary();
    carEndpoint_addSignPostTimeToDictionary();
    carEndpoint_addSignPostTimeToDictionary();
    carEndpoint_addSignPostTimeToDictionary();
    carEndpoint_addSignPostTimeToDictionary();
    carEndpoint_addSignPostTimeToDictionary();
    carEndpoint_addSignPostTimeToDictionary();
    carEndpoint_addSignPostTimeToDictionary();
    carEndpoint_addSignPostTimeToDictionary();
    carEndpoint_addSignPostTimeToDictionary();
    carEndpoint_addSignPostTimeToDictionary();
    carEndpoint_addSignPostTimeToDictionary();
    carEndpoint_addSignPostTimeToDictionary();
    carEndpoint_addSignPostTimeToDictionary();
    carEndpoint_addSignPostTimeToDictionary();
    carEndpoint_addSignPostTimeToDictionary();
    carEndpoint_addSignPostTimeToDictionary();
    carEndpoint_addSignPostTimeToDictionary();
    if (!APCarPlay_AddSignPostTimeInfoToTimeStore(@"CARAirPlayConnectionTimeInfo", (uint64_t)Mutable))
    {
LABEL_8:
      CFRelease(Mutable);
      return;
    }
  }
  else
  {
    APSLogErrorAt();
  }
  if (gLogCategory_APEndpointCarPlay <= 90
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (Mutable) {
    goto LABEL_8;
  }
}

void __carEndpoint_activateInternal_block_invoke_2_133(uint64_t a1)
{
}

uint64_t __carEndpoint_activateInternal_block_invoke_3_138(uint64_t a1)
{
  uint64_t v11 = 0;
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = APCarPlayGetHeadUnitRestrictionsDictionary(&v11);
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    return APSLogErrorAt();
  }
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v3 = v11;
  uint64_t CMBaseObject = APEndpointDescriptionGetCMBaseObject(v2);
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v8 = *(void *)(VTable + 8);
  uint64_t result = VTable + 8;
  uint64_t v7 = v8;
  if (v8) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = 0;
  }
  CFNumberRef v10 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v9 + 56);
  if (v10) {
    return v10(CMBaseObject, @"HeadUnitRestrictions", v3);
  }
  return result;
}

void carEndpoint_takeActionOnModeChanges(const void *a1, _DWORD *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x3800000000;
  long long v13 = 0u;
  long long v14 = 0u;
  CFAllocatorRef v5 = *(NSObject **)(DerivedStorage + 144);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  v9[2] = __carEndpoint_takeActionOnModeChanges_block_invoke;
  v9[3] = &unk_1E6894120;
  v9[4] = &v10;
  v9[5] = DerivedStorage;
  v9[6] = a2;
  dispatch_sync(v5, v9);
  if (*(unsigned char *)(DerivedStorage + 57))
  {
    if ((*((_DWORD *)v11 + 10) != 1 || !*((_DWORD *)v11 + 11)) && a2[4] == 1 && a2[5]
      || *((_DWORD *)v11 + 12) != 2 && a2[6] == 2)
    {
      APCarPlayAVVCServerStatesIncompatibleWithAuxIn();
    }
    uint64_t v6 = CMBaseObjectGetDerivedStorage();
    if (*(unsigned char *)(v6 + 40) && !a2[6] && a2[4] == 2 && a2[5])
    {
      uint64_t v7 = v6;
      CFRetain(a1);
      uint64_t v8 = *(NSObject **)(v7 + 144);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __carEndpoint_resetBurstParamsIfSiriWakes_block_invoke;
      block[3] = &__block_descriptor_tmp_156_0;
      void block[4] = a1;
      void block[5] = v7;
      dispatch_async(v8, block);
    }
  }
  _Block_object_dispose(&v10, 8);
}

uint64_t carEndpoint_sendCommandInternal(const void *a1, const void *a2, const void *a3, char a4, NSObject *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v20 = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v12 = Mutable;
  if (!Mutable)
  {
    APSLogErrorAt();
    CFDataRef Data = 0;
LABEL_19:
    uint64_t v16 = 4294950575;
    goto LABEL_21;
  }
  CFDictionarySetValue(Mutable, @"type", a2);
  if (a3) {
    CFDictionarySetValue(v12, @"params", a3);
  }
  CFDataRef Data = CFPropertyListCreateData(0, v12, kCFPropertyListBinaryFormat_v1_0, 0, 0);
  if (!Data)
  {
    APSLogErrorAt();
    goto LABEL_19;
  }
  uint64_t BlockBufferWithCFDataNoCopy = FigCreateBlockBufferWithCFDataNoCopy();
  if (!BlockBufferWithCFDataNoCopy)
  {
    if (a5) {
      dispatch_retain(a5);
    }
    CFRetain(a1);
    CFRetain(v20);
    if (a2) {
      CFRetain(a2);
    }
    uint64_t v15 = *(NSObject **)(DerivedStorage + 472);
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 0x40000000;
    v18[2] = __carEndpoint_sendCommandInternal_block_invoke;
    v18[3] = &__block_descriptor_tmp_188;
    v18[4] = DerivedStorage;
    v18[5] = a1;
    v18[6] = a2;
    v18[7] = v20;
    char v19 = a4;
    v18[8] = Data;
    v18[9] = a5;
    dispatch_async(v15, v18);
    uint64_t v16 = 0;
LABEL_11:
    CFRelease(v12);
    goto LABEL_12;
  }
  uint64_t v16 = BlockBufferWithCFDataNoCopy;
  APSLogErrorAt();
LABEL_21:
  if (a5) {
    dispatch_semaphore_signal(a5);
  }
  if (v12) {
    goto LABEL_11;
  }
LABEL_12:
  if (Data) {
    CFRelease(Data);
  }
  if (v20) {
    CFRelease(v20);
  }
  return v16;
}

__n128 __carEndpoint_takeActionOnModeChanges_block_invoke(void *a1)
{
  uint64_t v1 = a1[5];
  uint64_t v2 = *(void *)(a1[4] + 8);
  long long v3 = *(_OWORD *)(v1 + 352);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(v1 + 368);
  *(_OWORD *)(v2 + 24) = v3;
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[6];
  __n128 result = *(__n128 *)v5;
  long long v7 = *(_OWORD *)(v5 + 16);
  *(_OWORD *)(v4 + 352) = *(_OWORD *)v5;
  *(_OWORD *)(v4 + 368) = v7;
  return result;
}

void __carEndpoint_resetBurstParamsIfSiriWakes_block_invoke(uint64_t a1)
{
  uint64_t StreamInfoForSubtype = carEndpoint_getStreamInfoForSubtype();
  if (StreamInfoForSubtype)
  {
    long long v3 = (const void *)StreamInfoForSubtype;
    CFRetain(*(CFTypeRef *)(a1 + 32));
    CFRetain(v3);
    uint64_t v4 = *(NSObject **)(*(void *)(a1 + 40) + 472);
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 0x40000000;
    v7[2] = __carEndpoint_resetBurstParamsIfSiriWakes_block_invoke_2;
    void v7[3] = &__block_descriptor_tmp_155;
    uint64_t v5 = *(void *)(a1 + 32);
    v7[4] = v3;
    v7[5] = v5;
    dispatch_async(v4, v7);
  }
  else
  {
    APSLogErrorAt();
  }
  uint64_t v6 = *(const void **)(a1 + 32);
  if (v6) {
    CFRelease(v6);
  }
}

uint64_t carEndpoint_getStreamInfoForSubtype()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7[0] = 0;
  v7[1] = v7;
  v7[2] = 0x2000000000;
  void v7[3] = 0;
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2000000000;
  uint64_t v6 = 0;
  if (*(void *)(DerivedStorage + 240))
  {
    CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 240));
    CFArrayApplyBlock();
    uint64_t v1 = v4[3];
  }
  else
  {
    uint64_t v1 = 0;
  }
  _Block_object_dispose(&v3, 8);
  _Block_object_dispose(v7, 8);
  return v1;
}

void __carEndpoint_resetBurstParamsIfSiriWakes_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(unsigned char **)(a1 + 32);
  if (!v2[48]
    || (carEndpoint_setParametersForJarvis(*(const void **)(a1 + 40), 1, 0, 0, 0), (uint64_t v2 = *(unsigned char **)(a1 + 32)) != 0))
  {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    CFRelease(v3);
  }
}

void carEndpoint_setParametersForJarvis(const void *a1, int a2, int a3, uint64_t a4, const void *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 57))
  {
    uint64_t v10 = DerivedStorage;
    CFAllocatorRef v11 = CFGetAllocator(a1);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      long long v13 = Mutable;
      CFAllocatorRef v14 = CFGetAllocator(a1);
      uint64_t v15 = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (a2)
      {
        CFDictionarySetInt64();
      }
      else
      {
        CFDictionarySetInt64();
        CFDictionarySetInt64();
        CFDictionarySetInt64();
        if (a3 == 1 && a5) {
          CFDictionarySetValue(v15, @"voiceModelLanguage", a5);
        }
      }
      CFDictionarySetValue(v13, @"enhancedSiriParameters", v15);
      uint64_t v16 = *(NSObject **)(v10 + 144);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __carEndpoint_setParametersForJarvis_block_invoke;
      block[3] = &__block_descriptor_tmp_177_0;
      void block[4] = v10;
      void block[5] = v13;
      char v18 = a2;
      void block[6] = v15;
      void block[7] = a1;
      dispatch_sync(v16, block);
      CFRelease(v13);
      if (v15) {
        CFRelease(v15);
      }
    }
    else
    {
      APSLogErrorAt();
    }
  }
}

uint64_t __carEndpoint_getStreamInfoForSubtype_block_invoke(uint64_t result, uint64_t a2)
{
  if (!*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24))
  {
    uint64_t v3 = (void *)result;
    uint64_t v13 = 0;
    CFAllocatorRef v4 = CFGetAllocator(*(CFTypeRef *)(result + 48));
    uint64_t CMBaseObject = FigEndpointStreamGetCMBaseObject();
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v8 = *(void *)(VTable + 8);
    __n128 result = VTable + 8;
    uint64_t v7 = v8;
    if (v8) {
      uint64_t v9 = v7;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(uint64_t (**)(uint64_t, void, CFAllocatorRef, uint64_t *))(v9 + 48);
    if (v10)
    {
      __n128 result = v10(CMBaseObject, *MEMORY[0x1E4F213B0], v4, &v13);
      if (!result)
      {
        __n128 result = FigCFEqual();
        if (result)
        {
          uint64_t v11 = *(void *)(v3[5] + 8);
          uint64_t v12 = *(void *)(v11 + 24);
          *(void *)(v11 + 24) = v12 + 1;
          if (v12 == v3[8]) {
            *(void *)(*(void *)(v3[4] + 8) + 24) = a2;
          }
        }
      }
    }
  }
  return result;
}

void __carEndpoint_setParametersForJarvis_block_invoke(uint64_t a1)
{
  uint64_t v14 = 0;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x2000000000;
  uint64_t v17 = 0;
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v2 + 152) || !*(_DWORD *)(v2 + 204) || !*(void *)(v2 + 216))
  {
    if (gLogCategory_APEndpointCarPlay > 60
      || gLogCategory_APEndpointCarPlay == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_22;
    }
    goto LABEL_4;
  }
  if (!*(unsigned char *)(a1 + 64))
  {
    uint64_t v7 = *(const void **)(v2 + 384);
    if (v7)
    {
      if (CFEqual(*(CFTypeRef *)(a1 + 48), v7))
      {
        if (gLogCategory_APEndpointCarPlay > 50
          || gLogCategory_APEndpointCarPlay == -1 && !_LogCategory_Initialize())
        {
          goto LABEL_22;
        }
LABEL_4:
        LogPrintF();
        goto LABEL_22;
      }
      uint64_t v2 = *(void *)(a1 + 32);
      uint64_t v11 = *(const void **)(v2 + 384);
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(const void **)(a1 + 48);
    *(void *)(v2 + 384) = v12;
    if (v12) {
      CFRetain(v12);
    }
    if (v11) {
      CFRelease(v11);
    }
  }
  uint64_t v3 = v15;
  uint64_t CMBaseObject = APSenderSessionGetCMBaseObject(*(void *)(*(void *)(a1 + 32) + 216));
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v8 = *(unsigned int (**)(uint64_t, __CFString *, void, uint64_t *))(v6 + 48);
  if (!v8 || v8(CMBaseObject, @"TransportControlStream", 0, v3 + 3))
  {
    APSLogErrorAt();
  }
  else
  {
    CFRetain(*(CFTypeRef *)(a1 + 40));
    uint64_t v9 = *(NSObject **)(*(void *)(a1 + 32) + 472);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __carEndpoint_setParametersForJarvis_block_invoke_2;
    block[3] = &unk_1E68941B0;
    uint64_t v10 = *(void *)(a1 + 40);
    void block[4] = &v14;
    void block[5] = v10;
    dispatch_async(v9, block);
  }
LABEL_22:
  _Block_object_dispose(&v14, 8);
}

void __carEndpoint_setParametersForJarvis_block_invoke_2(uint64_t a1)
{
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  APTransportStreamSendPlistMessage();
  uint64_t v2 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    CFRelease(v3);
  }
}

void __carEndpoint_sendCommandInternal_block_invoke(uint64_t a1)
{
  uint64_t v31 = 0;
  CFArrayRef v32 = &v31;
  uint64_t v33 = 0x2000000000;
  uint64_t v34 = 0;
  long long v30 = 0;
  v29.tv_sec = 0;
  *(void *)&v29.tv_usec = 0;
  if (carEndpoint_isDissociated(*(void *)(a1 + 32))) {
    goto LABEL_14;
  }
  if (gLogCategory_APEndpointCarPlay <= 20
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 144);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __carEndpoint_sendCommandInternal_block_invoke_2;
  block[3] = &unk_1E68941F8;
  void block[4] = &v31;
  void block[5] = v2;
  dispatch_sync(v3, block);
  uint64_t v4 = v32[3];
  if (!v4) {
    goto LABEL_40;
  }
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v6 = v5 ? v5 : 0;
  uint64_t v7 = *(unsigned int (**)(uint64_t))(v6 + 16);
  if (!v7 || !v7(v4))
  {
LABEL_14:
    LODWORD(v4) = 0;
    goto LABEL_40;
  }
  uint64_t CMBaseObject = APSenderSessionGetCMBaseObject(v32[3]);
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, __CFString *, void, const void **))(v10 + 48);
  if (!v11)
  {
    LODWORD(v4) = -12782;
LABEL_22:
    APSLogErrorAt();
    goto LABEL_40;
  }
  int v12 = v11(CMBaseObject, @"TransportControlStream", 0, &v30);
  if (v12)
  {
    LODWORD(v4) = v12;
    goto LABEL_22;
  }
  if (gLogCategory_APEndpointCarPlay <= 30
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  gettimeofday(&v29, 0);
  int v13 = *(unsigned __int8 *)(a1 + 80);
  uint64_t v14 = v30;
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v13)
  {
    if (v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    char v18 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v16 + 48);
    if (v18) {
      LODWORD(v4) = v18(v14, 1668246893, v4);
    }
    else {
      LODWORD(v4) = -12782;
    }
    uint64_t v19 = *(void *)(a1 + 40);
    uint64_t v20 = *(void *)(a1 + 48);
    CFDataGetLength(*(CFDataRef *)(a1 + 64));
    carEndpoint_sendCommandInfoAppend(v19, v20, (uint64_t)&v29);
    if (v4) {
      goto LABEL_22;
    }
  }
  else
  {
    if (v15) {
      uint64_t v17 = v15;
    }
    else {
      uint64_t v17 = 0;
    }
    long long v21 = *(uint64_t (**)(const void *, uint64_t, uint64_t, void))(v17 + 56);
    if (v21) {
      LODWORD(v4) = v21(v14, 1668246893, v4, 0);
    }
    else {
      LODWORD(v4) = -12782;
    }
    uint64_t v22 = *(void *)(a1 + 40);
    uint64_t v23 = *(void *)(a1 + 48);
    CFDataGetLength(*(CFDataRef *)(a1 + 64));
    carEndpoint_sendCommandInfoAppend(v22, v23, (uint64_t)&v29);
    if (v4) {
      goto LABEL_22;
    }
  }
LABEL_40:
  uint64_t v24 = *(NSObject **)(a1 + 72);
  if (v24)
  {
    dispatch_semaphore_signal(v24);
    dispatch_release(*(dispatch_object_t *)(a1 + 72));
  }
  uint64_t v25 = v30;
  if (v30 && v4)
  {
    if (gLogCategory_APEndpointCarPlay <= 90
      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    uint64_t v25 = v30;
  }
  if (v25) {
    CFRelease(v25);
  }
  uint64_t v26 = (const void *)v32[3];
  if (v26) {
    CFRelease(v26);
  }
  CFRelease(*(CFTypeRef *)(a1 + 56));
  int v27 = *(const void **)(a1 + 48);
  if (v27) {
    CFRelease(v27);
  }
  CFRelease(*(CFTypeRef *)(a1 + 40));
  _Block_object_dispose(&v31, 8);
}

CFTypeRef __carEndpoint_sendCommandInternal_block_invoke_2(uint64_t a1)
{
  CFTypeRef result = *(CFTypeRef *)(*(void *)(a1 + 40) + 216);
  if (result) {
    CFTypeRef result = CFRetain(result);
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void carEndpoint_sendCommandInfoAppend(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 504))
  {
    uint64_t v5 = DerivedStorage;
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFMutableDictionaryRef v8 = Mutable;
      v11.tv_sec = 0;
      *(void *)&v11.tv_usec = 0;
      gettimeofday(&v11, 0);
      uint64_t v9 = localtime((const time_t *)a3);
      snprintf(__str, 0x14uLL, "%02d:%02d:%02d.%d", v9->tm_hour, v9->tm_min, v9->tm_sec, *(_DWORD *)(a3 + 8));
      CFStringRef v10 = CFStringCreateWithCString(v6, __str, 0x8000100u);
      FigCFDictionarySetValue();
      FigCFDictionarySetDouble();
      FigCFDictionarySetValue();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      MEMORY[0x1D25EB370](*(void *)(v5 + 496));
      if (CFArrayGetCount(*(CFArrayRef *)(v5 + 504)) >= *(unsigned int *)(v5 + 512)) {
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v5 + 504), 0);
      }
      CFArrayAppendValue(*(CFMutableArrayRef *)(v5 + 504), v8);
      MEMORY[0x1D25EB390](*(void *)(v5 + 496));
      if (v10) {
        CFRelease(v10);
      }
      CFRelease(v8);
    }
  }
}

void __carEndpoint_configureAccessoryLogs_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    uint64_t v3 = Mutable;
    if (CFPreferencesGetAppBooleanValue(@"airPlayCarPlayReceiverLogs", @"com.apple.airplay", 0))
    {
      uint64_t v4 = carEndpoint_prepareAccessoryLogAction();
      CFDictionarySetValue(v3, @"LogAction", v4);
      if (gLogCategory_APEndpointCarPlay <= 50
        && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (v4) {
        CFRelease(v4);
      }
    }
    if (CFPreferencesGetAppBooleanValue(@"dpCarPlayReceiverLogs", @"com.apple.airplay", 0))
    {
      uint64_t v5 = carEndpoint_prepareAccessoryLogAction();
      CFDictionarySetValue(v3, @"DPLogAction", v5);
      if (gLogCategory_APEndpointCarPlay <= 50
        && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (v5) {
        CFRelease(v5);
      }
    }
    if (CFPreferencesGetAppBooleanValue(@"OEMCarPlayReceiverLogs", @"com.apple.airplay", 0))
    {
      CFAllocatorRef v6 = carEndpoint_prepareAccessoryLogAction();
      CFDictionarySetValue(v3, @"OEMLogAction", v6);
      if (gLogCategory_APEndpointCarPlay <= 50
        && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (v6) {
        CFRelease(v6);
      }
    }
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v15 = 0;
    if (gLogCategory_APEndpointCarPlay <= 30
      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CFMutableDictionaryRef v8 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v8)
    {
      uint64_t v9 = v8;
      CFDictionarySetValue(v8, @"params", v3);
      CFDataRef Data = CFPropertyListCreateData(0, v9, kCFPropertyListBinaryFormat_v1_0, 0, 0);
      if (Data)
      {
        CFDataRef v11 = Data;
        if (FigCreateBlockBufferWithCFDataNoCopy())
        {
          APSLogErrorAt();
        }
        else
        {
          int v12 = *(NSObject **)(DerivedStorage + 472);
          block[0] = MEMORY[0x1E4F143A8];
          block[1] = 0x40000000;
          block[2] = __carEndpoint_sendAccessoryLogRequest_block_invoke;
          block[3] = &__block_descriptor_tmp_260;
          void block[4] = DerivedStorage;
          void block[5] = v15;
          void block[6] = 0;
          void block[7] = v1;
          dispatch_sync(v12, block);
        }
        CFRelease(v9);
        CFRelease(v11);
        uint64_t v13 = v15;
        if (!v15) {
          goto LABEL_33;
        }
      }
      else
      {
        APSLogErrorAt();
        uint64_t v13 = v9;
      }
      CFRelease(v13);
    }
    else
    {
      APSLogErrorAt();
    }
LABEL_33:
    CFRelease(v3);
    return;
  }
  APSLogErrorAt();
}

__CFString *carEndpoint_prepareAccessoryLogAction()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  v4[0] = 0;
  APSSettingsGetCString();
  __strlcpy_chk();
  uint64_t v2 = CFStringCreateMutable(v0, 0);
  v5[0] = 0;
  APSSettingsGetCString();
  __strlcpy_chk();
  CFStringAppendFormat(v2, 0, @"%s", v5);
  CFStringAppendFormat(Mutable, 0, @"?%@:level=%s", v2, v4);
  if (v2) {
    CFRelease(v2);
  }
  return Mutable;
}

void __carEndpoint_sendAccessoryLogRequest_block_invoke(uint64_t *a1)
{
  uint64_t v22 = 0;
  uint64_t v23 = &v22;
  uint64_t v24 = 0x2000000000;
  uint64_t v25 = 0;
  CFTypeRef cf = 0;
  if (carEndpoint_isDissociated(a1[4])) {
    goto LABEL_24;
  }
  uint64_t v2 = a1[4];
  uint64_t v3 = *(NSObject **)(v2 + 144);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __carEndpoint_sendAccessoryLogRequest_block_invoke_2;
  block[3] = &unk_1E6894260;
  void block[4] = &v22;
  void block[5] = v2;
  dispatch_sync(v3, block);
  uint64_t v4 = v23[3];
  if (!v4) {
    goto LABEL_24;
  }
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v6 = v5 ? v5 : 0;
  uint64_t v7 = *(unsigned int (**)(uint64_t))(v6 + 16);
  if (!v7 || !v7(v4)) {
    goto LABEL_24;
  }
  uint64_t CMBaseObject = APSenderSessionGetCMBaseObject(v23[3]);
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v10 = v9 ? v9 : 0;
  CFDataRef v11 = *(unsigned int (**)(uint64_t, __CFString *, void, CFTypeRef *))(v10 + 48);
  if (v11 && !v11(CMBaseObject, @"TransportControlStream", 0, &cf))
  {
    CFTypeRef v12 = cf;
    uint64_t v13 = a1[5];
    uint64_t v14 = a1[6];
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v16 = v15 ? v15 : 0;
    uint64_t v17 = *(unsigned int (**)(CFTypeRef, uint64_t, uint64_t, uint64_t))(v16 + 56);
    if (v17)
    {
      if (!v17(v12, 1819240307, v13, v14)) {
        goto LABEL_24;
      }
    }
  }
  APSLogErrorAt();
  CFTypeRef v18 = cf;
  if (!cf) {
    goto LABEL_26;
  }
  if (gLogCategory_APEndpointCarPlay <= 90)
  {
    if (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()) {
      LogPrintF();
    }
LABEL_24:
    CFTypeRef v18 = cf;
    if (!cf) {
      goto LABEL_26;
    }
  }
  CFRelease(v18);
LABEL_26:
  uint64_t v19 = (const void *)v23[3];
  if (v19) {
    CFRelease(v19);
  }
  _Block_object_dispose(&v22, 8);
}

CFTypeRef __carEndpoint_sendAccessoryLogRequest_block_invoke_2(uint64_t a1)
{
  CFTypeRef result = *(CFTypeRef *)(*(void *)(a1 + 40) + 216);
  if (result) {
    CFTypeRef result = CFRetain(result);
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void __carEndpoint_postNotification_block_invoke(uint64_t a1)
{
  if (!carEndpoint_isDissociated(*(void *)(a1 + 32))
    || FigCFEqual()
    || *(_DWORD *)(a1 + 64) && FigCFEqual())
  {
    CFTypeRef v2 = *(CFTypeRef *)(a1 + 48);
    if (*(_DWORD *)(a1 + 64))
    {
      CFAllocatorRef v3 = CFGetAllocator(*(CFTypeRef *)(a1 + 56));
      if (v2) {
        CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v3, 0, *(CFDictionaryRef *)(a1 + 48));
      }
      else {
        CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      }
      CFTypeRef v2 = MutableCopy;
      FigCFDictionarySetInt64();
    }
    else if (v2)
    {
      CFTypeRef v2 = CFRetain(*(CFTypeRef *)(a1 + 48));
    }
    if (gLogCategory_APEndpointCarPlay <= 50
      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    if (v2) {
      CFRelease(v2);
    }
  }
  else if (gLogCategory_APEndpointCarPlay <= 50 {
         && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  }
  {
    LogPrintF();
  }
  uint64_t v5 = *(const void **)(a1 + 48);
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = *(const void **)(a1 + 40);
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = *(const void **)(a1 + 56);
  if (v7)
  {
    CFRelease(v7);
  }
}

uint64_t carEndpoint_handleEvent()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCarPlay <= 50)
  {
    if (gLogCategory_APEndpointCarPlay != -1) {
      return LogPrintF();
    }
    uint64_t result = _LogCategory_Initialize();
    if (result) {
      return LogPrintF();
    }
  }
  return result;
}

uint64_t carEndpoint_handleEventCreatingReply(uint64_t a1, int a2, uint64_t a3, const void *a4, void *a5)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (carEndpoint_isDissociated(DerivedStorage)) {
    return 4294950573;
  }
  if (a2 != 1668116068)
  {
    if (gLogCategory_APEndpointCarPlay <= 60
      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CFDictionaryRef v12 = 0;
    CFStringRef v17 = 0;
    goto LABEL_45;
  }
  uint64_t CFDataWithBlockBufferNoCopy = FigCreateCFDataWithBlockBufferNoCopy();
  if (CFDataWithBlockBufferNoCopy)
  {
    reuint64_t started = CFDataWithBlockBufferNoCopy;
    APSLogErrorAt();
    CFStringRef v17 = 0;
    CFDictionaryRef v12 = 0;
LABEL_95:
    CFDataRef Data = 0;
    goto LABEL_47;
  }
  CFDictionaryRef v11 = (const __CFDictionary *)CFPropertyListCreateWithData(0, 0, 0, 0, 0);
  CFDictionaryRef v12 = v11;
  if (!v11 || (CFTypeID v13 = CFGetTypeID(v11), v13 != CFDictionaryGetTypeID()))
  {
    APSLogErrorAt();
    CFStringRef v17 = 0;
    CFDataRef Data = 0;
    reuint64_t started = 4294950576;
    goto LABEL_47;
  }
  uint64_t v14 = CMBaseObjectGetDerivedStorage();
  uint64_t v54 = 0;
  uint64_t v55 = &v54;
  uint64_t v56 = 0x2000000000;
  int v57 = 0;
  CFStringRef v15 = (const __CFString *)CFDictionaryGetValue(v12, @"type");
  CFDictionaryGetTypeID();
  TypedCFDictionaryRef Value = CFDictionaryGetTypedValue();
  if (!v15)
  {
    APSLogErrorAt();
    CFStringRef v17 = 0;
    reuint64_t started = 4294950576;
    goto LABEL_29;
  }
  CFStringRef v17 = (const __CFString *)TypedValue;
  if (gLogCategory_APEndpointCarPlay <= 30
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (CFEqual(v15, @"forceKeyFrame"))
  {
    uint64_t v18 = CMBaseObjectGetDerivedStorage();
    *(void *)&long long v60 = 0;
    *((void *)&v60 + 1) = &v60;
    long long v61 = 0x2000000000uLL;
    CFStringGetTypeID();
    uint64_t v19 = CFDictionaryGetTypedValue();
    uint64_t v20 = *(NSObject **)(v18 + 144);
    *(void *)&long long block = MEMORY[0x1E4F143A8];
    *((void *)&block + 1) = 0x40000000;
    *(void *)&long long v66 = __carEndpoint_forceKeyFrame_block_invoke;
    *((void *)&v66 + 1) = &unk_1E68942F0;
    *(void *)&long long v67 = &v60;
    *((void *)&v67 + 1) = v19;
    *(void *)&long long v68 = a4;
    *((void *)&v68 + 1) = v18;
    dispatch_sync(v20, &block);
    uint64_t v21 = *(void *)(*((void *)&v60 + 1) + 24);
    if (v21)
    {
      reuint64_t started = APEndpointStreamScreenRestartBitstream(v21);
      if (restarted) {
        goto LABEL_106;
      }
      goto LABEL_24;
    }
    goto LABEL_99;
  }
  if (CFEqual(v15, @"hidSendReport"))
  {
    uint64_t v22 = CMBaseObjectGetDerivedStorage();
    *(void *)&long long v60 = 0;
    *((void *)&v60 + 1) = &v60;
    long long v61 = 0x2000000000uLL;
    uint64_t v23 = *(NSObject **)(v22 + 144);
    *(void *)&long long block = MEMORY[0x1E4F143A8];
    *((void *)&block + 1) = 0x40000000;
    *(void *)&long long v66 = __carEndpoint_sendHIDReport_block_invoke;
    *((void *)&v66 + 1) = &unk_1E6894318;
    *(void *)&long long v67 = &v60;
    *((void *)&v67 + 1) = v22;
    dispatch_sync(v23, &block);
    uint64_t v24 = *(void *)(*((void *)&v60 + 1) + 24);
    if (v24)
    {
      reuint64_t started = APHIDClientHandleHIDReport(v24);
      if (restarted) {
LABEL_106:
      }
        APSLogErrorAt();
LABEL_24:
      uint64_t v25 = *(const void **)(*((void *)&v60 + 1) + 24);
      if (v25) {
        CFRelease(v25);
      }
      _Block_object_dispose(&v60, 8);
      goto LABEL_27;
    }
LABEL_99:
    reuint64_t started = 0;
    goto LABEL_24;
  }
  if (CFEqual(v15, @"changeModes"))
  {
    uint64_t v41 = CMBaseObjectGetDerivedStorage();
    uint64_t v64 = 0;
    long long v63 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v60 = 0u;
    long long v79 = 0u;
    long long v80 = 0u;
    long long v77 = 0u;
    long long v78 = 0u;
    long long v75 = 0u;
    long long v76 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    long long block = 0u;
    long long v66 = 0u;
    memset(v59, 0, sizeof(v59));
    CMTimeValue value = 0;
    if (v17)
    {
      if (*(void *)(v41 + 464))
      {
        uint64_t v42 = APStarkModeChangeRequestMakeFromDictionary((uint64_t)v17, 1, (uint64_t)&v60);
        if (v42)
        {
          reuint64_t started = v42;
          APSLogErrorAt();
          CFStringRef v17 = 0;
          long long v43 = 0;
        }
        else
        {
          long long v43 = (void *)CFDictionaryCopyCString();
          if (gLogCategory_APEndpointCarPlay <= 50
            && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
          {
            APStarkModeChangeRequestToString(&v60, (uint64_t)&block);
            LogPrintF();
          }
          int v49 = FigStarkModeControllerRequestModeChange();
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          if (!Mutable)
          {
            APSLogErrorAt();
            CFStringRef v17 = 0;
            reuint64_t started = 4294950575;
            goto LABEL_78;
          }
          CFDictionarySetInt64();
          if (!v49)
          {
            uint64_t DictionaryRepresentation = APStarkModeCreateDictionaryRepresentation((uint64_t)v59, (__CFDictionary **)&value);
            if (DictionaryRepresentation)
            {
              reuint64_t started = DictionaryRepresentation;
              APSLogErrorAt();
              CFStringRef v17 = 0;
              goto LABEL_78;
            }
            if (value) {
              CFDictionarySetValue(Mutable, @"params", value);
            }
          }
          reuint64_t started = 0;
          CFStringRef v17 = (const __CFString *)Mutable;
        }
        CFMutableDictionaryRef Mutable = 0;
      }
      else
      {
        APSLogErrorAt();
        CFStringRef v17 = 0;
        long long v43 = 0;
        CFMutableDictionaryRef Mutable = 0;
        reuint64_t started = 4294949690;
      }
    }
    else
    {
      APSLogErrorAt();
      long long v43 = 0;
      CFMutableDictionaryRef Mutable = 0;
      reuint64_t started = 4294950576;
    }
LABEL_78:
    free(v43);
    if (value) {
      CFRelease(value);
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
LABEL_28:
    if (restarted)
    {
      APSLogErrorAt();
      if (v17)
      {
        CFRelease(v17);
LABEL_98:
        CFStringRef v17 = 0;
        goto LABEL_29;
      }
    }
    goto LABEL_29;
  }
  if (CFEqual(v15, @"iAPSendMessage"))
  {
    uint64_t v44 = CMBaseObjectGetDerivedStorage();
    *(void *)&long long v60 = 0;
    *((void *)&v60 + 1) = &v60;
    long long v61 = 0x2000000000uLL;
    if (!v17)
    {
      APSLogErrorAt();
      reuint64_t started = 4294950576;
      goto LABEL_24;
    }
    CFMutableArrayRef v45 = *(NSObject **)(v44 + 144);
    *(void *)&long long block = MEMORY[0x1E4F143A8];
    *((void *)&block + 1) = 0x40000000;
    *(void *)&long long v66 = __carEndpoint_sendiAPMessage_block_invoke;
    *((void *)&v66 + 1) = &unk_1E6894340;
    *(void *)&long long v67 = &v60;
    *((void *)&v67 + 1) = v44;
    dispatch_sync(v45, &block);
    if (!*(void *)(*((void *)&v60 + 1) + 24))
    {
      reuint64_t started = 4294954514;
      goto LABEL_24;
    }
    CFDataGetTypeID();
    uint64_t v46 = CFDictionaryGetTypedValue();
    if (!v46)
    {
      APSLogErrorAt();
      reuint64_t started = 4294954516;
      goto LABEL_24;
    }
    uint64_t v47 = v46;
    if (gLogCategory_APEndpointCarPlay <= 30
      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    reuint64_t started = APAccTransportClientEndpointForwardData(*(void *)(*((void *)&v60 + 1) + 24), v47);
    if (!restarted) {
      goto LABEL_24;
    }
    goto LABEL_106;
  }
  if (CFEqual(v15, @"requestSiri"))
  {
    uint64_t updated = carEndpoint_requestSiri(a4, (uint64_t)v17);
LABEL_105:
    reuint64_t started = updated;
LABEL_27:
    CFStringRef v17 = 0;
    goto LABEL_28;
  }
  if (CFEqual(v15, @"requestUI"))
  {
    uint64_t updated = carEndpoint_requestUI(a4, v17);
    goto LABEL_105;
  }
  if (CFEqual(v15, @"updateViewArea"))
  {
    uint64_t updated = carEndpoint_updateViewArea(a4, (const __CFDictionary *)v17);
    goto LABEL_105;
  }
  if (CFEqual(v15, @"setLimitedUI"))
  {
    uint64_t updated = carEndpoint_setLimitedUI(a4, (uint64_t)v17);
    goto LABEL_105;
  }
  if (CFEqual(v15, @"setNightMode"))
  {
    uint64_t updated = carEndpoint_setNightMode(a4, (uint64_t)v17);
    goto LABEL_105;
  }
  if (CFEqual(v15, @"updateVehicleInformation"))
  {
    uint64_t updated = carEndpoint_updateVehicleInformation(a4, (uint64_t)v17);
    goto LABEL_105;
  }
  uint64_t v52 = carEndpoint_validateRuntimeFeaturesWithAccessory((uint64_t)a4, v15, 0);
  if (v52)
  {
    reuint64_t started = v52;
    APSLogErrorAt();
    goto LABEL_98;
  }
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFDictionaryRef v53 = *(NSObject **)(v14 + 144);
  *(void *)&long long block = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 0x40000000;
  *(void *)&long long v66 = __carEndpoint_processEventCreatingResponse_block_invoke;
  *((void *)&v66 + 1) = &unk_1E68942C8;
  *(void *)&long long v67 = &v54;
  *((void *)&v67 + 1) = v14;
  dispatch_sync(v53, &block);
  carEndpoint_postNotification(a4, (const void *)*MEMORY[0x1E4F20780], *((_DWORD *)v55 + 6), v12);
  CFStringRef v17 = 0;
  reuint64_t started = 0;
LABEL_29:
  _Block_object_dispose(&v54, 8);
  CFDictionaryGetValue(v12, @"type");
  CFDataGetLength(0);
  uint64_t v26 = CMBaseObjectGetDerivedStorage();
  LODWORD(v60) = 0;
  LODWORD(v59[0]) = 0;
  LODWORD(v54) = 0;
  if (*(void *)(v26 + 520))
  {
    uint64_t v27 = v26;
    CFAllocatorRef v28 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef v29 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v29)
    {
      CFMutableDictionaryRef v30 = v29;
      double Current = CFAbsoluteTimeGetCurrent();
      CFArrayRef v32 = CFCalendarCreateWithIdentifier(v28, (CFCalendarIdentifier)*MEMORY[0x1E4F1D198]);
      uint64_t v33 = v32;
      if (v32)
      {
        CFCalendarDecomposeAbsoluteTime(v32, Current, "Hms", &v60, v59, &v54);
        int v34 = v60;
        int v35 = v59[0];
        int v36 = v54;
      }
      else
      {
        int v36 = 0;
        int v35 = 0;
        int v34 = 0;
      }
      snprintf((char *)&block, 0x14uLL, "%02d:%02d:%02d.%d", v34, v35, v36, (int)((Current - floor(Current)) * 1000000.0));
      CFStringRef v37 = CFStringCreateWithCString(v28, (const char *)&block, 0x8000100u);
      FigCFDictionarySetValue();
      FigCFDictionarySetValue();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      if (CFArrayGetCount(*(CFArrayRef *)(v27 + 520)) >= *(unsigned int *)(v27 + 528)) {
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v27 + 520), 0);
      }
      CFArrayAppendValue(*(CFMutableArrayRef *)(v27 + 520), v30);
      if (v37) {
        CFRelease(v37);
      }
      CFRelease(v30);
      if (v33) {
        CFRelease(v33);
      }
    }
  }
  if (restarted)
  {
    APSLogErrorAt();
    goto LABEL_95;
  }
  if (!v17)
  {
LABEL_45:
    CFDataRef Data = 0;
LABEL_46:
    reuint64_t started = 0;
    *a5 = 0;
    goto LABEL_47;
  }
  CFDataRef Data = CFPropertyListCreateData(0, v17, kCFPropertyListBinaryFormat_v1_0, 0, 0);
  if (!Data)
  {
    APSLogErrorAt();
    reuint64_t started = 4294950575;
    goto LABEL_47;
  }
  uint64_t BlockBufferWithCFDataNoCopy = FigCreateBlockBufferWithCFDataNoCopy();
  if (!BlockBufferWithCFDataNoCopy) {
    goto LABEL_46;
  }
  reuint64_t started = BlockBufferWithCFDataNoCopy;
  APSLogErrorAt();
LABEL_47:
  if (v12) {
    CFRelease(v12);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (Data) {
    CFRelease(Data);
  }
  return restarted;
}

void carEndpoint_handleSenderSessionConnected(uint64_t a1, const void *a2)
{
  if (gLogCategory_APEndpointCarPlay <= 30
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  carEndpoint_handleConnectedStateChanged(a2);
}

void carEndpoint_handleSenderSessionDisconnected(uint64_t a1, const void *a2)
{
  if (gLogCategory_APEndpointCarPlay <= 30
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  carEndpoint_handleConnectedStateChanged(a2);
}

void carEndpoint_handleSenderSessionStarted(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2000000000;
  int v9 = 0;
  if (gLogCategory_APEndpointCarPlay <= 30
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v4 = *(NSObject **)(DerivedStorage + 144);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __carEndpoint_handleSenderSessionStarted_block_invoke;
  block[3] = &unk_1E6894690;
  void block[5] = DerivedStorage;
  void block[6] = a2;
  void block[4] = &v6;
  dispatch_sync(v4, block);
  carEndpoint_postNotification(a2, (const void *)*MEMORY[0x1E4F206D8], *((_DWORD *)v7 + 6), 0);
  carEndpoint_postNotification(a2, (const void *)*MEMORY[0x1E4F206E8], *((_DWORD *)v7 + 6), 0);
  _Block_object_dispose(&v6, 8);
}

void carEndpoint_handleSenderSessionFailed(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCarPlay <= 30
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  int Int64 = CFDictionaryGetInt64();
  uint64_t v5 = *(NSObject **)(DerivedStorage + 144);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __carEndpoint_handleSenderSessionFailed_block_invoke;
  block[3] = &__block_descriptor_tmp_477;
  int v7 = Int64;
  void block[4] = a2;
  void block[5] = DerivedStorage;
  dispatch_sync(v5, block);
}

void carEndpoint_getMetrics(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v19 = 0;
  uint64_t v20 = &v19;
  uint64_t v21 = 0x2000000000;
  uint64_t v22 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = &v15;
  uint64_t v17 = 0x2000000000;
  uint64_t v18 = 0;
  if (a5)
  {
    uint64_t v8 = DerivedStorage;
    CFTypeID v9 = CFGetTypeID(a5);
    if (v9 == CFDictionaryGetTypeID())
    {
      CFArrayGetTypeID();
      v16[3] = CFDictionaryGetTypedValue();
      unint64_t Value = (unint64_t)CFDictionaryGetValue((CFDictionaryRef)a5, @"statsDictionary");
      v20[3] = Value;
      unint64_t v11 = v16[3];
      if (v11 | Value)
      {
        if (a2)
        {
          CFRetain(a2);
          unint64_t v11 = v16[3];
        }
        if (v11) {
          CFRetain((CFTypeRef)v11);
        }
        CFDictionaryRef v12 = (const void *)v20[3];
        if (v12) {
          CFRetain(v12);
        }
        CFTypeID v13 = *(NSObject **)(v8 + 144);
        v14[0] = MEMORY[0x1E4F143A8];
        v14[1] = 0x40000000;
        v14[2] = __carEndpoint_getMetrics_block_invoke;
        v14[3] = &unk_1E68946D8;
        v14[4] = &v15;
        v14[5] = &v19;
        v14[6] = a2;
        v14[7] = v8;
        dispatch_async(v13, v14);
      }
    }
  }
  _Block_object_dispose(&v15, 8);
  _Block_object_dispose(&v19, 8);
}

void carEndpoint_teardownSenderSession(uint64_t a1, uint64_t a2, int a3)
{
  if (a2)
  {
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    int v7 = *(void (**)(uint64_t, void, void, void, void))(v6 + 96);
    if (v7) {
      v7(a2, 0, 0, 0, 0);
    }
    if (a3)
    {
      uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v9 = v8 ? v8 : 0;
      uint64_t v10 = *(void (**)(uint64_t))(v9 + 80);
      if (v10) {
        v10(a2);
      }
    }
    uint64_t CMBaseObject = APSenderSessionGetCMBaseObject(a2);
    if (CMBaseObject)
    {
      uint64_t v12 = CMBaseObject;
      uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v14 = v13 ? v13 : 0;
      uint64_t v15 = *(void (**)(uint64_t))(v14 + 24);
      if (v15) {
        v15(v12);
      }
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    uint64_t v16 = APSenderSessionGetCMBaseObject(a2);
    uint64_t v17 = *(void **)(CMBaseObjectGetVTable() + 8);
    if (v17) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    if (*v18 >= 2uLL)
    {
      uint64_t v19 = (void (*)(uint64_t))v18[8];
      if (v19)
      {
        v19(v16);
      }
    }
  }
}

uint64_t carEndpoint_requestSiri(const void *a1, uint64_t a2)
{
  v41[5] = *MEMORY[0x1E4F143B8];
  uint64_t v36 = 0;
  CFStringRef v37 = &v36;
  uint64_t v38 = 0x2000000000;
  int v39 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v32 = 0;
  uint64_t v33 = &v32;
  uint64_t v34 = 0x2000000000;
  uint64_t v35 = 0;
  uint64_t v28 = 0;
  CFMutableDictionaryRef v29 = &v28;
  uint64_t v30 = 0x2000000000;
  int v31 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = &v24;
  uint64_t v26 = 0x2000000000;
  char v27 = 0;
  if (!a2)
  {
    APSLogErrorAt();
    *((_DWORD *)v37 + 6) = -16720;
    goto LABEL_24;
  }
  uint64_t v5 = DerivedStorage;
  int Int64 = CFDictionaryGetInt64();
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  int v7 = *(NSObject **)(v5 + 144);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __carEndpoint_requestSiri_block_invoke;
  block[3] = &unk_1E6894368;
  int v23 = Int64;
  void block[4] = &v36;
  void block[5] = &v28;
  void block[8] = a1;
  void block[9] = v5;
  void block[6] = &v24;
  void block[7] = &v32;
  void block[10] = a2;
  dispatch_sync(v7, block);
  if (!*((_DWORD *)v37 + 6))
  {
    int v8 = *((unsigned __int8 *)v25 + 24);
    uint64_t v9 = v33[3];
    CMBaseObjectGetDerivedStorage();
    if ((Int64 - 5) < 0xFFFFFFFC)
    {
      int v20 = -16720;
    }
    else
    {
      if (Int64 == 4 && !v8)
      {
        CFDictionaryRef v12 = 0;
        *((_DWORD *)v37 + 6) = 0;
        if (*((unsigned char *)v25 + 24))
        {
LABEL_16:
          carEndpoint_postNotification(a1, (const void *)*MEMORY[0x1E4F206F8], *((_DWORD *)v29 + 6), v12);
          if (!v12) {
            goto LABEL_24;
          }
          goto LABEL_23;
        }
        goto LABEL_19;
      }
      CFAllocatorRef v10 = CFGetAllocator(a1);
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v10, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      values = Mutable;
      if (Mutable)
      {
        CFDictionaryRef v12 = Mutable;
        uint64_t v13 = *MEMORY[0x1E4F21270];
        v41[0] = @"Invalid";
        v41[1] = v13;
        uint64_t v14 = *MEMORY[0x1E4F21268];
        v41[2] = *MEMORY[0x1E4F21260];
        v41[3] = v14;
        uint64_t v15 = (const void *)*MEMORY[0x1E4F21280];
        v41[4] = *MEMORY[0x1E4F21278];
        CFDictionarySetValue(Mutable, v15, (const void *)v41[Int64]);
        if (v9)
        {
          CFAbsoluteTimeGetCurrent();
          mach_absolute_time();
          UpTicksToSecondsF();
          CFDictionarySetDouble();
        }
        if (!v8
          || (CFDictionaryRef v12 = CFDictionaryCreate(0, MEMORY[0x1E4F20400], (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) != 0)
        {
          *((_DWORD *)v37 + 6) = 0;
          if (*((unsigned char *)v25 + 24)) {
            goto LABEL_16;
          }
          if (Int64 != 4)
          {
            carEndpoint_postNotification(a1, (const void *)*MEMORY[0x1E4F20770], *((_DWORD *)v29 + 6), v12);
LABEL_23:
            CFRelease(v12);
            goto LABEL_24;
          }
LABEL_19:
          uint64_t v16 = *(NSObject **)(v5 + 144);
          v21[0] = MEMORY[0x1E4F143A8];
          v21[1] = 0x40000000;
          v21[2] = __carEndpoint_requestSiri_block_invoke_2;
          v21[3] = &__block_descriptor_tmp_327;
          v21[4] = v5;
          dispatch_sync(v16, v21);
          int v17 = APCarPlayInitiateJarvisProcessing((uint64_t)a1, v33[3], (void (*)(uint64_t, void))carEndpoint_jarvisInitiationComplete);
          *((_DWORD *)v37 + 6) = v17;
          if (v17)
          {
            APSLogErrorAt();
            if (!v12) {
              goto LABEL_24;
            }
          }
          else if (!v12)
          {
            goto LABEL_24;
          }
          goto LABEL_23;
        }
        int v20 = -16721;
      }
      else
      {
        int v20 = -6728;
      }
    }
    APSLogErrorAt();
    *((_DWORD *)v37 + 6) = v20;
    APSLogErrorAt();
  }
LABEL_24:
  uint64_t v18 = *((unsigned int *)v37 + 6);
  _Block_object_dispose(&v24, 8);
  _Block_object_dispose(&v28, 8);
  _Block_object_dispose(&v32, 8);
  _Block_object_dispose(&v36, 8);
  return v18;
}

uint64_t carEndpoint_requestUI(const void *a1, const __CFString *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v13 = 0;
  uint64_t v14 = &v13;
  uint64_t v15 = 0x2000000000;
  int v16 = 0;
  if (a2)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable)
    {
      APSLogErrorAt();
      uint64_t v10 = 4294950575;
      goto LABEL_18;
    }
    uint64_t v6 = Mutable;
    CFStringGetTypeID();
    Typedunint64_t Value = (const __CFString *)CFDictionaryGetTypedValue();
    a2 = TypedValue;
    if (TypedValue && CFStringGetLength(TypedValue) >= 1)
    {
      CFURLRef v8 = CFURLCreateWithString(0, a2, 0);
      if (v8) {
        CFDictionarySetValue(v6, (const void *)*MEMORY[0x1E4F215A8], v8);
      }
    }
    else
    {
      CFURLRef v8 = 0;
    }
  }
  else
  {
    CFURLRef v8 = 0;
    uint64_t v6 = 0;
  }
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v9 = *(NSObject **)(DerivedStorage + 144);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __carEndpoint_requestUI_block_invoke;
  block[3] = &unk_1E68943D0;
  void block[4] = &v13;
  void block[5] = DerivedStorage;
  dispatch_sync(v9, block);
  carEndpoint_postNotification(a1, (const void *)*MEMORY[0x1E4F207B0], *((_DWORD *)v14 + 6), v6);
  carEndpoint_recordRequestUI((uint64_t)a1, a2, 1);
  if (v8) {
    CFRelease(v8);
  }
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v10 = 0;
LABEL_18:
  _Block_object_dispose(&v13, 8);
  return v10;
}

uint64_t carEndpoint_updateViewArea(const void *a1, const __CFDictionary *a2)
{
  unsigned int v20 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v16 = 0;
  int v17 = &v16;
  uint64_t v18 = 0x2000000000;
  int v19 = 0;
  if (!*(unsigned char *)(DerivedStorage + 59))
  {
    APSLogErrorAt();
    int v14 = -16726;
LABEL_19:
    unsigned int v20 = v14;
    goto LABEL_13;
  }
  if (!a2) {
    goto LABEL_18;
  }
  uint64_t v5 = DerivedStorage;
  unint64_t Value = CFDictionaryGetValue(a2, @"uuid");
  if (!Value) {
    goto LABEL_18;
  }
  int v7 = Value;
  uint64_t Int64 = CFDictionaryGetInt64();
  if (v20)
  {
LABEL_20:
    APSLogErrorAt();
    goto LABEL_13;
  }
  CFArrayRef v9 = (const __CFArray *)CFDictionaryGetValue(a2, @"adjacentViewAreas");
  if (!v9)
  {
LABEL_18:
    APSLogErrorAt();
    int v14 = -16720;
    goto LABEL_19;
  }
  CFArrayRef v10 = v9;
  CFDictionaryGetInt64();
  if (v20) {
    goto LABEL_20;
  }
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  unsigned int v20 = carEndpoint_validateViewAreaParams((uint64_t)a1, v7, Int64, v10);
  if (v20) {
    goto LABEL_20;
  }
  unint64_t v11 = *(NSObject **)(v5 + 144);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __carEndpoint_updateViewArea_block_invoke;
  block[3] = &unk_1E6894578;
  void block[6] = v7;
  void block[7] = a2;
  void block[8] = v5;
  void block[4] = &v16;
  void block[5] = a1;
  dispatch_sync(v11, block);
  carEndpoint_postNotification(a1, (const void *)*MEMORY[0x1E4F20790], *((_DWORD *)v17 + 6), a2);
LABEL_13:
  uint64_t v12 = v20;
  _Block_object_dispose(&v16, 8);
  return v12;
}

uint64_t carEndpoint_setLimitedUI(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v21 = 0;
  uint64_t v22 = &v21;
  uint64_t v23 = 0x2000000000;
  int v24 = 0;
  if (a2)
  {
    uint64_t v5 = DerivedStorage;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      int v7 = Mutable;
      uint64_t v8 = carEndpoint_copyMainDisplayUuid();
      if (v8)
      {
        CFStringRef v9 = (const __CFString *)v8;
        CFStringGetTypeID();
        Typedunint64_t Value = (const __CFString *)CFDictionaryGetTypedValue();
        if (TypedValue && (CFStringRef v11 = TypedValue, CFStringGetLength(TypedValue)) && !FigCFEqual())
        {
          char v12 = 0;
        }
        else
        {
          char v12 = 1;
          CFStringRef v11 = v9;
        }
        CFDictionarySetValue(v7, (const void *)*MEMORY[0x1E4F205B0], v11);
        uint64_t Int64 = CFDictionaryGetInt64();
        int v14 = (const void **)MEMORY[0x1E4F1CFD0];
        if (!Int64) {
          int v14 = (const void **)MEMORY[0x1E4F1CFC8];
        }
        CFDictionarySetValue(v7, (const void *)*MEMORY[0x1E4F205B8], *v14);
        uint64_t v15 = *(NSObject **)(v5 + 144);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 0x40000000;
        block[2] = __carEndpoint_setLimitedUI_block_invoke;
        block[3] = &unk_1E68945C8;
        char v19 = v12;
        BOOL v20 = Int64 != 0;
        void block[4] = &v21;
        void block[5] = v5;
        dispatch_sync(v15, block);
        carEndpoint_postNotification(a1, (const void *)*MEMORY[0x1E4F20748], *((_DWORD *)v22 + 6), v7);
        if (gLogCategory_APEndpointCarPlay <= 50
          && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        CFRelease(v9);
        uint64_t v16 = 0;
      }
      else
      {
        APSLogErrorAt();
        uint64_t v16 = 4294950576;
      }
      CFRelease(v7);
    }
    else
    {
      APSLogErrorAt();
      uint64_t v16 = 4294950575;
    }
  }
  else
  {
    APSLogErrorAt();
    uint64_t v16 = 4294950576;
  }
  _Block_object_dispose(&v21, 8);
  return v16;
}

uint64_t carEndpoint_setNightMode(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v21 = 0;
  uint64_t v22 = &v21;
  uint64_t v23 = 0x2000000000;
  int v24 = 0;
  if (a2)
  {
    uint64_t v5 = DerivedStorage;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      int v7 = Mutable;
      uint64_t v8 = carEndpoint_copyMainDisplayUuid();
      if (v8)
      {
        CFStringRef v9 = (const __CFString *)v8;
        CFStringGetTypeID();
        Typedunint64_t Value = (const __CFString *)CFDictionaryGetTypedValue();
        if (TypedValue && (CFStringRef v11 = TypedValue, CFStringGetLength(TypedValue)) && !FigCFEqual())
        {
          char v12 = 0;
        }
        else
        {
          char v12 = 1;
          CFStringRef v11 = v9;
        }
        CFDictionarySetValue(v7, (const void *)*MEMORY[0x1E4F20668], v11);
        uint64_t Int64 = CFDictionaryGetInt64();
        int v14 = (const void **)MEMORY[0x1E4F1CFD0];
        if (!Int64) {
          int v14 = (const void **)MEMORY[0x1E4F1CFC8];
        }
        CFDictionarySetValue(v7, (const void *)*MEMORY[0x1E4F20670], *v14);
        uint64_t v15 = *(NSObject **)(v5 + 144);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 0x40000000;
        block[2] = __carEndpoint_setNightMode_block_invoke;
        block[3] = &unk_1E6894618;
        char v19 = v12;
        BOOL v20 = Int64 != 0;
        void block[4] = &v21;
        void block[5] = v5;
        dispatch_sync(v15, block);
        carEndpoint_postNotification(a1, (const void *)*MEMORY[0x1E4F20758], *((_DWORD *)v22 + 6), v7);
        if (gLogCategory_APEndpointCarPlay <= 50
          && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        CFRelease(v9);
        uint64_t v16 = 0;
      }
      else
      {
        APSLogErrorAt();
        uint64_t v16 = 4294950576;
      }
      CFRelease(v7);
    }
    else
    {
      APSLogErrorAt();
      uint64_t v16 = 4294950575;
    }
  }
  else
  {
    APSLogErrorAt();
    uint64_t v16 = 4294950576;
  }
  _Block_object_dispose(&v21, 8);
  return v16;
}

uint64_t carEndpoint_updateVehicleInformation(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  values = 0;
  uint64_t v11 = 0;
  char v12 = &v11;
  uint64_t v13 = 0x2000000000;
  int v14 = 0;
  if (a2 && (uint64_t v5 = DerivedStorage, CFDictionaryGetTypeID(), (values = (void *)CFDictionaryGetTypedValue()) != 0))
  {
    CFDictionaryRef v6 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], MEMORY[0x1E4F21590], (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    int v7 = *(NSObject **)(v5 + 144);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __carEndpoint_updateVehicleInformation_block_invoke;
    block[3] = &unk_1E6894640;
    void block[6] = values;
    void block[7] = a1;
    void block[4] = &v11;
    void block[5] = v5;
    dispatch_sync(v7, block);
    carEndpoint_postNotification(a1, (const void *)*MEMORY[0x1E4F20788], *((_DWORD *)v12 + 6), v6);
    if (v6) {
      CFRelease(v6);
    }
    uint64_t v8 = 0;
  }
  else
  {
    APSLogErrorAt();
    uint64_t v8 = 4294950576;
  }
  _Block_object_dispose(&v11, 8);
  return v8;
}

uint64_t carEndpoint_validateRuntimeFeaturesWithAccessory(uint64_t a1, const __CFString *a2, int a3)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (CFStringCompare(a2, @"suggestUI", 0) && CFStringCompare(a2, @"showUI", 0))
  {
    if (CFStringCompare(a2, @"changeUIContext", 0))
    {
      if (CFStringCompare(a2, @"deviceOfferFocus", 0)
        && CFStringCompare(a2, @"accessoryAcquireFocus", 0)
        && CFStringCompare(a2, @"accessoryGiveFocus", 0)
        || DerivedStorage[63])
      {
        return 0;
      }
    }
    else if (DerivedStorage[61])
    {
      return 0;
    }
  }
  else if (DerivedStorage[60])
  {
    return 0;
  }
  if (a3)
  {
    if (gLogCategory_APEndpointCarPlay > 90) {
      return 4294950576;
    }
    if (gLogCategory_APEndpointCarPlay == -1)
    {
      uint64_t v6 = 4294950576;
      if (!_LogCategory_Initialize()) {
        return v6;
      }
    }
    else
    {
      uint64_t v6 = 4294950576;
    }
LABEL_21:
    LogPrintF();
    return v6;
  }
  if (gLogCategory_APEndpointCarPlay <= 90)
  {
    if (gLogCategory_APEndpointCarPlay == -1)
    {
      uint64_t v6 = 0;
      if (!_LogCategory_Initialize()) {
        return v6;
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    goto LABEL_21;
  }
  return 0;
}

uint64_t __carEndpoint_processEventCreatingResponse_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_DWORD *)(*(void *)(result + 40) + 204);
  return result;
}

uint64_t __carEndpoint_forceKeyFrame_block_invoke(void *a1)
{
  uint64_t result = a1[5];
  if (result && (uint64_t result = CFStringGetLength((CFStringRef)result), result >= 1))
  {
    *(void *)(*(void *)(a1[4] + 8) + 24) = carEndpoint_getScreenStreamForDisplayUUID();
    uint64_t result = *(void *)(*(void *)(a1[4] + 8) + 24);
    if (result)
    {
      return (uint64_t)CFRetain((CFTypeRef)result);
    }
  }
  else if (*(void *)(a1[7] + 240))
  {
    uint64_t result = carEndpoint_getStreamInfoForSubtype();
    if (result)
    {
      uint64_t result = *(void *)(result + 16);
      if (result) {
        uint64_t result = (uint64_t)CFRetain((CFTypeRef)result);
      }
      *(void *)(*(void *)(a1[4] + 8) + 24) = result;
    }
  }
  return result;
}

CFTypeRef __carEndpoint_sendHIDReport_block_invoke(uint64_t a1)
{
  CFTypeRef result = *(CFTypeRef *)(*(void *)(a1 + 40) + 272);
  if (result) {
    CFTypeRef result = CFRetain(result);
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

CFTypeRef __carEndpoint_sendiAPMessage_block_invoke(uint64_t a1)
{
  CFTypeRef result = *(CFTypeRef *)(*(void *)(a1 + 40) + 288);
  if (result) {
    CFTypeRef result = CFRetain(result);
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t __carEndpoint_requestSiri_block_invoke(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 88);
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(result + 152) || (uint64_t v4 = result, !*(_DWORD *)(result + 204)))
  {
    int v6 = -16723;
    goto LABEL_21;
  }
  if (v2 != 4)
  {
LABEL_13:
    int v6 = 0;
    goto LABEL_21;
  }
  if (!*(unsigned char *)(result + 57)) {
    goto LABEL_35;
  }
  uint64_t result = CFDictionaryGetInt64();
  if (!result)
  {
    if (gLogCategory_APEndpointCarPlay <= 60)
    {
      if (gLogCategory_APEndpointCarPlay != -1 || (uint64_t result = _LogCategory_Initialize(), result)) {
        uint64_t result = LogPrintF();
      }
    }
    goto LABEL_18;
  }
  if (result == -1)
  {
LABEL_35:
    uint64_t result = APSLogErrorAt();
LABEL_18:
    int v6 = -16726;
    goto LABEL_21;
  }
  int v5 = *(_DWORD *)(v4 + 368);
  if ((v5 != 1 || !*(_DWORD *)(v4 + 372)) && !*(unsigned char *)(v4 + 424)) {
    goto LABEL_13;
  }
  if (gLogCategory_APEndpointCarPlay <= 50)
  {
    if (gLogCategory_APEndpointCarPlay != -1 || (uint64_t result = _LogCategory_Initialize(), result)) {
      uint64_t result = LogPrintF();
    }
  }
  int v6 = -16727;
LABEL_21:
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v6;
  if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v7 = *(void *)(a1 + 72);
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = *(_DWORD *)(v7 + 204);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = *(unsigned char *)(v7 + 412);
    unsigned int v8 = *(_DWORD *)(a1 + 88);
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t result = CFDictionaryGetInt64();
    if (result) {
      uint64_t result = APSNetworkClockNTPConvertNTPToUpTicks();
    }
    if (v8 <= 4 && ((1 << v8) & 0x16) != 0 && !*(void *)(DerivedStorage + 416))
    {
      if (gLogCategory_APEndpointCarPlay <= 50)
      {
        if (gLogCategory_APEndpointCarPlay != -1 || (uint64_t result = _LogCategory_Initialize(), result))
        {
          mach_absolute_time();
          mach_absolute_time();
          UpTicksToMilliseconds();
          uint64_t result = LogPrintF();
        }
      }
      *(void *)(DerivedStorage + 416) = 0;
    }
    *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 0;
  }
  return result;
}

uint64_t __carEndpoint_requestSiri_block_invoke_2(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 424) = 1;
  return result;
}

void carEndpoint_jarvisInitiationComplete(uint64_t a1, char a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(NSObject **)(DerivedStorage + 144);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = __carEndpoint_jarvisInitiationComplete_block_invoke;
  void v5[3] = &__block_descriptor_tmp_339;
  v5[4] = DerivedStorage;
  char v6 = a2;
  dispatch_async(v4, v5);
}

uint64_t __carEndpoint_jarvisInitiationComplete_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  *(unsigned char *)(v1 + 424) = 0;
  if (!*(unsigned char *)(result + 40)) {
    *(void *)(v1 + 416) = 0;
  }
  return result;
}

uint64_t __carEndpoint_requestUI_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_DWORD *)(*(void *)(result + 40) + 204);
  return result;
}

void carEndpoint_recordRequestUI(uint64_t a1, const __CFString *a2, int a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = 0;
  unsigned int v8 = (CFStringRef *)off_1E6894400;
  do
  {
    if (*((unsigned __int8 *)v8 - 16) == a3
      && FigCFEqual()
      && (((0x740uLL >> v7) & 1) != 0 || a2 && !(unint64_t)CFStringFind(a2, *v8, 1uLL).location))
    {
      CFStringRef v9 = *(NSObject **)(DerivedStorage + 144);
      v10[0] = MEMORY[0x1E4F143A8];
      v10[1] = 0x40000000;
      v10[2] = __carEndpoint_recordRequestUI_block_invoke;
      _OWORD v10[3] = &__block_descriptor_tmp_378;
      v10[4] = DerivedStorage;
      v10[5] = a1;
      v10[6] = v7;
      char v11 = a3;
      dispatch_sync(v9, v10);
      return;
    }
    v8 += 4;
    ++v7;
  }
  while (v7 != 11);
  APSLogErrorAt();
}

uint64_t __carEndpoint_recordRequestUI_block_invoke(uint64_t result)
{
  if (*(void *)(*(void *)(result + 32) + 240))
  {
    uint64_t v1 = result;
    uint64_t result = carEndpoint_getStreamInfoForSubtype();
    if (result)
    {
      int v2 = (_DWORD *)result;
      if (*(unsigned char *)(v1 + 56)) {
        ++*(_DWORD *)(result + 68);
      }
      else {
        ++*(_DWORD *)(result + 104);
      }
      uint64_t result = FigCFEqual();
      if (result)
      {
        ++v2[18];
      }
      else
      {
        uint64_t result = FigCFEqual();
        if (result)
        {
          ++v2[19];
        }
        else
        {
          uint64_t result = FigCFEqual();
          if (result)
          {
            ++v2[20];
          }
          else
          {
            uint64_t result = FigCFEqual();
            if (result)
            {
              ++v2[21];
            }
            else
            {
              uint64_t result = FigCFEqual();
              if (result)
              {
                ++v2[22];
              }
              else
              {
                uint64_t result = FigCFEqual();
                if (result)
                {
                  ++v2[23];
                }
                else
                {
                  uint64_t result = FigCFEqual();
                  if (result)
                  {
                    ++v2[24];
                  }
                  else
                  {
                    uint64_t result = FigCFEqual();
                    if (result)
                    {
                      ++v2[25];
                    }
                    else
                    {
                      uint64_t result = FigCFEqual();
                      if (result)
                      {
                        ++v2[27];
                      }
                      else
                      {
                        uint64_t result = FigCFEqual();
                        if (result)
                        {
                          ++v2[28];
                        }
                        else
                        {
                          uint64_t result = FigCFEqual();
                          if (result) {
                            ++v2[29];
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t carEndpoint_validateViewAreaParams(uint64_t a1, const void *a2, uint64_t a3, const __CFArray *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 248));
  if (Count < 1)
  {
LABEL_5:
    CFIndex v14 = 0;
  }
  else
  {
    CFIndex v9 = Count;
    CFIndex v10 = 0;
    char v11 = (const void *)*MEMORY[0x1E4F21168];
    while (1)
    {
      ValueAtunsigned int Index = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 248), v10);
      unint64_t Value = CFDictionaryGetValue(ValueAtIndex, v11);
      if (CFEqual(a2, Value)) {
        break;
      }
      if (v9 == ++v10) {
        goto LABEL_5;
      }
    }
    CFArrayRef v15 = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E4F211C0]);
    CFIndex v14 = CFArrayGetCount(v15);
  }
  if (a3 >= 1 && v14 <= a3)
  {
    APSLogErrorAt();
    return 4294950576;
  }
  else if (a4)
  {
    uint64_t v17 = 0;
    uint64_t v18 = &v17;
    uint64_t v19 = 0x2000000000;
    int v20 = 0;
    CFArrayGetCount(a4);
    CFArrayApplyBlock();
    a4 = (const __CFArray *)*((unsigned int *)v18 + 6);
    if (a4) {
      APSLogErrorAt();
    }
    _Block_object_dispose(&v17, 8);
  }
  return (uint64_t)a4;
}

void __carEndpoint_updateViewArea_block_invoke(uint64_t a1)
{
  if (carEndpoint_getScreenStreamForDisplayUUID())
  {
    uint64_t v2 = *(void *)(a1 + 56);
    uint64_t CMBaseObject = FigEndpointStreamGetCMBaseObject();
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v5 = v4 ? v4 : 0;
    char v6 = *(void (**)(uint64_t, void, uint64_t))(v5 + 56);
    if (v6) {
      v6(CMBaseObject, *MEMORY[0x1E4F21410], v2);
    }
  }
  uint64_t v7 = *(void *)(a1 + 64);
  unsigned int v8 = *(__CFDictionary **)(v7 + 264);
  if (v8)
  {
    CFDictionarySetValue(v8, *(const void **)(a1 + 48), *(const void **)(a1 + 56));
    uint64_t v7 = *(void *)(a1 + 64);
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(_DWORD *)(v7 + 204);
}

uint64_t __carEndpoint_validateViewAreaParams_block_invoke(uint64_t result)
{
  if (!*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24))
  {
    uint64_t v1 = result;
    uint64_t result = CFGetInt64();
    uint64_t v2 = *(void *)(*(void *)(v1 + 32) + 8);
    if (result >= *(void *)(v1 + 40) || *(_DWORD *)(v2 + 24)) {
      *(_DWORD *)(v2 + 24) = -16720;
    }
  }
  return result;
}

uint64_t carEndpoint_copyMainDisplayUuid()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = 0;
  char v6 = &v5;
  uint64_t v7 = 0x2000000000;
  uint64_t v8 = 0;
  uint64_t v1 = *(NSObject **)(DerivedStorage + 144);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = __carEndpoint_copyMainDisplayUuid_block_invoke;
  uint64_t v4[3] = &unk_1E68945F0;
  v4[4] = &v5;
  v4[5] = DerivedStorage;
  dispatch_sync(v1, v4);
  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t __carEndpoint_setLimitedUI_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  if (*(unsigned char *)(result + 48)) {
    *(unsigned char *)(v1 + 305) = *(unsigned char *)(result + 49);
  }
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_DWORD *)(v1 + 204);
  return result;
}

CFArrayRef __carEndpoint_copyMainDisplayUuid_block_invoke(uint64_t a1)
{
  CFArrayRef result = *(const __CFArray **)(*(void *)(a1 + 40) + 248);
  if (result)
  {
    CFArrayRef result = (const __CFArray *)CFArrayGetValueAtIndex(result, 0);
    if (result)
    {
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFDictionaryGetValue(result, (const void *)*MEMORY[0x1E4F21168]);
      CFArrayRef result = *(const __CFArray **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      if (result)
      {
        return (const __CFArray *)CFRetain(result);
      }
    }
  }
  return result;
}

uint64_t __carEndpoint_setNightMode_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  if (*(unsigned char *)(result + 48)) {
    *(unsigned char *)(v1 + 306) = *(unsigned char *)(result + 49);
  }
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_DWORD *)(v1 + 204);
  return result;
}

void __carEndpoint_updateVehicleInformation_block_invoke(void *a1)
{
  uint64_t v3 = a1[5];
  uint64_t v2 = (const void *)a1[6];
  uint64_t v4 = *(const void **)(v3 + 312);
  *(void *)(v3 + 312) = v2;
  if (v2) {
    CFRetain(v2);
  }
  if (v4) {
    CFRelease(v4);
  }
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = *(_DWORD *)(a1[5] + 204);
}

void carEndpoint_handleConnectedStateChanged(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v9 = 0;
  CFIndex v10 = &v9;
  uint64_t v11 = 0x2000000000;
  int v12 = 0;
  int isEndpointConnected = carEndpoint_isEndpointConnected();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v5 = Mutable;
  char v6 = (const void **)MEMORY[0x1E4F1CFC8];
  if (isEndpointConnected) {
    char v6 = (const void **)MEMORY[0x1E4F1CFD0];
  }
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F20690], *v6);
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v7 = *(NSObject **)(DerivedStorage + 144);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __carEndpoint_handleConnectedStateChanged_block_invoke;
  block[3] = &unk_1E6894668;
  void block[4] = &v9;
  void block[5] = DerivedStorage;
  dispatch_sync(v7, block);
  carEndpoint_postNotification(a1, (const void *)*MEMORY[0x1E4F20708], *((_DWORD *)v10 + 6), v5);
  if (v5) {
    CFRelease(v5);
  }
  _Block_object_dispose(&v9, 8);
}

uint64_t __carEndpoint_handleConnectedStateChanged_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_DWORD *)(*(void *)(result + 40) + 204);
  return result;
}

uint64_t __carEndpoint_handleSenderSessionStarted_block_invoke(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 40);
  if (*(_DWORD *)(v2 + 212))
  {
    if (gLogCategory_APEndpointCarPlay <= 90)
    {
      if (gLogCategory_APEndpointCarPlay != -1
        || (result = _LogCategory_Initialize(), uint64_t v2 = *(void *)(v1 + 40), result))
      {
        CFArrayRef result = LogPrintF();
        uint64_t v2 = *(void *)(v1 + 40);
      }
    }
  }
  *(unsigned char *)(v2 + 224) = 1;
  *(_DWORD *)(*(void *)(*(void *)(v1 + 32) + 8) + 24) = *(_DWORD *)(v2 + 204);
  return result;
}

void __carEndpoint_handleSenderSessionFailed_block_invoke(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 40) + 224) = 0;
}

void carEndpoint_updateErrorStatusIfNotSet(const void *a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v5 = DerivedStorage;
    if (!*(unsigned char *)(DerivedStorage + 152))
    {
      if (!*(_DWORD *)(DerivedStorage + 212)) {
        *(_DWORD *)(DerivedStorage + 212) = a2;
      }
      if (a2 != -16603 || *(unsigned char *)(DerivedStorage + 40))
      {
        CFAllocatorRef v6 = CFGetAllocator(a1);
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        CFDictionarySetInt64();
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F206A0], (const void *)*MEMORY[0x1E4F20680]);
        carEndpoint_postNotification(a1, (const void *)*MEMORY[0x1E4F20730], *(_DWORD *)(v5 + 204), Mutable);
        if (Mutable)
        {
          CFRelease(Mutable);
        }
      }
      else
      {
        if (gLogCategory_APEndpointCarPlay <= 30
          && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        uint64_t v8 = *(void *)(v5 + 216);
        if (v8)
        {
          uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v9) {
            uint64_t v10 = v9;
          }
          else {
            uint64_t v10 = 0;
          }
          uint64_t v11 = *(void (**)(uint64_t, void, void, void, void))(v10 + 96);
          if (v11) {
            v11(v8, 0, 0, 0, 0);
          }
          uint64_t CMBaseObject = APSenderSessionGetCMBaseObject(*(void *)(v5 + 216));
          if (CMBaseObject)
          {
            uint64_t v13 = CMBaseObject;
            uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
            uint64_t v15 = v14 ? v14 : 0;
            uint64_t v16 = *(void (**)(uint64_t))(v15 + 24);
            if (v16)
            {
              v16(v13);
            }
          }
        }
      }
    }
  }
}

void __carEndpoint_getMetrics_block_invoke(uint64_t a1)
{
  CFArrayRef v2 = *(const __CFArray **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v2
    && CFArrayGetCount(v2) >= 1
    && gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    uint64_t v3 = *(const void **)(a1 + 48);
    CMBaseObjectGetDerivedStorage();
    uint64_t v29 = 0;
    CFTypeRef cf = 0;
    if (!carEndpoint_getStreamInfoForSubtype()) {
      goto LABEL_23;
    }
    CFAllocatorRef v4 = CFGetAllocator(v3);
    uint64_t CMBaseObject = FigEndpointStreamGetCMBaseObject();
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v7 = v6 ? v6 : 0;
    if ((uint64_t v8 = *(unsigned int (**)(uint64_t, __CFString *, CFAllocatorRef, CFTypeRef *))(v7 + 48)) != 0
      && !v8(CMBaseObject, @"AudioInputStatistics", v4, &cf)
      && ((CFAllocatorRef v9 = CFGetAllocator(v3),
           uint64_t v10 = FigEndpointStreamGetCMBaseObject(),
           (uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8)) == 0)
        ? (uint64_t v12 = 0)
        : (uint64_t v12 = v11),
          (uint64_t v13 = *(unsigned int (**)(uint64_t, __CFString *, CFAllocatorRef, uint64_t *))(v12 + 48)) != 0
       && !v13(v10, @"ConnectionID", v9, &v29)))
    {
      if (!cf)
      {
        CFMutableDictionaryRef MutableCopy = 0;
LABEL_32:
        CFDictionaryApplyFunction(*(CFDictionaryRef *)(*(void *)(*(void *)(a1 + 40) + 8) + 24), (CFDictionaryApplierFunction)carEndpoint_collectStreamAnalyticsFromStats, *(void **)(a1 + 48));
        CFDictionaryRef v19 = *(const __CFDictionary **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
        unint64_t Value = (void *)CFDictionaryGetValue(v19, @"showTime");
        if (Value) {
          CFDictionaryApplyFunction(v19, (CFDictionaryApplierFunction)carEndpoint_logStreamStats, Value);
        }
        uint64_t v21 = *(void **)(a1 + 56);
        uint64_t v22 = v21[41];
        if (v22)
        {
          uint64_t v23 = v21[42] % v21[43];
          int v24 = *(const void **)(v22 + 8 * v23);
          uint64_t v25 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
          *(void *)(v22 + 8 * v23) = v25;
          if (v25) {
            CFRetain(v25);
          }
          if (v24) {
            CFRelease(v24);
          }
          ++*(void *)(*(void *)(a1 + 56) + 336);
        }
        if (MutableCopy) {
          CFRelease(MutableCopy);
        }
        goto LABEL_42;
      }
      CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFMutableDictionaryRef MutableCopy = (const void *)FigCFDictionaryCreateMutableCopy();
      if (!MutableCopy)
      {
        CFStringRef v16 = 0;
        goto LABEL_25;
      }
      CFStringRef v16 = CFStringCreateWithFormat(v14, 0, @"%llu-AudioInput", v29);
      if (v16)
      {
        FigCFDictionarySetValue();
LABEL_25:
        if (cf) {
          CFRelease(cf);
        }
        if (v16) {
          CFRelease(v16);
        }
        if (MutableCopy)
        {
          uint64_t v17 = *(void *)(*(void *)(a1 + 40) + 8);
          uint64_t v18 = *(const void **)(v17 + 24);
          *(void *)(v17 + 24) = MutableCopy;
          CFRetain(MutableCopy);
          if (v18) {
            CFRelease(v18);
          }
        }
        goto LABEL_32;
      }
      CFRelease(MutableCopy);
    }
    else
    {
LABEL_23:
      CFStringRef v16 = 0;
    }
    CFMutableDictionaryRef MutableCopy = 0;
    goto LABEL_25;
  }
LABEL_42:
  uint64_t v26 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  if (v26) {
    CFRelease(v26);
  }
  char v27 = *(const void **)(a1 + 48);
  if (v27) {
    CFRelease(v27);
  }
  uint64_t v28 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v28) {
    CFRelease(v28);
  }
}

void carEndpoint_collectStreamAnalyticsFromStats(uint64_t a1, const void *a2)
{
  CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    CFTypeID v3 = CFGetTypeID(a2);
    if (v3 == CFDictionaryGetTypeID())
    {
      if (FigCFDictionaryGetInt32IfPresent())
      {
        if (FigCFDictionaryGetInt32IfPresent()) {
          FigCFDictionaryGetInt32IfPresent();
        }
      }
    }
  }
}

uint64_t __carEndpoint_getStreamInfoForDisplayUUID_block_invoke(uint64_t result, uint64_t a2)
{
  if (!*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24))
  {
    uint64_t v3 = result;
    carEndpoint_getDisplayUUIDForStream();
    CFArrayRef result = FigCFEqual();
    if (result) {
      *(void *)(*(void *)(*(void *)(v3 + 32) + 8) + 24) = a2;
    }
  }
  return result;
}

void carEndpoint_logStreamStats(const __CFString *a1, const void *a2, const void *a3)
{
  if (CFStringCompare(a1, @"showTime", 0))
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      uint64_t v7 = Mutable;
      CFDictionaryAddValue(Mutable, @"showTime", a3);
      CFDictionaryAddValue(v7, a1, a2);
      if (gLogCategory_APEndpointCarPlay <= 50
        && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      CFRelease(v7);
    }
  }
}

void carEndpoint_overrideFeatureKeyWithPrefValue(int a1, CFArrayRef theArray, const void *a3)
{
  v10.length = CFArrayGetCount(theArray);
  v10.location = 0;
  CountOfunint64_t Value = CFArrayGetCountOfValue(theArray, v10, a3);
  if (CountOfValue >= 2)
  {
    APSLogErrorAt();
  }
  else
  {
    int v6 = CountOfValue == 1;
    int IntWithDefault = APSSettingsGetIntWithDefault();
    if (IntWithDefault != v6)
    {
      if (IntWithDefault)
      {
        CFArrayAppendValue(theArray, a3);
      }
      else
      {
        v11.length = CFArrayGetCount(theArray);
        v11.location = 0;
        FirstIndexOfunint64_t Value = CFArrayGetFirstIndexOfValue(theArray, v11, a3);
        CFArrayRemoveValueAtIndex(theArray, FirstIndexOfValue);
      }
      if (gLogCategory_APEndpointCarPlay <= 50
        && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
  }
}

void __carEndpoint_createInfoRequestFeatureList_block_invoke(uint64_t a1, CFURLRef anURL)
{
  CFArrayRef v2 = *(__CFArray **)(a1 + 32);
  CFStringRef v3 = CFURLGetString(anURL);
  CFArrayAppendValue(v2, v3);
}

uint64_t __carEndpoint_validateEnabledFeaturesWithAccessory_block_invoke(void *a1, CFTypeRef cf)
{
  CFTypeID v4 = CFGetTypeID(cf);
  if (v4 == CFDictionaryGetTypeID())
  {
    if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"viewAreaSupportsFocusTransfer") && CFDictionaryGetInt64()) {
      *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = 1;
    }
    uint64_t result = CFDictionaryContainsKey((CFDictionaryRef)cf, @"safeArea");
    if (result)
    {
      CFDictionaryGetTypeID();
      uint64_t result = CFDictionaryGetTypedValue();
      if (result) {
        *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
      }
    }
  }
  else
  {
    uint64_t result = APSLogErrorAt();
    ++*(_DWORD *)(*(void *)(a1[4] + 8) + 24);
  }
  return result;
}

uint64_t carEndpoint_validateInfoResponseKeyPresentForFeature(int a1, CFDictionaryRef theDict, void *key, int a4)
{
  int v5 = CFDictionaryContainsKey(theDict, key);
  if (a4)
  {
    if (!v5)
    {
      if (gLogCategory_APEndpointCarPlay > 90
        || gLogCategory_APEndpointCarPlay == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_16;
      }
      goto LABEL_9;
    }
  }
  else if (v5 == 1)
  {
    if (gLogCategory_APEndpointCarPlay > 90
      || gLogCategory_APEndpointCarPlay == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_16;
    }
LABEL_9:
    LogPrintF();
LABEL_16:
    uint64_t v6 = 4294950576;
    APSLogErrorAt();
    return v6;
  }
  return 0;
}

void __carEndpoint_setUpAPAccClientEndpointForIdType_block_invoke(uint64_t a1, void *a2)
{
  values = a2;
  CFDictionaryRef v3 = CFDictionaryCreate(0, (const void **)&kAPEndpointCommandiAPSendMessageKey_Data, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (gLogCategory_APEndpointCarPlay <= 10
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  carEndpoint_sendCommandInternal(*(const void **)(a1 + 32), @"iAPSendMessage", v3, 0, 0);
  if (v3) {
    CFRelease(v3);
  }
}

void carEndpoint_registerForGlobalNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v9 = *(NSObject **)(DerivedStorage + 144);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __carEndpoint_registerForGlobalNotification_block_invoke;
  block[3] = &__block_descriptor_tmp_660;
  void block[4] = a2;
  void block[5] = a4;
  void block[6] = DerivedStorage;
  void block[7] = a3;
  void block[8] = a1;
  dispatch_sync(v9, block);
}

uint64_t carEndpoint_handleOverrideTurnByTurnConfigurationChanged()
{
  if (*(void *)(CMBaseObjectGetDerivedStorage() + 464))
  {
    FigStarkModeControllerGetCurrentMode();
    uint64_t result = CFPreferencesGetAppBooleanValue(@"overrideTBTAppState", @"com.apple.airplay", 0);
    int v1 = result;
    if (gLogCategory_APEndpointCarPlay <= 30)
    {
      if (gLogCategory_APEndpointCarPlay != -1 || (uint64_t result = _LogCategory_Initialize(), result)) {
        uint64_t result = LogPrintF();
      }
    }
    if (v1)
    {
      uint64_t result = CFPreferencesGetAppBooleanValue(@"iOSIsDoingTBT", @"com.apple.airplay", 0);
      int v2 = result;
      if (gLogCategory_APEndpointCarPlay <= 50)
      {
        if (gLogCategory_APEndpointCarPlay != -1 || (uint64_t result = _LogCategory_Initialize(), result)) {
          uint64_t result = LogPrintF();
        }
      }
      if (v2)
      {
        uint64_t result = FigStarkModeControllerRequestModeChange();
        if (result) {
          return APSLogErrorAt();
        }
      }
    }
  }
  else
  {
    return APSLogErrorAt();
  }
  return result;
}

uint64_t __carEndpoint_registerForOverrideTurnByTurnConfigurationChangedNotification_block_invoke()
{
  return carEndpoint_handleOverrideTurnByTurnConfigurationChanged();
}

CFTypeRef __carEndpoint_registerForGlobalNotification_block_invoke(uint64_t a1)
{
  int v2 = *(const char **)(a1 + 32);
  CFDictionaryRef v3 = *(int **)(a1 + 40);
  CFTypeID v4 = *(NSObject **)(*(void *)(a1 + 48) + 456);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = __carEndpoint_registerForGlobalNotification_block_invoke_2;
  v6[3] = &__block_descriptor_tmp_659;
  long long v7 = *(_OWORD *)(a1 + 56);
  CFTypeRef result = (CFTypeRef)notify_register_dispatch(v2, v3, v4, v6);
  if (**(_DWORD **)(a1 + 40) != -1) {
    return CFRetain(*(CFTypeRef *)(a1 + 64));
  }
  return result;
}

uint64_t __carEndpoint_registerForGlobalNotification_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 40));
}

uint64_t carEndpoint_setupAudioStream(const void *a1, const void *a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v36 = 0;
  CFAllocatorRef v9 = (const void *)*MEMORY[0x1E4F21470];
  if (FigCFEqual())
  {
    if (*(unsigned char *)(DerivedStorage + 40)) {
      CFRange v10 = @"com.apple.airplay.car.wireless.sessionPercentageWithBufferedAudio";
    }
    else {
      CFRange v10 = @"com.apple.airplay.car.wired.sessionPercentageWithBufferedAudio";
    }
    CFRange v11 = *(const void **)(DerivedStorage + 232);
    uint64_t v12 = CMBaseObjectGetDerivedStorage();
    CFTypeRef cf = 0;
    CFTypeRef v39 = 0;
    unint64_t v37 = 0;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable)
    {
      APSLogErrorAt();
      CFTypeRef v27 = 0;
      uint64_t v26 = 4294950575;
      goto LABEL_65;
    }
    CFAllocatorRef v14 = Mutable;
    CFDictionarySetValue(Mutable, @"streamType", v9);
    uint64_t v15 = *(void *)(v12 + 8);
    CFAllocatorRef v16 = CFGetAllocator(a1);
    uint64_t CMBaseObject = APEndpointDescriptionGetCMBaseObject(v15);
    uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v18) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t v23 = *(uint64_t (**)(uint64_t, __CFString *, CFAllocatorRef, CFTypeRef *))(v19 + 48);
    if (v23)
    {
      uint64_t v24 = v23(CMBaseObject, @"CarPlayAudioFormats", v16, &cf);
      if (v24)
      {
        uint64_t v26 = v24;
      }
      else
      {
        uint64_t v25 = APCarPlayAudioFormatsCopyFormatsForAudioType(cf, 103, @"media", &v37, 0, 0);
        if (!v25)
        {
          CFDictionarySetInt64();
          uint64_t v26 = APAudioEngineVendorCreate(v11, v14, (uint64_t (*)(CFAllocatorRef, void, void, void *))APAudioEngineBufferedCreate, &v39);
          if (!v26)
          {
            CFTypeRef v27 = v39;
            CFTypeRef v39 = 0;
            goto LABEL_22;
          }
          APSLogErrorAt();
          if (v39) {
            CFRelease(v39);
          }
LABEL_21:
          CFTypeRef v27 = 0;
LABEL_22:
          CFRelease(v14);
          if (cf) {
            CFRelease(cf);
          }
          if (!v26)
          {
            CFAllocatorRef v28 = CFGetAllocator(a1);
            uint64_t v29 = APEndpointStreamBufferedAudioCreate(v28, *(CFTypeRef *)(DerivedStorage + 16), *(const void **)(DerivedStorage + 32), a4, *(const void **)(DerivedStorage + 216), v27, *(const void **)(DerivedStorage + 8), &v36);
            if (!v29)
            {
              uint64_t v30 = @"StreamInfo_BufferedAudio";
              int v20 = 261095425;
              if (gLogCategory_APEndpointCarPlay <= 50
                && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
              int v21 = 261095424;
              goto LABEL_48;
            }
            uint64_t v26 = v29;
          }
LABEL_65:
          APSLogErrorAt();
          goto LABEL_56;
        }
        uint64_t v26 = v25;
      }
    }
    else
    {
      uint64_t v26 = 4294954514;
    }
    APSLogErrorAt();
    goto LABEL_21;
  }
  if (FigCFEqual())
  {
    if (*(unsigned char *)(DerivedStorage + 40)) {
      CFRange v10 = @"com.apple.airplay.car.wireless.sessionPercentageWithMainAudio";
    }
    else {
      CFRange v10 = @"com.apple.airplay.car.wired.sessionPercentageWithMainAudio";
    }
    int v20 = 265289729;
    int v21 = 265289728;
    uint64_t v22 = kAPEndpointShowInfoKey_StreamInfo_MainAudio;
  }
  else if (FigCFEqual())
  {
    if (*(unsigned char *)(DerivedStorage + 40)) {
      CFRange v10 = @"com.apple.airplay.car.wireless.sessionPercentageWithAltAudio";
    }
    else {
      CFRange v10 = @"com.apple.airplay.car.wired.sessionPercentageWithAltAudio";
    }
    int v20 = 264241153;
    int v21 = 264241152;
    uint64_t v22 = kAPEndpointShowInfoKey_StreamInfo_AltAudio;
  }
  else if (FigCFEqual())
  {
    if (*(unsigned char *)(DerivedStorage + 40)) {
      CFRange v10 = @"com.apple.airplay.car.wireless.sessionPercentageWithAuxAudio";
    }
    else {
      CFRange v10 = @"com.apple.airplay.car.wired.sessionPercentageWithAuxAudio";
    }
    int v20 = 263192577;
    int v21 = 263192576;
    uint64_t v22 = kAPEndpointShowInfoKey_StreamInfo_AuxAudio;
  }
  else
  {
    if (!FigCFEqual())
    {
      CFTypeRef v27 = 0;
      uint64_t v26 = 4294960561;
      goto LABEL_56;
    }
    if (*(unsigned char *)(DerivedStorage + 40)) {
      CFRange v10 = @"com.apple.airplay.car.wireless.sessionPercentageWithOutOfBandAVVCAudio";
    }
    else {
      CFRange v10 = @"com.apple.airplay.car.wired.sessionPercentageWithOutOfBandAVVCAudio";
    }
    int v20 = 262144001;
    int v21 = 262144000;
    uint64_t v22 = kAPEndpointShowInfoKey_StreamInfo_OutOfBandAVVCAudio;
  }
  uint64_t v30 = *v22;
  CFAllocatorRef v31 = CFGetAllocator(a1);
  uint64_t v32 = APEndpointStreamCarPlayAudioCreate(v31, (uint64_t)a1, *(const void **)(DerivedStorage + 16), a2, a3, (const __CFDictionary *)a4, *(const void **)(DerivedStorage + 8), *(const void **)(DerivedStorage + 216), *(const void **)(DerivedStorage + 232), *(const void **)(DerivedStorage + 256), &v36);
  if (v32)
  {
    uint64_t v26 = v32;
    APSLogErrorAt();
    CFTypeRef v27 = 0;
    goto LABEL_56;
  }
  CFTypeRef v27 = 0;
LABEL_48:
  carEndpoint_addEndpointStreamNotificationListeners();
  uint64_t v33 = APEndpointCarPlayStreamInfoCreate(v36, v30, v21, v20, v10);
  if (v33)
  {
    uint64_t v34 = (const void *)v33;
    if (v36)
    {
      CFRelease(v36);
      CFTypeRef v36 = 0;
    }
    CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 240), v34);
    CFRelease(v34);
    uint64_t v26 = 0;
    goto LABEL_52;
  }
  APSLogErrorAt();
  uint64_t v26 = 4294950575;
LABEL_56:
  if (gLogCategory_APEndpointCarPlay <= 90
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
LABEL_52:
  if (v27) {
    CFRelease(v27);
  }
  return v26;
}

uint64_t carEndpoint_addEndpointStreamNotificationListeners()
{
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterAddListener();
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterAddListener();
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterAddListener();
}

uint64_t APEndpointCarPlayStreamInfoCreate(const void *a1, const void *a2, int a3, int a4, const void *a5)
{
  if (APEndpointCarPlayStreamInfoGetTypeID_initOnce != -1) {
    dispatch_once(&APEndpointCarPlayStreamInfoGetTypeID_initOnce, &__block_literal_global_737);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v11 = Instance;
  if (Instance)
  {
    *(void *)(Instance + 112) = 0;
    *(_OWORD *)(Instance + 80) = 0u;
    *(_OWORD *)(Instance + 96) = 0u;
    *(_OWORD *)(Instance + 48) = 0u;
    *(_OWORD *)(Instance + 64) = 0u;
    *(_OWORD *)(Instance + 16) = 0u;
    *(_OWORD *)(Instance + 32) = 0u;
    *(void *)(Instance + 32) = -1;
    *(void *)(Instance + 16) = CFRetain(a1);
    *(void *)(v11 + 24) = CFRetain(a2);
    *(_DWORD *)(v11 + 40) = a3;
    *(_DWORD *)(v11 + 44) = a4;
    *(void *)(v11 + 56) = CFRetain(a5);
  }
  else
  {
    APSLogErrorAt();
  }
  return v11;
}

void carEndpoint_handleStreamFailed(uint64_t a1, const void *a2, uint64_t a3, const void *a4, uint64_t a5)
{
  int Int64 = -71850;
  int v13 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a5) {
    int Int64 = CFDictionaryGetInt64();
  }
  if (a2) {
    CFRetain(a2);
  }
  if (a4) {
    CFRetain(a4);
  }
  CFRange v10 = *(NSObject **)(DerivedStorage + 144);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 0x40000000;
  v11[2] = __carEndpoint_handleStreamFailed_block_invoke;
  v11[3] = &__block_descriptor_tmp_709;
  v11[4] = DerivedStorage;
  v11[5] = a4;
  v11[6] = a2;
  int v12 = Int64;
  dispatch_async(v10, v11);
}

void carEndpoint_handleStreamResumed(uint64_t a1, const void *a2, uint64_t a3, const void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2) {
    CFRetain(a2);
  }
  if (a4) {
    CFRetain(a4);
  }
  long long v7 = *(NSObject **)(DerivedStorage + 144);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __carEndpoint_handleStreamResumed_block_invoke;
  block[3] = &__block_descriptor_tmp_712;
  void block[4] = DerivedStorage;
  void block[5] = a4;
  void block[6] = a2;
  dispatch_async(v7, block);
}

void carEndpoint_handleStreamSuspended(uint64_t a1, const void *a2, uint64_t a3, const void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2) {
    CFRetain(a2);
  }
  if (a4) {
    CFRetain(a4);
  }
  long long v7 = *(NSObject **)(DerivedStorage + 144);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __carEndpoint_handleStreamSuspended_block_invoke;
  block[3] = &__block_descriptor_tmp_733;
  void block[4] = DerivedStorage;
  void block[5] = a4;
  void block[6] = a2;
  dispatch_async(v7, block);
}

void __carEndpoint_handleStreamFailed_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  if (*(void *)(v2 + 240))
  {
    CFArrayGetCount(*(CFArrayRef *)(v2 + 240));
    CFArrayApplyBlock();
  }
  CFDictionaryRef v3 = (const void *)a1[6];
  if (v3) {
    CFRelease(v3);
  }
  CFTypeID v4 = (const void *)a1[5];
  if (v4) {
    CFRelease(v4);
  }
}

void __carEndpoint_handleStreamFailed_block_invoke_2(uint64_t a1)
{
  if (FigCFEqual())
  {
    uint64_t v2 = *(const void **)(a1 + 40);
    if (v2)
    {
      CFRetain(v2);
      uint64_t v3 = *(void *)(a1 + 40);
    }
    else
    {
      uint64_t v3 = 0;
    }
    CFTypeID v4 = *(NSObject **)(*(void *)(a1 + 48) + 144);
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 0x40000000;
    v5[2] = __carEndpoint_handleStreamFailed_block_invoke_3;
    void v5[3] = &__block_descriptor_tmp_707;
    v5[4] = v3;
    int v6 = *(_DWORD *)(a1 + 56);
    dispatch_async(v4, v5);
  }
}

void __carEndpoint_handleStreamFailed_block_invoke_3(uint64_t a1)
{
  carEndpoint_updateErrorStatusIfNotSet(*(const void **)(a1 + 32), *(_DWORD *)(a1 + 40));
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
  }
}

void __carEndpoint_handleStreamResumed_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  if (*(void *)(v2 + 240))
  {
    CFArrayGetCount(*(CFArrayRef *)(v2 + 240));
    CFArrayApplyBlock();
  }
  uint64_t v3 = (const void *)a1[6];
  if (v3) {
    CFRelease(v3);
  }
  CFTypeID v4 = (const void *)a1[5];
  if (v4) {
    CFRelease(v4);
  }
}

void __carEndpoint_handleStreamResumed_block_invoke_2(uint64_t a1, const void *a2)
{
  if (FigCFEqual())
  {
    CFRetain(a2);
    CFTypeID v4 = *(NSObject **)(*(void *)(a1 + 40) + 472);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 0x40000000;
    v6[2] = __carEndpoint_handleStreamResumed_block_invoke_3;
    v6[3] = &__block_descriptor_tmp_710;
    uint64_t v5 = *(void *)(a1 + 48);
    void v6[4] = a2;
    v6[5] = v5;
    dispatch_async(v4, v6);
  }
}

void __carEndpoint_handleStreamResumed_block_invoke_3(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  *(unsigned char *)(v2 + 48) = 1;
  CFComparisonResult v3 = CFStringCompare(*(CFStringRef *)(v2 + 24), @"StreamInfo_Screen", 0);
  CFTypeID v4 = *(void **)(a1 + 32);
  if (v3 == kCFCompareEqualTo && (v4[4] & 0x8000000000000000) == 0)
  {
    carEndpoint_powerLogDisplay(*(const void **)(a1 + 40), (uint64_t)v4, 1);
    CFTypeID v4 = *(void **)(a1 + 32);
  }
  CFRelease(v4);
}

void carEndpoint_powerLogDisplay(const void *a1, uint64_t a2, int a3)
{
  CMBaseObjectGetDerivedStorage();
  unint64_t valuePtr = 0;
  CMTimeValue value = 0;
  int v24 = 0;
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (MutableCopy)
  {
    CFAllocatorRef v8 = CFGetAllocator(a1);
    uint64_t CMBaseObject = FigEndpointStreamGetCMBaseObject();
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    int v12 = *(void (**)(uint64_t, void, CFAllocatorRef, void **))(v11 + 48);
    if (!v12) {
      goto LABEL_25;
    }
    v12(CMBaseObject, *MEMORY[0x1E4F21368], v8, &value);
    if (!value) {
      goto LABEL_25;
    }
    APSEventRecorderGetEventTime();
    unint64_t valuePtr = (unint64_t)v13;
    CFNumberRef v14 = CFNumberCreate(v6, kCFNumberSInt64Type, &valuePtr);
    if (v14)
    {
      CFNumberRef v15 = v14;
      CFDictionarySetValue(MutableCopy, @"SessionID", v14);
      CFAllocatorRef v16 = (const void **)MEMORY[0x1E4F1CFD0];
      if (!a3) {
        CFAllocatorRef v16 = (const void **)MEMORY[0x1E4F1CFC8];
      }
      CFDictionarySetValue(MutableCopy, @"Resume", *v16);
      CFDictionarySetValue(MutableCopy, @"ScreenUUID", value);
      uint64_t v17 = *(void *)(a2 + 32);
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 248));
      if (Count < 1) {
        goto LABEL_20;
      }
      CFIndex v20 = Count;
      CFIndex v21 = 0;
      while (1)
      {
        CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 248), v21);
        if (v17 == v21) {
          break;
        }
        if (v20 == ++v21) {
          goto LABEL_20;
        }
      }
      if (FigCFDictionaryGetValue())
      {
        LOWORD(v24) = CFDictionaryGetInt64();
        HIWORD(v24) = CFDictionaryGetInt64();
        CFNumberRef v22 = CFNumberCreate(v6, kCFNumberSInt16Type, &v24);
        CFNumberRef v23 = CFNumberCreate(v6, kCFNumberSInt16Type, (char *)&v24 + 2);
        CFDictionarySetValue(MutableCopy, @"Width", v22);
        CFDictionarySetValue(MutableCopy, @"Height", v23);
        PLLogRegisteredEvent();
        if (v23) {
          CFRelease(v23);
        }
        if (v22) {
          CFRelease(v22);
        }
      }
      else
      {
LABEL_20:
        PLLogRegisteredEvent();
      }
      CFRelease(v15);
    }
  }
  if (value) {
    CFRelease(value);
  }
  if (MutableCopy) {
LABEL_25:
  }
    CFRelease(MutableCopy);
}

void __carEndpoint_handleStreamSuspended_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  if (*(void *)(v2 + 240))
  {
    CFArrayGetCount(*(CFArrayRef *)(v2 + 240));
    CFArrayApplyBlock();
  }
  CFComparisonResult v3 = (const void *)a1[6];
  if (v3) {
    CFRelease(v3);
  }
  CFTypeID v4 = (const void *)a1[5];
  if (v4) {
    CFRelease(v4);
  }
}

void __carEndpoint_handleStreamSuspended_block_invoke_2(uint64_t a1, const void *a2)
{
  CFTypeRef v12 = 0;
  if (FigCFEqual())
  {
    CFTypeID v4 = *(const void **)(a1 + 40);
    if (v4) {
      CFRetain(v4);
    }
    CFRetain(a2);
    uint64_t v5 = *(NSObject **)(*(void *)(a1 + 48) + 472);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __carEndpoint_handleStreamSuspended_block_invoke_3;
    block[3] = &__block_descriptor_tmp_731;
    void block[4] = *(void *)(a1 + 40);
    void block[5] = a2;
    dispatch_async(v5, block);
    CFAllocatorRef v6 = CFGetAllocator(*(CFTypeRef *)(a1 + 40));
    uint64_t CMBaseObject = FigEndpointStreamGetCMBaseObject();
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(void (**)(uint64_t, void, CFAllocatorRef, CFTypeRef *))(v9 + 48);
    if (v10) {
      v10(CMBaseObject, *MEMORY[0x1E4F213B0], v6, &v12);
    }
    if (FigCFEqual()) {
      *(void *)(*(void *)(a1 + 48) + 416) = 0;
    }
  }
  if (v12) {
    CFRelease(v12);
  }
}

void __carEndpoint_handleStreamSuspended_block_invoke_3(uint64_t a1)
{
  carEndpoint_updateStreamResumedTimeIfNeeded(*(void *)(a1 + 32), *(void *)(a1 + 40));
  uint64_t v2 = *(void *)(a1 + 40);
  *(unsigned char *)(v2 + 48) = 0;
  CFComparisonResult v3 = CFStringCompare(*(CFStringRef *)(v2 + 24), @"StreamInfo_Screen", 0);
  CFTypeID v4 = *(void **)(a1 + 40);
  if (v3 == kCFCompareEqualTo && (v4[4] & 0x8000000000000000) == 0)
  {
    carEndpoint_powerLogDisplay(*(const void **)(a1 + 32), (uint64_t)v4, 0);
    CFTypeID v4 = *(void **)(a1 + 40);
  }
  CFRelease(v4);
  uint64_t v5 = *(const void **)(a1 + 32);
  if (v5)
  {
    CFRelease(v5);
  }
}

uint64_t carEndpoint_updateStreamResumedTimeIfNeeded(uint64_t a1, uint64_t a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(a2 + 48))
  {
    uint64_t result = APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursiveEx();
    if (!result)
    {
      *(_DWORD *)(a2 + 52) = *(_DWORD *)(a2 + 52);
      if (gLogCategory_APEndpointCarPlay <= 50)
      {
        if (gLogCategory_APEndpointCarPlay != -1) {
          return LogPrintF();
        }
        uint64_t result = _LogCategory_Initialize();
        if (result) {
          return LogPrintF();
        }
      }
    }
  }
  return result;
}

uint64_t __APEndpointCarPlayStreamInfoGetTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  APEndpointCarPlayStreamInfoGetTypeID_typeID = result;
  return result;
}

void _APEndpointCarPlayStreamInfoFinalize(void *a1)
{
  uint64_t v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0;
  }
  CFComparisonResult v3 = (const void *)a1[3];
  if (v3)
  {
    CFRelease(v3);
    a1[3] = 0;
  }
  CFTypeID v4 = (const void *)a1[7];
  if (v4)
  {
    CFRelease(v4);
    a1[7] = 0;
  }
}

void __carEndpoint_copyScreenInfoFromDisplayDescription_block_invoke(uint64_t a1, CFTypeRef cf)
{
  int v17 = 0;
  memset(v16, 0, sizeof(v16));
  CFTypeID v3 = CFGetTypeID(cf);
  if (v3 != CFDictionaryGetTypeID()) {
    goto LABEL_22;
  }
  FigCFDictionaryGetCGFloatIfPresent();
  FigCFDictionaryGetCGFloatIfPresent();
  FigCFDictionaryGetCGFloatIfPresent();
  FigCFDictionaryGetCGFloatIfPresent();
  if (!CGRectContainsRect(*(CGRect *)(a1 + 40), v16[2])
    || ((int)v16[2].origin.x & 1) != 0
    || ((int)v16[2].origin.y & 1) != 0
    || ((int)v16[2].size.width & 1) != 0
    || ((int)v16[2].size.height & 1) != 0)
  {
    goto LABEL_22;
  }
  CFDictionaryGetTypeID();
  Typedunint64_t Value = (const void *)CFDictionaryGetTypedValue();
  if (TypedValue)
  {
    CFTypeID v5 = CFGetTypeID(TypedValue);
    if (v5 != CFDictionaryGetTypeID()) {
      goto LABEL_22;
    }
    FigCFDictionaryGetCGFloatIfPresent();
    FigCFDictionaryGetCGFloatIfPresent();
    FigCFDictionaryGetCGFloatIfPresent();
    FigCFDictionaryGetCGFloatIfPresent();
    if (!CGRectContainsRect(v16[2], v16[1])) {
      goto LABEL_22;
    }
  }
  else
  {
    v16[1] = v16[2];
  }
  CFAllocatorRef v6 = CFGetAllocator(*(CFTypeRef *)(a1 + 72));
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
LABEL_22:
    APSLogErrorAt();
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    return;
  }
  uint64_t v8 = Mutable;
  carEndpoint_convertNonSquarePixelRectToSquarePixelRect((uint64_t)v16, v16[2].origin.x, v16[2].origin.y, v16[2].size.width, v16[2].size.height);
  CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v16[0]);
  CFDictionarySetValue(v8, (const void *)*MEMORY[0x1E4F211E0], DictionaryRepresentation);
  CFRelease(DictionaryRepresentation);
  uint64_t Int64 = CFDictionaryGetInt64();
  uint64_t v11 = (const void *)*MEMORY[0x1E4F1CFD0];
  CFTypeRef v12 = (const void *)*MEMORY[0x1E4F1CFC8];
  if (Int64) {
    double v13 = (const void *)*MEMORY[0x1E4F1CFD0];
  }
  else {
    double v13 = (const void *)*MEMORY[0x1E4F1CFC8];
  }
  CFDictionarySetValue(v8, (const void *)*MEMORY[0x1E4F211F0], v13);
  if (CFDictionaryGetInt64()) {
    CFNumberRef v14 = v11;
  }
  else {
    CFNumberRef v14 = v12;
  }
  CFDictionarySetValue(v8, (const void *)*MEMORY[0x1E4F211E8], v14);
  CFDictionaryGetInt64();
  CFDictionarySetInt64();
  carEndpoint_convertNonSquarePixelRectToSquarePixelRect((uint64_t)v16, v16[1].origin.x, v16[1].origin.y, v16[1].size.width, v16[1].size.height);
  CFDictionaryRef v15 = CGRectCreateDictionaryRepresentation(v16[0]);
  CFDictionarySetValue(v8, (const void *)*MEMORY[0x1E4F211D0], v15);
  CFRelease(v15);
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 160), v8);
  CFRelease(v8);
}

uint64_t carEndpoint_convertNonSquarePixelRectToSquarePixelRect(uint64_t a1, double a2, double a3, double a4, double a5)
{
  long long v11 = *MEMORY[0x1E4F1DB30];
  if (a4 <= 0.0 || a5 <= 0.0)
  {
    return APSLogErrorAt();
  }
  else
  {
    uint64_t result = FigDisplayModes_ConvertNonSquarePixelSizeToSquarePixelSize();
    if (a1)
    {
      *(double *)a1 = (double)(int)(a2 * *(double *)&v11 / a4);
      *(double *)(a1 + 8) = (double)(int)(a3 * *((double *)&v11 + 1) / a5);
      *(_OWORD *)(a1 + 16) = v11;
    }
  }
  return result;
}

void carEndpoint_handleJarvisParametersChangedNotification(const void *a1)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  int v34 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v30 = 0;
  CFAllocatorRef v31 = &v30;
  uint64_t v32 = 0x2000000000;
  char v33 = 1;
  uint64_t v26 = 0;
  CFTypeRef v27 = &v26;
  uint64_t v28 = 0x2000000000;
  int v29 = 0;
  CFTypeID v3 = *(NSObject **)(DerivedStorage + 144);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __carEndpoint_handleJarvisParametersChangedNotification_block_invoke;
  block[3] = &unk_1E6894980;
  void block[5] = &v26;
  void block[6] = DerivedStorage;
  void block[4] = &v30;
  dispatch_sync(v3, block);
  if (*((unsigned char *)v31 + 24))
  {
    uint64_t v4 = APSGetFBOPropertyInt64();
    uint64_t IntWithDefault = APSSettingsGetIntWithDefault();
    if (IntWithDefault != 5000
      && gLogCategory_APEndpointCarPlay <= 50
      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (APCarPlayHasDeviceUnlockedSinceBoot() && APCarPlayHasSpringboardStarted())
    {
      CFStringRef v6 = 0;
      int v7 = -1;
      if (APCarPlayIsSiriSwitchOn() && v4)
      {
        int v8 = APSSettingsGetIntWithDefault();
        if (v8 != 1)
        {
          int v7 = v8;
          if (gLogCategory_APEndpointCarPlay <= 50
            && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          CFStringRef v6 = 0;
          goto LABEL_23;
        }
        if (APSSettingsGetInt64())
        {
          APSSettingsGetCString();
          if (v34)
          {
            APSLogErrorAt();
            goto LABEL_27;
          }
          CFAllocatorRef v9 = CFGetAllocator(a1);
          CFStringRef v6 = CFStringCreateWithCString(v9, cStr, 0x8000100u);
          if (gLogCategory_APEndpointCarPlay <= 50
            && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
        }
        else
        {
          uint64_t v12 = CMBaseObjectGetDerivedStorage();
          uint64_t v36 = 0;
          *(void *)cStr = 0;
          CFStringRef v35 = 0;
          uint64_t v13 = *(void *)(v12 + 8);
          CFAllocatorRef v14 = CFGetAllocator(a1);
          uint64_t CMBaseObject = APEndpointDescriptionGetCMBaseObject(v13);
          uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v16) {
            uint64_t v17 = v16;
          }
          else {
            uint64_t v17 = 0;
          }
          uint64_t v18 = *(unsigned int (**)(uint64_t, __CFString *, CFAllocatorRef, char *))(v17 + 48);
          if (v18 && !v18(CMBaseObject, @"VoiceModelLanguages", v14, cStr) && *(void *)cStr)
          {
            uint64_t v19 = *(void *)(v12 + 8);
            CFAllocatorRef v20 = CFGetAllocator(a1);
            uint64_t v21 = APEndpointDescriptionGetCMBaseObject(v19);
            uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
            uint64_t v23 = v22 ? v22 : 0;
            int v24 = *(unsigned int (**)(uint64_t, __CFString *, CFAllocatorRef, uint64_t *))(v23 + 48);
            if (v24)
            {
              if (!v24(v21, @"CurrentVoiceModelLanguage", v20, &v36)
                && v36
                && APCarPlayGetJarvisLanguageFromList(*(uint64_t *)cStr, v36, &v35))
              {
                APSLogErrorAt();
              }
            }
          }
          CFStringRef v6 = v35;
          if (!v35)
          {
            if (gLogCategory_APEndpointCarPlay <= 50
              && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            CFStringRef v6 = 0;
            int v7 = 2;
            goto LABEL_23;
          }
        }
        int v7 = 1;
      }
    }
    else
    {
      CFStringRef v6 = 0;
      int v7 = -1;
    }
LABEL_23:
    carEndpoint_setParametersForJarvis(a1, 0, v7, IntWithDefault, v6);
    CFAllocatorRef v10 = CFGetAllocator(a1);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v10, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionarySetInt64();
    carEndpoint_postNotification(a1, (const void *)*MEMORY[0x1E4F202E8], *((_DWORD *)v27 + 6), Mutable);
    if (Mutable) {
      CFRelease(Mutable);
    }
    if (v6) {
      CFRelease(v6);
    }
    goto LABEL_27;
  }
  if (gLogCategory_APEndpointCarPlay <= 60
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
LABEL_27:
  _Block_object_dispose(&v26, 8);
  _Block_object_dispose(&v30, 8);
}

void __carEndpoint_setupNotificationsAndInitialParametersForJarvis_block_invoke(uint64_t a1)
{
}

void *__carEndpoint_handleJarvisParametersChangedNotification_block_invoke(void *result)
{
  uint64_t v1 = result[6];
  if (*(unsigned char *)(v1 + 152)) {
    BOOL v2 = 0;
  }
  else {
    BOOL v2 = *(_DWORD *)(v1 + 204) != 0;
  }
  *(unsigned char *)(*(void *)(result[4] + 8) + 24) = v2;
  *(_DWORD *)(*(void *)(result[5] + 8) + 24) = *(_DWORD *)(result[6] + 204);
  return result;
}

uint64_t carEndpoint_addEventIntervalToPerformanceDictionaryAndLog(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t TimeBetweenEventsInMilliSecondRecursive = APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursive();
  CFDictionarySetInt64();
  return carEndpoint_addIntervalToPerformanceDictionaryAndLog(TimeBetweenEventsInMilliSecondRecursive, a5, a6, a7);
}

void carEndpoint_addEventToPerformanceDictionaryAndLog(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  APSEventRecorderGetEventTimeRecursive();
  double v7 = v6;
  CFDictionarySetDouble();
  if (a5)
  {
    CFStringRef v8 = v7 <= 0.0
       ? CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], "n/a", 0x8000100u)
       : (CFStringRef)APSEventRecorderCreateStringWithEventRecorderTime();
    CFStringRef v9 = v8;
    CPrintF();
    if (v9)
    {
      CFRelease(v9);
    }
  }
}

uint64_t carEndpoint_addIntervalToPerformanceDictionaryAndLog(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = CFDictionarySetInt64();
  if (a4) {
    return CPrintF();
  }
  return result;
}

uint64_t __carEndpoint_postPerformanceReport_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_DWORD *)(*(void *)(result + 40) + 204);
  return result;
}

uint64_t carEndpoint_logToMutableString(uint64_t a1, unsigned int a2)
{
  LODWORD(result) = CFStringAppendF();
  if (result) {
    return result;
  }
  else {
    return a2;
  }
}

uint64_t carEndpoint_addSignPostTimeToDictionary()
{
  uint64_t result = APSEventRecorderGetEventTimeRecursive();
  if (v1 > 0.0)
  {
    uint64_t result = CFDictionarySetDouble();
    if (gLogCategory_APEndpointCarPlay <= 30)
    {
      if (gLogCategory_APEndpointCarPlay != -1) {
        return LogPrintF();
      }
      uint64_t result = _LogCategory_Initialize();
      if (result) {
        return LogPrintF();
      }
    }
  }
  return result;
}

void *__carEndpoint_deactivateInternal_block_invoke(void *result)
{
  uint64_t v1 = result[6];
  *(_DWORD *)(*(void *)(result[4] + 8) + 24) = *(_DWORD *)(v1 + 204);
  *(_DWORD *)(v1 + 204) = 0;
  if (!*(_DWORD *)(*(void *)(result[4] + 8) + 24)) {
    *(_DWORD *)(*(void *)(result[5] + 8) + 24) = *(_DWORD *)(v1 + 200);
  }
  return result;
}

double __carEndpoint_deactivateInternal_block_invoke_2(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(void *)(*(void *)(a1 + 64) + 216);
  *(void *)(*(void *)(a1 + 64) + 216) = 0;
  uint64_t v2 = *(void *)(a1 + 64);
  *(unsigned char *)(v2 + 224) = 0;
  CFTypeID v3 = *(const void **)(v2 + 232);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(*(void *)(a1 + 64) + 232) = 0;
    uint64_t v2 = *(void *)(a1 + 64);
  }
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = *(void *)(v2 + 240);
  *(void *)(*(void *)(a1 + 64) + 240) = 0;
  uint64_t v4 = *(void **)(a1 + 64);
  CFTypeID v5 = (const void *)v4[33];
  if (v5)
  {
    CFRelease(v5);
    *(void *)(*(void *)(a1 + 64) + 264) = 0;
    uint64_t v4 = *(void **)(a1 + 64);
  }
  double v6 = (const void *)v4[34];
  if (v6)
  {
    CFRelease(v6);
    *(void *)(*(void *)(a1 + 64) + 272) = 0;
    uint64_t v4 = *(void **)(a1 + 64);
  }
  double v7 = (const void *)v4[54];
  if (v7)
  {
    CFRelease(v7);
    *(void *)(*(void *)(a1 + 64) + 432) = 0;
    uint64_t v4 = *(void **)(a1 + 64);
  }
  CFStringRef v8 = (const void *)v4[56];
  if (v8)
  {
    CFRelease(v8);
    *(void *)(*(void *)(a1 + 64) + 448) = 0;
  }
  CFStringRef v9 = *(void **)(a1 + 72);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFDictionaryRef v11 = *(const __CFDictionary **)(DerivedStorage + 440);
  if (v11)
  {
    CFDictionaryApplyFunction(v11, (CFDictionaryApplierFunction)carEndpoint_unsubscribeAndInvalidateRCS, v9);
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(DerivedStorage + 440));
  }
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v13 = *(const void **)(v12 + 440);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(*(void *)(a1 + 64) + 440) = 0;
    uint64_t v12 = *(void *)(a1 + 64);
  }
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = *(void *)(v12 + 288);
  *(void *)(*(void *)(a1 + 64) + 288) = 0;
  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = *(void *)(*(void *)(a1 + 64) + 280);
  *(void *)(*(void *)(a1 + 64) + 280) = 0;
  uint64_t v15 = *(void *)(a1 + 64);
  CFAllocatorRef v14 = *(const void **)(a1 + 72);
  *(unsigned char *)(v15 + 304) = 0;
  carEndpoint_deRegisterFromGlobalNotification(v14, (int *)(v15 + 320));
  uint64_t v16 = *(void *)(a1 + 64);
  if (*(unsigned char *)(v16 + 57))
  {
    carEndpoint_deRegisterFromGlobalNotification(*(const void **)(a1 + 72), (int *)(v16 + 392));
    carEndpoint_deRegisterFromGlobalNotification(*(const void **)(a1 + 72), (int *)(*(void *)(a1 + 64) + 396));
    carEndpoint_deRegisterFromGlobalNotification(*(const void **)(a1 + 72), (int *)(*(void *)(a1 + 64) + 400));
    carEndpoint_deRegisterFromGlobalNotification(*(const void **)(a1 + 72), (int *)(*(void *)(a1 + 64) + 404));
    carEndpoint_deRegisterFromGlobalNotification(*(const void **)(a1 + 72), (int *)(*(void *)(a1 + 64) + 408));
    uint64_t v16 = *(void *)(a1 + 64);
  }
  uint64_t v17 = *(const void **)(v16 + 384);
  if (v17)
  {
    CFRelease(v17);
    *(void *)(*(void *)(a1 + 64) + 384) = 0;
    uint64_t v16 = *(void *)(a1 + 64);
  }
  double result = 0.0;
  *(_OWORD *)(v16 + 352) = 0u;
  *(_OWORD *)(v16 + 368) = 0u;
  return result;
}

void carEndpoint_deRegisterFromGlobalNotification(const void *a1, int *a2)
{
  if (*a2 != -1)
  {
    notify_cancel(*a2);
    *a2 = -1;
    CFRelease(a1);
    *a2 = -1;
  }
}

void __carEndpoint_deactivateInternal_block_invoke_3(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 464))
  {
    FigStarkModeControllerSetExecuteChangeHandler();
    uint64_t v2 = *(const void **)(*(void *)(a1 + 32) + 464);
    if (v2)
    {
      CFRelease(v2);
      *(void *)(*(void *)(a1 + 32) + 464) = 0;
    }
  }
}

uint64_t __carEndpoint_deactivateInternal_block_invoke_4(uint64_t a1, uint64_t a2)
{
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterRemoveListener();
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterRemoveListener();
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterRemoveListener();
  uint64_t CMBaseObject = FigEndpointStreamGetCMBaseObject();
  uint64_t v4 = *(void **)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    CFTypeID v5 = v4;
  }
  else {
    CFTypeID v5 = 0;
  }
  if (*v5 >= 2uLL)
  {
    double v6 = (void (*)(uint64_t))v5[8];
    if (v6) {
      v6(CMBaseObject);
    }
  }
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v11 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v10 = v11;
  if (v11) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(uint64_t (**)(uint64_t))(v12 + 32);
  if (v13)
  {
    return v13(v7);
  }
  return result;
}

void __carEndpoint_deactivateInternal_block_invoke_5(uint64_t a1)
{
}

CFTypeRef __carEndpoint_postSessionStatistics_block_invoke(void *a1, double a2)
{
  LODWORD(a2) = *(_DWORD *)(a1[8] + 428);
  *(double *)(*(void *)(a1[4] + 8) + 24) = (double)*(unint64_t *)&a2 / 1000.0;
  *(_DWORD *)(*(void *)(a1[5] + 8) + 24) = APSEventRecorderGetTimeBetweenEventsInMilliSecond()
                                               / 0x3E8;
  if (*(unsigned char *)(a1[8] + 40)) {
    CFTypeID v3 = (const void **)MEMORY[0x1E4F1CFD0];
  }
  else {
    CFTypeID v3 = (const void **)MEMORY[0x1E4F1CFC8];
  }
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(void *)(a1[6] + 8) + 24), @"APCarPlay_isWireless", *v3);
  CFDictionarySetInt64();
  CFTypeRef result = *(CFTypeRef *)(a1[8] + 240);
  if (result) {
    CFTypeRef result = CFRetain(result);
  }
  *(void *)(*(void *)(a1[7] + 8) + 24) = result;
  return result;
}

void __carEndpoint_postSessionStatistics_block_invoke_2(uint64_t a1, uint64_t a2)
{
  CFTypeRef v14 = 0;
  CFTypeRef cf = 0;
  CFAllocatorRef v4 = CFGetAllocator(*(CFTypeRef *)(a1 + 64));
  uint64_t CMBaseObject = FigEndpointStreamGetCMBaseObject();
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  CFStringRef v8 = *(void (**)(uint64_t, void, CFAllocatorRef, CFTypeRef *))(v7 + 48);
  if (v8) {
    v8(CMBaseObject, *MEMORY[0x1E4F21368], v4, &cf);
  }
  CFAllocatorRef v9 = CFGetAllocator(*(CFTypeRef *)(a1 + 64));
  uint64_t v10 = FigEndpointStreamGetCMBaseObject();
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(void (**)(uint64_t, void, CFAllocatorRef, CFTypeRef *))(v12 + 48);
  if (v13) {
    v13(v10, *MEMORY[0x1E4F213B0], v9, &v14);
  }
  if (*(unsigned char *)(a2 + 48) == 1
    && CFEqual(*(CFStringRef *)(a2 + 24), @"StreamInfo_Screen")
    && (*(void *)(a2 + 32) & 0x8000000000000000) == 0)
  {
    carEndpoint_powerLogDisplay(*(const void **)(a1 + 64), a2, 0);
  }
  if (!FigCFEqual())
  {
    carEndpoint_updateStreamResumedTimeIfNeeded(*(void *)(a1 + 64), a2);
    if (gLogCategory_APEndpointCarPlay <= 50
      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      AppendPrintF();
    }
    if (FigCFEqual()
      || FigCFEqual()
      || FigCFEqual()
      || FigCFEqual()
      || FigCFEqual()
      || FigCFEqual()
      || FigCFEqual()
      || FigCFEqual()
      || FigCFEqual()
      || FigCFEqual()
      || FigCFEqual()
      || FigCFEqual())
    {
      CFDictionarySetDouble();
    }
  }
  if (FigCFEqual())
  {
    CFDictionarySetInt64();
  }
  else if (FigCFEqual())
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) += *(_DWORD *)(a2 + 64);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v14) {
    CFRelease(v14);
  }
}

uint64_t __carEndpoint_postSessionStatistics_block_invoke_3(uint64_t a1)
{
  uint64_t result = *(void *)(*(void *)(a1 + 40) + 448);
  if (result) {
    return CFDictionaryApplyBlock();
  }
  return result;
}

void __carEndpoint_postSessionStatistics_block_invoke_4(uint64_t a1, const void *a2, const void *a3)
{
}

uint64_t __carEndpoint_resetEventRecorderEventsAndStatistics_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 32) + 428) = 0;
  return result;
}

uint64_t carEndpoint_unsubscribeAndInvalidateRCS()
{
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t result = FigEndpointRemoteControlSessionGetCMBaseObject();
  if (result)
  {
    uint64_t v1 = result;
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v4 = *(void *)(VTable + 8);
    uint64_t result = VTable + 8;
    uint64_t v3 = v4;
    uint64_t v5 = v4 ? v3 : 0;
    uint64_t v6 = *(uint64_t (**)(uint64_t))(v5 + 24);
    if (v6)
    {
      return v6(v1);
    }
  }
  return result;
}

void carEndpoint_handleRCSClosed(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v14 = 0;
  uint64_t CMBaseObject = FigEndpointRemoteControlSessionGetCMBaseObject();
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(unsigned int (**)(uint64_t, __CFString *, void, CFTypeRef *))(v9 + 48);
  if (!v10 || v10(CMBaseObject, @"SessionID", *MEMORY[0x1E4F1CF80], &v14))
  {
    APSLogErrorAt();
  }
  else
  {
    if (a2) {
      CFRetain(a2);
    }
    if (v14)
    {
      CFRetain(v14);
      CFTypeRef v11 = v14;
    }
    else
    {
      CFTypeRef v11 = 0;
    }
    uint64_t v12 = *(NSObject **)(DerivedStorage + 144);
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 0x40000000;
    v13[2] = __carEndpoint_handleRCSClosed_block_invoke;
    v13[3] = &__block_descriptor_tmp_996;
    v13[4] = v11;
    v13[5] = a4;
    v13[6] = a2;
    dispatch_async(v12, v13);
  }
  if (v14) {
    CFRelease(v14);
  }
}

void __carEndpoint_handleRCSClosed_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 32);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 440), v2);
  uint64_t v4 = (const void **)(DerivedStorage + 72);
  if (FigCFEqual()
    || (uint64_t v4 = (const void **)(DerivedStorage + 88), FigCFEqual())
    || (uint64_t v4 = (const void **)(DerivedStorage + 96), FigCFEqual())
    || (uint64_t v4 = (const void **)(DerivedStorage + 112), FigCFEqual()))
  {
    uint64_t v5 = *v4;
    if (!*v4) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v8 = (const void **)(DerivedStorage + 128);
  if (FigCFEqual())
  {
    uint64_t v5 = *v8;
    uint64_t v4 = v8;
    if (*v8)
    {
LABEL_10:
      CFRelease(v5);
      *uint64_t v4 = 0;
    }
  }
LABEL_11:
  uint64_t v6 = *(const void **)(a1 + 48);
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = *(const void **)(a1 + 32);
  if (v7)
  {
    CFRelease(v7);
  }
}

uint64_t carEndpoint_RequestCarUI(const void *a1, uint64_t a2, const __CFURL *a3)
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    goto LABEL_17;
  }
  CFMutableDictionaryRef v6 = Mutable;
  if (!a3) {
    goto LABEL_10;
  }
  CFStringRef v7 = CFURLGetString(a3);
  if (v7)
  {
    a3 = (const __CFURL *)v7;
    uint64_t v8 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v8)
    {
      CFMutableDictionaryRef v6 = v8;
      CFDictionarySetValue(v8, @"url", a3);
LABEL_10:
      uint64_t v9 = carEndpoint_sendCommandInternal(a1, @"requestUI", v6, 0, 0);
      if (v9) {
        APSLogErrorAt();
      }
      else {
        carEndpoint_recordRequestUI((uint64_t)a1, (const __CFString *)a3, 0);
      }
      goto LABEL_12;
    }
LABEL_17:
    APSLogErrorAt();
    return 4294950575;
  }
  APSLogErrorAt();
  uint64_t v9 = 4294950576;
LABEL_12:
  CFRelease(v6);
  return v9;
}

uint64_t carEndpoint_DisableBluetooth(uint64_t a1, const void *a2)
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a2)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      uint64_t v5 = Mutable;
      CFDictionarySetValue(Mutable, @"deviceID", a2);
      uint64_t v6 = carEndpoint_packetizeCommandAndSend(a1, @"disableBluetooth", v5);
      if (v6) {
        APSLogErrorAt();
      }
      CFRelease(v5);
    }
    else
    {
      APSLogErrorAt();
      return 4294950575;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294950576;
  }
  return v6;
}

uint64_t carEndpoint_DuckAudio(const void *a1, const __CFDictionary *a2)
{
  uint64_t v23 = 0;
  int v24 = &v23;
  uint64_t v25 = 0x2000000000;
  int v26 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  void block[8] = 0;
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!a2)
  {
    APSLogErrorAt();
    uint64_t v15 = v24;
    uint64_t v13 = 4294950576;
LABEL_27:
    *((_DWORD *)v15 + 6) = v13;
    goto LABEL_24;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    APSLogErrorAt();
    uint64_t v15 = v24;
    uint64_t v13 = 4294950575;
    goto LABEL_27;
  }
  CFMutableDictionaryRef v6 = Mutable;
  if (FigCFDictionaryGetDoubleIfPresent()) {
    CFDictionarySetDouble();
  }
  if (FigCFDictionaryGetDoubleIfPresent()) {
    CFDictionarySetDouble();
  }
  unint64_t Value = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F20560]);
  if (!Value)
  {
    APSLogErrorAt();
    *((_DWORD *)v24 + 6) = -16720;
    goto LABEL_23;
  }
  uint64_t v8 = Value;
  if (!CFEqual(Value, (CFTypeRef)*MEMORY[0x1E4F20550]))
  {
    if (CFEqual(v8, (CFTypeRef)*MEMORY[0x1E4F20558]))
    {
      uint64_t v18 = 0;
      uint64_t v19 = &v18;
      uint64_t v20 = 0x2000000000;
      uint64_t v21 = 0;
      uint64_t v10 = *(NSObject **)(DerivedStorage + 144);
      v17[0] = MEMORY[0x1E4F143A8];
      v17[1] = 0x40000000;
      void v17[2] = __carEndpoint_DuckAudio_block_invoke_2;
      v17[3] = &unk_1E6894C90;
      v17[5] = DerivedStorage;
      v17[6] = a1;
      v17[4] = &v18;
      dispatch_sync(v10, v17);
      if (v19[3])
      {
        CFTypeRef v11 = *(NSObject **)(DerivedStorage + 144);
        v16[0] = MEMORY[0x1E4F143A8];
        v16[1] = 0x40000000;
        v16[2] = __carEndpoint_DuckAudio_block_invoke_3;
        CGRect v16[3] = &unk_1E6894CD8;
        v16[6] = a1;
        v16[7] = v6;
        v16[4] = &v18;
        v16[5] = DerivedStorage;
        v16[8] = a1;
        dispatch_sync(v11, v16);
      }
      else
      {
        int v12 = carEndpoint_sendCommandInternal(a1, @"unduckAudio", v6, 0, 0);
        *((_DWORD *)v24 + 6) = v12;
        if (v12) {
          APSLogErrorAt();
        }
      }
      _Block_object_dispose(&v18, 8);
      goto LABEL_23;
    }
    *((_DWORD *)v24 + 6) = -16720;
    goto LABEL_19;
  }
  uint64_t v9 = *(NSObject **)(DerivedStorage + 144);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __carEndpoint_DuckAudio_block_invoke;
  block[3] = &unk_1E6894C68;
  void block[4] = &v23;
  void block[5] = DerivedStorage;
  void block[6] = a1;
  void block[7] = v6;
  dispatch_sync(v9, block);
  if (*((_DWORD *)v24 + 6)) {
LABEL_19:
  }
    APSLogErrorAt();
LABEL_23:
  CFRelease(v6);
  uint64_t v13 = *((unsigned int *)v24 + 6);
LABEL_24:
  _Block_object_dispose(&v23, 8);
  return v13;
}

uint64_t carEndpoint_SetHIDInputMode(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  if (a2) {
    CFRetain(a2);
  }
  if (a3) {
    CFRetain(a3);
  }
  CFStringRef v7 = *(NSObject **)(DerivedStorage + 144);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  v9[2] = __carEndpoint_SetHIDInputMode_block_invoke;
  v9[3] = &__block_descriptor_tmp_1046;
  v9[4] = DerivedStorage;
  v9[5] = a2;
  v9[6] = a3;
  void v9[7] = a1;
  dispatch_async(v7, v9);
  return 0;
}

uint64_t carEndpoint_CopyHIDInputMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = 0;
  int v12 = &v11;
  uint64_t v13 = 0x2000000000;
  int v14 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFStringRef v7 = *(NSObject **)(DerivedStorage + 144);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 0x40000000;
  v10[2] = __carEndpoint_CopyHIDInputMode_block_invoke;
  _OWORD v10[3] = &unk_1E6894D20;
  v10[4] = &v11;
  v10[5] = DerivedStorage;
  v10[6] = a2;
  void v10[7] = a4;
  dispatch_sync(v7, v10);
  uint64_t v8 = 0;
  if (*((_DWORD *)v12 + 6))
  {
    APSLogErrorAt();
    uint64_t v8 = *((unsigned int *)v12 + 6);
  }
  _Block_object_dispose(&v11, 8);
  return v8;
}

uint64_t carEndpoint_SendCommand(const void *a1, const __CFString *a2, const void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  if (!FigServer_IsAirplayd() || CFStringCompare(a2, @"modesChanged", 0))
  {
    uint64_t v11 = carEndpoint_validateRuntimeFeaturesWithAccessory((uint64_t)a1, a2, 1);
    if (!v11)
    {
      if (gLogCategory_APEndpointCarPlay <= 50
        && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (a2)
      {
        uint64_t v12 = carEndpoint_sendCommandInternal(a1, a2, a3, 0, 0);
        uint64_t v13 = 0;
        if (v12)
        {
          uint64_t v17 = v12;
          APSLogErrorAt();
          uint64_t v13 = v17;
        }
      }
      else
      {
        APSLogErrorAt();
        uint64_t v13 = 4294950576;
      }
      goto LABEL_14;
    }
    uint64_t v13 = v11;
LABEL_31:
    APSLogErrorAt();
    goto LABEL_14;
  }
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CMBaseObjectGetDerivedStorage();
  memset(v20, 0, sizeof(v20));
  uint64_t StructRepresentation = APStarkModeCreateStructRepresentation((CFDictionaryRef)a3, v20);
  if (StructRepresentation)
  {
    uint64_t v13 = StructRepresentation;
    goto LABEL_31;
  }
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  carEndpoint_takeActionOnModeChanges(a1, v20);
  uint64_t v13 = carEndpoint_packetizeCommandAndSend((uint64_t)a1, @"modesChanged", a3);
  if (gLogCategory_APEndpointCarPlay <= 20
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
LABEL_14:
  if (a4)
  {
    CFRetain(a1);
    int v14 = *DerivedStorage;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __carEndpoint_SendCommand_block_invoke;
    block[3] = &__block_descriptor_tmp_1050;
    void block[4] = a4;
    void block[5] = a1;
    int v19 = v13;
    void block[6] = a5;
    dispatch_async(v14, block);
  }
  return v13;
}

uint64_t carEndpoint_CreateRemoteControlSession(uint64_t a1, const __CFDictionary *a2, uint64_t a3)
{
  uint64_t v25 = 0;
  int v26 = &v25;
  uint64_t v27 = 0x2000000000;
  int v28 = 0;
  uint64_t FigEndpoint = FigEndpointExtendedGetFigEndpoint();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v21 = 0;
  uint64_t v22 = &v21;
  uint64_t v23 = 0x2000000000;
  uint64_t v24 = 0;
  if (!a3
    || (uint64_t v8 = DerivedStorage,
        (CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F204C0])) == 0))
  {
    APSLogErrorAt();
    uint64_t v18 = v26;
    uint64_t v16 = 4294950576;
LABEL_25:
    *((_DWORD *)v18 + 6) = v16;
    goto LABEL_22;
  }
  CFStringRef v10 = Value;
  CFStringRef v11 = (const __CFString *)*MEMORY[0x1E4F204A8];
  if (CFStringCompare(Value, (CFStringRef)*MEMORY[0x1E4F204A8], 0))
  {
    CFStringRef v11 = (const __CFString *)*MEMORY[0x1E4F20498];
    if (CFStringCompare(v10, (CFStringRef)*MEMORY[0x1E4F20498], 0))
    {
      CFStringRef v11 = (const __CFString *)*MEMORY[0x1E4F204A0];
      if (CFStringCompare(v10, (CFStringRef)*MEMORY[0x1E4F204A0], 0))
      {
        CFStringRef v11 = (const __CFString *)*MEMORY[0x1E4F20490];
        if (CFStringCompare(v10, (CFStringRef)*MEMORY[0x1E4F20490], 0))
        {
          CFStringRef v11 = (const __CFString *)*MEMORY[0x1E4F20488];
          if (CFStringCompare(v10, (CFStringRef)*MEMORY[0x1E4F20488], 0))
          {
            if (gLogCategory_APEndpointCarPlay <= 90
              && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            uint64_t v18 = v26;
            uint64_t v16 = 4294960561;
            goto LABEL_25;
          }
          if (*(unsigned char *)(v8 + 120))
          {
            uint64_t v12 = (uint64_t *)(v8 + 128);
            goto LABEL_21;
          }
          goto LABEL_27;
        }
        if (*(unsigned char *)(v8 + 104))
        {
          uint64_t v12 = (uint64_t *)(v8 + 112);
          goto LABEL_21;
        }
LABEL_27:
        APSLogErrorAt();
        uint64_t v18 = v26;
        uint64_t v16 = 4294949690;
        goto LABEL_25;
      }
      if (!*(unsigned char *)(v8 + 80)) {
        goto LABEL_27;
      }
      uint64_t v12 = (uint64_t *)(v8 + 96);
    }
    else
    {
      if (!*(unsigned char *)(v8 + 80)) {
        goto LABEL_27;
      }
      uint64_t v12 = (uint64_t *)(v8 + 88);
    }
  }
  else
  {
    if (!*(unsigned char *)(v8 + 65)) {
      goto LABEL_27;
    }
    uint64_t v12 = (uint64_t *)(v8 + 72);
  }
LABEL_21:
  uint64_t v13 = *v12;
  v22[3] = (uint64_t)v12;
  int v14 = computeLogStringForRCSClientType(v11);
  uint64_t v15 = *(NSObject **)(v8 + 144);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __carEndpoint_CreateRemoteControlSession_block_invoke;
  block[3] = &unk_1E6894D68;
  void block[6] = v8;
  void block[7] = FigEndpoint;
  BOOL v20 = v13 != 0;
  void block[8] = v10;
  void block[9] = a3;
  void block[4] = &v25;
  void block[5] = &v21;
  void block[10] = v14;
  void block[11] = a1;
  block[12] = a2;
  dispatch_sync(v15, block);
  uint64_t v16 = *((unsigned int *)v26 + 6);
LABEL_22:
  _Block_object_dispose(&v21, 8);
  _Block_object_dispose(&v25, 8);
  return v16;
}

uint64_t carEndpoint_CreateCommChannel(uint64_t a1, const __CFDictionary *a2, void *a3)
{
  uint64_t v27 = 0;
  int v28 = &v27;
  uint64_t v29 = 0x2000000000;
  int v30 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = &v23;
  uint64_t v25 = 0x2000000000;
  uint64_t v26 = 0;
  uint64_t v19 = 0;
  BOOL v20 = &v19;
  uint64_t v21 = 0x2000000000;
  uint64_t v22 = 0;
  uint64_t FigEndpoint = FigEndpointExtendedGetFigEndpoint();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F204C0]);
  if (!Value)
  {
    APSLogErrorAt();
    uint64_t v16 = v28;
    int v17 = -16720;
LABEL_33:
    *((_DWORD *)v16 + 6) = v17;
    goto LABEL_28;
  }
  CFStringRef v9 = Value;
  if (CFEqual(Value, (CFStringRef)*MEMORY[0x1E4F204A8]))
  {
    if (*(unsigned char *)(DerivedStorage + 65))
    {
      uint64_t v10 = DerivedStorage + 72;
      if (!*(void *)(DerivedStorage + 72)) {
        goto LABEL_24;
      }
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (CFEqual(v9, (CFStringRef)*MEMORY[0x1E4F20498]))
  {
    if (*(unsigned char *)(DerivedStorage + 80))
    {
      uint64_t v10 = DerivedStorage + 88;
      if (!*(void *)(DerivedStorage + 88)) {
        goto LABEL_24;
      }
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (CFEqual(v9, (CFStringRef)*MEMORY[0x1E4F204A0]))
  {
    if (*(unsigned char *)(DerivedStorage + 80))
    {
      uint64_t v10 = DerivedStorage + 96;
      if (!*(void *)(DerivedStorage + 96)) {
        goto LABEL_24;
      }
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (CFEqual(v9, (CFStringRef)*MEMORY[0x1E4F20490]))
  {
    if (*(unsigned char *)(DerivedStorage + 104))
    {
      uint64_t v10 = DerivedStorage + 112;
      if (!*(void *)(DerivedStorage + 112)) {
        goto LABEL_24;
      }
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (CFStringCompare(v9, (CFStringRef)*MEMORY[0x1E4F20488], 0))
  {
    if (gLogCategory_APEndpointCarPlay <= 90
      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    uint64_t v16 = v28;
    int v17 = -6735;
    goto LABEL_33;
  }
  if (!*(unsigned char *)(DerivedStorage + 120))
  {
LABEL_35:
    APSLogErrorAt();
    uint64_t v16 = v28;
    int v17 = -17606;
    goto LABEL_33;
  }
  uint64_t v10 = DerivedStorage + 128;
  if (*(void *)(DerivedStorage + 128))
  {
LABEL_36:
    APSLogErrorAt();
    uint64_t v16 = v28;
    int v17 = -16727;
    goto LABEL_33;
  }
LABEL_24:
  v24[3] = v10;
  CFStringRef v11 = *(NSObject **)(DerivedStorage + 144);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __carEndpoint_CreateCommChannel_block_invoke;
  block[3] = &unk_1E6894D90;
  void block[4] = &v27;
  void block[5] = &v19;
  void block[6] = &v23;
  void block[7] = a1;
  void block[8] = a2;
  void block[9] = FigEndpoint;
  dispatch_sync(v11, block);
  if (a3)
  {
    CFTypeRef v12 = *(CFTypeRef *)v24[3];
    if (v12) {
      CFTypeRef v12 = CFRetain(v12);
    }
    *a3 = v12;
  }
LABEL_28:
  uint64_t v13 = (const void *)v20[3];
  if (v13) {
    CFRelease(v13);
  }
  uint64_t v14 = *((unsigned int *)v28 + 6);
  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v23, 8);
  _Block_object_dispose(&v27, 8);
  return v14;
}

uint64_t carEndpoint_SendData(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a5)
{
  uint64_t v17 = 0;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x2000000000;
  int v20 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  v16[0] = 0;
  v16[1] = v16;
  v16[2] = 0x2000000000;
  CGRect v16[3] = 0;
  v15[0] = 0;
  v15[1] = v15;
  v15[2] = 0x2000000000;
  v15[3] = 0;
  if (a2)
  {
    CFStringRef v11 = *(NSObject **)(DerivedStorage + 144);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __carEndpoint_SendData_block_invoke;
    block[3] = &unk_1E6894DE0;
    void block[4] = v16;
    void block[5] = &v17;
    void block[6] = v15;
    void block[7] = DerivedStorage;
    void block[8] = a2;
    void block[9] = a1;
    void block[10] = a4;
    void block[11] = a5;
    block[12] = a3;
    dispatch_sync(v11, block);
    uint64_t v12 = *((unsigned int *)v18 + 6);
    if (!a4) {
      goto LABEL_5;
    }
  }
  else
  {
    APSLogErrorAt();
    uint64_t v12 = 4294950576;
    *((_DWORD *)v18 + 6) = -16720;
    if (!a4) {
      goto LABEL_5;
    }
  }
  if (v12)
  {
    a4(a1, a2, v12, a5);
    uint64_t v12 = *((unsigned int *)v18 + 6);
  }
LABEL_5:
  _Block_object_dispose(v15, 8);
  _Block_object_dispose(v16, 8);
  _Block_object_dispose(&v17, 8);
  return v12;
}

uint64_t carEndpoint_CloseCommChannel(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = 0;
  CFStringRef v11 = &v10;
  uint64_t v12 = 0x2000000000;
  int v13 = 0;
  FigEndpointExtendedGetFigEndpoint();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9[0] = 0;
  v9[1] = v9;
  v9[2] = 0x2000000000;
  v9[3] = 0;
  if (a2)
  {
    uint64_t v5 = *(NSObject **)(DerivedStorage + 144);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __carEndpoint_CloseCommChannel_block_invoke;
    block[3] = &unk_1E6894E08;
    void block[6] = a2;
    void block[7] = a1;
    void block[8] = DerivedStorage;
    void block[4] = &v10;
    void block[5] = v9;
    dispatch_sync(v5, block);
    uint64_t v6 = *((unsigned int *)v11 + 6);
  }
  else
  {
    APSLogErrorAt();
    uint64_t v6 = 4294950576;
    *((_DWORD *)v11 + 6) = -16720;
  }
  _Block_object_dispose(v9, 8);
  _Block_object_dispose(&v10, 8);
  return v6;
}

uint64_t carEndpoint_RequestViewArea(const void *a1, const void *a2, uint64_t a3)
{
  CMBaseObjectGetDerivedStorage();
  if (carEndpoint_validateViewAreaParams((uint64_t)a1, a2, a3, 0)
    || (CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) == 0)
  {
    APSLogErrorAt();
  }
  else
  {
    CFStringRef v7 = Mutable;
    CFDictionarySetValue(Mutable, @"uuid", a2);
    CFDictionarySetInt64();
    if (carEndpoint_sendCommandInternal(a1, @"requestViewArea", v7, 0, 0))
    {
      APSLogErrorAt();
    }
    else if (gLogCategory_APEndpointCarPlay <= 50 {
           && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    }
    {
      LogPrintF();
    }
    CFRelease(v7);
  }
  return 0;
}

uint64_t carEndpoint_CopyCurrentViewArea(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v18 = 0;
  uint64_t v19 = &v18;
  uint64_t v20 = 0x2000000000;
  int v21 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x2000000000;
  uint64_t v17 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 59))
  {
    CFStringRef v7 = *(NSObject **)(DerivedStorage + 144);
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 0x40000000;
    v13[2] = __carEndpoint_CopyCurrentViewArea_block_invoke;
    v13[3] = &unk_1E6894E30;
    v13[6] = a1;
    void v13[7] = a2;
    v13[4] = &v18;
    v13[5] = &v14;
    dispatch_sync(v7, v13);
  }
  uint64_t v8 = v15;
  CFTypeRef v9 = (CFTypeRef)v15[3];
  if (v9)
  {
    CFTypeRef v9 = CFRetain(v9);
    uint64_t v8 = v15;
  }
  *a3 = v9;
  uint64_t v10 = (const void *)v8[3];
  if (v10) {
    CFRelease(v10);
  }
  uint64_t v11 = *((unsigned int *)v19 + 6);
  _Block_object_dispose(&v14, 8);
  _Block_object_dispose(&v18, 8);
  return v11;
}

uint64_t carEndpoint_AcquireAndCopyResource(uint64_t a1, uint64_t a2, const __CFDictionary *a3, void *a4)
{
  uint64_t FigEndpoint = FigEndpointExtendedGetFigEndpoint();
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (FigCFEqual())
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v17 = 0;
    uint64_t v18 = &v17;
    uint64_t v19 = 0x2000000000;
    uint64_t v20 = 0;
    CFStringRef Value = CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E4F202F8]);
    if (Value)
    {
      CFTypeRef v9 = *(NSObject **)(DerivedStorage + 144);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __carEndpoint_acquireAndCopyEndpointStream_block_invoke;
      block[3] = &unk_1E6894E58;
      void block[4] = &v17;
      void block[5] = Value;
      void block[6] = FigEndpoint;
      dispatch_sync(v9, block);
      uint64_t v10 = v18[3];
      if (v10)
      {
        CFTypeRef v11 = *(CFTypeRef *)(v10 + 16);
        if (v11) {
          CFTypeRef v11 = CFRetain(v11);
        }
        uint64_t v12 = 0;
        *a4 = v11;
        char v13 = 1;
      }
      else
      {
        APSLogErrorAt();
        char v13 = 0;
        uint64_t v12 = 4294960587;
      }
    }
    else
    {
      APSLogErrorAt();
      char v13 = 0;
      uint64_t v12 = 4294950576;
    }
    uint64_t v14 = (const void *)v18[3];
    if (v14) {
      CFRelease(v14);
    }
    _Block_object_dispose(&v17, 8);
    if (v13) {
      return 0;
    }
    APSLogErrorAt();
  }
  else
  {
    if (gLogCategory_APEndpointCarPlay > 90) {
      return 4294960561;
    }
    if (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()) {
      LogPrintF();
    }
    uint64_t v12 = 4294960561;
  }
  if (gLogCategory_APEndpointCarPlay <= 90
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v12;
}

uint64_t carEndpoint_RelinquishResource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  FigEndpointExtendedGetFigEndpoint();
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!a3)
  {
    uint64_t v4 = 4294950576;
LABEL_11:
    APSLogErrorAt();
    return v4;
  }
  if (!FigCFEqual())
  {
    uint64_t v4 = 4294960561;
    goto LABEL_11;
  }
  return 0;
}

uint64_t carEndpoint_packetizeCommandAndSend(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v33 = 0;
  int v34 = &v33;
  uint64_t v35 = 0x2000000000;
  uint64_t v36 = 0;
  uint64_t v32 = 0;
  v31.tv_sec = 0;
  *(void *)&v31.tv_usec = 0;
  CFTypeRef cf = 0;
  if (carEndpoint_isDissociated(DerivedStorage))
  {
    CFDataRef Data = 0;
    uint64_t v8 = 0;
    goto LABEL_43;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v8 = Mutable;
  if (Mutable)
  {
    CFDictionarySetValue(Mutable, @"type", a2);
    if (a3) {
      CFDictionarySetValue(v8, @"params", a3);
    }
    CFDataRef Data = CFPropertyListCreateData(0, v8, kCFPropertyListBinaryFormat_v1_0, 0, 0);
    if (Data)
    {
      uint64_t BlockBufferWithCFDataNoCopy = FigCreateBlockBufferWithCFDataNoCopy();
      if (BlockBufferWithCFDataNoCopy)
      {
        uint64_t v12 = BlockBufferWithCFDataNoCopy;
        goto LABEL_26;
      }
      if (gLogCategory_APEndpointCarPlay <= 20
        && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      CFTypeRef v11 = *(NSObject **)(DerivedStorage + 144);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __carEndpoint_packetizeCommandAndSend_block_invoke;
      block[3] = &unk_1E6894C40;
      void block[4] = &v33;
      void block[5] = DerivedStorage;
      dispatch_sync(v11, block);
      uint64_t v12 = v34[3];
      if (!v12) {
        goto LABEL_44;
      }
      uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v13) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t v15 = *(unsigned int (**)(uint64_t))(v14 + 16);
      if (v15 && v15(v12))
      {
        uint64_t CMBaseObject = APSenderSessionGetCMBaseObject(v34[3]);
        uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v17) {
          uint64_t v18 = v17;
        }
        else {
          uint64_t v18 = 0;
        }
        uint64_t v19 = *(uint64_t (**)(uint64_t, __CFString *, void, const void **))(v18 + 48);
        if (v19)
        {
          uint64_t v20 = v19(CMBaseObject, @"TransportControlStream", 0, &v32);
          if (!v20)
          {
            if (gLogCategory_APEndpointCarPlay <= 30
              && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            gettimeofday(&v31, 0);
            uint64_t v22 = v32;
            CFTypeRef v23 = cf;
            uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v24) {
              uint64_t v25 = v24;
            }
            else {
              uint64_t v25 = 0;
            }
            uint64_t v26 = *(uint64_t (**)(const void *, uint64_t, CFTypeRef))(v25 + 48);
            if (v26) {
              uint64_t v12 = v26(v22, 1668246893, v23);
            }
            else {
              uint64_t v12 = 4294954514;
            }
            CFDataGetLength(Data);
            carEndpoint_sendCommandInfoAppend(a1, (uint64_t)a2, (uint64_t)&v31);
            if (v12) {
              goto LABEL_26;
            }
LABEL_44:
            int v21 = v32;
            if (!v32) {
              goto LABEL_46;
            }
            goto LABEL_45;
          }
          uint64_t v12 = v20;
        }
        else
        {
          uint64_t v12 = 4294954514;
        }
LABEL_26:
        APSLogErrorAt();
        goto LABEL_27;
      }
LABEL_43:
      uint64_t v12 = 0;
      goto LABEL_44;
    }
    APSLogErrorAt();
  }
  else
  {
    APSLogErrorAt();
    CFDataRef Data = 0;
  }
  uint64_t v12 = 4294950575;
LABEL_27:
  int v21 = v32;
  if (!v32) {
    goto LABEL_46;
  }
  if (gLogCategory_APEndpointCarPlay <= 90)
  {
    if (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()) {
      LogPrintF();
    }
    goto LABEL_44;
  }
LABEL_45:
  CFRelease(v21);
LABEL_46:
  uint64_t v27 = (const void *)v34[3];
  if (v27) {
    CFRelease(v27);
  }
  if (v8) {
    CFRelease(v8);
  }
  if (Data) {
    CFRelease(Data);
  }
  if (cf) {
    CFRelease(cf);
  }
  _Block_object_dispose(&v33, 8);
  return v12;
}

CFTypeRef __carEndpoint_packetizeCommandAndSend_block_invoke(uint64_t a1)
{
  CFTypeRef result = *(CFTypeRef *)(*(void *)(a1 + 40) + 216);
  if (result) {
    CFTypeRef result = CFRetain(result);
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

__CFString *computeLogStringForRCSClientType(const __CFString *a1)
{
  if (CFEqual(a1, (CFStringRef)*MEMORY[0x1E4F210D0])) {
    return @"CarPlayUpdateData";
  }
  if (CFEqual(a1, (CFStringRef)*MEMORY[0x1E4F210B8])) {
    return @"CarPlayLoggingData";
  }
  if (CFEqual(a1, (CFStringRef)*MEMORY[0x1E4F210B0])) {
    return @"CarPlayClusterControl";
  }
  if (CFEqual(a1, (CFStringRef)*MEMORY[0x1E4F210C0])) {
    return @"CarPlayProtocolData";
  }
  if (CFStringCompare(a1, (CFStringRef)*MEMORY[0x1E4F210C8], 0)) {
    return 0;
  }
  return @"CarPlayProtocolData2";
}

uint64_t carEndpoint_createCommChannelInternal(const void *a1, __CFDictionary *a2, CFTypeRef *a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v31 = 0;
  CFTypeRef cf = 0;
  if (gLogCategory_APEndpointCarPlay <= 30
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a2)
  {
    if (!*(unsigned char *)(DerivedStorage + 152))
    {
      CFTypeRef v9 = *(const void **)(DerivedStorage + 216);
      if (!v9 || (CFTypeRef v10 = CFRetain(v9)) == 0)
      {
        APSLogErrorAt();
        a2 = 0;
        uint64_t v14 = 4294950570;
        goto LABEL_41;
      }
      CFTypeRef v11 = v10;
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v12) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v15 = *(unsigned int (**)(const void *))(v13 + 16);
      if (!v15 || !v15(v11))
      {
        APSLogErrorAt();
        a2 = 0;
        uint64_t v14 = 4294950570;
LABEL_40:
        CFRelease(v11);
        goto LABEL_41;
      }
      uint64_t v16 = *MEMORY[0x1E4F1CF80];
      CFMutableDictionaryRef MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
      a2 = MutableCopy;
      if (!MutableCopy) {
        goto LABEL_50;
      }
      uint64_t v18 = (const void *)*MEMORY[0x1E4F1CFD0];
      CFDictionarySetValue(MutableCopy, @"wantsDedicatedSocket", (const void *)*MEMORY[0x1E4F1CFD0]);
      if (CFPrefs_GetInt64()) {
        uint64_t v19 = v18;
      }
      else {
        uint64_t v19 = (const void *)*MEMORY[0x1E4F1CFC8];
      }
      CFDictionarySetValue(a2, @"publishEncryptionKeyDiagnosticMode", v19);
      CFDictionarySetInt64();
      CFAllocatorRef v20 = CFGetAllocator(a1);
      uint64_t v21 = APEndpointRemoteControlSessionCreate(v20, v11, *(void *)(DerivedStorage + 32), a2, 2, &v31);
      if (v21)
      {
        uint64_t v14 = v21;
        APSLogErrorAt();
        goto LABEL_40;
      }
      if (!*(void *)(DerivedStorage + 440))
      {
        CFAllocatorRef v22 = CFGetAllocator(a1);
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v22, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        *(void *)(DerivedStorage + 440) = Mutable;
        if (!Mutable)
        {
LABEL_50:
          APSLogErrorAt();
          uint64_t v14 = 4294950575;
          goto LABEL_40;
        }
      }
      uint64_t CMBaseObject = FigEndpointRemoteControlSessionGetCMBaseObject();
      uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v25) {
        uint64_t v26 = v25;
      }
      else {
        uint64_t v26 = 0;
      }
      uint64_t v27 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v26 + 48);
      if (v27)
      {
        uint64_t v28 = v27(CMBaseObject, @"SessionID", v16, &cf);
        if (!v28)
        {
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterAddWeakListener();
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 440), cf, v31);
          if (gLogCategory_APEndpointCarPlay <= 50
            && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          if (a3)
          {
            *a3 = v31;
            CFTypeRef v31 = 0;
          }
          CFTypeRef v29 = cf;
          uint64_t v14 = 0;
          if (a4)
          {
            *a4 = cf;
            CFTypeRef cf = 0;
            goto LABEL_40;
          }
LABEL_33:
          if (v29) {
            CFRelease(v29);
          }
          goto LABEL_40;
        }
        uint64_t v14 = v28;
      }
      else
      {
        uint64_t v14 = 4294954514;
      }
      APSLogErrorAt();
      CFTypeRef v29 = cf;
      goto LABEL_33;
    }
    APSLogErrorAt();
    a2 = 0;
    uint64_t v14 = 4294950573;
  }
  else
  {
    APSLogErrorAt();
    uint64_t v14 = 4294950576;
  }
LABEL_41:
  if (v31) {
    CFRelease(v31);
  }
  if (a2) {
    CFRelease(a2);
  }
  return v14;
}

void carEndpoint_handleRemoteControlSessionEvent(uint64_t a1, const void *a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFStringRef v26 = 0;
  CFTypeRef v27 = 0;
  uint64_t v22 = 0;
  CFTypeRef v23 = &v22;
  uint64_t v24 = 0x2000000000;
  uint64_t v25 = 0;
  uint64_t CMBaseObject = FigEndpointRemoteControlSessionGetCMBaseObject();
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  CFTypeRef v11 = *(unsigned int (**)(uint64_t, __CFString *, void, CFTypeRef *))(v10 + 48);
  if (!v11
    || v11(CMBaseObject, @"SessionID", 0, &v27)
    || ((uint64_t v12 = FigEndpointRemoteControlSessionGetCMBaseObject(), (v13 = *(void *)(CMBaseObjectGetVTable() + 8)) == 0)
      ? (uint64_t v14 = 0)
      : (uint64_t v14 = v13),
        (uint64_t v15 = *(unsigned int (**)(uint64_t, __CFString *, void, const __CFString **))(v14 + 48)) == 0
     || v15(v12, @"clientTypeUUID", 0, &v26)))
  {
    APSLogErrorAt();
LABEL_24:
    if (gLogCategory_APEndpointCarPlay <= 90
      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_67;
  }
  if (CFStringCompare(v26, (CFStringRef)*MEMORY[0x1E4F210D0], 0)
    && CFStringCompare(v26, (CFStringRef)*MEMORY[0x1E4F210B8], 0)
    && CFStringCompare(v26, (CFStringRef)*MEMORY[0x1E4F210B0], 0)
    && CFStringCompare(v26, (CFStringRef)*MEMORY[0x1E4F210C0], 0)
    && CFStringCompare(v26, (CFStringRef)*MEMORY[0x1E4F210C8], 0))
  {
    goto LABEL_67;
  }
  uint64_t v16 = DerivedStorage[18];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __carEndpoint_handleRemoteControlSessionEvent_block_invoke;
  block[3] = &unk_1E6894DB8;
  void block[4] = &v22;
  void block[5] = DerivedStorage;
  dispatch_sync(v16, block);
  if (!DerivedStorage[24] || v23[3])
  {
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21138]) && *(void *)((char *)DerivedStorage + 172))
    {
      if (a4) {
        CFRetain(a4);
      }
      if (v27) {
        CFRetain(v27);
      }
      if (a3) {
        CFRetain(a3);
      }
      uint64_t v17 = (const void *)v23[3];
      if (v17) {
        CFRetain(v17);
      }
      APSDispatchAsyncFHelper();
      if (gLogCategory_APEndpointCarPlay > 10
        || gLogCategory_APEndpointCarPlay == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_63;
      }
      computeLogStringForRCSClientType(v26);
      if (a3) {
        CFDataGetLength((CFDataRef)a3);
      }
    }
    else
    {
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21140]) && *(void *)((char *)DerivedStorage + 180))
      {
        if (a4) {
          CFRetain(a4);
        }
        if (v27) {
          CFRetain(v27);
        }
        uint64_t v18 = (const void *)v23[3];
        if (v18) {
          CFRetain(v18);
        }
        APSDispatchAsyncFHelper();
        if (gLogCategory_APEndpointCarPlay > 50
          || gLogCategory_APEndpointCarPlay == -1 && !_LogCategory_Initialize())
        {
          goto LABEL_63;
        }
      }
      else if (gLogCategory_APEndpointCarPlay > 90 {
             || gLogCategory_APEndpointCarPlay == -1 && !_LogCategory_Initialize())
      }
      {
        goto LABEL_63;
      }
      computeLogStringForRCSClientType(v26);
    }
    LogPrintF();
LABEL_63:
    char v19 = 1;
    goto LABEL_64;
  }
  if (gLogCategory_APEndpointCarPlay <= 90
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  char v19 = 0;
LABEL_64:
  CFAllocatorRef v20 = (const void *)v23[3];
  if (v20) {
    CFRelease(v20);
  }
  if ((v19 & 1) == 0) {
    goto LABEL_24;
  }
LABEL_67:
  if (v27) {
    CFRelease(v27);
  }
  if (v26) {
    CFRelease(v26);
  }
  _Block_object_dispose(&v22, 8);
}

uint64_t __carEndpoint_handleRemoteControlSessionEvent_block_invoke(uint64_t a1)
{
  uint64_t result = *(void *)(*(void *)(a1 + 40) + 192);
  if (result)
  {
    uint64_t result = FigCFWeakReferenceHolderCopyReferencedObject();
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

void carEndpoint_callDidReceiveDataOverCommChannelDelegate(uint64_t a1)
{
  (*(void (**)(void, void, void, void, void))a1)(*(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40));
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 24);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 32);
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *(const void **)(a1 + 40);
  if (v5)
  {
    CFRelease(v5);
  }
}

void carEndpoint_callDidCloseCommChannelDelegate(uint64_t a1)
{
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  (*(void (**)(void, void, void, void))a1)(*(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32));
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 24);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 32);
  if (v4)
  {
    CFRelease(v4);
  }
}

void carEndpoint_rcsSendMessageCompletion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CMBaseObjectGetDerivedStorage();
  if (*(void *)(a3 + 16))
  {
    CFRetain(*(CFTypeRef *)a3);
    CFRetain(*(CFTypeRef *)(a3 + 8));
    APSDispatchAsyncFHelper();
  }
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(void *)a3) {
    CFRelease(*(CFTypeRef *)a3);
  }
  uint64_t v4 = *(const void **)(a3 + 8);
  if (v4) {
    CFRelease(v4);
  }
  free((void *)a3);
}

void carEndpoint_callCompletionCallback(uint64_t a1)
{
  (*(void (**)(void, void, void, void))(a1 + 16))(*(void *)a1, *(void *)(a1 + 8), *(unsigned int *)(a1 + 32), *(void *)(a1 + 24));
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2)
  {
    CFRelease(v2);
  }
}

CFTypeRef __carEndpoint_acquireAndCopyEndpointStream_block_invoke(uint64_t a1)
{
  if (CFStringCompare(*(CFStringRef *)(a1 + 40), (CFStringRef)*MEMORY[0x1E4F21468], 0)
    && CFStringCompare(*(CFStringRef *)(a1 + 40), (CFStringRef)*MEMORY[0x1E4F21488], 0))
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v5 = 0;
    uint64_t v6 = &v5;
    uint64_t v7 = 0x2000000000;
    uint64_t v8 = 0;
    if (*(void *)(DerivedStorage + 240))
    {
      CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 240));
      CFArrayApplyBlock();
      uint64_t StreamInfoForSubtype = v6[3];
    }
    else
    {
      uint64_t StreamInfoForSubtype = 0;
    }
    _Block_object_dispose(&v5, 8);
  }
  else
  {
    uint64_t StreamInfoForSubtype = carEndpoint_getStreamInfoForSubtype();
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = StreamInfoForSubtype;
  CFTypeRef result = *(CFTypeRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __carEndpoint_getStreamInfoForType_block_invoke(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    CFStringRef theString1 = 0;
    CFAllocatorRef v4 = CFGetAllocator(*(CFTypeRef *)(a1 + 40));
    uint64_t CMBaseObject = FigEndpointStreamGetCMBaseObject();
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(unsigned int (**)(uint64_t, void, CFAllocatorRef, CFStringRef *))(v7 + 48);
    if (v8
      && !v8(CMBaseObject, *MEMORY[0x1E4F21408], v4, &theString1)
      && CFEqual(theString1, *(CFStringRef *)(a1 + 48)))
    {
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
    }
    if (theString1) {
      CFRelease(theString1);
    }
  }
}

uint64_t APAccTransportClientConnectionGetTypeID()
{
  if (gAPAccTransportClientConnectionInitOnce != -1) {
    dispatch_once_f(&gAPAccTransportClientConnectionInitOnce, 0, (dispatch_function_t)_APAccTransportClientConnectionGetTypeID);
  }
  return gAPAccTransportClientConnectionTypeID;
}

uint64_t _APAccTransportClientConnectionGetTypeID()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gAPAccTransportClientConnectionCFTypeID TypeID = result;
  return result;
}

uint64_t APAccTransportClientConnectionCreate(const void *a1, uint64_t *a2)
{
  if (gAPAccTransportClientConnectionInitOnce != -1) {
    dispatch_once_f(&gAPAccTransportClientConnectionInitOnce, 0, (dispatch_function_t)_APAccTransportClientConnectionGetTypeID);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v5 = Instance;
    *(_OWORD *)(Instance + 16) = 0u;
    *(_OWORD *)(Instance + 32) = 0u;
    *(void *)(Instance + 16) = dispatch_queue_create("com.apple.APAccTransportClientConnection", 0);
    if (a1) {
      CFTypeRef v6 = CFRetain(a1);
    }
    else {
      CFTypeRef v6 = 0;
    }
    *(void *)(v5 + 40) = v6;
    if (gLogCategory_APAccTransportClientConnection <= 50
      && (gLogCategory_APAccTransportClientConnection != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    uint64_t result = 0;
    *a2 = v5;
  }
  else
  {
    APSLogErrorAt();
    return 4294960568;
  }
  return result;
}

uint64_t APAccTransportClientConnectionOpen(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  int v9 = 0;
  if (APAccTransportClientConnectionOpen_once != -1) {
    dispatch_once(&APAccTransportClientConnectionOpen_once, &__block_literal_global_24);
  }
  uint64_t v2 = *(NSObject **)(a1 + 16);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __APAccTransportClientConnectionOpen_block_invoke_3;
  void v5[3] = &unk_1E6894EB0;
  v5[4] = &v6;
  void v5[5] = a1;
  dispatch_sync(v2, v5);
  uint64_t v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t __APAccTransportClientConnectionOpen_block_invoke()
{
  return ((uint64_t (*)(uint64_t))softLinkacc_transportClient_serverDisconnectedHandler[0])((uint64_t)&__block_literal_global_8);
}

void __APAccTransportClientConnectionOpen_block_invoke_2()
{
  if (gLogCategory_APAccTransportClientConnection <= 60
    && (gLogCategory_APAccTransportClientConnection != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

void __APAccTransportClientConnectionOpen_block_invoke_3(uint64_t a1)
{
  if (!*(void *)(*(void *)(a1 + 40) + 24))
  {
    CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFUUIDRef v3 = CFUUIDCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
    if (v3)
    {
      CFUUIDRef v4 = v3;
      CFStringRef v5 = CFUUIDCreateString(v2, v3);
      if (v5)
      {
        CFStringRef v6 = v5;
        *(void *)(*(void *)(a1 + 40) + 24) = ((uint64_t (*)(uint64_t, uint64_t))softLinkacc_transportClient_createConnection[0])(5, (uint64_t)v5);
        if (*(void *)(*(void *)(a1 + 40) + 24))
        {
          if (gLogCategory_APAccTransportClientConnection <= 50
            && (gLogCategory_APAccTransportClientConnection != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
        }
        else
        {
          APSLogErrorAt();
          *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = -6700;
        }
        CFRelease(v4);
        uint64_t v7 = v6;
      }
      else
      {
        APSLogErrorAt();
        *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = -6728;
        uint64_t v7 = v4;
      }
      CFRelease(v7);
    }
    else
    {
      APSLogErrorAt();
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = -6728;
    }
  }
}

uint64_t APAccTransportClientConnectionClose(uint64_t a1)
{
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2020000000;
  int v10 = 0;
  v5[0] = 0;
  v5[1] = v5;
  v5[2] = 0x2020000000;
  char v6 = 0;
  uint64_t v1 = *(NSObject **)(a1 + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __APAccTransportClientConnectionClose_block_invoke;
  block[3] = &unk_1E6894ED8;
  void block[5] = v5;
  void block[6] = a1;
  void block[4] = &v7;
  dispatch_sync(v1, block);
  uint64_t v2 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(v5, 8);
  _Block_object_dispose(&v7, 8);
  return v2;
}

void __APAccTransportClientConnectionClose_block_invoke(void *a1)
{
  uint64_t v2 = a1[6];
  if (*(void *)(v2 + 32))
  {
    CFDictionaryApplyBlock();
    uint64_t v2 = a1[6];
  }
  uint64_t v3 = *(void *)(v2 + 24);
  if (v3)
  {
    *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = ((uint64_t (*)(uint64_t))softLinkacc_transportClient_destroyConnection[0])(v3);
    if (*(unsigned char *)(*(void *)(a1[5] + 8) + 24)) {
      int v4 = 50;
    }
    else {
      int v4 = 90;
    }
    if (v4 >= gLogCategory_APAccTransportClientConnection
      && (gLogCategory_APAccTransportClientConnection != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CFStringRef v5 = *(const void **)(a1[6] + 24);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(a1[6] + 24) = 0;
    }
  }
  else
  {
    APSLogErrorAt();
    *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = -6709;
  }
}

void __APAccTransportClientConnectionClose_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(NSObject **)(a3 + 24);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __accTransportClientEndpointInvalidate_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  void block[4] = a3;
  dispatch_sync(v3, block);
}

uint64_t APAccTransportClientConnectionCopyEndpoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  int v11 = 0;
  if (!a1 || !a3 || !a2)
  {
    APSLogErrorAt();
    char v6 = v9;
    uint64_t v4 = 4294960591;
LABEL_9:
    *((_DWORD *)v6 + 6) = v4;
    goto LABEL_6;
  }
  if (!*(void *)(a1 + 24))
  {
    APSLogErrorAt();
    char v6 = v9;
    uint64_t v4 = 4294960587;
    goto LABEL_9;
  }
  uint64_t v3 = *(NSObject **)(a1 + 16);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __APAccTransportClientConnectionCopyEndpoint_block_invoke;
  void v7[3] = &unk_1E6893828;
  void v7[4] = &v8;
  v7[5] = a1;
  void v7[6] = a2;
  v7[7] = a3;
  dispatch_sync(v3, v7);
  uint64_t v4 = *((unsigned int *)v9 + 6);
LABEL_6:
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_1D0A4F508(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void __APAccTransportClientConnectionCopyEndpoint_block_invoke(uint64_t a1)
{
  if (!*(void *)(*(void *)(a1 + 40) + 32)) {
    *(void *)(*(void *)(a1 + 40) + 32) = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v3 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(const char **)(a1 + 48), 0x8000100u);
  CFStringRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(*(void *)(a1 + 40) + 32), v3);
  if (Value)
  {
    CFStringRef v5 = Value;
    CFRetain(Value);
    goto LABEL_24;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  CFDictionaryRef v7 = *(const __CFDictionary **)(v6 + 40);
  if (v7)
  {
    uint64_t v8 = CFDictionaryGetValue(v7, @"authenticationCertificateSerial");
    uint64_t v6 = *(void *)(a1 + 40);
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(const char **)(a1 + 48);
  if (!v9 || (uint64_t v10 = *(const void **)(v6 + 24)) == 0)
  {
    APSLogErrorAt();
    CFStringRef v5 = 0;
    int v14 = -6705;
    goto LABEL_22;
  }
  if (gAPAccTransportClientEndpointInitOnce != -1) {
    dispatch_once_f(&gAPAccTransportClientEndpointInitOnce, 0, (dispatch_function_t)_APAccTransportClientEndpointGetTypeID);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  CFStringRef v5 = (void *)Instance;
  if (!Instance)
  {
    APSLogErrorAt();
LABEL_36:
    int v14 = -6728;
    goto LABEL_22;
  }
  *(void *)(Instance + 80) = 0;
  *(_OWORD *)(Instance + 48) = 0u;
  *(_OWORD *)(Instance + 64) = 0u;
  *(_OWORD *)(Instance + 16) = 0u;
  *(_OWORD *)(Instance + 32) = 0u;
  dispatch_queue_t v12 = dispatch_queue_create(v9, 0);
  void v5[3] = v12;
  if (!v12)
  {
    APSLogErrorAt();
    CFRelease(v5);
    CFStringRef v5 = 0;
    goto LABEL_36;
  }
  v5[4] = CFStringCreateWithCString(v2, v9, 0x8000100u);
  void v5[5] = CFRetain(v10);
  if (v8) {
    CFTypeRef v13 = CFRetain(v8);
  }
  else {
    CFTypeRef v13 = 0;
  }
  v5[7] = v13;
  if (gLogCategory_APAccTransportClientEndpoint <= 50
    && (gLogCategory_APAccTransportClientEndpoint != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  int v14 = 0;
LABEL_22:
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v14;
  if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(*(void *)(a1 + 40) + 32), v3, v5);
LABEL_24:
    **(void **)(a1 + 56) = v5;
    CFStringRef v5 = 0;
    if (!v3) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  APSLogErrorAt();
  if (v3) {
LABEL_25:
  }
    CFRelease(v3);
LABEL_26:
  if (v5)
  {
    CFRelease(v5);
  }
}

uint64_t APAccTransportClientConnectionInvalidateEndpoint(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  CFDictionaryRef v7 = &v6;
  uint64_t v8 = 0x2020000000;
  int v9 = 0;
  if (a1 && a2)
  {
    CFAllocatorRef v2 = *(NSObject **)(a1 + 16);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __APAccTransportClientConnectionInvalidateEndpoint_block_invoke;
    block[3] = &unk_1E6891F48;
    void block[4] = &v6;
    void block[5] = a1;
    void block[6] = a2;
    dispatch_sync(v2, block);
    uint64_t v3 = *((unsigned int *)v7 + 6);
  }
  else
  {
    APSLogErrorAt();
    uint64_t v3 = 4294960591;
    *((_DWORD *)v7 + 6) = -6705;
  }
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1D0A4F92C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void __APAccTransportClientConnectionInvalidateEndpoint_block_invoke(uint64_t a1)
{
  CFDictionaryRef v2 = *(const __CFDictionary **)(*(void *)(a1 + 40) + 32);
  if (v2 && CFDictionaryContainsValue(v2, *(const void **)(a1 + 48)))
  {
    uint64_t v3 = *(void *)(a1 + 48);
    uint64_t v4 = *(NSObject **)(v3 + 24);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __accTransportClientEndpointInvalidate_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    void block[4] = v3;
    dispatch_sync(v4, block);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(*(void *)(a1 + 40) + 32), *(const void **)(*(void *)(a1 + 48) + 32));
    if (!CFDictionaryGetCount(*(CFDictionaryRef *)(*(void *)(a1 + 40) + 32)))
    {
      CFStringRef v5 = *(const void **)(*(void *)(a1 + 40) + 32);
      if (v5)
      {
        CFRelease(v5);
        *(void *)(*(void *)(a1 + 40) + 32) = 0;
      }
    }
  }
  else
  {
    APSLogErrorAt();
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = -6736;
  }
}

uint64_t APAccTransportClientEndpointGetTypeID()
{
  if (gAPAccTransportClientEndpointInitOnce != -1) {
    dispatch_once_f(&gAPAccTransportClientEndpointInitOnce, 0, (dispatch_function_t)_APAccTransportClientEndpointGetTypeID);
  }
  return gAPAccTransportClientEndpointTypeID;
}

uint64_t _APAccTransportClientEndpointGetTypeID()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gAPAccTransportClientEndpointCFTypeID TypeID = result;
  return result;
}

uint64_t APAccTransportClientEndpointActivate(uint64_t a1, int a2, char a3, uint64_t a4)
{
  uint64_t v12 = 0;
  CFTypeRef v13 = &v12;
  uint64_t v14 = 0x2020000000;
  int v15 = 0;
  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0x2020000000;
  char v11 = 0;
  if (a4)
  {
    uint64_t v4 = *(NSObject **)(a1 + 24);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __APAccTransportClientEndpointActivate_block_invoke;
    block[3] = &unk_1E6894F28;
    void block[4] = a4;
    void block[5] = &v12;
    int v8 = a2;
    char v9 = a3;
    void block[6] = v10;
    void block[7] = a1;
    dispatch_sync(v4, block);
    uint64_t v5 = *((unsigned int *)v13 + 6);
  }
  else
  {
    APSLogErrorAt();
    uint64_t v5 = 4294960591;
    *((_DWORD *)v13 + 6) = -6705;
  }
  _Block_object_dispose(v10, 8);
  _Block_object_dispose(&v12, 8);
  return v5;
}

void sub_1D0A4FBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t __APAccTransportClientEndpointActivate_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (*(unsigned char *)(v2 + 16) || *(void *)(v2 + 48))
  {
    uint64_t result = APSLogErrorAt();
    int v11 = -6709;
  }
  else
  {
    uint64_t v3 = _Block_copy(*(const void **)(a1 + 32));
    uint64_t v4 = *(void *)(a1 + 56);
    *(void *)(v4 + 64) = v3;
    if (v3)
    {
      uint64_t v5 = *(void *)(v4 + 40);
      uint64_t v6 = *(unsigned int *)(a1 + 64);
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 3221225472;
      _OWORD v12[2] = __APAccTransportClientEndpointActivate_block_invoke_2;
      v12[3] = &unk_1E6894F00;
      v12[4] = v4;
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkacc_transportClient_createEndpoint[0])(v5, 4, v6, 0, (uint64_t)v12, 1);
      *(void *)(*(void *)(a1 + 56) + 48) = result;
      uint64_t v8 = *(void *)(a1 + 56);
      if (*(void *)(v8 + 48))
      {
        if (!*(unsigned char *)(a1 + 68)) {
          goto LABEL_12;
        }
        if (gLogCategory_APAccTransportClientEndpoint <= 30)
        {
          if (gLogCategory_APAccTransportClientEndpoint != -1
            || (v9 = _LogCategory_Initialize(), uint64_t v8 = *(void *)(a1 + 56), v9))
          {
            LogPrintF();
            uint64_t v8 = *(void *)(a1 + 56);
          }
        }
        if (*(void *)(v8 + 56))
        {
          uint64_t v10 = getkCFACCProperties_Connection_MFi4Auth_AccessoryCertInfoToMatch[0]();
          uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkacc_transportClient_setPropertyForEndpointWithUUID[0])(v10, *(void *)(*(void *)(a1 + 56) + 56), *(void *)(*(void *)(a1 + 56) + 48));
          *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = result;
          if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)) {
            goto LABEL_12;
          }
          uint64_t result = APSLogErrorAt();
          int v11 = -6762;
        }
        else
        {
          uint64_t result = APSLogErrorAt();
          int v11 = -6736;
        }
      }
      else
      {
        uint64_t result = APSLogErrorAt();
        int v11 = -6700;
      }
    }
    else
    {
      uint64_t result = APSLogErrorAt();
      int v11 = -6728;
    }
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v11;
LABEL_12:
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
    return accTransportClientEndpointDestroyEndpoint(*(void *)(a1 + 56));
  }
  return result;
}

void __APAccTransportClientEndpointActivate_block_invoke_2(uint64_t a1, const void *a2, const void *a3, CFDataRef theData)
{
  CFDictionaryRef v7 = *(void **)(a1 + 32);
  if (gLogCategory_APAccTransportClientEndpoint <= 30
    && (gLogCategory_APAccTransportClientEndpoint != -1 || _LogCategory_Initialize()))
  {
    CFDataGetLength(theData);
    LogPrintF();
  }
  CFRetain(v7);
  CFRetain(a2);
  CFRetain(a3);
  CFRetain(theData);
  uint64_t v8 = v7[3];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __APAccTransportClientEndpointActivate_block_invoke_3;
  block[3] = &__block_descriptor_64_e5_v8__0l;
  void block[4] = v7;
  void block[5] = a2;
  void block[6] = a3;
  void block[7] = theData;
  dispatch_async(v8, block);
}

void __APAccTransportClientEndpointActivate_block_invoke_3(uint64_t a1)
{
  if (!*(unsigned char *)(*(void *)(a1 + 32) + 16) && FigCFEqual() && FigCFEqual()) {
    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 64) + 16))();
  }
  CFRelease(*(CFTypeRef *)(a1 + 56));
  CFRelease(*(CFTypeRef *)(a1 + 48));
  CFRelease(*(CFTypeRef *)(a1 + 40));
  uint64_t v2 = *(const void **)(a1 + 32);
  CFRelease(v2);
}

uint64_t accTransportClientEndpointDestroyEndpoint(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v9 = 4294960587;
LABEL_25:
    APSLogErrorAt();
    return v9;
  }
  if (*(void *)(a1 + 72))
  {
    ((void (*)(uint64_t))softLinkacc_transportClient_setConnectionAuthStatusDidChangeHandler[0])(0);
    uint64_t v2 = *(const void **)(a1 + 72);
    if (v2)
    {
      _Block_release(v2);
      *(void *)(a1 + 72) = 0;
    }
  }
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3)
  {
    if (*(void *)(a1 + 80))
    {
      softLinkacc_transportClient_setEndpointSecureTunnelDataReceiveHandler(v3, 0);
      uint64_t v4 = *(const void **)(a1 + 80);
      if (v4)
      {
        _Block_release(v4);
        *(void *)(a1 + 80) = 0;
      }
    }
    int v5 = ((uint64_t (*)(uint64_t))softLinkacc_transportClient_destroyEndpoint[0])(*(void *)(a1 + 48));
    if (v5) {
      int v6 = 50;
    }
    else {
      int v6 = 90;
    }
    if (v6 >= gLogCategory_APAccTransportClientEndpoint
      && (gLogCategory_APAccTransportClientEndpoint != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CFDictionaryRef v7 = *(const void **)(a1 + 48);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(a1 + 48) = 0;
    }
    uint64_t v8 = *(const void **)(a1 + 64);
    if (v8)
    {
      _Block_release(v8);
      *(void *)(a1 + 64) = 0;
    }
    if ((v5 & 1) == 0)
    {
      uint64_t v9 = 4294960534;
      goto LABEL_25;
    }
  }
  return 0;
}

uint64_t APAccTransportClientEndpointSetAuthStatusHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  CFDictionaryRef v7 = &v6;
  uint64_t v8 = 0x2020000000;
  int v9 = 0;
  if (a2)
  {
    uint64_t v2 = *(NSObject **)(a1 + 24);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __APAccTransportClientEndpointSetAuthStatusHandler_block_invoke;
    block[3] = &unk_1E6894F78;
    void block[5] = &v6;
    void block[6] = a1;
    void block[4] = a2;
    dispatch_sync(v2, block);
    uint64_t v3 = *((unsigned int *)v7 + 6);
  }
  else
  {
    APSLogErrorAt();
    uint64_t v3 = 4294960591;
    *((_DWORD *)v7 + 6) = -6705;
  }
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1D0A5023C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void __APAccTransportClientEndpointSetAuthStatusHandler_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (*(unsigned char *)(v2 + 16) || !*(void *)(v2 + 48))
  {
    APSLogErrorAt();
    uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
    int v8 = -6709;
  }
  else
  {
    uint64_t v3 = *(const void **)(v2 + 72);
    if (v3)
    {
      _Block_release(v3);
      *(void *)(*(void *)(a1 + 48) + 72) = 0;
    }
    uint64_t v4 = _Block_copy(*(const void **)(a1 + 32));
    uint64_t v5 = *(void *)(a1 + 48);
    *(void *)(v5 + 72) = v4;
    if (v4)
    {
      v9[0] = MEMORY[0x1E4F143A8];
      v9[1] = 3221225472;
      v9[2] = __APAccTransportClientEndpointSetAuthStatusHandler_block_invoke_2;
      v9[3] = &unk_1E6894F50;
      void v9[4] = v5;
      ((void (*)(uint64_t))softLinkacc_transportClient_setConnectionAuthStatusDidChangeHandler[0])((uint64_t)v9);
      goto LABEL_7;
    }
    APSLogErrorAt();
    uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
    int v8 = -6728;
  }
  *(_DWORD *)(v7 + 24) = v8;
LABEL_7:
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    ((void (*)(uint64_t))softLinkacc_transportClient_setConnectionAuthStatusDidChangeHandler[0])(0);
    uint64_t v6 = *(const void **)(*(void *)(a1 + 48) + 72);
    if (v6)
    {
      _Block_release(v6);
      *(void *)(*(void *)(a1 + 48) + 72) = 0;
    }
  }
}

void __APAccTransportClientEndpointSetAuthStatusHandler_block_invoke_2(uint64_t a1, const void *a2, char a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  if (gLogCategory_APAccTransportClientEndpoint <= 50
    && (gLogCategory_APAccTransportClientEndpoint != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRetain(v5);
  CFRetain(a2);
  uint64_t v6 = v5[3];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __APAccTransportClientEndpointSetAuthStatusHandler_block_invoke_3;
  block[3] = &__block_descriptor_49_e5_v8__0l;
  void block[4] = v5;
  void block[5] = a2;
  char v8 = a3;
  dispatch_async(v6, block);
}

void __APAccTransportClientEndpointSetAuthStatusHandler_block_invoke_3(uint64_t a1)
{
  if (!*(unsigned char *)(*(void *)(a1 + 32) + 16) && FigCFEqual()) {
    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 72) + 16))();
  }
  CFRelease(*(CFTypeRef *)(a1 + 40));
  uint64_t v2 = *(const void **)(a1 + 32);
  CFRelease(v2);
}

uint64_t APAccTransportClientEndpointForwardData(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  int v9 = 0;
  uint64_t v2 = *(NSObject **)(a1 + 24);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __APAccTransportClientEndpointForwardData_block_invoke;
  block[3] = &unk_1E6891F48;
  void block[4] = &v6;
  void block[5] = a1;
  void block[6] = a2;
  dispatch_sync(v2, block);
  uint64_t v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t __APAccTransportClientEndpointForwardData_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(unsigned char *)(v2 + 16))
  {
    int v5 = -6709;
LABEL_12:
    uint64_t result = APSLogErrorAt();
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v5;
    return result;
  }
  if (!*(void *)(v2 + 48))
  {
    int v5 = -6709;
    goto LABEL_12;
  }
  if (gLogCategory_APAccTransportClientEndpoint <= 30)
  {
    if (gLogCategory_APAccTransportClientEndpoint != -1
      || (v3 = _LogCategory_Initialize(), uint64_t v2 = *(void *)(a1 + 40), v3))
    {
      CFDataGetLength(*(CFDataRef *)(a1 + 48));
      LogPrintF();
      uint64_t v2 = *(void *)(a1 + 40);
    }
  }
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))softLinkacc_transportClient_processIncomingData[0])(*(void *)(a1 + 48), *(void *)(v2 + 48));
  if ((result & 1) == 0)
  {
    int v5 = -6700;
    goto LABEL_12;
  }
  return result;
}

uint64_t APAccTransportClientEndpointDeactivate(uint64_t a1)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  int v8 = 0;
  uint64_t v1 = *(NSObject **)(a1 + 24);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __APAccTransportClientEndpointDeactivate_block_invoke;
  uint64_t v4[3] = &unk_1E6894EB0;
  v4[4] = &v5;
  v4[5] = a1;
  dispatch_sync(v1, v4);
  uint64_t v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t __APAccTransportClientEndpointDeactivate_block_invoke(uint64_t a1)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = accTransportClientEndpointDestroyEndpoint(*(void *)(a1 + 40));
  uint64_t result = *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (result)
  {
    return APSLogErrorAt();
  }
  return result;
}

uint64_t APAccTransportClientEndpointCopyAuthenticationCertificateSerial(uint64_t a1)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  uint64_t v8 = 0;
  uint64_t v1 = *(NSObject **)(a1 + 24);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __APAccTransportClientEndpointCopyAuthenticationCertificateSerial_block_invoke;
  uint64_t v4[3] = &unk_1E6894EB0;
  v4[4] = &v5;
  v4[5] = a1;
  dispatch_sync(v1, v4);
  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void __APAccTransportClientEndpointCopyAuthenticationCertificateSerial_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 48);
  if (v2
    && (uint64_t v3 = ((uint64_t (*)(uint64_t))softLinkacc_transportClient_copyPropertiesForEndpointWithUUID[0])(v2)) != 0)
  {
    CFDictionaryRef v4 = (const __CFDictionary *)v3;
    uint64_t v5 = (const void *)getkCFACCProperties_Connection_MFi4Auth_AccessoryCertInfoToMatch[0]();
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFDictionaryGetValue(v4, v5);
    uint64_t v6 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    if (v6) {
      CFRetain(v6);
    }
    CFRelease(v4);
  }
  else
  {
    APSLogErrorAt();
  }
}

uint64_t APAccTransportClientEndpointSecureTunnelDataSend(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  int v9 = 0;
  uint64_t v2 = *(NSObject **)(a1 + 24);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __APAccTransportClientEndpointSecureTunnelDataSend_block_invoke;
  block[3] = &unk_1E6891F48;
  void block[4] = &v6;
  void block[5] = a1;
  void block[6] = a2;
  dispatch_sync(v2, block);
  uint64_t v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t __APAccTransportClientEndpointSecureTunnelDataSend_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(unsigned char *)(v2 + 16) || (uint64_t v3 = *(void *)(v2 + 48)) == 0)
  {
    uint64_t result = APSLogErrorAt();
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = -6709;
  }
  else
  {
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkacc_transportClient_endpointSecureTunnelDataSend[0])(v3, 1, *(void *)(a1 + 48));
    if (gLogCategory_APAccTransportClientEndpoint <= 30)
    {
      if (gLogCategory_APAccTransportClientEndpoint != -1 || (uint64_t result = _LogCategory_Initialize(), result))
      {
        CFDataGetLength(*(CFDataRef *)(a1 + 48));
        return LogPrintF();
      }
    }
  }
  return result;
}

uint64_t APAccTransportClientEndpointSetSecureTunnelDataReceiveHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  int v9 = 0;
  if (a2)
  {
    uint64_t v2 = *(NSObject **)(a1 + 24);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __APAccTransportClientEndpointSetSecureTunnelDataReceiveHandler_block_invoke;
    block[3] = &unk_1E6894F78;
    void block[5] = &v6;
    void block[6] = a1;
    void block[4] = a2;
    dispatch_sync(v2, block);
    uint64_t v3 = *((unsigned int *)v7 + 6);
  }
  else
  {
    APSLogErrorAt();
    uint64_t v3 = 4294960591;
    *((_DWORD *)v7 + 6) = -6705;
  }
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1D0A50BD8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t __APAccTransportClientEndpointSetSecureTunnelDataReceiveHandler_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (!*(void *)(v2 + 48) || *(void *)(v2 + 80))
  {
    uint64_t result = APSLogErrorAt();
    uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
    int v8 = -6709;
LABEL_8:
    *(_DWORD *)(v7 + 24) = v8;
    return result;
  }
  uint64_t v3 = _Block_copy(*(const void **)(a1 + 32));
  uint64_t v4 = *(void *)(a1 + 48);
  *(void *)(v4 + 80) = v3;
  if (!v3)
  {
    uint64_t result = APSLogErrorAt();
    uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
    int v8 = -6728;
    goto LABEL_8;
  }
  uint64_t v5 = *(void *)(v4 + 48);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __APAccTransportClientEndpointSetSecureTunnelDataReceiveHandler_block_invoke_2;
  v9[3] = &unk_1E6894FA0;
  void v9[4] = v4;
  return softLinkacc_transportClient_setEndpointSecureTunnelDataReceiveHandler(v5, (uint64_t)v9);
}

void __APAccTransportClientEndpointSetSecureTunnelDataReceiveHandler_block_invoke_2(uint64_t a1, const void *a2, CFDataRef theData)
{
  uint64_t v5 = *(void **)(a1 + 32);
  if (gLogCategory_APAccTransportClientEndpoint <= 30
    && (gLogCategory_APAccTransportClientEndpoint != -1 || _LogCategory_Initialize()))
  {
    CFDataGetLength(theData);
    LogPrintF();
  }
  CFRetain(v5);
  CFRetain(a2);
  CFRetain(theData);
  uint64_t v6 = v5[3];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __APAccTransportClientEndpointSetSecureTunnelDataReceiveHandler_block_invoke_3;
  block[3] = &__block_descriptor_56_e5_v8__0l;
  void block[4] = v5;
  void block[5] = a2;
  void block[6] = theData;
  dispatch_async(v6, block);
}

void __APAccTransportClientEndpointSetSecureTunnelDataReceiveHandler_block_invoke_3(uint64_t a1)
{
  if (!*(unsigned char *)(*(void *)(a1 + 32) + 16) && FigCFEqual()) {
    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 80) + 16))();
  }
  CFRelease(*(CFTypeRef *)(a1 + 40));
  CFRelease(*(CFTypeRef *)(a1 + 32));
  uint64_t v2 = *(const void **)(a1 + 48);
  CFRelease(v2);
}

void _APAccTransportClientConnectionFinalize(void *a1)
{
  if (gLogCategory_APAccTransportClientConnection <= 50
    && (gLogCategory_APAccTransportClientConnection != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a1[3])
  {
    if (gLogCategory_APAccTransportClientConnection <= 90
      && (gLogCategory_APAccTransportClientConnection != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    APAccTransportClientConnectionClose((uint64_t)a1);
  }
  uint64_t v2 = (const void *)a1[4];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[5];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = a1[2];
  if (v4)
  {
    dispatch_release(v4);
    a1[2] = 0;
  }
}

uint64_t initacc_transportClient_serverDisconnectedHandler(uint64_t a1)
{
  if (CoreAccessoriesLibrary_sOnce != -1) {
    dispatch_once(&CoreAccessoriesLibrary_sOnce, &__block_literal_global_32);
  }
  uint64_t v2 = (uint64_t (*)())dlsym((void *)CoreAccessoriesLibrary_sLib, "acc_transportClient_serverDisconnectedHandler");
  softLinkacc_transportClient_serverDisconnectedHandler[0] = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

void *__CoreAccessoriesLibrary_block_invoke()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/CoreAccessories.framework/CoreAccessories", 2);
  CoreAccessoriesLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t initacc_transportClient_createConnection(uint64_t a1, uint64_t a2)
{
  if (CoreAccessoriesLibrary_sOnce != -1) {
    dispatch_once(&CoreAccessoriesLibrary_sOnce, &__block_literal_global_32);
  }
  uint64_t v4 = (uint64_t (*)())dlsym((void *)CoreAccessoriesLibrary_sLib, "acc_transportClient_createConnection");
  softLinkacc_transportClient_createConnection[0] = v4;
  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

uint64_t initacc_transportClient_destroyConnection(uint64_t a1)
{
  if (CoreAccessoriesLibrary_sOnce != -1) {
    dispatch_once(&CoreAccessoriesLibrary_sOnce, &__block_literal_global_32);
  }
  uint64_t v2 = (uint64_t (*)())dlsym((void *)CoreAccessoriesLibrary_sLib, "acc_transportClient_destroyConnection");
  softLinkacc_transportClient_destroyConnection[0] = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

void _APAccTransportClientEndpointFinalize(void *a1)
{
  if (gLogCategory_APAccTransportClientEndpoint <= 50
    && (gLogCategory_APAccTransportClientEndpoint != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v2 = a1[3];
  if (v2)
  {
    dispatch_release(v2);
    a1[3] = 0;
  }
  uint64_t v3 = (const void *)a1[4];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)a1[5];
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)a1[7];
  if (v5)
  {
    CFRelease(v5);
  }
}

uint64_t initacc_transportClient_createEndpoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (CoreAccessoriesLibrary_sOnce != -1) {
    dispatch_once(&CoreAccessoriesLibrary_sOnce, &__block_literal_global_32);
  }
  uint64_t v12 = (uint64_t (*)())dlsym((void *)CoreAccessoriesLibrary_sLib, "acc_transportClient_createEndpoint");
  softLinkacc_transportClient_createEndpoint[0] = v12;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v12)(a1, a2, a3, a4, a5, a6);
}

uint64_t initacc_transportClient_setPropertyForEndpointWithUUID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (CoreAccessoriesLibrary_sOnce != -1) {
    dispatch_once(&CoreAccessoriesLibrary_sOnce, &__block_literal_global_32);
  }
  uint64_t v6 = (uint64_t (*)())dlsym((void *)CoreAccessoriesLibrary_sLib, "acc_transportClient_setPropertyForEndpointWithUUID");
  softLinkacc_transportClient_setPropertyForEndpointWithUUID[0] = v6;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(a1, a2, a3);
}

uint64_t initValkCFACCProperties_Connection_MFi4Auth_AccessoryCertInfoToMatch()
{
  if (CoreAccessoriesLibrary_sOnce != -1) {
    dispatch_once(&CoreAccessoriesLibrary_sOnce, &__block_literal_global_32);
  }
  CFAllocatorRef v0 = (uint64_t *)dlsym((void *)CoreAccessoriesLibrary_sLib, "kCFACCProperties_Connection_MFi4Auth_AccessoryCertInfoToMatch");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkCFACCProperties_Connection_MFi4Auth_AccessoryCertInfoToMatch = result;
  }
  else
  {
    uint64_t result = constantValkCFACCProperties_Connection_MFi4Auth_AccessoryCertInfoToMatch;
  }
  getkCFACCProperties_Connection_MFi4Auth_AccessoryCertInfoToMatch[0] = kCFACCProperties_Connection_MFi4Auth_AccessoryCertInfoToMatchFunction;
  return result;
}

uint64_t kCFACCProperties_Connection_MFi4Auth_AccessoryCertInfoToMatchFunction()
{
  return constantValkCFACCProperties_Connection_MFi4Auth_AccessoryCertInfoToMatch;
}

uint64_t initacc_transportClient_setConnectionAuthStatusDidChangeHandler(uint64_t a1)
{
  if (CoreAccessoriesLibrary_sOnce != -1) {
    dispatch_once(&CoreAccessoriesLibrary_sOnce, &__block_literal_global_32);
  }
  uint64_t v2 = (uint64_t (*)())dlsym((void *)CoreAccessoriesLibrary_sLib, "acc_transportClient_setConnectionAuthStatusDidChangeHandler");
  softLinkacc_transportClient_setConnectionAuthStatusDidChangeHandler[0] = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

uint64_t initacc_transportClient_processIncomingData(uint64_t a1, uint64_t a2)
{
  if (CoreAccessoriesLibrary_sOnce != -1) {
    dispatch_once(&CoreAccessoriesLibrary_sOnce, &__block_literal_global_32);
  }
  uint64_t v4 = (uint64_t (*)())dlsym((void *)CoreAccessoriesLibrary_sLib, "acc_transportClient_processIncomingData");
  softLinkacc_transportClient_processIncomingData[0] = v4;
  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

uint64_t initacc_transportClient_destroyEndpoint(uint64_t a1)
{
  if (CoreAccessoriesLibrary_sOnce != -1) {
    dispatch_once(&CoreAccessoriesLibrary_sOnce, &__block_literal_global_32);
  }
  uint64_t v2 = (uint64_t (*)())dlsym((void *)CoreAccessoriesLibrary_sLib, "acc_transportClient_destroyEndpoint");
  softLinkacc_transportClient_destroyEndpoint[0] = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

uint64_t initacc_transportClient_copyPropertiesForEndpointWithUUID(uint64_t a1)
{
  if (CoreAccessoriesLibrary_sOnce != -1) {
    dispatch_once(&CoreAccessoriesLibrary_sOnce, &__block_literal_global_32);
  }
  uint64_t v2 = (uint64_t (*)())dlsym((void *)CoreAccessoriesLibrary_sLib, "acc_transportClient_copyPropertiesForEndpointWithUUID");
  softLinkacc_transportClient_copyPropertiesForEndpointWithUUID[0] = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

uint64_t __accTransportClientEndpointInvalidate_block_invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (!*(unsigned char *)(result + 16))
  {
    uint64_t result = accTransportClientEndpointDestroyEndpoint(result);
    *(unsigned char *)(*(void *)(a1 + 32) + 16) = 1;
  }
  return result;
}

uint64_t initacc_transportClient_endpointSecureTunnelDataSend(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (CoreAccessoriesLibrary_sOnce != -1) {
    dispatch_once(&CoreAccessoriesLibrary_sOnce, &__block_literal_global_32);
  }
  uint64_t v6 = (uint64_t (*)())dlsym((void *)CoreAccessoriesLibrary_sLib, "acc_transportClient_endpointSecureTunnelDataSend");
  softLinkacc_transportClient_endpointSecureTunnelDataSend[0] = v6;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(a1, a2, a3);
}

uint64_t initacc_transportClient_setEndpointSecureTunnelDataReceiveHandler(uint64_t a1, uint64_t a2)
{
  if (CoreAccessoriesLibrary_sOnce != -1) {
    dispatch_once(&CoreAccessoriesLibrary_sOnce, &__block_literal_global_32);
  }
  uint64_t v4 = (uint64_t (*)())dlsym((void *)CoreAccessoriesLibrary_sLib, "acc_transportClient_setEndpointSecureTunnelDataReceiveHandler");
  softLinkacc_transportClient_setEndpointSecureTunnelDataReceiveHandler = v4;
  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

uint64_t APPairingClientLegacyCreate(uint64_t a1, const void *a2, const void *a3, const void *a4, void *a5)
{
  if (!a4)
  {
    APSLogErrorAt();
    return 4294895525;
  }
  APPairingClientGetClassID();
  uint64_t v9 = CMDerivedObjectCreate();
  if (v9)
  {
    uint64_t v14 = v9;
LABEL_19:
    APSLogErrorAt();
    return v14;
  }
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (a2) {
    CFTypeRef v11 = CFRetain(a2);
  }
  else {
    CFTypeRef v11 = 0;
  }
  DerivedStorage[1] = v11;
  if (a3) {
    CFTypeRef v12 = CFRetain(a3);
  }
  else {
    CFTypeRef v12 = 0;
  }
  DerivedStorage[2] = v12;
  DerivedStorage[3] = CFRetain(a4);
  uint64_t v13 = gQblcfSzZBQsYCCV();
  if (v13)
  {
    uint64_t v14 = v13;
    goto LABEL_19;
  }
  if (gLogCategory_APPairingClientLegacy <= 50
    && (gLogCategory_APPairingClientLegacy != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v14 = 0;
  *a5 = 0;
  return v14;
}

void legacyPairing_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  uint64_t v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 8) = 0;
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 16);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(DerivedStorage + 16) = 0;
  }
  uint64_t v3 = *(const void **)(DerivedStorage + 24);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 24) = 0;
  }
}

__CFString *legacyPairing_CopyDebugDescription()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<APPairingClientLegacy '%@'>", *DerivedStorage);
  return Mutable;
}

uint64_t legacyPairing_DeriveKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  CMBaseObjectGetDerivedStorage();
  if (a6 == 16)
  {
    uint64_t v7 = PCFdAVst();
    if (v7) {
      APSLogErrorAt();
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294895525;
  }
  return v7;
}

CFDataRef legacyPairing_IsPeerKnown()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  CMBaseObjectGetDerivedStorage();
  CFDataRef result = *(const __CFData **)(CMBaseObjectGetDerivedStorage() + 16);
  if (result)
  {
    v3.location = 0;
    v3.length = 32;
    CFDataGetBytes(result, v3, buffer);
    return (const __CFData *)xOvZekdnwD6();
  }
  return result;
}

uint64_t legacyPairing_PerformSetup(uint64_t a1, uint64_t a2, int a3, uint64_t a4, void *a5, CFDataRef *a6)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  int v8 = &unk_1EA629000;
  if (a3)
  {
    unint64_t memoryBlock = 0;
    CMTime dataPointerOut = 0;
    CFTypeRef cf = 0;
    dataunint64_t Length = 0;
    LOBYTE(v46) = 0;
    *(_OWORD *)long long bytes = 0u;
    long long v54 = 0u;
    CFTypeRef v47 = 0;
    CMBaseObjectGetDerivedStorage();
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (gLogCategory_APPairingClientLegacy <= 50
      && (gLogCategory_APPairingClientLegacy != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (a2)
    {
      XoN3GgjZNCvkN1T8I3();
      uint64_t v12 = rJPl3sdBfc0E3yB();
      if (v12)
      {
        uint64_t v17 = v12;
      }
      else
      {
        uint64_t v13 = GvMGlTNs();
        if (v13)
        {
          uint64_t v17 = v13;
        }
        else
        {
          CMTime dataPointerOut = 0;
          dataunint64_t Length = 0;
          LOBYTE(v46) = 0;
          CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF90];
          while (1)
          {
            uint64_t v16 = SrtySZG0();
            uint64_t v17 = v16;
            if ((v16 + 71775) < 3) {
              break;
            }
            if (v16) {
              goto LABEL_75;
            }
            if (cf)
            {
              CFRelease(cf);
              CFTypeRef cf = 0;
            }
            uint64_t v18 = CMBlockBufferCreateWithMemoryBlock(v14, memoryBlock, (size_t)dataLength, v15, 0, 0, (size_t)dataLength, 0, (CMBlockBufferRef *)&cf);
            if (v18)
            {
              uint64_t v17 = v18;
              APSLogErrorAt();
              goto LABEL_76;
            }
            unint64_t memoryBlock = 0;
            if (v47)
            {
              CFRelease(v47);
              CFTypeRef v47 = 0;
            }
            uint64_t v19 = *(void *)(DerivedStorage + 24);
            CFTypeRef v20 = cf;
            uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v21) {
              uint64_t v22 = v21;
            }
            else {
              uint64_t v22 = 0;
            }
            CFTypeRef v23 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef, CFTypeRef *))(v22 + 56);
            if (!v23)
            {
              uint64_t v17 = 4294954514;
              goto LABEL_76;
            }
            uint64_t v24 = v23(v19, 1886613612, v20, &v47);
            if (v24 == 200470)
            {
LABEL_75:
              uint64_t v17 = 200401;
LABEL_76:
              int v8 = (_DWORD *)&unk_1EA629000;
              goto LABEL_64;
            }
            uint64_t v17 = v24;
            if (v24) {
              goto LABEL_76;
            }
            dataunint64_t Length = 0;
            CMTime dataPointerOut = 0;
            if (v47) {
              CMBlockBufferGetDataPointer((CMBlockBufferRef)v47, 0, (size_t *)&dataLength, 0, &dataPointerOut);
            }
          }
          int v8 = &unk_1EA629000;
          if (gLogCategory_APPairingClientLegacy <= 50
            && (gLogCategory_APPairingClientLegacy != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
        }
      }
      APSLogErrorAt();
    }
    else
    {
      uint64_t v25 = *(void *)(DerivedStorage + 24);
      uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v26) {
        uint64_t v27 = v26;
      }
      else {
        uint64_t v27 = 0;
      }
      uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t, void, void))(v27 + 56);
      if (v28)
      {
        unsigned int v29 = v28(v25, 1886417780, 0, 0);
        if (v29) {
          uint64_t v17 = v29;
        }
        else {
          uint64_t v17 = 200401;
        }
      }
      else
      {
        uint64_t v17 = 4294954514;
      }
    }
LABEL_64:
    if (v47) {
      CFRelease(v47);
    }
    if (cf) {
      CFRelease(cf);
    }
    if (memoryBlock)
    {
      free(memoryBlock);
      unint64_t memoryBlock = 0;
    }
    if (v17)
    {
      int v41 = v8[74];
      if (v41 <= 50 && (v41 != -1 || _LogCategory_Initialize())) {
        goto LABEL_97;
      }
    }
    return v17;
  }
  unint64_t memoryBlock = 0;
  CMTime dataPointerOut = 0;
  char v50 = 0;
  CFTypeRef cf = 0;
  dataunint64_t Length = 0;
  CFTypeRef v46 = 0;
  CFTypeRef v47 = 0;
  CFTypeRef v45 = 0;
  *(_OWORD *)long long bytes = 0u;
  long long v54 = 0u;
  CMBaseObjectGetDerivedStorage();
  uint64_t v11 = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APPairingClientLegacy <= 50
    && (gLogCategory_APPairingClientLegacy != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  XoN3GgjZNCvkN1T8I3();
  CFAllocatorRef v30 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v31 = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0x60uLL, (CFAllocatorRef)*MEMORY[0x1E4F1CF90], 0, 0, 0x60uLL, 1u, &dataLength);
  if (v31)
  {
    uint64_t v17 = v31;
LABEL_103:
    APSLogErrorAt();
    goto LABEL_85;
  }
  uint64_t DataPointer = CMBlockBufferGetDataPointer(dataLength, 0, (size_t *)&v47, 0, (char **)&cf);
  if (DataPointer)
  {
    uint64_t v17 = DataPointer;
    goto LABEL_103;
  }
  unint64_t memoryBlock = 0;
  CMTime dataPointerOut = 0;
  char v50 = 0;
  uint64_t v33 = h4BvW7X();
  if (v33)
  {
LABEL_57:
    uint64_t v17 = v33;
LABEL_85:
    CFDataRef v40 = 0;
    goto LABEL_86;
  }
  while (!v50)
  {
    if (v46)
    {
      CFRelease(v46);
      CFTypeRef v46 = 0;
    }
    uint64_t v34 = CMBlockBufferCreateWithBufferReference(v30, dataLength, 0, (size_t)memoryBlock, 0, (CMBlockBufferRef *)&v46);
    if (v34)
    {
      uint64_t v17 = v34;
      goto LABEL_103;
    }
    if (v45)
    {
      CFRelease(v45);
      CFTypeRef v45 = 0;
    }
    uint64_t v35 = *(void *)(v11 + 24);
    CFTypeRef v36 = v46;
    uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v37) {
      uint64_t v38 = v37;
    }
    else {
      uint64_t v38 = 0;
    }
    CFTypeRef v39 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef, CFTypeRef *))(v38 + 56);
    if (!v39)
    {
      CFDataRef v40 = 0;
      uint64_t v17 = 4294954514;
      goto LABEL_86;
    }
    uint64_t v33 = v39(v35, 1886614892, v36, &v45);
    if (!v33)
    {
      unint64_t memoryBlock = 0;
      CMTime dataPointerOut = 0;
      if (v45) {
        CMBlockBufferGetDataPointer((CMBlockBufferRef)v45, 0, (size_t *)&memoryBlock, 0, &dataPointerOut);
      }
      uint64_t v33 = h4BvW7X();
      if (!v33) {
        continue;
      }
    }
    goto LABEL_57;
  }
  if (gLogCategory_APPairingClientLegacy <= 50
    && (gLogCategory_APPairingClientLegacy != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  aMoe8v8GNE9T();
  CFDataRef v42 = CFDataCreate(v30, bytes, 32);
  CFDataRef v40 = v42;
  if (v42)
  {
    long long v43 = *(const void **)(v11 + 16);
    *(void *)(v11 + 16) = v42;
    CFRetain(v42);
    if (v43) {
      CFRelease(v43);
    }
    if (a5) {
      *a5 = 0;
    }
    uint64_t v17 = 0;
    if (a6)
    {
      *a6 = v40;
      goto LABEL_85;
    }
  }
  else
  {
    uint64_t v17 = 4294895526;
    APSLogErrorAt();
  }
LABEL_86:
  if (v45) {
    CFRelease(v45);
  }
  if (v46) {
    CFRelease(v46);
  }
  if (dataLength) {
    CFRelease(dataLength);
  }
  if (v40) {
    CFRelease(v40);
  }
  if (v17
    && gLogCategory_APPairingClientLegacy <= 60
    && (gLogCategory_APPairingClientLegacy != -1 || _LogCategory_Initialize()))
  {
LABEL_97:
    LogPrintF();
  }
  return v17;
}

uint64_t legacyPairing_PerformVerification()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  size_t lengthAtOffsetOut = 0;
  CMTime dataPointerOut = 0;
  *(_OWORD *)buffer = 0u;
  long long v12 = 0u;
  CMBaseObjectGetDerivedStorage();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APPairingClientLegacy <= 50
    && (gLogCategory_APPairingClientLegacy != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  XoN3GgjZNCvkN1T8I3();
  CFDataRef v1 = *(const __CFData **)(DerivedStorage + 16);
  if (!v1)
  {
    APSLogErrorAt();
    uint64_t v6 = 4294895525;
    goto LABEL_19;
  }
  v14.location = 0;
  v14.length = 32;
  CFDataGetBytes(v1, v14, buffer);
  Dk7hjUuq();
  size_t lengthAtOffsetOut = 0;
  CMTime dataPointerOut = 0;
  uint64_t v2 = VBAEFt();
  if (!v2)
  {
    CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    while (1)
    {
      uint64_t v10 = 0;
      CMBaseObjectGetDerivedStorage();
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (!Mutable)
      {
        uint64_t v6 = 4294895526;
        APSLogErrorAt();
        goto LABEL_19;
      }
      uint64_t v5 = Mutable;
      CFDictionarySetValue(Mutable, @"X-Apple-PD", @"1");
      if (!TMIsAutomaticTimeEnabled()) {
        goto LABEL_12;
      }
      CFAbsoluteTimeGetCurrent();
      ASPrintF();
      if (v10) {
        break;
      }
      uint64_t v6 = 4294895526;
      APSLogErrorAt();
LABEL_13:
      CFRelease(v5);
      if (v10) {
        free(v10);
      }
      if (v6) {
        goto LABEL_19;
      }
      size_t lengthAtOffsetOut = 0;
      CMTime dataPointerOut = 0;
      uint64_t v2 = VBAEFt();
      if (v2) {
        goto LABEL_25;
      }
    }
    CFDictionarySetCString();
LABEL_12:
    CFDictionarySetData();
    uint64_t v6 = APTransportStreamSendPlistMessageCreatingReply();
    goto LABEL_13;
  }
LABEL_25:
  uint64_t v6 = v2;
LABEL_19:
  if (v6
    && gLogCategory_APPairingClientLegacy <= 60
    && (gLogCategory_APPairingClientLegacy != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v6;
}

uint64_t APCarPlayXPCUtils_UnpackASBD(void *a1, const char *a2, uint64_t a3, void *a4)
{
  if (!a4)
  {
    uint64_t v7 = 4294960591;
LABEL_9:
    APSLogErrorAt();
    return v7;
  }
  xpc_object_t value = xpc_dictionary_get_value(a1, a2);
  if (!value)
  {
    uint64_t v7 = 4294960569;
    goto LABEL_9;
  }
  if (xpc_data_get_bytes(value, a4, 0, 40 * a3) != 40 * a3)
  {
    uint64_t v7 = 4294960550;
    goto LABEL_9;
  }
  return 0;
}

uint64_t APCarPlayAVVCServerGetTypeID()
{
  if (gAPCarPlayAVVCServerInitOnce != -1) {
    dispatch_once_f(&gAPCarPlayAVVCServerInitOnce, 0, (dispatch_function_t)_APCarPlayAVVCServerGetTypeID);
  }
  return gAPCarPlayAVVCServerTypeID;
}

uint64_t _APCarPlayAVVCServerGetTypeID()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gAPCarPlayAVVCServerCFTypeID TypeID = result;
  return result;
}

uint64_t APCarPlayAVVCServerRegisterEndpoint(const void *a1)
{
  uint64_t v1 = gCarPlayAVVCServer;
  if (gCarPlayAVVCServer)
  {
    CFAllocatorRef v3 = *(const void **)(gCarPlayAVVCServer + 24);
    if (v3)
    {
      APCarPlayAVVCServerRemoveEndpoint(v3);
      uint64_t v4 = *(const void **)(v1 + 24);
    }
    else
    {
      uint64_t v4 = 0;
    }
    *(void *)(v1 + 24) = a1;
    if (a1) {
      CFRetain(a1);
    }
    if (v4) {
      CFRelease(v4);
    }
    if (gLogCategory_APCarPlayAVVCServer <= 30
      && (gLogCategory_APCarPlayAVVCServer != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, (CFNotificationName)*MEMORY[0x1E4F20718], 0, 0, 1u);
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294960578;
  }
}

uint64_t APCarPlayAVVCServerRemoveEndpoint(CFTypeRef cf)
{
  uint64_t v1 = gCarPlayAVVCServer;
  if (gCarPlayAVVCServer)
  {
    CFTypeRef v2 = cf;
    if (*(CFTypeRef *)(gCarPlayAVVCServer + 24) == cf)
    {
      if (gLogCategory_APCarPlayAVVCServer <= 30)
      {
        if (gLogCategory_APCarPlayAVVCServer != -1 || _LogCategory_Initialize()) {
          LogPrintF();
        }
        CFTypeRef v2 = *(CFTypeRef *)(v1 + 24);
      }
      if (v2)
      {
        CFRelease(v2);
        *(void *)(v1 + 24) = 0;
      }
    }
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, (CFNotificationName)*MEMORY[0x1E4F20720], 0, 0, 1u);
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294960578;
  }
}

uint64_t APCarPlayAVVCServerRegisterStream(const void *a1)
{
  uint64_t v1 = gCarPlayAVVCServer;
  if (!gCarPlayAVVCServer)
  {
    APSLogErrorAt();
    return 4294960578;
  }
  CFAllocatorRef v3 = *(const void **)(gCarPlayAVVCServer + 32);
  if (v3)
  {
    APCarPlayAVVCServerRemoveStream(v3);
    uint64_t v4 = *(const void **)(v1 + 32);
  }
  else
  {
    uint64_t v4 = 0;
  }
  *(void *)(v1 + 32) = a1;
  if (a1) {
    CFRetain(a1);
  }
  if (v4) {
    CFRelease(v4);
  }
  if (gLogCategory_APCarPlayAVVCServer > 30) {
    return 0;
  }
  if (gLogCategory_APCarPlayAVVCServer != -1 || (uint64_t result = _LogCategory_Initialize(), result))
  {
    LogPrintF();
    return 0;
  }
  return result;
}

uint64_t APCarPlayAVVCServerRemoveStream(CFTypeRef cf)
{
  uint64_t v1 = gCarPlayAVVCServer;
  if (gCarPlayAVVCServer)
  {
    CFTypeRef v2 = cf;
    if (*(CFTypeRef *)(gCarPlayAVVCServer + 32) != cf) {
      return 0;
    }
    if (gLogCategory_APCarPlayAVVCServer <= 30)
    {
      if (gLogCategory_APCarPlayAVVCServer != -1 || _LogCategory_Initialize()) {
        LogPrintF();
      }
      CFTypeRef v2 = *(CFTypeRef *)(v1 + 32);
    }
    if (v2)
    {
      CFRelease(v2);
      uint64_t result = 0;
      *(void *)(v1 + 32) = 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960578;
  }
  return result;
}

void APCarPlayAVVCServerStatesIncompatibleWithAuxIn()
{
  if (gLogCategory_APCarPlayAVVCServer <= 50
    && (gLogCategory_APCarPlayAVVCServer != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"CarPlayAVVCEndpointStateIncompatibleWithJarvis", 0, 0, 1u);
}

uint64_t APCarPlayAVVCServerInit()
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2000000000;
  int v8 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __APCarPlayAVVCServerInit_block_invoke;
  block[3] = &unk_1E6894FD0;
  void block[4] = &v5;
  if (gCarPlayInputServerOnce != -1) {
    dispatch_once(&gCarPlayInputServerOnce, block);
  }
  CFAllocatorRef v0 = v6;
  if (*((_DWORD *)v6 + 6))
  {
    if (gLogCategory_APCarPlayAVVCServer <= 90)
    {
      if (gLogCategory_APCarPlayAVVCServer != -1 || (int v1 = _LogCategory_Initialize(), v0 = v6, v1))
      {
        LogPrintF();
        CFAllocatorRef v0 = v6;
      }
    }
  }
  uint64_t v2 = *((unsigned int *)v0 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t __APCarPlayAVVCServerInit_block_invoke(uint64_t a1)
{
  if (gAPCarPlayAVVCServerInitOnce != -1) {
    dispatch_once_f(&gAPCarPlayAVVCServerInitOnce, 0, (dispatch_function_t)_APCarPlayAVVCServerGetTypeID);
  }
  uint64_t Instance = (void *)_CFRuntimeCreateInstance();
  if (!Instance)
  {
    uint64_t result = APSLogErrorAt();
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
    int v6 = -6728;
    goto LABEL_18;
  }
  Instance[2] = 0;
  CFAllocatorRef v3 = Instance + 2;
  Instance[3] = 0;
  Instance[4] = 0;
  gCarPlayAVVCServer = (uint64_t)Instance;
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigXPCServerStart();
  uint64_t result = *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (!result)
  {
    if (*v3)
    {
      if (gLogCategory_APCarPlayAVVCServer <= 50)
      {
        if (gLogCategory_APCarPlayAVVCServer != -1 || (uint64_t result = _LogCategory_Initialize(), result))
        {
          return LogPrintF();
        }
      }
      return result;
    }
    uint64_t result = APSLogErrorAt();
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
    int v6 = -6718;
LABEL_18:
    *(_DWORD *)(v5 + 24) = v6;
    return result;
  }
  return APSLogErrorAt();
}

uint64_t APCarPlayAVVCServer_MessageHandler(uint64_t a1, void *a2)
{
  CFTypeRef v3 = CFRetain((CFTypeRef)gCarPlayAVVCServer);
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode)
  {
    uint64_t v7 = OpCode;
LABEL_5:
    APSLogErrorAt();
    goto LABEL_6;
  }
  if (xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E4F20280]))
  {
    uint64_t v5 = FigXPCServerLookupAndRetainAssociatedObject();
    if (v5)
    {
      uint64_t v7 = v5;
      goto LABEL_5;
    }
  }
  APSLogErrorAt();
  uint64_t v7 = 0;
LABEL_6:
  if (v3) {
    CFRelease(v3);
  }
  return v7;
}

uint64_t APCarPlayAVVCServer_NoReplyMessageHandler()
{
  return 4294960582;
}

uint64_t APCarPlayAVVCServer_VerifyConnectionCallback()
{
  uint64_t has_entitlement = xpc_connection_has_entitlement();
  if ((has_entitlement & 1) == 0
    && gLogCategory_APCarPlayAVVCServer <= 90
    && (gLogCategory_APCarPlayAVVCServer != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return has_entitlement;
}

uint64_t Server_AssociateObjectWithConnection(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (!a1) {
    return 4294960576;
  }
  uint64_t v5 = FigXPCServerAssociateObjectWithConnection();
  if (v5) {
    APSLogErrorAt();
  }
  else {
    xpc_dictionary_set_uint64(a4, (const char *)*MEMORY[0x1E4F20280], 0);
  }
  return v5;
}

uint64_t StreamServer_StreamDestructor()
{
  if (gLogCategory_APCarPlayAVVCServer <= 30
    && (gLogCategory_APCarPlayAVVCServer != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v0 = APSGetFBOPropertyInt64();
  uint64_t result = 0;
  if (v0)
  {
    uint64_t result = FigEndpointStreamSuspendSync();
    if (result) {
      return APSLogErrorAt();
    }
  }
  return result;
}

void StreamServer_SinkDestructor(const void *a1)
{
  if (gLogCategory_APCarPlayAVVCServer <= 30
    && (gLogCategory_APCarPlayAVVCServer != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v2 = *(void **)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    CFTypeRef v3 = v2;
  }
  else {
    CFTypeRef v3 = 0;
  }
  if (*v3 >= 2uLL)
  {
    uint64_t v4 = (void (*)(const void *))v3[4];
    if (v4) {
      v4(a1);
    }
  }
  CFRelease(a1);
}

uint64_t APStarkModeCreateDictionaryRepresentation(uint64_t a1, __CFDictionary **a2)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableDictionaryRef v4 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v4)
    {
      CFMutableDictionaryRef v5 = v4;
      CFDictionarySetInt64();
      CFDictionarySetInt64();
      uint64_t v6 = CFArrayEnsureCreatedAndAppend();
      CFRelease(v5);
      if (!v6)
      {
        CFMutableDictionaryRef v7 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (v7)
        {
          CFMutableDictionaryRef v8 = v7;
          CFDictionarySetInt64();
          CFDictionarySetInt64();
          CFDictionarySetInt64();
          uint64_t v6 = CFArrayEnsureCreatedAndAppend();
          CFRelease(v8);
          if (!v6)
          {
            CFMutableDictionaryRef v9 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            if (v9)
            {
              CFMutableDictionaryRef v10 = v9;
              CFDictionarySetInt64();
              CFDictionarySetInt64();
              uint64_t v6 = CFArrayEnsureCreatedAndAppend();
              CFRelease(v10);
              if (!v6)
              {
                CFMutableDictionaryRef v11 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                if (v11)
                {
                  CFMutableDictionaryRef v12 = v11;
                  CFDictionarySetInt64();
                  CFDictionarySetInt64();
                  CFDictionarySetInt64();
                  uint64_t v6 = CFArrayEnsureCreatedAndAppend();
                  CFRelease(v12);
                  if (!v6)
                  {
                    CFMutableDictionaryRef v13 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                    if (v13)
                    {
                      CFMutableDictionaryRef v14 = v13;
                      CFDictionarySetInt64();
                      CFDictionarySetInt64();
                      CFDictionarySetInt64();
                      uint64_t v6 = CFArrayEnsureCreatedAndAppend();
                      CFRelease(v14);
                      if (!v6)
                      {
                        CFDictionarySetValue(Mutable, @"appStates", 0);
                        CFDictionarySetValue(Mutable, @"resources", 0);
                        *a2 = Mutable;
                        CFMutableDictionaryRef Mutable = 0;
                        goto LABEL_13;
                      }
                    }
                    else
                    {
                      uint64_t v6 = 4294895246;
                    }
                  }
                }
                else
                {
                  uint64_t v6 = 4294895246;
                }
              }
            }
            else
            {
              uint64_t v6 = 4294895246;
            }
          }
        }
        else
        {
          uint64_t v6 = 4294895246;
        }
      }
    }
    else
    {
      uint64_t v6 = 4294895246;
    }
  }
  else
  {
    uint64_t v6 = 4294895246;
  }
  APSLogErrorAt();
LABEL_13:
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v6;
}

uint64_t APStarkModeCreateStructRepresentation(CFDictionaryRef theDict, _OWORD *a2)
{
  v21[0] = 0;
  v21[1] = v21;
  v21[2] = 0x2000000000;
  v21[3] = 0;
  v19[0] = 0;
  v19[1] = v19;
  v19[2] = 0x2000000000;
  int v20 = 0;
  v17[0] = 0;
  v17[1] = v17;
  void v17[2] = 0x2000000000;
  int v18 = 0;
  v15[0] = 0;
  v15[1] = v15;
  v15[2] = 0x2000000000;
  int v16 = 0;
  uint64_t v10 = 0;
  CFMutableDictionaryRef v11 = &v10;
  uint64_t v12 = 0x3800000000;
  long long v13 = 0u;
  long long v14 = 0u;
  if (!theDict)
  {
    uint64_t v7 = 4294895245;
LABEL_13:
    APSLogErrorAt();
    goto LABEL_10;
  }
  if (!a2)
  {
    uint64_t v7 = 4294895245;
    goto LABEL_13;
  }
  for (uint64_t i = 24; i != 56; ++i)
    *((unsigned char *)&v10 + i) = 0;
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, @"appStates");
  CFArrayRef v6 = (const __CFArray *)CFDictionaryGetValue(theDict, @"resources");
  if (Value)
  {
    CFArrayGetCount(Value);
    CFArrayApplyBlock();
  }
  if (v6)
  {
    CFArrayGetCount(v6);
    CFArrayApplyBlock();
  }
  uint64_t v7 = 0;
  long long v8 = *(_OWORD *)(v11 + 5);
  *a2 = *(_OWORD *)(v11 + 3);
  a2[1] = v8;
LABEL_10:
  _Block_object_dispose(&v10, 8);
  _Block_object_dispose(v15, 8);
  _Block_object_dispose(v17, 8);
  _Block_object_dispose(v19, 8);
  _Block_object_dispose(v21, 8);
  return v7;
}

uint64_t __APStarkModeCreateStructRepresentation_block_invoke(void *a1, uint64_t a2)
{
  *(void *)(*(void *)(a1[4] + 8) + 24) = a2;
  *(_DWORD *)(*(void *)(a1[5] + 8) + 24) = CFDictionaryGetInt64();
  uint64_t result = CFDictionaryGetInt64();
  *(_DWORD *)(*(void *)(a1[6] + 8) + 24) = result;
  int v4 = *(_DWORD *)(*(void *)(a1[5] + 8) + 24);
  switch(v4)
  {
    case 1:
      int v9 = *(_DWORD *)(*(void *)(a1[6] + 8) + 24);
      if (v9 == 2) {
        int v10 = 1;
      }
      else {
        int v10 = 2 * (v9 == 1);
      }
      *(_DWORD *)(*(void *)(a1[7] + 8) + 40) = v10;
      uint64_t result = CFDictionaryGetInt64();
      if (result == -1)
      {
        int v11 = 0;
      }
      else
      {
        uint64_t result = CFDictionaryGetInt64();
        if (result == 1) {
          int v11 = 10;
        }
        else {
          int v11 = 11;
        }
      }
      *(_DWORD *)(*(void *)(a1[7] + 8) + 44) = v11;
      break;
    case 3:
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8) + 24);
      if (v7 == 2) {
        int v8 = 1;
      }
      else {
        int v8 = 2 * (v7 == 1);
      }
      *(_DWORD *)(*(void *)(a1[7] + 8) + 52) = v8;
      break;
    case 2:
      int v5 = *(_DWORD *)(*(void *)(a1[6] + 8) + 24);
      if (v5 == 2) {
        int v6 = 1;
      }
      else {
        int v6 = 2 * (v5 == 1);
      }
      *(_DWORD *)(*(void *)(a1[7] + 8) + 48) = v6;
      break;
  }
  return result;
}

uint64_t __APStarkModeCreateStructRepresentation_block_invoke_2(void *a1, uint64_t a2)
{
  *(void *)(*(void *)(a1[4] + 8) + 24) = a2;
  *(_DWORD *)(*(void *)(a1[5] + 8) + 24) = CFDictionaryGetInt64();
  uint64_t result = CFDictionaryGetInt64();
  *(_DWORD *)(*(void *)(a1[6] + 8) + 24) = result;
  int v4 = *(_DWORD *)(*(void *)(a1[5] + 8) + 24);
  if (v4 == 1)
  {
    int v8 = *(_DWORD *)(*(void *)(a1[6] + 8) + 24);
    if (v8 == 2) {
      int v9 = 1;
    }
    else {
      int v9 = 2 * (v8 == 1);
    }
    *(_DWORD *)(*(void *)(a1[7] + 8) + 24) = v9;
    uint64_t result = CFDictionaryGetInt64();
    if (result == 2)
    {
      int v10 = 1;
    }
    else
    {
      uint64_t result = CFDictionaryGetInt64();
      int v10 = 2 * (result == 1);
    }
    *(_DWORD *)(*(void *)(a1[7] + 8) + 28) = v10;
  }
  else if (v4 == 2)
  {
    int v5 = *(_DWORD *)(*(void *)(a1[6] + 8) + 24);
    if (v5 == 2) {
      int v6 = 1;
    }
    else {
      int v6 = 2 * (v5 == 1);
    }
    *(_DWORD *)(*(void *)(a1[7] + 8) + 32) = v6;
    uint64_t result = CFDictionaryGetInt64();
    if (result == 2)
    {
      int v7 = 1;
    }
    else
    {
      uint64_t result = CFDictionaryGetInt64();
      int v7 = 2 * (result == 1);
    }
    *(_DWORD *)(*(void *)(a1[7] + 8) + 36) = v7;
  }
  return result;
}

CFArrayRef APStarkModeInitialOwnerRequestMakeFromDictionary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a4 + 8) = 0;
  *(void *)a4 = 0;
  CFArrayGetTypeID();
  CFArrayRef result = (const __CFArray *)CFDictionaryGetTypedValue();
  if (result)
  {
    CFIndex Count = CFArrayGetCount(result);
    if (Count >= 1)
    {
      CFIndex v8 = Count;
      for (uint64_t i = 0; v8 != i; ++i)
      {
        CFDictionaryGetTypeID();
        TypedValueAtunsigned int Index = CFArrayGetTypedValueAtIndex();
        if (gLogCategory_APReceiverNTPClient <= 40
          && (gLogCategory_APReceiverNTPClient != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        if (!TypedValueAtIndex) {
          continue;
        }
        int Int64 = CFDictionaryGetInt64();
        if (Int64 == 2)
        {
          int v15 = CFDictionaryGetInt64();
          int v16 = v15 == 2;
          if (v15 == 1) {
            int v16 = 2;
          }
          *(_DWORD *)a4 = v16;
          if (v15 == 1)
          {
            int v17 = 100;
            *(_DWORD *)(a4 + 4) = 100;
          }
          else
          {
            int v20 = CFDictionaryGetInt64();
            if (v20 == 100 || v20 == 1000 || v20 == 500)
            {
              if (v20 == 1000) {
                int v21 = 1000;
              }
              else {
                int v21 = 0;
              }
              if (v20 == 500) {
                int v21 = 500;
              }
              if (v20 == 100) {
                int v21 = 100;
              }
            }
            else
            {
              int v21 = 100;
            }
            *(_DWORD *)(a4 + 4) = v21;
            int v23 = CFDictionaryGetInt64();
            if (v23 == 100 || v23 == 1000 || v23 == 500)
            {
              if (v23 == 1000) {
                int v17 = 1000;
              }
              else {
                int v17 = 0;
              }
              if (v23 == 500) {
                int v17 = 500;
              }
              if (v23 == 100) {
                int v17 = 100;
              }
            }
            else
            {
              int v17 = 100;
            }
          }
          *(_DWORD *)(a4 + 8) = v17;
          if (gLogCategory_APReceiverNTPClient > 40
            || gLogCategory_APReceiverNTPClient == -1 && !_LogCategory_Initialize())
          {
            continue;
          }
        }
        else
        {
          if (Int64 != 1) {
            continue;
          }
          int v12 = CFDictionaryGetInt64();
          int v13 = v12 == 2;
          if (v12 == 1) {
            int v13 = 2;
          }
          *(_DWORD *)a3 = v13;
          if (v12 == 1)
          {
            int v14 = 100;
            *(_DWORD *)(a3 + 4) = 100;
          }
          else
          {
            int v18 = CFDictionaryGetInt64();
            if (v18 == 100 || v18 == 1000 || v18 == 500)
            {
              if (v18 == 1000) {
                int v19 = 1000;
              }
              else {
                int v19 = 0;
              }
              if (v18 == 500) {
                int v19 = 500;
              }
              if (v18 == 100) {
                int v19 = 100;
              }
            }
            else
            {
              int v19 = 100;
            }
            *(_DWORD *)(a3 + 4) = v19;
            int v22 = CFDictionaryGetInt64();
            if (v22 == 100 || v22 == 1000 || v22 == 500)
            {
              if (v22 == 1000) {
                int v14 = 1000;
              }
              else {
                int v14 = 0;
              }
              if (v22 == 500) {
                int v14 = 500;
              }
              if (v22 == 100) {
                int v14 = 100;
              }
            }
            else
            {
              int v14 = 100;
            }
          }
          *(_DWORD *)(a3 + 8) = v14;
          if (gLogCategory_APReceiverNTPClient > 40
            || gLogCategory_APReceiverNTPClient == -1 && !_LogCategory_Initialize())
          {
            continue;
          }
        }
        LogPrintF();
      }
    }
    return 0;
  }
  return result;
}

uint64_t APStarkModeChangeRequestMakeFromDictionary(uint64_t a1, int a2, uint64_t a3)
{
  unsigned int v23 = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(void *)(a3 + 64) = 0;
  *(void *)a3 = 0x100000001;
  CFArrayGetTypeID();
  TypedCFArrayRef Value = (const __CFArray *)CFDictionaryGetTypedValue();
  if (!TypedValue || (CFIndex v6 = CFArrayGetCount(TypedValue), v6 < 1))
  {
LABEL_34:
    CFArrayGetTypeID();
    CFArrayRef v15 = (const __CFArray *)CFDictionaryGetTypedValue();
    if (v15)
    {
      CFIndex Count = CFArrayGetCount(v15);
      if (Count >= 1)
      {
        CFIndex v17 = Count;
        for (uint64_t i = 0; v17 != i; ++i)
        {
          CFDictionaryGetTypeID();
          TypedValueAtunsigned int Index = (const __CFDictionary *)CFArrayGetTypedValueAtIndex();
          if (TypedValueAtIndex)
          {
            int Int64 = CFDictionaryGetInt64();
            if (Int64 == 2)
            {
              unsigned int v23 = apStarkMode_parseResourceChangeRequest(TypedValueAtIndex, a2, a3 + 32);
              if (v23) {
                goto LABEL_52;
              }
            }
            else if (Int64 == 1)
            {
              unsigned int v23 = apStarkMode_parseResourceChangeRequest(TypedValueAtIndex, a2, a3 + 8);
              if (v23) {
                goto LABEL_52;
              }
            }
          }
          unsigned int v23 = 0;
        }
      }
    }
    if (a2) {
      return v23;
    }
    goto LABEL_45;
  }
  CFIndex v7 = v6;
  uint64_t v8 = 0;
  while (1)
  {
    CFDictionaryGetTypeID();
    if (!CFArrayGetTypedValueAtIndex()) {
      goto LABEL_33;
    }
    int v9 = CFDictionaryGetInt64();
    if (v9 != 1)
    {
      if (v9 == 3)
      {
        if (a2 && *(_DWORD *)(a3 + 64)) {
          break;
        }
        if (CFDictionaryGetInt64()) {
          int v13 = 1;
        }
        else {
          int v13 = -1;
        }
        *(_DWORD *)(a3 + 64) = v13;
      }
      else if (v9 == 2)
      {
        if (a2 && *(_DWORD *)(a3 + 60)) {
          break;
        }
        if (CFDictionaryGetInt64()) {
          int v10 = 1;
        }
        else {
          int v10 = -1;
        }
        *(_DWORD *)(a3 + 60) = v10;
      }
      goto LABEL_33;
    }
    if (a2 && *(_DWORD *)(a3 + 56)) {
      break;
    }
    int v11 = CFDictionaryGetInt64();
    int v12 = -1;
    switch(v11)
    {
      case -1:
        goto LABEL_32;
      case 1:
        int v12 = 10;
LABEL_32:
        *(_DWORD *)(a3 + 56) = v12;
        goto LABEL_33;
      case 2:
        int v14 = 11;
        break;
      default:
        int v14 = 0;
        break;
    }
    *(_DWORD *)(a3 + 56) = v14;
    if (a2 && v11 != 2)
    {
      int v22 = -72051;
      goto LABEL_51;
    }
    if (v11 != 2)
    {
      int v12 = -1;
      goto LABEL_32;
    }
LABEL_33:
    unsigned int v23 = 0;
    if (v7 == ++v8) {
      goto LABEL_34;
    }
  }
  int v22 = -72052;
LABEL_51:
  APSLogErrorAt();
  unsigned int v23 = v22;
LABEL_52:
  APSLogErrorAt();
  if (!a2)
  {
LABEL_45:
    if (v23)
    {
      *(void *)(a3 + 64) = 0;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(void *)a3 = 0x100000001;
      return 0;
    }
  }
  return v23;
}

uint64_t apStarkMode_parseResourceChangeRequest(const __CFDictionary *a1, int a2, uint64_t a3)
{
  unsigned int v16 = 0;
  if (!*(_DWORD *)a3)
  {
    int v6 = CFDictionaryGetInt64() - 1;
    int v7 = 21;
    int v8 = 20;
    switch(v6)
    {
      case 0:
        goto LABEL_4;
      case 1:
        goto LABEL_14;
      case 2:
        int v8 = 22;
LABEL_4:
        *(_DWORD *)a3 = v8;
        if (*(_DWORD *)(a3 + 4)) {
          break;
        }
        int Int64 = CFDictionaryGetInt64();
        if (Int64 == 500) {
          int v10 = 500;
        }
        else {
          int v10 = 0;
        }
        if (Int64 == 100) {
          int v10 = 100;
        }
        *(_DWORD *)(a3 + 4) = v10;
        if (!v10) {
          goto LABEL_36;
        }
        int v7 = *(_DWORD *)a3;
LABEL_15:
        if ((v7 & 0xFFFFFFFE) == 0x16)
        {
          *(void *)(a3 + 8) = CFDictionaryGetValue(a1, @"borrowID");
          int v7 = *(_DWORD *)a3;
        }
        if (v7 == 22)
        {
          if (*(_DWORD *)(a3 + 16)) {
            break;
          }
          int v13 = CFDictionaryGetInt64();
          if (v13 == 100 || v13 == 1000 || v13 == 500)
          {
            *(_DWORD *)(a3 + 16) = v13;
            goto LABEL_38;
          }
          *(_DWORD *)(a3 + 16) = 0;
          goto LABEL_36;
        }
        if (v7 != 20) {
          goto LABEL_38;
        }
        if (!*(_DWORD *)(a3 + 16))
        {
          int v11 = CFDictionaryGetInt64();
          if (v11 == 100 || v11 == 500 || v11 == 1000)
          {
            *(_DWORD *)(a3 + 16) = v11;
            if (*(_DWORD *)(a3 + 20)) {
              break;
            }
            int v12 = CFDictionaryGetInt64();
            if (v12 == 100 || v12 == 1000 || v12 == 500)
            {
              *(_DWORD *)(a3 + 20) = v12;
              goto LABEL_38;
            }
            *(_DWORD *)(a3 + 20) = 0;
          }
          else
          {
            *(_DWORD *)(a3 + 16) = 0;
          }
LABEL_36:
          APSLogErrorAt();
          int v14 = -72051;
          goto LABEL_37;
        }
        break;
      case 3:
        int v7 = 23;
LABEL_14:
        *(_DWORD *)a3 = v7;
        goto LABEL_15;
      default:
        *(_DWORD *)a3 = 0;
        goto LABEL_36;
    }
  }
  APSLogErrorAt();
  int v14 = -72052;
LABEL_37:
  unsigned int v16 = v14;
LABEL_38:
  uint64_t result = v16;
  if (!a2)
  {
    if (v16)
    {
      uint64_t result = 0;
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
    }
  }
  return result;
}

uint64_t APStarkModeChangeRequestToString(_DWORD *a1, uint64_t a2)
{
  SNPrintF_Add();
  if (a1[2])
  {
    SNPrintF_Add();
    SNPrintF_Add();
    int v4 = a1[2];
    if (v4 == 22 || v4 == 20) {
      SNPrintF_Add();
    }
  }
  if (a1[8])
  {
    SNPrintF_Add();
    SNPrintF_Add();
    int v5 = a1[8];
    if (v5 == 22 || v5 == 20) {
      SNPrintF_Add();
    }
  }
  if (a1[14])
  {
    SNPrintF_Add();
    SNPrintF_Add();
  }
  if (a1[15])
  {
    SNPrintF_Add();
    SNPrintF_Add();
  }
  if (a1[16])
  {
    SNPrintF_Add();
    SNPrintF_Add();
  }
  return a2;
}

uint64_t APStarkInitialOwnerRequestToString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    SNPrintF_Add();
    SNPrintF_Add();
  }
  SNPrintF_Add();
  SNPrintF_Add();
  if (a2)
  {
    SNPrintF_Add();
    SNPrintF_Add();
  }
  SNPrintF_Add();
  return a3;
}

uint64_t APRealTimeAudioFileWriterGetTypeID()
{
  if (gAPRealTimeAudioFileWriterInitOnce != -1) {
    dispatch_once_f(&gAPRealTimeAudioFileWriterInitOnce, 0, (dispatch_function_t)_APRealTimeAudioFileWriterGetTypeID);
  }
  return gAPRealTimeAudioFileWriterTypeID;
}

uint64_t _APRealTimeAudioFileWriterGetTypeID()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gAPRealTimeAudioFileWriterCFTypeID TypeID = result;
  return result;
}

uint64_t APRealTimeAudioFileWriterCreate(const void *a1, long long *a2, uint64_t a3, uint64_t *a4)
{
  if (!a2 || !a4)
  {
    APSLogErrorAt();
    return -6705;
  }
  if (gAPRealTimeAudioFileWriterInitOnce != -1) {
    dispatch_once_f(&gAPRealTimeAudioFileWriterInitOnce, 0, (dispatch_function_t)_APRealTimeAudioFileWriterGetTypeID);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    APSLogErrorAt();
    return -6728;
  }
  uint64_t v9 = Instance;
  *(_OWORD *)(Instance + 16) = 0u;
  uint64_t v10 = Instance + 16;
  *(void *)(Instance + 160) = 0;
  *(_OWORD *)(Instance + 128) = 0u;
  *(_OWORD *)(Instance + 144) = 0u;
  *(_OWORD *)(Instance + 96) = 0u;
  *(_OWORD *)(Instance + 112) = 0u;
  *(_OWORD *)(Instance + 64) = 0u;
  *(_OWORD *)(Instance + 80) = 0u;
  *(_OWORD *)(Instance + 32) = 0u;
  *(_OWORD *)(Instance + 48) = 0u;
  long long v11 = *a2;
  long long v12 = a2[1];
  *(void *)(Instance + 72) = *((void *)a2 + 4);
  *(_OWORD *)(Instance + 56) = v12;
  *(_OWORD *)(Instance + 40) = v11;
  if (a3)
  {
    uint64_t v13 = *MEMORY[0x1E4F1CFD0];
    *(unsigned char *)(Instance + 80) = v13 == FigCFDictionaryGetBooleanValue();
  }
  if (a1) {
    *(void *)(v9 + 104) = CFRetain(a1);
  }
  else {
    *(void *)(v9 + 104) = CFStringCreateF();
  }
  dispatch_queue_t v14 = dispatch_queue_create("APRealTimeAudioFileWrite", 0);
  *(void *)(v9 + 32) = v14;
  if (!v14)
  {
    APSLogErrorAt();
    unsigned int v21 = -6728;
    goto LABEL_24;
  }
  unsigned int v21 = APAudioSourceConduitCreate(*MEMORY[0x1E4F1CF80], (long long *)(v10 + 24), (void *)v10);
  if (v21)
  {
LABEL_23:
    APSLogErrorAt();
LABEL_24:
    CFRelease((CFTypeRef)v9);
    return v21;
  }
  uint64_t v15 = *(void *)v10;
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  int v18 = *(uint64_t (**)(uint64_t))(v17 + 8);
  if (!v18)
  {
    unsigned int v21 = -12782;
    goto LABEL_23;
  }
  unsigned int v21 = v18(v15);
  if (v21) {
    goto LABEL_23;
  }
  *(void *)(v9 + 160) = FigSimpleMutexCreate();
  unsigned int v21 = APSRealTimeSignalCreate();
  if (v21) {
    goto LABEL_23;
  }
  *(double *)(v9 + 128) = (double)(int)APSSettingsGetIntWithDefault();
  if (gLogCategory_APRealTimeAudioFileWriter <= 50
    && (gLogCategory_APRealTimeAudioFileWriter != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *a4 = v9;
  return v21;
}

uint64_t apRealTimeAudioFileWriter_SignalCallback(uint64_t outExtAudioFile)
{
  uint64_t v1 = outExtAudioFile;
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  unint64_t v28 = 0;
  if (gLogCategory_APRealTimeAudioFileWriter <= 30)
  {
    if (gLogCategory_APRealTimeAudioFileWriter != -1
      || (outExtAudioFile = _LogCategory_Initialize(), outExtAudioFile))
    {
      outExtAudioFile = LogPrintF();
    }
  }
  if (*(unsigned char *)(v1 + 144)) {
    return outExtAudioFile;
  }
  uint64_t v27 = 0;
  memset(v26, 0, sizeof(v26));
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  if (*(unsigned char *)(v1 + 112) || *(void *)(v1 + 88)) {
    goto LABEL_31;
  }
  if (!*(void *)(v1 + 16))
  {
    APSLogErrorAt();
    int v6 = -6709;
    goto LABEL_75;
  }
  if (*(void *)(v1 + 96)) {
    goto LABEL_24;
  }
  bzero(v29, 0x400uLL);
  if (*(unsigned char *)(v1 + 80))
  {
    CFStringRef v2 = (const __CFString *)CFRetain(*(CFTypeRef *)(v1 + 104));
    goto LABEL_14;
  }
  if (!confstr(65537, v29, 0x400uLL))
  {
    int v6 = -6727;
LABEL_73:
    APSLogErrorAt();
    goto LABEL_74;
  }
  uint64_t v3 = mach_absolute_time();
  CFStringRef v2 = CFStringCreateWithFormat(0, 0, @"%sAP-%llu-%@.caf", v29, v3, *(void *)(v1 + 104));
  if (!v2)
  {
    int v6 = -6728;
    goto LABEL_73;
  }
LABEL_14:
  int v4 = *(const void **)(v1 + 96);
  if (v4) {
    CFRelease(v4);
  }
  CFURLRef v5 = CFURLCreateWithFileSystemPath(0, v2, kCFURLPOSIXPathStyle, 0);
  *(void *)(v1 + 96) = v5;
  if (v5)
  {
    if (gLogCategory_APRealTimeAudioFileWriter <= 30
      && (gLogCategory_APRealTimeAudioFileWriter != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    int v6 = 0;
    if (v2) {
      goto LABEL_22;
    }
  }
  else
  {
    APSLogErrorAt();
    int v6 = -6728;
    if (v2) {
LABEL_22:
    }
      CFRelease(v2);
  }
  if (v5)
  {
LABEL_24:
    if (gLogCategory_APRealTimeAudioFileWriter <= 50
      && (gLogCategory_APRealTimeAudioFileWriter != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    OSStatus v7 = ExtAudioFileCreateWithURL(*(CFURLRef *)(v1 + 96), 0x63616666u, (const AudioStreamBasicDescription *)(v1 + 40), 0, 0, (ExtAudioFileRef *)(v1 + 88));
    if (v7)
    {
      int v6 = v7;
    }
    else
    {
      OSStatus v8 = ExtAudioFileSetProperty(*(ExtAudioFileRef *)(v1 + 88), 0x63666D74u, 0x28u, (const void *)(v1 + 40));
      if (!v8)
      {
        *(void *)(v1 + 120) = 0;
        *(void *)(v1 + 136) = 0;
        goto LABEL_31;
      }
      int v6 = v8;
    }
  }
LABEL_74:
  APSLogErrorAt();
LABEL_75:
  *(unsigned char *)(v1 + 112) = 1;
  if (gLogCategory_APRealTimeAudioFileWriter <= 90
    && (gLogCategory_APRealTimeAudioFileWriter != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  apRealTimeAudioFileWriter_CloseFile(v1);
  if (v6)
  {
LABEL_57:
    outExtAudioFile = APSLogErrorAt();
    if (gLogCategory_APRealTimeAudioFileWriter <= 90)
    {
      if (gLogCategory_APRealTimeAudioFileWriter != -1) {
        return LogPrintF();
      }
      outExtAudioFile = _LogCategory_Initialize();
      if (outExtAudioFile) {
        return LogPrintF();
      }
    }
    return outExtAudioFile;
  }
LABEL_31:
  while (1)
  {
    uint64_t v9 = *(void *)(v1 + 16);
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v12 = *(void *)(VTable + 16);
    outExtAudioFile = VTable + 16;
    uint64_t v11 = v12;
    uint64_t v13 = v12 ? v11 : 0;
    dispatch_queue_t v14 = *(uint64_t (**)(uint64_t, void))(v13 + 32);
    if (!v14) {
      break;
    }
    outExtAudioFile = v14(v9, 0);
    if (!outExtAudioFile) {
      break;
    }
    if (*(unsigned char *)(v1 + 144)) {
      return outExtAudioFile;
    }
    uint64_t v15 = *(void *)(v1 + 16);
    uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v16) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = 0;
    }
    int v18 = *(unsigned int (**)(uint64_t, char *, uint64_t, unint64_t *, uint64_t *, uint64_t *, _OWORD *))(v17 + 48);
    if (!v18) {
      goto LABEL_57;
    }
    if (v18(v15, v29, 512, &v28, &v25, &v24, v26)) {
      goto LABEL_57;
    }
    *(&ioData.mNumberBuffers + 1) = 0;
    ioData.mNumberBuffers = 1;
    ioData.mBuffers[0].mNumberChannels = 1;
    ioData.mBuffers[0].size_t mDataByteSize = v28;
    ioData.mBuffers[0].mCFDataRef Data = v29;
    if (ExtAudioFileWrite(*(ExtAudioFileRef *)(v1 + 88), v28 / *(_DWORD *)(v1 + 64), &ioData)) {
      goto LABEL_57;
    }
    unint64_t v19 = v28;
    *(double *)(v1 + 120) = *(double *)(v1 + 120) + (double)(v28 / *(unsigned int *)(v1 + 64)) / *(double *)(v1 + 40);
    *(void *)(v1 + 136) += v19;
    FigSimpleMutexCheckIsNotLockedOnThisThread();
    MEMORY[0x1D25EB370](*(void *)(v1 + 160));
    unsigned int add = atomic_fetch_add((atomic_uint *volatile)(v1 + 148), -(int)v28);
    if (v28 == add)
    {
      unsigned int v21 = *(NSObject **)(v1 + 152);
      if (v21)
      {
        dispatch_semaphore_signal(v21);
        int v22 = *(NSObject **)(v1 + 152);
        if (v22)
        {
          dispatch_release(v22);
          *(void *)(v1 + 152) = 0;
        }
      }
    }
    MEMORY[0x1D25EB390](*(void *)(v1 + 160));
    if (gLogCategory_APRealTimeAudioFileWriter <= 40
      && (gLogCategory_APRealTimeAudioFileWriter != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  if (*(double *)(v1 + 120) > *(double *)(v1 + 128) && !*(unsigned char *)(v1 + 80))
  {
    if (gLogCategory_APRealTimeAudioFileWriter <= 50
      && (gLogCategory_APRealTimeAudioFileWriter != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    outExtAudioFile = apRealTimeAudioFileWriter_CloseFile(v1);
    if (outExtAudioFile) {
      goto LABEL_57;
    }
  }
  return outExtAudioFile;
}

uint64_t APRealTimeAudioFileWriterWriteAudioBytes(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (!*(void *)(a1 + 16)) {
    return 4294960587;
  }
  atomic_fetch_add((atomic_uint *volatile)(a1 + 148), a3);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v9 + 64);
  if (!v10) {
    return 4294954514;
  }
  uint64_t result = v10(v7, a2, a3, a4);
  if (!result)
  {
    APSRealTimeSignalRaise();
    return 0;
  }
  return result;
}

void APRealTimeAudioFileWriterSignalWhenDone(uint64_t a1, NSObject *a2)
{
  FigSimpleMutexCheckIsNotLockedOnThisThread();
  MEMORY[0x1D25EB370](*(void *)(a1 + 160));
  if (atomic_load((unsigned int *)(a1 + 148)))
  {
    *(void *)(a1 + 152) = a2;
    dispatch_retain(a2);
  }
  else
  {
    dispatch_semaphore_signal(a2);
  }
  JUMPOUT(0x1D25EB390);
}

uint64_t APRealTimeAudioFileWriterInvalidate(uint64_t a1)
{
  if (gLogCategory_APRealTimeAudioFileWriter <= 30
    && (gLogCategory_APRealTimeAudioFileWriter != -1 || _LogCategory_Initialize()))
  {
    atomic_load((unsigned int *)(a1 + 148));
    LogPrintF();
  }
  if (!*(unsigned char *)(a1 + 144))
  {
    *(unsigned char *)(a1 + 144) = 1;
    if (*(void *)(a1 + 24))
    {
      APSRealTimeSignalInvalidate();
      CFStringRef v2 = *(NSObject **)(a1 + 32);
      if (v2) {
        dispatch_sync(v2, &__block_literal_global_25);
      }
    }
    apRealTimeAudioFileWriter_CloseFile(a1);
    uint64_t v3 = *(void *)(a1 + 16);
    if (v3)
    {
      uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v4) {
        uint64_t v5 = v4;
      }
      else {
        uint64_t v5 = 0;
      }
      int v6 = *(void (**)(uint64_t))(v5 + 16);
      if (v6) {
        v6(v3);
      }
    }
  }
  return 0;
}

uint64_t apRealTimeAudioFileWriter_CloseFile(uint64_t a1)
{
  CFStringRef v2 = *(OpaqueExtAudioFile **)(a1 + 88);
  if (v2)
  {
    uint64_t v3 = ExtAudioFileDispose(v2);
    *(void *)(a1 + 88) = 0;
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(const void **)(a1 + 96);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 96) = 0;
  }
  return v3;
}

uint64_t _APRealTimeAudioFileWriterFinalize(uint64_t a1)
{
  if (gLogCategory_APRealTimeAudioFileWriter <= 30
    && (gLogCategory_APRealTimeAudioFileWriter != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(unsigned char *)(a1 + 144))
  {
    CFStringRef v2 = *(const void **)(a1 + 24);
    if (v2)
    {
      CFRelease(v2);
      *(void *)(a1 + 24) = 0;
    }
    uint64_t v3 = *(NSObject **)(a1 + 32);
    if (v3)
    {
      dispatch_release(v3);
      *(void *)(a1 + 32) = 0;
    }
    uint64_t v4 = *(NSObject **)(a1 + 152);
    if (v4)
    {
      dispatch_release(v4);
      *(void *)(a1 + 152) = 0;
    }
    uint64_t v5 = *(const void **)(a1 + 16);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(a1 + 16) = 0;
    }
    int v6 = *(const void **)(a1 + 96);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(a1 + 96) = 0;
    }
    uint64_t v7 = *(const void **)(a1 + 104);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(a1 + 104) = 0;
    }
    return FigSimpleMutexDestroy();
  }
  else
  {
    uint64_t result = gLogCategory_APRealTimeAudioFileWriter;
    if (gLogCategory_APRealTimeAudioFileWriter <= 100) {
      uint64_t result = _APRealTimeAudioFileWriterFinalize_cold_1(gLogCategory_APRealTimeAudioFileWriter);
    }
    __break(1u);
  }
  return result;
}

uint64_t APEndpointDescriptionAirPlayCreateWithTransportDevice(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!a4)
  {
    uint64_t v14 = 4294895545;
    APSLogErrorAt();
    return v14;
  }
  APEndpointDescriptionGetClassID();
  uint64_t v6 = CMDerivedObjectCreate();
  if (v6)
  {
    uint64_t v14 = v6;
LABEL_23:
    APSLogErrorAt();
    return v14;
  }
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v8 = FigSimpleMutexCreate();
  *uint64_t DerivedStorage = v8;
  if (!v8 || (SNPrintF(), dispatch_queue_t v9 = dispatch_queue_create(label, 0), (DerivedStorage[11] = v9) == 0))
  {
    APSLogErrorAt();
    return 4294895546;
  }
  CFArrayRef Value = (const void *)FigCFDictionaryGetValue();
  if (Value) {
    CFArrayRef Value = CFRetain(Value);
  }
  DerivedStorage[13] = Value;
  *((unsigned char *)DerivedStorage + 112) = APSSettingsIsFeatureEnabled();
  if (a2)
  {
    CFTypeRef v11 = CFRetain(a2);
    DerivedStorage[1] = v11;
    if (v11)
    {
      AdvertiserInfo = (const void *)APTransportDeviceGetAdvertiserInfo();
      DerivedStorage[2] = AdvertiserInfo;
      if (!AdvertiserInfo)
      {
        APSLogErrorAt();
        return APSSignalErrorAt();
      }
      CFRetain(AdvertiserInfo);
      goto LABEL_13;
    }
  }
  else
  {
    DerivedStorage[1] = 0;
  }
  uint64_t v13 = APAdvertiserInfoCreate();
  if (v13)
  {
    uint64_t v14 = v13;
    goto LABEL_23;
  }
LABEL_13:
  if (DerivedStorage[2])
  {
    MEMORY[0x1D25EB370](*DerivedStorage);
    CMBaseObjectGetDerivedStorage();
    if (airPlayDescription_hasFeatureInternal(0)) {
      DerivedStorage[12] = APAdvertiserInfoCopyProperty();
    }
    MEMORY[0x1D25EB390](*DerivedStorage);
    uint64_t v14 = 0;
    *a4 = 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294895543;
  }
  return v14;
}

uint64_t airPlayDescription_Finalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointDescriptionAirPlay <= 30
    && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v1 = (const void *)DerivedStorage[7];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[7] = 0;
  }
  CFStringRef v2 = (const void *)DerivedStorage[9];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[9] = 0;
  }
  uint64_t v3 = (const void *)DerivedStorage[12];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[12] = 0;
  }
  uint64_t v4 = (const void *)DerivedStorage[1];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[1] = 0;
  }
  uint64_t v5 = (const void *)DerivedStorage[2];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[2] = 0;
  }
  uint64_t v6 = (const void *)DerivedStorage[3];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[3] = 0;
  }
  uint64_t v7 = (const void *)DerivedStorage[4];
  if (v7)
  {
    CFRelease(v7);
    DerivedStorage[4] = 0;
  }
  uint64_t v8 = (const void *)DerivedStorage[5];
  if (v8)
  {
    CFRelease(v8);
    DerivedStorage[5] = 0;
  }
  dispatch_queue_t v9 = (const void *)DerivedStorage[6];
  if (v9)
  {
    CFRelease(v9);
    DerivedStorage[6] = 0;
  }
  uint64_t v10 = (const void *)DerivedStorage[10];
  if (v10)
  {
    CFRelease(v10);
    DerivedStorage[10] = 0;
  }
  CFTypeRef v11 = (const void *)DerivedStorage[13];
  if (v11)
  {
    CFRelease(v11);
    DerivedStorage[13] = 0;
  }
  uint64_t v12 = DerivedStorage[11];
  if (v12)
  {
    dispatch_release(v12);
    DerivedStorage[11] = 0;
  }
  return FigSimpleMutexDestroy();
}

__CFString *airPlayDescription_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t v6 = 0;
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1D25EB370](*DerivedStorage);
  airPlayDescription_copyName(a1, (uint64_t *)&v6);
  MEMORY[0x1D25EB390](*DerivedStorage);
  uint64_t v4 = v6;
  CFStringAppendFormat(Mutable, 0, @"<APEndpointDescriptionAirPlay %p, name=%@>", a1, v6);
  if (v4) {
    CFRelease(v4);
  }
  return Mutable;
}

uint64_t airPlayDescription_CopyProperty(const void *a1, const void *a2, const __CFAllocator *a3, uint64_t *a4)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointDescriptionAirPlay <= 30
    && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!a2)
  {
    uint64_t v9 = 4294895545;
LABEL_11:
    APSLogErrorAt();
    return v9;
  }
  if (!a4)
  {
    uint64_t v9 = 4294895545;
    goto LABEL_11;
  }
  MEMORY[0x1D25EB370](*DerivedStorage);
  uint64_t v9 = airPlayDescription_copyPropertyInternal(a1, a2, a3, a4);
  MEMORY[0x1D25EB390](*DerivedStorage);
  return v9;
}

uint64_t airPlayDescription_SetProperty(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointDescriptionAirPlay <= 30
    && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a2)
  {
    MEMORY[0x1D25EB370](*DerivedStorage);
    uint64_t v7 = CMBaseObjectGetDerivedStorage();
    if (CFEqual(a2, @"PairingPeerCUAirPlayIdentifier"))
    {
      uint64_t v8 = *(const void **)(v7 + 32);
      *(void *)(v7 + 32) = a3;
      if (!a3) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
    if (CFEqual(a2, @"PairingPeerCUSystemIdentifier"))
    {
      uint64_t v8 = *(const void **)(v7 + 40);
      *(void *)(v7 + 40) = a3;
      if (!a3) {
        goto LABEL_9;
      }
    }
    else
    {
      if (!CFEqual(a2, @"PairingPeerPublicKey"))
      {
        if (CFEqual(a2, @"PermanentSpeakerGroupingInfo"))
        {
          if (!FigCFEqual()) {
            airPlayDescription_updateWithAdvertiserAndPSGInfosNotifyingClients(a1, *(const void **)(v7 + 16), a3);
          }
          goto LABEL_11;
        }
        if (CFEqual(a2, @"SupportsBufferedAudio")
          && (CMBaseObjectGetDerivedStorage(), airPlayDescription_hasFeatureInternal((uint64_t)a1)))
        {
          *(unsigned char *)(v7 + 65) = CFBooleanGetValue((CFBooleanRef)a3);
        }
        else
        {
          if (!CFEqual(a2, @"SupportsJarvis"))
          {
            if (!CFEqual(a2, @"HeadUnitRestrictions"))
            {
              if (gLogCategory_APEndpointDescriptionAirPlay <= 30
                && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
              goto LABEL_11;
            }
            uint64_t v8 = *(const void **)(v7 + 72);
            *(void *)(v7 + 72) = a3;
            if (!a3) {
              goto LABEL_9;
            }
            goto LABEL_8;
          }
          *(unsigned char *)(v7 + 64) = CFBooleanGetValue((CFBooleanRef)a3);
        }
LABEL_11:
        MEMORY[0x1D25EB390](*DerivedStorage);
        return 0;
      }
      uint64_t v8 = *(const void **)(v7 + 48);
      *(void *)(v7 + 48) = a3;
      if (!a3)
      {
LABEL_9:
        if (v8) {
          CFRelease(v8);
        }
        goto LABEL_11;
      }
    }
LABEL_8:
    CFRetain(a3);
    goto LABEL_9;
  }
  APSLogErrorAt();
  return 4294895545;
}

uint64_t airPlayDescription_copyName(uint64_t a1, uint64_t *a2)
{
  *a2 = APAdvertiserInfoCopyProperty();
  return 0;
}

uint64_t airPlayDescription_copyPropertyInternal(const void *a1, const void *a2, const __CFAllocator *a3, uint64_t *a4)
{
  unsigned int v72 = 0;
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, @"DeviceID"))
  {
    if (CFEqual(a2, @"TransportDevice"))
    {
      CFTypeRef v11 = (const void *)DerivedStorage[1];
      if (v11)
      {
LABEL_7:
        CFTypeRef v11 = CFRetain(v11);
LABEL_8:
        *a4 = (uint64_t)v11;
        return v72;
      }
      return -71754;
    }
    if (CFEqual(a2, @"Name")) {
      return airPlayDescription_copyName((uint64_t)a1, a4);
    }
    if (CFEqual(a2, @"NameIsFactoryDefault")) {
      goto LABEL_14;
    }
    if (CFEqual(a2, @"OSBuildVersion")) {
      return airPlayDescription_copyOSBuildVersion((uint64_t)a1, a4);
    }
    if (CFEqual(a2, @"SourceVersion")) {
      return airPlayDescription_copySourceVersion((uint64_t)a1, a4);
    }
    if (CFEqual(a2, @"OSVersion")) {
      goto LABEL_14;
    }
    if (CFEqual(a2, @"Model"))
    {
      airPlayDescription_copyModel((uint64_t)a1, a4);
      return 0;
    }
    if (CFEqual(a2, @"Manufacturer")) {
      return airPlayDescription_copyManufacturer(a1, a4);
    }
    if (CFEqual(a2, @"Company")) {
      return airPlayDescription_copyCompany(a1, a4);
    }
    if (CFEqual(a2, @"VolumeControlType"))
    {
      uint64_t v13 = @"volumeControlType";
LABEL_29:
      airPlayDescription_copyEndpointInfoValue((uint64_t)a1, v13, (const __CFDictionary **)a4);
      return 0;
    }
    if (CFEqual(a2, @"VolumeControlTypeEx")) {
      return airPlayDescription_copyVolumeControlTypeEx((uint64_t)a1, (uint64_t)a3, a4);
    }
    if (CFEqual(a2, @"MuteControlType")) {
      return airPlayDescription_copyMuteControlType(a1, (uint64_t)a3, (CFTypeRef *)a4);
    }
    if (CFEqual(a2, @"FirmwareVersion")
      || CFEqual(a2, @"SerialNumber")
      || CFEqual(a2, @"BluetoothIdentifier"))
    {
      goto LABEL_14;
    }
    if (CFEqual(a2, @"MACAddress")) {
      return airPlayDescription_copyMACAddress((uint64_t)a1, a3, (CFDataRef *)a4);
    }
    if (CFEqual(a2, @"AudioLatencyForAV")) {
      return airPlayDescription_copyAudioLatencyForAV(a3, (CFNumberRef *)a4);
    }
    if (CFEqual(a2, @"AudioLatencyOffsetForAV")) {
      return airPlayDescription_copyAudioLatencyOffsetForAV(a3, (CFNumberRef *)a4);
    }
    if (CFEqual(a2, @"AuthenticationType")) {
      return airPlayDescription_copyAuthenticationType((uint64_t)a1, a4);
    }
    if (CFEqual(a2, @"PasswordRequired"))
    {
      airPlayDescription_copyPasswordRequired((uint64_t)a1, a4);
      return 0;
    }
    if (CFEqual(a2, @"PINRequired"))
    {
      uint64_t v14 = (uint64_t)a1;
      int v15 = 8;
LABEL_49:
      airplayDescription_copyStatusFlagsContainsFlag(v14, v15, a4);
      return 0;
    }
    if (CFEqual(a2, @"PairingPeerCUAirPlayIdentifier"))
    {
      airPlayDescription_copyPairingPeerCUAirPlayIdentifier((uint64_t)a1, a4);
      return 0;
    }
    if (CFEqual(a2, @"PairingPeerCUSystemIdentifier"))
    {
      airPlayDescription_copyPairingPeerCUSystemIdentifier((uint64_t)a1, a4);
      return 0;
    }
    if (CFEqual(a2, @"PairingPeerPublicKey")) {
      return airPlayDescription_copyPairingPeerPublicKey((uint64_t)a1, (uint64_t)a3, (CFTypeRef *)a4);
    }
    if (CFEqual(a2, @"OneTimePairingRequired"))
    {
      airPlayDescription_copyOneTimePairingRequired((uint64_t)a1, a4);
      return 0;
    }
    if (CFEqual(a2, @"AirPlaySecurity"))
    {
      airPlayDescription_copyAirPlaySecurity((uint64_t)a1, a4);
      return 0;
    }
    if (CFEqual(a2, @"StatusFlags"))
    {
      CFTypeRef v11 = (const void *)APAdvertiserInfoCopyProperty();
      if (v11) {
        goto LABEL_8;
      }
      uint64_t Int64 = CFNumberCreateInt64();
      *a4 = Int64;
      if (Int64) {
        return v72;
      }
      goto LABEL_63;
    }
    if (CFEqual(a2, @"SubType"))
    {
      airPlayDescription_copyDeviceSubType(a1, a4);
      return 0;
    }
    if (CFEqual(a2, @"HIDs"))
    {
      unsigned int v72 = airPlayDescription_copyEndpointInfoValueCFArray((uint64_t)a1, @"hidDevices", a4);
      if (!v72) {
        return v72;
      }
LABEL_68:
      APSLogErrorAt();
      return v72;
    }
    if (CFEqual(a2, @"IgnoresVolumeChangesBeforeAudioSetup"))
    {
      BOOL isSourceVersionAtLeast = airPlayDescription_isSourceVersionAtLeast((uint64_t)a1, 0x24D2F4u);
      int v18 = (const void **)MEMORY[0x1E4F1CFD0];
      unint64_t v19 = (const void **)MEMORY[0x1E4F1CFC8];
      BOOL v20 = !isSourceVersionAtLeast;
      goto LABEL_71;
    }
    if (CFEqual(a2, @"IsAppleTV"))
    {
      unsigned int v21 = (uint64_t *)MEMORY[0x1E4F214A8];
LABEL_78:
      int isDeviceOfSubType = airPlayDescription_isDeviceOfSubType(a1, *v21);
LABEL_79:
      int v18 = (const void **)MEMORY[0x1E4F1CFD0];
      unsigned int v23 = (const void **)MEMORY[0x1E4F1CFC8];
LABEL_80:
      BOOL v24 = isDeviceOfSubType == 0;
      goto LABEL_81;
    }
    if (CFEqual(a2, @"IsAppleAudioAccessory"))
    {
      unsigned int v21 = (uint64_t *)MEMORY[0x1E4F214D0];
      goto LABEL_78;
    }
    if (CFEqual(a2, @"IsAppleReceiver"))
    {
      int isDeviceOfSubType = airPlayDescription_isAppleReceiver(a1);
      goto LABEL_79;
    }
    if (CFEqual(a2, @"IsAirPortExpress"))
    {
      CMBaseObjectGetDerivedStorage();
      int isDeviceOfSubType = airPlayDescription_modelHasPrefix(a1, @"AirPort");
      goto LABEL_79;
    }
    if (CFEqual(a2, @"IsLegacyAirPlaySpeaker"))
    {
      int isDeviceOfSubType = airPlayDescription_isLegacyAirPlaySpeaker(a1);
      goto LABEL_79;
    }
    if (CFEqual(a2, @"IsThirdPartyTVFamily"))
    {
      int isDeviceOfSubType = airPlayDescription_isThirdPartyTVFamily((uint64_t)a1);
      goto LABEL_79;
    }
    if (CFEqual(a2, @"HasUnifiedAdvertiserInfo"))
    {
      uint64_t v25 = (uint64_t)a1;
LABEL_94:
      int isDeviceOfSubType = airPlayDescription_hasFeatureInternal(v25);
      goto LABEL_79;
    }
    if (CFEqual(a2, @"RequiredSenderFeatures"))
    {
      CFTypeRef v11 = (const void *)APAdvertiserInfoCopyProperty();
      if (v11) {
        goto LABEL_8;
      }
      uint64_t v26 = CFNumberCreateInt64();
      *a4 = v26;
      if (v26) {
        return v72;
      }
LABEL_63:
      APSLogErrorAt();
      return -71750;
    }
    if (CFEqual(a2, @"CanBeRemoteControlled"))
    {
      int isDeviceOfSubType = airplayDescription_canBeRemoteControlled((uint64_t)a1);
      goto LABEL_79;
    }
    if (CFEqual(a2, @"SupportsSharePlayHandoff"))
    {
      if (!airPlayDescription_hasFeatureInternal((uint64_t)a1)) {
        goto LABEL_485;
      }
      uint64_t v27 = (uint64_t)a1;
      unsigned int v28 = 5950101;
      goto LABEL_104;
    }
    if (CFEqual(a2, @"SupportsOverlayUI"))
    {
      uint64_t v25 = (uint64_t)a1;
      goto LABEL_94;
    }
    if (CFEqual(a2, @"SilentPrimary"))
    {
      uint64_t v14 = (uint64_t)a1;
      int v15 = 4096;
      goto LABEL_49;
    }
    if (CFEqual(a2, @"SupportsBufferedAudio"))
    {
      CMBaseObjectGetDerivedStorage();
      if (airPlayDescription_hasFeatureInternal((uint64_t)a1)) {
        int v29 = *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 65);
      }
      else {
        int v29 = airPlayDescription_isSourceVersionAtLeast((uint64_t)a1, 0x36193Eu)
      }
           && airPlayDescription_hasFeatureInternal((uint64_t)a1) != 0;
      if (v29) {
        int v18 = (const void **)MEMORY[0x1E4F1CFD0];
      }
      else {
        int v18 = (const void **)MEMORY[0x1E4F1CFC8];
      }
      goto LABEL_83;
    }
    if (CFEqual(a2, @"SupportsReceiverChoosesAnchor"))
    {
      CMBaseObjectGetDerivedStorage();
      if (airPlayDescription_hasFeatureInternal((uint64_t)a1))
      {
        if (!*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 65)) {
          goto LABEL_485;
        }
      }
      else if (!airPlayDescription_hasFeatureInternal((uint64_t)a1))
      {
        goto LABEL_485;
      }
      char IntWithDefault = APSSettingsGetIntWithDefault();
      int v18 = (const void **)MEMORY[0x1E4F1CFC8];
      unint64_t v19 = (const void **)MEMORY[0x1E4F1CFD0];
      BOOL v20 = IntWithDefault == 0;
LABEL_71:
      if (!v20) {
        int v18 = v19;
      }
      goto LABEL_83;
    }
    if (CFEqual(a2, @"SupportsReceiverSideSoundCheck"))
    {
      int hasFeatureInternal = airPlayDescription_hasFeatureInternal((uint64_t)a1);
      CMBaseObjectGetDerivedStorage();
      if (airPlayDescription_hasFeatureInternal((uint64_t)a1)) {
        int hasFeatureInternal = airPlayDescription_isCarPlaySpatialAudioSupported();
      }
      int v18 = (const void **)MEMORY[0x1E4F1CFD0];
      unsigned int v23 = (const void **)MEMORY[0x1E4F1CFC8];
      BOOL v24 = hasFeatureInternal == 0;
      goto LABEL_81;
    }
    if (CFEqual(a2, @"SupportsSetMRInfoCommand"))
    {
      uint64_t v25 = (uint64_t)a1;
      goto LABEL_94;
    }
    if (CFEqual(a2, @"ReceiverSupportsSeekToTimeAsyncResponse"))
    {
      uint64_t v32 = (uint64_t)a1;
      unsigned int v33 = 6354200;
LABEL_387:
      int isDeviceOfSubType = airPlayDescription_isSourceVersionAtLeast(v32, v33);
      goto LABEL_79;
    }
    if (CFEqual(a2, @"SupportsLowLatencyAudio"))
    {
      uint64_t Mutable = APSFeaturesCreateMutable();
      if (Mutable)
      {
        CFBooleanRef v35 = (const __CFBoolean *)Mutable;
        APSFeaturesSetFeature();
        APSFeaturesSetFeature();
        APSFeaturesSetFeature();
        if (!airPlayDescription_hasFeaturesInternal((uint64_t)a1)
          || APSSettingsGetIntWithDefault())
        {
          goto LABEL_144;
        }
        goto LABEL_142;
      }
      goto LABEL_452;
    }
    if (CFEqual(a2, @"SupportsAudioMediaDataControl"))
    {
      uint64_t v36 = APSFeaturesCreateMutable();
      if (v36)
      {
        CFBooleanRef v35 = (const __CFBoolean *)v36;
        APSFeaturesSetFeature();
        APSFeaturesSetFeature();
        if (!airPlayDescription_hasFeaturesInternal((uint64_t)a1)
          || !airPlayDescription_isSourceVersionAtLeast((uint64_t)a1, 0x44AA84u))
        {
          goto LABEL_144;
        }
LABEL_142:
        if (!APSSettingsGetIntWithDefault() && !APSSettingsGetIntWithDefault())
        {
          uint64_t v37 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
          goto LABEL_454;
        }
LABEL_144:
        uint64_t v37 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
LABEL_454:
        *a4 = (uint64_t)CFRetain(*v37);
        CFBooleanRef v59 = v35;
        goto LABEL_455;
      }
LABEL_452:
      APSLogErrorAt();
      return -71750;
    }
    if (CFEqual(a2, @"IsLowFidelitySpeaker"))
    {
      uint64_t v25 = (uint64_t)a1;
      goto LABEL_94;
    }
    if (CFEqual(a2, @"SupportsAudioStreamConnectionSetup"))
    {
      if (airPlayDescription_hasFeatureInternal((uint64_t)a1)
        && !APSSettingsGetIntWithDefault())
      {
        goto LABEL_105;
      }
      goto LABEL_485;
    }
    if (CFEqual(a2, @"SupportsExtendedWHA"))
    {
      if (airPlayDescription_hasFeatureInternal((uint64_t)a1)) {
        BOOL v38 = 0;
      }
      else {
        BOOL v38 = CFPreferencesGetAppBooleanValue(@"forceAirPlay2NTP", @"com.apple.airplay", 0) == 0;
      }
      if (airPlayDescription_isSourceVersionAtLeast((uint64_t)a1, 0x37D8E0u)
        && airPlayDescription_hasFeatureInternal((uint64_t)a1)
        && !v38)
      {
        goto LABEL_105;
      }
      goto LABEL_485;
    }
    if (CFEqual(a2, @"PostsAdvertiserUpdatesOverEventChannel"))
    {
      if (!airPlayDescription_isAppleReceiver(a1)) {
        goto LABEL_485;
      }
      uint64_t v27 = (uint64_t)a1;
      unsigned int v28 = 3660000;
      goto LABEL_104;
    }
    if (CFEqual(a2, @"SupportsHangdogRemoteControl"))
    {
      if (airPlayDescription_isAppleReceiver(a1))
      {
        int Value = airPlayDescription_hasFeatureInternal((uint64_t)a1);
      }
      else
      {
        if (!airPlayDescription_isThirdPartyTVFamily((uint64_t)a1)) {
          goto LABEL_485;
        }
        CFBooleanRef BOOLean = 0;
        airplayDescription_copyStatusFlagsContainsFlag((uint64_t)a1, 1024, &BOOLean);
        CFBooleanRef v66 = BOOLean;
        if (BOOLean)
        {
          int Value = CFBooleanGetValue(BOOLean);
          CFRelease(v66);
        }
        else
        {
          int Value = 0;
        }
      }
      if (Value) {
        goto LABEL_105;
      }
LABEL_485:
      int v18 = (const void **)MEMORY[0x1E4F1CFC8];
      goto LABEL_83;
    }
    if (CFEqual(a2, @"SupportsDedicatedRemoteControlSocket"))
    {
      if (airPlayDescription_isSourceVersionAtLeast((uint64_t)a1, 0x44B63Eu) && airPlayDescription_isAppleReceiver(a1)) {
        goto LABEL_105;
      }
      goto LABEL_485;
    }
    if (CFEqual(a2, @"SupportsRapportRemoteControlTransport"))
    {
      uint64_t v25 = (uint64_t)a1;
      goto LABEL_94;
    }
    if (CFEqual(a2, @"SupportsRFC2198Redundancy"))
    {
      uint64_t v25 = (uint64_t)a1;
      goto LABEL_94;
    }
    if (CFEqual(a2, @"SupportsBufferedAPAP"))
    {
      CMBaseObjectGetDerivedStorage();
      if (airPlayDescription_hasFeatureInternal((uint64_t)a1))
      {
        int isDeviceOfSubType = airPlayDescription_isCarPlaySpatialAudioSupported();
        goto LABEL_79;
      }
      uint64_t v25 = (uint64_t)a1;
      goto LABEL_94;
    }
    if (CFEqual(a2, @"IsMediaRemoteControllable"))
    {
      if (!airPlayDescription_isDeviceOfSubType(a1, *MEMORY[0x1E4F214D0])
        && !airPlayDescription_isDeviceOfSubType(a1, *MEMORY[0x1E4F214A8]))
      {
        goto LABEL_485;
      }
      uint64_t v27 = (uint64_t)a1;
      unsigned int v28 = 3561800;
LABEL_104:
      if (airPlayDescription_isSourceVersionAtLeast(v27, v28))
      {
LABEL_105:
        int v18 = (const void **)MEMORY[0x1E4F1CFD0];
LABEL_83:
        CFTypeRef v11 = *v18;
        goto LABEL_7;
      }
      goto LABEL_485;
    }
    if (CFEqual(a2, @"SupportedAudioFormats"))
    {
      CMBaseObjectGetDerivedStorage();
      if (airPlayDescription_hasFeatureInternal((uint64_t)a1))
      {
        airPlayDescription_copyCarPlayAudioFormats((uint64_t)a1, a3, (CFMutableDictionaryRef *)a4);
        return v72;
      }
      return airPlayDescription_copyAirPlayAudioFormats((uint64_t)a1, a3, a4);
    }
    if (CFEqual(a2, @"SupportedAudioFormatsExtended"))
    {
      CMBaseObjectGetDerivedStorage();
      if (airPlayDescription_hasFeatureInternal((uint64_t)a1)) {
        return airPlayDescription_copyCarPlayAudioFormatsExtended((uint64_t)a1, a3, (__CFDictionary **)a4);
      }
      else {
        return airPlayDescription_copyAirPlayAudioFormatsExtended((uint64_t)a1, a4);
      }
    }
    if (CFEqual(a2, @"SupportsMuteCommand"))
    {
      uint64_t v32 = (uint64_t)a1;
      unsigned int v33 = 3703500;
      goto LABEL_387;
    }
    if (CFEqual(a2, @"SupoortsRFC2617DigestAuth"))
    {
      airPlayDescription_copySupportsRFC2617DigestAuth((uint64_t)a1, a4);
      return 0;
    }
    if (CFEqual(a2, @"SupportsCoreUtilsPairingAndEncryption"))
    {
      int isDeviceOfSubType = airPlayDescription_supportsCUPairingAndEncryption((uint64_t)a1);
      goto LABEL_79;
    }
    if (CFEqual(a2, @"SupportsAccountOwnerPairVerification"))
    {
      uint64_t v25 = (uint64_t)a1;
      goto LABEL_94;
    }
    if (CFEqual(a2, @"SupportsHKPairingAndAccessControl"))
    {
      uint64_t v25 = (uint64_t)a1;
      goto LABEL_94;
    }
    if (CFEqual(a2, @"SupportsLegacyPairing"))
    {
      uint64_t v25 = (uint64_t)a1;
      goto LABEL_94;
    }
    if (CFEqual(a2, @"SupportsSystemPairing"))
    {
LABEL_196:
      uint64_t v25 = (uint64_t)a1;
      goto LABEL_94;
    }
    if (CFEqual(a2, @"SupportsTransientPairing"))
    {
      if (airPlayDescription_hasFeatureInternal((uint64_t)a1)) {
        goto LABEL_105;
      }
      goto LABEL_196;
    }
    if (CFEqual(a2, @"SupportsKeepAlive"))
    {
      uint64_t v32 = (uint64_t)a1;
      unsigned int v33 = 1900900;
      goto LABEL_387;
    }
    if (CFEqual(a2, @"SupportsCBCSEncryption"))
    {
      if (airPlayDescription_isSourceVersionAtLeast((uint64_t)a1, 0x2DFF1Eu)) {
        goto LABEL_105;
      }
      CFStringRef v40 = (const __CFString *)APAdvertiserInfoCopyProperty();
      CFStringRef v41 = v40;
      if (v40)
      {
        CFIndex Length = CFStringGetLength(v40);
        CFRelease(v41);
        if (Length >= 1) {
          goto LABEL_105;
        }
      }
      goto LABEL_485;
    }
    if (CFEqual(a2, @"SupportsScreenIdle"))
    {
      uint64_t v32 = (uint64_t)a1;
      unsigned int v33 = 1503500;
      goto LABEL_387;
    }
    if (CFEqual(a2, @"SupportsScreenMultiCodec"))
    {
      uint64_t v25 = (uint64_t)a1;
      goto LABEL_94;
    }
    if (CFEqual(a2, @"SupportsUnifiedPairingAndMFi"))
    {
      uint64_t v25 = (uint64_t)a1;
      goto LABEL_94;
    }
    if (CFEqual(a2, @"SupportsWoL"))
    {
      if (!airPlayDescription_hasFeatureInternal((uint64_t)a1))
      {
        uint64_t v25 = (uint64_t)a1;
        goto LABEL_94;
      }
      goto LABEL_105;
    }
    if (CFEqual(a2, @"AdvertisesHAPSupport"))
    {
      uint64_t v25 = (uint64_t)a1;
      goto LABEL_94;
    }
    if (CFEqual(a2, @"DisplayDescriptionArray")) {
      return airPlayDescription_copyDisplayDescriptionArray((uint64_t)a1, a3, (__CFArray **)a4);
    }
    if (CFEqual(a2, @"CanRecordScreenStream"))
    {
      uint64_t v13 = @"canRecordScreenStream";
      goto LABEL_29;
    }
    if (CFEqual(a2, @"IsScreenDemoMode"))
    {
      uint64_t v14 = (uint64_t)a1;
      int v15 = 0x40000;
      goto LABEL_49;
    }
    if (CFEqual(a2, @"HasUDPMirroringSupport"))
    {
      uint64_t v13 = @"hasUDPMirroringSupport";
      goto LABEL_29;
    }
    if (CFEqual(a2, @"receiverHDRCapability"))
    {
      uint64_t v13 = @"receiverHDRCapability";
      goto LABEL_29;
    }
    if (CFEqual(a2, @"SupportHDRSubframe"))
    {
      CFBooleanRef BOOLean = 0;
      airPlayDescription_copyEndpointInfoValue((uint64_t)a1, @"hasUDPMirroringSupport", &BOOLean);
      unsigned int v72 = 0;
      BOOL v43 = airPlayDescription_isSourceVersionAtLeast((uint64_t)a1, 0x7A1264u);
      CFBooleanRef v44 = BOOLean;
      if (BOOLean != (CFBooleanRef)*MEMORY[0x1E4F1CFD0] || !v43) {
        CFTypeRef v46 = (const void *)*MEMORY[0x1E4F1CFC8];
      }
      else {
        CFTypeRef v46 = (const void *)*MEMORY[0x1E4F1CFD0];
      }
LABEL_367:
      *a4 = (uint64_t)CFRetain(v46);
      if (!v44) {
        return v72;
      }
      CFBooleanRef v59 = v44;
LABEL_455:
      CFRelease(v59);
      return v72;
    }
    if (CFEqual(a2, @"VodkaVersion"))
    {
      CFTypeRef v11 = (const void *)APAdvertiserInfoCopyProperty();
      if (v11) {
        goto LABEL_8;
      }
      uint64_t v47 = CFNumberCreateInt64();
      *a4 = v47;
      if (v47) {
        return v72;
      }
      goto LABEL_452;
    }
    if (CFEqual(a2, @"SupportsAirPlayFromCloud"))
    {
      airplayDescription_copySupportsAirPlayFromCloud((uint64_t)a1, a4);
      return 0;
    }
    if (CFEqual(a2, @"DoesNotRequireVodkaForHLS"))
    {
      uint64_t v32 = (uint64_t)a1;
      unsigned int v33 = 4500100;
      goto LABEL_387;
    }
    if (CFEqual(a2, @"SupportsAirPlayVideoPlayQueue"))
    {
      uint64_t v25 = (uint64_t)a1;
      goto LABEL_94;
    }
    if (CFEqual(a2, @"SupportsAirPlayVideoV2"))
    {
LABEL_331:
      uint64_t v25 = (uint64_t)a1;
      goto LABEL_94;
    }
    if (CFEqual(a2, @"SupportsAirPlayVideoPausedStart"))
    {
      uint64_t v32 = (uint64_t)a1;
      unsigned int v33 = 2206800;
      goto LABEL_387;
    }
    if (CFEqual(a2, @"AccessControlType"))
    {
      airPlayDescription_getAccessControlType();
      uint64_t v48 = CFNumberCreateInt64();
      *a4 = v48;
      if (v48) {
        return v72;
      }
      goto LABEL_452;
    }
    if (CFEqual(a2, @"GroupPublicName"))
    {
      CFBooleanRef BOOLean = 0;
      airPlayDescription_copyClusterInfoInternal(a1, 0, 0, 0, 0, 0, 0, &BOOLean, 0, 0);
      CFTypeRef v11 = BOOLean;
      if (BOOLean) {
        goto LABEL_8;
      }
      goto LABEL_14;
    }
    if (CFEqual(a2, @"GroupID")) {
      goto LABEL_14;
    }
    if (CFEqual(a2, @"GroupContainsDiscoverableLeader") || CFEqual(a2, @"IsGroupLeader"))
    {
      CFTypeRef v11 = (const void *)APAdvertiserInfoCopyProperty();
      if (v11) {
        goto LABEL_8;
      }
      goto LABEL_485;
    }
    if (CFEqual(a2, @"ClusterSize"))
    {
      long long v69 = 0;
      long long v70 = 0;
      int v49 = a1;
      char v50 = 0;
      CFTypeRef v51 = a4;
LABEL_273:
      uint64_t v52 = 0;
      goto LABEL_274;
    }
    if (CFEqual(a2, @"ClusterType"))
    {
      long long v69 = 0;
      long long v70 = 0;
      int v49 = a1;
      char v50 = 0;
      CFTypeRef v51 = 0;
      uint64_t v52 = a4;
LABEL_274:
      airPlayDescription_copyClusterInfoInternal(v49, v50, v51, v52, 0, 0, 0, 0, v69, v70);
      return v72;
    }
    if (CFEqual(a2, @"ClusterUUID"))
    {
      long long v69 = 0;
      long long v70 = 0;
      int v49 = a1;
      char v50 = a4;
LABEL_272:
      CFTypeRef v51 = 0;
      goto LABEL_273;
    }
    if (CFEqual(a2, @"IsClusterLeader"))
    {
      CFBooleanRef BOOLean = 0;
      airPlayDescription_copyClusterInfoInternal(a1, 0, 0, 0, 0, (CFTypeRef *)&BOOLean, 0, 0, 0, 0);
      CFTypeRef v11 = BOOLean;
      if (BOOLean) {
        goto LABEL_8;
      }
      goto LABEL_485;
    }
    if (CFEqual(a2, @"ClusterModel"))
    {
      airPlayDescription_copyClusterInfoInternal(a1, 0, 0, 0, 0, 0, a4, 0, 0, 0);
      return v72;
    }
    if (CFEqual(a2, @"RoomUUID"))
    {
      long long v69 = a4;
      long long v70 = 0;
LABEL_271:
      int v49 = a1;
      char v50 = 0;
      goto LABEL_272;
    }
    if (CFEqual(a2, @"RoomName"))
    {
      long long v69 = 0;
      long long v70 = a4;
      goto LABEL_271;
    }
    if (CFEqual(a2, @"ParentGroupID"))
    {
LABEL_14:
      CFTypeRef v11 = (const void *)APAdvertiserInfoCopyProperty();
      goto LABEL_8;
    }
    if (CFEqual(a2, @"ParentGroupContainsDiscoverableLeader"))
    {
      uint64_t PropertyInt64Sync = CFObjectGetPropertyInt64Sync();
      int v18 = (const void **)MEMORY[0x1E4F1CFD0];
      unsigned int v23 = (const void **)MEMORY[0x1E4F1CFC8];
      BOOL v24 = PropertyInt64Sync == 0;
LABEL_81:
      if (v24) {
        int v18 = v23;
      }
      goto LABEL_83;
    }
    if (CFEqual(a2, @"ReceiverSessionIsActive"))
    {
      uint64_t v14 = (uint64_t)a1;
      int v15 = 0x20000;
      goto LABEL_49;
    }
    if (CFEqual(a2, @"TightSyncUUID"))
    {
      if (DerivedStorage[1] && !APTransportDeviceIsModernPresentOnInfra())
      {
        CFTypeRef v11 = 0;
        goto LABEL_8;
      }
      goto LABEL_14;
    }
    if (CFEqual(a2, @"TightSyncIsGroupLeader"))
    {
      uint64_t v14 = (uint64_t)a1;
      int v15 = 0x2000;
      goto LABEL_49;
    }
    if (CFEqual(a2, @"TightSyncClusterInfo")) {
      return airPlayDescription_copyTightSyncClusterInfo((uint64_t)a1, (CFMutableDictionaryRef *)a4);
    }
    if (CFEqual(a2, @"IsAppleMusicSubscriber"))
    {
      uint64_t v14 = (uint64_t)a1;
      int v15 = 0x8000;
      goto LABEL_49;
    }
    if (CFEqual(a2, @"CloudLibraryIsOn"))
    {
      uint64_t v14 = (uint64_t)a1;
      int v15 = 0x10000;
      goto LABEL_49;
    }
    if (CFEqual(a2, @"HKAccessControlLevel")) {
      return airPlayDescription_copyHKAccessControlLevel((uint64_t)a1, a4);
    }
    if (CFEqual(a2, @"DeviceWasSetupForHKAccessControl"))
    {
      uint64_t v14 = (uint64_t)a1;
      int v15 = 1024;
      goto LABEL_49;
    }
    if (CFEqual(a2, @"IsHKAccessControlEnabled"))
    {
      airPlayDescription_copyIsHKAccessControlEnabled((uint64_t)a1, a4);
      return 0;
    }
    if (CFEqual(a2, @"DeviceSupportsRelay"))
    {
      airPlayDescription_copyDeviceSupportsRelay((uint64_t)a1, a4);
      return 0;
    }
    if (CFEqual(a2, @"SupportsAWDL"))
    {
      airplayDescription_copySupportsAWDL((uint64_t)a1, a4);
      return 0;
    }
    if (CFEqual(a2, @"SupportsNAN"))
    {
      airplayDescription_copySupportsNAN((uint64_t)a1, a4);
      return 0;
    }
    if (CFEqual(a2, @"SupportsSetPeersExtendedMessage"))
    {
      uint64_t v25 = (uint64_t)a1;
      goto LABEL_94;
    }
    if (CFEqual(a2, @"SupportsPTP"))
    {
      airplayDescription_copySupportsPTP((uint64_t)a1, a4);
      return 0;
    }
    if (CFEqual(a2, @"SupportsUnifiedMediaControl"))
    {
      airPlayDescription_copySupportsUnifiedMediaControl((uint64_t)a1, a4);
      return 0;
    }
    if (CFEqual(a2, @"SupportsStatsAsBody"))
    {
      CFBooleanRef BOOLean = 0;
      if (airPlayDescription_hasFeatureInternal((uint64_t)a1))
      {
        airPlayDescription_copyEndpointInfoValue((uint64_t)a1, @"keepAliveSendStatsAsBody", &BOOLean);
        CFTypeRef v11 = BOOLean;
        if (BOOLean) {
          goto LABEL_8;
        }
      }
      uint64_t v32 = (uint64_t)a1;
      unsigned int v33 = 2109800;
      goto LABEL_387;
    }
    if (CFEqual(a2, @"IsCarPlay"))
    {
      uint64_t v25 = (uint64_t)a1;
      goto LABEL_94;
    }
    if (CFEqual(a2, @"AssistedModeType"))
    {
      airplayDescription_getAssistedModeType();
      CFTypeRef v11 = (const void *)CFNumberCreateInt64();
      if (v11) {
        goto LABEL_8;
      }
      goto LABEL_452;
    }
    if (CFEqual(a2, @"IsConnectedOverUSB"))
    {
      airPlayDescription_copyIsConnectedOverUSB((uint64_t)a1, a4);
      return 0;
    }
    if (CFEqual(a2, @"MetadataFeatures"))
    {
      airPlayDescription_copyMetadataFeatures(a1, a3, (CFNumberRef *)a4);
      return 0;
    }
    if (CFEqual(a2, @"SupportsAirPlaySlideshow"))
    {
      uint64_t v25 = (uint64_t)a1;
      goto LABEL_94;
    }
    if (CFEqual(a2, @"SupportsAirPlayScreen"))
    {
      uint64_t v25 = (uint64_t)a1;
      goto LABEL_94;
    }
    if (CFEqual(a2, @"SupportsAirPlayPhoto"))
    {
      uint64_t v25 = (uint64_t)a1;
      goto LABEL_94;
    }
    if (CFEqual(a2, @"SupportsAirPlayVideo"))
    {
      if (airPlayDescription_hasFeatureInternal((uint64_t)a1)) {
        goto LABEL_105;
      }
      goto LABEL_331;
    }
    if (CFEqual(a2, @"SupportsInitialVolume"))
    {
      if (airPlayDescription_hasFeatureInternal((uint64_t)a1)) {
        goto LABEL_485;
      }
      uint64_t v27 = (uint64_t)a1;
      unsigned int v28 = 1200200;
      goto LABEL_104;
    }
    if (CFEqual(a2, @"SupportsVolume"))
    {
      int isDeviceOfSubType = airPlayDescription_hasFeatureInternal((uint64_t)a1);
LABEL_380:
      int v18 = (const void **)MEMORY[0x1E4F1CFC8];
      unsigned int v23 = (const void **)MEMORY[0x1E4F1CFD0];
      goto LABEL_80;
    }
    if (CFEqual(a2, @"SupportsMultiplayer"))
    {
      uint64_t v14 = (uint64_t)a1;
      int v15 = 0x80000;
      goto LABEL_49;
    }
    if (CFEqual(a2, @"BluetoothDeviceIDs"))
    {
      unsigned int v72 = airPlayDescription_copyEndpointInfoValueCFArray((uint64_t)a1, @"bluetoothIDs", a4);
      if (v72) {
        goto LABEL_68;
      }
      if (*a4) {
        return v72;
      }
      goto LABEL_345;
    }
    if (CFEqual(a2, @"CarPlayAudioFormats"))
    {
      CFTypeRef v11 = (const void *)DerivedStorage[7];
      if (v11) {
        goto LABEL_7;
      }
LABEL_345:
      APSLogErrorAt();
      return -12784;
    }
    if (CFEqual(a2, @"HasCarPlayAudioFormats"))
    {
      int v18 = (const void **)MEMORY[0x1E4F1CFD0];
      long long v54 = (const void **)MEMORY[0x1E4F1CFC8];
      BOOL v55 = DerivedStorage[7] == 0;
      goto LABEL_396;
    }
    if (CFEqual(a2, @"InitialMode"))
    {
      uint64_t v56 = @"modes";
      return airPlayDescription_copyEndpointInfoValueCFDictionary((uint64_t)a1, v56, a4);
    }
    if (CFEqual(a2, @"VehicleInformation"))
    {
      CFBooleanRef BOOLean = 0;
      unsigned int v72 = airPlayDescription_copyEndpointInfoValueCFDictionary((uint64_t)a1, @"vehicleInformation", &BOOLean);
      if (v72) {
        goto LABEL_68;
      }
      if (BOOLean)
      {
        *a4 = (uint64_t)BOOLean;
        return v72;
      }
      return -12784;
    }
    if (CFEqual(a2, @"IsLimitedUI"))
    {
      int v57 = @"limitedUI";
LABEL_362:
      airPlayDescription_copyEndpointInfoValueCFBoolean((uint64_t)a1, v57, (CFTypeRef *)a4);
      return 0;
    }
    if (CFEqual(a2, @"LimitedUIElements"))
    {
      CFBooleanRef BOOLean = 0;
      airPlayDescription_copyEndpointInfoValueCFArray((uint64_t)a1, @"limitedUIElements", &BOOLean);
      CFTypeRef v11 = BOOLean;
      if (BOOLean) {
        goto LABEL_8;
      }
      CFTypeRef v11 = CFArrayCreate(a3, 0, 0, MEMORY[0x1E4F1D510]);
      if (v11) {
        goto LABEL_8;
      }
      goto LABEL_427;
    }
    if (CFEqual(a2, @"IsNightMode"))
    {
      int v57 = @"nightMode";
      goto LABEL_362;
    }
    if (CFEqual(a2, @"IsNightModeSupported"))
    {
      CFBooleanRef BOOLean = 0;
      airPlayDescription_copyEndpointInfoValueCFBoolean((uint64_t)a1, @"nightMode", (CFTypeRef *)&BOOLean);
      CFDictionaryRef v58 = (const void **)MEMORY[0x1E4F1CFD0];
      CFBooleanRef v44 = BOOLean;
      if (!BOOLean) {
        CFDictionaryRef v58 = (const void **)MEMORY[0x1E4F1CFC8];
      }
      CFTypeRef v46 = *v58;
      goto LABEL_367;
    }
    if (CFEqual(a2, @"IsOEMIconVisible"))
    {
      CFBooleanRef BOOLean = 0;
      airPlayDescription_copyEndpointInfoValueCFBoolean((uint64_t)a1, @"oemIconVisible", (CFTypeRef *)&BOOLean);
      CFTypeRef v11 = BOOLean;
      if (BOOLean) {
        goto LABEL_8;
      }
      goto LABEL_105;
    }
    if (CFEqual(a2, @"IsRightHandDrive"))
    {
      uint64_t v13 = @"rightHandDrive";
      goto LABEL_29;
    }
    if (CFEqual(a2, @"OEMIconLabel")) {
      return airPlayDescription_copyEndpointInfoValueCFString((uint64_t)a1, @"oemIconLabel", a4);
    }
    if (CFEqual(a2, @"OEMIcons")) {
      return airPlayDescription_copyOEMIcons((uint64_t)a1, a3, a4);
    }
    if (CFEqual(a2, @"UseLegacyStarkModeActions"))
    {
      int isDeviceOfSubType = airPlayDescription_isSourceVersionAtLeast((uint64_t)a1, 0x24D2F4u);
      goto LABEL_380;
    }
    if (CFEqual(a2, @"UseIndirectStarkSpeechModeTransitions"))
    {
      if (!APSSettingsGetInt64())
      {
        CFBooleanRef BOOLean = 0;
        long long v67 = (const void *)*MEMORY[0x1E4F1CFC8];
        unsigned int v72 = airPlayDescription_copyManufacturer(a1, (uint64_t *)&BOOLean);
        CFBooleanRef v68 = BOOLean;
        if (!v72 && FigCFEqual())
        {
          if (v68) {
            CFRelease(v68);
          }
          airPlayDescription_copyModel((uint64_t)a1, (uint64_t *)&BOOLean);
          unsigned int v72 = 0;
          CFBooleanRef v68 = BOOLean;
          if (FigCFEqual()) {
            long long v67 = (const void *)*MEMORY[0x1E4F1CFD0];
          }
        }
        if (v68) {
          CFRelease(v68);
        }
        CFTypeRef v11 = v67;
        goto LABEL_7;
      }
      CFDictionaryRef v60 = (const __CFDictionary *)DerivedStorage[9];
      if (v60)
      {
        int isDeviceOfSubType = CFDictionaryContainsKey(v60, @"kAPCarPlay_UseIndirectStarkSpeechModeTransitions");
        goto LABEL_79;
      }
      APSLogErrorAt();
      goto LABEL_485;
    }
    if (CFEqual(a2, @"AllowCarPlaySpeechStateForMediaAudioType"))
    {
      uint64_t v32 = (uint64_t)a1;
      unsigned int v33 = 3500000;
      goto LABEL_387;
    }
    if (CFEqual(a2, @"ExtendedFeatures"))
    {
      CFBooleanRef BOOLean = 0;
      airPlayDescription_copyEndpointInfoValueCFArray((uint64_t)a1, @"extendedFeatures", &BOOLean);
      CFTypeRef v11 = BOOLean;
      if (BOOLean) {
        goto LABEL_8;
      }
      CFTypeRef v11 = CFArrayCreate(a3, 0, 0, MEMORY[0x1E4F1D510]);
      if (v11) {
        goto LABEL_8;
      }
      goto LABEL_427;
    }
    if (CFEqual(a2, @"SupportsVocoderInfo"))
    {
      int isDeviceOfSubType = airPlayDescription_extendedFeaturesHasKey((uint64_t)a1, @"vocoderInfo");
      goto LABEL_79;
    }
    if (CFEqual(a2, @"SupportsJarvis"))
    {
      uint64_t v61 = CMBaseObjectGetDerivedStorage();
      int v18 = (const void **)MEMORY[0x1E4F1CFD0];
      long long v54 = (const void **)MEMORY[0x1E4F1CFC8];
      BOOL v55 = *(unsigned char *)(v61 + 64) == 0;
LABEL_396:
      if (v55) {
        int v18 = v54;
      }
      goto LABEL_83;
    }
    if (CFEqual(a2, @"SupportsJarvisVoice"))
    {
      int isDeviceOfSubType = airPlayDescription_isJarvisFeatureSupported((uint64_t)a1, @"enhancedSiriVoice");
      goto LABEL_79;
    }
    if (CFEqual(a2, @"SupportsMixableSiriAudio"))
    {
      if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 64)
        && !airPlayDescription_isJarvisFeatureSupported((uint64_t)a1, @"enhancedSiriNotMixable"))
      {
        goto LABEL_105;
      }
      goto LABEL_485;
    }
    if (CFEqual(a2, @"ExternalPlaybackCapabilities"))
    {
      uint64_t v56 = @"playbackCapabilities";
      return airPlayDescription_copyEndpointInfoValueCFDictionary((uint64_t)a1, v56, a4);
    }
    if (CFEqual(a2, @"HeadUnitRestrictions"))
    {
      CFTypeRef v11 = (const void *)DerivedStorage[9];
      if (!v11) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    if (CFEqual(a2, @"TXTRecordAirPlay")) {
      return APAdvertiserInfoCopyAirPlayData();
    }
    if (CFEqual(a2, @"TXTRecordAirPlayClusterCompatible"))
    {
      CFBooleanRef BOOLean = 0;
      airPlayDescription_copyClusterInfoInternal(a1, 0, 0, &BOOLean, 0, 0, 0, 0, 0, 0);
      if (!BOOLean) {
        return v72;
      }
      CFGetInt64();
      unsigned int v72 = APAdvertiserInfoCopyClusterCompatibleAirPlayData();
      CFBooleanRef v59 = BOOLean;
      goto LABEL_455;
    }
    if (CFEqual(a2, @"EndpointInfo"))
    {
      CFTypeRef v11 = (const void *)DerivedStorage[3];
      if (!v11) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    if (CFEqual(a2, @"VoiceModelLanguages"))
    {
      long long v62 = @"voiceModelSupportedLanguages";
    }
    else
    {
      if (!CFEqual(a2, @"CurrentVoiceModelLanguage"))
      {
        if (!CFEqual(a2, @"AltScreenSuggestUIURLs"))
        {
          if (CFEqual(a2, @"AirPlayEndpointProperties"))
          {
            uint64_t v63 = (uint64_t)a1;
            int v64 = 0;
          }
          else
          {
            if (!CFEqual(a2, @"AirPlayClusterCompatibleEndpointProperties"))
            {
              if (CFEqual(a2, @"SupportsBufferedPKDDecryption"))
              {
                uint64_t v25 = (uint64_t)a1;
                goto LABEL_94;
              }
              if (CFEqual(a2, @"Descriptor")) {
                return airPlayDescription_copyMXDescriptor((uint64_t)a1, (__CFDictionary **)a4);
              }
              if (CFEqual(a2, @"SupportsMixedSampleRates"))
              {
                uint64_t v25 = (uint64_t)a1;
                goto LABEL_94;
              }
              if (CFEqual(a2, @"WASCalibrationSupportsMATAtmos"))
              {
                uint64_t v25 = (uint64_t)a1;
                goto LABEL_94;
              }
              if (CFEqual(a2, @"SupportsSenderUIEventsChannel"))
              {
                uint64_t v13 = @"supportsSenderUIEvents";
                goto LABEL_29;
              }
              if (CFEqual(a2, @"SupportsDCXForSpatialAudio"))
              {
                CMBaseObjectGetDerivedStorage();
                if (airPlayDescription_hasFeatureInternal((uint64_t)a1)
                  && airPlayDescription_isDCXSupportedForSpatialAudio((uint64_t)a1))
                {
                  goto LABEL_105;
                }
                goto LABEL_485;
              }
              if (gLogCategory_APEndpointDescriptionAirPlay <= 30
                && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
              return -12784;
            }
            uint64_t v63 = (uint64_t)a1;
            int v64 = 1;
          }
          airPlayDescription_copyAirPlayEndpointProperties(v63, v64, (__CFDictionary **)a4);
          return 0;
        }
        CFBooleanRef BOOLean = 0;
        airPlayDescription_copyEndpointInfoValueCFArray((uint64_t)a1, @"altScreenSuggestUIURLs", &BOOLean);
        CFTypeRef v11 = BOOLean;
        if (BOOLean) {
          goto LABEL_8;
        }
        CFTypeRef v11 = CFArrayCreate(a3, 0, 0, MEMORY[0x1E4F1D510]);
        if (v11) {
          goto LABEL_8;
        }
LABEL_427:
        APSLogErrorAt();
        return -16761;
      }
      long long v62 = @"voiceModelCurrentLanguage";
    }
    return airPlayDescription_copyEndpointInfoNestedCFData((uint64_t)a1, @"enhancedSiriInfo", v62, (CFTypeRef *)a4);
  }
  return airPlayDescription_copyDeviceID((uint64_t)a1, a4);
}

uint64_t airPlayDescription_copyDeviceID(uint64_t a1, uint64_t *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_OWORD *)cStr = 0u;
  long long v7 = 0u;
  uint64_t v4 = APAdvertiserInfoCopyProperty();
  if (v4
    || (uint64_t v4 = *(void *)(DerivedStorage + 8)) == 0
    || (APTransportDeviceGetDiscoveryID(),
        CFGetInt64(),
        SNPrintF(),
        (uint64_t v4 = (uint64_t)CFStringCreateWithCString(0, cStr, 0x8000100u)) != 0))
  {
    *a2 = v4;
  }
  else
  {
    APSLogErrorAt();
  }
  return 0;
}

uint64_t airPlayDescription_copyOSBuildVersion(uint64_t a1, void *a2)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v5 = 0;
  airPlayDescription_copyEndpointInfoValueCFString(a1, @"osBuildVersion", &v5);
  if (!v5) {
    return 4294954512;
  }
  uint64_t result = 0;
  *a2 = v5;
  return result;
}

uint64_t airPlayDescription_copySourceVersion(uint64_t a1, uint64_t *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  CMBaseObjectGetDerivedStorage();
  memset(v8, 0, sizeof(v8));
  CFStringRef v3 = (const __CFString *)APAdvertiserInfoCopyProperty();
  CFStringRef v4 = v3;
  if (v3)
  {
    if (!CFStringGetCString(v3, (char *)v8, 256, 0x8000100u))
    {
      APSLogErrorAt();
      uint64_t v6 = 4294960534;
      goto LABEL_6;
    }
    TextToSourceVersion();
  }
  uint64_t Int64 = CFNumberCreateInt64();
  if (!Int64)
  {
    APSLogErrorAt();
    uint64_t v6 = 4294960534;
    if (!v4) {
      return v6;
    }
    goto LABEL_6;
  }
  uint64_t v6 = 0;
  *a2 = Int64;
  if (v4) {
LABEL_6:
  }
    CFRelease(v4);
  return v6;
}

uint64_t airPlayDescription_copyModel(uint64_t a1, uint64_t *a2)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v5 = 0;
  airPlayDescription_copyEndpointInfoValueCFString(a1, @"model", &v5);
  uint64_t result = v5;
  if (!v5)
  {
    uint64_t result = APAdvertiserInfoCopyProperty();
    if (!result) {
      uint64_t result = (uint64_t)CFRetain(@"AirPort4,102");
    }
  }
  *a2 = result;
  return result;
}

uint64_t airPlayDescription_copyManufacturer(const void *a1, uint64_t *a2)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v7 = 0;
  airPlayDescription_copyEndpointInfoValueCFString((uint64_t)a1, @"manufacturer", &v7);
  uint64_t v4 = v7;
  if (!v7)
  {
    uint64_t v4 = APAdvertiserInfoCopyProperty();
    if (!v4)
    {
      if (!airPlayDescription_isAppleReceiver(a1)) {
        return 4294954512;
      }
      uint64_t v4 = (uint64_t)CFRetain(@"Apple");
      if (!v4) {
        return 4294954512;
      }
    }
  }
  uint64_t v5 = 0;
  *a2 = v4;
  return v5;
}

uint64_t airPlayDescription_copyCompany(const void *a1, uint64_t *a2)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v7 = 0;
  airPlayDescription_copyEndpointInfoValueCFString((uint64_t)a1, @"company", &v7);
  uint64_t v4 = v7;
  if (!v7)
  {
    uint64_t v4 = APAdvertiserInfoCopyProperty();
    if (!v4)
    {
      if (!airPlayDescription_isAppleReceiver(a1)) {
        return 4294954512;
      }
      uint64_t v4 = (uint64_t)CFRetain(@"Apple");
      if (!v4) {
        return 4294954512;
      }
    }
  }
  uint64_t v5 = 0;
  *a2 = v4;
  return v5;
}

CFDictionaryRef airPlayDescription_copyEndpointInfoValue(uint64_t a1, const void *a2, const __CFDictionary **a3)
{
  CFDictionaryRef result = *(const __CFDictionary **)(CMBaseObjectGetDerivedStorage() + 24);
  if (result)
  {
    CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, a2);
    if (result) {
      CFDictionaryRef result = (const __CFDictionary *)CFRetain(result);
    }
  }
  *a3 = result;
  return result;
}

uint64_t airPlayDescription_copyVolumeControlTypeEx(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  CMBaseObjectGetDerivedStorage();
  CFTypeRef v11 = 0;
  uint64_t v5 = airPlayDescription_copyFeaturesInternal(a1, (uint64_t *)&v11);
  if (v5)
  {
    uint64_t v9 = v5;
    APSLogErrorAt();
    uint64_t v6 = v11;
    goto LABEL_14;
  }
  uint64_t v6 = v11;
  if (APSFeaturesHasFeature()
    || (!APSFeaturesHasFeature() ? (int v7 = APSFeaturesHasFeature() != 0) : (int v7 = 2),
        APSFeaturesHasFeature() || v7))
  {
    if (gLogCategory_APEndpointDescriptionAirPlay > 30
      || gLogCategory_APEndpointDescriptionAirPlay == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_12;
    }
  }
  else
  {
    FigCFDictionaryGetValue();
    FigCFNumberGetSInt32();
    APSVolumeControlTypeToEx();
    if (gLogCategory_APEndpointDescriptionAirPlay > 30
      || gLogCategory_APEndpointDescriptionAirPlay == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_12;
    }
  }
  LogPrintF();
LABEL_12:
  uint64_t SInt32 = FigCFNumberCreateSInt32();
  *a3 = SInt32;
  if (SInt32)
  {
    uint64_t v9 = 0;
  }
  else
  {
    APSLogErrorAt();
    uint64_t v9 = 4294960568;
  }
LABEL_14:
  if (v6) {
    CFRelease(v6);
  }
  return v9;
}

uint64_t airPlayDescription_copyMuteControlType(const void *a1, uint64_t a2, CFTypeRef *a3)
{
  CFTypeRef cf = 0;
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 112))
  {
    airPlayDescription_copyEndpointInfoValue((uint64_t)a1, @"muteControlType", (const __CFDictionary **)&cf);
    Suint64_t Int64 = cf;
    if (cf)
    {
      CFTypeID v6 = CFGetTypeID(cf);
      if (v6 == CFNumberGetTypeID())
      {
        if (gLogCategory_APEndpointDescriptionAirPlay <= 30
          && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
        {
          FigCFNumberGetSInt64();
          APSGetAPMuteControlTypeName();
          LogPrintF();
        }
LABEL_14:
        *a3 = CFRetain(SInt64);
        CFRelease(SInt64);
        return 0;
      }
    }
  }
  if (!airPlayDescription_isThirdPartyTVFamily((uint64_t)a1)) {
    airPlayDescription_isAppleReceiver(a1);
  }
  if (gLogCategory_APEndpointDescriptionAirPlay <= 30
    && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
  {
    APSGetAPMuteControlTypeName();
    LogPrintF();
  }
  Suint64_t Int64 = (const void *)FigCFNumberCreateSInt64();
  if (SInt64) {
    goto LABEL_14;
  }
  APSLogErrorAt();
  return 4294960568;
}

uint64_t airPlayDescription_copyMACAddress(uint64_t a1, const __CFAllocator *a2, CFDataRef *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  CMBaseObjectGetDerivedStorage();
  CFStringRef theString = 0;
  uint64_t v6 = airPlayDescription_copyDeviceID(a1, (uint64_t *)&theString);
  if (v6)
  {
    uint64_t v10 = v6;
    APSLogErrorAt();
    CFStringRef v7 = theString;
    if (!theString) {
      return v10;
    }
    goto LABEL_7;
  }
  CFStringRef v7 = theString;
  if (!theString)
  {
    uint64_t v10 = 4294895543;
    APSLogErrorAt();
    return v10;
  }
  if (CFStringGetCString(theString, buffer, 64, 0x8000100u))
  {
    uint64_t v8 = TextToHardwareAddress();
    if (!v8)
    {
      CFDataRef v9 = CFDataCreate(a2, bytes, 6);
      if (v9)
      {
        uint64_t v10 = 0;
        *a3 = v9;
      }
      else
      {
        APSLogErrorAt();
        uint64_t v10 = 4294895546;
      }
      goto LABEL_7;
    }
    uint64_t v10 = v8;
  }
  else
  {
    uint64_t v10 = 4294895543;
  }
  APSLogErrorAt();
LABEL_7:
  CFRelease(v7);
  return v10;
}

uint64_t airPlayDescription_copyAudioLatencyForAV(const __CFAllocator *a1, CFNumberRef *a2)
{
  int valuePtr = APSAudioLatencyForAVMs();
  CFNumberRef v4 = CFNumberCreate(a1, kCFNumberSInt32Type, &valuePtr);
  *a2 = v4;
  if (v4) {
    return 0;
  }
  APSLogErrorAt();
  return 4294895546;
}

uint64_t airPlayDescription_copyAudioLatencyOffsetForAV(const __CFAllocator *a1, CFNumberRef *a2)
{
  int valuePtr = APSAudioLatencyOffsetForAVMs();
  CFNumberRef v4 = CFNumberCreate(a1, kCFNumberSInt32Type, &valuePtr);
  *a2 = v4;
  if (v4) {
    return 0;
  }
  APSLogErrorAt();
  return 4294895546;
}

uint64_t airPlayDescription_copyAuthenticationType(uint64_t a1, uint64_t *a2)
{
  CMBaseObjectGetDerivedStorage();
  if (airPlayDescription_hasFeatureInternal(a1)
    || airPlayDescription_hasFeatureInternal(a1)
    || airPlayDescription_hasFeatureInternal(a1)
    || airPlayDescription_hasFeatureInternal(a1)
    || airPlayDescription_hasFeatureInternal(a1)
    || airPlayDescription_hasFeatureInternal(a1))
  {
    uint64_t v4 = 0;
    *a2 = CFNumberCreateInt64();
  }
  else
  {
    uint64_t v4 = 4294895542;
    if (gLogCategory_APEndpointDescriptionAirPlay <= 50
      && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  return v4;
}

CFTypeRef airPlayDescription_copyPasswordRequired(uint64_t a1, void *a2)
{
  CMBaseObjectGetDerivedStorage();
  if (CFObjectGetPropertyInt64Sync())
  {
    CFStringRef v3 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
  }
  else
  {
    char PropertyInt64Sync = CFObjectGetPropertyInt64Sync();
    CFStringRef v3 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    if ((PropertyInt64Sync & 0x80) == 0) {
      CFStringRef v3 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
    }
  }
  CFTypeRef result = CFRetain(*v3);
  *a2 = result;
  return result;
}

CFTypeRef airplayDescription_copyStatusFlagsContainsFlag(uint64_t a1, int a2, void *a3)
{
  CMBaseObjectGetDerivedStorage();
  int PropertyInt64Sync = CFObjectGetPropertyInt64Sync();
  uint64_t v6 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
  if ((a2 & ~PropertyInt64Sync) != 0) {
    uint64_t v6 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
  }
  CFTypeRef result = CFRetain(*v6);
  *a3 = result;
  return result;
}

uint64_t airPlayDescription_copyPairingPeerCUAirPlayIdentifier(uint64_t a1, uint64_t *a2)
{
  CFStringRef v3 = *(const void **)(CMBaseObjectGetDerivedStorage() + 32);
  if (v3) {
    uint64_t result = (uint64_t)CFRetain(v3);
  }
  else {
    uint64_t result = APAdvertiserInfoCopyProperty();
  }
  *a2 = result;
  return result;
}

uint64_t airPlayDescription_copyPairingPeerCUSystemIdentifier(uint64_t a1, uint64_t *a2)
{
  CFStringRef v3 = *(const void **)(CMBaseObjectGetDerivedStorage() + 40);
  if (v3) {
    uint64_t result = (uint64_t)CFRetain(v3);
  }
  else {
    uint64_t result = APAdvertiserInfoCopyProperty();
  }
  *a2 = result;
  return result;
}

uint64_t airPlayDescription_copyPairingPeerPublicKey(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  *(_OWORD *)buffer = 0u;
  long long v15 = 0u;
  *(_OWORD *)long long bytes = 0u;
  long long v13 = 0u;
  int hasFeatureInternal = airPlayDescription_hasFeatureInternal(a1);
  CFStringRef v7 = *(const void **)(DerivedStorage + 48);
  if (v7)
  {
    uint64_t v8 = 0;
    *a3 = CFRetain(v7);
    return v8;
  }
  CFStringRef v10 = (const __CFString *)APAdvertiserInfoCopyProperty();
  CFStringRef v11 = v10;
  if (hasFeatureInternal)
  {
    if (!v10) {
      return 4294895545;
    }
  }
  else if (!v10)
  {
    APSLogErrorAt();
    uint64_t v8 = APSSignalErrorAt();
    if (!v8) {
      return v8;
    }
    goto LABEL_10;
  }
  if (CFStringGetCString(v10, buffer, 128, 0x8000100u)) {
    HexToData();
  }
  uint64_t v8 = 4294895543;
  APSLogErrorAt();
  CFRelease(v11);
LABEL_10:
  if (!hasFeatureInternal
    && gLogCategory_APEndpointDescriptionAirPlay <= 60
    && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v8;
}

CFTypeRef airPlayDescription_copyOneTimePairingRequired(uint64_t a1, void *a2)
{
  CMBaseObjectGetDerivedStorage();
  __int16 PropertyInt64Sync = CFObjectGetPropertyInt64Sync();
  uint64_t v4 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
  if ((PropertyInt64Sync & 0x200) == 0) {
    uint64_t v4 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
  }
  CFTypeRef result = CFRetain(*v4);
  *a2 = result;
  return result;
}

void airPlayDescription_copyAirPlaySecurity(uint64_t a1, uint64_t *a2)
{
  CMBaseObjectGetDerivedStorage();
  CFBooleanRef v7 = 0;
  CFBooleanRef BOOLean = 0;
  CFBooleanRef v6 = 0;
  airPlayDescription_copyPasswordRequired(a1, &BOOLean);
  airplayDescription_copyStatusFlagsContainsFlag(a1, 8, &v7);
  airPlayDescription_copyOneTimePairingRequired(a1, &v6);
  CFBooleanRef v4 = BOOLean;
  if (!CFBooleanGetValue(BOOLean) && !CFBooleanGetValue(v7)) {
    CFBooleanGetValue(v6);
  }
  *a2 = CFNumberCreateInt64();
  if (v4) {
    CFRelease(v4);
  }
  if (v7) {
    CFRelease(v7);
  }
  CFBooleanRef v5 = v6;
  if (v6)
  {
    CFRelease(v5);
  }
}

CFTypeRef airPlayDescription_copyDeviceSubType(const void *a1, void *a2)
{
  CMBaseObjectGetDerivedStorage();
  switch(CFObjectGetPropertyInt64Sync())
  {
    case 1u:
      CFBooleanRef v4 = (CFTypeRef *)MEMORY[0x1E4F214F8];
      break;
    case 2u:
      CFBooleanRef v4 = (CFTypeRef *)MEMORY[0x1E4F214E8];
      break;
    case 3u:
      CFBooleanRef v4 = (CFTypeRef *)MEMORY[0x1E4F21500];
      break;
    case 4u:
      CFBooleanRef v4 = (CFTypeRef *)MEMORY[0x1E4F214E0];
      break;
    case 5u:
      CFBooleanRef v4 = (CFTypeRef *)MEMORY[0x1E4F21510];
      break;
    case 6u:
      CFBooleanRef v4 = (CFTypeRef *)MEMORY[0x1E4F21518];
      break;
    default:
      if (airPlayDescription_modelHasPrefix(a1, @"AppleTV"))
      {
        CFBooleanRef v4 = (CFTypeRef *)MEMORY[0x1E4F214A8];
      }
      else if (airPlayDescription_modelHasPrefix(a1, @"AudioAccessory"))
      {
        CFBooleanRef v4 = (CFTypeRef *)MEMORY[0x1E4F214D0];
      }
      else if (airPlayDescription_isThirdPartyDevice((uint64_t)a1))
      {
        BOOL isThirdPartyTVFamily = airPlayDescription_isThirdPartyTVFamily((uint64_t)a1);
        CFBooleanRef v4 = (CFTypeRef *)MEMORY[0x1E4F214F8];
        if (!isThirdPartyTVFamily) {
          CFBooleanRef v4 = (CFTypeRef *)MEMORY[0x1E4F214F0];
        }
      }
      else
      {
        CFBooleanRef v4 = (CFTypeRef *)MEMORY[0x1E4F21508];
      }
      break;
  }
  CFTypeRef result = CFRetain(*v4);
  *a2 = result;
  return result;
}

uint64_t airPlayDescription_copyEndpointInfoValueCFArray(uint64_t a1, const void *a2, void *a3)
{
  CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  airPlayDescription_copyEndpointInfoValue(a1, a2, (const __CFDictionary **)&cf);
  CFTypeRef v6 = cf;
  if (cf && (CFTypeID v7 = CFGetTypeID(cf), v7 != CFArrayGetTypeID()))
  {
    APSLogErrorAt();
    CFRelease(v6);
    return 4294895541;
  }
  else
  {
    uint64_t result = 0;
    *a3 = v6;
  }
  return result;
}

BOOL airPlayDescription_isSourceVersionAtLeast(uint64_t a1, unsigned int a2)
{
  CFTypeID v7 = 0;
  CMBaseObjectGetDerivedStorage();
  if (airPlayDescription_copySourceVersion(a1, (uint64_t *)&v7))
  {
    APSLogErrorAt();
    BOOL v5 = 0;
    CFBooleanRef v4 = v7;
    if (!v7) {
      return v5;
    }
    goto LABEL_3;
  }
  CFBooleanRef v4 = v7;
  BOOL v5 = CFGetInt64Ranged() >= a2;
  if (v4) {
LABEL_3:
  }
    CFRelease(v4);
  return v5;
}

uint64_t airPlayDescription_isDeviceOfSubType(const void *a1, uint64_t a2)
{
  CMBaseObjectGetDerivedStorage();
  CFTypeRef v6 = 0;
  if (a2)
  {
    airPlayDescription_copyDeviceSubType(a1, &v6);
    CFBooleanRef v4 = v6;
    a2 = FigCFEqual();
    if (v4) {
      CFRelease(v4);
    }
  }
  return a2;
}

BOOL airPlayDescription_isAppleReceiver(const void *a1)
{
  CFTypeRef cf1 = 0;
  CMBaseObjectGetDerivedStorage();
  airPlayDescription_copyDeviceSubType(a1, &cf1);
  CFTypeRef v2 = cf1;
  if (!cf1) {
    return 0;
  }
  BOOL v3 = CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E4F214A8])
    || CFEqual(v2, (CFTypeRef)*MEMORY[0x1E4F214D0])
    || CFEqual(v2, (CFTypeRef)*MEMORY[0x1E4F214E0])
    || CFEqual(v2, (CFTypeRef)*MEMORY[0x1E4F21510])
    || CFEqual(v2, (CFTypeRef)*MEMORY[0x1E4F21518]);
  CFRelease(v2);
  return v3;
}

BOOL airPlayDescription_isLegacyAirPlaySpeaker(const void *a1)
{
  CMBaseObjectGetDerivedStorage();
  CFTypeRef v6 = 0;
  CFTypeRef cf = 0;
  if (airPlayDescription_copySourceVersion((uint64_t)a1, (uint64_t *)&v6)
    || (unsigned int v2 = CFGetInt64Ranged(),
        int isDeviceOfSubType = airPlayDescription_isDeviceOfSubType(a1, *MEMORY[0x1E4F214A8]),
        CFGetAllocator(a1),
        airPlayDescription_copyFeaturesInternal((uint64_t)a1, (uint64_t *)&cf)))
  {
    APSLogErrorAt();
LABEL_6:
    BOOL v4 = 0;
    goto LABEL_8;
  }
  if (v2 < 0x1E9998)
  {
    BOOL v4 = 1;
    goto LABEL_8;
  }
  if (isDeviceOfSubType) {
    goto LABEL_6;
  }
  BOOL v4 = APSFeaturesHasFeature() == 0;
LABEL_8:
  if (cf) {
    CFRelease(cf);
  }
  if (v6) {
    CFRelease(v6);
  }
  return v4;
}

BOOL airPlayDescription_isThirdPartyTVFamily(uint64_t a1)
{
  CMBaseObjectGetDerivedStorage();
  BOOL isThirdPartyDevice = airPlayDescription_isThirdPartyDevice(a1);
  if (airPlayDescription_hasFeatureInternal(a1)) {
    BOOL v3 = !isThirdPartyDevice;
  }
  else {
    BOOL v3 = 1;
  }
  return !v3;
}

uint64_t airPlayDescription_hasFeatureInternal(uint64_t a1)
{
  CMBaseObjectGetDerivedStorage();
  BOOL v5 = 0;
  if (airPlayDescription_copyFeaturesInternal(a1, (uint64_t *)&v5))
  {
    APSLogErrorAt();
    uint64_t HasFeature = 0;
    unsigned int v2 = v5;
    if (!v5) {
      return HasFeature;
    }
    goto LABEL_3;
  }
  unsigned int v2 = v5;
  uint64_t HasFeature = APSFeaturesHasFeature();
  if (v2) {
LABEL_3:
  }
    CFRelease(v2);
  return HasFeature;
}

BOOL airplayDescription_canBeRemoteControlled(uint64_t a1)
{
  CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  airplayDescription_copyStatusFlagsContainsFlag(a1, 8, &cf);
  if (airPlayDescription_isSourceVersionAtLeast(a1, 0x365948u)
    && airPlayDescription_hasFeatureInternal(a1)
    && !airPlayDescription_hasFeatureInternal(a1))
  {
    CFTypeRef v3 = cf;
    BOOL v2 = CFBooleanGetValue((CFBooleanRef)cf) == 0;
    if (!v3) {
      return v2;
    }
    goto LABEL_5;
  }
  BOOL v2 = 0;
  CFTypeRef v3 = cf;
  if (cf) {
LABEL_5:
  }
    CFRelease(v3);
  return v2;
}

uint64_t airPlayDescription_isCarPlaySpatialAudioSupported()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef theArray = 0;
  if (!APSSettingsGetIntWithDefault()) {
    goto LABEL_25;
  }
  if (!*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 65)
    || APCarPlayAudioFormatsCopyFormatsForAudioType(*(unsigned char **)(DerivedStorage + 56), 103, @"media", 0, &theArray, 0))
  {
    goto LABEL_21;
  }
  if (!theArray)
  {
LABEL_25:
    LOBYTE(v4) = 0;
    return v4;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count >= 1)
  {
    CFIndex v2 = Count;
    CFIndex v3 = 0;
    int v4 = 0;
    do
    {
      CFArrayGetValueAtIndex(theArray, v3);
      Uuint64_t Int64 = FigCFNumberGetUInt64();
      unint64_t v6 = UInt64 - 65;
      if ((0x180Fu >> (UInt64 - 65))) {
        int v7 = 1;
      }
      else {
        int v7 = v4;
      }
      if (v6 < 0xD) {
        int v4 = v7;
      }
      BOOL v8 = v6 > 0xC;
      uint64_t v9 = (1 << v6) & 0x180F;
      BOOL v10 = v8 || v9 == 0;
      ++v3;
    }
    while (v10 && v2 != v3);
    goto LABEL_22;
  }
LABEL_21:
  LOBYTE(v4) = 0;
LABEL_22:
  if (theArray) {
    CFRelease(theArray);
  }
  return v4;
}

uint64_t airPlayDescription_hasFeaturesInternal(uint64_t a1)
{
  CMBaseObjectGetDerivedStorage();
  BOOL v5 = 0;
  if (airPlayDescription_copyFeaturesInternal(a1, (uint64_t *)&v5))
  {
    APSLogErrorAt();
    uint64_t HasAllFeatures = 0;
    CFIndex v2 = v5;
    if (!v5) {
      return HasAllFeatures;
    }
    goto LABEL_3;
  }
  CFIndex v2 = v5;
  uint64_t HasAllFeatures = APSFeaturesHasAllFeatures();
  if (v2) {
LABEL_3:
  }
    CFRelease(v2);
  return HasAllFeatures;
}

void airPlayDescription_copyCarPlayAudioFormats(uint64_t a1, const __CFAllocator *a2, CFMutableDictionaryRef *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  unint64_t v11 = 0;
  CFBooleanRef BOOLean = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a2, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableDictionaryRef v8 = Mutable;
    airPlayDescription_copyIsConnectedOverUSB(a1, &BOOLean);
    int Value = CFBooleanGetValue(BOOLean);
    BOOL v10 = *(unsigned char **)(DerivedStorage + 56);
    if (Value)
    {
      if (APCarPlayAudioFormatsCopyFormatsForAudioType(v10, 100, @"media", &v11, 0, 0)) {
        goto LABEL_14;
      }
    }
    else if (APCarPlayAudioFormatsCopyFormatsForAudioType(v10, 102, @"media", &v11, 0, 0))
    {
      goto LABEL_14;
    }
    CFDictionarySetInt64();
    if (!*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 65))
    {
LABEL_9:
      *a3 = v8;
      return;
    }
    if (!APCarPlayAudioFormatsCopyFormatsForAudioType(*(unsigned char **)(DerivedStorage + 56), 103, @"media", &v11, 0, 0))
    {
      CFDictionarySetInt64();
      goto LABEL_9;
    }
LABEL_14:
    APSLogErrorAt();
    CFRelease(v8);
    return;
  }
  APSLogErrorAt();
}

uint64_t airPlayDescription_copyAirPlayAudioFormats(uint64_t a1, const __CFAllocator *a2, void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3)
  {
    APSLogErrorAt();
    return 4294895545;
  }
  CFDictionaryRef v7 = *(const __CFDictionary **)(DerivedStorage + 24);
  if (v7)
  {
    int Value = CFDictionaryGetValue(v7, @"supportedFormats");
    if (Value)
    {
      CFTypeRef v9 = CFRetain(Value);
      if (v9) {
        goto LABEL_13;
      }
    }
  }
  uint64_t v14 = 0;
  CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a2, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v11 = airPlayDescription_copyFeaturesInternal(a1, (uint64_t *)&v14);
  if (v11)
  {
    APSLogErrorAt();
    CFTypeRef v9 = 0;
    uint64_t v12 = v14;
    if (v14) {
LABEL_9:
    }
      CFRelease(v12);
  }
  else
  {
    uint64_t v12 = v14;
    APSFeaturesHasFeature();
    APSFeaturesHasFeature();
    APSFeaturesHasFeature();
    APSFeaturesHasFeature();
    CFDictionarySetInt64();
    CFDictionarySetInt64();
    CFDictionarySetInt64();
    if (APSFeaturesHasFeature())
    {
      APAudioFormatGetSupportedTransportAudioFormatsLowLatencySender();
      CFDictionarySetInt64();
    }
    CFTypeRef v9 = Mutable;
    CFMutableDictionaryRef Mutable = 0;
    if (v12) {
      goto LABEL_9;
    }
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (!v11)
  {
LABEL_13:
    uint64_t v11 = 0;
    *a3 = v9;
    return v11;
  }
  APSLogErrorAt();
  if (v9) {
    CFRelease(v9);
  }
  return v11;
}

uint64_t airPlayDescription_copyCarPlayAudioFormatsExtended(uint64_t a1, const __CFAllocator *a2, __CFDictionary **a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  xpc_object_t value = 0;
  if (!APSSettingsGetIntWithDefault()) {
    return 0;
  }
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 65))
  {
    uint64_t v6 = APCarPlayAudioFormatsCopyFormatsForAudioType(*(unsigned char **)(DerivedStorage + 56), 103, @"media", 0, (CFMutableArrayRef *)&value, 0);
    if (v6)
    {
      uint64_t v7 = v6;
      APSLogErrorAt();
    }
    else
    {
      if (!value) {
        return 0;
      }
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a2, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (Mutable)
      {
        CFTypeRef v9 = Mutable;
        CFDictionarySetValue(Mutable, @"bufferStream", value);
        uint64_t v7 = 0;
        *a3 = v9;
      }
      else
      {
        APSLogErrorAt();
        uint64_t v7 = 4294960568;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  if (value) {
    CFRelease(value);
  }
  return v7;
}

uint64_t airPlayDescription_copyAirPlayAudioFormatsExtended(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    CFDictionaryRef v4 = *(const __CFDictionary **)(DerivedStorage + 24);
    if (v4 && (int Value = CFDictionaryGetValue(v4, @"supportedAudioFormatsExtended")) != 0) {
      CFTypeRef v6 = CFRetain(Value);
    }
    else {
      CFTypeRef v6 = 0;
    }
    uint64_t result = 0;
    *a2 = v6;
  }
  else
  {
    APSLogErrorAt();
    return 4294895545;
  }
  return result;
}

CFTypeRef airPlayDescription_copySupportsRFC2617DigestAuth(uint64_t a1, void *a2)
{
  CMBaseObjectGetDerivedStorage();
  if (CFObjectGetPropertyInt64Sync())
  {
    CFDictionaryRef v4 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
  }
  else
  {
    BOOL isSourceVersionAtLeast = airPlayDescription_isSourceVersionAtLeast(a1, 0x125048u);
    CFDictionaryRef v4 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    if (!isSourceVersionAtLeast) {
      CFDictionaryRef v4 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
    }
  }
  CFTypeRef result = CFRetain(*v4);
  *a2 = result;
  return result;
}

BOOL airPlayDescription_supportsCUPairingAndEncryption(uint64_t a1)
{
  return airPlayDescription_hasFeatureInternal(a1)
      || airPlayDescription_hasFeatureInternal(a1)
      || airPlayDescription_hasFeatureInternal(a1)
      || airPlayDescription_hasFeatureInternal(a1) != 0;
}

uint64_t airPlayDescription_copyDisplayDescriptionArray(uint64_t a1, const __CFAllocator *a2, __CFArray **a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  xpc_object_t value = 0;
  unsigned int v21 = airPlayDescription_copyFeaturesInternal(a1, (uint64_t *)&cf);
  if (v21)
  {
    APSLogErrorAt();
LABEL_21:
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_22;
  }
  CFTypeRef v7 = cf;
  if (APSFeaturesHasFeature())
  {
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable(a2, 0, MEMORY[0x1E4F1D510]);
    if (Mutable)
    {
      CFDictionaryRef v9 = *(const __CFDictionary **)(DerivedStorage + 24);
      if (!v9)
      {
        unsigned int v21 = APEndpointDisplayDescriptionCreateDefaultWithEndpointFeatures(a2, (uint64_t)v7, &value);
        if (v21)
        {
LABEL_29:
          APSLogErrorAt();
          goto LABEL_22;
        }
        CFArrayAppendValue(Mutable, value);
        goto LABEL_16;
      }
      CFArrayRef v10 = (const __CFArray *)CFDictionaryGetValue(v9, @"displays");
      if (!v10)
      {
LABEL_16:
        if (gLogCategory_APEndpointDescriptionAirPlay <= 50
          && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
        {
          CFArrayGetCount(Mutable);
          LogPrintF();
        }
        *a3 = Mutable;
        goto LABEL_21;
      }
      CFArrayRef v11 = v10;
      CFTypeID v12 = CFGetTypeID(v10);
      if (v12 == CFArrayGetTypeID())
      {
        CFIndex Count = CFArrayGetCount(v11);
        if (Count >= 1)
        {
          CFIndex v14 = Count;
          uint64_t v15 = 0;
          while (1)
          {
            CFDictionaryGetTypeID();
            TypedValueAtunsigned int Index = (const void *)CFArrayGetTypedValueAtIndex();
            unsigned int v21 = APEndpointDisplayDescriptionCreateWithDisplayInfo((uint64_t)a2, TypedValueAtIndex, &value);
            if (v21) {
              goto LABEL_29;
            }
            CFArrayAppendValue(Mutable, value);
            if (value)
            {
              CFRelease(value);
              xpc_object_t value = 0;
            }
            if (v14 == ++v15) {
              goto LABEL_16;
            }
          }
        }
        goto LABEL_16;
      }
      APSLogErrorAt();
      int v18 = -71751;
    }
    else
    {
      APSLogErrorAt();
      int v18 = -71750;
    }
  }
  else
  {
    CFMutableDictionaryRef Mutable = 0;
    int v18 = -71754;
  }
  unsigned int v21 = v18;
LABEL_22:
  if (value) {
    CFRelease(value);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v21;
}

CFTypeRef airplayDescription_copySupportsAirPlayFromCloud(uint64_t a1, void *a2)
{
  CMBaseObjectGetDerivedStorage();
  if (airPlayDescription_hasFeatureInternal(a1) && (CFObjectGetPropertyInt64Sync() & 0x40) != 0) {
    CFDictionaryRef v4 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
  }
  else {
    CFDictionaryRef v4 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
  }
  CFTypeRef result = CFRetain(*v4);
  *a2 = result;
  return result;
}

uint64_t airPlayDescription_getAccessControlType()
{
  return CFObjectGetPropertyInt64Sync();
}

void airPlayDescription_copyClusterInfoInternal(const void *a1, void *a2, void *a3, void *a4, void *a5, CFTypeRef *a6, void *a7, void *a8, void *a9, void *a10)
{
  CFBooleanRef v63 = 0;
  CFTypeRef cf = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2) {
    *a2 = 0;
  }
  if (a3) {
    *a3 = 0;
  }
  if (a4) {
    *a4 = 0;
  }
  if (a6) {
    *a6 = 0;
  }
  if (a5) {
    *a5 = 0;
  }
  if (a7) {
    *a7 = 0;
  }
  if (a8) {
    *a8 = 0;
  }
  if (a9) {
    *a9 = 0;
  }
  int v57 = a2;
  if (a10) {
    *a10 = 0;
  }
  if (*(void *)(DerivedStorage + 8) && !APTransportDeviceIsModernPresentOnInfra())
  {
    uint64_t v34 = 0;
    unsigned int v23 = 0;
    CFBooleanRef v35 = 0;
    CFTypeRef v58 = 0;
    uint64_t v36 = 0;
    CFTypeRef v32 = 0;
    uint64_t v37 = 0;
    BOOL v38 = 0;
    CFTypeRef v39 = 0;
    uint64_t v27 = 0;
    goto LABEL_112;
  }
  char v50 = a3;
  CFTypeRef v51 = a4;
  CFDictionaryRef v53 = a6;
  long long v54 = a5;
  BOOL v55 = a7;
  uint64_t v56 = a8;
  CMBaseObjectGetDerivedStorage();
  uint64_t v18 = CMBaseObjectGetDerivedStorage();
  if (!APSIsPermanentSpeakerGroupingEnabled() || (CFDictionaryRef v19 = *(const __CFDictionary **)(v18 + 80)) == 0)
  {
LABEL_40:
    int v65 = 0;
    CMBaseObjectGetDerivedStorage();
    unsigned int v21 = (const void *)APAdvertiserInfoCopyProperty();
    if (v21)
    {
      int PropertyInt64Sync = CFObjectGetPropertyInt64Sync();
      CFObjectGetPropertyInt64Sync();
      uint64_t v25 = (const void *)APAdvertiserInfoCopyProperty();
      if (v25
        || PropertyInt64Sync != 1
        || (uint64_t v25 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%d", 0)) != 0)
      {
        unsigned int v23 = (const void *)APAdvertiserInfoCopyProperty();
        if (!v23 && PropertyInt64Sync == 1)
        {
          CFBooleanRef v64 = 0;
          airplayDescription_copyStatusFlagsContainsFlag((uint64_t)a1, 0x2000, &v64);
          CFBooleanRef v29 = v64;
          if (v64)
          {
            CFBooleanGetValue(v64);
            CFRelease(v29);
          }
          airPlayDescription_isDeviceOfSubType(a1, *MEMORY[0x1E4F214A8]);
          unsigned int v33 = (const void *)APSGetFabricatedMemberIDForHTGroup();
          unsigned int v23 = CFRetain(v33);
        }
        int v65 = APSValidatePersistentGroupInfo();
        if (v65)
        {
          CFRelease(v21);
          if (v23) {
            CFRelease(v23);
          }
          if (v25)
          {
            CFRelease(v25);
            unsigned int v21 = 0;
            unsigned int v23 = 0;
            uint64_t v25 = 0;
          }
          else
          {
            unsigned int v21 = 0;
            unsigned int v23 = 0;
          }
          uint64_t v27 = 0;
        }
        else
        {
          uint64_t v27 = (const void *)APAdvertiserInfoCopyProperty();
        }
        goto LABEL_65;
      }
      APSLogErrorAt();
      CFRelease(v21);
      unsigned int v21 = 0;
    }
    unsigned int v23 = 0;
    uint64_t v25 = 0;
    uint64_t v27 = 0;
LABEL_65:
    CFTypeRef v61 = 0;
    goto LABEL_66;
  }
  int Value = CFDictionaryGetValue(v19, (const void *)*MEMORY[0x1E4F4A198]);
  if (Value) {
    unsigned int v21 = CFRetain(Value);
  }
  else {
    unsigned int v21 = 0;
  }
  CFDictionaryGetInt64();
  CFDictionaryGetInt64();
  uint64_t v22 = CFDictionaryGetValue(*(CFDictionaryRef *)(v18 + 80), (const void *)*MEMORY[0x1E4F4A178]);
  if (!v22)
  {
    unsigned int v23 = 0;
LABEL_33:
    APSLogErrorAt();
    uint64_t v25 = 0;
    goto LABEL_34;
  }
  unsigned int v23 = CFRetain(v22);
  if (!v23) {
    goto LABEL_33;
  }
  CFStringRef v24 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%d", 0);
  if (!v24) {
    goto LABEL_33;
  }
  uint64_t v25 = v24;
  if (APSValidatePersistentGroupInfo())
  {
LABEL_34:
    if (v21) {
      CFRelease(v21);
    }
    if (v23) {
      CFRelease(v23);
    }
    if (v25) {
      CFRelease(v25);
    }
    goto LABEL_40;
  }
  uint64_t v26 = CFDictionaryGetValue(*(CFDictionaryRef *)(v18 + 80), (const void *)*MEMORY[0x1E4F4A180]);
  if (v26) {
    uint64_t v27 = CFRetain(v26);
  }
  else {
    uint64_t v27 = 0;
  }
  uint64_t v30 = CFDictionaryGetValue(*(CFDictionaryRef *)(v18 + 80), (const void *)*MEMORY[0x1E4F4A1A8]);
  if (v30) {
    CFTypeRef v61 = CFRetain(v30);
  }
  else {
    CFTypeRef v61 = 0;
  }
  uint64_t v31 = CFDictionaryGetValue(*(CFDictionaryRef *)(v18 + 80), (const void *)*MEMORY[0x1E4F4A1A0]);
  if (v31)
  {
    CFTypeRef v32 = CFRetain(v31);
    goto LABEL_67;
  }
LABEL_66:
  CFTypeRef v32 = 0;
LABEL_67:
  CFDictionaryRef v60 = v25;
  uint64_t v52 = v21;
  CFTypeRef v58 = v27;
  if (v21)
  {
    CFTypeRef v40 = v32;
    CFTypeRef v41 = CFRetain(v21);
    APSPersistentGroupTypeToClusterType();
    uint64_t Int64 = (const void *)CFNumberCreateInt64();
    BOOL v43 = (const void *)CFNumberCreateInt64();
    CFTypeRef v44 = CFRetain(v23);
    CFGetInt64Ranged();
    APSGetClusterModelForPersistentGroupModel();
    CFTypeRef v39 = (const void *)CFStringCreateF();
    int v45 = CFEqual(v44, @"0");
    CFTypeRef v46 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    if (!v45) {
      CFTypeRef v46 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
    }
    CFTypeRef cf = CFRetain(*v46);
    if (v27) {
      uint64_t v27 = CFRetain(v27);
    }
    uint64_t v37 = 0;
    BOOL v38 = 0;
    goto LABEL_84;
  }
  uint64_t v37 = (const void *)APAdvertiserInfoCopyProperty();
  if (v37)
  {
    CFTypeRef v40 = v32;
    BOOL v38 = (const void *)APAdvertiserInfoCopyProperty();
    airplayDescription_copyStatusFlagsContainsFlag((uint64_t)a1, 0x2000, &v63);
    CFTypeRef v41 = CFRetain(v37);
    BOOL v43 = (const void *)CFNumberCreateInt64();
    uint64_t Int64 = (const void *)CFNumberCreateInt64();
    if (airPlayDescription_hasFeatureInternal((uint64_t)a1))
    {
      airplayDescription_copyStatusFlagsContainsFlag((uint64_t)a1, 0x200000, &cf);
      CFBooleanRef v47 = v63;
    }
    else
    {
      CFBooleanRef v47 = v63;
      if (v63) {
        CFTypeRef v48 = CFRetain(v63);
      }
      else {
        CFTypeRef v48 = 0;
      }
      CFTypeRef cf = v48;
    }
    if (CFBooleanGetValue(v47)) {
      int v49 = @"0";
    }
    else {
      int v49 = @"1";
    }
    CFTypeRef v44 = CFRetain(v49);
    CFGetInt64Ranged();
    APSGetClusterModelForTightSyncGroupModel();
    CFTypeRef v39 = (const void *)CFStringCreateF();
    uint64_t v27 = (const void *)APAdvertiserInfoCopyProperty();
LABEL_84:
    if (v57)
    {
      *int v57 = v41;
      CFTypeRef v41 = 0;
    }
    if (v50)
    {
      *char v50 = v43;
      BOOL v43 = 0;
    }
    if (v51)
    {
      *CFTypeRef v51 = Int64;
      uint64_t Int64 = 0;
    }
    if (v53)
    {
      *CFDictionaryRef v53 = cf;
      CFTypeRef cf = 0;
    }
    if (v54)
    {
      *long long v54 = v44;
      CFTypeRef v44 = 0;
    }
    if (v55)
    {
      *BOOL v55 = v39;
      CFTypeRef v39 = 0;
    }
    if (v56)
    {
      *uint64_t v56 = v27;
      uint64_t v27 = 0;
    }
    if (a9)
    {
      *a9 = v61;
      CFTypeRef v61 = 0;
    }
    if (a10)
    {
      *a10 = v40;
      CFTypeRef v40 = 0;
    }
    if (v41) {
      CFRelease(v41);
    }
    if (v43) {
      CFRelease(v43);
    }
    uint64_t v34 = v52;
    uint64_t v36 = v61;
    if (Int64) {
      CFRelease(Int64);
    }
    if (v44) {
      CFRelease(v44);
    }
    CFTypeRef v32 = v40;
    goto LABEL_111;
  }
  uint64_t v34 = 0;
  BOOL v38 = 0;
  CFTypeRef v39 = 0;
  uint64_t v27 = 0;
  uint64_t v36 = v61;
LABEL_111:
  CFBooleanRef v35 = v60;
LABEL_112:
  if (cf) {
    CFRelease(cf);
  }
  if (v39) {
    CFRelease(v39);
  }
  if (v27) {
    CFRelease(v27);
  }
  if (v37) {
    CFRelease(v37);
  }
  if (v38) {
    CFRelease(v38);
  }
  if (v63) {
    CFRelease(v63);
  }
  if (v34) {
    CFRelease(v34);
  }
  if (v23) {
    CFRelease(v23);
  }
  if (v35) {
    CFRelease(v35);
  }
  if (v58) {
    CFRelease(v58);
  }
  if (v36) {
    CFRelease(v36);
  }
  if (v32) {
    CFRelease(v32);
  }
}

uint64_t airPlayDescription_copyTightSyncClusterInfo(uint64_t a1, CFMutableDictionaryRef *a2)
{
  CMBaseObjectGetDerivedStorage();
  CFStringRef theString = 0;
  uint64_t v4 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableDictionaryRef v6 = Mutable;
    CFTypeRef v7 = (const void *)APAdvertiserInfoCopyProperty();
    CFTypeRef cf = v7;
    FigCFDictionarySetValue();
    if (v7)
    {
      CFRelease(v7);
      CFTypeRef cf = 0;
    }
    airPlayDescription_copyPropertyInternal(a1, @"GroupPublicName", v4, &cf);
    if (!cf) {
      CFTypeRef cf = CFRetain(@"Unknown Pair");
    }
    FigCFDictionarySetValue();
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    CFMutableDictionaryRef v8 = (const void *)APAdvertiserInfoCopyProperty();
    CFTypeRef cf = v8;
    if (v8 && (CFTypeID v9 = CFGetTypeID(v8), v9 == CFStringGetTypeID()))
    {
      CFGetInt64Ranged();
      APSGetClusterModelForTightSyncGroupModel();
      CFStringRef v10 = 0;
    }
    else
    {
      airPlayDescription_copyModel(a1, (uint64_t *)&theString);
      CFStringRef v10 = theString;
      if (theString)
      {
        CFStringHasPrefix(theString, @"AudioAccessory5");
        CFStringHasPrefix(v10, @"AudioAccessory6");
      }
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    APSGetClusterModelNameForClusterTypeAndModel();
    FigCFDictionarySetValue();
    *a2 = v6;
    if (cf) {
      CFRelease(cf);
    }
    if (v10) {
      CFRelease(v10);
    }
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294950575;
  }
}

uint64_t airPlayDescription_copyHKAccessControlLevel(uint64_t a1, uint64_t *a2)
{
  CMBaseObjectGetDerivedStorage();
  if (airPlayDescription_getAccessControlType() == 1) {
    CFObjectGetPropertyInt64Sync();
  }
  if (APSAccessControlIsValidConfig())
  {
    uint64_t v3 = 0;
    *a2 = CFNumberCreateInt64();
  }
  else
  {
    uint64_t v3 = 4294895542;
    if (gLogCategory_APEndpointDescriptionAirPlay <= 90
      && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  return v3;
}

CFTypeRef airPlayDescription_copyIsHKAccessControlEnabled(uint64_t a1, void *a2)
{
  CMBaseObjectGetDerivedStorage();
  unsigned int PropertyInt64Sync = CFObjectGetPropertyInt64Sync();
  int hasFeatureInternal = airPlayDescription_hasFeatureInternal(a1);
  CFMutableDictionaryRef v6 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
  if (((hasFeatureInternal != 0) & (PropertyInt64Sync >> 10)) == 0) {
    CFMutableDictionaryRef v6 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
  }
  CFTypeRef result = CFRetain(*v6);
  *a2 = result;
  return result;
}

CFTypeRef airPlayDescription_copyDeviceSupportsRelay(uint64_t a1, void *a2)
{
  CMBaseObjectGetDerivedStorage();
  __int16 PropertyInt64Sync = CFObjectGetPropertyInt64Sync();
  BOOL canBeRemoteControlled = airplayDescription_canBeRemoteControlled(a1);
  BOOL isSourceVersionAtLeast = airPlayDescription_isSourceVersionAtLeast(a1, 0x37D8E0u);
  BOOL v8 = !canBeRemoteControlled || !isSourceVersionAtLeast || (PropertyInt64Sync & 0x800) == 0;
  CFTypeID v9 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
  if (!v8) {
    CFTypeID v9 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
  }
  CFTypeRef result = CFRetain(*v9);
  *a2 = result;
  return result;
}

CFTypeRef airplayDescription_copySupportsAWDL(uint64_t a1, void *a2)
{
  CMBaseObjectGetDerivedStorage();
  BOOL isThirdPartyDevice = airPlayDescription_isThirdPartyDevice(a1);
  BOOL v5 = airPlayDescription_supportsCUPairingAndEncryption(a1);
  int hasFeatureInternal = airPlayDescription_hasFeatureInternal(a1);
  if (!isThirdPartyDevice && v5 | hasFeatureInternal) {
    CFTypeRef v7 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
  }
  else {
    CFTypeRef v7 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
  }
  CFTypeRef result = CFRetain(*v7);
  *a2 = result;
  return result;
}

CFTypeRef airplayDescription_copySupportsNAN(uint64_t a1, void *a2)
{
  CMBaseObjectGetDerivedStorage();
  if (APSSettingsGetInt64() && airPlayDescription_hasFeatureInternal(a1)) {
    uint64_t v4 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
  }
  else {
    uint64_t v4 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
  }
  CFTypeRef result = CFRetain(*v4);
  *a2 = result;
  return result;
}

CFTypeRef airplayDescription_copySupportsPTP(uint64_t a1, void *a2)
{
  CMBaseObjectGetDerivedStorage();
  if (airPlayDescription_isSourceVersionAtLeast(a1, 0x36193Eu)
    && airPlayDescription_hasFeatureInternal(a1))
  {
    uint64_t v4 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
  }
  else
  {
    uint64_t v4 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
  }
  CFTypeRef result = CFRetain(*v4);
  *a2 = result;
  return result;
}

CFTypeRef airPlayDescription_copySupportsUnifiedMediaControl(uint64_t a1, void *a2)
{
  CMBaseObjectGetDerivedStorage();
  if (airPlayDescription_copySupportsUnifiedMediaControl_checkPrefOnce != -1) {
    dispatch_once_f(&airPlayDescription_copySupportsUnifiedMediaControl_checkPrefOnce, &airPlayDescription_copySupportsUnifiedMediaControl_forceUnifiedMediaControlOverride, (dispatch_function_t)airPlayDescription_checkIfUnifiedMediaControlIsForced);
  }
  if (airPlayDescription_copySupportsUnifiedMediaControl_forceUnifiedMediaControlOverride == 1)
  {
    if (gLogCategory_APEndpointDescriptionAirPlay <= 60
      && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_18;
  }
  if (!airPlayDescription_copySupportsUnifiedMediaControl_forceUnifiedMediaControlOverride)
  {
    if (gLogCategory_APEndpointDescriptionAirPlay <= 60
      && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_16;
  }
  if (airPlayDescription_isSourceVersionAtLeast(a1, 0x287184u)
    && (airPlayDescription_hasFeatureInternal(a1)
     || airPlayDescription_hasFeatureInternal(a1)))
  {
LABEL_18:
    uint64_t v4 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    goto LABEL_19;
  }
LABEL_16:
  uint64_t v4 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
LABEL_19:
  CFTypeRef result = CFRetain(*v4);
  *a2 = result;
  return result;
}

uint64_t airplayDescription_getAssistedModeType()
{
  CMBaseObjectGetDerivedStorage();
  CFDictionaryRef v0 = (const __CFDictionary *)APTransportDeviceCopyAssistedInfo();
  if (!v0) {
    return 0;
  }
  CFDictionaryRef v1 = v0;
  if (CFDictionaryContainsKey(v0, @"AssistedInstanceName"))
  {
    uint64_t v2 = 1;
  }
  else if (CFDictionaryContainsKey(v1, @"IsP2P"))
  {
    uint64_t v2 = 2;
  }
  else
  {
    uint64_t v2 = 3;
  }
  CFRelease(v1);
  return v2;
}

CFTypeRef airPlayDescription_copyIsConnectedOverUSB(uint64_t a1, void *a2)
{
  if (*(void *)(CMBaseObjectGetDerivedStorage() + 8) && APTransportDeviceIsConnectedOverUSB()) {
    uint64_t v3 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
  }
  else {
    uint64_t v3 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
  }
  CFTypeRef result = CFRetain(*v3);
  *a2 = result;
  return result;
}

CFNumberRef airPlayDescription_copyMetadataFeatures(const void *a1, const __CFAllocator *a2, CFNumberRef *a3)
{
  CMBaseObjectGetDerivedStorage();
  int PropertyInt64Sync = CFObjectGetPropertyInt64Sync();
  int valuePtr = PropertyInt64Sync;
  if (airPlayDescription_hasFeatureInternal((uint64_t)a1))
  {
    PropertyInt64Sync |= 1u;
    int valuePtr = PropertyInt64Sync;
  }
  if (airPlayDescription_hasFeatureInternal((uint64_t)a1))
  {
    PropertyInt64Sync |= 2u;
    int valuePtr = PropertyInt64Sync;
  }
  if (airPlayDescription_hasFeatureInternal((uint64_t)a1))
  {
    PropertyInt64Sync |= 4u;
    int valuePtr = PropertyInt64Sync;
  }
  if (airPlayDescription_isDeviceOfSubType(a1, *MEMORY[0x1E4F214A8])
    || airPlayDescription_isThirdPartyTVFamily((uint64_t)a1))
  {
    PropertyInt64Sync |= 0x10u;
    int valuePtr = PropertyInt64Sync;
  }
  if (airPlayDescription_isThirdPartyTVFamily((uint64_t)a1))
  {
    PropertyInt64Sync |= 8u;
    int valuePtr = PropertyInt64Sync;
  }
  if (airPlayDescription_hasFeatureInternal((uint64_t)a1))
  {
    int valuePtr = PropertyInt64Sync | 0x20;
    if (airPlayDescription_isSourceVersionAtLeast((uint64_t)a1, 0x37F564u))
    {
      PropertyInt64Sync |= 0x120u;
      int valuePtr = PropertyInt64Sync;
    }
    else
    {
      PropertyInt64Sync |= 0x20u;
    }
    if (airPlayDescription_isSourceVersionAtLeast((uint64_t)a1, 0x398A14u))
    {
      PropertyInt64Sync |= 0x40u;
      int valuePtr = PropertyInt64Sync;
    }
    if (airPlayDescription_isSourceVersionAtLeast((uint64_t)a1, 0x3A2654u))
    {
      PropertyInt64Sync |= 0x200u;
      int valuePtr = PropertyInt64Sync;
    }
  }
  if (airPlayDescription_isSourceVersionAtLeast((uint64_t)a1, 0x365948u)) {
    int valuePtr = PropertyInt64Sync | 0x80;
  }
  CFNumberRef result = CFNumberCreate(a2, kCFNumberSInt32Type, &valuePtr);
  *a3 = result;
  return result;
}

uint64_t airPlayDescription_copyEndpointInfoValueCFDictionary(uint64_t a1, const void *a2, void *a3)
{
  CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  airPlayDescription_copyEndpointInfoValue(a1, a2, (const __CFDictionary **)&cf);
  CFTypeRef v6 = cf;
  if (cf && (CFTypeID v7 = CFGetTypeID(cf), v7 != CFDictionaryGetTypeID()))
  {
    APSLogErrorAt();
    CFRelease(v6);
    return 4294895541;
  }
  else
  {
    uint64_t result = 0;
    *a3 = v6;
  }
  return result;
}

void airPlayDescription_copyEndpointInfoValueCFBoolean(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  CMBaseObjectGetDerivedStorage();
  CFDictionaryRef v9 = 0;
  airPlayDescription_copyEndpointInfoValue(a1, a2, &v9);
  CFDictionaryRef v6 = v9;
  if (v9)
  {
    uint64_t v7 = CFGetInt64();
    BOOL v8 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    if (!v7) {
      BOOL v8 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
    }
    *a3 = CFRetain(*v8);
    CFRelease(v6);
  }
  else
  {
    *a3 = 0;
  }
}

uint64_t airPlayDescription_copyEndpointInfoValueCFString(uint64_t a1, const void *a2, void *a3)
{
  CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  airPlayDescription_copyEndpointInfoValue(a1, a2, (const __CFDictionary **)&cf);
  CFTypeRef v6 = cf;
  if (cf && (CFTypeID v7 = CFGetTypeID(cf), v7 != CFStringGetTypeID()))
  {
    APSLogErrorAt();
    CFRelease(v6);
    return 4294895541;
  }
  else
  {
    uint64_t result = 0;
    *a3 = v6;
  }
  return result;
}

uint64_t airPlayDescription_copyOEMIcons(uint64_t a1, const __CFAllocator *a2, void *a3)
{
  values = 0;
  CFTypeRef cf = 0;
  CMBaseObjectGetDerivedStorage();
  int v6 = airPlayDescription_copyEndpointInfoValueCFArray(a1, @"oemIcons", &cf);
  CFTypeID v7 = cf;
  if (v6) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = cf == 0;
  }
  if (!v8)
  {
    CFTypeRef v9 = 0;
    if (!a3)
    {
LABEL_15:
      CFRelease(v7);
LABEL_16:
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_17;
    }
LABEL_13:
    *a3 = v7;
    CFTypeRef cf = 0;
    goto LABEL_16;
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  CMBaseObjectGetDerivedStorage();
  CFTypeRef v18 = 0;
  airPlayDescription_copyEndpointInfoValue(a1, @"oemIcon", (const __CFDictionary **)&v18);
  CFTypeRef v9 = v18;
  if (v18)
  {
    CFTypeID v10 = CFGetTypeID(v18);
    if (v10 == CFDataGetTypeID())
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a2, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      values = Mutable;
      if (!Mutable
        || (CFTypeID v12 = Mutable,
            CFDictionarySetValue(Mutable, @"imageData", v9),
            CFDictionarySetInt64(),
            CFDictionarySetInt64(),
            CFDictionarySetValue(v12, @"prerendered", (const void *)*MEMORY[0x1E4F1CFC8]),
            CFTypeID v7 = CFArrayCreate(a2, (const void **)&values, 1, MEMORY[0x1E4F1D510]),
            (CFTypeRef cf = v7) == 0))
      {
        APSLogErrorAt();
        uint64_t v13 = 4294895546;
LABEL_17:
        CFRelease(v9);
        uint64_t v14 = v13;
        goto LABEL_19;
      }
      if (!a3) {
        goto LABEL_15;
      }
      goto LABEL_13;
    }
    uint64_t v14 = 4294895541;
    APSLogErrorAt();
    CFRelease(v9);
    APSLogErrorAt();
  }
  else
  {
    uint64_t v14 = 0;
  }
LABEL_19:
  if (values) {
    CFRelease(values);
  }
  return v14;
}

uint64_t airPlayDescription_extendedFeaturesHasKey(uint64_t a1, const void *a2)
{
  if (!*(void *)(CMBaseObjectGetDerivedStorage() + 24)) {
    return 0;
  }
  CFArrayGetTypeID();
  Typedint Value = (const __CFArray *)CFDictionaryGetTypedValue();
  if (!TypedValue) {
    return 0;
  }
  CFArrayRef v4 = TypedValue;
  v5.length = CFArrayGetCount(TypedValue);
  v5.location = 0;
  return CFArrayContainsValue(v4, v5, a2);
}

uint64_t airPlayDescription_isJarvisFeatureSupported(uint64_t a1, const void *a2)
{
  CFBooleanRef BOOLean = 0;
  if (!*(void *)(CMBaseObjectGetDerivedStorage() + 24))
  {
    APSLogErrorAt();
    return 0;
  }
  if (!*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 64)) {
    return 0;
  }
  airPlayDescription_copyEndpointInfoNestedCFData(a1, @"enhancedSiriInfo", a2, (CFTypeRef *)&BOOLean);
  CFBooleanRef v4 = BOOLean;
  if (!BOOLean) {
    return 0;
  }
  uint64_t Value = CFBooleanGetValue(BOOLean);
  CFRelease(v4);
  return Value;
}

uint64_t airPlayDescription_copyEndpointInfoNestedCFData(uint64_t a1, uint64_t a2, const void *a3, CFTypeRef *a4)
{
  CMBaseObjectGetDerivedStorage();
  CFDictionaryGetTypeID();
  Typeduint64_t Value = (const __CFDictionary *)CFDictionaryGetTypedValue();
  if (TypedValue)
  {
    uint64_t Value = CFDictionaryGetValue(TypedValue, a3);
    if (Value) {
      *a4 = CFRetain(Value);
    }
  }
  return 0;
}

void airPlayDescription_copyAirPlayEndpointProperties(uint64_t a1, int a2, __CFDictionary **a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  uint64_t v7 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFTypeRef v9 = Mutable;
    CFTypeID v10 = kAPEndpointDescriptionProperty_TXTRecordAirPlayClusterCompatible;
    if (!a2) {
      CFTypeID v10 = kAPEndpointDescriptionProperty_TXTRecordAirPlay;
    }
    airPlayDescription_copyPropertyInternal(a1, *v10, v7, &cf);
    FigCFDictionarySetValue();
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    if (!a2)
    {
      airPlayDescription_copyPropertyInternal(a1, @"BluetoothIdentifier", v7, &cf);
      FigCFDictionarySetValue();
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
      int hasFeatureInternal = airPlayDescription_hasFeatureInternal(a1);
      uint64_t v14 = (const void *)*MEMORY[0x1E4F1CFD0];
      uint64_t v15 = (const void *)*MEMORY[0x1E4F1CFC8];
      if (hasFeatureInternal) {
        long long v16 = (const void *)*MEMORY[0x1E4F1CFD0];
      }
      else {
        long long v16 = (const void *)*MEMORY[0x1E4F1CFC8];
      }
      CFDictionarySetValue(v9, @"SupportsClusterEngageOnActivation", v16);
      if (airPlayDescription_hasFeatureInternal(a1)) {
        long long v17 = v14;
      }
      else {
        long long v17 = v15;
      }
      CFDictionarySetValue(v9, @"SupportsLocalStereoPairClusterPersistentConnection", v17);
      CFTypeRef cf = (CFTypeRef)APAdvertiserInfoCopyProperty();
      FigCFDictionarySetValue();
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
      if (airPlayDescription_isSourceVersionAtLeast(a1, 0x6C6FC4u))
      {
        airplayDescription_copyStatusFlagsContainsFlag(a1, 0x100000, &cf);
        if (gLogCategory_APEndpointDescriptionAirPlay <= 30
          && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        FigCFDictionarySetValue();
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
      }
    }
    airPlayDescription_copyPropertyInternal(a1, @"GroupPublicName", v7, &cf);
    FigCFDictionarySetValue();
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    if (*(void *)(DerivedStorage + 8))
    {
      if (a2)
      {
        CFArrayRef v11 = (const void *)*MEMORY[0x1E4F1CFD0];
        CFTypeID v12 = (const void *)*MEMORY[0x1E4F1CFC8];
      }
      else
      {
        CFTypeRef cf = (CFTypeRef)APTransportDeviceCopyCUDNSNames();
        FigCFDictionarySetValue();
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
        int TransportsRequiringBroker = APTransportDeviceGetTransportsRequiringBroker();
        CFArrayRef v11 = (const void *)*MEMORY[0x1E4F1CFD0];
        CFTypeID v12 = (const void *)*MEMORY[0x1E4F1CFC8];
        if (TransportsRequiringBroker) {
          CFDictionaryRef v19 = (const void *)*MEMORY[0x1E4F1CFD0];
        }
        else {
          CFDictionaryRef v19 = (const void *)*MEMORY[0x1E4F1CFC8];
        }
        CFDictionarySetValue(v9, @"IsDiscoveredWithBroker", v19);
      }
      if (APTransportDeviceIsPresentOnInfra()) {
        long long v20 = v11;
      }
      else {
        long long v20 = v12;
      }
      CFDictionarySetValue(v9, @"IsDiscoveredOverInfra", v20);
    }
    airPlayDescription_copyPropertyInternal(a1, @"ParentGroupID", v7, &cf);
    FigCFDictionarySetValue();
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    airPlayDescription_copyPropertyInternal(a1, @"ParentGroupContainsDiscoverableLeader", v7, &cf);
    FigCFDictionarySetValue();
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    airPlayDescription_copyPropertyInternal(a1, @"ReceiverSessionIsActive", v7, &cf);
    FigCFDictionarySetValue();
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    airPlayDescription_copyPropertyInternal(a1, @"SupportsHangdogRemoteControl", v7, &cf);
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    airPlayDescription_copyPropertyInternal(a1, @"SupportsRapportRemoteControlTransport", v7, &cf);
    FigCFDictionarySetValue();
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    airPlayDescription_copyPropertyInternal(a1, @"SupportsMultiplayer", v7, &cf);
    FigCFDictionarySetValue();
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    airPlayDescription_copyPropertyInternal(a1, @"SupportsSharePlayHandoff", v7, &cf);
    FigCFDictionarySetValue();
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    if (!a2)
    {
      if (APSIsProximitySenderEnabled())
      {
        if (airPlayDescription_hasFeatureInternal(a1))
        {
          CFDictionarySetValue(v9, @"SupportsNIRanging", (const void *)*MEMORY[0x1E4F1CFD0]);
          if (*(void *)(DerivedStorage + 8))
          {
            CFTypeRef cf = (CFTypeRef)APTransportDeviceCopyProximityData();
            FigCFDictionarySetValue();
            if (cf) {
              CFRelease(cf);
            }
          }
        }
      }
    }
    *a3 = v9;
  }
  else
  {
    APSLogErrorAt();
  }
}

uint64_t airPlayDescription_copyMXDescriptor(uint64_t a1, __CFDictionary **a2)
{
  CMBaseObjectGetDerivedStorage();
  CFTypeRef v41 = 0;
  uint64_t v4 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    int v6 = Mutable;
    CFTypeRef cf = 0;
    CMBaseObjectGetDerivedStorage();
    int v7 = airPlayDescription_copyPropertyInternal(a1, @"MACAddress", 0, &cf);
    if (v7 == -12784 || v7 == 0) {
      FigCFDictionarySetValue();
    }
    else {
      APSLogErrorAt();
    }
    if (cf) {
      CFRelease(cf);
    }
    CFTypeRef cf = 0;
    CMBaseObjectGetDerivedStorage();
    int v9 = airPlayDescription_copyPropertyInternal(a1, @"Model", 0, &cf);
    if (v9 == -12784 || v9 == 0) {
      FigCFDictionarySetValue();
    }
    else {
      APSLogErrorAt();
    }
    if (cf) {
      CFRelease(cf);
    }
    CFTypeRef cf = 0;
    CMBaseObjectGetDerivedStorage();
    int v11 = airPlayDescription_copyPropertyInternal(a1, @"Manufacturer", 0, &cf);
    if (v11 != -12784 && v11) {
      APSLogErrorAt();
    }
    else {
      FigCFDictionarySetValue();
    }
    if (cf) {
      CFRelease(cf);
    }
    CFTypeRef cf = 0;
    CMBaseObjectGetDerivedStorage();
    int v12 = airPlayDescription_copyPropertyInternal(a1, @"FirmwareVersion", 0, &cf);
    if (v12 != -12784 && v12) {
      APSLogErrorAt();
    }
    else {
      FigCFDictionarySetValue();
    }
    if (cf) {
      CFRelease(cf);
    }
    CFTypeRef cf = 0;
    CMBaseObjectGetDerivedStorage();
    int v13 = airPlayDescription_copyPropertyInternal(a1, @"SerialNumber", 0, &cf);
    if (v13 != -12784 && v13) {
      APSLogErrorAt();
    }
    else {
      FigCFDictionarySetValue();
    }
    if (cf) {
      CFRelease(cf);
    }
    CFTypeRef cf = 0;
    CMBaseObjectGetDerivedStorage();
    int v14 = airPlayDescription_copyPropertyInternal(a1, @"TightSyncUUID", 0, &cf);
    if (v14 != -12784 && v14) {
      APSLogErrorAt();
    }
    else {
      FigCFDictionarySetValue();
    }
    if (cf) {
      CFRelease(cf);
    }
    CFTypeRef cf = 0;
    CMBaseObjectGetDerivedStorage();
    int v15 = airPlayDescription_copyPropertyInternal(a1, @"TightSyncIsGroupLeader", 0, &cf);
    if (v15 != -12784 && v15) {
      APSLogErrorAt();
    }
    else {
      FigCFDictionarySetValue();
    }
    if (cf) {
      CFRelease(cf);
    }
    CFTypeRef cf = 0;
    CMBaseObjectGetDerivedStorage();
    int v16 = airPlayDescription_copyPropertyInternal(a1, @"ClusterUUID", 0, &cf);
    if (v16 != -12784 && v16) {
      APSLogErrorAt();
    }
    else {
      FigCFDictionarySetValue();
    }
    if (cf) {
      CFRelease(cf);
    }
    CFTypeRef cf = 0;
    CMBaseObjectGetDerivedStorage();
    int v17 = airPlayDescription_copyPropertyInternal(a1, @"ClusterUUID", 0, &cf);
    if (v17 != -12784 && v17) {
      APSLogErrorAt();
    }
    else {
      FigCFDictionarySetValue();
    }
    if (cf) {
      CFRelease(cf);
    }
    CFTypeRef cf = 0;
    CMBaseObjectGetDerivedStorage();
    int v18 = airPlayDescription_copyPropertyInternal(a1, @"IsClusterLeader", 0, &cf);
    if (v18 != -12784 && v18) {
      APSLogErrorAt();
    }
    else {
      FigCFDictionarySetValue();
    }
    if (cf) {
      CFRelease(cf);
    }
    CFTypeRef cf = 0;
    CMBaseObjectGetDerivedStorage();
    int v19 = airPlayDescription_copyPropertyInternal(a1, @"ClusterSize", 0, &cf);
    if (v19 != -12784 && v19) {
      APSLogErrorAt();
    }
    else {
      FigCFDictionarySetValue();
    }
    if (cf) {
      CFRelease(cf);
    }
    CFTypeRef cf = 0;
    CMBaseObjectGetDerivedStorage();
    int v20 = airPlayDescription_copyPropertyInternal(a1, @"IsAppleMusicSubscriber", 0, &cf);
    if (v20 != -12784 && v20) {
      APSLogErrorAt();
    }
    else {
      FigCFDictionarySetValue();
    }
    if (cf) {
      CFRelease(cf);
    }
    CFTypeRef cf = 0;
    CMBaseObjectGetDerivedStorage();
    int v21 = airPlayDescription_copyPropertyInternal(a1, @"CloudLibraryIsOn", 0, &cf);
    if (v21 != -12784 && v21) {
      APSLogErrorAt();
    }
    else {
      FigCFDictionarySetValue();
    }
    if (cf) {
      CFRelease(cf);
    }
    CFTypeRef cf = 0;
    CMBaseObjectGetDerivedStorage();
    int v22 = airPlayDescription_copyPropertyInternal(a1, @"DeviceSupportsRelay", 0, &cf);
    if (v22 != -12784 && v22) {
      APSLogErrorAt();
    }
    else {
      FigCFDictionarySetValue();
    }
    if (cf) {
      CFRelease(cf);
    }
    CFTypeRef cf = 0;
    CMBaseObjectGetDerivedStorage();
    int v23 = airPlayDescription_copyPropertyInternal(a1, @"SupportsOverlayUI", 0, &cf);
    if (v23 != -12784 && v23) {
      APSLogErrorAt();
    }
    else {
      FigCFDictionarySetValue();
    }
    if (cf) {
      CFRelease(cf);
    }
    CFTypeRef cf = 0;
    CMBaseObjectGetDerivedStorage();
    int v24 = airPlayDescription_copyPropertyInternal(a1, @"IsMediaRemoteControllable", 0, &cf);
    if (v24 != -12784 && v24) {
      APSLogErrorAt();
    }
    else {
      FigCFDictionarySetValue();
    }
    if (cf) {
      CFRelease(cf);
    }
    CFTypeRef cf = 0;
    CMBaseObjectGetDerivedStorage();
    int v25 = airPlayDescription_copyPropertyInternal(a1, @"GroupContainsDiscoverableLeader", 0, &cf);
    if (v25 != -12784 && v25) {
      APSLogErrorAt();
    }
    else {
      FigCFDictionarySetValue();
    }
    if (cf) {
      CFRelease(cf);
    }
    CFTypeRef cf = 0;
    CMBaseObjectGetDerivedStorage();
    int v26 = airPlayDescription_copyPropertyInternal(a1, @"IsGroupLeader", 0, &cf);
    if (v26 != -12784 && v26) {
      APSLogErrorAt();
    }
    else {
      FigCFDictionarySetValue();
    }
    if (cf) {
      CFRelease(cf);
    }
    CFTypeRef cf = 0;
    CMBaseObjectGetDerivedStorage();
    int v27 = airPlayDescription_copyPropertyInternal(a1, @"SilentPrimary", 0, &cf);
    if (v27 != -12784 && v27) {
      APSLogErrorAt();
    }
    else {
      FigCFDictionarySetValue();
    }
    if (cf) {
      CFRelease(cf);
    }
    CFTypeRef cf = 0;
    CMBaseObjectGetDerivedStorage();
    int v28 = airPlayDescription_copyPropertyInternal(a1, @"SupportsExtendedWHA", 0, &cf);
    if (v28 != -12784 && v28) {
      APSLogErrorAt();
    }
    else {
      FigCFDictionarySetValue();
    }
    if (cf) {
      CFRelease(cf);
    }
    CFTypeRef cf = 0;
    CMBaseObjectGetDerivedStorage();
    int v29 = airPlayDescription_copyPropertyInternal(a1, @"AdvertisesHAPSupport", 0, &cf);
    if (v29 != -12784 && v29) {
      APSLogErrorAt();
    }
    else {
      FigCFDictionarySetValue();
    }
    if (cf) {
      CFRelease(cf);
    }
    CFTypeRef cf = 0;
    CMBaseObjectGetDerivedStorage();
    int v30 = airPlayDescription_copyPropertyInternal(a1, @"GroupID", 0, &cf);
    if (v30 != -12784 && v30) {
      APSLogErrorAt();
    }
    else {
      FigCFDictionarySetValue();
    }
    if (cf) {
      CFRelease(cf);
    }
    CFTypeRef cf = 0;
    CMBaseObjectGetDerivedStorage();
    int v31 = airPlayDescription_copyPropertyInternal(a1, @"SupportsAirPlayFromCloud", 0, &cf);
    if (v31 != -12784 && v31) {
      APSLogErrorAt();
    }
    else {
      FigCFDictionarySetValue();
    }
    if (cf) {
      CFRelease(cf);
    }
    CFTypeRef cf = 0;
    CMBaseObjectGetDerivedStorage();
    int v32 = airPlayDescription_copyPropertyInternal(a1, @"VodkaVersion", 0, &cf);
    if (v32 != -12784 && v32) {
      APSLogErrorAt();
    }
    else {
      FigCFDictionarySetValue();
    }
    if (cf) {
      CFRelease(cf);
    }
    CFTypeRef cf = 0;
    CMBaseObjectGetDerivedStorage();
    int v33 = airPlayDescription_copyPropertyInternal(a1, @"AirPlaySecurity", 0, &cf);
    if (v33 != -12784 && v33) {
      APSLogErrorAt();
    }
    else {
      FigCFDictionarySetValue();
    }
    if (cf) {
      CFRelease(cf);
    }
    CFTypeRef cf = 0;
    CMBaseObjectGetDerivedStorage();
    int v34 = airPlayDescription_copyPropertyInternal(a1, @"IsHKAccessControlEnabled", 0, &cf);
    if (v34 != -12784 && v34) {
      APSLogErrorAt();
    }
    else {
      FigCFDictionarySetValue();
    }
    if (cf) {
      CFRelease(cf);
    }
    CFTypeRef cf = 0;
    CMBaseObjectGetDerivedStorage();
    int v35 = airPlayDescription_copyPropertyInternal(a1, @"HKAccessControlLevel", 0, &cf);
    if (v35 != -12784 && v35) {
      APSLogErrorAt();
    }
    else {
      FigCFDictionarySetValue();
    }
    if (cf) {
      CFRelease(cf);
    }
    CFTypeRef cf = 0;
    CMBaseObjectGetDerivedStorage();
    int v36 = airPlayDescription_copyPropertyInternal(a1, @"AirPlayEndpointProperties", 0, &cf);
    if (v36 != -12784 && v36) {
      APSLogErrorAt();
    }
    else {
      FigCFDictionarySetValue();
    }
    if (cf) {
      CFRelease(cf);
    }
    CFTypeRef cf = 0;
    CMBaseObjectGetDerivedStorage();
    int v37 = airPlayDescription_copyPropertyInternal(a1, @"IsLowFidelitySpeaker", 0, &cf);
    if (v37 != -12784 && v37) {
      APSLogErrorAt();
    }
    else {
      FigCFDictionarySetValue();
    }
    if (cf) {
      CFRelease(cf);
    }
    airPlayDescription_copyPropertyInternal(a1, @"ClusterType", v4, &v41);
    uint64_t result = (uint64_t)v41;
    if (v41)
    {
      FigCFNumberGetUInt64();
      CFTypeRef v39 = (const void *)*MEMORY[0x1E4F752E0];
      CFTypeRef v40 = (const void *)APSClusterTypeToFigEndpointDescriptorClusterType();
      CFDictionarySetValue(v6, v39, v40);
      uint64_t result = (uint64_t)v41;
      *a2 = v6;
      if (result)
      {
        CFRelease((CFTypeRef)result);
        return 0;
      }
    }
    else
    {
      *a2 = v6;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294895546;
  }
  return result;
}

uint64_t airPlayDescription_isDCXSupportedForSpatialAudio(uint64_t a1)
{
  CFBooleanRef BOOLean = 0;
  CMBaseObjectGetDerivedStorage();
  if (!airPlayDescription_isCarPlaySpatialAudioSupported()) {
    return 0;
  }
  airPlayDescription_copyEndpointInfoNestedCFData(a1, @"mainBufferedInfo", @"DCXEnabled", (CFTypeRef *)&BOOLean);
  CFBooleanRef v2 = BOOLean;
  if (!BOOLean) {
    return 0;
  }
  uint64_t Value = CFBooleanGetValue(BOOLean);
  CFRelease(v2);
  return Value;
}

uint64_t airPlayDescription_copyFeaturesInternal(uint64_t a1, uint64_t *a2)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v4 = APAdvertiserInfoCopyProperty();
  if (!v4)
  {
    unsigned int v15 = 0;
    CMBaseObjectGetDerivedStorage();
    int PropertyInt64Sync = CFObjectGetPropertyInt64Sync();
    uint64_t Mutable = APSFeaturesCreateMutable();
    if (!Mutable)
    {
      APSLogErrorAt();
      uint64_t v8 = 4294960568;
      goto LABEL_48;
    }
    uint64_t v11 = Mutable;
    if (!PropertyInt64Sync) {
      goto LABEL_14;
    }
    APSFeaturesSetFeature();
    if ((PropertyInt64Sync & 4) != 0)
    {
      APSFeaturesSetFeature();
      if ((PropertyInt64Sync & 8) == 0)
      {
LABEL_11:
        if ((PropertyInt64Sync & 2) == 0) {
          goto LABEL_12;
        }
        goto LABEL_33;
      }
    }
    else if ((PropertyInt64Sync & 8) == 0)
    {
      goto LABEL_11;
    }
    APSFeaturesSetFeature();
    if ((PropertyInt64Sync & 2) == 0)
    {
LABEL_12:
      if (PropertyInt64Sync) {
LABEL_13:
      }
        APSFeaturesSetFeature();
LABEL_14:
      if (!APSFeaturesHasFeature()
        && !APSFeaturesHasFeature()
        && !APSFeaturesHasFeature()
        && !APSFeaturesHasFeature())
      {
        if (gLogCategory_APEndpointDescriptionAirPlay <= 60
          && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        goto LABEL_41;
      }
      char v12 = CFObjectGetPropertyInt64Sync();
      if ((v12 & 2) != 0)
      {
        APSFeaturesSetFeature();
        if ((v12 & 0x10) == 0)
        {
LABEL_20:
          if ((v12 & 1) == 0) {
            goto LABEL_22;
          }
          goto LABEL_21;
        }
      }
      else if ((v12 & 0x10) == 0)
      {
        goto LABEL_20;
      }
      APSFeaturesSetFeature();
      if ((v12 & 1) == 0)
      {
LABEL_22:
        if (APSFeaturesHasFeature()
          || APSFeaturesHasFeature()
          || APSFeaturesHasFeature())
        {
LABEL_42:
          *a2 = v11;
          uint64_t v8 = v15;
          if (!v15) {
            return v8;
          }
LABEL_48:
          APSLogErrorAt();
          return v8;
        }
        CFTypeRef v14 = 0;
        airPlayDescription_copyName(a1, (uint64_t *)&v14);
        APSFeaturesCopyStringRepresentation();
        if (gLogCategory_APEndpointDescriptionAirPlay <= 60
          && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        if (v14) {
          CFRelease(v14);
        }
LABEL_41:
        APSFeaturesClearAllFeatures();
        goto LABEL_42;
      }
LABEL_21:
      APSFeaturesSetFeature();
      goto LABEL_22;
    }
LABEL_33:
    APSFeaturesSetFeature();
    if ((PropertyInt64Sync & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  CFRange v5 = (const void *)v4;
  uint64_t MutableCopy = APSFeaturesCreateMutableCopy();
  if (MutableCopy)
  {
    uint64_t v7 = MutableCopy;
    if (!airPlayDescription_isSourceVersionAtLeast(a1, 0x1E9998u))
    {
      APSFeaturesClearFeature();
      APSFeaturesClearFeature();
    }
    uint64_t v8 = 0;
    *a2 = v7;
  }
  else
  {
    APSLogErrorAt();
    uint64_t v8 = 4294960568;
  }
  CFRelease(v5);
  return v8;
}

uint64_t airPlayDescription_modelHasPrefix(const void *a1, const __CFString *a2)
{
  CMBaseObjectGetDerivedStorage();
  CFStringRef theString = 0;
  if (a2
    && (CFGetAllocator(a1), airPlayDescription_copyModel((uint64_t)a1, (uint64_t *)&theString), (CFStringRef v4 = theString) != 0))
  {
    uint64_t HasPrefix = CFStringHasPrefix(theString, a2);
    CFRelease(v4);
    return HasPrefix;
  }
  else
  {
    APSLogErrorAt();
    return 0;
  }
}

BOOL airPlayDescription_isThirdPartyDevice(uint64_t a1)
{
  return airPlayDescription_hasFeatureInternal(a1)
      || airPlayDescription_hasFeatureInternal(a1) != 0;
}

uint64_t airPlayDescription_checkIfUnifiedMediaControlIsForced(_DWORD *a1)
{
  uint64_t result = FigGetCFPreferenceNumberWithDefault();
  *a1 = result;
  return result;
}

uint64_t airPlayDescription_updateWithAdvertiserAndPSGInfosNotifyingClients(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v41 = 0;
  v42[0] = 0;
  CFTypeRef v39 = 0;
  CFTypeRef v40 = 0;
  CFTypeRef v37 = 0;
  CFTypeRef v38 = 0;
  CFTypeRef v35 = 0;
  CFTypeRef v36 = 0;
  CFTypeRef v33 = 0;
  CFTypeRef v34 = 0;
  CFTypeRef v31 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v29 = 0;
  CFTypeRef v30 = 0;
  CFTypeRef v27 = 0;
  CFTypeRef v28 = 0;
  airPlayDescription_copyClusterInfoInternal(a1, v42, &v40, &v38, &cf, &v36, &v34, 0, &v30, &v28);
  uint64_t v7 = APAdvertiserInfoCopyProperty();
  uint64_t v8 = APAdvertiserInfoCopyProperty();
  int v9 = *(const void **)(DerivedStorage + 16);
  *(void *)(DerivedStorage + 16) = a2;
  if (a2) {
    CFRetain(a2);
  }
  if (v9) {
    CFRelease(v9);
  }
  CFTypeID v10 = *(const void **)(DerivedStorage + 80);
  *(void *)(DerivedStorage + 80) = a3;
  if (a3) {
    CFRetain(a3);
  }
  if (v10) {
    CFRelease(v10);
  }
  airPlayDescription_copyClusterInfoInternal(a1, &v41, &v39, &v37, &v31, &v35, &v33, 0, &v29, &v27);
  uint64_t v11 = (const void *)APAdvertiserInfoCopyProperty();
  uint64_t v12 = APAdvertiserInfoCopyProperty();
  if (FigCFEqual()
    && FigCFEqual()
    && FigCFEqual()
    && FigCFEqual()
    && FigCFEqual())
  {
    int v13 = 0;
    char v25 = 1;
  }
  else
  {
    if (gLogCategory_APEndpointDescriptionAirPlay <= 50
      && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    char v25 = 0;
    int v13 = 1;
  }
  int v14 = FigCFEqual();
  if (!v14
    && gLogCategory_APEndpointDescriptionAirPlay <= 50
    && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFTypeRef v26 = (CFTypeRef)v12;
  if (FigCFEqual() && FigCFEqual())
  {
    unsigned int v15 = (const void *)v8;
    int v16 = 0;
    char v17 = 1;
  }
  else
  {
    if (gLogCategory_APEndpointDescriptionAirPlay <= 50
      && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
    {
      unsigned int v15 = (const void *)v8;
      LogPrintF();
    }
    else
    {
      unsigned int v15 = (const void *)v8;
    }
    char v17 = 0;
    int v16 = 1;
  }
  if (FigCFEqual() && FigCFEqual())
  {
    int v18 = (const void *)v7;
    char v19 = 1;
    if (v14 && !(v13 | v16))
    {
      int v20 = 0;
LABEL_50:
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
      uint64_t v23 = 0;
      goto LABEL_51;
    }
  }
  else
  {
    int v18 = (const void *)v7;
    if (gLogCategory_APEndpointDescriptionAirPlay <= 50
      && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    char v19 = 0;
  }
  uint64_t Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int v20 = Mutable;
  if (Mutable)
  {
    int v22 = (const void **)MEMORY[0x1E4F1CFD0];
    if (v25)
    {
      if (v14) {
        goto LABEL_47;
      }
    }
    else
    {
      CFDictionarySetValue(Mutable, @"ClusterInfoDidChange", (const void *)*MEMORY[0x1E4F1CFD0]);
      if (v14)
      {
LABEL_47:
        if (v17) {
          goto LABEL_48;
        }
        goto LABEL_96;
      }
    }
    CFDictionarySetValue(v20, @"ClusterLeaderDidChange", *v22);
    if (v17)
    {
LABEL_48:
      if (v19) {
        goto LABEL_50;
      }
LABEL_49:
      CFDictionarySetValue(v20, @"RoomInfoDidChange", *v22);
      goto LABEL_50;
    }
LABEL_96:
    CFDictionarySetValue(v20, @"GroupInfoDidChange", *v22);
    if (v19) {
      goto LABEL_50;
    }
    goto LABEL_49;
  }
  APSLogErrorAt();
  uint64_t v23 = 4294895546;
LABEL_51:
  if (v42[0]) {
    CFRelease(v42[0]);
  }
  if (v41) {
    CFRelease(v41);
  }
  if (v40) {
    CFRelease(v40);
  }
  if (v39) {
    CFRelease(v39);
  }
  if (v38) {
    CFRelease(v38);
  }
  if (v37) {
    CFRelease(v37);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v31) {
    CFRelease(v31);
  }
  if (v36) {
    CFRelease(v36);
  }
  if (v35) {
    CFRelease(v35);
  }
  if (v18) {
    CFRelease(v18);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (v26) {
    CFRelease(v26);
  }
  if (v34) {
    CFRelease(v34);
  }
  if (v33) {
    CFRelease(v33);
  }
  if (v30) {
    CFRelease(v30);
  }
  if (v29) {
    CFRelease(v29);
  }
  if (v28) {
    CFRelease(v28);
  }
  if (v27) {
    CFRelease(v27);
  }
  if (v20) {
    CFRelease(v20);
  }
  return v23;
}

uint64_t airPlayDescription_CopyFeatures(uint64_t a1, uint64_t *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointDescriptionAirPlay <= 30
    && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a2)
  {
    MEMORY[0x1D25EB370](*DerivedStorage);
    uint64_t v5 = airPlayDescription_copyFeaturesInternal(a1, a2);
    MEMORY[0x1D25EB390](*DerivedStorage);
    return v5;
  }
  else
  {
    APSLogErrorAt();
    return 4294895545;
  }
}

uint64_t airPlayDescription_HasFeature(uint64_t a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointDescriptionAirPlay <= 30
    && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1D25EB370](*DerivedStorage);
  uint64_t hasFeatureInternal = airPlayDescription_hasFeatureInternal(a1);
  MEMORY[0x1D25EB390](*DerivedStorage);
  return hasFeatureInternal;
}

uint64_t airPlayDescription_UpdateWithTransportDevice(const void *a1, const void *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointDescriptionAirPlay <= 30
    && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a2)
  {
    MEMORY[0x1D25EB370](*DerivedStorage);
    uint64_t v5 = CMBaseObjectGetDerivedStorage();
    if (*(const void **)(v5 + 8) != a2)
    {
      uint64_t v6 = v5;
      AdvertiserInfo = (const void *)APTransportDeviceGetAdvertiserInfo();
      uint64_t v8 = *(const void **)(v6 + 8);
      *(void *)(v6 + 8) = a2;
      CFRetain(a2);
      if (v8) {
        CFRelease(v8);
      }
      if (airPlayDescription_updateWithAdvertiserAndPSGInfosNotifyingClients(a1, AdvertiserInfo, *(const void **)(v6 + 80)))APSLogErrorAt(); {
    }
      }
    MEMORY[0x1D25EB390](*DerivedStorage);
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return APSSignalErrorAt();
  }
}

uint64_t airPlayDescription_SetEndpointInfo(const void *a1, const void *a2)
{
  v46[28] = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointDescriptionAirPlay <= 30
    && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a2)
  {
    CFTypeID v5 = CFGetTypeID(a2);
    if (v5 == CFDictionaryGetTypeID())
    {
      MEMORY[0x1D25EB370](*DerivedStorage);
      uint64_t v6 = CMBaseObjectGetDerivedStorage();
      uint64_t v7 = *(const void **)(v6 + 24);
      *(void *)(v6 + 24) = a2;
      CFRetain(a2);
      if (v7) {
        CFRelease(v7);
      }
      int hasFeatureInternal = airPlayDescription_hasFeatureInternal((uint64_t)a1);
      int v9 = (const __CFAllocator **)MEMORY[0x1E4F1CF80];
      if (hasFeatureInternal)
      {
        if (APSSettingsGetInt64())
        {
          CFDictionaryRef v10 = *(const __CFDictionary **)(v6 + 72);
          if (!v10) {
            goto LABEL_65;
          }
          int v11 = CFDictionaryContainsKey(v10, @"kAPCarPlay_Disable24kHzTelephony");
        }
        else
        {
          int v11 = 0;
        }
        CFAllocatorRef v14 = *v9;
        if (*(void *)(v6 + 8)) {
          BOOL v15 = APTransportDeviceIsConnectedOverUSB() == 0;
        }
        else {
          BOOL v15 = 0;
        }
        char v16 = *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 64);
        uint64_t v17 = CMBaseObjectGetDerivedStorage();
        uint64_t v12 = (const void *)APCarPlayAudioFormatsCreate(v14, a2, v15, v16, *(unsigned char *)(v17 + 65), v11);
        if (gLogCategory_APEndpointDescriptionAirPlay <= 30
          && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        int v13 = *(const void **)(v6 + 56);
        *(void *)(v6 + 56) = v12;
        if (v12)
        {
          CFRetain(v12);
          char v18 = 0;
          if (!v13)
          {
LABEL_27:
            if ((v18 & 1) == 0) {
              CFRelease(v12);
            }
            if (CFDictionaryGetValue((CFDictionaryRef)a2, @"txtAirPlay"))
            {
              if (CFDictionaryGetValue((CFDictionaryRef)a2, @"name")
                && !APAdvertiserInfoCreateWithRAOPAndAirPlayDataAndDeviceName()
                && !airPlayDescription_updateWithAdvertiserAndPSGInfosNotifyingClients(a1, 0, *(const void **)(v6 + 80)))
              {
                goto LABEL_62;
              }
              goto LABEL_65;
            }
            int v44 = 0;
            uint64_t v19 = CMBaseObjectGetDerivedStorage();
            uint64_t v20 = *MEMORY[0x1E4F47468];
            v46[0] = @"deviceID";
            v46[1] = v20;
            uint64_t v21 = *MEMORY[0x1E4F47458];
            v46[2] = @"company";
            v46[3] = v21;
            uint64_t v22 = *MEMORY[0x1E4F47460];
            v46[4] = @"deviceEnclosureColor";
            v46[5] = v22;
            uint64_t v23 = *MEMORY[0x1E4F47470];
            v46[6] = @"manufacturer";
            v46[7] = v23;
            uint64_t v24 = *MEMORY[0x1E4F47478];
            v46[8] = @"model";
            v46[9] = v24;
            uint64_t v25 = *MEMORY[0x1E4F47480];
            v46[10] = @"name";
            v46[11] = v25;
            uint64_t v26 = *MEMORY[0x1E4F474D0];
            unsigned char v46[12] = @"nameIsFactoryDefault";
            v46[13] = v26;
            uint64_t v27 = *MEMORY[0x1E4F47520];
            v46[14] = @"protocolVersion";
            v46[15] = v27;
            uint64_t v28 = *MEMORY[0x1E4F47528];
            v46[16] = @"pi";
            v46[17] = v28;
            uint64_t v29 = *MEMORY[0x1E4F47530];
            v46[18] = @"psi";
            v46[19] = v29;
            uint64_t v30 = *MEMORY[0x1E4F47538];
            uint64_t v31 = *MEMORY[0x1E4F47440];
            v46[22] = @"sourceVersion";
            v46[23] = v31;
            v46[20] = @"pk";
            v46[21] = v30;
            uint64_t v32 = *MEMORY[0x1E4F47550];
            v46[24] = @"statusFlags";
            v46[25] = v32;
            uint64_t v33 = *MEMORY[0x1E4F47568];
            v46[26] = @"vv";
            v46[27] = v33;
            if (*(void *)(v19 + 16))
            {
              uint64_t v34 = v19;
              uint64_t v43 = (uint64_t)a1;
              for (uint64_t i = 0; i != 28; i += 2)
              {
                CFTypeRef v36 = (const void *)v46[i];
                if (CFDictionaryContainsKey((CFDictionaryRef)a2, v36))
                {
                  uint64_t Value = CFDictionaryGetValue((CFDictionaryRef)a2, v36);
                  if (CFEqual(v36, @"pk"))
                  {
                    if (!Value
                      || (CFTypeID v38 = CFGetTypeID(Value), v38 != CFDataGetTypeID())
                      || CFDataGetLength((CFDataRef)Value) != 32)
                    {
LABEL_63:
                      APSLogErrorAt();
                      goto LABEL_62;
                    }
                    v47.location = 0;
                    v47.length = 32;
                    CFDataGetBytes((CFDataRef)Value, v47, buffer);
                    DataToHexCStringEx();
                    int v39 = CFObjectSetPropertyCString();
                  }
                  else
                  {
                    int v39 = APAdvertiserInfoSetProperty();
                  }
                  int v44 = v39;
                  if (v39) {
                    goto LABEL_63;
                  }
                }
              }
              CFDictionaryGetValue((CFDictionaryRef)a2, @"featuresEx");
              CFDictionaryGetInt64();
              CFTypeRef v40 = (const void *)APSFeaturesCreateFromEndpointInfoFeatureRepresentations();
              if (v44)
              {
                APSLogErrorAt();
                uint64_t MutableCopy = 0;
              }
              else
              {
                CMBaseObjectGetDerivedStorage();
                if (airPlayDescription_hasFeatureInternal(v43) && *(void *)(v34 + 96))
                {
                  uint64_t MutableCopy = (const void *)APSFeaturesCreateMutableCopy();
                  if (!MutableCopy)
                  {
                    APSLogErrorAt();
                    goto LABEL_58;
                  }
                  APSFeaturesSetAllFeatures();
                  if (gLogCategory_APEndpointDescriptionAirPlay <= 30
                    && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
                  {
                    LogPrintF();
                  }
                  CFRetain(MutableCopy);
                  if (v40) {
                    CFRelease(v40);
                  }
                  CFTypeRef v40 = MutableCopy;
                }
                else
                {
                  uint64_t MutableCopy = 0;
                }
                APAdvertiserInfoSetProperty();
              }
LABEL_58:
              if (v40) {
                CFRelease(v40);
              }
              if (MutableCopy) {
                CFRelease(MutableCopy);
              }
              goto LABEL_62;
            }
LABEL_65:
            APSLogErrorAt();
LABEL_62:
            MEMORY[0x1D25EB390](*DerivedStorage);
            return 0;
          }
LABEL_26:
          CFRelease(v13);
          goto LABEL_27;
        }
      }
      else
      {
        uint64_t v12 = 0;
        int v13 = *(const void **)(v6 + 56);
        *(void *)(v6 + 56) = 0;
      }
      char v18 = 1;
      if (!v13) {
        goto LABEL_27;
      }
      goto LABEL_26;
    }
  }
  APSLogErrorAt();
  return 4294895545;
}

uint64_t airPlayDescription_DescribesSameTransportDevice()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1D25EB370](*DerivedStorage);
  uint64_t IsSameDevice = APTransportDeviceIsSameDevice();
  MEMORY[0x1D25EB390](*DerivedStorage);
  return IsSameDevice;
}

void airPlayDescription_CopyClusterInfo(const void *a1, void *a2, void *a3, void *a4, void *a5, CFTypeRef *a6, void *a7, void *a8)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1D25EB370](*DerivedStorage);
  airPlayDescription_copyClusterInfoInternal(a1, a2, a3, a4, a5, a6, a7, a8, 0, 0);
  JUMPOUT(0x1D25EB390);
}

uint64_t APGetEndpointManager(void *a1)
{
  if (APGetEndpointManager_sCreateOnce != -1)
  {
    dispatch_once(&APGetEndpointManager_sCreateOnce, &__block_literal_global_26);
    if (!a1) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (a1) {
LABEL_3:
  }
    *a1 = APGetEndpointManager_sEndpointManager;
LABEL_4:
  if (gLogCategory_APEndpointManagerFactory <= 50
    && (gLogCategory_APEndpointManagerFactory != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return APGetEndpointManager_sCreationResult;
}

void __APGetEndpointManager_block_invoke()
{
  if (MEMORY[0x1D25E8620]() && (CFDictionaryRef v0 = getprogname(), !strcmp(v0, "audiomxd")))
  {
    if (gLogCategory_APEndpointManagerFactory <= 50
      && (gLogCategory_APEndpointManagerFactory != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    int v1 = FigEndpointManagerRemoteCopyAirPlayManager();
    if (v1) {
      goto LABEL_31;
    }
  }
  else
  {
    if (gLogCategory_APEndpointManagerFactory <= 50
      && (gLogCategory_APEndpointManagerFactory != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CFTypeRef cf = 0;
    int v1 = APEndpointManagerCreate(&cf);
    if (v1)
    {
      APSLogErrorAt();
    }
    else
    {
      if (!APSIsExplicitEndpointManagerInitializationEnabledInMX()
        && CMSessionMgrRegisterEndpointManager()
        && gLogCategory_APEndpointManagerFactory <= 90
        && (gLogCategory_APEndpointManagerFactory != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      APGetEndpointManager_sEndpointManager = (uint64_t)cf;
      CFTypeRef cf = 0;
    }
    if (gLogCategory_APEndpointManagerFactory <= 50
      && (gLogCategory_APEndpointManagerFactory != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (cf) {
      CFRelease(cf);
    }
    if (v1) {
LABEL_31:
    }
      APSLogErrorAt();
  }
  APGetEndpointManager_sCreationResult = v1;
}

uint64_t SPHubbedDevicesProviderGetClassID()
{
  if (SPHubbedDevicesProviderGetClassID_sRegisterOnce != -1) {
    dispatch_once_f(&SPHubbedDevicesProviderGetClassID_sRegisterOnce, &SPHubbedDevicesProviderGetClassID_sClassID, (dispatch_function_t)hubbedDevicesProvider_registerClass);
  }
  return SPHubbedDevicesProviderGetClassID_sClassID;
}

uint64_t hubbedDevicesProvider_registerClass(uint64_t a1)
{
  uint64_t ClassID = CMBaseGetClassID();
  return MEMORY[0x1F40DC658](&hubbedDevicesProvider_registerClass_sClassDesc, ClassID, 1, a1);
}

uint64_t SPHubbedDevicesProviderGetTypeID()
{
  if (SPHubbedDevicesProviderGetClassID_sRegisterOnce != -1) {
    dispatch_once_f(&SPHubbedDevicesProviderGetClassID_sRegisterOnce, &SPHubbedDevicesProviderGetClassID_sClassID, (dispatch_function_t)hubbedDevicesProvider_registerClass);
  }
  uint64_t v0 = SPHubbedDevicesProviderGetClassID_sClassID;
  return MEMORY[0x1F40DB8F8](v0);
}

uint64_t SPHubbedDevicesProviderCreate(CFTypeRef *a1)
{
  int v2 = APSIsAPMSpeaker();
  int IsAirplayd = FigServer_IsAirplayd();
  int v4 = MEMORY[0x1D25E8620]();
  uint64_t Int64 = APSSettingsGetInt64();
  uint64_t v6 = APSSettingsGetInt64();
  CFTypeRef cf = 0;
  if (a1)
  {
    *a1 = 0;
    if (!v4 && IsAirplayd)
    {
      APSLogErrorAt();
      int v13 = 90;
      uint64_t v8 = 4294960587;
    }
    else
    {
      if (IsAirplayd || !v2 || Int64 || v6)
      {
        if (v4) {
          BOOL v9 = 0;
        }
        else {
          BOOL v9 = v6 == 0;
        }
        int v10 = !v9;
        if (IsAirplayd || !v10)
        {
          uint64_t v12 = SPHubbedDevicesProviderPropertyCreate(&cf);
          if (v12)
          {
            uint64_t v8 = v12;
            goto LABEL_40;
          }
        }
        else
        {
          uint64_t v11 = SPHubbedDevicesProviderDefaultsCreate(*MEMORY[0x1E4F1CF80], 0, &cf);
          if (v11)
          {
            uint64_t v8 = v11;
            goto LABEL_40;
          }
        }
      }
      else
      {
        uint64_t v7 = SPHubbedDevicesProviderHomeHubCreate(*MEMORY[0x1E4F1CF80], &cf);
        if (v7)
        {
          uint64_t v8 = v7;
LABEL_40:
          APSLogErrorAt();
          int v13 = 90;
          goto LABEL_23;
        }
      }
      if (cf)
      {
        uint64_t v8 = 0;
        *a1 = cf;
        CFTypeRef cf = 0;
        int v13 = 50;
      }
      else
      {
        APSLogErrorAt();
        int v13 = 90;
        uint64_t v8 = 4294960534;
      }
    }
  }
  else
  {
    int v13 = 90;
    uint64_t v8 = 4294960591;
  }
LABEL_23:
  if (v13 >= gLogCategory_SPHubbedDevicesProvider
    && (gLogCategory_SPHubbedDevicesProvider != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFTypeRef v14 = cf;
  if (cf)
  {
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v17 = *(void (**)(CFTypeRef))(v16 + 24);
    if (v17) {
      v17(v14);
    }
    if (cf) {
      CFRelease(cf);
    }
  }
  return v8;
}

uint64_t SPHubbedDevicesProviderAddListener(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a2 && a3)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    uint64_t v3 = CMNotificationCenterAddListener();
    if (v3) {
      int v4 = 90;
    }
    else {
      int v4 = 50;
    }
  }
  else
  {
    APSLogErrorAt();
    int v4 = 90;
    uint64_t v3 = 4294960591;
  }
  if (v4 >= gLogCategory_SPHubbedDevicesProvider
    && (gLogCategory_SPHubbedDevicesProvider != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v3;
}

uint64_t SPHubbedDevicesProviderRemoveListener(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    uint64_t v2 = CMNotificationCenterRemoveListener();
    if (v2) {
      int v3 = 90;
    }
    else {
      int v3 = 50;
    }
  }
  else
  {
    APSLogErrorAt();
    int v3 = 90;
    uint64_t v2 = 4294960591;
  }
  if (v3 >= gLogCategory_SPHubbedDevicesProvider
    && (gLogCategory_SPHubbedDevicesProvider != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v2;
}

uint64_t SPHubbedDevicesProviderStartAsync(const void *a1)
{
  if (a1)
  {
    CFRetain(a1);
    global_queue = dispatch_get_global_queue(25, 0);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __SPHubbedDevicesProviderStartAsync_block_invoke;
    block[3] = &__block_descriptor_tmp_29;
    void block[4] = a1;
    dispatch_async(global_queue, block);
    uint64_t v3 = 0;
    int v4 = 50;
  }
  else
  {
    APSLogErrorAt();
    uint64_t v3 = 4294960591;
    int v4 = 90;
  }
  if (v4 >= gLogCategory_SPHubbedDevicesProvider
    && (gLogCategory_SPHubbedDevicesProvider != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v3;
}

void __SPHubbedDevicesProviderStartAsync_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  CFTypeID v5 = *(void (**)(uint64_t))(v4 + 8);
  if (v5) {
    v5(v2);
  }
  if (gLogCategory_SPHubbedDevicesProvider <= 50
    && (gLogCategory_SPHubbedDevicesProvider != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v6 = *(const void **)(a1 + 32);
  CFRelease(v6);
}

uint64_t SPHubbedDevicesProviderStartService(void *a1)
{
  if (a1) {
    *a1 = 0;
  }
  if (!MEMORY[0x1D25E8620]() || FigServer_IsAirplayd())
  {
    APSLogErrorAt();
    uint64_t result = 4294960561;
    SPHubbedDevicesProviderStartService_err = -6735;
  }
  else
  {
    if (SPHubbedDevicesProviderStartService_onceToken != -1) {
      dispatch_once(&SPHubbedDevicesProviderStartService_onceToken, &__block_literal_global_27);
    }
    uint64_t result = SPHubbedDevicesProviderStartService_err;
    if (a1 && !SPHubbedDevicesProviderStartService_err)
    {
      *a1 = SPHubbedDevicesProviderStartService_sharedProvider;
LABEL_12:
      int v3 = 50;
      goto LABEL_13;
    }
    if (!SPHubbedDevicesProviderStartService_err) {
      goto LABEL_12;
    }
  }
  int v3 = 90;
LABEL_13:
  if (v3 >= gLogCategory_SPHubbedDevicesProvider)
  {
    if (gLogCategory_SPHubbedDevicesProvider != -1
      || (int v4 = _LogCategory_Initialize(), result = SPHubbedDevicesProviderStartService_err, v4))
    {
      LogPrintF();
      return SPHubbedDevicesProviderStartService_err;
    }
  }
  return result;
}

void __SPHubbedDevicesProviderStartService_block_invoke()
{
  uint64_t v6 = 0;
  int v0 = SPGetEndpointManager(&v6);
  SPHubbedDevicesProviderStartService_err = v0;
  if (v0)
  {
    if (v0 == -72390)
    {
      int v5 = -6735;
LABEL_23:
      SPHubbedDevicesProviderStartService_err = v5;
      goto LABEL_8;
    }
    goto LABEL_26;
  }
  if (!v6) {
    goto LABEL_22;
  }
  SPHubbedDevicesProviderStartService_err = SPHubbedDevicesProviderCreate((CFTypeRef *)&SPHubbedDevicesProviderStartService_sharedProvider);
  if (SPHubbedDevicesProviderStartService_err)
  {
LABEL_26:
    APSLogErrorAt();
    goto LABEL_8;
  }
  if (!SPHubbedDevicesProviderStartService_sharedProvider)
  {
LABEL_22:
    APSLogErrorAt();
    int v5 = -6762;
    goto LABEL_23;
  }
  SPHubbedDevicesProviderStartService_err = SPHubbedDevicesProviderAddListener(SPHubbedDevicesProviderStartService_sharedProvider, v6, (uint64_t)hubbedDevicesProviderRemote_handleDevicesChanged);
  if (SPHubbedDevicesProviderStartService_err) {
    goto LABEL_26;
  }
  SPHubbedDevicesProviderStartService_err = SPHubbedDevicesProviderStartAsync((const void *)SPHubbedDevicesProviderStartService_sharedProvider);
  if (SPHubbedDevicesProviderStartService_err)
  {
    APSLogErrorAt();
    SPHubbedDevicesProviderRemoveListener(SPHubbedDevicesProviderStartService_sharedProvider, v6);
  }
  else
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterAddListener();
  }
LABEL_8:
  if (SPHubbedDevicesProviderStartService_err)
  {
    uint64_t v1 = SPHubbedDevicesProviderStartService_sharedProvider;
    if (SPHubbedDevicesProviderStartService_sharedProvider)
    {
      uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v2) {
        uint64_t v3 = v2;
      }
      else {
        uint64_t v3 = 0;
      }
      int v4 = *(void (**)(uint64_t))(v3 + 24);
      if (v4) {
        v4(v1);
      }
      if (SPHubbedDevicesProviderStartService_sharedProvider)
      {
        CFRelease((CFTypeRef)SPHubbedDevicesProviderStartService_sharedProvider);
        SPHubbedDevicesProviderStartService_sharedProvider = 0;
      }
    }
  }
}

void hubbedDevicesProviderRemote_handleDevicesChanged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void hubbedDevicesProviderRemote_handleSenderProcessLaunched(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

CFStringRef hubbedDevicesProvider_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[SPHubbedDevicesProvider %p]", a1);
}

void hubbedDevicesProviderRemote_updateRemoteManager(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  if (!a1 || !a2)
  {
    APSLogErrorAt();
    int v10 = 90;
    goto LABEL_18;
  }
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  int v5 = *(unsigned int (**)(uint64_t, __CFString *, void, CFTypeRef *))(v4 + 48);
  if (!v5 || v5(a2, @"HubbedDevices", *MEMORY[0x1E4F1CF80], &cf)) {
    goto LABEL_17;
  }
  if (cf)
  {
    FigCFSetCopyValuesAsCFArray();
LABEL_17:
    APSLogErrorAt();
    int v10 = 90;
    goto LABEL_18;
  }
  uint64_t CMBaseObject = FigEndpointManagerGetCMBaseObject();
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  BOOL v9 = *(unsigned int (**)(uint64_t, __CFString *, void))(v8 + 56);
  if (!v9 || v9(CMBaseObject, @"SPEndpointManagerProperty_HubbedDeviceIDs", 0)) {
    goto LABEL_17;
  }
  int v10 = 50;
LABEL_18:
  if (v10 >= gLogCategory_SPHubbedDevicesProvider
    && (gLogCategory_SPHubbedDevicesProvider != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t APCarPlay_AddSignPostTimeInfoToTimeStore(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = dispatch_semaphore_create(0);
  v12[0] = 0;
  v12[1] = v12;
  _OWORD v12[2] = 0x2020000000;
  v12[3] = 0;
  if (gLogCategory_APCarPlayCarServicesInterface <= 30
    && (gLogCategory_APCarPlayCarServicesInterface != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (IsAppleInternalBuild()) {
    uint64_t v5 = mach_absolute_time();
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = objc_alloc_init(getCARConnectionTimeStoreClass());
  if (v6)
  {
    uint64_t v7 = objc_msgSend((Class)getCARConnectionEventClass[0](), "eventWithName:type:date:payload:", a1, 3, objc_msgSend(MEMORY[0x1E4F1C9C8], "date"), a2);
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = __APCarPlay_AddSignPostTimeInfoToTimeStore_block_invoke;
    v11[3] = &unk_1E68950F8;
    v11[6] = a1;
    void v11[7] = v5;
    v11[4] = v4;
    v11[5] = v12;
    [v6 sendConnectionEvent:v7 completion:v11];
    if (gLogCategory_APCarPlayCarServicesInterface <= 30
      && (gLogCategory_APCarPlayCarServicesInterface != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    dispatch_time_t v8 = dispatch_time(0, 5000000000);
    if (dispatch_semaphore_wait(v4, v8))
    {
      if (gLogCategory_APCarPlayCarServicesInterface <= 90
        && (gLogCategory_APCarPlayCarServicesInterface != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      uint64_t v9 = 0xFFFFFFFFLL;
    }
    else
    {
      uint64_t v9 = 0;
    }
  }
  else
  {
    APSLogErrorAt();
    uint64_t v9 = 4294960568;
  }
  dispatch_release(v4);
  _Block_object_dispose(v12, 8);
  return v9;
}

void sub_1D0A61E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t APCarPlay_CRFetchInstrumentClusterURLs(CFTypeRef *a1)
{
  uint64_t v14 = 0;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x2020000000;
  int v17 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2020000000;
  uint64_t v13 = 0;
  uint64_t v2 = dispatch_semaphore_create(0);
  v9[0] = 0;
  v9[1] = v9;
  v9[2] = 0x2020000000;
  v9[3] = 0;
  if (gLogCategory_APCarPlayCarServicesInterface <= 30
    && (gLogCategory_APCarPlayCarServicesInterface != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (IsAppleInternalBuild()) {
    uint64_t v3 = mach_absolute_time();
  }
  else {
    uint64_t v3 = 0;
  }
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  _OWORD v8[2] = __APCarPlay_CRFetchInstrumentClusterURLs_block_invoke;
  void v8[3] = &unk_1E6895120;
  v8[5] = &v14;
  v8[6] = v9;
  v8[7] = &v10;
  void v8[8] = v3;
  v8[4] = v2;
  ((void (*)(uint64_t))softLinkCRFetchInstrumentClusterURLs[0])((uint64_t)v8);
  if (gLogCategory_APCarPlayCarServicesInterface <= 30
    && (gLogCategory_APCarPlayCarServicesInterface != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  dispatch_time_t v4 = dispatch_time(0, 5000000000);
  if (dispatch_semaphore_wait(v2, v4))
  {
    if (gLogCategory_APCarPlayCarServicesInterface <= 90
      && (gLogCategory_APCarPlayCarServicesInterface != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *((_DWORD *)v15 + 6) = -1;
  }
  uint64_t v5 = (const void *)v11[3];
  if (v5)
  {
    if (a1)
    {
      *a1 = CFRetain(v5);
      uint64_t v5 = (const void *)v11[3];
    }
    CFRelease(v5);
  }
  dispatch_release(v2);
  uint64_t v6 = *((unsigned int *)v15 + 6);
  _Block_object_dispose(v9, 8);
  _Block_object_dispose(&v10, 8);
  _Block_object_dispose(&v14, 8);
  return v6;
}

void sub_1D0A62268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t APCarPlay_CRFetchScaledDisplays(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v16 = 0;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x2020000000;
  int v19 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2020000000;
  uint64_t v15 = 0;
  dispatch_time_t v4 = dispatch_semaphore_create(0);
  v11[0] = 0;
  v11[1] = v11;
  v11[2] = 0x2020000000;
  v11[3] = 0;
  if (gLogCategory_APCarPlayCarServicesInterface <= 30
    && (gLogCategory_APCarPlayCarServicesInterface != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (IsAppleInternalBuild()) {
    uint64_t v5 = mach_absolute_time();
  }
  else {
    uint64_t v5 = 0;
  }
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __APCarPlay_CRFetchScaledDisplays_block_invoke;
  void v10[3] = &unk_1E6895120;
  v10[5] = &v16;
  v10[6] = v11;
  void v10[7] = &v12;
  void v10[8] = v5;
  v10[4] = v4;
  ((void (*)(uint64_t, uint64_t))softLinkCRFetchScaledDisplays[0])(a1, (uint64_t)v10);
  if (gLogCategory_APCarPlayCarServicesInterface <= 30
    && (gLogCategory_APCarPlayCarServicesInterface != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  dispatch_time_t v6 = dispatch_time(0, 5000000000);
  if (dispatch_semaphore_wait(v4, v6))
  {
    if (gLogCategory_APCarPlayCarServicesInterface <= 90
      && (gLogCategory_APCarPlayCarServicesInterface != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *((_DWORD *)v17 + 6) = -1;
  }
  uint64_t v7 = (const void *)v13[3];
  if (v7)
  {
    if (a2)
    {
      *a2 = CFRetain(v7);
      uint64_t v7 = (const void *)v13[3];
    }
    CFRelease(v7);
  }
  dispatch_release(v4);
  uint64_t v8 = *((unsigned int *)v17 + 6);
  _Block_object_dispose(v11, 8);
  _Block_object_dispose(&v12, 8);
  _Block_object_dispose(&v16, 8);
  return v8;
}

void sub_1D0A62708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t APCarPlay_FetchUIContextMasterURLList(CFTypeRef *a1)
{
  uint64_t v15 = 0;
  uint64_t v16 = &v15;
  uint64_t v17 = 0x2020000000;
  int v18 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2020000000;
  uint64_t v14 = 0;
  uint64_t v2 = dispatch_semaphore_create(0);
  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0x2020000000;
  void v10[3] = 0;
  id v3 = objc_alloc_init((Class)getCRSAppHistoryControllerClass[0]());
  if (v3)
  {
    if (gLogCategory_APCarPlayCarServicesInterface <= 30
      && (gLogCategory_APCarPlayCarServicesInterface != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (IsAppleInternalBuild()) {
      uint64_t v4 = mach_absolute_time();
    }
    else {
      uint64_t v4 = 0;
    }
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = __APCarPlay_FetchUIContextMasterURLList_block_invoke;
    v9[3] = &unk_1E6895120;
    void v9[5] = &v15;
    v9[6] = v10;
    void v9[7] = &v11;
    void v9[8] = v4;
    void v9[4] = v2;
    [v3 fetchUIContextsWithCompletion:v9];
    if (gLogCategory_APCarPlayCarServicesInterface <= 30
      && (gLogCategory_APCarPlayCarServicesInterface != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    dispatch_time_t v5 = dispatch_time(0, 5000000000);
    if (dispatch_semaphore_wait(v2, v5))
    {
      if (gLogCategory_APCarPlayCarServicesInterface <= 90
        && (gLogCategory_APCarPlayCarServicesInterface != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *((_DWORD *)v16 + 6) = -1;
    }
    dispatch_time_t v6 = (const void *)v12[3];
    if (v6)
    {
      if (a1)
      {
        *a1 = CFRetain(v6);
        dispatch_time_t v6 = (const void *)v12[3];
      }
      CFRelease(v6);
    }
    if (objc_opt_respondsToSelector()) {
      [v3 invalidate];
    }
  }
  else
  {
    APSLogErrorAt();
    *((_DWORD *)v16 + 6) = -6728;
  }
  dispatch_release(v2);
  uint64_t v7 = *((unsigned int *)v16 + 6);
  _Block_object_dispose(v10, 8);
  _Block_object_dispose(&v11, 8);
  _Block_object_dispose(&v15, 8);
  return v7;
}

void sub_1D0A62BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t APCarPlay_FetchSessionFeatureKeysWithIdentifier(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v18 = 0;
  int v19 = &v18;
  uint64_t v20 = 0x2020000000;
  int v21 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x2020000000;
  uint64_t v17 = 0;
  uint64_t v4 = dispatch_semaphore_create(0);
  v13[0] = 0;
  v13[1] = v13;
  v13[2] = 0x2020000000;
  v13[3] = 0;
  dispatch_time_t v5 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:a1];
  id v6 = objc_alloc_init((Class)getCRFeatureAvailabilityClass[0]());
  if (v6)
  {
    if (gLogCategory_APCarPlayCarServicesInterface <= 30
      && (gLogCategory_APCarPlayCarServicesInterface != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (IsAppleInternalBuild()) {
      uint64_t v7 = mach_absolute_time();
    }
    else {
      uint64_t v7 = 0;
    }
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    _OWORD v12[2] = __APCarPlay_FetchSessionFeatureKeysWithIdentifier_block_invoke;
    v12[3] = &unk_1E6895148;
    v12[8] = a1;
    v12[9] = v7;
    v12[6] = v13;
    v12[7] = &v14;
    void v12[4] = v4;
    void v12[5] = &v18;
    [v6 fetchSupportedAirPlayFeaturesForVehicleIdentifier:v5 completion:v12];
    if (gLogCategory_APCarPlayCarServicesInterface <= 30
      && (gLogCategory_APCarPlayCarServicesInterface != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    dispatch_time_t v8 = dispatch_time(0, 5000000000);
    if (dispatch_semaphore_wait(v4, v8))
    {
      if (gLogCategory_APCarPlayCarServicesInterface <= 90
        && (gLogCategory_APCarPlayCarServicesInterface != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *((_DWORD *)v19 + 6) = -1;
    }
    uint64_t v9 = (const void *)v15[3];
    if (v9)
    {
      if (a2)
      {
        *a2 = CFRetain(v9);
        uint64_t v9 = (const void *)v15[3];
      }
      CFRelease(v9);
    }
  }
  else
  {
    APSLogErrorAt();
    *((_DWORD *)v19 + 6) = -6728;
  }

  dispatch_release(v4);
  uint64_t v10 = *((unsigned int *)v19 + 6);
  _Block_object_dispose(v13, 8);
  _Block_object_dispose(&v14, 8);
  _Block_object_dispose(&v18, 8);
  return v10;
}

void sub_1D0A630E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t APCarPlayHasDeviceUnlockedSinceBoot()
{
  return softLinkMKBDeviceUnlockedSinceBoot[0]();
}

BOOL APCarPlayHasSpringboardStarted()
{
  int out_token = -1;
  notify_register_check(kAPCarPlaySpringBoardStartNotificationKey, &out_token);
  if (out_token == -1) {
    return 0;
  }
  uint64_t v2 = 0;
  notify_get_state(out_token, &v2);
  BOOL v0 = v2 != 0;
  notify_cancel(out_token);
  return v0;
}

uint64_t APCarPlayGetHeadUnitRestrictionsDictionary(void *a1)
{
  uint64_t v2 = dispatch_semaphore_create(0);
  dispatch_time_t v3 = dispatch_time(0, 3000000000);
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x2020000000;
  int v12 = 0;
  v8[0] = 0;
  v8[1] = v8;
  _OWORD v8[2] = 0x2020000000;
  void v8[3] = 0;
  *a1 = 0;
  dispatch_retain(v2);
  if (gLogCategory_APCarPlayCarServicesInterface <= 30
    && (gLogCategory_APCarPlayCarServicesInterface != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (IsAppleInternalBuild()) {
    uint64_t v4 = mach_absolute_time();
  }
  else {
    uint64_t v4 = 0;
  }
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __APCarPlayGetHeadUnitRestrictionsDictionary_block_invoke;
  void v7[3] = &unk_1E6895170;
  void v7[6] = v8;
  v7[7] = v4;
  void v7[8] = a1;
  void v7[4] = v2;
  v7[5] = &v9;
  ((void (*)(uint64_t))softLinkCRFetchCarPlayCapabilities[0])((uint64_t)v7);
  if (gLogCategory_APCarPlayCarServicesInterface <= 30
    && (gLogCategory_APCarPlayCarServicesInterface != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (dispatch_semaphore_wait(v2, v3))
  {
    if (gLogCategory_APCarPlayCarServicesInterface <= 60
      && (gLogCategory_APCarPlayCarServicesInterface != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *((_DWORD *)v10 + 6) = -6722;
  }
  dispatch_release(v2);
  uint64_t v5 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(v8, 8);
  _Block_object_dispose(&v9, 8);
  return v5;
}

void sub_1D0A635C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

void __APCarPlayGetHeadUnitRestrictionsDictionary_block_invoke(uint64_t a1, const void *a2, void *a3)
{
  if (a3)
  {
    if (gLogCategory_APCarPlayCarServicesInterface <= 90
      && (gLogCategory_APCarPlayCarServicesInterface != -1 || _LogCategory_Initialize()))
    {
      [a3 debugDescription];
      LogPrintF();
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = -71148;
  }
  else if (IsAppleInternalBuild())
  {
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = mach_absolute_time();
    if (gLogCategory_APCarPlayCarServicesInterface <= 50
      && (gLogCategory_APCarPlayCarServicesInterface != -1 || _LogCategory_Initialize()))
    {
      UpTicksToMilliseconds();
      LogPrintF();
    }
  }
  if (a2) {
    CFTypeRef v6 = CFRetain(a2);
  }
  else {
    CFTypeRef v6 = 0;
  }
  **(void **)(a1 + 64) = v6;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
  uint64_t v7 = *(NSObject **)(a1 + 32);
  dispatch_release(v7);
}

uint64_t APCarPlay_AddAnalyticsValues(const void *a1, const __CFString *a2)
{
  uint64_t v16 = 0;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x2020000000;
  int v19 = 0;
  uint64_t v4 = dispatch_semaphore_create(0);
  v15[0] = 0;
  v15[1] = v15;
  v15[2] = 0x2020000000;
  void v15[3] = 0;
  id v5 = objc_alloc_init((Class)getCRSAppHistoryControllerClass[0]());
  if (!v5)
  {
    APSLogErrorAt();
    int v11 = -6728;
LABEL_31:
    *((_DWORD *)v17 + 6) = v11;
    goto LABEL_28;
  }
  if (CFEqual(a2, @"SessionStarted"))
  {
    uint64_t v6 = 0;
    goto LABEL_6;
  }
  if (CFStringCompare(a2, @"SessionEnded", 0))
  {
    APSLogErrorAt();
    int v11 = -6735;
    goto LABEL_31;
  }
  uint64_t v6 = 1;
LABEL_6:
  if (gLogCategory_APCarPlayCarServicesInterface <= 30
    && (gLogCategory_APCarPlayCarServicesInterface != -1 || _LogCategory_Initialize()))
  {
    CFStringRef v12 = a2;
    uint64_t v13 = a1;
    LogPrintF();
  }
  if (!IsAppleInternalBuild())
  {
    uint64_t v7 = 0;
    if (!a1) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  uint64_t v7 = mach_absolute_time();
  if (a1) {
LABEL_14:
  }
    CFRetain(a1);
LABEL_15:
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = __APCarPlay_AddAnalyticsValues_block_invoke;
  v14[3] = &unk_1E6895198;
  v14[6] = v15;
  v14[7] = a2;
  void v14[8] = a1;
  v14[9] = v7;
  v14[4] = v4;
  v14[5] = &v16;
  objc_msgSend(v5, "addAnalyticsValues:toEvent:completion:", a1, v6, v14, v12, v13);
  if (gLogCategory_APCarPlayCarServicesInterface <= 30
    && (gLogCategory_APCarPlayCarServicesInterface != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  dispatch_time_t v8 = dispatch_time(0, 5000000000);
  if (dispatch_semaphore_wait(v4, v8))
  {
    if (gLogCategory_APCarPlayCarServicesInterface <= 90
      && (gLogCategory_APCarPlayCarServicesInterface != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *((_DWORD *)v17 + 6) = -6722;
  }
  if (objc_opt_respondsToSelector()) {
    [v5 invalidate];
  }

LABEL_28:
  dispatch_release(v4);
  uint64_t v9 = *((unsigned int *)v17 + 6);
  _Block_object_dispose(v15, 8);
  _Block_object_dispose(&v16, 8);
  return v9;
}

void sub_1D0A63A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

Class initCARConnectionTimeStore()
{
  if (CarKitLibrary_sOnce_0 != -1) {
    dispatch_once(&CarKitLibrary_sOnce_0, &__block_literal_global_28);
  }
  Class result = objc_getClass("CARConnectionTimeStore");
  classCARConnectionTimeStore = (uint64_t)result;
  getCARConnectionTimeStoreClass = CARConnectionTimeStoreFunction;
  return result;
}

uint64_t CARConnectionTimeStoreFunction()
{
  return classCARConnectionTimeStore;
}

void *__CarKitLibrary_block_invoke_0()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/CarKit.framework/CarKit", 2);
  CarKitLibrary_sLib_0 = (uint64_t)result;
  return result;
}

Class initCARConnectionEvent()
{
  if (CarKitLibrary_sOnce_0 != -1) {
    dispatch_once(&CarKitLibrary_sOnce_0, &__block_literal_global_28);
  }
  Class result = objc_getClass("CARConnectionEvent");
  classCARConnectionEvent = (uint64_t)result;
  getCARConnectionEventClass[0] = CARConnectionEventFunction;
  return result;
}

uint64_t CARConnectionEventFunction()
{
  return classCARConnectionEvent;
}

uint64_t initCRFetchInstrumentClusterURLs(uint64_t a1)
{
  if (CarKitLibrary_sOnce_0 != -1) {
    dispatch_once(&CarKitLibrary_sOnce_0, &__block_literal_global_28);
  }
  uint64_t v2 = (uint64_t (*)())dlsym((void *)CarKitLibrary_sLib_0, "CRFetchInstrumentClusterURLs");
  softLinkCRFetchInstrumentClusterURLs[0] = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

uint64_t initCRFetchScaledDisplays(uint64_t a1, uint64_t a2)
{
  if (CarKitLibrary_sOnce_0 != -1) {
    dispatch_once(&CarKitLibrary_sOnce_0, &__block_literal_global_28);
  }
  uint64_t v4 = (uint64_t (*)())dlsym((void *)CarKitLibrary_sLib_0, "CRFetchScaledDisplays");
  softLinkCRFetchScaledDisplays[0] = v4;
  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

Class initCRSAppHistoryController()
{
  if (CarPlayServicesLibrary_sOnce_0 != -1) {
    dispatch_once(&CarPlayServicesLibrary_sOnce_0, &__block_literal_global_59);
  }
  Class result = objc_getClass("CRSAppHistoryController");
  classCRSAppHistoryController = (uint64_t)result;
  getCRSAppHistoryControllerClass[0] = CRSAppHistoryControllerFunction;
  return result;
}

uint64_t CRSAppHistoryControllerFunction()
{
  return classCRSAppHistoryController;
}

void *__CarPlayServicesLibrary_block_invoke_0()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/CarPlayServices.framework/CarPlayServices", 2);
  CarPlayServicesLibrary_sLib_0 = (uint64_t)result;
  return result;
}

Class initCRFeatureAvailability()
{
  if (CarKitLibrary_sOnce_0 != -1) {
    dispatch_once(&CarKitLibrary_sOnce_0, &__block_literal_global_28);
  }
  Class result = objc_getClass("CRFeatureAvailability");
  classCRFeatureAvailability = (uint64_t)result;
  getCRFeatureAvailabilityClass[0] = CRFeatureAvailabilityFunction;
  return result;
}

uint64_t CRFeatureAvailabilityFunction()
{
  return classCRFeatureAvailability;
}

uint64_t initMKBDeviceUnlockedSinceBoot()
{
  if (MobileKeyBagLibrary_sOnce != -1) {
    dispatch_once(&MobileKeyBagLibrary_sOnce, &__block_literal_global_64);
  }
  BOOL v0 = (uint64_t (*)())dlsym((void *)MobileKeyBagLibrary_sLib, "MKBDeviceUnlockedSinceBoot");
  softLinkMKBDeviceUnlockedSinceBoot[0] = v0;
  return v0();
}

void *__MobileKeyBagLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/MobileKeyBag.framework/MobileKeyBag", 2);
  MobileKeyBagLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t initCRFetchCarPlayCapabilities(uint64_t a1)
{
  if (CarKitLibrary_sOnce_0 != -1) {
    dispatch_once(&CarKitLibrary_sOnce_0, &__block_literal_global_28);
  }
  uint64_t v2 = (uint64_t (*)())dlsym((void *)CarKitLibrary_sLib_0, "CRFetchCarPlayCapabilities");
  softLinkCRFetchCarPlayCapabilities[0] = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

uint64_t APCarPlayInitiateJarvisProcessing(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, void))
{
  CFTypeRef v14 = 0;
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, void, void, CFTypeRef *))(v8 + 48);
  if (!v9)
  {
    uint64_t v11 = 4294954514;
LABEL_10:
    APSLogErrorAt();
    a3(a1, 0);
    return v11;
  }
  uint64_t v10 = v9(CMBaseObject, *MEMORY[0x1E4F20E38], *MEMORY[0x1E4F1CF80], &v14);
  if (v10)
  {
    uint64_t v11 = v10;
    goto LABEL_10;
  }
  if (gLogCategory_APCarPlaySiriInterface <= 50
    && (gLogCategory_APCarPlaySiriInterface != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = __APCarPlayInitiateJarvisProcessing_block_invoke;
  v13[3] = &__block_descriptor_56_e20_v20__0B8__NSError_12l;
  void v13[4] = a2;
  v13[5] = a3;
  v13[6] = a1;
  softLinkAFSiriActivationCarPlayDeviceVoice(a2, (uint64_t)v14, 0, (uint64_t)v13);
  if (v14) {
    CFRelease(v14);
  }
  return 0;
}

uint64_t __APCarPlayInitiateJarvisProcessing_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  if (gLogCategory_APCarPlaySiriInterface <= 50
    && (gLogCategory_APCarPlaySiriInterface != -1 || _LogCategory_Initialize()))
  {
    [a3 domain];
    [a3 code];
    LogPrintF();
  }
  kdebug_trace();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  return v7(v6, a2);
}

uint64_t APCarPlayIsSiriSwitchOn()
{
  return objc_msgSend((id)objc_msgSend((Class)getVTPreferencesClass[0](), "sharedPreferences"), "voiceTriggerEnabled");
}

uint64_t APCarPlayGetJarvisLanguageFromList(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v16 = 0;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x2020000000;
  int v19 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2020000000;
  uint64_t v15 = 0;
  uint64_t v6 = dispatch_semaphore_create(0);
  dispatch_retain(v6);
  Class v7 = (Class)getCSCoreSpeechServicesClass[0]();
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = __APCarPlayGetJarvisLanguageFromList_block_invoke;
  v11[3] = &unk_1E68951E0;
  v11[5] = &v16;
  v11[6] = &v12;
  void v11[4] = v6;
  [(objc_class *)v7 voiceTriggerJarvisLanguageList:a1 jarvisSelectedLanguage:a2 completion:v11];
  dispatch_time_t v8 = dispatch_time(0, 5000000000);
  dispatch_semaphore_wait(v6, v8);
  if (v6) {
    dispatch_release(v6);
  }
  *a3 = v13[3];
  uint64_t v9 = *((unsigned int *)v17 + 6);
  _Block_object_dispose(&v12, 8);
  _Block_object_dispose(&v16, 8);
  return v9;
}

void sub_1D0A64494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void __APCarPlayGetJarvisLanguageFromList_block_invoke(uint64_t a1, const void *a2, void *a3)
{
  if ([a3 code])
  {
    if (gLogCategory_APCarPlaySiriInterface <= 90
      && (gLogCategory_APCarPlaySiriInterface != -1 || _LogCategory_Initialize()))
    {
      uint64_t v8 = [a3 localizedDescription];
      LogPrintF();
      *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = objc_msgSend(a3, "code", v8);
    }
    else
    {
      *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = objc_msgSend(a3, "code", v7);
    }
  }
  else if (a2)
  {
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = CFRetain(a2);
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
  uint64_t v6 = *(NSObject **)(a1 + 32);
  if (v6)
  {
    dispatch_release(v6);
  }
}

uint64_t initAFSiriActivationCarPlayDeviceVoice(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (AssistantServicesLibrary_sOnce != -1) {
    dispatch_once(&AssistantServicesLibrary_sOnce, &__block_literal_global_29);
  }
  uint64_t v8 = (uint64_t (*)())dlsym((void *)AssistantServicesLibrary_sLib, "AFSiriActivationCarPlayDeviceVoice");
  softLinkAFSiriActivationCarPlayDeviceVoice = v8;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v8)(a1, a2, a3, a4);
}

void *__AssistantServicesLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices", 2);
  AssistantServicesLibrary_sLib = (uint64_t)result;
  return result;
}

Class initVTPreferences()
{
  if (VoiceTriggerLibrary_sOnce != -1) {
    dispatch_once(&VoiceTriggerLibrary_sOnce, &__block_literal_global_14);
  }
  Class result = objc_getClass("VTPreferences");
  classVTPreferences = (uint64_t)result;
  getVTPreferencesClass[0] = VTPreferencesFunction;
  return result;
}

uint64_t VTPreferencesFunction()
{
  return classVTPreferences;
}

void *__VoiceTriggerLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/VoiceTrigger.framework/VoiceTrigger", 2);
  VoiceTriggerLibrary_sLib = (uint64_t)result;
  return result;
}

Class initCSCoreSpeechServices()
{
  if (CoreSpeechLibrary_sOnce != -1) {
    dispatch_once(&CoreSpeechLibrary_sOnce, &__block_literal_global_18);
  }
  Class result = objc_getClass("CSCoreSpeechServices");
  classCSCoreSpeechServices = (uint64_t)result;
  getCSCoreSpeechServicesClass[0] = CSCoreSpeechServicesFunction;
  return result;
}

uint64_t CSCoreSpeechServicesFunction()
{
  return classCSCoreSpeechServices;
}

void *__CoreSpeechLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/CoreSpeech.framework/CoreSpeech", 2);
  CoreSpeechLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t APManagedConfigurationShouldForcePairSetup()
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F74230], "sharedConnection"), "isAirPlayOutgoingRequestsPairingPasswordRequired");
}

uint64_t metadataSender_getTypeID(uint64_t *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

uint64_t APMetadataSenderCreate(uint64_t a1, const void *a2, int a3, NSObject *a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  if (a3 && a4 && a5)
  {
    if (APMetadataSenderGetTypeID_sInitOnce != -1) {
      dispatch_once_f(&APMetadataSenderGetTypeID_sInitOnce, &APMetadataSenderGetTypeID_sTypeID, (dispatch_function_t)metadataSender_getTypeID);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      uint64_t v17 = Instance;
      *(_OWORD *)(Instance + 96) = 0u;
      *(_OWORD *)(Instance + 112) = 0u;
      *(_OWORD *)(Instance + 64) = 0u;
      *(_OWORD *)(Instance + 80) = 0u;
      *(_OWORD *)(Instance + 32) = 0u;
      *(_OWORD *)(Instance + 48) = 0u;
      *(_OWORD *)(Instance + 16) = 0u;
      *(void *)(Instance + 24) = a4;
      dispatch_retain(a4);
      *(_DWORD *)(v17 + 20) = a3;
      *(void *)(v17 + 32) = CFRetain(a5);
      *(void *)(v17 + 48) = CFRetain(a2);
      *(void *)(v17 + 56) = a6;
      *(void *)(v17 + 64) = a7;
      *(void *)(v17 + 72) = a8;
      CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      int v19 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
      uint64_t v20 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
      *(void *)(v17 + 80) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      *(void *)(v17 + 96) = CFDictionaryCreateMutable(v18, 0, v19, v20);
      *(void *)(v17 + 112) = CFDictionaryCreateMutable(v18, 0, v19, v20);
      *(void *)(v17 + 40) = APMetadataSourceAddEventCallback(*(void *)(v17 + 32), v17, (uint64_t)metadataSender_handleMetadataEvent);
      if (gLogCategory_APMetadataSender <= 50
        && (gLogCategory_APMetadataSender != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      uint64_t result = 0;
      *a9 = v17;
    }
    else
    {
      APSLogErrorAt();
      return 4294960568;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
  return result;
}

void metadataSender_handleMetadataEvent(int a1, unsigned char *cf, int a3, CFTypeRef a4, const void *a5, char a6)
{
  if (!a4 || cf[16]) {
    return;
  }
  if (a3 <= 1836217186)
  {
    if (a3 != 1634890784)
    {
      if (a3 != 1836215907 && a3 != 1836216435) {
        return;
      }
      goto LABEL_16;
    }
    long long block = cf;
    uint64_t v19 = (uint64_t)a4;
    CFTypeRef v20 = a5;
    int v15 = *((_DWORD *)cf + 5);
    if ((v15 & 2) != 0)
    {
      if ((v15 & 0x40) == 0) {
        goto LABEL_40;
      }
      if (gLogCategory_APMetadataSender > 30
        || gLogCategory_APMetadataSender == -1 && !_LogCategory_Initialize())
      {
        return;
      }
    }
    else if (gLogCategory_APMetadataSender > 30 {
           || gLogCategory_APMetadataSender == -1 && !_LogCategory_Initialize())
    }
    {
      return;
    }
    goto LABEL_51;
  }
  if (a3 > 1886547814)
  {
    if (a3 == 1886547815)
    {
      long long block = cf;
      uint64_t v19 = (uint64_t)a4;
      CFTypeRef v20 = a5;
      if ((cf[20] & 4) != 0)
      {
        CFDictionaryGetDouble();
        if (v16 == 0.0) {
          return;
        }
        CFRetain(cf);
        CFRetain(a4);
        CFRetain(a5);
        goto LABEL_55;
      }
      if (gLogCategory_APMetadataSender > 30
        || gLogCategory_APMetadataSender == -1 && !_LogCategory_Initialize())
      {
        return;
      }
    }
    else
    {
      if (a3 != 1952807028) {
        return;
      }
      long long block = cf;
      uint64_t v19 = (uint64_t)a4;
      CFTypeRef v20 = a5;
      int v14 = *((_DWORD *)cf + 5);
      if ((v14 & 1) == 0)
      {
        if (gLogCategory_APMetadataSender > 30
          || gLogCategory_APMetadataSender == -1 && !_LogCategory_Initialize())
        {
          return;
        }
        goto LABEL_51;
      }
      if ((v14 & 0x20) == 0)
      {
LABEL_40:
        CFRetain(cf);
        CFRetain(a4);
        CFRetain(a5);
        goto LABEL_55;
      }
      if (gLogCategory_APMetadataSender > 30
        || gLogCategory_APMetadataSender == -1 && !_LogCategory_Initialize())
      {
        return;
      }
    }
LABEL_51:
    LogPrintF();
    return;
  }
  if (a3 == 1836217187)
  {
LABEL_16:
    if (a3 == 1836215907)
    {
      uint64_t v11 = @"mrNowPlayingClient";
      int v12 = 512;
      uint64_t v13 = @"updateMRNowPlayingClient";
    }
    else if (a3 == 1836217187)
    {
      uint64_t v11 = @"mrSupportedCommandsFromSender";
      int v12 = 128;
      uint64_t v13 = @"updateMRSupportedCommands";
    }
    else
    {
      uint64_t v11 = @"mrPlaybackState";
      int v12 = 256;
      uint64_t v13 = @"updateMRPlaybackState";
    }
    if ((*((_DWORD *)cf + 5) & v12) == 0)
    {
      if (gLogCategory_APMetadataSender > 30
        || gLogCategory_APMetadataSender == -1 && !_LogCategory_Initialize())
      {
        return;
      }
      goto LABEL_51;
    }
    long long block = CFRetain(cf);
    uint64_t v19 = (uint64_t)CFRetain(a4);
    CFTypeRef v20 = CFRetain(v13);
    CFTypeRef v21 = CFRetain(v11);
LABEL_55:
    APSDispatchAsyncFHelper();
    return;
  }
  if (a3 == 1852860704)
  {
    CFTypeID v10 = CFGetTypeID(a4);
    if (v10 == CFDictionaryGetTypeID())
    {
      if (!cf[16])
      {
        if ((cf[20] & 0x20) != 0)
        {
          CFRetain(cf);
          CFRetain(a4);
          CFRetain(a5);
          uint64_t v17 = *((void *)cf + 3);
          long long block = (unsigned char *)MEMORY[0x1E4F143A8];
          uint64_t v19 = 0x40000000;
          CFTypeRef v20 = __metadataSender_handleMRNowPlayingInfoChanged_block_invoke;
          CFTypeRef v21 = &__block_descriptor_tmp_30;
          uint64_t v22 = cf;
          CFTypeRef v23 = a4;
          uint64_t v24 = a5;
          char v25 = a6;
          dispatch_async(v17, &block);
          return;
        }
        if (gLogCategory_APMetadataSender <= 30
          && (gLogCategory_APMetadataSender != -1 || _LogCategory_Initialize()))
        {
          goto LABEL_51;
        }
      }
    }
    else
    {
      APSLogErrorAt();
    }
  }
}

void APMetadataSenderInvalidate(uint64_t a1)
{
  if (a1)
  {
    if (!*(unsigned char *)(a1 + 16)) {
      metadataSender_invalidateInternal(a1);
    }
  }
}

void metadataSender_invalidateInternal(uint64_t a1)
{
  if (a1)
  {
    if (!*(unsigned char *)(a1 + 16))
    {
      *(unsigned char *)(a1 + 16) = 1;
      APMetadataSourceRemoveEventCallback(*(void *)(a1 + 32), *(void *)(a1 + 40));
      dispatch_time_t v3 = *(const void **)(a1 + 32);
      if (v3)
      {
        CFRelease(v3);
        *(void *)(a1 + 32) = 0;
      }
      uint64_t v4 = *(const void **)(a1 + 48);
      if (v4)
      {
        CFRelease(v4);
        *(void *)(a1 + 48) = 0;
      }
      id v5 = *(const void **)(a1 + 80);
      if (v5)
      {
        CFRelease(v5);
        *(void *)(a1 + 80) = 0;
      }
      uint64_t v6 = *(const void **)(a1 + 96);
      if (v6)
      {
        CFRelease(v6);
        *(void *)(a1 + 96) = 0;
      }
      uint64_t v7 = *(const void **)(a1 + 112);
      if (v7)
      {
        CFRelease(v7);
        *(void *)(a1 + 112) = 0;
      }
    }
  }
  else
  {
    APSLogErrorAt();
  }
}

void APMetadataSenderSendInitialMetadata(void *a1)
{
  CFRetain(a1);
  uint64_t v2 = a1[3];
  dispatch_async_f(v2, a1, (dispatch_function_t)metadataSender_sendInitialMetadataInternal);
}

void metadataSender_sendInitialMetadataInternal(void *cf)
{
  CFTypeRef v7 = 0;
  CFTypeRef v8 = 0;
  CFTypeRef cfa = 0;
  CFTypeRef v6 = 0;
  if (!*((unsigned char *)cf + 16))
  {
    metadataSender_cloneMetadataDictionary(cf[10], cf[4], @"APNowPlayingInfoArtwork");
    BOOL v2 = *((unsigned char *)cf + 88) || CFDictionaryGetCount((CFDictionaryRef)cf[10]) > 0;
    *((unsigned char *)cf + 88) = v2;
    metadataSender_processPendingAPArtworkMetadataChanges((uint64_t)cf);
    metadataSender_cloneMetadataDictionary(cf[12], cf[4], @"APNowPlayingInfoProgress");
    BOOL v3 = *((unsigned char *)cf + 104) || CFDictionaryGetCount((CFDictionaryRef)cf[12]) > 0;
    *((unsigned char *)cf + 104) = v3;
    metadataSender_processPendingAPProgressMetadataChanges((uint64_t)cf);
    metadataSender_cloneMetadataDictionary(cf[14], cf[4], @"APNowPlayingInfoText");
    BOOL v4 = *((unsigned char *)cf + 120) || CFDictionaryGetCount((CFDictionaryRef)cf[14]) > 0;
    *((unsigned char *)cf + 120) = v4;
    metadataSender_processPendingAPTextMetadataChanges((uint64_t)cf);
    APMetadataSourceCopyMetadata(cf[4], @"MRNowPlayingInfo", &cfa);
    metadataSender_sendMRNowPlayingInfo((uint64_t)cf, cfa, @"replace", 0);
    APMetadataSourceCopyMetadata(cf[4], @"MRSupportedCommands", &v8);
    APMetadataSourceCopyMetadata(cf[4], @"MRPlaybackState", &v7);
    APMetadataSourceCopyMetadata(cf[4], @"MRNowPlayingClient", &v6);
    metadataSender_sendMRExtendedMetadata((uint64_t)cf, v8, 128, @"updateMRSupportedCommands", @"mrSupportedCommandsFromSender");
    metadataSender_sendMRExtendedMetadata((uint64_t)cf, v7, 256, @"updateMRPlaybackState", @"mrPlaybackState");
    metadataSender_sendMRExtendedMetadata((uint64_t)cf, v6, 512, @"updateMRNowPlayingClient", @"mrNowPlayingClient");
    if (cfa) {
      CFRelease(cfa);
    }
  }
  if (v8) {
    CFRelease(v8);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v6) {
    CFRelease(v6);
  }
  CFRelease(cf);
}

void metadataSender_Finalize(uint64_t a1)
{
  if (gLogCategory_APMetadataSender <= 30
    && (gLogCategory_APMetadataSender != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  metadataSender_invalidateInternal(a1);
  BOOL v2 = *(NSObject **)(a1 + 24);
  if (v2)
  {
    dispatch_release(v2);
    *(void *)(a1 + 24) = 0;
  }
}

void metadataSender_cloneMetadataDictionary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFDictionaryRef theDict = 0;
  int v4 = APMetadataSourceCopyMetadata(a2, a3, &theDict);
  CFDictionaryRef v5 = theDict;
  if (!v4)
  {
    context[0] = 0;
    context[1] = a1;
    if (theDict)
    {
      CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)metadataSender_appendDictionaryKeyAndValue, context);
      CFDictionaryRef v5 = theDict;
    }
  }
  if (v5) {
    CFRelease(v5);
  }
}

void metadataSender_processPendingAPArtworkMetadataChanges(uint64_t a1)
{
  CFTypeRef cf = 0;
  if (*(unsigned char *)(a1 + 16)) {
    return;
  }
  if (!(*(unsigned int (**)(void))(a1 + 64))(*(void *)(a1 + 56)))
  {
    if (gLogCategory_APMetadataSender > 30
      || gLogCategory_APMetadataSender == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_78;
    }
LABEL_16:
    LogPrintF();
LABEL_78:
    if (cf) {
      CFRelease(cf);
    }
    return;
  }
  int v2 = *(_DWORD *)(a1 + 20);
  if ((v2 & 2) == 0)
  {
    if (gLogCategory_APMetadataSender > 30
      || gLogCategory_APMetadataSender == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_78;
    }
    goto LABEL_16;
  }
  if ((v2 & 0x40) != 0)
  {
    if (gLogCategory_APMetadataSender > 30
      || gLogCategory_APMetadataSender == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_78;
    }
    goto LABEL_16;
  }
  if (!*(unsigned char *)(a1 + 88)) {
    goto LABEL_78;
  }
  uint64_t CMBaseObject = APSenderSessionGetCMBaseObject(*(void *)(a1 + 48));
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  CFTypeRef v6 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v5 + 48);
  if (v6)
  {
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    v6(CMBaseObject, @"TransportControlStream", *MEMORY[0x1E4F1CF80], &cf);
    if (cf)
    {
      CFDictionaryRef v8 = *(const __CFDictionary **)(a1 + 80);
      *(void *)(a1 + 80) = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      *(unsigned char *)(a1 + 88) = 0;
      (*(void (**)(CMBlockBufferRef *__return_ptr, void))(a1 + 72))(&targetBBuf, *(void *)(a1 + 56));
      if ((v28 & 1) == 0)
      {
        if (gLogCategory_APMetadataSender <= 90
          && (gLogCategory_APMetadataSender != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        goto LABEL_76;
      }
      int v9 = (int)targetBBuf;
      CFTypeRef v10 = cf;
      int v11 = *(_DWORD *)(a1 + 20);
      CMBlockBufferRef targetBBuf = 0;
      CMBlockBufferRef theBuffer = 0;
      int v30 = v9;
      uint64_t Value = (__CFString *)CFDictionaryGetValue(v8, @"artworkMIMEType");
      if (Value) {
        uint64_t v13 = Value;
      }
      else {
        uint64_t v13 = @"image/none";
      }
      if (CFEqual(v13, @"image/jpeg"))
      {
        uint64_t v14 = 1785750887;
      }
      else
      {
        if (!CFEqual(v13, @"image/png"))
        {
          if (!CFEqual(v13, @"image/none"))
          {
            if (gLogCategory_APMetadataSender <= 90
              && (gLogCategory_APMetadataSender != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            int v26 = 0;
            goto LABEL_70;
          }
          int BlockBufferCopyingMemoryBlock = FigCreateBlockBufferCopyingMemoryBlock();
          if (!BlockBufferCopyingMemoryBlock)
          {
            ScaledImageDataWithCFDataRef Data = 0;
            uint64_t v14 = 1852796517;
            goto LABEL_53;
          }
LABEL_86:
          int v26 = BlockBufferCopyingMemoryBlock;
          APSLogErrorAt();
          goto LABEL_70;
        }
        uint64_t v14 = 1886283552;
      }
      int BlockBufferCopyingMemoryBlock = FigCreateBlockBufferCopyingMemoryBlock();
      if (!BlockBufferCopyingMemoryBlock)
      {
        CFDataRef v16 = (const __CFData *)CFDictionaryGetValue(v8, @"artworkData");
        if (v16 && (CFDataRef v17 = v16, CFDataGetLength(v16) >= 1))
        {
          if ((v11 & 0x10) != 0) {
            goto LABEL_50;
          }
          if (gLogCategory_APMetadataSender <= 30
            && (gLogCategory_APMetadataSender != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          ScaledImageDataWithCFDataRef Data = (const __CFData *)CreateScaledImageDataWithData();
          if (!ScaledImageDataWithData) {
LABEL_50:
          }
            ScaledImageDataWithCFDataRef Data = (const __CFData *)CFRetain(v17);
          int BlockBufferWithCFDataNoCopy = FigCreateBlockBufferWithCFDataNoCopy();
          if (BlockBufferWithCFDataNoCopy)
          {
            int v26 = BlockBufferWithCFDataNoCopy;
            goto LABEL_63;
          }
          OSStatus appended = CMBlockBufferAppendBufferReference(theBuffer, targetBBuf, 0, 0, 0);
          if (appended)
          {
            int v26 = appended;
            goto LABEL_63;
          }
        }
        else
        {
          ScaledImageDataWithCFDataRef Data = 0;
        }
LABEL_53:
        CMBlockBufferRef v21 = theBuffer;
        uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v22) {
          uint64_t v23 = v22;
        }
        else {
          uint64_t v23 = 0;
        }
        uint64_t v24 = *(uint64_t (**)(CFTypeRef, uint64_t, CMBlockBufferRef, void))(v23 + 56);
        if (v24)
        {
          int v25 = v24(v10, v14, v21, 0);
          if (!v25)
          {
            if (gLogCategory_APMetadataSender <= 50
              && (gLogCategory_APMetadataSender != -1 || _LogCategory_Initialize()))
            {
              if (ScaledImageDataWithData) {
                CFDataGetLength(ScaledImageDataWithData);
              }
              LogPrintF();
            }
            int v26 = 0;
            if (!ScaledImageDataWithData) {
              goto LABEL_70;
            }
LABEL_69:
            CFRelease(ScaledImageDataWithData);
LABEL_70:
            if (targetBBuf) {
              CFRelease(targetBBuf);
            }
            if (theBuffer) {
              CFRelease(theBuffer);
            }
            if (v26) {
              APSLogErrorAt();
            }
LABEL_76:
            if (v8) {
              CFRelease(v8);
            }
            goto LABEL_78;
          }
          int v26 = v25;
        }
        else
        {
          int v26 = -12782;
        }
LABEL_63:
        APSLogErrorAt();
        if (!ScaledImageDataWithData) {
          goto LABEL_70;
        }
        goto LABEL_69;
      }
      goto LABEL_86;
    }
  }
}

void metadataSender_processPendingAPProgressMetadataChanges(uint64_t a1)
{
  CFTypeRef cf = 0;
  if (!*(unsigned char *)(a1 + 16))
  {
    if (!(*(unsigned int (**)(void))(a1 + 64))(*(void *)(a1 + 56)))
    {
      if (gLogCategory_APMetadataSender > 30
        || gLogCategory_APMetadataSender == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_46;
      }
LABEL_9:
      LogPrintF();
      goto LABEL_46;
    }
    if ((*(unsigned char *)(a1 + 20) & 4) == 0)
    {
      if (gLogCategory_APMetadataSender > 30
        || gLogCategory_APMetadataSender == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_46;
      }
      goto LABEL_9;
    }
    if (!*(unsigned char *)(a1 + 104))
    {
LABEL_46:
      if (cf) {
        CFRelease(cf);
      }
      return;
    }
    uint64_t CMBaseObject = APSenderSessionGetCMBaseObject(*(void *)(a1 + 48));
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v4 = v3 ? v3 : 0;
    uint64_t v5 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v4 + 48);
    if (v5)
    {
      CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      v5(CMBaseObject, @"TransportControlStream", *MEMORY[0x1E4F1CF80], &cf);
      if (cf)
      {
        CFAllocatorRef v7 = *(const void **)(a1 + 96);
        *(void *)(a1 + 96) = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        *(unsigned char *)(a1 + 104) = 0;
        (*(void (**)(CMBlockBufferRef *__return_ptr, void))(a1 + 72))(&targetBBuf, *(void *)(a1 + 56));
        if ((v26 & 1) == 0)
        {
          if (gLogCategory_APMetadataSender <= 90
            && (gLogCategory_APMetadataSender != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          goto LABEL_44;
        }
        CMBlockBufferRef v8 = targetBBuf;
        int v9 = v25;
        CFTypeRef v10 = cf;
        int v29 = (int)targetBBuf;
        int BlockBufferWithCFString = 0;
        CMBlockBufferRef targetBBuf = 0;
        CMBlockBufferRef theBuffer = 0;
        CFDictionaryGetDouble();
        if (BlockBufferWithCFString
          || (double v12 = v11, CFDictionaryGetDouble(), BlockBufferWithCFString)
          || (double v14 = v13, CFDictionaryGetDouble(), BlockBufferWithCFString))
        {
          APSLogErrorAt();
        }
        else
        {
          double v16 = v15;
          double Current = CFAbsoluteTimeGetCurrent();
          uint64_t Mutable = CFStringCreateMutable(v6, 0);
          if (Mutable)
          {
            uint64_t v19 = Mutable;
            CFStringAppendFormat(Mutable, 0, @"progress: %u/%u/%u\n", (v8 - (int)((v14 + Current - v16) * (double)v9)), v8, (v8 - (int)((v14 + Current - v16) * (double)v9) + (int)(v12 * (double)v9)));
            int BlockBufferWithCFString = FigCreateBlockBufferWithCFString();
            if (!BlockBufferWithCFString)
            {
              int BlockBufferWithCFString = FigCreateBlockBufferCopyingMemoryBlock();
              if (!BlockBufferWithCFString)
              {
                int BlockBufferWithCFString = CMBlockBufferAppendBufferReference(theBuffer, targetBBuf, 0, 0, 0);
                if (!BlockBufferWithCFString)
                {
                  CMBlockBufferRef v20 = theBuffer;
                  uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
                  if (v21) {
                    uint64_t v22 = v21;
                  }
                  else {
                    uint64_t v22 = 0;
                  }
                  uint64_t v23 = *(uint64_t (**)(CFTypeRef, uint64_t, CMBlockBufferRef, void))(v22 + 56);
                  if (v23)
                  {
                    int BlockBufferWithCFString = v23(v10, 1886547815, v20, 0);
                    if (!BlockBufferWithCFString)
                    {
                      if (gLogCategory_APMetadataSender <= 40
                        && (gLogCategory_APMetadataSender != -1 || _LogCategory_Initialize()))
                      {
                        CMBlockBufferGetDataLength(targetBBuf);
                        LogPrintF();
                      }
                      goto LABEL_38;
                    }
                  }
                  else
                  {
                    int BlockBufferWithCFString = -12782;
                  }
                }
              }
            }
            APSLogErrorAt();
LABEL_38:
            CFRelease(v19);
            if (targetBBuf) {
              CFRelease(targetBBuf);
            }
            goto LABEL_40;
          }
          APSLogErrorAt();
          int BlockBufferWithCFString = -6728;
        }
LABEL_40:
        if (theBuffer) {
          CFRelease(theBuffer);
        }
        if (BlockBufferWithCFString) {
          APSLogErrorAt();
        }
LABEL_44:
        if (v7) {
          CFRelease(v7);
        }
        goto LABEL_46;
      }
    }
  }
}

void metadataSender_processPendingAPTextMetadataChanges(uint64_t a1)
{
  CFTypeRef cf = 0;
  CFTypeRef v20 = 0;
  if (*(unsigned char *)(a1 + 16)) {
    goto LABEL_67;
  }
  if (!(*(unsigned int (**)(void))(a1 + 64))(*(void *)(a1 + 56)))
  {
    if (gLogCategory_APMetadataSender <= 30
      && (gLogCategory_APMetadataSender != -1 || _LogCategory_Initialize()))
    {
      goto LABEL_16;
    }
    goto LABEL_65;
  }
  int v2 = *(_DWORD *)(a1 + 20);
  if (v2)
  {
    if ((v2 & 0x20) != 0)
    {
      if (gLogCategory_APMetadataSender <= 30
        && (gLogCategory_APMetadataSender != -1 || _LogCategory_Initialize()))
      {
        goto LABEL_16;
      }
      goto LABEL_65;
    }
    if (!*(unsigned char *)(a1 + 120)) {
      goto LABEL_65;
    }
    uint64_t CMBaseObject = APSenderSessionGetCMBaseObject(*(void *)(a1 + 48));
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v5 = v4 ? v4 : 0;
    CFAllocatorRef v6 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v5 + 48);
    if (!v6) {
      goto LABEL_65;
    }
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    v6(CMBaseObject, @"TransportControlStream", *MEMORY[0x1E4F1CF80], &v20);
    if (!v20) {
      goto LABEL_65;
    }
    CMBlockBufferRef v8 = *(__CFDictionary **)(a1 + 112);
    *(void *)(a1 + 112) = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    *(unsigned char *)(a1 + 120) = 0;
    if ((*(unsigned char *)(a1 + 20) & 8) == 0)
    {
      if (APMetadataSourceCopyMetadata(*(void *)(a1 + 32), @"APNowPlayingInfoText", &cf)) {
        goto LABEL_84;
      }
      for (uint64_t i = 0; i != 6; ++i)
      {
        CFTypeRef v10 = metadataSender_processPendingAPTextMetadataChanges_mandatoryTextKeys[i];
        if (!FigCFDictionarySetValueFromKeyInDict()) {
          CFDictionarySetValue(v8, v10, &stru_1F26D66A0);
        }
      }
    }
    (*(void (**)(_OWORD *__return_ptr, void))(a1 + 72))(v25, *(void *)(a1 + 56));
    if ((BYTE12(v25[0]) & 1) == 0)
    {
      if (gLogCategory_APMetadataSender <= 90
        && (gLogCategory_APMetadataSender != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      goto LABEL_63;
    }
    int v11 = v25[0];
    CFTypeRef v12 = v20;
    uint64_t v26 = 0;
    memset(v25, 0, sizeof(v25));
    size_t v23 = 0;
    uint64_t v24 = 0;
    CMBlockBufferRef destinationBuffer = 0;
    int sourceBytes = v11;
    DMAPContentBlock_Init();
    int v27 = DMAPContentBlock_OpenContainer();
    if (!v27)
    {
      uint64_t v13 = 0;
      while (1)
      {
        int v27 = DMAPContentBlock_AddCFObjectByKey();
        if (v27) {
          break;
        }
        v13 += 16;
        if (v13 == 160)
        {
          if (CFDictionaryGetInt64()) {
            int v27 = DMAPContentBlock_AddInt8();
          }
          CFDictionaryGetInt64();
          if (!v27)
          {
            int v27 = DMAPContentBlock_AddInt8();
            if (v27) {
              break;
            }
          }
          int v27 = 0;
          CFDictionaryGetDouble();
          int v14 = DMAPContentBlock_AddInt8();
          int v27 = v14;
          if (v14) {
            break;
          }
          CFDictionaryGetDouble();
          if (!v27)
          {
            int v27 = DMAPContentBlock_AddInt32();
            if (v27) {
              break;
            }
          }
          int v27 = 0;
          int v27 = DMAPContentBlock_CloseContainer();
          if (v27) {
            break;
          }
          int v27 = DMAPContentBlock_Commit();
          if (v27) {
            break;
          }
          int v27 = CMBlockBufferCreateWithMemoryBlock(v7, 0, v23 + 4, (CFAllocatorRef)*MEMORY[0x1E4F1CF90], 0, 0, v23 + 4, 1u, &destinationBuffer);
          if (v27) {
            break;
          }
          int v27 = CMBlockBufferReplaceDataBytes(&sourceBytes, destinationBuffer, 0, 4uLL);
          if (v27) {
            break;
          }
          int v27 = CMBlockBufferReplaceDataBytes(v24, destinationBuffer, 4uLL, v23);
          if (v27) {
            break;
          }
          CMBlockBufferRef v15 = destinationBuffer;
          uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v16) {
            uint64_t v17 = v16;
          }
          else {
            uint64_t v17 = 0;
          }
          CFAllocatorRef v18 = *(uint64_t (**)(CFTypeRef, uint64_t, CMBlockBufferRef, void))(v17 + 56);
          if (!v18)
          {
            int v27 = -12782;
            break;
          }
          int v27 = v18(v12, 1952807028, v15, 0);
          if (v27) {
            break;
          }
          if (gLogCategory_APMetadataSender <= 30
            && (gLogCategory_APMetadataSender != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          goto LABEL_60;
        }
      }
    }
    APSLogErrorAt();
LABEL_60:
    DMAPContentBlock_Free();
    if (destinationBuffer) {
      CFRelease(destinationBuffer);
    }
    if (!v27) {
      goto LABEL_63;
    }
LABEL_84:
    APSLogErrorAt();
LABEL_63:
    if (v8) {
      CFRelease(v8);
    }
    goto LABEL_65;
  }
  if (gLogCategory_APMetadataSender <= 30
    && (gLogCategory_APMetadataSender != -1 || _LogCategory_Initialize()))
  {
LABEL_16:
    LogPrintF();
  }
LABEL_65:
  if (cf) {
    CFRelease(cf);
  }
LABEL_67:
  if (v20) {
    CFRelease(v20);
  }
}

void metadataSender_sendMRNowPlayingInfo(uint64_t a1, const void *a2, const void *a3, int a4)
{
  CFTypeRef cf = 0;
  if (!a2 || *(unsigned char *)(a1 + 16)) {
    goto LABEL_24;
  }
  if (!a3) {
    goto LABEL_31;
  }
  if ((*(unsigned char *)(a1 + 20) & 0x20) == 0)
  {
    if (gLogCategory_APMetadataSender > 30
      || gLogCategory_APMetadataSender == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_24;
    }
    goto LABEL_7;
  }
  if (!a4 && !(*(unsigned int (**)(void))(a1 + 64))(*(void *)(a1 + 56)))
  {
    if (gLogCategory_APMetadataSender > 30
      || gLogCategory_APMetadataSender == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_24;
    }
LABEL_7:
    LogPrintF();
    goto LABEL_24;
  }
  uint64_t CMBaseObject = APSenderSessionGetCMBaseObject(*(void *)(a1 + 48));
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  CFTypeRef v10 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v9 + 48);
  if (v10)
  {
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    v10(CMBaseObject, @"TransportControlStream", *MEMORY[0x1E4F1CF80], &cf);
    if (cf)
    {
      uint64_t Mutable = CFDictionaryCreateMutable(v11, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (Mutable)
      {
        uint64_t v13 = Mutable;
        CFDictionarySetValue(Mutable, @"type", @"npi-text");
        CFDictionarySetValue(v13, @"params", a2);
        CFDictionarySetValue(v13, @"mergePolicy", a3);
        if (metadataSender_sendMRMetadata((uint64_t)cf, @"updateMRNowPlayingInfo", v13))
        {
          APSLogErrorAt();
        }
        else if (gLogCategory_APMetadataSender <= 30 {
               && (gLogCategory_APMetadataSender != -1 || _LogCategory_Initialize()))
        }
        {
          LogPrintF();
        }
        CFRelease(v13);
        goto LABEL_24;
      }
LABEL_31:
      APSLogErrorAt();
LABEL_24:
      if (cf) {
        CFRelease(cf);
      }
    }
  }
}

void metadataSender_sendMRExtendedMetadata(uint64_t a1, const void *a2, int a3, const void *a4, const void *a5)
{
  CFTypeRef cf = 0;
  if (!a2 || *(unsigned char *)(a1 + 16)) {
    goto LABEL_21;
  }
  if (!a5)
  {
LABEL_26:
    APSLogErrorAt();
LABEL_21:
    if (cf) {
      CFRelease(cf);
    }
    return;
  }
  if (a3 && (*(_DWORD *)(a1 + 20) & a3) == 0)
  {
    if (gLogCategory_APMetadataSender <= 30
      && (gLogCategory_APMetadataSender != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_21;
  }
  uint64_t CMBaseObject = APSenderSessionGetCMBaseObject(*(void *)(a1 + 48));
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  CFAllocatorRef v11 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v10 + 48);
  if (v11)
  {
    CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    v11(CMBaseObject, @"TransportControlStream", *MEMORY[0x1E4F1CF80], &cf);
    if (cf)
    {
      uint64_t Mutable = CFDictionaryCreateMutable(v12, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (Mutable)
      {
        int v14 = Mutable;
        CFDictionarySetValue(Mutable, a5, a2);
        if (metadataSender_sendMRMetadata((uint64_t)cf, a4, v14))
        {
          APSLogErrorAt();
        }
        else if (gLogCategory_APMetadataSender <= 30 {
               && (gLogCategory_APMetadataSender != -1 || _LogCategory_Initialize()))
        }
        {
          LogPrintF();
        }
        CFRelease(v14);
        goto LABEL_21;
      }
      goto LABEL_26;
    }
  }
}

void metadataSender_appendDictionaryKeyAndValue(void *key, const void *a2, uint64_t a3)
{
  CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 8), key);
  if (!FigCFEqual())
  {
    *(unsigned char *)a3 = 1;
    CFAllocatorRef v6 = *(__CFDictionary **)(a3 + 8);
    CFDictionarySetValue(v6, key, a2);
  }
}

uint64_t metadataSender_sendMRMetadata(uint64_t a1, const void *a2, const void *a3)
{
  if (a2 && a3)
  {
    uint64_t Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFAllocatorRef v6 = Mutable;
      CFDictionarySetValue(Mutable, @"type", a2);
      CFDictionarySetValue(v6, @"params", a3);
      uint64_t v7 = APTransportStreamSendPlistMessage();
      if (v7) {
        APSLogErrorAt();
      }
      CFRelease(v6);
    }
    else
    {
      APSLogErrorAt();
      return 4294960568;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
  return v7;
}

void metadataSender_handleAPArtworkMetadataChangedInternal(CFTypeRef *a1)
{
  uint64_t v2 = (uint64_t)*a1;
  if (!*((unsigned char *)*a1 + 16))
  {
    uint64_t v3 = *(void *)(v2 + 80);
    CFDictionaryRef v4 = (const __CFDictionary *)a1[1];
    v5[0] = 0;
    v5[1] = v3;
    if (v4)
    {
      CFDictionaryApplyFunction(v4, (CFDictionaryApplierFunction)metadataSender_appendDictionaryKeyAndValue, v5);
      if (LOBYTE(v5[0]))
      {
        *(unsigned char *)(v2 + 88) = 1;
        metadataSender_processPendingAPArtworkMetadataChanges(v2);
      }
    }
  }
  CFRelease(*a1);
  CFRelease(a1[1]);
  CFRelease(a1[2]);
}

void metadataSender_handleAPProgressMetadataChangedInternal(CFTypeRef *a1)
{
  uint64_t v2 = (uint64_t)*a1;
  if (!*((unsigned char *)*a1 + 16))
  {
    uint64_t v3 = *(void *)(v2 + 96);
    CFDictionaryRef v4 = (const __CFDictionary *)a1[1];
    v5[0] = 0;
    v5[1] = v3;
    if (v4)
    {
      CFDictionaryApplyFunction(v4, (CFDictionaryApplierFunction)metadataSender_appendDictionaryKeyAndValue, v5);
      if (LOBYTE(v5[0]))
      {
        *(unsigned char *)(v2 + 104) = 1;
        metadataSender_processPendingAPProgressMetadataChanges(v2);
      }
    }
  }
  CFRelease(*a1);
  CFRelease(a1[1]);
  CFRelease(a1[2]);
}

void metadataSender_handleAPTextMetadataChangedInternal(CFTypeRef *a1)
{
  uint64_t v2 = (uint64_t)*a1;
  if (!*((unsigned char *)*a1 + 16))
  {
    uint64_t v3 = *(void *)(v2 + 112);
    CFDictionaryRef v4 = (const __CFDictionary *)a1[1];
    v5[0] = 0;
    v5[1] = v3;
    if (v4)
    {
      CFDictionaryApplyFunction(v4, (CFDictionaryApplierFunction)metadataSender_appendDictionaryKeyAndValue, v5);
      if (LOBYTE(v5[0]))
      {
        *(unsigned char *)(v2 + 120) = 1;
        metadataSender_processPendingAPTextMetadataChanges(v2);
      }
    }
  }
  CFRelease(*a1);
  CFRelease(a1[1]);
  CFRelease(a1[2]);
}

void __metadataSender_handleMRNowPlayingInfoChanged_block_invoke(uint64_t a1)
{
  metadataSender_sendMRNowPlayingInfo(*(void *)(a1 + 32), *(const void **)(a1 + 40), *(const void **)(a1 + 48), *(unsigned __int8 *)(a1 + 56));
  CFRelease(*(CFTypeRef *)(a1 + 32));
  CFRelease(*(CFTypeRef *)(a1 + 40));
  uint64_t v2 = *(const void **)(a1 + 48);
  CFRelease(v2);
}

void metadataSender_handleMRExtendedMetadataChangedInternal(uint64_t a1)
{
  uint64_t v2 = *(unsigned char **)a1;
  if (!v2[16])
  {
    metadataSender_sendMRExtendedMetadata((uint64_t)v2, *(const void **)(a1 + 8), 0, *(const void **)(a1 + 16), *(const void **)(a1 + 24));
    uint64_t v2 = *(unsigned char **)a1;
  }
  CFRelease(v2);
  CFRelease(*(CFTypeRef *)(a1 + 8));
  CFRelease(*(CFTypeRef *)(a1 + 16));
  uint64_t v3 = *(const void **)(a1 + 24);
  CFRelease(v3);
}

uint64_t SPHubbedDevicesProviderDefaultsCreate(uint64_t a1, const __CFDictionary *a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    SPHubbedDevicesProviderGetClassID();
    uint64_t v5 = CMDerivedObjectCreate();
    if (v5)
    {
      uint64_t v12 = v5;
      APSLogErrorAt();
    }
    else
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (gLogCategory_SPHubbedDevicesProviderDefaults <= 30
        && (gLogCategory_SPHubbedDevicesProviderDefaults != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (!a2
        || (uint64_t Value = (__CFString *)CFDictionaryGetValue(a2, @"HubbedDevicesKeyName")) == 0
        || (uint64_t v8 = Value, v9 = CFGetTypeID(Value), v9 != CFStringGetTypeID()))
      {
        uint64_t v8 = @"sidePlayHubbedDevices";
      }
      *(unsigned char *)(DerivedStorage + 40) = 0;
      *(void *)(DerivedStorage + 8) = CFRetain(v8);
      uint64_t v10 = FigSimpleMutexCreate();
      *(void *)uint64_t DerivedStorage = v10;
      if (v10 && (SNPrintF(), dispatch_queue_t v11 = dispatch_queue_create(label, 0), (*(void *)(DerivedStorage + 16) = v11) != 0))
      {
        *(_DWORD *)(DerivedStorage + 24) = -1;
        *(void *)(DerivedStorage + 32) = 0;
        if (gLogCategory_SPHubbedDevicesProviderDefaults <= 50
          && (gLogCategory_SPHubbedDevicesProviderDefaults != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        uint64_t v12 = 0;
        *a3 = 0;
      }
      else
      {
        APSLogErrorAt();
        return 4294960568;
      }
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
  return v12;
}

uint64_t hdpd_Invalidate(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPHubbedDevicesProviderDefaults <= 50
    && (gLogCategory_SPHubbedDevicesProviderDefaults != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 16), a1, (dispatch_function_t)hdpd_invalidateInternal);
  return 0;
}

void hdpd_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPHubbedDevicesProviderDefaults <= 50
    && (gLogCategory_SPHubbedDevicesProviderDefaults != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(unsigned char *)(DerivedStorage + 40))
  {
    uint64_t v1 = *(const void **)(DerivedStorage + 32);
    if (v1)
    {
      CFRelease(v1);
      *(void *)(DerivedStorage + 32) = 0;
    }
    uint64_t v2 = *(NSObject **)(DerivedStorage + 16);
    if (v2)
    {
      dispatch_release(v2);
      *(void *)(DerivedStorage + 16) = 0;
    }
    FigSimpleMutexDestroy();
    uint64_t v3 = *(const void **)(DerivedStorage + 8);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(DerivedStorage + 8) = 0;
    }
  }
  else
  {
    if (gLogCategory_SPHubbedDevicesProviderDefaults <= 90) {
      hdpd_Finalize_cold_1(gLogCategory_SPHubbedDevicesProviderDefaults);
    }
    __break(1u);
  }
}

__CFString *hdpd_CopyDebugDescription(uint64_t a1)
{
  uint64_t Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<SPHubbedDevicesProviderDefaults %p>", a1);
  return Mutable;
}

uint64_t hdpd_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFSetRef *a4)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPHubbedDevicesProviderDefaults <= 30
    && (gLogCategory_SPHubbedDevicesProviderDefaults != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!a2 || !a4)
  {
    APSLogErrorAt();
    return 4294960591;
  }
  MEMORY[0x1D25EB370](*DerivedStorage);
  if (!CFEqual(a2, @"HubbedDevices"))
  {
    if (gLogCategory_SPHubbedDevicesProviderDefaults <= 30
      && (gLogCategory_SPHubbedDevicesProviderDefaults != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    uint64_t v13 = 4294954512;
    goto LABEL_26;
  }
  uint64_t v8 = CMBaseObjectGetDerivedStorage();
  CFSetRef v9 = *(const __CFSet **)(v8 + 32);
  if (v9)
  {
    if (gLogCategory_SPHubbedDevicesProviderDefaults <= 30)
    {
      uint64_t v10 = v8;
      if (gLogCategory_SPHubbedDevicesProviderDefaults != -1
        || (v11 = _LogCategory_Initialize(), CFSetRef v9 = *(const __CFSet **)(v10 + 32), v11))
      {
        LogPrintF();
        CFSetRef v9 = *(const __CFSet **)(v10 + 32);
      }
    }
    CFSetRef Copy = CFSetCreateCopy(a3, v9);
    if (!Copy)
    {
LABEL_29:
      APSLogErrorAt();
      uint64_t v13 = 4294960568;
      goto LABEL_26;
    }
  }
  else
  {
    if (gLogCategory_SPHubbedDevicesProviderDefaults <= 30
      && (gLogCategory_SPHubbedDevicesProviderDefaults != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CFSetRef Copy = CFSetCreate(a3, 0, 0, MEMORY[0x1E4F1D548]);
    if (!Copy) {
      goto LABEL_29;
    }
  }
  uint64_t v13 = 0;
  *a4 = Copy;
LABEL_26:
  MEMORY[0x1D25EB390](*DerivedStorage);
  return v13;
}

uint64_t hdpd_invalidateInternal()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPHubbedDevicesProviderDefaults <= 30
    && (gLogCategory_SPHubbedDevicesProviderDefaults != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t result = *(unsigned int *)(DerivedStorage + 24);
  if (result != -1)
  {
    uint64_t result = notify_cancel(result);
    *(_DWORD *)(DerivedStorage + 24) = -1;
  }
  *(unsigned char *)(DerivedStorage + 40) = 1;
  return result;
}

uint64_t hdpd_Start(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = *(NSObject **)(DerivedStorage + 16);
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 0x40000000;
  handler[2] = __hdpd_Start_block_invoke;
  handler[3] = &__block_descriptor_tmp_31;
  handler[4] = a1;
  notify_register_dispatch("com.apple.airplay.prefsChanged", (int *)(DerivedStorage + 24), v3, handler);
  hdpd_handlePreferencesChanged();
  return 0;
}

void hdpd_handlePreferencesChanged()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPHubbedDevicesProviderDefaults <= 50
    && (gLogCategory_SPHubbedDevicesProviderDefaults != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  APSSettingsSynchronize();
  MEMORY[0x1D25EB370](*DerivedStorage);
  CFArrayRef v1 = (const __CFArray *)APSSettingsCopyValue();
  if (gLogCategory_SPHubbedDevicesProviderDefaults <= 30
    && (gLogCategory_SPHubbedDevicesProviderDefaults != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (v1 && (CFTypeID v2 = CFGetTypeID(v1), v2 == CFArrayGetTypeID()))
  {
    CFIndex Count = CFArrayGetCount(v1);
    CFDictionaryRef v4 = (const void **)malloc_type_calloc(Count, 8uLL, 0xC0040B8AA526DuLL);
    v8.location = 0;
    v8.length = Count;
    CFArrayGetValues(v1, v8, v4);
    CFSetRef v5 = CFSetCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v4, Count, MEMORY[0x1E4F1D548]);
    free(v4);
  }
  else
  {
    if (gLogCategory_SPHubbedDevicesProviderDefaults <= 30
      && (gLogCategory_SPHubbedDevicesProviderDefaults != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CFSetRef v5 = 0;
  }
  if (!FigCFEqual())
  {
    if (gLogCategory_SPHubbedDevicesProviderDefaults <= 50
      && (gLogCategory_SPHubbedDevicesProviderDefaults != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CFAllocatorRef v6 = (const void *)DerivedStorage[4];
    DerivedStorage[4] = v5;
    if (v5) {
      CFRetain(v5);
    }
    if (v6) {
      CFRelease(v6);
    }
    if (gLogCategory_SPHubbedDevicesProviderDefaults <= 50
      && (gLogCategory_SPHubbedDevicesProviderDefaults != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
  }
  MEMORY[0x1D25EB390](*DerivedStorage);
  if (v1) {
    CFRelease(v1);
  }
  if (v5)
  {
    CFRelease(v5);
  }
}

uint64_t APAudioZeroTimeStampProviderGetTypeID()
{
  if (APAudioZeroTimeStampProviderGetTypeID_initOnce != -1) {
    dispatch_once(&APAudioZeroTimeStampProviderGetTypeID_initOnce, &__block_literal_global_30);
  }
  return APAudioZeroTimeStampProviderGetTypeID_typeID;
}

uint64_t __APAudioZeroTimeStampProviderGetTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  APAudioZeroTimeStampProviderGetTypeID_typeID = result;
  return result;
}

uint64_t APAudioZeroTimeStampProviderCreate(double a1, uint64_t a2, char a3, uint64_t *a4)
{
  if (APAudioZeroTimeStampProviderGetTypeID_initOnce != -1) {
    dispatch_once(&APAudioZeroTimeStampProviderGetTypeID_initOnce, &__block_literal_global_30);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance) {
    return 4294960568;
  }
  uint64_t v8 = Instance;
  uint64_t result = 0;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(unsigned char *)(v8 + 157) = a3;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(double *)(v8 + 16) = a1;
  *(unsigned char *)(v8 + 156) = 0;
  *a4 = v8;
  return result;
}

double APAudioZeroTimeStampProviderGetUpdateInterval(uint64_t a1)
{
  return *(double *)(a1 + 16);
}

uint64_t APAudioZeroTimeStampProviderIsStable(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 157);
}

uint64_t APAudioZeroTimeStampProviderSetZeroTimeStamp(uint64_t result, _OWORD *a2)
{
  uint64_t v2 = result + ((unint64_t)(*(_DWORD *)(result + 152) == 0) << 6);
  long long v3 = a2[2];
  long long v4 = a2[3];
  long long v5 = a2[1];
  *(_OWORD *)(v2 + 24) = *a2;
  *(_OWORD *)(v2 + 72) = v4;
  *(_OWORD *)(v2 + 56) = v3;
  *(_OWORD *)(v2 + 40) = v5;
  atomic_fetch_xor((atomic_uint *volatile)(result + 152), 1u);
  return result;
}

__n128 APAudioZeroTimeStampProviderGetZeroTimeStamp(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + ((unint64_t)*(unsigned int *)(a1 + 152) << 6);
  __n128 result = *(__n128 *)(v2 + 24);
  long long v4 = *(_OWORD *)(v2 + 40);
  long long v5 = *(_OWORD *)(v2 + 72);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v2 + 56);
  *(_OWORD *)(a2 + 48) = v5;
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

double APAudioZeroTimeStampProviderReset(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

uint64_t APAudioZeroTimeStampProviderSetHighAccuracySupport(uint64_t result, char a2)
{
  *(unsigned char *)(result + 156) = a2;
  return result;
}

uint64_t APAudioZeroTimeStampProviderGetHighAccuracySupport(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 156);
}

uint64_t APEndpointStreamAudioCreate(const __CFAllocator *a1, CFTypeRef cf, const void *a3, CFTypeRef a4, const void *a5, const void *a6, const void *a7, const void *a8, CFTypeRef cfa, void **a10)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  unsigned int v46 = 0;
  CFTypeRef v44 = 0;
  CFAllocatorRef context = 0;
  if (!cf) {
    goto LABEL_89;
  }
  CFTypeID v18 = CFGetTypeID(cf);
  if (v18 != CFStringGetTypeID()) {
    goto LABEL_89;
  }
  if (a5)
  {
    CFTypeID v19 = CFGetTypeID(a5);
    if (v19 != CFDictionaryGetTypeID()) {
      goto LABEL_89;
    }
  }
  if (!a6) {
    goto LABEL_89;
  }
  CFTypeID v20 = CFGetTypeID(a6);
  if (v20 != APSenderSessionGetTypeID()) {
    goto LABEL_89;
  }
  if (!cfa) {
    goto LABEL_89;
  }
  CFTypeID v21 = CFGetTypeID(cfa);
  if (v21 != APEndpointDescriptionGetTypeID()) {
    goto LABEL_89;
  }
  if (!a4) {
    goto LABEL_89;
  }
  CFTypeID v22 = CFGetTypeID(a4);
  if (v22 != CFStringGetTypeID()) {
    goto LABEL_89;
  }
  uint64_t v43 = a3;
  int v23 = CFEqual(a4, (CFTypeRef)*MEMORY[0x1E4F21468]);
  uint64_t v24 = (CFTypeRef *)MEMORY[0x1E4F21478];
  if (!v23 && !CFEqual(a4, (CFTypeRef)*MEMORY[0x1E4F21478])) {
    goto LABEL_89;
  }
  if (!a10 || !a7 || !a8) {
    goto LABEL_89;
  }
  FigEndpointStreamGetClassID();
  unsigned int v46 = CMDerivedObjectCreate();
  if (v46) {
    goto LABEL_36;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(DerivedStorage + 260) = 0;
  *(void *)(DerivedStorage + 24) = CFRetain(cf);
  *(void *)(DerivedStorage + 40) = CFRetain(a4);
  SNPrintF();
  *(void *)(DerivedStorage + 16) = os_transaction_create();
  *(void *)(DerivedStorage + 56) = CFRetain(a6);
  *(void *)(DerivedStorage + 80) = CFRetain(cfa);
  *(void *)(DerivedStorage + 64) = CFRetain(a7);
  *(void *)(DerivedStorage + 72) = CFRetain(a8);
  uint64_t v26 = FigSimpleMutexCreate();
  *(void *)(DerivedStorage + 152) = v26;
  if (!v26) {
    goto LABEL_82;
  }
  SNPrintF();
  dispatch_queue_t v27 = dispatch_queue_create(label, 0);
  *(void *)(DerivedStorage + 296) = v27;
  if (!v27) {
    goto LABEL_82;
  }
  atomic_store(0, (unsigned __int8 *)(DerivedStorage + 305));
  *(void *)(DerivedStorage + 472) = (int)FigGetCFPreferenceNumberWithDefault();
  *(void *)(DerivedStorage + 480) = (int)FigGetCFPreferenceNumberWithDefault();
  SNPrintF();
  int v28 = FigDispatchQueueCreateWithPriority();
  *(void *)(DerivedStorage + 312) = v28;
  if (!v28) {
    goto LABEL_82;
  }
  int v29 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, v28);
  *(void *)(DerivedStorage + 320) = v29;
  dispatch_set_context(v29, context);
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(DerivedStorage + 320), (dispatch_function_t)audioStream_statsTimerFired);
  dispatch_source_set_timer(*(dispatch_source_t *)(DerivedStorage + 320), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
  dispatch_resume(*(dispatch_object_t *)(DerivedStorage + 320));
  SNPrintF();
  dispatch_queue_t v30 = dispatch_queue_create(label, 0);
  *(void *)(DerivedStorage + 8) = v30;
  if (!v30)
  {
LABEL_82:
    APSLogErrorAt();
    int v42 = -16761;
LABEL_90:
    unsigned int v46 = v42;
    goto LABEL_68;
  }
  if (!a5)
  {
LABEL_89:
    APSLogErrorAt();
    int v42 = -16760;
    goto LABEL_90;
  }
  if (*v24 == a4)
  {
    BOOL v31 = 1;
  }
  else if (*v24)
  {
    BOOL v31 = CFEqual(a4, *v24) != 0;
  }
  else
  {
    BOOL v31 = 0;
  }
  *(unsigned char *)(DerivedStorage + 120) = !v31;
  *(unsigned char *)(DerivedStorage + 121) = CFDictionaryGetInt64() != 0;
  uint64_t Int64 = CFDictionaryGetInt64();
  *(unsigned char *)(DerivedStorage + 140) = CFDictionaryGetInt64() != 0;
  uint64_t CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(void *)(DerivedStorage + 80));
  uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v34) {
    uint64_t v35 = v34;
  }
  else {
    uint64_t v35 = 0;
  }
  CFTypeRef v36 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v35 + 48);
  if (!v36)
  {
    unsigned int v46 = -12782;
    goto LABEL_36;
  }
  unsigned int v46 = v36(CMBaseObject, @"SupportedAudioFormats", *MEMORY[0x1E4F1CF80], &v44);
  if (v46)
  {
LABEL_36:
    APSLogErrorAt();
    goto LABEL_68;
  }
  if (FigCFEqual())
  {
    *(void *)(DerivedStorage + 112) = CFDictionaryGetInt64();
    if (v46) {
      goto LABEL_36;
    }
  }
  else
  {
    *(void *)(DerivedStorage + 112) = CFDictionaryGetInt64();
    if (v46) {
      goto LABEL_36;
    }
  }
  int v37 = *(unsigned __int8 *)(DerivedStorage + 121);
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  if (v37) {
    CFStringRef v39 = @"%@-%llu-screen";
  }
  else {
    CFStringRef v39 = @"%@-%llu-airplay";
  }
  *(void *)(DerivedStorage + 32) = CFStringCreateWithFormat(a1, 0, v39, v43, UpTimeNanoseconds);
  if (v43) {
    CFTypeRef v40 = CFRetain(v43);
  }
  else {
    CFTypeRef v40 = 0;
  }
  *(void *)(DerivedStorage + 48) = v40;
  *(void *)(DerivedStorage + 128) = CFRetain((CFTypeRef)*MEMORY[0x1E4F212A0]);
  *(unsigned char *)(DerivedStorage + 136) = APSGetFBOPropertyInt64() != 0;
  if (v46) {
    goto LABEL_36;
  }
  *(unsigned char *)(DerivedStorage + 137) = APSGetFBOPropertyInt64() != 0;
  if (v46) {
    goto LABEL_36;
  }
  *(unsigned char *)(DerivedStorage + 138) = APSGetFBOPropertyInt64() != 0;
  if (v46) {
    goto LABEL_36;
  }
  if (APSIsEndpointClusteringEnabled() && APSGetFBOPropertyInt64()) {
    APSIsFBOPropertyNonNull();
  }
  if (APSSettingsGetIntWithDefault())
  {
    if (gLogCategory_APEndpointStreamAudio <= 50
      && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(unsigned char *)(DerivedStorage + 139) = 1;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)a5, @"MediaPresentationLatencyMs"))
  {
    *(_DWORD *)(DerivedStorage + 96) = CFDictionaryGetInt64Ranged();
    if (v46) {
      goto LABEL_36;
    }
  }
  if (CFDictionaryGetInt64()) {
    *(void *)(DerivedStorage + 248) = 1;
  }
  unsigned int v46 = audioStream_setupEventRecorder((uint64_t)context, (const __CFDictionary *)a5);
  if (v46) {
    goto LABEL_36;
  }
  if (Int64) {
    audioStream_startSilentAudio((uint64_t)context);
  }
  APSIOReporterCreate();
  unsigned int v46 = 0;
  if (gLogCategory_APEndpointStreamAudio <= 30
    && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *a10 = context;
  CFAllocatorRef context = 0;
LABEL_68:
  if (v44) {
    CFRelease(v44);
  }
  if (context) {
    CFRelease(context);
  }
  return v46;
}

void audioStream_statsTimerFired()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamAudio <= 20
    && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v1 = mach_absolute_time();
  UpTicksToSecondsF();
  if (DerivedStorage[50] <= (unint64_t)v2)
  {
    DerivedStorage[49] = v1;
    unint64_t v3 = DerivedStorage[41];
    if (v3 > DerivedStorage[42] || DerivedStorage[43] > DerivedStorage[44])
    {
      if (gLogCategory_APEndpointStreamAudio <= 50)
      {
        if (gLogCategory_APEndpointStreamAudio != -1 || (int v4 = _LogCategory_Initialize(), v3 = DerivedStorage[41], v4))
        {
          LogPrintF();
          unint64_t v3 = DerivedStorage[41];
        }
      }
      DerivedStorage[42] = v3;
      DerivedStorage[44] = DerivedStorage[43];
    }
  }
  UpTicksToSecondsF();
  if (DerivedStorage[52] <= (unint64_t)v5)
  {
    DerivedStorage[51] = v1;
    uint64_t v6 = CMBaseObjectGetDerivedStorage();
    CFTypeRef cf = 0;
    MEMORY[0x1D25EB370](*(void *)(v6 + 152));
    uint64_t v7 = (void *)MEMORY[0x1E4F1CF80];
    if (*(void *)(v6 + 176))
    {
      uint64_t CMBaseObject = FigTransportStreamGetCMBaseObject();
      uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v10 = v9 ? v9 : 0;
      int v11 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v10 + 48);
      if (v11) {
        v11(CMBaseObject, *MEMORY[0x1E4F47778], *v7, &cf);
      }
    }
    MEMORY[0x1D25EB390](*(void *)(v6 + 152));
    if (cf)
    {
      if (APTNANDataSessionCreateStatisticsReport()
        || APTNANDataSessionStatisticsReportCopyDictionary())
      {
        APSLogErrorAt();
      }
      if (cf) {
        CFRelease(cf);
      }
    }
  }
}

uint64_t audioStream_setupEventRecorder(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2) {
    CFDictionaryGetValue(a2, @"EventRecorder");
  }
  int v4 = *(const void **)(DerivedStorage + 144);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DerivedStorage + 144) = 0;
  }
  uint64_t v5 = APSEventRecorderCreate();
  if (v5) {
    APSLogErrorAt();
  }
  return v5;
}

void audioStream_startSilentAudio(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  SNPrintF();
  unint64_t v3 = dispatch_queue_create(label, 0);
  *(void *)(DerivedStorage + 488) = v3;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __audioStream_startSilentAudio_block_invoke;
  block[3] = &__block_descriptor_tmp_158_0;
  void block[4] = DerivedStorage;
  void block[5] = a1;
  dispatch_async(v3, block);
}

uint64_t audioStream_Finalize_0(uint64_t a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamAudio <= 50
    && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  unint64_t v3 = DerivedStorage[1];
  if (v3)
  {
    dispatch_release(v3);
    DerivedStorage[1] = 0;
  }
  audioStream_dissociateInternal_0(a1);
  int v4 = (const void *)DerivedStorage[18];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[18] = 0;
  }
  uint64_t v5 = (const void *)DerivedStorage[63];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[63] = 0;
  }
  uint64_t v6 = (const void *)DerivedStorage[58];
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = (const void *)DerivedStorage[7];
  if (v7)
  {
    CFRelease(v7);
    DerivedStorage[7] = 0;
  }
  uint64_t v8 = (const void *)DerivedStorage[9];
  if (v8)
  {
    CFRelease(v8);
    DerivedStorage[9] = 0;
  }
  uint64_t v9 = (const void *)DerivedStorage[10];
  if (v9)
  {
    CFRelease(v9);
    DerivedStorage[10] = 0;
  }
  uint64_t v10 = (const void *)DerivedStorage[3];
  if (v10)
  {
    CFRelease(v10);
    DerivedStorage[3] = 0;
  }
  int v11 = (const void *)DerivedStorage[4];
  if (v11)
  {
    CFRelease(v11);
    DerivedStorage[4] = 0;
  }
  uint64_t v12 = (const void *)DerivedStorage[5];
  if (v12)
  {
    CFRelease(v12);
    DerivedStorage[5] = 0;
  }
  uint64_t v13 = (const void *)DerivedStorage[6];
  if (v13)
  {
    CFRelease(v13);
    DerivedStorage[6] = 0;
  }
  int v14 = (const void *)DerivedStorage[16];
  if (v14)
  {
    CFRelease(v14);
    DerivedStorage[16] = 0;
  }
  uint64_t v15 = (const void *)DerivedStorage[8];
  if (v15)
  {
    CFRelease(v15);
    DerivedStorage[8] = 0;
  }
  uint64_t v16 = (void *)DerivedStorage[2];
  if (v16)
  {
    os_release(v16);
    DerivedStorage[2] = 0;
  }
  uint64_t v17 = (const void *)DerivedStorage[33];
  if (v17) {
    CFRelease(v17);
  }
  CFTypeID v18 = DerivedStorage[37];
  if (v18)
  {
    dispatch_release(v18);
    DerivedStorage[37] = 0;
  }
  CFTypeID v19 = DerivedStorage[39];
  if (v19)
  {
    dispatch_release(v19);
    DerivedStorage[39] = 0;
  }
  CFTypeID v20 = DerivedStorage[61];
  if (v20)
  {
    dispatch_release(v20);
    DerivedStorage[61] = 0;
  }
  CFTypeID v21 = (const void *)DerivedStorage[25];
  if (v21)
  {
    CFRelease(v21);
    DerivedStorage[25] = 0;
  }
  return FigSimpleMutexDestroy();
}

__CFString *audioStream_CopyDebugDescription_0(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<APEndpointStreamAudio %p '%@'>", a1, *(void *)(DerivedStorage + 24));
  return Mutable;
}

uint64_t audioStream_CopyProperty_0(uint64_t a1, const void *a2, const __CFAllocator *a3, void *a4)
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamAudio <= 30
    && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(unsigned char *)DerivedStorage && !FigCFEqual() && !FigCFEqual())
  {
    APSLogErrorAt();
    return 4294950534;
  }
  if (!a2 || !a4)
  {
    APSLogErrorAt();
    return 4294950536;
  }
  if (CFEqual(a2, @"IsTimelineEstablished") || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F49FD8]))
  {
    uint64_t v9 = (const void **)MEMORY[0x1E4F1CFD0];
    int v10 = *(unsigned __int8 *)(DerivedStorage + 192);
    goto LABEL_13;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21408]))
  {
    uint64_t v12 = 0;
    *a4 = *(void *)(DerivedStorage + 40);
    return v12;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F213B0]))
  {
    uint64_t v9 = (const void **)MEMORY[0x1E4F21438];
LABEL_15:
    int v11 = *v9;
LABEL_16:
    int v11 = CFRetain(v11);
LABEL_17:
    uint64_t v12 = 0;
    *a4 = v11;
    return v12;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21370]) || CFEqual(a2, @"IsPlaying"))
  {
    uint64_t v9 = (const void **)MEMORY[0x1E4F1CFD0];
    int v10 = *(unsigned __int8 *)(DerivedStorage + 193);
    goto LABEL_13;
  }
  if (CFEqual(a2, @"IsLocalStream") || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21358]))
  {
LABEL_28:
    uint64_t v9 = (const void **)MEMORY[0x1E4F1CFC8];
    goto LABEL_15;
  }
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F213C8]))
  {
    if (CFEqual(a2, @"EndpointStreamShowInfo"))
    {
      int v11 = audioStream_copyShowInfo_0();
      goto LABEL_17;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21368]))
    {
      int v11 = *(const void **)(DerivedStorage + 32);
      goto LABEL_16;
    }
    if (CFEqual(a2, @"StreamID"))
    {
      uint64_t Int64 = CFNumberCreateInt64();
      *a4 = Int64;
      if (!Int64) {
        goto LABEL_69;
      }
      return 0;
    }
    if (CFEqual(a2, @"SupportedAPAudioFormats"))
    {
      CFNumberRef v15 = CFNumberCreate(a3, kCFNumberSInt64Type, (const void *)(DerivedStorage + 112));
      *a4 = v15;
      if (v15) {
        return 0;
      }
    }
    else
    {
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F49FF0]))
      {
        uint64_t v9 = (const void **)MEMORY[0x1E4F1CFD0];
        int v10 = *(unsigned __int8 *)(DerivedStorage + 138);
LABEL_13:
        if (!v10) {
          uint64_t v9 = (const void **)MEMORY[0x1E4F1CFC8];
        }
        goto LABEL_15;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F49F88]))
      {
        uint64_t v16 = CFNumberCreateInt64();
        *a4 = v16;
        if (!v16) {
          goto LABEL_69;
        }
        return 0;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F49FE8]))
      {
        int v11 = *(const void **)(DerivedStorage + 24);
        if (!v11) {
          goto LABEL_17;
        }
        goto LABEL_16;
      }
      if (CFEqual(a2, @"RTCStats"))
      {
        CFAllocatorRef v17 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        values = @"AudioRealTime";
        keys[0] = @"sessionType";
        CFDictionaryRef v18 = CFDictionaryCreate(v17, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (v18
          && (CFDictionaryRef v19 = v18,
              uint64_t v26 = v18,
              CFArrayRef v20 = CFArrayCreate(v17, (const void **)&v26, 1, MEMORY[0x1E4F1D510]),
              CFRelease(v19),
              v20))
        {
          uint64_t v12 = 0;
          *a4 = v20;
        }
        else
        {
          APSLogErrorAt();
          return 4294950526;
        }
        return v12;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21328]))
      {
        uint64_t v12 = APAudioEngineVendorVend(*(void **)(DerivedStorage + 64), (uint64_t)a4);
        if (v12) {
          APSLogErrorAt();
        }
        return v12;
      }
      if (CFEqual(a2, @"HoseRegistrar"))
      {
        int v11 = *(const void **)(DerivedStorage + 216);
        if (!v11) {
          goto LABEL_17;
        }
        goto LABEL_16;
      }
      if (CFEqual(a2, @"Cryptor"))
      {
        int v11 = *(const void **)(DerivedStorage + 232);
        if (!v11) {
          goto LABEL_17;
        }
        goto LABEL_16;
      }
      if (CFEqual(a2, @"DynamicLatencyOffsetM"))
      {
        if (!*(unsigned char *)(DerivedStorage + 193))
        {
          APSLogErrorAt();
          return 4294950533;
        }
        CFNumberRef v21 = CFNumberCreate(a3, kCFNumberSInt32Type, (const void *)(DerivedStorage + 256));
        *a4 = v21;
        if (!v21) {
          goto LABEL_69;
        }
        return 0;
      }
      if (!CFEqual(a2, @"EndpointIDs"))
      {
        if (!CFEqual(a2, @"IsSidePlayStream"))
        {
          if (gLogCategory_APEndpointStreamAudio <= 30
            && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          return 4294954512;
        }
        goto LABEL_28;
      }
      uint64_t v23 = *(void *)(DerivedStorage + 48);
      CFTypeID v22 = (const void **)(DerivedStorage + 48);
      if (v23)
      {
        uint64_t v24 = CFArrayCreate(a3, v22, 1, MEMORY[0x1E4F1D510]);
      }
      else
      {
        Empty = (const void *)APSCFArrayGetEmpty();
        uint64_t v24 = (void *)CFRetain(Empty);
      }
      *a4 = v24;
      if (v24) {
        return 0;
      }
    }
LABEL_69:
    APSLogErrorAt();
    return 4294950535;
  }
  return audioStream_createSupportedPCMFormatArray_0(a1, (uint64_t)a3, a4);
}

uint64_t audioStream_SetProperty_0(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamAudio <= 30
    && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(unsigned char *)DerivedStorage)
  {
    APSLogErrorAt();
    return 4294950534;
  }
  if (!a2) {
    goto LABEL_41;
  }
  if (CFEqual(a2, @"IsTimelineEstablished") || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F49FD8]))
  {
    if (a3)
    {
      CFTypeID v7 = CFGetTypeID(a3);
      if (v7 == CFBooleanGetTypeID())
      {
        MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 152));
        if (*(unsigned char *)(DerivedStorage + 193))
        {
          int Value = CFBooleanGetValue((CFBooleanRef)a3);
          if (*(unsigned __int8 *)(DerivedStorage + 192) != Value)
          {
            *(unsigned char *)(DerivedStorage + 192) = Value;
            if (Value)
            {
              CMNotificationCenterGetDefaultLocalCenter();
              FigDispatchAsyncPostNotification();
            }
          }
          uint64_t v9 = 0;
        }
        else
        {
          uint64_t v9 = APSSignalErrorAt();
        }
        MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 152));
        return v9;
      }
    }
LABEL_41:
    APSLogErrorAt();
    return 4294950536;
  }
  if (FigCFEqual())
  {
    if (!a3) {
      goto LABEL_41;
    }
    CFTypeID v11 = CFGetTypeID(a3);
    if (v11 != CFStringGetTypeID()) {
      goto LABEL_41;
    }
    CMBaseObjectGetDerivedStorage();
    if (a1) {
      CFRetain(a1);
    }
    CFRetain(a3);
    APSDispatchAsyncFHelper();
    return 0;
  }
  if (FigCFEqual() || FigCFEqual()) {
    return 0;
  }
  if (FigCFEqual())
  {
    if (!a3) {
      goto LABEL_41;
    }
    CFTypeID v12 = CFGetTypeID(a3);
    if (v12 != CFBooleanGetTypeID()) {
      goto LABEL_41;
    }
    CFBooleanGetValue((CFBooleanRef)a3);
    audioStream_setEchoCancellationIsEnabled_0(a1);
    return 0;
  }
  if (FigCFEqual())
  {
    if (!a3) {
      goto LABEL_41;
    }
    CFTypeID v13 = CFGetTypeID(a3);
    if (v13 != CFBooleanGetTypeID()) {
      goto LABEL_41;
    }
    audioStream_setHTFTIsActive(a1, a3);
    return 0;
  }
  if (gLogCategory_APEndpointStreamAudio <= 30
    && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return 4294954512;
}

unsigned char *audioStream_dissociateInternal_0(uint64_t a1)
{
  double result = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*result)
  {
    unint64_t v3 = result;
    if (gLogCategory_APEndpointStreamAudio <= 30
      && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    audioStream_invalidateTransportMDCStream_0();
    APSDispatchSyncTask();
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v5 = *(NSObject **)(DerivedStorage + 488);
    if (v5)
    {
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __audioStream_stopSilentAudio_block_invoke;
      block[3] = &__block_descriptor_tmp_33;
      void block[4] = DerivedStorage;
      void block[5] = a1;
      dispatch_sync(v5, block);
    }
    uint64_t v6 = *((void *)v3 + 40);
    if (v6)
    {
      dispatch_source_cancel(*((dispatch_source_t *)v3 + 40));
      dispatch_release(v6);
      *((void *)v3 + 40) = 0;
    }
    audioStream_invalidateTransportStreams();
    MEMORY[0x1D25EB370](*((void *)v3 + 19));
    CFTypeID v7 = (const void *)*((void *)v3 + 21);
    if (v7)
    {
      CFRelease(v7);
      *((void *)v3 + 21) = 0;
    }
    uint64_t v8 = (const void *)*((void *)v3 + 22);
    if (v8)
    {
      CFRelease(v8);
      *((void *)v3 + 22) = 0;
    }
    uint64_t v9 = (const void *)*((void *)v3 + 23);
    if (v9)
    {
      CFRelease(v9);
      *((void *)v3 + 23) = 0;
    }
    double result = (unsigned char *)MEMORY[0x1D25EB390](*((void *)v3 + 19));
    if (*((void *)v3 + 1))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      return (unsigned char *)FigDispatchAsyncPostNotification();
    }
  }
  return result;
}

void audioStream_invalidateTransportMDCStream_0()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 152));
  uint64_t v1 = *(const void **)(DerivedStorage + 184);
  if (!v1)
  {
    JUMPOUT(0x1D25EB390);
  }
  CFTypeRef v2 = CFRetain(v1);
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 152));
  if (v2)
  {
    uint64_t CMBaseObject = FigTransportStreamGetCMBaseObject();
    if (CMBaseObject)
    {
      uint64_t v4 = CMBaseObject;
      uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v6 = v5 ? v5 : 0;
      CFTypeID v7 = *(void (**)(uint64_t))(v6 + 24);
      if (v7) {
        v7(v4);
      }
    }
    CFRelease(v2);
  }
}

uint64_t audioStream_suspendAndDissociateInternal_0(uint64_t a1)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  audioStream_suspendInternal_0(a1);
  *uint64_t DerivedStorage = 1;
  return 0;
}

void audioStream_invalidateTransportStreams()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1D25EB370](DerivedStorage[19]);
  uint64_t v1 = (const void *)DerivedStorage[21];
  if (v1) {
    CFTypeRef v2 = CFRetain(v1);
  }
  else {
    CFTypeRef v2 = 0;
  }
  unint64_t v3 = (const void *)DerivedStorage[22];
  if (v3) {
    CFTypeRef v4 = CFRetain(v3);
  }
  else {
    CFTypeRef v4 = 0;
  }
  MEMORY[0x1D25EB390](DerivedStorage[19]);
  if (v2)
  {
    uint64_t CMBaseObject = FigTransportStreamGetCMBaseObject();
    if (CMBaseObject)
    {
      uint64_t v6 = CMBaseObject;
      uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v8 = v7 ? v7 : 0;
      uint64_t v9 = *(void (**)(uint64_t))(v8 + 24);
      if (v9) {
        v9(v6);
      }
    }
  }
  if (v4)
  {
    uint64_t v10 = FigTransportStreamGetCMBaseObject();
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v13 = v12 ? v12 : 0;
      int v14 = *(void (**)(uint64_t))(v13 + 24);
      if (v14) {
        v14(v11);
      }
    }
  }
  if (v2) {
    CFRelease(v2);
  }
  if (v4)
  {
    CFRelease(v4);
  }
}

uint64_t audioStream_suspendInternal_0(uint64_t a1)
{
  v27[0] = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  context[0] = a1;
  context[1] = v27;
  CFTypeRef cf = 0;
  CFDictionaryGetInt64();
  CFDictionaryGetInt64();
  if (*(unsigned char *)DerivedStorage) {
    goto LABEL_71;
  }
  if (gLogCategory_APEndpointStreamAudio <= 50
    && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!*(unsigned char *)(DerivedStorage + 193))
  {
LABEL_71:
    uint64_t Mutable = 0;
  }
  else
  {
    uint64_t v3 = CMBaseObjectGetDerivedStorage();
    CFTypeRef v29 = 0;
    uint64_t v28 = 0;
    v27[1] = 0;
    if (!*(unsigned char *)v3)
    {
      uint64_t v4 = v3;
      if (*(unsigned char *)(v3 + 193))
      {
        if (*(void *)(v3 + 504))
        {
          if (APSThreadSafeDictionaryCopyValueIfPresent()
            && APSThreadSafeDictionaryGetInt64IfPresent())
          {
            APSThreadSafeDictionaryGetInt32IfPresent();
            mach_absolute_time();
            UpTicksToSeconds();
            APSThreadSafeDictionarySetInt32();
            APSThreadSafeDictionaryRemoveValue();
          }
          uint64_t v5 = *(const void **)(v4 + 504);
          if (v5)
          {
            CFRelease(v5);
            *(void *)(v4 + 504) = 0;
          }
        }
      }
    }
    if (v29) {
      CFRelease(v29);
    }
    dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 312), context, (dispatch_function_t)audioStream_stopTimer);
    if (v27[0])
    {
      if (gLogCategory_APEndpointStreamAudio <= 50
        && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v27[0] = 0;
    }
    MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 152));
    uint64_t v6 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
    if (*(void *)(DerivedStorage + 176))
    {
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
      uint64_t CMBaseObject = FigTransportStreamGetCMBaseObject();
      uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v8) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = 0;
      }
      uint64_t v10 = *(void (**)(uint64_t, void, CFAllocatorRef, CFTypeRef *))(v9 + 48);
      if (v10) {
        v10(CMBaseObject, *MEMORY[0x1E4F477A0], *v6, &cf);
      }
      CFGetInt64();
    }
    MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 152));
    audioStream_invalidateTransportMDCStream_0();
    audioStream_invalidateTransportStreams();
    APSIOReporterGetCoreCaptureCount();
    v27[0] = 0;
    if (gLogCategory_APEndpointStreamAudio <= 50
      && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    uint64_t Mutable = CFDictionaryCreateMutable(*v6, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFDictionarySetInt64();
      CFDictionarySetInt64();
      CFDictionarySetInt64();
      CFDictionarySetInt64();
      CFDictionarySetInt64();
      CFDictionarySetInt64();
      uint64_t v12 = *(const void **)(DerivedStorage + 464);
      if (v12) {
        CFDictionarySetValue(Mutable, @"senderNANWifiStats", v12);
      }
      if (gLogCategory_APEndpointStreamAudio <= 50
        && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      uint64_t v13 = *(void *)(DerivedStorage + 56);
      uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v14) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v16 = *(void (**)(uint64_t, uint64_t, __CFDictionary *))(v15 + 48);
      if (v16) {
        v16(v13, 96, Mutable);
      }
      uint64_t v17 = CMBaseObjectGetDerivedStorage();
      dispatch_source_set_timer(*(dispatch_source_t *)(v17 + 320), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
      if (*(unsigned char *)(v17 + 193)
        && gLogCategory_APEndpointStreamAudio <= 50
        && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      CFDictionaryRef v18 = *(const void **)(v17 + 448);
      if (v18)
      {
        CFRelease(v18);
        *(void *)(v17 + 448) = 0;
      }
      CFDictionaryRef v19 = *(const void **)(v17 + 456);
      if (v19)
      {
        CFRelease(v19);
        *(void *)(v17 + 456) = 0;
      }
      MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 152));
      *(void *)(DerivedStorage + 160) = 0;
      CFArrayRef v20 = *(const void **)(DerivedStorage + 168);
      if (v20)
      {
        CFRelease(v20);
        *(void *)(DerivedStorage + 168) = 0;
      }
      CFNumberRef v21 = *(const void **)(DerivedStorage + 176);
      if (v21)
      {
        CFRelease(v21);
        *(void *)(DerivedStorage + 176) = 0;
      }
      CFTypeID v22 = *(const void **)(DerivedStorage + 184);
      if (v22)
      {
        CFRelease(v22);
        *(void *)(DerivedStorage + 184) = 0;
      }
      uint64_t v23 = *(const void **)(DerivedStorage + 232);
      if (v23)
      {
        CFRelease(v23);
        *(void *)(DerivedStorage + 232) = 0;
      }
      *(unsigned char *)(DerivedStorage + 192) = 0;
      *(void *)(DerivedStorage + 240) = 0;
      audioStream_updateIsResumedAndPostNotification(a1, 0);
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
      MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 152));
    }
    else
    {
      APSLogErrorAt();
      v27[0] = -16761;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v27[0];
}

void audioStream_stopTimer(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1D25EB370](DerivedStorage[19]);
  uint64_t v4 = (const void *)DerivedStorage[27];
  DerivedStorage[27] = 0;
  DerivedStorage[28] = 0;
  MEMORY[0x1D25EB390](DerivedStorage[19]);
  APSEndpointStreamAudioHoseRegistrarProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable && (uint64_t v6 = *(void *)(ProtocolVTable + 16)) != 0)
  {
    uint64_t v7 = *(uint64_t (**)(const void *, uint64_t, void))(v6 + 16);
    if (v7)
    {
      int v8 = v7(v4, v2, 0);
      if (!v8) {
        goto LABEL_8;
      }
    }
    else
    {
      int v8 = -12782;
    }
  }
  else
  {
    int v8 = -12788;
  }
  APSLogErrorAt();
LABEL_8:
  uint64_t v9 = (int *)a1[1];
  if (v9) {
    *uint64_t v9 = v8;
  }
  if (v4)
  {
    CFRelease(v4);
  }
}

void audioStream_updateIsResumedAndPostNotification(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned __int8 *)(DerivedStorage + 193) != a2)
  {
    uint64_t v5 = DerivedStorage;
    APEndpointStreamUpdateNowPlayingTransaction(a1, a2, &gLogCategory_APEndpointStreamAudio, (const void **)(DerivedStorage + 200));
    uint64_t Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v7 = Mutable;
    int v8 = (const void **)MEMORY[0x1E4F1CFC8];
    if (a2) {
      int v8 = (const void **)MEMORY[0x1E4F1CFD0];
    }
    CFDictionarySetValue(Mutable, @"IsPlaying", *v8);
    *(unsigned char *)(v5 + 193) = a2;
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    CFRelease(v7);
  }
}

uint64_t __audioStream_stopSilentAudio_block_invoke(uint64_t a1)
{
  uint64_t result = *(void *)(*(void *)(a1 + 32) + 496);
  if (result)
  {
    uint64_t result = AudioQueueDispose((AudioQueueRef)result, 1u);
    *(void *)(*(void *)(a1 + 32) + 496) = 0;
    if (gLogCategory_APEndpointStreamAudio <= 50)
    {
      if (gLogCategory_APEndpointStreamAudio != -1) {
        return LogPrintF();
      }
      uint64_t result = _LogCategory_Initialize();
      if (result) {
        return LogPrintF();
      }
    }
  }
  return result;
}

uint64_t audioStream_createSupportedPCMFormatArray_0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  uint64_t CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(void *)(DerivedStorage + 80));
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  int v8 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v7 + 48);
  if (!v8)
  {
    unsigned int DescriptionArray = -12782;
    goto LABEL_10;
  }
  unsigned int DescriptionArray = v8(CMBaseObject, @"SupportedAudioFormats", *MEMORY[0x1E4F1CF80], &cf);
  if (DescriptionArray)
  {
LABEL_10:
    APSLogErrorAt();
    goto LABEL_17;
  }
  if (CFEqual(*(CFTypeRef *)(DerivedStorage + 40), (CFTypeRef)*MEMORY[0x1E4F21468]))
  {
    CFDictionaryGetInt64();
    if (DescriptionArray) {
      goto LABEL_10;
    }
  }
  else
  {
    if (!CFEqual(*(CFTypeRef *)(DerivedStorage + 40), (CFTypeRef)*MEMORY[0x1E4F21478]))
    {
      unsigned int DescriptionArray = APSSignalErrorAt();
      goto LABEL_17;
    }
    CFDictionaryGetInt64();
    if (DescriptionArray) {
      goto LABEL_10;
    }
  }
  unsigned int DescriptionArray = APAudioFormatCreateDescriptionArray();
  if (DescriptionArray) {
    goto LABEL_10;
  }
  if (a3) {
    *a3 = 0;
  }
LABEL_17:
  if (cf) {
    CFRelease(cf);
  }
  return DescriptionArray;
}

__CFDictionary *audioStream_copyShowInfo_0()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v2 = Mutable;
  uint64_t v3 = (const void **)MEMORY[0x1E4F1CFD0];
  if (!*(unsigned char *)(DerivedStorage + 193)) {
    uint64_t v3 = (const void **)MEMORY[0x1E4F1CFC8];
  }
  CFDictionarySetValue(Mutable, @"Resumed", *v3);
  CFDictionarySetValue(v2, @"Type", *(const void **)(DerivedStorage + 40));
  CFDictionarySetValue(v2, @"Name", *(const void **)(DerivedStorage + 24));
  return v2;
}

uint64_t audioStream_setEchoCancellationIsEnabled_0(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 152));
  if (a1) {
    CFRetain(a1);
  }
  APSDispatchAsyncFHelper();
  return MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 152));
}

uint64_t audioStream_setHTFTIsActive(const void *a1, const void *a2)
{
  if (a1) {
    CFRetain(a1);
  }
  if (a2) {
    CFRetain(a2);
  }
  return APSDispatchAsyncFHelper();
}

void audioStream_setAudioModeInternal_0(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  AudioModeForEndpointStream = APSenderSessionUtilityGetAudioModeForEndpointStream();
  uint64_t v4 = *(const void **)(DerivedStorage + 128);
  uint64_t v5 = *(const void **)(a1 + 8);
  *(void *)(DerivedStorage + 128) = v5;
  if (v5) {
    CFRetain(v5);
  }
  if (v4) {
    CFRelease(v4);
  }
  if (*(unsigned char *)(DerivedStorage + 193))
  {
    uint64_t Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      uint64_t v7 = Mutable;
      CFDictionarySetValue(Mutable, @"audioMode", AudioModeForEndpointStream);
      if (*(unsigned char *)(DerivedStorage + 137))
      {
        int v8 = *(const void **)(DerivedStorage + 184);
        if (v8)
        {
          CFTypeRef v9 = CFRetain(v8);
          if (v9)
          {
            uint64_t v10 = v9;
            if (APTransportStreamSendPlistMessageCreatingPlistReply()) {
              APSLogErrorAt();
            }
            CFRelease(v10);
            goto LABEL_20;
          }
        }
      }
      else
      {
        uint64_t v11 = *(void *)(DerivedStorage + 56);
        uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v12) {
          uint64_t v13 = v12;
        }
        else {
          uint64_t v13 = 0;
        }
        uint64_t v14 = *(unsigned int (**)(uint64_t, __CFDictionary *))(v13 + 88);
        if (v14 && !v14(v11, v7)) {
          goto LABEL_20;
        }
      }
      APSLogErrorAt();
LABEL_20:
      CFRelease(v7);
      goto LABEL_21;
    }
    APSLogErrorAt();
  }
LABEL_21:
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  uint64_t v15 = *(const void **)(a1 + 8);
  if (v15)
  {
    CFRelease(v15);
  }
}

void audioStream_setEchoCancellationIsEnabledInternal_0(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamAudio <= 50
    && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(unsigned char *)DerivedStorage)
  {
    APSLogErrorAt();
    int v8 = 0;
    uint64_t v4 = 0;
    goto LABEL_22;
  }
  uint64_t Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v4 = Mutable;
  if (!Mutable) {
    goto LABEL_20;
  }
  uint64_t v5 = (const void **)MEMORY[0x1E4F1CFD0];
  if (!*(unsigned char *)(a1 + 8)) {
    uint64_t v5 = (const void **)MEMORY[0x1E4F1CFC8];
  }
  CFDictionarySetValue(Mutable, @"MuteForStream", *v5);
  if (!*(unsigned char *)(DerivedStorage + 137))
  {
    uint64_t v9 = *(void *)(DerivedStorage + 56);
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(unsigned int (**)(uint64_t, __CFDictionary *))(v11 + 88);
    if (v12 && !v12(v9, v4)) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  uint64_t v6 = *(const void **)(DerivedStorage + 184);
  if (!v6 || (CFTypeRef v7 = CFRetain(v6)) == 0)
  {
LABEL_20:
    APSLogErrorAt();
LABEL_21:
    int v8 = 0;
    goto LABEL_22;
  }
  int v8 = v7;
  if (APTransportStreamSendPlistMessageCreatingPlistReply()) {
    APSLogErrorAt();
  }
LABEL_22:
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  if (v4) {
    CFRelease(v4);
  }
  if (v8)
  {
    CFRelease(v8);
  }
}

void audioStream_setHTFTIsActiveInternal(uint64_t a1)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    APSLogErrorAt();
LABEL_16:
    uint64_t v9 = 0;
    uint64_t v5 = 0;
    goto LABEL_17;
  }
  uint64_t v3 = DerivedStorage;
  DerivedStorage[304] = CFBooleanGetValue(*(CFBooleanRef *)(a1 + 8));
  if (gLogCategory_APEndpointStreamAudio <= 50
    && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!v3[137]) {
    goto LABEL_16;
  }
  uint64_t Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v5 = Mutable;
  if (!Mutable) {
    goto LABEL_14;
  }
  uint64_t v6 = (const void **)MEMORY[0x1E4F1CFD0];
  if (!*(void *)(a1 + 8)) {
    uint64_t v6 = (const void **)MEMORY[0x1E4F1CFC8];
  }
  CFDictionarySetValue(Mutable, @"value", *v6);
  CFTypeRef v7 = (const void *)*((void *)v3 + 23);
  if (v7 && (CFTypeRef v8 = CFRetain(v7)) != 0)
  {
    uint64_t v9 = v8;
    if (APTransportStreamSendPlistMessageCreatingPlistReply()) {
      APSLogErrorAt();
    }
  }
  else
  {
LABEL_14:
    APSLogErrorAt();
    uint64_t v9 = 0;
  }
LABEL_17:
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  uint64_t v10 = *(const void **)(a1 + 8);
  if (v10) {
    CFRelease(v10);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (v5)
  {
    CFRelease(v5);
  }
}

__CFString *audioStream_audioHoseProtocolCopyDebugDescription(uint64_t a1)
{
  uint64_t Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"APEndpointStreamAudio <APSEndpointStreamAudioHoseProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t audioStream_audioHoseSendAudio(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = DerivedStorage;
  if (a2 == 1734700576 || a2 == 1735550308 && *(unsigned char *)(DerivedStorage + 138))
  {
    MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 152));
    CFTypeRef v7 = *(const void **)(v6 + 176);
    if (v7)
    {
      CFTypeRef v8 = CFRetain(v7);
      MEMORY[0x1D25EB390](*(void *)(v6 + 152));
      if (v8)
      {
        uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v9) {
          uint64_t v10 = v9;
        }
        else {
          uint64_t v10 = 0;
        }
        uint64_t v12 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t))(v10 + 48);
        if (v12)
        {
          uint64_t v11 = v12(v8, a2, a3);
          if (!v11)
          {
LABEL_17:
            CFRelease(v8);
            return v11;
          }
        }
        else
        {
          uint64_t v11 = 4294954514;
        }
        APSLogErrorAt();
        goto LABEL_17;
      }
    }
    else
    {
      MEMORY[0x1D25EB390](*(void *)(v6 + 152));
    }
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294960561;
  }
}

uint64_t audioStream_audioHoseTimeAnnounce(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 152));
  uint64_t v6 = *(const void **)(DerivedStorage + 168);
  if (v6)
  {
    CFTypeRef v7 = CFRetain(v6);
    MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 152));
    if (v7)
    {
      uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v8) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = 0;
      }
      uint64_t v11 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t))(v9 + 48);
      if (v11)
      {
        uint64_t v10 = v11(v7, a2, a3);
        if (!v10)
        {
LABEL_13:
          CFRelease(v7);
          return v10;
        }
      }
      else
      {
        uint64_t v10 = 4294954514;
      }
      APSLogErrorAt();
      goto LABEL_13;
    }
  }
  else
  {
    MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 152));
  }
  return 0;
}

uint64_t audioStream_audioHoseFlush_0(const void *a1)
{
  return 0;
}

uint64_t audioStream_audioHoseSendAudioBatch(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = DerivedStorage;
  if (a2 != 1734700576 && (a2 != 1735550308 || !*(unsigned char *)(DerivedStorage + 138)))
  {
    APSLogErrorAt();
    return 4294960561;
  }
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 152));
  CFTypeRef v7 = *(const void **)(v6 + 176);
  if (!v7)
  {
    MEMORY[0x1D25EB390](*(void *)(v6 + 152));
    return 0;
  }
  CFTypeRef v8 = CFRetain(v7);
  MEMORY[0x1D25EB390](*(void *)(v6 + 152));
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v12 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t))(v10 + 88);
  if (v12) {
    uint64_t v13 = v12(v8, a2, a3);
  }
  else {
    uint64_t v13 = FigTransportStreamSendBatchSlow();
  }
  uint64_t v11 = v13;
  if (v13) {
    APSLogErrorAt();
  }
  CFRelease(v8);
  return v11;
}

void audioStream_audioHoseFlushInternal_0(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v27 = 0;
  CFTypeRef cf = 0;
  if (*(_DWORD *)(a1 + 12) != 1)
  {
    APSLogErrorAt();
    uint64_t Mutable = 0;
    CFStringRef v10 = 0;
    CFDataRef Data = 0;
    uint64_t v12 = 4294960561;
    goto LABEL_38;
  }
  uint64_t v3 = DerivedStorage;
  if (gLogCategory_APEndpointStreamAudio <= 40
    && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(unsigned char *)(v3 + 137))
  {
    uint64_t v4 = *(const void **)(v3 + 184);
    if (v4)
    {
      CFTypeRef cf = CFRetain(v4);
      if (cf)
      {
        CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        goto LABEL_17;
      }
    }
    else
    {
      CFTypeRef cf = 0;
    }
    APSLogErrorAt();
    uint64_t Mutable = 0;
    CFStringRef v10 = 0;
    CFDataRef Data = 0;
    uint64_t v12 = 4294960578;
    goto LABEL_38;
  }
  uint64_t CMBaseObject = APSenderSessionGetCMBaseObject(*(void *)(v3 + 56));
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v13 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v8 + 48);
  if (!v13)
  {
    uint64_t v12 = 4294954514;
LABEL_23:
    APSLogErrorAt();
    uint64_t Mutable = 0;
LABEL_24:
    CFStringRef v10 = 0;
    goto LABEL_25;
  }
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v14 = v13(CMBaseObject, @"TransportControlStream", *MEMORY[0x1E4F1CF80], &cf);
  if (v14)
  {
    uint64_t v12 = v14;
    goto LABEL_23;
  }
LABEL_17:
  uint64_t Mutable = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    uint64_t v12 = 4294894966;
LABEL_57:
    APSLogErrorAt();
    goto LABEL_24;
  }
  if (!*(unsigned char *)(v3 + 137))
  {
    CFStringRef v10 = CFStringCreateWithFormat(v5, 0, @"seq=%u;rtptime=%u",
            *(unsigned int *)(a1 + 8),
            *(unsigned int *)(a1 + 16));
    if (v10)
    {
      CFDictionarySetValue(Mutable, @"RTP-Info", v10);
      goto LABEL_28;
    }
    uint64_t v12 = 4294894966;
    APSLogErrorAt();
LABEL_25:
    CFDataRef Data = 0;
    goto LABEL_38;
  }
  uint64_t v15 = CFDictionarySetInt64();
  if (v15)
  {
    uint64_t v12 = v15;
    goto LABEL_57;
  }
  uint64_t v16 = CFDictionarySetInt64();
  if (v16)
  {
    uint64_t v12 = v16;
    goto LABEL_57;
  }
  CFStringRef v10 = 0;
LABEL_28:
  CFDataRef Data = CFPropertyListCreateData(v5, Mutable, kCFPropertyListBinaryFormat_v1_0, 0, 0);
  if (Data)
  {
    uint64_t BlockBufferWithCFDataNoCopy = FigCreateBlockBufferWithCFDataNoCopy();
    if (BlockBufferWithCFDataNoCopy)
    {
      uint64_t v12 = BlockBufferWithCFDataNoCopy;
    }
    else
    {
      CFTypeRef v18 = cf;
      uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v19) {
        uint64_t v20 = v19;
      }
      else {
        uint64_t v20 = 0;
      }
      CFNumberRef v21 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef, void))(v20 + 56);
      if (v21)
      {
        uint64_t v12 = v21(v18, 1718383464, v27, 0);
        if (!v12) {
          goto LABEL_38;
        }
      }
      else
      {
        uint64_t v12 = 4294954514;
      }
    }
  }
  else
  {
    uint64_t v12 = 4294894966;
  }
  APSLogErrorAt();
LABEL_38:
  CFTypeID v22 = *(void (**)(CFTypeRef, uint64_t, _OWORD *, uint64_t, uint64_t))(a1 + 40);
  if (v22)
  {
    CFTypeRef v23 = *(CFTypeRef *)a1;
    uint64_t v24 = *(unsigned int *)(a1 + 8);
    uint64_t v25 = *(void *)(a1 + 48);
    v26[0] = *(_OWORD *)(a1 + 12);
    *(_OWORD *)((char *)v26 + 12) = *(_OWORD *)(a1 + 24);
    v22(v23, v24, v26, v12, v25);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (Data) {
    CFRelease(Data);
  }
  if (v27) {
    CFRelease(v27);
  }
  CFRelease(*(CFTypeRef *)a1);
}

uint64_t audioStream_Suspend_0(const void *a1, const void *a2)
{
  if (a2) {
    CFRetain(a2);
  }
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t audioStream_Resume_0(const void *a1, const void *a2)
{
  if (a2) {
    CFRetain(a2);
  }
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t audioStream_Dissociate_0(uint64_t a1)
{
  if (!*(unsigned char *)CMBaseObjectGetDerivedStorage()) {
    audioStream_dissociateInternal_0(a1);
  }
  return 0;
}

uint64_t audioStream_Control_0(const void *a1, uint64_t a2, const void *a3)
{
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      int v24 = 0;
      CMBaseObjectGetDerivedStorage();
      CFTypeRef v23 = 0;
      if (a1) {
        CFTypeRef v8 = CFRetain(a1);
      }
      else {
        CFTypeRef v8 = 0;
      }
      CFTypeRef cf = v8;
      CFStringGetTypeID();
      CFDictionaryGetTypedValue();
      if (!FigCFEqual()) {
        return 0;
      }
      goto LABEL_17;
    }
    if (!FigCFEqual())
    {
      if (!FigCFEqual())
      {
        if (gLogCategory_APEndpointStreamAudio <= 90
          && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        return 4294950536;
      }
      int v24 = 0;
      CMBaseObjectGetDerivedStorage();
      if (a1) {
        CFTypeRef v11 = CFRetain(a1);
      }
      else {
        CFTypeRef v11 = 0;
      }
      CFTypeRef cf = v11;
      if (a3) {
        CFTypeRef v21 = CFRetain(a3);
      }
      else {
        CFTypeRef v21 = 0;
      }
      CFTypeRef v23 = v21;
      CFStringGetTypeID();
      CFDictionaryGetTypedValue();
      if (FigCFEqual()) {
        return 0;
      }
      if (gLogCategory_APEndpointStreamAudio <= 50
        && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
LABEL_17:
      APSDispatchAsyncFHelper();
      return 0;
    }
    int v24 = 0;
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    CFTypeRef cf = 0;
    CFStringGetTypeID();
    CFDictionaryGetTypedValue();
    if (!FigCFEqual()) {
      goto LABEL_42;
    }
    if (gLogCategory_APEndpointStreamAudio <= 50
      && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (!APSSettingsGetIntWithDefault())
    {
LABEL_42:
      if (cf) {
        CFRelease(cf);
      }
      return 0;
    }
    MEMORY[0x1D25EB370](DerivedStorage[19]);
    if (DerivedStorage[22])
    {
      uint64_t CMBaseObject = FigTransportStreamGetCMBaseObject();
      uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v14 = v13 ? v13 : 0;
      uint64_t v15 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v14 + 48);
      if (v15) {
        v15(CMBaseObject, *MEMORY[0x1E4F47738], *MEMORY[0x1E4F1CF80], &cf);
      }
    }
    MEMORY[0x1D25EB390](DerivedStorage[19]);
    CFTypeRef v16 = cf;
    if (!cf) {
      return 0;
    }
    ++DerivedStorage[36];
    APSIssueReporterProtocolGetProtocolID();
    uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable && (uint64_t v18 = *(void *)(ProtocolVTable + 16)) != 0)
    {
      uint64_t v19 = *(uint64_t (**)(CFTypeRef, const void *))(v18 + 8);
      if (v19)
      {
        int v24 = v19(v16, a3);
        if (!v24) {
          goto LABEL_42;
        }
        goto LABEL_41;
      }
      int v20 = -12782;
    }
    else
    {
      int v20 = -12788;
    }
    int v24 = v20;
LABEL_41:
    APSLogErrorAt();
    goto LABEL_42;
  }
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  if (a3)
  {
    uint64_t v6 = v5;
    uint64_t Int64 = CFDictionaryGetInt64();
    MEMORY[0x1D25EB370](*(void *)(v6 + 152));
    if (*(void *)(v6 + 248) != Int64)
    {
      *(void *)(v6 + 248) = Int64;
      if (*(unsigned char *)(v6 + 193)) {
        audioStream_updateDynamicLatencyOffsetInternal();
      }
    }
    MEMORY[0x1D25EB390](*(void *)(v6 + 152));
    return 0;
  }
  APSLogErrorAt();
  return 4294950536;
}

void audioStream_suspendAsync_0(uint64_t *a1)
{
  CMBaseObjectGetDerivedStorage();
  audioStream_suspendInternal_0(*a1);
  if (a1[2])
  {
    CFRetain((CFTypeRef)*a1);
    APSDispatchAsyncFHelper();
  }
  CFRelease((CFTypeRef)*a1);
  uint64_t v2 = (const void *)a1[1];
  if (v2) {
    CFRelease(v2);
  }
}

void audioStream_completionCallback(uint64_t a1)
{
  (*(void (**)(void, void, void))(a1 + 16))(*(void *)a1, *(unsigned int *)(a1 + 8), *(void *)(a1 + 24));
  uint64_t v2 = *(const void **)a1;
  CFRelease(v2);
}

void audioStream_resumeAsync_0(uint64_t a1)
{
  CMBaseObjectGetDerivedStorage();
  audioStream_resumeInternal_0(*(void *)a1, *(const __CFDictionary **)(a1 + 8));
  if (*(void *)(a1 + 16))
  {
    CFRetain(*(CFTypeRef *)a1);
    APSDispatchAsyncFHelper();
  }
  CFRelease(*(CFTypeRef *)a1);
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
}

uint64_t audioStream_resumeInternal_0(uint64_t a1, const __CFDictionary *a2)
{
  unsigned int v198 = 0;
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  uint64_t v196 = 0;
  CFTypeRef v197 = 0;
  CFTypeRef v194 = 0;
  CFTypeRef v195 = 0;
  uint64_t v192 = 0;
  uint64_t v193 = 0;
  uint64_t v191 = 0;
  if (*DerivedStorage || (uint64_t v5 = DerivedStorage, DerivedStorage[193]))
  {
    CFStringRef v10 = 0;
    CFTypeRef v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    CFMutableDictionaryRef v14 = 0;
LABEL_307:
    uint64_t v9 = 0;
    goto LABEL_209;
  }
  if (gLogCategory_APEndpointStreamAudio <= 50
    && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!a2)
  {
    uint64_t v9 = 0;
LABEL_11:
    APSLogErrorAt();
    CFStringRef v10 = 0;
    CFTypeRef v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    CFMutableDictionaryRef v14 = 0;
    unsigned int v198 = -16760;
    goto LABEL_209;
  }
  uint64_t Int64 = CFDictionaryGetInt64();
  theCFDataRef Data = (const __CFData *)CFDictionaryGetValue(a2, @"EncryptionKey");
  uint64_t v7 = CFDictionaryGetValue(a2, @"BBufBackingProvider");
  CFTypeRef v8 = CFDictionaryGetValue(a2, @"HoseRegistrar");
  uint64_t v183 = Int64;
  if (v8) {
    CFTypeRef v190 = CFRetain(v8);
  }
  else {
    CFTypeRef v190 = 0;
  }
  FigCFDictionaryGetInt32IfPresent();
  FigCFDictionaryGetInt32IfPresent();
  uint64_t v15 = CFDictionaryGetValue(a2, @"InitialTransportAudioFormat");
  FigCFDictionaryGetFloatIfPresent();
  *((_DWORD *)v5 + 22) = (int)(float)(*((float *)&v192 + 1) * 1000.0);
  FigCFDictionaryGetFloatIfPresent();
  *((_DWORD *)v5 + 23) = (int)(float)(*(float *)&v192 * 1000.0);
  CFTypeRef v16 = (unsigned char *)CMBaseObjectGetDerivedStorage();
  CFTypeRef v202 = 0;
  *(void *)&long long v203 = 0;
  v206[0] = 0;
  CFTypeRef v201 = 0;
  CFTypeRef v199 = 0;
  CFTypeRef cf = 0;
  if (!*v16)
  {
    uint64_t v17 = v16;
    if (!v16[193])
    {
      uint64_t v18 = FigCFDictionaryGetValue();
      if (v18)
      {
        uint64_t v19 = (const void *)v18;
        if (APSThreadSafeDictionaryCopyValueIfPresent())
        {
          mach_absolute_time();
          APSThreadSafeDictionarySetInt64();
          int v20 = (const void *)*((void *)v17 + 63);
          *((void *)v17 + 63) = v19;
          CFRetain(v19);
          if (v20) {
            CFRelease(v20);
          }
        }
        else
        {
          APSThreadSafeDictionaryCreate();
          APSLogErrorAt();
        }
      }
    }
  }
  if ((void)v203) {
    CFRelease((CFTypeRef)v203);
  }
  if (v206[0]) {
    CFRelease(v206[0]);
  }
  if (v202) {
    CFRelease(v202);
  }
  if (v201) {
    CFRelease(v201);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v199) {
    CFRelease(v199);
  }
  if (!v15 || (CFTypeID v21 = CFGetTypeID(v15), v21 != CFDataGetTypeID()))
  {
    uint64_t v9 = v190;
    goto LABEL_11;
  }
  if (CFDataGetLength((CFDataRef)v15) != 40)
  {
    APSLogErrorAt();
    CFStringRef v10 = 0;
    CFTypeRef v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    CFMutableDictionaryRef v14 = 0;
    unsigned int v198 = -16760;
    goto LABEL_293;
  }
  CFDataGetBytePtr((CFDataRef)v15);
  unsigned int v198 = ASBDToAPAudioFormat();
  if (v198)
  {
    APSLogErrorAt();
    CFStringRef v10 = 0;
    CFTypeRef v11 = 0;
    goto LABEL_389;
  }
  if ((*((void *)v5 + 14) & v193) == 0)
  {
    APSLogErrorAt();
    CFStringRef v10 = 0;
    CFTypeRef v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    CFMutableDictionaryRef v14 = 0;
    unsigned int v198 = APSSignalErrorAt();
    goto LABEL_293;
  }
  uint64_t v187 = a1;
  if (v5[139])
  {
    CFBooleanRef v185 = 0;
    CFTypeRef v11 = 0;
    CFDataRef v22 = theData;
    goto LABEL_39;
  }
  uint64_t v43 = *((void *)v5 + 7);
  *(void *)&long long v203 = 0;
  char CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  if (gLogCategory_APEndpointStreamAudio <= 30
    && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v49 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v49) {
    uint64_t v50 = v49;
  }
  else {
    uint64_t v50 = 0;
  }
  CFTypeRef v51 = *(uint64_t (**)(uint64_t))(v50 + 24);
  if (!v51)
  {
    int v60 = -12782;
LABEL_108:
    APSLogErrorAt();
    a1 = v187;
    uint64_t v9 = v190;
    CFTypeRef v11 = 0;
    unsigned int v198 = v60;
LABEL_109:
    APSLogErrorAt();
    goto LABEL_110;
  }
  int v52 = v51(v43);
  if (v52)
  {
    int v60 = v52;
    goto LABEL_108;
  }
  CFAllocatorRef v53 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    int v60 = -71820;
    goto LABEL_108;
  }
  BOOL v55 = Mutable;
  CFDictionarySetInt64();
  CFDictionarySetInt64();
  uint64_t v56 = (const void **)MEMORY[0x1E4F1CFC8];
  if (CFPreferenceNumberWithDefault) {
    uint64_t v56 = (const void **)MEMORY[0x1E4F1CFD0];
  }
  CFDictionarySetValue(v55, @"UseLibNetwork", *v56);
  CFDictionaryAddValue(v55, @"SendBackingProvider", v7);
  int v57 = FigCFEqual();
  uint64_t v58 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (!v57)
  {
    if (v58) {
      uint64_t v63 = v58;
    }
    else {
      uint64_t v63 = 0;
    }
    uint64_t v126 = *(uint64_t (**)(uint64_t, uint64_t, __CFDictionary *, long long *))(v63 + 64);
    if (!v126)
    {
      int v66 = -12782;
      goto LABEL_262;
    }
    int v127 = v126(v43, 1734700576, v55, &v203);
    if (v127)
    {
      int v66 = v127;
      goto LABEL_262;
    }
    goto LABEL_260;
  }
  if (v58) {
    uint64_t v59 = v58;
  }
  else {
    uint64_t v59 = 0;
  }
  CFBooleanRef v64 = *(uint64_t (**)(uint64_t, uint64_t, __CFDictionary *, long long *))(v59 + 64);
  if (!v64)
  {
    int v66 = -12782;
    goto LABEL_262;
  }
  int v65 = v64(v43, 1819042165, v55, &v203);
  if (!v65)
  {
LABEL_260:
    int v66 = 0;
    CFTypeRef v11 = (const void *)v203;
    *(void *)&long long v203 = 0;
    goto LABEL_263;
  }
  int v66 = v65;
LABEL_262:
  APSLogErrorAt();
  CFTypeRef v11 = 0;
LABEL_263:
  CFRelease(v55);
  if ((void)v203)
  {
    uint64_t CMBaseObject = FigTransportStreamGetCMBaseObject();
    if (CMBaseObject)
    {
      uint64_t v129 = CMBaseObject;
      uint64_t v130 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v131 = v130 ? v130 : 0;
      uint64_t v132 = *(void (**)(uint64_t))(v131 + 24);
      if (v132) {
        v132(v129);
      }
    }
    CFRelease((CFTypeRef)v203);
  }
  unsigned int v198 = v66;
  if (v66)
  {
    a1 = v187;
    uint64_t v9 = v190;
    goto LABEL_109;
  }
  if (gLogCategory_APEndpointStreamAudio <= 50
    && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!FigCFEqual()) {
    goto LABEL_331;
  }
  if (!v5[140])
  {
    uint64_t v136 = APEndpointDescriptionGetCMBaseObject(*((void *)v5 + 10));
    uint64_t v137 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v137) {
      uint64_t v138 = v137;
    }
    else {
      uint64_t v138 = 0;
    }
    uint64_t v140 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v138 + 48);
    if (v140)
    {
      unsigned int v198 = v140(v136, @"ClusterUUID", v53, &v194);
      if (!v198)
      {
        if (APSHasSamePersistentGroupUUID()) {
          goto LABEL_278;
        }
        APSLogErrorAt();
        if (gLogCategory_APEndpointStreamAudio > 90
          || gLogCategory_APEndpointStreamAudio == -1 && !_LogCategory_Initialize())
        {
          goto LABEL_292;
        }
        a1 = v187;
        LogPrintF();
        CFStringRef v10 = 0;
LABEL_389:
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        CFMutableDictionaryRef v14 = 0;
        goto LABEL_293;
      }
    }
    else
    {
      unsigned int v198 = -12782;
    }
    APSLogErrorAt();
    a1 = v187;
    uint64_t v9 = v190;
    if (gLogCategory_APEndpointStreamAudio <= 90
      && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
LABEL_110:
    CFStringRef v10 = 0;
LABEL_111:
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    CFMutableDictionaryRef v14 = 0;
    goto LABEL_209;
  }
LABEL_278:
  if (FigGetCFPreferenceNumberWithDefault())
  {
    uint64_t v133 = FigTransportStreamGetCMBaseObject();
    uint64_t v134 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v134) {
      uint64_t v135 = v134;
    }
    else {
      uint64_t v135 = 0;
    }
    uint64_t v139 = *(uint64_t (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v135 + 48);
    if (v139)
    {
      unsigned int v198 = v139(v133, *MEMORY[0x1E4F47760], v53, &v197);
      if (!v198) {
        goto LABEL_286;
      }
    }
    else
    {
      unsigned int v198 = -12782;
    }
LABEL_291:
    APSLogErrorAt();
LABEL_292:
    CFStringRef v10 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    CFMutableDictionaryRef v14 = 0;
    a1 = v187;
LABEL_293:
    uint64_t v9 = v190;
    goto LABEL_209;
  }
LABEL_286:
  *(void *)&long long v203 = 0;
  if (!v11) {
    goto LABEL_330;
  }
  if (gLogCategory_APEndpointStreamAudio <= 50
    && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v146 = FigTransportStreamGetCMBaseObject();
  uint64_t v147 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v148 = v147 ? v147 : 0;
  int v149 = *(void (**)(uint64_t, void, const __CFAllocator *, long long *))(v148 + 48);
  if (v149 && (v149(v146, *MEMORY[0x1E4F47778], v53, &v203), (void)v203))
  {
    unsigned int v150 = APTNANDataSessionPreWarm();
    if (v150) {
      APSLogErrorAt();
    }
    if ((void)v203) {
      CFRelease((CFTypeRef)v203);
    }
    unsigned int v198 = v150;
    if (v150) {
      goto LABEL_291;
    }
  }
  else
  {
LABEL_330:
    unsigned int v198 = 0;
  }
LABEL_331:
  uint64_t v151 = *((void *)v5 + 7);
  *(void *)&long long v203 = 0;
  uint64_t v152 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v152) {
    uint64_t v153 = v152;
  }
  else {
    uint64_t v153 = 0;
  }
  CGSize v154 = *(uint64_t (**)(uint64_t))(v153 + 24);
  if (!v154)
  {
    int v161 = -12782;
LABEL_341:
    APSLogErrorAt();
    a1 = v187;
    uint64_t v9 = v190;
    CFStringRef v10 = 0;
    unsigned int v198 = v161;
LABEL_342:
    APSLogErrorAt();
    goto LABEL_111;
  }
  int v155 = v154(v151);
  if (v155)
  {
    int v161 = v155;
    goto LABEL_341;
  }
  CFMutableDictionaryRef v156 = CFDictionaryCreateMutable(v53, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v156)
  {
    int v161 = -71820;
    goto LABEL_341;
  }
  CFMutableDictionaryRef v157 = v156;
  CFDictionarySetInt64();
  int v158 = FigCFEqual();
  uint64_t v159 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v158)
  {
    a1 = v187;
    if (v159) {
      uint64_t v160 = v159;
    }
    else {
      uint64_t v160 = 0;
    }
    char v163 = *(uint64_t (**)(uint64_t, uint64_t, CFMutableDictionaryRef, long long *))(v160 + 64);
    if (!v163)
    {
      int v165 = -12782;
      goto LABEL_369;
    }
    int v164 = v163(v151, 1819042676, v157, &v203);
    if (v164)
    {
      int v165 = v164;
      goto LABEL_369;
    }
  }
  else
  {
    a1 = v187;
    if (v159) {
      uint64_t v162 = v159;
    }
    else {
      uint64_t v162 = 0;
    }
    CFTypeRef v166 = *(uint64_t (**)(uint64_t, uint64_t, CFMutableDictionaryRef, long long *))(v162 + 64);
    if (!v166)
    {
      int v165 = -12782;
      goto LABEL_369;
    }
    int v167 = v166(v151, 1735287668, v157, &v203);
    if (v167)
    {
      int v165 = v167;
      goto LABEL_369;
    }
  }
  uint64_t v168 = v203;
  uint64_t v169 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v169) {
    uint64_t v170 = v169;
  }
  else {
    uint64_t v170 = 0;
  }
  CFRange v171 = *(uint64_t (**)(uint64_t, void, void, uint64_t))(v170 + 24);
  if (v171)
  {
    int v172 = v171(v168, audioStream_receivedAudioControlMessage, 0, a1);
    if (v172)
    {
      int v165 = v172;
    }
    else
    {
      uint64_t v173 = v203;
      uint64_t v174 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v174) {
        uint64_t v175 = v174;
      }
      else {
        uint64_t v175 = 0;
      }
      CGSize v176 = *(uint64_t (**)(uint64_t))(v175 + 8);
      if (v176)
      {
        int v165 = v176(v173);
        if (!v165)
        {
          CFBooleanRef v185 = (const void *)v203;
          *(void *)&long long v203 = 0;
          goto LABEL_370;
        }
      }
      else
      {
        int v165 = -12782;
      }
    }
  }
  else
  {
    int v165 = -12782;
  }
LABEL_369:
  APSLogErrorAt();
  CFBooleanRef v185 = 0;
LABEL_370:
  CFRelease(v157);
  if ((void)v203)
  {
    uint64_t v177 = FigTransportStreamGetCMBaseObject();
    if (v177)
    {
      uint64_t v178 = v177;
      uint64_t v179 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v180 = v179 ? v179 : 0;
      CMTime v181 = *(void (**)(uint64_t))(v180 + 24);
      if (v181) {
        v181(v178);
      }
    }
    CFRelease((CFTypeRef)v203);
  }
  unsigned int v198 = v165;
  if (v165)
  {
    uint64_t v9 = v190;
    CFStringRef v10 = v185;
    goto LABEL_342;
  }
  if (gLogCategory_APEndpointStreamAudio <= 50
    && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  APSGetFBOPropertyInt64();
  CFDataRef v22 = theData;
  if (v198) {
    goto LABEL_398;
  }
LABEL_39:
  if (v5[137])
  {
    unsigned int v198 = RandomBytes();
    if (v198)
    {
LABEL_398:
      APSLogErrorAt();
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      CFMutableDictionaryRef v14 = 0;
      goto LABEL_409;
    }
  }
  CFTypeRef value = v197;
  LODWORD(cf) = 0;
  uint64_t v184 = CMBaseObjectGetDerivedStorage();
  v206[0] = 0;
  uint64_t v23 = CMBaseObjectGetDerivedStorage();
  uint64_t v205 = 0;
  long long v203 = 0u;
  long long v204 = 0u;
  LODWORD(v202) = 0;
  LODWORD(v201) = 0;
  AudioModeForEndpointStream = APSenderSessionUtilityGetAudioModeForEndpointStream();
  int v25 = APAudioFormatToCompressionType();
  uint64_t v186 = (uint64_t)v11;
  if (v25)
  {
    int v27 = v25;
LABEL_393:
    APSLogErrorAt();
    goto LABEL_417;
  }
  int v26 = APAudioFormatToASBD();
  int v27 = v26;
  if (*(_DWORD *)(v23 + 104)) {
    DWORD1(v204) = *(_DWORD *)(v23 + 104);
  }
  if (v26) {
    goto LABEL_393;
  }
  CFAllocatorRef v28 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFTypeRef v29 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v29)
  {
    dispatch_queue_t v30 = v29;
    BOOL v31 = (const void *)*MEMORY[0x1E4F1CFD0];
    CFDictionarySetValue(v29, @"supportsDynamicStreamID", (const void *)*MEMORY[0x1E4F1CFD0]);
    uint64_t v32 = (const void *)*MEMORY[0x1E4F1CFC8];
    if (*(unsigned char *)(v23 + 120)) {
      uint64_t v33 = v31;
    }
    else {
      uint64_t v33 = (const void *)*MEMORY[0x1E4F1CFC8];
    }
    CFDictionarySetValue(v30, @"isMedia", v33);
    CFDictionarySetInt64();
    CFDictionarySetInt64();
    CFDictionarySetInt64();
    CFDictionarySetInt64();
    CFDictionarySetInt64();
    if (*(int *)(v23 + 100) >= 1) {
      CFDictionarySetInt64();
    }
    if (FigCFEqual()) {
      CFDictionarySetValue(v30, @"disableRetransmits", v31);
    }
    if (*(unsigned char *)(v23 + 121)) {
      CFDictionarySetValue(v30, @"usingScreen", v31);
    }
    if (*(unsigned char *)(v23 + 304)) {
      CFDictionarySetValue(v30, @"HTFTIsActive", v31);
    }
    CFDictionarySetInt64();
    if (v22)
    {
      CFDataGetBytePtr(v22);
      CFDataGetLength(theData);
      CFDataRef v22 = theData;
      CFDictionarySetData();
    }
    CFDictionarySetValue(v30, @"audioMode", AudioModeForEndpointStream);
    if (!*(unsigned char *)(v23 + 136))
    {
      CFDictionarySetInt64();
      uint64_t v41 = v184;
LABEL_80:
      LODWORD(cf) = 0;
      uint64_t v45 = *(void *)(v41 + 56);
      uint64_t v46 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v46) {
        uint64_t v47 = v46;
      }
      else {
        uint64_t v47 = 0;
      }
      uint64_t v48 = *(uint64_t (**)(uint64_t, uint64_t, __CFDictionary *, CFTypeRef *, CFTypeRef *, void))(v47 + 40);
      if (v48)
      {
        LODWORD(cf) = v48(v45, 96, v30, v206, &v195, 0);
        if (!cf)
        {
          CFDataRef theDataa = (CFDataRef)CFDictionaryGetInt64();
          if (*(unsigned char *)(v41 + 136))
          {
            CFDictionaryGetTypeID();
            CFDictionaryGetTypedValue();
            if (!cf)
            {
              if (*(unsigned char *)(v41 + 139))
              {
                uint64_t v13 = 0;
                goto LABEL_127;
              }
              CFDictionaryGetTypeID();
              Typedint Value = (const __CFDictionary *)CFDictionaryGetTypedValue();
              if (!cf)
              {
                CFDictionaryGetInt64();
                if (cf)
                {
                  APSLogErrorAt();
                }
                else
                {
                  if (!CFDictionaryContainsKey(TypedValue, @"streamConnectionKeyNetworkInfo"))
                  {
                    uint64_t v13 = 0;
                    goto LABEL_125;
                  }
                  CFDictionaryGetTypeID();
                  long long v62 = (const void *)CFDictionaryGetTypedValue();
                  if (v62)
                  {
                    uint64_t v13 = v62;
                    CFRetain(v62);
LABEL_125:
                    CFDictionaryGetTypeID();
                    CFDictionaryGetTypedValue();
                    if (cf) {
                      goto LABEL_130;
                    }
                    CFDictionaryGetInt64();
                    if (cf) {
                      goto LABEL_130;
                    }
LABEL_127:
                    if (*(unsigned char *)(v41 + 137))
                    {
                      CFDictionaryGetTypeID();
                      CFDictionaryGetTypedValue();
                      if (cf || (CFDictionaryGetInt64(), cf))
                      {
LABEL_130:
                        APSLogErrorAt();
                        goto LABEL_132;
                      }
                    }
LABEL_131:
                    CFDictionaryGetInt64Ranged();
                    goto LABEL_132;
                  }
                  APSLogErrorAt();
                  LODWORD(cf) = -6727;
                  if (gLogCategory_APEndpointStreamAudio <= 90
                    && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
                  {
                    LogPrintF();
                  }
                }
                uint64_t v13 = 0;
                goto LABEL_132;
              }
            }
          }
          else
          {
            CFDictionaryGetInt64();
            if (!cf)
            {
              CFDictionaryGetInt64();
              if (!cf)
              {
                uint64_t v13 = 0;
                goto LABEL_131;
              }
            }
          }
          APSLogErrorAt();
LABEL_91:
          uint64_t v13 = 0;
LABEL_132:
          CFRelease(v30);
          goto LABEL_133;
        }
      }
      else
      {
        LODWORD(cf) = -12782;
      }
      APSLogErrorAt();
      CFDataRef theDataa = 0;
      goto LABEL_91;
    }
    CFMutableDictionaryRef v34 = CFDictionaryCreateMutable(v28, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v34)
    {
      uint64_t v35 = v34;
      if (!*(unsigned char *)(v23 + 139))
      {
        CFTypeRef v36 = CFDictionaryCreateMutable(v28, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (!v36)
        {
          APSLogErrorAt();
          CFMutableDictionaryRef v39 = 0;
LABEL_412:
          int v27 = -6728;
          goto LABEL_415;
        }
        int v37 = v36;
        if (v183 | (unint64_t)v22) {
          CFTypeID v38 = v31;
        }
        else {
          CFTypeID v38 = v32;
        }
        CFDictionarySetValue(v36, @"streamConnectionKeyUseStreamEncryptionKey", v38);
        if (value) {
          CFDictionarySetValue(v37, @"streamConnectionKeyNetworkInfo", value);
        }
        CFDictionarySetValue(v35, @"streamConnectionTypeRTP", v37);
        CFRelease(v37);
        CFMutableDictionaryRef v39 = CFDictionaryCreateMutable(v28, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (!v39)
        {
LABEL_411:
          APSLogErrorAt();
          goto LABEL_412;
        }
        int v40 = CFDictionarySetInt64();
        if (v40)
        {
          int v27 = v40;
LABEL_414:
          APSLogErrorAt();
LABEL_415:
          CFRelease(v30);
          CFRelease(v35);
          if (v39) {
            CFRelease(v39);
          }
          goto LABEL_417;
        }
        CFDictionarySetValue(v35, @"streamConnectionTypeRTCP", v39);
        CFRelease(v39);
      }
      uint64_t v41 = v184;
      if (!*(unsigned char *)(v23 + 137))
      {
LABEL_75:
        CFDictionarySetValue(v30, @"streamConnections", v35);
        CFRelease(v35);
        goto LABEL_80;
      }
      CFMutableDictionaryRef v39 = CFDictionaryCreateMutable(v28, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v39)
      {
        int v42 = CFDictionarySetInt64();
        if (!v42)
        {
          CFDictionarySetValue(v35, @"streamConnectionTypeMediaDataControl", v39);
          CFRelease(v39);
          goto LABEL_75;
        }
        int v27 = v42;
        goto LABEL_414;
      }
      goto LABEL_411;
    }
    APSLogErrorAt();
    CFRelease(v30);
  }
  else
  {
    APSLogErrorAt();
  }
  int v27 = -6728;
LABEL_417:
  LODWORD(cf) = v27;
  APSLogErrorAt();
  CFDataRef theDataa = 0;
  uint64_t v13 = 0;
LABEL_133:
  if (v206[0]) {
    CFRelease(v206[0]);
  }
  unsigned int v198 = cf;
  if (cf) {
    goto LABEL_421;
  }
  if (gLogCategory_APEndpointStreamAudio <= 50
    && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1D25EB370](*((void *)v5 + 19));
  *((void *)v5 + 30) = MillisecondsToUpTicks();
  if (v195) {
    *((void *)v5 + 29) = CFRetain(v195);
  }
  MEMORY[0x1D25EB390](*((void *)v5 + 19));
  if (!v5[139])
  {
    unsigned int v198 = APSSetFBOPropertyInt64();
    if (v198) {
      goto LABEL_421;
    }
    CFTypeRef v11 = (const void *)v186;
    if (!v13 || (unsigned int v198 = FigTransportStreamSetProperty(v186, *MEMORY[0x1E4F477C0], (uint64_t)v13)) == 0)
    {
      unsigned int v198 = APSSetFBOPropertyInt64();
      if (!v198)
      {
        if (CFDictionaryGetInt64()) {
          goto LABEL_149;
        }
        unsigned int v198 = FigTransportStreamResume(v186);
        if (!v198) {
          goto LABEL_149;
        }
LABEL_421:
        APSLogErrorAt();
        uint64_t v12 = 0;
        CFMutableDictionaryRef v14 = 0;
        a1 = v187;
        goto LABEL_422;
      }
    }
    APSLogErrorAt();
    uint64_t v12 = 0;
    CFMutableDictionaryRef v14 = 0;
    a1 = v187;
LABEL_409:
    uint64_t v9 = v190;
    CFStringRef v10 = v185;
    goto LABEL_209;
  }
LABEL_149:
  if (!v5[137])
  {
    uint64_t v12 = 0;
    a1 = v187;
LABEL_190:
    uint64_t v92 = CMBaseObjectGetDerivedStorage();
    if (gLogCategory_APEndpointStreamAudio <= 30
      && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(_OWORD *)(v92 + 328) = 0u;
    *(_OWORD *)(v92 + 344) = 0u;
    uint64_t v93 = *(NSObject **)(v92 + 320);
    dispatch_time_t v94 = dispatch_time(0, 1000000000);
    dispatch_source_set_timer(v93, v94, 0x12A05F200uLL, 0x3B9ACA00uLL);
    *(void *)(v92 + 392) = mach_absolute_time();
    *(void *)(v92 + 400) = 60;
    *(void *)(v92 + 408) = mach_absolute_time();
    *(void *)(v92 + 416) = (int)FigGetCFPreferenceNumberWithDefault();
    *(void *)(v92 + 440) = 0;
    *(_OWORD *)(v92 + 360) = 0u;
    *(_OWORD *)(v92 + 376) = 0u;
    CFAllocatorRef v95 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableArrayRef v96 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 5, MEMORY[0x1E4F1D510]);
    *(void *)(v92 + 448) = v96;
    CFTypeRef v11 = (const void *)v186;
    if (v96 && (CFMutableArrayRef v97 = CFArrayCreateMutable(v95, 5, MEMORY[0x1E4F1D510]), (*(void *)(v92 + 456) = v97) != 0))
    {
      uint64_t v98 = 5;
      do
      {
        CFArrayAppendInt64();
        CFArrayAppendInt64();
        --v98;
      }
      while (v98);
    }
    else
    {
      APSLogErrorAt();
    }
    CFMutableDictionaryRef v14 = CFDictionaryCreateMutable(v95, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v14)
    {
      FigCFDictionarySetValue();
      APSEndpointStreamAudioHoseRegistrarProtocolGetProtocolID();
      uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable && (uint64_t v100 = *(void *)(ProtocolVTable + 16)) != 0)
      {
        CFIndex v101 = *(uint64_t (**)(CFTypeRef, uint64_t, CFMutableDictionaryRef, uint64_t *))(v100 + 8);
        if (v101)
        {
          uint64_t v9 = v190;
          unsigned int v198 = v101(v190, a1, v14, &v191);
          if (!v198)
          {
            MEMORY[0x1D25EB370](*((void *)v5 + 19));
            *((void *)v5 + 20) = theDataa;
            *((void *)v5 + 21) = v185;
            *((void *)v5 + 22) = v186;
            *((void *)v5 + 23) = v12;
            audioStream_updateIsResumedAndPostNotification(a1, 1);
            audioStream_updateDynamicLatencyOffsetInternal();
            uint64_t v102 = v191;
            *((void *)v5 + 27) = v190;
            *((void *)v5 + 28) = v102;
            ++*((_DWORD *)v5 + 65);
            MEMORY[0x1D25EB390](*((void *)v5 + 19));
            *((void *)v5 + 36) = 0;
            APSIOReporterGetCoreCaptureCount();
            unsigned int v198 = 0;
            if (gLogCategory_APEndpointStreamAudio <= 50
              && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            CMNotificationCenterGetDefaultLocalCenter();
            FigDispatchAsyncPostNotification();
            CFStringRef v10 = 0;
            CFTypeRef v11 = 0;
            uint64_t v12 = 0;
            goto LABEL_307;
          }
LABEL_208:
          CFStringRef v10 = v185;
          APSLogErrorAt();
          goto LABEL_209;
        }
        int v103 = -12782;
      }
      else
      {
        int v103 = -12788;
      }
      unsigned int v198 = v103;
      uint64_t v9 = v190;
      goto LABEL_208;
    }
    APSLogErrorAt();
    unsigned int v198 = -16611;
    goto LABEL_409;
  }
  uint64_t v67 = *((void *)v5 + 7);
  uint64_t v68 = v196;
  *(void *)&long long v203 = 0;
  uint64_t v69 = APTransportStreamIDMakeWithPort();
  v206[0] = 0;
  uint64_t v70 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v70) {
    uint64_t v71 = v70;
  }
  else {
    uint64_t v71 = 0;
  }
  unsigned int v72 = *(uint64_t (**)(uint64_t))(v71 + 24);
  if (!v72)
  {
    int v78 = -12782;
LABEL_160:
    APSLogErrorAt();
    CFMutableDictionaryRef v75 = 0;
LABEL_169:
    CFStringRef v85 = 0;
LABEL_170:
    a1 = v187;
    goto LABEL_171;
  }
  int v73 = v72(v67);
  if (v73)
  {
    int v78 = v73;
    goto LABEL_160;
  }
  CFAllocatorRef v74 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef v75 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v75)
  {
    APSLogErrorAt();
    CFStringRef v85 = 0;
    int v78 = -6728;
    goto LABEL_170;
  }
  CFDictionarySetInt64();
  CFDictionarySetInt64();
  CFDictionarySetInt64();
  uint64_t v76 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v76) {
    uint64_t v77 = v76;
  }
  else {
    uint64_t v77 = 0;
  }
  long long v79 = *(uint64_t (**)(uint64_t, uint64_t, CFMutableDictionaryRef, long long *))(v77 + 64);
  if (!v79)
  {
    int v78 = -12782;
LABEL_168:
    APSLogErrorAt();
    goto LABEL_169;
  }
  int v80 = v79(v67, v69, v75, &v203);
  if (v80)
  {
    int v78 = v80;
    goto LABEL_168;
  }
  int v81 = APSSetFBOPropertyInt64();
  if (v81)
  {
    int v78 = v81;
    goto LABEL_168;
  }
  uint64_t v82 = APSenderSessionGetCMBaseObject(v67);
  uint64_t v83 = *(void *)(CMBaseObjectGetVTable() + 8);
  a1 = v187;
  if (v83) {
    uint64_t v84 = v83;
  }
  else {
    uint64_t v84 = 0;
  }
  long long v120 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v84 + 48);
  if (!v120)
  {
    int v78 = -12782;
LABEL_256:
    APSLogErrorAt();
    CFStringRef v85 = 0;
    goto LABEL_171;
  }
  int v121 = v120(v82, @"KeyHolder", v74, v206);
  if (v121)
  {
    int v78 = v121;
    goto LABEL_256;
  }
  CFStringRef v85 = APKeyHolderCoreUtilsEncryptionContextDataStreamCreateWithSeed(v74, v68);
  if (!v85)
  {
    APSLogErrorAt();
    int v78 = -6728;
LABEL_171:
    if ((void)v203)
    {
      uint64_t v86 = FigTransportStreamGetCMBaseObject();
      if (v86)
      {
        uint64_t v87 = v86;
        uint64_t v88 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v89 = v88 ? v88 : 0;
        uint64_t v90 = *(void (**)(uint64_t))(v89 + 24);
        if (v90) {
          v90(v87);
        }
      }
      CFRelease((CFTypeRef)v203);
      *(void *)&long long v203 = 0;
    }
    CFDictionaryRef v91 = 0;
    uint64_t v12 = 0;
    if (!v75) {
      goto LABEL_181;
    }
    goto LABEL_180;
  }
  uint64_t v122 = v203;
  CFTypeRef v123 = v206[0];
  uint64_t v124 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v124) {
    uint64_t v125 = v124;
  }
  else {
    uint64_t v125 = 0;
  }
  uint64_t v141 = *(uint64_t (**)(uint64_t, CFTypeRef, CFStringRef))(v125 + 80);
  if (!v141)
  {
    int v78 = -12782;
LABEL_317:
    APSLogErrorAt();
    goto LABEL_171;
  }
  int v142 = v141(v122, v123, v85);
  if (v142)
  {
    int v78 = v142;
    goto LABEL_317;
  }
  int v143 = APSSetFBOPropertyInt64();
  if (v143)
  {
    int v78 = v143;
    goto LABEL_317;
  }
  int v144 = FigTransportStreamSetMessageCallbacks(v203, (uint64_t)audioStream_receivedMediaDataControlMessage_0, v187);
  if (v144)
  {
    int v78 = v144;
    goto LABEL_317;
  }
  int v145 = FigTransportStreamResume(v203);
  if (v145)
  {
    int v78 = v145;
    goto LABEL_317;
  }
  int v78 = FigTransportStreamWaitUntilConnected(v203);
  if (v78) {
    goto LABEL_317;
  }
  CFDictionaryRef v91 = (const void *)v203;
  *(void *)&long long v203 = 0;
LABEL_180:
  CFRelease(v75);
  uint64_t v12 = v91;
LABEL_181:
  if (v206[0]) {
    CFRelease(v206[0]);
  }
  if (v85) {
    CFRelease(v85);
  }
  unsigned int v198 = v78;
  if (!v78)
  {
    if (gLogCategory_APEndpointStreamAudio <= 50
      && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_190;
  }
  APSLogErrorAt();
  CFMutableDictionaryRef v14 = 0;
LABEL_422:
  uint64_t v9 = v190;
  CFStringRef v10 = v185;
  CFTypeRef v11 = (const void *)v186;
LABEL_209:
  if (v195) {
    CFRelease(v195);
  }
  if (v10)
  {
    uint64_t v104 = FigTransportStreamGetCMBaseObject();
    if (v104)
    {
      uint64_t v105 = v104;
      uint64_t v106 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v107 = v106 ? v106 : 0;
      uint64_t v108 = *(void (**)(uint64_t))(v107 + 24);
      if (v108) {
        v108(v105);
      }
    }
    CFRelease(v10);
  }
  if (v11)
  {
    uint64_t v109 = FigTransportStreamGetCMBaseObject();
    if (v109)
    {
      uint64_t v110 = v109;
      uint64_t v111 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v112 = v111 ? v111 : 0;
      uint64_t v113 = *(void (**)(uint64_t))(v112 + 24);
      if (v113) {
        v113(v110);
      }
    }
    CFRelease(v11);
  }
  if (v12)
  {
    uint64_t v114 = FigTransportStreamGetCMBaseObject();
    if (v114)
    {
      uint64_t v115 = v114;
      uint64_t v116 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v117 = v116 ? v116 : 0;
      int v118 = *(void (**)(uint64_t))(v117 + 24);
      if (v118) {
        v118(v115);
      }
    }
    CFRelease(v12);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v197) {
    CFRelease(v197);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v194) {
    CFRelease(v194);
  }
  if (!v198) {
    return 0;
  }
  audioStream_suspendInternal_0(a1);
  return v198;
}

uint64_t FigTransportStreamSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t CMBaseObject = FigTransportStreamGetCMBaseObject();
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  CFTypeRef v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 56);
  if (!v8) {
    return 4294954514;
  }
  return v8(CMBaseObject, a2, a3);
}

void audioStream_updateDynamicLatencyOffsetInternal()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 193))
  {
    uint64_t v1 = DerivedStorage;
    if (*(void *)(DerivedStorage + 248) == 1 && (int v2 = *(_DWORD *)(DerivedStorage + 96)) != 0) {
      int v3 = v2 - *(_DWORD *)(DerivedStorage + 88);
    }
    else {
      int v3 = 0;
    }
    if (*(_DWORD *)(DerivedStorage + 256) != v3)
    {
      if (gLogCategory_APEndpointStreamAudio <= 50
        && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *(_DWORD *)(v1 + 256) = v3;
      CMBaseObjectGetDerivedStorage();
      uint64_t MutableCopy = (const void *)FigCFDictionaryCreateMutableCopy();
      FigCFDictionarySetInt();
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
      if (MutableCopy)
      {
        CFRelease(MutableCopy);
      }
    }
  }
  else
  {
    APSLogErrorAt();
  }
}

uint64_t audioStream_receivedAudioControlMessage(uint64_t a1, uint64_t a2, const void *a3, const void *a4)
{
  if (a3) {
    CFRetain(a3);
  }
  return APSDispatchAsyncFHelper();
}

void audioStream_receivedAudioControlMessageInternal(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 8) != 1634168383) {
    goto LABEL_16;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  if (*(unsigned char *)(DerivedStorage + 139)) {
    goto LABEL_16;
  }
  uint64_t v3 = DerivedStorage;
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 152));
  uint64_t v4 = *(const void **)(v3 + 216);
  if (v4) {
    CFTypeRef v5 = CFRetain(v4);
  }
  else {
    CFTypeRef v5 = 0;
  }
  int v8 = 0;
  MEMORY[0x1D25EB390](*(void *)(v3 + 152));
  if (v5)
  {
    if (APSTransportMessageGetRetransmitRequest())
    {
      APSLogErrorAt();
      goto LABEL_12;
    }
    if (gLogCategory_APEndpointStreamAudio > 30
      || gLogCategory_APEndpointStreamAudio == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_12;
    }
  }
  else if (gLogCategory_APEndpointStreamAudio > 50 {
         || gLogCategory_APEndpointStreamAudio == -1 && !_LogCategory_Initialize())
  }
  {
    goto LABEL_12;
  }
  LogPrintF();
LABEL_12:
  if (cf) {
    CFRelease(cf);
  }
  if (v5) {
    CFRelease(v5);
  }
LABEL_16:
  CFRelease(*(CFTypeRef *)a1);
  uint64_t v6 = *(const void **)(a1 + 16);
  if (v6) {
    CFRelease(v6);
  }
}

void audioStream_receivedMediaDataControlMessage_0(uint64_t a1, int a2)
{
  CFErrorRef error = 0;
  if (gLogCategory_APEndpointStreamAudio <= 50
    && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a2 != 1919513459 && a2 != 1918989680) {
    goto LABEL_48;
  }
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (FigCreateCFDataWithBlockBufferNoCopy())
  {
    APSLogErrorAt();
LABEL_48:
    CFDictionaryRef v5 = 0;
    goto LABEL_49;
  }
  CFDictionaryRef v4 = (const __CFDictionary *)CFPropertyListCreateWithData(v3, 0, 0, 0, &error);
  CFDictionaryRef v5 = v4;
  if (error)
  {
    APSLogErrorAt();
    if (gLogCategory_APEndpointStreamAudio <= 90
      && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_49;
  }
  if (!v4)
  {
LABEL_57:
    APSLogErrorAt();
    goto LABEL_49;
  }
  if (a2 == 1918989680)
  {
    CFTypeID v7 = CFGetTypeID(v4);
    if (v7 != CFDictionaryGetTypeID()) {
      goto LABEL_57;
    }
    int v17 = 0;
    CFTypeRef value = 0;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (gLogCategory_APEndpointStreamAudio <= 50
      && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (!FigCFEqual()) {
      goto LABEL_43;
    }
    CFDictionaryGetInt64Ranged();
    if (v17)
    {
      APSLogErrorAt();
      if (gLogCategory_APEndpointStreamAudio > 90
        || gLogCategory_APEndpointStreamAudio == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_43;
      }
    }
    else
    {
      CFDictionaryGetInt64Ranged();
      if (v17 || (CFDictionaryGetInt64(), v17) || !CFDictionaryGetValue(v5, (const void *)*MEMORY[0x1E4F49F08]))
      {
        APSLogErrorAt();
        if (gLogCategory_APEndpointStreamAudio > 90
          || gLogCategory_APEndpointStreamAudio == -1 && !_LogCategory_Initialize())
        {
          goto LABEL_43;
        }
      }
      else
      {
        if (gLogCategory_APEndpointStreamAudio <= 50
          && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        int v17 = APSStatsHistogramCreateFromSerializedDictionary();
        if (!v17)
        {
          uint64_t v11 = APSStatsHistogramCopyAsRTCString();
          if (v11)
          {
            uint64_t v12 = (const void *)v11;
            if (gLogCategory_APEndpointStreamAudio <= 50
              && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            if (*(void *)(DerivedStorage + 48))
            {
              CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              if (Mutable)
              {
                CFMutableDictionaryRef v14 = Mutable;
                CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F49F50], *(const void **)(DerivedStorage + 48));
                MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 152));
                MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 152));
                FigCFDictionarySetInt64();
                FigCFDictionarySetInt64();
                FigCFDictionarySetInt64();
                CFDictionarySetValue(v14, (const void *)*MEMORY[0x1E4F49F58], value);
                CMNotificationCenterGetDefaultLocalCenter();
                FigDispatchAsyncPostNotification();
                CFRelease(v14);
              }
              else
              {
                APSLogErrorAt();
                int v17 = -16761;
              }
            }
            else
            {
              APSLogErrorAt();
              int v17 = -16760;
              if (gLogCategory_APEndpointStreamAudio <= 90
                && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
            }
            CFRelease(v12);
          }
          else
          {
            APSLogErrorAt();
            int v17 = -16761;
          }
LABEL_43:
          if (value) {
            CFRelease(value);
          }
          if (!v17) {
            goto LABEL_49;
          }
          goto LABEL_57;
        }
        APSLogErrorAt();
        if (gLogCategory_APEndpointStreamAudio > 90
          || gLogCategory_APEndpointStreamAudio == -1 && !_LogCategory_Initialize())
        {
          goto LABEL_43;
        }
      }
    }
    LogPrintF();
    goto LABEL_43;
  }
  CFTypeID v6 = CFGetTypeID(v4);
  if (v6 != CFDictionaryGetTypeID()) {
    goto LABEL_57;
  }
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamAudio <= 50
    && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CMBaseObjectGetDerivedStorage();
  CFStringGetTypeID();
  CFDictionaryGetTypedValue();
  if (FigCFEqual())
  {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v3, 0, v5);
    if (MutableCopy)
    {
      CFMutableDictionaryRef v10 = MutableCopy;
      FigCFDictionarySetValue();
      FigCFDictionarySetValue();
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
      CFRelease(v10);
      goto LABEL_49;
    }
    goto LABEL_57;
  }
LABEL_49:
  if (error) {
    CFRelease(error);
  }
  if (v5) {
    CFRelease(v5);
  }
}

void audioStream_enableReceiverCoreCapturesInternal(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)(DerivedStorage + 305));
  if ((v3 & 1) == 0) {
    goto LABEL_27;
  }
  uint64_t v4 = DerivedStorage;
  if (gLogCategory_APEndpointStreamAudio <= 50
    && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(unsigned char *)v4)
  {
    APSLogErrorAt();
LABEL_27:
    uint64_t v9 = 0;
    CFTypeID v6 = 0;
    goto LABEL_15;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFTypeID v6 = Mutable;
  if (!Mutable) {
    goto LABEL_13;
  }
  CFDictionarySetValue(Mutable, @"value", (const void *)*MEMORY[0x1E4F1CFD0]);
  if (!*(unsigned char *)(v4 + 137))
  {
LABEL_14:
    uint64_t v9 = 0;
    goto LABEL_15;
  }
  CFTypeID v7 = *(const void **)(v4 + 184);
  if (!v7 || (CFTypeRef v8 = CFRetain(v7)) == 0)
  {
LABEL_13:
    APSLogErrorAt();
    goto LABEL_14;
  }
  uint64_t v9 = v8;
  if (APTransportStreamSendPlistMessageCreatingPlistReply()) {
    APSLogErrorAt();
  }
LABEL_15:
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  CFMutableDictionaryRef v10 = *(const void **)(a1 + 8);
  if (v10) {
    CFRelease(v10);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (v6)
  {
    CFRelease(v6);
  }
}

void audioStream_triggerReceiverCoreCapturesInternal(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage) {
    goto LABEL_7;
  }
  if (!*(unsigned char *)(DerivedStorage + 137))
  {
LABEL_8:
    CFDictionaryRef v5 = 0;
    goto LABEL_9;
  }
  unsigned __int8 v3 = *(const void **)(DerivedStorage + 184);
  if (!v3 || (CFTypeRef v4 = CFRetain(v3)) == 0)
  {
LABEL_7:
    APSLogErrorAt();
    goto LABEL_8;
  }
  CFDictionaryRef v5 = v4;
  if (APTransportStreamSendPlistMessageCreatingPlistReply()) {
    APSLogErrorAt();
  }
LABEL_9:
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  CFTypeID v6 = *(const void **)(a1 + 8);
  if (v6) {
    CFRelease(v6);
  }
  if (v5)
  {
    CFRelease(v5);
  }
}

uint64_t __audioStream_startSilentAudio_block_invoke(uint64_t a1)
{
  inFormat.mSampleRate = 44100.0;
  *(_OWORD *)&inFormat.int mFormatID = xmmword_1D0B88930;
  *(_OWORD *)&inFormat.mBytesPerFrame = xmmword_1D0B88940;
  if (AudioQueueNewOutput(&inFormat, (AudioQueueOutputCallback)audioStream_silentAudioCallback, 0, 0, 0, 0, (AudioQueueRef *)(*(void *)(a1 + 32) + 496)))
  {
    return APSLogErrorAt();
  }
  uint64_t result = AudioQueueStart(*(AudioQueueRef *)(*(void *)(a1 + 32) + 496), 0);
  if (result) {
    return APSLogErrorAt();
  }
  if (gLogCategory_APEndpointStreamAudio <= 50)
  {
    if (gLogCategory_APEndpointStreamAudio != -1) {
      return LogPrintF();
    }
    uint64_t result = _LogCategory_Initialize();
    if (result) {
      return LogPrintF();
    }
  }
  return result;
}

uint64_t mrcs_getTypeID(uint64_t *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

uint64_t APMediaRemoteCommandSinkCreateWithNowPlayingAppPID(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  CFTypeRef cf = 0;
  CFDictionaryRef v5 = (void *)[objc_alloc((Class)getMRClientClass_0[0]()) initWithProcessIdentifier:a2 bundleIdentifier:0];
  if (!v5)
  {
    APSLogErrorAt();
    CFTypeID v7 = 0;
    CFTypeID v6 = 0;
LABEL_14:
    uint64_t v9 = 4294960568;
    goto LABEL_10;
  }
  CFTypeID v6 = (void *)[objc_alloc((Class)getMRPlayerPathClass_0[0]()) initWithOrigin:0 client:v5 player:0];
  if (!v6)
  {
    APSLogErrorAt();
    CFTypeID v7 = 0;
    goto LABEL_14;
  }
  CFTypeID v7 = (void *)[objc_alloc((Class)getMRDestinationClass_0[0]()) initWithPlayerPath:v6];
  if (!v7)
  {
    APSLogErrorAt();
    goto LABEL_14;
  }
  uint64_t v8 = mrcs_createWithMRDestination(a1, (uint64_t)v7, &cf);
  if (v8)
  {
    uint64_t v9 = v8;
    APSLogErrorAt();
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    if (gLogCategory_APMediaRemoteCommandSink <= 50
      && (gLogCategory_APMediaRemoteCommandSink != -1 || _LogCategory_Initialize()))
    {
      [v6 description];
      LogPrintF();
    }
    uint64_t v9 = 0;
    *a3 = cf;
  }
LABEL_10:

  return v9;
}

uint64_t mrcs_createWithMRDestination(uint64_t a1, uint64_t a2, void *a3)
{
  if (APMediaRemoteCommandSinkGetTypeID_sInitOnce != -1) {
    dispatch_once_f(&APMediaRemoteCommandSinkGetTypeID_sInitOnce, &APMediaRemoteCommandSinkGetTypeID_sTypeID, (dispatch_function_t)mrcs_getTypeID);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    APSLogErrorAt();
    return 4294960568;
  }
  CFTypeID v6 = (void *)Instance;
  *(void *)(Instance + 16) = 0;
  *(void *)(Instance + 24) = 0;
  if (!a2)
  {
    uint64_t v8 = 4294960591;
LABEL_11:
    APSLogErrorAt();
    CFRelease(v6);
    return v8;
  }
  uint64_t v7 = [objc_alloc(getMRNowPlayingControllerClass_0()) initWithDestination:a2];
  v6[3] = v7;
  if (!v7)
  {
    uint64_t v8 = 4294960568;
    goto LABEL_11;
  }
  uint64_t v8 = 0;
  *a3 = v6;
  return v8;
}

uint64_t APMediaRemoteCommandSinkCreateWithRoutingContextUUID(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  CFTypeRef cf = 0;
  CFDictionaryRef v5 = (void *)[objc_alloc((Class)getMRDestinationClass_0[0]()) initWithOutputContextUID:a2];
  if (v5)
  {
    uint64_t v6 = mrcs_createWithMRDestination(a1, (uint64_t)v5, &cf);
    if (v6)
    {
      uint64_t v7 = v6;
      APSLogErrorAt();
      if (cf) {
        CFRelease(cf);
      }
    }
    else
    {
      if (gLogCategory_APMediaRemoteCommandSink <= 50
        && (gLogCategory_APMediaRemoteCommandSink != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      uint64_t v7 = 0;
      *a3 = cf;
    }
  }
  else
  {
    APSLogErrorAt();
    uint64_t v7 = 4294960568;
  }

  return v7;
}

uint64_t APMediaRemoteCommandSinkHandleAPCommand(uint64_t result, int a2)
{
  uint64_t v3 = result;
  if (gLogCategory_APMediaRemoteCommandSink <= 50)
  {
    if (gLogCategory_APMediaRemoteCommandSink != -1 || (uint64_t result = _LogCategory_Initialize(), result)) {
      uint64_t result = LogPrintF();
    }
  }
  if (a2 <= 1886154866)
  {
    if (a2 <= 1852404844)
    {
      if (a2 <= 1685086580)
      {
        if (a2 == 1650878052)
        {
          *(_DWORD *)(v3 + 16) = 1;
          uint64_t v4 = 8;
          goto LABEL_65;
        }
        if (a2 == 1651668836)
        {
          *(_DWORD *)(v3 + 16) = -1;
          uint64_t v4 = 10;
          goto LABEL_65;
        }
        goto LABEL_51;
      }
      if (a2 != 1685086581)
      {
        if (a2 == 1852008560)
        {
          uint64_t v4 = 100;
          goto LABEL_65;
        }
        goto LABEL_51;
      }
    }
    else
    {
      if (a2 > 1885959276)
      {
        if (a2 != 1885959277)
        {
          if (a2 == 1886151033)
          {
            if (gLogCategory_APMediaRemoteCommandSink <= 50
              && (gLogCategory_APMediaRemoteCommandSink != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            uint64_t v4 = 0;
            goto LABEL_65;
          }
          if (a2 == 1886151528)
          {
            uint64_t v4 = 101;
LABEL_65:
            return APMediaRemoteCommandSinkHandleMRCommand(v3, v4, 0);
          }
          goto LABEL_51;
        }
LABEL_39:
        uint64_t v4 = 5;
        goto LABEL_65;
      }
      if (a2 == 1852404845)
      {
        uint64_t v4 = 4;
        goto LABEL_65;
      }
      if (a2 != 1885435251) {
        goto LABEL_51;
      }
    }
    uint64_t v4 = 1;
    goto LABEL_65;
  }
  if (a2 <= 1936225382)
  {
    if (a2 <= 1919967587)
    {
      if (a2 == 1886154867)
      {
        uint64_t v4 = 2;
        goto LABEL_65;
      }
      if (a2 == 1886155379)
      {
        int v5 = *(_DWORD *)(v3 + 16);
        if (v5 == -1)
        {
          uint64_t v4 = 11;
        }
        else if (v5 == 1)
        {
          uint64_t v4 = 9;
        }
        else
        {
          if (gLogCategory_APMediaRemoteCommandSink <= 50
            && (gLogCategory_APMediaRemoteCommandSink != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          uint64_t v4 = 0;
        }
        *(_DWORD *)(v3 + 16) = 0;
        goto LABEL_65;
      }
      goto LABEL_51;
    }
    if (a2 == 1919967588)
    {
      uint64_t v4 = 7;
      goto LABEL_65;
    }
    if (a2 != 1920166260) {
      goto LABEL_51;
    }
    goto LABEL_39;
  }
  if (a2 <= 1936420965)
  {
    if (a2 == 1936225383)
    {
      uint64_t v4 = 6;
      goto LABEL_65;
    }
    if (a2 == 1936420962)
    {
      uint64_t v4 = 18;
      goto LABEL_65;
    }
  }
  else
  {
    switch(a2)
    {
      case 1936420966:
        uint64_t v4 = 17;
        goto LABEL_65;
      case 1936748403:
        uint64_t v4 = 24;
        goto LABEL_65;
      case 1937010544:
        uint64_t v4 = 3;
        goto LABEL_65;
    }
  }
LABEL_51:
  if (gLogCategory_APMediaRemoteCommandSink <= 60)
  {
    if (gLogCategory_APMediaRemoteCommandSink != -1) {
      return LogPrintF();
    }
    uint64_t result = _LogCategory_Initialize();
    if (result) {
      return LogPrintF();
    }
  }
  return result;
}

uint64_t APMediaRemoteCommandSinkHandleMRCommand(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (gLogCategory_APMediaRemoteCommandSink <= 50
    && (gLogCategory_APMediaRemoteCommandSink != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v6 = *(void **)(a1 + 24);
  return [v6 sendCommand:a2 options:a3 completion:0];
}

void mrcs_Finalize(uint64_t a1)
{
  if (gLogCategory_APMediaRemoteCommandSink <= 50
    && (gLogCategory_APMediaRemoteCommandSink != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }

  *(void *)(a1 + 24) = 0;
}

Class initMRClient_0()
{
  if (MediaRemoteLibrary_sOnce_1 != -1) {
    dispatch_once(&MediaRemoteLibrary_sOnce_1, &__block_literal_global_31);
  }
  Class result = objc_getClass("MRClient");
  classMRClient_0 = (uint64_t)result;
  getMRClientClass_0[0] = MRClientFunction_0;
  return result;
}

uint64_t MRClientFunction_0()
{
  return classMRClient_0;
}

void *__MediaRemoteLibrary_block_invoke_1()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote", 2);
  MediaRemoteLibrary_sLib_1 = (uint64_t)result;
  return result;
}

Class initMRPlayerPath_0()
{
  if (MediaRemoteLibrary_sOnce_1 != -1) {
    dispatch_once(&MediaRemoteLibrary_sOnce_1, &__block_literal_global_31);
  }
  Class result = objc_getClass("MRPlayerPath");
  classMRPlayerPath_0 = (uint64_t)result;
  getMRPlayerPathClass_0[0] = MRPlayerPathFunction_0;
  return result;
}

uint64_t MRPlayerPathFunction_0()
{
  return classMRPlayerPath_0;
}

Class initMRDestination_0()
{
  if (MediaRemoteLibrary_sOnce_1 != -1) {
    dispatch_once(&MediaRemoteLibrary_sOnce_1, &__block_literal_global_31);
  }
  Class result = objc_getClass("MRDestination");
  classMRDestination_0 = (uint64_t)result;
  getMRDestinationClass_0[0] = MRDestinationFunction_0;
  return result;
}

uint64_t MRDestinationFunction_0()
{
  return classMRDestination_0;
}

Class initMRNowPlayingController_0()
{
  if (MediaRemoteLibrary_sOnce_1 != -1) {
    dispatch_once(&MediaRemoteLibrary_sOnce_1, &__block_literal_global_31);
  }
  Class result = objc_getClass("MRNowPlayingController");
  classMRNowPlayingController_0 = (uint64_t)result;
  getMRNowPlayingControllerClass_0 = MRNowPlayingControllerFunction_0;
  return result;
}

uint64_t MRNowPlayingControllerFunction_0()
{
  return classMRNowPlayingController_0;
}

uint64_t APEndpointClusterCreate(const __CFAllocator *a1, const void *a2, const void *a3, int a4, const void *a5, uint64_t a6, const void *a7, uint64_t a8, CFTypeRef *a9)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  CFTypeRef v40 = 0;
  int v39 = 0;
  CFTypeRef cf = 0;
  if (!a4 || !a7)
  {
LABEL_65:
    APSLogErrorAt();
    uint64_t v34 = 4294950576;
LABEL_66:
    if (v40) {
      CFRelease(v40);
    }
    goto LABEL_49;
  }
  FigEndpointExtendedGetClassID();
  uint64_t v16 = CMDerivedObjectCreate();
  if (v16)
  {
    uint64_t v34 = v16;
LABEL_64:
    APSLogErrorAt();
    goto LABEL_66;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)uint64_t DerivedStorage = a4;
  uint64_t v18 = FigSimpleMutexCreate();
  *(void *)(DerivedStorage + 208) = v18;
  if (!v18) {
    goto LABEL_63;
  }
  *(void *)(DerivedStorage + 16) = CFRetain(a3);
  *(void *)(DerivedStorage + 24) = a6;
  *(void *)(DerivedStorage + 32) = CFRetain(a7);
  TextToHardwareAddress();
  *(void *)(DerivedStorage + 96) = CFDataCreate(a1, bytes, 6);
  CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *(void *)(DerivedStorage + 632) = Mutable;
  if (!Mutable) {
    goto LABEL_63;
  }
  *(unsigned char *)(DerivedStorage + 368) = 1;
  CFTypeRef v21 = a5 ? CFRetain(a5) : 0;
  *(void *)(DerivedStorage + 216) = v21;
  *(void *)(DerivedStorage + 224) = CFRetain(&stru_1F26D66A0);
  CFMutableArrayRef v22 = CFArrayCreateMutable(v19, 0, MEMORY[0x1E4F1D510]);
  *(void *)(DerivedStorage + 264) = v22;
  if (!v22
    || (CFMutableDictionaryRef v23 = CFDictionaryCreateMutable(v19, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]),
        (*(void *)(DerivedStorage + 272) = v23) == 0)
    || (CFMutableArrayRef v24 = CFArrayCreateMutable(v19, 0, MEMORY[0x1E4F1D510]), (*(void *)(DerivedStorage + 624) = v24) == 0))
  {
LABEL_63:
    APSLogErrorAt();
    uint64_t v34 = 4294950575;
    goto LABEL_66;
  }
  *(unsigned char *)(DerivedStorage + 184) = 0;
  if (!FigCFDictionaryGetBooleanIfPresent()) {
    *(unsigned char *)(DerivedStorage + 184) = APSSettingsIsFeatureEnabled();
  }
  *(_DWORD *)(DerivedStorage + 112) = APSSettingsGetIntWithOverrideAndDefault();
  *(void *)(DerivedStorage + 168) = (int)APSSettingsGetIntWithOverrideAndDefault();
  *(void *)(DerivedStorage + 120) = (int)APSSettingsGetIntWithOverrideAndDefault();
  *(void *)(DerivedStorage + 128) = (int)APSSettingsGetIntWithOverrideAndDefault();
  *(void *)(DerivedStorage + 136) = (int)APSSettingsGetIntWithOverrideAndDefault();
  *(void *)(DerivedStorage + 144) = (int)APSSettingsGetIntWithOverrideAndDefault();
  *(void *)(DerivedStorage + 152) = (int)APSSettingsGetIntWithOverrideAndDefault();
  *(void *)(DerivedStorage + 160) = (int)APSSettingsGetIntWithOverrideAndDefault();
  *(void *)(DerivedStorage + 176) = 0x3C000001E0;
  if (IsAppleInternalBuild())
  {
    *(_DWORD *)(DerivedStorage + 176) = APSSettingsGetIntWithOverrideAndDefault();
    *(_DWORD *)(DerivedStorage + 180) = APSSettingsGetIntWithOverrideAndDefault();
  }
  if (!FigCFDictionaryGetIntIfPresent())
  {
    if (IsAppleTV())
    {
      int v28 = 4;
    }
    else
    {
      if (!APSIsAPMSpeaker())
      {
        *(_DWORD *)(DerivedStorage + 188) = 0;
        goto LABEL_31;
      }
      int v28 = 7;
    }
    *(_DWORD *)(DerivedStorage + 188) = v28;
    goto LABEL_31;
  }
  *(_DWORD *)(DerivedStorage + 188) = v39;
  if (a2)
  {
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v26) {
      uint64_t v27 = v26;
    }
    else {
      uint64_t v27 = 0;
    }
    CFTypeRef v29 = *(void (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v27 + 48);
    if (v29) {
      v29(CMBaseObject, *MEMORY[0x1E4F20FB8], v19, &cf);
    }
    if (FigCFEqual() != (*(_DWORD *)(DerivedStorage + 188) == 4)
      || FigCFEqual() != (*(_DWORD *)(DerivedStorage + 188) == 7))
    {
      goto LABEL_65;
    }
  }
LABEL_31:
  CFDictionaryRef Value = (const __CFDictionary *)FigCFDictionaryGetValue();
  if (Value)
  {
    CFDictionaryRef Copy = CFDictionaryCreateCopy(v19, Value);
    *(void *)(DerivedStorage + 104) = Copy;
    if (!Copy) {
      goto LABEL_63;
    }
  }
  SNPrintF();
  dispatch_queue_t v32 = dispatch_queue_create(label, 0);
  *(void *)(DerivedStorage + 40) = v32;
  if (!v32) {
    goto LABEL_63;
  }
  if (a2)
  {
    CFTypeRef v33 = CFRetain(a2);
    *(void *)(DerivedStorage + 8) = v33;
    CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 264), v33);
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 208));
    uint64_t v34 = endpointCluster_updateFromSubEndpoint(v40, *(const void **)(DerivedStorage + 8), 0, 1, 1, 0);
    MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 208));
    if (v34) {
      goto LABEL_64;
    }
  }
  uint64_t v35 = (CFTypeRef *)(CMBaseObjectGetDerivedStorage() + 192);
  if (*v35)
  {
    CFRelease(*v35);
    *uint64_t v35 = 0;
  }
  if (APSEventRecorderCreate()) {
    APSLogErrorAt();
  }
  else {
    APSEventRecorderAddSignPostForEvent();
  }
  *(CFAbsoluteTime *)(DerivedStorage + 200) = CFAbsoluteTimeGetCurrent();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    APSClusterTypeToDescriptionString();
    LogPrintF();
  }
  uint64_t v34 = 0;
  *a9 = v40;
  CFTypeRef v40 = 0;
LABEL_49:
  if (cf) {
    CFRelease(cf);
  }
  return v34;
}

uint64_t FigEndpointCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  CFMutableDictionaryRef v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10) {
    return 4294954514;
  }
  return v10(CMBaseObject, a2, a3, a4);
}

uint64_t endpointCluster_handleSubEndpointVolumeDidChange(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5)
{
  int v18 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  key = 0;
  if (a5)
  {
    uint64_t v9 = DerivedStorage;
    CFNumberGetTypeID();
    TypedCFDictionaryRef Value = (const void *)CFDictionaryGetTypedValue();
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    MEMORY[0x1D25EB370](*(void *)(v9 + 208));
    if (endpointCluster_isSubEndpointVolumeLeader(a2, a4))
    {
      if (gLogCategory_APEndpointCluster <= 50
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (*(_DWORD *)v9 == 3)
      {
        uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
        uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v13 = v12 ? v12 : 0;
        CFMutableDictionaryRef v14 = *(void (**)(uint64_t, __CFString *, void, void **))(v13 + 48);
        if (v14)
        {
          v14(CMBaseObject, @"RoomUUID", *MEMORY[0x1E4F1CF80], &key);
          if (key) {
            CFDictionaryReplaceValue(*(CFMutableDictionaryRef *)(v9 + 632), key, TypedValue);
          }
        }
      }
      if (*(_DWORD *)v9 == 3) {
        uint64_t v15 = (uint64_t)a4;
      }
      else {
        uint64_t v15 = 0;
      }
      endpointCluster_postVolumeDidChange(a2, v15, TypedValue);
    }
    else if (gLogCategory_APEndpointCluster <= 50 {
           && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    }
    {
      LogPrintF();
    }
    return MEMORY[0x1D25EB390](*(void *)(v9 + 208));
  }
  else
  {
    return APSLogErrorAt();
  }
}

void endpointCluster_handleSubEndpointIsMutedDidChange(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 208));
  if (endpointCluster_isSubEndpointVolumeLeader(a2, a4))
  {
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (*(_DWORD *)DerivedStorage == 3) {
      uint64_t v7 = (uint64_t)a4;
    }
    else {
      uint64_t v7 = 0;
    }
    endpointCluster_postIsMutedDidChange(a2, v7);
  }
  else if (gLogCategory_APEndpointCluster <= 50 {
         && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  }
  {
    LogPrintF();
  }
  JUMPOUT(0x1D25EB390);
}

void endpointCluster_handleLocalEndpointFinishedDeactivation(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 208));
  if (*(_DWORD *)(DerivedStorage + 304))
  {
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    endpointCluster_updateClusterChangeProgress((uint64_t)a2, 0, 1);
    endpointCluster_handleSubEndpointResult(a2, *(void *)(DerivedStorage + 312), *(const void **)(DerivedStorage + 8), -72277, 1);
    endpointCluster_postNeedDeactivationForClusterChange((uint64_t)a2, 0);
    endpointCluster_sendActivationMetrics();
  }
  else
  {
    if (*(unsigned char *)(DerivedStorage + 416))
    {
      if (gLogCategory_APEndpointCluster <= 50
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      uint64_t v4 = (uint64_t)a2;
      int v5 = 0;
    }
    else
    {
      if (gLogCategory_APEndpointCluster <= 50
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      uint64_t v4 = (uint64_t)a2;
      int v5 = 1;
    }
    endpointCluster_updateClusterChangeProgress(v4, v5, 1);
  }
  JUMPOUT(0x1D25EB390);
}

void endpointCluster_handleSubEndpointDescriptionChanged(uint64_t a1, const void *a2, uint64_t a3, const void *a4, uint64_t a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 208));
  if (a5)
  {
    int v9 = CFDictionaryGetInt64() || CFDictionaryGetInt64() || CFDictionaryGetInt64() != 0;
    BOOL v10 = CFDictionaryGetInt64() != 0;
  }
  else
  {
    int v9 = 0;
    BOOL v10 = 0;
  }
  endpointCluster_updateFromSubEndpoint(a2, a4, 0, v9, v10, 1);
  JUMPOUT(0x1D25EB390);
}

uint64_t endpointCluster_updateFromSubEndpoint(const void *a1, const void *a2, int a3, int a4, int a5, int a6)
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v13 = 0;
  CFStringRef v113 = 0;
  CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (a2 && !a3)
  {
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    int v17 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFStringRef *))(v16 + 48);
    if (v17) {
      v17(CMBaseObject, @"GroupPublicName", alloc, &v113);
    }
    int v13 = 0;
    if (!FigCFEqual() && v113)
    {
      if (CFStringGetLength(v113) < 1)
      {
        int v13 = 0;
      }
      else
      {
        if (gLogCategory_APEndpointCluster <= 50
          && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        int v18 = *(const void **)(DerivedStorage + 216);
        CFStringRef v19 = v113;
        *(void *)(DerivedStorage + 216) = v113;
        if (v19) {
          CFRetain(v19);
        }
        if (v18) {
          CFRelease(v18);
        }
        int v13 = 1;
      }
    }
  }
  int v103 = a5;
  int v102 = a3;
  uint64_t v104 = a2;
  int v105 = a6;
  uint64_t v20 = CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(alloc, 0);
  if (CFArrayGetCount(*(CFArrayRef *)(v20 + 264)) >= 1)
  {
    CFIndex v22 = 0;
    uint64_t v23 = *MEMORY[0x1E4F20F28];
    do
    {
      v114[0] = 0;
      CFArrayGetValueAtIndex(*(CFArrayRef *)(v20 + 264), v22);
      CFAllocatorRef v24 = CFGetAllocator(a1);
      uint64_t v25 = FigEndpointGetCMBaseObject();
      uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v26) {
        uint64_t v27 = v26;
      }
      else {
        uint64_t v27 = 0;
      }
      int v28 = *(void (**)(uint64_t, uint64_t, CFAllocatorRef, const void **))(v27 + 48);
      if (v28) {
        v28(v25, v23, v24, v114);
      }
      CFStringRef v29 = (const __CFString *)v114[0];
      if (v114[0])
      {
        if (v22)
        {
          CFStringAppend(Mutable, @" + ");
          CFStringRef v29 = (const __CFString *)v114[0];
        }
        CFStringAppend(Mutable, v29);
        if (v114[0]) {
          CFRelease(v114[0]);
        }
      }
      ++v22;
    }
    while (v22 < CFArrayGetCount(*(CFArrayRef *)(v20 + 264)));
  }
  int v30 = CFEqual(Mutable, *(CFTypeRef *)(DerivedStorage + 224));
  if (!v30)
  {
    if (gLogCategory_APEndpointCluster <= 30
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    BOOL v31 = *(const void **)(DerivedStorage + 224);
    *(void *)(DerivedStorage + 224) = Mutable;
    if (Mutable) {
      CFRetain(Mutable);
    }
    if (v31) {
      CFRelease(v31);
    }
  }
  if (v113) {
    CFRelease(v113);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v30) {
    int v32 = v13;
  }
  else {
    int v32 = 1;
  }
  if (v103)
  {
    uint64_t v33 = CMBaseObjectGetDerivedStorage();
    CFIndex v34 = 0;
    v114[0] = 0;
    uint64_t v35 = *MEMORY[0x1E4F20E08];
    while (v34 < CFArrayGetCount(*(CFArrayRef *)(v33 + 264)))
    {
      ValueAtunsigned int Index = CFArrayGetValueAtIndex(*(CFArrayRef *)(v33 + 264), v34);
      if (!APSGetFBOPropertyInt64()) {
        goto LABEL_66;
      }
      CFStringRef v113 = 0;
      uint64_t v37 = FigEndpointGetCMBaseObject();
      uint64_t v38 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v38) {
        uint64_t v39 = v38;
      }
      else {
        uint64_t v39 = 0;
      }
      CFTypeRef v40 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFStringRef *))(v39 + 48);
      if (v40) {
        v40(v37, v35, alloc, &v113);
      }
      if (v113)
      {
        if (FigCFEqual())
        {
          ValueAtunsigned int Index = 0;
        }
        else if (gLogCategory_APEndpointCluster <= 30 {
               && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
        }
        {
          LogPrintF();
        }
        if (v113) {
          CFRelease(v113);
        }
      }
      else
      {
LABEL_66:
        ValueAtunsigned int Index = 0;
      }
      ++v34;
      if (ValueAtIndex) {
        goto LABEL_81;
      }
    }
    SubEndpointWithPredicate = endpointCluster_getSubEndpointWithPredicate((uint64_t)a1, 0);
    if (gLogCategory_APEndpointCluster <= 30
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (!SubEndpointWithPredicate)
    {
      int v49 = 0;
      int v42 = v105;
      uint64_t v43 = v104;
      goto LABEL_87;
    }
LABEL_81:
    uint64_t v45 = FigEndpointGetCMBaseObject();
    uint64_t v46 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v46) {
      uint64_t v47 = v46;
    }
    else {
      uint64_t v47 = 0;
    }
    int v42 = v105;
    uint64_t v43 = v104;
    uint64_t v48 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, const void **))(v47 + 48);
    if (v48) {
      v48(v45, v35, alloc, v114);
    }
    int v49 = APSGetFBOPropertyInt64() != 0;
LABEL_87:
    if (FigCFEqual() && v49 == *(unsigned __int8 *)(v33 + 240))
    {
      int v41 = 0;
    }
    else
    {
      if (gLogCategory_APEndpointCluster <= 50
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      uint64_t v50 = *(const void **)(v33 + 232);
      CFTypeRef v51 = v114[0];
      *(const void **)(v33 + 232) = v114[0];
      if (v51) {
        CFRetain(v51);
      }
      if (v50) {
        CFRelease(v50);
      }
      *(unsigned char *)(v33 + 240) = v49;
      int v41 = 1;
    }
    if (v114[0]) {
      CFRelease(v114[0]);
    }
  }
  else
  {
    int v41 = 0;
    int v42 = v105;
    uint64_t v43 = v104;
  }
  if (!a4)
  {
    uint64_t v54 = 0;
    if (!v42) {
      return v54;
    }
    goto LABEL_160;
  }
  CMBaseObjectGetDerivedStorage();
  uint64_t v52 = CMBaseObjectGetDerivedStorage();
  if (!v102)
  {
    int v55 = v32;
    CFStringRef v113 = 0;
    v114[0] = 0;
    uint64_t v112 = 0;
    CFTypeRef v110 = 0;
    CFTypeRef cf = 0;
    CFTypeRef v108 = 0;
    CFTypeRef v109 = 0;
    CFTypeRef v107 = 0;
    uint64_t v56 = CFDictionaryCreateMutable(alloc, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v56)
    {
      uint64_t v57 = FigEndpointGetCMBaseObject();
      uint64_t v58 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v58) {
        uint64_t v59 = v58;
      }
      else {
        uint64_t v59 = 0;
      }
      int v60 = *(uint64_t (**)(uint64_t))(v59 + 48);
      if (v60)
      {
        uint64_t v61 = v60(v57);
        if (v61)
        {
          uint64_t v54 = v61;
        }
        else
        {
          CFDictionarySetValue(v56, (const void *)*MEMORY[0x1E4F20458], v114[0]);
          uint64_t v62 = *MEMORY[0x1E4F20F28];
          uint64_t v63 = FigEndpointGetCMBaseObject();
          uint64_t v64 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v64) {
            uint64_t v65 = v64;
          }
          else {
            uint64_t v65 = 0;
          }
          uint64_t v68 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFStringRef *))(v65 + 48);
          if (v68) {
            v68(v63, v62, alloc, &v113);
          }
          FigCFDictionarySetValue();
          uint64_t v69 = FigEndpointGetCMBaseObject();
          uint64_t v70 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v70) {
            uint64_t v71 = v70;
          }
          else {
            uint64_t v71 = 0;
          }
          unsigned int v72 = *(uint64_t (**)(uint64_t, void, const __CFAllocator *, const void **))(v71 + 48);
          if (v72)
          {
            uint64_t v73 = v72(v69, *MEMORY[0x1E4F20FB8], alloc, &v112);
            if (!v73)
            {
              CFDictionarySetValue(v56, (const void *)*MEMORY[0x1E4F20460], v112);
              uint64_t v74 = FigEndpointGetCMBaseObject();
              uint64_t v75 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v75) {
                uint64_t v76 = v75;
              }
              else {
                uint64_t v76 = 0;
              }
              int v81 = *(void (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v76 + 48);
              if (v81) {
                v81(v74, *MEMORY[0x1E4F20E58], alloc, &cf);
              }
              FigCFDictionarySetValue();
              uint64_t v82 = *MEMORY[0x1E4F20F18];
              uint64_t v83 = FigEndpointGetCMBaseObject();
              uint64_t v84 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v84) {
                uint64_t v85 = v84;
              }
              else {
                uint64_t v85 = 0;
              }
              uint64_t v86 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(v85 + 48);
              if (v86) {
                v86(v83, v82, alloc, &v110);
              }
              FigCFDictionarySetValue();
              uint64_t v87 = FigEndpointGetCMBaseObject();
              uint64_t v88 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v88) {
                uint64_t v89 = v88;
              }
              else {
                uint64_t v89 = 0;
              }
              uint64_t v90 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v89 + 48);
              if (v90) {
                v90(v87, @"RoomUUID", alloc, &v109);
              }
              FigCFDictionarySetValue();
              uint64_t v91 = FigEndpointGetCMBaseObject();
              uint64_t v92 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v92) {
                uint64_t v93 = v92;
              }
              else {
                uint64_t v93 = 0;
              }
              dispatch_time_t v94 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v93 + 48);
              if (v94) {
                v94(v91, @"RoomName", alloc, &v108);
              }
              FigCFDictionarySetValue();
              if (*(_DWORD *)v52 != 1)
              {
                uint64_t v95 = FigEndpointGetCMBaseObject();
                uint64_t v96 = *(void *)(CMBaseObjectGetVTable() + 8);
                if (v96) {
                  uint64_t v97 = v96;
                }
                else {
                  uint64_t v97 = 0;
                }
                uint64_t v98 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v97 + 48);
                if (v98) {
                  v98(v95, @"TightSyncClusterInfo", alloc, &v107);
                }
                if (v107)
                {
                  FigCFDictionarySetValueFromKeyInDict();
                  FigCFDictionarySetValueFromKeyInDict();
                  FigCFDictionarySetValueFromKeyInDict();
                }
              }
              if (FigCFEqual())
              {
                uint64_t v99 = *(const void **)(v52 + 296);
                if (v99)
                {
                  CFRelease(v99);
                  *(void *)(v52 + 296) = 0;
                }
                *(void *)(v52 + 296) = CFRetain(v114[0]);
              }
              CFHash(v43);
              uint64_t Int64 = (const void *)CFNumberCreateInt64();
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(v52 + 272), Int64, v56);
              if (gLogCategory_APEndpointCluster <= 30
                && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
              uint64_t v100 = *(const void **)(v52 + 280);
              if (v100)
              {
                CFRelease(v100);
                *(void *)(v52 + 280) = 0;
              }
              CFIndex v101 = *(const void **)(v52 + 288);
              if (v101)
              {
                CFRelease(v101);
                uint64_t v54 = 0;
                *(void *)(v52 + 288) = 0;
              }
              else
              {
                uint64_t v54 = 0;
              }
              goto LABEL_138;
            }
            uint64_t v54 = v73;
          }
          else
          {
            uint64_t v54 = 4294954514;
          }
        }
      }
      else
      {
        uint64_t v54 = 4294954514;
      }
      APSLogErrorAt();
      uint64_t Int64 = 0;
    }
    else
    {
      APSLogErrorAt();
      uint64_t Int64 = 0;
      uint64_t v54 = 4294950575;
    }
LABEL_138:
    if (v114[0]) {
      CFRelease(v114[0]);
    }
    if (v113) {
      CFRelease(v113);
    }
    if (v112) {
      CFRelease(v112);
    }
    if (cf) {
      CFRelease(cf);
    }
    if (v110) {
      CFRelease(v110);
    }
    if (v109) {
      CFRelease(v109);
    }
    if (v108) {
      CFRelease(v108);
    }
    if (v56) {
      CFRelease(v56);
    }
    if (Int64) {
      CFRelease(Int64);
    }
    int v32 = v55;
    if (v107) {
      CFRelease(v107);
    }
    goto LABEL_158;
  }
  CFHash(v43);
  CFAllocatorRef v53 = (const void *)CFNumberCreateInt64();
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v52 + 272), v53);
  if (gLogCategory_APEndpointCluster <= 30
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  int v66 = *(const void **)(v52 + 280);
  if (v66)
  {
    CFRelease(v66);
    *(void *)(v52 + 280) = 0;
  }
  uint64_t v67 = *(const void **)(v52 + 288);
  if (v67)
  {
    CFRelease(v67);
    *(void *)(v52 + 288) = 0;
  }
  if (v53) {
    CFRelease(v53);
  }
  uint64_t v54 = 0;
LABEL_158:
  if (!v42) {
    return v54;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigDispatchAsyncPostNotification();
LABEL_160:
  if (((v41 == 0) & ~v32) != 0)
  {
    long long v79 = 0;
  }
  else
  {
    int v78 = CFDictionaryCreateMutable(alloc, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!v78)
    {
      APSLogErrorAt();
      return 4294950575;
    }
    long long v79 = v78;
    if (v41) {
      CFDictionarySetValue(v78, @"GroupInfoDidChange", (const void *)*MEMORY[0x1E4F1CFD0]);
    }
    if (v32) {
      CFDictionarySetValue(v79, @"NameDidChange", (const void *)*MEMORY[0x1E4F1CFD0]);
    }
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigDispatchAsyncPostNotification();
  if (v79) {
    CFRelease(v79);
  }
  return v54;
}

uint64_t APEndpointClusterAddSubEndpoint(const void *a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 208));
  if (!APSGetFBOPropertyInt64())
  {
    v9.length = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 264));
    v9.location = 0;
    if (CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(DerivedStorage + 264), v9, a2) == -1)
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 264), a2);
      uint64_t v5 = *(void *)(DerivedStorage + 312);
      if (v5) {
        CompletionCallbackContextAddSubEndpoint(v5, a2);
      }
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      if (*(void *)(DerivedStorage + 8) && *(_DWORD *)DerivedStorage == 2)
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
      }
      uint64_t v6 = endpointCluster_updateFromSubEndpoint(a1, a2, 0, 1, 1, 1);
      if (v6)
      {
        uint64_t v7 = v6;
        APSLogErrorAt();
        goto LABEL_17;
      }
      if (endpointCluster_shouldActivateSubEndpoint((uint64_t)a1, a2)) {
        endpointCluster_activateSubEndpoint((uint64_t)a1, a2);
      }
      endpointCluster_failDelayManageSubEndpoint(a1, a2, 3);
      endpointCluster_updateHealthState(a1);
    }
    else
    {
      APSLogErrorAt();
    }
  }
  uint64_t v7 = 0;
LABEL_17:
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 208));
  return v7;
}

void CompletionCallbackContextAddSubEndpoint(uint64_t a1, const void *a2)
{
  MEMORY[0x1D25EB370](*(void *)(a1 + 80));
  if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 88), a2))
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 88), a2, (const void *)*MEMORY[0x1E4F1D260]);
    if (gLogCategory_APEndpointCluster <= 30
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  JUMPOUT(0x1D25EB390);
}

uint64_t endpointCluster_handleSubEndpointNonPersistentReceiverSessionStarted()
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  return FigDispatchAsyncPostNotification();
}

BOOL endpointCluster_shouldActivateSubEndpoint(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = DerivedStorage;
  if ((*(_DWORD *)(DerivedStorage + 304) & 0xFFFFFFFE) != 2)
  {
    if (gLogCategory_APEndpointCluster > 30) {
      return 0;
    }
    if (gLogCategory_APEndpointCluster == -1 && !_LogCategory_Initialize()) {
      goto LABEL_18;
    }
LABEL_7:
    LogPrintF();
LABEL_18:
    BOOL v12 = 0;
    goto LABEL_19;
  }
  if (*(_DWORD *)(DerivedStorage + 320))
  {
    if (gLogCategory_APEndpointCluster > 30) {
      return 0;
    }
    if (gLogCategory_APEndpointCluster == -1 && !_LogCategory_Initialize()) {
      goto LABEL_18;
    }
    goto LABEL_7;
  }
  CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  CFRange v9 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v8 + 48);
  if (v9) {
    v9(CMBaseObject, *MEMORY[0x1E4F20FB0], *MEMORY[0x1E4F1CF80], &cf);
  }
  int v10 = FigCFArrayContainsValue();
  if (cf) {
    CFRelease(cf);
  }
  if (v10)
  {
    if (gLogCategory_APEndpointCluster > 30) {
      return 0;
    }
    if (gLogCategory_APEndpointCluster == -1 && !_LogCategory_Initialize()) {
      goto LABEL_18;
    }
    goto LABEL_7;
  }
  CFSetRef v11 = *(const __CFSet **)(v5 + 360);
  if (v11 && CFSetContainsValue(v11, a2))
  {
    if (gLogCategory_APEndpointCluster <= 50)
    {
      if (gLogCategory_APEndpointCluster == -1 && !_LogCategory_Initialize()) {
        goto LABEL_18;
      }
      goto LABEL_7;
    }
    return 0;
  }
  BOOL v12 = endpointCluster_wantSubEndpointActivation(a1, (uint64_t)a2);
LABEL_19:
  if (gLogCategory_APEndpointCluster <= 30
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v12;
}

uint64_t endpointCluster_activateSubEndpoint(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if ((*(_DWORD *)(DerivedStorage + 304) - 4) <= 0xFFFFFFFD)
  {
    return APSLogErrorAt();
  }
  else
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    CFRetain(a2);
    uint64_t v4 = *(void *)(DerivedStorage + 248);
    if (!v4 || (FigEndpointAggregateGetClassID(), !CMBaseObjectIsMemberOfClass())) {
      uint64_t v4 = 0;
    }
    uint64_t v5 = *(void *)(DerivedStorage + 376);
    CFTypeRef v6 = CFRetain(*(CFTypeRef *)(DerivedStorage + 312));
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v10 = *(void *)(VTable + 32);
    uint64_t result = VTable + 32;
    uint64_t v9 = v10;
    if (v10) {
      uint64_t v11 = v9;
    }
    else {
      uint64_t v11 = 0;
    }
    BOOL v12 = *(uint64_t (**)(uint64_t, const void *, uint64_t, void (*)(uint64_t, const void *, uint64_t, uint64_t, int, void *), CFTypeRef))(v11 + 8);
    if (v12)
    {
      return v12(v4, a2, v5, endpointCluster_activateSubEndpointCallback, v6);
    }
  }
  return result;
}

void endpointCluster_failDelayManageSubEndpoint(const void *a1, const void *a2, int a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = *(void *)(DerivedStorage + 384);
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a1) {
    CFRetain(a1);
  }
  if (a2) {
    CFRetain(a2);
  }
  uint64_t v8 = *(NSObject **)(DerivedStorage + 40);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __endpointCluster_failDelayManageSubEndpoint_block_invoke;
  block[3] = &__block_descriptor_tmp_313;
  int v10 = a3;
  void block[4] = DerivedStorage;
  void block[5] = a1;
  void block[6] = v7;
  void block[7] = a2;
  dispatch_async(v8, block);
}

void endpointCluster_updateHealthState(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v3 = *(_DWORD *)(DerivedStorage + 348);
  CMBaseObjectGetDerivedStorage();
  uint64_t v4 = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(v4 + 304) && !*(_DWORD *)(v4 + 320) && *(unsigned char *)(v4 + 369))
  {
    if (endpointCluster_isComplete()
      && (v3 == 2 || endpointCluster_desiredSubEndpointsActivated((uint64_t)a1)))
    {
      int v6 = 2;
      char v5 = 1;
    }
    else
    {
      char v5 = 0;
      int v6 = 1;
    }
  }
  else
  {
    char v5 = 0;
    int v6 = 0;
  }
  if (v6 != *(_DWORD *)(DerivedStorage + 348))
  {
    CFRetain(a1);
    if (v5) {
      endpointCluster_sendActivationMetrics();
    }
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(_DWORD *)(DerivedStorage + 348) = v6;
    APSDispatchAsyncFHelper();
  }
  uint64_t v7 = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  CFArrayRef v8 = *(const __CFArray **)(v7 + 264);
  if (v8) {
    CFIndex Count = CFArrayGetCount(v8);
  }
  else {
    CFIndex Count = 0;
  }
  CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    CFTypeRef v21 = (CFTypeRef)CFStringCreateF();
    if (Count >= 1)
    {
      CFIndex v11 = 0;
      uint64_t v22 = *MEMORY[0x1E4F20FB8];
      BOOL v12 = (const void *)*MEMORY[0x1E4F21508];
      do
      {
        CFArrayGetValueAtIndex(*(CFArrayRef *)(v7 + 264), v11);
        uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
        uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v14) {
          uint64_t v15 = v14;
        }
        else {
          uint64_t v15 = 0;
        }
        uint64_t v16 = *(unsigned int (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(v15 + 48);
        if (!v16 || v16(CMBaseObject, v22, alloc, &cf))
        {
          if (gLogCategory_APEndpointCluster <= 60
            && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          if (v12) {
            CFTypeRef v17 = CFRetain(v12);
          }
          else {
            CFTypeRef v17 = 0;
          }
          CFTypeRef cf = v17;
        }
        if (!FigCFEqual() && !FigCFEqual()) {
          FigCFEqual();
        }
        int v25 = 0;
        APSGetFBOPropertyInt64();
        if (v25) {
          APSLogErrorAt();
        }
        int v18 = (const void *)CFStringCreateF();
        CFArrayAppendValue(Mutable, v18);
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
        if (v18) {
          CFRelease(v18);
        }
        ++v11;
      }
      while (Count != v11);
    }
    CFStringRef v19 = CFStringCreateByCombiningStrings(alloc, Mutable, @", ");
    if (gLogCategory_APEndpointCluster > 50)
    {
      uint64_t v20 = v21;
    }
    else
    {
      uint64_t v20 = v21;
      if (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize())
      {
        CFStringGetLength(v19);
        LogPrintF();
      }
    }
  }
  else
  {
    APSLogErrorAt();
    uint64_t v20 = 0;
    CFStringRef v19 = 0;
  }
  if (cf) {
    CFRelease(cf);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v19) {
    CFRelease(v19);
  }
  if (v20) {
    CFRelease(v20);
  }
}

uint64_t APEndpointClusterRemoveSubEndpoint(const void *a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 208));
  if (!a2)
  {
    APSLogErrorAt();
    uint64_t v11 = 4294950576;
    goto LABEL_26;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  if (*(void *)(DerivedStorage + 8) && *(_DWORD *)DerivedStorage == 2)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
  }
  if ((*(_DWORD *)(DerivedStorage + 304) & 0xFFFFFFFE) == 2)
  {
    uint64_t v5 = *(void *)(DerivedStorage + 248);
    if (!v5 || (FigEndpointAggregateGetClassID(), !CMBaseObjectIsMemberOfClass()))
    {
      APSLogErrorAt();
      uint64_t v11 = 4294949690;
      goto LABEL_26;
    }
    endpointCluster_deactivateSubEndpoint(a1, v5, (uint64_t)a2);
  }
  uint64_t v6 = CMBaseObjectGetDerivedStorage();
  v13.length = CFArrayGetCount(*(CFArrayRef *)(v6 + 264));
  v13.location = 0;
  FirstIndexOfCFDictionaryRef Value = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(v6 + 264), v13, a2);
  if (FirstIndexOfValue == -1)
  {
    APSLogErrorAt();
  }
  else
  {
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v6 + 264), FirstIndexOfValue);
    uint64_t v8 = *(void *)(v6 + 312);
    if (v8)
    {
      MEMORY[0x1D25EB370](*(void *)(v8 + 80));
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v8 + 88), a2);
      int updated = completionCallbackContext_updateStateFromResponses(v8);
      MEMORY[0x1D25EB390](*(void *)(v8 + 80));
      if (updated) {
        endpointCluster_handleClusterFatalError(a1, -17606, 1);
      }
    }
  }
  uint64_t v10 = endpointCluster_updateFromSubEndpoint(a1, a2, 1, 1, 1, 1);
  if (v10)
  {
    uint64_t v11 = v10;
    APSLogErrorAt();
  }
  else
  {
    endpointCluster_failDelayManageSubEndpoint(a1, a2, 2);
    if (*(void *)(DerivedStorage + 360))
    {
      if (gLogCategory_APEndpointCluster <= 50
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      CFSetRemoveValue(*(CFMutableSetRef *)(DerivedStorage + 360), a2);
    }
    endpointCluster_updateHealthState(a1);
    uint64_t v11 = 0;
  }
LABEL_26:
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 208));
  return v11;
}

void endpointCluster_deactivateSubEndpoint(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 32);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, void, void, void))(v8 + 16);
  if (v9) {
    v9(a2, a3, 0, 0, 0);
  }
  endpointCluster_updateIdleState(a1);
  endpointCluster_updateEngagedState(a1);
  endpointCluster_updateSecondDisplayModeOnSubEndpointListChange((uint64_t)a1, a3, 0);
  if (*DerivedStorage != 3 && endpointCluster_getSubEndpointVolumeLeader((uint64_t)a1))
  {
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    CFRange v13 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v12 + 48);
    if (v13 && (v13(CMBaseObject, *MEMORY[0x1E4F21080], *MEMORY[0x1E4F1CF80], &cf), (CFTypeRef v14 = cf) != 0))
    {
      if (gLogCategory_APEndpointCluster <= 50)
      {
        if (gLogCategory_APEndpointCluster != -1 || (int v15 = _LogCategory_Initialize(), v14 = cf, v15))
        {
          LogPrintF();
          CFTypeRef v14 = cf;
        }
      }
      endpointCluster_postVolumeDidChange((uint64_t)a1, 0, v14);
      if (gLogCategory_APEndpointCluster <= 50
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      endpointCluster_postIsMutedDidChange((uint64_t)a1, 0);
    }
    else
    {
      APSLogErrorAt();
    }
  }
  if (cf) {
    CFRelease(cf);
  }
}

void endpointCluster_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(NSObject **)(DerivedStorage + 40);
  if (v1)
  {
    dispatch_release(v1);
    *(void *)(DerivedStorage + 40) = 0;
  }
  FigSimpleMutexDestroy();
  if (*(_DWORD *)(DerivedStorage + 304))
  {
    if (gLogCategory_APEndpointCluster <= 100) {
      endpointCluster_Finalize_cold_1(gLogCategory_APEndpointCluster);
    }
    __break(1u);
  }
  else
  {
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    int v2 = *(const void **)(DerivedStorage + 616);
    if (v2)
    {
      CFRelease(v2);
      *(void *)(DerivedStorage + 616) = 0;
    }
    int v3 = *(const void **)(DerivedStorage + 520);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(DerivedStorage + 520) = 0;
    }
    uint64_t v4 = *(const void **)(DerivedStorage + 528);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(DerivedStorage + 528) = 0;
    }
    uint64_t v5 = *(const void **)(DerivedStorage + 536);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(DerivedStorage + 536) = 0;
    }
    uint64_t v6 = *(const void **)(DerivedStorage + 264);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(DerivedStorage + 264) = 0;
    }
    uint64_t v7 = *(const void **)(DerivedStorage + 216);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(DerivedStorage + 216) = 0;
    }
    uint64_t v8 = *(const void **)(DerivedStorage + 224);
    if (v8)
    {
      CFRelease(v8);
      *(void *)(DerivedStorage + 224) = 0;
    }
    uint64_t v9 = *(const void **)(DerivedStorage + 296);
    if (v9)
    {
      CFRelease(v9);
      *(void *)(DerivedStorage + 296) = 0;
    }
    uint64_t v10 = *(const void **)(DerivedStorage + 272);
    if (v10)
    {
      CFRelease(v10);
      *(void *)(DerivedStorage + 272) = 0;
    }
    uint64_t v11 = *(const void **)(DerivedStorage + 280);
    if (v11)
    {
      CFRelease(v11);
      *(void *)(DerivedStorage + 280) = 0;
    }
    uint64_t v12 = *(const void **)(DerivedStorage + 288);
    if (v12)
    {
      CFRelease(v12);
      *(void *)(DerivedStorage + 288) = 0;
    }
    CFRange v13 = *(const void **)(DerivedStorage + 624);
    if (v13)
    {
      CFRelease(v13);
      *(void *)(DerivedStorage + 624) = 0;
    }
    CFTypeRef v14 = *(const void **)(DerivedStorage + 632);
    if (v14)
    {
      CFRelease(v14);
      *(void *)(DerivedStorage + 632) = 0;
    }
    int v15 = *(const void **)(DerivedStorage + 16);
    if (v15)
    {
      CFRelease(v15);
      *(void *)(DerivedStorage + 16) = 0;
    }
    uint64_t v16 = *(const void **)(DerivedStorage + 32);
    if (v16)
    {
      CFRelease(v16);
      *(void *)(DerivedStorage + 32) = 0;
    }
    CFTypeRef v17 = *(const void **)(DerivedStorage + 8);
    if (v17)
    {
      CFRelease(v17);
      *(void *)(DerivedStorage + 8) = 0;
    }
    int v18 = *(const void **)(DerivedStorage + 96);
    if (v18)
    {
      CFRelease(v18);
      *(void *)(DerivedStorage + 96) = 0;
    }
    CFStringRef v19 = *(const void **)(DerivedStorage + 104);
    if (v19)
    {
      CFRelease(v19);
      *(void *)(DerivedStorage + 104) = 0;
    }
    uint64_t v20 = *(const void **)(DerivedStorage + 192);
    if (v20)
    {
      CFRelease(v20);
      *(void *)(DerivedStorage + 192) = 0;
    }
  }
}

CFStringRef endpointCluster_CopyDebugDescription(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<APEndpointCluster %p>", a1);
}

uint64_t endpointCluster_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, __CFDictionary **a4)
{
  unsigned int v11 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v9 = DerivedStorage;
    if (!endpointCluster_copyStaticProperty(a1, a2, a4, (int *)&v11))
    {
      MEMORY[0x1D25EB370](*(void *)(v9 + 208));
      unsigned int v11 = endpointCluster_copyPropertyInternal(a1, a2, a3, a4);
      MEMORY[0x1D25EB390](*(void *)(v9 + 208));
    }
  }
  else
  {
    APSLogErrorAt();
    return -16720;
  }
  return v11;
}

uint64_t endpointCluster_SetProperty(uint64_t a1, const void *a2, const __CFBoolean *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || !a3)
  {
    APSLogErrorAt();
    return 4294950576;
  }
  uint64_t v7 = DerivedStorage;
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 208));
  uint64_t v8 = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 30
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21080]) || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21098]))
  {
    uint64_t v9 = CMBaseObjectGetDerivedStorage();
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v9 + 264));
    if (gLogCategory_APEndpointCluster <= 30
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (Count >= 1)
    {
      if (endpointCluster_getSubEndpointVolumeLeader(a1))
      {
        uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
        uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v12) {
          uint64_t v13 = v12;
        }
        else {
          uint64_t v13 = 0;
        }
        CFTypeRef v14 = *(uint64_t (**)(uint64_t, const void *, const __CFBoolean *))(v13 + 56);
        if (v14)
        {
          uint64_t v15 = v14(CMBaseObject, a2, a3);
          if (!v15) {
            goto LABEL_30;
          }
        }
        else
        {
          uint64_t v15 = 4294954514;
        }
        APSLogErrorAt();
        if (gLogCategory_APEndpointCluster <= 90
          && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        goto LABEL_29;
      }
      APSLogErrorAt();
    }
    uint64_t v15 = 4294949690;
LABEL_29:
    APSLogErrorAt();
    goto LABEL_30;
  }
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20DA8]))
  {
    if (!*(void *)(v8 + 248))
    {
      APSLogErrorAt();
      uint64_t v15 = 4294954509;
      goto LABEL_30;
    }
    uint64_t v18 = FigEndpointGetCMBaseObject();
    uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v19) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = 0;
    }
    CFTypeRef v21 = *(uint64_t (**)(uint64_t, const void *, const __CFBoolean *))(v20 + 56);
    if (v21)
    {
      uint64_t v15 = v21(v18, a2, a3);
      if (!v15) {
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v15 = 4294954514;
    }
    goto LABEL_29;
  }
  int Value = CFBooleanGetValue(a3);
  if (*(unsigned __int8 *)(v8 + 437) != Value)
  {
    *(unsigned char *)(v8 + 437) = Value;
    uint64_t v15 = endpointCluster_addOrRemoveLocalSubEndpointForEchoCancellationIfNeeded();
    if (!v15) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  uint64_t v15 = 0;
LABEL_30:
  MEMORY[0x1D25EB390](*(void *)(v7 + 208));
  return v15;
}

uint64_t endpointCluster_copyStaticProperty(uint64_t a1, const void *a2, void *a3, int *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3)
  {
    APSLogErrorAt();
    int v11 = -16720;
    goto LABEL_8;
  }
  uint64_t v8 = DerivedStorage;
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20C98]) || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20D10])) {
    goto LABEL_4;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20E38]))
  {
LABEL_12:
    uint64_t v10 = *(__CFString **)(v8 + 16);
    goto LABEL_6;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20E88]))
  {
    uint64_t v9 = (__CFString **)MEMORY[0x1E4F1CFD0];
    if (!*(void *)(v8 + 8)) {
      uint64_t v9 = (__CFString **)MEMORY[0x1E4F1CFC8];
    }
    goto LABEL_5;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20EC8]))
  {
LABEL_18:
    uint64_t v9 = (__CFString **)MEMORY[0x1E4F1CFD0];
    goto LABEL_5;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20EF0]))
  {
    uint64_t v10 = *(__CFString **)(v8 + 96);
    goto LABEL_6;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20EF8]))
  {
    uint64_t v10 = @"Apple";
    goto LABEL_6;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20F60])) {
    goto LABEL_12;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20D78]))
  {
    uint64_t Int64 = CFNumberCreateInt64();
    *a3 = Int64;
    if (Int64)
    {
LABEL_26:
      int v11 = 0;
      goto LABEL_8;
    }
LABEL_49:
    APSLogErrorAt();
    int v11 = -16721;
    goto LABEL_8;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20D80]))
  {
    uint64_t v10 = (__CFString *)APEndpointAPSClusterTypeToFigEndpointClusterType(*(_DWORD *)v8);
    if (!v10) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20FB8]))
  {
    uint64_t v9 = (__CFString **)MEMORY[0x1E4F214C8];
    CFTypeRef v14 = (__CFString **)MEMORY[0x1E4F214C0];
    if (*(_DWORD *)v8 != 2) {
      CFTypeRef v14 = (__CFString **)MEMORY[0x1E4F214B8];
    }
    if (*(_DWORD *)v8 != 1) {
      uint64_t v9 = v14;
    }
    goto LABEL_5;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20FC0]))
  {
    uint64_t v15 = CFNumberCreateInt64();
    *a3 = v15;
    if (v15) {
      goto LABEL_26;
    }
    goto LABEL_49;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20FE0])) {
    goto LABEL_18;
  }
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21008]))
  {
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21040]))
    {
      uint64_t v9 = (__CFString **)MEMORY[0x1E4F21540];
      goto LABEL_5;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21048]))
    {
      uint64_t v9 = (__CFString **)MEMORY[0x1E4F21548];
      goto LABEL_5;
    }
    if (CFEqual(a2, @"IsClusterEndpoint")) {
      goto LABEL_18;
    }
    uint64_t result = CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20EB8]);
    if (!result) {
      return result;
    }
  }
LABEL_4:
  uint64_t v9 = (__CFString **)MEMORY[0x1E4F1CFC8];
LABEL_5:
  uint64_t v10 = *v9;
LABEL_6:
  uint64_t v10 = (__CFString *)CFRetain(v10);
LABEL_7:
  int v11 = 0;
  *a3 = v10;
LABEL_8:
  if (a4) {
    *a4 = v11;
  }
  return 1;
}

uint64_t endpointCluster_copyPropertyInternal(uint64_t a1, const void *a2, const __CFAllocator *a3, __CFDictionary **a4)
{
  uint64_t DerivedStorage = (unsigned int *)CMBaseObjectGetDerivedStorage();
  if (*((unsigned char *)DerivedStorage + 370)
    && !CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20E40])
    && !CFEqual(a2, @"IsDissociated")
    && !CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20F28]))
  {
    return 4294950573;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20FB0]))
  {
    CFArrayRef Copy = CFArrayCreateCopy(a3, *((CFArrayRef *)DerivedStorage + 33));
    *a4 = Copy;
    if (Copy) {
      return 0;
    }
LABEL_43:
    APSLogErrorAt();
    return 4294950575;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20E40]))
  {
    int v11 = (const void **)MEMORY[0x1E4F1CFD0];
    if (DerivedStorage[76] != 3) {
      int v11 = (const void **)MEMORY[0x1E4F1CFC8];
    }
    goto LABEL_21;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20EB0]))
  {
    int v11 = (const void **)MEMORY[0x1E4F1CFD0];
    unsigned int v12 = *((unsigned __int8 *)DerivedStorage + 372);
    goto LABEL_19;
  }
  if (CFEqual(a2, @"IsDissociated"))
  {
    int v11 = (const void **)MEMORY[0x1E4F1CFD0];
    unsigned int v12 = *((unsigned __int8 *)DerivedStorage + 370);
    goto LABEL_19;
  }
  if (CFEqual(a2, @"IsInUse"))
  {
    int v11 = (const void **)MEMORY[0x1E4F1CFD0];
    unsigned int v12 = DerivedStorage[76];
    goto LABEL_19;
  }
  if (CFEqual(a2, @"LocalRouteState"))
  {
    if (*((void *)DerivedStorage + 1))
    {
      uint64_t v15 = CMBaseObjectGetDerivedStorage();
      BOOL v17 = (*(void *)(v15 + 328) & 0xFFFFFFFFFFFFFFDFLL) != 0 && *(_DWORD *)(v15 + 304) == 3;
      uint64_t v18 = (const void *)*((void *)DerivedStorage + 51);
      uint64_t v19 = APEndpointAPSClusterTypeToAPSLocalRouteType(*DerivedStorage);
      uint64_t LocalRouteState = APEndpointCreateLocalRouteState(v17, v18, v19, a4);
      if (!LocalRouteState) {
        return LocalRouteState;
      }
LABEL_34:
      APSLogErrorAt();
      return LocalRouteState;
    }
    return 4294954509;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20C88]))
  {
    uint64_t Int64 = CFNumberCreateInt64();
    *a4 = (__CFDictionary *)Int64;
    if (Int64) {
      return 0;
    }
    goto LABEL_43;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20F28]))
  {
    ClusterModelBasedOnClusterAdvertisementInfo = (__CFDictionary *)*((void *)DerivedStorage + 27);
    if (!ClusterModelBasedOnClusterAdvertisementInfo) {
      ClusterModelBasedOnClusterAdvertisementInfo = (__CFDictionary *)*((void *)DerivedStorage + 28);
    }
    goto LABEL_22;
  }
  if (CFEqual(a2, @"NeedsDiscovery"))
  {
    int v11 = (const void **)MEMORY[0x1E4F1CFD0];
    unsigned int v12 = *((unsigned __int8 *)DerivedStorage + 371);
    goto LABEL_19;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20CB0]))
  {
    uint64_t v26 = 0;
    endpointCluster_copyPropertyFromSubEndpoint(a1, 1, (uint64_t)a2, (uint64_t)a3, (uint64_t)&v26);
    ClusterModelBasedOnClusterAdvertisementInfo = v26;
    if (!v26)
    {
      endpointCluster_copyPropertyFromSubEndpoint(a1, 0, (uint64_t)a2, (uint64_t)a3, (uint64_t)&v26);
      ClusterModelBasedOnClusterAdvertisementInfo = v26;
      if (!v26)
      {
        ClusterModelBasedOnClusterAdvertisementInfo = (__CFDictionary *)CFNumberCreateInt64();
        uint64_t v26 = ClusterModelBasedOnClusterAdvertisementInfo;
        if (!ClusterModelBasedOnClusterAdvertisementInfo) {
          goto LABEL_43;
        }
      }
    }
LABEL_23:
    uint64_t LocalRouteState = 0;
    *a4 = ClusterModelBasedOnClusterAdvertisementInfo;
    return LocalRouteState;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20D08]))
  {
    uint64_t v26 = 0;
    endpointCluster_copyPropertyFromSubEndpoint(a1, 1, (uint64_t)a2, (uint64_t)a3, (uint64_t)&v26);
    ClusterModelBasedOnClusterAdvertisementInfo = v26;
    if (v26) {
      goto LABEL_23;
    }
    endpointCluster_copyPropertyFromSubEndpoint(a1, 0, (uint64_t)a2, (uint64_t)a3, (uint64_t)&v26);
    ClusterModelBasedOnClusterAdvertisementInfo = v26;
    if (v26) {
      goto LABEL_23;
    }
    int v11 = (const void **)MEMORY[0x1E4F203C8];
    goto LABEL_21;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20E00]))
  {
    int v11 = (const void **)MEMORY[0x1E4F1CFD0];
    unsigned int v12 = *((unsigned __int8 *)DerivedStorage + 240);
LABEL_19:
    if (!v12) {
      int v11 = (const void **)MEMORY[0x1E4F1CFC8];
    }
    goto LABEL_21;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20E08]))
  {
    ClusterModelBasedOnClusterAdvertisementInfo = (__CFDictionary *)*((void *)DerivedStorage + 29);
    if (!ClusterModelBasedOnClusterAdvertisementInfo) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20F78]))
  {
    ClusterModelBasedOnClusterAdvertisementInfo = (__CFDictionary *)*((void *)DerivedStorage + 51);
    if (!ClusterModelBasedOnClusterAdvertisementInfo) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21038]))
  {
    if (*DerivedStorage == 1)
    {
      uint64_t v21 = endpointCluster_copyPropertyFromSubEndpoint(a1, 0, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
      uint64_t LocalRouteState = 0;
      if (v21)
      {
        uint64_t v22 = v21;
        APSLogErrorAt();
        return v22;
      }
      return LocalRouteState;
    }
    return 0;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20E30])
    || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20D50])
    || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20E18])
    || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20E48])
    || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20E80]))
  {
    return endpointCluster_copyPropertyFromSubEndpoint(a1, 0, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20E70]))
  {
LABEL_76:
    int v23 = endpointCluster_anySubEndpointReportsTrueForProperty();
    int v11 = (const void **)MEMORY[0x1E4F1CFD0];
    if (!v23) {
      int v11 = (const void **)MEMORY[0x1E4F1CFC8];
    }
    goto LABEL_21;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20F90]))
  {
    if (*((void *)DerivedStorage + 1)) {
      return 4294954509;
    }
    goto LABEL_76;
  }
  if (CFEqual(a2, @"EndpointShowInfo"))
  {
    uint64_t LocalRouteState = endpointCluster_copyShowInfoDictionary(a1, a4);
    if (!LocalRouteState) {
      return LocalRouteState;
    }
    goto LABEL_34;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20D60]))
  {
    uint64_t LocalRouteState = endpointCluster_copyClusterCompositionAsArray(a1, (CFTypeRef *)a4);
    if (!LocalRouteState) {
      return LocalRouteState;
    }
    goto LABEL_34;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20D68]))
  {
    uint64_t LocalRouteState = endpointCluster_copyClusterHierarchyAsArray(a1, (CFTypeRef *)a4);
    if (!LocalRouteState) {
      return LocalRouteState;
    }
    goto LABEL_34;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20D70]))
  {
    ClusterModelBasedOnClusterAdvertisementInfo = (__CFDictionary *)*((void *)DerivedStorage + 37);
    if (!ClusterModelBasedOnClusterAdvertisementInfo) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21088]))
  {
    int v11 = (const void **)MEMORY[0x1E4F1CFD0];
LABEL_21:
    ClusterModelBasedOnClusterAdvertisementInfo = (__CFDictionary *)*v11;
LABEL_22:
    ClusterModelBasedOnClusterAdvertisementInfo = (__CFDictionary *)CFRetain(ClusterModelBasedOnClusterAdvertisementInfo);
    goto LABEL_23;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21090]))
  {
    uint64_t v24 = CFNumberCreateInt64();
    *a4 = (__CFDictionary *)v24;
    if (v24) {
      return 0;
    }
    goto LABEL_43;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21080]) || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21098]))
  {
    uint64_t LocalRouteState = endpointCluster_copyPropertyFromSubEndpoint(a1, 2, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
    if (gLogCategory_APEndpointCluster <= 30
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return LocalRouteState;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20CA0]))
  {
    return endpointCluster_copyAirPlayEndpointProperties(a1, a4);
  }
  else
  {
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20F18]))
    {
      ClusterModelBasedOnClusterAdvertisementInfo = (__CFDictionary *)endpointCluster_getClusterModelBasedOnClusterAdvertisementInfo(a1);
      if (!ClusterModelBasedOnClusterAdvertisementInfo)
      {
        ClusterModelBasedOnClusterAdvertisementInfo = (__CFDictionary *)endpointCluster_getClusterModelBasedOnClusterMembersModels();
        if (!ClusterModelBasedOnClusterAdvertisementInfo) {
          goto LABEL_23;
        }
      }
      goto LABEL_22;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20D98]))
    {
      return endpointCluster_copyMXDescriptor(a1, a4);
    }
    else
    {
      uint64_t v25 = *((void *)DerivedStorage + 31);
      if (!v25) {
        return 4294954509;
      }
      return FigEndpointCopyProperty(v25, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
    }
  }
}

uint64_t endpointCluster_copyPropertyFromSubEndpoint(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 264)) < 1
    || !endpointCluster_getSubEndpointWithPredicate(a1, a2))
  {
    return 4294949690;
  }
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  CFTypeRef v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 48);
  if (v14)
  {
    uint64_t v15 = v14(CMBaseObject, a3, a4, a5);
    if (!v15) {
      return v15;
    }
  }
  else
  {
    uint64_t v15 = 4294954514;
  }
  if (gLogCategory_APEndpointCluster <= 30
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v15;
}

uint64_t endpointCluster_anySubEndpointReportsTrueForProperty()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 264));
  if (Count < 1) {
    return 0;
  }
  CFIndex v2 = Count;
  CFIndex v3 = 0;
  while (1)
  {
    CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 264), v3);
    if (APSGetFBOPropertyInt64()) {
      break;
    }
    if (v2 == ++v3) {
      return 0;
    }
  }
  return 1;
}

uint64_t endpointCluster_copyShowInfoDictionary(uint64_t a1, __CFDictionary **a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  value[0] = 0;
  value[1] = 0;
  __int16 v28 = 0;
  if (a2)
  {
    uint64_t v5 = DerivedStorage;
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable)
    {
      APSLogErrorAt();
      return 0;
    }
    uint64_t v8 = Mutable;
    SNPrintF();
    CFDictionarySetCString();
    uint64_t v9 = (const void *)*MEMORY[0x1E4F1CFD0];
    CFDictionarySetValue(v8, @"IsClusterEndpoint", (const void *)*MEMORY[0x1E4F1CFD0]);
    uint64_t v10 = (const void *)*MEMORY[0x1E4F1CFC8];
    if (*(void *)(v5 + 8)) {
      int v11 = v9;
    }
    else {
      int v11 = (const void *)*MEMORY[0x1E4F1CFC8];
    }
    CFDictionarySetValue(v8, @"IsLocal", v11);
    if (*(_DWORD *)(v5 + 304) == 3) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = v10;
    }
    CFDictionarySetValue(v8, @"Activated", v12);
    uint64_t v13 = *(const void **)(v5 + 216);
    if (!v13) {
      uint64_t v13 = *(const void **)(v5 + 224);
    }
    CFDictionarySetValue(v8, @"Name", v13);
    endpointCluster_copyClusterCompositionAsArray(a1, (CFTypeRef *)value);
    CFTypeRef v14 = value[0];
    CFDictionarySetValue(v8, @"ClusterComposition", value[0]);
    uint64_t v15 = *(const void **)(v5 + 296);
    if (v15) {
      CFDictionarySetValue(v8, @"ClusterLeaderUUID", v15);
    }
    CFDictionarySetValue(v8, @"PersistentGroupUUID", *(const void **)(v5 + 16));
    uint64_t v16 = (const void *)APSClusterTypeToDescriptionString();
    CFDictionarySetValue(v8, @"PersistentGroupType", v16);
    CFDictionarySetInt64();
    uint64_t Count = CFArrayGetCount(*(CFArrayRef *)(v5 + 264));
    if (Count <= 0)
    {
      *a2 = v8;
      if (!v14) {
        return 0;
      }
    }
    else
    {
      uint64_t v18 = Count;
      uint64_t v19 = CFArrayCreateMutable(v6, Count, MEMORY[0x1E4F1D510]);
      for (CFIndex i = 0; i != v18; ++i)
      {
        CFTypeRef cf = 0;
        CFArrayGetValueAtIndex(*(CFArrayRef *)(v5 + 264), i);
        uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
        uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v22) {
          uint64_t v23 = v22;
        }
        else {
          uint64_t v23 = 0;
        }
        uint64_t v24 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v23 + 48);
        if (v24) {
          v24(CMBaseObject, @"EndpointShowInfo", v6, &cf);
        }
        if (cf)
        {
          CFArrayAppendValue(v19, cf);
          if (cf) {
            CFRelease(cf);
          }
        }
      }
      CFDictionarySetValue(v8, @"SubEndpointShowInfoDicts", v19);
      *a2 = v8;
      if (v19) {
        CFRelease(v19);
      }
      if (!v14) {
        return 0;
      }
    }
    CFRelease(v14);
    return 0;
  }
  APSLogErrorAt();
  return 4294950576;
}

uint64_t endpointCluster_copyClusterCompositionAsArray(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2000000000;
  int v15 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(const void **)(DerivedStorage + 280);
  if (v4)
  {
    *a2 = CFRetain(v4);
  }
  else
  {
    CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 272));
    CFMutableArrayRef Mutable = CFArrayCreateMutable(v5, Count, MEMORY[0x1E4F1D510]);
    if (Mutable)
    {
      CFMutableArrayRef v8 = Mutable;
      CFDictionaryApplyBlock();
      if (!*((_DWORD *)v13 + 6))
      {
        CFTypeRef v9 = CFRetain(v8);
        *(void *)(DerivedStorage + 280) = v9;
        if (gLogCategory_APEndpointCluster <= 30)
        {
          if (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()) {
            LogPrintF();
          }
          CFTypeRef v9 = *(CFTypeRef *)(DerivedStorage + 280);
        }
        if (v9) {
          CFTypeRef v9 = CFRetain(v9);
        }
        *a2 = v9;
      }
      CFRelease(v8);
    }
    else
    {
      APSLogErrorAt();
      *((_DWORD *)v13 + 6) = -16721;
    }
  }
  uint64_t v10 = *((unsigned int *)v13 + 6);
  _Block_object_dispose(&v12, 8);
  return v10;
}

uint64_t endpointCluster_copyClusterHierarchyAsArray(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v13 = 0;
  uint64_t v14 = &v13;
  uint64_t v15 = 0x2000000000;
  int v16 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(const void **)(DerivedStorage + 288);
  if (v4)
  {
    *a2 = CFRetain(v4);
  }
  else
  {
    CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFMutableDictionaryRef v7 = Mutable;
      CFMutableArrayRef v8 = CFArrayCreateMutable(v5, 0, MEMORY[0x1E4F1D510]);
      if (v8)
      {
        CFMutableArrayRef v9 = v8;
        CFDictionaryApplyBlock();
        CFDictionaryApplyBlock();
        if (gLogCategory_APEndpointCluster <= 30
          && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        if (!*((_DWORD *)v14 + 6))
        {
          CFTypeRef v10 = CFRetain(v9);
          *(void *)(DerivedStorage + 288) = v10;
          if (v10) {
            CFTypeRef v10 = CFRetain(v10);
          }
          *a2 = v10;
        }
        CFRelease(v9);
      }
      else
      {
        APSLogErrorAt();
        *((_DWORD *)v14 + 6) = -16721;
      }
      CFRelease(v7);
    }
    else
    {
      APSLogErrorAt();
      *((_DWORD *)v14 + 6) = -16721;
    }
  }
  uint64_t v11 = *((unsigned int *)v14 + 6);
  _Block_object_dispose(&v13, 8);
  return v11;
}

uint64_t endpointCluster_copyAirPlayEndpointProperties(uint64_t a1, __CFDictionary **a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v18 = 0;
  CFTypeRef cf = 0;
  SubEndpointWithPredicate = endpointCluster_getSubEndpointWithPredicate(a1, 3);
  if (!SubEndpointWithPredicate)
  {
    SubEndpointWithPredicate = endpointCluster_getSubEndpointWithPredicate(a1, 1);
    if (!SubEndpointWithPredicate)
    {
      SubEndpointWithPredicate = endpointCluster_getSubEndpointWithPredicate(a1, 0);
      if (!SubEndpointWithPredicate)
      {
        uint64_t v16 = 4294949690;
        goto LABEL_19;
      }
    }
  }
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  CFMutableArrayRef v9 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v8 + 48);
  if (!v9)
  {
    uint64_t v16 = 4294954514;
LABEL_18:
    APSLogErrorAt();
    goto LABEL_19;
  }
  uint64_t v10 = *MEMORY[0x1E4F1CF80];
  uint64_t v11 = v9(CMBaseObject, @"AirPlayClusterCompatibleEndpointProperties", *MEMORY[0x1E4F1CF80], &cf);
  if (v11)
  {
    uint64_t v16 = v11;
    goto LABEL_18;
  }
  CFMutableDictionaryRef MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (MutableCopy)
  {
    uint64_t v13 = MutableCopy;
    uint64_t v14 = (const void *)*MEMORY[0x1E4F1CFC8];
    if (*(void *)(DerivedStorage + 8)) {
      uint64_t v15 = (const void *)*MEMORY[0x1E4F1CFD0];
    }
    else {
      uint64_t v15 = (const void *)*MEMORY[0x1E4F1CFC8];
    }
    CFDictionarySetValue(MutableCopy, @"IsLocalDevice", v15);
    if (*(_DWORD *)DerivedStorage == 2
      && !endpointCluster_isSubEndpointOfType(a1, (uint64_t)SubEndpointWithPredicate, *MEMORY[0x1E4F214A8]))
    {
      endpointCluster_copyPropertyFromSubEndpoint(a1, 1, @"AirPlayClusterCompatibleEndpointProperties", v10, (uint64_t)&v18);
      FigCFDictionarySetValueFromKeyInDict();
      CFDictionarySetValue(v13, @"SupportsMultiplayer", v14);
      CFDictionarySetValue(v13, @"SupportsLocalStereoPairClusterPersistentConnection", v14);
    }
    uint64_t v16 = 0;
    *a2 = v13;
  }
  else
  {
    APSLogErrorAt();
    uint64_t v16 = 4294950575;
  }
LABEL_19:
  if (cf) {
    CFRelease(cf);
  }
  if (v18) {
    CFRelease(v18);
  }
  return v16;
}

CFTypeRef endpointCluster_getClusterModelBasedOnClusterAdvertisementInfo(uint64_t a1)
{
  CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  endpointCluster_copyPropertyFromSubEndpoint(a1, 0, @"ClusterModel", *MEMORY[0x1E4F1CF80], (uint64_t)&cf);
  CFTypeRef result = cf;
  if (cf)
  {
    CFGetInt64Ranged();
    CFRelease(cf);
    return (CFTypeRef)APSGetClusterModelNameForClusterTypeAndModel();
  }
  return result;
}

uint64_t endpointCluster_getClusterModelBasedOnClusterMembersModels()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef v1 = *(const __CFArray **)(DerivedStorage + 264);
  int v2 = *(_DWORD *)DerivedStorage;
  return endpointCluster_getClusterModelBasedOnAnyMemberModels(v2, v1);
}

uint64_t endpointCluster_copyMXDescriptor(uint64_t a1, CFMutableDictionaryRef *a2)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    APSLogErrorAt();
    return 4294950575;
  }
  CFMutableDictionaryRef v6 = Mutable;
  uint64_t v7 = (const void *)*MEMORY[0x1E4F20F28];
  int v81 = 0;
  CFTypeRef cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v7, &cf, &v81))
  {
    int v8 = v81;
    if (!v81)
    {
LABEL_4:
      FigCFDictionarySetValue();
      goto LABEL_5;
    }
  }
  else
  {
    int v8 = endpointCluster_copyPropertyInternal(a1, v7, v4, &cf);
    int v81 = v8;
    if (!v8) {
      goto LABEL_4;
    }
  }
  if (v8 != -12784 && v8 != -12787) {
    APSLogErrorAt();
  }
LABEL_5:
  if (cf) {
    CFRelease(cf);
  }
  CFMutableArrayRef v9 = (const void *)*MEMORY[0x1E4F20E38];
  int v81 = 0;
  CFTypeRef cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v9, &cf, &v81))
  {
    int v10 = v81;
    if (!v81)
    {
LABEL_9:
      FigCFDictionarySetValue();
      goto LABEL_10;
    }
  }
  else
  {
    int v10 = endpointCluster_copyPropertyInternal(a1, v9, v4, &cf);
    int v81 = v10;
    if (!v10) {
      goto LABEL_9;
    }
  }
  if (v10 != -12784 && v10 != -12787) {
    APSLogErrorAt();
  }
LABEL_10:
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v11 = (const void *)*MEMORY[0x1E4F20EF0];
  int v81 = 0;
  CFTypeRef cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v11, &cf, &v81))
  {
    int v12 = v81;
    if (!v81)
    {
LABEL_14:
      FigCFDictionarySetValue();
      goto LABEL_15;
    }
  }
  else
  {
    int v12 = endpointCluster_copyPropertyInternal(a1, v11, v4, &cf);
    int v81 = v12;
    if (!v12) {
      goto LABEL_14;
    }
  }
  if (v12 != -12784 && v12 != -12787) {
    APSLogErrorAt();
  }
LABEL_15:
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v13 = (const void *)*MEMORY[0x1E4F20F18];
  int v81 = 0;
  CFTypeRef cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v13, &cf, &v81))
  {
    int v14 = v81;
    if (!v81)
    {
LABEL_19:
      FigCFDictionarySetValue();
      goto LABEL_20;
    }
  }
  else
  {
    int v14 = endpointCluster_copyPropertyInternal(a1, v13, v4, &cf);
    int v81 = v14;
    if (!v14) {
      goto LABEL_19;
    }
  }
  if (v14 != -12784 && v14 != -12787) {
    APSLogErrorAt();
  }
LABEL_20:
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v15 = (const void *)*MEMORY[0x1E4F20EF8];
  int v81 = 0;
  CFTypeRef cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v15, &cf, &v81))
  {
    int v16 = v81;
    if (!v81)
    {
LABEL_24:
      FigCFDictionarySetValue();
      goto LABEL_25;
    }
  }
  else
  {
    int v16 = endpointCluster_copyPropertyInternal(a1, v15, v4, &cf);
    int v81 = v16;
    if (!v16) {
      goto LABEL_24;
    }
  }
  if (v16 != -12784 && v16 != -12787) {
    APSLogErrorAt();
  }
LABEL_25:
  if (cf) {
    CFRelease(cf);
  }
  BOOL v17 = (const void *)*MEMORY[0x1E4F21038];
  int v81 = 0;
  CFTypeRef cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v17, &cf, &v81))
  {
    int v18 = v81;
    if (!v81)
    {
LABEL_29:
      FigCFDictionarySetValue();
      goto LABEL_30;
    }
  }
  else
  {
    int v18 = endpointCluster_copyPropertyInternal(a1, v17, v4, &cf);
    int v81 = v18;
    if (!v18) {
      goto LABEL_29;
    }
  }
  if (v18 != -12784 && v18 != -12787) {
    APSLogErrorAt();
  }
LABEL_30:
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v19 = (const void *)*MEMORY[0x1E4F21028];
  int v81 = 0;
  CFTypeRef cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v19, &cf, &v81))
  {
    int v20 = v81;
    if (!v81)
    {
LABEL_34:
      FigCFDictionarySetValue();
      goto LABEL_35;
    }
  }
  else
  {
    int v20 = endpointCluster_copyPropertyInternal(a1, v19, v4, &cf);
    int v81 = v20;
    if (!v20) {
      goto LABEL_34;
    }
  }
  if (v20 != -12784 && v20 != -12787) {
    APSLogErrorAt();
  }
LABEL_35:
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v21 = (const void *)*MEMORY[0x1E4F20F60];
  int v81 = 0;
  CFTypeRef cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v21, &cf, &v81))
  {
    int v22 = v81;
    if (!v81)
    {
LABEL_39:
      FigCFDictionarySetValue();
      goto LABEL_40;
    }
  }
  else
  {
    int v22 = endpointCluster_copyPropertyInternal(a1, v21, v4, &cf);
    int v81 = v22;
    if (!v22) {
      goto LABEL_39;
    }
  }
  if (v22 != -12784 && v22 != -12787) {
    APSLogErrorAt();
  }
LABEL_40:
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v23 = (const void *)*MEMORY[0x1E4F20D70];
  int v81 = 0;
  CFTypeRef cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v23, &cf, &v81))
  {
    int v24 = v81;
    if (!v81)
    {
LABEL_44:
      FigCFDictionarySetValue();
      goto LABEL_45;
    }
  }
  else
  {
    int v24 = endpointCluster_copyPropertyInternal(a1, v23, v4, &cf);
    int v81 = v24;
    if (!v24) {
      goto LABEL_44;
    }
  }
  if (v24 != -12784 && v24 != -12787) {
    APSLogErrorAt();
  }
LABEL_45:
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v25 = (const void *)*MEMORY[0x1E4F20E58];
  int v81 = 0;
  CFTypeRef cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v25, &cf, &v81))
  {
    int v26 = v81;
    if (!v81)
    {
LABEL_49:
      FigCFDictionarySetValue();
      goto LABEL_50;
    }
  }
  else
  {
    int v26 = endpointCluster_copyPropertyInternal(a1, v25, v4, &cf);
    int v81 = v26;
    if (!v26) {
      goto LABEL_49;
    }
  }
  if (v26 != -12784 && v26 != -12787) {
    APSLogErrorAt();
  }
LABEL_50:
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v27 = (const void *)*MEMORY[0x1E4F20D78];
  int v81 = 0;
  CFTypeRef cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v27, &cf, &v81))
  {
    int v28 = v81;
    if (!v81)
    {
LABEL_54:
      FigCFDictionarySetValue();
      goto LABEL_55;
    }
  }
  else
  {
    int v28 = endpointCluster_copyPropertyInternal(a1, v27, v4, &cf);
    int v81 = v28;
    if (!v28) {
      goto LABEL_54;
    }
  }
  if (v28 != -12784 && v28 != -12787) {
    APSLogErrorAt();
  }
LABEL_55:
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v29 = (const void *)*MEMORY[0x1E4F20D80];
  int v81 = 0;
  CFTypeRef cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v29, &cf, &v81))
  {
    int v30 = v81;
    if (!v81)
    {
LABEL_59:
      FigCFDictionarySetValue();
      goto LABEL_60;
    }
  }
  else
  {
    int v30 = endpointCluster_copyPropertyInternal(a1, v29, v4, &cf);
    int v81 = v30;
    if (!v30) {
      goto LABEL_59;
    }
  }
  if (v30 != -12784 && v30 != -12787) {
    APSLogErrorAt();
  }
LABEL_60:
  if (cf) {
    CFRelease(cf);
  }
  BOOL v31 = (const void *)*MEMORY[0x1E4F20D60];
  int v81 = 0;
  CFTypeRef cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v31, &cf, &v81))
  {
    int v32 = v81;
    if (!v81)
    {
LABEL_64:
      FigCFDictionarySetValue();
      goto LABEL_65;
    }
  }
  else
  {
    int v32 = endpointCluster_copyPropertyInternal(a1, v31, v4, &cf);
    int v81 = v32;
    if (!v32) {
      goto LABEL_64;
    }
  }
  if (v32 != -12784 && v32 != -12787) {
    APSLogErrorAt();
  }
LABEL_65:
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v33 = (const void *)*MEMORY[0x1E4F20D68];
  int v81 = 0;
  CFTypeRef cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v33, &cf, &v81))
  {
    int v34 = v81;
    if (!v81)
    {
LABEL_69:
      FigCFDictionarySetValue();
      goto LABEL_70;
    }
  }
  else
  {
    int v34 = endpointCluster_copyPropertyInternal(a1, v33, v4, &cf);
    int v81 = v34;
    if (!v34) {
      goto LABEL_69;
    }
  }
  if (v34 != -12784 && v34 != -12787) {
    APSLogErrorAt();
  }
LABEL_70:
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v35 = (const void *)*MEMORY[0x1E4F20D58];
  int v81 = 0;
  CFTypeRef cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v35, &cf, &v81))
  {
    int v36 = v81;
    if (!v81)
    {
LABEL_74:
      FigCFDictionarySetValue();
      goto LABEL_75;
    }
  }
  else
  {
    int v36 = endpointCluster_copyPropertyInternal(a1, v35, v4, &cf);
    int v81 = v36;
    if (!v36) {
      goto LABEL_74;
    }
  }
  if (v36 != -12784 && v36 != -12787) {
    APSLogErrorAt();
  }
LABEL_75:
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v37 = (const void *)*MEMORY[0x1E4F20E48];
  int v81 = 0;
  CFTypeRef cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v37, &cf, &v81))
  {
    int v38 = v81;
    if (!v81)
    {
LABEL_79:
      FigCFDictionarySetValue();
      goto LABEL_80;
    }
  }
  else
  {
    int v38 = endpointCluster_copyPropertyInternal(a1, v37, v4, &cf);
    int v81 = v38;
    if (!v38) {
      goto LABEL_79;
    }
  }
  if (v38 != -12784 && v38 != -12787) {
    APSLogErrorAt();
  }
LABEL_80:
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v39 = (const void *)*MEMORY[0x1E4F20D50];
  int v81 = 0;
  CFTypeRef cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v39, &cf, &v81))
  {
    int v40 = v81;
    if (!v81)
    {
LABEL_84:
      FigCFDictionarySetValue();
      goto LABEL_85;
    }
  }
  else
  {
    int v40 = endpointCluster_copyPropertyInternal(a1, v39, v4, &cf);
    int v81 = v40;
    if (!v40) {
      goto LABEL_84;
    }
  }
  if (v40 != -12784 && v40 != -12787) {
    APSLogErrorAt();
  }
LABEL_85:
  if (cf) {
    CFRelease(cf);
  }
  int v41 = (const void *)*MEMORY[0x1E4F20EC8];
  int v81 = 0;
  CFTypeRef cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v41, &cf, &v81))
  {
    int v42 = v81;
    if (!v81)
    {
LABEL_89:
      FigCFDictionarySetValue();
      goto LABEL_90;
    }
  }
  else
  {
    int v42 = endpointCluster_copyPropertyInternal(a1, v41, v4, &cf);
    int v81 = v42;
    if (!v42) {
      goto LABEL_89;
    }
  }
  if (v42 != -12784 && v42 != -12787) {
    APSLogErrorAt();
  }
LABEL_90:
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v43 = (const void *)*MEMORY[0x1E4F21008];
  int v81 = 0;
  CFTypeRef cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v43, &cf, &v81))
  {
    int v44 = v81;
    if (!v81)
    {
LABEL_94:
      FigCFDictionarySetValue();
      goto LABEL_95;
    }
  }
  else
  {
    int v44 = endpointCluster_copyPropertyInternal(a1, v43, v4, &cf);
    int v81 = v44;
    if (!v44) {
      goto LABEL_94;
    }
  }
  if (v44 != -12784 && v44 != -12787) {
    APSLogErrorAt();
  }
LABEL_95:
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v45 = (const void *)*MEMORY[0x1E4F20FF0];
  int v81 = 0;
  CFTypeRef cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v45, &cf, &v81))
  {
    int v46 = v81;
    if (!v81)
    {
LABEL_99:
      FigCFDictionarySetValue();
      goto LABEL_100;
    }
  }
  else
  {
    int v46 = endpointCluster_copyPropertyInternal(a1, v45, v4, &cf);
    int v81 = v46;
    if (!v46) {
      goto LABEL_99;
    }
  }
  if (v46 != -12784 && v46 != -12787) {
    APSLogErrorAt();
  }
LABEL_100:
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v47 = (const void *)*MEMORY[0x1E4F20F10];
  int v81 = 0;
  CFTypeRef cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v47, &cf, &v81))
  {
    int v48 = v81;
    if (!v81)
    {
LABEL_104:
      FigCFDictionarySetValue();
      goto LABEL_105;
    }
  }
  else
  {
    int v48 = endpointCluster_copyPropertyInternal(a1, v47, v4, &cf);
    int v81 = v48;
    if (!v48) {
      goto LABEL_104;
    }
  }
  if (v48 != -12784 && v48 != -12787) {
    APSLogErrorAt();
  }
LABEL_105:
  if (cf) {
    CFRelease(cf);
  }
  int v49 = (const void *)*MEMORY[0x1E4F20E00];
  int v81 = 0;
  CFTypeRef cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v49, &cf, &v81))
  {
    int v50 = v81;
    if (!v81)
    {
LABEL_109:
      FigCFDictionarySetValue();
      goto LABEL_110;
    }
  }
  else
  {
    int v50 = endpointCluster_copyPropertyInternal(a1, v49, v4, &cf);
    int v81 = v50;
    if (!v50) {
      goto LABEL_109;
    }
  }
  if (v50 != -12784 && v50 != -12787) {
    APSLogErrorAt();
  }
LABEL_110:
  if (cf) {
    CFRelease(cf);
  }
  CFTypeRef v51 = (const void *)*MEMORY[0x1E4F20E70];
  int v81 = 0;
  CFTypeRef cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v51, &cf, &v81))
  {
    int v52 = v81;
    if (!v81)
    {
LABEL_114:
      FigCFDictionarySetValue();
      goto LABEL_115;
    }
  }
  else
  {
    int v52 = endpointCluster_copyPropertyInternal(a1, v51, v4, &cf);
    int v81 = v52;
    if (!v52) {
      goto LABEL_114;
    }
  }
  if (v52 != -12784 && v52 != -12787) {
    APSLogErrorAt();
  }
LABEL_115:
  if (cf) {
    CFRelease(cf);
  }
  CFAllocatorRef v53 = (const void *)*MEMORY[0x1E4F20F90];
  int v81 = 0;
  CFTypeRef cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v53, &cf, &v81))
  {
    int v54 = v81;
    if (!v81)
    {
LABEL_119:
      FigCFDictionarySetValue();
      goto LABEL_120;
    }
  }
  else
  {
    int v54 = endpointCluster_copyPropertyInternal(a1, v53, v4, &cf);
    int v81 = v54;
    if (!v54) {
      goto LABEL_119;
    }
  }
  if (v54 != -12784 && v54 != -12787) {
    APSLogErrorAt();
  }
LABEL_120:
  if (cf) {
    CFRelease(cf);
  }
  int v55 = (const void *)*MEMORY[0x1E4F20FE0];
  int v81 = 0;
  CFTypeRef cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v55, &cf, &v81))
  {
    int v56 = v81;
    if (!v81)
    {
LABEL_124:
      FigCFDictionarySetValue();
      goto LABEL_125;
    }
  }
  else
  {
    int v56 = endpointCluster_copyPropertyInternal(a1, v55, v4, &cf);
    int v81 = v56;
    if (!v56) {
      goto LABEL_124;
    }
  }
  if (v56 != -12784 && v56 != -12787) {
    APSLogErrorAt();
  }
LABEL_125:
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v57 = (const void *)*MEMORY[0x1E4F20E88];
  int v81 = 0;
  CFTypeRef cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v57, &cf, &v81))
  {
    int v58 = v81;
    if (!v81)
    {
LABEL_129:
      FigCFDictionarySetValue();
      goto LABEL_130;
    }
  }
  else
  {
    int v58 = endpointCluster_copyPropertyInternal(a1, v57, v4, &cf);
    int v81 = v58;
    if (!v58) {
      goto LABEL_129;
    }
  }
  if (v58 != -12784 && v58 != -12787) {
    APSLogErrorAt();
  }
LABEL_130:
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v59 = (const void *)*MEMORY[0x1E4F20C98];
  int v81 = 0;
  CFTypeRef cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v59, &cf, &v81))
  {
    int v60 = v81;
    if (!v81)
    {
LABEL_134:
      FigCFDictionarySetValue();
      goto LABEL_135;
    }
  }
  else
  {
    int v60 = endpointCluster_copyPropertyInternal(a1, v59, v4, &cf);
    int v81 = v60;
    if (!v60) {
      goto LABEL_134;
    }
  }
  if (v60 != -12784 && v60 != -12787) {
    APSLogErrorAt();
  }
LABEL_135:
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v61 = (const void *)*MEMORY[0x1E4F20E08];
  int v81 = 0;
  CFTypeRef cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v61, &cf, &v81))
  {
    int v62 = v81;
    if (!v81)
    {
LABEL_139:
      FigCFDictionarySetValue();
      goto LABEL_140;
    }
  }
  else
  {
    int v62 = endpointCluster_copyPropertyInternal(a1, v61, v4, &cf);
    int v81 = v62;
    if (!v62) {
      goto LABEL_139;
    }
  }
  if (v62 != -12784 && v62 != -12787) {
    APSLogErrorAt();
  }
LABEL_140:
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v63 = (const void *)*MEMORY[0x1E4F20CA8];
  int v81 = 0;
  CFTypeRef cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v63, &cf, &v81))
  {
    int v64 = v81;
    if (!v81)
    {
LABEL_144:
      FigCFDictionarySetValue();
      goto LABEL_145;
    }
  }
  else
  {
    int v64 = endpointCluster_copyPropertyInternal(a1, v63, v4, &cf);
    int v81 = v64;
    if (!v64) {
      goto LABEL_144;
    }
  }
  if (v64 != -12784 && v64 != -12787) {
    APSLogErrorAt();
  }
LABEL_145:
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v65 = (const void *)*MEMORY[0x1E4F20CD0];
  int v81 = 0;
  CFTypeRef cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v65, &cf, &v81))
  {
    int v66 = v81;
    if (!v81)
    {
LABEL_149:
      FigCFDictionarySetValue();
      goto LABEL_150;
    }
  }
  else
  {
    int v66 = endpointCluster_copyPropertyInternal(a1, v65, v4, &cf);
    int v81 = v66;
    if (!v66) {
      goto LABEL_149;
    }
  }
  if (v66 != -12784 && v66 != -12787) {
    APSLogErrorAt();
  }
LABEL_150:
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v67 = (const void *)*MEMORY[0x1E4F20E80];
  int v81 = 0;
  CFTypeRef cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v67, &cf, &v81))
  {
    int v68 = v81;
    if (!v81)
    {
LABEL_154:
      FigCFDictionarySetValue();
      goto LABEL_155;
    }
  }
  else
  {
    int v68 = endpointCluster_copyPropertyInternal(a1, v67, v4, &cf);
    int v81 = v68;
    if (!v68) {
      goto LABEL_154;
    }
  }
  if (v68 != -12784 && v68 != -12787) {
    APSLogErrorAt();
  }
LABEL_155:
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v69 = (const void *)*MEMORY[0x1E4F20E18];
  int v81 = 0;
  CFTypeRef cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v69, &cf, &v81))
  {
    int v70 = v81;
    if (!v81)
    {
LABEL_159:
      FigCFDictionarySetValue();
      goto LABEL_160;
    }
  }
  else
  {
    int v70 = endpointCluster_copyPropertyInternal(a1, v69, v4, &cf);
    int v81 = v70;
    if (!v70) {
      goto LABEL_159;
    }
  }
  if (v70 != -12784 && v70 != -12787) {
    APSLogErrorAt();
  }
LABEL_160:
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v71 = (const void *)*MEMORY[0x1E4F20DB8];
  int v81 = 0;
  CFTypeRef cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v71, &cf, &v81))
  {
    int v72 = v81;
    if (!v81)
    {
LABEL_164:
      FigCFDictionarySetValue();
      goto LABEL_165;
    }
  }
  else
  {
    int v72 = endpointCluster_copyPropertyInternal(a1, v71, v4, &cf);
    int v81 = v72;
    if (!v72) {
      goto LABEL_164;
    }
  }
  if (v72 != -12784 && v72 != -12787) {
    APSLogErrorAt();
  }
LABEL_165:
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v73 = (const void *)*MEMORY[0x1E4F20DD8];
  int v81 = 0;
  CFTypeRef cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v73, &cf, &v81))
  {
    int v74 = v81;
    if (!v81)
    {
LABEL_169:
      FigCFDictionarySetValue();
      goto LABEL_170;
    }
  }
  else
  {
    int v74 = endpointCluster_copyPropertyInternal(a1, v73, v4, &cf);
    int v81 = v74;
    if (!v74) {
      goto LABEL_169;
    }
  }
  if (v74 != -12784 && v74 != -12787) {
    APSLogErrorAt();
  }
LABEL_170:
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v75 = (const void *)*MEMORY[0x1E4F20DD0];
  int v81 = 0;
  CFTypeRef cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v75, &cf, &v81))
  {
    int v76 = v81;
    if (!v81)
    {
LABEL_174:
      FigCFDictionarySetValue();
      goto LABEL_175;
    }
  }
  else
  {
    int v76 = endpointCluster_copyPropertyInternal(a1, v75, v4, &cf);
    int v81 = v76;
    if (!v76) {
      goto LABEL_174;
    }
  }
  if (v76 != -12784 && v76 != -12787) {
    APSLogErrorAt();
  }
LABEL_175:
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v77 = (const void *)*MEMORY[0x1E4F20CA0];
  int v81 = 0;
  CFTypeRef cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (!endpointCluster_copyStaticProperty(a1, v77, &cf, &v81))
  {
    int v78 = endpointCluster_copyPropertyInternal(a1, v77, v4, &cf);
    int v81 = v78;
    if (!v78) {
      goto LABEL_179;
    }
LABEL_325:
    if (v78 != -12784 && v78 != -12787) {
      APSLogErrorAt();
    }
    goto LABEL_180;
  }
  int v78 = v81;
  if (v81) {
    goto LABEL_325;
  }
LABEL_179:
  FigCFDictionarySetValue();
LABEL_180:
  if (cf) {
    CFRelease(cf);
  }
  uint64_t result = 0;
  *a2 = v6;
  return result;
}

const void *endpointCluster_getSubEndpointWithPredicate(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 264)) < 1) {
    return 0;
  }
  if (a2 != 2)
  {
    if (a2 == 1)
    {
      uint64_t v7 = CMBaseObjectGetDerivedStorage();
      CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v7 + 264));
      if (Count >= 1)
      {
        if (*(_DWORD *)v7 != 2)
        {
          CFArrayRef v5 = *(const __CFArray **)(v7 + 264);
          goto LABEL_22;
        }
        CFIndex v9 = Count;
        CFIndex v10 = 0;
        uint64_t v11 = *MEMORY[0x1E4F214A8];
        while (1)
        {
          ValueAtunsigned int Index = CFArrayGetValueAtIndex(*(CFArrayRef *)(v7 + 264), v10);
          if (endpointCluster_isSubEndpointOfType(a1, (uint64_t)ValueAtIndex, v11)) {
            break;
          }
          if (v9 == ++v10) {
            return 0;
          }
        }
        return ValueAtIndex;
      }
    }
    else
    {
      if (!a2)
      {
        CFArrayRef v5 = *(const __CFArray **)(DerivedStorage + 264);
LABEL_22:
        return CFArrayGetValueAtIndex(v5, 0);
      }
      uint64_t v13 = CMBaseObjectGetDerivedStorage();
      CFIndex v14 = CFArrayGetCount(*(CFArrayRef *)(v13 + 264));
      if (v14 >= 1)
      {
        CFIndex v15 = v14;
        CFIndex v16 = 0;
        while (1)
        {
          ValueAtunsigned int Index = CFArrayGetValueAtIndex(*(CFArrayRef *)(v13 + 264), v16);
          if (APSGetFBOPropertyInt64()) {
            break;
          }
          if (v15 == ++v16) {
            return 0;
          }
        }
        return ValueAtIndex;
      }
    }
    return 0;
  }
  return endpointCluster_getSubEndpointVolumeLeader(a1);
}

const void *endpointCluster_getSubEndpointVolumeLeader(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = *(void *)(DerivedStorage + 8);
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 264));
  if (Count < 1) {
    return 0;
  }
  CFIndex v5 = Count;
  if (v3 && *(_DWORD *)(DerivedStorage + 188) == 7) {
    return *(const void **)(DerivedStorage + 8);
  }
  if (*(_DWORD *)DerivedStorage != 1 && (*(_DWORD *)DerivedStorage != 2 || *(void *)(DerivedStorage + 24) != 3)) {
    goto LABEL_12;
  }
  CFIndex v7 = 0;
  while (1)
  {
    ValueAtunsigned int Index = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 264), v7);
    if (APSGetFBOPropertyInt64())
    {
      if (APSGetFBOPropertyInt64()) {
        break;
      }
    }
    if (v5 == ++v7) {
      goto LABEL_12;
    }
  }
  if (gLogCategory_APEndpointCluster <= 30
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!ValueAtIndex)
  {
LABEL_12:
    CFIndex v8 = 0;
    uint64_t v9 = *MEMORY[0x1E4F214D0];
    while (1)
    {
      ValueAtunsigned int Index = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 264), v8);
      if (endpointCluster_isSubEndpointOfType(a1, (uint64_t)ValueAtIndex, v9))
      {
        if (APSGetFBOPropertyInt64()) {
          break;
        }
      }
      if (v5 == ++v8) {
        goto LABEL_16;
      }
    }
    if (gLogCategory_APEndpointCluster <= 30
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (!ValueAtIndex)
    {
LABEL_16:
      if (gLogCategory_APEndpointCluster <= 30
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      return 0;
    }
  }
  return ValueAtIndex;
}

BOOL endpointCluster_isSubEndpointOfType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef cf = 0;
  if (!a2)
  {
    APSLogErrorAt();
    return 0;
  }
  if (a3)
  {
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    CFMutableDictionaryRef v6 = *(unsigned int (**)(uint64_t, void, void, CFTypeRef *))(v5 + 48);
    if (v6 && !v6(CMBaseObject, *MEMORY[0x1E4F20FB8], *MEMORY[0x1E4F1CF80], &cf))
    {
      BOOL v7 = FigCFEqual() != 0;
      goto LABEL_14;
    }
    if (gLogCategory_APEndpointCluster <= 90
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  else
  {
    APSLogErrorAt();
  }
  BOOL v7 = 0;
LABEL_14:
  if (cf) {
    CFRelease(cf);
  }
  return v7;
}

void __endpointCluster_copyClusterCompositionAsArray_block_invoke(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, a3);
  if (MutableCopy)
  {
    uint64_t v5 = MutableCopy;
    CFDictionaryRemoveValue(MutableCopy, (const void *)*MEMORY[0x1E4F21038]);
    CFDictionaryRemoveValue(v5, @"TightSyncName");
    CFDictionaryRemoveValue(v5, @"TightSyncModel");
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 40), v5);
    CFRelease(v5);
  }
  else
  {
    APSLogErrorAt();
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = -16721;
  }
}

void __endpointCluster_copyClusterHierarchyAsArray_block_invoke(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, a3);
  BOOL v7 = (const void *)*MEMORY[0x1E4F21038];
  int Value = CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E4F21038]);
  CFDictionaryGetValue(a3, @"TightSyncName");
  CFDictionaryGetValue(a3, @"TightSyncModel");
  if (!MutableCopy)
  {
    APSLogErrorAt();
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = -16721;
    return;
  }
  CFDictionaryRemoveValue(MutableCopy, v7);
  CFDictionaryRemoveValue(MutableCopy, @"TightSyncName");
  CFDictionaryRemoveValue(MutableCopy, @"TightSyncModel");
  CFDictionaryRemoveValue(MutableCopy, (const void *)*MEMORY[0x1E4F20430]);
  if (Value)
  {
    CFDictionaryRef v9 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), Value);
    if (v9)
    {
      CFDictionaryRef v10 = v9;
      CFRetain(v9);
      uint64_t v11 = (__CFArray *)CFDictionaryGetValue(v10, (const void *)*MEMORY[0x1E4F20468]);
      int v12 = v11;
      if (v11)
      {
        CFRetain(v11);
        if (!CFDictionaryContainsKey(v10, (const void *)*MEMORY[0x1E4F20438])) {
          FigCFDictionarySetValue();
        }
        if (gLogCategory_APEndpointCluster <= 30
          && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
LABEL_21:
        CFArrayAppendValue(v12, MutableCopy);
LABEL_22:
        CFRelease(MutableCopy);
        CFRelease(v10);
        if (!v12) {
          return;
        }
        uint64_t v13 = v12;
        goto LABEL_24;
      }
      APSLogErrorAt();
      uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 8);
      int v16 = -17606;
      goto LABEL_32;
    }
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFDictionaryRef v10 = Mutable;
      int v12 = CFArrayCreateMutable(v5, 0, MEMORY[0x1E4F1D510]);
      if (v12)
      {
        FigCFDictionarySetValue();
        FigCFDictionarySetValue();
        FigCFDictionarySetValue();
        FigCFDictionarySetValue();
        FigCFDictionarySetValue();
        FigCFDictionarySetValueFromKeyInDict();
        FigCFDictionarySetValueFromKeyInDict();
        if (gLogCategory_APEndpointCluster <= 30
          && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        FigCFDictionarySetValue();
        goto LABEL_21;
      }
      APSLogErrorAt();
      uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 8);
      int v16 = -16721;
LABEL_32:
      *(_DWORD *)(v15 + 24) = v16;
      goto LABEL_22;
    }
    APSLogErrorAt();
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = -16721;
  }
  else
  {
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 56), MutableCopy);
  }
  uint64_t v13 = MutableCopy;
LABEL_24:
  CFRelease(v13);
}

void __endpointCluster_copyClusterHierarchyAsArray_block_invoke_2(uint64_t a1, int a2, CFDictionaryRef theDict)
{
  if (!CFDictionaryContainsKey(theDict, (const void *)*MEMORY[0x1E4F20438]))
  {
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F20468]);
    endpointCluster_getClusterModelBasedOnAnyMemberModels(1, Value);
    FigCFDictionarySetValue();
  }
  CFMutableDictionaryRef v6 = *(__CFArray **)(a1 + 32);
  CFArrayAppendValue(v6, theDict);
}

uint64_t endpointCluster_getClusterModelBasedOnAnyMemberModels(int a1, CFArrayRef theArray)
{
  v6[0] = 0;
  v6[1] = v6;
  v6[2] = 0x2000000000;
  char v7 = 0;
  v4[0] = 0;
  v4[1] = v4;
  v4[2] = 0x2000000000;
  char v5 = 0;
  if (theArray)
  {
    CFArrayGetCount(theArray);
    CFArrayApplyBlock();
  }
  uint64_t v2 = APSGetClusterModelNameForClusterTypeAndModel();
  _Block_object_dispose(v4, 8);
  _Block_object_dispose(v6, 8);
  return v2;
}

CFTypeRef __endpointCluster_copyClusterHierarchyAsArray_block_invoke_3()
{
  CFTypeRef result = (CFTypeRef)FigCFDictionaryGetValue();
  if (result)
  {
    return CFRetain(result);
  }
  return result;
}

void __endpointCluster_getClusterModelBasedOnAnyMemberModels_block_invoke(void *a1)
{
  CFStringRef v2 = (const __CFString *)(*(uint64_t (**)(void))(a1[4] + 16))();
  if (v2)
  {
    CFStringRef v3 = v2;
    *(unsigned char *)(*(void *)(a1[5] + 8) + 24) |= CFStringHasPrefix(v2, @"AudioAccessory5");
    *(unsigned char *)(*(void *)(a1[6] + 8) + 24) |= CFStringHasPrefix(v3, @"AudioAccessory6");
    CFRelease(v3);
  }
}

uint64_t __endpointCluster_getClusterModelBasedOnClusterMembersModels_block_invoke()
{
  uint64_t v5 = 0;
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v1 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v1) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = 0;
  }
  CFStringRef v3 = *(void (**)(uint64_t, void, void, uint64_t *))(v2 + 48);
  if (!v3) {
    return 0;
  }
  v3(CMBaseObject, *MEMORY[0x1E4F20F18], *MEMORY[0x1E4F1CF80], &v5);
  return v5;
}

uint64_t endpointCluster_addOrRemoveLocalSubEndpointForEchoCancellationIfNeeded()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 8))
  {
    uint64_t v1 = DerivedStorage;
    if (*(_DWORD *)DerivedStorage == 2
      && *(_DWORD *)(DerivedStorage + 188) == 4
      && *(_DWORD *)(DerivedStorage + 304) == 3)
    {
      uint64_t v2 = *(void *)(DerivedStorage + 248);
      if (!v2)
      {
        APSLogErrorAt();
        return 4294949690;
      }
      if ((*(unsigned char *)(DerivedStorage + 328) & 0xA) != 0 && *(unsigned char *)(DerivedStorage + 437))
      {
        CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 376));
        CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v3, Count, *(CFDictionaryRef *)(v1 + 376));
        if (!MutableCopy)
        {
          APSLogErrorAt();
          return 4294950575;
        }
        CFMutableDictionaryRef v6 = MutableCopy;
        CFDictionarySetValue(MutableCopy, @"EnableEchoCancellation", (const void *)*MEMORY[0x1E4F1CFD0]);
        uint64_t v7 = *(void *)(v1 + 248);
        if (!v7 || (FigEndpointAggregateGetClassID(), !CMBaseObjectIsMemberOfClass())) {
          uint64_t v7 = 0;
        }
        uint64_t v8 = *(void *)(v1 + 8);
        uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 32);
        if (v9) {
          uint64_t v10 = v9;
        }
        else {
          uint64_t v10 = 0;
        }
        int v16 = *(uint64_t (**)(uint64_t, uint64_t, __CFDictionary *, void, void))(v10 + 8);
        if (v16)
        {
          uint64_t v15 = v16(v7, v8, v6, 0, 0);
          if (!v15)
          {
LABEL_28:
            CFRelease(v6);
            return v15;
          }
        }
        else
        {
          uint64_t v15 = 4294954514;
        }
        APSLogErrorAt();
        goto LABEL_28;
      }
      FigEndpointAggregateGetClassID();
      if (!CMBaseObjectIsMemberOfClass()) {
        uint64_t v2 = 0;
      }
      uint64_t v11 = *(void *)(v1 + 8);
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 32);
      if (v12) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      CFIndex v14 = *(void (**)(uint64_t, uint64_t, void, void, void))(v13 + 16);
      if (v14) {
        v14(v2, v11, 0, 0, 0);
      }
    }
  }
  return 0;
}

__CFString *endpointCluster_subEndpointSupportProtocolCopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"APEndpointCluster <FigEndpointSubEndpointSupportProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t endpointCluster_CopySubEndpointProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 30
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 208));
  uint64_t v10 = *(void *)(DerivedStorage + 248);
  FigEndpointSubEndpointSupportProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable || (uint64_t v12 = *(void *)(ProtocolVTable + 16)) == 0)
  {
    uint64_t v15 = 4294954508;
LABEL_17:
    APSLogErrorAt();
    goto LABEL_18;
  }
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 8);
  if (!v13)
  {
    uint64_t v15 = 4294954514;
    goto LABEL_17;
  }
  uint64_t v14 = v13(v10, a2, a3, a4, a5);
  uint64_t v15 = v14;
  if (v14 != -12784 && v14 != -6727 && v14 != 0) {
    goto LABEL_17;
  }
LABEL_18:
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 208));
  return v15;
}

uint64_t endpointCluster_SetSubEndpointProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 30
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 208));
  uint64_t v8 = *(void *)(DerivedStorage + 248);
  FigEndpointSubEndpointSupportProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable || (uint64_t v10 = *(void *)(ProtocolVTable + 16)) == 0)
  {
    uint64_t v13 = 4294954508;
LABEL_17:
    APSLogErrorAt();
    goto LABEL_18;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 16);
  if (!v11)
  {
    uint64_t v13 = 4294954514;
    goto LABEL_17;
  }
  uint64_t v12 = v11(v8, a2, a3, a4);
  uint64_t v13 = v12;
  if (v12 != -12784 && v12 != -6727 && v12 != 0) {
    goto LABEL_17;
  }
LABEL_18:
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 208));
  return v13;
}

uint64_t endpointCluster_DumpHierarchy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 264));
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 208));
  uint64_t v11 = *(void *)(DerivedStorage + 8);
  uint64_t v12 = APSClusterTypeToDescriptionString();
  uint64_t v13 = "Local";
  if (!v11) {
    uint64_t v13 = "Remote";
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, ...))(a5 + 16))(a5, a3, "ClusterEndpoint:[%{ptr}] (%s %@) %''@ Parent:[%{ptr}]\n", a1, v13, v12, *(void *)(DerivedStorage + 216), a2);
  if (v14)
  {
    uint64_t v22 = v14;
LABEL_22:
    APSLogErrorAt();
  }
  else
  {
    if (Count >= 1)
    {
      CFIndex v15 = 0;
      uint64_t v16 = a3 + 1;
      do
      {
        ValueAtunsigned int Index = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 264), v15);
        APSHierarchyReporterProtocolGetProtocolID();
        uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
        if (ProtocolVTable && (uint64_t v19 = *(void *)(ProtocolVTable + 16)) != 0)
        {
          int v20 = *(uint64_t (**)(const void *, uint64_t, uint64_t, void, uint64_t))(v19 + 8);
          if (v20)
          {
            uint64_t v21 = v20(ValueAtIndex, a1, v16, 0, a5);
            uint64_t v22 = v21;
            if (v21 != -12782 && v21 != -12788) {
              goto LABEL_16;
            }
          }
          else
          {
            uint64_t v22 = 4294954514;
          }
        }
        else
        {
          uint64_t v22 = 4294954508;
        }
        uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, ...))(a5 + 16))(a5, v16, "[Error] Object:[%{ptr}]%?s%?''@ cannot be dumped (error %#m) Parent:[%{ptr}]\n", ValueAtIndex, 0, " ", 0, 0, v22, a1);
LABEL_16:
        if (v22) {
          goto LABEL_22;
        }
        ++v15;
      }
      while (Count != v15);
    }
    uint64_t v22 = 0;
  }
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 208));
  return v22;
}

uint64_t endpointCluster_Activate(const void *a1, uint64_t a2, const __CFDictionary *a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3)
  {
    CFStringGetTypeID();
    CFDictionaryGetTypedValue();
    CFDictionaryGetInt64();
    CFStringGetTypeID();
    CFDictionaryGetTypedValue();
    CFStringGetTypeID();
    CFDictionaryGetTypedValue();
  }
  uint64_t v10 = &unk_1EA629000;
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 208));
  if (*(unsigned char *)(DerivedStorage + 370))
  {
    APSLogErrorAt();
    uint64_t updated = 4294950573;
    goto LABEL_83;
  }
  uint64_t v48 = a2;
  if (endpointCluster_usesPersistentConnection() && !CFDictionaryGetInt64())
  {
    if (*(_DWORD *)(DerivedStorage + 304))
    {
      uint64_t updated = endpointCluster_updateFeaturesInternal(a1, 1, *(void *)(DerivedStorage + 328) | a2, a3, a4, a5);
      goto LABEL_64;
    }
    if (gLogCategory_APEndpointCluster > 50)
    {
      uint64_t v46 = 0;
      uint64_t updated = 4294951716;
LABEL_90:
      endpointCluster_CallActivationCompletionCallback(a1, *(void *)(DerivedStorage + 384), v46, updated, a4);
      goto LABEL_64;
    }
    if (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()) {
      LogPrintF();
    }
    uint64_t updated = 4294951716;
LABEL_83:
    int v45 = v10[322];
    if (v45 <= 50 && (v45 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    if (updated == -16727) {
      uint64_t v46 = a2;
    }
    else {
      uint64_t v46 = 0;
    }
    goto LABEL_90;
  }
  if (*(_DWORD *)(DerivedStorage + 304))
  {
    APSLogErrorAt();
    uint64_t updated = 4294950569;
    goto LABEL_83;
  }
  if (*(void *)(DerivedStorage + 248))
  {
    APSLogErrorAt();
    uint64_t updated = 4294949690;
    goto LABEL_83;
  }
  if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 264)) <= 0)
  {
    APSLogErrorAt();
    uint64_t updated = 4294895306;
    goto LABEL_83;
  }
  APSEventRecorderRecordEventWithFlags();
  CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v12 = *(const void **)(DerivedStorage + 216);
  if (!v12) {
    uint64_t v12 = *(const void **)(DerivedStorage + 224);
  }
  uint64_t AsCluster = APEndpointAggregateCreateAsCluster(*MEMORY[0x1E4F1CF80], *(const void **)(DerivedStorage + 16), v12, *(void *)(DerivedStorage + 8) != 0, (uint64_t)a1, *(const void **)(DerivedStorage + 32), *(const __CFDictionary **)(DerivedStorage + 104), (void *)(DerivedStorage + 248));
  if (AsCluster)
  {
    uint64_t updated = AsCluster;
LABEL_82:
    APSLogErrorAt();
    goto LABEL_83;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  *(unsigned char *)(DerivedStorage + 344) = 1;
  if (!a3) {
    goto LABEL_22;
  }
  if (CFDictionaryGetInt64())
  {
    *(unsigned char *)(DerivedStorage + 344) = 0;
    goto LABEL_23;
  }
  if (*(unsigned char *)(DerivedStorage + 344))
  {
LABEL_22:
    CMNotificationCenterGetDefaultLocalCenter();
    APSRemoteConfigGetShared();
    FigNotificationCenterAddWeakListener();
  }
LABEL_23:
  uint64_t v15 = CMBaseObjectGetDerivedStorage();
  *(_OWORD *)(v15 + 544) = 0u;
  *(_OWORD *)(v15 + 560) = 0u;
  *(void *)(v15 + 576) = 0;
  *(_OWORD *)(v15 + 584) = 0u;
  *(_OWORD *)(v15 + 600) = 0u;
  *(void *)(v15 + 544) = a1;
  *(void *)(v15 + 584) = a1;
  *(void *)(v15 + 552) = endpointCluster_handleAuthRequiredInternal;
  *(void *)(v15 + 560) = endpointCluster_handleFailedInternal;
  *(void *)(v15 + 600) = endpointCluster_handleDidReceiveDataFromCommChannelInternal;
  *(void *)(v15 + 608) = endpointCluster_handleDidCloseCommChannelInternal;
  uint64_t v16 = *(void *)(DerivedStorage + 248);
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v18 + 48);
  if (v19) {
    v19(v16, DerivedStorage + 544);
  }
  if (*(_DWORD *)DerivedStorage == 3)
  {
    uint64_t v20 = *(void *)(DerivedStorage + 248);
    uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v22 = v21 ? v21 : 0;
    uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v22 + 56);
    if (v23) {
      v23(v20, DerivedStorage + 584);
    }
  }
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v24 = endpointCluster_updateActivationState(a1, (uint64_t)a3);
  if (v24)
  {
    uint64_t updated = v24;
    goto LABEL_83;
  }
  uint64_t v25 = a5;
  if (a3 && !CFDictionaryGetInt64()) {
    APSRTCReportingAgentCreate();
  }
  uint64_t v26 = *(void *)(DerivedStorage + 384) + 1;
  *(void *)(DerivedStorage + 384) = v26;
  BOOL v27 = *(void *)(DerivedStorage + 8) != 0;
  int v28 = *(_DWORD *)(DerivedStorage + 188);
  int v29 = *(_DWORD *)DerivedStorage;
  uint64_t v30 = *(void *)(DerivedStorage + 24);
  if (gLogCategory_APEndpointCluster <= 30
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (gCompletionCallbackContextInitOnce != -1) {
    dispatch_once_f(&gCompletionCallbackContextInitOnce, 0, (dispatch_function_t)_CompletionCallbackContextGetTypeID);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v32 = Instance;
  if (!Instance)
  {
    uint64_t updated = 4294960568;
    a2 = v48;
LABEL_73:
    uint64_t v10 = (_DWORD *)&unk_1EA629000;
    goto LABEL_75;
  }
  *(void *)(Instance + 96) = 0;
  *(_OWORD *)(Instance + 64) = 0u;
  *(_OWORD *)(Instance + 80) = 0u;
  *(_OWORD *)(Instance + 32) = 0u;
  *(_OWORD *)(Instance + 48) = 0u;
  *(_OWORD *)(Instance + 16) = 0u;
  *(void *)(Instance + 16) = CFRetain(a1);
  *(unsigned char *)(v32 + 24) = v27;
  *(_DWORD *)(v32 + 28) = v28;
  *(_DWORD *)(v32 + 32) = v29;
  *(void *)(v32 + 40) = v30;
  *(void *)(v32 + 48) = v26;
  a2 = v48;
  *(void *)(v32 + 56) = v48;
  *(void *)(v32 + 64) = a4;
  *(void *)(v32 + 72) = v25;
  uint64_t v33 = FigSimpleMutexCreate();
  *(void *)(v32 + 80) = v33;
  if (!v33)
  {
    uint64_t updated = 4294950575;
    goto LABEL_73;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *(void *)(v32 + 88) = Mutable;
  uint64_t v10 = &unk_1EA629000;
  if (!Mutable)
  {
    uint64_t updated = 4294950575;
LABEL_75:
    APSLogErrorAt();
    int v44 = v10[322];
    if (v44 <= 60 && (v44 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    if (v32) {
      CFRelease((CFTypeRef)v32);
    }
    goto LABEL_82;
  }
  *(void *)(DerivedStorage + 312) = v32;
  CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 264));
  CFArrayApplyBlock();
  uint64_t v35 = malloc_type_calloc(1uLL, 0x18uLL, 0x60040A44E5E0CuLL);
  if (!v35)
  {
    APSLogErrorAt();
    uint64_t updated = 4294950575;
    goto LABEL_83;
  }
  int v36 = v35;
  *uint64_t v35 = CFRetain(*(CFTypeRef *)(DerivedStorage + 248));
  CFTypeRef v37 = *(CFTypeRef *)(DerivedStorage + 376);
  if (v37) {
    CFTypeRef v37 = CFRetain(v37);
  }
  v36[1] = v37;
  v36[2] = CFRetain(*(CFTypeRef *)(DerivedStorage + 312));
  *(_DWORD *)(DerivedStorage + 304) = 1;
  endpointCluster_postIsInUseDidChangeNotification((uint64_t)a1, 1);
  *(unsigned char *)(DerivedStorage + 369) = endpointCluster_isEngaged();
  endpointCluster_updateHealthState(a1);
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *(void *)(DerivedStorage + 328) = v48;
  *(unsigned char *)(DerivedStorage + 436) = 0;
  uint64_t v38 = *(void *)(DerivedStorage + 248);
  uint64_t v39 = *(void *)(DerivedStorage + 376);
  uint64_t v40 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v40) {
    uint64_t v41 = v40;
  }
  else {
    uint64_t v41 = 0;
  }
  int v42 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void *))(v41 + 8);
  if (v42) {
    v42(v38, v48, v39, endpointCluster_handleInternalAggregateActivationCompletionCallback, v36);
  }
  uint64_t updated = 0;
  *(unsigned char *)(DerivedStorage + 256) = 1;
LABEL_64:
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 208));
  return updated;
}

uint64_t endpointCluster_Deactivate(const void *a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 208));
  if (!*(_DWORD *)(DerivedStorage + 304))
  {
    if (!*(unsigned char *)(DerivedStorage + 416)
      && !*(unsigned char *)(DerivedStorage + 436)
      && gLogCategory_APEndpointCluster <= 90
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_46;
  }
  if (!*(void *)(DerivedStorage + 248))
  {
    APSLogErrorAt();
LABEL_46:
    uint64_t updated = 4294951716;
LABEL_48:
    endpointCluster_CallCompletionCallback(a1, *(void *)(DerivedStorage + 384), *(void *)(DerivedStorage + 328), updated, a3);
    if (*(unsigned char *)(DerivedStorage + 416))
    {
      if (gLogCategory_APEndpointCluster <= 50
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      endpointCluster_updateClusterChangeProgress((uint64_t)a1, 1, 0);
    }
    goto LABEL_39;
  }
  endpointCluster_sendActivationMetrics();
  if (!*(void *)(DerivedStorage + 8)) {
    goto LABEL_23;
  }
  if (CFDictionaryGetInt64())
  {
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (!*(unsigned char *)(DerivedStorage + 416) && CFDictionaryGetInt64())
    {
      int v11 = -71992;
      if (gLogCategory_APEndpointCluster > 50)
      {
        char v12 = 1;
        goto LABEL_36;
      }
      if (gLogCategory_APEndpointCluster == -1)
      {
        int v11 = -71992;
        char v12 = 1;
        if (!_LogCategory_Initialize()) {
          goto LABEL_36;
        }
      }
      else
      {
        char v12 = 1;
      }
      goto LABEL_28;
    }
    if (*(_DWORD *)DerivedStorage == 1 && *(unsigned char *)(DerivedStorage + 184))
    {
      int v11 = -71993;
      if (gLogCategory_APEndpointCluster > 50)
      {
        char v12 = 0;
        goto LABEL_36;
      }
      if (gLogCategory_APEndpointCluster == -1)
      {
        char v12 = 0;
        if (!_LogCategory_Initialize()) {
          goto LABEL_36;
        }
      }
      else
      {
        char v12 = 0;
      }
LABEL_28:
      LogPrintF();
LABEL_36:
      endpointCluster_updateStatus(a1, v11, 1, 0);
      goto LABEL_37;
    }
LABEL_23:
    char v12 = 1;
LABEL_37:
    uint64_t v14 = malloc_type_calloc(1uLL, 0x38uLL, 0x10A0040069F93ABuLL);
    if (v14)
    {
      uint64_t v15 = (uint64_t)v14;
      *uint64_t v14 = CFRetain(a1);
      CFTypeRef v16 = CFRetain(*(CFTypeRef *)(DerivedStorage + 248));
      *(void *)(v15 + 24) = *(void *)(DerivedStorage + 384);
      uint64_t v17 = *(void *)(DerivedStorage + 328);
      *(void *)(v15 + 8) = v16;
      *(void *)(v15 + 16) = v17;
      *(unsigned char *)(v15 + 32) = *(unsigned char *)(DerivedStorage + 416);
      *(unsigned char *)(v15 + 33) = *(unsigned char *)(DerivedStorage + 436);
      *(unsigned char *)(v15 + 34) = v12;
      *(void *)(v15 + 40) = a3;
      *(void *)(v15 + 48) = a4;
      endpointCluster_cancelPendingUpdateFeatureRequests();
      endpointCluster_resetActivationState(a1, (uint64_t)a2, (uint64_t)endpointCluster_handleInternalAggregateDeactivationCompletionCallback, v15);
      uint64_t updated = 0;
      goto LABEL_39;
    }
    APSLogErrorAt();
    uint64_t updated = 4294950575;
    goto LABEL_48;
  }
  uint64_t v9 = *(void *)(DerivedStorage + 328);
  if (!endpointCluster_usesPersistentConnection()) {
    goto LABEL_23;
  }
  uint64_t v10 = (v9 & (32 * (*(_DWORD *)DerivedStorage == 2)));
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t updated = endpointCluster_updateFeaturesInternal(a1, 2, v10, a2, a3, a4);
LABEL_39:
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 208));
  return updated;
}

uint64_t endpointCluster_Dissociate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 8))
  {
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
  }
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 208));
  *(unsigned char *)(DerivedStorage + 370) = 1;
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    APSClusterTypeToDescriptionString();
    LogPrintF();
  }
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 208));
  CMNotificationCenterGetDefaultLocalCenter();
  FigDispatchAsyncPostNotification();
  return 0;
}

uint64_t endpointCluster_SetDelegate(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    uint64_t v6 = endpointCluster_SetDelegateRouting(a1, 0);
    if (v6)
    {
      uint64_t v5 = v6;
    }
    else
    {
      uint64_t v5 = endpointCluster_SetDelegateRemoteControl(a1, 0);
      if (!v5) {
        return v5;
      }
    }
LABEL_10:
    APSLogErrorAt();
    return v5;
  }
  long long v3 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v3;
  uint64_t v11 = *(void *)(a2 + 32);
  v8[1] = 0;
  v8[0] = *(void *)&v10[0];
  long long v9 = *(_OWORD *)(a2 + 48);
  uint64_t v4 = endpointCluster_SetDelegateRouting(a1, (uint64_t)v10);
  if (v4)
  {
    uint64_t v5 = v4;
    goto LABEL_10;
  }
  uint64_t v5 = endpointCluster_SetDelegateRemoteControl(a1, (uint64_t)v8);
  if (v5) {
    goto LABEL_10;
  }
  return v5;
}

uint64_t endpointCluster_SetDelegateRouting(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 208));
  if (*(unsigned char *)(DerivedStorage + 370))
  {
    APSLogErrorAt();
    a2 = 4294950573;
  }
  else
  {
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    uint64_t v4 = *(const void **)(DerivedStorage + 520);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(DerivedStorage + 520) = 0;
    }
    uint64_t v5 = (_OWORD *)(DerivedStorage + 448);
    if (a2)
    {
      long long v6 = *(_OWORD *)a2;
      long long v7 = *(_OWORD *)(a2 + 16);
      *(void *)(DerivedStorage + 480) = *(void *)(a2 + 32);
      *uint64_t v5 = v6;
      *(_OWORD *)(DerivedStorage + 464) = v7;
      a2 = 0;
      *(void *)(DerivedStorage + 520) = FigCFWeakReferenceHolderCreateWithReferencedObject();
    }
    else
    {
      *(void *)(DerivedStorage + 480) = 0;
      *uint64_t v5 = 0u;
      *(_OWORD *)(DerivedStorage + 464) = 0u;
    }
  }
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 208));
  return a2;
}

uint64_t endpointCluster_SetDelegateRemoteControl(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 208));
  if (*(unsigned char *)(DerivedStorage + 370))
  {
    APSLogErrorAt();
    a2 = 4294950573;
  }
  else
  {
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    uint64_t v4 = *(const void **)(DerivedStorage + 528);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(DerivedStorage + 528) = 0;
    }
    uint64_t v5 = (_OWORD *)(DerivedStorage + 488);
    if (a2)
    {
      long long v6 = *(_OWORD *)(a2 + 16);
      *uint64_t v5 = *(_OWORD *)a2;
      *(_OWORD *)(DerivedStorage + 504) = v6;
      a2 = 0;
      *(void *)(DerivedStorage + 528) = FigCFWeakReferenceHolderCreateWithReferencedObject();
    }
    else
    {
      *uint64_t v5 = 0u;
      *(_OWORD *)(DerivedStorage + 504) = 0u;
    }
  }
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 208));
  return a2;
}

uint64_t endpointCluster_CreatePlaybackSession(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 208));
  if (*(_DWORD *)(DerivedStorage + 304) != 3)
  {
    APSLogErrorAt();
    uint64_t v8 = 4294949690;
    goto LABEL_10;
  }
  uint64_t v4 = *(void *)(DerivedStorage + 248);
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  long long v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 72);
  if (!v7)
  {
    uint64_t v8 = 4294954514;
LABEL_9:
    APSLogErrorAt();
    goto LABEL_10;
  }
  uint64_t v8 = v7(v4, a2);
  if (v8) {
    goto LABEL_9;
  }
LABEL_10:
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 208));
  return v8;
}

uint64_t endpointCluster_UpdateFeatures(const void *a1, uint64_t a2, const __CFDictionary *a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 208));
  uint64_t updated = endpointCluster_updateFeaturesInternal(a1, 0, a2, a3, a4, a5);
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 208));
  return updated;
}

BOOL endpointCluster_usesPersistentConnection()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(void *)(DerivedStorage + 8)) {
    return 0;
  }
  int v1 = *(_DWORD *)(DerivedStorage + 188);
  if (v1 != 4)
  {
    if (v1 == 7 && *(_DWORD *)DerivedStorage == 1) {
      return *(unsigned char *)(DerivedStorage + 184) != 0;
    }
    return 0;
  }
  return 1;
}

uint64_t endpointCluster_updateFeaturesInternal(const void *a1, int a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5, uint64_t a6)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  int v13 = *(_DWORD *)(DerivedStorage + 304);
  if (!v13) {
    goto LABEL_67;
  }
  if (*(unsigned char *)(DerivedStorage + 416) || *(unsigned char *)(DerivedStorage + 436))
  {
    if (gLogCategory_APEndpointCluster > 90)
    {
      uint64_t v34 = 0;
      uint64_t v32 = 4294951716;
LABEL_88:
      endpointCluster_CallCompletionCallback(a1, *(void *)(DerivedStorage + 384), v34, v32, a5);
      endpointCluster_updateFeaturesFromSavedIfNeeded(a1);
      return v32;
    }
    if (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()) {
      LogPrintF();
    }
    uint64_t v32 = 4294951716;
    goto LABEL_81;
  }
  if (v13 == 3)
  {
    if (*(void *)(DerivedStorage + 328) == a3)
    {
      APSLogErrorAt();
      if (a2 == 2) {
        uint64_t v32 = 4294951716;
      }
      else {
        uint64_t v32 = 4294950569;
      }
      goto LABEL_81;
    }
    if (*(void *)(DerivedStorage + 248))
    {
      if (a2 != 1)
      {
LABEL_14:
        *(void *)(DerivedStorage + 328) = a3;
        uint64_t v15 = malloc_type_calloc(1uLL, 0x28uLL, 0x10A00407034790EuLL);
        if (v15)
        {
          CFTypeRef v16 = v15;
          *uint64_t v15 = a1;
          CFRetain(a1);
          uint64_t v17 = *(void *)(DerivedStorage + 384);
          v16[1] = a3;
          v16[2] = v17;
          CGRect v16[3] = a5;
          void v16[4] = a6;
          endpointCluster_addOrRemoveLocalSubEndpointForEchoCancellationIfNeeded();
          uint64_t v18 = *(void *)(DerivedStorage + 248);
          uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v19) {
            uint64_t v20 = v19;
          }
          else {
            uint64_t v20 = 0;
          }
          BOOL v27 = *(void (**)(uint64_t, uint64_t, const __CFDictionary *, void, void *))(v20 + 80);
          if (v27) {
            v27(v18, a3, a4, endpointCluster_handleAggregateEndpointUpdateFeaturesCompleted, v16);
          }
          return 0;
        }
        APSLogErrorAt();
        uint64_t v32 = 4294950575;
        goto LABEL_81;
      }
      uint64_t updated = endpointCluster_updateActivationState(a1, (uint64_t)a4);
      if (!updated)
      {
        a4 = *(const __CFDictionary **)(DerivedStorage + 376);
        goto LABEL_14;
      }
      uint64_t v32 = updated;
LABEL_81:
      if (gLogCategory_APEndpointCluster <= 50
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (v32 == -16727) {
        uint64_t v34 = a3;
      }
      else {
        uint64_t v34 = 0;
      }
      goto LABEL_88;
    }
LABEL_67:
    APSLogErrorAt();
    uint64_t v32 = 4294949690;
    goto LABEL_81;
  }
  uint64_t v21 = CMBaseObjectGetDerivedStorage();
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v21 + 624));
  if (Count <= 0)
  {
    int v26 = gLogCategory_APEndpointCluster;
  }
  else
  {
    uint64_t v23 = a6;
    CFIndex v24 = Count - 1;
    ValueAtunsigned int Index = CFArrayGetValueAtIndex(*(CFArrayRef *)(v21 + 624), Count - 1);
    int v26 = gLogCategory_APEndpointCluster;
    if (gLogCategory_APEndpointCluster <= 40)
    {
      if (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()) {
        LogPrintF();
      }
      int v26 = gLogCategory_APEndpointCluster;
    }
    if (a2 == 2 && *((_DWORD *)ValueAtIndex + 4) == 1)
    {
      if (v26 <= 50)
      {
        if (v26 != -1 || _LogCategory_Initialize()) {
          LogPrintF();
        }
        if (gLogCategory_APEndpointCluster <= 50
          && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
      }
      endpointCluster_CallCompletionCallback(a1, *(void *)(v21 + 384), 0, 4294949692, ValueAtIndex[5]);
      if (gLogCategory_APEndpointCluster <= 50
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      endpointCluster_CallCompletionCallback(a1, *(void *)(v21 + 384), a3, 0, a5);
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v21 + 624), v24);
      return 0;
    }
    a6 = v23;
  }
  if (v26 <= 50 && (v26 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v28 = CMBaseObjectGetDerivedStorage();
  if (gUpdateFeaturesRequestInitOnce != -1) {
    dispatch_once_f(&gUpdateFeaturesRequestInitOnce, 0, (dispatch_function_t)_UpdateFeaturesRequestGetTypeID);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v30 = Instance;
  if (!Instance)
  {
    uint64_t v32 = 4294960568;
    goto LABEL_74;
  }
  *(void *)(Instance + 48) = 0;
  *(_OWORD *)(Instance + 16) = 0u;
  *(_OWORD *)(Instance + 32) = 0u;
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *(void *)(v30 + 24) = a3;
  if (a4)
  {
    CFDictionaryRef Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a4);
    *(void *)(v30 + 32) = Copy;
    if (!Copy)
    {
      uint64_t v32 = 4294950575;
LABEL_74:
      APSLogErrorAt();
      if (gLogCategory_APEndpointCluster <= 90
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (v30) {
        CFRelease((CFTypeRef)v30);
      }
      APSLogErrorAt();
      goto LABEL_81;
    }
  }
  *(_DWORD *)(v30 + 16) = a2;
  *(void *)(v30 + 40) = a5;
  *(void *)(v30 + 48) = a6;
  CFArrayAppendValue(*(CFMutableArrayRef *)(v28 + 624), (const void *)v30);
  CFRelease((CFTypeRef)v30);
  return 0;
}

void endpointCluster_forwardInternalAggregateNotification()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t MutableCopy = FigCFDictionaryCreateMutableCopy();
  if (MutableCopy)
  {
    uint64_t v2 = (const void *)MutableCopy;
    if (FigCFEqual())
    {
      MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 208));
      CFDictionarySetInt64();
      MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 208));
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    CFRelease(v2);
  }
  else
  {
    APSLogErrorAt();
  }
}

void endpointCluster_handleSubEndpointEngagedStateChanged(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 208));
  if (*(void *)(DerivedStorage + 248) != a4) {
    endpointCluster_updateIdleState(a2);
  }
  endpointCluster_updateEngagedState(a2);
  JUMPOUT(0x1D25EB390);
}

uint64_t endpointCluster_handleRemoteConfigChangedNotification()
{
  return CMBaseObjectGetDerivedStorage();
}

uint64_t endpointCluster_updateActivationState(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t MutableCopy = FigCFDictionaryCreateMutableCopy();
  if (MutableCopy)
  {
    uint64_t v6 = (__CFDictionary *)MutableCopy;
    if (a2) {
      CFDictionaryMergeDictionary();
    }
    CFStringGetTypeID();
    TypedCFArrayRef Value = (const void *)CFDictionaryGetTypedValue();
    CFStringGetTypeID();
    uint64_t v8 = (const void *)CFDictionaryGetTypedValue();
    CFStringGetTypeID();
    long long v9 = (const void *)CFDictionaryGetTypedValue();
    uint64_t Int64 = CFDictionaryGetInt64();
    uint64_t v11 = (const void *)*MEMORY[0x1E4F1CFD0];
    CFDictionarySetValue(v6, @"NoIdleTimeout", (const void *)*MEMORY[0x1E4F1CFD0]);
    if (*(_DWORD *)DerivedStorage == 2 && !*(void *)(DerivedStorage + 8)) {
      CFDictionarySetValue(v6, @"IsRemoteHTGroup", v11);
    }
    CFDictionarySetInt64();
    if (*(void *)(DerivedStorage + 8)) {
      char v12 = v11;
    }
    else {
      char v12 = (const void *)*MEMORY[0x1E4F1CFC8];
    }
    CFDictionarySetValue(v6, @"IsPartOfLocalCluster", v12);
    CFDictionarySetValue(v6, @"Container", a1);
    int v13 = *(const void **)(DerivedStorage + 376);
    *(void *)(DerivedStorage + 376) = v6;
    CFRetain(v6);
    if (v13) {
      CFRelease(v13);
    }
    uint64_t v14 = *(const void **)(DerivedStorage + 400);
    *(void *)(DerivedStorage + 400) = v8;
    if (v8) {
      CFRetain(v8);
    }
    if (v14) {
      CFRelease(v14);
    }
    uint64_t v15 = *(const void **)(DerivedStorage + 408);
    *(void *)(DerivedStorage + 408) = v9;
    if (v9) {
      CFRetain(v9);
    }
    if (v15) {
      CFRelease(v15);
    }
    *(unsigned char *)(DerivedStorage + 372) = Int64 != 0;
    if (Int64)
    {
      *(void *)(DerivedStorage + 424) = 1;
      *(_DWORD *)(DerivedStorage + 432) = 0;
    }
    CFTypeRef v16 = *(const void **)(DerivedStorage + 392);
    *(void *)(DerivedStorage + 392) = TypedValue;
    if (TypedValue) {
      CFRetain(TypedValue);
    }
    if (v16) {
      CFRelease(v16);
    }
    CFRelease(v6);
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294950575;
  }
}

void endpointCluster_postIsInUseDidChangeNotification(uint64_t a1, int a2)
{
  CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    uint64_t v4 = Mutable;
    uint64_t v5 = (const void **)MEMORY[0x1E4F1CFC8];
    if (a2) {
      uint64_t v5 = (const void **)MEMORY[0x1E4F1CFD0];
    }
    CFDictionarySetValue(Mutable, @"IsInUse", *v5);
    if (gLogCategory_APEndpointCluster <= 30
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    CFRelease(v4);
  }
  else
  {
    APSLogErrorAt();
  }
}

uint64_t endpointCluster_isEngaged()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((!*(void *)(DerivedStorage + 8) || endpointCluster_usesPersistentConnection())
    && *(_DWORD *)(DerivedStorage + 304)
    || !endpointCluster_isIdle())
  {
    return 1;
  }
  uint64_t result = *(void *)(DerivedStorage + 248);
  if (result) {
    return APSGetFBOPropertyInt64() != 0;
  }
  return result;
}

void endpointCluster_handleInternalAggregateActivationCompletionCallback(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  long long v7 = *(const void **)(*(void *)(a5 + 16) + 16);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  unsigned int v9 = *(_DWORD *)(DerivedStorage + 112);
  if (v9)
  {
    if (gLogCategory_APEndpointCluster <= 50)
    {
      if (gLogCategory_APEndpointCluster != -1
        || (v10 = _LogCategory_Initialize(), unsigned int v9 = *(_DWORD *)(DerivedStorage + 112), v10))
      {
        LogPrintF();
        unsigned int v9 = *(_DWORD *)(DerivedStorage + 112);
      }
    }
    sleep(v9);
  }
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 208));
  if (a4) {
    *(unsigned char *)(DerivedStorage + 256) = 0;
  }
  uint64_t v11 = *(void *)(a5 + 16);
  if (*(void *)(v11 + 48) != *(void *)(DerivedStorage + 384))
  {
    uint64_t v13 = 4294949692;
    goto LABEL_16;
  }
  int v12 = *(_DWORD *)(DerivedStorage + 304);
  if (!a4 && v12 == 1)
  {
    *(_DWORD *)(DerivedStorage + 304) = 2;
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 264)) > 0)
    {
      uint64_t v14 = *(const void **)(DerivedStorage + 8);
      if (v14)
      {
        int v15 = *(_DWORD *)(DerivedStorage + 188);
        if (v15 == 4)
        {
          endpointCluster_manageActivationTimeoutTimer(v7, *(const void **)(a5 + 16));
          uint64_t v14 = *(const void **)(DerivedStorage + 8);
        }
        else if (v15 != 7 || *(_DWORD *)DerivedStorage != 2)
        {
          goto LABEL_28;
        }
        endpointCluster_handleSubEndpointResult(v7, *(void *)(a5 + 16), v14, 0, 0);
      }
LABEL_28:
      endpointCluster_activateSubEndpointsIfNeeded(*(void *)(*(void *)(a5 + 16) + 16));
      goto LABEL_29;
    }
    APSLogErrorAt();
    uint64_t v11 = *(void *)(a5 + 16);
    uint64_t v13 = 4294949690;
LABEL_16:
    CompletionCallbackContextSetError(v11, v13);
    goto LABEL_29;
  }
  if (v12 == 1) {
    uint64_t v13 = a4;
  }
  else {
    uint64_t v13 = 4294949692;
  }
  if (v13) {
    goto LABEL_16;
  }
LABEL_29:
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 208));
  CFRelease(*(CFTypeRef *)a5);
  uint64_t v17 = *(const void **)(a5 + 8);
  if (v17) {
    CFRelease(v17);
  }
  uint64_t v18 = *(const void **)(a5 + 16);
  if (v18) {
    CFRelease(v18);
  }
  free((void *)a5);
}

void endpointCluster_CallActivationCompletionCallback(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a4)
  {
    endpointCluster_cancelPendingUpdateFeatureRequests();
    endpointCluster_resetActivationState(a1, 0, 0, 0);
  }
  endpointCluster_CallCompletionCallback(a1, a2, a3, a4, a5);
}

void endpointCluster_handleAggregateEndpointUpdateFeaturesCompleted(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a5[3])
  {
    CFRetain((CFTypeRef)*a5);
    APSDispatchAsyncFHelper();
  }
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 208));
  endpointCluster_updateFeaturesFromSavedIfNeeded(*a5);
  if (*(void *)(DerivedStorage + 8))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
  }
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 208));
  CFRelease((CFTypeRef)*a5);
  free(a5);
}

void endpointCluster_CallCompletionCallback(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
  {
    CFRetain(a1);
    APSDispatchAsyncFHelper();
  }
}

void endpointCluster_updateFeaturesFromSavedIfNeeded(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 624)) >= 1)
  {
    ValueAtunsigned int Index = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 624), 0);
    uint64_t v4 = ValueAtIndex;
    if (ValueAtIndex) {
      CFRetain(ValueAtIndex);
    }
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 624), 0);
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    endpointCluster_updateFeaturesInternal(a1, *((_DWORD *)v4 + 4), *((void *)v4 + 3), *((const __CFDictionary **)v4 + 4), *((void *)v4 + 5), *((void *)v4 + 6));
    CFRelease(v4);
  }
}

uint64_t _UpdateFeaturesRequestGetTypeID()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gUpdateFeaturesRequestCFTypeID TypeID = result;
  return result;
}

void _UpdateFeaturesRequestFinalize(uint64_t a1)
{
  int v1 = *(const void **)(a1 + 32);
  if (v1) {
    CFRelease(v1);
  }
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

void endpointCluster_sendActivationMetrics()
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  CFTypeRef cf = 0;
  CFTypeRef v39 = 0;
  CFTypeRef v37 = 0;
  if (!*(void *)(DerivedStorage + 440)) {
    goto LABEL_62;
  }
  uint64_t v1 = DerivedStorage;
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    APSLogErrorAt();
LABEL_62:
    int v12 = 0;
    goto LABEL_51;
  }
  long long v3 = Mutable;
  GetDeviceModelString();
  CFDictionarySetCString();
  SNPrintF();
  CFDictionarySetCString();
  uint64_t v34 = (const void *)*MEMORY[0x1E4F1CFC8];
  uint64_t v35 = (const void *)*MEMORY[0x1E4F1CFD0];
  if (*(void *)(v1 + 8)) {
    uint64_t v4 = (const void *)*MEMORY[0x1E4F1CFD0];
  }
  else {
    uint64_t v4 = (const void *)*MEMORY[0x1E4F1CFC8];
  }
  CFDictionarySetValue(v3, @"isLocalCluster", v4);
  FigCFDictionarySetInt();
  FigCFDictionarySetInt();
  if (!*(_DWORD *)(v1 + 320))
  {
    uint64_t v5 = CMBaseObjectGetDerivedStorage();
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v5 + 264));
    if (Count >= 1)
    {
      CFIndex v7 = Count;
      CFIndex v8 = 0;
      int v9 = 0;
      do
      {
        CFArrayGetValueAtIndex(*(CFArrayRef *)(v5 + 264), v8);
        if (APSGetFBOPropertyInt64()) {
          ++v9;
        }
        ++v8;
      }
      while (v7 != v8);
    }
  }
  FigCFDictionarySetInt();
  APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursive();
  CFDictionarySetInt64();
  APSEventRecorderGetTimeSinceEventInMilliSecondRecursive();
  CFDictionarySetInt64();
  CFAbsoluteTimeGetCurrent();
  CFDictionarySetInt64();
  FigCFDictionarySetInt();
  CFIndex v10 = CFArrayGetCount(*(CFArrayRef *)(v1 + 264));
  if (!v10)
  {
    int v12 = 0;
    goto LABEL_47;
  }
  uint64_t v11 = v10;
  int v12 = CFArrayCreateMutable(allocator, v10, MEMORY[0x1E4F1D510]);
  if (v12)
  {
    if (v11 >= 1)
    {
      CFIndex v13 = 0;
      uint64_t v33 = *MEMORY[0x1E4F20FB8];
      uint64_t v14 = @"timeSinceSubEndpointActivatedSecs";
      do
      {
        CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 264), v13);
        CFMutableDictionaryRef v15 = CFDictionaryCreateMutable(allocator, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (!v15) {
          goto LABEL_60;
        }
        CFTypeRef v16 = v15;
        uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
        uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v18) {
          uint64_t v19 = v18;
        }
        else {
          uint64_t v19 = 0;
        }
        uint64_t v20 = *(unsigned int (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(v19 + 48);
        if (!v20
          || (uint64_t v21 = v14, v20(CMBaseObject, v33, allocator, &cf))
          || ((uint64_t v22 = APSGetFBOPropertyInt64(),
               uint64_t v23 = FigEndpointGetCMBaseObject(),
               (uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 8)) == 0)
            ? (uint64_t v25 = 0)
            : (uint64_t v25 = v24),
              (int v26 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v25 + 48)) == 0
           || v26(v23, @"EndpointStatus", allocator, &v37)))
        {
          APSLogErrorAt();
          CFRelease(v3);
          uint64_t v32 = v16;
          goto LABEL_50;
        }
        uint64_t v27 = FigEndpointGetCMBaseObject();
        uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v14 = v21;
        if (v28) {
          uint64_t v29 = v28;
        }
        else {
          uint64_t v29 = 0;
        }
        uint64_t v30 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v29 + 48);
        if (v30) {
          v30(v27, @"EndpointMetrics", allocator, &v39);
        }
        if (v22) {
          BOOL v31 = v35;
        }
        else {
          BOOL v31 = v34;
        }
        CFDictionarySetValue(v16, @"isLocalSubEndpoint", v31);
        FigCFDictionarySetValue();
        FigCFDictionarySetValue();
        FigCFDictionarySetInt64();
        if (v39)
        {
          CFDictionaryGetInt64();
          FigCFDictionarySetInt64();
        }
        CFArrayAppendValue(v12, v16);
        CFRelease(v16);
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
        if (v37)
        {
          CFRelease(v37);
          CFTypeRef v37 = 0;
        }
        if (v39)
        {
          CFRelease(v39);
          CFTypeRef v39 = 0;
        }
      }
      while (v11 != ++v13);
    }
    CFDictionarySetValue(v3, @"subEndpointInfo", v12);
LABEL_47:
    APSRTCReportingAgentSendEvent();
    goto LABEL_48;
  }
LABEL_60:
  APSLogErrorAt();
LABEL_48:
  uint64_t v32 = v3;
LABEL_50:
  CFRelease(v32);
LABEL_51:
  if (cf) {
    CFRelease(cf);
  }
  if (v37) {
    CFRelease(v37);
  }
  if (v39) {
    CFRelease(v39);
  }
  if (v12) {
    CFRelease(v12);
  }
}

void endpointCluster_updateIdleState(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 304) == 3)
  {
    uint64_t v3 = DerivedStorage;
    int isIdle = endpointCluster_isIdle();
    if (*(unsigned __int8 *)(v3 + 368) != isIdle)
    {
      char v5 = isIdle;
      if (gLogCategory_APEndpointCluster <= 50
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *(unsigned char *)(v3 + 368) = v5;
      CFRetain(a1);
      APSDispatchAsyncFHelper();
      uint64_t v6 = CMBaseObjectGetDerivedStorage();
      if (*(_DWORD *)(v6 + 304) == 3)
      {
        uint64_t v7 = v6;
        int v8 = *(_DWORD *)(v6 + 340);
        if (v8)
        {
          if (endpointCluster_isIdle())
          {
            if (gLogCategory_APEndpointCluster <= 50
              && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            *(_DWORD *)(v7 + 340) = 0;
            endpointCluster_handleClusterFatalError(a1, v8, 1);
          }
        }
      }
    }
  }
}

void endpointCluster_updateEngagedState(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 304) == 3)
  {
    uint64_t v3 = DerivedStorage;
    int isEngaged = endpointCluster_isEngaged();
    if (*(unsigned __int8 *)(v3 + 369) != isEngaged)
    {
      int v5 = isEngaged;
      if (gLogCategory_APEndpointCluster <= 50
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *(unsigned char *)(v3 + 369) = v5;
      if (v5) {
        endpointCluster_activateSubEndpointsIfNeeded((uint64_t)a1);
      }
      endpointCluster_updateHealthState(a1);
    }
  }
}

uint64_t endpointCluster_isIdle()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 264)) < 1) {
    return 1;
  }
  CFIndex v1 = 0;
  while (1)
  {
    CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 264), v1);
    if (APSGetFBOPropertyInt64()) {
      break;
    }
    if (++v1 >= CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 264))) {
      return 1;
    }
  }
  return 0;
}

void endpointCluster_deferredHandleIdleStateChanged(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 208));
  if (*(unsigned char *)(a1 + 8) && *(unsigned char *)(DerivedStorage + 336) && *(_DWORD *)(DerivedStorage + 304) == 3)
  {
    uint64_t v3 = *(void **)a1;
    uint64_t v4 = CMBaseObjectGetDerivedStorage();
    uint64_t v5 = v4;
    uint64_t v6 = *(NSObject **)(v4 + 56);
    if (v6)
    {
      dispatch_source_cancel(*(dispatch_source_t *)(v4 + 56));
      dispatch_release(v6);
      *(void *)(v5 + 56) = 0;
    }
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(void *)(v5 + 56) = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, *(dispatch_queue_t *)(v5 + 40));
    CFRetain(v3);
    dispatch_set_context(*(dispatch_object_t *)(v5 + 56), v3);
    dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v5 + 56), (dispatch_function_t)endpointCluster_inactivityTimerFired);
    dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(v5 + 56), (dispatch_function_t)endpointCluster_inactivityTimerCancelled);
    int v8 = *(NSObject **)(v5 + 56);
    dispatch_time_t v9 = dispatch_time(0, 1000000000 * *(int *)(v5 + 176));
    dispatch_source_set_timer(v8, v9, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
    dispatch_resume(*(dispatch_object_t *)(v5 + 56));
  }
  else
  {
    uint64_t v7 = *(NSObject **)(DerivedStorage + 56);
    if (v7)
    {
      dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 56));
      dispatch_release(v7);
      *(void *)(DerivedStorage + 56) = 0;
    }
  }
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 208));
  CFIndex v10 = *(const void **)a1;
  CFRelease(v10);
}

void endpointCluster_inactivityTimerFired(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 208));
  uint64_t v3 = *(NSObject **)(DerivedStorage + 56);
  if (v3)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 56));
    dispatch_release(v3);
    *(void *)(DerivedStorage + 56) = 0;
  }
  if (endpointCluster_isIdle() && *(_DWORD *)(DerivedStorage + 304) == 3)
  {
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    endpointCluster_updateStatus(a1, -72276, 1, 1);
  }
  JUMPOUT(0x1D25EB390);
}

void endpointCluster_inactivityTimerCancelled(CFTypeRef cf)
{
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRelease(cf);
}

void endpointCluster_updateStatus(const void *a1, int a2, int a3, int a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 == -72277) {
    int v9 = -17601;
  }
  else {
    int v9 = a2;
  }
  if (a2 == -72101) {
    int v10 = -15582;
  }
  else {
    int v10 = v9;
  }
  if (a2 == -72100) {
    unsigned int v11 = -15581;
  }
  else {
    unsigned int v11 = v10;
  }
  if (a2)
  {
    uint64_t v12 = DerivedStorage;
    if (!*(unsigned char *)(DerivedStorage + 370))
    {
      *(_DWORD *)(DerivedStorage + 320) = a2;
      CFAllocatorRef v13 = CFGetAllocator(a1);
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v13, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (Mutable)
      {
        CFMutableDictionaryRef v15 = Mutable;
        CFDictionarySetInt64();
        CFAllocatorRef v16 = CFGetAllocator(a1);
        CFMutableDictionaryRef v17 = CFDictionaryCreateMutable(v16, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (!v17)
        {
          APSLogErrorAt();
          goto LABEL_47;
        }
        uint64_t v18 = v17;
        CFDictionarySetInt64();
        CFDictionarySetInt64();
        if (a3)
        {
          if (v11 >> 1 != 2147475857)
          {
            uint64_t v20 = (const void **)MEMORY[0x1E4F20580];
            uint64_t v21 = (const void **)MEMORY[0x1E4F20678];
LABEL_23:
            int v19 = gLogCategory_APEndpointCluster;
            goto LABEL_24;
          }
          int v19 = gLogCategory_APEndpointCluster;
          if (gLogCategory_APEndpointCluster > 30)
          {
            uint64_t v20 = (const void **)MEMORY[0x1E4F20588];
            uint64_t v21 = (const void **)MEMORY[0x1E4F20680];
LABEL_24:
            uint64_t v22 = *v20;
            uint64_t v23 = *v21;
            *(unsigned char *)(v12 + 436) = 1;
            if (v19 <= 50 && (v19 != -1 || _LogCategory_Initialize())) {
              LogPrintF();
            }
            if (!a4 || !*(void *)(v12 + 8) || *(unsigned char *)(v12 + 416))
            {
LABEL_31:
              CFDictionarySetValue(v15, (const void *)*MEMORY[0x1E4F206A0], v23);
              CFDictionarySetValue(v18, (const void *)*MEMORY[0x1E4F205A0], v22);
              uint64_t v24 = (void *)CMBaseObjectGetDerivedStorage();
              uint64_t v25 = v24[58];
              if (!v25) {
                goto LABEL_42;
              }
              int v26 = v24;
              uint64_t v27 = v24[48];
              if (v24[65])
              {
                uint64_t v28 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
                if (!v28)
                {
                  if (gLogCategory_APEndpointCluster >= 61)
                  {
LABEL_46:
                    CMNotificationCenterGetDefaultLocalCenter();
                    FigDispatchAsyncPostNotification();
                    CFRelease(v18);
LABEL_47:
                    CFRelease(v15);
                    return;
                  }
                  if (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()) {
                    LogPrintF();
                  }
LABEL_42:
                  if (gLogCategory_APEndpointCluster <= 30
                    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
                  {
                    LogPrintF();
                  }
                  goto LABEL_46;
                }
              }
              else
              {
                uint64_t v28 = 0;
              }
              CFRetain(a1);
              CFRetain(v18);
              if (v28) {
                CFRetain(v28);
              }
              uint64_t v29 = v26[5];
              block[0] = MEMORY[0x1E4F143A8];
              block[1] = 0x40000000;
              block[2] = __endpointCluster_callDelegateHandleFailed_block_invoke;
              block[3] = &__block_descriptor_tmp_225_0;
              void block[4] = a1;
              void block[5] = v18;
              void block[6] = v25;
              void block[7] = v27;
              void block[8] = v28;
              dispatch_async(v29, block);
              if (v28) {
                CFRelease(v28);
              }
              goto LABEL_42;
            }
            if (*(_DWORD *)v12 == 2)
            {
              if ((*(unsigned char *)(v12 + 328) & 0x20) == 0) {
                goto LABEL_31;
              }
            }
            else if (*(_DWORD *)v12 != 1 || !*(unsigned char *)(v12 + 184) || !*(void *)(v12 + 328))
            {
              goto LABEL_31;
            }
            endpointCluster_postNeedDeactivationForClusterChange((uint64_t)a1, 1);
            goto LABEL_31;
          }
          if (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()) {
            LogPrintF();
          }
        }
        uint64_t v20 = (const void **)MEMORY[0x1E4F20588];
        uint64_t v21 = (const void **)MEMORY[0x1E4F20680];
        goto LABEL_23;
      }
      APSLogErrorAt();
    }
  }
}

void endpointCluster_postNeedDeactivationForClusterChange(uint64_t a1, int a2)
{
  CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    uint64_t v4 = Mutable;
    uint64_t v5 = (const void **)MEMORY[0x1E4F1CFD0];
    if (!a2) {
      uint64_t v5 = (const void **)MEMORY[0x1E4F1CFC8];
    }
    CFDictionarySetValue(Mutable, @"ClusterFailed", *v5);
    if (gLogCategory_APEndpointCluster <= 30
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    CFRelease(v4);
  }
  else
  {
    APSLogErrorAt();
  }
}

void __endpointCluster_callDelegateHandleFailed_block_invoke(uint64_t a1)
{
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  (*(void (**)(void, void, void, void))(a1 + 48))(*(void *)(a1 + 32), *(void *)(a1 + 56), *(void *)(a1 + 40), *(void *)(a1 + 64));
  CFRelease(*(CFTypeRef *)(a1 + 32));
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 64);
  if (v3)
  {
    CFRelease(v3);
  }
}

void endpointCluster_handleClusterFatalError(const void *a1, int a2, int a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRetain(a1);
  uint64_t v7 = *(NSObject **)(DerivedStorage + 40);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __endpointCluster_handleClusterFatalError_block_invoke;
  block[3] = &__block_descriptor_tmp_232_0;
  void block[4] = DerivedStorage;
  void block[5] = a1;
  int v9 = a2;
  int v10 = a3;
  dispatch_async(v7, block);
}

void __endpointCluster_handleClusterFatalError_block_invoke(uint64_t a1)
{
  MEMORY[0x1D25EB370](*(void *)(*(void *)(a1 + 32) + 208));
  endpointCluster_updateStatus(*(const void **)(a1 + 40), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52), 1);
  MEMORY[0x1D25EB390](*(void *)(*(void *)(a1 + 32) + 208));
  uint64_t v2 = *(const void **)(a1 + 40);
  CFRelease(v2);
}

CFIndex endpointCluster_activateSubEndpointsIfNeeded(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFIndex result = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 264));
  if (result >= 1)
  {
    for (CFIndex i = 0; i < result; ++i)
    {
      ValueAtunsigned int Index = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 264), i);
      if (endpointCluster_shouldActivateSubEndpoint(a1, ValueAtIndex)) {
        endpointCluster_activateSubEndpoint(a1, ValueAtIndex);
      }
      CFIndex result = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 264));
    }
  }
  return result;
}

uint64_t endpointCluster_handleAuthRequiredInternal(uint64_t a1, const void *a2, uint64_t a3, const void *a4, const void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1D25EB370](DerivedStorage[26]);
  if (DerivedStorage[57])
  {
    if (DerivedStorage[65] && (uint64_t v13 = FigCFWeakReferenceHolderCopyReferencedObject(), DerivedStorage[65]) && !v13)
    {
      if (gLogCategory_APEndpointCluster <= 90
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    else
    {
      uint64_t v14 = malloc_type_calloc(1uLL, 0x18uLL, 0xA00402214FCE6uLL);
      if (a2) {
        CFTypeRef v15 = CFRetain(a2);
      }
      else {
        CFTypeRef v15 = 0;
      }
      *uint64_t v14 = v15;
      v14[1] = a6;
      v14[2] = a7;
      if (a4) {
        CFRetain(a4);
      }
      if (a2) {
        CFRetain(a2);
      }
      if (a5) {
        CFRetain(a5);
      }
      APSDispatchAsyncFHelper();
    }
  }
  return MEMORY[0x1D25EB390](DerivedStorage[26]);
}

uint64_t endpointCluster_handleFailedInternal(uint64_t a1, uint64_t a2, const __CFDictionary *a3, const void *a4)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFArrayRef Value = CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E4F20368]);
  uint64_t result = CFDictionaryGetInt64();
  if (Value)
  {
    int v9 = result;
    MEMORY[0x1D25EB370](DerivedStorage[26]);
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    int v10 = (const void *)DerivedStorage[1];
    if (v10)
    {
      if (v9 == -72277 && Value == v10)
      {
        if (gLogCategory_APEndpointCluster <= 50
          && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        endpointCluster_updateClusterChangeProgress((uint64_t)a4, 0, 0);
      }
    }
    endpointCluster_handleSubEndpointResult(a4, DerivedStorage[39], Value, v9, 1);
    JUMPOUT(0x1D25EB390);
  }
  return result;
}

uint64_t endpointCluster_handleDidReceiveDataFromCommChannelInternal(uint64_t a1, uint64_t a2, const void *a3, const void *a4, const void *a5)
{
  if (a1 && a3 && a4 && a5)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 208));
    if (endpointCluster_isRelaySupported() && *(void *)(DerivedStorage + 248) == a1) {
      APEndpointCallRCDelegateDidReceiveDataAsync(a5, *(void *)(DerivedStorage + 384), a3, a4, *(NSObject **)(DerivedStorage + 40), *(void *)(DerivedStorage + 504), *(void *)(DerivedStorage + 528));
    }
    else {
      APSLogErrorAt();
    }
    JUMPOUT(0x1D25EB390);
  }
  return APSLogErrorAt();
}

uint64_t endpointCluster_handleDidCloseCommChannelInternal(uint64_t a1, uint64_t a2, const void *a3, const void *a4)
{
  if (a1 && a3 && a4)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 208));
    if (*(unsigned char *)(DerivedStorage + 370) || *(void *)(DerivedStorage + 248) != a1) {
      APSLogErrorAt();
    }
    else {
      APEndpointCallRCDelegateDidCloseAsync(a4, *(void *)(DerivedStorage + 384), a3, *(NSObject **)(DerivedStorage + 40), *(void *)(DerivedStorage + 512), *(void *)(DerivedStorage + 528));
    }
    JUMPOUT(0x1D25EB390);
  }
  return APSLogErrorAt();
}

void endpointCluster_authHandlingCompletionCallbackInternal(int a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = (void (*)(void, uint64_t, uint64_t, void))a4[1];
  if (v5) {
    v5(*a4, a2, a3, a4[2]);
  }
  if (*a4) {
    CFRelease((CFTypeRef)*a4);
  }
  free(a4);
}

void endpointCluster_callDelegateHandleAuthRequiredInternal(uint64_t a1)
{
  (*(void (**)(void, void, void, void, void, void, void))(a1 + 16))(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56));
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 32);
  if (v4)
  {
    CFRelease(v4);
  }
}

void endpointCluster_updateClusterChangeProgress(uint64_t a1, int a2, int a3)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  int v6 = DerivedStorage[417];
  if (DerivedStorage[417] && DerivedStorage[418])
  {
    APSLogErrorAt();
  }
  else
  {
    DerivedStorage[416] = 1;
    if (a2)
    {
      DerivedStorage[417] = 1;
      int v6 = 1;
    }
    if (a3) {
      DerivedStorage[418] = 1;
    }
    if (v6 && DerivedStorage[418])
    {
      if (gLogCategory_APEndpointCluster <= 50
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      endpointCluster_postFinishedDeactivationForClusterUUIDChangeOrFailure();
    }
  }
}

void endpointCluster_handleSubEndpointResult(const void *a1, uint64_t a2, const void *a3, int a4, int a5)
{
  CMBaseObjectGetDerivedStorage();
  if (!a2) {
    goto LABEL_10;
  }
  MEMORY[0x1D25EB370](*(void *)(a2 + 80));
  if (gLogCategory_APEndpointCluster <= 30
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFDictionarySetInt64();
  int updated = completionCallbackContext_updateStateFromResponses(a2);
  MEMORY[0x1D25EB390](*(void *)(a2 + 80));
  if (updated)
  {
    endpointCluster_handleClusterFatalError(a1, a4, a5);
  }
  else
  {
LABEL_10:
    if (a4)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (a5 || !APSGetFBOPropertyInt64())
      {
        if (*(_DWORD *)(DerivedStorage + 304))
        {
          if (!*(void *)(DerivedStorage + 360))
          {
            if (gLogCategory_APEndpointCluster <= 50
              && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            *(void *)(DerivedStorage + 360) = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D548]);
          }
          if (gLogCategory_APEndpointCluster <= 50
            && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          CFSetAddValue(*(CFMutableSetRef *)(DerivedStorage + 360), a3);
        }
        endpointCluster_failDelayManageSubEndpoint(a1, a3, 1);
      }
      else
      {
        if (gLogCategory_APEndpointCluster <= 50
          && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        endpointCluster_triggerLostClusterBuddyReconnectionLogic((uint64_t)a1, a3);
      }
    }
  }
}

void endpointCluster_postFinishedDeactivationForClusterUUIDChangeOrFailure()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    uint64_t v2 = Mutable;
    CFDictionarySetValue(Mutable, @"SourceEndpoint", *(const void **)(DerivedStorage + 8));
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    CFRelease(v2);
  }
  else
  {
    APSLogErrorAt();
  }
}

uint64_t completionCallbackContext_updateStateFromResponses(uint64_t a1)
{
  uint64_t v27 = 0;
  uint64_t v28 = &v27;
  uint64_t v29 = 0x2000000000;
  char v30 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = &v23;
  uint64_t v25 = 0x2000000000;
  int v26 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x3000000000;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v20 = 0;
  v15[0] = 0;
  v15[1] = v15;
  v15[2] = 0x2000000000;
  int v16 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2000000000;
  char v14 = 0;
  uint64_t v7 = 0;
  int v8 = &v7;
  uint64_t v9 = 0x2000000000;
  int v10 = 0;
  int v2 = *(_DWORD *)(a1 + 32);
  CFDictionaryApplyBlock();
  if (!*((unsigned char *)v12 + 24))
  {
    if (v2 == 2)
    {
      int v3 = *((_DWORD *)v24 + 6);
      uint64_t v4 = *((unsigned int *)v8 + 6);
      if (*(unsigned char *)(a1 + 24) && *(_DWORD *)(a1 + 28) == 7) {
        goto LABEL_8;
      }
      if (*((unsigned char *)v28 + 24))
      {
        if (!v3)
        {
          int v5 = 0;
          uint64_t v4 = *((unsigned int *)v24 + 6);
          goto LABEL_48;
        }
        if (v3 != 1) {
          goto LABEL_47;
        }
        if (!*(unsigned char *)(a1 + 24) || v18[4] > 0)
        {
LABEL_8:
          uint64_t v4 = 0;
LABEL_47:
          int v5 = 1;
          goto LABEL_48;
        }
        if (v18[3] <= 0 && (*(_DWORD *)(a1 + 28) != 4 || v18[5] >= *(void *)(a1 + 40) - 1)) {
          goto LABEL_47;
        }
      }
      else if (v18[3] <= 0)
      {
        if (gLogCategory_APEndpointCluster > 90)
        {
          int v5 = 1;
          uint64_t v4 = 4294949690;
          goto LABEL_23;
        }
        if (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()) {
          LogPrintF();
        }
        uint64_t v4 = 4294949690;
        goto LABEL_47;
      }
      int v5 = 0;
      uint64_t v4 = 0;
LABEL_48:
      if (gLogCategory_APEndpointCluster > 50
        || gLogCategory_APEndpointCluster == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_23;
      }
      goto LABEL_50;
    }
    if (v18[4] <= 0)
    {
      if (v18[3] > 0)
      {
        int v5 = 0;
        uint64_t v4 = 0;
        goto LABEL_30;
      }
      if (v18[5] <= 0) {
        uint64_t v4 = 4294949690;
      }
      else {
        uint64_t v4 = *((unsigned int *)v8 + 6);
      }
    }
    else
    {
      uint64_t v4 = 0;
    }
    int v5 = 1;
LABEL_30:
    if (gLogCategory_APEndpointCluster > 50
      || gLogCategory_APEndpointCluster == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_23;
    }
LABEL_50:
    LogPrintF();
    goto LABEL_23;
  }
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v4 = *((unsigned int *)v8 + 6);
  int v5 = 1;
LABEL_23:
  _Block_object_dispose(&v7, 8);
  _Block_object_dispose(&v11, 8);
  _Block_object_dispose(v15, 8);
  _Block_object_dispose(&v17, 8);
  _Block_object_dispose(&v23, 8);
  _Block_object_dispose(&v27, 8);
  if (gLogCategory_APEndpointCluster <= 30
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return completionCallbackContext_setState(a1, v5, v4);
}

uint64_t completionCallbackContext_setState(uint64_t a1, int a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 96))
  {
    *(unsigned char *)(a1 + 97) = a2;
    *(_DWORD *)(a1 + 100) = a3;
    if (!a2) {
      goto LABEL_44;
    }
    *(unsigned char *)(a1 + 96) = 1;
    uint64_t v7 = *(const void **)(a1 + 16);
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    CFTypeRef cf = 0;
    endpointCluster_manageActivationTimeoutTimer(v7, (const void *)a1);
    uint64_t v9 = *(void *)(a1 + 48);
    if (v9 != *(void *)(DerivedStorage + 384) || (*(_DWORD *)(DerivedStorage + 304) - 3) < 0xFFFFFFFE)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 4294949692;
      goto LABEL_42;
    }
    if (a3)
    {
      if (gLogCategory_APEndpointCluster <= 90
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (a3 == -72100)
      {
        uint64_t v11 = 4294951715;
      }
      else if (a3 == -72101)
      {
        uint64_t v11 = 4294951714;
      }
      else
      {
        uint64_t v11 = a3;
        if (a3 == -72277) {
          uint64_t v11 = 4294949695;
        }
      }
      if (*(unsigned char *)(DerivedStorage + 416))
      {
        if (gLogCategory_APEndpointCluster <= 50
          && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        endpointCluster_updateClusterChangeProgress((uint64_t)v7, 1, 0);
      }
      uint64_t v9 = *(void *)(a1 + 48);
      if (v11 && v11 != -16727)
      {
        uint64_t v10 = 0;
LABEL_42:
        endpointCluster_CallActivationCompletionCallback(v7, v9, v10, v11, *(void *)(a1 + 64));
        if (cf) {
          CFRelease(cf);
        }
        goto LABEL_44;
      }
    }
    else
    {
      if (gLogCategory_APEndpointCluster <= 50
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *(_DWORD *)(DerivedStorage + 304) = 3;
      APSEventRecorderRecordEvent();
      *(unsigned char *)(DerivedStorage + 336) = 1;
      endpointCluster_manageInactivityTimer(v7);
      CFAllocatorRef v12 = CFGetAllocator(v7);
      APEndpointCreateEndpointActivationNotificationPayload(v12, *(void *)(a1 + 56), *(void *)(a1 + 48), (CFMutableDictionaryRef *)&cf);
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
      if (*(void *)(DerivedStorage + 8))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigDispatchAsyncPostNotification();
      }
      CFRetain(v7);
      uint64_t v13 = *(NSObject **)(DerivedStorage + 40);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __endpointCluster_finalizeActivation_block_invoke;
      block[3] = &__block_descriptor_tmp_249;
      void block[4] = v7;
      dispatch_async(v13, block);
      endpointCluster_updateFeaturesFromSavedIfNeeded(v7);
      uint64_t v11 = 0;
      uint64_t v9 = *(void *)(a1 + 48);
    }
    uint64_t v10 = *(void *)(a1 + 56);
    goto LABEL_42;
  }
  if (!*(unsigned char *)(a1 + 97))
  {
LABEL_44:
    uint64_t v5 = 0;
    goto LABEL_45;
  }
  uint64_t v5 = 0;
  if (a3) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = a2 == 0;
  }
  if (v6 && !*(_DWORD *)(a1 + 100))
  {
    uint64_t v5 = 1;
    *(unsigned char *)(a1 + 97) = 1;
    *(_DWORD *)(a1 + 100) = -71991;
  }
LABEL_45:
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v5;
}

uint64_t __completionCallbackContext_computeState_block_invoke(void *a1, uint64_t a2, const void *a3)
{
  BOOL isSubEndpointOfType = endpointCluster_isSubEndpointOfType(*(void *)(a1[10] + 16), a2, *MEMORY[0x1E4F214A8]);
  uint64_t result = APSGetFBOPropertyInt64();
  int v11 = 0;
  if (*(_DWORD *)(*(void *)(a1[4] + 8) + 24) != 2)
  {
    uint64_t v7 = result;
    if (isSubEndpointOfType)
    {
      *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = 1;
      uint64_t result = completionCallbackContext_getSubEndpointStatus(a3, &v11);
      *(_DWORD *)(*(void *)(a1[6] + 8) + 24) = result;
    }
    else
    {
      uint64_t result = completionCallbackContext_getSubEndpointStatus(a3, &v11);
      switch(result)
      {
        case 2:
          ++*(void *)(*(void *)(a1[7] + 8) + 40);
          break;
        case 1:
          ++*(void *)(*(void *)(a1[7] + 8) + 32);
          break;
        case 0:
          ++*(void *)(*(void *)(a1[7] + 8) + 24);
          break;
      }
    }
    if (v7) {
      *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = result;
    }
    if (result == 2)
    {
      uint64_t v8 = *(void *)(a1[8] + 8);
      if (!*(unsigned char *)(v8 + 24))
      {
        int v9 = v11;
        if (v11)
        {
          if (v7) {
            BOOL v10 = 1;
          }
          else {
            BOOL v10 = (v11 + 72099) >= 0xFFFFFFFE;
          }
          if (v10) {
            *(unsigned char *)(v8 + 24) = 1;
          }
        }
        *(_DWORD *)(*(void *)(a1[9] + 8) + 24) = v9;
      }
    }
  }
  return result;
}

uint64_t completionCallbackContext_getSubEndpointStatus(const void *a1, int *a2)
{
  int valuePtr = 0;
  int v4 = CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F1D260]);
  int v5 = 0;
  uint64_t result = 0;
  if (!v4)
  {
    if (a1 && (CFTypeID v7 = CFGetTypeID(a1), v7 == CFNumberGetTypeID()))
    {
      CFNumberGetValue((CFNumberRef)a1, kCFNumberSInt32Type, &valuePtr);
      int v5 = valuePtr;
      if (valuePtr) {
        uint64_t result = 2;
      }
      else {
        uint64_t result = 1;
      }
    }
    else
    {
      uint64_t result = 2;
      int v5 = -17606;
    }
  }
  if (a2) {
    *a2 = v5;
  }
  return result;
}

uint64_t endpointCluster_manageActivationTimeoutTimer(const void *a1, const void *a2)
{
  if (a2) {
    CFRetain(a2);
  }
  return APSDispatchAsyncFHelper();
}

uint64_t endpointCluster_manageInactivityTimer(const void *a1)
{
  return APSDispatchAsyncFHelper();
}

void __endpointCluster_finalizeActivation_block_invoke(uint64_t a1)
{
  endpointCluster_deferredConfigureActivationMetricsTimer(*(void **)(a1 + 32));
  int v2 = *(const void **)(a1 + 32);
  CFRelease(v2);
}

void endpointCluster_deferredConfigureActivationMetricsTimer(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 208));
  int v3 = *(_DWORD *)(DerivedStorage + 304);
  uint64_t v4 = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = v4;
  if (v3 == 3)
  {
    uint64_t v6 = *(void *)(v4 + 144);
    CFTypeID v7 = *(NSObject **)(v4 + 88);
    if (v7)
    {
      dispatch_source_cancel(*(dispatch_source_t *)(v4 + 88));
      dispatch_release(v7);
      *(void *)(v5 + 88) = 0;
    }
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    uint64_t v8 = 1000000000 * v6;
    dispatch_time_t v9 = dispatch_time(0, 1000000000 * v6);
    *(void *)(v5 + 88) = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, *(dispatch_queue_t *)(v5 + 40));
    CFRetain(a1);
    dispatch_set_context(*(dispatch_object_t *)(v5 + 88), a1);
    dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v5 + 88), (dispatch_function_t)endpointCluster_metricsTimerFired);
    dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(v5 + 88), (dispatch_function_t)endpointCluster_metricsTimerCanceled);
    dispatch_source_set_timer(*(dispatch_source_t *)(v5 + 88), v9, v8, 0x3B9ACA00uLL);
    dispatch_resume(*(dispatch_object_t *)(v5 + 88));
  }
  else
  {
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    BOOL v10 = *(NSObject **)(v5 + 88);
    if (v10)
    {
      dispatch_source_cancel(*(dispatch_source_t *)(v5 + 88));
      dispatch_release(v10);
      *(void *)(v5 + 88) = 0;
    }
  }
  JUMPOUT(0x1D25EB390);
}

void endpointCluster_deferredConfigureActivationTimeoutTimer(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 208));
  if (*(unsigned char *)(a1 + 16)
    && (uint64_t v3 = *(void *)(a1 + 8)) != 0
    && (MEMORY[0x1D25EB370](*(void *)(v3 + 80)),
        int v4 = *(unsigned __int8 *)(v3 + 96),
        MEMORY[0x1D25EB390](*(void *)(v3 + 80)),
        !v4))
  {
    uint64_t v6 = *(void **)(a1 + 8);
    uint64_t v7 = CMBaseObjectGetDerivedStorage();
    if (*(void *)(v7 + 48))
    {
      APSLogErrorAt();
    }
    else
    {
      uint64_t v8 = v7;
      if (gLogCategory_APEndpointCluster <= 50
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *(void *)(v8 + 48) = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, *(dispatch_queue_t *)(v8 + 40));
      CFRetain(v6);
      dispatch_set_context(*(dispatch_object_t *)(v8 + 48), v6);
      dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v8 + 48), (dispatch_function_t)endpointCluster_activationTimerFired);
      dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(v8 + 48), (dispatch_function_t)endpointCluster_activationTimerCancelled);
      dispatch_time_t v9 = *(NSObject **)(v8 + 48);
      dispatch_time_t v10 = dispatch_time(0, 1000000000 * *(int *)(v8 + 180));
      dispatch_source_set_timer(v9, v10, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
      dispatch_resume(*(dispatch_object_t *)(v8 + 48));
    }
  }
  else
  {
    uint64_t v5 = *(NSObject **)(DerivedStorage + 48);
    if (v5)
    {
      dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 48));
      dispatch_release(v5);
      *(void *)(DerivedStorage + 48) = 0;
    }
  }
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 208));
  int v11 = *(const void **)(a1 + 8);
  if (v11) {
    CFRelease(v11);
  }
  CFAllocatorRef v12 = *(const void **)a1;
  CFRelease(v12);
}

void endpointCluster_activationTimerFired(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 208));
  uint64_t v3 = *(NSObject **)(DerivedStorage + 48);
  if (v3)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 48));
    dispatch_release(v3);
    *(void *)(DerivedStorage + 48) = 0;
  }
  MEMORY[0x1D25EB370](*(void *)(a1 + 80));
  int v4 = *(unsigned __int8 *)(a1 + 96);
  MEMORY[0x1D25EB390](*(void *)(a1 + 80));
  if (!v4)
  {
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CompletionCallbackContextSetError(a1, 4294950572);
  }
  JUMPOUT(0x1D25EB390);
}

void endpointCluster_activationTimerCancelled(CFTypeRef cf)
{
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRelease(cf);
}

void CompletionCallbackContextSetError(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1D25EB370](*(void *)(a1 + 80));
  if (gLogCategory_APEndpointCluster <= 30
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  completionCallbackContext_setState(a1, 1, a2);
  JUMPOUT(0x1D25EB390);
}

void endpointCluster_metricsTimerFired()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 208));
  endpointCluster_sendActivationMetrics();
  JUMPOUT(0x1D25EB390);
}

void endpointCluster_metricsTimerCanceled(const void *a1)
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a1)
  {
    CFRelease(a1);
  }
}

void endpointCluster_triggerLostClusterBuddyReconnectionLogic(uint64_t a1, const void *a2)
{
  CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    int v4 = Mutable;
    CFDictionarySetValue(Mutable, @"SubEndpoint", a2);
    if (gLogCategory_APEndpointCluster <= 30
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    CFRelease(v4);
  }
  else
  {
    APSLogErrorAt();
  }
}

uint64_t endpointCluster_isRelaySupported()
{
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage == 3 && DerivedStorage[76] == 3) {
    return 1;
  }
  APSLogErrorAt();
  return 0;
}

uint64_t _CompletionCallbackContextGetTypeID()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gCompletionCallbackContextCFTypeID TypeID = result;
  return result;
}

uint64_t _CompletionCallbackContextFinalize(uint64_t a1)
{
  if (gLogCategory_APEndpointCluster <= 30
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  int v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v3 = *(const void **)(a1 + 88);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 88) = 0;
  }
  return FigSimpleMutexDestroy();
}

void endpointCluster_cancelPendingUpdateFeatureRequests()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 624));
  CFArrayApplyBlock();
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(DerivedStorage + 624));
}

void endpointCluster_resetActivationState(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CMBaseObjectGetDerivedStorage();
  APSEventRecorderReset();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  if (*(unsigned char *)(DerivedStorage + 344))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    APSRemoteConfigGetShared();
    FigNotificationCenterRemoveWeakListener();
  }
  if (*(void *)(DerivedStorage + 248))
  {
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 264));
    if (Count >= 1)
    {
      CFIndex v10 = Count;
      for (CFIndex i = 0; i != v10; ++i)
      {
        ValueAtunsigned int Index = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 264), i);
        uint64_t v13 = *(void *)(DerivedStorage + 248);
        if (!v13 || (FigEndpointAggregateGetClassID(), !CMBaseObjectIsMemberOfClass())) {
          uint64_t v13 = 0;
        }
        endpointCluster_deactivateSubEndpoint(a1, v13, ValueAtIndex);
      }
    }
    uint64_t v14 = *(void *)(DerivedStorage + 248);
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v17 = *(void (**)(uint64_t, void))(v16 + 48);
    if (v17) {
      v17(v14, 0);
    }
    if (*(_DWORD *)DerivedStorage == 3)
    {
      uint64_t v18 = *(void *)(DerivedStorage + 248);
      uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v20 = v19 ? v19 : 0;
      uint64_t v21 = *(void (**)(uint64_t, void))(v20 + 56);
      if (v21) {
        v21(v18, 0);
      }
    }
    if (*(unsigned char *)(DerivedStorage + 256))
    {
      uint64_t v22 = *(void *)(DerivedStorage + 248);
      uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v24 = v23 ? v23 : 0;
      uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 16);
      if (v25) {
        v25(v22, a2, a3, a4);
      }
    }
  }
  *(unsigned char *)(DerivedStorage + 256) = 0;
  *(_OWORD *)(DerivedStorage + 544) = 0u;
  *(_OWORD *)(DerivedStorage + 560) = 0u;
  *(void *)(DerivedStorage + 576) = 0;
  *(_OWORD *)(DerivedStorage + 584) = 0u;
  *(_OWORD *)(DerivedStorage + 600) = 0u;
  *(_DWORD *)(DerivedStorage + 304) = 0;
  *(void *)(DerivedStorage + 328) = 0;
  endpointCluster_postIsInUseDidChangeNotification((uint64_t)a1, 0);
  if (*(void *)(DerivedStorage + 8))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
  }
  *(unsigned char *)(DerivedStorage + 336) = 0;
  *(_WORD *)(DerivedStorage + 368) = 1;
  *(_DWORD *)(DerivedStorage + 320) = 0;
  *(unsigned char *)(DerivedStorage + 372) = 0;
  *(void *)(DerivedStorage + 424) = 0;
  *(unsigned char *)(DerivedStorage + 419) = 0;
  *(_DWORD *)(DerivedStorage + 340) = 0;
  *(unsigned char *)(DerivedStorage + 344) = 0;
  *(unsigned char *)(DerivedStorage + 640) = 0;
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(DerivedStorage + 632));
  int v26 = *(const void **)(DerivedStorage + 360);
  if (v26)
  {
    CFRelease(v26);
    *(void *)(DerivedStorage + 360) = 0;
  }
  uint64_t v27 = *(const void **)(DerivedStorage + 392);
  if (v27)
  {
    CFRelease(v27);
    *(void *)(DerivedStorage + 392) = 0;
  }
  uint64_t v28 = *(const void **)(DerivedStorage + 400);
  if (v28)
  {
    CFRelease(v28);
    *(void *)(DerivedStorage + 400) = 0;
  }
  uint64_t v29 = *(const void **)(DerivedStorage + 408);
  if (v29)
  {
    CFRelease(v29);
    *(void *)(DerivedStorage + 408) = 0;
  }
  char v30 = *(const void **)(DerivedStorage + 376);
  if (v30)
  {
    CFRelease(v30);
    *(void *)(DerivedStorage + 376) = 0;
  }
  BOOL v31 = *(const void **)(DerivedStorage + 248);
  if (v31)
  {
    CFRelease(v31);
    *(void *)(DerivedStorage + 248) = 0;
  }
  uint64_t v32 = *(const void **)(DerivedStorage + 312);
  if (v32)
  {
    CFRelease(v32);
    *(void *)(DerivedStorage + 312) = 0;
  }
  uint64_t v33 = *(const void **)(DerivedStorage + 440);
  if (v33)
  {
    CFRelease(v33);
    *(void *)(DerivedStorage + 440) = 0;
  }
  endpointCluster_manageActivationTimeoutTimer(a1, 0);
  endpointCluster_manageInactivityTimer(a1);
  endpointCluster_failDelayManageSubEndpoint(a1, 0, 0);
  endpointCluster_updateHealthState(a1);
  CFRetain(a1);
  uint64_t v34 = *(NSObject **)(DerivedStorage + 40);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __endpointCluster_resetActivationState_block_invoke;
  block[3] = &__block_descriptor_tmp_274;
  void block[4] = a1;
  dispatch_async(v34, block);
}

void __endpointCluster_cancelPendingUpdateFeatureRequests_block_invoke(uint64_t a1, uint64_t a2)
{
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  int v4 = *(const void **)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 384);
  uint64_t v6 = *(unsigned int *)(a1 + 48);
  if (v6) {
    BOOL v7 = v6 == -16727;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    uint64_t v8 = *(void *)(a2 + 24);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(void *)(a2 + 40);
  endpointCluster_CallCompletionCallback(v4, v5, v8, v6, v9);
}

void __endpointCluster_resetActivationState_block_invoke(uint64_t a1)
{
  endpointCluster_deferredManagePresentationModeProcessDemiseListening(*(void **)(a1 + 32));
  endpointCluster_deferredConfigureActivationMetricsTimer(*(void **)(a1 + 32));
  int v2 = *(const void **)(a1 + 32);
  CFRelease(v2);
}

void endpointCluster_deferredManagePresentationModeProcessDemiseListening(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 208));
  uint64_t v3 = *(NSObject **)(DerivedStorage + 80);
  if (v3)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 80));
    dispatch_release(v3);
    *(void *)(DerivedStorage + 80) = 0;
  }
  if (*(_DWORD *)(DerivedStorage + 304) == 3 && *(void *)(DerivedStorage + 424) == 1)
  {
    int v4 = *(_DWORD *)(DerivedStorage + 432);
    if (v4) {
      *(void *)(DerivedStorage + 80) = APEndpointCreateAndStartProcessDemiseListener(a1, v4, *(dispatch_queue_t *)(DerivedStorage + 40), (void (__cdecl *)(void *))endpointCluster_handlePresentationModeProcessDemise);
    }
  }
  JUMPOUT(0x1D25EB390);
}

void endpointCluster_handlePresentationModeProcessDemise(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v3 = *(NSObject **)(DerivedStorage + 80);
  if (v3)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 80));
    dispatch_release(v3);
    *(void *)(DerivedStorage + 80) = 0;
  }
  CFMutableDictionaryRef SecondDisplayModeCommandParams = APEndpointCreateSecondDisplayModeCommandParams();
  if (SecondDisplayModeCommandParams)
  {
    CFMutableDictionaryRef v5 = SecondDisplayModeCommandParams;
    MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 208));
    endpointCluster_setSecondDisplayMode(a1);
    MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 208));
    CFRelease(v5);
  }
  else
  {
    APSLogErrorAt();
  }
}

uint64_t endpointCluster_setSecondDisplayMode(const void *a1)
{
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage == 2)
  {
    uint64_t v3 = DerivedStorage;
    if (DerivedStorage[76] == 3)
    {
      uint64_t result = FigCFEqual();
      if (!result) {
        return result;
      }
      unint64_t Int64 = CFDictionaryGetInt64();
      if (gLogCategory_APEndpointCluster <= 50
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (Int64 >= 2)
      {
        APSLogErrorAt();
        return 4294950576;
      }
      if (Int64 != *((void *)v3 + 53))
      {
        *((void *)v3 + 53) = Int64;
        v3[108] = CFDictionaryGetInt64();
        CFRetain(a1);
        uint64_t v6 = *((void *)v3 + 5);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 0x40000000;
        block[2] = __endpointCluster_setSecondDisplayMode_block_invoke;
        block[3] = &__block_descriptor_tmp_277;
        void block[4] = a1;
        dispatch_async(v6, block);
        if (*((void *)v3 + 53) != 1 || *((unsigned char *)v3 + 419)) {
          endpointCluster_setSecondDisplayModeOnSubEndpoints();
        }
      }
    }
  }
  return 0;
}

void __endpointCluster_setSecondDisplayMode_block_invoke(uint64_t a1)
{
  endpointCluster_deferredManagePresentationModeProcessDemiseListening(*(void *)(a1 + 32));
  int v2 = *(const void **)(a1 + 32);
  CFRelease(v2);
}

uint64_t endpointCluster_setSecondDisplayModeOnSubEndpoints()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = result;
  if (gLogCategory_APEndpointCluster <= 50)
  {
    if (gLogCategory_APEndpointCluster != -1 || (uint64_t result = _LogCategory_Initialize(), result)) {
      uint64_t result = LogPrintF();
    }
  }
  CFArrayRef v2 = *(const __CFArray **)(v1 + 264);
  if (v2)
  {
    uint64_t result = CFArrayGetCount(v2);
    if (result >= 1)
    {
      uint64_t v3 = result;
      for (CFIndex i = 0; i != v3; ++i)
      {
        ValueAtunsigned int Index = CFArrayGetValueAtIndex(v2, i);
        uint64_t result = endpointCluster_setSecondDisplayModeOnSubEndpoint((uint64_t)ValueAtIndex);
      }
    }
  }
  return result;
}

uint64_t endpointCluster_setSecondDisplayModeOnSubEndpoint(uint64_t a1)
{
  CFMutableDictionaryRef SecondDisplayModeCommandParams = APEndpointCreateSecondDisplayModeCommandParams();
  if (!SecondDisplayModeCommandParams)
  {
    APSLogErrorAt();
    return 4294950575;
  }
  CFMutableDictionaryRef v3 = SecondDisplayModeCommandParams;
  if (a1 && (FigEndpointExtendedGetClassID(), CMBaseObjectIsMemberOfClass()))
  {
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 24);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    BOOL v7 = *(uint64_t (**)(uint64_t, void, CFMutableDictionaryRef, void, void))(v5 + 72);
    if (!v7)
    {
      uint64_t v6 = 4294954514;
LABEL_12:
      APSLogErrorAt();
      goto LABEL_13;
    }
    uint64_t v6 = v7(a1, *MEMORY[0x1E4F21240], v3, 0, 0);
    if (v6) {
      goto LABEL_12;
    }
  }
  else
  {
    APSLogErrorAt();
    uint64_t v6 = 4294950576;
  }
LABEL_13:
  CFRelease(v3);
  return v6;
}

void endpointCluster_handleInternalAggregateDeactivationCompletionCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFTypeRef v8 = *(CFTypeRef *)a5;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 208));
  BOOL v10 = *(void *)(a5 + 24) == *(void *)(DerivedStorage + 384) && *(_DWORD *)(DerivedStorage + 304) == 0;
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (v10)
  {
    if (!a4)
    {
      CFAllocatorRef v11 = CFGetAllocator(v8);
      APEndpointCreateEndpointActivationNotificationPayload(v11, *(void *)(a5 + 16), *(void *)(a5 + 24), (CFMutableDictionaryRef *)&cf);
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
      if (*(unsigned char *)(a5 + 34) && *(unsigned char *)(a5 + 33) && !*(unsigned char *)(a5 + 32) && *(void *)(DerivedStorage + 8))
      {
        if (gLogCategory_APEndpointCluster <= 50
          && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        endpointCluster_postFinishedDeactivationForClusterUUIDChangeOrFailure();
      }
      a4 = 0;
    }
  }
  else
  {
    a4 = 4294949692;
  }
  if (a4 == -16727 || a4 == 0) {
    uint64_t v13 = a2;
  }
  else {
    uint64_t v13 = 0;
  }
  endpointCluster_CallCompletionCallback(v8, *(void *)(DerivedStorage + 384), v13, a4, *(void *)(a5 + 40));
  if (*(unsigned char *)(a5 + 32))
  {
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    endpointCluster_updateClusterChangeProgress((uint64_t)v8, 1, 0);
  }
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 208));
  CFRelease(*(CFTypeRef *)a5);
  CFRelease(*(CFTypeRef *)(a5 + 8));
  free((void *)a5);
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t endpointCluster_BorrowScreen(uint64_t a1, uint64_t a2, uint64_t a3)
{
  FigEndpointExtendedGetFigEndpoint();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 208));
  if (*(unsigned char *)(DerivedStorage + 370))
  {
    APSLogErrorAt();
    uint64_t v9 = 4294950573;
    goto LABEL_19;
  }
  if (*(_DWORD *)(DerivedStorage + 304) != 3)
  {
    APSLogErrorAt();
    uint64_t v9 = 4294951716;
    goto LABEL_19;
  }
  if (!*(unsigned char *)(DerivedStorage + 372))
  {
    APSLogErrorAt();
    uint64_t v9 = 4294950570;
    goto LABEL_19;
  }
  uint64_t v6 = *(void *)(DerivedStorage + 248);
  if (v6 && (FigEndpointExtendedGetClassID(), CMBaseObjectIsMemberOfClass()))
  {
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 24);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    BOOL v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
    if (!v10)
    {
      uint64_t v9 = 4294954514;
LABEL_18:
      APSLogErrorAt();
      goto LABEL_19;
    }
    uint64_t v9 = v10(v6, a2, a3);
    if (v9) {
      goto LABEL_18;
    }
  }
  else
  {
    APSLogErrorAt();
    uint64_t v9 = 4294949690;
  }
LABEL_19:
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 208));
  return v9;
}

uint64_t endpointCluster_UnborrowScreen(uint64_t a1, uint64_t a2, uint64_t a3)
{
  FigEndpointExtendedGetFigEndpoint();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 208));
  if (*(unsigned char *)(DerivedStorage + 370))
  {
    APSLogErrorAt();
    uint64_t v9 = 4294950573;
    goto LABEL_19;
  }
  if (*(_DWORD *)(DerivedStorage + 304) != 3)
  {
    APSLogErrorAt();
    uint64_t v9 = 4294951716;
    goto LABEL_19;
  }
  if (!*(unsigned char *)(DerivedStorage + 372))
  {
    APSLogErrorAt();
    uint64_t v9 = 4294950570;
    goto LABEL_19;
  }
  uint64_t v6 = *(void *)(DerivedStorage + 248);
  if (v6 && (FigEndpointExtendedGetClassID(), CMBaseObjectIsMemberOfClass()))
  {
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 24);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    BOOL v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 24);
    if (!v10)
    {
      uint64_t v9 = 4294954514;
LABEL_18:
      APSLogErrorAt();
      goto LABEL_19;
    }
    uint64_t v9 = v10(v6, a2, a3);
    if (v9) {
      goto LABEL_18;
    }
  }
  else
  {
    APSLogErrorAt();
    uint64_t v9 = 4294949690;
  }
LABEL_19:
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 208));
  return v9;
}

uint64_t endpointCluster_DuckAudio(uint64_t a1, uint64_t a2)
{
  FigEndpointExtendedGetFigEndpoint();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 208));
  if (*(_DWORD *)(DerivedStorage + 304) != 3)
  {
    APSLogErrorAt();
    uint64_t v7 = 4294951716;
    goto LABEL_17;
  }
  uint64_t v4 = *(void *)(DerivedStorage + 248);
  if (v4 && (FigEndpointExtendedGetClassID(), CMBaseObjectIsMemberOfClass()))
  {
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 24);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 48);
    if (!v8)
    {
      uint64_t v7 = 4294954514;
LABEL_16:
      APSLogErrorAt();
      goto LABEL_17;
    }
    uint64_t v7 = v8(v4, a2);
    if (v7) {
      goto LABEL_16;
    }
  }
  else
  {
    APSLogErrorAt();
    uint64_t v7 = 4294950570;
  }
LABEL_17:
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 208));
  return v7;
}

uint64_t endpointCluster_SendCommand(uint64_t a1, uint64_t a2, const __CFDictionary *a3, uint64_t a4)
{
  uint64_t FigEndpoint = (const void *)FigEndpointExtendedGetFigEndpoint();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (FigCFEqual())
  {
    MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 208));
    uint64_t v8 = endpointCluster_setSecondDisplayMode(FigEndpoint);
    MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 208));
    if (v8)
    {
LABEL_30:
      APSLogErrorAt();
      if (!a4) {
        return v8;
      }
      goto LABEL_27;
    }
  }
  else
  {
    if (FigCFEqual())
    {
      MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 208));
      uint64_t v9 = CMBaseObjectGetDerivedStorage();
      if (!CFDictionaryContainsKey(a3, (const void *)*MEMORY[0x1E4F21258]))
      {
        APSLogErrorAt();
        MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 208));
        uint64_t v8 = 4294950576;
        goto LABEL_30;
      }
      if (gLogCategory_APEndpointCluster <= 50
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      BOOL v10 = *(const void **)(v9 + 616);
      *(void *)(v9 + 616) = a3;
      if (a3) {
        CFRetain(a3);
      }
      if (v10) {
        CFRelease(v10);
      }
      CFArrayRef v11 = *(const __CFArray **)(v9 + 264);
      if (v11)
      {
        CFIndex Count = CFArrayGetCount(v11);
        if (Count >= 1)
        {
          CFIndex v13 = Count;
          for (CFIndex i = 0; i != v13; ++i)
          {
            ValueAtunsigned int Index = CFArrayGetValueAtIndex(v11, i);
            if (!APSGetFBOPropertyInt64()) {
              endpointCluster_setMRInfoOnSubEndpoint((uint64_t)ValueAtIndex, (uint64_t)a3);
            }
          }
        }
      }
      MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 208));
    }
    uint64_t v8 = 0;
  }
  if (a4)
  {
LABEL_27:
    CFRetain(FigEndpoint);
    APSDispatchAsyncFHelper();
  }
  return v8;
}

uint64_t endpointCluster_SendData(const void *a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  FigEndpointExtendedGetFigEndpoint();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 208));
  if (endpointCluster_isRelaySupported())
  {
    RCSendDataCompletionContext = APEndpointCreateRCSendDataCompletionContext(a1, a2, *(NSObject **)(DerivedStorage + 40), a4, a5);
    if (RCSendDataCompletionContext)
    {
      CFAllocatorRef v12 = RCSendDataCompletionContext;
      uint64_t v13 = *(void *)(DerivedStorage + 248);
      if (!v13 || (FigEndpointExtendedGetClassID(), !CMBaseObjectIsMemberOfClass())) {
        uint64_t v13 = 0;
      }
      uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 24);
      if (v14) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v16 = *(uint64_t (**)(uint64_t, const void *, uint64_t, void (*)(uint64_t, uint64_t, int, uint64_t), void *))(v15 + 96);
      if (v16)
      {
        int v17 = v16(v13, a2, a3, APEndpointCallRCSendDataCompletionFromContextAsync, v12);
        if (!v17) {
          goto LABEL_16;
        }
        int v18 = v17;
      }
      else
      {
        int v18 = -12782;
      }
      APSLogErrorAt();
    }
    else
    {
      APSLogErrorAt();
      int v18 = -16721;
    }
  }
  else
  {
    APSLogErrorAt();
    int v18 = -17606;
  }
  if (a4) {
    APEndpointCallRCSendDataCompletionAsync(a1, a2, v18, *(dispatch_queue_t *)(DerivedStorage + 40), a4, a5);
  }
LABEL_16:
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 208));
  return 0;
}

uint64_t endpointCluster_CloseCommChannel(uint64_t a1, uint64_t a2)
{
  FigEndpointExtendedGetFigEndpoint();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 208));
  if (!endpointCluster_isRelaySupported())
  {
    APSLogErrorAt();
    uint64_t v8 = 4294949690;
    goto LABEL_13;
  }
  uint64_t v4 = *(void *)(DerivedStorage + 248);
  if (!v4 || (FigEndpointExtendedGetClassID(), !CMBaseObjectIsMemberOfClass())) {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 24);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 104);
  if (!v7)
  {
    uint64_t v8 = 4294954514;
LABEL_12:
    APSLogErrorAt();
    goto LABEL_13;
  }
  uint64_t v8 = v7(v4, a2);
  if (v8) {
    goto LABEL_12;
  }
LABEL_13:
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 208));
  return v8;
}

uint64_t endpointCluster_AcquireAndCopyResource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  FigEndpointExtendedGetFigEndpoint();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 208));
  if (*(unsigned char *)(DerivedStorage + 370))
  {
    APSLogErrorAt();
    uint64_t v12 = 4294950573;
    goto LABEL_18;
  }
  if (*(_DWORD *)(DerivedStorage + 304) != 3)
  {
    APSLogErrorAt();
    uint64_t v12 = 4294951716;
    goto LABEL_18;
  }
  uint64_t v8 = *(void *)(DerivedStorage + 248);
  if (!v8 || (FigEndpointExtendedGetClassID(), !CMBaseObjectIsMemberOfClass())) {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 24);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  CFArrayRef v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 128);
  if (!v11)
  {
    uint64_t v12 = 4294954514;
LABEL_17:
    APSLogErrorAt();
    goto LABEL_18;
  }
  uint64_t v12 = v11(v8, a2, a3, a4);
  if (v12) {
    goto LABEL_17;
  }
LABEL_18:
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 208));
  return v12;
}

uint64_t endpointCluster_RelinquishResource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  FigEndpointExtendedGetFigEndpoint();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 208));
  if (!a3)
  {
    APSLogErrorAt();
    uint64_t v10 = 4294950576;
    goto LABEL_19;
  }
  if (*(unsigned char *)(DerivedStorage + 370))
  {
    APSLogErrorAt();
    uint64_t v10 = 4294950573;
    goto LABEL_19;
  }
  if (*(_DWORD *)(DerivedStorage + 304) != 3)
  {
    APSLogErrorAt();
    uint64_t v10 = 4294951716;
    goto LABEL_19;
  }
  uint64_t v6 = *(void *)(DerivedStorage + 248);
  if (!v6 || (FigEndpointExtendedGetClassID(), !CMBaseObjectIsMemberOfClass())) {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 24);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 136);
  if (!v9)
  {
    uint64_t v10 = 4294954514;
LABEL_18:
    APSLogErrorAt();
    goto LABEL_19;
  }
  uint64_t v10 = v9(v6, a2, a3);
  if (v10) {
    goto LABEL_18;
  }
LABEL_19:
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 208));
  return v10;
}

void endpointCluster_CloseAllCommChannels()
{
  FigEndpointExtendedGetFigEndpoint();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 208));
  if (endpointCluster_isRelaySupported())
  {
    uint64_t v1 = *(void *)(DerivedStorage + 248);
    if (!v1 || (FigEndpointExtendedGetClassID(), !CMBaseObjectIsMemberOfClass())) {
      uint64_t v1 = 0;
    }
    uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 24);
    if (v2) {
      uint64_t v3 = v2;
    }
    else {
      uint64_t v3 = 0;
    }
    uint64_t v4 = *(void (**)(uint64_t))(v3 + 144);
    if (v4) {
      v4(v1);
    }
  }
  else
  {
    APSLogErrorAt();
  }
  JUMPOUT(0x1D25EB390);
}

uint64_t endpointCluster_setMRInfoOnSubEndpoint(uint64_t a1, uint64_t a2)
{
  if (!a1
    || (FigEndpointExtendedGetClassID(), !CMBaseObjectIsMemberOfClass())
    || ((uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 24)) == 0 ? (v5 = 0) : (v5 = v4),
        (uint64_t v6 = *(uint64_t (**)(uint64_t, void, uint64_t, void, void))(v5 + 72)) == 0
     || (uint64_t result = v6(a1, *MEMORY[0x1E4F21238], a2, 0, 0), result)))
  {
    return APSLogErrorAt();
  }
  return result;
}

void __endpointCluster_failDelayManageSubEndpoint_block_invoke(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 64);
  if (v2 == 1)
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 168);
    if (v3)
    {
      if (gLogCategory_APEndpointCluster <= 50
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      usleep(1000 * v3);
      int v2 = *(_DWORD *)(a1 + 64);
    }
    else
    {
      int v2 = 1;
    }
  }
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(const void **)(a1 + 40);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 208));
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if ((v2 - 2) < 2)
  {
    if (!endpointCluster_isComplete()) {
      goto LABEL_34;
    }
    goto LABEL_19;
  }
  if (v2 != 1)
  {
    if (v2) {
      goto LABEL_34;
    }
    uint64_t v7 = *(NSObject **)(DerivedStorage + 72);
    if (v7)
    {
      dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 72));
      dispatch_release(v7);
      *(void *)(DerivedStorage + 72) = 0;
    }
LABEL_19:
    if (*(unsigned char *)(DerivedStorage + 352))
    {
      if (gLogCategory_APEndpointCluster <= 50
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *(unsigned char *)(DerivedStorage + 352) = 0;
    }
    goto LABEL_34;
  }
  if (*(_DWORD *)(DerivedStorage + 304))
  {
    if (*(void *)(DerivedStorage + 384) == v4)
    {
      uint64_t v8 = CMBaseObjectGetDerivedStorage();
      if (!*(void *)(v8 + 72))
      {
        uint64_t v9 = v8;
        uint64_t v10 = *(void *)(v8 + 120);
        if (gLogCategory_APEndpointCluster <= 50
          && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        CFArrayRef v11 = malloc_type_calloc(1uLL, 0x10uLL, 0x1020040EDED9539uLL);
        if (v11)
        {
          uint64_t v12 = v11;
          CFTypeRef v13 = CFRetain(v5);
          uint64_t v14 = *(void *)(v9 + 384);
          *uint64_t v12 = v13;
          v12[1] = v14;
          uint64_t v15 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, *(dispatch_queue_t *)(v9 + 40));
          *(void *)(v9 + 72) = v15;
          dispatch_set_context(v15, v12);
          dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v9 + 72), (dispatch_function_t)endpointCluster_failureDelayTimerFired);
          dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(v9 + 72), (dispatch_function_t)endpointCluster_failureDelayTimerCancelled);
          uint64_t v16 = *(NSObject **)(v9 + 72);
          dispatch_time_t v17 = dispatch_time(0, 1000000000 * v10);
          dispatch_source_set_timer(v16, v17, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
          dispatch_resume(*(dispatch_object_t *)(v9 + 72));
        }
        else
        {
          APSLogErrorAt();
        }
      }
    }
  }
LABEL_34:
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 208));
  int v18 = *(const void **)(a1 + 40);
  if (v18) {
    CFRelease(v18);
  }
  uint64_t v19 = *(const void **)(a1 + 56);
  if (v19)
  {
    CFRelease(v19);
  }
}

BOOL endpointCluster_isComplete()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef Count = *(const __CFArray **)(DerivedStorage + 264);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  return (uint64_t)Count >= *(void *)(DerivedStorage + 24);
}

uint64_t endpointCluster_failureDelayTimerFired(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 208));
  uint64_t v3 = *(NSObject **)(DerivedStorage + 72);
  if (v3)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 72));
    dispatch_release(v3);
    *(void *)(DerivedStorage + 72) = 0;
  }
  if (*(_DWORD *)(DerivedStorage + 304))
  {
    if (*(void *)(DerivedStorage + 384) == *(void *)(a1 + 8))
    {
      CFSetRef v4 = *(const __CFSet **)(DerivedStorage + 360);
      if (v4)
      {
        if (CFSetGetCount(v4) >= 1)
        {
          *(unsigned char *)(DerivedStorage + 352) = 1;
          CFSetApplyBlock();
          if (gLogCategory_APEndpointCluster <= 50
            && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          uint64_t v5 = *(const void **)(DerivedStorage + 360);
          if (v5)
          {
            CFRelease(v5);
            *(void *)(DerivedStorage + 360) = 0;
          }
        }
      }
    }
  }
  return MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 208));
}

void endpointCluster_failureDelayTimerCancelled(CFTypeRef *a1)
{
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*a1) {
    CFRelease(*a1);
  }
  free(a1);
}

void __endpointCluster_failureDelayTimerFired_block_invoke(uint64_t a1, const void *a2)
{
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v4 = *(void *)(a1 + 32);
  endpointCluster_triggerLostClusterBuddyReconnectionLogic(v4, a2);
}

BOOL endpointCluster_wantSubEndpointActivation(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = APSGetFBOPropertyInt64();
  uint64_t v6 = *(void *)(DerivedStorage + 8);
  if (v6) {
    BOOL v7 = *(_DWORD *)DerivedStorage != 2;
  }
  else {
    BOOL v7 = 0;
  }
  if (gLogCategory_APEndpointCluster <= 30
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!v5)
  {
    if (endpointCluster_isSubEndpointOfType(a1, a2, *MEMORY[0x1E4F214A8]))
    {
      if (gLogCategory_APEndpointCluster <= 30
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (v6) {
        return 0;
      }
    }
    else if (v6 && *(_DWORD *)DerivedStorage == 2)
    {
      if (gLogCategory_APEndpointCluster <= 30
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (*(_DWORD *)(DerivedStorage + 188) != 4) {
        return 0;
      }
    }
    else if (APSShouldClusterEngageOnActivation() || *(unsigned char *)(DerivedStorage + 184))
    {
      if (gLogCategory_APEndpointCluster <= 30
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    else
    {
      if (gLogCategory_APEndpointCluster <= 30
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (!*(unsigned char *)(DerivedStorage + 369)) {
        return 0;
      }
    }
    return 1;
  }
  if (gLogCategory_APEndpointCluster <= 30
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v7;
}

void endpointCluster_activateSubEndpointCallback(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, int a5, void *a6)
{
  uint64_t v9 = (const void *)a6[2];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  CFTypeRef v27 = 0;
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 208));
  if (!FigCFArrayContainsValue())
  {
    if (gLogCategory_APEndpointCluster > 50
      || gLogCategory_APEndpointCluster == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_15;
    }
LABEL_47:
    LogPrintF();
    goto LABEL_15;
  }
  if (a5 && APSGetFBOPropertyInt64())
  {
    if (gLogCategory_APEndpointCluster > 50
      || gLogCategory_APEndpointCluster == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_15;
    }
    goto LABEL_47;
  }
  if (a6[6] != *(void *)(DerivedStorage + 384) || (*(_DWORD *)(DerivedStorage + 304) & 0xFFFFFFFE) != 2)
  {
    CompletionCallbackContextSetError((uint64_t)a6, 4294949692);
    goto LABEL_15;
  }
  if (a5)
  {
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  else
  {
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    endpointCluster_updateHealthState(v9);
    endpointCluster_updateSecondDisplayModeOnSubEndpointListChange((uint64_t)v9, (uint64_t)a2, 1);
    endpointCluster_setMRInfoOnSubEndpoint((uint64_t)a2, *(void *)(DerivedStorage + 616));
  }
  endpointCluster_handleSubEndpointResult(v9, (uint64_t)a6, a2, a5, 0);
  endpointCluster_sendActivationMetrics();
  if (*(_DWORD *)DerivedStorage == 3)
  {
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v13 + 48);
    if (v14)
    {
      v14(CMBaseObject, @"RoomUUID", *MEMORY[0x1E4F1CF80], &v27);
      if (v27)
      {
        if (*(void *)(DerivedStorage + 632))
        {
          CFNumberGetTypeID();
          TypedCFArrayRef Value = CFDictionaryGetTypedValue();
          if (gLogCategory_APEndpointCluster <= 50
            && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          uint64_t v22 = FigEndpointGetCMBaseObject();
          uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v23) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = 0;
          }
          uint64_t v25 = *(void (**)(uint64_t, void, uint64_t))(v24 + 56);
          if (v25) {
            v25(v22, *MEMORY[0x1E4F21080], TypedValue);
          }
          goto LABEL_15;
        }
      }
    }
LABEL_60:
    APSLogErrorAt();
    goto LABEL_15;
  }
  if (!endpointCluster_isSubEndpointVolumeLeader((uint64_t)v9, a2))
  {
    if (gLogCategory_APEndpointCluster > 50
      || gLogCategory_APEndpointCluster == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_15;
    }
    goto LABEL_47;
  }
  if (!*(unsigned char *)(DerivedStorage + 640))
  {
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    APEndpointApplyInitialVolume((uint64_t)a2);
    *(unsigned char *)(DerivedStorage + 640) = 1;
  }
  uint64_t v16 = FigEndpointGetCMBaseObject();
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t v19 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v18 + 48);
  if (!v19) {
    goto LABEL_60;
  }
  v19(v16, *MEMORY[0x1E4F21080], *MEMORY[0x1E4F1CF80], &cf);
  CFTypeRef v20 = cf;
  if (!cf) {
    goto LABEL_60;
  }
  if (gLogCategory_APEndpointCluster <= 50)
  {
    if (gLogCategory_APEndpointCluster != -1 || (v21 = _LogCategory_Initialize(), CFTypeRef v20 = cf, v21))
    {
      LogPrintF();
      CFTypeRef v20 = cf;
    }
  }
  endpointCluster_postVolumeDidChange((uint64_t)v9, 0, v20);
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  endpointCluster_postIsMutedDidChange((uint64_t)v9, 0);
LABEL_15:
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 208));
  CFRelease(a2);
  CFRelease(a6);
  if (cf) {
    CFRelease(cf);
  }
  if (v27) {
    CFRelease(v27);
  }
}

uint64_t endpointCluster_updateSecondDisplayModeOnSubEndpointListChange(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v7 = *(unsigned __int8 *)(DerivedStorage + 419);
  uint64_t result = endpointCluster_isSubEndpointOfType(a1, a2, *MEMORY[0x1E4F214A8]);
  if (result)
  {
    if (a3)
    {
      uint64_t result = APSGetFBOPropertyInt64();
      int v9 = result != 0;
      *(unsigned char *)(DerivedStorage + 419) = v9;
    }
    else
    {
      int v9 = 0;
      *(unsigned char *)(DerivedStorage + 419) = 0;
    }
  }
  else
  {
    int v9 = *(unsigned __int8 *)(DerivedStorage + 419);
  }
  if (v7 == v9)
  {
    if (a3)
    {
      if (v7)
      {
        if (*(void *)(DerivedStorage + 424) == 1)
        {
          uint64_t result = endpointCluster_setSecondDisplayModeOnSubEndpoint(a2);
          if (result)
          {
            return APSLogErrorAt();
          }
        }
      }
    }
  }
  else
  {
    if (gLogCategory_APEndpointCluster <= 50)
    {
      if (gLogCategory_APEndpointCluster != -1 || (uint64_t result = _LogCategory_Initialize(), result)) {
        uint64_t result = LogPrintF();
      }
    }
    if (*(void *)(DerivedStorage + 424) == 1)
    {
      return endpointCluster_setSecondDisplayModeOnSubEndpoints();
    }
  }
  return result;
}

BOOL endpointCluster_isSubEndpointVolumeLeader(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v30 = 0;
  CFTypeRef v31 = 0;
  if (*(_DWORD *)DerivedStorage != 3)
  {
    BOOL v12 = endpointCluster_getSubEndpointVolumeLeader(a1) == a2;
    goto LABEL_42;
  }
  uint64_t v5 = DerivedStorage;
  uint64_t v6 = *(const void **)(DerivedStorage + 8);
  if (v6)
  {
    if (v6 == a2)
    {
LABEL_21:
      BOOL v12 = 1;
      goto LABEL_42;
    }
    uint64_t v7 = *MEMORY[0x1E4F21038];
    uint64_t v8 = *MEMORY[0x1E4F1CF80];
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v11 + 48);
    if (v13) {
      v13(CMBaseObject, v7, v8, &v30);
    }
  }
  else
  {
    uint64_t v7 = *MEMORY[0x1E4F21038];
    uint64_t v8 = *MEMORY[0x1E4F1CF80];
  }
  uint64_t v14 = FigEndpointGetCMBaseObject();
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v16 + 48);
  if (v17) {
    v17(v14, v7, v8, &v31);
  }
  if (!v31) {
    goto LABEL_21;
  }
  if (FigCFEqual())
  {
    if (gLogCategory_APEndpointCluster <= 30
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    BOOL v12 = 0;
  }
  else
  {
    BOOL v12 = 1;
  }
  if (!APSGetFBOPropertyInt64())
  {
    uint64_t v27 = v8;
    uint64_t v28 = v7;
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v5 + 264));
    if (Count >= 1)
    {
      CFIndex v19 = Count;
      CFIndex v20 = 0;
      while (1)
      {
        if (CFArrayGetValueAtIndex(*(CFArrayRef *)(v5 + 264), v20) != a2
          && APSGetFBOPropertyInt64()
          && APSGetFBOPropertyInt64())
        {
          CFTypeRef cf = 0;
          uint64_t v21 = FigEndpointGetCMBaseObject();
          uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v22) {
            uint64_t v23 = v22;
          }
          else {
            uint64_t v23 = 0;
          }
          uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v23 + 48);
          if (v24) {
            v24(v21, v28, v27, &cf);
          }
          int v25 = FigCFEqual();
          if (cf) {
            CFRelease(cf);
          }
          if (v25) {
            break;
          }
        }
        if (v19 == ++v20) {
          goto LABEL_42;
        }
      }
      BOOL v12 = 0;
    }
  }
LABEL_42:
  if (gLogCategory_APEndpointCluster <= 30
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (v31) {
    CFRelease(v31);
  }
  if (v30) {
    CFRelease(v30);
  }
  return v12;
}

void endpointCluster_postVolumeDidChange(uint64_t a1, uint64_t a2, const void *a3)
{
  CMBaseObjectGetDerivedStorage();
  VolumeMuteNotificationPayload = endpointCluster_createVolumeMuteNotificationPayload(a1, a2);
  if (VolumeMuteNotificationPayload)
  {
    uint64_t v7 = VolumeMuteNotificationPayload;
    CFDictionarySetValue(VolumeMuteNotificationPayload, (const void *)*MEMORY[0x1E4F21080], a3);
    if (gLogCategory_APEndpointCluster <= 30
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    CFRelease(v7);
  }
  else
  {
    APSLogErrorAt();
  }
}

void endpointCluster_postIsMutedDidChange(uint64_t a1, uint64_t a2)
{
  CMBaseObjectGetDerivedStorage();
  VolumeMuteNotificationPayload = endpointCluster_createVolumeMuteNotificationPayload(a1, a2);
  if (VolumeMuteNotificationPayload)
  {
    uint64_t v5 = VolumeMuteNotificationPayload;
    if (gLogCategory_APEndpointCluster <= 30
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    CFRelease(v5);
  }
  else
  {
    APSLogErrorAt();
  }
}

__CFDictionary *endpointCluster_createVolumeMuteNotificationPayload(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef value = 0;
  uint64_t v4 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v6 = Mutable;
  if (Mutable)
  {
    uint64_t v7 = *MEMORY[0x1E4F20E38];
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F20E38], *(const void **)(DerivedStorage + 16));
    if (a2)
    {
      uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
      uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v9) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = 0;
      }
      uint64_t v11 = *(void (**)(uint64_t, void, uint64_t, void **))(v10 + 48);
      if (v11)
      {
        v11(CMBaseObject, *MEMORY[0x1E4F21038], v4, &value);
        BOOL v12 = value;
        if (value) {
          goto LABEL_14;
        }
      }
      uint64_t v13 = FigEndpointGetCMBaseObject();
      uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v14) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t, void **))(v15 + 48);
      if (v16) {
        v16(v13, v7, v4, &value);
      }
      BOOL v12 = value;
      if (value)
      {
LABEL_14:
        CFDictionarySetValue(v6, (const void *)*MEMORY[0x1E4F206B8], v12);
      }
      else
      {
        if (gLogCategory_APEndpointCluster > 60) {
          return v6;
        }
        if (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()) {
          LogPrintF();
        }
      }
    }
  }
  else
  {
    APSLogErrorAt();
  }
  if (value) {
    CFRelease(value);
  }
  return v6;
}

void endpointCluster_deferredHandleClusterHealthStateChanged(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 208));
  if (*(_DWORD *)(a1 + 8) == 1)
  {
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    uint64_t v3 = *(void **)a1;
    int v4 = *(unsigned __int8 *)(a1 + 12);
    uint64_t v5 = CMBaseObjectGetDerivedStorage();
    uint64_t v6 = v5;
    if (v4) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = *(void *)(v5 + 128);
    }
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    uint64_t v9 = *(NSObject **)(v6 + 64);
    if (v9)
    {
      dispatch_source_cancel(*(dispatch_source_t *)(v6 + 64));
      dispatch_release(v9);
      *(void *)(v6 + 64) = 0;
    }
    *(void *)(v6 + 64) = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, *(dispatch_queue_t *)(v6 + 40));
    CFRetain(v3);
    dispatch_set_context(*(dispatch_object_t *)(v6 + 64), v3);
    dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v6 + 64), (dispatch_function_t)endpointCluster_healthMonitoringTimerFired);
    dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(v6 + 64), (dispatch_function_t)endpointCluster_healthMonitoringTimerCancelled);
    uint64_t v10 = *(NSObject **)(v6 + 64);
    dispatch_time_t v11 = dispatch_time(0, 1000000000 * v7);
    dispatch_source_set_timer(v10, v11, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
    dispatch_resume(*(dispatch_object_t *)(v6 + 64));
  }
  else
  {
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    uint64_t v8 = *(NSObject **)(DerivedStorage + 64);
    if (v8)
    {
      dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 64));
      dispatch_release(v8);
      *(void *)(DerivedStorage + 64) = 0;
    }
  }
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 208));
  BOOL v12 = *(const void **)a1;
  CFRelease(v12);
}

uint64_t endpointCluster_desiredSubEndpointsActivated(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 264)) < 1) {
    return 1;
  }
  CFIndex v3 = 0;
  while (1)
  {
    ValueAtunsigned int Index = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 264), v3);
    if (endpointCluster_wantSubEndpointActivation(a1, (uint64_t)ValueAtIndex) && !APSGetFBOPropertyInt64()) {
      break;
    }
    if (++v3 >= CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 264))) {
      return 1;
    }
  }
  if (gLogCategory_APEndpointCluster > 40) {
    return 0;
  }
  if (gLogCategory_APEndpointCluster != -1 || (uint64_t result = _LogCategory_Initialize(), result))
  {
    LogPrintF();
    return 0;
  }
  return result;
}

void endpointCluster_healthMonitoringTimerFired(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 208));
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = CMBaseObjectGetDerivedStorage();
  BOOL v5 = *(_DWORD *)(v4 + 304) && !*(_DWORD *)(v4 + 320) && *(unsigned char *)(v4 + 369) != 0;
  if (!*(_DWORD *)(v3 + 304) || *(_DWORD *)(v3 + 348) == 2) {
    goto LABEL_39;
  }
  if (*(void *)(v3 + 8))
  {
    int v6 = *(_DWORD *)(v3 + 188) == 4 || v5;
    if (v6 != 1) {
      goto LABEL_39;
    }
  }
  if (!endpointCluster_desiredSubEndpointsActivated(a1)) {
    goto LABEL_20;
  }
  CFArrayRef Count = *(const __CFArray **)(v3 + 264);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  if ((uint64_t)Count >= *(void *)(v3 + 24)) {
LABEL_39:
  }
    int v8 = 1;
  else {
LABEL_20:
  }
    int v8 = 0;
  if (gLogCategory_APEndpointCluster <= 30
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    CFArrayGetCount(*(CFArrayRef *)(v3 + 264));
    LogPrintF();
    if (v8) {
      goto LABEL_26;
    }
  }
  else if (v8)
  {
LABEL_26:
    int v9 = 0;
    uint64_t v10 = (uint64_t *)(DerivedStorage + 136);
    goto LABEL_32;
  }
  if (*(unsigned char *)(DerivedStorage + 371) && *(_DWORD *)(DerivedStorage + 304) == 3)
  {
    int v9 = 0;
    uint64_t v10 = (uint64_t *)(DerivedStorage + 160);
  }
  else
  {
    uint64_t v10 = (uint64_t *)(DerivedStorage + 152);
    int v9 = 1;
  }
LABEL_32:
  uint64_t v11 = *v10;
  endpointCluster_setNeedsDiscoveryAndNotifyIfNeeded(a1, v9);
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  BOOL v12 = *(NSObject **)(DerivedStorage + 64);
  dispatch_time_t v13 = dispatch_time(0, 1000000000 * v11);
  dispatch_source_set_timer(v12, v13, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
  JUMPOUT(0x1D25EB390);
}

void endpointCluster_healthMonitoringTimerCancelled(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 208));
  endpointCluster_setNeedsDiscoveryAndNotifyIfNeeded((uint64_t)a1, 0);
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 208));
  CFRelease(a1);
}

uint64_t endpointCluster_setNeedsDiscoveryAndNotifyIfNeeded(uint64_t a1, int a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (*(unsigned __int8 *)(result + 371) != a2)
  {
    uint64_t v4 = result;
    if (gLogCategory_APEndpointCluster >= 51)
    {
      *(unsigned char *)(result + 371) = a2;
    }
    else
    {
      if (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()) {
        LogPrintF();
      }
      int v5 = gLogCategory_APEndpointCluster;
      *(unsigned char *)(v4 + 371) = a2;
      if (v5 <= 30 && (v5 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
    }
    CMNotificationCenterGetDefaultLocalCenter();
    return FigDispatchAsyncPostNotification();
  }
  return result;
}

uint64_t APEndpointStreamInterruptingWrapperCreate(uint64_t a1, const void *a2, const void *a3, const void *a4, void *a5)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (!a3) {
      goto LABEL_21;
    }
    FigEndpointStreamAirPlayGetClassID();
    uint64_t v9 = CMDerivedObjectCreate();
    if (v9)
    {
      uint64_t v13 = v9;
      APSLogErrorAt();
      return v13;
    }
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    DerivedStorage[1] = CFRetain(a2);
    *uint64_t DerivedStorage = CFRetain(a3);
    SNPrintF();
    dispatch_queue_t v11 = dispatch_queue_create(label, 0);
    DerivedStorage[3] = v11;
    if (!v11 || (SNPrintF(), dispatch_queue_t v12 = dispatch_queue_create(label, 0), (DerivedStorage[2] = v12) == 0))
    {
      APSLogErrorAt();
      return 4294950535;
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    if (!a4)
    {
LABEL_21:
      APSLogErrorAt();
      return 4294950536;
    }
    DerivedStorage[4] = CFRetain(a4);
    if (*(void *)(CMBaseObjectGetDerivedStorage() + 8))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
    }
    if (*(void *)(CMBaseObjectGetDerivedStorage() + 32))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigBufferedAirPlayGlobalRoutingRegistryGetSharedInstance();
      FigNotificationCenterAddWeakListener();
    }
    if (gLogCategory_APEndpointStreamInterruptingWrapper <= 50
      && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    uint64_t v13 = 0;
    *a5 = 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294950536;
  }
  return v13;
}

uint64_t interruptingStreamWrapper_interruptibleStreamNotificationCallback()
{
  uint64_t result = FigCFEqual();
  if (result)
  {
    return interruptingStreamWrapper_yieldToInterruptibleIfNecessary();
  }
  return result;
}

void interruptingStreamWrapper_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptingWrapper <= 50
    && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(void *)(CMBaseObjectGetDerivedStorage() + 8))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
  }
  if (*(void *)(CMBaseObjectGetDerivedStorage() + 32))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigBufferedAirPlayGlobalRoutingRegistryGetSharedInstance();
    FigNotificationCenterRemoveWeakListener();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  uint64_t v1 = *(NSObject **)(DerivedStorage + 24);
  if (v1)
  {
    dispatch_release(v1);
    *(void *)(DerivedStorage + 24) = 0;
  }
  int v2 = *(NSObject **)(DerivedStorage + 16);
  if (v2)
  {
    dispatch_release(v2);
    *(void *)(DerivedStorage + 16) = 0;
  }
  uint64_t v3 = *(const void **)(DerivedStorage + 8);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 8) = 0;
  }
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  uint64_t v4 = *(const void **)(DerivedStorage + 32);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DerivedStorage + 32) = 0;
  }
}

CFStringRef interruptingStreamWrapper_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v3, 0, @"<APEndpointStreamInterruptingWrapper %p; sub: %p; interruptible: %p>",
           a1,
           DerivedStorage[1],
           *DerivedStorage);
}

uint64_t interruptingStreamWrapper_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptingWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t CMBaseObject = FigEndpointStreamGetCMBaseObject();
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10) {
    return 4294954514;
  }
  return v10(CMBaseObject, a2, a3, a4);
}

uint64_t interruptingStreamWrapper_SetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptingWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t CMBaseObject = FigEndpointStreamGetCMBaseObject();
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 56);
  if (!v8) {
    return 4294954514;
  }
  return v8(CMBaseObject, a2, a3);
}

uint64_t interruptingStreamWrapper_subStreamNotificationCallback()
{
  if (gLogCategory_APEndpointStreamInterruptingWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t interruptingStreamWrapper_bufferedClientUpdateNotificationCallback()
{
  return interruptingStreamWrapper_yieldToInterruptibleIfNecessary();
}

uint64_t interruptingStreamWrapper_yieldToInterruptibleIfNecessary()
{
  FigEndpointStreamAirPlayGetFigEndpointStream();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  uint64_t v20 = 0;
  if (*(unsigned char *)(DerivedStorage + 40))
  {
    if (gLogCategory_APEndpointStreamInterruptingWrapper > 50
      || gLogCategory_APEndpointStreamInterruptingWrapper == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  Shareduint64_t Instance = FigBufferedAirPlayGlobalRoutingRegistryGetSharedInstance();
  uint64_t v2 = *(void *)(DerivedStorage + 32);
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  int v5 = *(void (**)(uint64_t, uint64_t, uint64_t *))(v4 + 40);
  if (v5)
  {
    v5(SharedInstance, v2, &v20);
    if (v20)
    {
      if (gLogCategory_APEndpointStreamInterruptingWrapper > 50
        || gLogCategory_APEndpointStreamInterruptingWrapper == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_24;
      }
      goto LABEL_23;
    }
  }
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t CMBaseObject = FigEndpointStreamGetCMBaseObject();
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(void (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v9 + 48);
  if (v10) {
    v10(CMBaseObject, *MEMORY[0x1E4F21370], v6, &cf);
  }
  if (FigCFEqual())
  {
    if (gLogCategory_APEndpointStreamInterruptingWrapper > 50
      || gLogCategory_APEndpointStreamInterruptingWrapper == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_24;
    }
LABEL_23:
    LogPrintF();
LABEL_24:
    uint64_t v11 = 0;
    dispatch_queue_t v12 = 0;
    goto LABEL_25;
  }
  if (gLogCategory_APEndpointStreamInterruptingWrapper <= 50
    && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  dispatch_queue_t v12 = Mutable;
  if (Mutable)
  {
    CFDictionarySetValue(Mutable, @"InterruptingStreamDidYield", (const void *)*MEMORY[0x1E4F1CFD0]);
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    uint64_t FigEndpointStream = FigEndpointStreamAirPlayGetFigEndpointStream();
    uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v16) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = 0;
    }
    uint64_t v18 = *(uint64_t (**)(uint64_t, void, void, void))(v17 + 8);
    if (v18)
    {
      uint64_t v11 = v18(FigEndpointStream, 0, 0, 0);
      if (!v11) {
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v11 = 4294954514;
    }
    APSLogErrorAt();
  }
  else
  {
    APSLogErrorAt();
    uint64_t v11 = 4294960568;
  }
LABEL_25:
  if (cf) {
    CFRelease(cf);
  }
  if (v12) {
    CFRelease(v12);
  }
  return v11;
}

__CFString *interruptingStreamWrapper_subEndpointAddRemoveObservingProtocolCopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"APEndpointStreamInterruptingWrapper <APSubEndpointAddRemoveObservingProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t interruptingStreamWrapper_NotifySubEndpointAdded(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptingWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v4 = *(void *)(DerivedStorage + 8);
  APSubEndpointAddRemoveObservingProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v6 = *(void *)(ProtocolVTable + 16);
  if (!v6) {
    return 4294954508;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
  if (!v7) {
    return 4294954514;
  }
  return v7(v4, a2);
}

uint64_t interruptingStreamWrapper_NotifySubEndpointRemoved(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptingWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v4 = *(void *)(DerivedStorage + 8);
  APSubEndpointAddRemoveObservingProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v6 = *(void *)(ProtocolVTable + 16);
  if (!v6) {
    return 4294954508;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 16);
  if (!v7) {
    return 4294954514;
  }
  return v7(v4, a2);
}

uint64_t interruptingStreamWrapper_Suspend(const void *a1, const void *a2)
{
  if (gLogCategory_APEndpointStreamInterruptingWrapper <= 50
    && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRetain(a1);
  if (a2) {
    CFRetain(a2);
  }
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t interruptingStreamWrapper_Resume(const void *a1, const void *a2)
{
  if (gLogCategory_APEndpointStreamInterruptingWrapper <= 50
    && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRetain(a1);
  if (a2) {
    CFRetain(a2);
  }
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t interruptingStreamWrapper_Flush(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptingWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v6 = *(void *)(DerivedStorage + 8);
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 24);
  if (!v9) {
    return 4294954514;
  }
  return v9(v6, a2, a3);
}

uint64_t interruptingStreamWrapper_Dissociate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptingWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v1 = *(void *)(DerivedStorage + 8);
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v3 + 32);
  if (!v4) {
    return 4294954514;
  }
  return v4(v1);
}

void interruptingStreamWrapper_suspendAsync(uint64_t a1)
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptingWrapper <= 50
    && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptingWrapper <= 50
    && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (FigEndpointStreamSuspendSync()
    || APEndpointStreamInterruptibleWrapperEndInterruption())
  {
    APSLogErrorAt();
  }
  if (*(void *)(a1 + 16))
  {
    CFRetain(*(CFTypeRef *)a1);
    APSDispatchAsyncFHelper();
  }
  CFRelease(*(CFTypeRef *)a1);
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
}

void interruptingStreamWrapper_completionCallback(uint64_t a1)
{
  if (gLogCategory_APEndpointStreamInterruptingWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  (*(void (**)(void, void, void))(a1 + 16))(*(void *)a1, *(unsigned int *)(a1 + 8), *(void *)(a1 + 24));
  uint64_t v2 = *(const void **)a1;
  CFRelease(v2);
}

void interruptingStreamWrapper_resumeAsync(uint64_t a1)
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptingWrapper <= 30
    && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptingWrapper <= 50
    && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (APEndpointStreamInterruptibleWrapperBeginInterruption()
    || FigEndpointStreamResumeSync())
  {
    APSLogErrorAt();
  }
  if (*(void *)(a1 + 16))
  {
    CFRetain(*(CFTypeRef *)a1);
    APSDispatchAsyncFHelper();
  }
  CFRelease(*(CFTypeRef *)a1);
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
}

uint64_t interruptingStreamWrapper_FlushAudioDataWithinSampleRange(uint64_t a1, long long *a2)
{
  FigEndpointStreamAirPlayGetFigEndpointStream();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptingWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v4 = *(void *)(DerivedStorage + 8);
  long long v9 = *a2;
  long long v10 = a2[1];
  long long v11 = a2[2];
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 24);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, _OWORD *))(v6 + 8);
  if (!v7) {
    return 4294954514;
  }
  v12[0] = v9;
  v12[1] = v10;
  _OWORD v12[2] = v11;
  return v7(v4, v12);
}

uint64_t interruptingStreamWrapper_SetRateAndAnchorTimeWithCompletionCallback(const void *a1, CMTime *a2, CMTime *a3, uint64_t a4, uint64_t a5, double a6)
{
  FigEndpointStreamAirPlayGetFigEndpointStream();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v13 = malloc_type_calloc(1uLL, 0x18uLL, 0xA00402214FCE6uLL);
  if (gLogCategory_APEndpointStreamInterruptingWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
  {
    CMTime time = *a2;
    CMTimeGetSeconds(&time);
    CMTime time = *a3;
    CMTimeGetSeconds(&time);
    LogPrintF();
  }
  if (a1) {
    CFTypeRef v14 = CFRetain(a1);
  }
  else {
    CFTypeRef v14 = 0;
  }
  void *v13 = v14;
  v13[1] = a4;
  v13[2] = a5;
  uint64_t v15 = *(void *)(DerivedStorage + 8);
  *(_OWORD *)&v21.CFTypeRef value = *(_OWORD *)&a2->value;
  v21.CMTimeEpoch epoch = a2->epoch;
  long long v19 = *(_OWORD *)&a3->value;
  CMTimeEpoch epoch = a3->epoch;
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 24);
  if (!v16) {
    return 4294954514;
  }
  uint64_t v17 = *(uint64_t (**)(uint64_t, CMTime *, long long *, uint64_t (*)(const void *), void *, double))(v16 + 16);
  if (!v17) {
    return 4294954514;
  }
  CMTime time = v21;
  long long v22 = v19;
  CMTimeEpoch v23 = epoch;
  return v17(v15, &time, &v22, interruptingStreamWrapper_setRateCompletionCallback, v13, a6);
}

uint64_t interruptingStreamWrapper_copyTransportFormatDescriptionForSourceContentFormatDescription(uint64_t a1, uint64_t a2, uint64_t a3)
{
  FigEndpointStreamAirPlayGetFigEndpointStream();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptingWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v6 = *(void *)(DerivedStorage + 8);
  FigEndpointStreamAirPlayGetClassID();
  if (!CMBaseObjectIsMemberOfClass()) {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 24);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  long long v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 24);
  if (!v9) {
    return 4294954514;
  }
  return v9(v6, a2, a3);
}

uint64_t interruptingStreamWrapper_isPassthroughSupportedForFormatDescription(uint64_t a1, uint64_t a2, uint64_t a3)
{
  FigEndpointStreamAirPlayGetFigEndpointStream();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptingWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v6 = *(void *)(DerivedStorage + 8);
  FigEndpointStreamAirPlayGetClassID();
  if (!CMBaseObjectIsMemberOfClass()) {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 24);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  long long v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
  if (!v9) {
    return 4294954514;
  }
  return v9(v6, a2, a3);
}

uint64_t interruptingStreamWrapper_setRateCompletionCallback(const void *a1)
{
  if (gLogCategory_APEndpointStreamInterruptingWrapper <= 50
    && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a1) {
    CFRetain(a1);
  }
  return APSDispatchAsyncFHelper();
}

void interruptingStreamWrapper_setRateCompletionCallbackWorkDispatch(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  double v3 = *(double *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 72);
  FigEndpointStreamAirPlayGetFigEndpointStream();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptingWrapper <= 50
    && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(void *)(v4 + 8))
  {
    CFRetain(*(CFTypeRef *)v4);
    APSDispatchAsyncFHelper();
  }
  if (v2)
  {
    if (gLogCategory_APEndpointStreamInterruptingWrapper <= 50
      && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  else
  {
    *(unsigned char *)(DerivedStorage + 40) = v3 != 0.0;
    if (interruptingStreamWrapper_yieldToInterruptibleIfNecessary()) {
      APSLogErrorAt();
    }
  }
  CFRelease(*(CFTypeRef *)v4);
  free((void *)v4);
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
}

void interruptingStreamWrapper_setRateCompletionClientCallback(uint64_t a1)
{
  if (gLogCategory_APEndpointStreamInterruptingWrapper <= 50
    && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFTypeRef v2 = *(CFTypeRef *)a1;
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  double v4 = *(double *)(a1 + 16);
  long long v9 = *(_OWORD *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 40);
  long long v7 = *(_OWORD *)(a1 + 48);
  uint64_t v6 = *(void (**)(CFTypeRef, uint64_t, long long *, long long *, uint64_t, double))(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v8 = *(void *)(a1 + 64);
  v6(v2, v3, &v9, &v7, v5, v4);
  CFRelease(*(CFTypeRef *)a1);
}

uint64_t APAudioHoseManagerBufferedGetClassID()
{
  if (APAudioHoseManagerBufferedGetClassID_sRegisterOnce != -1) {
    dispatch_once_f(&APAudioHoseManagerBufferedGetClassID_sRegisterOnce, &APAudioHoseManagerBufferedGetClassID_sClassID, (dispatch_function_t)audioHoseManagerBuffered_registerBaseClass);
  }
  return APAudioHoseManagerBufferedGetClassID_sClassID;
}

uint64_t audioHoseManagerBuffered_registerBaseClass(uint64_t a1)
{
  uint64_t ClassID = CMBaseGetClassID();
  return MEMORY[0x1F40DC658](&audioHoseManagerBuffered_registerBaseClass_sClassDesc, ClassID, 1, a1);
}

uint64_t APAudioHoseManagerBufferedGetTypeID()
{
  if (APAudioHoseManagerBufferedGetClassID_sRegisterOnce != -1) {
    dispatch_once_f(&APAudioHoseManagerBufferedGetClassID_sRegisterOnce, &APAudioHoseManagerBufferedGetClassID_sClassID, (dispatch_function_t)audioHoseManagerBuffered_registerBaseClass);
  }
  uint64_t v0 = APAudioHoseManagerBufferedGetClassID_sClassID;
  return MEMORY[0x1F40DB8F8](v0);
}

uint64_t APAudioHoseManagerBufferedCreate(const __CFAllocator *a1, void *a2)
{
  CFTypeRef v22 = 0;
  if (APAudioHoseManagerBufferedGetClassID_sRegisterOnce != -1) {
    dispatch_once_f(&APAudioHoseManagerBufferedGetClassID_sRegisterOnce, &APAudioHoseManagerBufferedGetClassID_sClassID, (dispatch_function_t)audioHoseManagerBuffered_registerBaseClass);
  }
  uint64_t v4 = CMDerivedObjectCreate();
  if (v4)
  {
    uint64_t v18 = v4;
  }
  else
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    dispatch_queue_t v6 = dispatch_queue_create("HoseManagerBufferedQueue", 0);
    *(void *)(DerivedStorage + 168) = v6;
    if (!v6
      || (dispatch_queue_t v7 = dispatch_queue_create("HoseManagerBufferedNotificationQueue", 0),
          (*(void *)(DerivedStorage + 176) = v7) == 0))
    {
      APSLogErrorAt();
      uint64_t v18 = APSSignalErrorAt();
      goto LABEL_43;
    }
    *(unsigned char *)(DerivedStorage + 185) = 0;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, 0, &hoseManagerBuffered_hoseDescriptorDictionaryCallbacks);
    *(unsigned char *)uint64_t DerivedStorage = 0;
    *(void *)(DerivedStorage + 192) = Mutable;
    *(void *)(DerivedStorage + 200) = 0;
    uint64_t v9 = MEMORY[0x1E4F1F9F8];
    long long v10 = *MEMORY[0x1E4F1F9F8];
    *(_OWORD *)(DerivedStorage + 236) = *MEMORY[0x1E4F1F9F8];
    uint64_t v11 = *(void *)(v9 + 16);
    *(void *)(DerivedStorage + 252) = v11;
    *(unsigned char *)(DerivedStorage + 372) = 1;
    *(_WORD *)(DerivedStorage + 152) = 0;
    *(unsigned char *)(DerivedStorage + 36) = 0;
    *(void *)(DerivedStorage + 40) = 0;
    long long v20 = v10;
    *(_OWORD *)(DerivedStorage + 48) = v10;
    *(void *)(DerivedStorage + 64) = v11;
    *(_DWORD *)(DerivedStorage + 72) = FigGetCFPreferenceNumberWithDefault();
    if (gLogCategory_APAudioHoseManagerBuffered <= 50
      && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
    {
      if (v22) {
        CMBaseObjectGetDerivedStorage();
      }
      LogPrintF();
    }
    *(_OWORD *)(DerivedStorage + 76) = v20;
    *(void *)(DerivedStorage + 92) = v11;
    *(_OWORD *)(DerivedStorage + 100) = v20;
    *(void *)(DerivedStorage + 116) = v11;
    *(_DWORD *)(DerivedStorage + 124) = 0;
    int CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
    CMTimeMake(&time, CFPreferenceNumberWithDefault, 1);
    *(CMTime *)(DerivedStorage + 128) = time;
    *(_DWORD *)(DerivedStorage + 208) = 0;
    *(_DWORD *)(DerivedStorage + 184) = 0;
    *(unsigned char *)(DerivedStorage + 188) = 0;
    *(_OWORD *)(DerivedStorage + 212) = v20;
    *(void *)(DerivedStorage + 228) = v11;
    *(_OWORD *)(DerivedStorage + 236) = v20;
    *(void *)(DerivedStorage + 252) = v11;
    *(_DWORD *)(DerivedStorage + 260) = 0;
    *(_OWORD *)(DerivedStorage + 264) = v20;
    *(void *)(DerivedStorage + 280) = v11;
    *(_OWORD *)(DerivedStorage + 288) = v20;
    *(void *)(DerivedStorage + 304) = v11;
    *(unsigned char *)(DerivedStorage + 328) = 0;
    *(void *)(DerivedStorage + 472) = FigSimpleMutexCreate();
    *(void *)(DerivedStorage + 320) = 0;
    FigGetCFPreferenceNumberWithDefault();
    *(void *)(DerivedStorage + 336) = MillisecondsToUpTicks();
    FigGetCFPreferenceNumberWithDefault();
    *(void *)(DerivedStorage + 344) = MillisecondsToUpTicks();
    FigGetCFPreferenceNumberWithDefault();
    *(void *)(DerivedStorage + 352) = MillisecondsToUpTicks();
    FigGetCFPreferenceNumberWithDefault();
    *(void *)(DerivedStorage + 360) = MillisecondsToUpTicks();
    *(_DWORD *)(DerivedStorage + 368) = FigGetCFPreferenceNumberWithDefault();
    *(_OWORD *)(DerivedStorage + 376) = v20;
    *(void *)(DerivedStorage + 392) = v11;
    int v13 = FigGetCFPreferenceNumberWithDefault();
    CMTimeMake(&time, v13, 1);
    *(CMTime *)(DerivedStorage + 400) = time;
    CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef v15 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    *(void *)(DerivedStorage + 456) = v15;
    if (v15)
    {
      CFMutableDictionaryRef v16 = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      *(void *)(DerivedStorage + 448) = v16;
      if (v16)
      {
        int v17 = FigGetCFPreferenceNumberWithDefault();
        CMTimeMake(&time, v17, 1000);
        *(CMTime *)(DerivedStorage + 212) = time;
        if (gLogCategory_APAudioHoseManagerBuffered <= 50
          && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
        {
          if (v22) {
            CMBaseObjectGetDerivedStorage();
          }
          CMTime time = *(CMTime *)(DerivedStorage + 212);
          CMTimeGetSeconds(&time);
          LogPrintF();
        }
        *(_DWORD *)(DerivedStorage + 208) = FigGetCFPreferenceNumberWithDefault();
        if (gLogCategory_APAudioHoseManagerBuffered <= 50)
        {
          if (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize())
          {
            if (v22) {
              CMBaseObjectGetDerivedStorage();
            }
            LogPrintF();
          }
          if (gLogCategory_APAudioHoseManagerBuffered <= 50
            && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
          {
            if (v22) {
              CMBaseObjectGetDerivedStorage();
            }
            LogPrintF();
          }
        }
        uint64_t v18 = 0;
        *a2 = v22;
        return v18;
      }
      uint64_t v18 = 4294894846;
    }
    else
    {
      uint64_t v18 = 4294894846;
    }
  }
  APSLogErrorAt();
LABEL_43:
  if (v22) {
    CFRelease(v22);
  }
  return v18;
}

CFStringRef audioHoseManagerBuffered_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[APAudioHoseManager %p]", a1);
}

uint64_t audioHoseManagerBuffered_Invalid()
{
  *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 36) = 1;
  return 1;
}

uint64_t audioHoseManagerBuffered_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 36) = 1;
  dispatch_sync(*(dispatch_queue_t *)(DerivedStorage + 168), &__block_literal_global_33);
  uint64_t v3 = *(NSObject **)(DerivedStorage + 168);
  if (v3)
  {
    dispatch_release(v3);
    *(void *)(DerivedStorage + 168) = 0;
  }
  dispatch_sync(*(dispatch_queue_t *)(DerivedStorage + 176), &__block_literal_global_84);
  uint64_t v4 = *(NSObject **)(DerivedStorage + 176);
  if (v4)
  {
    dispatch_release(v4);
    *(void *)(DerivedStorage + 176) = 0;
  }
  uint64_t v5 = *(const void **)(DerivedStorage + 200);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(DerivedStorage + 200) = 0;
  }
  dispatch_queue_t v6 = *(const void **)(DerivedStorage + 160);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(DerivedStorage + 160) = 0;
  }
  dispatch_queue_t v7 = *(const void **)(DerivedStorage + 192);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(DerivedStorage + 192) = 0;
  }
  uint64_t v8 = *(const void **)(DerivedStorage + 440);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(DerivedStorage + 440) = 0;
  }
  *(void *)(DerivedStorage + 320) = 0;
  audioHoseManagerBuffered_releaseCryptors(a1, MEMORY[0x1E4F1F9F8]);
  uint64_t v9 = *(const void **)(DerivedStorage + 448);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(DerivedStorage + 448) = 0;
  }
  audioHoseManagerBuffered_releaseMagicCookies(a1, MEMORY[0x1E4F1F9F8]);
  long long v10 = *(const void **)(DerivedStorage + 456);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(DerivedStorage + 456) = 0;
  }
  uint64_t result = FigSimpleMutexDestroy();
  *(void *)(DerivedStorage + 472) = 0;
  return result;
}

__CFString *audioHoseManagerBuffered_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<APAudioHoseManagerBuffered %p>", a1);
  return Mutable;
}

uint64_t audioHoseManagerBuffered_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 472));
  if (!a2)
  {
    uint64_t v11 = 4294894845;
LABEL_28:
    APSLogErrorAt();
    goto LABEL_9;
  }
  if (!a4)
  {
    uint64_t v11 = 4294894845;
    goto LABEL_28;
  }
  if (CFEqual(a2, @"ShouldUseReceiverChoosesAnchor"))
  {
    uint64_t v8 = CMBaseObjectGetDerivedStorage();
    uint64_t v13 = 0;
    CFAllocatorRef v14 = &v13;
    uint64_t v15 = 0x2000000000;
    char v16 = 0;
    if (CFDictionaryGetCount(*(CFDictionaryRef *)(v8 + 192)) == 1) {
      CFDictionaryApplyBlock();
    }
LABEL_6:
    int v9 = *((unsigned __int8 *)v14 + 24);
    _Block_object_dispose(&v13, 8);
    long long v10 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    if (!v9) {
      long long v10 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
    }
    uint64_t v11 = 0;
    *a4 = CFRetain(*v10);
    goto LABEL_9;
  }
  if (CFEqual(a2, @"IsRunning"))
  {
    CMBaseObjectGetDerivedStorage();
    uint64_t v13 = 0;
    CFAllocatorRef v14 = &v13;
    uint64_t v15 = 0x2000000000;
    char v16 = 0;
    CFDictionaryApplyBlock();
    if (gLogCategory_APAudioHoseManagerBuffered <= 90
      && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1) {
        CMBaseObjectGetDerivedStorage();
      }
      LogPrintF();
    }
    goto LABEL_6;
  }
  if (gLogCategory_APAudioHoseManagerBuffered <= 90
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  uint64_t v11 = 4294954509;
LABEL_9:
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 472));
  return v11;
}

uint64_t audioHoseManagerBuffered_SetProperty(uint64_t a1, uint64_t a2, const __CFString *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
  {
    uint64_t v10 = 4294894845;
    goto LABEL_44;
  }
  uint64_t v7 = DerivedStorage;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      if (a3)
      {
        CFTypeID v11 = CFGetTypeID(a3);
        if (v11 != CFNumberGetTypeID())
        {
          uint64_t v10 = 4294894845;
          goto LABEL_44;
        }
      }
      __int16 UInt16 = FigCFNumberGetUInt16();
      void block[6] = MEMORY[0x1E4F143A8];
      void block[7] = 0x40000000;
      void block[8] = __audioHoseManagerBuffered_SetProperty_block_invoke;
      void block[9] = &__block_descriptor_tmp_111_1;
      __int16 v25 = UInt16;
      void block[10] = a1;
      CFDictionaryApplyBlock();
      return 0;
    }
    if (FigCFEqual())
    {
      if (a3)
      {
        CFTypeID v13 = CFGetTypeID(a3);
        if (v13 != CFNumberGetTypeID())
        {
          uint64_t v10 = 4294894845;
          goto LABEL_44;
        }
      }
      CFAllocatorRef v14 = *(NSObject **)(v7 + 168);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __audioHoseManagerBuffered_SetProperty_block_invoke_2;
      block[3] = &__block_descriptor_tmp_112_0;
      void block[4] = a1;
      void block[5] = a3;
      uint64_t v15 = block;
      goto LABEL_14;
    }
    if (FigCFEqual())
    {
      if (!a3 || (CFTypeID v17 = CFGetTypeID(a3), v17 == CFDictionaryGetTypeID()))
      {
        CMTimeMakeFromDictionary(&v23, (CFDictionaryRef)a3);
        uint64_t v10 = 0;
        *(CMTime *)(v7 + 236) = v23;
        return v10;
      }
      uint64_t v10 = 4294894845;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (FigCFEqual())
        {
          CFAllocatorRef v14 = *(NSObject **)(v7 + 168);
          v22[0] = MEMORY[0x1E4F143A8];
          v22[1] = 0x40000000;
          v22[2] = __audioHoseManagerBuffered_SetProperty_block_invoke_3;
          v22[3] = &__block_descriptor_tmp_113_0;
          v22[4] = v7;
          v22[5] = a3;
          uint64_t v15 = v22;
        }
        else
        {
          if (FigCFEqual())
          {
            if (!a3 || (CFTypeID v19 = CFGetTypeID(a3), v19 == CFDictionaryGetTypeID()))
            {
              CMTimeMakeFromDictionary(&v23, (CFDictionaryRef)a3);
              uint64_t v10 = 0;
              *(CMTime *)(v7 + 288) = v23;
              return v10;
            }
            uint64_t v10 = 4294894845;
            goto LABEL_44;
          }
          if (FigCFEqual())
          {
            if (a3)
            {
              CFTypeID v20 = CFGetTypeID(a3);
              if (v20 != CFStringGetTypeID())
              {
                uint64_t v10 = 4294894845;
                goto LABEL_44;
              }
            }
            *(unsigned char *)uint64_t v7 = 0;
            CFStringGetCString(a3, (char *)v7, 36, 0x600u);
            return 0;
          }
          if (!FigCFEqual()) {
            return 4294954509;
          }
          CFAllocatorRef v14 = *(NSObject **)(v7 + 168);
          v21[0] = MEMORY[0x1E4F143A8];
          v21[1] = 0x40000000;
          v21[2] = __audioHoseManagerBuffered_SetProperty_block_invoke_4;
          v21[3] = &__block_descriptor_tmp_114_0;
          void v21[4] = v7;
          void v21[5] = a3;
          uint64_t v15 = v21;
        }
LABEL_14:
        dispatch_sync(v14, v15);
        return 0;
      }
      if (!a3 || (CFTypeID v18 = CFGetTypeID(a3), v18 == CFDictionaryGetTypeID()))
      {
        CMTimeMakeFromDictionary(&v23, (CFDictionaryRef)a3);
        uint64_t v10 = 0;
        *(CMTime *)(v7 + 264) = v23;
        return v10;
      }
      uint64_t v10 = 4294894845;
    }
LABEL_44:
    APSLogErrorAt();
    return v10;
  }
  if (a3)
  {
    CFTypeID v8 = CFGetTypeID(a3);
    if (v8 != CFBooleanGetTypeID())
    {
      uint64_t v10 = 4294894845;
      goto LABEL_44;
    }
  }
  Boolean Value = CFBooleanGetValue((CFBooleanRef)a3);
  uint64_t v10 = 0;
  *(unsigned char *)(v7 + 185) = Value;
  return v10;
}

uint64_t audioHoseManagerBuffered_releaseCryptors(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTime v18 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  if (*(unsigned char *)(DerivedStorage + 36)
    || (uint64_t v5 = DerivedStorage, Count = CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 448)), Count < 1))
  {
    uint64_t v14 = 0;
    CFTypeID v8 = 0;
LABEL_24:
    int v9 = 0;
    goto LABEL_19;
  }
  size_t v7 = Count;
  CFTypeID v8 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
  if (!v8)
  {
    uint64_t v14 = 4294894846;
    APSLogErrorAt();
    goto LABEL_24;
  }
  int v9 = (const void **)malloc_type_calloc(v7, 8uLL, 0x6004044C4A2DFuLL);
  if (v9)
  {
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(v5 + 448), v8, v9);
    uint64_t v10 = 0;
    CFTypeID v11 = &unk_1EA629000;
    while (1)
    {
      CMTimeMakeFromDictionary(&v18, (CFDictionaryRef)v9[v10]);
      if ((*(unsigned char *)(a2 + 12) & 1) == 0 || (CMTime time1 = *(CMTime *)a2, time2 = v18, CMTimeCompare(&time1, &time2) >= 1))
      {
        int v12 = v11[386];
        if (v12 <= 50 && (v12 != -1 || _LogCategory_Initialize()))
        {
          if (a1) {
            CMBaseObjectGetDerivedStorage();
          }
          audioHoseManagerBuffered_getCryptorIDForCryptor((uint64_t)v8[v10]);
          LogPrintF();
          CFTypeID v11 = (_DWORD *)&unk_1EA629000;
        }
        CMNotificationCenterGetDefaultLocalCenter();
        uint64_t v13 = FigNotificationCenterRemoveWeakListener();
        if (v13)
        {
          uint64_t v14 = v13;
          goto LABEL_21;
        }
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v5 + 448), v8[v10]);
      }
      if (v7 == ++v10)
      {
        uint64_t v14 = 0;
        goto LABEL_19;
      }
    }
  }
  uint64_t v14 = 4294894846;
LABEL_21:
  APSLogErrorAt();
LABEL_19:
  free(v8);
  free(v9);
  return v14;
}

uint64_t audioHoseManagerBuffered_releaseMagicCookies(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTime v16 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  if (*(unsigned char *)(DerivedStorage + 36)
    || (uint64_t v5 = DerivedStorage, Count = CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 456)), Count < 1))
  {
    uint64_t v12 = 0;
    CFTypeID v8 = 0;
    uint64_t v10 = 0;
  }
  else
  {
    size_t v7 = Count;
    CFTypeID v8 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
    if (v8 && (int v9 = (const void **)malloc_type_calloc(v7, 8uLL, 0x6004044C4A2DFuLL)) != 0)
    {
      uint64_t v10 = v9;
      CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(v5 + 456), v8, v9);
      for (uint64_t i = 0; i != v7; ++i)
      {
        CMTimeMakeFromDictionary(&v16, (CFDictionaryRef)v10[i]);
        if (*(unsigned char *)(a2 + 12))
        {
          CMTime time1 = *(CMTime *)a2;
          CMTime time2 = v16;
          if (CMTimeCompare(&time1, &time2) < 1) {
            continue;
          }
        }
        if (gLogCategory_APAudioHoseManagerBuffered <= 50
          && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
        {
          if (a1) {
            CMBaseObjectGetDerivedStorage();
          }
          audioHoseManagerBuffered_getMagicCookieIDForMagicCookieData((CFDataRef)v8[i]);
          LogPrintF();
        }
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v5 + 456), v8[i]);
      }
      uint64_t v12 = 0;
    }
    else
    {
      APSLogErrorAt();
      uint64_t v10 = 0;
      uint64_t v12 = 4294894846;
    }
  }
  free(v8);
  free(v10);
  return v12;
}

uint64_t audioHoseManagerBuffered_getCryptorIDForCryptor(uint64_t a1)
{
  uint64_t v1 = a1;
  CFTypeRef cf = 0;
  if (audioHoseManagerBuffered_getCryptorIDForCryptor_sRandomBytesOnce == -1)
  {
    if (a1)
    {
LABEL_3:
      uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v2) {
        uint64_t v3 = v2;
      }
      else {
        uint64_t v3 = 0;
      }
      uint64_t v4 = *(unsigned int (**)(uint64_t, void, void, CFTypeRef *))(v3 + 48);
      if (!v4
        || v4(v1, *MEMORY[0x1E4F1FE10], *MEMORY[0x1E4F1CF80], &cf)
        || CFStringGetOrCopyCStringUTF8())
      {
        APSLogErrorAt();
        uint64_t v1 = 0;
      }
      else
      {
        uint64_t v1 = SipHash();
      }
    }
  }
  else
  {
    dispatch_once(&audioHoseManagerBuffered_getCryptorIDForCryptor_sRandomBytesOnce, &__block_literal_global_88);
    if (v1) {
      goto LABEL_3;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return v1;
}

void audioHoseManagerBuffered_handleCryptorKeyUpdated(uint64_t a1, const void *a2, uint64_t a3, const void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a2) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  size_t v7 = malloc_type_calloc(1uLL, 0x10uLL, 0x60040FAFB2B2FuLL);
  if (v7)
  {
    CFTypeID v8 = v7;
    if (a2) {
      CFTypeRef v9 = CFRetain(a2);
    }
    else {
      CFTypeRef v9 = 0;
    }
    *CFTypeID v8 = v9;
    if (a4) {
      CFTypeRef v10 = CFRetain(a4);
    }
    else {
      CFTypeRef v10 = 0;
    }
    v8[1] = v10;
    CFTypeID v11 = *(NSObject **)(DerivedStorage + 168);
    dispatch_async_f(v11, v8, (dispatch_function_t)audioHoseManagerBuffered_handleCryptorKeyUpdatedInternal);
  }
  else
  {
    APSLogErrorAt();
  }
}

uint64_t __audioHoseManagerBuffered_getCryptorIDForCryptor_block_invoke()
{
  return RandomBytes();
}

void audioHoseManagerBuffered_handleCryptorKeyUpdatedInternal(uint64_t *a1)
{
  if (*a1)
  {
    if (!*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 36)
      && audioHoseManagerBuffered_setCryptorForAllHoses(*a1, a1[1]))
    {
      APSLogErrorAt();
    }
    if (*a1) {
      CFRelease((CFTypeRef)*a1);
    }
  }
  uint64_t v2 = (const void *)a1[1];
  if (v2) {
    CFRelease(v2);
  }
  free(a1);
}

uint64_t audioHoseManagerBuffered_setCryptorForAllHoses(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = 0;
  CFTypeID v11 = &v10;
  uint64_t v12 = 0x2000000000;
  int v13 = 0;
  CMBaseObjectGetDerivedStorage();
  uint64_t v6 = 0;
  size_t v7 = &v6;
  uint64_t v8 = 0x2000000000;
  uint64_t v9 = 0;
  if (a2)
  {
    uint64_t CryptorIDForCryptor = audioHoseManagerBuffered_getCryptorIDForCryptor(a2);
    void v7[3] = CryptorIDForCryptor;
    CFDictionaryApplyBlock();
    uint64_t v4 = *((unsigned int *)v11 + 6);
  }
  else
  {
    uint64_t v4 = 4294894845;
    APSLogErrorAt();
    *((_DWORD *)v11 + 6) = -72451;
  }
  _Block_object_dispose(&v6, 8);
  _Block_object_dispose(&v10, 8);
  return v4;
}

uint64_t __audioHoseManagerBuffered_setCryptorForAllHoses_block_invoke(uint64_t result, uint64_t a2, uint64_t *a3)
{
  if (!*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24))
  {
    uint64_t v3 = result;
    *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = audioHoseManagerBuffered_SetCryptorForSingleHose(*(const void **)(result + 48), *a3, *(void *)(result + 56), *(void *)(*(void *)(*(void *)(result + 40)+ 8)+ 24));
    uint64_t result = *(unsigned int *)(*(void *)(*(void *)(v3 + 32) + 8) + 24);
    if (result)
    {
      return APSLogErrorAt();
    }
  }
  return result;
}

uint64_t audioHoseManagerBuffered_SetCryptorForSingleHose(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  if (gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  APSEndpointStreamAudioHoseProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable && (uint64_t v9 = *(void *)(ProtocolVTable + 16)) != 0)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, int, const void *), const void *))(v9 + 96);
    if (v10)
    {
      uint64_t v11 = v10(a2, a4, a3, audioHoseManagerBuffered_hoseSetCryptorCallbackCompletionHandler, a1);
      if (!v11) {
        return v11;
      }
    }
    else
    {
      uint64_t v11 = 4294954514;
      audioHoseManagerBuffered_hoseSetCryptorCallbackCompletionHandler(a2, a4, -12782, a1);
    }
  }
  else
  {
    uint64_t v11 = 4294954508;
  }
  APSLogErrorAt();
  if (gLogCategory_APAudioHoseManagerBuffered <= 90
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  return v11;
}

uint64_t audioHoseManagerBuffered_hoseSetCryptorCallbackCompletionHandler(uint64_t a1, uint64_t a2, int a3, const void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v9 = malloc_type_calloc(1uLL, 0x20uLL, 0x10200401C4E69EBuLL);
  if (v9)
  {
    uint64_t v10 = v9;
    if (a4) {
      CFTypeRef v11 = CFRetain(a4);
    }
    else {
      CFTypeRef v11 = 0;
    }
    *uint64_t v10 = v11;
    v10[1] = a1;
    _OWORD v10[2] = a2;
    *((_DWORD *)v10 + 6) = a3;
    dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 168), v10, (dispatch_function_t)audioHoseManagerBuffered_hoseSetCryptorCallbackCompletionHandlerInternal);
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294894846;
  }
}

void audioHoseManagerBuffered_hoseSetCryptorCallbackCompletionHandlerInternal(const void **a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  Boolean Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 192), a1[1]);
  if (Value)
  {
    uint64_t v4 = Value;
    int v5 = *((_DWORD *)a1 + 6);
    if (v5)
    {
      if (v5 == 200501)
      {
        if (gLogCategory_APAudioHoseManagerBuffered <= 90
          && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
        {
          if (!*a1)
          {
LABEL_22:
            LogPrintF();
            goto LABEL_25;
          }
LABEL_7:
          CMBaseObjectGetDerivedStorage();
          goto LABEL_22;
        }
        goto LABEL_25;
      }
      if (gLogCategory_APAudioHoseManagerBuffered > 90
        || gLogCategory_APAudioHoseManagerBuffered == -1 && !_LogCategory_Initialize())
      {
LABEL_24:
        v4[176] = 1;
        goto LABEL_25;
      }
      if (!*a1)
      {
LABEL_23:
        LogPrintF();
        goto LABEL_24;
      }
    }
    else
    {
      if (gLogCategory_APAudioHoseManagerBuffered > 50
        || gLogCategory_APAudioHoseManagerBuffered == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_24;
      }
      if (!*a1) {
        goto LABEL_23;
      }
    }
    CMBaseObjectGetDerivedStorage();
    goto LABEL_23;
  }
  if (gLogCategory_APAudioHoseManagerBuffered <= 90
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (!*a1) {
      goto LABEL_22;
    }
    goto LABEL_7;
  }
LABEL_25:
  uint64_t v6 = *a1;
  if (*a1)
  {
    global_queue = dispatch_get_global_queue(0, 0);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __audioHoseManagerBuffered_releaseAsync_block_invoke;
    block[3] = &__block_descriptor_tmp_98;
    void block[4] = v6;
    dispatch_async(global_queue, block);
  }
  free(a1);
}

void __audioHoseManagerBuffered_releaseAsync_block_invoke(uint64_t a1)
{
}

uint64_t audioHoseManagerBuffered_getMagicCookieIDForMagicCookieData(CFDataRef theData)
{
  if (audioHoseManagerBuffered_getMagicCookieIDForMagicCookieData_sRandomBytesOnce != -1)
  {
    dispatch_once(&audioHoseManagerBuffered_getMagicCookieIDForMagicCookieData_sRandomBytesOnce, &__block_literal_global_102);
    if (theData) {
      goto LABEL_3;
    }
    return 0;
  }
  if (!theData) {
    return 0;
  }
LABEL_3:
  CFDataGetBytePtr(theData);
  CFDataGetLength(theData);
  return SipHash();
}

uint64_t __audioHoseManagerBuffered_getMagicCookieIDForMagicCookieData_block_invoke()
{
  return RandomBytes();
}

uint64_t __audioHoseManagerBuffered_shouldUseReceiverChoosesAnchor_block_invoke(uint64_t a1)
{
  uint64_t result = APSGetFBOPropertyInt64();
  if (result)
  {
    BOOL v3 = 0;
  }
  else
  {
    uint64_t result = APSGetFBOPropertyInt64();
    BOOL v3 = result != 0;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v3;
  return result;
}

uint64_t __audioHoseManagerBuffered_isRunning_block_invoke(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a3 + 92)) {
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  }
  return result;
}

void __audioHoseManagerBuffered_setLoudnessNormalizationOnAllHoses_block_invoke(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  CFTypeRef cf = 0;
  uint64_t v5 = *a3;
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v7 + 48);
  if (v8)
  {
    v8(v5, *MEMORY[0x1E4F213E0], 0, &cf);
    CFTypeRef v9 = cf;
    if (!*((unsigned char *)a3 + 8) && cf)
    {
      if (gLogCategory_APAudioHoseManagerBuffered <= 50
        && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
      {
        if (*(void *)(a1 + 40)) {
          CMBaseObjectGetDerivedStorage();
        }
        LogPrintF();
      }
      uint64_t v10 = *a3;
      uint64_t v11 = *(unsigned __int8 *)(a1 + 48);
      APSEndpointStreamAudioHoseProtocolGetProtocolID();
      uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable && (uint64_t v13 = *(void *)(ProtocolVTable + 16)) != 0)
      {
        uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 112);
        if (v14) {
          int v15 = v14(v10, v11);
        }
        else {
          int v15 = -12782;
        }
      }
      else
      {
        int v15 = -12788;
      }
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v15;
      if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
        APSLogErrorAt();
      }
      CFTypeRef v9 = cf;
    }
    if (v9) {
      CFRelease(v9);
    }
  }
}

__CFString *hoseManagerBuffered_audioHoseProtocolCopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"APAudioHoseManagerBuffered <APSEndpointStreamAudioHoseRegistrarProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t audioHoseManagerBuffered_audioHoseRegistrarRegisterHose(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  unsigned int valuePtr = 0;
  if (gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1) {
      CMBaseObjectGetDerivedStorage();
    }
    CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 192));
    LogPrintF();
  }
  if (CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 192), a2))
  {
    APSLogErrorAt();
LABEL_125:
    uint64_t v31 = APSSignalErrorAt();
    goto LABEL_104;
  }
  uint64_t v8 = CMBaseObjectGetDerivedStorage();
  long long v56 = 0u;
  long long v55 = 0u;
  long long v54 = 0u;
  long long v53 = 0u;
  long long v52 = 0u;
  long long v51 = 0u;
  long long v50 = 0u;
  long long v49 = 0u;
  long long v48 = 0u;
  long long v47 = 0u;
  memset(v46, 0, sizeof(v46));
  long long v45 = 0u;
  long long v44 = 0u;
  *(_OWORD *)&value.CMTimeScale timescale = 0u;
  if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(v8 + 192), a2))
  {
    if (a2) {
      CFTypeRef v9 = CFRetain(a2);
    }
    else {
      CFTypeRef v9 = 0;
    }
    value.CMTime value = (CMTimeValue)v9;
    LOWORD(v45) = 256;
    *(void *)&v46[0] = 0;
    *((void *)&v45 + 1) = mach_absolute_time();
    *(_OWORD *)((char *)v46 + 8) = *MEMORY[0x1E4F1FA48];
    *((void *)&v46[1] + 1) = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    *(void *)&long long v47 = 0;
    BYTE8(v52) = 0;
    v57[0] = 0;
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(uint64_t (**)(const void *, void, void, void *))(v11 + 48);
    if (!v12)
    {
      LOBYTE(value.timescale) = 0;
LABEL_23:
      int v16 = *(_DWORD *)(v8 + 480);
      *(_DWORD *)(v8 + 480) = v16 + 1;
      LODWORD(v56) = v16;
      *((void *)&v56 + 1) = 0;
      uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v17) {
        uint64_t v18 = v17;
      }
      else {
        uint64_t v18 = 0;
      }
      CFTypeID v19 = *(void (**)(const void *, void, void, char *))(v18 + 48);
      if (v19) {
        v19(a2, *MEMORY[0x1E4F49FE8], *MEMORY[0x1E4F1CF80], (char *)&v55 + 8);
      }
      CFDictionaryAddValue(*(CFMutableDictionaryRef *)(v8 + 192), a2, &value);
      if (CFDictionaryGetCount(*(CFDictionaryRef *)(v8 + 192)) > *(unsigned int *)(v8 + 484)) {
        *(_DWORD *)(v8 + 484) = CFDictionaryGetCount(*(CFDictionaryRef *)(v8 + 192));
      }
      goto LABEL_30;
    }
    int v13 = v12(a2, *MEMORY[0x1E4F21368], 0, v57);
    uint64_t v14 = (const void *)v57[0];
    if (v13)
    {
      BOOL v15 = 0;
      if (!v57[0])
      {
LABEL_20:
        LOBYTE(value.timescale) = v15;
        if (v15) {
          *(unsigned char *)(v8 + 184) = 1;
        }
        goto LABEL_23;
      }
    }
    else
    {
      BOOL v15 = FigCFEqual() != 0;
      uint64_t v14 = (const void *)v57[0];
      if (!v57[0]) {
        goto LABEL_20;
      }
    }
    CFRelease(v14);
    goto LABEL_20;
  }
  APSLogErrorAt();
  uint64_t v40 = APSSignalErrorAt();
  if (v40)
  {
    uint64_t v31 = v40;
    goto LABEL_53;
  }
LABEL_30:
  CFTypeID v20 = (char *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 192), a2);
  if (!v20)
  {
    APSLogErrorAt();
    goto LABEL_125;
  }
  CMTime v21 = v20;
  if (CFDictionaryGetInt64())
  {
    *(unsigned char *)(DerivedStorage + 187) = 1;
    audioHoseManagerBuffered_setEchoCancellationIsEnabledToAllHoses();
  }
  if (*(unsigned char *)(DerivedStorage + 187))
  {
    uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v23 = v22 ? v22 : 0;
    uint64_t v24 = *(void (**)(const void *, void, void))(v23 + 56);
    if (v24) {
      v24(a2, *MEMORY[0x1E4F49FB0], *MEMORY[0x1E4F1CFD0]);
    }
  }
  uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v25) {
    uint64_t v26 = v25;
  }
  else {
    uint64_t v26 = 0;
  }
  uint64_t v27 = *(uint64_t (**)(const void *, void, void, CFTypeRef *))(v26 + 48);
  if (!v27)
  {
    uint64_t v31 = 4294954514;
LABEL_53:
    APSLogErrorAt();
    goto LABEL_104;
  }
  uint64_t v28 = v27(a2, *MEMORY[0x1E4F49F90], 0, &cf);
  if (v28)
  {
    uint64_t v31 = v28;
    goto LABEL_53;
  }
  if (cf && (CFTypeID v29 = CFGetTypeID(cf), v29 == CFNumberGetTypeID()))
  {
    CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt32Type, &valuePtr);
    signed int v30 = *(_DWORD *)(DerivedStorage + 44) * valuePtr / 0x64;
    if (*(_DWORD *)(DerivedStorage + 40) < v30) {
      signed int v30 = *(_DWORD *)(DerivedStorage + 40);
    }
    *((_DWORD *)v21 + 27) = valuePtr - v30;
    if (gLogCategory_APAudioHoseManagerBuffered <= 50
      && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1) {
        CMBaseObjectGetDerivedStorage();
      }
      LogPrintF();
    }
    int CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
    CMTimeMake(&value, CFPreferenceNumberWithDefault, 1);
    *(CMTime *)(v21 + 116) = value;
    if (gLogCategory_APAudioHoseManagerBuffered <= 50
      && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1) {
        CMBaseObjectGetDerivedStorage();
      }
      CMTime value = *(CMTime *)(v21 + 116);
      CMTimeGetSeconds(&value);
      LogPrintF();
    }
    *((_DWORD *)v21 + 28) = *(_DWORD *)(DerivedStorage + 72) * valuePtr / 0x64;
    if (gLogCategory_APAudioHoseManagerBuffered <= 50
      && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1) {
        CMBaseObjectGetDerivedStorage();
      }
      LogPrintF();
    }
    audioHoseManagerBuffered_updateStartWatermarkTime(a1, a2);
    int v33 = valuePtr;
    if (*(_DWORD *)(DerivedStorage + 124) < valuePtr)
    {
      if (valuePtr >= 0x753000) {
        int v33 = 7680000;
      }
      *(_DWORD *)(DerivedStorage + 124) = v33;
      if (gLogCategory_APAudioHoseManagerBuffered <= 50
        && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
      {
        if (a1) {
          CMBaseObjectGetDerivedStorage();
        }
        LogPrintF();
      }
    }
    char v34 = *(unsigned char *)(DerivedStorage + 188);
    if (v34) {
      char v34 = APSIsFBOPropertyAvailable() != 0;
    }
    v21[9] = v34;
    if (gLogCategory_APAudioHoseManagerBuffered <= 50)
    {
      if (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize())
      {
        if (a1) {
          CMBaseObjectGetDerivedStorage();
        }
        LogPrintF();
      }
      if (gLogCategory_APAudioHoseManagerBuffered <= 50
        && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
      {
        if (a1) {
          CMBaseObjectGetDerivedStorage();
        }
        CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 192));
        LogPrintF();
      }
    }
    CMBaseObjectGetDerivedStorage();
    v57[0] = 0;
    v57[1] = v57;
    v57[2] = 0x2000000000;
    v57[3] = 0;
    if (a2)
    {
      value.CMTime value = MEMORY[0x1E4F143A8];
      *(void *)&value.CMTimeScale timescale = 0x40000000;
      value.CMTimeEpoch epoch = (CMTimeEpoch)__audioHoseManagerBuffered_setAllCryptorsForSingleHose_block_invoke;
      *(void *)&long long v44 = &unk_1E6895990;
      *((void *)&v44 + 1) = v57;
      *(void *)&long long v45 = a1;
      *((void *)&v45 + 1) = a2;
      CFDictionaryApplyBlock();
    }
    _Block_object_dispose(v57, 8);
    if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 186))
    {
      value.CMTime value = MEMORY[0x1E4F143A8];
      *(void *)&value.CMTimeScale timescale = 0x40000000;
      value.CMTimeEpoch epoch = (CMTimeEpoch)__audioHoseManagerBuffered_setAllMagicCookiesForSingleHose_block_invoke;
      *(void *)&long long v44 = &__block_descriptor_tmp_190;
      *((void *)&v44 + 1) = a2;
      *(void *)&long long v45 = a1;
      CFDictionaryApplyBlock();
    }
    if (v21[8] || !*(unsigned char *)(DerivedStorage + 186))
    {
      uint64_t v31 = 0;
    }
    else
    {
      if (gLogCategory_APAudioHoseManagerBuffered <= 50
        && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
      {
        if (a1) {
          CMBaseObjectGetDerivedStorage();
        }
        LogPrintF();
      }
      uint64_t v36 = *(unsigned __int8 *)(DerivedStorage + 185);
      APSEndpointStreamAudioHoseProtocolGetProtocolID();
      uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable && (uint64_t v38 = *(void *)(ProtocolVTable + 16)) != 0)
      {
        CFTypeRef v39 = *(uint64_t (**)(const void *, uint64_t))(v38 + 112);
        if (v39) {
          uint64_t v31 = v39(a2, v36);
        }
        else {
          uint64_t v31 = 4294954514;
        }
      }
      else
      {
        uint64_t v31 = 4294954508;
      }
    }
    *a4 = &audioHoseManagerBuffered_audioHoseRegistrarRegisterHose_callbacks;
  }
  else
  {
    APSLogErrorAt();
    uint64_t v31 = 4294960540;
  }
LABEL_104:
  if (cf) {
    CFRelease(cf);
  }
  return v31;
}

uint64_t audioHoseManagerBuffered_audioHoseRegistrarDeregisterHose(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1) {
      CMBaseObjectGetDerivedStorage();
    }
    CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 192));
    LogPrintF();
  }
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)(DerivedStorage + 192), a2))
  {
    audioHoseManagerBuffered_removeHoseFromDescriptors(a1, a2);
    if (CFDictionaryGetInt64())
    {
      *(unsigned char *)(DerivedStorage + 187) = 0;
      audioHoseManagerBuffered_setEchoCancellationIsEnabledToAllHoses();
    }
  }
  else
  {
    APSLogErrorAt();
  }
  return 0;
}

uint64_t audioHoseManagerBuffered_CopyAudioDataBBufsForHose(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v27 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  context[0] = a1;
  context[1] = a2;
  void context[2] = a3;
  void context[3] = a4;
  context[4] = &v27;
  if (!a2)
  {
    uint64_t v24 = 4294894845;
LABEL_67:
    APSLogErrorAt();
    return v24;
  }
  if (!a3)
  {
    uint64_t v24 = 4294894845;
    goto LABEL_67;
  }
  uint64_t v9 = DerivedStorage;
  if (gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  dispatch_sync_f(*(dispatch_queue_t *)(v9 + 168), context, (dispatch_function_t)audioHoseManagerBuffered_copyAudioDataBBufDispatchInternal);
  uint64_t v10 = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1D25EB370](*(void *)(v10 + 472));
  uint64_t v11 = CMBaseObjectGetDerivedStorage();
  uint64_t v54 = 0;
  long long v55 = &v54;
  uint64_t v56 = 0x2000000000;
  LODWORD(v57) = 0;
  uint64_t v50 = 0;
  long long v51 = &v50;
  uint64_t v52 = 0x2000000000;
  uint64_t v53 = -1;
  uint64_t v12 = mach_absolute_time();
  uint64_t v46 = 0;
  long long v47 = &v46;
  uint64_t v48 = 0x2000000000;
  char v49 = 0;
  v44[0] = 0;
  v44[1] = v44;
  v44[2] = 0x2000000000;
  char v45 = 0;
  v42[0] = 0;
  v42[1] = v42;
  CFTypeRef v42[2] = 0x2000000000;
  char v43 = 0;
  BOOL v13 = *(_DWORD *)(v11 + 260) == 0;
  if (!*(unsigned char *)(v11 + 328))
  {
    uint64_t v14 = v12;
    if (gLogCategory_APAudioHoseManagerBuffered <= 50
      && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1) {
        CMBaseObjectGetDerivedStorage();
      }
      LogPrintF();
    }
    uint64_t v28 = MEMORY[0x1E4F143A8];
    uint64_t v29 = 0x40000000;
    signed int v30 = __audioHoseManagerBuffered_UpdateHosesPrimed_block_invoke;
    uint64_t v31 = &unk_1E6895920;
    uint64_t v38 = v11;
    CFTypeRef v39 = a1;
    uint64_t v32 = &v46;
    int v33 = v44;
    BOOL v41 = v13;
    uint64_t v40 = v14;
    char v34 = v42;
    uint64_t v35 = &v54;
    uint64_t v36 = &v50;
    CFTypeRef v37 = a1;
    CFDictionaryApplyBlock();
    if (gLogCategory_APAudioHoseManagerBuffered <= 50
      && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1) {
        CMBaseObjectGetDerivedStorage();
      }
      CFDictionaryGetCount(*(CFDictionaryRef *)(v11 + 192));
      LogPrintF();
    }
  }
  uint64_t v15 = *((int *)v55 + 6);
  _Block_object_dispose(v42, 8);
  _Block_object_dispose(v44, 8);
  _Block_object_dispose(&v46, 8);
  _Block_object_dispose(&v50, 8);
  _Block_object_dispose(&v54, 8);
  uint64_t v16 = CMBaseObjectGetDerivedStorage();
  CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(v16 + 192));
  if (*(unsigned char *)(v16 + 328)) {
    goto LABEL_50;
  }
  CFIndex v18 = Count;
  if (gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  if (v18 == v15)
  {
    if (gLogCategory_APAudioHoseManagerBuffered > 50
      || gLogCategory_APAudioHoseManagerBuffered == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_49;
    }
    if (!a1)
    {
LABEL_48:
      LogPrintF();
LABEL_49:
      *(unsigned char *)(v16 + 328) = 1;
      goto LABEL_50;
    }
LABEL_37:
    CMBaseObjectGetDerivedStorage();
    goto LABEL_48;
  }
  if (v18 * *(int *)(v16 + 368) <= 100 * (int)v15)
  {
    if (gLogCategory_APAudioHoseManagerBuffered > 50
      || gLogCategory_APAudioHoseManagerBuffered == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_49;
    }
    if (!a1) {
      goto LABEL_48;
    }
    goto LABEL_37;
  }
LABEL_50:
  uint64_t v19 = CMBaseObjectGetDerivedStorage();
  uint64_t v54 = 0;
  long long v55 = &v54;
  uint64_t v56 = 0x2000000000;
  uint64_t v57 = 0;
  uint64_t v50 = 0;
  long long v51 = &v50;
  uint64_t v52 = 0x2000000000;
  uint64_t v53 = 0;
  uint64_t v46 = 0;
  long long v47 = &v46;
  uint64_t v48 = 0x2000000000;
  char v49 = 0;
  uint64_t v20 = mach_absolute_time();
  if (*(unsigned char *)(v19 + 328))
  {
    uint64_t v21 = v20;
    if (gLogCategory_APAudioHoseManagerBuffered <= 50
      && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1) {
        CMBaseObjectGetDerivedStorage();
      }
      LogPrintF();
    }
    uint64_t v28 = MEMORY[0x1E4F143A8];
    uint64_t v29 = 0x40000000;
    signed int v30 = __audioHoseManagerBuffered_UpdateHoseReadiness_block_invoke;
    uint64_t v31 = &unk_1E6895948;
    LODWORD(v38) = 0;
    uint64_t v32 = &v50;
    int v33 = &v46;
    char v34 = &v54;
    uint64_t v35 = (uint64_t *)v19;
    uint64_t v36 = a1;
    CFTypeRef v37 = (void *)v21;
    CFDictionaryApplyBlock();
  }
  uint64_t v22 = (const void *)v55[3];
  if (v22) {
    CFRelease(v22);
  }
  uint64_t v23 = (const void *)v51[3];
  if (v23) {
    CFRelease(v23);
  }
  _Block_object_dispose(&v46, 8);
  _Block_object_dispose(&v50, 8);
  _Block_object_dispose(&v54, 8);
  MEMORY[0x1D25EB390](*(void *)(v10 + 472));
  return v27;
}

uint64_t audioHoseManagerBuffered_setEchoCancellationIsEnabledToAllHoses()
{
  return CFDictionaryApplyBlock();
}

double audioHoseManagerBuffered_updateStartWatermarkTime(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTime v13 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CMTime v12 = v13;
  if (CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 192), a2)) {
    CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 192));
  }
  int CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  CMTimeMake(&v13, (uint64_t)(float)CFPreferenceNumberWithDefault, 1000);
  int v6 = FigGetCFPreferenceNumberWithDefault();
  CMTimeMake(&v12, (uint64_t)(float)v6, 1000);
  uint64_t v7 = (_OWORD *)(DerivedStorage + 48);
  CMTime time1 = v13;
  CMTime time2 = *(CMTime *)(DerivedStorage + 48);
  if (CMTimeCompare(&time1, &time2)
    && gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1) {
      CMBaseObjectGetDerivedStorage();
    }
    *(_OWORD *)&time1.CMTime value = *v7;
    time1.CMTimeEpoch epoch = *(void *)(DerivedStorage + 64);
    CMTimeGetSeconds(&time1);
    CMTime time1 = v13;
    CMTimeGetSeconds(&time1);
    LogPrintF();
  }
  uint64_t v8 = (_OWORD *)(DerivedStorage + 376);
  CMTime time1 = v12;
  CMTime time2 = *(CMTime *)(DerivedStorage + 376);
  if (CMTimeCompare(&time1, &time2)
    && gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1) {
      CMBaseObjectGetDerivedStorage();
    }
    *(_OWORD *)&time1.CMTime value = *v8;
    time1.CMTimeEpoch epoch = *(void *)(DerivedStorage + 392);
    CMTimeGetSeconds(&time1);
    CMTime time1 = v12;
    CMTimeGetSeconds(&time1);
    LogPrintF();
  }
  *uint64_t v7 = *(_OWORD *)&v13.value;
  *(void *)(DerivedStorage + 64) = v13.epoch;
  double result = *(double *)&v12.value;
  *uint64_t v8 = *(_OWORD *)&v12.value;
  *(void *)(DerivedStorage + 392) = v12.epoch;
  return result;
}

void audioHoseManagerBuffered_copyAudioDataBBufDispatchInternal(uint64_t a1)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(int *)(DerivedStorage + 208), MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
    APSLogErrorAt();
    int v29 = -72450;
    goto LABEL_119;
  }
  CFArrayRef v5 = Mutable;
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(const void **)(a1 + 8);
  uint64_t v8 = CMBaseObjectGetDerivedStorage();
  uint64_t v9 = MEMORY[0x1E4F1F9F8];
  CMTimeValue v40 = *MEMORY[0x1E4F1F9F8];
  CMTimeValue v49 = *MEMORY[0x1E4F1F9F8];
  CMTimeScale v39 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
  CMTimeScale timescale = v39;
  long long v37 = *MEMORY[0x1E4F1FA48];
  *(_OWORD *)&v41.CMTime value = *MEMORY[0x1E4F1FA48];
  CMTimeEpoch v10 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  v41.CMTimeEpoch epoch = v10;
  if (*(unsigned char *)(v8 + 36)) {
    goto LABEL_22;
  }
  uint64_t v11 = v8;
  Boolean Value = (int *)CFDictionaryGetValue(*(CFDictionaryRef *)(v8 + 192), v7);
  if (!Value)
  {
    if (gLogCategory_APAudioHoseManagerBuffered <= 60
      && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
    {
      if (v6) {
        CMBaseObjectGetDerivedStorage();
      }
      LogPrintF();
    }
    goto LABEL_22;
  }
  uint64_t v13 = (uint64_t)Value;
  if (Value[36] >= 1)
  {
    if (gLogCategory_APAudioHoseManagerBuffered <= 50
      && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
    {
      if (v6) {
        CMBaseObjectGetDerivedStorage();
      }
      LogPrintF();
    }
    char v14 = 0;
    *(unsigned char *)(v13 + 41) = 1;
    goto LABEL_117;
  }
  if (gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (v6) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  if (*(unsigned char *)(v13 + 40))
  {
    audioHoseManagerBuffered_logForSendRate(v6, v13, 0);
LABEL_22:
    char v14 = 0;
    goto LABEL_117;
  }
  uint64_t v30 = a1;
  CMTimeEpoch v31 = v10;
  if (gLogCategory_APAudioHoseManagerBuffered > 50) {
    goto LABEL_39;
  }
  if (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize())
  {
    if (v6) {
      CMBaseObjectGetDerivedStorage();
    }
    CMTime time = *(CMTime *)(v13 + 64);
    CMTimeGetSeconds(&time);
    LogPrintF();
  }
  if (gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (v6) {
      CMBaseObjectGetDerivedStorage();
    }
    CMTime time = *(CMTime *)(v11 + 212);
    CMTimeGetSeconds(&time);
    LogPrintF();
  }
  if (!*(unsigned char *)(v13 + 40))
  {
LABEL_39:
    CMBlockBufferRef v15 = 0;
    CFAllocatorRef structureAllocator = v3;
    CMTimeFlags v32 = *(_DWORD *)(v9 + 12);
    uint64_t v16 = (_OWORD *)(v13 + 64);
    CMTimeEpoch v38 = *(void *)(v9 + 16);
    int v33 = (_OWORD *)(v13 + 116);
    CFArrayRef v35 = v5;
    while (1)
    {
      if (!*(_DWORD *)(v11 + 208) || CFArrayGetCount(v5) >= *(int *)(v11 + 208))
      {
        if ((*(unsigned char *)(v11 + 224) & 1) == 0) {
          goto LABEL_105;
        }
        CMTime time = v41;
        CMTime time2 = *(CMTime *)(v11 + 212);
        if ((CMTimeCompare(&time, &time2) & 0x80000000) == 0) {
          goto LABEL_105;
        }
      }
      if (v15) {
        CFRelease(v15);
      }
      uint64_t v17 = CMBaseObjectGetDerivedStorage();
      *(_OWORD *)&v46.CMTime value = *(_OWORD *)v9;
      v46.CMTimeEpoch epoch = v38;
      long long v36 = *(_OWORD *)&v46.value;
      *(_OWORD *)&v45.CMTime value = *(_OWORD *)&v46.value;
      v45.CMTimeEpoch epoch = v38;
      uint64_t v43 = 0;
      CMBlockBufferRef blockBufferOut = 0;
      if (gLogCategory_APAudioHoseManagerBuffered <= 50
        && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
      {
        if (v6) {
          CMBaseObjectGetDerivedStorage();
        }
        LogPrintF();
      }
      CMTimeValue v49 = v40;
      CMTimeScale timescale = v39;
      CMTimeValue v18 = *(void *)(v17 + 264);
      CMTimeScale v19 = *(_DWORD *)(v17 + 272);
      int v52 = *(_DWORD *)(v17 + 284);
      uint64_t v51 = *(void *)(v17 + 276);
      MessageAtunsigned int Index = (OpaqueCMBlockBuffer *)APMessageRingBufferedGetMessageAtIndex(*(void *)(v17 + 200), *(unsigned __int16 *)(v13 + 10), (_DWORD *)&v43 + 1, (uint64_t)&v46, (uint64_t)&v45);
      if (!MessageAtIndex)
      {
        *(_OWORD *)&time.CMTime value = v36;
        time.CMTimeEpoch epoch = v38;
        APMessageRingBufferedGetLastValidReadIndexAndTimestamp(*(void *)(v17 + 200), &v43, (uint64_t)&time);
        if (gLogCategory_APAudioHoseManagerBuffered <= 50
          && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
        {
          if (v6) {
            CMBaseObjectGetDerivedStorage();
          }
          time2.CMTime value = v18;
          time2.CMTimeScale timescale = v19;
          *(void *)&time2.CMTimeFlags flags = v51;
          HIDWORD(time2.epoch) = v52;
          CMTimeGetSeconds(&time2);
          CMTime time2 = time;
          CMTimeGetSeconds(&time2);
          LogPrintF();
          CFArrayRef v5 = v35;
        }
        CMBlockBufferRef v15 = 0;
        CMTimeFlags flags = v32;
        CMTimeEpoch v27 = v38;
        goto LABEL_99;
      }
      uint64_t v21 = MessageAtIndex;
      size_t DataLength = CMBlockBufferGetDataLength(MessageAtIndex);
      CMBlockBufferCreateWithBufferReference(structureAllocator, v21, 0, DataLength, 0, &blockBufferOut);
      *(void *)(v13 + 56) += DataLength;
      CMTime time2 = v46;
      rhs.CMTime value = v18;
      rhs.CMTimeScale timescale = v19;
      *(void *)&rhs.CMTimeFlags flags = v51;
      HIDWORD(rhs.epoch) = v52;
      CMTimeSubtract(&time, &time2, &rhs);
      *uint64_t v16 = *(_OWORD *)&time.value;
      *(void *)(v13 + 80) = time.epoch;
      if (v45.flags)
      {
        *(_OWORD *)&time2.CMTime value = *v16;
        time2.CMTimeEpoch epoch = *(void *)(v13 + 80);
        CMTime rhs = v45;
        CMTimeAdd(&time, &time2, &rhs);
        *uint64_t v16 = *(_OWORD *)&time.value;
        CMTimeEpoch epoch = time.epoch;
      }
      else
      {
        *uint64_t v16 = v37;
        CMTimeEpoch epoch = v31;
      }
      *(void *)(v13 + 80) = epoch;
      *(_DWORD *)(v13 + 12) = HIDWORD(v43);
      CMTimeEpoch v24 = v46.epoch;
      *(_OWORD *)(v13 + 16) = *(_OWORD *)&v46.value;
      *(void *)(v13 + 32) = v24;
      ++*(void *)(v13 + 96);
      LOWORD(v24) = *(_WORD *)(v13 + 10) + 1;
      *(_WORD *)(v13 + 10) = v24;
      APMessageRingBufferedGetByteCountAtIndex(*(void *)(v17 + 200), (unsigned __int16)v24, (int *)(v13 + 88));
      if (gLogCategory_APAudioHoseManagerBuffered <= 50
        && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
      {
        if (v6) {
          CMBaseObjectGetDerivedStorage();
        }
        *(_OWORD *)&time.CMTime value = *v16;
        time.CMTimeEpoch epoch = *(void *)(v13 + 80);
        CMTimeGetSeconds(&time);
        *(_OWORD *)&time.CMTime value = *v33;
        time.CMTimeEpoch epoch = *(void *)(v13 + 132);
        CMTimeGetSeconds(&time);
        LogPrintF();
      }
      BOOL v25 = 0;
      if (*(_DWORD *)(v13 + 88) < *(_DWORD *)(v13 + 108))
      {
        *(_OWORD *)&time.CMTime value = *v16;
        time.CMTimeEpoch epoch = *(void *)(v13 + 80);
        *(_OWORD *)&time2.CMTime value = *v33;
        time2.CMTimeEpoch epoch = *(void *)(v13 + 132);
        if (CMTimeCompare(&time, &time2) < 1) {
          BOOL v25 = 1;
        }
      }
      if (gLogCategory_APAudioHoseManagerBuffered <= 50
        && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
      {
        if (v6) {
          CMBaseObjectGetDerivedStorage();
        }
        LogPrintF();
        if (v25) {
          goto LABEL_91;
        }
      }
      else if (v25)
      {
        goto LABEL_91;
      }
      *(_WORD *)(v13 + 40) = 257;
      if (gLogCategory_APAudioHoseManagerBuffered <= 50)
      {
        if (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize())
        {
          if (v6) {
            CMBaseObjectGetDerivedStorage();
          }
          CMTime time = v46;
          CMTimeGetSeconds(&time);
          *(_OWORD *)&time.CMTime value = *v16;
          time.CMTimeEpoch epoch = *(void *)(v13 + 80);
          CMTimeGetSeconds(&time);
          LogPrintF();
        }
LABEL_91:
        if (gLogCategory_APAudioHoseManagerBuffered <= 50
          && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
        {
          if (v6) {
            CMBaseObjectGetDerivedStorage();
          }
          *(_OWORD *)&time.CMTime value = *v16;
          time.CMTimeEpoch epoch = *(void *)(v13 + 80);
          CMTimeGetSeconds(&time);
          LogPrintF();
        }
      }
      CMBlockBufferRef v15 = blockBufferOut;
      CMBlockBufferRef blockBufferOut = 0;
      CMTimeValue v49 = v45.value;
      CMTimeFlags flags = v45.flags;
      CMTimeScale timescale = v45.timescale;
      CMTimeEpoch v27 = v45.epoch;
      audioHoseManagerBuffered_logForSendRate(v6, v13, DataLength);
      CFArrayRef v5 = v35;
LABEL_99:
      if (blockBufferOut) {
        CFRelease(blockBufferOut);
      }
      if (v15)
      {
        if (flags)
        {
          CMTime time = v41;
          time2.CMTime value = v49;
          time2.CMTimeScale timescale = timescale;
          time2.CMTimeFlags flags = flags;
          time2.CMTimeEpoch epoch = v27;
          CMTimeAdd(&v41, &time, &time2);
        }
        CFArrayAppendValue(v5, v15);
        uint64_t v9 = MEMORY[0x1E4F1F9F8];
        if (!*(unsigned char *)(v13 + 40)) {
          continue;
        }
      }
      goto LABEL_105;
    }
  }
  CMBlockBufferRef v15 = 0;
LABEL_105:
  if (gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (v6) {
      CMBaseObjectGetDerivedStorage();
    }
    CMTime time = *(CMTime *)(v11 + 236);
    CMTimeGetSeconds(&time);
    CMTime time = *(CMTime *)(v13 + 16);
    CMTimeGetSeconds(&time);
    CFArrayGetCount(v5);
    LogPrintF();
  }
  if (*(unsigned char *)(v11 + 248))
  {
    CMTime time = *(CMTime *)(v11 + 236);
    CMTime time2 = *(CMTime *)(v13 + 16);
    if (!CMTimeCompare(&time, &time2))
    {
      char v14 = 1;
      if (!v15) {
        goto LABEL_116;
      }
      goto LABEL_115;
    }
  }
  char v14 = *(unsigned char *)(v13 + 40);
  if (v15) {
LABEL_115:
  }
    CFRelease(v15);
LABEL_116:
  a1 = v30;
LABEL_117:
  **(void **)(a1 + 16) = v5;
  uint64_t v28 = *(char **)(a1 + 24);
  int v29 = 0;
  if (v28) {
    *uint64_t v28 = v14;
  }
LABEL_119:
  **(_DWORD **)(a1 + 32) = v29;
}

void audioHoseManagerBuffered_logForSendRate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = mach_absolute_time();
  uint64_t v8 = v7;
  __n128 v16 = *(__n128 *)MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v17 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  if (*(unsigned char *)(a2 + 8)) {
    unint64_t v9 = 10000;
  }
  else {
    unint64_t v9 = 100;
  }
  if (*(unsigned char *)(a2 + 40))
  {
    if (!*(unsigned char *)(a2 + 216))
    {
      uint64_t v10 = UpTicksToMilliseconds();
      uint64_t v11 = UpTicksToMilliseconds();
      if (v10 && v11 != 0)
      {
        if (gLogCategory_APAudioHoseManagerBuffered <= 50
          && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
        {
          if (a1) {
            CMBaseObjectGetDerivedStorage();
          }
          LogPrintF();
        }
        *(void *)(a2 + 200) = 0;
        *(void *)(a2 + 208) = 0;
        *(unsigned char *)(a2 + 216) = 1;
      }
    }
  }
  else
  {
    *(int32x2_t *)(a2 + 208) = vadd_s32(*(int32x2_t *)(a2 + 208), (int32x2_t)0x100000001);
    *(void *)(a2 + 200) += a3;
    if (*(unsigned char *)(a2 + 216))
    {
      *(void *)(a2 + 184) = v7;
      *(void *)(a2 + 192) = v7;
      *(unsigned char *)(a2 + 216) = 0;
    }
    else
    {
      if (!*(void *)(a2 + 184))
      {
        *(void *)(a2 + 184) = v7;
        *(void *)(a2 + 192) = v7;
      }
      unint64_t v13 = UpTicksToMilliseconds();
      uint64_t v14 = UpTicksToMilliseconds();
      if (v13 && v14 && v13 >= v9)
      {
        CMTime v19 = *(CMTime *)(DerivedStorage + 264);
        CMTime v18 = *(CMTime *)(a2 + 16);
        audioHoseManagerBuffered_getLastDeliveredRemoteMediaTimeForHose(a1, (uint64_t *)a2, &v16);
        if (gLogCategory_APAudioHoseManagerBuffered <= 50
          && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
        {
          if (a1) {
            CMBaseObjectGetDerivedStorage();
          }
          CMTime time = v18;
          CMTimeGetSeconds(&time);
          *(__n128 *)&time.CMTime value = v16;
          time.CMTimeEpoch epoch = v17;
          CMTimeGetSeconds(&time);
          CMTime time = v19;
          CMTimeGetSeconds(&time);
          LogPrintF();
        }
        *(_DWORD *)(a2 + 208) = 0;
        *(void *)(a2 + 192) = v8;
        *(void *)(a2 + 200) = 0;
      }
    }
  }
}

__n128 audioHoseManagerBuffered_getLastDeliveredRemoteMediaTimeForHose@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTime v20 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CFTypeRef v21 = 0;
  uint64_t v19 = 0;
  int v18 = 0;
  int v17 = 0;
  if (gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1) {
      CMBaseObjectGetDerivedStorage();
    }
    APMessageRingBufferedGetUsedCount(*(void *)(DerivedStorage + 200));
    CMTime time = *(CMTime *)(a2 + 2);
    CMTimeGetSeconds(&time);
    LogPrintF();
  }
  if (!*((unsigned char *)a2 + 9)
    || !APMessageRingBufferedGetUsedCount(*(void *)(DerivedStorage + 200))
    || (*((unsigned char *)a2 + 28) & 1) == 0)
  {
    goto LABEL_20;
  }
  uint64_t v7 = *a2;
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(unsigned int (**)(uint64_t, void, void, CFTypeRef *))(v9 + 48);
  if (!v10 || v10(v7, *MEMORY[0x1E4F49FE0], *MEMORY[0x1E4F1CF80], &v21)) {
    goto LABEL_19;
  }
  if (v21)
  {
    if (*(unsigned char *)(DerivedStorage + 186))
    {
      if (APSAPAPBBufDecodeHeader())
      {
LABEL_19:
        APSLogErrorAt();
LABEL_20:
        if (v21) {
          CFRelease(v21);
        }
        goto LABEL_34;
      }
    }
    else
    {
      if (APSTransportMessageGetBufferedAudioDataTimestamp()
        || APSTransportMessageGetBufferedAudioDataExtendedSequenceNumber())
      {
        goto LABEL_19;
      }
      CMTimeMake(&v20, a2[2] + (int)(HIDWORD(v19) - a2[2]), *((_DWORD *)a2 + 6));
    }
    APMessageRingBufferedGetFirstValidReadIndex(*(void *)(DerivedStorage + 200), &v18);
    if (((v18 - v19) & 0x800000) == 0 && ((v18 ^ v19) & 0xFFFFFF) != 0) {
      goto LABEL_20;
    }
    APMessageRingBufferedGetLastValidReadIndexAndTimestamp(*(void *)(DerivedStorage + 200), &v17, 0);
    if (((v17 - v19) & 0x800000) != 0 && ((v17 ^ v19) & 0xFFFFFF) != 0) {
      goto LABEL_20;
    }
    int v11 = *((_DWORD *)a2 + 3);
    if (((v11 - v19) & 0x800000) != 0 && ((v11 ^ v19) & 0xFFFFFF) != 0) {
      goto LABEL_20;
    }
    CMTime time = v20;
    CMTime time2 = *(CMTime *)(a2 + 2);
    int32_t v12 = CMTimeCompare(&time, &time2);
    if (v21) {
      CFRelease(v21);
    }
    if (v12 <= 0)
    {
      unint64_t v13 = (__n128 *)&v20;
      goto LABEL_35;
    }
  }
LABEL_34:
  unint64_t v13 = (__n128 *)MEMORY[0x1E4F1F9F8];
LABEL_35:
  __n128 result = *v13;
  *a3 = *v13;
  a3[1].n128_u64[0] = v13[1].n128_u64[0];
  return result;
}

__n128 audioHoseManagerBuffered_getBufferLevelTimeEstimateForHoseStartup@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, CMTime *a3@<X8>)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = MEMORY[0x1E4F1FA48];
  __n128 result = *(__n128 *)MEMORY[0x1E4F1FA48];
  *(_OWORD *)&a3->CMTimeValue value = *MEMORY[0x1E4F1FA48];
  a3->CMTimeEpoch epoch = *(void *)(v7 + 16);
  if (gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  if (*(unsigned char *)(DerivedStorage + 188) && a2->n128_u8[9])
  {
    CMTimeValue v17 = *(void *)(DerivedStorage + 264);
    CMTimeScale v18 = *(_DWORD *)(DerivedStorage + 272);
    CMTimeFlags v9 = *(_DWORD *)(DerivedStorage + 276);
    if (v9)
    {
      CMTimeEpoch v10 = *(void *)(DerivedStorage + 280);
      result.n128_u64[0] = audioHoseManagerBuffered_getLastDeliveredRemoteMediaTimeForHose(a1, (uint64_t *)a2, (__n128 *)&time1).n128_u64[0];
      CMTimeValue value = time1.value;
      CMTimeFlags flags = time1.flags;
      CMTimeScale timescale = time1.timescale;
      if (time1.flags)
      {
        CMTimeEpoch epoch = time1.epoch;
        time2.CMTimeEpoch epoch = time1.epoch;
        time1.CMTimeValue value = v17;
        time1.CMTimeScale timescale = v18;
        time1.CMTimeFlags flags = v9;
        time1.CMTimeEpoch epoch = v10;
        time2.CMTimeValue value = value;
        time2.CMTimeScale timescale = timescale;
        time2.CMTimeFlags flags = flags;
        if (CMTimeCompare(&time1, &time2) <= 0)
        {
          time2.CMTimeEpoch epoch = v10;
          time1.CMTimeValue value = value;
          time1.CMTimeScale timescale = timescale;
          time1.CMTimeFlags flags = flags;
          time1.CMTimeEpoch epoch = epoch;
          time2.CMTimeValue value = v17;
          time2.CMTimeScale timescale = v18;
          time2.CMTimeFlags flags = v9;
          CMTimeSubtract(a3, &time1, &time2);
          if (gLogCategory_APAudioHoseManagerBuffered <= 50
            && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
          {
            if (a1) {
              CMBaseObjectGetDerivedStorage();
            }
            CMTime time1 = *a3;
            CMTimeGetSeconds(&time1);
            LogPrintF();
          }
        }
      }
    }
  }
  else
  {
    __n128 result = a2[4];
    *(__n128 *)&a3->CMTimeValue value = result;
    a3->CMTimeEpoch epoch = a2[5].n128_i64[0];
  }
  return result;
}

BOOL audioHoseManagerBuffered_hoseBufferedToStartHighWaterMark(uint64_t a1, BOOL a2)
{
  uint64_t DerivedStorage = (CMTime *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  if (a2)
  {
    a2 = *(_DWORD *)(a2 + 88) >= *(_DWORD *)(a2 + 108)
      || (audioHoseManagerBuffered_getBufferLevelTimeEstimateForHoseStartup(a1, (__n128 *)a2, &time1),
          CMTime time2 = DerivedStorage[2],
          CMTimeCompare(&time1, &time2) >= 1);
    if (gLogCategory_APAudioHoseManagerBuffered <= 50
      && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1) {
        CMBaseObjectGetDerivedStorage();
      }
      LogPrintF();
    }
  }
  else
  {
    APSLogErrorAt();
  }
  return a2;
}

uint64_t __audioHoseManagerBuffered_setEchoCancellationIsEnabledToAllHoses_block_invoke(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  if (*(unsigned char *)(a1 + 32)) {
    uint64_t v4 = (uint64_t *)MEMORY[0x1E4F1CFD0];
  }
  else {
    uint64_t v4 = (uint64_t *)MEMORY[0x1E4F1CFC8];
  }
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v8 = *(void *)(VTable + 8);
  uint64_t result = VTable + 8;
  uint64_t v7 = v8;
  if (v8) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = 0;
  }
  CMTimeEpoch v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 56);
  if (v10)
  {
    uint64_t v11 = *MEMORY[0x1E4F49FB0];
    uint64_t v12 = *v4;
    return v10(v3, v11, v12);
  }
  return result;
}

uint64_t __audioHoseManagerBuffered_setAllCryptorsForSingleHose_block_invoke(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = (void *)result;
    uint64_t CryptorIDForCryptor = audioHoseManagerBuffered_getCryptorIDForCryptor(a2);
    CFArrayRef v5 = (const void *)v3[5];
    *(void *)(*(void *)(v3[4] + 8) + 24) = CryptorIDForCryptor;
    uint64_t result = audioHoseManagerBuffered_SetCryptorForSingleHose(v5, v3[6], a2, *(void *)(*(void *)(v3[4] + 8) + 24));
    if (result)
    {
      return APSLogErrorAt();
    }
  }
  return result;
}

uint64_t __audioHoseManagerBuffered_setAllMagicCookiesForSingleHose_block_invoke(uint64_t result, CFDataRef theData)
{
  if (theData)
  {
    uint64_t v2 = result;
    if (*(void *)(result + 32))
    {
      if (gLogCategory_APAudioHoseManagerBuffered <= 50
        && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
      {
        if (*(void *)(v2 + 40)) {
          CMBaseObjectGetDerivedStorage();
        }
        audioHoseManagerBuffered_getMagicCookieIDForMagicCookieData(theData);
        LogPrintF();
      }
      uint64_t v4 = *(const void **)(v2 + 40);
      if (v4) {
        CFRetain(v4);
      }
      uint64_t v5 = *(void *)(v2 + 32);
      uint64_t MagicCookieIDForMagicCookieData = audioHoseManagerBuffered_getMagicCookieIDForMagicCookieData(theData);
      uint64_t v7 = *(void *)(v2 + 40);
      APSEndpointStreamAudioHoseProtocolGetProtocolID();
      uint64_t result = CMBaseObjectGetProtocolVTable();
      if (result)
      {
        uint64_t v9 = *(void *)(result + 16);
        result += 16;
        uint64_t v8 = v9;
        if (v9)
        {
          CMTimeEpoch v10 = *(uint64_t (**)(uint64_t, uint64_t, CFDataRef, uint64_t (*)(uint64_t, uint64_t, int, uint64_t), uint64_t))(v8 + 104);
          if (v10)
          {
            uint64_t result = v10(v5, MagicCookieIDForMagicCookieData, theData, audioHoseManagerBuffered_hoseSetMagicCookieCallbackCompletionHandler, v7);
            if (!result) {
              return result;
            }
          }
          else
          {
            uint64_t result = audioHoseManagerBuffered_hoseSetMagicCookieCallbackCompletionHandler(v5, MagicCookieIDForMagicCookieData, -12782, v7);
          }
        }
      }
      if (gLogCategory_APAudioHoseManagerBuffered <= 90)
      {
        if (gLogCategory_APAudioHoseManagerBuffered != -1 || (uint64_t result = _LogCategory_Initialize(), result))
        {
          if (*(void *)(v2 + 40)) {
            CMBaseObjectGetDerivedStorage();
          }
          return LogPrintF();
        }
      }
    }
  }
  return result;
}

uint64_t audioHoseManagerBuffered_hoseSetMagicCookieCallbackCompletionHandler(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v9 = malloc_type_calloc(1uLL, 0x20uLL, 0x10200401C4E69EBuLL);
  if (v9)
  {
    *uint64_t v9 = a4;
    v9[1] = a1;
    v9[2] = a2;
    *((_DWORD *)v9 + 6) = a3;
    dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 168), v9, (dispatch_function_t)audioHoseManagerBuffered_hoseSetMagicCookieCallbackCompletionHandlerInternal);
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294894846;
  }
}

void audioHoseManagerBuffered_hoseSetMagicCookieCallbackCompletionHandlerInternal(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 192), *(const void **)(a1 + 8)))
  {
    if (gLogCategory_APAudioHoseManagerBuffered > 90
      || gLogCategory_APAudioHoseManagerBuffered == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_17;
    }
    if (!*(void *)a1) {
      goto LABEL_16;
    }
LABEL_25:
    CMBaseObjectGetDerivedStorage();
    goto LABEL_16;
  }
  if (!*(_DWORD *)(a1 + 24))
  {
    if (gLogCategory_APAudioHoseManagerBuffered > 50
      || gLogCategory_APAudioHoseManagerBuffered == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_17;
    }
    if (!*(void *)a1)
    {
LABEL_16:
      LogPrintF();
      goto LABEL_17;
    }
    goto LABEL_25;
  }
  if (gLogCategory_APAudioHoseManagerBuffered <= 90
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (!*(void *)a1) {
      goto LABEL_16;
    }
    goto LABEL_25;
  }
LABEL_17:
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  free((void *)a1);
}

void audioHoseManagerBuffered_removeHoseFromDescriptors(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 192), a2);
  if (gLogCategory_APAudioHoseManagerBuffered <= 40
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1) {
      CMBaseObjectGetDerivedStorage();
    }
    CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 192));
    LogPrintF();
  }
  audioHoseManagerBuffered_updateStartWatermarkTime(a1, a2);
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2000000000;
  int CFPreferenceNumberWithDefault = 0;
  int CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  CFDictionaryApplyBlock();
  unsigned int v6 = *((_DWORD *)v8 + 6);
  if (v6 >= 0x753000) {
    unsigned int v6 = 7680000;
  }
  *(_DWORD *)(v5 + 124) = v6;
  if (gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  _Block_object_dispose(&v7, 8);
}

void __audioHoseManagerBuffered_updateMaxAudioToBufferBytes_block_invoke(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  CFTypeRef cf = 0;
  unsigned int valuePtr = 0;
  uint64_t v4 = *a3;
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, void, void, CFTypeRef *))(v6 + 48);
  if (v7)
  {
    int v8 = v7(v4, *MEMORY[0x1E4F49F90], 0, &cf);
    CFTypeRef v9 = cf;
    if (v8) {
      BOOL v10 = 1;
    }
    else {
      BOOL v10 = cf == 0;
    }
    if (!v10)
    {
      CFTypeID v11 = CFGetTypeID(cf);
      CFTypeID TypeID = CFNumberGetTypeID();
      CFTypeRef v9 = cf;
      if (v11 == TypeID)
      {
        CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt32Type, &valuePtr);
        uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 8);
        unsigned int v14 = *(_DWORD *)(v13 + 24);
        if (v14 <= valuePtr) {
          unsigned int v14 = valuePtr;
        }
        *(_DWORD *)(v13 + 24) = v14;
        CFTypeRef v9 = cf;
      }
    }
    if (v9) {
      CFRelease(v9);
    }
  }
}

uint64_t audioHoseManagerBuffered_Flush()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 472));
  uint64_t v1 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)(DerivedStorage + 236) = *MEMORY[0x1E4F1F9F8];
  *(void *)(DerivedStorage + 252) = *(void *)(v1 + 16);
  CFDictionaryApplyBlock();
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 472));
  return 0;
}

uint64_t audioHoseManagerBuffered_FlushWithinSampleRange(uint64_t a1)
{
  if (gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  CFDictionaryApplyBlock();
  return 0;
}

uint64_t audioHoseManagerBuffered_WakeUpHoses(uint64_t a1)
{
  if (gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  CFDictionaryApplyBlock();
  return 0;
}

uint64_t audioHoseManagerBuffered_NotifyHosesDataAvailable(uint64_t a1)
{
  if (gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  CFDictionaryApplyBlock();
  return 0;
}

uint64_t audioHoseManagerBuffered_SetRateAndAnchorTime(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 472));
  CFDictionaryApplyBlock();
  *(_DWORD *)(DerivedStorage + 260) = a2;
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 472));
  return 0;
}

uint64_t audioHoseManagerBuffered_SetRate(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1) {
      CMBaseObjectGetDerivedStorage();
    }
    CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 192));
    LogPrintF();
  }
  if (CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 192)) == 1)
  {
    *(_DWORD *)(DerivedStorage + 260) = a2;
    CFDictionaryApplyBlock();
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return APSSignalErrorAt();
  }
}

uint64_t audioHoseManagerBuffered_GetAudioToBufferTimes(uint64_t a1, CMTime *a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTime v26 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  long long v18 = *MEMORY[0x1E4F1FA48];
  *(_OWORD *)&v25.CMTimeValue value = *MEMORY[0x1E4F1FA48];
  CMTimeEpoch v7 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  v25.CMTimeEpoch epoch = v7;
  CMTime v23 = *(CMTime *)(DerivedStorage + 100);
  uint64_t v19 = 0;
  CMTime v20 = (CMTime *)&v19;
  uint64_t v21 = 0x3000000000;
  CMTime v22 = v26;
  CMTime v24 = *(CMTime *)(DerivedStorage + 264);
  CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 192));
  if (gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  if (Count == 1)
  {
    uint64_t v10 = CMBaseObjectGetDerivedStorage();
    rhs.CMTimeValue value = 0;
    *(void *)&rhs.CMTimeScale timescale = &rhs;
    rhs.CMTimeEpoch epoch = 0x2000000000;
    char v31 = 0;
    MEMORY[0x1D25EB370](*(void *)(v10 + 472));
    if (CFDictionaryGetCount(*(CFDictionaryRef *)(v10 + 192)) == 1)
    {
      time.CMTimeValue value = MEMORY[0x1E4F143A8];
      *(void *)&time.CMTimeScale timescale = 0x40000000;
      time.CMTimeEpoch epoch = (CMTimeEpoch)__audioHoseManagerBuffered_SingularHoseIsLocal_block_invoke;
      uint64_t v28 = &unk_1E6895B38;
      p_CMTime rhs = &rhs;
      CFDictionaryApplyBlock();
    }
    else
    {
      APSLogErrorAt();
    }
    MEMORY[0x1D25EB390](*(void *)(v10 + 472));
    int v11 = *(unsigned __int8 *)(*(void *)&rhs.timescale + 24);
    _Block_object_dispose(&rhs, 8);
    if (v11)
    {
      CMTimeMake(&v26, 18, 1);
LABEL_17:
      CFDictionaryApplyBlock();
      goto LABEL_18;
    }
LABEL_16:
    CMTimeMake(&v26, 125, 1);
    uint64_t v12 = v20;
    uint64_t v13 = MEMORY[0x1E4F1FA10];
    *(_OWORD *)&v20[1].CMTimeValue value = *MEMORY[0x1E4F1FA10];
    v12[1].CMTimeEpoch epoch = *(void *)(v13 + 16);
    goto LABEL_17;
  }
  if (Count)
  {
    if (Count < 1) {
      goto LABEL_18;
    }
    goto LABEL_16;
  }
  CMTimeMake(&v26, 18, 1);
  CFTypeRef v9 = v20;
  *(_OWORD *)&v20[1].CMTimeValue value = v18;
  v9[1].CMTimeEpoch epoch = v7;
LABEL_18:
  if (gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1) {
      CMBaseObjectGetDerivedStorage();
    }
    CMTime time = v26;
    CMTimeGetSeconds(&time);
    CMTime time = v20[1];
    CMTimeGetSeconds(&time);
    LogPrintF();
  }
  unsigned int v14 = (_OWORD *)(DerivedStorage + 100);
  *(CMTime *)(DerivedStorage + 76) = v26;
  CMTime time = v20[1];
  CMTime rhs = *(CMTime *)(DerivedStorage + 400);
  CMTimeAdd(&v25, &time, &rhs);
  CMTime time = v25;
  CMTime rhs = *(CMTime *)(DerivedStorage + 128);
  if (CMTimeCompare(&time, &rhs) < 0
    || (CMTime time = v24, *(_OWORD *)&rhs.value = v18, rhs.epoch = v7, CMTimeCompare(&time, &rhs) <= 0))
  {
    *unsigned int v14 = *(_OWORD *)(DerivedStorage + 128);
    CMTimeEpoch epoch = *(void *)(DerivedStorage + 144);
  }
  else
  {
    *unsigned int v14 = *(_OWORD *)&v25.value;
    CMTimeEpoch epoch = v25.epoch;
  }
  *(void *)(DerivedStorage + 116) = epoch;
  CMTime time = v23;
  *(_OWORD *)&rhs.CMTimeValue value = *v14;
  rhs.CMTimeEpoch epoch = *(void *)(DerivedStorage + 116);
  if (CMTimeCompare(&time, &rhs)
    && gLogCategory_APAudioHoseManagerBuffered <= 30
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1) {
      CMBaseObjectGetDerivedStorage();
    }
    CMTime time = *(CMTime *)(DerivedStorage + 76);
    CMTimeGetSeconds(&time);
    *(_OWORD *)&time.CMTimeValue value = *v14;
    time.CMTimeEpoch epoch = *(void *)(DerivedStorage + 116);
    CMTimeGetSeconds(&time);
    LogPrintF();
  }
  *a2 = v26;
  CMTimeEpoch v16 = v20[1].epoch;
  *(_OWORD *)a3 = *(_OWORD *)&v20[1].value;
  *(void *)(a3 + 16) = v16;
  _Block_object_dispose(&v19, 8);
  return 0;
}

uint64_t audioHoseManagerBuffered_SetCryptor(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    context[0] = 0;
    context[1] = a1;
    void context[2] = a2;
    dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 168), context, (dispatch_function_t)audioHoseManagerBuffered_setCryptorForAllHosesDispatch);
    return LODWORD(context[0]);
  }
  else
  {
    APSLogErrorAt();
    return 4294894845;
  }
}

uint64_t audioHoseManagerBuffered_SetMagicCookie(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  CMTimeEpoch v7 = &v6;
  uint64_t v8 = 0x2000000000;
  int v9 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    if (*(unsigned char *)(DerivedStorage + 186)) {
      CFDictionaryApplyBlock();
    }
  }
  else
  {
    APSLogErrorAt();
    *((_DWORD *)v7 + 6) = -72451;
  }
  uint64_t v4 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v4;
}

uint64_t audioHoseManagerBuffered_GetIDForCryptor(uint64_t a1, uint64_t a2)
{
  return audioHoseManagerBuffered_getCryptorIDForCryptor(a2);
}

uint64_t audioHoseManagerBuffered_GetIDForMagicCookie(int a1, CFDataRef theData)
{
  return audioHoseManagerBuffered_getMagicCookieIDForMagicCookieData(theData);
}

uint64_t audioHoseManagerBuffered_AddCryptorToJar(uint64_t a1, uint64_t a2, CMTime *a3)
{
  uint64_t v14 = 0;
  CMBlockBufferRef v15 = &v14;
  uint64_t v16 = 0x2000000000;
  int v17 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CMTime time = *a3;
  CFDictionaryRef v8 = CMTimeCopyAsDictionary(&time, v7);
  int v9 = *(NSObject **)(DerivedStorage + 168);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __audioHoseManagerBuffered_AddCryptorToJar_block_invoke;
  block[3] = &unk_1E6895B88;
  void block[4] = &v14;
  void block[5] = DerivedStorage;
  void block[6] = a2;
  void block[7] = a1;
  void block[8] = v8;
  dispatch_sync(v9, block);
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v10 = *((unsigned int *)v15 + 6);
  _Block_object_dispose(&v14, 8);
  return v10;
}

uint64_t audioHoseManagerBuffered_AddMagicCookieToJar(uint64_t a1, uint64_t a2, CMTime *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CMTime time = *a3;
  CFDictionaryRef v7 = CMTimeCopyAsDictionary(&time, v6);
  CFDictionaryRef v8 = *(NSObject **)(DerivedStorage + 168);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __audioHoseManagerBuffered_AddMagicCookieToJar_block_invoke;
  block[3] = &__block_descriptor_tmp_264;
  void block[4] = DerivedStorage;
  void block[5] = a2;
  void block[6] = v7;
  dispatch_sync(v8, block);
  if (v7) {
    CFRelease(v7);
  }
  return 0;
}

uint64_t audioHoseManagerBuffered_ReleaseOldCryptorAndMagicCookie(uint64_t a1, long long *a2)
{
  uint64_t v10 = 0;
  int v11 = &v10;
  uint64_t v12 = 0x2000000000;
  int v13 = 0;
  uint64_t v4 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 168);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __audioHoseManagerBuffered_ReleaseOldCryptorAndMagicCookie_block_invoke;
  block[3] = &unk_1E6895BD0;
  void block[4] = &v10;
  void block[5] = a1;
  long long v8 = *a2;
  uint64_t v9 = *((void *)a2 + 2);
  dispatch_sync(v4, block);
  uint64_t v5 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v5;
}

uint64_t audioHoseManagerBuffered_ApplyVolumeFade()
{
  return 0;
}

uint64_t audioHoseManagerBuffered_Suspend(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2000000000;
  int v11 = 0;
  if (gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  if (CFDictionaryGetCount(*(CFDictionaryRef *)(v3 + 192)) <= 0)
  {
    APSLogErrorAt();
  }
  else
  {
    uint64_t v12 = MEMORY[0x1E4F143A8];
    uint64_t v13 = 0x40000000;
    uint64_t v14 = __audioHoseManagerBuffered_deregisterAllHoses_block_invoke;
    CMBlockBufferRef v15 = &__block_descriptor_tmp_273;
    uint64_t v16 = a1;
    CFDictionaryApplyBlock();
  }
  *((_DWORD *)v9 + 6) = 0;
  *(void *)(DerivedStorage + 320) = 0;
  *(unsigned char *)(DerivedStorage + 328) = 0;
  uint64_t v4 = *(NSObject **)(DerivedStorage + 168);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __audioHoseManagerBuffered_Suspend_block_invoke;
  block[3] = &unk_1E6895C18;
  void block[4] = &v8;
  void block[5] = a1;
  dispatch_sync(v4, block);
  uint64_t v5 = *((unsigned int *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  return v5;
}

uint64_t audioHoseManagerBuffered_hoseFlushCallbackCompletionHandler(const void *a1, int a2, _OWORD *a3, unsigned int a4, const void *a5)
{
  unsigned int v17 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  context[0] = a5;
  context[1] = a1;
  int v13 = a2;
  *(_OWORD *)uint64_t v14 = *a3;
  *(_OWORD *)&v14[12] = *(_OWORD *)((char *)a3 + 12);
  uint64_t v16 = &v17;
  uint64_t v15 = a4;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 168), context, (dispatch_function_t)audioHoseManagerBuffered_hoseFlushCallbackCompletionHandlerInternal);
  if (context[0]) {
    CFRelease(context[0]);
  }
  return v17;
}

uint64_t audioHoseManagerBuffered_hoseFlushCallbackCompletionHandlerInternal(uint64_t a1)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(result + 36))
  {
    uint64_t result = audioHoseManagerBuffered_getHoseDecriptorFromHose();
    if (result)
    {
      uint64_t v3 = result;
      --*(_DWORD *)(result + 144);
      if (*(_DWORD *)(a1 + 48))
      {
        if (gLogCategory_APAudioHoseManagerBuffered <= 90)
        {
          if (gLogCategory_APAudioHoseManagerBuffered != -1 || (uint64_t result = _LogCategory_Initialize(), result))
          {
            if (!*(void *)a1)
            {
LABEL_14:
              uint64_t result = LogPrintF();
              goto LABEL_19;
            }
LABEL_7:
            CMBaseObjectGetDerivedStorage();
            goto LABEL_14;
          }
        }
      }
      else
      {
        if (gLogCategory_APAudioHoseManagerBuffered <= 50)
        {
          if (gLogCategory_APAudioHoseManagerBuffered != -1 || (uint64_t result = _LogCategory_Initialize(), result))
          {
            if (*(void *)a1) {
              CMBaseObjectGetDerivedStorage();
            }
            uint64_t result = LogPrintF();
          }
        }
        uint64_t v4 = MEMORY[0x1E4F49F28];
        *(_OWORD *)(v3 + 148) = *MEMORY[0x1E4F49F28];
        *(_OWORD *)(v3 + 160) = *(_OWORD *)(v4 + 12);
      }
    }
    else if (gLogCategory_APAudioHoseManagerBuffered <= 90)
    {
      if (gLogCategory_APAudioHoseManagerBuffered != -1 || (uint64_t result = _LogCategory_Initialize(), result))
      {
        if (!*(void *)a1) {
          goto LABEL_14;
        }
        goto LABEL_7;
      }
    }
  }
LABEL_19:
  **(_DWORD **)(a1 + 56) = 0;
  return result;
}

uint64_t audioHoseManagerBuffered_getHoseDecriptorFromHose()
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v2 = 0;
  uint64_t v3 = &v2;
  uint64_t v4 = 0x2000000000;
  uint64_t v5 = 0;
  CFDictionaryApplyBlock();
  uint64_t v0 = v3[3];
  _Block_object_dispose(&v2, 8);
  return v0;
}

uint64_t __audioHoseManagerBuffered_getHoseDecriptorFromHose_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = FigCFEqual();
  if (result) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a3;
  }
  return result;
}

uint64_t audioHoseManagerBuffered_hoseFlushWithinSampleRangeCallbackCompletionHandler(const void *a1, int a2, _OWORD *a3, int a4, _OWORD *a5, unsigned int a6, const void *a7)
{
  unsigned int v23 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  context[0] = a7;
  context[1] = a1;
  int v17 = a2;
  *(_OWORD *)long long v18 = *a3;
  *(_OWORD *)&v18[12] = *(_OWORD *)((char *)a3 + 12);
  int v19 = a4;
  *(_OWORD *)CMTime v20 = *a5;
  *(_OWORD *)&v20[12] = *(_OWORD *)((char *)a5 + 12);
  CMTime v22 = &v23;
  uint64_t v21 = a6;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 168), context, (dispatch_function_t)audioHoseManagerBuffered_hoseFlushWithinSampleRangeCallbackCompletionHandlerInternal);
  if (context[0]) {
    CFRelease(context[0]);
  }
  return v23;
}

uint64_t audioHoseManagerBuffered_hoseFlushWithinSampleRangeCallbackCompletionHandlerInternal(uint64_t a1)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(result + 36)) {
    goto LABEL_18;
  }
  uint64_t result = audioHoseManagerBuffered_getHoseDecriptorFromHose();
  if (!result)
  {
    if (gLogCategory_APAudioHoseManagerBuffered > 90) {
      goto LABEL_18;
    }
    if (gLogCategory_APAudioHoseManagerBuffered == -1)
    {
      uint64_t result = _LogCategory_Initialize();
      if (!result) {
        goto LABEL_18;
      }
    }
    if (!*(void *)a1) {
      goto LABEL_17;
    }
LABEL_22:
    CMBaseObjectGetDerivedStorage();
    goto LABEL_17;
  }
  --*(_DWORD *)(result + 144);
  if (!*(_DWORD *)(a1 + 80))
  {
    if (gLogCategory_APAudioHoseManagerBuffered > 50) {
      goto LABEL_18;
    }
    if (gLogCategory_APAudioHoseManagerBuffered == -1)
    {
      uint64_t result = _LogCategory_Initialize();
      if (!result) {
        goto LABEL_18;
      }
    }
    if (!*(void *)a1)
    {
LABEL_17:
      uint64_t result = LogPrintF();
      goto LABEL_18;
    }
    goto LABEL_22;
  }
  if (gLogCategory_APAudioHoseManagerBuffered <= 90)
  {
    if (gLogCategory_APAudioHoseManagerBuffered != -1 || (uint64_t result = _LogCategory_Initialize(), result))
    {
      if (!*(void *)a1) {
        goto LABEL_17;
      }
      goto LABEL_22;
    }
  }
LABEL_18:
  **(_DWORD **)(a1 + 88) = 0;
  return result;
}

uint64_t audioHoseManagerBuffered_hoseSetRateAndAnchorTimeCallbackCompletionHandler(const void *a1, int a2, _OWORD *a3, long long *a4, _OWORD *a5, int a6, const void *a7)
{
  unsigned int v24 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  context[0] = a7;
  context[1] = a1;
  int v18 = a2;
  *(_OWORD *)int v19 = *a3;
  long long v15 = *a4;
  *(_OWORD *)&void v19[3] = *(_OWORD *)((char *)a3 + 12);
  *(_OWORD *)&v19[7] = v15;
  uint64_t v20 = *((void *)a4 + 2);
  *(_OWORD *)uint64_t v21 = *a5;
  *(_OWORD *)&v21[12] = *(_OWORD *)((char *)a5 + 12);
  int v22 = a6;
  unsigned int v23 = &v24;
  if (gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a7) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 168), context, (dispatch_function_t)audioHoseManagerBuffered_hoseSetRateAndAnchorTimeCallbackCompletionHandlerInternal);
  if (context[0]) {
    CFRelease(context[0]);
  }
  return v24;
}

void audioHoseManagerBuffered_hoseSetRateAndAnchorTimeCallbackCompletionHandlerInternal(uint64_t *a1)
{
  if (!*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 36))
  {
    uint64_t HoseDecriptorFromHose = audioHoseManagerBuffered_getHoseDecriptorFromHose();
    if (HoseDecriptorFromHose)
    {
      uint64_t v3 = HoseDecriptorFromHose;
      if (gLogCategory_APAudioHoseManagerBuffered <= 50
        && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
      {
        if (*a1) {
          CMBaseObjectGetDerivedStorage();
        }
        LogPrintF();
      }
      if (*((_DWORD *)a1 + 4))
      {
        uint64_t v4 = MEMORY[0x1E4F49F28];
        *(_OWORD *)(v3 + 148) = *MEMORY[0x1E4F49F28];
        *(_OWORD *)(v3 + 160) = *(_OWORD *)(v4 + 12);
        if (*((_DWORD *)a1 + 25))
        {
          unsigned int v5 = *(_DWORD *)(v3 + 140) + 1;
          *(_DWORD *)(v3 + 140) = v5;
          if (gLogCategory_APAudioHoseManagerBuffered <= 90)
          {
            if (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize())
            {
              if (*a1) {
                CMBaseObjectGetDerivedStorage();
              }
              LogPrintF();
            }
            unsigned int v5 = *(_DWORD *)(v3 + 140);
          }
          if (v5 >= 0x32)
          {
            uint64_t v7 = *a1;
            CMBaseObjectGetDerivedStorage();
            if (audioHoseManagerBuffered_getHoseDecriptorFromHose())
            {
              if (gLogCategory_APAudioHoseManagerBuffered <= 90
                && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
              {
                if (v7) {
                  CMBaseObjectGetDerivedStorage();
                }
                LogPrintF();
              }
              CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              if (!Mutable)
              {
                CMNotificationCenterGetDefaultLocalCenter();
                FigDispatchAsyncPostNotification();
                goto LABEL_58;
              }
              CFAllocatorRef v6 = Mutable;
              FigCFDictionarySetInt32();
              CFDictionarySetValue(v6, (const void *)*MEMORY[0x1E4F212C8], @"Too many retries setting the rate to 1");
              CMNotificationCenterGetDefaultLocalCenter();
              FigDispatchAsyncPostNotification();
              goto LABEL_57;
            }
            if (gLogCategory_APAudioHoseManagerBuffered <= 90
              && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
            {
              if (!v7) {
                goto LABEL_51;
              }
              goto LABEL_68;
            }
          }
        }
        else
        {
          *(_DWORD *)(v3 + 140) = 0;
          if (gLogCategory_APAudioHoseManagerBuffered <= 50
            && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
          {
            if (!*a1)
            {
LABEL_51:
              LogPrintF();
              goto LABEL_58;
            }
LABEL_68:
            CMBaseObjectGetDerivedStorage();
            goto LABEL_51;
          }
        }
      }
      else
      {
        if (*((_DWORD *)a1 + 25))
        {
          if (gLogCategory_APAudioHoseManagerBuffered <= 90
            && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
          {
            if (*a1) {
              CMBaseObjectGetDerivedStorage();
            }
            LogPrintF();
          }
          CFAllocatorRef v6 = 0;
        }
        else
        {
          CFAllocatorRef v6 = (__CFDictionary *)APSAudioTransportTimeCopyDebugDesc();
          if (gLogCategory_APAudioHoseManagerBuffered <= 50
            && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
          {
            if (*a1) {
              CMBaseObjectGetDerivedStorage();
            }
            LogPrintF();
          }
        }
        if (!*(_DWORD *)(v3 + 144))
        {
          long long v8 = *(_OWORD *)(a1 + 9);
          *(_OWORD *)(v3 + 160) = *(_OWORD *)((char *)a1 + 84);
          *(_OWORD *)(v3 + 148) = v8;
        }
        if (v6) {
LABEL_57:
        }
          CFRelease(v6);
      }
    }
    else if (gLogCategory_APAudioHoseManagerBuffered <= 90 {
           && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
    }
    {
      if (!*a1) {
        goto LABEL_51;
      }
      goto LABEL_68;
    }
  }
LABEL_58:
  *(_DWORD *)a1[13] = 0;
}

uint64_t audioHoseManagerBuffered_hoseSetRateCallbackCompletionHandler(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t HoseDecriptorFromHose = audioHoseManagerBuffered_getHoseDecriptorFromHose();
  if (HoseDecriptorFromHose)
  {
    uint64_t v10 = *(void *)(a3 + 16);
    *(_OWORD *)(a5 + 56) = *(_OWORD *)a3;
    *(void *)(a5 + 72) = v10;
    *(void *)(a5 + 80) = HoseDecriptorFromHose;
    *(_DWORD *)(a5 + 88) = a4;
    dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 168), (void *)a5, (dispatch_function_t)audioHoseManagerBuffered_hoseSetRateCallbackCompletionHandlerInternal);
    int v11 = *(const void **)(a5 + 16);
    if (v11) {
      CFRelease(v11);
    }
    free((void *)a5);
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return APSSignalErrorAt();
  }
}

uint64_t audioHoseManagerBuffered_hoseSetRateCallbackCompletionHandlerInternal(uint64_t *a1)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  int v3 = *((_DWORD *)a1 + 22);
  if (!v3)
  {
    if (gLogCategory_APAudioHoseManagerBuffered > 50) {
      goto LABEL_22;
    }
    if (gLogCategory_APAudioHoseManagerBuffered == -1)
    {
      uint64_t result = _LogCategory_Initialize();
      if (!result) {
        goto LABEL_22;
      }
    }
    if (!a1[2]) {
      goto LABEL_21;
    }
    goto LABEL_6;
  }
  if (v3 == 200501)
  {
    if (gLogCategory_APAudioHoseManagerBuffered > 90) {
      goto LABEL_22;
    }
    if (gLogCategory_APAudioHoseManagerBuffered == -1)
    {
      uint64_t result = _LogCategory_Initialize();
      if (!result) {
        goto LABEL_22;
      }
    }
    if (!a1[2]) {
      goto LABEL_21;
    }
LABEL_6:
    CMBaseObjectGetDerivedStorage();
LABEL_21:
    uint64_t result = LogPrintF();
    goto LABEL_22;
  }
  uint64_t v4 = result;
  if (gLogCategory_APAudioHoseManagerBuffered <= 90
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1[2]) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  uint64_t v9 = a1[10];
  unsigned int v10 = *(_DWORD *)(v9 + 140);
  if (v10 >= 0x32 || *(_DWORD *)(v4 + 260) != 1 || *(_DWORD *)(v9 + 44) != 1)
  {
    uint64_t result = APSLogErrorAt();
LABEL_22:
    unsigned int v5 = (uint64_t (*)(uint64_t, unsigned char *, unsigned char *, uint64_t, uint64_t))a1[1];
    if (v5)
    {
      uint64_t v6 = a1[2];
      uint64_t v7 = *((unsigned int *)a1 + 22);
      uint64_t v8 = *a1;
      *(_OWORD *)int v22 = *(_OWORD *)((char *)a1 + 28);
      *(_OWORD *)&v22[12] = *(_OWORD *)(a1 + 5);
      *(_OWORD *)uint64_t v21 = *(_OWORD *)(a1 + 7);
      *(void *)&v21[16] = a1[9];
      return v5(v6, v22, v21, v7, v8);
    }
    return result;
  }
  *(_DWORD *)(v9 + 140) = v10 + 1;
  if (gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1[2]) {
      CMBaseObjectGetDerivedStorage();
    }
    LogPrintF();
  }
  int v11 = (char *)malloc_type_calloc(1uLL, 0x60uLL, 0x10A0040428D2481uLL);
  CFTypeRef v12 = (CFTypeRef)a1[2];
  if (v12) {
    CFTypeRef v12 = CFRetain(v12);
  }
  *((void *)v11 + 2) = v12;
  *(_OWORD *)int v11 = *(_OWORD *)a1;
  *((_DWORD *)v11 + 6) = *((_DWORD *)a1 + 6);
  long long v13 = *(_OWORD *)((char *)a1 + 28);
  *(_OWORD *)(v11 + 40) = *(_OWORD *)(a1 + 5);
  *(_OWORD *)(v11 + 28) = v13;
  usleep(0x186A0u);
  uint64_t v14 = (const void *)a1[2];
  if (v14) {
    CFRetain(v14);
  }
  long long v15 = (uint64_t *)a1[10];
  uint64_t v16 = *v15;
  uint64_t v17 = *((unsigned int *)v15 + 11);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)(v11 + 28);
  *(_OWORD *)&v21[12] = *(_OWORD *)(v11 + 40);
  APSEndpointStreamAudioHoseProtocolGetProtocolID();
  uint64_t result = CMBaseObjectGetProtocolVTable();
  if (result)
  {
    uint64_t v19 = *(void *)(result + 16);
    result += 16;
    uint64_t v18 = v19;
    if (v19)
    {
      uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, unsigned char *, uint64_t (*)(void), char *))(v18 + 80);
      if (v20)
      {
        *(_OWORD *)int v22 = *(_OWORD *)v21;
        *(_OWORD *)&v22[12] = *(_OWORD *)&v21[12];
        return v20(v16, v17, v22, audioHoseManagerBuffered_hoseSetRateCallbackCompletionHandler, v11);
      }
      else
      {
        return audioHoseManagerBuffered_hoseSetRateCallbackCompletionHandler(v16);
      }
    }
  }
  return result;
}

uint64_t audioHoseManagerBuffered_setCryptorForAllHosesDispatch(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = audioHoseManagerBuffered_setCryptorForAllHoses(*(void *)(a1 + 8), *(void *)(a1 + 16));
  int v4 = result;
  if (result) {
    uint64_t result = APSLogErrorAt();
  }
  else {
    *(void *)(DerivedStorage + 320) = *(void *)(a1 + 16);
  }
  *(_DWORD *)a1 = v4;
  return result;
}

void __audioHoseManagerBuffered_deregisterAllHoses_block_invoke(uint64_t a1, uint64_t a2, const void **a3)
{
}

_OWORD *hoseManagerBuffered_hoseDescriptorDictionaryRetain(uint64_t a1, long long *a2)
{
  if (a2)
  {
    int v3 = malloc_type_calloc(1uLL, 0xF8uLL, 0x106004011576FA2uLL);
    long long v4 = a2[3];
    long long v6 = *a2;
    long long v5 = a2[1];
    v3[2] = a2[2];
    v3[3] = v4;
    _OWORD *v3 = v6;
    v3[1] = v5;
    long long v7 = a2[7];
    long long v9 = a2[4];
    long long v8 = a2[5];
    v3[6] = a2[6];
    v3[7] = v7;
    v3[4] = v9;
    v3[5] = v8;
    long long v10 = a2[11];
    long long v12 = a2[8];
    long long v11 = a2[9];
    v3[10] = a2[10];
    v3[11] = v10;
    v3[8] = v12;
    v3[9] = v11;
    long long v14 = a2[13];
    long long v13 = a2[14];
    long long v15 = a2[12];
    *((void *)v3 + 30) = *((void *)a2 + 30);
    v3[13] = v14;
    v3[14] = v13;
    v3[12] = v15;
    CFTypeRef v16 = (CFTypeRef)*((void *)a2 + 28);
    if (v16) {
      CFTypeRef v16 = CFRetain(v16);
    }
    *((void *)v3 + 28) = v16;
    CFTypeRef v17 = *(CFTypeRef *)a2;
    if (*(void *)a2) {
      CFTypeRef v17 = CFRetain(v17);
    }
    *(void *)int v3 = v17;
  }
  else
  {
    APSLogErrorAt();
    return 0;
  }
  return v3;
}

void hoseManagerBuffered_hoseDescriptorDictionaryRelease(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    CFTypeRef v4 = *(CFTypeRef *)a2;
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    long long v7 = *(void (**)(CFTypeRef, void, void))(v6 + 56);
    if (v7) {
      v7(v4, *MEMORY[0x1E4F49FD8], *MEMORY[0x1E4F1CFC8]);
    }
    if (*(void *)a2) {
      CFRelease(*(CFTypeRef *)a2);
    }
    long long v8 = *(const void **)(a2 + 224);
    if (v8) {
      CFRelease(v8);
    }
    free((void *)a2);
  }
  else
  {
    APSLogErrorAt();
  }
}

uint64_t SPEndpointDescriptionCreateWithTransportDevice(uint64_t a1, const void *a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    uint64_t v10 = 4294895545;
    APSLogErrorAt();
    return v10;
  }
  if (!a3)
  {
    uint64_t v10 = 4294895545;
LABEL_16:
    APSLogErrorAt();
    return v10;
  }
  APEndpointDescriptionGetClassID();
  uint64_t v5 = CMDerivedObjectCreate();
  if (v5)
  {
    uint64_t v10 = v5;
    goto LABEL_16;
  }
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  *uint64_t DerivedStorage = CFRetain(a2);
  AdvertiserInfo = (const void *)APTransportDeviceGetAdvertiserInfo();
  DerivedStorage[1] = AdvertiserInfo;
  if (!AdvertiserInfo) {
    return APSSignalErrorAt();
  }
  CFRetain(AdvertiserInfo);
  uint64_t v8 = FigSimpleMutexCreate();
  DerivedStorage[2] = v8;
  if (v8 && (SNPrintF(), dispatch_queue_t v9 = dispatch_queue_create(label, 0), (DerivedStorage[3] = v9) != 0))
  {
    if (gLogCategory_SPEndpointDescription <= 30
      && (gLogCategory_SPEndpointDescription != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    uint64_t v10 = 0;
    *a3 = 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294895546;
  }
  return v10;
}

uint64_t spDescription_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPEndpointDescription <= 30
    && (gLogCategory_SPEndpointDescription != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  uint64_t v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 8) = 0;
  }
  uint64_t v2 = *(NSObject **)(DerivedStorage + 24);
  if (v2)
  {
    dispatch_release(v2);
    *(void *)(DerivedStorage + 24) = 0;
  }
  return FigSimpleMutexDestroy();
}

__CFString *spDescription_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t v6 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  spDescription_copyName(a1, (uint64_t *)&v6);
  CFTypeRef v4 = v6;
  CFStringAppendFormat(Mutable, 0, @"<SPEndpointDescription %p, name=%@, advertiserInfo=%@>", a1, v6, *(void *)(DerivedStorage + 8));
  if (v4) {
    CFRelease(v4);
  }
  return Mutable;
}

uint64_t spDescription_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, uint64_t *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPEndpointDescription <= 30
    && (gLogCategory_SPEndpointDescription != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!a2)
  {
    uint64_t v13 = 4294895545;
LABEL_28:
    APSLogErrorAt();
    return v13;
  }
  if (!a4)
  {
    uint64_t v13 = 4294895545;
    goto LABEL_28;
  }
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 16));
  unsigned int v16 = 0;
  dispatch_queue_t v9 = (const void **)CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, @"DeviceID"))
  {
    if (CFEqual(a2, @"TransportDevice"))
    {
      long long v11 = *v9;
LABEL_12:
      uint64_t v12 = (uint64_t)CFRetain(v11);
LABEL_13:
      *a4 = v12;
      goto LABEL_14;
    }
    if (CFEqual(a2, @"Name"))
    {
      unsigned int v10 = spDescription_copyName(a1, a4);
      goto LABEL_9;
    }
    if (CFEqual(a2, @"Manufacturer") || CFEqual(a2, @"Model") || CFEqual(a2, @"SerialNumber"))
    {
      uint64_t v12 = APAdvertiserInfoCopyProperty();
      goto LABEL_13;
    }
    if (CFEqual(a2, @"SourceVersion"))
    {
      unsigned int v10 = spDescription_copySourceVersion(a1, a4);
      goto LABEL_9;
    }
    if (CFEqual(a2, @"MACAddress"))
    {
      unsigned int v10 = spDescription_copyMACAddress(a1, a3, (CFDataRef *)a4);
      goto LABEL_9;
    }
    if (!CFEqual(a2, @"SupportsBufferedAudio") && !CFEqual(a2, @"HasUnifiedAdvertiserInfo"))
    {
      if (CFEqual(a2, @"SupportedAudioFormats"))
      {
        unsigned int v10 = spDescription_copyAudioFormats(a3, (CFMutableDictionaryRef *)a4);
        goto LABEL_9;
      }
      if (!CFEqual(a2, @"SupportsCoreUtilsPairingAndEncryption"))
      {
        if (CFEqual(a2, @"SupportsAudioMediaDataControl"))
        {
LABEL_37:
          long long v15 = (const void **)MEMORY[0x1E4F1CFC8];
          goto LABEL_32;
        }
        if (!CFEqual(a2, @"SupportsReceiverChoosesAnchor"))
        {
          if (!CFEqual(a2, @"SupportsAudioStreamConnectionSetup"))
          {
            if (gLogCategory_SPEndpointDescription <= 30
              && (gLogCategory_SPEndpointDescription != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            unsigned int v16 = -12784;
            goto LABEL_14;
          }
          goto LABEL_37;
        }
      }
    }
    long long v15 = (const void **)MEMORY[0x1E4F1CFD0];
LABEL_32:
    long long v11 = *v15;
    goto LABEL_12;
  }
  unsigned int v10 = spDescription_copyDeviceID(a1, a4);
LABEL_9:
  unsigned int v16 = v10;
LABEL_14:
  uint64_t v13 = v16;
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 16));
  return v13;
}

uint64_t spDescription_SetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPEndpointDescription <= 30
    && (gLogCategory_SPEndpointDescription != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!a2)
  {
    uint64_t v6 = 4294895545;
LABEL_15:
    APSLogErrorAt();
    return v6;
  }
  if (!a3)
  {
    uint64_t v6 = 4294895545;
    goto LABEL_15;
  }
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 16));
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPEndpointDescription <= 30
    && (gLogCategory_SPEndpointDescription != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 16));
  return 0;
}

uint64_t spDescription_copyName(uint64_t a1, uint64_t *a2)
{
  *a2 = APAdvertiserInfoCopyProperty();
  return 0;
}

uint64_t spDescription_copyDeviceID(uint64_t a1, uint64_t *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  *(_OWORD *)cStr = 0u;
  long long v7 = 0u;
  uint64_t v4 = APAdvertiserInfoCopyProperty();
  if (v4
    || (uint64_t v4 = *DerivedStorage) == 0
    || (APTransportDeviceGetDiscoveryID(),
        CFGetInt64(),
        SNPrintF(),
        (uint64_t v4 = (uint64_t)CFStringCreateWithCString(0, cStr, 0x8000100u)) != 0))
  {
    *a2 = v4;
  }
  else
  {
    APSLogErrorAt();
  }
  return 0;
}

uint64_t spDescription_copySourceVersion(uint64_t a1, uint64_t *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  CMBaseObjectGetDerivedStorage();
  memset(v8, 0, sizeof(v8));
  CFStringRef v3 = (const __CFString *)APAdvertiserInfoCopyProperty();
  CFStringRef v4 = v3;
  if (v3)
  {
    if (!CFStringGetCString(v3, (char *)v8, 256, 0x8000100u))
    {
      APSLogErrorAt();
      uint64_t v6 = 4294960534;
      goto LABEL_6;
    }
    TextToSourceVersion();
  }
  uint64_t Int64 = CFNumberCreateInt64();
  if (!Int64)
  {
    APSLogErrorAt();
    uint64_t v6 = 4294960534;
    if (!v4) {
      return v6;
    }
    goto LABEL_6;
  }
  uint64_t v6 = 0;
  *a2 = Int64;
  if (v4) {
LABEL_6:
  }
    CFRelease(v4);
  return v6;
}

uint64_t spDescription_copyMACAddress(uint64_t a1, const __CFAllocator *a2, CFDataRef *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  CMBaseObjectGetDerivedStorage();
  CFStringRef theString = 0;
  uint64_t v6 = spDescription_copyDeviceID(a1, (uint64_t *)&theString);
  if (v6)
  {
    uint64_t v10 = v6;
    APSLogErrorAt();
    CFStringRef v7 = theString;
    if (!theString) {
      return v10;
    }
    goto LABEL_7;
  }
  CFStringRef v7 = theString;
  if (!theString)
  {
    uint64_t v10 = 4294895543;
    APSLogErrorAt();
    return v10;
  }
  if (CFStringGetCString(theString, buffer, 64, 0x8000100u))
  {
    uint64_t v8 = TextToHardwareAddress();
    if (!v8)
    {
      CFDataRef v9 = CFDataCreate(a2, bytes, 6);
      if (v9)
      {
        uint64_t v10 = 0;
        *a3 = v9;
      }
      else
      {
        APSLogErrorAt();
        uint64_t v10 = 4294895546;
      }
      goto LABEL_7;
    }
    uint64_t v10 = v8;
  }
  else
  {
    uint64_t v10 = 4294895543;
  }
  APSLogErrorAt();
LABEL_7:
  CFRelease(v7);
  return v10;
}

uint64_t spDescription_copyAudioFormats(const __CFAllocator *a1, CFMutableDictionaryRef *a2)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableDictionaryRef v4 = Mutable;
    CFDictionarySetInt64();
    uint64_t result = 0;
    *a2 = v4;
  }
  else
  {
    APSLogErrorAt();
    return 4294895546;
  }
  return result;
}

uint64_t spDescription_CopyFeatures(uint64_t a1, uint64_t *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPEndpointDescription <= 30
    && (gLogCategory_SPEndpointDescription != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a2)
  {
    MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 16));
    CMBaseObjectGetDerivedStorage();
    *a2 = APAdvertiserInfoCopyProperty();
    uint64_t v4 = 0;
    MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 16));
  }
  else
  {
    APSLogErrorAt();
    return 4294895545;
  }
  return v4;
}

uint64_t spDescription_HasFeature()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPEndpointDescription <= 30
    && (gLogCategory_SPEndpointDescription != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 16));
  CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  uint64_t v1 = (const void *)APAdvertiserInfoCopyProperty();
  uint64_t HasFeature = APSFeaturesHasFeature();
  if (v1) {
    CFRelease(v1);
  }
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 16));
  return HasFeature;
}

uint64_t spDescription_DescribesSameTransportDevice()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 16));
  uint64_t IsSameDevice = APTransportDeviceIsSameDevice();
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 16));
  return IsSameDevice;
}

uint64_t SPEndpointCreateWithEndpointDescription(uint64_t a1, const void *a2, const __CFDictionary *a3, CFTypeRef *a4)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  CFTypeRef v67 = 0;
  CFTypeRef cf = 0;
  if (a2 && a4)
  {
    FigEndpointExtendedGetClassID();
    uint64_t v8 = CMDerivedObjectCreate();
    if (v8)
    {
      uint64_t v30 = v8;
      goto LABEL_19;
    }
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    CFTypeRef v10 = CFRetain(a2);
    DerivedStorage[30] = v10;
    uint64_t CMBaseObject = APEndpointDescriptionGetCMBaseObject(v10);
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    long long v14 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v13 + 48);
    if (!v14)
    {
      uint64_t v30 = 4294954514;
      goto LABEL_19;
    }
    uint64_t v15 = v14(CMBaseObject, @"Name", a1, &v67);
    if (v15)
    {
      uint64_t v30 = v15;
      goto LABEL_19;
    }
    uint64_t v16 = FigSimpleMutexCreate();
    DerivedStorage[5] = v16;
    if (v16)
    {
      SNPrintF();
      dispatch_queue_t v17 = dispatch_queue_create(label, 0);
      DerivedStorage[35] = v17;
      if (v17)
      {
        SNPrintF();
        dispatch_queue_t v18 = dispatch_queue_create(label, 0);
        DerivedStorage[1] = v18;
        if (v18)
        {
          SNPrintF();
          dispatch_queue_t v19 = dispatch_queue_create(label, 0);
          DerivedStorage[2] = v19;
          if (v19)
          {
            SNPrintF();
            dispatch_queue_t v20 = dispatch_queue_create(label, 0);
            *uint64_t DerivedStorage = v20;
            if (v20)
            {
              MEMORY[0x1D25EB370](DerivedStorage[5]);
              CFTypeRef v21 = cf;
              uint64_t v22 = CMBaseObjectGetDerivedStorage();
              CFTypeRef v70 = 0;
              *(void *)label = 0;
              CFTypeRef v69 = 0;
              if (*(unsigned char *)(v22 + 48))
              {
                uint64_t v30 = 0;
                CFMutableDictionaryRef Mutable = 0;
                goto LABEL_61;
              }
              unsigned int v23 = (void *)v22;
              CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              if (Mutable)
              {
                uint64_t v25 = v23[30];
                CFAllocatorRef v26 = CFGetAllocator(v21);
                uint64_t v27 = APEndpointDescriptionGetCMBaseObject(v25);
                uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 8);
                if (v28) {
                  uint64_t v29 = v28;
                }
                else {
                  uint64_t v29 = 0;
                }
                char v31 = *(uint64_t (**)(uint64_t, __CFString *, CFAllocatorRef, char *))(v29 + 48);
                if (v31)
                {
                  uint64_t v32 = v31(v27, @"DeviceID", v26, label);
                  if (v32)
                  {
                    uint64_t v30 = v32;
                  }
                  else
                  {
                    if (*(void *)label && !FigCFEqual())
                    {
                      if (gLogCategory_SPEndpoint <= 50
                        && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
                      {
                        LogPrintF();
                      }
                      int v33 = (const void *)v23[32];
                      CFTypeRef v34 = *(CFTypeRef *)label;
                      v23[32] = *(void *)label;
                      if (v34) {
                        CFRetain(v34);
                      }
                      if (v33) {
                        CFRelease(v33);
                      }
                      CFDictionarySetValue(Mutable, @"SPIDDidChange", (const void *)*MEMORY[0x1E4F1CFD0]);
                    }
                    uint64_t v35 = v23[30];
                    CFAllocatorRef v36 = CFGetAllocator(v21);
                    uint64_t v37 = APEndpointDescriptionGetCMBaseObject(v35);
                    uint64_t v38 = *(void *)(CMBaseObjectGetVTable() + 8);
                    if (v38) {
                      uint64_t v39 = v38;
                    }
                    else {
                      uint64_t v39 = 0;
                    }
                    CMTimeValue v40 = *(uint64_t (**)(uint64_t, __CFString *, CFAllocatorRef, CFTypeRef *))(v39 + 48);
                    if (v40)
                    {
                      uint64_t v41 = v40(v37, @"MACAddress", v36, &v70);
                      if (v41)
                      {
                        uint64_t v30 = v41;
                      }
                      else
                      {
                        long long v42 = (const void *)v23[33];
                        CFTypeRef v43 = v70;
                        v23[33] = v70;
                        if (v43) {
                          CFRetain(v43);
                        }
                        if (v42) {
                          CFRelease(v42);
                        }
                        uint64_t v44 = v23[30];
                        CFAllocatorRef v45 = CFGetAllocator(v21);
                        uint64_t v46 = APEndpointDescriptionGetCMBaseObject(v44);
                        uint64_t v47 = *(void *)(CMBaseObjectGetVTable() + 8);
                        if (v47) {
                          uint64_t v48 = v47;
                        }
                        else {
                          uint64_t v48 = 0;
                        }
                        CMTimeValue v49 = *(uint64_t (**)(uint64_t, __CFString *, CFAllocatorRef, CFTypeRef *))(v48 + 48);
                        if (v49)
                        {
                          uint64_t v50 = v49(v46, @"Name", v45, &v69);
                          if (!v50)
                          {
                            uint64_t v51 = (const void *)v23[31];
                            CFTypeRef v52 = v69;
                            v23[31] = v69;
                            if (v52) {
                              CFRetain(v52);
                            }
                            if (v51) {
                              CFRelease(v51);
                            }
                            if (gLogCategory_SPEndpoint <= 30
                              && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
                            {
                              LogPrintF();
                            }
                            uint64_t v30 = 0;
LABEL_61:
                            if (*(void *)label) {
                              CFRelease(*(CFTypeRef *)label);
                            }
                            if (v70) {
                              CFRelease(v70);
                            }
                            if (v69) {
                              CFRelease(v69);
                            }
                            if (Mutable) {
                              CFRelease(Mutable);
                            }
                            MEMORY[0x1D25EB390](DerivedStorage[5]);
                            if (!v30)
                            {
                              uint64_t v53 = CMBaseObjectGetDerivedStorage();
                              *(void *)label = 0;
                              if (a3)
                              {
                                Boolean Value = CFDictionaryGetValue(a3, @"EventRecorder");
                                long long v55 = *(const void **)(v53 + 32);
                                *(void *)(v53 + 32) = Value;
                                if (Value) {
                                  CFRetain(Value);
                                }
                                if (v55) {
                                  CFRelease(v55);
                                }
                              }
                              int v58 = *(const void **)(v53 + 24);
                              uint64_t v57 = (void *)(v53 + 24);
                              uint64_t v56 = v58;
                              if (v58)
                              {
                                CFRelease(v56);
                                *uint64_t v57 = 0;
                              }
                              uint64_t v59 = APSEventRecorderCreate();
                              if (v59)
                              {
                                uint64_t v30 = v59;
                              }
                              else
                              {
                                uint64_t v60 = APEndpointDescriptionGetCMBaseObject(a2);
                                uint64_t v61 = *(void *)(CMBaseObjectGetVTable() + 8);
                                if (v61) {
                                  uint64_t v62 = v61;
                                }
                                else {
                                  uint64_t v62 = 0;
                                }
                                uint64_t v63 = *(void (**)(uint64_t, __CFString *, void, char *))(v62 + 48);
                                if (!v63
                                  || (v63(v60, @"TransportDevice", *MEMORY[0x1E4F1CF80], label), !*(void *)label)
                                  || (uint64_t EventRecorder = APTransportDeviceGetEventRecorder()) == 0
                                  || (uint64_t v65 = MEMORY[0x1D25E8260](*v57, EventRecorder), !v65))
                                {
                                  APSEventRecorderAddSignPostForEvent();
                                  uint64_t v30 = 0;
                                  goto LABEL_86;
                                }
                                uint64_t v30 = v65;
                              }
                              APSLogErrorAt();
LABEL_86:
                              if (*(void *)label) {
                                CFRelease(*(CFTypeRef *)label);
                              }
                              if (!v30)
                              {
                                if (gLogCategory_SPEndpoint <= 50
                                  && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
                                {
                                  LogPrintF();
                                }
                                uint64_t v30 = 0;
                                *a4 = cf;
                                CFTypeRef cf = 0;
                                goto LABEL_94;
                              }
                            }
LABEL_19:
                            APSLogErrorAt();
                            goto LABEL_20;
                          }
                          uint64_t v30 = v50;
                        }
                        else
                        {
                          uint64_t v30 = 4294954514;
                        }
                      }
                    }
                    else
                    {
                      uint64_t v30 = 4294954514;
                    }
                  }
                }
                else
                {
                  uint64_t v30 = 4294954514;
                }
                APSLogErrorAt();
                goto LABEL_61;
              }
              APSLogErrorAt();
              uint64_t v30 = 4294950575;
              goto LABEL_61;
            }
          }
        }
      }
    }
    APSLogErrorAt();
    uint64_t v30 = 4294950575;
  }
  else
  {
    APSLogErrorAt();
    uint64_t v30 = 4294950576;
  }
LABEL_20:
  if (cf) {
    CFRelease(cf);
  }
LABEL_94:
  if (v67) {
    CFRelease(v67);
  }
  return v30;
}

uint64_t spendpoint_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPEndpoint <= 30 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  if (introspector_getCollectionOfActiveSPEndpoints_once != -1) {
    dispatch_once(&introspector_getCollectionOfActiveSPEndpoints_once, &__block_literal_global_34);
  }
  if (introspector_getCollectionOfActiveSPEndpoints_coll)
  {
    CFStringRef v3 = *(NSObject **)introspector_getCollectionOfActiveSPEndpoints_coll;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __spendpoint_Finalize_block_invoke;
    block[3] = &__block_descriptor_48_e5_v8__0l;
    void block[4] = introspector_getCollectionOfActiveSPEndpoints_coll;
    void block[5] = a1;
    dispatch_sync(v3, block);
  }
  if (*(void *)DerivedStorage)
  {
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  if (*(void *)(DerivedStorage + 136))
  {
    uint64_t result = gLogCategory_SPEndpoint;
    if (gLogCategory_SPEndpoint <= 100) {
      uint64_t result = spendpoint_Finalize_cold_1(gLogCategory_SPEndpoint);
    }
    __break(1u);
  }
  else
  {
    MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 40));
    spendpoint_resetActivationState(a1, DerivedStorage + 56, *(void *)(DerivedStorage + 256));
    spendpoint_clearEndpointState();
    uint64_t v4 = *(const void **)(DerivedStorage + 248);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(DerivedStorage + 248) = 0;
    }
    uint64_t v5 = *(const void **)(DerivedStorage + 256);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(DerivedStorage + 256) = 0;
    }
    MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 40));
    uint64_t v6 = *(const void **)(DerivedStorage + 32);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(DerivedStorage + 32) = 0;
    }
    CFStringRef v7 = *(const void **)(DerivedStorage + 24);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(DerivedStorage + 24) = 0;
    }
    uint64_t v8 = *(const void **)(DerivedStorage + 232);
    if (v8)
    {
      CFRelease(v8);
      *(void *)(DerivedStorage + 232) = 0;
    }
    CFDataRef v9 = *(const void **)(DerivedStorage + 240);
    if (v9)
    {
      CFRelease(v9);
      *(void *)(DerivedStorage + 240) = 0;
    }
    CFTypeRef v10 = *(NSObject **)(DerivedStorage + 16);
    if (v10)
    {
      dispatch_release(v10);
      *(void *)(DerivedStorage + 16) = 0;
    }
    long long v11 = *(NSObject **)(DerivedStorage + 8);
    if (v11)
    {
      dispatch_release(v11);
      *(void *)(DerivedStorage + 8) = 0;
    }
    uint64_t v12 = *(NSObject **)(DerivedStorage + 280);
    if (v12)
    {
      dispatch_release(v12);
      *(void *)(DerivedStorage + 280) = 0;
    }
    return FigSimpleMutexDestroy();
  }
  return result;
}

__CFString *spendpoint_CopyDebugDescription(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFTypeRef cf = 0;
  CFStringAppendFormat(Mutable, 0, @"<SPEndpoint %p>", a1);
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  CFStringRef v7 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v6 + 48);
  if (v7)
  {
    int v8 = v7(CMBaseObject, @"EndpointShowInfo", v2, &cf);
    CFTypeRef v9 = cf;
    if (!v8)
    {
      ASPrintF();
      size_t v10 = strlen(0);
      if (v10 && *(unsigned char *)(v10 - 1) == 10) {
        *(unsigned char *)(v10 - 1) = 0;
      }
      CFStringAppendFormat(Mutable, 0, @"%s", 0);
      free(0);
      CFTypeRef v9 = cf;
    }
    if (v9) {
      CFRelease(v9);
    }
  }
  return Mutable;
}

uint64_t spendpoint_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFMutableArrayRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPEndpoint <= 10 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  CFTypeRef v9 = (const void *)*MEMORY[0x1E4F21048];
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21048]))
  {
    size_t v10 = (CFTypeRef *)MEMORY[0x1E4F21570];
LABEL_10:
    uint64_t v11 = 0;
    *a4 = (CFMutableArrayRef)CFRetain(*v10);
    return v11;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20EB8]) || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20E88]))
  {
    size_t v10 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
    goto LABEL_10;
  }
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 40));
  uint64_t v13 = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(v13 + 48)
    && !CFEqual(a2, v9)
    && !CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20E40])
    && !CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20E38])
    && !CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20F28]))
  {
    uint64_t v11 = 4294950573;
LABEL_53:
    MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 40));
    return v11;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20FB8]))
  {
    uint64_t CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(void *)(v13 + 240));
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    dispatch_queue_t v18 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFMutableArrayRef *))(v16 + 48);
    if (v18)
    {
      uint64_t v19 = v18(CMBaseObject, @"SubType", a3, a4);
LABEL_26:
      uint64_t v11 = v19;
      goto LABEL_27;
    }
    uint64_t v11 = 4294954514;
LABEL_32:
    MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 40));
LABEL_33:
    APSLogErrorAt();
    return v11;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20E38]))
  {
    dispatch_queue_t v17 = *(void **)(v13 + 256);
    if (!v17) {
      goto LABEL_52;
    }
    goto LABEL_51;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20EF0]))
  {
    dispatch_queue_t v17 = *(void **)(v13 + 264);
    if (!v17) {
      goto LABEL_52;
    }
    goto LABEL_51;
  }
  if (CFEqual(a2, @"EndpointDescription"))
  {
    dispatch_queue_t v17 = *(void **)(v13 + 240);
    if (!v17) {
      goto LABEL_52;
    }
    goto LABEL_51;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20F28]))
  {
    dispatch_queue_t v17 = *(void **)(v13 + 248);
    if (!v17) {
      goto LABEL_52;
    }
    goto LABEL_51;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20E40]))
  {
    dispatch_queue_t v20 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    if (*(_DWORD *)(v13 + 72) != 2) {
      dispatch_queue_t v20 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
    }
    goto LABEL_50;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20C88]))
  {
    uint64_t valuePtr = 0;
    if (*(_DWORD *)(v13 + 72) == 2) {
      uint64_t valuePtr = *(void *)(v13 + 64);
    }
    CFNumberRef v21 = CFNumberCreate(a3, kCFNumberSInt64Type, &valuePtr);
    *a4 = v21;
    if (v21) {
      goto LABEL_58;
    }
    goto LABEL_82;
  }
  if (CFEqual(a2, @"IsInUse"))
  {
    dispatch_queue_t v20 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    int v22 = *(_DWORD *)(v13 + 72);
    goto LABEL_63;
  }
  if (CFEqual(a2, @"IsEngaged"))
  {
    dispatch_queue_t v20 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    int v22 = *(unsigned __int8 *)(v13 + 144);
LABEL_63:
    if (!v22) {
      dispatch_queue_t v20 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
    }
    goto LABEL_50;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20F68]))
  {
    dispatch_queue_t v17 = (void *)*MEMORY[0x1E4F20C78];
    if (!*MEMORY[0x1E4F20C78]) {
      goto LABEL_52;
    }
    goto LABEL_51;
  }
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20FC0]))
  {
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20FA8]))
    {
      uint64_t v19 = spendpoint_copyStreams(a1, a3, a4);
      goto LABEL_26;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21088])) {
      goto LABEL_76;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21090]))
    {
      uint64_t valuePtr = 0;
      CFNumberRef v25 = CFNumberCreate(a3, kCFNumberSInt64Type, &valuePtr);
      *a4 = v25;
      if (!v25) {
        goto LABEL_82;
      }
      goto LABEL_58;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20F18]))
    {
      uint64_t v26 = *(void *)(v13 + 240);
      uint64_t v27 = kAPEndpointDescriptionProperty_Model;
      goto LABEL_89;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20EF8]))
    {
      uint64_t v26 = *(void *)(v13 + 240);
      uint64_t v27 = kAPEndpointDescriptionProperty_Manufacturer;
      goto LABEL_89;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20DF0]))
    {
      uint64_t v26 = *(void *)(v13 + 240);
      uint64_t v27 = kAPEndpointDescriptionProperty_FirmwareVersion;
      goto LABEL_89;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20F88]))
    {
      uint64_t v26 = *(void *)(v13 + 240);
      uint64_t v27 = kAPEndpointDescriptionProperty_SerialNumber;
      goto LABEL_89;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20D08]))
    {
      dispatch_queue_t v20 = (CFTypeRef *)MEMORY[0x1E4F203C8];
      goto LABEL_50;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20CB0]))
    {
      uint64_t v26 = *(void *)(v13 + 240);
      uint64_t v27 = kAPEndpointDescriptionProperty_AirPlaySecurity;
      goto LABEL_89;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21040]))
    {
      dispatch_queue_t v20 = (CFTypeRef *)MEMORY[0x1E4F21540];
      goto LABEL_50;
    }
    if (CFEqual(a2, @"Features"))
    {
      uint64_t v19 = APEndpointDescriptionCopyFeatures(*(void *)(v13 + 240), (uint64_t)a4);
      goto LABEL_26;
    }
    if (CFEqual(a2, @"SourceVersion"))
    {
      uint64_t v26 = *(void *)(v13 + 240);
      uint64_t v27 = kAPEndpointDescriptionProperty_SourceVersion;
      goto LABEL_89;
    }
    if (CFEqual(a2, @"EndpointStatus"))
    {
      CFNumberRef v28 = CFNumberCreate(a3, kCFNumberSInt32Type, (const void *)(v13 + 272));
      *a4 = v28;
      if (!v28)
      {
        APSLogErrorAt();
        uint64_t v11 = 4294950575;
        goto LABEL_32;
      }
    }
    else
    {
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20CD0]))
      {
        uint64_t v26 = *(void *)(v13 + 240);
        uint64_t v27 = kAPEndpointDescriptionProperty_VodkaVersion;
        goto LABEL_89;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20CA8]))
      {
        uint64_t v26 = *(void *)(v13 + 240);
        uint64_t v27 = kAPEndpointDescriptionProperty_SupportsAirPlayFromCloud;
        goto LABEL_89;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20EC0]))
      {
LABEL_76:
        dispatch_queue_t v20 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
LABEL_50:
        dispatch_queue_t v17 = (void *)*v20;
LABEL_51:
        dispatch_queue_t v17 = (void *)CFRetain(v17);
LABEL_52:
        uint64_t v11 = 0;
        *a4 = (CFMutableArrayRef)v17;
        goto LABEL_53;
      }
      if (!CFEqual(a2, @"EndpointShowInfo"))
      {
        if (CFEqual(a2, @"AirPlayDiagnosticsTargetInfo"))
        {
          uint64_t v19 = spendpoint_copyAirPlayDiagnosticsDictionary(a1, a3, a4);
          goto LABEL_26;
        }
        if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21018]))
        {
          uint64_t v26 = *(void *)(v13 + 240);
          uint64_t v27 = kAPEndpointDescriptionProperty_StatusFlags;
        }
        else if (CFEqual(a2, @"TransportDevice"))
        {
          uint64_t v26 = *(void *)(v13 + 240);
          uint64_t v27 = kAPEndpointDescriptionProperty_TransportDevice;
        }
        else
        {
          if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20C90]))
          {
            uint64_t valuePtr = 0;
            if (*(void *)(v13 + 136)) {
              uint64_t valuePtr = *(void *)(v13 + 56);
            }
            CFNumberRef v29 = CFNumberCreate(a3, kCFNumberSInt64Type, &valuePtr);
            *a4 = v29;
            if (v29) {
              goto LABEL_58;
            }
            goto LABEL_82;
          }
          if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20E60]))
          {
            int isConnected = spendpoint_isConnected();
            dispatch_queue_t v20 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
            if (!isConnected) {
              dispatch_queue_t v20 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
            }
            goto LABEL_50;
          }
          if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20F90]) || CFEqual(a2, @"SupportsMuteControl")) {
            goto LABEL_76;
          }
          if (!CFEqual(a2, @"EndpointInfo"))
          {
            uint64_t v11 = 4294954512;
            goto LABEL_53;
          }
          uint64_t v26 = *(void *)(v13 + 240);
          uint64_t v27 = kAPEndpointDescriptionProperty_EndpointInfo;
        }
LABEL_89:
        uint64_t v19 = APEndpointDescriptionCopyProperty(v26, (uint64_t)*v27, (uint64_t)a3, (uint64_t)a4);
        goto LABEL_26;
      }
      spendpoint_copyShowInfoDictionary(a1, a4);
    }
    uint64_t v11 = 0;
    goto LABEL_53;
  }
  uint64_t valuePtr = 0;
  uint64_t SupportedFeatures = spendpoint_getSupportedFeatures(a1, &valuePtr);
  if (!SupportedFeatures)
  {
    CFNumberRef v24 = CFNumberCreate(a3, kCFNumberSInt64Type, &valuePtr);
    *a4 = v24;
    if (!v24)
    {
LABEL_82:
      APSLogErrorAt();
      uint64_t v11 = 4294950575;
      goto LABEL_27;
    }
LABEL_58:
    uint64_t v11 = 0;
    goto LABEL_27;
  }
  uint64_t v11 = SupportedFeatures;
  APSLogErrorAt();
LABEL_27:
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 40));
  if ((int)v11 > -6728)
  {
    if (v11 != -6727 && v11) {
      goto LABEL_33;
    }
  }
  else if (v11 != -16723 && v11 != -12784)
  {
    goto LABEL_33;
  }
  return v11;
}

uint64_t spendpoint_SetProperty(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPEndpoint <= 30 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  if (a2)
  {
    MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 40));
    if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 48))
    {
      APSLogErrorAt();
      uint64_t v4 = 4294950573;
    }
    else
    {
      uint64_t v4 = 4294954512;
    }
    MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 40));
    APSLogErrorAt();
  }
  else
  {
    APSLogErrorAt();
    return 4294950576;
  }
  return v4;
}

void spendpoint_resetActivationState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 88) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  uint64_t v6 = *(const void **)(a2 + 24);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a2 + 24) = 0;
  }
  CFStringRef v7 = *(const void **)(a2 + 32);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(a2 + 32) = 0;
  }
  int v8 = *(const void **)(a2 + 48);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a2 + 48) = 0;
  }
  CFTypeRef v9 = *(const void **)(a2 + 56);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a2 + 56) = 0;
  }
  size_t v10 = *(const void **)(a2 + 64);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(a2 + 64) = 0;
  }
  uint64_t v11 = *(const void **)(a2 + 72);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(a2 + 72) = 0;
  }
  uint64_t v12 = *(const void **)(a2 + 80);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(a2 + 80) = 0;
  }
  if (!*(void *)(a2 + 96))
  {
    uint64_t v13 = (id *)(a2 + 104);
    if (!*(void *)(a2 + 104)) {
      goto LABEL_23;
    }
    if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
      objc_msgSend(*v13, "removeRemoteDeviceID:", a3, a1, a3);
    }
    else
    {
      objc_msgSend(*v13, "removeRemoteDeviceID:", a3, v17, v18);
    }
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
LABEL_23:

  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  long long v14 = *(NSObject **)(a2 + 112);
  if (v14)
  {
    dispatch_release(v14);
    *(void *)(a2 + 112) = 0;
  }
  uint64_t v15 = *(const void **)(a2 + 120);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(a2 + 120) = 0;
  }
  uint64_t v16 = *(const void **)(a2 + 128);
  if (v16)
  {
    CFRelease(v16);
    *(void *)(a2 + 128) = 0;
  }
}

void spendpoint_clearEndpointState()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v1 = *(const void **)(DerivedStorage + 264);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 264) = 0;
  }
}

uint64_t __introspector_getCollectionOfActiveSPEndpoints_block_invoke()
{
  uint64_t result = IsAppleInternalBuild();
  if (result)
  {
    introspector_getCollectionOfActiveSPEndpoints_coll = (uint64_t)malloc_type_calloc(1uLL, 0x18uLL, 0xF00401F3BCE50uLL);
    *(void *)introspector_getCollectionOfActiveSPEndpoints_coll = dispatch_queue_create("CollectionOfActiveSPEndpoints", 0);
    CFMutableSetRef Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
    uint64_t v2 = introspector_getCollectionOfActiveSPEndpoints_coll;
    *(void *)(introspector_getCollectionOfActiveSPEndpoints_coll + 8) = Mutable;
    *(void *)(v2 + 16) = "ActiveSPEndpoints";
    return APSIntrospectorAddCommand();
  }
  return result;
}

void spendpoint_handleClientIsActiveDidChange(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  if (*(_DWORD *)(DerivedStorage + 72) != 2)
  {
LABEL_17:
    APSLogErrorAt();
    return;
  }
  if (!*(void *)(DerivedStorage + 160) || (FigCFDictionaryGetValue(), FigCFEqual()))
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFMutableDictionaryRef v5 = Mutable;
      if (*(void *)(DerivedStorage + 152) || *(void *)(DerivedStorage + 160))
      {
        FigCFDictionarySetValueFromKeyInDict();
        FigCFDictionarySetValueFromKeyInDict();
        FigCFDictionarySetValueFromKeyInDict();
        FigCFDictionarySetValueFromKeyInDict();
        FigCFDictionarySetValueFromKeyInDict();
        FigCFDictionarySetValueFromKeyInDict();
      }
      MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 40));
      int v6 = spEndpoint_sendCommandInternal(a2, @"clientIsActiveDidChange", v5);
      MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 40));
      if (v6) {
        APSLogErrorAt();
      }
      CFRelease(v5);
      return;
    }
    goto LABEL_17;
  }
  if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
}

uint64_t spEndpoint_sendCommandInternal(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPEndpoint <= 40 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v7 = *(void *)(DerivedStorage + 136);
  if (v7
    && ((uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0 ? (v9 = 0) : (v9 = v8),
        (size_t v10 = *(unsigned int (**)(uint64_t))(v9 + 16)) != 0 && v10(v7)))
  {
    if (*(unsigned char *)(DerivedStorage + 48)) {
      uint64_t v11 = 4294950573;
    }
    else {
      uint64_t v11 = 0;
    }
  }
  else
  {
    uint64_t v11 = 4294950570;
  }
  CFRetain(a1);
  CFRetain(a2);
  if (a3) {
    CFRetain(a3);
  }
  uint64_t v12 = *(const void **)(DerivedStorage + 136);
  if (v12) {
    CFRetain(v12);
  }
  APSDispatchAsyncFHelper();
  return v11;
}

void spEndpoint_sendCommand(uint64_t a1)
{
  CMBaseObjectGetDerivedStorage();
  CFTypeRef v31 = 0;
  CFTypeRef v32 = 0;
  if (*(_DWORD *)(a1 + 48))
  {
    APSLogErrorAt();
    unsigned int v18 = 0;
LABEL_39:
    uint64_t v7 = 0;
    goto LABEL_40;
  }
  if (FigCFEqual())
  {
    uint64_t v2 = *(void *)(a1 + 8);
    cf[0] = 0;
    int v33 = 0;
    CFTypeRef v34 = 0;
    uint64_t CMBaseObject = APSenderSessionGetCMBaseObject(v2);
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v12 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v5 + 48);
    if (v12)
    {
      CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      unsigned int v14 = v12(CMBaseObject, @"TransportControlStream", *MEMORY[0x1E4F1CF80], cf);
      if (v14)
      {
        unsigned int v18 = v14;
      }
      else
      {
        CFTypeRef v15 = cf[0];
        uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v16) {
          uint64_t v17 = v16;
        }
        else {
          uint64_t v17 = 0;
        }
        CFNumberRef v21 = *(uint64_t (**)(CFTypeRef, uint64_t, void, CFTypeRef *))(v17 + 56);
        if (v21)
        {
          unsigned int v22 = v21(v15, 1819240307, 0, &v34);
          if (v22)
          {
            unsigned int v18 = v22;
          }
          else
          {
            unsigned int CFDataWithBlockBufferNoCopy = FigCreateCFDataWithBlockBufferNoCopy();
            if (!CFDataWithBlockBufferNoCopy)
            {
              CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v13, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              if (Mutable)
              {
                CFNumberRef v25 = Mutable;
                CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F21150], v33);
                unsigned int v18 = 0;
                CFTypeRef v31 = v25;
              }
              else
              {
                APSLogErrorAt();
                unsigned int v18 = -16721;
              }
              goto LABEL_31;
            }
            unsigned int v18 = CFDataWithBlockBufferNoCopy;
          }
        }
        else
        {
          unsigned int v18 = -12782;
        }
      }
    }
    else
    {
      unsigned int v18 = -12782;
    }
    APSLogErrorAt();
LABEL_31:
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    if (v34) {
      CFRelease(v34);
    }
    if (v33) {
      CFRelease(v33);
    }
    if (v18) {
      APSLogErrorAt();
    }
    goto LABEL_39;
  }
  int v6 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v7 = v6;
  if (v6)
  {
    CFDictionarySetValue(v6, @"type", *(const void **)(a1 + 16));
    uint64_t v8 = *(const void **)(a1 + 24);
    if (v8) {
      CFDictionarySetValue(v7, @"params", v8);
    }
    uint64_t v9 = APSenderSessionGetCMBaseObject(*(void *)(a1 + 8));
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v19 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v11 + 48);
    if (v19)
    {
      unsigned int v20 = v19(v9, @"TransportControlStream", *MEMORY[0x1E4F1CF80], &v32);
      if (v20)
      {
        unsigned int v18 = v20;
      }
      else
      {
        unsigned int v18 = APTransportStreamSendPlistMessageCreatingPlistReply();
        if (!v18) {
          goto LABEL_40;
        }
      }
    }
    else
    {
      unsigned int v18 = -12782;
    }
    APSLogErrorAt();
  }
  else
  {
    APSLogErrorAt();
    unsigned int v18 = -16721;
  }
LABEL_40:
  uint64_t v26 = *(const void **)(a1 + 32);
  if (v26)
  {
    cf[0] = *(CFTypeRef *)a1;
    cf[1] = v31;
    uint64_t v27 = *(const void **)(a1 + 40);
    CFTypeRef cf[2] = v26;
    cf[3] = v27;
    CFTypeRef cf[4] = (CFTypeRef)v18;
    CFRetain(cf[0]);
    if (v31) {
      CFRetain(v31);
    }
    APSDispatchAsyncFHelper();
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v32) {
    CFRelease(v32);
  }
  if (v31) {
    CFRelease(v31);
  }
  CFRelease(*(CFTypeRef *)a1);
  CFRelease(*(CFTypeRef *)(a1 + 16));
  CFNumberRef v28 = *(const void **)(a1 + 24);
  if (v28) {
    CFRelease(v28);
  }
  CFNumberRef v29 = *(const void **)(a1 + 8);
  if (v29) {
    CFRelease(v29);
  }
}

uint64_t APSenderSessionCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CMBaseObject = APSenderSessionGetCMBaseObject(a1);
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v11 = *(void *)(VTable + 8);
  uint64_t result = VTable + 8;
  uint64_t v10 = v11;
  if (v11) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = 0;
  }
  CFAllocatorRef v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (v13)
  {
    return v13(CMBaseObject, a2, a3, a4);
  }
  return result;
}

uint64_t spendpoint_getSupportedFeatures(uint64_t a1, void *a2)
{
  CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v3 = APSGetFBOPropertyInt64();
    uint64_t result = 0;
    *a2 = 8 * (v3 != 0);
  }
  else
  {
    APSLogErrorAt();
    return 4294950576;
  }
  return result;
}

uint64_t spendpoint_copyStreams(uint64_t a1, const __CFAllocator *a2, CFMutableArrayRef *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableArrayRef Mutable = CFArrayCreateMutable(a2, 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    CFMutableArrayRef v7 = Mutable;
    if (*(void *)(DerivedStorage + 88)) {
      CFSetApplyBlock();
    }
    uint64_t result = 0;
    *a3 = v7;
  }
  else
  {
    APSLogErrorAt();
    return 4294950575;
  }
  return result;
}

void spendpoint_copyShowInfoDictionary(uint64_t a1, __CFDictionary **a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTimeValue value = 0;
  cf[0] = 0;
  CFTypeRef v37 = 0;
  CFTypeRef v38 = 0;
  __int16 v41 = 0;
  cf[1] = 0;
  uint64_t v4 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    int v6 = Mutable;
    SNPrintF();
    CFDictionarySetCString();
    CFMutableArrayRef v7 = (const void *)*MEMORY[0x1E4F1CFC8];
    if (*(void *)(DerivedStorage + 136)) {
      uint64_t v8 = (const void *)*MEMORY[0x1E4F1CFD0];
    }
    else {
      uint64_t v8 = (const void *)*MEMORY[0x1E4F1CFC8];
    }
    CFDictionarySetValue(v6, @"Activated", v8);
    CFDictionarySetValue(v6, @"Name", *(const void **)(DerivedStorage + 248));
    CFDictionarySetValue(v6, @"DeviceID", *(const void **)(DerivedStorage + 256));
    uint64_t CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(void *)(DerivedStorage + 240));
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v11 + 48);
    if (v12) {
      v12(CMBaseObject, @"TransportDevice", v4, cf);
    }
    if (cf[0])
    {
      uint64_t DiscoveryID = (const void *)APTransportDeviceGetDiscoveryID();
      CFDictionarySetValue(v6, @"DiscoveryID", DiscoveryID);
      if (cf[0])
      {
        CFRelease(cf[0]);
        cf[0] = 0;
      }
    }
    uint64_t v14 = APEndpointDescriptionGetCMBaseObject(*(void *)(DerivedStorage + 240));
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v17 = *(void (**)(uint64_t, __CFString *, uint64_t, void **))(v16 + 48);
    if (v17) {
      v17(v14, @"Model", v4, &value);
    }
    if (value)
    {
      CFDictionarySetValue(v6, @"Model", value);
      if (value)
      {
        CFRelease(value);
        CMTimeValue value = 0;
      }
    }
    uint64_t v18 = APEndpointDescriptionGetCMBaseObject(*(void *)(DerivedStorage + 240));
    uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v19) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = 0;
    }
    CFNumberRef v21 = *(void (**)(uint64_t, __CFString *, uint64_t, void **))(v20 + 48);
    if (v21) {
      v21(v18, @"SourceVersion", v4, &value);
    }
    if (value)
    {
      CFDictionarySetValue(v6, @"SourceVersion", value);
      if (value)
      {
        CFRelease(value);
        CMTimeValue value = 0;
      }
    }
    uint64_t v22 = *(void *)(DerivedStorage + 240);
    uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v23) {
      uint64_t v24 = v23;
    }
    else {
      uint64_t v24 = 0;
    }
    CFNumberRef v25 = *(void (**)(uint64_t, CFTypeRef *))(v24 + 8);
    if (v25)
    {
      v25(v22, &v38);
      if (v38)
      {
        CFDictionarySetValue(v6, @"AirPlayFeatures", v38);
        if (v38)
        {
          CFRelease(v38);
          CFTypeRef v38 = 0;
        }
      }
    }
    uint64_t v26 = APEndpointDescriptionGetCMBaseObject(*(void *)(DerivedStorage + 240));
    uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v27) {
      uint64_t v28 = v27;
    }
    else {
      uint64_t v28 = 0;
    }
    CFNumberRef v29 = *(void (**)(uint64_t, __CFString *, uint64_t, void **))(v28 + 48);
    if (v29) {
      v29(v26, @"StatusFlags", v4, &value);
    }
    if (value)
    {
      CFDictionarySetValue(v6, @"StatusFlags", value);
      if (value)
      {
        CFRelease(value);
        CMTimeValue value = 0;
      }
    }
    CFSetRef v30 = *(const __CFSet **)(DerivedStorage + 88);
    if (v30) {
      CFSetApplyFunction(v30, (CFSetApplierFunction)spendpoint_copyShowInfoForStreamsSetEntry, v6);
    }
    uint64_t v31 = *(void *)(DerivedStorage + 136);
    CFTypeRef v32 = v7;
    if (v31)
    {
      uint64_t v33 = APSenderSessionGetCMBaseObject(v31);
      uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v35 = v34 ? v34 : 0;
      CFAllocatorRef v36 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v35 + 48);
      CFTypeRef v32 = v7;
      if (v36)
      {
        v36(v33, @"ShowInfo", v4, &v37);
        CFTypeRef v32 = v7;
        if (v37)
        {
          CFDictionarySetValue(v6, @"SenderSessionInfo", v37);
          FigCFDictionaryGetBooleanIfPresent();
          CFTypeRef v32 = v7;
        }
      }
    }
    CFDictionarySetValue(v6, @"Started", v32);
    CFDictionarySetInt64();
    CFDictionarySetValue(v6, @"IsLocal", v7);
    *a2 = v6;
    if (v37) {
      CFRelease(v37);
    }
  }
  else
  {
    APSLogErrorAt();
  }
  if (value) {
    CFRelease(value);
  }
}

uint64_t spendpoint_copyAirPlayDiagnosticsDictionary(int a1, CFAllocatorRef allocator, CFMutableDictionaryRef *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableDictionaryRef v6 = Mutable;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    CFTypeRef cf = 0;
    bzero(cStr, 0x400uLL);
    uint64_t CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(void *)(DerivedStorage + 240));
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v10 + 48);
    if (v11)
    {
      uint64_t v12 = v11(CMBaseObject, @"TransportDevice", *MEMORY[0x1E4F1CF80], &cf);
      if (v12)
      {
        uint64_t v15 = v12;
        CFStringRef v13 = 0;
        CFStringRef v14 = 0;
      }
      else
      {
        if (APTransportDeviceGetAddress())
        {
          if (gLogCategory_SPEndpoint <= 50
            && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          CFStringRef v13 = 0;
        }
        else
        {
          CFStringRef v13 = CFStringCreateWithCString(allocator, cStr, 0x8000100u);
        }
        if (APTransportDeviceGetAddress())
        {
          if (gLogCategory_SPEndpoint <= 50
            && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          CFStringRef v14 = 0;
        }
        else
        {
          CFStringRef v14 = CFStringCreateWithCString(allocator, cStr, 0x8000100u);
        }
        uint64_t v15 = 0;
      }
    }
    else
    {
      CFStringRef v13 = 0;
      CFStringRef v14 = 0;
      uint64_t v15 = 4294954514;
    }
    if (cf) {
      CFRelease(cf);
    }
    if (v15)
    {
      APSLogErrorAt();
      CFRelease(v6);
      if (!v13) {
        goto LABEL_32;
      }
    }
    else
    {
      if (v13) {
        CFDictionarySetValue(v6, @"InfraDNSName", v13);
      }
      if (v14) {
        CFDictionarySetValue(v6, @"PeerToPeerDNSName", v14);
      }
      *a3 = v6;
      if (!v13) {
        goto LABEL_32;
      }
    }
    CFRelease(v13);
LABEL_32:
    if (v14) {
      CFRelease(v14);
    }
    return v15;
  }
  return APSSignalErrorAt();
}

uint64_t spendpoint_isConnected()
{
  uint64_t v0 = *(void *)(CMBaseObjectGetDerivedStorage() + 136);
  if (!v0) {
    return 0;
  }
  uint64_t v1 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v2 = v1 ? v1 : 0;
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 8);
  if (!v3) {
    return 0;
  }
  return v3(v0);
}

void __spendpoint_copyStreams_block_invoke(uint64_t a1, const void *a2)
{
}

void spendpoint_copyShowInfoForStreamsSetEntry(uint64_t a1, __CFDictionary *a2)
{
  CMTimeValue value = 0;
  CFTypeRef cf1 = 0;
  uint64_t CMBaseObject = FigEndpointStreamGetCMBaseObject();
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  CFMutableDictionaryRef v6 = *(void (**)(uint64_t, __CFString *, void, void **))(v5 + 48);
  if (!v6) {
    goto LABEL_21;
  }
  uint64_t v7 = *MEMORY[0x1E4F1CF80];
  v6(CMBaseObject, @"EndpointStreamShowInfo", *MEMORY[0x1E4F1CF80], &value);
  if (!value) {
    goto LABEL_21;
  }
  uint64_t v8 = FigEndpointStreamGetCMBaseObject();
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v10 + 48);
  if (v11)
  {
    v11(v8, *MEMORY[0x1E4F21408], v7, &cf1);
    CFTypeRef v12 = cf1;
    if (cf1)
    {
      if (CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E4F21468]))
      {
        CFStringRef v13 = kAPEndpointShowInfoKey_StreamInfo_RealTimeAudio;
      }
      else if (CFEqual(v12, (CFTypeRef)*MEMORY[0x1E4F21470]))
      {
        CFStringRef v13 = kAPEndpointShowInfoKey_StreamInfo_BufferedAudio;
      }
      else
      {
        if (!CFEqual(v12, (CFTypeRef)*MEMORY[0x1E4F21488]))
        {
LABEL_24:
          APSLogErrorAt();
          goto LABEL_19;
        }
        CFStringRef v13 = kAPEndpointShowInfoKey_StreamInfo_Screen;
      }
      if (*v13)
      {
        CFDictionarySetValue(a2, *v13, value);
        goto LABEL_19;
      }
      goto LABEL_24;
    }
  }
LABEL_19:
  if (value) {
    CFRelease(value);
  }
LABEL_21:
  if (cf1) {
    CFRelease(cf1);
  }
}

uint64_t spendpoint_Activate(const void *a1, uint64_t a2, const __CFDictionary *a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTimeValue value = 0;
  if (a2) {
    uint64_t v11 = a2;
  }
  else {
    uint64_t v11 = 16;
  }
  long long v85 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  uint64_t v88 = 0;
  long long v83 = 0u;
  long long v84 = 0u;
  APSEventRecorderRecordEventWithFlags();
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 40));
  if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  *(void *)int v81 = v11;
  if (a3)
  {
    CFTypeRef v12 = CFDictionaryGetValue(a3, @"ParentContextID");
    if (!v12) {
      CFTypeRef v12 = CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E4F20350]);
    }
    if (!*(_DWORD *)(DerivedStorage + 72))
    {
      CFStringRef v13 = *(const void **)(DerivedStorage + 80);
      *(void *)(DerivedStorage + 80) = v12;
      if (v12) {
        CFRetain(v12);
      }
      if (!v13) {
        goto LABEL_16;
      }
LABEL_15:
      CFRelease(v13);
LABEL_16:
      if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      goto LABEL_21;
    }
  }
  else if (!*(_DWORD *)(DerivedStorage + 72))
  {
    CFStringRef v13 = *(const void **)(DerivedStorage + 80);
    *(void *)(DerivedStorage + 80) = 0;
    if (!v13) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  if (!FigCFEqual())
  {
    if (gLogCategory_SPEndpoint <= 90 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    goto LABEL_69;
  }
LABEL_21:
  if (*(unsigned char *)(DerivedStorage + 48))
  {
    APSLogErrorAt();
    CFTypeRef v18 = 0;
    uint64_t v79 = 0;
    CFTypeRef cf = 0;
    uint64_t v34 = 0;
    CFMutableDictionaryRef Mutable = 0;
    int v36 = -16723;
    goto LABEL_107;
  }
  if (a3)
  {
    CFTypeID v14 = CFGetTypeID(a3);
    if (v14 != CFDictionaryGetTypeID())
    {
      APSLogErrorAt();
      CFTypeRef v18 = 0;
      uint64_t v79 = 0;
      CFTypeRef cf = 0;
      uint64_t v34 = 0;
      CFMutableDictionaryRef Mutable = 0;
      int v36 = -16720;
      goto LABEL_107;
    }
  }
  uint64_t v15 = *(void *)(DerivedStorage + 64);
  if (v15 && v15 != v11) {
    goto LABEL_141;
  }
  if (*(void *)(DerivedStorage + 136))
  {
    APSLogErrorAt();
    CFTypeRef v18 = 0;
    uint64_t v79 = 0;
    CFTypeRef cf = 0;
    uint64_t v34 = 0;
    CFMutableDictionaryRef Mutable = 0;
    int v36 = -16727;
    goto LABEL_107;
  }
  uint64_t v16 = *(void *)(DerivedStorage + 240);
  if (!v16)
  {
LABEL_141:
    APSLogErrorAt();
LABEL_69:
    CFTypeRef v18 = 0;
    uint64_t v79 = 0;
    CFTypeRef cf = 0;
    uint64_t v34 = 0;
    CFMutableDictionaryRef Mutable = 0;
    int v36 = -16726;
    goto LABEL_107;
  }
  if (!a3)
  {
    CFTypeRef v18 = 0;
    CFTypeRef cf = 0;
    *(void *)int v78 = 0;
    BOOL v19 = 0;
    BOOL v20 = 0;
    goto LABEL_53;
  }
  uint64_t Int64 = CFDictionaryGetInt64();
  if (IsAppleInternalBuild() && !Int64)
  {
    if (APSSettingsGetIntWithDefault() != 1) {
      goto LABEL_47;
    }
LABEL_35:
    if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    LOBYTE(Int64) = 1;
    goto LABEL_47;
  }
  if (Int64) {
    goto LABEL_35;
  }
LABEL_47:
  CFDictionaryGetInt64();
  BOOL v21 = CFDictionaryGetInt64() != 0;
  uint64_t v22 = CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E4F20350]);
  if (v22) {
    uint64_t v22 = CFRetain(v22);
  }
  *(void *)(DerivedStorage + 104) = v22;
  CFTypeRef v18 = CFDictionaryGetValue(a3, @"SenderSession");
  uint64_t v23 = CFDictionaryGetValue(a3, @"SenderSessionFactory");
  v78[0] = v21;
  v78[4] = Int64;
  if (v23) {
    CFTypeRef cf = CFRetain(v23);
  }
  else {
    CFTypeRef cf = 0;
  }
  BOOL v19 = CFDictionaryGetInt64() != 0;
  BOOL v20 = CFDictionaryGetInt64() != 0;
  uint64_t v16 = *(void *)(DerivedStorage + 240);
LABEL_53:
  uint64_t CMBaseObject = APEndpointDescriptionGetCMBaseObject(v16);
  uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v25) {
    uint64_t v26 = v25;
  }
  else {
    uint64_t v26 = 0;
  }
  uint64_t v27 = *(uint64_t (**)(uint64_t, __CFString *, void, void **))(v26 + 48);
  LOBYTE(v79) = v20;
  BYTE4(v79) = v19;
  if (!v27)
  {
    int v36 = -12782;
LABEL_64:
    APSLogErrorAt();
    uint64_t v34 = 0;
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_107;
  }
  uint64_t v76 = a5;
  uint64_t v77 = a4;
  CFAllocatorRef v28 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  int v29 = v27(CMBaseObject, @"SupportedAudioFormats", *MEMORY[0x1E4F1CF80], &value);
  if (v29)
  {
    int v36 = v29;
    a5 = v76;
    goto LABEL_64;
  }
  CFSetRef v30 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  uint64_t v31 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v28, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, @"SupportedAudioFormats", value);
  uint64_t v33 = (const void *)*MEMORY[0x1E4F1CFD0];
  CFDictionarySetValue(Mutable, @"IsSidePlay", (const void *)*MEMORY[0x1E4F1CFD0]);
  uint64_t v34 = CFDictionaryCreateMutable(v28, 0, v30, v31);
  CFDictionarySetValue(v34, @"PreferredNetworkClockType", (const void *)*MEMORY[0x1E4F4A148]);
  CFDictionarySetValue(v34, @"AllowP2PForNTP", v33);
  CFDictionarySetValue(v34, @"AudioEngineOptions", Mutable);
  CFDictionarySetValue(v34, @"IgnoreClientPIDForMediaRemote", (const void *)*MEMORY[0x1E4F1CFC8]);
  int SharedContext = APEndpointCopyFromActivationOptionsOrCreateSharedContext(a3, v81[0], (uint64_t)v34, DerivedStorage + 128, (void *)(DerivedStorage + 120), (__CFDictionary **)(DerivedStorage + 112));
  if (SharedContext)
  {
    int v36 = SharedContext;
    APSLogErrorAt();
    a5 = v76;
    a4 = v77;
    goto LABEL_107;
  }
  if (v18)
  {
    if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    CFRetain(v18);
    a5 = v76;
    a4 = v77;
    goto LABEL_104;
  }
  CFTypeRef v37 = *(const void **)(DerivedStorage + 128);
  CFTypeRef v38 = (void *)CMBaseObjectGetDerivedStorage();
  v89[0] = 0;
  CMTimeValue v40 = (const void *)v38[30];
  uint64_t v39 = (const void *)v38[31];
  __int16 v41 = v38[2];
  if (cf)
  {
    HIBYTE(v75) = v78[4];
    LOBYTE(v75) = 0;
    int AirPlaySession = APSenderSessionFactoryCreateAirPlaySession((uint64_t)cf, (uint64_t)v28, (uint64_t)v39, (uint64_t)v40, 0, 10, 0, (uint64_t)v41, 0.0, v75, v78[0], (uint64_t)v37, 0, 0, 0, 0, (uint64_t)v89);
    a4 = v77;
    CFTypeRef v43 = (_DWORD *)&unk_1EA629000;
    if (AirPlaySession)
    {
      int v36 = AirPlaySession;
LABEL_147:
      APSLogErrorAt();
      a5 = v76;
      goto LABEL_98;
    }
  }
  else
  {
    int v44 = APSenderSessionAirPlayCreate((int)v28, v39, v40, 0, 10, 0, v41, 0, 0.0, v78[4], v78[0], v37, 0, 0, 0, 0, v89);
    a4 = v77;
    CFTypeRef v43 = &unk_1EA629000;
    if (v44)
    {
      int v36 = v44;
      goto LABEL_147;
    }
  }
  int v45 = v43[446];
  a5 = v76;
  if (v45 <= 50 && (v45 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  CFTypeRef v46 = v89[0];
  uint64_t v47 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v47) {
    uint64_t v48 = v47;
  }
  else {
    uint64_t v48 = 0;
  }
  CMTimeValue v49 = *(void (**)(CFTypeRef, const void *, const void *, uint64_t (*)(), uint64_t (*)(uint64_t, int, uint64_t, int, void *)))(v48 + 96);
  if (v49) {
    v49(v46, a1, a1, spendpoint_handleEventMessage, spendpoint_handleEventMessageCreatingReply);
  }
  uint64_t v50 = APSSettingsGetInt64();
  int v51 = v43[446];
  if (v50)
  {
    if (v51 <= 50 && (v51 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t v52 = APSenderSessionGetCMBaseObject(v89[0]);
    uint64_t v53 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v53) {
      uint64_t v54 = v53;
    }
    else {
      uint64_t v54 = 0;
    }
    long long v55 = *(uint64_t (**)(uint64_t, __CFString *, const void *))(v54 + 56);
    if (!v55)
    {
      int v36 = -12782;
      goto LABEL_97;
    }
    int v56 = v55(v52, @"PublishEncryptionKeyDiagnosticMode", v33);
    if (v56)
    {
      int v36 = v56;
LABEL_97:
      APSLogErrorAt();
LABEL_98:
      if (v89[0])
      {
        uint64_t v57 = APSenderSessionGetCMBaseObject(v89[0]);
        if (v57)
        {
          uint64_t v58 = v57;
          uint64_t v59 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v60 = v59 ? v59 : 0;
          int v74 = *(void (**)(uint64_t))(v60 + 24);
          if (v74) {
            v74(v58);
          }
        }
        CFRelease(v89[0]);
      }
      APSLogErrorAt();
      CFTypeRef v18 = 0;
      goto LABEL_107;
    }
  }
  else if (v51 <= 50 && (v51 != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFTypeRef v18 = v89[0];
LABEL_104:
  CMNotificationCenterGetDefaultLocalCenter();
  int v61 = FigNotificationCenterAddWeakListener();
  if (v61)
  {
    int v36 = v61;
  }
  else
  {
    CMNotificationCenterGetDefaultLocalCenter();
    int v36 = FigNotificationCenterAddWeakListener();
    if (!v36)
    {
      *(void *)(DerivedStorage + 136) = CFRetain(v18);
      ++*(void *)(DerivedStorage + 56);
      *(void *)(DerivedStorage + 64) = *(void *)v81;
      *(_DWORD *)(DerivedStorage + 72) = 1;
      goto LABEL_107;
    }
  }
  APSLogErrorAt();
  APSLogErrorAt();
LABEL_107:
  if (a1) {
    CFTypeRef v62 = CFRetain(a1);
  }
  else {
    CFTypeRef v62 = 0;
  }
  *(void *)&long long v83 = v62;
  CFTypeRef v63 = *(CFTypeRef *)(DerivedStorage + 248);
  if (v63) {
    CFTypeRef v63 = CFRetain(v63);
  }
  *((void *)&v83 + 1) = v63;
  HIDWORD(v88) = v36;
  if (a3) {
    CFTypeRef v64 = CFRetain(a3);
  }
  else {
    CFTypeRef v64 = 0;
  }
  *((void *)&v86 + 1) = v64;
  uint64_t v65 = *(void *)(DerivedStorage + 56);
  *(void *)&long long v84 = *(void *)v81;
  *(void *)&long long v85 = v65;
  CFTypeRef v66 = *(CFTypeRef *)(DerivedStorage + 136);
  if (v66) {
    CFTypeRef v66 = CFRetain(v66);
  }
  *((void *)&v84 + 1) = v66;
  uint64_t v67 = *(void *)(DerivedStorage + 240);
  CFAllocatorRef v68 = CFGetAllocator(a1);
  uint64_t v69 = APEndpointDescriptionGetCMBaseObject(v67);
  uint64_t v70 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v70) {
    uint64_t v71 = v70;
  }
  else {
    uint64_t v71 = 0;
  }
  uint64_t v72 = *(void (**)(uint64_t, __CFString *, CFAllocatorRef, char *))(v71 + 48);
  if (v72) {
    v72(v69, @"TransportDevice", v68, (char *)&v85 + 8);
  }
  *(void *)&long long v86 = APEndpointDescriptionCopyDebugString(*(void *)(DerivedStorage + 240));
  *(void *)&long long v87 = a4;
  *((void *)&v87 + 1) = a5;
  LOBYTE(v88) = BYTE4(v79);
  BYTE1(v88) = v79;
  APSDispatchAsyncFHelper();
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 40));
  if (value) {
    CFRelease(value);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v34) {
    CFRelease(v34);
  }
  if (v18) {
    CFRelease(v18);
  }
  if (cf) {
    CFRelease(cf);
  }
  return 0;
}

uint64_t spendpoint_Deactivate(const void *a1, const __CFDictionary *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  if (a2) {
    Boolean Value = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F20538]);
  }
  else {
    Boolean Value = 0;
  }
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 40));
  if (*(unsigned char *)(DerivedStorage + 48))
  {
    APSLogErrorAt();
    uint64_t v6 = 4294950573;
  }
  else
  {
    uint64_t v6 = *(void *)(DerivedStorage + 136);
    if (v6)
    {
      uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v7) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t v9 = *(void (**)(uint64_t))(v8 + 72);
      if (v9) {
        v9(v6);
      }
      uint64_t v6 = 0;
    }
  }
  CFRetain(a1);
  uint64_t v10 = *(const void **)(DerivedStorage + 248);
  if (v10) {
    CFRetain(v10);
  }
  if (Value) {
    CFRetain(Value);
  }
  uint64_t v11 = *(const void **)(DerivedStorage + 136);
  if (v11) {
    CFTypeRef v12 = CFRetain(v11);
  }
  else {
    CFTypeRef v12 = 0;
  }
  CFStringRef v13 = *(const void **)(DerivedStorage + 88);
  if (v13) {
    CFTypeRef v14 = CFRetain(v13);
  }
  else {
    CFTypeRef v14 = 0;
  }
  uint64_t v15 = *(const void **)(DerivedStorage + 176);
  if (v15) {
    CFRetain(v15);
  }
  uint64_t v16 = *(const void **)(DerivedStorage + 184);
  if (v16) {
    CFRetain(v16);
  }
  spendpoint_resetActivationState((uint64_t)a1, DerivedStorage + 56, *(void *)(DerivedStorage + 256));
  spendpoint_stopListeningToSenderSessionAndStreamsNotifications((uint64_t)a1, (uint64_t)v12, (uint64_t)v14);
  APSDispatchAsyncFHelper();
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 40));
  return v6;
}

uint64_t spendpoint_Dissociate(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v24 = 0;
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 40));
  int v3 = *(unsigned __int8 *)(DerivedStorage + 48);
  *(unsigned char *)(DerivedStorage + 48) = 1;
  CFRetain(a1);
  uint64_t v4 = *(const void **)(DerivedStorage + 248);
  if (v4) {
    CFRetain(v4);
  }
  CFTypeRef v5 = *(CFTypeRef *)(DerivedStorage + 136);
  if (v5) {
    CFTypeRef v5 = CFRetain(v5);
  }
  uint64_t v22 = (uint64_t)v5;
  CFTypeRef v6 = *(CFTypeRef *)(DerivedStorage + 88);
  if (v6) {
    CFTypeRef v6 = CFRetain(v6);
  }
  uint64_t v23 = (uint64_t)v6;
  uint64_t v7 = *(void *)(DerivedStorage + 240);
  if (v7)
  {
    CFAllocatorRef v8 = CFGetAllocator(a1);
    uint64_t CMBaseObject = APEndpointDescriptionGetCMBaseObject(v7);
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v11 = v10 ? v10 : 0;
    CFTypeRef v12 = *(void (**)(uint64_t, __CFString *, CFAllocatorRef, uint64_t *))(v11 + 48);
    if (v12) {
      v12(CMBaseObject, @"TransportDevice", v8, &v24);
    }
  }
  spendpoint_resetActivationState((uint64_t)a1, DerivedStorage + 56, *(void *)(DerivedStorage + 256));
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 40));
  if (!v3)
  {
    spendpoint_stopListeningToSenderSessionAndStreamsNotifications((uint64_t)a1, v22, v23);
    if (v22)
    {
      uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v13) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t v15 = *(void (**)(uint64_t, void, void, void, void))(v14 + 96);
      if (v15) {
        v15(v22, 0, 0, 0, 0);
      }
      uint64_t v16 = APSenderSessionGetCMBaseObject(v22);
      if (v16)
      {
        uint64_t v17 = v16;
        uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v19 = v18 ? v18 : 0;
        BOOL v20 = *(void (**)(uint64_t))(v19 + 24);
        if (v20) {
          v20(v17);
        }
      }
      if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
    }
    MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 40));
    spendpoint_clearEndpointState();
    APSDispatchAsyncFHelper();
    MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 40));
  }
  return 0;
}

uint64_t spendpoint_SetDelegate(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    long long v2 = *(_OWORD *)(a2 + 16);
    v5[0] = *(_OWORD *)a2;
    v5[1] = v2;
    uint64_t v6 = *(void *)(a2 + 32);
    uint64_t v3 = spendpoint_SetDelegateRouting(a1, (uint64_t)v5);
    if (v3) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v3 = spendpoint_SetDelegateRouting(a1, 0);
    if (v3) {
LABEL_6:
    }
      APSLogErrorAt();
  }
  return v3;
}

uint64_t spendpoint_SetDelegateRouting(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 40));
  if (*(unsigned char *)(DerivedStorage + 48))
  {
    APSLogErrorAt();
    a2 = 4294950573;
  }
  else
  {
    if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t v4 = *(const void **)(DerivedStorage + 232);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(DerivedStorage + 232) = 0;
    }
    CFTypeRef v5 = (_OWORD *)(DerivedStorage + 192);
    if (a2)
    {
      long long v6 = *(_OWORD *)a2;
      long long v7 = *(_OWORD *)(a2 + 16);
      *(void *)(DerivedStorage + 224) = *(void *)(a2 + 32);
      *CFTypeRef v5 = v6;
      *(_OWORD *)(DerivedStorage + 208) = v7;
      a2 = 0;
      *(void *)(DerivedStorage + 232) = FigCFWeakReferenceHolderCreateWithReferencedObject();
    }
    else
    {
      *(void *)(DerivedStorage + 224) = 0;
      *CFTypeRef v5 = 0u;
      *(_OWORD *)(DerivedStorage + 208) = 0u;
    }
  }
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 40));
  return a2;
}

void spendpoint_activateInternal(uint64_t a1)
{
  v73[1] = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v64 = 0;
  CFTypeRef v65 = 0;
  CFTypeRef cf = 0;
  if (*(void *)(a1 + 56))
  {
    if (CFDictionaryGetInt64()) {
      BOOL v3 = 1;
    }
    else {
      BOOL v3 = CFDictionaryGetInt64() != 0;
    }
  }
  else
  {
    BOOL v3 = 0;
  }
  int v4 = *(_DWORD *)(a1 + 84);
  if (v4 == -16727)
  {
    MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 40));
    if (*(void *)(a1 + 32) == *(void *)(DerivedStorage + 56) && *(_DWORD *)(DerivedStorage + 72) == 2)
    {
      LODWORD(v5) = 0;
      uint64_t v6 = *(void *)(DerivedStorage + 64);
    }
    else
    {
      uint64_t v6 = 0;
      LODWORD(v5) = -17604;
    }
    MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 40));
    if (!v5) {
      goto LABEL_16;
    }
    goto LABEL_79;
  }
  if (!v4)
  {
    if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
    {
      uint64_t v61 = *(void *)(a1 + 32);
      LogPrintF();
    }
    if (*(void *)(DerivedStorage + 24))
    {
      uint64_t CMBaseObject = APSenderSessionGetCMBaseObject(*(void *)(a1 + 24));
      uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v9 = v8 ? v8 : 0;
      uint64_t v10 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v9 + 48);
      if (v10)
      {
        v10(CMBaseObject, @"EventRecorder", *MEMORY[0x1E4F1CF80], &cf);
        if (cf)
        {
          MEMORY[0x1D25E8260](*(void *)(DerivedStorage + 24));
          if (cf) {
            CFRelease(cf);
          }
        }
      }
    }
    while (1)
    {
      uint64_t v11 = *(void *)(a1 + 24);
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v12) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v14 = *(uint64_t (**)(uint64_t))(v13 + 24);
      if (!v14)
      {
        LODWORD(v5) = -12782;
        goto LABEL_52;
      }
      int v15 = v14(v11);
      if (v15 <= 200400) {
        break;
      }
      if (v15 != 200401)
      {
        if (v15 == 200503)
        {
          LODWORD(v5) = -17609;
LABEL_52:
          APSLogErrorAt();
          uint64_t v16 = 0;
          uint64_t v6 = 0;
          goto LABEL_80;
        }
        if (v15 != 200470) {
          goto LABEL_157;
        }
      }
      if (v3)
      {
        APSLogErrorAt();
        uint64_t v16 = 0;
        uint64_t v6 = 0;
        LODWORD(v5) = -17600;
        goto LABEL_80;
      }
    }
    LODWORD(v5) = -17608;
    if (v15 == -71164 || v15 == -71145) {
      goto LABEL_52;
    }
    if (v15)
    {
LABEL_157:
      LODWORD(v5) = v15;
      goto LABEL_52;
    }
    CFTypeRef v57 = *(CFTypeRef *)a1;
    SNPrintF();
    uint64_t v16 = dispatch_queue_create(label, 0);
    if (v16)
    {
      if (!in_audio_mx_server_process())
      {
        id v19 = (id)objc_msgSend(MEMORY[0x1E4F74F68], "sharedAVSystemController", v57, "systemControllerQueue");
        if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
        {
          CFTypeRef v59 = *(CFTypeRef *)a1;
          uint64_t v60 = *(void *)(DerivedStorage + 256);
          LogPrintF();
        }
        uint64_t v72 = *MEMORY[0x1E4F74E50];
        uint64_t v23 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", &v72, 1, v59, v60, v61);
        [v19 setAttribute:v23 forKey:*MEMORY[0x1E4F74EA8] error:0];
        [v19 addRemoteDeviceID:*(void *)(DerivedStorage + 256)];
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
        uint64_t v18 = 0;
LABEL_69:
        MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 40));
        *(void *)(DerivedStorage + 152) = v18;
        *(void *)(DerivedStorage + 160) = v19;
        *(void *)(DerivedStorage + 168) = v16;
        if (*(void *)(a1 + 32) != *(void *)(DerivedStorage + 56) || *(_DWORD *)(DerivedStorage + 72) != 1)
        {
          uint64_t v6 = 0;
          LODWORD(v5) = -17604;
LABEL_78:
          MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 40));
          APSLogErrorAt();
LABEL_79:
          uint64_t v16 = 0;
          goto LABEL_80;
        }
        uint64_t v25 = *(void *)(a1 + 16);
        uint64_t v26 = CMBaseObjectGetDerivedStorage();
        CMBaseObjectGetDerivedStorage();
        uint64_t v27 = APSGetFBOPropertyInt64();
        if (*(void *)(v26 + 128))
        {
          uint64_t v28 = v27;
          CFDictionaryRef v29 = *(const __CFDictionary **)(v26 + 112);
          if (v29)
          {
            if ((v25 & 8) == 0 || !v28)
            {
              if (gLogCategory_SPEndpoint <= 90
                && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
              uint64_t v6 = 0;
              int v30 = 0;
              LODWORD(v5) = -16720;
LABEL_138:
              uint64_t v54 = *MEMORY[0x1E4F1CF80];
              CFMutableSetRef Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D548]);
              *(void *)(DerivedStorage + 88) = Mutable;
              if (Mutable)
              {
                if (v30)
                {
                  *(void *)(DerivedStorage + 64) = v6;
                  *(unsigned char *)(DerivedStorage + 96) = *(unsigned char *)(a1 + 81);
                  APSEventRecorderRecordEvent();
                  spendpoint_postPerformanceReport();
                  if (!*(unsigned char *)(a1 + 80))
                  {
                    APSenderSessionCopyProperty(*(void *)(a1 + 24), @"InitialRTCStats", v54, (uint64_t)&v64);
                    *(void *)(DerivedStorage + 176) = FigCFDictionaryCreateMutableCopy();
                    CFDictionarySetInt64();
                    APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursive();
                    CFDictionarySetInt64();
                    APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursive();
                    CFDictionarySetInt64();
                    APSRTCReportingAgentCreate();
                  }
                  *(_DWORD *)(DerivedStorage + 72) = 2;
                  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 40));
                  if (introspector_getCollectionOfActiveSPEndpoints_once != -1) {
                    dispatch_once(&introspector_getCollectionOfActiveSPEndpoints_once, &__block_literal_global_34);
                  }
                  if (introspector_getCollectionOfActiveSPEndpoints_coll)
                  {
                    int v56 = *(NSObject **)introspector_getCollectionOfActiveSPEndpoints_coll;
                    block[0] = MEMORY[0x1E4F143A8];
                    block[1] = 3221225472;
                    block[2] = __spendpoint_activateInternal_block_invoke;
                    block[3] = &__block_descriptor_48_e5_v8__0l;
                    void block[4] = introspector_getCollectionOfActiveSPEndpoints_coll;
                    void block[5] = a1;
                    dispatch_sync(v56, block);
                  }
                  goto LABEL_16;
                }
              }
              else
              {
                if (gLogCategory_SPEndpoint <= 90
                  && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
                {
                  LogPrintF();
                }
                LODWORD(v5) = -16721;
              }
              goto LABEL_78;
            }
            if (CFDictionaryGetValue(v29, (const void *)*MEMORY[0x1E4F21470]))
            {
              LODWORD(v5) = 0;
              int v30 = 1;
              uint64_t v6 = 8;
              goto LABEL_138;
            }
          }
        }
        APSLogErrorAt();
        uint64_t v6 = 0;
        int v30 = 0;
        LODWORD(v5) = -17606;
        goto LABEL_138;
      }
      uint64_t v17 = objc_msgSend(objc_alloc(MEMORY[0x1E4F74F70]), "initWithPID:remoteDeviceID:", getpid(), *(void *)(DerivedStorage + 256), v57, "systemControllerQueue");
      if (v17)
      {
        uint64_t v18 = (void *)v17;
        if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
        {
          CFTypeRef v58 = *(CFTypeRef *)a1;
          LogPrintF();
        }
        uint64_t v24 = *MEMORY[0x1E4F76A38];
        v73[0] = *MEMORY[0x1E4F769B0];
        objc_msgSend(v18, "setAttributeForKey:andValue:", v24, objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v73, 1, v58));
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
        id v19 = 0;
        goto LABEL_69;
      }
      APSLogErrorAt();
      uint64_t v6 = 0;
      LODWORD(v5) = -6728;
    }
    else
    {
      APSLogErrorAt();
      uint64_t v6 = 0;
      LODWORD(v5) = -16721;
    }
LABEL_80:
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    *(_OWORD *)label = 0u;
    long long v67 = 0u;
    if (gLogCategory_SPEndpoint <= 90 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 40));
    if (*(void *)(a1 + 32) == *(void *)(DerivedStorage + 56) && *(_DWORD *)(DerivedStorage + 72) == 1)
    {
      *(void *)label = CFRetain(*(CFTypeRef *)a1);
      CFTypeRef v31 = *(CFTypeRef *)(DerivedStorage + 248);
      if (v31) {
        CFTypeRef v31 = CFRetain(v31);
      }
      *(void *)&char label[8] = v31;
      CFTypeRef v32 = CFRetain(@"FailedActivation");
      DWORD2(v69) = 0;
      long long v71 = 0uLL;
      uint64_t v33 = *(void *)(a1 + 32);
      *(void *)&long long v67 = v32;
      uint64_t v35 = *(void *)(a1 + 16);
      uint64_t v34 = *(const void **)(a1 + 24);
      *((void *)&v68 + 1) = v33;
      *(void *)&long long v69 = v35;
      if (v34) {
        CFTypeRef v36 = CFRetain(v34);
      }
      else {
        CFTypeRef v36 = 0;
      }
      *((void *)&v67 + 1) = v36;
      CFTypeRef v37 = *(const void **)(DerivedStorage + 88);
      if (v37) {
        CFTypeRef v38 = CFRetain(v37);
      }
      else {
        CFTypeRef v38 = 0;
      }
      *(void *)&long long v68 = v38;
      CFTypeRef v39 = *(CFTypeRef *)(DerivedStorage + 176);
      if (v39) {
        CFTypeRef v39 = CFRetain(v39);
      }
      *(void *)&long long v70 = v39;
      CFTypeRef v40 = *(CFTypeRef *)(DerivedStorage + 184);
      if (v40) {
        CFTypeRef v40 = CFRetain(v40);
      }
      *((void *)&v70 + 1) = v40;
      spendpoint_resetActivationState(*(void *)a1, DerivedStorage + 56, *(void *)(DerivedStorage + 256));
      spendpoint_stopListeningToSenderSessionAndStreamsNotifications(*(void *)a1, (uint64_t)v36, (uint64_t)v38);
      APSDispatchAsyncFHelper();
    }
    MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 40));
    if (v5 != -17600 && v3) {
      LODWORD(v5) = -17601;
    }
    goto LABEL_104;
  }
  APSLogErrorAt();
  uint64_t v6 = 0;
  LODWORD(v5) = *(_DWORD *)(a1 + 84);
  if (v5) {
    goto LABEL_79;
  }
LABEL_16:
  if (gLogCategory_SPEndpoint <= 50)
  {
    if (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()) {
      LogPrintF();
    }
    if (gLogCategory_SPEndpoint <= 30 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
  }
  CFDictionaryRef v20 = *(const __CFDictionary **)(DerivedStorage + 176);
  if (v20) {
    BOOL v21 = *(void *)(DerivedStorage + 184) == 0;
  }
  else {
    BOOL v21 = 1;
  }
  if (v21) {
    goto LABEL_64;
  }
  uint64_t MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v20);
  CFTypeRef v5 = MutableCopy;
  if (MutableCopy)
  {
    CFDictionarySetValue(MutableCopy, @"isSidePlay", (const void *)*MEMORY[0x1E4F1CFD0]);
    APSRTCReportingAgentSendEvent();
    CFRelease(v5);
LABEL_64:
    uint64_t v16 = 0;
    LODWORD(v5) = 0;
    goto LABEL_104;
  }
  APSLogErrorAt();
  uint64_t v16 = 0;
LABEL_104:
  uint64_t v42 = *(void *)(a1 + 64);
  if (v42)
  {
    CFTypeRef v43 = *(CFTypeRef *)a1;
    uint64_t v44 = *(void *)(a1 + 32);
    *(void *)label = *(void *)a1;
    *(void *)&char label[8] = v44;
    if (v5) {
      uint64_t v45 = 0;
    }
    else {
      uint64_t v45 = v6;
    }
    *(void *)&long long v67 = v45;
    *((void *)&v67 + 1) = v5;
    uint64_t v46 = *(void *)(a1 + 72);
    *(void *)&long long v68 = v42;
    *((void *)&v68 + 1) = v46;
    CFRetain(v43);
    APSDispatchAsyncFHelper();
  }
  if (!v5)
  {
    CFAllocatorRef v47 = CFGetAllocator(*(CFTypeRef *)a1);
    APEndpointCreateEndpointActivationNotificationPayload(v47, v6, *(void *)(a1 + 32), (CFMutableDictionaryRef *)&v65);
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    if (v65)
    {
      CFRelease(v65);
      CFTypeRef v65 = 0;
    }
    CFAllocatorRef v48 = CFGetAllocator(*(CFTypeRef *)a1);
    APEndpointCreateStreamsChangedNotificationPayload(v48, v6, *(void *)(a1 + 32), 1, (CFMutableDictionaryRef *)&v65);
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    if (v65)
    {
      CFRelease(v65);
      CFTypeRef v65 = 0;
    }
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  CMTimeValue v49 = *(const void **)(a1 + 8);
  if (v49) {
    CFRelease(v49);
  }
  uint64_t v50 = *(const void **)(a1 + 56);
  if (v50) {
    CFRelease(v50);
  }
  int v51 = *(const void **)(a1 + 24);
  if (v51) {
    CFRelease(v51);
  }
  uint64_t v52 = *(const void **)(a1 + 40);
  if (v52) {
    CFRelease(v52);
  }
  uint64_t v53 = *(const void **)(a1 + 48);
  if (v53) {
    CFRelease(v53);
  }
  if (v65) {
    CFRelease(v65);
  }
  if (v64) {
    CFRelease(v64);
  }
  if (v16) {
    dispatch_release(v16);
  }
}

uint64_t spendpoint_handleEventMessage()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPEndpoint <= 40)
  {
    if (gLogCategory_SPEndpoint != -1) {
      return LogPrintF();
    }
    uint64_t result = _LogCategory_Initialize();
    if (result) {
      return LogPrintF();
    }
  }
  return result;
}

uint64_t spendpoint_handleEventMessageCreatingReply(uint64_t a1, int a2, uint64_t a3, int a4, void *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 40));
  int v9 = *(unsigned __int8 *)(DerivedStorage + 48);
  uint64_t v10 = *(void *)(DerivedStorage + 136);
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 40));
  if (v10) {
    BOOL v11 = v9 == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (!v11)
  {
    if (v9) {
      unsigned int v23 = -16723;
    }
    else {
      unsigned int v23 = 0;
    }
    if (v10) {
      uint64_t v19 = v23;
    }
    else {
      uint64_t v19 = 4294950570;
    }
    goto LABEL_48;
  }
  if (a2 == 1668116068)
  {
    CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t CFDataWithBlockBufferNoCopy = FigCreateCFDataWithBlockBufferNoCopy();
    if (CFDataWithBlockBufferNoCopy)
    {
      uint64_t v19 = CFDataWithBlockBufferNoCopy;
LABEL_48:
      APSLogErrorAt();
      CFDictionaryRef v15 = 0;
      goto LABEL_33;
    }
    CFDictionaryRef v14 = (const __CFDictionary *)CFPropertyListCreateWithData(v12, 0, 0, 0, 0);
    CFDictionaryRef v15 = v14;
    if (!v14 || (CFTypeID v16 = CFGetTypeID(v14), v16 != CFDictionaryGetTypeID()))
    {
      APSLogErrorAt();
      uint64_t v19 = 4294950576;
      goto LABEL_33;
    }
    CMBaseObjectGetDerivedStorage();
    Boolean Value = CFDictionaryGetValue(v15, @"type");
    if (!Value)
    {
LABEL_32:
      uint64_t v19 = 0;
      *a5 = 0;
      goto LABEL_33;
    }
    uint64_t v18 = Value;
    if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    if (CFEqual(v18, @"updateInfo"))
    {
      if (gLogCategory_SPEndpoint > 50 || gLogCategory_SPEndpoint == -1 && !_LogCategory_Initialize()) {
        goto LABEL_32;
      }
      goto LABEL_23;
    }
    if (CFEqual(v18, @"interruptionBegan"))
    {
      uint64_t v20 = spendpoint_processInterruptionCommand(a4, v15, 1);
      if (!v20) {
        goto LABEL_32;
      }
      uint64_t v19 = v20;
    }
    else
    {
      if (!CFEqual(v18, @"interruptionEnded"))
      {
        if (gLogCategory_SPEndpoint > 60 || gLogCategory_SPEndpoint == -1 && !_LogCategory_Initialize()) {
          goto LABEL_32;
        }
LABEL_23:
        LogPrintF();
        goto LABEL_32;
      }
      uint64_t v21 = spendpoint_processInterruptionCommand(a4, v15, 0);
      if (!v21) {
        goto LABEL_32;
      }
      uint64_t v19 = v21;
    }
    APSLogErrorAt();
    APSLogErrorAt();
    goto LABEL_33;
  }
  if (gLogCategory_SPEndpoint <= 60 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  CFDictionaryRef v15 = 0;
  uint64_t v19 = 4294950678;
LABEL_33:
  if (v15) {
    CFRelease(v15);
  }
  return v19;
}

uint64_t spendpoint_processInterruptionCommand(int a1, CFDictionaryRef theDict, int a3)
{
  if (a3) {
    BOOL v3 = @"InterruptionBegan";
  }
  else {
    BOOL v3 = @"InterruptionEnded";
  }
  if (CFDictionaryGetValue(theDict, @"streamID"))
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v10 = 0;
    BOOL v11 = &v10;
    uint64_t v12 = 0x2020000000;
    uint64_t v13 = 0;
    MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 40));
    CFSetApplyBlock();
    MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 40));
    CFTypeRef v5 = (const void *)v11[3];
    _Block_object_dispose(&v10, 8);
    if (v5)
    {
      if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v6) {
        uint64_t v7 = v6;
      }
      else {
        uint64_t v7 = 0;
      }
      uint64_t v8 = *(void (**)(const void *, __CFString *, void))(v7 + 40);
      if (v8) {
        v8(v5, v3, 0);
      }
      CFRelease(v5);
      return 0;
    }
    else
    {
      if (gLogCategory_SPEndpoint <= 60 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      return 4294960569;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
}

void sub_1D0A998D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __spendpoint_copyStreamForID_block_invoke(uint64_t a1, const void *a2)
{
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    CFTypeRef cf = 0;
    uint64_t CMBaseObject = FigEndpointStreamGetCMBaseObject();
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v6 + 48);
    if (v7) {
      v7(CMBaseObject, @"StreamID", *MEMORY[0x1E4F1CF80], &cf);
    }
    if (FigCFEqual()) {
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFRetain(a2);
    }
    if (cf) {
      CFRelease(cf);
    }
  }
}

uint64_t spendpoint_handleSenderSessionStarted()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = result;
  if (gLogCategory_SPEndpoint <= 30)
  {
    if (gLogCategory_SPEndpoint != -1 || (uint64_t result = _LogCategory_Initialize(), result)) {
      uint64_t result = LogPrintF();
    }
  }
  if (!*(unsigned char *)(v1 + 48))
  {
    MEMORY[0x1D25EB370](*(void *)(v1 + 40));
    CMBaseObjectGetDerivedStorage();
    JUMPOUT(0x1D25EB390);
  }
  return result;
}

uint64_t spendpoint_handleSenderSessionFailed(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const void *a5)
{
  if (gLogCategory_SPEndpoint <= 90 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  CFRetain(a2);
  if (a5) {
    CFRetain(a5);
  }
  return APSDispatchAsyncFHelper();
}

void spendpoint_updateStatus(const void *a1, int a2, int a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  if (*(unsigned char *)(DerivedStorage + 48)) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = a2 == 0;
  }
  if (!v7)
  {
    uint64_t v8 = (void *)DerivedStorage;
    *(_DWORD *)(DerivedStorage + 272) = a2;
    CFAllocatorRef v9 = CFGetAllocator(a1);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFMutableDictionaryRef v11 = Mutable;
      CFAllocatorRef v12 = CFGetAllocator(a1);
      CFMutableDictionaryRef v13 = CFDictionaryCreateMutable(v12, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (!v13)
      {
        APSLogErrorAt();
LABEL_52:
        CFRelease(v11);
        return;
      }
      CFDictionaryRef v14 = v13;
      CFDictionarySetInt64();
      if (a2 == 200470 || a2 == 200401)
      {
        if (gLogCategory_SPEndpoint > 30 || gLogCategory_SPEndpoint == -1 && !_LogCategory_Initialize()) {
          goto LABEL_35;
        }
      }
      else
      {
        CFDictionarySetInt64();
        CFDictionarySetInt64();
        CFDictionaryRef v15 = (const void **)MEMORY[0x1E4F20678];
        BOOL v16 = a3 == 0;
        if (!a3) {
          CFDictionaryRef v15 = (const void **)MEMORY[0x1E4F20680];
        }
        uint64_t v17 = (const void *)*MEMORY[0x1E4F205A0];
        if (v16) {
          uint64_t v18 = (const void **)MEMORY[0x1E4F20588];
        }
        else {
          uint64_t v18 = (const void **)MEMORY[0x1E4F20580];
        }
        CFDictionarySetValue(v11, (const void *)*MEMORY[0x1E4F206A0], *v15);
        CFDictionarySetValue(v14, v17, *v18);
        if (v8[26])
        {
          if (v8[29] && (uint64_t v19 = FigCFWeakReferenceHolderCopyReferencedObject(), v8[29]) && !v19)
          {
            if (gLogCategory_SPEndpoint > 90) {
              goto LABEL_35;
            }
            if (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()) {
              LogPrintF();
            }
          }
          else
          {
            CFRetain(a1);
            CFRetain(v14);
            if (gLogCategory_SPEndpoint <= 50
              && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            APSDispatchAsyncFHelper();
          }
        }
        if (gLogCategory_SPEndpoint > 30 || gLogCategory_SPEndpoint == -1 && !_LogCategory_Initialize()) {
          goto LABEL_35;
        }
      }
      LogPrintF();
LABEL_35:
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
      if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      if (a2 == -16613)
      {
        uint64_t v20 = v8[30];
        CFAllocatorRef v21 = CFGetAllocator(a1);
        uint64_t CMBaseObject = APEndpointDescriptionGetCMBaseObject(v20);
        uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v24 = v23 ? v23 : 0;
        uint64_t v25 = *(void (**)(uint64_t, __CFString *, CFAllocatorRef, CFTypeRef *))(v24 + 48);
        if (v25)
        {
          v25(CMBaseObject, @"TransportDevice", v21, &cf);
          if (cf)
          {
            if (gLogCategory_SPEndpoint <= 50
              && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            APTransportDeviceReconfirm();
            if (cf) {
              CFRelease(cf);
            }
          }
        }
      }
      CFRelease(v14);
      goto LABEL_52;
    }
    APSLogErrorAt();
  }
}

void spendpoint_callDelegateHandleFailed(uint64_t a1)
{
  (*(void (**)(void, void, void, void))(a1 + 24))(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 32));
  CFRelease(*(CFTypeRef *)a1);
  CFRelease(*(CFTypeRef *)(a1 + 16));
  long long v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
  }
}

void spendpoint_deferredHandleSenderSessionFailed(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFDictionaryRef v3 = *(const __CFDictionary **)(a1 + 8);
  int Int64 = CFDictionaryGetInt64();
  CFDictionaryGetValue(v3, @"SessionState");
  int v5 = FigCFEqual();
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 40));
  if (*(_DWORD *)(DerivedStorage + 72) == 2) {
    spendpoint_updateStatus(*(const void **)a1, Int64, v5 == 0);
  }
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 40));
  CFRelease(*(CFTypeRef *)a1);
  uint64_t v6 = *(const void **)(a1 + 8);
  if (v6)
  {
    CFRelease(v6);
  }
}

uint64_t spendpoint_postPerformanceReport()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPEndpoint <= 40)
  {
    if (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()) {
      LogPrintF();
    }
    if (gLogCategory_SPEndpoint <= 40)
    {
      if (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()) {
        LogPrintF();
      }
      if (gLogCategory_SPEndpoint <= 40)
      {
        if (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()) {
          LogPrintF();
        }
        if (gLogCategory_SPEndpoint <= 40)
        {
          if (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()) {
            LogPrintF();
          }
          if (gLogCategory_SPEndpoint <= 40
            && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
        }
      }
    }
  }
  spendpoint_logEventInterval(*(void *)(DerivedStorage + 24), 268369920, 268369921, (uint64_t)"Total AirPlay Contribution (Endpoint Activate Start To Endpoint Activate Complete)");
  spendpoint_logEvent(*(void *)(DerivedStorage + 24), 268369920, (uint64_t)"EndpointActivate");
  spendpoint_logEvent(*(void *)(DerivedStorage + 24), 150994945, (uint64_t)"ResolveDNSTime");
  if (gLogCategory_SPEndpoint <= 40)
  {
    if (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()) {
      LogPrintF();
    }
    if (gLogCategory_SPEndpoint <= 40)
    {
      if (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()) {
        LogPrintF();
      }
      if (gLogCategory_SPEndpoint <= 40 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
    }
  }
  spendpoint_logEvent(*(void *)(DerivedStorage + 32), 268431360, (uint64_t)"PresenceBrowsing_Start");
  spendpoint_logEvent(*(void *)(DerivedStorage + 32), 268431361, (uint64_t)"DetailedNonP2PBrowsing_Start");
  spendpoint_logEvent(*(void *)(DerivedStorage + 32), 268431362, (uint64_t)"DetailedBrowsing_Start");
  spendpoint_logTransportDiscoveryDurationIfEventPresent();
  spendpoint_logTransportDiscoveryDurationIfEventPresent();
  spendpoint_logTransportDiscoveryDurationIfEventPresent();
  spendpoint_logTransportDiscoveryDurationIfEventPresent();
  spendpoint_logTransportDiscoveryDurationIfEventPresent();
  spendpoint_logTransportDiscoveryDurationIfEventPresent();
  spendpoint_logTransportDiscoveryDurationIfEventPresent();
  spendpoint_logTransportDiscoveryDurationIfEventPresent();
  spendpoint_logTransportDiscoveryDurationIfEventPresent();
  spendpoint_logTransportDiscoveryDurationIfEventPresent();
  spendpoint_logTransportDiscoveryDurationIfEventPresent();
  spendpoint_logTransportDiscoveryDurationIfEventPresent();
  spendpoint_logTransportDiscoveryDurationIfEventPresent();
  spendpoint_logTransportDiscoveryDurationIfEventPresent();
  spendpoint_logTransportDiscoveryDurationIfEventPresent();
  spendpoint_logTransportDiscoveryDurationIfEventPresent();
  if (gLogCategory_SPEndpoint <= 40)
  {
    if (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()) {
      LogPrintF();
    }
    if (gLogCategory_SPEndpoint <= 40)
    {
      if (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()) {
        LogPrintF();
      }
      if (gLogCategory_SPEndpoint <= 40 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
    }
  }
  spendpoint_logEvent(*(void *)(DerivedStorage + 24), 150994944, (uint64_t)"QuerySRVTime");
  spendpoint_logEvent(*(void *)(DerivedStorage + 24), 150994946, (uint64_t)"ControlStreamConnectingTime");
  spendpoint_logEvent(*(void *)(DerivedStorage + 24), 150994948, (uint64_t)"ControlStreamConnectedTime");
  spendpoint_logEvent(*(void *)(DerivedStorage + 24), 250609664, (uint64_t)"EndpointConnectionStartTime");
  spendpoint_logEvent(*(void *)(DerivedStorage + 24), 250609666, (uint64_t)"EndpointGetInfoCompleteTime");
  spendpoint_logEventInterval(*(void *)(DerivedStorage + 24), 250609665, 250609666, (uint64_t)"INFOTimeMs");
  CMBaseObjectGetDerivedStorage();
  APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursive();
  APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursive();
  APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursive();
  if (gLogCategory_SPEndpoint <= 40 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  spendpoint_logEventInterval(*(void *)(DerivedStorage + 24), 150994946, 150994948, (uint64_t)"ConnectTimeMs");
  spendpoint_logEventInterval(*(void *)(DerivedStorage + 24), 250609677, 250609678, (uint64_t)"EndpointAUTHTimeMs");
  uint64_t result = spendpoint_logEventInterval(*(void *)(DerivedStorage + 24), 250609675, 250609676, (uint64_t)"EndpointRECORDTimeMs");
  if (gLogCategory_SPEndpoint <= 40)
  {
    if (gLogCategory_SPEndpoint != -1 || (uint64_t result = _LogCategory_Initialize(), result))
    {
      return LogPrintF();
    }
  }
  return result;
}

void __spendpoint_activateInternal_block_invoke(uint64_t a1)
{
}

uint64_t spendpoint_stopListeningToSenderSessionAndStreamsNotifications(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    uint64_t result = FigNotificationCenterRemoveWeakListener();
  }
  if (a3) {
    return CFSetApplyBlock();
  }
  return result;
}

void spendpoint_deactivateInternal(uint64_t a1)
{
  CMBaseObjectGetDerivedStorage();
  long long v2 = dispatch_semaphore_create(0);
  long long v27 = 0u;
  long long v28 = 0u;
  long long v26 = 0u;
  if (*(_DWORD *)(a1 + 56))
  {
    APSLogErrorAt();
    unsigned int v9 = *(_DWORD *)(a1 + 56);
  }
  else
  {
    if (*(void *)(a1 + 24))
    {
      if (introspector_getCollectionOfActiveSPEndpoints_once != -1) {
        dispatch_once(&introspector_getCollectionOfActiveSPEndpoints_once, &__block_literal_global_34);
      }
      if (introspector_getCollectionOfActiveSPEndpoints_coll)
      {
        CFDictionaryRef v3 = *(NSObject **)introspector_getCollectionOfActiveSPEndpoints_coll;
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = __spendpoint_deactivateInternal_block_invoke;
        block[3] = &__block_descriptor_48_e5_v8__0l;
        void block[4] = introspector_getCollectionOfActiveSPEndpoints_coll;
        void block[5] = a1;
        dispatch_sync(v3, block);
      }
      if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      CMBaseObjectGetDerivedStorage();
      APSEventRecorderReset();
      *(void *)&long long v26 = *(void *)a1;
      CFTypeRef v4 = *(CFTypeRef *)(a1 + 24);
      if (v4) {
        CFTypeRef v4 = CFRetain(v4);
      }
      *((void *)&v26 + 1) = v4;
      CFTypeRef v5 = *(CFTypeRef *)(a1 + 32);
      if (v5) {
        CFTypeRef v5 = CFRetain(v5);
      }
      *(void *)&long long v27 = v5;
      CFTypeRef v6 = *(CFTypeRef *)(a1 + 64);
      if (v6) {
        CFTypeRef v6 = CFRetain(v6);
      }
      *((void *)&v27 + 1) = v6;
      CFTypeRef v7 = *(CFTypeRef *)(a1 + 72);
      if (v7) {
        CFTypeRef v7 = CFRetain(v7);
      }
      *(void *)&long long v28 = v7;
      *((void *)&v28 + 1) = v2;
      dispatch_retain(v2);
      APSDispatchAsyncFHelper();
      dispatch_time_t v8 = dispatch_time(0, 4000000000);
      if (dispatch_semaphore_wait(v2, v8)
        && gLogCategory_SPEndpoint <= 40
        && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    else
    {
      APSLogErrorAt();
    }
    unsigned int v9 = 0;
  }
  uint64_t v10 = *(void *)(a1 + 80);
  if (v10)
  {
    CFDictionaryRef theDict = *(CFDictionaryRef *)a1;
    long long v21 = *(_OWORD *)(a1 + 40);
    uint64_t v23 = v10;
    uint64_t v22 = v9;
    uint64_t v24 = *(void *)(a1 + 88);
    CFRetain(theDict);
    APSDispatchAsyncFHelper();
  }
  if (!v9 && !FigCFEqual())
  {
    CFDictionaryRef theDict = 0;
    CFAllocatorRef v11 = CFGetAllocator(*(CFTypeRef *)a1);
    APEndpointCreateEndpointActivationNotificationPayload(v11, *(void *)(a1 + 48), *(void *)(a1 + 40), &theDict);
    CFAllocatorRef v12 = CFGetAllocator(*(CFTypeRef *)a1);
    uint64_t MutableCopy = CFDictionaryCreateMutableCopy(v12, 0, theDict);
    CFDictionarySetValue(MutableCopy, @"WasAutoconnected", (const void *)*MEMORY[0x1E4F1CFC8]);
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    if (theDict) {
      CFRelease(theDict);
    }
    if (MutableCopy) {
      CFRelease(MutableCopy);
    }
  }
  CFRelease(*(CFTypeRef *)a1);
  CFDictionaryRef v14 = *(const void **)(a1 + 8);
  if (v14) {
    CFRelease(v14);
  }
  CFDictionaryRef v15 = *(const void **)(a1 + 24);
  if (v15) {
    CFRelease(v15);
  }
  BOOL v16 = *(const void **)(a1 + 32);
  if (v16) {
    CFRelease(v16);
  }
  uint64_t v17 = *(const void **)(a1 + 16);
  if (v17) {
    CFRelease(v17);
  }
  uint64_t v18 = *(const void **)(a1 + 64);
  if (v18) {
    CFRelease(v18);
  }
  uint64_t v19 = *(const void **)(a1 + 72);
  if (v19) {
    CFRelease(v19);
  }
  dispatch_release(v2);
}

uint64_t spendpoint_logEventInterval(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t result = APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursive();
    if (gLogCategory_SPEndpoint <= 40)
    {
      if (gLogCategory_SPEndpoint != -1) {
        return LogPrintF();
      }
      uint64_t result = _LogCategory_Initialize();
      if (result) {
        return LogPrintF();
      }
    }
  }
  else
  {
    return APSLogErrorAt();
  }
  return result;
}

void spendpoint_logEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    APSEventRecorderGetEventTimeRecursive();
    StringWithEventRecorderTime = (const void *)APSEventRecorderCreateStringWithEventRecorderTime();
    if (gLogCategory_SPEndpoint <= 40 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    if (StringWithEventRecorderTime)
    {
      CFRelease(StringWithEventRecorderTime);
    }
  }
  else
  {
    APSLogErrorAt();
  }
}

uint64_t spendpoint_logTransportDiscoveryDurationIfEventPresent()
{
  uint64_t result = APSEventRecorderGetEventTimeRecursive();
  if (v1 != 0.0)
  {
    APBrowserGetStartEventForBrowserDeviceEvent();
    uint64_t result = APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursive();
    if (gLogCategory_SPEndpoint <= 40)
    {
      if (gLogCategory_SPEndpoint != -1) {
        return LogPrintF();
      }
      uint64_t result = _LogCategory_Initialize();
      if (result) {
        return LogPrintF();
      }
    }
  }
  return result;
}

uint64_t __spendpoint_stopListeningToSenderSessionAndStreamsNotifications_block_invoke()
{
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  return FigNotificationCenterRemoveWeakListener();
}

uint64_t spendpoint_handleStreamFailed(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int Int64 = -71850;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a5)
  {
    int Int64 = CFDictionaryGetInt64();
    FigCFDictionaryGetBooleanIfPresent();
  }
  if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 40));
  spendpoint_updateStatus(a2, Int64, 1);
  return MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 40));
}

void __spendpoint_deactivateInternal_block_invoke(uint64_t a1)
{
}

void spendpoint_suspendDissociateAndReleaseStreamsAndStopSenderSession(uint64_t a1)
{
  if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  if (*(void *)(a1 + 16)) {
    CFSetApplyBlock();
  }
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v3) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    CFTypeRef v5 = *(void (**)(uint64_t, void, void, void, void))(v4 + 96);
    if (v5) {
      v5(v2, 0, 0, 0, 0);
    }
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    unsigned int v9 = *(void (**)(uint64_t))(v8 + 80);
    if (v9) {
      v9(v6);
    }
    uint64_t CMBaseObject = APSenderSessionGetCMBaseObject(*(void *)(a1 + 8));
    if (CMBaseObject)
    {
      uint64_t v11 = CMBaseObject;
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v13 = v12 ? v12 : 0;
      CFDictionaryRef v14 = *(void (**)(uint64_t))(v13 + 24);
      if (v14) {
        v14(v11);
      }
    }
    CFDictionaryRef v15 = *(const void **)(a1 + 8);
    if (v15) {
      CFRelease(v15);
    }
  }
  BOOL v16 = *(const void **)(a1 + 16);
  if (v16) {
    CFRelease(v16);
  }
  *(void *)a1 = 0;
  uint64_t v17 = *(const void **)(a1 + 24);
  if (v17) {
    CFRelease(v17);
  }
  uint64_t v18 = *(const void **)(a1 + 32);
  if (v18) {
    CFRelease(v18);
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
  dispatch_release(*(dispatch_object_t *)(a1 + 40));
}

void __spendpoint_suspendDissociateAndReleaseStreamsAndStopSenderSession_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(void (**)(uint64_t, void, void, void))(v5 + 8);
  if (v6) {
    v6(a2, 0, 0, 0);
  }
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  unsigned int v9 = *(void (**)(uint64_t))(v8 + 32);
  if (v9) {
    v9(a2);
  }
  uint64_t v10 = *(void *)(a1 + 32);
  if (*(void *)(v10 + 32))
  {
    uint64_t v11 = *(void *)(v10 + 24);
    CFTypeRef cf = 0;
    if (v11)
    {
      uint64_t CMBaseObject = FigEndpointStreamGetCMBaseObject();
      uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v13) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = 0;
      }
      CFDictionaryRef v15 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v14 + 48);
      if (v15)
      {
        v15(CMBaseObject, @"RTCStats", *MEMORY[0x1E4F1CF80], &cf);
        if (cf)
        {
          FigCFArrayApplyFunction();
          if (cf) {
            CFRelease(cf);
          }
        }
      }
    }
    else
    {
      APSLogErrorAt();
    }
  }
}

void spendpoint_reportStreamMetricsArrayIterator(const __CFDictionary *a1, CFDictionaryRef *a2)
{
  if (a2 && a1 && *a2)
  {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, *a2);
    if (MutableCopy)
    {
      CFMutableDictionaryRef v4 = MutableCopy;
      if (CFDictionaryMergeDictionary() || !CFDictionaryGetValue(a1, @"sessionType"))
      {
        APSLogErrorAt();
      }
      else
      {
        if (FigCFEqual()) {
          APSRTCReportingAgentSendEvent();
        }
        if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())) {
          LogPrintF();
        }
      }
      CFRelease(v4);
    }
    else
    {
      APSLogErrorAt();
    }
  }
}

void spendpoint_dissociateInternal(uint64_t a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef v10 = 0;
  if (introspector_getCollectionOfActiveSPEndpoints_once != -1) {
    dispatch_once(&introspector_getCollectionOfActiveSPEndpoints_once, &__block_literal_global_34);
  }
  if (introspector_getCollectionOfActiveSPEndpoints_coll)
  {
    uint64_t v3 = *(NSObject **)introspector_getCollectionOfActiveSPEndpoints_coll;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __spendpoint_dissociateInternal_block_invoke;
    block[3] = &__block_descriptor_48_e5_v8__0l;
    void block[4] = introspector_getCollectionOfActiveSPEndpoints_coll;
    void block[5] = a1;
    dispatch_sync(v3, block);
  }
  if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  if (*(void *)(a1 + 24)) {
    CFSetApplyBlock();
  }
  CMBaseObjectGetDerivedStorage();
  APSEventRecorderReset();
  MEMORY[0x1D25EB370](DerivedStorage[5]);
  spendpoint_updateStatus(*(const void **)a1, -16723, 1);
  MEMORY[0x1D25EB390](DerivedStorage[5]);
  if (*DerivedStorage)
  {
    CFAllocatorRef v4 = CFGetAllocator(*(CFTypeRef *)a1);
    APEndpointCreateEndpointActivationNotificationPayload(v4, *(void *)(a1 + 40), *(void *)(a1 + 32), &v10);
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    if (v10) {
      CFRelease(v10);
    }
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  uint64_t v5 = *(const void **)(a1 + 8);
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = *(const void **)(a1 + 48);
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = *(const void **)(a1 + 24);
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v8 = *(const void **)(a1 + 16);
  if (v8) {
    CFRelease(v8);
  }
}

void __spendpoint_dissociateInternal_block_invoke(uint64_t a1)
{
}

uint64_t __spendpoint_dissociateInternal_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v6 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v5 = v6;
  if (v6) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t))(v7 + 32);
  if (v8)
  {
    return v8(a2);
  }
  return result;
}

uint64_t spEndpoint_DuckAudio()
{
  uint64_t FigEndpoint = (const void *)FigEndpointExtendedGetFigEndpoint();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableDictionaryRef v3 = Mutable;
    CFStringGetTypeID();
    TypedBoolean Value = (const void *)CFDictionaryGetTypedValue();
    if (CFEqual(TypedValue, (CFTypeRef)*MEMORY[0x1E4F20550]))
    {
      uint64_t v5 = @"duckAudio";
    }
    else
    {
      if (!CFEqual(TypedValue, (CFTypeRef)*MEMORY[0x1E4F20558]))
      {
        unsigned int v7 = -16720;
        goto LABEL_22;
      }
      uint64_t v5 = @"unduckAudio";
    }
    if ((!FigCFDictionaryGetDoubleIfPresent() || (unsigned int v7 = CFDictionarySetDouble()) == 0)
      && (!FigCFDictionaryGetDoubleIfPresent() || (unsigned int v7 = CFDictionarySetDouble()) == 0))
    {
      MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 40));
      unsigned int v7 = spEndpoint_sendCommandInternal(FigEndpoint, v5, v3);
      if (v7)
      {
        if (gLogCategory_SPEndpoint <= 90 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())) {
LABEL_20:
        }
          LogPrintF();
      }
      else if (gLogCategory_SPEndpoint <= 50 {
             && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
      }
      {
        goto LABEL_20;
      }
      MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 40));
      if (!v7) {
        goto LABEL_27;
      }
    }
LABEL_22:
    APSLogErrorAt();
LABEL_27:
    CFRelease(v3);
    return v7;
  }
  APSLogErrorAt();
  return 4294950575;
}

uint64_t spEndpoint_SendCommand(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t FigEndpoint = (const void *)FigEndpointExtendedGetFigEndpoint();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 40));
  uint64_t v7 = spEndpoint_sendCommandInternal(FigEndpoint, a2, a3);
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 40));
  return v7;
}

uint64_t spEndpoint_AcquireAndCopyResource(uint64_t a1, uint64_t a2, const __CFDictionary *a3, void *a4)
{
  uint64_t FigEndpoint = (const void *)FigEndpointExtendedGetFigEndpoint();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 40));
  if (*(_DWORD *)(CMBaseObjectGetDerivedStorage() + 72) != 2)
  {
    APSLogErrorAt();
    uint64_t v12 = 4294949690;
    goto LABEL_61;
  }
  if (!FigCFEqual())
  {
    uint64_t v12 = 4294894922;
    if (gLogCategory_SPEndpoint <= 90 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    goto LABEL_61;
  }
  uint64_t v8 = CMBaseObjectGetDerivedStorage();
  values = 0;
  if (*(_DWORD *)(v8 + 72) != 2)
  {
    APSLogErrorAt();
    uint64_t v12 = 4294949690;
    goto LABEL_60;
  }
  if (!a3 || !a4 || (uint64_t v9 = v8, (Value = CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E4F202F8])) == 0))
  {
    APSLogErrorAt();
    uint64_t v12 = 4294950576;
    goto LABEL_60;
  }
  uint64_t v11 = Value;
  if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v13 = (const void *)*MEMORY[0x1E4F21470];
  if (!CFEqual(v11, (CFTypeRef)*MEMORY[0x1E4F21470]))
  {
    uint64_t v12 = 4294894922;
    if (gLogCategory_SPEndpoint <= 90 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    goto LABEL_60;
  }
  if (*(unsigned char *)(v9 + 96) || !CFSetGetCount(*(CFSetRef *)(v9 + 88)))
  {
    uint64_t v14 = CMBaseObjectGetDerivedStorage();
    CFTypeRef cf = 0;
    CFTypeID v15 = CFGetTypeID(v11);
    if (v15 == CFStringGetTypeID())
    {
      if (*(_DWORD *)(v14 + 72) != 2)
      {
        APSLogErrorAt();
        uint64_t v12 = 4294951716;
        goto LABEL_57;
      }
      CFDictionaryRef v16 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v14 + 112), v11);
      if (v16)
      {
        uint64_t v17 = CFDictionaryGetValue(v16, @"AudioEngineVendor");
        CFDictionaryGetInt64();
        if (CFEqual(v11, v13))
        {
          uint64_t v18 = CMBaseObjectGetDerivedStorage();
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          if (Mutable)
          {
            uint64_t v20 = Mutable;
            CFDictionarySetValue(Mutable, @"IsSidePlay", (const void *)*MEMORY[0x1E4F1CFD0]);
            long long v21 = *(const void **)(v18 + 24);
            if (v21) {
              CFDictionarySetValue(v20, @"EventRecorder", v21);
            }
            CFAllocatorRef v22 = CFGetAllocator(FigEndpoint);
            uint64_t v23 = APEndpointStreamBufferedAudioCreate(v22, *(CFTypeRef *)(v14 + 248), *(const void **)(v14 + 256), v20, *(const void **)(v14 + 136), v17, *(const void **)(v14 + 240), &cf);
            if (v23)
            {
              uint64_t v12 = v23;
            }
            else
            {
              CMNotificationCenterGetDefaultLocalCenter();
              uint64_t v24 = FigNotificationCenterAddWeakListener();
              if (v24)
              {
                uint64_t v12 = v24;
              }
              else
              {
                CMNotificationCenterGetDefaultLocalCenter();
                uint64_t v25 = FigNotificationCenterAddWeakListener();
                if (!v25)
                {
                  if (gLogCategory_SPEndpoint <= 50
                    && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
                  {
                    LogPrintF();
                  }
                  uint64_t v12 = 0;
                  long long v26 = cf;
                  values = (void *)cf;
                  CFTypeRef cf = 0;
LABEL_48:
                  CFRelease(v20);
                  if (cf) {
                    CFRelease(cf);
                  }
                  if (!v12)
                  {
                    CFSetSetValue(*(CFMutableSetRef *)(v9 + 88), v26);
                    if (gLogCategory_SPEndpoint <= 50
                      && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
                    {
                      CFSetGetCount(*(CFSetRef *)(v9 + 88));
                      LogPrintF();
                    }
                    goto LABEL_55;
                  }
LABEL_58:
                  APSLogErrorAt();
                  if (!v26)
                  {
LABEL_60:
                    APSLogErrorAt();
LABEL_61:
                    MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 40));
                    APSLogErrorAt();
                    return v12;
                  }
LABEL_59:
                  CFRelease(v26);
                  goto LABEL_60;
                }
                uint64_t v12 = v25;
              }
              APSLogErrorAt();
            }
            APSLogErrorAt();
            long long v26 = 0;
            goto LABEL_48;
          }
          APSLogErrorAt();
          uint64_t v12 = 4294950575;
          APSLogErrorAt();
        }
        else
        {
          uint64_t v12 = 4294894922;
          if (gLogCategory_SPEndpoint <= 90
            && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
        }
LABEL_57:
        long long v26 = 0;
        goto LABEL_58;
      }
    }
    APSLogErrorAt();
    uint64_t v12 = 4294950576;
    goto LABEL_57;
  }
  CFSetGetValues(*(CFSetRef *)(v9 + 88), (const void **)&values);
  if (!values)
  {
    APSLogErrorAt();
    uint64_t v12 = 4294950571;
    long long v26 = values;
    if (!values) {
      goto LABEL_60;
    }
    goto LABEL_59;
  }
  CFRetain(values);
  long long v26 = values;
LABEL_55:
  *a4 = v26;
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 40));
  return 0;
}

uint64_t spEndpoint_RelinquishResource(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t FigEndpoint = FigEndpointExtendedGetFigEndpoint();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  if (!a3)
  {
    APSLogErrorAt();
    return 4294950576;
  }
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 40));
  uint64_t v6 = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(v6 + 72) != 2)
  {
    APSLogErrorAt();
    uint64_t v9 = 4294949690;
LABEL_19:
    MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 40));
    APSLogErrorAt();
    return v9;
  }
  uint64_t v7 = v6;
  if (!FigCFEqual())
  {
    uint64_t v9 = 4294894922;
    if (gLogCategory_SPEndpoint <= 90 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    goto LABEL_19;
  }
  if (!CFSetContainsValue(*(CFSetRef *)(v7 + 88), a3))
  {
    APSLogErrorAt();
    uint64_t v9 = 4294950576;
    goto LABEL_19;
  }
  if (*(unsigned char *)(v7 + 96))
  {
    CFRetain(a3);
    uint64_t v8 = *(NSObject **)(v7 + 280);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __spEndpoint_relinquishResourceInternal_block_invoke;
    block[3] = &__block_descriptor_48_e5_v8__0l;
    void block[4] = FigEndpoint;
    void block[5] = a3;
    dispatch_async(v8, block);
    CFSetRemoveValue(*(CFMutableSetRef *)(v7 + 88), a3);
    if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
    {
      CFSetGetCount(*(CFSetRef *)(v7 + 88));
      LogPrintF();
    }
  }
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 40));
  return 0;
}

void __spEndpoint_relinquishResourceInternal_block_invoke(uint64_t a1)
{
  if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(void (**)(uint64_t, void, void, void))(v4 + 8);
  if (v5) {
    v5(v2, 0, 0, 0);
  }
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(void (**)(uint64_t))(v8 + 32);
  if (v9) {
    v9(v6);
  }
  CFMutableDictionaryRef v10 = *(const void **)(a1 + 40);
  CFRelease(v10);
}

uint64_t APAudioEngineGetClassID()
{
  if (APAudioEngineGetClassID_sRegisterOnce != -1) {
    dispatch_once_f(&APAudioEngineGetClassID_sRegisterOnce, &APAudioEngineGetClassID_sClassID, (dispatch_function_t)audioEngine_registerBaseClass);
  }
  return APAudioEngineGetClassID_sClassID;
}

uint64_t audioEngine_registerBaseClass(uint64_t a1)
{
  uint64_t ClassID = CMBaseGetClassID();
  return MEMORY[0x1F40DC658](&audioEngine_registerBaseClass_sClassDesc, ClassID, 1, a1);
}

CFStringRef audioEngine_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[APAudioEngine %p]", a1);
}

uint64_t APAuthenticationClientRSACreate(int a1, const void *a2, CFDataRef theData, void *a4)
{
  if (!a2)
  {
    uint64_t v9 = 4294895495;
LABEL_14:
    APSLogErrorAt();
    return v9;
  }
  if (!theData)
  {
    uint64_t v9 = 4294895495;
    goto LABEL_14;
  }
  if (CFDataGetLength(theData) != 6)
  {
    uint64_t v9 = 4294895495;
    goto LABEL_14;
  }
  APAuthenticationClientGetClassID();
  uint64_t v7 = CMDerivedObjectCreate();
  if (v7)
  {
    uint64_t v9 = v7;
    APSLogErrorAt();
  }
  else
  {
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    DerivedStorage[1] = a2;
    CFRetain(a2);
    *uint64_t DerivedStorage = CFRetain(theData);
    if (gLogCategory_APAuthenticationClientRSA <= 30
      && (gLogCategory_APAuthenticationClientRSA != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    uint64_t v9 = 0;
    *a4 = 0;
  }
  return v9;
}

void rsaAuthentication_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAuthenticationClientRSA <= 30
    && (gLogCategory_APAuthenticationClientRSA != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  double v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 8) = 0;
  }
}

__CFString *rsaAuthentication_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<APAuthenticationClientRSA %p>", a1);
  return Mutable;
}

uint64_t rsaAuthentication_GetAuthenticationType()
{
  return 1;
}

uint64_t rsaAuthentication_AuthenticateEndpoint()
{
  v27[32] = *MEMORY[0x1E4F143B8];
  CFTypeRef v23 = 0;
  CFTypeRef cf = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAuthenticationClientRSA <= 40
    && (gLogCategory_APAuthenticationClientRSA != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  size_t lengthAtOffsetOut = 0;
  dataPointerOut[0] = 0;
  uint64_t v1 = RandomBytes();
  if (v1)
  {
    uint64_t v13 = v1;
LABEL_38:
    APSLogErrorAt();
    goto LABEL_40;
  }
  uint64_t v2 = Base64EncodeEx();
  if (v2)
  {
    uint64_t v13 = v2;
    goto LABEL_38;
  }
  uint64_t v3 = *MEMORY[0x1E4F1CF80];
  uint64_t BlockBufferCopyingMemoryBlock = FigCreateBlockBufferCopyingMemoryBlock();
  if (!BlockBufferCopyingMemoryBlock)
  {
    uint64_t v5 = *(void *)(DerivedStorage + 8);
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, char *, CFTypeRef *))(v7 + 56);
    if (v8)
    {
      uint64_t v9 = v8(v5, 1920164128, dataPointerOut[0], &cf);
      if (v9)
      {
        uint64_t v13 = v9;
        goto LABEL_30;
      }
      uint64_t CMBaseObject = FigTransportStreamGetCMBaseObject();
      uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v11) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t v14 = *(uint64_t (**)(uint64_t, void, uint64_t, CFTypeRef *))(v12 + 48);
      if (!v14)
      {
        uint64_t v13 = 4294954514;
        goto LABEL_30;
      }
      uint64_t v15 = v14(CMBaseObject, *MEMORY[0x1E4F477B8], v3, &v23);
      if (v15)
      {
        uint64_t v13 = v15;
        goto LABEL_30;
      }
      APSNetworkAddressGetSocketAddr();
      CFDictionaryRef v16 = (OpaqueCMBlockBuffer *)cf;
      CFDataRef v17 = *(const __CFData **)DerivedStorage;
      size_t lengthAtOffsetOut = 0;
      dataPointerOut[0] = 0;
      CFDataGetBytePtr(v17);
      uint64_t DataPointer = CMBlockBufferGetDataPointer(v16, 0, &lengthAtOffsetOut, 0, dataPointerOut);
      if (DataPointer)
      {
        uint64_t v13 = DataPointer;
      }
      else
      {
        uint64_t v19 = Base64Decode();
        if (v19)
        {
          uint64_t v13 = v19;
        }
        else
        {
          uint64_t v20 = AirPlayRSA_PublicDecrypt((const uint8_t *)v27, lengthAtOffsetOut, v27, 0x100uLL, &lengthAtOffsetOut);
          if (!v20)
          {
            uint64_t v13 = 4294895491;
            if (lengthAtOffsetOut <= 0xF)
            {
              APSLogErrorAt();
              uint64_t v13 = 4294895492;
            }
            else
            {
              if (dataPointerOut[1] != (char *)v27[0] || dataPointerOut[2] != (char *)v27[1]) {
                goto LABEL_45;
              }
              uint64_t v13 = 4294895493;
            }
LABEL_30:
            APSLogErrorAt();
            goto LABEL_31;
          }
          uint64_t v13 = v20;
        }
      }
LABEL_45:
      APSLogErrorAt();
      goto LABEL_30;
    }
    uint64_t v13 = 4294954514;
    goto LABEL_30;
  }
  uint64_t v13 = BlockBufferCopyingMemoryBlock;
  APSLogErrorAt();
LABEL_40:
  APSLogErrorAt();
LABEL_31:
  if (cf) {
    CFRelease(cf);
  }
  if (v23) {
    CFRelease(v23);
  }
  return v13;
}

uint64_t rsaAuthentication_CreateEncryptedKey(int a1, CFDataRef theData, const __CFAllocator *a3, CFDataRef *a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  size_t v11 = 0;
  BytePtr = CFDataGetBytePtr(theData);
  uint64_t v7 = AirPlayRSA_PublicEncrypt(BytePtr, 0x10uLL, bytes, 0x100uLL, &v11);
  if (v7)
  {
    uint64_t v9 = v7;
LABEL_8:
    APSLogErrorAt();
    return v9;
  }
  if (v11 != 256)
  {
    uint64_t v9 = 4294895492;
    goto LABEL_8;
  }
  CFDataRef v8 = CFDataCreate(a3, bytes, 256);
  if (v8)
  {
    uint64_t v9 = 0;
    *a4 = v8;
  }
  else
  {
    APSLogErrorAt();
    return 4294895496;
  }
  return v9;
}

uint64_t APEndpointGetFeatureFromStreamType(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (const void *)result;
    if (CFEqual((CFTypeRef)result, (CFTypeRef)*MEMORY[0x1E4F21488]))
    {
      return 1;
    }
    else if (CFEqual(v1, (CFTypeRef)*MEMORY[0x1E4F21468]))
    {
      return 2;
    }
    else if (CFEqual(v1, (CFTypeRef)*MEMORY[0x1E4F21470]))
    {
      return 8;
    }
    else
    {
      return 32 * (CFEqual(v1, (CFTypeRef)*MEMORY[0x1E4F21478]) != 0);
    }
  }
  return result;
}

uint64_t APEndpointCreateStreamTypeArrayFromFeatures(char a1, __CFArray **a2)
{
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  uint64_t v5 = Mutable;
  if (a2)
  {
    if (a1)
    {
      CFArrayAppendValue(Mutable, (const void *)*MEMORY[0x1E4F21488]);
      if ((a1 & 2) == 0)
      {
LABEL_4:
        if ((a1 & 8) == 0) {
          goto LABEL_5;
        }
        goto LABEL_10;
      }
    }
    else if ((a1 & 2) == 0)
    {
      goto LABEL_4;
    }
    CFArrayAppendValue(v5, (const void *)*MEMORY[0x1E4F21468]);
    if ((a1 & 8) == 0)
    {
LABEL_5:
      if ((a1 & 0x20) == 0)
      {
LABEL_7:
        uint64_t result = 0;
        *a2 = v5;
        return result;
      }
LABEL_6:
      CFArrayAppendValue(v5, (const void *)*MEMORY[0x1E4F21478]);
      goto LABEL_7;
    }
LABEL_10:
    CFArrayAppendValue(v5, (const void *)*MEMORY[0x1E4F21470]);
    if ((a1 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  APSLogErrorAt();
  if (v5) {
    CFRelease(v5);
  }
  return 4294950576;
}

uint64_t APEndpointGetAllAudioFeatures(char a1)
{
  return a1 & 0x2A;
}

uint64_t APEndpointTriggerAudioHALDeviceCreation(uint64_t a1, uint64_t a2, const void *a3, const void *a4, const void *a5, uint64_t a6, int a7, int a8)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    uint64_t v14 = Mutable;
    if (a4) {
      CFDictionarySetValue(Mutable, @"DeviceType", a4);
    }
    if (a3) {
      CFDictionarySetValue(v14, @"EndpointName", a3);
    }
    if (a5) {
      CFDictionarySetValue(v14, @"NetworkClockType", a5);
    }
    CFDictionarySetInt64();
    uint64_t v15 = (const void *)*MEMORY[0x1E4F1CFD0];
    CFDictionaryRef v16 = (const void *)*MEMORY[0x1E4F1CFC8];
    if (a7) {
      CFDataRef v17 = (const void *)*MEMORY[0x1E4F1CFD0];
    }
    else {
      CFDataRef v17 = (const void *)*MEMORY[0x1E4F1CFC8];
    }
    CFDictionarySetValue(v14, @"VolumeCtrlSupported", v17);
    if (a8) {
      uint64_t v18 = v15;
    }
    else {
      uint64_t v18 = v16;
    }
    CFDictionarySetValue(v14, @"MuteCtrlSupported", v18);
    CFDictionarySetDouble();
    FigHALAudioDeviceBrokerCopy();
    APSLogErrorAt();
    uint64_t v20 = 4294949690;
    CFRelease(v14);
  }
  else
  {
    APSLogErrorAt();
    return 4294950575;
  }
  return v20;
}

uint64_t APEndpointCreateAudioStreamOptions(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    APSLogErrorAt();
    uint64_t v9 = 4294950575;
    goto LABEL_17;
  }
  if (a3)
  {
    CFDictionaryGetValue(a3, @"SupportedAudioFormats");
    CFDictionaryGetInt64();
    CFDictionaryGetInt64Ranged();
    CFDictionaryGetInt64();
    CFDictionaryGetInt64();
    CFDictionaryGetInt64();
    CFDictionaryGetInt64();
  }
  if (FigCFEqual())
  {
    uint64_t v5 = APAudioFormatCopyPreferredRealTimeAudioFormats();
    if (v5)
    {
      uint64_t v9 = v5;
      goto LABEL_24;
    }
  }
  else if (FigCFEqual())
  {
    uint64_t v6 = APAudioFormatCopyPreferredBufferedAudioFormats();
    if (v6)
    {
      uint64_t v9 = v6;
      goto LABEL_24;
    }
  }
  else
  {
    if (!FigCFEqual())
    {
LABEL_15:
      FigCFArrayGetInt64AtIndex();
      goto LABEL_16;
    }
    uint64_t v7 = APAudioFormatCopyPreferredLowLatencyAudioFormats();
    if (v7)
    {
      uint64_t v9 = v7;
      goto LABEL_24;
    }
  }
  if (!CFDictionaryGetInt64()) {
    goto LABEL_15;
  }
  uint64_t v8 = APAudioFormatChooseFromPreferredAudioFormats();
  if (!v8)
  {
LABEL_16:
    APSLogErrorAt();
    uint64_t v9 = 4294950576;
    goto LABEL_17;
  }
  uint64_t v9 = v8;
LABEL_24:
  APSLogErrorAt();
LABEL_17:
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v9;
}

uint64_t APEndpointCreateAudioOptions(char a1, uint64_t a2, const __CFDictionary *a3, uint64_t a4, __CFDictionary **a5)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    APSLogErrorAt();
    return 4294950575;
  }
  CFMutableDictionaryRef v10 = Mutable;
  if ((a1 & 2) != 0)
  {
    size_t v11 = (const void *)*MEMORY[0x1E4F21468];
    uint64_t AudioStreamOptions = APEndpointCreateAudioStreamOptions(*MEMORY[0x1E4F21468], a2, a3);
    if (AudioStreamOptions)
    {
      uint64_t v15 = AudioStreamOptions;
      goto LABEL_18;
    }
    CFDictionarySetValue(v10, v11, 0);
    if ((a1 & 8) == 0) {
      goto LABEL_9;
    }
LABEL_7:
    uint64_t v13 = (const void *)*MEMORY[0x1E4F21470];
    uint64_t v14 = APEndpointCreateAudioStreamOptions(*MEMORY[0x1E4F21470], a2, a3);
    if (!v14)
    {
      CFDictionarySetValue(v10, v13, 0);
      goto LABEL_9;
    }
    uint64_t v15 = v14;
LABEL_18:
    APSLogErrorAt();
    CFRelease(v10);
    return v15;
  }
  if ((a1 & 8) != 0) {
    goto LABEL_7;
  }
LABEL_9:
  if (gLogCategory_APEndpointUtilities <= 50
    && (gLogCategory_APEndpointUtilities != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v15 = 0;
  *a5 = v10;
  return v15;
}

uint64_t APEndpointCopyFromActivationOptionsOrCreateSharedContext(const __CFDictionary *a1, char a2, uint64_t theDict, unint64_t a4, void *a5, __CFDictionary **a6)
{
  CFTypeRef v32 = 0;
  if (gLogCategory_APEndpointUtilities <= 40
    && (gLogCategory_APEndpointUtilities != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!a1
    || !CFDictionaryGetInt64()
    || (!a6 || CFDictionaryContainsKey(a1, @"AudioOptions"))
    && (!a4
     || CFDictionaryContainsKey((CFDictionaryRef)theDict, @"NetworkClock")
     || CFDictionaryContainsKey(a1, @"NetworkClock")))
  {
    char v31 = a2;
    if (theDict)
    {
      Boolean Value = CFDictionaryGetValue((CFDictionaryRef)theDict, @"PreferredNetworkClockType");
      uint64_t v13 = CFDictionaryGetValue((CFDictionaryRef)theDict, @"NetworkClock");
      if (v13) {
        CFTypeRef v14 = CFRetain(v13);
      }
      else {
        CFTypeRef v14 = 0;
      }
      CFTypeRef v32 = v14;
      CFDictionaryGetInt64();
      CFDictionaryRef v30 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)theDict, @"AudioEngineOptions");
      CFDictionaryGetInt64();
      BOOL v15 = a6 != 0;
      BOOL v16 = a4 != 0;
      if (!(a4 | (unint64_t)a6))
      {
LABEL_53:
        CFDictionaryRef theDict = 0;
        goto LABEL_54;
      }
      if (v14)
      {
LABEL_42:
        if (!v15) {
          goto LABEL_51;
        }
        if (a1
          && (uint64_t Int64 = CFDictionaryGetInt64(),
              long long v26 = CFDictionaryGetValue(a1, @"AudioOptions"),
              CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E4F20340]),
              Int64))
        {
          if (v26)
          {
            *a6 = (__CFDictionary *)CFRetain(v26);
            if (gLogCategory_APEndpointUtilities <= 50
              && (gLogCategory_APEndpointUtilities != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
LABEL_51:
            if (v16)
            {
              CFDictionaryRef theDict = 0;
              *(void *)a4 = v32;
              return theDict;
            }
            goto LABEL_53;
          }
        }
        else if (v32)
        {
          uint64_t v27 = FigCFEqual();
          CFDictionaryRef AudioOptions = (const __CFDictionary *)APEndpointCreateAudioOptions(v31, (uint64_t)v32, v30, v27, a6);
          if (!AudioOptions) {
            goto LABEL_51;
          }
          CFDictionaryRef theDict = (uint64_t)AudioOptions;
          APSLogErrorAt();
          goto LABEL_66;
        }
        APSLogErrorAt();
        CFDictionaryRef theDict = 4294950576;
LABEL_66:
        APSLogErrorAt();
        goto LABEL_54;
      }
    }
    else
    {
      BOOL v15 = a6 != 0;
      BOOL v16 = a4 != 0;
      if (!(a4 | (unint64_t)a6)) {
        goto LABEL_54;
      }
      Boolean Value = 0;
      CFDictionaryRef v30 = 0;
    }
    CFTypeRef cf = 0;
    if (a1)
    {
      uint64_t v17 = CFDictionaryGetInt64();
      uint64_t v18 = CFDictionaryGetValue(a1, @"NetworkClock");
      if (v17)
      {
        if (v18)
        {
          CFTypeRef v32 = CFRetain(v18);
          uint64_t CMBaseObject = APSNetworkClockGetCMBaseObject();
          uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v20) {
            uint64_t v21 = v20;
          }
          else {
            uint64_t v21 = 0;
          }
          uint64_t v24 = *(uint64_t (**)(uint64_t, void, void, CFTypeRef *))(v21 + 48);
          if (v24)
          {
            CFDictionaryRef theDict = v24(CMBaseObject, *MEMORY[0x1E4F4A140], *MEMORY[0x1E4F1CF80], &cf);
            if (!theDict)
            {
              CFTypeRef v23 = cf;
              if (a5) {
                goto LABEL_37;
              }
              goto LABEL_31;
            }
          }
          else
          {
            CFDictionaryRef theDict = 4294954514;
          }
          APSLogErrorAt();
          CFTypeRef v23 = cf;
          if (!cf) {
            goto LABEL_41;
          }
          goto LABEL_40;
        }
        APSLogErrorAt();
LABEL_65:
        CFDictionaryRef theDict = 4294950576;
        goto LABEL_66;
      }
    }
    if (FigCFEqual())
    {
      CFDictionaryRef v22 = (const __CFDictionary *)APSNetworkClockPTPCreate();
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual()) {
          goto LABEL_65;
        }
        CFDictionaryRef theDict = 0;
        CFTypeRef v32 = 0;
LABEL_30:
        CFTypeRef v23 = CFRetain(Value);
        CFTypeRef cf = v23;
        if (a5)
        {
LABEL_37:
          *a5 = v23;
          goto LABEL_41;
        }
LABEL_31:
        if (!v23)
        {
LABEL_41:
          if (theDict) {
            goto LABEL_66;
          }
          goto LABEL_42;
        }
LABEL_40:
        CFRelease(v23);
        goto LABEL_41;
      }
      CFDictionaryRef v22 = (const __CFDictionary *)APSNetworkClockNTPServerCreate();
    }
    CFDictionaryRef theDict = (uint64_t)v22;
    goto LABEL_30;
  }
  APSLogErrorAt();
  CFDictionaryRef theDict = 4294950576;
LABEL_54:
  if (v32) {
    CFRelease(v32);
  }
  return theDict;
}

void APEndpointCallCompletionCallbackForActivationOrDeactivation(uint64_t a1)
{
  uint64_t v2 = *(void (**)(void, void, void, void, void))(a1 + 32);
  if (v2) {
    v2(*(void *)a1, *(void *)(a1 + 16), *(void *)(a1 + 8), *(unsigned int *)(a1 + 24), *(void *)(a1 + 40));
  }
  uint64_t v3 = *(const void **)a1;
  CFRelease(v3);
}

uint64_t APEndpointCreateEndpointActivationNotificationPayload(const __CFAllocator *a1, uint64_t a2, uint64_t a3, CFMutableDictionaryRef *a4)
{
  if (a4)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFMutableDictionaryRef v6 = Mutable;
      CFDictionarySetInt64();
      CFDictionarySetInt64();
      uint64_t result = 0;
      *a4 = v6;
    }
    else
    {
      APSLogErrorAt();
      return 4294950575;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294950576;
  }
  return result;
}

uint64_t APEndpointCreateStreamsChangedNotificationPayload(const __CFAllocator *a1, uint64_t a2, uint64_t a3, uint64_t a4, CFMutableDictionaryRef *a5)
{
  if (a5)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFMutableDictionaryRef v7 = Mutable;
      CFDictionarySetInt64();
      CFDictionarySetInt64();
      CFDictionarySetInt64();
      uint64_t result = 0;
      *a5 = v7;
    }
    else
    {
      APSLogErrorAt();
      return 4294950575;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294950576;
  }
  return result;
}

uint64_t APEndpointAPSClusterTypeToAPSLocalRouteType(uint64_t result)
{
  if ((result - 1) >= 3) {
    return 0;
  }
  else {
    return result;
  }
}

uint64_t APEndpointCreateLocalRouteState(int a1, const void *a2, uint64_t a3, __CFDictionary **a4)
{
  if (a4)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      uint64_t v8 = Mutable;
      uint64_t v9 = (const void **)MEMORY[0x1E4F1CFC8];
      if (a1) {
        uint64_t v9 = (const void **)MEMORY[0x1E4F1CFD0];
      }
      CFDictionarySetValue(Mutable, @"IsActive", *v9);
      if (a1)
      {
        if (a2) {
          CFDictionarySetValue(v8, @"GroupContextID", a2);
        }
      }
      CFDictionarySetInt64();
      uint64_t result = 0;
      *a4 = v8;
    }
    else
    {
      APSLogErrorAt();
      return 4294950575;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294950576;
  }
  return result;
}

uint64_t APEndpointGetEnabledFeatures(uint64_t a1, int a2, void *a3)
{
  uint64_t v3 = &v11;
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2000000000;
  uint64_t v14 = 0;
  if (a3)
  {
    if (a1)
    {
      CFDictionaryApplyBlock();
      uint64_t v3 = v12;
    }
    uint64_t v8 = v3[3];
    CFMutableDictionaryRef v6 = v3 + 3;
    uint64_t v7 = v8;
    if (a2)
    {
      v7 |= 4uLL;
      *CFMutableDictionaryRef v6 = v7;
    }
    uint64_t v9 = 0;
    *a3 = v7;
  }
  else
  {
    APSLogErrorAt();
    uint64_t v9 = 4294950576;
  }
  _Block_object_dispose(&v11, 8);
  return v9;
}

uint64_t __APEndpointGetEnabledFeatures_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = APEndpointGetFeatureFromStreamType(a2);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) |= result;
  return result;
}

uint64_t APEndpointAPSClusterTypeToFigEndpointClusterType(int a1)
{
  switch(a1)
  {
    case 3:
      uint64_t v1 = MEMORY[0x1E4F20470];
      return *(void *)v1;
    case 2:
      uint64_t v1 = MEMORY[0x1E4F20478];
      return *(void *)v1;
    case 1:
      uint64_t v1 = MEMORY[0x1E4F20480];
      return *(void *)v1;
  }
  return 0;
}

uint64_t APEndpointFigEndpointClusterTypeToAPSClusterType(const void *a1)
{
  if (a1)
  {
    if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F20480]))
    {
      return 1;
    }
    else if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F20478]))
    {
      return 2;
    }
    else if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F20470]))
    {
      return 3;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    APSLogErrorAt();
    return 0;
  }
}

void APEndpointCallCompletionCallbackForSendCommand(uint64_t a1)
{
  CFTypeRef v2 = *(CFTypeRef *)a1;
  if (!*(void *)a1 || (FigEndpointExtendedGetClassID(), !CMBaseObjectIsMemberOfClass())) {
    CFTypeRef v2 = 0;
  }
  (*(void (**)(CFTypeRef, void, void, void))(a1 + 16))(v2, *(unsigned int *)(a1 + 32), *(void *)(a1 + 8), *(void *)(a1 + 24));
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  uint64_t v3 = *(const void **)(a1 + 8);
  if (v3)
  {
    CFRelease(v3);
  }
}

void *APEndpointCreateRCSendDataCompletionContext(const void *a1, const void *a2, NSObject *a3, uint64_t a4, uint64_t a5)
{
  CFMutableDictionaryRef v10 = malloc_type_calloc(1uLL, 0x28uLL, 0xE0040B6671DC2uLL);
  if (v10)
  {
    *CFMutableDictionaryRef v10 = CFRetain(a1);
    v10[1] = CFRetain(a2);
    void v10[4] = a3;
    dispatch_retain(a3);
    _OWORD v10[2] = a4;
    void v10[3] = a5;
  }
  else
  {
    APSLogErrorAt();
  }
  return v10;
}

void APEndpointCallRCSendDataCompletionAsync(CFTypeRef cf, CFTypeRef a2, int a3, dispatch_queue_t queue, uint64_t a5, uint64_t a6)
{
  if (a5)
  {
    if (cf) {
      CFRetain(cf);
    }
    if (a2) {
      CFRetain(a2);
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __APEndpointCallRCSendDataCompletionAsync_block_invoke;
    block[3] = &__block_descriptor_tmp_55_0;
    void block[4] = a5;
    void block[5] = cf;
    int v13 = a3;
    void block[6] = a2;
    void block[7] = a6;
    dispatch_async(queue, block);
  }
}

void __APEndpointCallRCSendDataCompletionAsync_block_invoke(uint64_t a1)
{
  (*(void (**)(void, void, void, void))(a1 + 32))(*(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned int *)(a1 + 64), *(void *)(a1 + 56));
  CFTypeRef v2 = *(const void **)(a1 + 40);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 48);
  if (v3)
  {
    CFRelease(v3);
  }
}

void APEndpointCallRCSendDataCompletionFromContextAsync(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  APEndpointCallRCSendDataCompletionAsync(*(CFTypeRef *)a4, *(CFTypeRef *)(a4 + 8), a3, *(dispatch_queue_t *)(a4 + 32), *(void *)(a4 + 16), *(void *)(a4 + 24));
  if (*(void *)a4) {
    CFRelease(*(CFTypeRef *)a4);
  }
  uint64_t v5 = *(const void **)(a4 + 8);
  if (v5) {
    CFRelease(v5);
  }
  dispatch_release(*(dispatch_object_t *)(a4 + 32));
  free((void *)a4);
}

void APEndpointCallRCDelegateDidReceiveDataAsync(const void *a1, uint64_t a2, const void *a3, const void *a4, NSObject *a5, uint64_t a6, uint64_t a7)
{
  if (!a1 || !a3 || !a4 || !a6 || !a5)
  {
LABEL_15:
    APSLogErrorAt();
    return;
  }
  if (a7)
  {
    int v13 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    if (!v13) {
      goto LABEL_15;
    }
  }
  else
  {
    int v13 = 0;
  }
  CFRetain(a1);
  CFRetain(a3);
  CFRetain(a4);
  if (v13) {
    CFRetain(v13);
  }
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 0x40000000;
  v14[2] = __APEndpointCallRCDelegateDidReceiveDataAsync_block_invoke;
  v14[3] = &__block_descriptor_tmp_57;
  v14[4] = a1;
  v14[5] = a3;
  v14[6] = a4;
  v14[7] = a6;
  void v14[8] = a2;
  v14[9] = v13;
  dispatch_async(a5, v14);
  if (v13) {
    CFRelease(v13);
  }
}

void __APEndpointCallRCDelegateDidReceiveDataAsync_block_invoke(uint64_t a1)
{
  if (gLogCategory_APEndpointUtilities <= 30
    && (gLogCategory_APEndpointUtilities != -1 || _LogCategory_Initialize()))
  {
    CFDataGetLength(*(CFDataRef *)(a1 + 48));
    LogPrintF();
  }
  (*(void (**)(void, void, void, void, void))(a1 + 56))(*(void *)(a1 + 32), *(void *)(a1 + 64), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 72));
  CFRelease(*(CFTypeRef *)(a1 + 32));
  CFRelease(*(CFTypeRef *)(a1 + 40));
  CFRelease(*(CFTypeRef *)(a1 + 48));
  CFTypeRef v2 = *(const void **)(a1 + 72);
  if (v2)
  {
    CFRelease(v2);
  }
}

void APEndpointCallRCDelegateDidCloseAsync(const void *a1, uint64_t a2, const void *a3, NSObject *a4, uint64_t a5, uint64_t a6)
{
  if (!a1 || !a3 || !a5 || !a4)
  {
LABEL_14:
    APSLogErrorAt();
    return;
  }
  if (a6)
  {
    uint64_t v11 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    if (!v11) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  CFRetain(a1);
  CFRetain(a3);
  if (v11) {
    CFRetain(v11);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __APEndpointCallRCDelegateDidCloseAsync_block_invoke;
  block[3] = &__block_descriptor_tmp_59;
  void block[4] = a1;
  void block[5] = a3;
  void block[6] = a5;
  void block[7] = a2;
  void block[8] = v11;
  dispatch_async(a4, block);
  if (v11) {
    CFRelease(v11);
  }
}

void __APEndpointCallRCDelegateDidCloseAsync_block_invoke(uint64_t a1)
{
  if (gLogCategory_APEndpointUtilities <= 50
    && (gLogCategory_APEndpointUtilities != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  (*(void (**)(void, void, void, void))(a1 + 48))(*(void *)(a1 + 32), *(void *)(a1 + 56), *(void *)(a1 + 40), *(void *)(a1 + 64));
  CFRelease(*(CFTypeRef *)(a1 + 32));
  CFRelease(*(CFTypeRef *)(a1 + 40));
  CFTypeRef v2 = *(const void **)(a1 + 64);
  if (v2)
  {
    CFRelease(v2);
  }
}

void APEndpointCopyClusterInfo(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4, uint64_t a5, unsigned char *a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef cf = 0;
  CFTypeRef v26 = 0;
  CFTypeRef v23 = 0;
  CFTypeRef v24 = 0;
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v18 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v17 + 48);
  if (v18 && (v18(CMBaseObject, @"EndpointDescription", 0, &v26), (CFTypeRef v19 = v26) != 0))
  {
    uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v20) {
      uint64_t v21 = v20;
    }
    else {
      uint64_t v21 = 0;
    }
    CFDictionaryRef v22 = *(void (**)(CFTypeRef, uint64_t, CFTypeRef *, CFTypeRef *, uint64_t, CFTypeRef *, uint64_t, uint64_t))(v21 + 48);
    if (v22) {
      v22(v19, a2, &cf, &v24, a5, &v23, a7, a8);
    }
  }
  else
  {
    APSLogErrorAt();
  }
  if (a3) {
    *a3 = CFGetInt64();
  }
  if (a4) {
    *a4 = CFGetInt64();
  }
  if (a6) {
    *a6 = CFGetInt64();
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v24) {
    CFRelease(v24);
  }
  if (v23) {
    CFRelease(v23);
  }
  if (v26) {
    CFRelease(v26);
  }
}

uint64_t APEndpointIsHALMuteForUser()
{
  return 0;
}

uint64_t APEndpointApplyInitialVolume(uint64_t a1)
{
  if (a1 && (FigEndpointExtendedGetClassID(), CMBaseObjectIsMemberOfClass()))
  {
    uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 24);
    if (v2) {
      uint64_t v3 = v2;
    }
    else {
      uint64_t v3 = 0;
    }
    uint64_t v5 = *(uint64_t (**)(uint64_t, __CFString *, void, void, void))(v3 + 72);
    if (v5)
    {
      return v5(a1, @"applyInitialVolume", 0, 0, 0);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294950576;
  }
}

CFMutableDictionaryRef APEndpointCreateSecondDisplayModeCommandParams()
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable) {
    CFDictionarySetInt64();
  }
  else {
    APSLogErrorAt();
  }
  return Mutable;
}

NSObject *APEndpointCreateAndStartProcessDemiseListener(void *a1, int a2, dispatch_queue_t queue, void (__cdecl *a4)(void *))
{
  CFMutableDictionaryRef v6 = dispatch_source_create(MEMORY[0x1E4F14470], a2, 0x80000000uLL, queue);
  uint64_t v7 = v6;
  if (v6)
  {
    dispatch_set_context(v6, a1);
    dispatch_source_set_event_handler_f(v7, a4);
    dispatch_resume(v7);
  }
  else
  {
    APSLogErrorAt();
  }
  return v7;
}

uint64_t APAuthenticationClientMFiCreate(uint64_t a1, const void *a2, void *a3)
{
  if (a2)
  {
    APAuthenticationClientGetClassID();
    uint64_t v5 = CMDerivedObjectCreate();
    if (v5)
    {
      uint64_t v6 = v5;
      APSLogErrorAt();
    }
    else
    {
      *(void *)(CMBaseObjectGetDerivedStorage() + 8) = a2;
      CFRetain(a2);
      if (gLogCategory_APAuthenticationClientMFi <= 30
        && (gLogCategory_APAuthenticationClientMFi != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      uint64_t v6 = 0;
      *a3 = 0;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294895495;
  }
  return v6;
}

void mfiAuthentication_Finalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAuthenticationClientMFi <= 30
    && (gLogCategory_APAuthenticationClientMFi != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*DerivedStorage)
  {
    MFiSAP_Delete();
    *uint64_t DerivedStorage = 0;
  }
  uint64_t v1 = (const void *)DerivedStorage[1];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[1] = 0;
  }
}

__CFString *mfiAuthentication_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<APAuthenticationClientMFi %p>", a1);
  return Mutable;
}

uint64_t mfiAuthentication_CopyProperty(int a1, CFTypeRef cf1, const __CFAllocator *a3, void *a4)
{
  if (!CFEqual(cf1, @"AuthenticationData")) {
    return 4294954512;
  }
  if (!*(void *)CMBaseObjectGetDerivedStorage())
  {
    uint64_t v10 = 4294895493;
LABEL_15:
    APSLogErrorAt();
    return v10;
  }
  if (!MFiSAP_CopyCertificateSerialNumber())
  {
    CFDataRef v11 = CFDataCreateWithBytesNoCopy(a3, 0, 0, (CFAllocatorRef)*MEMORY[0x1E4F1CF90]);
    *a4 = v11;
    if (v11) {
      return 0;
    }
LABEL_18:
    APSLogErrorAt();
    return 4294895496;
  }
  uint64_t v6 = MFiSAP_CopyCertificate();
  if (v6)
  {
    uint64_t v10 = v6;
    goto LABEL_15;
  }
  CFDataRef v7 = CFDataCreateWithBytesNoCopy(a3, 0, 0, (CFAllocatorRef)*MEMORY[0x1E4F1CF90]);
  if (!v7) {
    goto LABEL_18;
  }
  CFDataRef v8 = v7;
  uint64_t v9 = ((uint64_t (*)(uint64_t))softLinkMFAACreateCertificateSerialNumber[0])((uint64_t)v7);
  *a4 = v9;
  if (v9)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = 4294895493;
    APSLogErrorAt();
  }
  CFRelease(v8);
  return v10;
}

uint64_t initMFAACreateCertificateSerialNumber(uint64_t a1)
{
  if (MFAAuthenticationLibrary_sOnce != -1) {
    dispatch_once(&MFAAuthenticationLibrary_sOnce, &__block_literal_global_35);
  }
  uint64_t v2 = (uint64_t (*)())dlsym((void *)MFAAuthenticationLibrary_sLib, "MFAACreateCertificateSerialNumber");
  softLinkMFAACreateCertificateSerialNumber[0] = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

void *__MFAAuthenticationLibrary_block_invoke()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/MFAAuthentication.framework/MFAAuthentication", 2);
  MFAAuthenticationLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t mfiAuthentication_GetAuthenticationType()
{
  return 8;
}

uint64_t mfiAuthentication_AuthenticateEndpoint()
{
  size_t lengthAtOffsetOut = 0;
  CMTime dataPointerOut = 0;
  char v14 = 0;
  CFTypeRef v12 = 0;
  CFTypeRef cf = 0;
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAuthenticationClientMFi <= 40
    && (gLogCategory_APAuthenticationClientMFi != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*DerivedStorage)
  {
    MFiSAP_Delete();
    *uint64_t DerivedStorage = 0;
  }
  uint64_t v1 = MFiSAP_Create();
  if (v1)
  {
    uint64_t v10 = v1;
  }
  else
  {
    size_t lengthAtOffsetOut = 0;
    CMTime dataPointerOut = 0;
    uint64_t v2 = MFiSAP_Exchange();
    if (v2)
    {
LABEL_23:
      uint64_t v10 = v2;
    }
    else
    {
      while (1)
      {
        if (v14)
        {
          uint64_t v10 = 0;
          goto LABEL_27;
        }
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
        if (v12)
        {
          CFRelease(v12);
          CFTypeRef v12 = 0;
        }
        uint64_t BlockBufferCopyingMemoryBlock = FigCreateBlockBufferCopyingMemoryBlock();
        if (BlockBufferCopyingMemoryBlock)
        {
          uint64_t v10 = BlockBufferCopyingMemoryBlock;
          goto LABEL_25;
        }
        if (dataPointerOut)
        {
          free(dataPointerOut);
          CMTime dataPointerOut = 0;
        }
        uint64_t v4 = DerivedStorage[1];
        CFTypeRef v5 = cf;
        uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v6) {
          uint64_t v7 = v6;
        }
        else {
          uint64_t v7 = 0;
        }
        CFDataRef v8 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef, CFTypeRef *))(v7 + 56);
        if (!v8)
        {
          uint64_t v10 = 4294954514;
          goto LABEL_25;
        }
        uint64_t v9 = v8(v4, 1835428128, v5, &v12);
        if (v9) {
          break;
        }
        CMBlockBufferGetDataPointer((CMBlockBufferRef)v12, 0, &lengthAtOffsetOut, 0, &dataPointerOut);
        uint64_t v2 = MFiSAP_Exchange();
        if (v2) {
          goto LABEL_23;
        }
      }
      uint64_t v10 = v9;
    }
  }
LABEL_25:
  APSLogErrorAt();
LABEL_27:
  if (cf) {
    CFRelease(cf);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (v10)
  {
    if (*DerivedStorage)
    {
      MFiSAP_Delete();
      *uint64_t DerivedStorage = 0;
    }
    if (gLogCategory_APAuthenticationClientMFi <= 60
      && (gLogCategory_APAuthenticationClientMFi != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  return v10;
}

uint64_t mfiAuthentication_CreateEncryptedKey(uint64_t a1, const __CFData *a2, const __CFAllocator *a3, CFDataRef *a4)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (!*(void *)CMBaseObjectGetDerivedStorage())
  {
    uint64_t v9 = 4294895493;
LABEL_8:
    APSLogErrorAt();
    return v9;
  }
  CFDataGetBytePtr(a2);
  uint64_t v7 = MFiSAP_Encrypt();
  if (v7)
  {
    uint64_t v9 = v7;
    goto LABEL_8;
  }
  CFDataRef v8 = CFDataCreate(a3, bytes, 16);
  if (v8)
  {
    uint64_t v9 = 0;
    *a4 = v8;
  }
  else
  {
    APSLogErrorAt();
    return 4294895496;
  }
  return v9;
}

uint64_t mrcr_getTypeID(uint64_t *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

uint64_t APMediaRemoteCommandReceiverCreate(uint64_t a1, const void *a2, int **a3)
{
  if (!a2)
  {
    uint64_t v9 = 4294895603;
LABEL_15:
    APSLogErrorAt();
    return v9;
  }
  if (!a3)
  {
    uint64_t v9 = 4294895603;
    goto LABEL_15;
  }
  if (APMediaRemoteCommandReceiverGetTypeID_sInitOnce != -1) {
    dispatch_once_f(&APMediaRemoteCommandReceiverGetTypeID_sInitOnce, &APMediaRemoteCommandReceiverGetTypeID_sTypeID, (dispatch_function_t)mrcr_getTypeID);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v6 = (int *)Instance;
    *(_OWORD *)(Instance + 16) = 0u;
    *(_OWORD *)(Instance + 32) = 0u;
    uint64_t v7 = (int *)(Instance + 32);
    *(void *)(Instance + 16) = CFRetain(a2);
    CFMutableDictionaryRef v6[10] = -1;
    *(void *)uint64_t v7 = -1;
    uint64_t v8 = DACPServer_Create();
    if (v8)
    {
      uint64_t v9 = v8;
      APSLogErrorAt();
      CFRelease(v6);
    }
    else
    {
      notify_register_check("com.apple.AirTunes.DACP.devicevolume", v7);
      notify_register_check("com.apple.AirTunes.DACP.devicevolumechanged", v6 + 9);
      notify_register_check("com.apple.AirTunes.DACP.device-prevent-playback", v6 + 10);
      if (gLogCategory_APMediaRemoteCommandReceiver <= 30
        && (gLogCategory_APMediaRemoteCommandReceiver != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      uint64_t v9 = 0;
      *a3 = v6;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294895606;
  }
  return v9;
}

uint64_t mrcr_handleDACPCommand(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!strnicmpx())
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    unsigned __int16 v11 = 30064;
LABEL_24:
    int v7 = v11 | 0x766C0000;
    goto LABEL_25;
  }
  if (!strnicmpx())
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    unsigned __int16 v11 = 25710;
    goto LABEL_24;
  }
  if (!strnicmpx())
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    int v7 = 1836414068;
    goto LABEL_25;
  }
  if (!strnicmpx())
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    int v7 = 1852404845;
    goto LABEL_25;
  }
  if (!strnicmpx())
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    int v7 = 1885959277;
    goto LABEL_25;
  }
  if (!strnicmpx())
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    int v7 = 1920166260;
    goto LABEL_25;
  }
  int v7 = 1886151033;
  if (!strnicmpx())
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    goto LABEL_25;
  }
  if (!strnicmpx())
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    int v7 = 1937010544;
    goto LABEL_25;
  }
  if (!strnicmpx())
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    int v7 = 1885435251;
    goto LABEL_25;
  }
  if (!strnicmpx())
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    int v7 = 1685086581;
    goto LABEL_25;
  }
  if (!strnicmpx())
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    int v7 = 1886154867;
    goto LABEL_25;
  }
  if (!strnicmpx())
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    int v7 = 1919967588;
    goto LABEL_25;
  }
  if (!strnicmpx())
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    int v7 = 1936225383;
    goto LABEL_25;
  }
  if (!strnicmp_prefix())
  {
    if (a3 < 13)
    {
LABEL_42:
      APSLogErrorAt();
      return 4294895605;
    }
    uint64_t v13 = 0;
    while (*(unsigned char *)(a2 + v13 + 12) != 61)
    {
      ++v13;
      if (a2 + v13 + 12 >= (unint64_t)(a2 + a3)) {
        goto LABEL_42;
      }
    }
    uint64_t v9 = a2 + v13 + 13;
    unint64_t v10 = a3 - v13 - 13;
    if (strnicmpx())
    {
      if (strnicmpx())
      {
        uint64_t v8 = 4294895602;
        if (gLogCategory_APMediaRemoteCommandReceiver <= 60
          && (gLogCategory_APMediaRemoteCommandReceiver != -1 || _LogCategory_Initialize()))
        {
          goto LABEL_49;
        }
        return v8;
      }
      if (*(_DWORD *)(a4 + 40) == -1)
      {
        APSLogErrorAt();
        return 4294895604;
      }
      if (strnicmpx())
      {
        if (!strnicmpx() || !strnicmpx())
        {
          int v7 = 1885499506;
          goto LABEL_25;
        }
        if (strnicmpx()) {
          return 4294895603;
        }
      }
      int v7 = 1885495660;
    }
    else
    {
      int v7 = 1685482605;
    }
LABEL_25:
    APMediaRemoteCommandReceiverHandleAPCommand(a4, v7, v9, v10);
    return 0;
  }
  if (!strnicmp_prefix())
  {
    int v7 = 1685482604;
    uint64_t v9 = a2 + 13;
    unint64_t v10 = a3 - 13;
    goto LABEL_25;
  }
  if (!strnicmpx())
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    int v7 = 1650878052;
    goto LABEL_25;
  }
  if (!strnicmpx())
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    int v7 = 1651668836;
    goto LABEL_25;
  }
  if (!strnicmpx())
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    int v7 = 1886155379;
    goto LABEL_25;
  }
  uint64_t v8 = 4294895602;
  if (gLogCategory_APMediaRemoteCommandReceiver <= 60
    && (gLogCategory_APMediaRemoteCommandReceiver != -1 || _LogCategory_Initialize()))
  {
LABEL_49:
    LogPrintF();
  }
  return v8;
}

uint64_t APMediaRemoteCommandReceiverGetID(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 24) + 240);
}

uint64_t APMediaRemoteCommandReceiverAddClient()
{
  uint64_t v0 = DACPServer_AddRemote();
  if (v0)
  {
    uint64_t v2 = v0;
LABEL_11:
    APSLogErrorAt();
    return v2;
  }
  uint64_t v1 = HTTPServer_Start();
  if (v1)
  {
    uint64_t v2 = v1;
    goto LABEL_11;
  }
  if (gLogCategory_APMediaRemoteCommandReceiver <= 30
    && (gLogCategory_APMediaRemoteCommandReceiver != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return 0;
}

uint64_t APMediaRemoteCommandReceiverRemoveClient()
{
  if (gLogCategory_APMediaRemoteCommandReceiver <= 30
    && (gLogCategory_APMediaRemoteCommandReceiver != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v0 = DACPServer_RemoveRemote();
  if (v0)
  {
    uint64_t v1 = v0;
    goto LABEL_9;
  }
  uint64_t v1 = HTTPServer_Stop();
  if (v1) {
LABEL_9:
  }
    APSLogErrorAt();
  return v1;
}

uint64_t APMediaRemoteCommandReceiverHandleAPCommand(uint64_t result, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  if (gLogCategory_APMediaRemoteCommandReceiver <= 50)
  {
    if (gLogCategory_APMediaRemoteCommandReceiver != -1 || (uint64_t result = _LogCategory_Initialize(), result)) {
      uint64_t result = LogPrintF();
    }
  }
  if (a2 <= 1885495659)
  {
    if (a2 <= 1685482604)
    {
      if (a2 == 1685482595)
      {
        uint64_t result = mrcr_handleDeviceVolume(v7, "com.apple.AirTunes.DACP.devicevolumechanged", a3, a4);
        if (!result) {
          return result;
        }
        goto LABEL_26;
      }
      if (a2 == 1685482604)
      {
        uint64_t result = mrcr_handleDeviceVolume(v7, "com.apple.AirTunes.DACP.devicevolume", a3, a4);
        if (!result) {
          return result;
        }
LABEL_26:
        return APSLogErrorAt();
      }
      goto LABEL_33;
    }
    if (a2 == 1685482605)
    {
      uint64_t result = mrcr_handleDeviceVolume(v7, "com.apple.AirTunes.DACP.devicevolume", a3, a4);
      if (!result) {
        return result;
      }
      goto LABEL_26;
    }
    if (a2 == 1836414068)
    {
      uint64_t v8 = "com.apple.AirTunes.DACP.mutetoggle";
LABEL_30:
      uint64_t result = notify_post(v8);
      if (gLogCategory_APMediaRemoteCommandReceiver <= 50)
      {
        if (gLogCategory_APMediaRemoteCommandReceiver != -1) {
          return LogPrintF();
        }
        uint64_t result = _LogCategory_Initialize();
        if (result) {
          return LogPrintF();
        }
      }
      return result;
    }
    goto LABEL_33;
  }
  if (a2 > 1986815085)
  {
    if (a2 == 1986819440)
    {
      uint64_t v8 = "com.apple.AirTunes.DACP.volumeup";
      goto LABEL_30;
    }
    if (a2 == 1986815086)
    {
      uint64_t v8 = "com.apple.AirTunes.DACP.volumedown";
      goto LABEL_30;
    }
LABEL_33:
    uint64_t v9 = *(void *)(v7 + 16);
    return APMediaRemoteCommandSinkHandleAPCommand(v9, a2);
  }
  if (a2 == 1885495660) {
    return result;
  }
  if (a2 != 1885499506) {
    goto LABEL_33;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t mrcr_handleDeviceVolume(uint64_t a1, const char *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  double v13 = 0.0;
  if (!a2)
  {
    APSLogErrorAt();
    return 4294895603;
  }
  if (a4 >= 0x40)
  {
    uint64_t v11 = 4294895601;
    APSLogErrorAt();
    return v11;
  }
  __memcpy_chk();
  v14[a4] = 0;
  if (sscanf(v14, "%lf", &v13) != 1)
  {
    APSLogErrorAt();
    return 4294895605;
  }
  double v7 = v13;
  if (v13 > 0.0) {
    double v7 = 0.0;
  }
  if (v7 < -30.0) {
    double v7 = -30.0;
  }
  double v13 = v7;
  APSVolumeConvertDBToSliderValue();
  float v9 = v8;
  if (!strcmp(a2, "com.apple.AirTunes.DACP.devicevolume"))
  {
    unint64_t v10 = (int *)(a1 + 32);
  }
  else
  {
    if (strcmp(a2, "com.apple.AirTunes.DACP.devicevolumechanged")) {
      return 0;
    }
    unint64_t v10 = (int *)(a1 + 36);
  }
  if (*v10 == -1) {
    return 0;
  }
  notify_set_state(*v10, COERCE_UINT64_T(v9));
  uint64_t v11 = notify_post(a2);
  if (gLogCategory_APMediaRemoteCommandReceiver <= 40
    && (gLogCategory_APMediaRemoteCommandReceiver != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v11;
}

uint64_t APMediaRemoteCommandReceiverHandleMRCommand(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (gLogCategory_APMediaRemoteCommandReceiver <= 30
    && (gLogCategory_APMediaRemoteCommandReceiver != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  uint64_t v6 = *(void *)(a1 + 16);
  return APMediaRemoteCommandSinkHandleMRCommand(v6, a2, a3);
}

void mrcr_Finalize(uint64_t a1)
{
  if (gLogCategory_APMediaRemoteCommandReceiver <= 30
    && (gLogCategory_APMediaRemoteCommandReceiver != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  int v2 = *(_DWORD *)(a1 + 32);
  if (v2 != -1)
  {
    notify_cancel(v2);
    *(_DWORD *)(a1 + 32) = -1;
  }
  int v3 = *(_DWORD *)(a1 + 36);
  if (v3 != -1)
  {
    notify_cancel(v3);
    *(_DWORD *)(a1 + 36) = -1;
  }
  int v4 = *(_DWORD *)(a1 + 40);
  if (v4 != -1)
  {
    notify_cancel(v4);
    *(_DWORD *)(a1 + 40) = -1;
  }
  if (*(void *)(a1 + 24))
  {
    HTTPServer_Delete();
    *(void *)(a1 + 24) = 0;
  }
  CFTypeRef v5 = *(const void **)(a1 + 16);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 16) = 0;
  }
}

uint64_t APAudioSinkJitterBufferCreate(uint64_t a1, long long *a2, void *a3)
{
  if (a3)
  {
    FigEndpointAudioSinkGetClassID();
    uint64_t v5 = CMDerivedObjectCreate();
    if (v5)
    {
      uint64_t v11 = v5;
      APSLogErrorAt();
    }
    else
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v7 = *((void *)a2 + 4);
      long long v8 = a2[1];
      *(_OWORD *)(DerivedStorage + 64) = *a2;
      *(_OWORD *)(DerivedStorage + 80) = v8;
      *(void *)(DerivedStorage + 96) = v7;
      long long v10 = *a2;
      long long v9 = a2[1];
      *(void *)(DerivedStorage + 56) = *((void *)a2 + 4);
      *(_OWORD *)(DerivedStorage + 24) = v10;
      *(_OWORD *)(DerivedStorage + 40) = v9;
      *(_DWORD *)(DerivedStorage + 16) = 50;
      *(unsigned char *)(DerivedStorage + 112) = 0;
      if (gLogCategory_APAudioSinkJitterBuffer <= 30
        && (gLogCategory_APAudioSinkJitterBuffer != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      uint64_t v11 = 0;
      *a3 = 0;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294950504;
  }
  return v11;
}

void jitterBuffer_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 8) = 0;
  }
}

__CFString *jitterBuffer_CopyDebugDescription()
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<APAudioSinkJitterBuffer>");
  return Mutable;
}

uint64_t jitterBuffer_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFNumberRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, @"Statistics"))
  {
    if (*(void *)(DerivedStorage + 8))
    {
      return MEMORY[0x1F4107C20]();
    }
    else
    {
      APSLogErrorAt();
      return 4294950503;
    }
  }
  else if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F203A0]))
  {
    CFNumberRef v8 = CFNumberCreate(a3, kCFNumberSInt32Type, (const void *)(DerivedStorage + 16));
    *a4 = v8;
    if (v8)
    {
      return 0;
    }
    else
    {
      APSLogErrorAt();
      return 4294950506;
    }
  }
  else if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F203A8]))
  {
    long long v9 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    if (!*(unsigned char *)(DerivedStorage + 112)) {
      long long v9 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
    }
    CFNumberRef v10 = (const __CFNumber *)CFRetain(*v9);
    uint64_t result = 0;
    *a4 = v10;
  }
  else
  {
    return 4294954512;
  }
  return result;
}

uint64_t jitterBuffer_SetProperty(uint64_t a1, const void *a2)
{
  unsigned int v5 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F203A0]))
  {
    *(_DWORD *)(DerivedStorage + 16) = CFGetInt64();
  }
  else if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F203A8]))
  {
    *(unsigned char *)(DerivedStorage + 112) = CFGetInt64() != 0;
  }
  else
  {
    return -12784;
  }
  return v5;
}

uint64_t jitterBuffer_GetInputFormat(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(void *)(DerivedStorage + 56);
  long long v5 = *(_OWORD *)(DerivedStorage + 40);
  *(_OWORD *)a2 = *(_OWORD *)(DerivedStorage + 24);
  *(_OWORD *)(a2 + 16) = v5;
  *(void *)(a2 + 32) = v4;
  return 0;
}

uint64_t jitterBuffer_SetInputFormat(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = DerivedStorage + 64;
  if (a2) {
    uint64_t v4 = a2;
  }
  uint64_t v5 = *(void *)(v4 + 32);
  long long v6 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)(DerivedStorage + 24) = *(_OWORD *)v4;
  *(_OWORD *)(DerivedStorage + 40) = v6;
  *(void *)(DerivedStorage + 56) = v5;
  return 0;
}

uint64_t jitterBuffer_Resume(const void *a1)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    APSLogErrorAt();
    return 4294950503;
  }
  else
  {
    int v3 = DerivedStorage;
    if (gLogCategory_APAudioSinkJitterBuffer <= 30
      && (gLogCategory_APAudioSinkJitterBuffer != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (!*((void *)v3 + 1))
    {
      CFGetAllocator(a1);
      *((void *)v3 + 1) = APSRTPJitterBufferCreate();
    }
    uint64_t result = 0;
    unsigned char *v3 = 1;
  }
  return result;
}

uint64_t jitterBuffer_Suspend()
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    uint64_t v1 = DerivedStorage;
    if (gLogCategory_APAudioSinkJitterBuffer <= 30
      && (gLogCategory_APAudioSinkJitterBuffer != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    uint64_t result = 0;
    unsigned char *v1 = 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294950503;
  }
  return result;
}

uint64_t jitterBuffer_AcquireBuffer(uint64_t a1, void *a2, void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 104))
  {
    APSLogErrorAt();
    return 4294950503;
  }
  else
  {
    uint64_t v6 = DerivedStorage;
    uint64_t EmptyPacket = APSRTPJitterBufferGetEmptyPacket();
    *(void *)(v6 + 104) = EmptyPacket;
    uint64_t result = 0;
    *a2 = EmptyPacket + 12;
    *a3 = 1460;
  }
  return result;
}

uint64_t jitterBuffer_CommitBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v10 = *(void *)(DerivedStorage + 104);
  if (v10 && v10 + 12 == a2)
  {
    uint64_t v11 = DerivedStorage;
    if (a3)
    {
      if (*(unsigned char *)(a6 + 56))
      {
        *(_DWORD *)(v10 + 4) = (unint64_t)*(double *)a6;
        *(void *)(*(void *)(DerivedStorage + 104) + 1472) = a3;
        APSRTPJitterBufferEnqueuePacket();
        uint64_t result = 0;
        *(void *)(v11 + 104) = 0;
      }
      else
      {
        APSLogErrorAt();
        return 4294950504;
      }
    }
    else
    {
      APSRTPJitterBufferDiscardPacket();
      return 0;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294950503;
  }
  return result;
}

uint64_t jitterBuffer_ReadPackets(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6, unint64_t *a7, _DWORD *a8)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((*(unsigned char *)(a2 + 136) & 1) == 0 || a5 || (unint64_t v15 = (*(_DWORD *)(DerivedStorage + 80) * a6), v15 > a4))
  {
    APSLogErrorAt();
    return 4294950504;
  }
  else
  {
    uint64_t v16 = APSRTPJitterBufferRead();
    if (v16)
    {
      APSLogErrorAt();
    }
    else
    {
      *a7 = v15;
      *a8 = a6;
    }
  }
  return v16;
}

uint64_t SPHubbedDevicesProviderPropertyCreate(void *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    SPHubbedDevicesProviderGetClassID();
    uint64_t v2 = CMDerivedObjectCreate();
    if (v2)
    {
      uint64_t v6 = v2;
      APSLogErrorAt();
    }
    else
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (gLogCategory_SPHubbedDevicesProviderProperty <= 30
        && (gLogCategory_SPHubbedDevicesProviderProperty != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *(unsigned char *)(DerivedStorage + 24) = 0;
      uint64_t v4 = FigSimpleMutexCreate();
      *(void *)uint64_t DerivedStorage = v4;
      if (v4 && (SNPrintF(), dispatch_queue_t v5 = dispatch_queue_create(label, 0), (*(void *)(DerivedStorage + 8) = v5) != 0))
      {
        *(void *)(DerivedStorage + 16) = 0;
        if (gLogCategory_SPHubbedDevicesProviderProperty <= 50
          && (gLogCategory_SPHubbedDevicesProviderProperty != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        uint64_t v6 = 0;
        *a1 = 0;
      }
      else
      {
        APSLogErrorAt();
        return 4294960568;
      }
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
  return v6;
}

uint64_t hdpp_Invalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPHubbedDevicesProviderProperty <= 50
    && (gLogCategory_SPHubbedDevicesProviderProperty != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *(unsigned char *)(DerivedStorage + 24) = 1;
  return 0;
}

uint64_t hdpp_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPHubbedDevicesProviderProperty <= 50
    && (gLogCategory_SPHubbedDevicesProviderProperty != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(unsigned char *)(DerivedStorage + 24))
  {
    uint64_t v1 = *(const void **)(DerivedStorage + 16);
    if (v1)
    {
      CFRelease(v1);
      *(void *)(DerivedStorage + 16) = 0;
    }
    uint64_t v2 = *(NSObject **)(DerivedStorage + 8);
    if (v2)
    {
      dispatch_release(v2);
      *(void *)(DerivedStorage + 8) = 0;
    }
    return FigSimpleMutexDestroy();
  }
  else
  {
    uint64_t result = gLogCategory_SPHubbedDevicesProviderProperty;
    if (gLogCategory_SPHubbedDevicesProviderProperty <= 90) {
      uint64_t result = hdpp_Finalize_cold_1(gLogCategory_SPHubbedDevicesProviderProperty);
    }
    __break(1u);
  }
  return result;
}

__CFString *hdpp_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<SPHubbedDevicesProviderProperty %p>", a1);
  return Mutable;
}

uint64_t hdpp_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFSetRef *a4)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPHubbedDevicesProviderProperty <= 30
    && (gLogCategory_SPHubbedDevicesProviderProperty != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!a2 || !a4)
  {
    APSLogErrorAt();
    return 4294960591;
  }
  MEMORY[0x1D25EB370](*DerivedStorage);
  if (!CFEqual(a2, @"HubbedDevices"))
  {
    if (gLogCategory_SPHubbedDevicesProviderProperty <= 30
      && (gLogCategory_SPHubbedDevicesProviderProperty != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    uint64_t v13 = 4294954512;
    goto LABEL_26;
  }
  uint64_t v8 = CMBaseObjectGetDerivedStorage();
  CFSetRef v9 = *(const __CFSet **)(v8 + 16);
  if (v9)
  {
    if (gLogCategory_SPHubbedDevicesProviderProperty <= 30)
    {
      uint64_t v10 = v8;
      if (gLogCategory_SPHubbedDevicesProviderProperty != -1
        || (v11 = _LogCategory_Initialize(), CFSetRef v9 = *(const __CFSet **)(v10 + 16), v11))
      {
        LogPrintF();
        CFSetRef v9 = *(const __CFSet **)(v10 + 16);
      }
    }
    CFSetRef Copy = CFSetCreateCopy(a3, v9);
    if (!Copy)
    {
LABEL_29:
      APSLogErrorAt();
      uint64_t v13 = 4294960568;
      goto LABEL_26;
    }
  }
  else
  {
    if (gLogCategory_SPHubbedDevicesProviderProperty <= 30
      && (gLogCategory_SPHubbedDevicesProviderProperty != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CFSetRef Copy = CFSetCreate(a3, 0, 0, MEMORY[0x1E4F1D548]);
    if (!Copy) {
      goto LABEL_29;
    }
  }
  uint64_t v13 = 0;
  *a4 = Copy;
LABEL_26:
  MEMORY[0x1D25EB390](*DerivedStorage);
  return v13;
}

uint64_t hdpp_SetProperty(uint64_t a1, const void *a2, CFSetRef a3)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPHubbedDevicesProviderProperty <= 30
    && (gLogCategory_SPHubbedDevicesProviderProperty != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!a2)
  {
    APSLogErrorAt();
    return 4294960591;
  }
  MEMORY[0x1D25EB370](*DerivedStorage);
  if (!CFEqual(a2, @"HubbedDevices"))
  {
    if (gLogCategory_SPHubbedDevicesProviderProperty <= 30
      && (gLogCategory_SPHubbedDevicesProviderProperty != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    uint64_t v13 = 4294954512;
    goto LABEL_37;
  }
  values = a3;
  uint64_t v6 = CMBaseObjectGetDerivedStorage();
  if (!a3) {
    goto LABEL_18;
  }
  CFTypeID v7 = CFGetTypeID(a3);
  if (v7 == CFSetGetTypeID())
  {
    CFSetRef v8 = (const __CFSet *)CFRetain(a3);
LABEL_17:
    a3 = v8;
    goto LABEL_18;
  }
  CFTypeID v9 = CFGetTypeID(a3);
  if (v9 == CFArrayGetTypeID())
  {
    CFIndex Count = CFArrayGetCount(a3);
    int v11 = (const void **)malloc_type_calloc(Count, 8uLL, 0xC0040B8AA526DuLL);
    v17.location = 0;
    v17.length = Count;
    CFArrayGetValues(a3, v17, v11);
    a3 = CFSetCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v11, Count, MEMORY[0x1E4F1D548]);
    free(v11);
LABEL_18:
    if (!FigCFEqual())
    {
      if (gLogCategory_SPHubbedDevicesProviderProperty <= 50
        && (gLogCategory_SPHubbedDevicesProviderProperty != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      char v14 = *(const void **)(v6 + 16);
      *(void *)(v6 + 16) = a3;
      if (a3) {
        CFRetain(a3);
      }
      if (v14) {
        CFRelease(v14);
      }
      if (gLogCategory_SPHubbedDevicesProviderProperty <= 50
        && (gLogCategory_SPHubbedDevicesProviderProperty != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
    }
    if (a3) {
      CFRelease(a3);
    }
    uint64_t v13 = 0;
    goto LABEL_37;
  }
  CFTypeID v12 = CFGetTypeID(a3);
  if (v12 == CFStringGetTypeID())
  {
    CFSetRef v8 = CFSetCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&values, 1, MEMORY[0x1E4F1D548]);
    goto LABEL_17;
  }
  APSLogErrorAt();
  uint64_t v13 = 4294960591;
LABEL_37:
  MEMORY[0x1D25EB390](*DerivedStorage);
  return v13;
}

uint64_t hdpp_Start()
{
  return 0;
}

uint64_t _AirPlayRSA_Init(uint64_t *a1)
{
  uint64_t RSAPublicKey = SecKeyCreateRSAPublicKey();
  *a1 = RSAPublicKey;
  if (RSAPublicKey) {
    return 0;
  }
  APSLogErrorAt();
  return 4294960596;
}

uint64_t AirPlayRSA_PublicEncrypt(const uint8_t *a1, size_t a2, uint8_t *a3, size_t a4, size_t *a5)
{
  size_t __len = 0;
  SecKeyRef key = 0;
  uint64_t v10 = _AirPlayRSA_Init((uint64_t *)&key);
  if (v10)
  {
    uint64_t v15 = v10;
    APSLogErrorAt();
  }
  else if (a4 <= 0xFF)
  {
    APSLogErrorAt();
    uint64_t v15 = 4294960553;
  }
  else
  {
    size_t __len = a4;
    SecKeyRef v11 = key;
    uint64_t v12 = SecKeyEncrypt(key, 2u, a1, a2, a3, &__len);
    if (v12)
    {
      uint64_t v15 = v12;
      APSLogErrorAt();
      if (!v11) {
        return v15;
      }
      goto LABEL_8;
    }
    size_t v13 = __len;
    if (__len <= 0xFF)
    {
      size_t v14 = 256 - __len;
      memmove(&a3[256 - __len], a3, __len);
      bzero(a3, v14);
      size_t __len = 256;
      size_t v13 = 256;
    }
    uint64_t v15 = 0;
    *a5 = v13;
  }
  SecKeyRef v11 = key;
  if (key) {
LABEL_8:
  }
    CFRelease(v11);
  return v15;
}

uint64_t AirPlayRSA_PublicDecrypt(const uint8_t *a1, size_t a2, void *a3, unint64_t a4, unint64_t *a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  size_t plainTextLen = 0;
  SecKeyRef key = 0;
  uint64_t v10 = _AirPlayRSA_Init((uint64_t *)&key);
  if (v10)
  {
    uint64_t v15 = v10;
    APSLogErrorAt();
    SecKeyRef v11 = key;
    goto LABEL_6;
  }
  size_t plainTextLen = 256;
  SecKeyRef v11 = key;
  uint64_t v12 = SecKeyDecrypt(key, 0, a1, a2, plainText, &plainTextLen);
  if (v12)
  {
    uint64_t v15 = v12;
LABEL_11:
    APSLogErrorAt();
    goto LABEL_6;
  }
  size_t v13 = plainTextLen;
  if (plainTextLen <= 0xFF)
  {
    size_t v14 = 256 - plainTextLen;
    memmove(&plainText[256 - plainTextLen], plainText, plainTextLen);
    bzero(plainText, v14);
    size_t plainTextLen = 256;
    size_t v13 = 256;
  }
  uint64_t v15 = _AirPlayRSA_PKCS1v1pt5_Decode(plainText, v13, 2048, 1, a3, a4, a5);
  if (v15) {
    goto LABEL_11;
  }
LABEL_6:
  if (v11) {
    CFRelease(v11);
  }
  return v15;
}

uint64_t _AirPlayRSA_PKCS1v1pt5_Decode(unsigned char *a1, uint64_t a2, uint64_t a3, int a4, void *__dst, unint64_t a6, unint64_t *a7)
{
  if ((unint64_t)(a3 + 7) < 0x58) {
    return 4294960546;
  }
  if (a2 != (unint64_t)(a3 + 7) >> 3) {
    return 4294960553;
  }
  if (*a1) {
    return 4294960579;
  }
  if (a1[1] != a4) {
    return 4294960540;
  }
  CFTypeID v9 = &a1[a2];
  uint64_t v10 = a1 + 2;
  if (a4 == 1)
  {
    SecKeyRef v11 = a1 + 2;
    if (a2 >= 3)
    {
      do
      {
        if (*v11 != 255) {
          break;
        }
        ++v11;
      }
      while (v11 < v9);
    }
    uint64_t result = 4294960546;
    if (v11 >= v9 || v11 - v10 < 8) {
      return result;
    }
    if (*v11) {
      return 4294960554;
    }
    goto LABEL_27;
  }
  if (a4 != 2) {
    return 4294960561;
  }
  SecKeyRef v11 = a1 + 2;
  if (a2 >= 3)
  {
    do
    {
      if (!*v11) {
        break;
      }
      ++v11;
    }
    while (v11 < v9);
  }
  uint64_t result = 4294960546;
  if (v11 < v9 && v11 - v10 >= 8)
  {
    if (*v11) {
      return 4294960579;
    }
LABEL_27:
    unint64_t v12 = v9 - (v11 + 1);
    if (__dst)
    {
      if (v12 > a6)
      {
        APSLogErrorAt();
        return 4294960553;
      }
      memcpy(__dst, v11 + 1, v9 - (v11 + 1));
    }
    uint64_t result = 0;
    if (a7) {
      *a7 = v12;
    }
  }
  return result;
}

uint64_t policyMonitorEndpointStateChanged(int a1, void *a2, CFTypeRef cf1)
{
  uint64_t result = CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E4F206D8]);
  if (result)
  {
    return [a2 endpointAuthenticationSucceeded];
  }
  return result;
}

void policyMonitorEndpointDeactivated(int a1, int a2, int a3, int a4, dispatch_semaphore_t dsema)
{
  dispatch_semaphore_signal(dsema);
  dispatch_release(dsema);
}

Class initCRVehiclePolicyMonitor()
{
  if (CarKitLibrary_sOnce_1 != -1) {
    dispatch_once(&CarKitLibrary_sOnce_1, &__block_literal_global_36);
  }
  Class result = objc_getClass("CRVehiclePolicyMonitor");
  classCRVehiclePolicyMonitor = (uint64_t)result;
  getCRVehiclePolicyMonitorClass = CRVehiclePolicyMonitorFunction;
  return result;
}

uint64_t CRVehiclePolicyMonitorFunction()
{
  return classCRVehiclePolicyMonitor;
}

void *__CarKitLibrary_block_invoke_1()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/CarKit.framework/CarKit", 2);
  CarKitLibrary_sLib_1 = (uint64_t)result;
  return result;
}

uint64_t APEndpointCreateWithEndpointDescription(uint64_t a1, const void *a2, const void *a3, uint64_t a4, const __CFDictionary *a5, CFTypeRef *a6)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  CFTypeRef v41 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v40 = 0;
  if (!a2 || !a6)
  {
    APSLogErrorAt();
    uint64_t v23 = 4294950576;
    goto LABEL_13;
  }
  FigEndpointExtendedGetClassID();
  uint64_t v12 = CMDerivedObjectCreate();
  if (v12)
  {
    uint64_t v23 = v12;
    goto LABEL_12;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v14 = CFRetain(a2);
  *(void *)(DerivedStorage + 32) = a4;
  *(void *)(DerivedStorage + 40) = v14;
  uint64_t CMBaseObject = APEndpointDescriptionGetCMBaseObject(v14);
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v18 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v17 + 48);
  if (!v18)
  {
    uint64_t v23 = 4294954514;
LABEL_12:
    APSLogErrorAt();
    goto LABEL_13;
  }
  uint64_t v19 = v18(CMBaseObject, @"Name", a1, &v41);
  if (v19)
  {
    uint64_t v23 = v19;
    goto LABEL_12;
  }
  uint64_t v20 = APEndpointDescriptionGetCMBaseObject(*(void *)(DerivedStorage + 40));
  uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v21) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = 0;
  }
  CFTypeRef v24 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v22 + 48);
  if (v24) {
    v24(v20, @"DeviceID", a1, &v40);
  }
  uint64_t v25 = FigSimpleMutexCreate();
  *(void *)(DerivedStorage + 120) = v25;
  if (v25)
  {
    SNPrintF();
    dispatch_queue_t v26 = dispatch_queue_create(label, 0);
    *(void *)(DerivedStorage + 576) = v26;
    if (v26)
    {
      SNPrintF();
      dispatch_queue_t v27 = dispatch_queue_create(label, 0);
      *(void *)(DerivedStorage + 8) = v27;
      if (v27)
      {
        SNPrintF();
        dispatch_queue_t v28 = dispatch_queue_create(label, 0);
        *(void *)(DerivedStorage + 16) = v28;
        if (v28)
        {
          SNPrintF();
          dispatch_queue_t v29 = dispatch_queue_create(label, 0);
          *(void *)uint64_t DerivedStorage = v29;
          if (v29)
          {
            if (a5)
            {
              *(unsigned char *)(DerivedStorage + 48) = CFDictionaryGetInt64() != 0;
              *(unsigned char *)(DerivedStorage + 49) = CFDictionaryGetInt64() != 0;
              int BooleanIfPresent = APSCFDictionaryGetBooleanIfPresent();
              char v31 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
              if (BooleanIfPresent)
              {
                CFTypeRef v32 = (CFTypeRef)*MEMORY[0x1E4F1CFC8];
                if (*MEMORY[0x1E4F1CFC8]) {
                  CFTypeRef v32 = CFRetain(v32);
                }
                *(void *)(DerivedStorage + 56) = v32;
              }
              if (APSCFDictionaryGetBooleanIfPresent())
              {
                CFTypeRef v33 = *v31;
                if (*v31) {
                  CFTypeRef v33 = CFRetain(v33);
                }
                *(void *)(DerivedStorage + 96) = v33;
              }
              if (APSCFDictionaryGetBooleanIfPresent())
              {
                CFTypeRef v34 = *v31;
                if (*v31) {
                  CFTypeRef v34 = CFRetain(v34);
                }
                *(void *)(DerivedStorage + 64) = v34;
              }
            }
            if (a3) {
              CFTypeRef v35 = CFRetain(a3);
            }
            else {
              CFTypeRef v35 = 0;
            }
            *(void *)(DerivedStorage + 24) = v35;
            *(unsigned char *)(DerivedStorage + 50) = 1;
            *(void *)(DerivedStorage + 72) = (int)APSSettingsGetIntWithOverrideAndDefault();
            *(void *)(DerivedStorage + 80) = (int)APSSettingsGetIntWithOverrideAndDefault();
            *(void *)(DerivedStorage + 88) = (int)APSSettingsGetIntWithOverrideAndDefault();
            if (!FigCFDictionaryGetBooleanIfPresent()) {
              *(unsigned char *)(DerivedStorage + 51) = APSSettingsIsFeatureEnabled();
            }
            if (FigCFDictionaryGetIntIfPresent())
            {
              int v36 = 0;
            }
            else if (IsAppleTV())
            {
              int v36 = 4;
            }
            else
            {
              if (!APSIsAPMSpeaker())
              {
                *(_DWORD *)(DerivedStorage + 104) = 0;
LABEL_48:
                endpoint_initializeVolumeDelegateStorage();
                CMNotificationCenterGetDefaultLocalCenter();
                FigNotificationCenterAddWeakListener();
                MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 120));
                uint64_t v23 = endpoint_refreshFromEndpointDescription(cf, 0, 0);
                MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 120));
                if (!v23)
                {
                  char v37 = *(unsigned char *)(DerivedStorage + 48);
                  if (v37) {
                    char v37 = APSGetFBOPropertyInt64() != 0;
                  }
                  *(unsigned char *)(DerivedStorage + 490) = v37;
                  if (a5)
                  {
                    Boolean Value = CFDictionaryGetValue(a5, @"EventRecorder");
                    *(void *)(DerivedStorage + 112) = Value;
                    if (Value) {
                      CFRetain(Value);
                    }
                  }
                  if (gLogCategory_APEndpoint <= 50
                    && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
                  {
                    CFGetHardwareAddress();
                    LogPrintF();
                  }
                  uint64_t v23 = 0;
                  *a6 = cf;
                  CFTypeRef cf = 0;
                  goto LABEL_59;
                }
                goto LABEL_12;
              }
              int v36 = 7;
            }
            *(_DWORD *)(DerivedStorage + 104) = v36;
            goto LABEL_48;
          }
        }
      }
    }
  }
  APSLogErrorAt();
  uint64_t v23 = 4294950575;
LABEL_13:
  if (cf) {
    CFRelease(cf);
  }
LABEL_59:
  if (v41) {
    CFRelease(v41);
  }
  if (v40) {
    CFRelease(v40);
  }
  return v23;
}

uint64_t endpoint_initializeVolumeDelegateStorage()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpoint <= 30 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  APSVolumeConvertDBToSliderValue();
  *(_DWORD *)(DerivedStorage + 516) = v1;
  uint64_t result = APSVolumeConvertDBToSliderValue();
  *(_DWORD *)(DerivedStorage + 524) = v3;
  *(_DWORD *)(DerivedStorage + 528) = -998653952;
  *(_DWORD *)(DerivedStorage + 536) = 0;
  *(_WORD *)(DerivedStorage + 520) = 0;
  *(unsigned char *)(DerivedStorage + 532) = 0;
  return result;
}

void endpoint_handleEndpointDescriptionChanged(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  if (!*(unsigned char *)(DerivedStorage + 128))
  {
    uint64_t v8 = DerivedStorage;
    MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 120));
    endpoint_refreshFromEndpointDescription(a2, a5, (__CFDictionary **)&cf);
    MEMORY[0x1D25EB390](*(void *)(v8 + 120));
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    if (cf) {
      CFRelease(cf);
    }
  }
}

uint64_t endpoint_refreshFromEndpointDescription(const void *a1, uint64_t a2, __CFDictionary **a3)
{
  unsigned int v48 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  CFStringRef theString = 0;
  CFTypeRef v45 = 0;
  if (*(unsigned char *)(DerivedStorage + 128)) {
    goto LABEL_94;
  }
  uint64_t v7 = DerivedStorage;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    APSLogErrorAt();
    unsigned int v48 = -16721;
    goto LABEL_55;
  }
  uint64_t v9 = *(void *)(v7 + 40);
  CFAllocatorRef v10 = CFGetAllocator(a1);
  uint64_t CMBaseObject = APEndpointDescriptionGetCMBaseObject(v9);
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  CFTypeRef v14 = *(uint64_t (**)(uint64_t, __CFString *, CFAllocatorRef, CFStringRef *))(v13 + 48);
  if (v14)
  {
    int v15 = v14(CMBaseObject, @"PairingPeerCUSystemIdentifier", v10, &theString);
    if (theString)
    {
      if (CFStringHasPrefix(theString, @"00000000-0000-0000-0000") && theString)
      {
        CFRelease(theString);
        CFStringRef theString = 0;
      }
      else if (!v15 && theString)
      {
LABEL_23:
        if (!FigCFEqual())
        {
          if (gLogCategory_APEndpoint <= 50
            && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          uint64_t v22 = *(const void **)(v7 + 456);
          CFStringRef v23 = theString;
          *(void *)(v7 + 456) = theString;
          if (v23) {
            CFRetain(v23);
          }
          if (v22) {
            CFRelease(v22);
          }
          CFDictionarySetValue(Mutable, @"IDDidChange", (const void *)*MEMORY[0x1E4F1CFD0]);
        }
        goto LABEL_33;
      }
    }
  }
  else
  {
    unsigned int v48 = -12782;
  }
  uint64_t v16 = *(void *)(v7 + 40);
  CFAllocatorRef v17 = CFGetAllocator(a1);
  uint64_t v18 = APEndpointDescriptionGetCMBaseObject(v16);
  uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v19) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 0;
  }
  uint64_t v21 = *(uint64_t (**)(uint64_t, __CFString *, CFAllocatorRef, CFStringRef *))(v20 + 48);
  if (!v21)
  {
    unsigned int v48 = -12782;
    goto LABEL_54;
  }
  unsigned int v48 = v21(v18, @"DeviceID", v17, &theString);
  if (v48)
  {
LABEL_54:
    APSLogErrorAt();
    goto LABEL_55;
  }
  if (theString) {
    goto LABEL_23;
  }
LABEL_33:
  uint64_t v24 = *(void *)(v7 + 40);
  CFAllocatorRef v25 = CFGetAllocator(a1);
  uint64_t v26 = APEndpointDescriptionGetCMBaseObject(v24);
  uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v27) {
    uint64_t v28 = v27;
  }
  else {
    uint64_t v28 = 0;
  }
  dispatch_queue_t v29 = *(uint64_t (**)(uint64_t, __CFString *, CFAllocatorRef, CFTypeRef *))(v28 + 48);
  if (!v29)
  {
    unsigned int v48 = -12782;
    goto LABEL_54;
  }
  unsigned int v48 = v29(v26, @"MACAddress", v25, &cf);
  if (v48) {
    goto LABEL_54;
  }
  CFDictionaryRef v30 = *(const void **)(v7 + 464);
  CFTypeRef v31 = cf;
  *(void *)(v7 + 464) = cf;
  if (v31) {
    CFRetain(v31);
  }
  if (v30) {
    CFRelease(v30);
  }
  uint64_t v32 = *(void *)(v7 + 40);
  CFAllocatorRef v33 = CFGetAllocator(a1);
  uint64_t v34 = APEndpointDescriptionGetCMBaseObject(v32);
  uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v35) {
    uint64_t v36 = v35;
  }
  else {
    uint64_t v36 = 0;
  }
  char v37 = *(uint64_t (**)(uint64_t, __CFString *, CFAllocatorRef, CFTypeRef *))(v36 + 48);
  if (!v37)
  {
    unsigned int v48 = -12782;
    goto LABEL_54;
  }
  unsigned int v48 = v37(v34, @"Name", v33, &v45);
  if (v48) {
    goto LABEL_54;
  }
  if (!FigCFEqual())
  {
    if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    CFTypeRef v39 = *(const void **)(v7 + 448);
    CFTypeRef v40 = v45;
    *(void *)(v7 + 448) = v45;
    if (v40) {
      CFRetain(v40);
    }
    if (v39) {
      CFRelease(v39);
    }
    CFDictionarySetValue(Mutable, @"NameDidChange", (const void *)*MEMORY[0x1E4F1CFD0]);
  }
  if (a2)
  {
    if (CFDictionaryGetInt64())
    {
      CFDictionarySetValue(Mutable, @"ClusterInfoDidChange", (const void *)*MEMORY[0x1E4F1CFD0]);
      if (!*(unsigned char *)(v7 + 48) && *(_DWORD *)(v7 + 152) == 2) {
        endpoint_updateStatus(a1, -72277, 1);
      }
    }
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
  }
  int v41 = APSGetFBOPropertyInt64();
  if (v48) {
    goto LABEL_54;
  }
  uint64_t v42 = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(v42 + 500) != v41)
  {
    uint64_t v43 = v42;
    if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    *(_DWORD *)(v43 + 500) = v41;
    endpoint_updateCurrentVolumeControlType();
  }
  unsigned int v48 = 0;
  int v44 = APSGetFBOPropertyInt64();
  if (v48) {
    goto LABEL_54;
  }
  *(_DWORD *)(v7 + 508) = v44;
  if (gLogCategory_APEndpoint <= 30)
  {
    if (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize())
    {
      APSGetAPMuteControlTypeName();
      LogPrintF();
    }
    if (gLogCategory_APEndpoint <= 30 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
  }
  if (a3)
  {
    *a3 = Mutable;
LABEL_94:
    CFMutableDictionaryRef Mutable = 0;
  }
LABEL_55:
  if (theString) {
    CFRelease(theString);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v45) {
    CFRelease(v45);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v48;
}

uint64_t APEndpointCreateWithTransportDevice(uint64_t a1, const void *a2, const void *a3, uint64_t a4, const __CFDictionary *a5, CFTypeRef *a6)
{
  CFTypeRef cf = 0;
  if (!a2)
  {
    APSLogErrorAt();
    return 4294950576;
  }
  uint64_t v11 = APEndpointDescriptionAirPlayCreateWithTransportDevice(a1, a2, 0, &cf);
  if (v11)
  {
    uint64_t v12 = v11;
  }
  else
  {
    uint64_t v12 = APEndpointCreateWithEndpointDescription(a1, cf, a3, a4, a5, a6);
    if (!v12) {
      goto LABEL_4;
    }
  }
  APSLogErrorAt();
LABEL_4:
  if (cf) {
    CFRelease(cf);
  }
  return v12;
}

uint64_t APEndpointUpdateWithTransportDevice(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v4 = DerivedStorage;
    MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 120));
    dispatch_queue_t v5 = (void *)CMBaseObjectGetDerivedStorage();
    if (gLogCategory_APEndpoint <= 30)
    {
      if (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()) {
        LogPrintF();
      }
      if (gLogCategory_APEndpoint <= 10 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
    }
    uint64_t v6 = v5[28];
    if (v6
      && ((uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0 ? (v8 = 0) : (v8 = v7),
          (uint64_t v9 = *(unsigned int (**)(uint64_t))(v8 + 8)) != 0 && v9(v6) && APSGetFBOPropertyInt64()))
    {
      CFAllocatorRef v10 = (const void *)v5[34];
      v5[34] = a2;
      CFRetain(a2);
      if (v10) {
        CFRelease(v10);
      }
      if (gLogCategory_APEndpoint <= 40 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
    }
    else
    {
      uint64_t v11 = v5[5];
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v12) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      CFTypeRef v14 = *(unsigned int (**)(uint64_t, const void *))(v13 + 24);
      if (!v14 || v14(v11, a2))
      {
        APSLogErrorAt();
      }
      else if (gLogCategory_APEndpoint <= 30 {
             && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
      }
      {
        LogPrintF();
      }
    }
    MEMORY[0x1D25EB390](*(void *)(v4 + 120));
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294950576;
  }
}

uint64_t APEndpointRecordEvent(uint64_t result)
{
  if (result)
  {
    CMBaseObjectGetDerivedStorage();
    return APSEventRecorderRecordEventWithFlags();
  }
  return result;
}

uint64_t endpoint_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  if (introspector_getCollectionOfActiveEndpoints_once != -1) {
    dispatch_once(&introspector_getCollectionOfActiveEndpoints_once, &__block_literal_global_37);
  }
  if (introspector_getCollectionOfActiveEndpoints_coll)
  {
    int v3 = *(NSObject **)introspector_getCollectionOfActiveEndpoints_coll;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __endpoint_Finalize_block_invoke;
    block[3] = &__block_descriptor_tmp_38;
    void block[4] = introspector_getCollectionOfActiveEndpoints_coll;
    void block[5] = a1;
    dispatch_sync(v3, block);
  }
  if (*(void *)DerivedStorage)
  {
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  if (*(void *)(DerivedStorage + 224))
  {
    uint64_t result = gLogCategory_APEndpoint;
    if (gLogCategory_APEndpoint <= 100) {
      uint64_t result = endpoint_Finalize_cold_1(gLogCategory_APEndpoint);
    }
    __break(1u);
  }
  else
  {
    MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 120));
    endpoint_resetActivationState(DerivedStorage + 136);
    endpoint_clearEndpointState();
    uint64_t v4 = *(const void **)(DerivedStorage + 448);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(DerivedStorage + 448) = 0;
    }
    dispatch_queue_t v5 = *(const void **)(DerivedStorage + 456);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(DerivedStorage + 456) = 0;
    }
    MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 120));
    uint64_t v6 = *(const void **)(DerivedStorage + 112);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(DerivedStorage + 112) = 0;
    }
    uint64_t v7 = *(const void **)(DerivedStorage + 288);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(DerivedStorage + 288) = 0;
    }
    uint64_t v8 = *(const void **)(DerivedStorage + 424);
    if (v8)
    {
      CFRelease(v8);
      *(void *)(DerivedStorage + 424) = 0;
    }
    uint64_t v9 = *(const void **)(DerivedStorage + 432);
    if (v9)
    {
      CFRelease(v9);
      *(void *)(DerivedStorage + 432) = 0;
    }
    CFAllocatorRef v10 = *(const void **)(DerivedStorage + 440);
    if (v10)
    {
      CFRelease(v10);
      *(void *)(DerivedStorage + 440) = 0;
    }
    uint64_t v11 = *(const void **)(DerivedStorage + 40);
    if (v11)
    {
      CFRelease(v11);
      *(void *)(DerivedStorage + 40) = 0;
    }
    uint64_t v12 = *(const void **)(DerivedStorage + 544);
    if (v12)
    {
      CFRelease(v12);
      *(void *)(DerivedStorage + 544) = 0;
    }
    uint64_t v13 = *(const void **)(DerivedStorage + 24);
    if (v13)
    {
      CFRelease(v13);
      *(void *)(DerivedStorage + 24) = 0;
    }
    CFTypeRef v14 = *(const void **)(DerivedStorage + 56);
    if (v14)
    {
      CFRelease(v14);
      *(void *)(DerivedStorage + 56) = 0;
    }
    int v15 = *(const void **)(DerivedStorage + 96);
    if (v15)
    {
      CFRelease(v15);
      *(void *)(DerivedStorage + 96) = 0;
    }
    uint64_t v16 = *(const void **)(DerivedStorage + 64);
    if (v16)
    {
      CFRelease(v16);
      *(void *)(DerivedStorage + 64) = 0;
    }
    CFAllocatorRef v17 = *(const void **)(DerivedStorage + 312);
    if (v17)
    {
      CFRelease(v17);
      *(void *)(DerivedStorage + 312) = 0;
    }
    uint64_t v18 = *(const void **)(DerivedStorage + 336);
    if (v18)
    {
      CFRelease(v18);
      *(void *)(DerivedStorage + 336) = 0;
    }
    uint64_t v19 = *(NSObject **)(DerivedStorage + 16);
    if (v19)
    {
      dispatch_release(v19);
      *(void *)(DerivedStorage + 16) = 0;
    }
    uint64_t v20 = *(NSObject **)(DerivedStorage + 8);
    if (v20)
    {
      dispatch_release(v20);
      *(void *)(DerivedStorage + 8) = 0;
    }
    uint64_t v21 = *(NSObject **)(DerivedStorage + 576);
    if (v21)
    {
      dispatch_release(v21);
      *(void *)(DerivedStorage + 576) = 0;
    }
    uint64_t v22 = *(NSObject **)(DerivedStorage + 608);
    if (v22)
    {
      dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 608));
      dispatch_release(v22);
      *(void *)(DerivedStorage + 608) = 0;
    }
    return FigSimpleMutexDestroy();
  }
  return result;
}

__CFString *endpoint_CopyDebugDescription(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFTypeRef cf = 0;
  CFStringAppendFormat(Mutable, 0, @"<APEndpoint %p>", a1);
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v6 + 48);
  if (v7)
  {
    int v8 = v7(CMBaseObject, @"EndpointShowInfo", v2, &cf);
    CFTypeRef v9 = cf;
    if (!v8)
    {
      ASPrintF();
      size_t v10 = strlen(0);
      if (v10 && *(unsigned char *)(v10 - 1) == 10) {
        *(unsigned char *)(v10 - 1) = 0;
      }
      CFStringAppendFormat(Mutable, 0, @"%s", 0);
      free(0);
      CFTypeRef v9 = cf;
    }
    if (v9) {
      CFRelease(v9);
    }
  }
  return Mutable;
}

uint64_t endpoint_CopyProperty(const void *a1, const void *a2, const __CFAllocator *a3, CFMutableArrayRef *a4)
{
  unsigned int v11 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpoint <= 10 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  if (!a4)
  {
    APSLogErrorAt();
    return 4294950576;
  }
  if (!endpoint_copyStaticProperty((uint64_t)a1, a2, a4, (int *)&v11)
    && !endpoint_copyPropertyFromEndpointDescription(a1, a2, a3, (CFStringRef *)a4, (int *)&v11))
  {
    MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 120));
    unsigned int v11 = endpoint_copyPropertyInternal(a1, a2, a3, a4);
    MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 120));
  }
  uint64_t result = v11;
  if ((int)v11 > -6728)
  {
    if (v11 == -6727 || !v11) {
      return result;
    }
  }
  else if (v11 == -16723 || v11 == -12784)
  {
    return result;
  }
  if (gLogCategory_APEndpoint <= 60)
  {
    if (gLogCategory_APEndpoint != -1 || (v10 = _LogCategory_Initialize(), uint64_t result = v11, v10))
    {
      LogPrintF();
      return v11;
    }
  }
  return result;
}

uint64_t endpoint_SetProperty(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpoint <= 30 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  if (!a2)
  {
    APSLogErrorAt();
    return 4294950576;
  }
  MEMORY[0x1D25EB370](*(void *)(DerivedStorage + 120));
  uint64_t v7 = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(v7 + 128))
  {
    uint64_t v12 = 4294950573;
    goto LABEL_50;
  }
  uint64_t v8 = v7;
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21098]))
  {
    CFGetDouble();
    APSVolumeConvertDBToSliderValue();
LABEL_11:
    uint64_t IsMuted = endpointdelegate_setVolumeSliderInternal(a1, 1, 1, v9);
    goto LABEL_12;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21080]))
  {
    CFGetDouble();
    float v9 = v10;
    goto LABEL_11;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20E98]))
  {
    if (a3)
    {
      CFTypeID v14 = CFGetTypeID(a3);
      if (v14 == CFBooleanGetTypeID())
      {
        if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize())) {
          LogPrintF();
        }
        BOOL v19 = *MEMORY[0x1E4F1CFD0] == (void)a3;
        if (*(unsigned char *)(v8 + 51) || (CMBaseObjectGetDerivedStorage(), APSGetFBOPropertyInt64()))
        {
          uint64_t v20 = a1;
          int v21 = v19;
          int v22 = 1;
LABEL_42:
          uint64_t IsMuted = endpointdelegate_setIsMuted(v20, v21, v22);
          goto LABEL_12;
        }
        if (gLogCategory_APEndpoint > 50 || gLogCategory_APEndpoint == -1 && !_LogCategory_Initialize())
        {
LABEL_47:
          MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 120));
          return 0;
        }
LABEL_37:
        LogPrintF();
        goto LABEL_47;
      }
    }
    uint64_t v12 = 4294950576;
    goto LABEL_50;
  }
  if (CFEqual(a2, @"IsHALMuted"))
  {
    BOOL v15 = *MEMORY[0x1E4F1CFD0] == (void)a3;
    int IsHALMuteForUser = APEndpointIsHALMuteForUser();
    if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t v20 = a1;
    int v21 = v15;
    int v22 = IsHALMuteForUser;
    goto LABEL_42;
  }
  CFAllocatorRef v17 = (const void *)*MEMORY[0x1E4F20EA0];
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20EA0]) || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20EA8]))
  {
    if (a3)
    {
      CFTypeID v18 = CFGetTypeID(a3);
      if (v18 == CFBooleanGetTypeID())
      {
        if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize())) {
          LogPrintF();
        }
        BOOL v23 = *MEMORY[0x1E4F1CFD0] == (void)a3;
        int v22 = CFEqual(a2, v17);
        uint64_t v20 = a1;
        int v21 = v23;
        goto LABEL_42;
      }
    }
    uint64_t v12 = 4294950576;
    goto LABEL_50;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20F58]) || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20F50]))
  {
    uint64_t IsMuted = endpoint_setAuthorizationString((uint64_t)a1, a3);
    goto LABEL_12;
  }
  if (!CFEqual(a2, @"PermanentSpeakerGroupingInfo"))
  {
    if (CFEqual(a2, @"ScreenUsageMode"))
    {
      uint64_t v24 = *(const void **)(v8 + 480);
      *(void *)(v8 + 480) = a3;
      if (a3) {
        CFRetain(a3);
      }
      if (v24) {
        CFRelease(v24);
      }
      goto LABEL_47;
    }
    if (CFEqual(a2, @"StartSilentAudio"))
    {
      if (a3)
      {
        CFTypeID v25 = CFGetTypeID(a3);
        if (v25 == CFBooleanGetTypeID())
        {
          *(unsigned char *)(v8 + 489) = CFBooleanGetValue((CFBooleanRef)a3);
          goto LABEL_47;
        }
      }
      uint64_t v12 = 4294950576;
    }
    else
    {
      if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20D10]))
      {
        if (CFEqual(a2, @"EndpointStatus"))
        {
          *(_DWORD *)(v8 + 156) = CFGetInt64();
          if (gLogCategory_APEndpoint > 50 || gLogCategory_APEndpoint == -1 && !_LogCategory_Initialize()) {
            goto LABEL_47;
          }
          goto LABEL_37;
        }
        uint64_t v12 = 4294954512;
LABEL_51:
        MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 120));
        goto LABEL_52;
      }
      if (a3)
      {
        CFTypeID v26 = CFGetTypeID(a3);
        if (v26 == CFBooleanGetTypeID())
        {
          *(unsigned char *)(v8 + 488) = CFBooleanGetValue((CFBooleanRef)a3);
          goto LABEL_47;
        }
      }
      uint64_t v12 = 4294950576;
    }
LABEL_50:
    APSLogErrorAt();
    goto LABEL_51;
  }
  uint64_t IsMuted = APEndpointDescriptionSetProperty(*(void *)(v8 + 40), @"PermanentSpeakerGroupingInfo", (uint64_t)a3);
LABEL_12:
  uint64_t v12 = IsMuted;
  MEMORY[0x1D25EB390](*(void *)(DerivedStorage + 120));
  if (v12) {
LABEL_52:
  }
    APSLogErrorAt();
  return v12;
}

void endpoint_resetActivationState(uint64_t a1)
{
  endpoint_partiallyResetActivationState(a1);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 113) = 0;
  *(_DWORD *)(a1 + 116) = 0;
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 32) = 0;
  }
  int v3 = *(const void **)(a1 + 72);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 72) = 0;
  }
  uint64_t v4 = *(const void **)(a1 + 80);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 80) = 0;
  }
  uint64_t v5 = *(const void **)(a1 + 88);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 88) = 0;
  }
  uint64_t v6 = *(const void **)(a1 + 48);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 48) = 0;
  }
  uint64_t v7 = *(const void **)(a1 + 56);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(a1 + 56) = 0;
  }
  *(_DWORD *)(a1 + 128) = 0;
  uint64_t v8 = *(NSObject **)(a1 + 120);
  if (v8)
  {
    dispatch_semaphore_signal(v8);
    float v9 = *(NSObject **)(a1 + 120);
    if (v9)
    {
      dispatch_release(v9);
      *(void *)(a1 + 120) = 0;
    }
  }
  double v10 = *(const void **)(a1 + 152);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(a1 + 152) = 0;
  }
  unsigned int v11 = *(const void **)(a1 + 160);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(a1 + 160) = 0;
  }
  uint64_t v12 = *(const void **)(a1 + 168);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(a1 + 168) = 0;
  }
  uint64_t v13 = *(const void **)(a1 + 192);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(a1 + 192) = 0;
  }
  CFTypeID v14 = *(__CFSet **)(a1 + 176);
  if (v14) {
    CFSetRemoveAllValues(v14);
  }
  FigCFDictionaryRemoveAllValues();
  BOOL v15 = *(const void **)(a1 + 208);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(a1 + 208) = 0;
  }
}

void endpoint_clearEndpointState()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  int v1 = (const void *)DerivedStorage[60];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[60] = 0;
  }
  uint64_t v2 = (const void *)DerivedStorage[59];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[59] = 0;
  }
  int v3 = (const void *)DerivedStorage[58];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[58] = 0;
  }
}

uint64_t __introspector_getCollectionOfActiveEndpoints_block_invoke()
{
  uint64_t result = IsAppleInternalBuild();
  if (result)
  {
    introspector_getCollectionOfActiveEndpoints_coll = (uint64_t)malloc_type_calloc(1uLL, 0x18uLL, 0x70040EA3A3B56uLL);
    *(void *)introspector_getCollectionOfActiveEndpoints_coll = dispatch_queue_create("CollectionOfActiveEndpoints", 0);
    CFMutableSetRef Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
    uint64_t v2 = introspector_getCollectionOfActiveEndpoints_coll;
    *(void *)(introspector_getCollectionOfActiveEndpoints_coll + 8) = Mutable;
    *(void *)(v2 + 16) = "ActiveEndpoints";
    return APSIntrospectorAddCommand();
  }
  return result;
}

void endpoint_partiallyResetActivationState(uint64_t a1)
{
  *(unsigned char *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  *(_WORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 132) = 0;
  uint64_t v2 = *(const void **)(a1 + 24);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 24) = 0;
  }
  int v3 = *(const void **)(a1 + 64);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 64) = 0;
  }
  uint64_t v4 = *(const void **)(a1 + 104);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 104) = 0;
  }
  uint64_t v5 = *(const void **)(a1 + 96);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 96) = 0;
  }
  uint64_t v6 = *(const void **)(a1 + 136);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 136) = 0;
  }
}

uint64_t endpoint_copyStaticProperty(uint64_t a1, const void *a2, void *a3, int *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3)
  {
    APSLogErrorAt();
    int v12 = -16720;
    if (!a4) {
      return 1;
    }
    goto LABEL_11;
  }
  uint64_t v8 = DerivedStorage;
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21048]))
  {
    float v9 = (CFTypeRef *)MEMORY[0x1E4F21548];
    goto LABEL_10;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20EB8]))
  {
    float v9 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    int v10 = *(unsigned __int8 *)(v8 + 48);
    goto LABEL_8;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20E88]))
  {
    float v9 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    int v10 = *(unsigned __int8 *)(v8 + 49);
LABEL_8:
    if (!v10) {
      float v9 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
    }
LABEL_10:
    CFTypeRef v11 = CFRetain(*v9);
    int v12 = 0;
    *a3 = v11;
    if (!a4) {
      return 1;
    }
LABEL_11:
    *a4 = v12;
    return 1;
  }
  uint64_t result = CFEqual(a2, @"IsClusterEndpoint");
  if (result)
  {
    float v9 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
    goto LABEL_10;
  }
  return result;
}

uint64_t endpoint_copyPropertyFromEndpointDescription(const void *a1, const void *a2, const __CFAllocator *a3, CFStringRef *a4, int *a5)
{
  int SupportedFeatures = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20FB8]))
  {
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20FE0]))
    {
      uint64_t CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(void *)(DerivedStorage + 40));
      uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v14) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v16 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFStringRef *))(v15 + 48);
      if (v16)
      {
        CFAllocatorRef v17 = kAPEndpointDescriptionProperty_SupportsExtendedWHA;
        goto LABEL_27;
      }
LABEL_28:
      int IsGroupable = -12782;
      goto LABEL_29;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21008]))
    {
      uint64_t CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(void *)(DerivedStorage + 40));
      uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v18) {
        uint64_t v19 = v18;
      }
      else {
        uint64_t v19 = 0;
      }
      uint64_t v16 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFStringRef *))(v19 + 48);
      if (v16)
      {
        CFAllocatorRef v17 = kAPEndpointDescriptionProperty_DeviceSupportsRelay;
        goto LABEL_27;
      }
      goto LABEL_28;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20F18]))
    {
      uint64_t CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(void *)(DerivedStorage + 40));
      uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v20) {
        uint64_t v21 = v20;
      }
      else {
        uint64_t v21 = 0;
      }
      uint64_t v16 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFStringRef *))(v21 + 48);
      if (v16)
      {
        CFAllocatorRef v17 = kAPEndpointDescriptionProperty_Model;
        goto LABEL_27;
      }
      goto LABEL_28;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20EF8]))
    {
      uint64_t v22 = *(void *)(DerivedStorage + 40);
      BOOL v23 = kAPEndpointDescriptionProperty_Manufacturer;
LABEL_38:
      int IsGroupable = APEndpointDescriptionCopyProperty(v22, (uint64_t)*v23, (uint64_t)a3, (uint64_t)a4);
      goto LABEL_29;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20DF0]))
    {
      uint64_t v22 = *(void *)(DerivedStorage + 40);
      BOOL v23 = kAPEndpointDescriptionProperty_FirmwareVersion;
      goto LABEL_38;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20F88]))
    {
      uint64_t v22 = *(void *)(DerivedStorage + 40);
      BOOL v23 = kAPEndpointDescriptionProperty_SerialNumber;
      goto LABEL_38;
    }
    if (CFEqual(a2, @"EndpointDescription"))
    {
      CFStringRef v26 = *(const __CFString **)(DerivedStorage + 40);
      if (!v26)
      {
LABEL_42:
        *a4 = v26;
        goto LABEL_30;
      }
LABEL_41:
      CFStringRef v26 = (const __CFString *)CFRetain(v26);
      goto LABEL_42;
    }
    if (CFEqual(a2, @"StatusFlags")) {
      goto LABEL_44;
    }
    if (CFEqual(a2, @"SourceVersion"))
    {
      uint64_t v22 = *(void *)(DerivedStorage + 40);
      BOOL v23 = kAPEndpointDescriptionProperty_SourceVersion;
      goto LABEL_38;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20CB0]))
    {
      uint64_t v22 = *(void *)(DerivedStorage + 40);
      BOOL v23 = kAPEndpointDescriptionProperty_AirPlaySecurity;
      goto LABEL_38;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20E80]))
    {
      uint64_t v22 = *(void *)(DerivedStorage + 40);
      BOOL v23 = kAPEndpointDescriptionProperty_IsHKAccessControlEnabled;
      goto LABEL_38;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20E18]))
    {
      uint64_t v22 = *(void *)(DerivedStorage + 40);
      BOOL v23 = kAPEndpointDescriptionProperty_HKAccessControlLevel;
      goto LABEL_38;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21040]))
    {
      if (APSGetFBOPropertyInt64()) {
        uint64_t v27 = (const void **)MEMORY[0x1E4F21538];
      }
      else {
        uint64_t v27 = (const void **)MEMORY[0x1E4F21540];
      }
      CFStringRef v26 = (const __CFString *)*v27;
      if (!*v27) {
        goto LABEL_42;
      }
      goto LABEL_41;
    }
    if (CFEqual(a2, @"Features"))
    {
      int IsGroupable = APEndpointDescriptionCopyFeatures(*(void *)(DerivedStorage + 40), (uint64_t)a4);
      goto LABEL_29;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21038]))
    {
      uint64_t v22 = *(void *)(DerivedStorage + 40);
      BOOL v23 = kAPEndpointDescriptionProperty_TightSyncUUID;
      goto LABEL_38;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21028]))
    {
      uint64_t v22 = *(void *)(DerivedStorage + 40);
      BOOL v23 = kAPEndpointDescriptionProperty_TightSyncIsGroupLeader;
      goto LABEL_38;
    }
    if (CFEqual(a2, @"TightSyncClusterInfo"))
    {
      uint64_t v22 = *(void *)(DerivedStorage + 40);
      BOOL v23 = kAPEndpointDescriptionProperty_TightSyncClusterInfo;
      goto LABEL_38;
    }
    if (CFEqual(a2, @"GroupPublicName"))
    {
      uint64_t v22 = *(void *)(DerivedStorage + 40);
      BOOL v23 = kAPEndpointDescriptionProperty_GroupPublicName;
      goto LABEL_38;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20E48]))
    {
      uint64_t v22 = *(void *)(DerivedStorage + 40);
      BOOL v23 = kAPEndpointDescriptionProperty_IsAppleMusicSubscriber;
      goto LABEL_38;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20D50]))
    {
      uint64_t v22 = *(void *)(DerivedStorage + 40);
      BOOL v23 = kAPEndpointDescriptionProperty_CloudLibraryIsOn;
      goto LABEL_38;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21030]))
    {
      int IsGroupable = endpoint_copyAirPlayDiagnosticsDNSName((uint64_t)a1, a3, 0, a4);
      goto LABEL_29;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20E08]))
    {
      uint64_t v22 = *(void *)(DerivedStorage + 40);
      BOOL v23 = kAPEndpointDescriptionProperty_GroupID;
      goto LABEL_38;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20E00]))
    {
      uint64_t v22 = *(void *)(DerivedStorage + 40);
      BOOL v23 = kAPEndpointDescriptionProperty_GroupContainsDiscoverableLeader;
      goto LABEL_38;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20E70]))
    {
      uint64_t v22 = *(void *)(DerivedStorage + 40);
      BOOL v23 = kAPEndpointDescriptionProperty_IsGroupLeader;
      goto LABEL_38;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20D78]))
    {
      uint64_t v22 = *(void *)(DerivedStorage + 40);
      BOOL v23 = kAPEndpointDescriptionProperty_ClusterSize;
      goto LABEL_38;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20D80]))
    {
      int v28 = APSGetFBOPropertyInt64();
      CFStringRef v26 = (const __CFString *)APEndpointAPSClusterTypeToFigEndpointClusterType(v28);
      if (!v26) {
        goto LABEL_42;
      }
      goto LABEL_41;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20F60]))
    {
      uint64_t v22 = *(void *)(DerivedStorage + 40);
      BOOL v23 = kAPEndpointDescriptionProperty_ClusterUUID;
      goto LABEL_38;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20E58]))
    {
      uint64_t v22 = *(void *)(DerivedStorage + 40);
      BOOL v23 = kAPEndpointDescriptionProperty_IsClusterLeader;
      goto LABEL_38;
    }
    if (CFEqual(a2, @"ClusterModel"))
    {
      uint64_t v22 = *(void *)(DerivedStorage + 40);
      BOOL v23 = kAPEndpointDescriptionProperty_ClusterModel;
      goto LABEL_38;
    }
    if (CFEqual(a2, @"RoomUUID"))
    {
      uint64_t v22 = *(void *)(DerivedStorage + 40);
      BOOL v23 = kAPEndpointDescriptionProperty_RoomUUID;
      goto LABEL_38;
    }
    if (CFEqual(a2, @"RoomName"))
    {
      uint64_t v22 = *(void *)(DerivedStorage + 40);
      BOOL v23 = kAPEndpointDescriptionProperty_RoomName;
      goto LABEL_38;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20EC8]))
    {
      int IsGroupable = endpoint_copyIsGroupable((uint64_t)a1, (CFTypeRef *)a4);
      goto LABEL_29;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20CB8]))
    {
      uint64_t v22 = *(void *)(DerivedStorage + 40);
      BOOL v23 = kAPEndpointDescriptionProperty_SupportsAirPlayVideoPlayQueue;
      goto LABEL_38;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20CC8]))
    {
      uint64_t v22 = *(void *)(DerivedStorage + 40);
      BOOL v23 = kAPEndpointDescriptionProperty_SupportsAirPlayVideoV2;
      goto LABEL_38;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21018]))
    {
LABEL_44:
      uint64_t v22 = *(void *)(DerivedStorage + 40);
      BOOL v23 = kAPEndpointDescriptionProperty_StatusFlags;
      goto LABEL_38;
    }
    if (CFEqual(a2, @"TransportDevice"))
    {
      uint64_t v22 = *(void *)(DerivedStorage + 40);
      BOOL v23 = kAPEndpointDescriptionProperty_TransportDevice;
      goto LABEL_38;
    }
    if (CFEqual(a2, @"ScreenSize"))
    {
      dispatch_queue_t v29 = kAPEndpointDisplayDescriptionProperty_PixelSize;
LABEL_109:
      int IsGroupable = endpoint_copyPropertyForFirstDisplay(a1, (uint64_t)*v29, (uint64_t)a4);
      goto LABEL_29;
    }
    if (CFEqual(a2, @"ScreenIsOverscanned"))
    {
      dispatch_queue_t v29 = kAPEndpointDisplayDescriptionProperty_IsOverscanned;
      goto LABEL_109;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20DF8]) || CFEqual(a2, @"IsScreenDemoReceiver"))
    {
      uint64_t v22 = *(void *)(DerivedStorage + 40);
      BOOL v23 = kAPEndpointDescriptionProperty_IsScreenDemoMode;
      goto LABEL_38;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20CD0]))
    {
      uint64_t v22 = *(void *)(DerivedStorage + 40);
      BOOL v23 = kAPEndpointDescriptionProperty_VodkaVersion;
      goto LABEL_38;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20CA8]))
    {
      uint64_t v22 = *(void *)(DerivedStorage + 40);
      BOOL v23 = kAPEndpointDescriptionProperty_SupportsAirPlayFromCloud;
      goto LABEL_38;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20DC8]))
    {
      uint64_t v22 = *(void *)(DerivedStorage + 40);
      BOOL v23 = kAPEndpointDescriptionProperty_DoesNotRequireVodkaForHLS;
      goto LABEL_38;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20F90]))
    {
      uint64_t v22 = *(void *)(DerivedStorage + 40);
      BOOL v23 = kAPEndpointDescriptionProperty_SilentPrimary;
      goto LABEL_38;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20C98]))
    {
      uint64_t v22 = *(void *)(DerivedStorage + 40);
      BOOL v23 = kAPEndpointDescriptionProperty_AdvertisesHAPSupport;
      goto LABEL_38;
    }
    if (CFEqual(a2, @"SupportsMuteControl"))
    {
      uint64_t v30 = APSGetFBOPropertyInt64();
      CFTypeRef v31 = (const void **)MEMORY[0x1E4F1CFC8];
      uint64_t v32 = (const void **)MEMORY[0x1E4F1CFD0];
    }
    else
    {
      if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20FF0]))
      {
        if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20DC0]))
        {
          uint64_t v22 = *(void *)(DerivedStorage + 40);
          BOOL v23 = kAPEndpointDescriptionProperty_ExternalPlaybackCapabilities;
          goto LABEL_38;
        }
        if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20FE8]))
        {
          char v39 = 0;
          endpoint_getBooleanFromExternalPlaybackCapabilitiesIfPresent();
          CFTypeRef v31 = (const void **)MEMORY[0x1E4F1CFC8];
LABEL_147:
          CFStringRef v26 = (const __CFString *)*v31;
          goto LABEL_41;
        }
        if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20CA0]))
        {
          uint64_t v34 = (uint64_t)a1;
          int v35 = 0;
        }
        else
        {
          if (!CFEqual(a2, @"AirPlayClusterCompatibleEndpointProperties"))
          {
            if (CFEqual(a2, @"EndpointInfo"))
            {
              uint64_t v22 = *(void *)(DerivedStorage + 40);
              BOOL v23 = kAPEndpointDescriptionProperty_EndpointInfo;
              goto LABEL_38;
            }
            if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20FC0]))
            {
              uint64_t v38 = 0;
              int SupportedFeatures = endpoint_getSupportedFeatures((uint64_t)a1, &v38);
              if (SupportedFeatures)
              {
                APSLogErrorAt();
              }
              else
              {
                CFNumberRef v36 = CFNumberCreate(a3, kCFNumberSInt64Type, &v38);
                *a4 = (CFStringRef)v36;
                if (!v36)
                {
                  APSLogErrorAt();
                  int SupportedFeatures = -16721;
                }
              }
              goto LABEL_30;
            }
            uint64_t result = CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20D88]);
            if (!result) {
              return result;
            }
            BOOL isThirdPartyTVFamily = endpoint_isThirdPartyTVFamily();
            CFTypeRef v31 = (const void **)MEMORY[0x1E4F1CFD0];
            uint64_t v32 = (const void **)MEMORY[0x1E4F1CFC8];
            BOOL v33 = !isThirdPartyTVFamily;
            goto LABEL_145;
          }
          uint64_t v34 = (uint64_t)a1;
          int v35 = 1;
        }
        int IsGroupable = endpoint_copyAirPlayEndpointProperties(v34, v35, (__CFDictionary **)a4);
        goto LABEL_29;
      }
      uint64_t v30 = APSGetFBOPropertyInt64();
      CFTypeRef v31 = (const void **)MEMORY[0x1E4F1CFD0];
      uint64_t v32 = (const void **)MEMORY[0x1E4F1CFC8];
    }
    BOOL v33 = v30 == 0;
LABEL_145:
    if (v33) {
      CFTypeRef v31 = v32;
    }
    goto LABEL_147;
  }
  uint64_t CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(void *)(DerivedStorage + 40));
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v16 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFStringRef *))(v13 + 48);
  if (!v16) {
    goto LABEL_28;
  }
  CFAllocatorRef v17 = kAPEndpointDescriptionProperty_SubType;
LABEL_27:
  int IsGroupable = v16(CMBaseObject, *v17, a3, a4);
LABEL_29:
  int SupportedFeatures = IsGroupable;
LABEL_30:
  if (a5) {
    *a5 = SupportedFeatures;
  }
  return 1;
}

uint64_t endpoint_copyPropertyInternal(const void *a1, const void *a2, const __CFAllocator *a3, CFMutableArrayRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  float v9 = (CFTypeRef *)MEMORY[0x1E4F20D98];
  if (*(unsigned char *)(DerivedStorage + 128)
    && !CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21048])
    && !CFEqual(a2, @"IsDissociated")
    && !CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20E40])
    && !CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20E38])
    && !CFEqual(a2, *v9)
    && !CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20F28]))
  {
    return 4294950573;
  }
  if (CFEqual(a2, *v9))
  {
    CFTypeRef cf = 0;
    uint64_t v10 = CMBaseObjectGetDerivedStorage();
    uint64_t v11 = *MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (*(unsigned char *)(v10 + 128))
    {
LABEL_10:
      FigCFDictionarySetValue();
      FigCFDictionarySetValue();
      uint64_t v13 = 0;
      *a4 = Mutable;
LABEL_11:
      if (cf) {
        CFRelease(cf);
      }
      return v13;
    }
    uint64_t CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(void *)(v10 + 40));
    uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v16) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = 0;
    }
    uint64_t v19 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v17 + 48);
    if (v19)
    {
      uint64_t v20 = v19(CMBaseObject, @"Descriptor", v11, &cf);
      if (!v20)
      {
        FigCFDictionarySetAllValuesFromDictionary();
        endpoint_setPropertyOnMXDescriptor(a1, (const void *)*MEMORY[0x1E4F20EC8]);
        endpoint_setPropertyOnMXDescriptor(a1, (const void *)*MEMORY[0x1E4F20E88]);
        if (*(_DWORD *)(v10 + 152) == 2)
        {
          endpoint_setPropertyOnMXDescriptor(a1, (const void *)*MEMORY[0x1E4F20DB8]);
          endpoint_setPropertyOnMXDescriptor(a1, (const void *)*MEMORY[0x1E4F20DD8]);
          endpoint_setPropertyOnMXDescriptor(a1, (const void *)*MEMORY[0x1E4F20DD0]);
        }
        goto LABEL_10;
      }
      uint64_t v13 = v20;
    }
    else
    {
      uint64_t v13 = 4294954514;
    }
    APSLogErrorAt();
    if (Mutable) {
      CFRelease(Mutable);
    }
    goto LABEL_11;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20E38]))
  {
    CFSetRef Copy = *(void **)(DerivedStorage + 456);
    if (!Copy) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20EF0]))
  {
    CFSetRef Copy = *(void **)(DerivedStorage + 464);
    if (Copy) {
LABEL_20:
    }
      CFSetRef Copy = (void *)CFRetain(Copy);
LABEL_21:
    uint64_t v13 = 0;
    *a4 = (CFMutableArrayRef)Copy;
    return v13;
  }
  if (CFEqual(a2, @"EndpointMetrics"))
  {
    CFDictionaryRef v21 = *(const __CFDictionary **)(DerivedStorage + 296);
    if (!v21)
    {
      CFSetRef Copy = 0;
      goto LABEL_21;
    }
    CFSetRef Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v21);
    if (Copy) {
      goto LABEL_21;
    }
LABEL_34:
    APSLogErrorAt();
    return 4294950575;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20F28]))
  {
    CFSetRef Copy = *(void **)(DerivedStorage + 448);
    if (!Copy) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20E40]))
  {
    uint64_t v22 = (const void **)MEMORY[0x1E4F1CFD0];
    BOOL v23 = (const void **)MEMORY[0x1E4F1CFC8];
    BOOL v24 = *(_DWORD *)(DerivedStorage + 152) == 2;
    goto LABEL_41;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20C88]))
  {
    CFTypeRef cf = 0;
    if (*(_DWORD *)(DerivedStorage + 152) == 2) {
      CFTypeRef cf = *(CFTypeRef *)(DerivedStorage + 144);
    }
    CFNumberRef v25 = CFNumberCreate(a3, kCFNumberSInt64Type, &cf);
    *a4 = v25;
    if (!v25) {
      goto LABEL_34;
    }
    return 0;
  }
  if (CFEqual(a2, @"IsDissociated"))
  {
    uint64_t v22 = (const void **)MEMORY[0x1E4F1CFD0];
    int v26 = *(unsigned __int8 *)(DerivedStorage + 128);
    goto LABEL_56;
  }
  if (CFEqual(a2, @"IsInUse"))
  {
    uint64_t v22 = (const void **)MEMORY[0x1E4F1CFD0];
    int v26 = *(_DWORD *)(DerivedStorage + 152);
    goto LABEL_56;
  }
  if (CFEqual(a2, @"IsEngaged"))
  {
    uint64_t v22 = (const void **)MEMORY[0x1E4F1CFD0];
    int v26 = *(unsigned __int8 *)(DerivedStorage + 271);
    goto LABEL_56;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20F68]))
  {
    CFSetRef Copy = *(void **)(DerivedStorage + 240);
    if (!Copy) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20EB0]))
  {
    uint64_t v22 = (const void **)MEMORY[0x1E4F1CFD0];
    int v26 = *(unsigned __int8 *)(DerivedStorage + 248);
    goto LABEL_56;
  }
  if (CFEqual(a2, @"EnabledFeatures"))
  {
    CFTypeRef cf = 0;
    uint64_t v27 = *(void *)(DerivedStorage + 168);
    int isURLPlaybackEnabled = endpoint_isURLPlaybackEnabled((uint64_t)a1);
    uint64_t EnabledFeatures = APEndpointGetEnabledFeatures(v27, isURLPlaybackEnabled, &cf);
    if (!EnabledFeatures)
    {
      CFNumberRef v30 = CFNumberCreate(a3, kCFNumberSInt64Type, &cf);
      *a4 = v30;
      if (!v30) {
        goto LABEL_34;
      }
      return 0;
    }
    uint64_t v13 = EnabledFeatures;
LABEL_98:
    APSLogErrorAt();
    return v13;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20FA8]))
  {
    return endpoint_copyStreams((uint64_t)a1, a3, a4);
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20CC0]))
  {
    uint64_t v22 = (const void **)MEMORY[0x1E4F1CFD0];
    int v26 = *(unsigned __int8 *)(DerivedStorage + 491);
    goto LABEL_56;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21098]))
  {
    APSVolumeConvertSliderValueToDB();
    LODWORD(cf) = v31;
    CFNumberRef v32 = CFNumberCreate(a3, kCFNumberFloatType, &cf);
    *a4 = v32;
    if (!v32) {
      goto LABEL_34;
    }
    return 0;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21080]) || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20ED0]))
  {
    float v33 = *(float *)(DerivedStorage + 516);
    float v34 = 1.0;
    BOOL v35 = v33 > 1.0 || v33 < 0.0;
    if (v33 < 0.0 && v33 <= 1.0) {
      float v34 = 0.0;
    }
    if (v35) {
      float v33 = v34;
    }
    *(float *)&CFTypeRef cf = v33;
    CFNumberRef v36 = CFNumberCreate(a3, kCFNumberFloatType, &cf);
    *a4 = v36;
    if (!v36) {
      goto LABEL_34;
    }
    return 0;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21088]))
  {
    uint64_t v22 = (const void **)MEMORY[0x1E4F1CFC8];
    BOOL v23 = (const void **)MEMORY[0x1E4F1CFD0];
    BOOL v24 = *(unsigned char *)(DerivedStorage + 504) == 0;
LABEL_41:
    if (!v24) {
      uint64_t v22 = v23;
    }
    goto LABEL_43;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21090]))
  {
    CFTypeRef cf = 0;
    uint64_t v37 = endpoint_copyVolumeControlType((uint64_t)a1, &cf);
    if (!v37)
    {
      CFNumberRef v38 = CFNumberCreate(a3, kCFNumberSInt64Type, &cf);
      *a4 = v38;
      if (!v38) {
        goto LABEL_34;
      }
      return 0;
    }
    uint64_t v13 = v37;
    goto LABEL_98;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20F20]))
  {
    uint64_t v22 = (const void **)MEMORY[0x1E4F1CFD0];
    int v26 = *(unsigned __int8 *)(DerivedStorage + 512);
    goto LABEL_56;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20E98]) || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20EA0]))
  {
    uint64_t v22 = (const void **)MEMORY[0x1E4F1CFD0];
    int v26 = *(unsigned __int8 *)(DerivedStorage + 520);
    goto LABEL_56;
  }
  if (CFEqual(a2, @"IsHALMuted"))
  {
    if (APEndpointIsHALMuteForUser())
    {
      if (!*(unsigned char *)(DerivedStorage + 520)) {
        goto LABEL_123;
      }
    }
    else if (!*(unsigned char *)(DerivedStorage + 521))
    {
LABEL_123:
      uint64_t v22 = (const void **)MEMORY[0x1E4F1CFC8];
      goto LABEL_43;
    }
LABEL_110:
    uint64_t v22 = (const void **)MEMORY[0x1E4F1CFD0];
LABEL_43:
    CFSetRef Copy = (void *)*v22;
    goto LABEL_20;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20EA8]))
  {
    uint64_t v22 = (const void **)MEMORY[0x1E4F1CFD0];
    int v26 = *(unsigned __int8 *)(DerivedStorage + 521);
    goto LABEL_56;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20D08]))
  {
    endpoint_copyAuthorizationType((uint64_t)a1, (const void **)a4);
    return 0;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20F78]))
  {
    CFSetRef Copy = *(void **)(DerivedStorage + 200);
    if (!Copy) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (CFEqual(a2, @"EndpointStatus"))
  {
    CFNumberRef v39 = CFNumberCreate(a3, kCFNumberSInt32Type, (const void *)(DerivedStorage + 156));
    *a4 = v39;
    if (!v39) {
      goto LABEL_34;
    }
    return 0;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20DD8]))
  {
    if (endpoint_isURLPlaybackEnabled((uint64_t)a1) && APSGetFBOPropertyInt64() > 0) {
      goto LABEL_123;
    }
    goto LABEL_110;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20DB8]))
  {
    if (endpoint_isURLPlaybackEnabled((uint64_t)a1))
    {
      int HasFeature = APEndpointDescriptionHasFeature(*(void *)(DerivedStorage + 40), 35);
      uint64_t v22 = (const void **)MEMORY[0x1E4F1CFD0];
      if (HasFeature) {
        uint64_t v22 = (const void **)MEMORY[0x1E4F1CFC8];
      }
      goto LABEL_43;
    }
    goto LABEL_110;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20DD0]))
  {
    LOBYTE(cf) = 0;
    if (endpoint_isURLPlaybackEnabled((uint64_t)a1)) {
      endpoint_getBooleanFromExternalPlaybackCapabilitiesIfPresent();
    }
    goto LABEL_110;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20DE8]))
  {
    LOBYTE(cf) = 0;
    if (endpoint_isURLPlaybackEnabled((uint64_t)a1) && APSSettingsIsFeatureEnabled()) {
      endpoint_getBooleanFromExternalPlaybackCapabilitiesIfPresent();
    }
    goto LABEL_123;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20EC0]))
  {
    return endpoint_copyIsURLPlaybackEnabled((uint64_t)a1, (CFTypeRef *)a4);
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21050]))
  {
    if (!endpoint_isURLPlaybackEnabled((uint64_t)a1)) {
      return 4294954513;
    }
    CFStringRef v41 = CFStringCreateWithFormat(a3, 0, @"%@-%llu", *(void *)(DerivedStorage + 456), *(void *)(DerivedStorage + 136));
    *a4 = (CFMutableArrayRef)v41;
    if (!v41) {
      goto LABEL_34;
    }
    return 0;
  }
  if (CFEqual(a2, @"EndpointShowInfo"))
  {
    endpoint_copyShowInfoDictionary((uint64_t)a1, a4);
    return 0;
  }
  if (CFEqual(a2, @"AirPlayDiagnosticsTargetInfo"))
  {
    return endpoint_copyAirPlayDiagnosticsDictionary((uint64_t)a1, a3, a4);
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20C90]))
  {
    CFTypeRef cf = 0;
    if (*(void *)(DerivedStorage + 224)) {
      CFTypeRef cf = *(CFTypeRef *)(DerivedStorage + 136);
    }
    CFNumberRef v42 = CFNumberCreate(a3, kCFNumberSInt64Type, &cf);
    *a4 = v42;
    if (!v42) {
      goto LABEL_34;
    }
    return 0;
  }
  if (CFEqual(a2, @"MetadataSourceTestingOnly"))
  {
    CFSetRef Copy = *(void **)(DerivedStorage + 192);
    if (!Copy) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20E60]))
  {
    int isConnected = endpoint_isConnected();
LABEL_160:
    uint64_t v22 = (const void **)MEMORY[0x1E4F1CFD0];
    if (!isConnected) {
      uint64_t v22 = (const void **)MEMORY[0x1E4F1CFC8];
    }
    goto LABEL_43;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20D10]))
  {
    uint64_t v22 = (const void **)MEMORY[0x1E4F1CFD0];
    int v26 = *(unsigned __int8 *)(DerivedStorage + 488);
    goto LABEL_56;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20F10]))
  {
    uint64_t v22 = (const void **)MEMORY[0x1E4F1CFD0];
    int v26 = *(unsigned __int8 *)(DerivedStorage + 490);
    goto LABEL_56;
  }
  if (CFEqual(a2, @"EligibleForFastReactivate"))
  {
    uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    if (*(void *)(DerivedStorage + 552) >= *(void *)(DerivedStorage + 72)
      || UpTimeNanoseconds >= *(void *)(DerivedStorage + 560))
    {
      goto LABEL_123;
    }
    goto LABEL_110;
  }
  if (CFEqual(a2, @"ReceiverSessionIsActive"))
  {
    CFTypeRef v45 = kAPEndpointDescriptionProperty_ReceiverSessionIsActive;
  }
  else
  {
    if (CFEqual(a2, @"IsMediaPresentationModeAvailable"))
    {
      uint64_t v22 = (const void **)MEMORY[0x1E4F1CFD0];
      int v26 = *(unsigned __int8 *)(DerivedStorage + 280);
LABEL_56:
      if (!v26) {
        uint64_t v22 = (const void **)MEMORY[0x1E4F1CFC8];
      }
      goto LABEL_43;
    }
    if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20E90]))
    {
      if (CFEqual(a2, @"ActivationStage"))
      {
        CFSetRef Copy = (void *)FigCFNumberCreateSInt64();
        goto LABEL_21;
      }
      if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20CF0])) {
        return 4294954512;
      }
      int isConnected = APEndpointDescriptionHasFeature(*(void *)(DerivedStorage + 40), 86);
      goto LABEL_160;
    }
    CFTypeRef v45 = kAPEndpointDescriptionProperty_IsLowFidelitySpeaker;
  }
  uint64_t v46 = *(void *)(DerivedStorage + 40);
  uint64_t v47 = (uint64_t)*v45;
  return APEndpointDescriptionCopyProperty(v46, v47, (uint64_t)a3, (uint64_t)a4);
}

uint64_t endpoint_copyAirPlayDiagnosticsDNSName(uint64_t a1, const __CFAllocator *a2, CFStringRef *a3, CFStringRef *a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  bzero(cStr, 0x400uLL);
  uint64_t CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(void *)(DerivedStorage + 40));
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v10 + 48);
  if (v11)
  {
    uint64_t v12 = v11(CMBaseObject, @"TransportDevice", *MEMORY[0x1E4F1CF80], &cf);
    if (v12)
    {
      uint64_t v13 = v12;
    }
    else
    {
      if (a3)
      {
        if (APTransportDeviceGetAddress())
        {
          if (gLogCategory_APEndpoint <= 50
            && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          CFStringRef v14 = 0;
        }
        else
        {
          CFStringRef v14 = CFStringCreateWithCString(a2, cStr, 0x8000100u);
        }
        *a3 = v14;
      }
      if (a4)
      {
        if (APTransportDeviceGetAddress())
        {
          if (gLogCategory_APEndpoint <= 50
            && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          CFStringRef v15 = 0;
        }
        else
        {
          CFStringRef v15 = CFStringCreateWithCString(a2, cStr, 0x8000100u);
        }
        uint64_t v13 = 0;
        *a4 = v15;
      }
      else
      {
        uint64_t v13 = 0;
      }
    }
  }
  else
  {
    uint64_t v13 = 4294954514;
  }
  if (cf) {
    CFRelease(cf);
  }
  return v13;
}

uint64_t endpoint_copyIsGroupable(uint64_t a1, CFTypeRef *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  uint64_t v4 = *(const void **)(DerivedStorage + 56);
  if (v4)
  {
    uint64_t v5 = 0;
    *a2 = CFRetain(v4);
  }
  else
  {
    uint64_t CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(void *)(DerivedStorage + 40));
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v8 + 48);
    if (v9)
    {
      uint64_t v5 = v9(CMBaseObject, @"TransportDevice", *MEMORY[0x1E4F1CF80], &cf);
      CFTypeRef v10 = cf;
      if (!v5)
      {
        int IsModernPresentOnInfra = APTransportDeviceIsModernPresentOnInfra();
        uint64_t Int64 = APSSettingsGetInt64();
        if (Int64
          && gLogCategory_APEndpoint <= 50
          && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        if (!APSGetFBOPropertyInt64()
          || !APSGetFBOPropertyInt64()
          || (!APSGetFBOPropertyInt64() ? (BOOL v13 = IsModernPresentOnInfra == 0) : (BOOL v13 = 1),
              !v13 ? (char v14 = 0) : (char v14 = 1),
              Int64 || (v14 & 1) != 0))
        {
          CFStringRef v15 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
        }
        else
        {
          CFStringRef v15 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
        }
        *a2 = CFRetain(*v15);
        CFTypeRef v10 = cf;
      }
      if (v10) {
        CFRelease(v10);
      }
    }
    else
    {
      return 4294954514;
    }
  }
  return v5;
}

uint64_t endpoint_copyPropertyForFirstDisplay(const void *a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef cf = 0;
  uint64_t v6 = *(void *)(CMBaseObjectGetDerivedStorage() + 40);
  CFAllocatorRef v7 = CFGetAllocator(a1);
  uint64_t CMBaseObject = APEndpointDescriptionGetCMBaseObject(v6);
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, __CFString *, CFAllocatorRef, CFTypeRef *))(v10 + 48);
  if (!v11)
  {
    uint64_t v13 = 4294954514;
LABEL_13:
    APSLogErrorAt();
    goto LABEL_14;
  }
  uint64_t v12 = v11(CMBaseObject, @"DisplayDescriptionArray", v7, &cf);
  uint64_t v13 = v12;
  if (v12 == -71754) {
    goto LABEL_14;
  }
  if (v12) {
    goto LABEL_13;
  }
  if (cf)
  {
    CFTypeID v14 = CFGetTypeID(cf);
    if (v14 == CFArrayGetTypeID() && CFArrayGetCount((CFArrayRef)cf) > 0)
    {
      ValueAtunsigned int Index = CFArrayGetValueAtIndex((CFArrayRef)cf, 0);
      CFAllocatorRef v16 = CFGetAllocator(a1);
      uint64_t v13 = APEndpointDisplayDescriptionCopyProperty((uint64_t)ValueAtIndex, a2, (uint64_t)v16, a3);
      if (!v13) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
  }
  APSLogErrorAt();
  uint64_t v13 = 4294950576;
LABEL_14:
  if (cf) {
    CFRelease(cf);
  }
  return v13;
}

void endpoint_getBooleanFromExternalPlaybackCapabilitiesIfPresent()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  uint64_t CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(void *)(DerivedStorage + 40));
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v3 + 48);
  if (v4) {
    v4(CMBaseObject, @"ExternalPlaybackCapabilities", *MEMORY[0x1E4F1CF80], &cf);
  }
  FigCFDictionaryGetBooleanIfPresent();
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t endpoint_copyAirPlayEndpointProperties(uint64_t a1, int a2, __CFDictionary **a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  if (a2) {
    uint64_t v6 = kAPEndpointDescriptionProperty_AirPlayClusterCompatibleEndpointProperties;
  }
  else {
    uint64_t v6 = kAPEndpointDescriptionProperty_AirPlayEndpointProperties;
  }
  uint64_t CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(void *)(DerivedStorage + 40));
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v9 + 48);
  if (!v10)
  {
    uint64_t v15 = 4294954514;
LABEL_16:
    APSLogErrorAt();
    goto LABEL_17;
  }
  uint64_t v11 = v10(CMBaseObject, *v6, *MEMORY[0x1E4F1CF80], &cf);
  if (v11)
  {
    uint64_t v15 = v11;
    goto LABEL_16;
  }
  CFMutableDictionaryRef MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (MutableCopy)
  {
    uint64_t v13 = MutableCopy;
    if (!a2)
    {
      CFTypeID v14 = (const void **)MEMORY[0x1E4F1CFD0];
      if (!*(unsigned char *)(DerivedStorage + 49)) {
        CFTypeID v14 = (const void **)MEMORY[0x1E4F1CFC8];
      }
      CFDictionarySetValue(MutableCopy, @"IsLocalDevice", *v14);
    }
    uint64_t v15 = 0;
    *a3 = v13;
  }
  else
  {
    APSLogErrorAt();
    uint64_t v15 = 4294950575;
  }
LABEL_17:
  if (cf) {
    CFRelease(cf);
  }
  return v15;
}

uint64_t endpoint_getSupportedFeatures(uint64_t a1, uint64_t *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  if (!a2)
  {
    APSLogErrorAt();
    return 4294950576;
  }
  uint64_t v4 = DerivedStorage;
  if (*(unsigned char *)(DerivedStorage + 48))
  {
    uint64_t v5 = 16;
LABEL_4:
    uint64_t v6 = 0;
    *a2 = v5;
    goto LABEL_25;
  }
  uint64_t v7 = *(void *)(DerivedStorage + 40);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v9 + 8);
  if (v10)
  {
    uint64_t v11 = v10(v7, &cf);
    if (!v11)
    {
      BOOL v12 = APSFeaturesHasFeature() != 0;
      unint64_t v13 = (APSFeaturesHasFeature() != 0) | (unint64_t)(2 * v12);
      if (APSGetFBOPropertyInt64()) {
        uint64_t v5 = v13 | 8;
      }
      else {
        uint64_t v5 = v13;
      }
      unsigned int v14 = *(_DWORD *)(v4 + 104);
      if (v14 == 4)
      {
        if (APSGetFBOPropertyInt64() && endpoint_isInLocalCluster()) {
          v5 |= 0x20uLL;
        }
        unsigned int v14 = *(_DWORD *)(v4 + 104);
      }
      if ((v14 > 0xD || ((1 << v14) & 0x2090) == 0)
        && (APSFeaturesHasFeature() || APSFeaturesHasFeature()))
      {
        v5 |= 4uLL;
      }
      goto LABEL_4;
    }
    uint64_t v6 = v11;
  }
  else
  {
    uint64_t v6 = 4294954514;
  }
  APSLogErrorAt();
LABEL_25:
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

BOOL endpoint_isThirdPartyTVFamily()
{
  return APSGetFBOPropertyInt64() != 0;
}

BOOL endpoint_isInLocalCluster()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  uint64_t v1 = *(void *)(DerivedStorage + 96);
  if (v1) {
    return v1 == *MEMORY[0x1E4F1CFD0];
  }
  uint64_t CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(void *)(DerivedStorage + 40));
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v5 + 48);
  if (v6) {
    v6(CMBaseObject, @"ClusterUUID", *MEMORY[0x1E4F1CF80], &cf);
  }
  uint64_t v2 = APSHasSamePersistentGroupUUID();
  if (cf) {
    CFRelease(cf);
  }
  return v2;
}

uint64_t endpoint_isURLPlaybackEnabled(uint64_t a1)
{
  CFTypeRef cf = 0;
  endpoint_copyIsURLPlaybackEnabled(a1, &cf);
  uint64_t v1 = FigCFEqual();
  if (cf) {
    CFRelease(cf);
  }
  return v1;
}

uint64_t endpoint_copyStreams(uint64_t a1, const __CFAllocator *a2, CFMutableArrayRef *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableArrayRef Mutable = CFArrayCreateMutable(a2, 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    CFMutableArrayRef v7 = Mutable;
    CFDictionaryRef v8 = *(const __CFDictionary **)(DerivedStorage + 168);
    if (v8) {
      CFDictionaryApplyFunction(v8, (CFDictionaryApplierFunction)endpoint_copyStreamsDictionaryEntry, v7);
    }
    uint64_t result = 0;
    *a3 = v7;
  }
  else
  {
    APSLogErrorAt();
    return 4294950575;
  }
  return result;
}

uint64_t endpoint_copyVolumeControlType(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
  {
    APSLogErrorAt();
    return 4294950576;
  }
  int v4 = *(_DWORD *)(DerivedStorage + 496) - 1;
  if (v4 > 3) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = qword_1D0B88B18[v4];
  }
  *a2 = v5;
  if (gLogCategory_APEndpoint > 30) {
    return 0;
  }
  if (gLogCategory_APEndpoint != -1 || (uint64_t result = _LogCategory_Initialize(), result))
  {
    APSGetFigEndpointVolumeControlTypeName();
    APSGetAPVolumeControlTypeName();
    LogPrintF();
    return 0;
  }
  return result;
}

CFTypeRef endpoint_copyAuthorizationType(uint64_t a1, const void **a2)
{
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 268) || !APSGetFBOPropertyInt64()) {
    uint64_t v3 = (const void **)MEMORY[0x1E4F203D0];
  }
  else {
    uint64_t v3 = (const void **)MEMORY[0x1E4F203D8];
  }
  int v4 = *v3;
  *a2 = *v3;
  return CFRetain(v4);
}

uint64_t endpoint_copyIsURLPlaybackEnabled(uint64_t a1, CFTypeRef *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  unint64_t v9 = 0;
  if (a2)
  {
    uint64_t v5 = DerivedStorage;
    uint64_t SupportedFeatures = endpoint_getSupportedFeatures(a1, (uint64_t *)&v9);
    if (SupportedFeatures)
    {
      APSLogErrorAt();
    }
    else
    {
      if (((v9 >> 2) & 1 & (*(_DWORD *)(v5 + 144) >> 2)) != 0) {
        CFMutableArrayRef v7 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
      }
      else {
        CFMutableArrayRef v7 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
      }
      *a2 = CFRetain(*v7);
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294950576;
  }
  return SupportedFeatures;
}

void endpoint_copyShowInfoDictionary(uint64_t a1, __CFDictionary **a2)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v54 = 0;
  cf[0] = 0;
  CMTimeValue value = 0;
  CFTypeRef v53 = 0;
  __int16 v56 = 0;
  cf[1] = 0;
  uint64_t v4 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    uint64_t v6 = Mutable;
    SNPrintF();
    CFDictionarySetCString();
    CFMutableArrayRef v7 = (const void *)*MEMORY[0x1E4F1CFD0];
    CFDictionaryRef v8 = (const void *)*MEMORY[0x1E4F1CFC8];
    if (*(void *)(DerivedStorage + 224)) {
      unint64_t v9 = (const void *)*MEMORY[0x1E4F1CFD0];
    }
    else {
      unint64_t v9 = (const void *)*MEMORY[0x1E4F1CFC8];
    }
    CFDictionarySetValue(v6, @"Activated", v9);
    CFDictionarySetValue(v6, @"Name", *(const void **)(DerivedStorage + 448));
    CFDictionarySetValue(v6, @"DeviceID", *(const void **)(DerivedStorage + 456));
    uint64_t CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(void *)(DerivedStorage + 40));
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    unint64_t v13 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v12 + 48);
    if (v13) {
      v13(CMBaseObject, @"TransportDevice", v4, cf);
    }
    if (cf[0])
    {
      APTransportDeviceGetDiscoveryID();
      FigCFDictionarySetValue();
      if (cf[0])
      {
        CFRelease(cf[0]);
        cf[0] = 0;
      }
    }
    uint64_t v14 = APEndpointDescriptionGetCMBaseObject(*(void *)(DerivedStorage + 40));
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v17 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v16 + 48);
    if (v17) {
      v17(v14, @"Model", v4, &v54);
    }
    FigCFDictionarySetValue();
    if (v54)
    {
      CFRelease(v54);
      CFTypeRef v54 = 0;
    }
    uint64_t v18 = APEndpointDescriptionGetCMBaseObject(*(void *)(DerivedStorage + 40));
    uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v19) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = 0;
    }
    CFDictionaryRef v21 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v20 + 48);
    if (v21) {
      v21(v18, @"SourceVersion", v4, &v54);
    }
    FigCFDictionarySetValue();
    if (v54)
    {
      CFRelease(v54);
      CFTypeRef v54 = 0;
    }
    uint64_t v22 = *(void *)(DerivedStorage + 40);
    uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v23) {
      uint64_t v24 = v23;
    }
    else {
      uint64_t v24 = 0;
    }
    CFNumberRef v25 = *(void (**)(uint64_t, CFTypeRef *))(v24 + 8);
    if (v25) {
      v25(v22, &v53);
    }
    FigCFDictionarySetValue();
    if (v53)
    {
      CFRelease(v53);
      CFTypeRef v53 = 0;
    }
    uint64_t v26 = APEndpointDescriptionGetCMBaseObject(*(void *)(DerivedStorage + 40));
    uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v27) {
      uint64_t v28 = v27;
    }
    else {
      uint64_t v28 = 0;
    }
    dispatch_queue_t v29 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v28 + 48);
    if (v29) {
      v29(v26, @"StatusFlags", v4, &v54);
    }
    FigCFDictionarySetValue();
    if (v54)
    {
      CFRelease(v54);
      CFTypeRef v54 = 0;
    }
    uint64_t v30 = APEndpointDescriptionGetCMBaseObject(*(void *)(DerivedStorage + 40));
    uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v31) {
      uint64_t v32 = v31;
    }
    else {
      uint64_t v32 = 0;
    }
    float v33 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v32 + 48);
    if (v33) {
      v33(v30, @"IsClusterLeader", v4, &v54);
    }
    FigCFDictionarySetValue();
    if (v54)
    {
      CFRelease(v54);
      CFTypeRef v54 = 0;
    }
    uint64_t v34 = APEndpointDescriptionGetCMBaseObject(*(void *)(DerivedStorage + 40));
    uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v35) {
      uint64_t v36 = v35;
    }
    else {
      uint64_t v36 = 0;
    }
    uint64_t v37 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v36 + 48);
    if (v37) {
      v37(v34, @"AccessControlType", v4, &v54);
    }
    FigCFDictionarySetValue();
    if (v54)
    {
      CFRelease(v54);
      CFTypeRef v54 = 0;
    }
    uint64_t v38 = APEndpointDescriptionGetCMBaseObject(*(void *)(DerivedStorage + 40));
    uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v39) {
      uint64_t v40 = v39;
    }
    else {
      uint64_t v40 = 0;
    }
    CFStringRef v41 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v40 + 48);
    if (v41) {
      v41(v38, @"HKAccessControlLevel", v4, &v54);
    }
    FigCFDictionarySetValue();
    if (v54)
    {
      CFRelease(v54);
      CFTypeRef v54 = 0;
    }
    CFDictionaryRef v42 = *(const __CFDictionary **)(DerivedStorage + 168);
    if (v42) {
      CFDictionaryApplyFunction(v42, (CFDictionaryApplierFunction)endpoint_copyShowInfoForStreamsDictionaryEntry, v6);
    }
    uint64_t v43 = *(void *)(DerivedStorage + 224);
    if (v43
      && ((uint64_t v44 = APSenderSessionGetCMBaseObject(v43), (v45 = *(void *)(CMBaseObjectGetVTable() + 8)) == 0)
        ? (uint64_t v46 = 0)
        : (uint64_t v46 = v45),
          (uint64_t v47 = *(void (**)(uint64_t, __CFString *, uint64_t, void **))(v46 + 48)) != 0))
    {
      v47(v44, @"ShowInfo", v4, &value);
      unsigned int v48 = v8;
      if (value)
      {
        CFDictionarySetValue(v6, @"SenderSessionInfo", value);
        FigCFDictionaryGetBooleanIfPresent();
        unsigned int v48 = v8;
      }
    }
    else
    {
      unsigned int v48 = v8;
    }
    CFDictionarySetValue(v6, @"Started", v48);
    CFDictionarySetInt64();
    if (*(unsigned char *)(DerivedStorage + 488)) {
      CMTimeValue v49 = v7;
    }
    else {
      CMTimeValue v49 = v8;
    }
    CFDictionarySetValue(v6, @"AutoconnectEnabled", v49);
    if (*(unsigned char *)(DerivedStorage + 48)) {
      uint64_t v50 = v7;
    }
    else {
      uint64_t v50 = v8;
    }
    CFDictionarySetValue(v6, @"IsRemoteControlEndpoint", v50);
    if (*(unsigned char *)(DerivedStorage + 49)) {
      int v51 = v7;
    }
    else {
      int v51 = v8;
    }
    CFDictionarySetValue(v6, @"IsLocal", v51);
    *a2 = v6;
    if (value) {
      CFRelease(value);
    }
  }
  else
  {
    APSLogErrorAt();
  }
  if (v54) {
    CFRelease(v54);
  }
}

uint64_t endpoint_copyAirPlayDiagnosticsDictionary(uint64_t a1, CFAllocatorRef allocator, CFMutableDictionaryRef *a3)
{
  CFTypeRef cf = 0;
  CMTimeValue value = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableDictionaryRef v7 = Mutable;
    uint64_t v8 = endpoint_copyAirPlayDiagnosticsDNSName(a1, allocator, (CFStringRef *)&value, (CFStringRef *)&cf);
    if (v8)
    {
      uint64_t v9 = v8;
      APSLogErrorAt();
      CFRelease(v7);
    }
    else
    {
      if (value) {
        CFDictionarySetValue(v7, @"InfraDNSName", value);
      }
      if (cf) {
        CFDictionarySetValue(v7, @"PeerToPeerDNSName", cf);
      }
      uint64_t v9 = 0;
      *a3 = v7;
    }
  }
  else
  {
    APSLogErrorAt();
    uint64_t v9 = APSSignalErrorAt();
  }
  if (value) {
    CFRelease(value);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v9;
}

uint64_t endpoint_isConnected()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(void *)(DerivedStorage + 224);
  if (!v1) {
    return *(unsigned __int8 *)(DerivedStorage + 320);
  }
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v3 = v2 ? v2 : 0;
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v3 + 8);
  if (!v4) {
    return *(unsigned __int8 *)(DerivedStorage + 320);
  }
  uint64_t result = v4(v1);
  if (!result) {
    return *(unsigned __int8 *)(DerivedStorage + 320);
  }
  return result;
}

void endpoint_setPropertyOnMXDescriptor(const void *a1, const void *a2)
{
  int v6 = 0;
  CFTypeRef cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpoint_copyStaticProperty((uint64_t)a1, a2, &cf, &v6)
    || (uint64_t v4 = *MEMORY[0x1E4F1CF80],
        endpoint_copyPropertyFromEndpointDescription(a1, a2, (const __CFAllocator *)*MEMORY[0x1E4F1CF80], (CFStringRef *)&cf, &v6)))
  {
    if (!v6)
    {
LABEL_4:
      FigCFDictionarySetValue();
      goto LABEL_5;
    }
  }
  else
  {
    int v6 = endpoint_copyPropertyInternal(a1, a2, v4, &cf);
    if (!v6) {
      goto LABEL_4;
    }
  }
  APSLogErrorAt();
LABEL_5:
  if (cf) {
    CFRelease(cf);
  }
}

void endpoint_copyStreamsDictionaryEntry(int a1, const void *a2, CFMutableArrayRef theArray)
{
}

void endpoint_copyShowInfoForStreamsDictionaryEntry(const void *a1, uint64_t a2, __CFDictionary *a3)
{
  CMTimeValue value = 0;
  uint64_t CMBaseObject = FigEndpointStreamGetCMBaseObject();
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(void (**)(uint64_t, __CFString *, void, void **))(v7 + 48);
  if (v8)
  {
    v8(CMBaseObject, @"EndpointStreamShowInfo", *MEMORY[0x1E4F1CF80], &value);
    if (value)
    {
      if (!a1)
      {
        APSLogErrorAt();
        goto LABEL_21;
      }
      if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F21468]))
      {
        uint64_t v9 = kAPEndpointShowInfoKey_StreamInfo_RealTimeAudio;
      }
      else if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F21470]))
      {
        uint64_t v9 = kAPEndpointShowInfoKey_StreamInfo_BufferedAudio;
      }
      else if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F21488]))
      {
        uint64_t v9 = kAPEndpointShowInfoKey_StreamInfo_Screen;
      }
      else
      {
        if (!CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F21478])) {
          goto LABEL_21;
        }
        uint64_t v9 = kAPEndpointShowInfoKey_StreamInfo_LowLatencyAudio;
      }
      if (*v9)
      {
        CFDictionarySetValue(a3, *v9, value);
        goto LABEL_17;
      }
LABEL_21:
      APSLogErrorAt();
LABEL_17:
      if (value) {
        CFRelease(value);
      }
    }
  }
}