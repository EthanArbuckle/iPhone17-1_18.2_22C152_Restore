uint64_t static Catalog.managedResource(for:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned char *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  long long v45;
  long long v46;
  uint64_t v47;
  long long v48;
  long long v49;
  uint64_t v50;
  void v51[3];
  uint64_t v52;
  uint64_t v53;
  void v54[2];
  char v55;
  uint64_t v56;
  __int16 v57;
  char v58;
  char v59;
  uint64_t v60;

  v2 = v1;
  if (qword_26B2B30D8 == -1) {
    goto LABEL_2;
  }
LABEL_40:
  swift_once();
LABEL_2:
  swift_beginAccess();
  v4 = off_26B2B30B8;
  if (*((void *)off_26B2B30B8 + 2))
  {
    swift_bridgeObjectRetain();
    v5 = sub_256A39CC8();
    if (v6)
    {
      sub_256A39E54(v4[7] + 40 * v5, (uint64_t)&v45);
    }
    else
    {
      v47 = 0;
      v45 = 0u;
      v46 = 0u;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v47 = 0;
    v45 = 0u;
    v46 = 0u;
  }
  swift_endAccess();
  if (!*((void *)&v46 + 1))
  {
    sub_256A3A4D4((uint64_t)&v45, (uint64_t *)&unk_26B2B5D90);
    v48 = 0u;
    v49 = 0u;
    v50 = 0;
    goto LABEL_35;
  }
  sub_256A39D2C(&qword_26B2B5D80);
  sub_256A39D2C((uint64_t *)&unk_26B2B33A8);
  if ((swift_dynamicCast() & 1) == 0)
  {
    v50 = 0;
    v48 = 0u;
    v49 = 0u;
    goto LABEL_35;
  }
  if (!*((void *)&v49 + 1))
  {
LABEL_35:
    result = sub_256A3A4D4((uint64_t)&v48, &qword_269F78AB0);
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return result;
  }
  v38 = a1;
  sub_256A3A540(&v48, (uint64_t)v51);
  type metadata accessor for CatalogClient();
  swift_allocObject();
  CatalogClient.init()();
  *(void *)&v45 = MEMORY[0x263F8EE88];
  v7 = v52;
  v8 = v53;
  sub_256A39D70(v51, v52);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 40))(v7, v8);
  v10 = 0;
  v39 = result + 56;
  v11 = 1 << *(unsigned char *)(result + 32);
  v12 = -1;
  if (v11 < 64) {
    v12 = ~(-1 << v11);
  }
  v13 = v12 & *(void *)(result + 56);
  v40 = (unint64_t)(v11 + 63) >> 6;
  v41 = result;
  if (v13)
  {
LABEL_14:
    v60 = v2;
    v43 = (v13 - 1) & v13;
    v44 = v10;
    v14 = __clz(__rbit64(v13)) | (v10 << 6);
    goto LABEL_26;
  }
  while (1)
  {
    v15 = __OFADD__(v10, 1);
    v16 = v10 + 1;
    if (v15)
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v16 >= v40) {
      goto LABEL_37;
    }
    v17 = *(void *)(v39 + 8 * v16);
    if (!v17) {
      break;
    }
LABEL_25:
    v60 = v2;
    v43 = (v17 - 1) & v17;
    v44 = v16;
    v14 = __clz(__rbit64(v17)) + (v16 << 6);
LABEL_26:
    v19 = *(void *)(v41 + 48) + 40 * v14;
    v20 = *(void *)(v19 + 8);
    v42 = *(void *)v19;
    v21 = *(unsigned char *)(v19 + 16);
    v22 = *(void *)(v19 + 24);
    v23 = *(unsigned __int8 *)(v19 + 34);
    v24 = *(unsigned __int16 *)(v19 + 32);
    v25 = v52;
    v26 = v53;
    sub_256A39D70(v51, v52);
    v27 = *(void *)(v26 + 8);
    v28 = *(uint64_t (**)(uint64_t, uint64_t))(v27 + 24);
    swift_bridgeObjectRetain();
    v29 = v28(v25, v27);
    v30 = v60;
    v32 = sub_256A40A2C(v29, v31);
    v2 = v30;
    if (v30)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return sub_256A39DB4((uint64_t)v51);
    }
    v33 = (unsigned char *)v32;
    a1 = v24 | (v23 << 16);
    swift_bridgeObjectRelease();
    v34 = v33[OBJC_IVAR___MCResourceStatus_status];

    v54[0] = v42;
    v54[1] = v20;
    v55 = v21;
    v56 = v22;
    v58 = BYTE2(a1);
    v57 = a1;
    v59 = v34;
    sub_256A39390((uint64_t)&v48, (uint64_t)v54);
    result = swift_bridgeObjectRelease();
    v13 = v43;
    v10 = v44;
    if (v43) {
      goto LABEL_14;
    }
  }
  v18 = v16 + 1;
  if (v16 + 1 >= v40) {
    goto LABEL_37;
  }
  v17 = *(void *)(v39 + 8 * v18);
  if (v17) {
    goto LABEL_24;
  }
  v18 = v16 + 2;
  if (v16 + 2 >= v40) {
    goto LABEL_37;
  }
  v17 = *(void *)(v39 + 8 * v18);
  if (v17) {
    goto LABEL_24;
  }
  v18 = v16 + 3;
  if (v16 + 3 >= v40)
  {
LABEL_37:
    swift_release();
    v35 = v45;
    v36 = v52;
    v37 = v53;
    sub_256A39E04((uint64_t)v51, v52);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v35, v36, v37);
    swift_release();
    sub_256A39E54((uint64_t)v51, v38);
    return sub_256A39DB4((uint64_t)v51);
  }
  v17 = *(void *)(v39 + 8 * v18);
  if (v17)
  {
LABEL_24:
    v16 = v18;
    goto LABEL_25;
  }
  while (1)
  {
    v16 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v16 >= v40) {
      goto LABEL_37;
    }
    v17 = *(void *)(v39 + 8 * v16);
    ++v18;
    if (v17) {
      goto LABEL_25;
    }
  }
  __break(1u);
  return result;
}

uint64_t static Catalog.resource(for:)@<X0>(uint64_t a1@<X8>)
{
  if (qword_26B2B30D8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  v2 = off_26B2B30B8;
  if (*((void *)off_26B2B30B8 + 2))
  {
    swift_bridgeObjectRetain();
    unint64_t v3 = sub_256A39CC8();
    if (v4)
    {
      sub_256A39E54(v2[7] + 40 * v3, a1);
    }
    else
    {
      *(void *)(a1 + 32) = 0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return swift_endAccess();
}

uint64_t sub_256A38B10()
{
  if (qword_26B2B33A0 != -1) {
LABEL_17:
  }
    swift_once();
  v0 = off_26B2B30C0;
  swift_bridgeObjectRetain();
  sub_256A39D2C(&qword_26B2B5D80);
  uint64_t v1 = sub_256B3F600();
  uint64_t v2 = v0[2];
  if (!v2)
  {
LABEL_14:
    off_26B2B30B8 = (_UNKNOWN *)v1;
    return swift_bridgeObjectRelease();
  }
  uint64_t v3 = (uint64_t)(v0 + 4);
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_256A39E54(v3, (uint64_t)v22);
    uint64_t v4 = v23;
    uint64_t v5 = v24;
    sub_256A39D70(v22, v23);
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 24))(v4, v5);
    uint64_t v8 = v7;
    sub_256A39E54((uint64_t)v22, (uint64_t)v21);
    swift_isUniquelyReferenced_nonNull_native();
    unint64_t v9 = sub_256A39CC8();
    if (__OFADD__(*(void *)(v1 + 16), (v10 & 1) == 0))
    {
      __break(1u);
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
    unint64_t v11 = v9;
    char v12 = v10;
    sub_256A39D2C(&qword_26B2B33E8);
    if (sub_256B3FC00()) {
      break;
    }
LABEL_8:
    if (v12)
    {
      uint64_t v15 = *(void *)(v1 + 56) + 40 * v11;
      sub_256A39DB4(v15);
      sub_256A3A540(v21, v15);
    }
    else
    {
      *(void *)(v1 + 8 * (v11 >> 6) + 64) |= 1 << v11;
      v16 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v11);
      uint64_t *v16 = v6;
      v16[1] = v8;
      sub_256A3A540(v21, *(void *)(v1 + 56) + 40 * v11);
      uint64_t v17 = *(void *)(v1 + 16);
      BOOL v18 = __OFADD__(v17, 1);
      uint64_t v19 = v17 + 1;
      if (v18) {
        goto LABEL_16;
      }
      *(void *)(v1 + 16) = v19;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_256A39DB4((uint64_t)v22);
    v3 += 40;
    if (!--v2)
    {
      swift_bridgeObjectRelease();
      goto LABEL_14;
    }
  }
  unint64_t v13 = sub_256A39CC8();
  if ((v12 & 1) == (v14 & 1))
  {
    unint64_t v11 = v13;
    goto LABEL_8;
  }
  uint64_t result = sub_256B3FEF0();
  __break(1u);
  return result;
}

uint64_t sub_256A38D84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    sub_256A3A540((long long *)a1, (uint64_t)v12);
    sub_256A4757C((uint64_t)v12, a2, a3, v5, v6, v7, v8, v9, v11, v12[0]);
  }
  else
  {
    sub_256A3A4D4(a1, (uint64_t *)&unk_26B2B5D90);
    sub_256A3A1C0((uint64_t)v12);
    sub_256A3A4D4((uint64_t)v12, (uint64_t *)&unk_26B2B5D90);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_256A38E10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    sub_256A3A530((_OWORD *)a1, v11);
    sub_256A475D0((uint64_t)v11, a2, a3, v5, v6, v7, v8, v9, *(uint64_t *)&v11[0], *((uint64_t *)&v11[0] + 1));
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_256A3A4D4(a1, &qword_269F78B20);
    sub_256A3A304(v11);
    swift_bridgeObjectRelease();
    return sub_256A3A4D4((uint64_t)v11, &qword_269F78B20);
  }
}

uint64_t static Catalog.resourcesLookup.getter()
{
  if (qword_26B2B30D8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static Catalog.resourcesLookup.setter(void *a1)
{
  if (qword_26B2B30D8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  off_26B2B30B8 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static Catalog.resourcesLookup.modify())()
{
  if (qword_26B2B30D8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t static Catalog.resourceInformation(for:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CatalogClient();
  swift_allocObject();
  CatalogClient.init()();
  uint64_t v4 = sub_256A40A58(a1, a2);
  swift_release();
  return v4;
}

uint64_t static Catalog.register(resource:)(void *a1)
{
  if (qword_26B2B30D8 != -1) {
    swift_once();
  }
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  sub_256A39D70(a1, v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24))(v2, v3);
  uint64_t v6 = v5;
  sub_256A39E54((uint64_t)a1, (uint64_t)v8);
  swift_beginAccess();
  sub_256A38D84((uint64_t)v8, v4, v6);
  return swift_endAccess();
}

uint64_t sub_256A3917C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v9 = a4;
  uint64_t v10 = *v4;
  sub_256B3FF40();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_256B3F740();
  swift_bridgeObjectRelease();
  uint64_t v24 = a1;
  if (v9 != 2) {
    sub_256B3FF60();
  }
  sub_256B3FF60();
  sub_256B3FF70();
  sub_256A3A63C();
  unint64_t v13 = v12 & ~v11;
  if (((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    swift_isUniquelyReferenced_nonNull_native();
    uint64_t v25 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    swift_bridgeObjectRetain();
    sub_256B09990(a2, a3, a4, v13);
    *uint64_t v4 = v25;
    swift_bridgeObjectRelease();
    *(void *)uint64_t v24 = a2;
    *(void *)(v24 + 8) = a3;
    uint64_t result = 1;
    *(unsigned char *)(v24 + 16) = a4;
    return result;
  }
  uint64_t v14 = ~v11;
  uint64_t v15 = *(void *)(v10 + 48);
  while (1)
  {
    uint64_t v16 = v15 + 24 * v13;
    int v17 = *(unsigned __int8 *)(v16 + 16);
    BOOL v18 = *(void *)v16 == a2 && *(void *)(v16 + 8) == a3;
    if (!v18 && (sub_256B3FEA0() & 1) == 0) {
      goto LABEL_15;
    }
    if (v17 != 2) {
      break;
    }
    if (a4 == 2) {
      goto LABEL_17;
    }
LABEL_15:
    unint64_t v13 = (v13 + 1) & v14;
    if (((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
      goto LABEL_16;
    }
  }
  if (a4 == 2 || ((a4 ^ ((v17 & 1) == 0)) & 1) == 0) {
    goto LABEL_15;
  }
LABEL_17:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v20 = sub_256A3A648((uint64_t)v4);
  LOBYTE(v21) = *(unsigned char *)(v21 + 16);
  *(void *)uint64_t v23 = v22;
  *(void *)(v23 + 8) = v20;
  *(unsigned char *)(v23 + 16) = v21;
  swift_bridgeObjectRetain();
  return 0;
}

uint64_t sub_256A39390(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = a2;
  uint64_t v6 = *v2;
  long long v7 = *(_OWORD *)(a2 + 16);
  v41[0] = *(_OWORD *)a2;
  v41[1] = v7;
  int v42 = *(_DWORD *)(a2 + 32);
  sub_256B3FF40();
  swift_bridgeObjectRetain();
  ExecutionContext.hash(into:)();
  sub_256B3FF70();
  sub_256A3A63C();
  unint64_t v10 = v9 & ~v8;
  if ((*(void *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v28 = (uint64_t)v2;
    uint64_t v30 = a1;
    uint64_t v32 = ~v8;
    uint64_t v33 = *(void *)(v6 + 48);
    uint64_t v11 = *(void *)(v4 + 8);
    uint64_t v35 = *(void *)v4;
    int v34 = *(unsigned __int8 *)(v4 + 16);
    sub_256A3A558(v4 + 24, (uint64_t)v43);
    uint64_t v29 = v4;
    int v31 = *(unsigned __int8 *)(v4 + 35);
    while (1)
    {
      uint64_t v12 = v33 + 40 * v10;
      int v13 = *(unsigned __int8 *)(v12 + 16);
      uint64_t v14 = *(void *)(v12 + 24);
      int v15 = *(unsigned __int8 *)(v12 + 32);
      int v16 = *(unsigned __int8 *)(v12 + 33);
      int v17 = *(unsigned __int8 *)(v12 + 34);
      __int16 v18 = *(_WORD *)(v12 + 32);
      int v19 = *(unsigned __int8 *)(v12 + 35);
      BOOL v20 = *(void *)v12 == v35 && *(void *)(v12 + 8) == v11;
      if (!v20 && (sub_256B3FEA0() & 1) == 0) {
        goto LABEL_22;
      }
      if (v13 == 2)
      {
        if (v34 != 2) {
          goto LABEL_22;
        }
      }
      else if (v34 == 2 || ((v34 ^ ((v13 & 1) == 0)) & 1) == 0)
      {
        goto LABEL_22;
      }
      sub_256A3A558((uint64_t)v43, (uint64_t)&v37);
      if (v18 == 2)
      {
        sub_256A3A558((uint64_t)v43, (uint64_t)v41);
        if (BYTE8(v41[0]) != 2) {
          goto LABEL_22;
        }
      }
      else
      {
        sub_256A3A558((uint64_t)v43, (uint64_t)v44);
        if (v44[8] == 2 || v14 != v37 || ((v15 ^ v38) & 1) != 0 || ((v39 ^ v16) & 1) != 0 || ((v17 ^ v40) & 1) != 0) {
          goto LABEL_22;
        }
      }
      if (v19 == v31)
      {
        swift_bridgeObjectRelease();
        sub_256A3A5EC(v29);
        uint64_t v23 = sub_256A3A648(v28);
        char v25 = *(unsigned char *)(v24 + 16);
        uint64_t v26 = *(void *)(v24 + 24);
        LODWORD(v24) = *(_DWORD *)(v24 + 32);
        *(void *)uint64_t v30 = v27;
        *(void *)(v30 + 8) = v23;
        *(unsigned char *)(v30 + 16) = v25;
        *(void *)(v30 + 24) = v26;
        *(_DWORD *)(v30 + 32) = v24;
        swift_bridgeObjectRetain();
        return 0;
      }
LABEL_22:
      unint64_t v10 = (v10 + 1) & v32;
      if (((*(void *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v4 = v29;
        a1 = v30;
        uint64_t v3 = (uint64_t *)v28;
        goto LABEL_25;
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_25:
  swift_isUniquelyReferenced_nonNull_native();
  uint64_t v36 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  sub_256A3A5C0(v4);
  sub_256B09B7C((uint64_t *)v4, v10);
  *uint64_t v3 = v36;
  swift_bridgeObjectRelease();
  long long v21 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v4;
  *(_OWORD *)(a1 + 16) = v21;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(v4 + 32);
  return 1;
}

uint64_t sub_256A39684(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  sub_256B3FF40();
  swift_bridgeObjectRetain();
  sub_256B3F740();
  uint64_t v8 = sub_256B3FF70();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  uint64_t v10 = v8 & ~v9;
  sub_256A3A65C();
  if (v11)
  {
    uint64_t v12 = *(void *)(v7 + 48);
    int v13 = (void *)(v12 + 16 * v10);
    BOOL v14 = *v13 == a2 && v13[1] == a3;
    if (v14 || (sub_256B3FEA0() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int v15 = (uint64_t *)(*(void *)(*v3 + 48) + 16 * v10);
      uint64_t v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v18 = ~v9;
    while (1)
    {
      uint64_t v10 = (v10 + 1) & v18;
      sub_256A3A65C();
      if ((v19 & 1) == 0) {
        break;
      }
      BOOL v20 = (void *)(v12 + 16 * v10);
      BOOL v21 = *v20 == a2 && v20[1] == a3;
      if (v21 || (sub_256B3FEA0() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_isUniquelyReferenced_nonNull_native();
  uint64_t v22 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_256B09E20(a2, a3, v10);
  *uint64_t v3 = v22;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_256A3981C(char *a1, char a2)
{
  uint64_t v5 = *v2;
  swift_bridgeObjectRetain();
  sub_256A55F30();
  sub_256A3A63C();
  unint64_t v8 = v7 & ~v6;
  if ((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
  {
    uint64_t v9 = ~v6;
    while (1)
    {
      unint64_t v10 = Tag.rawValue.getter();
      uint64_t v12 = v11;
      if (v10 == Tag.rawValue.getter() && v12 == v13) {
        break;
      }
      char v15 = sub_256B3FEA0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v15) {
        goto LABEL_11;
      }
      unint64_t v8 = (v8 + 1) & v9;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease_n();
LABEL_11:
    swift_bridgeObjectRelease();
    uint64_t result = 0;
    a2 = *(unsigned char *)(*(void *)(*v2 + 48) + v8);
  }
  else
  {
LABEL_9:
    swift_bridgeObjectRelease();
    swift_isUniquelyReferenced_nonNull_native();
    uint64_t v17 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    sub_256B09F7C(a2, v8);
    uint64_t *v2 = v17;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
  }
  *a1 = a2;
  return result;
}

uint64_t sub_256A399A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  sub_256B3FF40();
  uint64_t v5 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v37 = a2;
  int v11 = *(unsigned __int8 *)(a2 + 48);
  uint64_t v43 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v44 = v5;
  sub_256B3F740();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v42 = v7;
  sub_256B3F740();
  uint64_t v41 = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_256B3F740();
  uint64_t v40 = v10;
  swift_bridgeObjectRelease();
  sub_256B3FF60();
  if (v11 != 11) {
    sub_256A86918((uint64_t)v45, v11);
  }
  sub_256B3FF70();
  sub_256A3A63C();
  unint64_t v14 = v13 & ~v12;
  uint64_t v16 = v15 + 56;
  if (((*(void *)(v15 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
  {
LABEL_26:
    swift_bridgeObjectRelease();
    swift_isUniquelyReferenced_nonNull_native();
    v45[0] = *(void *)v36;
    *(void *)uint64_t v36 = 0x8000000000000000;
    sub_256A3A43C(v37);
    sub_256B0A108((uint64_t *)v37, v14);
    *(void *)uint64_t v36 = v45[0];
    swift_bridgeObjectRelease();
    long long v27 = *(_OWORD *)(v37 + 16);
    *(_OWORD *)a1 = *(_OWORD *)v37;
    *(_OWORD *)(a1 + 16) = v27;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(v37 + 32);
    *(unsigned char *)(a1 + 48) = *(unsigned char *)(v37 + 48);
    return 1;
  }
  int v39 = v11;
  uint64_t v17 = ~v12;
  while (1)
  {
    uint64_t v18 = *(void *)(v43 + 48) + 56 * v14;
    uint64_t v19 = *(void *)(v18 + 16);
    uint64_t v20 = *(void *)(v18 + 24);
    uint64_t v21 = *(void *)(v18 + 32);
    uint64_t v22 = *(void *)(v18 + 40);
    int v23 = *(unsigned __int8 *)(v18 + 48);
    BOOL v24 = *(void *)v18 == v44 && *(void *)(v18 + 8) == v6;
    if (!v24 && (sub_256B3FEA0() & 1) == 0) {
      goto LABEL_25;
    }
    BOOL v25 = v19 == v42 && v20 == v41;
    if (!v25 && (sub_256B3FEA0() & 1) == 0) {
      goto LABEL_25;
    }
    BOOL v26 = v21 == v9 && v22 == v40;
    if (!v26 && (sub_256B3FEA0() & 1) == 0) {
      goto LABEL_25;
    }
    if (v23 != 11) {
      break;
    }
    if (v39 == 11) {
      goto LABEL_27;
    }
LABEL_25:
    unint64_t v14 = (v14 + 1) & v17;
    if (((*(void *)(v16 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
      goto LABEL_26;
    }
  }
  if (v39 == 11 || (sub_256B026BC(v23, v39) & 1) == 0) {
    goto LABEL_25;
  }
LABEL_27:
  swift_bridgeObjectRelease();
  sub_256A3A488(v37);
  uint64_t v29 = *(void *)(*(void *)v36 + 48) + 56 * v14;
  uint64_t v31 = *(void *)v29;
  uint64_t v30 = *(void *)(v29 + 8);
  uint64_t v32 = *(void *)(v29 + 16);
  uint64_t v33 = *(void *)(v29 + 24);
  uint64_t v34 = *(void *)(v29 + 32);
  uint64_t v35 = *(void *)(v29 + 40);
  LOBYTE(v29) = *(unsigned char *)(v29 + 48);
  *(void *)a1 = v31;
  *(void *)(a1 + 8) = v30;
  *(void *)(a1 + 16) = v32;
  *(void *)(a1 + 24) = v33;
  *(void *)(a1 + 32) = v34;
  *(void *)(a1 + 40) = v35;
  *(unsigned char *)(a1 + 48) = v29;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return 0;
}

unint64_t sub_256A39CC8()
{
  sub_256A3A618();
  sub_256B3F740();
  uint64_t v2 = sub_256B3FF70();

  return sub_256A39FBC(v1, v0, v2);
}

uint64_t sub_256A39D2C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

void *sub_256A39D70(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_256A39DB4(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_256A39E04(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_256A39E54(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void type metadata accessor for os_unfair_lock_s()
{
  if (!qword_26B2B61F0)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_26B2B61F0);
    }
  }
}

unint64_t sub_256A39F04(uint64_t a1)
{
  uint64_t v2 = sub_256A55F30();

  return sub_256A3A0A0(a1, v2);
}

unint64_t sub_256A39F48()
{
  sub_256A3A618();
  swift_bridgeObjectRetain();
  sub_256B3F740();
  swift_bridgeObjectRelease();
  uint64_t v2 = sub_256B3FF70();

  return sub_256A39FBC(v1, v0, v2);
}

unint64_t sub_256A39FBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_256B3FEA0() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_256B3FEA0() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_256A3A0A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = ~v4;
    while (1)
    {
      unint64_t v7 = Tag.rawValue.getter();
      uint64_t v9 = v8;
      if (v7 == Tag.rawValue.getter() && v9 == v10) {
        break;
      }
      char v12 = sub_256B3FEA0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v12 & 1) == 0)
      {
        unint64_t v5 = (v5 + 1) & v6;
        if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
          continue;
        }
      }
      return v5;
    }
    swift_bridgeObjectRelease_n();
  }
  return v5;
}

double sub_256A3A1C0@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_256A39CC8();
  char v6 = v5;
  swift_bridgeObjectRelease();
  if (v6)
  {
    swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    sub_256A39D2C(&qword_26B2B33E8);
    sub_256B3FC00();
    swift_bridgeObjectRelease();
    sub_256A3A540((long long *)(*(void *)(v8 + 56) + 40 * v4), a1);
    sub_256A39D2C(&qword_26B2B5D80);
    sub_256B3FC20();
    uint64_t *v2 = v8;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

double sub_256A3A304@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_256A39CC8();
  char v6 = v5;
  swift_bridgeObjectRelease();
  if (v6)
  {
    swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    sub_256A39D2C((uint64_t *)&unk_269F78D00);
    sub_256B3FC00();
    swift_bridgeObjectRelease();
    sub_256A3A530((_OWORD *)(*(void *)(v8 + 56) + 32 * v4), a1);
    sub_256B3FC20();
    uint64_t *v2 = v8;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a1 = 0u;
    a1[1] = 0u;
  }
  return result;
}

uint64_t sub_256A3A43C(uint64_t a1)
{
  return a1;
}

uint64_t sub_256A3A488(uint64_t a1)
{
  return a1;
}

uint64_t sub_256A3A4D4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_256A39D2C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

_OWORD *sub_256A3A530(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_256A3A540(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_256A3A558(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_256A39D2C(&qword_269F78AB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_256A3A5C0(uint64_t a1)
{
  return a1;
}

uint64_t sub_256A3A5EC(uint64_t a1)
{
  return a1;
}

uint64_t sub_256A3A618()
{
  return sub_256B3FF40();
}

uint64_t sub_256A3A648@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(*(void *)(*(void *)a1 + 48) + v1 + 8);
}

uint64_t CatalogClient.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  CatalogClient.init()();
  return v0;
}

double sub_256A3A6A8@<D0>(uint64_t a1@<X2>, _OWORD *a2@<X8>)
{
  if (*(void *)(a1 + 16) && (unint64_t v4 = sub_256A39CC8(), (v5 & 1) != 0))
  {
    uint64_t v6 = *(void *)(a1 + 56) + 32 * v4;
    sub_256A49EDC(v6, (uint64_t)a2);
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t sub_256A3A70C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    sub_256A39CC8();
    if (v3) {
      swift_bridgeObjectRetain();
    }
  }
  return sub_256A4A370();
}

uint64_t ResourceContainer.resourceData.getter()
{
  return sub_256A4A370();
}

uint64_t ResourceContainer.resourceType.getter()
{
  return sub_256A4A370();
}

uint64_t ResourceContainer.assetBacked.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC12ModelCatalog17ResourceContainer_assetBacked);
}

uint64_t ResourceContainer.__allocating_init(resourceData:resourceType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_256A3B338(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void))ResourceContainer.init(resourceData:resourceType:assetBacked:));
}

uint64_t ResourceContainer.__allocating_init(jsonData:assetBacked:identifier:resourceType:)(uint64_t a1, uint64_t a2, int a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  HIDWORD(v97) = a3;
  uint64_t v142 = *MEMORY[0x263EF8340];
  char v12 = self;
  uint64_t v13 = (void *)sub_256B3F3B0();
  *(void *)&long long v140 = 0;
  id v14 = objc_msgSend(v12, sel_JSONObjectWithData_options_error_, v13, 0, &v140);

  if (!v14)
  {
    unint64_t v83 = a2;
    id v84 = (id)v140;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_256B3F230();

    swift_willThrow();
    uint64_t v85 = a1;
    unint64_t v86 = v83;
LABEL_14:
    sub_256A46DF8(v85, v86);
    return sub_256A4AC68();
  }
  id v15 = (id)v140;
  sub_256B3FAD0();
  swift_unknownObjectRelease();
  sub_256A39D2C(&qword_269F78B10);
  uint64_t v16 = swift_dynamicCast();
  if ((v16 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_256A46E50();
    swift_allocError();
    *(void *)uint64_t v87 = 0xD000000000000033;
    *(void *)(v87 + 8) = 0x8000000256B47130;
    *(unsigned char *)(v87 + 16) = 1;
    swift_willThrow();
    uint64_t v85 = a1;
    unint64_t v86 = a2;
    goto LABEL_14;
  }
  uint64_t v141 = MEMORY[0x263F8D310];
  LOBYTE(v140) = a4;
  *((void *)&v140 + 1) = a5;
  uint64_t v24 = MEMORY[0x263F8D310];
  BOOL v25 = sub_256A4A5E0(v16, v17, v18, v19, v20, v21, v22, v23, a2, (uint64_t)v93, v97, a6, v105, v105, v112, v116, v120, v124, v128,
          v132,
          v136,
          v140);
  sub_256A38E10((uint64_t)v25, 25705, 0xE200000000000000);
  uint64_t v141 = v24;
  *(void *)&long long v140 = v102;
  *((void *)&v140 + 1) = a7;
  uint64_t v26 = swift_bridgeObjectRetain();
  uint64_t v34 = sub_256A4A5E0(v26, v27, v28, v29, v30, v31, v32, v33, v90, (uint64_t)v94, v98, v102, v106, v109, v113, v117, v121, v125, v129,
          v133,
          v137,
          v140);
  uint64_t v35 = sub_256A38E10((uint64_t)v34, 0x656372756F736572, 0xEC00000065707954);
  uint64_t v36 = MEMORY[0x263F8D4F8];
  uint64_t v141 = MEMORY[0x263F8D4F8];
  uint64_t v43 = sub_256A4A5E0(v35, v37, 0xEA00000000006465, v38, v39, v40, v41, v42, v91, (uint64_t)v95, v99, v103, v107, v110, v114, v118, v122, v126, v130,
          v134,
          v138,
          1);
  sub_256A38E10((uint64_t)v43, 0x64616F6C65646973, v44);
  uint64_t v45 = v111;
  sub_256A3A6A8(v111, &v140);
  uint64_t v46 = v141;
  sub_256A498E4((uint64_t)&v140, &qword_269F78B20);
  if (!v46)
  {
    uint64_t v141 = sub_256A39D2C(&qword_269F78B28);
    v54 = sub_256A4A5E0(v141, v47, v48, v49, v50, v51, v52, v53, v92, (uint64_t)v96, v100, v104, v108, v111, v115, v119, v123, v127, v131,
            v135,
            v139,
            MEMORY[0x263F8EE78]);
    sub_256A38E10((uint64_t)v54, 0x69646E6F63657270, 0xED0000736E6F6974);
    uint64_t v45 = v111;
  }
  sub_256A3A6A8(v45, &v140);
  uint64_t v55 = v141;
  uint64_t v56 = sub_256A498E4((uint64_t)&v140, &qword_269F78B20);
  if (!v55)
  {
    uint64_t v141 = v36;
    v64 = sub_256A4A5E0(v56, v57, v58, v59, v60, v61, v62, v63, v92, (uint64_t)v96, v100, v104, v108, v111, v115, v119, v123, v127, v131,
            v135,
            v139,
            BYTE4(v100) & 1);
    sub_256A38E10((uint64_t)v64, 0x6361427465737361, 0xEB0000000064656BLL);
    uint64_t v45 = v111;
  }
  sub_256A3A6A8(v45, &v140);
  uint64_t v65 = v141;
  uint64_t v66 = sub_256A498E4((uint64_t)&v140, &qword_269F78B20);
  if (!v65)
  {
    uint64_t v141 = v24;
    *((void *)&v140 + 1) = 0xE000000000000000;
    v74 = sub_256A4A5E0(v66, v67, v68, v69, v70, v71, v72, v73, v92, (uint64_t)v96, v100, v104, v108, v111, v115, v119, v123, v127, v131,
            v135,
            v139,
            0);
    sub_256A38E10((uint64_t)v74, 0x614E656372756F73, 0xEA0000000000656DLL);
  }
  sub_256A39D2C(&qword_269F78B30);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  strcpy((char *)(inited + 32), "configuration");
  *(_WORD *)(inited + 46) = -4864;
  *(void *)(inited + 48) = v111;
  swift_bridgeObjectRetain();
  sub_256B3F600();
  v76 = (void *)sub_256B3F5D0();
  swift_bridgeObjectRelease();
  *(void *)&long long v140 = 0;
  id v77 = objc_msgSend(v12, sel_dataWithJSONObject_options_error_, v76, 0, &v140);

  id v78 = (id)v140;
  if (v77)
  {
    uint64_t v79 = sub_256B3F3C0();
    uint64_t v81 = v80;

    id v82 = objc_allocWithZone(v96);
    ResourceContainer.init(resourceData:resourceType:assetBacked:)(v79, v81, v104, a7, BYTE4(v100) & 1);
  }
  else
  {
    v89 = v78;
    swift_bridgeObjectRelease();
    sub_256B3F230();

    swift_willThrow();
  }
  sub_256A46DF8(a1, v92);
  swift_bridgeObjectRelease();
  return sub_256A4AC68();
}

id ResourceContainer.__allocating_init(resourceData:resourceType:assetBacked:)()
{
  sub_256A4A3F8();
  uint64_t v0 = sub_256A4A634();
  return ResourceContainer.init(resourceData:resourceType:assetBacked:)(v0, v1, v2, v3, v4);
}

id ResourceContainer.init(resourceData:resourceType:assetBacked:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  return sub_256A3B3E4(a1, a2, a3, a4, a5, &OBJC_IVAR____TtC12ModelCatalog17ResourceContainer_resourceData, &OBJC_IVAR____TtC12ModelCatalog17ResourceContainer_resourceType, &OBJC_IVAR____TtC12ModelCatalog17ResourceContainer_assetBacked);
}

void static ResourceContainer.from(resource:)()
{
}

uint64_t ResourceContainer.toResource()()
{
  swift_getObjectType();
  uint64_t v0 = sub_256A4A650();
  return sub_256A53694(v0, v1);
}

uint64_t static ResourceContainer.supportsSecureCoding.getter()
{
  return byte_269F78AC0;
}

uint64_t static ResourceContainer.supportsSecureCoding.setter(char a1)
{
  uint64_t result = sub_256A4A064();
  byte_269F78AC0 = a1;
  return result;
}

uint64_t (*static ResourceContainer.supportsSecureCoding.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t static ResourceContainer.resourceDataKey.getter()
{
  return sub_256A4A610();
}

uint64_t static ResourceContainer.resourceTypeKey.getter()
{
  return sub_256A4A5EC();
}

Swift::Void __swiftcall ResourceContainer.encode(with:)(NSCoder with)
{
  sub_256A4A7FC();
  uint64_t v3 = v2;
  char v4 = (void *)sub_256B3F3B0();
  sub_256A4A610();
  char v5 = (void *)sub_256B3F690();
  sub_256A4A350();

  uint64_t v6 = (void *)sub_256B3F690();
  sub_256A4A5EC();
  unint64_t v7 = (void *)sub_256B3F690();
  sub_256A4A350();

  objc_msgSend(v3, sel_encodeBool_forKey_, *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC12ModelCatalog17ResourceContainer_assetBacked), sub_256A4A128());
  sub_256A4A7B8();
}

void ResourceContainer.__allocating_init(coder:)()
{
}

void ResourceContainer.init(coder:)()
{
}

void ResourceContainer.description.getter()
{
  sub_256A4A7FC();
  sub_256A4AB04();
  sub_256B3FB70();
  swift_bridgeObjectRelease();
  sub_256A4A59C();
  sub_256A4AAD8(OBJC_IVAR____TtC12ModelCatalog17ResourceContainer_resourceData);
  sub_256B3F360();
  sub_256B3F760();
  swift_bridgeObjectRelease();
  sub_256A46DF8(v0, v1);
  sub_256A4A5B8();
  swift_bridgeObjectRetain();
  sub_256B3F760();
  swift_bridgeObjectRelease();
  sub_256B3F760();
  sub_256B3F760();
  swift_bridgeObjectRelease();
  sub_256B3F760();
  sub_256A4A7B8();
}

id ResourceContainer.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void ResourceContainer.init()()
{
}

uint64_t ResourceBundleContainer.resourceBundleData.getter()
{
  return sub_256A4A370();
}

uint64_t ResourceBundleContainer.resourceBundleType.getter()
{
  return sub_256A4A370();
}

uint64_t ResourceBundleContainer.assetBacked.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC12ModelCatalog23ResourceBundleContainer_assetBacked);
}

uint64_t ResourceBundleContainer.__allocating_init(resourceBundleData:resourceBundleType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_256A3B338(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void))ResourceBundleContainer.init(resourceBundleData:resourceBundleType:assetBacked:));
}

uint64_t sub_256A3B338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, void))
{
  sub_256A4A3F8();
  return a5(v8, v7, v6, v5, 0);
}

id ResourceBundleContainer.__allocating_init(resourceBundleData:resourceBundleType:assetBacked:)()
{
  sub_256A4A3F8();
  uint64_t v0 = sub_256A4A634();
  return ResourceBundleContainer.init(resourceBundleData:resourceBundleType:assetBacked:)(v0, v1, v2, v3, v4);
}

id ResourceBundleContainer.init(resourceBundleData:resourceBundleType:assetBacked:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  return sub_256A3B3E4(a1, a2, a3, a4, a5, &OBJC_IVAR____TtC12ModelCatalog23ResourceBundleContainer_resourceBundleData, &OBJC_IVAR____TtC12ModelCatalog23ResourceBundleContainer_resourceBundleType, &OBJC_IVAR____TtC12ModelCatalog23ResourceBundleContainer_assetBacked);
}

id sub_256A3B3E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void *a6, void *a7, void *a8)
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v18 = &v8[*a6];
  *uint64_t v18 = a1;
  v18[1] = a2;
  uint64_t v19 = &v8[*a7];
  *uint64_t v19 = a3;
  v19[1] = a4;
  v8[*a8] = a5;
  v21.receiver = v8;
  v21.super_class = ObjectType;
  return objc_msgSendSuper2(&v21, sel_init);
}

void static ResourceBundleContainer.from(resourceBundle:)()
{
}

uint64_t ResourceBundleContainer.toResourceBundle()()
{
  swift_getObjectType();
  uint64_t v0 = sub_256A4A650();
  return sub_256A6F4B8(v0, v1);
}

uint64_t static ResourceBundleContainer.supportsSecureCoding.getter()
{
  return byte_269F78AC1;
}

uint64_t static ResourceBundleContainer.supportsSecureCoding.setter(char a1)
{
  uint64_t result = sub_256A4A064();
  byte_269F78AC1 = a1;
  return result;
}

uint64_t (*static ResourceBundleContainer.supportsSecureCoding.modify())()
{
  return j_j__swift_endAccess;
}

unint64_t static ResourceBundleContainer.resourceBundleDataKey.getter()
{
  return sub_256A4A56C();
}

unint64_t static ResourceBundleContainer.resourceBundleTypeKey.getter()
{
  return sub_256A4A56C();
}

Swift::Void __swiftcall ResourceBundleContainer.encode(with:)(NSCoder with)
{
  sub_256A4A7FC();
  uint64_t v3 = v2;
  char v4 = (void *)sub_256B3F3B0();
  uint64_t v5 = (void *)sub_256A4A9FC();
  sub_256A4A350();

  uint64_t v6 = (void *)sub_256B3F690();
  uint64_t v7 = (void *)sub_256A4A9FC();
  sub_256A4A350();

  objc_msgSend(v3, sel_encodeBool_forKey_, *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC12ModelCatalog23ResourceBundleContainer_assetBacked), sub_256A4A128());
  sub_256A4A7B8();
}

void ResourceBundleContainer.__allocating_init(coder:)()
{
}

void ResourceBundleContainer.init(coder:)()
{
}

void sub_256A3B78C()
{
  sub_256A4A6AC();
  uint64_t v2 = v1;
  char v4 = v3;
  uint64_t ObjectType = swift_getObjectType();
  sub_256A49E98(0, (unint64_t *)&unk_26B2B5EE8);
  id v6 = v0;
  uint64_t v7 = (void *)sub_256B3FA50();
  sub_256A49E98(0, &qword_26B2B6470);
  uint64_t v8 = (void *)sub_256B3FA50();
  uint64_t v9 = (void *)sub_256A4A128();
  id v10 = objc_msgSend(v4, sel_decodeBoolForKey_, v9);

  if (!v7)
  {

LABEL_6:
    uint64_t v24 = swift_getObjectType();
    sub_256A4A950(v24);
    goto LABEL_7;
  }
  if (!v8)
  {

    uint64_t v8 = v6;
    goto LABEL_6;
  }
  id v11 = v8;
  id v12 = v7;

  id v13 = v12;
  uint64_t v14 = sub_256B3F3C0();
  uint64_t v16 = v15;

  uint64_t v17 = sub_256B3F6B0();
  uint64_t v18 = (objc_class *)ObjectType;
  uint64_t v19 = v2;
  uint64_t v21 = v20;
  id v22 = objc_allocWithZone(v18);
  v19(v14, v16, v17, v21, v10);

  uint64_t v23 = swift_getObjectType();
  sub_256A4A950(v23);
LABEL_7:
  sub_256A4A554();
}

void ResourceBundleContainer.description.getter()
{
  sub_256A4A7FC();
  sub_256A4AB04();
  sub_256B3FB70();
  swift_bridgeObjectRelease();
  sub_256A4A59C();
  sub_256A4AAD8(OBJC_IVAR____TtC12ModelCatalog23ResourceBundleContainer_resourceBundleData);
  sub_256B3F360();
  sub_256B3F760();
  swift_bridgeObjectRelease();
  sub_256A46DF8(v0, v1);
  sub_256A4A5B8();
  swift_bridgeObjectRetain();
  sub_256B3F760();
  swift_bridgeObjectRelease();
  sub_256B3F760();
  sub_256A4A7B8();
}

void ResourceBundleContainer.init()()
{
}

uint64_t sub_256A3BA8C(uint64_t a1, uint64_t a2, void *a3)
{
  sub_256A46DF8(*(void *)(a1 + *a3), *(void *)(a1 + *a3 + 8));

  return swift_bridgeObjectRelease();
}

uint64_t TagAvailabilityInfo.resourcesReady.getter()
{
  unint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC12ModelCatalog19TagAvailabilityInfo_resourcesReady);
  sub_256A4A02C();
  return *v1;
}

uint64_t TagAvailabilityInfo.resourcesReady.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC12ModelCatalog19TagAvailabilityInfo_resourcesReady);
  uint64_t result = sub_256A4A064();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*TagAvailabilityInfo.resourcesReady.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t TagAvailabilityInfo.enoughStorage.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC12ModelCatalog19TagAvailabilityInfo_enoughStorage);
  sub_256A4A02C();
  return *v1;
}

uint64_t TagAvailabilityInfo.enoughStorage.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC12ModelCatalog19TagAvailabilityInfo_enoughStorage);
  uint64_t result = sub_256A4A064();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*TagAvailabilityInfo.enoughStorage.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t TagAvailabilityInfo.diskSpaceRequired.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12ModelCatalog19TagAvailabilityInfo_diskSpaceRequired;
  sub_256A4A02C();
  return *(void *)v1;
}

uint64_t TagAvailabilityInfo.diskSpaceRequired.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC12ModelCatalog19TagAvailabilityInfo_diskSpaceRequired);
  uint64_t result = sub_256A4A064();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*TagAvailabilityInfo.diskSpaceRequired.modify())()
{
  return j_j__swift_endAccess;
}

id TagAvailabilityInfo.__allocating_init(resourcesReady:enoughStorage:diskSpaceRequired:)()
{
  id v0 = objc_allocWithZone((Class)sub_256A4AB7C());
  return TagAvailabilityInfo.init(resourcesReady:enoughStorage:diskSpaceRequired:)();
}

id TagAvailabilityInfo.init(resourcesReady:enoughStorage:diskSpaceRequired:)()
{
  sub_256A4AB7C();
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  v1[OBJC_IVAR____TtC12ModelCatalog19TagAvailabilityInfo_resourcesReady] = v3;
  v1[OBJC_IVAR____TtC12ModelCatalog19TagAvailabilityInfo_enoughStorage] = v2;
  *(void *)&v1[OBJC_IVAR____TtC12ModelCatalog19TagAvailabilityInfo_diskSpaceRequired] = v0;
  v6.receiver = v1;
  v6.super_class = ObjectType;
  return objc_msgSendSuper2(&v6, sel_init);
}

uint64_t static TagAvailabilityInfo.supportsSecureCoding.getter()
{
  return byte_269F78AC2;
}

uint64_t static TagAvailabilityInfo.supportsSecureCoding.setter(char a1)
{
  uint64_t result = sub_256A4A064();
  byte_269F78AC2 = a1;
  return result;
}

uint64_t (*static TagAvailabilityInfo.supportsSecureCoding.modify())()
{
  return j_j__swift_endAccess;
}

Swift::Void __swiftcall TagAvailabilityInfo.encode(with:)(NSCoder with)
{
  sub_256A4A04C();
  char v3 = (void *)sub_256A4A2F4();
  sub_256A4A85C((uint64_t)v3, sel_encodeBool_forKey_);

  sub_256A4A04C();
  char v4 = (void *)sub_256A4A084();
  sub_256A4A85C((uint64_t)v4, sel_encodeBool_forKey_);

  uint64_t v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC12ModelCatalog19TagAvailabilityInfo_diskSpaceRequired);
  sub_256A4A04C();
  uint64_t v6 = *v5;
  uint64_t v7 = (void *)sub_256A4A2F4();
  [(objc_class *)with.super.isa encodeInt64:v6 forKey:v7];
}

void TagAvailabilityInfo.__allocating_init(coder:)()
{
}

void TagAvailabilityInfo.init(coder:)()
{
  sub_256A4A458();
  uint64_t v1 = v0;
  char v3 = v2;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  id v5 = v1;
  uint64_t v6 = (void *)sub_256A4A2F4();
  objc_msgSend(v3, sel_decodeBoolForKey_, v6);

  uint64_t v7 = (void *)sub_256A4A084();
  objc_msgSend(v3, sel_decodeBoolForKey_, v7);

  uint64_t v8 = (void *)sub_256A4A2F4();
  objc_msgSend(v3, sel_decodeInt64ForKey_, v8);

  id v9 = objc_allocWithZone(ObjectType);
  TagAvailabilityInfo.init(resourcesReady:enoughStorage:diskSpaceRequired:)();

  uint64_t v10 = swift_getObjectType();
  sub_256A4A930(v10);
  sub_256A4A2C0();
}

uint64_t TagAvailabilityInfo.description.getter()
{
  return 0;
}

void TagAvailabilityInfo.init()()
{
}

uint64_t SiriResourceAvailabilityInfo.enoughStorage.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC12ModelCatalog28SiriResourceAvailabilityInfo_enoughStorage);
  sub_256A4A02C();
  return *v1;
}

uint64_t SiriResourceAvailabilityInfo.enoughStorage.setter(char a1)
{
  char v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC12ModelCatalog28SiriResourceAvailabilityInfo_enoughStorage);
  uint64_t result = sub_256A4A064();
  *char v3 = a1;
  return result;
}

uint64_t (*SiriResourceAvailabilityInfo.enoughStorage.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t SiriResourceAvailabilityInfo.diskSpaceRequired.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12ModelCatalog28SiriResourceAvailabilityInfo_diskSpaceRequired;
  sub_256A4A02C();
  return *(void *)v1;
}

uint64_t SiriResourceAvailabilityInfo.diskSpaceRequired.setter(uint64_t a1)
{
  char v3 = (void *)(v1 + OBJC_IVAR____TtC12ModelCatalog28SiriResourceAvailabilityInfo_diskSpaceRequired);
  uint64_t result = sub_256A4A064();
  *char v3 = a1;
  return result;
}

uint64_t (*SiriResourceAvailabilityInfo.diskSpaceRequired.modify())()
{
  return j_j__swift_endAccess;
}

id SiriResourceAvailabilityInfo.__allocating_init(enoughStorage:diskSpaceRequired:)(char a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return SiriResourceAvailabilityInfo.init(enoughStorage:diskSpaceRequired:)(a1, a2);
}

id SiriResourceAvailabilityInfo.init(enoughStorage:diskSpaceRequired:)(char a1, uint64_t a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  v2[OBJC_IVAR____TtC12ModelCatalog28SiriResourceAvailabilityInfo_enoughStorage] = a1;
  *(void *)&v2[OBJC_IVAR____TtC12ModelCatalog28SiriResourceAvailabilityInfo_diskSpaceRequired] = a2;
  v7.receiver = v2;
  v7.super_class = ObjectType;
  return objc_msgSendSuper2(&v7, sel_init);
}

uint64_t static SiriResourceAvailabilityInfo.supportsSecureCoding.getter()
{
  return byte_269F78AC3;
}

uint64_t static SiriResourceAvailabilityInfo.supportsSecureCoding.setter(char a1)
{
  uint64_t result = sub_256A4A064();
  byte_269F78AC3 = a1;
  return result;
}

uint64_t (*static SiriResourceAvailabilityInfo.supportsSecureCoding.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t static SiriResourceAvailabilityInfo.enoughStorageKey.getter()
{
  return 0x74536867756F6E65;
}

unint64_t static SiriResourceAvailabilityInfo.diskSpaceRequiredKey.getter()
{
  return 0xD000000000000014;
}

Swift::Void __swiftcall SiriResourceAvailabilityInfo.encode(with:)(NSCoder with)
{
  sub_256A4A04C();
  char v3 = (void *)sub_256A4A084();
  sub_256A4A85C((uint64_t)v3, sel_encodeBool_forKey_);

  char v4 = (uint64_t *)(v1 + OBJC_IVAR____TtC12ModelCatalog28SiriResourceAvailabilityInfo_diskSpaceRequired);
  sub_256A4A04C();
  uint64_t v5 = *v4;
  uint64_t v6 = (void *)sub_256A4A9DC();
  [(objc_class *)with.super.isa encodeInt64:v5 forKey:v6];
}

id SiriResourceAvailabilityInfo.__allocating_init(coder:)()
{
  sub_256A4A9C4();
  uint64_t v0 = (void *)sub_256A4AC44();
  return SiriResourceAvailabilityInfo.init(coder:)(v0);
}

id SiriResourceAvailabilityInfo.init(coder:)(void *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  id v4 = v1;
  uint64_t v5 = (void *)sub_256A4A084();
  char v6 = objc_msgSend(a1, sel_decodeBoolForKey_, v5);

  objc_super v7 = (void *)sub_256A4A9DC();
  id v8 = objc_msgSend(a1, sel_decodeInt64ForKey_, v7);

  id v9 = objc_allocWithZone(ObjectType);
  id v10 = SiriResourceAvailabilityInfo.init(enoughStorage:diskSpaceRequired:)(v6, (uint64_t)v8);

  uint64_t v11 = swift_getObjectType();
  sub_256A4A930(v11);
  return v10;
}

id sub_256A3C8EC(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4 = a1;
  a3();

  uint64_t v5 = (void *)sub_256B3F690();
  swift_bridgeObjectRelease();

  return v5;
}

unint64_t SiriResourceAvailabilityInfo.description.getter()
{
  return 0xD000000000000011;
}

void SiriResourceAvailabilityInfo.init()()
{
}

id _s12ModelCatalog17ResourceContainerCfD_0()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void *sub_256A3CB04()
{
  qword_26B2B63E8 = (uint64_t)&unk_270619EB0;
  return &unk_270619EB0;
}

id static CatalogService.interface.getter()
{
  if (qword_26B2B63F0 != -1) {
    swift_once();
  }
  sub_256A4A02C();
  uint64_t v0 = (void *)qword_26B2B63E8;

  return v0;
}

void static CatalogService.interface.setter(uint64_t a1)
{
  if (qword_26B2B63F0 != -1) {
    swift_once();
  }
  sub_256A4A064();
  objc_super v2 = (void *)qword_26B2B63E8;
  qword_26B2B63E8 = a1;
}

uint64_t (*static CatalogService.interface.modify())()
{
  if (qword_26B2B63F0 != -1) {
    swift_once();
  }
  sub_256A4A000();
  return j_j__swift_endAccess;
}

uint64_t static CatalogService.serviceName.getter()
{
  return sub_256A4A588(&qword_269F78AD0);
}

uint64_t static CatalogService.serviceName.setter()
{
  return sub_256A4A580();
}

uint64_t (*static CatalogService.serviceName.modify())()
{
  return j__swift_endAccess;
}

uint64_t static CatalogService.entitlementName.getter()
{
  return sub_256A4A588(qword_269F78AE0);
}

uint64_t sub_256A3CCE0(uint64_t *a1)
{
  sub_256A4A04C();
  uint64_t v2 = *a1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t static CatalogService.entitlementName.setter()
{
  return sub_256A4A580();
}

uint64_t sub_256A3CD38()
{
  sub_256A4AC10();
  swift_beginAccess();
  *uint64_t v1 = v3;
  void *v0 = v2;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CatalogService.entitlementName.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_256A3CDD4()
{
  uint64_t result = sub_256A3CF68((uint64_t)&unk_2705FF030);
  qword_26B2B2FF0 = result;
  return result;
}

uint64_t sub_256A3CDFC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_256A49530();
  uint64_t v10 = sub_256B3F990();
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    id v4 = (unsigned __int8 *)(a1 + 48);
    do
    {
      int v5 = *v4;
      v4 += 24;
      swift_bridgeObjectRetain();
      sub_256A4AC24();
      sub_256A3917C(v6, v7, v8, v5);
      swift_bridgeObjectRelease();
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v10;
  }
  else
  {
    sub_256A4AC50();
  }
  return v2;
}

uint64_t sub_256A3CEB4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_256A4957C();
  uint64_t v8 = sub_256B3F990();
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = 32;
    do
    {
      long long v5 = *(_OWORD *)(a1 + v4 + 16);
      v9[0] = *(_OWORD *)(a1 + v4);
      v9[1] = v5;
      int v10 = *(_DWORD *)(a1 + v4 + 32);
      sub_256A3A5C0((uint64_t)v9);
      sub_256A39390((uint64_t)&v7, (uint64_t)v9);
      swift_bridgeObjectRelease();
      v4 += 40;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v8;
  }
  else
  {
    sub_256A4AC50();
  }
  return v2;
}

uint64_t sub_256A3CF68(uint64_t a1)
{
  uint64_t v9 = sub_256B3F990();
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_256A4AC24();
      sub_256A39684(v5, v6, v7);
      swift_bridgeObjectRelease();
      v4 += 16;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v9;
  }
  else
  {
    sub_256A4AC50();
  }
  return v1;
}

uint64_t sub_256A3D010(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_256A46F0C();
  uint64_t v8 = sub_256B3F990();
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      uint64_t v5 = a1 + i;
      sub_256A3981C(&v7, *(unsigned char *)(v5 + 32));
    }
    swift_bridgeObjectRelease();
    return v8;
  }
  else
  {
    sub_256A4AC50();
  }
  return v2;
}

uint64_t static CatalogService.otherAcceptedEntitlementNames.getter()
{
  return sub_256A3D8EC(&qword_26B2B2FF8);
}

uint64_t static CatalogService.otherAcceptedEntitlementNames.setter(uint64_t a1)
{
  return sub_256A3D95C(a1, &qword_26B2B2FF8, &qword_26B2B2FF0);
}

uint64_t (*static CatalogService.otherAcceptedEntitlementNames.modify())()
{
  if (qword_26B2B2FF8 != -1) {
    swift_once();
  }
  sub_256A4A000();
  return j_j__swift_endAccess;
}

uint64_t sub_256A3D164()
{
  sub_256A39D2C((uint64_t *)&unk_26B2B6460);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_256B57090;
  *(void *)(v0 + 32) = sel_resourceContainersWith_;
  *(void *)(v0 + 40) = 0;
  sub_256A39D2C(&qword_26B2B6358);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_256B570A0;
  uint64_t v2 = sub_256A49E98(0, &qword_26B2B6420);
  uint64_t v3 = sub_256A39D2C((uint64_t *)&unk_26B2B6428);
  *(void *)(v1 + 56) = v3;
  *(void *)(v1 + 32) = v2;
  uint64_t v4 = type metadata accessor for ResourceContainer();
  *(void *)(v1 + 88) = sub_256A39D2C((uint64_t *)&unk_26B2B6400);
  *(void *)(v1 + 64) = v4;
  sub_256A49E98(0, &qword_26B2B6418);
  uint64_t v5 = (void *)MEMORY[0x25A2AB2B0](v1);
  sub_256A49E98(0, &qword_26B2B6440);
  sub_256A49E44();
  uint64_t v6 = sub_256A4AAC0((uint64_t)v5);

  uint64_t v7 = sub_256A3D4A4(v6);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 48) = v7;
  *(void *)(v0 + 56) = sel_resourceBundleContainersWith_;
  *(void *)(v0 + 64) = 0;
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_256B570A0;
  *(void *)(v8 + 56) = v3;
  *(void *)(v8 + 32) = v2;
  uint64_t v9 = type metadata accessor for ResourceBundleContainer();
  *(void *)(v8 + 88) = sub_256A39D2C(&qword_26B2B6410);
  *(void *)(v8 + 64) = v9;
  int v10 = (void *)MEMORY[0x25A2AB2B0](v8);
  uint64_t v11 = sub_256A4AAC0((uint64_t)v10);

  uint64_t v12 = sub_256A3D4A4(v11);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 72) = v12;
  *(void *)(v0 + 80) = sel_resourceAvailabilityBy_reply_;
  *(void *)(v0 + 88) = 0;
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_256B570B0;
  uint64_t v14 = sub_256A49E98(0, (unint64_t *)&unk_26B2B65B8);
  *(void *)(v13 + 56) = sub_256A39D2C(&qword_26B2B6580);
  *(void *)(v13 + 32) = v14;
  uint64_t v15 = sub_256A49E98(0, &qword_26B2B6470);
  *(void *)(v13 + 88) = sub_256A39D2C(&qword_26B2B6588);
  *(void *)(v13 + 64) = v15;
  uint64_t v16 = type metadata accessor for TagAvailabilityInfo();
  *(void *)(v13 + 120) = sub_256A39D2C(&qword_26B2B6570);
  *(void *)(v13 + 96) = v16;
  uint64_t v17 = (void *)MEMORY[0x25A2AB2B0](v13);
  uint64_t v18 = sub_256A4AAC0((uint64_t)v17);

  uint64_t v19 = sub_256A3D4A4(v18);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 96) = v19;
  *(void *)(v0 + 104) = sel_siriResourceAvailabilityWith_;
  *(void *)(v0 + 112) = 0;
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_256B57080;
  uint64_t v21 = type metadata accessor for SiriResourceAvailabilityInfo();
  *(void *)(v20 + 56) = sub_256A39D2C(&qword_26B2B6578);
  *(void *)(v20 + 32) = v21;
  id v22 = (void *)MEMORY[0x25A2AB2B0](v20);
  uint64_t v23 = sub_256A4AAC0((uint64_t)v22);

  uint64_t v24 = sub_256A3D4A4(v23);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v0 + 120) = v24;
  off_26B2B63C8 = (_UNKNOWN *)v0;
  return result;
}

uint64_t sub_256A3D4A4(uint64_t a1)
{
  uint64_t v1 = a1;
  unint64_t v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (sub_256B3FB10()) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v3 = MEMORY[0x263F8EE88];
    if (v2) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  if (!*(void *)(a1 + 16)) {
    goto LABEL_6;
  }
LABEL_3:
  sub_256A39D2C(&qword_26B2B6450);
  uint64_t v3 = sub_256B3FB60();
  if (v2)
  {
LABEL_4:
    swift_bridgeObjectRetain();
    swift_retain();
    sub_256B3FB00();
    sub_256A49E98(0, &qword_26B2B6440);
    sub_256A49E44();
    uint64_t result = sub_256B3F9A0();
    uint64_t v1 = v34;
    uint64_t v30 = v35;
    uint64_t v5 = v36;
    int64_t v6 = v37;
    unint64_t v7 = v38;
    goto LABEL_11;
  }
LABEL_7:
  uint64_t v8 = -1 << *(unsigned char *)(v1 + 32);
  uint64_t v30 = v1 + 56;
  uint64_t v5 = ~v8;
  uint64_t v9 = -v8;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v7 = v10 & *(void *)(v1 + 56);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v6 = 0;
LABEL_11:
  int64_t v29 = (unint64_t)(v5 + 64) >> 6;
  uint64_t v11 = v3 + 56;
  if (v1 < 0) {
    goto LABEL_14;
  }
LABEL_12:
  if (v7)
  {
    unint64_t v12 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v13 = v12 | (v6 << 6);
    goto LABEL_32;
  }
  int64_t v15 = v6 + 1;
  if (!__OFADD__(v6, 1))
  {
    if (v15 < v29)
    {
      unint64_t v16 = *(void *)(v30 + 8 * v15);
      int64_t v17 = v6 + 1;
      if (v16) {
        goto LABEL_31;
      }
      int64_t v17 = v6 + 2;
      if (v6 + 2 < v29)
      {
        unint64_t v16 = *(void *)(v30 + 8 * v17);
        if (v16) {
          goto LABEL_31;
        }
        int64_t v17 = v6 + 3;
        if (v6 + 3 < v29)
        {
          unint64_t v16 = *(void *)(v30 + 8 * v17);
          if (v16) {
            goto LABEL_31;
          }
          int64_t v17 = v6 + 4;
          if (v6 + 4 < v29)
          {
            unint64_t v16 = *(void *)(v30 + 8 * v17);
            if (v16) {
              goto LABEL_31;
            }
            int64_t v17 = v6 + 5;
            if (v6 + 5 < v29)
            {
              unint64_t v16 = *(void *)(v30 + 8 * v17);
              if (!v16)
              {
                int64_t v18 = v6 + 6;
                while (v18 < v29)
                {
                  unint64_t v16 = *(void *)(v30 + 8 * v18++);
                  if (v16)
                  {
                    int64_t v17 = v18 - 1;
                    goto LABEL_31;
                  }
                }
                goto LABEL_44;
              }
LABEL_31:
              unint64_t v7 = (v16 - 1) & v16;
              unint64_t v13 = __clz(__rbit64(v16)) + (v17 << 6);
              int64_t v6 = v17;
LABEL_32:
              id v19 = *(id *)(*(void *)(v1 + 48) + 8 * v13);
              while (1)
              {
                sub_256A49E98(0, &qword_26B2B6440);
                swift_dynamicCast();
                uint64_t result = sub_256B3FB30();
                uint64_t v20 = -1 << *(unsigned char *)(v3 + 32);
                unint64_t v21 = result & ~v20;
                unint64_t v22 = v21 >> 6;
                if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) == 0) {
                  break;
                }
                unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_42:
                *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
                uint64_t v28 = *(void *)(v3 + 48) + 40 * v23;
                *(_OWORD *)uint64_t v28 = v31;
                *(_OWORD *)(v28 + 16) = v32;
                *(void *)(v28 + 32) = v33;
                ++*(void *)(v3 + 16);
                if ((v1 & 0x8000000000000000) == 0) {
                  goto LABEL_12;
                }
LABEL_14:
                uint64_t v14 = sub_256B3FB20();
                if (!v14) {
                  goto LABEL_44;
                }
                *(void *)&long long v31 = v14;
                sub_256A49E98(0, &qword_26B2B6440);
                swift_dynamicCast();
              }
              char v24 = 0;
              unint64_t v25 = (unint64_t)(63 - v20) >> 6;
              while (++v22 != v25 || (v24 & 1) == 0)
              {
                BOOL v26 = v22 == v25;
                if (v22 == v25) {
                  unint64_t v22 = 0;
                }
                v24 |= v26;
                uint64_t v27 = *(void *)(v11 + 8 * v22);
                if (v27 != -1)
                {
                  unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
                  goto LABEL_42;
                }
              }
              __break(1u);
              goto LABEL_46;
            }
          }
        }
      }
    }
LABEL_44:
    swift_release();
    sub_256A49ED4();
    return v3;
  }
LABEL_46:
  __break(1u);
  return result;
}

uint64_t static CatalogService.selectorClasses.getter()
{
  return sub_256A3D8EC(&qword_26B2B63C0);
}

uint64_t sub_256A3D8EC(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }
  sub_256A4A02C();
  return swift_bridgeObjectRetain();
}

uint64_t static CatalogService.selectorClasses.setter(uint64_t a1)
{
  return sub_256A3D95C(a1, &qword_26B2B63C0, &off_26B2B63C8);
}

uint64_t sub_256A3D95C(uint64_t a1, void *a2, void *a3)
{
  if (*a2 != -1) {
    swift_once();
  }
  swift_beginAccess();
  *a3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CatalogService.selectorClasses.modify())()
{
  if (qword_26B2B63C0 != -1) {
    swift_once();
  }
  sub_256A4A000();
  return j_j__swift_endAccess;
}

uint64_t sub_256A3DA3C()
{
  uint64_t v0 = sub_256B3F4A0();
  sub_256A49DE0(v0, qword_26B2B63D0);
  uint64_t v1 = sub_256A4A370();
  sub_256A46E9C(v1, v2);
  return sub_256B3F490();
}

uint64_t static CatalogService.logger.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_26B2B6348 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_256B3F4A0();
  uint64_t v3 = sub_256A46E9C(v2, (uint64_t)qword_26B2B63D0);
  sub_256A4A04C();
  sub_256A4A838();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(a1, v3, v2);
}

uint64_t static CatalogService.logger.setter(uint64_t a1)
{
  if (qword_26B2B6348 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_256B3F4A0();
  uint64_t v3 = sub_256A46E9C(v2, (uint64_t)qword_26B2B63D0);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 24))(v3, a1, v2);
  swift_endAccess();
  uint64_t v4 = sub_256A4A370();
  return v5(v4);
}

uint64_t (*static CatalogService.logger.modify())()
{
  if (qword_26B2B6348 != -1) {
    swift_once();
  }
  uint64_t v0 = sub_256B3F4A0();
  sub_256A46E9C(v0, (uint64_t)qword_26B2B63D0);
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t _s12ModelCatalog0B8ResourcePAAE11assetBackedSbvg_0()
{
  return 0;
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CatalogClientProtocol.isGenerativeExperiencesEssentialResourcesReady()()
{
  return 0;
}

uint64_t sub_256A3DCE8()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_256A49F58;
  return CatalogClientProtocol.generativeExperiencesEssentialResourcesReady()();
}

uint64_t CatalogClientProtocol.generativeExperiencesEssentialResourcesReady()()
{
  return sub_256A46ED4(*(uint64_t (**)(uint64_t))(v0 + 8), v0, 0);
}

uint64_t sub_256A3DDB0()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_256A49F58;
  return CatalogClientProtocol.generativeExperiencesEssentialResourcesReady()();
}

uint64_t sub_256A3DE3C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_256A49F5C;
  return CatalogClientProtocol.resourceAvailability(by:)();
}

uint64_t CatalogClientProtocol.resourceAvailability(by:)()
{
  return sub_256A4A0B4((uint64_t)sub_256A3DEDC);
}

uint64_t sub_256A3DEDC()
{
  sub_256A4A1FC();
  type metadata accessor for TagAvailabilityInfo();
  sub_256A46F0C();
  uint64_t v1 = sub_256B3F600();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

id sub_256A3DF5C()
{
  return CatalogClientProtocol.siriResourceAvailability()();
}

id CatalogClientProtocol.siriResourceAvailability()()
{
  id v0 = objc_allocWithZone((Class)type metadata accessor for SiriResourceAvailabilityInfo());
  return SiriResourceAvailabilityInfo.init(enoughStorage:diskSpaceRequired:)(1, 0);
}

uint64_t sub_256A3DFB0()
{
  return CatalogClientProtocol.requestDownloadForSettings()();
}

uint64_t CatalogClientProtocol.requestDownloadForSettings()()
{
  sub_256A39D2C((uint64_t *)&unk_269F78B98);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v1);
  sub_256A4A7CC();
  (*(void (**)(uint64_t, void))(v2 + 104))(v0, *MEMORY[0x263F8F580]);
  return sub_256B3F950();
}

uint64_t sub_256A3E090()
{
  return sub_256B3F940();
}

void static CatalogClient.generativeExperienceEssentialResourcesStatus()()
{
  sub_256A4A6AC();
  uint64_t v2 = v1;
  id v3 = objc_msgSend(self, sel_sharedManager);
  unsigned __int8 v4 = objc_msgSend(v3, sel_assetDeliveryReady);

  if (v4)
  {
    type metadata accessor for CatalogIndex();
    uint64_t v5 = sub_256B3F300();
    sub_256A49FB8();
    uint64_t v7 = v6;
    MEMORY[0x270FA5388](v8);
    sub_256A4A7CC();
    sub_256B3F240();
    sub_256A49FB8();
    MEMORY[0x270FA5388](v9);
    sub_256A4A500();
    (*(void (**)(uint64_t, void))(v12 + 104))(v11 - v10, *MEMORY[0x263F06E28]);
    uint64_t v13 = sub_256A39D2C(&qword_26B2B6340);
    uint64_t v14 = sub_256A4AB38(v13);
    MEMORY[0x270FA5388](v14);
    sub_256A4A7E4();
    sub_256A4AB18();
    sub_256A46F7C(v15, v16, v17, v5);
    sub_256A4A6DC();
    sub_256B3F2D0();
    uint64_t v18 = static CatalogIndex.essentialResources(sideLoadUrl:)(v0);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0, v5);
    uint64_t v19 = swift_bridgeObjectRetain();
    AssetLock.init(resources:)(v19, &v39);
    uint64_t v26 = v39;
    uint64_t v27 = *(void *)(v18 + 16);
    if (v27)
    {
      uint64_t v28 = (void *)(v18 + 32);
      swift_bridgeObjectRetain();
      while (!sub_256B06F80(v28, v26))
      {
        v28 += 5;
        if (!--v27)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_14;
        }
      }
      swift_bridgeObjectRelease_n();
      if (qword_26B2B6590 != -1) {
        swift_once();
      }
      uint64_t v34 = sub_256B3F4A0();
      sub_256A46E9C(v34, (uint64_t)qword_26B2C4018);
      uint64_t v35 = (void *)sub_256B3F470();
      os_log_type_t v36 = sub_256B3F9F0();
      if (sub_256A4A4D0(v36))
      {
        *(_WORD *)sub_256A4AA84() = 0;
        sub_256A4ABD0(&dword_256A36000, v37, v38, "essential resources not present");
        sub_256A4A158();
      }

      swift_release();
      char v23 = 1;
    }
    else
    {
      swift_bridgeObjectRelease();
LABEL_14:
      if (qword_26B2B6590 != -1) {
        swift_once();
      }
      uint64_t v29 = sub_256B3F4A0();
      sub_256A46E9C(v29, (uint64_t)qword_26B2C4018);
      uint64_t v30 = (void *)sub_256B3F470();
      os_log_type_t v31 = sub_256B3F9F0();
      if (sub_256A4A4D0(v31))
      {
        *(_WORD *)sub_256A4AA84() = 0;
        sub_256A4ABD0(&dword_256A36000, v32, v33, "essential resources available");
        sub_256A4A158();
      }

      swift_release();
      char v23 = 0;
    }
  }
  else
  {
    if (qword_26B2B6590 != -1) {
      swift_once();
    }
    uint64_t v20 = sub_256B3F4A0();
    sub_256A46E9C(v20, (uint64_t)qword_26B2C4018);
    unint64_t v21 = (void *)sub_256B3F470();
    os_log_type_t v22 = sub_256B3F9F0();
    if (sub_256A4A4D0(v22))
    {
      char v23 = 2;
      *(_WORD *)sub_256A4AA84() = 0;
      sub_256A4ABB0(&dword_256A36000, v24, v25, "essential resources still initializing");
      sub_256A4A158();
    }
    else
    {

      char v23 = 2;
    }
  }
  char *v2 = v23;
  sub_256A4A554();
}

void *CatalogClient.init()()
{
  uint64_t v1 = v0;
  v0[2] = 0;
  if (qword_26B2B6590 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_256B3F4A0();
  sub_256A46E9C(v2, (uint64_t)qword_26B2C4018);
  id v3 = (void *)sub_256B3F470();
  os_log_type_t v4 = sub_256B3F9F0();
  if (sub_256A4A4D0(v4))
  {
    *(_WORD *)sub_256A4AA84() = 0;
    sub_256A4ABB0(&dword_256A36000, v5, v6, "Initializing modelcatalogd service");
    sub_256A4A158();
  }

  type metadata accessor for CatalogIndex();
  v1[3] = CatalogIndex.__allocating_init()();
  uint64_t v7 = type metadata accessor for SubscriptionManagerProvider();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = objc_msgSend(self, sel_sharedManager);
  v1[7] = v7;
  v1[8] = &protocol witness table for SubscriptionManagerProvider;
  v1[4] = v8;
  sub_256A39D2C(&qword_26B2B61E0);
  uint64_t v9 = (void *)swift_allocObject();
  v9[3] = 2;
  v9[5] = 0;
  swift_unknownObjectWeakInit();
  sub_256A39D2C(&qword_26B2B61F8);
  uint64_t v10 = swift_allocObject();
  *(_DWORD *)(v10 + 24) = 0;
  *(void *)(v10 + 16) = 0;
  _OWORD v9[2] = v10;
  v9[5] = &protocol witness table for CatalogClient;
  swift_unknownObjectWeakAssign();
  v1[2] = v9;
  swift_release();
  return v1;
}

uint64_t sub_256A3E7E8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

void sub_256A3E840(unsigned char *a1)
{
}

uint64_t sub_256A3E86C(uint64_t a1, uint64_t a2)
{
  return sub_256A40A84(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t))sub_256B27E18);
}

uint64_t sub_256A3E898(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t *))
{
  uint64_t v4 = a1;
  return a3(&v4);
}

void sub_256A3E8D0()
{
  sub_256A4A7FC();
  uint64_t v1 = v0;
  id v3 = v2;
  uint64_t v5 = *(void (**)(void *, void *))(v4 + 32);
  swift_retain();
  v3;
  id v6 = v1;
  v5(v3, v1);
  swift_release();

  sub_256A4A7B8();
}

void sub_256A3E954(unsigned char *a1)
{
}

void sub_256A3E980(unsigned char *a1, uint64_t (*a2)(uint64_t, unint64_t))
{
  uint64_t v4 = 0xD000000000000016;
  unint64_t v5 = 0x8000000256B46CA0;
  id v6 = a2;
  switch(*a1)
  {
    case 1:
      sub_256A4A69C();
      unint64_t v5 = 0x8000000256B46CA0 & 0xFFFFFFFFFFFFLL | 0xEF31000000000000;
      goto LABEL_5;
    case 2:
      sub_256A4A69C();
      unint64_t v5 = 0x8000000256B46CA0 & 0xFFFFFFFFFFFFLL | 0xEF32000000000000;
      goto LABEL_5;
    case 3:
      sub_256A4A69C();
      unint64_t v5 = 0x8000000256B46CA0 & 0xFFFFFFFFFFFFLL | 0xEF33000000000000;
LABEL_5:
      uint64_t v4 = 0x6C5F6D6C65646F63;
      break;
    case 4:
      unint64_t v5 = 0xED00007974656661;
      goto LABEL_10;
    case 5:
      sub_256A4A668();
      unint64_t v5 = 0x8000000256B46CA0 & 0xFFFFFFFFFFFFLL | 0xEF31000000000000;
      goto LABEL_10;
    case 6:
      sub_256A4A668();
      unint64_t v5 = 0x8000000256B46CA0 & 0xFFFFFFFFFFFFLL | 0xEF32000000000000;
      goto LABEL_10;
    case 7:
      sub_256A4A668();
      unint64_t v5 = 0x8000000256B46CA0 & 0xFFFFFFFFFFFFLL | 0xEF33000000000000;
LABEL_10:
      uint64_t v4 = sub_256A4A9B0();
      break;
    case 8:
      uint64_t v7 = "generative-experiences";
      goto LABEL_14;
    case 9:
      uint64_t v4 = 0xD000000000000015;
      uint64_t v7 = "handwriting-synthesis";
      goto LABEL_14;
    case 0xA:
      uint64_t v4 = 0xD000000000000014;
      uint64_t v7 = "use-case-disablement";
LABEL_14:
      unint64_t v5 = (unint64_t)(v7 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  uint64_t v8 = (void *)v6(v4, v5);
  swift_bridgeObjectRelease();
  if (!v2) {
}
  }

uint64_t sub_256A3EADC(uint64_t a1, uint64_t a2)
{
  return sub_256A40A84(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t))sub_256B289CC);
}

uint64_t sub_256A3EB08(uint64_t a1, uint64_t a2)
{
  return sub_256A40A84(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t))sub_256B29580);
}

uint64_t sub_256A3EB34(uint64_t a1, uint64_t a2)
{
  return sub_256A40A84(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t))sub_256B2A134);
}

void sub_256A3EB60(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000028 && a2 == 0x8000000256B473A0
    || (sub_256A4AA1C(), (sub_256B3FEA0() & 1) != 0)
    || a1 == 0xD000000000000023 && a2 == 0x8000000256B473D0
    || (sub_256A4AA1C(), (sub_256B3FEA0() & 1) != 0))
  {
    sub_256A4A6DC();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = a2;
  }
  uint64_t v7 = sub_256A3EC68(v5, v6);
  if (!v2)
  {
    uint64_t v8 = (void *)v7;
    ResourceContainer.toResource()();
  }
}

uint64_t sub_256A3EC68(uint64_t a1, uint64_t a2)
{
  return sub_256A40A84(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t))sub_256B2F678);
}

void sub_256A3EC94(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_256A3ECE4(a1, a2);
  if (!v2)
  {
    uint64_t v4 = (void *)v3;
    ResourceBundleContainer.toResourceBundle()();
  }
}

uint64_t sub_256A3ECE4(uint64_t a1, uint64_t a2)
{
  return sub_256A40A84(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t))sub_256B3022C);
}

void sub_256A3ED10()
{
  sub_256A4A878();
  unint64_t v1 = sub_256A3F3D4();
  if (!v0)
  {
    unint64_t v2 = v1;
    uint64_t v20 = MEMORY[0x263F8EE78];
    if (v1 >> 62) {
      goto LABEL_20;
    }
    uint64_t v3 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v3; uint64_t v3 = sub_256B3FC80())
    {
      unint64_t v15 = v2;
      unint64_t v16 = v2 & 0xC000000000000001;
      uint64_t v4 = 4;
      while (1)
      {
        id v5 = v16 ? (id)MEMORY[0x25A2AB400](v4 - 4, v2) : *(id *)(v2 + 8 * v4);
        uint64_t v6 = v5;
        uint64_t v7 = v4 - 3;
        if (__OFADD__(v4 - 4, 1)) {
          break;
        }
        ResourceContainer.toResource()();

        if (v18)
        {
          sub_256A3A540(&v17, (uint64_t)v19);
          sub_256A3A540(v19, (uint64_t)&v17);
          uint64_t v8 = v20;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_256A4A81C();
            sub_256B07A30();
            uint64_t v8 = v13;
            uint64_t v20 = v13;
          }
          if (*(void *)(v8 + 16) >= *(void *)(v8 + 24) >> 1)
          {
            sub_256B07A30();
            uint64_t v20 = v14;
          }
          uint64_t v9 = sub_256A39E04((uint64_t)&v17, v18);
          MEMORY[0x270FA5388](v9);
          sub_256A4A500();
          (*(void (**)(uint64_t))(v12 + 16))(v11 - v10);
          sub_256A47FB0();
          sub_256A39DB4((uint64_t)&v17);
          unint64_t v2 = v15;
        }
        else
        {
          sub_256A498E4((uint64_t)&v17, (uint64_t *)&unk_26B2B5D90);
        }
        ++v4;
        if (v7 == v3) {
          goto LABEL_18;
        }
      }
      __break(1u);
LABEL_20:
      sub_256A4ABF0();
    }
LABEL_18:
    sub_256A4A71C();
  }
  sub_256A4A890();
}

uint64_t sub_256A3EF8C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = a1 + 32;
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
    uint64_t v6 = MEMORY[0x263F8EE78];
    uint64_t v37 = v3;
    uint64_t v38 = a2;
    uint64_t v39 = v4;
    do
    {
      sub_256A4819C(v4 + 40 * v5, (uint64_t)v46);
      sub_256A39D2C(&qword_26B2B5D80);
      sub_256A39D2C(&qword_26B2B54E8);
      if (swift_dynamicCast())
      {
        uint64_t v41 = v5;
        sub_256A3A540(&v43, (uint64_t)v47);
        uint64_t v7 = v48;
        uint64_t v8 = v49;
        sub_256A39D70(v47, v48);
        uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)(v8 + 8) + 72))(v7);
        sub_256A46F0C();
        uint64_t v10 = sub_256B3F990();
        uint64_t v50 = *(void *)(v9 + 16);
        if (v50)
        {
          uint64_t v40 = v6;
          uint64_t v11 = 0;
          uint64_t v42 = v9 + 32;
LABEL_6:
          while (2)
          {
            char v12 = *(unsigned char *)(v42 + v11++);
            sub_256B3FF40();
            LOBYTE(v43) = v12;
            Tag.rawValue.getter();
            swift_bridgeObjectRetain();
            sub_256B3F740();
            swift_bridgeObjectRelease();
            uint64_t v13 = sub_256B3FF70();
            uint64_t v14 = ~(-1 << *(unsigned char *)(v10 + 32));
            for (unint64_t i = v13 & v14;
                  ((*(void *)(v10 + 56 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0;
                  unint64_t i = (i + 1) & v14)
            {
              LOBYTE(v46[0]) = *(unsigned char *)(*(void *)(v10 + 48) + i);
              LOBYTE(v43) = v12;
              unint64_t v16 = Tag.rawValue.getter();
              uint64_t v18 = v17;
              if (v16 == Tag.rawValue.getter() && v18 == v19)
              {
                swift_bridgeObjectRelease_n();
LABEL_15:
                swift_bridgeObjectRelease();
                if (v11 != v50) {
                  goto LABEL_6;
                }
                goto LABEL_18;
              }
              char v21 = sub_256B3FEA0();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (v21) {
                goto LABEL_15;
              }
            }
            swift_bridgeObjectRelease();
            swift_isUniquelyReferenced_nonNull_native();
            v46[0] = v10;
            sub_256B09F7C(v12, i);
            uint64_t v10 = v46[0];
            swift_bridgeObjectRelease();
            if (v11 != v50) {
              continue;
            }
            break;
          }
LABEL_18:
          swift_bridgeObjectRelease();
          uint64_t v3 = v37;
          a2 = v38;
          uint64_t v6 = v40;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        sub_256B0C07C(a2, v10);
        uint64_t v23 = *(void *)(v22 + 16);
        swift_release();
        if (v23)
        {
          uint64_t v24 = v48;
          uint64_t v25 = v49;
          sub_256A39D70(v47, v48);
          (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v25 + 48))(v46, v24, v25);
          uint64_t v26 = v46[0];
          uint64_t v27 = v46[1];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v28 = v48;
          uint64_t v29 = v49;
          sub_256A39D70(v47, v48);
          (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v29 + 48))(&v43, v28, v29);
          long long v30 = v44;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_256A39DB4((uint64_t)v47);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_256B07BE4(0, *(void *)(v6 + 16) + 1, 1, v6);
            uint64_t v6 = v34;
          }
          unint64_t v32 = *(void *)(v6 + 16);
          unint64_t v31 = *(void *)(v6 + 24);
          if (v32 >= v31 >> 1)
          {
            sub_256B07BE4(v31 > 1, v32 + 1, 1, v6);
            uint64_t v6 = v35;
          }
          *(void *)(v6 + 16) = v32 + 1;
          uint64_t v33 = v6 + 32 * v32;
          *(void *)(v33 + 32) = v26;
          *(void *)(v33 + 40) = v27;
          *(_OWORD *)(v33 + 48) = v30;
        }
        else
        {
          sub_256A39DB4((uint64_t)v47);
        }
        uint64_t v4 = v39;
        uint64_t v5 = v41;
      }
      else
      {
        uint64_t v45 = 0;
        long long v43 = 0u;
        long long v44 = 0u;
        sub_256A498E4((uint64_t)&v43, &qword_26B2B5520);
      }
      ++v5;
    }
    while (v5 != v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  return v6;
}

uint64_t sub_256A3F3D4()
{
  return sub_256A4256C((uint64_t)sub_256B30DE0);
}

uint64_t sub_256A3F400()
{
  unint64_t v2 = sub_256A3F5C0();
  if (!v0)
  {
    unint64_t v4 = v2;
    if (v2 >> 62) {
      goto LABEL_20;
    }
    uint64_t v5 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v5; uint64_t v5 = sub_256B3FC80())
    {
      uint64_t v1 = MEMORY[0x263F8EE78];
      for (uint64_t i = 4; ; ++i)
      {
        id v7 = (v4 & 0xC000000000000001) != 0 ? (id)MEMORY[0x25A2AB400](i - 4, v4) : *(id *)(v4 + 8 * i);
        uint64_t v8 = v7;
        uint64_t v9 = i - 3;
        if (__OFADD__(i - 4, 1)) {
          break;
        }
        ResourceBundleContainer.toResourceBundle()();

        if (v14)
        {
          sub_256A3A540(&v13, (uint64_t)v15);
          sub_256A3A540(v15, (uint64_t)&v13);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_256A4A81C();
            sub_256B07B0C();
            uint64_t v1 = v11;
          }
          unint64_t v10 = *(void *)(v1 + 16);
          if (v10 >= *(void *)(v1 + 24) >> 1)
          {
            sub_256B07B0C();
            uint64_t v1 = v12;
          }
          *(void *)(v1 + 16) = v10 + 1;
          sub_256A3A540(&v13, v1 + 40 * v10 + 32);
        }
        else
        {
          sub_256A498E4((uint64_t)&v13, &qword_26B2B5C08);
        }
        if (v9 == v5)
        {
          sub_256A4A71C();
          return v1;
        }
      }
      __break(1u);
LABEL_20:
      sub_256A4ABF0();
    }
    sub_256A4A71C();
    return MEMORY[0x263F8EE78];
  }
  return v1;
}

uint64_t sub_256A3F5C0()
{
  return sub_256A4256C((uint64_t)sub_256B31980);
}

void sub_256A3F5EC(uint64_t a1)
{
  type metadata accessor for ResourceContainer();
  sub_256A4819C(a1, (uint64_t)v13);
  sub_256A52AA4();
  uint64_t v5 = v4;
  sub_256A498E4((uint64_t)v13, (uint64_t *)&unk_26B2B5D90);
  if (!v1)
  {
    uint64_t v6 = sub_256A39D2C(&qword_26B2B6340);
    uint64_t v7 = sub_256A4AB38(v6);
    MEMORY[0x270FA5388](v7);
    sub_256A4A7E4();
    sub_256B3F300();
    sub_256A4AB18();
    sub_256A46F7C(v8, v9, v10, v11);
    sub_256A3F710();

    sub_256A498E4(v2, &qword_26B2B6340);
  }
}

void sub_256A3F710()
{
  sub_256A4A878();
  uint64_t v125 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v132 = *MEMORY[0x263EF8340];
  uint64_t v6 = sub_256B3F300();
  sub_256A49FB8();
  uint64_t v8 = v7;
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x270FA5388](v11);
  sub_256A4A780();
  uint64_t v14 = v12 - v13;
  uint64_t v15 = sub_256A39D2C(&qword_26B2B6340);
  uint64_t v16 = sub_256A4AB38(v15);
  uint64_t v18 = *(void *)(v17 + 64);
  MEMORY[0x270FA5388](v16);
  sub_256A4805C(v3, (uint64_t)v111 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (sub_256A480C4((uint64_t)v111 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v6) == 1)
  {
    uint64_t v19 = &qword_26B2B6340;
    uint64_t v20 = (long long *)((char *)v111 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
LABEL_3:
    sub_256A498E4((uint64_t)v20, v19);
    goto LABEL_4;
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v14, (char *)v111 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  ResourceContainer.toResource()();
  if (v1)
  {
    sub_256A4A278();
    v22();
    goto LABEL_29;
  }
  if (!v128)
  {
    sub_256A4A278();
    v67();
    uint64_t v19 = (uint64_t *)&unk_26B2B5D90;
    uint64_t v20 = &v127;
    goto LABEL_3;
  }
  uint64_t v112 = v5;
  uint64_t v123 = v8;
  sub_256A3A540(&v127, (uint64_t)v129);
  id v124 = objc_msgSend(self, sel_defaultManager);
  uint64_t v121 = v111;
  MEMORY[0x270FA5388](v124);
  sub_256A4A780();
  uint64_t v113 = (char *)v23;
  uint64_t v25 = v24 - (void)v23;
  sub_256B3F240();
  uint64_t v120 = v111;
  sub_256A49FB8();
  uint64_t v27 = v26;
  MEMORY[0x270FA5388](v28);
  uint64_t v116 = v29;
  unint64_t v114 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v30 = *MEMORY[0x263F06E28];
  uint64_t v117 = (void (**)(char *, uint64_t))v27;
  uint64_t v118 = v31;
  uint64_t v115 = (uint64_t (*)(char *, uint64_t))*((void *)v27 + 13);
  uint64_t v32 = v115((char *)v111 - v114, v30);
  MEMORY[0x270FA5388](v32);
  sub_256A4A790();
  sub_256A4AB18();
  sub_256A46F7C(v33, v34, v35, v6);
  sub_256A4A6DC();
  sub_256B3F2D0();
  uint64_t v122 = v25;
  os_log_type_t v36 = (void *)sub_256B3F270();
  *(void *)&long long v127 = 0;
  unsigned int v37 = objc_msgSend(v124, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v36, 1, 0, &v127);

  uint64_t v39 = (void *)v127;
  if (!v37)
  {
    id v68 = (id)v127;
    sub_256B3F230();

    swift_willThrow();
    uint64_t v69 = *(void (**)(void))(v123 + 8);
    sub_256A4A278();
    v69();
    sub_256A4A278();
    v69();
LABEL_28:
    sub_256A39DB4((uint64_t)v129);
    goto LABEL_29;
  }
  uint64_t v119 = v14;
  v111[1] = (uint64_t)v111;
  MEMORY[0x270FA5388](v38);
  int64_t v40 = (char *)v111 - v113;
  uint64_t v42 = v130;
  uint64_t v41 = v131;
  v111[2] = (uint64_t)sub_256A39D70(v129, v130);
  uint64_t v113 = *(char **)(v41 + 24);
  id v43 = v39;
  *(void *)&long long v127 = ((uint64_t (*)(uint64_t, uint64_t))v113)(v42, v41);
  *((void *)&v127 + 1) = v44;
  MEMORY[0x270FA5388](v127);
  uint64_t v45 = (char *)v111 - v114;
  uint64_t v46 = v118;
  ((void (*)(char *, void, uint64_t))v115)((char *)v111 - v114, *MEMORY[0x263F06E48], v118);
  sub_256A480EC();
  sub_256B3F2E0();
  v117[1](v45, v46);
  swift_bridgeObjectRelease();
  sub_256B3F2B0();
  uint64_t v47 = (void *)sub_256B3F690();
  swift_bridgeObjectRelease();
  unsigned int v48 = objc_msgSend(v124, sel_fileExistsAtPath_, v47);

  uint64_t v120 = (uint64_t *)v40;
  if (v48)
  {
    uint64_t v49 = v123;
    if (qword_26B2B62D0 != -1) {
      swift_once();
    }
    uint64_t v50 = sub_256B3F4A0();
    uint64_t v51 = sub_256A46E9C(v50, (uint64_t)qword_26B2C3FF8);
    sub_256A4AC30(v51, v52, v53, v54, v55, v56, v57, v58, v111[0]);
    MEMORY[0x270FA5388](v59);
    sub_256A4A780();
    sub_256A4AB70();
    v60();
    uint64_t v61 = sub_256B3F470();
    os_log_type_t v62 = sub_256B3F9F0();
    if (os_log_type_enabled(v61, v62))
    {
      sub_256A4A734();
      uint64_t v116 = (uint64_t *)sub_256A4A510();
      *(void *)&long long v127 = v116;
      LODWORD(v111[0]) = 136315138;
      uint64_t v117 = (void (**)(char *, uint64_t))((char *)v111 + 4);
      sub_256A495C8(&qword_269F78BA8, MEMORY[0x270FA8EA0]);
      uint64_t v63 = sub_256B3FE80();
      uint64_t v126 = sub_256B3B598(v63, v64, (uint64_t *)&v127);
      sub_256B3FAA0();
      swift_bridgeObjectRelease();
      uint64_t v65 = sub_256A4A844(v123);
      v66(v65);
      _os_log_impl(&dword_256A36000, v61, v62, "Removing exisitng sideloaded asset files: %s", (uint8_t *)v111, 0xCu);
      swift_arrayDestroy();
      sub_256A4A158();
      sub_256A4A158();
    }
    else
    {
      uint64_t v70 = sub_256A4A844(v49);
      v71(v70);
    }

    sub_256B3F2B0();
    uint64_t v72 = (void *)sub_256B3F690();
    swift_bridgeObjectRelease();
    *(void *)&long long v127 = 0;
    id v73 = v124;
    unsigned int v74 = objc_msgSend(v124, sel_removeItemAtPath_error_, v72, &v127);

    if (!v74)
    {
      id v109 = (id)v127;
      sub_256B3F230();

      swift_willThrow();
      sub_256A4A810();
      uint64_t v110 = (void (*)(void))v117;
      sub_256A4A2D4();
      v110();
      sub_256A4A1B4();
      v110();
      sub_256A4A1B4();
      v110();
      sub_256A4A7A8();
      goto LABEL_28;
    }
    id v75 = (id)v127;
  }
  uint64_t v76 = v123;
  if (qword_26B2B62D0 != -1) {
    swift_once();
  }
  uint64_t v77 = sub_256B3F4A0();
  uint64_t v78 = sub_256A46E9C(v77, (uint64_t)qword_26B2C3FF8);
  sub_256A4AC30(v78, v79, v80, v81, v82, v83, v84, v85, v111[0]);
  MEMORY[0x270FA5388](v86);
  unint64_t v87 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  v88 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v76 + 16);
  uint64_t v89 = v88((char *)v111 - v87, v119, v6);
  uint64_t v116 = v111;
  MEMORY[0x270FA5388](v89);
  v88((char *)v111 - v87, (uint64_t)v120, v6);
  uint64_t v90 = sub_256B3F470();
  os_log_type_t v91 = sub_256B3F9F0();
  int v92 = v91;
  if (os_log_type_enabled(v90, v91))
  {
    uint64_t v93 = swift_slowAlloc();
    uint64_t v115 = (uint64_t (*)(char *, uint64_t))swift_slowAlloc();
    *(void *)&long long v127 = v115;
    *(_DWORD *)uint64_t v93 = 136315394;
    uint64_t v117 = (void (**)(char *, uint64_t))sub_256A495C8(&qword_269F78BA8, MEMORY[0x270FA8EA0]);
    LODWORD(v114) = v92;
    uint64_t v94 = sub_256B3FE80();
    uint64_t v126 = sub_256B3B598(v94, v95, (uint64_t *)&v127);
    uint64_t v113 = (char *)v90;
    sub_256B3FAA0();
    swift_bridgeObjectRelease();
    v96 = *(void (**)(void))(v123 + 8);
    sub_256A4A46C();
    v96();
    *(_WORD *)(v93 + 12) = 2080;
    uint64_t v97 = sub_256B3FE80();
    uint64_t v126 = sub_256B3B598(v97, v98, (uint64_t *)&v127);
    sub_256B3FAA0();
    swift_bridgeObjectRelease();
    sub_256A4A810();
    uint64_t v117 = (void (**)(char *, uint64_t))v96;
    sub_256A4A46C();
    v96();
    os_log_t v99 = (os_log_t)v113;
    _os_log_impl(&dword_256A36000, (os_log_t)v113, (os_log_type_t)v114, "Copying sideloading asset files %s to %s", (uint8_t *)v93, 0x16u);
    sub_256A4AB50();
    swift_arrayDestroy();
    sub_256A4A158();
    sub_256A4A158();
  }
  else
  {
    uint64_t v100 = *(void (**)(void))(v123 + 8);
    sub_256A4A1B4();
    v100();
    sub_256A4A810();
    uint64_t v117 = (void (**)(char *, uint64_t))v100;
    sub_256A4A2D4();
    v100();
  }
  id v101 = v124;
  sub_256B3F2B0();
  uint64_t v102 = (void *)sub_256B3F690();
  swift_bridgeObjectRelease();
  sub_256B3F2A0();
  uint64_t v103 = (void *)sub_256B3F690();
  swift_bridgeObjectRelease();
  *(void *)&long long v127 = 0;
  unsigned int v104 = objc_msgSend(v101, sel_copyItemAtPath_toPath_error_, v102, v103, &v127);

  uint64_t v5 = v112;
  if (!v104)
  {
    id v107 = (id)v127;
    sub_256B3F230();

    swift_willThrow();
    uint64_t v108 = (void (*)(void))v117;
    sub_256A4A2D4();
    v108();
    sub_256A4A1B4();
    v108();
    sub_256A4A1B4();
    v108();
    sub_256A4A7A8();
    goto LABEL_28;
  }
  id v105 = (id)v127;

  uint64_t v106 = (void (*)(void))v117;
  sub_256A4A2D4();
  v106();
  sub_256A4A1B4();
  v106();
  sub_256A4A1B4();
  v106();
  sub_256A4A7A8();
  sub_256A39DB4((uint64_t)v129);
LABEL_4:
  if (*(void *)(v125 + 16))
  {
    id v21 = v5;
    swift_retain();
    sub_256B2ACE8();
    swift_release();
LABEL_29:
    sub_256A4A890();
    return;
  }
  __break(1u);
}

void sub_256A402A4(uint64_t a1)
{
  type metadata accessor for ResourceBundleContainer();
  sub_256A4819C(a1, (uint64_t)v6);
  sub_256A6F10C();
  unint64_t v4 = v3;
  sub_256A498E4((uint64_t)v6, &qword_26B2B5C08);
  if (!v1)
  {
    uint64_t v5 = sub_256A40344(v4);
  }
}

void *sub_256A40344(void *result)
{
  if (*(void *)(v1 + 16))
  {
    id v2 = result;
    swift_retain();
    sub_256B2BA60();
    sub_256A4A8C0();
    return (void *)sub_256A4AC68();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_256A4039C()
{
  sub_256A403CC();
  if (!v0) {
}
  }

void sub_256A403CC()
{
  sub_256A4A878();
  uint64_t v54 = v1;
  uint64_t v59 = v0;
  uint64_t v61 = v2;
  os_log_type_t v62 = v3;
  v64[2] = *(id *)MEMORY[0x263EF8340];
  uint64_t v4 = sub_256B3F300();
  sub_256A49FB8();
  uint64_t v60 = v5;
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x270FA5388](v8);
  unint64_t v57 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v9 = (char *)v52 - v57;
  uint64_t v10 = sub_256B3F240();
  sub_256A49FB8();
  uint64_t v12 = v11;
  uint64_t v14 = *(void *)(v13 + 64);
  MEMORY[0x270FA5388](v15);
  uint64_t v56 = (char *)((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *MEMORY[0x263F06E28];
  uint64_t v55 = *(void (**)(int64_t, uint64_t, uint64_t))(v12 + 104);
  v55((char *)v52 - v56, v16, v10);
  uint64_t v17 = sub_256A39D2C(&qword_26B2B6340);
  uint64_t v18 = sub_256A4AB38(v17);
  MEMORY[0x270FA5388](v18);
  sub_256A4A500();
  sub_256A4AB18();
  uint64_t v58 = v4;
  sub_256A46F7C(v19, v20, v21, v4);
  sub_256A4A6DC();
  uint64_t v22 = sub_256B3F2D0();
  uint64_t v23 = MEMORY[0x270FA5388](v22);
  uint64_t v24 = (void (*)(int64_t, uint64_t, uint64_t))((char *)v52 - v57);
  v64[0] = v61;
  v64[1] = v62;
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)((char *)v52 - v56);
  v55((char *)v52 - v56, *MEMORY[0x263F06E48], v10);
  sub_256A480EC();
  unint64_t v57 = (unint64_t)v9;
  sub_256B3F2E0();
  uint64_t v26 = v10;
  uint64_t v27 = v24;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v25, v26);
  uint64_t v28 = self;
  id v29 = objc_msgSend(v28, sel_defaultManager);
  sub_256B3F2B0();
  uint64_t v30 = (void *)sub_256B3F690();
  swift_bridgeObjectRelease();
  LODWORD(v14) = objc_msgSend(v29, sel_fileExistsAtPath_, v30);

  uint64_t v31 = v59;
  if (v14)
  {
    if (qword_26B2B62D0 != -1) {
      swift_once();
    }
    uint64_t v32 = sub_256B3F4A0();
    uint64_t v33 = sub_256A46E9C(v32, (uint64_t)qword_26B2C3FF8);
    uint64_t v56 = (char *)v52;
    MEMORY[0x270FA5388](v33);
    sub_256A4A790();
    uint64_t v34 = v58;
    sub_256A4AB70();
    v35();
    os_log_type_t v36 = sub_256B3F470();
    os_log_type_t v37 = sub_256B3F9F0();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = sub_256A4A734();
      uint64_t v53 = v28;
      uint64_t v39 = (uint8_t *)v38;
      int64_t v40 = (void *)swift_slowAlloc();
      uint64_t v55 = v27;
      v64[0] = v40;
      *(_DWORD *)uint64_t v39 = 136315138;
      uint64_t v30 = v39 + 12;
      v52[1] = v39 + 4;
      sub_256A495C8(&qword_269F78BA8, MEMORY[0x270FA8EA0]);
      uint64_t v41 = sub_256B3FE80();
      uint64_t v63 = sub_256B3B598(v41, v42, (uint64_t *)v64);
      sub_256B3FAA0();
      swift_bridgeObjectRelease();
      uint64_t v43 = sub_256A4AA70();
      ((void (*)(uint64_t))(v39 + 12))(v43);
      _os_log_impl(&dword_256A36000, v36, v37, "Removing sideloaded asset files: %s", v39, 0xCu);
      swift_arrayDestroy();
      uint64_t v27 = v55;
      sub_256A4A158();
      uint64_t v28 = v53;
      sub_256A4A158();
    }
    else
    {
      uint64_t v44 = sub_256A4AA70();
      ((void (*)(uint64_t))v30)(v44);
    }

    id v45 = objc_msgSend(v28, sel_defaultManager);
    sub_256B3F2B0();
    uint64_t v46 = (void *)sub_256B3F690();
    swift_bridgeObjectRelease();
    v64[0] = 0;
    unsigned int v47 = objc_msgSend(v45, sel_removeItemAtPath_error_, v46, v64);

    if (!v47)
    {
      id v51 = v64[0];
      sub_256B3F230();

      swift_willThrow();
      ((void (*)(void (*)(int64_t, uint64_t, uint64_t), uint64_t))v30)(v27, v34);
      ((void (*)(unint64_t, uint64_t))v30)(v57, v34);
LABEL_15:
      sub_256A4A890();
      return;
    }
    id v48 = v64[0];
    uint64_t v31 = v59;
  }
  if (*(void *)(v31 + 16))
  {
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v49 = v54;
    sub_256B2C7D8();
    swift_release();
    uint64_t v50 = *(void (**)(void))(v60 + 8);
    if (v49)
    {
      sub_256A4A810();
      sub_256A4A46C();
      v50();
      sub_256A4A46C();
    }
    else
    {
      sub_256A4A278();
      v50();
      sub_256A4A278();
    }
    v50();
    goto LABEL_15;
  }
  __break(1u);
}

void sub_256A409D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)sub_256A40A00(a1, a2);
  if (!v2) {
}
  }

uint64_t sub_256A40A00(uint64_t a1, uint64_t a2)
{
  return sub_256A40A84(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t))sub_256B2D38C);
}

uint64_t sub_256A40A2C(uint64_t a1, uint64_t a2)
{
  return sub_256A40A84(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t))sub_256B266B0);
}

uint64_t sub_256A40A58(uint64_t a1, uint64_t a2)
{
  return sub_256A40A84(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t))sub_256B27264);
}

uint64_t sub_256A40A84(uint64_t result, uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (*(void *)(v3 + 16))
  {
    uint64_t v6 = result;
    swift_bridgeObjectRetain();
    uint64_t v7 = swift_retain();
    a3(v7, v6, a2);
    sub_256A4A8C0();
    return sub_256A4AC68();
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_256A40AF0()
{
  return (unint64_t)sub_256A41530((uint64_t (*)(uint64_t))sub_256B2DF40) & 1;
}

uint64_t sub_256A40B20()
{
  *(void *)(v1 + 16) = v0;
  return sub_256A4A0B4((uint64_t)sub_256A40B38);
}

void sub_256A40B38()
{
  sub_256A4A41C();
  uint64_t v1 = *(void *)(v0[2] + 16);
  v0[3] = v1;
  if (v1)
  {
    sub_256A4A478();
    uint64_t v2 = (void *)swift_task_alloc();
    v0[4] = v2;
    void *v2 = v0;
    v2[1] = sub_256A40C00;
    v3(sub_256A40DD0, 0);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_256A40C00()
{
  sub_256A4A41C();
  uint64_t v3 = v2;
  sub_256A49FD4();
  uint64_t v5 = v4;
  sub_256A4A1A8();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  sub_256A4A0C0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 40) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_release();
    *(void *)(v5 + 48) = v3;
  }
  sub_256A4A82C();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

uint64_t sub_256A40CF8()
{
  sub_256A4A1FC();
  uint64_t v1 = *(void **)(v0 + 48);
  id v2 = objc_msgSend(v1, sel_BOOLValue);

  uint64_t v3 = *(uint64_t (**)(id))(v0 + 8);
  return v3(v2);
}

uint64_t sub_256A40D70()
{
  sub_256A4A1FC();
  swift_release();
  sub_256A4A590();
  return v0(0);
}

uint64_t sub_256A40DD0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a2;
  *(void *)(v6 + 24) = a3;
  uint64_t v7 = qword_26B2B61E8;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_256B3F4A0();
  sub_256A46E9C(v8, (uint64_t)qword_26B2C3FE0);
  uint64_t v9 = sub_256B3F470();
  os_log_type_t v10 = sub_256B3F9F0();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_256A36000, v9, v10, "calling generativeExperiencesEssentialResourcesReady()", v11, 2u);
    MEMORY[0x25A2ABEE0](v11, -1, -1);
  }

  swift_unknownObjectRetain();
  sub_256A418E4((uint64_t)sub_256A49FB0, v6, a1, (uint64_t)&unk_27060D1C8, (SEL *)&selRef_generativeExperiencesEssentialResourcesReadyWith_);
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t sub_256A40F34(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  return MEMORY[0x270FA2498](sub_256A40F58, 0, 0);
}

uint64_t sub_256A40F58()
{
  sub_256A4A678();
  sub_256B34D64();
  uint64_t v5 = *v2;
  *(void *)(v1 + 48) = *v2;
  if (v5)
  {
    id v6 = v5;
    sub_256A4AA30((int)v6, v7, v8, v9, v10, v11, v12, v13, v26);
    uint64_t v14 = (__n128 *)swift_task_alloc();
    sub_256A4A6C4(v14, v15, v16, v17, v18, v19, v20, v21, v22);
    uint64_t v23 = (void *)swift_task_alloc();
    *(void *)(v1 + 64) = v23;
    sub_256A49E98(0, &qword_26B2B50E0);
    *uint64_t v23 = v1;
    v23[1] = sub_256A410D8;
    uint64_t v24 = sub_256A4A208();
    return MEMORY[0x270FA2360](v24);
  }
  else
  {
    sub_256A4993C();
    swift_allocError();
    *uint64_t v25 = 0;
    swift_willThrow();
    os_unfair_lock_unlock(v0);
    sub_256A4AAB4();
    return v3();
  }
}

uint64_t sub_256A410D8()
{
  sub_256A4A1FC();
  sub_256A49FD4();
  uint64_t v3 = v2;
  sub_256A4A1A8();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_256A4A0C0();
  *id v6 = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  sub_256A4A82C();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t sub_256A411BC(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  return MEMORY[0x270FA2498](sub_256A411E0, 0, 0);
}

uint64_t sub_256A411E0()
{
  sub_256A4A678();
  sub_256B34D64();
  uint64_t v5 = *v2;
  *(void *)(v1 + 48) = *v2;
  if (v5)
  {
    id v6 = v5;
    sub_256A4AA30((int)v6, v7, v8, v9, v10, v11, v12, v13, v26);
    uint64_t v14 = (__n128 *)swift_task_alloc();
    sub_256A4A6C4(v14, v15, v16, v17, v18, v19, v20, v21, v22);
    uint64_t v23 = (void *)swift_task_alloc();
    *(void *)(v1 + 64) = v23;
    sub_256A39D2C(&qword_269F78D50);
    *uint64_t v23 = v1;
    v23[1] = sub_256A41354;
    uint64_t v24 = sub_256A4A208();
    return MEMORY[0x270FA2360](v24);
  }
  else
  {
    sub_256A4993C();
    swift_allocError();
    *uint64_t v25 = 0;
    swift_willThrow();
    os_unfair_lock_unlock(v0);
    sub_256A4AAB4();
    return v3();
  }
}

uint64_t sub_256A41354()
{
  sub_256A4A1FC();
  sub_256A49FD4();
  uint64_t v3 = v2;
  sub_256A4A1A8();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_256A4A0C0();
  *id v6 = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  sub_256A4A82C();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t sub_256A41438()
{
  sub_256A4A1FC();

  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_256A4149C()
{
  sub_256A4A1FC();

  swift_task_dealloc();
  sub_256A4AAB4();
  return v1();
}

unint64_t sub_256A41500()
{
  return (unint64_t)sub_256A41530((uint64_t (*)(uint64_t))sub_256B2EADC) & 1;
}

uint64_t (*sub_256A41530(uint64_t (*result)(uint64_t)))(uint64_t)
{
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3)
  {
    uint64_t v4 = result;
    uint64_t v5 = swift_retain();
    id v6 = (void *)v4(v5);
    swift_release();
    if (!v2)
    {
      LOBYTE(v3) = objc_msgSend(v6, sel_BOOLValue);
    }
    return (uint64_t (*)(uint64_t))(v3 & 1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_256A415A8()
{
  *(void *)(v1 + 16) = v0;
  return sub_256A4A0B4((uint64_t)sub_256A415C0);
}

void sub_256A415C0()
{
  sub_256A4A41C();
  uint64_t v1 = *(void *)(v0[2] + 16);
  v0[3] = v1;
  if (v1)
  {
    sub_256A4A478();
    uint64_t v2 = (void *)swift_task_alloc();
    v0[4] = v2;
    void *v2 = v0;
    v2[1] = sub_256A41688;
    v3(sub_256A41780, 0);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_256A41688()
{
  sub_256A4A41C();
  uint64_t v3 = v2;
  sub_256A49FD4();
  uint64_t v5 = v4;
  sub_256A4A1A8();
  *id v6 = v5;
  uint64_t v7 = *v1;
  sub_256A4A0C0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 40) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_release();
    *(void *)(v5 + 48) = v3;
  }
  sub_256A4A82C();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

uint64_t sub_256A41780(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a2;
  *(void *)(v6 + 24) = a3;
  uint64_t v7 = qword_26B2B61E8;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_256B3F4A0();
  sub_256A46E9C(v8, (uint64_t)qword_26B2C3FE0);
  uint64_t v9 = sub_256B3F470();
  os_log_type_t v10 = sub_256B3F9F0();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_256A36000, v9, v10, "calling enoughStorageForGenerativeExperiencesEssentialResources()", v11, 2u);
    MEMORY[0x25A2ABEE0](v11, -1, -1);
  }

  swift_unknownObjectRetain();
  sub_256A418E4((uint64_t)sub_256A49FB0, v6, a1, (uint64_t)&unk_27060D100, (SEL *)&selRef_hasEnoughStorageForGenerativeExperiencesEssentialResourcesWith_);
  swift_release();

  return swift_unknownObjectRelease();
}

void sub_256A418E4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, SEL *a5)
{
  v8[4] = a1;
  v8[5] = a2;
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 1107296256;
  v8[2] = sub_256A3E8D0;
  v8[3] = a4;
  uint64_t v7 = _Block_copy(v8);
  swift_retain();
  swift_release();
  objc_msgSend(a3, *a5, v7);
  _Block_release(v7);
}

uint64_t sub_256A4199C(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_256A4A0B4((uint64_t)sub_256A419B4);
}

void sub_256A419B4()
{
  sub_256A4AB64();
  uint64_t v1 = *(void *)(v0[3] + 16);
  v0[4] = v1;
  if (v1)
  {
    uint64_t v2 = v0[2];
    uint64_t v3 = swift_allocObject();
    v0[5] = v3;
    *(void *)(v3 + 16) = v2;
    sub_256A4A478();
    swift_bridgeObjectRetain();
    uint64_t v4 = (void *)swift_task_alloc();
    v0[6] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_256A41AB0;
    v5(sub_256A48194, v3);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_256A41AB0()
{
  sub_256A4A1FC();
  sub_256A49FD4();
  uint64_t v3 = v2;
  sub_256A4A1A8();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 56) = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_release();
    swift_release();
  }
  sub_256A4A82C();
  return MEMORY[0x270FA2498](v6, v7, v8);
}

void sub_256A41BA4()
{
  uint64_t v39 = v0;
  uint64_t v1 = *(void *)(v0 + 56);
  type metadata accessor for TagAvailabilityInfo();
  sub_256A46F0C();
  uint64_t v35 = sub_256B3F600();
  int64_t v2 = 0;
  uint64_t v36 = v1 + 64;
  uint64_t v3 = -1;
  uint64_t v4 = -1 << *(unsigned char *)(v1 + 32);
  if (-v4 < 64) {
    uint64_t v3 = ~(-1 << -(char)v4);
  }
  unint64_t v5 = v3 & *(void *)(v1 + 64);
  int64_t v37 = (unint64_t)(63 - v4) >> 6;
  while (v5)
  {
    unint64_t v6 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v7 = v6 | (v2 << 6);
LABEL_20:
    uint64_t v11 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v7);
    uint64_t v13 = *v11;
    int v12 = (void *)v11[1];
    uint64_t v14 = *(void **)(*(void *)(v1 + 56) + 8 * v7);
    swift_bridgeObjectRetain_n();
    id v15 = v14;
    v16._countAndFlagsBits = v13;
    v16._object = v12;
    Tag.init(rawValue:)(v16);
    uint64_t v17 = v38;
    if (v38 == 41)
    {
      if (qword_26B2B61E8 != -1) {
        swift_once();
      }
      uint64_t v18 = sub_256B3F4A0();
      sub_256A46E9C(v18, (uint64_t)qword_26B2C3FE0);
      swift_bridgeObjectRetain();
      uint64_t v19 = sub_256B3F470();
      os_log_type_t v20 = sub_256B3F9D0();
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = swift_slowAlloc();
        uint64_t v38 = (void *)sub_256A4A8A8();
        *(_DWORD *)uint64_t v21 = 136315138;
        swift_bridgeObjectRetain();
        *(void *)(v21 + 4) = sub_256B3B598(v13, (unint64_t)v12, (uint64_t *)&v38);
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_256A36000, v19, v20, "error in resourceAvailability decoding tag: %s", (uint8_t *)v21, 0xCu);
        swift_arrayDestroy();
        sub_256A4A158();
        sub_256A4A158();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_isUniquelyReferenced_nonNull_native();
      uint64_t v38 = (void *)v35;
      sub_256A39F04(v17);
      sub_256A4A70C();
      if (v24) {
        goto LABEL_43;
      }
      unint64_t v25 = v22;
      char v26 = v23;
      sub_256A39D2C((uint64_t *)&unk_269F78BD8);
      char v27 = sub_256B3FC00();
      uint64_t v28 = v38;
      if (v27)
      {
        unint64_t v29 = sub_256A39F04(v17);
        if ((v26 & 1) != (v30 & 1))
        {
          sub_256B3FEF0();
          return;
        }
        unint64_t v25 = v29;
      }
      uint64_t v35 = (uint64_t)v28;
      if (v26)
      {
        uint64_t v31 = v28[7];

        *(void *)(v31 + 8 * v25) = v15;
      }
      else
      {
        v28[(v25 >> 6) + 8] |= 1 << v25;
        *(unsigned char *)(v28[6] + v25) = v17;
        *(void *)(v28[7] + 8 * v25) = v15;
        uint64_t v32 = v28[2];
        BOOL v24 = __OFADD__(v32, 1);
        uint64_t v33 = v32 + 1;
        if (v24) {
          goto LABEL_44;
        }
        v28[2] = v33;
      }
      swift_bridgeObjectRelease();
    }
  }
  int64_t v8 = v2 + 1;
  if (__OFADD__(v2, 1))
  {
    __break(1u);
    goto LABEL_42;
  }
  if (v8 >= v37) {
    goto LABEL_35;
  }
  unint64_t v9 = *(void *)(v36 + 8 * v8);
  ++v2;
  if (v9) {
    goto LABEL_19;
  }
  int64_t v2 = v8 + 1;
  if (v8 + 1 >= v37) {
    goto LABEL_35;
  }
  unint64_t v9 = *(void *)(v36 + 8 * v2);
  if (v9) {
    goto LABEL_19;
  }
  int64_t v2 = v8 + 2;
  if (v8 + 2 >= v37) {
    goto LABEL_35;
  }
  unint64_t v9 = *(void *)(v36 + 8 * v2);
  if (v9)
  {
LABEL_19:
    unint64_t v5 = (v9 - 1) & v9;
    unint64_t v7 = __clz(__rbit64(v9)) + (v2 << 6);
    goto LABEL_20;
  }
  int64_t v10 = v8 + 3;
  if (v10 < v37)
  {
    unint64_t v9 = *(void *)(v36 + 8 * v10);
    if (!v9)
    {
      while (1)
      {
        int64_t v2 = v10 + 1;
        if (__OFADD__(v10, 1)) {
          break;
        }
        if (v2 >= v37) {
          goto LABEL_35;
        }
        unint64_t v9 = *(void *)(v36 + 8 * v2);
        ++v10;
        if (v9) {
          goto LABEL_19;
        }
      }
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
      return;
    }
    int64_t v2 = v10;
    goto LABEL_19;
  }
LABEL_35:
  swift_release();
  sub_256A4A590();
  v34(v35);
}

uint64_t sub_256A42024()
{
  sub_256A4A1FC();
  swift_release();
  swift_release();
  sub_256A4AAB4();
  return v0();
}

uint64_t sub_256A42088(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  uint64_t v9 = qword_26B2B61E8;
  swift_retain();
  if (v9 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_256B3F4A0();
  sub_256A46E9C(v10, (uint64_t)qword_26B2C3FE0);
  swift_bridgeObjectRetain_n();
  uint64_t v11 = sub_256B3F470();
  os_log_type_t v12 = sub_256B3F9F0();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    uint64_t v30 = v14;
    *(_DWORD *)uint64_t v13 = 136315138;
    if (a4)
    {
      swift_bridgeObjectRetain();
      sub_256A39D2C((uint64_t *)&unk_269F78D60);
      uint64_t v15 = sub_256B3F710();
      unint64_t v17 = v16;
    }
    else
    {
      unint64_t v17 = 0xE300000000000000;
      uint64_t v15 = 7104878;
    }
    sub_256B3B598(v15, v17, &v30);
    sub_256B3FAA0();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_256A36000, v11, v12, "calling resourceAvailability() with tags: %s", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25A2ABEE0](v14, -1, -1);
    MEMORY[0x25A2ABEE0](v13, -1, -1);

    if (!a4) {
      goto LABEL_18;
    }
  }
  else
  {

    swift_bridgeObjectRelease_n();
    if (!a4)
    {
LABEL_18:
      swift_unknownObjectRetain();
      uint64_t v20 = 0;
      goto LABEL_19;
    }
  }
  uint64_t v18 = *(void *)(a4 + 16);
  if (v18)
  {
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    uint64_t v19 = 0;
    uint64_t v20 = MEMORY[0x263F8EE78];
    do
    {
      LOBYTE(v30) = *(unsigned char *)(a4 + v19 + 32);
      unint64_t v21 = Tag.rawValue.getter();
      uint64_t v23 = v22;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_256B07B20(0, *(void *)(v20 + 16) + 1, 1, v20);
        uint64_t v20 = v27;
      }
      unint64_t v25 = *(void *)(v20 + 16);
      unint64_t v24 = *(void *)(v20 + 24);
      if (v25 >= v24 >> 1)
      {
        sub_256B07B20(v24 > 1, v25 + 1, 1, v20);
        uint64_t v20 = v28;
      }
      ++v19;
      *(void *)(v20 + 16) = v25 + 1;
      uint64_t v26 = v20 + 16 * v25;
      *(void *)(v26 + 32) = v21;
      *(void *)(v26 + 40) = v23;
    }
    while (v18 != v19);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_unknownObjectRetain();
    uint64_t v20 = MEMORY[0x263F8EE78];
  }
LABEL_19:
  sub_256A423B8(v20, (uint64_t)sub_256A49A74, v8, a1);
  swift_release();
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_256A423B8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a1) {
    unint64_t v7 = (void *)sub_256B3F850();
  }
  else {
    unint64_t v7 = 0;
  }
  v9[4] = a2;
  v9[5] = a3;
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 1107296256;
  _OWORD v9[2] = sub_256A424A0;
  v9[3] = &unk_27060D0B0;
  uint64_t v8 = _Block_copy(v9);
  swift_retain();
  swift_release();
  objc_msgSend(a4, sel_resourceAvailabilityBy_reply_, v7, v8);
  _Block_release(v8);
}

uint64_t sub_256A424A0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  unint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    type metadata accessor for TagAvailabilityInfo();
    uint64_t v4 = sub_256B3F5E0();
  }
  swift_retain();
  id v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_256A42540()
{
  return sub_256A4256C((uint64_t)sub_256B32520);
}

uint64_t sub_256A4256C(uint64_t result)
{
  if (*(void *)(v1 + 16))
  {
    uint64_t v2 = (void (*)(uint64_t))result;
    uint64_t v3 = swift_retain();
    v2(v3);
    sub_256A4A8C0();
    return sub_256A4AC68();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_256A425B8()
{
  sub_256A4A878();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v4 = sub_256A39D2C((uint64_t *)&unk_269F78B98);
  sub_256A49FB8();
  uint64_t v56 = v5;
  MEMORY[0x270FA5388](v6);
  sub_256A4A500();
  uint64_t v55 = v8 - v7;
  uint64_t v9 = sub_256A3D010((uint64_t)&unk_27060CB40);
  swift_retain();
  uint64_t v10 = sub_256B05E60();
  swift_release();
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_256A3EF8C(v10, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v61 = v11;
  sub_256A47CEC((uint64_t)&unk_27060CB68);
  uint64_t v66 = MEMORY[0x263F8EE88];
  uint64_t v65 = MEMORY[0x263F8EE78];
  uint64_t v13 = *(void *)(v11 + 16);
  if (v13)
  {
    uint64_t v53 = v4;
    uint64_t v54 = v3;
    v51[1] = v11;
    uint64_t v52 = v0;
    uint64_t v58 = v0 + 32;
    uint64_t v14 = (uint64_t *)(v11 + 56);
    *(void *)&long long v12 = 136315138;
    long long v57 = v12;
    v51[0] = MEMORY[0x263F8EE58] + 8;
    do
    {
      uint64_t v59 = v13;
      uint64_t v15 = *(v14 - 3);
      uint64_t v16 = *(v14 - 2);
      uint64_t v18 = *(v14 - 1);
      uint64_t v17 = *v14;
      uint64_t v61 = v15;
      uint64_t v62 = v16;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_256B3F760();
      sub_256B3F760();
      uint64_t v20 = v61;
      uint64_t v19 = v62;
      swift_bridgeObjectRetain();
      sub_256A42BDC(v20, v19, v66);
      char v22 = v21;
      swift_bridgeObjectRelease();
      if (v22)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_256A39684(&v61, v20, v19);
        swift_bridgeObjectRelease();
        sub_256A4819C(v58, (uint64_t)&v61);
        uint64_t v23 = v63;
        uint64_t v24 = v64;
        sub_256A39D70(&v61, (uint64_t)v63);
        (*(void (**)(char *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint8_t *, uint64_t))(v24 + 8))(&v60, v15, v16, v18, v17, v23, v24);
        switch(v60)
        {
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
            sub_256A39DB4((uint64_t)&v61);
            uint64_t v25 = v65;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              char v45 = sub_256A4A81C();
              sub_256B07BE4(v45, v46, v47, v25);
              uint64_t v25 = v48;
            }
            unint64_t v27 = *(void *)(v25 + 16);
            unint64_t v26 = *(void *)(v25 + 24);
            if (v27 >= v26 >> 1)
            {
              sub_256B07BE4(v26 > 1, v27 + 1, 1, v25);
              uint64_t v25 = v49;
            }
            *(void *)(v25 + 16) = v27 + 1;
            uint64_t v28 = (void *)(v25 + 32 * v27);
            v28[4] = v15;
            v28[5] = v16;
            v28[6] = v18;
            v28[7] = v17;
            uint64_t v65 = v25;
            break;
          case 6:
            sub_256A39DB4((uint64_t)&v61);
            swift_bridgeObjectRelease();
            if (qword_26B2B62D0 != -1) {
              swift_once();
            }
            uint64_t v34 = sub_256B3F4A0();
            sub_256A46E9C(v34, (uint64_t)qword_26B2C3FF8);
            swift_bridgeObjectRetain();
            uint64_t v30 = sub_256B3F470();
            os_log_type_t v35 = sub_256B3F9C0();
            if (!sub_256A4A914(v35)) {
              goto LABEL_25;
            }
            sub_256A4A734();
            uint64_t v36 = sub_256A4A510();
            sub_256A4A3D4(v36);
            uint64_t v37 = sub_256A4A8F8();
            sub_256A4A8DC(v37);
            uint64_t v38 = v30;
            os_log_type_t v39 = v15;
            uint64_t v40 = "Non network error ocurred for %s";
            goto LABEL_23;
          case 7:
            sub_256A39DB4((uint64_t)&v61);
            swift_bridgeObjectRelease();
            if (qword_26B2B62D0 != -1) {
              swift_once();
            }
            uint64_t v41 = sub_256B3F4A0();
            sub_256A46E9C(v41, (uint64_t)qword_26B2C3FF8);
            swift_bridgeObjectRetain();
            uint64_t v30 = sub_256B3F470();
            os_log_type_t v42 = sub_256B3F9C0();
            if (!sub_256A4A914(v42)) {
              goto LABEL_25;
            }
            sub_256A4A734();
            uint64_t v43 = sub_256A4A510();
            sub_256A4A3D4(v43);
            uint64_t v44 = sub_256A4A8F8();
            sub_256A4A8DC(v44);
            uint64_t v38 = v30;
            os_log_type_t v39 = v15;
            uint64_t v40 = "Network error ocurred for %s";
LABEL_23:
            _os_log_impl(&dword_256A36000, v38, v39, v40, v23, 0xCu);
            goto LABEL_24;
          default:
            sub_256A39DB4((uint64_t)&v61);
            swift_bridgeObjectRelease();
            if (qword_26B2B62D0 != -1) {
              swift_once();
            }
            uint64_t v29 = sub_256B3F4A0();
            sub_256A46E9C(v29, (uint64_t)qword_26B2C3FF8);
            swift_bridgeObjectRetain();
            uint64_t v30 = sub_256B3F470();
            os_log_type_t v31 = sub_256B3F9C0();
            if (sub_256A4A914(v31))
            {
              sub_256A4A734();
              uint64_t v32 = sub_256A4A510();
              sub_256A4A3D4(v32);
              uint64_t v33 = sub_256A4A8F8();
              sub_256A4A8DC(v33);
              _os_log_impl(&dword_256A36000, v30, (os_log_type_t)v15, "Skipping unknown subscription %s", v23, 0xCu);
LABEL_24:
              swift_arrayDestroy();
              sub_256A4A158();
              sub_256A4A158();
            }
            else
            {
LABEL_25:

              swift_bridgeObjectRelease_n();
            }
            break;
        }
      }
      v14 += 4;
      uint64_t v13 = v59 - 1;
    }
    while (v59 != 1);
    swift_bridgeObjectRelease();
    uint64_t v4 = v53;
    uint64_t v1 = v52;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v50 = swift_bridgeObjectRelease();
  MEMORY[0x270FA5388](v50);
  v51[-2] = &v65;
  v51[-1] = v1;
  (*(void (**)(uint64_t, void, uint64_t))(v56 + 104))(v55, *MEMORY[0x263F8F580], v4);
  sub_256B3F950();
  swift_bridgeObjectRelease();
  sub_256A4A890();
}

void sub_256A42BDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    sub_256A4A3C8();
    sub_256B3FF40();
    sub_256B3F740();
    uint64_t v6 = sub_256B3FF70();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    uint64_t v8 = v6 & ~v7;
    sub_256A3A65C();
    if (v9)
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (void *)(v10 + 16 * v8);
      if ((*v11 != v4 || v11[1] != v3) && (sub_256B3FEA0() & 1) == 0)
      {
        uint64_t v13 = ~v7;
        uint64_t v14 = (v8 + 1) & v13;
        sub_256A3A65C();
        if (v15)
        {
          do
          {
            uint64_t v16 = (void *)(v10 + 16 * v14);
            if (*v16 == v4 && v16[1] == v3) {
              break;
            }
            if (sub_256B3FEA0()) {
              break;
            }
            uint64_t v14 = (v14 + 1) & v13;
            sub_256A3A65C();
          }
          while ((v18 & 1) != 0);
        }
      }
    }
  }
}

uint64_t sub_256A42CEC(unsigned __int8 a1, uint64_t a2)
{
  if (*(void *)(a2 + 16)
    && (sub_256B3FF40(),
        sub_256A86918((uint64_t)v22, a1),
        uint64_t v4 = sub_256B3FF70(),
        uint64_t v5 = -1 << *(unsigned char *)(a2 + 32),
        unint64_t v6 = v4 & ~v5,
        ((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0))
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = a1;
    while (1)
    {
      unint64_t v9 = 0x8000000256B46CA0;
      uint64_t v10 = 0xD000000000000016;
      switch(*(unsigned char *)(*(void *)(a2 + 48) + v6))
      {
        case 1:
          uint64_t v10 = sub_256A4A25C();
          goto LABEL_10;
        case 2:
          uint64_t v10 = sub_256A4A25C();
          goto LABEL_12;
        case 3:
          uint64_t v10 = sub_256A4A25C();
          goto LABEL_14;
        case 4:
          uint64_t v10 = sub_256A4A9B0();
          unint64_t v9 = 0xED00007974656661;
          break;
        case 5:
          uint64_t v10 = sub_256A4A240();
LABEL_10:
          unint64_t v9 = 0x8000000256B46CA0 & 0xFFFFFFFF | 0xEF31765F00000000;
          break;
        case 6:
          uint64_t v10 = sub_256A4A240();
LABEL_12:
          unint64_t v9 = 0x8000000256B46CA0 & 0xFFFFFFFF | 0xEF32765F00000000;
          break;
        case 7:
          uint64_t v10 = sub_256A4A240();
LABEL_14:
          unint64_t v9 = 0x8000000256B46CA0 & 0xFFFFFFFF | 0xEF33765F00000000;
          break;
        case 8:
          uint64_t v11 = "l_v2";
          goto LABEL_17;
        case 9:
          sub_256A4AB44();
          uint64_t v10 = v12 - 1;
          uint64_t v11 = "generative-experiences";
LABEL_17:
          unint64_t v9 = (unint64_t)v11 | 0x8000000000000000;
          break;
        case 0xA:
          sub_256A4AB44();
          uint64_t v10 = v13 - 2;
          unint64_t v9 = 0x8000000256B46D70;
          break;
        default:
          break;
      }
      unint64_t v14 = 0x8000000256B46CA0;
      unint64_t v15 = 0xD000000000000016;
      switch(v8)
      {
        case 1:
          sub_256A4A288();
          goto LABEL_25;
        case 2:
          sub_256A4A288();
          goto LABEL_27;
        case 3:
          sub_256A4A288();
          goto LABEL_29;
        case 4:
          unint64_t v15 = 0x735F6D6C65646F63;
          unint64_t v14 = 0xED00007974656661;
          break;
        case 5:
          sub_256A4A2A4();
LABEL_25:
          unint64_t v14 = 0x8000000256B46CA0 & 0xFFFFFFFF | 0xEF31765F00000000;
          break;
        case 6:
          sub_256A4A2A4();
LABEL_27:
          unint64_t v14 = 0x8000000256B46CA0 & 0xFFFFFFFF | 0xEF32765F00000000;
          break;
        case 7:
          sub_256A4A2A4();
LABEL_29:
          unint64_t v14 = 0x8000000256B46CA0 & 0xFFFFFFFF | 0xEF33765F00000000;
          break;
        case 8:
          uint64_t v16 = "l_v2";
          goto LABEL_32;
        case 9:
          sub_256A4AB44();
          unint64_t v15 = v17 - 1;
          uint64_t v16 = "generative-experiences";
LABEL_32:
          unint64_t v14 = (unint64_t)v16 | 0x8000000000000000;
          break;
        case 10:
          sub_256A4AB44();
          unint64_t v15 = v18 - 2;
          unint64_t v14 = 0x8000000256B46D70;
          break;
        default:
          break;
      }
      if (v10 == v15 && v9 == v14) {
        break;
      }
      char v20 = sub_256B3FEA0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v20 & 1) == 0)
      {
        unint64_t v6 = (v6 + 1) & v7;
        if ((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6)) {
          continue;
        }
      }
      return v20 & 1;
    }
    swift_bridgeObjectRelease_n();
    char v20 = 1;
  }
  else
  {
    char v20 = 0;
  }
  return v20 & 1;
}

uint64_t sub_256A4300C(uint64_t a1, uint64_t a2, void *a3)
{
  id v73 = a3;
  uint64_t v74 = a2;
  uint64_t v4 = sub_256A39D2C(&qword_269F78D28);
  uint64_t v59 = *(void *)(v4 - 8);
  uint64_t v60 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = v6;
  MEMORY[0x270FA5388](v5);
  uint64_t v53 = (char *)v46 - v8;
  sub_256A49E98(0, (unint64_t *)&qword_26B2B59E0);
  uint64_t v9 = sub_256B3F570();
  MEMORY[0x270FA5388](v9 - 8);
  sub_256B3F560();
  uint64_t v10 = sub_256B3FA10();
  MEMORY[0x270FA5388](v10);
  v75[0] = MEMORY[0x263F8EE78];
  sub_256A495C8((unint64_t *)&qword_26B2B59D8, MEMORY[0x270FCDB60]);
  sub_256A39D2C(&qword_26B2B59C0);
  sub_256A49610();
  sub_256B3FAE0();
  uint64_t v11 = sub_256B3FA20();
  MEMORY[0x270FA5388](v11);
  (*(void (**)(char *, void))(v13 + 104))((char *)v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x263F8F128]);
  unint64_t v14 = (void *)sub_256B3FA30();
  uint64_t v15 = v74;
  uint64_t v16 = *(void *)(*(void *)v74 + 16);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = 0;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = sub_256A436CC(0, v16);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = sub_256A436CC(0, v16);
  if (*(void *)(*(void *)v15 + 16))
  {
    uint64_t v51 = *(void *)(*(void *)v15 + 16);
    uint64_t v50 = v73 + 4;
    uint64_t v74 = v59 + 16;
    uint64_t v49 = v59 + 32;
    uint64_t v20 = swift_bridgeObjectRetain();
    uint64_t v58 = a1;
    uint64_t v21 = 0;
    v46[1] = v20;
    char v22 = (void *)(v20 + 56);
    uint64_t v48 = v7;
    uint64_t v55 = v17;
    uint64_t v56 = v18;
    uint64_t v47 = v16;
    uint64_t v57 = v19;
    uint64_t v52 = v14;
    do
    {
      uint64_t v23 = *(v22 - 3);
      uint64_t v24 = *(v22 - 2);
      uint64_t v70 = *(v22 - 1);
      uint64_t v71 = v23;
      uint64_t v72 = v21 + 1;
      id v73 = v22;
      uint64_t v25 = *v22;
      uint64_t v66 = v24;
      uint64_t v67 = v25;
      sub_256A4819C((uint64_t)v50, (uint64_t)v75);
      uint64_t v68 = v76;
      uint64_t v64 = v77;
      uint64_t v69 = sub_256A39D70(v75, v76);
      uint64_t v26 = v59;
      uint64_t v27 = v60;
      uint64_t v63 = *(void (**)(char *, uint64_t, uint64_t))(v59 + 16);
      uint64_t v28 = v53;
      uint64_t v29 = v58;
      v63(v53, v58, v60);
      uint64_t v30 = *(unsigned __int8 *)(v26 + 80);
      uint64_t v31 = (v30 + 40) & ~v30;
      uint64_t v32 = v31 + v54;
      uint64_t v62 = v30 | 7;
      uint64_t v33 = (void *)swift_allocObject();
      uint64_t v65 = v33;
      uint64_t v34 = v56;
      v33[2] = v56;
      v33[3] = v21;
      uint64_t v35 = v57;
      v33[4] = v57;
      uint64_t v61 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
      v61((char *)v33 + v31, v28, v27);
      uint64_t v36 = v48;
      v63(v48, v29, v27);
      unint64_t v37 = (v32 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v38 = (char *)swift_allocObject();
      *((void *)v38 + 2) = v35;
      *((void *)v38 + 3) = v21;
      *((void *)v38 + 4) = v34;
      uint64_t v39 = v27;
      unint64_t v14 = v52;
      v61(&v38[v31], v36, v39);
      *(void *)&v38[v37] = v55;
      *(void *)&v38[(v37 + 15) & 0xFFFFFFFFFFFFFFF8] = v47;
      uint64_t v40 = v64;
      uint64_t v41 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void *, void (*)(uint64_t), void *, void (*)(), char *, uint64_t, uint64_t))(v64 + 40);
      swift_retain_n();
      swift_retain_n();
      uint64_t v42 = v66;
      swift_bridgeObjectRetain();
      uint64_t v43 = v67;
      swift_bridgeObjectRetain();
      id v44 = v14;
      swift_retain();
      v41(v71, v42, v70, v43, 0, v14, sub_256A49758, v65, sub_256A49864, v38, v68, v40);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_release();
      sub_256A39DB4((uint64_t)v75);
      char v22 = v73 + 4;
      uint64_t v21 = v72;
    }
    while (v51 != v72);
    swift_bridgeObjectRelease();
  }
  sub_256B3F920();

  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_256A436CC(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    uint64_t result = sub_256B3FC60();
    __break(1u);
  }
  else if (a2)
  {
    uint64_t result = sub_256B3F890();
    uint64_t v5 = 0;
    *(void *)(result + 16) = a2;
    do
    {
      uint64_t v6 = result + 8 * v5++;
      *(void *)(v6 + 32) = a1;
    }
    while (a2 != v5);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

uint64_t sub_256A43780(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_beginAccess();
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    uint64_t v7 = 0;
    uint64_t v8 = (uint64_t *)(v5 + 32);
    uint64_t v9 = *(void *)(v5 + 16);
    do
    {
      uint64_t v10 = *v8++;
      uint64_t v11 = v10 == 0;
      BOOL v12 = __OFADD__(v7, v11);
      v7 += v11;
      if (v12)
      {
        __break(1u);
        goto LABEL_18;
      }
      --v9;
    }
    while (v9);
    if (v7 > 0) {
      return result;
    }
  }
  uint64_t v13 = a2 + 16;
  uint64_t result = swift_beginAccess();
  uint64_t v14 = *(void *)(*(void *)v13 + 16);
  if (v14)
  {
    uint64_t v15 = 0;
    uint64_t v16 = (uint64_t *)(*(void *)v13 + 32);
    while (1)
    {
      uint64_t v17 = *v16++;
      BOOL v18 = __CFADD__(v15, v17);
      v15 += v17;
      if (v18) {
        break;
      }
      if (!--v14)
      {
        if (!v6) {
          return result;
        }
        goto LABEL_11;
      }
    }
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v6)
  {
LABEL_11:
    uint64_t v19 = 0;
    uint64_t v20 = (uint64_t *)(v5 + 32);
    while (1)
    {
      uint64_t v21 = *v20++;
      BOOL v18 = __CFADD__(v19, v21);
      v19 += v21;
      if (v18) {
        break;
      }
      if (!--v6) {
        return result;
      }
    }
LABEL_19:
    __break(1u);
  }
  return result;
}

void sub_256A43890(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  v22[0] = a5;
  uint64_t v9 = sub_256A39D2C((uint64_t *)&unk_269F78D38);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  BOOL v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = (uint64_t *)(a2 + 16);
  swift_beginAccess();
  uint64_t v16 = *(void *)(a2 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a2 + 16) = v16;
  if (isUniquelyReferenced_nonNull_native)
  {
    if ((a3 & 0x8000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  sub_256A47F9C(v16);
  uint64_t v16 = v20;
  *uint64_t v15 = v20;
  if ((a3 & 0x8000000000000000) != 0) {
    goto LABEL_8;
  }
LABEL_3:
  if (*(void *)(v16 + 16) > a3)
  {
    uint64_t v15 = (uint64_t *)(a4 + 16);
    *(void *)(v16 + 8 * a3 + 32) = v13;
    swift_endAccess();
    swift_beginAccess();
    uint64_t v16 = *(void *)(a4 + 16);
    char v18 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(a4 + 16) = v16;
    if (v18) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  __break(1u);
LABEL_10:
  sub_256A47F9C(v16);
  uint64_t v16 = v21;
  *uint64_t v15 = v21;
LABEL_5:
  if (*(void *)(v16 + 16) <= a3)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v16 + 8 * a3 + 32) = v14;
    swift_endAccess();
    sub_256A43780(a4, a2);
    v22[1] = v19;
    sub_256A39D2C(&qword_269F78D28);
    sub_256B3F930();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
}

void sub_256A43A78(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v25 = sub_256A39D2C((uint64_t *)&unk_269F78D38);
  uint64_t v12 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (uint64_t *)(a1 + 16);
  swift_beginAccess();
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v24 = a6;
  a6 = *(void *)(a1 + 16);
  unint64_t v16 = *(void *)(a6 + 16);
  if (v16 <= a2)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (*(void *)(a6 + 8 * a2 + 32)) {
    goto LABEL_7;
  }
  swift_beginAccess();
  uint64_t v6 = *v15;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v15 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_20;
  }
  while (1)
  {
    if (*(void *)(v6 + 16) <= a2)
    {
      __break(1u);
      return;
    }
    *(void *)(v6 + 8 * a2 + 32) = 1;
    a6 = *v15;
    swift_endAccess();
    unint64_t v16 = *(void *)(a6 + 16);
LABEL_7:
    if (v16 <= a2)
    {
LABEL_16:
      __break(1u);
    }
    else
    {
      uint64_t v15 = (uint64_t *)(a3 + 16);
      a6 = *(void *)(a6 + 8 * a2 + 32);
      swift_beginAccess();
      uint64_t v6 = *(void *)(a3 + 16);
      char v18 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(a3 + 16) = v6;
      if (v18) {
        goto LABEL_9;
      }
    }
    sub_256A47F9C(v6);
    uint64_t v6 = v22;
    *uint64_t v15 = v22;
LABEL_9:
    if (*(void *)(v6 + 16) <= a2)
    {
      __break(1u);
      goto LABEL_19;
    }
    a5 += 2;
    *(void *)(v6 + 8 * a2 + 32) = a6;
    swift_endAccess();
    sub_256A43780(a1, a3);
    uint64_t v26 = v19;
    a3 = sub_256A39D2C(&qword_269F78D28);
    sub_256B3F930();
    uint64_t v20 = *(void (**)(char *, uint64_t))(v12 + 8);
    v12 += 8;
    v20(v14, v25);
    swift_beginAccess();
    uint64_t v21 = *a5 + 1;
    if (!__OFADD__(*a5, 1)) {
      break;
    }
LABEL_19:
    __break(1u);
LABEL_20:
    sub_256A47F9C(v6);
    uint64_t v6 = v23;
    *uint64_t v15 = v23;
  }
  *a5 = v21;
  if (v21 == v24) {
    sub_256B3F940();
  }
}

void sub_256A43CF8(uint64_t a1)
{
  uint64_t v2 = sub_256A39D2C(&qword_269F78D30);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  int v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == *MEMORY[0x263F8F540])
  {
    if (qword_26B2B62D0 != -1) {
      swift_once();
    }
    uint64_t v7 = sub_256B3F4A0();
    sub_256A46E9C(v7, (uint64_t)qword_26B2C3FF8);
    uint64_t v8 = sub_256B3F470();
    os_log_type_t v9 = sub_256B3F9F0();
    if (!os_log_type_enabled(v8, v9)) {
      goto LABEL_12;
    }
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    uint64_t v11 = "Finish request download for settings";
LABEL_11:
    _os_log_impl(&dword_256A36000, v8, v9, v11, v10, 2u);
    MEMORY[0x25A2ABEE0](v10, -1, -1);
LABEL_12:

    return;
  }
  if (v6 == *MEMORY[0x263F8F548])
  {
    if (qword_26B2B62D0 != -1) {
      swift_once();
    }
    uint64_t v12 = sub_256B3F4A0();
    sub_256A46E9C(v12, (uint64_t)qword_26B2C3FF8);
    uint64_t v8 = sub_256B3F470();
    os_log_type_t v9 = sub_256B3F9F0();
    if (!os_log_type_enabled(v8, v9)) {
      goto LABEL_12;
    }
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    uint64_t v11 = "Cancelled download request updates for settings";
    goto LABEL_11;
  }
  if (qword_26B2B62D0 != -1) {
    swift_once();
  }
  uint64_t v13 = sub_256B3F4A0();
  sub_256A46E9C(v13, (uint64_t)qword_26B2C3FF8);
  uint64_t v14 = sub_256B3F470();
  os_log_type_t v15 = sub_256B3F9D0();
  if (os_log_type_enabled(v14, v15))
  {
    unint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v16 = 0;
    _os_log_impl(&dword_256A36000, v14, v15, "Unexpected termination while requesting download for settings", v16, 2u);
    MEMORY[0x25A2ABEE0](v16, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t CatalogClient.deinit()
{
  swift_release();
  swift_release();
  sub_256A39DB4(v0 + 32);
  return v0;
}

uint64_t CatalogClient.__deallocating_deinit()
{
  CatalogClient.deinit();

  return MEMORY[0x270FA0228](v0, 72, 7);
}

uint64_t sub_256A4407C(uint64_t a1)
{
  *(void *)(v1 + 64) = a1;
  return MEMORY[0x270F9A758]();
}

void sub_256A44088(uint64_t a1, uint64_t a2)
{
}

void sub_256A440AC(uint64_t a1, uint64_t a2)
{
}

void sub_256A440D0()
{
}

uint64_t sub_256A440F4()
{
  return sub_256A3F400();
}

uint64_t sub_256A44118(uint64_t a1, uint64_t a2)
{
  return sub_256A40A2C(a1, a2);
}

uint64_t sub_256A4413C(uint64_t a1, uint64_t a2)
{
  return sub_256A40A58(a1, a2);
}

uint64_t sub_256A44160(uint64_t a1, uint64_t a2)
{
  return sub_256A3EB08(a1, a2);
}

uint64_t sub_256A44184(uint64_t a1, uint64_t a2)
{
  return sub_256A3EB34(a1, a2);
}

void sub_256A441A8(unsigned char *a1)
{
}

void sub_256A441CC(unsigned char *a1)
{
}

unint64_t sub_256A441F0()
{
  return sub_256A40AF0() & 1;
}

uint64_t sub_256A44218()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_256A49F58;
  return sub_256A40B20();
}

unint64_t sub_256A442A8()
{
  return sub_256A41500() & 1;
}

uint64_t sub_256A442D0()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_256A49F58;
  return sub_256A415A8();
}

uint64_t sub_256A44360(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_256A49F5C;
  return sub_256A4199C(a1);
}

uint64_t sub_256A443F8()
{
  return sub_256A42540();
}

void sub_256A4441C()
{
}

void LocalCatalogClient.__allocating_init(resources:resourceBundles:statusBlock:informationBlock:)()
{
}

void LocalCatalogClient.init(resources:resourceBundles:statusBlock:informationBlock:)()
{
  sub_256A4A458();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  type metadata accessor for CatalogIndex();
  v1[2] = CatalogIndex.__allocating_init(resources:resourceBundles:)(v13, v11);
  v1[3] = v9;
  v1[4] = v7;
  v1[5] = v5;
  v1[6] = v3;
  type metadata accessor for TagAvailabilityInfo();
  sub_256A46F0C();
  swift_retain();
  swift_retain();
  v1[7] = sub_256B3F600();
  id v14 = objc_allocWithZone((Class)type metadata accessor for SiriResourceAvailabilityInfo());
  id v15 = SiriResourceAvailabilityInfo.init(enoughStorage:diskSpaceRequired:)(1, 0);
  swift_release();
  swift_release();
  v1[8] = v15;
  sub_256A4A2C0();
}

uint64_t sub_256A4459C()
{
  return sub_256A445B4();
}

uint64_t sub_256A445B4()
{
  return sub_256B3FA70();
}

uint64_t sub_256A445FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_256B073D8(a1, a2, a3);
}

uint64_t sub_256A44628@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = sub_256B05E94();
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    uint64_t v19 = v3;
    uint64_t v9 = v7 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_256A4819C(v9, (uint64_t)&v16);
      uint64_t v10 = v17;
      uint64_t v11 = v18;
      sub_256A39D70(&v16, v17);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(v11 + 32))(v10, v11) == a1 && v12 == a2) {
        break;
      }
      char v14 = sub_256B3FEA0();
      swift_bridgeObjectRelease();
      if (v14) {
        goto LABEL_12;
      }
      sub_256A39DB4((uint64_t)&v16);
      v9 += 40;
      if (!--v8)
      {
        swift_bridgeObjectRelease();
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRelease();
LABEL_12:
    swift_bridgeObjectRelease();
    sub_256A3A540(&v16, a3);
    return swift_bridgeObjectRelease();
  }
  else
  {
LABEL_10:
    *(void *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_256A44778()
{
  return sub_256B05E60();
}

uint64_t sub_256A447A4()
{
  return sub_256B05E94();
}

uint64_t sub_256A447D0()
{
  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t sub_256A447F8()
{
  return (*(uint64_t (**)(void))(v0 + 40))();
}

uint64_t sub_256A44820(unsigned __int8 *a1, void *a2)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  sub_256A47624((uint64_t)a2, v3);
  return swift_endAccess();
}

uint64_t sub_256A44880(uint64_t a1)
{
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = v1;
  return sub_256A4A0B4((uint64_t)sub_256A44898);
}

void sub_256A44898()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = type metadata accessor for TagAvailabilityInfo();
  sub_256A46F0C();
  uint64_t v27 = (objc_class *)v2;
  uint64_t v3 = sub_256B3F600();
  if (v1)
  {
    uint64_t v4 = *(void *)(v0 + 40);
    uint64_t v5 = *(void *)(v4 + 16);
    if (v5)
    {
      uint64_t v6 = *(void *)(v0 + 48) + 56;
      swift_bridgeObjectRetain();
      sub_256A4A04C();
      uint64_t v7 = 0;
      while (1)
      {
        uint64_t v8 = *(unsigned __int8 *)(v4 + v7 + 32);
        uint64_t v9 = *(void *)v6;
        if (*(void *)(*(void *)v6 + 16))
        {
          swift_bridgeObjectRetain();
          unint64_t v10 = sub_256A39F04(v8);
          if (v11)
          {
            id v12 = *(id *)(*(void *)(v9 + 56) + 8 * v10);
            swift_bridgeObjectRelease();
            swift_isUniquelyReferenced_nonNull_native();
            sub_256A4A984();
            sub_256A4A70C();
            if (v15) {
              goto LABEL_35;
            }
            uint64_t v16 = v13;
            char v17 = v14;
            sub_256A39D2C((uint64_t *)&unk_269F78BD8);
            if (sub_256A4AA50())
            {
              sub_256A4A984();
              sub_256A4A3A4();
              if (!v19) {
                goto LABEL_30;
              }
              uint64_t v16 = v18;
            }
            if ((v17 & 1) == 0)
            {
              sub_256A4A170();
              if (v15) {
                goto LABEL_36;
              }
LABEL_24:
              *(void *)(v3 + 16) = v20;
              goto LABEL_25;
            }
            goto LABEL_22;
          }
          swift_bridgeObjectRelease();
        }
        objc_allocWithZone(v27);
        id v12 = TagAvailabilityInfo.init(resourcesReady:enoughStorage:diskSpaceRequired:)();
        swift_isUniquelyReferenced_nonNull_native();
        sub_256A4A984();
        sub_256A4A70C();
        if (v15)
        {
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
          return;
        }
        uint64_t v16 = v21;
        char v23 = v22;
        sub_256A39D2C((uint64_t *)&unk_269F78BD8);
        if (sub_256A4AA50())
        {
          sub_256A4A984();
          sub_256A4A3A4();
          if (!v19)
          {
LABEL_30:
            sub_256B3FEF0();
            return;
          }
          uint64_t v16 = v24;
        }
        if ((v23 & 1) == 0)
        {
          sub_256A4A170();
          if (v15) {
            goto LABEL_34;
          }
          goto LABEL_24;
        }
LABEL_22:
        uint64_t v25 = *(void *)(v3 + 56);

        *(void *)(v25 + 8 * v16) = v12;
LABEL_25:
        swift_bridgeObjectRelease();
        if (v5 == ++v7)
        {
          swift_bridgeObjectRelease();
          break;
        }
      }
    }
  }
  sub_256A4A590();
  v26(v3);
}

uint64_t sub_256A44B2C(void *a1)
{
  id v1 = a1;

  return sub_256A4407C((uint64_t)v1);
}

id sub_256A44B54()
{
  return *(id *)(v0 + 64);
}

uint64_t LocalCatalogClient.deinit()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t LocalCatalogClient.__deallocating_deinit()
{
  LocalCatalogClient.deinit();

  return MEMORY[0x270FA0228](v0, 72, 7);
}

uint64_t sub_256A44BF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_256A445FC(a1, a2, a3);
}

uint64_t sub_256A44C18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_256A44628(a1, a2, a3);
}

uint64_t sub_256A44C3C()
{
  return sub_256A44778();
}

uint64_t sub_256A44C60()
{
  return sub_256A447A4();
}

uint64_t sub_256A44C84()
{
  return sub_256A447D0();
}

uint64_t sub_256A44CA8()
{
  return sub_256A447F8();
}

uint64_t sub_256A44CCC()
{
  return sub_256A4459C();
}

uint64_t sub_256A44CE4()
{
  id v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *id v1 = v0;
  v1[1] = sub_256A44D70;
  return CatalogClientProtocol.generativeExperiencesEssentialResourcesReady()();
}

uint64_t sub_256A44D70()
{
  sub_256A4A1FC();
  char v3 = v2;
  sub_256A49FD4();
  uint64_t v4 = *v1;
  sub_256A4A0C0();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  sub_256A4A590();
  if (v0) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v3 & 1;
  }
  return v6(v7);
}

uint64_t sub_256A44E44(uint64_t a1)
{
  char v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *char v3 = v1;
  v3[1] = sub_256A44EDC;
  return sub_256A44880(a1);
}

uint64_t sub_256A44EDC()
{
  sub_256A4A1FC();
  uint64_t v3 = v2;
  sub_256A49FD4();
  uint64_t v4 = *v1;
  sub_256A4A0C0();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  sub_256A4A590();
  if (!v0) {
    uint64_t v6 = v3;
  }
  return v7(v6);
}

id sub_256A44FA8()
{
  return sub_256A44B54();
}

uint64_t sub_256A44FCC()
{
  sub_256A4A458();
  uint64_t v1 = v0;
  *(void *)(swift_allocObject() + 16) = 0;
  v1();
  sub_256A4A2C0();
  return swift_release();
}

uint64_t sub_256A4505C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t (*)(uint64_t a1, uint64_t a2), uint64_t), void (*a6)(uint64_t, uint64_t (*)(uint64_t a1, uint64_t a2), uint64_t))
{
  uint64_t v54 = a5;
  uint64_t result = swift_beginAccess();
  uint64_t v12 = *(void *)(a1 + 16);
  BOOL v13 = __CFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a1 + 16) = v14;
    uint64_t v15 = sub_256A39D2C(&qword_26B2B52B8);
    uint64_t v49 = &v44;
    uint64_t v16 = *(void *)(v15 - 8);
    uint64_t v55 = a6;
    uint64_t v17 = v16;
    uint64_t v44 = v16;
    MEMORY[0x270FA5388](v15);
    uint64_t v18 = a1;
    uint64_t v45 = a1;
    uint64_t v46 = v15;
    uint64_t v20 = v19;
    uint64_t v47 = v19;
    unint64_t v53 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v21 = (char *)&v44 - v53;
    char v22 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
    uint64_t v51 = v17 + 16;
    uint64_t v52 = v22;
    v22((char *)&v44 - v53, a4, v15);
    uint64_t v23 = *(unsigned __int8 *)(v17 + 80);
    uint64_t v24 = (v23 + 40) & ~v23;
    uint64_t v50 = v23 | 7;
    uint64_t v48 = a4;
    unint64_t v25 = (v20 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v26 = (void *)swift_allocObject();
    uint64_t v27 = a3;
    uint64_t v28 = v54;
    uint64_t v29 = v26;
    v26[2] = v27;
    v26[3] = v18;
    v26[4] = a2;
    uint64_t v30 = (char *)v26 + v24;
    uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v44 + 32);
    v31(v30, v21, v15);
    uint64_t v32 = (void (*)(uint64_t, char *, uint64_t))v31;
    uint64_t v33 = (void (**)(uint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t))((char *)v29 + v25);
    uint64_t v34 = v55;
    *uint64_t v33 = v28;
    v33[1] = v34;
    aBlock[4] = sub_256A49B98;
    aBlock[5] = v29;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_256B371E0;
    aBlock[3] = &unk_27060D150;
    uint64_t v35 = _Block_copy(aBlock);
    swift_retain();
    uint64_t v36 = v45;
    swift_retain();
    id v37 = a2;
    swift_retain();
    swift_release();
    id v38 = objc_msgSend(v37, sel_remoteObjectProxyWithErrorHandler_, v35);
    _Block_release(v35);
    MEMORY[0x270FA5388](v39);
    uint64_t v40 = (char *)&v44 - v53;
    uint64_t v41 = v46;
    v52((char *)&v44 - v53, v48, v46);
    uint64_t v42 = swift_allocObject();
    *(void *)(v42 + 16) = v36;
    v32(v42 + ((v23 + 24) & ~v23), v40, v41);
    swift_retain();
    uint64_t v43 = swift_unknownObjectRetain();
    v28(v43, sub_256A49CE8, v42);
    swift_release();
    return swift_unknownObjectRelease_n();
  }
  return result;
}

uint64_t sub_256A453AC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t (*)(uint64_t a1, uint64_t a2), uint64_t), void (*a6)(uint64_t, uint64_t (*)(uint64_t a1, uint64_t a2), uint64_t))
{
  uint64_t v44 = a5;
  uint64_t v11 = sub_256A39D2C(&qword_269F78D58);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = swift_beginAccess();
  uint64_t v16 = *(void *)(a1 + 16);
  BOOL v17 = __CFADD__(v16, 1);
  uint64_t v18 = v16 + 1;
  if (v17)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a1 + 16) = v18;
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    uint64_t v38 = v12 + 16;
    uint64_t v43 = v19;
    v19((char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a4, v11);
    uint64_t v20 = *(unsigned __int8 *)(v12 + 80);
    uint64_t v21 = v13;
    uint64_t v42 = v13;
    char v22 = a6;
    uint64_t v23 = (v20 + 40) & ~v20;
    uint64_t v40 = a4;
    uint64_t v41 = v20 | 7;
    unint64_t v24 = (v21 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v25 = (void *)swift_allocObject();
    uint64_t v26 = v11;
    uint64_t v37 = v11;
    uint64_t v27 = v12;
    uint64_t v28 = v25;
    v25[2] = a3;
    v25[3] = a1;
    v25[4] = a2;
    uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
    v39((char *)v25 + v23, v14, v26);
    uint64_t v29 = (void (**)(uint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t))((char *)v28 + v24);
    *uint64_t v29 = v44;
    v29[1] = v22;
    aBlock[4] = sub_256A499C8;
    aBlock[5] = v28;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_256B371E0;
    aBlock[3] = &unk_270608058;
    uint64_t v30 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    id v31 = a2;
    swift_retain();
    swift_release();
    id v32 = objc_msgSend(v31, sel_remoteObjectProxyWithErrorHandler_, v30);
    _Block_release(v30);
    uint64_t v33 = v37;
    v43(v14, v40, v37);
    uint64_t v34 = swift_allocObject();
    *(void *)(v34 + 16) = a1;
    v39((char *)(v34 + ((v20 + 24) & ~v20)), v14, v33);
    swift_retain();
    uint64_t v35 = swift_unknownObjectRetain();
    v44(v35, sub_256A49A1C, v34);
    swift_release();
    return swift_unknownObjectRelease_n();
  }
  return result;
}

void sub_256A456B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t *a21)
{
  sub_256A4A6AC();
  char v22 = v21;
  uint64_t v76 = v23;
  os_log_t v77 = v24;
  uint64_t v78 = v25;
  uint64_t v75 = v26;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  id v32 = v31;
  uint64_t v33 = sub_256B3F4A0();
  sub_256A49FB8();
  uint64_t v35 = v34;
  uint64_t v37 = MEMORY[0x270FA5388](v36);
  uint64_t v39 = (char *)&v68 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v37);
  uint64_t v41 = (char *)&v68 - v40;
  sub_256A4A04C();
  unint64_t v42 = *(void *)(v28 + 16);
  uint64_t v74 = v30;
  if (sub_256B3D234(v32, v42))
  {
    uint64_t v72 = v22;
    if (qword_26B2B6348 != -1) {
      swift_once();
    }
    sub_256A46E9C(v33, (uint64_t)qword_26B2B63D0);
    sub_256A4A04C();
    sub_256A4AB70();
    v43();
    id v44 = v32;
    id v45 = v32;
    swift_retain();
    uint64_t v46 = sub_256B3F470();
    os_log_type_t v47 = sub_256B3F9D0();
    os_log_t v73 = v46;
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = sub_256A4A8A8();
      uint64_t v69 = (void *)swift_slowAlloc();
      uint64_t v70 = sub_256A4A8A8();
      v80[0] = v70;
      *(_DWORD *)uint64_t v48 = 136315650;
      uint64_t v71 = v28 + 16;
      sub_256A4A04C();
      uint64_t v49 = qword_269F78AD0;
      uint64_t v50 = off_269F78AD8;
      swift_bridgeObjectRetain();
      uint64_t v79 = sub_256B3B598(v49, (unint64_t)v50, v80);
      sub_256A4A538();
      swift_bridgeObjectRelease();
      *(_WORD *)(v48 + 12) = 2112;
      id v51 = v32;
      uint64_t v52 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v79 = v52;
      sub_256A4A538();
      *uint64_t v69 = v52;

      *(_WORD *)(v48 + 22) = 2048;
      sub_256A4A04C();
      sub_256A4A6E8(*(void *)(v28 + 16));
      swift_release();
      os_log_t v53 = v73;
      _os_log_impl(&dword_256A36000, v73, v47, "%s async: connection error during call: %@, num connection attempts: %lu", (uint8_t *)v48, 0x20u);
      sub_256A39D2C(&qword_26B2B60C8);
      swift_arrayDestroy();
      sub_256A4A158();
      sub_256A4AB50();
      swift_arrayDestroy();
      sub_256A4A158();
      sub_256A4A158();
    }
    else
    {

      swift_release();
    }
    (*(void (**)(char *, uint64_t))(v35 + 8))(v41, v33);
    v72(v28, v75, v74, v78, v76, v77);
  }
  else
  {
    uint64_t v54 = a21;
    if (qword_26B2B6348 != -1) {
      swift_once();
    }
    sub_256A46E9C(v33, (uint64_t)qword_26B2B63D0);
    sub_256A4A04C();
    sub_256A4AB70();
    v55();
    id v56 = v32;
    id v57 = v32;
    swift_retain();
    uint64_t v58 = sub_256B3F470();
    os_log_type_t v59 = sub_256B3F9D0();
    os_log_t v77 = v58;
    if (os_log_type_enabled(v58, v59))
    {
      uint64_t v60 = sub_256A4A8A8();
      uint64_t v76 = a21;
      uint64_t v61 = v60;
      uint64_t v74 = (void *)swift_slowAlloc();
      uint64_t v75 = sub_256A4A8A8();
      v80[0] = v75;
      *(_DWORD *)uint64_t v61 = 136315650;
      uint64_t v71 = v28 + 16;
      sub_256A4A04C();
      uint64_t v62 = qword_269F78AD0;
      uint64_t v63 = off_269F78AD8;
      swift_bridgeObjectRetain();
      uint64_t v79 = sub_256B3B598(v62, (unint64_t)v63, v80);
      sub_256A4A538();
      swift_bridgeObjectRelease();
      *(_WORD *)(v61 + 12) = 2112;
      id v64 = v32;
      uint64_t v65 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v79 = v65;
      sub_256A4A538();
      void *v74 = v65;

      *(_WORD *)(v61 + 22) = 2048;
      sub_256A4A04C();
      sub_256A4A6E8(*(void *)(v28 + 16));
      swift_release();
      os_log_t v66 = v77;
      _os_log_impl(&dword_256A36000, v77, v59, "%s async: connection error during call: %@ reached max num connection attempts: %lu", (uint8_t *)v61, 0x20u);
      sub_256A39D2C(&qword_26B2B60C8);
      swift_arrayDestroy();
      sub_256A4A158();
      swift_arrayDestroy();
      sub_256A4A158();
      uint64_t v54 = v76;
      sub_256A4A158();
    }
    else
    {

      swift_release();
    }
    (*(void (**)(char *, uint64_t))(v35 + 8))(v39, v33);
    v80[0] = (uint64_t)v32;
    id v67 = v32;
    sub_256A39D2C(v54);
    sub_256B3F8D0();
  }
  sub_256A4A554();
}

uint64_t sub_256A45CAC(void *a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v8 = sub_256B3F4A0();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  uint64_t v15 = (char *)&v53 - v14;
  MEMORY[0x270FA5388](v13);
  BOOL v17 = (char *)&v53 - v16;
  if (a2)
  {
    id v18 = a2;
    if (qword_26B2B6348 != -1) {
      swift_once();
    }
    uint64_t v19 = sub_256A46E9C(v8, (uint64_t)qword_26B2B63D0);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v17, v19, v8);
    id v20 = a2;
    id v21 = a2;
    swift_retain();
    char v22 = sub_256B3F470();
    os_log_type_t v23 = sub_256B3F9D0();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      id v55 = a4;
      uint64_t v26 = (void *)v25;
      uint64_t v54 = swift_slowAlloc();
      uint64_t v60 = v54;
      *(_DWORD *)uint64_t v24 = 136315650;
      uint64_t v57 = v9;
      swift_beginAccess();
      uint64_t v56 = v8;
      uint64_t v28 = qword_269F78AD0;
      uint64_t v27 = off_269F78AD8;
      swift_bridgeObjectRetain();
      uint64_t v59 = sub_256B3B598(v28, (unint64_t)v27, &v60);
      sub_256B3FAA0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v24 + 12) = 2112;
      id v29 = a2;
      uint64_t v30 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v59 = v30;
      sub_256B3FAA0();
      *uint64_t v26 = v30;

      *(_WORD *)(v24 + 22) = 2048;
      swift_beginAccess();
      uint64_t v58 = *(void *)(a3 + 16);
      sub_256B3FAA0();
      swift_release();
      _os_log_impl(&dword_256A36000, v22, v23, "%s async: method error during call: %@, num connection attempts: %lu", (uint8_t *)v24, 0x20u);
      sub_256A39D2C(&qword_26B2B60C8);
      swift_arrayDestroy();
      MEMORY[0x25A2ABEE0](v26, -1, -1);
      uint64_t v31 = v54;
      swift_arrayDestroy();
      MEMORY[0x25A2ABEE0](v31, -1, -1);
      MEMORY[0x25A2ABEE0](v24, -1, -1);

      (*(void (**)(char *, uint64_t))(v57 + 8))(v17, v56);
    }
    else
    {

      swift_release();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v17, v8);
    }
    uint64_t v60 = (uint64_t)a2;
LABEL_13:
    sub_256A39D2C(&qword_26B2B52B8);
    return sub_256B3F8D0();
  }
  if (!a1)
  {
    if (qword_26B2B6348 != -1) {
      swift_once();
    }
    uint64_t v44 = sub_256A46E9C(v8, (uint64_t)qword_26B2B63D0);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v44, v8);
    swift_retain();
    id v45 = sub_256B3F470();
    os_log_type_t v46 = sub_256B3F9D0();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = swift_slowAlloc();
      uint64_t v48 = swift_slowAlloc();
      uint64_t v60 = v48;
      *(_DWORD *)uint64_t v47 = 136315394;
      uint64_t v57 = v9;
      swift_beginAccess();
      uint64_t v56 = v8;
      uint64_t v50 = qword_269F78AD0;
      uint64_t v49 = off_269F78AD8;
      swift_bridgeObjectRetain();
      uint64_t v59 = sub_256B3B598(v50, (unint64_t)v49, &v60);
      sub_256B3FAA0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v47 + 12) = 2048;
      swift_beginAccess();
      uint64_t v58 = *(void *)(a3 + 16);
      sub_256B3FAA0();
      swift_release();
      _os_log_impl(&dword_256A36000, v45, v46, "%s async: throwing neither result or error returned, num connection attempts: %lu", (uint8_t *)v47, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25A2ABEE0](v48, -1, -1);
      MEMORY[0x25A2ABEE0](v47, -1, -1);

      (*(void (**)(char *, uint64_t))(v57 + 8))(v12, v56);
    }
    else
    {

      swift_release();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    }
    sub_256A4993C();
    uint64_t v51 = swift_allocError();
    *uint64_t v52 = 2;
    uint64_t v60 = v51;
    goto LABEL_13;
  }
  uint64_t v32 = qword_26B2B6348;
  id v33 = a1;
  if (v32 != -1) {
    swift_once();
  }
  uint64_t v34 = sub_256A46E9C(v8, (uint64_t)qword_26B2B63D0);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v15, v34, v8);
  swift_retain();
  uint64_t v35 = sub_256B3F470();
  os_log_type_t v36 = sub_256B3F9C0();
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = swift_slowAlloc();
    uint64_t v38 = swift_slowAlloc();
    id v55 = v33;
    uint64_t v39 = v38;
    uint64_t v60 = v38;
    *(_DWORD *)uint64_t v37 = 136315394;
    uint64_t v57 = v9;
    swift_beginAccess();
    uint64_t v56 = v8;
    uint64_t v41 = qword_269F78AD0;
    uint64_t v40 = off_269F78AD8;
    swift_bridgeObjectRetain();
    uint64_t v59 = sub_256B3B598(v41, (unint64_t)v40, &v60);
    sub_256B3FAA0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v37 + 12) = 2048;
    swift_beginAccess();
    uint64_t v58 = *(void *)(a3 + 16);
    sub_256B3FAA0();
    swift_release();
    _os_log_impl(&dword_256A36000, v35, v36, "%s async: method returned non-nil result, num connection attempts: %lu", (uint8_t *)v37, 0x16u);
    swift_arrayDestroy();
    uint64_t v42 = v39;
    id v33 = v55;
    MEMORY[0x25A2ABEE0](v42, -1, -1);
    MEMORY[0x25A2ABEE0](v37, -1, -1);

    (*(void (**)(char *, uint64_t))(v57 + 8))(v15, v56);
  }
  else
  {

    swift_release();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
  }
  uint64_t v60 = (uint64_t)v33;
  sub_256A39D2C(&qword_26B2B52B8);
  return sub_256B3F8E0();
}

uint64_t sub_256A46558(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v54 = a4;
  uint64_t v7 = sub_256B3F4A0();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v9);
  uint64_t v14 = (char *)&v50 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v50 - v15;
  if (a2)
  {
    id v17 = a2;
    if (qword_26B2B6348 != -1) {
      swift_once();
    }
    uint64_t v18 = sub_256A46E9C(v7, (uint64_t)qword_26B2B63D0);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v16, v18, v7);
    id v19 = a2;
    id v20 = a2;
    swift_retain();
    id v21 = sub_256B3F470();
    os_log_type_t v22 = sub_256B3F9D0();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v24 = (void *)swift_slowAlloc();
      uint64_t v51 = swift_slowAlloc();
      uint64_t v57 = v51;
      *(_DWORD *)uint64_t v23 = 136315650;
      uint64_t v52 = v8;
      swift_beginAccess();
      uint64_t v53 = v7;
      uint64_t v26 = qword_269F78AD0;
      uint64_t v25 = off_269F78AD8;
      swift_bridgeObjectRetain();
      uint64_t v56 = sub_256B3B598(v26, (unint64_t)v25, &v57);
      sub_256B3FAA0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2112;
      id v27 = a2;
      uint64_t v28 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v56 = v28;
      sub_256B3FAA0();
      *uint64_t v24 = v28;

      *(_WORD *)(v23 + 22) = 2048;
      swift_beginAccess();
      uint64_t v55 = *(void *)(a3 + 16);
      sub_256B3FAA0();
      swift_release();
      _os_log_impl(&dword_256A36000, v21, v22, "%s async: method error during call: %@, num connection attempts: %lu", (uint8_t *)v23, 0x20u);
      sub_256A39D2C(&qword_26B2B60C8);
      swift_arrayDestroy();
      MEMORY[0x25A2ABEE0](v24, -1, -1);
      uint64_t v29 = v51;
      swift_arrayDestroy();
      MEMORY[0x25A2ABEE0](v29, -1, -1);
      MEMORY[0x25A2ABEE0](v23, -1, -1);

      (*(void (**)(char *, uint64_t))(v52 + 8))(v16, v53);
    }
    else
    {

      swift_release();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v16, v7);
    }
    uint64_t v57 = (uint64_t)a2;
LABEL_13:
    sub_256A39D2C(&qword_269F78D58);
    return sub_256B3F8D0();
  }
  if (!a1)
  {
    if (qword_26B2B6348 != -1) {
      swift_once();
    }
    uint64_t v39 = sub_256A46E9C(v7, (uint64_t)qword_26B2B63D0);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v39, v7);
    swift_retain();
    uint64_t v40 = sub_256B3F470();
    os_log_type_t v41 = sub_256B3F9D0();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = swift_slowAlloc();
      uint64_t v43 = swift_slowAlloc();
      uint64_t v57 = v43;
      *(_DWORD *)uint64_t v42 = 136315394;
      uint64_t v44 = a3;
      uint64_t v45 = v8;
      swift_beginAccess();
      uint64_t v53 = v7;
      uint64_t v47 = qword_269F78AD0;
      os_log_type_t v46 = off_269F78AD8;
      swift_bridgeObjectRetain();
      uint64_t v56 = sub_256B3B598(v47, (unint64_t)v46, &v57);
      sub_256B3FAA0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v42 + 12) = 2048;
      swift_beginAccess();
      uint64_t v55 = *(void *)(v44 + 16);
      sub_256B3FAA0();
      swift_release();
      _os_log_impl(&dword_256A36000, v40, v41, "%s async: throwing neither result or error returned, num connection attempts: %lu", (uint8_t *)v42, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25A2ABEE0](v43, -1, -1);
      MEMORY[0x25A2ABEE0](v42, -1, -1);

      (*(void (**)(char *, uint64_t))(v45 + 8))(v11, v53);
    }
    else
    {

      swift_release();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    }
    sub_256A4993C();
    uint64_t v48 = swift_allocError();
    *uint64_t v49 = 2;
    uint64_t v57 = v48;
    goto LABEL_13;
  }
  uint64_t v30 = qword_26B2B6348;
  swift_bridgeObjectRetain();
  if (v30 != -1) {
    swift_once();
  }
  uint64_t v31 = sub_256A46E9C(v7, (uint64_t)qword_26B2B63D0);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v14, v31, v7);
  swift_retain();
  uint64_t v32 = sub_256B3F470();
  os_log_type_t v33 = sub_256B3F9C0();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    uint64_t v57 = v35;
    *(_DWORD *)uint64_t v34 = 136315394;
    uint64_t v52 = v8;
    swift_beginAccess();
    uint64_t v53 = v7;
    uint64_t v37 = qword_269F78AD0;
    os_log_type_t v36 = off_269F78AD8;
    swift_bridgeObjectRetain();
    uint64_t v56 = sub_256B3B598(v37, (unint64_t)v36, &v57);
    sub_256B3FAA0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v34 + 12) = 2048;
    swift_beginAccess();
    uint64_t v55 = *(void *)(a3 + 16);
    sub_256B3FAA0();
    swift_release();
    _os_log_impl(&dword_256A36000, v32, v33, "%s async: method returned non-nil result, num connection attempts: %lu", (uint8_t *)v34, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25A2ABEE0](v35, -1, -1);
    MEMORY[0x25A2ABEE0](v34, -1, -1);

    (*(void (**)(char *, uint64_t))(v52 + 8))(v14, v53);
  }
  else
  {

    swift_release();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v7);
  }
  uint64_t v57 = a1;
  sub_256A39D2C(&qword_269F78D58);
  return sub_256B3F8E0();
}

uint64_t sub_256A46DF8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

unint64_t sub_256A46E50()
{
  unint64_t result = qword_269F78B18;
  if (!qword_269F78B18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F78B18);
  }
  return result;
}

uint64_t sub_256A46E9C(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_256A46ED4(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t type metadata accessor for TagAvailabilityInfo()
{
  return self;
}

unint64_t sub_256A46F0C()
{
  unint64_t result = qword_269F78B90;
  if (!qword_269F78B90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F78B90);
  }
  return result;
}

uint64_t type metadata accessor for SiriResourceAvailabilityInfo()
{
  return self;
}

uint64_t sub_256A46F7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

void sub_256A46FA4()
{
  uint64_t v1 = *v0;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t *v0 = v1;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_256B07B0C();
    uint64_t *v0 = v3;
  }
}

uint64_t sub_256A46FF0(uint64_t result)
{
  if (result + 1 > *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    return sub_256B3F880();
  }
  return result;
}

void sub_256A4701C(uint64_t a1)
{
  if (a1 + 1 > *(void *)(*(void *)v1 + 24) >> 1)
  {
    sub_256B07B0C();
    *(void *)uint64_t v1 = v2;
  }
}

uint64_t sub_256A4705C(uint64_t a1, uint64_t a2)
{
  return sub_256A47354(a1, a2);
}

uint64_t sub_256A47068()
{
  sub_256A4AAF8();
  if (v3 < 0)
  {
    sub_256A49FEC();
    sub_256A4A1D4();
LABEL_11:
    uint64_t result = sub_256A4A4B8();
    __break(1u);
    return result;
  }
  if (v2 + 16 * v1 > v0 && v0 + 16 * v1 > v2)
  {
    sub_256A49FEC();
    sub_256A4A1C4();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

uint64_t sub_256A47114(uint64_t a1, uint64_t a2)
{
  return sub_256A47354(a1, a2);
}

uint64_t sub_256A47120(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_256A49FEC();
    sub_256A4A1D4();
LABEL_11:
    uint64_t result = sub_256A4A4B8();
    __break(1u);
    return result;
  }
  sub_256A4A3C8();
  sub_256B3F300();
  sub_256A4A838();
  uint64_t v7 = *(void *)(v6 + 72) * v3;
  unint64_t v8 = a3 + v7;
  unint64_t v9 = v4 + v7;
  if (v8 > v4 && v9 > a3)
  {
    sub_256A49FEC();
    sub_256A4A1C4();
    goto LABEL_11;
  }
  sub_256A4A4EC();

  return swift_arrayInitWithCopy();
}

uint64_t sub_256A471F4()
{
  sub_256A4AAF8();
  if (v3 < 0)
  {
    sub_256A49FEC();
    sub_256A4A1D4();
LABEL_11:
    uint64_t result = sub_256A4A4B8();
    __break(1u);
    return result;
  }
  if (v2 + 24 * v1 > v0 && v0 + 24 * v1 > v2)
  {
    sub_256A49FEC();
    sub_256A4A1C4();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

uint64_t sub_256A472A4()
{
  sub_256A4AAF8();
  if (v3 < 0)
  {
    sub_256A49FEC();
    sub_256A4A1D4();
LABEL_11:
    uint64_t result = sub_256A4A4B8();
    __break(1u);
    return result;
  }
  if (v2 + 40 * v1 > v0 && v0 + 40 * v1 > v2)
  {
    sub_256A49FEC();
    sub_256A4A1C4();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

uint64_t sub_256A47354(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_256A49FEC();
    sub_256A4A1D4();
LABEL_11:
    uint64_t result = sub_256A4A4B8();
    __break(1u);
    return result;
  }
  sub_256A4A3C8();
  if (v4 + 40 * v3 > v2 && v2 + 40 * v3 > v4)
  {
    sub_256A49FEC();
    sub_256A4A1C4();
    goto LABEL_11;
  }
  sub_256A39D2C(v5);
  sub_256A4A4EC();

  return swift_arrayInitWithCopy();
}

uint64_t sub_256A47414(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_256A49FEC();
    sub_256A4A1D4();
LABEL_11:
    uint64_t result = sub_256A4A4B8();
    __break(1u);
    return result;
  }
  sub_256A4A3C8();
  if (v4 + 32 * v3 > v2 && v2 + 32 * v3 > v4)
  {
    sub_256A49FEC();
    sub_256A4A1C4();
    goto LABEL_11;
  }
  sub_256A39D2C(&qword_269F78D20);
  sub_256A4A4EC();

  return swift_arrayInitWithCopy();
}

void *sub_256A474D8()
{
  sub_256A4AAF8();
  if (v3 < 0)
  {
    sub_256A49FEC();
    sub_256A4A1D4();
LABEL_11:
    uint64_t result = (void *)sub_256A4A4B8();
    __break(1u);
    return result;
  }
  if (&v2[v1] > v0 && &v0[v1] > v2)
  {
    sub_256A49FEC();
    sub_256A4A1C4();
    goto LABEL_11;
  }

  return memcpy(v2, v0, v1);
}

uint64_t sub_256A4757C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_256A4A7FC();
  sub_256A4A75C();
  sub_256A4A37C();
  sub_256A476A4();
  *uint64_t v10 = a10;
  sub_256A4A7B8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_256A475D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_256A4A7FC();
  sub_256A4A75C();
  sub_256A4A37C();
  sub_256A4778C();
  *uint64_t v10 = a10;
  sub_256A4A7B8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_256A47624(uint64_t a1, uint64_t a2)
{
  swift_isUniquelyReferenced_nonNull_native();
  uint64_t v6 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  sub_256A47988(a1, a2);
  uint64_t *v2 = v6;

  return swift_bridgeObjectRelease();
}

uint64_t sub_256A476A4()
{
  sub_256A4A458();
  sub_256A4A428();
  sub_256A4A2E0();
  if (v3)
  {
    __break(1u);
LABEL_14:
    uint64_t result = sub_256B3FEF0();
    __break(1u);
    return result;
  }
  uint64_t v4 = v1;
  char v5 = v2;
  sub_256A39D2C(&qword_26B2B33E8);
  if (sub_256A4A498())
  {
    sub_256A39CC8();
    sub_256A4A3A4();
    if (!v7) {
      goto LABEL_14;
    }
    uint64_t v4 = v6;
  }
  if (v5)
  {
    sub_256A39DB4(*(void *)(*(void *)v0 + 56) + 40 * v4);
    sub_256A4A370();
    sub_256A4A2C0();
    return sub_256A3A540(v8, v9);
  }
  else
  {
    sub_256A4A74C();
    sub_256A47BA4(v12, v13, v14, v15, v16);
    sub_256A4A2C0();
    return swift_bridgeObjectRetain();
  }
}

_OWORD *sub_256A4778C()
{
  sub_256A4A458();
  sub_256A4A428();
  sub_256A4A2E0();
  if (v3)
  {
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v4 = v1;
  char v5 = v2;
  sub_256A39D2C((uint64_t *)&unk_269F78D00);
  if ((sub_256A4A498() & 1) == 0) {
    goto LABEL_5;
  }
  unint64_t v6 = sub_256A39CC8();
  if ((v5 & 1) != (v7 & 1))
  {
LABEL_13:
    uint64_t result = (_OWORD *)sub_256B3FEF0();
    __break(1u);
    return result;
  }
  unint64_t v4 = v6;
LABEL_5:
  if (v5)
  {
    sub_256A39DB4(*(void *)(*(void *)v0 + 56) + 32 * v4);
    sub_256A4A370();
    sub_256A4A2C0();
    return sub_256A3A530(v8, v9);
  }
  else
  {
    sub_256A4A74C();
    sub_256A47BD0(v12, v13, v14, v15, v16);
    sub_256A4A2C0();
    return (_OWORD *)swift_bridgeObjectRetain();
  }
}

void sub_256A47878()
{
  sub_256A4A6AC();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  sub_256A4A3C8();
  sub_256A39CC8();
  sub_256A4A2E0();
  if (v9)
  {
    __break(1u);
LABEL_12:
    sub_256B3FEF0();
    __break(1u);
    return;
  }
  unint64_t v10 = v7;
  char v11 = v8;
  sub_256A39D2C(&qword_26B2B6508);
  if (sub_256B3FC00())
  {
    sub_256A39CC8();
    sub_256A4A3A4();
    if (!v13) {
      goto LABEL_12;
    }
    unint64_t v10 = v12;
  }
  uint64_t v14 = *v1;
  if (v11)
  {
    uint64_t v15 = (uint64_t *)(v14[7] + 16 * v10);
    swift_bridgeObjectRelease();
    *uint64_t v15 = v2;
    v15[1] = v0;
    sub_256A4A554();
  }
  else
  {
    sub_256A47C3C(v10, v6, v4, v2, v0, v14);
    sub_256A4A554();
    swift_bridgeObjectRetain();
  }
}

void sub_256A47988(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void **)v2;
  uint64_t v6 = (void *)*v2;
  unint64_t v7 = sub_256A39F04(a2);
  if (__OFADD__(v6[2], (v8 & 1) == 0))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v9 = v7;
  char v10 = v8;
  sub_256A39D2C((uint64_t *)&unk_269F78BD8);
  if ((sub_256B3FC00() & 1) == 0) {
    goto LABEL_5;
  }
  unint64_t v11 = sub_256A39F04(a2);
  if ((v10 & 1) != (v12 & 1))
  {
LABEL_11:
    sub_256B3FEF0();
    __break(1u);
    return;
  }
  unint64_t v9 = v11;
LABEL_5:
  char v13 = *v3;
  if (v10)
  {
    uint64_t v14 = v13[7];

    *(void *)(v14 + 8 * v9) = a1;
  }
  else
  {
    sub_256A47C88(v9, a2, a1, v13);
  }
}

uint64_t sub_256A47A98()
{
  sub_256A4A458();
  sub_256A39F48();
  sub_256A4A2E0();
  if (v3)
  {
    __break(1u);
LABEL_14:
    sub_256A39D2C(&qword_26B2B5C10);
    uint64_t result = sub_256B3FEF0();
    __break(1u);
    return result;
  }
  uint64_t v4 = v1;
  char v5 = v2;
  sub_256A39D2C(&qword_269F78CF8);
  if (sub_256A4A498())
  {
    sub_256A39F48();
    sub_256A4A3A4();
    if (!v7) {
      goto LABEL_14;
    }
    uint64_t v4 = v6;
  }
  if (v5)
  {
    sub_256A39DB4(*(void *)(*(void *)v0 + 56) + 40 * v4);
    sub_256A4A370();
    sub_256A4A2C0();
    return sub_256A3A540(v8, v9);
  }
  else
  {
    sub_256A4A74C();
    sub_256A47BA4(v12, v13, v14, v15, v16);
    sub_256A4A2C0();
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_256A47BA4(unint64_t a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5)
{
  uint64_t result = sub_256A4A0D0(a1, a2, a3, a4, a5);
  if (v8) {
    __break(1u);
  }
  else {
    *(void *)(v5 + 16) = v7;
  }
  return result;
}

_OWORD *sub_256A47BD0(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_256A3A530(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

unint64_t sub_256A47C3C(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  uint64_t v6 = (void *)(a6[6] + 16 * result);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t v7 = (void *)(a6[7] + 16 * result);
  *uint64_t v7 = a4;
  v7[1] = a5;
  uint64_t v8 = a6[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a6[2] = v10;
  }
  return result;
}

unint64_t sub_256A47C88(unint64_t result, char a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(unsigned char *)(a4[6] + result) = a2;
  *(void *)(a4[7] + 8 * result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

void sub_256A47CCC()
{
}

void sub_256A47CEC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v5 > *(void *)(v3 + 24) >> 1)
  {
    if (v4 <= v5) {
      uint64_t v8 = v4 + v2;
    }
    else {
      uint64_t v8 = v4;
    }
    sub_256B07BE4(isUniquelyReferenced_nonNull_native, v8, 1, v3);
    uint64_t v3 = v9;
  }
  if (!*(void *)(a1 + 16))
  {
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  sub_256A47414(a1 + 32, v2);
  if (!v2)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return;
  }
  uint64_t v10 = *(void *)(v3 + 16);
  BOOL v11 = __OFADD__(v10, v2);
  uint64_t v12 = v10 + v2;
  if (!v11)
  {
    *(void *)(v3 + 16) = v12;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
}

void sub_256A47DC8()
{
}

void sub_256A47DE8()
{
  sub_256A4A458();
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *v0;
  uint64_t v5 = *(void *)(*v0 + 16);
  if (__OFADD__(v5, v3))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v6 = v2;
  uint64_t v7 = v1;
  if (!swift_isUniquelyReferenced_nonNull_native() || v5 + v3 > *(void *)(v4 + 24) >> 1) {
    uint64_t v4 = v6();
  }
  if (!*(void *)(v7 + 16))
  {
    if (!v3) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  sub_256A4A99C();
  if (v8 != v9)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_256A47354(v7 + 32, v3);
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    uint64_t *v0 = v4;
    sub_256A4A2C0();
    return;
  }
  uint64_t v10 = *(void *)(v4 + 16);
  BOOL v9 = __OFADD__(v10, v3);
  uint64_t v11 = v10 + v3;
  if (!v9)
  {
    *(void *)(v4 + 16) = v11;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void sub_256A47ECC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v5 > *(void *)(v3 + 24) >> 1)
  {
    if (v4 <= v5) {
      uint64_t v8 = v4 + v2;
    }
    else {
      uint64_t v8 = v4;
    }
    sub_256B07DF8(isUniquelyReferenced_nonNull_native, v8, 1, v3);
    uint64_t v3 = v9;
  }
  if (!*(void *)(a1 + 16))
  {
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
  sub_256A4A99C();
  if (v10 != v11)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  sub_256A474D8();
  if (!v2)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return;
  }
  uint64_t v12 = *(void *)(v3 + 16);
  BOOL v11 = __OFADD__(v12, v2);
  uint64_t v13 = v12 + v2;
  if (!v11)
  {
    *(void *)(v3 + 16) = v13;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
}

void sub_256A47F9C(uint64_t a1)
{
}

uint64_t sub_256A47FB0()
{
  sub_256A4AC10();
  uint64_t v8 = v2;
  uint64_t v9 = v3;
  sub_256A49D7C((uint64_t *)&v7);
  sub_256A4A838();
  (*(void (**)(void))(v4 + 32))();
  uint64_t v5 = *v0;
  *(void *)(v5 + 16) = v1 + 1;
  return sub_256A3A540(&v7, v5 + 40 * v1 + 32);
}

uint64_t type metadata accessor for ResourceContainer()
{
  return self;
}

uint64_t sub_256A4805C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_256A39D2C(&qword_26B2B6340);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_256A480C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

unint64_t sub_256A480EC()
{
  unint64_t result = qword_26B2B51B0;
  if (!qword_26B2B51B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B51B0);
  }
  return result;
}

uint64_t type metadata accessor for ResourceBundleContainer()
{
  return self;
}

uint64_t sub_256A4815C()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_256A48194(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_256A42088(a1, a2, a3, *(void *)(v3 + 16));
}

uint64_t sub_256A4819C(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  sub_256A4A838();
  (*v3)(a2);
  return a2;
}

uint64_t sub_256A481FC(uint64_t a1)
{
  return sub_256A4300C(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t method lookup function for ResourceContainer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ResourceContainer);
}

uint64_t dispatch thunk of ResourceContainer.__allocating_init(resourceData:resourceType:assetBacked:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of ResourceContainer.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t method lookup function for ResourceBundleContainer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ResourceBundleContainer);
}

uint64_t dispatch thunk of ResourceBundleContainer.__allocating_init(resourceBundleData:resourceBundleType:assetBacked:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of ResourceBundleContainer.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t method lookup function for TagAvailabilityInfo(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for TagAvailabilityInfo);
}

uint64_t dispatch thunk of TagAvailabilityInfo.__allocating_init(resourcesReady:enoughStorage:diskSpaceRequired:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of TagAvailabilityInfo.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t method lookup function for SiriResourceAvailabilityInfo(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SiriResourceAvailabilityInfo);
}

uint64_t dispatch thunk of SiriResourceAvailabilityInfo.__allocating_init(enoughStorage:diskSpaceRequired:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of SiriResourceAvailabilityInfo.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

ValueMetadata *type metadata accessor for CatalogService()
{
  return &type metadata for CatalogService;
}

uint64_t dispatch thunk of CatalogClientProtocol.resource(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of CatalogClientProtocol.resourceBundle(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of CatalogClientProtocol.resources()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of CatalogClientProtocol.resourceBundles()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of CatalogClientProtocol.resourceStatus(identifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of CatalogClientProtocol.resourceInformation(identifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t dispatch thunk of CatalogClientProtocol.requestResource(identifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t dispatch thunk of CatalogClientProtocol.releaseResource(identifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 64))();
}

uint64_t dispatch thunk of CatalogClientProtocol.requestResources(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of CatalogClientProtocol.releaseResources(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of CatalogClientProtocol.isGenerativeExperiencesEssentialResourcesReady()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))() & 1;
}

uint64_t dispatch thunk of CatalogClientProtocol.generativeExperiencesEssentialResourcesReady()()
{
  sub_256A4AB64();
  sub_256A4A3C8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_256A4A52C(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_256A485A8;
  uint64_t v3 = sub_256A4A970();
  return v4(v3);
}

uint64_t sub_256A485A8()
{
  sub_256A4A1FC();
  uint64_t v2 = v1;
  sub_256A49FD4();
  uint64_t v3 = *v0;
  sub_256A4A0C0();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v3 + 8);
  return v5(v2);
}

uint64_t dispatch thunk of CatalogClientProtocol.hasEnoughStorageForGenerativeExperiencesEssentialResources()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))() & 1;
}

uint64_t dispatch thunk of CatalogClientProtocol.enoughStorageForGenerativeExperiencesEssentialResources()()
{
  sub_256A4AB64();
  sub_256A4A3C8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_256A4A52C(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_256A49FA8;
  uint64_t v3 = sub_256A4A970();
  return v4(v3);
}

uint64_t dispatch thunk of CatalogClientProtocol.resourceAvailability(by:)()
{
  sub_256A4AB64();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  char v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 120) + **(int **)(v0 + 120));
  uint64_t v6 = swift_task_alloc();
  uint64_t v7 = (void *)sub_256A4A52C(v6);
  *uint64_t v7 = v8;
  v7[1] = sub_256A49FAC;
  return v10(v5, v3, v1);
}

uint64_t dispatch thunk of CatalogClientProtocol.siriResourceAvailability()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 128))();
}

uint64_t dispatch thunk of CatalogClientProtocol.requestDownloadForSettings()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 136))();
}

uint64_t type metadata accessor for CatalogClient()
{
  return self;
}

uint64_t method lookup function for CatalogClient(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CatalogClient);
}

uint64_t dispatch thunk of CatalogClient.xpcConnectionIsAllowed()()
{
  sub_256A4A020();
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of CatalogClient.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t dispatch thunk of CatalogClient.requestResources(for:)()
{
  sub_256A4A020();
  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of CatalogClient.releaseResources(for:)()
{
  sub_256A4A020();
  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t dispatch thunk of CatalogClient.requestResource(identifier:)()
{
  sub_256A4A020();
  return (*(uint64_t (**)(void))(v0 + 232))();
}

uint64_t dispatch thunk of CatalogClient.releaseResource(identifier:)()
{
  sub_256A4A020();
  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t dispatch thunk of CatalogClient.resource(for:)()
{
  sub_256A4A020();
  return (*(uint64_t (**)(void))(v0 + 248))();
}

uint64_t dispatch thunk of CatalogClient.resourceBundle(for:)()
{
  sub_256A4A020();
  return (*(uint64_t (**)(void))(v0 + 264))();
}

uint64_t dispatch thunk of CatalogClient.resources()()
{
  sub_256A4A020();
  return (*(uint64_t (**)(void))(v0 + 280))();
}

uint64_t dispatch thunk of CatalogClient.resourceBundles()()
{
  sub_256A4A020();
  return (*(uint64_t (**)(void))(v0 + 296))();
}

uint64_t dispatch thunk of CatalogClient.sideload(resource:)()
{
  sub_256A4A020();
  return (*(uint64_t (**)(void))(v0 + 312))();
}

uint64_t dispatch thunk of CatalogClient.sideload(container:assetURL:)()
{
  sub_256A4A020();
  return (*(uint64_t (**)(void))(v0 + 320))();
}

uint64_t dispatch thunk of CatalogClient.sideload(resourceBundle:)()
{
  sub_256A4A020();
  return (*(uint64_t (**)(void))(v0 + 328))();
}

uint64_t dispatch thunk of CatalogClient.removeSideload(resource:)()
{
  sub_256A4A020();
  return (*(uint64_t (**)(void))(v0 + 344))();
}

uint64_t dispatch thunk of CatalogClient.removeSideload(resourceBundle:)()
{
  sub_256A4A020();
  return (*(uint64_t (**)(void))(v0 + 360))();
}

uint64_t dispatch thunk of CatalogClient.resourceStatus(identifier:)()
{
  sub_256A4A020();
  return (*(uint64_t (**)(void))(v0 + 376))();
}

uint64_t dispatch thunk of CatalogClient.resourceInformation(identifier:)()
{
  sub_256A4A020();
  return (*(uint64_t (**)(void))(v0 + 384))();
}

uint64_t dispatch thunk of CatalogClient.isGenerativeExperiencesEssentialResourcesReady()()
{
  sub_256A4A020();
  return (*(uint64_t (**)(void))(v0 + 392))() & 1;
}

uint64_t dispatch thunk of CatalogClient.generativeExperiencesEssentialResourcesReady()()
{
  sub_256A4A41C();
  sub_256A4A020();
  uint64_t v5 = (uint64_t (*)(void))(*(void *)(v0 + 400) + **(int **)(v0 + 400));
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_256A4A52C(v1);
  void *v2 = v3;
  v2[1] = sub_256A49FA8;
  return v5();
}

uint64_t dispatch thunk of CatalogClient.hasEnoughStorageForGenerativeExperiencesEssentialResources()()
{
  sub_256A4A020();
  return (*(uint64_t (**)(void))(v0 + 408))() & 1;
}

uint64_t dispatch thunk of CatalogClient.enoughStorageForGenerativeExperiencesEssentialResources()()
{
  sub_256A4A41C();
  sub_256A4A020();
  uint64_t v5 = (uint64_t (*)(void))(*(void *)(v0 + 416) + **(int **)(v0 + 416));
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_256A4A52C(v1);
  void *v2 = v3;
  v2[1] = sub_256A49FA8;
  return v5();
}

uint64_t dispatch thunk of CatalogClient.resourceAvailability(by:)()
{
  sub_256A4A41C();
  uint64_t v1 = v0;
  sub_256A4A020();
  uint64_t v7 = (uint64_t (*)(uint64_t))(*(void *)(v2 + 424) + **(int **)(v2 + 424));
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)sub_256A4A52C(v3);
  *uint64_t v4 = v5;
  v4[1] = sub_256A49FAC;
  return v7(v1);
}

uint64_t dispatch thunk of CatalogClient.siriResourceAvailability()()
{
  sub_256A4A020();
  return (*(uint64_t (**)(void))(v0 + 432))();
}

uint64_t dispatch thunk of CatalogClient.requestDownloadForSettings()()
{
  sub_256A4A020();
  return (*(uint64_t (**)(void))(v0 + 440))();
}

uint64_t type metadata accessor for LocalCatalogClient()
{
  return self;
}

uint64_t method lookup function for LocalCatalogClient(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for LocalCatalogClient);
}

uint64_t dispatch thunk of LocalCatalogClient.__allocating_init(resources:resourceBundles:statusBlock:informationBlock:)()
{
  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t dispatch thunk of LocalCatalogClient.requestResources(for:)()
{
  sub_256A4A020();
  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t dispatch thunk of LocalCatalogClient.releaseResources(for:)()
{
  sub_256A4A020();
  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t dispatch thunk of LocalCatalogClient.requestResource(identifier:)()
{
  sub_256A4A020();
  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t dispatch thunk of LocalCatalogClient.releaseResource(identifier:)()
{
  sub_256A4A020();
  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of LocalCatalogClient.resource(for:)()
{
  sub_256A4A020();
  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t dispatch thunk of LocalCatalogClient.resourceBundle(for:)()
{
  sub_256A4A020();
  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t dispatch thunk of LocalCatalogClient.resources()()
{
  sub_256A4A020();
  return (*(uint64_t (**)(void))(v0 + 224))();
}

uint64_t dispatch thunk of LocalCatalogClient.resourceBundles()()
{
  sub_256A4A020();
  return (*(uint64_t (**)(void))(v0 + 232))();
}

uint64_t dispatch thunk of LocalCatalogClient.resourceStatus(identifier:)()
{
  sub_256A4A020();
  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t dispatch thunk of LocalCatalogClient.resourceInformation(identifier:)()
{
  sub_256A4A020();
  return (*(uint64_t (**)(void))(v0 + 248))();
}

uint64_t dispatch thunk of LocalCatalogClient.stubResourceAvailability(for:info:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of LocalCatalogClient.resourceAvailability(by:)()
{
  sub_256A4A41C();
  uint64_t v1 = v0;
  sub_256A4A020();
  uint64_t v7 = (uint64_t (*)(uint64_t))(*(void *)(v2 + 264) + **(int **)(v2 + 264));
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)sub_256A4A52C(v3);
  *uint64_t v4 = v5;
  v4[1] = sub_256A49400;
  return v7(v1);
}

uint64_t sub_256A49400()
{
  sub_256A4A1FC();
  uint64_t v2 = v1;
  sub_256A49FD4();
  uint64_t v3 = *v0;
  sub_256A4A0C0();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  sub_256A4A590();
  return v5(v2);
}

uint64_t dispatch thunk of LocalCatalogClient.stubSiriResourceAvailability(availability:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of LocalCatalogClient.siriResourceAvailability()()
{
  sub_256A4A020();
  return (*(uint64_t (**)(void))(v0 + 280))();
}

unint64_t sub_256A49530()
{
  unint64_t result = qword_269F78D10;
  if (!qword_269F78D10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F78D10);
  }
  return result;
}

unint64_t sub_256A4957C()
{
  unint64_t result = qword_269F78D18;
  if (!qword_269F78D18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F78D18);
  }
  return result;
}

uint64_t sub_256A495C8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_256A49610()
{
  unint64_t result = qword_26B2B59C8;
  if (!qword_26B2B59C8)
  {
    sub_256A49664(&qword_26B2B59C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B59C8);
  }
  return result;
}

uint64_t sub_256A49664(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_256A496AC()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_256A496BC()
{
  sub_256A39D2C(&qword_269F78D28);
  sub_256A49FB8();
  swift_release();
  swift_release();
  uint64_t v0 = sub_256A4A1E4();
  v1(v0);
  sub_256A4AC24();

  return MEMORY[0x270FA0238](v2, v3, v4);
}

void sub_256A49758(uint64_t a1)
{
  uint64_t v3 = sub_256A39D2C(&qword_269F78D28);
  sub_256A4A3B4(v3);
  uint64_t v5 = v1[2];
  unint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  sub_256A43890(a1, v5, v6, v7, v8);
}

uint64_t sub_256A497B4()
{
  sub_256A4A458();
  sub_256A39D2C(&qword_269F78D28);
  sub_256A49FB8();
  sub_256A4AB24();
  swift_release();
  swift_release();
  uint64_t v0 = sub_256A4A1E4();
  v1(v0);
  swift_release();
  sub_256A4A2C0();
  return MEMORY[0x270FA0238](v2, v3, v4);
}

void sub_256A49864()
{
  uint64_t v1 = sub_256A39D2C(&qword_269F78D28);
  sub_256A4A338(v1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = v0[2];
  unint64_t v9 = v0[3];
  uint64_t v10 = v0[4];
  uint64_t v11 = *(uint64_t **)((char *)v0 + v7);
  uint64_t v12 = *(void *)((char *)v0 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8));

  sub_256A43A78(v8, v9, v10, (uint64_t)v0 + v6, v11, v12);
}

uint64_t sub_256A498E4(uint64_t a1, uint64_t *a2)
{
  sub_256A39D2C(a2);
  sub_256A4A838();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

unint64_t sub_256A4993C()
{
  unint64_t result = qword_269F78D48;
  if (!qword_269F78D48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F78D48);
  }
  return result;
}

uint64_t sub_256A49988()
{
  return sub_256A44FCC();
}

uint64_t sub_256A499BC()
{
  return sub_256A49AEC();
}

uint64_t sub_256A499C8(uint64_t a1)
{
  return sub_256A49BB8(a1, &unk_269F78D58, sub_256A453AC);
}

uint64_t sub_256A499E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_256A499F8()
{
  return swift_release();
}

uint64_t sub_256A49A00(void **a1, void *a2, uint64_t a3, void *a4)
{
  return sub_256A45CAC(*a1, a2, a3, a4);
}

uint64_t sub_256A49A08(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_256A46558(*a1, a2, a3, a4);
}

uint64_t sub_256A49A10()
{
  return sub_256A49C5C(&qword_269F78D58);
}

uint64_t sub_256A49A1C(uint64_t a1, uint64_t a2)
{
  return sub_256A49D08(a1, a2, (uint64_t)&qword_269F78D58, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_256A49A08);
}

uint64_t sub_256A49A3C()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_256A49A74(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  uint64_t v4 = a1;
  return v2(&v4);
}

uint64_t sub_256A49AAC()
{
  return sub_256A44FCC();
}

uint64_t sub_256A49AE0()
{
  return sub_256A49AEC();
}

uint64_t sub_256A49AEC()
{
  sub_256A4A458();
  sub_256A39D2C(v1);
  sub_256A49FB8();
  sub_256A4AB24();
  swift_release();
  swift_release();

  uint64_t v2 = sub_256A4A1E4();
  v3(v2);
  swift_release();
  sub_256A4A2C0();
  return MEMORY[0x270FA0238](v4, v5, v6);
}

uint64_t sub_256A49B98(uint64_t a1)
{
  return sub_256A49BB8(a1, &unk_26B2B52B8, sub_256A4505C);
}

#error "256A49C38: call analysis failed (funcsize=38)"

uint64_t sub_256A49C50()
{
  return sub_256A49C5C(&qword_26B2B52B8);
}

uint64_t sub_256A49C5C(uint64_t *a1)
{
  sub_256A39D2C(a1);
  sub_256A49FB8();
  swift_release();
  uint64_t v1 = sub_256A4A1E4();
  v2(v1);
  sub_256A4AC24();

  return MEMORY[0x270FA0238](v3, v4, v5);
}

uint64_t sub_256A49CE8(uint64_t a1, uint64_t a2)
{
  return sub_256A49D08(a1, a2, (uint64_t)&qword_26B2B52B8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_256A49A00);
}

uint64_t sub_256A49D08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  sub_256A4A3C8();
  uint64_t v8 = sub_256A39D2C(v7);
  sub_256A4A3B4(v8);
  uint64_t v10 = *(void *)(v5 + 16);
  uint64_t v11 = v5 + ((*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));

  return a4(v6, v4, v10, v11);
}

uint64_t *sub_256A49D7C(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t *sub_256A49DE0(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

unint64_t sub_256A49E44()
{
  unint64_t result = qword_26B2B6438;
  if (!qword_26B2B6438)
  {
    sub_256A49E98(255, &qword_26B2B6440);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B6438);
  }
  return result;
}

uint64_t sub_256A49E98(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_256A49ED4()
{
  return swift_release();
}

uint64_t sub_256A49EDC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CatalogClientProtocol.hasEnoughStorageForGenerativeExperiencesEssentialResources()()
{
  return CatalogClientProtocol.isGenerativeExperiencesEssentialResourcesReady()();
}

uint64_t sub_256A4A000()
{
  return swift_beginAccess();
}

uint64_t sub_256A4A02C()
{
  return swift_beginAccess();
}

uint64_t sub_256A4A04C()
{
  return swift_beginAccess();
}

uint64_t sub_256A4A064()
{
  return swift_beginAccess();
}

uint64_t sub_256A4A084()
{
  return sub_256B3F690();
}

uint64_t sub_256A4A0B4(uint64_t a1)
{
  return MEMORY[0x270FA2498](a1, 0, 0);
}

uint64_t sub_256A4A0D0(unint64_t a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5)
{
  *(void *)(a5 + 8 * (a1 >> 6) + 64) |= 1 << a1;
  uint64_t v5 = (void *)(*(void *)(a5 + 48) + 16 * a1);
  *uint64_t v5 = a2;
  v5[1] = a3;
  return sub_256A3A540(a4, *(void *)(a5 + 56) + 40 * a1);
}

uint64_t sub_256A4A128()
{
  return sub_256B3F690();
}

void sub_256A4A158()
{
  JUMPOUT(0x25A2ABEE0);
}

void sub_256A4A170()
{
  *(void *)(v0 + 8 * (v3 >> 6) + 64) |= 1 << v3;
  *(unsigned char *)(*(void *)(v0 + 48) + v3) = v1;
  *(void *)(*(void *)(v0 + 56) + 8 * v3) = v2;
}

uint64_t sub_256A4A1E4()
{
  return v0 + v1;
}

uint64_t sub_256A4A208()
{
  return v0;
}

uint64_t sub_256A4A240()
{
  return 0x735F6D6C65646F63;
}

uint64_t sub_256A4A25C()
{
  return 0x6C5F6D6C65646F63;
}

uint64_t sub_256A4A2F4()
{
  return sub_256B3F690();
}

uint64_t _s12ModelCatalog17ResourceContainerC14assetBackedKeySSvgZ_0()
{
  return 0x6361427465737361;
}

uint64_t sub_256A4A338(uint64_t a1)
{
  return a1 - 8;
}

id sub_256A4A350()
{
  return objc_msgSend(v0, (SEL)(v3 + 2501), v1, v2);
}

uint64_t sub_256A4A370()
{
  return v0;
}

uint64_t sub_256A4A37C()
{
  void *v0 = 0x8000000000000000;
  return v1;
}

uint64_t sub_256A4A3B4(uint64_t a1)
{
  return a1 - 8;
}

uint64_t sub_256A4A3D4(uint64_t a1)
{
  *(void *)(v2 - 128) = a1;
  *uint64_t v1 = *(_OWORD *)(v2 - 176);
  return swift_bridgeObjectRetain();
}

id sub_256A4A3F8()
{
  return objc_allocWithZone(v0);
}

unint64_t sub_256A4A428()
{
  return sub_256A39CC8();
}

uint64_t sub_256A4A478()
{
  return swift_retain();
}

uint64_t sub_256A4A498()
{
  return sub_256B3FC00();
}

uint64_t sub_256A4A4B8()
{
  return sub_256B3FCB0();
}

BOOL sub_256A4A4D0(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_256A4A4EC()
{
  return v0;
}

uint64_t sub_256A4A510()
{
  return swift_slowAlloc();
}

uint64_t sub_256A4A52C(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t sub_256A4A538()
{
  return sub_256B3FAA0();
}

unint64_t sub_256A4A56C()
{
  return 0xD000000000000015;
}

uint64_t sub_256A4A580()
{
  return sub_256A3CD38();
}

uint64_t sub_256A4A588(uint64_t *a1)
{
  return sub_256A3CCE0(a1);
}

uint64_t sub_256A4A5B8()
{
  return sub_256B3F760();
}

char *sub_256A4A5E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  return &a22;
}

uint64_t sub_256A4A5EC()
{
  return 0x656372756F736572;
}

uint64_t sub_256A4A610()
{
  return 0x656372756F736572;
}

uint64_t sub_256A4A634()
{
  return v0;
}

uint64_t sub_256A4A650()
{
  return v0;
}

void sub_256A4A678()
{
  uint64_t v2 = *(os_unfair_lock_s **)(*(void *)(v0 + 40) + 16);
  os_unfair_lock_lock(v2 + 6);
}

__n128 sub_256A4A6C4(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  *(void *)(v10 + 56) = a1;
  a1[1].n128_u64[0] = v9;
  a1[1].n128_u64[1] = v11;
  __n128 result = a9;
  a1[2] = a9;
  return result;
}

uint64_t sub_256A4A6E8@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 200) = a1;
  return sub_256B3FAA0();
}

uint64_t sub_256A4A71C()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_256A4A734()
{
  return swift_slowAlloc();
}

uint64_t sub_256A4A75C()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t sub_256A4A810()
{
  return v0;
}

uint64_t sub_256A4A81C()
{
  return 0;
}

uint64_t sub_256A4A844@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = v1;
  *(void *)(v2 - 256) = *(void *)(a1 + 8);
  return result;
}

id sub_256A4A85C(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3, v4);
}

uint64_t sub_256A4A8A8()
{
  return swift_slowAlloc();
}

uint64_t sub_256A4A8C0()
{
  return swift_release();
}

uint64_t sub_256A4A8DC(uint64_t a1)
{
  *(void *)(v1 + 4) = a1;
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_256A4A8F8()
{
  return sub_256B3B598(v1, v0, (uint64_t *)(v2 - 128));
}

BOOL sub_256A4A914(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_256A4A930(uint64_t a1)
{
  return MEMORY[0x270FA0240](v1, a1, 24, 7);
}

uint64_t sub_256A4A950(uint64_t a1)
{
  return MEMORY[0x270FA0240](v1, a1, 41, 7);
}

uint64_t sub_256A4A970()
{
  return v0;
}

unint64_t sub_256A4A984()
{
  return sub_256A39F04(v0);
}

uint64_t sub_256A4A9B0()
{
  return 0x735F6D6C65646F63;
}

id sub_256A4A9C4()
{
  return objc_allocWithZone(v0);
}

uint64_t sub_256A4A9DC()
{
  return sub_256B3F690();
}

uint64_t sub_256A4A9FC()
{
  return sub_256B3F690();
}

uint64_t sub_256A4AA1C()
{
  return v0;
}

void sub_256A4AA30(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
  os_unfair_lock_unlock(v9);
}

uint64_t sub_256A4AA50()
{
  return sub_256B3FC00();
}

uint64_t sub_256A4AA70()
{
  return v0;
}

uint64_t sub_256A4AA84()
{
  return swift_slowAlloc();
}

uint64_t sub_256A4AA9C()
{
  return _swift_stdlib_reportUnimplementedInitializer();
}

uint64_t sub_256A4AAB4()
{
  return v0 + 8;
}

uint64_t sub_256A4AAC0(uint64_t a1)
{
  return MEMORY[0x270EF1CC8](a1, v1, v2);
}

uint64_t sub_256A4AAD8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (uint64_t *)(v1 + a1);
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  return sub_256A3E7E8(v4, v5);
}

uint64_t sub_256A4AB38(uint64_t a1)
{
  return a1 - 8;
}

uint64_t sub_256A4AB50()
{
  return *(void *)(v0 - 272);
}

uint64_t sub_256A4AB7C()
{
  return v0;
}

uint64_t sub_256A4AB90@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (uint64_t *)(v1 + a1);
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  return sub_256A3E7E8(v4, v5);
}

void sub_256A4ABB0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

void sub_256A4ABD0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t sub_256A4ABF0()
{
  return swift_bridgeObjectRetain();
}

void sub_256A4AC30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v9 - 248) = &a9;
}

uint64_t sub_256A4AC44()
{
  return v0;
}

uint64_t sub_256A4AC50()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_256A4AC68()
{
  return v0;
}

uint64_t defaultAJAXConfirguration(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (a1 == 0xD000000000000039 && (sub_256A4B6C4(), v5) || (sub_256A4B67C() & 1) != 0)
  {
    sub_256B3F300();
    sub_256A4B5F0();
    uint64_t v7 = v6;
    MEMORY[0x270FA5388](v8);
    sub_256A4B630();
    uint64_t v9 = sub_256A39D2C(&qword_26B2B6340);
    uint64_t v10 = sub_256A4B6D4(v9);
    MEMORY[0x270FA5388](v10);
    sub_256A4A7CC();
    sub_256A4B6A0();
    sub_256A4B658();
    if (!v5)
    {
      unint64_t v11 = *(void (**)(void))(v7 + 32);
      sub_256A4B648();
      v11();
      uint64_t v12 = sub_256A4B614();
      ((void (*)(uint64_t))v11)(v12);
      type metadata accessor for AJAXConfiguration();
      sub_256A4B760();
      unint64_t v16 = 0xD00000000000001DLL;
      uint64_t v17 = "sage-answer-synthesis-default";
LABEL_6:
      unint64_t v18 = (unint64_t)(v17 - 32) | 0x8000000000000000;
LABEL_7:
      *uint64_t v15 = v16;
      v15[1] = v18;
      id v19 = (void *)(a2 + *(int *)(v13 + 24));
      *id v19 = 0;
      v19[1] = 0xE000000000000000;
      return sub_256A46F7C(a2, 0, 1, v14);
    }
    while (1)
    {
LABEL_47:
      sub_256A4B590(v2);
      sub_256A4B770();
      sub_256A4B738();
LABEL_48:
      sub_256B3FC70();
      __break(1u);
    }
  }
  if (a1 == 0xD000000000000030 && (sub_256A4B6C4(), v5) || (sub_256A4B67C() & 1) != 0)
  {
    sub_256B3F300();
    sub_256A4B5F0();
    uint64_t v22 = v21;
    MEMORY[0x270FA5388](v23);
    sub_256A4B630();
    uint64_t v24 = sub_256A39D2C(&qword_26B2B6340);
    uint64_t v25 = sub_256A4B6D4(v24);
    MEMORY[0x270FA5388](v25);
    sub_256A4A7CC();
    sub_256A4B6A0();
    sub_256A4B658();
    if (!v5)
    {
      uint64_t v26 = *(void (**)(void))(v22 + 32);
      sub_256A4B648();
      v26();
      uint64_t v27 = sub_256A4B614();
      ((void (*)(uint64_t))v26)(v27);
      type metadata accessor for AJAXConfiguration();
      sub_256A4B710();
      unint64_t v18 = v28 - 512;
      goto LABEL_7;
    }
    goto LABEL_47;
  }
  uint64_t v2 = 0xD000000000000033;
  if (a1 == 0xD000000000000033 && (sub_256A4B6C4(), v5) || (sub_256B3FEA0() & 1) != 0)
  {
    sub_256B3F300();
    sub_256A4B5F0();
    uint64_t v30 = v29;
    MEMORY[0x270FA5388](v31);
    sub_256A4B630();
    uint64_t v32 = sub_256A39D2C(&qword_26B2B6340);
    uint64_t v33 = sub_256A4B6D4(v32);
    MEMORY[0x270FA5388](v33);
    sub_256A4A7CC();
    sub_256A4B6A0();
    sub_256A4B658();
    if (!v5)
    {
LABEL_17:
      uint64_t v34 = *(void (**)(void))(v30 + 32);
      sub_256A4B648();
      v34();
      uint64_t v35 = sub_256A4B614();
      ((void (*)(uint64_t))v34)(v35);
      type metadata accessor for AJAXConfiguration();
      sub_256A4B710();
      goto LABEL_7;
    }
LABEL_50:
    sub_256A4B590(0xD000000000000033);
    sub_256A4B738();
    goto LABEL_48;
  }
  if (a1 == 0xD000000000000033 && (sub_256A4B6C4(), v5) || (sub_256A4B67C() & 1) != 0)
  {
    sub_256B3F300();
    sub_256A4B5F0();
    uint64_t v30 = v36;
    MEMORY[0x270FA5388](v37);
    sub_256A4B630();
    uint64_t v38 = sub_256A39D2C(&qword_26B2B6340);
    uint64_t v39 = sub_256A4B6D4(v38);
    MEMORY[0x270FA5388](v39);
    sub_256A4A7CC();
    sub_256A4B6A0();
    sub_256A4B658();
    if (!v5) {
      goto LABEL_17;
    }
    goto LABEL_50;
  }
  if (a1 == 0xD00000000000003CLL && (sub_256A4B6C4(), v5) || (sub_256A4B67C() & 1) != 0)
  {
    sub_256B3F300();
    sub_256A4B5F0();
    uint64_t v41 = v40;
    MEMORY[0x270FA5388](v42);
    sub_256A4B630();
    uint64_t v43 = sub_256A39D2C(&qword_26B2B6340);
    uint64_t v44 = sub_256A4B6D4(v43);
    MEMORY[0x270FA5388](v44);
    sub_256A4A7CC();
    sub_256A4B6A0();
    sub_256A4B658();
    if (!v5)
    {
      uint64_t v45 = *(void (**)(void))(v41 + 32);
      sub_256A4B648();
      v45();
      uint64_t v46 = sub_256A4B614();
      ((void (*)(uint64_t))v45)(v46);
      type metadata accessor for AJAXConfiguration();
      sub_256A4B6E4();
      unint64_t v18 = v47 & 0xFFFFFFFFFFFFLL | 0xEF36000000000000;
      goto LABEL_7;
    }
    goto LABEL_50;
  }
  if (a1 == 0xD00000000000003FLL && (sub_256A4B6C4(), v5) || (sub_256A4B67C() & 1) != 0)
  {
    sub_256B3F300();
    sub_256A4B5F0();
    uint64_t v49 = v48;
    MEMORY[0x270FA5388](v50);
    sub_256A4B630();
    uint64_t v51 = sub_256A39D2C(&qword_26B2B6340);
    uint64_t v52 = sub_256A4B6D4(v51);
    MEMORY[0x270FA5388](v52);
    sub_256A4A7CC();
    sub_256A4B6A0();
    sub_256A4B658();
    if (!v5)
    {
      uint64_t v53 = *(void (**)(void))(v49 + 32);
      sub_256A4B648();
      v53();
      uint64_t v54 = sub_256A4B614();
      ((void (*)(uint64_t))v53)(v54);
      type metadata accessor for AJAXConfiguration();
      sub_256A4B6E4();
      unint64_t v18 = v55 & 0xFFFFFFFFFFFFLL | 0xEF35000000000000;
      goto LABEL_7;
    }
    goto LABEL_51;
  }
  if (a1 == 0xD000000000000038 && (sub_256A4B6C4(), v5) || (sub_256A4B67C() & 1) != 0)
  {
    sub_256B3F300();
    sub_256A4B5F0();
    uint64_t v57 = v56;
    MEMORY[0x270FA5388](v58);
    sub_256A4B630();
    uint64_t v59 = sub_256A39D2C(&qword_26B2B6340);
    uint64_t v60 = sub_256A4B6D4(v59);
    MEMORY[0x270FA5388](v60);
    sub_256A4B744();
    sub_256B3F2C0();
    sub_256A4B658();
    if (!v5)
    {
      uint64_t v61 = *(void (**)(void))(v57 + 32);
      sub_256A4B648();
      v61();
      uint64_t v62 = sub_256A4B614();
      ((void (*)(uint64_t))v61)(v62);
      type metadata accessor for AJAXConfiguration();
      sub_256A4B760();
      unint64_t v16 = 0xD000000000000029;
      uint64_t v17 = "afm-text-30b-text-assistant-summarization";
      goto LABEL_6;
    }
LABEL_51:
    sub_256A4B590(0xD000000000000033);
    sub_256A4B770();
    sub_256A4B738();
    goto LABEL_48;
  }
  if (a1 == 0xD00000000000003DLL && (sub_256A4B6C4(), v5) || (sub_256A4B67C() & 1) != 0)
  {
    sub_256B3F300();
    sub_256A4B5F0();
    uint64_t v64 = v63;
    MEMORY[0x270FA5388](v65);
    sub_256A4B630();
    uint64_t v66 = sub_256A39D2C(&qword_26B2B6340);
    uint64_t v67 = sub_256A4B6D4(v66);
    MEMORY[0x270FA5388](v67);
    sub_256A4B744();
    sub_256B3F2C0();
    sub_256A4B658();
    if (!v5)
    {
      uint64_t v68 = *(void (**)(void))(v64 + 32);
      sub_256A4B648();
      v68();
      uint64_t v69 = sub_256A4B614();
      ((void (*)(uint64_t))v68)(v69);
      type metadata accessor for AJAXConfiguration();
      sub_256A4B760();
      unint64_t v16 = 0xD00000000000001ELL;
      uint64_t v17 = "afm-text-30b-instruct-20240126";
      goto LABEL_6;
    }
    goto LABEL_50;
  }
  uint64_t v70 = type metadata accessor for AJAXConfiguration();

  return sub_256A46F7C(a2, 1, 1, v70);
}

uint64_t sub_256A4B590(uint64_t a1)
{
  uint64_t v2 = sub_256A39D2C(&qword_26B2B6340);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_256A4B614()
{
  return v0;
}

uint64_t sub_256A4B658()
{
  return sub_256A480C4(v1, 1, v0);
}

uint64_t sub_256A4B67C()
{
  return sub_256B3FEA0();
}

uint64_t sub_256A4B6A0()
{
  return sub_256B3F2C0();
}

uint64_t sub_256A4B6D4(uint64_t a1)
{
  return a1 - 8;
}

uint64_t sub_256A4B744()
{
  return v0 - 1;
}

uint64_t SubscriptionManagerProvider.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = objc_msgSend(self, sel_sharedManager);
  return v0;
}

void sub_256A4B7D4(unint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  char v2 = a1;
  if (a1 >= 8)
  {
    if (qword_26B2B6590 != -1) {
      swift_once();
    }
    uint64_t v4 = sub_256B3F4A0();
    sub_256A46E9C(v4, (uint64_t)qword_26B2C4018);
    char v5 = sub_256B3F470();
    os_log_type_t v6 = sub_256B3F9E0();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)sub_256A4A734();
      *(_DWORD *)uint64_t v7 = 134217984;
      sub_256B3FAA0();
      _os_log_impl(&dword_256A36000, v5, v6, "SubscriptionManagerProvider: Download status type of: %lu has not been accounted for", v7, 0xCu);
      sub_256A4A158();
    }

    char v2 = 0;
  }
  *a2 = v2;
}

uint64_t SubscriptionManagerProvider.init()()
{
  *(void *)(v0 + 16) = objc_msgSend(self, sel_sharedManager);
  return v0;
}

ModelCatalog::DownloadStatus __swiftcall SubscriptionManagerProvider.downloadStatus(subscriber:subscriptionName:)(Swift::String subscriber, Swift::String subscriptionName)
{
  object = subscriptionName._object;
  uint64_t countAndFlagsBits = subscriptionName._countAndFlagsBits;
  os_log_type_t v6 = subscriber._object;
  uint64_t v7 = subscriber._countAndFlagsBits;
  uint64_t v25 = v2;
  if (qword_26B2B6590 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_256B3F4A0();
  sub_256A46E9C(v8, (uint64_t)qword_26B2C4018);
  swift_bridgeObjectRetain_n();
  sub_256A4EFFC();
  uint64_t v9 = sub_256B3F470();
  os_log_type_t v10 = sub_256B3F9F0();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v24 = countAndFlagsBits;
    uint64_t v11 = sub_256A4EFE4();
    uint64_t v26 = sub_256A4EED0();
    *(_DWORD *)uint64_t v11 = 136315394;
    swift_bridgeObjectRetain();
    sub_256B3B598(v7, (unint64_t)v6, &v26);
    sub_256B3FAA0();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v11 + 12) = 2080;
    swift_bridgeObjectRetain();
    sub_256B3B598(v24, (unint64_t)object, &v26);
    sub_256B3FAA0();
    sub_256A4EF24();
    _os_log_impl(&dword_256A36000, v9, v10, "SubscriptionManagerProvider: Starting request to retrieve download status for subscriber: %s, subscription name: %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    sub_256A4A158();
    uint64_t countAndFlagsBits = v24;
    sub_256A4A158();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v12 = *(void **)(v3 + 16);
  uint64_t v13 = (void *)sub_256B3F690();
  uint64_t v14 = v7;
  uint64_t v15 = (void *)sub_256B3F690();
  id v16 = objc_msgSend(v12, sel_downloadStatusForSubscriber_subscriptionName_, v13, v15);

  sub_256A4B7D4((unint64_t)v16, &v26);
  char v17 = v26;
  swift_bridgeObjectRetain_n();
  sub_256A4EFFC();
  unint64_t v18 = sub_256B3F470();
  os_log_type_t v19 = sub_256B3F9F0();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = sub_256A4A8A8();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136315650;
    swift_bridgeObjectRetain();
    sub_256B3B598(v14, (unint64_t)v6, &v26);
    sub_256B3FAA0();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v20 + 12) = 2080;
    swift_bridgeObjectRetain();
    sub_256B3B598(countAndFlagsBits, (unint64_t)object, &v26);
    sub_256B3FAA0();
    sub_256A4EF24();
    *(_WORD *)(v20 + 22) = 2080;
    uint64_t v21 = sub_256B3F720();
    sub_256B3B598(v21, v22, &v26);
    sub_256B3FAA0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_256A36000, v18, v19, "SubscriptionManagerProvider: Download status for subscriber: %s, subscription name: %s, returned download status: %s", (uint8_t *)v20, 0x20u);
    swift_arrayDestroy();
    sub_256A4A158();
    sub_256A4A158();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    ModelCatalog::DownloadStatus result = swift_bridgeObjectRelease_n();
  }
  *uint64_t v25 = v17;
  return result;
}

Swift::Int64 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SubscriptionManagerProvider.diskSpaceNeeded(subscriber:subscriptionName:)(Swift::String subscriber, Swift::String subscriptionName)
{
  object = subscriptionName._object;
  uint64_t countAndFlagsBits = subscriptionName._countAndFlagsBits;
  v43[1] = *(id *)MEMORY[0x263EF8340];
  if (qword_26B2B6590 != -1) {
    swift_once();
  }
  uint64_t v4 = sub_256B3F4A0();
  sub_256A46E9C(v4, (uint64_t)qword_26B2C4018);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  char v5 = sub_256B3F470();
  os_log_type_t v6 = sub_256B3F9F0();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = countAndFlagsBits;
    uint64_t v8 = swift_slowAlloc();
    v43[0] = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315394;
    uint64_t v9 = swift_bridgeObjectRetain();
    sub_256A4EEB4(v9, v10, v11, v12, v13, v14);
    sub_256B3FAA0();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v8 + 12) = 2080;
    swift_bridgeObjectRetain();
    sub_256B3B598(v7, (unint64_t)object, (uint64_t *)v43);
    sub_256B3FAA0();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_256A36000, v5, v6, "SubscriptionManagerProvider: Starting request to retrieve disk space needed for subscriber: %s, subscription name: %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    sub_256A4A158();
    uint64_t countAndFlagsBits = v7;
    sub_256A4A158();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v15 = *(void **)(v41 + 16);
  id v16 = (void *)sub_256B3F690();
  v43[0] = 0;
  id v17 = sub_256A4EB00((uint64_t)v16, countAndFlagsBits, (uint64_t)object, (uint64_t)v43, v15);

  id v18 = v43[0];
  if (v43[0])
  {
    id v19 = v43[0];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    id v20 = v19;
    uint64_t v21 = sub_256B3F470();
    os_log_type_t v22 = sub_256B3F9D0();
    if (os_log_type_enabled(v21, v22))
    {
      char v5 = swift_slowAlloc();
      uint64_t v40 = (void *)swift_slowAlloc();
      v43[0] = (id)swift_slowAlloc();
      LODWORD(v5->isa) = 136315650;
      uint64_t v23 = swift_bridgeObjectRetain();
      sub_256A4EEB4(v23, v24, v25, v26, v27, v28);
      sub_256A4EE98();
      swift_bridgeObjectRelease_n();
      WORD2(v5[1].isa) = 2080;
      swift_bridgeObjectRetain();
      sub_256B3B598(countAndFlagsBits, (unint64_t)object, (uint64_t *)v43);
      sub_256A4EE98();
      swift_bridgeObjectRelease_n();
      HIWORD(v5[2].isa) = 2112;
      id v29 = v20;
      sub_256B3FAA0();
      *uint64_t v40 = v18;

      _os_log_impl(&dword_256A36000, v21, v22, "SubscriptionManagerProvider: Could not retrieve the disk space needed for subscriber: %s, subscription name: %s. Error: %@", (uint8_t *)v5, 0x20u);
      sub_256A39D2C(&qword_26B2B60C8);
      swift_arrayDestroy();
      sub_256A4A158();
      swift_arrayDestroy();
      sub_256A4A158();
      sub_256A4A158();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    swift_willThrow();
  }
  else
  {
    uint64_t v42 = countAndFlagsBits;
    char v5 = objc_msgSend(v17, sel_longLongValue);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v30 = sub_256B3F470();
    os_log_type_t v31 = sub_256B3F9F0();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = swift_slowAlloc();
      v43[0] = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 136315650;
      uint64_t v33 = swift_bridgeObjectRetain();
      sub_256A4EEB4(v33, v34, v35, v36, v37, v38);
      sub_256A4EE98();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v32 + 12) = 2080;
      swift_bridgeObjectRetain();
      sub_256B3B598(v42, (unint64_t)object, (uint64_t *)v43);
      sub_256A4EE98();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v32 + 22) = 2048;
      sub_256B3FAA0();
      _os_log_impl(&dword_256A36000, v30, v31, "SubscriptionManagerProvider: Disk space needed for subscriber: %s, subscription name: %s, bytes: %lld", (uint8_t *)v32, 0x20u);
      swift_arrayDestroy();
      sub_256A4A158();
      sub_256A4A158();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
  }
  return (Swift::Int64)v5;
}

uint64_t SubscriptionManagerProvider.subscribe(subscriber:subscription:)()
{
  sub_256A4A1FC();
  v1[24] = v2;
  v1[25] = v0;
  v1[22] = v3;
  v1[23] = v4;
  v1[26] = type metadata accessor for AssetSetSubscription();
  v1[27] = swift_task_alloc();
  v1[28] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_256A4C3F8, 0, 0);
}

uint64_t sub_256A4C3F8()
{
  uint64_t v53 = v0;
  uint64_t v2 = *(uint64_t **)(v0 + 192);
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  uint64_t v7 = (uint64_t)v2 + *(int *)(*(void *)(v0 + 208) + 28);
  sub_256A39D2C(&qword_269F78DD8);
  uint64_t v8 = swift_task_alloc();
  sub_256A4EB70(v7, v8);
  objc_allocWithZone(MEMORY[0x263F84080]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v9 = sub_256A4E99C(v4, v3, v5, v6, v8);
  *(void *)(v0 + 232) = v9;
  swift_task_dealloc();
  if (v9)
  {
    uint64_t v10 = sub_256B3F440();
    *(void *)(v0 + 240) = v10;
    sub_256A49FB8();
    uint64_t v12 = v11;
    *(void *)(v0 + 248) = v11;
    *(void *)(v0 + 256) = *(void *)(v13 + 64);
    uint64_t v14 = swift_task_alloc();
    *(void *)(v0 + 264) = v14;
    sub_256B3F430();
    if (qword_26B2B6590 != -1) {
      swift_once();
    }
    uint64_t v15 = sub_256B3F4A0();
    *(void *)(v0 + 272) = sub_256A46E9C(v15, (uint64_t)qword_26B2C4018);
    uint64_t v16 = swift_task_alloc();
    id v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
    *(void *)(v0 + 280) = v17;
    *(void *)(v0 + 288) = (v12 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v17(v16, v14, v10);
    swift_bridgeObjectRetain_n();
    id v18 = v9;
    id v19 = sub_256B3F470();
    os_log_type_t v20 = sub_256B3F9F0();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v1 = (void (*)(uint64_t))(v0 + 160);
      uint64_t v48 = *(void *)(v0 + 176);
      unint64_t v47 = *(void *)(v0 + 184);
      uint64_t v21 = sub_256A4A8A8();
      uint64_t v49 = (void *)swift_slowAlloc();
      uint64_t v50 = sub_256A4EED0();
      *(_DWORD *)uint64_t v21 = 136315650;
      id v51 = v18;
      v52[0] = v50;
      sub_256A4ED24();
      uint64_t v22 = sub_256B3FE80();
      *(void *)(v0 + 152) = sub_256B3B598(v22, v23, v52);
      sub_256B3FAA0();
      swift_bridgeObjectRelease();
      uint64_t v24 = sub_256A4EF84();
      ((void (*)(uint64_t))(v0 + 160))(v24);
      sub_256A4EF9C();
      swift_bridgeObjectRetain();
      *(void *)(v0 + 160) = sub_256B3B598(v48, v47, v52);
      sub_256B3FAA0();
      sub_256A4EF24();
      *(_WORD *)(v21 + 22) = 2112;
      *(void *)(v0 + 168) = v18;
      id v25 = v18;
      sub_256B3FAA0();
      *uint64_t v49 = v9;

      id v18 = v51;
      _os_log_impl(&dword_256A36000, v19, v20, "SubscriptionManagerProvider: Request ID: %s, subscription request for: %s, UAF subscription: %@", (uint8_t *)v21, 0x20u);
      sub_256A39D2C(&qword_26B2B60C8);
      swift_arrayDestroy();
      sub_256A4A158();
      swift_arrayDestroy();
      sub_256A4A158();
      sub_256A4A158();

      swift_task_dealloc();
    }
    else
    {
      uint64_t v36 = sub_256A4EF84();
      v1(v36);
      swift_bridgeObjectRelease_n();

      swift_task_dealloc();
    }
    *(void *)(v0 + 296) = v1;
    uint64_t v37 = *(void **)(*(void *)(v0 + 200) + 16);
    uint64_t v38 = sub_256B3F690();
    *(void *)(v0 + 304) = v38;
    sub_256A39D2C(&qword_26B2B6330);
    uint64_t v39 = swift_allocObject();
    *(_OWORD *)(v39 + 16) = xmmword_256B572F0;
    *(void *)(v39 + 32) = v18;
    v52[0] = v39;
    sub_256B3F870();
    sub_256A4ECE4();
    id v40 = v18;
    uint64_t v41 = sub_256B3F850();
    *(void *)(v0 + 312) = v41;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 24) = sub_256A4CB68;
    uint64_t v42 = swift_continuation_init();
    *(void *)(v0 + 80) = MEMORY[0x263EF8330];
    *(void *)(v0 + 88) = 0x40000000;
    *(void *)(v0 + 96) = sub_256A4D16C;
    *(void *)(v0 + 104) = &unk_265423298;
    *(void *)(v0 + 112) = v42;
    objc_msgSend(v37, sel_subscribe_subscriptions_queue_completion_, v38, v41, 0, v0 + 80);
    return MEMORY[0x270FA23F0](v0 + 16);
  }
  else
  {
    if (qword_26B2B6590 != -1) {
      swift_once();
    }
    uint64_t v26 = *(void *)(v0 + 216);
    uint64_t v27 = *(void *)(v0 + 192);
    uint64_t v28 = sub_256B3F4A0();
    sub_256A46E9C(v28, (uint64_t)qword_26B2C4018);
    sub_256A4EBD8(v27, v26);
    id v29 = sub_256B3F470();
    os_log_type_t v30 = sub_256B3F9D0();
    BOOL v31 = os_log_type_enabled(v29, v30);
    uint64_t v32 = *(uint64_t **)(v0 + 216);
    if (v31)
    {
      uint64_t v33 = (uint8_t *)sub_256A4A734();
      v52[0] = sub_256A4A8A8();
      *(_DWORD *)uint64_t v33 = 136315138;
      uint64_t v35 = *v32;
      unint64_t v34 = v32[1];
      swift_bridgeObjectRetain();
      *(void *)(v0 + 120) = sub_256B3B598(v35, v34, v52);
      sub_256B3FAA0();
      swift_bridgeObjectRelease();
      sub_256A4EC3C((uint64_t)v32);
      _os_log_impl(&dword_256A36000, v29, v30, "SubscriptionManagerProvider: Failed to create UAFAssetSetSubscription for subscription: %s", v33, 0xCu);
      swift_arrayDestroy();
      sub_256A4A158();
      sub_256A4A158();
    }
    else
    {
      sub_256A4EC3C(*(void *)(v0 + 216));
    }

    v52[0] = 0;
    v52[1] = 0xE000000000000000;
    sub_256B3FB70();
    sub_256B3F760();
    swift_bridgeObjectRetain();
    sub_256B3F760();
    swift_bridgeObjectRelease();
    sub_256A4EC98();
    uint64_t v43 = swift_allocError();
    sub_256A4EF3C(v43, v44);
    swift_task_dealloc();
    swift_task_dealloc();
    sub_256A4AAB4();
    return v45();
  }
}

uint64_t sub_256A4CB68()
{
  sub_256A4A1FC();
  sub_256A49FD4();
  uint64_t v1 = *(void *)(v0 + 48);
  *(void *)(v2 + 320) = v1;
  if (v1) {
    uint64_t v3 = sub_256A4CEE0;
  }
  else {
    uint64_t v3 = sub_256A4CC50;
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

uint64_t sub_256A4CC50()
{
  uint64_t v32 = v0;
  uint64_t v1 = *(void **)(v0 + 304);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 280);
  uint64_t v3 = *(void *)(v0 + 264);
  uint64_t v4 = *(void *)(v0 + 240);
  uint64_t v5 = *(void *)(v0 + 224);
  uint64_t v6 = *(void *)(v0 + 192);

  uint64_t v7 = swift_task_alloc();
  v2(v7, v3, v4);
  sub_256A4EBD8(v6, v5);
  uint64_t v8 = sub_256B3F470();
  os_log_type_t v9 = sub_256B3F9F0();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v0 + 296);
    uint64_t v11 = *(void *)(v0 + 240);
    uint64_t v28 = v10;
    uint64_t v12 = *(uint64_t **)(v0 + 224);
    id v29 = *(void **)(v0 + 232);
    uint64_t v30 = *(void *)(v0 + 264);
    uint64_t v13 = (uint8_t *)sub_256A4EFE4();
    uint64_t v31 = sub_256A4EED0();
    *(_DWORD *)uint64_t v13 = 136315394;
    sub_256A4ED24();
    uint64_t v27 = v11;
    uint64_t v14 = sub_256B3FE80();
    *(void *)(v0 + 136) = sub_256B3B598(v14, v15, &v31);
    sub_256A4EF00();
    swift_bridgeObjectRelease();
    v10(v7, v11);
    sub_256A4EF9C();
    uint64_t v16 = *v12;
    unint64_t v17 = v12[1];
    swift_bridgeObjectRetain();
    uint64_t v18 = sub_256B3B598(v16, v17, &v31);
    sub_256A4EF60(v18);
    swift_bridgeObjectRelease();
    sub_256A4EC3C((uint64_t)v12);
    _os_log_impl(&dword_256A36000, v8, v9, "SubscriptionManagerProvider: Request ID: %s, successfully subscribed to subscription %s", v13, 0x16u);
    swift_arrayDestroy();
    sub_256A4A158();
    sub_256A4A158();

    v28(v30, v27);
    swift_task_dealloc();
  }
  else
  {
    id v19 = *(void (**)(uint64_t))(v0 + 296);
    uint64_t v20 = *(void *)(v0 + 264);
    uint64_t v21 = *(void *)(v0 + 240);
    uint64_t v22 = *(void *)(v0 + 224);
    unint64_t v23 = *(void **)(v0 + 232);

    sub_256A4EC3C(v22);
    uint64_t v24 = sub_256A4EFAC();
    v19(v24);

    swift_task_dealloc();
    ((void (*)(uint64_t, uint64_t))v19)(v20, v21);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v25 = *(uint64_t (**)(void))(v0 + 8);
  return v25();
}

uint64_t sub_256A4CEE0()
{
  uint64_t v30 = v0;
  uint64_t v1 = (void *)v0[39];
  uint64_t v2 = (void *)v0[38];
  uint64_t v3 = (void (*)(uint64_t, uint64_t, uint64_t))v0[35];
  uint64_t v4 = v0[33];
  uint64_t v5 = v0[30];
  swift_willThrow();

  uint64_t v6 = swift_task_alloc();
  v3(v6, v4, v5);
  uint64_t v7 = sub_256B3F470();
  os_log_type_t v8 = sub_256B3F9D0();
  if (os_log_type_enabled(v7, v8))
  {
    os_log_type_t v9 = (_DWORD *)sub_256A4A734();
    uint64_t v28 = sub_256A4A8A8();
    *os_log_type_t v9 = 136315138;
    sub_256A4ED24();
    uint64_t v10 = sub_256B3FE80();
    v0[16] = sub_256B3B598(v10, v11, &v28);
    sub_256A4EFC4();
    swift_bridgeObjectRelease();
    uint64_t v12 = sub_256A4EE74();
    v13(v12);
    sub_256A4F014(&dword_256A36000, v14, v15, "SubscriptionManagerProvider: Request ID %s. Failed to subscribe.");
    swift_arrayDestroy();
    sub_256A4A158();
    sub_256A4A158();
  }
  else
  {
    uint64_t v16 = sub_256A4EEE8();
    v17(v16);
  }

  uint64_t v18 = (void *)v0[40];
  id v19 = (void (*)(uint64_t, uint64_t))v0[37];
  uint64_t v20 = v0[33];
  uint64_t v22 = (void *)v0[29];
  uint64_t v21 = v0[30];
  swift_task_dealloc();
  uint64_t v28 = 0;
  unint64_t v29 = 0xE000000000000000;
  sub_256B3FB70();
  swift_bridgeObjectRelease();
  uint64_t v28 = 0xD000000000000026;
  unint64_t v29 = 0x8000000256B47E70;
  id v23 = objc_msgSend(v22, sel_name);
  sub_256B3F6B0();

  sub_256B3F760();
  swift_bridgeObjectRelease();
  sub_256A4EC98();
  uint64_t v24 = swift_allocError();
  sub_256A4EF3C(v24, v25);

  v19(v20, v21);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_256A4AAB4();
  return v26();
}

uint64_t sub_256A4D16C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2)
  {
    id v3 = a2;
    return sub_256A4D1CC(v2, (uint64_t)v3);
  }
  else
  {
    return j__swift_continuation_throwingResume();
  }
}

uint64_t sub_256A4D1CC(uint64_t a1, uint64_t a2)
{
  sub_256A39D2C((uint64_t *)&unk_26B2B5DA0);
  uint64_t v4 = swift_allocError();
  *uint64_t v5 = a2;

  return MEMORY[0x270FA2410](a1, v4);
}

uint64_t SubscriptionManagerProvider.unsubscribe(subscriber:subscriptionName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[24] = a4;
  v5[25] = v4;
  v5[22] = a2;
  v5[23] = a3;
  v5[21] = a1;
  return MEMORY[0x270FA2498](sub_256A4D25C, 0, 0);
}

uint64_t sub_256A4D25C()
{
  unint64_t v29 = v0;
  uint64_t v1 = sub_256B3F440();
  v0[26] = v1;
  sub_256A49FB8();
  uint64_t v3 = v2;
  v0[27] = v2;
  v0[28] = *(void *)(v4 + 64);
  uint64_t v5 = swift_task_alloc();
  v0[29] = v5;
  sub_256B3F430();
  if (qword_26B2B6590 != -1) {
    swift_once();
  }
  uint64_t v6 = sub_256B3F4A0();
  v0[30] = sub_256A46E9C(v6, (uint64_t)qword_26B2C4018);
  uint64_t v7 = swift_task_alloc();
  os_log_type_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[31] = v8;
  v0[32] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v8(v7, v5, v1);
  swift_bridgeObjectRetain_n();
  sub_256A4EFFC();
  os_log_type_t v9 = sub_256B3F470();
  os_log_type_t v10 = sub_256B3F9F0();
  BOOL v11 = os_log_type_enabled(v9, v10);
  unint64_t v12 = v0[24];
  if (v11)
  {
    uint64_t v26 = v0[21];
    uint64_t v27 = v0[23];
    unint64_t v25 = v0[22];
    uint64_t v13 = sub_256A4A8A8();
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315650;
    sub_256A4ED24();
    uint64_t v14 = sub_256B3FE80();
    v0[18] = sub_256B3B598(v14, v15, &v28);
    sub_256B3FAA0();
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v16(v7, v1);
    *(_WORD *)(v13 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[19] = sub_256B3B598(v26, v25, &v28);
    sub_256B3FAA0();
    sub_256A4EF24();
    *(_WORD *)(v13 + 22) = 2080;
    swift_bridgeObjectRetain();
    v0[20] = sub_256B3B598(v27, v12, &v28);
    sub_256B3FAA0();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_256A36000, v9, v10, "SubscriptionManagerProvider: Request ID: %s, requesting unsubscribe for: %s, subscription name: %s", (uint8_t *)v13, 0x20u);
    swift_arrayDestroy();
    sub_256A4A158();
    sub_256A4A158();

    swift_task_dealloc();
  }
  else
  {
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v16(v7, v1);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_bridgeObjectRelease();
  }
  v0[33] = v16;
  uint64_t v17 = v0[24];
  uint64_t v18 = v0[23];
  id v19 = *(void **)(v0[25] + 16);
  uint64_t v20 = sub_256B3F690();
  v0[34] = v20;
  sub_256A39D2C(&qword_26B2B50D0);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_256B57080;
  *(void *)(v21 + 32) = v18;
  *(void *)(v21 + 40) = v17;
  swift_bridgeObjectRetain();
  uint64_t v22 = sub_256B3F850();
  v0[35] = v22;
  swift_bridgeObjectRelease();
  v0[2] = v0;
  v0[3] = sub_256A4D6E8;
  uint64_t v23 = swift_continuation_init();
  v0[10] = MEMORY[0x263EF8330];
  v0[11] = 0x40000000;
  v0[12] = sub_256A4D16C;
  v0[13] = &unk_265423398;
  v0[14] = v23;
  objc_msgSend(v19, sel_unsubscribe_subscriptionNames_queue_completion_, v20, v22, 0, v0 + 10);
  return MEMORY[0x270FA23F0](v0 + 2);
}

uint64_t sub_256A4D6E8()
{
  sub_256A4A1FC();
  sub_256A49FD4();
  uint64_t v1 = *(void *)(v0 + 48);
  *(void *)(v2 + 288) = v1;
  if (v1) {
    uint64_t v3 = sub_256A4DA38;
  }
  else {
    uint64_t v3 = sub_256A4D7D0;
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

uint64_t sub_256A4D7D0()
{
  uint64_t v24 = v0;
  uint64_t v1 = *(void **)(v0 + 272);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 248);
  uint64_t v3 = *(void *)(v0 + 232);
  uint64_t v4 = *(void *)(v0 + 208);

  uint64_t v5 = swift_task_alloc();
  v2(v5, v3, v4);
  swift_bridgeObjectRetain_n();
  uint64_t v6 = sub_256B3F470();
  os_log_type_t v7 = sub_256B3F9F0();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v21 = *(void *)(v0 + 232);
    uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v0 + 264);
    uint64_t v8 = *(void *)(v0 + 208);
    unint64_t v9 = *(void *)(v0 + 192);
    uint64_t v20 = *(void *)(v0 + 184);
    os_log_type_t v10 = (uint8_t *)sub_256A4EFE4();
    uint64_t v23 = sub_256A4EED0();
    *(_DWORD *)os_log_type_t v10 = 136315394;
    sub_256A4ED24();
    uint64_t v11 = sub_256B3FE80();
    *(void *)(v0 + 128) = sub_256B3B598(v11, v12, &v23);
    sub_256A4EF00();
    swift_bridgeObjectRelease();
    v22(v5, v8);
    sub_256A4EF9C();
    swift_bridgeObjectRetain();
    uint64_t v13 = sub_256B3B598(v20, v9, &v23);
    sub_256A4EF60(v13);
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_256A36000, v6, v7, "SubscriptionManagerProvider: Request ID: %s, successfully subscribed to subscription %s", v10, 0x16u);
    swift_arrayDestroy();
    sub_256A4A158();
    sub_256A4A158();

    v22(v21, v8);
    swift_task_dealloc();
  }
  else
  {
    uint64_t v14 = *(void (**)(uint64_t))(v0 + 264);
    uint64_t v15 = *(void *)(v0 + 232);
    uint64_t v16 = *(void *)(v0 + 208);

    swift_bridgeObjectRelease_n();
    uint64_t v17 = sub_256A4EFAC();
    v14(v17);
    swift_task_dealloc();
    ((void (*)(uint64_t, uint64_t))v14)(v15, v16);
  }
  swift_task_dealloc();
  uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
  return v18();
}

uint64_t sub_256A4DA38()
{
  unint64_t v29 = v0;
  uint64_t v1 = (void *)v0[35];
  uint64_t v2 = (void *)v0[34];
  uint64_t v3 = (void (*)(uint64_t, uint64_t, uint64_t))v0[31];
  uint64_t v4 = v0[29];
  uint64_t v5 = v0[26];
  swift_willThrow();

  uint64_t v6 = swift_task_alloc();
  v3(v6, v4, v5);
  os_log_type_t v7 = sub_256B3F470();
  os_log_type_t v8 = sub_256B3F9D0();
  if (os_log_type_enabled(v7, v8))
  {
    unint64_t v9 = (_DWORD *)sub_256A4A734();
    uint64_t v27 = sub_256A4A8A8();
    *unint64_t v9 = 136315138;
    sub_256A4ED24();
    uint64_t v10 = sub_256B3FE80();
    v0[15] = sub_256B3B598(v10, v11, &v27);
    sub_256A4EFC4();
    swift_bridgeObjectRelease();
    uint64_t v12 = sub_256A4EE74();
    v13(v12);
    sub_256A4F014(&dword_256A36000, v14, v15, "SubscriptionManagerProvider: Request ID %s. Failed to unsubscribe.");
    swift_arrayDestroy();
    sub_256A4A158();
    sub_256A4A158();
  }
  else
  {
    uint64_t v16 = sub_256A4EEE8();
    v17(v16);
  }

  uint64_t v18 = (void *)v0[36];
  id v19 = (void (*)(uint64_t, uint64_t))v0[33];
  uint64_t v20 = v0[29];
  uint64_t v21 = v0[26];
  swift_task_dealloc();
  uint64_t v27 = 0;
  unint64_t v28 = 0xE000000000000000;
  sub_256B3FB70();
  swift_bridgeObjectRelease();
  uint64_t v27 = 0xD000000000000028;
  unint64_t v28 = 0x8000000256B47EA0;
  sub_256B3F760();
  uint64_t v22 = v27;
  unint64_t v23 = v28;
  sub_256A4EC98();
  swift_allocError();
  *(void *)uint64_t v24 = v22;
  *(void *)(v24 + 8) = v23;
  *(unsigned char *)(v24 + 16) = 2;
  swift_willThrow();

  v19(v20, v21);
  swift_task_dealloc();
  sub_256A4AAB4();
  return v25();
}

void SubscriptionManagerProvider.updateAssets(subscriber:subscriptionName:policies:queue:detailedProgress:completion:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = v10;
  if (qword_26B2B6590 != -1) {
    swift_once();
  }
  uint64_t v16 = sub_256B3F4A0();
  sub_256A46E9C(v16, (uint64_t)qword_26B2C4018);
  swift_bridgeObjectRetain_n();
  sub_256A4EFFC();
  uint64_t v17 = sub_256B3F470();
  os_log_type_t v18 = sub_256B3F9F0();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = sub_256A4EFE4();
    uint64_t aBlock = sub_256A4EED0();
    *(_DWORD *)uint64_t v19 = 136315394;
    swift_bridgeObjectRetain();
    sub_256B3B598(a1, a2, &aBlock);
    sub_256B3FAA0();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v19 + 12) = 2080;
    swift_bridgeObjectRetain();
    sub_256B3B598(a3, a4, &aBlock);
    sub_256B3FAA0();
    sub_256A4EF24();
    _os_log_impl(&dword_256A36000, v17, v18, "SubscriptionManagerProvider: Starting request to update assets for subscriber: %s, subscription name: %s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    sub_256A4A158();
    sub_256A4A158();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v24 = *(void **)(v11 + 16);
  uint64_t v30 = (void *)sub_256B3F690();
  uint64_t v26 = (void *)sub_256B3F690();
  if (a5) {
    uint64_t v25 = (void *)sub_256B3F850();
  }
  else {
    uint64_t v25 = 0;
  }
  uint64_t v20 = (void *)swift_allocObject();
  v20[2] = a7;
  v20[3] = a8;
  v20[4] = a1;
  v20[5] = a2;
  v20[6] = a3;
  v20[7] = a4;
  uint64_t v36 = sub_256A4ED6C;
  uint64_t v37 = v20;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v33 = 1107296256;
  unint64_t v34 = sub_256A4E3A8;
  uint64_t v35 = &unk_27060D218;
  uint64_t v21 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_256A4ED94(a7);
  swift_release();
  uint64_t v22 = (void *)swift_allocObject();
  v22[2] = a9;
  void v22[3] = a10;
  void v22[4] = a1;
  v22[5] = a2;
  v22[6] = a3;
  v22[7] = a4;
  uint64_t v36 = sub_256A4EDF8;
  uint64_t v37 = v22;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v33 = 1107296256;
  unint64_t v34 = sub_256A4E64C;
  uint64_t v35 = &unk_270604020;
  unint64_t v23 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_256A4ED94(a9);
  swift_release();
  objc_msgSend(v24, sel_updateAssetsForSubscriber_subscriptionName_policies_queue_detailedProgress_completion_, v30, v26, v25, a6, v21, v23);
  _Block_release(v23);
  _Block_release(v21);
}

void sub_256A4E08C(void *a1, void (*a2)(uint64_t *), uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  objc_msgSend(a1, sel_completedPercent);
  uint64_t v14 = v13;
  uint64_t v15 = (uint64_t)objc_msgSend(a1, sel_completedBytes);
  if (v15 < 0 || (v16 = v15, uint64_t v17 = (uint64_t)objc_msgSend(a1, sel_totalBytes), v17 < 0))
  {
    sub_256B3FC60();
    __break(1u);
  }
  else
  {
    uint64_t v18 = v17;
    sub_256A4B7D4((unint64_t)objc_msgSend(a1, sel_downloadStatus), v25);
    if (a2)
    {
      char v19 = v25[0];
      v25[0] = v14;
      v25[1] = v16;
      v25[2] = v18;
      char v26 = v19;
      swift_retain();
      a2(v25);
      sub_256A4EE58((uint64_t)a2);
    }
    if (qword_26B2B6590 != -1) {
      swift_once();
    }
    uint64_t v20 = sub_256B3F4A0();
    sub_256A46E9C(v20, (uint64_t)qword_26B2C4018);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v21 = sub_256B3F470();
    os_log_type_t v22 = sub_256B3F9F0();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      v25[0] = v24;
      *(_DWORD *)uint64_t v23 = 136315650;
      swift_bridgeObjectRetain();
      uint64_t v27 = sub_256B3B598(a4, a5, v25);
      sub_256B3FAA0();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v23 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v27 = sub_256B3B598(a6, a7, v25);
      sub_256B3FAA0();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v23 + 22) = 2048;
      uint64_t v27 = v14;
      sub_256B3FAA0();
      _os_log_impl(&dword_256A36000, v21, v22, "SubscriptionManagerProvider: Progress received for subscriber: %s, subscription name: %s - %f", (uint8_t *)v23, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x25A2ABEE0](v24, -1, -1);
      MEMORY[0x25A2ABEE0](v23, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
  }
}

void sub_256A4E3A8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

void sub_256A4E410(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a1)
  {
    uint64_t v11 = swift_retain();
    a1(v11);
    sub_256A4EE58((uint64_t)a1);
  }
  if (qword_26B2B6590 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_256B3F4A0();
  sub_256A46E9C(v12, (uint64_t)qword_26B2C4018);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v13 = sub_256B3F470();
  os_log_type_t v14 = sub_256B3F9F0();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    uint64_t v17 = v16;
    *(_DWORD *)uint64_t v15 = 136315394;
    swift_bridgeObjectRetain();
    sub_256B3B598(a3, a4, &v17);
    sub_256B3FAA0();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v15 + 12) = 2080;
    swift_bridgeObjectRetain();
    sub_256B3B598(a5, a6, &v17);
    sub_256B3FAA0();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_256A36000, v13, v14, "SubscriptionManagerProvider: Finished request to update assets for subscriber: %s, subscription name: %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25A2ABEE0](v16, -1, -1);
    MEMORY[0x25A2ABEE0](v15, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_256A4E64C(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t SubscriptionManagerProvider.deinit()
{
  return v0;
}

uint64_t SubscriptionManagerProvider.__deallocating_deinit()
{
  return MEMORY[0x270FA0228](v0, 24, 7);
}

uint64_t sub_256A4E6E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return SubscriptionManagerProvider.downloadStatus(subscriber:subscriptionName:)(*(Swift::String *)&a1, *(Swift::String *)&a3);
}

Swift::Int64 sub_256A4E70C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return SubscriptionManagerProvider.diskSpaceNeeded(subscriber:subscriptionName:)(*(Swift::String *)&a1, *(Swift::String *)&a3);
}

uint64_t sub_256A4E730()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_256A4EE70;
  return SubscriptionManagerProvider.subscribe(subscriber:subscription:)();
}

uint64_t sub_256A4E7E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *unint64_t v9 = v4;
  v9[1] = sub_256A4E8A0;
  return SubscriptionManagerProvider.unsubscribe(subscriber:subscriptionName:)(a1, a2, a3, a4);
}

uint64_t sub_256A4E8A0()
{
  sub_256A4A1FC();
  sub_256A49FD4();
  swift_task_dealloc();
  sub_256A4AAB4();
  return v0();
}

void sub_256A4E968(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

id sub_256A4E99C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v10 = (void *)sub_256B3F690();
  swift_bridgeObjectRelease();
  if (a3)
  {
    sub_256A39D2C(&qword_269F78E08);
    uint64_t v11 = (void *)sub_256B3F5D0();
    swift_bridgeObjectRelease();
    if (a4)
    {
LABEL_3:
      uint64_t v12 = (void *)sub_256B3F5D0();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v11 = 0;
    if (a4) {
      goto LABEL_3;
    }
  }
  uint64_t v12 = 0;
LABEL_6:
  uint64_t v13 = sub_256B3F410();
  os_log_type_t v14 = 0;
  if (sub_256A480C4(a5, 1, v13) != 1)
  {
    os_log_type_t v14 = (void *)sub_256B3F400();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a5, v13);
  }
  id v15 = objc_msgSend(v6, sel_initWithName_assetSets_usageAliases_expires_, v10, v11, v12, v14);

  return v15;
}

id sub_256A4EB00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  os_log_type_t v8 = (void *)sub_256B3F690();
  id v9 = objc_msgSend(a5, sel_diskSpaceNeededForSubscriber_subscriptionName_error_, a1, v8, a4);

  return v9;
}

uint64_t sub_256A4EB70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_256A39D2C(&qword_269F78DD8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_256A4EBD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AssetSetSubscription();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_256A4EC3C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AssetSetSubscription();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_256A4EC98()
{
  unint64_t result = qword_269F79D00;
  if (!qword_269F79D00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79D00);
  }
  return result;
}

unint64_t sub_256A4ECE4()
{
  unint64_t result = qword_269F78DE0;
  if (!qword_269F78DE0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_269F78DE0);
  }
  return result;
}

unint64_t sub_256A4ED24()
{
  unint64_t result = qword_269F78DE8;
  if (!qword_269F78DE8)
  {
    sub_256B3F440();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F78DE8);
  }
  return result;
}

void sub_256A4ED6C(void *a1)
{
  sub_256A4E08C(a1, *(void (**)(uint64_t *))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56));
}

uint64_t sub_256A4ED7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_256A4ED8C()
{
  return swift_release();
}

uint64_t sub_256A4ED94(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_256A4EDA8()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 64, 7);
}

void sub_256A4EDF8()
{
  sub_256A4E410(*(void (**)(uint64_t))(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56));
}

uint64_t type metadata accessor for SubscriptionManagerProvider()
{
  return self;
}

uint64_t method lookup function for SubscriptionManagerProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SubscriptionManagerProvider);
}

uint64_t dispatch thunk of SubscriptionManagerProvider.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t sub_256A4EE58(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_256A4EE74()
{
  return v0;
}

uint64_t sub_256A4EE98()
{
  return sub_256B3FAA0();
}

uint64_t sub_256A4EEB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  return sub_256B3B598(a5, v6, (uint64_t *)va);
}

uint64_t sub_256A4EED0()
{
  return swift_slowAlloc();
}

uint64_t sub_256A4EEE8()
{
  return v0;
}

uint64_t sub_256A4EF00()
{
  return sub_256B3FAA0();
}

uint64_t sub_256A4EF24()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_256A4EF3C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = v2;
  *(void *)(a2 + 8) = v3;
  *(unsigned char *)(a2 + 16) = 1;
  return swift_willThrow();
}

uint64_t sub_256A4EF60(uint64_t a1)
{
  *(void *)(v1 + 8) = a1;
  return sub_256B3FAA0();
}

uint64_t sub_256A4EF84()
{
  return v0;
}

void sub_256A4EF9C()
{
  *(_WORD *)(v0 + 12) = 2080;
}

uint64_t sub_256A4EFAC()
{
  return v0;
}

uint64_t sub_256A4EFC4()
{
  return sub_256B3FAA0();
}

uint64_t sub_256A4EFE4()
{
  return swift_slowAlloc();
}

uint64_t sub_256A4EFFC()
{
  return swift_bridgeObjectRetain_n();
}

void sub_256A4F014(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

void static Catalog.ResourceBundle.Sanitizer.TextModerationLMID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.Sanitizer.TextModerationLM()()
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.ADMPeopleGroundingID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.ADMPeopleGrounding()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_256A52744(a1, a2);
  static Catalog.Resource.LLM.Model.AFMTextInstruct300MBase()((void *)(v2 + 56), v3);
  static Catalog.Resource.LLM.Adapter.ADMPeopleGrounding()((void *)(v2 + 96));
  *(void *)(v2 + 168) = 0;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  sub_256A52688();
  sub_256A52518(v4);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.ADMPromptRewritingID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.ADMPromptRewriting()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_256A52744(a1, a2);
  uint64_t v4 = static Catalog.Resource.LLM.Model.AFMTextInstruct300MBase()((void *)(v2 + 56), v3);
  static Catalog.Resource.LLM.Adapter.ADMPromptRewriting()((void *)(v2 + 96), v4);
  *(void *)(v2 + 168) = 0;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  sub_256A52688();
  sub_256A52518(v5);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.AFMTextInstruct3BBaseID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.AFMTextInstruct3BBase()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_256A525D4(a1, a2);
  static Catalog.Resource.LLM.Model.AFMTextInstruct3BBase()((void *)(v2 + 56), v3);
  sub_256A526B0();
  sub_256A52518(v4);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.AnswerSynthesisID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.AnswerSynthesis()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_256A525D4(a1, a2);
  uint64_t v4 = static Catalog.Resource.LLM.Model.AFMTextInstruct3BBase()(v2 + 7, v3);
  uint64_t v5 = static Catalog.Resource.LLM.Adapter.AnswerSynthesis()(v2 + 12, v4);
  static Catalog.Resource.LLM.DraftModel.AnswerSynthesis()(v2 + 17, v5);
  sub_256A52518(0xD000000000000032);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.AnswerSynthesisServerID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.AnswerSynthesisServer()()
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.AutonamingMessagesID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.AutonamingMessages()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_256A525D4(a1, a2);
  uint64_t v4 = static Catalog.Resource.LLM.Model.AFMTextInstruct3BBase()(v2 + 7, v3);
  uint64_t v5 = static Catalog.Resource.LLM.Adapter.AutonamingMessages()(v2 + 12, v4);
  static Catalog.Resource.LLM.DraftModel.AutonamingMessages()(v2 + 17, v5);
  sub_256A526D8();
  sub_256A52518(v6);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.ChatGPTID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.ChatGPT()()
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.CodeLMID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.CodeLM()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = static Catalog.Resource.Tokenizer.CodeLMTokenizer()((void *)(a2 + 16), a1);
  static Catalog.Resource.LLM.Model.CodeLM()((void *)(a2 + 56), v3);
  sub_256A52588();
  sub_256A52518(v4);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.CodeLMExperimentalID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.CodeLMExperimental()()
{
  sub_256A525C8();
  uint64_t v3 = static Catalog.Resource.Tokenizer.CodeLMTokenizerExperimental()(v2, v1);
  static Catalog.Resource.LLM.Model.CodeLMExperimental()((void *)(v0 + 56), v3);
  sub_256A525A4();
  sub_256A52518(0xD000000000000023);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.CodeLMLargeV1ID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.CodeLMLargeV1()()
{
  sub_256A525C8();
  uint64_t v3 = static Catalog.Resource.Tokenizer.CodeLMLargeV1Tokenizer()(v2, v1);
  static Catalog.Resource.LLM.Model.CodeLMLargeV1()((void *)(v0 + 56), v3);
  sub_256A5256C();
  sub_256A52518(v4);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.CodeLMLargeV2ID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.CodeLMLargeV2()()
{
  sub_256A525C8();
  uint64_t v3 = static Catalog.Resource.Tokenizer.CodeLMLargeV2Tokenizer()(v2, v1);
  static Catalog.Resource.LLM.Model.CodeLMLargeV2()((void *)(v0 + 56), v3);
  sub_256A5256C();
  sub_256A52518(v4);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.CodeLMLargeV3ID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.CodeLMLargeV3()()
{
  sub_256A525C8();
  uint64_t v3 = static Catalog.Resource.Tokenizer.CodeLMLargeV3Tokenizer()(v2, v1);
  static Catalog.Resource.LLM.Model.CodeLMLargeV3()((void *)(v0 + 56), v3);
  sub_256A5256C();
  sub_256A52518(v4);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.CodeLMSafetyGuardrailID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.CodeLMSafetyGuardrail()()
{
  sub_256A525C8();
  uint64_t v3 = static Catalog.Resource.Tokenizer.CodeLMSafetyGuardrailTokenizer()(v2, v1);
  static Catalog.Resource.LLM.Model.CodeLMSafetyGuardrail()((void *)(v0 + 56), v3);
  sub_256A52694();
  sub_256A52518(v4);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.CodeLMSmallV1ID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.CodeLMSmallV1()()
{
  sub_256A525C8();
  uint64_t v3 = static Catalog.Resource.Tokenizer.CodeLMSmallV1Tokenizer()(v2, v1);
  static Catalog.Resource.LLM.Model.CodeLMSmallV1()((void *)(v0 + 56), v3);
  sub_256A5256C();
  sub_256A52518(v4);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.CodeLMSmallV2ID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.CodeLMSmallV2()()
{
  sub_256A525C8();
  uint64_t v3 = static Catalog.Resource.Tokenizer.CodeLMSmallV2Tokenizer()(v2, v1);
  static Catalog.Resource.LLM.Model.CodeLMSmallV2()((void *)(v0 + 56), v3);
  sub_256A5256C();
  sub_256A52518(v4);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.CodeLMSmallV3ID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.CodeLMSmallV3()()
{
  sub_256A525C8();
  uint64_t v3 = static Catalog.Resource.Tokenizer.CodeLMSmallV3Tokenizer()(v2, v1);
  static Catalog.Resource.LLM.Model.CodeLMSmallV3()((void *)(v0 + 56), v3);
  sub_256A5256C();
  sub_256A52518(v4);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.CodeLMV1ANE3BID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.CodeLMV1ANE3B()()
{
  sub_256A525C8();
  uint64_t v3 = static Catalog.Resource.Tokenizer.CodeLMV1ANE3BTokenizer()(v2, v1);
  static Catalog.Resource.LLM.Model.CodeLMV1ANE3B()((void *)(v0 + 56), v3);
  sub_256A52724();
  static Catalog.Resource.LLM.DraftModel.CodeLMV1ANE3B()(v5, v4);
  sub_256A52518(0xD000000000000029);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.CodeLMV2ID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.CodeLMV2()()
{
  sub_256A525C8();
  uint64_t v3 = static Catalog.Resource.Tokenizer.CodeLMTokenizerV2()(v2, v1);
  static Catalog.Resource.LLM.Model.CodeLMV2()((void *)(v0 + 56), v3);
  sub_256A52588();
  sub_256A52518(v4);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.CodeLMV3ID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.CodeLMV3()()
{
  sub_256A525C8();
  uint64_t v3 = static Catalog.Resource.Tokenizer.CodeLMTokenizerV3()(v2, v1);
  static Catalog.Resource.LLM.Model.CodeLMV3()((void *)(v0 + 56), v3);
  sub_256A52588();
  sub_256A52518(v4);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.CodeLMV4ID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.CodeLMV4()()
{
  sub_256A525C8();
  uint64_t v3 = static Catalog.Resource.Tokenizer.CodeLMTokenizerV4()(v2, v1);
  static Catalog.Resource.LLM.Model.CodeLMV4()((void *)(v0 + 56), v3);
  sub_256A52588();
  sub_256A52518(v4);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.CodeLMWithDraftID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.CodeLMWithDraft()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = static Catalog.Resource.Tokenizer.CodeLMTokenizer()((void *)(a2 + 16), a1);
  static Catalog.Resource.LLM.Model.CodeLM()((void *)(a2 + 56), v3);
  sub_256A52724();
  static Catalog.Resource.LLM.DraftModel.CodeLM()(v5, v4);
  sub_256A526F0();
  sub_256A52518(v6);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.CodeSafetyGuardrailID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.CodeSafetyGuardrail()()
{
  sub_256A525C8();
  uint64_t v3 = static Catalog.Resource.Tokenizer.CodeSafetyGuardrailTokenizer()(v2, v1);
  static Catalog.Resource.LLM.Model.CodeSafetyGuardrail()((void *)(v0 + 56), v3);
  sub_256A52694();
  sub_256A52518(v4);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.ConciseToneID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.ConciseTone()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_256A525D4(a1, a2);
  uint64_t v4 = static Catalog.Resource.LLM.Model.AFMTextInstruct3BBase()(v2 + 7, v3);
  uint64_t v5 = static Catalog.Resource.LLM.Adapter.ConciseTone()(v2 + 12, v4);
  static Catalog.Resource.LLM.DraftModel.ConciseTone()(v2 + 17, v5);
  sub_256A52518(0xD00000000000002ELL);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.FriendlyToneID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.FriendlyTone()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_256A525D4(a1, a2);
  uint64_t v4 = static Catalog.Resource.LLM.Model.AFMTextInstruct3BBase()(v2 + 7, v3);
  uint64_t v5 = static Catalog.Resource.LLM.Adapter.FriendlyTone()(v2 + 12, v4);
  static Catalog.Resource.LLM.DraftModel.FriendlyTone()(v2 + 17, v5);
  sub_256A52518(0xD00000000000002FLL);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.InstructServerBaseID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.InstructServerBase()()
{
  sub_256A52554();
  static Catalog.Resource.LLM.Model.InstructServerBase()();
  sub_256A525A4();
  sub_256A526F0();
  sub_256A52518(v0);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.MagicRewriteID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.MagicRewrite()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_256A525D4(a1, a2);
  uint64_t v4 = static Catalog.Resource.LLM.Model.AFMTextInstruct3BBase()(v2 + 7, v3);
  uint64_t v5 = static Catalog.Resource.LLM.Adapter.MagicRewrite()(v2 + 12, v4);
  static Catalog.Resource.LLM.DraftModel.MagicRewrite()(v2 + 17, v5);
  sub_256A52518(0xD00000000000002FLL);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.MailReplyID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.MailReply()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_256A525D4(a1, a2);
  uint64_t v4 = static Catalog.Resource.LLM.Model.AFMTextInstruct3BBase()(v2 + 7, v3);
  uint64_t v5 = static Catalog.Resource.LLM.Adapter.MailReply()(v2 + 12, v4);
  static Catalog.Resource.LLM.DraftModel.MailReply()(v2 + 17, v5);
  sub_256A52518(0xD00000000000002CLL);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.MessagesReplyID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.MessagesReply()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_256A525D4(a1, a2);
  uint64_t v4 = static Catalog.Resource.LLM.Model.AFMTextInstruct3BBase()(v2 + 7, v3);
  uint64_t v5 = static Catalog.Resource.LLM.Adapter.MessagesReply()(v2 + 12, v4);
  static Catalog.Resource.LLM.DraftModel.MessagesReply()(v2 + 17, v5);
  sub_256A52518(0xD000000000000030);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.NLRouterBaseID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.NLRouterBase()()
{
  sub_256A525C8();
  uint64_t v1 = static Catalog.Resource.Tokenizer.NLRouterTokenizer()();
  static Catalog.Resource.LLM.Model.NLRouterBase()((void *)(v0 + 56), v1);
  sub_256A52588();
  sub_256A52518(v2);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.OpenEndedSchemaID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.OpenEndedSchema()()
{
  sub_256A52554();
  static Catalog.Resource.LLM.Model.InstructServerBase()();
  static Catalog.Resource.LLM.Adapter.OpenEndedSchema()();
  static Catalog.Resource.LLM.DraftModel.OpenEndedSchema()();
  sub_256A52738();
  sub_256A52518(v0);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.OpenEndedToneID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.OpenEndedTone()()
{
  sub_256A52554();
  static Catalog.Resource.LLM.Model.InstructServerBase()();
  static Catalog.Resource.LLM.Adapter.OpenEndedTone()();
  static Catalog.Resource.LLM.DraftModel.OpenEndedTone()();
  sub_256A52688();
  sub_256A52518(v0);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.OpenEndedToneBaseID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.OpenEndedToneBase()()
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.OpenEndedToneQueryResponseID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.OpenEndedToneQueryResponse()()
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.OpenEndedToneV2ID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.OpenEndedToneV2()()
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.PQAVerificationID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.PQAVerification()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_256A52744(a1, a2);
  uint64_t v4 = static Catalog.Resource.LLM.Model.AFMTextInstruct300MBase()((void *)(v2 + 56), v3);
  static Catalog.Resource.LLM.Adapter.PQAVerification()(v4);
  sub_256A5262C();
  sub_256A52518(0xD000000000000034);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.PQAVerificationBaseID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.PQAVerificationBase()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = sub_256A525D4(a1, a2);
  static Catalog.Resource.LLM.Model.PQAVerificationBase()(v2);
  sub_256A526B0();
  sub_256A52518(v3);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.PhotosMemoriesCreationAssetCurationID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.PhotosMemoriesCreationAssetCuration()()
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.PhotosMemoriesCreationAssetCurationV2ID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.PhotosMemoriesCreationAssetCurationV2()()
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.PhotosMemoriesCreationBaseID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.PhotosMemoriesCreationBase()()
{
  sub_256A52554();
  static Catalog.Resource.LLM.Model.PhotosMemoriesCreationBase()();
  sub_256A525A4();
  sub_256A526E4();
  sub_256A52518(v0);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.PhotosMemoriesCreationGlobalTraitsID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.PhotosMemoriesCreationGlobalTraits()()
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.PhotosMemoriesCreationGlobalTraitsV2ID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.PhotosMemoriesCreationGlobalTraitsV2()()
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.PhotosMemoriesCreationQueryUnderstandingID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.PhotosMemoriesCreationQueryUnderstanding()()
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.PhotosMemoriesCreationQueryUnderstandingV2ID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.PhotosMemoriesCreationQueryUnderstandingV2()()
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.PhotosMemoriesCreationQueryUnderstandingV3ID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.PhotosMemoriesCreationQueryUnderstandingV3()()
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.PhotosMemoriesCreationStorytellerID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.PhotosMemoriesCreationStoryteller()()
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.PhotosMemoriesCreationStorytellerV2ID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.PhotosMemoriesCreationStorytellerV2()()
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.PlannerID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.Planner()()
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.PlannerV2ID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.PlannerV2()()
{
  sub_256A52554();
  static Catalog.Resource.LLM.Model.InstructServerBase()();
  static Catalog.Resource.LLM.Adapter.PlannerV2()();
  static Catalog.Resource.LLM.DraftModel.PlannerV2()();
  sub_256A526E4();
  sub_256A52518(v0);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.PlannerV3ID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.PlannerV3()()
{
  sub_256A52554();
  static Catalog.Resource.LLM.Model.InstructServerBase()();
  static Catalog.Resource.LLM.Adapter.PlannerV3()();
  static Catalog.Resource.LLM.DraftModel.PlannerV3()();
  sub_256A526E4();
  sub_256A52518(v0);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.ProfessionalToneID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.ProfessionalTone()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_256A525D4(a1, a2);
  uint64_t v4 = static Catalog.Resource.LLM.Model.AFMTextInstruct3BBase()((void *)(v2 + 56), v3);
  uint64_t v5 = static Catalog.Resource.LLM.Adapter.ProfessionalTone()(v4);
  static Catalog.Resource.LLM.DraftModel.ProfessionalTone()(v5);
  sub_256A526E4();
  sub_256A52518(v6);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.ProofreadingReviewID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.ProofreadingReview()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_256A525D4(a1, a2);
  uint64_t v4 = static Catalog.Resource.LLM.Model.AFMTextInstruct3BBase()((void *)(v2 + 56), v3);
  uint64_t v5 = static Catalog.Resource.LLM.Adapter.ProofreadingReview()(v4);
  static Catalog.Resource.LLM.DraftModel.ProofreadingReview()(v5);
  sub_256A526D8();
  sub_256A52518(v6);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.ResponseGenerationID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.ResponseGeneration()()
{
  sub_256A52554();
  static Catalog.Resource.LLM.Model.InstructServerBase()();
  static Catalog.Resource.LLM.Adapter.ResponseGeneration()();
  static Catalog.Resource.LLM.DraftModel.ResponseGeneration()();
  sub_256A526CC();
  sub_256A52518(v0);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.ResponseGenerationV2ID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.ResponseGenerationV2()()
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.ResponseGenerationV3ID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.ResponseGenerationV3()()
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.SafetyID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.Safety()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_256A52744(a1, a2);
  uint64_t v4 = static Catalog.Resource.LLM.Model.AFMTextInstruct300MBase()((void *)(v2 + 56), v3);
  static Catalog.Resource.LLM.Adapter.Safety()(v4);
  sub_256A5262C();
  sub_256A52518(0xD00000000000002ALL);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.SafetyGuardrailID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.SafetyGuardrail()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_256A525D4(a1, a2);
  uint64_t v4 = static Catalog.Resource.LLM.Model.AFMTextInstruct3BBase()((void *)(v2 + 56), v3);
  uint64_t v5 = static Catalog.Resource.LLM.Adapter.SafetyGuardrail()(v4);
  static Catalog.Resource.LLM.DraftModel.SafetyGuardrail()(v5);
  sub_256A52518(0xD000000000000032);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.SafetyGuardrailLiteID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.SafetyGuardrailLite()()
{
  sub_256A525C8();
  uint64_t v0 = static Catalog.Resource.Tokenizer.SafetyGuardrailLiteTokenizer()();
  static Catalog.Resource.LLM.Model.SafetyGuardrailLite()(v0);
  sub_256A525A4();
  sub_256A52518(0xD00000000000002BLL);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.SearchQueryUnderstandingOnDeviceID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.SearchQueryUnderstandingOnDevice()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_256A525D4(a1, a2);
  uint64_t v4 = static Catalog.Resource.LLM.Model.AFMTextInstruct3BBase()((void *)(v2 + 56), v3);
  uint64_t UnderstandingOn = static Catalog.Resource.LLM.Adapter.SearchQueryUnderstandingOnDevice()(v4);
  static Catalog.Resource.LLM.DraftModel.SearchQueryUnderstandingOnDevice()(UnderstandingOn);
  sub_256A526CC();
  sub_256A52518(v6);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.SearchQueryUnderstandingServerID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.SearchQueryUnderstandingServer()()
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.ServerBulletsTransformID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.ServerBulletsTransform()()
{
  sub_256A52554();
  static Catalog.Resource.LLM.Model.InstructServerBase()();
  static Catalog.Resource.LLM.Adapter.ServerBulletsTransform()();
  static Catalog.Resource.LLM.DraftModel.ServerBulletsTransform()();
  sub_256A52738();
  sub_256A52518(v0);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.ServerConciseToneID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.ServerConciseTone()()
{
  sub_256A52554();
  static Catalog.Resource.LLM.Model.InstructServerBase()();
  static Catalog.Resource.LLM.Adapter.ServerConciseTone()();
  static Catalog.Resource.LLM.DraftModel.ServerConciseTone()();
  sub_256A526D8();
  sub_256A52518(v0);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.ServerFriendlyToneID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.ServerFriendlyTone()()
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.ServerMagicRewriteID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.ServerMagicRewrite()()
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.ServerMailReplyLongFormBasicID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.ServerMailReplyLongFormBasic()()
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.ServerMailReplyLongFormRewriteID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.ServerMailReplyLongFormRewrite()()
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.ServerMailReplyQAID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.ServerMailReplyQA()()
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.ServerProfessionalToneID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.ServerProfessionalTone()()
{
  sub_256A52554();
  static Catalog.Resource.LLM.Model.InstructServerBase()();
  static Catalog.Resource.LLM.Adapter.ServerProfessionalTone()();
  static Catalog.Resource.LLM.DraftModel.ServerProfessionalTone()();
  sub_256A52738();
  sub_256A52518(v0);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.ServerProofreadingReviewID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.ServerProofreadingReview()()
{
  sub_256A52554();
  static Catalog.Resource.LLM.Model.InstructServerBase()();
  static Catalog.Resource.LLM.Adapter.ServerProofreadingReview()();
  static Catalog.Resource.LLM.DraftModel.ServerProofreadingReview()();
  sub_256A526CC();
  sub_256A52518(v0);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.ServerTablesTransformID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.ServerTablesTransform()()
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.ServerTakeawaysTransformID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.ServerTakeawaysTransform()()
{
  sub_256A52554();
  static Catalog.Resource.LLM.Model.InstructServerBase()();
  static Catalog.Resource.LLM.Adapter.ServerTakeawaysTransform()();
  static Catalog.Resource.LLM.DraftModel.ServerTakeawaysTransform()();
  sub_256A526CC();
  sub_256A52518(v0);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.SummarizationID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.Summarization()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_256A525D4(a1, a2);
  uint64_t v4 = static Catalog.Resource.LLM.Model.AFMTextInstruct3BBase()(v2 + 7, v3);
  uint64_t v5 = static Catalog.Resource.LLM.Adapter.Summarization()(v2 + 12, v4);
  static Catalog.Resource.LLM.DraftModel.Summarization()(v2 + 17, v5);
  sub_256A52518(0xD00000000000002FLL);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.SummarizationTextSummarizerID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.SummarizationTextSummarizer()()
{
  sub_256A52554();
  static Catalog.Resource.LLM.Model.InstructServerBase()();
  static Catalog.Resource.LLM.Adapter.ServerTextSummarizer()();
  static Catalog.Resource.LLM.DraftModel.ServerTextSummarizer()();
  sub_256A52688();
  sub_256A52518(v0);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.SummarizationTextSummarizerAjaxBaseID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.SummarizationTextSummarizerAjaxBase()()
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.TextEventExtractionID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.TextEventExtraction()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_256A525D4(a1, a2);
  uint64_t v4 = static Catalog.Resource.LLM.Model.AFMTextInstruct3BBase()(v2 + 7, v3);
  uint64_t v5 = static Catalog.Resource.LLM.Adapter.TextEventExtraction()(v2 + 12, v4);
  static Catalog.Resource.LLM.DraftModel.TextEventExtraction()(v2 + 17, v5);
  sub_256A52518(0xD000000000000037);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.TextPersonExtractionID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.TextPersonExtraction()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_256A525D4(a1, a2);
  uint64_t v4 = static Catalog.Resource.LLM.Model.AFMTextInstruct3BBase()(v2 + 7, v3);
  uint64_t v5 = static Catalog.Resource.LLM.Adapter.TextPersonExtraction()(v2 + 12, v4);
  static Catalog.Resource.LLM.DraftModel.TextPersonExtraction()(v2 + 17, v5);
  sub_256A52688();
  sub_256A52518(v6);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.UIPreviewsID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.UIPreviews()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_256A525D4(a1, a2);
  uint64_t v4 = static Catalog.Resource.LLM.Model.AFMTextInstruct3BBase()(v2 + 7, v3);
  uint64_t v5 = static Catalog.Resource.LLM.Adapter.UIPreviews()(v2 + 12, v4);
  static Catalog.Resource.LLM.DraftModel.UIPreviews()(v2 + 17, v5);
  sub_256A526F0();
  sub_256A52518(v6);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.UrgencyClassificationID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.UrgencyClassification()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_256A525D4(a1, a2);
  uint64_t v4 = static Catalog.Resource.LLM.Model.AFMTextInstruct3BBase()(v2 + 7, v3);
  uint64_t v5 = static Catalog.Resource.LLM.Adapter.UrgencyClassification()(v2 + 12, v4);
  static Catalog.Resource.LLM.DraftModel.UrgencyClassification()(v2 + 17, v5);
  sub_256A52688();
  sub_256A52518(v6);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.VisualGenerationQueryHandlingLiteID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.VisualGenerationQueryHandlingLite()()
{
  sub_256A525C8();
  HandlingLite = static Catalog.Resource.Tokenizer.VisualGenerationQueryHandlingLiteTokenizer()(v2, v1);
  static Catalog.Resource.LLM.Model.VisualGenerationQueryHandlingLite()((void *)(v0 + 56), HandlingLite);
  sub_256A525A4();
  sub_256A52518(0xD00000000000002CLL);
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.VisualIntelligenceID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.TokenGeneration.LLM.VisualIntelligence()()
{
  sub_256A52554();
  static Catalog.Resource.LLM.Model.InstructServerBase()();
  static Catalog.Resource.LLM.Adapter.BaseAdapter()();
  sub_256A5262C();
  sub_256A526CC();
  sub_256A52518(v0);
}

void static Catalog.ResourceBundle.VisualGeneration.Diffusion.AnimationID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.VisualGeneration.Diffusion.Animation()()
{
}

void static Catalog.ResourceBundle.VisualGeneration.Diffusion.DiffusionBaseID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.VisualGeneration.Diffusion.DiffusionBase()()
{
  sub_256A52604();
  *(void *)(v0 + 88) = 0;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  sub_256A52518(0xD00000000000002BLL);
}

void static Catalog.ResourceBundle.VisualGeneration.Diffusion.EmojiID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.VisualGeneration.Diffusion.Emoji()()
{
}

void static Catalog.ResourceBundle.VisualGeneration.Diffusion.IllustrationID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.VisualGeneration.Diffusion.Illustration()()
{
  sub_256A52604();
  static Catalog.Resource.Diffusion.Adapter.Illustration()();
  sub_256A526E4();
  sub_256A52518(v0);
}

void static Catalog.ResourceBundle.VisualGeneration.Diffusion.PersonalizedAnimationID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.VisualGeneration.Diffusion.PersonalizedAnimation()()
{
}

void static Catalog.ResourceBundle.VisualGeneration.Diffusion.PersonalizedEmojiID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.VisualGeneration.Diffusion.PersonalizedEmoji()()
{
}

void static Catalog.ResourceBundle.VisualGeneration.Diffusion.PersonalizedIllustrationID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.VisualGeneration.Diffusion.PersonalizedIllustration()()
{
}

void static Catalog.ResourceBundle.VisualGeneration.Diffusion.PersonalizedScribbleID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.VisualGeneration.Diffusion.PersonalizedScribble()()
{
}

void static Catalog.ResourceBundle.VisualGeneration.Diffusion.PersonalizedSketchID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.VisualGeneration.Diffusion.PersonalizedSketch()()
{
  sub_256A52604();
  static Catalog.Resource.Diffusion.Adapter.PersonalizedSketch()();
  sub_256A52738();
  sub_256A52518(v0);
}

void static Catalog.ResourceBundle.VisualGeneration.Diffusion.RefinerID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.VisualGeneration.Diffusion.Refiner()()
{
}

void static Catalog.ResourceBundle.VisualGeneration.Diffusion.ScribbleID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.VisualGeneration.Diffusion.Scribble()()
{
  sub_256A52604();
  static Catalog.Resource.Diffusion.Adapter.Scribble()();
  sub_256A526D8();
  sub_256A52518(v0);
}

void static Catalog.ResourceBundle.VisualGeneration.Diffusion.SketchID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.VisualGeneration.Diffusion.Sketch()()
{
  sub_256A52604();
  static Catalog.Resource.Diffusion.Adapter.Sketch()();
  sub_256A526F0();
  sub_256A52518(v0);
}

void static Catalog.ResourceBundle.VisualGeneration.Diffusion.SkinToneEmojiID.getter(void *a1@<X8>)
{
}

void static Catalog.ResourceBundle.VisualGeneration.Diffusion.SkinToneEmoji()()
{
  sub_256A52604();
  static Catalog.Resource.Diffusion.Adapter.SkinToneEmoji()();
  sub_256A526D8();
  sub_256A52518(v0);
}

uint64_t static Catalog.ResourceBundle.fetchAllResourceBundles()()
{
  sub_256A39D2C(&qword_26B2B30B0);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_256B57360;
  *(void *)(v0 + 56) = &type metadata for AssetBackedLLMBundle;
  unint64_t v1 = sub_256A52298();
  *(void *)(v0 + 64) = v1;
  uint64_t v2 = (void *)sub_256A52528();
  *(void *)(v0 + 32) = v2;
  uint64_t v3 = static Catalog.Resource.Tokenizer.AFMTextInstruct300MTokenizer()(v2 + 4, v2);
  static Catalog.Resource.LLM.Model.AFMTextInstruct300MBase()(v2 + 9, v3);
  static Catalog.Resource.LLM.Adapter.ADMPeopleGrounding()(v2 + 14);
  sub_256A526FC();
  v2[2] = 0xD000000000000038;
  v2[3] = 0x8000000256B42200;
  *(void *)(v0 + 96) = &type metadata for AssetBackedLLMBundle;
  *(void *)(v0 + 104) = v1;
  uint64_t v4 = (void *)sub_256A52528();
  *(void *)(v0 + 72) = v4;
  uint64_t v5 = static Catalog.Resource.Tokenizer.AFMTextInstruct300MTokenizer()(v4 + 4, v4);
  uint64_t v6 = static Catalog.Resource.LLM.Model.AFMTextInstruct300MBase()(v4 + 9, v5);
  static Catalog.Resource.LLM.Adapter.ADMPromptRewriting()(v4 + 14, v6);
  sub_256A526FC();
  v4[2] = 0xD000000000000038;
  v4[3] = 0x8000000256B42240;
  *(void *)(v0 + 136) = &type metadata for AssetBackedLLMBundle;
  *(void *)(v0 + 144) = v1;
  uint64_t v7 = sub_256A52528();
  *(void *)(v0 + 112) = v7;
  os_log_type_t v8 = static Catalog.Resource.Tokenizer.AFMTextInstructEnglish49k()((void *)(v7 + 32), v7);
  static Catalog.Resource.LLM.Model.AFMTextInstruct3BBase()((void *)(v7 + 72), v8);
  *(_OWORD *)(v7 + 160) = 0u;
  *(_OWORD *)(v7 + 176) = 0u;
  *(_OWORD *)(v7 + 128) = 0u;
  *(_OWORD *)(v7 + 144) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  sub_256A5267C();
  *(void *)(v7 + 16) = v10;
  *(void *)(v7 + 24) = v9;
  *(void *)(v0 + 176) = &type metadata for AssetBackedDiffusionBundle;
  unint64_t v94 = sub_256A522E8();
  *(void *)(v0 + 184) = v94;
  uint64_t v11 = sub_256A525EC();
  *(void *)(v0 + 152) = v11;
  static Catalog.Resource.Diffusion.Model.VisualGenerationBase()();
  static Catalog.Resource.Diffusion.Adapter.Animation()();
  sub_256A5267C();
  *(void *)(v11 + 16) = 0xD000000000000030;
  *(void *)(v11 + 24) = v12;
  *(void *)(v0 + 216) = &type metadata for AssetBackedLLMBundle;
  *(void *)(v0 + 224) = v1;
  uint64_t v13 = sub_256A52528();
  *(void *)(v0 + 192) = v13;
  static Catalog.ResourceBundle.TokenGeneration.LLM.AnswerSynthesis()(v13, v13 + 16);
  *(void *)(v0 + 256) = &type metadata for LLMBundle;
  unint64_t v14 = sub_256A52384();
  *(void *)(v0 + 264) = v14;
  *(void *)(v0 + 232) = sub_256A52528();
  static Catalog.ResourceBundle.TokenGeneration.LLM.AnswerSynthesisServer()();
  *(void *)(v0 + 296) = &type metadata for AssetBackedLLMBundle;
  *(void *)(v0 + 304) = v1;
  uint64_t v15 = sub_256A52528();
  *(void *)(v0 + 272) = v15;
  static Catalog.ResourceBundle.TokenGeneration.LLM.AutonamingMessages()(v15, v15 + 16);
  *(void *)(v0 + 336) = &type metadata for LLMBundle;
  *(void *)(v0 + 344) = v14;
  *(void *)(v0 + 312) = sub_256A52528();
  static Catalog.Resource.Tokenizer.ChatGPTTokenizer()();
  static Catalog.Resource.LLM.Model.ChatGPT()();
  sub_256A52540();
  sub_256A525B8(0xD000000000000018);
  *(void *)(v0 + 376) = &type metadata for AssetBackedLLMBundle;
  *(void *)(v0 + 384) = v1;
  uint64_t v16 = sub_256A52528();
  *(void *)(v0 + 352) = v16;
  uint64_t v17 = static Catalog.Resource.Tokenizer.CodeLMTokenizer()((void *)(v16 + 32), v16);
  static Catalog.Resource.LLM.Model.CodeLM()((void *)(v16 + 72), v17);
  sub_256A52540();
  sub_256A52640((uint64_t)"com.apple.fm.code.generate_v1.base");
  uint64_t v19 = v18;
  *(void *)(v0 + 416) = &type metadata for AssetBackedLLMBundle;
  *(void *)(v0 + 424) = v1;
  uint64_t v20 = sub_256A52528();
  *(void *)(v0 + 392) = v20;
  uint64_t v21 = static Catalog.Resource.Tokenizer.CodeLMTokenizerExperimental()((void *)(v20 + 32), v20);
  static Catalog.Resource.LLM.Model.CodeLMExperimental()((void *)(v20 + 72), v21);
  sub_256A52540();
  sub_256A525B8(0xD000000000000023);
  *(void *)(v0 + 456) = &type metadata for AssetBackedLLMBundle;
  *(void *)(v0 + 464) = v1;
  uint64_t v22 = sub_256A52528();
  *(void *)(v0 + 432) = v22;
  uint64_t v23 = static Catalog.Resource.Tokenizer.CodeLMLargeV1Tokenizer()((void *)(v22 + 32), v22);
  static Catalog.Resource.LLM.Model.CodeLMLargeV1()((void *)(v22 + 72), v23);
  sub_256A52540();
  sub_256A5261C((uint64_t)"com.apple.fm.code.generate_large_v1.base");
  *(void *)(v0 + 496) = &type metadata for AssetBackedLLMBundle;
  *(void *)(v0 + 504) = v1;
  uint64_t v24 = sub_256A52528();
  *(void *)(v0 + 472) = v24;
  uint64_t v25 = static Catalog.Resource.Tokenizer.CodeLMLargeV2Tokenizer()((void *)(v24 + 32), v24);
  static Catalog.Resource.LLM.Model.CodeLMLargeV2()((void *)(v24 + 72), v25);
  sub_256A52540();
  sub_256A5261C((uint64_t)"com.apple.fm.code.generate_large_v2.base");
  *(void *)(v0 + 536) = &type metadata for AssetBackedLLMBundle;
  *(void *)(v0 + 544) = v1;
  uint64_t v26 = sub_256A52528();
  *(void *)(v0 + 512) = v26;
  uint64_t v27 = static Catalog.Resource.Tokenizer.CodeLMLargeV3Tokenizer()((void *)(v26 + 32), v26);
  static Catalog.Resource.LLM.Model.CodeLMLargeV3()((void *)(v26 + 72), v27);
  sub_256A52540();
  sub_256A5261C((uint64_t)"com.apple.fm.code.generate_large_v3.base");
  *(void *)(v0 + 576) = &type metadata for AssetBackedLLMBundle;
  *(void *)(v0 + 584) = v1;
  unint64_t v28 = (void *)sub_256A52528();
  *(void *)(v0 + 552) = v28;
  unint64_t v29 = static Catalog.Resource.Tokenizer.CodeLMSafetyGuardrailTokenizer()(v28 + 4, v28);
  static Catalog.Resource.LLM.Model.CodeLMSafetyGuardrail()(v28 + 9, v29);
  sub_256A52540();
  v28[2] = 0xD000000000000030;
  v28[3] = 0x8000000256B427F0;
  *(void *)(v0 + 616) = &type metadata for AssetBackedLLMBundle;
  *(void *)(v0 + 624) = v1;
  uint64_t v30 = sub_256A52528();
  *(void *)(v0 + 592) = v30;
  uint64_t v31 = static Catalog.Resource.Tokenizer.CodeLMSmallV1Tokenizer()((void *)(v30 + 32), v30);
  static Catalog.Resource.LLM.Model.CodeLMSmallV1()((void *)(v30 + 72), v31);
  sub_256A52540();
  sub_256A5261C((uint64_t)"com.apple.fm.code.generate_small_v1.base");
  *(void *)(v0 + 656) = &type metadata for AssetBackedLLMBundle;
  *(void *)(v0 + 664) = v1;
  uint64_t v32 = sub_256A52528();
  *(void *)(v0 + 632) = v32;
  uint64_t v33 = static Catalog.Resource.Tokenizer.CodeLMSmallV2Tokenizer()((void *)(v32 + 32), v32);
  static Catalog.Resource.LLM.Model.CodeLMSmallV2()((void *)(v32 + 72), v33);
  sub_256A52540();
  sub_256A5261C((uint64_t)"com.apple.fm.code.generate_small_v2.base");
  *(void *)(v0 + 696) = &type metadata for AssetBackedLLMBundle;
  *(void *)(v0 + 704) = v1;
  uint64_t v34 = sub_256A52528();
  *(void *)(v0 + 672) = v34;
  uint64_t v35 = static Catalog.Resource.Tokenizer.CodeLMSmallV3Tokenizer()((void *)(v34 + 32), v34);
  static Catalog.Resource.LLM.Model.CodeLMSmallV3()((void *)(v34 + 72), v35);
  sub_256A52540();
  sub_256A5261C((uint64_t)"com.apple.fm.code.generate_small_v3.base");
  *(void *)(v0 + 736) = &type metadata for AssetBackedLLMBundle;
  *(void *)(v0 + 744) = v1;
  uint64_t v36 = sub_256A52528();
  *(void *)(v0 + 712) = v36;
  uint64_t v37 = static Catalog.Resource.Tokenizer.CodeLMV1ANE3BTokenizer()((void *)(v36 + 32), v36);
  static Catalog.Resource.LLM.Model.CodeLMV1ANE3B()((void *)(v36 + 72), v37);
  sub_256A52710();
  static Catalog.Resource.LLM.DraftModel.CodeLMV1ANE3B()(v39, v38);
  sub_256A525B8(0xD000000000000029);
  *(void *)(v0 + 776) = &type metadata for AssetBackedLLMBundle;
  *(void *)(v0 + 784) = v1;
  uint64_t v40 = sub_256A52528();
  *(void *)(v0 + 752) = v40;
  uint64_t v41 = static Catalog.Resource.Tokenizer.CodeLMTokenizerV2()((void *)(v40 + 32), v40);
  static Catalog.Resource.LLM.Model.CodeLMV2()((void *)(v40 + 72), v41);
  sub_256A52540();
  sub_256A52650((uint64_t)"com.apple.fm.code.generate_v2.base");
  *(void *)(v0 + 816) = &type metadata for AssetBackedLLMBundle;
  *(void *)(v0 + 824) = v1;
  uint64_t v42 = sub_256A52528();
  *(void *)(v0 + 792) = v42;
  uint64_t v43 = static Catalog.Resource.Tokenizer.CodeLMTokenizerV3()((void *)(v42 + 32), v42);
  static Catalog.Resource.LLM.Model.CodeLMV3()((void *)(v42 + 72), v43);
  sub_256A52540();
  sub_256A52650((uint64_t)"com.apple.fm.code.generate_v3.base");
  *(void *)(v0 + 856) = &type metadata for AssetBackedLLMBundle;
  *(void *)(v0 + 864) = v1;
  uint64_t v44 = sub_256A52528();
  *(void *)(v0 + 832) = v44;
  uint64_t v45 = static Catalog.Resource.Tokenizer.CodeLMTokenizerV4()((void *)(v44 + 32), v44);
  static Catalog.Resource.LLM.Model.CodeLMV4()((void *)(v44 + 72), v45);
  sub_256A52540();
  sub_256A52650((uint64_t)"com.apple.fm.code.generate_v4.base");
  *(void *)(v0 + 896) = &type metadata for AssetBackedLLMBundle;
  *(void *)(v0 + 904) = v1;
  uint64_t v46 = sub_256A52528();
  *(void *)(v0 + 872) = v46;
  unint64_t v47 = static Catalog.Resource.Tokenizer.CodeLMTokenizer()((void *)(v46 + 32), v46);
  static Catalog.Resource.LLM.Model.CodeLM()((void *)(v46 + 72), v47);
  sub_256A52710();
  static Catalog.Resource.LLM.DraftModel.CodeLM()(v49, v48);
  sub_256A52650((uint64_t)"com.apple.fm.code.generate_v1.base_with_draft");
  *(void *)(v0 + 936) = &type metadata for AssetBackedLLMBundle;
  *(void *)(v0 + 944) = v1;
  uint64_t v50 = (void *)sub_256A52528();
  *(void *)(v0 + 912) = v50;
  id v51 = static Catalog.Resource.Tokenizer.CodeSafetyGuardrailTokenizer()(v50 + 4, v50);
  static Catalog.Resource.LLM.Model.CodeSafetyGuardrail()(v50 + 9, v51);
  sub_256A52540();
  v50[2] = 0xD000000000000030;
  v50[3] = 0x8000000256B41030;
  *(void *)(v0 + 976) = &type metadata for AssetBackedLLMBundle;
  *(void *)(v0 + 984) = v1;
  uint64_t v52 = sub_256A52528();
  *(void *)(v0 + 952) = v52;
  static Catalog.ResourceBundle.TokenGeneration.LLM.ConciseTone()(v52, v52 + 16);
  *(void *)(v0 + 1016) = &type metadata for AssetBackedDiffusionBundle;
  *(void *)(v0 + 1024) = v94;
  uint64_t v53 = sub_256A525EC();
  *(void *)(v0 + 992) = v53;
  static Catalog.Resource.Diffusion.Model.VisualGenerationBase()();
  *(void *)(v53 + 104) = 0;
  *(_OWORD *)(v53 + 88) = 0u;
  *(_OWORD *)(v53 + 72) = 0u;
  sub_256A52640((uint64_t)"com.apple.fm.visual.image_diffusion_v1.base");
  *(void *)(v0 + 1056) = &type metadata for AssetBackedDiffusionBundle;
  *(void *)(v0 + 1064) = v94;
  *(void *)(v0 + 1032) = sub_256A525EC();
  static Catalog.Resource.Diffusion.Model.VisualGenerationBase()();
  static Catalog.Resource.Diffusion.Adapter.Emoji()();
  sub_256A52640((uint64_t)"com.apple.fm.visual.image_diffusion_v1.emoji");
  *(void *)(v0 + 1096) = &type metadata for AssetBackedLLMBundle;
  *(void *)(v0 + 1104) = v1;
  uint64_t v54 = sub_256A52528();
  *(void *)(v0 + 1072) = v54;
  static Catalog.ResourceBundle.TokenGeneration.LLM.FriendlyTone()(v54, v54 + 16);
  *(void *)(v0 + 1136) = &type metadata for AssetBackedDiffusionBundle;
  *(void *)(v0 + 1144) = v94;
  *(void *)(v0 + 1112) = sub_256A525EC();
  static Catalog.Resource.Diffusion.Model.VisualGenerationBase()();
  static Catalog.Resource.Diffusion.Adapter.Illustration()();
  sub_256A52640((uint64_t)"com.apple.fm.visual.image_diffusion_v1.illustration");
  *(void *)(v0 + 1176) = &type metadata for LLMBundle;
  *(void *)(v0 + 1184) = v14;
  *(void *)(v0 + 1152) = sub_256A52528();
  static Catalog.Resource.Tokenizer.InstructServerTokenizer()();
  static Catalog.Resource.LLM.Model.InstructServerBase()();
  sub_256A52540();
  sub_256A52650((uint64_t)"com.apple.fm.language.instruct_server_v1.base");
  *(void *)(v0 + 1216) = &type metadata for AssetBackedLLMBundle;
  *(void *)(v0 + 1224) = v1;
  uint64_t v55 = sub_256A52528();
  *(void *)(v0 + 1192) = v55;
  static Catalog.ResourceBundle.TokenGeneration.LLM.MagicRewrite()(v55, v55 + 16);
  *(void *)(v0 + 1256) = &type metadata for AssetBackedLLMBundle;
  *(void *)(v0 + 1264) = v1;
  uint64_t v56 = sub_256A52528();
  *(void *)(v0 + 1232) = v56;
  static Catalog.ResourceBundle.TokenGeneration.LLM.MailReply()(v56, v56 + 16);
  *(void *)(v0 + 1296) = &type metadata for AssetBackedLLMBundle;
  *(void *)(v0 + 1304) = v1;
  uint64_t v57 = sub_256A52528();
  *(void *)(v0 + 1272) = v57;
  static Catalog.ResourceBundle.TokenGeneration.LLM.MessagesReply()(v57, v57 + 16);
  *(void *)(v0 + 1336) = &type metadata for AssetBackedLLMBundle;
  *(void *)(v0 + 1344) = v1;
  uint64_t v58 = (void *)sub_256A52528();
  *(void *)(v0 + 1312) = v58;
  uint64_t v59 = static Catalog.Resource.Tokenizer.NLRouterTokenizer()();
  static Catalog.Resource.LLM.Model.NLRouterBase()(v58 + 9, v59);
  sub_256A52540();
  v58[2] = v19;
  v58[3] = 0x8000000256B43390;
  *(void *)(v0 + 1376) = &type metadata for LLMBundle;
  *(void *)(v0 + 1384) = v14;
  *(void *)(v0 + 1352) = sub_256A52528();
  static Catalog.ResourceBundle.TokenGeneration.LLM.OpenEndedSchema()();
  *(void *)(v0 + 1416) = &type metadata for LLMBundle;
  *(void *)(v0 + 1424) = v14;
  *(void *)(v0 + 1392) = sub_256A52528();
  static Catalog.ResourceBundle.TokenGeneration.LLM.OpenEndedTone()();
  *(void *)(v0 + 1456) = &type metadata for LLMBundle;
  *(void *)(v0 + 1464) = v14;
  uint64_t v60 = sub_256A52528();
  *(void *)(v0 + 1432) = v60;
  static Catalog.Resource.Tokenizer.InstructServerTokenizer()();
  static Catalog.Resource.LLM.Model.InstructServerBase()();
  static Catalog.Resource.LLM.Adapter.BaseAdapter()();
  sub_256A52660();
  *(void *)(v60 + 16) = 0xD00000000000003DLL;
  *(void *)(v60 + 24) = 0x8000000256B47FB0;
  *(void *)(v0 + 1496) = &type metadata for LLMBundle;
  *(void *)(v0 + 1504) = v14;
  *(void *)(v0 + 1472) = sub_256A52528();
  static Catalog.ResourceBundle.TokenGeneration.LLM.OpenEndedToneQueryResponse()();
  *(void *)(v0 + 1536) = &type metadata for LLMBundle;
  *(void *)(v0 + 1544) = v14;
  *(void *)(v0 + 1512) = sub_256A52528();
  static Catalog.ResourceBundle.TokenGeneration.LLM.OpenEndedToneV2()();
  *(void *)(v0 + 1576) = &type metadata for AssetBackedLLMBundle;
  *(void *)(v0 + 1584) = v1;
  uint64_t v61 = sub_256A52528();
  *(void *)(v0 + 1552) = v61;
  uint64_t v62 = static Catalog.Resource.Tokenizer.AFMTextInstruct300MTokenizer()((void *)(v61 + 32), v61);
  uint64_t v63 = static Catalog.Resource.LLM.Model.AFMTextInstruct300MBase()((void *)(v61 + 72), v62);
  static Catalog.Resource.LLM.Adapter.PQAVerification()(v63);
  sub_256A52660();
  sub_256A525B8(0xD000000000000034);
  *(void *)(v0 + 1616) = &type metadata for AssetBackedLLMBundle;
  *(void *)(v0 + 1624) = v1;
  uint64_t v64 = (void *)sub_256A52528();
  *(void *)(v0 + 1592) = v64;
  uint64_t v65 = static Catalog.Resource.Tokenizer.AFMTextInstructEnglish49k()(v64 + 4, v64);
  static Catalog.Resource.LLM.Model.PQAVerificationBase()(v65);
  sub_256A52540();
  v64[2] = 0xD000000000000026;
  id v64[3] = 0x8000000256B48030;
  *(void *)(v0 + 1656) = &type metadata for AssetBackedDiffusionBundle;
  *(void *)(v0 + 1664) = v94;
  uint64_t v66 = sub_256A525EC();
  *(void *)(v0 + 1632) = v66;
  static Catalog.Resource.Diffusion.Model.VisualGenerationBase()();
  static Catalog.Resource.Diffusion.Adapter.PersonalizedAnimation()();
  *(void *)(v66 + 16) = 0xD00000000000003DLL;
  *(void *)(v66 + 24) = 0x8000000256B43790;
  *(void *)(v0 + 1696) = &type metadata for AssetBackedDiffusionBundle;
  *(void *)(v0 + 1704) = v94;
  *(void *)(v0 + 1672) = sub_256A525EC();
  static Catalog.Resource.Diffusion.Model.VisualGenerationBase()();
  static Catalog.Resource.Diffusion.Adapter.PersonalizedEmoji()();
  sub_256A525B8(0xD000000000000039);
  *(void *)(v0 + 1736) = &type metadata for AssetBackedDiffusionBundle;
  *(void *)(v0 + 1744) = v94;
  *(void *)(v0 + 1712) = sub_256A525EC();
  static Catalog.Resource.Diffusion.Model.VisualGenerationBase()();
  static Catalog.Resource.Diffusion.Adapter.PersonalizedIllustration()();
  sub_256A525B8(0xD000000000000040);
  *(void *)(v0 + 1776) = &type metadata for AssetBackedDiffusionBundle;
  *(void *)(v0 + 1784) = v94;
  *(void *)(v0 + 1752) = sub_256A525EC();
  static Catalog.Resource.Diffusion.Model.VisualGenerationBase()();
  static Catalog.Resource.Diffusion.Adapter.PersonalizedScribble()();
  sub_256A525B8(0xD000000000000042);
  *(void *)(v0 + 1816) = &type metadata for AssetBackedDiffusionBundle;
  *(void *)(v0 + 1824) = v94;
  *(void *)(v0 + 1792) = sub_256A525EC();
  static Catalog.Resource.Diffusion.Model.VisualGenerationBase()();
  static Catalog.Resource.Diffusion.Adapter.PersonalizedSketch()();
  sub_256A525B8(0xD00000000000003ALL);
  *(void *)(v0 + 1856) = &type metadata for LLMBundle;
  *(void *)(v0 + 1864) = v14;
  *(void *)(v0 + 1832) = sub_256A52528();
  static Catalog.ResourceBundle.TokenGeneration.LLM.PhotosMemoriesCreationAssetCuration()();
  *(void *)(v0 + 1896) = &type metadata for LLMBundle;
  *(void *)(v0 + 1904) = v14;
  *(void *)(v0 + 1872) = sub_256A52528();
  static Catalog.ResourceBundle.TokenGeneration.LLM.PhotosMemoriesCreationAssetCurationV2()();
  *(void *)(v0 + 1936) = &type metadata for LLMBundle;
  *(void *)(v0 + 1944) = v14;
  uint64_t v67 = sub_256A52528();
  *(void *)(v0 + 1912) = v67;
  static Catalog.Resource.Tokenizer.InstructServerTokenizer()();
  static Catalog.Resource.LLM.Model.PhotosMemoriesCreationBase()();
  sub_256A52540();
  sub_256A5267C();
  *(void *)(v67 + 16) = 0xD000000000000033;
  *(void *)(v67 + 24) = v68;
  *(void *)(v0 + 1976) = &type metadata for LLMBundle;
  *(void *)(v0 + 1984) = v14;
  *(void *)(v0 + 1952) = sub_256A52528();
  static Catalog.ResourceBundle.TokenGeneration.LLM.PhotosMemoriesCreationGlobalTraits()();
  *(void *)(v0 + 2016) = &type metadata for LLMBundle;
  *(void *)(v0 + 2024) = v14;
  *(void *)(v0 + 1992) = sub_256A52528();
  static Catalog.ResourceBundle.TokenGeneration.LLM.PhotosMemoriesCreationGlobalTraitsV2()();
  *(void *)(v0 + 2056) = &type metadata for LLMBundle;
  *(void *)(v0 + 2064) = v14;
  *(void *)(v0 + 2032) = sub_256A52528();
  static Catalog.ResourceBundle.TokenGeneration.LLM.PhotosMemoriesCreationQueryUnderstanding()();
  *(void *)(v0 + 2096) = &type metadata for LLMBundle;
  *(void *)(v0 + 2104) = v14;
  *(void *)(v0 + 2072) = sub_256A52528();
  static Catalog.ResourceBundle.TokenGeneration.LLM.PhotosMemoriesCreationQueryUnderstandingV2()();
  *(void *)(v0 + 2136) = &type metadata for LLMBundle;
  *(void *)(v0 + 2144) = v14;
  *(void *)(v0 + 2112) = sub_256A52528();
  static Catalog.ResourceBundle.TokenGeneration.LLM.PhotosMemoriesCreationQueryUnderstandingV3()();
  *(void *)(v0 + 2176) = &type metadata for LLMBundle;
  *(void *)(v0 + 2184) = v14;
  *(void *)(v0 + 2152) = sub_256A52528();
  static Catalog.ResourceBundle.TokenGeneration.LLM.PhotosMemoriesCreationStoryteller()();
  *(void *)(v0 + 2216) = &type metadata for LLMBundle;
  *(void *)(v0 + 2224) = v14;
  *(void *)(v0 + 2192) = sub_256A52528();
  static Catalog.ResourceBundle.TokenGeneration.LLM.PhotosMemoriesCreationStorytellerV2()();
  *(void *)(v0 + 2256) = &type metadata for LLMBundle;
  *(void *)(v0 + 2264) = v14;
  *(void *)(v0 + 2232) = sub_256A52528();
  static Catalog.ResourceBundle.TokenGeneration.LLM.Planner()();
  *(void *)(v0 + 2296) = &type metadata for LLMBundle;
  *(void *)(v0 + 2304) = v14;
  *(void *)(v0 + 2272) = sub_256A52528();
  static Catalog.ResourceBundle.TokenGeneration.LLM.PlannerV2()();
  *(void *)(v0 + 2336) = &type metadata for LLMBundle;
  *(void *)(v0 + 2344) = v14;
  *(void *)(v0 + 2312) = sub_256A52528();
  static Catalog.ResourceBundle.TokenGeneration.LLM.PlannerV3()();
  *(void *)(v0 + 2376) = &type metadata for AssetBackedLLMBundle;
  *(void *)(v0 + 2384) = v1;
  uint64_t v69 = sub_256A52528();
  *(void *)(v0 + 2352) = v69;
  static Catalog.ResourceBundle.TokenGeneration.LLM.ProfessionalTone()(v69, v69 + 16);
  *(void *)(v0 + 2416) = &type metadata for AssetBackedLLMBundle;
  *(void *)(v0 + 2424) = v1;
  uint64_t v70 = sub_256A52528();
  *(void *)(v0 + 2392) = v70;
  static Catalog.ResourceBundle.TokenGeneration.LLM.ProofreadingReview()(v70, v70 + 16);
  *(void *)(v0 + 2456) = &type metadata for AssetBackedDiffusionBundle;
  *(void *)(v0 + 2464) = v94;
  *(void *)(v0 + 2432) = sub_256A525EC();
  static Catalog.Resource.Diffusion.Model.VisualGenerationBase()();
  static Catalog.Resource.Diffusion.Adapter.Refiner()();
  sub_256A525B8(0xD00000000000002ELL);
  *(void *)(v0 + 2496) = &type metadata for LLMBundle;
  *(void *)(v0 + 2504) = v14;
  *(void *)(v0 + 2472) = sub_256A52528();
  static Catalog.ResourceBundle.TokenGeneration.LLM.ResponseGeneration()();
  *(void *)(v0 + 2536) = &type metadata for LLMBundle;
  *(void *)(v0 + 2544) = v14;
  *(void *)(v0 + 2512) = sub_256A52528();
  static Catalog.ResourceBundle.TokenGeneration.LLM.ResponseGenerationV2()();
  *(void *)(v0 + 2576) = &type metadata for LLMBundle;
  *(void *)(v0 + 2584) = v14;
  *(void *)(v0 + 2552) = sub_256A52528();
  static Catalog.ResourceBundle.TokenGeneration.LLM.ResponseGenerationV3()();
  *(void *)(v0 + 2616) = &type metadata for AssetBackedLLMBundle;
  *(void *)(v0 + 2624) = v1;
  uint64_t v71 = sub_256A52528();
  *(void *)(v0 + 2592) = v71;
  uint64_t v72 = static Catalog.Resource.Tokenizer.AFMTextInstruct300MTokenizer()((void *)(v71 + 32), v71);
  os_log_t v73 = static Catalog.Resource.LLM.Model.AFMTextInstruct300MBase()((void *)(v71 + 72), v72);
  static Catalog.Resource.LLM.Adapter.Safety()(v73);
  sub_256A52660();
  sub_256A525B8(0xD00000000000002ALL);
  *(void *)(v0 + 2656) = &type metadata for AssetBackedLLMBundle;
  *(void *)(v0 + 2664) = v1;
  uint64_t v74 = sub_256A52528();
  *(void *)(v0 + 2632) = v74;
  static Catalog.ResourceBundle.TokenGeneration.LLM.SafetyGuardrail()(v74, v74 + 16);
  *(void *)(v0 + 2696) = &type metadata for AssetBackedLLMBundle;
  *(void *)(v0 + 2704) = v1;
  uint64_t v75 = sub_256A52528();
  *(void *)(v0 + 2672) = v75;
  uint64_t v76 = static Catalog.Resource.Tokenizer.SafetyGuardrailLiteTokenizer()();
  static Catalog.Resource.LLM.Model.SafetyGuardrailLite()(v76);
  sub_256A52540();
  sub_256A5267C();
  *(void *)(v75 + 16) = 0xD00000000000002BLL;
  *(void *)(v75 + 24) = v77;
  *(void *)(v0 + 2736) = &type metadata for AssetBackedDiffusionBundle;
  *(void *)(v0 + 2744) = v94;
  *(void *)(v0 + 2712) = sub_256A525EC();
  static Catalog.Resource.Diffusion.Model.VisualGenerationBase()();
  static Catalog.Resource.Diffusion.Adapter.Scribble()();
  sub_256A52640((uint64_t)"com.apple.fm.visual.image_diffusion_v1.style_scribble");
  *(void *)(v0 + 2776) = &type metadata for AssetBackedLLMBundle;
  *(void *)(v0 + 2784) = v1;
  uint64_t v78 = sub_256A52528();
  *(void *)(v0 + 2752) = v78;
  static Catalog.ResourceBundle.TokenGeneration.LLM.SearchQueryUnderstandingOnDevice()(v78, v78 + 16);
  *(void *)(v0 + 2816) = &type metadata for LLMBundle;
  *(void *)(v0 + 2824) = v14;
  *(void *)(v0 + 2792) = sub_256A52528();
  static Catalog.ResourceBundle.TokenGeneration.LLM.SearchQueryUnderstandingServer()();
  *(void *)(v0 + 2856) = &type metadata for LLMBundle;
  *(void *)(v0 + 2864) = v14;
  *(void *)(v0 + 2832) = sub_256A52528();
  static Catalog.ResourceBundle.TokenGeneration.LLM.ServerBulletsTransform()();
  *(void *)(v0 + 2896) = &type metadata for LLMBundle;
  *(void *)(v0 + 2904) = v14;
  *(void *)(v0 + 2872) = sub_256A52528();
  static Catalog.ResourceBundle.TokenGeneration.LLM.ServerConciseTone()();
  *(void *)(v0 + 2936) = &type metadata for LLMBundle;
  *(void *)(v0 + 2944) = v14;
  *(void *)(v0 + 2912) = sub_256A52528();
  static Catalog.ResourceBundle.TokenGeneration.LLM.ServerFriendlyTone()();
  *(void *)(v0 + 2976) = &type metadata for LLMBundle;
  *(void *)(v0 + 2984) = v14;
  *(void *)(v0 + 2952) = sub_256A52528();
  static Catalog.ResourceBundle.TokenGeneration.LLM.ServerMagicRewrite()();
  *(void *)(v0 + 3016) = &type metadata for LLMBundle;
  *(void *)(v0 + 3024) = v14;
  *(void *)(v0 + 2992) = sub_256A52528();
  static Catalog.ResourceBundle.TokenGeneration.LLM.ServerMailReplyLongFormBasic()();
  *(void *)(v0 + 3056) = &type metadata for LLMBundle;
  *(void *)(v0 + 3064) = v14;
  *(void *)(v0 + 3032) = sub_256A52528();
  static Catalog.ResourceBundle.TokenGeneration.LLM.ServerMailReplyLongFormRewrite()();
  *(void *)(v0 + 3096) = &type metadata for LLMBundle;
  *(void *)(v0 + 3104) = v14;
  *(void *)(v0 + 3072) = sub_256A52528();
  static Catalog.ResourceBundle.TokenGeneration.LLM.ServerMailReplyQA()();
  *(void *)(v0 + 3136) = &type metadata for LLMBundle;
  *(void *)(v0 + 3144) = v14;
  *(void *)(v0 + 3112) = sub_256A52528();
  static Catalog.ResourceBundle.TokenGeneration.LLM.ServerProfessionalTone()();
  *(void *)(v0 + 3176) = &type metadata for LLMBundle;
  *(void *)(v0 + 3184) = v14;
  *(void *)(v0 + 3152) = sub_256A52528();
  static Catalog.ResourceBundle.TokenGeneration.LLM.ServerProofreadingReview()();
  *(void *)(v0 + 3216) = &type metadata for LLMBundle;
  *(void *)(v0 + 3224) = v14;
  *(void *)(v0 + 3192) = sub_256A52528();
  static Catalog.ResourceBundle.TokenGeneration.LLM.ServerTablesTransform()();
  *(void *)(v0 + 3256) = &type metadata for LLMBundle;
  *(void *)(v0 + 3264) = v14;
  *(void *)(v0 + 3232) = sub_256A52528();
  static Catalog.ResourceBundle.TokenGeneration.LLM.ServerTakeawaysTransform()();
  *(void *)(v0 + 3296) = &type metadata for AssetBackedDiffusionBundle;
  *(void *)(v0 + 3304) = v94;
  uint64_t v79 = sub_256A525EC();
  *(void *)(v0 + 3272) = v79;
  static Catalog.Resource.Diffusion.Model.VisualGenerationBase()();
  static Catalog.Resource.Diffusion.Adapter.Sketch()();
  sub_256A5267C();
  *(void *)(v79 + 16) = 0xD00000000000002DLL;
  *(void *)(v79 + 24) = v80;
  *(void *)(v0 + 3336) = &type metadata for AssetBackedDiffusionBundle;
  *(void *)(v0 + 3344) = v94;
  uint64_t v81 = sub_256A525EC();
  *(void *)(v0 + 3312) = v81;
  static Catalog.Resource.Diffusion.Model.VisualGenerationBase()();
  static Catalog.Resource.Diffusion.Adapter.SkinToneEmoji()();
  *(void *)(v81 + 16) = 0xD000000000000035;
  *(void *)(v81 + 24) = 0x8000000256B456D0;
  *(void *)(v0 + 3376) = &type metadata for AssetBackedLLMBundle;
  *(void *)(v0 + 3384) = v1;
  uint64_t v82 = sub_256A52528();
  *(void *)(v0 + 3352) = v82;
  static Catalog.ResourceBundle.TokenGeneration.LLM.Summarization()(v82, v82 + 16);
  *(void *)(v0 + 3416) = &type metadata for LLMBundle;
  *(void *)(v0 + 3424) = v14;
  *(void *)(v0 + 3392) = sub_256A52528();
  static Catalog.ResourceBundle.TokenGeneration.LLM.SummarizationTextSummarizer()();
  *(void *)(v0 + 3456) = &type metadata for LLMBundle;
  *(void *)(v0 + 3464) = v14;
  uint64_t v83 = sub_256A52528();
  *(void *)(v0 + 3432) = v83;
  static Catalog.Resource.Tokenizer.InstructServerTokenizer()();
  static Catalog.Resource.LLM.Model.SummarizationTextSummarizerAjaxBase()();
  *(_OWORD *)(v83 + 160) = 0u;
  *(_OWORD *)(v83 + 176) = 0u;
  *(_OWORD *)(v83 + 128) = 0u;
  *(_OWORD *)(v83 + 144) = 0u;
  *(_OWORD *)(v83 + 112) = 0u;
  *(void *)(v83 + 16) = 0xD00000000000003DLL;
  *(void *)(v83 + 24) = 0x8000000256B45B40;
  *(void *)(v0 + 3496) = &type metadata for AssetBackedLLMBundle;
  *(void *)(v0 + 3504) = v1;
  uint64_t v84 = sub_256A52528();
  *(void *)(v0 + 3472) = v84;
  static Catalog.ResourceBundle.TokenGeneration.LLM.TextEventExtraction()(v84, v84 + 16);
  *(void *)(v0 + 3536) = &type metadata for SanitizerBundle;
  *(void *)(v0 + 3544) = sub_256A5243C();
  uint64_t v85 = swift_allocObject();
  *(void *)(v0 + 3512) = v85;
  static Catalog.Resource.Sanitizer.TextModerationLM()();
  *(void *)(v85 + 16) = 0xD000000000000027;
  *(void *)(v85 + 24) = 0x8000000256B45C80;
  *(void *)(v0 + 3576) = &type metadata for AssetBackedLLMBundle;
  *(void *)(v0 + 3584) = v1;
  uint64_t v86 = sub_256A52528();
  *(void *)(v0 + 3552) = v86;
  static Catalog.ResourceBundle.TokenGeneration.LLM.TextPersonExtraction()(v86, v86 + 16);
  *(void *)(v0 + 3616) = &type metadata for AssetBackedLLMBundle;
  *(void *)(v0 + 3624) = v1;
  uint64_t v87 = sub_256A52528();
  *(void *)(v0 + 3592) = v87;
  static Catalog.ResourceBundle.TokenGeneration.LLM.UIPreviews()(v87, v87 + 16);
  *(void *)(v0 + 3656) = &type metadata for AssetBackedLLMBundle;
  *(void *)(v0 + 3664) = v1;
  uint64_t v88 = sub_256A52528();
  *(void *)(v0 + 3632) = v88;
  static Catalog.ResourceBundle.TokenGeneration.LLM.UrgencyClassification()(v88, v88 + 16);
  *(void *)(v0 + 3696) = &type metadata for AssetBackedLLMBundle;
  *(void *)(v0 + 3704) = v1;
  uint64_t v89 = sub_256A52528();
  *(void *)(v0 + 3672) = v89;
  HandlingLite = static Catalog.Resource.Tokenizer.VisualGenerationQueryHandlingLiteTokenizer()((void *)(v89 + 32), v89);
  static Catalog.Resource.LLM.Model.VisualGenerationQueryHandlingLite()((void *)(v89 + 72), HandlingLite);
  *(_OWORD *)(v89 + 160) = 0u;
  *(_OWORD *)(v89 + 176) = 0u;
  *(_OWORD *)(v89 + 128) = 0u;
  *(_OWORD *)(v89 + 144) = 0u;
  *(_OWORD *)(v89 + 112) = 0u;
  sub_256A5267C();
  *(void *)(v89 + 16) = 0xD00000000000002CLL;
  *(void *)(v89 + 24) = v91;
  *(void *)(v0 + 3736) = &type metadata for LLMBundle;
  *(void *)(v0 + 3744) = v14;
  uint64_t v92 = sub_256A52528();
  *(void *)(v0 + 3712) = v92;
  static Catalog.Resource.Tokenizer.InstructServerTokenizer()();
  static Catalog.Resource.LLM.Model.InstructServerBase()();
  static Catalog.Resource.LLM.Adapter.BaseAdapter()();
  *(void *)(v92 + 184) = 0;
  *(_OWORD *)(v92 + 168) = 0u;
  *(_OWORD *)(v92 + 152) = 0u;
  *(void *)(v92 + 16) = 0xD00000000000003CLL;
  *(void *)(v92 + 24) = 0x8000000256B48060;
  return v0;
}

unint64_t sub_256A52298()
{
  unint64_t result = qword_26B2B3088;
  if (!qword_26B2B3088)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B3088);
  }
  return result;
}

unint64_t sub_256A522E8()
{
  unint64_t result = qword_26B2B30A8;
  if (!qword_26B2B30A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B30A8);
  }
  return result;
}

uint64_t sub_256A52334()
{
  swift_bridgeObjectRelease();
  sub_256A39DB4(v0 + 32);
  if (*(void *)(v0 + 96)) {
    sub_256A39DB4(v0 + 72);
  }

  return MEMORY[0x270FA0238](v0, 112, 7);
}

unint64_t sub_256A52384()
{
  unint64_t result = qword_26B2B5750;
  if (!qword_26B2B5750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5750);
  }
  return result;
}

uint64_t sub_256A523D4()
{
  swift_bridgeObjectRelease();
  sub_256A39DB4(v0 + 32);
  sub_256A39DB4(v0 + 72);
  if (*(void *)(v0 + 136)) {
    sub_256A39DB4(v0 + 112);
  }
  if (*(void *)(v0 + 176)) {
    sub_256A39DB4(v0 + 152);
  }

  return MEMORY[0x270FA0238](v0, 192, 7);
}

unint64_t sub_256A5243C()
{
  unint64_t result = qword_26B2B3020;
  if (!qword_26B2B3020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B3020);
  }
  return result;
}

uint64_t sub_256A52488()
{
  swift_bridgeObjectRelease();
  sub_256A39DB4(v0 + 32);

  return MEMORY[0x270FA0238](v0, 72, 7);
}

void type metadata accessor for Catalog.ResourceBundle.Sanitizer()
{
}

void type metadata accessor for Catalog.ResourceBundle.TokenGeneration()
{
}

void type metadata accessor for Catalog.ResourceBundle.TokenGeneration.LLM()
{
}

void type metadata accessor for Catalog.ResourceBundle.VisualGeneration()
{
}

void type metadata accessor for Catalog.ResourceBundle.VisualGeneration.Diffusion()
{
}

void sub_256A52508(void *a1@<X8>)
{
  *a1 = v1;
  a1[1] = (v2 - 32) | 0x8000000000000000;
}

void sub_256A52518(uint64_t a1@<X8>)
{
  void *v2 = a1;
  v2[1] = (v1 - 32) | 0x8000000000000000;
}

uint64_t sub_256A52528()
{
  return swift_allocObject();
}

double sub_256A52540()
{
  double result = 0.0;
  v0[10] = 0u;
  v0[11] = 0u;
  v0[8] = 0u;
  v0[9] = 0u;
  v0[7] = 0u;
  return result;
}

void sub_256A52554()
{
  static Catalog.Resource.Tokenizer.InstructServerTokenizer()();
}

double sub_256A5256C()
{
  double result = 0.0;
  v0[9] = 0u;
  v0[10] = 0u;
  v0[7] = 0u;
  v0[8] = 0u;
  v0[6] = 0u;
  return result;
}

double sub_256A52588()
{
  double result = 0.0;
  v0[9] = 0u;
  v0[10] = 0u;
  v0[7] = 0u;
  v0[8] = 0u;
  v0[6] = 0u;
  return result;
}

double sub_256A525A4()
{
  double result = 0.0;
  v0[9] = 0u;
  v0[10] = 0u;
  v0[7] = 0u;
  v0[8] = 0u;
  v0[6] = 0u;
  return result;
}

void sub_256A525B8(uint64_t a1@<X8>)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = (v1 - 32) | 0x8000000000000000;
}

void *sub_256A525D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (void *)(a2 + 16);
  return static Catalog.Resource.Tokenizer.AFMTextInstructEnglish49k()(v3, a1);
}

uint64_t sub_256A525EC()
{
  return swift_allocObject();
}

void sub_256A52604()
{
  static Catalog.Resource.Diffusion.Model.VisualGenerationBase()();
}

void sub_256A5261C(uint64_t a1@<X8>)
{
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = (a1 - 32) | 0x8000000000000000;
}

double sub_256A5262C()
{
  *(void *)(v0 + 168) = 0;
  double result = 0.0;
  *(_OWORD *)(v0 + 152) = 0u;
  *(_OWORD *)(v0 + 136) = 0u;
  return result;
}

void sub_256A52640(uint64_t a1@<X8>)
{
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = (a1 - 32) | 0x8000000000000000;
}

void sub_256A52650(uint64_t a1@<X8>)
{
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = (a1 - 32) | 0x8000000000000000;
}

double sub_256A52660()
{
  *(void *)(v0 + 184) = 0;
  double result = 0.0;
  *(_OWORD *)(v0 + 168) = 0u;
  *(_OWORD *)(v0 + 152) = 0u;
  return result;
}

double sub_256A52694()
{
  double result = 0.0;
  v0[9] = 0u;
  v0[10] = 0u;
  v0[7] = 0u;
  v0[8] = 0u;
  v0[6] = 0u;
  return result;
}

double sub_256A526B0()
{
  double result = 0.0;
  v0[9] = 0u;
  v0[10] = 0u;
  v0[7] = 0u;
  v0[8] = 0u;
  v0[6] = 0u;
  return result;
}

double sub_256A526FC()
{
  *(void *)(v0 + 184) = 0;
  double result = 0.0;
  *(_OWORD *)(v0 + 168) = 0u;
  *(_OWORD *)(v0 + 152) = 0u;
  return result;
}

double sub_256A52710()
{
  *(void *)(v0 + 144) = 0;
  double result = 0.0;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  return result;
}

double sub_256A52724()
{
  *(void *)(v0 + 128) = 0;
  double result = 0.0;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  return result;
}

void *sub_256A52744@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (void *)(a2 + 16);
  return static Catalog.Resource.Tokenizer.AFMTextInstruct300MTokenizer()(v3, a1);
}

uint64_t deserializeResourceBundle(jsonData:identifier:resourceBundleType:resources:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  uint64_t v12 = self;
  uint64_t v13 = (void *)sub_256B3F3B0();
  *(void *)&long long v46 = 0;
  id v14 = objc_msgSend(v12, sel_JSONObjectWithData_options_error_, v13, 0, &v46);

  if (!v14)
  {
    id v34 = (id)v46;
    sub_256B3F230();

    return swift_willThrow();
  }
  id v15 = (id)v46;
  sub_256B3FAD0();
  swift_unknownObjectRelease();
  sub_256A39D2C(&qword_269F78B10);
  if (!sub_256A52A84())
  {
    sub_256A529A4();
    swift_allocError();
    *(void *)uint64_t v35 = 0xD000000000000033;
    *(void *)(v35 + 8) = 0x8000000256B47130;
    *(unsigned char *)(v35 + 16) = 1;
    return swift_willThrow();
  }
  uint64_t v48 = MEMORY[0x263F8D310];
  *(void *)&long long v46 = a3;
  *((void *)&v46 + 1) = a4;
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_256A38E10((uint64_t)&v46, 25705, 0xE200000000000000);
  sub_256A52A50(v16, v17, v18, v19, v20, v21, v22, v23, v41, v43, v43, v46);
  uint64_t v24 = v48;
  uint64_t v25 = sub_256A529F0((uint64_t)&v46);
  if (!v24) {
    goto LABEL_11;
  }
  sub_256A52A50(v25, v26, v27, v28, v29, v30, v31, v32, v42, v44, v45, v46);
  if (!v48)
  {
    sub_256A529F0((uint64_t)&v46);
    goto LABEL_11;
  }
  if (!sub_256A52A84())
  {
LABEL_11:
    uint64_t v33 = 1;
    goto LABEL_12;
  }
  uint64_t v33 = v44;
LABEL_12:
  uint64_t v37 = swift_bridgeObjectRetain();
  static Catalog.ResourceBundle.deserialize(json:resourceBundleType:resources:assetBacked:)(v37, a5, a6, a7, v33, v38, v39, v40, v42, v44, v45, v46, *((uint64_t *)&v46 + 1), v47, v48, v49, v50, v51, v52,
    v53);
  return swift_bridgeObjectRelease_n();
}

unint64_t sub_256A529A4()
{
  unint64_t result = qword_269F78E10;
  if (!qword_269F78E10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F78E10);
  }
  return result;
}

uint64_t sub_256A529F0(uint64_t a1)
{
  uint64_t v2 = sub_256A39D2C(&qword_269F78B20);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

double sub_256A52A50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12)
{
  return sub_256A3A6A8(v12, &a12);
}

uint64_t sub_256A52A84()
{
  return swift_dynamicCast();
}

void sub_256A52AA4()
{
  sub_256A4A878();
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  sub_256B3F180();
  swift_allocObject();
  sub_256B3F170();
  sub_256A6DD14(v5, (uint64_t)v717);
  uint64_t v6 = v718;
  if (v718)
  {
    unint64_t v2 = v719;
    sub_256A39D70(v717, v718);
    LOBYTE(v6) = (*(uint64_t (**)(uint64_t, unint64_t))(v2 + 64))(v6, v2);
    sub_256A39DB4((uint64_t)v717);
  }
  else
  {
    sub_256A6D830((uint64_t)v717);
  }
  sub_256A6DD14(v5, (uint64_t)v721);
  if (!v721[3]) {
    goto LABEL_124;
  }
  sub_256A6DD14((uint64_t)v721, (uint64_t)v720);
  uint64_t v7 = sub_256A39D2C(&qword_26B2B5D80);
  if (sub_256A6E33C())
  {
    sub_256A6E35C(&v690, v8, v9, v10, v11, v12, v13, v14, v616, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
      v673,
      v674,
      v675,
      v676,
      v677,
      v678,
      v679,
      v680,
      v681,
      v682,
      v683,
      v684,
      v685,
      v686,
      v687,
      v688,
      v689,
      v690,
      v691,
      v692,
      v693,
      v694,
      v695,
      v696,
      v697,
      v698,
      v699,
      v700,
      v701,
      v702,
      v703,
      v704,
      v705,
      v706,
      v707,
      v708,
      v709,
      v710,
      v711,
      v712,
      v713,
      v714,
      v715,
      v716);
    sub_256A6E35C(&v663, v15, v16, v17, v18, v19, v20, v21, v617, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
      v673,
      v674,
      v675,
      v676,
      v677,
      v678,
      v679,
      v680,
      v681,
      v682,
      v683,
      v684,
      v685,
      v686,
      v687,
      v688,
      v689,
      v690,
      v691,
      v692,
      v693,
      v694,
      v695,
      v696,
      v697,
      v698,
      v699,
      v700,
      v701,
      v702,
      v703,
      v704,
      v705,
      v706,
      v707,
      v708,
      v709,
      v710,
      v711,
      v712,
      v713,
      v714,
      v715,
      v716);
    sub_256A60BA0();
    goto LABEL_9;
  }
  if (!sub_256A6E33C())
  {
    if (sub_256A6E33C())
    {
      sub_256A6E35C(&v690, v46, v47, v48, v49, v50, v51, v52, v616, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A6E35C(&v663, v53, v54, v55, v56, v57, v58, v59, v620, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A612DC();
LABEL_18:
      uint64_t v74 = sub_256A6E374();
      if (v1) {
        goto LABEL_10;
      }
      uint64_t v7 = v74;
      uint64_t v5 = v75;
      sub_256A6F048();
      sub_256A6DFC8((uint64_t)&v690);
      sub_256A39DB4((uint64_t)v720);
      unint64_t v45 = 0xEF6C65646F4D2E6ELL;
LABEL_125:
      sub_256A6D830((uint64_t)v721);
      id v615 = objc_allocWithZone(v3);
      ResourceContainer.init(resourceData:resourceType:assetBacked:)(v7, v5, v2, v45, v6 & 1);
      swift_release();
      goto LABEL_126;
    }
    if (sub_256A6E33C())
    {
      sub_256A6E35C(&v690, v60, v61, v62, v63, v64, v65, v66, v616, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A6E35C(&v663, v67, v68, v69, v70, v71, v72, v73, v621, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A616B0();
      goto LABEL_18;
    }
    if (sub_256A6E33C())
    {
      sub_256A6E35C(&v690, v76, v77, v78, v79, v80, v81, v82, v616, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A6E35C(&v663, v83, v84, v85, v86, v87, v88, v89, v622, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A61A0C();
LABEL_24:
      uint64_t v104 = sub_256A6E374();
      if (v1) {
        goto LABEL_10;
      }
      sub_256A6E9B8(v104, v105, v106, v107, v108, v109, v110, v111, v623, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690);
      sub_256A39DB4((uint64_t)v720);
      uint64_t v44 = "DisabledUseCaseList";
      goto LABEL_13;
    }
    if (sub_256A6E33C())
    {
      sub_256A6E35C(&v690, v90, v91, v92, v93, v94, v95, v96, v616, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A6E35C(&v663, v97, v98, v99, v100, v101, v102, v103, v624, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A61D6C();
      goto LABEL_24;
    }
    if (sub_256A6E33C())
    {
      sub_256A6E35C(&v690, v112, v113, v114, v115, v116, v117, v118, v616, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A6E35C(&v663, v119, v120, v121, v122, v123, v124, v125, v625, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A62054();
LABEL_30:
      uint64_t v140 = sub_256A6E374();
      if (v1) {
        goto LABEL_10;
      }
      sub_256A6E76C(v140, v141, v142, v143, v144, v145, v146, v147, v626, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690);
      sub_256A6E8B0();
      unint64_t v2 = v148 | 8;
      uint64_t v44 = "GenerativeFunctionOverrides";
      goto LABEL_13;
    }
    if (sub_256A6E33C())
    {
      sub_256A6E35C(&v690, v126, v127, v128, v129, v130, v131, v132, v616, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A6E35C(&v663, v133, v134, v135, v136, v137, v138, v139, v627, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A623B4();
      goto LABEL_30;
    }
    if (sub_256A6E33C())
    {
      sub_256A6E35C(&v690, v149, v150, v151, v152, v153, v154, v155, v616, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A6E35C(&v663, v156, v157, v158, v159, v160, v161, v162, v628, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A6269C();
LABEL_36:
      uint64_t v177 = sub_256A6E374();
      if (v1) {
        goto LABEL_10;
      }
      sub_256A6E76C(v177, v178, v179, v180, v181, v182, v183, v184, v629, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690);
      sub_256A6E8B0();
      unint64_t v2 = v185 + 3;
      uint64_t v44 = "HandwritingSynthesizer";
      goto LABEL_13;
    }
    if (sub_256A6E33C())
    {
      sub_256A6E35C(&v690, v163, v164, v165, v166, v167, v168, v169, v616, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A6E35C(&v663, v170, v171, v172, v173, v174, v175, v176, v630, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A629FC();
      goto LABEL_36;
    }
    if (sub_256A6E33C())
    {
      sub_256A6E35C(&v690, v186, v187, v188, v189, v190, v191, v192, v616, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A6E35C(&v663, v193, v194, v195, v196, v197, v198, v199, v631, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A62CE4();
LABEL_42:
      uint64_t v214 = sub_256A6E374();
      if (v1) {
        goto LABEL_10;
      }
      sub_256A6E9B8(v214, v215, v216, v217, v218, v219, v220, v221, v632, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690);
      sub_256A39DB4((uint64_t)v720);
      uint64_t v44 = "ImageCuratedPrompts";
      goto LABEL_13;
    }
    if (sub_256A6E33C())
    {
      sub_256A6E35C(&v690, v200, v201, v202, v203, v204, v205, v206, v616, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A6E35C(&v663, v207, v208, v209, v210, v211, v212, v213, v633, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A63044();
      goto LABEL_42;
    }
    if (sub_256A6E33C())
    {
      sub_256A6E35C(&v690, v222, v223, v224, v225, v226, v227, v228, v616, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A6E35C(&v663, v229, v230, v231, v232, v233, v234, v235, v634, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A6332C();
LABEL_48:
      uint64_t v250 = sub_256A6E374();
      if (v1) {
        goto LABEL_10;
      }
      uint64_t v7 = v250;
      uint64_t v5 = v251;
      sub_256A6F010();
      goto LABEL_50;
    }
    if (sub_256A6E33C())
    {
      sub_256A6E35C(&v690, v236, v237, v238, v239, v240, v241, v242, v616, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A6E35C(&v663, v243, v244, v245, v246, v247, v248, v249, v635, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A6368C();
      goto LABEL_48;
    }
    if (sub_256A6E33C())
    {
      sub_256A6E35C(&v690, v252, v253, v254, v255, v256, v257, v258, v616, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A6E35C(&v663, v259, v260, v261, v262, v263, v264, v265, v636, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A63974();
LABEL_56:
      uint64_t v280 = sub_256A6E374();
      if (v1) {
        goto LABEL_10;
      }
      sub_256A6E76C(v280, v281, v282, v283, v284, v285, v286, v287, v637, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690);
      sub_256A39DB4((uint64_t)v720);
      unint64_t v2 = 0xD000000000000011;
      uint64_t v44 = "ImageMagicCleanUp";
      goto LABEL_13;
    }
    if (sub_256A6E33C())
    {
      sub_256A6E35C(&v690, v266, v267, v268, v269, v270, v271, v272, v616, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A6E35C(&v663, v273, v274, v275, v276, v277, v278, v279, v638, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A63CD4();
      goto LABEL_56;
    }
    if (sub_256A6E33C())
    {
      sub_256A6E35C(&v690, v288, v289, v290, v291, v292, v293, v294, v616, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A6E35C(&v663, v295, v296, v297, v298, v299, v300, v301, v639, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A63FBC();
LABEL_62:
      uint64_t v316 = sub_256A6E374();
      if (v1) {
        goto LABEL_10;
      }
      uint64_t v7 = v316;
      uint64_t v5 = v317;
      sub_256A6EFFC();
      sub_256A6DFC8((uint64_t)&v690);
      sub_256A39DB4((uint64_t)v720);
      unint64_t v45 = 0xEB0000000072656CLL;
      goto LABEL_125;
    }
    if (sub_256A6E33C())
    {
      sub_256A6E35C(&v690, v302, v303, v304, v305, v306, v307, v308, v616, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A6E35C(&v663, v309, v310, v311, v312, v313, v314, v315, v640, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A6431C();
      goto LABEL_62;
    }
    if (sub_256A6E33C())
    {
      sub_256A6E9E8(&v690, v318, v319, v320, v321, v322, v323, v324, v616, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A6E9E8(&v663, v325, v326, v327, v328, v329, v330, v331, v641, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A6DE60();
      uint64_t v332 = sub_256A6E374();
      if (!v1)
      {
        uint64_t v7 = v332;
        uint64_t v5 = v333;
        sub_256A6EA74();
        sub_256A6DEAC((uint64_t)&v690);
        goto LABEL_51;
      }
LABEL_66:
      swift_release();
      sub_256A6DEAC((uint64_t)&v690);
      goto LABEL_11;
    }
    if (sub_256A6E33C())
    {
      sub_256A6E35C(&v690, v334, v335, v336, v337, v338, v339, v340, v616, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A6E35C(&v663, v341, v342, v343, v344, v345, v346, v347, v642, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A647B8();
      uint64_t v348 = sub_256A6E374();
      if (v1) {
        goto LABEL_10;
      }
      uint64_t v7 = v348;
      uint64_t v5 = v349;
      sub_256A6EA74();
LABEL_50:
      sub_256A6DFC8((uint64_t)&v690);
LABEL_51:
      sub_256A39DB4((uint64_t)v720);
      unint64_t v45 = 0xEB00000000726574;
      goto LABEL_125;
    }
    if (sub_256A6E33C())
    {
      sub_256A6E9E8(&v690, v350, v351, v352, v353, v354, v355, v356, v616, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A6E9E8(&v663, v357, v358, v359, v360, v361, v362, v363, v643, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A6DE14();
      sub_256A6E374();
      if (v1) {
        goto LABEL_66;
      }
      sub_256A6EAFC();
      sub_256A6DEAC(v364);
LABEL_77:
      sub_256A39DB4((uint64_t)v720);
      unint64_t v45 = 0xEE006C65646F4D74;
      goto LABEL_125;
    }
    if (sub_256A6E33C())
    {
      sub_256A6E35C(&v690, v365, v366, v367, v368, v369, v370, v371, v616, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A6E35C(&v663, v372, v373, v374, v375, v376, v377, v378, v644, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A64CEC();
      sub_256A6E374();
      if (v1) {
        goto LABEL_10;
      }
      sub_256A6EAFC();
      sub_256A6DFC8(v379);
      goto LABEL_77;
    }
    if (sub_256A6E33C())
    {
      sub_256A6E9E8(&v690, v380, v381, v382, v383, v384, v385, v386, v616, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A6E9E8(&v663, v387, v388, v389, v390, v391, v392, v393, v645, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A6DDC8();
      sub_256A6E374();
      if (v1) {
        goto LABEL_66;
      }
      sub_256A6EADC();
      sub_256A6DEAC(v394);
LABEL_84:
      sub_256A39DB4((uint64_t)v720);
      unint64_t v45 = 0xE90000000000006CLL;
      goto LABEL_125;
    }
    if (sub_256A6E33C())
    {
      sub_256A6E35C(&v690, v395, v396, v397, v398, v399, v400, v401, v616, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A6E35C(&v663, v402, v403, v404, v405, v406, v407, v408, v646, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A65110();
      sub_256A6E374();
      if (v1) {
        goto LABEL_10;
      }
      sub_256A6EADC();
      sub_256A6DFC8(v409);
      goto LABEL_84;
    }
    if (sub_256A6E33C())
    {
      sub_256A6E35C(&v690, v410, v411, v412, v413, v414, v415, v416, v616, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A6E35C(&v663, v417, v418, v419, v420, v421, v422, v423, v647, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A65530();
LABEL_89:
      uint64_t v438 = sub_256A6E374();
      if (v1) {
        goto LABEL_10;
      }
      sub_256A6E76C(v438, v439, v440, v441, v442, v443, v444, v445, v648, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690);
      sub_256A6E8B0();
      unint64_t v2 = v446 | 4;
      uint64_t v44 = "LLM.ServerConfiguration";
      goto LABEL_13;
    }
    if (sub_256A6E33C())
    {
      sub_256A6E35C(&v690, v424, v425, v426, v427, v428, v429, v430, v616, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A6E35C(&v663, v431, v432, v433, v434, v435, v436, v437, v649, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A65890();
      goto LABEL_89;
    }
    if (sub_256A6E33C())
    {
      sub_256A6E35C(&v690, v447, v448, v449, v450, v451, v452, v453, v616, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A6E35C(&v663, v454, v455, v456, v457, v458, v459, v460, v650, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A65B78();
LABEL_95:
      uint64_t v475 = sub_256A6E374();
      if (v1) {
        goto LABEL_10;
      }
      sub_256A6E76C(v475, v476, v477, v478, v479, v480, v481, v482, v651, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690);
      sub_256A6E8B0();
      unint64_t v2 = v483 + 10;
      uint64_t v44 = "ModelConfigurationReplacement";
      goto LABEL_13;
    }
    if (sub_256A6E33C())
    {
      sub_256A6E35C(&v690, v461, v462, v463, v464, v465, v466, v467, v616, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A6E35C(&v663, v468, v469, v470, v471, v472, v473, v474, v652, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A65ED8();
      goto LABEL_95;
    }
    if (sub_256A6E33C())
    {
      sub_256A6E35C(&v690, v484, v485, v486, v487, v488, v489, v490, v616, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A6E35C(&v663, v491, v492, v493, v494, v495, v496, v497, v653, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A661C0();
LABEL_101:
      uint64_t v512 = sub_256A6E374();
      if (v1) {
        goto LABEL_10;
      }
      uint64_t v7 = v512;
      uint64_t v5 = v513;
      unint64_t v2 = 0x6974696E6153;
      goto LABEL_103;
    }
    if (sub_256A6E33C())
    {
      sub_256A6E35C(&v690, v498, v499, v500, v501, v502, v503, v504, v616, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A6E35C(&v663, v505, v506, v507, v508, v509, v510, v511, v654, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A66594();
      goto LABEL_101;
    }
    if (sub_256A6E33C())
    {
      sub_256A6E35C(&v690, v514, v515, v516, v517, v518, v519, v520, v616, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A6E35C(&v663, v521, v522, v523, v524, v525, v526, v527, v655, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A668F0();
LABEL_109:
      uint64_t v542 = sub_256A6E374();
      if (v1) {
        goto LABEL_10;
      }
      sub_256A6E76C(v542, v543, v544, v545, v546, v547, v548, v549, v656, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690);
      sub_256A6E8B0();
      unint64_t v2 = v550 - 1;
      uint64_t v44 = "TokenInputDenyList";
      goto LABEL_13;
    }
    if (sub_256A6E33C())
    {
      sub_256A6E35C(&v690, v528, v529, v530, v531, v532, v533, v534, v616, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A6E35C(&v663, v535, v536, v537, v538, v539, v540, v541, v657, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A66C50();
      goto LABEL_109;
    }
    if (sub_256A6E33C())
    {
      sub_256A6E35C(&v690, v551, v552, v553, v554, v555, v556, v557, v616, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A6E35C(&v663, v558, v559, v560, v561, v562, v563, v564, v658, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A66F38();
LABEL_115:
      uint64_t v579 = sub_256A6E374();
      if (v1) {
        goto LABEL_10;
      }
      sub_256A6E9B8(v579, v580, v581, v582, v583, v584, v585, v586, v659, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690);
      sub_256A39DB4((uint64_t)v720);
      uint64_t v44 = "TokenOutputDenyList";
      goto LABEL_13;
    }
    if (sub_256A6E33C())
    {
      sub_256A6E35C(&v690, v565, v566, v567, v568, v569, v570, v571, v616, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A6E35C(&v663, v572, v573, v574, v575, v576, v577, v578, v660, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A67298();
      goto LABEL_115;
    }
    if (sub_256A6E33C())
    {
      sub_256A6E9E8(&v690, v587, v588, v589, v590, v591, v592, v593, v616, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A6E9E8(&v663, v594, v595, v596, v597, v598, v599, v600, v661, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A6DD7C();
      sub_256A6E374();
      if (v1) {
        goto LABEL_66;
      }
      sub_256A6EE28();
      unint64_t v2 = v2 & 0xFFFFFFFFFFFFLL | 0x657A000000000000;
      sub_256A6DEAC((uint64_t)&v690);
LABEL_104:
      sub_256A39DB4((uint64_t)v720);
      unint64_t v45 = 0xE900000000000072;
      goto LABEL_125;
    }
    if (sub_256A6E33C())
    {
      sub_256A6E35C(&v690, v601, v602, v603, v604, v605, v606, v607, v616, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A6E35C(&v663, v608, v609, v610, v611, v612, v613, v614, v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
        v673,
        v674,
        v675,
        v676,
        v677,
        v678,
        v679,
        v680,
        v681,
        v682,
        v683,
        v684,
        v685,
        v686,
        v687,
        v688,
        v689,
        v690,
        v691,
        v692,
        v693,
        v694,
        v695,
        v696,
        v697,
        v698,
        v699,
        v700,
        v701,
        v702,
        v703,
        v704,
        v705,
        v706,
        v707,
        v708,
        v709,
        v710,
        v711,
        v712,
        v713,
        v714,
        v715,
        v716);
      sub_256A67648();
      sub_256A6E374();
      if (v1) {
        goto LABEL_10;
      }
      sub_256A6EE28();
LABEL_103:
      unint64_t v2 = v2 & 0xFFFFFFFFFFFFLL | 0x657A000000000000;
      sub_256A6DFC8((uint64_t)&v690);
      goto LABEL_104;
    }
    sub_256A39DB4((uint64_t)v720);
LABEL_124:
    unint64_t v2 = 0;
    uint64_t v7 = 0;
    uint64_t v5 = 0xC000000000000000;
    unint64_t v45 = 0xE000000000000000;
    goto LABEL_125;
  }
  sub_256A6E35C(&v690, v22, v23, v24, v25, v26, v27, v28, v616, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
    v673,
    v674,
    v675,
    v676,
    v677,
    v678,
    v679,
    v680,
    v681,
    v682,
    v683,
    v684,
    v685,
    v686,
    v687,
    v688,
    v689,
    v690,
    v691,
    v692,
    v693,
    v694,
    v695,
    v696,
    v697,
    v698,
    v699,
    v700,
    v701,
    v702,
    v703,
    v704,
    v705,
    v706,
    v707,
    v708,
    v709,
    v710,
    v711,
    v712,
    v713,
    v714,
    v715,
    v716);
  sub_256A6E35C(&v663, v29, v30, v31, v32, v33, v34, v35, v619, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
    v673,
    v674,
    v675,
    v676,
    v677,
    v678,
    v679,
    v680,
    v681,
    v682,
    v683,
    v684,
    v685,
    v686,
    v687,
    v688,
    v689,
    v690,
    v691,
    v692,
    v693,
    v694,
    v695,
    v696,
    v697,
    v698,
    v699,
    v700,
    v701,
    v702,
    v703,
    v704,
    v705,
    v706,
    v707,
    v708,
    v709,
    v710,
    v711,
    v712,
    v713,
    v714,
    v715,
    v716);
  sub_256A60F80();
LABEL_9:
  uint64_t v36 = sub_256A6E374();
  if (!v1)
  {
    sub_256A6E76C(v36, v37, v38, v39, v40, v41, v42, v43, v618, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672,
      v673,
      v674,
      v675,
      v676,
      v677,
      v678,
      v679,
      v680,
      v681,
      v682,
      v683,
      v684,
      v685,
      v686,
      v687,
      v688,
      v689,
      v690);
    sub_256A39DB4((uint64_t)v720);
    unint64_t v2 = 0xD000000000000011;
    uint64_t v44 = "Diffusion.Adapter";
LABEL_13:
    unint64_t v45 = (unint64_t)(v44 - 32) | 0x8000000000000000;
    goto LABEL_125;
  }
LABEL_10:
  swift_release();
  sub_256A6DFC8((uint64_t)&v690);
LABEL_11:
  sub_256A39DB4((uint64_t)v720);
  sub_256A6D830((uint64_t)v721);
LABEL_126:
  sub_256A4A890();
}

uint64_t sub_256A53694@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_256B3F150();
  swift_allocObject();
  sub_256B3F140();
  uint64_t v20 = 0;
  memset(v19, 0, sizeof(v19));
  uint64_t v5 = *(void *)(a1 + OBJC_IVAR____TtC12ModelCatalog17ResourceContainer_resourceType);
  uint64_t v6 = *(void *)(a1 + OBJC_IVAR____TtC12ModelCatalog17ResourceContainer_resourceType + 8);
  if (v5 == 0xD000000000000011 && (sub_256A6E5B8(), v8) || (sub_256A6E3F0() & 1) != 0)
  {
    sub_256A6E5C8();
    if (v8)
    {
      sub_256A6E3E4();
      uint64_t v17 = &type metadata for AssetBackedDiffusionAdapterBase;
      unint64_t v18 = sub_256A61090();
      sub_256A6E40C();
      sub_256A6E390();
      sub_256A60F34();
    }
    else
    {
      sub_256A6E3E4();
      uint64_t v17 = &type metadata for DiffusionAdapterBase;
      unint64_t v18 = sub_256A60C14();
      sub_256A6E40C();
      sub_256A6E390();
      sub_256A60B54();
    }
  }
  else
  {
    BOOL v8 = v5 == 0x6F69737566666944 && v6 == 0xEF6C65646F4D2E6ELL;
    if (v8 || (sub_256A6E3F0() & 1) != 0)
    {
      sub_256A6E5C8();
      if (v8)
      {
        sub_256A6E3E4();
        uint64_t v17 = &type metadata for AssetBackedDiffusionModelBase;
        unint64_t v18 = sub_256A617C0();
        sub_256A6E40C();
        sub_256A6E390();
        sub_256A61664();
      }
      else
      {
        sub_256A6E3E4();
        uint64_t v17 = &type metadata for DiffusionModelBase;
        unint64_t v18 = sub_256A61350();
        sub_256A6E40C();
        sub_256A6E390();
        sub_256A61290();
      }
    }
    else if (v5 == 0xD000000000000013 && (sub_256A6E5B8(), v8) || (sub_256A6E3F0() & 1) != 0)
    {
      sub_256A6E5C8();
      if (v8)
      {
        sub_256A6E3E4();
        uint64_t v17 = &type metadata for AssetBackedDisabledUseCaseListBase;
        unint64_t v18 = sub_256A61DB8();
        sub_256A6E40C();
        sub_256A6E390();
        sub_256A61D20();
      }
      else
      {
        sub_256A6E3E4();
        uint64_t v17 = &type metadata for DisabledUseCaseListBase;
        unint64_t v18 = sub_256A61948();
        sub_256A6E40C();
        sub_256A6E390();
        sub_256A619C0();
      }
    }
    else if (v5 == 0xD00000000000001BLL && (sub_256A6E5B8(), v8) || (sub_256A6E3F0() & 1) != 0)
    {
      sub_256A6E5C8();
      if (v8)
      {
        sub_256A6E3E4();
        uint64_t v17 = &type metadata for AssetBackedGenerativeFunctionOverridesBase;
        unint64_t v18 = sub_256A62400();
        sub_256A6E40C();
        sub_256A6E390();
        sub_256A62368();
      }
      else
      {
        sub_256A6E3E4();
        uint64_t v17 = &type metadata for GenerativeFunctionOverridesBase;
        unint64_t v18 = sub_256A61F90();
        sub_256A6E40C();
        sub_256A6E390();
        sub_256A62008();
      }
    }
    else if (v5 == 0xD000000000000016 && (sub_256A6E5B8(), v8) || (sub_256A6E3F0() & 1) != 0)
    {
      sub_256A6E5C8();
      if (v8)
      {
        sub_256A6E3E4();
        uint64_t v17 = &type metadata for AssetBackedHandwritingSynthesizerBase;
        unint64_t v18 = sub_256A62A48();
        sub_256A6E40C();
        sub_256A6E390();
        sub_256A629B0();
      }
      else
      {
        sub_256A6E3E4();
        uint64_t v17 = &type metadata for HandwritingSynthesizerBase;
        unint64_t v18 = sub_256A625D8();
        sub_256A6E40C();
        sub_256A6E390();
        sub_256A62650();
      }
    }
    else if (v5 == 0xD000000000000013 && (sub_256A6E5B8(), v8) || (sub_256A6E3F0() & 1) != 0)
    {
      sub_256A6E5C8();
      if (v8)
      {
        sub_256A6E3E4();
        uint64_t v17 = &type metadata for AssetBackedImageCuratedPromptsBase;
        unint64_t v18 = sub_256A63090();
        sub_256A6E40C();
        sub_256A6E390();
        sub_256A62FF8();
      }
      else
      {
        sub_256A6E3E4();
        uint64_t v17 = &type metadata for ImageCuratedPromptsBase;
        unint64_t v18 = sub_256A62C20();
        sub_256A6E40C();
        sub_256A6E390();
        sub_256A62C98();
      }
    }
    else
    {
      BOOL v9 = v5 == 0x6C69466567616D49 && v6 == 0xEB00000000726574;
      if (v9 || (sub_256A6E3F0() & 1) != 0)
      {
        sub_256A6E5C8();
        if (v8)
        {
          sub_256A6E3E4();
          uint64_t v17 = &type metadata for AssetBackedImageFilterBase;
          unint64_t v18 = sub_256A636D8();
          sub_256A6E40C();
          sub_256A6E390();
          sub_256A63640();
        }
        else
        {
          sub_256A6E3E4();
          uint64_t v17 = &type metadata for ImageFilterBase;
          unint64_t v18 = sub_256A63268();
          sub_256A6E40C();
          sub_256A6E390();
          sub_256A632E0();
        }
      }
      else if (v5 == 0xD000000000000011 && (sub_256A6E5B8(), v8) || (sub_256A6E3F0() & 1) != 0)
      {
        sub_256A6E5C8();
        if (v8)
        {
          sub_256A6E3E4();
          uint64_t v17 = &type metadata for AssetBackedImageMagicCleanUpBase;
          unint64_t v18 = sub_256A63D20();
          sub_256A6E40C();
          sub_256A6E390();
          sub_256A63C88();
        }
        else
        {
          sub_256A6E3E4();
          uint64_t v17 = &type metadata for ImageMagicCleanUpBase;
          unint64_t v18 = sub_256A638B0();
          sub_256A6E40C();
          sub_256A6E390();
          sub_256A63928();
        }
      }
      else
      {
        BOOL v10 = v5 == 0x6163536567616D49 && v6 == 0xEB0000000072656CLL;
        if (v10 || (sub_256A6E3F0() & 1) != 0)
        {
          sub_256A6E5C8();
          if (v8)
          {
            sub_256A6E3E4();
            uint64_t v17 = &type metadata for AssetBackedImageScalerBase;
            unint64_t v18 = sub_256A64368();
            sub_256A6E40C();
            sub_256A6E390();
            sub_256A642D0();
          }
          else
          {
            sub_256A6E3E4();
            uint64_t v17 = &type metadata for ImageScalerBase;
            unint64_t v18 = sub_256A63EF8();
            sub_256A6E40C();
            sub_256A6E390();
            sub_256A63F70();
          }
        }
        else
        {
          BOOL v11 = v5 == 0x706164412E4D4C4CLL && v6 == 0xEB00000000726574;
          if (v11 || (sub_256A6E3F0() & 1) != 0)
          {
            sub_256A6E5C8();
            if (v8)
            {
              sub_256A6E3E4();
              uint64_t v17 = &type metadata for AssetBackedLLMAdapterBase;
              unint64_t v18 = sub_256A64918();
              sub_256A6E40C();
              sub_256A6E390();
              sub_256A6476C();
            }
            else
            {
              sub_256A6E3E4();
              uint64_t v17 = &type metadata for LLMAdapterBase;
              unint64_t v18 = sub_256A6DAEC();
              sub_256A6EF9C();
              sub_256A6E390();
              sub_256A6DBE8();
            }
          }
          else
          {
            BOOL v12 = v5 == 0x666172442E4D4C4CLL && v6 == 0xEE006C65646F4D74;
            if (v12 || (sub_256A6E3F0() & 1) != 0)
            {
              sub_256A6E5C8();
              if (v8)
              {
                sub_256A6E3E4();
                uint64_t v17 = &type metadata for AssetBackedLLMDraftModelBase;
                unint64_t v18 = sub_256A64DFC();
                sub_256A6E40C();
                sub_256A6E390();
                sub_256A64CA0();
              }
              else
              {
                sub_256A6E3E4();
                uint64_t v17 = &type metadata for LLMDraftModelBase;
                unint64_t v18 = sub_256A6DA4C();
                sub_256A6EF9C();
                sub_256A6E390();
                sub_256A6DA9C();
              }
            }
            else
            {
              BOOL v13 = v5 == 0x65646F4D2E4D4C4CLL && v6 == 0xE90000000000006CLL;
              if (v13 || (sub_256A6E3F0() & 1) != 0)
              {
                sub_256A6E5C8();
                if (v8)
                {
                  sub_256A6E3E4();
                  uint64_t v17 = &type metadata for AssetBackedLLMModelBase;
                  unint64_t v18 = sub_256A65270();
                  sub_256A6E40C();
                  sub_256A6E390();
                  sub_256A650C4();
                }
                else
                {
                  sub_256A6E3E4();
                  uint64_t v17 = &type metadata for LLMModelBase;
                  unint64_t v18 = sub_256A6D9AC();
                  sub_256A6EF9C();
                  sub_256A6E390();
                  sub_256A6D9FC();
                }
              }
              else if (v5 == 0xD000000000000017 && (sub_256A6E5B8(), v8) || (sub_256A6E3F0() & 1) != 0)
              {
                sub_256A6E5C8();
                if (v8)
                {
                  sub_256A6E3E4();
                  uint64_t v17 = &type metadata for AssetBackedServerConfigurationBase;
                  unint64_t v18 = sub_256A658DC();
                  sub_256A6E40C();
                  sub_256A6E390();
                  sub_256A65844();
                }
                else
                {
                  sub_256A6E3E4();
                  uint64_t v17 = &type metadata for ServerConfigurationBase;
                  unint64_t v18 = sub_256A6546C();
                  sub_256A6E40C();
                  sub_256A6E390();
                  sub_256A654E4();
                }
              }
              else if (v5 == 0xD00000000000001DLL && (sub_256A6E5B8(), v8) || (sub_256A6E3F0() & 1) != 0)
              {
                sub_256A6E5C8();
                if (v8)
                {
                  sub_256A6E3E4();
                  uint64_t v17 = &type metadata for AssetBackedModelConfigurationReplacementBase;
                  unint64_t v18 = sub_256A65F4C();
                  sub_256A6E40C();
                  sub_256A6E390();
                  sub_256A65E8C();
                }
                else
                {
                  sub_256A6E3E4();
                  uint64_t v17 = &type metadata for ModelConfigurationReplacementBase;
                  unint64_t v18 = sub_256A65AB4();
                  sub_256A6E40C();
                  sub_256A6E390();
                  sub_256A65B2C();
                }
              }
              else
              {
                BOOL v14 = v5 == 0x657A6974696E6153 && v6 == 0xE900000000000072;
                if (v14 || (sub_256A6E3F0() & 1) != 0)
                {
                  sub_256A6E5C8();
                  if (v8)
                  {
                    sub_256A6E3E4();
                    uint64_t v17 = &type metadata for AssetBackedSanitizerBase;
                    unint64_t v18 = sub_256A666A4();
                    sub_256A6E40C();
                    sub_256A6E390();
                    sub_256A66548();
                  }
                  else
                  {
                    sub_256A6E3E4();
                    uint64_t v17 = &type metadata for SanitizerBase;
                    unint64_t v18 = sub_256A66234();
                    sub_256A6E40C();
                    sub_256A6E390();
                    sub_256A66174();
                  }
                }
                else if (v5 == 0xD000000000000012 && (sub_256A6E5B8(), v8) || (sub_256A6E3F0() & 1) != 0)
                {
                  sub_256A6E5C8();
                  if (v8)
                  {
                    sub_256A6E3E4();
                    uint64_t v17 = &type metadata for AssetBackedTokenInputDenyListBase;
                    unint64_t v18 = sub_256A66C9C();
                    sub_256A6E40C();
                    sub_256A6E390();
                    sub_256A66C04();
                  }
                  else
                  {
                    sub_256A6E3E4();
                    uint64_t v17 = &type metadata for TokenInputDenyListBase;
                    unint64_t v18 = sub_256A6682C();
                    sub_256A6E40C();
                    sub_256A6E390();
                    sub_256A668A4();
                  }
                }
                else if (v5 == 0xD000000000000013 && (sub_256A6E5B8(), v8) || (sub_256A6E3F0() & 1) != 0)
                {
                  sub_256A6E5C8();
                  if (v8)
                  {
                    sub_256A6E3E4();
                    uint64_t v17 = &type metadata for AssetBackedTokenOutputDenyListBase;
                    unint64_t v18 = sub_256A672E4();
                    sub_256A6E40C();
                    sub_256A6E390();
                    sub_256A6724C();
                  }
                  else
                  {
                    sub_256A6E3E4();
                    uint64_t v17 = &type metadata for TokenOutputDenyListBase;
                    unint64_t v18 = sub_256A66E74();
                    sub_256A6E40C();
                    sub_256A6E390();
                    sub_256A66EEC();
                  }
                }
                else
                {
                  BOOL v15 = v5 == 0x657A696E656B6F54 && v6 == 0xE900000000000072;
                  if (!v15 && (sub_256A6E3F0() & 1) == 0)
                  {
                    swift_release();
                    goto LABEL_10;
                  }
                  sub_256A6E5C8();
                  if (v8)
                  {
                    sub_256A6E3E4();
                    uint64_t v17 = &type metadata for AssetBackedTokenizerBase;
                    unint64_t v18 = sub_256A677A4();
                    sub_256A6E40C();
                    sub_256A6E390();
                    sub_256A675FC();
                  }
                  else
                  {
                    sub_256A6E3E4();
                    uint64_t v17 = &type metadata for TokenizerBase;
                    unint64_t v18 = sub_256A6D890();
                    sub_256A6EF9C();
                    sub_256A6E390();
                    sub_256A6D8E0();
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  sub_256B3F130();
  if (v2)
  {
    sub_256A6D830((uint64_t)v19);
    swift_release();
    return sub_256A6D92C((uint64_t)&v16);
  }
  sub_256A6D830((uint64_t)v19);
  swift_release();
  sub_256A6D7D8((uint64_t)&v16, (uint64_t)v19, (uint64_t *)&unk_26B2B5D90);
LABEL_10:
  sub_256A6D7D8((uint64_t)v19, (uint64_t)&v16, (uint64_t *)&unk_26B2B5D90);
  if (v17) {
    return sub_256A3A540(&v16, a2);
  }
  uint64_t result = sub_256A6D830((uint64_t)&v16);
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

uint64_t sub_256A545A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 96);
  uint64_t v4 = *(void *)(a1 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_256A54690(v4, v2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_256A54690(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

#error "256A546EC: call analysis failed (funcsize=6)"

unint64_t sub_256A546F8()
{
  unint64_t result = qword_269F79CE0;
  if (!qword_269F79CE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79CE0);
  }
  return result;
}

uint64_t sub_256A54744(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_256A547A0()
{
  return DiffusionAdapterBase.init(configuration:)();
}

void sub_256A547B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_256A547D0()
{
  memcpy(__dst, v0, sizeof(__dst));
  sub_256A85CD8();
}

uint64_t sub_256A54824@<X0>(uint64_t *a1@<X8>)
{
  return sub_256A5EE44((uint64_t (*)(void *))sub_256A9FBEC, a1);
}

uint64_t sub_256A54860(uint64_t a1)
{
  unint64_t v2 = sub_256A5EEF8();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A5489C(uint64_t a1)
{
  unint64_t v2 = sub_256A5EEF8();

  return MEMORY[0x270FA00B8](a1, v2);
}

void DiffusionAdapterAssetMetadata.encode(to:)()
{
}

uint64_t DiffusionAdapterAssetMetadata.init(from:)(uint64_t a1)
{
  return sub_256A6E4A4(a1);
}

uint64_t sub_256A54934(uint64_t a1)
{
  return DiffusionModelAssetMetadata.init(from:)(a1);
}

void sub_256A5494C()
{
}

#error "256A54970: call analysis failed (funcsize=6)"

void sub_256A5497C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  sub_256A6E60C();
  a43 = v44;
  a44 = v45;
  uint64_t v47 = v46;
  sub_256A6E3CC(&a12);
  uint64_t v49 = a12;
  uint64_t v48 = a13;
  if (a12 != 0xD000000000000011 || a13 != 0x8000000256B480A0)
  {
    sub_256A6EF84();
    if ((sub_256A6E848() & 1) == 0)
    {
      sub_256A6E6C0();
      sub_256A6E5D4();
      swift_bridgeObjectRelease();
      sub_256A546F8();
      sub_256A6E4C0();
      *uint64_t v51 = v49;
      v51[1] = v48;
      sub_256A6E6DC((uint64_t)v51, 0xD00000000000002DLL);
      goto LABEL_9;
    }
  }
  if (!a21 || !*(void *)(a21 + 16))
  {
    sub_256A546F8();
    sub_256A6E4C0();
    *uint64_t v50 = v49;
    v50[1] = v48;
    sub_256A6E598((uint64_t)v50, 0xD000000000000029);
LABEL_9:
    swift_willThrow();
    sub_256A6DFC8((uint64_t)&a12);
    goto LABEL_10;
  }
  sub_256A6E3CC(v47);
LABEL_10:
  sub_256A6E680();
}

void sub_256A54AA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

#error "256A54AC8: call analysis failed (funcsize=6)"

uint64_t sub_256A54ADC()
{
  return AssetBackedDiffusionModelBase.init(configuration:)();
}

void sub_256A54AF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t sub_256A54B14()
{
  return 1;
}

uint64_t _s12ModelCatalog0B6ErrorsO17AvailabilityErrorO2eeoiySbAE_AEtFZ_0()
{
  return 1;
}

uint64_t sub_256A54B3C()
{
  return 0;
}

uint64_t sub_256A54B48()
{
  return 0;
}

uint64_t sub_256A54B54@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_256A54B14();
  *a1 = result & 1;
  return result;
}

uint64_t sub_256A54B80()
{
  return sub_256A54B3C();
}

uint64_t sub_256A54B9C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = _s12ModelCatalog0B6ErrorsO17AvailabilityErrorO2eeoiySbAE_AEtFZ_0();
  *a1 = result & 1;
  return result;
}

uint64_t sub_256A54BC8(uint64_t a1)
{
  unint64_t v2 = sub_256A5EF44();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A54C04(uint64_t a1)
{
  unint64_t v2 = sub_256A5EF44();

  return MEMORY[0x270FA00B8](a1, v2);
}

void DiffusionModelAssetMetadata.encode(to:)()
{
}

uint64_t DiffusionModelAssetMetadata.init(from:)(uint64_t a1)
{
  return sub_256A6E4A4(a1);
}

void sub_256A54C9C()
{
}

#error "256A54CC0: call analysis failed (funcsize=6)"

void sub_256A54CCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  sub_256A6E6EC();
  a43 = v46;
  a44 = v47;
  sub_256A6E670();
  sub_256A6F048();
  sub_256A6E3CC(&a12);
  sub_256A6EB44();
  BOOL v48 = v48 && v44 == 0xEF6C65646F4D2E6ELL;
  if (!v48)
  {
    sub_256A6EF84();
    if ((sub_256B3FEA0() & 1) == 0)
    {
      sub_256A6E6C0();
      sub_256A6E5D4();
      swift_bridgeObjectRelease();
      sub_256A546F8();
      uint64_t v53 = sub_256A6E4C0();
      sub_256A6E834(v53, v54);
      sub_256A6E6DC(v56, v55 | 2);
      goto LABEL_11;
    }
  }
  if (!a21 || !*(void *)(a21 + 16))
  {
    sub_256A546F8();
    uint64_t v49 = sub_256A6E4C0();
    sub_256A6E834(v49, v50);
    sub_256A6E598(v51, v52);
LABEL_11:
    swift_willThrow();
    sub_256A6DFC8((uint64_t)&a12);
    goto LABEL_12;
  }
  sub_256A6E3CC(v45);
LABEL_12:
  sub_256A6E7C8();
}

void sub_256A54DEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

#error "256A54E10: call analysis failed (funcsize=6)"

uint64_t sub_256A54E24()
{
  return DisabledUseCaseListBase.init(configuration:)();
}

void sub_256A54E3C()
{
}

uint64_t sub_256A54E5C(uint64_t a1)
{
  unint64_t v2 = sub_256A5EF90();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A54E98(uint64_t a1)
{
  unint64_t v2 = sub_256A5EF90();

  return MEMORY[0x270FA00B8](a1, v2);
}

void DisabledUseCaseListAssetMetadata.encode(to:)()
{
}

uint64_t DisabledUseCaseListAssetMetadata.init(from:)(uint64_t a1)
{
  return sub_256A6E4A4(a1);
}

void sub_256A54F30()
{
}

#error "256A54F54: call analysis failed (funcsize=6)"

void sub_256A54F60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  sub_256A6E60C();
  a43 = v44;
  a44 = v45;
  uint64_t v47 = v46;
  sub_256A6E3CC(&a12);
  if (a12 == 0xD000000000000013 && (sub_256A6E5FC(), v48) || (sub_256A6E71C() & 1) != 0)
  {
    sub_256A6E3CC(v47);
  }
  else
  {
    sub_256A6E57C();
    sub_256A6E5D4();
    swift_bridgeObjectRelease();
    sub_256A546F8();
    uint64_t v49 = sub_256A6E4C0();
    sub_256A6E5EC(v49, v50);
    sub_256A6E450(v51, v52);
    sub_256A6DFC8((uint64_t)&a12);
  }
  sub_256A6E680();
}

#error "256A5502C: call analysis failed (funcsize=6)"

uint64_t sub_256A55040()
{
  return GenerativeFunctionOverridesBase.init(configuration:)();
}

void sub_256A55058()
{
}

uint64_t sub_256A55078(uint64_t a1)
{
  unint64_t v2 = sub_256A5EFDC();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A550B4(uint64_t a1)
{
  unint64_t v2 = sub_256A5EFDC();

  return MEMORY[0x270FA00B8](a1, v2);
}

void GenerativeFunctionOverridesAssetMetadata.encode(to:)()
{
}

uint64_t GenerativeFunctionOverridesAssetMetadata.init(from:)(uint64_t a1)
{
  return sub_256A6E4A4(a1);
}

void sub_256A5514C()
{
}

#error "256A55170: call analysis failed (funcsize=6)"

void sub_256A5517C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  sub_256A6E60C();
  a43 = v45;
  a44 = v46;
  sub_256A6E670();
  sub_256A6E3CC(&a12);
  if (a12 == 0xD00000000000001BLL && (sub_256A6E5FC(), v47) || (sub_256A6E698(), (sub_256A6E848() & 1) != 0))
  {
    sub_256A6E3CC(v44);
  }
  else
  {
    sub_256A6E57C();
    sub_256A6E5D4();
    swift_bridgeObjectRelease();
    sub_256A546F8();
    uint64_t v48 = sub_256A6E4C0();
    sub_256A6E5EC(v48, v49);
    sub_256A6E450(v50, v51);
    sub_256A6DFC8((uint64_t)&a12);
  }
  sub_256A6E680();
}

#error "256A55248: call analysis failed (funcsize=6)"

uint64_t sub_256A5525C()
{
  return HandwritingSynthesizerBase.init(configuration:)();
}

void sub_256A55274()
{
}

uint64_t sub_256A55294(uint64_t a1)
{
  unint64_t v2 = sub_256A5F028();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A552D0(uint64_t a1)
{
  unint64_t v2 = sub_256A5F028();

  return MEMORY[0x270FA00B8](a1, v2);
}

void HandwritingSynthesizerAssetMetadata.encode(to:)()
{
}

uint64_t HandwritingSynthesizerAssetMetadata.init(from:)(uint64_t a1)
{
  return sub_256A6E4A4(a1);
}

void sub_256A55368()
{
}

#error "256A5538C: call analysis failed (funcsize=6)"

void sub_256A55398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  sub_256A6E60C();
  a43 = v45;
  a44 = v46;
  sub_256A6E670();
  sub_256A6E3CC(&a12);
  if (a12 == 0xD000000000000016 && (sub_256A6E5FC(), v47) || (sub_256A6E698(), (sub_256A6E848() & 1) != 0))
  {
    sub_256A6E3CC(v44);
  }
  else
  {
    sub_256A6E57C();
    sub_256A6E5D4();
    swift_bridgeObjectRelease();
    sub_256A546F8();
    uint64_t v48 = sub_256A6E4C0();
    sub_256A6E5EC(v48, v49);
    sub_256A6E450(v50, v51);
    sub_256A6DFC8((uint64_t)&a12);
  }
  sub_256A6E680();
}

#error "256A55464: call analysis failed (funcsize=6)"

uint64_t sub_256A55478()
{
  return ImageCuratedPromptsBase.init(configuration:)();
}

void sub_256A55490()
{
}

uint64_t sub_256A554B0(uint64_t a1)
{
  unint64_t v2 = sub_256A5F074();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A554EC(uint64_t a1)
{
  unint64_t v2 = sub_256A5F074();

  return MEMORY[0x270FA00B8](a1, v2);
}

void ImageCuratedPromptsAssetMetadata.encode(to:)()
{
}

uint64_t ImageCuratedPromptsAssetMetadata.init(from:)(uint64_t a1)
{
  return sub_256A6E4A4(a1);
}

void sub_256A55584()
{
}

#error "256A555A8: call analysis failed (funcsize=6)"

void sub_256A555B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  sub_256A6E60C();
  a43 = v44;
  a44 = v45;
  char v47 = v46;
  sub_256A6E3CC(&a12);
  if (a12 == 0xD000000000000013 && (sub_256A6E5FC(), v48) || (sub_256A6E71C() & 1) != 0)
  {
    sub_256A6E3CC(v47);
  }
  else
  {
    sub_256A6E57C();
    sub_256A6E5D4();
    swift_bridgeObjectRelease();
    sub_256A546F8();
    uint64_t v49 = sub_256A6E4C0();
    sub_256A6E5EC(v49, v50);
    sub_256A6E450(v51, v52);
    sub_256A6DFC8((uint64_t)&a12);
  }
  sub_256A6E680();
}

#error "256A55680: call analysis failed (funcsize=6)"

uint64_t sub_256A55694()
{
  return ImageFilterBase.init(configuration:)();
}

void sub_256A556AC()
{
}

uint64_t sub_256A556CC(uint64_t a1)
{
  unint64_t v2 = sub_256A5F0C0();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A55708(uint64_t a1)
{
  unint64_t v2 = sub_256A5F0C0();

  return MEMORY[0x270FA00B8](a1, v2);
}

void ImageFilterAssetMetadata.encode(to:)()
{
}

uint64_t ImageFilterAssetMetadata.init(from:)(uint64_t a1)
{
  return sub_256A6E4A4(a1);
}

void sub_256A557A0()
{
}

#error "256A557C4: call analysis failed (funcsize=6)"

void sub_256A557D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  sub_256A6E6EC();
  a43 = v47;
  a44 = v48;
  sub_256A6EC14();
  sub_256A6F010();
  sub_256A6E3CC(&a12);
  BOOL v49 = a12 == v46 && a13 == v45;
  if (v49 || (sub_256A6F07C(), (sub_256A6EDF0() & 1) != 0))
  {
    sub_256A6E3CC(v44);
  }
  else
  {
    sub_256A6E57C();
    sub_256A6E5D4();
    swift_bridgeObjectRelease();
    sub_256A546F8();
    uint64_t v50 = sub_256A6E4C0();
    sub_256A6EE98(v50, v51);
    sub_256A6E450(v52, v53);
    sub_256A6DFC8((uint64_t)&a12);
  }
  sub_256A6E7C8();
}

#error "256A55894: call analysis failed (funcsize=6)"

uint64_t sub_256A558A8()
{
  return ImageMagicCleanUpBase.init(configuration:)();
}

void sub_256A558C0()
{
}

uint64_t sub_256A558E0(uint64_t a1)
{
  unint64_t v2 = sub_256A5F10C();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A5591C(uint64_t a1)
{
  unint64_t v2 = sub_256A5F10C();

  return MEMORY[0x270FA00B8](a1, v2);
}

void ImageMagicCleanUpAssetMetadata.encode(to:)()
{
}

uint64_t ImageMagicCleanUpAssetMetadata.init(from:)(uint64_t a1)
{
  return sub_256A6E4A4(a1);
}

void sub_256A559B4()
{
}

#error "256A559D8: call analysis failed (funcsize=6)"

void sub_256A559E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  sub_256A6E60C();
  a43 = v44;
  a44 = v45;
  uint64_t v47 = v46;
  sub_256A6E3CC(&a12);
  if (a12 == 0xD000000000000011 && (sub_256A6E5FC(), v48) || (sub_256A6E698(), (sub_256A6E848() & 1) != 0))
  {
    sub_256A6E3CC(v47);
  }
  else
  {
    sub_256A6E57C();
    sub_256A6E5D4();
    swift_bridgeObjectRelease();
    sub_256A546F8();
    uint64_t v49 = sub_256A6E4C0();
    sub_256A6E5EC(v49, v50);
    sub_256A6E450(v51, v52);
    sub_256A6DFC8((uint64_t)&a12);
  }
  sub_256A6E680();
}

#error "256A55AB8: call analysis failed (funcsize=6)"

uint64_t sub_256A55ACC()
{
  return ImageScalerBase.init(configuration:)();
}

void sub_256A55AE4()
{
}

uint64_t sub_256A55B04(uint64_t a1)
{
  unint64_t v2 = sub_256A5F158();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A55B40(uint64_t a1)
{
  unint64_t v2 = sub_256A5F158();

  return MEMORY[0x270FA00B8](a1, v2);
}

void ImageScalerAssetMetadata.encode(to:)()
{
}

uint64_t ImageScalerAssetMetadata.init(from:)(uint64_t a1)
{
  return sub_256A6E4A4(a1);
}

void sub_256A55BD8()
{
}

#error "256A55BFC: call analysis failed (funcsize=6)"

void sub_256A55C08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  sub_256A6E6EC();
  a43 = v46;
  a44 = v47;
  sub_256A6E670();
  sub_256A6EFFC();
  sub_256A6E3CC(&a12);
  BOOL v48 = a12 == v45 && a13 == 0xEB0000000072656CLL;
  if (v48 || (sub_256A6F07C(), (sub_256A6EDF0() & 1) != 0))
  {
    sub_256A6E3CC(v44);
  }
  else
  {
    sub_256A6E57C();
    sub_256A6E5D4();
    swift_bridgeObjectRelease();
    sub_256A546F8();
    uint64_t v49 = sub_256A6E4C0();
    sub_256A6EE98(v49, v50);
    sub_256A6E450(v51, v52);
    sub_256A6DFC8((uint64_t)&a12);
  }
  sub_256A6E7C8();
}

uint64_t LLMAdapterAssetMetadata.ClassifierDefaultOutputClass.tokenId.getter()
{
  return *(void *)v0;
}

ModelCatalog::LLMAdapterAssetMetadata::ClassifierDefaultOutputClass __swiftcall LLMAdapterAssetMetadata.ClassifierDefaultOutputClass.init(tokenId:)(ModelCatalog::LLMAdapterAssetMetadata::ClassifierDefaultOutputClass tokenId)
{
  v1->tokenId = tokenId.tokenId;
  return tokenId;
}

BOOL sub_256A55CE4()
{
  sub_256A6EAB8();
  sub_256B3FCD0();
  sub_256A4AC50();
  return v0 != 0;
}

uint64_t sub_256A55D2C()
{
  return sub_256B3FF70();
}

uint64_t sub_256A55D80()
{
  return sub_256A56148();
}

uint64_t sub_256A55D8C()
{
  return sub_256A55FD0();
}

uint64_t sub_256A55D98()
{
  sub_256A6EA98();
  v0(v1);
  sub_256A6E64C();
  swift_bridgeObjectRelease();
  return sub_256B3FF70();
}

uint64_t sub_256A55DE0()
{
  return sub_256A5609C();
}

uint64_t sub_256A55DEC()
{
  sub_256A6EA98();
  v0(v1);
  sub_256A6E64C();
  swift_bridgeObjectRelease();
  return sub_256B3FF70();
}

uint64_t sub_256A55E34()
{
  return sub_256A56318();
}

uint64_t sub_256A55E40()
{
  return sub_256B3FF70();
}

uint64_t sub_256A55E88()
{
  return sub_256A56274();
}

uint64_t sub_256A55E94()
{
  return sub_256A55EC4();
}

uint64_t sub_256A55EAC()
{
  return sub_256A55EC4();
}

uint64_t sub_256A55EC4()
{
  sub_256A6EA98();
  v0(v3, v1);
  return sub_256B3FF70();
}

uint64_t sub_256A55F04()
{
  return sub_256A55F30();
}

uint64_t sub_256A55F18()
{
  return sub_256A561F0();
}

uint64_t sub_256A55F30()
{
  return sub_256B3FF70();
}

uint64_t sub_256A55F80()
{
  return sub_256B3FF70();
}

uint64_t sub_256A55FD0()
{
  return sub_256B3FF70();
}

uint64_t sub_256A56054()
{
  sub_256A6ED64();
  v0(v1);
  sub_256A6E64C();
  swift_bridgeObjectRelease();
  return sub_256B3FF70();
}

uint64_t sub_256A5609C()
{
  return sub_256B3FF70();
}

uint64_t sub_256A56100()
{
  sub_256A6ED64();
  v0(v1);
  sub_256A6E64C();
  swift_bridgeObjectRelease();
  return sub_256B3FF70();
}

uint64_t sub_256A56148()
{
  return sub_256B3FF70();
}

uint64_t sub_256A561D8()
{
  return sub_256A561F0();
}

uint64_t sub_256A561F0()
{
  sub_256A6ED64();
  v0(v3, v1);
  return sub_256B3FF70();
}

uint64_t sub_256A56230()
{
  return sub_256B3FF70();
}

uint64_t sub_256A56274()
{
  return sub_256B3FF70();
}

uint64_t sub_256A56318()
{
  return sub_256B3FF70();
}

BOOL sub_256A563B0@<W0>(unsigned char *a1@<X8>)
{
  BOOL result = sub_256A55CE4();
  *a1 = result;
  return result;
}

void sub_256A563E8(void *a1@<X8>)
{
  *a1 = 0x64695F6E656B6F74;
  a1[1] = 0xE800000000000000;
}

uint64_t sub_256A56404()
{
  return 0x64695F6E656B6F74;
}

uint64_t sub_256A5641C@<X0>(BOOL *a1@<X8>)
{
  uint64_t result = sub_256A55D20();
  *a1 = result != 0;
  return result;
}

void sub_256A5644C(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_256A56458(uint64_t a1)
{
  unint64_t v2 = sub_256A5F1A4();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A56494(uint64_t a1)
{
  unint64_t v2 = sub_256A5F1A4();

  return MEMORY[0x270FA00B8](a1, v2);
}

void LLMAdapterAssetMetadata.ClassifierDefaultOutputClass.encode(to:)()
{
  sub_256A4A878();
  uint64_t v1 = v0;
  sub_256A39D2C(&qword_269F78EA8);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v2);
  sub_256A4A7E4();
  sub_256A39D70(v1, v1[3]);
  sub_256A5F1A4();
  sub_256A6ECB8();
  sub_256B3FE50();
  sub_256A6E550();
  v3();
  sub_256A4A890();
}

void LLMAdapterAssetMetadata.ClassifierDefaultOutputClass.init(from:)()
{
  sub_256A4A878();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  sub_256A39D2C(&qword_269F78EB8);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v5);
  sub_256A6E86C();
  sub_256A5F1A4();
  sub_256A6ED08();
  if (!v0)
  {
    uint64_t v6 = sub_256B3FD80();
    sub_256A6E550();
    v7();
    *uint64_t v4 = v6;
  }
  sub_256A39DB4(v2);
  sub_256A4A890();
}

void sub_256A5669C()
{
}

void sub_256A566B4()
{
}

void LLMAdapterAssetMetadata.ClassifierMetadata.defaultOutputClass.getter(void *a1@<X8>)
{
  *a1 = *v1;
}

ModelCatalog::LLMAdapterAssetMetadata::ClassifierMetadata __swiftcall LLMAdapterAssetMetadata.ClassifierMetadata.init(defaultOutputClass:outputClasses:)(ModelCatalog::LLMAdapterAssetMetadata::ClassifierDefaultOutputClass defaultOutputClass, Swift::OpaquePointer outputClasses)
{
  v2->_rawValue = *(void **)defaultOutputClass.tokenId;
  v2[1]._rawValue = outputClasses._rawValue;
  result.outputClasses = outputClasses;
  result.defaultOutputClass = defaultOutputClass;
  return result;
}

uint64_t sub_256A566E8()
{
  return sub_256A56C14();
}

uint64_t sub_256A56708(char a1)
{
  if (a1) {
    return 0x635F74757074756FLL;
  }
  else {
    return 0xD000000000000014;
  }
}

uint64_t sub_256A56750(char *a1, char *a2)
{
  return sub_256B02BE8(*a1, *a2);
}

uint64_t sub_256A5675C()
{
  return sub_256A55D80();
}

uint64_t sub_256A56764()
{
  return sub_256A86C58();
}

uint64_t sub_256A5676C()
{
  return sub_256A56148();
}

uint64_t sub_256A56774@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_256A56C14();
  *a1 = result;
  return result;
}

uint64_t sub_256A567AC()
{
  char v1 = sub_256A6E860();
  uint64_t result = sub_256A56708(v1);
  uint64_t *v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t sub_256A567D4()
{
  return sub_256A56708(*v0);
}

uint64_t sub_256A567DC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_256A566E8();
  *a1 = result;
  return result;
}

void sub_256A56804(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_256A56810(uint64_t a1)
{
  unint64_t v2 = sub_256A5F1F0();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A5684C(uint64_t a1)
{
  unint64_t v2 = sub_256A5F1F0();

  return MEMORY[0x270FA00B8](a1, v2);
}

void LLMAdapterAssetMetadata.ClassifierMetadata.encode(to:)()
{
  sub_256A4A878();
  unint64_t v2 = v1;
  sub_256A39D2C(&qword_269F78EC0);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v3);
  sub_256A4A7CC();
  sub_256A39D70(v2, v2[3]);
  sub_256A5F1F0();
  sub_256B3FF90();
  sub_256A5F23C();
  sub_256B3FE60();
  if (!v0)
  {
    sub_256A39D2C(&qword_269F78ED8);
    sub_256A5F320((uint64_t)&unk_269F78EE0);
    sub_256B3FE60();
  }
  sub_256A6E9DC();
  v4();
  sub_256A6ECF0();
  sub_256A4A890();
}

void LLMAdapterAssetMetadata.ClassifierMetadata.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_256A4A878();
  uint64_t v12 = v11;
  BOOL v14 = v13;
  sub_256A39D2C(&qword_269F78EF0);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v15);
  sub_256A6E86C();
  sub_256A5F1F0();
  sub_256B3FF80();
  if (!v10)
  {
    sub_256A5F2D4();
    sub_256B3FD90();
    sub_256A39D2C(&qword_269F78ED8);
    sub_256A5F320((uint64_t)&unk_269F78F00);
    sub_256B3FD90();
    sub_256A6E550();
    v16();
    *BOOL v14 = a10;
    v14[1] = a10;
  }
  sub_256A39DB4(v12);
  sub_256A4A890();
}

void sub_256A56BC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  LLMAdapterAssetMetadata.ClassifierMetadata.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void sub_256A56BE0()
{
}

uint64_t LLMAdapterAssetMetadata.ClassifierOutputClass.tokenId.getter()
{
  return *(void *)v0;
}

double LLMAdapterAssetMetadata.ClassifierOutputClass.tokenProbabilityThreshold.getter()
{
  return *(double *)(v0 + 8);
}

ModelCatalog::LLMAdapterAssetMetadata::ClassifierOutputClass __swiftcall LLMAdapterAssetMetadata.ClassifierOutputClass.init(tokenId:tokenProbabilityThreshold:)(Swift::Int tokenId, Swift::Double tokenProbabilityThreshold)
{
  *(void *)uint64_t v2 = tokenId;
  *(Swift::Double *)(v2 + 8) = tokenProbabilityThreshold;
  result.tokenProbabilityThreshold = tokenProbabilityThreshold;
  result.tokenId = tokenId;
  return result;
}

uint64_t sub_256A56C14()
{
  sub_256A6E890();
  sub_256A4AC50();
  if (v0 == 1) {
    unsigned int v1 = 1;
  }
  else {
    unsigned int v1 = 2;
  }
  if (v0) {
    return v1;
  }
  else {
    return 0;
  }
}

uint64_t sub_256A56C4C()
{
  return sub_256A56C14();
}

uint64_t sub_256A56C6C(char a1)
{
  if (a1) {
    return 0xD00000000000001BLL;
  }
  else {
    return 0x64695F6E656B6F74;
  }
}

uint64_t sub_256A56CA8(char *a1, char *a2)
{
  return sub_256B02A98(*a1, *a2);
}

uint64_t sub_256A56CB4()
{
  return sub_256A55D8C();
}

uint64_t sub_256A56CBC()
{
  return sub_256A86B58();
}

uint64_t sub_256A56CC4()
{
  return sub_256A55FD0();
}

uint64_t sub_256A56CCC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_256A56C14();
  *a1 = result;
  return result;
}

uint64_t sub_256A56D04()
{
  char v1 = sub_256A6E860();
  uint64_t result = sub_256A56C6C(v1);
  uint64_t *v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t sub_256A56D2C()
{
  return sub_256A56C6C(*v0);
}

uint64_t sub_256A56D34@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_256A56C4C();
  *a1 = result;
  return result;
}

uint64_t sub_256A56D5C(uint64_t a1)
{
  unint64_t v2 = sub_256A5F3D8();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A56D98(uint64_t a1)
{
  unint64_t v2 = sub_256A5F3D8();

  return MEMORY[0x270FA00B8](a1, v2);
}

void LLMAdapterAssetMetadata.ClassifierOutputClass.encode(to:)(void *a1)
{
  sub_256A39D2C(&qword_269F78F10);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v3);
  sub_256A4A7CC();
  sub_256A39D70(a1, a1[3]);
  sub_256A5F3D8();
  sub_256A6ECB8();
  sub_256B3FE50();
  if (!v1) {
    sub_256B3FE40();
  }
  sub_256A6E550();
  v4();
  sub_256A6ECF0();
}

uint64_t LLMAdapterAssetMetadata.ClassifierOutputClass.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_256A39D2C(&qword_269F78F20);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v5);
  sub_256A6E86C();
  sub_256A5F3D8();
  sub_256A6ED08();
  if (!v2)
  {
    uint64_t v6 = sub_256B3FD80();
    sub_256B3FD70();
    uint64_t v8 = v7;
    sub_256A6E550();
    v9();
    *a2 = v6;
    a2[1] = v8;
  }
  return sub_256A39DB4(a1);
}

uint64_t sub_256A57054@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return LLMAdapterAssetMetadata.ClassifierOutputClass.init(from:)(a1, a2);
}

void sub_256A5706C(void *a1)
{
}

uint64_t sub_256A57088()
{
  return sub_256A5B328();
}

uint64_t sub_256A570A8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_256B02B30(*a1, *a2);
}

uint64_t sub_256A570B4()
{
  return sub_256A55DEC();
}

uint64_t sub_256A570E4(uint64_t a1)
{
  return sub_256A86BC8(a1, *v1);
}

uint64_t sub_256A570EC()
{
  return sub_256A56054();
}

uint64_t sub_256A5711C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_256A5B328();
  *a1 = result;
  return result;
}

uint64_t sub_256A57154@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_256A57088();
  *a1 = result;
  return result;
}

void sub_256A5717C(unsigned char *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_256A57188(uint64_t a1)
{
  unint64_t v2 = sub_256A5F424();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A571C4(uint64_t a1)
{
  unint64_t v2 = sub_256A5F424();

  return MEMORY[0x270FA00B8](a1, v2);
}

void LLMAdapterAssetMetadata.DeviceLocalization.encode(to:)()
{
}

void LLMAdapterAssetMetadata.DeviceLocalization.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_256A5B8E0(a1, (uint64_t)&unk_269F78F40, (uint64_t)sub_256A5F424, (uint64_t)&unk_27060D930, a5, a6, a7, a8, vars0, vars8);
}

void sub_256A57278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_256A57290()
{
}

uint64_t sub_256A572AC()
{
  return sub_256A59470();
}

uint64_t sub_256A572D0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_256B02BD0(*a1, *a2);
}

uint64_t sub_256A572DC(uint64_t a1)
{
  return sub_256A86C40(a1, *v1);
}

uint64_t sub_256A572E4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_256A59470();
  *a1 = result;
  return result;
}

uint64_t sub_256A5731C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_256A572AC();
  *a1 = result;
  return result;
}

void sub_256A57344(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_256A57350(uint64_t a1)
{
  unint64_t v2 = sub_256A5F4D0();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A5738C(uint64_t a1)
{
  unint64_t v2 = sub_256A5F4D0();

  return MEMORY[0x270FA00B8](a1, v2);
}

void LLMAdapterAssetMetadata.DraftMetadata.encode(to:)()
{
}

void LLMAdapterAssetMetadata.DraftMetadata.init(from:)()
{
}

void sub_256A57440()
{
}

void sub_256A57458()
{
}

ModelCatalog::LLMAdapterAssetMetadata::LoraRank_optional __swiftcall LLMAdapterAssetMetadata.LoraRank.init(rawValue:)(Swift::String rawValue)
{
  unint64_t v2 = v1;
  unint64_t v3 = sub_256B3FCD0();
  result.value = swift_bridgeObjectRelease();
  char v5 = 6;
  if (v3 < 6) {
    char v5 = v3;
  }
  char *v2 = v5;
  return result;
}

uint64_t LLMAdapterAssetMetadata.LoraRank.rawValue.getter()
{
  uint64_t result = 0x345F61726F6CLL;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x385F61726F6CLL;
      break;
    case 2:
      uint64_t result = 0x36315F61726F6CLL;
      break;
    case 3:
      uint64_t result = 0x32335F61726F6CLL;
      break;
    case 4:
      uint64_t result = 0x34365F61726F6CLL;
      break;
    case 5:
      uint64_t result = 0x3832315F61726F6CLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_256A57588(unsigned __int8 *a1, char *a2)
{
  return sub_256B02904(*a1, *a2);
}

uint64_t sub_256A57594()
{
  return sub_256A55EC4();
}

uint64_t sub_256A575C4(uint64_t a1)
{
  return sub_256A86A64(a1, *v1);
}

uint64_t sub_256A575CC()
{
  return sub_256A561F0();
}

ModelCatalog::LLMAdapterAssetMetadata::LoraRank_optional sub_256A575FC(Swift::String *a1)
{
  return LLMAdapterAssetMetadata.LoraRank.init(rawValue:)(*a1);
}

uint64_t sub_256A57608@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = LLMAdapterAssetMetadata.LoraRank.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_256A57630()
{
  return sub_256B3F830();
}

uint64_t sub_256A57690()
{
  return sub_256B3F810();
}

ModelCatalog::LLMAdapterAssetMetadata::ModelType_optional __swiftcall LLMAdapterAssetMetadata.ModelType.init(rawValue:)(Swift::String rawValue)
{
  unint64_t v2 = v1;
  uint64_t v3 = sub_256B3FCD0();
  result.value = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  char *v2 = v5;
  return result;
}

uint64_t LLMAdapterAssetMetadata.ModelType.rawValue.getter()
{
  if (*v0) {
    return 7696487;
  }
  else {
    return 6647393;
  }
}

uint64_t sub_256A57768(char *a1, char *a2)
{
  return sub_256B02B60(*a1, *a2);
}

uint64_t sub_256A57774()
{
  return sub_256A55DE0();
}

uint64_t sub_256A5777C()
{
  return sub_256A86BF8();
}

uint64_t sub_256A57784()
{
  return sub_256A5609C();
}

ModelCatalog::LLMAdapterAssetMetadata::ModelType_optional sub_256A5778C(Swift::String *a1)
{
  return LLMAdapterAssetMetadata.ModelType.init(rawValue:)(*a1);
}

uint64_t sub_256A57798@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = LLMAdapterAssetMetadata.ModelType.rawValue.getter();
  *a1 = result;
  a1[1] = 0xE300000000000000;
  return result;
}

uint64_t sub_256A577C4()
{
  return sub_256B3F830();
}

uint64_t sub_256A57824()
{
  return sub_256B3F810();
}

void LLMAdapterAssetMetadata.modelType.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t LLMAdapterAssetMetadata.rank.getter()
{
  return *(void *)(v0 + 8);
}

void LLMAdapterAssetMetadata.type.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 17);
}

uint64_t LLMAdapterAssetMetadata.backboneSignature.getter()
{
  return sub_256A4A370();
}

uint64_t LLMAdapterAssetMetadata.adapterSignature.getter()
{
  return sub_256A4A370();
}

uint64_t LLMAdapterAssetMetadata.speculativeStreamCount.getter()
{
  return *(void *)(v0 + 56);
}

void LLMAdapterAssetMetadata.speculativeStreamingDefaultParameters.getter(uint64_t a1@<X8>)
{
  long long v2 = *(_OWORD *)(v1 + 88);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 72);
  *(_OWORD *)(a1 + 16) = v2;
  sub_256A6EDC8((__n128 *)a1, *(__n128 *)(v1 + 104), *(__n128 *)(v1 + 120));
}

uint64_t LLMAdapterAssetMetadata.localization.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_256A6EFB4(v1[19], v1[20], v1[21], v1[22], v1[23], v1[24], v1[25], a1);
}

uint64_t LLMAdapterAssetMetadata.userDefinedFields.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LLMAdapterAssetMetadata.classifierMetadata.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 224);
  *a1 = *(void *)(v1 + 216);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

__n128 LLMAdapterAssetMetadata.init(modelType:rank:type:backboneSignature:adapterSignature:speculativeStreamCount:speculativeStreamingDefaultParameters:localization:userDefinedFields:classifierMetadata:)@<Q0>(char *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, __n128 *a15)
{
  long long v15 = *(_OWORD *)(a12 + 16);
  *(_OWORD *)(a9 + 72) = *(_OWORD *)a12;
  *(_OWORD *)(a9 + 88) = v15;
  long long v16 = *(_OWORD *)(a12 + 48);
  *(_OWORD *)(a9 + 104) = *(_OWORD *)(a12 + 32);
  *(_OWORD *)(a9 + 120) = v16;
  long long v17 = *(_OWORD *)(a13 + 16);
  *(_OWORD *)(a9 + 152) = *(_OWORD *)a13;
  char v18 = *a1;
  char v19 = *a4;
  uint64_t v20 = *(void *)(a12 + 64);
  char v21 = *(unsigned char *)(a12 + 72);
  uint64_t v22 = *(void *)(a13 + 48);
  *(unsigned char *)a9 = v18;
  *(void *)(a9 + 8) = a2;
  *(unsigned char *)(a9 + 16) = a3 & 1;
  *(unsigned char *)(a9 + 17) = v19;
  *(void *)(a9 + 24) = a5;
  *(void *)(a9 + 32) = a6;
  *(void *)(a9 + 40) = a7;
  *(void *)(a9 + 48) = a8;
  *(void *)(a9 + 56) = a10;
  *(unsigned char *)(a9 + 64) = a11 & 1;
  *(void *)(a9 + 136) = v20;
  *(unsigned char *)(a9 + 144) = v21;
  *(_OWORD *)(a9 + 168) = v17;
  *(_OWORD *)(a9 + 184) = *(_OWORD *)(a13 + 32);
  *(void *)(a9 + 200) = v22;
  *(void *)(a9 + 208) = a14;
  __n128 result = *a15;
  *(__n128 *)(a9 + 216) = *a15;
  return result;
}

uint64_t sub_256A579F8()
{
  sub_256A6EAB8();
  sub_256B3FCD0();
  sub_256A4AC50();
  if (v0 >= 0xA) {
    return 10;
  }
  else {
    return v0;
  }
}

void sub_256A57A3C()
{
  sub_256A6E52C();
  switch(v0)
  {
    case 1:
      sub_256A6ED2C();
      break;
    case 2:
      sub_256A6E7E0();
      break;
    case 3:
    case 4:
    case 5:
    case 6:
      sub_256A4A6DC();
      break;
    case 7:
      sub_256A6E940();
      break;
    default:
      return;
  }
}

void sub_256A57B24()
{
  sub_256A6E52C();
  switch(v0)
  {
    case 1:
      sub_256A6ED2C();
      break;
    case 2:
      sub_256A6E7E0();
      break;
    case 3:
    case 4:
    case 5:
    case 6:
      sub_256A4A6DC();
      break;
    case 7:
      sub_256A6E940();
      break;
    default:
      return;
  }
}

uint64_t sub_256A57C0C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_256B02B48(*a1, *a2);
}

uint64_t sub_256A57C18()
{
  return sub_256A55DEC();
}

uint64_t sub_256A57C48(uint64_t a1)
{
  return sub_256A86BE0(a1, *v1);
}

uint64_t sub_256A57C50()
{
  return sub_256A56054();
}

uint64_t sub_256A57C80@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_256A579F8();
  *a1 = result;
  return result;
}

void sub_256A57CB0()
{
  sub_256A6E860();
  sub_256A57A3C();
  void *v0 = v1;
  v0[1] = v2;
}

void sub_256A57CD8()
{
}

uint64_t sub_256A57CE0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_256A57A38();
  *a1 = result;
  return result;
}

void sub_256A57D08(unsigned char *a1@<X8>)
{
  *a1 = 10;
}

uint64_t sub_256A57D14(uint64_t a1)
{
  unint64_t v2 = sub_256A5F51C();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A57D50(uint64_t a1)
{
  unint64_t v2 = sub_256A5F51C();

  return MEMORY[0x270FA00B8](a1, v2);
}

void LLMAdapterAssetMetadata.encode(to:)()
{
  sub_256A4A878();
  unint64_t v2 = v1;
  uint64_t v3 = sub_256A39D2C(&qword_269F78F68);
  sub_256A49FB8();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  sub_256A4A500();
  uint64_t v7 = v2;
  uint64_t v10 = v9 - v8;
  sub_256A6F0F0(v7);
  sub_256A5F51C();
  sub_256B3FF90();
  sub_256A5F568();
  sub_256B3FE60();
  if (!v0)
  {
    sub_256A6F0D8(1);
    sub_256B3FE00();
    sub_256A5F5B4();
    sub_256A6E7A4();
    sub_256A6F0D8(3);
    sub_256B3FE20();
    sub_256A6F0D8(4);
    sub_256B3FE20();
    sub_256A6F0D8(5);
    sub_256B3FE00();
    sub_256A5F600();
    sub_256A6E7A4();
    sub_256A5F64C();
    sub_256A6E7A4();
    sub_256A39D2C(&qword_269F78E08);
    sub_256A5F470((uint64_t)&unk_269F78F38);
    sub_256B3FE10();
    sub_256A5F698();
    sub_256A6E7A4();
  }
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v10, v3);
  sub_256A4A890();
}

void LLMAdapterAssetMetadata.init(from:)()
{
  sub_256A4A878();
  unint64_t v2 = v1;
  uint64_t v4 = v3;
  sub_256A39D2C(&qword_269F78FA0);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v5);
  sub_256A6E704();
  sub_256A39D70(v2, v2[3]);
  sub_256A5F51C();
  sub_256A6EC58();
  if (v0)
  {
    sub_256A39DB4((uint64_t)v2);
  }
  else
  {
    sub_256A5F6E4();
    sub_256B3FD90();
    sub_256A6EDD8(1);
    uint64_t v6 = sub_256B3FD30();
    char v84 = v7 & 1;
    char v37 = v7;
    sub_256A5F730();
    sub_256A6E7F0();
    char v36 = v46;
    sub_256A6EDD8(3);
    uint64_t v33 = sub_256B3FD50();
    char v34 = v46;
    uint64_t v35 = v6;
    uint64_t v9 = v8;
    swift_bridgeObjectRetain();
    uint64_t v44 = v9;
    uint64_t v10 = sub_256B3FD50();
    LOBYTE(v46) = 5;
    uint64_t v12 = v11;
    swift_bridgeObjectRetain();
    uint64_t v43 = v12;
    uint64_t v32 = sub_256B3FD30();
    char v81 = v13 & 1;
    LOBYTE(v12) = v13;
    sub_256A5F77C();
    sub_256A6E7F0();
    char v20 = v12;
    uint64_t v28 = v48;
    uint64_t v29 = v47;
    uint64_t v26 = v50;
    uint64_t v27 = v49;
    uint64_t v24 = v52;
    uint64_t v25 = v51;
    uint64_t v22 = v54;
    uint64_t v23 = v53;
    char v21 = v55;
    sub_256A5F7C8();
    sub_256A6E7F0();
    uint64_t v18 = v46;
    uint64_t v30 = v47;
    uint64_t v31 = v48;
    uint64_t v41 = v49;
    uint64_t v42 = v46;
    uint64_t v40 = v51;
    sub_256A39D2C(&qword_269F78E08);
    LOBYTE(v45[0]) = 8;
    uint64_t v38 = v50;
    uint64_t v39 = v52;
    sub_256A60220(v46);
    sub_256A5F470((uint64_t)&unk_269F78F48);
    sub_256B3FD40();
    uint64_t v14 = v46;
    char v76 = 9;
    sub_256A5F814();
    swift_bridgeObjectRetain();
    sub_256B3FD40();
    uint64_t v15 = sub_256A6E90C();
    v16(v15);
    uint64_t v19 = v77;
    uint64_t v17 = v78;
    LOBYTE(v45[0]) = v36;
    v45[1] = v35;
    LOBYTE(v45[2]) = v37 & 1;
    BYTE1(v45[2]) = v34;
    v45[3] = v33;
    v45[4] = v44;
    v45[5] = v10;
    v45[6] = v43;
    v45[7] = v32;
    LOBYTE(v45[8]) = v20 & 1;
    v45[9] = v18;
    void v45[10] = v29;
    v45[11] = v28;
    v45[12] = v27;
    v45[13] = v26;
    v45[14] = v25;
    v45[15] = v24;
    v45[16] = v23;
    v45[17] = v22;
    LOBYTE(v45[18]) = v21;
    v45[19] = v42;
    v45[20] = v30;
    v45[21] = v31;
    v45[22] = v41;
    v45[23] = v38;
    v45[24] = v40;
    v45[25] = v39;
    v45[26] = v14;
    v45[27] = v77;
    v45[28] = v78;
    sub_256A5F860((uint64_t)v45);
    swift_bridgeObjectRelease();
    sub_256A60870(v42);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    memcpy(v4, v45, 0xE8uLL);
    sub_256A39DB4((uint64_t)v2);
    LOBYTE(v46) = v36;
    *(_DWORD *)((char *)&v46 + 1) = v85[0];
    HIDWORD(v46) = *(_DWORD *)((char *)v85 + 3);
    uint64_t v47 = v35;
    LOBYTE(v48) = v84;
    BYTE1(v48) = v34;
    *(_DWORD *)((char *)&v48 + 2) = v82;
    HIWORD(v48) = v83;
    uint64_t v49 = v33;
    uint64_t v50 = v44;
    uint64_t v51 = v10;
    uint64_t v52 = v43;
    uint64_t v53 = v32;
    LOBYTE(v54) = v81;
    *(_DWORD *)((char *)&v54 + 1) = *(_DWORD *)v80;
    HIDWORD(v54) = *(_DWORD *)&v80[3];
    uint64_t v55 = v18;
    uint64_t v56 = v29;
    uint64_t v57 = v28;
    uint64_t v58 = v27;
    uint64_t v59 = v26;
    uint64_t v60 = v25;
    uint64_t v61 = v24;
    uint64_t v62 = v23;
    uint64_t v63 = v22;
    char v64 = v21;
    *(_DWORD *)&v65[3] = *(_DWORD *)&v79[3];
    *(_DWORD *)uint64_t v65 = *(_DWORD *)v79;
    uint64_t v66 = v42;
    uint64_t v67 = v30;
    uint64_t v68 = v31;
    uint64_t v69 = v41;
    uint64_t v70 = v38;
    uint64_t v71 = v40;
    uint64_t v72 = v39;
    uint64_t v73 = v14;
    uint64_t v74 = v19;
    uint64_t v75 = v17;
    sub_256A5F908((uint64_t)&v46);
  }
  sub_256A6E988();
  sub_256A4A890();
}

void sub_256A58950()
{
}

void sub_256A58968()
{
}

void AssetBackedLLMAdapterBase.init(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  sub_256A6E6EC();
  a43 = v47;
  a44 = v48;
  sub_256A6EC14();
  sub_256A6EA74();
  sub_256A6E3CC(&a12);
  sub_256A6EB44();
  BOOL v49 = v49 && v44 == v46;
  if (!v49)
  {
    sub_256A6EA60();
    if ((sub_256A6EDF0() & 1) == 0)
    {
      sub_256A6E6C0();
      sub_256A6E5D4();
      swift_bridgeObjectRelease();
      sub_256A546F8();
      uint64_t v54 = sub_256A6E4C0();
      sub_256A6EEAC(v54, v55);
      sub_256A6E6DC(v56, v57);
      goto LABEL_11;
    }
  }
  if (!a21 || !*(void *)(a21 + 16))
  {
    sub_256A546F8();
    uint64_t v50 = sub_256A6E4C0();
    sub_256A6EEAC(v50, v51);
    sub_256A6E598(v53, v52 + 2);
LABEL_11:
    swift_willThrow();
    sub_256A6DFC8((uint64_t)&a12);
    goto LABEL_12;
  }
  sub_256A6E3CC(v45);
LABEL_12:
  sub_256A6E7C8();
}

void AssetBackedLLMAdapterBase.llmModel.getter()
{
}

#error "256A58AE0: call analysis failed (funcsize=6)"

void sub_256A58AEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_256A58B04()
{
}

uint64_t LLMDraftModelAssetMetadata.ANEExtendInfo.type.getter()
{
  return sub_256A4A370();
}

uint64_t LLMDraftModelAssetMetadata.ANEExtendInfo.ctxLen.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t LLMDraftModelAssetMetadata.ANEExtendInfo.seqLen.getter()
{
  return *(void *)(v0 + 24);
}

ModelCatalog::LLMDraftModelAssetMetadata::ANEExtendInfo __swiftcall LLMDraftModelAssetMetadata.ANEExtendInfo.init(type:ctxLen:seqLen:)(Swift::String type, Swift::Int ctxLen, Swift::Int seqLen)
{
  *uint64_t v3 = type;
  v3[1]._uint64_t countAndFlagsBits = ctxLen;
  v3[1]._object = (void *)seqLen;
  result.type = type;
  result.seqLen = seqLen;
  result.ctxLen = ctxLen;
  return result;
}

uint64_t sub_256A58B5C()
{
  sub_256A6EAB8();
  sub_256B3FCD0();
  sub_256A4AC50();
  if (v0 >= 3) {
    return 3;
  }
  else {
    return v0;
  }
}

uint64_t sub_256A58BA0(char a1)
{
  if (!a1) {
    return sub_256A6E7E0();
  }
  if (a1 == 1) {
    return 0x6E656C5F787463;
  }
  return 0x6E656C5F716573;
}

uint64_t sub_256A58BE4(char *a1, char *a2)
{
  return sub_256B02F14(*a1, *a2);
}

uint64_t sub_256A58BF0()
{
  return sub_256A55E34();
}

uint64_t sub_256A58BF8()
{
  return sub_256A86E68();
}

uint64_t sub_256A58C00()
{
  return sub_256A56318();
}

uint64_t sub_256A58C08@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_256A58B5C();
  *a1 = result;
  return result;
}

uint64_t sub_256A58C38()
{
  char v1 = sub_256A6E860();
  uint64_t result = sub_256A58BA0(v1);
  uint64_t *v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t sub_256A58C60()
{
  return sub_256A58BA0(*v0);
}

uint64_t sub_256A58C68@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_256A58B9C();
  *a1 = result;
  return result;
}

void sub_256A58C90(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_256A58C9C(uint64_t a1)
{
  unint64_t v2 = sub_256A5F9B0();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A58CD8(uint64_t a1)
{
  unint64_t v2 = sub_256A5F9B0();

  return MEMORY[0x270FA00B8](a1, v2);
}

void LLMDraftModelAssetMetadata.ANEExtendInfo.encode(to:)()
{
  sub_256A4A878();
  unint64_t v2 = v1;
  sub_256A39D2C(&qword_269F78FD0);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v3);
  sub_256A4A7CC();
  sub_256A39D70(v2, v2[3]);
  sub_256A5F9B0();
  sub_256B3FF90();
  sub_256A6F0E4();
  sub_256B3FE20();
  if (!v0)
  {
    sub_256A6EA20();
    sub_256A6EA20();
  }
  uint64_t v4 = sub_256A6ED80();
  v5(v4);
  sub_256A6ECF0();
  sub_256A4A890();
}

void LLMDraftModelAssetMetadata.ANEExtendInfo.init(from:)()
{
  sub_256A4A878();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  sub_256A39D2C(&qword_269F78FE0);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v5);
  sub_256A6E86C();
  sub_256A5F9B0();
  sub_256A6EC58();
  if (v0)
  {
    sub_256A39DB4(v2);
  }
  else
  {
    uint64_t v6 = sub_256B3FD50();
    uint64_t v8 = v7;
    swift_bridgeObjectRetain();
    uint64_t v11 = sub_256B3FD80();
    uint64_t v9 = sub_256B3FD80();
    sub_256A6E550();
    v10();
    *uint64_t v4 = v6;
    v4[1] = v8;
    v4[2] = v11;
    v4[3] = v9;
    sub_256A39DB4(v2);
    swift_bridgeObjectRelease();
  }
  sub_256A6E988();
  sub_256A4A890();
}

void sub_256A58FE8()
{
}

void sub_256A59000()
{
}

uint64_t LLMDraftModelAssetMetadata.DeviceSpecialTokensMap.startPromptTokenStr.getter()
{
  return sub_256A4A370();
}

uint64_t LLMDraftModelAssetMetadata.DeviceSpecialTokensMap.endPromptToken.getter()
{
  return sub_256A4A370();
}

uint64_t LLMDraftModelAssetMetadata.DeviceSpecialTokensMap.chatRoleSystem.getter()
{
  return sub_256A4A370();
}

uint64_t LLMDraftModelAssetMetadata.DeviceSpecialTokensMap.chatRoleUser.getter()
{
  return sub_256A4A370();
}

uint64_t LLMDraftModelAssetMetadata.DeviceSpecialTokensMap.chatRoleAssistant.getter()
{
  return sub_256A4A370();
}

uint64_t LLMDraftModelAssetMetadata.DeviceSpecialTokensMap.chatComponentTurnend.getter()
{
  return sub_256A4A370();
}

uint64_t LLMDraftModelAssetMetadata.DeviceSpecialTokensMap.chatRoleSystemDefault.getter()
{
  return sub_256A4A370();
}

uint64_t LLMDraftModelAssetMetadata.DeviceSpecialTokensMap.stopTokenInt.getter()
{
  return *(void *)(v0 + 144);
}

uint64_t LLMDraftModelAssetMetadata.DeviceSpecialTokensMap.stopTokenStr.getter()
{
  return *(void *)(v0 + 160);
}

uint64_t sub_256A59170()
{
  return sub_256A5BE10();
}

uint64_t sub_256A59194(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_256B02C8C(*a1, *a2);
}

uint64_t sub_256A591A0()
{
  return sub_256A55D98();
}

uint64_t sub_256A591D0(uint64_t a1)
{
  return sub_256A86D60(a1, *v1);
}

uint64_t sub_256A591D8()
{
  return sub_256A56100();
}

uint64_t sub_256A59208@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_256A5BE10();
  *a1 = result;
  return result;
}

void sub_256A59240()
{
  char v1 = sub_256A6E860();
  sub_256A5BE60(v1);
  void *v0 = v2;
  v0[1] = v3;
}

void sub_256A59268()
{
  sub_256A5BF70(*v0);
}

uint64_t sub_256A59284@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_256A59170();
  *a1 = result;
  return result;
}

void sub_256A592AC(unsigned char *a1@<X8>)
{
  *a1 = 11;
}

uint64_t sub_256A592B8(uint64_t a1)
{
  unint64_t v2 = sub_256A5F9FC();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A592F4(uint64_t a1)
{
  unint64_t v2 = sub_256A5F9FC();

  return MEMORY[0x270FA00B8](a1, v2);
}

void LLMDraftModelAssetMetadata.DeviceSpecialTokensMap.encode(to:)()
{
}

void LLMDraftModelAssetMetadata.DeviceSpecialTokensMap.init(from:)()
{
}

void sub_256A593A8()
{
}

void sub_256A593C0()
{
}

uint64_t LLMDraftModelAssetMetadata.DraftMetadata.draftIsAdaptive.getter()
{
  return *(unsigned __int8 *)(v0 + 9);
}

uint64_t LLMDraftModelAssetMetadata.DraftMetadata.draftSoftMatchTolerance.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t LLMDraftModelAssetMetadata.DraftMetadata.draftUseRejectionSampling.getter()
{
  return *(unsigned __int8 *)(v0 + 57);
}

uint64_t LLMDraftModelAssetMetadata.DraftMetadata.draftEarlyReturn.getter()
{
  return *(unsigned __int8 *)(v0 + 58);
}

uint64_t LLMDraftModelAssetMetadata.DraftMetadata.draftEarlyReturnProbabilityThreshold.getter()
{
  return *(void *)(v0 + 64);
}

uint64_t sub_256A59418@<X0>(uint64_t result@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, int a10, uint64_t a11, char a12)
{
  *(void *)a9 = result;
  *(unsigned char *)(a9 + 8) = a2 & 1;
  *(unsigned char *)(a9 + 9) = a3;
  *(void *)(a9 + 16) = a4;
  *(unsigned char *)(a9 + 24) = a5 & 1;
  *(void *)(a9 + 32) = a6;
  *(unsigned char *)(a9 + 40) = a7 & 1;
  *(void *)(a9 + 48) = a8;
  *(unsigned char *)(a9 + 56) = a10 & 1;
  *(_WORD *)(a9 + 57) = *(_WORD *)((char *)&a10 + 1);
  *(void *)(a9 + 64) = a11;
  *(unsigned char *)(a9 + 72) = a12 & 1;
  return result;
}

uint64_t sub_256A59470()
{
  sub_256A6E890();
  sub_256A4AC50();
  if (v0 >= 8) {
    return 8;
  }
  else {
    return v0;
  }
}

uint64_t sub_256A594A0()
{
  return sub_256A59470();
}

unint64_t sub_256A594C0()
{
  unint64_t result = sub_256A6ED3C();
  switch(v1)
  {
    case 1:
    case 2:
      unint64_t result = sub_256A6E9B0(17);
      break;
    case 3:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 4:
      unint64_t result = 0xD000000000000014;
      break;
    case 5:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 6:
      unint64_t result = 0xD000000000000012;
      break;
    case 7:
      unint64_t result = 0xD000000000000028;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_256A595B0()
{
  unint64_t result = sub_256A6ED3C();
  switch(v1)
  {
    case 1:
    case 2:
      unint64_t result = sub_256A6E9B0(17);
      break;
    case 3:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 4:
      unint64_t result = 0xD000000000000014;
      break;
    case 5:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 6:
      unint64_t result = 0xD000000000000012;
      break;
    case 7:
      unint64_t result = 0xD000000000000028;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_256A596A0()
{
  return sub_256A55D98();
}

uint64_t sub_256A596D0()
{
  return sub_256A56100();
}

uint64_t sub_256A59700@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_256A59470();
  *a1 = result;
  return result;
}

unint64_t sub_256A59738()
{
  sub_256A6E860();
  unint64_t result = sub_256A594C0();
  unint64_t *v0 = result;
  v0[1] = v2;
  return result;
}

unint64_t sub_256A59760()
{
  return sub_256A595B0();
}

uint64_t sub_256A5977C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_256A594A0();
  *a1 = result;
  return result;
}

uint64_t sub_256A597A4(uint64_t a1)
{
  unint64_t v2 = sub_256A5FA48();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A597E0(uint64_t a1)
{
  unint64_t v2 = sub_256A5FA48();

  return MEMORY[0x270FA00B8](a1, v2);
}

void LLMDraftModelAssetMetadata.DraftMetadata.encode(to:)()
{
}

void sub_256A59858()
{
  sub_256A4A878();
  uint64_t v10 = v2;
  uint64_t v4 = v3;
  uint64_t v6 = sub_256A39D2C(v5);
  sub_256A49FB8();
  uint64_t v8 = v7;
  MEMORY[0x270FA5388](v9);
  sub_256A6E704();
  sub_256A39D70(v4, v4[3]);
  v10();
  sub_256B3FF90();
  sub_256A6F0E4();
  sub_256B3FE00();
  if (!v0)
  {
    sub_256A6ECD4();
    sub_256B3FE00();
    sub_256B3FDF0();
    sub_256B3FE00();
    sub_256A6ECD4();
    sub_256A6ECD4();
    sub_256B3FDF0();
  }
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v1, v6);
  sub_256A6ECF0();
  sub_256A4A890();
}

void LLMDraftModelAssetMetadata.DraftMetadata.init(from:)()
{
}

void sub_256A59AFC()
{
  sub_256A4A878();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v36 = sub_256A39D2C(v8);
  sub_256A49FB8();
  uint64_t v10 = v9;
  MEMORY[0x270FA5388](v11);
  sub_256A4A7E4();
  sub_256A39D70(v5, v5[3]);
  v3();
  uint64_t v34 = v1;
  sub_256B3FF80();
  if (v0)
  {
    uint64_t v17 = (uint64_t)v5;
  }
  else
  {
    uint64_t v12 = sub_256B3FD30();
    char v14 = v13;
    uint64_t v15 = v10;
    char v16 = sub_256B3FD10();
    uint64_t v17 = (uint64_t)v5;
    uint64_t v18 = sub_256B3FD30();
    char v33 = v19;
    uint64_t v20 = sub_256B3FD20();
    char v31 = v21;
    uint64_t v32 = v20;
    uint64_t v22 = sub_256B3FD30();
    char v29 = v23;
    uint64_t v30 = v22;
    char v28 = sub_256B3FD10();
    char v27 = sub_256B3FD10();
    uint64_t v24 = sub_256B3FD20();
    uint64_t v25 = v34;
    char v35 = v26;
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v25, v36);
    *(void *)uint64_t v7 = v12;
    *(unsigned char *)(v7 + 8) = v14 & 1;
    *(unsigned char *)(v7 + 9) = v16;
    *(void *)(v7 + 16) = v18;
    *(unsigned char *)(v7 + 24) = v33 & 1;
    *(void *)(v7 + 32) = v32;
    *(unsigned char *)(v7 + 40) = v31 & 1;
    *(void *)(v7 + 48) = v30;
    *(unsigned char *)(v7 + 56) = v29 & 1;
    *(unsigned char *)(v7 + 57) = v28;
    *(unsigned char *)(v7 + 58) = v27;
    *(void *)(v7 + 64) = v24;
    *(unsigned char *)(v7 + 72) = v35 & 1;
  }
  sub_256A39DB4(v17);
  sub_256A6E988();
  sub_256A4A890();
}

void sub_256A59DE0()
{
}

void sub_256A59DF8()
{
}

uint64_t LLMDraftModelAssetMetadata.modelType.getter()
{
  return sub_256A4A370();
}

uint64_t LLMDraftModelAssetMetadata.modelConfig.getter()
{
  return sub_256A4A370();
}

uint64_t LLMDraftModelAssetMetadata.backboneSignature.getter()
{
  return sub_256A4A370();
}

void LLMDraftModelAssetMetadata.defaultParameters.getter(uint64_t a1@<X8>)
{
  long long v2 = *(_OWORD *)(v1 + 72);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 56);
  *(_OWORD *)(a1 + 16) = v2;
  sub_256A6EDC8((__n128 *)a1, *(__n128 *)(v1 + 88), *(__n128 *)(v1 + 104));
}

uint64_t LLMDraftModelAssetMetadata.specialTokensMap.getter@<X0>(uint64_t a1@<X8>)
{
  sub_256A6D7D8(v1 + 136, (uint64_t)v4, &qword_269F79018);
  sub_256A6D7D8((uint64_t)v4, a1, &qword_269F79018);
  return sub_256A60128((uint64_t)v4);
}

void *LLMDraftModelAssetMetadata.init(modelType:modelConfig:backboneSignature:e5FunctionNameMap:defaultParameters:specialTokensMap:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_256A6EBB8();
  uint64_t v16 = v15;
  __dst = v17;
  long long v24 = v18[1];
  long long v25 = *v18;
  long long v22 = v18[3];
  long long v23 = v18[2];
  uint64_t v19 = *((void *)v18 + 8);
  char v20 = *((unsigned char *)v18 + 72);
  sub_256A6D7D8(a9, (uint64_t)v27, &qword_269F79018);
  __src[0] = v16;
  __src[1] = v14;
  __src[2] = v13;
  __src[3] = v12;
  __src[4] = v11;
  __src[5] = v10;
  *(_OWORD *)&__src[7] = v25;
  *(_OWORD *)&__src[9] = v24;
  *(_OWORD *)&__src[11] = v23;
  *(_OWORD *)&__src[13] = v22;
  __src[6] = v9;
  __src[15] = v19;
  LOBYTE(__src[16]) = v20;
  sub_256A6D7D8((uint64_t)v27, (uint64_t)&__src[17], &qword_269F79018);
  return memcpy(__dst, __src, 0x131uLL);
}

uint64_t sub_256A5A000()
{
  sub_256A6EAB8();
  sub_256B3FCD0();
  sub_256A4AC50();
  if (v0 >= 6) {
    return 6;
  }
  else {
    return v0;
  }
}

void sub_256A5A044()
{
  sub_256A6E52C();
  switch(v0)
  {
    case 1:
      sub_256A6E55C();
      break;
    case 3:
      sub_256A4A6DC();
      break;
    default:
      return;
  }
}

void sub_256A5A0D8()
{
  sub_256A6E52C();
  switch(v0)
  {
    case 1:
      sub_256A6E55C();
      break;
    case 3:
      sub_256A4A6DC();
      break;
    default:
      return;
  }
}

uint64_t sub_256A5A16C(unsigned __int8 *a1, char *a2)
{
  return sub_256B03000(*a1, *a2);
}

uint64_t sub_256A5A178()
{
  return sub_256A55DEC();
}

uint64_t sub_256A5A1A8(uint64_t a1)
{
  return sub_256A86EEC(a1, *v1);
}

uint64_t sub_256A5A1B0()
{
  return sub_256A56054();
}

uint64_t sub_256A5A1E0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_256A5A000();
  *a1 = result;
  return result;
}

void sub_256A5A210()
{
  sub_256A6E860();
  sub_256A5A044();
  void *v0 = v1;
  v0[1] = v2;
}

void sub_256A5A238()
{
}

uint64_t sub_256A5A240@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_256A5A040();
  *a1 = result;
  return result;
}

void sub_256A5A268(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_256A5A274(uint64_t a1)
{
  unint64_t v2 = sub_256A5FA94();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A5A2B0(uint64_t a1)
{
  unint64_t v2 = sub_256A5FA94();

  return MEMORY[0x270FA00B8](a1, v2);
}

void LLMDraftModelAssetMetadata.encode(to:)()
{
  sub_256A4A878();
  uint64_t v3 = v2;
  sub_256A39D2C(&qword_269F79020);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v4);
  sub_256A4A500();
  uint64_t v15 = *(void *)(v0 + 48);
  uint64_t v6 = *(void *)(v0 + 64);
  uint64_t v7 = *(void *)(v0 + 72);
  uint64_t v13 = *(void *)(v0 + 88);
  uint64_t v14 = *(void *)(v0 + 56);
  uint64_t v11 = *(void *)(v0 + 104);
  uint64_t v12 = *(void *)(v0 + 96);
  uint64_t v10 = *(void *)(v0 + 112);
  uint64_t v8 = *(void *)(v0 + 80);
  uint64_t v9 = *(void *)(v0 + 120);
  char v19 = *(unsigned char *)(v0 + 128);
  sub_256A6D7D8(v0 + 136, (uint64_t)v18, &qword_269F79018);
  sub_256A6F0F0(v3);
  sub_256A5FA94();
  sub_256B3FF90();
  LOBYTE(v16[0]) = 0;
  sub_256B3FE20();
  if (!v1)
  {
    sub_256A6ECFC(1);
    sub_256B3FDD0();
    sub_256A6ECFC(2);
    sub_256B3FE20();
    v16[0] = v15;
    sub_256A39D2C(&qword_269F79030);
    sub_256A5FBC4((uint64_t)&unk_269F79038);
    sub_256B3FE10();
    v16[0] = v14;
    v16[1] = v6;
    v16[2] = v7;
    v16[3] = v8;
    v16[4] = v13;
    v16[5] = v12;
    v16[6] = v11;
    v16[7] = v10;
    v16[8] = v9;
    char v17 = v19;
    sub_256A5FB2C();
    sub_256A6EEE0();
    sub_256A6D7D8((uint64_t)v18, (uint64_t)v16, &qword_269F79018);
    sub_256A5FB78();
    sub_256A6EEE0();
  }
  sub_256A6E470();
  v5();
  sub_256A4A890();
}

void LLMDraftModelAssetMetadata.init(from:)()
{
  sub_256A4A878();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_256A39D2C(&qword_269F79058);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v6);
  sub_256A6EB94();
  uint64_t v39 = (uint64_t)v3;
  sub_256A39D70(v3, v1);
  sub_256A5FA94();
  sub_256A6EE74();
  if (v0)
  {
    sub_256A39DB4((uint64_t)v3);
  }
  else
  {
    uint64_t v38 = v5;
    uint64_t v7 = sub_256B3FD50();
    uint64_t v9 = v8;
    v44[0] = v7;
    v44[1] = v8;
    swift_bridgeObjectRetain();
    uint64_t v37 = sub_256B3FD00();
    v44[2] = v37;
    v44[3] = v10;
    LOBYTE(v42[0]) = 2;
    uint64_t v11 = v10;
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_256A6EE0C();
    uint64_t v34 = v12;
    uint64_t v35 = v11;
    v44[4] = v12;
    v44[5] = v13;
    uint64_t v14 = v13;
    sub_256A39D2C(&qword_269F79030);
    LOBYTE(v41[0]) = 3;
    unint64_t v15 = sub_256A5FBC4((uint64_t)&unk_269F79060);
    uint64_t v36 = v14;
    swift_bridgeObjectRetain();
    sub_256A6E924();
    if (v15)
    {
      uint64_t v16 = sub_256A6E634();
      v17(v16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v18 = 0;
    }
    else
    {
      uint64_t v19 = v42[0];
      v44[6] = v42[0];
      LOBYTE(v41[0]) = 4;
      unint64_t v20 = sub_256A5FC78();
      swift_bridgeObjectRetain();
      sub_256A6E924();
      if (!v20)
      {
        uint64_t v32 = v42[1];
        uint64_t v33 = v42[0];
        v44[7] = v42[0];
        v44[8] = v42[1];
        uint64_t v30 = v42[3];
        uint64_t v31 = v42[2];
        v44[9] = v42[2];
        v44[10] = v42[3];
        uint64_t v28 = v42[5];
        uint64_t v29 = v42[4];
        v44[11] = v42[4];
        v44[12] = v42[5];
        uint64_t v26 = v42[7];
        uint64_t v27 = v42[6];
        v44[13] = v42[6];
        v44[14] = v42[7];
        uint64_t v25 = v42[8];
        v44[15] = v42[8];
        char v45 = v42[9];
        LOBYTE(v44[16]) = v42[9];
        sub_256A5FCC4();
        sub_256A6EF44();
        uint64_t v23 = sub_256A6E634();
        v24(v23);
        sub_256A6D7D8((uint64_t)&v43, (uint64_t)v40, &qword_269F79018);
        sub_256A6D7D8((uint64_t)v40, (uint64_t)&v44[17], &qword_269F79018);
        v41[0] = v7;
        v41[1] = v9;
        _OWORD v41[2] = v37;
        v41[3] = v35;
        v41[4] = v34;
        v41[5] = v36;
        v41[6] = v19;
        v41[7] = v33;
        v41[8] = v32;
        v41[9] = v31;
        v41[10] = v30;
        v41[11] = v29;
        v41[12] = v28;
        v41[13] = v27;
        v41[14] = v26;
        v41[15] = v25;
        LOBYTE(v41[16]) = v45;
        sub_256A6D7D8((uint64_t)v40, (uint64_t)&v41[17], &qword_269F79018);
        sub_256A5FD10(v41);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        memcpy(v38, v41, 0x131uLL);
        sub_256A39DB4((uint64_t)v3);
        memcpy(v42, v44, 0x131uLL);
        sub_256A5FE1C(v42);
        goto LABEL_6;
      }
      uint64_t v21 = sub_256A6E634();
      v22(v21);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v18 = 1;
    }
    sub_256A39DB4(v39);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v18) {
      swift_bridgeObjectRelease();
    }
  }
LABEL_6:
  sub_256A6E988();
  sub_256A4A890();
}

void sub_256A5AA7C()
{
}

void sub_256A5AA94()
{
}

void AssetBackedLLMDraftModelBase.init(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  sub_256A6E6EC();
  a43 = v46;
  a44 = v47;
  sub_256A6E670();
  sub_256A6E3CC(&a12);
  sub_256A6EB44();
  BOOL v48 = v48 && v44 == 0xEE006C65646F4D74;
  if (!v48)
  {
    sub_256A6EA60();
    if ((sub_256B3FEA0() & 1) == 0)
    {
      sub_256A6E6C0();
      sub_256A6E5D4();
      swift_bridgeObjectRelease();
      sub_256A546F8();
      uint64_t v53 = sub_256A6E4C0();
      sub_256A6E834(v53, v54);
      sub_256A6E6DC(v56, v55 + 1);
      goto LABEL_11;
    }
  }
  if (!a21 || !*(void *)(a21 + 16))
  {
    sub_256A546F8();
    uint64_t v49 = sub_256A6E4C0();
    sub_256A6E834(v49, v50);
    sub_256A6E598(v51, v52);
LABEL_11:
    swift_willThrow();
    sub_256A6DFC8((uint64_t)&a12);
    goto LABEL_12;
  }
  sub_256A6E3CC(v45);
LABEL_12:
  sub_256A6E7C8();
}

#error "256A5ABDC: call analysis failed (funcsize=6)"

void sub_256A5ABE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t LLMModelAssetMetadata.ANEExtendInfo.type.getter()
{
  return sub_256A4A370();
}

uint64_t LLMModelAssetMetadata.ANEExtendInfo.adapterType.getter()
{
  return sub_256A4A370();
}

uint64_t LLMModelAssetMetadata.ANEExtendInfo.ctxLen.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t LLMModelAssetMetadata.ANEExtendInfo.seqLen.getter()
{
  return *(void *)(v0 + 40);
}

void __swiftcall LLMModelAssetMetadata.ANEExtendInfo.init(type:adapterType:ctxLen:seqLen:)(ModelCatalog::LLMModelAssetMetadata::ANEExtendInfo *__return_ptr retstr, Swift::String type, Swift::String adapterType, Swift::Int ctxLen, Swift::Int seqLen)
{
  retstr->type = type;
  retstr->adapterType = adapterType;
  retstr->ctxLen = ctxLen;
  retstr->seqLen = seqLen;
}

uint64_t sub_256A5AC78()
{
  sub_256A6EAB8();
  sub_256B3FCD0();
  sub_256A4AC50();
  if (v0 >= 4) {
    return 4;
  }
  else {
    return v0;
  }
}

uint64_t sub_256A5ACBC(char a1)
{
  uint64_t result = 1701869940;
  switch(a1)
  {
    case 1:
      uint64_t result = sub_256A6E960();
      break;
    case 2:
      uint64_t result = sub_256A6EAC4();
      break;
    case 3:
      uint64_t result = 0x6E656C5F716573;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_256A5AD20(char a1)
{
  uint64_t result = 1701869940;
  switch(a1)
  {
    case 1:
      uint64_t result = sub_256A6E960();
      break;
    case 2:
      uint64_t result = sub_256A6EAC4();
      break;
    case 3:
      uint64_t result = 0x6E656C5F716573;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_256A5AD84(unsigned __int8 *a1, char *a2)
{
  return sub_256B02CBC(*a1, *a2);
}

uint64_t sub_256A5AD90()
{
  return sub_256A55EC4();
}

uint64_t sub_256A5ADC0()
{
  return sub_256A86D90();
}

uint64_t sub_256A5ADC8()
{
  return sub_256A561F0();
}

uint64_t sub_256A5ADF8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_256A5AC78();
  *a1 = result;
  return result;
}

uint64_t sub_256A5AE28()
{
  char v1 = sub_256A6E860();
  uint64_t result = sub_256A5ACBC(v1);
  uint64_t *v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t sub_256A5AE50()
{
  return sub_256A5AD20(*v0);
}

uint64_t sub_256A5AE58@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_256A5ACB8();
  *a1 = result;
  return result;
}

void sub_256A5AE80(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_256A5AE8C(uint64_t a1)
{
  unint64_t v2 = sub_256A5FF2C();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A5AEC8(uint64_t a1)
{
  unint64_t v2 = sub_256A5FF2C();

  return MEMORY[0x270FA00B8](a1, v2);
}

void LLMModelAssetMetadata.ANEExtendInfo.encode(to:)()
{
  sub_256A4A878();
  unint64_t v2 = v1;
  sub_256A39D2C(&qword_269F79080);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v3);
  sub_256A4A7CC();
  sub_256A39D70(v2, v2[3]);
  sub_256A5FF2C();
  sub_256A6ECB8();
  sub_256A6F0E4();
  sub_256B3FE20();
  if (!v0)
  {
    sub_256B3FE20();
    sub_256A6EA20();
    sub_256A6EA20();
  }
  uint64_t v4 = sub_256A6ED80();
  v5(v4);
  sub_256A6ECF0();
  sub_256A4A890();
}

void LLMModelAssetMetadata.ANEExtendInfo.init(from:)()
{
  sub_256A4A878();
  unint64_t v2 = v1;
  uint64_t v4 = v3;
  sub_256A39D2C(&qword_269F79090);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v5);
  sub_256A4A500();
  sub_256A39D70(v2, v2[3]);
  sub_256A5FF2C();
  sub_256B3FF80();
  if (v0)
  {
    sub_256A39DB4((uint64_t)v2);
  }
  else
  {
    uint64_t v6 = sub_256B3FD50();
    uint64_t v8 = v7;
    uint64_t v17 = v6;
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_256B3FD50();
    uint64_t v11 = v10;
    uint64_t v15 = v9;
    swift_bridgeObjectRetain();
    uint64_t v16 = v11;
    uint64_t v14 = sub_256B3FD80();
    uint64_t v12 = sub_256B3FD80();
    sub_256A6E550();
    v13();
    *uint64_t v4 = v17;
    v4[1] = v8;
    v4[2] = v15;
    v4[3] = v16;
    v4[4] = v14;
    v4[5] = v12;
    sub_256A39DB4((uint64_t)v2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_256A6E988();
  sub_256A4A890();
}

void sub_256A5B2B0()
{
}

void sub_256A5B2C8()
{
}

uint64_t LLMModelAssetMetadata.DeviceLocalization.localeInstruction.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LLMModelAssetMetadata.DeviceLocalization.chatRoleSystem.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LLMModelAssetMetadata.DeviceLocalization.chatRoleSystemDefault.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LLMModelAssetMetadata.DeviceLocalization.chatRoleAssistant.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LLMModelAssetMetadata.DeviceLocalization.chatRoleUser.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t _s12ModelCatalog23LLMAdapterAssetMetadataV18DeviceLocalizationV17localeInstruction0hI17InjectionLocation14chatRoleSystem0lmN7Default0lM9Assistant0lM4User0L16ComponentTurnendAESDyS2SGSg_A6NtcfC_0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  *a8 = result;
  a8[1] = a2;
  a8[2] = a3;
  a8[3] = a4;
  a8[4] = a5;
  a8[5] = a6;
  a8[6] = a7;
  return result;
}

uint64_t sub_256A5B328()
{
  sub_256A6E890();
  sub_256A4AC50();
  if (v0 >= 7) {
    return 7;
  }
  else {
    return v0;
  }
}

uint64_t sub_256A5B358()
{
  return sub_256A5B328();
}

unint64_t sub_256A5B378(char a1)
{
  unint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000025;
      break;
    case 2:
      unint64_t result = sub_256A6E6AC();
      break;
    case 3:
      unint64_t result = 0xD000000000000018;
      break;
    case 4:
      unint64_t result = 0xD000000000000013;
      break;
    case 5:
      unint64_t result = sub_256A6E480();
      break;
    case 6:
      unint64_t result = 0xD000000000000016;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_256A5B430(char a1)
{
  unint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000025;
      break;
    case 2:
      unint64_t result = sub_256A6E6AC();
      break;
    case 3:
      unint64_t result = 0xD000000000000018;
      break;
    case 4:
      unint64_t result = 0xD000000000000013;
      break;
    case 5:
      unint64_t result = sub_256A6E480();
      break;
    case 6:
      unint64_t result = 0xD000000000000016;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_256A5B4E8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_256B02CA4(*a1, *a2);
}

uint64_t sub_256A5B4F4()
{
  return sub_256A55DEC();
}

uint64_t sub_256A5B524(uint64_t a1)
{
  return sub_256A86D78(a1, *v1);
}

uint64_t sub_256A5B52C()
{
  return sub_256A56054();
}

uint64_t sub_256A5B55C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_256A5B328();
  *a1 = result;
  return result;
}

unint64_t sub_256A5B594()
{
  char v1 = sub_256A6E860();
  unint64_t result = sub_256A5B378(v1);
  unint64_t *v0 = result;
  v0[1] = v3;
  return result;
}

unint64_t sub_256A5B5BC()
{
  return sub_256A5B430(*v0);
}

uint64_t sub_256A5B5D8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_256A5B358();
  *a1 = result;
  return result;
}

uint64_t sub_256A5B600(uint64_t a1)
{
  unint64_t v2 = sub_256A5FF78();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A5B63C(uint64_t a1)
{
  unint64_t v2 = sub_256A5FF78();

  return MEMORY[0x270FA00B8](a1, v2);
}

void LLMModelAssetMetadata.DeviceLocalization.encode(to:)()
{
}

void sub_256A5B6B4()
{
  sub_256A4A878();
  uint64_t v7 = v1;
  unint64_t v3 = v2;
  sub_256A39D2C(v4);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v5);
  sub_256A4A7CC();
  sub_256A39D70(v3, v3[3]);
  v7();
  sub_256B3FF90();
  sub_256A39D2C(&qword_269F78E08);
  sub_256A5F470((uint64_t)&unk_269F78F38);
  sub_256B3FE10();
  if (!v0)
  {
    sub_256A6E39C(1);
    sub_256A6E39C(2);
    sub_256A6E39C(3);
    sub_256A6E39C(4);
    sub_256A6E39C(5);
    sub_256A6E39C(6);
  }
  sub_256A4A46C();
  v6();
  sub_256A4A890();
}

void LLMModelAssetMetadata.DeviceLocalization.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_256A5B8E0(a1, (uint64_t)&unk_269F790A8, (uint64_t)sub_256A5FF78, (uint64_t)&unk_27060D8A0, a5, a6, a7, a8, vars0, vars8);
}

void sub_256A5B8E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_256A4A878();
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  sub_256A39D2C(v17);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v18);
  sub_256A4A7E4();
  sub_256A39D70(v14, v14[3]);
  v12();
  sub_256B3FF80();
  if (v10)
  {
    sub_256A39DB4((uint64_t)v14);
  }
  else
  {
    sub_256A39D2C(&qword_269F78E08);
    sub_256A5F470((uint64_t)&unk_269F78F48);
    sub_256B3FD40();
    sub_256A6EF00(1);
    sub_256A6E424();
    sub_256A6EF00(2);
    sub_256A6E424();
    swift_bridgeObjectRetain();
    sub_256A6E424();
    swift_bridgeObjectRetain();
    sub_256A6E424();
    sub_256A6EF00(5);
    sub_256A6E424();
    sub_256A6EF00(6);
    sub_256A6E424();
    sub_256A6E470();
    v19();
    swift_bridgeObjectRetain();
    void *v16 = a10;
    v16[1] = a10;
    v16[2] = a10;
    v16[3] = a10;
    v16[4] = a10;
    v16[5] = a10;
    v16[6] = a10;
    sub_256A6EB50();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_256A4A890();
}

void sub_256A5BD5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_256A5BD74()
{
}

__n128 sub_256A5BD90@<Q0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, long long a10, long long a11, long long a12, long long a13, __n128 a14, uint64_t a15, char a16, uint64_t a17, char a18)
{
  __n128 result = a14;
  *(void *)a9 = a1;
  *(unsigned char *)(a9 + 8) = a2 & 1;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(void *)(a9 + 48) = a7;
  *(unsigned char *)(a9 + 56) = a8 & 1;
  *(_OWORD *)(a9 + 64) = a10;
  *(_OWORD *)(a9 + 80) = a11;
  *(_OWORD *)(a9 + 96) = a12;
  *(_OWORD *)(a9 + 112) = a13;
  *(__n128 *)(a9 + 128) = a14;
  *(void *)(a9 + 144) = a15;
  *(unsigned char *)(a9 + 152) = a16 & 1;
  *(void *)(a9 + 160) = a17;
  *(unsigned char *)(a9 + 168) = a18 & 1;
  return result;
}

uint64_t sub_256A5BE10()
{
  sub_256A6E890();
  sub_256A4AC50();
  if (v0 >= 0xB) {
    return 11;
  }
  else {
    return v0;
  }
}

uint64_t sub_256A5BE40()
{
  return sub_256A5BE10();
}

void sub_256A5BE60(char a1)
{
  switch(a1)
  {
    case 1:
    case 3:
    case 6:
    case 7:
    case 8:
      sub_256A4A6DC();
      break;
    case 2:
    case 4:
      sub_256A6E6AC();
      break;
    case 5:
      sub_256A6E480();
      break;
    default:
      return;
  }
}

void sub_256A5BF70(char a1)
{
  switch(a1)
  {
    case 1:
    case 3:
    case 6:
    case 7:
    case 8:
      sub_256A4A6DC();
      break;
    case 2:
    case 4:
      sub_256A6E6AC();
      break;
    case 5:
      sub_256A6E480();
      break;
    default:
      return;
  }
}

uint64_t sub_256A5C080@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_256A5BE10();
  *a1 = result;
  return result;
}

uint64_t sub_256A5C0B8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_256A5BE40();
  *a1 = result;
  return result;
}

uint64_t sub_256A5C0E0(uint64_t a1)
{
  unint64_t v2 = sub_256A5FFC4();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A5C11C(uint64_t a1)
{
  unint64_t v2 = sub_256A5FFC4();

  return MEMORY[0x270FA00B8](a1, v2);
}

void LLMModelAssetMetadata.DeviceSpecialTokensMap.encode(to:)()
{
}

void sub_256A5C194()
{
  sub_256A4A878();
  uint64_t v8 = v1;
  unint64_t v3 = v2;
  sub_256A39D2C(v4);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v5);
  sub_256A6E704();
  uint64_t v6 = sub_256A6F0F0(v3);
  v8(v6);
  sub_256A6F090();
  sub_256B3FF90();
  sub_256A6F0E4();
  sub_256B3FE00();
  if (!v0)
  {
    sub_256A6E788();
    sub_256A6E788();
    sub_256A6EE40();
    sub_256A6E788();
    sub_256A6E788();
    sub_256A6E788();
    sub_256A6E788();
    sub_256A6E788();
    sub_256A6EE40();
    sub_256A6EE40();
  }
  sub_256A4A46C();
  v7();
  sub_256A6E988();
  sub_256A4A890();
}

void LLMModelAssetMetadata.DeviceSpecialTokensMap.init(from:)()
{
}

void sub_256A5C484()
{
  sub_256A4A878();
  unint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v49 = v5;
  sub_256A39D2C(v6);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v7);
  sub_256A4A7E4();
  uint64_t v82 = (uint64_t)v4;
  uint64_t v8 = sub_256A6F0F0(v4);
  v2(v8);
  sub_256B3FF80();
  if (v0)
  {
    sub_256A39DB4((uint64_t)v4);
  }
  else
  {
    uint64_t v9 = sub_256B3FD30();
    char v11 = v10;
    char v81 = v10 & 1;
    uint64_t v12 = sub_256A6E818();
    uint64_t v14 = v13;
    uint64_t v42 = v12;
    sub_256A6EBEC(v13, 2);
    swift_bridgeObjectRetain();
    uint64_t v41 = sub_256A6E818();
    sub_256A6EBEC(v15, 3);
    uint64_t v48 = v16;
    swift_bridgeObjectRetain();
    uint64_t v40 = sub_256B3FD30();
    char v80 = v17 & 1;
    char v39 = v17;
    uint64_t v38 = sub_256B3FD00();
    sub_256A6EBEC(v18, 5);
    uint64_t v47 = v19;
    swift_bridgeObjectRetain();
    uint64_t v37 = sub_256A6E818();
    sub_256A6EBEC(v20, 6);
    uint64_t v46 = v21;
    swift_bridgeObjectRetain();
    uint64_t v36 = sub_256A6E818();
    sub_256A6EBEC(v22, 7);
    uint64_t v45 = v23;
    swift_bridgeObjectRetain();
    uint64_t v35 = sub_256A6E818();
    sub_256A6EBEC(v24, 8);
    uint64_t v44 = v25;
    swift_bridgeObjectRetain();
    uint64_t v34 = sub_256A6E818();
    uint64_t v26 = v14;
    LOBYTE(v51) = 9;
    uint64_t v43 = v27;
    swift_bridgeObjectRetain();
    uint64_t v28 = sub_256B3FD30();
    LOBYTE(v14) = v29 & 1;
    char v78 = v29 & 1;
    char v75 = 10;
    uint64_t v33 = sub_256B3FD30();
    char v31 = v30;
    sub_256A6E9DC();
    v32();
    char v76 = v31 & 1;
    v50[0] = v9;
    LOBYTE(v50[1]) = v11 & 1;
    v50[2] = v42;
    v50[3] = v26;
    v50[4] = v41;
    v50[5] = v48;
    v50[6] = v40;
    LOBYTE(v50[7]) = v39 & 1;
    v50[8] = v38;
    v50[9] = v47;
    v50[10] = v37;
    v50[11] = v46;
    v50[12] = v36;
    v50[13] = v45;
    v50[14] = v35;
    v50[15] = v44;
    v50[16] = v34;
    v50[17] = v43;
    v50[18] = v28;
    LOBYTE(v50[19]) = v14;
    v50[20] = v33;
    LOBYTE(v50[21]) = v31 & 1;
    sub_256A60010((uint64_t)v50);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    memcpy(v49, v50, 0xA9uLL);
    sub_256A39DB4(v82);
    uint64_t v51 = v9;
    char v52 = v81;
    uint64_t v53 = v42;
    uint64_t v54 = v26;
    uint64_t v55 = v41;
    uint64_t v56 = v48;
    uint64_t v57 = v40;
    char v58 = v80;
    *(_DWORD *)uint64_t v59 = *(_DWORD *)v79;
    *(_DWORD *)&v59[3] = *(_DWORD *)&v79[3];
    uint64_t v60 = v38;
    uint64_t v61 = v47;
    uint64_t v62 = v37;
    uint64_t v63 = v46;
    uint64_t v64 = v36;
    uint64_t v65 = v45;
    uint64_t v66 = v35;
    uint64_t v67 = v44;
    uint64_t v68 = v34;
    uint64_t v69 = v43;
    uint64_t v70 = v28;
    char v71 = v78;
    *(_DWORD *)&v72[3] = *(_DWORD *)&v77[3];
    *(_DWORD *)uint64_t v72 = *(_DWORD *)v77;
    uint64_t v73 = v33;
    char v74 = v76;
    sub_256A6009C((uint64_t)&v51);
  }
  sub_256A6E988();
  sub_256A4A890();
}

void sub_256A5CB70()
{
}

void sub_256A5CB88()
{
}

uint64_t LLMModelAssetMetadata.modelType.getter()
{
  return sub_256A4A370();
}

uint64_t LLMModelAssetMetadata.modelConfig.getter()
{
  return sub_256A4A370();
}

uint64_t LLMModelAssetMetadata.backboneSignature.getter()
{
  return sub_256A4A370();
}

uint64_t LLMModelAssetMetadata.adapterTypeToSignatureMapping.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LLMModelAssetMetadata.adapterTypeToSymbolMapping.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LLMModelAssetMetadata.e5FunctionNameMap.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LLMModelAssetMetadata.specialTokensMap.getter@<X0>(uint64_t a1@<X8>)
{
  sub_256A6D7D8(v1 + 88, (uint64_t)v4, &qword_269F790C8);
  sub_256A6D7D8((uint64_t)v4, a1, &qword_269F790C8);
  return sub_256A60128((uint64_t)v4);
}

uint64_t LLMModelAssetMetadata.localization.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_256A6EFB4(v1[33], v1[34], v1[35], v1[36], v1[37], v1[38], v1[39], a1);
}

void *LLMModelAssetMetadata.init(modelType:contextLength:modelConfig:backboneSignature:adapterTypeToSignatureMapping:adapterTypeToSymbolMapping:e5FunctionNameMap:specialTokensMap:localization:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, long long a10, uint64_t a11, uint64_t a12, long long *a13)
{
  sub_256A6D7D8(a12, (uint64_t)v27, &qword_269F790C8);
  long long v24 = a13[1];
  long long v25 = *a13;
  long long v23 = a13[2];
  uint64_t v21 = *((void *)a13 + 6);
  *(void *)&__src[0] = a1;
  *((void *)&__src[0] + 1) = a2;
  *(void *)&__src[1] = a3;
  BYTE8(__src[1]) = a4 & 1;
  *(void *)&__src[2] = a5;
  *((void *)&__src[2] + 1) = a6;
  *(void *)&__src[3] = a7;
  *((void *)&__src[3] + 1) = a8;
  __src[4] = a10;
  *(void *)&__src[5] = a11;
  sub_256A6D7D8((uint64_t)v27, (uint64_t)&__src[5] + 8, &qword_269F790C8);
  *(_OWORD *)((char *)&__src[16] + 8) = v25;
  *(_OWORD *)((char *)&__src[17] + 8) = v24;
  *(_OWORD *)((char *)&__src[18] + 8) = v23;
  *((void *)&__src[19] + 1) = v21;
  return memcpy(a9, __src, 0x140uLL);
}

uint64_t sub_256A5CDD8()
{
  sub_256A6EAB8();
  sub_256B3FCD0();
  sub_256A4AC50();
  if (v0 >= 9) {
    return 9;
  }
  else {
    return v0;
  }
}

void sub_256A5CE1C()
{
  sub_256A6E52C();
  switch(v0)
  {
    case 1:
      sub_256A6E8D0();
      break;
    case 2:
      sub_256A6E55C();
      break;
    case 3:
    case 7:
      sub_256A6E9B0(18);
      break;
    case 4:
    case 5:
    case 6:
      sub_256A4A6DC();
      break;
    default:
      return;
  }
}

void sub_256A5CF00()
{
  sub_256A6E52C();
  switch(v0)
  {
    case 1:
      sub_256A6E8D0();
      break;
    case 2:
      sub_256A6E55C();
      break;
    case 3:
    case 7:
      sub_256A6E9B0(18);
      break;
    case 4:
    case 5:
    case 6:
      sub_256A4A6DC();
      break;
    default:
      return;
  }
}

uint64_t sub_256A5CFE4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_256B02E18(*a1, *a2);
}

uint64_t sub_256A5CFF0()
{
  return sub_256A55DEC();
}

uint64_t sub_256A5D020(uint64_t a1)
{
  return sub_256A86E50(a1, *v1);
}

uint64_t sub_256A5D028()
{
  return sub_256A56054();
}

uint64_t sub_256A5D058@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_256A5CDD8();
  *a1 = result;
  return result;
}

void sub_256A5D088()
{
  sub_256A6E860();
  sub_256A5CE1C();
  void *v0 = v1;
  v0[1] = v2;
}

void sub_256A5D0B0()
{
}

uint64_t sub_256A5D0B8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_256A5CE18();
  *a1 = result;
  return result;
}

void sub_256A5D0E0(unsigned char *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_256A5D0EC(uint64_t a1)
{
  unint64_t v2 = sub_256A602B4();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A5D128(uint64_t a1)
{
  unint64_t v2 = sub_256A602B4();

  return MEMORY[0x270FA00B8](a1, v2);
}

void LLMModelAssetMetadata.encode(to:)()
{
  sub_256A4A878();
  unint64_t v3 = v2;
  sub_256A39D2C(&qword_269F790D0);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v4);
  uint64_t v14 = v0[9];
  uint64_t v15 = v0[8];
  uint64_t v13 = v0[10];
  sub_256A6D7D8((uint64_t)(v0 + 11), (uint64_t)v17, &qword_269F790C8);
  uint64_t v6 = v0[33];
  uint64_t v7 = v0[34];
  uint64_t v11 = v0[37];
  uint64_t v12 = v0[36];
  uint64_t v10 = v0[38];
  uint64_t v8 = v0[35];
  uint64_t v9 = v0[39];
  sub_256A39D70(v3, v3[3]);
  sub_256A602B4();
  sub_256B3FF90();
  LOBYTE(v16[0]) = 0;
  sub_256B3FE20();
  if (!v1)
  {
    sub_256A6ECFC(1);
    sub_256B3FE00();
    sub_256A6ECFC(2);
    sub_256B3FDD0();
    sub_256A6ECFC(3);
    sub_256B3FE20();
    v16[0] = v15;
    sub_256A39D2C(&qword_269F78E08);
    sub_256A5F470((uint64_t)&unk_269F78F38);
    sub_256A6EB1C();
    v16[0] = v14;
    sub_256A6EB1C();
    v16[0] = v13;
    sub_256A39D2C(&qword_269F790E0);
    sub_256A60300((uint64_t)&unk_269F790E8);
    sub_256B3FE10();
    sub_256A6D7D8((uint64_t)v17, (uint64_t)v16, &qword_269F790C8);
    sub_256A603B4();
    sub_256A6EEC0();
    v16[0] = v6;
    v16[1] = v7;
    v16[2] = v8;
    v16[3] = v12;
    v16[4] = v11;
    v16[5] = v10;
    v16[6] = v9;
    sub_256A60400();
    sub_256A6EEC0();
  }
  sub_256A4A46C();
  v5();
  sub_256A4A890();
}

void LLMModelAssetMetadata.init(from:)()
{
  sub_256A4A878();
  uint64_t v9 = v2;
  uint64_t v4 = v3;
  int v5 = sub_256A39D2C(&qword_269F79108);
  sub_256A49FB8();
  int v7 = v6;
  MEMORY[0x270FA5388](v8);
  sub_256A6EB94();
  uint64_t v45 = (uint64_t)v9;
  LODWORD(v9) = sub_256A39D70(v9, v1);
  sub_256A602B4();
  sub_256A6EE74();
  if (v0)
  {
    LODWORD(v15) = 0;
    unsigned int v11 = 0;
  }
  else
  {
    int v10 = v7;
    uint64_t v44 = v4;
    uint64_t v13 = sub_256A6EE0C();
    uint64_t v15 = v14;
    v57[0] = v13;
    v57[1] = v14;
    swift_bridgeObjectRetain();
    int v16 = v10;
    uint64_t v43 = v13;
    v57[2] = sub_256B3FD30();
    LOBYTE(v57[3]) = v17 & 1;
    char v58 = v17;
    uint64_t v42 = v57[2];
    v57[4] = sub_256B3FD00();
    v57[5] = v18;
    LOBYTE(v47[0]) = 3;
    uint64_t v19 = v18;
    swift_bridgeObjectRetain();
    uint64_t v20 = sub_256A6EE0C();
    uint64_t v9 = v21;
    uint64_t v39 = v20;
    uint64_t v40 = v57[4];
    uint64_t v41 = v19;
    v57[6] = v20;
    v57[7] = v21;
    sub_256A39D2C(&qword_269F78E08);
    LOBYTE(v46[0]) = 4;
    unint64_t v22 = sub_256A5F470((uint64_t)&unk_269F78F48);
    int v7 = (int)v9;
    swift_bridgeObjectRetain();
    sub_256A6E924();
    if (!v22)
    {
      uint64_t v38 = v9;
      uint64_t v24 = v47[0];
      v57[8] = v47[0];
      swift_bridgeObjectRetain();
      sub_256B3FD40();
      LOBYTE(v12) = v47[0];
      v57[9] = v47[0];
      LODWORD(v9) = sub_256A39D2C(&qword_269F790E0);
      LOBYTE(v46[0]) = 6;
      unint64_t v25 = sub_256A60300((uint64_t)&unk_269F79110);
      swift_bridgeObjectRetain();
      sub_256A6E924();
      if (v25)
      {
        LODWORD(v4) = v16 + 8;
        sub_256A6E470();
        v26();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_256A39DB4(v45);
        int v7 = 0;
        sub_256A6EDB0();
      }
      else
      {
        uint64_t v37 = v47[0];
        uint64_t v12 = v47[0];
        v57[10] = v47[0];
        unint64_t v27 = sub_256A60520();
        swift_bridgeObjectRetain();
        sub_256A6E924();
        LODWORD(v9) = v38;
        if (!v27)
        {
          sub_256A6D7D8((uint64_t)&v56, (uint64_t)v55, &qword_269F790C8);
          sub_256A6D7D8((uint64_t)v55, (uint64_t)&v57[11], &qword_269F790C8);
          sub_256A60128((uint64_t)v55);
          sub_256A6056C();
          sub_256A6EF44();
          sub_256A6E470();
          v29();
          uint64_t v30 = v48;
          uint64_t v31 = v49;
          uint64_t v32 = v50;
          uint64_t v33 = v51;
          uint64_t v34 = v53;
          uint64_t v35 = v52;
          uint64_t v36 = v54;
          v57[33] = v48;
          v57[34] = v49;
          v57[35] = v50;
          v57[36] = v51;
          v57[37] = v52;
          v57[38] = v53;
          v57[39] = v54;
          v46[0] = v43;
          v46[1] = v15;
          void v46[2] = v42;
          LOBYTE(v46[3]) = v58 & 1;
          v46[4] = v40;
          v46[5] = v41;
          v46[6] = v39;
          v46[7] = v38;
          v46[8] = v24;
          v46[9] = v37;
          v46[10] = v12;
          sub_256A6D7D8((uint64_t)v55, (uint64_t)&v46[11], &qword_269F790C8);
          v46[33] = v30;
          v46[34] = v31;
          v46[35] = v32;
          v46[36] = v33;
          v46[37] = v35;
          v46[38] = v34;
          v46[39] = v36;
          sub_256A605B8(v46);
          sub_256A60128((uint64_t)v55);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          memcpy(v44, v46, 0x140uLL);
          sub_256A39DB4(v45);
          memcpy(v47, v57, sizeof(v47));
          sub_256A60714(v47);
          goto LABEL_20;
        }
        LODWORD(v4) = v16 + 8;
        sub_256A6E470();
        v28();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_256A39DB4(v45);
        sub_256A6EDB0();
        int v7 = 1;
      }
      goto LABEL_13;
    }
    LODWORD(v4) = v10 + 8;
    sub_256A6E470();
    v23();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unsigned int v11 = 13;
    LODWORD(v15) = 1;
  }
  sub_256A39DB4(v45);
  if ((v11 & 1) == 0)
  {
    sub_256A6EFE8();
    if ((v11 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
  int v5 = 0;
  sub_256A6EA88();
  LODWORD(v12) = (v11 >> 2) & 1;
LABEL_13:
  swift_bridgeObjectRelease();
  if ((v12 & 1) == 0)
  {
LABEL_6:
    if (v15) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  swift_bridgeObjectRelease();
  if (v15)
  {
LABEL_7:
    swift_bridgeObjectRelease();
    if ((v5 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }
LABEL_15:
  if (!v5)
  {
LABEL_8:
    if (v4) {
      goto LABEL_9;
    }
    goto LABEL_17;
  }
LABEL_16:
  swift_bridgeObjectRelease();
  if (v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    if ((v7 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_18;
  }
LABEL_17:
  if (!v7)
  {
LABEL_10:
    if (!v9) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_18:
  swift_bridgeObjectRelease();
  if (v9)
  {
LABEL_19:
    sub_256A6D7D8((uint64_t)&v57[11], (uint64_t)v47, &qword_269F790C8);
    sub_256A60128((uint64_t)v47);
  }
LABEL_20:
  sub_256A6E988();
  sub_256A4A890();
}

void sub_256A5DC8C()
{
}

void sub_256A5DCA4()
{
}

void AssetBackedLLMModelBase.init(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  sub_256A6E6EC();
  a43 = v46;
  a44 = v47;
  sub_256A6E670();
  sub_256A6E3CC(&a12);
  sub_256A6EB44();
  BOOL v48 = v48 && v44 == 0xE90000000000006CLL;
  if (!v48)
  {
    sub_256A6EA60();
    if ((sub_256B3FEA0() & 1) == 0)
    {
      sub_256A6E6C0();
      sub_256A6E5D4();
      swift_bridgeObjectRelease();
      sub_256A546F8();
      uint64_t v53 = sub_256A6E4C0();
      sub_256A6EA0C(v53, v54);
      sub_256A6E6DC(v55, v56);
      goto LABEL_11;
    }
  }
  if (!a21 || !*(void *)(a21 + 16))
  {
    sub_256A546F8();
    uint64_t v49 = sub_256A6E4C0();
    sub_256A6E8F4(v49, v50);
    sub_256A6E598(v51, v52);
LABEL_11:
    swift_willThrow();
    sub_256A6DFC8((uint64_t)&a12);
    goto LABEL_12;
  }
  sub_256A6E3CC(v45);
LABEL_12:
  sub_256A6E7C8();
}

void AssetBackedLLMModelBase.tokenizer.getter()
{
}

#error "256A5DE34: call analysis failed (funcsize=6)"

void sub_256A5DE40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_256A5DE58()
{
}

#error "256A5DE74: call analysis failed (funcsize=6)"

uint64_t sub_256A5DE88()
{
  return ServerConfigurationBase.init(configuration:)();
}

void sub_256A5DEA0()
{
}

uint64_t sub_256A5DEC0(uint64_t a1)
{
  unint64_t v2 = sub_256A608EC();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A5DEFC(uint64_t a1)
{
  unint64_t v2 = sub_256A608EC();

  return MEMORY[0x270FA00B8](a1, v2);
}

void ServerConfigurationAssetMetadata.encode(to:)()
{
}

uint64_t ServerConfigurationAssetMetadata.init(from:)(uint64_t a1)
{
  return sub_256A6E4A4(a1);
}

void sub_256A5DF94()
{
}

#error "256A5DFB8: call analysis failed (funcsize=6)"

void sub_256A5DFC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  sub_256A6E60C();
  a43 = v45;
  a44 = v46;
  sub_256A6E670();
  sub_256A6E3CC(&a12);
  if (a12 == 0xD000000000000017 && (sub_256A6E5FC(), v47) || (sub_256A6E698(), (sub_256A6E848() & 1) != 0))
  {
    sub_256A6E3CC(v44);
  }
  else
  {
    sub_256A6E57C();
    sub_256A6E5D4();
    swift_bridgeObjectRelease();
    sub_256A546F8();
    uint64_t v48 = sub_256A6E4C0();
    sub_256A6E5EC(v48, v49);
    sub_256A6E450(v50, v51);
    sub_256A6DFC8((uint64_t)&a12);
  }
  sub_256A6E680();
}

#error "256A5E090: call analysis failed (funcsize=6)"

uint64_t sub_256A5E0A4()
{
  return AssetBackedModelConfigurationReplacementBase.init(configuration:)();
}

void sub_256A5E0BC()
{
}

uint64_t sub_256A5E0DC(uint64_t a1)
{
  unint64_t v2 = sub_256A60938();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A5E118(uint64_t a1)
{
  unint64_t v2 = sub_256A60938();

  return MEMORY[0x270FA00B8](a1, v2);
}

void ModelConfigurationReplacementAssetMetadata.encode(to:)()
{
}

uint64_t ModelConfigurationReplacementAssetMetadata.init(from:)(uint64_t a1)
{
  return sub_256A6E4A4(a1);
}

void sub_256A5E1B0()
{
}

uint64_t AssetBackedModelConfigurationReplacementBase.configuration.getter()
{
  memcpy(__dst, v0, sizeof(__dst));
  uint64_t v1 = (void *)sub_256A4A370();
  memcpy(v1, v2, 0xB8uLL);
  return sub_256A545A0((uint64_t)__dst);
}

#error "256A5E220: call analysis failed (funcsize=6)"

void sub_256A5E22C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  sub_256A6E60C();
  a43 = v45;
  a44 = v46;
  sub_256A6E670();
  sub_256A6E3CC(&a12);
  if (a12 == 0xD00000000000001DLL && (sub_256A6E5FC(), v47) || (sub_256A6E698(), (sub_256A6E848() & 1) != 0))
  {
    sub_256A6E3CC(v44);
  }
  else
  {
    sub_256A6E57C();
    sub_256A6E5D4();
    swift_bridgeObjectRelease();
    sub_256A546F8();
    uint64_t v48 = sub_256A6E4C0();
    sub_256A6E5EC(v48, v49);
    sub_256A6E450(v50, v51);
    sub_256A6DFC8((uint64_t)&a12);
  }
  sub_256A6E680();
}

void AssetBackedModelConfigurationReplacementBase.hash(into:)(uint64_t a1)
{
  memcpy(__dst, v1, sizeof(__dst));
  ResourceConfiguration.hash(into:)(a1);
}

uint64_t sub_256A5E330@<X0>(uint64_t *a1@<X8>)
{
  return sub_256A5EE44((uint64_t (*)(void *))sub_256A8633C, a1);
}

#error "256A5E354: call analysis failed (funcsize=6)"

uint64_t sub_256A5E368()
{
  return SanitizerBase.init(configuration:)();
}

void sub_256A5E380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t sub_256A5E3A0(uint64_t a1)
{
  unint64_t v2 = sub_256A60984();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A5E3DC(uint64_t a1)
{
  unint64_t v2 = sub_256A60984();

  return MEMORY[0x270FA00B8](a1, v2);
}

void SanitizerAssetMetadata.encode(to:)()
{
}

uint64_t SanitizerAssetMetadata.init(from:)(uint64_t a1)
{
  return sub_256A6E4A4(a1);
}

void sub_256A5E474()
{
}

#error "256A5E498: call analysis failed (funcsize=6)"

void sub_256A5E4A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  sub_256A6E6EC();
  a43 = v47;
  a44 = v48;
  sub_256A6EE5C();
  sub_256A6E3CC(&a12);
  sub_256A6EB44();
  BOOL v49 = v49 && v44 == v46;
  if (!v49)
  {
    sub_256A6EF84();
    if ((sub_256A6EF64() & 1) == 0)
    {
      sub_256A6E6C0();
      sub_256A6E5D4();
      swift_bridgeObjectRelease();
      sub_256A546F8();
      uint64_t v54 = sub_256A6E4C0();
      sub_256A6EA0C(v54, v55);
      sub_256A6E6DC(v56, v57);
      goto LABEL_11;
    }
  }
  if (!a21 || !*(void *)(a21 + 16))
  {
    sub_256A546F8();
    uint64_t v50 = sub_256A6E4C0();
    sub_256A6E8F4(v50, v51);
    sub_256A6E598(v52, v53);
LABEL_11:
    swift_willThrow();
    sub_256A6DFC8((uint64_t)&a12);
    goto LABEL_12;
  }
  sub_256A6E3CC(v45);
LABEL_12:
  sub_256A6E7C8();
}

void sub_256A5E5A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

#error "256A5E5C8: call analysis failed (funcsize=6)"

uint64_t sub_256A5E5DC()
{
  return TokenInputDenyListBase.init(configuration:)();
}

void sub_256A5E5F4()
{
}

uint64_t sub_256A5E614(uint64_t a1)
{
  unint64_t v2 = sub_256A609D0();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A5E650(uint64_t a1)
{
  unint64_t v2 = sub_256A609D0();

  return MEMORY[0x270FA00B8](a1, v2);
}

void TokenInputDenyListAssetMetadata.encode(to:)()
{
}

uint64_t TokenInputDenyListAssetMetadata.init(from:)(uint64_t a1)
{
  return sub_256A6E4A4(a1);
}

void sub_256A5E6E8()
{
}

#error "256A5E70C: call analysis failed (funcsize=6)"

void sub_256A5E718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  sub_256A6E60C();
  a43 = v45;
  a44 = v46;
  sub_256A6E670();
  sub_256A6E3CC(&a12);
  if (a12 == 0xD000000000000012 && (sub_256A6E5FC(), v47) || (sub_256A6E698(), (sub_256A6E848() & 1) != 0))
  {
    sub_256A6E3CC(v44);
  }
  else
  {
    sub_256A6E57C();
    sub_256A6E5D4();
    swift_bridgeObjectRelease();
    sub_256A546F8();
    uint64_t v48 = sub_256A6E4C0();
    sub_256A6E5EC(v48, v49);
    sub_256A6E450(v50, v51);
    sub_256A6DFC8((uint64_t)&a12);
  }
  sub_256A6E680();
}

#error "256A5E7E4: call analysis failed (funcsize=6)"

uint64_t sub_256A5E7F8()
{
  return TokenOutputDenyListBase.init(configuration:)();
}

void sub_256A5E810()
{
}

uint64_t sub_256A5E830(uint64_t a1)
{
  unint64_t v2 = sub_256A60A1C();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A5E86C(uint64_t a1)
{
  unint64_t v2 = sub_256A60A1C();

  return MEMORY[0x270FA00B8](a1, v2);
}

void TokenOutputDenyListAssetMetadata.encode(to:)()
{
}

uint64_t TokenOutputDenyListAssetMetadata.init(from:)(uint64_t a1)
{
  return sub_256A6E4A4(a1);
}

void sub_256A5E904()
{
}

#error "256A5E928: call analysis failed (funcsize=6)"

void sub_256A5E934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  sub_256A6E60C();
  a43 = v44;
  a44 = v45;
  char v47 = v46;
  sub_256A6E3CC(&a12);
  if (a12 == 0xD000000000000013 && (sub_256A6E5FC(), v48) || (sub_256A6E71C() & 1) != 0)
  {
    sub_256A6E3CC(v47);
  }
  else
  {
    sub_256A6E57C();
    sub_256A6E5D4();
    swift_bridgeObjectRelease();
    sub_256A546F8();
    uint64_t v49 = sub_256A6E4C0();
    sub_256A6E5EC(v49, v50);
    sub_256A6E450(v51, v52);
    sub_256A6DFC8((uint64_t)&a12);
  }
  sub_256A6E680();
}

uint64_t _s12ModelCatalog29DiffusionAdapterAssetContentsV7baseURL10Foundation0H0Vvg_0()
{
  sub_256B3F300();
  sub_256A6E624();
  uint64_t v0 = sub_256A4A370();

  return v1(v0);
}

uint64_t _s12ModelCatalog29DiffusionAdapterAssetContentsV7baseURLAC10Foundation0H0V_tcfC_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_256B3F300();
  sub_256A6E624();
  int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);

  return v6(a2, a1, v4);
}

uint64_t sub_256A5EABC(uint64_t a1)
{
  unint64_t v2 = sub_256A60A68();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A5EAF8(uint64_t a1)
{
  unint64_t v2 = sub_256A60A68();

  return MEMORY[0x270FA00B8](a1, v2);
}

void TokenizerAssetMetadata.encode(to:)()
{
}

void sub_256A5EB70()
{
  sub_256A4A878();
  uint64_t v1 = v0;
  unint64_t v3 = v2;
  sub_256A39D2C(v4);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v5);
  sub_256A6E704();
  sub_256A39D70(v3, v3[3]);
  v1();
  sub_256A6F090();
  sub_256B3FF90();
  sub_256A6E550();
  v6();
  sub_256A6E988();
  sub_256A4A890();
}

uint64_t TokenizerAssetMetadata.init(from:)(uint64_t a1)
{
  return sub_256A6E4A4(a1);
}

void sub_256A5EC54()
{
}

void AssetBackedTokenizerBase.init(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  sub_256A6E6EC();
  a43 = v47;
  a44 = v48;
  sub_256A6EE5C();
  sub_256A6E3CC(&a12);
  sub_256A6EB44();
  BOOL v49 = v49 && v44 == v46;
  if (!v49)
  {
    sub_256A6EF84();
    if ((sub_256A6EF64() & 1) == 0)
    {
      sub_256A6E6C0();
      sub_256A6E5D4();
      swift_bridgeObjectRelease();
      sub_256A546F8();
      uint64_t v54 = sub_256A6E4C0();
      sub_256A6EA0C(v54, v55);
      sub_256A6E6DC(v56, v57);
      goto LABEL_11;
    }
  }
  if (!a21 || !*(void *)(a21 + 16))
  {
    sub_256A546F8();
    uint64_t v50 = sub_256A6E4C0();
    sub_256A6E8F4(v50, v51);
    sub_256A6E598(v52, v53);
LABEL_11:
    swift_willThrow();
    sub_256A6DFC8((uint64_t)&a12);
    goto LABEL_12;
  }
  sub_256A6E3CC(v45);
LABEL_12:
  sub_256A6E7C8();
}

uint64_t _s12ModelCatalog20DiffusionAdapterBaseV2eeoiySbAC_ACtFZ_0()
{
  sub_256A6EAB8();
  memcpy(__dst, v1, sizeof(__dst));
  memcpy(v3, v0, sizeof(v3));
  return static ResourceConfiguration.== infix(_:_:)((uint64_t)__dst) & 1;
}

uint64_t _s12ModelCatalog20DiffusionAdapterBaseV9hashValueSivg_0()
{
  memcpy(v2, v0, sizeof(v2));
  sub_256B3FF40();
  ResourceConfiguration.hash(into:)((uint64_t)v3);
  return sub_256B3FF70();
}

#error "256A5EE20: call analysis failed (funcsize=6)"

void sub_256A5EE2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t sub_256A5EE44@<X0>(uint64_t (*a1)(void *)@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v5 = memcpy(__dst, v2, sizeof(__dst));
  uint64_t result = a1(v5);
  *a2 = result;
  a2[1] = v7;
  return result;
}

uint64_t sub_256A5EE98()
{
  memcpy(v2, v0, sizeof(v2));
  sub_256B3FF40();
  ResourceConfiguration.hash(into:)((uint64_t)v3);
  return sub_256B3FF70();
}

unint64_t sub_256A5EEF8()
{
  unint64_t result = qword_269F78E20;
  if (!qword_269F78E20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F78E20);
  }
  return result;
}

unint64_t sub_256A5EF44()
{
  unint64_t result = qword_269F78E30;
  if (!qword_269F78E30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F78E30);
  }
  return result;
}

unint64_t sub_256A5EF90()
{
  unint64_t result = qword_269F78E40;
  if (!qword_269F78E40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F78E40);
  }
  return result;
}

unint64_t sub_256A5EFDC()
{
  unint64_t result = qword_269F78E50;
  if (!qword_269F78E50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F78E50);
  }
  return result;
}

unint64_t sub_256A5F028()
{
  unint64_t result = qword_269F78E60;
  if (!qword_269F78E60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F78E60);
  }
  return result;
}

unint64_t sub_256A5F074()
{
  unint64_t result = qword_269F78E70;
  if (!qword_269F78E70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F78E70);
  }
  return result;
}

unint64_t sub_256A5F0C0()
{
  unint64_t result = qword_269F78E80;
  if (!qword_269F78E80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F78E80);
  }
  return result;
}

unint64_t sub_256A5F10C()
{
  unint64_t result = qword_269F78E90;
  if (!qword_269F78E90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F78E90);
  }
  return result;
}

unint64_t sub_256A5F158()
{
  unint64_t result = qword_269F78EA0;
  if (!qword_269F78EA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F78EA0);
  }
  return result;
}

unint64_t sub_256A5F1A4()
{
  unint64_t result = qword_269F78EB0;
  if (!qword_269F78EB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F78EB0);
  }
  return result;
}

unint64_t sub_256A5F1F0()
{
  unint64_t result = qword_269F78EC8;
  if (!qword_269F78EC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F78EC8);
  }
  return result;
}

unint64_t sub_256A5F23C()
{
  unint64_t result = qword_269F78ED0;
  if (!qword_269F78ED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F78ED0);
  }
  return result;
}

unint64_t sub_256A5F288()
{
  unint64_t result = qword_269F78EE8;
  if (!qword_269F78EE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F78EE8);
  }
  return result;
}

unint64_t sub_256A5F2D4()
{
  unint64_t result = qword_269F78EF8;
  if (!qword_269F78EF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F78EF8);
  }
  return result;
}

unint64_t sub_256A5F320(uint64_t a1)
{
  unint64_t result = sub_256A6EA00(a1);
  if (!result)
  {
    uint64_t v4 = v3;
    sub_256A49664(&qword_269F78ED8);
    v4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t sub_256A5F38C()
{
  unint64_t result = qword_269F78F08;
  if (!qword_269F78F08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F78F08);
  }
  return result;
}

unint64_t sub_256A5F3D8()
{
  unint64_t result = qword_269F78F18;
  if (!qword_269F78F18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F78F18);
  }
  return result;
}

unint64_t sub_256A5F424()
{
  unint64_t result = qword_269F78F30;
  if (!qword_269F78F30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F78F30);
  }
  return result;
}

unint64_t sub_256A5F470(uint64_t a1)
{
  unint64_t result = sub_256A6EA00(a1);
  if (!result)
  {
    sub_256A49664(&qword_269F78E08);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t sub_256A5F4D0()
{
  unint64_t result = qword_269F78F58;
  if (!qword_269F78F58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F78F58);
  }
  return result;
}

unint64_t sub_256A5F51C()
{
  unint64_t result = qword_269F78F70;
  if (!qword_269F78F70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F78F70);
  }
  return result;
}

unint64_t sub_256A5F568()
{
  unint64_t result = qword_269F78F78;
  if (!qword_269F78F78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F78F78);
  }
  return result;
}

unint64_t sub_256A5F5B4()
{
  unint64_t result = qword_269F78F80;
  if (!qword_269F78F80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F78F80);
  }
  return result;
}

unint64_t sub_256A5F600()
{
  unint64_t result = qword_269F78F88;
  if (!qword_269F78F88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F78F88);
  }
  return result;
}

unint64_t sub_256A5F64C()
{
  unint64_t result = qword_269F78F90;
  if (!qword_269F78F90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F78F90);
  }
  return result;
}

unint64_t sub_256A5F698()
{
  unint64_t result = qword_269F78F98;
  if (!qword_269F78F98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F78F98);
  }
  return result;
}

unint64_t sub_256A5F6E4()
{
  unint64_t result = qword_269F78FA8;
  if (!qword_269F78FA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F78FA8);
  }
  return result;
}

unint64_t sub_256A5F730()
{
  unint64_t result = qword_269F78FB0;
  if (!qword_269F78FB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F78FB0);
  }
  return result;
}

unint64_t sub_256A5F77C()
{
  unint64_t result = qword_269F78FB8;
  if (!qword_269F78FB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F78FB8);
  }
  return result;
}

unint64_t sub_256A5F7C8()
{
  unint64_t result = qword_269F78FC0;
  if (!qword_269F78FC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F78FC0);
  }
  return result;
}

unint64_t sub_256A5F814()
{
  unint64_t result = qword_269F78FC8;
  if (!qword_269F78FC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F78FC8);
  }
  return result;
}

uint64_t sub_256A5F860(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_256A60220(v2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_256A5F908(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 152);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_256A60870(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_256A5F9B0()
{
  unint64_t result = qword_269F78FD8;
  if (!qword_269F78FD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F78FD8);
  }
  return result;
}

unint64_t sub_256A5F9FC()
{
  unint64_t result = qword_269F78FF0;
  if (!qword_269F78FF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F78FF0);
  }
  return result;
}

unint64_t sub_256A5FA48()
{
  unint64_t result = qword_269F79008;
  if (!qword_269F79008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79008);
  }
  return result;
}

unint64_t sub_256A5FA94()
{
  unint64_t result = qword_269F79028;
  if (!qword_269F79028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79028);
  }
  return result;
}

unint64_t sub_256A5FAE0()
{
  unint64_t result = qword_269F79040;
  if (!qword_269F79040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79040);
  }
  return result;
}

unint64_t sub_256A5FB2C()
{
  unint64_t result = qword_269F79048;
  if (!qword_269F79048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79048);
  }
  return result;
}

unint64_t sub_256A5FB78()
{
  unint64_t result = qword_269F79050;
  if (!qword_269F79050)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79050);
  }
  return result;
}

unint64_t sub_256A5FBC4(uint64_t a1)
{
  unint64_t result = sub_256A6EA00(a1);
  if (!result)
  {
    uint64_t v4 = v3;
    sub_256A49664(&qword_269F79030);
    v4();
    unint64_t result = sub_256A6F0B8();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t sub_256A5FC2C()
{
  unint64_t result = qword_269F79068;
  if (!qword_269F79068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79068);
  }
  return result;
}

unint64_t sub_256A5FC78()
{
  unint64_t result = qword_269F79070;
  if (!qword_269F79070)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79070);
  }
  return result;
}

unint64_t sub_256A5FCC4()
{
  unint64_t result = qword_269F79078;
  if (!qword_269F79078)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79078);
  }
  return result;
}

void *sub_256A5FD10(void *a1)
{
  uint64_t v2 = a1[19];
  uint64_t v5 = a1[18];
  uint64_t v6 = a1[17];
  uint64_t v3 = a1[20];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_256A60198(v6, v5, v2, v3);
  return a1;
}

void *sub_256A5FE1C(void *a1)
{
  uint64_t v2 = a1[19];
  uint64_t v5 = a1[18];
  uint64_t v6 = a1[17];
  uint64_t v3 = a1[20];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_256A6044C(v6, v5, v2, v3);
  return a1;
}

unint64_t sub_256A5FF2C()
{
  unint64_t result = qword_269F79088;
  if (!qword_269F79088)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79088);
  }
  return result;
}

unint64_t sub_256A5FF78()
{
  unint64_t result = qword_269F790A0;
  if (!qword_269F790A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F790A0);
  }
  return result;
}

unint64_t sub_256A5FFC4()
{
  unint64_t result = qword_269F790B8;
  if (!qword_269F790B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F790B8);
  }
  return result;
}

uint64_t sub_256A60010(uint64_t a1)
{
  return a1;
}

uint64_t sub_256A6009C(uint64_t a1)
{
  return a1;
}

uint64_t sub_256A60128(uint64_t a1)
{
  uint64_t v2 = sub_256A6EA00(a1);
  char v5 = *(unsigned char *)(v1 + 168);
  v3(v2, *(void *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 80), *(void *)(v1 + 88), *(void *)(v1 + 96), *(void *)(v1 + 104), *(void *)(v1 + 112), *(void *)(v1 + 120), *(void *)(v1 + 128), *(void *)(v1 + 136), *(void *)(v1 + 144),
    *(void *)(v1 + 152),
    *(void *)(v1 + 160),
    v5);
  return v1;
}

uint64_t sub_256A60198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 != 1)
  {
    sub_256A6F068();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_256A60220(uint64_t result)
{
  if (result != 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_256A602B4()
{
  unint64_t result = qword_269F790D8;
  if (!qword_269F790D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F790D8);
  }
  return result;
}

unint64_t sub_256A60300(uint64_t a1)
{
  unint64_t result = sub_256A6EA00(a1);
  if (!result)
  {
    uint64_t v4 = v3;
    sub_256A49664(&qword_269F790E0);
    v4();
    unint64_t result = sub_256A6F0B8();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t sub_256A60368()
{
  unint64_t result = qword_269F790F0;
  if (!qword_269F790F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F790F0);
  }
  return result;
}

unint64_t sub_256A603B4()
{
  unint64_t result = qword_269F790F8;
  if (!qword_269F790F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F790F8);
  }
  return result;
}

unint64_t sub_256A60400()
{
  unint64_t result = qword_269F79100;
  if (!qword_269F79100)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79100);
  }
  return result;
}

uint64_t sub_256A6044C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 != 1)
  {
    sub_256A6F068();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_256A604D4()
{
  unint64_t result = qword_269F79118;
  if (!qword_269F79118)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79118);
  }
  return result;
}

unint64_t sub_256A60520()
{
  unint64_t result = qword_269F79120;
  if (!qword_269F79120)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79120);
  }
  return result;
}

unint64_t sub_256A6056C()
{
  unint64_t result = qword_269F79128;
  if (!qword_269F79128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79128);
  }
  return result;
}

void *sub_256A605B8(void *a1)
{
  uint64_t v6 = a1[12];
  uint64_t v7 = a1[11];
  uint64_t v4 = a1[14];
  uint64_t v5 = a1[13];
  uint64_t v3 = a1[33];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_256A60198(v7, v6, v5, v4);
  sub_256A60220(v3);
  return a1;
}

void *sub_256A60714(void *a1)
{
  uint64_t v6 = a1[12];
  uint64_t v7 = a1[11];
  uint64_t v4 = a1[14];
  uint64_t v5 = a1[13];
  uint64_t v3 = a1[33];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_256A6044C(v7, v6, v5, v4);
  sub_256A60870(v3);
  return a1;
}

uint64_t sub_256A60870(uint64_t result)
{
  if (result != 1)
  {
    sub_256A6EBB8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_256A608EC()
{
  unint64_t result = qword_269F79138;
  if (!qword_269F79138)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79138);
  }
  return result;
}

unint64_t sub_256A60938()
{
  unint64_t result = qword_269F79148;
  if (!qword_269F79148)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79148);
  }
  return result;
}

unint64_t sub_256A60984()
{
  unint64_t result = qword_269F79158;
  if (!qword_269F79158)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79158);
  }
  return result;
}

unint64_t sub_256A609D0()
{
  unint64_t result = qword_269F79168;
  if (!qword_269F79168)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79168);
  }
  return result;
}

unint64_t sub_256A60A1C()
{
  unint64_t result = qword_269F79178;
  if (!qword_269F79178)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79178);
  }
  return result;
}

unint64_t sub_256A60A68()
{
  unint64_t result = qword_269F79188;
  if (!qword_269F79188)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79188);
  }
  return result;
}

unint64_t sub_256A60AB4(uint64_t a1)
{
  unint64_t result = sub_256A60ADC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_256A60ADC()
{
  unint64_t result = qword_269F79190;
  if (!qword_269F79190)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79190);
  }
  return result;
}

uint64_t sub_256A60B28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A60B54, (uint64_t (*)(void))sub_256A60BA0);
}

unint64_t sub_256A60B54()
{
  unint64_t result = qword_269F79198;
  if (!qword_269F79198)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79198);
  }
  return result;
}

unint64_t sub_256A60BA0()
{
  unint64_t result = qword_269F791A0;
  if (!qword_269F791A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F791A0);
  }
  return result;
}

unint64_t sub_256A60BEC(uint64_t a1)
{
  unint64_t result = sub_256A60C14();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_256A60C14()
{
  unint64_t result = qword_269F791A8;
  if (!qword_269F791A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F791A8);
  }
  return result;
}

uint64_t sub_256A60C60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A60C8C, (uint64_t (*)(void))sub_256A60CD8);
}

unint64_t sub_256A60C8C()
{
  unint64_t result = qword_269F791B0;
  if (!qword_269F791B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F791B0);
  }
  return result;
}

unint64_t sub_256A60CD8()
{
  unint64_t result = qword_269F791B8;
  if (!qword_269F791B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F791B8);
  }
  return result;
}

uint64_t sub_256A60D24()
{
  return MEMORY[0x263F8D320];
}

unint64_t sub_256A60D34()
{
  unint64_t result = qword_269F791C0;
  if (!qword_269F791C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F791C0);
  }
  return result;
}

uint64_t sub_256A60D80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A60DAC, (uint64_t (*)(void))sub_256A60DF8);
}

unint64_t sub_256A60DAC()
{
  unint64_t result = qword_26B2B3518;
  if (!qword_26B2B3518)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B3518);
  }
  return result;
}

unint64_t sub_256A60DF8()
{
  unint64_t result = qword_26B2B3510;
  if (!qword_26B2B3510)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B3510);
  }
  return result;
}

uint64_t sub_256A60E44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A60E70, (uint64_t (*)(void))sub_256A60EBC);
}

unint64_t sub_256A60E70()
{
  unint64_t result = qword_26B2B5068;
  if (!qword_26B2B5068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5068);
  }
  return result;
}

unint64_t sub_256A60EBC()
{
  unint64_t result = qword_26B2B5078;
  if (!qword_26B2B5078)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5078);
  }
  return result;
}

uint64_t sub_256A60F08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A60F34, (uint64_t (*)(void))sub_256A60F80);
}

unint64_t sub_256A60F34()
{
  unint64_t result = qword_26B2B5240;
  if (!qword_26B2B5240)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5240);
  }
  return result;
}

unint64_t sub_256A60F80()
{
  unint64_t result = qword_26B2B3620;
  if (!qword_26B2B3620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B3620);
  }
  return result;
}

unint64_t sub_256A60FCC(uint64_t a1)
{
  unint64_t result = sub_256A60FF4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_256A60FF4()
{
  unint64_t result = qword_26B2B5080;
  if (!qword_26B2B5080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5080);
  }
  return result;
}

unint64_t sub_256A61040()
{
  return sub_256A67730((uint64_t)&unk_26B2B34B0);
}

unint64_t sub_256A61068(uint64_t a1)
{
  unint64_t result = sub_256A61090();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_256A61090()
{
  unint64_t result = qword_26B2B56B0;
  if (!qword_26B2B56B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B56B0);
  }
  return result;
}

uint64_t sub_256A610DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A61108, (uint64_t (*)(void))sub_256A61154);
}

unint64_t sub_256A61108()
{
  unint64_t result = qword_26B2B5698;
  if (!qword_26B2B5698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5698);
  }
  return result;
}

unint64_t sub_256A61154()
{
  unint64_t result = qword_26B2B56A8;
  if (!qword_26B2B56A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B56A8);
  }
  return result;
}

unint64_t sub_256A611A4()
{
  unint64_t result = qword_26B2B56A0;
  if (!qword_26B2B56A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B56A0);
  }
  return result;
}

unint64_t sub_256A611F0(uint64_t a1)
{
  unint64_t result = sub_256A61218();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_256A61218()
{
  unint64_t result = qword_26B2B2FE0;
  if (!qword_26B2B2FE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B2FE0);
  }
  return result;
}

uint64_t sub_256A61264(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A61290, (uint64_t (*)(void))sub_256A612DC);
}

unint64_t sub_256A61290()
{
  unint64_t result = qword_269F791C8;
  if (!qword_269F791C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F791C8);
  }
  return result;
}

unint64_t sub_256A612DC()
{
  unint64_t result = qword_269F791D0;
  if (!qword_269F791D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F791D0);
  }
  return result;
}

unint64_t sub_256A61328(uint64_t a1)
{
  unint64_t result = sub_256A61350();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_256A61350()
{
  unint64_t result = qword_26B2B2FD0;
  if (!qword_26B2B2FD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B2FD0);
  }
  return result;
}

uint64_t sub_256A6139C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A613C8, (uint64_t (*)(void))sub_256A61414);
}

unint64_t sub_256A613C8()
{
  unint64_t result = qword_26B2B2FB8;
  if (!qword_26B2B2FB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B2FB8);
  }
  return result;
}

unint64_t sub_256A61414()
{
  unint64_t result = qword_26B2B2FC8;
  if (!qword_26B2B2FC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B2FC8);
  }
  return result;
}

unint64_t sub_256A61464()
{
  unint64_t result = qword_26B2B2FC0;
  if (!qword_26B2B2FC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B2FC0);
  }
  return result;
}

uint64_t sub_256A614B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A614DC, (uint64_t (*)(void))sub_256A61528);
}

unint64_t sub_256A614DC()
{
  unint64_t result = qword_26B2B3488;
  if (!qword_26B2B3488)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B3488);
  }
  return result;
}

unint64_t sub_256A61528()
{
  unint64_t result = qword_26B2B3480;
  if (!qword_26B2B3480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B3480);
  }
  return result;
}

uint64_t sub_256A61574(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A615A0, (uint64_t (*)(void))sub_256A615EC);
}

unint64_t sub_256A615A0()
{
  unint64_t result = qword_26B2B4FC8;
  if (!qword_26B2B4FC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B4FC8);
  }
  return result;
}

unint64_t sub_256A615EC()
{
  unint64_t result = qword_26B2B4FD8;
  if (!qword_26B2B4FD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B4FD8);
  }
  return result;
}

uint64_t sub_256A61638(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A61664, (uint64_t (*)(void))sub_256A616B0);
}

unint64_t sub_256A61664()
{
  unint64_t result = qword_26B2B51D8;
  if (!qword_26B2B51D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B51D8);
  }
  return result;
}

unint64_t sub_256A616B0()
{
  unint64_t result = qword_26B2B3550;
  if (!qword_26B2B3550)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B3550);
  }
  return result;
}

unint64_t sub_256A616FC(uint64_t a1)
{
  unint64_t result = sub_256A61724();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_256A61724()
{
  unint64_t result = qword_26B2B4FE0;
  if (!qword_26B2B4FE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B4FE0);
  }
  return result;
}

unint64_t sub_256A61770()
{
  return sub_256A67730((uint64_t)&unk_26B2B34C0);
}

unint64_t sub_256A61798(uint64_t a1)
{
  unint64_t result = sub_256A617C0();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_256A617C0()
{
  unint64_t result = qword_26B2B55B0;
  if (!qword_26B2B55B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B55B0);
  }
  return result;
}

uint64_t sub_256A6180C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A61838, (uint64_t (*)(void))sub_256A61884);
}

unint64_t sub_256A61838()
{
  unint64_t result = qword_26B2B5598;
  if (!qword_26B2B5598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5598);
  }
  return result;
}

unint64_t sub_256A61884()
{
  unint64_t result = qword_26B2B55A8;
  if (!qword_26B2B55A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B55A8);
  }
  return result;
}

unint64_t sub_256A618D4()
{
  unint64_t result = qword_26B2B55A0;
  if (!qword_26B2B55A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B55A0);
  }
  return result;
}

unint64_t sub_256A61920(uint64_t a1)
{
  unint64_t result = sub_256A61948();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_256A61948()
{
  unint64_t result = qword_269F791D8;
  if (!qword_269F791D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F791D8);
  }
  return result;
}

uint64_t sub_256A61994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A619C0, (uint64_t (*)(void))sub_256A61A0C);
}

unint64_t sub_256A619C0()
{
  unint64_t result = qword_269F791E0;
  if (!qword_269F791E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F791E0);
  }
  return result;
}

unint64_t sub_256A61A0C()
{
  unint64_t result = qword_269F791E8;
  if (!qword_269F791E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F791E8);
  }
  return result;
}

uint64_t sub_256A61A58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A61A84, (uint64_t (*)(void))sub_256A61AD0);
}

unint64_t sub_256A61A84()
{
  unint64_t result = qword_269F791F0;
  if (!qword_269F791F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F791F0);
  }
  return result;
}

unint64_t sub_256A61AD0()
{
  unint64_t result = qword_269F791F8;
  if (!qword_269F791F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F791F8);
  }
  return result;
}

unint64_t sub_256A61B20()
{
  unint64_t result = qword_269F79200;
  if (!qword_269F79200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79200);
  }
  return result;
}

uint64_t sub_256A61B6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A61B98, (uint64_t (*)(void))sub_256A61BE4);
}

unint64_t sub_256A61B98()
{
  unint64_t result = qword_26B2B5938;
  if (!qword_26B2B5938)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5938);
  }
  return result;
}

unint64_t sub_256A61BE4()
{
  unint64_t result = qword_26B2B5930;
  if (!qword_26B2B5930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5930);
  }
  return result;
}

uint64_t sub_256A61C30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A61C5C, (uint64_t (*)(void))sub_256A61CA8);
}

unint64_t sub_256A61C5C()
{
  unint64_t result = qword_26B2B56F8;
  if (!qword_26B2B56F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B56F8);
  }
  return result;
}

unint64_t sub_256A61CA8()
{
  unint64_t result = qword_26B2B5708;
  if (!qword_26B2B5708)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5708);
  }
  return result;
}

uint64_t sub_256A61CF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A61D20, (uint64_t (*)(void))sub_256A61D6C);
}

unint64_t sub_256A61D20()
{
  unint64_t result = qword_26B2B53E8;
  if (!qword_26B2B53E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B53E8);
  }
  return result;
}

unint64_t sub_256A61D6C()
{
  unint64_t result = qword_26B2B3638;
  if (!qword_26B2B3638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B3638);
  }
  return result;
}

unint64_t sub_256A61DB8()
{
  unint64_t result = qword_26B2B56F0;
  if (!qword_26B2B56F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B56F0);
  }
  return result;
}

unint64_t sub_256A61E04()
{
  return sub_256A67730((uint64_t)&unk_26B2B5AD8);
}

unint64_t sub_256A61E2C(uint64_t a1)
{
  unint64_t result = sub_256A61DB8();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_256A61E54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A61E80, (uint64_t (*)(void))sub_256A61ECC);
}

unint64_t sub_256A61E80()
{
  unint64_t result = qword_26B2B56D8;
  if (!qword_26B2B56D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B56D8);
  }
  return result;
}

unint64_t sub_256A61ECC()
{
  unint64_t result = qword_26B2B56E8;
  if (!qword_26B2B56E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B56E8);
  }
  return result;
}

unint64_t sub_256A61F1C()
{
  unint64_t result = qword_26B2B56E0;
  if (!qword_26B2B56E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B56E0);
  }
  return result;
}

unint64_t sub_256A61F68(uint64_t a1)
{
  unint64_t result = sub_256A61F90();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_256A61F90()
{
  unint64_t result = qword_269F79208;
  if (!qword_269F79208)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79208);
  }
  return result;
}

uint64_t sub_256A61FDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A62008, (uint64_t (*)(void))sub_256A62054);
}

unint64_t sub_256A62008()
{
  unint64_t result = qword_269F79210;
  if (!qword_269F79210)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79210);
  }
  return result;
}

unint64_t sub_256A62054()
{
  unint64_t result = qword_269F79218;
  if (!qword_269F79218)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79218);
  }
  return result;
}

uint64_t sub_256A620A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A620CC, (uint64_t (*)(void))sub_256A62118);
}

unint64_t sub_256A620CC()
{
  unint64_t result = qword_269F79220;
  if (!qword_269F79220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79220);
  }
  return result;
}

unint64_t sub_256A62118()
{
  unint64_t result = qword_269F79228;
  if (!qword_269F79228)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79228);
  }
  return result;
}

unint64_t sub_256A62168()
{
  unint64_t result = qword_269F79230;
  if (!qword_269F79230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79230);
  }
  return result;
}

uint64_t sub_256A621B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A621E0, (uint64_t (*)(void))sub_256A6222C);
}

unint64_t sub_256A621E0()
{
  unint64_t result = qword_26B2B54A8;
  if (!qword_26B2B54A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B54A8);
  }
  return result;
}

unint64_t sub_256A6222C()
{
  unint64_t result = qword_26B2B54A0;
  if (!qword_26B2B54A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B54A0);
  }
  return result;
}

uint64_t sub_256A62278(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A622A4, (uint64_t (*)(void))sub_256A622F0);
}

unint64_t sub_256A622A4()
{
  unint64_t result = qword_26B2B50B8;
  if (!qword_26B2B50B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B50B8);
  }
  return result;
}

unint64_t sub_256A622F0()
{
  unint64_t result = qword_26B2B50C8;
  if (!qword_26B2B50C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B50C8);
  }
  return result;
}

uint64_t sub_256A6233C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A62368, (uint64_t (*)(void))sub_256A623B4);
}

unint64_t sub_256A62368()
{
  unint64_t result = qword_26B2B52B0;
  if (!qword_26B2B52B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B52B0);
  }
  return result;
}

unint64_t sub_256A623B4()
{
  unint64_t result = qword_26B2B3660;
  if (!qword_26B2B3660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B3660);
  }
  return result;
}

unint64_t sub_256A62400()
{
  unint64_t result = qword_26B2B5748;
  if (!qword_26B2B5748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5748);
  }
  return result;
}

unint64_t sub_256A6244C()
{
  return sub_256A67730((uint64_t)&unk_26B2B5460);
}

unint64_t sub_256A62474(uint64_t a1)
{
  unint64_t result = sub_256A62400();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_256A6249C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A624C8, (uint64_t (*)(void))sub_256A62514);
}

unint64_t sub_256A624C8()
{
  unint64_t result = qword_26B2B5730;
  if (!qword_26B2B5730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5730);
  }
  return result;
}

unint64_t sub_256A62514()
{
  unint64_t result = qword_26B2B5740;
  if (!qword_26B2B5740)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5740);
  }
  return result;
}

unint64_t sub_256A62564()
{
  unint64_t result = qword_26B2B5738;
  if (!qword_26B2B5738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5738);
  }
  return result;
}

unint64_t sub_256A625B0(uint64_t a1)
{
  unint64_t result = sub_256A625D8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_256A625D8()
{
  unint64_t result = qword_269F79238;
  if (!qword_269F79238)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79238);
  }
  return result;
}

uint64_t sub_256A62624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A62650, (uint64_t (*)(void))sub_256A6269C);
}

unint64_t sub_256A62650()
{
  unint64_t result = qword_269F79240;
  if (!qword_269F79240)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79240);
  }
  return result;
}

unint64_t sub_256A6269C()
{
  unint64_t result = qword_269F79248;
  if (!qword_269F79248)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79248);
  }
  return result;
}

uint64_t sub_256A626E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A62714, (uint64_t (*)(void))sub_256A62760);
}

unint64_t sub_256A62714()
{
  unint64_t result = qword_269F79250;
  if (!qword_269F79250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79250);
  }
  return result;
}

unint64_t sub_256A62760()
{
  unint64_t result = qword_269F79258;
  if (!qword_269F79258)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79258);
  }
  return result;
}

unint64_t sub_256A627B0()
{
  unint64_t result = qword_269F79260;
  if (!qword_269F79260)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79260);
  }
  return result;
}

uint64_t sub_256A627FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A62828, (uint64_t (*)(void))sub_256A62874);
}

unint64_t sub_256A62828()
{
  unint64_t result = qword_26B2B3530;
  if (!qword_26B2B3530)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B3530);
  }
  return result;
}

unint64_t sub_256A62874()
{
  unint64_t result = qword_26B2B3528;
  if (!qword_26B2B3528)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B3528);
  }
  return result;
}

uint64_t sub_256A628C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A628EC, (uint64_t (*)(void))sub_256A62938);
}

unint64_t sub_256A628EC()
{
  unint64_t result = qword_26B2B59A0;
  if (!qword_26B2B59A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B59A0);
  }
  return result;
}

unint64_t sub_256A62938()
{
  unint64_t result = qword_26B2B59B0;
  if (!qword_26B2B59B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B59B0);
  }
  return result;
}

uint64_t sub_256A62984(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A629B0, (uint64_t (*)(void))sub_256A629FC);
}

unint64_t sub_256A629B0()
{
  unint64_t result = qword_26B2B52A8;
  if (!qword_26B2B52A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B52A8);
  }
  return result;
}

unint64_t sub_256A629FC()
{
  unint64_t result = qword_26B2B3650;
  if (!qword_26B2B3650)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B3650);
  }
  return result;
}

unint64_t sub_256A62A48()
{
  unint64_t result = qword_26B2B5FF8;
  if (!qword_26B2B5FF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5FF8);
  }
  return result;
}

unint64_t sub_256A62A94()
{
  return sub_256A67730((uint64_t)&unk_269F79268);
}

unint64_t sub_256A62ABC(uint64_t a1)
{
  unint64_t result = sub_256A62A48();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_256A62AE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A62B10, (uint64_t (*)(void))sub_256A62B5C);
}

unint64_t sub_256A62B10()
{
  unint64_t result = qword_26B2B5FE0;
  if (!qword_26B2B5FE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5FE0);
  }
  return result;
}

unint64_t sub_256A62B5C()
{
  unint64_t result = qword_26B2B5FF0;
  if (!qword_26B2B5FF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5FF0);
  }
  return result;
}

unint64_t sub_256A62BAC()
{
  unint64_t result = qword_26B2B5FE8;
  if (!qword_26B2B5FE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5FE8);
  }
  return result;
}

unint64_t sub_256A62BF8(uint64_t a1)
{
  unint64_t result = sub_256A62C20();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_256A62C20()
{
  unint64_t result = qword_269F79270;
  if (!qword_269F79270)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79270);
  }
  return result;
}

uint64_t sub_256A62C6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A62C98, (uint64_t (*)(void))sub_256A62CE4);
}

unint64_t sub_256A62C98()
{
  unint64_t result = qword_269F79278;
  if (!qword_269F79278)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79278);
  }
  return result;
}

unint64_t sub_256A62CE4()
{
  unint64_t result = qword_269F79280;
  if (!qword_269F79280)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79280);
  }
  return result;
}

uint64_t sub_256A62D30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A62D5C, (uint64_t (*)(void))sub_256A62DA8);
}

unint64_t sub_256A62D5C()
{
  unint64_t result = qword_269F79288;
  if (!qword_269F79288)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79288);
  }
  return result;
}

unint64_t sub_256A62DA8()
{
  unint64_t result = qword_269F79290;
  if (!qword_269F79290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79290);
  }
  return result;
}

unint64_t sub_256A62DF8()
{
  unint64_t result = qword_269F79298;
  if (!qword_269F79298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79298);
  }
  return result;
}

uint64_t sub_256A62E44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A62E70, (uint64_t (*)(void))sub_256A62EBC);
}

unint64_t sub_256A62E70()
{
  unint64_t result = qword_269F792A0;
  if (!qword_269F792A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F792A0);
  }
  return result;
}

unint64_t sub_256A62EBC()
{
  unint64_t result = qword_269F792A8;
  if (!qword_269F792A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F792A8);
  }
  return result;
}

uint64_t sub_256A62F08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A62F34, (uint64_t (*)(void))sub_256A62F80);
}

unint64_t sub_256A62F34()
{
  unint64_t result = qword_269F792B0;
  if (!qword_269F792B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F792B0);
  }
  return result;
}

unint64_t sub_256A62F80()
{
  unint64_t result = qword_269F792B8;
  if (!qword_269F792B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F792B8);
  }
  return result;
}

uint64_t sub_256A62FCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A62FF8, (uint64_t (*)(void))sub_256A63044);
}

unint64_t sub_256A62FF8()
{
  unint64_t result = qword_269F792C0;
  if (!qword_269F792C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F792C0);
  }
  return result;
}

unint64_t sub_256A63044()
{
  unint64_t result = qword_269F792C8;
  if (!qword_269F792C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F792C8);
  }
  return result;
}

unint64_t sub_256A63090()
{
  unint64_t result = qword_269F792D0;
  if (!qword_269F792D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F792D0);
  }
  return result;
}

unint64_t sub_256A630DC()
{
  return sub_256A67730((uint64_t)&unk_269F792D8);
}

unint64_t sub_256A63104(uint64_t a1)
{
  unint64_t result = sub_256A63090();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_256A6312C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A63158, (uint64_t (*)(void))sub_256A631A4);
}

unint64_t sub_256A63158()
{
  unint64_t result = qword_269F792E8;
  if (!qword_269F792E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F792E8);
  }
  return result;
}

unint64_t sub_256A631A4()
{
  unint64_t result = qword_269F792F0;
  if (!qword_269F792F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F792F0);
  }
  return result;
}

unint64_t sub_256A631F4()
{
  unint64_t result = qword_269F792F8;
  if (!qword_269F792F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F792F8);
  }
  return result;
}

unint64_t sub_256A63240(uint64_t a1)
{
  unint64_t result = sub_256A63268();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_256A63268()
{
  unint64_t result = qword_269F79300;
  if (!qword_269F79300)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79300);
  }
  return result;
}

uint64_t sub_256A632B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A632E0, (uint64_t (*)(void))sub_256A6332C);
}

unint64_t sub_256A632E0()
{
  unint64_t result = qword_269F79308;
  if (!qword_269F79308)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79308);
  }
  return result;
}

unint64_t sub_256A6332C()
{
  unint64_t result = qword_269F79310;
  if (!qword_269F79310)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79310);
  }
  return result;
}

uint64_t sub_256A63378(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A633A4, (uint64_t (*)(void))sub_256A633F0);
}

unint64_t sub_256A633A4()
{
  unint64_t result = qword_269F79318;
  if (!qword_269F79318)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79318);
  }
  return result;
}

unint64_t sub_256A633F0()
{
  unint64_t result = qword_269F79320;
  if (!qword_269F79320)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79320);
  }
  return result;
}

unint64_t sub_256A63440()
{
  unint64_t result = qword_269F79328;
  if (!qword_269F79328)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79328);
  }
  return result;
}

uint64_t sub_256A6348C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A634B8, (uint64_t (*)(void))sub_256A63504);
}

unint64_t sub_256A634B8()
{
  unint64_t result = qword_26B2B34E8;
  if (!qword_26B2B34E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B34E8);
  }
  return result;
}

unint64_t sub_256A63504()
{
  unint64_t result = qword_26B2B34E0;
  if (!qword_26B2B34E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B34E0);
  }
  return result;
}

uint64_t sub_256A63550(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A6357C, (uint64_t (*)(void))sub_256A635C8);
}

unint64_t sub_256A6357C()
{
  unint64_t result = qword_26B2B5038;
  if (!qword_26B2B5038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5038);
  }
  return result;
}

unint64_t sub_256A635C8()
{
  unint64_t result = qword_26B2B5048;
  if (!qword_26B2B5048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5048);
  }
  return result;
}

uint64_t sub_256A63614(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A63640, (uint64_t (*)(void))sub_256A6368C);
}

unint64_t sub_256A63640()
{
  unint64_t result = qword_26B2B5230;
  if (!qword_26B2B5230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5230);
  }
  return result;
}

unint64_t sub_256A6368C()
{
  unint64_t result = qword_26B2B3610;
  if (!qword_26B2B3610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B3610);
  }
  return result;
}

unint64_t sub_256A636D8()
{
  unint64_t result = qword_26B2B5670;
  if (!qword_26B2B5670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5670);
  }
  return result;
}

unint64_t sub_256A63724()
{
  return sub_256A67730((uint64_t)&unk_26B2B3490);
}

unint64_t sub_256A6374C(uint64_t a1)
{
  unint64_t result = sub_256A636D8();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_256A63774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A637A0, (uint64_t (*)(void))sub_256A637EC);
}

unint64_t sub_256A637A0()
{
  unint64_t result = qword_26B2B5658;
  if (!qword_26B2B5658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5658);
  }
  return result;
}

unint64_t sub_256A637EC()
{
  unint64_t result = qword_26B2B5668;
  if (!qword_26B2B5668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5668);
  }
  return result;
}

unint64_t sub_256A6383C()
{
  unint64_t result = qword_26B2B5660;
  if (!qword_26B2B5660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5660);
  }
  return result;
}

unint64_t sub_256A63888(uint64_t a1)
{
  unint64_t result = sub_256A638B0();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_256A638B0()
{
  unint64_t result = qword_269F79330;
  if (!qword_269F79330)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79330);
  }
  return result;
}

uint64_t sub_256A638FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A63928, (uint64_t (*)(void))sub_256A63974);
}

unint64_t sub_256A63928()
{
  unint64_t result = qword_269F79338;
  if (!qword_269F79338)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79338);
  }
  return result;
}

unint64_t sub_256A63974()
{
  unint64_t result = qword_269F79340;
  if (!qword_269F79340)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79340);
  }
  return result;
}

uint64_t sub_256A639C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A639EC, (uint64_t (*)(void))sub_256A63A38);
}

unint64_t sub_256A639EC()
{
  unint64_t result = qword_269F79348;
  if (!qword_269F79348)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79348);
  }
  return result;
}

unint64_t sub_256A63A38()
{
  unint64_t result = qword_269F79350;
  if (!qword_269F79350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79350);
  }
  return result;
}

unint64_t sub_256A63A88()
{
  unint64_t result = qword_269F79358;
  if (!qword_269F79358)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79358);
  }
  return result;
}

uint64_t sub_256A63AD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A63B00, (uint64_t (*)(void))sub_256A63B4C);
}

unint64_t sub_256A63B00()
{
  unint64_t result = qword_269F79360;
  if (!qword_269F79360)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79360);
  }
  return result;
}

unint64_t sub_256A63B4C()
{
  unint64_t result = qword_269F79368;
  if (!qword_269F79368)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79368);
  }
  return result;
}

uint64_t sub_256A63B98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A63BC4, (uint64_t (*)(void))sub_256A63C10);
}

unint64_t sub_256A63BC4()
{
  unint64_t result = qword_26B2B54F0;
  if (!qword_26B2B54F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B54F0);
  }
  return result;
}

unint64_t sub_256A63C10()
{
  unint64_t result = qword_26B2B5500;
  if (!qword_26B2B5500)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5500);
  }
  return result;
}

uint64_t sub_256A63C5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A63C88, (uint64_t (*)(void))sub_256A63CD4);
}

unint64_t sub_256A63C88()
{
  unint64_t result = qword_26B2B5268;
  if (!qword_26B2B5268)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5268);
  }
  return result;
}

unint64_t sub_256A63CD4()
{
  unint64_t result = qword_26B2B3628;
  if (!qword_26B2B3628)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B3628);
  }
  return result;
}

unint64_t sub_256A63D20()
{
  unint64_t result = qword_26B2B5928;
  if (!qword_26B2B5928)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5928);
  }
  return result;
}

unint64_t sub_256A63D6C()
{
  return sub_256A67730((uint64_t)&unk_269F79370);
}

unint64_t sub_256A63D94(uint64_t a1)
{
  unint64_t result = sub_256A63D20();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_256A63DBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A63DE8, (uint64_t (*)(void))sub_256A63E34);
}

unint64_t sub_256A63DE8()
{
  unint64_t result = qword_26B2B5910;
  if (!qword_26B2B5910)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5910);
  }
  return result;
}

unint64_t sub_256A63E34()
{
  unint64_t result = qword_26B2B5920;
  if (!qword_26B2B5920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5920);
  }
  return result;
}

unint64_t sub_256A63E84()
{
  unint64_t result = qword_26B2B5918;
  if (!qword_26B2B5918)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5918);
  }
  return result;
}

unint64_t sub_256A63ED0(uint64_t a1)
{
  unint64_t result = sub_256A63EF8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_256A63EF8()
{
  unint64_t result = qword_269F79380;
  if (!qword_269F79380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79380);
  }
  return result;
}

uint64_t sub_256A63F44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A63F70, (uint64_t (*)(void))sub_256A63FBC);
}

unint64_t sub_256A63F70()
{
  unint64_t result = qword_269F79388;
  if (!qword_269F79388)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79388);
  }
  return result;
}

unint64_t sub_256A63FBC()
{
  unint64_t result = qword_269F79390;
  if (!qword_269F79390)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79390);
  }
  return result;
}

uint64_t sub_256A64008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A64034, (uint64_t (*)(void))sub_256A64080);
}

unint64_t sub_256A64034()
{
  unint64_t result = qword_269F79398;
  if (!qword_269F79398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79398);
  }
  return result;
}

unint64_t sub_256A64080()
{
  unint64_t result = qword_269F793A0;
  if (!qword_269F793A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F793A0);
  }
  return result;
}

unint64_t sub_256A640D0()
{
  unint64_t result = qword_269F793A8;
  if (!qword_269F793A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F793A8);
  }
  return result;
}

uint64_t sub_256A6411C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A64148, (uint64_t (*)(void))sub_256A64194);
}

unint64_t sub_256A64148()
{
  unint64_t result = qword_26B2B3508;
  if (!qword_26B2B3508)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B3508);
  }
  return result;
}

unint64_t sub_256A64194()
{
  unint64_t result = qword_26B2B3500;
  if (!qword_26B2B3500)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B3500);
  }
  return result;
}

uint64_t sub_256A641E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A6420C, (uint64_t (*)(void))sub_256A64258);
}

unint64_t sub_256A6420C()
{
  unint64_t result = qword_26B2B5050;
  if (!qword_26B2B5050)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5050);
  }
  return result;
}

unint64_t sub_256A64258()
{
  unint64_t result = qword_26B2B5060;
  if (!qword_26B2B5060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5060);
  }
  return result;
}

uint64_t sub_256A642A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A642D0, (uint64_t (*)(void))sub_256A6431C);
}

unint64_t sub_256A642D0()
{
  unint64_t result = qword_26B2B5238;
  if (!qword_26B2B5238)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5238);
  }
  return result;
}

unint64_t sub_256A6431C()
{
  unint64_t result = qword_26B2B3618;
  if (!qword_26B2B3618)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B3618);
  }
  return result;
}

unint64_t sub_256A64368()
{
  unint64_t result = qword_26B2B5690;
  if (!qword_26B2B5690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5690);
  }
  return result;
}

unint64_t sub_256A643B4()
{
  return sub_256A67730((uint64_t)&unk_26B2B34A0);
}

unint64_t sub_256A643DC(uint64_t a1)
{
  unint64_t result = sub_256A64368();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_256A64404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A64430, (uint64_t (*)(void))sub_256A6447C);
}

unint64_t sub_256A64430()
{
  unint64_t result = qword_26B2B5678;
  if (!qword_26B2B5678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5678);
  }
  return result;
}

unint64_t sub_256A6447C()
{
  unint64_t result = qword_26B2B5688;
  if (!qword_26B2B5688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5688);
  }
  return result;
}

unint64_t sub_256A644CC()
{
  unint64_t result = qword_26B2B5680;
  if (!qword_26B2B5680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5680);
  }
  return result;
}

unint64_t sub_256A6451C()
{
  unint64_t result = qword_269F793B0;
  if (!qword_269F793B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F793B0);
  }
  return result;
}

unint64_t sub_256A6456C()
{
  unint64_t result = qword_269F793B8;
  if (!qword_269F793B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F793B8);
  }
  return result;
}

uint64_t sub_256A645B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A645E4, (uint64_t (*)(void))sub_256A64630);
}

unint64_t sub_256A645E4()
{
  unint64_t result = qword_26B2B5A00;
  if (!qword_26B2B5A00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5A00);
  }
  return result;
}

unint64_t sub_256A64630()
{
  unint64_t result = qword_26B2B59F8;
  if (!qword_26B2B59F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B59F8);
  }
  return result;
}

uint64_t sub_256A6467C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A646A8, (uint64_t (*)(void))sub_256A646F4);
}

unint64_t sub_256A646A8()
{
  unint64_t result = qword_26B2B5638;
  if (!qword_26B2B5638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5638);
  }
  return result;
}

unint64_t sub_256A646F4()
{
  unint64_t result = qword_26B2B5630;
  if (!qword_26B2B5630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5630);
  }
  return result;
}

uint64_t sub_256A64740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A6476C, (uint64_t (*)(void))sub_256A647B8);
}

unint64_t sub_256A6476C()
{
  unint64_t result = qword_26B2B5228;
  if (!qword_26B2B5228)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5228);
  }
  return result;
}

unint64_t sub_256A647B8()
{
  unint64_t result = qword_26B2B35F8;
  if (!qword_26B2B35F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B35F8);
  }
  return result;
}

unint64_t sub_256A64808()
{
  unint64_t result = qword_26B2B55F0;
  if (!qword_26B2B55F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B55F0);
  }
  return result;
}

unint64_t sub_256A64854(uint64_t a1)
{
  unint64_t result = sub_256A6487C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_256A6487C()
{
  unint64_t result = qword_26B2B5650;
  if (!qword_26B2B5650)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5650);
  }
  return result;
}

unint64_t sub_256A648C8()
{
  return sub_256A67730((uint64_t)&unk_26B2B5440);
}

unint64_t sub_256A648F0(uint64_t a1)
{
  unint64_t result = sub_256A64918();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_256A64918()
{
  unint64_t result = qword_26B2B5D60;
  if (!qword_26B2B5D60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5D60);
  }
  return result;
}

unint64_t sub_256A64964(uint64_t a1)
{
  unint64_t result = sub_256A6498C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_256A6498C()
{
  unint64_t result = qword_26B2B5648;
  if (!qword_26B2B5648)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5648);
  }
  return result;
}

uint64_t sub_256A649D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A64A04, (uint64_t (*)(void))sub_256A64A50);
}

unint64_t sub_256A64A04()
{
  unint64_t result = qword_26B2B5D48;
  if (!qword_26B2B5D48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5D48);
  }
  return result;
}

unint64_t sub_256A64A50()
{
  unint64_t result = qword_26B2B5D58;
  if (!qword_26B2B5D58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5D58);
  }
  return result;
}

unint64_t sub_256A64AA0()
{
  unint64_t result = qword_26B2B5D50;
  if (!qword_26B2B5D50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5D50);
  }
  return result;
}

uint64_t sub_256A64AEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A64B18, (uint64_t (*)(void))sub_256A64B64);
}

unint64_t sub_256A64B18()
{
  unint64_t result = qword_26B2B5418;
  if (!qword_26B2B5418)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5418);
  }
  return result;
}

unint64_t sub_256A64B64()
{
  unint64_t result = qword_26B2B5410;
  if (!qword_26B2B5410)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5410);
  }
  return result;
}

uint64_t sub_256A64BB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A64BDC, (uint64_t (*)(void))sub_256A64C28);
}

unint64_t sub_256A64BDC()
{
  unint64_t result = qword_26B2B54C8;
  if (!qword_26B2B54C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B54C8);
  }
  return result;
}

unint64_t sub_256A64C28()
{
  unint64_t result = qword_26B2B54D8;
  if (!qword_26B2B54D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B54D8);
  }
  return result;
}

uint64_t sub_256A64C74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A64CA0, (uint64_t (*)(void))sub_256A64CEC);
}

unint64_t sub_256A64CA0()
{
  unint64_t result = qword_26B2B51D0;
  if (!qword_26B2B51D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B51D0);
  }
  return result;
}

unint64_t sub_256A64CEC()
{
  unint64_t result = qword_26B2B3548;
  if (!qword_26B2B3548)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B3548);
  }
  return result;
}

unint64_t sub_256A64D38(uint64_t a1)
{
  unint64_t result = sub_256A64D60();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_256A64D60()
{
  unint64_t result = qword_26B2B54E0;
  if (!qword_26B2B54E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B54E0);
  }
  return result;
}

unint64_t sub_256A64DAC()
{
  return sub_256A67730((uint64_t)&unk_26B2B5470);
}

unint64_t sub_256A64DD4(uint64_t a1)
{
  unint64_t result = sub_256A64DFC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_256A64DFC()
{
  unint64_t result = qword_26B2B5820;
  if (!qword_26B2B5820)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5820);
  }
  return result;
}

uint64_t sub_256A64E48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A64E74, (uint64_t (*)(void))sub_256A64EC0);
}

unint64_t sub_256A64E74()
{
  unint64_t result = qword_26B2B5808;
  if (!qword_26B2B5808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5808);
  }
  return result;
}

unint64_t sub_256A64EC0()
{
  unint64_t result = qword_26B2B5818;
  if (!qword_26B2B5818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5818);
  }
  return result;
}

unint64_t sub_256A64F10()
{
  unint64_t result = qword_26B2B5810;
  if (!qword_26B2B5810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5810);
  }
  return result;
}

uint64_t sub_256A64F5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A64F88, (uint64_t (*)(void))sub_256A64FD4);
}

unint64_t sub_256A64F88()
{
  unint64_t result = qword_26B2B57A8;
  if (!qword_26B2B57A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B57A8);
  }
  return result;
}

unint64_t sub_256A64FD4()
{
  unint64_t result = qword_26B2B57A0;
  if (!qword_26B2B57A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B57A0);
  }
  return result;
}

uint64_t sub_256A65020(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A6504C, (uint64_t (*)(void))sub_256A64808);
}

unint64_t sub_256A6504C()
{
  unint64_t result = qword_26B2B55F8;
  if (!qword_26B2B55F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B55F8);
  }
  return result;
}

uint64_t sub_256A65098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A650C4, (uint64_t (*)(void))sub_256A65110);
}

unint64_t sub_256A650C4()
{
  unint64_t result = qword_26B2B57B0;
  if (!qword_26B2B57B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B57B0);
  }
  return result;
}

unint64_t sub_256A65110()
{
  unint64_t result = qword_26B2B3450;
  if (!qword_26B2B3450)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B3450);
  }
  return result;
}

unint64_t sub_256A65160()
{
  unint64_t result = qword_26B2B5018;
  if (!qword_26B2B5018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5018);
  }
  return result;
}

unint64_t sub_256A651AC(uint64_t a1)
{
  unint64_t result = sub_256A651D4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_256A651D4()
{
  unint64_t result = qword_26B2B5608;
  if (!qword_26B2B5608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5608);
  }
  return result;
}

unint64_t sub_256A65220()
{
  return sub_256A67730((uint64_t)&unk_26B2B5318);
}

unint64_t sub_256A65248(uint64_t a1)
{
  unint64_t result = sub_256A65270();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_256A65270()
{
  unint64_t result = qword_26B2B5D40;
  if (!qword_26B2B5D40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5D40);
  }
  return result;
}

unint64_t sub_256A652BC(uint64_t a1)
{
  unint64_t result = sub_256A652E4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_256A652E4()
{
  unint64_t result = qword_26B2B5600;
  if (!qword_26B2B5600)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5600);
  }
  return result;
}

uint64_t sub_256A65330(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A6535C, (uint64_t (*)(void))sub_256A653A8);
}

unint64_t sub_256A6535C()
{
  unint64_t result = qword_26B2B5D28;
  if (!qword_26B2B5D28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5D28);
  }
  return result;
}

unint64_t sub_256A653A8()
{
  unint64_t result = qword_26B2B5D38;
  if (!qword_26B2B5D38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5D38);
  }
  return result;
}

unint64_t sub_256A653F8()
{
  unint64_t result = qword_26B2B5D30;
  if (!qword_26B2B5D30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5D30);
  }
  return result;
}

unint64_t sub_256A65444(uint64_t a1)
{
  unint64_t result = sub_256A6546C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_256A6546C()
{
  unint64_t result = qword_269F793C0;
  if (!qword_269F793C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F793C0);
  }
  return result;
}

uint64_t sub_256A654B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A654E4, (uint64_t (*)(void))sub_256A65530);
}

unint64_t sub_256A654E4()
{
  unint64_t result = qword_269F793C8;
  if (!qword_269F793C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F793C8);
  }
  return result;
}

unint64_t sub_256A65530()
{
  unint64_t result = qword_269F793D0;
  if (!qword_269F793D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F793D0);
  }
  return result;
}

uint64_t sub_256A6557C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A655A8, (uint64_t (*)(void))sub_256A655F4);
}

unint64_t sub_256A655A8()
{
  unint64_t result = qword_269F793D8;
  if (!qword_269F793D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F793D8);
  }
  return result;
}

unint64_t sub_256A655F4()
{
  unint64_t result = qword_269F793E0;
  if (!qword_269F793E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F793E0);
  }
  return result;
}

unint64_t sub_256A65644()
{
  unint64_t result = qword_269F793E8;
  if (!qword_269F793E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F793E8);
  }
  return result;
}

uint64_t sub_256A65690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A656BC, (uint64_t (*)(void))sub_256A65708);
}

unint64_t sub_256A656BC()
{
  unint64_t result = qword_26B2B5A20;
  if (!qword_26B2B5A20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5A20);
  }
  return result;
}

unint64_t sub_256A65708()
{
  unint64_t result = qword_26B2B5A18;
  if (!qword_26B2B5A18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5A18);
  }
  return result;
}

uint64_t sub_256A65754(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A65780, (uint64_t (*)(void))sub_256A657CC);
}

unint64_t sub_256A65780()
{
  unint64_t result = qword_26B2B5AE0;
  if (!qword_26B2B5AE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5AE0);
  }
  return result;
}

unint64_t sub_256A657CC()
{
  unint64_t result = qword_26B2B5AF0;
  if (!qword_26B2B5AF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5AF0);
  }
  return result;
}

uint64_t sub_256A65818(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A65844, (uint64_t (*)(void))sub_256A65890);
}

unint64_t sub_256A65844()
{
  unint64_t result = qword_26B2B5298;
  if (!qword_26B2B5298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5298);
  }
  return result;
}

unint64_t sub_256A65890()
{
  unint64_t result = qword_26B2B3640;
  if (!qword_26B2B3640)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B3640);
  }
  return result;
}

unint64_t sub_256A658DC()
{
  unint64_t result = qword_26B2B5FD8;
  if (!qword_26B2B5FD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5FD8);
  }
  return result;
}

unint64_t sub_256A65928()
{
  return sub_256A67730((uint64_t)&unk_26B2B5450);
}

unint64_t sub_256A65950(uint64_t a1)
{
  unint64_t result = sub_256A658DC();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_256A65978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A659A4, (uint64_t (*)(void))sub_256A659F0);
}

unint64_t sub_256A659A4()
{
  unint64_t result = qword_26B2B5FC0;
  if (!qword_26B2B5FC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5FC0);
  }
  return result;
}

unint64_t sub_256A659F0()
{
  unint64_t result = qword_26B2B5FD0;
  if (!qword_26B2B5FD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5FD0);
  }
  return result;
}

unint64_t sub_256A65A40()
{
  unint64_t result = qword_26B2B5FC8;
  if (!qword_26B2B5FC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5FC8);
  }
  return result;
}

unint64_t sub_256A65A8C(uint64_t a1)
{
  unint64_t result = sub_256A65AB4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_256A65AB4()
{
  unint64_t result = qword_269F793F0;
  if (!qword_269F793F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F793F0);
  }
  return result;
}

uint64_t sub_256A65B00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A65B2C, (uint64_t (*)(void))sub_256A65B78);
}

unint64_t sub_256A65B2C()
{
  unint64_t result = qword_269F793F8;
  if (!qword_269F793F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F793F8);
  }
  return result;
}

unint64_t sub_256A65B78()
{
  unint64_t result = qword_269F79400;
  if (!qword_269F79400)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79400);
  }
  return result;
}

uint64_t sub_256A65BC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A65BF0, (uint64_t (*)(void))sub_256A65C3C);
}

unint64_t sub_256A65BF0()
{
  unint64_t result = qword_269F79408;
  if (!qword_269F79408)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79408);
  }
  return result;
}

unint64_t sub_256A65C3C()
{
  unint64_t result = qword_269F79410;
  if (!qword_269F79410)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79410);
  }
  return result;
}

unint64_t sub_256A65C8C()
{
  unint64_t result = qword_269F79418;
  if (!qword_269F79418)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79418);
  }
  return result;
}

uint64_t sub_256A65CD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A65D04, (uint64_t (*)(void))sub_256A65D50);
}

unint64_t sub_256A65D04()
{
  unint64_t result = qword_26B2B5438;
  if (!qword_26B2B5438)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5438);
  }
  return result;
}

unint64_t sub_256A65D50()
{
  unint64_t result = qword_26B2B5430;
  if (!qword_26B2B5430)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5430);
  }
  return result;
}

uint64_t sub_256A65D9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A65DC8, (uint64_t (*)(void))sub_256A65E14);
}

unint64_t sub_256A65DC8()
{
  unint64_t result = qword_26B2B54B8;
  if (!qword_26B2B54B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B54B8);
  }
  return result;
}

unint64_t sub_256A65E14()
{
  unint64_t result = qword_26B2B54B0;
  if (!qword_26B2B54B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B54B0);
  }
  return result;
}

uint64_t sub_256A65E60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A65E8C, (uint64_t (*)(void))sub_256A65ED8);
}

unint64_t sub_256A65E8C()
{
  unint64_t result = qword_26B2B51C8;
  if (!qword_26B2B51C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B51C8);
  }
  return result;
}

unint64_t sub_256A65ED8()
{
  unint64_t result = qword_26B2B3540;
  if (!qword_26B2B3540)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B3540);
  }
  return result;
}

unint64_t sub_256A65F24(uint64_t a1)
{
  unint64_t result = sub_256A65F4C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_256A65F4C()
{
  unint64_t result = qword_26B2B5800;
  if (!qword_26B2B5800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5800);
  }
  return result;
}

unint64_t sub_256A65F98()
{
  return sub_256A67730((uint64_t)&unk_26B2B5480);
}

uint64_t sub_256A65FC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A65FEC, (uint64_t (*)(void))sub_256A66038);
}

unint64_t sub_256A65FEC()
{
  unint64_t result = qword_26B2B57F0;
  if (!qword_26B2B57F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B57F0);
  }
  return result;
}

unint64_t sub_256A66038()
{
  unint64_t result = qword_26B2B57F8;
  if (!qword_26B2B57F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B57F8);
  }
  return result;
}

unint64_t sub_256A66088()
{
  unint64_t result = qword_26B2B5768;
  if (!qword_26B2B5768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5768);
  }
  return result;
}

unint64_t sub_256A660D4(uint64_t a1)
{
  unint64_t result = sub_256A660FC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_256A660FC()
{
  unint64_t result = qword_26B2B4FF0;
  if (!qword_26B2B4FF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B4FF0);
  }
  return result;
}

uint64_t sub_256A66148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A66174, (uint64_t (*)(void))sub_256A661C0);
}

unint64_t sub_256A66174()
{
  unint64_t result = qword_26B2B5210;
  if (!qword_26B2B5210)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5210);
  }
  return result;
}

unint64_t sub_256A661C0()
{
  unint64_t result = qword_26B2B3438;
  if (!qword_26B2B3438)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B3438);
  }
  return result;
}

unint64_t sub_256A6620C(uint64_t a1)
{
  unint64_t result = sub_256A66234();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_256A66234()
{
  unint64_t result = qword_26B2B55D0;
  if (!qword_26B2B55D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B55D0);
  }
  return result;
}

uint64_t sub_256A66280(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A662AC, (uint64_t (*)(void))sub_256A662F8);
}

unint64_t sub_256A662AC()
{
  unint64_t result = qword_26B2B55B8;
  if (!qword_26B2B55B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B55B8);
  }
  return result;
}

unint64_t sub_256A662F8()
{
  unint64_t result = qword_26B2B55C8;
  if (!qword_26B2B55C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B55C8);
  }
  return result;
}

unint64_t sub_256A66348()
{
  unint64_t result = qword_26B2B55C0;
  if (!qword_26B2B55C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B55C0);
  }
  return result;
}

uint64_t sub_256A66394(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A663C0, (uint64_t (*)(void))sub_256A6640C);
}

unint64_t sub_256A663C0()
{
  unint64_t result = qword_269F79420;
  if (!qword_269F79420)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79420);
  }
  return result;
}

unint64_t sub_256A6640C()
{
  unint64_t result = qword_269F79428;
  if (!qword_269F79428)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79428);
  }
  return result;
}

uint64_t sub_256A66458(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A66484, (uint64_t (*)(void))sub_256A664D0);
}

unint64_t sub_256A66484()
{
  unint64_t result = qword_269F79430;
  if (!qword_269F79430)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79430);
  }
  return result;
}

unint64_t sub_256A664D0()
{
  unint64_t result = qword_269F79438;
  if (!qword_269F79438)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79438);
  }
  return result;
}

uint64_t sub_256A6651C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A66548, (uint64_t (*)(void))sub_256A66594);
}

unint64_t sub_256A66548()
{
  unint64_t result = qword_269F79440;
  if (!qword_269F79440)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79440);
  }
  return result;
}

unint64_t sub_256A66594()
{
  unint64_t result = qword_269F79448;
  if (!qword_269F79448)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79448);
  }
  return result;
}

unint64_t sub_256A665E0(uint64_t a1)
{
  unint64_t result = sub_256A66608();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_256A66608()
{
  unint64_t result = qword_269F79450;
  if (!qword_269F79450)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79450);
  }
  return result;
}

unint64_t sub_256A66654()
{
  return sub_256A67730((uint64_t)&unk_269F79458);
}

unint64_t sub_256A6667C(uint64_t a1)
{
  unint64_t result = sub_256A666A4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_256A666A4()
{
  unint64_t result = qword_269F79468;
  if (!qword_269F79468)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79468);
  }
  return result;
}

uint64_t sub_256A666F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A6671C, (uint64_t (*)(void))sub_256A66768);
}

unint64_t sub_256A6671C()
{
  unint64_t result = qword_269F79470;
  if (!qword_269F79470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79470);
  }
  return result;
}

unint64_t sub_256A66768()
{
  unint64_t result = qword_269F79478;
  if (!qword_269F79478)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79478);
  }
  return result;
}

unint64_t sub_256A667B8()
{
  unint64_t result = qword_269F79480;
  if (!qword_269F79480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79480);
  }
  return result;
}

unint64_t sub_256A66804(uint64_t a1)
{
  unint64_t result = sub_256A6682C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_256A6682C()
{
  unint64_t result = qword_269F79488;
  if (!qword_269F79488)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79488);
  }
  return result;
}

uint64_t sub_256A66878(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A668A4, (uint64_t (*)(void))sub_256A668F0);
}

unint64_t sub_256A668A4()
{
  unint64_t result = qword_269F79490;
  if (!qword_269F79490)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79490);
  }
  return result;
}

unint64_t sub_256A668F0()
{
  unint64_t result = qword_269F79498;
  if (!qword_269F79498)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79498);
  }
  return result;
}

uint64_t sub_256A6693C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A66968, (uint64_t (*)(void))sub_256A669B4);
}

unint64_t sub_256A66968()
{
  unint64_t result = qword_269F794A0;
  if (!qword_269F794A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F794A0);
  }
  return result;
}

unint64_t sub_256A669B4()
{
  unint64_t result = qword_269F794A8;
  if (!qword_269F794A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F794A8);
  }
  return result;
}

unint64_t sub_256A66A04()
{
  unint64_t result = qword_269F794B0;
  if (!qword_269F794B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F794B0);
  }
  return result;
}

uint64_t sub_256A66A50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A66A7C, (uint64_t (*)(void))sub_256A66AC8);
}

unint64_t sub_256A66A7C()
{
  unint64_t result = qword_26B2B5260;
  if (!qword_26B2B5260)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5260);
  }
  return result;
}

unint64_t sub_256A66AC8()
{
  unint64_t result = qword_26B2B5258;
  if (!qword_26B2B5258)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5258);
  }
  return result;
}

uint64_t sub_256A66B14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A66B40, (uint64_t (*)(void))sub_256A66B8C);
}

unint64_t sub_256A66B40()
{
  unint64_t result = qword_26B2B5088;
  if (!qword_26B2B5088)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5088);
  }
  return result;
}

unint64_t sub_256A66B8C()
{
  unint64_t result = qword_26B2B5098;
  if (!qword_26B2B5098)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5098);
  }
  return result;
}

uint64_t sub_256A66BD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A66C04, (uint64_t (*)(void))sub_256A66C50);
}

unint64_t sub_256A66C04()
{
  unint64_t result = qword_26B2B5290;
  if (!qword_26B2B5290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5290);
  }
  return result;
}

unint64_t sub_256A66C50()
{
  unint64_t result = qword_26B2B3630;
  if (!qword_26B2B3630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B3630);
  }
  return result;
}

unint64_t sub_256A66C9C()
{
  unint64_t result = qword_26B2B56D0;
  if (!qword_26B2B56D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B56D0);
  }
  return result;
}

unint64_t sub_256A66CE8()
{
  return sub_256A67730((uint64_t)&unk_26B2B51E0);
}

unint64_t sub_256A66D10(uint64_t a1)
{
  unint64_t result = sub_256A66C9C();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_256A66D38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A66D64, (uint64_t (*)(void))sub_256A66DB0);
}

unint64_t sub_256A66D64()
{
  unint64_t result = qword_26B2B56B8;
  if (!qword_26B2B56B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B56B8);
  }
  return result;
}

unint64_t sub_256A66DB0()
{
  unint64_t result = qword_26B2B56C8;
  if (!qword_26B2B56C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B56C8);
  }
  return result;
}

unint64_t sub_256A66E00()
{
  unint64_t result = qword_26B2B56C0;
  if (!qword_26B2B56C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B56C0);
  }
  return result;
}

unint64_t sub_256A66E4C(uint64_t a1)
{
  unint64_t result = sub_256A66E74();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_256A66E74()
{
  unint64_t result = qword_269F794B8;
  if (!qword_269F794B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F794B8);
  }
  return result;
}

uint64_t sub_256A66EC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A66EEC, (uint64_t (*)(void))sub_256A66F38);
}

unint64_t sub_256A66EEC()
{
  unint64_t result = qword_269F794C0;
  if (!qword_269F794C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F794C0);
  }
  return result;
}

unint64_t sub_256A66F38()
{
  unint64_t result = qword_269F794C8;
  if (!qword_269F794C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F794C8);
  }
  return result;
}

uint64_t sub_256A66F84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A66FB0, (uint64_t (*)(void))sub_256A66FFC);
}

unint64_t sub_256A66FB0()
{
  unint64_t result = qword_269F794D0;
  if (!qword_269F794D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F794D0);
  }
  return result;
}

unint64_t sub_256A66FFC()
{
  unint64_t result = qword_269F794D8;
  if (!qword_269F794D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F794D8);
  }
  return result;
}

unint64_t sub_256A6704C()
{
  unint64_t result = qword_269F794E0;
  if (!qword_269F794E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F794E0);
  }
  return result;
}

uint64_t sub_256A67098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A670C4, (uint64_t (*)(void))sub_256A67110);
}

unint64_t sub_256A670C4()
{
  unint64_t result = qword_26B2B5288;
  if (!qword_26B2B5288)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5288);
  }
  return result;
}

unint64_t sub_256A67110()
{
  unint64_t result = qword_26B2B5280;
  if (!qword_26B2B5280)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5280);
  }
  return result;
}

uint64_t sub_256A6715C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A67188, (uint64_t (*)(void))sub_256A671D4);
}

unint64_t sub_256A67188()
{
  unint64_t result = qword_26B2B50A0;
  if (!qword_26B2B50A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B50A0);
  }
  return result;
}

unint64_t sub_256A671D4()
{
  unint64_t result = qword_26B2B50B0;
  if (!qword_26B2B50B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B50B0);
  }
  return result;
}

uint64_t sub_256A67220(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A6724C, (uint64_t (*)(void))sub_256A67298);
}

unint64_t sub_256A6724C()
{
  unint64_t result = qword_26B2B52A0;
  if (!qword_26B2B52A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B52A0);
  }
  return result;
}

unint64_t sub_256A67298()
{
  unint64_t result = qword_26B2B3648;
  if (!qword_26B2B3648)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B3648);
  }
  return result;
}

unint64_t sub_256A672E4()
{
  unint64_t result = qword_26B2B5728;
  if (!qword_26B2B5728)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5728);
  }
  return result;
}

unint64_t sub_256A67330()
{
  return sub_256A67730((uint64_t)&unk_26B2B51F0);
}

unint64_t sub_256A67358(uint64_t a1)
{
  unint64_t result = sub_256A672E4();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_256A67380(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A673AC, (uint64_t (*)(void))sub_256A673F8);
}

unint64_t sub_256A673AC()
{
  unint64_t result = qword_26B2B5710;
  if (!qword_26B2B5710)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5710);
  }
  return result;
}

unint64_t sub_256A673F8()
{
  unint64_t result = qword_26B2B5720;
  if (!qword_26B2B5720)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5720);
  }
  return result;
}

unint64_t sub_256A67448()
{
  unint64_t result = qword_26B2B5718;
  if (!qword_26B2B5718)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5718);
  }
  return result;
}

uint64_t sub_256A67494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A674C0, (uint64_t (*)(void))sub_256A6750C);
}

unint64_t sub_256A674C0()
{
  unint64_t result = qword_26B2B5220;
  if (!qword_26B2B5220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5220);
  }
  return result;
}

unint64_t sub_256A6750C()
{
  unint64_t result = qword_26B2B5218;
  if (!qword_26B2B5218)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5218);
  }
  return result;
}

uint64_t sub_256A67558(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A67584, (uint64_t (*)(void))sub_256A65160);
}

unint64_t sub_256A67584()
{
  unint64_t result = qword_26B2B5020;
  if (!qword_26B2B5020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5020);
  }
  return result;
}

uint64_t sub_256A675D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A675FC, (uint64_t (*)(void))sub_256A67648);
}

unint64_t sub_256A675FC()
{
  unint64_t result = qword_26B2B50D8;
  if (!qword_26B2B50D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B50D8);
  }
  return result;
}

unint64_t sub_256A67648()
{
  unint64_t result = qword_26B2B35F0;
  if (!qword_26B2B35F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B35F0);
  }
  return result;
}

unint64_t sub_256A67694(uint64_t a1)
{
  unint64_t result = sub_256A676BC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_256A676BC()
{
  unint64_t result = qword_26B2B5030;
  if (!qword_26B2B5030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5030);
  }
  return result;
}

unint64_t sub_256A67708()
{
  return sub_256A67730((uint64_t)&unk_26B2B5200);
}

unint64_t sub_256A67730(uint64_t a1)
{
  unint64_t result = sub_256A6EA00(a1);
  if (!result)
  {
    sub_256A49664(v3);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t sub_256A6777C(uint64_t a1)
{
  unint64_t result = sub_256A677A4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_256A677A4()
{
  unint64_t result = qword_26B2B5628;
  if (!qword_26B2B5628)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5628);
  }
  return result;
}

uint64_t sub_256A677F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A6781C(a1, a2, a3, (uint64_t (*)(void))sub_256A67858, (uint64_t (*)(void))sub_256A678A4);
}

uint64_t sub_256A6781C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  *(void *)(a1 + 8) = a4();
  uint64_t result = a5();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_256A67858()
{
  unint64_t result = qword_26B2B5610;
  if (!qword_26B2B5610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5610);
  }
  return result;
}

unint64_t sub_256A678A4()
{
  unint64_t result = qword_26B2B5620;
  if (!qword_26B2B5620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5620);
  }
  return result;
}

unint64_t sub_256A678F4()
{
  unint64_t result = qword_26B2B5618;
  if (!qword_26B2B5618)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5618);
  }
  return result;
}

uint64_t sub_256A6794C(uint64_t a1)
{
  return a1;
}

void *initializeWithTake for ResourceConfiguration(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xB8uLL);
}

void type metadata accessor for DiffusionAdapterBase()
{
}

uint64_t getEnumTagSinglePayload for DiffusionAdapterAssetContents(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_256A679EC);
}

uint64_t sub_256A679EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_256B3F300();

  return sub_256A480C4(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for DiffusionAdapterAssetContents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_256A67A48);
}

uint64_t sub_256A67A48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_256B3F300();

  return sub_256A46F7C(a1, a2, a2, v4);
}

uint64_t type metadata accessor for DiffusionAdapterAssetContents(uint64_t a1)
{
  return sub_256A6AA68(a1, (uint64_t *)&unk_26B2B3408);
}

void type metadata accessor for DiffusionAdapterAssetMetadata()
{
}

void type metadata accessor for AssetBackedDiffusionAdapterBase()
{
}

void type metadata accessor for DiffusionModelBase()
{
}

uint64_t getEnumTagSinglePayload for DiffusionModelAssetContents(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_256A6E164);
}

uint64_t storeEnumTagSinglePayload for DiffusionModelAssetContents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_256A6E100);
}

uint64_t type metadata accessor for DiffusionModelAssetContents(uint64_t a1)
{
  return sub_256A6AA68(a1, (uint64_t *)&unk_26B2B3470);
}

void type metadata accessor for DiffusionModelAssetMetadata()
{
}

void type metadata accessor for AssetBackedDiffusionModelBase()
{
}

void type metadata accessor for DisabledUseCaseListBase()
{
}

uint64_t getEnumTagSinglePayload for DisabledUseCaseListAssetContents(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_256A6E168);
}

uint64_t storeEnumTagSinglePayload for DisabledUseCaseListAssetContents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_256A6E104);
}

uint64_t type metadata accessor for DisabledUseCaseListAssetContents(uint64_t a1)
{
  return sub_256A6AA68(a1, qword_26B2B5770);
}

void type metadata accessor for DisabledUseCaseListAssetMetadata()
{
}

void type metadata accessor for AssetBackedDisabledUseCaseListBase()
{
}

void type metadata accessor for GenerativeFunctionOverridesBase()
{
}

uint64_t getEnumTagSinglePayload for GenerativeFunctionOverridesAssetContents(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_256A6E16C);
}

uint64_t storeEnumTagSinglePayload for GenerativeFunctionOverridesAssetContents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_256A6E108);
}

uint64_t type metadata accessor for GenerativeFunctionOverridesAssetContents(uint64_t a1)
{
  return sub_256A6AA68(a1, (uint64_t *)&unk_26B2B5490);
}

void type metadata accessor for GenerativeFunctionOverridesAssetMetadata()
{
}

void type metadata accessor for AssetBackedGenerativeFunctionOverridesBase()
{
}

void type metadata accessor for HandwritingSynthesizerBase()
{
}

uint64_t getEnumTagSinglePayload for HandwritingSynthesizerAssetContents(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_256A6E170);
}

uint64_t storeEnumTagSinglePayload for HandwritingSynthesizerAssetContents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_256A6E10C);
}

uint64_t type metadata accessor for HandwritingSynthesizerAssetContents(uint64_t a1)
{
  return sub_256A6AA68(a1, (uint64_t *)&unk_26B2B3418);
}

void type metadata accessor for HandwritingSynthesizerAssetMetadata()
{
}

void type metadata accessor for AssetBackedHandwritingSynthesizerBase()
{
}

void type metadata accessor for ImageCuratedPromptsBase()
{
}

uint64_t getEnumTagSinglePayload for ImageCuratedPromptsAssetContents(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_256A6E174);
}

uint64_t storeEnumTagSinglePayload for ImageCuratedPromptsAssetContents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_256A6E110);
}

uint64_t type metadata accessor for ImageCuratedPromptsAssetContents(uint64_t a1)
{
  return sub_256A6AA68(a1, (uint64_t *)&unk_269F794E8);
}

void type metadata accessor for ImageCuratedPromptsAssetMetadata()
{
}

void type metadata accessor for AssetBackedImageCuratedPromptsBase()
{
}

void type metadata accessor for ImageFilterBase()
{
}

uint64_t getEnumTagSinglePayload for ImageFilterAssetContents(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_256A6E178);
}

uint64_t storeEnumTagSinglePayload for ImageFilterAssetContents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_256A6E114);
}

uint64_t type metadata accessor for ImageFilterAssetContents(uint64_t a1)
{
  return sub_256A6AA68(a1, (uint64_t *)&unk_26B2B34D0);
}

void type metadata accessor for ImageFilterAssetMetadata()
{
}

void type metadata accessor for AssetBackedImageFilterBase()
{
}

void type metadata accessor for ImageMagicCleanUpBase()
{
}

uint64_t getEnumTagSinglePayload for ImageMagicCleanUpAssetContents(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_256A6E17C);
}

uint64_t storeEnumTagSinglePayload for ImageMagicCleanUpAssetContents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_256A6E118);
}

uint64_t type metadata accessor for ImageMagicCleanUpAssetContents(uint64_t a1)
{
  return sub_256A6AA68(a1, (uint64_t *)&unk_269F794F8);
}

void type metadata accessor for ImageMagicCleanUpAssetMetadata()
{
}

void type metadata accessor for AssetBackedImageMagicCleanUpBase()
{
}

void type metadata accessor for ImageScalerBase()
{
}

uint64_t getEnumTagSinglePayload for ImageScalerAssetContents(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_256A6E180);
}

uint64_t storeEnumTagSinglePayload for ImageScalerAssetContents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_256A6E11C);
}

uint64_t type metadata accessor for ImageScalerAssetContents(uint64_t a1)
{
  return sub_256A6AA68(a1, (uint64_t *)&unk_26B2B34F0);
}

void type metadata accessor for ImageScalerAssetMetadata()
{
}

void type metadata accessor for AssetBackedImageScalerBase()
{
}

uint64_t getEnumTagSinglePayload for LLMAdapterAssetContents(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_256A6E184);
}

uint64_t storeEnumTagSinglePayload for LLMAdapterAssetContents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_256A6E120);
}

uint64_t type metadata accessor for LLMAdapterAssetContents(uint64_t a1)
{
  return sub_256A6AA68(a1, (uint64_t *)&unk_26B2B59E8);
}

uint64_t destroy for LLMAdapterAssetMetadata(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 152) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for LLMAdapterAssetMetadata(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v6;
  memcpy((void *)(a1 + 72), (const void *)(a2 + 72), 0x49uLL);
  uint64_t v7 = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7 == 1)
  {
    long long v8 = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 168) = v8;
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(void *)(a1 + 200) = *(void *)(a2 + 200);
  }
  else
  {
    uint64_t v9 = *(void *)(a2 + 160);
    uint64_t v10 = *(void *)(a2 + 168);
    *(void *)(a1 + 152) = v7;
    *(void *)(a1 + 160) = v9;
    uint64_t v11 = *(void *)(a2 + 176);
    uint64_t v12 = *(void *)(a2 + 184);
    *(void *)(a1 + 168) = v10;
    *(void *)(a1 + 176) = v11;
    uint64_t v13 = *(void *)(a2 + 192);
    uint64_t v14 = *(void *)(a2 + 200);
    *(void *)(a1 + 184) = v12;
    *(void *)(a1 + 192) = v13;
    *(void *)(a1 + 200) = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v15 = *(void *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v15;
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for LLMAdapterAssetMetadata(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = v5;
  memcpy((void *)(a1 + 72), (const void *)(a2 + 72), 0x49uLL);
  uint64_t v6 = (_OWORD *)(a1 + 152);
  long long v8 = (long long *)(a2 + 152);
  uint64_t v7 = *(void *)(a2 + 152);
  if (*(void *)(a1 + 152) == 1)
  {
    if (v7 == 1)
    {
      long long v9 = *v8;
      long long v10 = *(_OWORD *)(a2 + 168);
      long long v11 = *(_OWORD *)(a2 + 184);
      *(void *)(a1 + 200) = *(void *)(a2 + 200);
      *(_OWORD *)(a1 + 168) = v10;
      *(_OWORD *)(a1 + 184) = v11;
      *uint64_t v6 = v9;
    }
    else
    {
      *(void *)(a1 + 152) = v7;
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(void *)(a1 + 176) = *(void *)(a2 + 176);
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      *(void *)(a1 + 192) = *(void *)(a2 + 192);
      *(void *)(a1 + 200) = *(void *)(a2 + 200);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v7 == 1)
  {
    sub_256A682B0(a1 + 152);
    long long v13 = *(_OWORD *)(a2 + 168);
    long long v12 = *(_OWORD *)(a2 + 184);
    long long v14 = *v8;
    *(void *)(a1 + 200) = *(void *)(a2 + 200);
    *(_OWORD *)(a1 + 168) = v13;
    *(_OWORD *)(a1 + 184) = v12;
    *uint64_t v6 = v14;
  }
  else
  {
    *(void *)(a1 + 152) = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 200) = *(void *)(a2 + 200);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_256A682B0(uint64_t a1)
{
  return a1;
}

void *initializeWithTake for LLMAdapterAssetMetadata(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xE8uLL);
}

uint64_t assignWithTake for LLMAdapterAssetMetadata(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  memcpy((void *)(a1 + 72), (const void *)(a2 + 72), 0x49uLL);
  uint64_t v6 = *(void *)(a2 + 152);
  if (*(void *)(a1 + 152) != 1)
  {
    if (v6 != 1)
    {
      *(void *)(a1 + 152) = v6;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 176) = *(void *)(a2 + 176);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 192) = *(void *)(a2 + 192);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 200) = *(void *)(a2 + 200);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_256A682B0(a1 + 152);
  }
  long long v7 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = v7;
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
LABEL_6:
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 224);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = v8;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for LLMAdapterAssetMetadata(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 232))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 32);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LLMAdapterAssetMetadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 232) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 232) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for LLMAdapterAssetMetadata()
{
}

void type metadata accessor for LLMAdapterAssetMetadata.ClassifierDefaultOutputClass()
{
}

void *initializeBufferWithCopyOfBuffer for LLMAdapterAssetMetadata.ClassifierMetadata(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for LLMAdapterAssetMetadata.ClassifierMetadata(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeBufferWithCopyOfBuffer for LLMAdapterAssetMetadata.ClassifierOutputClass(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *assignWithTake for LLMAdapterAssetMetadata.ClassifierMetadata(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for LLMAdapterAssetMetadata.ClassifierMetadata(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LLMAdapterAssetMetadata.ClassifierMetadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for LLMAdapterAssetMetadata.ClassifierMetadata()
{
}

uint64_t getEnumTagSinglePayload for LLMAdapterAssetMetadata.ClassifierOutputClass(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for LLMAdapterAssetMetadata.ClassifierOutputClass(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for LLMAdapterAssetMetadata.ClassifierOutputClass()
{
}

__n128 initializeWithTake for LLMAdapterAssetMetadata.DeviceLocalization(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

void type metadata accessor for LLMAdapterAssetMetadata.DeviceLocalization()
{
}

void *initializeWithCopy for LLMAdapterAssetMetadata.DraftMetadata(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x49uLL);
}

void type metadata accessor for LLMAdapterAssetMetadata.DraftMetadata()
{
}

unsigned char *initializeBufferWithCopyOfBuffer for ResourceStatus(unsigned char *result, unsigned char *a2)
{
  *__n128 result = *a2;
  return result;
}

void type metadata accessor for LLMAdapterAssetMetadata.LoraRank()
{
}

void type metadata accessor for LLMAdapterAssetMetadata.ModelType()
{
}

void type metadata accessor for AssetBackedLLMAdapterBase()
{
}

uint64_t getEnumTagSinglePayload for LLMDraftModelAssetContents(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_256A6E188);
}

uint64_t storeEnumTagSinglePayload for LLMDraftModelAssetContents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_256A6E124);
}

uint64_t type metadata accessor for LLMDraftModelAssetContents(uint64_t a1)
{
  return sub_256A6AA68(a1, (uint64_t *)&unk_26B2B5400);
}

uint64_t destroy for LLMDraftModelAssetMetadata(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = *(void *)(a1 + 160);
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for LLMDraftModelAssetMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  memcpy((void *)(a1 + 56), (const void *)(a2 + 56), 0x49uLL);
  uint64_t v7 = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7 == 1)
  {
    memcpy((void *)(a1 + 136), (const void *)(a2 + 136), 0xA9uLL);
  }
  else
  {
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(void *)(a1 + 160) = v7;
    uint64_t v8 = *(void *)(a2 + 176);
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(void *)(a1 + 176) = v8;
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
    uint64_t v9 = *(void *)(a2 + 208);
    *(void *)(a1 + 200) = *(void *)(a2 + 200);
    *(void *)(a1 + 208) = v9;
    uint64_t v10 = *(void *)(a2 + 224);
    *(void *)(a1 + 216) = *(void *)(a2 + 216);
    *(void *)(a1 + 224) = v10;
    uint64_t v11 = *(void *)(a2 + 240);
    *(void *)(a1 + 232) = *(void *)(a2 + 232);
    *(void *)(a1 + 240) = v11;
    uint64_t v12 = *(void *)(a2 + 256);
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
    *(void *)(a1 + 256) = v12;
    uint64_t v13 = *(void *)(a2 + 272);
    *(void *)(a1 + 264) = *(void *)(a2 + 264);
    *(void *)(a1 + 272) = v13;
    uint64_t v14 = *(void *)(a2 + 280);
    *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
    *(void *)(a1 + 280) = v14;
    uint64_t v15 = *(void *)(a2 + 296);
    *(unsigned char *)(a1 + 304) = *(unsigned char *)(a2 + 304);
    *(void *)(a1 + 296) = v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for LLMDraftModelAssetMetadata(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  memcpy((void *)(a1 + 56), (const void *)(a2 + 56), 0x49uLL);
  uint64_t v4 = (void *)(a1 + 136);
  uint64_t v5 = (uint64_t *)(a2 + 136);
  uint64_t v6 = *(void *)(a2 + 160);
  if (*(void *)(a1 + 160) != 1)
  {
    if (v6 != 1)
    {
      uint64_t v11 = *v5;
      *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
      *uint64_t v4 = v11;
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(void *)(a1 + 176) = *(void *)(a2 + 176);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v12 = *(void *)(a2 + 184);
      *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
      *(void *)(a1 + 184) = v12;
      *(void *)(a1 + 200) = *(void *)(a2 + 200);
      *(void *)(a1 + 208) = *(void *)(a2 + 208);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 216) = *(void *)(a2 + 216);
      *(void *)(a1 + 224) = *(void *)(a2 + 224);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 232) = *(void *)(a2 + 232);
      *(void *)(a1 + 240) = *(void *)(a2 + 240);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 248) = *(void *)(a2 + 248);
      *(void *)(a1 + 256) = *(void *)(a2 + 256);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 264) = *(void *)(a2 + 264);
      *(void *)(a1 + 272) = *(void *)(a2 + 272);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v13 = *(void *)(a2 + 280);
      *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
      *(void *)(a1 + 280) = v13;
      uint64_t v14 = *(void *)(a2 + 296);
      *(unsigned char *)(a1 + 304) = *(unsigned char *)(a2 + 304);
      *(void *)(a1 + 296) = v14;
      return a1;
    }
    sub_256A68C9C(a1 + 136);
    goto LABEL_6;
  }
  if (v6 == 1)
  {
LABEL_6:
    memcpy((void *)(a1 + 136), (const void *)(a2 + 136), 0xA9uLL);
    return a1;
  }
  uint64_t v7 = *v5;
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *uint64_t v4 = v7;
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  uint64_t v8 = *(void *)(a2 + 184);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(void *)(a1 + 184) = v8;
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  uint64_t v9 = *(void *)(a2 + 280);
  *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
  *(void *)(a1 + 280) = v9;
  uint64_t v10 = *(void *)(a2 + 296);
  *(unsigned char *)(a1 + 304) = *(unsigned char *)(a2 + 304);
  *(void *)(a1 + 296) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_256A68C9C(uint64_t a1)
{
  return a1;
}

void *initializeWithTake for LLMDraftModelAssetMetadata(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x131uLL);
}

uint64_t assignWithTake for LLMDraftModelAssetMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  memcpy((void *)(a1 + 56), (const void *)(a2 + 56), 0x49uLL);
  if (*(void *)(a1 + 160) != 1)
  {
    uint64_t v7 = *(void *)(a2 + 160);
    if (v7 != 1)
    {
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 160) = v7;
      swift_bridgeObjectRelease();
      uint64_t v8 = *(void *)(a2 + 176);
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(void *)(a1 + 176) = v8;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
      uint64_t v9 = *(void *)(a2 + 208);
      *(void *)(a1 + 200) = *(void *)(a2 + 200);
      *(void *)(a1 + 208) = v9;
      swift_bridgeObjectRelease();
      uint64_t v10 = *(void *)(a2 + 224);
      *(void *)(a1 + 216) = *(void *)(a2 + 216);
      *(void *)(a1 + 224) = v10;
      swift_bridgeObjectRelease();
      uint64_t v11 = *(void *)(a2 + 240);
      *(void *)(a1 + 232) = *(void *)(a2 + 232);
      *(void *)(a1 + 240) = v11;
      swift_bridgeObjectRelease();
      uint64_t v12 = *(void *)(a2 + 256);
      *(void *)(a1 + 248) = *(void *)(a2 + 248);
      *(void *)(a1 + 256) = v12;
      swift_bridgeObjectRelease();
      uint64_t v13 = *(void *)(a2 + 272);
      *(void *)(a1 + 264) = *(void *)(a2 + 264);
      *(void *)(a1 + 272) = v13;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 280) = *(void *)(a2 + 280);
      *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
      *(void *)(a1 + 296) = *(void *)(a2 + 296);
      *(unsigned char *)(a1 + 304) = *(unsigned char *)(a2 + 304);
      return a1;
    }
    sub_256A68C9C(a1 + 136);
  }
  memcpy((void *)(a1 + 136), (const void *)(a2 + 136), 0xA9uLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for LLMDraftModelAssetMetadata(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 305))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LLMDraftModelAssetMetadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 296) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 304) = 0;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 305) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 305) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for LLMDraftModelAssetMetadata()
{
}

uint64_t destroy for LLMDraftModelAssetMetadata.ANEExtendInfo()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for LLMDraftModelAssetMetadata.ANEExtendInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for LLMDraftModelAssetMetadata.ANEExtendInfo(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

__n128 initializeWithTake for LLMDraftModelAssetMetadata.ANEExtendInfo(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for LLMDraftModelAssetMetadata.ANEExtendInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for LLMDraftModelAssetMetadata.ANEExtendInfo(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LLMDraftModelAssetMetadata.ANEExtendInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for LLMDraftModelAssetMetadata.ANEExtendInfo()
{
}

void *initializeWithTake for LLMDraftModelAssetMetadata.DeviceSpecialTokensMap(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xA9uLL);
}

void type metadata accessor for LLMDraftModelAssetMetadata.DeviceSpecialTokensMap()
{
}

uint64_t _s12ModelCatalog23LLMAdapterAssetMetadataV13DraftMetadataVwet_0(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(unsigned char *)(a1 + 73)) {
      return sub_256A6E980(*(_DWORD *)a1 + 253);
    }
    unsigned int v3 = *(unsigned __int8 *)(a1 + 9);
    if (v3 >= 2) {
      int v4 = ((v3 + 2147483646) & 0x7FFFFFFF) - 1;
    }
    else {
      int v4 = -2;
    }
    if (v4 < 0) {
      return sub_256A6E980(-1);
    }
  }
  else
  {
    int v4 = -1;
  }
  return sub_256A6E980(v4);
}

uint64_t _s12ModelCatalog23LLMAdapterAssetMetadataV13DraftMetadataVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 72) = 0;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 73) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 73) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 9) = a2 + 2;
    }
  }
  return result;
}

void type metadata accessor for LLMDraftModelAssetMetadata.DraftMetadata()
{
}

void type metadata accessor for AssetBackedLLMDraftModelBase()
{
}

uint64_t getEnumTagSinglePayload for LLMModelAssetContents(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_256A6E18C);
}

uint64_t storeEnumTagSinglePayload for LLMModelAssetContents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_256A6E128);
}

uint64_t type metadata accessor for LLMModelAssetContents(uint64_t a1)
{
  return sub_256A6AA68(a1, (uint64_t *)&unk_26B2B5758);
}

uint64_t destroy for LLMModelAssetMetadata(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 112) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t result = *(void *)(a1 + 264);
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for LLMModelAssetMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  uint64_t v8 = (unsigned char *)(a2 + 88);
  uint64_t v9 = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v9 == 1)
  {
    memcpy((void *)(a1 + 88), v8, 0xA9uLL);
  }
  else
  {
    *(void *)(a1 + 88) = *(void *)v8;
    *(unsigned char *)(a1 + 96) = v8[8];
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = v9;
    uint64_t v10 = *(void *)(a2 + 128);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = v10;
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
    uint64_t v11 = *(void *)(a2 + 160);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(void *)(a1 + 160) = v11;
    uint64_t v12 = *(void *)(a2 + 176);
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(void *)(a1 + 176) = v12;
    uint64_t v13 = *(void *)(a2 + 192);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(void *)(a1 + 192) = v13;
    uint64_t v14 = *(void *)(a2 + 208);
    *(void *)(a1 + 200) = *(void *)(a2 + 200);
    *(void *)(a1 + 208) = v14;
    uint64_t v15 = *(void *)(a2 + 224);
    *(void *)(a1 + 216) = *(void *)(a2 + 216);
    *(void *)(a1 + 224) = v15;
    uint64_t v16 = *(void *)(a2 + 232);
    *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
    *(void *)(a1 + 232) = v16;
    uint64_t v17 = *(void *)(a2 + 248);
    *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
    *(void *)(a1 + 248) = v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v18 = *(void *)(a2 + 264);
  if (v18 == 1)
  {
    long long v19 = *(_OWORD *)(a2 + 280);
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 280) = v19;
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
    *(void *)(a1 + 312) = *(void *)(a2 + 312);
  }
  else
  {
    uint64_t v20 = *(void *)(a2 + 272);
    uint64_t v21 = *(void *)(a2 + 280);
    *(void *)(a1 + 264) = v18;
    *(void *)(a1 + 272) = v20;
    uint64_t v22 = *(void *)(a2 + 288);
    uint64_t v23 = *(void *)(a2 + 296);
    *(void *)(a1 + 280) = v21;
    *(void *)(a1 + 288) = v22;
    uint64_t v25 = *(void *)(a2 + 304);
    uint64_t v24 = *(void *)(a2 + 312);
    *(void *)(a1 + 296) = v23;
    *(void *)(a1 + 304) = v25;
    *(void *)(a1 + 312) = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for LLMModelAssetMetadata(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = (void *)(a1 + 88);
  uint64_t v6 = (uint64_t *)(a2 + 88);
  uint64_t v7 = *(void *)(a2 + 112);
  if (*(void *)(a1 + 112) == 1)
  {
    if (v7 != 1)
    {
      uint64_t v8 = *v6;
      *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
      *uint64_t v5 = v8;
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      uint64_t v9 = *(void *)(a2 + 136);
      *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
      *(void *)(a1 + 136) = v9;
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(void *)(a1 + 176) = *(void *)(a2 + 176);
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      *(void *)(a1 + 192) = *(void *)(a2 + 192);
      *(void *)(a1 + 200) = *(void *)(a2 + 200);
      *(void *)(a1 + 208) = *(void *)(a2 + 208);
      *(void *)(a1 + 216) = *(void *)(a2 + 216);
      *(void *)(a1 + 224) = *(void *)(a2 + 224);
      uint64_t v10 = *(void *)(a2 + 232);
      *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
      *(void *)(a1 + 232) = v10;
      uint64_t v11 = *(void *)(a2 + 248);
      *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
      *(void *)(a1 + 248) = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v7 == 1)
  {
    sub_256A6996C(a1 + 88);
LABEL_6:
    memcpy((void *)(a1 + 88), (const void *)(a2 + 88), 0xA9uLL);
    goto LABEL_8;
  }
  uint64_t v12 = *v6;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *uint64_t v5 = v12;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(void *)(a1 + 136) = v13;
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(a2 + 232);
  *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
  *(void *)(a1 + 232) = v14;
  uint64_t v15 = *(void *)(a2 + 248);
  *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
  *(void *)(a1 + 248) = v15;
LABEL_8:
  uint64_t v16 = (_OWORD *)(a1 + 264);
  uint64_t v17 = (long long *)(a2 + 264);
  uint64_t v18 = *(void *)(a2 + 264);
  if (*(void *)(a1 + 264) == 1)
  {
    if (v18 == 1)
    {
      long long v19 = *v17;
      long long v20 = *(_OWORD *)(a2 + 280);
      long long v21 = *(_OWORD *)(a2 + 296);
      *(void *)(a1 + 312) = *(void *)(a2 + 312);
      *(_OWORD *)(a1 + 280) = v20;
      *(_OWORD *)(a1 + 296) = v21;
      _OWORD *v16 = v19;
    }
    else
    {
      *(void *)(a1 + 264) = v18;
      *(void *)(a1 + 272) = *(void *)(a2 + 272);
      *(void *)(a1 + 280) = *(void *)(a2 + 280);
      *(void *)(a1 + 288) = *(void *)(a2 + 288);
      *(void *)(a1 + 296) = *(void *)(a2 + 296);
      *(void *)(a1 + 304) = *(void *)(a2 + 304);
      *(void *)(a1 + 312) = *(void *)(a2 + 312);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v18 == 1)
  {
    sub_256A6999C(a1 + 264);
    long long v23 = *(_OWORD *)(a2 + 280);
    long long v22 = *(_OWORD *)(a2 + 296);
    long long v24 = *v17;
    *(void *)(a1 + 312) = *(void *)(a2 + 312);
    *(_OWORD *)(a1 + 280) = v23;
    *(_OWORD *)(a1 + 296) = v22;
    _OWORD *v16 = v24;
  }
  else
  {
    *(void *)(a1 + 264) = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 272) = *(void *)(a2 + 272);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 280) = *(void *)(a2 + 280);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 288) = *(void *)(a2 + 288);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 296) = *(void *)(a2 + 296);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 304) = *(void *)(a2 + 304);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 312) = *(void *)(a2 + 312);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  return a1;
}

uint64_t sub_256A6996C(uint64_t a1)
{
  return a1;
}

uint64_t sub_256A6999C(uint64_t a1)
{
  return a1;
}

void *initializeWithTake for LLMModelAssetMetadata(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x140uLL);
}

uint64_t assignWithTake for LLMModelAssetMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 112) == 1) {
    goto LABEL_4;
  }
  uint64_t v7 = *(void *)(a2 + 112);
  if (v7 == 1)
  {
    sub_256A6996C(a1 + 88);
LABEL_4:
    memcpy((void *)(a1 + 88), (const void *)(a2 + 88), 0xA9uLL);
    goto LABEL_6;
  }
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v8;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  uint64_t v9 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a2 + 224);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = v13;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
LABEL_6:
  if (*(void *)(a1 + 264) != 1)
  {
    uint64_t v14 = *(void *)(a2 + 264);
    if (v14 != 1)
    {
      *(void *)(a1 + 264) = v14;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 272) = *(void *)(a2 + 272);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 280) = *(void *)(a2 + 280);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 288) = *(void *)(a2 + 288);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 296) = *(void *)(a2 + 296);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 304) = *(void *)(a2 + 304);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 312) = *(void *)(a2 + 312);
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_256A6999C(a1 + 264);
  }
  long long v15 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 280) = v15;
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  return a1;
}

uint64_t getEnumTagSinglePayload for LLMModelAssetMetadata(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 320))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LLMModelAssetMetadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 312) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 320) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 320) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for LLMModelAssetMetadata()
{
}

uint64_t destroy for LLMModelAssetMetadata.ANEExtendInfo()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for LLMModelAssetMetadata.ANEExtendInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for LLMModelAssetMetadata.ANEExtendInfo(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  return a1;
}

__n128 initializeWithTake for LLMModelAssetMetadata.ANEExtendInfo(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for LLMModelAssetMetadata.ANEExtendInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for LLMModelAssetMetadata.ANEExtendInfo(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LLMModelAssetMetadata.ANEExtendInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for LLMModelAssetMetadata.ANEExtendInfo()
{
}

uint64_t _s12ModelCatalog23LLMAdapterAssetMetadataV18DeviceLocalizationVwxx_0(uint64_t a1)
{
  sub_256A6EA00(a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s12ModelCatalog23LLMAdapterAssetMetadataV18DeviceLocalizationVwcp_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *_s12ModelCatalog23LLMAdapterAssetMetadataV18DeviceLocalizationVwca_0(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s12ModelCatalog23LLMAdapterAssetMetadataV18DeviceLocalizationVwta_0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s12ModelCatalog23LLMAdapterAssetMetadataV18DeviceLocalizationVwet_0(uint64_t *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 56)) {
      return sub_256A6E980(*(_DWORD *)a1 + 2147483646);
    }
    uint64_t v3 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v3) = -1;
    }
    int v4 = v3 - 1;
    if (v4 < 0) {
      return sub_256A6E980(-1);
    }
  }
  else
  {
    int v4 = -1;
  }
  return sub_256A6E980(v4);
}

uint64_t _s12ModelCatalog23LLMAdapterAssetMetadataV18DeviceLocalizationVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

void type metadata accessor for LLMModelAssetMetadata.DeviceLocalization()
{
}

uint64_t _s12ModelCatalog26LLMDraftModelAssetMetadataV22DeviceSpecialTokensMapVwxx_0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t _s12ModelCatalog26LLMDraftModelAssetMetadataV22DeviceSpecialTokensMapVwcp_0(uint64_t a1, uint64_t a2)
{
  sub_256A6EC7C(a1, a2);
  uint64_t v4 = *(void *)(v3 + 24);
  *(void *)(v2 + 16) = *(void *)(v3 + 16);
  *(void *)(v2 + 24) = v4;
  uint64_t v5 = *(void *)(v3 + 40);
  *(void *)(v2 + 32) = *(void *)(v3 + 32);
  *(void *)(v2 + 40) = v5;
  *(void *)(v2 + 48) = *(void *)(v3 + 48);
  *(unsigned char *)(v2 + 56) = *(unsigned char *)(v3 + 56);
  uint64_t v6 = *(void *)(v3 + 72);
  *(void *)(v2 + 64) = *(void *)(v3 + 64);
  *(void *)(v2 + 72) = v6;
  uint64_t v7 = *(void *)(v3 + 88);
  *(void *)(v2 + 80) = *(void *)(v3 + 80);
  *(void *)(v2 + 88) = v7;
  uint64_t v8 = *(void *)(v3 + 104);
  *(void *)(v2 + 96) = *(void *)(v3 + 96);
  *(void *)(v2 + 104) = v8;
  uint64_t v9 = *(void *)(v3 + 120);
  *(void *)(v2 + 112) = *(void *)(v3 + 112);
  *(void *)(v2 + 120) = v9;
  uint64_t v10 = *(void *)(v3 + 136);
  *(void *)(v2 + 128) = *(void *)(v3 + 128);
  *(void *)(v2 + 136) = v10;
  uint64_t v11 = *(void *)(v3 + 144);
  *(unsigned char *)(v2 + 152) = *(unsigned char *)(v3 + 152);
  *(void *)(v2 + 144) = v11;
  uint64_t v12 = *(void *)(v3 + 160);
  *(unsigned char *)(v2 + 168) = *(unsigned char *)(v3 + 168);
  *(void *)(v2 + 160) = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t _s12ModelCatalog26LLMDraftModelAssetMetadataV22DeviceSpecialTokensMapVwca_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_256A6EC94();
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[6];
  *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 64) = a2[8];
  *(void *)(a1 + 72) = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = a2[10];
  *(void *)(a1 + 88) = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = a2[12];
  *(void *)(a1 + 104) = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = a2[14];
  *(void *)(a1 + 120) = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = a2[16];
  *(void *)(a1 + 136) = a2[17];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[18];
  *(unsigned char *)(a1 + 152) = *((unsigned char *)a2 + 152);
  *(void *)(a1 + 144) = v6;
  uint64_t v7 = a2[20];
  *(unsigned char *)(a1 + 168) = *((unsigned char *)a2 + 168);
  *(void *)(a1 + 160) = v7;
  return a1;
}

uint64_t _s12ModelCatalog26LLMDraftModelAssetMetadataV22DeviceSpecialTokensMapVwta_0(uint64_t a1, uint64_t a2)
{
  sub_256A6EC7C(a1, a2);
  uint64_t v5 = *(void *)(v4 + 24);
  *(void *)(v2 + 16) = *(void *)(v4 + 16);
  *(void *)(v2 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(v2 + 32) = *(void *)(a2 + 32);
  *(void *)(v2 + 40) = v6;
  swift_bridgeObjectRelease();
  *(void *)(v2 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(v2 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(v2 + 64) = *(void *)(a2 + 64);
  *(void *)(v2 + 72) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(v2 + 80) = *(void *)(a2 + 80);
  *(void *)(v2 + 88) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 104);
  *(void *)(v2 + 96) = *(void *)(a2 + 96);
  *(void *)(v2 + 104) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(v2 + 112) = *(void *)(a2 + 112);
  *(void *)(v2 + 120) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 136);
  *(void *)(v2 + 128) = *(void *)(a2 + 128);
  *(void *)(v2 + 136) = v11;
  swift_bridgeObjectRelease();
  *(void *)(v2 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(v2 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(v2 + 160) = *(void *)(a2 + 160);
  *(unsigned char *)(v2 + 168) = *(unsigned char *)(a2 + 168);
  return v2;
}

uint64_t _s12ModelCatalog26LLMDraftModelAssetMetadataV22DeviceSpecialTokensMapVwet_0(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 169)) {
      return sub_256A6E980(*(_DWORD *)a1 + 2147483646);
    }
    unint64_t v3 = *(void *)(a1 + 24);
    if (v3 >= 0xFFFFFFFF) {
      LODWORD(v3) = -1;
    }
    int v4 = v3 - 1;
    if (v4 < 0) {
      return sub_256A6E980(-1);
    }
  }
  else
  {
    int v4 = -1;
  }
  return sub_256A6E980(v4);
}

uint64_t _s12ModelCatalog26LLMDraftModelAssetMetadataV22DeviceSpecialTokensMapVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 152) = 0u;
    __n128 result = sub_256A6EC30(result, (__n128)0);
    *(unsigned char *)(result + 168) = 0;
    *(void *)__n128 result = v3;
    if (v4 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 169) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 169) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

void type metadata accessor for LLMModelAssetMetadata.DeviceSpecialTokensMap()
{
}

void type metadata accessor for AssetBackedLLMModelBase()
{
}

void type metadata accessor for ServerConfigurationBase()
{
}

uint64_t getEnumTagSinglePayload for ServerConfigurationAssetContents(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_256A6E190);
}

uint64_t storeEnumTagSinglePayload for ServerConfigurationAssetContents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_256A6E12C);
}

uint64_t type metadata accessor for ServerConfigurationAssetContents(uint64_t a1)
{
  return sub_256A6AA68(a1, (uint64_t *)&unk_26B2B5A08);
}

void type metadata accessor for ServerConfigurationAssetMetadata()
{
}

void type metadata accessor for AssetBackedServerConfigurationBase()
{
}

void type metadata accessor for ModelConfigurationReplacementBase()
{
}

uint64_t getEnumTagSinglePayload for ModelConfigurationReplacementAssetContents(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_256A6E194);
}

uint64_t storeEnumTagSinglePayload for ModelConfigurationReplacementAssetContents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_256A6E130);
}

uint64_t type metadata accessor for ModelConfigurationReplacementAssetContents(uint64_t a1)
{
  return sub_256A6AA68(a1, (uint64_t *)&unk_26B2B5420);
}

void type metadata accessor for ModelConfigurationReplacementAssetMetadata()
{
}

uint64_t initializeBufferWithCopyOfBuffer for AssetBackedModelConfigurationReplacementBase(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

void type metadata accessor for AssetBackedModelConfigurationReplacementBase()
{
}

void type metadata accessor for SanitizerBase()
{
}

uint64_t getEnumTagSinglePayload for SanitizerAssetContents(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_256A6E198);
}

uint64_t storeEnumTagSinglePayload for SanitizerAssetContents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_256A6E134);
}

uint64_t type metadata accessor for SanitizerAssetContents(uint64_t a1)
{
  return sub_256A6AA68(a1, (uint64_t *)&unk_269F79508);
}

void type metadata accessor for SanitizerAssetMetadata()
{
}

void type metadata accessor for AssetBackedSanitizerBase()
{
}

void type metadata accessor for TokenInputDenyListBase()
{
}

uint64_t getEnumTagSinglePayload for TokenInputDenyListAssetContents(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_256A6E19C);
}

uint64_t storeEnumTagSinglePayload for TokenInputDenyListAssetContents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_256A6E138);
}

uint64_t type metadata accessor for TokenInputDenyListAssetContents(uint64_t a1)
{
  return sub_256A6AA68(a1, (uint64_t *)&unk_26B2B5248);
}

void type metadata accessor for TokenInputDenyListAssetMetadata()
{
}

void type metadata accessor for AssetBackedTokenInputDenyListBase()
{
}

void type metadata accessor for TokenOutputDenyListBase()
{
}

uint64_t getEnumTagSinglePayload for TokenOutputDenyListAssetContents(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_256A6E1A0);
}

uint64_t storeEnumTagSinglePayload for TokenOutputDenyListAssetContents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_256A6E13C);
}

uint64_t type metadata accessor for TokenOutputDenyListAssetContents(uint64_t a1)
{
  return sub_256A6AA68(a1, (uint64_t *)&unk_26B2B5270);
}

void type metadata accessor for TokenOutputDenyListAssetMetadata()
{
}

void type metadata accessor for AssetBackedTokenOutputDenyListBase()
{
}

uint64_t _s12ModelCatalog29DiffusionAdapterAssetContentsVwCP_0()
{
  sub_256A6E994();
  sub_256A6E624();
  unsigned int v4 = *v3;

  return v4(v1, v0, v2);
}

uint64_t _s12ModelCatalog29DiffusionAdapterAssetContentsVwxx_0(uint64_t a1)
{
  sub_256B3F300();
  sub_256A6E624();
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);

  return v4(a1, v2);
}

uint64_t _s12ModelCatalog29DiffusionAdapterAssetContentsVwcp_0()
{
  sub_256A6E994();
  sub_256A6E624();
  uint64_t v1 = sub_256A6EA50();
  v2(v1);
  return v0;
}

uint64_t _s12ModelCatalog29DiffusionAdapterAssetContentsVwca_0()
{
  sub_256A6E994();
  sub_256A6E624();
  uint64_t v1 = sub_256A6EA50();
  v2(v1);
  return v0;
}

uint64_t _s12ModelCatalog29DiffusionAdapterAssetContentsVwtk_0()
{
  sub_256A6E994();
  sub_256A6E624();
  uint64_t v1 = sub_256A6EA50();
  v2(v1);
  return v0;
}

uint64_t _s12ModelCatalog29DiffusionAdapterAssetContentsVwta_0()
{
  sub_256A6E994();
  sub_256A6E624();
  uint64_t v1 = sub_256A6EA50();
  v2(v1);
  return v0;
}

uint64_t getEnumTagSinglePayload for TokenizerAssetContents(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_256A6E1A4);
}

uint64_t storeEnumTagSinglePayload for TokenizerAssetContents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_256A6E140);
}

uint64_t type metadata accessor for TokenizerAssetContents(uint64_t a1)
{
  return sub_256A6AA68(a1, (uint64_t *)&unk_26B2B5198);
}

uint64_t sub_256A6AA68(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_256A6AA9C()
{
  uint64_t result = sub_256B3F300();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void type metadata accessor for TokenizerAssetMetadata()
{
}

uint64_t destroy for ResourceConfiguration(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 96))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t _s12ModelCatalog20DiffusionAdapterBaseVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v8 = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8)
  {
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = v8;
    uint64_t v9 = *(void *)(a2 + 112);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = v9;
    uint64_t v10 = *(void *)(a2 + 128);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = v10;
    sub_256A6F0A4();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v11;
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 130) = *(_OWORD *)(a2 + 130);
  }
  uint64_t v12 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v12;
  uint64_t v14 = *(void *)(a2 + 168);
  uint64_t v13 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = v14;
  *(void *)(a1 + 176) = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s12ModelCatalog20DiffusionAdapterBaseVwca_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_256A6EC94();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v4 = (_OWORD *)(a1 + 88);
  uint64_t v5 = (long long *)(a2 + 88);
  uint64_t v6 = *(void *)(a2 + 96);
  if (*(void *)(a1 + 96))
  {
    if (v6)
    {
      sub_256A6EF30();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      sub_256A6EBF8();
    }
    else
    {
      sub_256A6794C(a1 + 88);
      long long v8 = *(_OWORD *)(a2 + 104);
      long long v7 = *(_OWORD *)(a2 + 120);
      long long v9 = *v5;
      *(_OWORD *)(a1 + 130) = *(_OWORD *)(a2 + 130);
      *(_OWORD *)(a1 + 104) = v8;
      *(_OWORD *)(a1 + 120) = v7;
      *uint64_t v4 = v9;
    }
  }
  else if (v6)
  {
    sub_256A6EF30();
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    sub_256A6EBF8();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v10 = *v5;
    long long v11 = *(_OWORD *)(a2 + 104);
    long long v12 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 130) = *(_OWORD *)(a2 + 130);
    *(_OWORD *)(a1 + 104) = v11;
    *(_OWORD *)(a1 + 120) = v12;
    *uint64_t v4 = v10;
  }
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s12ModelCatalog20DiffusionAdapterBaseVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  if (!*(void *)(a1 + 96)) {
    goto LABEL_5;
  }
  uint64_t v7 = *(void *)(a2 + 96);
  if (!v7)
  {
    sub_256A6794C(a1 + 88);
LABEL_5:
    long long v10 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v10;
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 130) = *(_OWORD *)(a2 + 130);
    goto LABEL_6;
  }
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v9;
  swift_bridgeObjectRelease();
  sub_256A6F0A4();
LABEL_6:
  uint64_t v11 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v11;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ResourceConfiguration(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 184))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_256A6B084(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    uint64_t result = sub_256A6EC30(result, (__n128)0);
    *(void *)uint64_t result = v3;
    if (v4 < 0) {
      *(unsigned char *)(result + 184) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 184) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for AssetBackedTokenizerBase()
{
}

ValueMetadata *type metadata accessor for TokenizerAssetMetadata.CodingKeys()
{
  return &type metadata for TokenizerAssetMetadata.CodingKeys;
}

ValueMetadata *type metadata accessor for TokenOutputDenyListAssetMetadata.CodingKeys()
{
  return &type metadata for TokenOutputDenyListAssetMetadata.CodingKeys;
}

ValueMetadata *type metadata accessor for TokenInputDenyListAssetMetadata.CodingKeys()
{
  return &type metadata for TokenInputDenyListAssetMetadata.CodingKeys;
}

ValueMetadata *type metadata accessor for SanitizerAssetMetadata.CodingKeys()
{
  return &type metadata for SanitizerAssetMetadata.CodingKeys;
}

ValueMetadata *type metadata accessor for ModelConfigurationReplacementAssetMetadata.CodingKeys()
{
  return &type metadata for ModelConfigurationReplacementAssetMetadata.CodingKeys;
}

ValueMetadata *type metadata accessor for ServerConfigurationAssetMetadata.CodingKeys()
{
  return &type metadata for ServerConfigurationAssetMetadata.CodingKeys;
}

uint64_t sub_256A6B144(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF8)
  {
    if (a2 + 8 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 8) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 9;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v5 = v6 - 9;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *sub_256A6B1CC(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x256A6B298);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

void type metadata accessor for LLMModelAssetMetadata.CodingKeys()
{
}

void type metadata accessor for LLMModelAssetMetadata.DeviceSpecialTokensMap.CodingKeys()
{
}

void type metadata accessor for LLMModelAssetMetadata.DeviceLocalization.CodingKeys()
{
}

uint64_t getEnumTagSinglePayload for AssetSubscriptionStatusPendingReason(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 3) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v5 = v6 - 4;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *sub_256A6B37C(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x256A6B448);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void type metadata accessor for LLMModelAssetMetadata.ANEExtendInfo.CodingKeys()
{
}

uint64_t _s12ModelCatalog23LLMAdapterAssetMetadataV8LoraRankOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return sub_256A6E980(-1);
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return sub_256A6E980((*a1 | (v4 << 8)) - 6);
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return sub_256A6E980((*a1 | (v4 << 8)) - 6);
    }
    int v4 = a1[1];
    if (a1[1]) {
      return sub_256A6E980((*a1 | (v4 << 8)) - 6);
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return sub_256A6E980(v8);
}

unsigned char *_s12ModelCatalog23LLMAdapterAssetMetadataV8LoraRankOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        uint64_t result = (unsigned char *)sub_256A6EB8C((uint64_t)result, v6);
        break;
      case 2:
        uint64_t result = (unsigned char *)sub_256A6EB74((uint64_t)result, v6);
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x256A6B5BCLL);
      case 4:
        uint64_t result = (unsigned char *)sub_256A6EB7C((uint64_t)result, v6);
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          uint64_t result = sub_256A6EB84(result, a2 + 5);
        break;
    }
  }
  return result;
}

void type metadata accessor for LLMDraftModelAssetMetadata.CodingKeys()
{
}

uint64_t sub_256A6B5F8(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_256A6B600(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

void type metadata accessor for LLMDraftModelAssetMetadata.DraftMetadata.CodingKeys()
{
}

uint64_t sub_256A6B614(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return sub_256A6E980(-1);
  }
  if (a2 < 0xF6) {
    goto LABEL_17;
  }
  if (a2 + 10 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 10) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return sub_256A6E980((*a1 | (v4 << 8)) - 11);
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return sub_256A6E980((*a1 | (v4 << 8)) - 11);
    }
    int v4 = a1[1];
    if (a1[1]) {
      return sub_256A6E980((*a1 | (v4 << 8)) - 11);
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xB;
  int v8 = v6 - 11;
  if (!v7) {
    int v8 = -1;
  }
  return sub_256A6E980(v8);
}

unsigned char *sub_256A6B698(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *uint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        uint64_t result = (unsigned char *)sub_256A6EB8C((uint64_t)result, v6);
        break;
      case 2:
        uint64_t result = (unsigned char *)sub_256A6EB74((uint64_t)result, v6);
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x256A6B754);
      case 4:
        uint64_t result = (unsigned char *)sub_256A6EB7C((uint64_t)result, v6);
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          uint64_t result = sub_256A6EB84(result, a2 + 10);
        break;
    }
  }
  return result;
}

void type metadata accessor for LLMDraftModelAssetMetadata.DeviceSpecialTokensMap.CodingKeys()
{
}

uint64_t getEnumTagSinglePayload for AJAXConfiguration.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 2) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v5 = v6 - 3;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *sub_256A6B810(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x256A6B8DCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void type metadata accessor for LLMDraftModelAssetMetadata.ANEExtendInfo.CodingKeys()
{
}

uint64_t sub_256A6B910(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF7)
  {
    if (a2 + 9 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 9) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 10;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v5 = v6 - 10;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *sub_256A6B998(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *uint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x256A6BA64);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

void type metadata accessor for LLMAdapterAssetMetadata.CodingKeys()
{
}

uint64_t sub_256A6BA98(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return sub_256A6E980(-1);
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return sub_256A6E980((*a1 | (v4 << 8)) - 8);
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return sub_256A6E980((*a1 | (v4 << 8)) - 8);
    }
    int v4 = a1[1];
    if (a1[1]) {
      return sub_256A6E980((*a1 | (v4 << 8)) - 8);
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return sub_256A6E980(v8);
}

unsigned char *sub_256A6BB1C(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        uint64_t result = (unsigned char *)sub_256A6EB8C((uint64_t)result, v6);
        break;
      case 2:
        uint64_t result = (unsigned char *)sub_256A6EB74((uint64_t)result, v6);
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x256A6BBD8);
      case 4:
        uint64_t result = (unsigned char *)sub_256A6EB7C((uint64_t)result, v6);
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          uint64_t result = sub_256A6EB84(result, a2 + 7);
        break;
    }
  }
  return result;
}

void type metadata accessor for LLMAdapterAssetMetadata.DraftMetadata.CodingKeys()
{
}

uint64_t sub_256A6BC0C(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return sub_256A6E980(-1);
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return sub_256A6E980((*a1 | (v4 << 8)) - 7);
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return sub_256A6E980((*a1 | (v4 << 8)) - 7);
    }
    int v4 = a1[1];
    if (a1[1]) {
      return sub_256A6E980((*a1 | (v4 << 8)) - 7);
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return sub_256A6E980(v8);
}

unsigned char *sub_256A6BC90(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        uint64_t result = (unsigned char *)sub_256A6EB8C((uint64_t)result, v6);
        break;
      case 2:
        uint64_t result = (unsigned char *)sub_256A6EB74((uint64_t)result, v6);
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x256A6BD4CLL);
      case 4:
        uint64_t result = (unsigned char *)sub_256A6EB7C((uint64_t)result, v6);
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          uint64_t result = sub_256A6EB84(result, a2 + 6);
        break;
    }
  }
  return result;
}

void type metadata accessor for LLMAdapterAssetMetadata.DeviceLocalization.CodingKeys()
{
}

void type metadata accessor for LLMAdapterAssetMetadata.ClassifierOutputClass.CodingKeys()
{
}

uint64_t _s12ModelCatalog23LLMAdapterAssetMetadataV9ModelTypeOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return sub_256A6E980(-1);
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return sub_256A6E980((*a1 | (v4 << 8)) - 2);
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return sub_256A6E980((*a1 | (v4 << 8)) - 2);
    }
    int v4 = a1[1];
    if (a1[1]) {
      return sub_256A6E980((*a1 | (v4 << 8)) - 2);
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return sub_256A6E980(v8);
}

unsigned char *_s12ModelCatalog23LLMAdapterAssetMetadataV9ModelTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        uint64_t result = (unsigned char *)sub_256A6EB8C((uint64_t)result, v6);
        break;
      case 2:
        uint64_t result = (unsigned char *)sub_256A6EB74((uint64_t)result, v6);
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x256A6BECCLL);
      case 4:
        uint64_t result = (unsigned char *)sub_256A6EB7C((uint64_t)result, v6);
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          uint64_t result = sub_256A6EB84(result, a2 + 1);
        break;
    }
  }
  return result;
}

unsigned char *sub_256A6BEF4(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

void type metadata accessor for LLMAdapterAssetMetadata.ClassifierMetadata.CodingKeys()
{
}

uint64_t _s11AssetErrorsO34FailedToRetrieveAssetSetCodingKeysOwet_0(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *sub_256A6BF60(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x256A6BFFCLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for LLMAdapterAssetMetadata.ClassifierDefaultOutputClass.CodingKeys()
{
}

ValueMetadata *type metadata accessor for ImageScalerAssetMetadata.CodingKeys()
{
  return &type metadata for ImageScalerAssetMetadata.CodingKeys;
}

ValueMetadata *type metadata accessor for ImageMagicCleanUpAssetMetadata.CodingKeys()
{
  return &type metadata for ImageMagicCleanUpAssetMetadata.CodingKeys;
}

ValueMetadata *type metadata accessor for ImageFilterAssetMetadata.CodingKeys()
{
  return &type metadata for ImageFilterAssetMetadata.CodingKeys;
}

ValueMetadata *type metadata accessor for ImageCuratedPromptsAssetMetadata.CodingKeys()
{
  return &type metadata for ImageCuratedPromptsAssetMetadata.CodingKeys;
}

ValueMetadata *type metadata accessor for HandwritingSynthesizerAssetMetadata.CodingKeys()
{
  return &type metadata for HandwritingSynthesizerAssetMetadata.CodingKeys;
}

ValueMetadata *type metadata accessor for GenerativeFunctionOverridesAssetMetadata.CodingKeys()
{
  return &type metadata for GenerativeFunctionOverridesAssetMetadata.CodingKeys;
}

ValueMetadata *type metadata accessor for DisabledUseCaseListAssetMetadata.CodingKeys()
{
  return &type metadata for DisabledUseCaseListAssetMetadata.CodingKeys;
}

ValueMetadata *type metadata accessor for DiffusionModelAssetMetadata.CodingKeys()
{
  return &type metadata for DiffusionModelAssetMetadata.CodingKeys;
}

ValueMetadata *type metadata accessor for DiffusionAdapterAssetMetadata.CodingKeys()
{
  return &type metadata for DiffusionAdapterAssetMetadata.CodingKeys;
}

unint64_t sub_256A6C0C4()
{
  unint64_t result = qword_269F79518;
  if (!qword_269F79518)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79518);
  }
  return result;
}

unint64_t sub_256A6C114()
{
  unint64_t result = qword_269F79520;
  if (!qword_269F79520)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79520);
  }
  return result;
}

unint64_t sub_256A6C164()
{
  unint64_t result = qword_269F79528;
  if (!qword_269F79528)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79528);
  }
  return result;
}

unint64_t sub_256A6C1B4()
{
  unint64_t result = qword_269F79530;
  if (!qword_269F79530)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79530);
  }
  return result;
}

unint64_t sub_256A6C204()
{
  unint64_t result = qword_269F79538;
  if (!qword_269F79538)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79538);
  }
  return result;
}

unint64_t sub_256A6C254()
{
  unint64_t result = qword_269F79540;
  if (!qword_269F79540)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79540);
  }
  return result;
}

unint64_t sub_256A6C2A4()
{
  unint64_t result = qword_269F79548;
  if (!qword_269F79548)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79548);
  }
  return result;
}

unint64_t sub_256A6C2F4()
{
  unint64_t result = qword_269F79550;
  if (!qword_269F79550)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79550);
  }
  return result;
}

unint64_t sub_256A6C344()
{
  unint64_t result = qword_269F79558;
  if (!qword_269F79558)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79558);
  }
  return result;
}

unint64_t sub_256A6C394()
{
  unint64_t result = qword_269F79560;
  if (!qword_269F79560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79560);
  }
  return result;
}

unint64_t sub_256A6C3E4()
{
  unint64_t result = qword_269F79568;
  if (!qword_269F79568)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79568);
  }
  return result;
}

unint64_t sub_256A6C434()
{
  unint64_t result = qword_269F79570;
  if (!qword_269F79570)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79570);
  }
  return result;
}

unint64_t sub_256A6C484()
{
  unint64_t result = qword_269F79578;
  if (!qword_269F79578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79578);
  }
  return result;
}

unint64_t sub_256A6C4D4()
{
  unint64_t result = qword_269F79580;
  if (!qword_269F79580)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79580);
  }
  return result;
}

unint64_t sub_256A6C524()
{
  unint64_t result = qword_269F79588;
  if (!qword_269F79588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79588);
  }
  return result;
}

unint64_t sub_256A6C574()
{
  unint64_t result = qword_269F79590;
  if (!qword_269F79590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79590);
  }
  return result;
}

unint64_t sub_256A6C5C4()
{
  unint64_t result = qword_269F79598;
  if (!qword_269F79598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79598);
  }
  return result;
}

unint64_t sub_256A6C614()
{
  unint64_t result = qword_269F795A0;
  if (!qword_269F795A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F795A0);
  }
  return result;
}

unint64_t sub_256A6C664()
{
  unint64_t result = qword_269F795A8;
  if (!qword_269F795A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F795A8);
  }
  return result;
}

unint64_t sub_256A6C6B4()
{
  unint64_t result = qword_269F795B0;
  if (!qword_269F795B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F795B0);
  }
  return result;
}

unint64_t sub_256A6C704()
{
  unint64_t result = qword_269F795B8;
  if (!qword_269F795B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F795B8);
  }
  return result;
}

unint64_t sub_256A6C754()
{
  unint64_t result = qword_269F795C0;
  if (!qword_269F795C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F795C0);
  }
  return result;
}

unint64_t sub_256A6C7A4()
{
  unint64_t result = qword_269F795C8;
  if (!qword_269F795C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F795C8);
  }
  return result;
}

unint64_t sub_256A6C7F4()
{
  unint64_t result = qword_269F795D0;
  if (!qword_269F795D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F795D0);
  }
  return result;
}

unint64_t sub_256A6C844()
{
  unint64_t result = qword_269F795D8;
  if (!qword_269F795D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F795D8);
  }
  return result;
}

unint64_t sub_256A6C894()
{
  unint64_t result = qword_269F795E0;
  if (!qword_269F795E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F795E0);
  }
  return result;
}

unint64_t sub_256A6C8E4()
{
  unint64_t result = qword_269F795E8;
  if (!qword_269F795E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F795E8);
  }
  return result;
}

unint64_t sub_256A6C934()
{
  unint64_t result = qword_269F795F0;
  if (!qword_269F795F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F795F0);
  }
  return result;
}

unint64_t sub_256A6C984()
{
  unint64_t result = qword_269F795F8;
  if (!qword_269F795F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F795F8);
  }
  return result;
}

unint64_t sub_256A6C9D4()
{
  unint64_t result = qword_269F79600;
  if (!qword_269F79600)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79600);
  }
  return result;
}

unint64_t sub_256A6CA24()
{
  unint64_t result = qword_269F79608;
  if (!qword_269F79608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79608);
  }
  return result;
}

unint64_t sub_256A6CA74()
{
  unint64_t result = qword_269F79610;
  if (!qword_269F79610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79610);
  }
  return result;
}

unint64_t sub_256A6CAC4()
{
  unint64_t result = qword_269F79618;
  if (!qword_269F79618)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79618);
  }
  return result;
}

unint64_t sub_256A6CB14()
{
  unint64_t result = qword_269F79620;
  if (!qword_269F79620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79620);
  }
  return result;
}

unint64_t sub_256A6CB64()
{
  unint64_t result = qword_269F79628;
  if (!qword_269F79628)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79628);
  }
  return result;
}

unint64_t sub_256A6CBB4()
{
  unint64_t result = qword_269F79630;
  if (!qword_269F79630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79630);
  }
  return result;
}

unint64_t sub_256A6CC04()
{
  unint64_t result = qword_269F79638;
  if (!qword_269F79638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79638);
  }
  return result;
}

unint64_t sub_256A6CC54()
{
  unint64_t result = qword_269F79640;
  if (!qword_269F79640)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79640);
  }
  return result;
}

unint64_t sub_256A6CCA4()
{
  unint64_t result = qword_269F79648;
  if (!qword_269F79648)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79648);
  }
  return result;
}

unint64_t sub_256A6CCF4()
{
  unint64_t result = qword_269F79650;
  if (!qword_269F79650)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79650);
  }
  return result;
}

unint64_t sub_256A6CD44()
{
  unint64_t result = qword_269F79658;
  if (!qword_269F79658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79658);
  }
  return result;
}

unint64_t sub_256A6CD94()
{
  unint64_t result = qword_269F79660;
  if (!qword_269F79660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79660);
  }
  return result;
}

unint64_t sub_256A6CDE4()
{
  unint64_t result = qword_269F79668;
  if (!qword_269F79668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79668);
  }
  return result;
}

unint64_t sub_256A6CE34()
{
  unint64_t result = qword_269F79670;
  if (!qword_269F79670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79670);
  }
  return result;
}

unint64_t sub_256A6CE84()
{
  unint64_t result = qword_269F79678;
  if (!qword_269F79678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79678);
  }
  return result;
}

unint64_t sub_256A6CED4()
{
  unint64_t result = qword_269F79680;
  if (!qword_269F79680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79680);
  }
  return result;
}

unint64_t sub_256A6CF24()
{
  unint64_t result = qword_269F79688;
  if (!qword_269F79688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79688);
  }
  return result;
}

unint64_t sub_256A6CF74()
{
  unint64_t result = qword_269F79690;
  if (!qword_269F79690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79690);
  }
  return result;
}

unint64_t sub_256A6CFC4()
{
  unint64_t result = qword_269F79698;
  if (!qword_269F79698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79698);
  }
  return result;
}

unint64_t sub_256A6D014()
{
  unint64_t result = qword_269F796A0;
  if (!qword_269F796A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F796A0);
  }
  return result;
}

unint64_t sub_256A6D064()
{
  unint64_t result = qword_269F796A8;
  if (!qword_269F796A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F796A8);
  }
  return result;
}

unint64_t sub_256A6D0B4()
{
  unint64_t result = qword_269F796B0;
  if (!qword_269F796B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F796B0);
  }
  return result;
}

unint64_t sub_256A6D104()
{
  unint64_t result = qword_269F796B8;
  if (!qword_269F796B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F796B8);
  }
  return result;
}

unint64_t sub_256A6D154()
{
  unint64_t result = qword_269F796C0;
  if (!qword_269F796C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F796C0);
  }
  return result;
}

unint64_t sub_256A6D1A4()
{
  unint64_t result = qword_269F796C8;
  if (!qword_269F796C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F796C8);
  }
  return result;
}

unint64_t sub_256A6D1F4()
{
  unint64_t result = qword_269F796D0;
  if (!qword_269F796D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F796D0);
  }
  return result;
}

unint64_t sub_256A6D244()
{
  unint64_t result = qword_269F796D8;
  if (!qword_269F796D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F796D8);
  }
  return result;
}

unint64_t sub_256A6D294()
{
  unint64_t result = qword_269F796E0;
  if (!qword_269F796E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F796E0);
  }
  return result;
}

unint64_t sub_256A6D2E4()
{
  unint64_t result = qword_269F796E8;
  if (!qword_269F796E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F796E8);
  }
  return result;
}

unint64_t sub_256A6D334()
{
  unint64_t result = qword_269F796F0;
  if (!qword_269F796F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F796F0);
  }
  return result;
}

unint64_t sub_256A6D384()
{
  unint64_t result = qword_269F796F8;
  if (!qword_269F796F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F796F8);
  }
  return result;
}

unint64_t sub_256A6D3D4()
{
  unint64_t result = qword_269F79700;
  if (!qword_269F79700)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79700);
  }
  return result;
}

unint64_t sub_256A6D424()
{
  unint64_t result = qword_269F79708;
  if (!qword_269F79708)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79708);
  }
  return result;
}

unint64_t sub_256A6D474()
{
  unint64_t result = qword_269F79710;
  if (!qword_269F79710)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79710);
  }
  return result;
}

unint64_t sub_256A6D4C4()
{
  unint64_t result = qword_269F79718;
  if (!qword_269F79718)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79718);
  }
  return result;
}

unint64_t sub_256A6D514()
{
  unint64_t result = qword_269F79720;
  if (!qword_269F79720)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79720);
  }
  return result;
}

unint64_t sub_256A6D564()
{
  unint64_t result = qword_269F79728;
  if (!qword_269F79728)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79728);
  }
  return result;
}

unint64_t sub_256A6D5B4()
{
  unint64_t result = qword_269F79730;
  if (!qword_269F79730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79730);
  }
  return result;
}

unint64_t sub_256A6D604()
{
  unint64_t result = qword_269F79738;
  if (!qword_269F79738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79738);
  }
  return result;
}

unint64_t sub_256A6D654()
{
  unint64_t result = qword_269F79740;
  if (!qword_269F79740)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79740);
  }
  return result;
}

unint64_t sub_256A6D6A4()
{
  unint64_t result = qword_269F79748;
  if (!qword_269F79748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79748);
  }
  return result;
}

unint64_t sub_256A6D6F4()
{
  unint64_t result = qword_269F79750;
  if (!qword_269F79750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79750);
  }
  return result;
}

unint64_t sub_256A6D740()
{
  unint64_t result = qword_269F79758;
  if (!qword_269F79758)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79758);
  }
  return result;
}

unint64_t sub_256A6D78C()
{
  unint64_t result = qword_269F79760;
  if (!qword_269F79760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79760);
  }
  return result;
}

uint64_t sub_256A6D7D8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_256A39D2C(a3);
  sub_256A6E624();
  uint64_t v4 = sub_256A4A370();
  v5(v4);
  return a2;
}

uint64_t sub_256A6D830(uint64_t a1)
{
  uint64_t v2 = sub_256A39D2C((uint64_t *)&unk_26B2B5D90);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_256A6D890()
{
  unint64_t result = qword_26B2B5D00;
  if (!qword_26B2B5D00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5D00);
  }
  return result;
}

unint64_t sub_256A6D8E0()
{
  unint64_t result = qword_26B2B57E0;
  if (!qword_26B2B57E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B57E0);
  }
  return result;
}

uint64_t sub_256A6D92C(uint64_t result)
{
  if ((*(_DWORD *)(*(void *)(*(void *)(result + 24) - 8) + 80) & 0x20000) != 0) {
    JUMPOUT(0x25A2ABEE0);
  }
  return result;
}

unint64_t sub_256A6D9AC()
{
  unint64_t result = qword_26B2B5CB0;
  if (!qword_26B2B5CB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5CB0);
  }
  return result;
}

unint64_t sub_256A6D9FC()
{
  unint64_t result = qword_26B2B57D8;
  if (!qword_26B2B57D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B57D8);
  }
  return result;
}

unint64_t sub_256A6DA4C()
{
  unint64_t result = qword_26B2B5F60;
  if (!qword_26B2B5F60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5F60);
  }
  return result;
}

unint64_t sub_256A6DA9C()
{
  unint64_t result = qword_26B2B57D0;
  if (!qword_26B2B57D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B57D0);
  }
  return result;
}

unint64_t sub_256A6DAEC()
{
  unint64_t result = qword_26B2B6670;
  if (!qword_26B2B6670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B6670);
  }
  return result;
}

uint64_t sub_256A6DB3C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 112))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 232, 7);
}

unint64_t sub_256A6DBE8()
{
  unint64_t result = qword_26B2B57E8;
  if (!qword_26B2B57E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B57E8);
  }
  return result;
}

uint64_t sub_256A6DC80()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 112))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 200, 7);
}

uint64_t sub_256A6DD14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_256A39D2C((uint64_t *)&unk_26B2B5D90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_256A6DD7C()
{
  unint64_t result = qword_26B2B35B0;
  if (!qword_26B2B35B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B35B0);
  }
  return result;
}

unint64_t sub_256A6DDC8()
{
  unint64_t result = qword_26B2B3580;
  if (!qword_26B2B3580)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B3580);
  }
  return result;
}

unint64_t sub_256A6DE14()
{
  unint64_t result = qword_26B2B3558;
  if (!qword_26B2B3558)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B3558);
  }
  return result;
}

unint64_t sub_256A6DE60()
{
  unint64_t result = qword_26B2B35C0;
  if (!qword_26B2B35C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B35C0);
  }
  return result;
}

uint64_t sub_256A6DEAC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 96);
  uint64_t v4 = *(void *)(a1 + 88);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_256A54744(v4, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_256A6DFC8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 96);
  uint64_t v4 = *(void *)(a1 + 88);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_256A54744(v4, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_256A6E33C()
{
  return swift_dynamicCast();
}

void *sub_256A6E35C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  return memcpy(a1, &__src, 0xB8uLL);
}

uint64_t sub_256A6E374()
{
  return sub_256B3F160();
}

uint64_t sub_256A6E39C@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 81) = a1;
  return sub_256B3FE10();
}

void *sub_256A6E3CC(void *a1)
{
  return memcpy(a1, v1, 0xB8uLL);
}

uint64_t sub_256A6E3F0()
{
  return sub_256B3FEA0();
}

uint64_t sub_256A6E40C()
{
  return swift_allocObject();
}

uint64_t sub_256A6E424()
{
  return sub_256B3FD40();
}

uint64_t sub_256A6E450@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = (v2 - 32) | 0x8000000000000000;
  return swift_willThrow();
}

uint64_t sub_256A6E480()
{
  return 0x6C6F722E74616863;
}

uint64_t sub_256A6E4A4(uint64_t a1)
{
  return sub_256A39DB4(a1);
}

uint64_t sub_256A6E4C0()
{
  return swift_allocError();
}

double _s12ModelCatalog08LLMDraftA13AssetMetadataV22DeviceSpecialTokensMapV16startPromptToken0jkL3Str03endkL00nkL3Int14chatRoleSystem0pQ4User0pQ9Assistant0P16ComponentTurnend0pqR7Default04stoplO00xlM0AESiSg_SSSgArq5r2QtcfC_0@<D0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, long long a10, long long a11, long long a12, long long a13, __n128 a14, uint64_t a15, char a16, uint64_t a17, char a18)
{
  *(void *)&double result = sub_256A5BD90(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18).n128_u64[0];
  return result;
}

uint64_t sub_256A6E52C()
{
  return 0x79745F6C65646F6DLL;
}

uint64_t sub_256A6E55C()
{
  return 0x6F635F6C65646F6DLL;
}

uint64_t sub_256A6E57C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_256A6E598@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = (v2 - 32) | 0x8000000000000000;
  return swift_bridgeObjectRetain();
}

uint64_t sub_256A6E5D4()
{
  return sub_256B3FB70();
}

void sub_256A6E5EC(uint64_t a1, void *a2)
{
  *a2 = v2;
  a2[1] = v3;
}

uint64_t sub_256A6E634()
{
  return v0;
}

uint64_t sub_256A6E64C()
{
  return sub_256B3F740();
}

uint64_t sub_256A6E698()
{
  return v0;
}

unint64_t sub_256A6E6AC()
{
  return 0xD000000000000010;
}

uint64_t sub_256A6E6C0()
{
  return swift_bridgeObjectRetain();
}

void sub_256A6E6DC(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = (v2 - 32) | 0x8000000000000000;
}

uint64_t sub_256A6E71C()
{
  return sub_256B3FEA0();
}

uint64_t _s12ModelCatalog23LLMAdapterAssetMetadataV05DraftE0V10draftSteps0G10IsAdaptive0G10TreeFactor0G18SoftMatchTolerance0gK8MaxPaths0G20UseRejectionSampling0G11EarlyReturn0guV20ProbabilityThresholdAESiSg_SbSgANSdSgAn2oPtcfC_0@<X0>(uint64_t result@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, int a10, uint64_t a11, char a12)
{
  return sub_256A59418(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t sub_256A6E76C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  return sub_256A6DFC8((uint64_t)&a37);
}

uint64_t sub_256A6E788()
{
  return sub_256B3FDD0();
}

uint64_t sub_256A6E7A4()
{
  return sub_256B3FE10();
}

uint64_t sub_256A6E7E0()
{
  return 1701869940;
}

uint64_t sub_256A6E7F0()
{
  return sub_256B3FD40();
}

uint64_t sub_256A6E818()
{
  return sub_256B3FD00();
}

void sub_256A6E834(uint64_t a1, void *a2)
{
  *a2 = v3;
  a2[1] = v2;
}

uint64_t sub_256A6E848()
{
  return sub_256B3FEA0();
}

uint64_t sub_256A6E860()
{
  return *v0;
}

void *sub_256A6E86C()
{
  return sub_256A39D70(v0, v0[3]);
}

uint64_t sub_256A6E890()
{
  return sub_256B3FCD0();
}

uint64_t sub_256A6E8B0()
{
  return sub_256A39DB4(v0 - 160);
}

uint64_t sub_256A6E8D0()
{
  return 0x5F747865746E6F63;
}

void sub_256A6E8F4(uint64_t a1, void *a2)
{
  *a2 = v3;
  a2[1] = v2;
}

uint64_t sub_256A6E90C()
{
  return v0;
}

uint64_t sub_256A6E924()
{
  return sub_256B3FD40();
}

uint64_t sub_256A6E940()
{
  return 0x617A696C61636F6CLL;
}

uint64_t sub_256A6E960()
{
  return 0x5F72657470616461;
}

uint64_t sub_256A6E980@<X0>(int a1@<W8>)
{
  return (a1 + 1);
}

uint64_t sub_256A6E994()
{
  return sub_256B3F300();
}

unint64_t sub_256A6E9B0(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
}

uint64_t sub_256A6E9B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  return sub_256A6DFC8((uint64_t)&a37);
}

void *sub_256A6E9E8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  return memcpy(a1, &__src, 0xD8uLL);
}

uint64_t sub_256A6EA00(uint64_t a1)
{
  return *(void *)a1;
}

void sub_256A6EA0C(uint64_t a1, void *a2)
{
  *a2 = v3;
  a2[1] = v2;
}

uint64_t sub_256A6EA20()
{
  return sub_256B3FE50();
}

uint64_t sub_256A6EA50()
{
  return v0;
}

uint64_t sub_256A6EA60()
{
  return v0;
}

uint64_t sub_256A6EA98()
{
  return sub_256B3FF40();
}

uint64_t sub_256A6EAC4()
{
  return 0x6E656C5F787463;
}

uint64_t sub_256A6EB1C()
{
  return sub_256B3FE10();
}

uint64_t sub_256A6EB50()
{
  sub_256A39DB4(*(void *)(v1 - 96));
  return v0;
}

uint64_t _s12ModelCatalog23LLMAdapterAssetMetadataV010ClassifierE0V13outputClassesSayAC0F11OutputClassVGvg_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_256A6EB74@<X0>(uint64_t result@<X0>, __int16 a2@<W8>)
{
  *(_WORD *)(result + 1) = a2;
  return result;
}

uint64_t sub_256A6EB7C@<X0>(uint64_t result@<X0>, int a2@<W8>)
{
  *(_DWORD *)(result + 1) = a2;
  return result;
}

unsigned char *sub_256A6EB84@<X0>(unsigned char *result@<X0>, char a2@<W8>)
{
  *double result = a2;
  return result;
}

uint64_t sub_256A6EB8C@<X0>(uint64_t result@<X0>, char a2@<W8>)
{
  *(unsigned char *)(result + 1) = a2;
  return result;
}

uint64_t _s12ModelCatalog08LLMDraftA13AssetMetadataV17e5FunctionNameMapSDySSAC13ANEExtendInfoVGSgvg_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_256A6EBD4()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_256A6EBEC@<X0>(uint64_t a1@<X1>, char a2@<W8>)
{
  *(unsigned char *)(v2 + 344) = a2;
  return a1;
}

void sub_256A6EBF8()
{
  uint64_t v2 = *(void *)(v1 + 136);
  *(unsigned char *)(v0 + 144) = *(unsigned char *)(v1 + 144);
  *(void *)(v0 + 136) = v2;
  *(unsigned char *)(v0 + 145) = *(unsigned char *)(v1 + 145);
}

uint64_t sub_256A6EC30(uint64_t result, __n128 a2)
{
  *(__n128 *)(result + 136) = a2;
  *(__n128 *)(result + 120) = a2;
  *(__n128 *)(result + 104) = a2;
  *(__n128 *)(result + 88) = a2;
  *(__n128 *)(result + 72) = a2;
  *(__n128 *)(result + 56) = a2;
  *(__n128 *)(result + 40) = a2;
  *(__n128 *)(result + 24) = a2;
  *(__n128 *)(result + 8) = a2;
  return result;
}

uint64_t sub_256A6EC58()
{
  return sub_256B3FF80();
}

uint64_t sub_256A6EC7C(uint64_t result, uint64_t a2)
{
  *(void *)double result = *(void *)a2;
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  return result;
}

uint64_t sub_256A6EC94()
{
  *(void *)(v0 + 32) = *(void *)(v1 + 32);
  *(void *)(v0 + 40) = *(void *)(v1 + 40);
  return swift_bridgeObjectRetain();
}

uint64_t sub_256A6ECB8()
{
  return sub_256B3FF90();
}

uint64_t sub_256A6ECD4()
{
  return sub_256B3FDE0();
}

void sub_256A6ECFC(char a1@<W8>)
{
  *(unsigned char *)(v1 + 136) = a1;
}

uint64_t sub_256A6ED08()
{
  return sub_256B3FF80();
}

uint64_t sub_256A6ED2C()
{
  return 1802396018;
}

uint64_t sub_256A6ED3C()
{
  return 0x74735F7466617264;
}

uint64_t sub_256A6ED64()
{
  return sub_256B3FF40();
}

uint64_t sub_256A6ED80()
{
  return v0;
}

uint64_t sub_256A6ED98()
{
  return *(void *)(v0 + 200);
}

void sub_256A6EDC8(__n128 *a1@<X8>, __n128 a2@<Q0>, __n128 a3@<Q1>)
{
  a1[2] = a2;
  a1[3] = a3;
  a1[4].n128_u64[0] = v3;
  a1[4].n128_u8[8] = v4;
}

uint64_t sub_256A6EDD8@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 + 456) = a1;
  return v1 + 456;
}

uint64_t sub_256A6EDF0()
{
  return sub_256B3FEA0();
}

uint64_t sub_256A6EE0C()
{
  return sub_256B3FD50();
}

uint64_t sub_256A6EE40()
{
  return sub_256B3FE00();
}

uint64_t sub_256A6EE74()
{
  return sub_256B3FF80();
}

void sub_256A6EE98(uint64_t a1, void *a2)
{
  *a2 = v2;
  a2[1] = v3;
}

void sub_256A6EEAC(uint64_t a1, void *a2)
{
  *a2 = v3;
  a2[1] = v2;
}

uint64_t sub_256A6EEC0()
{
  return sub_256B3FE10();
}

uint64_t sub_256A6EEE0()
{
  return sub_256B3FE10();
}

uint64_t sub_256A6EF00@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 81) = a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_256A6EF18()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_256A6EF30()
{
  *(void *)(v0 + 88) = *(void *)(v1 + 88);
  uint64_t result = *(void *)(v1 + 96);
  *(void *)(v0 + 96) = result;
  return result;
}

uint64_t sub_256A6EF44()
{
  return sub_256B3FD40();
}

uint64_t sub_256A6EF64()
{
  return sub_256B3FEA0();
}

uint64_t sub_256A6EF84()
{
  return v0;
}

uint64_t _s12ModelCatalog08LLMDraftA13AssetMetadataV22DeviceSpecialTokensMapV17endPromptTokenIntSiSgvg_0()
{
  return *(void *)(v0 + 48);
}

uint64_t sub_256A6EF9C()
{
  return swift_allocObject();
}

uint64_t sub_256A6EFB4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  *a8 = result;
  a8[1] = a2;
  a8[2] = a3;
  a8[3] = a4;
  a8[4] = a5;
  a8[5] = a6;
  a8[6] = a7;
  return sub_256A60220(result);
}

uint64_t _s12ModelCatalog08LLMDraftA13AssetMetadataV05DraftE0V15draftTreeFactorSiSgvg_0()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_256A6F030()
{
  return swift_bridgeObjectRetain();
}

uint64_t _s12ModelCatalog08LLMDraftA13AssetMetadataV22DeviceSpecialTokensMapV16startPromptTokenSiSgvg_0()
{
  return *(void *)v0;
}

uint64_t sub_256A6F07C()
{
  return v0;
}

uint64_t sub_256A6F090()
{
  return v0;
}

void sub_256A6F0A4()
{
  *(void *)(v0 + 136) = *(void *)(v1 + 136);
  *(_WORD *)(v0 + 144) = *(_WORD *)(v1 + 144);
}

uint64_t sub_256A6F0B8()
{
  return swift_getWitnessTable();
}

void sub_256A6F0D8(char a1@<W8>)
{
  *(unsigned char *)(v1 - 168) = a1;
}

void sub_256A6F0E4()
{
  *(unsigned char *)(v0 - 65) = 0;
}

void *sub_256A6F0F0(void *a1)
{
  return sub_256A39D70(a1, v1);
}

void sub_256A6F10C()
{
  sub_256A4A878();
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  sub_256B3F180();
  swift_allocObject();
  sub_256B3F170();
  sub_256A7A32C(v5, (uint64_t)v39, &qword_26B2B5C08);
  if (!v39[3]) {
    goto LABEL_28;
  }
  sub_256A7A32C((uint64_t)v39, (uint64_t)v38, &qword_26B2B5C08);
  uint64_t v6 = sub_256A39D2C(&qword_26B2B3000);
  uint64_t v7 = sub_256A7A878();
  if (!v7)
  {
    uint64_t v15 = sub_256A7A878();
    if (v15)
    {
      sub_256A7B0FC(v15, v16, v17, v18, v19, v20, v21, v22, v36[0], v36[1], v36[2], v36[3], v36[4], v36[5], v36[6], v36[7], v36[8], v36[9], v36[10],
        v36[11],
        v36[12],
        v36[13],
        v36[14],
        v36[15],
        v36[16],
        v36[17],
        v36[18],
        v36[19],
        v36[20],
        v36[21],
        *(uint64_t *)&__src[0],
        *((uint64_t *)&__src[0] + 1),
        *(uint64_t *)&__src[1],
        *((uint64_t *)&__src[1] + 1),
        __src[2]);
      sub_256A7A4BC();
      sub_256A7A9F0();
      if (v1)
      {
        sub_256A77738((uint64_t)v36);
        goto LABEL_25;
      }
      sub_256A7AE98();
      sub_256A77738(v25);
      sub_256A39DB4((uint64_t)v38);
      char v24 = 1;
      goto LABEL_16;
    }
    if (sub_256A7A878())
    {
      memcpy(v36, __src, sizeof(v36));
      sub_256A7A470();
      sub_256A7A9F0();
      if (v1)
      {
        sub_256A77C84((uint64_t)v36);
        goto LABEL_25;
      }
      sub_256A7B4C4();
      sub_256A77C84(v29);
      sub_256A39DB4((uint64_t)v38);
      char v24 = 0;
      uint64_t v30 = "TokenGeneration.LLM";
      goto LABEL_21;
    }
    if (sub_256A7A878())
    {
      memcpy(v36, __src, sizeof(v36));
      sub_256A7A424();
      sub_256A7A9F0();
      if (v1)
      {
        sub_256A77A48((uint64_t)v36);
        goto LABEL_25;
      }
      sub_256A7B4C4();
      sub_256A77A48(v33);
      sub_256A39DB4((uint64_t)v38);
      uint64_t v34 = "TokenGeneration.LLM";
      goto LABEL_33;
    }
    if (sub_256A7A878())
    {
      memcpy(v36, __src, 0x60uLL);
      sub_256A7A3D8();
      uint64_t v27 = sub_256A7A9F0();
      if (v1)
      {
        sub_256A78110((uint64_t)v36);
        goto LABEL_25;
      }
      uint64_t v6 = v27;
      uint64_t v5 = v28;
      sub_256A78110((uint64_t)v36);
      sub_256A39DB4((uint64_t)v38);
      char v24 = 0;
      uint64_t v2 = 0xD00000000000001ALL;
      uint64_t v30 = "VisualGeneration.Diffusion";
LABEL_21:
      unint64_t v26 = (unint64_t)(v30 - 32) | 0x8000000000000000;
      goto LABEL_29;
    }
    if (sub_256A7A878())
    {
      memcpy(v36, __src, 0x60uLL);
      sub_256A7A38C();
      uint64_t v31 = sub_256A7A9F0();
      if (v1)
      {
        sub_256A77F64((uint64_t)v36);
        goto LABEL_25;
      }
      uint64_t v6 = v31;
      uint64_t v5 = v32;
      sub_256A77F64((uint64_t)v36);
      sub_256A39DB4((uint64_t)v38);
      uint64_t v2 = 0xD00000000000001ALL;
      uint64_t v34 = "VisualGeneration.Diffusion";
LABEL_33:
      unint64_t v26 = (unint64_t)(v34 - 32) | 0x8000000000000000;
      char v24 = 1;
      goto LABEL_29;
    }
    sub_256A39DB4((uint64_t)v38);
LABEL_28:
    char v24 = 0;
    uint64_t v2 = 0;
    uint64_t v6 = 0;
    uint64_t v5 = 0xC000000000000000;
    unint64_t v26 = 0xE000000000000000;
    goto LABEL_29;
  }
  sub_256A7B0FC(v7, v8, v9, v10, v11, v12, v13, v14, v36[0], v36[1], v36[2], v36[3], v36[4], v36[5], v36[6], v36[7], v36[8], v36[9], v36[10],
    v36[11],
    v36[12],
    v36[13],
    v36[14],
    v36[15],
    v36[16],
    v36[17],
    v36[18],
    v36[19],
    v36[20],
    v36[21],
    *(uint64_t *)&__src[0],
    *((uint64_t *)&__src[0] + 1),
    *(uint64_t *)&__src[1],
    *((uint64_t *)&__src[1] + 1),
    __src[2]);
  sub_256A7A508();
  sub_256A7A9F0();
  if (!v1)
  {
    sub_256A7AE98();
    sub_256A7783C(v23);
    sub_256A39DB4((uint64_t)v38);
    char v24 = 0;
LABEL_16:
    unint64_t v26 = 0xE900000000000072;
LABEL_29:
    sub_256A498E4((uint64_t)v39, &qword_26B2B5C08);
    id v35 = objc_allocWithZone(v3);
    ResourceBundleContainer.init(resourceBundleData:resourceBundleType:assetBacked:)(v6, v5, v2, v26, v24);
    swift_release();
    goto LABEL_30;
  }
  sub_256A7783C((uint64_t)v36);
LABEL_25:
  swift_release();
  sub_256A39DB4((uint64_t)v38);
  sub_256A498E4((uint64_t)v39, &qword_26B2B5C08);
LABEL_30:
  sub_256A4A890();
}

uint64_t sub_256A6F4B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_256B3F150();
  swift_allocObject();
  sub_256B3F140();
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  uint64_t v5 = *(void *)(a1 + OBJC_IVAR____TtC12ModelCatalog23ResourceBundleContainer_resourceBundleType);
  uint64_t v6 = *(void *)(a1 + OBJC_IVAR____TtC12ModelCatalog23ResourceBundleContainer_resourceBundleType + 8);
  BOOL v7 = v5 == 0x657A6974696E6153 && v6 == 0xE900000000000072;
  if (v7 || (sub_256A6E3F0() & 1) != 0)
  {
    if (*(unsigned char *)(a1 + OBJC_IVAR____TtC12ModelCatalog23ResourceBundleContainer_assetBacked) == 1)
    {
      sub_256A6E3E4();
      uint64_t v10 = &type metadata for AssetBackedSanitizerBundle;
      unint64_t v11 = sub_256A768A4();
      sub_256A7B57C();
      sub_256A6E390();
      sub_256A7A2E0();
    }
    else
    {
      sub_256A6E3E4();
      uint64_t v10 = &type metadata for SanitizerBundle;
      unint64_t v11 = sub_256A5243C();
      sub_256A7B57C();
      sub_256A6E390();
      sub_256A7A294();
    }
LABEL_9:
    sub_256A7ACC4();
    sub_256A498E4((uint64_t)v12, &qword_26B2B5C08);
    swift_release();
    if (v2) {
      return sub_256A6D92C((uint64_t)&v9);
    }
LABEL_11:
    sub_256A7A104((uint64_t)&v9, (uint64_t)v12, &qword_26B2B5C08);
    goto LABEL_12;
  }
  if (v5 == 0xD000000000000013 && v6 == 0x8000000256B48530 || (sub_256A6E3F0() & 1) != 0)
  {
    if (*(unsigned char *)(a1 + OBJC_IVAR____TtC12ModelCatalog23ResourceBundleContainer_assetBacked) == 1)
    {
      sub_256A6E3E4();
      uint64_t v10 = &type metadata for AssetBackedLLMBundle;
      unint64_t v11 = sub_256A52298();
      sub_256A52528();
      sub_256A6E390();
      sub_256A7A248();
      goto LABEL_9;
    }
    sub_256A6E3E4();
    uint64_t v10 = &type metadata for LLMBundle;
    unint64_t v11 = sub_256A52384();
    sub_256A52528();
    sub_256A6E390();
    sub_256A7A1FC();
LABEL_21:
    sub_256A7ACC4();
    if (v2)
    {
      sub_256A498E4((uint64_t)v12, &qword_26B2B5C08);
      swift_release();
      return sub_256A6D92C((uint64_t)&v9);
    }
    sub_256A498E4((uint64_t)v12, &qword_26B2B5C08);
    swift_release();
    goto LABEL_11;
  }
  if (v5 == 0xD00000000000001ALL && v6 == 0x8000000256B48550 || (sub_256A6E3F0() & 1) != 0)
  {
    if (*(unsigned char *)(a1 + OBJC_IVAR____TtC12ModelCatalog23ResourceBundleContainer_assetBacked) == 1)
    {
      sub_256A6E3E4();
      uint64_t v10 = &type metadata for AssetBackedDiffusionBundle;
      unint64_t v11 = sub_256A522E8();
      sub_256A525EC();
      sub_256A6E390();
      sub_256A7A1B0();
    }
    else
    {
      sub_256A6E3E4();
      uint64_t v10 = &type metadata for DiffusionBundle;
      unint64_t v11 = sub_256A767F4();
      sub_256A525EC();
      sub_256A6E390();
      sub_256A7A164();
    }
    goto LABEL_21;
  }
  swift_release();
LABEL_12:
  sub_256A7A104((uint64_t)v12, (uint64_t)&v9, &qword_26B2B5C08);
  if (v10) {
    return sub_256A3A540(&v9, a2);
  }
  uint64_t result = sub_256A498E4((uint64_t)&v9, &qword_26B2B5C08);
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

uint64_t SanitizerBundle.init(id:sanitizer:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_256A6FFF4(a1, a2, (uint64_t (*)(uint64_t, void *))sub_256A3A540, a3);
}

uint64_t AssetBackedLLMBundle.init(id:tokenizer:baseModel:adapter:draftModel:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  return sub_256A6F960(a1, a2, a3, a4, a5, (void (*)(uint64_t, void *))sub_256A3A540, (void (*)(uint64_t, void *))sub_256A3A540, &qword_26B2B3850, a6, &qword_26B2B3888);
}

uint64_t LLMBundle.init(id:tokenizer:baseModel:adapter:draftModel:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  return sub_256A6F960(a1, a2, a3, a4, a5, (void (*)(uint64_t, void *))sub_256A3A540, (void (*)(uint64_t, void *))sub_256A3A540, qword_26B2B5B58, a6, &qword_26B2B5BE8);
}

uint64_t sub_256A6F960@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t, void *)@<X5>, void (*a7)(uint64_t, void *)@<X6>, uint64_t *a8@<X7>, void *a9@<X8>, uint64_t *a10)
{
  uint64_t v16 = a1[1];
  *a9 = *a1;
  a9[1] = v16;
  a6(a2, a9 + 2);
  a7(a3, a9 + 7);
  sub_256A7A104(a4, (uint64_t)(a9 + 12), a8);
  return sub_256A7A104(a5, (uint64_t)(a9 + 17), a10);
}

uint64_t AssetBackedDiffusionBundle.init(id:baseModel:adapter:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return sub_256A76238(a1, a2, a3, (void (*)(uint64_t, void *))sub_256A3A540, &qword_269F79768, a4);
}

void static Catalog.ResourceBundle.deserialize(json:resourceBundleType:resources:assetBacked:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_256A4A878();
  a19 = v21;
  a20 = v28;
  uint64_t v29 = v24;
  uint64_t v30 = v23;
  uint64_t v31 = v27;
  a10 = MEMORY[0x263F8EE78];
  uint64_t v32 = *(void *)(v25 + 16);
  uint64_t v66 = v25;
  if (v32)
  {
    int v60 = v26;
    uint64_t v61 = v23;
    uint64_t v62 = v24;
    uint64_t v63 = v22;
    uint64_t v64 = v20;
    uint64_t v65 = v27;
    uint64_t v33 = v25 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_256A77F94(v33, (uint64_t)&v71);
      uint64_t v35 = v73;
      uint64_t v34 = v74;
      sub_256A39D70(&v71, v73);
      if (((*(uint64_t (**)(uint64_t, uint64_t))(v34 + 64))(v35, v34) & 1) == 0
        || (sub_256A77F94((uint64_t)&v71, (uint64_t)v70),
            sub_256A39D2C(&qword_26B2B5D80),
            sub_256A39D2C(&qword_26B2B54E8),
            (swift_dynamicCast() & 1) == 0))
      {
        uint64_t v69 = 0;
        long long v67 = 0u;
        long long v68 = 0u;
      }
      sub_256A39DB4((uint64_t)&v71);
      if (*((void *)&v68 + 1))
      {
        sub_256A3A540(&v67, (uint64_t)v70);
        sub_256A3A540(v70, (uint64_t)&v67);
        uint64_t v36 = a10;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_256A4A81C();
          sub_256B07A44();
          uint64_t v36 = v45;
          a10 = v45;
        }
        unint64_t v38 = *(void *)(v36 + 16);
        unint64_t v37 = *(void *)(v36 + 24);
        if (v38 >= v37 >> 1)
        {
          sub_256A7B3A8(v37);
          sub_256B07A44();
          a10 = v46;
        }
        uint64_t v39 = *((void *)&v68 + 1);
        uint64_t v40 = v69;
        uint64_t v41 = sub_256A39E04((uint64_t)&v67, *((uint64_t *)&v68 + 1));
        MEMORY[0x270FA5388](v41);
        uint64_t v43 = (char *)&v59 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v44 + 16))(v43);
        sub_256B0D69C(v38, (uint64_t)v43, &a10, v39, v40);
        sub_256A39DB4((uint64_t)&v67);
      }
      else
      {
        sub_256A498E4((uint64_t)&v67, &qword_26B2B5520);
      }
      v33 += 40;
      --v32;
    }
    while (v32);
    swift_bridgeObjectRelease();
    uint64_t v31 = v65;
    uint64_t v29 = v62;
    uint64_t v30 = v61;
    LOBYTE(v26) = v60;
  }
  if (v26)
  {
    BOOL v47 = v30 == 0x657A6974696E6153 && v29 == 0xE900000000000072;
    if (v47 || (sub_256A7A6E8() & 1) != 0)
    {
      *(void *)(v31 + 24) = &type metadata for AssetBackedSanitizerBundle;
      *(void *)(v31 + 32) = sub_256A768A4();
      uint64_t v48 = sub_256A7B57C();
      sub_256A7B374(v48);
      sub_256A7B364();
      AssetBackedSanitizerBundle.init(with:resources:)();
      goto LABEL_28;
    }
    if (v30 == 0xD000000000000013 && v29 == 0x8000000256B48530 || (sub_256A7A6E8() & 1) != 0)
    {
      *(void *)(v31 + 24) = &type metadata for AssetBackedLLMBundle;
      *(void *)(v31 + 32) = sub_256A52298();
      uint64_t v51 = sub_256A52528();
      sub_256A7B374(v51);
      sub_256A7B364();
      AssetBackedLLMBundle.init(with:resources:)();
      goto LABEL_28;
    }
    if (v30 == 0xD00000000000001ALL && v29 == 0x8000000256B48550 || (sub_256A7A6E8() & 1) != 0)
    {
      *(void *)(v31 + 24) = &type metadata for AssetBackedDiffusionBundle;
      *(void *)(v31 + 32) = sub_256A522E8();
      uint64_t v53 = sub_256A525EC();
      sub_256A7B374(v53);
      sub_256A7B364();
      AssetBackedDiffusionBundle.init(with:resources:)();
      goto LABEL_28;
    }
    swift_bridgeObjectRelease();
LABEL_48:
    unint64_t v71 = 0;
    unint64_t v72 = 0xE000000000000000;
    sub_256B3FB70();
    swift_bridgeObjectRelease();
    unint64_t v71 = 0xD00000000000001DLL;
    unint64_t v72 = 0x8000000256B48570;
    sub_256A7AE80();
    unint64_t v55 = v71;
    unint64_t v56 = v72;
    sub_256A529A4();
    uint64_t v57 = sub_256A6E4C0();
    *char v58 = v55;
    v58[1] = v56;
    sub_256A7A72C(v57, (uint64_t)v58);
    goto LABEL_30;
  }
  swift_bridgeObjectRelease();
  BOOL v49 = v30 == 0x657A6974696E6153 && v29 == 0xE900000000000072;
  if (v49 || (sub_256A7A6E8() & 1) != 0)
  {
    *(void *)(v31 + 24) = &type metadata for SanitizerBundle;
    *(void *)(v31 + 32) = sub_256A5243C();
    uint64_t v50 = sub_256A7B57C();
    sub_256A7ADB0(v50);
    swift_bridgeObjectRetain();
    sub_256A7B354();
    SanitizerBundle.init(with:resources:)();
    goto LABEL_28;
  }
  if (v30 == 0xD000000000000013 && v29 == 0x8000000256B48530 || (sub_256A7A6E8() & 1) != 0)
  {
    *(void *)(v31 + 24) = &type metadata for LLMBundle;
    *(void *)(v31 + 32) = sub_256A52384();
    uint64_t v52 = sub_256A52528();
    sub_256A7ADB0(v52);
    swift_bridgeObjectRetain();
    sub_256A7B354();
    LLMBundle.init(with:resources:)();
    goto LABEL_28;
  }
  if ((v30 != 0xD00000000000001ALL || v29 != 0x8000000256B48550) && (sub_256A7A6E8() & 1) == 0) {
    goto LABEL_48;
  }
  *(void *)(v31 + 24) = &type metadata for DiffusionBundle;
  *(void *)(v31 + 32) = sub_256A767F4();
  uint64_t v54 = sub_256A525EC();
  sub_256A7ADB0(v54);
  swift_bridgeObjectRetain();
  sub_256A7B354();
  DiffusionBundle.init(with:resources:)();
LABEL_28:
  if (v20) {
    sub_256A6D92C(v31);
  }
LABEL_30:
  sub_256A4A890();
}

uint64_t AssetBackedSanitizerBundle.init(id:sanitizer:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_256A6FFF4(a1, a2, (uint64_t (*)(uint64_t, void *))sub_256A3A540, a3);
}

uint64_t sub_256A6FFF4@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, void *)@<X2>, void *a4@<X8>)
{
  uint64_t v4 = a1[1];
  *a4 = *a1;
  a4[1] = v4;
  return a3(a2, a4 + 2);
}

void *AssetBackedSanitizerBundle.init(with:resources:)()
{
  sub_256A7B218();
  uint64_t v2 = v1;
  sub_256A7AC98(&v29);
  if (!v30)
  {
    swift_bridgeObjectRelease();
    sub_256A498E4((uint64_t)&v29, &qword_269F78B20);
LABEL_17:
    sub_256A7B608();
    swift_bridgeObjectRelease();
    sub_256A7AF28();
    sub_256A7B5B4();
    sub_256B3F5F0();
    sub_256B3F760();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v20 = v29;
    sub_256A529A4();
    uint64_t v21 = sub_256A6E4C0();
    *uint64_t v22 = v20;
    return (void *)sub_256A7A72C(v21, (uint64_t)v22);
  }
  uint64_t v3 = sub_256A7AA28();
  if ((v3 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  uint64_t v11 = v32;
  void *v2 = v31;
  v2[1] = v11;
  sub_256A7AB24(v3, v4, v5, v6, v7, v8, v9, v10, v28, v29);
  if (!v30)
  {
    swift_bridgeObjectRelease();
    sub_256A498E4((uint64_t)&v29, &qword_269F78B20);
LABEL_20:
    sub_256A7B5C8();
    sub_256A7B130();
    sub_256B3F760();
    sub_256B3F5F0();
    sub_256B3F760();
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
  if ((sub_256A7AA28() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  swift_bridgeObjectRelease();
  uint64_t v13 = v31;
  uint64_t v12 = v32;
  uint64_t v14 = *(void *)(v0 + 16);
  if (v14)
  {
    uint64_t v15 = v0 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_256A77F94(v15, (uint64_t)&v29);
      sub_256A39D70(&v29, v30);
      sub_256A7A6B0();
      if (v16() == v13 && v17 == v12) {
        break;
      }
      char v19 = sub_256A7B52C();
      swift_bridgeObjectRelease();
      if (v19) {
        goto LABEL_22;
      }
      sub_256A39DB4((uint64_t)&v29);
      v15 += 40;
      if (!--v14)
      {
        swift_bridgeObjectRelease();
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease();
LABEL_22:
    swift_bridgeObjectRelease();
    sub_256A3A540(&v29, (uint64_t)&v31);
  }
  else
  {
LABEL_14:
    sub_256A7B518();
  }
  swift_bridgeObjectRelease();
  if (v33)
  {
    sub_256A39D2C(&qword_26B2B54E8);
    if (sub_256A7A8DC())
    {
      swift_bridgeObjectRelease();
      v2[5] = &type metadata for AssetBackedSanitizerBase;
      v2[6] = sub_256A77664();
      uint64_t v24 = sub_256A6E40C();
      v2[2] = v24;
      return sub_256A7A8C4(&v29, (void *)(v24 + 16));
    }
  }
  else
  {
    sub_256A498E4((uint64_t)&v31, &qword_26B2B5520);
  }
  sub_256A7B5E8();
  swift_bridgeObjectRelease();
  sub_256A7AF64();
LABEL_28:
  swift_bridgeObjectRelease();
  long long v25 = v29;
  sub_256A529A4();
  uint64_t v26 = sub_256A6E4C0();
  *uint64_t v27 = v25;
  sub_256A7A72C(v26, (uint64_t)v27);
  return (void *)swift_bridgeObjectRelease();
}

uint64_t AssetBackedSanitizerBundle.resources.getter()
{
  uint64_t v0 = AssetBackedSanitizerBundle.assetBackedResources.getter();
  uint64_t v1 = sub_256A70480(v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t AssetBackedSanitizerBundle.assetBackedResources.getter()
{
  uint64_t v2 = v0 + 2;
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  sub_256A39D70(v2, v3);
  v16[3] = v3;
  v16[4] = *(void *)(v4 + 8);
  sub_256A49D7C(v16);
  sub_256A7A5C0();
  sub_256A7B4DC();
  v1();
  sub_256A7B40C();
  uint64_t v17 = v5;
  if (*(void *)(v5 + 16) >= *(void *)(v5 + 24) >> 1)
  {
    sub_256A7B3D4();
    uint64_t v17 = v15;
  }
  sub_256A7B7AC();
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = sub_256A7AA5C(v7, v16[0]);
  ((void (*)(char *))v1)(v8);
  uint64_t v9 = sub_256A7B428();
  sub_256B0D69C(v9, v10, v11, v12, v13);
  sub_256A39DB4((uint64_t)v16);
  return v17;
}

uint64_t sub_256A70480(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    sub_256B0B944();
    uint64_t v4 = a1 + 32;
    uint64_t v2 = v9;
    do
    {
      sub_256A77F94(v4, (uint64_t)v7);
      sub_256A39D2C(&qword_26B2B54E8);
      sub_256A39D2C(&qword_26B2B5D80);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_256B0B944();
        uint64_t v2 = v9;
      }
      unint64_t v5 = *(void *)(v2 + 16);
      if (v5 >= *(void *)(v2 + 24) >> 1)
      {
        sub_256B0B944();
        uint64_t v2 = v9;
      }
      *(void *)(v2 + 16) = v5 + 1;
      sub_256A3A540(&v8, v2 + 40 * v5 + 32);
      v4 += 40;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_256A705C0(uint64_t a1)
{
  unint64_t v2 = sub_256A776B4();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A705FC(uint64_t a1)
{
  unint64_t v2 = sub_256A776B4();

  return MEMORY[0x270FA00B8](a1, v2);
}

void AssetBackedSanitizerBundle.init(from:)()
{
  sub_256A4A878();
  unint64_t v2 = v1;
  uint64_t v4 = v3;
  sub_256A39D2C(&qword_269F79788);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v5);
  sub_256A39D70(v2, v2[3]);
  sub_256A776B4();
  sub_256A6EC58();
  if (v0)
  {
    sub_256A39DB4((uint64_t)v2);
  }
  else
  {
    sub_256A39D2C(&qword_269F79798);
    sub_256A78B08(&qword_269F797A0, &qword_269F79798);
    sub_256A7ABB4();
    long long v10 = v7;
    sub_256A7B594();
    long long v8 = &type metadata for AssetBackedSanitizerBase;
    unint64_t v9 = sub_256A77664();
    *(void *)&long long v7 = sub_256A6E40C();
    sub_256A66548();
    sub_256A7AB84();
    sub_256A6E550();
    v6();
    sub_256A3A540(&v7, (uint64_t)&v11);
    sub_256A77700((uint64_t)&v10, v4);
    sub_256A39DB4((uint64_t)v2);
    sub_256A77738((uint64_t)&v10);
  }
  sub_256A4A890();
}

void AssetBackedSanitizerBundle.encode(to:)()
{
  sub_256A4A878();
  sub_256A7B6F0();
  sub_256A39D2C(&qword_269F797A8);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v3);
  sub_256A7A800();
  sub_256A776B4();
  sub_256A7A830();
  uint64_t v4 = v2[1];
  *uint64_t v1 = *v2;
  v1[1] = v4;
  v11[0] = 0;
  sub_256A39D2C(&qword_269F79798);
  sub_256A78B08(&qword_269F797B0, &qword_269F79798);
  sub_256A7ACF0();
  if (v0) {
    goto LABEL_5;
  }
  sub_256A7B004();
  sub_256A39D2C(&qword_269F797B8);
  if (!sub_256A7B118())
  {
    sub_256A529A4();
    sub_256A6E4C0();
    sub_256A7ADD0(v7, (uint64_t)"SanitizerBundle sanitizer is wrong type");
LABEL_5:
    uint64_t v8 = sub_256A7A864();
    v9(v8);
    goto LABEL_6;
  }
  sub_256A7B6A4(v11);
  sub_256A7B6A4(&v10);
  sub_256A66594();
  sub_256A7A898();
  uint64_t v5 = sub_256A7A608();
  v6(v5);
  sub_256A6DFC8((uint64_t)v11);
LABEL_6:
  sub_256A7AC14();
  sub_256A4A890();
}

#error "256A709E8: call analysis failed (funcsize=98)"

void AssetBackedSanitizerBundle.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_256A7AA88();
  a23 = v25;
  a24 = v26;
  sub_256A7AA0C();
  sub_256A7A9B8();
  swift_bridgeObjectRelease();
  uint64_t v27 = AssetBackedSanitizerBundle.assetBackedResources.getter();
  sub_256A70480(v27);
  uint64_t v28 = sub_256A7AF4C();
  if (*(void *)(v24 + 16))
  {
    do
    {
      sub_256A7AF34(v28);
      uint64_t v29 = sub_256A7A65C(&a10);
      v30(v29);
      sub_256A7A7C0();
      swift_bridgeObjectRelease();
      uint64_t v28 = sub_256A7AC20((uint64_t)&a10);
    }
    while (!v31);
    swift_bridgeObjectRelease();
    sub_256A7A714();
  }
  else
  {
    sub_256A7A714();
    swift_bridgeObjectRelease();
  }
}

uint64_t AssetBackedSanitizerBundle.hashValue.getter()
{
  return sub_256A71964((void (*)(unsigned char *))AssetBackedSanitizerBundle.hash(into:));
}

void sub_256A70BF0()
{
}

void sub_256A70C08()
{
}

uint64_t sub_256A70C34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A719F8(a1, a2, a3, (void (*)(unsigned char *))AssetBackedSanitizerBundle.hash(into:));
}

uint64_t SanitizerBundle.rawID.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SanitizerBundle.sanitizer.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_256A77F94(v1 + 16, a1);
}

void *SanitizerBundle.init(with:resources:)()
{
  sub_256A7B218();
  unint64_t v2 = v1;
  sub_256A7AC98(&v29);
  if (!v30)
  {
    swift_bridgeObjectRelease();
    sub_256A498E4((uint64_t)&v29, &qword_269F78B20);
LABEL_17:
    sub_256A7B608();
    swift_bridgeObjectRelease();
    sub_256A7AF28();
    sub_256A7B5B4();
    sub_256B3F5F0();
    sub_256B3F760();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v20 = v29;
    sub_256A529A4();
    uint64_t v21 = sub_256A6E4C0();
    *uint64_t v22 = v20;
    return (void *)sub_256A7A72C(v21, (uint64_t)v22);
  }
  uint64_t v3 = sub_256A7AA28();
  if ((v3 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  uint64_t v11 = v32;
  void *v2 = v31;
  v2[1] = v11;
  sub_256A7AB24(v3, v4, v5, v6, v7, v8, v9, v10, v28, v29);
  if (!v30)
  {
    swift_bridgeObjectRelease();
    sub_256A498E4((uint64_t)&v29, &qword_269F78B20);
LABEL_20:
    sub_256A7B5C8();
    sub_256A7B130();
    sub_256B3F760();
    sub_256B3F5F0();
    sub_256B3F760();
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
  if ((sub_256A7AA28() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  swift_bridgeObjectRelease();
  uint64_t v13 = v31;
  uint64_t v12 = v32;
  uint64_t v14 = *(void *)(v0 + 16);
  if (v14)
  {
    uint64_t v34 = v2;
    uint64_t v15 = v0 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_256A77F94(v15, (uint64_t)&v29);
      sub_256A39D70(&v29, v30);
      sub_256A7A6B0();
      if (v16() == v13 && v17 == v12) {
        break;
      }
      char v19 = sub_256A7B52C();
      swift_bridgeObjectRelease();
      if (v19) {
        goto LABEL_22;
      }
      sub_256A39DB4((uint64_t)&v29);
      v15 += 40;
      if (!--v14)
      {
        swift_bridgeObjectRelease();
        unint64_t v2 = v34;
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease();
LABEL_22:
    swift_bridgeObjectRelease();
    sub_256A3A540(&v29, (uint64_t)&v31);
    swift_bridgeObjectRelease();
    unint64_t v2 = v34;
  }
  else
  {
LABEL_14:
    sub_256A7B518();
    swift_bridgeObjectRelease();
  }
  if (v33)
  {
    sub_256A39D2C(&qword_26B2B5D80);
    if (sub_256A7A8DC())
    {
      swift_bridgeObjectRelease();
      v2[5] = &type metadata for SanitizerBase;
      v2[6] = sub_256A77768();
      uint64_t v24 = sub_256A6E40C();
      v2[2] = v24;
      return sub_256A7A8C4(&v29, (void *)(v24 + 16));
    }
  }
  else
  {
    sub_256A498E4((uint64_t)&v31, (uint64_t *)&unk_26B2B5D90);
  }
  sub_256A7B5E8();
  swift_bridgeObjectRelease();
  sub_256A7AF64();
LABEL_28:
  swift_bridgeObjectRelease();
  long long v25 = v29;
  sub_256A529A4();
  uint64_t v26 = sub_256A6E4C0();
  *uint64_t v27 = v25;
  sub_256A7A72C(v26, (uint64_t)v27);
  return (void *)swift_bridgeObjectRelease();
}

uint64_t SanitizerBundle.resources.getter()
{
  unint64_t v2 = v0 + 2;
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  sub_256A39D70(v2, v3);
  v11[3] = v3;
  v11[4] = *(void *)(*(void *)(v4 + 8) + 8);
  sub_256A49D7C(v11);
  sub_256A7A5C0();
  sub_256A7B4DC();
  v1();
  sub_256A7B3F0();
  uint64_t v12 = v5;
  if (*(void *)(v5 + 16) >= *(void *)(v5 + 24) >> 1)
  {
    sub_256A7B3B8();
    uint64_t v12 = v10;
  }
  sub_256A7B7AC();
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = sub_256A7AA5C(v7, v11[0]);
  ((void (*)(char *))v1)(v8);
  sub_256A7B428();
  sub_256A47FB0();
  sub_256A39DB4((uint64_t)v11);
  return v12;
}

BOOL sub_256A710F4(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t sub_256A71104()
{
  return sub_256B3FF50();
}

uint64_t sub_256A7112C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (sub_256A7A7E4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x657A6974696E6173 && a2 == 0xE900000000000072)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    sub_256A7A7E4();
    sub_256A4AC50();
    if (a1) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_256A711F0()
{
  return 2;
}

uint64_t sub_256A711F8()
{
  return sub_256B3FF70();
}

uint64_t sub_256A71238(char a1)
{
  if (a1) {
    return 0x657A6974696E6173;
  }
  else {
    return 25705;
  }
}

BOOL sub_256A71268(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_256A710F4(*a1, *a2);
}

uint64_t sub_256A71274()
{
  return sub_256A711F8();
}

uint64_t sub_256A71290()
{
  return sub_256A71104();
}

uint64_t sub_256A71298()
{
  return sub_256B3FF70();
}

uint64_t sub_256A712DC()
{
  return sub_256A71238(*v0);
}

uint64_t sub_256A712E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_256A7112C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_256A7130C()
{
  return sub_256A54B3C();
}

uint64_t sub_256A7132C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_256A711F0();
  *a1 = result;
  return result;
}

uint64_t sub_256A71354(uint64_t a1)
{
  unint64_t v2 = sub_256A777B8();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A71390(uint64_t a1)
{
  unint64_t v2 = sub_256A777B8();

  return MEMORY[0x270FA00B8](a1, v2);
}

void SanitizerBundle.init(from:)()
{
  sub_256A4A878();
  unint64_t v2 = v1;
  uint64_t v4 = v3;
  sub_256A39D2C(&qword_269F797C0);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v5);
  sub_256A39D70(v2, v2[3]);
  sub_256A777B8();
  sub_256A6EC58();
  if (v0)
  {
    sub_256A39DB4((uint64_t)v2);
  }
  else
  {
    sub_256A39D2C(&qword_269F797D0);
    sub_256A78B08(&qword_269F797D8, &qword_269F797D0);
    sub_256A7ABB4();
    long long v10 = v7;
    sub_256A7B594();
    uint64_t v8 = &type metadata for SanitizerBase;
    unint64_t v9 = sub_256A77768();
    *(void *)&long long v7 = sub_256A6E40C();
    sub_256A66174();
    sub_256A7AB84();
    sub_256A6E550();
    v6();
    sub_256A3A540(&v7, (uint64_t)&v11);
    sub_256A77804((uint64_t)&v10, v4);
    sub_256A39DB4((uint64_t)v2);
    sub_256A7783C((uint64_t)&v10);
  }
  sub_256A4A890();
}

void SanitizerBundle.encode(to:)()
{
  sub_256A4A878();
  sub_256A7B6F0();
  sub_256A39D2C(&qword_269F797E0);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v3);
  sub_256A7A800();
  sub_256A777B8();
  sub_256A7A830();
  uint64_t v4 = v2[1];
  *uint64_t v1 = *v2;
  v1[1] = v4;
  v11[0] = 0;
  sub_256A39D2C(&qword_269F797D0);
  sub_256A78B08(&qword_269F797E8, &qword_269F797D0);
  sub_256A7ACF0();
  if (v0) {
    goto LABEL_5;
  }
  sub_256A7B004();
  sub_256A39D2C(&qword_269F797F0);
  if (!sub_256A7B118())
  {
    sub_256A529A4();
    sub_256A6E4C0();
    sub_256A7ADD0(v7, (uint64_t)"SanitizerBundle sanitizer is wrong type");
LABEL_5:
    uint64_t v8 = sub_256A7A864();
    v9(v8);
    goto LABEL_6;
  }
  sub_256A7B6A4(v11);
  sub_256A7B6A4(&v10);
  sub_256A661C0();
  sub_256A7A898();
  uint64_t v5 = sub_256A7A608();
  v6(v5);
  sub_256A6DFC8((uint64_t)v11);
LABEL_6:
  sub_256A7AC14();
  sub_256A4A890();
}

#error "256A7176C: call analysis failed (funcsize=92)"

void SanitizerBundle.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_256A7AA88();
  a23 = v24;
  a24 = v25;
  sub_256A7AA0C();
  sub_256A7A9B8();
  swift_bridgeObjectRelease();
  uint64_t v26 = SanitizerBundle.resources.getter();
  if (*(void *)(v26 + 16))
  {
    do
    {
      sub_256A7AF34(v26);
      uint64_t v27 = sub_256A7A65C(&a10);
      v28(v27);
      sub_256A7A7C0();
      swift_bridgeObjectRelease();
      uint64_t v26 = sub_256A7AC20((uint64_t)&a10);
    }
    while (!v29);
    swift_bridgeObjectRelease();
    sub_256A7A714();
  }
  else
  {
    sub_256A7A714();
    swift_bridgeObjectRelease();
  }
}

uint64_t SanitizerBundle.hashValue.getter()
{
  return sub_256A71964((void (*)(unsigned char *))SanitizerBundle.hash(into:));
}

uint64_t sub_256A71964(void (*a1)(unsigned char *))
{
  sub_256A7B200();
  a1(v3);
  return sub_256B3FF70();
}

void sub_256A719A4()
{
}

void sub_256A719BC()
{
}

uint64_t sub_256A719E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A719F8(a1, a2, a3, (void (*)(unsigned char *))SanitizerBundle.hash(into:));
}

uint64_t sub_256A719F8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *))
{
  sub_256B3FF40();
  a4(v6);
  return sub_256B3FF70();
}

uint64_t AssetBackedLLMBundle.rawID.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AssetBackedLLMBundle.tokenizer.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_256A77F94(v1 + 16, a1);
}

uint64_t AssetBackedLLMBundle.baseModel.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_256A77F94(v1 + 56, a1);
}

uint64_t AssetBackedLLMBundle.adapter.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_256A7A32C(v1 + 96, a1, &qword_26B2B3850);
}

uint64_t AssetBackedLLMBundle.draftModel.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_256A7A32C(v1 + 136, a1, &qword_26B2B3888);
}

void AssetBackedLLMBundle.init(with:resources:)()
{
  sub_256A4A878();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  sub_256A3A6A8(v4, &v78);
  LODWORD(v5) = MEMORY[0x263F8EE58];
  if (!v79)
  {
    swift_bridgeObjectRelease();
    sub_256A498E4((uint64_t)&v78, &qword_269F78B20);
LABEL_16:
    sub_256A7AD5C();
    sub_256B3FB70();
    swift_bridgeObjectRelease();
    sub_256A7AF28();
    sub_256A7B314(v12);
    sub_256B3F5F0();
    sub_256B3F760();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v13 = v78;
    sub_256A529A4();
    uint64_t v14 = sub_256A6E4C0();
    *uint64_t v15 = v13;
    sub_256A7A72C(v14, (uint64_t)v15);
    goto LABEL_17;
  }
  if ((sub_256A7B7CC() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  uint64_t v6 = *((void *)&v75 + 1);
  *(void *)uint64_t v3 = v75;
  *(void *)(v3 + 8) = v6;
  sub_256A7AEB8(&v78);
  if (!v79)
  {
    swift_bridgeObjectRelease();
    sub_256A498E4((uint64_t)&v78, &qword_269F78B20);
LABEL_20:
    sub_256A7AD5C();
    sub_256B3FB70();
    swift_bridgeObjectRelease();
    sub_256A7B314(0xD00000000000002DLL);
    sub_256B3F5F0();
    sub_256B3F760();
    swift_bridgeObjectRelease();
LABEL_36:
    swift_bridgeObjectRelease();
    sub_256A529A4();
    uint64_t v25 = sub_256A6E4C0();
    sub_256A7B4AC(v25, v26);
    goto LABEL_37;
  }
  if ((sub_256A7B7CC() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  uint64_t v5 = *(void *)(v1 + 16);
  if (!v5) {
    goto LABEL_34;
  }
  uint64_t v81 = v3;
  uint64_t v7 = v1 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_256A77F94(v7, (uint64_t)&v78);
    sub_256A39D70(&v78, v79);
    sub_256A7A6B0();
    if (v8() == (void)v75 && v9 == *((void *)&v75 + 1)) {
      break;
    }
    char v11 = sub_256A7A6E8();
    swift_bridgeObjectRelease();
    if (v11) {
      goto LABEL_22;
    }
    sub_256A39DB4((uint64_t)&v78);
    v7 += 40;
    if (!--v5)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      uint64_t v3 = v81;
      goto LABEL_35;
    }
  }
  swift_bridgeObjectRelease();
LABEL_22:
  swift_bridgeObjectRelease();
  sub_256A3A540(&v78, (uint64_t)&v80);
  uint64_t v16 = sub_256A39D2C(&qword_26B2B54E8);
  char v17 = sub_256A7A8DC();
  uint64_t v3 = v81;
  LODWORD(v5) = MEMORY[0x263F8EE58];
  if ((v17 & 1) == 0)
  {
LABEL_34:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_35:
    sub_256A7AD5C();
    sub_256B3FB70();
    swift_bridgeObjectRelease();
    *(void *)&long long v78 = 0xD000000000000024;
    *((void *)&v78 + 1) = 0x8000000256B48680;
    sub_256A7AE80();
    goto LABEL_36;
  }
  swift_bridgeObjectRelease();
  *(void *)(v81 + 40) = &type metadata for AssetBackedTokenizerBase;
  *(void *)(v81 + 48) = sub_256A7786C();
  uint64_t v18 = sub_256A6E40C();
  *(void *)(v81 + 16) = v18;
  sub_256A7A8C4(&v78, (void *)(v18 + 16));
  sub_256A7AE54(&v75);
  if (!v76)
  {
    swift_bridgeObjectRelease();
    sub_256A498E4((uint64_t)&v75, &qword_269F78B20);
LABEL_41:
    sub_256A7AAA0();
    sub_256B3FB70();
    swift_bridgeObjectRelease();
    *(void *)&long long v75 = 0xD00000000000002ELL;
    *((void *)&v75 + 1) = 0x8000000256B486B0;
    sub_256B3F5F0();
    sub_256B3F760();
    swift_bridgeObjectRelease();
LABEL_58:
    swift_bridgeObjectRelease();
    LODWORD(v5) = v75;
    sub_256A529A4();
    uint64_t v53 = sub_256A6E4C0();
    sub_256A7B798(v53, v54);
LABEL_37:
    swift_willThrow();
    swift_bridgeObjectRelease();
    if (v5) {
      sub_256A39DB4(v3 + 16);
    }
    goto LABEL_17;
  }
  if ((sub_256A7B464() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_41;
  }
  uint64_t v19 = *(void *)(v1 + 16);
  if (!v19) {
    goto LABEL_56;
  }
  uint64_t v64 = v16;
  swift_bridgeObjectRetain();
  uint64_t v20 = v1 + 32;
  while (1)
  {
    sub_256A77F94(v20, (uint64_t)&v75);
    sub_256A39D70(&v75, v76);
    sub_256A7A6B0();
    if (v21() == (void)v67 && v22 == *((void *)&v67 + 1)) {
      break;
    }
    char v24 = sub_256A7A6E8();
    swift_bridgeObjectRelease();
    if (v24) {
      goto LABEL_43;
    }
    sub_256A39DB4((uint64_t)&v75);
    v20 += 40;
    if (!--v19)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      uint64_t v3 = v81;
      goto LABEL_57;
    }
  }
  swift_bridgeObjectRelease();
LABEL_43:
  swift_bridgeObjectRelease();
  sub_256A3A540(&v75, (uint64_t)v77);
  uint64_t v3 = v81;
  if ((sub_256A7A8DC() & 1) == 0)
  {
LABEL_56:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_57:
    sub_256A7AAA0();
    sub_256B3FB70();
    swift_bridgeObjectRelease();
    *(void *)&long long v75 = 0xD000000000000023;
    *((void *)&v75 + 1) = 0x8000000256B486E0;
    sub_256A7AE80();
    goto LABEL_58;
  }
  swift_bridgeObjectRelease();
  *(void *)(v81 + 80) = &type metadata for AssetBackedLLMModelBase;
  *(void *)(v81 + 88) = sub_256A778BC();
  uint64_t v27 = sub_256A6E40C();
  *(void *)(v81 + 56) = v27;
  uint64_t v28 = sub_256A7A8C4(&v75, (void *)(v27 + 16));
  sub_256A7ADFC((uint64_t)v28, v29, v30, v31, v32, v33, v34, v35, v62, v64, v1 + 32, v67);
  if (v68)
  {
    uint64_t v36 = sub_256A7B390();
    uint64_t v44 = v66;
    if (v36)
    {
      uint64_t v45 = v72;
      uint64_t v46 = *(void *)(v1 + 16);
      if (v46)
      {
        uint64_t v47 = v66;
        uint64_t v48 = v71;
        swift_bridgeObjectRetain();
        while (1)
        {
          sub_256A77F94(v47, (uint64_t)&v67);
          sub_256A39D70(&v67, v68);
          sub_256A7A6B0();
          if (v49() == v48 && v50 == v45) {
            break;
          }
          char v52 = sub_256A7A6E8();
          swift_bridgeObjectRelease();
          if (v52) {
            goto LABEL_62;
          }
          sub_256A39DB4((uint64_t)&v67);
          v47 += 40;
          if (!--v46)
          {
            swift_bridgeObjectRelease();
            uint64_t v3 = v81;
            uint64_t v44 = v66;
            goto LABEL_55;
          }
        }
        swift_bridgeObjectRelease();
LABEL_62:
        uint64_t v44 = v66;
        swift_bridgeObjectRelease();
        sub_256A3A540(&v67, (uint64_t)v69);
        swift_bridgeObjectRelease();
        uint64_t v3 = v81;
      }
      else
      {
LABEL_55:
        sub_256A7B690();
        swift_bridgeObjectRelease();
      }
      if (v70)
      {
        if (sub_256A7A8DC())
        {
          uint64_t v73 = &type metadata for AssetBackedLLMAdapterBase;
          unint64_t v74 = sub_256A7795C();
          uint64_t v71 = sub_256A6E40C();
          sub_256A7A8C4(&v67, (void *)(v71 + 16));
LABEL_68:
          uint64_t v36 = sub_256A7A104((uint64_t)&v71, v3 + 96, &qword_26B2B3850);
          goto LABEL_69;
        }
      }
      else
      {
        sub_256A498E4((uint64_t)v69, &qword_26B2B5520);
      }
      sub_256A7B628();
      goto LABEL_68;
    }
  }
  else
  {
    uint64_t v36 = sub_256A498E4((uint64_t)&v67, &qword_269F78B20);
    uint64_t v44 = v66;
  }
  *(void *)(v81 + 128) = 0;
  *(_OWORD *)(v81 + 96) = 0u;
  *(_OWORD *)(v81 + 112) = 0u;
LABEL_69:
  sub_256A7AAC8(v36, v37, v38, v39, v40, v41, v42, v43, v63, v65, v66, v67);
  swift_bridgeObjectRelease();
  if (v68)
  {
    if (sub_256A7B390())
    {
      uint64_t v55 = v72;
      uint64_t v56 = *(void *)(v1 + 16);
      if (v56)
      {
        uint64_t v57 = v71;
        swift_bridgeObjectRetain();
        while (1)
        {
          sub_256A77F94(v44, (uint64_t)&v67);
          sub_256A39D70(&v67, v68);
          sub_256A7A6B0();
          if (v58() == v57 && v59 == v55) {
            break;
          }
          char v61 = sub_256A7B544();
          swift_bridgeObjectRelease();
          if (v61) {
            goto LABEL_85;
          }
          sub_256A39DB4((uint64_t)&v67);
          v44 += 40;
          if (!--v56)
          {
            swift_bridgeObjectRelease();
            goto LABEL_80;
          }
        }
        swift_bridgeObjectRelease();
LABEL_85:
        swift_bridgeObjectRelease();
        sub_256A3A540(&v67, (uint64_t)v69);
      }
      else
      {
LABEL_80:
        sub_256A7B690();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v70)
      {
        if (sub_256A7A8DC())
        {
          uint64_t v73 = &type metadata for AssetBackedLLMDraftModelBase;
          unint64_t v74 = sub_256A7790C();
          uint64_t v71 = sub_256A6E40C();
          sub_256A7A8C4(&v67, (void *)(v71 + 16));
LABEL_91:
          sub_256A7A104((uint64_t)&v71, v3 + 136, &qword_26B2B3888);
          goto LABEL_17;
        }
      }
      else
      {
        sub_256A498E4((uint64_t)v69, &qword_26B2B5520);
      }
      sub_256A7B628();
      goto LABEL_91;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_256A498E4((uint64_t)&v67, &qword_269F78B20);
  }
  *(void *)(v3 + 168) = 0;
  *(_OWORD *)(v3 + 152) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
LABEL_17:
  sub_256A4A890();
}

uint64_t AssetBackedLLMBundle.resources.getter()
{
  AssetBackedLLMBundle.assetBackedResources.getter();
  uint64_t v1 = sub_256A70480(v0);
  swift_bridgeObjectRelease();
  return v1;
}

void AssetBackedLLMBundle.assetBackedResources.getter()
{
  sub_256A4A6AC();
  uint64_t v1 = sub_256A39D70(v0 + 2, v0[5]);
  sub_256A7AD2C();
  sub_256A7A5C0();
  uint64_t v3 = *(void (**)(void))(v2 + 16);
  sub_256A7A704();
  v3();
  sub_256A7B40C();
  sub_256A7AD1C(v4);
  if (v5)
  {
    sub_256A7B3D4();
    uint64_t v52 = v38;
  }
  sub_256A7A9A8();
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = sub_256A7A6BC(v7, v45);
  ((void (*)(char *))v3)(v8);
  sub_256A7B228((uint64_t)v1, v9, &v52);
  sub_256A39DB4((uint64_t)v49);
  uint64_t v10 = v52;
  sub_256A39D70(v0 + 7, v0[10]);
  sub_256A7AD2C();
  sub_256A7A5C0();
  unint64_t v12 = *(void (**)(void))(v11 + 16);
  sub_256A7A8B4();
  v12();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_256A7B2D8();
    sub_256A7B664(v39);
  }
  unint64_t v14 = *(void *)(v10 + 16);
  unint64_t v13 = *(void *)(v10 + 24);
  if (v14 >= v13 >> 1)
  {
    sub_256A7B1A8(v13);
    sub_256B07A44();
    uint64_t v52 = v40;
  }
  sub_256A7ACB4();
  MEMORY[0x270FA5388](v15);
  sub_256A7A8B4();
  v12();
  sub_256A7B228(v14, v16, &v52);
  sub_256A39DB4((uint64_t)v49);
  uint64_t v17 = v52;
  sub_256A7A32C((uint64_t)(v0 + 12), (uint64_t)&v46, &qword_26B2B3850);
  if (v47)
  {
    sub_256A3A540(&v46, (uint64_t)v49);
    uint64_t v18 = v50;
    uint64_t v19 = v51;
    sub_256A39D70(v49, v50);
    uint64_t v47 = v18;
    uint64_t v20 = *(void *)(v19 + 8);
    uint64_t v48 = v20;
    sub_256A49D7C((uint64_t *)&v46);
    sub_256A7A5C0();
    uint64_t v22 = *(void (**)(void))(v21 + 16);
    sub_256A7A8B4();
    v22();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_256A4A81C();
      sub_256B07A44();
      uint64_t v17 = v41;
      uint64_t v52 = v41;
    }
    unint64_t v24 = *(void *)(v17 + 16);
    unint64_t v23 = *(void *)(v17 + 24);
    if (v24 >= v23 >> 1)
    {
      sub_256A7B3A8(v23);
      sub_256B07A44();
      uint64_t v52 = v42;
    }
    sub_256A7ACB4();
    MEMORY[0x270FA5388](v25);
    uint64_t v27 = (char *)&v45 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_256A7A8B4();
    v22();
    sub_256B0D69C(v24, (uint64_t)v27, &v52, v18, v20);
    sub_256A7B480();
  }
  else
  {
    sub_256A498E4((uint64_t)&v46, &qword_26B2B3850);
  }
  sub_256A7A32C((uint64_t)(v0 + 17), (uint64_t)&v46, &qword_26B2B3888);
  if (v47)
  {
    sub_256A7B094();
    uint64_t v48 = v0[1];
    sub_256A49D7C((uint64_t *)&v46);
    sub_256A7A5C0();
    uint64_t v29 = *(void (**)(void))(v28 + 16);
    sub_256A7A704();
    v29();
    uint64_t v30 = v52;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_256A7B2D8();
      sub_256A7B664(v43);
    }
    unint64_t v31 = *(void *)(v30 + 24);
    if (*(void *)(v30 + 16) >= v31 >> 1)
    {
      sub_256A7B1D8(v31);
      sub_256B07A44();
      uint64_t v52 = v44;
    }
    sub_256A7B7AC();
    MEMORY[0x270FA5388](v32);
    sub_256A7A704();
    v29();
    uint64_t v33 = sub_256A7B284();
    sub_256B0D69C(v33, v34, v35, v36, v37);
    sub_256A7B480();
  }
  else
  {
    sub_256A498E4((uint64_t)&v46, &qword_26B2B3888);
  }
  sub_256A4A554();
}

uint64_t sub_256A72834()
{
  return 5;
}

uint64_t sub_256A7283C(char a1)
{
  uint64_t result = 25705;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x657A696E656B6F74;
      break;
    case 2:
      uint64_t result = 0x65646F4D65736162;
      break;
    case 3:
      uint64_t result = 0x72657470616461;
      break;
    case 4:
      uint64_t result = 0x646F4D7466617264;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_256A728F0()
{
  return sub_256A7283C(*v0);
}

uint64_t sub_256A728F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_256A742E8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_256A72920@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_256A72834();
  *a1 = result;
  return result;
}

uint64_t sub_256A72948(uint64_t a1)
{
  unint64_t v2 = sub_256A779AC();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A72984(uint64_t a1)
{
  unint64_t v2 = sub_256A779AC();

  return MEMORY[0x270FA00B8](a1, v2);
}

void AssetBackedLLMBundle.init(from:)()
{
  sub_256A4A878();
  unint64_t v2 = v1;
  uint64_t v9 = v3;
  sub_256A39D2C(&qword_269F797F8);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v4);
  sub_256A7B704(v2);
  sub_256A779AC();
  sub_256A7B160();
  if (v0)
  {
    sub_256A39DB4((uint64_t)v2);
  }
  else
  {
    sub_256A39D2C(&qword_269F79808);
    sub_256A78B08(&qword_269F79810, &qword_269F79808);
    sub_256A7B440();
    long long v24 = v18;
    uint64_t v19 = &type metadata for AssetBackedTokenizerBase;
    unint64_t v20 = sub_256A7786C();
    *(void *)&long long v18 = sub_256A6E40C();
    sub_256A675FC();
    sub_256A7B06C();
    sub_256A3A540(&v18, (uint64_t)&v25);
    v17[0] = 2;
    uint64_t v19 = &type metadata for AssetBackedLLMModelBase;
    unint64_t v20 = sub_256A778BC();
    *(void *)&long long v18 = sub_256A6E40C();
    sub_256A650C4();
    sub_256A7B044();
    sub_256A3A540(&v18, (uint64_t)&v26);
    sub_256A6476C();
    sub_256A7A92C();
    sub_256A7A104((uint64_t)&v18, (uint64_t)v16, &qword_269F79818);
    sub_256A7A104((uint64_t)v16, (uint64_t)v17, &qword_269F79818);
    if (sub_256A779F8((uint64_t)v17) == 1)
    {
      unint64_t v23 = 0;
      long long v22 = 0u;
      long long v21 = 0u;
    }
    else
    {
      *((void *)&v22 + 1) = &type metadata for AssetBackedLLMAdapterBase;
      unint64_t v23 = sub_256A7795C();
      *(void *)&long long v21 = sub_256A6E40C();
      sub_256A7A8C4(v17, (void *)(v21 + 16));
    }
    sub_256A7A104((uint64_t)&v21, (uint64_t)&v27, &qword_26B2B3850);
    sub_256A64CA0();
    sub_256A7A92C();
    sub_256A7A104((uint64_t)&v12, (uint64_t)v10, &qword_269F79820);
    sub_256A7A104((uint64_t)v10, (uint64_t)v11, &qword_269F79820);
    if (sub_256A779F8((uint64_t)v11) == 1)
    {
      uint64_t v5 = sub_256A7A644();
      v6(v5);
      unint64_t v15 = 0;
      long long v13 = 0u;
      long long v14 = 0u;
    }
    else
    {
      *((void *)&v14 + 1) = &type metadata for AssetBackedLLMDraftModelBase;
      unint64_t v15 = sub_256A7790C();
      *(void *)&long long v13 = sub_256A6E40C();
      sub_256A7A8C4(v11, (void *)(v13 + 16));
      uint64_t v7 = sub_256A7B720();
      v8(v7);
    }
    sub_256A7A104((uint64_t)&v13, (uint64_t)&v28, &qword_26B2B3888);
    sub_256A77A10((uint64_t)&v24, v9);
    sub_256A39DB4((uint64_t)v2);
    sub_256A77A48((uint64_t)&v24);
  }
  sub_256A4A890();
}

void AssetBackedLLMBundle.encode(to:)()
{
  sub_256A4A878();
  sub_256A7AEF4();
  sub_256A39D2C(&qword_269F79828);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v2);
  sub_256A7A800();
  sub_256A779AC();
  sub_256A7A830();
  uint64_t v3 = v1[1];
  v29[0] = *v1;
  v29[1] = v3;
  v28[0] = 0;
  sub_256A39D2C(&qword_269F79808);
  sub_256A78B08(&qword_269F79830, &qword_269F79808);
  sub_256A7A990();
  if (v0) {
    goto LABEL_7;
  }
  sub_256A7B004();
  sub_256A39D2C(&qword_269F79838);
  if (sub_256A7B118())
  {
    memcpy(v28, v29, sizeof(v28));
    memcpy(v27, v29, sizeof(v27));
    v25[0] = 1;
    sub_256A67648();
    sub_256A7A898();
    sub_256A6DFC8((uint64_t)v28);
    sub_256A77F94((uint64_t)(v1 + 7), (uint64_t)&v26);
    sub_256A39D2C(&qword_269F79840);
    if (swift_dynamicCast())
    {
      memcpy(v25, v27, sizeof(v25));
      memcpy(v24, v27, sizeof(v24));
      sub_256A7B50C();
      sub_256A65110();
      sub_256A7A898();
      sub_256A6DFC8((uint64_t)v25);
      sub_256A7A32C((uint64_t)(v1 + 12), (uint64_t)v19, &qword_26B2B3850);
      if (v19[3])
      {
        sub_256A39D2C(&qword_269F79850);
        if (!swift_dynamicCast())
        {
          sub_256A529A4();
          sub_256A6E4C0();
          sub_256A7AEE4();
          uint64_t v13 = v12 - 2;
LABEL_24:
          sub_256A7AD4C(v11, v13);
          goto LABEL_6;
        }
        memcpy(v21, v22, sizeof(v21));
        nullsub_1(v21);
        uint64_t v10 = v21;
      }
      else
      {
        sub_256A498E4((uint64_t)v19, &qword_26B2B3850);
        sub_256A77A78(v22);
        uint64_t v10 = v22;
      }
      sub_256A7A104((uint64_t)v10, (uint64_t)v23, &qword_269F79818);
      sub_256A7A104((uint64_t)v23, (uint64_t)v22, &qword_269F79818);
      sub_256A647B8();
      sub_256A7A9D4();
      sub_256A77A80(v23);
      sub_256A7A32C((uint64_t)(v1 + 17), (uint64_t)v20, &qword_26B2B3888);
      if (!v20[3])
      {
        sub_256A498E4((uint64_t)v20, &qword_26B2B3888);
        sub_256A77A78(v19);
        long long v14 = v19;
        goto LABEL_22;
      }
      sub_256A39D2C(&qword_269F79848);
      if (swift_dynamicCast())
      {
        memcpy(v18, v19, sizeof(v18));
        nullsub_1(v18);
        long long v14 = v18;
LABEL_22:
        sub_256A7A104((uint64_t)v14, (uint64_t)v21, &qword_269F79820);
        sub_256A7A104((uint64_t)v21, (uint64_t)v19, &qword_269F79820);
        LOBYTE(v18[0]) = 4;
        sub_256A64CEC();
        sub_256A7A9D4();
        uint64_t v15 = sub_256A7A608();
        v16(v15);
        sub_256A77A80((__n128 *)v21);
        goto LABEL_8;
      }
      sub_256A529A4();
      sub_256A6E4C0();
      sub_256A7AEE4();
      uint64_t v13 = v17 + 1;
      goto LABEL_24;
    }
    sub_256A529A4();
    sub_256A6E4C0();
    uint64_t v5 = "LLMBundle baseModel is wrong type";
  }
  else
  {
    sub_256A529A4();
    sub_256A6E4C0();
    uint64_t v5 = "LLMBundle tokenizer is wrong type";
  }
  sub_256A7AA48(v4, (uint64_t)v5);
LABEL_6:
  sub_256A7AFD4(v6, v7);
LABEL_7:
  uint64_t v8 = sub_256A7A864();
  v9(v8);
LABEL_8:
  sub_256A7AC14();
  sub_256A4A890();
}

#error "256A73324: call analysis failed (funcsize=98)"

void AssetBackedLLMBundle.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_256A7AA88();
  a23 = v25;
  a24 = v26;
  sub_256A7AA0C();
  sub_256A7A9B8();
  swift_bridgeObjectRelease();
  AssetBackedLLMBundle.assetBackedResources.getter();
  sub_256A70480(v27);
  uint64_t v28 = sub_256A7AF4C();
  if (*(void *)(v24 + 16))
  {
    do
    {
      sub_256A7AF34(v28);
      uint64_t v29 = sub_256A7A65C(&a10);
      v30(v29);
      sub_256A7A7C0();
      swift_bridgeObjectRelease();
      uint64_t v28 = sub_256A7AC20((uint64_t)&a10);
    }
    while (!v31);
    swift_bridgeObjectRelease();
    sub_256A7A714();
  }
  else
  {
    sub_256A7A714();
    swift_bridgeObjectRelease();
  }
}

uint64_t AssetBackedLLMBundle.hashValue.getter()
{
  return sub_256A7506C((void (*)(unsigned char *))AssetBackedLLMBundle.hash(into:));
}

void sub_256A7352C()
{
}

void sub_256A73544()
{
}

uint64_t sub_256A73570(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A75100(a1, a2, a3, (void (*)(unsigned char *))AssetBackedLLMBundle.hash(into:));
}

uint64_t LLMBundle.adapter.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_256A7A32C(v1 + 96, a1, qword_26B2B5B58);
}

uint64_t LLMBundle.draftModel.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_256A7A32C(v1 + 136, a1, &qword_26B2B5BE8);
}

void LLMBundle.init(with:resources:)()
{
  sub_256A4A878();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  sub_256A3A6A8(v4, &v112);
  if (!v113)
  {
    swift_bridgeObjectRelease();
    sub_256A498E4((uint64_t)&v112, &qword_269F78B20);
LABEL_16:
    sub_256A7AD70();
    sub_256B3FB70();
    swift_bridgeObjectRelease();
    sub_256A7AF28();
    sub_256A7B2FC(v19);
    sub_256B3F5F0();
    sub_256B3F760();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v20 = v112;
    sub_256A529A4();
    uint64_t v21 = sub_256A6E4C0();
    *long long v22 = v20;
    sub_256A7A72C(v21, (uint64_t)v22);
    goto LABEL_17;
  }
  if ((sub_256A7B6BC() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  uint64_t v5 = *((void *)&v109 + 1);
  *(void *)uint64_t v3 = v109;
  *(void *)(v3 + 8) = v5;
  sub_256A7AEB8(&v112);
  if (!v113)
  {
    swift_bridgeObjectRelease();
    sub_256A498E4((uint64_t)&v112, &qword_269F78B20);
LABEL_20:
    sub_256A7AD70();
    sub_256B3FB70();
    swift_bridgeObjectRelease();
    sub_256A7B2FC(0xD00000000000002DLL);
    sub_256B3F5F0();
    sub_256B3F760();
    swift_bridgeObjectRelease();
LABEL_37:
    swift_bridgeObjectRelease();
    sub_256A529A4();
    uint64_t v39 = sub_256A6E4C0();
    sub_256A7B4AC(v39, v40);
    goto LABEL_38;
  }
  if ((sub_256A7B6BC() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  uint64_t v6 = *(void *)(v1 + 16);
  if (!v6) {
    goto LABEL_35;
  }
  uint64_t v116 = v3;
  uint64_t v7 = v1 + 32;
  uint64_t v98 = v1;
  swift_bridgeObjectRetain();
  uint64_t v95 = v1 + 32;
  while (1)
  {
    sub_256A77F94(v7, (uint64_t)&v112);
    uint64_t v1 = v114;
    sub_256A39D70(&v112, v113);
    sub_256A7A6B0();
    if (v8() == (void)v109 && v9 == *((void *)&v109 + 1))
    {
      sub_256A7AAB0();
      goto LABEL_23;
    }
    sub_256A7A6E8();
    uint64_t v11 = sub_256A7AFEC();
    if (v1) {
      break;
    }
    sub_256A39DB4((uint64_t)&v112);
    v7 += 40;
    if (!--v6)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      uint64_t v3 = v116;
      goto LABEL_36;
    }
  }
  sub_256A7AFC8(v11, v12, v13, v14, v15, v16, v17, v18, v91, v95, v98);
LABEL_23:
  swift_bridgeObjectRelease();
  sub_256A3A540(&v112, (uint64_t)&v115);
  uint64_t v23 = sub_256A39D2C(&qword_26B2B5D80);
  uint64_t v3 = v116;
  if ((sub_256A7A8DC() & 1) == 0)
  {
LABEL_35:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_36:
    sub_256A7AD70();
    sub_256B3FB70();
    swift_bridgeObjectRelease();
    *(void *)&long long v112 = 0xD000000000000024;
    *((void *)&v112 + 1) = 0x8000000256B48680;
    sub_256A7AE80();
    goto LABEL_37;
  }
  swift_bridgeObjectRelease();
  *(void *)(v116 + 40) = &type metadata for TokenizerBase;
  *(void *)(v116 + 48) = sub_256A77AC0();
  uint64_t v24 = sub_256A6EF9C();
  *(void *)(v116 + 16) = v24;
  sub_256A7AF04(&v112, (void *)(v24 + 16));
  sub_256A7AE54(&v109);
  if (!v110)
  {
    swift_bridgeObjectRelease();
    sub_256A498E4((uint64_t)&v109, &qword_269F78B20);
LABEL_42:
    *(void *)&long long v109 = 0;
    *((void *)&v109 + 1) = 0xE000000000000000;
    sub_256B3FB70();
    swift_bridgeObjectRelease();
    *(void *)&long long v109 = 0xD00000000000002ELL;
    *((void *)&v109 + 1) = 0x8000000256B486B0;
    sub_256B3F5F0();
    sub_256B3F760();
    swift_bridgeObjectRelease();
LABEL_60:
    swift_bridgeObjectRelease();
    LODWORD(v1) = v109;
    sub_256A529A4();
    uint64_t v74 = sub_256A6E4C0();
    sub_256A7B798(v74, v75);
LABEL_38:
    swift_willThrow();
    swift_bridgeObjectRelease();
    if (v1) {
      sub_256A39DB4(v3 + 16);
    }
    goto LABEL_17;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_42;
  }
  uint64_t v25 = *(void *)(v1 + 16);
  if (!v25) {
    goto LABEL_58;
  }
  uint64_t v92 = v23;
  swift_bridgeObjectRetain();
  uint64_t v26 = v95;
  while (1)
  {
    sub_256A77F94(v26, (uint64_t)&v109);
    uint64_t v27 = v110;
    sub_256A39D70(&v109, v110);
    sub_256A7A6B0();
    if (v28() == (void)v101 && v29 == *((void *)&v101 + 1))
    {
      sub_256A7AAB0();
      goto LABEL_45;
    }
    sub_256A7A6E8();
    uint64_t v31 = sub_256A7AFEC();
    if (v27) {
      break;
    }
    sub_256A39DB4((uint64_t)&v109);
    v26 += 40;
    if (!--v25)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      uint64_t v3 = v116;
      goto LABEL_59;
    }
  }
  sub_256A7AFC8(v31, v32, v33, v34, v35, v36, v37, v38, v23, v95, v98);
LABEL_45:
  swift_bridgeObjectRelease();
  sub_256A3A540(&v109, (uint64_t)v111);
  uint64_t v3 = v116;
  if ((sub_256A7A8DC() & 1) == 0)
  {
LABEL_58:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_59:
    *(void *)&long long v109 = 0;
    *((void *)&v109 + 1) = 0xE000000000000000;
    sub_256B3FB70();
    swift_bridgeObjectRelease();
    *(void *)&long long v109 = 0xD000000000000023;
    *((void *)&v109 + 1) = 0x8000000256B486E0;
    sub_256A7AE80();
    goto LABEL_60;
  }
  swift_bridgeObjectRelease();
  *(void *)(v116 + 80) = &type metadata for LLMModelBase;
  *(void *)(v116 + 88) = sub_256A77B10();
  uint64_t v41 = sub_256A6EF9C();
  *(void *)(v116 + 56) = v41;
  uint64_t v42 = sub_256A7AF04(&v109, (void *)(v41 + 16));
  sub_256A7ADFC((uint64_t)v42, v43, v44, v45, v46, v47, v48, v49, v92, v95, v98, v101);
  if (v102)
  {
    uint64_t v50 = sub_256A7B390();
    uint64_t v58 = v96;
    if (v50)
    {
      uint64_t v59 = v106;
      uint64_t v60 = *(void *)(v27 + 16);
      if (v60)
      {
        uint64_t v61 = v96;
        uint64_t v62 = v105;
        swift_bridgeObjectRetain();
        while (1)
        {
          sub_256A77F94(v61, (uint64_t)&v101);
          uint64_t v27 = v102;
          sub_256A39D70(&v101, v102);
          sub_256A7A6B0();
          if (v63() == v62 && v64 == v59)
          {
            sub_256A7AAB0();
            goto LABEL_65;
          }
          sub_256A7A6E8();
          uint64_t v66 = sub_256A7AFEC();
          if (v27) {
            break;
          }
          sub_256A39DB4((uint64_t)&v101);
          v61 += 40;
          if (!--v60)
          {
            sub_256A7AAB0();
            uint64_t v3 = v116;
            uint64_t v58 = v96;
            goto LABEL_57;
          }
        }
        sub_256A7AFC8(v66, v67, v68, v69, v70, v71, v72, v73, v93, v96, v99);
LABEL_65:
        uint64_t v3 = v116;
        uint64_t v58 = v96;
        swift_bridgeObjectRelease();
        sub_256A3A540(&v101, (uint64_t)v103);
        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_57:
        sub_256A7B5A0();
        swift_bridgeObjectRelease();
      }
      if (v104)
      {
        if (sub_256A7A8DC())
        {
          uint64_t v107 = &type metadata for LLMAdapterBase;
          unint64_t v108 = sub_256A77BB0();
          uint64_t v105 = sub_256A6EF9C();
          sub_256A7AF04(&v101, (void *)(v105 + 16));
LABEL_71:
          uint64_t v50 = sub_256A7A104((uint64_t)&v105, v3 + 96, qword_26B2B5B58);
          goto LABEL_72;
        }
      }
      else
      {
        sub_256A498E4((uint64_t)v103, (uint64_t *)&unk_26B2B5D90);
      }
      sub_256A7B63C();
      goto LABEL_71;
    }
  }
  else
  {
    uint64_t v50 = sub_256A498E4((uint64_t)&v101, &qword_269F78B20);
    uint64_t v58 = v96;
  }
  *(void *)(v116 + 128) = 0;
  *(_OWORD *)(v116 + 96) = 0u;
  *(_OWORD *)(v116 + 112) = 0u;
LABEL_72:
  sub_256A7AAC8(v50, v51, v52, v53, v54, v55, v56, v57, v93, v96, v99, v101);
  swift_bridgeObjectRelease();
  if (v102)
  {
    if (sub_256A7B390())
    {
      uint64_t v76 = v106;
      uint64_t v77 = *(void *)(v27 + 16);
      if (v77)
      {
        uint64_t v78 = v105;
        swift_bridgeObjectRetain();
        while (1)
        {
          sub_256A77F94(v58, (uint64_t)&v101);
          char v79 = v102;
          sub_256A39D70(&v101, v102);
          sub_256A7A6B0();
          if (v80() == v78 && v81 == v76)
          {
            sub_256A7AAB0();
            goto LABEL_89;
          }
          sub_256A7B544();
          uint64_t v83 = sub_256A7AFEC();
          if (v79) {
            break;
          }
          sub_256A39DB4((uint64_t)&v101);
          v58 += 40;
          if (!--v77)
          {
            sub_256A7AAB0();
            uint64_t v3 = v116;
            goto LABEL_83;
          }
        }
        sub_256A7AFC8(v83, v84, v85, v86, v87, v88, v89, v90, v94, v97, v100);
LABEL_89:
        swift_bridgeObjectRelease();
        sub_256A3A540(&v101, (uint64_t)v103);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v3 = v116;
      }
      else
      {
LABEL_83:
        sub_256A7B5A0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (v104)
      {
        if (sub_256A7A8DC())
        {
          uint64_t v107 = &type metadata for LLMDraftModelBase;
          unint64_t v108 = sub_256A77B60();
          uint64_t v105 = sub_256A6EF9C();
          sub_256A7AF04(&v101, (void *)(v105 + 16));
LABEL_95:
          sub_256A7A104((uint64_t)&v105, v3 + 136, &qword_26B2B5BE8);
          goto LABEL_17;
        }
      }
      else
      {
        sub_256A498E4((uint64_t)v103, (uint64_t *)&unk_26B2B5D90);
      }
      sub_256A7B63C();
      goto LABEL_95;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_256A498E4((uint64_t)&v101, &qword_269F78B20);
  }
  *(void *)(v3 + 168) = 0;
  *(_OWORD *)(v3 + 152) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
LABEL_17:
  sub_256A4A890();
}

void LLMBundle.resources.getter()
{
  sub_256A4A6AC();
  sub_256A7AC3C();
  sub_256A7A5C0();
  uint64_t v2 = *(void (**)(void))(v1 + 16);
  sub_256A7A704();
  v2();
  sub_256A7B3F0();
  sub_256A7AD1C(v3);
  if (v4)
  {
    sub_256A7B3B8();
    uint64_t v41 = v27;
  }
  sub_256A7A9A8();
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = sub_256A7A6BC(v6, v34);
  ((void (*)(char *))v2)(v7);
  sub_256A7B244();
  sub_256A39DB4((uint64_t)v38);
  uint64_t v8 = v41;
  uint64_t v9 = v0[10];
  uint64_t v10 = v0[11];
  sub_256A39D70(v0 + 7, v9);
  uint64_t v39 = v9;
  uint64_t v40 = *(void *)(*(void *)(*(void *)(v10 + 8) + 8) + 8);
  sub_256A49D7C(v38);
  sub_256A7A5C0();
  uint64_t v12 = *(void (**)(void))(v11 + 16);
  sub_256A7A8B4();
  v12();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_256A7B2B4();
    sub_256A7B664(v28);
  }
  unint64_t v13 = *(void *)(v8 + 24);
  if (*(void *)(v8 + 16) >= v13 >> 1)
  {
    sub_256A7B1A8(v13);
    sub_256B07A30();
    uint64_t v41 = v29;
  }
  sub_256A7ACB4();
  MEMORY[0x270FA5388](v14);
  sub_256A7A8B4();
  v12();
  sub_256A7B244();
  sub_256A39DB4((uint64_t)v38);
  uint64_t v15 = v41;
  sub_256A7A32C((uint64_t)(v0 + 12), (uint64_t)&v35, qword_26B2B5B58);
  if (v36)
  {
    sub_256A3A540(&v35, (uint64_t)v38);
    uint64_t v16 = v39;
    uint64_t v17 = v40;
    sub_256A39D70(v38, v39);
    uint64_t v36 = v16;
    uint64_t v37 = *(void *)(*(void *)(*(void *)(v17 + 8) + 8) + 8);
    sub_256A49D7C((uint64_t *)&v35);
    sub_256A7A5C0();
    unint64_t v19 = *(void (**)(void))(v18 + 16);
    sub_256A7A8B4();
    v19();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_256A4A81C();
      sub_256B07A30();
      uint64_t v15 = v30;
      uint64_t v41 = v30;
    }
    unint64_t v20 = *(void *)(v15 + 24);
    if (*(void *)(v15 + 16) >= v20 >> 1)
    {
      sub_256A7B3A8(v20);
      sub_256B07A30();
      uint64_t v41 = v31;
    }
    sub_256A7ACB4();
    MEMORY[0x270FA5388](v21);
    sub_256A7A8B4();
    v19();
    sub_256A47FB0();
    sub_256A7B480();
  }
  else
  {
    sub_256A498E4((uint64_t)&v35, qword_26B2B5B58);
  }
  sub_256A7A32C((uint64_t)(v0 + 17), (uint64_t)&v35, &qword_26B2B5BE8);
  if (v36)
  {
    sub_256A7B094();
    uint64_t v37 = *(void *)(v0[1] + 8);
    sub_256A49D7C((uint64_t *)&v35);
    sub_256A7A5C0();
    uint64_t v23 = *(void (**)(void))(v22 + 16);
    sub_256A7A704();
    v23();
    uint64_t v24 = v41;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_256A7B2B4();
      sub_256A7B664(v32);
    }
    unint64_t v25 = *(void *)(v24 + 24);
    if (*(void *)(v24 + 16) >= v25 >> 1)
    {
      sub_256A7B1D8(v25);
      sub_256B07A30();
      uint64_t v41 = v33;
    }
    sub_256A7B7AC();
    MEMORY[0x270FA5388](v26);
    sub_256A7A704();
    v23();
    sub_256A7B284();
    sub_256A47FB0();
    sub_256A7B480();
  }
  else
  {
    sub_256A498E4((uint64_t)&v35, &qword_26B2B5BE8);
  }
  sub_256A4A554();
}

uint64_t sub_256A742E8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (sub_256A7A7E4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x657A696E656B6F74 && a2 == 0xE900000000000072;
    if (v6 || (sub_256A7A7E4() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x65646F4D65736162 && a2 == 0xE90000000000006CLL;
      if (v7 || (sub_256A7A7E4() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        sub_256A7B148();
        BOOL v8 = v2 && a2 == 0xE700000000000000;
        if (v8 || (sub_256A7A7E4() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else if (a1 == 0x646F4D7466617264 && a2 == 0xEA00000000006C65)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else
        {
          sub_256A7A7E4();
          sub_256A4AC50();
          if (a1) {
            return 4;
          }
          else {
            return 5;
          }
        }
      }
    }
  }
}

uint64_t sub_256A744A8(uint64_t a1)
{
  unint64_t v2 = sub_256A77C00();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A744E4(uint64_t a1)
{
  unint64_t v2 = sub_256A77C00();

  return MEMORY[0x270FA00B8](a1, v2);
}

void LLMBundle.init(from:)()
{
  sub_256A4A878();
  unint64_t v2 = v1;
  uint64_t v9 = v3;
  sub_256A39D2C(&qword_26B2B5538);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v4);
  sub_256A7B704(v2);
  sub_256A77C00();
  sub_256A7B160();
  if (v0)
  {
    sub_256A39DB4((uint64_t)v2);
  }
  else
  {
    sub_256A39D2C(&qword_26B2B5C10);
    sub_256A78B08(&qword_26B2B5530, &qword_26B2B5C10);
    sub_256A7B440();
    long long v24 = v18;
    unint64_t v19 = &type metadata for TokenizerBase;
    unint64_t v20 = sub_256A77AC0();
    *(void *)&long long v18 = sub_256A6EF9C();
    sub_256A6D8E0();
    sub_256A7B06C();
    sub_256A3A540(&v18, (uint64_t)&v25);
    v17[0] = 2;
    unint64_t v19 = &type metadata for LLMModelBase;
    unint64_t v20 = sub_256A77B10();
    *(void *)&long long v18 = sub_256A6EF9C();
    sub_256A6D9FC();
    sub_256A7B044();
    sub_256A3A540(&v18, (uint64_t)&v26);
    sub_256A6DBE8();
    sub_256A7A92C();
    sub_256A7A104((uint64_t)&v18, (uint64_t)v16, (uint64_t *)&unk_26B2B5BF8);
    sub_256A7A104((uint64_t)v16, (uint64_t)v17, (uint64_t *)&unk_26B2B5BF8);
    if (sub_256A779F8((uint64_t)v17) == 1)
    {
      unint64_t v23 = 0;
      long long v22 = 0u;
      long long v21 = 0u;
    }
    else
    {
      *((void *)&v22 + 1) = &type metadata for LLMAdapterBase;
      unint64_t v23 = sub_256A77BB0();
      *(void *)&long long v21 = sub_256A6EF9C();
      sub_256A7AF04(v17, (void *)(v21 + 16));
    }
    sub_256A7A104((uint64_t)&v21, (uint64_t)&v27, qword_26B2B5B58);
    sub_256A6DA9C();
    sub_256A7A92C();
    sub_256A7A104((uint64_t)&v12, (uint64_t)v10, &qword_26B2B5BF0);
    sub_256A7A104((uint64_t)v10, (uint64_t)v11, &qword_26B2B5BF0);
    if (sub_256A779F8((uint64_t)v11) == 1)
    {
      uint64_t v5 = sub_256A7A644();
      v6(v5);
      unint64_t v15 = 0;
      long long v13 = 0u;
      long long v14 = 0u;
    }
    else
    {
      *((void *)&v14 + 1) = &type metadata for LLMDraftModelBase;
      unint64_t v15 = sub_256A77B60();
      *(void *)&long long v13 = sub_256A6EF9C();
      sub_256A7AF04(v11, (void *)(v13 + 16));
      uint64_t v7 = sub_256A7B720();
      v8(v7);
    }
    sub_256A7A104((uint64_t)&v13, (uint64_t)&v28, &qword_26B2B5BE8);
    sub_256A77C4C((uint64_t)&v24, v9);
    sub_256A39DB4((uint64_t)v2);
    sub_256A77C84((uint64_t)&v24);
  }
  sub_256A4A890();
}

void LLMBundle.encode(to:)()
{
  sub_256A4A878();
  sub_256A7AEF4();
  sub_256A39D2C((uint64_t *)&unk_26B2B38C0);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v2);
  sub_256A7A800();
  sub_256A77C00();
  sub_256A7A830();
  uint64_t v3 = v1[1];
  v29[0] = *v1;
  v29[1] = v3;
  v28[0] = 0;
  sub_256A39D2C(&qword_26B2B5C10);
  sub_256A78B08(&qword_26B2B38A0, &qword_26B2B5C10);
  sub_256A7A990();
  if (v0) {
    goto LABEL_7;
  }
  sub_256A7B004();
  sub_256A39D2C(&qword_26B2B38B8);
  if (sub_256A7B118())
  {
    memcpy(v28, v29, sizeof(v28));
    memcpy(v27, v29, sizeof(v27));
    v25[0] = 1;
    sub_256A6DD7C();
    sub_256A7A898();
    sub_256A6DEAC((uint64_t)v28);
    sub_256A77F94((uint64_t)(v1 + 7), (uint64_t)&v26);
    sub_256A39D2C(&qword_26B2B38A8);
    if (swift_dynamicCast())
    {
      memcpy(v25, v27, sizeof(v25));
      memcpy(v24, v27, sizeof(v24));
      sub_256A7B50C();
      sub_256A6DDC8();
      sub_256A7A898();
      sub_256A6DEAC((uint64_t)v25);
      sub_256A7A32C((uint64_t)(v1 + 12), (uint64_t)v19, qword_26B2B5B58);
      if (v19[3])
      {
        sub_256A39D2C(&qword_26B2B3898);
        if (!swift_dynamicCast())
        {
          sub_256A529A4();
          sub_256A6E4C0();
          sub_256A7AEE4();
          uint64_t v13 = v12 - 2;
LABEL_24:
          sub_256A7AD4C(v11, v13);
          goto LABEL_6;
        }
        memcpy(v21, v22, sizeof(v21));
        nullsub_1(v21);
        uint64_t v10 = v21;
      }
      else
      {
        sub_256A498E4((uint64_t)v19, qword_26B2B5B58);
        sub_256A77CB4(v22);
        uint64_t v10 = v22;
      }
      sub_256A7A104((uint64_t)v10, (uint64_t)v23, (uint64_t *)&unk_26B2B5BF8);
      sub_256A7A104((uint64_t)v23, (uint64_t)v22, (uint64_t *)&unk_26B2B5BF8);
      sub_256A6DE60();
      sub_256A7A9D4();
      sub_256A77CBC(v23);
      sub_256A7A32C((uint64_t)(v1 + 17), (uint64_t)v20, &qword_26B2B5BE8);
      if (!v20[3])
      {
        sub_256A498E4((uint64_t)v20, &qword_26B2B5BE8);
        sub_256A77CB4(v19);
        long long v14 = v19;
        goto LABEL_22;
      }
      sub_256A39D2C(&qword_26B2B3890);
      if (swift_dynamicCast())
      {
        memcpy(v18, v19, sizeof(v18));
        nullsub_1(v18);
        long long v14 = v18;
LABEL_22:
        sub_256A7A104((uint64_t)v14, (uint64_t)v21, &qword_26B2B5BF0);
        sub_256A7A104((uint64_t)v21, (uint64_t)v19, &qword_26B2B5BF0);
        LOBYTE(v18[0]) = 4;
        sub_256A6DE14();
        sub_256A7A9D4();
        uint64_t v15 = sub_256A7A608();
        v16(v15);
        sub_256A77CBC((__n128 *)v21);
        goto LABEL_8;
      }
      sub_256A529A4();
      sub_256A6E4C0();
      sub_256A7AEE4();
      uint64_t v13 = v17 + 1;
      goto LABEL_24;
    }
    sub_256A529A4();
    sub_256A6E4C0();
    uint64_t v5 = "LLMBundle baseModel is wrong type";
  }
  else
  {
    sub_256A529A4();
    sub_256A6E4C0();
    uint64_t v5 = "LLMBundle tokenizer is wrong type";
  }
  sub_256A7AA48(v4, (uint64_t)v5);
LABEL_6:
  sub_256A7AFD4(v6, v7);
LABEL_7:
  uint64_t v8 = sub_256A7A864();
  v9(v8);
LABEL_8:
  sub_256A7AC14();
  sub_256A4A890();
}

#error "256A74E74: call analysis failed (funcsize=92)"

void LLMBundle.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_256A7AA88();
  a23 = v24;
  a24 = v25;
  sub_256A7AA0C();
  sub_256A7A9B8();
  swift_bridgeObjectRelease();
  LLMBundle.resources.getter();
  if (*(void *)(v26 + 16))
  {
    do
    {
      sub_256A7AF34(v26);
      uint64_t v27 = sub_256A7A65C(&a10);
      v28(v27);
      sub_256A7A7C0();
      swift_bridgeObjectRelease();
      uint64_t v26 = sub_256A7AC20((uint64_t)&a10);
    }
    while (!v29);
    swift_bridgeObjectRelease();
    sub_256A7A714();
  }
  else
  {
    sub_256A7A714();
    swift_bridgeObjectRelease();
  }
}

uint64_t LLMBundle.hashValue.getter()
{
  return sub_256A7506C((void (*)(unsigned char *))LLMBundle.hash(into:));
}

uint64_t sub_256A7506C(void (*a1)(unsigned char *))
{
  sub_256A7B200();
  a1(v3);
  return sub_256B3FF70();
}

void sub_256A750AC()
{
}

void sub_256A750C4()
{
}

uint64_t sub_256A750E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A75100(a1, a2, a3, (void (*)(unsigned char *))LLMBundle.hash(into:));
}

uint64_t sub_256A75100(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *))
{
  sub_256B3FF40();
  a4(v6);
  return sub_256B3FF70();
}

uint64_t AssetBackedDiffusionBundle.adapter.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_256A7A32C(v1 + 56, a1, &qword_269F79768);
}

void AssetBackedDiffusionBundle.init(with:resources:)()
{
  sub_256A4A878();
  sub_256A7B218();
  uint64_t v2 = v1;
  sub_256A7AC98(&v35);
  if (!v36)
  {
    swift_bridgeObjectRelease();
    sub_256A498E4((uint64_t)&v35, &qword_269F78B20);
LABEL_16:
    sub_256A7B32C();
    sub_256B3FB70();
    swift_bridgeObjectRelease();
    sub_256A7AF28();
    *(void *)&long long v35 = v10;
    *((void *)&v35 + 1) = 0x8000000256B48590;
    sub_256B3F5F0();
    sub_256B3F760();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v11 = v35;
    sub_256A529A4();
    uint64_t v12 = sub_256A6E4C0();
    *uint64_t v13 = v11;
    sub_256A7A72C(v12, (uint64_t)v13);
    goto LABEL_37;
  }
  if ((sub_256A7B7EC() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  uint64_t v3 = *((void *)&v27 + 1);
  void *v2 = v27;
  v2[1] = v3;
  sub_256A7AE28(&v35);
  if (!v36)
  {
    swift_bridgeObjectRelease();
    sub_256A498E4((uint64_t)&v35, &qword_269F78B20);
LABEL_19:
    sub_256A7B32C();
    sub_256B3FB70();
    sub_256B3F760();
    sub_256B3F5F0();
    sub_256B3F760();
    swift_bridgeObjectRelease();
LABEL_36:
    swift_bridgeObjectRelease();
    long long v24 = v35;
    sub_256A529A4();
    uint64_t v25 = sub_256A6E4C0();
    *uint64_t v26 = v24;
    sub_256A7A72C(v25, (uint64_t)v26);
    swift_bridgeObjectRelease();
    goto LABEL_37;
  }
  if ((sub_256A7B7EC() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  uint64_t v4 = *(void *)(v0 + 16);
  if (!v4) {
    goto LABEL_34;
  }
  uint64_t v38 = v2;
  uint64_t v5 = v0 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_256A77F94(v5, (uint64_t)&v35);
    sub_256A39D70(&v35, v36);
    sub_256A7A6B0();
    if (v6() == (void)v27 && v7 == *((void *)&v27 + 1)) {
      break;
    }
    char v9 = sub_256A7A6E8();
    swift_bridgeObjectRelease();
    if (v9) {
      goto LABEL_21;
    }
    sub_256A39DB4((uint64_t)&v35);
    v5 += 40;
    if (!--v4)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      goto LABEL_35;
    }
  }
  swift_bridgeObjectRelease();
LABEL_21:
  long long v14 = v38;
  swift_bridgeObjectRelease();
  sub_256A3A540(&v35, (uint64_t)&v37);
  sub_256A39D2C(&qword_26B2B54E8);
  if ((sub_256A7A8DC() & 1) == 0)
  {
LABEL_34:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_35:
    sub_256A7B32C();
    sub_256B3FB70();
    swift_bridgeObjectRelease();
    *(void *)&long long v35 = 0xD00000000000002FLL;
    *((void *)&v35 + 1) = 0x8000000256B48800;
    sub_256A7AE80();
    goto LABEL_36;
  }
  swift_bridgeObjectRelease();
  v38[5] = &type metadata for AssetBackedDiffusionModelBase;
  v38[6] = sub_256A77E40();
  uint64_t v15 = sub_256A6E40C();
  v38[2] = v15;
  sub_256A7A8C4(&v35, (void *)(v15 + 16));
  sub_256A7B01C(&v27);
  swift_bridgeObjectRelease();
  if (v28)
  {
    if (swift_dynamicCast())
    {
      uint64_t v16 = *((void *)&v32 + 1);
      uint64_t v17 = *(void *)(v0 + 16);
      if (v17)
      {
        uint64_t v18 = v32;
        swift_bridgeObjectRetain();
        uint64_t v19 = v0 + 32;
        while (1)
        {
          sub_256A77F94(v19, (uint64_t)&v27);
          sub_256A39D70(&v27, v28);
          sub_256A7A6B0();
          if (v20() == v18 && v21 == v16) {
            break;
          }
          char v23 = sub_256A7B52C();
          swift_bridgeObjectRelease();
          if (v23) {
            goto LABEL_42;
          }
          sub_256A39DB4((uint64_t)&v27);
          v19 += 40;
          if (!--v17)
          {
            swift_bridgeObjectRelease();
            long long v14 = v38;
            goto LABEL_33;
          }
        }
        swift_bridgeObjectRelease();
LABEL_42:
        swift_bridgeObjectRelease();
        sub_256A3A540(&v27, (uint64_t)&v29);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        long long v14 = v38;
      }
      else
      {
LABEL_33:
        uint64_t v31 = 0;
        long long v29 = 0u;
        long long v30 = 0u;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (*((void *)&v30 + 1))
      {
        if (sub_256A7A8DC())
        {
          *((void *)&v33 + 1) = &type metadata for AssetBackedDiffusionAdapterBase;
          unint64_t v34 = sub_256A77E90();
          *(void *)&long long v32 = sub_256A6E40C();
          sub_256A7A8C4(&v27, (void *)(v32 + 16));
LABEL_48:
          sub_256A7A104((uint64_t)&v32, (uint64_t)(v14 + 7), &qword_269F79768);
          goto LABEL_37;
        }
      }
      else
      {
        sub_256A498E4((uint64_t)&v29, &qword_26B2B5520);
      }
      long long v32 = 0u;
      long long v33 = 0u;
      unint64_t v34 = 0;
      goto LABEL_48;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_256A498E4((uint64_t)&v27, &qword_269F78B20);
  }
  sub_256A7B67C();
LABEL_37:
  sub_256A4A890();
}

uint64_t AssetBackedDiffusionBundle.resources.getter()
{
  AssetBackedDiffusionBundle.assetBackedResources.getter();
  uint64_t v1 = sub_256A70480(v0);
  swift_bridgeObjectRelease();
  return v1;
}

void AssetBackedDiffusionBundle.assetBackedResources.getter()
{
  sub_256A4A6AC();
  uint64_t v1 = v0[6];
  uint64_t v2 = sub_256A39D70(v0 + 2, v0[5]);
  sub_256A7AD2C();
  sub_256A7A5C0();
  uint64_t v4 = *(void (**)(void))(v3 + 16);
  sub_256A7A704();
  v4();
  sub_256A7B40C();
  sub_256A7AD1C(v5);
  if (v6)
  {
    sub_256A7B3D4();
    uint64_t v27 = v21;
  }
  sub_256A7A9A8();
  MEMORY[0x270FA5388](v7);
  char v9 = sub_256A7A6BC(v8, v24);
  ((void (*)(char *))v4)(v9);
  sub_256A7B228((uint64_t)v2, v10, &v27);
  sub_256A39DB4((uint64_t)v26);
  uint64_t v11 = v27;
  sub_256A7A32C((uint64_t)(v0 + 7), (uint64_t)v25, &qword_269F79768);
  if (v25[3])
  {
    sub_256A7B0C8();
    v25[4] = *(void *)(v1 + 8);
    sub_256A49D7C(v25);
    sub_256A7A5C0();
    uint64_t v13 = *(void (**)(void))(v12 + 16);
    sub_256A7A824();
    v13();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_256A7B33C();
      sub_256B07A44();
      uint64_t v11 = v22;
      uint64_t v27 = v22;
    }
    unint64_t v14 = *(void *)(v11 + 24);
    if (*(void *)(v11 + 16) >= v14 >> 1)
    {
      sub_256A7B1C0(v14);
      sub_256B07A44();
      uint64_t v27 = v23;
    }
    sub_256A7A9A8();
    MEMORY[0x270FA5388](v15);
    sub_256A7A824();
    v13();
    uint64_t v16 = sub_256A7B29C();
    sub_256B0D69C(v16, v17, v18, v19, v20);
    sub_256A39DB4((uint64_t)v25);
    sub_256A39DB4((uint64_t)v26);
  }
  else
  {
    sub_256A498E4((uint64_t)v25, &qword_269F79768);
  }
  sub_256A4A554();
}

uint64_t sub_256A758F0(uint64_t a1)
{
  unint64_t v2 = sub_256A77EE0();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A7592C(uint64_t a1)
{
  unint64_t v2 = sub_256A77EE0();

  return MEMORY[0x270FA00B8](a1, v2);
}

void AssetBackedDiffusionBundle.init(from:)()
{
  sub_256A4A878();
  unint64_t v2 = v1;
  uint64_t v4 = v3;
  sub_256A39D2C(&qword_269F79858);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v5);
  sub_256A7B704(v2);
  sub_256A77EE0();
  sub_256A7B260();
  if (v0)
  {
    sub_256A39DB4((uint64_t)v2);
  }
  else
  {
    sub_256A39D2C(&qword_269F79868);
    v10[0] = 0;
    sub_256A78B08(&qword_269F79870, &qword_269F79868);
    sub_256A7ABE4();
    sub_256A7B650();
    uint64_t v12 = &type metadata for AssetBackedDiffusionModelBase;
    unint64_t v13 = sub_256A77E40();
    *(void *)&long long v11 = sub_256A6E40C();
    sub_256A61664();
    sub_256A7AB54();
    sub_256A3A540(&v11, (uint64_t)&v18);
    sub_256A7B50C();
    sub_256A60F34();
    sub_256A7AD84();
    sub_256A7A104((uint64_t)&v11, (uint64_t)v9, &qword_269F79878);
    sub_256A7A104((uint64_t)v9, (uint64_t)v10, &qword_269F79878);
    if (sub_256A779F8((uint64_t)v10) == 1)
    {
      sub_256A6E550();
      v6();
      unint64_t v16 = 0;
      long long v14 = 0u;
      long long v15 = 0u;
    }
    else
    {
      *((void *)&v15 + 1) = &type metadata for AssetBackedDiffusionAdapterBase;
      unint64_t v16 = sub_256A77E90();
      *(void *)&long long v14 = sub_256A6E40C();
      sub_256A7A8C4(v10, (void *)(v14 + 16));
      uint64_t v7 = sub_256A7A850();
      v8(v7);
    }
    sub_256A7A104((uint64_t)&v14, (uint64_t)&v19, &qword_269F79768);
    sub_256A77F2C((uint64_t)v17, v4);
    sub_256A39DB4((uint64_t)v2);
    sub_256A77F64((uint64_t)v17);
  }
  sub_256A7AC14();
  sub_256A4A890();
}

void AssetBackedDiffusionBundle.encode(to:)()
{
  sub_256A4A878();
  sub_256A7AEF4();
  sub_256A39D2C(&qword_269F79880);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v2);
  sub_256A7A800();
  sub_256A77EE0();
  sub_256A7A830();
  sub_256A7B6DC();
  sub_256A39D2C(&qword_269F79868);
  sub_256A78B08(&qword_269F79888, &qword_269F79868);
  sub_256A7A990();
  if (!v0)
  {
    sub_256A7B004();
    sub_256A39D2C(&qword_269F79890);
    if (sub_256A7B118())
    {
      sub_256A7B564(v17);
      sub_256A7B564(&v16);
      sub_256A7B594();
      sub_256A616B0();
      sub_256A7A898();
      sub_256A6DFC8((uint64_t)v17);
      sub_256A7A32C(v1 + 56, (uint64_t)v14, &qword_269F79768);
      if (!v14[3])
      {
        sub_256A498E4((uint64_t)v14, &qword_269F79768);
        sub_256A77A78(v13);
        uint64_t v8 = v13;
        goto LABEL_12;
      }
      sub_256A39D2C(&qword_269F79898);
      if (swift_dynamicCast())
      {
        memcpy(v12, v13, sizeof(v12));
        nullsub_1(v12);
        uint64_t v8 = v12;
LABEL_12:
        sub_256A7A104((uint64_t)v8, (uint64_t)v15, &qword_269F79878);
        sub_256A7A104((uint64_t)v15, (uint64_t)v13, &qword_269F79878);
        LOBYTE(v12[0]) = 2;
        sub_256A60F80();
        sub_256A7A9D4();
        uint64_t v9 = sub_256A7A608();
        v10(v9);
        sub_256A77A80(v15);
        goto LABEL_7;
      }
      sub_256A529A4();
      sub_256A6E4C0();
      sub_256A7AA48(v11, (uint64_t)"DiffusionBundle adapter is wrong type");
    }
    else
    {
      sub_256A529A4();
      sub_256A6E4C0();
      sub_256A7AD4C(v3, 0xD000000000000027);
    }
    sub_256A7AFD4(v4, v5);
  }
  uint64_t v6 = sub_256A7A864();
  v7(v6);
LABEL_7:
  sub_256A7AC14();
  sub_256A4A890();
}

#error "256A75F34: call analysis failed (funcsize=98)"

void AssetBackedDiffusionBundle.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_256A7AA88();
  a23 = v25;
  a24 = v26;
  sub_256A7AA0C();
  sub_256A7A9B8();
  swift_bridgeObjectRelease();
  AssetBackedDiffusionBundle.assetBackedResources.getter();
  sub_256A70480(v27);
  uint64_t v28 = sub_256A7AF4C();
  if (*(void *)(v24 + 16))
  {
    do
    {
      sub_256A7AF34(v28);
      uint64_t v29 = sub_256A7A65C(&a10);
      v30(v29);
      sub_256A7A7C0();
      swift_bridgeObjectRelease();
      uint64_t v28 = sub_256A7AC20((uint64_t)&a10);
    }
    while (!v31);
    swift_bridgeObjectRelease();
    sub_256A7A714();
  }
  else
  {
    sub_256A7A714();
    swift_bridgeObjectRelease();
  }
}

uint64_t AssetBackedDiffusionBundle.hashValue.getter()
{
  return sub_256A77588((void (*)(unsigned char *))AssetBackedDiffusionBundle.hash(into:));
}

void sub_256A7613C()
{
}

void sub_256A76154()
{
}

uint64_t sub_256A76180(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A7761C(a1, a2, a3, (void (*)(unsigned char *))AssetBackedDiffusionBundle.hash(into:));
}

uint64_t DiffusionBundle.rawID.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DiffusionBundle.baseModel.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_256A77F94(v1 + 16, a1);
}

uint64_t DiffusionBundle.adapter.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_256A7A32C(v1 + 56, a1, &qword_269F798A0);
}

uint64_t DiffusionBundle.init(id:baseModel:adapter:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return sub_256A76238(a1, a2, a3, (void (*)(uint64_t, void *))sub_256A3A540, &qword_269F798A0, a4);
}

uint64_t sub_256A76238@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t, void *)@<X3>, uint64_t *a5@<X4>, void *a6@<X8>)
{
  uint64_t v9 = a1[1];
  *a6 = *a1;
  a6[1] = v9;
  a4(a2, a6 + 2);
  return sub_256A7A104(a3, (uint64_t)(a6 + 7), a5);
}

void DiffusionBundle.init(with:resources:)()
{
  sub_256A4A878();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  sub_256A7AC98(&v54);
  if (!v55)
  {
    swift_bridgeObjectRelease();
    sub_256A498E4((uint64_t)&v54, &qword_269F78B20);
LABEL_16:
    sub_256A7AAA0();
    sub_256B3FB70();
    swift_bridgeObjectRelease();
    sub_256A7AF28();
    *(void *)&long long v54 = v19;
    *((void *)&v54 + 1) = 0x8000000256B48590;
    sub_256B3F5F0();
    sub_256B3F760();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v20 = v54;
    sub_256A529A4();
    uint64_t v21 = sub_256A6E4C0();
    *uint64_t v22 = v20;
    sub_256A7A72C(v21, (uint64_t)v22);
    goto LABEL_38;
  }
  if ((sub_256A7B464() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  uint64_t v4 = *((void *)&v46 + 1);
  *uint64_t v3 = v46;
  v3[1] = v4;
  sub_256A7AE28(&v54);
  if (!v55)
  {
    swift_bridgeObjectRelease();
    sub_256A498E4((uint64_t)&v54, &qword_269F78B20);
LABEL_19:
    sub_256A7AAA0();
    sub_256B3FB70();
    sub_256B3F760();
    sub_256B3F5F0();
    sub_256B3F760();
    swift_bridgeObjectRelease();
LABEL_37:
    swift_bridgeObjectRelease();
    long long v40 = v54;
    sub_256A529A4();
    uint64_t v41 = sub_256A6E4C0();
    *uint64_t v42 = v40;
    sub_256A7A72C(v41, (uint64_t)v42);
    swift_bridgeObjectRelease();
    goto LABEL_38;
  }
  if ((sub_256A7B464() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  uint64_t v5 = *(void *)(v1 + 16);
  if (!v5) {
    goto LABEL_35;
  }
  uint64_t v6 = v1 + 32;
  uint64_t v45 = v1;
  swift_bridgeObjectRetain();
  uint64_t v44 = v1 + 32;
  while (1)
  {
    sub_256A77F94(v6, (uint64_t)&v54);
    uint64_t v7 = v56;
    sub_256A39D70(&v54, v55);
    sub_256A7A6B0();
    if (v8() == (void)v46 && v9 == *((void *)&v46 + 1))
    {
      sub_256A7AAB0();
      goto LABEL_22;
    }
    sub_256A7A6E8();
    uint64_t v11 = sub_256A7AFEC();
    if (v7) {
      break;
    }
    sub_256A39DB4((uint64_t)&v54);
    v6 += 40;
    if (!--v5)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      goto LABEL_36;
    }
  }
  sub_256A7AFC8(v11, v12, v13, v14, v15, v16, v17, v18, v43, v44, v45);
LABEL_22:
  swift_bridgeObjectRelease();
  sub_256A3A540(&v54, (uint64_t)&v57);
  sub_256A39D2C(&qword_26B2B5D80);
  if ((sub_256A7A8DC() & 1) == 0)
  {
LABEL_35:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_36:
    sub_256A7AAA0();
    sub_256B3FB70();
    swift_bridgeObjectRelease();
    *(void *)&long long v54 = 0xD00000000000002FLL;
    *((void *)&v54 + 1) = 0x8000000256B48800;
    sub_256A7AE80();
    goto LABEL_37;
  }
  swift_bridgeObjectRelease();
  v3[5] = &type metadata for DiffusionModelBase;
  v3[6] = sub_256A77FEC();
  uint64_t v23 = sub_256A6E40C();
  v3[2] = v23;
  sub_256A7A8C4(&v54, (void *)(v23 + 16));
  sub_256A7B01C(&v46);
  swift_bridgeObjectRelease();
  if (v47)
  {
    if (sub_256A7B390())
    {
      uint64_t v24 = *((void *)&v51 + 1);
      uint64_t v25 = *(void *)(v7 + 16);
      if (v25)
      {
        uint64_t v26 = v51;
        swift_bridgeObjectRetain();
        uint64_t v27 = v44;
        while (1)
        {
          sub_256A77F94(v27, (uint64_t)&v46);
          char v28 = v47;
          sub_256A39D70(&v46, v47);
          sub_256A7A6B0();
          if (v29() == v26 && v30 == v24)
          {
            sub_256A7AAB0();
            goto LABEL_44;
          }
          sub_256A7B52C();
          uint64_t v32 = sub_256A7AFEC();
          if (v28) {
            break;
          }
          sub_256A39DB4((uint64_t)&v46);
          v27 += 40;
          if (!--v25)
          {
            sub_256A7AAB0();
            goto LABEL_34;
          }
        }
        sub_256A7AFC8(v32, v33, v34, v35, v36, v37, v38, v39, v43, v44, v45);
LABEL_44:
        swift_bridgeObjectRelease();
        sub_256A3A540(&v46, (uint64_t)&v48);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_34:
        uint64_t v50 = 0;
        long long v48 = 0u;
        long long v49 = 0u;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (*((void *)&v49 + 1))
      {
        if (sub_256A7A8DC())
        {
          *((void *)&v52 + 1) = &type metadata for DiffusionAdapterBase;
          unint64_t v53 = sub_256A7803C();
          *(void *)&long long v51 = sub_256A6E40C();
          sub_256A7A8C4(&v46, (void *)(v51 + 16));
LABEL_50:
          sub_256A7A104((uint64_t)&v51, (uint64_t)(v3 + 7), &qword_269F798A0);
          goto LABEL_38;
        }
      }
      else
      {
        sub_256A498E4((uint64_t)&v48, (uint64_t *)&unk_26B2B5D90);
      }
      long long v51 = 0u;
      long long v52 = 0u;
      unint64_t v53 = 0;
      goto LABEL_50;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_256A498E4((uint64_t)&v46, &qword_269F78B20);
  }
  sub_256A7B67C();
LABEL_38:
  sub_256A4A890();
}

unint64_t sub_256A767F4()
{
  unint64_t result = qword_269F79770;
  if (!qword_269F79770)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79770);
  }
  return result;
}

uint64_t sub_256A76850()
{
  swift_bridgeObjectRelease();
  sub_256A39DB4(v0 + 32);
  if (*(void *)(v0 + 96)) {
    sub_256A39DB4(v0 + 72);
  }

  return MEMORY[0x270FA0238](v0, 112, 7);
}

unint64_t sub_256A768A4()
{
  unint64_t result = qword_269F79778;
  if (!qword_269F79778)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79778);
  }
  return result;
}

uint64_t sub_256A768F4()
{
  swift_bridgeObjectRelease();
  sub_256A39DB4(v0 + 32);

  return MEMORY[0x270FA0238](v0, 72, 7);
}

void DiffusionBundle.resources.getter()
{
  sub_256A4A6AC();
  sub_256A7AC3C();
  sub_256A7A5C0();
  uint64_t v3 = *(void (**)(void))(v2 + 16);
  sub_256A7A704();
  v3();
  sub_256A7B3F0();
  sub_256A7AD1C(v4);
  if (v5)
  {
    sub_256A7B3B8();
    uint64_t v20 = v14;
  }
  sub_256A7A9A8();
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = sub_256A7A6BC(v7, v17);
  ((void (*)(char *))v3)(v8);
  sub_256A7B244();
  sub_256A39DB4((uint64_t)v19);
  uint64_t v9 = v20;
  sub_256A7A32C(v0 + 56, (uint64_t)v18, &qword_269F798A0);
  if (v18[3])
  {
    sub_256A7B0C8();
    v18[4] = *(void *)(*(void *)(v1 + 8) + 8);
    sub_256A49D7C(v18);
    sub_256A7A5C0();
    uint64_t v11 = *(void (**)(void))(v10 + 16);
    sub_256A7A824();
    v11();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_256A7B33C();
      sub_256B07A30();
      uint64_t v9 = v15;
      uint64_t v20 = v15;
    }
    unint64_t v12 = *(void *)(v9 + 24);
    if (*(void *)(v9 + 16) >= v12 >> 1)
    {
      sub_256A7B1C0(v12);
      sub_256B07A30();
      uint64_t v20 = v16;
    }
    sub_256A7A9A8();
    MEMORY[0x270FA5388](v13);
    sub_256A7A824();
    v11();
    sub_256A7B29C();
    sub_256A47FB0();
    sub_256A39DB4((uint64_t)v18);
    sub_256A39DB4((uint64_t)v19);
  }
  else
  {
    sub_256A498E4((uint64_t)v18, &qword_269F798A0);
  }
  sub_256A4A554();
}

BOOL sub_256A76AFC(char a1, char a2)
{
  return a1 == a2;
}

uint64_t sub_256A76B0C()
{
  return sub_256B3FF50();
}

uint64_t sub_256A76B34(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (sub_256A7A7E4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x65646F4D65736162 && a2 == 0xE90000000000006CLL;
    if (v6 || (sub_256A7A7E4() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      sub_256A7B148();
      if (v2 && a2 == 0xE700000000000000)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        sub_256A7A7E4();
        sub_256A4AC50();
        if (a1) {
          return 2;
        }
        else {
          return 3;
        }
      }
    }
  }
}

uint64_t sub_256A76C3C()
{
  return 3;
}

uint64_t sub_256A76C44()
{
  return sub_256B3FF70();
}

uint64_t sub_256A76C84(char a1)
{
  if (!a1) {
    return 25705;
  }
  if (a1 == 1) {
    return 0x65646F4D65736162;
  }
  return 0x72657470616461;
}

BOOL sub_256A76CD4(char *a1, char *a2)
{
  return sub_256A76AFC(*a1, *a2);
}

uint64_t sub_256A76CE0()
{
  return sub_256A76C44();
}

uint64_t sub_256A76CFC()
{
  return sub_256A76B0C();
}

uint64_t sub_256A76D04()
{
  return sub_256A76C84(*v0);
}

uint64_t sub_256A76D0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_256A76B34(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_256A76D34@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_256A76C3C();
  *a1 = result;
  return result;
}

uint64_t sub_256A76D5C(uint64_t a1)
{
  unint64_t v2 = sub_256A7808C();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A76D98(uint64_t a1)
{
  unint64_t v2 = sub_256A7808C();

  return MEMORY[0x270FA00B8](a1, v2);
}

void DiffusionBundle.init(from:)()
{
  sub_256A4A878();
  unint64_t v2 = v1;
  uint64_t v4 = v3;
  sub_256A39D2C(&qword_269F798B0);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v5);
  sub_256A7B704(v2);
  sub_256A7808C();
  sub_256A7B260();
  if (v0)
  {
    sub_256A39DB4((uint64_t)v2);
  }
  else
  {
    sub_256A39D2C(&qword_269F798C0);
    v10[0] = 0;
    sub_256A78B08(&qword_269F798C8, &qword_269F798C0);
    sub_256A7ABE4();
    sub_256A7B650();
    unint64_t v12 = &type metadata for DiffusionModelBase;
    unint64_t v13 = sub_256A77FEC();
    *(void *)&long long v11 = sub_256A6E40C();
    sub_256A61290();
    sub_256A7AB54();
    sub_256A3A540(&v11, (uint64_t)&v18);
    sub_256A7B50C();
    sub_256A60B54();
    sub_256A7AD84();
    sub_256A7A104((uint64_t)&v11, (uint64_t)v9, &qword_269F798D0);
    sub_256A7A104((uint64_t)v9, (uint64_t)v10, &qword_269F798D0);
    if (sub_256A779F8((uint64_t)v10) == 1)
    {
      sub_256A6E550();
      v6();
      unint64_t v16 = 0;
      long long v14 = 0u;
      long long v15 = 0u;
    }
    else
    {
      *((void *)&v15 + 1) = &type metadata for DiffusionAdapterBase;
      unint64_t v16 = sub_256A7803C();
      *(void *)&long long v14 = sub_256A6E40C();
      sub_256A7A8C4(v10, (void *)(v14 + 16));
      uint64_t v7 = sub_256A7A850();
      v8(v7);
    }
    sub_256A7A104((uint64_t)&v14, (uint64_t)&v19, &qword_269F798A0);
    sub_256A780D8((uint64_t)v17, v4);
    sub_256A39DB4((uint64_t)v2);
    sub_256A78110((uint64_t)v17);
  }
  sub_256A7AC14();
  sub_256A4A890();
}

void DiffusionBundle.encode(to:)()
{
  sub_256A4A878();
  sub_256A7AEF4();
  sub_256A39D2C(&qword_269F798D8);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v2);
  sub_256A7A800();
  sub_256A7808C();
  sub_256A7A830();
  sub_256A7B6DC();
  sub_256A39D2C(&qword_269F798C0);
  sub_256A78B08(&qword_269F798E0, &qword_269F798C0);
  sub_256A7A990();
  if (!v0)
  {
    sub_256A7B004();
    sub_256A39D2C(&qword_269F798E8);
    if (sub_256A7B118())
    {
      sub_256A7B564(v17);
      sub_256A7B564(&v16);
      sub_256A7B594();
      sub_256A612DC();
      sub_256A7A898();
      sub_256A6DFC8((uint64_t)v17);
      sub_256A7A32C(v1 + 56, (uint64_t)v14, &qword_269F798A0);
      if (!v14[3])
      {
        sub_256A498E4((uint64_t)v14, &qword_269F798A0);
        sub_256A77A78(v13);
        uint64_t v8 = v13;
        goto LABEL_12;
      }
      sub_256A39D2C(&qword_269F798F0);
      if (swift_dynamicCast())
      {
        memcpy(v12, v13, sizeof(v12));
        nullsub_1(v12);
        uint64_t v8 = v12;
LABEL_12:
        sub_256A7A104((uint64_t)v8, (uint64_t)v15, &qword_269F798D0);
        sub_256A7A104((uint64_t)v15, (uint64_t)v13, &qword_269F798D0);
        LOBYTE(v12[0]) = 2;
        sub_256A60BA0();
        sub_256A7A9D4();
        uint64_t v9 = sub_256A7A608();
        v10(v9);
        sub_256A77A80(v15);
        goto LABEL_7;
      }
      sub_256A529A4();
      sub_256A6E4C0();
      sub_256A7AA48(v11, (uint64_t)"DiffusionBundle adapter is wrong type");
    }
    else
    {
      sub_256A529A4();
      sub_256A6E4C0();
      sub_256A7AD4C(v3, 0xD000000000000027);
    }
    sub_256A7AFD4(v4, v5);
  }
  uint64_t v6 = sub_256A7A864();
  v7(v6);
LABEL_7:
  sub_256A7AC14();
  sub_256A4A890();
}

#error "256A77390: call analysis failed (funcsize=92)"

void DiffusionBundle.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_256A7AA88();
  a23 = v24;
  a24 = v25;
  sub_256A7AA0C();
  sub_256A7A9B8();
  swift_bridgeObjectRelease();
  DiffusionBundle.resources.getter();
  if (*(void *)(v26 + 16))
  {
    do
    {
      sub_256A7AF34(v26);
      uint64_t v27 = sub_256A7A65C(&a10);
      v28(v27);
      sub_256A7A7C0();
      swift_bridgeObjectRelease();
      uint64_t v26 = sub_256A7AC20((uint64_t)&a10);
    }
    while (!v29);
    swift_bridgeObjectRelease();
    sub_256A7A714();
  }
  else
  {
    sub_256A7A714();
    swift_bridgeObjectRelease();
  }
}

uint64_t DiffusionBundle.hashValue.getter()
{
  return sub_256A77588((void (*)(unsigned char *))DiffusionBundle.hash(into:));
}

uint64_t sub_256A77588(void (*a1)(unsigned char *))
{
  sub_256A7B200();
  a1(v3);
  return sub_256B3FF70();
}

void sub_256A775C8()
{
}

void sub_256A775E0()
{
}

uint64_t sub_256A77604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A7761C(a1, a2, a3, (void (*)(unsigned char *))DiffusionBundle.hash(into:));
}

uint64_t sub_256A7761C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *))
{
  sub_256B3FF40();
  a4(v6);
  return sub_256B3FF70();
}

unint64_t sub_256A77664()
{
  unint64_t result = qword_269F79780;
  if (!qword_269F79780)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79780);
  }
  return result;
}

unint64_t sub_256A776B4()
{
  unint64_t result = qword_269F79790;
  if (!qword_269F79790)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79790);
  }
  return result;
}

uint64_t sub_256A77700(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_256A77738(uint64_t a1)
{
  return a1;
}

unint64_t sub_256A77768()
{
  unint64_t result = qword_26B2B4FE8;
  if (!qword_26B2B4FE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B4FE8);
  }
  return result;
}

unint64_t sub_256A777B8()
{
  unint64_t result = qword_269F797C8;
  if (!qword_269F797C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F797C8);
  }
  return result;
}

uint64_t sub_256A77804(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_256A7783C(uint64_t a1)
{
  return a1;
}

unint64_t sub_256A7786C()
{
  unint64_t result = qword_26B2B5028;
  if (!qword_26B2B5028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5028);
  }
  return result;
}

unint64_t sub_256A778BC()
{
  unint64_t result = qword_26B2B5010;
  if (!qword_26B2B5010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5010);
  }
  return result;
}

unint64_t sub_256A7790C()
{
  unint64_t result = qword_26B2B54D0;
  if (!qword_26B2B54D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B54D0);
  }
  return result;
}

unint64_t sub_256A7795C()
{
  unint64_t result = qword_26B2B5640;
  if (!qword_26B2B5640)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5640);
  }
  return result;
}

unint64_t sub_256A779AC()
{
  unint64_t result = qword_269F79800;
  if (!qword_269F79800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79800);
  }
  return result;
}

uint64_t sub_256A779F8(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t sub_256A77A10(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_256A77A48(uint64_t a1)
{
  return a1;
}

void sub_256A77A78(void *a1)
{
}

uint64_t sub_256A77A80(__n128 *a1)
{
  sub_256A7AAFC(a1);
  sub_256A7B820();
  sub_256A78140(v2, v3, v4, v5, v6, v7, v8, v9, v11, v12, v13, v14, v15);
  return v1;
}

unint64_t sub_256A77AC0()
{
  unint64_t result = qword_26B2B5D10;
  if (!qword_26B2B5D10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5D10);
  }
  return result;
}

unint64_t sub_256A77B10()
{
  unint64_t result = qword_26B2B5CC0;
  if (!qword_26B2B5CC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5CC0);
  }
  return result;
}

unint64_t sub_256A77B60()
{
  unint64_t result = qword_26B2B6000;
  if (!qword_26B2B6000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B6000);
  }
  return result;
}

unint64_t sub_256A77BB0()
{
  unint64_t result = qword_26B2B6678;
  if (!qword_26B2B6678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B6678);
  }
  return result;
}

unint64_t sub_256A77C00()
{
  unint64_t result = qword_26B2B5C18;
  if (!qword_26B2B5C18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5C18);
  }
  return result;
}

uint64_t sub_256A77C4C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_256A77C84(uint64_t a1)
{
  return a1;
}

void sub_256A77CB4(void *a1)
{
}

uint64_t sub_256A77CBC(__n128 *a1)
{
  sub_256A7AAFC(a1);
  sub_256A7B820();
  sub_256A77D04(v2, v3, v4, v5, v6, v7, v8, v9, v11, v12, v13, v14, v15);
  return v1;
}

uint64_t sub_256A77D04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_256A54744(a12, a13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_256A77E40()
{
  unint64_t result = qword_26B2B4FD0;
  if (!qword_26B2B4FD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B4FD0);
  }
  return result;
}

unint64_t sub_256A77E90()
{
  unint64_t result = qword_26B2B5070;
  if (!qword_26B2B5070)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5070);
  }
  return result;
}

unint64_t sub_256A77EE0()
{
  unint64_t result = qword_269F79860;
  if (!qword_269F79860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79860);
  }
  return result;
}

uint64_t sub_256A77F2C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_256A77F64(uint64_t a1)
{
  return a1;
}

uint64_t sub_256A77F94(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  sub_256A7A950();
  sub_256A7B670();
  v3();
  return a2;
}

unint64_t sub_256A77FEC()
{
  unint64_t result = qword_26B2B2FD8;
  if (!qword_26B2B2FD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B2FD8);
  }
  return result;
}

unint64_t sub_256A7803C()
{
  unint64_t result = qword_269F798A8;
  if (!qword_269F798A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F798A8);
  }
  return result;
}

unint64_t sub_256A7808C()
{
  unint64_t result = qword_269F798B8;
  if (!qword_269F798B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F798B8);
  }
  return result;
}

uint64_t sub_256A780D8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_256A78110(uint64_t a1)
{
  return a1;
}

uint64_t sub_256A78140(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_256A54744(a12, a13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_256A7824C(uint64_t a1)
{
  unint64_t result = sub_256A768A4();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_256A78274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A789F8(a1, a2, a3, (uint64_t (*)(void))sub_256A782A0, (uint64_t (*)(void))sub_256A782EC);
}

unint64_t sub_256A782A0()
{
  unint64_t result = qword_269F798F8;
  if (!qword_269F798F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F798F8);
  }
  return result;
}

unint64_t sub_256A782EC()
{
  unint64_t result = qword_269F79900;
  if (!qword_269F79900)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79900);
  }
  return result;
}

uint64_t sub_256A78338()
{
  return sub_256A78B08(&qword_269F79908, &qword_269F79798);
}

unint64_t sub_256A78378()
{
  unint64_t result = qword_269F79910;
  if (!qword_269F79910)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79910);
  }
  return result;
}

unint64_t sub_256A783C4(uint64_t a1)
{
  unint64_t result = sub_256A5243C();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_256A783EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A789F8(a1, a2, a3, (uint64_t (*)(void))sub_256A78418, (uint64_t (*)(void))sub_256A78464);
}

unint64_t sub_256A78418()
{
  unint64_t result = qword_26B2B3008;
  if (!qword_26B2B3008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B3008);
  }
  return result;
}

unint64_t sub_256A78464()
{
  unint64_t result = qword_26B2B3018;
  if (!qword_26B2B3018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B3018);
  }
  return result;
}

uint64_t sub_256A784B0()
{
  return sub_256A78B08(&qword_269F79918, &qword_269F797D0);
}

unint64_t sub_256A784F0()
{
  unint64_t result = qword_26B2B3010;
  if (!qword_26B2B3010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B3010);
  }
  return result;
}

unint64_t sub_256A7853C(uint64_t a1)
{
  unint64_t result = sub_256A52298();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_256A78564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A789F8(a1, a2, a3, (uint64_t (*)(void))sub_256A78590, (uint64_t (*)(void))sub_256A785DC);
}

unint64_t sub_256A78590()
{
  unint64_t result = qword_26B2B55D8;
  if (!qword_26B2B55D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B55D8);
  }
  return result;
}

unint64_t sub_256A785DC()
{
  unint64_t result = qword_26B2B55E8;
  if (!qword_26B2B55E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B55E8);
  }
  return result;
}

uint64_t sub_256A78628()
{
  return sub_256A78B08(&qword_269F79920, &qword_269F79808);
}

unint64_t sub_256A78668()
{
  unint64_t result = qword_26B2B55E0;
  if (!qword_26B2B55E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B55E0);
  }
  return result;
}

unint64_t sub_256A786B4(uint64_t a1)
{
  unint64_t result = sub_256A52384();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_256A786DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A789F8(a1, a2, a3, (uint64_t (*)(void))sub_256A78708, (uint64_t (*)(void))sub_256A78754);
}

unint64_t sub_256A78708()
{
  unint64_t result = qword_26B2B6598;
  if (!qword_26B2B6598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B6598);
  }
  return result;
}

unint64_t sub_256A78754()
{
  unint64_t result = qword_26B2B65A8;
  if (!qword_26B2B65A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B65A8);
  }
  return result;
}

uint64_t sub_256A787A0()
{
  return sub_256A78B08((unint64_t *)&qword_269F79928, &qword_26B2B5C10);
}

unint64_t sub_256A787E0()
{
  unint64_t result = qword_26B2B65A0;
  if (!qword_26B2B65A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B65A0);
  }
  return result;
}

unint64_t sub_256A7882C(uint64_t a1)
{
  unint64_t result = sub_256A522E8();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_256A78854(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A789F8(a1, a2, a3, (uint64_t (*)(void))sub_256A78880, (uint64_t (*)(void))sub_256A788CC);
}

unint64_t sub_256A78880()
{
  unint64_t result = qword_26B2B3090;
  if (!qword_26B2B3090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B3090);
  }
  return result;
}

unint64_t sub_256A788CC()
{
  unint64_t result = qword_26B2B30A0;
  if (!qword_26B2B30A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B30A0);
  }
  return result;
}

uint64_t sub_256A78918()
{
  return sub_256A78B08(&qword_269F79930, &qword_269F79868);
}

unint64_t sub_256A78958()
{
  unint64_t result = qword_26B2B3098;
  if (!qword_26B2B3098)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B3098);
  }
  return result;
}

unint64_t sub_256A789A4(uint64_t a1)
{
  unint64_t result = sub_256A767F4();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_256A789CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A789F8(a1, a2, a3, (uint64_t (*)(void))sub_256A78A34, (uint64_t (*)(void))sub_256A78A80);
}

uint64_t sub_256A789F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  *(void *)(a1 + 8) = a4();
  uint64_t result = a5();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_256A78A34()
{
  unint64_t result = qword_269F79938;
  if (!qword_269F79938)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79938);
  }
  return result;
}

unint64_t sub_256A78A80()
{
  unint64_t result = qword_269F79940;
  if (!qword_269F79940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79940);
  }
  return result;
}

uint64_t sub_256A78ACC()
{
  return sub_256A78B08(&qword_269F79948, &qword_269F798C0);
}

uint64_t sub_256A78B08(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_256A49664(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_256A78B50()
{
  unint64_t result = qword_269F79950;
  if (!qword_269F79950)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79950);
  }
  return result;
}

uint64_t *sub_256A78BA4(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        unint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *unint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

void type metadata accessor for AssetBackedSanitizerBundle()
{
}

uint64_t destroy for SanitizerBundle(uint64_t a1)
{
  swift_bridgeObjectRelease();

  return sub_256A39DB4(a1 + 16);
}

uint64_t _s12ModelCatalog26AssetBackedSanitizerBundleVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = a2 + 16;
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v5;
  uint64_t v6 = v5;
  sub_256A4A838();
  uint64_t v8 = *v7;
  swift_bridgeObjectRetain();
  v8(a1 + 16, v4, v6);
  return a1;
}

void *_s12ModelCatalog26AssetBackedSanitizerBundleVwca_0(void *a1, void *a2)
{
  a1[1] = sub_256A7B1F0(a1, a2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_256A78BA4(a1 + 2, a2 + 2);
  return a1;
}

uint64_t _s12ModelCatalog26AssetBackedSanitizerBundleVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  sub_256A39DB4(a1 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

uint64_t _s12ModelCatalog26AssetBackedSanitizerBundleVwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return sub_256A6E980(-1);
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56))
  {
    LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
  }
  else
  {
    unint64_t v2 = *(void *)(a1 + 8);
    if (v2 >= 0xFFFFFFFF) {
      LODWORD(v2) = -1;
    }
  }
  return sub_256A6E980(v2);
}

uint64_t sub_256A78F8C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
      return sub_256A7AF1C(result, a2);
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      return sub_256A7AF1C(result, a2);
    }
  }
  return result;
}

void type metadata accessor for SanitizerBundle()
{
}

void *initializeWithTake for AssetBackedLLMBundle(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xB0uLL);
}

void type metadata accessor for AssetBackedLLMBundle()
{
}

uint64_t _s12ModelCatalog20AssetBackedLLMBundleVwxx_0(uint64_t a1)
{
  swift_bridgeObjectRelease();
  sub_256A39DB4(a1 + 16);
  uint64_t result = sub_256A39DB4(a1 + 56);
  if (*(void *)(a1 + 120)) {
    uint64_t result = sub_256A39DB4(a1 + 96);
  }
  if (*(void *)(a1 + 160))
  {
    return sub_256A39DB4(a1 + 136);
  }
  return result;
}

uint64_t _s12ModelCatalog20AssetBackedLLMBundleVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  sub_256A4A838();
  uint64_t v6 = *v5;
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_256A7B4F4();
  v6(v7);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  sub_256A7A5C0();
  (*v8)();
  uint64_t v9 = *(void *)(a2 + 120);
  if (v9)
  {
    uint64_t v10 = *(void *)(a2 + 128);
    *(void *)(a1 + 120) = v9;
    *(void *)(a1 + 128) = v10;
    sub_256A7A950();
    (*v11)();
  }
  else
  {
    sub_256A7AC84(a1 + 96, a2 + 96);
  }
  uint64_t v12 = *(void *)(a2 + 160);
  if (v12)
  {
    uint64_t v13 = *(void *)(a2 + 168);
    *(void *)(a1 + 160) = v12;
    *(void *)(a1 + 168) = v13;
    sub_256A7A950();
    (*v14)();
  }
  else
  {
    sub_256A7AC84(a1 + 136, a2 + 136);
  }
  return a1;
}

uint64_t *_s12ModelCatalog20AssetBackedLLMBundleVwca_0(uint64_t *a1, uint64_t *a2)
{
  a1[1] = sub_256A7B1F0(a1, a2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_256A78BA4(a1 + 2, a2 + 2);
  sub_256A78BA4(a1 + 7, a2 + 7);
  uint64_t v4 = a2[15];
  if (a1[15])
  {
    if (v4)
    {
      sub_256A78BA4(a1 + 12, a2 + 12);
      goto LABEL_8;
    }
    sub_256A39DB4((uint64_t)(a1 + 12));
  }
  else if (v4)
  {
    a1[15] = v4;
    a1[16] = a2[16];
    sub_256A7A950();
    sub_256A7B670();
    v5();
    goto LABEL_8;
  }
  sub_256A7B80C();
LABEL_8:
  uint64_t v6 = a2[20];
  if (!a1[20])
  {
    if (v6)
    {
      a1[20] = v6;
      a1[21] = a2[21];
      sub_256A7A950();
      sub_256A7B670();
      v7();
      return a1;
    }
LABEL_14:
    sub_256A7B80C();
    return a1;
  }
  if (!v6)
  {
    sub_256A39DB4((uint64_t)(a1 + 17));
    goto LABEL_14;
  }
  sub_256A78BA4(a1 + 17, a2 + 17);
  return a1;
}

uint64_t _s12ModelCatalog20AssetBackedLLMBundleVwta_0(void *a1, void *a2)
{
  sub_256A7B184(a1, a2);
  sub_256A39DB4(v2 + 16);
  sub_256A7B7B8();
  sub_256A39DB4(v2 + 56);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(v3 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(v3 + 72);
  *(void *)(v2 + 88) = *(void *)(v3 + 88);
  if (*(void *)(v2 + 120)) {
    sub_256A39DB4(v2 + 96);
  }
  long long v4 = *(_OWORD *)(v3 + 112);
  *(_OWORD *)(v2 + 96) = *(_OWORD *)(v3 + 96);
  *(_OWORD *)(v2 + 112) = v4;
  *(void *)(v2 + 128) = *(void *)(v3 + 128);
  if (*(void *)(v2 + 160)) {
    sub_256A39DB4(v2 + 136);
  }
  long long v5 = *(_OWORD *)(v3 + 152);
  *(_OWORD *)(v2 + 136) = *(_OWORD *)(v3 + 136);
  *(_OWORD *)(v2 + 152) = v5;
  *(void *)(v2 + 168) = *(void *)(v3 + 168);
  return v2;
}

uint64_t _s12ModelCatalog20AssetBackedLLMBundleVwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return sub_256A6E980(-1);
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 176))
  {
    LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
  }
  else
  {
    unint64_t v2 = *(void *)(a1 + 8);
    if (v2 >= 0xFFFFFFFF) {
      LODWORD(v2) = -1;
    }
  }
  return sub_256A6E980(v2);
}

uint64_t sub_256A793C4(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 176) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
      return sub_256A7AF1C(result, a2);
    }
    *(unsigned char *)(result + 176) = 0;
    if (a2) {
      return sub_256A7AF1C(result, a2);
    }
  }
  return result;
}

void type metadata accessor for LLMBundle()
{
}

void *initializeWithTake for AssetBackedDiffusionBundle(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x60uLL);
}

void type metadata accessor for AssetBackedDiffusionBundle()
{
}

uint64_t _s12ModelCatalog26AssetBackedDiffusionBundleVwxx_0(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t result = sub_256A39DB4(a1 + 16);
  if (*(void *)(a1 + 80))
  {
    return sub_256A39DB4(a1 + 56);
  }
  return result;
}

uint64_t _s12ModelCatalog26AssetBackedDiffusionBundleVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  sub_256A4A838();
  uint64_t v6 = *v5;
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_256A7B4F4();
  v6(v7);
  uint64_t v8 = *(void *)(a2 + 80);
  if (v8)
  {
    uint64_t v9 = *(void *)(a2 + 88);
    *(void *)(a1 + 80) = v8;
    *(void *)(a1 + 88) = v9;
    sub_256A7A950();
    (*v10)();
  }
  else
  {
    sub_256A7AC84(a1 + 56, a2 + 56);
  }
  return a1;
}

uint64_t _s12ModelCatalog26AssetBackedDiffusionBundleVwca_0(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = sub_256A7B1F0((void *)a1, (void *)a2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_256A78BA4((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16));
  uint64_t v4 = *(void *)(a2 + 80);
  if (!*(void *)(a1 + 80))
  {
    if (v4)
    {
      *(void *)(a1 + 80) = v4;
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      sub_256A7A950();
      sub_256A7B670();
      v5();
      return a1;
    }
LABEL_7:
    long long v6 = *(_OWORD *)(a2 + 56);
    long long v7 = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(_OWORD *)(a1 + 56) = v6;
    *(_OWORD *)(a1 + 72) = v7;
    return a1;
  }
  if (!v4)
  {
    sub_256A39DB4(a1 + 56);
    goto LABEL_7;
  }
  sub_256A78BA4((uint64_t *)(a1 + 56), (uint64_t *)(a2 + 56));
  return a1;
}

uint64_t _s12ModelCatalog26AssetBackedDiffusionBundleVwta_0(void *a1, void *a2)
{
  sub_256A7B184(a1, a2);
  sub_256A39DB4(v2 + 16);
  sub_256A7B7B8();
  if (*(void *)(v2 + 80)) {
    sub_256A39DB4(v2 + 56);
  }
  long long v4 = *(_OWORD *)(v3 + 72);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(v3 + 56);
  *(_OWORD *)(v2 + 72) = v4;
  *(void *)(v2 + 88) = *(void *)(v3 + 88);
  return v2;
}

uint64_t _s12ModelCatalog26AssetBackedDiffusionBundleVwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return sub_256A6E980(-1);
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 96))
  {
    LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
  }
  else
  {
    unint64_t v2 = *(void *)(a1 + 8);
    if (v2 >= 0xFFFFFFFF) {
      LODWORD(v2) = -1;
    }
  }
  return sub_256A6E980(v2);
}

uint64_t sub_256A796E0(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
      return sub_256A7AF1C(result, a2);
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      return sub_256A7AF1C(result, a2);
    }
  }
  return result;
}

void type metadata accessor for DiffusionBundle()
{
}

ValueMetadata *type metadata accessor for DiffusionBundle.CodingKeys()
{
  return &type metadata for DiffusionBundle.CodingKeys;
}

uint64_t _s12ModelCatalog12PreconditionV16PreconditionTypeOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return sub_256A6E980(-1);
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return sub_256A6E980((*a1 | (v4 << 8)) - 3);
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return sub_256A6E980((*a1 | (v4 << 8)) - 3);
    }
    int v4 = a1[1];
    if (a1[1]) {
      return sub_256A6E980((*a1 | (v4 << 8)) - 3);
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return sub_256A6E980(v8);
}

unsigned char *_s12ModelCatalog15DiffusionBundleV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        uint64_t result = (unsigned char *)sub_256A6EB8C((uint64_t)result, v6);
        break;
      case 2:
        uint64_t result = (unsigned char *)sub_256A6EB74((uint64_t)result, v6);
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x256A79894);
      case 4:
        uint64_t result = (unsigned char *)sub_256A6EB7C((uint64_t)result, v6);
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          uint64_t result = sub_256A6EB84(result, a2 + 2);
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AssetBackedDiffusionBundle.CodingKeys()
{
  return &type metadata for AssetBackedDiffusionBundle.CodingKeys;
}

ValueMetadata *type metadata accessor for LLMBundle.CodingKeys()
{
  return &type metadata for LLMBundle.CodingKeys;
}

uint64_t _s12ModelCatalog9LLMBundleV10CodingKeysOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return sub_256A6E980(-1);
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return sub_256A6E980((*a1 | (v4 << 8)) - 5);
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return sub_256A6E980((*a1 | (v4 << 8)) - 5);
    }
    int v4 = a1[1];
    if (a1[1]) {
      return sub_256A6E980((*a1 | (v4 << 8)) - 5);
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return sub_256A6E980(v8);
}

unsigned char *_s12ModelCatalog9LLMBundleV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        uint64_t result = (unsigned char *)sub_256A6EB8C((uint64_t)result, v6);
        break;
      case 2:
        uint64_t result = (unsigned char *)sub_256A6EB74((uint64_t)result, v6);
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x256A79A24);
      case 4:
        uint64_t result = (unsigned char *)sub_256A6EB7C((uint64_t)result, v6);
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          uint64_t result = sub_256A6EB84(result, a2 + 4);
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AssetBackedLLMBundle.CodingKeys()
{
  return &type metadata for AssetBackedLLMBundle.CodingKeys;
}

ValueMetadata *type metadata accessor for SanitizerBundle.CodingKeys()
{
  return &type metadata for SanitizerBundle.CodingKeys;
}

unsigned char *_s12ModelCatalog15SanitizerBundleV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        uint64_t result = (unsigned char *)sub_256A6EB8C((uint64_t)result, v6);
        break;
      case 2:
        uint64_t result = (unsigned char *)sub_256A6EB74((uint64_t)result, v6);
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x256A79B2CLL);
      case 4:
        uint64_t result = (unsigned char *)sub_256A6EB7C((uint64_t)result, v6);
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          uint64_t result = sub_256A6EB84(result, a2 + 1);
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AssetBackedSanitizerBundle.CodingKeys()
{
  return &type metadata for AssetBackedSanitizerBundle.CodingKeys;
}

unint64_t sub_256A79B68()
{
  unint64_t result = qword_269F79958;
  if (!qword_269F79958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79958);
  }
  return result;
}

unint64_t sub_256A79BB8()
{
  unint64_t result = qword_269F79960;
  if (!qword_269F79960)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79960);
  }
  return result;
}

unint64_t sub_256A79C08()
{
  unint64_t result = qword_269F79968;
  if (!qword_269F79968)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79968);
  }
  return result;
}

unint64_t sub_256A79C58()
{
  unint64_t result = qword_269F79970;
  if (!qword_269F79970)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79970);
  }
  return result;
}

unint64_t sub_256A79CA8()
{
  unint64_t result = qword_269F79978;
  if (!qword_269F79978)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79978);
  }
  return result;
}

unint64_t sub_256A79CF8()
{
  unint64_t result = qword_269F79980;
  if (!qword_269F79980)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79980);
  }
  return result;
}

unint64_t sub_256A79D48()
{
  unint64_t result = qword_269F79988;
  if (!qword_269F79988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79988);
  }
  return result;
}

unint64_t sub_256A79D98()
{
  unint64_t result = qword_269F79990;
  if (!qword_269F79990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79990);
  }
  return result;
}

unint64_t sub_256A79DE8()
{
  unint64_t result = qword_269F79998;
  if (!qword_269F79998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79998);
  }
  return result;
}

unint64_t sub_256A79E38()
{
  unint64_t result = qword_269F799A0;
  if (!qword_269F799A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F799A0);
  }
  return result;
}

unint64_t sub_256A79E88()
{
  unint64_t result = qword_26B2B5C28;
  if (!qword_26B2B5C28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5C28);
  }
  return result;
}

unint64_t sub_256A79ED8()
{
  unint64_t result = qword_26B2B5C20;
  if (!qword_26B2B5C20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5C20);
  }
  return result;
}

unint64_t sub_256A79F28()
{
  unint64_t result = qword_269F799A8;
  if (!qword_269F799A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F799A8);
  }
  return result;
}

unint64_t sub_256A79F78()
{
  unint64_t result = qword_269F799B0;
  if (!qword_269F799B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F799B0);
  }
  return result;
}

unint64_t sub_256A79FC8()
{
  unint64_t result = qword_269F799B8;
  if (!qword_269F799B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F799B8);
  }
  return result;
}

unint64_t sub_256A7A018()
{
  unint64_t result = qword_269F799C0;
  if (!qword_269F799C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F799C0);
  }
  return result;
}

unint64_t sub_256A7A068()
{
  unint64_t result = qword_269F799C8;
  if (!qword_269F799C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F799C8);
  }
  return result;
}

unint64_t sub_256A7A0B8()
{
  unint64_t result = qword_269F799D0;
  if (!qword_269F799D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F799D0);
  }
  return result;
}

uint64_t sub_256A7A104(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_256A39D2C(a3);
  sub_256A4A838();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

unint64_t sub_256A7A164()
{
  unint64_t result = qword_269F799D8;
  if (!qword_269F799D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F799D8);
  }
  return result;
}

unint64_t sub_256A7A1B0()
{
  unint64_t result = qword_269F799E0;
  if (!qword_269F799E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F799E0);
  }
  return result;
}

unint64_t sub_256A7A1FC()
{
  unint64_t result = qword_26B2B5528;
  if (!qword_26B2B5528)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5528);
  }
  return result;
}

unint64_t sub_256A7A248()
{
  unint64_t result = qword_269F799E8;
  if (!qword_269F799E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F799E8);
  }
  return result;
}

unint64_t sub_256A7A294()
{
  unint64_t result = qword_269F799F0;
  if (!qword_269F799F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F799F0);
  }
  return result;
}

unint64_t sub_256A7A2E0()
{
  unint64_t result = qword_269F799F8;
  if (!qword_269F799F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F799F8);
  }
  return result;
}

uint64_t sub_256A7A32C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_256A39D2C(a3);
  sub_256A4A838();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

unint64_t sub_256A7A38C()
{
  unint64_t result = qword_269F79A00;
  if (!qword_269F79A00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79A00);
  }
  return result;
}

unint64_t sub_256A7A3D8()
{
  unint64_t result = qword_269F79A08;
  if (!qword_269F79A08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79A08);
  }
  return result;
}

unint64_t sub_256A7A424()
{
  unint64_t result = qword_269F79A10;
  if (!qword_269F79A10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79A10);
  }
  return result;
}

unint64_t sub_256A7A470()
{
  unint64_t result = qword_26B2B38B0;
  if (!qword_26B2B38B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B38B0);
  }
  return result;
}

unint64_t sub_256A7A4BC()
{
  unint64_t result = qword_269F79A18;
  if (!qword_269F79A18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79A18);
  }
  return result;
}

unint64_t sub_256A7A508()
{
  unint64_t result = qword_269F79A20;
  if (!qword_269F79A20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79A20);
  }
  return result;
}

uint64_t sub_256A7A5D4(void *a1)
{
  sub_256A39D70(a1, v1);
  return v1;
}

uint64_t sub_256A7A608()
{
  return v0;
}

uint64_t sub_256A7A620@<X0>(unint64_t a1@<X8>)
{
  return sub_256B0B980(a1 > 1, v1, 1);
}

uint64_t sub_256A7A644()
{
  return v0;
}

uint64_t sub_256A7A65C(void *a1)
{
  sub_256A39D70(a1, v1);
  return v1;
}

uint64_t sub_256A7A690@<X0>(uint64_t a1@<X8>)
{
  return sub_256B0B980(0, a1 + 1, 1);
}

char *sub_256A7A6BC@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_256A7A6E8()
{
  return sub_256B3FEA0();
}

uint64_t sub_256A7A72C(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 16) = 1;
  return swift_willThrow();
}

void sub_256A7A748()
{
  *(void *)(v0 + 16) = v3;
  uint64_t v5 = v0 + 16 * v4;
  *(void *)(v5 + 32) = v1;
  *(void *)(v5 + 40) = v2;
}

void sub_256A7A760()
{
  *(void *)(v0 + 16) = v3;
  uint64_t v5 = v0 + 16 * v4;
  *(void *)(v5 + 32) = v1;
  *(void *)(v5 + 40) = v2;
}

uint64_t sub_256A7A778()
{
  return sub_256B0B980(0, v0, 0);
}

uint64_t sub_256A7A79C()
{
  return sub_256B0B980(0, v0, 0);
}

uint64_t sub_256A7A7C0()
{
  return sub_256B3F740();
}

uint64_t sub_256A7A7E4()
{
  return sub_256B3FEA0();
}

void *sub_256A7A800()
{
  return sub_256A39D70(v0, v0[3]);
}

uint64_t sub_256A7A830()
{
  return sub_256B3FF90();
}

uint64_t sub_256A7A850()
{
  return v0;
}

uint64_t sub_256A7A864()
{
  return v0;
}

uint64_t sub_256A7A878()
{
  return swift_dynamicCast();
}

uint64_t sub_256A7A898()
{
  return sub_256B3FE60();
}

void *sub_256A7A8C4@<X0>(const void *a1@<X1>, void *a2@<X8>)
{
  return memcpy(a2, a1, 0xB8uLL);
}

uint64_t sub_256A7A8DC()
{
  return swift_dynamicCast();
}

uint64_t sub_256A7A92C()
{
  return sub_256B3FD40();
}

uint64_t _s12ModelCatalog15SanitizerBundleV2idAA08ResourceD10IdentifierVyACGvg_0@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_256A7A978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_256A77F94(v9, (uint64_t)&a9);
}

uint64_t sub_256A7A990()
{
  return sub_256B3FE60();
}

uint64_t sub_256A7A9B8()
{
  return sub_256B3F740();
}

uint64_t sub_256A7A9D4()
{
  return sub_256B3FE10();
}

uint64_t sub_256A7A9F0()
{
  return sub_256B3F160();
}

uint64_t sub_256A7AA0C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_256A7AA28()
{
  return swift_dynamicCast();
}

void sub_256A7AA48(unint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  *a1 = v2 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
  a1[1] = (a2 - 32) | 0x8000000000000000;
}

char *sub_256A7AA5C@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_256A7AAB0()
{
  return swift_bridgeObjectRelease();
}

double sub_256A7AAC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12)
{
  return sub_256A3A6A8(v12, &a12);
}

__n128 sub_256A7AAFC(__n128 *a1)
{
  return a1[4];
}

double sub_256A7AB24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, long long a10)
{
  return sub_256A3A6A8(v10, &a10);
}

uint64_t sub_256A7AB54()
{
  return sub_256B3FD90();
}

uint64_t sub_256A7AB84()
{
  return sub_256B3FD90();
}

uint64_t sub_256A7ABB4()
{
  return sub_256B3FD90();
}

uint64_t sub_256A7ABE4()
{
  return sub_256B3FD90();
}

uint64_t sub_256A7AC20(uint64_t a1)
{
  return sub_256A39DB4(a1);
}

uint64_t *sub_256A7AC3C()
{
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  sub_256A39D70(v0 + 2, v2);
  *(void *)(v1 - 104) = v2;
  *(void *)(v1 - 96) = *(void *)(*(void *)(v3 + 8) + 8);
  return sub_256A49D7C((uint64_t *)(v1 - 128));
}

__n128 sub_256A7AC84(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return result;
}

double sub_256A7AC98@<D0>(_OWORD *a1@<X8>)
{
  return sub_256A3A6A8(v1, a1);
}

uint64_t sub_256A7ACC4()
{
  return sub_256B3F130();
}

uint64_t sub_256A7ACF0()
{
  return sub_256B3FE60();
}

uint64_t sub_256A7AD1C(uint64_t result)
{
  *(void *)(v1 - 88) = result;
  return result;
}

uint64_t *sub_256A7AD2C()
{
  *(void *)(v2 - 104) = v0;
  *(void *)(v2 - 96) = *(void *)(v1 + 8);
  return sub_256A49D7C((uint64_t *)(v2 - 128));
}

void sub_256A7AD4C(void *a1@<X1>, uint64_t a2@<X8>)
{
  *a1 = a2;
  a1[1] = (v2 - 32) | 0x8000000000000000;
}

void sub_256A7AD5C()
{
  STACK[0x210] = 0;
  STACK[0x218] = 0xE000000000000000;
}

void sub_256A7AD70()
{
  STACK[0x250] = 0;
  STACK[0x258] = 0xE000000000000000;
}

uint64_t sub_256A7AD84()
{
  return sub_256B3FD40();
}

uint64_t sub_256A7ADB0(uint64_t a1)
{
  *uint64_t v1 = a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_256A7ADD0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a1 = 0xD000000000000027;
  *(void *)(a1 + 8) = (a2 - 32) | 0x8000000000000000;
  *(unsigned char *)(a1 + 16) = 0;
  return swift_willThrow();
}

double sub_256A7ADFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12)
{
  return sub_256A3A6A8(v12, &a12);
}

double sub_256A7AE28@<D0>(_OWORD *a1@<X8>)
{
  return sub_256A3A6A8(v1, a1);
}

double sub_256A7AE54@<D0>(_OWORD *a1@<X8>)
{
  return sub_256A3A6A8(v1, a1);
}

uint64_t sub_256A7AE80()
{
  return sub_256B3F760();
}

double sub_256A7AEB8@<D0>(_OWORD *a1@<X8>)
{
  return sub_256A3A6A8(v1, a1);
}

void *sub_256A7AF04@<X0>(const void *a1@<X1>, void *a2@<X8>)
{
  return memcpy(a2, a1, 0xD8uLL);
}

uint64_t sub_256A7AF1C(uint64_t result, int a2)
{
  *(void *)(result + 8) = (a2 - 1);
  return result;
}

uint64_t sub_256A7AF34(uint64_t a1, ...)
{
  va_start(va, a1);
  return sub_256A77F94(v1, (uint64_t)va);
}

uint64_t sub_256A7AF4C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_256A7AF64()
{
  return sub_256B3F760();
}

uint64_t sub_256A7AFA4()
{
  return sub_256A87844(v0, v1);
}

uint64_t sub_256A7AFC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return a11;
}

uint64_t sub_256A7AFD4(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 16) = 0;
  return swift_willThrow();
}

uint64_t sub_256A7AFEC()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_256A7B004()
{
  return sub_256A77F94(v0 + 16, v1 - 128);
}

double sub_256A7B01C@<D0>(_OWORD *a1@<X8>)
{
  return sub_256A3A6A8(v1, a1);
}

uint64_t sub_256A7B044()
{
  return sub_256B3FD90();
}

uint64_t sub_256A7B06C()
{
  return sub_256B3FD90();
}

void *sub_256A7B094()
{
  sub_256A3A540((long long *)(v0 - 168), v0 - 128);
  uint64_t v1 = *(void *)(v0 - 104);
  __n128 result = sub_256A39D70((void *)(v0 - 128), v1);
  *(void *)(v0 - 144) = v1;
  return result;
}

void *sub_256A7B0C8()
{
  sub_256A3A540((long long *)(v0 - 168), v0 - 128);
  uint64_t v1 = *(void *)(v0 - 104);
  __n128 result = sub_256A39D70((void *)(v0 - 128), v1);
  *(void *)(v0 - 144) = v1;
  return result;
}

__n128 sub_256A7B0FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,long long a35)
{
  return (__n128)a35;
}

uint64_t sub_256A7B118()
{
  return swift_dynamicCast();
}

unint64_t sub_256A7B130()
{
  return 0xD000000000000033;
}

uint64_t sub_256A7B160()
{
  return sub_256B3FF80();
}

uint64_t sub_256A7B184(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  return swift_bridgeObjectRelease();
}

BOOL sub_256A7B1A8@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

BOOL sub_256A7B1C0@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

BOOL sub_256A7B1D8@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_256A7B1F0(void *a1, void *a2)
{
  *a1 = *a2;
  return a2[1];
}

uint64_t sub_256A7B200()
{
  return sub_256B3FF40();
}

uint64_t sub_256A7B228(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_256B0D69C(a1, v5, a3, v3, v4);
}

uint64_t sub_256A7B244()
{
  return sub_256A47FB0();
}

uint64_t sub_256A7B260()
{
  return sub_256B3FF80();
}

uint64_t sub_256A7B284()
{
  return v0;
}

uint64_t sub_256A7B29C()
{
  return v0;
}

void sub_256A7B2B4()
{
  sub_256B07A30();
}

void sub_256A7B2D8()
{
  sub_256B07A44();
}

void sub_256A7B2FC(unint64_t a1@<X8>)
{
  STACK[0x250] = a1;
  STACK[0x258] = (v1 - 32) | 0x8000000000000000;
}

void sub_256A7B314(unint64_t a1@<X8>)
{
  STACK[0x210] = a1;
  STACK[0x218] = (v1 - 32) | 0x8000000000000000;
}

uint64_t sub_256A7B33C()
{
  return 0;
}

uint64_t sub_256A7B374(uint64_t a1)
{
  *uint64_t v1 = a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_256A7B390()
{
  return swift_dynamicCast();
}

BOOL sub_256A7B3A8@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

void sub_256A7B3B8()
{
  sub_256B07A30();
}

void sub_256A7B3D4()
{
  sub_256B07A44();
}

void sub_256A7B3F0()
{
  sub_256B07A30();
}

void sub_256A7B40C()
{
  sub_256B07A44();
}

uint64_t sub_256A7B428()
{
  return v0;
}

uint64_t sub_256A7B440()
{
  return sub_256B3FD90();
}

uint64_t sub_256A7B464()
{
  return swift_dynamicCast();
}

uint64_t sub_256A7B480()
{
  sub_256A39DB4(v0 - 168);
  return sub_256A39DB4(v0 - 128);
}

void sub_256A7B4AC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = v2;
  *(void *)(a2 + 8) = v3;
  *(unsigned char *)(a2 + 16) = 1;
}

uint64_t sub_256A7B4F4()
{
  return v0;
}

void sub_256A7B50C()
{
  *(unsigned char *)(v0 - 65) = 2;
}

double sub_256A7B518()
{
  uint64_t v1 = (_OWORD *)(v0 - 144);
  *(void *)(v0 - 112) = 0;
  double result = 0.0;
  *uint64_t v1 = 0u;
  v1[1] = 0u;
  return result;
}

uint64_t sub_256A7B52C()
{
  return sub_256B3FEA0();
}

uint64_t sub_256A7B544()
{
  return sub_256B3FEA0();
}

void *sub_256A7B564(void *a1)
{
  return memcpy(a1, (const void *)(v1 + 968), 0xB8uLL);
}

uint64_t sub_256A7B57C()
{
  return swift_allocObject();
}

void sub_256A7B594()
{
  *(unsigned char *)(v0 - 65) = 1;
}

double sub_256A7B5A0()
{
  return 0.0;
}

uint64_t sub_256A7B5C8()
{
  return sub_256B3FB70();
}

uint64_t sub_256A7B5E8()
{
  return sub_256B3FB70();
}

uint64_t sub_256A7B608()
{
  return sub_256B3FB70();
}

double sub_256A7B628()
{
  return 0.0;
}

double sub_256A7B63C()
{
  return 0.0;
}

void sub_256A7B650()
{
  uint64_t v2 = *(void *)(v0 + 384);
  *(void *)(v1 - 184) = *(void *)(v0 + 376);
  *(void *)(v1 - 176) = v2;
  *(unsigned char *)(v0 + 192) = 1;
}

uint64_t sub_256A7B664(uint64_t result)
{
  *(void *)(v1 - 88) = result;
  return result;
}

double sub_256A7B67C()
{
  *(void *)(v0 + 88) = 0;
  double result = 0.0;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  return result;
}

double sub_256A7B690()
{
  return 0.0;
}

void *sub_256A7B6A4(void *a1)
{
  return memcpy(a1, (const void *)(v1 + 376), 0xB8uLL);
}

uint64_t sub_256A7B6BC()
{
  return swift_dynamicCast();
}

void sub_256A7B6DC()
{
  uint64_t v2 = v1[1];
  *(void *)(v0 + 968) = *v1;
  *(void *)(v0 + 976) = v2;
  *(unsigned char *)(v0 + 784) = 0;
}

void sub_256A7B6F0()
{
  *(void *)(v1 - 72) = v0;
}

void *sub_256A7B704(void *a1)
{
  return sub_256A39D70(a1, v1);
}

uint64_t sub_256A7B720()
{
  return v0;
}

uint64_t sub_256A7B734()
{
  return v0;
}

uint64_t sub_256A7B748(uint64_t a1)
{
  sub_256A39DB4(a1);
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t sub_256A7B770(uint64_t a1)
{
  sub_256A39DB4(a1);
  return swift_isUniquelyReferenced_nonNull_native();
}

void sub_256A7B798(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = v2;
  *(void *)(a2 + 8) = v3;
  *(unsigned char *)(a2 + 16) = 1;
}

__n128 sub_256A7B7B8()
{
  __n128 result = *(__n128 *)(v1 + 16);
  long long v3 = *(_OWORD *)(v1 + 32);
  *(__n128 *)(v0 + 16) = result;
  *(_OWORD *)(v0 + 32) = v3;
  *(void *)(v0 + 48) = *(void *)(v1 + 48);
  return result;
}

uint64_t sub_256A7B7CC()
{
  return swift_dynamicCast();
}

uint64_t sub_256A7B7EC()
{
  return swift_dynamicCast();
}

__n128 sub_256A7B80C()
{
  __n128 result = *(__n128 *)v1;
  long long v3 = *(_OWORD *)(v1 + 16);
  *(void *)(v0 + 32) = *(void *)(v1 + 32);
  *(__n128 *)uint64_t v0 = result;
  *(_OWORD *)(v0 + 16) = v3;
  return result;
}

BOOL sub_256A7B834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v14[7] = a1;
  v14[8] = a2;
  v14[9] = a3;
  v14[4] = a4;
  void v14[5] = a5;
  v14[6] = a6;
  v14[2] = AssetSpecificationVersion.number.getter();
  v14[3] = v6;
  v14[0] = AssetSpecificationVersion.number.getter();
  v14[1] = v7;
  uint64_t v8 = sub_256A39D2C(&qword_269F79A58);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_256B3F460();
  sub_256A46F7C((uint64_t)v10, 1, 1, v11);
  sub_256A480EC();
  uint64_t v12 = sub_256B3FAC0();
  sub_256A7C094((uint64_t)v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12 == -1;
}

BOOL sub_256A7B940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v10[2] = a1;
  v10[3] = a2;
  v10[0] = a3;
  v10[1] = a4;
  uint64_t v4 = sub_256A39D2C(&qword_269F79A58);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_256B3F460();
  sub_256A46F7C((uint64_t)v6, 1, 1, v7);
  sub_256A480EC();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v8 = sub_256B3FAC0();
  sub_256A7C094((uint64_t)v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 == -1;
}

ModelCatalog::AssetVersion __swiftcall AssetVersion.init(versionString:)(ModelCatalog::AssetVersion versionString)
{
  *uint64_t v1 = versionString;
  return versionString;
}

uint64_t AssetVersion.number.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t static AssetVersion.== infix(_:_:)(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return sub_256B3FEA0();
  }
}

BOOL sub_256A7BABC(uint64_t *a1, uint64_t *a2)
{
  return sub_256A7B940(*a1, a1[1], *a2, a2[1]);
}

BOOL sub_256A7BAD0(uint64_t *a1, uint64_t *a2)
{
  return sub_256A7BAE4(*a1, a1[1], *a2, a2[1]);
}

BOOL sub_256A7BAE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return !sub_256A7B940(a3, a4, a1, a2);
}

BOOL sub_256A7BB1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return !sub_256A7B834(a4, a5, a6, a1, a2, a3);
}

BOOL sub_256A7BB60(uint64_t *a1, uint64_t *a2)
{
  return sub_256A7BB94(*a1, a1[1], *a2, a2[1]);
}

BOOL sub_256A7BB74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return !sub_256A7B834(a1, a2, a3, a4, a5, a6);
}

BOOL sub_256A7BB94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return !sub_256A7B940(a1, a2, a3, a4);
}

BOOL sub_256A7BBB4(uint64_t *a1, uint64_t *a2)
{
  return sub_256A7BBC8(*a1, a1[1], *a2, a2[1]);
}

BOOL sub_256A7BBC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_256A7B940(a3, a4, a1, a2);
}

BOOL sub_256A7BBE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_256A7B834(a4, a5, a6, a1, a2, a3);
}

uint64_t sub_256A7BC0C()
{
  return sub_256B19C1C(*v0);
}

uint64_t AssetSpecificationVersion.major.getter()
{
  return *(void *)v0;
}

uint64_t AssetSpecificationVersion.minor.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t AssetSpecificationVersion.patch.getter()
{
  return *(void *)(v0 + 16);
}

ModelCatalog::AssetSpecificationVersion __swiftcall AssetSpecificationVersion.init(major:minor:patch:)(Swift::UInt major, Swift::UInt minor, Swift::UInt patch)
{
  *long long v3 = major;
  v3[1] = minor;
  v3[2] = patch;
  result.patch = patch;
  result.minor = minor;
  result.major = major;
  return result;
}

uint64_t AssetSpecificationVersion.number.getter()
{
  uint64_t v1 = sub_256A7C0F4();
  sub_256B3F760();
  sub_256A7C0F4();
  sub_256B3F760();
  swift_bridgeObjectRelease();
  sub_256B3F760();
  sub_256A7C0F4();
  sub_256B3F760();
  swift_bridgeObjectRelease();
  return v1;
}

BOOL static AssetSpecificationVersion.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

uint64_t sub_256A7BD1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A7BE5C(a1, a2, a3, (uint64_t (*)(void))sub_256A7BD48, (uint64_t (*)(void))sub_256A7BD94);
}

unint64_t sub_256A7BD48()
{
  unint64_t result = qword_269F79A28;
  if (!qword_269F79A28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79A28);
  }
  return result;
}

unint64_t sub_256A7BD94()
{
  unint64_t result = qword_269F79A30;
  if (!qword_269F79A30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79A30);
  }
  return result;
}

unint64_t sub_256A7BDE4()
{
  unint64_t result = qword_269F79A38;
  if (!qword_269F79A38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79A38);
  }
  return result;
}

uint64_t sub_256A7BE30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A7BE5C(a1, a2, a3, (uint64_t (*)(void))sub_256A7BE98, (uint64_t (*)(void))sub_256A7BEE4);
}

uint64_t sub_256A7BE5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  *(void *)(a1 + 8) = a4();
  uint64_t result = a5();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_256A7BE98()
{
  unint64_t result = qword_269F79A40;
  if (!qword_269F79A40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79A40);
  }
  return result;
}

unint64_t sub_256A7BEE4()
{
  unint64_t result = qword_269F79A48;
  if (!qword_269F79A48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79A48);
  }
  return result;
}

unint64_t sub_256A7BF38()
{
  unint64_t result = qword_269F79A50;
  if (!qword_269F79A50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79A50);
  }
  return result;
}

uint64_t sub_256A7BF84(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_256A7BFE4(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))sub_256A7B834);
}

uint64_t sub_256A7BF9C(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_256A7BFE4(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))sub_256A7BB1C);
}

uint64_t sub_256A7BFB4(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_256A7BFE4(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))sub_256A7BB74);
}

uint64_t sub_256A7BFCC(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_256A7BFE4(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))sub_256A7BBE4);
}

uint64_t sub_256A7BFE4(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void, void, void, void))
{
  return a5(*a1, a1[1], a1[2], *a2, a2[1], a2[2]);
}

uint64_t sub_256A7C008()
{
  return sub_256B19BE8();
}

ValueMetadata *type metadata accessor for AssetVersion()
{
  return &type metadata for AssetVersion;
}

__n128 initializeWithTake for Platform(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for AssetSpecificationVersion(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AssetSpecificationVersion(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for AssetSpecificationVersion()
{
  return &type metadata for AssetSpecificationVersion;
}

uint64_t sub_256A7C094(uint64_t a1)
{
  uint64_t v2 = sub_256A39D2C(&qword_269F79A58);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_256A7C0F4()
{
  return sub_256B3FE80();
}

uint64_t sub_256A7C110(uint64_t a1)
{
  return sub_256A7C188(a1, qword_26B2C4018);
}

uint64_t sub_256A7C12C(uint64_t a1)
{
  return sub_256A7C188(a1, qword_26B2C3FA0);
}

uint64_t sub_256A7C150(uint64_t a1)
{
  return sub_256A7C188(a1, qword_26B2C3FE0);
}

uint64_t sub_256A7C168(uint64_t a1)
{
  return sub_256A7C188(a1, qword_26B2C3FF8);
}

uint64_t sub_256A7C188(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_256B3F4A0();
  sub_256A49DE0(v3, a2);
  sub_256A46E9C(v3, (uint64_t)a2);
  return sub_256B3F480();
}

uint64_t sub_256A7C200(void (*a1)(uint64_t *__return_ptr, void *), uint64_t a2, uint64_t a3)
{
  uint64_t v22 = MEMORY[0x263F8EE78];
  uint64_t v18 = a3 + 56;
  uint64_t v6 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a3 + 56);
  int64_t v19 = (unint64_t)(v6 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v12 = v11 | (v10 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v10++, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v10 >= v19) {
      goto LABEL_29;
    }
    unint64_t v14 = *(void *)(v18 + 8 * v10);
    if (!v14) {
      break;
    }
LABEL_18:
    unint64_t v8 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v10 << 6);
LABEL_19:
    uint64_t v16 = (void *)(*(void *)(a3 + 48) + 16 * v12);
    uint64_t v17 = v16[1];
    v21[0] = *v16;
    v21[1] = v17;
    swift_bridgeObjectRetain();
    a1(&v20, v21);
    if (v3)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    uint64_t result = swift_bridgeObjectRelease();
    if (v20)
    {
      MEMORY[0x25A2AB0B0](result);
      if (*(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_256B3F880();
      }
      sub_256B3F8A0();
      uint64_t result = sub_256B3F870();
    }
  }
  int64_t v15 = v10 + 1;
  if (v10 + 1 >= v19) {
    goto LABEL_29;
  }
  unint64_t v14 = *(void *)(v18 + 8 * v15);
  if (v14) {
    goto LABEL_17;
  }
  int64_t v15 = v10 + 2;
  if (v10 + 2 >= v19) {
    goto LABEL_29;
  }
  unint64_t v14 = *(void *)(v18 + 8 * v15);
  if (v14) {
    goto LABEL_17;
  }
  int64_t v15 = v10 + 3;
  if (v10 + 3 >= v19) {
    goto LABEL_29;
  }
  unint64_t v14 = *(void *)(v18 + 8 * v15);
  if (v14) {
    goto LABEL_17;
  }
  int64_t v15 = v10 + 4;
  if (v10 + 4 >= v19)
  {
LABEL_29:
    swift_release();
    return v22;
  }
  unint64_t v14 = *(void *)(v18 + 8 * v15);
  if (v14)
  {
LABEL_17:
    int64_t v10 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v10 >= v19) {
      goto LABEL_29;
    }
    unint64_t v14 = *(void *)(v18 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_18;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t RequestDownloadProgressInformation.resourceIDs.getter()
{
  return swift_bridgeObjectRetain();
}

double RequestDownloadProgressInformation.progress.getter()
{
  return *(double *)(v0 + 8);
}

void RequestDownloadProgressInformation.status.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 16);
}

uint64_t RequestDownloadProgressInformation.bytesCompleted.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t RequestDownloadProgressInformation.totalBytes.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t static Catalog.requestDownload(for:on:)(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_256A39D2C(&qword_269F79A60);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v6);
  sub_256A6E704();
  uint64_t v24 = v2;
  v25[0] = MEMORY[0x263F8EE88];
  int64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    uint64_t v9 = a1 + 32;
    swift_bridgeObjectRetain();
    int64_t v10 = (void *)(a1 + 32);
    int64_t v11 = v8;
    do
    {
      sub_256A7C744((uint64_t)v25, v10);
      if (v3)
      {
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        __break(1u);
        return result;
      }
      uint64_t v3 = 0;
      v10 += 5;
      --v11;
    }
    while (v11);
    uint64_t v23 = v5;
    swift_bridgeObjectRelease();
    uint64_t v28 = MEMORY[0x263F8EE78];
    sub_256B0B980(0, v8, 0);
    uint64_t v12 = v28;
    do
    {
      sub_256A39E54(v9, (uint64_t)v25);
      uint64_t v14 = v26;
      uint64_t v13 = v27;
      sub_256A39D70(v25, v26);
      uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)(v13 + 8) + 24))(v14);
      uint64_t v17 = v16;
      sub_256A39DB4((uint64_t)v25);
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t isUniquelyReferenced_nonNull_native = sub_256B0B980(0, *(void *)(v12 + 16) + 1, 1);
        uint64_t v12 = v28;
      }
      unint64_t v19 = *(void *)(v12 + 16);
      unint64_t v18 = *(void *)(v12 + 24);
      if (v19 >= v18 >> 1)
      {
        uint64_t isUniquelyReferenced_nonNull_native = sub_256B0B980(v18 > 1, v19 + 1, 1);
        uint64_t v12 = v28;
      }
      *(void *)(v12 + 16) = v19 + 1;
      uint64_t v20 = v12 + 16 * v19;
      *(void *)(v20 + 32) = v15;
      *(void *)(v20 + 40) = v17;
      v9 += 40;
      --v8;
    }
    while (v8);
    uint64_t v5 = v23;
  }
  MEMORY[0x270FA5388](isUniquelyReferenced_nonNull_native);
  (*(void (**)(uint64_t, void, uint64_t))(v21 + 104))(v24, *MEMORY[0x263F8F580], v5);
  sub_256B3F950();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_256A7C744(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[3];
  uint64_t v4 = a2[4];
  sub_256A39D70(a2, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 48))(&v38, v3, v4);
  id v5 = objc_msgSend(self, sel_sharedManager);
  if (sub_256B3F750())
  {
    uint64_t v6 = (void *)sub_256B3F690();
    uint64_t v7 = (void *)sub_256B3F690();
    id v8 = objc_msgSend(v5, sel_downloadStatusForSubscriber_subscriptionName_, v6, v7);

    sub_256A4B7D4((unint64_t)v8, &v35);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    switch((char)v35)
    {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
        uint64_t v9 = a2[3];
        uint64_t v10 = a2[4];
        sub_256A39D70(a2, v9);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v10 + 48))(&v38, v9, v10);
        sub_256A399A8((uint64_t)&v35, (uint64_t)&v38);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return;
      case 6:
        if (qword_26B2B62D0 != -1) {
          swift_once();
        }
        uint64_t v25 = sub_256B3F4A0();
        sub_256A46E9C(v25, (uint64_t)qword_26B2C3FF8);
        sub_256A39E54((uint64_t)a2, (uint64_t)&v35);
        uint64_t v16 = sub_256B3F470();
        os_log_type_t v17 = sub_256B3F9C0();
        if (!os_log_type_enabled(v16, v17)) {
          goto LABEL_23;
        }
        unint64_t v18 = (uint8_t *)swift_slowAlloc();
        uint64_t v19 = swift_slowAlloc();
        uint64_t v41 = v19;
        *(_DWORD *)unint64_t v18 = 136315138;
        uint64_t v26 = v36;
        uint64_t v27 = v37;
        sub_256A39D70(&v35, v36);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v27 + 48))(&v38, v26, v27);
        uint64_t v28 = v39;
        unint64_t v29 = v40;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v38 = sub_256B3B598(v28, v29, &v41);
        sub_256B3FAA0();
        swift_bridgeObjectRelease();
        sub_256A39DB4((uint64_t)&v35);
        uint64_t v24 = "Non network error ocurred for %s";
        goto LABEL_22;
      case 7:
        if (qword_26B2B62D0 != -1) {
          swift_once();
        }
        uint64_t v30 = sub_256B3F4A0();
        sub_256A46E9C(v30, (uint64_t)qword_26B2C3FF8);
        sub_256A39E54((uint64_t)a2, (uint64_t)&v35);
        uint64_t v16 = sub_256B3F470();
        os_log_type_t v17 = sub_256B3F9C0();
        if (!os_log_type_enabled(v16, v17)) {
          goto LABEL_23;
        }
        unint64_t v18 = (uint8_t *)swift_slowAlloc();
        uint64_t v19 = swift_slowAlloc();
        uint64_t v41 = v19;
        *(_DWORD *)unint64_t v18 = 136315138;
        uint64_t v31 = v36;
        uint64_t v32 = v37;
        sub_256A39D70(&v35, v36);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v32 + 48))(&v38, v31, v32);
        uint64_t v33 = v39;
        unint64_t v34 = v40;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v38 = sub_256B3B598(v33, v34, &v41);
        sub_256B3FAA0();
        swift_bridgeObjectRelease();
        sub_256A39DB4((uint64_t)&v35);
        uint64_t v24 = "Network error ocurred for %s";
        goto LABEL_22;
      default:
        if (qword_26B2B62D0 != -1) {
          swift_once();
        }
        uint64_t v15 = sub_256B3F4A0();
        sub_256A46E9C(v15, (uint64_t)qword_26B2C3FF8);
        sub_256A39E54((uint64_t)a2, (uint64_t)&v35);
        uint64_t v16 = sub_256B3F470();
        os_log_type_t v17 = sub_256B3F9C0();
        if (os_log_type_enabled(v16, v17))
        {
          unint64_t v18 = (uint8_t *)swift_slowAlloc();
          uint64_t v19 = swift_slowAlloc();
          uint64_t v41 = v19;
          *(_DWORD *)unint64_t v18 = 136315138;
          uint64_t v20 = v36;
          uint64_t v21 = v37;
          sub_256A39D70(&v35, v36);
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v21 + 48))(&v38, v20, v21);
          uint64_t v22 = v39;
          unint64_t v23 = v40;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v38 = sub_256B3B598(v22, v23, &v41);
          sub_256B3FAA0();
          swift_bridgeObjectRelease();
          sub_256A39DB4((uint64_t)&v35);
          uint64_t v24 = "Skipping unknown subscription %s";
LABEL_22:
          _os_log_impl(&dword_256A36000, v16, v17, v24, v18, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x25A2ABEE0](v19, -1, -1);
          MEMORY[0x25A2ABEE0](v18, -1, -1);
        }
        else
        {
LABEL_23:
          sub_256A39DB4((uint64_t)&v35);
        }

        break;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    if (qword_26B2B62D0 != -1) {
      swift_once();
    }
    uint64_t v11 = sub_256B3F4A0();
    sub_256A46E9C(v11, (uint64_t)qword_26B2C3FF8);
    uint64_t v12 = sub_256B3F470();
    os_log_type_t v13 = sub_256B3F9C0();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl(&dword_256A36000, v12, v13, "Skipping unmanaged subscription", v14, 2u);
      MEMORY[0x25A2ABEE0](v14, -1, -1);
    }
  }
}

void sub_256A7CE4C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v64 = a5;
  uint64_t v80 = a1;
  uint64_t v68 = sub_256A39D2C(&qword_269F79A78);
  uint64_t v69 = *(void *)(v68 - 8);
  MEMORY[0x270FA5388](v68);
  uint64_t v63 = v7;
  uint64_t v62 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x263F8EE78];
  uint64_t v65 = a4;
  if (a2)
  {
    id v79 = a2;
  }
  else
  {
    id v79 = (id)sub_256A7FD44();
    *(void *)&long long v88 = 0;
    *((void *)&v88 + 1) = 0xE000000000000000;
    sub_256B3FB70();
    swift_bridgeObjectRelease();
    *(void *)&long long v88 = 0xD000000000000028;
    *((void *)&v88 + 1) = 0x8000000256B48980;
    uint64_t aBlock = sub_256B3F8B0();
    sub_256B3FE80();
    sub_256B3F760();
    swift_bridgeObjectRelease();
    uint64_t v9 = sub_256B3F570();
    MEMORY[0x270FA5388](v9 - 8);
    sub_256B3F560();
    uint64_t v10 = sub_256B3FA10();
    MEMORY[0x270FA5388](v10);
    *(void *)&long long v88 = MEMORY[0x263F8EE78];
    sub_256A7FD84();
    sub_256A39D2C(&qword_26B2B59C0);
    sub_256A49610();
    sub_256B3FAE0();
    uint64_t v11 = sub_256B3FA20();
    MEMORY[0x270FA5388](v11);
    (*(void (**)(char *, void))(v13 + 104))((char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x263F8F128]);
    uint64_t v8 = MEMORY[0x263F8EE78];
    uint64_t v14 = (void *)sub_256B3FA30();
    a4 = v65;
    id v79 = v14;
  }
  uint64_t v15 = self;
  id v16 = a2;
  id v67 = objc_msgSend(v15, sel_sharedManager);
  uint64_t v17 = swift_allocObject();
  uint64_t v18 = *(void *)(a4 + 16);
  uint64_t v19 = *(void *)(a4 + 56);
  uint64_t v58 = a4 + 56;
  uint64_t v20 = 1 << *(unsigned char *)(a4 + 32);
  uint64_t v66 = v17;
  *(void *)(v17 + 16) = v18;
  if (v20 < 64) {
    uint64_t v21 = ~(-1 << v20);
  }
  else {
    uint64_t v21 = -1;
  }
  unint64_t v22 = v21 & v19;
  int64_t v59 = (unint64_t)(v20 + 63) >> 6;
  uint64_t v78 = v69 + 16;
  uint64_t v61 = v69 + 32;
  uint64_t v60 = &v83;
  swift_bridgeObjectRetain();
  int64_t v23 = 0;
  uint64_t v24 = 0;
  if (!v22) {
    goto LABEL_9;
  }
LABEL_8:
  uint64_t v75 = (v22 - 1) & v22;
  int64_t v76 = v23;
  for (unint64_t i = __clz(__rbit64(v22)) | (v23 << 6); ; unint64_t i = __clz(__rbit64(v28)) + (v27 << 6))
  {
    uint64_t v30 = *(void *)(a4 + 48) + 56 * i;
    long long v32 = *(_OWORD *)(v30 + 16);
    long long v31 = *(_OWORD *)(v30 + 32);
    long long v33 = *(_OWORD *)v30;
    char v91 = *(unsigned char *)(v30 + 48);
    long long v89 = v32;
    long long v90 = v31;
    long long v88 = v33;
    sub_256A3A43C((uint64_t)&v88);
    sub_256A3A43C((uint64_t)&v88);
    uint64_t v34 = swift_bridgeObjectRetain();
    uint64_t v35 = sub_256A7D800(v34, (uint64_t)&v88);
    uint64_t v77 = v24;
    int64_t v36 = *(void *)(v35 + 16);
    if (v36)
    {
      uint64_t v87 = v8;
      sub_256B0B980(0, v36, 0);
      uint64_t v37 = v35 + 32;
      uint64_t v8 = v87;
      do
      {
        sub_256A39E54(v37, (uint64_t)&aBlock);
        uint64_t v39 = v84;
        uint64_t v38 = v85;
        sub_256A39D70(&aBlock, (uint64_t)v84);
        uint64_t v40 = (*(uint64_t (**)(void *))(v38[1] + 24))(v39);
        uint64_t v42 = v41;
        sub_256A39DB4((uint64_t)&aBlock);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_256B0B980(0, *(void *)(v8 + 16) + 1, 1);
          uint64_t v8 = v87;
        }
        unint64_t v44 = *(void *)(v8 + 16);
        unint64_t v43 = *(void *)(v8 + 24);
        if (v44 >= v43 >> 1)
        {
          sub_256B0B980(v43 > 1, v44 + 1, 1);
          uint64_t v8 = v87;
        }
        *(void *)(v8 + 16) = v44 + 1;
        uint64_t v45 = v8 + 16 * v44;
        *(void *)(v45 + 32) = v40;
        *(void *)(v45 + 40) = v42;
        v37 += 40;
        --v36;
      }
      while (v36);
    }
    swift_bridgeObjectRelease();
    uint64_t v73 = (void *)sub_256B3F690();
    uint64_t v72 = *((void *)&v89 + 1);
    uint64_t v74 = v89;
    swift_bridgeObjectRetain();
    sub_256A3A488((uint64_t)&v88);
    uint64_t v46 = v69;
    uint64_t v47 = *(void (**)(char *, uint64_t, uint64_t))(v69 + 16);
    long long v48 = v62;
    uint64_t v49 = v68;
    v47(v62, v80, v68);
    unint64_t v50 = (*(unsigned __int8 *)(v46 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
    uint64_t v51 = swift_allocObject();
    *(void *)(v51 + 16) = v8;
    long long v52 = *(void (**)(unint64_t, char *, uint64_t))(v46 + 32);
    v52(v51 + v50, v48, v49);
    uint64_t v85 = sub_256A80094;
    uint64_t v86 = v51;
    uint64_t aBlock = MEMORY[0x263EF8330];
    uint64_t v82 = 1107296256;
    uint64_t v83 = sub_256A4E3A8;
    uint64_t v84 = &unk_270604228;
    uint64_t v70 = _Block_copy(&aBlock);
    id v71 = v79;
    swift_release();
    v47(v48, v80, v49);
    uint64_t v53 = swift_allocObject();
    *(void *)(v53 + 16) = v66;
    v52(v53 + v50, v48, v49);
    uint64_t v85 = sub_256A801BC;
    uint64_t v86 = v53;
    uint64_t aBlock = MEMORY[0x263EF8330];
    uint64_t v82 = 1107296256;
    uint64_t v83 = sub_256A4E64C;
    uint64_t v84 = &unk_270604368;
    long long v54 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    uint64_t v55 = v73;
    uint64_t v56 = v70;
    sub_256A80204((uint64_t)v73, v74, v72, 0, (uint64_t)v79, (uint64_t)v70, (uint64_t)v54, v67);
    swift_bridgeObjectRelease();
    _Block_release(v54);
    _Block_release(v56);

    a4 = v65;
    uint64_t v8 = MEMORY[0x263F8EE78];
    uint64_t v24 = v77;
    int64_t v23 = v76;
    unint64_t v22 = v75;
    if (v75) {
      goto LABEL_8;
    }
LABEL_9:
    BOOL v26 = __OFADD__(v23, 1);
    int64_t v27 = v23 + 1;
    if (v26)
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v27 >= v59) {
      goto LABEL_33;
    }
    unint64_t v28 = *(void *)(v58 + 8 * v27);
    if (!v28) {
      break;
    }
LABEL_19:
    uint64_t v75 = (v28 - 1) & v28;
    int64_t v76 = v27;
  }
  int64_t v29 = v27 + 1;
  if (v27 + 1 >= v59) {
    goto LABEL_33;
  }
  unint64_t v28 = *(void *)(v58 + 8 * v29);
  if (v28) {
    goto LABEL_18;
  }
  int64_t v29 = v27 + 2;
  if (v27 + 2 >= v59) {
    goto LABEL_33;
  }
  unint64_t v28 = *(void *)(v58 + 8 * v29);
  if (v28) {
    goto LABEL_18;
  }
  int64_t v29 = v27 + 3;
  if (v27 + 3 >= v59)
  {
LABEL_33:
    swift_release();
    *(void *)(swift_allocObject() + 16) = a4;
    swift_bridgeObjectRetain();
    sub_256B3F920();

    swift_release();
    return;
  }
  unint64_t v28 = *(void *)(v58 + 8 * v29);
  if (v28)
  {
LABEL_18:
    int64_t v27 = v29;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v27 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v27 >= v59) {
      goto LABEL_33;
    }
    unint64_t v28 = *(void *)(v58 + 8 * v27);
    ++v29;
    if (v28) {
      goto LABEL_19;
    }
  }
LABEL_35:
  __break(1u);
}

uint64_t sub_256A7D800(uint64_t result, uint64_t a2)
{
  uint64_t v3 = MEMORY[0x263F8EE78];
  uint64_t v31 = MEMORY[0x263F8EE78];
  uint64_t v21 = *(void *)(result + 16);
  if (!v21)
  {
LABEL_33:
    swift_bridgeObjectRelease();
    sub_256A3A488(a2);
    return v3;
  }
  unint64_t v4 = 0;
  uint64_t v5 = result + 32;
  uint64_t v20 = result;
  while (v4 < *(void *)(result + 16))
  {
    sub_256A39E54(v5, (uint64_t)&v28);
    uint64_t v6 = v29;
    uint64_t v7 = v30;
    sub_256A39D70(&v28, v29);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v7 + 48))(&v22, v6, v7);
    uint64_t v8 = v23;
    uint64_t v9 = v24;
    uint64_t v10 = v25;
    uint64_t v11 = v26;
    int v12 = v27;
    BOOL v13 = (void)v22 == *(void *)a2 && *((void *)&v22 + 1) == *(void *)(a2 + 8);
    if (!v13 && (sub_256B3FEA0() & 1) == 0
      || (v8 == *(void *)(a2 + 16) ? (BOOL v14 = v9 == *(void *)(a2 + 24)) : (BOOL v14 = 0),
          !v14 && (sub_256B3FEA0() & 1) == 0
       || (v10 == *(void *)(a2 + 32) ? (BOOL v15 = v11 == *(void *)(a2 + 40)) : (BOOL v15 = 0),
           !v15 && (sub_256B3FEA0() & 1) == 0)))
    {
LABEL_23:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_24;
    }
    int v16 = *(unsigned __int8 *)(a2 + 48);
    if (v12 == 11)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v16 == 11) {
        goto LABEL_28;
      }
    }
    else
    {
      if (v16 == 11) {
        goto LABEL_23;
      }
      char v17 = sub_256B026BC(v12, *(unsigned char *)(a2 + 48));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v17)
      {
LABEL_28:
        sub_256A3A540(&v28, (uint64_t)&v22);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_256B0BA00();
        }
        uint64_t v18 = v31;
        unint64_t v19 = *(void *)(v31 + 16);
        if (v19 >= *(void *)(v31 + 24) >> 1)
        {
          sub_256B0BA00();
          uint64_t v18 = v31;
        }
        *(void *)(v18 + 16) = v19 + 1;
        sub_256A3A540(&v22, v18 + 40 * v19 + 32);
        goto LABEL_25;
      }
    }
LABEL_24:
    sub_256A39DB4((uint64_t)&v28);
LABEL_25:
    ++v4;
    v5 += 40;
    uint64_t result = v20;
    if (v21 == v4)
    {
      uint64_t v3 = v31;
      goto LABEL_33;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_256A7DA84(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_256A39D2C(&qword_269F79A90);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v15[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  objc_msgSend(a1, sel_completedPercent);
  uint64_t v9 = v8;
  sub_256A4B7D4((unint64_t)objc_msgSend(a1, sel_downloadStatus), v15);
  unint64_t v10 = 0x807030502010004uLL >> (8 * LOBYTE(v15[0]));
  id v11 = objc_msgSend(a1, sel_completedBytes);
  id v12 = objc_msgSend(a1, sel_totalBytes);
  v15[0] = a2;
  v15[1] = v9;
  char v16 = v10;
  id v17 = v11;
  id v18 = v12;
  sub_256A39D2C(&qword_269F79A78);
  sub_256B3F930();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_256A7DC08(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 16);
  uint64_t result = swift_beginAccess();
  uint64_t v4 = *(void *)(a1 + 16);
  BOOL v5 = __OFSUB__(v4, 1);
  uint64_t v6 = v4 - 1;
  if (v5)
  {
    __break(1u);
  }
  else
  {
    uint64_t *v2 = v6;
    if (v6 <= 0)
    {
      sub_256A39D2C(&qword_269F79A78);
      return sub_256B3F940();
    }
  }
  return result;
}

void sub_256A7DC80(uint64_t a1)
{
  uint64_t v2 = sub_256A39D2C(&qword_269F79A80);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  BOOL v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  int v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == *MEMORY[0x263F8F540])
  {
    if (qword_26B2B62D0 != -1) {
      swift_once();
    }
    uint64_t v7 = sub_256B3F4A0();
    sub_256A46E9C(v7, (uint64_t)qword_26B2C3FF8);
    swift_bridgeObjectRetain_n();
    uint64_t v8 = sub_256B3F470();
    os_log_type_t v9 = sub_256B3F9F0();
    if (os_log_type_enabled(v8, v9))
    {
      unint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      uint64_t v31 = v11;
      *(_DWORD *)unint64_t v10 = 136315138;
      sub_256A802DC();
      swift_bridgeObjectRetain();
      uint64_t v12 = sub_256B3F980();
      unint64_t v14 = v13;
      swift_bridgeObjectRelease();
      uint64_t v30 = sub_256B3B598(v12, v14, &v31);
      sub_256B3FAA0();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      BOOL v15 = "Finish request download for %s";
LABEL_11:
      _os_log_impl(&dword_256A36000, v8, v9, v15, v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25A2ABEE0](v11, -1, -1);
      MEMORY[0x25A2ABEE0](v10, -1, -1);

      return;
    }
LABEL_12:

    swift_bridgeObjectRelease_n();
    return;
  }
  if (v6 == *MEMORY[0x263F8F548])
  {
    if (qword_26B2B62D0 != -1) {
      swift_once();
    }
    uint64_t v16 = sub_256B3F4A0();
    sub_256A46E9C(v16, (uint64_t)qword_26B2C3FF8);
    swift_bridgeObjectRetain_n();
    uint64_t v8 = sub_256B3F470();
    os_log_type_t v9 = sub_256B3F9F0();
    if (os_log_type_enabled(v8, v9))
    {
      unint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      uint64_t v31 = v11;
      *(_DWORD *)unint64_t v10 = 136315138;
      sub_256A802DC();
      swift_bridgeObjectRetain();
      uint64_t v17 = sub_256B3F980();
      unint64_t v19 = v18;
      swift_bridgeObjectRelease();
      uint64_t v30 = sub_256B3B598(v17, v19, &v31);
      sub_256B3FAA0();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      BOOL v15 = "Cancelled download request updates for %s";
      goto LABEL_11;
    }
    goto LABEL_12;
  }
  if (qword_26B2B62D0 != -1) {
    swift_once();
  }
  uint64_t v20 = sub_256B3F4A0();
  sub_256A46E9C(v20, (uint64_t)qword_26B2C3FF8);
  swift_bridgeObjectRetain_n();
  uint64_t v21 = sub_256B3F470();
  os_log_type_t v22 = sub_256B3F9D0();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    uint64_t v31 = v29;
    *(_DWORD *)uint64_t v23 = 136315138;
    long long v28 = v23 + 4;
    sub_256A802DC();
    swift_bridgeObjectRetain();
    uint64_t v24 = sub_256B3F980();
    unint64_t v26 = v25;
    swift_bridgeObjectRelease();
    uint64_t v30 = sub_256B3B598(v24, v26, &v31);
    sub_256B3FAA0();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_256A36000, v21, v22, "Unexpected termination while requesting download %s", v23, 0xCu);
    uint64_t v27 = v29;
    swift_arrayDestroy();
    MEMORY[0x25A2ABEE0](v27, -1, -1);
    MEMORY[0x25A2ABEE0](v23, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t static Catalog.monitorUpdates(for:on:)()
{
  uint64_t v1 = sub_256A39D2C(&qword_26B2B5510);
  sub_256A49FB8();
  uint64_t v3 = v2;
  MEMORY[0x270FA5388](v4);
  sub_256A6E704();
  sub_256A39D2C(&qword_26B2B5508);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v0, *MEMORY[0x263F8F580], v1);
  return sub_256B3F950();
}

void sub_256A7E31C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v44 = a1;
  int64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = MEMORY[0x263F8EE78];
  uint64_t v45 = a2;
  if (v4)
  {
    v51[0] = MEMORY[0x263F8EE78];
    sub_256B0B980(0, v4, 0);
    uint64_t v7 = a2 + 32;
    uint64_t v5 = v51[0];
    int64_t v8 = v4;
    do
    {
      sub_256A39E54(v7, (uint64_t)&v46);
      uint64_t v9 = v48;
      uint64_t v10 = v49;
      sub_256A39D70(&v46, v48);
      uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)(v10 + 8) + 24))(v9);
      uint64_t v13 = v12;
      sub_256A39DB4((uint64_t)&v46);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_256B0B980(0, *(void *)(v5 + 16) + 1, 1);
        uint64_t v5 = v51[0];
      }
      unint64_t v15 = *(void *)(v5 + 16);
      unint64_t v14 = *(void *)(v5 + 24);
      if (v15 >= v14 >> 1)
      {
        sub_256B0B980(v14 > 1, v15 + 1, 1);
        uint64_t v5 = v51[0];
      }
      *(void *)(v5 + 16) = v15 + 1;
      uint64_t v16 = v5 + 16 * v15;
      *(void *)(v16 + 32) = v11;
      *(void *)(v16 + 40) = v13;
      v7 += 40;
      --v8;
    }
    while (v8);
  }
  id v17 = objc_msgSend(self, sel_sharedManager);
  if (a3)
  {
    unint64_t v18 = a3;
    if (v4) {
      goto LABEL_10;
    }
LABEL_18:
    id v37 = a3;
    uint64_t v21 = MEMORY[0x263F8EE78];
    uint64_t v31 = v45;
    goto LABEL_19;
  }
  v43[3] = sub_256A7FD44();
  unint64_t v46 = 0;
  unint64_t v47 = 0xE000000000000000;
  sub_256B3FB70();
  swift_bridgeObjectRelease();
  unint64_t v46 = 0xD000000000000027;
  unint64_t v47 = 0x8000000256B48950;
  v51[0] = sub_256B3F8B0();
  sub_256B3FE80();
  sub_256B3F760();
  swift_bridgeObjectRelease();
  v43[0] = v47;
  v43[1] = v46;
  uint64_t v32 = sub_256B3F570();
  id v43[2] = v43;
  MEMORY[0x270FA5388](v32 - 8);
  sub_256B3F560();
  uint64_t v33 = sub_256B3FA10();
  MEMORY[0x270FA5388](v33);
  unint64_t v46 = MEMORY[0x263F8EE78];
  sub_256A7FD84();
  sub_256A39D2C(&qword_26B2B59C0);
  sub_256A49610();
  sub_256B3FAE0();
  uint64_t v34 = sub_256B3FA20();
  MEMORY[0x270FA5388](v34);
  (*(void (**)(char *, void))(v36 + 104))((char *)v43 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x263F8F128]);
  unint64_t v18 = (void *)sub_256B3FA30();
  if (!v4) {
    goto LABEL_18;
  }
LABEL_10:
  uint64_t v19 = v45 + 32;
  id v20 = a3;
  swift_bridgeObjectRetain();
  uint64_t v21 = MEMORY[0x263F8EE78];
  do
  {
    sub_256A39E54(v19, (uint64_t)v51);
    uint64_t v22 = v52;
    uint64_t v23 = v53;
    sub_256A39D70(v51, v52);
    (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t))(v23 + 48))(&v46, v22, v23);
    uint64_t v24 = v49;
    uint64_t v25 = v50;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_256A39DB4((uint64_t)v51);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_256B07B20(0, *(void *)(v21 + 16) + 1, 1, v21);
      uint64_t v21 = v29;
    }
    unint64_t v27 = *(void *)(v21 + 16);
    unint64_t v26 = *(void *)(v21 + 24);
    if (v27 >= v26 >> 1)
    {
      sub_256B07B20(v26 > 1, v27 + 1, 1, v21);
      uint64_t v21 = v30;
    }
    *(void *)(v21 + 16) = v27 + 1;
    uint64_t v28 = v21 + 16 * v27;
    *(void *)(v28 + 32) = v24;
    *(void *)(v28 + 40) = v25;
    v19 += 40;
    --v4;
  }
  while (v4);
  uint64_t v31 = v45;
  swift_bridgeObjectRelease();
LABEL_19:
  uint64_t v38 = sub_256A3CF68(v21);
  MEMORY[0x270FA5388](v38);
  v42[2] = v17;
  v42[3] = v18;
  v42[4] = v44;
  v42[5] = v31;
  uint64_t v39 = sub_256A7C200((void (*)(uint64_t *__return_ptr, void *))sub_256A7FED0, (uint64_t)v42, v38);
  swift_bridgeObjectRelease();
  uint64_t v40 = (void *)swift_allocObject();
  v40[2] = v5;
  v40[3] = v39;
  v40[4] = v17;
  id v41 = v17;
  sub_256A39D2C(&qword_26B2B5518);
  sub_256B3F920();
}

void sub_256A7E8C0(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v21 = a5;
  uint64_t v8 = sub_256A39D2C(&qword_26B2B5518);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)sub_256B3F690();
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v19[1] = a3;
  v13(v11, a3, v8);
  unint64_t v14 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v15 = (v10 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v16 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v16 + v14, v11, v8);
  *(void *)(v16 + v15) = a4;
  aBlock[4] = sub_256A7FFE0;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_256A4E64C;
  aBlock[3] = &unk_2706040E8;
  id v17 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  id v18 = objc_msgSend(a1, sel_observeAssetSet_queue_handler_, v12, v20, v17);
  _Block_release(v17);

  if (!v18) {
    sub_256B3F940();
  }
  *uint64_t v21 = v18;
}

uint64_t sub_256A7EAE0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_256A39D2C(&qword_26B2B51C0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  int v6 = (char *)v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[1] = a2;
  swift_bridgeObjectRetain();
  sub_256A39D2C(&qword_26B2B5518);
  sub_256B3F930();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_256A7EBD8(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v8 = sub_256A39D2C(&qword_269F79A70);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  int v12 = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v11, v8);
  if (v12 != *MEMORY[0x263F8F540])
  {
    if (v12 != *MEMORY[0x263F8F548])
    {
      if (qword_26B2B62D0 != -1) {
        swift_once();
      }
      uint64_t v19 = sub_256B3F4A0();
      sub_256A46E9C(v19, (uint64_t)qword_26B2C3FF8);
      swift_bridgeObjectRetain();
      uint64_t v20 = sub_256B3F470();
      os_log_type_t v21 = sub_256B3F9D0();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v22 = 134217984;
        uint64_t v28 = *(void *)(a2 + 16);
        sub_256B3FAA0();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_256A36000, v20, v21, "Unexpected termination while monitoring updates for %ld resources", v22, 0xCu);
        MEMORY[0x25A2ABEE0](v22, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease();
      }
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      goto LABEL_18;
    }
    if (qword_26B2B62D0 != -1) {
      swift_once();
    }
    uint64_t v18 = sub_256B3F4A0();
    sub_256A46E9C(v18, (uint64_t)qword_26B2C3FF8);
    swift_bridgeObjectRetain();
    unint64_t v14 = sub_256B3F470();
    os_log_type_t v15 = sub_256B3F9F0();
    if (!os_log_type_enabled(v14, v15)) {
      goto LABEL_11;
    }
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 134217984;
    uint64_t v28 = *(void *)(a2 + 16);
    sub_256B3FAA0();
    swift_bridgeObjectRelease();
    id v17 = "Cancelled monitoring updates for %ld resources";
    goto LABEL_10;
  }
  if (qword_26B2B62D0 != -1) {
    goto LABEL_30;
  }
  while (1)
  {
    uint64_t v13 = sub_256B3F4A0();
    sub_256A46E9C(v13, (uint64_t)qword_26B2C3FF8);
    swift_bridgeObjectRetain();
    unint64_t v14 = sub_256B3F470();
    os_log_type_t v15 = sub_256B3F9D0();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 134217984;
      uint64_t v28 = *(void *)(a2 + 16);
      sub_256B3FAA0();
      swift_bridgeObjectRelease();
      id v17 = "Finish/error monitoring updates for %ld resources";
LABEL_10:
      _os_log_impl(&dword_256A36000, v14, v15, v17, v16, 0xCu);
      MEMORY[0x25A2ABEE0](v16, -1, -1);
    }
    else
    {
LABEL_11:

      swift_bridgeObjectRelease();
    }
LABEL_18:
    if (a3 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v23 = sub_256B3FC80();
      if (!v23) {
        return swift_bridgeObjectRelease();
      }
    }
    else
    {
      uint64_t v23 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v23) {
        return swift_bridgeObjectRelease();
      }
    }
    if (v23 >= 1) {
      break;
    }
    __break(1u);
LABEL_30:
    swift_once();
  }
  for (uint64_t i = 0; i != v23; ++i)
  {
    if ((a3 & 0xC000000000000001) != 0)
    {
      uint64_t v25 = MEMORY[0x25A2AB400](i, a3);
    }
    else
    {
      uint64_t v25 = *(void *)(a3 + 8 * i + 32);
      swift_unknownObjectRetain();
    }
    objc_msgSend(a4, sel_removeObserver_, v25);
    swift_unknownObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

unint64_t static Catalog.generativeExperiencesReadinessNotificationName.getter()
{
  return 0xD000000000000037;
}

void static Catalog.notifyGenerativeExperiencesReady()()
{
  if (notify_post("com.apple.modelcatalog.generative-experiences-readiness"))
  {
    if (qword_26B2B62D0 != -1) {
      swift_once();
    }
    uint64_t v0 = sub_256B3F4A0();
    sub_256A46E9C(v0, (uint64_t)qword_26B2C3FF8);
    oslog = sub_256B3F470();
    os_log_type_t v1 = sub_256B3F9D0();
    if (os_log_type_enabled(oslog, v1))
    {
      uint64_t v2 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v2 = 67109120;
      sub_256B3FAA0();
      _os_log_impl(&dword_256A36000, oslog, v1, "Failed to post generative experience ready notification: %u", v2, 8u);
      MEMORY[0x25A2ABEE0](v2, -1, -1);
    }
    else
    {
    }
  }
}

uint64_t static Catalog.monitorGenerativeExperiencesReadiness(on:)(uint64_t a1)
{
  sub_256A39D2C(&qword_26B2B3430);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v2);
  uint64_t v7 = a1;
  (*(void (**)(unsigned char *, void))(v4 + 104))(&v6[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)], *MEMORY[0x263F8F580]);
  return sub_256B3F950();
}

void sub_256A7F2DC(uint64_t a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v4 = sub_256A39D2C(&qword_26B2B3538);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t v8 = a2;
  }
  else
  {
    v20[1] = sub_256A7FD44();
    uint64_t v9 = sub_256B3F570();
    v20[2] = v20;
    MEMORY[0x270FA5388](v9 - 8);
    uint64_t v21 = a1;
    sub_256B3F560();
    uint64_t v10 = sub_256B3FA10();
    v20[0] = v20;
    MEMORY[0x270FA5388](v10);
    aBlock[0] = MEMORY[0x263F8EE78];
    sub_256A7FD84();
    sub_256A39D2C(&qword_26B2B59C0);
    sub_256A49610();
    sub_256B3FAE0();
    uint64_t v11 = sub_256B3FA20();
    MEMORY[0x270FA5388](v11);
    (*(void (**)(char *, void))(v13 + 104))((char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x263F8F128]);
    a1 = v21;
    uint64_t v8 = (void *)sub_256B3FA30();
  }
  int out_token = -1;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v14 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v15 + v14, v7, v4);
  aBlock[4] = sub_256A7FE50;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_256A7F7F4;
  aBlock[3] = &unk_270608080;
  uint64_t v16 = _Block_copy(aBlock);
  id v17 = a2;
  uint64_t v18 = v8;
  swift_release();
  notify_register_dispatch("com.apple.modelcatalog.generative-experiences-readiness", &out_token, v18, v16);
  _Block_release(v16);

  int v19 = out_token;
  *(_DWORD *)(swift_allocObject() + 16) = v19;
  sub_256B3F920();
}

uint64_t sub_256A7F70C()
{
  uint64_t v0 = sub_256A39D2C(&qword_26B2B3428);
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = &v5[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5[15] = 1;
  sub_256A39D2C(&qword_26B2B3538);
  sub_256B3F930();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_256A7F7F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

uint64_t sub_256A7F848(uint64_t a1, int a2)
{
  uint64_t v4 = sub_256A39D2C(&qword_269F79A68);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  int v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v8 == *MEMORY[0x263F8F540])
  {
    if (qword_26B2B62D0 != -1) {
      swift_once();
    }
    uint64_t v9 = sub_256B3F4A0();
    sub_256A46E9C(v9, (uint64_t)qword_26B2C3FF8);
    uint64_t v10 = sub_256B3F470();
    os_log_type_t v11 = sub_256B3F9D0();
    if (!os_log_type_enabled(v10, v11)) {
      goto LABEL_12;
    }
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    uint64_t v13 = "Finish/error monitoring generative experiences readiness";
LABEL_11:
    _os_log_impl(&dword_256A36000, v10, v11, v13, v12, 2u);
    MEMORY[0x25A2ABEE0](v12, -1, -1);
LABEL_12:

    return notify_cancel(a2);
  }
  if (v8 == *MEMORY[0x263F8F548])
  {
    if (qword_26B2B62D0 != -1) {
      swift_once();
    }
    uint64_t v14 = sub_256B3F4A0();
    sub_256A46E9C(v14, (uint64_t)qword_26B2C3FF8);
    uint64_t v10 = sub_256B3F470();
    os_log_type_t v11 = sub_256B3F9F0();
    if (!os_log_type_enabled(v10, v11)) {
      goto LABEL_12;
    }
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    uint64_t v13 = "Cancelled monitoring generative experiences readiness";
    goto LABEL_11;
  }
  if (qword_26B2B62D0 != -1) {
    swift_once();
  }
  uint64_t v15 = sub_256B3F4A0();
  sub_256A46E9C(v15, (uint64_t)qword_26B2C3FF8);
  uint64_t v16 = sub_256B3F470();
  os_log_type_t v17 = sub_256B3F9D0();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl(&dword_256A36000, v16, v17, "Unexpected termination while monitoring generative experiences readiness", v18, 2u);
    MEMORY[0x25A2ABEE0](v18, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return notify_cancel(a2);
}

void sub_256A7FB7C(uint64_t a1)
{
  sub_256A7CE4C(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

void sub_256A7FB88(uint64_t a1)
{
  sub_256A7E31C(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

void sub_256A7FB90(uint64_t a1)
{
  sub_256A7F2DC(a1, *(void **)(v1 + 16));
}

uint64_t destroy for RequestDownloadProgressInformation()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for RequestDownloadProgressInformation(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RequestDownloadProgressInformation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

__n128 initializeWithTake for RequestDownloadProgressInformation(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for RequestDownloadProgressInformation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for RequestDownloadProgressInformation(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RequestDownloadProgressInformation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RequestDownloadProgressInformation()
{
  return &type metadata for RequestDownloadProgressInformation;
}

unint64_t sub_256A7FD44()
{
  unint64_t result = qword_26B2B59E0;
  if (!qword_26B2B59E0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_26B2B59E0);
  }
  return result;
}

unint64_t sub_256A7FD84()
{
  unint64_t result = qword_26B2B59D8;
  if (!qword_26B2B59D8)
  {
    sub_256B3FA10();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B59D8);
  }
  return result;
}

uint64_t sub_256A7FDC8()
{
  sub_256A39D2C(&qword_26B2B3538);
  sub_256A80348();
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);

  return MEMORY[0x270FA0238](v0, v4, v5);
}

uint64_t sub_256A7FE50()
{
  uint64_t v0 = sub_256A39D2C(&qword_26B2B3538);
  sub_256A4A3B4(v0);

  return sub_256A7F70C();
}

uint64_t sub_256A7FEA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_256A7FEB4()
{
  return swift_release();
}

uint64_t sub_256A7FEBC()
{
  return sub_256A80340(v0, 20);
}

uint64_t sub_256A7FEC8(uint64_t a1)
{
  return sub_256A7F848(a1, *(_DWORD *)(v1 + 16));
}

void sub_256A7FED0(void *a1@<X8>)
{
  sub_256A7E8C0(*(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), a1);
}

uint64_t sub_256A7FEF0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_256A7FF38(uint64_t a1)
{
  return sub_256A7EBD8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_256A7FF44()
{
  sub_256A39D2C(&qword_26B2B5518);
  sub_256A80348();
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, v5, v4);
}

uint64_t sub_256A7FFE0()
{
  uint64_t v1 = *(void *)(sub_256A39D2C(&qword_26B2B5518) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_256A7EAE0(v0 + v2, v3);
}

uint64_t sub_256A80070()
{
  return sub_256A80340(v0, 24);
}

uint64_t sub_256A8007C()
{
  return sub_256A80104(MEMORY[0x263F8EEA0]);
}

uint64_t sub_256A80094(void *a1)
{
  uint64_t v3 = sub_256A39D2C(&qword_269F79A78);
  sub_256A4A3B4(v3);
  uint64_t v4 = *(void *)(v1 + 16);

  return sub_256A7DA84(a1, v4);
}

uint64_t sub_256A800EC()
{
  return sub_256A80104(MEMORY[0x263F8EED8]);
}

uint64_t sub_256A80104(void (*a1)(void))
{
  uint64_t v3 = sub_256A39D2C(&qword_269F79A78);
  sub_256A49FB8();
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = (v8 + 24) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v8 | 7;
  a1(*(void *)(v1 + 16));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1 + v9, v3);

  return MEMORY[0x270FA0238](v1, v10, v11);
}

uint64_t sub_256A801BC()
{
  uint64_t v1 = sub_256A39D2C(&qword_269F79A78);
  sub_256A4A3B4(v1);
  uint64_t v2 = *(void *)(v0 + 16);

  return sub_256A7DC08(v2);
}

void sub_256A80204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  id v14 = (id)sub_256B3F690();
  objc_msgSend(a8, sel_updateAssetsForSubscriber_subscriptionName_policies_queue_detailedProgress_completion_, a1, v14, a4, a5, a6, a7);
}

uint64_t sub_256A8029C()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

void sub_256A802D4(uint64_t a1)
{
}

unint64_t sub_256A802DC()
{
  unint64_t result = qword_269F79A88;
  if (!qword_269F79A88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79A88);
  }
  return result;
}

uint64_t sub_256A80340(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA0238](a1, a2, 7);
}

uint64_t AJAXConfiguration.init(url:modelName:endPromptToken:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  sub_256B3F300();
  sub_256A6E624();
  (*(void (**)(uint64_t, uint64_t))(v12 + 32))(a6, a1);
  uint64_t result = type metadata accessor for AJAXConfiguration();
  id v14 = (void *)(a6 + *(int *)(result + 20));
  *id v14 = a2;
  v14[1] = a3;
  uint64_t v15 = (void *)(a6 + *(int *)(result + 24));
  *uint64_t v15 = a4;
  v15[1] = a5;
  return result;
}

uint64_t type metadata accessor for AJAXConfiguration()
{
  uint64_t result = qword_26B2B3070;
  if (!qword_26B2B3070) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t AJAXConfiguration.url.getter@<X0>(uint64_t a1@<X8>)
{
  sub_256B3F300();
  sub_256A6E624();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);

  return v5(a1, v1, v3);
}

uint64_t AJAXConfiguration.modelName.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AJAXConfiguration() + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AJAXConfiguration.endPromptToken.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AJAXConfiguration() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_256A8051C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 7107189 && a2 == 0xE300000000000000;
  if (v2 || (sub_256B3FEA0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6D614E6C65646F6DLL && a2 == 0xE900000000000065;
    if (v6 || (sub_256B3FEA0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x706D6F7250646E65 && a2 == 0xEE006E656B6F5474)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = sub_256B3FEA0();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t sub_256A8068C(char a1)
{
  if (!a1) {
    return 7107189;
  }
  if (a1 == 1) {
    return 0x6D614E6C65646F6DLL;
  }
  return 0x706D6F7250646E65;
}

uint64_t sub_256A806EC()
{
  return sub_256A55E40();
}

uint64_t sub_256A806F4()
{
  return sub_256A8068C(*v0);
}

uint64_t sub_256A806FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_256A8051C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_256A80724(uint64_t a1)
{
  unint64_t v2 = sub_256A80938();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A80760(uint64_t a1)
{
  unint64_t v2 = sub_256A80938();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t AJAXConfiguration.encode(to:)(void *a1)
{
  uint64_t v3 = sub_256A39D2C(&qword_269F79A98);
  sub_256A49FB8();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  sub_256A4A500();
  uint64_t v9 = v8 - v7;
  sub_256A39D70(a1, a1[3]);
  sub_256A80938();
  sub_256B3FF90();
  sub_256B3F300();
  sub_256A80C78(&qword_269F79AA8);
  sub_256B3FE60();
  if (!v1)
  {
    type metadata accessor for AJAXConfiguration();
    sub_256B3FE20();
    sub_256B3FE20();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v9, v3);
}

unint64_t sub_256A80938()
{
  unint64_t result = qword_269F79AA0;
  if (!qword_269F79AA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79AA0);
  }
  return result;
}

void AJAXConfiguration.init(from:)()
{
  sub_256A4A878();
  uint64_t v4 = v3;
  uint64_t v32 = v5;
  uint64_t v33 = sub_256A39D2C(&qword_269F79AB0);
  sub_256A49FB8();
  uint64_t v7 = v6;
  MEMORY[0x270FA5388](v8);
  sub_256A84170();
  uint64_t v9 = type metadata accessor for AJAXConfiguration();
  sub_256A6E624();
  MEMORY[0x270FA5388](v10);
  sub_256A84158();
  sub_256A39D70(v4, v4[3]);
  sub_256A80938();
  sub_256B3FF80();
  if (v0)
  {
    sub_256A39DB4((uint64_t)v4);
  }
  else
  {
    uint64_t v29 = v1;
    uint64_t v31 = v7;
    uint64_t v11 = sub_256B3F300();
    uint64_t v30 = &v28;
    sub_256A49FB8();
    uint64_t v13 = v12;
    MEMORY[0x270FA5388](v14);
    sub_256A4A500();
    uint64_t v17 = v16 - v15;
    sub_256A80C78(&qword_269F79AB8);
    uint64_t v18 = v33;
    sub_256B3FD90();
    uint64_t v28 = v13;
    int v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32);
    uint64_t v20 = v29;
    v19(v29, v17, v11);
    uint64_t v21 = sub_256B3FD50();
    uint64_t v22 = (uint64_t *)(v20 + *(int *)(v9 + 20));
    *uint64_t v22 = v21;
    v22[1] = v23;
    uint64_t v24 = sub_256B3FD50();
    uint64_t v26 = v25;
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v2, v18);
    uint64_t v27 = (uint64_t *)(v20 + *(int *)(v9 + 24));
    *uint64_t v27 = v24;
    v27[1] = v26;
    sub_256A80CBC(v20, v32);
    sub_256A39DB4((uint64_t)v4);
    sub_256A80D20(v20);
  }
  sub_256A4A890();
}

uint64_t sub_256A80C78(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_256B3F300();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_256A80CBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AJAXConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_256A80D20(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AJAXConfiguration();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_256A80D7C()
{
}

uint64_t sub_256A80D94(void *a1)
{
  return AJAXConfiguration.encode(to:)(a1);
}

id sub_256A80DAC()
{
  id v0 = objc_allocWithZone(MEMORY[0x263EFFA48]);
  id result = sub_256A8315C(0xD00000000000001BLL, 0x8000000256B48A30);
  if (!result)
  {
    sub_256A46E50();
    swift_allocError();
    *(void *)uint64_t v2 = 0xD000000000000037;
    *(void *)(v2 + 8) = 0x8000000256B48A50;
    *(unsigned char *)(v2 + 16) = 0;
    return (id)swift_willThrow();
  }
  return result;
}

void overrideAJAX(configuration:forResource:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_256A4A878();
  a19 = v22;
  a20 = v23;
  uint64_t v25 = v24;
  uint64_t v26 = sub_256A39D2C(&qword_26B2B3080);
  uint64_t v27 = sub_256A4AB38(v26);
  MEMORY[0x270FA5388](v27);
  uint64_t v29 = (char *)&a9 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AJAXConfiguration();
  sub_256A6E624();
  MEMORY[0x270FA5388](v30);
  sub_256A84158();
  sub_256A81100(v25, (uint64_t)v29);
  sub_256A84024((uint64_t)v29);
  if (v31)
  {
    sub_256A8399C((uint64_t)v29, &qword_26B2B3080);
    id v32 = sub_256A80DAC();
    if (!v20)
    {
      uint64_t v33 = v32;
      uint64_t v34 = (void *)sub_256B3F690();
      objc_msgSend(v33, sel_removeObjectForKey_, v34);
    }
  }
  else
  {
    sub_256A81168((uint64_t)v29, v21);
    sub_256B3F180();
    sub_256A84188();
    sub_256B3F170();
    sub_256A81970(&qword_269F79AC0);
    uint64_t v35 = sub_256B3F160();
    if (v20)
    {
      sub_256A80D20(v21);
      swift_release();
    }
    else
    {
      uint64_t v37 = v35;
      unint64_t v38 = v36;
      swift_release();
      uint64_t v39 = sub_256B3F6F0();
      uint64_t v40 = sub_256A4AB38(v39);
      MEMORY[0x270FA5388](v40);
      sub_256A84170();
      sub_256B3F6E0();
      sub_256B3F6C0();
      uint64_t v42 = v41;
      id v43 = sub_256A80DAC();
      if (v42)
      {
        uint64_t v44 = sub_256B3F690();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v44 = 0;
      }
      uint64_t v45 = (void *)sub_256B3F690();
      objc_msgSend(v43, sel_setObject_forKey_, v44, v45);

      swift_unknownObjectRelease();
      sub_256A46DF8(v37, v38);
      sub_256A80D20(v21);
    }
  }
  sub_256A4A890();
}

uint64_t sub_256A81100(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_256A39D2C(&qword_26B2B3080);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_256A81168(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AJAXConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id ajaxConfiguration(forResource:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = sub_256A39D2C(&qword_26B2B3080);
  uint64_t v7 = sub_256A4AB38(v6);
  MEMORY[0x270FA5388](v7);
  sub_256A4A7E4();
  id result = overriddenAJAXConfiguration(forResource:)(v3);
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for AJAXConfiguration();
    sub_256A84024(v3);
    if (v10)
    {
      sub_256A8399C(v3, &qword_26B2B3080);
      return (id)defaultAJAXConfirguration(for:)(a1, a2);
    }
    else
    {
      sub_256A81168(v3, a2);
      return (id)sub_256A46F7C(a2, 0, 1, v9);
    }
  }
  return result;
}

id overriddenAJAXConfiguration(forResource:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = type metadata accessor for AJAXConfiguration();
  sub_256A6E624();
  MEMORY[0x270FA5388](v5);
  sub_256A4A7E4();
  id result = sub_256A80DAC();
  if (!v1)
  {
    uint64_t v7 = result;
    uint64_t v8 = (void *)sub_256B3F690();
    id v9 = objc_msgSend(v7, sel_stringForKey_, v8);

    if (v9)
    {
      unint64_t v10 = sub_256B3F6B0();
      unint64_t v12 = v11;

      sub_256B3F150();
      sub_256A84188();
      sub_256B3F140();
      uint64_t v13 = sub_256A81454(v10, v12);
      unint64_t v15 = v14;
      sub_256A81970(&qword_269F79AC8);
      sub_256B3F130();
      sub_256A46DF8(v13, v15);
      swift_release();
      sub_256A81168(v2, a1);
      uint64_t v16 = a1;
      uint64_t v17 = 0;
    }
    else
    {
      uint64_t v16 = a1;
      uint64_t v17 = 1;
    }
    return (id)sub_256A46F7C(v16, v17, 1, v4);
  }
  return result;
}

uint64_t sub_256A81454(unint64_t a1, unint64_t a2)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  unint64_t v37 = a1;
  unint64_t v38 = a2;
  *(void *)&long long v41 = a1;
  *((void *)&v41 + 1) = a2;
  swift_bridgeObjectRetain();
  sub_256A39D2C(&qword_269F79B00);
  if (swift_dynamicCast())
  {
    sub_256A3A540(v39, (uint64_t)&v42);
    sub_256A39D70(&v42, v44);
    sub_256B3F220();
    swift_bridgeObjectRelease();
    v39[0] = v41;
    sub_256A39DB4((uint64_t)&v42);
    return *(void *)&v39[0];
  }
  uint64_t v40 = 0;
  memset(v39, 0, sizeof(v39));
  sub_256A8399C((uint64_t)v39, &qword_269F79B08);
  unint64_t v2 = v37;
  uint64_t v3 = v38;
  if ((v38 & 0x1000000000000000) == 0)
  {
    if ((v38 & 0x2000000000000000) != 0)
    {
      uint64_t v42 = v37;
      uint64_t v43 = v38 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v6 = (char *)&v42 + (HIBYTE(v38) & 0xF);
      uint64_t v7 = &v42;
    }
    else
    {
      if ((v37 & 0x1000000000000000) != 0)
      {
        uint64_t v4 = (v38 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v5 = v37 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v4 = sub_256B3FBE0();
      }
      if (v4) {
        uint64_t v6 = (char *)(v4 + v5);
      }
      else {
        uint64_t v6 = 0;
      }
      uint64_t v7 = (uint64_t *)v4;
    }
    uint64_t v8 = MEMORY[0x25A2AAC10](v7, v6);
    unint64_t v10 = v9;
    if (v9 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(void *)&v39[0] = v8;
      *((void *)&v39[0] + 1) = v10;
      return *(void *)&v39[0];
    }
    unint64_t v2 = v37;
    uint64_t v3 = v38;
    if ((v38 & 0x1000000000000000) == 0) {
      goto LABEL_14;
    }
LABEL_69:
    uint64_t v11 = sub_256B3F780();
    goto LABEL_17;
  }
LABEL_68:
  uint64_t v8 = 0;
  unint64_t v10 = 0xF000000000000000;
  if ((v3 & 0x1000000000000000) != 0) {
    goto LABEL_69;
  }
LABEL_14:
  if ((v3 & 0x2000000000000000) != 0) {
    uint64_t v11 = HIBYTE(v3) & 0xF;
  }
  else {
    uint64_t v11 = v2 & 0xFFFFFFFFFFFFLL;
  }
LABEL_17:
  *(void *)&v39[0] = MEMORY[0x25A2AABF0](v11);
  *((void *)&v39[0] + 1) = v12;
  MEMORY[0x270FA5388](*(void *)&v39[0]);
  v32[2] = &v37;
  unint64_t v13 = (unint64_t)sub_256A83A48((void *(*)(uint64_t *__return_ptr, char *, char *))sub_256A83F90, (uint64_t)v32);
  uint64_t v16 = *((void *)&v39[0] + 1) >> 62;
  uint64_t v17 = v13;
  unint64_t v19 = v18;
  unint64_t v20 = v14;
  uint64_t v3 = BYTE14(v39[0]);
  switch(*((void *)&v39[0] + 1) >> 62)
  {
    case 1:
      LODWORD(v21) = DWORD1(v39[0]) - LODWORD(v39[0]);
      if (__OFSUB__(DWORD1(v39[0]), v39[0])) {
        goto LABEL_72;
      }
      uint64_t v21 = (int)v21;
LABEL_23:
      if (v15 != v21)
      {
        if (v16)
        {
          if (v16 == 1) {
            uint64_t v3 = *(uint64_t *)&v39[0] >> 32;
          }
          else {
            uint64_t v3 = *(void *)(*(void *)&v39[0] + 24);
          }
        }
LABEL_60:
        if (v3 < v15)
        {
          __break(1u);
LABEL_72:
          __break(1u);
LABEL_73:
          __break(1u);
        }
        sub_256B3F370();
LABEL_62:
        swift_bridgeObjectRelease();
        goto LABEL_63;
      }
LABEL_29:
      if ((v19 & 0x2000000000000000) != 0) {
        unint64_t v25 = HIBYTE(v19) & 0xF;
      }
      else {
        unint64_t v25 = v13 & 0xFFFFFFFFFFFFLL;
      }
      *(void *)((char *)&v41 + 7) = 0;
      *(void *)&long long v41 = 0;
      if (4 * v25 == v14 >> 14) {
        goto LABEL_58;
      }
      unint64_t v33 = v10;
      LOBYTE(v26) = 0;
      uint64_t v27 = (v13 >> 59) & 1;
      if ((v19 & 0x1000000000000000) == 0) {
        LOBYTE(v27) = 1;
      }
      uint64_t v28 = 4 << v27;
      uint64_t v36 = v19 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v34 = v8;
      uint64_t v35 = (v19 & 0xFFFFFFFFFFFFFFFLL) + 32;
      break;
    case 2:
      uint64_t v23 = *(void *)(*(void *)&v39[0] + 16);
      uint64_t v22 = *(void *)(*(void *)&v39[0] + 24);
      BOOL v24 = __OFSUB__(v22, v23);
      uint64_t v21 = v22 - v23;
      if (!v24) {
        goto LABEL_23;
      }
      goto LABEL_73;
    case 3:
      if (!v15) {
        goto LABEL_29;
      }
      uint64_t v3 = 0;
      goto LABEL_60;
    default:
      uint64_t v21 = BYTE14(v39[0]);
      goto LABEL_23;
  }
  do
  {
    unint64_t v2 = v20;
    if ((v20 & 0xC) == v28) {
      unint64_t v2 = sub_256B21894(v20, v17, v19);
    }
    unint64_t v29 = v2 >> 16;
    if (v2 >> 16 >= v25)
    {
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
      goto LABEL_68;
    }
    if ((v19 & 0x1000000000000000) != 0)
    {
      unint64_t v2 = sub_256B3F7C0();
      char v30 = v2;
    }
    else if ((v19 & 0x2000000000000000) != 0)
    {
      uint64_t v42 = v17;
      uint64_t v43 = v36;
      char v30 = *((unsigned char *)&v42 + v29);
    }
    else
    {
      unint64_t v2 = v35;
      if ((v17 & 0x1000000000000000) == 0) {
        unint64_t v2 = sub_256B3FBE0();
      }
      char v30 = *(unsigned char *)(v2 + v29);
    }
    if ((v20 & 0xC) == v28)
    {
      unint64_t v2 = sub_256B21894(v20, v17, v19);
      unint64_t v20 = v2;
      if ((v19 & 0x1000000000000000) == 0)
      {
LABEL_47:
        unint64_t v20 = (v20 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_52;
      }
    }
    else if ((v19 & 0x1000000000000000) == 0)
    {
      goto LABEL_47;
    }
    if (v25 <= v20 >> 16) {
      goto LABEL_67;
    }
    unint64_t v2 = sub_256B3F790();
    unint64_t v20 = v2;
LABEL_52:
    *((unsigned char *)&v41 + v26) = v30;
    unsigned int v26 = v26 + 1;
    if ((v26 >> 8)) {
      goto LABEL_66;
    }
    BYTE14(v41) = v26;
    if (v26 == 14)
    {
      uint64_t v42 = v41;
      LODWORD(v43) = DWORD2(v41);
      WORD2(v43) = WORD6(v41);
      sub_256B3F390();
      LOBYTE(v26) = 0;
      BYTE14(v41) = 0;
    }
  }
  while (4 * v25 != v20 >> 14);
  uint64_t v8 = v34;
  unint64_t v10 = v33;
  if ((_BYTE)v26)
  {
    uint64_t v42 = v41;
    LODWORD(v43) = DWORD2(v41);
    WORD2(v43) = WORD6(v41);
    sub_256B3F390();
    sub_256A83FAC(v8, v10);
    goto LABEL_62;
  }
LABEL_58:
  swift_bridgeObjectRelease();
  sub_256A83FAC(v8, v10);
LABEL_63:
  swift_bridgeObjectRelease();
  return *(void *)&v39[0];
}

uint64_t sub_256A81970(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for AJAXConfiguration();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_256A819B4(uint64_t *a1)
{
  uint64_t v1 = a1;
  sub_256A3A6A8(*a1, &v48);
  uint64_t v2 = v49;
  sub_256A8399C((uint64_t)&v48, &qword_269F78B20);
  if (v2)
  {
    sub_256A39D2C(&qword_269F79AE8);
    uint64_t v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_256B57080;
    sub_256A39D2C(&qword_269F78B30);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_256B570A0;
    *(void *)(inited + 32) = 1953722211;
    *(void *)(inited + 40) = 0xE400000000000000;
    sub_256A39D2C(&qword_269F79AF0);
    uint64_t v5 = swift_initStackObject();
    *(_OWORD *)(v5 + 16) = xmmword_256B57090;
    *(void *)(v5 + 32) = 0x6C62616568636163;
    *(void *)(v5 + 40) = 0xE900000000000065;
    uint64_t v6 = MEMORY[0x263F8D4F8];
    *(unsigned char *)(v5 + 48) = 1;
    *(void *)(v5 + 72) = v6;
    *(void *)(v5 + 80) = 0xD000000000000012;
    *(void *)(v5 + 88) = 0x8000000256B48AF0;
    *(unsigned char *)(v5 + 96) = 0;
    *(void *)(v5 + 120) = v6;
    *(void *)(v5 + 128) = 0xD000000000000013;
    *(void *)(v5 + 136) = 0x8000000256B48B10;
    *(unsigned char *)(v5 + 144) = 0;
    *(void *)(v5 + 168) = v6;
    strcpy((char *)(v5 + 176), "onDeviceMemory");
    *(void *)(v5 + 216) = MEMORY[0x263F8D6C8];
    *(unsigned char *)(v5 + 191) = -18;
    *(void *)(v5 + 192) = 0;
    uint64_t v7 = MEMORY[0x263F8D310];
    *(void *)(inited + 48) = sub_256B3F600();
    *(void *)(inited + 56) = 0xD000000000000011;
    *(void *)(inited + 64) = 0x8000000256B48B30;
    uint64_t v8 = swift_initStackObject();
    *(_OWORD *)(v8 + 16) = xmmword_256B57080;
    *(void *)(v8 + 32) = 25705;
    *(void *)(v8 + 40) = 0xE200000000000000;
    *(void *)(v8 + 72) = v7;
    *(void *)(v8 + 48) = 2019650145;
    *(void *)(v8 + 56) = 0xE400000000000000;
    *(void *)(inited + 72) = sub_256B3F600();
    sub_256A39D2C(&qword_269F78B10);
    *(void *)(v3 + 32) = sub_256B3F600();
    uint64_t v49 = sub_256A39D2C(&qword_269F79AF8);
    *(void *)&long long v48 = v3;
    return sub_256A38E10((uint64_t)&v48, 0xD000000000000012, 0x8000000256B48AD0);
  }
  uint64_t v10 = *v1;
  uint64_t v11 = *v1 + 64;
  uint64_t v12 = 1 << *(unsigned char *)(*v1 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(*v1 + 64);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v16 = 0;
  uint64_t v43 = v11;
  uint64_t v44 = v10;
  long long v41 = v1;
  int64_t v42 = v15;
  while (v14)
  {
    unint64_t v17 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
    unint64_t v18 = v17 | (v16 << 6);
LABEL_26:
    uint64_t v22 = *v1;
    if (*(void *)(*v1 + 16))
    {
      uint64_t v23 = (uint64_t *)(*(void *)(v10 + 48) + 16 * v18);
      uint64_t v25 = *v23;
      uint64_t v24 = v23[1];
      swift_bridgeObjectRetain();
      unint64_t v26 = sub_256A39CC8();
      if ((v27 & 1) != 0
        && (sub_256A49EDC(*(void *)(v22 + 56) + 32 * v26, (uint64_t)&v48),
            uint64_t v28 = sub_256A39D2C(&qword_269F78B10),
            (swift_dynamicCast() & 1) != 0))
      {
        uint64_t v47 = *(void *)&v46[0];
        sub_256A819B4(&v47);
        uint64_t v49 = v28;
        *(void *)&long long v48 = v47;
        sub_256A3A530(&v48, v46);
        swift_isUniquelyReferenced_nonNull_native();
        uint64_t v29 = *v1;
        uint64_t v45 = (void *)*v1;
        *uint64_t v1 = 0x8000000000000000;
        unint64_t v30 = sub_256A39CC8();
        if (__OFADD__(*(void *)(v29 + 16), (v31 & 1) == 0)) {
          goto LABEL_42;
        }
        unint64_t v32 = v30;
        char v33 = v31;
        sub_256A39D2C((uint64_t *)&unk_269F78D00);
        if (sub_256B3FC00())
        {
          unint64_t v34 = sub_256A39CC8();
          if ((v33 & 1) != (v35 & 1)) {
            goto LABEL_45;
          }
          unint64_t v32 = v34;
        }
        if (v33)
        {
          uint64_t v36 = (_OWORD *)(v45[7] + 32 * v32);
          sub_256A39DB4((uint64_t)v36);
          sub_256A3A530(v46, v36);
        }
        else
        {
          v45[(v32 >> 6) + 8] |= 1 << v32;
          unint64_t v37 = (void *)(v45[6] + 16 * v32);
          *unint64_t v37 = v25;
          v37[1] = v24;
          sub_256A3A530(v46, (_OWORD *)(v45[7] + 32 * v32));
          uint64_t v38 = v45[2];
          BOOL v39 = __OFADD__(v38, 1);
          uint64_t v40 = v38 + 1;
          if (v39) {
            goto LABEL_43;
          }
          v45[2] = v40;
          swift_bridgeObjectRetain();
        }
        uint64_t v1 = v41;
        *long long v41 = (uint64_t)v45;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v11 = v43;
        uint64_t v10 = v44;
        int64_t v15 = v42;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
  }
  int64_t v19 = v16 + 1;
  if (__OFADD__(v16, 1))
  {
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  if (v19 >= v15) {
    return swift_release();
  }
  unint64_t v20 = *(void *)(v11 + 8 * v19);
  ++v16;
  if (v20) {
    goto LABEL_25;
  }
  int64_t v16 = v19 + 1;
  if (v19 + 1 >= v15) {
    return swift_release();
  }
  unint64_t v20 = *(void *)(v11 + 8 * v16);
  if (v20) {
    goto LABEL_25;
  }
  int64_t v16 = v19 + 2;
  if (v19 + 2 >= v15) {
    return swift_release();
  }
  unint64_t v20 = *(void *)(v11 + 8 * v16);
  if (v20) {
    goto LABEL_25;
  }
  int64_t v16 = v19 + 3;
  if (v19 + 3 >= v15) {
    return swift_release();
  }
  unint64_t v20 = *(void *)(v11 + 8 * v16);
  if (v20) {
    goto LABEL_25;
  }
  int64_t v16 = v19 + 4;
  if (v19 + 4 >= v15) {
    return swift_release();
  }
  unint64_t v20 = *(void *)(v11 + 8 * v16);
  if (v20)
  {
LABEL_25:
    unint64_t v14 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v16 << 6);
    goto LABEL_26;
  }
  int64_t v21 = v19 + 5;
  if (v21 >= v15) {
    return swift_release();
  }
  unint64_t v20 = *(void *)(v11 + 8 * v21);
  if (v20)
  {
    int64_t v16 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v16 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v16 >= v15) {
      return swift_release();
    }
    unint64_t v20 = *(void *)(v11 + 8 * v16);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_44:
  __break(1u);
LABEL_45:
  uint64_t result = sub_256B3FEF0();
  __break(1u);
  return result;
}

void forceAJAX(configuration:forResourceBundle:)()
{
  sub_256A4A878();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v115 = v6;
  uint64_t v126 = *MEMORY[0x263EF8340];
  uint64_t v7 = sub_256A39D2C(&qword_26B2B3080);
  uint64_t v8 = sub_256A4AB38(v7);
  MEMORY[0x270FA5388](v8);
  sub_256A84148();
  uint64_t v116 = v9 - v10;
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v114 = (uint64_t)v100 - v13;
  MEMORY[0x270FA5388](v12);
  int64_t v15 = (char *)v100 - v14;
  uint64_t v16 = type metadata accessor for AJAXConfiguration();
  sub_256A6E624();
  MEMORY[0x270FA5388](v17);
  sub_256A84148();
  uint64_t v20 = v18 - v19;
  MEMORY[0x270FA5388](v21);
  sub_256A841D4();
  swift_allocObject();
  uint64_t v22 = CatalogClient.init()();
  uint64_t v23 = sub_256A3ECE4(v5, v3);
  if (v0) {
    goto LABEL_2;
  }
  uint64_t v24 = (void *)v23;
  long long v109 = v15;
  uint64_t v112 = v5;
  uint64_t v113 = v22;
  uint64_t v110 = v20;
  uint64_t v111 = v1;
  ResourceBundleContainer.toResourceBundle()();

  if (!v121)
  {
    sub_256A8399C((uint64_t)&v120, &qword_26B2B5C08);
    unint64_t v122 = 0;
    unint64_t v123 = 0xE000000000000000;
    sub_256B3FB70();
    swift_bridgeObjectRelease();
    unint64_t v122 = 0xD000000000000010;
    unint64_t v123 = 0x8000000256B489B0;
    sub_256B3F760();
    sub_256A84120();
    unint64_t v27 = v122;
    unint64_t v28 = v123;
    sub_256A46E50();
    uint64_t v29 = sub_256A6E4C0();
    *unint64_t v30 = v27;
    v30[1] = v28;
    sub_256A7A72C(v29, (uint64_t)v30);
LABEL_2:
    swift_release();
    goto LABEL_16;
  }
  sub_256A3A540(&v120, (uint64_t)&v122);
  uint64_t v25 = (objc_class *)type metadata accessor for ResourceBundleContainer();
  sub_256A39E54((uint64_t)&v122, (uint64_t)&v120);
  static ResourceBundleContainer.from(resourceBundle:)();
  char v31 = v26;
  sub_256A8399C((uint64_t)&v120, &qword_26B2B5C08);
  uint64_t v32 = OBJC_IVAR____TtC12ModelCatalog23ResourceBundleContainer_assetBacked;
  if (v31[OBJC_IVAR____TtC12ModelCatalog23ResourceBundleContainer_assetBacked])
  {
    *(void *)&long long v120 = 0;
    *((void *)&v120 + 1) = 0xE000000000000000;
    sub_256B3FB70();
    sub_256B3F760();
    sub_256B3F760();
    long long v33 = v120;
    sub_256A46E50();
    uint64_t v34 = sub_256A6E4C0();
    *char v35 = v33;
    sub_256A7A72C(v34, (uint64_t)v35);

LABEL_14:
    swift_release();
LABEL_15:
    sub_256A39DB4((uint64_t)&v122);
    goto LABEL_16;
  }
  uint64_t v36 = self;
  unint64_t v37 = (uint64_t *)&v31[OBJC_IVAR____TtC12ModelCatalog23ResourceBundleContainer_resourceBundleData];
  unint64_t v108 = v31;
  uint64_t v38 = *(void *)&v31[OBJC_IVAR____TtC12ModelCatalog23ResourceBundleContainer_resourceBundleData];
  unint64_t v39 = v37[1];
  sub_256A3E7E8(*v37, v39);
  uint64_t v40 = (void *)sub_256B3F3B0();
  sub_256A46DF8(v38, v39);
  *(void *)&long long v120 = 0;
  id v107 = v36;
  id v41 = objc_msgSend(v36, sel_JSONObjectWithData_options_error_, v40, 0, &v120);

  if (!v41)
  {
    id v56 = (id)v120;
    sub_256B3F230();

    swift_willThrow();
LABEL_18:
    swift_release();
    sub_256A840C4();
    goto LABEL_15;
  }
  id v42 = (id)v120;
  sub_256B3FAD0();
  swift_unknownObjectRelease();
  sub_256A39D2C(&qword_269F78B10);
  if (!swift_dynamicCast())
  {
    sub_256A46E50();
    uint64_t v57 = sub_256A6E4C0();
    *uint64_t v58 = 0xD00000000000001CLL;
    v58[1] = 0x8000000256B489D0;
    sub_256A7A72C(v57, (uint64_t)v58);
    sub_256A840C4();
    goto LABEL_14;
  }
  uint64_t v117 = v118;
  sub_256A819B4(&v117);
  uint64_t v43 = sub_256B3F5D0();
  swift_bridgeObjectRelease();
  *(void *)&long long v120 = 0;
  uint64_t v44 = (void *)v43;
  id v45 = objc_msgSend(v107, sel_dataWithJSONObject_options_error_, v43, 0, &v120);

  id v46 = (id)v120;
  if (!v45)
  {
    int64_t v59 = v46;
    sub_256B3F230();

    swift_willThrow();
    goto LABEL_18;
  }
  uint64_t v47 = sub_256B3F3C0();
  long long v48 = v45;
  uint64_t v49 = v47;
  unint64_t v51 = v50;

  uint64_t v52 = *(void *)&v108[OBJC_IVAR____TtC12ModelCatalog23ResourceBundleContainer_resourceBundleType + 8];
  id v107 = *(id *)&v108[OBJC_IVAR____TtC12ModelCatalog23ResourceBundleContainer_resourceBundleType];
  LODWORD(v106) = v108[v32];
  unint64_t v53 = v51;
  uint64_t v54 = v49;
  objc_allocWithZone(v25);
  sub_256A3E7E8(v49, v53);
  swift_bridgeObjectRetain();
  id v55 = ResourceBundleContainer.init(resourceBundleData:resourceBundleType:assetBacked:)(v49, v53, (uint64_t)v107, v52, (char)v106);
  ResourceBundleContainer.toResourceBundle()();
  if (!v119)
  {
    sub_256A8399C((uint64_t)&v118, &qword_26B2B5C08);
    sub_256A46E50();
    uint64_t v60 = sub_256A6E4C0();
    *uint64_t v61 = 0xD000000000000030;
    v61[1] = 0x8000000256B489F0;
    sub_256A7A72C(v60, (uint64_t)v61);

    swift_release();
    sub_256A840C4();
    sub_256A46DF8(v49, v53);
    goto LABEL_15;
  }
  sub_256A3A540(&v118, (uint64_t)&v120);

  uint64_t v62 = v115;
  sub_256A402A4((uint64_t)&v120);
  uint64_t v63 = (uint64_t)v109;
  sub_256A81100(v62, (uint64_t)v109);
  sub_256A84024(v63);
  if (v64)
  {
    sub_256A39DB4((uint64_t)&v120);
    sub_256A46DF8(v54, v53);
    swift_release();
    sub_256A840C4();

    sub_256A8399C(v63, &qword_26B2B3080);
    goto LABEL_15;
  }
  id v101 = v55;
  uint64_t v102 = v54;
  unint64_t v103 = v53;
  uint64_t v112 = 0;
  uint64_t v65 = v111;
  sub_256A81168(v63, v111);
  uint64_t v66 = v124;
  uint64_t v67 = v125;
  sub_256A39D70(&v122, v124);
  uint64_t v68 = (*(uint64_t (**)(uint64_t, uint64_t))(v67 + 40))(v66, v67);
  long long v109 = *(char **)(v68 + 16);
  v100[1] = v68;
  if (!v109)
  {
LABEL_41:
    swift_release();

    sub_256A840C4();
    sub_256A841A0();
    swift_bridgeObjectRelease();
    sub_256A39DB4((uint64_t)&v120);
    sub_256A80D20(v65);
    goto LABEL_15;
  }
  uint64_t v69 = (void *)(v68 + 32);
  uint64_t v115 = 1;
  unint64_t v104 = (unint64_t)"urce bundle data";
  uint64_t v105 = 0x8000000256B48A30;
  uint64_t v70 = v114;
  while (1)
  {
    sub_256A80CBC(v65, v70);
    sub_256A46F7C(v70, 0, 1, v16);
    uint64_t v72 = v69[3];
    uint64_t v71 = v69[4];
    sub_256A39D70(v69, v72);
    (*(void (**)(uint64_t, uint64_t))(v71 + 24))(v72, v71);
    uint64_t v74 = v73;
    uint64_t v75 = v116;
    sub_256A81100(v70, v116);
    sub_256A84024(v75);
    if (!v64) {
      break;
    }
    sub_256A8399C(v75, &qword_26B2B3080);
    objc_allocWithZone(MEMORY[0x263EFFA48]);
    id v76 = sub_256A8315C(0xD00000000000001BLL, v105);
    if (!v76)
    {
      id v107 = v74;
      sub_256A46E50();
      uint64_t v96 = sub_256A6E4C0();
      sub_256A84044(v96, v97, (uint64_t)"Unable to access \"com.apple.modelcatalog.ajax\" defaults");
      goto LABEL_45;
    }
    uint64_t v77 = v76;
    uint64_t v78 = (void *)sub_256B3F690();
    objc_msgSend(v77, sel_removeObjectForKey_, v78);

    uint64_t v79 = v70;
LABEL_37:
    sub_256A8399C(v79, &qword_26B2B3080);
    swift_bridgeObjectRelease();
    uint64_t v95 = v115;
    uint64_t v65 = v111;
    if (v109 == (char *)v115) {
      goto LABEL_41;
    }
    v69 += 5;
    ++v115;
    if (__OFADD__(v95, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
  }
  id v107 = v74;
  sub_256A81168(v75, v110);
  sub_256B3F180();
  sub_256A84188();
  sub_256B3F170();
  sub_256A81970(&qword_269F79AC0);
  uint64_t v80 = v112;
  uint64_t v81 = sub_256B3F160();
  uint64_t v112 = v80;
  if (v80)
  {
    sub_256A80D20(v110);
    swift_release();
    goto LABEL_45;
  }
  uint64_t v83 = v81;
  unint64_t v84 = v82;
  swift_release();
  uint64_t v85 = sub_256B3F6F0();
  uint64_t v106 = v100;
  uint64_t v86 = sub_256A4AB38(v85);
  MEMORY[0x270FA5388](v86);
  sub_256A840F8();
  uint64_t v87 = v83;
  unint64_t v88 = v84;
  sub_256B3F6C0();
  uint64_t v90 = v89;
  objc_allocWithZone(MEMORY[0x263EFFA48]);
  id v91 = sub_256A8315C(0xD00000000000001BLL, v104 | 0x8000000000000000);
  if (v91)
  {
    uint64_t v92 = v91;
    if (v90)
    {
      uint64_t v93 = sub_256B3F690();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v93 = 0;
    }
    uint64_t v94 = (void *)sub_256B3F690();
    objc_msgSend(v92, sel_setObject_forKey_, v93, v94);

    swift_unknownObjectRelease();
    sub_256A46DF8(v87, v88);
    sub_256A80D20(v110);
    uint64_t v70 = v114;
    uint64_t v79 = v114;
    goto LABEL_37;
  }
  sub_256A46E50();
  uint64_t v98 = sub_256A6E4C0();
  sub_256A84044(v98, v99, (uint64_t)"Unable to access \"com.apple.modelcatalog.ajax\" defaults");
  sub_256A80D20(v110);
  swift_bridgeObjectRelease();
  sub_256A46DF8(v83, v88);
LABEL_45:
  sub_256A8399C(v114, &qword_26B2B3080);
  sub_256A840C4();
  swift_release();

  swift_bridgeObjectRelease();
  sub_256A841A0();
  swift_bridgeObjectRelease();
  sub_256A39DB4((uint64_t)&v120);
  sub_256A80D20(v111);
  sub_256A39DB4((uint64_t)&v122);
LABEL_16:
  sub_256A4A890();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> unforceAJAX(forResourceBundle:)(Swift::String forResourceBundle)
{
  sub_256A4A878();
  uint64_t v3 = type metadata accessor for AJAXConfiguration();
  sub_256A6E624();
  MEMORY[0x270FA5388](v4);
  sub_256A4A500();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = sub_256A39D2C(&qword_26B2B3080);
  uint64_t v9 = sub_256A4AB38(v8);
  MEMORY[0x270FA5388](v9);
  sub_256A84148();
  uint64_t v12 = v10 - v11;
  MEMORY[0x270FA5388](v13);
  sub_256A841D4();
  swift_allocObject();
  uint64_t v14 = CatalogClient.init()();
  uint64_t v15 = sub_256A841C0();
  uint64_t v17 = sub_256A3ECE4(v15, v16);
  if (v1) {
    goto LABEL_2;
  }
  uint64_t v18 = (void *)v17;
  ResourceBundleContainer.toResourceBundle()();

  if (!v62)
  {
    sub_256A8399C((uint64_t)&v61, &qword_26B2B5C08);
    unint64_t v64 = 0;
    unint64_t v65 = 0xE000000000000000;
    sub_256B3FB70();
    swift_bridgeObjectRelease();
    unint64_t v64 = 0xD000000000000010;
    unint64_t v65 = 0x8000000256B489B0;
    sub_256B3F760();
    sub_256A84120();
    unint64_t v21 = v64;
    unint64_t v22 = v65;
    sub_256A46E50();
    uint64_t v23 = sub_256A6E4C0();
    *uint64_t v24 = v21;
    v24[1] = v22;
    sub_256A7A72C(v23, (uint64_t)v24);
LABEL_2:
    swift_release();
    goto LABEL_26;
  }
  sub_256A3A540(&v61, (uint64_t)&v64);
  uint64_t v19 = sub_256A841C0();
  void v52[2] = v14;

  uint64_t v25 = v66;
  uint64_t v26 = v67;
  sub_256A39D70(&v64, v66);
  uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 40))(v25, v26);
  uint64_t v60 = *(void *)(v27 + 16);
  if (!v60) {
    goto LABEL_25;
  }
  uint64_t v68 = v7;
  v52[1] = v27;
  uint64_t v28 = v27 + 32;
  uint64_t v29 = 1;
  unint64_t v53 = (unint64_t)"urce bundle data";
  uint64_t v54 = 0x8000000256B48A30;
  uint64_t v59 = v2;
  while (1)
  {
    sub_256A39E54(v28, (uint64_t)&v61);
    sub_256A46F7C(v2, 1, 1, v3);
    uint64_t v30 = v62;
    uint64_t v31 = v63;
    sub_256A39D70(&v61, v62);
    uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 24))(v30, v31);
    sub_256A81100(v2, v12);
    sub_256A84024(v12);
    if (v33)
    {
      sub_256A8399C(v12, &qword_26B2B3080);
      objc_allocWithZone(MEMORY[0x263EFFA48]);
      id v34 = sub_256A8315C(0xD00000000000001BLL, v54);
      if (!v34) {
        goto LABEL_22;
      }
      char v35 = v34;
      uint64_t v36 = (void *)sub_256B3F690();
      objc_msgSend(v35, sel_removeObjectForKey_, v36);

      sub_256A8399C(v2, &qword_26B2B3080);
      swift_bridgeObjectRelease();
      sub_256A39DB4((uint64_t)&v61);
      if (v60 == v29) {
        goto LABEL_25;
      }
      goto LABEL_19;
    }
    uint64_t v58 = v32;
    sub_256A81168(v12, v68);
    sub_256B3F180();
    sub_256A84188();
    sub_256B3F170();
    sub_256A81970(&qword_269F79AC0);
    uint64_t v37 = sub_256B3F160();
    unint64_t v39 = v38;
    uint64_t v40 = v37;
    swift_release();
    uint64_t v41 = sub_256B3F6F0();
    id v55 = v52;
    uint64_t v42 = sub_256A4AB38(v41);
    MEMORY[0x270FA5388](v42);
    sub_256A840F8();
    uint64_t v56 = v40;
    unint64_t v57 = v39;
    sub_256B3F6C0();
    uint64_t v44 = v43;
    objc_allocWithZone(MEMORY[0x263EFFA48]);
    id v45 = sub_256A8315C(0xD00000000000001BLL, v53 | 0x8000000000000000);
    if (!v45) {
      break;
    }
    id v46 = v45;
    if (v44)
    {
      uint64_t v47 = sub_256B3F690();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v47 = 0;
    }
    long long v48 = (void *)sub_256B3F690();
    objc_msgSend(v46, sel_setObject_forKey_, v47, v48);

    swift_unknownObjectRelease();
    sub_256A46DF8(v56, v57);
    sub_256A80D20(v68);
    sub_256A8399C(v59, &qword_26B2B3080);
    swift_bridgeObjectRelease();
    sub_256A39DB4((uint64_t)&v61);
    if (v60 == v29) {
      goto LABEL_25;
    }
    uint64_t v2 = v59;
LABEL_19:
    v28 += 40;
    if (__OFADD__(v29++, 1))
    {
      __break(1u);
LABEL_22:
      sub_256A46E50();
      sub_256A6E4C0();
      sub_256A84094(v50, (uint64_t)"Unable to access \"com.apple.modelcatalog.ajax\" defaults");
      goto LABEL_24;
    }
  }
  sub_256A46E50();
  sub_256A6E4C0();
  sub_256A84094(v51, (uint64_t)"Unable to access \"com.apple.modelcatalog.ajax\" defaults");
  sub_256A80D20(v68);
  swift_bridgeObjectRelease();
  sub_256A46DF8(v56, v57);
  uint64_t v2 = v59;
LABEL_24:
  sub_256A8399C(v2, &qword_26B2B3080);
  swift_bridgeObjectRelease();
  sub_256A39DB4((uint64_t)&v61);
LABEL_25:
  swift_bridgeObjectRelease();
  swift_release();
  sub_256A39DB4((uint64_t)&v64);
LABEL_26:
  sub_256A4A890();
}

id sub_256A8315C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = (void *)sub_256B3F690();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = 0;
  }
  id v4 = objc_msgSend(v2, sel_initWithSuiteName_, v3);

  return v4;
}

uint64_t *initializeBufferWithCopyOfBuffer for AJAXConfiguration(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_256B3F300();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (uint64_t *)((char *)a1 + v8);
    uint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (uint64_t *)((char *)a1 + v9);
    uint64_t v14 = (uint64_t *)((char *)a2 + v9);
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for AJAXConfiguration(uint64_t a1)
{
  uint64_t v2 = sub_256B3F300();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AJAXConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_256B3F300();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)(a1 + v8);
  uint64_t v13 = (void *)(a2 + v8);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AJAXConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_256B3F300();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for AJAXConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_256B3F300();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for AJAXConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_256B3F300();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  *uint64_t v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AJAXConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_256A835E0);
}

uint64_t sub_256A835E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_256B3F300();
  sub_256A8407C();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return sub_256A480C4(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for AJAXConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_256A83684);
}

void sub_256A83684(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_256B3F300();
  sub_256A8407C();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    sub_256A46F7C(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
}

uint64_t sub_256A83710()
{
  uint64_t result = sub_256B3F300();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AJAXConfiguration.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x256A83874);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AJAXConfiguration.CodingKeys()
{
  return &type metadata for AJAXConfiguration.CodingKeys;
}

unint64_t sub_256A838B0()
{
  unint64_t result = qword_269F79AD0;
  if (!qword_269F79AD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79AD0);
  }
  return result;
}

unint64_t sub_256A83900()
{
  unint64_t result = qword_269F79AD8;
  if (!qword_269F79AD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79AD8);
  }
  return result;
}

unint64_t sub_256A83950()
{
  unint64_t result = qword_269F79AE0;
  if (!qword_269F79AE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79AE0);
  }
  return result;
}

uint64_t sub_256A8399C(uint64_t a1, uint64_t *a2)
{
  sub_256A39D2C(a2);
  sub_256A6E624();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

void *sub_256A839F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = a3;
  v6[1] = a4;
  v5[2] = v6;
  return sub_256A83DF0((void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_256A84004, (uint64_t)v5, a1, a2);
}

void *sub_256A83A48(void *(*a1)(uint64_t *__return_ptr, char *, char *), uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v4 = *v2;
  unint64_t v3 = v2[1];
  uint64_t v5 = v2;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)uint64_t v2 = xmmword_256B5EC20;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = v4 >> 32;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_11;
      }
      if (v11 < (int)v4) {
        goto LABEL_16;
      }
      if (sub_256B3F1A0() && __OFSUB__((int)v4, sub_256B3F1C0())) {
        goto LABEL_17;
      }
      sub_256B3F1D0();
      swift_allocObject();
      uint64_t v13 = sub_256B3F190();
      swift_release();
      uint64_t v9 = v13;
      uint64_t v11 = v4 >> 32;
LABEL_11:
      if (v11 < (int)v4)
      {
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
      }
      unint64_t result = sub_256A83E58((int)v4, v11, a1);
      unint64_t v12 = v9 | 0x4000000000000000;
      *uint64_t v5 = v4;
LABEL_13:
      v5[1] = v12;
      return result;
    case 2uLL:
      *(void *)&long long v14 = *v2;
      *((void *)&v14 + 1) = v3 & 0x3FFFFFFFFFFFFFFFLL;
      sub_256B3F320();
      unint64_t result = sub_256A83E58(*(void *)(v14 + 16), *(void *)(v14 + 24), a1);
      unint64_t v12 = *((void *)&v14 + 1) | 0x8000000000000000;
      uint64_t *v2 = v14;
      goto LABEL_13;
    case 3uLL:
      *(void *)((char *)&v14 + 7) = 0;
      *(void *)&long long v14 = 0;
      return sub_256A83F0C((uint64_t)&v14, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))a1, a2, 0);
    default:
      *(void *)&long long v14 = *v2;
      WORD4(v14) = v3;
      BYTE10(v14) = BYTE2(v3);
      BYTE11(v14) = BYTE3(v3);
      BYTE12(v14) = BYTE4(v3);
      BYTE13(v14) = BYTE5(v3);
      BYTE14(v14) = BYTE6(v3);
      unint64_t result = sub_256A83F0C((uint64_t)&v14, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))a1, a2, BYTE6(v3));
      unint64_t v8 = DWORD2(v14) | ((unint64_t)BYTE12(v14) << 32) | ((unint64_t)BYTE13(v14) << 40) | ((unint64_t)BYTE14(v14) << 48);
      uint64_t *v2 = v14;
      v2[1] = v8;
      return result;
  }
}

uint64_t sub_256A83CF4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    unint64_t result = 0;
LABEL_4:
    unint64_t v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    unint64_t result = sub_256B3F310();
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    unint64_t result = MEMORY[0x25A2AABA0]();
    unint64_t v5 = v8 | 0x8000000000000000;
  }
  else
  {
    unint64_t result = MEMORY[0x25A2AABC0]();
    unint64_t v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_256A83D6C(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    unint64_t result = sub_256B3FB80();
    if ((v1 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_256A83DF0(void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v6 = a4 - a3;
    uint64_t v7 = a3;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  unint64_t result = a1(&v9, v7, v6);
  if (!v4) {
    return (void *)v9;
  }
  return result;
}

char *sub_256A83E58(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  unint64_t result = (char *)sub_256B3F1A0();
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v8 = result;
  unint64_t result = (char *)sub_256B3F1C0();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v12 = sub_256B3F1B0();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  unint64_t result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

void *sub_256A83F0C(uint64_t a1, void *(*a2)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  unint64_t result = a2(&v6, a1, a1 + a4);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

void *sub_256A83F58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  unint64_t result = sub_256A839F0(a1, a2, *a3, a3[1]);
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
    a4[2] = v8;
    a4[3] = v9;
  }
  return result;
}

void *sub_256A83F90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_256A83F58(a1, a2, *(uint64_t **)(v3 + 16), a3);
}

uint64_t sub_256A83FAC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_256A46DF8(a1, a2);
  }
  return a1;
}

uint64_t sub_256A83FC0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_256A83D6C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_256A84004@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_256A83FC0(a1, a2);
}

uint64_t sub_256A84024(uint64_t a1)
{
  return sub_256A480C4(a1, 1, v1);
}

uint64_t sub_256A84044@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a2 = 0xD000000000000037;
  *(void *)(a2 + 8) = (a3 - 32) | 0x8000000000000000;
  *(unsigned char *)(a2 + 16) = 0;
  *(void *)(v3 - 264) = a1;
  return swift_willThrow();
}

uint64_t sub_256A84094@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a1 = 0xD000000000000037;
  *(void *)(a1 + 8) = (a2 - 32) | 0x8000000000000000;
  *(unsigned char *)(a1 + 16) = 0;
  return swift_willThrow();
}

void sub_256A840C4()
{
  uint64_t v2 = *(void **)(v0 - 296);
}

uint64_t sub_256A840DC()
{
  return v0;
}

uint64_t sub_256A840F8()
{
  return sub_256B3F6E0();
}

uint64_t sub_256A84120()
{
  return sub_256B3F760();
}

uint64_t sub_256A84188()
{
  return swift_allocObject();
}

uint64_t sub_256A841A0()
{
  uint64_t v2 = *(void *)(v0 - 344);
  unint64_t v3 = *(void *)(v0 - 336);
  return sub_256A46DF8(v2, v3);
}

uint64_t sub_256A841C0()
{
  return v0;
}

uint64_t sub_256A841D4()
{
  return type metadata accessor for CatalogClient();
}

uint64_t ResourceBundleIdentifier.init(stringLiteral:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t static ResourceConfiguration.== infix(_:_:)(uint64_t a1)
{
  uint64_t v2 = sub_256AA100C(a1);
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v7 = *(void *)(v5 + 32);
  uint64_t v8 = *(void *)(v5 + 40);
  uint64_t v70 = *(void **)(v5 + 48);
  int v69 = *(unsigned __int8 *)(v5 + 56);
  uint64_t v68 = *(void *)(v5 + 72);
  int v66 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v64 = *(void *)(v5 + 96);
  uint64_t v57 = *(void *)(v5 + 88);
  uint64_t v58 = *(void *)(v5 + 104);
  uint64_t v59 = *(void *)(v5 + 112);
  uint64_t v60 = *(void *)(v5 + 120);
  uint64_t v61 = *(void *)(v5 + 128);
  uint64_t v62 = *(void *)(v5 + 136);
  __int16 v63 = *(_WORD *)(v5 + 144);
  uint64_t v46 = *(void *)(v5 + 152);
  uint64_t v48 = *(void *)(v5 + 160);
  uint64_t v44 = *(void *)(v5 + 168);
  uint64_t v42 = *(void *)(v5 + 176);
  uint64_t v10 = *(void *)(v4 + 16);
  uint64_t v9 = *(void *)(v4 + 24);
  uint64_t v12 = *(void *)(v4 + 32);
  uint64_t v11 = *(void *)(v4 + 40);
  uint64_t v13 = *(void **)(v4 + 48);
  BOOL v14 = v2 == *(void *)v4 && v3 == *(void *)(v4 + 8);
  int v15 = *(unsigned __int8 *)(v4 + 56);
  uint64_t v67 = *(void *)(v4 + 72);
  int v65 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v56 = *(void *)(v4 + 96);
  uint64_t v49 = *(void *)(v4 + 88);
  uint64_t v50 = *(void *)(v4 + 104);
  uint64_t v51 = *(void *)(v4 + 112);
  uint64_t v52 = *(void *)(v4 + 120);
  uint64_t v53 = *(void *)(v4 + 128);
  uint64_t v54 = *(void *)(v4 + 136);
  __int16 v55 = *(_WORD *)(v4 + 144);
  uint64_t v45 = *(void *)(v4 + 152);
  uint64_t v47 = *(void *)(v4 + 160);
  uint64_t v43 = *(void *)(v4 + 168);
  uint64_t v41 = *(void *)(v4 + 176);
  if (!v14)
  {
    sub_256B3FEA0();
    uint64_t result = sub_256AA01B8();
    if ((v17 & 1) == 0) {
      return result;
    }
  }
  if (v1 != v10 || v6 != v9)
  {
    sub_256B3FEA0();
    uint64_t result = sub_256AA01B8();
    if ((v19 & 1) == 0) {
      return result;
    }
  }
  if (v7 != v12 || v8 != v11)
  {
    sub_256B3FEA0();
    uint64_t result = sub_256AA01B8();
    if ((v21 & 1) == 0) {
      return result;
    }
  }
  sub_256A87844(v70, v13);
  uint64_t result = sub_256AA01B8();
  if (v22 & 1) == 0 || ((v69 ^ v15)) {
    return result;
  }
  sub_256A87910();
  if ((v23 & 1) == 0) {
    return 0;
  }
  uint64_t result = v68;
  if (v68)
  {
    if (!v67) {
      return 0;
    }
    sub_256A87E60(v68, v67);
    uint64_t result = sub_256AA01B8();
    if ((v24 & 1) == 0) {
      return result;
    }
  }
  else if (v67)
  {
    return result;
  }
  if ((v66 ^ v65)) {
    return result;
  }
  if (v64)
  {
    uint64_t v26 = v57;
    uint64_t v25 = v58;
    uint64_t v71 = v57;
    uint64_t v72 = v64;
    uint64_t v28 = v59;
    uint64_t v27 = v60;
    uint64_t v73 = v58;
    uint64_t v74 = v59;
    uint64_t v30 = v61;
    uint64_t v29 = v62;
    uint64_t v75 = v60;
    uint64_t v76 = v61;
    uint64_t v77 = v62;
    __int16 v31 = v63;
    __int16 v78 = v63;
    uint64_t v32 = v56;
    if (v56)
    {
      sub_256AA0544();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      static AssetSubscriptionInformation.== infix(_:_:)();
      char v34 = v33;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_256A54744(v57, v64);
      if ((v34 & 1) == 0) {
        return 0;
      }
      goto LABEL_30;
    }
    sub_256AA0544();
LABEL_39:
    uint64_t v71 = v26;
    uint64_t v72 = v64;
    uint64_t v73 = v25;
    uint64_t v74 = v28;
    uint64_t v75 = v27;
    uint64_t v76 = v30;
    uint64_t v77 = v29;
    __int16 v78 = v31;
    uint64_t v79 = v49;
    uint64_t v80 = v32;
    uint64_t v81 = v50;
    uint64_t v82 = v51;
    uint64_t v83 = v52;
    uint64_t v84 = v53;
    uint64_t v85 = v54;
    __int16 v86 = v55;
    sub_256A54690(v49, v32);
    sub_256A87A50(&v71);
    return 0;
  }
  __int16 v31 = v63;
  uint64_t v30 = v61;
  uint64_t v29 = v62;
  uint64_t v28 = v59;
  uint64_t v27 = v60;
  uint64_t v26 = v57;
  uint64_t v25 = v58;
  uint64_t v32 = v56;
  if (v56) {
    goto LABEL_39;
  }
LABEL_30:
  if (!v48)
  {
    if (v47) {
      return 0;
    }
LABEL_43:
    if (v44)
    {
      if (!v43) {
        return 0;
      }
      swift_bridgeObjectRetain();
      uint64_t v37 = swift_bridgeObjectRetain();
      char v38 = sub_256A87AE4(v37, v43);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v38 & 1) == 0) {
        return 0;
      }
    }
    else if (v43)
    {
      return 0;
    }
    if (v42)
    {
      if (!v41) {
        return 0;
      }
      swift_bridgeObjectRetain();
      uint64_t v39 = swift_bridgeObjectRetain();
      char v40 = sub_256A87BC0(v39, v41);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (v40 & 1) != 0;
    }
    return !v41;
  }
  if (!v47) {
    return 0;
  }
  if (v46 == v45 && v48 == v47) {
    goto LABEL_43;
  }
  sub_256B3FEA0();
  uint64_t result = sub_256AA01B8();
  if (v36) {
    goto LABEL_43;
  }
  return result;
}

void sub_256A84644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*vars8)(void *__return_ptr, unsigned char *);

  sub_256A8585C(a1, (uint64_t)DiffusionAdapterBase.init(configuration:), a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void sub_256A84670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*vars8)(void *__return_ptr, unsigned char *);

  sub_256A8585C(a1, (uint64_t)AssetBackedDiffusionAdapterBase.init(configuration:), a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void sub_256A8469C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*vars8)(void *__return_ptr, unsigned char *);

  sub_256A8585C(a1, (uint64_t)DiffusionModelBase.init(configuration:), a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void sub_256A846C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*vars8)(void *__return_ptr, unsigned char *);

  sub_256A8585C(a1, (uint64_t)AssetBackedDiffusionModelBase.init(configuration:), a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void sub_256A846F4()
{
}

void sub_256A8470C()
{
  sub_256A4A878();
  sub_256A9FF00(v3);
  sub_256A39D2C(&qword_26B2B5F28);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v4);
  sub_256A9FCD8();
  sub_256A9FC9C();
  if (!v0)
  {
    sub_256AA02B0();
    sub_256A9FC78();
    sub_256A9FE58();
    uint64_t v5 = v12[1];
    if (v12[0] == 19 && (sub_256AA0030(), v6) || (sub_256AA0014() & 1) != 0)
    {
      sub_256A9FECC();
    }
    else
    {
      sub_256A9FE38();
      sub_256AA0288();
      swift_bridgeObjectRelease();
      sub_256A546F8();
      sub_256A6E4C0();
      *uint64_t v7 = v2;
      v7[1] = v5;
      sub_256AA03C0();
      sub_256A6E450(v8, v9);
      sub_256A6DFC8((uint64_t)v12);
    }
    uint64_t v10 = sub_256A9FD28();
    v11(v10);
  }
  sub_256A39DB4(v1);
  sub_256AA0174();
  sub_256A4A890();
}

void sub_256A84874()
{
}

void sub_256A8488C()
{
  sub_256A4A878();
  sub_256A9FF00(v2);
  sub_256A39D2C(&qword_26B2B5F28);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v3);
  sub_256A9FCD8();
  sub_256A9FC9C();
  if (!v0)
  {
    sub_256AA02B0();
    sub_256A9FC78();
    sub_256A9FE58();
    if (v11 == 27 && (sub_256AA0030(), v4) || (sub_256AA02A0(), (sub_256AA0014() & 1) != 0))
    {
      sub_256A9FECC();
    }
    else
    {
      sub_256A9FE38();
      sub_256AA0288();
      swift_bridgeObjectRelease();
      sub_256A546F8();
      uint64_t v5 = sub_256A6E4C0();
      sub_256AA077C(v5, v6);
      sub_256AA03C0();
      sub_256A6E450(v7, v8);
      sub_256A6DFC8((uint64_t)&v11);
    }
    uint64_t v9 = sub_256A9FD28();
    v10(v9);
  }
  sub_256A39DB4(v1);
  sub_256AA0174();
  sub_256A4A890();
}

void sub_256A849E8()
{
}

void sub_256A84A00()
{
  sub_256A4A878();
  sub_256A9FF00(v2);
  sub_256A39D2C(&qword_26B2B5F28);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v3);
  sub_256A9FCD8();
  sub_256A9FC9C();
  if (!v0)
  {
    sub_256AA02B0();
    sub_256A9FC78();
    sub_256A9FE58();
    if (v11 == 22 && (sub_256AA0030(), v4) || (sub_256AA02A0(), (sub_256AA0014() & 1) != 0))
    {
      sub_256A9FECC();
    }
    else
    {
      sub_256A9FE38();
      sub_256AA0288();
      swift_bridgeObjectRelease();
      sub_256A546F8();
      uint64_t v5 = sub_256A6E4C0();
      sub_256AA077C(v5, v6);
      sub_256AA03C0();
      sub_256A6E450(v7, v8);
      sub_256A6DFC8((uint64_t)&v11);
    }
    uint64_t v9 = sub_256A9FD28();
    v10(v9);
  }
  sub_256A39DB4(v1);
  sub_256AA0174();
  sub_256A4A890();
}

void sub_256A84B5C()
{
}

void sub_256A84B74()
{
  sub_256A4A878();
  sub_256A9FF00(v3);
  sub_256A39D2C(&qword_26B2B5F28);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v4);
  sub_256A9FCD8();
  sub_256A9FC9C();
  if (!v0)
  {
    sub_256AA02B0();
    sub_256A9FC78();
    sub_256A9FE58();
    uint64_t v5 = v12[1];
    if (v12[0] == 19 && (sub_256AA0030(), v6) || (sub_256AA0014() & 1) != 0)
    {
      sub_256A9FECC();
    }
    else
    {
      sub_256A9FE38();
      sub_256AA0288();
      swift_bridgeObjectRelease();
      sub_256A546F8();
      sub_256A6E4C0();
      *uint64_t v7 = v2;
      v7[1] = v5;
      sub_256AA03C0();
      sub_256A6E450(v8, v9);
      sub_256A6DFC8((uint64_t)v12);
    }
    uint64_t v10 = sub_256A9FD28();
    v11(v10);
  }
  sub_256A39DB4(v1);
  sub_256AA0174();
  sub_256A4A890();
}

void sub_256A84CDC()
{
}

void sub_256A84CF4()
{
  sub_256A4A878();
  sub_256A9FF00(v2);
  sub_256A39D2C(&qword_26B2B5F28);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v3);
  sub_256A9FCD8();
  sub_256A9FC9C();
  if (!v0)
  {
    sub_256AA02B0();
    sub_256A9FC78();
    memcpy(v11, v12, sizeof(v11));
    BOOL v4 = v11[0] == 0x6C69466567616D49 && v11[1] == 0xEB00000000726574;
    if (v4 || (sub_256AA0DA4() & 1) != 0)
    {
      sub_256A9FECC();
    }
    else
    {
      sub_256AA0E24();
      sub_256AA0288();
      swift_bridgeObjectRelease();
      sub_256A546F8();
      uint64_t v5 = sub_256A6E4C0();
      sub_256AA0DF0(v5, v6);
      sub_256A6E450(v7, v8);
      sub_256A6DFC8((uint64_t)v11);
    }
    uint64_t v9 = sub_256A9FD28();
    v10(v9);
  }
  sub_256A39DB4(v1);
  sub_256AA0174();
  sub_256A4A890();
}

void sub_256A84E70()
{
}

void sub_256A84E88()
{
  sub_256A4A878();
  sub_256A9FF00(v2);
  sub_256A39D2C(&qword_26B2B5F28);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v3);
  sub_256A9FCD8();
  sub_256A9FC9C();
  if (!v0)
  {
    sub_256AA02B0();
    sub_256A9FC78();
    sub_256A9FE58();
    if (v11 == 17 && (sub_256AA0030(), v4) || (sub_256AA02A0(), (sub_256AA0014() & 1) != 0))
    {
      sub_256A9FECC();
    }
    else
    {
      sub_256A9FE38();
      sub_256AA0288();
      swift_bridgeObjectRelease();
      sub_256A546F8();
      uint64_t v5 = sub_256A6E4C0();
      sub_256AA077C(v5, v6);
      sub_256AA03C0();
      sub_256A6E450(v7, v8);
      sub_256A6DFC8((uint64_t)&v11);
    }
    uint64_t v9 = sub_256A9FD28();
    v10(v9);
  }
  sub_256A39DB4(v1);
  sub_256AA0174();
  sub_256A4A890();
}

void sub_256A84FE4()
{
}

void sub_256A84FFC()
{
  sub_256A4A878();
  sub_256A9FF00(v2);
  sub_256A39D2C(&qword_26B2B5F28);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v3);
  sub_256A9FCD8();
  sub_256A9FC9C();
  if (!v0)
  {
    sub_256AA02B0();
    sub_256A9FC78();
    memcpy(v11, v12, sizeof(v11));
    BOOL v4 = v11[0] == 0x6163536567616D49 && v11[1] == 0xEB0000000072656CLL;
    if (v4 || (sub_256AA0DA4() & 1) != 0)
    {
      sub_256A9FECC();
    }
    else
    {
      sub_256AA0E24();
      sub_256AA0288();
      swift_bridgeObjectRelease();
      sub_256A546F8();
      uint64_t v5 = sub_256A6E4C0();
      sub_256AA0DF0(v5, v6);
      sub_256A6E450(v7, v8);
      sub_256A6DFC8((uint64_t)v11);
    }
    uint64_t v9 = sub_256A9FD28();
    v10(v9);
  }
  sub_256A39DB4(v1);
  sub_256AA0174();
  sub_256A4A890();
}

void sub_256A85178(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*vars8)(void *__return_ptr, unsigned char *);

  sub_256A8585C(a1, (uint64_t)AssetBackedLLMAdapterBase.init(configuration:), a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void sub_256A851A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*vars8)(void *__return_ptr, unsigned char *);

  sub_256A8585C(a1, (uint64_t)AssetBackedLLMDraftModelBase.init(configuration:), a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void sub_256A851D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*vars8)(void *__return_ptr, unsigned char *);

  sub_256A8585C(a1, (uint64_t)AssetBackedLLMModelBase.init(configuration:), a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void sub_256A851FC()
{
}

void sub_256A85214()
{
  sub_256A4A878();
  sub_256A9FF00(v2);
  sub_256A39D2C(&qword_26B2B5F28);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v3);
  sub_256A9FCD8();
  sub_256A9FC9C();
  if (!v0)
  {
    sub_256AA02B0();
    sub_256A9FC78();
    sub_256A9FE58();
    if (v11 == 23 && (sub_256AA0030(), v4) || (sub_256AA02A0(), (sub_256AA0014() & 1) != 0))
    {
      sub_256A9FECC();
    }
    else
    {
      sub_256A9FE38();
      sub_256AA0288();
      swift_bridgeObjectRelease();
      sub_256A546F8();
      uint64_t v5 = sub_256A6E4C0();
      sub_256AA077C(v5, v6);
      sub_256AA03C0();
      sub_256A6E450(v7, v8);
      sub_256A6DFC8((uint64_t)&v11);
    }
    uint64_t v9 = sub_256A9FD28();
    v10(v9);
  }
  sub_256A39DB4(v1);
  sub_256AA0174();
  sub_256A4A890();
}

void sub_256A85370()
{
}

void sub_256A85388()
{
  sub_256A4A878();
  sub_256A9FF00(v2);
  sub_256A39D2C(&qword_26B2B5F28);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v3);
  sub_256A9FCD8();
  sub_256A9FC9C();
  if (!v0)
  {
    sub_256AA02B0();
    sub_256A9FC78();
    sub_256A9FE58();
    if (v11 == 29 && (sub_256AA0030(), v4) || (sub_256AA02A0(), (sub_256AA0014() & 1) != 0))
    {
      sub_256A9FECC();
    }
    else
    {
      sub_256A9FE38();
      sub_256AA0288();
      swift_bridgeObjectRelease();
      sub_256A546F8();
      uint64_t v5 = sub_256A6E4C0();
      sub_256AA077C(v5, v6);
      sub_256AA03C0();
      sub_256A6E450(v7, v8);
      sub_256A6DFC8((uint64_t)&v11);
    }
    uint64_t v9 = sub_256A9FD28();
    v10(v9);
  }
  sub_256A39DB4(v1);
  sub_256AA0174();
  sub_256A4A890();
}

void sub_256A854E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*vars8)(void *__return_ptr, unsigned char *);

  sub_256A8585C(a1, (uint64_t)SanitizerBase.init(configuration:), a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void sub_256A85510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*vars8)(void *__return_ptr, unsigned char *);

  sub_256A8585C(a1, (uint64_t)AssetBackedSanitizerBase.init(configuration:), a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void sub_256A8553C()
{
}

void sub_256A85554()
{
  sub_256A4A878();
  sub_256A9FF00(v2);
  sub_256A39D2C(&qword_26B2B5F28);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v3);
  sub_256A9FCD8();
  sub_256A9FC9C();
  if (!v0)
  {
    sub_256AA02B0();
    sub_256A9FC78();
    sub_256A9FE58();
    if (v11 == 18 && (sub_256AA0030(), v4) || (sub_256AA02A0(), (sub_256AA0014() & 1) != 0))
    {
      sub_256A9FECC();
    }
    else
    {
      sub_256A9FE38();
      sub_256AA0288();
      swift_bridgeObjectRelease();
      sub_256A546F8();
      uint64_t v5 = sub_256A6E4C0();
      sub_256AA077C(v5, v6);
      sub_256AA03C0();
      sub_256A6E450(v7, v8);
      sub_256A6DFC8((uint64_t)&v11);
    }
    uint64_t v9 = sub_256A9FD28();
    v10(v9);
  }
  sub_256A39DB4(v1);
  sub_256AA0174();
  sub_256A4A890();
}

void sub_256A856B0()
{
}

void sub_256A856C8()
{
  sub_256A4A878();
  sub_256A9FF00(v3);
  sub_256A39D2C(&qword_26B2B5F28);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v4);
  sub_256A9FCD8();
  sub_256A9FC9C();
  if (!v0)
  {
    sub_256AA02B0();
    sub_256A9FC78();
    sub_256A9FE58();
    uint64_t v5 = v12[1];
    if (v12[0] == 19 && (sub_256AA0030(), v6) || (sub_256AA0014() & 1) != 0)
    {
      sub_256A9FECC();
    }
    else
    {
      sub_256A9FE38();
      sub_256AA0288();
      swift_bridgeObjectRelease();
      sub_256A546F8();
      sub_256A6E4C0();
      *uint64_t v7 = v2;
      v7[1] = v5;
      sub_256AA03C0();
      sub_256A6E450(v8, v9);
      sub_256A6DFC8((uint64_t)v12);
    }
    uint64_t v10 = sub_256A9FD28();
    v11(v10);
  }
  sub_256A39DB4(v1);
  sub_256AA0174();
  sub_256A4A890();
}

void sub_256A85830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*vars8)(void *__return_ptr, unsigned char *);

  sub_256A8585C(a1, (uint64_t)AssetBackedTokenizerBase.init(configuration:), a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void sub_256A8585C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void (*a10)(void *__return_ptr, unsigned char *))
{
  sub_256A4A878();
  sub_256AA0D34(v12, v13);
  sub_256A39D2C(&qword_26B2B5F28);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v14);
  sub_256A39D70(v11, v11[3]);
  sub_256A8E63C();
  sub_256AA0924();
  if (!v10)
  {
    sub_256A8E688();
    sub_256AA0CE8();
    memcpy(v17, v19, sizeof(v17));
    a10(v18, v17);
    sub_256A9FE28();
    v15();
    memcpy(v16, v18, 0xB8uLL);
  }
  sub_256A39DB4((uint64_t)v11);
  sub_256A4A890();
}

void sub_256A859B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void (*a10)(void *__return_ptr, unsigned char *))
{
  sub_256A4A878();
  sub_256AA0D34(v12, v13);
  sub_256A39D2C(&qword_26B2B5F28);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v14);
  sub_256A39D70(v11, v11[3]);
  sub_256A8E63C();
  sub_256AA0924();
  if (!v10)
  {
    sub_256A8E688();
    sub_256AA0CE8();
    memcpy(v17, v19, sizeof(v17));
    a10(v18, v17);
    sub_256A9FE28();
    v15();
    memcpy(v16, v18, 0xD8uLL);
  }
  sub_256A39DB4((uint64_t)v11);
  sub_256A4A890();
}

void ConfigurationBasedResource.init(from:)()
{
  sub_256A4A878();
  uint64_t v13 = v2;
  uint64_t v14 = v3;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  sub_256A9FC2C();
  uint64_t v12 = v8;
  MEMORY[0x270FA5388](v9);
  sub_256AA03E8();
  sub_256A39D2C(&qword_26B2B5F28);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v10);
  sub_256A9FEE8();
  sub_256A9FFE0(v7);
  sub_256A8E63C();
  sub_256B3FF80();
  if (!v0)
  {
    sub_256A8E688();
    sub_256B3FD90();
    memcpy(v15, v16, sizeof(v15));
    (*(void (**)(void *, uint64_t, uint64_t))(v14 + 32))(v15, v5, v14);
    sub_256AA05D0();
    v11();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v13, v1, v5);
  }
  sub_256A39DB4((uint64_t)v7);
  sub_256A7AC14();
  sub_256A4A890();
}

void sub_256A85CD8()
{
}

void sub_256A85CF0()
{
  sub_256A4A878();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  sub_256A39D2C(&qword_26B2B36E0);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v4);
  sub_256A39D70(v3, v3[3]);
  sub_256A8E63C();
  sub_256AA0634();
  memcpy(v7, v1, sizeof(v7));
  sub_256A8E6D4();
  sub_256AA0894();
  uint64_t v5 = sub_256AA026C();
  v6(v5);
  sub_256AA0888();
  sub_256A4A890();
}

void ConfigurationBasedResource.encode(to:)()
{
  sub_256A4A878();
  uint64_t v2 = v1;
  uint64_t v3 = sub_256A39D2C(&qword_26B2B36E0);
  sub_256A49FB8();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  sub_256A4A7E4();
  sub_256A39D70(v2, v2[3]);
  sub_256A8E63C();
  sub_256B3FF90();
  sub_256AA01F4();
  v7();
  memcpy(v8, v9, sizeof(v8));
  sub_256A8E6D4();
  sub_256B3FE60();
  sub_256A6DFC8((uint64_t)v9);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0, v3);
  sub_256AA0888();
  sub_256A4A890();
}

void sub_256A85F1C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  sub_256AA0C0C(a1, a2, a3, a4, a5, a6, a7, a8, v10, v11);
  sub_256A9F9D0(v9 + 72, (uint64_t)v12, &qword_26B2B38D0);
  sub_256A9F9D0((uint64_t)v12, (uint64_t)&v13, &qword_26B2B38D0);
  if (v13 && *(void *)(v13 + 16))
  {
    sub_256AA04D8(v13);
  }
  else
  {
    *(_DWORD *)(v8 + 7) = 0;
    *(void *)uint64_t v8 = 0;
  }
}

uint64_t ManagedResource<>.cost.getter@<X0>(uint64_t a1@<X8>)
{
  sub_256A9FE14();
  v2();
  uint64_t v3 = v10;
  swift_bridgeObjectRetain();
  uint64_t result = sub_256A6DFC8((uint64_t)v9);
  if (v3)
  {
    if (*(void *)(v3 + 16))
    {
      uint64_t v5 = *(void *)(v3 + 72);
      char v6 = *(unsigned char *)(v3 + 80);
      char v7 = *(unsigned char *)(v3 + 81);
      char v8 = *(unsigned char *)(v3 + 82);
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)a1 = v5;
      *(unsigned char *)(a1 + 8) = v6;
      *(unsigned char *)(a1 + 9) = v7;
      *(unsigned char *)(a1 + 10) = v8;
      return result;
    }
    uint64_t result = swift_bridgeObjectRelease();
  }
  *(_DWORD *)(a1 + 7) = 0;
  *(void *)a1 = 0;
  return result;
}

uint64_t sub_256A86034()
{
  if (*(void *)(v0 + 72)) {
    uint64_t v1 = *(void *)(v0 + 72);
  }
  else {
    uint64_t v1 = MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ManagedResource<>.runtimeInformation.getter()
{
  sub_256A9FE14();
  v0();
  uint64_t v1 = v4;
  swift_bridgeObjectRetain();
  sub_256A6DFC8((uint64_t)v3);
  if (v1) {
    return v1;
  }
  else {
    return MEMORY[0x263F8EE78];
  }
}

uint64_t sub_256A860C0()
{
  return MEMORY[0x263F8EE78];
}

uint64_t ManagedResource<>.dependencies.getter()
{
  return MEMORY[0x263F8EE78];
}

#error "256A8613C: call analysis failed (funcsize=52)"

#error "256A86220: call analysis failed (funcsize=57)"

uint64_t (*sub_256A86298())()
{
  uint64_t v1 = sub_256AA02E8();
  uint64_t v2 = sub_256A9FDF4(v1);
  *(void *)(v0 + 184) = sub_256A860D8(v2);
  return sub_256A862EC;
}

uint64_t (*ManagedResource<>.executionContexts.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  *a1 = ManagedResource<>.executionContexts.getter(a2, a2, a4);
  return destroy for RequestDownloadProgressInformation;
}

uint64_t sub_256A8633C()
{
  return sub_256A4A370();
}

uint64_t sub_256A86360()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CatalogResource<>.id.getter()
{
  sub_256A9FDBC();
  v0();
  swift_bridgeObjectRetain();
  sub_256A6DFC8((uint64_t)v2);
  return sub_256A4A370();
}

uint64_t sub_256A863D4()
{
  sub_256AA0180();
  unint64_t v2 = *(void *)(v0 + 72);
  if (v2 && *(void *)(v2 + 16))
  {
    swift_bridgeObjectRetain();
    sub_256AA02C8();
    sub_256AA0318();
    do
    {
      sub_256AA00C4();
      if (v1 >= v2 >> 1) {
        sub_256AA05B4(v2 > 1);
      }
      sub_256AA00A8();
    }
    while (!v3);
    swift_bridgeObjectRelease();
  }
  sub_256AA0064();
  return sub_256A3CDFC(v4);
}

uint64_t CatalogResource<>.inferenceProviders.getter()
{
  sub_256AA01F4();
  v1();
  unint64_t v2 = v8;
  swift_bridgeObjectRetain();
  sub_256A6DFC8((uint64_t)v7);
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (v2)
  {
    if (*(void *)(v2 + 16))
    {
      uint64_t v6 = MEMORY[0x263F8EE78];
      sub_256AA02C8();
      sub_256AA0318();
      do
      {
        sub_256AA00C4();
        if (v0 >= v2 >> 1)
        {
          sub_256AA05B4(v2 > 1);
          uint64_t v3 = v6;
        }
        sub_256AA00A8();
      }
      while (!v4);
    }
    swift_bridgeObjectRelease();
  }
  return sub_256A3CDFC(v3);
}

uint64_t CatalogResource<>.dependentResourceIDs.getter()
{
  sub_256A9FDBC();
  v0();
  uint64_t v1 = v4;
  swift_bridgeObjectRetain();
  sub_256A6DFC8((uint64_t)v3);
  return v1;
}

uint64_t _s12ModelCatalog21ResourceConfigurationV13preconditionsSayAA12PreconditionVGvg_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t CatalogResource<>.preconditions.getter()
{
  sub_256A9FDBC();
  v0();
  uint64_t v1 = v4;
  swift_bridgeObjectRetain();
  sub_256A6DFC8((uint64_t)v3);
  return v1;
}

uint64_t sub_256A865E4()
{
  return *(unsigned char *)(v0 + 56) & 1;
}

uint64_t CatalogResource<>.sideloaded.getter()
{
  sub_256A9FDBC();
  v0();
  sub_256A6DFC8((uint64_t)v2);
  return v2[56];
}

uint64_t sub_256A86620()
{
  return *(unsigned char *)(v0 + 80) & 1;
}

uint64_t CatalogResource<>.assetBacked.getter()
{
  sub_256A9FDBC();
  v0();
  sub_256A6DFC8((uint64_t)v2);
  return v2[80];
}

uint64_t sub_256A8665C()
{
  if (*(void *)(v0 + 168)) {
    uint64_t v1 = *(void *)(v0 + 168);
  }
  else {
    uint64_t v1 = MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CatalogResource<>.tags.getter()
{
  sub_256A9FDBC();
  v0();
  uint64_t v1 = v4;
  swift_bridgeObjectRetain();
  sub_256A6DFC8((uint64_t)v3);
  if (v1) {
    return v1;
  }
  else {
    return MEMORY[0x263F8EE78];
  }
}

uint64_t sub_256A866E4()
{
  if (*(void *)(v0 + 176))
  {
    uint64_t v1 = *(void *)(v0 + 176);
  }
  else
  {
    if (qword_269F78A80 != -1) {
      swift_once();
    }
    uint64_t v1 = qword_269F79B10;
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CatalogResource<>.platforms.getter()
{
  sub_256A9FDBC();
  v0();
  uint64_t v1 = v4;
  swift_bridgeObjectRetain();
  sub_256A6DFC8((uint64_t)v3);
  if (!v1)
  {
    if (qword_269F78A80 != -1) {
      swift_once();
    }
    uint64_t v1 = qword_269F79B10;
    swift_bridgeObjectRetain();
  }
  return v1;
}

uint64_t sub_256A867E4()
{
  sub_256B3F740();

  return swift_bridgeObjectRelease();
}

uint64_t sub_256A868CC()
{
  Tag.rawValue.getter();
  sub_256A7A7C0();

  return swift_bridgeObjectRelease();
}

uint64_t sub_256A86918(uint64_t a1, char a2)
{
  switch(a2)
  {
    case 1:
    case 2:
    case 3:
      sub_256A4A69C();
      break;
    case 5:
    case 6:
    case 7:
      sub_256A4A668();
      break;
    case 8:
    case 9:
    case 10:
      sub_256AA0E64();
      break;
    default:
      break;
  }
  sub_256B3F740();

  return swift_bridgeObjectRelease();
}

uint64_t sub_256A86A64(uint64_t a1, char a2)
{
  switch(a2)
  {
    case 2:
    case 3:
    case 4:
      sub_256AA0B10();
      break;
    default:
      break;
  }
  sub_256B3F740();

  return swift_bridgeObjectRelease();
}

uint64_t sub_256A86B40()
{
  return sub_256B3F740();
}

uint64_t sub_256A86B58()
{
  sub_256B3F740();

  return swift_bridgeObjectRelease();
}

uint64_t sub_256A86BC8(uint64_t a1, uint64_t a2)
{
  return sub_256A86FE4(a1, a2, (void (*)(uint64_t))sub_256A6E0C4);
}

uint64_t sub_256A86BE0(uint64_t a1, uint64_t a2)
{
  return sub_256A86FE4(a1, a2, (void (*)(uint64_t))sub_256A57A3C);
}

uint64_t sub_256A86BF8()
{
  sub_256B3F740();

  return swift_bridgeObjectRelease();
}

uint64_t sub_256A86C40(uint64_t a1, uint64_t a2)
{
  return sub_256A86FE4(a1, a2, (void (*)(uint64_t))sub_256A572CC);
}

uint64_t sub_256A86C58()
{
  sub_256B3F740();

  return swift_bridgeObjectRelease();
}

uint64_t sub_256A86CD4(uint64_t a1, char a2)
{
  if (!a2) {
    sub_256AA0E64();
  }
  sub_256B3F740();

  return swift_bridgeObjectRelease();
}

uint64_t sub_256A86D60(uint64_t a1, uint64_t a2)
{
  return sub_256A86FE4(a1, a2, (void (*)(uint64_t))sub_256A59190);
}

uint64_t sub_256A86D78(uint64_t a1, uint64_t a2)
{
  return sub_256A86FE4(a1, a2, (void (*)(uint64_t))sub_256A5B378);
}

uint64_t sub_256A86D90()
{
  sub_256B3F740();

  return swift_bridgeObjectRelease();
}

uint64_t sub_256A86E50(uint64_t a1, uint64_t a2)
{
  return sub_256A86FE4(a1, a2, (void (*)(uint64_t))sub_256A5CE1C);
}

uint64_t sub_256A86E68()
{
  sub_256B3F740();

  return swift_bridgeObjectRelease();
}

uint64_t sub_256A86EEC(uint64_t a1, char a2)
{
  switch(a2)
  {
    case 2:
    case 3:
    case 4:
    case 5:
      sub_256AA0E64();
      break;
    default:
      break;
  }
  sub_256B3F740();

  return swift_bridgeObjectRelease();
}

uint64_t sub_256A86FE4(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  a3(a2);
  sub_256A7A7C0();

  return swift_bridgeObjectRelease();
}

void sub_256A87028(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  sub_256A9FE98(a1, a2, a3, a4, a5, a6, a7, a8, v8, v9);
  sub_256A87058();
}

void sub_256A87058()
{
}

void sub_256A870B4()
{
}

uint64_t sub_256A87110()
{
  sub_256AA09A8();
  sub_256A39D2C(&qword_26B2B33F0);
  uint64_t v3 = sub_256A7B57C();
  *(_OWORD *)(v3 + 16) = xmmword_256B57080;
  *(void *)(v3 + 56) = v2;
  *(void *)(v3 + 64) = v1();
  *(void *)(v3 + 32) = swift_allocObject();
  memcpy(v7, (const void *)(v0 + 48), sizeof(v7));
  uint64_t v4 = (void *)sub_256A4A370();
  memcpy(v4, v5, 0xB0uLL);
  sub_256A9F868();
  return v3;
}

uint64_t sub_256A871BC()
{
  sub_256A39D2C(&qword_26B2B33F0);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_256B57080;
  *(void *)(v1 + 56) = &type metadata for Catalog.LLM.Model.AFMTextInstruct3BBase;
  *(void *)(v1 + 64) = sub_256A9F688();
  uint64_t v2 = swift_allocObject();
  uint64_t v3 = (void *)(v2 + 16);
  *(void *)(v1 + 32) = v2;
  uint64_t v4 = (const void *)(v0 + 64);
  memcpy(v6, v4, sizeof(v6));
  memcpy(v3, v4, 0xB0uLL);
  sub_256A9F868();
  return v1;
}

void LLMAdapter.dependencies.getter()
{
  sub_256A4A458();
  sub_256A4A3C8();
  sub_256A39D2C(&qword_26B2B33F0);
  uint64_t v2 = (__n128 *)sub_256A7B57C();
  sub_256AA0D48(v2, (__n128)xmmword_256B57080);
  uint64_t v3 = sub_256AA08F0();
  v2[4].n128_u64[0] = *(void *)(*(void *)(sub_256AA07BC(v3) + 8) + 8);
  sub_256A49D7C(v0);
  uint64_t v4 = sub_256AA0CD4();
  v1(v4);
  sub_256A4A2C0();
}

void sub_256A872F4()
{
  int v1 = memcpy(__dst, v0, sizeof(__dst));
  sub_256A85F1C(v1, v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_256A87338(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  sub_256A9FE98(a1, a2, a3, a4, a5, a6, a7, a8, v9, v10);
  return sub_256A86034();
}

uint64_t sub_256A87368(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  sub_256A9FE98(a1, a2, a3, a4, a5, a6, a7, a8, v9, v10);
  return sub_256A860C0();
}

uint64_t sub_256A87398(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  int v8 = sub_256A9FE98(a1, a2, a3, a4, a5, a6, a7, a8, v10, v11);
  return sub_256A860D8(v8);
}

void sub_256A873C8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  sub_256A9FE98(a1, a2, a3, a4, a5, a6, a7, a8, v8, v9);
  sub_256A873F8();
}

void sub_256A873F8()
{
}

void sub_256A87454()
{
}

uint64_t sub_256A874B0()
{
  sub_256AA09A8();
  sub_256A39D2C(&qword_26B2B33F0);
  uint64_t v2 = sub_256A7B57C();
  *(_OWORD *)(v2 + 16) = xmmword_256B57080;
  *(void *)(v2 + 56) = v1;
  *(void *)(v2 + 64) = v0();
  uint64_t v3 = swift_allocObject();
  *(void *)(v2 + 32) = v3;
  char v11 = sub_256AA085C(v3, v4, v5, v6, v7, v8, v9, v10, v16, v17);
  memcpy(v11, v12, 0x58uLL);
  uint64_t v13 = (void *)sub_256A4A370();
  memcpy(v13, v14, 0x58uLL);
  sub_256A9F610();
  return v2;
}

uint64_t sub_256A87558()
{
  sub_256AA09A8();
  sub_256A39D2C(&qword_26B2B33F0);
  uint64_t v2 = sub_256A7B57C();
  *(_OWORD *)(v2 + 16) = xmmword_256B57080;
  *(void *)(v2 + 56) = v1;
  *(void *)(v2 + 64) = v0();
  uint64_t v3 = swift_allocObject();
  *(void *)(v2 + 32) = v3;
  char v11 = sub_256AA085C(v3, v4, v5, v6, v7, v8, v9, v10, v16, v17);
  memcpy(v11, v12, 0x68uLL);
  uint64_t v13 = (void *)sub_256A4A370();
  memcpy(v13, v14, 0x68uLL);
  sub_256A9F484();
  return v2;
}

void LLMModel.dependencies.getter()
{
  sub_256A4A458();
  sub_256A4A3C8();
  sub_256A39D2C(&qword_26B2B33F0);
  uint64_t v2 = (__n128 *)sub_256A7B57C();
  sub_256AA0D48(v2, (__n128)xmmword_256B57080);
  uint64_t v3 = sub_256AA08F0();
  v2[4].n128_u64[0] = *(void *)(sub_256AA07BC(v3) + 8);
  sub_256A49D7C(v0);
  uint64_t v4 = sub_256AA0CD4();
  v1(v4);
  sub_256A4A2C0();
}

uint64_t sub_256A87680(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  sub_256A9FE98(a1, a2, a3, a4, a5, a6, a7, a8, v9, v10);
  return sub_256A8633C();
}

uint64_t sub_256A876B0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  sub_256A9FE98(a1, a2, a3, a4, a5, a6, a7, a8, v9, v10);
  return sub_256A863D4();
}

uint64_t sub_256A876E0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  sub_256A9FE98(a1, a2, a3, a4, a5, a6, a7, a8, v9, v10);
  return _s12ModelCatalog08LLMDraftA13AssetMetadataV17e5FunctionNameMapSDySSAC13ANEExtendInfoVGSgvg_0();
}

uint64_t sub_256A87710(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  sub_256A9FE98(a1, a2, a3, a4, a5, a6, a7, a8, v9, v10);
  return _s12ModelCatalog21ResourceConfigurationV13preconditionsSayAA12PreconditionVGvg_0();
}

uint64_t sub_256A87740(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  sub_256A9FE98(a1, a2, a3, a4, a5, a6, a7, a8, v9, v10);
  return sub_256A865E4() & 1;
}

uint64_t sub_256A87774(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  sub_256A9FE98(a1, a2, a3, a4, a5, a6, a7, a8, v9, v10);
  return sub_256A86620() & 1;
}

uint64_t sub_256A877A8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  sub_256A9FE98(a1, a2, a3, a4, a5, a6, a7, a8, v9, v10);
  return sub_256A8665C();
}

uint64_t sub_256A877D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  sub_256A9FE98(a1, a2, a3, a4, a5, a6, a7, a8, v9, v10);
  return sub_256A866E4();
}

void sub_256A87808(void **a1)
{
  uint64_t v1 = *a1;
  swift_bridgeObjectRelease();

  free(v1);
}

uint64_t sub_256A87844(void *a1, void *a2)
{
  unint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t result = a1[4];
  if (result != a2[4] || a1[5] != a2[5])
  {
    sub_256B3FEA0();
    uint64_t result = sub_256AA01B8();
    if ((v7 & 1) == 0) {
      return result;
    }
  }
  if (v2 == 1) {
    return 1;
  }
  uint64_t v8 = a2 + 7;
  uint64_t v9 = a1 + 7;
  unint64_t v10 = 1;
  while (v10 < v2)
  {
    uint64_t result = *(v9 - 1);
    if (result != *(v8 - 1) || *v9 != *v8)
    {
      uint64_t result = sub_256B3FEA0();
      if ((result & 1) == 0) {
        return 0;
      }
    }
    ++v10;
    v8 += 2;
    v9 += 2;
    if (v2 == v10) {
      return 1;
    }
  }
  __break(1u);
  return result;
}

void sub_256A87910()
{
  sub_256AA0180();
  uint64_t v2 = *(void *)(v0 + 16);
  if (v2 == *(void *)(v1 + 16) && v2 && v0 != v1)
  {
    uint64_t v3 = (unsigned __int8 *)(v0 + 32);
    uint64_t v4 = (unsigned __int8 *)(v1 + 32);
    do
    {
      int v6 = *v3++;
      int v5 = v6;
      if (v6)
      {
        if (v5 == 1)
        {
          unint64_t v7 = 0xD000000000000025;
          unint64_t v8 = 0x8000000256B420B0;
        }
        else
        {
          unint64_t v8 = 0x8000000256B420E0;
          unint64_t v7 = 0xD000000000000013;
        }
      }
      else
      {
        unint64_t v7 = 0xD00000000000002CLL;
        unint64_t v8 = 0x8000000256B42080;
      }
      int v10 = *v4++;
      int v9 = v10;
      unint64_t v11 = 0xD000000000000025;
      if (v10 == 1)
      {
        unint64_t v12 = 0x8000000256B420B0;
      }
      else
      {
        unint64_t v11 = 0xD000000000000013;
        unint64_t v12 = 0x8000000256B420E0;
      }
      if (v9) {
        unint64_t v13 = v11;
      }
      else {
        unint64_t v13 = 0xD00000000000002CLL;
      }
      if (v9) {
        unint64_t v14 = v12;
      }
      else {
        unint64_t v14 = 0x8000000256B42080;
      }
      if (v7 == v13 && v8 == v14)
      {
        sub_256AA06D4();
      }
      else
      {
        char v16 = sub_256B3FEA0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v16 & 1) == 0) {
          break;
        }
      }
      --v2;
    }
    while (v2);
  }
  sub_256AA0064();
}

uint64_t *sub_256A87A50(uint64_t *a1)
{
  uint64_t v2 = a1[8];
  uint64_t v3 = a1[9];
  sub_256A54744(*a1, a1[1]);
  sub_256A54744(v2, v3);
  return a1;
}

uint64_t sub_256A87AE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = a1 + 32;
    uint64_t v4 = a2 + 32;
    do
    {
      ++v3;
      ++v4;
      unint64_t v5 = Tag.rawValue.getter();
      uint64_t v7 = v6;
      if (v5 == Tag.rawValue.getter() && v7 == v8)
      {
        sub_256AA06D4();
      }
      else
      {
        char v10 = sub_256B3FEA0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v10 & 1) == 0) {
          return 0;
        }
      }
      --v2;
    }
    while (v2);
  }
  return 1;
}

uint64_t sub_256A87BC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (uint64_t *)(a2 + 48);
    uint64_t v4 = (uint64_t *)(a1 + 48);
    do
    {
      uint64_t v6 = *(v4 - 1);
      uint64_t v5 = *v4;
      uint64_t v7 = *((unsigned __int8 *)v3 - 16);
      uint64_t v9 = *(v3 - 1);
      uint64_t v8 = *v3;
      v3 += 3;
      uint64_t v10 = *((unsigned __int8 *)v4 - 16);
      v4 += 3;
      unint64_t v11 = 0xE700000000000000;
      uint64_t v12 = 0x6E776F6E6B6E75;
      switch(v10)
      {
        case 1:
          unint64_t v11 = 0xE300000000000000;
          uint64_t v12 = 7565161;
          break;
        case 2:
          unint64_t v11 = 0xE500000000000000;
          uint64_t v12 = 0x736F63616DLL;
          break;
        case 3:
          uint64_t v12 = 0x736F6863746177;
          break;
        case 4:
          unint64_t v11 = 0xE400000000000000;
          uint64_t v12 = 1936684660;
          break;
        case 5:
          unint64_t v11 = 0xE800000000000000;
          uint64_t v12 = 0x736F6E6F69736976;
          break;
        default:
          break;
      }
      unint64_t v13 = 0xE700000000000000;
      uint64_t v14 = 0x6E776F6E6B6E75;
      switch(v7)
      {
        case 1:
          unint64_t v13 = 0xE300000000000000;
          uint64_t v14 = 7565161;
          break;
        case 2:
          unint64_t v13 = 0xE500000000000000;
          uint64_t v14 = 0x736F63616DLL;
          break;
        case 3:
          uint64_t v14 = 0x736F6863746177;
          break;
        case 4:
          unint64_t v13 = 0xE400000000000000;
          uint64_t v14 = 1936684660;
          break;
        case 5:
          unint64_t v13 = 0xE800000000000000;
          uint64_t v14 = 0x736F6E6F69736976;
          break;
        default:
          break;
      }
      if (v12 == v14 && v11 == v13)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v16 = sub_256B3FEA0();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v16 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return 0;
        }
      }
      if (v6 == v9 && v5 == v8)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v18 = sub_256B3FEA0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v18 & 1) == 0) {
          return 0;
        }
      }
      --v2;
    }
    while (v2);
  }
  return 1;
}

uint64_t sub_256A87E60(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2)
  {
    uint64_t v3 = a2;
    uint64_t v4 = a1;
    if (a1 != a2)
    {
      uint64_t v5 = 0;
      do
      {
        int v6 = *(unsigned __int8 *)(v4 + v5 + 48);
        uint64_t v7 = *(void *)(v4 + v5 + 56);
        uint64_t v8 = *(void *)(v4 + v5 + 64);
        uint64_t v9 = *(void *)(v4 + v5 + 72);
        int v10 = *(unsigned __int8 *)(v4 + v5 + 80);
        int v11 = *(unsigned __int8 *)(v4 + v5 + 81);
        int v12 = *(unsigned __int8 *)(v4 + v5 + 82);
        int v13 = *(unsigned __int8 *)(v3 + v5 + 48);
        uint64_t v15 = *(void *)(v3 + v5 + 56);
        uint64_t v14 = *(void *)(v3 + v5 + 64);
        uint64_t v16 = *(void *)(v3 + v5 + 72);
        int v17 = *(unsigned __int8 *)(v3 + v5 + 80);
        int v18 = *(unsigned __int8 *)(v3 + v5 + 81);
        BOOL v19 = *(void *)(v4 + v5 + 32) == *(void *)(v3 + v5 + 32)
           && *(void *)(v4 + v5 + 40) == *(void *)(v3 + v5 + 40);
        int v20 = *(unsigned __int8 *)(v3 + v5 + 82);
        if (!v19)
        {
          int v39 = *(unsigned __int8 *)(v3 + v5 + 81);
          int v40 = *(unsigned __int8 *)(v3 + v5 + 80);
          uint64_t v38 = *(void *)(v4 + v5 + 72);
          int v36 = *(unsigned __int8 *)(v4 + v5 + 80);
          int v37 = *(unsigned __int8 *)(v3 + v5 + 82);
          int v35 = *(unsigned __int8 *)(v4 + v5 + 81);
          int v21 = *(unsigned __int8 *)(v4 + v5 + 82);
          uint64_t v22 = *(void *)(v3 + v5 + 72);
          uint64_t v23 = *(void *)(v4 + v5 + 56);
          uint64_t v24 = *(void *)(v4 + v5 + 64);
          uint64_t v25 = *(void *)(v3 + v5 + 64);
          uint64_t v26 = *(void *)(v3 + v5 + 56);
          char v27 = sub_256B3FEA0();
          uint64_t v15 = v26;
          uint64_t v14 = v25;
          uint64_t v8 = v24;
          uint64_t v7 = v23;
          uint64_t v16 = v22;
          int v12 = v21;
          int v11 = v35;
          int v10 = v36;
          int v20 = v37;
          uint64_t v9 = v38;
          int v18 = v39;
          int v17 = v40;
          uint64_t v4 = a1;
          uint64_t v3 = a2;
          if ((v27 & 1) == 0) {
            return 0;
          }
        }
        if (v6 == 2)
        {
          if (v13 != 2) {
            return 0;
          }
        }
        else
        {
          uint64_t result = 0;
          if (v13 == 2 || ((((v6 & 1) == 0) ^ v13) & 1) == 0) {
            return result;
          }
        }
        if (v8)
        {
          if (!v14) {
            return 0;
          }
          if (v7 != v15 || v8 != v14)
          {
            uint64_t v30 = v16;
            int v31 = v12;
            char v32 = sub_256B3FEA0();
            uint64_t result = 0;
            if ((v32 & 1) == 0) {
              return result;
            }
            if (v9 != v30) {
              return result;
            }
            if ((v10 ^ v17)) {
              return result;
            }
            if ((v11 ^ v18)) {
              return result;
            }
            uint64_t v4 = a1;
            uint64_t v3 = a2;
            if ((v31 ^ v20)) {
              return result;
            }
            goto LABEL_32;
          }
        }
        else if (v14)
        {
          return 0;
        }
        uint64_t result = 0;
        if (v9 != v16 || ((v10 ^ v17) & 1) != 0 || ((v11 ^ v18) & 1) != 0 || ((v12 ^ v20) & 1) != 0) {
          return result;
        }
LABEL_32:
        v5 += 56;
        --v2;
      }
      while (v2);
    }
  }
  return 1;
}

uint64_t CatalogErrors.SerializationError.errorDescription.getter()
{
  uint64_t v0 = sub_256B3F660();
  uint64_t v1 = sub_256A4AB38(v0);
  MEMORY[0x270FA5388](v1);
  sub_256A9FD0C();
  sub_256B3F650();
  sub_256A4A6DC();
  sub_256B3F640();
  sub_256B3F630();
  sub_256AA0EE8();
  uint64_t v2 = sub_256B3F680();
  uint64_t v3 = sub_256A4AB38(v2);
  MEMORY[0x270FA5388](v3);
  sub_256A9FF50();
  uint64_t v4 = sub_256B3F460();
  uint64_t v5 = sub_256A4AB38(v4);
  MEMORY[0x270FA5388](v5);
  sub_256AA0080();
  return sub_256A9FFB4();
}

uint64_t sub_256A8819C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x8000000256B48FD0 || (sub_256B3FEA0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000256B48FF0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = sub_256B3FEA0();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

unint64_t sub_256A88288(char a1)
{
  if (a1) {
    return 0xD000000000000013;
  }
  else {
    return 0xD000000000000011;
  }
}

unint64_t sub_256A882C4()
{
  return sub_256A88288(*v0);
}

uint64_t sub_256A882CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_256A8819C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_256A882F4(uint64_t a1)
{
  unint64_t v2 = sub_256A97EF4();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A88330(uint64_t a1)
{
  unint64_t v2 = sub_256A97EF4();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_256A8836C()
{
  return sub_256A94AFC();
}

uint64_t sub_256A88390(uint64_t a1)
{
  unint64_t v2 = sub_256A97F40();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A883CC(uint64_t a1)
{
  unint64_t v2 = sub_256A97F40();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_256A88408(uint64_t a1)
{
  unint64_t v2 = sub_256A97F8C();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A88444(uint64_t a1)
{
  unint64_t v2 = sub_256A97F8C();

  return MEMORY[0x270FA00B8](a1, v2);
}

void CatalogErrors.SerializationError.encode(to:)()
{
  sub_256A4A878();
  sub_256AA0FE8();
  sub_256A39D2C(&qword_269F79B28);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v3);
  sub_256A6E704();
  sub_256A39D2C(&qword_269F79B30);
  sub_256A49FB8();
  uint64_t v12 = v4;
  MEMORY[0x270FA5388](v4);
  sub_256A9FEE8();
  sub_256A39D2C(&qword_269F79B38);
  sub_256A49FB8();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  sub_256A4A7E4();
  uint64_t v8 = *(unsigned __int8 *)(v1 + 16);
  sub_256A39D70(v0, v0[3]);
  sub_256A97EF4();
  sub_256B3FF90();
  if (v8)
  {
    sub_256A97F40();
    sub_256AA0F80();
    sub_256B3FE20();
    uint64_t v9 = sub_256AA0850();
  }
  else
  {
    sub_256A97F8C();
    sub_256AA0F80();
    sub_256B3FE20();
    uint64_t v9 = sub_256AA0BCC();
    uint64_t v10 = v12;
  }
  v11(v9, v10);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v2, v8);
  sub_256AA081C();
  sub_256A4A890();
}

void CatalogErrors.SerializationError.init(from:)()
{
  sub_256A4A878();
  sub_256AA0FE8();
  uint64_t v30 = v3;
  sub_256A39D2C(&qword_269F79B58);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v4);
  sub_256A4A7E4();
  uint64_t v5 = sub_256A39D2C(&qword_269F79B60);
  sub_256A49FB8();
  uint64_t v31 = v6;
  MEMORY[0x270FA5388](v7);
  sub_256A84158();
  uint64_t v8 = sub_256A39D2C(&qword_269F79B68);
  sub_256A49FB8();
  uint64_t v32 = v9;
  MEMORY[0x270FA5388](v10);
  sub_256A4A7CC();
  sub_256A6E86C();
  sub_256A97EF4();
  sub_256AA05DC();
  if (v33) {
    goto LABEL_8;
  }
  uint64_t v29 = v2;
  uint64_t v11 = sub_256B3FDA0();
  uint64_t v12 = *(void *)(v11 + 16);
  uint64_t v13 = v8;
  if (!v12)
  {
    uint64_t v14 = v1;
    goto LABEL_7;
  }
  uint64_t v14 = v1;
  char v15 = *(unsigned char *)(v11 + 32);
  sub_256A9FA7C(1, v12, v11, v11 + 32, 0, (2 * v12) | 1);
  uint64_t v17 = v16;
  unint64_t v19 = v18;
  swift_bridgeObjectRelease();
  if (v17 != v19 >> 1)
  {
LABEL_7:
    sub_256B3FBB0();
    sub_256A6E4C0();
    int v21 = v20;
    sub_256A39D2C(&qword_269F79B70);
    *int v21 = &type metadata for CatalogErrors.SerializationError;
    sub_256B3FCF0();
    sub_256AA0444();
    sub_256A4A838();
    sub_256AA08E4();
    v22();
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v14, v13);
LABEL_8:
    sub_256A39DB4(v0);
    goto LABEL_9;
  }
  if (v15)
  {
    sub_256A97F40();
    sub_256AA0A88();
    uint64_t v23 = sub_256B3FD50();
    uint64_t v25 = v24;
    sub_256A9FDB0();
    v26();
  }
  else
  {
    sub_256A97F8C();
    sub_256AA0A88();
    uint64_t v23 = sub_256B3FD50();
    uint64_t v25 = v27;
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v29, v5);
  }
  swift_unknownObjectRelease();
  sub_256AA05D0();
  v28();
  *(void *)uint64_t v30 = v23;
  *(void *)(v30 + 8) = v25;
  *(unsigned char *)(v30 + 16) = v15;
  sub_256A39DB4(v0);
LABEL_9:
  sub_256A4A890();
}

uint64_t sub_256A88ACC()
{
  return sub_256B3F1F0();
}

uint64_t sub_256A88AE4()
{
  return sub_256B3F210();
}

uint64_t sub_256A88AFC()
{
  return sub_256B3F1E0();
}

void sub_256A88B14()
{
}

void sub_256A88B2C()
{
}

uint64_t CatalogErrors.ConfigurationError.errorDescription.getter()
{
  uint64_t v0 = sub_256B3F660();
  uint64_t v1 = sub_256A4AB38(v0);
  MEMORY[0x270FA5388](v1);
  sub_256A9FD0C();
  sub_256B3F650();
  sub_256B3F640();
  sub_256B3F630();
  sub_256A4A6DC();
  sub_256B3F640();
  sub_256AA0F54();
  sub_256B3F630();
  sub_256AA0EE8();
  uint64_t v2 = sub_256B3F680();
  uint64_t v3 = sub_256A4AB38(v2);
  MEMORY[0x270FA5388](v3);
  sub_256A9FF50();
  uint64_t v4 = sub_256B3F460();
  uint64_t v5 = sub_256A4AB38(v4);
  MEMORY[0x270FA5388](v5);
  sub_256AA0080();
  return sub_256A9FFB4();
}

uint64_t sub_256A88C70(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000014 && a2 == 0x8000000256B49010)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = sub_256B3FEA0();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

unint64_t sub_256A88CF8()
{
  return 0xD000000000000014;
}

uint64_t sub_256A88D14(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 12383 && a2 == 0xE200000000000000;
  if (v2 || (sub_256B3FEA0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 12639 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_256B3FEA0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_256A88DDC(char a1)
{
  if (a1) {
    return 12639;
  }
  else {
    return 12383;
  }
}

uint64_t sub_256A88DF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_256A88C70(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_256A88E24(uint64_t a1)
{
  unint64_t v2 = sub_256A97FD8();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A88E60(uint64_t a1)
{
  unint64_t v2 = sub_256A97FD8();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_256A88E9C()
{
  return sub_256A88DDC(*v0);
}

uint64_t sub_256A88EA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_256A88D14(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_256A88ECC(uint64_t a1)
{
  unint64_t v2 = sub_256A98024();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A88F08(uint64_t a1)
{
  unint64_t v2 = sub_256A98024();

  return MEMORY[0x270FA00B8](a1, v2);
}

void CatalogErrors.ConfigurationError.encode(to:)()
{
  sub_256A4A878();
  unint64_t v2 = v1;
  sub_256A39D2C(&qword_269F79B78);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v3);
  sub_256A84158();
  sub_256A39D2C(&qword_269F79B80);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v4);
  sub_256A6E704();
  sub_256A39D70(v2, v2[3]);
  sub_256A97FD8();
  sub_256AA0FB8();
  sub_256B3FF90();
  sub_256A98024();
  sub_256B3FDC0();
  sub_256A6F0E4();
  sub_256B3FE20();
  if (!v0) {
    sub_256B3FE20();
  }
  sub_256A9FDB0();
  v5();
  sub_256AA0850();
  sub_256A9FDB0();
  v6();
  sub_256A7AC14();
  sub_256A4A890();
}

void CatalogErrors.ConfigurationError.init(from:)()
{
  sub_256A4A878();
  uint64_t v3 = v2;
  uint64_t v28 = v4;
  sub_256A39D2C(&qword_269F79B98);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v5);
  sub_256A84158();
  uint64_t v6 = sub_256A39D2C(&qword_269F79BA0);
  sub_256A49FB8();
  uint64_t v29 = v7;
  MEMORY[0x270FA5388](v8);
  sub_256AA03E8();
  sub_256AA0CB8(v3);
  sub_256A97FD8();
  sub_256AA0AD0();
  sub_256B3FF80();
  if (v0) {
    goto LABEL_6;
  }
  uint64_t v9 = sub_256B3FDA0();
  uint64_t v10 = *(void *)(v9 + 16);
  if (!v10
    || (sub_256A9FA7C(1, v10, v9, v9 + 32, 0, (2 * v10) | 1),
        uint64_t v12 = v11,
        unint64_t v14 = v13,
        swift_bridgeObjectRelease(),
        v12 != v14 >> 1))
  {
    sub_256B3FBB0();
    sub_256A6E4C0();
    uint64_t v17 = v16;
    sub_256A39D2C(&qword_269F79B70);
    *uint64_t v17 = &type metadata for CatalogErrors.ConfigurationError;
    sub_256B3FCF0();
    sub_256AA0444();
    sub_256A4A838();
    sub_256AA08E4();
    v18();
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v1, v6);
LABEL_6:
    uint64_t v26 = (uint64_t)v3;
    goto LABEL_7;
  }
  sub_256A98024();
  sub_256B3FCE0();
  uint64_t v15 = sub_256B3FD50();
  uint64_t v20 = v19;
  uint64_t v27 = v15;
  uint64_t v21 = sub_256B3FD50();
  uint64_t v30 = v22;
  sub_256AA05D0();
  v23();
  swift_unknownObjectRelease();
  uint64_t v24 = sub_256AA0A4C();
  v25(v24);
  uint64_t v26 = (uint64_t)v3;
  *uint64_t v28 = v27;
  v28[1] = v20;
  v28[2] = v21;
  v28[3] = v30;
LABEL_7:
  sub_256A39DB4(v26);
  sub_256A7AC14();
  sub_256A4A890();
}

void sub_256A89454()
{
}

void sub_256A8946C()
{
}

uint64_t CatalogErrors.RequestResourceError.errorDescription.getter()
{
  uint64_t v0 = sub_256B3F660();
  uint64_t v1 = sub_256A4AB38(v0);
  MEMORY[0x270FA5388](v1);
  sub_256A9FD0C();
  sub_256B3F650();
  sub_256A4A6DC();
  sub_256B3F640();
  sub_256B3F630();
  sub_256AA0EE8();
  uint64_t v2 = sub_256B3F680();
  uint64_t v3 = sub_256A4AB38(v2);
  MEMORY[0x270FA5388](v3);
  sub_256A9FF50();
  uint64_t v4 = sub_256B3F460();
  uint64_t v5 = sub_256A4AB38(v4);
  MEMORY[0x270FA5388](v5);
  sub_256AA0080();
  return sub_256A9FFB4();
}

uint64_t sub_256A89650(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD00000000000001ALL && a2 == 0x8000000256B49030 || (sub_256B3FEA0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000256B49050 || (sub_256B3FEA0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000256B49070)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v5 = sub_256B3FEA0();
    swift_bridgeObjectRelease();
    if (v5) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

unint64_t sub_256A89794(char a1)
{
  if (!a1) {
    return 0xD00000000000001ALL;
  }
  if (a1 == 1) {
    return 0xD000000000000011;
  }
  return 0xD000000000000013;
}

unint64_t sub_256A897F0()
{
  return sub_256A89794(*v0);
}

uint64_t sub_256A897F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_256A89650(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_256A89820(uint64_t a1)
{
  unint64_t v2 = sub_256A98070();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A8985C(uint64_t a1)
{
  unint64_t v2 = sub_256A98070();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_256A89898(uint64_t a1)
{
  unint64_t v2 = sub_256A98108();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A898D4(uint64_t a1)
{
  unint64_t v2 = sub_256A98108();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_256A89910(uint64_t a1)
{
  unint64_t v2 = sub_256A980BC();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A8994C(uint64_t a1)
{
  unint64_t v2 = sub_256A980BC();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_256A89988(uint64_t a1)
{
  unint64_t v2 = sub_256A98154();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A899C4(uint64_t a1)
{
  unint64_t v2 = sub_256A98154();

  return MEMORY[0x270FA00B8](a1, v2);
}

void CatalogErrors.RequestResourceError.encode(to:)()
{
  sub_256A4A878();
  sub_256AA0FE8();
  sub_256A39D2C(&qword_269F79BA8);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v3);
  sub_256AA0800(v4, v13);
  sub_256A39D2C(&qword_269F79BB0);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v5);
  sub_256A9FEE8();
  sub_256A39D2C(&qword_269F79BB8);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v6);
  sub_256A4A7E4();
  sub_256A39D2C(&qword_269F79BC0);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v7);
  int v8 = *(unsigned __int8 *)(v1 + 16);
  sub_256A9FFE0(v0);
  sub_256A98070();
  sub_256AA0E90();
  if (v8)
  {
    if (v8 == 1)
    {
      sub_256A98108();
      sub_256AA00EC();
      sub_256AA09F4();
      uint64_t v9 = sub_256AA0BCC();
    }
    else
    {
      sub_256A980BC();
      sub_256AA00EC();
      sub_256AA09D0();
      uint64_t v9 = sub_256AA0F6C();
    }
    uint64_t v11 = v2;
  }
  else
  {
    sub_256A98154();
    sub_256AA00EC();
    sub_256AA0DD0();
    uint64_t v9 = sub_256AA0BD8();
  }
  v10(v9, v11);
  sub_256A9FDB0();
  v12();
  sub_256AA081C();
  sub_256A4A890();
}

void CatalogErrors.RequestResourceError.init(from:)()
{
  sub_256A4A878();
  uint64_t v2 = v1;
  sub_256A39D2C(&qword_269F79BE8);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v3);
  sub_256AA07E4(v4, v22);
  sub_256A39D2C(&qword_269F79BF0);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v5);
  sub_256A4A7CC();
  sub_256A39D2C(&qword_269F79BF8);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v6);
  sub_256A9FEE8();
  unint64_t v7 = sub_256A39D2C(&qword_269F79C00);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v8);
  uint64_t v23 = v2;
  uint64_t v9 = sub_256A39D70(v2, v2[3]);
  sub_256A98070();
  sub_256AA0B38();
  if (v0)
  {
    uint64_t v10 = (uint64_t)v23;
LABEL_10:
    sub_256A39DB4(v10);
    goto LABEL_11;
  }
  uint64_t v11 = sub_256AA0738();
  uint64_t v12 = *(void *)(v11 + 16);
  if (!v12)
  {
    uint64_t v10 = (uint64_t)v23;
LABEL_9:
    sub_256B3FBB0();
    sub_256A6E4C0();
    unint64_t v14 = v13;
    sub_256A39D2C(&qword_269F79B70);
    *unint64_t v14 = &type metadata for CatalogErrors.RequestResourceError;
    sub_256B3FCF0();
    sub_256AA0444();
    sub_256A4A838();
    sub_256AA08E4();
    v15();
    swift_willThrow();
    swift_unknownObjectRelease();
    uint64_t v16 = sub_256AA0C64();
    v17(v16);
    goto LABEL_10;
  }
  sub_256AA038C(v11, v12);
  sub_256AA0C78();
  if (v9 != (void *)(v7 >> 1))
  {
    uint64_t v10 = (uint64_t)v23;
    goto LABEL_9;
  }
  if (v7)
  {
    sub_256A98108();
    sub_256A9FF10();
    sub_256AA06A4();
    sub_256AA0EDC();
  }
  else
  {
    sub_256A98154();
    sub_256A9FF10();
    sub_256AA0960();
    sub_256AA0F60();
  }
  uint64_t v18 = sub_256A9FCC0();
  v19(v18);
  swift_unknownObjectRelease();
  uint64_t v20 = sub_256AA0200();
  v21(v20);
  sub_256AA0D08();
LABEL_11:
  sub_256AA081C();
  sub_256A4A890();
}

void sub_256A8A0BC()
{
}

void sub_256A8A0D4()
{
}

uint64_t CatalogErrors.SideloadError.errorDescription.getter()
{
  uint64_t v0 = sub_256B3F660();
  uint64_t v1 = sub_256A4AB38(v0);
  MEMORY[0x270FA5388](v1);
  sub_256A9FD0C();
  sub_256B3F650();
  sub_256A4A6DC();
  sub_256B3F640();
  sub_256B3F630();
  sub_256AA0EE8();
  uint64_t v2 = sub_256B3F680();
  uint64_t v3 = sub_256A4AB38(v2);
  MEMORY[0x270FA5388](v3);
  sub_256A9FF50();
  uint64_t v4 = sub_256B3F460();
  uint64_t v5 = sub_256A4AB38(v4);
  MEMORY[0x270FA5388](v5);
  sub_256AA0080();
  return sub_256A9FFB4();
}

uint64_t sub_256A8A2B8(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD00000000000001DLL && a2 == 0x8000000256B49090 || (sub_256B3FEA0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v5 = a1 == 0x5364696C61766E69 && a2 == 0xEF64616F6C656469;
    if (v5 || (sub_256B3FEA0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD000000000000010 && a2 == 0x8000000256B490B0)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v6 = sub_256B3FEA0();
      swift_bridgeObjectRelease();
      if (v6) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t sub_256A8A42C(char a1)
{
  if (!a1) {
    return 0xD00000000000001DLL;
  }
  if (a1 == 1) {
    return 0x5364696C61766E69;
  }
  return 0xD000000000000010;
}

uint64_t sub_256A8A498()
{
  return sub_256B3FF50();
}

uint64_t sub_256A8A4C0()
{
  return 12383;
}

uint64_t sub_256A8A4CC(uint64_t a1, uint64_t a2)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = sub_256B3FEA0();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_256A8A53C()
{
  return sub_256A8A42C(*v0);
}

uint64_t sub_256A8A544@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_256A8A2B8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_256A8A56C(uint64_t a1)
{
  unint64_t v2 = sub_256A981A0();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A8A5A8(uint64_t a1)
{
  unint64_t v2 = sub_256A981A0();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_256A8A5E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_256A8A4CC(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_256A8A610(uint64_t a1)
{
  unint64_t v2 = sub_256A98284();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A8A64C(uint64_t a1)
{
  unint64_t v2 = sub_256A98284();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_256A8A688(uint64_t a1)
{
  unint64_t v2 = sub_256A98238();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A8A6C4(uint64_t a1)
{
  unint64_t v2 = sub_256A98238();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_256A8A700(uint64_t a1)
{
  unint64_t v2 = sub_256A981EC();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A8A73C(uint64_t a1)
{
  unint64_t v2 = sub_256A981EC();

  return MEMORY[0x270FA00B8](a1, v2);
}

void CatalogErrors.SideloadError.encode(to:)()
{
  sub_256A4A878();
  sub_256AA0FE8();
  sub_256A39D2C(&qword_269F79C08);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v3);
  sub_256AA0800(v4, v13);
  sub_256A39D2C(&qword_269F79C10);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v5);
  sub_256A9FEE8();
  sub_256A39D2C(&qword_269F79C18);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v6);
  sub_256A4A7E4();
  sub_256A39D2C(&qword_269F79C20);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v7);
  int v8 = *(unsigned __int8 *)(v1 + 16);
  sub_256A9FFE0(v0);
  sub_256A981A0();
  sub_256AA0E90();
  if (v8)
  {
    if (v8 == 1)
    {
      sub_256A98238();
      sub_256AA00EC();
      sub_256AA09F4();
      uint64_t v9 = sub_256AA0BCC();
    }
    else
    {
      sub_256A981EC();
      sub_256AA00EC();
      sub_256AA09D0();
      uint64_t v9 = sub_256AA0F6C();
    }
    uint64_t v11 = v2;
  }
  else
  {
    sub_256A98284();
    sub_256AA00EC();
    sub_256AA0DD0();
    uint64_t v9 = sub_256AA0BD8();
  }
  v10(v9, v11);
  sub_256A9FDB0();
  v12();
  sub_256AA081C();
  sub_256A4A890();
}

void CatalogErrors.SideloadError.init(from:)()
{
  sub_256A4A878();
  uint64_t v2 = v1;
  sub_256A39D2C(&qword_269F79C48);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v3);
  sub_256AA07E4(v4, v22);
  sub_256A39D2C(&qword_269F79C50);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v5);
  sub_256A4A7CC();
  sub_256A39D2C(&qword_269F79C58);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v6);
  sub_256A9FEE8();
  unint64_t v7 = sub_256A39D2C(&qword_269F79C60);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v8);
  uint64_t v23 = v2;
  uint64_t v9 = sub_256A39D70(v2, v2[3]);
  sub_256A981A0();
  sub_256AA0B38();
  if (v0)
  {
    uint64_t v10 = (uint64_t)v23;
LABEL_10:
    sub_256A39DB4(v10);
    goto LABEL_11;
  }
  uint64_t v11 = sub_256AA0738();
  uint64_t v12 = *(void *)(v11 + 16);
  if (!v12)
  {
    uint64_t v10 = (uint64_t)v23;
LABEL_9:
    sub_256B3FBB0();
    sub_256A6E4C0();
    unint64_t v14 = v13;
    sub_256A39D2C(&qword_269F79B70);
    *unint64_t v14 = &type metadata for CatalogErrors.SideloadError;
    sub_256B3FCF0();
    sub_256AA0444();
    sub_256A4A838();
    sub_256AA08E4();
    v15();
    swift_willThrow();
    swift_unknownObjectRelease();
    uint64_t v16 = sub_256AA0C64();
    v17(v16);
    goto LABEL_10;
  }
  sub_256AA038C(v11, v12);
  sub_256AA0C78();
  if (v9 != (void *)(v7 >> 1))
  {
    uint64_t v10 = (uint64_t)v23;
    goto LABEL_9;
  }
  if (v7)
  {
    sub_256A98238();
    sub_256A9FF10();
    sub_256AA06A4();
    sub_256AA0EDC();
  }
  else
  {
    sub_256A98284();
    sub_256A9FF10();
    sub_256AA0960();
    sub_256AA0F60();
  }
  uint64_t v18 = sub_256A9FCC0();
  v19(v18);
  swift_unknownObjectRelease();
  uint64_t v20 = sub_256AA0200();
  v21(v20);
  sub_256AA0D08();
LABEL_11:
  sub_256AA081C();
  sub_256A4A890();
}

void sub_256A8AE34()
{
}

void sub_256A8AE4C()
{
}

uint64_t CatalogErrors.AvailabilityError.hash(into:)()
{
  return sub_256B3FF50();
}

uint64_t sub_256A8AE90(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000025 && a2 == 0x8000000256B490D0)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = sub_256B3FEA0();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

unint64_t sub_256A8AF18()
{
  return 0xD000000000000025;
}

uint64_t sub_256A8AF38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_256A8AE90(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_256A8AF64(uint64_t a1)
{
  unint64_t v2 = sub_256A982D0();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A8AFA0(uint64_t a1)
{
  unint64_t v2 = sub_256A982D0();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_256A8AFDC(uint64_t a1)
{
  unint64_t v2 = sub_256A9831C();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A8B018(uint64_t a1)
{
  unint64_t v2 = sub_256A9831C();

  return MEMORY[0x270FA00B8](a1, v2);
}

void CatalogErrors.AvailabilityError.encode(to:)()
{
  sub_256A4A878();
  unint64_t v2 = v1;
  sub_256A39D2C(&qword_269F79C68);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v3);
  sub_256A84158();
  uint64_t v4 = sub_256A39D2C(&qword_269F79C70);
  sub_256A49FB8();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  sub_256A6E704();
  sub_256A9FFE0(v2);
  sub_256A982D0();
  sub_256AA0FB8();
  sub_256B3FF90();
  sub_256A9831C();
  sub_256AA0914();
  sub_256B3FDC0();
  sub_256A6E550();
  v8();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0, v4);
  sub_256A4A890();
}

uint64_t CatalogErrors.AvailabilityError.hashValue.getter()
{
  return sub_256B3FF70();
}

void CatalogErrors.AvailabilityError.init(from:)()
{
  sub_256A4A878();
  unint64_t v2 = v1;
  sub_256A39D2C(&qword_269F79C88);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v3);
  sub_256A39D2C((uint64_t *)&unk_269F79C90);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v4);
  sub_256A84170();
  sub_256AA0CB8(v2);
  sub_256A982D0();
  sub_256AA0AD0();
  sub_256B3FF80();
  if (v0) {
    goto LABEL_6;
  }
  uint64_t v5 = sub_256B3FDA0();
  uint64_t v6 = *(void *)(v5 + 16);
  if (!v6
    || (sub_256A9FA7C(1, v6, v5, v5 + 32, 0, (2 * v6) | 1),
        uint64_t v8 = v7,
        unint64_t v10 = v9,
        swift_bridgeObjectRelease(),
        v8 != v10 >> 1))
  {
    sub_256B3FBB0();
    sub_256A6E4C0();
    uint64_t v12 = v11;
    sub_256A39D2C(&qword_269F79B70);
    *uint64_t v12 = &type metadata for CatalogErrors.AvailabilityError;
    sub_256B3FCF0();
    sub_256AA0444();
    sub_256A4A838();
    sub_256AA08E4();
    v13();
    swift_willThrow();
    swift_unknownObjectRelease();
    uint64_t v14 = sub_256AA1020();
    v15(v14);
LABEL_6:
    uint64_t v18 = (uint64_t)v2;
    goto LABEL_7;
  }
  sub_256A9831C();
  sub_256B3FCE0();
  sub_256AA0BCC();
  sub_256A9FDB0();
  v16();
  swift_unknownObjectRelease();
  sub_256AA1020();
  sub_256A9FDB0();
  v17();
  uint64_t v18 = (uint64_t)v2;
LABEL_7:
  sub_256A39DB4(v18);
  sub_256A7AC14();
  sub_256A4A890();
}

uint64_t sub_256A8B480()
{
  return CatalogErrors.AvailabilityError.hashValue.getter();
}

uint64_t sub_256A8B498()
{
  return CatalogErrors.AvailabilityError.hash(into:)();
}

uint64_t sub_256A8B4B0()
{
  return sub_256B3F200();
}

void sub_256A8B4C8()
{
}

void sub_256A8B4E0()
{
}

uint64_t InferenceProvider.id.getter()
{
  return sub_256A4A370();
}

uint64_t InferenceProvider.hostedOnServer.getter()
{
  int v1 = *((unsigned __int8 *)v0 + 16);
  if (v1 != 2) {
    return v1 & 1;
  }
  uint64_t v2 = *v0;
  uint64_t v3 = v0[1];
  if (v2 == 0xD00000000000001ALL)
  {
    sub_256A4B6C4();
    if (v7) {
      return 0;
    }
  }
  sub_256AA0370();
  uint64_t result = sub_256AA01B8();
  if ((v5 & 1) == 0)
  {
    if (v2 == 0xD00000000000001BLL)
    {
      sub_256A4B6C4();
      if (v7) {
        return 0;
      }
    }
    sub_256AA0370();
    uint64_t result = sub_256AA01B8();
    if ((v6 & 1) == 0)
    {
      BOOL v7 = v2 == 2019650145 && v3 == 0xE400000000000000;
      if (v7) {
        return 1;
      }
      if (sub_256AA0370()) {
        return 1;
      }
      if (v2 == 0xD000000000000011)
      {
        sub_256A4B6C4();
        if (v7) {
          return 1;
        }
      }
      if (sub_256AA0370()) {
        return 1;
      }
      if (v2 != 0xD00000000000001BLL || (sub_256A4B6C4(), !v7)) {
        sub_256AA0370();
      }
      return 0;
    }
  }
  return result;
}

ModelCatalog::InferenceProvider __swiftcall InferenceProvider.init(id:hostedOnServerOverride:)(Swift::String id, Swift::Bool_optional hostedOnServerOverride)
{
  *(Swift::String *)uint64_t v2 = id;
  *(Swift::Bool_optional *)(v2 + 16) = hostedOnServerOverride;
  result.id = id;
  result.hostedOnServerOverride = hostedOnServerOverride;
  return result;
}

void static InferenceProvider.TokenGenerationInference.getter(uint64_t a1@<X8>)
{
}

void static InferenceProvider.VisualGenerationInference.getter(uint64_t a1@<X8>)
{
}

void static InferenceProvider.AJAXInferenceProvider.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 2019650145;
  *(void *)(a1 + 8) = 0xE400000000000000;
  *(unsigned char *)(a1 + 16) = 2;
}

void static InferenceProvider.PrivateMLClient.getter(uint64_t a1@<X8>)
{
}

void static InferenceProvider.SafetyGenerationInference.getter(uint64_t a1@<X8>)
{
}

void static InferenceProvider.ChatGPT.getter(uint64_t a1@<X8>)
{
}

uint64_t InferenceProvider.hash(into:)()
{
  int v1 = *(unsigned __int8 *)(v0 + 16);
  swift_bridgeObjectRetain();
  sub_256B3F740();
  swift_bridgeObjectRelease();
  if (v1 != 2) {
    sub_256B3FF60();
  }
  return sub_256B3FF60();
}

uint64_t static InferenceProvider.== infix(_:_:)(uint64_t a1)
{
  uint64_t v1 = sub_256AA0598(a1);
  int v5 = *(unsigned __int8 *)(v4 + 16);
  int v6 = *(unsigned __int8 *)(v3 + 16);
  BOOL v7 = v1 == *(void *)v3 && v2 == *(void *)(v3 + 8);
  if (v7 || (sub_256B3FEA0(), uint64_t result = sub_256AA01B8(), (v9 & 1) != 0))
  {
    if (v5 == 2)
    {
      if (v6 != 2) {
        return 0;
      }
    }
    else if (v6 == 2 || ((((v5 & 1) == 0) ^ v6) & 1) == 0)
    {
      return 0;
    }
    return 1;
  }
  return result;
}

uint64_t sub_256A8B7E0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (sub_256B3FEA0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000256B49100)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_256B3FEA0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_256A8B8B8(char a1)
{
  if (a1) {
    return 0xD000000000000016;
  }
  else {
    return 25705;
  }
}

uint64_t sub_256A8B8E8()
{
  return sub_256A8B8B8(*v0);
}

uint64_t sub_256A8B8F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_256A8B7E0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_256A8B918(uint64_t a1)
{
  unint64_t v2 = sub_256A98368();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A8B954(uint64_t a1)
{
  unint64_t v2 = sub_256A98368();

  return MEMORY[0x270FA00B8](a1, v2);
}

void InferenceProvider.encode(to:)()
{
  sub_256A4A878();
  unint64_t v2 = v1;
  sub_256A39D2C(&qword_26B2B36B8);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v3);
  sub_256A4A7CC();
  sub_256A39D70(v2, v2[3]);
  sub_256A98368();
  sub_256AA0F40();
  sub_256B3FF90();
  sub_256A6F0E4();
  sub_256B3FE20();
  if (!v0)
  {
    sub_256AA0684();
    sub_256B3FDE0();
  }
  sub_256AA05D0();
  v4();
  sub_256A6ECF0();
  sub_256A4A890();
}

uint64_t InferenceProvider.hashValue.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 16);
  sub_256A7B200();
  swift_bridgeObjectRetain();
  sub_256AA0354();
  swift_bridgeObjectRelease();
  if (v1 != 2) {
    sub_256B3FF60();
  }
  sub_256B3FF60();
  return sub_256B3FF70();
}

void InferenceProvider.init(from:)()
{
  sub_256A4A878();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  sub_256A39D2C((uint64_t *)&unk_26B2B5F08);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v5);
  sub_256A6E86C();
  sub_256A98368();
  sub_256AA05DC();
  if (v0)
  {
    sub_256A39DB4(v2);
  }
  else
  {
    uint64_t v6 = sub_256AA0AAC();
    uint64_t v8 = v7;
    swift_bridgeObjectRetain();
    char v9 = sub_256B3FD10();
    sub_256A6E550();
    v10();
    *(void *)uint64_t v4 = v6;
    *(void *)(v4 + 8) = v8;
    *(unsigned char *)(v4 + 16) = v9;
    sub_256A39DB4(v2);
    swift_bridgeObjectRelease();
  }
  sub_256A6E988();
  sub_256A4A890();
}

uint64_t sub_256A8BC78@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = InferenceProvider.id.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_256A8BCA8()
{
  int v1 = *(unsigned __int8 *)(v0 + 16);
  sub_256B3FF40();
  swift_bridgeObjectRetain();
  sub_256AA0354();
  swift_bridgeObjectRelease();
  if (v1 != 2) {
    sub_256B3FF60();
  }
  sub_256B3FF60();
  return sub_256B3FF70();
}

void sub_256A8BD30()
{
}

void sub_256A8BD48()
{
}

void sub_256A8BD60()
{
  qword_269F79B10 = (uint64_t)&unk_2705FFA40;
}

ModelCatalog::Platform __swiftcall Platform.init(platformType:version:)(ModelCatalog::Platform::PlatformType platformType, Swift::String version)
{
  *(unsigned char *)uint64_t v2 = *(unsigned char *)platformType;
  *(Swift::String *)(v2 + 8) = version;
  result.version = version;
  result.platformType = platformType;
  return result;
}

uint64_t ResourceConfiguration.resourceType.getter()
{
  return sub_256A4A370();
}

uint64_t ResourceConfiguration.sourceName.getter()
{
  return sub_256A4A370();
}

uint64_t ResourceConfiguration.id.getter()
{
  return sub_256A4A370();
}

uint64_t ResourceConfiguration.dependentResourceIDs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ResourceConfiguration.sideloaded.getter()
{
  return *(unsigned __int8 *)(v0 + 56);
}

uint64_t ResourceConfiguration.runtimeInformation.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ResourceConfiguration.assetBacked.getter()
{
  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t ResourceConfiguration.assetSubscriptionInformation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 88);
  uint64_t v3 = *(void *)(v1 + 96);
  uint64_t v4 = *(void *)(v1 + 104);
  uint64_t v5 = *(void *)(v1 + 112);
  uint64_t v6 = *(void *)(v1 + 120);
  uint64_t v7 = *(void *)(v1 + 128);
  uint64_t v8 = *(void *)(v1 + 136);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  *(_WORD *)(a1 + 56) = *(_WORD *)(v1 + 144);
  return sub_256A54690(v2, v3);
}

uint64_t ResourceConfiguration.hostedInAsset.getter()
{
  return sub_256A4A370();
}

uint64_t ResourceConfiguration.tags.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ResourceConfiguration.platforms.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ResourceConfiguration.init(resourceType:id:dependentResourceIDs:preconditions:runtimeInformation:assetBacked:assetSubscriptionInformation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, long long *a10)
{
  long long v18 = *a10;
  long long v19 = a10[1];
  long long v20 = a10[2];
  uint64_t v21 = *((void *)a10 + 6);
  __int16 v22 = *((_WORD *)a10 + 28);
  if (qword_269F78A80 != -1)
  {
    uint64_t v28 = a7;
    long long v26 = a10[1];
    long long v27 = *a10;
    long long v25 = a10[2];
    swift_once();
    long long v20 = v25;
    long long v19 = v26;
    long long v18 = v27;
    a7 = v28;
  }
  uint64_t v23 = qword_269F79B10;
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = 0;
  *(void *)(a9 + 24) = 0xE000000000000000;
  *(void *)(a9 + 32) = a3;
  *(void *)(a9 + 40) = a4;
  *(void *)(a9 + 48) = a5;
  *(unsigned char *)(a9 + 56) = 1;
  *(void *)(a9 + 64) = a6;
  *(void *)(a9 + 72) = a7;
  *(unsigned char *)(a9 + 80) = a8 & 1;
  *(_OWORD *)(a9 + 88) = v18;
  *(_OWORD *)(a9 + 104) = v19;
  *(_OWORD *)(a9 + 120) = v20;
  *(void *)(a9 + 136) = v21;
  *(_WORD *)(a9 + 144) = v22;
  *(void *)(a9 + 152) = 0;
  *(void *)(a9 + 160) = 0;
  *(void *)(a9 + 168) = 0;
  *(void *)(a9 + 176) = v23;

  return swift_bridgeObjectRetain();
}

uint64_t ResourceConfiguration.init(resourceType:sourceName:id:dependentResourceIDs:preconditions:runtimeInformation:assetBacked:assetSubscriptionInformation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  sub_256AA0574();
  __n128 v19 = sub_256AA102C(a11);
  if (qword_269F78A80 != -1)
  {
    uint64_t v28 = v17;
    uint64_t v29 = v18;
    uint64_t v27 = v16;
    __n128 v25 = v20;
    __n128 v26 = v19;
    __n128 v24 = v21;
    swift_once();
    __n128 v21 = v24;
    __n128 v20 = v25;
    __n128 v19 = v26;
    uint64_t v16 = v27;
    uint64_t v17 = v28;
    uint64_t v18 = v29;
  }
  sub_256AA0134(v19, v20, v21, qword_269F79B10, v12, v13, v14, v15, v16, v17, v18);
  *(void *)(v11 + 168) = 0;
  *(void *)(v11 + 176) = v22;

  return swift_bridgeObjectRetain();
}

uint64_t ResourceConfiguration.init(resourceType:sourceName:id:dependentResourceIDs:preconditions:runtimeInformation:assetBacked:assetSubscriptionInformation:tags:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  sub_256AA0574();
  __n128 v19 = sub_256AA102C(a11);
  if (qword_269F78A80 != -1)
  {
    uint64_t v30 = v18;
    uint64_t v28 = v16;
    uint64_t v29 = v17;
    __n128 v26 = v20;
    __n128 v27 = v19;
    __n128 v25 = v21;
    swift_once();
    __n128 v21 = v25;
    __n128 v20 = v26;
    __n128 v19 = v27;
    uint64_t v16 = v28;
    uint64_t v17 = v29;
    uint64_t v18 = v30;
  }
  sub_256AA0134(v19, v20, v21, qword_269F79B10, v12, v13, v14, v15, v16, v17, v18);
  *(void *)(v11 + 168) = v23;
  *(void *)(v11 + 176) = v22;

  return swift_bridgeObjectRetain();
}

__n128 ResourceConfiguration.init(resourceType:sourceName:id:dependentResourceIDs:preconditions:runtimeInformation:assetBacked:assetSubscriptionInformation:tags:platforms:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  long long v14 = *(_OWORD *)(a12 + 16);
  *(_OWORD *)(a9 + 88) = *(_OWORD *)a12;
  uint64_t v15 = *(void *)(a12 + 48);
  __int16 v16 = *(_WORD *)(a12 + 56);
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(void *)(a9 + 48) = a7;
  *(unsigned char *)(a9 + 56) = 1;
  *(void *)(a9 + 64) = a8;
  *(void *)(a9 + 72) = a10;
  *(unsigned char *)(a9 + 80) = a11;
  *(_OWORD *)(a9 + 104) = v14;
  __n128 result = *(__n128 *)(a12 + 32);
  *(__n128 *)(a9 + 120) = result;
  *(void *)(a9 + 136) = v15;
  *(_WORD *)(a9 + 144) = v16;
  *(void *)(a9 + 152) = 0;
  *(void *)(a9 + 160) = 0;
  *(void *)(a9 + 168) = a13;
  *(void *)(a9 + 176) = a14;
  return result;
}

void ResourceConfiguration.hash(into:)(uint64_t a1)
{
  uint64_t v3 = v1[9];
  uint64_t v7 = v1[12];
  uint64_t v8 = v1[20];
  uint64_t v9 = v1[21];
  uint64_t v10 = v1[22];
  swift_bridgeObjectRetain();
  sub_256B3F740();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_256AA1020();
  sub_256B3F740();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_256B3F740();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_256A97D1C();
  swift_bridgeObjectRelease();
  sub_256B3FF60();
  swift_bridgeObjectRetain();
  sub_256A97C6C();
  swift_bridgeObjectRelease();
  if (v3)
  {
    sub_256AA0B20();
    swift_bridgeObjectRetain();
    sub_256A97B18(a1, v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_256AA0C30();
  }
  sub_256B3FF60();
  if (v7)
  {
    sub_256AA0B20();
    AssetSubscriptionInformation.hash(into:)();
    if (v8) {
      goto LABEL_6;
    }
  }
  else
  {
    sub_256AA0C30();
    if (v8)
    {
LABEL_6:
      sub_256AA0B20();
      swift_bridgeObjectRetain();
      sub_256B3F740();
      swift_bridgeObjectRelease();
      if (v9) {
        goto LABEL_7;
      }
LABEL_13:
      sub_256AA0C30();
      if (v10) {
        goto LABEL_8;
      }
LABEL_14:
      sub_256AA0C30();
      sub_256AA0B5C();
      return;
    }
  }
  sub_256AA0C30();
  if (!v9) {
    goto LABEL_13;
  }
LABEL_7:
  sub_256AA0B20();
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_256AA1020();
  sub_256A97AA8(v4, v5);
  swift_bridgeObjectRelease();
  if (!v10) {
    goto LABEL_14;
  }
LABEL_8:
  sub_256AA0B20();
  swift_bridgeObjectRetain();
  sub_256A97970();
  sub_256AA0B5C();
  swift_bridgeObjectRelease();
}

uint64_t sub_256A8C40C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656372756F736572 && a2 == 0xEC00000065707954;
  if (v2 || (sub_256B3FEA0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x614E656372756F73 && a2 == 0xEA0000000000656DLL;
    if (v6 || (sub_256B3FEA0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 25705 && a2 == 0xE200000000000000;
      if (v7 || (sub_256B3FEA0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0xD000000000000014 && a2 == 0x8000000256B49120 || (sub_256B3FEA0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        BOOL v8 = a1 == 0x64616F6C65646973 && a2 == 0xEA00000000006465;
        if (v8 || (sub_256B3FEA0() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else
        {
          BOOL v9 = a1 == 0x69646E6F63657270 && a2 == 0xED0000736E6F6974;
          if (v9 || (sub_256B3FEA0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 5;
          }
          else if (a1 == 0xD000000000000012 && a2 == 0x8000000256B48AD0 || (sub_256B3FEA0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 6;
          }
          else
          {
            BOOL v10 = a1 == 0x6361427465737361 && a2 == 0xEB0000000064656BLL;
            if (v10 || (sub_256B3FEA0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 7;
            }
            else if (a1 == 0xD00000000000001CLL && a2 == 0x8000000256B49140 || (sub_256B3FEA0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 8;
            }
            else
            {
              BOOL v11 = a1 == 0x6E49646574736F68 && a2 == 0xED00007465737341;
              if (v11 || (sub_256B3FEA0() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 9;
              }
              else
              {
                BOOL v12 = a1 == 1936154996 && a2 == 0xE400000000000000;
                if (v12 || (sub_256B3FEA0() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 10;
                }
                else if (a1 == 0x6D726F6674616C70 && a2 == 0xE900000000000073)
                {
                  swift_bridgeObjectRelease();
                  return 11;
                }
                else
                {
                  char v14 = sub_256B3FEA0();
                  swift_bridgeObjectRelease();
                  if (v14) {
                    return 11;
                  }
                  else {
                    return 12;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_256A8C91C()
{
  return 12;
}

unint64_t sub_256A8C924(char a1)
{
  unint64_t result = 0x656372756F736572;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x614E656372756F73;
      break;
    case 2:
      unint64_t result = 25705;
      break;
    case 3:
      unint64_t result = 0xD000000000000014;
      break;
    case 4:
      unint64_t result = 0x64616F6C65646973;
      break;
    case 5:
      unint64_t result = 0x69646E6F63657270;
      break;
    case 6:
      unint64_t result = 0xD000000000000012;
      break;
    case 7:
      unint64_t result = 0x6361427465737361;
      break;
    case 8:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 9:
      unint64_t result = 0x6E49646574736F68;
      break;
    case 10:
      unint64_t result = 1936154996;
      break;
    case 11:
      unint64_t result = 0x6D726F6674616C70;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_256A8CACC()
{
  return sub_256A8C924(*v0);
}

uint64_t sub_256A8CAD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_256A8C40C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_256A8CAFC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_256A8C91C();
  *a1 = result;
  return result;
}

uint64_t sub_256A8CB24(uint64_t a1)
{
  unint64_t v2 = sub_256A983B4();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A8CB60(uint64_t a1)
{
  unint64_t v2 = sub_256A983B4();

  return MEMORY[0x270FA00B8](a1, v2);
}

void ResourceConfiguration.encode(to:)()
{
  sub_256A4A878();
  uint64_t v3 = v2;
  sub_256A39D2C((uint64_t *)&unk_26B2B36C0);
  sub_256A49FB8();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  sub_256A84170();
  uint64_t v7 = v3[3];
  BOOL v8 = v3;
  uint64_t v10 = v9;
  sub_256A39D70(v8, v7);
  sub_256A983B4();
  sub_256B3FF90();
  sub_256B3FE20();
  if (!v0)
  {
    sub_256B3FE20();
    sub_256B3FE20();
    sub_256A39D2C(&qword_26B2B6320);
    sub_256A9857C(&qword_26B2B36A8);
    sub_256B3FE60();
    sub_256B3FE30();
    sub_256A39D2C(&qword_26B2B6200);
    sub_256A98710(&qword_26B2B3678, &qword_26B2B6200, (void (*)(void))sub_256A98400);
    sub_256AA07A0();
    sub_256B3FE60();
    sub_256A39D2C(&qword_26B2B6218);
    sub_256A98710((unint64_t *)&unk_26B2B3680, &qword_26B2B6218, (void (*)(void))sub_256A9844C);
    sub_256AA07A0();
    sub_256B3FE10();
    sub_256B3FE30();
    sub_256A98498();
    sub_256B3FE10();
    sub_256B3FDD0();
    sub_256A39D2C(&qword_26B2B6318);
    sub_256A98710(&qword_26B2B3690, &qword_26B2B6318, (void (*)(void))sub_256A984E4);
    sub_256B3FE10();
    sub_256A39D2C(&qword_26B2B6220);
    sub_256A98710((unint64_t *)&unk_26B2B3698, &qword_26B2B6220, (void (*)(void))sub_256A98530);
    sub_256B3FE10();
  }
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v10);
  sub_256A4A890();
}

uint64_t ResourceConfiguration.hashValue.getter()
{
  sub_256A7B200();
  ResourceConfiguration.hash(into:)((uint64_t)v1);
  return sub_256B3FF70();
}

void ResourceConfiguration.init(from:)()
{
  sub_256A4A878();
  unint64_t v2 = v1;
  uint64_t v4 = v3;
  sub_256A39D2C(&qword_26B2B5F18);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v5);
  sub_256A6E704();
  sub_256A7B704(v2);
  sub_256A983B4();
  sub_256B3FF80();
  if (v0)
  {
    int v6 = 0;
    unsigned int v7 = 0;
  }
  else
  {
    uint64_t v13 = sub_256AA0614();
    uint64_t v15 = v14;
    swift_bridgeObjectRetain();
    uint64_t v48 = v15;
    uint64_t v35 = sub_256AA0614();
    LOBYTE(v54) = 2;
    uint64_t v17 = v16;
    swift_bridgeObjectRetain();
    uint64_t v47 = v17;
    uint64_t v34 = sub_256AA0614();
    uint64_t v19 = v18;
    sub_256A39D2C(&qword_26B2B6320);
    LOBYTE(v53[0]) = 3;
    uint64_t v20 = sub_256A9857C(&qword_26B2B5EE0);
    swift_bridgeObjectRetain();
    sub_256AA0520();
    sub_256B3FD90();
    uint64_t v46 = v19;
    if (!v20)
    {
      uint64_t v23 = v54;
      LOBYTE(v54) = 4;
      swift_bridgeObjectRetain();
      char v33 = sub_256AA0E04();
      sub_256A39D2C(&qword_26B2B6200);
      sub_256A98710((unint64_t *)&unk_26B2B5EA8, &qword_26B2B6200, (void (*)(void))sub_256A985E0);
      sub_256B3FD90();
      sub_256A39D2C(&qword_26B2B6218);
      sub_256A98710(&qword_26B2B5EB8, &qword_26B2B6218, (void (*)(void))sub_256A9862C);
      uint64_t v50 = v54;
      swift_bridgeObjectRetain();
      sub_256B3FD40();
      uint64_t v24 = v54;
      LOBYTE(v54) = 7;
      uint64_t v49 = v24;
      swift_bridgeObjectRetain();
      char v32 = sub_256AA0E04();
      sub_256A98678();
      sub_256AA0914();
      sub_256B3FD40();
      int v51 = 1;
      uint64_t v25 = v54;
      LOBYTE(v54) = 9;
      uint64_t v42 = v25;
      uint64_t v43 = v55;
      uint64_t v44 = v56;
      uint64_t v45 = v59;
      uint64_t v39 = v57;
      uint64_t v40 = v58;
      uint64_t v38 = v60;
      __int16 v41 = v61;
      sub_256A54690(v25, v55);
      uint64_t v26 = sub_256B3FD00();
      uint64_t v37 = v27;
      uint64_t v28 = v26;
      sub_256A39D2C(&qword_26B2B6318);
      LOBYTE(v53[0]) = 10;
      uint64_t v29 = sub_256A98710((unint64_t *)&unk_26B2B5EC0, &qword_26B2B6318, (void (*)(void))sub_256A986C4);
      swift_bridgeObjectRetain();
      sub_256AA0520();
      sub_256B3FD40();
      if (!v29)
      {
        sub_256A39D2C(&qword_26B2B6220);
        char v80 = 11;
        sub_256A98710((unint64_t *)&unk_26B2B5ED0, &qword_26B2B6220, (void (*)(void))sub_256A9877C);
        uint64_t v36 = v54;
        swift_bridgeObjectRetain();
        sub_256B3FD40();
        sub_256A9FDB0();
        v31();
        uint64_t v52 = v81;
        v53[0] = v13;
        v53[1] = v48;
        v53[2] = v35;
        v53[3] = v47;
        v53[4] = v34;
        v53[5] = v46;
        v53[6] = v23;
        LOBYTE(v53[7]) = v33 & 1;
        v53[8] = v50;
        v53[9] = v49;
        LOBYTE(v53[10]) = v32 & 1;
        v53[11] = v42;
        v53[12] = v43;
        v53[13] = v44;
        v53[14] = v39;
        v53[15] = v40;
        v53[16] = v45;
        v53[17] = v38;
        LOWORD(v53[18]) = v41;
        v53[19] = v28;
        v53[20] = v37;
        v53[21] = v36;
        v53[22] = v81;
        sub_256A545A0((uint64_t)v53);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_256A54744(v42, v43);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        memcpy(v4, v53, 0xB8uLL);
        sub_256A39DB4((uint64_t)v2);
        uint64_t v54 = v13;
        uint64_t v55 = v48;
        uint64_t v56 = v35;
        uint64_t v57 = v47;
        uint64_t v58 = v34;
        uint64_t v59 = v46;
        uint64_t v60 = v23;
        LOBYTE(v61) = v33 & 1;
        *(_DWORD *)((char *)&v61 + 1) = v85[0];
        HIDWORD(v61) = *(_DWORD *)((char *)v85 + 3);
        uint64_t v62 = v50;
        uint64_t v63 = v49;
        char v64 = v32 & 1;
        *(_DWORD *)int v65 = *(_DWORD *)v84;
        *(_DWORD *)&v65[3] = *(_DWORD *)&v84[3];
        uint64_t v66 = v42;
        uint64_t v67 = v43;
        uint64_t v68 = v44;
        uint64_t v69 = v39;
        uint64_t v70 = v40;
        uint64_t v71 = v45;
        uint64_t v72 = v38;
        __int16 v73 = v41;
        int v74 = v82;
        __int16 v75 = v83;
        uint64_t v76 = v28;
        uint64_t v77 = v37;
        uint64_t v78 = v36;
        uint64_t v79 = v52;
        sub_256A6DFC8((uint64_t)&v54);
        goto LABEL_22;
      }
      sub_256A9FDB0();
      v30();
      swift_bridgeObjectRelease();
      sub_256AA0218();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int v11 = 1;
      sub_256A39DB4((uint64_t)v2);
      LOBYTE(v12) = 1;
      int v8 = 1;
      int v9 = 1;
      int v10 = 1;
      int v6 = 1;
      goto LABEL_14;
    }
    uint64_t v21 = sub_256A9FD98();
    v22(v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int v6 = 0;
    unsigned int v7 = 7;
  }
  sub_256A39DB4((uint64_t)v2);
  int v8 = (v7 >> 2) & 1;
  int v9 = (v7 >> 3) & 1;
  int v10 = (v7 >> 5) & 1;
  if ((v7 & 1) == 0)
  {
    int v11 = 0;
    int v51 = 0;
    if ((v7 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
  int v51 = 0;
  int v11 = 0;
  int v12 = (v7 >> 1) & 1;
LABEL_14:
  swift_bridgeObjectRelease();
  if ((v12 & 1) == 0)
  {
LABEL_6:
    if (v8) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  swift_bridgeObjectRelease();
  if (v8)
  {
LABEL_7:
    swift_bridgeObjectRelease();
    if ((v9 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  if (!v9)
  {
LABEL_8:
    if (v10) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  swift_bridgeObjectRelease();
  if (v10)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    if ((v6 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  if (!v6)
  {
LABEL_10:
    if (v51) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  swift_bridgeObjectRelease();
  if (v51)
  {
LABEL_11:
    sub_256AA0218();
    if ((v11 & 1) == 0) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
LABEL_20:
  if (!v11) {
    goto LABEL_22;
  }
LABEL_21:
  swift_bridgeObjectRelease();
LABEL_22:
  sub_256A6E988();
  sub_256A4A890();
}

uint64_t sub_256A8DB70@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ResourceConfiguration.id.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_256A8DBA0()
{
  sub_256B3FF40();
  ResourceConfiguration.hash(into:)((uint64_t)v1);
  return sub_256B3FF70();
}

void sub_256A8DBE0()
{
}

void sub_256A8DBF8()
{
}

uint64_t ResourceBase.id.getter()
{
  return sub_256A4A370();
}

ModelCatalog::ResourceBase __swiftcall ResourceBase.init(id:dependentResourceIDs:)(Swift::String id, Swift::OpaquePointer dependentResourceIDs)
{
  *(Swift::String *)uint64_t v2 = id;
  *(Swift::OpaquePointer *)(v2 + 16) = dependentResourceIDs;
  result.id = id;
  result.dependentResourceIDs = dependentResourceIDs;
  return result;
}

uint64_t ResourceBase.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_256A7A9B8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_256A4A370();
  sub_256A97D1C();

  return swift_bridgeObjectRelease();
}

uint64_t static ResourceBase.== infix(_:_:)(void *a1, void *a2)
{
  BOOL v2 = *a1 == *a2 && a1[1] == a2[1];
  if (!v2 && (sub_256B3FEA0() & 1) == 0) {
    return 0;
  }
  uint64_t v3 = (void *)sub_256A4A370();

  return sub_256A87844(v3, v4);
}

uint64_t sub_256A8DD1C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (sub_256B3FEA0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000256B49120)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_256B3FEA0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_256A8DDF4(char a1)
{
  if (a1) {
    return 0xD000000000000014;
  }
  else {
    return 25705;
  }
}

uint64_t sub_256A8DE24()
{
  return sub_256A8DDF4(*v0);
}

uint64_t sub_256A8DE2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_256A8DD1C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_256A8DE54(uint64_t a1)
{
  unint64_t v2 = sub_256A987C8();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A8DE90(uint64_t a1)
{
  unint64_t v2 = sub_256A987C8();

  return MEMORY[0x270FA00B8](a1, v2);
}

void ResourceBase.encode(to:)()
{
  sub_256A4A878();
  unint64_t v2 = v1;
  sub_256A39D2C(&qword_269F79CA0);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v3);
  sub_256A4A7CC();
  sub_256A7B704(v2);
  sub_256A987C8();
  sub_256AA032C();
  sub_256A6F0E4();
  sub_256AA0850();
  sub_256AA0F28();
  if (!v0)
  {
    sub_256A39D2C(&qword_26B2B6320);
    sub_256A9857C(&qword_26B2B36A8);
    sub_256AA0B84();
  }
  sub_256A9FDB0();
  v4();
  sub_256A6ECF0();
  sub_256A4A890();
}

uint64_t ResourceBase.hashValue.getter()
{
  sub_256A7B200();
  swift_bridgeObjectRetain();
  sub_256AA0354();
  swift_bridgeObjectRelease();
  uint64_t v0 = swift_bridgeObjectRetain();
  sub_256AA085C(v0, v1, v2, v3, v4, v5, v6, v7, v9, v10);
  sub_256A97D1C();
  swift_bridgeObjectRelease();
  return sub_256B3FF70();
}

void ResourceBase.init(from:)()
{
  sub_256A4A878();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  sub_256A39D2C(&qword_269F79CB0);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v5);
  sub_256A6E86C();
  sub_256A987C8();
  sub_256AA05DC();
  if (v0)
  {
    sub_256A39DB4(v2);
  }
  else
  {
    uint64_t v6 = sub_256AA0AAC();
    uint64_t v8 = v7;
    sub_256A39D2C(&qword_26B2B6320);
    sub_256A9857C(&qword_26B2B5EE0);
    swift_bridgeObjectRetain();
    sub_256AA0F00();
    sub_256B3FD90();
    sub_256A6E550();
    v9();
    *uint64_t v4 = v6;
    v4[1] = v8;
    v4[2] = v10;
    swift_bridgeObjectRetain();
    sub_256A39DB4(v2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_256A6E988();
  sub_256A4A890();
}

uint64_t sub_256A8E240@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ResourceBase.id.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_256A8E270()
{
  return sub_256B3FF70();
}

void sub_256A8E2F4()
{
}

void sub_256A8E30C()
{
}

void __swiftcall AssetSubscriptionInformation.init(subscriberID:subscriptionName:assetSetName:)(ModelCatalog::AssetSubscriptionInformation *__return_ptr retstr, Swift::String subscriberID, Swift::String subscriptionName, Swift::String assetSetName)
{
  retstr->subscriberID = subscriberID;
  retstr->subscriptionName = subscriptionName;
  retstr->assetSetName = assetSetName;
  retstr->ttl.value = 0;
  *(_WORD *)&retstr->ttl.is_nil = 2817;
}

void __swiftcall AssetSubscriptionInformation.init(subscriberID:subscriptionName:assetSetName:ttl:requestResourcesKey:)(ModelCatalog::AssetSubscriptionInformation *__return_ptr retstr, Swift::String subscriberID, Swift::String subscriptionName, Swift::String assetSetName, Swift::Int_optional ttl, ModelCatalog::RequestResourcesKey_optional requestResourcesKey)
{
  ModelCatalog::RequestResourcesKey v6 = *(unsigned char *)requestResourcesKey.value;
  retstr->subscriberID = subscriberID;
  retstr->subscriptionName = subscriptionName;
  retstr->assetSetName = assetSetName;
  retstr->ttl.value = ttl.value;
  retstr->ttl.is_nil = ttl.is_nil;
  retstr->requestResourcesKey.value = v6;
}

uint64_t AssetSubscriptionInformation.subscriberID.getter()
{
  return sub_256A4A370();
}

uint64_t AssetSubscriptionInformation.subscriptionName.getter()
{
  return sub_256A4A370();
}

uint64_t AssetSubscriptionInformation.assetSetName.getter()
{
  return sub_256A4A370();
}

uint64_t AssetSubscriptionInformation.ttl.getter()
{
  return *(void *)(v0 + 48);
}

void AssetSubscriptionInformation.requestResourcesKey.getter(unsigned char *a1@<X8>)
{
}

void AssetSubscriptionInformation.hash(into:)()
{
  sub_256AA0180();
  int v1 = *(unsigned __int8 *)(v0 + 56);
  int v2 = *(unsigned __int8 *)(v0 + 57);
  swift_bridgeObjectRetain();
  sub_256AA0F54();
  sub_256B3F740();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_256B3F740();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_256B3F740();
  swift_bridgeObjectRelease();
  sub_256B3FF60();
  if (v1 != 1) {
    sub_256B3FF50();
  }
  if (v2 == 11)
  {
    sub_256B3FF60();
    sub_256AA0064();
  }
  else
  {
    sub_256B3FF60();
    sub_256AA0064();
    sub_256A86918(v3, v4);
  }
}

void static AssetSubscriptionInformation.== infix(_:_:)()
{
  sub_256AA01C4();
  uint64_t v2 = sub_256AA100C(v1);
  uint64_t v7 = *(void *)(v5 + 24);
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t v8 = *(void *)(v5 + 40);
  char v9 = *(unsigned char *)(v5 + 56);
  int v25 = *(unsigned __int8 *)(v5 + 57);
  uint64_t v10 = *(void *)(v4 + 16);
  uint64_t v11 = *(void *)(v4 + 24);
  uint64_t v12 = *(void *)(v4 + 32);
  uint64_t v13 = *(void *)(v4 + 40);
  uint64_t v23 = *(void *)(v4 + 48);
  uint64_t v24 = *(void *)(v5 + 48);
  int v14 = *(unsigned __int8 *)(v4 + 56);
  BOOL v15 = v2 == *(void *)v4 && v3 == *(void *)(v4 + 8);
  int v22 = *(unsigned __int8 *)(v4 + 57);
  if (v15 || (sub_256B3FEA0(), sub_256AA01B8(), (v16 & 1) != 0))
  {
    BOOL v17 = v0 == v10 && v7 == v11;
    if (v17 || (sub_256AA0850(), sub_256B3FEA0(), sub_256AA01B8(), (v18 & 1) != 0))
    {
      BOOL v19 = v6 == v12 && v8 == v13;
      if (v19 || (sub_256B3FEA0(), sub_256AA01B8(), (v20 & 1) != 0))
      {
        if (v9)
        {
          if (!v14) {
            goto LABEL_26;
          }
          goto LABEL_23;
        }
        if (v24 == v23) {
          char v21 = v14;
        }
        else {
          char v21 = 1;
        }
        if ((v21 & 1) == 0)
        {
LABEL_23:
          if (v25 != 11 && v22 != 11) {
            sub_256B026BC(v25, v22);
          }
        }
      }
    }
  }
LABEL_26:
  sub_256AA019C();
}

unint64_t sub_256A8E63C()
{
  unint64_t result = qword_26B2B62B0;
  if (!qword_26B2B62B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B62B0);
  }
  return result;
}

unint64_t sub_256A8E688()
{
  unint64_t result = qword_26B2B5E28;
  if (!qword_26B2B5E28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5E28);
  }
  return result;
}

unint64_t sub_256A8E6D4()
{
  unint64_t result = qword_26B2B35E8;
  if (!qword_26B2B35E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B35E8);
  }
  return result;
}

uint64_t sub_256A8E720(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6269726373627573 && a2 == 0xEC00000044497265;
  if (v2 || (sub_256B3FEA0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000256B49160 || (sub_256B3FEA0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    BOOL v6 = a1 == 0x7465537465737361 && a2 == 0xEC000000656D614ELL;
    if (v6 || (sub_256B3FEA0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      BOOL v7 = a1 == 7107700 && a2 == 0xE300000000000000;
      if (v7 || (sub_256B3FEA0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else if (a1 == 0xD000000000000013 && a2 == 0x8000000256B49180)
      {
        swift_bridgeObjectRelease();
        return 4;
      }
      else
      {
        char v8 = sub_256B3FEA0();
        swift_bridgeObjectRelease();
        if (v8) {
          return 4;
        }
        else {
          return 5;
        }
      }
    }
  }
}

unint64_t sub_256A8E94C(char a1)
{
  unint64_t result = 0x6269726373627573;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0x7465537465737361;
      break;
    case 3:
      unint64_t result = 7107700;
      break;
    case 4:
      unint64_t result = 0xD000000000000013;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_256A8EA10()
{
  return sub_256A8E94C(*v0);
}

uint64_t sub_256A8EA18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_256A8E720(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_256A8EA40(uint64_t a1)
{
  unint64_t v2 = sub_256A98814();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A8EA7C(uint64_t a1)
{
  unint64_t v2 = sub_256A98814();

  return MEMORY[0x270FA00B8](a1, v2);
}

void AssetSubscriptionInformation.encode(to:)()
{
  sub_256A4A878();
  unint64_t v2 = v1;
  sub_256A39D2C(&qword_26B2B36D8);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v3);
  sub_256A4A7CC();
  sub_256A39D70(v2, v2[3]);
  sub_256A98814();
  sub_256AA0F40();
  sub_256B3FF90();
  sub_256A6F0E4();
  sub_256B3FE20();
  if (!v0)
  {
    sub_256AA0F28();
    sub_256AA0DC4();
    sub_256AA0F28();
    sub_256AA0EB0();
    sub_256AA0B78();
    sub_256B3FE00();
    sub_256A98860();
    sub_256AA0B78();
    sub_256B3FE10();
  }
  uint64_t v4 = sub_256AA0D5C();
  v5(v4);
  sub_256A6ECF0();
  sub_256A4A890();
}

uint64_t AssetSubscriptionInformation.hashValue.getter()
{
  return sub_256B3FF70();
}

void AssetSubscriptionInformation.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int16 a10, char a11, char a12)
{
  sub_256A4A878();
  int v14 = v13;
  uint64_t v16 = v15;
  sub_256A39D2C((uint64_t *)&unk_26B2B57C0);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v17);
  sub_256AA03E8();
  sub_256A39D70(v14, v14[3]);
  sub_256A98814();
  sub_256B3FF80();
  if (v12)
  {
    sub_256A39DB4((uint64_t)v14);
  }
  else
  {
    uint64_t v18 = sub_256B3FD50();
    uint64_t v20 = v19;
    uint64_t v33 = v18;
    swift_bridgeObjectRetain();
    uint64_t v21 = sub_256B3FD50();
    uint64_t v34 = v22;
    uint64_t v32 = v21;
    sub_256AA0DC4();
    swift_bridgeObjectRetain();
    uint64_t v31 = sub_256B3FD50();
    sub_256AA0EB0();
    uint64_t v24 = v23;
    swift_bridgeObjectRetain();
    uint64_t v25 = sub_256B3FD30();
    char v29 = v26;
    uint64_t v30 = v25;
    sub_256A988AC();
    sub_256B3FD40();
    uint64_t v27 = sub_256A9FFFC();
    v28(v27);
    *(void *)uint64_t v16 = v33;
    *(void *)(v16 + 8) = v20;
    *(void *)(v16 + 16) = v32;
    *(void *)(v16 + 24) = v34;
    *(void *)(v16 + 32) = v31;
    *(void *)(v16 + 40) = v24;
    *(void *)(v16 + 48) = v30;
    *(unsigned char *)(v16 + 56) = v29 & 1;
    *(unsigned char *)(v16 + 57) = a12;
    sub_256A39DB4((uint64_t)v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_256A6E988();
  sub_256A4A890();
}

uint64_t sub_256A8EFE0()
{
  return sub_256B3FF70();
}

void sub_256A8F04C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  AssetSubscriptionInformation.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8, SBYTE2(vars8), SHIBYTE(vars8));
}

void sub_256A8F064()
{
}

uint64_t ManagedRuntimeInformation.inferenceProvider.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  char v3 = *(unsigned char *)(v1 + 16);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  return swift_bridgeObjectRetain();
}

uint64_t ManagedRuntimeInformation.instanceID.getter()
{
  return sub_256A4A370();
}

void ManagedRuntimeInformation.cost.getter(uint64_t a1@<X8>)
{
}

void __swiftcall ManagedRuntimeInformation.init(inferenceProvider:cost:)(ModelCatalog::ManagedRuntimeInformation *__return_ptr retstr, ModelCatalog::InferenceProvider inferenceProvider, ModelCatalog::CostProfile cost)
{
  sub_256AA0FC4(inferenceProvider.id._countAndFlagsBits, (uint64_t)retstr);
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 32) = 0;
  sub_256AA0828(v3);
}

void __swiftcall ManagedRuntimeInformation.init(inferenceProvider:cost:instanceID:)(ModelCatalog::ManagedRuntimeInformation *__return_ptr retstr, ModelCatalog::InferenceProvider inferenceProvider, ModelCatalog::CostProfile cost, Swift::String_optional instanceID)
{
  sub_256AA0FC4(inferenceProvider.id._countAndFlagsBits, (uint64_t)retstr);
  *(void *)(v6 + 24) = v4;
  *(void *)(v6 + 32) = v5;
  sub_256AA0828(v6);
}

uint64_t ManagedRuntimeInformation.hash(into:)()
{
  int v1 = *(unsigned __int8 *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  sub_256B3F740();
  if (v1 != 2) {
    sub_256B3FF60();
  }
  sub_256B3FF60();
  swift_bridgeObjectRelease();
  sub_256B3FF60();
  if (v2)
  {
    swift_bridgeObjectRetain();
    sub_256B3F740();
    swift_bridgeObjectRelease();
  }
  sub_256B3FF50();
  sub_256B3FF60();
  sub_256B3FF60();
  return sub_256B3FF60();
}

void static ManagedRuntimeInformation.== infix(_:_:)()
{
  sub_256AA01C4();
  uint64_t v1 = sub_256AA0598(v0);
  int v5 = *(unsigned __int8 *)(v4 + 16);
  uint64_t v7 = *(void *)(v4 + 24);
  uint64_t v6 = *(void *)(v4 + 32);
  int v8 = *(unsigned __int8 *)(v3 + 16);
  uint64_t v9 = *(void *)(v3 + 24);
  uint64_t v10 = *(void *)(v3 + 32);
  BOOL v11 = v1 == *(void *)v3 && v2 == *(void *)(v3 + 8);
  if (v11
    || (uint64_t v12 = *(void *)(v3 + 24),
        int v13 = *(unsigned __int8 *)(v4 + 16),
        char v14 = sub_256B3FEA0(),
        int v5 = v13,
        uint64_t v9 = v12,
        (v14 & 1) != 0))
  {
    if (v5 == 2)
    {
      if (v8 != 2) {
        goto LABEL_18;
      }
    }
    else if (v8 == 2 || ((((v5 & 1) == 0) ^ v8) & 1) == 0)
    {
      goto LABEL_18;
    }
    if (v6 && v10 && (v7 != v9 || v6 != v10))
    {
      sub_256B3FEA0();
      sub_256AA01B8();
    }
  }
LABEL_18:
  sub_256AA019C();
}

uint64_t static CostProfile.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v2 = 0;
  if (*(void *)a1 == *(void *)a2
    && ((*(unsigned __int8 *)(a1 + 8) ^ *(unsigned __int8 *)(a2 + 8)) & 1) == 0
    && ((*(unsigned __int8 *)(a1 + 9) ^ *(unsigned __int8 *)(a2 + 9)) & 1) == 0)
  {
    char v2 = *(unsigned char *)(a2 + 10) ^ *(unsigned char *)(a1 + 10) ^ 1;
  }
  return v2 & 1;
}

uint64_t sub_256A8F3AC(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x8000000256B48B30 || (sub_256B3FEA0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v5 = a1 == 0x65636E6174736E69 && a2 == 0xEA00000000004449;
    if (v5 || (sub_256B3FEA0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 1953722211 && a2 == 0xE400000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v7 = sub_256B3FEA0();
      swift_bridgeObjectRelease();
      if (v7) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t sub_256A8F4F4(char a1)
{
  if (!a1) {
    return 0xD000000000000011;
  }
  if (a1 == 1) {
    return 0x65636E6174736E69;
  }
  return 1953722211;
}

uint64_t sub_256A8F54C()
{
  return sub_256A8F4F4(*v0);
}

uint64_t sub_256A8F554@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_256A8F3AC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_256A8F57C(uint64_t a1)
{
  unint64_t v2 = sub_256A988F8();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A8F5B8(uint64_t a1)
{
  unint64_t v2 = sub_256A988F8();

  return MEMORY[0x270FA00B8](a1, v2);
}

void ManagedRuntimeInformation.encode(to:)()
{
  sub_256A4A878();
  unint64_t v2 = v1;
  sub_256A39D2C(&qword_26B2B36D0);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v3);
  sub_256A4A7CC();
  sub_256A7B704(v2);
  sub_256A988F8();
  sub_256AA032C();
  sub_256A98944();
  sub_256B3FE60();
  if (v0)
  {
    sub_256A9FDB0();
    v4();
  }
  else
  {
    sub_256AA0B78();
    sub_256B3FDD0();
    sub_256A98990();
    sub_256AA0B84();
    uint64_t v5 = sub_256AA0D5C();
    v6(v5);
  }
  sub_256A6ECF0();
  sub_256A4A890();
}

uint64_t ManagedRuntimeInformation.hashValue.getter()
{
  return sub_256B3FF70();
}

void ManagedRuntimeInformation.init(from:)()
{
  sub_256A4A878();
  sub_256AA0C98();
  sub_256A39D2C(&qword_26B2B5F20);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v3);
  sub_256A6E86C();
  sub_256A988F8();
  sub_256AA0FB8();
  sub_256AA05DC();
  if (v1)
  {
    sub_256A39DB4(v0);
  }
  else
  {
    sub_256A989DC();
    sub_256AA0914();
    sub_256B3FD90();
    uint64_t v10 = v11;
    LOBYTE(v11) = 1;
    swift_bridgeObjectRetain();
    uint64_t v4 = sub_256B3FD00();
    uint64_t v6 = v5;
    uint64_t v9 = v4;
    sub_256A98A28();
    swift_bridgeObjectRetain();
    sub_256B3FD90();
    uint64_t v7 = sub_256A9FD98();
    v8(v7);
    *(void *)uint64_t v2 = v10;
    *(void *)(v2 + 8) = v12;
    *(unsigned char *)(v2 + 16) = v13;
    *(void *)(v2 + 24) = v9;
    *(void *)(v2 + 32) = v6;
    *(void *)(v2 + 40) = v11;
    *(_WORD *)(v2 + 48) = v12;
    *(unsigned char *)(v2 + 50) = BYTE2(v12);
    sub_256A39DB4(v0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_256A6ECF0();
  sub_256A4A890();
}

uint64_t sub_256A8FA54()
{
  return sub_256B3FF70();
}

void sub_256A8FAD0()
{
}

void sub_256A8FAE8()
{
}

uint64_t ManagedResourceBase.id.getter()
{
  return sub_256A4A370();
}

uint64_t ManagedResourceBase.runtimeInformation.getter()
{
  return swift_bridgeObjectRetain();
}

ModelCatalog::ManagedResourceBase __swiftcall ManagedResourceBase.init(id:dependentResourceIDs:runtimeInformation:)(Swift::String id, Swift::OpaquePointer dependentResourceIDs, Swift::OpaquePointer runtimeInformation)
{
  *(Swift::String *)uint64_t v3 = id;
  *(Swift::OpaquePointer *)(v3 + 16) = dependentResourceIDs;
  *(Swift::OpaquePointer *)(v3 + 24) = runtimeInformation;
  result.id = id;
  result.runtimeInformation = runtimeInformation;
  result.dependentResourceIDs = dependentResourceIDs;
  return result;
}

uint64_t ManagedResourceBase.preconditions.getter()
{
  return MEMORY[0x263F8EE78];
}

uint64_t ManagedResourceBase.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_256A7A9B8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_256A97D1C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v0 = sub_256A4A370();
  sub_256A97B18(v0, v1);

  return swift_bridgeObjectRelease();
}

uint64_t static ManagedResourceBase.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = (void *)a1[2];
  uint64_t v3 = (void *)a2[2];
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (!v4 && (sub_256B3FEA0() & 1) == 0 || (sub_256A87844(v2, v3) & 1) == 0) {
    return 0;
  }
  uint64_t v5 = sub_256A4A370();

  return sub_256A87E60(v5, v6);
}

uint64_t sub_256A8FC64(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (sub_256B3FEA0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000256B49120 || (sub_256B3FEA0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000256B48AD0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_256B3FEA0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_256A8FD9C(char a1)
{
  if (!a1) {
    return 25705;
  }
  if (a1 == 1) {
    return 0xD000000000000014;
  }
  return 0xD000000000000012;
}

uint64_t sub_256A8FDF4()
{
  return sub_256A8FD9C(*v0);
}

uint64_t sub_256A8FDFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_256A8FC64(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_256A8FE24(uint64_t a1)
{
  unint64_t v2 = sub_256A98A74();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A8FE60(uint64_t a1)
{
  unint64_t v2 = sub_256A98A74();

  return MEMORY[0x270FA00B8](a1, v2);
}

void ManagedResourceBase.encode(to:)()
{
  sub_256A4A878();
  uint64_t v3 = v2;
  uint64_t v4 = sub_256A39D2C(&qword_269F79CB8);
  sub_256A49FB8();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  sub_256A4A7CC();
  sub_256A7B704(v3);
  sub_256A98A74();
  sub_256AA032C();
  sub_256B3FE20();
  if (!v0)
  {
    sub_256A39D2C(&qword_26B2B6320);
    sub_256A9857C(&qword_26B2B36A8);
    sub_256AA0E7C();
    sub_256AA0B84();
    sub_256A39D2C(&qword_26B2B6218);
    sub_256A98710((unint64_t *)&unk_26B2B3680, &qword_26B2B6218, (void (*)(void))sub_256A9844C);
    sub_256AA0E7C();
    sub_256AA0B84();
  }
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v4);
  sub_256A6ECF0();
  sub_256A4A890();
}

uint64_t ManagedResourceBase.hashValue.getter()
{
  sub_256A7B200();
  swift_bridgeObjectRetain();
  sub_256AA0354();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_256A97D1C();
  swift_bridgeObjectRelease();
  uint64_t v0 = swift_bridgeObjectRetain();
  int v8 = sub_256AA085C(v0, v1, v2, v3, v4, v5, v6, v7, v11, v12);
  sub_256A97B18((uint64_t)v8, v9);
  swift_bridgeObjectRelease();
  return sub_256B3FF70();
}

void ManagedResourceBase.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_256A4A878();
  sub_256AA0C98();
  sub_256A39D2C(&qword_269F79CC8);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v13);
  sub_256A84170();
  sub_256AA0CB8(v10);
  sub_256A98A74();
  sub_256AA0AD0();
  sub_256B3FF80();
  if (v11)
  {
    sub_256A39DB4((uint64_t)v10);
  }
  else
  {
    LOBYTE(a10) = 0;
    uint64_t v14 = sub_256B3FD50();
    uint64_t v16 = v15;
    uint64_t v18 = v14;
    sub_256A39D2C(&qword_26B2B6320);
    sub_256A9857C(&qword_26B2B5EE0);
    swift_bridgeObjectRetain();
    sub_256AA0F00();
    sub_256B3FD90();
    sub_256A39D2C(&qword_26B2B6218);
    sub_256A98710(&qword_26B2B5EB8, &qword_26B2B6218, (void (*)(void))sub_256A9862C);
    swift_bridgeObjectRetain();
    sub_256B3FD90();
    sub_256A6E550();
    v17();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *char v12 = v18;
    v12[1] = v16;
    _OWORD v12[2] = a10;
    v12[3] = a10;
    sub_256A39DB4((uint64_t)v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_256AA0174();
  sub_256A4A890();
}

uint64_t sub_256A90398@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ManagedResourceBase.id.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_256A903C8()
{
  uint64_t v1 = *(void *)(v0 + 24);
  sub_256B3FF40();
  swift_bridgeObjectRetain();
  sub_256B3F740();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_256A97D1C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_256A97B18((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return sub_256B3FF70();
}

void sub_256A90468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  ManagedResourceBase.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void sub_256A90480()
{
}

uint64_t ResourceBundleIdentifier.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_256B3F740();

  return swift_bridgeObjectRelease();
}

uint64_t sub_256A904F0(uint64_t a1, uint64_t a2)
{
  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = sub_256B3FEA0();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_256A90560()
{
  return sub_256B3FF70();
}

uint64_t sub_256A905A4()
{
  return 25705;
}

uint64_t sub_256A905B0()
{
  return _s12ModelCatalog0B6ErrorsO17AvailabilityErrorO2eeoiySbAE_AEtFZ_0();
}

uint64_t sub_256A905B8()
{
  return sub_256A90560();
}

uint64_t sub_256A905C4()
{
  return sub_256A8A498();
}

uint64_t sub_256A905D0()
{
  return sub_256B3FF70();
}

uint64_t sub_256A90614()
{
  return sub_256A905A4();
}

uint64_t sub_256A90620@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_256A904F0(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_256A90654()
{
  return sub_256A54B3C();
}

uint64_t sub_256A90678@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = _s12ModelCatalog0B6ErrorsO17AvailabilityErrorO2eeoiySbAE_AEtFZ_0();
  *a1 = result & 1;
  return result;
}

uint64_t sub_256A906AC(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270FA00B0](a1, WitnessTable);
}

uint64_t sub_256A90700(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270FA00B8](a1, WitnessTable);
}

void ResourceBundleIdentifier.encode(to:)()
{
  sub_256A4A878();
  uint64_t v1 = v0;
  type metadata accessor for ResourceBundleIdentifier.CodingKeys();
  swift_getWitnessTable();
  sub_256B3FE70();
  sub_256A49FB8();
  MEMORY[0x270FA5388](v2);
  sub_256A39D70(v1, v1[3]);
  sub_256B3FF90();
  sub_256B3FE20();
  sub_256A6E550();
  v3();
  sub_256AA081C();
  sub_256A4A890();
}

uint64_t ResourceBundleIdentifier.hashValue.getter()
{
  return sub_256B3FF70();
}

void ResourceBundleIdentifier.init(from:)()
{
  sub_256A4A878();
  uint64_t v2 = v1;
  uint64_t v10 = v3;
  type metadata accessor for ResourceBundleIdentifier.CodingKeys();
  swift_getWitnessTable();
  sub_256B3FDB0();
  sub_256A49FB8();
  MEMORY[0x270FA5388](v4);
  sub_256A39D70(v2, v2[3]);
  sub_256B3FF80();
  if (!v0)
  {
    uint64_t v5 = sub_256B3FD50();
    uint64_t v7 = v6;
    uint64_t v8 = sub_256AA09B8();
    v9(v8);
    *uint64_t v10 = v5;
    v10[1] = v7;
  }
  sub_256A39DB4((uint64_t)v2);
  sub_256A7AC14();
  sub_256A4A890();
}

uint64_t sub_256A90A0C()
{
  return sub_256B3FF70();
}

uint64_t static ResourceBundleIdentifier.== infix(_:_:)(uint64_t a1)
{
  uint64_t v1 = sub_256AA0598(a1);
  if (v1 == *v3 && v2 == v3[1]) {
    return _s12ModelCatalog0B6ErrorsO17AvailabilityErrorO2eeoiySbAE_AEtFZ_0();
  }
  else {
    return sub_256AA034C();
  }
}

void sub_256A90A70()
{
}

void sub_256A90A90()
{
}

uint64_t ResourceBundleIdentifier.description.getter()
{
  return sub_256A4A370();
}

uint64_t static ResourceBundleIdentifier.== infix(_:_:)(void *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a2 && a1[1] == a3) {
    return _s12ModelCatalog0B6ErrorsO17AvailabilityErrorO2eeoiySbAE_AEtFZ_0();
  }
  else {
    return sub_256AA034C();
  }
}

uint64_t static ResourceBundleIdentifier.== infix(_:_:)(uint64_t a1, uint64_t a2, void *a3)
{
  if (*a3 == a1 && a3[1] == a2) {
    return _s12ModelCatalog0B6ErrorsO17AvailabilityErrorO2eeoiySbAE_AEtFZ_0();
  }
  else {
    return sub_256AA034C();
  }
}

uint64_t sub_256A90B14@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return ResourceBundleIdentifier.init(stringLiteral:)(*a1, a1[1], a2);
}

Swift::Bool __swiftcall ResourceBundle.containsResource(withRequestResourceKey:)(ModelCatalog::RequestResourcesKey withRequestResourceKey)
{
  char v2 = *(unsigned char *)withRequestResourceKey;
  uint64_t v3 = sub_256AA0760(withRequestResourceKey, v1);
  uint64_t v5 = v4(v3);
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    uint64_t v7 = v5 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_256A39E54(v7, (uint64_t)v25);
      sub_256A39E54((uint64_t)v25, (uint64_t)v21);
      int v8 = sub_256A39D2C(&qword_26B2B5D80);
      sub_256A39D2C(&qword_26B2B54E8);
      uint64_t v9 = sub_256AA0A64();
      if (v9)
      {
        sub_256A3A540(v22, (uint64_t)v24);
        sub_256A39D70(v24, v24[3]);
        uint64_t v17 = sub_256AA04FC();
        v18(v17);
        sub_256AA0D84();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v8 != 11 && (sub_256B026BC(v8, v2) & 1) != 0)
        {
          sub_256A39DB4((uint64_t)v24);
          sub_256A39DB4((uint64_t)v25);
          sub_256AA06D4();
          goto LABEL_11;
        }
        sub_256A39DB4((uint64_t)v24);
      }
      else
      {
        sub_256AA0984(v9, v10, v11, v12, v13, v14, v15, v16, v20, v21[0], v21[1], v21[2], v21[3], v21[4], v21[5], v21[6], v22[0], v22[1], v23);
      }
      sub_256A39DB4((uint64_t)v25);
      v7 += 40;
      if (!--v6)
      {
        sub_256AA06D4();
        goto LABEL_11;
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_11:
  sub_256AA0B5C();
  return result;
}

uint64_t ResourceBundle.containsResource(withRequestResourceKeys:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_256AA0760(a1, a2);
  uint64_t v5 = v4(v3);
  uint64_t v6 = *(void *)(v5 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v7 = v5 + 32;
  while (1)
  {
    sub_256A39E54(v7, (uint64_t)v22);
    int v8 = sub_256A39D2C(&qword_26B2B5D80);
    sub_256A39D2C(&qword_26B2B54E8);
    uint64_t v9 = sub_256AA0A64();
    if (!v9)
    {
      sub_256AA0984(v9, v10, v11, v12, v13, v14, v15, v16, v21, v22[0], v22[1], v22[2], v22[3], v22[4], v22[5], v22[6], v23[0], v23[1], v24);
      goto LABEL_8;
    }
    sub_256A3A540(v23, (uint64_t)v25);
    sub_256A39D70(v25, v25[3]);
    uint64_t v17 = sub_256AA04FC();
    v18(v17);
    sub_256AA0D84();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v8 != 11) {
      break;
    }
    sub_256A39DB4((uint64_t)v25);
LABEL_8:
    v7 += 40;
    if (!--v6) {
      goto LABEL_9;
    }
  }
  char v19 = sub_256A42CEC(v8, a1);
  sub_256A39DB4((uint64_t)v25);
  if ((v19 & 1) == 0) {
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t CatalogResource.dependentResourceIDs.getter()
{
  return MEMORY[0x263F8EE78];
}

uint64_t sub_256A90DBC()
{
  return CatalogResource.platforms.getter();
}

uint64_t sub_256A90DD4()
{
  if (qword_269F78A80 != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

uint64_t CatalogResource.platforms.getter()
{
  if (qword_269F78A80 != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

uint64_t sub_256A90E8C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x72756769666E6F63 && a2 == 0xED00006E6F697461)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = sub_256B3FEA0();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_256A90F38()
{
  return 0x72756769666E6F63;
}

uint64_t sub_256A90F60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_256A90E8C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_256A90F8C(uint64_t a1)
{
  unint64_t v2 = sub_256A8E63C();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A90FC8(uint64_t a1)
{
  unint64_t v2 = sub_256A8E63C();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ResourceBase.inferenceProviders.getter()
{
  return MEMORY[0x263F8EE88];
}

uint64_t ResourceBase.preconditions.getter()
{
  return MEMORY[0x263F8EE78];
}

uint64_t sub_256A91028()
{
  return MEMORY[0x263F8EE88];
}

uint64_t sub_256A91038()
{
  return sub_256A860C0();
}

uint64_t sub_256A91044()
{
  return sub_256A90DD4();
}

uint64_t CostProfile.onDeviceMemory.getter()
{
  return *(void *)v0;
}

uint64_t CostProfile.cacheable.getter()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t CostProfile.dynamicModeAllowed.getter()
{
  return *(unsigned __int8 *)(v0 + 9);
}

uint64_t CostProfile.energyEfficientMode.getter()
{
  return *(unsigned __int8 *)(v0 + 10);
}

ModelCatalog::CostProfile __swiftcall CostProfile.init(onDeviceMemory:)(Swift::Int onDeviceMemory)
{
  *(void *)uint64_t v1 = onDeviceMemory;
  *(_WORD *)(v1 + 8) = 0;
  *(unsigned char *)(v1 + 10) = 0;
  result.onDeviceMemory = onDeviceMemory;
  return result;
}

ModelCatalog::CostProfile __swiftcall CostProfile.init(onDeviceMemory:cacheable:dynamicModeAllowed:energyEfficientMode:)(Swift::Int onDeviceMemory, Swift::Bool cacheable, Swift::Bool dynamicModeAllowed, Swift::Bool energyEfficientMode)
{
  *(void *)uint64_t v4 = onDeviceMemory;
  *(unsigned char *)(v4 + 8) = cacheable;
  *(unsigned char *)(v4 + 9) = dynamicModeAllowed;
  *(unsigned char *)(v4 + 10) = energyEfficientMode;
  result.onDeviceMemory = onDeviceMemory;
  result.cacheable = cacheable;
  return result;
}

uint64_t CostProfile.hash(into:)()
{
  return sub_256B3FF60();
}

uint64_t sub_256A910F4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6563697665446E6FLL && a2 == 0xEE0079726F6D654DLL;
  if (v2 || (sub_256B3FEA0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6C62616568636163 && a2 == 0xE900000000000065;
    if (v6 || (sub_256B3FEA0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD000000000000012 && a2 == 0x8000000256B48AF0 || (sub_256B3FEA0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else if (a1 == 0xD000000000000013 && a2 == 0x8000000256B48B10)
    {
      swift_bridgeObjectRelease();
      return 3;
    }
    else
    {
      char v7 = sub_256B3FEA0();
      swift_bridgeObjectRelease();
      if (v7) {
        return 3;
      }
      else {
        return 4;
      }
    }
  }
}

uint64_t sub_256A912D0()
{
  return 4;
}

unint64_t sub_256A912D8(char a1)
{
  unint64_t result = 0x6563697665446E6FLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6C62616568636163;
      break;
    case 2:
      unint64_t result = 0xD000000000000012;
      break;
    case 3:
      unint64_t result = 0xD000000000000013;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_256A91388()
{
  return sub_256A912D8(*v0);
}

uint64_t sub_256A91390@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_256A910F4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_256A913B8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_256A912D0();
  *a1 = result;
  return result;
}

uint64_t sub_256A913E0(uint64_t a1)
{
  unint64_t v2 = sub_256A98AD8();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A9141C(uint64_t a1)
{
  unint64_t v2 = sub_256A98AD8();

  return MEMORY[0x270FA00B8](a1, v2);
}

void CostProfile.encode(to:)()
{
  sub_256A4A878();
  unint64_t v2 = v1;
  sub_256A39D2C(&qword_26B2B3468);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v3);
  sub_256A4A7CC();
  sub_256A39D70(v2, v2[3]);
  sub_256A98AD8();
  sub_256B3FF90();
  sub_256AA0B78();
  sub_256B3FE50();
  if (!v0)
  {
    sub_256AA0684();
    sub_256B3FE30();
    sub_256AA0DC4();
    sub_256B3FE30();
    sub_256AA0EB0();
    sub_256B3FE30();
  }
  sub_256AA05D0();
  v4();
  sub_256A6ECF0();
  sub_256A4A890();
}

uint64_t CostProfile.hashValue.getter()
{
  return sub_256B3FF70();
}

void CostProfile.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, __int16 a11, char a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_256A4A878();
  a24 = v28;
  a25 = v29;
  sub_256AA0C98();
  sub_256A39D2C((uint64_t *)&unk_26B2B5EF8);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v30);
  sub_256A6E86C();
  sub_256A98AD8();
  sub_256AA0FB8();
  sub_256AA05DC();
  if (!v26)
  {
    a15 = 0;
    uint64_t v31 = sub_256B3FD80();
    a14 = 1;
    char v32 = sub_256AA0A18((uint64_t)&a14);
    sub_256AA0DC4();
    a10 = sub_256AA0A18((uint64_t)&a13);
    sub_256AA0EB0();
    char v33 = sub_256AA0A18((uint64_t)&a12);
    sub_256A6E550();
    v34();
    *(void *)uint64_t v27 = v31;
    *(unsigned char *)(v27 + 8) = v32 & 1;
    *(unsigned char *)(v27 + 9) = a10 & 1;
    *(unsigned char *)(v27 + 10) = v33 & 1;
  }
  sub_256A39DB4(v25);
  sub_256A7AC14();
  sub_256A4A890();
}

uint64_t sub_256A917B4()
{
  return sub_256B3FF70();
}

#error "256A91848: call analysis failed (funcsize=6)"

void sub_256A91854()
{
}

uint64_t sub_256A9186C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result = ManagedResource<>.executionContexts.getter(*(void *)(a2 + a1 - 24), a1, *(void *)(a2 + a1 - 8));
  *a3 = result;
  return result;
}

uint64_t sub_256A918A4()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  return ManagedResource<>.executionContexts.setter(v0);
}

void ManagedResourceBase.cost.getter(uint64_t a1@<X8>)
{
}

uint64_t ManagedResourceBase.executionContexts.getter()
{
  return MEMORY[0x263F8EE88];
}

uint64_t sub_256A91900()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  return ManagedResourceBase.executionContexts.setter(v0);
}

uint64_t (*ManagedResourceBase.executionContexts.modify(void *a1))()
{
  *a1 = MEMORY[0x263F8EE88];
  return j__s12ModelCatalog34RequestDownloadProgressInformationVwxx;
}

uint64_t ManagedResourceBase.inferenceProviders.getter()
{
  sub_256AA0180();
  unint64_t v2 = *(void *)(v0 + 24);
  if (*(void *)(v2 + 16))
  {
    swift_bridgeObjectRetain();
    sub_256AA02C8();
    sub_256AA0318();
    do
    {
      sub_256AA00C4();
      if (v1 >= v2 >> 1) {
        sub_256AA05B4(v2 > 1);
      }
      sub_256AA00A8();
    }
    while (!v3);
    swift_bridgeObjectRelease();
  }
  sub_256AA0064();
  return sub_256A3CDFC(v4);
}

uint64_t ManagedResourceBase.dependencies.getter()
{
  return MEMORY[0x263F8EE78];
}

uint64_t sub_256A91A08()
{
  return ManagedResourceBase.executionContexts.setter();
}

uint64_t (*sub_256A91A20(void *a1))()
{
  *a1 = MEMORY[0x263F8EE88];
  return j__s12ModelCatalog34RequestDownloadProgressInformationVwxx;
}

uint64_t sub_256A91A58()
{
  return sub_256A860C0();
}

uint64_t sub_256A91A64()
{
  return sub_256A90DD4();
}

ModelCatalog::ResourceStatus_optional __swiftcall ResourceStatus.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 4;
  if ((unint64_t)rawValue < 4) {
    char v2 = rawValue;
  }
  *unint64_t v1 = v2;
  return (ModelCatalog::ResourceStatus_optional)rawValue;
}

uint64_t ResourceStatus.rawValue.getter()
{
  return *v0;
}

uint64_t sub_256A91A8C()
{
  return sub_256A56230();
}

ModelCatalog::ResourceStatus_optional sub_256A91A94(Swift::Int *a1)
{
  return ResourceStatus.init(rawValue:)(*a1);
}

uint64_t sub_256A91A9C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ResourceStatus.rawValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_256A91AC4()
{
  return sub_256B3F820();
}

unint64_t RequestResourcesKey.usageKey.getter()
{
  uint64_t v1 = *v0;
  sub_256B3FB70();
  swift_bridgeObjectRelease();
  switch(v1)
  {
    case 1:
    case 2:
    case 3:
      sub_256AA0878();
      break;
    case 5:
    case 6:
    case 7:
      sub_256AA0868();
      break;
    default:
      break;
  }
  sub_256B3F760();
  swift_bridgeObjectRelease();
  return 0xD000000000000019;
}

uint64_t static StatusResponse.supportsSecureCoding.getter()
{
  return byte_269F79B18;
}

uint64_t static StatusResponse.supportsSecureCoding.setter(char a1)
{
  uint64_t result = sub_256A4A064();
  byte_269F79B18 = a1;
  return result;
}

uint64_t (*static StatusResponse.supportsSecureCoding.modify())()
{
  return j__swift_endAccess;
}

void sub_256A91D94(void *a1)
{
  uint64_t v3 = *(unsigned __int8 *)(v1 + OBJC_IVAR___MCResourceStatus_status);
  id v4 = (id)sub_256AA06EC();
  objc_msgSend(a1, sel_encodeInteger_forKey_, v3, v4);
}

void StatusResponse.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  StatusResponse.init(coder:)(a1);
}

void StatusResponse.init(coder:)(void *a1)
{
  id v3 = v1;
  id v4 = (void *)sub_256AA06EC();
  id v5 = objc_msgSend(a1, sel_decodeIntegerForKey_, v4);

  if ((unint64_t)v5 > 3)
  {
    __break(1u);
  }
  else
  {
    v3[OBJC_IVAR___MCResourceStatus_status] = (_BYTE)v5;

    v6.receiver = v3;
    v6.super_class = (Class)type metadata accessor for StatusResponse();
    objc_msgSendSuper2(&v6, sel_init);
  }
}

void StatusResponse.status.getter(unsigned char *a1@<X8>)
{
}

id StatusResponse.__allocating_init(status:)(unsigned char *a1)
{
  id v3 = objc_allocWithZone(v1);
  v3[OBJC_IVAR___MCResourceStatus_status] = *a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

id StatusResponse.init(status:)(unsigned char *a1)
{
  v1[OBJC_IVAR___MCResourceStatus_status] = *a1;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for StatusResponse();
  return objc_msgSendSuper2(&v3, sel_init);
}

id StatusResponse.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void StatusResponse.init()()
{
}

id StatusResponse.__deallocating_deinit(uint64_t a1)
{
  return sub_256A93124(a1, type metadata accessor for StatusResponse);
}

void ExecutionContext.hash(into:)()
{
  sub_256A4A458();
  int v1 = *(unsigned __int8 *)(v0 + 16);
  __int16 v2 = *(_WORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  sub_256B3F740();
  if (v1 != 2) {
    sub_256B3FF60();
  }
  sub_256B3FF60();
  swift_bridgeObjectRelease();
  if (v2 != 2)
  {
    sub_256B3FF60();
    sub_256B3FF50();
    sub_256B3FF60();
    sub_256B3FF60();
  }
  sub_256B3FF60();
  sub_256B3FF50();
  sub_256A4A2C0();
}

void static ExecutionContext.== infix(_:_:)()
{
  sub_256AA0180();
  uint64_t v1 = sub_256AA0598(v0);
  if (v1 != *v3 || v2 != v3[1]) {
    sub_256B3FEA0();
  }
  sub_256AA0064();
}

uint64_t ExecutionContext.hashValue.getter()
{
  return sub_256B3FF70();
}

uint64_t sub_256A922EC()
{
  return sub_256B3FF70();
}

uint64_t static ResourceInformation.supportsSecureCoding.getter()
{
  return byte_269F79B19;
}

uint64_t static ResourceInformation.supportsSecureCoding.setter(char a1)
{
  uint64_t result = sub_256A4A064();
  byte_269F79B19 = a1;
  return result;
}

uint64_t (*static ResourceInformation.supportsSecureCoding.modify())()
{
  return j_j__swift_endAccess;
}

void sub_256A9241C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = v1 + OBJC_IVAR___MCResourceInformation_location;
  uint64_t v6 = sub_256A39D2C(&qword_26B2B6340);
  uint64_t v7 = sub_256A4AB38(v6);
  MEMORY[0x270FA5388](v7);
  sub_256AA0AE0();
  sub_256A4805C(v5, v1);
  uint64_t v8 = sub_256B3F300();
  uint64_t v9 = 0;
  if (sub_256AA0EBC(v8) != 1)
  {
    uint64_t v9 = sub_256B3F270();
    sub_256A4A838();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v1, v2);
  }
  uint64_t v11 = (void *)sub_256B3F690();
  objc_msgSend(a1, sel_encodeObject_forKey_, v9, v11);
  swift_unknownObjectRelease();

  if (*(void *)(v3 + OBJC_IVAR___MCResourceInformation_metadata)) {
    uint64_t v12 = sub_256B3F5D0();
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = (void *)sub_256B3F690();
  objc_msgSend(a1, sel_encodeObject_forKey_, v12, v13);
  swift_unknownObjectRelease();
}

void ResourceInformation.__allocating_init(coder:)()
{
  id v1 = objc_allocWithZone(v0);
  ResourceInformation.init(coder:)();
}

void ResourceInformation.init(coder:)()
{
  sub_256A4A458();
  uint64_t v2 = v1;
  uint64_t v3 = sub_256A39D2C(&qword_26B2B6340);
  uint64_t v4 = sub_256A4AB38(v3);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](v4);
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_256A49E98(0, &qword_26B2B33D0);
  uint64_t v8 = v0;
  uint64_t v9 = sub_256B3FA50();
  if (v9)
  {
    uint64_t v10 = (void *)v9;
    MEMORY[0x270FA5388](v9);
    uint64_t v11 = sub_256B3F300();
    sub_256A46F7C((uint64_t)&v20 - v7, 1, 1, v11);
    sub_256A98B90();
    sub_256B3FCC0();

    if (sub_256A480C4((uint64_t)&v20 - v7, 1, v11) == 1)
    {
      uint64_t v12 = (char *)&v20 - v7;
      uint64_t v13 = 1;
    }
    else
    {
      sub_256A4A838();
      uint64_t v15 = sub_256AA0F54();
      v16(v15);
      uint64_t v12 = (char *)&v20 - v7;
      uint64_t v13 = 0;
    }
    uint64_t v14 = v11;
  }
  else
  {
    uint64_t v14 = sub_256B3F300();
    uint64_t v12 = (char *)&v20 - v7;
    uint64_t v13 = 1;
  }
  sub_256A46F7C((uint64_t)v12, v13, 1, v14);
  sub_256A9F9D0((uint64_t)&v20 - v7, (uint64_t)&v8[OBJC_IVAR___MCResourceInformation_location], &qword_26B2B6340);
  sub_256A49E98(0, &qword_26B2B6470);
  unint64_t v17 = sub_256B3FA60();
  if (v17)
  {
    uint64_t v18 = sub_256A928BC(v17);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v18 = 0;
  }
  *(void *)&v8[OBJC_IVAR___MCResourceInformation_metadata] = v18;

  char v19 = (objc_class *)type metadata accessor for ResourceInformation();
  v20.receiver = v8;
  v20.super_class = v19;
  objc_msgSendSuper2(&v20, sel_init);

  sub_256A4A2C0();
}

uint64_t sub_256A928BC(unint64_t a1)
{
  unint64_t v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (sub_256B3FB10()) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v3 = MEMORY[0x263F8EE80];
    if (v2) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  if (!*(void *)(a1 + 16)) {
    goto LABEL_6;
  }
LABEL_3:
  sub_256A39D2C(&qword_26B2B6458);
  uint64_t v3 = sub_256B3FCA0();
  if (v2)
  {
LABEL_4:
    uint64_t v4 = sub_256B3FC30();
    uint64_t v21 = 0;
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    unint64_t v7 = v4 | 0x8000000000000000;
    goto LABEL_11;
  }
LABEL_7:
  uint64_t v8 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = ~v8;
  uint64_t v21 = (void *)(a1 + 64);
  uint64_t v9 = -v8;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v6 = v10 & *(void *)(a1 + 64);
  unint64_t v7 = a1;
LABEL_11:
  int64_t v20 = (unint64_t)(v5 + 64) >> 6;
  swift_bridgeObjectRetain();
  if ((v7 & 0x8000000000000000) != 0)
  {
    if (sub_256B3FC50())
    {
      sub_256A49E98(0, &qword_26B2B6470);
      swift_dynamicCast();
      swift_dynamicCast();
      uint64_t v12 = v22;
LABEL_32:
      v12;
      uint64_t result = sub_256B3F6A0();
      __break(1u);
      __break(1u);
      return result;
    }
  }
  else
  {
    if (v6)
    {
      unint64_t v11 = __clz(__rbit64(v6));
LABEL_31:
      uint64_t v12 = *(void **)(*(void *)(v7 + 48) + 8 * v11);
      uint64_t v16 = *(void **)(*(void *)(v7 + 56) + 8 * v11);
      id v17 = v12;
      id v18 = v16;
      goto LABEL_32;
    }
    if (v20 > 1)
    {
      unint64_t v13 = v21[1];
      uint64_t v14 = 1;
      if (v13) {
        goto LABEL_30;
      }
      uint64_t v14 = 2;
      if (v20 > 2)
      {
        unint64_t v13 = v21[2];
        if (v13) {
          goto LABEL_30;
        }
        uint64_t v14 = 3;
        if (v20 > 3)
        {
          unint64_t v13 = v21[3];
          if (v13) {
            goto LABEL_30;
          }
          uint64_t v14 = 4;
          if (v20 > 4)
          {
            unint64_t v13 = v21[4];
            if (v13) {
              goto LABEL_30;
            }
            uint64_t v14 = 5;
            if (v20 > 5)
            {
              unint64_t v13 = v21[5];
              if (!v13)
              {
                uint64_t v15 = 6;
                while (v15 < v20)
                {
                  unint64_t v13 = v21[v15++];
                  if (v13)
                  {
                    uint64_t v14 = v15 - 1;
                    goto LABEL_30;
                  }
                }
                goto LABEL_33;
              }
LABEL_30:
              unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
              goto LABEL_31;
            }
          }
        }
      }
    }
  }
LABEL_33:
  sub_256A49ED4();
  return v3;
}

uint64_t ResourceInformation.location.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_256A4805C(v1 + OBJC_IVAR___MCResourceInformation_location, a1);
}

uint64_t ResourceInformation.metadata.getter()
{
  return swift_bridgeObjectRetain();
}

id ResourceInformation.__allocating_init(location:metadata:)()
{
  sub_256A4A3C8();
  id v1 = objc_allocWithZone(v0);
  return ResourceInformation.init(location:metadata:)();
}

id ResourceInformation.init(location:metadata:)()
{
  sub_256A4A3C8();
  sub_256A4805C(v3, (uint64_t)&v1[OBJC_IVAR___MCResourceInformation_location]);
  *(void *)&v1[OBJC_IVAR___MCResourceInformation_metadata] = v0;
  v6.receiver = v1;
  v6.super_class = (Class)type metadata accessor for ResourceInformation();
  id v4 = objc_msgSendSuper2(&v6, sel_init);
  sub_256A98BD4(v2, &qword_26B2B6340);
  return v4;
}

void sub_256A92E04()
{
  sub_256A4A458();
  sub_256AA0E44();
  swift_bridgeObjectRelease();
  uint64_t v2 = sub_256A39D2C(&qword_26B2B6340);
  uint64_t v3 = sub_256A4AB38(v2);
  MEMORY[0x270FA5388](v3);
  sub_256AA0AE0();
  sub_256A4805C(v0 + OBJC_IVAR___MCResourceInformation_location, v0);
  uint64_t v4 = sub_256B3F300();
  if (sub_256AA0EBC(v4) == 1)
  {
    sub_256A98BD4(v0, &qword_26B2B6340);
  }
  else
  {
    sub_256B3F260();
    sub_256A4A838();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0, v1);
  }
  sub_256B3F760();
  swift_bridgeObjectRelease();
  sub_256B07B20(0, 1, 1, MEMORY[0x263F8EE78]);
  uint64_t v7 = v6;
  unint64_t v9 = *(void *)(v6 + 16);
  unint64_t v8 = *(void *)(v6 + 24);
  if (v9 >= v8 >> 1)
  {
    sub_256B07B20(v8 > 1, v9 + 1, 1, v6);
    uint64_t v7 = v14;
  }
  *(void *)(v7 + 16) = v9 + 1;
  uint64_t v10 = v7 + 16 * v9;
  *(void *)(v10 + 32) = 0xD000000000000017;
  *(void *)(v10 + 40) = 0x8000000256B48D40;
  sub_256AA0E44();
  swift_bridgeObjectRelease();
  if (!*(void *)(v0 + OBJC_IVAR___MCResourceInformation_metadata)) {
    sub_256B3F600();
  }
  swift_bridgeObjectRetain();
  sub_256B3F5F0();
  sub_256B3F760();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v12 = *(void *)(v7 + 16);
  unint64_t v11 = *(void *)(v7 + 24);
  if (v12 >= v11 >> 1)
  {
    sub_256B07B20(v11 > 1, v12 + 1, 1, v7);
    uint64_t v7 = v15;
  }
  *(void *)(v7 + 16) = v12 + 1;
  uint64_t v13 = v7 + 16 * v12;
  *(void *)(v13 + 32) = 0xD000000000000017;
  *(void *)(v13 + 40) = 0x8000000256B48D60;
  sub_256A39D2C(&qword_26B2B6320);
  sub_256A78B08(&qword_269F79CD8, &qword_26B2B6320);
  sub_256B3F610();
  swift_bridgeObjectRelease();
  sub_256A4A370();
  sub_256A4A2C0();
}

void ResourceInformation.init()()
{
}

id ResourceInformation.__deallocating_deinit()
{
  return sub_256A93124(0, type metadata accessor for ResourceInformation);
}

id sub_256A93124(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

#error "256A93250: call analysis failed (funcsize=52)"

#error "256A93324: call analysis failed (funcsize=61)"

uint64_t sub_256A933D4(uint64_t a1)
{
  return TokenizerBase.init(configuration:)(a1);
}

void sub_256A933EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*vars8)(void *__return_ptr, unsigned char *);

  sub_256A859B4(a1, (uint64_t)TokenizerBase.init(configuration:), a3, a4, a5, a6, a7, a8, vars0, vars8);
}

uint64_t (*sub_256A93418(void *a1))()
{
  uint64_t v3 = malloc(0xE0uLL);
  *a1 = v3;
  objc_super v4 = memcpy(v3, v1, 0xD8uLL);
  v3[27] = sub_256A860D8(v4);
  return sub_256A93484;
}

uint64_t sub_256A93488()
{
  memcpy(__dst, v0, sizeof(__dst));
  return _s12ModelCatalog21ResourceConfigurationV13preconditionsSayAA12PreconditionVGvg_0();
}

uint64_t sub_256A934C4@<X0>(uint64_t *a1@<X8>)
{
  return sub_256A945B0((uint64_t (*)(void *))sub_256A9FBF0, a1);
}

#error "256A93584: call analysis failed (funcsize=54)"

#error "256A93648: call analysis failed (funcsize=63)"

uint64_t sub_256A936F8(double a1)
{
  return LLMAJAXModelBase.init(configuration:)(a1);
}

void sub_256A93710(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*vars8)(void *__return_ptr, unsigned char *);

  sub_256A859B4(a1, (uint64_t)LLMAJAXModelBase.init(configuration:), a3, a4, a5, a6, a7, a8, vars0, vars8);
}

uint64_t LLMDraftModelBase.configuration.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8 = sub_256AA085C(a1, a2, a3, a4, a5, a6, a7, a8, v13, v14[0]);
  memcpy(v8, v9, 0xB8uLL);
  uint64_t v10 = (void *)sub_256A4A370();
  memcpy(v10, v11, 0xB8uLL);
  return sub_256A545A0((uint64_t)v14);
}

#error "256A9382C: call analysis failed (funcsize=54)"

#error "256A93904: call analysis failed (funcsize=62)"

void static LLMDraftModelBase.== infix(_:_:)()
{
  sub_256A4A458();
  uint64_t v1 = v0[23];
  uint64_t v2 = v0[24];
  uint64_t v3 = (void *)v0[25];
  uint64_t v5 = v4[23];
  uint64_t v6 = v4[24];
  uint64_t v7 = (void *)v4[25];
  if (static ResourceConfiguration.== infix(_:_:)((uint64_t)v0))
  {
    BOOL v8 = v1 == v5 && v2 == v6;
    if (v8 || (sub_256B3FEA0()) && (sub_256A87844(v3, v7))
    {
      uint64_t v9 = sub_256A4A370();
      sub_256A87E60(v9, v10);
    }
  }
  sub_256A4A2C0();
}

uint64_t sub_256A93A48(uint64_t a1)
{
  return LLMDraftModelBase.init(configuration:)(a1);
}

void sub_256A93A60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*vars8)(void *__return_ptr, unsigned char *);

  sub_256A859B4(a1, (uint64_t)LLMDraftModelBase.init(configuration:), a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void sub_256A93A8C()
{
  memcpy(__dst, v0, sizeof(__dst));
  sub_256A85CF0();
}

void sub_256A93AE0()
{
  int v1 = memcpy(__dst, v0, sizeof(__dst));
  sub_256A85F1C(v1, v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_256A93B2C()
{
  memcpy(__dst, v0, sizeof(__dst));
  return sub_256A86034();
}

uint64_t sub_256A93B68()
{
  memcpy(__dst, v0, sizeof(__dst));
  return sub_256A860C0();
}

uint64_t sub_256A93BA4()
{
  int v1 = memcpy(__dst, v0, sizeof(__dst));
  return sub_256A860D8(v1);
}

uint64_t sub_256A93BE0()
{
  memcpy(__dst, v0, sizeof(__dst));
  return sub_256A86360();
}

uint64_t sub_256A93C1C()
{
  memcpy(__dst, v0, sizeof(__dst));
  return sub_256A863D4();
}

uint64_t sub_256A93C58()
{
  memcpy(__dst, v0, sizeof(__dst));
  return _s12ModelCatalog08LLMDraftA13AssetMetadataV17e5FunctionNameMapSDySSAC13ANEExtendInfoVGSgvg_0();
}

uint64_t sub_256A93C94()
{
  memcpy(__dst, v0, sizeof(__dst));
  return sub_256A865E4() & 1;
}

uint64_t sub_256A93CD4()
{
  memcpy(__dst, v0, sizeof(__dst));
  return sub_256A86620() & 1;
}

uint64_t sub_256A93D14()
{
  memcpy(__dst, v0, sizeof(__dst));
  return sub_256A8665C();
}

uint64_t sub_256A93D50()
{
  memcpy(__dst, v0, sizeof(__dst));
  return sub_256A866E4();
}

uint64_t sub_256A93D8C@<X0>(uint64_t *a1@<X8>)
{
  return sub_256A945B0((uint64_t (*)(void *))sub_256A86360, a1);
}

void LLMModelBase.tokenizer.getter()
{
}

#error "256A93EA0: call analysis failed (funcsize=54)"

#error "256A93F68: call analysis failed (funcsize=61)"

void sub_256A94014()
{
}

uint64_t sub_256A94024(uint64_t a1)
{
  return LLMModelBase.init(configuration:)(a1);
}

void sub_256A9403C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*vars8)(void *__return_ptr, unsigned char *);

  sub_256A859B4(a1, (uint64_t)LLMModelBase.init(configuration:), a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void sub_256A94068()
{
  memcpy(__dst, v0, sizeof(__dst));
  sub_256A87454();
}

void LLMAdapterBase.llmModel.getter()
{
}

uint64_t _s12ModelCatalog13TokenizerBaseV5innerAA015ManagedResourceD0Vvg_0@<X0>(void *a1@<X8>)
{
  uint64_t v3 = v1[23];
  uint64_t v2 = v1[24];
  uint64_t v4 = v1[25];
  uint64_t v5 = v1[26];
  *a1 = v3;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

#error "256A941EC: call analysis failed (funcsize=54)"

#error "256A942BC: call analysis failed (funcsize=62)"

uint64_t _s12ModelCatalog13TokenizerBaseV4hash4intoys6HasherVz_tF_0(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 208);
  ResourceConfiguration.hash(into:)(a1);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_256AA0F54();
  sub_256B3F740();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_256A97D1C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_256A97B18(a1, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_256AA06D4();
}

uint64_t _s12ModelCatalog13TokenizerBaseV9hashValueSivg_0()
{
  uint64_t v1 = *(void *)(v0 + 208);
  sub_256A7B200();
  ResourceConfiguration.hash(into:)((uint64_t)v3);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_256B3F740();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_256A97D1C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_256A97B18((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_256AA06D4();
  return sub_256B3FF70();
}

void sub_256A944E4()
{
}

uint64_t sub_256A944F4(uint64_t a1)
{
  return LLMAdapterBase.init(configuration:)(a1);
}

void sub_256A9450C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*vars8)(void *__return_ptr, unsigned char *);

  sub_256A859B4(a1, (uint64_t)LLMAdapterBase.init(configuration:), a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void sub_256A94538()
{
  memcpy(__dst, v0, sizeof(__dst));
  sub_256A870B4();
}

void sub_256A94574(void **a1)
{
  uint64_t v1 = *a1;
  swift_bridgeObjectRelease();

  free(v1);
}

uint64_t sub_256A945B0@<X0>(uint64_t (*a1)(void *)@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v5 = memcpy(__dst, v2, sizeof(__dst));
  uint64_t result = a1(v5);
  *a2 = result;
  a2[1] = v7;
  return result;
}

uint64_t sub_256A94604()
{
  uint64_t v1 = *(void *)(v0 + 208);
  sub_256B3FF40();
  ResourceConfiguration.hash(into:)((uint64_t)v3);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_256B3F740();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_256A97D1C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_256A97B18((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_256AA06D4();
  return sub_256B3FF70();
}

void *static Precondition.PreconditionType.allCases.getter()
{
  return &unk_2705FF180;
}

uint64_t Precondition.PreconditionType.usages.getter()
{
  sub_256A39D2C(&qword_26B2B5D78);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  sub_256B3F760();
  swift_bridgeObjectRelease();
  *(void *)(inited + 32) = 3040109;
  *(void *)(inited + 40) = 0xE300000000000000;
  *(void *)(inited + 48) = 0x44454C42414E45;
  *(void *)(inited + 56) = 0xE700000000000000;
  return sub_256B3F600();
}

unint64_t Precondition.PreconditionType.rawValue.getter()
{
  unint64_t v1 = 0xD000000000000013;
  if (*v0 == 1) {
    unint64_t v1 = 0xD000000000000025;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0xD00000000000002CLL;
  }
}

ModelCatalog::Precondition::PreconditionType_optional __swiftcall Precondition.PreconditionType.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_256B3FCD0();
  result.value = swift_bridgeObjectRelease();
  char v5 = 3;
  if (v3 < 3) {
    char v5 = v3;
  }
  char *v2 = v5;
  return result;
}

ModelCatalog::Precondition::PreconditionType_optional sub_256A948A4(Swift::String *a1)
{
  return Precondition.PreconditionType.init(rawValue:)(*a1);
}

unint64_t sub_256A948B0@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = Precondition.PreconditionType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_256A948D8()
{
  return sub_256A55E88();
}

uint64_t sub_256A948E0(uint64_t a1)
{
  return sub_256A86CD4(a1, *v1);
}

uint64_t sub_256A948E8()
{
  return sub_256A56274();
}

uint64_t sub_256A948F0(unsigned __int8 *a1, char *a2)
{
  return sub_256B02E30(*a1, *a2);
}

uint64_t sub_256A948FC()
{
  return sub_256B3F830();
}

uint64_t sub_256A9495C()
{
  return sub_256B3F810();
}

void sub_256A949AC(void *a1@<X8>)
{
  *a1 = &unk_2705FF180;
}

void Precondition.preconditionType.getter(unsigned char *a1@<X8>)
{
}

void static Precondition.aneHardwareEligible.getter(unsigned char *a1@<X8>)
{
}

void static Precondition.generativeExperiencesHardwareEligible.getter(unsigned char *a1@<X8>)
{
}

uint64_t Precondition.hash(into:)()
{
  sub_256B3F740();

  return swift_bridgeObjectRelease();
}

uint64_t static Precondition.== infix(_:_:)(unsigned __int8 *a1, char *a2)
{
  return sub_256B02E30(*a1, *a2);
}

uint64_t sub_256A94A74(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x8000000256B491A0)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = sub_256B3FEA0();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t sub_256A94AFC()
{
  return sub_256B3FF70();
}

unint64_t sub_256A94B38()
{
  return 0xD000000000000010;
}

uint64_t sub_256A94B54()
{
  return sub_256B3FF70();
}

uint64_t sub_256A94B98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_256A94A74(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_256A94BC4(uint64_t a1)
{
  unint64_t v2 = sub_256A98C28();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A94C00(uint64_t a1)
{
  unint64_t v2 = sub_256A98C28();

  return MEMORY[0x270FA00B8](a1, v2);
}

void Precondition.encode(to:)()
{
  sub_256A4A878();
  unint64_t v1 = v0;
  sub_256A39D2C(&qword_26B2B36B0);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v2);
  sub_256A4A7E4();
  sub_256AA0CB8(v1);
  sub_256A98C28();
  sub_256AA0634();
  sub_256A98C74();
  sub_256AA0894();
  uint64_t v3 = sub_256AA026C();
  v4(v3);
  sub_256AA0888();
  sub_256A4A890();
}

uint64_t Precondition.hashValue.getter()
{
  return sub_256B3FF70();
}

void Precondition.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_256A4A878();
  sub_256AA0C98();
  sub_256A39D2C(&qword_26B2B53F8);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v16);
  sub_256A6E86C();
  sub_256A98C28();
  sub_256AA05DC();
  if (!v14)
  {
    sub_256A98CC0();
    sub_256B3FD90();
    uint64_t v17 = sub_256A9FD28();
    v18(v17);
    *uint64_t v15 = a13;
  }
  sub_256A39DB4(v13);
  sub_256AA0174();
  sub_256A4A890();
}

uint64_t sub_256A94EAC()
{
  return sub_256B3FF70();
}

void sub_256A94F54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Precondition.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8, SWORD2(vars8), SBYTE6(vars8), SHIBYTE(vars8));
}

void sub_256A94F6C()
{
}

ModelCatalog::Platform::PlatformType_optional __swiftcall Platform.PlatformType.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_256B3FCD0();
  result.value = swift_bridgeObjectRelease();
  char v5 = 6;
  if (v3 < 6) {
    char v5 = v3;
  }
  char *v2 = v5;
  return result;
}

void *static Platform.PlatformType.allCases.getter()
{
  return &unk_270603CB8;
}

uint64_t Platform.PlatformType.rawValue.getter()
{
  uint64_t result = 0x6E776F6E6B6E75;
  switch(*v0)
  {
    case 1:
      uint64_t result = 7565161;
      break;
    case 2:
      uint64_t result = 0x736F63616DLL;
      break;
    case 3:
      uint64_t result = 0x736F6863746177;
      break;
    case 4:
      uint64_t result = 1936684660;
      break;
    case 5:
      uint64_t result = 0x736F6E6F69736976;
      break;
    default:
      return result;
  }
  return result;
}

ModelCatalog::Platform::PlatformType_optional sub_256A9509C(Swift::String *a1)
{
  return Platform.PlatformType.init(rawValue:)(*a1);
}

uint64_t sub_256A950A8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Platform.PlatformType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_256A950D0()
{
  return sub_256A55E94();
}

uint64_t sub_256A950D8()
{
  return sub_256A867E4();
}

uint64_t sub_256A950E0()
{
  return sub_256A55F18();
}

uint64_t sub_256A950E8(unsigned __int8 *a1, char *a2)
{
  return sub_256B024A0(*a1, *a2);
}

uint64_t sub_256A950F4()
{
  return sub_256B3F830();
}

uint64_t sub_256A95154()
{
  return sub_256B3F810();
}

void sub_256A951A4(void *a1@<X8>)
{
  *a1 = &unk_270603CB8;
}

void Platform.platformType.getter(unsigned char *a1@<X8>)
{
}

uint64_t Platform.version.getter()
{
  return sub_256A4A370();
}

uint64_t Platform.hash(into:)()
{
  sub_256A867E4();
  swift_bridgeObjectRetain();
  sub_256A7A9B8();

  return swift_bridgeObjectRelease();
}

uint64_t static Platform.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  if ((sub_256B024A0(*(unsigned char *)a1, *(unsigned char *)a2) & 1) == 0) {
    return 0;
  }
  if (v2 == v4 && v3 == v5) {
    return 1;
  }
  sub_256A4A370();

  return sub_256B3FEA0();
}

uint64_t sub_256A952C0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6D726F6674616C70 && a2 == 0xEC00000065707954;
  if (v2 || (sub_256B3FEA0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_256B3FEA0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_256A953C8(char a1)
{
  if (a1) {
    return 0x6E6F6973726576;
  }
  else {
    return 0x6D726F6674616C70;
  }
}

uint64_t sub_256A95408()
{
  return sub_256A953C8(*v0);
}

uint64_t sub_256A95410@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_256A952C0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_256A95438(uint64_t a1)
{
  unint64_t v2 = sub_256A98D0C();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_256A95474(uint64_t a1)
{
  unint64_t v2 = sub_256A98D0C();

  return MEMORY[0x270FA00B8](a1, v2);
}

void Platform.encode(to:)()
{
  sub_256A4A878();
  uint64_t v3 = v2;
  uint64_t v4 = sub_256A39D2C(&qword_26B2B36E8);
  sub_256A49FB8();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  sub_256A4A7CC();
  sub_256A7B704(v3);
  sub_256A98D0C();
  sub_256AA032C();
  sub_256A98D58();
  sub_256AA0B84();
  if (!v0) {
    sub_256AA0F28();
  }
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v4);
  sub_256A6ECF0();
  sub_256A4A890();
}

uint64_t Platform.hashValue.getter()
{
  return sub_256B3FF70();
}

void Platform.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_256A4A878();
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  sub_256A39D2C(&qword_26B2B5F30);
  sub_256A49FB8();
  MEMORY[0x270FA5388](v18);
  sub_256A6E86C();
  sub_256A98D0C();
  sub_256AA05DC();
  if (!v13)
  {
    sub_256A98DA4();
    sub_256B3FD90();
    uint64_t v19 = sub_256B3FD50();
    uint64_t v21 = v20;
    sub_256A6E550();
    v22();
    *(unsigned char *)uint64_t v17 = a13;
    *(void *)(v17 + 8) = v19;
    *(void *)(v17 + 16) = v21;
  }
  sub_256A39DB4(v15);
  sub_256AA0174();
  sub_256A4A890();
}

uint64_t sub_256A95790()
{
  return sub_256B3FF70();
}

void sub_256A95804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Platform.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8, SWORD2(vars8), SBYTE6(vars8), SHIBYTE(vars8));
}

void sub_256A9581C()
{
}

void static Catalog.requestResource(identifier:)()
{
  sub_256AA08C0();
  swift_allocObject();
  CatalogClient.init()();
  uint64_t v3 = sub_256AA0AF8();
  uint64_t v5 = sub_256A3EB08(v3, v4);
  if (v1)
  {
    swift_release();
  }
  else
  {
    uint64_t v6 = (void *)v5;
    sub_256A49E98(0, &qword_26B2B50E0);
    id v7 = v6;
    uint64_t v8 = sub_256B3FA70();
    char v9 = sub_256AA0788(v8);

    if (v9)
    {
      swift_release();

      *(_OWORD *)uint64_t v0 = xmmword_256B5EDF0;
      *(unsigned char *)(v0 + 16) = 0;
    }
    else
    {
      id v10 = v7;
      uint64_t v11 = sub_256B3FA70();
      char v12 = sub_256AA0788(v11);

      if (v12)
      {
        swift_release();

        *(void *)uint64_t v0 = 0xD000000000000028;
        *(void *)(v0 + 8) = 0x8000000256B48E70;
        *(unsigned char *)(v0 + 16) = 1;
      }
      else
      {
        id v13 = v10;
        uint64_t v14 = sub_256B3FA70();
        char v15 = sub_256AA0788(v14);

        swift_release();
        if (v15)
        {
          *(void *)uint64_t v0 = 0xD000000000000035;
          *(void *)(v0 + 8) = 0x8000000256B48E30;
          *(unsigned char *)(v0 + 16) = 2;
        }
        else
        {
          sub_256AA0A34(0xD000000000000029);
        }
      }
    }
  }
}

void static Catalog.releaseResource(identifier:)()
{
  sub_256AA08C0();
  swift_allocObject();
  CatalogClient.init()();
  uint64_t v3 = sub_256AA0AF8();
  uint64_t v5 = sub_256A3EB34(v3, v4);
  if (v1)
  {
    swift_release();
  }
  else
  {
    uint64_t v6 = (void *)v5;
    sub_256A49E98(0, &qword_26B2B50E0);
    id v7 = v6;
    uint64_t v8 = sub_256B3FA70();
    char v9 = sub_256AA0788(v8);

    if (v9)
    {
      swift_release();

      *(_OWORD *)uint64_t v0 = xmmword_256B5EDF0;
      *(unsigned char *)(v0 + 16) = 0;
    }
    else
    {
      id v10 = v7;
      uint64_t v11 = sub_256B3FA70();
      char v12 = sub_256AA0788(v11);

      if (v12)
      {
        swift_release();

        *(void *)uint64_t v0 = 0xD000000000000032;
        *(void *)(v0 + 8) = 0x8000000256B48F10;
        *(unsigned char *)(v0 + 16) = 1;
      }
      else
      {
        id v13 = v10;
        uint64_t v14 = sub_256B3FA70();
        char v15 = sub_256AA0788(v14);

        swift_release();
        if (v15)
        {
          *(void *)uint64_t v0 = 0xD00000000000003FLL;
          *(void *)(v0 + 8) = 0x8000000256B48ED0;
          *(unsigned char *)(v0 + 16) = 2;
        }
        else
        {
          sub_256AA0A34(0xD000000000000028);
        }
      }
    }
  }
}

uint64_t static Catalog.modelManagerDefaultMemoryBudget.getter()
{
  return 2000000;
}

uint64_t static Catalog.modelManagerForegroundOvercommitBudget.getter()
{
  return 250000;
}

uint64_t ResourceStatusOutput.resourceID.getter()
{
  return sub_256A4A370();
}

uint64_t ResourceStatusOutput.resourceType.getter()
{
  return sub_256A4A370();
}

uint64_t ResourceStatusOutput.sourceName.getter()
{
  return sub_256A4A370();
}

uint64_t ResourceStatusOutput.glyph.getter()
{
  return sub_256A4A370();
}

uint64_t ResourceStatusOutput.percent.getter()
{
  return *(void *)(v0 + 64);
}

uint64_t ResourceStatusOutput.version.getter()
{
  return sub_256A4A370();
}

uint64_t ResourceStatusOutput.displayVersion.getter()
{
  return sub_256A4A370();
}

uint64_t ResourceStatusOutput.gmEssential.getter()
{
  return *(unsigned __int8 *)(v0 + 112);
}

uint64_t ResourceStatusOutput.size.getter()
{
  return *(void *)(v0 + 120);
}

uint64_t ResourceStatusOutput.tags.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ResourceStatusOutput.assetSet.getter()
{
  return sub_256A4A370();
}

uint64_t sub_256A95CCC()
{
  uint64_t result = sub_256B3F600();
  qword_269F79B20 = result;
  return result;
}

uint64_t static ResourceStatusOutput.legend.getter()
{
  if (qword_269F78A88 != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

uint64_t ResourceStatusOutput.description.getter()
{
  return ResourceStatusOutput.description(withAssetSet:)(0)._countAndFlagsBits;
}

Swift::String __swiftcall ResourceStatusOutput.description(withAssetSet:)(Swift::Bool withAssetSet)
{
  uint64_t v3 = *(void *)(v1 + 88);
  uint64_t v4 = *(void *)(v1 + 104);
  uint64_t v5 = *(void *)(v1 + 152);
  uint64_t v13 = *(void *)(v1 + 48);
  uint64_t v14 = *(void **)(v1 + 56);
  if ((*(unsigned char *)(v1 + 72) & 1) == 0)
  {
    double v6 = round(*(double *)(v1 + 64) * 10.0) / 10.0;
    sub_256A39D2C(&qword_269F79CE8);
    uint64_t v7 = sub_256A7B57C();
    uint64_t v8 = MEMORY[0x263F8D538];
    *(_OWORD *)(v7 + 16) = xmmword_256B57080;
    uint64_t v9 = MEMORY[0x263F8D5B8];
    *(void *)(v7 + 56) = v8;
    *(void *)(v7 + 64) = v9;
    *(double *)(v7 + 32) = v6;
    sub_256B3F6D0();
  }
  MEMORY[0x25A2AB050](32, 0xE100000000000000, 21);
  sub_256AA0FF4();
  sub_256B3F760();
  swift_bridgeObjectRelease();
  if (v3)
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = sub_256B3F750();
    if (__OFSUB__(22, v10))
    {
      __break(1u);
      goto LABEL_19;
    }
    sub_256AA0BF0();
    sub_256AA0FF4();
    sub_256B3F760();
    swift_bridgeObjectRelease();
  }
  MEMORY[0x25A2AB050](32, 0xE100000000000000, 11);
  sub_256AA0FF4();
  sub_256B3F760();
  swift_bridgeObjectRelease();
  if (!v4) {
    goto LABEL_9;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = sub_256B3F750();
  if (__OFSUB__(12, v10))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  sub_256AA0BF0();
  sub_256AA0FF4();
  sub_256B3F760();
  swift_bridgeObjectRelease();
LABEL_9:
  if (withAssetSet)
  {
    uint64_t v10 = sub_256B3F750();
    if (!__OFSUB__(100, v10))
    {
      MEMORY[0x25A2AB050](32, 0xE100000000000000, (100 - v10) & ~((100 - v10) >> 63));
      swift_bridgeObjectRetain();
      sub_256B3F760();
      swift_bridgeObjectRelease();
      if (!v5)
      {
        MEMORY[0x25A2AB050](32, 0xE100000000000000, 49);
        sub_256B3F760();
        goto LABEL_16;
      }
      uint64_t v10 = sub_256B3F750();
      if (!__OFSUB__(50, v10))
      {
        sub_256AA0BF0();
        swift_bridgeObjectRetain();
        sub_256B3F760();
LABEL_16:
        swift_bridgeObjectRelease();
        sub_256B3FB70();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v15 = v13;
        uint64_t v16 = v14;
        sub_256A9FF34();
        sub_256B3F760();
        swift_bridgeObjectRelease();
        sub_256A9FF34();
        sub_256B3F760();
        swift_bridgeObjectRelease();
        sub_256A9FF34();
        sub_256B3F760();
        swift_bridgeObjectRelease();
        sub_256A9FF34();
        sub_256B3F760();
        swift_bridgeObjectRelease();
        sub_256A9FF34();
        sub_256B3F760();
        swift_bridgeObjectRelease();
        sub_256A9FF34();
        sub_256B3F760();
        goto LABEL_17;
      }
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  sub_256B3FB70();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = v13;
  uint64_t v16 = v14;
  sub_256A9FF34();
  sub_256B3F760();
  swift_bridgeObjectRelease();
  sub_256A9FF34();
  sub_256B3F760();
  swift_bridgeObjectRelease();
  sub_256A9FF34();
  sub_256B3F760();
  swift_bridgeObjectRelease();
  sub_256A9FF34();
  sub_256B3F760();
  swift_bridgeObjectRelease();
  sub_256A9FF34();
  swift_bridgeObjectRetain();
  sub_256B3F760();
LABEL_17:
  swift_bridgeObjectRelease();
  uint64_t v10 = v15;
  uint64_t v11 = v16;
LABEL_22:
  result._object = v11;
  result._uint64_t countAndFlagsBits = v10;
  return result;
}

void sub_256A9622C(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X6>, unint64_t *a6@<X8>)
{
  int v51 = a3;
  uint64_t v50 = a6;
  uint64_t v48 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v49 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v13 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v46 - v16;
  uint64_t v18 = *a2;
  uint64_t v19 = *v51;
  if ((*(uint64_t (**)(uint64_t))(*(void *)(a5 + 8) + 56))(a4))
  {
    unint64_t v20 = 0;
    unint64_t v21 = 0;
    uint64_t v22 = 0;
    char v23 = 1;
    unint64_t v24 = 0xE800000000000000;
    uint64_t v25 = 0x64616F6C65646973;
    unint64_t v26 = 0xA600000000000000;
    uint64_t v27 = 4021525730;
LABEL_3:
    unint64_t v28 = v27 & 0xFFFF0000FFFFFFFFLL | 0x8FB800000000;
    goto LABEL_21;
  }
  uint64_t v47 = v18;
  uint64_t v29 = v49;
  int v51 = v11;
  if (!v19)
  {
    uint64_t v30 = v52;
    uint64_t v31 = a4;
    (*(void (**)(uint64_t, uint64_t))(a5 + 32))(a4, a5);
    if (!v30)
    {
      uint64_t v32 = v29;
      uint64_t v52 = 0;
      goto LABEL_17;
    }
LABEL_8:
    id v58 = v30;
    id v33 = v30;
    sub_256A39D2C((uint64_t *)&unk_26B2B5DA0);
    if (swift_dynamicCast())
    {
      if (v57 == 1)
      {
        sub_256A9FAF8();

        uint64_t v34 = v48;
        uint64_t v35 = v51;
        (*(void (**)(void *, uint64_t, uint64_t))(v48 + 16))(v51, a1, v31);
        int v36 = v47;
        uint64_t v52 = 0;
        if (v47 == 9)
        {
          (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a5 + 48))(v54, v31, a5);
          id v37 = objc_msgSend(self, sel_sharedManager);
          uint64_t v38 = v35;
          if (sub_256B3F750())
          {
            uint64_t v39 = (void *)sub_256B3F690();
            uint64_t v40 = (void *)sub_256B3F690();
            id v41 = objc_msgSend(v37, sel_downloadStatusForSubscriber_subscriptionName_, v39, v40);

            sub_256A4B7D4((unint64_t)v41, &v53);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            switch(v53)
            {
              case 1:
                (*(void (**)(void *, uint64_t))(v48 + 8))(v38, v31);
                goto LABEL_28;
              case 2:
                (*(void (**)(void *, uint64_t))(v48 + 8))(v38, v31);
                goto LABEL_30;
              case 3:
                (*(void (**)(void *, uint64_t))(v48 + 8))(v38, v31);
                goto LABEL_32;
              case 4:
                (*(void (**)(void *, uint64_t))(v48 + 8))(v38, v31);
                goto LABEL_35;
              case 5:
                (*(void (**)(void *, uint64_t))(v48 + 8))(v38, v31);
                goto LABEL_37;
              case 6:
                (*(void (**)(void *, uint64_t))(v48 + 8))(v38, v31);
                goto LABEL_39;
              case 7:
                (*(void (**)(void *, uint64_t))(v48 + 8))(v38, v31);
                goto LABEL_41;
              default:
                (*(void (**)(void *, uint64_t))(v48 + 8))(v38, v31);
                goto LABEL_24;
            }
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          (*(void (**)(void *, uint64_t))(v48 + 8))(v35, v31);
LABEL_26:

          uint64_t v25 = 0;
          unint64_t v24 = 0;
          unint64_t v20 = 0;
          unint64_t v21 = 0;
          uint64_t v22 = 0;
          char v23 = 1;
          unint64_t v26 = 0xA400000000000000;
          unint64_t v28 = 3046416368;
        }
        else
        {
          (*(void (**)(void *, uint64_t))(v34 + 8))(v35, v31);
          switch(v36)
          {
            case 1:
LABEL_30:

              uint64_t v25 = 0;
              unint64_t v24 = 0;
              unint64_t v20 = 0;
              unint64_t v21 = 0;
              uint64_t v22 = 0;
              char v23 = 1;
              unint64_t v26 = 0xA400000000000000;
              unint64_t v28 = 2224332784;
              goto LABEL_21;
            case 2:
LABEL_32:
              unint64_t v28 = 0x8FB8EFB88FE2;

              uint64_t v25 = 0;
              unint64_t v24 = 0;
              unint64_t v20 = 0;
              unint64_t v21 = 0;
              uint64_t v22 = 0;
              goto LABEL_33;
            case 3:
LABEL_37:

              uint64_t v25 = 0;
              unint64_t v24 = 0;
              unint64_t v20 = 0;
              unint64_t v21 = 0;
              uint64_t v22 = 0;
              char v23 = 1;
              unint64_t v26 = 0xA400000000000000;
              unint64_t v28 = 3197280240;
              goto LABEL_21;
            case 4:
LABEL_24:

              uint64_t v25 = 0;
              unint64_t v24 = 0;
              unint64_t v20 = 0;
              unint64_t v21 = 0;
              uint64_t v22 = 0;
              char v23 = 1;
              unint64_t v26 = 0xA600000000000000;
              uint64_t v27 = 4020935394;
              goto LABEL_3;
            case 5:
LABEL_35:

              uint64_t v25 = 0;
              unint64_t v24 = 0;
              unint64_t v20 = 0;
              unint64_t v21 = 0;
              uint64_t v22 = 0;
              unint64_t v28 = 9346530;
              goto LABEL_42;
            case 6:
              goto LABEL_26;
            case 7:
LABEL_39:

              uint64_t v25 = 0;
              unint64_t v24 = 0;
              unint64_t v20 = 0;
              unint64_t v21 = 0;
              uint64_t v22 = 0;
              char v23 = 1;
              unint64_t v26 = 0xA400000000000000;
              unint64_t v28 = 2879037424;
              goto LABEL_21;
            case 8:
LABEL_41:
              unint64_t v28 = 9215458;

              uint64_t v25 = 0;
              unint64_t v24 = 0;
              unint64_t v20 = 0;
              unint64_t v21 = 0;
              uint64_t v22 = 0;
LABEL_42:
              char v23 = 1;
              unint64_t v26 = 0xA300000000000000;
              break;
            default:
LABEL_28:

              uint64_t v25 = 0;
              unint64_t v24 = 0;
              unint64_t v20 = 0;
              unint64_t v21 = 0;
              uint64_t v22 = 0;
              unint64_t v28 = 0x8FB8EFB98FE2;
LABEL_33:
              char v23 = 1;
              unint64_t v26 = 0xA600000000000000;
              break;
          }
        }
        goto LABEL_21;
      }
      sub_256A9FAF8();
    }

    return;
  }
  v54[0] = v19;
  uint64_t v30 = v52;
  uint64_t v31 = a4;
  (*(void (**)(void *, uint64_t, uint64_t))(a5 + 40))(v54, a4, a5);
  if (v30) {
    goto LABEL_8;
  }
  uint64_t v52 = 0;
  uint64_t v32 = v29;
LABEL_17:
  uint64_t v42 = v17;
  (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v17, v15, AssociatedTypeWitness);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(v54, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v25 = v54[0];
  unint64_t v24 = v54[1];
  uint64_t v44 = AssociatedTypeWitness;
  (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t))(AssociatedConformanceWitness + 88))(&v55, AssociatedTypeWitness, AssociatedConformanceWitness);
  unint64_t v21 = v56;
  if (v56) {
    unint64_t v20 = v55;
  }
  else {
    unint64_t v20 = 0;
  }
  uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v42, v44);
  char v23 = 0;
  unint64_t v26 = 0xA300000000000000;
  unint64_t v28 = 8756450;
LABEL_21:
  uint64_t v45 = v50;
  *uint64_t v50 = v28;
  v45[1] = v26;
  v45[2] = v25;
  v45[3] = v24;
  v45[4] = v20;
  v45[5] = v21;
  v45[6] = v22;
  *((unsigned char *)v45 + 56) = v23;
}

void CatalogResource.statusOutput(status:progress:assetLock:)()
{
  sub_256A4A878();
  uint64_t v97 = v1;
  uint64_t v3 = v2;
  int v74 = v4;
  uint64_t v73 = v5;
  uint64_t v7 = v6;
  sub_256A9FC2C();
  uint64_t v9 = v8;
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v78 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (unsigned __int8 *)MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v58 - v14;
  unsigned __int8 v16 = *v13;
  uint64_t v18 = *v17;
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v79 = v20;
  uint64_t v77 = v19;
  v19((char *)&v58 - v14, v20, v21);
  sub_256A39D2C(&qword_26B2B54E8);
  int v22 = swift_dynamicCast();
  __int16 v75 = v7;
  if (v22)
  {
    uint64_t v76 = v9;
    sub_256A3A540(&v83, (uint64_t)&v94);
    uint64_t v23 = v95;
    uint64_t v24 = v96;
    uint64_t v25 = sub_256A39D70(&v94, v95);
    unsigned __int8 v80 = v16;
    v81[0] = v18;
    uint64_t v26 = v97;
    sub_256A9622C((uint64_t)v25, &v80, v81, v23, v24, &v86);
    if (v0)
    {
      sub_256A39DB4((uint64_t)&v94);
      sub_256A9FDB0();
      v27();
      goto LABEL_21;
    }
    unint64_t v62 = v86;
    unint64_t v63 = v87;
    uint64_t v68 = v88;
    uint64_t v69 = 0;
    uint64_t v66 = v89;
    uint64_t v67 = v90;
    uint64_t v64 = v91;
    uint64_t v65 = v92;
    int v61 = v93;
    sub_256A39D70(&v94, v95);
    uint64_t v28 = sub_256AA0F14();
    v29(v28);
    uint64_t v59 = v91;
    uint64_t v60 = v90;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_256A39DB4((uint64_t)&v94);
    uint64_t v9 = v76;
  }
  else
  {
    uint64_t v68 = 0;
    uint64_t v69 = v0;
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    uint64_t v64 = 0;
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    uint64_t v67 = 0;
    int v61 = 1;
    unint64_t v62 = 2728370160;
    unint64_t v63 = 0xA400000000000000;
    uint64_t v26 = v97;
  }
  uint64_t v31 = v77;
  uint64_t v30 = v78;
  uint64_t v32 = *(void (**)(char *, uint64_t))(v9 + 8);
  v32(v15, v3);
  v31(v30, v79, v3);
  sub_256A39D2C((uint64_t *)&unk_269F79CF0);
  int v33 = swift_dynamicCast();
  unint64_t v34 = 0;
  unint64_t v35 = 0;
  uint64_t v76 = 0;
  uint64_t v77 = 0;
  if (v33)
  {
    sub_256A3A540(&v94, (uint64_t)v81);
    sub_256A39D70(v81, v82);
    sub_256AA01F4();
    v36();
    uint64_t v76 = v85;
    uint64_t v77 = v84;
    swift_bridgeObjectRetain();
    sub_256A6DFC8((uint64_t)&v83);
    sub_256A39D70(v81, v82);
    sub_256AA0F14();
    sub_256AA01F4();
    v37();
    uint64_t v30 = v78;
    unint64_t v34 = v86;
    unint64_t v35 = v87;
    swift_bridgeObjectRetain();
    sub_256A6DFC8((uint64_t)&v86);
    sub_256A39DB4((uint64_t)v81);
  }
  uint64_t v78 = (char *)v34;
  int v74 = v74;
  v32(v30, v3);
  uint64_t v70 = *(uint64_t (**)(uint64_t, uint64_t))(v26 + 72);
  uint64_t v38 = v70(v3, v26);
  uint64_t v39 = *(void *)(v38 + 16);
  uint64_t v71 = v26 + 72;
  unint64_t v72 = v35;
  if (v39)
  {
    uint64_t v58 = v3;
    swift_bridgeObjectRetain();
    uint64_t v40 = 0;
    while (1)
    {
      LOBYTE(v86) = *(unsigned char *)(v38 + v40 + 32);
      if (Tag.rawValue.getter() == 0xD000000000000020 && v41 == 0x8000000256B41B50)
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        goto LABEL_18;
      }
      char v42 = sub_256B3FEA0();
      swift_bridgeObjectRelease();
      if (v42) {
        break;
      }
      if (v39 == ++v40)
      {
        swift_bridgeObjectRelease_n();
        LOBYTE(v39) = 0;
        goto LABEL_19;
      }
    }
    swift_bridgeObjectRelease_n();
LABEL_18:
    LOBYTE(v39) = 1;
LABEL_19:
    uint64_t v43 = v73;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v43 = v73;
  }
  uint64_t v44 = sub_256AA0850();
  uint64_t v46 = v45(v44);
  uint64_t v48 = v47;
  uint64_t v49 = sub_256AA0850();
  uint64_t v50 = ((uint64_t (*)(uint64_t))v70)(v49);
  int v51 = v75;
  *__int16 v75 = v46;
  v51[1] = v48;
  uint64_t v52 = v72;
  void v51[2] = (uint64_t)v78;
  void v51[3] = v52;
  uint64_t v53 = v76;
  v51[4] = (uint64_t)v77;
  v51[5] = v53;
  unint64_t v54 = v63;
  v51[6] = v62;
  v51[7] = v54;
  v51[8] = v43;
  *((unsigned char *)v51 + 72) = v74 & 1;
  uint64_t v55 = v66;
  v51[10] = v68;
  v51[11] = v55;
  uint64_t v56 = v64;
  v51[12] = v67;
  v51[13] = v56;
  *((unsigned char *)v51 + 112) = v39;
  v51[15] = v65;
  *((unsigned char *)v51 + 128) = v61;
  uint64_t v57 = v60;
  v51[17] = v50;
  v51[18] = v57;
  v51[19] = v59;
LABEL_21:
  sub_256AA0888();
  sub_256A4A890();
}

uint64_t sub_256A96FBC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  sub_256AA0480(a1, a2, a3, a4, a5, a6, a7, a8, v9, v10);
  return sub_256A860C0();
}

uint64_t sub_256A96FEC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  sub_256AA0480(a1, a2, a3, a4, a5, a6, a7, a8, v9, v10);
  return sub_256A87110();
}

uint64_t sub_256A97040(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  sub_256AA0480(a1, a2, a3, a4, a5, a6, a7, a8, v9, v10);
  return sub_256A87110();
}

uint64_t sub_256A97094(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  sub_256AA0480(a1, a2, a3, a4, a5, a6, a7, a8, v9, v10);
  return sub_256A87110();
}

uint64_t sub_256A970E8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  sub_256AA0480(a1, a2, a3, a4, a5, a6, a7, a8, v9, v10);
  return sub_256A87110();
}

uint64_t sub_256A9713C()
{
  memcpy(__dst, v0, sizeof(__dst));
  return sub_256A860C0();
}

uint64_t sub_256A97178()
{
  memcpy(__dst, v0, sizeof(__dst));
  return sub_256A871BC();
}

uint64_t sub_256A971B4()
{
  memcpy(__dst, v0, sizeof(__dst));
  return sub_256A860C0();
}

uint64_t sub_256A971F0()
{
  memcpy(__dst, v0, sizeof(__dst));
  return sub_256A860C0();
}

uint64_t sub_256A9722C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_256A9FDD8(a1, a2, a3, a4, a5, a6, a7, a8, v9);
  return sub_256A874B0();
}

uint64_t sub_256A97280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_256A9FDD8(a1, a2, a3, a4, a5, a6, a7, a8, v9);
  return sub_256A874B0();
}

uint64_t sub_256A972D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_256AA0118(a1, a2, a3, a4, a5, a6, a7, a8, v9);
  return sub_256A87558();
}

uint64_t sub_256A97328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_256AA0118(a1, a2, a3, a4, a5, a6, a7, a8, v9);
  return sub_256A87558();
}

uint64_t sub_256A9737C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_256A9FDD8(a1, a2, a3, a4, a5, a6, a7, a8, v9);
  return sub_256A874B0();
}

uint64_t sub_256A973D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_256A9FDD8(a1, a2, a3, a4, a5, a6, a7, a8, v9);
  return sub_256A874B0();
}

uint64_t sub_256A97424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_256A9FDD8(a1, a2, a3, a4, a5, a6, a7, a8, v9);
  return sub_256A874B0();
}

uint64_t sub_256A97478(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_256A9FDD8(a1, a2, a3, a4, a5, a6, a7, a8, v9);
  return sub_256A874B0();
}

uint64_t sub_256A974CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_256A9FDD8(a1, a2, a3, a4, a5, a6, a7, a8, v9);
  return sub_256A874B0();
}

uint64_t sub_256A97520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_256A9FDD8(a1, a2, a3, a4, a5, a6, a7, a8, v9);
  return sub_256A874B0();
}

uint64_t sub_256A97574(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_256A9FDD8(a1, a2, a3, a4, a5, a6, a7, a8, v9);
  return sub_256A874B0();
}

uint64_t sub_256A975C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_256AA0118(a1, a2, a3, a4, a5, a6, a7, a8, v9);
  return sub_256A860C0();
}

uint64_t sub_256A975F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_256AA0118(a1, a2, a3, a4, a5, a6, a7, a8, v9);
  return sub_256A87558();
}

uint64_t sub_256A9764C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_256AA0118(a1, a2, a3, a4, a5, a6, a7, a8, v9);
  return sub_256A87558();
}

uint64_t sub_256A976A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_256AA0118(a1, a2, a3, a4, a5, a6, a7, a8, v9);
  return sub_256A87558();
}

uint64_t sub_256A976F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_256AA0118(a1, a2, a3, a4, a5, a6, a7, a8, v9);
  return sub_256A87558();
}

uint64_t sub_256A97748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_256AA0118(a1, a2, a3, a4, a5, a6, a7, a8, v9);
  return sub_256A87558();
}

uint64_t sub_256A9779C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_256A9FDD8(a1, a2, a3, a4, a5, a6, a7, a8, v9);
  return sub_256A874B0();
}

uint64_t sub_256A977F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_256A9FDD8(a1, a2, a3, a4, a5, a6, a7, a8, v9);
  return sub_256A860C0();
}

uint64_t sub_256A97820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_256A9FDD8(a1, a2, a3, a4, a5, a6, a7, a8, v9);
  return sub_256A874B0();
}

uint64_t sub_256A97874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_256A9FDD8(a1, a2, a3, a4, a5, a6, a7, a8, v9);
  return sub_256A874B0();
}

uint64_t sub_256A978C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_256A9FDD8(a1, a2, a3, a4, a5, a6, a7, a8, v9);
  return sub_256A874B0();
}

uint64_t sub_256A9791C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_256A9FDD8(a1, a2, a3, a4, a5, a6, a7, a8, v9);
  return sub_256A874B0();
}

void sub_256A97970()
{
  sub_256A4A458();
  sub_256AA05F4();
  if (v0)
  {
    uint64_t v2 = v1 + 48;
    do
    {
      v2 += 24;
      swift_bridgeObjectRetain();
      sub_256B3F740();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_256B3F740();
      swift_bridgeObjectRelease_n();
      --v0;
    }
    while (v0);
  }
  sub_256A4A2C0();
}

uint64_t sub_256A97AA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t result = sub_256B3FF50();
  if (v3)
  {
    uint64_t v5 = a2 + 32;
    do
    {
      ++v5;
      Tag.rawValue.getter();
      sub_256A7A7C0();
      uint64_t result = swift_bridgeObjectRelease();
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_256A97B18(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t result = sub_256B3FF50();
  if (v3)
  {
    uint64_t v5 = a2 + 82;
    do
    {
      int v6 = *(unsigned __int8 *)(v5 - 34);
      uint64_t v7 = *(void *)(v5 - 18);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      sub_256B3F740();
      if (v6 != 2) {
        sub_256B3FF60();
      }
      sub_256B3FF60();
      swift_bridgeObjectRelease();
      sub_256B3FF60();
      if (v7)
      {
        swift_bridgeObjectRetain();
        sub_256B3F740();
        swift_bridgeObjectRelease();
      }
      sub_256B3FF50();
      sub_256B3FF60();
      sub_256B3FF60();
      sub_256B3FF60();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      v5 += 56;
      --v3;
    }
    while (v3);
  }
  return result;
}

void sub_256A97C6C()
{
  sub_256A4A458();
  sub_256AA05F4();
  if (v0)
  {
    uint64_t v2 = v1 + 32;
    do
    {
      ++v2;
      sub_256B3F740();
      swift_bridgeObjectRelease();
      --v0;
    }
    while (v0);
  }
  sub_256A4A2C0();
}

uint64_t sub_256A97D1C()
{
  uint64_t result = sub_256AA05F4();
  if (v0)
  {
    uint64_t v3 = v1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_256B3F740();
      uint64_t result = swift_bridgeObjectRelease();
      v3 += 16;
      --v0;
    }
    while (v0);
  }
  return result;
}

int64_t sub_256A97D84(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  if (v5 + 1 < (unint64_t)(result + 63) >> 6)
  {
    unint64_t v10 = *(void *)(v6 + 8 * v9);
    if (v10) {
      return __clz(__rbit64(v10)) + (v9 << 6);
    }
    unint64_t v11 = (unint64_t)(result + 63) >> 6;
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v11)
    {
      unint64_t v10 = *(void *)(v6 + 8 * v9);
      if (v10) {
        return __clz(__rbit64(v10)) + (v9 << 6);
      }
      while (v5 + 3 < v11)
      {
        unint64_t v10 = *(void *)(a4 + 80 + 8 * v5++);
        if (v10)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v10)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_256A97E68(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  uint64_t v2 = 64;
  for (uint64_t i = 9; i - 7 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_256A97EE8(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_256A97EF4()
{
  unint64_t result = qword_269F79B40;
  if (!qword_269F79B40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79B40);
  }
  return result;
}

unint64_t sub_256A97F40()
{
  unint64_t result = qword_269F79B48;
  if (!qword_269F79B48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79B48);
  }
  return result;
}

unint64_t sub_256A97F8C()
{
  unint64_t result = qword_269F79B50;
  if (!qword_269F79B50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79B50);
  }
  return result;
}

unint64_t sub_256A97FD8()
{
  unint64_t result = qword_269F79B88;
  if (!qword_269F79B88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79B88);
  }
  return result;
}

unint64_t sub_256A98024()
{
  unint64_t result = qword_269F79B90;
  if (!qword_269F79B90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79B90);
  }
  return result;
}

unint64_t sub_256A98070()
{
  unint64_t result = qword_269F79BC8;
  if (!qword_269F79BC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79BC8);
  }
  return result;
}

unint64_t sub_256A980BC()
{
  unint64_t result = qword_269F79BD0;
  if (!qword_269F79BD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79BD0);
  }
  return result;
}

unint64_t sub_256A98108()
{
  unint64_t result = qword_269F79BD8;
  if (!qword_269F79BD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79BD8);
  }
  return result;
}

unint64_t sub_256A98154()
{
  unint64_t result = qword_269F79BE0;
  if (!qword_269F79BE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79BE0);
  }
  return result;
}

unint64_t sub_256A981A0()
{
  unint64_t result = qword_269F79C28;
  if (!qword_269F79C28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79C28);
  }
  return result;
}

unint64_t sub_256A981EC()
{
  unint64_t result = qword_269F79C30;
  if (!qword_269F79C30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79C30);
  }
  return result;
}

unint64_t sub_256A98238()
{
  unint64_t result = qword_269F79C38;
  if (!qword_269F79C38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79C38);
  }
  return result;
}

unint64_t sub_256A98284()
{
  unint64_t result = qword_269F79C40;
  if (!qword_269F79C40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79C40);
  }
  return result;
}

unint64_t sub_256A982D0()
{
  unint64_t result = qword_269F79C78;
  if (!qword_269F79C78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79C78);
  }
  return result;
}

unint64_t sub_256A9831C()
{
  unint64_t result = qword_269F79C80;
  if (!qword_269F79C80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79C80);
  }
  return result;
}

unint64_t sub_256A98368()
{
  unint64_t result = qword_26B2B6250;
  if (!qword_26B2B6250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B6250);
  }
  return result;
}

unint64_t sub_256A983B4()
{
  unint64_t result = qword_26B2B6278;
  if (!qword_26B2B6278)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B6278);
  }
  return result;
}

unint64_t sub_256A98400()
{
  unint64_t result = qword_26B2B35A0;
  if (!qword_26B2B35A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B35A0);
  }
  return result;
}

unint64_t sub_256A9844C()
{
  unint64_t result = qword_26B2B3608;
  if (!qword_26B2B3608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B3608);
  }
  return result;
}

unint64_t sub_256A98498()
{
  unint64_t result = qword_26B2B3460;
  if (!qword_26B2B3460)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B3460);
  }
  return result;
}

unint64_t sub_256A984E4()
{
  unint64_t result = qword_26B2B3658;
  if (!qword_26B2B3658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B3658);
  }
  return result;
}

unint64_t sub_256A98530()
{
  unint64_t result = qword_26B2B3670;
  if (!qword_26B2B3670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B3670);
  }
  return result;
}

uint64_t sub_256A9857C(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_256A49664(&qword_26B2B6320);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_256A985E0()
{
  unint64_t result = qword_26B2B5DC0;
  if (!qword_26B2B5DC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5DC0);
  }
  return result;
}

unint64_t sub_256A9862C()
{
  unint64_t result = qword_26B2B5E30;
  if (!qword_26B2B5E30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5E30);
  }
  return result;
}

unint64_t sub_256A98678()
{
  unint64_t result = qword_26B2B5E68;
  if (!qword_26B2B5E68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5E68);
  }
  return result;
}

unint64_t sub_256A986C4()
{
  unint64_t result = qword_26B2B5E78;
  if (!qword_26B2B5E78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5E78);
  }
  return result;
}

uint64_t sub_256A98710(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_256A49664(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_256A9877C()
{
  unint64_t result = qword_26B2B5E98;
  if (!qword_26B2B5E98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5E98);
  }
  return result;
}

unint64_t sub_256A987C8()
{
  unint64_t result = qword_269F79CA8;
  if (!qword_269F79CA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79CA8);
  }
  return result;
}

unint64_t sub_256A98814()
{
  unint64_t result = qword_26B2B5E40;
  if (!qword_26B2B5E40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5E40);
  }
  return result;
}

unint64_t sub_256A98860()
{
  unint64_t result = qword_26B2B3448;
  if (!qword_26B2B3448)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B3448);
  }
  return result;
}

unint64_t sub_256A988AC()
{
  unint64_t result = qword_26B2B5798;
  if (!qword_26B2B5798)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5798);
  }
  return result;
}

unint64_t sub_256A988F8()
{
  unint64_t result = qword_26B2B6298;
  if (!qword_26B2B6298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B6298);
  }
  return result;
}

unint64_t sub_256A98944()
{
  unint64_t result = qword_26B2B35D0;
  if (!qword_26B2B35D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B35D0);
  }
  return result;
}

unint64_t sub_256A98990()
{
  unint64_t result = qword_26B2B3578;
  if (!qword_26B2B3578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B3578);
  }
  return result;
}

unint64_t sub_256A989DC()
{
  unint64_t result = qword_26B2B5DC8;
  if (!qword_26B2B5DC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5DC8);
  }
  return result;
}

unint64_t sub_256A98A28()
{
  unint64_t result = qword_26B2B5DB0;
  if (!qword_26B2B5DB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5DB0);
  }
  return result;
}

unint64_t sub_256A98A74()
{
  unint64_t result = qword_269F79CC0;
  if (!qword_269F79CC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79CC0);
  }
  return result;
}

uint64_t type metadata accessor for ResourceBundleIdentifier.CodingKeys()
{
  return sub_256A9FB00();
}

unint64_t sub_256A98AD8()
{
  unint64_t result = qword_26B2B6230;
  if (!qword_26B2B6230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B6230);
  }
  return result;
}

uint64_t type metadata accessor for StatusResponse()
{
  return self;
}

uint64_t type metadata accessor for ResourceInformation()
{
  uint64_t result = qword_26B2B5000;
  if (!qword_26B2B5000) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_256A98B90()
{
  unint64_t result = qword_26B2B30D0;
  if (!qword_26B2B30D0)
  {
    sub_256B3F300();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B30D0);
  }
  return result;
}

uint64_t sub_256A98BD4(uint64_t a1, uint64_t *a2)
{
  sub_256A39D2C(a2);
  sub_256A4A838();
  sub_256A9FDB0();
  v3();
  return a1;
}

unint64_t sub_256A98C28()
{
  unint64_t result = qword_26B2B5848;
  if (!qword_26B2B5848)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5848);
  }
  return result;
}

unint64_t sub_256A98C74()
{
  unint64_t result = qword_26B2B3590;
  if (!qword_26B2B3590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B3590);
  }
  return result;
}

unint64_t sub_256A98CC0()
{
  unint64_t result = qword_26B2B5330;
  if (!qword_26B2B5330)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5330);
  }
  return result;
}

unint64_t sub_256A98D0C()
{
  unint64_t result = qword_26B2B62F0;
  if (!qword_26B2B62F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B62F0);
  }
  return result;
}

unint64_t sub_256A98D58()
{
  unint64_t result = qword_26B2B3668;
  if (!qword_26B2B3668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B3668);
  }
  return result;
}

unint64_t sub_256A98DA4()
{
  unint64_t result = qword_26B2B5E88;
  if (!qword_26B2B5E88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5E88);
  }
  return result;
}

unint64_t sub_256A98E04()
{
  unint64_t result = qword_269F79D10;
  if (!qword_269F79D10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79D10);
  }
  return result;
}

unint64_t sub_256A98E54()
{
  unint64_t result = qword_269F79D18;
  if (!qword_269F79D18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79D18);
  }
  return result;
}

unint64_t sub_256A98EA4()
{
  unint64_t result = qword_26B2B33C0;
  if (!qword_26B2B33C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B33C0);
  }
  return result;
}

unint64_t sub_256A98EF4()
{
  unint64_t result = qword_269F79D28;
  if (!qword_269F79D28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79D28);
  }
  return result;
}

unint64_t sub_256A98F44()
{
  unint64_t result = qword_269F79D30;
  if (!qword_269F79D30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79D30);
  }
  return result;
}

unint64_t sub_256A98F94()
{
  unint64_t result = qword_269F79D38;
  if (!qword_269F79D38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79D38);
  }
  return result;
}

unint64_t sub_256A98FE4()
{
  unint64_t result = qword_269F79D40;
  if (!qword_269F79D40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79D40);
  }
  return result;
}

unint64_t sub_256A99034()
{
  unint64_t result = qword_269F79D48;
  if (!qword_269F79D48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79D48);
  }
  return result;
}

uint64_t sub_256A99080()
{
  return swift_getWitnessTable();
}

uint64_t sub_256A9909C()
{
  return swift_getWitnessTable();
}

uint64_t sub_256A990B8()
{
  return MEMORY[0x263F8D388];
}

uint64_t sub_256A990C4()
{
  return swift_getWitnessTable();
}

uint64_t sub_256A990E0()
{
  return MEMORY[0x263F8D398];
}

uint64_t sub_256A990EC()
{
  return MEMORY[0x263F8D390];
}

uint64_t sub_256A990F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A99E90(a1, a2, a3, (uint64_t (*)(void))sub_256A99124, (uint64_t (*)(void))sub_256A99170);
}

unint64_t sub_256A99124()
{
  unint64_t result = qword_269F79D50;
  if (!qword_269F79D50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79D50);
  }
  return result;
}

unint64_t sub_256A99170()
{
  unint64_t result = qword_269F79D58;
  if (!qword_269F79D58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79D58);
  }
  return result;
}

unint64_t sub_256A991C0()
{
  unint64_t result = qword_269F79D60;
  if (!qword_269F79D60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79D60);
  }
  return result;
}

unint64_t sub_256A9920C(uint64_t a1)
{
  unint64_t result = sub_256A99234();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_256A99234()
{
  unint64_t result = qword_269F79D68;
  if (!qword_269F79D68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79D68);
  }
  return result;
}

uint64_t sub_256A99280(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A99E90(a1, a2, a3, (uint64_t (*)(void))sub_256A992AC, (uint64_t (*)(void))sub_256A992F8);
}

unint64_t sub_256A992AC()
{
  unint64_t result = qword_269F79D70;
  if (!qword_269F79D70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79D70);
  }
  return result;
}

unint64_t sub_256A992F8()
{
  unint64_t result = qword_269F79D78;
  if (!qword_269F79D78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79D78);
  }
  return result;
}

unint64_t sub_256A99348()
{
  unint64_t result = qword_269F79D80;
  if (!qword_269F79D80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79D80);
  }
  return result;
}

unint64_t sub_256A99398()
{
  unint64_t result = qword_26B2B33B8;
  if (!qword_26B2B33B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B33B8);
  }
  return result;
}

unint64_t sub_256A993E4(uint64_t a1)
{
  unint64_t result = sub_256A9940C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_256A9940C()
{
  unint64_t result = qword_26B2B5D20;
  if (!qword_26B2B5D20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5D20);
  }
  return result;
}

uint64_t sub_256A99458(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A99E90(a1, a2, a3, (uint64_t (*)(void))sub_256A6D8E0, (uint64_t (*)(void))sub_256A6DD7C);
}

unint64_t sub_256A99484(uint64_t a1)
{
  unint64_t result = sub_256A6D890();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_256A994AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A99E90(a1, a2, a3, (uint64_t (*)(void))sub_256A994D8, (uint64_t (*)(void))sub_256A99524);
}

unint64_t sub_256A994D8()
{
  unint64_t result = qword_26B2B5CE0;
  if (!qword_26B2B5CE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5CE0);
  }
  return result;
}

unint64_t sub_256A99524()
{
  unint64_t result = qword_26B2B5CF8;
  if (!qword_26B2B5CF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5CF8);
  }
  return result;
}

unint64_t sub_256A99574()
{
  unint64_t result = qword_26B2B5CF0;
  if (!qword_26B2B5CF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5CF0);
  }
  return result;
}

unint64_t sub_256A995C0(uint64_t a1)
{
  unint64_t result = sub_256A995E8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_256A995E8()
{
  unint64_t result = qword_26B2B3068;
  if (!qword_26B2B3068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B3068);
  }
  return result;
}

uint64_t sub_256A99634(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A99E90(a1, a2, a3, (uint64_t (*)(void))sub_256A99660, (uint64_t (*)(void))sub_256A996AC);
}

unint64_t sub_256A99660()
{
  unint64_t result = qword_269F79D90;
  if (!qword_269F79D90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79D90);
  }
  return result;
}

unint64_t sub_256A996AC()
{
  unint64_t result = qword_269F79D98;
  if (!qword_269F79D98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79D98);
  }
  return result;
}

unint64_t sub_256A996F8(uint64_t a1)
{
  unint64_t result = sub_256A99720();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_256A99720()
{
  unint64_t result = qword_26B2B3060;
  if (!qword_26B2B3060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B3060);
  }
  return result;
}

unint64_t sub_256A9976C(uint64_t a1)
{
  unint64_t result = sub_256A99794();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_256A99794()
{
  unint64_t result = qword_26B2B3058;
  if (!qword_26B2B3058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B3058);
  }
  return result;
}

uint64_t sub_256A997E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A99E90(a1, a2, a3, (uint64_t (*)(void))sub_256A9980C, (uint64_t (*)(void))sub_256A99858);
}

unint64_t sub_256A9980C()
{
  unint64_t result = qword_26B2B3030;
  if (!qword_26B2B3030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B3030);
  }
  return result;
}

unint64_t sub_256A99858()
{
  unint64_t result = qword_26B2B3048;
  if (!qword_26B2B3048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B3048);
  }
  return result;
}

unint64_t sub_256A998A8()
{
  unint64_t result = qword_26B2B3040;
  if (!qword_26B2B3040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B3040);
  }
  return result;
}

unint64_t sub_256A998F4(uint64_t a1)
{
  unint64_t result = sub_256A9991C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_256A9991C()
{
  unint64_t result = qword_26B2B6008;
  if (!qword_26B2B6008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B6008);
  }
  return result;
}

uint64_t sub_256A99968(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A99E90(a1, a2, a3, (uint64_t (*)(void))sub_256A6DA9C, (uint64_t (*)(void))sub_256A6DE14);
}

unint64_t sub_256A99994(uint64_t a1)
{
  unint64_t result = sub_256A6DA4C();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_256A999BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A99E90(a1, a2, a3, (uint64_t (*)(void))sub_256A999E8, (uint64_t (*)(void))sub_256A99A34);
}

unint64_t sub_256A999E8()
{
  unint64_t result = qword_26B2B5F38;
  if (!qword_26B2B5F38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5F38);
  }
  return result;
}

unint64_t sub_256A99A34()
{
  unint64_t result = qword_26B2B5F50;
  if (!qword_26B2B5F50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5F50);
  }
  return result;
}

unint64_t sub_256A99A84()
{
  unint64_t result = qword_26B2B5F48;
  if (!qword_26B2B5F48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5F48);
  }
  return result;
}

unint64_t sub_256A99AD4(uint64_t a1)
{
  unint64_t result = sub_256A99AFC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_256A99AFC()
{
  unint64_t result = qword_26B2B5CD0;
  if (!qword_26B2B5CD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5CD0);
  }
  return result;
}

uint64_t sub_256A99B48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A99E90(a1, a2, a3, (uint64_t (*)(void))sub_256A6D9FC, (uint64_t (*)(void))sub_256A6DDC8);
}

unint64_t sub_256A99B74(uint64_t a1)
{
  unint64_t result = sub_256A99B9C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_256A99B9C()
{
  unint64_t result = qword_26B2B5CC8;
  if (!qword_26B2B5CC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5CC8);
  }
  return result;
}

unint64_t sub_256A99BE8(uint64_t a1)
{
  unint64_t result = sub_256A6D9AC();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_256A99C10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A99E90(a1, a2, a3, (uint64_t (*)(void))sub_256A99C3C, (uint64_t (*)(void))sub_256A99C88);
}

unint64_t sub_256A99C3C()
{
  unint64_t result = qword_26B2B5C88;
  if (!qword_26B2B5C88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5C88);
  }
  return result;
}

unint64_t sub_256A99C88()
{
  unint64_t result = qword_26B2B5CA0;
  if (!qword_26B2B5CA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5CA0);
  }
  return result;
}

unint64_t sub_256A99CD8()
{
  unint64_t result = qword_26B2B5C98;
  if (!qword_26B2B5C98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5C98);
  }
  return result;
}

unint64_t sub_256A99D28(uint64_t a1)
{
  unint64_t result = sub_256A99D50();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_256A99D50()
{
  unint64_t result = qword_26B2B6690[0];
  if (!qword_26B2B6690[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26B2B6690);
  }
  return result;
}

uint64_t sub_256A99D9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A99E90(a1, a2, a3, (uint64_t (*)(void))sub_256A6DBE8, (uint64_t (*)(void))sub_256A6DE60);
}

unint64_t sub_256A99DC8(uint64_t a1)
{
  unint64_t result = sub_256A99DF0();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_256A99DF0()
{
  unint64_t result = qword_26B2B6688;
  if (!qword_26B2B6688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B6688);
  }
  return result;
}

unint64_t sub_256A99E3C(uint64_t a1)
{
  unint64_t result = sub_256A6DAEC();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_256A99E64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256A99E90(a1, a2, a3, (uint64_t (*)(void))sub_256A99ECC, (uint64_t (*)(void))sub_256A99F18);
}

uint64_t sub_256A99E90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  *(void *)(a1 + 8) = a4();
  uint64_t result = a5();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_256A99ECC()
{
  unint64_t result = qword_26B2B6648;
  if (!qword_26B2B6648)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B6648);
  }
  return result;
}

unint64_t sub_256A99F18()
{
  unint64_t result = qword_26B2B6660;
  if (!qword_26B2B6660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B6660);
  }
  return result;
}

unint64_t sub_256A99F68()
{
  unint64_t result = qword_26B2B6658;
  if (!qword_26B2B6658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B6658);
  }
  return result;
}

unint64_t sub_256A99FB8()
{
  unint64_t result = qword_269F79DA0;
  if (!qword_269F79DA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79DA0);
  }
  return result;
}

uint64_t sub_256A9A004()
{
  return sub_256A78B08(&qword_269F79DA8, &qword_269F79DB0);
}

unint64_t sub_256A9A044()
{
  unint64_t result = qword_269F79DB8;
  if (!qword_269F79DB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79DB8);
  }
  return result;
}

unint64_t sub_256A9A094()
{
  unint64_t result = qword_269F79DC0;
  if (!qword_269F79DC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79DC0);
  }
  return result;
}

uint64_t sub_256A9A0E0()
{
  return sub_256A78B08(&qword_269F79DC8, &qword_269F79DD0);
}

unint64_t sub_256A9A120()
{
  unint64_t result = qword_269F79DD8;
  if (!qword_269F79DD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79DD8);
  }
  return result;
}

uint64_t sub_256A9A174()
{
  return 24;
}

__n128 sub_256A9A180(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

void sub_256A9A194(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE88];
}

void type metadata accessor for CatalogErrors()
{
}

uint64_t sub_256A9A1B8()
{
  return swift_bridgeObjectRetain();
}

uint64_t destroy for CatalogErrors.SerializationError()
{
  return sub_256A9FAF8();
}

uint64_t _s12ModelCatalog13CatalogErrorsO18SerializationErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  sub_256AA071C(a1, a2);
  sub_256A9A1B8();
  *(void *)uint64_t v2 = v3;
  *(void *)(v2 + 8) = v4;
  *(unsigned char *)(v2 + 16) = v5;
  return v2;
}

uint64_t assignWithCopy for CatalogErrors.SerializationError(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  sub_256A9A1B8();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  sub_256A9FAF8();
  return a1;
}

__n128 initializeWithTake for InferenceProvider(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for CatalogErrors.SerializationError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  sub_256A9FAF8();
  return a1;
}

uint64_t getEnumTagSinglePayload for CatalogErrors.SerializationError(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(unsigned char *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 1) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CatalogErrors.SerializationError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_256A9A340(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_256A9A348(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2 & 1;
  return result;
}

void type metadata accessor for CatalogErrors.SerializationError()
{
}

void *initializeWithCopy for CatalogErrors.ConfigurationError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for CatalogErrors.ConfigurationError(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for CatalogErrors.ConfigurationError(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for CatalogErrors.ConfigurationError()
{
}

uint64_t initializeBufferWithCopyOfBuffer for CatalogErrors.RequestResourceError(uint64_t a1, uint64_t a2)
{
  return sub_256A9C7E4(a1, a2);
}

uint64_t *assignWithCopy for CatalogErrors.RequestResourceError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_256A9C84C(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))sub_256A9FB30, (void (*)(uint64_t, uint64_t, uint64_t))sub_256A9FB34);
}

uint64_t *assignWithTake for CatalogErrors.RequestResourceError(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_256A9C8D0(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_256A9FB34);
}

void type metadata accessor for CatalogErrors.RequestResourceError()
{
}

uint64_t initializeBufferWithCopyOfBuffer for CatalogErrors.SideloadError(uint64_t a1, uint64_t a2)
{
  return sub_256A9C7E4(a1, a2);
}

uint64_t sub_256A9A4F4(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for CatalogErrors.SideloadError(uint64_t a1)
{
  return sub_256A9A51C(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t sub_256A9A51C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t *assignWithCopy for CatalogErrors.SideloadError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_256A9C84C(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))sub_256A9A4F4, (void (*)(uint64_t, uint64_t, uint64_t))sub_256A9A51C);
}

uint64_t *assignWithTake for CatalogErrors.SideloadError(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_256A9C8D0(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_256A9A51C);
}

uint64_t _s12ModelCatalog13CatalogErrorsO20RequestResourceErrorOwet_0(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return sub_256A6E980(-1);
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 17)) {
    return sub_256A6E980(*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 > 2) {
    return sub_256A6E980(v3 ^ 0xFF);
  }
  else {
    return sub_256A6E980(-1);
  }
}

uint64_t _s12ModelCatalog13CatalogErrorsO20RequestResourceErrorOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

void type metadata accessor for CatalogErrors.SideloadError()
{
}

void type metadata accessor for CatalogErrors.AvailabilityError()
{
}

uint64_t sub_256A9A61C(void *a1, void *a2)
{
  sub_256AA08B0(a1, a2);
  *(unsigned char *)(v2 + 16) = *(unsigned char *)(v3 + 16);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t assignWithCopy for InferenceProvider(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for InferenceProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for InferenceProvider(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 17))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InferenceProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for InferenceProvider()
{
}

uint64_t initializeWithCopy for ResourceConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v8 = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8)
  {
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = v8;
    uint64_t v9 = *(void *)(a2 + 112);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = v9;
    uint64_t v10 = *(void *)(a2 + 128);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = v10;
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v11;
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 130) = *(_OWORD *)(a2 + 130);
  }
  uint64_t v12 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v12;
  uint64_t v14 = *(void *)(a2 + 168);
  uint64_t v13 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = v14;
  *(void *)(a1 + 176) = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ResourceConfiguration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v4 = (_OWORD *)(a1 + 88);
  uint64_t v5 = (long long *)(a2 + 88);
  uint64_t v6 = *(void *)(a2 + 96);
  if (*(void *)(a1 + 96))
  {
    if (v6)
    {
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v7 = *(void *)(a2 + 136);
      *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
      *(void *)(a1 + 136) = v7;
      *(unsigned char *)(a1 + 145) = *(unsigned char *)(a2 + 145);
    }
    else
    {
      sub_256A6794C(a1 + 88);
      long long v10 = *(_OWORD *)(a2 + 104);
      long long v9 = *(_OWORD *)(a2 + 120);
      long long v11 = *v5;
      *(_OWORD *)(a1 + 130) = *(_OWORD *)(a2 + 130);
      *(_OWORD *)(a1 + 104) = v10;
      *(_OWORD *)(a1 + 120) = v9;
      *uint64_t v4 = v11;
    }
  }
  else if (v6)
  {
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    uint64_t v8 = *(void *)(a2 + 136);
    *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
    *(void *)(a1 + 136) = v8;
    *(unsigned char *)(a1 + 145) = *(unsigned char *)(a2 + 145);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v12 = *v5;
    long long v13 = *(_OWORD *)(a2 + 104);
    long long v14 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 130) = *(_OWORD *)(a2 + 130);
    *(_OWORD *)(a1 + 104) = v13;
    *(_OWORD *)(a1 + 120) = v14;
    *uint64_t v4 = v12;
  }
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ResourceConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  if (!*(void *)(a1 + 96)) {
    goto LABEL_5;
  }
  uint64_t v7 = *(void *)(a2 + 96);
  if (!v7)
  {
    sub_256A6794C(a1 + 88);
LABEL_5:
    long long v10 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v10;
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 130) = *(_OWORD *)(a2 + 130);
    goto LABEL_6;
  }
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v9;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
LABEL_6:
  uint64_t v11 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v11;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t storeEnumTagSinglePayload for ResourceConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 184) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 184) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for ResourceConfiguration()
{
}

uint64_t destroy for ResourceBase()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t _s12ModelCatalog12ResourceBaseVwCP_0(void *a1, void *a2)
{
  sub_256AA08B0(a1, a2);
  *(void *)(v2 + 16) = *(void *)(v3 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v2;
}

void *assignWithCopy for ResourceBase(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ResourceBase(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ResourceBase(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ResourceBase(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for ResourceBase()
{
}

uint64_t destroy for AssetSubscriptionInformation()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AssetSubscriptionInformation(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AssetSubscriptionInformation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v4;
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  return a1;
}

__n128 initializeWithTake for AssetSubscriptionInformation(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AssetSubscriptionInformation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for AssetSubscriptionInformation(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 58))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AssetSubscriptionInformation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 56) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 58) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 58) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for AssetSubscriptionInformation()
{
}

uint64_t destroy for ManagedRuntimeInformation()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ManagedRuntimeInformation(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 47) = *(_DWORD *)(a2 + 47);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ManagedRuntimeInformation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
  *(unsigned char *)(a1 + 50) = *(unsigned char *)(a2 + 50);
  return a1;
}

__n128 initializeWithTake for ManagedRuntimeInformation(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 47) = *(_DWORD *)(a2 + 47);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ManagedRuntimeInformation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
  *(unsigned char *)(a1 + 50) = *(unsigned char *)(a2 + 50);
  return a1;
}

uint64_t getEnumTagSinglePayload for ManagedRuntimeInformation(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 51))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ManagedRuntimeInformation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 50) = 0;
    *(_WORD *)(result + 48) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 51) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 51) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for ManagedRuntimeInformation()
{
}

uint64_t destroy for ManagedResourceBase()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ManagedResourceBase(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ManagedResourceBase(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ManagedResourceBase(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_256A9B4C0(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
      return sub_256A7AF1C(result, a2);
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      return sub_256A7AF1C(result, a2);
    }
  }
  return result;
}

void type metadata accessor for ManagedResourceBase()
{
}

uint64_t sub_256A9B504(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 24);
}

uint64_t type metadata accessor for ResourceBundleIdentifier()
{
  return sub_256A9FB00();
}

uint64_t dispatch thunk of ResourceBundle.id.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ResourceBundle.rawID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ResourceBundle.resources.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of AssetBackedResourceBundle.assetBackedResources.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CatalogResource.id.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of CatalogResource.inferenceProviders.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of CatalogResource.dependentResourceIDs.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of CatalogResource.preconditions.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of CatalogResource.sideloaded.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of CatalogResource.assetBacked.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of CatalogResource.tags.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of CatalogResource.platforms.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of ConfigurationBasedResource.configuration.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ConfigurationBasedResource.init(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t initializeBufferWithCopyOfBuffer for CostProfile(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 7) = *(_DWORD *)((char *)a2 + 7);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for CostProfile(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(unsigned char *)(a1 + 11))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
      BOOL v4 = v3 >= 2;
      int v2 = (v3 + 2147483646) & 0x7FFFFFFF;
      if (!v4) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CostProfile(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 10) = 0;
    *(_WORD *)(result + 8) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 11) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 11) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for CostProfile()
{
}

uint64_t dispatch thunk of ManagedResource.cost.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ManagedResource.runtimeInformation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ManagedResource.dependencies.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ManagedResource.executionContexts.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of ManagedResource.executionContexts.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of ManagedResource.executionContexts.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

void type metadata accessor for ResourceStatus()
{
}

uint64_t method lookup function for StatusResponse(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for StatusResponse);
}

uint64_t dispatch thunk of StatusResponse.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x58))();
}

uint64_t dispatch thunk of StatusResponse.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of StatusResponse.__allocating_init(status:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t initializeWithCopy for ExecutionContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
  *(unsigned char *)(a1 + 35) = *(unsigned char *)(a2 + 35);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ExecutionContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 35) = *(unsigned char *)(a2 + 35);
  return a1;
}

__n128 initializeWithTake for ExecutionContext(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ExecutionContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
  *(unsigned char *)(a1 + 35) = *(unsigned char *)(a2 + 35);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExecutionContext(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 36))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExecutionContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 36) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 36) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for ExecutionContext()
{
}

uint64_t sub_256A9B9C0()
{
  return type metadata accessor for ResourceInformation();
}

void sub_256A9B9C8()
{
  sub_256A9BAD4();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for ResourceInformation(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ResourceInformation);
}

uint64_t dispatch thunk of ResourceInformation.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x60))();
}

uint64_t dispatch thunk of ResourceInformation.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of ResourceInformation.__allocating_init(location:metadata:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

void sub_256A9BAD4()
{
  if (!qword_26B2B4FC0)
  {
    sub_256B3F300();
    unint64_t v0 = sub_256B3FA90();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B2B4FC0);
    }
  }
}

void *initializeWithTake for TokenizerBase(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xD8uLL);
}

void type metadata accessor for TokenizerBase()
{
}

void type metadata accessor for LLMAJAXModelBase()
{
}

void type metadata accessor for LLMDraftModelBase()
{
}

uint64_t dispatch thunk of LLMModel.tokenizer.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

void type metadata accessor for LLMModelBase()
{
}

uint64_t dispatch thunk of LLMAdapter.llmModel.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t _s12ModelCatalog13TokenizerBaseVwxx_0(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 96))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void _s12ModelCatalog13TokenizerBaseVwcp_0()
{
  sub_256A4A458();
  unint64_t v2 = v1;
  sub_256AA08B0(v3, v1);
  uint64_t v5 = *(void *)(v4 + 24);
  *(void *)(v0 + 16) = *(void *)(v4 + 16);
  *(void *)(v0 + 24) = v5;
  uint64_t v6 = *(void *)(v4 + 40);
  *(void *)(v0 + 32) = *(void *)(v4 + 32);
  *(void *)(v0 + 40) = v6;
  *(void *)(v0 + 48) = *(void *)(v4 + 48);
  *(unsigned char *)(v0 + 56) = *(unsigned char *)(v4 + 56);
  uint64_t v7 = *(void *)(v4 + 72);
  *(void *)(v0 + 64) = *(void *)(v4 + 64);
  *(void *)(v0 + 72) = v7;
  *(unsigned char *)(v0 + 80) = *(unsigned char *)(v4 + 80);
  uint64_t v8 = *(void *)(v4 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8)
  {
    *(void *)(v0 + 88) = v2[11];
    *(void *)(v0 + 96) = v8;
    uint64_t v9 = v2[14];
    *(void *)(v0 + 104) = v2[13];
    *(void *)(v0 + 112) = v9;
    uint64_t v10 = v2[16];
    *(void *)(v0 + 120) = v2[15];
    *(void *)(v0 + 128) = v10;
    sub_256A6F0A4();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v11 = *(_OWORD *)(v2 + 13);
    *(_OWORD *)(v0 + 88) = *(_OWORD *)(v2 + 11);
    *(_OWORD *)(v0 + 104) = v11;
    *(_OWORD *)(v0 + 120) = *(_OWORD *)(v2 + 15);
    *(_OWORD *)(v0 + 130) = *(_OWORD *)((char *)v2 + 130);
  }
  uint64_t v12 = v2[20];
  *(void *)(v0 + 152) = v2[19];
  *(void *)(v0 + 160) = v12;
  uint64_t v13 = v2[22];
  *(void *)(v0 + 168) = v2[21];
  *(void *)(v0 + 176) = v13;
  uint64_t v14 = v2[24];
  *(void *)(v0 + 184) = v2[23];
  *(void *)(v0 + 192) = v14;
  uint64_t v16 = v2[25];
  uint64_t v15 = v2[26];
  *(void *)(v0 + 200) = v16;
  *(void *)(v0 + 208) = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_256A4A2C0();
}

uint64_t _s12ModelCatalog13TokenizerBaseVwca_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v4 = (_OWORD *)(a1 + 88);
  uint64_t v5 = (long long *)(a2 + 88);
  uint64_t v6 = *(void *)(a2 + 96);
  if (*(void *)(a1 + 96))
  {
    if (v6)
    {
      sub_256A6EF30();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      sub_256A6EBF8();
    }
    else
    {
      sub_256A6794C(a1 + 88);
      long long v8 = *(_OWORD *)(a2 + 104);
      long long v7 = *(_OWORD *)(a2 + 120);
      long long v9 = *v5;
      *(_OWORD *)(a1 + 130) = *(_OWORD *)(a2 + 130);
      *(_OWORD *)(a1 + 104) = v8;
      *(_OWORD *)(a1 + 120) = v7;
      *uint64_t v4 = v9;
    }
  }
  else if (v6)
  {
    sub_256A6EF30();
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    sub_256A6EBF8();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v10 = *v5;
    long long v11 = *(_OWORD *)(a2 + 104);
    long long v12 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 130) = *(_OWORD *)(a2 + 130);
    *(_OWORD *)(a1 + 104) = v11;
    *(_OWORD *)(a1 + 120) = v12;
    *uint64_t v4 = v10;
  }
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s12ModelCatalog13TokenizerBaseVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  if (!*(void *)(a1 + 96)) {
    goto LABEL_5;
  }
  uint64_t v7 = *(void *)(a2 + 96);
  if (!v7)
  {
    sub_256A6794C(a1 + 88);
LABEL_5:
    long long v10 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v10;
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 130) = *(_OWORD *)(a2 + 130);
    goto LABEL_6;
  }
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v9;
  swift_bridgeObjectRelease();
  sub_256A6F0A4();
LABEL_6:
  uint64_t v11 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v11;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v12;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s12ModelCatalog13TokenizerBaseVwet_0(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 216))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_256A9C1B8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 216) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
      return sub_256A7AF1C(result, a2);
    }
    *(unsigned char *)(result + 216) = 0;
    if (a2) {
      return sub_256A7AF1C(result, a2);
    }
  }
  return result;
}

void type metadata accessor for LLMAdapterBase()
{
}

void type metadata accessor for Precondition()
{
}

void type metadata accessor for Precondition.PreconditionType()
{
}

uint64_t destroy for Platform()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s12ModelCatalog8PlatformVwCP_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Platform(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Platform(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Platform(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Platform(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for Platform()
{
}

uint64_t getEnumTagSinglePayload for Platform.PlatformType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFB)
  {
    if (a2 + 5 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 5) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 6;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v5 = v6 - 6;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for Platform.PlatformType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *__n128 result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x256A9C4F8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 5;
        break;
    }
  }
  return result;
}

void type metadata accessor for Platform.PlatformType()
{
}

void type metadata accessor for Catalog()
{
}

void type metadata accessor for Catalog.Resource()
{
}

void type metadata accessor for Catalog.Resource.Tokenizer()
{
}

void type metadata accessor for Catalog.Resource.LLM()
{
}

void type metadata accessor for Catalog.Resource.LLM.AJAX()
{
}

void type metadata accessor for Catalog.Resource.LLM.Model()
{
}

void type metadata accessor for Catalog.Resource.LLM.Adapter()
{
}

void type metadata accessor for Catalog.Resource.LLM.DraftModel()
{
}

void type metadata accessor for Catalog.Resource.LLM.ServerConfiguration()
{
}

void type metadata accessor for Catalog.Resource.Diffusion()
{
}

void type metadata accessor for Catalog.Resource.Diffusion.Model()
{
}

void type metadata accessor for Catalog.Resource.Diffusion.Adapter()
{
}

void type metadata accessor for Catalog.Resource.TokenInputDenyList()
{
}

void type metadata accessor for Catalog.Resource.TokenOutputDenyList()
{
}

void type metadata accessor for Catalog.Resource.GenerativeFunctionOverrides()
{
}

void type metadata accessor for Catalog.Resource.ModelConfigurationReplacement()
{
}

void type metadata accessor for Catalog.Resource.Sanitizer()
{
}

void type metadata accessor for Catalog.Resource.DisabledUseCaseList()
{
}

void type metadata accessor for Catalog.Resource.ImageFilter()
{
}

void type metadata accessor for Catalog.Resource.ImageInpainter()
{
}

void type metadata accessor for Catalog.Resource.ImageMagicCleanUp()
{
}

void type metadata accessor for Catalog.Resource.ImageScaler()
{
}

void type metadata accessor for Catalog.Resource.ImageSegmenter()
{
}

void type metadata accessor for Catalog.Resource.HandwritingSynthesizer()
{
}

void type metadata accessor for Catalog.Resource.ImageCuratedPrompts()
{
}

void type metadata accessor for Catalog.ResourceBundle()
{
}

void type metadata accessor for Catalog.Tokenizer()
{
}

void type metadata accessor for Catalog.LLM()
{
}

void type metadata accessor for Catalog.LLM.AJAX()
{
}

void type metadata accessor for Catalog.LLM.Model()
{
}

void type metadata accessor for Catalog.LLM.Adapter()
{
}

void type metadata accessor for Catalog.LLM.DraftModel()
{
}

void type metadata accessor for Catalog.LLM.ServerConfiguration()
{
}

void type metadata accessor for Catalog.Diffusion()
{
}

void type metadata accessor for Catalog.Diffusion.Model()
{
}

void type metadata accessor for Catalog.Diffusion.Adapter()
{
}

void type metadata accessor for Catalog.TokenInputDenyList()
{
}

void type metadata accessor for Catalog.TokenOutputDenyList()
{
}

void type metadata accessor for Catalog.GenerativeFunctionOverrides()
{
}

void type metadata accessor for Catalog.ModelConfigurationReplacement()
{
}

void type metadata accessor for Catalog.Sanitizer()
{
}

void type metadata accessor for Catalog.DisabledUseCaseList()
{
}

void type metadata accessor for Catalog.ImageFilter()
{
}

void type metadata accessor for Catalog.ImageInpainter()
{
}

void type metadata accessor for Catalog.ImageMagicCleanUp()
{
}

void type metadata accessor for Catalog.ImageScaler()
{
}

void type metadata accessor for Catalog.ImageSegmenter()
{
}

void type metadata accessor for Catalog.HandwritingSynthesizer()
{
}

void type metadata accessor for Catalog.ImageCuratedPrompts()
{
}

uint64_t dispatch thunk of ExplicityRequestible.explicitRequestUsage.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t initializeBufferWithCopyOfBuffer for CatalogResourceResult(uint64_t a1, uint64_t a2)
{
  return sub_256A9C7E4(a1, a2);
}

uint64_t sub_256A9C7A4(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 3u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for CatalogResourceResult(uint64_t a1)
{
  return sub_256A9C7CC(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t sub_256A9C7CC(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 3u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_256A9C7E4(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = sub_256AA071C(a1, a2);
  v7(v6);
  *(void *)uint64_t v2 = v3;
  *(void *)(v2 + 8) = v4;
  *(unsigned char *)(v2 + 16) = v5;
  return v2;
}

uint64_t *assignWithCopy for CatalogResourceResult(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_256A9C84C(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))sub_256A9C7A4, (void (*)(uint64_t, uint64_t, uint64_t))sub_256A9C7CC);
}

uint64_t *sub_256A9C84C(uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v8, v9);
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  *a1 = v7;
  a1[1] = v8;
  uint64_t v12 = *((unsigned __int8 *)a1 + 16);
  *((unsigned char *)a1 + 16) = v9;
  a5(v10, v11, v12);
  return a1;
}

uint64_t *assignWithTake for CatalogResourceResult(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_256A9C8D0(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_256A9C7CC);
}

uint64_t *sub_256A9C8D0(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  char v5 = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v8 = *((unsigned __int8 *)a1 + 16);
  *((unsigned char *)a1 + 16) = v5;
  a4(v6, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for CatalogResourceResult(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFD && *(unsigned char *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 252;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 3) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CatalogResourceResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_256A9C9A0(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

void type metadata accessor for CatalogResourceResult()
{
}

uint64_t destroy for ResourceStatusOutput()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ResourceStatusOutput(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v7;
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v8;
  uint64_t v9 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v9;
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  uint64_t v10 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v10;
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ResourceStatusOutput(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  uint64_t v5 = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 120) = v5;
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for ResourceStatusOutput(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xA0uLL);
}

uint64_t assignWithTake for ResourceStatusOutput(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v9;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ResourceStatusOutput(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 160))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ResourceStatusOutput(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 160) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 160) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for ResourceStatusOutput()
{
}

ValueMetadata *type metadata accessor for Platform.CodingKeys()
{
  return &type metadata for Platform.CodingKeys;
}

ValueMetadata *type metadata accessor for Precondition.CodingKeys()
{
  return &type metadata for Precondition.CodingKeys;
}

uint64_t _s12ModelCatalog14ResourceStatusOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return sub_256A6E980(-1);
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return sub_256A6E980((*a1 | (v4 << 8)) - 4);
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return sub_256A6E980((*a1 | (v4 << 8)) - 4);
    }
    int v4 = a1[1];
    if (a1[1]) {
      return sub_256A6E980((*a1 | (v4 << 8)) - 4);
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return sub_256A6E980(v8);
}

unsigned char *_s12ModelCatalog14ResourceStatusOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        uint64_t result = (unsigned char *)sub_256A6EB8C((uint64_t)result, v6);
        break;
      case 2:
        uint64_t result = (unsigned char *)sub_256A6EB74((uint64_t)result, v6);
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x256A9CF40);
      case 4:
        uint64_t result = (unsigned char *)sub_256A6EB7C((uint64_t)result, v6);
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          uint64_t result = sub_256A6EB84(result, a2 + 3);
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CostProfile.CodingKeys()
{
  return &type metadata for CostProfile.CodingKeys;
}

uint64_t sub_256A9CF78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 16);
}

ValueMetadata *type metadata accessor for ManagedResourceBase.CodingKeys()
{
  return &type metadata for ManagedResourceBase.CodingKeys;
}

ValueMetadata *type metadata accessor for ManagedRuntimeInformation.CodingKeys()
{
  return &type metadata for ManagedRuntimeInformation.CodingKeys;
}

uint64_t getEnumTagSinglePayload for AssetSubscriptionInformation.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 4) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v5 = v6 - 5;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for AssetSubscriptionInformation.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x256A9D0F4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AssetSubscriptionInformation.CodingKeys()
{
  return &type metadata for AssetSubscriptionInformation.CodingKeys;
}

ValueMetadata *type metadata accessor for ResourceBase.CodingKeys()
{
  return &type metadata for ResourceBase.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ResourceConfiguration.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF5)
  {
    if (a2 + 11 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 11) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 12;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xC;
  int v5 = v6 - 12;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for ResourceConfiguration.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *uint64_t result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x256A9D290);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ResourceConfiguration.CodingKeys()
{
  return &type metadata for ResourceConfiguration.CodingKeys;
}

ValueMetadata *type metadata accessor for InferenceProvider.CodingKeys()
{
  return &type metadata for InferenceProvider.CodingKeys;
}

ValueMetadata *type metadata accessor for CatalogErrors.AvailabilityError.CodingKeys()
{
  return &type metadata for CatalogErrors.AvailabilityError.CodingKeys;
}

ValueMetadata *type metadata accessor for CatalogErrors.AvailabilityError.ShouldNotServeAppleIntelligenceAssetsCodingKeys()
{
  return &type metadata for CatalogErrors.AvailabilityError.ShouldNotServeAppleIntelligenceAssetsCodingKeys;
}

ValueMetadata *type metadata accessor for CatalogErrors.SideloadError.CodingKeys()
{
  return &type metadata for CatalogErrors.SideloadError.CodingKeys;
}

ValueMetadata *type metadata accessor for CatalogErrors.SideloadError.FailedToAccessSideloadStorageCodingKeys()
{
  return &type metadata for CatalogErrors.SideloadError.FailedToAccessSideloadStorageCodingKeys;
}

ValueMetadata *type metadata accessor for CatalogErrors.SideloadError.InvalidSideloadCodingKeys()
{
  return &type metadata for CatalogErrors.SideloadError.InvalidSideloadCodingKeys;
}

ValueMetadata *type metadata accessor for CatalogErrors.SideloadError.SideloadDisabledCodingKeys()
{
  return &type metadata for CatalogErrors.SideloadError.SideloadDisabledCodingKeys;
}

unsigned char *_s12ModelCatalog12PreconditionV16PreconditionTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        uint64_t result = (unsigned char *)sub_256A6EB8C((uint64_t)result, v6);
        break;
      case 2:
        uint64_t result = (unsigned char *)sub_256A6EB74((uint64_t)result, v6);
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x256A9D3F4);
      case 4:
        uint64_t result = (unsigned char *)sub_256A6EB7C((uint64_t)result, v6);
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          uint64_t result = sub_256A6EB84(result, a2 + 2);
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CatalogErrors.RequestResourceError.CodingKeys()
{
  return &type metadata for CatalogErrors.RequestResourceError.CodingKeys;
}

ValueMetadata *type metadata accessor for CatalogErrors.RequestResourceError.UnknownRequestResourcesKeyCodingKeys()
{
  return &type metadata for CatalogErrors.RequestResourceError.UnknownRequestResourcesKeyCodingKeys;
}

ValueMetadata *type metadata accessor for CatalogErrors.RequestResourceError.UnableToSubscribeCodingKeys()
{
  return &type metadata for CatalogErrors.RequestResourceError.UnableToSubscribeCodingKeys;
}

ValueMetadata *type metadata accessor for CatalogErrors.RequestResourceError.UnableToUnsubscribeCodingKeys()
{
  return &type metadata for CatalogErrors.RequestResourceError.UnableToUnsubscribeCodingKeys;
}

ValueMetadata *type metadata accessor for CatalogErrors.ConfigurationError.CodingKeys()
{
  return &type metadata for CatalogErrors.ConfigurationError.CodingKeys;
}

ValueMetadata *type metadata accessor for CatalogErrors.ConfigurationError.InvalidConfigurationCodingKeys()
{
  return &type metadata for CatalogErrors.ConfigurationError.InvalidConfigurationCodingKeys;
}

unsigned char *_s12ModelCatalog8PlatformV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        uint64_t result = (unsigned char *)sub_256A6EB8C((uint64_t)result, v6);
        break;
      case 2:
        uint64_t result = (unsigned char *)sub_256A6EB74((uint64_t)result, v6);
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x256A9D538);
      case 4:
        uint64_t result = (unsigned char *)sub_256A6EB7C((uint64_t)result, v6);
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          uint64_t result = sub_256A6EB84(result, a2 + 1);
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CatalogErrors.SerializationError.CodingKeys()
{
  return &type metadata for CatalogErrors.SerializationError.CodingKeys;
}

ValueMetadata *type metadata accessor for CatalogErrors.SerializationError.FailedToSerializeCodingKeys()
{
  return &type metadata for CatalogErrors.SerializationError.FailedToSerializeCodingKeys;
}

ValueMetadata *type metadata accessor for CatalogErrors.SerializationError.FailedToDeserializeCodingKeys()
{
  return &type metadata for CatalogErrors.SerializationError.FailedToDeserializeCodingKeys;
}

uint64_t _s12ModelCatalog13CatalogErrorsO17AvailabilityErrorOwet_0(unsigned int *a1, int a2)
{
  if (!a2) {
    return _s12ModelCatalog0B8ResourcePAAE11assetBackedSbvg_0();
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *_s12ModelCatalog13CatalogErrorsO17AvailabilityErrorOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x256A9D678);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConfigurationBasedResourceCodingKeys()
{
  return &type metadata for ConfigurationBasedResourceCodingKeys;
}

unint64_t sub_256A9D6B4()
{
  unint64_t result = qword_269F79DE8;
  if (!qword_269F79DE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79DE8);
  }
  return result;
}

unint64_t sub_256A9D704()
{
  unint64_t result = qword_269F79DF0;
  if (!qword_269F79DF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79DF0);
  }
  return result;
}

unint64_t sub_256A9D754()
{
  unint64_t result = qword_269F79DF8;
  if (!qword_269F79DF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79DF8);
  }
  return result;
}

unint64_t sub_256A9D7A4()
{
  unint64_t result = qword_269F79E00;
  if (!qword_269F79E00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79E00);
  }
  return result;
}

unint64_t sub_256A9D7F4()
{
  unint64_t result = qword_269F79E08;
  if (!qword_269F79E08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79E08);
  }
  return result;
}

unint64_t sub_256A9D844()
{
  unint64_t result = qword_269F79E10;
  if (!qword_269F79E10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79E10);
  }
  return result;
}

unint64_t sub_256A9D894()
{
  unint64_t result = qword_269F79E18;
  if (!qword_269F79E18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79E18);
  }
  return result;
}

unint64_t sub_256A9D8E4()
{
  unint64_t result = qword_269F79E20;
  if (!qword_269F79E20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79E20);
  }
  return result;
}

unint64_t sub_256A9D934()
{
  unint64_t result = qword_269F79E28;
  if (!qword_269F79E28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79E28);
  }
  return result;
}

unint64_t sub_256A9D984()
{
  unint64_t result = qword_269F79E30;
  if (!qword_269F79E30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79E30);
  }
  return result;
}

unint64_t sub_256A9D9D4()
{
  unint64_t result = qword_269F79E38;
  if (!qword_269F79E38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79E38);
  }
  return result;
}

unint64_t sub_256A9DA24()
{
  unint64_t result = qword_269F79E40;
  if (!qword_269F79E40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79E40);
  }
  return result;
}

unint64_t sub_256A9DA74()
{
  unint64_t result = qword_269F79E48;
  if (!qword_269F79E48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79E48);
  }
  return result;
}

unint64_t sub_256A9DAC4()
{
  unint64_t result = qword_269F79E50;
  if (!qword_269F79E50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79E50);
  }
  return result;
}

unint64_t sub_256A9DB14()
{
  unint64_t result = qword_269F79E58;
  if (!qword_269F79E58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79E58);
  }
  return result;
}

unint64_t sub_256A9DB64()
{
  unint64_t result = qword_269F79E60;
  if (!qword_269F79E60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79E60);
  }
  return result;
}

unint64_t sub_256A9DBB4()
{
  unint64_t result = qword_269F79E68;
  if (!qword_269F79E68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79E68);
  }
  return result;
}

unint64_t sub_256A9DC04()
{
  unint64_t result = qword_269F79E70;
  if (!qword_269F79E70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79E70);
  }
  return result;
}

unint64_t sub_256A9DC54()
{
  unint64_t result = qword_269F79E78;
  if (!qword_269F79E78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79E78);
  }
  return result;
}

unint64_t sub_256A9DCA4()
{
  unint64_t result = qword_269F79E80;
  if (!qword_269F79E80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79E80);
  }
  return result;
}

unint64_t sub_256A9DCF4()
{
  unint64_t result = qword_269F79E88;
  if (!qword_269F79E88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79E88);
  }
  return result;
}

uint64_t sub_256A9DD40()
{
  return swift_getWitnessTable();
}

unint64_t sub_256A9DD60()
{
  unint64_t result = qword_269F79E90;
  if (!qword_269F79E90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79E90);
  }
  return result;
}

unint64_t sub_256A9DDB0()
{
  unint64_t result = qword_269F79E98;
  if (!qword_269F79E98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79E98);
  }
  return result;
}

unint64_t sub_256A9DE00()
{
  unint64_t result = qword_269F79EA0;
  if (!qword_269F79EA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79EA0);
  }
  return result;
}

unint64_t sub_256A9DE50()
{
  unint64_t result = qword_26B2B6308;
  if (!qword_26B2B6308)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B6308);
  }
  return result;
}

unint64_t sub_256A9DEA0()
{
  unint64_t result = qword_26B2B6300;
  if (!qword_26B2B6300)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B6300);
  }
  return result;
}

unint64_t sub_256A9DEF0()
{
  unint64_t result = qword_26B2B5788;
  if (!qword_26B2B5788)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5788);
  }
  return result;
}

unint64_t sub_256A9DF40()
{
  unint64_t result = qword_26B2B5850;
  if (!qword_26B2B5850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5850);
  }
  return result;
}

unint64_t sub_256A9DF90()
{
  unint64_t result = qword_26B2B6248;
  if (!qword_26B2B6248)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B6248);
  }
  return result;
}

unint64_t sub_256A9DFE0()
{
  unint64_t result = qword_26B2B6240;
  if (!qword_26B2B6240)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B6240);
  }
  return result;
}

uint64_t sub_256A9E02C()
{
  return swift_getWitnessTable();
}

uint64_t sub_256A9E048()
{
  return swift_getWitnessTable();
}

unint64_t sub_256A9E068()
{
  unint64_t result = qword_269F79EA8;
  if (!qword_269F79EA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79EA8);
  }
  return result;
}

unint64_t sub_256A9E0B8()
{
  unint64_t result = qword_269F79EB0;
  if (!qword_269F79EB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79EB0);
  }
  return result;
}

unint64_t sub_256A9E108()
{
  unint64_t result = qword_26B2B62A8;
  if (!qword_26B2B62A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B62A8);
  }
  return result;
}

unint64_t sub_256A9E158()
{
  unint64_t result = qword_26B2B62A0;
  if (!qword_26B2B62A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B62A0);
  }
  return result;
}

unint64_t sub_256A9E1A8()
{
  unint64_t result = qword_26B2B5E58;
  if (!qword_26B2B5E58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5E58);
  }
  return result;
}

unint64_t sub_256A9E1F8()
{
  unint64_t result = qword_26B2B5E50;
  if (!qword_26B2B5E50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5E50);
  }
  return result;
}

unint64_t sub_256A9E248()
{
  unint64_t result = qword_269F79EB8;
  if (!qword_269F79EB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79EB8);
  }
  return result;
}

unint64_t sub_256A9E298()
{
  unint64_t result = qword_269F79EC0;
  if (!qword_269F79EC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79EC0);
  }
  return result;
}

unint64_t sub_256A9E2E8()
{
  unint64_t result = qword_26B2B6288;
  if (!qword_26B2B6288)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B6288);
  }
  return result;
}

unint64_t sub_256A9E338()
{
  unint64_t result = qword_26B2B6280;
  if (!qword_26B2B6280)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B6280);
  }
  return result;
}

unint64_t sub_256A9E388()
{
  unint64_t result = qword_26B2B6268;
  if (!qword_26B2B6268)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B6268);
  }
  return result;
}

unint64_t sub_256A9E3D8()
{
  unint64_t result = qword_26B2B6260;
  if (!qword_26B2B6260)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B6260);
  }
  return result;
}

unint64_t sub_256A9E428()
{
  unint64_t result = qword_269F79EC8;
  if (!qword_269F79EC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79EC8);
  }
  return result;
}

unint64_t sub_256A9E478()
{
  unint64_t result = qword_269F79ED0;
  if (!qword_269F79ED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79ED0);
  }
  return result;
}

unint64_t sub_256A9E4C8()
{
  unint64_t result = qword_269F79ED8;
  if (!qword_269F79ED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79ED8);
  }
  return result;
}

unint64_t sub_256A9E518()
{
  unint64_t result = qword_269F79EE0;
  if (!qword_269F79EE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79EE0);
  }
  return result;
}

unint64_t sub_256A9E568()
{
  unint64_t result = qword_269F79EE8;
  if (!qword_269F79EE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79EE8);
  }
  return result;
}

unint64_t sub_256A9E5B8()
{
  unint64_t result = qword_269F79EF0;
  if (!qword_269F79EF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79EF0);
  }
  return result;
}

unint64_t sub_256A9E608()
{
  unint64_t result = qword_269F79EF8;
  if (!qword_269F79EF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79EF8);
  }
  return result;
}

unint64_t sub_256A9E658()
{
  unint64_t result = qword_269F79F00;
  if (!qword_269F79F00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79F00);
  }
  return result;
}

unint64_t sub_256A9E6A8()
{
  unint64_t result = qword_269F79F08;
  if (!qword_269F79F08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79F08);
  }
  return result;
}

unint64_t sub_256A9E6F8()
{
  unint64_t result = qword_269F79F10;
  if (!qword_269F79F10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79F10);
  }
  return result;
}

unint64_t sub_256A9E748()
{
  unint64_t result = qword_269F79F18;
  if (!qword_269F79F18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79F18);
  }
  return result;
}

unint64_t sub_256A9E798()
{
  unint64_t result = qword_269F79F20;
  if (!qword_269F79F20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79F20);
  }
  return result;
}

unint64_t sub_256A9E7E8()
{
  unint64_t result = qword_269F79F28;
  if (!qword_269F79F28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79F28);
  }
  return result;
}

unint64_t sub_256A9E838()
{
  unint64_t result = qword_269F79F30;
  if (!qword_269F79F30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79F30);
  }
  return result;
}

unint64_t sub_256A9E888()
{
  unint64_t result = qword_269F79F38;
  if (!qword_269F79F38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79F38);
  }
  return result;
}

unint64_t sub_256A9E8D8()
{
  unint64_t result = qword_269F79F40;
  if (!qword_269F79F40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79F40);
  }
  return result;
}

unint64_t sub_256A9E928()
{
  unint64_t result = qword_269F79F48;
  if (!qword_269F79F48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79F48);
  }
  return result;
}

unint64_t sub_256A9E978()
{
  unint64_t result = qword_269F79F50;
  if (!qword_269F79F50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79F50);
  }
  return result;
}

unint64_t sub_256A9E9C8()
{
  unint64_t result = qword_269F79F58;
  if (!qword_269F79F58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79F58);
  }
  return result;
}

unint64_t sub_256A9EA18()
{
  unint64_t result = qword_269F79F60;
  if (!qword_269F79F60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79F60);
  }
  return result;
}

unint64_t sub_256A9EA68()
{
  unint64_t result = qword_269F79F68;
  if (!qword_269F79F68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79F68);
  }
  return result;
}

unint64_t sub_256A9EAB8()
{
  unint64_t result = qword_269F79F70;
  if (!qword_269F79F70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79F70);
  }
  return result;
}

unint64_t sub_256A9EB08()
{
  unint64_t result = qword_269F79F78;
  if (!qword_269F79F78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79F78);
  }
  return result;
}

unint64_t sub_256A9EB58()
{
  unint64_t result = qword_269F79F80;
  if (!qword_269F79F80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79F80);
  }
  return result;
}

unint64_t sub_256A9EBA8()
{
  unint64_t result = qword_269F79F88;
  if (!qword_269F79F88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79F88);
  }
  return result;
}

unint64_t sub_256A9EBF8()
{
  unint64_t result = qword_269F79F90;
  if (!qword_269F79F90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79F90);
  }
  return result;
}

unint64_t sub_256A9EC48()
{
  unint64_t result = qword_269F79F98;
  if (!qword_269F79F98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79F98);
  }
  return result;
}

unint64_t sub_256A9EC98()
{
  unint64_t result = qword_269F79FA0;
  if (!qword_269F79FA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79FA0);
  }
  return result;
}

unint64_t sub_256A9ECE8()
{
  unint64_t result = qword_269F79FA8;
  if (!qword_269F79FA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79FA8);
  }
  return result;
}

unint64_t sub_256A9ED38()
{
  unint64_t result = qword_269F79FB0;
  if (!qword_269F79FB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79FB0);
  }
  return result;
}

unint64_t sub_256A9ED88()
{
  unint64_t result = qword_26B2B62C8;
  if (!qword_26B2B62C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B62C8);
  }
  return result;
}

unint64_t sub_256A9EDD8()
{
  unint64_t result = qword_26B2B62C0;
  if (!qword_26B2B62C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B62C0);
  }
  return result;
}

unint64_t sub_256A9EE24()
{
  unint64_t result = qword_269F79FB8;
  if (!qword_269F79FB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79FB8);
  }
  return result;
}

unint64_t sub_256A9EE74()
{
  unint64_t result = qword_269F79FC0;
  if (!qword_269F79FC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79FC0);
  }
  return result;
}

unint64_t sub_256A9EEC4()
{
  unint64_t result = qword_269F79FC8;
  if (!qword_269F79FC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79FC8);
  }
  return result;
}

unint64_t sub_256A9EF14()
{
  unint64_t result = qword_269F79FD0;
  if (!qword_269F79FD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79FD0);
  }
  return result;
}

unint64_t sub_256A9EF64()
{
  unint64_t result = qword_26B2B3358;
  if (!qword_26B2B3358)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B3358);
  }
  return result;
}

unint64_t sub_256A9EFB4()
{
  unint64_t result = qword_269F79FE0;
  if (!qword_269F79FE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79FE0);
  }
  return result;
}

unint64_t sub_256A9F004()
{
  unint64_t result = qword_269F79FE8;
  if (!qword_269F79FE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79FE8);
  }
  return result;
}

unint64_t sub_256A9F054()
{
  unint64_t result = qword_269F79FF0;
  if (!qword_269F79FF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79FF0);
  }
  return result;
}

unint64_t sub_256A9F0A4()
{
  unint64_t result = qword_269F79FF8;
  if (!qword_269F79FF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F79FF8);
  }
  return result;
}

unint64_t sub_256A9F0F4()
{
  unint64_t result = qword_269F7A000;
  if (!qword_269F7A000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F7A000);
  }
  return result;
}

unint64_t sub_256A9F144()
{
  unint64_t result = qword_269F7A008;
  if (!qword_269F7A008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F7A008);
  }
  return result;
}

unint64_t sub_256A9F194()
{
  unint64_t result = qword_269F7A010;
  if (!qword_269F7A010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F7A010);
  }
  return result;
}

unint64_t sub_256A9F1E4()
{
  unint64_t result = qword_269F7A018;
  if (!qword_269F7A018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F7A018);
  }
  return result;
}

unint64_t sub_256A9F234()
{
  unint64_t result = qword_269F7A020;
  if (!qword_269F7A020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F7A020);
  }
  return result;
}

unint64_t sub_256A9F284()
{
  unint64_t result = qword_269F7A028;
  if (!qword_269F7A028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F7A028);
  }
  return result;
}

unint64_t sub_256A9F2D4()
{
  unint64_t result = qword_269F7A030;
  if (!qword_269F7A030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F7A030);
  }
  return result;
}

unint64_t sub_256A9F324()
{
  unint64_t result = qword_269F7A038;
  if (!qword_269F7A038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F7A038);
  }
  return result;
}

unint64_t sub_256A9F374()
{
  unint64_t result = qword_269F7A040;
  if (!qword_269F7A040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F7A040);
  }
  return result;
}

unint64_t sub_256A9F3C4()
{
  unint64_t result = qword_269F7A048;
  if (!qword_269F7A048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F7A048);
  }
  return result;
}

uint64_t sub_256A9F414()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 120, 7);
}

void sub_256A9F484()
{
}

unint64_t sub_256A9F508()
{
  unint64_t result = qword_269F7A050;
  if (!qword_269F7A050)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F7A050);
  }
  return result;
}

unint64_t sub_256A9F558()
{
  unint64_t result = qword_269F7A058;
  if (!qword_269F7A058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F7A058);
  }
  return result;
}

uint64_t sub_256A9F5A8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 104, 7);
}

void sub_256A9F610()
{
}

unint64_t sub_256A9F688()
{
  unint64_t result = qword_269F7A060;
  if (!qword_269F7A060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F7A060);
  }
  return result;
}

unint64_t sub_256A9F6D8()
{
  unint64_t result = qword_269F7A068;
  if (!qword_269F7A068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F7A068);
  }
  return result;
}

unint64_t sub_256A9F728()
{
  unint64_t result = qword_269F7A070;
  if (!qword_269F7A070)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F7A070);
  }
  return result;
}

unint64_t sub_256A9F778()
{
  unint64_t result = qword_269F7A078;
  if (!qword_269F7A078)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F7A078);
  }
  return result;
}

uint64_t sub_256A9F7C8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 192, 7);
}

void sub_256A9F868()
{
}

unint64_t sub_256A9F938()
{
  unint64_t result = qword_26B2B62E0;
  if (!qword_26B2B62E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B62E0);
  }
  return result;
}

unint64_t sub_256A9F984()
{
  unint64_t result = qword_26B2B5838;
  if (!qword_26B2B5838)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2B5838);
  }
  return result;
}

uint64_t sub_256A9F9D0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_256A39D2C(a3);
  sub_256A4A838();
  uint64_t v4 = sub_256A4A370();
  v5(v4);
  return a2;
}

unint64_t sub_256A9FA2C()
{
  unint64_t result = qword_269F7A088;
  if (!qword_269F7A088)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F7A088);
  }
  return result;
}

uint64_t sub_256A9FA7C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (result < a5)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if ((uint64_t)(a6 >> 1) < result || (uint64_t)(a6 >> 1) < a2) {
    goto LABEL_10;
  }
  if (a2 < a5)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((a2 & 0x8000000000000000) == 0) {
    return swift_unknownObjectRetain();
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_256A9FAF8()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_256A9FB00()
{
  return swift_getGenericMetadata();
}

void sub_256A9FB54()
{
}

double sub_256A9FC44()
{
  double result = 0.0;
  *(_OWORD *)(v0 + 120) = 0u;
  *(_OWORD *)(v0 + 130) = 0u;
  return result;
}

uint64_t sub_256A9FC78()
{
  return sub_256B3FD90();
}

uint64_t sub_256A9FC9C()
{
  return sub_256B3FF80();
}

uint64_t sub_256A9FCC0()
{
  return v0;
}

unint64_t sub_256A9FCD8()
{
  sub_256A39D70(v0, v0[3]);
  return sub_256A8E63C();
}

uint64_t sub_256A9FD28()
{
  return v0;
}

int64_t sub_256A9FD3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, __int16 a12, char a13)
{
  *(void *)(v14 + 16) = v18;
  uint64_t v21 = v14 + 40 * v13;
  *(void *)(v21 + 32) = v20;
  *(void *)(v21 + 40) = v17;
  *(unsigned char *)(v21 + 48) = a11;
  *(void *)(v21 + 56) = 0;
  *(_DWORD *)(v21 + 64) = 2;
  return sub_256A97D84(v15, v16, a13 & 1, v19);
}

uint64_t sub_256A9FD98()
{
  return v0;
}

void *sub_256A9FDD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return memcpy(&a9, v9, 0xB0uLL);
}

void *sub_256A9FDF4(void *a1)
{
  *uint64_t v1 = a1;
  return memcpy(a1, v2, 0xB8uLL);
}

uint64_t sub_256A9FE38()
{
  *(void *)(v0 + 8) = 0;
  *(void *)(v0 + 16) = 0xE000000000000000;
  return swift_bridgeObjectRetain();
}

void *sub_256A9FE58()
{
  return memcpy((void *)(v0 + 24), (const void *)(v0 + 208), 0xB8uLL);
}

void *sub_256A9FE98(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char __dst)
{
  return memcpy(&__dst, v10, 0xB8uLL);
}

void sub_256A9FEB4(uint64_t a1@<X8>)
{
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = (v2 - 32) | 0x8000000000000000;
  *(unsigned char *)(a1 + 16) = 2;
}

void *sub_256A9FECC()
{
  return memcpy(v1, (const void *)(v0 + 24), 0xB8uLL);
}

void sub_256A9FF00(uint64_t a1@<X8>)
{
  *(void *)(v1 - 72) = a1;
}

uint64_t sub_256A9FF10()
{
  return sub_256B3FCE0();
}

uint64_t sub_256A9FF34()
{
  return sub_256B3F760();
}

uint64_t sub_256A9FF50()
{
  return sub_256B3F670();
}

uint64_t sub_256A9FF7C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_256A9FFB4()
{
  return sub_256B3F700();
}

void *sub_256A9FFE0(void *a1)
{
  return sub_256A39D70(a1, v1);
}

uint64_t sub_256A9FFFC()
{
  return v0;
}

uint64_t sub_256AA0014()
{
  return sub_256B3FEA0();
}

void *sub_256AA0040(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  return memcpy(v18, v19, 0xB8uLL);
}

uint64_t sub_256AA0080()
{
  return sub_256B3F450();
}

void sub_256AA00A8()
{
  *(void *)(v0 + 16) = v2;
  uint64_t v7 = v0 + v6 * v3;
  *(void *)(v7 + 32) = v4;
  *(void *)(v7 + 40) = v1;
  *(unsigned char *)(v7 + 48) = v5;
}

uint64_t sub_256AA00C4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_256AA00EC()
{
  return sub_256B3FDC0();
}

void *sub_256AA0118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return memcpy(&a9, v9, 0xD0uLL);
}

void sub_256AA0134(__n128 a1, __n128 a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)uint64_t v11 = v19;
  *(void *)(v11 + 8) = v18;
  *(void *)(v11 + 16) = v17;
  *(void *)(v11 + 24) = v16;
  *(void *)(v11 + 32) = v15;
  *(void *)(v11 + 40) = a9;
  *(void *)(v11 + 48) = a10;
  *(unsigned char *)(v11 + 56) = 1;
  *(void *)(v11 + 64) = a11;
  *(void *)(v11 + 72) = v20;
  *(unsigned char *)(v11 + 80) = v14 & 1;
  *(__n128 *)(v11 + 88) = a1;
  *(__n128 *)(v11 + 104) = a2;
  *(__n128 *)(v11 + 120) = a3;
  *(void *)(v11 + 136) = v12;
  *(_WORD *)(v11 + 144) = v13;
  *(void *)(v11 + 152) = 0;
  *(void *)(v11 + 160) = 0;
}

uint64_t sub_256AA01B8()
{
  return 0;
}

uint64_t sub_256AA0200()
{
  return v0;
}

uint64_t sub_256AA0218()
{
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 104);
  return sub_256A54744(v2, v3);
}

uint64_t sub_256AA023C()
{
  return sub_256A97E68(v0);
}

uint64_t sub_256AA026C()
{
  return v0;
}

uint64_t sub_256AA0288()
{
  return sub_256B3FB70();
}

unint64_t sub_256AA02B0()
{
  return sub_256A8E688();
}

uint64_t sub_256AA02C8()
{
  return sub_256B0B9C0(0, v0, 0);
}

void *sub_256AA02E8()
{
  return malloc(0xC0uLL);
}

void *sub_256AA0300(void *a1)
{
  return memcpy(a1, v1, 0xB8uLL);
}

uint64_t sub_256AA032C()
{
  return sub_256B3FF90();
}

uint64_t sub_256AA034C()
{
  return sub_256B3FEA0();
}

uint64_t sub_256AA0354()
{
  return sub_256B3F740();
}

uint64_t sub_256AA0370()
{
  return sub_256B3FEA0();
}

uint64_t sub_256AA038C(uint64_t a1, uint64_t a2)
{
  *(void *)(v5 - 176) = v2;
  *(void *)(v5 - 160) = v4;
  return sub_256A9FA7C(1, a2, v3, v3 + 32, 0, (2 * a2) | 1);
}

uint64_t sub_256AA03CC()
{
  v0[23] = v4;
  v0[24] = v1;
  v0[25] = v2;
  v0[26] = v3;
  return swift_bridgeObjectRetain();
}

void *sub_256AA0400(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char __src)
{
  return memcpy(v34, &__src, 0xD8uLL);
}

void sub_256AA041C()
{
  uint64_t v2 = *(void *)(v0 + 8);
  char v3 = *(unsigned char *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  int v5 = *(_DWORD *)(v0 + 32);
  *(void *)(v1 - 56) = *(void *)v0;
  *(void *)(v1 - 48) = v2;
  *(unsigned char *)(v1 - 40) = v3;
  *(void *)(v1 - 32) = v4;
  *(_DWORD *)(v1 - 24) = v5;
}

uint64_t sub_256AA0444()
{
  return sub_256B3FBA0();
}

uint64_t sub_256AA0460()
{
  return v0;
}

void *sub_256AA0480(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char __dst)
{
  return memcpy(&__dst, v10, 0x108uLL);
}

uint64_t sub_256AA04B4()
{
  return sub_256B0B9E0(0, v0, 0);
}

void sub_256AA04D8(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 72);
  char v3 = *(unsigned char *)(a1 + 80);
  char v4 = *(unsigned char *)(a1 + 81);
  char v5 = *(unsigned char *)(a1 + 82);
  *(void *)uint64_t v1 = v2;
  *(unsigned char *)(v1 + 8) = v3;
  *(unsigned char *)(v1 + 9) = v4;
  *(unsigned char *)(v1 + 10) = v5;
}

uint64_t sub_256AA04FC()
{
  return v0;
}

uint64_t sub_256AA0520()
{
  return v0;
}

uint64_t sub_256AA0544()
{
  return sub_256A54690(v1, v0);
}

uint64_t sub_256AA0598(uint64_t a1)
{
  return *(void *)a1;
}

void sub_256AA05AC(unsigned char *a1@<X8>)
{
  *a1 = v1;
}

uint64_t sub_256AA05B4(uint64_t a1)
{
  return sub_256B0B9C0(a1, v1, 1);
}

uint64_t sub_256AA05DC()
{
  return sub_256B3FF80();
}

uint64_t sub_256AA05F4()
{
  return sub_256B3FF50();
}

uint64_t sub_256AA0614()
{
  return sub_256B3FD50();
}

uint64_t sub_256AA0634()
{
  return sub_256B3FF90();
}

uint64_t sub_256AA0684()
{
  *(unsigned char *)(v0 - 66) = 1;
  return *(unsigned int *)(v0 - 72);
}

uint64_t sub_256AA06A4()
{
  return sub_256B3FD50();
}

uint64_t sub_256AA06D4()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_256AA06EC()
{
  return sub_256B3F690();
}

uint64_t _s12ModelCatalog12ResourceBaseV09dependentC3IDsSaySSGvg_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_256AA071C(uint64_t a1, uint64_t a2)
{
  return *(void *)a2;
}

uint64_t sub_256AA0738()
{
  *(void *)(v2 - 168) = v1;
  *(void *)(v2 - 88) = v0;
  return sub_256B3FDA0();
}

uint64_t sub_256AA0760(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_256AA077C(uint64_t a1, void *a2)
{
  *a2 = v3;
  a2[1] = v2;
}

uint64_t sub_256AA0788(uint64_t a1)
{
  return MEMORY[0x270FA1188](a1, v1);
}

uint64_t sub_256AA07A0()
{
  return v0 - 152;
}

uint64_t sub_256AA07BC(uint64_t a1)
{
  *(void *)(v1 + 56) = a1;
  return swift_getAssociatedConformanceWitness();
}

void sub_256AA07E4(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 104) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_256AA0800(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 144) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_256AA0828(uint64_t a1@<X8>)
{
  *(void *)(a1 + 40) = v1;
  *(unsigned char *)(a1 + 48) = v2;
  *(unsigned char *)(a1 + 49) = v3;
  *(unsigned char *)(a1 + 50) = v4;
}

void sub_256AA083C(uint64_t a1@<X8>)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 9) = v3;
  *(unsigned char *)(a1 + 10) = v4;
}

uint64_t sub_256AA0850()
{
  return v0;
}

char *sub_256AA085C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  return &a10;
}

uint64_t sub_256AA0894()
{
  return sub_256B3FE60();
}

uint64_t sub_256AA08B0(void *a1, void *a2)
{
  uint64_t result = a2[1];
  *a1 = *a2;
  a1[1] = result;
  return result;
}

uint64_t sub_256AA08C0()
{
  return type metadata accessor for CatalogClient();
}

uint64_t sub_256AA08F0()
{
  return swift_getAssociatedTypeWitness();
}

uint64_t sub_256AA0924()
{
  return sub_256B3FF80();
}

uint64_t sub_256AA0948()
{
  return v0;
}

uint64_t sub_256AA0960()
{
  *(void *)(v1 - 184) = v0;
  return sub_256B3FD50();
}

uint64_t sub_256AA0984(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, long long a17, long long a18, uint64_t a19)
{
  a19 = 0;
  a17 = 0u;
  a18 = 0u;
  return sub_256A98BD4((uint64_t)&a17, v19);
}

uint64_t sub_256AA09B8()
{
  return v0;
}

uint64_t sub_256AA09D0()
{
  return sub_256B3FE20();
}

uint64_t sub_256AA09F4()
{
  return sub_256B3FE20();
}

uint64_t sub_256AA0A18(uint64_t a1)
{
  return MEMORY[0x270F9F2F0](a1, v1);
}

void sub_256AA0A34(uint64_t a1@<X8>)
{
  *(void *)uint64_t v2 = a1;
  *(void *)(v2 + 8) = (v1 - 32) | 0x8000000000000000;
  *(unsigned char *)(v2 + 16) = 3;
}

uint64_t sub_256AA0A4C()
{
  return v0;
}

uint64_t sub_256AA0A64()
{
  return swift_dynamicCast();
}

uint64_t sub_256AA0A88()
{
  return sub_256B3FCE0();
}

uint64_t sub_256AA0AAC()
{
  *(unsigned char *)(v0 - 65) = 0;
  return sub_256B3FD50();
}

uint64_t sub_256AA0AF8()
{
  return v0;
}

uint64_t sub_256AA0B20()
{
  return sub_256B3FF60();
}

uint64_t sub_256AA0B38()
{
  return sub_256B3FF80();
}

uint64_t sub_256AA0B84()
{
  return sub_256B3FE60();
}

uint64_t sub_256AA0B9C(uint64_t a1, uint64_t a2, char a3)
{
  sub_256A97EE8(v3, v4, a3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_256AA0BCC()
{
  return v0;
}

uint64_t sub_256AA0BD8()
{
  return v0;
}

void sub_256AA0BF0()
{
  JUMPOUT(0x25A2AB050);
}

void *sub_256AA0C0C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char __dst)
{
  return memcpy(&__dst, v10, 0xB8uLL);
}

uint64_t sub_256AA0C30()
{
  return sub_256B3FF60();
}

uint64_t sub_256AA0C48(uint64_t a1)
{
  return sub_256B0B9E0(a1, v1, 1);
}

uint64_t sub_256AA0C64()
{
  return v0;
}

uint64_t sub_256AA0C78()
{
  return swift_bridgeObjectRelease();
}

void sub_256AA0CA4(uint64_t a1, void *a2)
{
  *a2 = v3;
  a2[1] = v2;
}

void *sub_256AA0CB8(void *a1)
{
  return sub_256A39D70(a1, v1);
}

uint64_t sub_256AA0CD4()
{
  return v0;
}

uint64_t sub_256AA0CE8()
{
  return sub_256B3FD90();
}

uint64_t sub_256AA0D08()
{
  uint64_t v4 = *(void *)(v3 - 112);
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = v0;
  *(unsigned char *)(v4 + 16) = *(_DWORD *)(v3 - 72);
  return sub_256A39DB4(v2);
}

void sub_256AA0D34(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(v3 - 72) = a1;
  *(void *)(v2 + 8) = a2;
}

__n128 *sub_256AA0D48(__n128 *result, __n128 a2)
{
  result[1] = a2;
  return result;
}

uint64_t sub_256AA0D5C()
{
  return v0;
}

uint64_t sub_256AA0D70()
{
  return v0;
}

uint64_t sub_256AA0D84()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_256AA0DA4()
{
  return sub_256B3FEA0();
}

void sub_256AA0DC4()
{
  *(unsigned char *)(v0 - 67) = 2;
}

uint64_t sub_256AA0DD0()
{
  return sub_256B3FE20();
}

void sub_256AA0DF0(uint64_t a1, void *a2)
{
  *a2 = v3;
  a2[1] = v2;
}

uint64_t sub_256AA0E04()
{
  return MEMORY[0x270F9F2F0](v0 + 376, v1);
}

uint64_t sub_256AA0E24()
{
  *(void *)(v0 + 8) = 0;
  *(void *)(v0 + 16) = 0xE000000000000000;
  return swift_bridgeObjectRetain();
}

uint64_t sub_256AA0E44()
{
  *(void *)(v0 - 80) = 0;
  *(void *)(v0 - 72) = 0xE000000000000000;
  return sub_256B3FB70();
}

uint64_t sub_256AA0E7C()
{
  return v0 - 72;
}

uint64_t sub_256AA0E90()
{
  return sub_256B3FF90();
}

void sub_256AA0EB0()
{
  *(unsigned char *)(v0 - 68) = 3;
}

uint64_t sub_256AA0EBC(uint64_t a1)
{
  return sub_256A480C4(v1, 1, a1);
}

uint64_t sub_256AA0EE8()
{
  return sub_256B3F640();
}

uint64_t sub_256AA0F00()
{
  return v0;
}

uint64_t sub_256AA0F14()
{
  return v0;
}

uint64_t sub_256AA0F28()
{
  return sub_256B3FE20();
}

uint64_t sub_256AA0F54()
{
  return v0;
}

uint64_t sub_256AA0F6C()
{
  return v0;
}

uint64_t sub_256AA0F80()
{
  return sub_256B3FDC0();
}

uint64_t sub_256AA0FA0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_256AA0FC4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 8);
  char v3 = *(unsigned char *)(result + 16);
  *(void *)a2 = *(void *)result;
  *(void *)(a2 + 8) = v2;
  *(unsigned char *)(a2 + 16) = v3;
  return result;
}

void sub_256AA0FE8()
{
  *(void *)(v1 - 88) = v0;
}

uint64_t sub_256AA0FF4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_256AA100C(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_256AA1020()
{
  return v0;
}

__n128 sub_256AA102C@<Q0>(uint64_t a1@<X8>)
{
  return *(__n128 *)a1;
}

uint64_t sub_256AA1040()
{
  uint64_t result = os_variant_has_internal_content();
  byte_26B2C4010 = result;
  return result;
}

uint64_t sub_256AA1068()
{
  return MEMORY[0x270FA0228](v0, 16, 7);
}

uint64_t type metadata accessor for Utils()
{
  return self;
}

BOOL sub_256AA109C()
{
  uint64_t v0 = sub_256B3F770();
  uint64_t v2 = v1;
  swift_getObjectType();
  OS_xpc_object.asAny.getter((uint64_t)&v5);
  uint64_t v3 = v6;
  if (v6)
  {
    sub_256A3A530(&v5, v7);
    sub_256A49EDC((uint64_t)v7, (uint64_t)&v5);
    sub_256A38E10((uint64_t)&v5, v0, v2);
    sub_256A39DB4((uint64_t)v7);
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_256A3A4D4((uint64_t)&v5, &qword_269F78B20);
  }
  return v3 != 0;
}

void OS_xpc_object.asAny.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = MEMORY[0x25A2AC100](v1);
  if (sub_256B3F4E0() == v3)
  {
    id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFF9C8]), sel_init);
    unint64_t v7 = sub_256AA18C8();
LABEL_15:
    *(void *)(a1 + 24) = v7;
    *(void *)a1 = v5;
    return;
  }
  if (sub_256B3F510() == v3)
  {
    uint64_t value = xpc_int64_get_value(v1);
    uint64_t v9 = MEMORY[0x263F8E5C0];
LABEL_18:
    *(void *)(a1 + 24) = v9;
    *(void *)a1 = value;
    return;
  }
  if (sub_256B3F540() == v3)
  {
    uint64_t value = xpc_uint64_get_value(v1);
    uint64_t v9 = MEMORY[0x263F8E970];
    goto LABEL_18;
  }
  if (sub_256B3F4B0() == v3)
  {
    BOOL v10 = xpc_BOOL_get_value(v1);
    *(void *)(a1 + 24) = MEMORY[0x263F8D4F8];
    *(unsigned char *)a1 = v10;
    return;
  }
  if (sub_256B3F520() == v3)
  {
    double v11 = xpc_double_get_value(v1);
    *(void *)(a1 + 24) = MEMORY[0x263F8D538];
    *(double *)a1 = v11;
    return;
  }
  if (sub_256B3F530() == v3)
  {
    if (xpc_string_get_string_ptr(v1))
    {
      uint64_t v12 = sub_256B3F770();
      uint64_t v14 = MEMORY[0x263F8D310];
LABEL_23:
      *(void *)(a1 + 24) = v14;
      *(void *)a1 = v12;
      *(void *)(a1 + 8) = v13;
      return;
    }
  }
  else if (sub_256B3F4F0() == v3)
  {
    id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08C30]), sel_initWithUUIDBytes_, xpc_uuid_get_bytes(v1));
    uint64_t v16 = sub_256A39D2C(&qword_269F7A090);
    MEMORY[0x270FA5388](v16 - 8);
    uint64_t v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
    id v19 = objc_msgSend(v15, sel_UUIDString);
    sub_256B3F6B0();

    sub_256B3F420();
    swift_bridgeObjectRelease();
    uint64_t v20 = sub_256B3F440();
    if (sub_256A480C4((uint64_t)v18, 1, v20) != 1)
    {
      *(void *)(a1 + 24) = v20;
      uint64_t v21 = sub_256A49D7C((uint64_t *)a1);
      (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v21, v18, v20);

      return;
    }

    sub_256A3A4D4((uint64_t)v18, &qword_269F7A090);
  }
  else
  {
    if (sub_256B3F4D0() == v3)
    {
      xpc_date_get_value_absolute();
      *(void *)(a1 + 24) = sub_256B3F410();
      sub_256A49D7C((uint64_t *)a1);
      sub_256B3F3F0();
      return;
    }
    if (sub_256B3F4C0() != v3)
    {
      if (sub_256B3F500() == v3)
      {
        size_t v25 = sub_256AA1530(v1);
        if (v25)
        {
          id v5 = (id)v25;
          uint64_t v6 = &qword_269F78B28;
          goto LABEL_32;
        }
      }
      else if (sub_256B3F550() == v3)
      {
        uint64_t v4 = sub_256AA174C(v1);
        if (v4)
        {
          id v5 = (id)v4;
          uint64_t v6 = &qword_269F78B10;
LABEL_32:
          unint64_t v7 = sub_256A39D2C(v6);
          goto LABEL_15;
        }
      }
      goto LABEL_33;
    }
    bytes_ptr = xpc_data_get_bytes_ptr(v1);
    if (bytes_ptr)
    {
      uint64_t v23 = bytes_ptr;
      size_t length = xpc_data_get_length(v1);
      uint64_t v12 = MEMORY[0x25A2AAC40](v23, length);
      uint64_t v14 = MEMORY[0x263F06F70];
      goto LABEL_23;
    }
  }
LABEL_33:
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
}

uint64_t sub_256AA14D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_unknownObjectRetain();
  char v6 = v5(a2, a3);
  swift_unknownObjectRelease();
  return v6 & 1;
}

size_t sub_256AA1530(void *a1)
{
  uint64_t v2 = MEMORY[0x25A2AC100]();
  if (v2 != sub_256B3F500()) {
    return 0;
  }
  size_t result = xpc_array_get_count(a1);
  if ((result & 0x8000000000000000) == 0)
  {
    size_t v5 = result;
    if (!result) {
      return MEMORY[0x263F8EE78];
    }
    size_t v6 = 0;
    uint64_t v3 = MEMORY[0x263F8EE78];
    do
    {
      id v7 = xpc_array_get_value(a1, v6);
      uint64_t ObjectType = swift_getObjectType();
      OS_xpc_object.asAny.getter(&v18, ObjectType);
      swift_unknownObjectRelease();
      if (v19)
      {
        sub_256A3A530(&v18, &v20);
        sub_256A49EDC((uint64_t)&v20, (uint64_t)&v18);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_256B07CDC(0, *(void *)(v3 + 16) + 1, 1, v3);
          uint64_t v3 = v14;
        }
        unint64_t v10 = *(void *)(v3 + 16);
        unint64_t v9 = *(void *)(v3 + 24);
        if (v10 >= v9 >> 1)
        {
          sub_256B07CDC(v9 > 1, v10 + 1, 1, v3);
          uint64_t v3 = v15;
        }
        *(void *)(v3 + 16) = v10 + 1;
        sub_256A3A530(&v18, (_OWORD *)(v3 + 32 * v10 + 32));
        sub_256A39DB4((uint64_t)&v20);
      }
      else
      {
        sub_256A3A4D4((uint64_t)&v18, &qword_269F78B20);
        id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFF9C8]), sel_init);
        unint64_t v21 = sub_256AA18C8();
        *(void *)&long long v20 = v11;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_256B07CDC(0, *(void *)(v3 + 16) + 1, 1, v3);
          uint64_t v3 = v16;
        }
        unint64_t v13 = *(void *)(v3 + 16);
        unint64_t v12 = *(void *)(v3 + 24);
        if (v13 >= v12 >> 1)
        {
          sub_256B07CDC(v12 > 1, v13 + 1, 1, v3);
          uint64_t v3 = v17;
        }
        *(void *)(v3 + 16) = v13 + 1;
        sub_256A3A530(&v20, (_OWORD *)(v3 + 32 * v13 + 32));
      }
      ++v6;
    }
    while (v5 != v6);
    return v3;
  }
  __break(1u);
  return result;
}

uint64_t sub_256AA174C(void *a1)
{
  uint64_t v2 = MEMORY[0x25A2AC100]();
  if (v2 != sub_256B3F550()) {
    return 0;
  }
  uint64_t v10 = MEMORY[0x263F8EE80];
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = &v10;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_256AA1914;
  *(void *)(v5 + 24) = v4;
  aBlock[4] = sub_256AA1928;
  aBlock[5] = v5;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_256AA14D8;
  aBlock[3] = &unk_2706080A8;
  size_t v6 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  xpc_dictionary_apply(a1, v6);
  _Block_release(v6);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    uint64_t v3 = v10;
    swift_release();
    return v3;
  }
  __break(1u);
  return result;
}

unint64_t sub_256AA18C8()
{
  unint64_t result = qword_269F7A098;
  if (!qword_269F7A098)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_269F7A098);
  }
  return result;
}

uint64_t sub_256AA1908()
{
  return sub_256A80340(v0, 24);
}

uint64_t sub_256AA1914(uint64_t a1, uint64_t a2)
{
  return sub_256AA109C(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_256AA191C()
{
  return sub_256A80340(v0, 32);
}

uint64_t sub_256AA1928()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t sub_256AA1954(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_256AA1964()
{
  return swift_release();
}

uint64_t (*Catalog.Diffusion.Adapter.Animation.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.Diffusion.Adapter.Animation.init()()
{
  sub_256AE1FC4();
  sub_256A52518(v1 + 21);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705FC540);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"visual-generation-inference");
  sub_256AE1E6C(v3, 250000);
  sub_256AE1EB0(MEMORY[0x263F8EE78]);
  v0[9] = &unk_2705FC4C8;
  v0[10] = &unk_2705FC4F0;
}

uint64_t sub_256AA1A38(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v3 = 0;
  uint64_t v25 = result;
  uint64_t v26 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v27 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v7 = a2 + 56;
  if (v6) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v9 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
    goto LABEL_44;
  }
  if (v9 >= v27) {
    return 1;
  }
  unint64_t v10 = *(void *)(v26 + 8 * v9);
  int64_t v11 = v3 + 1;
  if (!v10)
  {
    int64_t v11 = v9 + 1;
    if (v9 + 1 >= v27) {
      return 1;
    }
    unint64_t v10 = *(void *)(v26 + 8 * v11);
    if (!v10)
    {
      int64_t v11 = v9 + 2;
      if (v9 + 2 >= v27) {
        return 1;
      }
      unint64_t v10 = *(void *)(v26 + 8 * v11);
      if (!v10)
      {
        int64_t v12 = v9 + 3;
        if (v12 < v27)
        {
          unint64_t v10 = *(void *)(v26 + 8 * v12);
          if (v10)
          {
            int64_t v11 = v12;
            goto LABEL_21;
          }
          while (1)
          {
            int64_t v11 = v12 + 1;
            if (__OFADD__(v12, 1)) {
              break;
            }
            if (v11 >= v27) {
              return 1;
            }
            unint64_t v10 = *(void *)(v26 + 8 * v11);
            ++v12;
            if (v10) {
              goto LABEL_21;
            }
          }
LABEL_44:
          __break(1u);
          return result;
        }
        return 1;
      }
    }
  }
LABEL_21:
  uint64_t v28 = (v10 - 1) & v10;
  int64_t v29 = v11;
  for (unint64_t i = __clz(__rbit64(v10)) + (v11 << 6); ; unint64_t i = __clz(__rbit64(v6)) | (v3 << 6))
  {
    uint64_t v13 = *(void *)(result + 48) + 24 * i;
    uint64_t v15 = *(void *)v13;
    uint64_t v14 = *(void *)(v13 + 8);
    int v16 = *(unsigned __int8 *)(v13 + 16);
    sub_256B3FF40();
    swift_bridgeObjectRetain_n();
    sub_256B3F740();
    swift_bridgeObjectRelease();
    if (v16 != 2) {
      sub_256B3FF60();
    }
    sub_256B3FF60();
    uint64_t v17 = sub_256B3FF70();
    uint64_t v18 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v19 = v17 & ~v18;
    if (((*(void *)(v7 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
      break;
    }
    uint64_t v20 = ~v18;
    uint64_t v21 = *(void *)(a2 + 48);
    while (1)
    {
      uint64_t v22 = v21 + 24 * v19;
      int v23 = *(unsigned __int8 *)(v22 + 16);
      BOOL v24 = *(void *)v22 == v15 && *(void *)(v22 + 8) == v14;
      if (!v24 && (sub_256B3FEA0() & 1) == 0) {
        goto LABEL_36;
      }
      if (v23 != 2) {
        break;
      }
      if (v16 == 2) {
        goto LABEL_38;
      }
LABEL_36:
      unint64_t v19 = (v19 + 1) & v20;
      if (((*(void *)(v7 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
        goto LABEL_41;
      }
    }
    if (v16 == 2 || ((v16 ^ ((v23 & 1) == 0)) & 1) == 0) {
      goto LABEL_36;
    }
LABEL_38:
    swift_bridgeObjectRelease();
    unint64_t result = v25;
    unint64_t v6 = v28;
    int64_t v3 = v29;
    if (!v28) {
      goto LABEL_8;
    }
LABEL_7:
    uint64_t v28 = (v6 - 1) & v6;
    int64_t v29 = v3;
  }
LABEL_41:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_256AA1D04(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  uint64_t v2 = a2;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v3 = 0;
  uint64_t v4 = result + 56;
  uint64_t v5 = 1 << *(unsigned char *)(result + 32);
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(result + 56);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v51 = a2 + 56;
  uint64_t v38 = result + 56;
  uint64_t v39 = result;
  int64_t v37 = v8;
  if (v7) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v10 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
    goto LABEL_58;
  }
  if (v10 >= v8) {
    return 1;
  }
  unint64_t v11 = *(void *)(v4 + 8 * v10);
  int64_t v12 = v3 + 1;
  if (!v11)
  {
    int64_t v12 = v10 + 1;
    if (v10 + 1 >= v8) {
      return 1;
    }
    unint64_t v11 = *(void *)(v4 + 8 * v12);
    if (!v11)
    {
      int64_t v12 = v10 + 2;
      if (v10 + 2 >= v8) {
        return 1;
      }
      unint64_t v11 = *(void *)(v4 + 8 * v12);
      if (!v11)
      {
        int64_t v13 = v10 + 3;
        if (v13 < v8)
        {
          unint64_t v11 = *(void *)(v4 + 8 * v13);
          if (v11)
          {
            int64_t v12 = v13;
            goto LABEL_21;
          }
          while (1)
          {
            int64_t v12 = v13 + 1;
            if (__OFADD__(v13, 1)) {
              break;
            }
            if (v12 >= v8) {
              return 1;
            }
            unint64_t v11 = *(void *)(v4 + 8 * v12);
            ++v13;
            if (v11) {
              goto LABEL_21;
            }
          }
LABEL_58:
          __break(1u);
          return result;
        }
        return 1;
      }
    }
  }
LABEL_21:
  uint64_t v40 = (v11 - 1) & v11;
  int64_t v41 = v12;
  for (unint64_t i = __clz(__rbit64(v11)) + (v12 << 6); ; unint64_t i = __clz(__rbit64(v7)) | (v3 << 6))
  {
    uint64_t v14 = *(void *)(result + 48) + 40 * i;
    uint64_t v16 = *(void *)v14;
    uint64_t v15 = *(void *)(v14 + 8);
    int v44 = *(unsigned __int8 *)(v14 + 32);
    int v43 = *(unsigned __int8 *)(v14 + 33);
    __int16 v17 = *(_WORD *)(v14 + 32);
    int v52 = *(unsigned __int8 *)(v14 + 16);
    uint64_t v46 = *(void *)(v14 + 24);
    int v45 = *(unsigned __int8 *)(v14 + 34);
    int v47 = *(unsigned __int8 *)(v14 + 35);
    sub_256B3FF40();
    swift_bridgeObjectRetain();
    ExecutionContext.hash(into:)();
    uint64_t v18 = sub_256B3FF70();
    uint64_t v19 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v20 = v18 & ~v19;
    if (((*(void *)(v51 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
      break;
    }
    uint64_t v21 = ~v19;
    uint64_t v22 = *(void *)(a2 + 48);
    int v48 = v17;
    uint64_t v49 = v16;
    uint64_t v50 = v15;
    while (1)
    {
      uint64_t v23 = v22 + 40 * v20;
      int v24 = *(unsigned __int8 *)(v23 + 16);
      uint64_t v25 = *(void *)(v23 + 24);
      int v26 = *(unsigned __int8 *)(v23 + 32);
      int v27 = *(unsigned __int8 *)(v23 + 33);
      int v28 = *(unsigned __int8 *)(v23 + 34);
      __int16 v29 = *(_WORD *)(v23 + 32);
      int v30 = *(unsigned __int8 *)(v23 + 35);
      if (*(void *)v23 != v16 || *(void *)(v23 + 8) != v15)
      {
        uint64_t v32 = v21;
        int v33 = *(unsigned __int8 *)(v23 + 16);
        char v34 = sub_256B3FEA0();
        int v24 = v33;
        uint64_t v21 = v32;
        uint64_t v16 = v49;
        uint64_t v15 = v50;
        if ((v34 & 1) == 0) {
          goto LABEL_50;
        }
      }
      if (v24 == 2)
      {
        if (v52 != 2) {
          goto LABEL_50;
        }
      }
      else if (v52 == 2 || ((v52 ^ ((v24 & 1) == 0)) & 1) == 0)
      {
        goto LABEL_50;
      }
      if (v29 != 2) {
        break;
      }
      if (v48 == 2 && v30 == v47) {
        goto LABEL_52;
      }
LABEL_50:
      unint64_t v20 = (v20 + 1) & v21;
      if (((*(void *)(v51 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
        goto LABEL_55;
      }
    }
    BOOL v36 = v48 != 2 && v25 == v46;
    if (!v36 || ((v26 ^ v44) & 1) != 0 || ((v43 ^ v27) & 1) != 0 || ((v28 ^ v45) & 1) != 0 || v30 != v47) {
      goto LABEL_50;
    }
LABEL_52:
    swift_bridgeObjectRelease();
    int64_t v3 = v41;
    uint64_t v2 = a2;
    uint64_t v4 = v38;
    unint64_t result = v39;
    int64_t v8 = v37;
    unint64_t v7 = v40;
    if (!v40) {
      goto LABEL_8;
    }
LABEL_7:
    uint64_t v40 = (v7 - 1) & v7;
    int64_t v41 = v3;
  }
LABEL_55:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t Catalog.Diffusion.Adapter.Animation.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.Diffusion.Adapter.Animation.hash(into:));
}

uint64_t (*sub_256AA20B0())()
{
  return nullsub_1;
}

uint64_t sub_256AA20F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.Diffusion.Adapter.Animation.hash(into:));
}

uint64_t (*Catalog.Diffusion.Adapter.Emoji.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.Diffusion.Adapter.Emoji.init()()
{
  sub_256AE1FC4();
  sub_256A52518(v1 + 17);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705FBDD8);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"visual-generation-inference");
  sub_256AE1E6C(v3, 250000);
  sub_256AE1EB0(MEMORY[0x263F8EE78]);
  v0[9] = &unk_2705FBD60;
  v0[10] = &unk_2705FBD88;
}

uint64_t Catalog.Diffusion.Adapter.Emoji.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.Diffusion.Adapter.Emoji.hash(into:));
}

uint64_t sub_256AA21F8(void (*a1)(uint64_t *))
{
  sub_256AE202C();
  sub_256B3FF40();
  a1(&v3);
  return sub_256B3FF70();
}

uint64_t sub_256AA2248(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.Diffusion.Adapter.Emoji.hash(into:));
}

uint64_t sub_256AA2260(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *))
{
  sub_256AE202C();
  sub_256B3FF40();
  a4(&v6);
  return sub_256B3FF70();
}

uint64_t (*Catalog.Diffusion.Adapter.Illustration.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.Diffusion.Adapter.Illustration.init()()
{
  sub_256AE1FC4();
  sub_256A52518(v1 + 24);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705FB088);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"visual-generation-inference");
  sub_256AE1E6C(v3, 250000);
  sub_256AE1EB0(MEMORY[0x263F8EE78]);
  v0[9] = &unk_2705FB010;
  v0[10] = &unk_2705FB038;
}

uint64_t Catalog.Diffusion.Adapter.Illustration.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.Diffusion.Adapter.Illustration.hash(into:));
}

uint64_t sub_256AA2390(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.Diffusion.Adapter.Illustration.hash(into:));
}

uint64_t (*Catalog.Diffusion.Adapter.PersonalizedAnimation.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.Diffusion.Adapter.PersonalizedAnimation.init()()
{
  sub_256AE1FC4();
  sub_256A52518(v1 + 34);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705FB9E8);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"visual-generation-inference");
  sub_256AE1E6C(v3, 250000);
  sub_256AE1EB0(MEMORY[0x263F8EE78]);
  v0[9] = &unk_2705FB970;
  v0[10] = &unk_2705FB998;
}

uint64_t Catalog.Diffusion.Adapter.PersonalizedAnimation.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.Diffusion.Adapter.PersonalizedAnimation.hash(into:));
}

uint64_t sub_256AA2490(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.Diffusion.Adapter.PersonalizedAnimation.hash(into:));
}

uint64_t (*Catalog.Diffusion.Adapter.PersonalizedEmoji.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.Diffusion.Adapter.PersonalizedEmoji.init()()
{
  sub_256AE1FC4();
  sub_256A52518(v1 + 30);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705FB450);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"visual-generation-inference");
  sub_256AE1E6C(v3, 250000);
  sub_256AE1EB0(MEMORY[0x263F8EE78]);
  v0[9] = &unk_2705FB3D8;
  v0[10] = &unk_2705FB400;
}

uint64_t Catalog.Diffusion.Adapter.PersonalizedEmoji.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.Diffusion.Adapter.PersonalizedEmoji.hash(into:));
}

uint64_t sub_256AA2590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.Diffusion.Adapter.PersonalizedEmoji.hash(into:));
}

uint64_t (*Catalog.Diffusion.Adapter.PersonalizedIllustration.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.Diffusion.Adapter.PersonalizedIllustration.init()()
{
  sub_256AE1FC4();
  sub_256A52518(v1 + 37);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705FBBE0);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"visual-generation-inference");
  sub_256AE1E6C(v3, 250000);
  sub_256AE1EB0(MEMORY[0x263F8EE78]);
  v0[9] = &unk_2705FBB68;
  v0[10] = &unk_2705FBB90;
}

uint64_t Catalog.Diffusion.Adapter.PersonalizedIllustration.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.Diffusion.Adapter.PersonalizedIllustration.hash(into:));
}

uint64_t sub_256AA2690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.Diffusion.Adapter.PersonalizedIllustration.hash(into:));
}

uint64_t (*Catalog.Diffusion.Adapter.PersonalizedScribble.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.Diffusion.Adapter.PersonalizedScribble.init()()
{
  sub_256AE1FC4();
  sub_256A52518(v1 + 39);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705FB7F0);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"visual-generation-inference");
  sub_256AE1E6C(v3, 250000);
  sub_256AE1F0C(MEMORY[0x263F8EE78]);
  v0[9] = v4;
  v0[10] = &unk_2705FB7A0;
}

uint64_t Catalog.Diffusion.Adapter.PersonalizedScribble.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.Diffusion.Adapter.PersonalizedScribble.hash(into:));
}

uint64_t sub_256AA2788(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.Diffusion.Adapter.PersonalizedScribble.hash(into:));
}

uint64_t (*Catalog.Diffusion.Adapter.PersonalizedSketch.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.Diffusion.Adapter.PersonalizedSketch.init()()
{
  sub_256AE1FC4();
  sub_256A52518(v1 + 31);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705FB620);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"visual-generation-inference");
  sub_256AE1E6C(v3, 250000);
  sub_256AE1F0C(MEMORY[0x263F8EE78]);
  v0[9] = v4;
  v0[10] = &unk_2705FB5D0;
}

uint64_t Catalog.Diffusion.Adapter.PersonalizedSketch.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.Diffusion.Adapter.PersonalizedSketch.hash(into:));
}

uint64_t sub_256AA2880(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.Diffusion.Adapter.PersonalizedSketch.hash(into:));
}

uint64_t (*Catalog.Diffusion.Adapter.Refiner.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.Diffusion.Adapter.Refiner.init()()
{
  sub_256AE1FC4();
  sub_256A52518(v1 + 19);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705FC1A0);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"visual-generation-inference");
  sub_256AE1E6C(v3, 250000);
  sub_256AE1F0C(MEMORY[0x263F8EE78]);
  v0[9] = v4;
  v0[10] = &unk_2705FC150;
}

uint64_t Catalog.Diffusion.Adapter.Refiner.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.Diffusion.Adapter.Refiner.hash(into:));
}

uint64_t sub_256AA2978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.Diffusion.Adapter.Refiner.hash(into:));
}

uint64_t (*Catalog.Diffusion.Adapter.Scribble.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.Diffusion.Adapter.Scribble.init()(void *a1@<X8>)
{
  sub_256AE2524();
  sub_256A52518(v2);
  a1[2] = sub_256AB81C4((uint64_t)&unk_2705FC348);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v4 = sub_256AE1DC0(inited, (uint64_t)"visual-generation-inference");
  sub_256AE1E6C(v4, 250000);
  sub_256AE1EB0(MEMORY[0x263F8EE78]);
  a1[9] = &unk_2705FC320;
  a1[10] = &unk_270608148;
}

uint64_t Catalog.Diffusion.Adapter.Scribble.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.Diffusion.Adapter.Scribble.hash(into:));
}

uint64_t sub_256AA2A7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.Diffusion.Adapter.Scribble.hash(into:));
}

uint64_t (*Catalog.Diffusion.Adapter.Sketch.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.Diffusion.Adapter.Sketch.init()()
{
  sub_256AE1FC4();
  sub_256A52518(v1 + 18);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705FBFD0);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"visual-generation-inference");
  sub_256AE1E6C(v3, 250000);
  sub_256AE1EB0(MEMORY[0x263F8EE78]);
  v0[9] = &unk_2705FBF58;
  v0[10] = &unk_2705FBF80;
}

uint64_t Catalog.Diffusion.Adapter.Sketch.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.Diffusion.Adapter.Sketch.hash(into:));
}

uint64_t sub_256AA2B7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.Diffusion.Adapter.Sketch.hash(into:));
}

uint64_t (*Catalog.Diffusion.Adapter.SkinToneEmoji.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.Diffusion.Adapter.SkinToneEmoji.init()(void *a1@<X8>)
{
  sub_256AE2524();
  sub_256A52518(v2);
  a1[2] = sub_256AB81C4((uint64_t)&unk_2705FB258);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v4 = sub_256AE1DC0(inited, (uint64_t)"visual-generation-inference");
  sub_256AE1E6C(v4, 250000);
  sub_256AE1F0C(MEMORY[0x263F8EE78]);
  a1[9] = v5;
  a1[10] = &unk_2705FB208;
}

uint64_t Catalog.Diffusion.Adapter.SkinToneEmoji.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.Diffusion.Adapter.SkinToneEmoji.hash(into:));
}

uint64_t sub_256AA2C78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.Diffusion.Adapter.SkinToneEmoji.hash(into:));
}

uint64_t (*Catalog.Diffusion.Model.VisualGenerationBase.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.Diffusion.Model.VisualGenerationBase.init()()
{
  sub_256AE1FC4();
  sub_256A52518(v1 + 16);
  *(void *)(v0 + 16) = sub_256AB81C4((uint64_t)&unk_2705FAF30);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  *(void *)(v0 + 24) = sub_256AE1DC0(inited, (uint64_t)"visual-generation-inference");
  *(void *)(v0 + 32) = 1500000;
  *(_WORD *)(v0 + 40) = 0;
  *(unsigned char *)(v0 + 42) = 1;
  sub_256AE1EB0(MEMORY[0x263F8EE78]);
  *(void *)(v0 + 72) = &unk_2705FAEB8;
  *(void *)(v0 + 80) = &unk_2705FAEE0;
}

uint64_t Catalog.Diffusion.Model.VisualGenerationBase.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.Diffusion.Model.VisualGenerationBase.hash(into:));
}

uint64_t sub_256AA2D84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.Diffusion.Model.VisualGenerationBase.hash(into:));
}

uint64_t (*Catalog.DisabledUseCaseList.All.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.DisabledUseCaseList.All.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000024;
  *(void *)(a1 + 8) = 0x8000000256B422E0;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = &unk_2705DEC48;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.DisabledUseCaseList.All.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.DisabledUseCaseList.All.hash(into:));
}

uint64_t sub_256AA2E44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.DisabledUseCaseList.All.hash(into:));
}

uint64_t (*Catalog.GenerativeFunctionOverrides.All.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.GenerativeFunctionOverrides.All.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD00000000000002FLL;
  *(void *)(a1 + 8) = 0x8000000256B42310;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.GenerativeFunctionOverrides.All.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.GenerativeFunctionOverrides.All.hash(into:));
}

uint64_t sub_256AA2EFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.GenerativeFunctionOverrides.All.hash(into:));
}

uint64_t (*Catalog.HandwritingSynthesizer.HandwritingSynthesis.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.HandwritingSynthesizer.HandwritingSynthesis.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000022;
  *(void *)(a1 + 8) = 0x8000000256B42E90;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 100;
  *(_WORD *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 42) = 0;
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = &unk_2705E1040;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.HandwritingSynthesizer.HandwritingSynthesis.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.HandwritingSynthesizer.HandwritingSynthesis.hash(into:));
}

uint64_t sub_256AA2FBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.HandwritingSynthesizer.HandwritingSynthesis.hash(into:));
}

uint64_t (*Catalog.ImageCuratedPrompts.All.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.ImageCuratedPrompts.All.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000032;
  *(void *)(a1 + 8) = 0x8000000256B42370;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.ImageCuratedPrompts.All.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.ImageCuratedPrompts.All.hash(into:));
}

uint64_t sub_256AA306C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.ImageCuratedPrompts.All.hash(into:));
}

uint64_t (*Catalog.ImageFilter.Conditioning.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.ImageFilter.Conditioning.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD00000000000002ELL;
  *(void *)(a1 + 8) = 0x8000000256B42A90;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.ImageFilter.Conditioning.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.ImageFilter.Conditioning.hash(into:));
}

uint64_t sub_256AA3124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.ImageFilter.Conditioning.hash(into:));
}

uint64_t (*Catalog.ImageFilter.Face2Word.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.ImageFilter.Face2Word.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD00000000000002BLL;
  *(void *)(a1 + 8) = 0x8000000256B42AF0;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.ImageFilter.Face2Word.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.ImageFilter.Face2Word.hash(into:));
}

uint64_t sub_256AA31DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.ImageFilter.Face2Word.hash(into:));
}

uint64_t (*Catalog.ImageFilter.HolisticallyNestedEdgeDetector.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.ImageFilter.HolisticallyNestedEdgeDetector.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD00000000000003DLL;
  *(void *)(a1 + 8) = 0x8000000256B42EC0;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.ImageFilter.HolisticallyNestedEdgeDetector.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.ImageFilter.HolisticallyNestedEdgeDetector.hash(into:));
}

uint64_t sub_256AA3294(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.ImageFilter.HolisticallyNestedEdgeDetector.hash(into:));
}

uint64_t Catalog.ImageMagicCleanUp.GenerativeEditsMagicCleanUp.id.getter()
{
  return sub_256A4A370();
}

uint64_t Catalog.ImageMagicCleanUp.GenerativeEditsMagicCleanUp.explicitRequestUsage.getter()
{
  return sub_256A4A370();
}

uint64_t Catalog.ImageMagicCleanUp.GenerativeEditsMagicCleanUp.executionContexts.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 40) = a1;
  return result;
}

uint64_t (*Catalog.ImageMagicCleanUp.GenerativeEditsMagicCleanUp.executionContexts.modify())()
{
  return nullsub_1;
}

uint64_t Catalog.ImageMagicCleanUp.GenerativeEditsMagicCleanUp.dependentResourceIDs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Catalog.ImageMagicCleanUp.GenerativeEditsMagicCleanUp.sideloaded.getter()
{
  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t Catalog.ImageMagicCleanUp.GenerativeEditsMagicCleanUp.assetBacked.getter()
{
  return *(unsigned __int8 *)(v0 + 81);
}

uint64_t Catalog.ImageMagicCleanUp.GenerativeEditsMagicCleanUp.tags.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Catalog.ImageMagicCleanUp.GenerativeEditsMagicCleanUp.platforms.getter()
{
  return swift_bridgeObjectRetain();
}

void Catalog.ImageMagicCleanUp.GenerativeEditsMagicCleanUp.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000028;
  *(void *)(a1 + 8) = 0x8000000256B410B0;
  *(void *)(a1 + 16) = 0xD00000000000001ELL;
  *(void *)(a1 + 24) = 0x8000000256B49200;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 32) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 40) = v1;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 55) = 0;
  *(void *)(a1 + 64) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 72) = &unk_2705DC800;
  *(_WORD *)(a1 + 80) = 256;
  sub_256AE26EC(a1);
}

uint64_t Catalog.ImageMagicCleanUp.GenerativeEditsMagicCleanUp.hashValue.getter()
{
  return sub_256AA84E4((void (*)(void *))Catalog.ImageMagicCleanUp.GenerativeEditsMagicCleanUp.hash(into:));
}

uint64_t sub_256AA3434@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Catalog.ImageMagicCleanUp.GenerativeEditsMagicCleanUp.id.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_256AA3464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA85C0(a1, a2, a3, (void (*)(void *))Catalog.ImageMagicCleanUp.GenerativeEditsMagicCleanUp.hash(into:));
}

uint64_t (*Catalog.ImageScaler.GenerativePlaygroundsUpscaler.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.ImageScaler.GenerativePlaygroundsUpscaler.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000028;
  *(void *)(a1 + 8) = 0x8000000256B42E60;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.ImageScaler.GenerativePlaygroundsUpscaler.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.ImageScaler.GenerativePlaygroundsUpscaler.hash(into:));
}

uint64_t sub_256AA3520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.ImageScaler.GenerativePlaygroundsUpscaler.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.ADMPeopleGrounding.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Model.AFMTextInstruct300MBase.init()()
{
  sub_256AE27F8();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2706082E8);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE1F64(v3, 0xD40u);
  Catalog.Tokenizer.AFMTextInstruct300MTokenizer.init()(v4);
  sub_256AE2414(MEMORY[0x263F8EE78]);
  v0[20] = &unk_270608320;
  v0[21] = &unk_270608348;
}

void Catalog.LLM.Adapter.ADMPeopleGrounding.init()()
{
  sub_256AE2108();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_270608398);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE2164(v3);
  sub_256AE1EFC((uint64_t)&unk_2706083D0);
  v0[31] = &unk_270608400;
  v0[32] = &unk_270608428;
}

uint64_t Catalog.LLM.Adapter.ADMPeopleGrounding.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.ADMPeopleGrounding.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.AFMTextInstruct300MBase.== infix(_:_:));
}

void static Catalog.LLM.Model.AFMTextInstruct300MBase.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA3AA4(a1, a2, (uint64_t (*)(uint64_t *, uint64_t *))static Catalog.Tokenizer.AFMTextInstruct300MTokenizer.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.ADMPeopleGrounding.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA372C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.ADMPeopleGrounding.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.ADMPromptRewriting.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Adapter.ADMPromptRewriting.init()()
{
  sub_256AE2108();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_270608478);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE2164(v3);
  sub_256AE1EFC((uint64_t)&unk_2706084B0);
  v0[31] = &unk_2706084E0;
  v0[32] = &unk_270608508;
}

uint64_t Catalog.LLM.Adapter.ADMPromptRewriting.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.ADMPromptRewriting.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.AFMTextInstruct300MBase.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.ADMPromptRewriting.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA3850()
{
  sub_256AE2608();
  v0(v2);
  return sub_256B3FF70();
}

uint64_t sub_256AA3890(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.ADMPromptRewriting.hash(into:));
}

uint64_t sub_256AA38A8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *))
{
  sub_256B3FF40();
  a4(v6);
  return sub_256B3FF70();
}

uint64_t (*Catalog.LLM.Adapter.AnswerSynthesis.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Model.AFMTextInstruct3BBase.init()()
{
  sub_256AE1FD4();
  sub_256A52518(v1 + 12);
  *(void *)(v0 + 16) = sub_256AB81C4((uint64_t)&unk_2705E83B0);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  *(void *)(v0 + 24) = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  *(void *)(v0 + 32) = 1490000;
  *(_WORD *)(v0 + 40) = 256;
  *(unsigned char *)(v0 + 42) = 1;
  Catalog.Tokenizer.AFMTextInstructEnglish49k.init()();
  sub_256AE2414(MEMORY[0x263F8EE78]);
  *(void *)(v0 + 160) = &unk_2705E8328;
  *(void *)(v0 + 168) = &unk_2705E8360;
}

void Catalog.LLM.Adapter.AnswerSynthesis.init()()
{
  sub_256AE24C4();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705EC968);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE1E44(v3);
  sub_256AE1EFC((uint64_t)&unk_2705EC8E8);
  v0[31] = v4;
  v0[32] = &unk_2705EC918;
}

uint64_t Catalog.LLM.Adapter.AnswerSynthesis.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.AnswerSynthesis.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.AFMTextInstruct3BBase.== infix(_:_:));
}

void static Catalog.LLM.Model.AFMTextInstruct3BBase.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA3AA4(a1, a2, (uint64_t (*)(uint64_t *, uint64_t *))static Catalog.Tokenizer.AFMTextInstructEnglish49k.== infix(_:_:));
}

void sub_256AA3AA4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t *, uint64_t *))
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v54 = *(void *)(a1 + 32);
  int v53 = *(unsigned __int8 *)(a1 + 40);
  int v52 = *(unsigned __int8 *)(a1 + 41);
  int v51 = *(unsigned __int8 *)(a1 + 42);
  uint64_t v45 = *(void *)(a1 + 72);
  uint64_t v46 = *(void *)(a1 + 48);
  uint64_t v44 = *(void *)(a1 + 80);
  char v42 = *(unsigned char *)(a1 + 89);
  char v43 = *(unsigned char *)(a1 + 88);
  long long v48 = *(_OWORD *)(a1 + 96);
  long long v49 = *(_OWORD *)(a1 + 56);
  char v40 = *(unsigned char *)(a1 + 112);
  char v41 = *(unsigned char *)(a1 + 90);
  char v39 = *(unsigned char *)(a1 + 113);
  long long v47 = *(_OWORD *)(a1 + 120);
  __int16 v29 = *(void **)(a1 + 136);
  int v27 = *(unsigned __int8 *)(a1 + 153);
  sub_256AE254C();
  uint64_t v9 = *(void *)(v7 + 16);
  uint64_t v8 = *(void *)(v7 + 24);
  uint64_t v10 = *(void *)(v7 + 32);
  int v11 = *(unsigned __int8 *)(v7 + 40);
  int v12 = *(unsigned __int8 *)(v7 + 41);
  long long v37 = *(_OWORD *)(v7 + 96);
  long long v38 = *(_OWORD *)(v7 + 56);
  long long v36 = *(_OWORD *)(v7 + 120);
  BOOL v15 = v13 == v14 && v5 == v6;
  int v16 = *(unsigned __int8 *)(v7 + 42);
  uint64_t v17 = *(void *)(v7 + 48);
  uint64_t v18 = *(void *)(v7 + 72);
  uint64_t v30 = *(void *)(v7 + 80);
  char v31 = *(unsigned char *)(v7 + 88);
  char v32 = *(unsigned char *)(v7 + 89);
  char v33 = *(unsigned char *)(v7 + 90);
  char v34 = *(unsigned char *)(v7 + 112);
  char v35 = *(unsigned char *)(v7 + 113);
  int v28 = *(void **)(v7 + 136);
  int v26 = *(unsigned __int8 *)(v7 + 153);
  uint64_t v24 = *(void *)(v7 + 160);
  if (!v15 && (sub_256B3FEA0() & 1) == 0) {
    goto LABEL_21;
  }
  if ((sub_256AA1A38(v3, v9) & 1) == 0) {
    goto LABEL_21;
  }
  if ((sub_256AA1D04(v4, v8) & 1) == 0) {
    goto LABEL_21;
  }
  if (v54 != v10) {
    goto LABEL_21;
  }
  if ((v53 ^ v11)) {
    goto LABEL_21;
  }
  if ((v52 ^ v12)) {
    goto LABEL_21;
  }
  if ((v51 ^ v16)) {
    goto LABEL_21;
  }
  uint64_t v66 = v46;
  long long v67 = v49;
  uint64_t v68 = v45;
  uint64_t v69 = v44;
  char v70 = v43;
  char v71 = v42;
  char v72 = v41;
  long long v73 = v48;
  char v74 = v40;
  char v75 = v39;
  long long v76 = v47;
  uint64_t v55 = v17;
  long long v56 = v38;
  uint64_t v57 = v18;
  uint64_t v58 = v30;
  char v59 = v31;
  char v60 = v32;
  char v61 = v33;
  long long v62 = v37;
  char v63 = v34;
  char v64 = v35;
  long long v65 = v36;
  if ((a3(&v66, &v55) & 1) == 0) {
    goto LABEL_21;
  }
  if ((sub_256A87844(v29, v28) & 1) != 0
    && (sub_256A87910(), (v19 & 1) != 0)
    && (sub_256AE2508(), (v20 & 1) == 0)
    && ((v27 ^ v26) & 1) == 0
    && (sub_256A87AE4(v25, v24) & 1) != 0)
  {
    sub_256A4A554();
    sub_256A87BC0(v21, v22);
  }
  else
  {
LABEL_21:
    sub_256A4A554();
  }
}

uint64_t Catalog.LLM.Adapter.AnswerSynthesis.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA3DB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.AnswerSynthesis.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.AnswerSynthesisServer.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Model.InstructServerBase.init()()
{
  sub_256AE20A4();
  sub_256A52518(v1 + 28);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705E7E70);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B570A0;
  *(void *)(inited + 32) = v1;
  *(void *)(inited + 40) = 0x8000000256B40B90;
  uint64_t v3 = sub_256AE1EC0(inited);
  sub_256AE2584(v3);
  sub_256AE2578(MEMORY[0x263F8EE78]);
  v0[20] = v4;
  v0[21] = &unk_2705E7E20;
}

void Catalog.LLM.Adapter.AnswerSynthesisServer.init()(void *a1@<X8>)
{
  sub_256AE2084();
  sub_256A52518(v3);
  a1[2] = sub_256AB81C4((uint64_t)&unk_2705EDF08);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B570A0;
  *(void *)(inited + 32) = v1;
  *(void *)(inited + 40) = 0x8000000256B40B90;
  uint64_t v5 = sub_256AE1EC0(inited);
  sub_256AE1E94(v5);
  sub_256AE1F1C((uint64_t)&unk_2705EDE88);
  a1[31] = v6;
  a1[32] = &unk_2705EDEB8;
}

uint64_t Catalog.LLM.Adapter.AnswerSynthesisServer.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.AnswerSynthesisServer.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.InstructServerBase.== infix(_:_:));
}

void static Catalog.LLM.Model.InstructServerBase.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA3AA4(a1, a2, (uint64_t (*)(uint64_t *, uint64_t *))static Catalog.Tokenizer.InstructServerTokenizer.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.AnswerSynthesisServer.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA3FA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.AnswerSynthesisServer.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.AutonamingMessages.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Adapter.AutonamingMessages.init()()
{
  sub_256AE20C8();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705ED098);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE1E44(v3);
  sub_256AE1EFC((uint64_t)&unk_2705ECFF0);
  v0[31] = &unk_2705ED020;
  v0[32] = &unk_2705ED048;
}

uint64_t Catalog.LLM.Adapter.AutonamingMessages.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.AutonamingMessages.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.AFMTextInstruct3BBase.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.AutonamingMessages.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA40CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.AutonamingMessages.hash(into:));
}

uint64_t Catalog.LLM.Adapter.BaseAdapter.id.getter()
{
  return sub_256A4A370();
}

uint64_t Catalog.LLM.Adapter.BaseAdapter.executionContexts.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t (*Catalog.LLM.Adapter.BaseAdapter.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Adapter.BaseAdapter.llmModel.getter(void *a1@<X8>)
{
  sub_256AE26F4(&v2);
  sub_256AE26F4(a1);
  sub_256A9F868();
}

uint64_t Catalog.LLM.Adapter.BaseAdapter.dependentResourceIDs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Catalog.LLM.Adapter.BaseAdapter.preconditions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Catalog.LLM.Adapter.BaseAdapter.sideloaded.getter()
{
  return *(unsigned __int8 *)(v0 + 240);
}

uint64_t Catalog.LLM.Adapter.BaseAdapter.assetBacked.getter()
{
  return *(unsigned __int8 *)(v0 + 241);
}

uint64_t Catalog.LLM.Adapter.BaseAdapter.platforms.getter()
{
  return swift_bridgeObjectRetain();
}

void Catalog.LLM.Adapter.BaseAdapter.init()(void *a1@<X8>)
{
  sub_256AE2084();
  sub_256A52518(v2);
  a1[2] = sub_256AB81C4((uint64_t)&unk_2705EBFA8);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v4 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE1E94(v4);
  sub_256AE1F1C((uint64_t)&unk_2705EBF28);
  a1[31] = v5;
  a1[32] = &unk_2705EBF58;
}

uint64_t Catalog.LLM.Adapter.BaseAdapter.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.BaseAdapter.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.InstructServerBase.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.BaseAdapter.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA42B4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Catalog.LLM.Adapter.BaseAdapter.id.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_256AA42E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.BaseAdapter.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.ConciseTone.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Adapter.ConciseTone.init()()
{
  sub_256AE20B4();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705EC330);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE1E44(v3);
  sub_256AE1EFC((uint64_t)&unk_2705EC288);
  v0[31] = &unk_2705EC2B8;
  v0[32] = &unk_2705EC2E0;
}

uint64_t Catalog.LLM.Adapter.ConciseTone.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.ConciseTone.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.AFMTextInstruct3BBase.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.ConciseTone.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA4404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.ConciseTone.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.FriendlyTone.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Adapter.FriendlyTone.init()()
{
  sub_256AE24B0();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705EC410);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE1E44(v3);
  sub_256AE1EFC((uint64_t)&unk_2705EC368);
  v0[31] = &unk_2705EC398;
  v0[32] = &unk_2705EC3C0;
}

uint64_t Catalog.LLM.Adapter.FriendlyTone.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.FriendlyTone.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.AFMTextInstruct3BBase.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.FriendlyTone.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA4528(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.FriendlyTone.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.MagicRewrite.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Adapter.MagicRewrite.init()()
{
  sub_256AE24B0();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705EC4F0);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE1E44(v3);
  sub_256AE1EFC((uint64_t)&unk_2705EC448);
  v0[31] = &unk_2705EC478;
  v0[32] = &unk_2705EC4A0;
}

uint64_t Catalog.LLM.Adapter.MagicRewrite.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.MagicRewrite.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.AFMTextInstruct3BBase.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.MagicRewrite.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA464C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.MagicRewrite.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.MailReply.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Adapter.MailReply.init()()
{
  sub_256AE27D0();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705F0228);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE1E44(v3);
  sub_256AE1EFC((uint64_t)&unk_2705F01A8);
  v0[31] = &unk_270608558;
  v0[32] = &unk_2705F01D8;
}

uint64_t Catalog.LLM.Adapter.MailReply.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.MailReply.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.AFMTextInstruct3BBase.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.MailReply.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA4770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.MailReply.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.MessagesReply.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Adapter.MessagesReply.init()()
{
  sub_256AE24D8();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705EC5D0);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE1E44(v3);
  sub_256AE1EFC((uint64_t)&unk_2705EC528);
  v0[31] = &unk_2705EC558;
  v0[32] = &unk_2705EC580;
}

uint64_t Catalog.LLM.Adapter.MessagesReply.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.MessagesReply.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.AFMTextInstruct3BBase.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.MessagesReply.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA4894(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.MessagesReply.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.OpenEndedSchema.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Adapter.OpenEndedSchema.init()()
{
  sub_256AE2438();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_270608580);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE1E94(v3);
  sub_256AE1F1C((uint64_t)&unk_2706085B8);
  v0[31] = v4;
  v0[32] = &unk_2706085E8;
}

uint64_t Catalog.LLM.Adapter.OpenEndedSchema.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.OpenEndedSchema.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.InstructServerBase.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.OpenEndedSchema.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA49B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.OpenEndedSchema.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.OpenEndedTone.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Adapter.OpenEndedTone.init()()
{
  sub_256AE244C();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_270608638);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE1E94(v3);
  sub_256AE1F1C((uint64_t)&unk_270608670);
  v0[31] = v4;
  v0[32] = &unk_2706086A0;
}

uint64_t Catalog.LLM.Adapter.OpenEndedTone.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.OpenEndedTone.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.InstructServerBase.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.OpenEndedTone.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA4ACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.OpenEndedTone.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.OpenEndedToneQueryResponse.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Adapter.OpenEndedToneQueryResponse.init()()
{
  sub_256AE2474();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2706086F0);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE1E94(v3);
  sub_256AE1F1C((uint64_t)&unk_270608728);
  v0[31] = v4;
  v0[32] = &unk_270608758;
}

uint64_t Catalog.LLM.Adapter.OpenEndedToneQueryResponse.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.OpenEndedToneQueryResponse.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.InstructServerBase.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.OpenEndedToneQueryResponse.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA4BE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.OpenEndedToneQueryResponse.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.PQAVerification.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Adapter.PQAVerification.init()(void *a1@<X8>)
{
  sub_256AE2524();
  sub_256A52518(v2);
  a1[2] = sub_256AB81C4((uint64_t)&unk_2706087A8);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v4 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE2164(v4);
  sub_256AE1EFC((uint64_t)&unk_2706087E0);
  a1[31] = v5;
  a1[32] = &unk_270608810;
}

uint64_t Catalog.LLM.Adapter.PQAVerification.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.PQAVerification.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.AFMTextInstruct300MBase.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.PQAVerification.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA4D0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.PQAVerification.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.PhotosMemoriesCreationAssetCuration.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Model.PhotosMemoriesCreationBase.init()(void *a1@<X8>)
{
  sub_256AE2084();
  sub_256A52518(v2);
  a1[2] = sub_256AB81C4((uint64_t)&unk_2705E85F8);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v4 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE1F28(v4);
  Catalog.Tokenizer.AFMTextInstructEnglish49k.init()();
  sub_256AE2578(MEMORY[0x263F8EE78]);
  a1[20] = v5;
  a1[21] = &unk_2705E85A8;
}

void Catalog.LLM.Adapter.PhotosMemoriesCreationAssetCuration.init()()
{
  sub_256AE2474();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705EF690);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE20DC(v3);
  sub_256AE1F1C((uint64_t)&unk_2705EF610);
  v0[31] = v4;
  v0[32] = &unk_2705EF640;
}

uint64_t Catalog.LLM.Adapter.PhotosMemoriesCreationAssetCuration.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.PhotosMemoriesCreationAssetCuration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.PhotosMemoriesCreationBase.== infix(_:_:));
}

void static Catalog.LLM.Model.PhotosMemoriesCreationBase.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA3AA4(a1, a2, (uint64_t (*)(uint64_t *, uint64_t *))static Catalog.Tokenizer.AFMTextInstructEnglish49k.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.PhotosMemoriesCreationAssetCuration.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA4EE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.PhotosMemoriesCreationAssetCuration.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.PhotosMemoriesCreationAssetCurationV2.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Adapter.PhotosMemoriesCreationAssetCurationV2.init()()
{
  sub_256AE2794();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705EFC00);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE20DC(v3);
  sub_256AE1F1C((uint64_t)&unk_2705EFB80);
  v0[31] = v4;
  v0[32] = &unk_2705EFBB0;
}

uint64_t Catalog.LLM.Adapter.PhotosMemoriesCreationAssetCurationV2.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.PhotosMemoriesCreationAssetCurationV2.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.PhotosMemoriesCreationBase.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.PhotosMemoriesCreationAssetCurationV2.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA5000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.PhotosMemoriesCreationAssetCurationV2.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.PhotosMemoriesCreationGlobalTraits.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Adapter.PhotosMemoriesCreationGlobalTraits.init()()
{
  sub_256AE20A4();
  sub_256A52518(v1 + 53);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705EF5D8);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE20DC(v3);
  sub_256AE1F1C((uint64_t)&unk_2705EF558);
  v0[31] = v4;
  v0[32] = &unk_2705EF588;
}

uint64_t Catalog.LLM.Adapter.PhotosMemoriesCreationGlobalTraits.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.PhotosMemoriesCreationGlobalTraits.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.PhotosMemoriesCreationBase.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.PhotosMemoriesCreationGlobalTraits.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA5120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.PhotosMemoriesCreationGlobalTraits.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.PhotosMemoriesCreationGlobalTraitsV2.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Adapter.PhotosMemoriesCreationGlobalTraitsV2.init()()
{
  sub_256AE2780();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705EF9F8);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE20DC(v3);
  sub_256AE1F1C((uint64_t)&unk_2705EF978);
  v0[31] = v4;
  v0[32] = &unk_2705EF9A8;
}

uint64_t Catalog.LLM.Adapter.PhotosMemoriesCreationGlobalTraitsV2.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.PhotosMemoriesCreationGlobalTraitsV2.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.PhotosMemoriesCreationBase.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.PhotosMemoriesCreationGlobalTraitsV2.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA523C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.PhotosMemoriesCreationGlobalTraitsV2.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.PhotosMemoriesCreationQueryUnderstanding.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Adapter.PhotosMemoriesCreationQueryUnderstanding.init()()
{
  sub_256AE2744();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705EFD60);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE20DC(v3);
  sub_256AE1F1C((uint64_t)&unk_2705EFCE0);
  v0[31] = v4;
  v0[32] = &unk_2705EFD10;
}

uint64_t Catalog.LLM.Adapter.PhotosMemoriesCreationQueryUnderstanding.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.PhotosMemoriesCreationQueryUnderstanding.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.PhotosMemoriesCreationBase.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.PhotosMemoriesCreationQueryUnderstanding.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA5358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.PhotosMemoriesCreationQueryUnderstanding.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.PhotosMemoriesCreationQueryUnderstandingV2.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Adapter.PhotosMemoriesCreationQueryUnderstandingV2.init()()
{
  sub_256AE2460();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705EFEC0);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE20DC(v3);
  sub_256AE1F1C((uint64_t)&unk_2705EFE40);
  v0[31] = v4;
  v0[32] = &unk_2705EFE70;
}

uint64_t Catalog.LLM.Adapter.PhotosMemoriesCreationQueryUnderstandingV2.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.PhotosMemoriesCreationQueryUnderstandingV2.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.PhotosMemoriesCreationBase.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.PhotosMemoriesCreationQueryUnderstandingV2.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA5474(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.PhotosMemoriesCreationQueryUnderstandingV2.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.PhotosMemoriesCreationQueryUnderstandingV3.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Adapter.PhotosMemoriesCreationQueryUnderstandingV3.init()()
{
  sub_256AE2460();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_270608860);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE20DC(v3);
  sub_256AE1F1C((uint64_t)&unk_270608898);
  v0[31] = v4;
  v0[32] = &unk_2706088C8;
}

uint64_t Catalog.LLM.Adapter.PhotosMemoriesCreationQueryUnderstandingV3.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.PhotosMemoriesCreationQueryUnderstandingV3.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.PhotosMemoriesCreationBase.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.PhotosMemoriesCreationQueryUnderstandingV3.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA5590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.PhotosMemoriesCreationQueryUnderstandingV3.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.PhotosMemoriesCreationStoryteller.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Adapter.PhotosMemoriesCreationStoryteller.init()()
{
  sub_256AE20A4();
  sub_256A52518(v1 + 51);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705EF510);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE20DC(v3);
  sub_256AE1F1C((uint64_t)&unk_2705EF490);
  v0[31] = v4;
  v0[32] = &unk_2705EF4C0;
}

uint64_t Catalog.LLM.Adapter.PhotosMemoriesCreationStoryteller.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.PhotosMemoriesCreationStoryteller.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.PhotosMemoriesCreationBase.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.PhotosMemoriesCreationStoryteller.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA56B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.PhotosMemoriesCreationStoryteller.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.PhotosMemoriesCreationStorytellerV2.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Adapter.PhotosMemoriesCreationStorytellerV2.init()()
{
  sub_256AE2474();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705EF7F0);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE20DC(v3);
  sub_256AE1F1C((uint64_t)&unk_2705EF770);
  v0[31] = v4;
  v0[32] = &unk_2705EF7A0;
}

uint64_t Catalog.LLM.Adapter.PhotosMemoriesCreationStorytellerV2.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.PhotosMemoriesCreationStorytellerV2.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.PhotosMemoriesCreationBase.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.PhotosMemoriesCreationStorytellerV2.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA57CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.PhotosMemoriesCreationStorytellerV2.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.Planner.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Adapter.Planner.init()()
{
  sub_256AE20A4();
  sub_256A52518(v1 + 31);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705F00C8);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE1E94(v3);
  sub_256AE1F1C((uint64_t)&unk_2705F0048);
  v0[31] = v4;
  v0[32] = &unk_2705F0078;
}

uint64_t Catalog.LLM.Adapter.Planner.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.Planner.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.InstructServerBase.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.Planner.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA58EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.Planner.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.PlannerV2.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Adapter.PlannerV2.init()(void *a1@<X8>)
{
  sub_256A52518(0xD000000000000033);
  a1[2] = sub_256AB81C4((uint64_t)&unk_2705F0388);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  *(void *)(inited + 32) = 2019650145;
  *(void *)(inited + 40) = 0xE400000000000000;
  uint64_t v3 = sub_256AE1DEC(inited);
  sub_256AE1E94(v3);
  sub_256AE1F1C((uint64_t)&unk_2705F0308);
  a1[31] = v4;
  a1[32] = &unk_2705F0338;
}

uint64_t Catalog.LLM.Adapter.PlannerV2.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.PlannerV2.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.InstructServerBase.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.PlannerV2.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA5A18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.PlannerV2.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.PlannerV3.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Adapter.PlannerV3.init()(void *a1@<X8>)
{
  sub_256A52518(0xD000000000000033);
  a1[2] = sub_256AB81C4((uint64_t)&unk_2705F0590);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  *(void *)(inited + 32) = 2019650145;
  *(void *)(inited + 40) = 0xE400000000000000;
  uint64_t v3 = sub_256AE1DEC(inited);
  sub_256AE1E94(v3);
  sub_256AE1F1C((uint64_t)&unk_2705F0510);
  a1[31] = v4;
  a1[32] = &unk_2705F0540;
}

uint64_t Catalog.LLM.Adapter.PlannerV3.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.PlannerV3.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.InstructServerBase.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.PlannerV3.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA5B44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.PlannerV3.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.ProfessionalTone.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Adapter.ProfessionalTone.init()()
{
  sub_256AE27E4();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705ECBA8);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE1E44(v3);
  sub_256AE1EFC((uint64_t)&unk_2705ECB00);
  v0[31] = &unk_2705ECB30;
  v0[32] = &unk_2705ECB58;
}

uint64_t Catalog.LLM.Adapter.ProfessionalTone.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.ProfessionalTone.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.AFMTextInstruct3BBase.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.ProfessionalTone.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA5C68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.ProfessionalTone.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.ProofreadingReview.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Adapter.ProofreadingReview.init()()
{
  sub_256AE20C8();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705ED178);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE1E44(v3);
  sub_256AE1EFC((uint64_t)&unk_2705ED0D0);
  v0[31] = &unk_2705ED100;
  v0[32] = &unk_2705ED128;
}

uint64_t Catalog.LLM.Adapter.ProofreadingReview.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.ProofreadingReview.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.AFMTextInstruct3BBase.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.ProofreadingReview.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA5D8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.ProofreadingReview.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.ResponseGeneration.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Adapter.ResponseGeneration.init()(void *a1@<X8>)
{
  sub_256A52518(0xD00000000000003CLL);
  a1[2] = sub_256AB81C4((uint64_t)&unk_2705ED2D8);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  *(void *)(inited + 32) = 2019650145;
  *(void *)(inited + 40) = 0xE400000000000000;
  uint64_t v3 = sub_256AE1DEC(inited);
  sub_256AE1E94(v3);
  sub_256AE1F1C((uint64_t)&unk_2705ED258);
  a1[31] = v4;
  a1[32] = &unk_2705ED288;
}

uint64_t Catalog.LLM.Adapter.ResponseGeneration.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.ResponseGeneration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.InstructServerBase.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.ResponseGeneration.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA5EB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.ResponseGeneration.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.ResponseGenerationV2.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Adapter.ResponseGenerationV2.init()(void *a1@<X8>)
{
  sub_256AE2084();
  sub_256A52518(v2);
  a1[2] = sub_256AB81C4((uint64_t)&unk_2705ED8F0);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v4 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE1E94(v4);
  sub_256AE1F1C((uint64_t)&unk_2705ED870);
  a1[31] = v5;
  a1[32] = &unk_2705ED8A0;
}

uint64_t Catalog.LLM.Adapter.ResponseGenerationV2.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.ResponseGenerationV2.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.InstructServerBase.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.ResponseGenerationV2.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA5FDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.ResponseGenerationV2.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.ResponseGenerationV3.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Adapter.ResponseGenerationV3.init()(void *a1@<X8>)
{
  sub_256A52518(0xD00000000000003FLL);
  a1[2] = sub_256AB81C4((uint64_t)&unk_2705EDAF8);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  *(void *)(inited + 32) = 2019650145;
  *(void *)(inited + 40) = 0xE400000000000000;
  uint64_t v3 = sub_256AE1DEC(inited);
  sub_256AE1E94(v3);
  sub_256AE1F1C((uint64_t)&unk_2705EDA78);
  a1[31] = v4;
  a1[32] = &unk_2705EDAA8;
}

uint64_t Catalog.LLM.Adapter.ResponseGenerationV3.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.ResponseGenerationV3.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.InstructServerBase.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.ResponseGenerationV3.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA6108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.ResponseGenerationV3.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.Safety.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Adapter.Safety.init()()
{
  sub_256AE1FD4();
  sub_256A52518(v1 + 16);
  v0[2] = sub_256AB81C4((uint64_t)&unk_270608918);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE2164(v3);
  sub_256AE1EFC((uint64_t)&unk_270608950);
  v0[31] = &unk_270608980;
  v0[32] = &unk_2706089A8;
}

uint64_t Catalog.LLM.Adapter.Safety.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.Safety.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.AFMTextInstruct300MBase.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.Safety.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA6230(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.Safety.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.SafetyGuardrail.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Adapter.SafetyGuardrail.init()()
{
  sub_256AE24C4();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705ECAC8);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE1E44(v3);
  sub_256AE1EFC((uint64_t)&unk_2705ECA48);
  v0[31] = v4;
  v0[32] = &unk_2705ECA78;
}

uint64_t Catalog.LLM.Adapter.SafetyGuardrail.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.SafetyGuardrail.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.AFMTextInstruct3BBase.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.SafetyGuardrail.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA634C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.SafetyGuardrail.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.SearchQueryUnderstandingOnDevice.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Adapter.SearchQueryUnderstandingOnDevice.init()()
{
  sub_256AE1FD4();
  sub_256A52518(v1 + 34);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705EF3B0);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE1E44(v3);
  sub_256AE1EFC((uint64_t)&unk_2705EF330);
  v0[31] = v4;
  v0[32] = &unk_2705EF360;
}

uint64_t Catalog.LLM.Adapter.SearchQueryUnderstandingOnDevice.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.SearchQueryUnderstandingOnDevice.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.AFMTextInstruct3BBase.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.SearchQueryUnderstandingOnDevice.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA646C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.SearchQueryUnderstandingOnDevice.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.SearchQueryUnderstandingServer.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Adapter.SearchQueryUnderstandingServer.init()()
{
  sub_256AE276C();
  sub_256A52518(v2);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705EEF88);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B570A0;
  *(void *)(inited + 32) = v1;
  *(void *)(inited + 40) = 0x8000000256B40B90;
  uint64_t v4 = sub_256AE1EC0(inited);
  sub_256AE1E94(v4);
  sub_256AE1F1C((uint64_t)&unk_2705EEF08);
  v0[31] = v5;
  v0[32] = &unk_2705EEF38;
}

uint64_t Catalog.LLM.Adapter.SearchQueryUnderstandingServer.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.SearchQueryUnderstandingServer.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.InstructServerBase.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.SearchQueryUnderstandingServer.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA6594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.SearchQueryUnderstandingServer.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.ServerBulletsTransform.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Adapter.ServerBulletsTransform.init()()
{
  sub_256AE2438();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705EE560);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE1E94(v3);
  sub_256AE1F1C((uint64_t)&unk_2705EE4E0);
  v0[31] = v4;
  v0[32] = &unk_2705EE510;
}

uint64_t Catalog.LLM.Adapter.ServerBulletsTransform.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.ServerBulletsTransform.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.InstructServerBase.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.ServerBulletsTransform.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA66B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.ServerBulletsTransform.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.ServerConciseTone.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Adapter.ServerConciseTone.init()(void *a1@<X8>)
{
  sub_256AE2084();
  sub_256A52518(v2);
  a1[2] = sub_256AB81C4((uint64_t)&unk_2705ECD08);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v4 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE1E94(v4);
  sub_256AE1F1C((uint64_t)&unk_2705ECC88);
  a1[31] = v5;
  a1[32] = &unk_2705ECCB8;
}

uint64_t Catalog.LLM.Adapter.ServerConciseTone.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.ServerConciseTone.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.InstructServerBase.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.ServerConciseTone.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA67D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.ServerConciseTone.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.ServerFriendlyTone.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Adapter.ServerFriendlyTone.init()()
{
  sub_256AE22AC();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705ED4E0);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE1E94(v3);
  sub_256AE1F1C((uint64_t)&unk_2705ED460);
  v0[31] = v4;
  v0[32] = &unk_2705ED490;
}

uint64_t Catalog.LLM.Adapter.ServerFriendlyTone.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.ServerFriendlyTone.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.InstructServerBase.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.ServerFriendlyTone.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA68F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.ServerFriendlyTone.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.ServerMagicRewrite.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Adapter.ServerMagicRewrite.init()()
{
  sub_256AE22AC();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705ED6E8);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE1E94(v3);
  sub_256AE1F1C((uint64_t)&unk_2705ED668);
  v0[31] = v4;
  v0[32] = &unk_2705ED698;
}

uint64_t Catalog.LLM.Adapter.ServerMagicRewrite.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.ServerMagicRewrite.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.InstructServerBase.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.ServerMagicRewrite.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA6A0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.ServerMagicRewrite.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.ServerMailReplyLongFormBasic.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Adapter.ServerMailReplyLongFormBasic.init()()
{
  sub_256AE276C();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705EED80);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE1E94(v3);
  sub_256AE1F1C((uint64_t)&unk_2705EED00);
  v0[31] = v4;
  v0[32] = &unk_2705EED30;
}

uint64_t Catalog.LLM.Adapter.ServerMailReplyLongFormBasic.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.ServerMailReplyLongFormBasic.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.InstructServerBase.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.ServerMailReplyLongFormBasic.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA6B28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.ServerMailReplyLongFormBasic.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.ServerMailReplyLongFormRewrite.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Adapter.ServerMailReplyLongFormRewrite.init()()
{
  sub_256AE27A8();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705EF1A8);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE1E94(v3);
  sub_256AE1F1C((uint64_t)&unk_2705EF128);
  v0[31] = v4;
  v0[32] = &unk_2705EF158;
}

uint64_t Catalog.LLM.Adapter.ServerMailReplyLongFormRewrite.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.ServerMailReplyLongFormRewrite.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.InstructServerBase.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.ServerMailReplyLongFormRewrite.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA6C44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.ServerMailReplyLongFormRewrite.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.ServerMailReplyQA.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Adapter.ServerMailReplyQA.init()()
{
  sub_256AE22AC();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705ECF10);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE1E94(v3);
  sub_256AE1F1C((uint64_t)&unk_2705ECE90);
  v0[31] = v4;
  v0[32] = &unk_2705ECEC0;
}

uint64_t Catalog.LLM.Adapter.ServerMailReplyQA.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.ServerMailReplyQA.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.InstructServerBase.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.ServerMailReplyQA.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA6D60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.ServerMailReplyQA.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.ServerProfessionalTone.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Adapter.ServerProfessionalTone.init()()
{
  sub_256AE2438();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705EE768);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE1E94(v3);
  sub_256AE1F1C((uint64_t)&unk_2705EE6E8);
  v0[31] = v4;
  v0[32] = &unk_2705EE718;
}

uint64_t Catalog.LLM.Adapter.ServerProfessionalTone.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.ServerProfessionalTone.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.InstructServerBase.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.ServerProfessionalTone.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA6E7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.ServerProfessionalTone.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.ServerProofreadingReview.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Adapter.ServerProofreadingReview.init()()
{
  sub_256AE21DC();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705EE970);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE1E94(v3);
  sub_256AE1F1C((uint64_t)&unk_2705EE8F0);
  v0[31] = v4;
  v0[32] = &unk_2705EE920;
}

uint64_t Catalog.LLM.Adapter.ServerProofreadingReview.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.ServerProofreadingReview.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.InstructServerBase.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.ServerProofreadingReview.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA6F98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.ServerProofreadingReview.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.ServerTablesTransform.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Adapter.ServerTablesTransform.init()(void *a1@<X8>)
{
  sub_256AE2084();
  sub_256A52518(v2);
  a1[2] = sub_256AB81C4((uint64_t)&unk_2705EE128);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v4 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE1E94(v4);
  sub_256AE1F1C((uint64_t)&unk_2705EE0A8);
  a1[31] = v5;
  a1[32] = &unk_2705EE0D8;
}

uint64_t Catalog.LLM.Adapter.ServerTablesTransform.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.ServerTablesTransform.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.InstructServerBase.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.ServerTablesTransform.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA70BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.ServerTablesTransform.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.ServerTakeawaysTransform.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Adapter.ServerTakeawaysTransform.init()()
{
  sub_256AE21DC();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705EEB78);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE1E94(v3);
  sub_256AE1F1C((uint64_t)&unk_2705EEAF8);
  v0[31] = v4;
  v0[32] = &unk_2705EEB28;
}

uint64_t Catalog.LLM.Adapter.ServerTakeawaysTransform.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.ServerTakeawaysTransform.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.InstructServerBase.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.ServerTakeawaysTransform.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA71D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.ServerTakeawaysTransform.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.ServerTextSummarizer.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Adapter.ServerTextSummarizer.init()()
{
  sub_256AE244C();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705EDD00);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE1E94(v3);
  sub_256AE1F1C((uint64_t)&unk_2705EDC80);
  v0[31] = v4;
  v0[32] = &unk_2705EDCB0;
}

uint64_t Catalog.LLM.Adapter.ServerTextSummarizer.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.ServerTextSummarizer.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.InstructServerBase.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.ServerTextSummarizer.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA72F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.ServerTextSummarizer.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.Summarization.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Adapter.Summarization.init()()
{
  sub_256AE24B0();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705EC760);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE1E44(v3);
  sub_256AE1EFC((uint64_t)&unk_2705EC6B0);
  v0[31] = &unk_2705EC6E0;
  v0[32] = &unk_2705EC710;
}

uint64_t Catalog.LLM.Adapter.Summarization.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.Summarization.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.AFMTextInstruct3BBase.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.Summarization.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA7418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.Summarization.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.TextEventExtraction.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Adapter.TextEventExtraction.init()()
{
  sub_256AE1FD4();
  sub_256A52518(v1 + 29);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2706089F8);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE1E44(v3);
  sub_256AE1EFC((uint64_t)&unk_270608A30);
  v0[31] = v4;
  v0[32] = &unk_270608A60;
}

uint64_t Catalog.LLM.Adapter.TextEventExtraction.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.TextEventExtraction.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.AFMTextInstruct3BBase.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.TextEventExtraction.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA7538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.TextEventExtraction.hash(into:));
}

uint64_t (*Catalog.LLM.Adapter.TextPersonExtraction.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Adapter.TextPersonExtraction.init()()
{
  sub_256AE2108();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_270608AB0);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE1E44(v3);
  sub_256AE1EFC((uint64_t)&unk_270608AE8);
  v0[31] = v4;
  v0[32] = &unk_270608B18;
}

uint64_t Catalog.LLM.Adapter.TextPersonExtraction.hash(into:)()
{
  return sub_256AA7E28();
}

void static Catalog.LLM.Adapter.TextPersonExtraction.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.AFMTextInstruct3BBase.== infix(_:_:));
}

uint64_t Catalog.LLM.Adapter.TextPersonExtraction.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA7654(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.TextPersonExtraction.hash(into:));
}

uint64_t Catalog.LLM.Adapter.UIPreviews.id.getter()
{
  return sub_256A4A370();
}

uint64_t Catalog.LLM.Adapter.UIPreviews.explicitRequestUsage.getter()
{
  return sub_256A4A370();
}

uint64_t Catalog.LLM.Adapter.UIPreviews.executionContexts.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 40) = a1;
  return result;
}

uint64_t (*Catalog.LLM.Adapter.UIPreviews.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Adapter.UIPreviews.cost.getter(uint64_t a1@<X8>)
{
}

void Catalog.LLM.Adapter.UIPreviews.llmModel.getter(void *a1@<X8>)
{
  sub_256AE26F4(&v2);
  sub_256AE26F4(a1);
  sub_256A9F868();
}

uint64_t Catalog.LLM.Adapter.UIPreviews.dependentResourceIDs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Catalog.LLM.Adapter.UIPreviews.sideloaded.getter()
{
  return *(unsigned __int8 *)(v0 + 256);
}

uint64_t Catalog.LLM.Adapter.UIPreviews.assetBacked.getter()
{
  return *(unsigned __int8 *)(v0 + 257);
}

uint64_t Catalog.LLM.Adapter.UIPreviews.tags.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Catalog.LLM.Adapter.UIPreviews.platforms.getter()
{
  return swift_bridgeObjectRetain();
}

void Catalog.LLM.Adapter.UIPreviews.init()()
{
  sub_256AE1FD4();
  sub_256AE221C(v1 + 19);
  *(void *)(v0 + 32) = sub_256AB81C4((uint64_t)&unk_2705EC1A8);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  *(void *)(v0 + 40) = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  *(void *)(v0 + 48) = 100000;
  *(_WORD *)(v0 + 56) = 0;
  *(unsigned char *)(v0 + 58) = 0;
  Catalog.LLM.Model.AFMTextInstruct3BBase.init()();
  uint64_t v3 = MEMORY[0x263F8EE78];
  *(void *)(v0 + 240) = &unk_2705EC140;
  *(void *)(v0 + 248) = v3;
  *(_WORD *)(v0 + 256) = 256;
  *(void *)(v0 + 264) = v3;
  *(void *)(v0 + 272) = &unk_2705EC170;
}

uint64_t Catalog.LLM.Adapter.UIPreviews.hash(into:)(uint64_t a1)
{
  uint64_t v3 = v1[4];
  uint64_t v4 = v1[5];
  uint64_t v6 = v1[33];
  swift_bridgeObjectRetain();
  sub_256B3F740();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_256B3F740();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_256AB8644(a1, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_256AB83F8(a1, v4);
  swift_bridgeObjectRelease();
  sub_256B3FF50();
  sub_256B3FF60();
  sub_256B3FF60();
  sub_256B3FF60();
  Catalog.LLM.Model.PQAVerificationBase.hash(into:)(a1);
  swift_bridgeObjectRetain();
  sub_256AE270C();
  sub_256A97D1C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_256AE2718();
  swift_bridgeObjectRelease();
  sub_256B3FF60();
  sub_256B3FF60();
  swift_bridgeObjectRetain();
  sub_256A97AA8(a1, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_256A97970();

  return swift_bridgeObjectRelease();
}

uint64_t static Catalog.LLM.Adapter.UIPreviews.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v32 = *(void *)(a1 + 48);
  uint64_t v33 = *(void *)(a1 + 40);
  int v31 = *(unsigned __int8 *)(a1 + 56);
  int v29 = *(unsigned __int8 *)(a1 + 57);
  int v27 = *(unsigned __int8 *)(a1 + 58);
  uint64_t v25 = *(void **)(a1 + 240);
  int v23 = *(unsigned __int8 *)(a1 + 256);
  uint64_t v21 = *(void *)(a1 + 264);
  uint64_t v19 = *(void *)(a1 + 272);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v10 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a2 + 48);
  int v30 = *(unsigned __int8 *)(a2 + 56);
  int v28 = *(unsigned __int8 *)(a2 + 57);
  int v26 = *(unsigned __int8 *)(a2 + 58);
  uint64_t v24 = *(void **)(a2 + 240);
  BOOL v12 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  int v22 = *(unsigned __int8 *)(a2 + 256);
  uint64_t v20 = *(void *)(a2 + 264);
  uint64_t v18 = *(void *)(a2 + 272);
  if (!v12 && (sub_256B3FEA0() & 1) == 0) {
    return 0;
  }
  BOOL v13 = v4 == v7 && v6 == v8;
  if (!v13 && (sub_256B3FEA0() & 1) == 0) {
    return 0;
  }
  if ((sub_256AA1A38(v5, v10) & 1) == 0) {
    return 0;
  }
  if ((sub_256AA1D04(v33, v9) & 1) == 0) {
    return 0;
  }
  if (v32 != v11) {
    return 0;
  }
  if ((v31 ^ v30)) {
    return 0;
  }
  if ((v29 ^ v28)) {
    return 0;
  }
  if ((v27 ^ v26)) {
    return 0;
  }
  static Catalog.LLM.Model.PQAVerificationBase.== infix(_:_:)(a1 + 64, a2 + 64);
  if ((v14 & 1) == 0) {
    return 0;
  }
  if ((sub_256A87844(v25, v24) & 1) == 0) {
    return 0;
  }
  sub_256A87910();
  if ((v15 & 1) == 0) {
    return 0;
  }
  if ((v23 ^ v22)) {
    return 0;
  }
  sub_256AE2508();
  if ((v16 & 1) != 0 || (sub_256A87AE4(v21, v20) & 1) == 0) {
    return 0;
  }

  return sub_256A87BC0(v19, v18);
}

uint64_t Catalog.LLM.Adapter.UIPreviews.hashValue.getter()
{
  sub_256B3FF40();
  Catalog.LLM.Adapter.UIPreviews.hash(into:)((uint64_t)v1);
  return sub_256B3FF70();
}

uint64_t (*sub_256AA7C8C())()
{
  return nullsub_1;
}

uint64_t sub_256AA7CCC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Catalog.LLM.Adapter.UIPreviews.id.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_256AA7CFC()
{
  sub_256B3FF40();
  Catalog.LLM.Adapter.UIPreviews.hash(into:)((uint64_t)v1);
  return sub_256B3FF70();
}

uint64_t (*Catalog.LLM.Adapter.UrgencyClassification.executionContexts.modify())()
{
  return nullsub_1;
}

void _s12ModelCatalog0B0O9DiffusionO7AdapterO9AnimationV4costAA11CostProfileVvg_0(uint64_t a1@<X8>)
{
}

void Catalog.LLM.Adapter.UrgencyClassification.init()()
{
  sub_256AE2108();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705EE358);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE1E44(v3);
  sub_256AE1EFC((uint64_t)&unk_2705EE2B0);
  v0[31] = &unk_2705EE2E0;
  v0[32] = &unk_2705EE308;
}

uint64_t Catalog.LLM.Adapter.UrgencyClassification.hash(into:)()
{
  return sub_256AA7E28();
}

uint64_t sub_256AA7E28()
{
  sub_256A7A910();
  uint64_t v2 = v1;
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  sub_256AE25BC();
  uint64_t v9 = v5;
  uint64_t v6 = v0[31];
  swift_bridgeObjectRetain();
  sub_256AE270C();
  sub_256B3F740();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_256AB8644(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_256AB83F8(v2, v4);
  swift_bridgeObjectRelease();
  sub_256B3FF50();
  sub_256B3FF60();
  sub_256B3FF60();
  sub_256B3FF60();
  v9(v2);
  swift_bridgeObjectRetain();
  sub_256A97D1C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_256AE2718();
  swift_bridgeObjectRelease();
  sub_256B3FF60();
  sub_256B3FF60();
  swift_bridgeObjectRetain();
  sub_256A97AA8(v2, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_256A97970();
  sub_256A7A8F4();
  return swift_bridgeObjectRelease();
}

void static Catalog.LLM.Adapter.UrgencyClassification.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA7FB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))static Catalog.LLM.Model.AFMTextInstruct3BBase.== infix(_:_:));
}

void sub_256AA7FB0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  int v28 = *(unsigned __int8 *)(a1 + 41);
  int v29 = *(unsigned __int8 *)(a1 + 40);
  int v27 = *(unsigned __int8 *)(a1 + 42);
  uint64_t v24 = *(void **)(a1 + 224);
  int v22 = *(unsigned __int8 *)(a1 + 240);
  uint64_t v20 = *(void *)(a1 + 248);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t v10 = *(void *)(a2 + 32);
  int v11 = *(unsigned __int8 *)(a2 + 40);
  int v12 = *(unsigned __int8 *)(a2 + 41);
  int v26 = *(unsigned __int8 *)(a2 + 42);
  int v23 = *(void **)(a2 + 224);
  int v21 = *(unsigned __int8 *)(a2 + 240);
  BOOL v13 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  uint64_t v19 = *(void *)(a2 + 248);
  if (v13 || (sub_256B3FEA0())
    && (sub_256AA1A38(v5, v8) & 1) != 0
    && (sub_256AA1D04(v7, v9) & 1) != 0
    && v6 == v10
    && ((v29 ^ v11) & 1) == 0
    && ((v28 ^ v12) & 1) == 0
    && ((v27 ^ v26) & 1) == 0
    && (a3(a1 + 48, a2 + 48) & 1) != 0
    && (sub_256A87844(v24, v23) & 1) != 0
    && (sub_256A87910(), (v14 & 1) != 0)
    && ((v22 ^ v21) & 1) == 0
    && (sub_256AE2508(), (v15 & 1) == 0)
    && (sub_256A87AE4(v20, v19) & 1) != 0)
  {
    sub_256AE2338();
    sub_256A87BC0(v16, v17);
  }
  else
  {
    sub_256AE2338();
  }
}

uint64_t Catalog.LLM.Adapter.UrgencyClassification.hashValue.getter()
{
  return sub_256AA3850();
}

uint64_t sub_256AA8188(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA38A8(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Adapter.UrgencyClassification.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.AnswerSynthesis.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.AnswerSynthesis.init()()
{
  sub_256AE2108();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705E2B88);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE1E2C(v3);
  sub_256AE1F0C(MEMORY[0x263F8EE78]);
  v0[9] = v4;
  v0[10] = &unk_2705E2B38;
}

uint64_t Catalog.LLM.DraftModel.AnswerSynthesis.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.AnswerSynthesis.hash(into:));
}

uint64_t sub_256AA8274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.AnswerSynthesis.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.AnswerSynthesisServer.executionContexts.modify())()
{
  return nullsub_1;
}

uint64_t Catalog.LLM.DraftModel.AnswerSynthesisServer.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_256AE2268(63, 0x8000000256B42470, (uint64_t)&unk_2705E43A8, (uint64_t)&unk_2705E4358, a1);
}

uint64_t Catalog.LLM.DraftModel.AnswerSynthesisServer.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.AnswerSynthesisServer.hash(into:));
}

uint64_t sub_256AA82FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.AnswerSynthesisServer.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.AutonamingMessages.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.AutonamingMessages.init()(void *a1@<X8>)
{
  sub_256AE2140();
  sub_256A52518(v2);
  a1[2] = sub_256AB81C4((uint64_t)&unk_2705E34E8);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v4 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE1E2C(v4);
  sub_256AE1EB0(MEMORY[0x263F8EE78]);
  a1[9] = &unk_2705E3470;
  a1[10] = &unk_2705E3498;
}

uint64_t Catalog.LLM.DraftModel.AutonamingMessages.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.AutonamingMessages.hash(into:));
}

uint64_t sub_256AA83FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.AutonamingMessages.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.CodeLM.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.CodeLM.init()()
{
  sub_256AE27F8();
  sub_256AE2280(v1);
  v0[4] = sub_256AB81C4((uint64_t)&unk_2705E6680);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE22DC(v3);
  sub_256AE2094(MEMORY[0x263F8EE78]);
  v0[11] = v4;
  v0[12] = &unk_2705E6630;
}

uint64_t Catalog.LLM.DraftModel.CodeLM.hashValue.getter()
{
  return sub_256AA84E4((void (*)(void *))Catalog.LLM.DraftModel.CodeLM.hash(into:));
}

uint64_t sub_256AA84E4(void (*a1)(void *))
{
  sub_256AE23F4();
  v13[11] = v3;
  long long v14 = *(_OWORD *)((char *)v1 + 24);
  uint64_t v15 = v4;
  uint64_t v16 = v5;
  char v17 = v6;
  char v18 = v7;
  char v19 = v8;
  *(_OWORD *)(v9 + 64) = v1[4];
  char v20 = v10;
  char v21 = v11;
  *(_OWORD *)(v9 + 88) = *(_OWORD *)((char *)v1 + 88);
  sub_256B3FF40();
  a1(v13);
  return sub_256B3FF70();
}

uint64_t sub_256AA85A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA85C0(a1, a2, a3, (void (*)(void *))Catalog.LLM.DraftModel.CodeLM.hash(into:));
}

uint64_t sub_256AA85C0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *))
{
  sub_256AE23F4();
  v16[11] = v6;
  long long v17 = *(_OWORD *)((char *)v4 + 24);
  uint64_t v18 = v7;
  uint64_t v19 = v8;
  char v20 = v9;
  char v21 = v10;
  char v22 = v11;
  *(_OWORD *)(v12 + 64) = v4[4];
  char v23 = v13;
  char v24 = v14;
  *(_OWORD *)(v12 + 88) = *(_OWORD *)((char *)v4 + 88);
  sub_256B3FF40();
  a4(v16);
  return sub_256B3FF70();
}

uint64_t (*Catalog.LLM.DraftModel.CodeLMLargeV1.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.CodeLMLargeV1.init()()
{
  sub_256AE20B4();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705E1B40);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE1E2C(v3);
  sub_256AE1F0C(MEMORY[0x263F8EE78]);
  v0[9] = v4;
  v0[10] = &unk_2705E1B08;
}

uint64_t Catalog.LLM.DraftModel.CodeLMLargeV1.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.CodeLMLargeV1.hash(into:));
}

uint64_t sub_256AA8724(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.CodeLMLargeV1.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.CodeLMLargeV2.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.CodeLMLargeV2.init()()
{
  sub_256AE20B4();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705E1CF8);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE1E2C(v3);
  sub_256AE1F0C(MEMORY[0x263F8EE78]);
  v0[9] = v4;
  v0[10] = &unk_2705E1CC0;
}

uint64_t Catalog.LLM.DraftModel.CodeLMLargeV2.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.CodeLMLargeV2.hash(into:));
}

uint64_t sub_256AA8810(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.CodeLMLargeV2.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.CodeLMLargeV3.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.CodeLMLargeV3.init()()
{
  sub_256AE20B4();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705E1EB0);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE1E2C(v3);
  sub_256AE1F0C(MEMORY[0x263F8EE78]);
  v0[9] = v4;
  v0[10] = &unk_2705E1E78;
}

uint64_t Catalog.LLM.DraftModel.CodeLMLargeV3.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.CodeLMLargeV3.hash(into:));
}

uint64_t sub_256AA88FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.CodeLMLargeV3.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.CodeLMSmallV1.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.CodeLMSmallV1.init()()
{
  sub_256AE20B4();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705E2068);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE1E2C(v3);
  sub_256AE1F0C(MEMORY[0x263F8EE78]);
  v0[9] = v4;
  v0[10] = &unk_2705E2030;
}

uint64_t Catalog.LLM.DraftModel.CodeLMSmallV1.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.CodeLMSmallV1.hash(into:));
}

uint64_t sub_256AA89E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.CodeLMSmallV1.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.CodeLMSmallV2.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.CodeLMSmallV2.init()()
{
  sub_256AE20B4();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705E2220);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE1E2C(v3);
  sub_256AE1F0C(MEMORY[0x263F8EE78]);
  v0[9] = v4;
  v0[10] = &unk_2705E21E8;
}

uint64_t Catalog.LLM.DraftModel.CodeLMSmallV2.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.CodeLMSmallV2.hash(into:));
}

uint64_t sub_256AA8AD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.CodeLMSmallV2.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.CodeLMSmallV3.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.CodeLMSmallV3.init()()
{
  sub_256AE20B4();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705E23D8);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE1E2C(v3);
  sub_256AE1F0C(MEMORY[0x263F8EE78]);
  v0[9] = v4;
  v0[10] = &unk_2705E23A0;
}

uint64_t Catalog.LLM.DraftModel.CodeLMSmallV3.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.CodeLMSmallV3.hash(into:));
}

uint64_t sub_256AA8BC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.CodeLMSmallV3.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.CodeLMV1ANE3B.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.CodeLMV1ANE3B.init()(void *a1@<X8>)
{
  sub_256A52518(0xD00000000000002FLL);
  sub_256AE20F8((uint64_t)"mc.CodeLMV1ANE3B");
  a1[4] = sub_256AB81C4((uint64_t)&unk_2705E25B8);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  *(void *)(inited + 32) = 0xD00000000000001ALL;
  *(void *)(inited + 40) = 0x8000000256B40B40;
  uint64_t v3 = sub_256AE1DEC(inited);
  sub_256AE22DC(v3);
  sub_256AE2094(MEMORY[0x263F8EE78]);
  a1[11] = v4;
  a1[12] = &unk_2705E2568;
}

uint64_t Catalog.LLM.DraftModel.CodeLMV1ANE3B.hashValue.getter()
{
  return sub_256AA84E4((void (*)(void *))Catalog.LLM.DraftModel.CodeLMV1ANE3B.hash(into:));
}

uint64_t sub_256AA8CD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA85C0(a1, a2, a3, (void (*)(void *))Catalog.LLM.DraftModel.CodeLMV1ANE3B.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.ConciseTone.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.ConciseTone.init()(void *a1@<X8>)
{
  sub_256AE2524();
  sub_256A52518(v2);
  a1[2] = sub_256AB81C4((uint64_t)&unk_2705E1598);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v4 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE1E2C(v4);
  sub_256AE1EB0(MEMORY[0x263F8EE78]);
  a1[9] = &unk_2705E1520;
  a1[10] = &unk_2705E1548;
}

uint64_t Catalog.LLM.DraftModel.ConciseTone.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.ConciseTone.hash(into:));
}

uint64_t sub_256AA8DD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.ConciseTone.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.FriendlyTone.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.FriendlyTone.init()()
{
  sub_256AE20C8();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705E1790);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE1E2C(v3);
  sub_256AE1EB0(MEMORY[0x263F8EE78]);
  v0[9] = &unk_2705E1718;
  v0[10] = &unk_2705E1740;
}

uint64_t Catalog.LLM.DraftModel.FriendlyTone.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.FriendlyTone.hash(into:));
}

uint64_t sub_256AA8EC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.FriendlyTone.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.MagicRewrite.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.MagicRewrite.init()()
{
  sub_256AE20C8();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705E1988);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE1E2C(v3);
  sub_256AE1EB0(MEMORY[0x263F8EE78]);
  v0[9] = &unk_2705E1910;
  v0[10] = &unk_2705E1938;
}

uint64_t Catalog.LLM.DraftModel.MagicRewrite.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.MagicRewrite.hash(into:));
}

uint64_t sub_256AA8FBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.MagicRewrite.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.MailReply.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.MailReply.init()()
{
  sub_256AE24C4();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705E6A50);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE1E2C(v3);
  sub_256AE1EB0(MEMORY[0x263F8EE78]);
  v0[9] = &unk_2705E69D8;
  v0[10] = &unk_2705E6A00;
}

uint64_t Catalog.LLM.DraftModel.MailReply.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.MailReply.hash(into:));
}

uint64_t sub_256AA90B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.MailReply.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.MessagesReply.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.MessagesReply.init()()
{
  sub_256AE1FD4();
  sub_256A52518(v1 + 28);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705E27B8);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE1E2C(v3);
  sub_256AE1EB0(MEMORY[0x263F8EE78]);
  v0[9] = &unk_2705E2740;
  v0[10] = &unk_2705E2768;
}

uint64_t Catalog.LLM.DraftModel.MessagesReply.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.MessagesReply.hash(into:));
}

uint64_t sub_256AA91A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.MessagesReply.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.OpenEndedSchema.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.OpenEndedSchema.init()()
{
  sub_256AE2488();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_270608B68);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE1F28(v3);
  sub_256AE1F34(MEMORY[0x263F8EE78]);
  v0[9] = v4;
  v0[10] = &unk_270608BA0;
}

uint64_t Catalog.LLM.DraftModel.OpenEndedSchema.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.OpenEndedSchema.hash(into:));
}

uint64_t sub_256AA9294(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.OpenEndedSchema.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.OpenEndedTone.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.OpenEndedTone.init()()
{
  sub_256AE20A4();
  sub_256A52518(v1 + 45);
  v0[2] = sub_256AB81C4((uint64_t)&unk_270608BF0);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE1F28(v3);
  sub_256AE1F34(MEMORY[0x263F8EE78]);
  v0[9] = v4;
  v0[10] = &unk_270608C28;
}

uint64_t Catalog.LLM.DraftModel.OpenEndedTone.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.OpenEndedTone.hash(into:));
}

uint64_t sub_256AA9384(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.OpenEndedTone.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.OpenEndedToneQueryResponse.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.OpenEndedToneQueryResponse.init()()
{
  sub_256AE249C();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_270608C78);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE1F28(v3);
  sub_256AE1F34(MEMORY[0x263F8EE78]);
  v0[9] = v4;
  v0[10] = &unk_270608CB0;
}

uint64_t Catalog.LLM.DraftModel.OpenEndedToneQueryResponse.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.OpenEndedToneQueryResponse.hash(into:));
}

uint64_t sub_256AA9470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.OpenEndedToneQueryResponse.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.PhotosMemoriesCreationAssetCuration.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.PhotosMemoriesCreationAssetCuration.init()()
{
  sub_256AE249C();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705E5B90);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE1F28(v3);
  sub_256AE1F34(MEMORY[0x263F8EE78]);
  v0[9] = v4;
  v0[10] = &unk_2705E5B40;
}

uint64_t Catalog.LLM.DraftModel.PhotosMemoriesCreationAssetCuration.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.PhotosMemoriesCreationAssetCuration.hash(into:));
}

uint64_t sub_256AA955C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.PhotosMemoriesCreationAssetCuration.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.PhotosMemoriesCreationAssetCurationV2.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.PhotosMemoriesCreationAssetCurationV2.init()()
{
  sub_256AE20A4();
  sub_256A52518(v1 + 63);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705E6100);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE1F28(v3);
  sub_256AE1F34(MEMORY[0x263F8EE78]);
  v0[9] = v4;
  v0[10] = &unk_2705E60B0;
}

uint64_t Catalog.LLM.DraftModel.PhotosMemoriesCreationAssetCurationV2.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.PhotosMemoriesCreationAssetCurationV2.hash(into:));
}

uint64_t sub_256AA964C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.PhotosMemoriesCreationAssetCurationV2.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.PhotosMemoriesCreationGlobalTraits.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.PhotosMemoriesCreationGlobalTraits.init()()
{
  sub_256AE2744();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705E59C0);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE1F28(v3);
  sub_256AE1F34(MEMORY[0x263F8EE78]);
  v0[9] = v4;
  v0[10] = &unk_2705E5970;
}

uint64_t Catalog.LLM.DraftModel.PhotosMemoriesCreationGlobalTraits.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.PhotosMemoriesCreationGlobalTraits.hash(into:));
}

uint64_t sub_256AA9738(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.PhotosMemoriesCreationGlobalTraits.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.PhotosMemoriesCreationGlobalTraitsV2.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.PhotosMemoriesCreationGlobalTraitsV2.init()()
{
  sub_256AE2460();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705E5F30);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE1F28(v3);
  sub_256AE1F34(MEMORY[0x263F8EE78]);
  v0[9] = v4;
  v0[10] = &unk_2705E5EE0;
}

uint64_t Catalog.LLM.DraftModel.PhotosMemoriesCreationGlobalTraitsV2.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.PhotosMemoriesCreationGlobalTraitsV2.hash(into:));
}

uint64_t sub_256AA9824(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.PhotosMemoriesCreationGlobalTraitsV2.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.PhotosMemoriesCreationQueryUnderstanding.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.PhotosMemoriesCreationQueryUnderstanding.init()()
{
  sub_256AE20A4();
  sub_256A52518(v1 + 65);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705E62D0);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE1F28(v3);
  sub_256AE1F34(MEMORY[0x263F8EE78]);
  v0[9] = v4;
  v0[10] = &unk_2705E6280;
}

uint64_t Catalog.LLM.DraftModel.PhotosMemoriesCreationQueryUnderstanding.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.PhotosMemoriesCreationQueryUnderstanding.hash(into:));
}

uint64_t sub_256AA9914(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.PhotosMemoriesCreationQueryUnderstanding.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.PhotosMemoriesCreationQueryUnderstandingV2.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.PhotosMemoriesCreationQueryUnderstandingV2.init()(void *a1@<X8>)
{
  sub_256AE2084();
  sub_256A52518(v2);
  a1[2] = sub_256AB81C4((uint64_t)&unk_2705E64A0);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v4 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE1F28(v4);
  sub_256AE1F34(MEMORY[0x263F8EE78]);
  a1[9] = v5;
  a1[10] = &unk_2705E6450;
}

uint64_t Catalog.LLM.DraftModel.PhotosMemoriesCreationQueryUnderstandingV2.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.PhotosMemoriesCreationQueryUnderstandingV2.hash(into:));
}

uint64_t sub_256AA9A08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.PhotosMemoriesCreationQueryUnderstandingV2.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.PhotosMemoriesCreationQueryUnderstandingV3.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.PhotosMemoriesCreationQueryUnderstandingV3.init()(void *a1@<X8>)
{
  sub_256AE2084();
  sub_256A52518(v2);
  a1[2] = sub_256AB81C4((uint64_t)&unk_270608D00);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v4 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE1F28(v4);
  sub_256AE1F34(MEMORY[0x263F8EE78]);
  a1[9] = v5;
  a1[10] = &unk_270608D38;
}

uint64_t Catalog.LLM.DraftModel.PhotosMemoriesCreationQueryUnderstandingV3.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.PhotosMemoriesCreationQueryUnderstandingV3.hash(into:));
}

uint64_t sub_256AA9AFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.PhotosMemoriesCreationQueryUnderstandingV3.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.PhotosMemoriesCreationStoryteller.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.PhotosMemoriesCreationStoryteller.init()()
{
  sub_256AE2794();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705E57F0);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE1F28(v3);
  sub_256AE1F34(MEMORY[0x263F8EE78]);
  v0[9] = v4;
  v0[10] = &unk_2705E57A0;
}

uint64_t Catalog.LLM.DraftModel.PhotosMemoriesCreationStoryteller.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.PhotosMemoriesCreationStoryteller.hash(into:));
}

uint64_t sub_256AA9BE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.PhotosMemoriesCreationStoryteller.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.PhotosMemoriesCreationStorytellerV2.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.PhotosMemoriesCreationStorytellerV2.init()()
{
  sub_256AE249C();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705E5D60);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE1F28(v3);
  sub_256AE1F34(MEMORY[0x263F8EE78]);
  v0[9] = v4;
  v0[10] = &unk_2705E5D10;
}

uint64_t Catalog.LLM.DraftModel.PhotosMemoriesCreationStorytellerV2.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.PhotosMemoriesCreationStorytellerV2.hash(into:));
}

uint64_t sub_256AA9CD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.PhotosMemoriesCreationStorytellerV2.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.Planner.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.Planner.init()()
{
  sub_256AE22AC();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705E6858);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE1F28(v3);
  sub_256AE1F34(MEMORY[0x263F8EE78]);
  v0[9] = v4;
  v0[10] = &unk_2705E6808;
}

uint64_t Catalog.LLM.DraftModel.Planner.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.Planner.hash(into:));
}

uint64_t sub_256AA9DC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.Planner.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.PlannerV2.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.PlannerV2.init()(void *a1@<X8>)
{
  sub_256A52518(0xD000000000000039);
  a1[2] = sub_256AB81C4((uint64_t)&unk_2705E6C20);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  *(void *)(inited + 32) = 2019650145;
  *(void *)(inited + 40) = 0xE400000000000000;
  uint64_t v3 = sub_256AE1DEC(inited);
  sub_256AE1F28(v3);
  sub_256AE1F34(MEMORY[0x263F8EE78]);
  a1[9] = v4;
  a1[10] = &unk_2705E6BD0;
}

uint64_t Catalog.LLM.DraftModel.PlannerV2.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.PlannerV2.hash(into:));
}

uint64_t sub_256AA9EBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.PlannerV2.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.PlannerV3.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.PlannerV3.init()(void *a1@<X8>)
{
  sub_256A52518(0xD000000000000039);
  a1[2] = sub_256AB81C4((uint64_t)&unk_2705E6DF0);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  *(void *)(inited + 32) = 2019650145;
  *(void *)(inited + 40) = 0xE400000000000000;
  uint64_t v3 = sub_256AE1DEC(inited);
  sub_256AE1F28(v3);
  sub_256AE1F34(MEMORY[0x263F8EE78]);
  a1[9] = v4;
  a1[10] = &unk_2705E6DA0;
}

uint64_t Catalog.LLM.DraftModel.PlannerV3.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.PlannerV3.hash(into:));
}

uint64_t sub_256AA9FB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.PlannerV3.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.ProfessionalTone.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.ProfessionalTone.init()()
{
  sub_256AE1FD4();
  sub_256A52518(v1 + 31);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705E2F50);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE1E2C(v3);
  sub_256AE1EB0(MEMORY[0x263F8EE78]);
  v0[9] = &unk_2705E2ED8;
  v0[10] = &unk_2705E2F00;
}

uint64_t Catalog.LLM.DraftModel.ProfessionalTone.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.ProfessionalTone.hash(into:));
}

uint64_t sub_256AAA0B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.ProfessionalTone.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.ProofreadingReview.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.ProofreadingReview.init()(void *a1@<X8>)
{
  sub_256AE2140();
  sub_256A52518(v2);
  a1[2] = sub_256AB81C4((uint64_t)&unk_2705E36E0);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v4 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE1E2C(v4);
  sub_256AE1EB0(MEMORY[0x263F8EE78]);
  a1[9] = &unk_2705E3668;
  a1[10] = &unk_2705E3690;
}

uint64_t Catalog.LLM.DraftModel.ProofreadingReview.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.ProofreadingReview.hash(into:));
}

uint64_t sub_256AAA1B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.ProofreadingReview.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.ResponseGeneration.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.ResponseGeneration.init()(void *a1@<X8>)
{
  sub_256A52518(0xD000000000000042);
  a1[2] = sub_256AB81C4((uint64_t)&unk_2705E38B0);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  *(void *)(inited + 32) = 2019650145;
  *(void *)(inited + 40) = 0xE400000000000000;
  uint64_t v3 = sub_256AE1DEC(inited);
  sub_256AE1F28(v3);
  sub_256AE1F34(MEMORY[0x263F8EE78]);
  a1[9] = v4;
  a1[10] = &unk_2705E3860;
}

uint64_t Catalog.LLM.DraftModel.ResponseGeneration.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.ResponseGeneration.hash(into:));
}

uint64_t sub_256AAA2AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.ResponseGeneration.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.ResponseGenerationV2.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.ResponseGenerationV2.init()()
{
  sub_256AE27A8();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705E3E20);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE1F28(v3);
  sub_256AE1F34(MEMORY[0x263F8EE78]);
  v0[9] = v4;
  v0[10] = &unk_2705E3DD0;
}

uint64_t Catalog.LLM.DraftModel.ResponseGenerationV2.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.ResponseGenerationV2.hash(into:));
}

uint64_t sub_256AAA398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.ResponseGenerationV2.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.ResponseGenerationV3.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.ResponseGenerationV3.init()(void *a1@<X8>)
{
  sub_256A52518(0xD000000000000045);
  a1[2] = sub_256AB81C4((uint64_t)&unk_2705E3FF0);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  *(void *)(inited + 32) = 2019650145;
  *(void *)(inited + 40) = 0xE400000000000000;
  uint64_t v3 = sub_256AE1DEC(inited);
  sub_256AE1F28(v3);
  sub_256AE1F34(MEMORY[0x263F8EE78]);
  a1[9] = v4;
  a1[10] = &unk_2705E3FA0;
}

uint64_t Catalog.LLM.DraftModel.ResponseGenerationV3.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.ResponseGenerationV3.hash(into:));
}

uint64_t sub_256AAA494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.ResponseGenerationV3.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.SafetyGuardrail.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.SafetyGuardrail.init()()
{
  sub_256AE2108();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705E2D58);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE1E2C(v3);
  sub_256AE1F0C(MEMORY[0x263F8EE78]);
  v0[9] = v4;
  v0[10] = &unk_2705E2D08;
}

uint64_t Catalog.LLM.DraftModel.SafetyGuardrail.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.SafetyGuardrail.hash(into:));
}

uint64_t sub_256AAA580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.SafetyGuardrail.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.SearchQueryUnderstandingOnDevice.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.SearchQueryUnderstandingOnDevice.init()()
{
  sub_256AE1FD4();
  sub_256A52518(v1 + 40);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705E5620);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE1E2C(v3);
  sub_256AE1F0C(MEMORY[0x263F8EE78]);
  v0[9] = v4;
  v0[10] = &unk_2705E55D0;
}

uint64_t Catalog.LLM.DraftModel.SearchQueryUnderstandingOnDevice.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.SearchQueryUnderstandingOnDevice.hash(into:));
}

uint64_t sub_256AAA670(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.SearchQueryUnderstandingOnDevice.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.SearchQueryUnderstandingServer.executionContexts.modify())()
{
  return nullsub_1;
}

uint64_t Catalog.LLM.DraftModel.SearchQueryUnderstandingServer.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_256AE2268(73, 0x8000000256B44C10, (uint64_t)&unk_2705E5268, (uint64_t)&unk_2705E5218, a1);
}

uint64_t Catalog.LLM.DraftModel.SearchQueryUnderstandingServer.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.SearchQueryUnderstandingServer.hash(into:));
}

uint64_t sub_256AAA6F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.SearchQueryUnderstandingServer.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.ServerBulletsTransform.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.ServerBulletsTransform.init()()
{
  sub_256AE2488();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705E4958);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE1F28(v3);
  sub_256AE1F34(MEMORY[0x263F8EE78]);
  v0[9] = v4;
  v0[10] = &unk_2705E4908;
}

uint64_t Catalog.LLM.DraftModel.ServerBulletsTransform.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.ServerBulletsTransform.hash(into:));
}

uint64_t sub_256AAA7E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.ServerBulletsTransform.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.ServerConciseTone.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.ServerConciseTone.init()(void *a1@<X8>)
{
  sub_256AE2084();
  sub_256A52518(v2);
  a1[2] = sub_256AB81C4((uint64_t)&unk_2705E3120);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v4 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE1F28(v4);
  sub_256AE1F34(MEMORY[0x263F8EE78]);
  a1[9] = v5;
  a1[10] = &unk_2705E30D0;
}

uint64_t Catalog.LLM.DraftModel.ServerConciseTone.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.ServerConciseTone.hash(into:));
}

uint64_t sub_256AAA8D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.ServerConciseTone.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.ServerFriendlyTone.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.ServerFriendlyTone.init()()
{
  sub_256AE21DC();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705E3A80);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE1F28(v3);
  sub_256AE1F34(MEMORY[0x263F8EE78]);
  v0[9] = v4;
  v0[10] = &unk_2705E3A30;
}

uint64_t Catalog.LLM.DraftModel.ServerFriendlyTone.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.ServerFriendlyTone.hash(into:));
}

uint64_t sub_256AAA9C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.ServerFriendlyTone.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.ServerMagicRewrite.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.ServerMagicRewrite.init()()
{
  sub_256AE21DC();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705E3C50);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE1F28(v3);
  sub_256AE1F34(MEMORY[0x263F8EE78]);
  v0[9] = v4;
  v0[10] = &unk_2705E3C00;
}

uint64_t Catalog.LLM.DraftModel.ServerMagicRewrite.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.ServerMagicRewrite.hash(into:));
}

uint64_t sub_256AAAAB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.ServerMagicRewrite.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.ServerMailReplyLongFormBasic.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.ServerMailReplyLongFormBasic.init()()
{
  sub_256AE2780();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705E5098);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE1F28(v3);
  sub_256AE1F34(MEMORY[0x263F8EE78]);
  v0[9] = v4;
  v0[10] = &unk_2705E5048;
}

uint64_t Catalog.LLM.DraftModel.ServerMailReplyLongFormBasic.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.ServerMailReplyLongFormBasic.hash(into:));
}

uint64_t sub_256AAAB9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.ServerMailReplyLongFormBasic.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.ServerMailReplyLongFormRewrite.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.ServerMailReplyLongFormRewrite.init()()
{
  sub_256AE20A4();
  sub_256A52518(v1 + 58);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705E5450);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE1F28(v3);
  sub_256AE1F34(MEMORY[0x263F8EE78]);
  v0[9] = v4;
  v0[10] = &unk_2705E5400;
}

uint64_t Catalog.LLM.DraftModel.ServerMailReplyLongFormRewrite.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.ServerMailReplyLongFormRewrite.hash(into:));
}

uint64_t sub_256AAAC8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.ServerMailReplyLongFormRewrite.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.ServerMailReplyQA.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.ServerMailReplyQA.init()()
{
  sub_256AE21DC();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705E32F0);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE1F28(v3);
  sub_256AE1F34(MEMORY[0x263F8EE78]);
  v0[9] = v4;
  v0[10] = &unk_2705E32A0;
}

uint64_t Catalog.LLM.DraftModel.ServerMailReplyQA.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.ServerMailReplyQA.hash(into:));
}

uint64_t sub_256AAAD78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.ServerMailReplyQA.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.ServerProfessionalTone.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.ServerProfessionalTone.init()()
{
  sub_256AE2488();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705E4B28);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE1F28(v3);
  sub_256AE1F34(MEMORY[0x263F8EE78]);
  v0[9] = v4;
  v0[10] = &unk_2705E4AD8;
}

uint64_t Catalog.LLM.DraftModel.ServerProfessionalTone.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.ServerProfessionalTone.hash(into:));
}

uint64_t sub_256AAAE64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.ServerProfessionalTone.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.ServerProofreadingReview.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.ServerProofreadingReview.init()()
{
  sub_256AE2758();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705E4CF8);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE1F28(v3);
  sub_256AE1F34(MEMORY[0x263F8EE78]);
  v0[9] = v4;
  v0[10] = &unk_2705E4CA8;
}

uint64_t Catalog.LLM.DraftModel.ServerProofreadingReview.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.ServerProofreadingReview.hash(into:));
}

uint64_t sub_256AAAF50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.ServerProofreadingReview.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.ServerTablesTransform.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.ServerTablesTransform.init()(void *a1@<X8>)
{
  sub_256AE2084();
  sub_256A52518(v2);
  a1[2] = sub_256AB81C4((uint64_t)&unk_2705E4590);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v4 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE1F28(v4);
  sub_256AE1F34(MEMORY[0x263F8EE78]);
  a1[9] = v5;
  a1[10] = &unk_2705E4540;
}

uint64_t Catalog.LLM.DraftModel.ServerTablesTransform.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.ServerTablesTransform.hash(into:));
}

uint64_t sub_256AAB044(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.ServerTablesTransform.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.ServerTakeawaysTransform.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.ServerTakeawaysTransform.init()()
{
  sub_256AE2758();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705E4EC8);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE1F28(v3);
  sub_256AE1F34(MEMORY[0x263F8EE78]);
  v0[9] = v4;
  v0[10] = &unk_2705E4E78;
}

uint64_t Catalog.LLM.DraftModel.ServerTakeawaysTransform.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.ServerTakeawaysTransform.hash(into:));
}

uint64_t sub_256AAB130(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.ServerTakeawaysTransform.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.ServerTextSummarizer.executionContexts.modify())()
{
  return nullsub_1;
}

uint64_t Catalog.LLM.DraftModel.ServerTextSummarizer.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_256AE2268(62, 0x8000000256B455E0, (uint64_t)&unk_2705E41C0, (uint64_t)&unk_2705E4170, a1);
}

uint64_t sub_256AAB194@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = a1;
  *(void *)(a5 + 8) = a2;
  *(void *)(a5 + 16) = sub_256AB81C4(a3);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B570A0;
  *(void *)(inited + 32) = 0xD000000000000011;
  *(void *)(inited + 40) = 0x8000000256B40B90;
  uint64_t result = sub_256AE1EC0(inited);
  *(void *)(a5 + 24) = result;
  *(void *)(a5 + 32) = 0;
  uint64_t v9 = MEMORY[0x263F8EE78];
  *(_DWORD *)(a5 + 39) = 0;
  *(void *)(a5 + 48) = v9;
  *(void *)(a5 + 56) = v9;
  *(_WORD *)(a5 + 64) = 0;
  *(void *)(a5 + 72) = v9;
  *(void *)(a5 + 80) = a4;
  return result;
}

uint64_t Catalog.LLM.DraftModel.ServerTextSummarizer.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.ServerTextSummarizer.hash(into:));
}

uint64_t sub_256AAB250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.ServerTextSummarizer.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.Summarization.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.Summarization.init()()
{
  sub_256AE20C8();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705E29B8);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE1E2C(v3);
  sub_256AE1EB0(MEMORY[0x263F8EE78]);
  v0[9] = &unk_2705E2938;
  v0[10] = &unk_2705E2968;
}

uint64_t Catalog.LLM.DraftModel.Summarization.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.Summarization.hash(into:));
}

uint64_t sub_256AAB344(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.Summarization.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.TextEventExtraction.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.TextEventExtraction.init()()
{
  sub_256AE1FD4();
  sub_256A52518(v1 + 35);
  v0[2] = sub_256AB81C4((uint64_t)&unk_270608D88);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE1E2C(v3);
  sub_256AE1F0C(MEMORY[0x263F8EE78]);
  v0[9] = v4;
  v0[10] = &unk_270608DC0;
}

uint64_t Catalog.LLM.DraftModel.TextEventExtraction.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.TextEventExtraction.hash(into:));
}

uint64_t sub_256AAB434(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.TextEventExtraction.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.TextPersonExtraction.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.TextPersonExtraction.init()(void *a1@<X8>)
{
  sub_256AE2140();
  sub_256A52518(v2);
  a1[2] = sub_256AB81C4((uint64_t)&unk_270608E10);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v4 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE1E2C(v4);
  sub_256AE1F0C(MEMORY[0x263F8EE78]);
  a1[9] = v5;
  a1[10] = &unk_270608E48;
}

uint64_t Catalog.LLM.DraftModel.TextPersonExtraction.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.TextPersonExtraction.hash(into:));
}

uint64_t sub_256AAB52C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.TextPersonExtraction.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.UIPreviews.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.UIPreviews.init()()
{
  sub_256AE27E4();
  sub_256AE221C(v1);
  v0[4] = sub_256AB81C4((uint64_t)&unk_2705E1398);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE22DC(v3);
  sub_256AE2094(MEMORY[0x263F8EE78]);
  v0[11] = v4;
  v0[12] = &unk_2705E1360;
}

uint64_t Catalog.LLM.DraftModel.UIPreviews.hashValue.getter()
{
  return sub_256AA84E4((void (*)(void *))Catalog.LLM.DraftModel.UIPreviews.hash(into:));
}

uint64_t sub_256AAB618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA85C0(a1, a2, a3, (void (*)(void *))Catalog.LLM.DraftModel.UIPreviews.hash(into:));
}

uint64_t (*Catalog.LLM.DraftModel.UrgencyClassification.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.DraftModel.UrgencyClassification.init()(void *a1@<X8>)
{
  sub_256AE2140();
  sub_256A52518(v2);
  a1[2] = sub_256AB81C4((uint64_t)&unk_2705E4788);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v4 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE1E2C(v4);
  sub_256AE1EB0(MEMORY[0x263F8EE78]);
  a1[9] = &unk_2705E4710;
  a1[10] = &unk_2705E4738;
}

uint64_t Catalog.LLM.DraftModel.UrgencyClassification.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.DraftModel.UrgencyClassification.hash(into:));
}

uint64_t sub_256AAB718(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.DraftModel.UrgencyClassification.hash(into:));
}

uint64_t (*Catalog.LLM.Model.AFMTextInstruct300MBase.executionContexts.modify())()
{
  return nullsub_1;
}

uint64_t Catalog.Tokenizer.AFMTextInstruct300MTokenizer.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_256AE1F5C((uint64_t)&unk_270608238, (uint64_t)&unk_270608270, (uint64_t)&unk_270608298, a1);
}

uint64_t Catalog.LLM.Model.AFMTextInstruct300MBase.hash(into:)(uint64_t a1)
{
  return sub_256AAB920(a1, (void (*)(uint64_t))Catalog.Tokenizer.AFMTextInstruct300MTokenizer.hash(into:));
}

uint64_t Catalog.LLM.Model.AFMTextInstruct300MBase.hashValue.getter()
{
  return sub_256AAE7B8();
}

uint64_t sub_256AAB7EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AAE814(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Model.AFMTextInstruct300MBase.hash(into:));
}

uint64_t (*Catalog.LLM.Model.AFMTextInstruct3BBase.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.Tokenizer.AFMTextInstructEnglish49k.init()()
{
  sub_256AE20A4();
  sub_256A52518(v1 + 26);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705FE4A0);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B570A0;
  *(void *)(inited + 32) = v1 + 9;
  *(void *)(inited + 40) = 0x8000000256B40B40;
  *(unsigned char *)(inited + 48) = 2;
  *(void *)(inited + 56) = 0;
  *(_DWORD *)(inited + 64) = 2;
  *(void *)(inited + 72) = v1;
  *(void *)(inited + 80) = 0x8000000256B40B90;
  *(unsigned char *)(inited + 88) = 2;
  *(void *)(inited + 96) = 0;
  *(_DWORD *)(inited + 104) = 2;
  uint64_t v3 = sub_256AB7E28(inited);
  sub_256AE214C(v3);
  sub_256AE1EB0(MEMORY[0x263F8EE78]);
  v0[9] = &unk_2705FE418;
  v0[10] = &unk_2705FE450;
}

uint64_t Catalog.LLM.Model.AFMTextInstruct3BBase.hash(into:)(uint64_t a1)
{
  return sub_256AAB920(a1, (void (*)(uint64_t))Catalog.Tokenizer.AFMTextInstructEnglish49k.hash(into:));
}

uint64_t sub_256AAB920(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4 = *(void *)(v2 + 160);
  swift_bridgeObjectRetain();
  sub_256B3F740();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_256AE270C();
  sub_256AB8644(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_256A4A370();
  sub_256AB83F8(v7, v8);
  swift_bridgeObjectRelease();
  sub_256B3FF50();
  sub_256B3FF60();
  sub_256B3FF60();
  sub_256B3FF60();
  a2(a1);
  swift_bridgeObjectRetain();
  sub_256A97D1C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_256AE2718();
  swift_bridgeObjectRelease();
  sub_256B3FF60();
  sub_256B3FF60();
  swift_bridgeObjectRetain();
  sub_256A97AA8(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_256A97970();

  return swift_bridgeObjectRelease();
}

uint64_t Catalog.LLM.Model.AFMTextInstruct3BBase.hashValue.getter()
{
  return sub_256AAE7B8();
}

uint64_t sub_256AABB64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AAE814(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Model.AFMTextInstruct3BBase.hash(into:));
}

uint64_t (*Catalog.LLM.Model.ChatGPT.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.Tokenizer.ChatGPTTokenizer.init()(void *a1@<X8>)
{
  sub_256A52518(0xD000000000000022);
  a1[2] = sub_256AB81C4((uint64_t)&unk_270608E98);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  a1[3] = sub_256AE1DC0(inited, (uint64_t)"BlackPowderInferenceProvider");
  a1[4] = 0;
  sub_256AE21CC();
  sub_256AE1F34(MEMORY[0x263F8EE78]);
  a1[9] = v3;
  a1[10] = &unk_270608ED0;
}

void Catalog.LLM.Model.ChatGPT.init()(void *a1@<X8>)
{
  *a1 = 0xD000000000000018;
  a1[1] = 0x8000000256B425F0;
  a1[2] = sub_256AB81C4((uint64_t)&unk_270608F20);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  *(void *)(inited + 32) = 0xD00000000000001CLL;
  *(void *)(inited + 40) = 0x8000000256B40C50;
  uint64_t v3 = sub_256AE1DEC(inited);
  sub_256AE1F28(v3);
  Catalog.Tokenizer.ChatGPTTokenizer.init()(v4);
  sub_256AE2578(MEMORY[0x263F8EE78]);
  a1[20] = v5;
  a1[21] = &unk_270608F58;
}

uint64_t Catalog.LLM.Model.ChatGPT.hash(into:)(uint64_t a1)
{
  return sub_256AAB920(a1, (void (*)(uint64_t))Catalog.Tokenizer.ChatGPTTokenizer.hash(into:));
}

void static Catalog.LLM.Model.ChatGPT.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA3AA4(a1, a2, (uint64_t (*)(uint64_t *, uint64_t *))static Catalog.Tokenizer.ChatGPTTokenizer.== infix(_:_:));
}

uint64_t Catalog.LLM.Model.ChatGPT.hashValue.getter()
{
  return sub_256AAE7B8();
}

uint64_t sub_256AABD4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AAE814(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Model.ChatGPT.hash(into:));
}

uint64_t (*Catalog.LLM.Model.CodeLM.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.Tokenizer.CodeLMTokenizer.init()(void *a1@<X8>)
{
  sub_256A52518(0xD000000000000027);
  sub_256AE20F8((uint64_t)"mc.CodeLMTokenizer");
  a1[4] = sub_256AB81C4((uint64_t)&unk_2705FDC40);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  *(void *)(inited + 32) = 0xD00000000000001ALL;
  *(void *)(inited + 40) = 0x8000000256B40B40;
  uint64_t v3 = sub_256AE1DEC(inited);
  sub_256AE1F80(v3);
  sub_256AE2094(MEMORY[0x263F8EE78]);
  a1[11] = v4;
  a1[12] = &unk_2705FDBF0;
}

void Catalog.LLM.Model.CodeLM.init()()
{
  sub_256AE21F0();
  sub_256AE2280(v1);
  v0[4] = sub_256AB81C4((uint64_t)&unk_2705E8C18);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE1F40(v3);
  Catalog.Tokenizer.CodeLMTokenizer.init()(v4);
  sub_256AE2250(MEMORY[0x263F8EE78]);
  v0[24] = v5;
  v0[25] = &unk_2705E8BC8;
}

uint64_t Catalog.LLM.Model.CodeLM.hash(into:)(uint64_t a1)
{
  return sub_256AAC120(a1, (void (*)(uint64_t))Catalog.Tokenizer.CodeLMTokenizer.hash(into:));
}

void static Catalog.LLM.Model.CodeLM.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AAC3A0(a1, a2, (uint64_t (*)(void *, void *))static Catalog.Tokenizer.CodeLMTokenizer.== infix(_:_:));
}

uint64_t Catalog.LLM.Model.CodeLM.hashValue.getter()
{
  return sub_256AADB94();
}

uint64_t sub_256AABF5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AADBF0(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Model.CodeLM.hash(into:));
}

uint64_t (*Catalog.LLM.Model.CodeLMExperimental.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.Tokenizer.CodeLMTokenizerExperimental.init()()
{
  sub_256AE1FD4();
  void *v0 = v1 + 14;
  v0[1] = 0x8000000256B40E50;
  v0[2] = v1 | 4;
  v0[3] = 0x8000000256B49260;
  v0[4] = sub_256AB81C4((uint64_t)&unk_2705FE5E8);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE1F80(v3);
  sub_256AE2094(MEMORY[0x263F8EE78]);
  v0[11] = v4;
  v0[12] = &unk_2705FE598;
}

void Catalog.LLM.Model.CodeLMExperimental.init()(void *a1@<X8>)
{
  sub_256A52518(0xD000000000000023);
  sub_256AE20F8((uint64_t)"mc.CodeLMExperimental");
  a1[4] = sub_256AB81C4((uint64_t)&unk_2705E7C98);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  *(void *)(inited + 32) = 0xD00000000000001ALL;
  *(void *)(inited + 40) = 0x8000000256B40B40;
  uint64_t v3 = sub_256AE1DEC(inited);
  sub_256AE1F40(v3);
  Catalog.Tokenizer.CodeLMTokenizerExperimental.init()();
  sub_256AE2250(MEMORY[0x263F8EE78]);
  a1[24] = v4;
  a1[25] = &unk_2705E7C48;
}

uint64_t Catalog.LLM.Model.CodeLMExperimental.hash(into:)(uint64_t a1)
{
  return sub_256AAC120(a1, (void (*)(uint64_t))Catalog.Tokenizer.CodeLMTokenizerExperimental.hash(into:));
}

uint64_t sub_256AAC120(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v5 = v2[4];
  uint64_t v4 = v2[5];
  uint64_t v8 = v2[24];
  swift_bridgeObjectRetain();
  sub_256AE270C();
  sub_256B3F740();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_256B3F740();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_256AB8644(a1, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_256AB83F8(a1, v4);
  swift_bridgeObjectRelease();
  sub_256B3FF50();
  sub_256B3FF60();
  sub_256B3FF60();
  sub_256B3FF60();
  a2(a1);
  swift_bridgeObjectRetain();
  sub_256A97D1C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_256AE2718();
  swift_bridgeObjectRelease();
  sub_256B3FF60();
  sub_256B3FF60();
  swift_bridgeObjectRetain();
  sub_256A97AA8(a1, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_256A97970();

  return swift_bridgeObjectRelease();
}

void static Catalog.LLM.Model.CodeLMExperimental.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AAC3A0(a1, a2, (uint64_t (*)(void *, void *))static Catalog.Tokenizer.CodeLMTokenizerExperimental.== infix(_:_:));
}

void sub_256AAC3A0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void *, void *))
{
  sub_256AE26B0(a1);
  uint64_t v6 = *(void *)(v4 + 24);
  uint64_t v5 = *(void *)(v4 + 32);
  uint64_t v63 = *(void *)(v4 + 48);
  uint64_t v64 = *(void *)(v4 + 40);
  int v62 = *(unsigned __int8 *)(v4 + 56);
  int v61 = *(unsigned __int8 *)(v4 + 57);
  int v60 = *(unsigned __int8 *)(v4 + 58);
  uint64_t v52 = *(void *)(v4 + 72);
  uint64_t v53 = *(void *)(v4 + 64);
  uint64_t v57 = *(void *)(v4 + 80);
  uint64_t v50 = *(void *)(v4 + 112);
  uint64_t v51 = *(void *)(v4 + 104);
  char v48 = *(unsigned char *)(v4 + 121);
  char v49 = *(unsigned char *)(v4 + 120);
  long long v55 = *(_OWORD *)(v4 + 128);
  long long v56 = *(_OWORD *)(v4 + 88);
  char v46 = *(unsigned char *)(v4 + 144);
  char v47 = *(unsigned char *)(v4 + 122);
  char v45 = *(unsigned char *)(v4 + 145);
  long long v54 = *(_OWORD *)(v4 + 152);
  int v31 = *(void **)(v4 + 168);
  int v29 = *(unsigned __int8 *)(v4 + 185);
  sub_256AE254C();
  long long v43 = *(_OWORD *)(v9 + 128);
  long long v44 = *(_OWORD *)(v9 + 88);
  long long v42 = *(_OWORD *)(v9 + 152);
  BOOL v12 = v10 == v11 && v7 == v8;
  uint64_t v14 = *(void *)(v9 + 16);
  uint64_t v13 = *(void *)(v9 + 24);
  uint64_t v16 = *(void *)(v9 + 32);
  uint64_t v15 = *(void *)(v9 + 40);
  uint64_t v17 = *(void *)(v9 + 48);
  int v18 = *(unsigned __int8 *)(v9 + 56);
  int v19 = *(unsigned __int8 *)(v9 + 57);
  int v59 = *(unsigned __int8 *)(v9 + 58);
  uint64_t v32 = *(void *)(v9 + 64);
  uint64_t v33 = *(void *)(v9 + 72);
  uint64_t v34 = *(void *)(v9 + 80);
  uint64_t v35 = *(void *)(v9 + 104);
  uint64_t v36 = *(void *)(v9 + 112);
  char v37 = *(unsigned char *)(v9 + 120);
  char v38 = *(unsigned char *)(v9 + 121);
  char v39 = *(unsigned char *)(v9 + 122);
  char v40 = *(unsigned char *)(v9 + 144);
  char v41 = *(unsigned char *)(v9 + 145);
  int v30 = *(void **)(v9 + 168);
  int v28 = *(unsigned __int8 *)(v9 + 185);
  uint64_t v26 = *(void *)(v9 + 192);
  if (!v12 && (sub_256B3FEA0() & 1) == 0) {
    goto LABEL_26;
  }
  BOOL v20 = v3 == v14 && v6 == v13;
  if (!v20 && (sub_256B3FEA0() & 1) == 0) {
    goto LABEL_26;
  }
  if ((sub_256AA1A38(v5, v16) & 1) == 0) {
    goto LABEL_26;
  }
  if ((sub_256AA1D04(v64, v15) & 1) == 0) {
    goto LABEL_26;
  }
  if (v63 != v17) {
    goto LABEL_26;
  }
  if ((v62 ^ v18)) {
    goto LABEL_26;
  }
  if ((v61 ^ v19)) {
    goto LABEL_26;
  }
  if ((v60 ^ v59)) {
    goto LABEL_26;
  }
  v76[0] = v53;
  v76[1] = v52;
  long long v77 = v56;
  v76[2] = v57;
  uint64_t v78 = v51;
  uint64_t v79 = v50;
  char v80 = v49;
  char v81 = v48;
  char v82 = v47;
  long long v83 = v55;
  char v84 = v46;
  char v85 = v45;
  long long v86 = v54;
  v65[0] = v32;
  v65[1] = v33;
  v65[2] = v34;
  long long v66 = v44;
  uint64_t v67 = v35;
  uint64_t v68 = v36;
  char v69 = v37;
  char v70 = v38;
  char v71 = v39;
  long long v72 = v43;
  char v73 = v40;
  char v74 = v41;
  long long v75 = v42;
  if ((a3(v76, v65) & 1) == 0) {
    goto LABEL_26;
  }
  if ((sub_256A87844(v31, v30) & 1) != 0
    && (sub_256A87910(), (v21 & 1) != 0)
    && (sub_256AE2508(), (v22 & 1) == 0)
    && ((v29 ^ v28) & 1) == 0
    && (sub_256A87AE4(v27, v26) & 1) != 0)
  {
    sub_256A4A554();
    sub_256A87BC0(v23, v24);
  }
  else
  {
LABEL_26:
    sub_256A4A554();
  }
}

uint64_t Catalog.LLM.Model.CodeLMExperimental.hashValue.getter()
{
  return sub_256AADB94();
}

uint64_t sub_256AAC72C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AADBF0(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Model.CodeLMExperimental.hash(into:));
}

uint64_t (*Catalog.LLM.Model.CodeLMLargeV1.executionContexts.modify())()
{
  return nullsub_1;
}

uint64_t Catalog.Tokenizer.CodeLMLargeV1Tokenizer.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_256AE1F5C((uint64_t)&unk_2705FC8D8, MEMORY[0x263F8EE78], (uint64_t)&unk_2705FC8A0, a1);
}

uint64_t Catalog.LLM.Model.CodeLMLargeV1.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_256AAC8C8(0x8000000256B42670, (uint64_t)&unk_2705E7008, (uint64_t (*)(void))Catalog.Tokenizer.CodeLMLargeV1Tokenizer.init(), (uint64_t)&unk_2705E6FD0, a1);
}

uint64_t Catalog.LLM.Model.CodeLMLargeV1.hash(into:)(uint64_t a1)
{
  return sub_256AAB920(a1, (void (*)(uint64_t))Catalog.Tokenizer.CodeLMLargeV1Tokenizer.hash(into:));
}

void static Catalog.LLM.Model.CodeLMLargeV1.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA3AA4(a1, a2, (uint64_t (*)(uint64_t *, uint64_t *))static Catalog.Tokenizer.CodeLMLargeV1Tokenizer.== infix(_:_:));
}

uint64_t Catalog.LLM.Model.CodeLMLargeV1.hashValue.getter()
{
  return sub_256AAE7B8();
}

uint64_t sub_256AAC824(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AAE814(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Model.CodeLMLargeV1.hash(into:));
}

uint64_t (*Catalog.LLM.Model.CodeLMLargeV2.executionContexts.modify())()
{
  return nullsub_1;
}

uint64_t Catalog.Tokenizer.CodeLMLargeV2Tokenizer.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_256AE1F5C((uint64_t)&unk_2705FCA90, MEMORY[0x263F8EE78], (uint64_t)&unk_2705FCA58, a1);
}

uint64_t Catalog.LLM.Model.CodeLMLargeV2.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_256AAC8C8(0x8000000256B42700, (uint64_t)&unk_2705E71C8, (uint64_t (*)(void))Catalog.Tokenizer.CodeLMLargeV2Tokenizer.init(), (uint64_t)&unk_2705E7190, a1);
}

uint64_t sub_256AAC8C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = 0xD000000000000028;
  *(void *)(a5 + 8) = a1;
  *(void *)(a5 + 16) = sub_256AB81C4(a2);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  *(void *)(inited + 32) = 0xD00000000000001ALL;
  *(void *)(inited + 40) = 0x8000000256B40B40;
  *(void *)(a5 + 24) = sub_256AE1DEC(inited);
  *(void *)(a5 + 32) = 1590000;
  *(_WORD *)(a5 + 40) = 0;
  *(unsigned char *)(a5 + 42) = 0;
  uint64_t result = a3();
  uint64_t v10 = MEMORY[0x263F8EE78];
  *(void *)(a5 + 136) = MEMORY[0x263F8EE78];
  *(void *)(a5 + 144) = v10;
  *(_WORD *)(a5 + 152) = 256;
  *(void *)(a5 + 160) = v10;
  *(void *)(a5 + 168) = a4;
  return result;
}

uint64_t Catalog.LLM.Model.CodeLMLargeV2.hash(into:)(uint64_t a1)
{
  return sub_256AAB920(a1, (void (*)(uint64_t))Catalog.Tokenizer.CodeLMLargeV2Tokenizer.hash(into:));
}

void static Catalog.LLM.Model.CodeLMLargeV2.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA3AA4(a1, a2, (uint64_t (*)(uint64_t *, uint64_t *))static Catalog.Tokenizer.CodeLMLargeV2Tokenizer.== infix(_:_:));
}

uint64_t Catalog.LLM.Model.CodeLMLargeV2.hashValue.getter()
{
  return sub_256AAE7B8();
}

uint64_t sub_256AAC9E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AAE814(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Model.CodeLMLargeV2.hash(into:));
}

uint64_t (*Catalog.LLM.Model.CodeLMLargeV3.executionContexts.modify())()
{
  return nullsub_1;
}

uint64_t Catalog.Tokenizer.CodeLMLargeV3Tokenizer.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_256AE1F5C((uint64_t)&unk_2705FCC48, MEMORY[0x263F8EE78], (uint64_t)&unk_2705FCC10, a1);
}

uint64_t Catalog.LLM.Model.CodeLMLargeV3.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_256AAC8C8(0x8000000256B42790, (uint64_t)&unk_2705E7388, (uint64_t (*)(void))Catalog.Tokenizer.CodeLMLargeV3Tokenizer.init(), (uint64_t)&unk_2705E7350, a1);
}

uint64_t Catalog.LLM.Model.CodeLMLargeV3.hash(into:)(uint64_t a1)
{
  return sub_256AAB920(a1, (void (*)(uint64_t))Catalog.Tokenizer.CodeLMLargeV3Tokenizer.hash(into:));
}

void static Catalog.LLM.Model.CodeLMLargeV3.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA3AA4(a1, a2, (uint64_t (*)(uint64_t *, uint64_t *))static Catalog.Tokenizer.CodeLMLargeV3Tokenizer.== infix(_:_:));
}

uint64_t Catalog.LLM.Model.CodeLMLargeV3.hashValue.getter()
{
  return sub_256AAE7B8();
}

uint64_t sub_256AACAD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AAE814(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Model.CodeLMLargeV3.hash(into:));
}

uint64_t (*Catalog.LLM.Model.CodeLMSafetyGuardrail.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.Tokenizer.CodeLMSafetyGuardrailTokenizer.init()()
{
  sub_256AE20C8();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705FD8C8);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE214C(v3);
  sub_256AE1F0C(MEMORY[0x263F8EE78]);
  v0[9] = v4;
  v0[10] = &unk_2705FD890;
}

void Catalog.LLM.Model.CodeLMSafetyGuardrail.init()()
{
  sub_256AE24D8();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705E84C8);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE1F64(v3, 0xA980u);
  Catalog.Tokenizer.CodeLMSafetyGuardrailTokenizer.init()();
  sub_256AE2414(MEMORY[0x263F8EE78]);
  v0[20] = v4;
  v0[21] = &unk_2705E8490;
}

uint64_t Catalog.LLM.Model.CodeLMSafetyGuardrail.hash(into:)(uint64_t a1)
{
  return sub_256AAB920(a1, (void (*)(uint64_t))Catalog.Tokenizer.CodeLMSafetyGuardrailTokenizer.hash(into:));
}

void static Catalog.LLM.Model.CodeLMSafetyGuardrail.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA3AA4(a1, a2, (uint64_t (*)(uint64_t *, uint64_t *))static Catalog.Tokenizer.CodeLMSafetyGuardrailTokenizer.== infix(_:_:));
}

uint64_t Catalog.LLM.Model.CodeLMSafetyGuardrail.hashValue.getter()
{
  return sub_256AAE7B8();
}

uint64_t sub_256AACC90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AAE814(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Model.CodeLMSafetyGuardrail.hash(into:));
}

uint64_t (*Catalog.LLM.Model.CodeLMSmallV1.executionContexts.modify())()
{
  return nullsub_1;
}

uint64_t Catalog.Tokenizer.CodeLMSmallV1Tokenizer.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_256AE1F5C((uint64_t)&unk_2705FCE00, MEMORY[0x263F8EE78], (uint64_t)&unk_2705FCDC8, a1);
}

uint64_t Catalog.LLM.Model.CodeLMSmallV1.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_256AAC8C8(0x8000000256B428A0, (uint64_t)&unk_2705E7548, (uint64_t (*)(void))Catalog.Tokenizer.CodeLMSmallV1Tokenizer.init(), (uint64_t)&unk_2705E7510, a1);
}

uint64_t Catalog.LLM.Model.CodeLMSmallV1.hash(into:)(uint64_t a1)
{
  return sub_256AAB920(a1, (void (*)(uint64_t))Catalog.Tokenizer.CodeLMSmallV1Tokenizer.hash(into:));
}

void static Catalog.LLM.Model.CodeLMSmallV1.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA3AA4(a1, a2, (uint64_t (*)(uint64_t *, uint64_t *))static Catalog.Tokenizer.CodeLMSmallV1Tokenizer.== infix(_:_:));
}

uint64_t Catalog.LLM.Model.CodeLMSmallV1.hashValue.getter()
{
  return sub_256AAE7B8();
}

uint64_t sub_256AACD88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AAE814(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Model.CodeLMSmallV1.hash(into:));
}

uint64_t (*Catalog.LLM.Model.CodeLMSmallV2.executionContexts.modify())()
{
  return nullsub_1;
}

uint64_t Catalog.Tokenizer.CodeLMSmallV2Tokenizer.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_256AE1F5C((uint64_t)&unk_2705FCFB8, MEMORY[0x263F8EE78], (uint64_t)&unk_2705FCF80, a1);
}

uint64_t Catalog.LLM.Model.CodeLMSmallV2.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_256AAC8C8(0x8000000256B42930, (uint64_t)&unk_2705E7708, (uint64_t (*)(void))Catalog.Tokenizer.CodeLMSmallV2Tokenizer.init(), (uint64_t)&unk_2705E76D0, a1);
}

uint64_t Catalog.LLM.Model.CodeLMSmallV2.hash(into:)(uint64_t a1)
{
  return sub_256AAB920(a1, (void (*)(uint64_t))Catalog.Tokenizer.CodeLMSmallV2Tokenizer.hash(into:));
}

void static Catalog.LLM.Model.CodeLMSmallV2.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA3AA4(a1, a2, (uint64_t (*)(uint64_t *, uint64_t *))static Catalog.Tokenizer.CodeLMSmallV2Tokenizer.== infix(_:_:));
}

uint64_t Catalog.LLM.Model.CodeLMSmallV2.hashValue.getter()
{
  return sub_256AAE7B8();
}

uint64_t sub_256AACE80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AAE814(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Model.CodeLMSmallV2.hash(into:));
}

uint64_t (*Catalog.LLM.Model.CodeLMSmallV3.executionContexts.modify())()
{
  return nullsub_1;
}

uint64_t Catalog.Tokenizer.CodeLMSmallV3Tokenizer.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_256AE1F5C((uint64_t)&unk_2705FD170, MEMORY[0x263F8EE78], (uint64_t)&unk_2705FD138, a1);
}

uint64_t sub_256AACEE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = 0xD00000000000002DLL;
  *(void *)(a5 + 8) = a1;
  *(void *)(a5 + 16) = sub_256AB81C4(a2);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  *(void *)(inited + 32) = 0xD00000000000001ALL;
  *(void *)(inited + 40) = 0x8000000256B40B40;
  uint64_t result = sub_256AE1DEC(inited);
  *(void *)(a5 + 24) = result;
  *(void *)(a5 + 32) = 10000;
  *(_WORD *)(a5 + 40) = 1;
  *(unsigned char *)(a5 + 42) = 0;
  uint64_t v10 = MEMORY[0x263F8EE78];
  *(void *)(a5 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a5 + 56) = v10;
  *(_WORD *)(a5 + 64) = 256;
  *(void *)(a5 + 72) = a3;
  *(void *)(a5 + 80) = a4;
  return result;
}

uint64_t Catalog.LLM.Model.CodeLMSmallV3.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_256AAC8C8(0x8000000256B429C0, (uint64_t)&unk_2705E78C8, (uint64_t (*)(void))Catalog.Tokenizer.CodeLMSmallV3Tokenizer.init(), (uint64_t)&unk_2705E7890, a1);
}

uint64_t Catalog.LLM.Model.CodeLMSmallV3.hash(into:)(uint64_t a1)
{
  return sub_256AAB920(a1, (void (*)(uint64_t))Catalog.Tokenizer.CodeLMSmallV3Tokenizer.hash(into:));
}

void static Catalog.LLM.Model.CodeLMSmallV3.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA3AA4(a1, a2, (uint64_t (*)(uint64_t *, uint64_t *))static Catalog.Tokenizer.CodeLMSmallV3Tokenizer.== infix(_:_:));
}

uint64_t Catalog.LLM.Model.CodeLMSmallV3.hashValue.getter()
{
  return sub_256AAE7B8();
}

uint64_t sub_256AAD030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AAE814(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Model.CodeLMSmallV3.hash(into:));
}

uint64_t Catalog.LLM.Model.CodeLMV1ANE3B.id.getter()
{
  return sub_256A4A370();
}

uint64_t Catalog.LLM.Model.CodeLMV1ANE3B.explicitRequestUsage.getter()
{
  return sub_256A4A370();
}

uint64_t Catalog.LLM.Model.CodeLMV1ANE3B.executionContexts.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 40) = a1;
  return result;
}

uint64_t (*Catalog.LLM.Model.CodeLMV1ANE3B.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.Tokenizer.CodeLMV1ANE3BTokenizer.init()(void *a1@<X8>)
{
  sub_256A52518(0xD00000000000002ELL);
  sub_256AE20F8((uint64_t)"mc.CodeLMV1ANE3BTokenizer");
  a1[4] = sub_256AB81C4((uint64_t)&unk_2705FE328);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  *(void *)(inited + 32) = 0xD00000000000001ALL;
  *(void *)(inited + 40) = 0x8000000256B40B40;
  uint64_t v3 = sub_256AE1DEC(inited);
  sub_256AE1F80(v3);
  sub_256AE2094(MEMORY[0x263F8EE78]);
  a1[11] = v4;
  a1[12] = &unk_2705FE2D8;
}

uint64_t Catalog.LLM.Model.CodeLMV1ANE3B.preconditions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Catalog.LLM.Model.CodeLMV1ANE3B.sideloaded.getter()
{
  return *(unsigned __int8 *)(v0 + 184);
}

uint64_t Catalog.LLM.Model.CodeLMV1ANE3B.assetBacked.getter()
{
  return *(unsigned __int8 *)(v0 + 185);
}

uint64_t Catalog.LLM.Model.CodeLMV1ANE3B.tags.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Catalog.LLM.Model.CodeLMV1ANE3B.platforms.getter()
{
  return swift_bridgeObjectRetain();
}

void Catalog.LLM.Model.CodeLMV1ANE3B.init()(void *a1@<X8>)
{
  sub_256A52518(0xD000000000000029);
  sub_256AE20F8((uint64_t)"mc.CodeLMV1ANE3B");
  a1[4] = sub_256AB81C4((uint64_t)&unk_2705E7AB0);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  *(void *)(inited + 32) = 0xD00000000000001ALL;
  *(void *)(inited + 40) = 0x8000000256B40B40;
  uint64_t v3 = sub_256AE1DEC(inited);
  sub_256AE1F40(v3);
  Catalog.Tokenizer.CodeLMV1ANE3BTokenizer.init()(v4);
  sub_256AE2250(MEMORY[0x263F8EE78]);
  a1[24] = v5;
  a1[25] = &unk_2705E7A60;
}

uint64_t Catalog.LLM.Model.CodeLMV1ANE3B.hash(into:)(uint64_t a1)
{
  return sub_256AAC120(a1, (void (*)(uint64_t))Catalog.Tokenizer.CodeLMV1ANE3BTokenizer.hash(into:));
}

void static Catalog.LLM.Model.CodeLMV1ANE3B.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AAC3A0(a1, a2, (uint64_t (*)(void *, void *))static Catalog.Tokenizer.CodeLMV1ANE3BTokenizer.== infix(_:_:));
}

uint64_t Catalog.LLM.Model.CodeLMV1ANE3B.hashValue.getter()
{
  return sub_256AADB94();
}

uint64_t sub_256AAD2E0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Catalog.LLM.Model.CodeLMV1ANE3B.id.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_256AAD310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AADBF0(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Model.CodeLMV1ANE3B.hash(into:));
}

uint64_t (*Catalog.LLM.Model.CodeLMV2.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.Tokenizer.CodeLMTokenizerV2.init()()
{
  sub_256AE24EC();
  sub_256A52518(v2);
  sub_256AE20F8((uint64_t)"mc.CodeLMTokenizerV2");
  v0[4] = sub_256AB81C4((uint64_t)&unk_2705FDD70);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  *(void *)(inited + 32) = v1 + 6;
  *(void *)(inited + 40) = 0x8000000256B40B40;
  uint64_t v4 = sub_256AE1DEC(inited);
  sub_256AE1F80(v4);
  sub_256AE2094(MEMORY[0x263F8EE78]);
  v0[11] = v5;
  v0[12] = &unk_2705FDD20;
}

void Catalog.LLM.Model.CodeLMV2.init()()
{
  sub_256AE21F0();
  sub_256AE211C(v1);
  v0[2] = v3;
  v0[3] = v2 & 0xFFFF0000FFFFLL | 0xEB00000000320000;
  v0[4] = sub_256AB81C4((uint64_t)&unk_2705E8D58);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v5 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE1F40(v5);
  Catalog.Tokenizer.CodeLMTokenizerV2.init()();
  sub_256AE2250(MEMORY[0x263F8EE78]);
  v0[24] = v6;
  v0[25] = &unk_2705E8D08;
}

uint64_t Catalog.LLM.Model.CodeLMV2.hash(into:)(uint64_t a1)
{
  return sub_256AAC120(a1, (void (*)(uint64_t))Catalog.Tokenizer.CodeLMTokenizerV2.hash(into:));
}

void static Catalog.LLM.Model.CodeLMV2.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AAC3A0(a1, a2, (uint64_t (*)(void *, void *))static Catalog.Tokenizer.CodeLMTokenizerV2.== infix(_:_:));
}

uint64_t Catalog.LLM.Model.CodeLMV2.hashValue.getter()
{
  return sub_256AADB94();
}

uint64_t sub_256AAD4EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AADBF0(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Model.CodeLMV2.hash(into:));
}

uint64_t (*Catalog.LLM.Model.CodeLMV3.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.Tokenizer.CodeLMTokenizerV3.init()()
{
  sub_256AE24EC();
  sub_256A52518(v2);
  sub_256AE20F8((uint64_t)"mc.CodeLMTokenizerV3");
  v0[4] = sub_256AB81C4((uint64_t)&unk_2705FDF58);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  *(void *)(inited + 32) = v1 + 6;
  *(void *)(inited + 40) = 0x8000000256B40B40;
  uint64_t v4 = sub_256AE1DEC(inited);
  sub_256AE1F80(v4);
  sub_256AE2094(MEMORY[0x263F8EE78]);
  v0[11] = v5;
  v0[12] = &unk_2705FDF08;
}

void Catalog.LLM.Model.CodeLMV3.init()()
{
  sub_256AE21F0();
  sub_256AE211C(v1);
  v0[2] = v3;
  v0[3] = v2 & 0xFFFF0000FFFFLL | 0xEB00000000330000;
  v0[4] = sub_256AB81C4((uint64_t)&unk_2705E8F40);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v5 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE1F40(v5);
  Catalog.Tokenizer.CodeLMTokenizerV3.init()();
  sub_256AE2250(MEMORY[0x263F8EE78]);
  v0[24] = v6;
  v0[25] = &unk_2705E8EF0;
}

uint64_t Catalog.LLM.Model.CodeLMV3.hash(into:)(uint64_t a1)
{
  return sub_256AAC120(a1, (void (*)(uint64_t))Catalog.Tokenizer.CodeLMTokenizerV3.hash(into:));
}

void static Catalog.LLM.Model.CodeLMV3.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AAC3A0(a1, a2, (uint64_t (*)(void *, void *))static Catalog.Tokenizer.CodeLMTokenizerV3.== infix(_:_:));
}

uint64_t Catalog.LLM.Model.CodeLMV3.hashValue.getter()
{
  return sub_256AADB94();
}

uint64_t sub_256AAD6C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AADBF0(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Model.CodeLMV3.hash(into:));
}

uint64_t (*Catalog.LLM.Model.CodeLMV4.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.Tokenizer.CodeLMTokenizerV4.init()()
{
  sub_256AE24EC();
  sub_256A52518(v2);
  sub_256AE20F8((uint64_t)"mc.CodeLMTokenizerV4");
  v0[4] = sub_256AB81C4((uint64_t)&unk_2705FE140);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  *(void *)(inited + 32) = v1 + 6;
  *(void *)(inited + 40) = 0x8000000256B40B40;
  uint64_t v4 = sub_256AE1DEC(inited);
  sub_256AE1F80(v4);
  sub_256AE2094(MEMORY[0x263F8EE78]);
  v0[11] = v5;
  v0[12] = &unk_2705FE0F0;
}

void Catalog.LLM.Model.CodeLMV4.init()()
{
  sub_256AE21F0();
  sub_256AE211C(v1);
  v0[2] = v3;
  v0[3] = v2 & 0xFFFF0000FFFFLL | 0xEB00000000340000;
  v0[4] = sub_256AB81C4((uint64_t)&unk_2705E9128);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v5 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE1F40(v5);
  Catalog.Tokenizer.CodeLMTokenizerV4.init()();
  sub_256AE2250(MEMORY[0x263F8EE78]);
  v0[24] = v6;
  v0[25] = &unk_2705E90D8;
}

uint64_t Catalog.LLM.Model.CodeLMV4.hash(into:)(uint64_t a1)
{
  return sub_256AAC120(a1, (void (*)(uint64_t))Catalog.Tokenizer.CodeLMTokenizerV4.hash(into:));
}

void static Catalog.LLM.Model.CodeLMV4.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AAC3A0(a1, a2, (uint64_t (*)(void *, void *))static Catalog.Tokenizer.CodeLMTokenizerV4.== infix(_:_:));
}

uint64_t Catalog.LLM.Model.CodeLMV4.hashValue.getter()
{
  return sub_256AADB94();
}

uint64_t sub_256AAD8A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AADBF0(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Model.CodeLMV4.hash(into:));
}

uint64_t (*Catalog.LLM.Model.CodeSafetyGuardrail.executionContexts.modify())()
{
  return nullsub_1;
}

void _s12ModelCatalog0B0O17ImageMagicCleanUpO015GenerativeEditsdeF0V4costAA11CostProfileVvg_0(uint64_t a1@<X8>)
{
}

void Catalog.Tokenizer.CodeSafetyGuardrailTokenizer.init()()
{
  sub_256AE20C8();
  sub_256A52518(v2);
  v0[2] = v1 | 5;
  v0[3] = 0x8000000256B49320;
  v0[4] = sub_256AB81C4((uint64_t)&unk_2705FD538);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v4 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE1F80(v4);
  sub_256AE2094(MEMORY[0x263F8EE78]);
  v0[11] = v5;
  v0[12] = &unk_2705FD4E8;
}

uint64_t _s12ModelCatalog0B0O3LLMO0A0O6CodeLMV9tokenizerAC9TokenizerO0D11LMTokenizerVvg_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v2 = *(void *)(v1 + 72);
  uint64_t v4 = *(void *)(v1 + 80);
  uint64_t v5 = *(void *)(v1 + 88);
  uint64_t v6 = *(void *)(v1 + 96);
  uint64_t v7 = *(void *)(v1 + 104);
  uint64_t v8 = *(void *)(v1 + 112);
  char v9 = *(unsigned char *)(v1 + 120);
  char v10 = *(unsigned char *)(v1 + 121);
  char v11 = *(unsigned char *)(v1 + 122);
  uint64_t v12 = *(void *)(v1 + 128);
  uint64_t v13 = *(void *)(v1 + 136);
  char v14 = *(unsigned char *)(v1 + 144);
  char v15 = *(unsigned char *)(v1 + 145);
  uint64_t v17 = *(void *)(v1 + 152);
  uint64_t v16 = *(void *)(v1 + 160);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  *(unsigned char *)(a1 + 56) = v9;
  *(unsigned char *)(a1 + 57) = v10;
  *(unsigned char *)(a1 + 58) = v11;
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = v13;
  *(unsigned char *)(a1 + 80) = v14;
  *(unsigned char *)(a1 + 81) = v15;
  *(void *)(a1 + 88) = v17;
  *(void *)(a1 + 96) = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

void Catalog.LLM.Model.CodeSafetyGuardrail.init()(uint64_t a1@<X8>)
{
  sub_256AE2524();
  sub_256A52518(v2);
  sub_256AE20F8((uint64_t)"mc.CodeSafetyGuardrail");
  *(void *)(a1 + 32) = sub_256AB81C4((uint64_t)&unk_2705E8070);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  *(void *)(inited + 32) = 26;
  *(void *)(inited + 40) = 0x8000000256B40B40;
  *(void *)(a1 + 40) = sub_256AE1DEC(inited);
  *(void *)(a1 + 48) = 240000;
  *(_WORD *)(a1 + 56) = 256;
  *(unsigned char *)(a1 + 58) = 0;
  Catalog.Tokenizer.CodeSafetyGuardrailTokenizer.init()();
  uint64_t v4 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 168) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 176) = v4;
  *(_WORD *)(a1 + 184) = 256;
  *(void *)(a1 + 192) = v4;
  *(void *)(a1 + 200) = &unk_2705E8020;
}

uint64_t Catalog.LLM.Model.CodeSafetyGuardrail.hash(into:)(uint64_t a1)
{
  return sub_256AAC120(a1, (void (*)(uint64_t))Catalog.Tokenizer.CodeSafetyGuardrailTokenizer.hash(into:));
}

void static Catalog.LLM.Model.CodeSafetyGuardrail.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AAC3A0(a1, a2, (uint64_t (*)(void *, void *))static Catalog.Tokenizer.CodeSafetyGuardrailTokenizer.== infix(_:_:));
}

uint64_t Catalog.LLM.Model.CodeSafetyGuardrail.hashValue.getter()
{
  return sub_256AADB94();
}

uint64_t sub_256AADB94()
{
  sub_256AE2608();
  v0(v2);
  return sub_256B3FF70();
}

uint64_t sub_256AADBD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AADBF0(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Model.CodeSafetyGuardrail.hash(into:));
}

uint64_t sub_256AADBF0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *))
{
  sub_256B3FF40();
  a4(v6);
  return sub_256B3FF70();
}

uint64_t (*Catalog.LLM.Model.InstructServerBase.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.Tokenizer.InstructServerTokenizer.init()()
{
  sub_256AE20A4();
  sub_256A52518(v1 + 33);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705FD340);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B570A0;
  *(void *)(inited + 32) = v1;
  *(void *)(inited + 40) = 0x8000000256B40B90;
  v0[3] = sub_256AE1EC0(inited);
  v0[4] = 0;
  sub_256AE21CC();
  sub_256AE1F34(MEMORY[0x263F8EE78]);
  v0[9] = v3;
  v0[10] = &unk_2705FD2F0;
}

uint64_t Catalog.LLM.Model.InstructServerBase.hash(into:)(uint64_t a1)
{
  return sub_256AAB920(a1, (void (*)(uint64_t))Catalog.Tokenizer.InstructServerTokenizer.hash(into:));
}

uint64_t Catalog.LLM.Model.InstructServerBase.hashValue.getter()
{
  return sub_256AAE7B8();
}

uint64_t sub_256AADD3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AAE814(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Model.InstructServerBase.hash(into:));
}

uint64_t Catalog.LLM.Model.NLRouterBase.id.getter()
{
  return sub_256A4A370();
}

uint64_t Catalog.LLM.Model.NLRouterBase.executionContexts.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t (*Catalog.LLM.Model.NLRouterBase.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.Tokenizer.NLRouterTokenizer.init()()
{
  sub_256AE1FD4();
  sub_256A52518(v1 + 13);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705FDBA8);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE214C(v3);
  sub_256AE1EB0(MEMORY[0x263F8EE78]);
  v0[9] = &unk_2705FDB80;
  v0[10] = &unk_270608FA8;
}

uint64_t Catalog.LLM.Model.NLRouterBase.dependentResourceIDs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Catalog.LLM.Model.NLRouterBase.preconditions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Catalog.LLM.Model.NLRouterBase.sideloaded.getter()
{
  return *(unsigned __int8 *)(v0 + 152);
}

uint64_t Catalog.LLM.Model.NLRouterBase.assetBacked.getter()
{
  return *(unsigned __int8 *)(v0 + 153);
}

uint64_t Catalog.LLM.Model.NLRouterBase.tags.getter()
{
  return swift_bridgeObjectRetain();
}

void Catalog.LLM.Model.NLRouterBase.init()()
{
  sub_256AE21F0();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705E6EF0);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE1F64(v3, 0xA980u);
  Catalog.Tokenizer.NLRouterTokenizer.init()();
  sub_256AE2414(MEMORY[0x263F8EE78]);
  v0[20] = &unk_2705E6EC8;
  v0[21] = &unk_270608FF8;
}

uint64_t Catalog.LLM.Model.NLRouterBase.hash(into:)(uint64_t a1)
{
  return sub_256AAB920(a1, (void (*)(uint64_t))Catalog.Tokenizer.NLRouterTokenizer.hash(into:));
}

void static Catalog.LLM.Model.NLRouterBase.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA3AA4(a1, a2, (uint64_t (*)(uint64_t *, uint64_t *))static Catalog.Tokenizer.NLRouterTokenizer.== infix(_:_:));
}

uint64_t Catalog.LLM.Model.NLRouterBase.hashValue.getter()
{
  return sub_256AAE7B8();
}

uint64_t sub_256AADF84@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Catalog.LLM.Model.NLRouterBase.id.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_256AADFB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AAE814(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Model.NLRouterBase.hash(into:));
}

uint64_t (*Catalog.LLM.Model.PQAVerificationBase.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Model.PQAVerificationBase.init()()
{
  sub_256AE27BC();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_270609048);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE1F64(v3, 0xA980u);
  Catalog.Tokenizer.AFMTextInstructEnglish49k.init()();
  sub_256AE2414(MEMORY[0x263F8EE78]);
  v0[20] = v4;
  v0[21] = &unk_270609080;
}

uint64_t Catalog.LLM.Model.PQAVerificationBase.hash(into:)(uint64_t a1)
{
  return sub_256AAB920(a1, (void (*)(uint64_t))Catalog.Tokenizer.AFMTextInstructEnglish49k.hash(into:));
}

void static Catalog.LLM.Model.PQAVerificationBase.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA3AA4(a1, a2, (uint64_t (*)(uint64_t *, uint64_t *))static Catalog.Tokenizer.AFMTextInstructEnglish49k.== infix(_:_:));
}

uint64_t Catalog.LLM.Model.PQAVerificationBase.hashValue.getter()
{
  return sub_256AAE7B8();
}

uint64_t sub_256AAE0D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AAE814(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Model.PQAVerificationBase.hash(into:));
}

uint64_t (*Catalog.LLM.Model.PhotosMemoriesCreationBase.executionContexts.modify())()
{
  return nullsub_1;
}

uint64_t Catalog.LLM.Model.PhotosMemoriesCreationBase.hash(into:)(uint64_t a1)
{
  return sub_256AAB920(a1, (void (*)(uint64_t))Catalog.Tokenizer.AFMTextInstructEnglish49k.hash(into:));
}

uint64_t Catalog.LLM.Model.PhotosMemoriesCreationBase.hashValue.getter()
{
  return sub_256AAE7B8();
}

uint64_t sub_256AAE150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AAE814(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Model.PhotosMemoriesCreationBase.hash(into:));
}

uint64_t (*Catalog.LLM.Model.SafetyGuardrailLite.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.Tokenizer.SafetyGuardrailLiteTokenizer.init()()
{
  sub_256AE24D8();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705FD710);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE214C(v3);
  sub_256AE1F0C(MEMORY[0x263F8EE78]);
  v0[9] = v4;
  v0[10] = &unk_2705FD6C0;
}

void Catalog.LLM.Model.SafetyGuardrailLite.init()()
{
  sub_256AE27BC();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705E8248);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE1F64(v3, 0xA980u);
  Catalog.Tokenizer.SafetyGuardrailLiteTokenizer.init()();
  sub_256AE2414(MEMORY[0x263F8EE78]);
  v0[20] = v4;
  v0[21] = &unk_2705E81F8;
}

uint64_t Catalog.LLM.Model.SafetyGuardrailLite.hash(into:)(uint64_t a1)
{
  return sub_256AAB920(a1, (void (*)(uint64_t))Catalog.Tokenizer.SafetyGuardrailLiteTokenizer.hash(into:));
}

void static Catalog.LLM.Model.SafetyGuardrailLite.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA3AA4(a1, a2, (uint64_t (*)(uint64_t *, uint64_t *))static Catalog.Tokenizer.SafetyGuardrailLiteTokenizer.== infix(_:_:));
}

uint64_t Catalog.LLM.Model.SafetyGuardrailLite.hashValue.getter()
{
  return sub_256AAE7B8();
}

uint64_t sub_256AAE304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AAE814(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Model.SafetyGuardrailLite.hash(into:));
}

uint64_t (*Catalog.LLM.Model.SummarizationTextSummarizerAjaxBase.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Model.SummarizationTextSummarizerAjaxBase.init()(void *a1@<X8>)
{
  sub_256A52518(0xD00000000000003DLL);
  a1[2] = sub_256AB81C4((uint64_t)&unk_2705E8AD8);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  *(void *)(inited + 32) = 2019650145;
  *(void *)(inited + 40) = 0xE400000000000000;
  uint64_t v3 = sub_256AE1DEC(inited);
  sub_256AE2584(v3);
  sub_256AE2578(MEMORY[0x263F8EE78]);
  a1[20] = v4;
  a1[21] = &unk_2705E8A88;
}

uint64_t Catalog.LLM.Model.SummarizationTextSummarizerAjaxBase.hash(into:)(uint64_t a1)
{
  return sub_256AAB920(a1, (void (*)(uint64_t))Catalog.Tokenizer.InstructServerTokenizer.hash(into:));
}

void static Catalog.LLM.Model.SummarizationTextSummarizerAjaxBase.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA3AA4(a1, a2, (uint64_t (*)(uint64_t *, uint64_t *))static Catalog.Tokenizer.InstructServerTokenizer.== infix(_:_:));
}

uint64_t Catalog.LLM.Model.SummarizationTextSummarizerAjaxBase.hashValue.getter()
{
  return sub_256AAE7B8();
}

uint64_t sub_256AAE430(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AAE814(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Model.SummarizationTextSummarizerAjaxBase.hash(into:));
}

uint64_t (*Catalog.LLM.Model.SummarizationTextSummarizerBase.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.Model.SummarizationTextSummarizerBase.init()()
{
  sub_256AE244C();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705E8728);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"private-ml-client");
  sub_256AE2584(v3);
  sub_256AE2578(MEMORY[0x263F8EE78]);
  v0[20] = v4;
  v0[21] = &unk_2705E86D8;
}

uint64_t Catalog.LLM.Model.SummarizationTextSummarizerBase.hash(into:)(uint64_t a1)
{
  return sub_256AAB920(a1, (void (*)(uint64_t))Catalog.Tokenizer.InstructServerTokenizer.hash(into:));
}

void static Catalog.LLM.Model.SummarizationTextSummarizerBase.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA3AA4(a1, a2, (uint64_t (*)(uint64_t *, uint64_t *))static Catalog.Tokenizer.InstructServerTokenizer.== infix(_:_:));
}

uint64_t Catalog.LLM.Model.SummarizationTextSummarizerBase.hashValue.getter()
{
  return sub_256AAE7B8();
}

uint64_t sub_256AAE548(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AAE814(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Model.SummarizationTextSummarizerBase.hash(into:));
}

uint64_t (*Catalog.LLM.Model.VisualGenerationQueryHandlingLite.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.Tokenizer.VisualGenerationQueryHandlingLiteTokenizer.init()()
{
  sub_256AE1FD4();
  sub_256A52518(v1 + 23);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705FDA98);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  v0[3] = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  v0[4] = 0;
  sub_256AE21CC();
  sub_256AE1F0C(MEMORY[0x263F8EE78]);
  v0[9] = v3;
  v0[10] = &unk_2705FDA48;
}

uint64_t _s12ModelCatalog0B0O3LLMO0A0O23AFMTextInstruct300MBaseV9tokenizerAC9TokenizerO0dE10MTokenizerVvg_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 48);
  uint64_t v2 = *(void *)(v1 + 56);
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = *(void *)(v1 + 72);
  uint64_t v6 = *(void *)(v1 + 80);
  char v7 = *(unsigned char *)(v1 + 88);
  char v8 = *(unsigned char *)(v1 + 89);
  char v9 = *(unsigned char *)(v1 + 90);
  uint64_t v10 = *(void *)(v1 + 96);
  uint64_t v11 = *(void *)(v1 + 104);
  char v12 = *(unsigned char *)(v1 + 112);
  char v13 = *(unsigned char *)(v1 + 113);
  uint64_t v15 = *(void *)(v1 + 120);
  uint64_t v14 = *(void *)(v1 + 128);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 40) = v7;
  *(unsigned char *)(a1 + 41) = v8;
  *(unsigned char *)(a1 + 42) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(unsigned char *)(a1 + 64) = v12;
  *(unsigned char *)(a1 + 65) = v13;
  *(void *)(a1 + 72) = v15;
  *(void *)(a1 + 80) = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

void Catalog.LLM.Model.VisualGenerationQueryHandlingLite.init()()
{
  sub_256AE27D0();
  sub_256A52518(v1);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705E8900);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"token-generation-inference");
  sub_256AE1F64(v3, 0xA980u);
  Catalog.Tokenizer.VisualGenerationQueryHandlingLiteTokenizer.init()();
  sub_256AE2414(MEMORY[0x263F8EE78]);
  v0[20] = v4;
  v0[21] = &unk_2705E88B0;
}

uint64_t Catalog.LLM.Model.VisualGenerationQueryHandlingLite.hash(into:)(uint64_t a1)
{
  return sub_256AAB920(a1, (void (*)(uint64_t))Catalog.Tokenizer.VisualGenerationQueryHandlingLiteTokenizer.hash(into:));
}

void static Catalog.LLM.Model.VisualGenerationQueryHandlingLite.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_256AA3AA4(a1, a2, (uint64_t (*)(uint64_t *, uint64_t *))static Catalog.Tokenizer.VisualGenerationQueryHandlingLiteTokenizer.== infix(_:_:));
}

uint64_t Catalog.LLM.Model.VisualGenerationQueryHandlingLite.hashValue.getter()
{
  return sub_256AAE7B8();
}

uint64_t sub_256AAE7B8()
{
  sub_256AE2608();
  v0(v2);
  return sub_256B3FF70();
}

uint64_t sub_256AAE7FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AAE814(a1, a2, a3, (void (*)(unsigned char *))Catalog.LLM.Model.VisualGenerationQueryHandlingLite.hash(into:));
}

uint64_t sub_256AAE814(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *))
{
  sub_256B3FF40();
  a4(v6);
  return sub_256B3FF70();
}

uint64_t (*Catalog.LLM.ServerConfiguration.AnswerSynthesisServer.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.ServerConfiguration.AnswerSynthesisServer.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000037;
  *(void *)(a1 + 8) = 0x8000000256B424F0;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.LLM.ServerConfiguration.AnswerSynthesisServer.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.AnswerSynthesisServer.hash(into:));
}

uint64_t sub_256AAE8F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.AnswerSynthesisServer.hash(into:));
}

uint64_t (*Catalog.LLM.ServerConfiguration.InstructServerBase.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.ServerConfiguration.InstructServerBase.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD00000000000002BLL;
  *(void *)(a1 + 8) = 0x8000000256B42F40;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.LLM.ServerConfiguration.InstructServerBase.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.InstructServerBase.hash(into:));
}

uint64_t sub_256AAE9A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.InstructServerBase.hash(into:));
}

uint64_t (*Catalog.LLM.ServerConfiguration.NLRouterBase.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.ServerConfiguration.NLRouterBase.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000021;
  *(void *)(a1 + 8) = 0x8000000256B433C0;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.LLM.ServerConfiguration.NLRouterBase.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.NLRouterBase.hash(into:));
}

uint64_t sub_256AAEA54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.NLRouterBase.hash(into:));
}

uint64_t (*Catalog.LLM.ServerConfiguration.OpenEndedSchema.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.ServerConfiguration.OpenEndedSchema.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000038;
  *(void *)(a1 + 8) = 0x8000000256B434B0;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.LLM.ServerConfiguration.OpenEndedSchema.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.OpenEndedSchema.hash(into:));
}

uint64_t sub_256AAEB04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.OpenEndedSchema.hash(into:));
}

uint64_t (*Catalog.LLM.ServerConfiguration.OpenEndedTone.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.ServerConfiguration.OpenEndedTone.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000036;
  *(void *)(a1 + 8) = 0x8000000256B43570;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.LLM.ServerConfiguration.OpenEndedTone.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.OpenEndedTone.hash(into:));
}

uint64_t sub_256AAEBB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.OpenEndedTone.hash(into:));
}

uint64_t (*Catalog.LLM.ServerConfiguration.OpenEndedToneBase.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.ServerConfiguration.OpenEndedToneBase.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD00000000000003BLL;
  *(void *)(a1 + 8) = 0x8000000256B435B0;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.LLM.ServerConfiguration.OpenEndedToneBase.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.OpenEndedToneBase.hash(into:));
}

uint64_t sub_256AAEC64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.OpenEndedToneBase.hash(into:));
}

uint64_t (*Catalog.LLM.ServerConfiguration.OpenEndedToneQueryResponse.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.ServerConfiguration.OpenEndedToneQueryResponse.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000045;
  *(void *)(a1 + 8) = 0x8000000256B43690;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.LLM.ServerConfiguration.OpenEndedToneQueryResponse.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.OpenEndedToneQueryResponse.hash(into:));
}

uint64_t sub_256AAED14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.OpenEndedToneQueryResponse.hash(into:));
}

uint64_t (*Catalog.LLM.ServerConfiguration.OpenEndedToneV2.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.ServerConfiguration.OpenEndedToneV2.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000039;
  *(void *)(a1 + 8) = 0x8000000256B436E0;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.LLM.ServerConfiguration.OpenEndedToneV2.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.OpenEndedToneV2.hash(into:));
}

uint64_t sub_256AAEDC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.OpenEndedToneV2.hash(into:));
}

uint64_t (*Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationAssetCuration.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationAssetCuration.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000045;
  *(void *)(a1 + 8) = 0x8000000256B43990;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationAssetCuration.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationAssetCuration.hash(into:));
}

uint64_t sub_256AAEE74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationAssetCuration.hash(into:));
}

uint64_t (*Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationAssetCurationV2.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationAssetCurationV2.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000048;
  *(void *)(a1 + 8) = 0x8000000256B43A90;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationAssetCurationV2.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationAssetCurationV2.hash(into:));
}

uint64_t sub_256AAEF2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationAssetCurationV2.hash(into:));
}

uint64_t (*Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationBase.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationBase.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000031;
  *(void *)(a1 + 8) = 0x8000000256B43AE0;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationBase.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationBase.hash(into:));
}

uint64_t sub_256AAEFDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationBase.hash(into:));
}

uint64_t (*Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationGlobalTraits.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationGlobalTraits.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000044;
  *(void *)(a1 + 8) = 0x8000000256B43CC0;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationGlobalTraits.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationGlobalTraits.hash(into:));
}

uint64_t sub_256AAF08C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationGlobalTraits.hash(into:));
}

uint64_t (*Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationGlobalTraitsV2.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationGlobalTraitsV2.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000047;
  *(void *)(a1 + 8) = 0x8000000256B43DB0;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationGlobalTraitsV2.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationGlobalTraitsV2.hash(into:));
}

uint64_t sub_256AAF144(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationGlobalTraitsV2.hash(into:));
}

uint64_t (*Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationQueryUnderstanding.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationQueryUnderstanding.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD00000000000004ALL;
  *(void *)(a1 + 8) = 0x8000000256B43EF0;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationQueryUnderstanding.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationQueryUnderstanding.hash(into:));
}

uint64_t sub_256AAF1F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationQueryUnderstanding.hash(into:));
}

uint64_t (*Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationQueryUnderstandingV2.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationQueryUnderstandingV2.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD00000000000004DLL;
  *(void *)(a1 + 8) = 0x8000000256B43FF0;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationQueryUnderstandingV2.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationQueryUnderstandingV2.hash(into:));
}

uint64_t sub_256AAF2A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationQueryUnderstandingV2.hash(into:));
}

uint64_t (*Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationQueryUnderstandingV3.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationQueryUnderstandingV3.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD00000000000004DLL;
  *(void *)(a1 + 8) = 0x8000000256B440F0;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationQueryUnderstandingV3.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationQueryUnderstandingV3.hash(into:));
}

uint64_t sub_256AAF35C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationQueryUnderstandingV3.hash(into:));
}

uint64_t (*Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationStoryteller.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationStoryteller.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000042;
  *(void *)(a1 + 8) = 0x8000000256B44260;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationStoryteller.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationStoryteller.hash(into:));
}

uint64_t sub_256AAF40C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationStoryteller.hash(into:));
}

uint64_t (*Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationStorytellerV2.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationStorytellerV2.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000045;
  *(void *)(a1 + 8) = 0x8000000256B44350;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationStorytellerV2.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationStorytellerV2.hash(into:));
}

uint64_t sub_256AAF4C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.PhotosMemoriesCreationStorytellerV2.hash(into:));
}

uint64_t (*Catalog.LLM.ServerConfiguration.Planner.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.ServerConfiguration.Planner.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD00000000000002ELL;
  *(void *)(a1 + 8) = 0x8000000256B444A0;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.LLM.ServerConfiguration.Planner.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.Planner.hash(into:));
}

uint64_t sub_256AAF574(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.Planner.hash(into:));
}

uint64_t (*Catalog.LLM.ServerConfiguration.PlannerV2.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.ServerConfiguration.PlannerV2.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000031;
  *(void *)(a1 + 8) = 0x8000000256B44550;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.LLM.ServerConfiguration.PlannerV2.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.PlannerV2.hash(into:));
}

uint64_t sub_256AAF624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.PlannerV2.hash(into:));
}

uint64_t (*Catalog.LLM.ServerConfiguration.PlannerV3.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.ServerConfiguration.PlannerV3.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000031;
  *(void *)(a1 + 8) = 0x8000000256B44610;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.LLM.ServerConfiguration.PlannerV3.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.PlannerV3.hash(into:));
}

uint64_t sub_256AAF6D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.PlannerV3.hash(into:));
}

uint64_t (*Catalog.LLM.ServerConfiguration.PrivateCloudResearchAdapter.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.ServerConfiguration.PrivateCloudResearchAdapter.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000024;
  *(void *)(a1 + 8) = 0x8000000256B44650;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.LLM.ServerConfiguration.PrivateCloudResearchAdapter.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.PrivateCloudResearchAdapter.hash(into:));
}

uint64_t sub_256AAF784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.PrivateCloudResearchAdapter.hash(into:));
}

uint64_t (*Catalog.LLM.ServerConfiguration.ResponseGeneration.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.ServerConfiguration.ResponseGeneration.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD00000000000003ALL;
  *(void *)(a1 + 8) = 0x8000000256B44840;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.LLM.ServerConfiguration.ResponseGeneration.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.ResponseGeneration.hash(into:));
}

uint64_t sub_256AAF834(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.ResponseGeneration.hash(into:));
}

uint64_t (*Catalog.LLM.ServerConfiguration.ResponseGenerationV2.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.ServerConfiguration.ResponseGenerationV2.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD00000000000003DLL;
  *(void *)(a1 + 8) = 0x8000000256B44910;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.LLM.ServerConfiguration.ResponseGenerationV2.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.ResponseGenerationV2.hash(into:));
}

uint64_t sub_256AAF8E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.ResponseGenerationV2.hash(into:));
}

uint64_t (*Catalog.LLM.ServerConfiguration.ResponseGenerationV3.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.ServerConfiguration.ResponseGenerationV3.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD00000000000003DLL;
  *(void *)(a1 + 8) = 0x8000000256B449E0;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.LLM.ServerConfiguration.ResponseGenerationV3.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.ResponseGenerationV3.hash(into:));
}

uint64_t sub_256AAF994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.ResponseGenerationV3.hash(into:));
}

uint64_t (*Catalog.LLM.ServerConfiguration.SearchQueryUnderstandingServer.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.ServerConfiguration.SearchQueryUnderstandingServer.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000041;
  *(void *)(a1 + 8) = 0x8000000256B44CB0;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.LLM.ServerConfiguration.SearchQueryUnderstandingServer.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.SearchQueryUnderstandingServer.hash(into:));
}

uint64_t sub_256AAFA44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.SearchQueryUnderstandingServer.hash(into:));
}

uint64_t (*Catalog.LLM.ServerConfiguration.ServerBulletsTransform.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.ServerConfiguration.ServerBulletsTransform.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000038;
  *(void *)(a1 + 8) = 0x8000000256B44D90;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.LLM.ServerConfiguration.ServerBulletsTransform.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.ServerBulletsTransform.hash(into:));
}

uint64_t sub_256AAFAFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.ServerBulletsTransform.hash(into:));
}

uint64_t (*Catalog.LLM.ServerConfiguration.ServerConciseTone.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.ServerConfiguration.ServerConciseTone.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000033;
  *(void *)(a1 + 8) = 0x8000000256B44E50;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.LLM.ServerConfiguration.ServerConciseTone.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.ServerConciseTone.hash(into:));
}

uint64_t sub_256AAFBB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.ServerConciseTone.hash(into:));
}

uint64_t (*Catalog.LLM.ServerConfiguration.ServerFriendlyTone.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.ServerConfiguration.ServerFriendlyTone.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000034;
  *(void *)(a1 + 8) = 0x8000000256B44F10;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.LLM.ServerConfiguration.ServerFriendlyTone.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.ServerFriendlyTone.hash(into:));
}

uint64_t sub_256AAFC6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.ServerFriendlyTone.hash(into:));
}

uint64_t (*Catalog.LLM.ServerConfiguration.ServerMagicRewrite.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.ServerConfiguration.ServerMagicRewrite.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000034;
  *(void *)(a1 + 8) = 0x8000000256B44FD0;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.LLM.ServerConfiguration.ServerMagicRewrite.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.ServerMagicRewrite.hash(into:));
}

uint64_t sub_256AAFD24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.ServerMagicRewrite.hash(into:));
}

uint64_t (*Catalog.LLM.ServerConfiguration.ServerMailReplyLongFormBasic.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.ServerConfiguration.ServerMailReplyLongFormBasic.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000041;
  *(void *)(a1 + 8) = 0x8000000256B450B0;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.LLM.ServerConfiguration.ServerMailReplyLongFormBasic.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.ServerMailReplyLongFormBasic.hash(into:));
}

uint64_t sub_256AAFDDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.ServerMailReplyLongFormBasic.hash(into:));
}

uint64_t (*Catalog.LLM.ServerConfiguration.ServerMailReplyLongFormRewrite.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.ServerConfiguration.ServerMailReplyLongFormRewrite.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000043;
  *(void *)(a1 + 8) = 0x8000000256B451A0;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.LLM.ServerConfiguration.ServerMailReplyLongFormRewrite.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.ServerMailReplyLongFormRewrite.hash(into:));
}

uint64_t sub_256AAFE94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.ServerMailReplyLongFormRewrite.hash(into:));
}

uint64_t (*Catalog.LLM.ServerConfiguration.ServerMailReplyQA.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.ServerConfiguration.ServerMailReplyQA.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000034;
  *(void *)(a1 + 8) = 0x8000000256B45270;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.LLM.ServerConfiguration.ServerMailReplyQA.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.ServerMailReplyQA.hash(into:));
}

uint64_t sub_256AAFF4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.ServerMailReplyQA.hash(into:));
}

uint64_t (*Catalog.LLM.ServerConfiguration.ServerProfessionalTone.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.ServerConfiguration.ServerProfessionalTone.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000038;
  *(void *)(a1 + 8) = 0x8000000256B45340;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.LLM.ServerConfiguration.ServerProfessionalTone.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.ServerProfessionalTone.hash(into:));
}

uint64_t sub_256AB0004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.ServerProfessionalTone.hash(into:));
}

uint64_t (*Catalog.LLM.ServerConfiguration.ServerProofreadingReview.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.ServerConfiguration.ServerProofreadingReview.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD00000000000003ALL;
  *(void *)(a1 + 8) = 0x8000000256B45410;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.LLM.ServerConfiguration.ServerProofreadingReview.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.ServerProofreadingReview.hash(into:));
}

uint64_t sub_256AB00B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.ServerProofreadingReview.hash(into:));
}

uint64_t (*Catalog.LLM.ServerConfiguration.ServerTablesTransform.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.ServerConfiguration.ServerTablesTransform.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000037;
  *(void *)(a1 + 8) = 0x8000000256B454D0;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.LLM.ServerConfiguration.ServerTablesTransform.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.ServerTablesTransform.hash(into:));
}

uint64_t sub_256AB016C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.ServerTablesTransform.hash(into:));
}

uint64_t (*Catalog.LLM.ServerConfiguration.ServerTakeawaysTransform.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.ServerConfiguration.ServerTakeawaysTransform.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD00000000000003ALL;
  *(void *)(a1 + 8) = 0x8000000256B455A0;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.LLM.ServerConfiguration.ServerTakeawaysTransform.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.ServerTakeawaysTransform.hash(into:));
}

uint64_t sub_256AB0224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.ServerTakeawaysTransform.hash(into:));
}

uint64_t (*Catalog.LLM.ServerConfiguration.ServerTextSummarizer.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.ServerConfiguration.ServerTextSummarizer.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000036;
  *(void *)(a1 + 8) = 0x8000000256B45660;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.LLM.ServerConfiguration.ServerTextSummarizer.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.ServerTextSummarizer.hash(into:));
}

uint64_t sub_256AB02DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.ServerTextSummarizer.hash(into:));
}

uint64_t (*Catalog.LLM.ServerConfiguration.SummarizationTextSummarizerAjaxBase.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.ServerConfiguration.SummarizationTextSummarizerAjaxBase.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000036;
  *(void *)(a1 + 8) = 0x8000000256B45B80;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.LLM.ServerConfiguration.SummarizationTextSummarizerAjaxBase.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.SummarizationTextSummarizerAjaxBase.hash(into:));
}

uint64_t sub_256AB038C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.SummarizationTextSummarizerAjaxBase.hash(into:));
}

uint64_t (*Catalog.LLM.ServerConfiguration.VisualIntelligence.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.LLM.ServerConfiguration.VisualIntelligence.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD00000000000003ALL;
  *(void *)(a1 + 8) = 0x8000000256B45E60;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.LLM.ServerConfiguration.VisualIntelligence.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.VisualIntelligence.hash(into:));
}

uint64_t sub_256AB043C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.LLM.ServerConfiguration.VisualIntelligence.hash(into:));
}

uint64_t Catalog.ModelConfigurationReplacement.All.id.getter()
{
  return sub_256A4A370();
}

uint64_t Catalog.ModelConfigurationReplacement.All.executionContexts.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t (*Catalog.ModelConfigurationReplacement.All.executionContexts.modify())()
{
  return nullsub_1;
}

uint64_t Catalog.ModelConfigurationReplacement.All.dependentResourceIDs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Catalog.ModelConfigurationReplacement.All.preconditions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Catalog.ModelConfigurationReplacement.All.sideloaded.getter()
{
  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t Catalog.ModelConfigurationReplacement.All.assetBacked.getter()
{
  return *(unsigned __int8 *)(v0 + 65);
}

uint64_t Catalog.ModelConfigurationReplacement.All.platforms.getter()
{
  return swift_bridgeObjectRetain();
}

void Catalog.ModelConfigurationReplacement.All.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000027;
  *(void *)(a1 + 8) = 0x8000000256B42340;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.ModelConfigurationReplacement.All.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.ModelConfigurationReplacement.All.hash(into:));
}

uint64_t sub_256AB0574@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Catalog.ModelConfigurationReplacement.All.id.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_256AB05A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.ModelConfigurationReplacement.All.hash(into:));
}

uint64_t (*Catalog.Sanitizer.TextModerationLM.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.Sanitizer.TextModerationLM.init()()
{
  sub_256AE1FC4();
  sub_256A52518(v1 + 12);
  v0[2] = sub_256AB81C4((uint64_t)&unk_2705FC700);
  sub_256A39D2C(&qword_26B2B33F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_256B57080;
  uint64_t v3 = sub_256AE1DC0(inited, (uint64_t)"safety-generation-inference");
  sub_256AE1F28(v3);
  sub_256AE1F34(MEMORY[0x263F8EE78]);
  v0[9] = v4;
  v0[10] = &unk_2705FC6B0;
}

uint64_t Catalog.Sanitizer.TextModerationLM.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.Sanitizer.TextModerationLM.hash(into:));
}

uint64_t sub_256AB0690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.Sanitizer.TextModerationLM.hash(into:));
}

uint64_t (*Catalog.TokenInputDenyList.CodeIntelligenceBaseInputDenyList.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.TokenInputDenyList.CodeIntelligenceBaseInputDenyList.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000035;
  *(void *)(a1 + 8) = 0x8000000256B40D10;
  *(void *)(a1 + 16) = 0xD000000000000024;
  *(void *)(a1 + 24) = 0x8000000256B49360;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 32) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 40) = v1;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 55) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 64) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 72) = v2;
  *(_WORD *)(a1 + 80) = 256;
  sub_256AE26EC(a1);
}

uint64_t Catalog.TokenInputDenyList.CodeIntelligenceBaseInputDenyList.hashValue.getter()
{
  return sub_256AA84E4((void (*)(void *))Catalog.TokenInputDenyList.CodeIntelligenceBaseInputDenyList.hash(into:));
}

uint64_t sub_256AB075C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA85C0(a1, a2, a3, (void (*)(void *))Catalog.TokenInputDenyList.CodeIntelligenceBaseInputDenyList.hash(into:));
}

uint64_t (*Catalog.TokenInputDenyList.GenerativeAssistantCompositionInputDenyList.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.TokenInputDenyList.GenerativeAssistantCompositionInputDenyList.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD00000000000003FLL;
  *(void *)(a1 + 8) = 0x8000000256B42B90;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.TokenInputDenyList.GenerativeAssistantCompositionInputDenyList.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.TokenInputDenyList.GenerativeAssistantCompositionInputDenyList.hash(into:));
}

uint64_t sub_256AB080C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.TokenInputDenyList.GenerativeAssistantCompositionInputDenyList.hash(into:));
}

uint64_t (*Catalog.TokenInputDenyList.GenerativeAssistantKnowledgeFallbackInputDenyList.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.TokenInputDenyList.GenerativeAssistantKnowledgeFallbackInputDenyList.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000046;
  *(void *)(a1 + 8) = 0x8000000256B42C20;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.TokenInputDenyList.GenerativeAssistantKnowledgeFallbackInputDenyList.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.TokenInputDenyList.GenerativeAssistantKnowledgeFallbackInputDenyList.hash(into:));
}

uint64_t sub_256AB08BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.TokenInputDenyList.GenerativeAssistantKnowledgeFallbackInputDenyList.hash(into:));
}

uint64_t (*Catalog.TokenInputDenyList.GenerativeAssistantKnowledgeInputDenyList.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.TokenInputDenyList.GenerativeAssistantKnowledgeInputDenyList.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD00000000000003DLL;
  *(void *)(a1 + 8) = 0x8000000256B42CC0;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.TokenInputDenyList.GenerativeAssistantKnowledgeInputDenyList.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.TokenInputDenyList.GenerativeAssistantKnowledgeInputDenyList.hash(into:));
}

uint64_t sub_256AB096C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.TokenInputDenyList.GenerativeAssistantKnowledgeInputDenyList.hash(into:));
}

uint64_t (*Catalog.TokenInputDenyList.GenerativeAssistantMediaQAInputDenyList.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.TokenInputDenyList.GenerativeAssistantMediaQAInputDenyList.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD00000000000003CLL;
  *(void *)(a1 + 8) = 0x8000000256B42D40;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.TokenInputDenyList.GenerativeAssistantMediaQAInputDenyList.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.TokenInputDenyList.GenerativeAssistantMediaQAInputDenyList.hash(into:));
}

uint64_t sub_256AB0A1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.TokenInputDenyList.GenerativeAssistantMediaQAInputDenyList.hash(into:));
}

uint64_t (*Catalog.TokenInputDenyList.GenerativeAssistantVisualIntelligenceCameraInputDenyList.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.TokenInputDenyList.GenerativeAssistantVisualIntelligenceCameraInputDenyList.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD00000000000004ELL;
  *(void *)(a1 + 8) = 0x8000000256B42DC0;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.TokenInputDenyList.GenerativeAssistantVisualIntelligenceCameraInputDenyList.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.TokenInputDenyList.GenerativeAssistantVisualIntelligenceCameraInputDenyList.hash(into:));
}

uint64_t sub_256AB0ACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.TokenInputDenyList.GenerativeAssistantVisualIntelligenceCameraInputDenyList.hash(into:));
}

uint64_t (*Catalog.TokenInputDenyList.MailReplyLongFormBasicInputDenyList.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.TokenInputDenyList.MailReplyLongFormBasicInputDenyList.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000039;
  *(void *)(a1 + 8) = 0x8000000256B43090;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.TokenInputDenyList.MailReplyLongFormBasicInputDenyList.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.TokenInputDenyList.MailReplyLongFormBasicInputDenyList.hash(into:));
}

uint64_t sub_256AB0B84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.TokenInputDenyList.MailReplyLongFormBasicInputDenyList.hash(into:));
}

uint64_t (*Catalog.TokenInputDenyList.MailReplyLongFormQAInputDenyList.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.TokenInputDenyList.MailReplyLongFormQAInputDenyList.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000036;
  *(void *)(a1 + 8) = 0x8000000256B43110;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.TokenInputDenyList.MailReplyLongFormQAInputDenyList.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.TokenInputDenyList.MailReplyLongFormQAInputDenyList.hash(into:));
}

uint64_t sub_256AB0C3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.TokenInputDenyList.MailReplyLongFormQAInputDenyList.hash(into:));
}

uint64_t (*Catalog.TokenInputDenyList.MailReplyLongFormRewriteInputDenyList.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.TokenInputDenyList.MailReplyLongFormRewriteInputDenyList.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD00000000000003BLL;
  *(void *)(a1 + 8) = 0x8000000256B43190;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.TokenInputDenyList.MailReplyLongFormRewriteInputDenyList.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.TokenInputDenyList.MailReplyLongFormRewriteInputDenyList.hash(into:));
}

uint64_t sub_256AB0CF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.TokenInputDenyList.MailReplyLongFormRewriteInputDenyList.hash(into:));
}

uint64_t (*Catalog.TokenInputDenyList.MailReplySnippetInputDenyList.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.TokenInputDenyList.MailReplySnippetInputDenyList.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000031;
  *(void *)(a1 + 8) = 0x8000000256B43210;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.TokenInputDenyList.MailReplySnippetInputDenyList.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.TokenInputDenyList.MailReplySnippetInputDenyList.hash(into:));
}

uint64_t sub_256AB0DAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.TokenInputDenyList.MailReplySnippetInputDenyList.hash(into:));
}

uint64_t (*Catalog.TokenInputDenyList.MessagesReplyBaseInputDenyList.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.TokenInputDenyList.MessagesReplyBaseInputDenyList.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000031;
  *(void *)(a1 + 8) = 0x8000000256B43310;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.TokenInputDenyList.MessagesReplyBaseInputDenyList.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.TokenInputDenyList.MessagesReplyBaseInputDenyList.hash(into:));
}

uint64_t sub_256AB0E64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.TokenInputDenyList.MessagesReplyBaseInputDenyList.hash(into:));
}

uint64_t (*Catalog.TokenInputDenyList.PhotosMemoriesCreationBaseInputDenyList.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.TokenInputDenyList.PhotosMemoriesCreationBaseInputDenyList.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000033;
  *(void *)(a1 + 8) = 0x8000000256B43B20;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.TokenInputDenyList.PhotosMemoriesCreationBaseInputDenyList.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.TokenInputDenyList.PhotosMemoriesCreationBaseInputDenyList.hash(into:));
}

uint64_t sub_256AB0F1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.TokenInputDenyList.PhotosMemoriesCreationBaseInputDenyList.hash(into:));
}

uint64_t (*Catalog.TokenInputDenyList.PhotosMemoriesCreationGlobalTraitInputDenyList.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.TokenInputDenyList.PhotosMemoriesCreationGlobalTraitInputDenyList.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD00000000000003BLL;
  *(void *)(a1 + 8) = 0x8000000256B43BA0;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.TokenInputDenyList.PhotosMemoriesCreationGlobalTraitInputDenyList.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.TokenInputDenyList.PhotosMemoriesCreationGlobalTraitInputDenyList.hash(into:));
}

uint64_t sub_256AB0FD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.TokenInputDenyList.PhotosMemoriesCreationGlobalTraitInputDenyList.hash(into:));
}

uint64_t (*Catalog.TokenInputDenyList.PhotosMemoriesCreationStoryTitleInputDenyList.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.TokenInputDenyList.PhotosMemoriesCreationStoryTitleInputDenyList.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD00000000000003ALL;
  *(void *)(a1 + 8) = 0x8000000256B44140;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.TokenInputDenyList.PhotosMemoriesCreationStoryTitleInputDenyList.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.TokenInputDenyList.PhotosMemoriesCreationStoryTitleInputDenyList.hash(into:));
}

uint64_t sub_256AB108C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.TokenInputDenyList.PhotosMemoriesCreationStoryTitleInputDenyList.hash(into:));
}

uint64_t (*Catalog.TokenInputDenyList.PhotosMemoriesCreationUserQueryInputDenyList.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.TokenInputDenyList.PhotosMemoriesCreationUserQueryInputDenyList.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000039;
  *(void *)(a1 + 8) = 0x8000000256B443A0;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.TokenInputDenyList.PhotosMemoriesCreationUserQueryInputDenyList.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.TokenInputDenyList.PhotosMemoriesCreationUserQueryInputDenyList.hash(into:));
}

uint64_t sub_256AB1144(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.TokenInputDenyList.PhotosMemoriesCreationUserQueryInputDenyList.hash(into:));
}

uint64_t (*Catalog.TokenInputDenyList.SummarizationKitBaseInputDenyList.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.TokenInputDenyList.SummarizationKitBaseInputDenyList.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000031;
  *(void *)(a1 + 8) = 0x8000000256B45780;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.TokenInputDenyList.SummarizationKitBaseInputDenyList.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.TokenInputDenyList.SummarizationKitBaseInputDenyList.hash(into:));
}

uint64_t sub_256AB11FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.TokenInputDenyList.SummarizationKitBaseInputDenyList.hash(into:));
}

uint64_t (*Catalog.TokenInputDenyList.SummarizationKitCUSummaryInputDenyList.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.TokenInputDenyList.SummarizationKitCUSummaryInputDenyList.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000037;
  *(void *)(a1 + 8) = 0x8000000256B45800;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.TokenInputDenyList.SummarizationKitCUSummaryInputDenyList.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.TokenInputDenyList.SummarizationKitCUSummaryInputDenyList.hash(into:));
}

uint64_t sub_256AB12B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.TokenInputDenyList.SummarizationKitCUSummaryInputDenyList.hash(into:));
}

uint64_t (*Catalog.TokenInputDenyList.SummarizationKitCUSummaryOnDemandInputDenyList.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.TokenInputDenyList.SummarizationKitCUSummaryOnDemandInputDenyList.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000041;
  *(void *)(a1 + 8) = 0x8000000256B45840;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.TokenInputDenyList.SummarizationKitCUSummaryOnDemandInputDenyList.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.TokenInputDenyList.SummarizationKitCUSummaryOnDemandInputDenyList.hash(into:));
}

uint64_t sub_256AB136C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.TokenInputDenyList.SummarizationKitCUSummaryOnDemandInputDenyList.hash(into:));
}

uint64_t (*Catalog.TokenInputDenyList.SummarizationKitCUSummaryProactiveInputDenyList.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.TokenInputDenyList.SummarizationKitCUSummaryProactiveInputDenyList.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000041;
  *(void *)(a1 + 8) = 0x8000000256B45920;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.TokenInputDenyList.SummarizationKitCUSummaryProactiveInputDenyList.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.TokenInputDenyList.SummarizationKitCUSummaryProactiveInputDenyList.hash(into:));
}

uint64_t sub_256AB1424(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.TokenInputDenyList.SummarizationKitCUSummaryProactiveInputDenyList.hash(into:));
}

uint64_t (*Catalog.TokenInputDenyList.SummarizationKitCUUrgencyInputDenyList.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.TokenInputDenyList.SummarizationKitCUUrgencyInputDenyList.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000037;
  *(void *)(a1 + 8) = 0x8000000256B459C0;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.TokenInputDenyList.SummarizationKitCUUrgencyInputDenyList.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.TokenInputDenyList.SummarizationKitCUUrgencyInputDenyList.hash(into:));
}

uint64_t sub_256AB14DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.TokenInputDenyList.SummarizationKitCUUrgencyInputDenyList.hash(into:));
}

uint64_t (*Catalog.TokenInputDenyList.SummarizationKitTextAssistantInputDenyList.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.TokenInputDenyList.SummarizationKitTextAssistantInputDenyList.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD00000000000003BLL;
  *(void *)(a1 + 8) = 0x8000000256B45A40;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.TokenInputDenyList.SummarizationKitTextAssistantInputDenyList.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.TokenInputDenyList.SummarizationKitTextAssistantInputDenyList.hash(into:));
}

uint64_t sub_256AB1594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.TokenInputDenyList.SummarizationKitTextAssistantInputDenyList.hash(into:));
}

uint64_t (*Catalog.TokenInputDenyList.SummarizationKitVisualPromptInputDenyList.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.TokenInputDenyList.SummarizationKitVisualPromptInputDenyList.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD00000000000003ALL;
  *(void *)(a1 + 8) = 0x8000000256B45AC0;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.TokenInputDenyList.SummarizationKitVisualPromptInputDenyList.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.TokenInputDenyList.SummarizationKitVisualPromptInputDenyList.hash(into:));
}

uint64_t sub_256AB164C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.TokenInputDenyList.SummarizationKitVisualPromptInputDenyList.hash(into:));
}

uint64_t (*Catalog.TokenInputDenyList.VisualGenerationBaseInputDenyList.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.TokenInputDenyList.VisualGenerationBaseInputDenyList.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000035;
  *(void *)(a1 + 8) = 0x8000000256B45DB0;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.TokenInputDenyList.VisualGenerationBaseInputDenyList.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.TokenInputDenyList.VisualGenerationBaseInputDenyList.hash(into:));
}

uint64_t sub_256AB1704(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.TokenInputDenyList.VisualGenerationBaseInputDenyList.hash(into:));
}

uint64_t (*Catalog.TokenInputDenyList.VisualIntelligenceInputDenyList.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.TokenInputDenyList.VisualIntelligenceInputDenyList.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000032;
  *(void *)(a1 + 8) = 0x8000000256B45EA0;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.TokenInputDenyList.VisualIntelligenceInputDenyList.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.TokenInputDenyList.VisualIntelligenceInputDenyList.hash(into:));
}

uint64_t sub_256AB17B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.TokenInputDenyList.VisualIntelligenceInputDenyList.hash(into:));
}

uint64_t (*Catalog.TokenInputDenyList.WritingToolsBulletsTransformInputDenyList.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.TokenInputDenyList.WritingToolsBulletsTransformInputDenyList.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000030;
  *(void *)(a1 + 8) = 0x8000000256B45F20;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.TokenInputDenyList.WritingToolsBulletsTransformInputDenyList.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.TokenInputDenyList.WritingToolsBulletsTransformInputDenyList.hash(into:));
}

uint64_t sub_256AB186C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.TokenInputDenyList.WritingToolsBulletsTransformInputDenyList.hash(into:));
}

uint64_t (*Catalog.TokenInputDenyList.WritingToolsComposeInputDenyList.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.TokenInputDenyList.WritingToolsComposeInputDenyList.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000034;
  *(void *)(a1 + 8) = 0x8000000256B45FA0;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.TokenInputDenyList.WritingToolsComposeInputDenyList.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.TokenInputDenyList.WritingToolsComposeInputDenyList.hash(into:));
}

uint64_t sub_256AB191C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.TokenInputDenyList.WritingToolsComposeInputDenyList.hash(into:));
}

uint64_t (*Catalog.TokenInputDenyList.WritingToolsComposeRecentsSummariesInputDenyList.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.TokenInputDenyList.WritingToolsComposeRecentsSummariesInputDenyList.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000046;
  *(void *)(a1 + 8) = 0x8000000256B46020;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.TokenInputDenyList.WritingToolsComposeRecentsSummariesInputDenyList.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.TokenInputDenyList.WritingToolsComposeRecentsSummariesInputDenyList.hash(into:));
}

uint64_t sub_256AB19CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.TokenInputDenyList.WritingToolsComposeRecentsSummariesInputDenyList.hash(into:));
}

uint64_t (*Catalog.TokenInputDenyList.WritingToolsConciseToneInputDenyList.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.TokenInputDenyList.WritingToolsConciseToneInputDenyList.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD00000000000002BLL;
  *(void *)(a1 + 8) = 0x8000000256B460C0;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.TokenInputDenyList.WritingToolsConciseToneInputDenyList.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.TokenInputDenyList.WritingToolsConciseToneInputDenyList.hash(into:));
}

uint64_t sub_256AB1A84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.TokenInputDenyList.WritingToolsConciseToneInputDenyList.hash(into:));
}

uint64_t (*Catalog.TokenInputDenyList.WritingToolsFriendlyToneInputDenyList.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.TokenInputDenyList.WritingToolsFriendlyToneInputDenyList.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD00000000000002CLL;
  *(void *)(a1 + 8) = 0x8000000256B46120;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.TokenInputDenyList.WritingToolsFriendlyToneInputDenyList.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.TokenInputDenyList.WritingToolsFriendlyToneInputDenyList.hash(into:));
}

uint64_t sub_256AB1B3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.TokenInputDenyList.WritingToolsFriendlyToneInputDenyList.hash(into:));
}

uint64_t (*Catalog.TokenInputDenyList.WritingToolsMagicRewriteInputDenyList.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.TokenInputDenyList.WritingToolsMagicRewriteInputDenyList.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD00000000000002CLL;
  *(void *)(a1 + 8) = 0x8000000256B46180;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.TokenInputDenyList.WritingToolsMagicRewriteInputDenyList.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.TokenInputDenyList.WritingToolsMagicRewriteInputDenyList.hash(into:));
}

uint64_t sub_256AB1BF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.TokenInputDenyList.WritingToolsMagicRewriteInputDenyList.hash(into:));
}

uint64_t (*Catalog.TokenInputDenyList.WritingToolsOpenEndedSchemaInputDenyList.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.TokenInputDenyList.WritingToolsOpenEndedSchemaInputDenyList.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000030;
  *(void *)(a1 + 8) = 0x8000000256B461E0;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.TokenInputDenyList.WritingToolsOpenEndedSchemaInputDenyList.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.TokenInputDenyList.WritingToolsOpenEndedSchemaInputDenyList.hash(into:));
}

uint64_t sub_256AB1CAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.TokenInputDenyList.WritingToolsOpenEndedSchemaInputDenyList.hash(into:));
}

uint64_t (*Catalog.TokenInputDenyList.WritingToolsOpenEndedToneBaseInputDenyList.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.TokenInputDenyList.WritingToolsOpenEndedToneBaseInputDenyList.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000033;
  *(void *)(a1 + 8) = 0x8000000256B46260;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.TokenInputDenyList.WritingToolsOpenEndedToneBaseInputDenyList.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.TokenInputDenyList.WritingToolsOpenEndedToneBaseInputDenyList.hash(into:));
}

uint64_t sub_256AB1D5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.TokenInputDenyList.WritingToolsOpenEndedToneBaseInputDenyList.hash(into:));
}

uint64_t (*Catalog.TokenInputDenyList.WritingToolsOpenEndedToneInputDenyList.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.TokenInputDenyList.WritingToolsOpenEndedToneInputDenyList.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD00000000000002ELL;
  *(void *)(a1 + 8) = 0x8000000256B462E0;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.TokenInputDenyList.WritingToolsOpenEndedToneInputDenyList.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.TokenInputDenyList.WritingToolsOpenEndedToneInputDenyList.hash(into:));
}

uint64_t sub_256AB1E14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.TokenInputDenyList.WritingToolsOpenEndedToneInputDenyList.hash(into:));
}

uint64_t (*Catalog.TokenInputDenyList.WritingToolsOpenEndedToneQueryResponseInputDenyList.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.TokenInputDenyList.WritingToolsOpenEndedToneQueryResponseInputDenyList.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD00000000000003DLL;
  *(void *)(a1 + 8) = 0x8000000256B46340;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.TokenInputDenyList.WritingToolsOpenEndedToneQueryResponseInputDenyList.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.TokenInputDenyList.WritingToolsOpenEndedToneQueryResponseInputDenyList.hash(into:));
}

uint64_t sub_256AB1ECC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.TokenInputDenyList.WritingToolsOpenEndedToneQueryResponseInputDenyList.hash(into:));
}

uint64_t (*Catalog.TokenInputDenyList.WritingToolsProfessionalToneInputDenyList.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.TokenInputDenyList.WritingToolsProfessionalToneInputDenyList.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000030;
  *(void *)(a1 + 8) = 0x8000000256B463C0;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.TokenInputDenyList.WritingToolsProfessionalToneInputDenyList.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.TokenInputDenyList.WritingToolsProfessionalToneInputDenyList.hash(into:));
}

uint64_t sub_256AB1F84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.TokenInputDenyList.WritingToolsProfessionalToneInputDenyList.hash(into:));
}

uint64_t (*Catalog.TokenInputDenyList.WritingToolsProofreadingReviewInputDenyList.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.TokenInputDenyList.WritingToolsProofreadingReviewInputDenyList.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000032;
  *(void *)(a1 + 8) = 0x8000000256B46440;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.TokenInputDenyList.WritingToolsProofreadingReviewInputDenyList.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.TokenInputDenyList.WritingToolsProofreadingReviewInputDenyList.hash(into:));
}

uint64_t sub_256AB203C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.TokenInputDenyList.WritingToolsProofreadingReviewInputDenyList.hash(into:));
}

uint64_t (*Catalog.TokenInputDenyList.WritingToolsTablesTransformInputDenyList.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.TokenInputDenyList.WritingToolsTablesTransformInputDenyList.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD00000000000002FLL;
  *(void *)(a1 + 8) = 0x8000000256B464C0;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.TokenInputDenyList.WritingToolsTablesTransformInputDenyList.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.TokenInputDenyList.WritingToolsTablesTransformInputDenyList.hash(into:));
}

uint64_t sub_256AB20F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.TokenInputDenyList.WritingToolsTablesTransformInputDenyList.hash(into:));
}

uint64_t (*Catalog.TokenInputDenyList.WritingToolsTakeawaysTransformInputDenyList.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.TokenInputDenyList.WritingToolsTakeawaysTransformInputDenyList.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000032;
  *(void *)(a1 + 8) = 0x8000000256B46530;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.TokenInputDenyList.WritingToolsTakeawaysTransformInputDenyList.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.TokenInputDenyList.WritingToolsTakeawaysTransformInputDenyList.hash(into:));
}

uint64_t sub_256AB21AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.TokenInputDenyList.WritingToolsTakeawaysTransformInputDenyList.hash(into:));
}

uint64_t (*Catalog.TokenOutputDenyList.CodeIntelligenceBaseOutputDenyList.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.TokenOutputDenyList.CodeIntelligenceBaseOutputDenyList.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000036;
  *(void *)(a1 + 8) = 0x8000000256B40D50;
  *(void *)(a1 + 16) = 0xD000000000000025;
  *(void *)(a1 + 24) = 0x8000000256B49390;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 32) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 40) = v1;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 55) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 64) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 72) = v2;
  *(_WORD *)(a1 + 80) = 256;
  sub_256AE26EC(a1);
}

void _s12ModelCatalog0B0O17ImageMagicCleanUpO015GenerativeEditsdeF0V2eeoiySbAG_AGtFZ_0(uint64_t a1)
{
  sub_256AE26B0(a1);
  uint64_t v3 = *(void *)(v2 + 24);
  uint64_t v4 = *(void *)(v2 + 32);
  uint64_t v5 = *(void *)(v2 + 40);
  uint64_t v35 = *(void *)(v2 + 48);
  int v34 = *(unsigned __int8 *)(v2 + 56);
  int v33 = *(unsigned __int8 *)(v2 + 57);
  int v31 = *(unsigned __int8 *)(v2 + 58);
  int v29 = *(void **)(v2 + 64);
  int v27 = *(unsigned __int8 *)(v2 + 81);
  sub_256AE254C();
  uint64_t v9 = *(void *)(v8 + 16);
  uint64_t v10 = *(void *)(v8 + 24);
  uint64_t v12 = *(void *)(v8 + 32);
  uint64_t v11 = *(void *)(v8 + 40);
  uint64_t v13 = *(void *)(v8 + 48);
  int v14 = *(unsigned __int8 *)(v8 + 56);
  int v32 = *(unsigned __int8 *)(v8 + 57);
  int v30 = *(unsigned __int8 *)(v8 + 58);
  int v28 = *(void **)(v8 + 64);
  int v26 = *(unsigned __int8 *)(v8 + 81);
  BOOL v17 = v15 == v16 && v6 == v7;
  uint64_t v24 = *(void *)(v8 + 88);
  if (v17 || (sub_256B3FEA0())
    && (v1 == v9 ? (BOOL v18 = v3 == v10) : (BOOL v18 = 0),
        (v18 || (sub_256B3FEA0() & 1) != 0)
     && (sub_256AA1A38(v4, v12) & 1) != 0
     && (sub_256AA1D04(v5, v11) & 1) != 0
     && v35 == v13
     && ((v34 ^ v14) & 1) == 0
     && ((v33 ^ v32) & 1) == 0
     && ((v31 ^ v30) & 1) == 0
     && (sub_256A87844(v29, v28) & 1) != 0
     && (sub_256A87910(), (v19 & 1) != 0)
     && (sub_256AE2508(), (v20 & 1) == 0)
     && ((v27 ^ v26) & 1) == 0
     && (sub_256A87AE4(v25, v24) & 1) != 0))
  {
    sub_256AE2338();
    sub_256A87BC0(v21, v22);
  }
  else
  {
    sub_256AE2338();
  }
}

uint64_t Catalog.TokenOutputDenyList.CodeIntelligenceBaseOutputDenyList.hashValue.getter()
{
  return sub_256AA84E4((void (*)(void *))Catalog.TokenOutputDenyList.CodeIntelligenceBaseOutputDenyList.hash(into:));
}

uint64_t sub_256AB243C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA85C0(a1, a2, a3, (void (*)(void *))Catalog.TokenOutputDenyList.CodeIntelligenceBaseOutputDenyList.hash(into:));
}

uint64_t (*Catalog.TokenOutputDenyList.GenerativeAssistantCompositionOutputDenyList.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.TokenOutputDenyList.GenerativeAssistantCompositionOutputDenyList.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000040;
  *(void *)(a1 + 8) = 0x8000000256B42BD0;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.TokenOutputDenyList.GenerativeAssistantCompositionOutputDenyList.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.TokenOutputDenyList.GenerativeAssistantCompositionOutputDenyList.hash(into:));
}

uint64_t sub_256AB24EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.TokenOutputDenyList.GenerativeAssistantCompositionOutputDenyList.hash(into:));
}

uint64_t (*Catalog.TokenOutputDenyList.GenerativeAssistantKnowledgeFallbackOutputDenyList.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.TokenOutputDenyList.GenerativeAssistantKnowledgeFallbackOutputDenyList.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000047;
  *(void *)(a1 + 8) = 0x8000000256B42C70;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.TokenOutputDenyList.GenerativeAssistantKnowledgeFallbackOutputDenyList.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.TokenOutputDenyList.GenerativeAssistantKnowledgeFallbackOutputDenyList.hash(into:));
}

uint64_t sub_256AB259C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.TokenOutputDenyList.GenerativeAssistantKnowledgeFallbackOutputDenyList.hash(into:));
}

uint64_t (*Catalog.TokenOutputDenyList.GenerativeAssistantKnowledgeOutputDenyList.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.TokenOutputDenyList.GenerativeAssistantKnowledgeOutputDenyList.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD00000000000003ELL;
  *(void *)(a1 + 8) = 0x8000000256B42D00;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}

uint64_t Catalog.TokenOutputDenyList.GenerativeAssistantKnowledgeOutputDenyList.hashValue.getter()
{
  return sub_256AA21F8((void (*)(uint64_t *))Catalog.TokenOutputDenyList.GenerativeAssistantKnowledgeOutputDenyList.hash(into:));
}

uint64_t sub_256AB264C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_256AA2260(a1, a2, a3, (void (*)(uint64_t *))Catalog.TokenOutputDenyList.GenerativeAssistantKnowledgeOutputDenyList.hash(into:));
}

uint64_t (*Catalog.TokenOutputDenyList.GenerativeAssistantMediaQAOutputDenyList.executionContexts.modify())()
{
  return nullsub_1;
}

void Catalog.TokenOutputDenyList.GenerativeAssistantMediaQAOutputDenyList.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD00000000000003DLL;
  *(void *)(a1 + 8) = 0x8000000256B42D80;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 16) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 256;
  sub_256AE1E24(a1);
}