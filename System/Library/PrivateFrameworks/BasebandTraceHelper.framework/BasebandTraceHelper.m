uint64_t TCP::getLogClient(TCP *this)
{
  return (uint64_t)this + 152;
}

_OWORD *TCP::getSupportedTCPModesLowerCase@<X0>(uint64_t *a1@<X8>)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  v3 = operator new(0x18uLL);
  v3[4] = 0;
  *(void *)v3 = &v17;
  *((void *)v3 + 1) = &v17;
  v18 = v3;
  v4 = operator new(0x18uLL);
  v4[4] = 1;
  *(void *)v4 = v3;
  *((void *)v4 + 1) = &v17;
  *((void *)v3 + 1) = v4;
  v17 = v4;
  uint64_t v19 = 2;
  do
  {
    int v5 = v3[4];
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    if (v5) {
      v6 = "Unknown";
    }
    else {
      v6 = "Server";
    }
    if (v5 == 1) {
      v7 = "Client";
    }
    else {
      v7 = v6;
    }
    MEMORY[0x24C58B2B0](&v15, v7);
    if (v16 >= 0) {
      v8 = (char *)&v15 + HIBYTE(v16);
    }
    else {
      v8 = (char *)(v15 + *((void *)&v15 + 1));
    }
    if (v16 >= 0) {
      v9 = (char *)&v15;
    }
    else {
      v9 = (char *)v15;
    }
    for (; v9 != v8; ++v9)
      char *v9 = __tolower(*v9);
    result = operator new(0x28uLL);
    result[1] = v15;
    *((void *)result + 4) = v16;
    uint64_t v11 = *a1;
    *(void *)result = *a1;
    *((void *)result + 1) = a1;
    *(void *)(v11 + 8) = result;
    *a1 = (uint64_t)result;
    ++a1[2];
    v3 = (_DWORD *)*((void *)v3 + 1);
  }
  while (v3 != (_DWORD *)&v17);
  if (v19)
  {
    v12 = v17;
    result = v18;
    uint64_t v13 = *v18;
    *(void *)(v13 + 8) = *((void *)v17 + 1);
    **((void **)v12 + 1) = v13;
    uint64_t v19 = 0;
    if (result != (_OWORD *)&v17)
    {
      do
      {
        v14 = (void *)*((void *)result + 1);
        operator delete(result);
        result = v14;
      }
      while (v14 != &v17);
    }
  }
  return result;
}

void sub_248AFE13C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  do
  {
    uint64_t v19 = (void *)v17[1];
    operator delete(v17);
    v17 = v19;
  }
  while (v19 != v18);
  std::list<std::string>::~list(v16);
  _Unwind_Resume(a1);
}

void sub_248AFE174(_Unwind_Exception *a1)
{
  std::list<std::string>::~list(v1);
  _Unwind_Resume(a1);
}

void sub_248AFE188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  std::list<TCP::Mode>::~list(&a17);
  std::list<std::string>::~list(v17);
  _Unwind_Resume(a1);
}

uint64_t TCP::asStringLowerCase@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  v3 = "Unknown";
  if (!a1) {
    v3 = "Server";
  }
  if (a1 == 1) {
    v4 = "Client";
  }
  else {
    v4 = v3;
  }
  uint64_t result = MEMORY[0x24C58B2B0](a2, v4);
  uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  int v7 = (char)v6;
  v8 = (unsigned char *)(a2 + v6);
  if (v7 >= 0) {
    v9 = v8;
  }
  else {
    v9 = (unsigned char *)(*(void *)a2 + *(void *)(a2 + 8));
  }
  if (v7 >= 0) {
    v10 = (unsigned char *)a2;
  }
  else {
    v10 = *(unsigned char **)a2;
  }
  for (; v10 != v9; ++v10)
  {
    uint64_t result = __tolower((char)*v10);
    unsigned char *v10 = result;
  }
  return result;
}

void sub_248AFE258(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::list<TCP::Mode>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v3 = *a1;
    v2 = (uint64_t *)a1[1];
    uint64_t v4 = *v2;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v3 + 8) = v4;
    a1[2] = 0;
    if (v2 != a1)
    {
      do
      {
        int v5 = (uint64_t *)v2[1];
        operator delete(v2);
        v2 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

char *std::list<std::string>::~list(char *a1)
{
  if (*((void *)a1 + 2))
  {
    uint64_t v2 = *(void *)a1;
    uint64_t v3 = (char *)*((void *)a1 + 1);
    uint64_t v4 = *(void *)v3;
    *(void *)(v4 + 8) = *(void *)(*(void *)a1 + 8);
    **(void **)(v2 + 8) = v4;
    *((void *)a1 + 2) = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v6 = (char *)*((void *)v3 + 1);
        if (v3[39] < 0) {
          operator delete(*((void **)v3 + 2));
        }
        operator delete(v3);
        uint64_t v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

uint64_t TCP::asString@<X0>(int a1@<W0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = "Unknown";
  if (!a1) {
    uint64_t v3 = "Server";
  }
  if (a1 == 1) {
    uint64_t v4 = "Client";
  }
  else {
    uint64_t v4 = v3;
  }
  return MEMORY[0x24C58B2B0](a2, v4);
}

void sub_248AFE3B8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TCP::asTCPMode(char *a1)
{
  uint64_t v1 = a1;
  if (a1[23] < 0)
  {
    uint64_t v1 = *(const char **)a1;
    uint64_t result = strcasecmp(*(const char **)a1, "Server");
    if (!result) {
      return result;
    }
  }
  else
  {
    uint64_t result = strcasecmp(a1, "Server");
    if (!result) {
      return result;
    }
  }
  if (!strcasecmp(v1, "Client")) {
    return 1;
  }
  else {
    return 2;
  }
}

BOOL TCP::sendAllToDst(TCP *this, uint64_t a2, const unsigned __int8 *a3)
{
  unsigned int v3 = a3;
  int v4 = (int)this;
  uint64_t v40 = *MEMORY[0x263EF8340];
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v35 = v5;
  long long v36 = v5;
  v34[1] = v5;
  v34[2] = v5;
  v34[0] = v5;
  v32 = operator new(0x28uLL);
  long long v33 = xmmword_248B49510;
  strcpy((char *)v32, "com.apple.telephony.basebandservices");
  char v31 = 8;
  strcpy((char *)__p, "tcp.send");
  support::log::client::client(v34, (uint64_t)&v32, (uint64_t)__p);
  if (v31 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v33) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_21:
    operator delete(v32);
    goto LABEL_3;
  }
  if (SHIBYTE(v33) < 0) {
    goto LABEL_21;
  }
LABEL_3:
  uint64_t v6 = 0;
  uint64_t v7 = v3;
  int v8 = 1 << v4;
  unint64_t v29 = (unint64_t)v4 >> 5;
  while (1)
  {
    while (1)
    {
      ssize_t v9 = send(v4, (const void *)(a2 + v6), v7 - v6, 0);
      ssize_t v10 = v9;
      if (v9 < 0) {
        break;
      }
      v6 += v9;
      if (v6 == v7) {
        goto LABEL_26;
      }
    }
    int v11 = *__error();
    v12 = *(NSObject **)v35;
    uint64_t v13 = *(NSObject **)v35;
    if (v11 != 35)
    {
      if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        goto LABEL_25;
      }
      long long v15 = __error();
      uint64_t v16 = strerror(*v15);
      buf.fds_bits[0] = 136315138;
      *(void *)&buf.fds_bits[1] = v16;
      v17 = "error: Failed to send, error: %s";
      p_fd_set buf = (uint8_t *)&buf;
      uint64_t v19 = v12;
      goto LABEL_31;
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.fds_bits[0]) = 0;
      _os_log_impl(&dword_248AFD000, v12, OS_LOG_TYPE_DEFAULT, "warning: Dst socket busy, waiting", (uint8_t *)&buf, 2u);
    }
    memset(&buf, 0, sizeof(buf));
    if (__darwin_check_fd_set_overflow(v4, &buf, 0)) {
      buf.fds_bits[v29] |= v8;
    }
    if (select(v4 + 1, 0, &buf, 0, 0) < 0) {
      break;
    }
    if (__darwin_check_fd_set_overflow(v4, &buf, 0) && (buf.fds_bits[v29] & v8) != 0)
    {
      v14 = *(NSObject **)v35;
      if (os_log_type_enabled(*(os_log_t *)v35, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v37 = 0;
        _os_log_impl(&dword_248AFD000, v14, OS_LOG_TYPE_INFO, "Dst socket became ready for writing", v37, 2u);
      }
      __darwin_check_fd_set_overflow(v4, &buf, 0);
    }
    if (v7 == v6) {
      goto LABEL_25;
    }
  }
  v20 = *(NSObject **)v35;
  if (!os_log_type_enabled(*(os_log_t *)v35, OS_LOG_TYPE_ERROR))
  {
LABEL_25:
    v21 = *(NSObject **)v35;
    if (!os_log_type_enabled(*(os_log_t *)v35, OS_LOG_TYPE_ERROR)) {
      goto LABEL_26;
    }
    goto LABEL_32;
  }
  v24 = __error();
  v25 = strerror(*v24);
  *(_DWORD *)v37 = 136315138;
  v38 = v25;
  v17 = "error: Failed to register for write notification on Dst socket, error: %s";
  p_fd_set buf = v37;
  uint64_t v19 = v20;
LABEL_31:
  _os_log_error_impl(&dword_248AFD000, v19, OS_LOG_TYPE_ERROR, v17, p_buf, 0xCu);
  v21 = *(NSObject **)v35;
  if (!os_log_type_enabled(*(os_log_t *)v35, OS_LOG_TYPE_ERROR))
  {
LABEL_26:
    *(void *)&v34[0] = &unk_26FCC7220;
    v22 = (std::__shared_weak_count *)v36;
    if (!(void)v36) {
      return v10 >= 0;
    }
    goto LABEL_27;
  }
LABEL_32:
  v26 = __error();
  v27 = strerror(*v26);
  buf.fds_bits[0] = 136315138;
  *(void *)&buf.fds_bits[1] = v27;
  _os_log_error_impl(&dword_248AFD000, v21, OS_LOG_TYPE_ERROR, "error: Failed to send data to destination, Error: %s", (uint8_t *)&buf, 0xCu);
  *(void *)&v34[0] = &unk_26FCC7220;
  v22 = (std::__shared_weak_count *)v36;
  if (!(void)v36) {
    return v10 >= 0;
  }
LABEL_27:
  if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  return v10 >= 0;
}

void sub_248AFE8AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
}

void support::log::client::~client(support::log::client *this)
{
  *(void *)this = &unk_26FCC7220;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void TCP::create(int a1@<W0>, int a2@<W1>, NSObject **a3@<X2>, void *a4@<X8>)
{
  int v8 = operator new(0xE8uLL);
  ssize_t v9 = *a3;
  ssize_t v10 = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  TCP::TCP((uint64_t)v8, a1, a2, &v10);
  std::shared_ptr<TCP>::shared_ptr[abi:ne180100]<TCP,std::shared_ptr<TCP> ctu::SharedSynchronizable<TCP>::make_shared_ptr<TCP>(TCP*)::{lambda(TCP*)#1},void>(a4, (uint64_t)v8);
  if (v9)
  {
    dispatch_release(v9);
  }
}

void sub_248AFEA54(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    dispatch_release(v2);
    if (!v3) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if (!v3)
  {
    goto LABEL_3;
  }
  operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t TCP::TCP(uint64_t a1, int a2, int a3, NSObject **a4)
{
  int v8 = dispatch_queue_create("TCP", 0);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = v8;
  if (v8)
  {
    ssize_t v9 = v8;
    dispatch_retain(v8);
    *(void *)(a1 + 32) = 0;
    dispatch_release(v9);
    *(void *)a1 = &unk_26FCC7100;
    ssize_t v10 = *a4;
    *(void *)(a1 + 40) = *a4;
    if (!v10) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  *(void *)(a1 + 32) = 0;
  *(void *)a1 = &unk_26FCC7100;
  ssize_t v10 = *a4;
  *(void *)(a1 + 40) = *a4;
  if (v10) {
LABEL_3:
  }
    dispatch_retain(v10);
LABEL_4:
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = a2;
  *(_DWORD *)(a1 + 56) = a3;
  *(void *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 80) = 0;
  *(void *)(a1 + 84) = 0xFFFFFFFF00000001;
  *(_DWORD *)(a1 + 92) = -1;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  int v11 = (char *)operator new(0x100000uLL);
  *(void *)(a1 + 112) = v11;
  v12 = v11 + 0x100000;
  *(void *)(a1 + 128) = v11 + 0x100000;
  bzero(v11, 0x100000uLL);
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 120) = v12;
  *(void *)(a1 + 144) = 0;
  uint64_t v16 = operator new(0x28uLL);
  long long v17 = xmmword_248B49510;
  strcpy((char *)v16, "com.apple.telephony.basebandservices");
  char v15 = 3;
  LODWORD(__p) = 7365492;
  support::log::client::client((void *)(a1 + 152), (uint64_t)&v16, (uint64_t)&__p);
  if (v15 < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v17) & 0x80000000) == 0) {
      return a1;
    }
LABEL_10:
    operator delete(v16);
    return a1;
  }
  if (SHIBYTE(v17) < 0) {
    goto LABEL_10;
  }
  return a1;
}

void sub_248AFEC50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      v26 = v20[18];
      if (!v26) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  v26 = v20[18];
  if (!v26)
  {
LABEL_4:
    v27 = *v24;
    if (!*v24) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  dispatch_release(v26);
  v27 = *v24;
  if (!*v24)
  {
LABEL_5:
    v28 = *v22;
    if (!*v22) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  dispatch_release(v27);
  v28 = *v22;
  if (!*v22)
  {
LABEL_6:
    unint64_t v29 = (const void *)v20[9];
    if (!v29)
    {
LABEL_14:
      if (*v23) {
        _Block_release(*v23);
      }
      v30 = v20[5];
      if (v30) {
        dispatch_release(v30);
      }
      ctu::SharedSynchronizable<TCP>::~SharedSynchronizable(v21);
      _Unwind_Resume(a1);
    }
LABEL_13:
    _Block_release(v29);
    goto LABEL_14;
  }
LABEL_12:
  v20[15] = v28;
  operator delete(v28);
  unint64_t v29 = (const void *)v20[9];
  if (!v29) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void *ctu::SharedSynchronizable<TCP>::~SharedSynchronizable(void *a1)
{
  uint64_t v2 = a1[3];
  if (v2) {
    dispatch_release(v2);
  }
  int v3 = a1[2];
  if (v3) {
    dispatch_release(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

BOOL TCP::configureServerMode_sync(TCP *this, int a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (!*((_DWORD *)this + 12))
  {
    int v5 = socket(2, 1, 0);
    *((_DWORD *)this + 22) = v5;
    if (v5 < 0)
    {
      char v15 = **((void **)this + 25);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        uint64_t v16 = __error();
        long long v17 = strerror(*v16);
        *(_DWORD *)fd_set buf = 136315138;
        v32 = v17;
        _os_log_error_impl(&dword_248AFD000, v15, OS_LOG_TYPE_ERROR, "error: [server] Failed to create socket, error: %s", buf, 0xCu);
      }
      return 0;
    }
    socklen_t v30 = 1;
    if (setsockopt(v5, 0xFFFF, 4, &v30, 4u) < 0)
    {
      v18 = **((void **)this + 25);
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
        goto LABEL_33;
      }
      uint64_t v19 = __error();
      v20 = strerror(*v19);
      *(_DWORD *)fd_set buf = 136315138;
      v32 = v20;
      v12 = "error: [server] Failed to set socket options, error: %s";
    }
    else
    {
      *((void *)this + 12) = 0;
      *((void *)this + 13) = 0;
      *((unsigned char *)this + 97) = 2;
      *((_WORD *)this + 49) = bswap32(*((unsigned __int16 *)this + 28)) >> 16;
      if (bind(*((_DWORD *)this + 22), (const sockaddr *)this + 6, 0x10u) < 0)
      {
        v18 = **((void **)this + 25);
        if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
          goto LABEL_33;
        }
        v21 = __error();
        v22 = strerror(*v21);
        *(_DWORD *)fd_set buf = 136315138;
        v32 = v22;
        v12 = "error: [server] Failed to bind to the socket, error: %s";
      }
      else
      {
        if (!*((_DWORD *)this + 14))
        {
          socklen_t v30 = 16;
          int v6 = getsockname(*((_DWORD *)this + 22), (sockaddr *)this + 6, &v30);
          if (v6 < 0)
          {
            uint64_t v7 = **((void **)this + 25);
            if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
            {
              v28 = __error();
              unint64_t v29 = strerror(*v28);
              *(_DWORD *)fd_set buf = 136315138;
              v32 = v29;
              _os_log_error_impl(&dword_248AFD000, v7, OS_LOG_TYPE_ERROR, "error: [server] Failed to get socket address, error: %s", buf, 0xCu);
            }
            TCP::closeLocalSocket_sync(this);
            TCP::closeServerSocket_sync(this);
          }
          unsigned int v8 = bswap32(*((unsigned __int16 *)this + 49)) >> 16;
          *((_DWORD *)this + 14) = v8;
          ssize_t v9 = **((void **)this + 25);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)fd_set buf = 67109120;
            LODWORD(v32) = v8;
            _os_log_impl(&dword_248AFD000, v9, OS_LOG_TYPE_INFO, "Assigned port number is %d", buf, 8u);
          }
          if (v6 < 0) {
            return 0;
          }
        }
        if (listen(*((_DWORD *)this + 22), *((_DWORD *)this + 21)) < 0)
        {
          v18 = **((void **)this + 25);
          if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
            goto LABEL_33;
          }
          v23 = __error();
          v24 = strerror(*v23);
          *(_DWORD *)fd_set buf = 136315138;
          v32 = v24;
          v12 = "error: [server] Failed to listen to the socket, error: %s";
        }
        else
        {
          if (!a2) {
            return TCP::setServerSocketAcceptSource_sync((dispatch_queue_t *)this);
          }
          int v10 = accept(*((_DWORD *)this + 22), 0, 0);
          *((_DWORD *)this + 23) = v10;
          if ((v10 & 0x80000000) == 0)
          {
            uint64_t v2 = 1;
            *((unsigned char *)this + 81) = 1;
            if (TCP::setLocalSocketReadSource_sync(this)) {
              return v2;
            }
            int v11 = **((void **)this + 25);
            if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)fd_set buf = 0;
              v12 = "error: [server] Failed to set read source for local socket";
              uint64_t v13 = v11;
              uint32_t v14 = 2;
LABEL_32:
              _os_log_error_impl(&dword_248AFD000, v13, OS_LOG_TYPE_ERROR, v12, buf, v14);
            }
LABEL_33:
            TCP::closeLocalSocket_sync(this);
            TCP::closeServerSocket_sync(this);
            return 0;
          }
          v18 = **((void **)this + 25);
          if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
            goto LABEL_33;
          }
          v25 = __error();
          v26 = strerror(*v25);
          *(_DWORD *)fd_set buf = 136315138;
          v32 = v26;
          v12 = "error: [server] Failed to accept connection, error: %s";
        }
      }
    }
    uint64_t v13 = v18;
    uint32_t v14 = 12;
    goto LABEL_32;
  }
  return 0;
}

uint64_t TCP::close_sync(TCP *this)
{
  BOOL v2 = TCP::closeLocalSocket_sync(this);
  return v2 & TCP::closeServerSocket_sync(this);
}

uint64_t TCP::setLocalSocketReadSource_sync(TCP *this)
{
  if (!*((unsigned char *)this + 80)) {
    return 1;
  }
  int v2 = fcntl(*((_DWORD *)this + 23), 3, 0);
  fcntl(*((_DWORD *)this + 23), 4, v2 | 4);
  dispatch_source_t v3 = dispatch_source_create(MEMORY[0x263EF83E8], *((int *)this + 23), 0, *((dispatch_queue_t *)this + 5));
  int v4 = *((void *)this + 18);
  *((void *)this + 18) = v3;
  if (v4)
  {
    dispatch_release(v4);
    dispatch_source_t v3 = (dispatch_source_t)*((void *)this + 18);
  }
  if (v3)
  {
    int v5 = (std::__shared_weak_count *)*((void *)this + 2);
    if (!v5 || (uint64_t v6 = *((void *)this + 1), (v7 = std::__shared_weak_count::lock(v5)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    unsigned int v8 = v7;
    p_shared_weak_owners = &v7->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v8);
    }
    int v10 = *((void *)this + 18);
    handler[0] = MEMORY[0x263EF8330];
    handler[1] = 1174405120;
    handler[2] = ___ZN3TCP29setLocalSocketReadSource_syncEv_block_invoke;
    handler[3] = &__block_descriptor_tmp_11;
    handler[4] = this;
    handler[5] = v6;
    uint32_t v14 = v8;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    dispatch_source_set_event_handler(v10, handler);
    dispatch_activate(*((dispatch_object_t *)this + 18));
    if (v14) {
      std::__shared_weak_count::__release_weak(v14);
    }
    std::__shared_weak_count::__release_weak(v8);
    return 1;
  }
  v12 = **((void **)this + 25);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)fd_set buf = 0;
    _os_log_error_impl(&dword_248AFD000, v12, OS_LOG_TYPE_ERROR, "error: Unable to create accept source for local client socket, closing local socket", buf, 2u);
  }
  TCP::closeLocalSocket_sync(this);
  return 0;
}

BOOL TCP::setServerSocketAcceptSource_sync(dispatch_queue_t *this)
{
  dispatch_source_t v2 = dispatch_source_create(MEMORY[0x263EF83E8], *((int *)this + 22), 0, this[3]);
  dispatch_source_t v3 = this[17];
  this[17] = v2;
  if (v3)
  {
    dispatch_release(v3);
    dispatch_source_t v2 = this[17];
  }
  if (v2)
  {
    int v4 = (std::__shared_weak_count *)this[2];
    if (!v4 || (dispatch_queue_t v5 = this[1], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v7 = v6;
    p_shared_weak_owners = &v6->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v7);
    }
    ssize_t v9 = this[17];
    handler[0] = MEMORY[0x263EF8330];
    handler[1] = 1174405120;
    handler[2] = ___ZN3TCP32setServerSocketAcceptSource_syncEv_block_invoke;
    handler[3] = &__block_descriptor_tmp_4;
    handler[4] = this;
    handler[5] = v5;
    uint64_t v13 = v7;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    dispatch_source_set_event_handler(v9, handler);
    dispatch_activate(this[17]);
    if (v13) {
      std::__shared_weak_count::__release_weak(v13);
    }
    std::__shared_weak_count::__release_weak(v7);
  }
  else
  {
    isa = this[25]->isa;
    if (os_log_type_enabled(isa, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)fd_set buf = 0;
      _os_log_error_impl(&dword_248AFD000, isa, OS_LOG_TYPE_ERROR, "error: [server] Unable to create accept source for server socket", buf, 2u);
    }
    TCP::closeLocalSocket_sync((TCP *)this);
    TCP::closeServerSocket_sync((TCP *)this);
  }
  return v2 != 0;
}

BOOL TCP::configureClientMode_sync(TCP *this)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  *(void *)&v17.sa_len = 0;
  *(void *)&v17.sa_data[6] = 0;
  int v2 = socket(2, 1, 0);
  if (v2 < 0)
  {
    dispatch_queue_t v5 = **((void **)this + 25);
    BOOL result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (!result) {
      goto LABEL_13;
    }
    uint64_t v6 = __error();
    uint64_t v7 = strerror(*v6);
    int v15 = 136315138;
    uint64_t v16 = v7;
    unsigned int v8 = "error: [client] Failed to create socket, error: %s";
    ssize_t v9 = v5;
    uint32_t v10 = 12;
LABEL_9:
    _os_log_error_impl(&dword_248AFD000, v9, OS_LOG_TYPE_ERROR, v8, (uint8_t *)&v15, v10);
    BOOL result = 0;
    goto LABEL_13;
  }
  dispatch_source_t v3 = gethostbyname("localhost");
  if (!v3)
  {
    int v11 = **((void **)this + 25);
    BOOL result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
    if (!result) {
      goto LABEL_13;
    }
    LOWORD(v15) = 0;
    unsigned int v8 = "error: [client] Failed to get hostname";
    ssize_t v9 = v11;
    uint32_t v10 = 2;
    goto LABEL_9;
  }
  v17.sa_family = 2;
  memcpy(&v17.sa_data[2], *(const void **)v3->h_addr_list, v3->h_length);
  *(_WORD *)v17.sa_data = bswap32(*((unsigned __int16 *)this + 28)) >> 16;
  if (connect(v2, &v17, 0x10u) < 0)
  {
    v12 = **((void **)this + 25);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = __error();
      uint32_t v14 = strerror(*v13);
      int v15 = 136315138;
      uint64_t v16 = v14;
      _os_log_error_impl(&dword_248AFD000, v12, OS_LOG_TYPE_ERROR, "error: [client] Failed to connect to the socket, error: %s", (uint8_t *)&v15, 0xCu);
    }
    close(v2);
    BOOL result = 0;
    int v2 = -1;
  }
  else
  {
    BOOL result = 1;
  }
LABEL_13:
  *((_DWORD *)this + 23) = v2;
  return result;
}

uint64_t TCP::start(uint64_t a1, void **a2, void **a3, char a4)
{
  unsigned __int8 v16 = 1;
  v12[0] = a1;
  v12[1] = &v16;
  uint64_t v7 = *a3;
  if (*a3) {
    uint64_t v7 = _Block_copy(v7);
  }
  uint64_t v13 = v7;
  unsigned int v8 = *a2;
  if (*a2) {
    unsigned int v8 = _Block_copy(v8);
  }
  aBlock = v8;
  char v15 = a4;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI3TCPE20execute_wrapped_syncIZNS1_5startEN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEENS5_IU13block_pointerFvPKhjEEEbE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSM__block_invoke;
  block[3] = &__block_descriptor_tmp_21;
  block[4] = a1 + 8;
  block[5] = v12;
  ssize_t v9 = *(NSObject **)(a1 + 24);
  if (!*(void *)(a1 + 32))
  {
    dispatch_sync(v9, block);
    uint32_t v10 = aBlock;
    if (!aBlock) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  dispatch_async_and_wait(v9, block);
  uint32_t v10 = aBlock;
  if (aBlock) {
LABEL_9:
  }
    _Block_release(v10);
LABEL_10:
  if (v13) {
    _Block_release(v13);
  }
  return v16;
}

void ___ZN3TCP32setServerSocketAcceptSource_syncEv_block_invoke(void *a1)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[4];
  dispatch_source_t v3 = **(NSObject ***)(v2 + 200);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v16) = 0;
    _os_log_debug_impl(&dword_248AFD000, v3, OS_LOG_TYPE_DEBUG, "New Connection, accept source is triggered", (uint8_t *)&v16, 2u);
    uint64_t v16 = 0;
    sockaddr v17 = 0;
    int v4 = (std::__shared_weak_count *)a1[6];
    if (v4) {
      goto LABEL_3;
    }
LABEL_11:
    dispatch_queue_t v5 = 0;
LABEL_12:
    int v7 = 1;
LABEL_13:
    unsigned int v8 = **(NSObject ***)(v2 + 200);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)fd_set buf = 67109120;
      LODWORD(v19) = v7;
      _os_log_debug_impl(&dword_248AFD000, v8, OS_LOG_TYPE_DEBUG, "[server] tcp instance gone: %d", buf, 8u);
      if (v7) {
        goto LABEL_17;
      }
    }
    else if (v7)
    {
      goto LABEL_17;
    }
    ssize_t v9 = **(NSObject ***)(v2 + 200);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      int v12 = *(_DWORD *)(v2 + 48);
      *(_DWORD *)fd_set buf = 67109120;
      LODWORD(v19) = v12;
      _os_log_debug_impl(&dword_248AFD000, v9, OS_LOG_TYPE_DEBUG, "[server] current state: %d", buf, 8u);
    }
LABEL_17:
    if (!v5) {
      return;
    }
    goto LABEL_18;
  }
  uint64_t v16 = 0;
  sockaddr v17 = 0;
  int v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    goto LABEL_11;
  }
LABEL_3:
  dispatch_queue_t v5 = std::__shared_weak_count::lock(v4);
  sockaddr v17 = v5;
  if (!v5) {
    goto LABEL_12;
  }
  uint64_t v16 = a1[5];
  if (!v16) {
    goto LABEL_12;
  }
  if (!*(_DWORD *)(v2 + 48))
  {
    int v7 = 0;
    goto LABEL_13;
  }
  if (*(unsigned char *)(v2 + 81))
  {
    uint64_t v6 = **(NSObject ***)(v2 + 200);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)fd_set buf = 0;
      _os_log_error_impl(&dword_248AFD000, v6, OS_LOG_TYPE_ERROR, "error: [server] A Client connection is already active, ignoring..", buf, 2u);
    }
  }
  else
  {
    int v10 = accept(*(_DWORD *)(v2 + 88), 0, 0);
    *(_DWORD *)(v2 + 92) = v10;
    if (v10 < 0)
    {
      uint64_t v13 = **(NSObject ***)(v2 + 200);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        uint32_t v14 = __error();
        char v15 = strerror(*v14);
        *(_DWORD *)fd_set buf = 136315138;
        uint64_t v19 = v15;
        _os_log_error_impl(&dword_248AFD000, v13, OS_LOG_TYPE_ERROR, "error: [server] Async accept connection failed: %s", buf, 0xCu);
      }
    }
    else
    {
      *(unsigned char *)(v2 + 81) = 1;
      TCP::setLocalSocketReadSource_sync((TCP *)v2);
      *(_DWORD *)(v2 + 48) = 1;
      int v11 = **(NSObject ***)(v2 + 200);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)fd_set buf = 0;
        _os_log_impl(&dword_248AFD000, v11, OS_LOG_TYPE_INFO, "[server] New Connection setup successfully", buf, 2u);
      }
    }
  }
LABEL_18:
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_248AFFB48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_248AFFB5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t __copy_helper_block_e8_40c27_ZTSNSt3__18weak_ptrI3TCPEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c27_ZTSNSt3__18weak_ptrI3TCPEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

BOOL TCP::closeLocalSocket_sync(TCP *this)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  int v2 = *((_DWORD *)this + 23);
  if (v2 < 0) {
    return 1;
  }
  int v3 = close(v2);
  BOOL v4 = v3 == 0;
  if (v3)
  {
    dispatch_queue_t v5 = **((void **)this + 25);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      ssize_t v9 = __error();
      int v10 = strerror(*v9);
      int v11 = 136315138;
      int v12 = v10;
      _os_log_error_impl(&dword_248AFD000, v5, OS_LOG_TYPE_ERROR, "error: Failed to close local socket, Error: %s", (uint8_t *)&v11, 0xCu);
      if (*((_DWORD *)this + 13)) {
        goto LABEL_6;
      }
      goto LABEL_5;
    }
  }
  if (!*((_DWORD *)this + 13)) {
LABEL_5:
  }
    *((unsigned char *)this + 81) = 0;
LABEL_6:
  *((_DWORD *)this + 23) = -1;
  uint64_t v6 = *((void *)this + 18);
  if (v6)
  {
    dispatch_source_cancel(v6);
    int v7 = *((void *)this + 18);
    *((void *)this + 18) = 0;
    if (v7) {
      dispatch_release(v7);
    }
  }
  return v4;
}

void ___ZN3TCP29setLocalSocketReadSource_syncEv_block_invoke(void *a1)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  int v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    BOOL v4 = std::__shared_weak_count::lock(v2);
    v22 = v4;
    if (v4)
    {
      dispatch_queue_t v5 = v4;
      uint64_t v21 = a1[5];
      if (!v21 || *(_DWORD *)(v3 + 48) != 1) {
        goto LABEL_35;
      }
      ssize_t v6 = recv(*(_DWORD *)(v3 + 92), *(void **)(v3 + 112), 0x100000uLL, 0);
      if ((v6 & 0x8000000000000000) == 0)
      {
        if (v6)
        {
          (*(void (**)(void))(*(void *)(v3 + 64) + 16))();
        }
        else
        {
          uint64_t v18 = v3;
          *(void *)&long long block = MEMORY[0x263EF8330];
          *((void *)&block + 1) = 0x40000000;
          v24 = ___ZNK3ctu20SharedSynchronizableI3TCPE20execute_wrapped_syncIZZNS1_29setLocalSocketReadSource_syncEvEUb_E3__2EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
          v25 = &__block_descriptor_tmp_24;
          uint64_t v26 = v3 + 8;
          v27 = &v18;
          int v12 = *(NSObject **)(v3 + 24);
          if (*(void *)(v3 + 32)) {
            dispatch_async_and_wait(v12, &block);
          }
          else {
            dispatch_sync(v12, &block);
          }
        }
LABEL_35:
        if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        return;
      }
      memset(&__dst, 170, sizeof(__dst));
      int v7 = __error();
      unsigned int v8 = strerror(*v7);
      size_t v9 = strlen(v8);
      if (v9 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      std::string::size_type v10 = v9;
      if (v9 >= 0x17)
      {
        uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v9 | 7) != 0x17) {
          uint64_t v13 = v9 | 7;
        }
        uint64_t v14 = v13 + 1;
        p_dst = (std::string *)operator new(v13 + 1);
        __dst.__r_.__value_.__l.__size_ = v10;
        __dst.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v9;
        p_dst = &__dst;
        if (!v9)
        {
LABEL_18:
          p_dst->__r_.__value_.__s.__data_[v10] = 0;
          char v15 = **(NSObject ***)(v3 + 200);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            uint64_t v16 = &__dst;
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              uint64_t v16 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            }
            LODWORD(block) = 136315138;
            *(void *)((char *)&block + 4) = v16;
            _os_log_error_impl(&dword_248AFD000, v15, OS_LOG_TYPE_ERROR, "error: recv failed: %s", (uint8_t *)&block, 0xCu);
            uint64_t v18 = v3;
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_20;
            }
          }
          else
          {
            uint64_t v18 = v3;
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_20:
              std::string __p = __dst;
              goto LABEL_26;
            }
          }
          std::string::__init_copy_ctor_external(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
LABEL_26:
          *(void *)&long long block = MEMORY[0x263EF8330];
          *((void *)&block + 1) = 0x40000000;
          v24 = ___ZNK3ctu20SharedSynchronizableI3TCPE20execute_wrapped_syncIZZNS1_29setLocalSocketReadSource_syncEvEUb_E3__1EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
          v25 = &__block_descriptor_tmp_23;
          uint64_t v26 = v3 + 8;
          v27 = &v18;
          sockaddr v17 = *(NSObject **)(v3 + 24);
          if (*(void *)(v3 + 32))
          {
            dispatch_async_and_wait(v17, &block);
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_29;
            }
          }
          else
          {
            dispatch_sync(v17, &block);
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_29:
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(__dst.__r_.__value_.__l.__data_);
                dispatch_queue_t v5 = v22;
                if (!v22) {
                  return;
                }
              }
              else
              {
                dispatch_queue_t v5 = v22;
                if (!v22) {
                  return;
                }
              }
              goto LABEL_35;
            }
          }
          operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_29;
        }
      }
      memmove(p_dst, v8, v10);
      goto LABEL_18;
    }
  }
}

void sub_248B0008C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0)
  {
    operator delete(__p);
    std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

BOOL TCP::closeServerSocket_sync(TCP *this)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)this + 13)) {
    return 1;
  }
  int v4 = *((_DWORD *)this + 22);
  if (v4 < 0) {
    return 1;
  }
  int v5 = close(v4);
  BOOL v1 = v5 == 0;
  if (v5 && (ssize_t v6 = **((void **)this + 25), os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)))
  {
    size_t v9 = __error();
    std::string::size_type v10 = strerror(*v9);
    int v11 = 136315138;
    int v12 = v10;
    _os_log_error_impl(&dword_248AFD000, v6, OS_LOG_TYPE_ERROR, "error: Failed to close server socket, Error: %s", (uint8_t *)&v11, 0xCu);
    *((_DWORD *)this + 22) = -1;
    int v7 = *((void *)this + 17);
    if (!v7) {
      return v1;
    }
  }
  else
  {
    *((_DWORD *)this + 22) = -1;
    int v7 = *((void *)this + 17);
    if (!v7) {
      return v1;
    }
  }
  dispatch_source_cancel(v7);
  unsigned int v8 = *((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v8) {
    dispatch_release(v8);
  }
  return v1;
}

uint64_t TCP::stop(TCP *this)
{
  unsigned __int8 v5 = 1;
  v4[0] = this;
  v4[1] = &v5;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI3TCPE20execute_wrapped_syncIZNS1_4stopEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
  block[3] = &__block_descriptor_tmp_26;
  block[4] = (char *)this + 8;
  block[5] = v4;
  int v2 = (char *)this + 24;
  BOOL v1 = *((void *)this + 3);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
  return v5;
}

BOOL TCP::recv(TCP *this, unsigned __int8 *a2, int a3, unsigned int *a4)
{
  char v12 = 1;
  if (a2 && a4)
  {
    v8[0] = this;
    v8[1] = &v12;
    int v9 = a3;
    std::string::size_type v10 = a2;
    int v11 = a4;
    block[0] = MEMORY[0x263EF8330];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableI3TCPE20execute_wrapped_syncIZNS1_4recvEPhjPjE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
    block[3] = &__block_descriptor_tmp_27;
    block[4] = (char *)this + 8;
    block[5] = v8;
    unsigned __int8 v5 = (char *)this + 24;
    int v4 = *((void *)this + 3);
    if (*((void *)v5 + 1)) {
      dispatch_async_and_wait(v4, block);
    }
    else {
      dispatch_sync(v4, block);
    }
    return v12 != 0;
  }
  else
  {
    ssize_t v6 = **((void **)this + 25);
    BOOL result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (result)
    {
      LOWORD(block[0]) = 0;
      _os_log_error_impl(&dword_248AFD000, v6, OS_LOG_TYPE_ERROR, "error: Invalid input parameter TCP Receive", (uint8_t *)block, 2u);
      return 0;
    }
  }
  return result;
}

BOOL TCP::send(TCP *this, const unsigned __int8 *a2, int a3)
{
  char v9 = 1;
  if (a2)
  {
    v7[0] = this;
    v7[1] = &v9;
    v7[2] = a2;
    int v8 = a3;
    block[0] = MEMORY[0x263EF8330];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableI3TCPE20execute_wrapped_syncIZNS1_4sendEPKhjE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
    block[3] = &__block_descriptor_tmp_28;
    block[4] = (char *)this + 8;
    block[5] = v7;
    int v4 = (char *)this + 24;
    uint64_t v3 = *((void *)this + 3);
    if (*((void *)v4 + 1)) {
      dispatch_async_and_wait(v3, block);
    }
    else {
      dispatch_sync(v3, block);
    }
    return v9 != 0;
  }
  else
  {
    unsigned __int8 v5 = **((void **)this + 25);
    BOOL result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (result)
    {
      LOWORD(block[0]) = 0;
      _os_log_error_impl(&dword_248AFD000, v5, OS_LOG_TYPE_ERROR, "error: Invalid input parameter for TCP Send", (uint8_t *)block, 2u);
      return 0;
    }
  }
  return result;
}

uint64_t TCP::getPortNumber(TCP *this, int *a2)
{
  unsigned __int8 v6 = 1;
  v5[0] = this;
  v5[1] = &v6;
  v5[2] = a2;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI3TCPE20execute_wrapped_syncIZNS1_13getPortNumberERiE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke;
  block[3] = &__block_descriptor_tmp_29;
  block[4] = (char *)this + 8;
  block[5] = v5;
  uint64_t v3 = (char *)this + 24;
  int v2 = *((void *)this + 3);
  if (*((void *)v3 + 1)) {
    dispatch_async_and_wait(v2, block);
  }
  else {
    dispatch_sync(v2, block);
  }
  return v6;
}

uint64_t TCP::asString@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (a1 >= 4) {
    int v2 = "Unknown";
  }
  else {
    int v2 = off_26524E550[a1];
  }
  return MEMORY[0x24C58B2B0](a2, v2);
}

void sub_248B005B4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void TCP::~TCP(TCP *this)
{
  TCP::~TCP(this);
  operator delete(v1);
}

{
  std::__shared_weak_count *v2;
  NSObject *v3;
  NSObject *v4;
  void *v5;
  const void *v6;
  const void *v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  std::__shared_weak_count *v11;

  *(void *)this = &unk_26FCC7100;
  *((void *)this + 19) = &unk_26FCC7220;
  int v2 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *((void *)this + 18);
  if (v3) {
    dispatch_release(v3);
  }
  int v4 = *((void *)this + 17);
  if (v4) {
    dispatch_release(v4);
  }
  unsigned __int8 v5 = (void *)*((void *)this + 14);
  if (v5)
  {
    *((void *)this + 15) = v5;
    operator delete(v5);
  }
  unsigned __int8 v6 = (const void *)*((void *)this + 9);
  if (v6) {
    _Block_release(v6);
  }
  int v7 = (const void *)*((void *)this + 8);
  if (v7) {
    _Block_release(v7);
  }
  int v8 = *((void *)this + 5);
  if (v8) {
    dispatch_release(v8);
  }
  char v9 = *((void *)this + 4);
  if (v9) {
    dispatch_release(v9);
  }
  std::string::size_type v10 = *((void *)this + 3);
  if (v10) {
    dispatch_release(v10);
  }
  int v11 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
}

void __clang_call_terminate(void *a1)
{
}

void support::log::client::~client(std::__shared_weak_count **this)
{
  uint64_t v1 = (support::log::client *)this;
  *this = (std::__shared_weak_count *)&unk_26FCC7220;
  int v2 = this[8];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    this = (std::__shared_weak_count **)v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  operator delete(this);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  unsigned __int8 v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    int v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    unsigned __int8 v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_26524E3A0, MEMORY[0x263F8C060]);
}

void sub_248B007CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  BOOL result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

uint64_t ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  int v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void *std::shared_ptr<TCP>::shared_ptr[abi:ne180100]<TCP,std::shared_ptr<TCP> ctu::SharedSynchronizable<TCP>::make_shared_ptr<TCP>(TCP*)::{lambda(TCP*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FCC71D0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  std::string::size_type v6 = *(std::__shared_weak_count **)(a2 + 16);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 8) = a2;
      *(void *)(a2 + 16) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 8) = a2;
  *(void *)(a2 + 16) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_248B00A08(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<TCP> ctu::SharedSynchronizable<TCP>::make_shared_ptr<TCP>(TCP*)::{lambda(TCP*)#1}::operator() const(TCP*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_248B00A30(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<TCP *,std::shared_ptr<TCP> ctu::SharedSynchronizable<TCP>::make_shared_ptr<TCP>(TCP*)::{lambda(TCP *)#1},std::allocator<TCP>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<TCP *,std::shared_ptr<TCP> ctu::SharedSynchronizable<TCP>::make_shared_ptr<TCP>(TCP*)::{lambda(TCP *)#1},std::allocator<TCP>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<TCP *,std::shared_ptr<TCP> ctu::SharedSynchronizable<TCP>::make_shared_ptr<TCP>(TCP*)::{lambda(TCP *)#1},std::allocator<TCP>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI3TCPE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI3TCPE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI3TCPE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI3TCPE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

uint64_t std::shared_ptr<TCP> ctu::SharedSynchronizable<TCP>::make_shared_ptr<TCP>(TCP*)::{lambda(TCP*)#1}::operator() const(TCP*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ___ZNK3ctu20SharedSynchronizableI3TCPE20execute_wrapped_syncIZNS1_5startEN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEENS5_IU13block_pointerFvPKhjEEEbE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSM__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  unint64_t v3 = (void *)v1[2];
  if (v3) {
    unint64_t v3 = _Block_copy(v3);
  }
  int v4 = *(const void **)(v2 + 64);
  *(void *)(v2 + 64) = v3;
  if (v4)
  {
    _Block_release(v4);
    unint64_t v3 = *(void **)(v2 + 64);
  }
  *(unsigned char *)(v2 + 80) = v3 != 0;
  unsigned __int8 v5 = (void *)v1[3];
  if (v5) {
    unsigned __int8 v5 = _Block_copy(v5);
  }
  std::string::size_type v6 = *(const void **)(v2 + 72);
  *(void *)(v2 + 72) = v5;
  if (v6) {
    _Block_release(v6);
  }
  int v7 = *(_DWORD *)(v2 + 52);
  if (v7 == 1)
  {
    BOOL v9 = TCP::configureClientMode_sync((TCP *)v2);
    *(unsigned char *)v1[1] = v9;
    if (!v9) {
      return;
    }
LABEL_14:
    *(_DWORD *)(v2 + 48) = 1;
    return;
  }
  if (v7)
  {
    *(unsigned char *)v1[1] = 0;
    return;
  }
  BOOL v8 = TCP::configureServerMode_sync((TCP *)v2, *((unsigned __int8 *)v1 + 32));
  *(unsigned char *)v1[1] = v8;
  if (v8) {
    goto LABEL_14;
  }
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x263F8C2D8] + 16;
  __cxa_throw(exception, MEMORY[0x263F8C198], MEMORY[0x263F8C0A0]);
}

void ___ZNK3ctu20SharedSynchronizableI3TCPE20execute_wrapped_syncIZZNS1_29setLocalSocketReadSource_syncEvEUb_E3__1EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  *(_DWORD *)(v2 + 48) = 3;
  if (TCP::closeLocalSocket_sync((TCP *)v2))
  {
    uint64_t v3 = *(void *)(v2 + 72);
    if (*((char *)v1 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v1[1], v1[2]);
    }
    else
    {
      long long v4 = *(_OWORD *)(v1 + 1);
      __p.__r_.__value_.__r.__words[2] = v1[3];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v4;
    }
    (*(void (**)(uint64_t, std::string *))(v3 + 16))(v3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    unsigned __int8 v5 = **(NSObject ***)(v2 + 200);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_248AFD000, v5, OS_LOG_TYPE_ERROR, "error: close local socket failed", (uint8_t *)&__p, 2u);
    }
  }
}

void sub_248B00D64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK3ctu20SharedSynchronizableI3TCPE20execute_wrapped_syncIZZNS1_29setLocalSocketReadSource_syncEvEUb_E3__2EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 40);
  if (TCP::closeLocalSocket_sync((TCP *)v1))
  {
    *(_DWORD *)(v1 + 48) = 2;
    uint64_t v2 = *(void *)(v1 + 72);
    char v5 = 11;
    strcpy((char *)__p, "peer closed");
    (*(void (**)(void))(v2 + 16))();
    if (v5 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    uint64_t v3 = **(NSObject ***)(v1 + 200);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_error_impl(&dword_248AFD000, v3, OS_LOG_TYPE_ERROR, "error: close local socket failed", (uint8_t *)__p, 2u);
    }
  }
}

void sub_248B00E6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL ___ZNK3ctu20SharedSynchronizableI3TCPE20execute_wrapped_syncIZNS1_4stopEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  *(_DWORD *)(v2 + 48) = 0;
  uint64_t v3 = *(const void **)(v2 + 64);
  *(void *)(v2 + 64) = 0;
  if (v3) {
    _Block_release(v3);
  }
  *(unsigned char *)(v2 + 80) = 0;
  BOOL v4 = TCP::closeLocalSocket_sync((TCP *)v2);
  BOOL result = TCP::closeServerSocket_sync((TCP *)v2);
  *(unsigned char *)v1[1] = v4 && result;
  return result;
}

void ___ZNK3ctu20SharedSynchronizableI3TCPE20execute_wrapped_syncIZNS1_4recvEPhjPjE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  if (*(unsigned char *)(*v1 + 80))
  {
    *(unsigned char *)v1[1] = 0;
  }
  else
  {
    int v3 = recv(*(_DWORD *)(v2 + 92), (void *)v1[3], *((unsigned int *)v1 + 4), 0);
    *(_DWORD *)v1[4] = v3;
    *(unsigned char *)v1[1] = v3 != 0;
    if (!v3)
    {
      BOOL v4 = **(NSObject ***)(v2 + 200);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)char v5 = 0;
        _os_log_error_impl(&dword_248AFD000, v4, OS_LOG_TYPE_ERROR, "error: Failed to receive data, peer closed", v5, 2u);
      }
    }
  }
}

void ___ZNK3ctu20SharedSynchronizableI3TCPE20execute_wrapped_syncIZNS1_4sendEPKhjE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  if (*(_DWORD *)(*v1 + 48) != 1)
  {
    std::string::size_type v6 = **(NSObject ***)(v2 + 200);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      __int16 v9 = 0;
      int v7 = "error: Failed to send data to local socket, TCP Not Running";
      BOOL v8 = (uint8_t *)&v9;
      goto LABEL_13;
    }
LABEL_9:
    *(unsigned char *)v1[1] = 0;
    return;
  }
  int v3 = (TCP *)*(unsigned int *)(v2 + 92);
  if ((v3 & 0x80000000) != 0)
  {
    std::string::size_type v6 = **(NSObject ***)(v2 + 200);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      __int16 v10 = 0;
      int v7 = "error: Skip forwarding data as no valid socket destination is found";
      BOOL v8 = (uint8_t *)&v10;
LABEL_13:
      _os_log_error_impl(&dword_248AFD000, v6, OS_LOG_TYPE_ERROR, v7, v8, 2u);
      *(unsigned char *)v1[1] = 0;
      return;
    }
    goto LABEL_9;
  }
  BOOL v4 = TCP::sendAllToDst(v3, v1[2], (const unsigned __int8 *)*((unsigned int *)v1 + 6));
  *(unsigned char *)v1[1] = v4;
  if (!v4)
  {
    char v5 = **(NSObject ***)(v2 + 200);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)fd_set buf = 0;
      _os_log_error_impl(&dword_248AFD000, v5, OS_LOG_TYPE_ERROR, "error: Failed to send data to local socket, closing local socket", buf, 2u);
    }
    TCP::closeLocalSocket_sync((TCP *)v2);
  }
}

void ___ZNK3ctu20SharedSynchronizableI3TCPE20execute_wrapped_syncIZNS1_13getPortNumberERiE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  if (*(_DWORD *)(*v1 + 48))
  {
    *(_DWORD *)v1[2] = *(_DWORD *)(v2 + 56);
  }
  else
  {
    int v3 = **(NSObject ***)(v2 + 200);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v6 = 0;
      MEMORY[0x24C58B2B0](__p, "Stopped");
      if (v6 >= 0) {
        BOOL v4 = __p;
      }
      else {
        BOOL v4 = (void **)__p[0];
      }
      *(_DWORD *)fd_set buf = 136315138;
      BOOL v8 = v4;
      _os_log_error_impl(&dword_248AFD000, v3, OS_LOG_TYPE_ERROR, "error: server in invalid state %s", buf, 0xCu);
      if (SHIBYTE(v6) < 0) {
        operator delete(__p[0]);
      }
    }
    *(unsigned char *)v1[1] = 0;
  }
}

void sub_248B01214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __cxx_global_var_init()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::shared_stdio,support::log::shared_stdio,ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>>::sInstance, &dword_248AFD000);
  }
  return result;
}

void TraceSocketStreamer::create(uint64_t *a1@<X0>, const char *a2@<X1>, dispatch_object_t *a3@<X2>, std::__shared_weak_count_vtbl **a4@<X8>)
{
  uint64_t v7 = *a1;
  uint64_t v6 = (std::__shared_weak_count *)a1[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v8 = *a3;
  if (*a3) {
    dispatch_retain(*a3);
  }
  uint64_t v28 = v7;
  unint64_t v29 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  socklen_t v30 = a2;
  v21[8] = 0;
  v22 = 0;
  ctu::Loggable<TraceStreamer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<char const*&,std::shared_ptr<ctu::LogServer>&>(&v20, &v30, &v28);
  uint64_t v20 = &unk_26FCC73B8;
  long long v23 = 0uLL;
  uint64_t v24 = 0;
  uint64_t v9 = v29;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v20 = &unk_26FCC7250;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  dispatch_object_t object = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  __int16 v10 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v10->__shared_owners_ = 0;
  p_shared_owners = &v10->__shared_owners_;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FCC72D0;
  char v12 = (std::__shared_weak_count_vtbl *)&v10[1];
  v10[4].__vftable = 0;
  v10[4].__shared_owners_ = 0;
  v10->__shared_weak_owners_ = 0;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26FCC7338;
  ctu::LoggerCommonBase::LoggerCommonBase();
  v10[1].__shared_owners_ = (uint64_t)&unk_26FCC7378;
  uint64_t v13 = v21[7];
  v10[3].__shared_owners_ = v21[6];
  v10[3].__shared_weak_owners_ = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)&v10[4].__shared_weak_owners_ = v23;
  uint64_t v14 = v24;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26FCC7250;
  uint64_t v16 = v25;
  char v15 = v26;
  v10[5].__shared_owners_ = v14;
  v10[5].__shared_weak_owners_ = v16;
  v10[6].__vftable = (std::__shared_weak_count_vtbl *)v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sockaddr v17 = object;
  v10[6].__shared_owners_ = (uint64_t)object;
  if (v17) {
    dispatch_retain(v17);
  }
  *a4 = v12;
  a4[1] = (std::__shared_weak_count_vtbl *)v10;
  shared_owners = (std::__shared_weak_count *)v10[4].__shared_owners_;
  if (!shared_owners)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v10[4].__vftable = v12;
    v10[4].__shared_owners_ = (uint64_t)v10;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (shared_owners->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v10[4].__vftable = v12;
    v10[4].__shared_owners_ = (uint64_t)v10;
    std::__shared_weak_count::__release_weak(shared_owners);
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_23:
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
LABEL_24:
  uint64_t v20 = &unk_26FCC7250;
  if (object) {
    dispatch_release(object);
  }
  uint64_t v19 = v26;
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  uint64_t v20 = &unk_26FCC7338;
  MEMORY[0x24C58AF50](v21);
  if (v22) {
    std::__shared_weak_count::__release_weak(v22);
  }
  if (v8) {
    dispatch_release(v8);
  }
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_248B01744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  TraceSocketStreamer::~TraceSocketStreamer((TraceSocketStreamer *)&a11);
  if (v21) {
    dispatch_release(v21);
  }
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void TraceSocketStreamer::~TraceSocketStreamer(TraceSocketStreamer *this)
{
  *(void *)this = &unk_26FCC7250;
  uint64_t v2 = *((void *)this + 16);
  if (v2) {
    dispatch_release(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    *(void *)this = &unk_26FCC7338;
    MEMORY[0x24C58AF50]((char *)this + 8);
    BOOL v4 = (std::__shared_weak_count *)*((void *)this + 10);
    if (!v4) {
      return;
    }
  }
  else
  {
    *(void *)this = &unk_26FCC7338;
    MEMORY[0x24C58AF50]((char *)this + 8);
    BOOL v4 = (std::__shared_weak_count *)*((void *)this + 10);
    if (!v4) {
      return;
    }
  }
  std::__shared_weak_count::__release_weak(v4);
}

{
  NSObject *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_26FCC7250;
  uint64_t v2 = *((void *)this + 16);
  if (v2) {
    dispatch_release(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    *(void *)this = &unk_26FCC7338;
    MEMORY[0x24C58AF50]((char *)this + 8);
    BOOL v4 = (std::__shared_weak_count *)*((void *)this + 10);
    if (!v4) {
      return;
    }
  }
  else
  {
    *(void *)this = &unk_26FCC7338;
    MEMORY[0x24C58AF50]((char *)this + 8);
    BOOL v4 = (std::__shared_weak_count *)*((void *)this + 10);
    if (!v4) {
      return;
    }
  }
  std::__shared_weak_count::__release_weak(v4);
}

{
  NSObject *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)this = &unk_26FCC7250;
  uint64_t v2 = *((void *)this + 16);
  if (v2) {
    dispatch_release(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 15);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    *(void *)this = &unk_26FCC7338;
    MEMORY[0x24C58AF50]((char *)this + 8);
    BOOL v4 = (std::__shared_weak_count *)*((void *)this + 10);
    if (!v4) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  *(void *)this = &unk_26FCC7338;
  MEMORY[0x24C58AF50]((char *)this + 8);
  BOOL v4 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v4) {
LABEL_6:
  }
    std::__shared_weak_count::__release_weak(v4);
LABEL_7:
  operator delete(this);
}

void *TraceSocketStreamer::TraceSocketStreamer(void *a1, uint64_t *a2, const char *a3, NSObject **a4)
{
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  uint64_t v10 = *a2;
  int v11 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v12 = a3;
  a1[9] = 0;
  a1[10] = 0;
  ctu::Loggable<TraceStreamer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<char const*&,std::shared_ptr<ctu::LogServer>&>(a1, &v12, &v10);
  *a1 = &unk_26FCC73B8;
  a1[12] = 0;
  a1[13] = 0;
  a1[11] = 0;
  uint64_t v7 = v11;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  *a1 = &unk_26FCC7250;
  a1[14] = 0;
  a1[15] = 0;
  BOOL v8 = *a4;
  a1[16] = *a4;
  if (v8) {
    dispatch_retain(v8);
  }
  return a1;
}

void sub_248B01984(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  BOOL v4 = *(std::__shared_weak_count **)(v2 + 80);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t TraceSocketStreamer::start(TraceSocketStreamer *this)
{
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN19TraceSocketStreamer5startEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp;
  aBlock[4] = this;
  uint64_t v2 = _Block_copy(aBlock);
  v27[0] = MEMORY[0x263EF8330];
  v27[1] = 0x40000000;
  v27[2] = ___ZN19TraceSocketStreamer5startEv_block_invoke_2;
  v27[3] = &__block_descriptor_tmp_5;
  v27[4] = this;
  int v3 = _Block_copy(v27);
  BOOL v4 = *((void *)this + 16);
  dispatch_object_t object = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  TCP::create(0, 0, &object, buf);
  long long v5 = *(_OWORD *)buf;
  memset(buf, 0, 16);
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 15);
  *((_OWORD *)this + 7) = v5;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)buf[1];
  if (buf[1] && !atomic_fetch_add((atomic_ullong *volatile)(buf[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (object) {
    dispatch_release(object);
  }
  if (!*((void *)this + 14))
  {
    char v12 = (char *)this + 8;
    uint64_t v13 = *((void *)this + 5);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf[0]) = 0;
      _os_log_error_impl(&dword_248AFD000, v13, OS_LOG_TYPE_ERROR, "[start failed] server socket gone", (uint8_t *)buf, 2u);
    }
    if ((**(unsigned int (***)(char *, uint64_t))v12)(v12, 80))
    {
      ctu::LogMessageBuffer::createWithFormat(buf, (ctu::LogMessageBuffer *)"[start failed] server socket gone", v14);
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
LABEL_36:
      MEMORY[0x24C58AFD0](buf);
    }
LABEL_37:
    uint64_t v18 = 0;
    if (!v3) {
      goto LABEL_39;
    }
    goto LABEL_38;
  }
  signal(13, (void (__cdecl *)(int))1);
  uint64_t v8 = *((void *)this + 14);
  if (v2)
  {
    uint64_t v9 = _Block_copy(v2);
    uint64_t v24 = v9;
    if (v3) {
      goto LABEL_14;
    }
LABEL_23:
    long long v23 = 0;
    char v11 = TCP::start(v8, &v24, &v23, 0);
    if (!v9) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  uint64_t v9 = 0;
  uint64_t v24 = 0;
  if (!v3) {
    goto LABEL_23;
  }
LABEL_14:
  uint64_t v10 = _Block_copy(v3);
  long long v23 = v10;
  char v11 = TCP::start(v8, &v24, &v23, 0);
  if (v10) {
    _Block_release(v10);
  }
  if (v9) {
LABEL_24:
  }
    _Block_release(v9);
LABEL_25:
  if ((v11 & 1) == 0)
  {
    uint64_t v19 = (char *)this + 8;
    uint64_t v20 = *((void *)this + 5);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf[0]) = 0;
      _os_log_error_impl(&dword_248AFD000, v20, OS_LOG_TYPE_ERROR, "[start failed] failed to start TCP service", (uint8_t *)buf, 2u);
    }
    if ((**(unsigned int (***)(char *, uint64_t))v19)(v19, 80))
    {
      ctu::LogMessageBuffer::createWithFormat(buf, (ctu::LogMessageBuffer *)"[start failed] failed to start TCP service", v21);
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  TraceSocketStreamer::notifyCellularLoggingPortNumber(this);
  char v15 = (char *)this + 8;
  uint64_t v16 = *((void *)this + 5);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl(&dword_248AFD000, v16, OS_LOG_TYPE_DEFAULT, "#I [start success] notification for port number is sent out to client", (uint8_t *)buf, 2u);
  }
  if ((**(unsigned int (***)(char *, uint64_t))v15)(v15, 40))
  {
    ctu::LogMessageBuffer::createWithFormat(buf, (ctu::LogMessageBuffer *)"[start success] notification for port number is sent out to client", v17);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    MEMORY[0x24C58AFD0](buf);
  }
  uint64_t v18 = 1;
  if (v3) {
LABEL_38:
  }
    _Block_release(v3);
LABEL_39:
  if (v2) {
    _Block_release(v2);
  }
  return v18;
}

void sub_248B01DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  MEMORY[0x24C58AFD0](va);
  if (v4) {
    _Block_release(v4);
  }
  if (v3) {
    _Block_release(v3);
  }
  _Unwind_Resume(a1);
}

void sub_248B01E70()
{
  if (v0) {
    dispatch_release(v0);
  }
  JUMPOUT(0x248B01E48);
}

uint64_t ___ZN19TraceSocketStreamer5startEv_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  BOOL v4 = (uint64_t (***)(void, uint64_t))(v3 + 8);
  long long v5 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = a2;
    if (*((char *)a2 + 23) < 0) {
      uint64_t v6 = (uint64_t *)*a2;
    }
    *(_DWORD *)fd_set buf = 136315138;
    uint64_t v10 = v6;
    _os_log_impl(&dword_248AFD000, v5, OS_LOG_TYPE_DEFAULT, "#I Error: %s", buf, 0xCu);
  }
  uint64_t result = (**v4)(v4, 40);
  if (result)
  {
    if (*((char *)a2 + 23) < 0) {
      a2 = (uint64_t *)*a2;
    }
    ctu::LogMessageBuffer::createWithFormat((uint64_t *)buf, (ctu::LogMessageBuffer *)"Error: %s", v8, a2);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    return MEMORY[0x24C58AFD0](buf);
  }
  return result;
}

uint64_t ___ZN19TraceSocketStreamer5startEv_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 32);
  long long v5 = (uint64_t (***)(void, uint64_t))(v4 + 8);
  uint64_t v6 = *(NSObject **)(v4 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)fd_set buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a3;
    _os_log_impl(&dword_248AFD000, v6, OS_LOG_TYPE_DEFAULT, "#I data handler cb triggered with message size %d", buf, 8u);
  }
  uint64_t result = (**v5)(v5, 40);
  if (result)
  {
    ctu::LogMessageBuffer::createWithFormat((uint64_t *)buf, (ctu::LogMessageBuffer *)"data handler cb triggered with message size %d", v8, a3);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    return MEMORY[0x24C58AFD0](buf);
  }
  return result;
}

uint64_t TraceSocketStreamer::notifyCellularLoggingPortNumber(TraceSocketStreamer *this)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  int out_token = 0;
  if (!notify_register_check("com.apple.CommCenterMobileHelpr.streamingPort", &out_token))
  {
    if (!notify_is_valid_token(out_token)) {
      return 1;
    }
    uint64_t v6 = *((void *)this + 14);
    if (!v6)
    {
      uint64_t v11 = (char *)this + 8;
      char v12 = *((void *)this + 5);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        LOWORD(block) = 0;
        _os_log_error_impl(&dword_248AFD000, v12, OS_LOG_TYPE_ERROR, "TCP object gone!", (uint8_t *)&block, 2u);
      }
      uint64_t result = (**(uint64_t (***)(char *, uint64_t))v11)(v11, 80);
      if (result)
      {
        ctu::LogMessageBuffer::createWithFormat((uint64_t *)&block, (ctu::LogMessageBuffer *)"TCP object gone!", v13);
        ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
        goto LABEL_6;
      }
      return result;
    }
    unsigned int v17 = -1;
    char v20 = 1;
    v19[0] = v6;
    v19[1] = &v20;
    v19[2] = &v17;
    *(void *)&long long block = MEMORY[0x263EF8330];
    *((void *)&block + 1) = 0x40000000;
    v22 = ___ZNK3ctu20SharedSynchronizableI3TCPE20execute_wrapped_syncIZNS1_13getPortNumberERiE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke;
    long long v23 = &__block_descriptor_tmp_29;
    uint64_t v24 = v6 + 8;
    uint64_t v25 = v19;
    uint64_t v7 = *(NSObject **)(v6 + 24);
    if (*(void *)(v6 + 32))
    {
      dispatch_async_and_wait(v7, &block);
      if (v20)
      {
LABEL_12:
        notify_set_state(out_token, v17);
        notify_post("com.apple.CommCenterMobileHelpr.streamingPort");
        uint64_t v8 = (char *)this + 8;
        uint64_t v9 = *((void *)this + 5);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(block) = 67109120;
          DWORD1(block) = v17;
          _os_log_impl(&dword_248AFD000, v9, OS_LOG_TYPE_DEFAULT, "#I notify port number %d", (uint8_t *)&block, 8u);
        }
        if ((**(unsigned int (***)(char *, uint64_t))v8)(v8, 40))
        {
          ctu::LogMessageBuffer::createWithFormat((uint64_t *)&block, (ctu::LogMessageBuffer *)"notify port number %d", v10, v17);
          ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
          MEMORY[0x24C58AFD0](&block);
        }
        return 1;
      }
    }
    else
    {
      dispatch_sync(v7, &block);
      if (v20) {
        goto LABEL_12;
      }
    }
    uint64_t v14 = (char *)this + 8;
    char v15 = *((void *)this + 5);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      LOWORD(block) = 0;
      _os_log_error_impl(&dword_248AFD000, v15, OS_LOG_TYPE_ERROR, "Unable to get port number from TCP stack, is TCP stack running?", (uint8_t *)&block, 2u);
    }
    if (!(**(unsigned int (***)(char *, uint64_t))v14)(v14, 80)) {
      return 0;
    }
    ctu::LogMessageBuffer::createWithFormat((uint64_t *)&block, (ctu::LogMessageBuffer *)"Unable to get port number from TCP stack, is TCP stack running?", v16);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
LABEL_6:
    MEMORY[0x24C58AFD0](&block);
    return 0;
  }
  uint64_t v2 = (char *)this + 8;
  uint64_t v3 = *((void *)this + 5);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    LODWORD(block) = 136315138;
    *(void *)((char *)&block + 4) = "com.apple.CommCenterMobileHelpr.streamingPort";
    _os_log_error_impl(&dword_248AFD000, v3, OS_LOG_TYPE_ERROR, "Failed to create notifiy register check for notification %s", (uint8_t *)&block, 0xCu);
  }
  uint64_t result = (**(uint64_t (***)(char *, uint64_t))v2)(v2, 80);
  if (result)
  {
    ctu::LogMessageBuffer::createWithFormat((uint64_t *)&block, (ctu::LogMessageBuffer *)"Failed to create notifiy register check for notification %s", v5, "com.apple.CommCenterMobileHelpr.streamingPort");
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    goto LABEL_6;
  }
  return result;
}

BOOL TraceSocketStreamer::stop(TraceSocketStreamer *this)
{
  uint64_t v3 = (void *)((char *)this + 112);
  uint64_t v2 = *((void *)this + 14);
  if (v2)
  {
    char v17 = 1;
    v16[0] = v2;
    v16[1] = &v17;
    v15[0] = MEMORY[0x263EF8330];
    v15[1] = 0x40000000;
    v15[2] = (uint64_t)___ZNK3ctu20SharedSynchronizableI3TCPE20execute_wrapped_syncIZNS1_4stopEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
    v15[3] = (uint64_t)&__block_descriptor_tmp_26;
    v15[4] = v2 + 8;
    v15[5] = (uint64_t)v16;
    uint64_t v4 = *(NSObject **)(v2 + 24);
    if (*(void *)(v2 + 32))
    {
      dispatch_async_and_wait(v4, v15);
      BOOL v5 = v17 != 0;
      uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 15);
      *((void *)this + 14) = 0;
      *((void *)this + 15) = 0;
      if (v6)
      {
LABEL_4:
        if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 15);
        void *v3 = 0;
        v3[1] = 0;
        if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
LABEL_16:
        signal(13, 0);
        char v12 = (char *)this + 8;
        uint64_t v13 = *((void *)this + 5);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v15[0]) = 0;
          _os_log_impl(&dword_248AFD000, v13, OS_LOG_TYPE_DEFAULT, "#I [stop success] server socket closed", (uint8_t *)v15, 2u);
        }
        if ((**(unsigned int (***)(char *, uint64_t))v12)(v12, 40))
        {
          ctu::LogMessageBuffer::createWithFormat(v15, (ctu::LogMessageBuffer *)"[stop success] server socket closed", v14);
          ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
          MEMORY[0x24C58AFD0](v15);
          return v5;
        }
        return v5;
      }
    }
    else
    {
      dispatch_sync(v4, v15);
      BOOL v5 = v17 != 0;
      uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 15);
      *((void *)this + 14) = 0;
      *((void *)this + 15) = 0;
      if (v6) {
        goto LABEL_4;
      }
    }
    void *v3 = 0;
    v3[1] = 0;
    goto LABEL_16;
  }
  uint64_t v8 = (char *)this + 8;
  uint64_t v9 = *((void *)this + 5);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v15[0]) = 0;
    _os_log_error_impl(&dword_248AFD000, v9, OS_LOG_TYPE_ERROR, "[stop fail] TCP instance gone!", (uint8_t *)v15, 2u);
  }
  if ((**(unsigned int (***)(char *, uint64_t))v8)(v8, 80))
  {
    ctu::LogMessageBuffer::createWithFormat(v15, (ctu::LogMessageBuffer *)"[stop fail] TCP instance gone!", v10);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    MEMORY[0x24C58AFD0](v15);
    return 0;
  }
  return 0;
}

uint64_t TraceSocketStreamer::forward(TraceSocketStreamer *this, unsigned __int8 *a2, unsigned int a3)
{
  uint64_t result = 0;
  if (a2 && a3)
  {
    uint64_t v5 = a3;
    *((void *)this + 12) += a3;
    uint64_t v6 = (char *)this + 8;
    if (TCP::send(*((TCP **)this + 14), a2, a3))
    {
      *((void *)this + 13) += v5;
      uint64_t v7 = *((void *)this + 5);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v11[0]) = 0;
        _os_log_debug_impl(&dword_248AFD000, v7, OS_LOG_TYPE_DEBUG, "#D new data forwarded", (uint8_t *)v11, 2u);
      }
      if ((**(unsigned int (***)(char *, uint64_t))v6)(v6, 20))
      {
        ctu::LogMessageBuffer::createWithFormat(v11, (ctu::LogMessageBuffer *)"new data forwarded", v8);
        ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
        MEMORY[0x24C58AFD0](v11);
        return 1;
      }
      else
      {
        return 1;
      }
    }
    else
    {
      *((void *)this + 11) += v5;
      uint64_t v9 = *((void *)this + 5);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v11[0]) = 0;
        _os_log_error_impl(&dword_248AFD000, v9, OS_LOG_TYPE_ERROR, "failed to forward new data", (uint8_t *)v11, 2u);
      }
      uint64_t result = (**(uint64_t (***)(char *, uint64_t))v6)(v6, 80);
      if (result)
      {
        ctu::LogMessageBuffer::createWithFormat(v11, (ctu::LogMessageBuffer *)"failed to forward new data", v10);
        ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
        MEMORY[0x24C58AFD0](v11);
        return 0;
      }
    }
  }
  return result;
}

uint64_t TraceSocketStreamer::snapshot@<X0>(TraceSocketStreamer *this@<X0>, xpc_object_t *a2@<X8>)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  *a2 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x24C58BF40](v5) != MEMORY[0x263EF8708])
  {
    xpc_object_t v6 = xpc_null_create();
LABEL_8:
    *a2 = v6;
    goto LABEL_9;
  }
  xpc_retain(v5);
LABEL_9:
  xpc_release(v5);
  unint64_t v39 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v38[7] = v7;
  v38[8] = v7;
  v38[5] = v7;
  v38[6] = v7;
  v38[3] = v7;
  v38[4] = v7;
  v38[1] = v7;
  v38[2] = v7;
  long long v37 = v7;
  v38[0] = v7;
  long long v35 = v7;
  long long v36 = v7;
  v34[2] = v7;
  _OWORD v34[3] = v7;
  v34[0] = v7;
  v34[1] = v7;
  long long v33 = v7;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v33);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Received Bytes during Streaming Session: ", 41);
  uint64_t v8 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24)));
  uint64_t v9 = std::locale::use_facet((const std::locale *)v32, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
  std::locale::~locale((std::locale *)v32);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Sent Bytes during Streaming Session: ", 37);
  uint64_t v10 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
  uint64_t v11 = std::locale::use_facet((const std::locale *)v32, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
  std::locale::~locale((std::locale *)v32);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Drop Bytes during Streaming Session: ", 37);
  char v12 = (unint64_t *)((char *)this + 88);
  uint64_t v13 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
  uint64_t v14 = std::locale::use_facet((const std::locale *)v32, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale((std::locale *)v32);
  std::ostream::put();
  std::ostream::flush();
  char v15 = *((void *)this + 5);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    std::stringbuf::str();
    uint64_t v16 = (v32[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? v32
        : (std::string *)v32[0].__r_.__value_.__r.__words[0];
    *(_DWORD *)fd_set buf = 136315138;
    *(void *)&uint8_t buf[4] = v16;
    _os_log_impl(&dword_248AFD000, v15, OS_LOG_TYPE_DEFAULT, "#I Streaming Statistics:\n%s", buf, 0xCu);
    if (SHIBYTE(v32[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v32[0].__r_.__value_.__l.__data_);
    }
  }
  if ((**((unsigned int (***)(char *, uint64_t))this + 1))((char *)this + 8, 40))
  {
    std::stringbuf::str();
    uint64_t v18 = v41 >= 0 ? buf : *(unsigned char **)buf;
    ctu::LogMessageBuffer::createWithFormat((uint64_t *)v32, (ctu::LogMessageBuffer *)"Streaming Statistics:\n%s", v17, v18);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    MEMORY[0x24C58AFD0](v32);
    if (v41 < 0) {
      operator delete(*(void **)buf);
    }
  }
  std::to_string(v32, *((void *)this + 12));
  if ((v32[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v19 = v32;
  }
  else {
    uint64_t v19 = (std::string *)v32[0].__r_.__value_.__r.__words[0];
  }
  xpc_object_t v20 = xpc_string_create((const char *)v19);
  if (!v20) {
    xpc_object_t v20 = xpc_null_create();
  }
  xpc_object_t v21 = *a2;
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x263F26708], v20);
  xpc_object_t v22 = xpc_null_create();
  xpc_release(v20);
  xpc_release(v22);
  if (SHIBYTE(v32[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32[0].__r_.__value_.__l.__data_);
  }
  std::to_string(v32, *((void *)this + 13));
  if ((v32[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v23 = v32;
  }
  else {
    long long v23 = (std::string *)v32[0].__r_.__value_.__r.__words[0];
  }
  xpc_object_t v24 = xpc_string_create((const char *)v23);
  if (!v24) {
    xpc_object_t v24 = xpc_null_create();
  }
  xpc_dictionary_set_value(v21, (const char *)*MEMORY[0x263F26560], v24);
  xpc_object_t v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  if (SHIBYTE(v32[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32[0].__r_.__value_.__l.__data_);
  }
  std::to_string(v32, *v12);
  if ((v32[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v26 = v32;
  }
  else {
    uint64_t v26 = (std::string *)v32[0].__r_.__value_.__r.__words[0];
  }
  xpc_object_t v27 = xpc_string_create((const char *)v26);
  if (!v27) {
    xpc_object_t v27 = xpc_null_create();
  }
  xpc_dictionary_set_value(v21, (const char *)*MEMORY[0x263F266C8], v27);
  xpc_object_t v28 = xpc_null_create();
  xpc_release(v27);
  xpc_release(v28);
  if (SHIBYTE(v32[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32[0].__r_.__value_.__l.__data_);
  }
  unint64_t *v12 = 0;
  v12[1] = 0;
  unint64_t v29 = (void *)MEMORY[0x263F8C2B8];
  void v12[2] = 0;
  *(void *)&long long v33 = *v29;
  uint64_t v30 = v29[9];
  *(void *)((char *)&v34[-1] + *(void *)(v33 - 24)) = v29[8];
  *(void *)&v34[0] = v30;
  *((void *)&v34[0] + 1) = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v36) < 0) {
    operator delete(*((void **)&v35 + 1));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x24C58B5B0](v38);
}

void sub_248B03294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C328] + 104;
  *(void *)(a1 + 128) = MEMORY[0x263F8C328] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x263F8C328] + 64;
  *(void *)(a1 + 16) = MEMORY[0x263F8C328] + 64;
  xpc_object_t v5 = (void *)MEMORY[0x263F8C2B8];
  uint64_t v6 = *(void *)(MEMORY[0x263F8C2B8] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x263F8C2B8] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  uint64_t v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x263F8C328] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_248B03624(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x24C58B5B0](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2B8];
  uint64_t v3 = *MEMORY[0x263F8C2B8];
  *(void *)a1 = *MEMORY[0x263F8C2B8];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x24C58B5B0](a1 + 128);
  return a1;
}

void xpc::dict::~dict(xpc_object_t *this)
{
  *this = 0;
}

uint64_t ctu::Loggable<TraceStreamer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x270F97428](a1 + 8);
}

void ctu::Loggable<TraceStreamer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 19;
  strcpy(a1, "TraceStreamer.modem");
}

uint64_t ctu::Loggable<TraceStreamer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x270F978E0](a1 + 8);
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  v13[0] = 0xAAAAAAAAAAAAAAAALL;
  v13[1] = 0xAAAAAAAAAAAAAAAALL;
  MEMORY[0x24C58B3F0](v13, a1);
  if (LOBYTE(v13[0]))
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x24C58B400](v13);
  return a1;
}

void sub_248B0394C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x24C58B400](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x248B0392CLL);
}

void sub_248B039A0(_Unwind_Exception *a1)
{
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      size_t v12 = 0;
    }
    else {
      size_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if ((uint64_t)v12 >= 1)
    {
      memset(__b, 170, sizeof(__b));
      if (v12 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v12 >= 0x17)
      {
        uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v14 = v12 | 7;
        }
        uint64_t v15 = v14 + 1;
        uint64_t v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        __b[2] = (void *)(v15 | 0x8000000000000000);
        __b[0] = v13;
      }
      else
      {
        HIBYTE(__b[2]) = v12;
        uint64_t v13 = __b;
      }
      memset(v13, __c, v12);
      *((unsigned char *)v13 + v12) = 0;
      if (SHIBYTE(__b[2]) >= 0) {
        uint64_t v16 = __b;
      }
      else {
        uint64_t v16 = (void **)__b[0];
      }
      uint64_t v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(void *)v6 + 96))(v6, v16, v12);
      uint64_t v18 = v17;
      if (SHIBYTE(__b[2]) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12) {
          return 0;
        }
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    uint64_t v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(void *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

void sub_248B03B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<TraceSocketStreamer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FCC72D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TraceSocketStreamer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FCC72D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<TraceSocketStreamer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *ctu::Loggable<TraceStreamer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_26FCC7338;
  MEMORY[0x24C58AF50](a1 + 1);
  return a1;
}

void ctu::Loggable<TraceStreamer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_26FCC7338;
  MEMORY[0x24C58AF50](a1 + 1);
  operator delete(a1);
}

uint64_t __cxx_global_var_init_0()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::shared_stdio,support::log::shared_stdio,ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>>::sInstance, &dword_248AFD000);
  }
  return result;
}

void TraceStreamer::create(uint64_t *a1@<X0>, const char *a2@<X1>, int a3@<W2>, NSObject **a4@<X3>, void *a5@<X8>)
{
  *a5 = 0;
  a5[1] = 0;
  if (!a3)
  {
    uint64_t v7 = a1[1];
    uint64_t v12 = *a1;
    uint64_t v13 = (std::__shared_weak_count *)v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    int v8 = *a4;
    dispatch_object_t object = v8;
    if (v8) {
      dispatch_retain(v8);
    }
    TraceSocketStreamer::create(&v12, a2, &object, (std::__shared_weak_count_vtbl **)&v14);
    long long v9 = v14;
    long long v14 = 0uLL;
    *(_OWORD *)a5 = v9;
    if (object) {
      dispatch_release(object);
    }
    uint64_t v10 = v13;
    if (v13)
    {
      if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_248B03DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, char a11)
{
  if (object) {
    dispatch_release(object);
  }
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v11);
  _Unwind_Resume(a1);
}

void *TraceStreamer::TraceStreamer(void *a1, void *a2, const char *a3)
{
  xpc_object_t v5 = a3;
  a1[9] = 0;
  a1[10] = 0;
  ctu::Loggable<TraceStreamer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<char const*&,std::shared_ptr<ctu::LogServer>&>(a1, &v5, a2);
  *a1 = &unk_26FCC73B8;
  a1[12] = 0;
  a1[13] = 0;
  a1[11] = 0;
  return a1;
}

void sub_248B03E84(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 80);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void *ctu::Loggable<TraceStreamer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<char const*&,std::shared_ptr<ctu::LogServer>&>(void *a1, const char **a2, void *a3)
{
  *a1 = &unk_26FCC7338;
  xpc_object_t v5 = *a2;
  size_t v6 = strlen(*a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    int v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    unint64_t v14 = v10 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_8;
  }
  HIBYTE(v14) = v6;
  int v8 = __dst;
  if (v6) {
LABEL_8:
  }
    memmove(v8, v5, (size_t)v7);
  *((unsigned char *)v7 + (void)v8) = 0;
  ctu::LoggerCommonBase::LoggerCommonBase();
  a1[1] = &unk_26FCC7378;
  a1[7] = *a3;
  uint64_t v11 = a3[1];
  a1[8] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
  return a1;
}

void sub_248B03FD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void TraceStreamer::~TraceStreamer(TraceStreamer *this)
{
  *(void *)this = &unk_26FCC7338;
  MEMORY[0x24C58AF50]((char *)this + 8);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

uint64_t __cxx_global_var_init_1()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::shared_stdio,support::log::shared_stdio,ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>>::sInstance, &dword_248AFD000);
  }
  return result;
}

void *support::log::delegate::context::create@<X0>(support::log::delegate::context *this@<X0>, void *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v5 = operator new(0x10uLL);
  *xpc_object_t v5 = &unk_26FCC7468;
  v5[1] = this;
  *a2 = v5;
  uint64_t result = operator new(0x20uLL);
  void *result = &unk_26FCC7660;
  result[1] = 0;
  result[2] = 0;
  result[3] = v5;
  a2[1] = result;
  return result;
}

void sub_248B04118(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *support::log::delegate::context::context(void *this, void *a2)
{
  *this = &unk_26FCC7468;
  this[1] = a2;
  return this;
}

{
  *this = &unk_26FCC7468;
  this[1] = a2;
  return this;
}

uint64_t support::log::delegate::delegate(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  *(void *)uint64_t result = &unk_26FCC7488;
  *(void *)(result + 8) = v3;
  *(void *)(result + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(result + 24) = 1;
  return result;
}

uint64_t support::log::delegate::get_context@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
  if (*(unsigned char *)(this + 24))
  {
    uint64_t v2 = *(void *)(this + 16);
    *(void *)a2 = *(void *)(this + 8);
    *(void *)(a2 + 8) = v2;
    if (v2) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
    }
    *(unsigned char *)(a2 + 16) = 1;
  }
  return this;
}

uint64_t support::log::manager::parameters::parameters(uint64_t result, char a2)
{
  *(void *)uint64_t result = &unk_26FCC74B8;
  *(unsigned char *)(result + 8) = a2;
  return result;
}

{
  *(void *)uint64_t result = &unk_26FCC74B8;
  *(unsigned char *)(result + 8) = a2;
  return result;
}

uint64_t support::log::manager::parameters::parameters(uint64_t this)
{
  *(void *)this = &unk_26FCC74B8;
  *(unsigned char *)(this + 8) = 3;
  return this;
}

{
  *(void *)this = &unk_26FCC74B8;
  *(unsigned char *)(this + 8) = 3;
  return this;
}

uint64_t support::log::manager::parameters::set_defaults(uint64_t this)
{
  *(unsigned char *)(this + 8) = 3;
  return this;
}

uint64_t support::log::manager::manager(uint64_t a1, std::string *a2, uint64_t a3, void *a4)
{
  *(void *)a1 = &unk_26FCC74D0;
  *(void *)(a1 + 8) = 850045863;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0;
  std::string v18 = *a2;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  char v17 = 12;
  strcpy(__s, ".log_manager");
  uint64_t v7 = std::string::append(&v18, __s, 0xCuLL);
  int v8 = (const char *)(a1 + 72);
  long long v9 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  *(void *)(a1 + 88) = *((void *)&v7->__r_.__value_.__l + 2);
  *(_OWORD *)(a1 + 72) = v9;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if ((v17 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_8:
    operator delete(v18.__r_.__value_.__l.__data_);
    if ((*(char *)(a1 + 95) & 0x80000000) == 0) {
      goto LABEL_4;
    }
    goto LABEL_9;
  }
  operator delete(*(void **)__s);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_8;
  }
LABEL_3:
  if ((*(char *)(a1 + 95) & 0x80000000) == 0) {
    goto LABEL_4;
  }
LABEL_9:
  int v8 = *(const char **)v8;
LABEL_4:
  *(void *)(a1 + 96) = os_log_create("com.apple.telephony.basebandservices", v8);
  *(void *)(a1 + 104) = &unk_26FCC74B8;
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a3 + 8);
  *(void *)(a1 + 120) = a1 + 120;
  *(void *)(a1 + 128) = a1 + 120;
  *(void *)(a1 + 136) = 0;
  uint64_t v10 = a4[2];
  if (v10)
  {
    uint64_t v12 = *a4;
    uint64_t v11 = (uint64_t *)a4[1];
    uint64_t v13 = *v11;
    *(void *)(v13 + 8) = *(void *)(*a4 + 8);
    **(void **)(v12 + 8) = v13;
    uint64_t v14 = *(void *)(a1 + 120);
    *(void *)(v14 + 8) = v11;
    *uint64_t v11 = v14;
    *(void *)(a1 + 120) = v12;
    *(void *)(v12 + 8) = a1 + 120;
    *(void *)(a1 + 136) = v10;
    a4[2] = 0;
  }
  return a1;
}

void sub_248B04428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      std::mutex::~mutex(v21);
      _Unwind_Resume(a1);
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  std::mutex::~mutex(v21);
  _Unwind_Resume(a1);
}

uint64_t support::log::manager::manager(uint64_t a1, std::string *a2, uint64_t a3, uint64_t *a4)
{
  std::string __p = *a2;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  uint64_t v15 = (uint64_t)&v15;
  uint64_t v16 = &v15;
  uint64_t v17 = 0;
  support::log::manager::manager(a1, &__p, a3, &v15);
  if (v17)
  {
    uint64_t v6 = v15;
    uint64_t v7 = v16;
    uint64_t v8 = *v16;
    *(void *)(v8 + 8) = *(void *)(v15 + 8);
    **(void **)(v6 + 8) = v8;
    uint64_t v17 = 0;
    if (v7 != &v15)
    {
      do
      {
        uint64_t v10 = (uint64_t *)v7[1];
        uint64_t v9 = v7[2];
        v7[2] = 0;
        if (v9) {
          (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
        operator delete(v7);
        uint64_t v7 = v10;
      }
      while (v10 != &v15);
    }
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*a4) {
      return a1;
    }
    goto LABEL_10;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (*a4)
  {
LABEL_10:
    std::mutex::lock((std::mutex *)(a1 + 8));
    uint64_t v11 = operator new(0x18uLL);
    uint64_t v12 = *a4;
    *a4 = 0;
    uint64_t v13 = *(void *)(a1 + 120);
    v11[1] = a1 + 120;
    v11[2] = v12;
    *uint64_t v11 = v13;
    *(void *)(v13 + 8) = v11;
    *(void *)(a1 + 120) = v11;
    ++*(void *)(a1 + 136);
    std::mutex::unlock((std::mutex *)(a1 + 8));
  }
  return a1;
}

{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::string __p;

  std::string __p = *a2;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  uint64_t v15 = (uint64_t)&v15;
  uint64_t v16 = &v15;
  uint64_t v17 = 0;
  support::log::manager::manager(a1, &__p, a3, &v15);
  if (v17)
  {
    uint64_t v6 = v15;
    uint64_t v7 = v16;
    uint64_t v8 = *v16;
    *(void *)(v8 + 8) = *(void *)(v15 + 8);
    **(void **)(v6 + 8) = v8;
    uint64_t v17 = 0;
    if (v7 != &v15)
    {
      do
      {
        uint64_t v10 = (uint64_t *)v7[1];
        uint64_t v9 = v7[2];
        v7[2] = 0;
        if (v9) {
          (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
        operator delete(v7);
        uint64_t v7 = v10;
      }
      while (v10 != &v15);
    }
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*a4) {
      return a1;
    }
    goto LABEL_10;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (*a4)
  {
LABEL_10:
    std::mutex::lock((std::mutex *)(a1 + 8));
    uint64_t v11 = operator new(0x18uLL);
    uint64_t v12 = *a4;
    *a4 = 0;
    uint64_t v13 = *(void *)(a1 + 120);
    v11[1] = a1 + 120;
    v11[2] = v12;
    *uint64_t v11 = v13;
    *(void *)(v13 + 8) = v11;
    *(void *)(a1 + 120) = v11;
    ++*(void *)(a1 + 136);
    std::mutex::unlock((std::mutex *)(a1 + 8));
  }
  return a1;
}

void sub_248B045CC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v2);
  support::log::manager::~manager(v1);
  _Unwind_Resume(a1);
}

void sub_248B045F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::list<std::unique_ptr<support::log::delegate>>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v7 = (uint64_t *)v3[1];
        uint64_t v6 = v3[2];
        v3[2] = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
        }
        operator delete(v3);
        uint64_t v3 = v7;
      }
      while (v7 != a1);
    }
  }
  return a1;
}

void support::log::manager::add_delegate(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (void *)a1;
  uint64_t v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  xpc_object_t v5 = operator new(0x18uLL);
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v7 = v3[15];
  v3 += 15;
  v5[1] = v3;
  v5[2] = v6;
  *xpc_object_t v5 = v7;
  *(void *)(v7 + 8) = v5;
  void *v3 = v5;
  ++v3[2];
  std::mutex::unlock(v4);
}

void sub_248B04730(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void support::log::manager::~manager(support::log::manager *this)
{
  *(void *)this = &unk_26FCC74D0;
  if (*((void *)this + 17))
  {
    uint64_t v2 = (char *)this + 120;
    uint64_t v3 = *((void *)this + 15);
    uint64_t v4 = (char *)*((void *)this + 16);
    uint64_t v5 = *(void *)v4;
    *(void *)(v5 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v5;
    *((void *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        uint64_t v7 = (char *)*((void *)v4 + 1);
        uint64_t v6 = *((void *)v4 + 2);
        *((void *)v4 + 2) = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
        }
        operator delete(v4);
        uint64_t v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  *(void *)this = &unk_26FCC74D0;
  if (*((void *)this + 17))
  {
    uint64_t v2 = (char *)this + 120;
    uint64_t v3 = *((void *)this + 15);
    uint64_t v4 = (char *)*((void *)this + 16);
    uint64_t v5 = *(void *)v4;
    *(void *)(v5 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v5;
    *((void *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        uint64_t v7 = (char *)*((void *)v4 + 1);
        uint64_t v6 = *((void *)v4 + 2);
        *((void *)v4 + 2) = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
        }
        operator delete(v4);
        uint64_t v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t vars8;

  *(void *)this = &unk_26FCC74D0;
  if (*((void *)this + 17))
  {
    uint64_t v2 = (char *)this + 120;
    uint64_t v3 = *((void *)this + 15);
    uint64_t v4 = (char *)*((void *)this + 16);
    uint64_t v5 = *(void *)v4;
    *(void *)(v5 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v5;
    *((void *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        uint64_t v7 = (char *)*((void *)v4 + 1);
        uint64_t v6 = *((void *)v4 + 2);
        *((void *)v4 + 2) = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
        }
        operator delete(v4);
        uint64_t v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
  operator delete(this);
}

void sub_248B04970(_Unwind_Exception *a1)
{
  std::mutex::unlock(v2);
  support::log::manager::~manager(v1);
  _Unwind_Resume(a1);
}

void sub_248B04994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void support::log::manager::create(std::string *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v8 = operator new(0x90uLL);
  std::string __p = *a1;
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  support::log::manager::manager((uint64_t)v8, &__p, a2, a3);
  *a4 = v8;
  uint64_t v9 = operator new(0x20uLL);
  void *v9 = &unk_26FCC7748;
  v9[1] = 0;
  v9[2] = 0;
  v9[3] = v8;
  a4[1] = v9;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v10 = (void *)__p.__r_.__value_.__r.__words[0];
    operator delete(v10);
  }
}

void sub_248B04B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void support::log::manager::create(std::string *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v8 = operator new(0x90uLL);
  std::string __p = *a1;
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  support::log::manager::manager((uint64_t)v8, &__p, a2, a3);
  *a4 = v8;
  uint64_t v9 = operator new(0x20uLL);
  void *v9 = &unk_26FCC7748;
  v9[1] = 0;
  v9[2] = 0;
  v9[3] = v8;
  a4[1] = v9;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v10 = (void *)__p.__r_.__value_.__r.__words[0];
    operator delete(v10);
  }
}

void sub_248B04CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t support::log::manager::get_level(support::log::manager *this)
{
  return *((unsigned __int8 *)this + 112);
}

void support::log::manager::set_level(uint64_t a1, unsigned int a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  uint64_t v5 = *(NSObject **)(a1 + 96);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v6 = *(unsigned __int8 *)(a1 + 112);
    if (v6 > 6)
    {
      uint64_t v7 = "???";
      if (a2 > 6) {
        goto LABEL_4;
      }
    }
    else
    {
      if (a2 > 6)
      {
LABEL_4:
        uint64_t v8 = "???";
LABEL_7:
        int v9 = 136315394;
        uint64_t v10 = v7;
        __int16 v11 = 2080;
        uint64_t v12 = v8;
        _os_log_impl(&dword_248AFD000, v5, OS_LOG_TYPE_DEFAULT, "setting log level %s -> %s", (uint8_t *)&v9, 0x16u);
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
LABEL_8:
  *(unsigned char *)(a1 + 112) = a2;
  std::mutex::unlock(v4);
}

uint64_t support::log::manager::get_log_buffer(support::log::manager *this)
{
  pthread_mutex_lock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  if (!qword_269339BA8)
  {
    uint64_t v1 = (char *)operator new(0xA8uLL);
    *((void *)v1 + 1) = 0;
    *((void *)v1 + 2) = 0;
    *(void *)uint64_t v1 = &unk_26FCC76B0;
    uint64_t v2 = (uint64_t)(v1 + 24);
    *((void *)v1 + 3) = &unk_26FCC7700;
    *((void *)v1 + 4) = 850045863;
    *(_OWORD *)(v1 + 40) = 0u;
    *(_OWORD *)(v1 + 56) = 0u;
    *(_OWORD *)(v1 + 72) = 0u;
    *((void *)v1 + 14) = 0;
    *((void *)v1 + 13) = 0;
    *((void *)v1 + 11) = 0;
    *((void *)v1 + 12) = v1 + 104;
    *(_OWORD *)(v1 + 120) = 0u;
    *(_OWORD *)(v1 + 136) = 0u;
    *(_OWORD *)(v1 + 152) = 0u;
    uint64_t v3 = (std::__shared_weak_count *)off_269339BB0;
    qword_269339BA8 = (uint64_t)(v1 + 24);
    off_269339BB0 = v1;
    if (!v3) {
      goto LABEL_7;
    }
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  uint64_t v2 = qword_269339BA8;
  uint64_t v1 = (char *)off_269339BB0;
  if (off_269339BB0) {
LABEL_7:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)v1 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  std::mutex::lock((std::mutex *)(v2 + 8));
  uint64_t v4 = *(void *)(v2 + 136);
  if (v4)
  {
    uint64_t v5 = (void *)(v2 + 128);
    unint64_t v6 = *(void ***)(v2 + 104);
    uint64_t v7 = (*(void **)((char *)v6 + ((*(void *)(v2 + 128) >> 6) & 0x3FFFFFFFFFFFFF8)))[*(void *)(v2 + 128) & 0x1FFLL];
    unint64_t v8 = *(void *)(v2 + 128) + 1;
    *(void *)(v2 + 128) = v8;
    *(void *)(v2 + 136) = v4 - 1;
    if (v8 >= 0x400)
    {
      operator delete(*v6);
      *(void *)(v2 + 104) += 8;
      uint64_t v9 = -512;
LABEL_22:
      *v5 += v9;
    }
  }
  else
  {
    uint64_t v10 = malloc_type_malloc(0x400uLL, 0x45F1E4C6uLL);
    uint64_t v7 = (uint64_t)v10;
    if (v10)
    {
      uint64_t v12 = (uint64_t **)(v2 + 80);
      __int16 v11 = *(uint64_t **)(v2 + 80);
      if (!v11)
      {
        uint64_t v13 = (uint64_t **)(v2 + 80);
LABEL_19:
        uint64_t v15 = (uint64_t *)operator new(0x28uLL);
        v15[4] = v7;
        *uint64_t v15 = 0;
        v15[1] = 0;
        v15[2] = (uint64_t)v13;
        const char *v12 = v15;
        uint64_t v16 = **(void **)(v2 + 72);
        if (v16)
        {
          *(void *)(v2 + 72) = v16;
          uint64_t v15 = *v12;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 80), v15);
        uint64_t v5 = (void *)(v2 + 88);
        uint64_t v9 = 1;
        goto LABEL_22;
      }
      while (1)
      {
        while (1)
        {
          uint64_t v13 = (uint64_t **)v11;
          unint64_t v14 = v11[4];
          if ((unint64_t)v10 >= v14) {
            break;
          }
          __int16 v11 = *v13;
          uint64_t v12 = v13;
          if (!*v13) {
            goto LABEL_19;
          }
        }
        if (v14 >= (unint64_t)v10) {
          break;
        }
        __int16 v11 = v13[1];
        if (!v11)
        {
          uint64_t v12 = v13 + 1;
          goto LABEL_19;
        }
      }
    }
  }
  std::mutex::unlock((std::mutex *)(v2 + 8));
  if (!v1 || atomic_fetch_add((atomic_ullong *volatile)v1 + 1, 0xFFFFFFFFFFFFFFFFLL)) {
    return v7;
  }
  (*(void (**)(char *))(*(void *)v1 + 16))(v1);
  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v1);
  return v7;
}

void sub_248B050F0(_Unwind_Exception *a1)
{
}

void support::log::manager::release_log_buffer(support::log::manager *this, char *a2)
{
  pthread_mutex_lock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  if (qword_269339BA8) {
    goto LABEL_2;
  }
  uint64_t v3 = (char *)operator new(0xA8uLL);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = 0;
  *(void *)uint64_t v3 = &unk_26FCC76B0;
  uint64_t v4 = (uint64_t)(v3 + 24);
  *((void *)v3 + 3) = &unk_26FCC7700;
  *((void *)v3 + 4) = 850045863;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *((void *)v3 + 14) = 0;
  *((void *)v3 + 13) = 0;
  *((void *)v3 + 11) = 0;
  *((void *)v3 + 12) = v3 + 104;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 152) = 0u;
  uint64_t v5 = (std::__shared_weak_count *)off_269339BB0;
  qword_269339BA8 = (uint64_t)(v3 + 24);
  off_269339BB0 = v3;
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
LABEL_2:
    uint64_t v4 = qword_269339BA8;
    uint64_t v3 = (char *)off_269339BB0;
    if (!off_269339BB0) {
      goto LABEL_8;
    }
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)v3 + 1, 1uLL, memory_order_relaxed);
LABEL_8:
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  unint64_t v8 = *(void **)(v4 + 80);
  uint64_t v7 = v4 + 80;
  unint64_t v6 = v8;
  if (!v8) {
    goto LABEL_19;
  }
  uint64_t v9 = (void *)v7;
  do
  {
    unint64_t v10 = v6[4];
    BOOL v11 = v10 >= (unint64_t)a2;
    if (v10 >= (unint64_t)a2) {
      uint64_t v12 = v6;
    }
    else {
      uint64_t v12 = v6 + 1;
    }
    if (v11) {
      uint64_t v9 = v6;
    }
    unint64_t v6 = (void *)*v12;
  }
  while (*v12);
  if (v9 == (void *)v7 || v9[4] > (unint64_t)a2) {
LABEL_19:
  }
    uint64_t v9 = (void *)v7;
  if (!v3 || atomic_fetch_add((atomic_ullong *volatile)v3 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (v9 != (void *)v7) {
      goto LABEL_23;
    }
LABEL_27:
    free(a2);
    return;
  }
  (*(void (**)(char *))(*(void *)v3 + 16))(v3);
  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v3);
  if (v9 == (void *)v7) {
    goto LABEL_27;
  }
LABEL_23:
  pthread_mutex_lock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  if (!qword_269339BA8)
  {
    uint64_t v13 = (char *)operator new(0xA8uLL);
    *((void *)v13 + 1) = 0;
    *((void *)v13 + 2) = 0;
    *(void *)uint64_t v13 = &unk_26FCC76B0;
    *((void *)v13 + 3) = &unk_26FCC7700;
    *((void *)v13 + 4) = 850045863;
    *(_OWORD *)(v13 + 40) = 0u;
    *(_OWORD *)(v13 + 56) = 0u;
    *(_OWORD *)(v13 + 72) = 0u;
    *((void *)v13 + 14) = 0;
    *((void *)v13 + 13) = 0;
    *((void *)v13 + 11) = 0;
    *((void *)v13 + 12) = v13 + 104;
    *(_OWORD *)(v13 + 120) = 0u;
    *(_OWORD *)(v13 + 136) = 0u;
    *(_OWORD *)(v13 + 152) = 0u;
    unint64_t v14 = (std::__shared_weak_count *)off_269339BB0;
    qword_269339BA8 = (uint64_t)(v13 + 24);
    off_269339BB0 = v13;
    if (!v14)
    {
      v135 = (std::__shared_weak_count *)v13;
      goto LABEL_34;
    }
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  uint64_t v13 = (char *)off_269339BB0;
  v135 = (std::__shared_weak_count *)off_269339BB0;
  if (off_269339BB0) {
LABEL_34:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)v13 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  pthread_mutex_lock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  if (qword_269339BA8) {
    goto LABEL_36;
  }
  uint64_t v15 = (char *)operator new(0xA8uLL);
  *((void *)v15 + 1) = 0;
  *((void *)v15 + 2) = 0;
  *(void *)uint64_t v15 = &unk_26FCC76B0;
  uint64_t v16 = (uint64_t)(v15 + 24);
  *((void *)v15 + 3) = &unk_26FCC7700;
  *((void *)v15 + 4) = 850045863;
  *(_OWORD *)(v15 + 40) = 0u;
  *(_OWORD *)(v15 + 56) = 0u;
  *(_OWORD *)(v15 + 72) = 0u;
  *((void *)v15 + 14) = 0;
  *((void *)v15 + 13) = 0;
  *((void *)v15 + 11) = 0;
  *((void *)v15 + 12) = v15 + 104;
  *(_OWORD *)(v15 + 120) = 0u;
  *(_OWORD *)(v15 + 136) = 0u;
  *(_OWORD *)(v15 + 152) = 0u;
  uint64_t v17 = (std::__shared_weak_count *)off_269339BB0;
  qword_269339BA8 = (uint64_t)(v15 + 24);
  off_269339BB0 = v15;
  if (v17)
  {
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
LABEL_36:
    uint64_t v16 = qword_269339BA8;
    uint64_t v15 = (char *)off_269339BB0;
    v136 = (std::__shared_weak_count *)off_269339BB0;
    if (!off_269339BB0) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  v136 = (std::__shared_weak_count *)v15;
LABEL_42:
  atomic_fetch_add_explicit((atomic_ullong *volatile)v15 + 1, 1uLL, memory_order_relaxed);
LABEL_43:
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  std::string v18 = (std::mutex *)(v16 + 8);
  std::mutex::lock((std::mutex *)(v16 + 8));
  uint64_t v19 = *(void **)(v16 + 80);
  if (!v19) {
    goto LABEL_175;
  }
  uint64_t v20 = v16 + 80;
  do
  {
    unint64_t v21 = v19[4];
    BOOL v22 = v21 >= (unint64_t)a2;
    if (v21 >= (unint64_t)a2) {
      long long v23 = v19;
    }
    else {
      long long v23 = v19 + 1;
    }
    if (v22) {
      uint64_t v20 = (uint64_t)v19;
    }
    uint64_t v19 = (void *)*v23;
  }
  while (*v23);
  if (v20 == v16 + 80 || *(void *)(v20 + 32) > (unint64_t)a2)
  {
LABEL_175:
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x24C58B240](exception, "attempting to put back a buffer the instance does not own");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  xpc_object_t v24 = *(char **)(v16 + 112);
  xpc_object_t v25 = *(char **)(v16 + 104);
  uint64_t v26 = v24 - v25;
  if (v24 == v25) {
    uint64_t v27 = 0;
  }
  else {
    uint64_t v27 = ((v24 - v25) << 6) - 1;
  }
  unint64_t v29 = *(void *)(v16 + 128);
  uint64_t v28 = *(void *)(v16 + 136);
  unint64_t v30 = v28 + v29;
  if (v27 != v28 + v29) {
    goto LABEL_151;
  }
  if (v29 >= 0x200)
  {
    *(void *)(v16 + 128) = v29 - 512;
    char v31 = v25 + 8;
    uint64_t v32 = *(void *)v25;
    *(void *)(v16 + 104) = v25 + 8;
    if (v24 != *(char **)(v16 + 120))
    {
LABEL_148:
      *(void *)xpc_object_t v24 = v32;
      goto LABEL_149;
    }
    long long v33 = *(char **)(v16 + 96);
    if (v31 > v33)
    {
      uint64_t v34 = (v31 - v33) >> 3;
      if (v34 >= -1) {
        uint64_t v35 = v34 + 1;
      }
      else {
        uint64_t v35 = v34 + 2;
      }
      uint64_t v36 = v35 >> 1;
      uint64_t v37 = -v36;
      v38 = &v31[-8 * v36];
      int64_t v39 = v24 - v31;
      if (v24 != v31)
      {
        memmove(&v31[-8 * v36], v31, v24 - v31);
        xpc_object_t v24 = *(char **)(v16 + 104);
      }
      uint64_t v40 = &v24[8 * v37];
      xpc_object_t v24 = &v38[v39];
      *(void *)(v16 + 104) = v40;
      *(void *)(v16 + 112) = &v38[v39];
      goto LABEL_148;
    }
    if (v24 == v33) {
      unint64_t v52 = 1;
    }
    else {
      unint64_t v52 = (v24 - v33) >> 2;
    }
    if (!(v52 >> 61))
    {
      v53 = (char *)operator new(8 * v52);
      v54 = &v53[8 * (v52 >> 2)];
      int64_t v56 = v24 - v31;
      BOOL v55 = v24 == v31;
      xpc_object_t v24 = v54;
      if (v55) {
        goto LABEL_146;
      }
      xpc_object_t v24 = &v54[v56 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v57 = v56 - 8;
      if (v57 >= 0x38)
      {
        v109 = &v53[8 * (v52 >> 2)];
        v58 = v109;
        if ((unint64_t)(v109 - v31) >= 0x20)
        {
          uint64_t v110 = (v57 >> 3) + 1;
          uint64_t v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
          v58 = &v54[v111];
          v31 += v111;
          v112 = (long long *)(v25 + 24);
          v113 = v109 + 16;
          uint64_t v114 = v110 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v115 = *v112;
            *(v113 - 1) = *(v112 - 1);
            _OWORD *v113 = v115;
            v112 += 2;
            v113 += 2;
            v114 -= 4;
          }
          while (v114);
          if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_146:
            *(void *)(v16 + 96) = v53;
            *(void *)(v16 + 104) = v54;
            *(void *)(v16 + 112) = v24;
            *(void *)(v16 + 120) = &v53[8 * v52];
            if (v33)
            {
              operator delete(v33);
              xpc_object_t v24 = *(char **)(v16 + 112);
            }
            goto LABEL_148;
          }
        }
      }
      else
      {
        v58 = &v53[8 * (v52 >> 2)];
      }
      do
      {
        uint64_t v116 = *(void *)v31;
        v31 += 8;
        *(void *)v58 = v116;
        v58 += 8;
      }
      while (v58 != v24);
      goto LABEL_146;
    }
LABEL_177:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v41 = v26 >> 3;
  uint64_t v42 = *(char **)(v16 + 120);
  v43 = *(char **)(v16 + 96);
  if (v26 >> 3 >= (unint64_t)((v42 - v43) >> 3))
  {
    if (v42 == v43) {
      unint64_t v46 = 1;
    }
    else {
      unint64_t v46 = (v42 - v43) >> 2;
    }
    if (!(v46 >> 61))
    {
      v47 = (char *)operator new(8 * v46);
      v48 = operator new(0x1000uLL);
      v49 = &v47[8 * v41];
      v50 = &v47[8 * v46];
      if (v41 == v46)
      {
        v134 = v48;
        if (v26 < 1)
        {
          if (v24 == v25) {
            unint64_t v60 = 1;
          }
          else {
            unint64_t v60 = v26 >> 2;
          }
          if (v60 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          v49 = (char *)operator new(8 * v60);
          v50 = &v49[8 * v60];
          operator delete(v47);
          xpc_object_t v25 = *(char **)(v16 + 104);
          xpc_object_t v24 = *(char **)(v16 + 112);
          v47 = v49;
        }
        else
        {
          unint64_t v51 = v41 + 2;
          if (v41 >= -1) {
            unint64_t v51 = v41 + 1;
          }
          v49 -= 8 * (v51 >> 1);
        }
        v48 = v134;
      }
      *(void *)v49 = v48;
      v61 = v49 + 8;
      if (v24 != v25)
      {
        do
        {
          if (v49 == v47)
          {
            if (v61 >= v50)
            {
              if (v50 == v47) {
                unint64_t v68 = 1;
              }
              else {
                unint64_t v68 = (v50 - v47) >> 2;
              }
              if (v68 >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              v69 = (char *)operator new(8 * v68);
              v70 = v69;
              unint64_t v71 = (v68 + 3) >> 2;
              v49 = &v69[8 * v71];
              int64_t v72 = v61 - v47;
              BOOL v55 = v61 == v47;
              v61 = v49;
              if (!v55)
              {
                v61 = &v49[v72 & 0xFFFFFFFFFFFFFFF8];
                unint64_t v73 = v72 - 8;
                v74 = &v69[8 * v71];
                v75 = v47;
                if (v73 < 0x38) {
                  goto LABEL_181;
                }
                uint64_t v76 = 8 * v71;
                v74 = &v69[8 * v71];
                v75 = v47;
                if ((unint64_t)(v74 - v47) < 0x20) {
                  goto LABEL_181;
                }
                uint64_t v77 = (v73 >> 3) + 1;
                uint64_t v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
                v74 = &v49[v78];
                v75 = &v47[v78];
                v79 = (long long *)(v47 + 16);
                v80 = &v69[v76 + 16];
                uint64_t v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v82 = *v79;
                  *((_OWORD *)v80 - 1) = *(v79 - 1);
                  *(_OWORD *)v80 = v82;
                  v79 += 2;
                  v80 += 32;
                  v81 -= 4;
                }
                while (v81);
                if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_181:
                  do
                  {
                    uint64_t v83 = *(void *)v75;
                    v75 += 8;
                    *(void *)v74 = v83;
                    v74 += 8;
                  }
                  while (v74 != v61);
                }
              }
              v50 = &v69[8 * v68];
              operator delete(v47);
              v47 = v70;
            }
            else
            {
              uint64_t v64 = (v50 - v61) >> 3;
              if (v64 >= -1) {
                uint64_t v65 = v64 + 1;
              }
              else {
                uint64_t v65 = v64 + 2;
              }
              uint64_t v66 = v65 >> 1;
              v49 = &v47[8 * (v65 >> 1)];
              v67 = v47;
              if (v61 != v47)
              {
                memmove(v49, v47, v61 - v47);
                v67 = v61;
              }
              v61 = (char *)v67 + 8 * v66;
            }
          }
          uint64_t v63 = *((void *)v24 - 1);
          v24 -= 8;
          *((void *)v49 - 1) = v63;
          v49 -= 8;
        }
        while (v24 != *(char **)(v16 + 104));
      }
      v62 = *(void **)(v16 + 96);
      *(void *)(v16 + 96) = v47;
      *(void *)(v16 + 104) = v49;
      *(void *)(v16 + 112) = v61;
      *(void *)(v16 + 120) = v50;
      std::string v18 = (std::mutex *)(v16 + 8);
      if (v62) {
        operator delete(v62);
      }
      goto LABEL_150;
    }
    goto LABEL_177;
  }
  v44 = operator new(0x1000uLL);
  v45 = v44;
  if (v42 == v24)
  {
    if (v25 == v43)
    {
      if (v24 == v25) {
        unint64_t v84 = 1;
      }
      else {
        unint64_t v84 = (v42 - v25) >> 2;
      }
      if (v84 >> 61) {
        goto LABEL_177;
      }
      v85 = (char *)operator new(8 * v84);
      unint64_t v86 = (v84 + 3) >> 2;
      v59 = &v85[8 * v86];
      v87 = v59;
      if (v24 != v25)
      {
        v87 = &v59[8 * v41];
        v88 = &v85[8 * v86];
        v89 = v25;
        if ((unint64_t)(v26 - 8) < 0x38) {
          goto LABEL_182;
        }
        v90 = &v85[8 * v86];
        v88 = v90;
        v89 = v25;
        if ((unint64_t)(v90 - v25) < 0x20) {
          goto LABEL_182;
        }
        unint64_t v91 = ((unint64_t)(v26 - 8) >> 3) + 1;
        uint64_t v92 = 8 * (v91 & 0x3FFFFFFFFFFFFFFCLL);
        v88 = &v59[v92];
        v89 = &v25[v92];
        v93 = (long long *)(v25 + 16);
        v94 = v90 + 16;
        uint64_t v95 = v91 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v96 = *v93;
          *(v94 - 1) = *(v93 - 1);
          _OWORD *v94 = v96;
          v93 += 2;
          v94 += 2;
          v95 -= 4;
        }
        while (v95);
        if (v91 != (v91 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_182:
          do
          {
            uint64_t v97 = *(void *)v89;
            v89 += 8;
            *(void *)v88 = v97;
            v88 += 8;
          }
          while (v88 != v87);
        }
      }
      *(void *)(v16 + 96) = v85;
      *(void *)(v16 + 104) = v59;
      *(void *)(v16 + 112) = v87;
      *(void *)(v16 + 120) = &v85[8 * v84];
      if (v25)
      {
        operator delete(v25);
        v59 = *(char **)(v16 + 104);
      }
    }
    else
    {
      v59 = v25;
    }
    *((void *)v59 - 1) = v45;
    v98 = *(char **)(v16 + 104);
    v99 = *(char **)(v16 + 112);
    *(void *)(v16 + 104) = v98 - 8;
    uint64_t v100 = *((void *)v98 - 1);
    *(void *)(v16 + 104) = v98;
    if (v99 != *(char **)(v16 + 120)) {
      goto LABEL_133;
    }
    v101 = *(char **)(v16 + 96);
    if (v98 > v101)
    {
      uint64_t v102 = (v98 - v101) >> 3;
      if (v102 >= -1) {
        uint64_t v103 = v102 + 1;
      }
      else {
        uint64_t v103 = v102 + 2;
      }
      uint64_t v104 = v103 >> 1;
      uint64_t v105 = -v104;
      v106 = &v98[-8 * v104];
      size_t v107 = v99 - v98;
      if (v107)
      {
        memmove(&v98[-8 * v104], v98, v107);
        v98 = *(char **)(v16 + 104);
      }
      v108 = &v106[v107];
      *(void *)(v16 + 104) = &v98[8 * v105];
      *(void *)(v16 + 112) = v108;
      *(void *)v108 = v100;
      goto LABEL_149;
    }
    if (v99 == v101) {
      unint64_t v118 = 1;
    }
    else {
      unint64_t v118 = (v99 - v101) >> 2;
    }
    if (v118 >> 61) {
      goto LABEL_177;
    }
    v119 = (char *)operator new(8 * v118);
    v120 = &v119[8 * (v118 >> 2)];
    int64_t v121 = v99 - v98;
    BOOL v55 = v99 == v98;
    v99 = v120;
    if (!v55)
    {
      v99 = &v120[v121 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v122 = v121 - 8;
      if (v122 < 0x38)
      {
        v123 = &v119[8 * (v118 >> 2)];
        do
        {
LABEL_172:
          uint64_t v132 = *(void *)v98;
          v98 += 8;
          *(void *)v123 = v132;
          v123 += 8;
        }
        while (v123 != v99);
        goto LABEL_173;
      }
      v124 = &v119[8 * (v118 >> 2)];
      v123 = v124;
      if ((unint64_t)(v124 - v98) < 0x20) {
        goto LABEL_172;
      }
      uint64_t v125 = (v122 >> 3) + 1;
      uint64_t v126 = 8 * (v125 & 0x3FFFFFFFFFFFFFFCLL);
      v123 = &v120[v126];
      v127 = &v98[v126];
      v128 = (long long *)(v98 + 16);
      v129 = v124 + 16;
      uint64_t v130 = v125 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v131 = *v128;
        *(v129 - 1) = *(v128 - 1);
        _OWORD *v129 = v131;
        v128 += 2;
        v129 += 2;
        v130 -= 4;
      }
      while (v130);
      v98 = v127;
      if (v125 != (v125 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_172;
      }
    }
LABEL_173:
    *(void *)(v16 + 96) = v119;
    *(void *)(v16 + 104) = v120;
    *(void *)(v16 + 112) = v99;
    *(void *)(v16 + 120) = &v119[8 * v118];
    if (v101)
    {
      operator delete(v101);
      v99 = *(char **)(v16 + 112);
    }
LABEL_133:
    *(void *)v99 = v100;
    goto LABEL_149;
  }
  *(void *)xpc_object_t v24 = v44;
LABEL_149:
  *(void *)(v16 + 112) += 8;
LABEL_150:
  xpc_object_t v25 = *(char **)(v16 + 104);
  uint64_t v28 = *(void *)(v16 + 136);
  unint64_t v30 = *(void *)(v16 + 128) + v28;
LABEL_151:
  *(void *)(*(void *)&v25[(v30 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v30 & 0x1FF)) = a2;
  *(void *)(v16 + 136) = v28 + 1;
  std::mutex::unlock(v18);
  if (v136 && !atomic_fetch_add(&v136->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
    std::__shared_weak_count::__release_weak(v136);
    v117 = v135;
    if (!v135) {
      return;
    }
  }
  else
  {
    v117 = v135;
    if (!v135) {
      return;
    }
  }
  if (!atomic_fetch_add(&v117->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
    std::__shared_weak_count::__release_weak(v117);
  }
}

void sub_248B05D54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, std::mutex *a10, char a11, uint64_t a12, char a13)
{
  operator delete(__p);
  operator delete(v13);
  std::mutex::unlock(a10);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void support::log::manager::add_delegates(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2 != a2)
  {
    uint64_t v5 = (std::mutex *)(a1 + 8);
    uint64_t v6 = a1 + 120;
    do
    {
      std::mutex::lock(v5);
      uint64_t v7 = operator new(0x18uLL);
      uint64_t v8 = *(void *)(v2 + 16);
      *(void *)(v2 + 16) = 0;
      v7[1] = v6;
      v7[2] = v8;
      uint64_t v9 = *(void *)(a1 + 120);
      void *v7 = v9;
      *(void *)(v9 + 8) = v7;
      *(void *)(a1 + 120) = v7;
      ++*(void *)(a1 + 136);
      std::mutex::unlock(v5);
      uint64_t v2 = *(void *)(v2 + 8);
    }
    while (v2 != a2);
  }
}

void sub_248B05EC4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void support::log::manager::set_defaults(support::log::manager *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  *((unsigned char *)this + 112) = 3;
  if (*((void *)this + 17))
  {
    uint64_t v3 = (char *)this + 120;
    uint64_t v4 = *((void *)this + 15);
    uint64_t v5 = (char *)*((void *)this + 16);
    uint64_t v6 = *(void *)v5;
    *(void *)(v6 + 8) = *(void *)(v4 + 8);
    **(void **)(v4 + 8) = v6;
    *((void *)this + 17) = 0;
    if (v5 != (char *)this + 120)
    {
      do
      {
        uint64_t v8 = (char *)*((void *)v5 + 1);
        uint64_t v7 = *((void *)v5 + 2);
        *((void *)v5 + 2) = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
        }
        operator delete(v5);
        uint64_t v5 = v8;
      }
      while (v8 != v3);
    }
  }
  std::mutex::unlock(v2);
}

void support::log::manager::message_delegates(support::log::manager *a1, uint64_t a2, char *a3)
{
  uint64_t v4 = (void *)((char *)a1 + 120);
  uint64_t v5 = *((void *)a1 + 16);
  if ((support::log::manager *)v5 != (support::log::manager *)((char *)a1 + 120))
  {
    do
    {
      a1 = (support::log::manager *)(***(uint64_t (****)(void, uint64_t, char *))(v5 + 16))(*(void *)(v5 + 16), a2, a3);
      uint64_t v5 = *(void *)(v5 + 8);
    }
    while ((void *)v5 != v4);
  }
  support::log::manager::release_log_buffer(a1, a3);
}

void support::log::stdout_delegate::create(uint64_t *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v4 = operator new(0x20uLL);
  uint64_t v5 = v4;
  uint64_t v6 = *a1;
  uint64_t v7 = (std::__shared_weak_count *)a1[1];
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  void *v4 = &unk_26FCC7488;
  v4[1] = v6;
  void v4[2] = v7;
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((unsigned char *)v4 + 24) = 1;
    std::__shared_weak_count::__release_weak(v7);
    *uint64_t v5 = &unk_26FCC7500;
    std::__shared_weak_count::__release_weak(v7);
    *a2 = v5;
  }
  else
  {
    *((unsigned char *)v4 + 24) = 1;
    void *v4 = &unk_26FCC7500;
    *a2 = v4;
  }
}

uint64_t support::log::stdout_delegate::stdout_delegate(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_26FCC7488;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v3;
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(unsigned char *)(a1 + 24) = 1;
    std::__shared_weak_count::__release_weak(v3);
  }
  else
  {
    *(unsigned char *)(a1 + 24) = 1;
  }
  *(void *)a1 = &unk_26FCC7500;
  return a1;
}

{
  std::__shared_weak_count *v3;
  uint64_t v4;

  uint64_t v4 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_26FCC7488;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v3;
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(unsigned char *)(a1 + 24) = 1;
    std::__shared_weak_count::__release_weak(v3);
  }
  else
  {
    *(unsigned char *)(a1 + 24) = 1;
  }
  *(void *)a1 = &unk_26FCC7500;
  return a1;
}

double support::log::stdout_delegate::create@<D0>(void *a1@<X8>)
{
  *a1 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v3 = operator new(0x20uLL);
  double result = 0.0;
  _OWORD *v3 = 0u;
  v3[1] = 0u;
  *(void *)uint64_t v3 = &unk_26FCC7500;
  *a1 = v3;
  return result;
}

void support::log::stdout_delegate::message(uint64_t a1, uint64_t a2, const char *a3)
{
  if (a3)
  {
    memset(v6, 170, sizeof(v6));
    (*(void (**)(void *__return_ptr))(*(void *)a1 + 24))(v6);
    if (LOBYTE(v6[2]))
    {
      if (!v6[1]) {
        return;
      }
      uint64_t v4 = std::__shared_weak_count::lock((std::__shared_weak_count *)v6[1]);
      if (v4)
      {
        uint64_t v5 = v4;
        if (v6[0]) {
          fprintf((FILE *)*MEMORY[0x263EF8358], "%s\n", a3);
        }
        if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    else
    {
      fprintf((FILE *)*MEMORY[0x263EF8358], "%s\n", a3);
    }
    if (LOBYTE(v6[2]))
    {
      if (v6[1]) {
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v6[1]);
      }
    }
  }
}

support::log::manager_global *support::log::manager_global::manager_global(support::log::manager_global *this)
{
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 6;
  strcpy((char *)&__p, "global");
  uint64_t v10 = 0;
  BOOL v11 = &unk_26FCC74B8;
  char v12 = 3;
  uint64_t v8 = (uint64_t)&v8;
  uint64_t v9 = &v8;
  support::log::manager::manager((uint64_t)this, &__p, (uint64_t)&v11, &v8);
  if (v10)
  {
    uint64_t v2 = v8;
    uint64_t v3 = v9;
    uint64_t v4 = *v9;
    *(void *)(v4 + 8) = *(void *)(v8 + 8);
    **(void **)(v2 + 8) = v4;
    uint64_t v10 = 0;
    if (v3 != &v8)
    {
      do
      {
        uint64_t v7 = (uint64_t *)v3[1];
        uint64_t v6 = v3[2];
        v3[2] = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
        }
        operator delete(v3);
        uint64_t v3 = v7;
      }
      while (v7 != &v8);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)this = &unk_26FCC7530;
  return this;
}

void sub_248B06548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *support::log::client::descriptor::descriptor(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = &unk_26FCC7560;
  uint64_t descriptor_instance = support::log::global_client_descriptor_manager::get_descriptor_instance(a2, a3);
  a1[1] = descriptor_instance;
  a1[2] = descriptor_instance;
  a1[3] = descriptor_instance + 8;
  a1[4] = descriptor_instance + 32;
  a1[5] = descriptor_instance + 56;
  return a1;
}

{
  uint64_t descriptor_instance;

  *a1 = &unk_26FCC7560;
  uint64_t descriptor_instance = support::log::global_client_descriptor_manager::get_descriptor_instance(a2, a3);
  a1[1] = descriptor_instance;
  a1[2] = descriptor_instance;
  a1[3] = descriptor_instance + 8;
  a1[4] = descriptor_instance + 32;
  a1[5] = descriptor_instance + 56;
  return a1;
}

uint64_t support::log::global_client_descriptor_manager::get_descriptor_instance(uint64_t a1, uint64_t a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals))
  {
    *(_OWORD *)&qword_269339EA0 = 0u;
    *(_OWORD *)&qword_269339E90 = 0u;
    dword_269339EB0 = 1065353216;
    __cxa_guard_release(&_MergedGlobals);
  }
  std::mutex::lock(&support::log::global_client_descriptor_manager::get_descriptor_instance(std::string const&,std::string const&)::sMutex);
  int v4 = *(char *)(a1 + 23);
  if (v4 >= 0) {
    size_t v5 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v5 = *(void *)(a1 + 8);
  }
  unint64_t v6 = v5 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v5 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v6 >= 0x17)
  {
    uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v8 = v6 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v5 + 1;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5 + 1;
    if (!v5) {
      goto LABEL_16;
    }
  }
  if (v4 >= 0) {
    uint64_t v10 = (const std::string::value_type *)a1;
  }
  else {
    uint64_t v10 = *(const std::string::value_type **)a1;
  }
  memmove(p_dst, v10, v5);
LABEL_16:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v5) = 44;
  int v11 = *(char *)(a2 + 23);
  if (v11 >= 0) {
    char v12 = (const std::string::value_type *)a2;
  }
  else {
    char v12 = *(const std::string::value_type **)a2;
  }
  if (v11 >= 0) {
    std::string::size_type v13 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v13 = *(void *)(a2 + 8);
  }
  unint64_t v14 = std::string::append(&__dst, v12, v13);
  std::string __p = *v14;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>((uint64_t)&__p)) {
      goto LABEL_151;
    }
  }
  else if (std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>((uint64_t)&__p))
  {
    goto LABEL_151;
  }
  uint64_t v15 = (char *)operator new(0x40uLL);
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v77, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v77 = *(std::string *)a1;
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v76, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v76 = *(std::string *)a2;
  }
  *(void *)uint64_t v15 = &unk_26FCC7630;
  uint64_t v16 = v15 + 8;
  *(std::string *)(v15 + 8) = v77;
  memset(&v77, 0, sizeof(v77));
  *(std::string *)(v15 + 32) = v76;
  memset(&v76, 0, sizeof(v76));
  if (v15[31] < 0)
  {
    uint64_t v16 = *(const char **)v16;
    uint64_t v17 = v15 + 32;
    if ((v15[55] & 0x80000000) == 0) {
      goto LABEL_34;
    }
  }
  else
  {
    uint64_t v17 = v15 + 32;
    if ((v15[55] & 0x80000000) == 0) {
      goto LABEL_34;
    }
  }
  uint64_t v17 = *(const char **)v17;
LABEL_34:
  *((void *)v15 + 7) = os_log_create(v16, v17);
  int v18 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  std::string::size_type size = __p.__r_.__value_.__l.__size_;
  uint64_t v19 = (const std::string::value_type *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v22 = __p.__r_.__value_.__l.__size_;
  }
  unint64_t v23 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t *)p_p, v22);
  unint64_t v24 = v23;
  unint64_t v25 = qword_269339E98;
  if (qword_269339E98)
  {
    uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)qword_269339E98);
    v26.i16[0] = vaddlv_u8(v26);
    if (v26.u32[0] > 1uLL)
    {
      unint64_t v27 = v23;
      if (v23 >= qword_269339E98) {
        unint64_t v27 = v23 % qword_269339E98;
      }
    }
    else
    {
      unint64_t v27 = (qword_269339E98 - 1) & v23;
    }
    uint64_t v28 = *(uint64_t ***)(qword_269339E90 + 8 * v27);
    if (v28)
    {
      v75 = v19;
      unint64_t v29 = *v28;
      if (*v28)
      {
        if (v26.u32[0] < 2uLL)
        {
          uint64_t v30 = qword_269339E98 - 1;
          while (1)
          {
            uint64_t v36 = v29[1];
            if (v36 == v24)
            {
              uint64_t v37 = *((unsigned __int8 *)v29 + 39);
              if ((v37 & 0x80u) == 0) {
                uint64_t v38 = *((unsigned __int8 *)v29 + 39);
              }
              else {
                uint64_t v38 = v29[3];
              }
              if (v38 == v22)
              {
                int64_t v39 = (const void **)(v29 + 2);
                if ((v37 & 0x80) != 0)
                {
                  uint64_t v74 = v30;
                  int v41 = memcmp(*v39, p_p, v29[3]);
                  uint64_t v30 = v74;
                  if (!v41) {
                    goto LABEL_149;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v29 + 39)) {
                    goto LABEL_149;
                  }
                  uint64_t v40 = p_p;
                  while (*(unsigned __int8 *)v39 == v40->__r_.__value_.__s.__data_[0])
                  {
                    int64_t v39 = (const void **)((char *)v39 + 1);
                    uint64_t v40 = (std::string *)((char *)v40 + 1);
                    if (!--v37) {
                      goto LABEL_149;
                    }
                  }
                }
              }
            }
            else if ((v36 & v30) != v27)
            {
              goto LABEL_84;
            }
            unint64_t v29 = (uint64_t *)*v29;
            if (!v29) {
              goto LABEL_84;
            }
          }
        }
        do
        {
          unint64_t v31 = v29[1];
          if (v31 == v24)
          {
            uint64_t v32 = *((unsigned __int8 *)v29 + 39);
            if ((v32 & 0x80u) == 0) {
              uint64_t v33 = *((unsigned __int8 *)v29 + 39);
            }
            else {
              uint64_t v33 = v29[3];
            }
            if (v33 == v22)
            {
              uint64_t v34 = (const void **)(v29 + 2);
              if ((v32 & 0x80) != 0)
              {
                if (!memcmp(*v34, p_p, v29[3])) {
                  goto LABEL_149;
                }
              }
              else
              {
                if (!*((unsigned char *)v29 + 39)) {
                  goto LABEL_149;
                }
                uint64_t v35 = p_p;
                while (*(unsigned __int8 *)v34 == v35->__r_.__value_.__s.__data_[0])
                {
                  uint64_t v34 = (const void **)((char *)v34 + 1);
                  uint64_t v35 = (std::string *)((char *)v35 + 1);
                  if (!--v32) {
                    goto LABEL_149;
                  }
                }
              }
            }
          }
          else
          {
            if (v31 >= v25) {
              v31 %= v25;
            }
            if (v31 != v27) {
              break;
            }
          }
          unint64_t v29 = (uint64_t *)*v29;
        }
        while (v29);
      }
LABEL_84:
      uint64_t v19 = v75;
    }
  }
  else
  {
    unint64_t v27 = 0xAAAAAAAAAAAAAAAALL;
  }
  __dst.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAA00;
  uint64_t v42 = operator new(0x30uLL);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)&qword_269339EA0;
  *uint64_t v42 = 0;
  v42[1] = v24;
  v43 = (std::string *)(v42 + 2);
  if (v18 < 0)
  {
    std::string::__init_copy_ctor_external(v43, v19, size);
  }
  else
  {
    *(_OWORD *)&v43->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v42[4] = *((void *)&__p.__r_.__value_.__l + 2);
  }
  v42[5] = v15;
  __dst.__r_.__value_.__s.__data_[16] = 1;
  float v44 = (float)(unint64_t)(qword_269339EA8 + 1);
  if (!v25 || (float)(*(float *)&dword_269339EB0 * (float)v25) < v44)
  {
    BOOL v47 = 1;
    if (v25 >= 3) {
      BOOL v47 = (v25 & (v25 - 1)) != 0;
    }
    unint64_t v48 = v47 | (2 * v25);
    unint64_t v49 = vcvtps_u32_f32(v44 / *(float *)&dword_269339EB0);
    if (v48 <= v49) {
      size_t prime = v49;
    }
    else {
      size_t prime = v48;
    }
    if (prime == 1)
    {
      size_t prime = 2;
      unint64_t v51 = 0x269339000;
    }
    else
    {
      unint64_t v51 = 0x269339000uLL;
      if ((prime & (prime - 1)) != 0) {
        size_t prime = std::__next_prime(prime);
      }
    }
    unint64_t v25 = *(void *)(v51 + 3736);
    if (prime > v25) {
      goto LABEL_102;
    }
    if (prime >= v25) {
      goto LABEL_135;
    }
    unint64_t v62 = vcvtps_u32_f32((float)(unint64_t)qword_269339EA8 / *(float *)&dword_269339EB0);
    if (v25 < 3 || (uint8x8_t v63 = (uint8x8_t)vcnt_s8((int8x8_t)v25), v63.i16[0] = vaddlv_u8(v63), v63.u32[0] > 1uLL))
    {
      unint64_t v62 = std::__next_prime(v62);
    }
    else
    {
      uint64_t v64 = 1 << -(char)__clz(v62 - 1);
      if (v62 >= 2) {
        unint64_t v62 = v64;
      }
    }
    if (prime <= v62) {
      size_t prime = v62;
    }
    if (prime >= v25)
    {
      unint64_t v25 = *(void *)(v51 + 3736);
    }
    else
    {
      if (prime)
      {
LABEL_102:
        if (prime >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v52 = operator new(8 * prime);
        v53 = (void *)qword_269339E90;
        qword_269339E90 = (uint64_t)v52;
        if (v53) {
          operator delete(v53);
        }
        uint64_t v54 = 0;
        *(void *)(v51 + 3736) = prime;
        do
          *(void *)(qword_269339E90 + 8 * v54++) = 0;
        while (prime != v54);
        BOOL v55 = (void **)qword_269339EA0;
        if (!qword_269339EA0) {
          goto LABEL_134;
        }
        size_t v56 = *(void *)(qword_269339EA0 + 8);
        size_t v57 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          size_t v58 = v56 & v57;
          *(void *)(qword_269339E90 + 8 * v58) = &qword_269339EA0;
          for (i = *v55; *v55; i = *v55)
          {
            size_t v60 = i[1] & v57;
            if (v60 == v58)
            {
              BOOL v55 = (void **)i;
            }
            else if (*(void *)(qword_269339E90 + 8 * v60))
            {
              *BOOL v55 = (void *)*i;
              uint64_t v61 = 8 * v60;
              void *i = **(void **)(qword_269339E90 + v61);
              **(void **)(qword_269339E90 + v61) = i;
            }
            else
            {
              *(void *)(qword_269339E90 + 8 * v60) = v55;
              BOOL v55 = (void **)i;
              size_t v58 = v60;
            }
          }
LABEL_134:
          unint64_t v25 = prime;
          goto LABEL_135;
        }
        if (v56 >= prime) {
          v56 %= prime;
        }
        *(void *)(qword_269339E90 + 8 * v56) = &qword_269339EA0;
        uint64_t v65 = *v55;
        if (!*v55) {
          goto LABEL_134;
        }
        while (1)
        {
          size_t v67 = v65[1];
          if (v67 >= prime) {
            v67 %= prime;
          }
          if (v67 == v56) {
            goto LABEL_128;
          }
          if (*(void *)(qword_269339E90 + 8 * v67))
          {
            *BOOL v55 = (void *)*v65;
            uint64_t v66 = 8 * v67;
            *uint64_t v65 = **(void **)(qword_269339E90 + v66);
            **(void **)(qword_269339E90 + v66) = v65;
            uint64_t v65 = v55;
LABEL_128:
            BOOL v55 = (void **)v65;
            uint64_t v65 = (void *)*v65;
            if (!v65) {
              goto LABEL_134;
            }
          }
          else
          {
            *(void *)(qword_269339E90 + 8 * v67) = v55;
            BOOL v55 = (void **)v65;
            uint64_t v65 = (void *)*v65;
            size_t v56 = v67;
            if (!v65) {
              goto LABEL_134;
            }
          }
        }
      }
      unint64_t v73 = (void *)qword_269339E90;
      qword_269339E90 = 0;
      if (v73) {
        operator delete(v73);
      }
      unint64_t v25 = 0;
      *(void *)(v51 + 3736) = 0;
    }
LABEL_135:
    unint64_t v68 = v25 - 1;
    if ((v25 & (v25 - 1)) != 0)
    {
      if (v24 >= v25)
      {
        unint64_t v27 = v24 % v25;
        v45 = *(void **)(qword_269339E90 + 8 * (v24 % v25));
        unint64_t v46 = (void *)__dst.__r_.__value_.__r.__words[0];
        if (v45) {
          goto LABEL_91;
        }
      }
      else
      {
        unint64_t v27 = v24;
        v45 = *(void **)(qword_269339E90 + 8 * v24);
        unint64_t v46 = (void *)__dst.__r_.__value_.__r.__words[0];
        if (v45) {
          goto LABEL_91;
        }
      }
    }
    else
    {
      unint64_t v27 = v68 & v24;
      v45 = *(void **)(qword_269339E90 + 8 * (v68 & v24));
      unint64_t v46 = (void *)__dst.__r_.__value_.__r.__words[0];
      if (v45) {
        goto LABEL_91;
      }
    }
LABEL_137:
    *unint64_t v46 = qword_269339EA0;
    qword_269339EA0 = __dst.__r_.__value_.__r.__words[0];
    *(void *)(qword_269339E90 + 8 * v27) = &qword_269339EA0;
    if (*(void *)__dst.__r_.__value_.__l.__data_)
    {
      unint64_t v69 = *(void *)(*(void *)__dst.__r_.__value_.__l.__data_ + 8);
      if ((v25 & (v25 - 1)) != 0)
      {
        if (v69 >= v25) {
          v69 %= v25;
        }
      }
      else
      {
        v69 &= v25 - 1;
      }
      *(void *)(qword_269339E90 + 8 * v69) = __dst.__r_.__value_.__r.__words[0];
    }
    goto LABEL_148;
  }
  v45 = *(void **)(qword_269339E90 + 8 * v27);
  unint64_t v46 = (void *)__dst.__r_.__value_.__r.__words[0];
  if (!v45) {
    goto LABEL_137;
  }
LABEL_91:
  *unint64_t v46 = *v45;
  void *v45 = __dst.__r_.__value_.__r.__words[0];
LABEL_148:
  ++qword_269339EA8;
LABEL_149:
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v76.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v77.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_151:
      v70 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>((uint64_t)&__p);
      if (v70) {
        goto LABEL_152;
      }
LABEL_157:
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
  }
  else if ((SHIBYTE(v77.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_151;
  }
  operator delete(v77.__r_.__value_.__l.__data_);
  v70 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>((uint64_t)&__p);
  if (!v70) {
    goto LABEL_157;
  }
LABEL_152:
  uint64_t v71 = v70[5];
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::mutex::unlock(&support::log::global_client_descriptor_manager::get_descriptor_instance(std::string const&,std::string const&)::sMutex);
  return v71;
}

void sub_248B06E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a16 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
LABEL_3:
    if ((a30 & 0x80000000) == 0)
    {
LABEL_8:
      std::mutex::unlock(&support::log::global_client_descriptor_manager::get_descriptor_instance(std::string const&,std::string const&)::sMutex);
      _Unwind_Resume(a1);
    }
LABEL_7:
    operator delete(a25);
    std::mutex::unlock(&support::log::global_client_descriptor_manager::get_descriptor_instance(std::string const&,std::string const&)::sMutex);
    _Unwind_Resume(a1);
  }
  operator delete(a18);
  if ((a30 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

BOOL support::log::client::descriptor::operator==(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 16) == *(void *)(a2 + 16);
}

void *support::log::client::client(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = &unk_26FCC7220;
  *(_OWORD *)char v12 = *(_OWORD *)a2;
  uint64_t v13 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  uint64_t v11 = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  a1[1] = &unk_26FCC7560;
  uint64_t descriptor_instance = support::log::global_client_descriptor_manager::get_descriptor_instance((uint64_t)v12, (uint64_t)__p);
  a1[2] = descriptor_instance;
  a1[3] = descriptor_instance;
  a1[4] = descriptor_instance + 8;
  a1[5] = descriptor_instance + 32;
  a1[6] = descriptor_instance + 56;
  if ((SHIBYTE(v11) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    operator delete(v12[0]);
    if (a4) {
      goto LABEL_4;
    }
LABEL_7:
    pthread_mutex_lock(&ctu::Singleton<support::log::manager_global,support::log::manager_global,ctu::PthreadMutexGuardPolicy<support::log::manager_global>>::sInstance);
    if (!qword_269339BF8)
    {
      uint64_t v7 = operator new(0xA8uLL);
      v7[1] = 0;
      v7[2] = 0;
      void *v7 = &unk_26FCC7798;
      a4 = (uint64_t)(v7 + 3);
      support::log::manager_global::manager_global((support::log::manager_global *)(v7 + 3));
      uint64_t v8 = (std::__shared_weak_count *)off_269339C00;
      qword_269339BF8 = (uint64_t)(v7 + 3);
      off_269339C00 = v7;
      if (!v8)
      {
LABEL_13:
        atomic_fetch_add_explicit(v7 + 1, 1uLL, memory_order_relaxed);
LABEL_14:
        pthread_mutex_unlock(&ctu::Singleton<support::log::manager_global,support::log::manager_global,ctu::PthreadMutexGuardPolicy<support::log::manager_global>>::sInstance);
        a1[7] = a4;
        a1[8] = v7;
        goto LABEL_15;
      }
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    a4 = qword_269339BF8;
    uint64_t v7 = off_269339C00;
    if (!off_269339C00) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v13) < 0) {
    goto LABEL_6;
  }
LABEL_3:
  if (!a4) {
    goto LABEL_7;
  }
LABEL_4:
  a1[7] = 0;
  a1[8] = 0;
LABEL_15:
  a1[9] = a4;
  return a1;
}

void sub_248B071DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::__shared_weak_count::~__shared_weak_count(v21);
  operator delete(v23);
  pthread_mutex_unlock(&ctu::Singleton<support::log::manager_global,support::log::manager_global,ctu::PthreadMutexGuardPolicy<support::log::manager_global>>::sInstance);
  _Unwind_Resume(a1);
}

void *support::log::client::client(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  *a1 = &unk_26FCC7220;
  *(_OWORD *)char v12 = *(_OWORD *)a2;
  uint64_t v13 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  uint64_t v11 = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  a1[1] = &unk_26FCC7560;
  uint64_t descriptor_instance = support::log::global_client_descriptor_manager::get_descriptor_instance((uint64_t)v12, (uint64_t)__p);
  a1[2] = descriptor_instance;
  a1[3] = descriptor_instance;
  a1[4] = descriptor_instance + 8;
  a1[5] = descriptor_instance + 32;
  a1[6] = descriptor_instance + 56;
  if ((SHIBYTE(v11) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    operator delete(v12[0]);
    uint64_t v7 = *a4;
    uint64_t v8 = a4[1];
    a1[7] = *a4;
    a1[8] = v8;
    if (!v8) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v13) < 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v7 = *a4;
  uint64_t v8 = a4[1];
  a1[7] = *a4;
  a1[8] = v8;
  if (v8)
  {
LABEL_4:
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    uint64_t v7 = a1[7];
  }
LABEL_5:
  a1[9] = v7;
  return a1;
}

void sub_248B07358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void *support::log::client::client(void *a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
  uint64_t v8 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  uint64_t v6 = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  support::log::client::client(a1, (uint64_t)v7, (uint64_t)__p, 0);
  if (SHIBYTE(v6) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v8) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((SHIBYTE(v8) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(v7[0]);
  return a1;
}

{
  void *__p[2];
  uint64_t v6;
  void *v7[2];
  uint64_t v8;

  *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
  uint64_t v8 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  uint64_t v6 = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  support::log::client::client(a1, (uint64_t)v7, (uint64_t)__p, 0);
  if (SHIBYTE(v6) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v8) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((SHIBYTE(v8) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(v7[0]);
  return a1;
}

void sub_248B07440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_248B07524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t support::log::client::get_manager(support::log::client *this)
{
  return *((void *)this + 9);
}

uint64_t support::log::client::get_descriptor(support::log::client *this)
{
  return (uint64_t)this + 8;
}

BOOL support::log::manager::should_log(uint64_t a1, unsigned int a2, os_log_t oslog)
{
  return *(unsigned __int8 *)(a1 + 112) >= a2 || os_log_type_enabled(oslog, support::log::sOSLogLevel[a2]);
}

void support::log::stdout_delegate::~stdout_delegate(support::log::stdout_delegate *this)
{
  *(void *)this = &unk_26FCC7488;
  if (*((unsigned char *)this + 24))
  {
    uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
    if (v1) {
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_26FCC7488;
  if (*((unsigned char *)this + 24))
  {
    uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
    if (v2) {
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(this);
}

uint64_t ctu::PthreadMutexGuardPolicy<support::log::buffer>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t ctu::PthreadMutexGuardPolicy<support::log::manager_global>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void support::log::manager_global::~manager_global(support::log::manager_global *this)
{
  *(void *)this = &unk_26FCC74D0;
  if (*((void *)this + 17))
  {
    uint64_t v2 = (char *)this + 120;
    uint64_t v3 = *((void *)this + 15);
    int v4 = (char *)*((void *)this + 16);
    uint64_t v5 = *(void *)v4;
    *(void *)(v5 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v5;
    *((void *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        uint64_t v7 = (char *)*((void *)v4 + 1);
        uint64_t v6 = *((void *)v4 + 2);
        *((void *)v4 + 2) = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
        }
        operator delete(v4);
        int v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t vars8;

  *(void *)this = &unk_26FCC74D0;
  if (*((void *)this + 17))
  {
    uint64_t v2 = (char *)this + 120;
    uint64_t v3 = *((void *)this + 15);
    int v4 = (char *)*((void *)this + 16);
    uint64_t v5 = *(void *)v4;
    *(void *)(v5 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v5;
    *((void *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        uint64_t v7 = (char *)*((void *)v4 + 1);
        uint64_t v6 = *((void *)v4 + 2);
        *((void *)v4 + 2) = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
        }
        operator delete(v4);
        int v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
  operator delete(this);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x263F8C208], MEMORY[0x263F8C090]);
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 == result) {
    return result;
  }
  while (1)
  {
    uint64_t v2 = a2[2];
    if (*(unsigned char *)(v2 + 24)) {
      return result;
    }
    uint64_t v3 = *(uint64_t **)(v2 + 16);
    uint64_t v4 = *v3;
    if (*v3 != v2) {
      break;
    }
    uint64_t v7 = v3[1];
    if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), uint64_t v5 = (unsigned char *)(v7 + 24), v8))
    {
      if (*(uint64_t **)v2 == a2)
      {
        *(unsigned char *)(v2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v11 = *(void *)(v2 + 8);
        uint64_t *v3 = v11;
        if (v11) {
          goto LABEL_15;
        }
      }
      else
      {
        uint64_t v9 = *(uint64_t **)(v2 + 8);
        uint64_t v10 = *v9;
        *(void *)(v2 + 8) = *v9;
        if (v10)
        {
          *(void *)(v10 + 16) = v2;
          uint64_t v3 = *(uint64_t **)(v2 + 16);
        }
        v9[2] = (uint64_t)v3;
        *(void *)(*(void *)(v2 + 16) + 8 * (**(void **)(v2 + 16) != v2)) = v9;
        uint64_t *v9 = v2;
        *(void *)(v2 + 16) = v9;
        uint64_t v3 = (uint64_t *)v9[2];
        uint64_t v2 = *v3;
        *((unsigned char *)v9 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v11 = *(void *)(v2 + 8);
        uint64_t *v3 = v11;
        if (v11) {
LABEL_15:
        }
          *(void *)(v11 + 16) = v3;
      }
      *(void *)(v2 + 16) = v3[2];
      *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
      *(void *)(v2 + 8) = v3;
      v3[2] = v2;
      return result;
    }
LABEL_3:
    *(unsigned char *)(v2 + 24) = 1;
    a2 = v3;
    *((unsigned char *)v3 + 24) = v3 == result;
    *uint64_t v5 = 1;
    if (v3 == result) {
      return result;
    }
  }
  if (v4)
  {
    int v6 = *(unsigned __int8 *)(v4 + 24);
    uint64_t v5 = (unsigned char *)(v4 + 24);
    if (!v6) {
      goto LABEL_3;
    }
  }
  if (*(uint64_t **)v2 == a2)
  {
    uint64_t v12 = a2[1];
    *(void *)uint64_t v2 = v12;
    if (v12)
    {
      *(void *)(v12 + 16) = v2;
      uint64_t v3 = *(uint64_t **)(v2 + 16);
    }
    a2[2] = (uint64_t)v3;
    *(void *)(*(void *)(v2 + 16) + 8 * (**(void **)(v2 + 16) != v2)) = a2;
    a2[1] = v2;
    *(void *)(v2 + 16) = a2;
    uint64_t v3 = (uint64_t *)a2[2];
  }
  else
  {
    a2 = (uint64_t *)a2[2];
  }
  *((unsigned char *)a2 + 24) = 1;
  *((unsigned char *)v3 + 24) = 0;
  uint64_t v13 = (uint64_t *)v3[1];
  uint64_t v14 = *v13;
  v3[1] = *v13;
  if (v14) {
    *(void *)(v14 + 16) = v3;
  }
  void v13[2] = v3[2];
  *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v13;
  *uint64_t v13 = (uint64_t)v3;
  v3[2] = (uint64_t)v13;
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(uint64_t a1)
{
  int v1 = *(char *)(a1 + 23);
  if (v1 >= 0) {
    uint64_t v2 = (uint64_t *)a1;
  }
  else {
    uint64_t v2 = *(uint64_t **)a1;
  }
  if (v1 >= 0) {
    unint64_t v3 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    unint64_t v3 = *(void *)(a1 + 8);
  }
  unint64_t v4 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](v2, v3);
  unint64_t v5 = qword_269339E98;
  if (!qword_269339E98) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)qword_269339E98);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = v4;
    if (v4 >= qword_269339E98) {
      unint64_t v8 = v4 % qword_269339E98;
    }
  }
  else
  {
    unint64_t v8 = (qword_269339E98 - 1) & v4;
  }
  uint64_t v10 = *(uint64_t ***)(qword_269339E90 + 8 * v8);
  if (v10)
  {
    uint64_t v11 = *v10;
    if (*v10)
    {
      if (v7.u32[0] < 2uLL)
      {
        uint64_t v12 = qword_269339E98 - 1;
        while (1)
        {
          uint64_t v17 = v11[1];
          if (v17 == v6)
          {
            uint64_t v18 = *((unsigned __int8 *)v11 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v11 + 39);
            }
            else {
              uint64_t v19 = v11[3];
            }
            if (v19 == v3)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v11[2], v2, v11[3])) {
                  return v11;
                }
              }
              else
              {
                if (!*((unsigned char *)v11 + 39)) {
                  return v11;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v11 + v20 + 16) == *((unsigned __int8 *)v2 + v20))
                {
                  if (v18 == ++v20) {
                    return v11;
                  }
                }
              }
            }
          }
          else if ((v17 & v12) != v8)
          {
            return 0;
          }
          double result = 0;
          uint64_t v11 = (uint64_t *)*v11;
          if (!v11) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v13 = v11[1];
        if (v13 == v6)
        {
          uint64_t v14 = *((unsigned __int8 *)v11 + 39);
          if ((v14 & 0x80u) == 0) {
            uint64_t v15 = *((unsigned __int8 *)v11 + 39);
          }
          else {
            uint64_t v15 = v11[3];
          }
          if (v15 == v3)
          {
            if ((v14 & 0x80) != 0)
            {
              if (!memcmp((const void *)v11[2], v2, v11[3])) {
                return v11;
              }
            }
            else
            {
              if (!*((unsigned char *)v11 + 39)) {
                return v11;
              }
              uint64_t v16 = 0;
              while (*((unsigned __int8 *)v11 + v16 + 16) == *((unsigned __int8 *)v2 + v16))
              {
                if (v14 == ++v16) {
                  return v11;
                }
              }
            }
          }
        }
        else
        {
          if (v13 >= v5) {
            v13 %= v5;
          }
          if (v13 != v8) {
            return 0;
          }
        }
        double result = 0;
        uint64_t v11 = (uint64_t *)*v11;
        if (!v11) {
          return result;
        }
      }
    }
  }
  return 0;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t *a1, unint64_t a2)
{
  if (a2 > 0x20)
  {
    if (a2 <= 0x40)
    {
      uint64_t v5 = *(uint64_t *)((char *)a1 + a2 - 16);
      uint64_t v6 = *a1 - 0x3C5A37A36834CED9 * (v5 + a2);
      uint64_t v8 = a1[2];
      uint64_t v7 = a1[3];
      uint64_t v9 = __ROR8__(v6 + v7, 52);
      uint64_t v10 = v6 + a1[1];
      uint64_t v11 = __ROR8__(v10, 7);
      uint64_t v12 = v10 + v8;
      uint64_t v13 = *(uint64_t *)((char *)a1 + a2 - 32) + v8;
      uint64_t v14 = v11 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v5 + a2), 37) + v9 + __ROR8__(v12, 31);
      unint64_t v15 = 0xC3A5C85C97CB3127
          * (*(uint64_t *)((char *)a1 + a2 - 24) + v13 + v5 + *(uint64_t *)((char *)a1 + a2 - 8) + v7 + v14)
          - 0x651E95C4D06FBFB1
          * (v12
           + v7
           + __ROR8__(v13, 37)
           + __ROR8__(*(uint64_t *)((char *)a1 + a2 - 24) + v13, 7)
           + __ROR8__(*(uint64_t *)((char *)a1 + a2 - 8) + v7 + v13, 52)
           + __ROR8__(*(uint64_t *)((char *)a1 + a2 - 24) + v13 + v5, 31));
      return 0x9AE16A3B2F90404FLL
           * ((v14 - 0x3C5A37A36834CED9 * (v15 ^ (v15 >> 47))) ^ ((v14 - 0x3C5A37A36834CED9 * (v15 ^ (v15 >> 47))) >> 47));
    }
    unint64_t v21 = 0x9DDFEA08EB382D69;
    uint64_t v22 = *(uint64_t *)((char *)a1 + a2 - 48);
    uint64_t v23 = *(uint64_t *)((char *)a1 + a2 - 40);
    uint64_t v24 = *(uint64_t *)((char *)a1 + a2 - 24);
    uint64_t v26 = *(uint64_t *)((char *)a1 + a2 - 64);
    uint64_t v25 = *(uint64_t *)((char *)a1 + a2 - 56);
    uint64_t v27 = *(uint64_t *)((char *)a1 + a2 - 16);
    uint64_t v28 = *(uint64_t *)((char *)a1 + a2 - 8);
    unint64_t v29 = v25 + v27;
    unint64_t v30 = 0x9DDFEA08EB382D69
        * (v24 ^ ((0x9DDFEA08EB382D69 * (v24 ^ (v22 + a2))) >> 47) ^ (0x9DDFEA08EB382D69 * (v24 ^ (v22 + a2))));
    unint64_t v31 = 0x9DDFEA08EB382D69 * (v30 ^ (v30 >> 47));
    unint64_t v32 = v22 + v25 + v26 + a2;
    uint64_t v33 = v32 + v23;
    unint64_t v34 = __ROR8__(v32, 44) + v26 + a2 + __ROR8__(v26 + a2 + v23 - 0x622015F714C7D297 * (v30 ^ (v30 >> 47)), 21);
    uint64_t v35 = v25 + v27 + *(uint64_t *)((char *)a1 + a2 - 32) - 0x4B6D499041670D8DLL;
    uint64_t v36 = v24 + v27 + v35;
    uint64_t v37 = __ROR8__(v36, 44);
    uint64_t v38 = v36 + v28;
    uint64_t v39 = v37 + v35 + __ROR8__(v35 + v23 + v28, 21);
    uint64_t v41 = *a1;
    uint64_t v40 = a1 + 4;
    unint64_t v42 = v41 - 0x4B6D499041670D8DLL * v23;
    uint64_t v43 = -(uint64_t)((a2 - 1) & 0xFFFFFFFFFFFFFFC0);
    do
    {
      uint64_t v44 = *(v40 - 3);
      uint64_t v45 = v42 + v33 + v29 + v44;
      uint64_t v46 = v40[2];
      uint64_t v47 = v40[3];
      uint64_t v48 = v40[1];
      unint64_t v29 = v48 + v33 - 0x4B6D499041670D8DLL * __ROR8__(v29 + v34 + v46, 42);
      uint64_t v49 = v31 + v38;
      uint64_t v50 = *(v40 - 2);
      uint64_t v51 = *(v40 - 1);
      uint64_t v52 = *(v40 - 4) - 0x4B6D499041670D8DLL * v34;
      uint64_t v53 = v52 + v38 + v51;
      uint64_t v54 = v52 + v44 + v50;
      uint64_t v33 = v54 + v51;
      uint64_t v55 = __ROR8__(v54, 44) + v52;
      unint64_t v56 = (0xB492B66FBE98F273 * __ROR8__(v45, 37)) ^ v39;
      unint64_t v42 = 0xB492B66FBE98F273 * __ROR8__(v49, 33);
      unint64_t v34 = v55 + __ROR8__(v53 + v56, 21);
      unint64_t v57 = v42 + v39 + *v40;
      uint64_t v38 = v48 + v46 + v57 + v47;
      uint64_t v39 = __ROR8__(v48 + v46 + v57, 44) + v57 + __ROR8__(v29 + v50 + v57 + v47, 21);
      v40 += 8;
      unint64_t v31 = v56;
      v43 += 64;
    }
    while (v43);
    unint64_t v58 = v42
        - 0x622015F714C7D297
        * ((0x9DDFEA08EB382D69
          * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) ^ ((0x9DDFEA08EB382D69 * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) >> 47));
    unint64_t v59 = 0x9DDFEA08EB382D69
        * (v58 ^ (v56
                - 0x4B6D499041670D8DLL * (v29 ^ (v29 >> 47))
                - 0x622015F714C7D297
                * ((0x9DDFEA08EB382D69
                  * (v38 ^ ((0x9DDFEA08EB382D69 * (v38 ^ v33)) >> 47) ^ (0x9DDFEA08EB382D69 * (v38 ^ v33)))) ^ ((0x9DDFEA08EB382D69 * (v38 ^ ((0x9DDFEA08EB382D69 * (v38 ^ v33)) >> 47) ^ (0x9DDFEA08EB382D69 * (v38 ^ v33)))) >> 47))));
    unint64_t v60 = 0x9DDFEA08EB382D69 * (v58 ^ (v59 >> 47) ^ v59);
    goto LABEL_11;
  }
  if (a2 > 0x10)
  {
    uint64_t v16 = a1[1];
    unint64_t v17 = 0xB492B66FBE98F273 * *a1;
    uint64_t v18 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a1 + a2 - 8), 30) + __ROR8__(v17 - v16, 43);
    unint64_t v19 = v17 + a2 + __ROR8__(v16 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a1 + a2 - 8);
    unint64_t v20 = 0x9DDFEA08EB382D69 * ((v18 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a1 + a2 - 16)) ^ v19);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v19 ^ (v20 >> 47) ^ v20)) ^ ((0x9DDFEA08EB382D69 * (v19 ^ (v20 >> 47) ^ v20)) >> 47));
  }
  if (a2 >= 9)
  {
    uint64_t v2 = *(uint64_t *)((char *)a1 + a2 - 8);
    uint64_t v3 = __ROR8__(v2 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v3 ^ ((0x9DDFEA08EB382D69 * (v3 ^ *a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v3 ^ *a1)))) ^ ((0x9DDFEA08EB382D69 * (v3 ^ ((0x9DDFEA08EB382D69 * (v3 ^ *a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v3 ^ *a1)))) >> 47))) ^ v2;
  }
  if (a2 < 4)
  {
    unint64_t v21 = 0x9AE16A3B2F90404FLL;
    if (!a2) {
      return v21;
    }
    unint64_t v60 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                   * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
LABEL_11:
    v21 *= v60 ^ (v60 >> 47);
    return v21;
  }
  uint64_t v61 = *(unsigned int *)((char *)a1 + a2 - 4);
  unint64_t v62 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a1) + a2) ^ v61);
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) ^ ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) >> 47));
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v3 = *(void *)(v2 + 40);
      *(void *)(v2 + 40) = 0;
      if (v3) {
        (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
      }
      if (*(char *)(v2 + 39) < 0) {
        operator delete(*(void **)(v2 + 16));
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

void support::log::global_client_descriptor::~global_client_descriptor(void **this)
{
  *this = &unk_26FCC7630;
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    if ((*((char *)this + 31) & 0x80000000) == 0) {
      return;
    }
LABEL_5:
    operator delete(this[1]);
    return;
  }
  operator delete(this[4]);
  if (*((char *)this + 31) < 0) {
    goto LABEL_5;
  }
}

{
  support::log::global_client_descriptor *v2;
  uint64_t vars8;

  *this = &unk_26FCC7630;
  if (*((char *)this + 55) < 0)
  {
    operator delete(this[4]);
    if ((*((char *)this + 31) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v2 = (support::log::global_client_descriptor *)this;
      goto LABEL_5;
    }
  }
  else if ((*((char *)this + 31) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[1]);
  uint64_t v2 = (support::log::global_client_descriptor *)this;
LABEL_5:
  operator delete(v2);
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_26524E3A8, MEMORY[0x263F8C068]);
}

void sub_248B084E8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  double result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  return result;
}

void std::__shared_ptr_pointer<support::log::delegate::context *,std::shared_ptr<support::log::delegate::context>::__shared_ptr_default_delete<support::log::delegate::context,support::log::delegate::context>,std::allocator<support::log::delegate::context>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<support::log::delegate::context *,std::shared_ptr<support::log::delegate::context>::__shared_ptr_default_delete<support::log::delegate::context,support::log::delegate::context>,std::allocator<support::log::delegate::context>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<support::log::delegate::context *,std::shared_ptr<support::log::delegate::context>::__shared_ptr_default_delete<support::log::delegate::context,support::log::delegate::context>,std::allocator<support::log::delegate::context>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000248B499BELL) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000248B499BELL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000248B499BELL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000248B499BELL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::__shared_ptr_emplace<support::log::buffer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FCC76B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<support::log::buffer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FCC76B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<support::log::buffer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void support::log::buffer::~buffer(support::log::buffer *this)
{
  *(void *)this = &unk_26FCC7700;
  uint64_t v2 = (char *)*((void *)this + 9);
  uint64_t v3 = (char *)this + 80;
  if (v2 != (char *)this + 80)
  {
    do
    {
      free(*((void **)v2 + 4));
      unint64_t v4 = (char *)*((void *)v2 + 1);
      if (v4)
      {
        do
        {
          uint64_t v5 = v4;
          unint64_t v4 = *(char **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          uint64_t v5 = (char *)*((void *)v2 + 2);
          BOOL v6 = *(void *)v5 == (void)v2;
          uint64_t v2 = v5;
        }
        while (!v6);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v3);
  }
  std::deque<char *>::~deque[abi:ne180100]((uint64_t)this + 96);
  std::__tree<char *>::destroy(*((void **)this + 10));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  BOOL v6;
  uint64_t vars8;

  *(void *)this = &unk_26FCC7700;
  uint64_t v2 = (char *)*((void *)this + 9);
  uint64_t v3 = (char *)this + 80;
  if (v2 != (char *)this + 80)
  {
    do
    {
      free(*((void **)v2 + 4));
      unint64_t v4 = (char *)*((void *)v2 + 1);
      if (v4)
      {
        do
        {
          uint64_t v5 = v4;
          unint64_t v4 = *(char **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          uint64_t v5 = (char *)*((void *)v2 + 2);
          BOOL v6 = *(void *)v5 == (void)v2;
          uint64_t v2 = v5;
        }
        while (!v6);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v3);
  }
  std::deque<char *>::~deque[abi:ne180100]((uint64_t)this + 96);
  std::__tree<char *>::destroy(*((void **)this + 10));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
  operator delete(this);
}

uint64_t std::deque<char *>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 512;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__tree<char *>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<char *>::destroy(*a1);
    std::__tree<char *>::destroy(a1[1]);
    operator delete(a1);
  }
}

void std::__shared_ptr_pointer<support::log::manager *,std::shared_ptr<support::log::manager>::__shared_ptr_default_delete<support::log::manager,support::log::manager>,std::allocator<support::log::manager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<support::log::manager *,std::shared_ptr<support::log::manager>::__shared_ptr_default_delete<support::log::manager,support::log::manager>,std::allocator<support::log::manager>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<support::log::manager *,std::shared_ptr<support::log::manager>::__shared_ptr_default_delete<support::log::manager,support::log::manager>,std::allocator<support::log::manager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000248B49B4ALL) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000248B49B4ALL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000248B49B4ALL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000248B49B4ALL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::__shared_ptr_emplace<support::log::manager_global>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FCC7798;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<support::log::manager_global>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FCC7798;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<support::log::manager_global>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t __cxx_global_var_init_2()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::shared_stdio,support::log::shared_stdio,ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>>::sInstance, &dword_248AFD000);
  }
  return result;
}

uint64_t __cxx_global_var_init_5()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::buffer>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance, &dword_248AFD000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::Gestalt>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance, &dword_248AFD000);
  }
  return result;
}

uint64_t __cxx_global_var_init_6()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::manager_global>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::manager_global,support::log::manager_global,ctu::PthreadMutexGuardPolicy<support::log::manager_global>>::sInstance, &dword_248AFD000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance, &dword_248AFD000);
  }
  return result;
}

int *support::crc::generateCRC32(int *this, unsigned int *a2, const unsigned __int8 *a3)
{
  int v3 = *this;
  unsigned int v4 = ~*this;
  *this = v4;
  if (a3)
  {
    do
    {
      int v5 = *(unsigned __int8 *)a2;
      a2 = (unsigned int *)((char *)a2 + 1);
      unsigned int v4 = support::crc::crc32c_table[v4 ^ v5] ^ (v4 >> 8);
      *this = v4;
      --a3;
    }
    while (a3);
    int v3 = ~v4;
  }
  *this = v3;
  return this;
}

void support::parsers::acp::ACPDataType::~ACPDataType(support::parsers::acp::ACPDataType *this)
{
  *(void *)this = &unk_26FCC77E8;
  uint64_t v2 = (const void *)*((void *)this + 1);
  if (v2)
  {
    CFRelease(v2);
    *((void *)this + 1) = 0;
  }
}

BOOL support::parsers::acp::ACPDataType::init(support::parsers::acp::ACPDataType *this)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  CFMutableDataRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
  *((void *)this + 1) = Mutable;
  if (Mutable)
  {
    *((void *)this + 2) = 0;
  }
  else
  {
    unsigned int v4 = *(NSObject **)(GetOsLogContext() + 8);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315138;
      uint64_t v6 = "init";
      _os_log_error_impl(&dword_248AFD000, v4, OS_LOG_TYPE_ERROR, "[%s] Failed to init Trace Data Descriptor\n", (uint8_t *)&v5, 0xCu);
    }
  }
  return Mutable != 0;
}

uint64_t support::parsers::acp::ACPDataType::getRawBytesRef(support::parsers::acp::ACPDataType *this)
{
  return *((void *)this + 1);
}

uint64_t support::parsers::acp::ACPDataType::getExpectedPayloadSize(support::parsers::acp::ACPDataType *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t support::parsers::acp::ACPDataType::getReceivedPayloadSize(support::parsers::acp::ACPDataType *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t support::parsers::acp::ACPDataType::setExpectedPayloadSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 16) = a2;
  return this;
}

uint64_t support::parsers::acp::ACPDataType::addReceivedPayloadSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) += a2;
  return this;
}

BOOL support::parsers::acp::ACPDataType::isPayloadComplete(support::parsers::acp::ACPDataType *this)
{
  return *((_DWORD *)this + 5) == *((_DWORD *)this + 4);
}

uint64_t support::parsers::acp::ACPDataType::getPendingPayloadSize(support::parsers::acp::ACPDataType *this)
{
  return (*((_DWORD *)this + 4) - *((_DWORD *)this + 5));
}

BOOL support::parsers::acp::ACPDataType::appendToRawBytes(support::parsers::acp::ACPDataType *this, const unsigned __int8 *a2, CFIndex length)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (a2 && length && (int v3 = (__CFData *)*((void *)this + 1)) != 0)
  {
    CFDataAppendBytes(v3, a2, length);
    return 1;
  }
  else
  {
    int v5 = *(NSObject **)(GetOsLogContext() + 8);
    BOOL result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (result)
    {
      int v6 = 136315138;
      uint64_t v7 = "appendToRawBytes";
      _os_log_error_impl(&dword_248AFD000, v5, OS_LOG_TYPE_ERROR, "[%s] invalid input data\n", (uint8_t *)&v6, 0xCu);
      return 0;
    }
  }
  return result;
}

BOOL support::parsers::acp::SuperFrame::init(support::parsers::acp::SuperFrame *this, char a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  unsigned int v4 = (std::__shared_weak_count *)*((void *)this + 8);
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  *((unsigned char *)this + 72) = a2;
  CFMutableDataRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
  *((void *)this + 1) = Mutable;
  if (Mutable)
  {
    *((void *)this + 2) = 0;
  }
  else
  {
    uint64_t v7 = *(NSObject **)(GetOsLogContext() + 8);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315138;
      uint64_t v9 = "init";
      _os_log_error_impl(&dword_248AFD000, v7, OS_LOG_TYPE_ERROR, "[%s] Failed to init Trace Data Descriptor\n", (uint8_t *)&v8, 0xCu);
    }
  }
  return Mutable != 0;
}

void support::parsers::acp::SuperFrame::create(support::parsers::acp::SuperFrame *this@<X0>, void *a2@<X8>)
{
  char v2 = (char)this;
  uint64_t v9 = *MEMORY[0x263EF8340];
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  unsigned int v4 = operator new(0x50uLL);
  v4[3] = 0u;
  v4[4] = 0u;
  _OWORD *v4 = 0u;
  v4[1] = 0u;
  void v4[2] = 0u;
  *(void *)unsigned int v4 = &unk_26FCC7848;
  *((void *)v4 + 7) = 0;
  *((void *)v4 + 8) = 0;
  *a2 = v4;
  int v5 = operator new(0x20uLL);
  *int v5 = &unk_26FCC79D0;
  v5[1] = 0;
  v5[2] = 0;
  void v5[3] = v4;
  a2[1] = v5;
  if (!support::parsers::acp::SuperFrame::init((support::parsers::acp::SuperFrame *)v4, v2))
  {
    int v6 = *(NSObject **)(GetOsLogContext() + 8);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315138;
      int v8 = "create";
      _os_log_error_impl(&dword_248AFD000, v6, OS_LOG_TYPE_ERROR, "[%s] Failed to init SuperFrame\n", (uint8_t *)&v7, 0xCu);
    }
  }
}

void sub_248B0905C(_Unwind_Exception *a1)
{
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_248B09070(_Unwind_Exception *a1)
{
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_248B09084(_Unwind_Exception *a1)
{
  support::parsers::acp::SuperFrame::~SuperFrame(v1);
  _Unwind_Resume(a1);
}

BOOL support::parsers::acp::SuperFrame::validateHeader(support::parsers::acp::SuperFrame *this)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  char v2 = *(NSObject **)(GetOsLogContext() + 8);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v21 = *((void *)this + 3);
    int v32 = 67109888;
    *(_DWORD *)uint64_t v33 = (unsigned __int16)v21;
    *(_WORD *)&v33[4] = 1024;
    *(_DWORD *)&v33[6] = WORD1(v21);
    *(_WORD *)unint64_t v34 = 1024;
    *(_DWORD *)&v34[2] = BYTE4(v21);
    LOWORD(v35[0]) = 1024;
    *(_DWORD *)((char *)v35 + 2) = (unsigned __int16)(HIDWORD(v21) >> 8);
    _os_log_debug_impl(&dword_248AFD000, v2, OS_LOG_TYPE_DEBUG, "[SuperFrame Header]: SYNC1: 0x%x, SYNC2: 0x%x, VER: 0x%x, FSN: 0x%x\n", (uint8_t *)&v32, 0x1Au);
    int v3 = *(NSObject **)(GetOsLogContext() + 8);
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
LABEL_3:
      unint64_t v4 = *((void *)this + 3);
      if (v4 == 1520828415) {
        goto LABEL_4;
      }
LABEL_10:
      uint64_t v24 = *(NSObject **)(GetOsLogContext() + 8);
      BOOL result = os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      int v32 = 136315138;
      *(void *)uint64_t v33 = "validateHeader";
      uint64_t v25 = "[%s] Invalid SYNC1/SYNC2\n";
      uint64_t v26 = v24;
      uint32_t v27 = 12;
      goto LABEL_16;
    }
  }
  else
  {
    int v3 = *(NSObject **)(GetOsLogContext() + 8);
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_3;
    }
  }
  int v22 = *((unsigned __int8 *)this + 31);
  uint64_t v23 = *((void *)this + 4);
  int v32 = 67109888;
  *(_DWORD *)uint64_t v33 = v22;
  *(_WORD *)&v33[4] = 1024;
  *(_DWORD *)&v33[6] = v23 & 0xFFFFFF;
  *(_WORD *)unint64_t v34 = 1024;
  *(_DWORD *)&v34[2] = BYTE3(v23) & 0xF;
  LOWORD(v35[0]) = 1024;
  *(_DWORD *)((char *)v35 + 2) = HIDWORD(v23);
  _os_log_debug_impl(&dword_248AFD000, v3, OS_LOG_TYPE_DEBUG, "[SuperFrame Header]: BIDX: %u, FSIZE: %u, SVER: %u, HCRC32: 0x%x\n", (uint8_t *)&v32, 0x1Au);
  unint64_t v4 = *((void *)this + 3);
  if (v4 != 1520828415) {
    goto LABEL_10;
  }
LABEL_4:
  uint64_t v5 = *((void *)this + 4);
  unint64_t v6 = v4 >> 40;
  unsigned int v7 = support::crc::crc32c_table[(~LOBYTE(support::crc::crc32c_table[~(_BYTE)v4]) ^ BYTE1(v4))] ^ ((support::crc::crc32c_table[~(_BYTE)v4] ^ 0xFFFFFFu) >> 8);
  unint64_t v8 = HIDWORD(v4);
  unsigned int v9 = support::crc::crc32c_table[(v7 ^ BYTE2(v4))] ^ (v7 >> 8);
  unsigned int v10 = support::crc::crc32c_table[v9 ^ BYTE3(v4)] ^ (v9 >> 8);
  unsigned int v11 = support::crc::crc32c_table[(v10 ^ v8)] ^ (v10 >> 8);
  unsigned int v12 = support::crc::crc32c_table[(v11 ^ v6)] ^ (v11 >> 8);
  unsigned int v13 = support::crc::crc32c_table[v12 ^ *((unsigned __int8 *)this + 30)] ^ (v12 >> 8);
  unsigned int v14 = support::crc::crc32c_table[v13 ^ *((unsigned __int8 *)this + 31)] ^ (v13 >> 8);
  unsigned int v15 = support::crc::crc32c_table[v14 ^ *((unsigned __int8 *)this + 32)] ^ (v14 >> 8);
  unsigned int v16 = support::crc::crc32c_table[v15 ^ *((unsigned __int8 *)this + 33)] ^ (v15 >> 8);
  unsigned int v17 = support::crc::crc32c_table[v16 ^ *((unsigned __int8 *)this + 34)] ^ (v16 >> 8);
  int v18 = support::crc::crc32c_table[v17 ^ *((unsigned __int8 *)this + 35)] ^ ~(v17 >> 8);
  if (v18 != HIDWORD(v5))
  {
    uint64_t v28 = *(NSObject **)(GetOsLogContext() + 8);
    BOOL result = os_log_type_enabled(v28, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    int v29 = *((_DWORD *)this + 9);
    int v32 = 136315650;
    *(void *)uint64_t v33 = "validateHeader";
    *(_WORD *)&v33[8] = 1024;
    *(_DWORD *)unint64_t v34 = v18;
    *(_WORD *)&_OWORD v34[4] = 1024;
    v35[0] = v29;
    uint64_t v25 = "[%s] CRC32C mismatch, expected: 0x%x, received: 0x%x\n";
    uint64_t v26 = v28;
    uint32_t v27 = 24;
LABEL_16:
    _os_log_error_impl(&dword_248AFD000, v26, OS_LOG_TYPE_ERROR, v25, (uint8_t *)&v32, v27);
    return 0;
  }
  unsigned int v19 = BYTE3(v5) & 0xF;
  *((_DWORD *)this + 12) = v19;
  if (v19 < 3) {
    return 1;
  }
  unint64_t v30 = *(NSObject **)(GetOsLogContext() + 8);
  BOOL result = os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
  if (result)
  {
    int v31 = *((_DWORD *)this + 12);
    int v32 = 136315394;
    *(void *)uint64_t v33 = "validateHeader";
    *(_WORD *)&v33[8] = 1024;
    *(_DWORD *)unint64_t v34 = v31;
    uint64_t v25 = "[%s] Invalid ACP Payload type: %d\n";
    uint64_t v26 = v30;
    uint32_t v27 = 18;
    goto LABEL_16;
  }
  return result;
}

BOOL support::parsers::acp::SuperFrame::parseHeader(support::parsers::acp::SuperFrame *this, unsigned __int8 *a2, unsigned int a3, unsigned int *a4)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (!a2 || !a3 || !a4)
  {
    unsigned int v9 = *(NSObject **)(GetOsLogContext() + 8);
    BOOL result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    int v15 = 136315138;
    unsigned int v16 = "parseHeader";
    unsigned int v10 = "[%s], invalid input parameter\n";
    goto LABEL_15;
  }
  if (a3 <= 0xF)
  {
    unsigned int v11 = *(NSObject **)(GetOsLogContext() + 8);
    BOOL result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
    if (result)
    {
      int v15 = 136315394;
      unsigned int v16 = "parseHeader";
      __int16 v17 = 1024;
      unsigned int v18 = a3;
      unsigned int v10 = "[%s] input size: %u less than superframe header size\n";
      unsigned int v12 = v11;
      uint32_t v13 = 18;
LABEL_16:
      _os_log_error_impl(&dword_248AFD000, v12, OS_LOG_TYPE_ERROR, v10, (uint8_t *)&v15, v13);
      return 0;
    }
    return result;
  }
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)a2;
  *a4 = 16;
  if (!support::parsers::acp::SuperFrame::validateHeader(this))
  {
    unsigned int v9 = *(NSObject **)(GetOsLogContext() + 8);
    BOOL result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    int v15 = 136315138;
    unsigned int v16 = "parseHeader";
    unsigned int v10 = "[%s] Failed to validate frame header\n";
LABEL_15:
    unsigned int v12 = v9;
    uint32_t v13 = 12;
    goto LABEL_16;
  }
  *((_DWORD *)this + 4) = *((_DWORD *)this + 8) & 0xFFFFFF;
  unsigned int v7 = (__CFData *)*((void *)this + 1);
  if (v7)
  {
    CFDataAppendBytes(v7, a2, 16);
    return 1;
  }
  unsigned int v14 = *(NSObject **)(GetOsLogContext() + 8);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    int v15 = 136315138;
    unsigned int v16 = "appendToRawBytes";
    _os_log_error_impl(&dword_248AFD000, v14, OS_LOG_TYPE_ERROR, "[%s] invalid input data\n", (uint8_t *)&v15, 0xCu);
  }
  unsigned int v9 = *(NSObject **)(GetOsLogContext() + 8);
  BOOL result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
  if (result)
  {
    int v15 = 136315138;
    unsigned int v16 = "parseHeader";
    unsigned int v10 = "[%s] Failed to append to raw bytes\n";
    goto LABEL_15;
  }
  return result;
}

BOOL support::parsers::acp::SuperFrame::parseFooter(support::parsers::acp::SuperFrame *this, unsigned __int8 *a2, unsigned int a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (a2 && a3)
  {
    if (a3 <= 7)
    {
      unint64_t v20 = *(NSObject **)(GetOsLogContext() + 8);
      BOOL result = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
      if (result)
      {
        int v24 = 136315650;
        *(void *)uint64_t v25 = "parseFooter";
        *(_WORD *)&v25[8] = 1024;
        unsigned int v26 = a3;
        __int16 v27 = 2048;
        uint64_t v28 = 8;
        __int16 v17 = "[%s] Input size (%u) less than footer size: %zu\n";
        unsigned int v18 = v20;
        uint32_t v19 = 28;
        goto LABEL_17;
      }
    }
    else
    {
      int v6 = *((_DWORD *)this + 9);
      *((void *)this + 5) = *(void *)a2;
      unsigned int v7 = *(NSObject **)(GetOsLogContext() + 8);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v15 = *((void *)this + 5);
        int v24 = 67109376;
        *(_DWORD *)uint64_t v25 = v15;
        *(_WORD *)&v25[4] = 1024;
        *(_DWORD *)&v25[6] = HIDWORD(v15);
        _os_log_debug_impl(&dword_248AFD000, v7, OS_LOG_TYPE_DEBUG, "[SuperFrame Footer] - TERMRN: 0x%x, TERMRNCRC32: 0x%x\n", (uint8_t *)&v24, 0xEu);
      }
      unsigned int v8 = *((_DWORD *)this + 10);
      unsigned int v9 = support::crc::crc32c_table[(v6 ^ ~(_BYTE)v8)] ^ (~v6 >> 8);
      unsigned int v10 = support::crc::crc32c_table[(v9 ^ BYTE1(v8))] ^ (v9 >> 8);
      unsigned int v11 = support::crc::crc32c_table[(v10 ^ BYTE2(v8))] ^ (v10 >> 8);
      int v12 = support::crc::crc32c_table[v11 ^ HIBYTE(v8)] ^ ~(v11 >> 8);
      if (v12 == *((_DWORD *)this + 11))
      {
        uint32_t v13 = (__CFData *)*((void *)this + 1);
        if (v13)
        {
          CFDataAppendBytes(v13, a2, 8);
          return 1;
        }
        uint64_t v23 = *(NSObject **)(GetOsLogContext() + 8);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          int v24 = 136315138;
          *(void *)uint64_t v25 = "appendToRawBytes";
          _os_log_error_impl(&dword_248AFD000, v23, OS_LOG_TYPE_ERROR, "[%s] invalid input data\n", (uint8_t *)&v24, 0xCu);
        }
        unsigned int v16 = *(NSObject **)(GetOsLogContext() + 8);
        BOOL result = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
        if (result)
        {
          int v24 = 136315138;
          *(void *)uint64_t v25 = "parseFooter";
          __int16 v17 = "[%s] Failed to append to raw bytes\n";
          goto LABEL_12;
        }
      }
      else
      {
        uint64_t v21 = *(NSObject **)(GetOsLogContext() + 8);
        BOOL result = os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
        if (result)
        {
          int v22 = *((_DWORD *)this + 11);
          int v24 = 136315650;
          *(void *)uint64_t v25 = "parseFooter";
          *(_WORD *)&v25[8] = 1024;
          unsigned int v26 = v12;
          __int16 v27 = 1024;
          LODWORD(v28) = v22;
          __int16 v17 = "[%s] Footer CRC Mismatch, calculated: 0x%x, received: 0x%x\n";
          unsigned int v18 = v21;
          uint32_t v19 = 24;
          goto LABEL_17;
        }
      }
    }
  }
  else
  {
    unsigned int v16 = *(NSObject **)(GetOsLogContext() + 8);
    BOOL result = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
    if (result)
    {
      int v24 = 136315138;
      *(void *)uint64_t v25 = "parseFooter";
      __int16 v17 = "[%s] Invalid input parameter\n";
LABEL_12:
      unsigned int v18 = v16;
      uint32_t v19 = 12;
LABEL_17:
      _os_log_error_impl(&dword_248AFD000, v18, OS_LOG_TYPE_ERROR, v17, (uint8_t *)&v24, v19);
      return 0;
    }
  }
  return result;
}

BOOL support::parsers::acp::SuperFrame::parsePayload(support::parsers::acp::SuperFrame *this, unsigned __int8 *a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (a2)
  {
    unsigned int v4 = a3;
    if (a3)
    {
      if (a4)
      {
        unsigned int v7 = *((_DWORD *)this + 4);
        unsigned int v6 = *((_DWORD *)this + 5);
        unsigned int v8 = v7 - v6;
        if (v7 < v6)
        {
          uint64_t v15 = *(NSObject **)(GetOsLogContext() + 8);
          BOOL result = os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
          if (result)
          {
            int v17 = *((_DWORD *)this + 4);
            int v16 = *((_DWORD *)this + 5);
            int v20 = 136315650;
            uint64_t v21 = "parsePayload";
            __int16 v22 = 1024;
            int v23 = v16;
            __int16 v24 = 1024;
            int v25 = v17;
            unsigned int v11 = "[%s] Received Payload Size: %u, Expected Payload Size: %u\n";
            unsigned int v18 = v15;
            uint32_t v19 = 24;
LABEL_21:
            _os_log_error_impl(&dword_248AFD000, v18, OS_LOG_TYPE_ERROR, v11, (uint8_t *)&v20, v19);
            return 0;
          }
          return result;
        }
        if (v8 <= a3)
        {
          *a4 = v8;
          unsigned int v4 = v7 - v6;
          if (!support::parsers::acp::SuperFrame::parseACPChunks(this, a2, v7 - v6))
          {
            unsigned int v9 = *(NSObject **)(GetOsLogContext() + 8);
            BOOL result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
            if (result)
            {
              int v20 = 136315138;
              uint64_t v21 = "parsePayload";
              unsigned int v11 = "[%s] failed to parse ACP Chunks\n";
              goto LABEL_20;
            }
            return result;
          }
        }
        else
        {
          *a4 = a3;
          if (!support::parsers::acp::SuperFrame::parseACPChunks(this, a2, a3))
          {
            unsigned int v9 = *(NSObject **)(GetOsLogContext() + 8);
            BOOL result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
            if (result)
            {
              int v20 = 136315138;
              uint64_t v21 = "parsePayload";
              unsigned int v11 = "[%s] failed to parse Base ACP Chunks\n";
LABEL_20:
              unsigned int v18 = v9;
              uint32_t v19 = 12;
              goto LABEL_21;
            }
            return result;
          }
        }
        *((_DWORD *)this + 5) += v4;
        int v12 = *(NSObject **)(GetOsLogContext() + 8);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          int v13 = *((_DWORD *)this + 4);
          int v14 = *((_DWORD *)this + 5);
          int v20 = 136315650;
          uint64_t v21 = "parsePayload";
          __int16 v22 = 1024;
          int v23 = v13;
          __int16 v24 = 1024;
          int v25 = v14;
          _os_log_debug_impl(&dword_248AFD000, v12, OS_LOG_TYPE_DEBUG, "[%s] expectedPayloadSize: %u, receivedPayloadSize: %u\n", (uint8_t *)&v20, 0x18u);
        }
        return 1;
      }
    }
  }
  unsigned int v9 = *(NSObject **)(GetOsLogContext() + 8);
  BOOL result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
  if (result)
  {
    int v20 = 136315138;
    uint64_t v21 = "parsePayload";
    unsigned int v11 = "[%s] invalid input parameter\n";
    goto LABEL_20;
  }
  return result;
}

BOOL support::parsers::acp::SuperFrame::parseACPChunks(support::parsers::acp::SuperFrame *this, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (a2)
  {
    unsigned int v3 = a3;
    if (a3)
    {
      unsigned int v4 = a2;
      uint64_t v6 = a3;
      while (1)
      {
        if (v6 > v3)
        {
          __int16 v24 = *(NSObject **)(GetOsLogContext() + 8);
          BOOL result = os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
          if (!result) {
            return result;
          }
          *(_DWORD *)fd_set buf = 136315650;
          *(void *)&uint8_t buf[4] = "parseACPChunks";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = v6;
          __int16 v34 = 1024;
          unsigned int v35 = v3;
          int v25 = "[%s] size remaining: %u, input size: %u\n";
          uint64_t v26 = v24;
          uint32_t v27 = 24;
          goto LABEL_46;
        }
        uint64_t v7 = *((void *)this + 7);
        if (v7) {
          goto LABEL_17;
        }
        if (*((_DWORD *)this + 12)) {
          support::parsers::acp::LSCACPChunk::create((support::parsers::acp::LSCACPChunk *)*((unsigned __int8 *)this + 72), buf);
        }
        else {
          support::parsers::acp::BaseACPChunk::create((support::parsers::acp::BaseACPChunk *)*((unsigned __int8 *)this + 72), buf);
        }
        long long v8 = *(_OWORD *)buf;
        *(void *)fd_set buf = 0;
        *(void *)&buf[8] = 0;
        unsigned int v9 = (std::__shared_weak_count *)*((void *)this + 8);
        *(_OWORD *)((char *)this + 56) = v8;
        if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
          unsigned int v10 = *(std::__shared_weak_count **)&buf[8];
          if (!*(void *)&buf[8]) {
            goto LABEL_16;
          }
        }
        else
        {
          unsigned int v10 = *(std::__shared_weak_count **)&buf[8];
          if (!*(void *)&buf[8]) {
            goto LABEL_16;
          }
        }
        if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
LABEL_16:
        uint64_t v7 = *((void *)this + 7);
        if (!v7)
        {
          unint64_t v30 = *(NSObject **)(GetOsLogContext() + 8);
          BOOL result = os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
          if (!result) {
            return result;
          }
          *(_DWORD *)fd_set buf = 136315138;
          *(void *)&uint8_t buf[4] = "parseACPChunks";
          int v25 = "[%s] failed to allocate ACP Chunk\n";
          goto LABEL_45;
        }
LABEL_17:
        if ((*(uint64_t (**)(uint64_t))(*(void *)v7 + 32))(v7))
        {
          unsigned int v32 = 0;
          if (((*(uint64_t (**)(void, unsigned __int8 *, uint64_t, unsigned int *))(**((void **)this + 7)
                                                                                              + 24))(*((void *)this + 7), v4, v6, &v32) & 1) == 0)
          {
            uint64_t v28 = *(NSObject **)(GetOsLogContext() + 8);
            if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)fd_set buf = 136315138;
              *(void *)&uint8_t buf[4] = "parseACPChunks";
              int v20 = "[%s] Failed to parse payload\n";
              goto LABEL_51;
            }
            return 0;
          }
          unsigned int v11 = v32;
          if (v32 > v6)
          {
            uint64_t v29 = *(NSObject **)(GetOsLogContext() + 8);
            if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)fd_set buf = 136315650;
              *(void *)&uint8_t buf[4] = "parseACPChunks";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = v32;
              __int16 v34 = 1024;
              unsigned int v35 = v6;
              int v20 = "[%s] Failed to parse payload - sizeProcessed: %u, sizeRemaining: %u\n";
              uint64_t v21 = v29;
              uint32_t v22 = 24;
              goto LABEL_52;
            }
            return 0;
          }
          uint64_t v12 = *((void *)this + 7);
          if (*(_DWORD *)(v12 + 20) == *(_DWORD *)(v12 + 16))
          {
            if (*(unsigned char *)(v12 + 24))
            {
              CFDataRef v13 = *(const __CFData **)(v12 + 8);
              BytePtr = CFDataGetBytePtr(v13);
              unsigned int Length = CFDataGetLength(v13);
              if (!BytePtr || (CFIndex v16 = Length) == 0 || (v17 = (__CFData *)*((void *)this + 1)) == 0)
              {
                int v31 = *(NSObject **)(GetOsLogContext() + 8);
                if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)fd_set buf = 136315138;
                  *(void *)&uint8_t buf[4] = "appendToRawBytes";
                  _os_log_error_impl(&dword_248AFD000, v31, OS_LOG_TYPE_ERROR, "[%s] invalid input data\n", buf, 0xCu);
                }
                uint64_t v28 = *(NSObject **)(GetOsLogContext() + 8);
                if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)fd_set buf = 136315138;
                  *(void *)&uint8_t buf[4] = "parseACPChunks";
                  int v20 = "[%s] Failed to append to raw bytes\n";
LABEL_51:
                  uint64_t v21 = v28;
                  uint32_t v22 = 12;
LABEL_52:
                  _os_log_error_impl(&dword_248AFD000, v21, OS_LOG_TYPE_ERROR, v20, buf, v22);
                }
                return 0;
              }
              CFDataAppendBytes(v17, BytePtr, v16);
            }
            unsigned int v18 = (std::__shared_weak_count *)*((void *)this + 8);
            *((void *)this + 7) = 0;
            *((void *)this + 8) = 0;
            if (v18)
            {
              if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
                std::__shared_weak_count::__release_weak(v18);
              }
            }
          }
        }
        else
        {
          unsigned int v32 = 0;
          if (((*(uint64_t (**)(void, unsigned __int8 *, uint64_t, unsigned int *))(**((void **)this + 7)
                                                                                              + 16))(*((void *)this + 7), v4, v6, &v32) & 1) == 0)
          {
            uint64_t v28 = *(NSObject **)(GetOsLogContext() + 8);
            if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)fd_set buf = 136315138;
              *(void *)&uint8_t buf[4] = "parseACPChunks";
              int v20 = "[%s] Failed to parse ACP Header\n";
              goto LABEL_51;
            }
            return 0;
          }
          unsigned int v11 = v32;
          if (v32 > v6)
          {
            uint32_t v19 = *(NSObject **)(GetOsLogContext() + 8);
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)fd_set buf = 136315650;
              *(void *)&uint8_t buf[4] = "parseACPChunks";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = v32;
              __int16 v34 = 1024;
              unsigned int v35 = v6;
              int v20 = "[%s] Failed to parse ACP Header - sizeProcessed: %u, sizeRemaining: %u\n";
              uint64_t v21 = v19;
              uint32_t v22 = 24;
              goto LABEL_52;
            }
            return 0;
          }
        }
        v4 += v11;
        uint64_t v6 = v6 - v11;
        if (!v6) {
          return 1;
        }
      }
    }
  }
  unint64_t v30 = *(NSObject **)(GetOsLogContext() + 8);
  BOOL result = os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_DWORD *)fd_set buf = 136315138;
    *(void *)&uint8_t buf[4] = "parseACPChunks";
    int v25 = "[%s] invalid input parameter\n";
LABEL_45:
    uint64_t v26 = v30;
    uint32_t v27 = 12;
LABEL_46:
    _os_log_error_impl(&dword_248AFD000, v26, OS_LOG_TYPE_ERROR, v25, buf, v27);
    return 0;
  }
  return result;
}

void support::parsers::acp::BaseACPChunk::create(support::parsers::acp::BaseACPChunk *this@<X0>, void *a2@<X8>)
{
  char v2 = (char)this;
  uint64_t v11 = *MEMORY[0x263EF8340];
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  unsigned int v4 = (char *)operator new(0x28uLL);
  *(_OWORD *)unsigned int v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  *((void *)v4 + 4) = 0;
  *(void *)unsigned int v4 = &unk_26FCC78E0;
  *a2 = v4;
  uint64_t v5 = operator new(0x20uLL);
  *uint64_t v5 = &unk_26FCC7A20;
  v5[1] = 0;
  v5[2] = 0;
  void v5[3] = v4;
  a2[1] = v5;
  *(_DWORD *)(v4 + 26) = 0;
  *((_DWORD *)v4 + 8) = 0;
  *((_WORD *)v4 + 18) = 0;
  v4[24] = 1;
  v4[25] = v2;
  CFMutableDataRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
  *((void *)v4 + 1) = Mutable;
  if (Mutable)
  {
    *((void *)v4 + 2) = 0;
  }
  else
  {
    uint64_t v7 = *(NSObject **)(GetOsLogContext() + 8);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315138;
      unsigned int v10 = "init";
      _os_log_error_impl(&dword_248AFD000, v7, OS_LOG_TYPE_ERROR, "[%s] Failed to init Trace Data Descriptor\n", (uint8_t *)&v9, 0xCu);
    }
    long long v8 = *(NSObject **)(GetOsLogContext() + 8);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315138;
      unsigned int v10 = "create";
      _os_log_error_impl(&dword_248AFD000, v8, OS_LOG_TYPE_ERROR, "[%s] failed to init ACP Chunk\n", (uint8_t *)&v9, 0xCu);
    }
  }
}

void sub_248B0A3D0(_Unwind_Exception *a1)
{
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_248B0A3E4(_Unwind_Exception *a1)
{
  support::parsers::acp::BaseACPChunk::~BaseACPChunk(v1);
  _Unwind_Resume(a1);
}

void sub_248B0A3F8(_Unwind_Exception *a1)
{
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void support::parsers::acp::LSCACPChunk::create(support::parsers::acp::LSCACPChunk *this@<X0>, void *a2@<X8>)
{
  char v2 = (char)this;
  uint64_t v11 = *MEMORY[0x263EF8340];
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  unsigned int v4 = (char *)operator new(0x30uLL);
  *(_OWORD *)unsigned int v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  *((_OWORD *)v4 + 2) = 0u;
  *(void *)unsigned int v4 = &unk_26FCC7930;
  *a2 = v4;
  uint64_t v5 = operator new(0x20uLL);
  *uint64_t v5 = &unk_26FCC7A70;
  v5[1] = 0;
  v5[2] = 0;
  void v5[3] = v4;
  a2[1] = v5;
  *(void *)(v4 + 34) = 0;
  *(void *)(v4 + 26) = 0;
  *((_DWORD *)v4 + 11) = 0;
  v4[24] = 1;
  v4[25] = v2;
  CFMutableDataRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
  *((void *)v4 + 1) = Mutable;
  if (Mutable)
  {
    *((void *)v4 + 2) = 0;
  }
  else
  {
    uint64_t v7 = *(NSObject **)(GetOsLogContext() + 8);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315138;
      unsigned int v10 = "init";
      _os_log_error_impl(&dword_248AFD000, v7, OS_LOG_TYPE_ERROR, "[%s] Failed to init Trace Data Descriptor\n", (uint8_t *)&v9, 0xCu);
    }
    long long v8 = *(NSObject **)(GetOsLogContext() + 8);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315138;
      unsigned int v10 = "create";
      _os_log_error_impl(&dword_248AFD000, v8, OS_LOG_TYPE_ERROR, "[%s] failed to init LSCACP Chunk\n", (uint8_t *)&v9, 0xCu);
    }
  }
}

void sub_248B0A5C0(_Unwind_Exception *a1)
{
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_248B0A5D4(_Unwind_Exception *a1)
{
  support::parsers::acp::LSCACPChunk::~LSCACPChunk(v1);
  _Unwind_Resume(a1);
}

void sub_248B0A5E8(_Unwind_Exception *a1)
{
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t support::parsers::acp::ACPChunk::getShouldSaveBytes(support::parsers::acp::ACPChunk *this)
{
  return *((unsigned __int8 *)this + 24);
}

BOOL support::parsers::acp::SuperFrame::postProcess(support::parsers::acp::SuperFrame *this)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)this + 5) == *((_DWORD *)this + 4))
  {
    CFDataRef v2 = (const __CFData *)*((void *)this + 1);
    unsigned int Length = CFDataGetLength(v2);
    if (Length <= 0x18uLL)
    {
      unsigned int v4 = *(NSObject **)(GetOsLogContext() + 8);
      BOOL result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
      if (result)
      {
        int v51 = 136315138;
        uint64_t v52 = "postProcess";
        uint64_t v6 = "[%s] Accumulated Superframe with no ACP Payload\n";
LABEL_5:
        uint64_t v7 = v4;
        uint32_t v8 = 12;
LABEL_6:
        _os_log_error_impl(&dword_248AFD000, v7, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&v51, v8);
        return 0;
      }
      return result;
    }
    uint64_t v9 = Length - 24;
    if ((Length & 3) != 0)
    {
      uint64_t v46 = *(NSObject **)(GetOsLogContext() + 8);
      BOOL result = os_log_type_enabled(v46, OS_LOG_TYPE_ERROR);
      if (result)
      {
        int v51 = 136315394;
        uint64_t v52 = "postProcess";
        __int16 v53 = 1024;
        int v54 = v9;
        uint64_t v6 = "[%s] Final Saved Payload Size (%u) must be 4 bytes aligned\n";
        uint64_t v7 = v46;
        uint32_t v8 = 18;
        goto LABEL_6;
      }
      return result;
    }
    MutableBytePtr = CFDataGetMutableBytePtr(v2);
    uint64_t v11 = *(NSObject **)(GetOsLogContext() + 8);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v35 = *((void *)MutableBytePtr + 1) & 0xFFFFFFLL;
      uint64_t v36 = HIDWORD(*((void *)MutableBytePtr + 1));
      int v51 = 136315650;
      uint64_t v52 = "postProcess";
      __int16 v53 = 1024;
      int v54 = v35;
      __int16 v55 = 1024;
      int v56 = v36;
      _os_log_debug_impl(&dword_248AFD000, v11, OS_LOG_TYPE_DEBUG, "[%s][Before] frameSavedHeaderPayloadSize: %u, frameSavedHeaderHCRC32: 0x%x\n", (uint8_t *)&v51, 0x18u);
      uint64_t v12 = *((void *)MutableBytePtr + 1);
      uint64_t v13 = *((void *)this + 4);
      if (((v13 ^ v12) & 0xFFFFFF) == 0)
      {
LABEL_10:
        if (HIDWORD(v12) != HIDWORD(v13))
        {
          uint64_t v37 = *(NSObject **)(GetOsLogContext() + 8);
          BOOL result = os_log_type_enabled(v37, OS_LOG_TYPE_ERROR);
          if (!result) {
            return result;
          }
          int v47 = *((_DWORD *)MutableBytePtr + 3);
          int v48 = *((_DWORD *)this + 9);
          int v51 = 136315650;
          uint64_t v52 = "postProcess";
          __int16 v53 = 1024;
          int v54 = v47;
          __int16 v55 = 1024;
          int v56 = v48;
          uint64_t v6 = "[%s] Corruption - saved header CRC32: 0x%x, sframe header CRC32: 0x%x\n";
          goto LABEL_34;
        }
        uint64_t v14 = *(void *)MutableBytePtr;
        unint64_t v15 = v12 & 0xFFFFFFFFFF000000 | v9 & 0xFFFFFF;
        *(void *)MutableBytePtr = *(void *)MutableBytePtr;
        *((void *)MutableBytePtr + 1) = v15;
        unsigned int v16 = support::crc::crc32c_table[(~LOBYTE(support::crc::crc32c_table[~(_BYTE)v14]) ^ BYTE1(v14))] ^ ((support::crc::crc32c_table[~(_BYTE)v14] ^ 0xFFFFFFu) >> 8);
        unsigned int v17 = support::crc::crc32c_table[(v16 ^ BYTE2(v14))] ^ (v16 >> 8);
        unsigned int v18 = support::crc::crc32c_table[v17 ^ BYTE3(v14)] ^ (v17 >> 8);
        unsigned int v19 = support::crc::crc32c_table[(v18 ^ BYTE4(v14))] ^ (v18 >> 8);
        unsigned int v20 = support::crc::crc32c_table[(v19 ^ BYTE5(v14))] ^ (v19 >> 8);
        unsigned int v21 = support::crc::crc32c_table[(v20 ^ BYTE6(v14))] ^ (v20 >> 8);
        LODWORD(v14) = support::crc::crc32c_table[(v21 ^ HIBYTE(v14))] ^ (v21 >> 8);
        LODWORD(v14) = support::crc::crc32c_table[(v14 ^ v9)] ^ (v14 >> 8);
        LODWORD(v14) = support::crc::crc32c_table[(v14 ^ BYTE1(v9))] ^ (v14 >> 8);
        int v22 = MutableBytePtr[10];
        unsigned int v23 = support::crc::crc32c_table[v14 ^ v22] ^ (v14 >> 8);
        int v24 = support::crc::crc32c_table[(LOBYTE(support::crc::crc32c_table[v14 ^ v22]) ^ BYTE1(v14)) ^ MutableBytePtr[11]];
        *((void *)MutableBytePtr + 1) = v15 | ((unint64_t)(v24 ^ ~(v23 >> 8)) << 32);
        int v25 = *(NSObject **)(GetOsLogContext() + 8);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v40 = *((void *)MutableBytePtr + 1) & 0xFFFFFFLL;
          uint64_t v41 = HIDWORD(*((void *)MutableBytePtr + 1));
          int v51 = 136315650;
          uint64_t v52 = "postProcess";
          __int16 v53 = 1024;
          int v54 = v40;
          __int16 v55 = 1024;
          int v56 = v41;
          _os_log_debug_impl(&dword_248AFD000, v25, OS_LOG_TYPE_DEBUG, "[%s][After] frameSavedHeaderPayloadSize: %u, frameSavedHeaderHCRC32: 0x%x\n", (uint8_t *)&v51, 0x18u);
        }
        uint64_t v26 = v9 + 16;
        uint32_t v27 = *(NSObject **)(GetOsLogContext() + 8);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v42 = *(void *)&MutableBytePtr[v26];
          int v51 = 136315650;
          uint64_t v52 = "postProcess";
          __int16 v53 = 1024;
          int v54 = v42;
          __int16 v55 = 1024;
          int v56 = HIDWORD(v42);
          _os_log_debug_impl(&dword_248AFD000, v27, OS_LOG_TYPE_DEBUG, "[%s][Before] Saved TERMRN: 0x%x, Saved TERMRNCRC32: 0x%x\n", (uint8_t *)&v51, 0x18u);
          uint64_t v28 = *(void *)&MutableBytePtr[v26];
          uint64_t v29 = *((void *)this + 5);
          if (v28 == v29) {
            goto LABEL_15;
          }
        }
        else
        {
          uint64_t v28 = *(void *)&MutableBytePtr[v26];
          uint64_t v29 = *((void *)this + 5);
          if (v28 == v29)
          {
LABEL_15:
            if (HIDWORD(v28) == HIDWORD(v29))
            {
              unsigned int v30 = v24 ^ (v23 >> 8);
              int v31 = support::crc::crc32c_table[(v30 ^ v28)];
              unsigned int v32 = support::crc::crc32c_table[(v31 ^ BYTE1(v30) ^ BYTE1(v28))] ^ ((v31 ^ (v30 >> 8)) >> 8);
              unsigned int v33 = support::crc::crc32c_table[(v32 ^ BYTE2(v28))] ^ (v32 >> 8);
              *(void *)&MutableBytePtr[v26] = v28 | ((unint64_t)(support::crc::crc32c_table[v33 ^ BYTE3(v28)] ^ ~(v33 >> 8)) << 32);
              __int16 v34 = *(NSObject **)(GetOsLogContext() + 8);
              if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v45 = *(void *)&MutableBytePtr[v26];
                int v51 = 136315650;
                uint64_t v52 = "postProcess";
                __int16 v53 = 1024;
                int v54 = v45;
                __int16 v55 = 1024;
                int v56 = HIDWORD(v45);
                _os_log_debug_impl(&dword_248AFD000, v34, OS_LOG_TYPE_DEBUG, "[%s][After] Saved TERMRN: 0x%x, Saved TERMRNCRC32: 0x%x\n", (uint8_t *)&v51, 0x18u);
              }
              return 1;
            }
            uint64_t v37 = *(NSObject **)(GetOsLogContext() + 8);
            BOOL result = os_log_type_enabled(v37, OS_LOG_TYPE_ERROR);
            if (!result) {
              return result;
            }
            int v49 = *(_DWORD *)&MutableBytePtr[v26 + 4];
            int v50 = *((_DWORD *)this + 11);
            int v51 = 136315650;
            uint64_t v52 = "postProcess";
            __int16 v53 = 1024;
            int v54 = v49;
            __int16 v55 = 1024;
            int v56 = v50;
            uint64_t v6 = "[%s] Corruption - saved TERMCRC32: 0x%x, sframe footer TERMCRC32: 0x%x\n";
LABEL_34:
            uint64_t v7 = v37;
            uint32_t v8 = 24;
            goto LABEL_6;
          }
        }
        uint64_t v37 = *(NSObject **)(GetOsLogContext() + 8);
        BOOL result = os_log_type_enabled(v37, OS_LOG_TYPE_ERROR);
        if (!result) {
          return result;
        }
        uint64_t v43 = *(void *)&MutableBytePtr[v26];
        uint64_t v44 = *((void *)this + 5);
        int v51 = 136315650;
        uint64_t v52 = "postProcess";
        __int16 v53 = 1024;
        int v54 = v43;
        __int16 v55 = 1024;
        int v56 = v44;
        uint64_t v6 = "[%s] Corruption - saved TERMRN: 0x%x, sframe footer TERMRN: 0x%x\n";
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t v12 = *((void *)MutableBytePtr + 1);
      uint64_t v13 = *((void *)this + 4);
      if (((v13 ^ v12) & 0xFFFFFF) == 0) {
        goto LABEL_10;
      }
    }
    uint64_t v37 = *(NSObject **)(GetOsLogContext() + 8);
    BOOL result = os_log_type_enabled(v37, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    int v38 = *((_DWORD *)MutableBytePtr + 2) & 0xFFFFFF;
    int v39 = *((_DWORD *)this + 8) & 0xFFFFFF;
    int v51 = 136315650;
    uint64_t v52 = "postProcess";
    __int16 v53 = 1024;
    int v54 = v38;
    __int16 v55 = 1024;
    int v56 = v39;
    uint64_t v6 = "[%s] Corruption - saved header payload size: %u, sframe header size: %u\n";
    goto LABEL_34;
  }
  unsigned int v4 = *(NSObject **)(GetOsLogContext() + 8);
  BOOL result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  if (result)
  {
    int v51 = 136315138;
    uint64_t v52 = "postProcess";
    uint64_t v6 = "[%s] Can't do postprocess if payload is incomplete\n";
    goto LABEL_5;
  }
  return result;
}

BOOL support::parsers::acp::SuperFrame::isComplete(support::parsers::acp::SuperFrame *this)
{
  return *((_DWORD *)this + 13) == 3;
}

BOOL support::parsers::acp::SuperFrame::processData(support::parsers::acp::SuperFrame *this, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (!a2 || (int v3 = a3) == 0)
  {
    uint64_t v11 = *(NSObject **)(GetOsLogContext() + 8);
    BOOL result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_DWORD *)fd_set buf = 136315138;
    unsigned int v19 = "processData";
    uint64_t v12 = "[%s] invalid input parameter\n";
    goto LABEL_27;
  }
  unsigned int v4 = a2;
  unsigned int v6 = 0;
  uint64_t v7 = a3;
  while (1)
  {
    int v8 = *((_DWORD *)this + 13);
    if (!v8)
    {
      unsigned int v17 = 0;
      if (((*(uint64_t (**)(support::parsers::acp::SuperFrame *, unsigned __int8 *, uint64_t, unsigned int *))(*(void *)this + 16))(this, v4, v7, &v17) & 1) == 0)
      {
        uint64_t v11 = *(NSObject **)(GetOsLogContext() + 8);
        if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
          return 0;
        }
        *(_DWORD *)fd_set buf = 136315138;
        unsigned int v19 = "processData";
        uint64_t v12 = "[%s] Failed to parse SuperFrame Header\n";
        goto LABEL_27;
      }
      if (v7 < v17)
      {
        unint64_t v15 = *(NSObject **)(GetOsLogContext() + 8);
        if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
          return 0;
        }
        goto LABEL_31;
      }
      v4 += v17;
      uint64_t v7 = v7 - v17;
      v6 += v17;
      *((_DWORD *)this + 13) = 1;
      goto LABEL_5;
    }
    if (v8 != 1) {
      break;
    }
    unsigned int v17 = 0;
    if (((*(uint64_t (**)(support::parsers::acp::SuperFrame *, unsigned __int8 *, uint64_t, unsigned int *))(*(void *)this + 24))(this, v4, v7, &v17) & 1) == 0)
    {
      uint64_t v11 = *(NSObject **)(GetOsLogContext() + 8);
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      *(_DWORD *)fd_set buf = 136315138;
      unsigned int v19 = "processData";
      uint64_t v12 = "[%s] Failed to parse payload\n";
      goto LABEL_27;
    }
    uint64_t v9 = v17;
    if (v7 < v17)
    {
      unint64_t v15 = *(NSObject **)(GetOsLogContext() + 8);
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
LABEL_31:
      *(_DWORD *)fd_set buf = 136315650;
      unsigned int v19 = "processData";
      __int16 v20 = 1024;
      unsigned int v21 = v17;
      __int16 v22 = 1024;
      int v23 = v7;
      uint64_t v12 = "[%s] Unexpected - size processed: %u, size remaining: %u\n";
      uint64_t v13 = v15;
LABEL_32:
      uint32_t v14 = 24;
      goto LABEL_33;
    }
    if (*((_DWORD *)this + 5) == *((_DWORD *)this + 4)) {
      *((_DWORD *)this + 13) = 2;
    }
    v4 += v9;
    uint64_t v7 = (v7 - v9);
    v6 += v9;
LABEL_5:
    if (!v7) {
      goto LABEL_20;
    }
  }
  if (v8 != 2) {
    goto LABEL_5;
  }
  if (!support::parsers::acp::SuperFrame::parseFooter(this, v4, v7))
  {
    uint64_t v11 = *(NSObject **)(GetOsLogContext() + 8);
    BOOL result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_DWORD *)fd_set buf = 136315138;
    unsigned int v19 = "processData";
    uint64_t v12 = "[%s] Failed to parse footer\n";
LABEL_27:
    uint64_t v13 = v11;
    uint32_t v14 = 12;
LABEL_33:
    _os_log_error_impl(&dword_248AFD000, v13, OS_LOG_TYPE_ERROR, v12, buf, v14);
    return 0;
  }
  CFDataGetLength(*((CFDataRef *)this + 1));
  if (!support::parsers::acp::SuperFrame::postProcess(this))
  {
    uint64_t v11 = *(NSObject **)(GetOsLogContext() + 8);
    BOOL result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_DWORD *)fd_set buf = 136315138;
    unsigned int v19 = "processData";
    uint64_t v12 = "[%s] failed to post process current frame\n";
    goto LABEL_27;
  }
  v6 += v7;
  *((_DWORD *)this + 13) = 3;
LABEL_20:
  if (v6 == v3) {
    return 1;
  }
  unsigned int v16 = *(NSObject **)(GetOsLogContext() + 8);
  BOOL result = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_DWORD *)fd_set buf = 136315650;
    unsigned int v19 = "processData";
    __int16 v20 = 1024;
    unsigned int v21 = v6;
    __int16 v22 = 1024;
    int v23 = v3;
    uint64_t v12 = "[%s] Size Processed (%u) is not same as input size(%u)\n";
    uint64_t v13 = v16;
    goto LABEL_32;
  }
  return result;
}

BOOL support::parsers::acp::ACPChunk::init(support::parsers::acp::ACPChunk *this, char a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  *((unsigned char *)this + 24) = 1;
  *((unsigned char *)this + 25) = a2;
  CFMutableDataRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
  *((void *)this + 1) = Mutable;
  if (Mutable)
  {
    *((void *)this + 2) = 0;
  }
  else
  {
    uint64_t v5 = *(NSObject **)(GetOsLogContext() + 8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315138;
      uint64_t v7 = "init";
      _os_log_error_impl(&dword_248AFD000, v5, OS_LOG_TYPE_ERROR, "[%s] Failed to init Trace Data Descriptor\n", (uint8_t *)&v6, 0xCu);
    }
  }
  return Mutable != 0;
}

uint64_t support::parsers::acp::ACPChunk::setShouldSaveBytes(uint64_t this, unsigned int a2)
{
  if (*(unsigned char *)(this + 25))
  {
    int v2 = (a2 >> 10) & 1;
    if ((a2 & 0x110) == 0x10) {
      LOBYTE(v2) = 1;
    }
    *(unsigned char *)(this + 24) = v2;
  }
  return this;
}

uint64_t support::parsers::acp::ACPChunk::parseHeader(support::parsers::acp::ACPChunk *this, unsigned __int8 *a2, unsigned int a3, unsigned int *a4)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  unsigned int v4 = *(NSObject **)(GetOsLogContext() + 8);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    int v6 = 136315138;
    uint64_t v7 = "parseHeader";
    _os_log_error_impl(&dword_248AFD000, v4, OS_LOG_TYPE_ERROR, "[ACPChunk][%s] Should Never be Called\n", (uint8_t *)&v6, 0xCu);
  }
  return 0;
}

BOOL support::parsers::acp::ACPChunk::parsePayload(support::parsers::acp::ACPChunk *this, unsigned __int8 *a2, CFIndex length, unsigned int *a4)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (!a4 || !a2 || (unsigned int v4 = length) == 0)
  {
    uint32_t v14 = *(NSObject **)(GetOsLogContext() + 8);
    BOOL result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    int v23 = 136315138;
    uint64_t v24 = "parsePayload";
    unint64_t v15 = "[ACPChunk][%s] invalid input parameter\n";
    goto LABEL_25;
  }
  unsigned int v7 = *((_DWORD *)this + 4);
  unsigned int v6 = *((_DWORD *)this + 5);
  unsigned int v8 = v7 - v6;
  if (v7 < v6)
  {
    unsigned int v16 = *(NSObject **)(GetOsLogContext() + 8);
    BOOL result = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
    if (result)
    {
      int v18 = *((_DWORD *)this + 4);
      int v17 = *((_DWORD *)this + 5);
      int v23 = 136315650;
      uint64_t v24 = "parsePayload";
      __int16 v25 = 1024;
      int v26 = v17;
      __int16 v27 = 1024;
      int v28 = v18;
      unint64_t v15 = "[%s] Received Payload Size: %u, Expected Payload Size: %u\n";
      unsigned int v19 = v16;
      uint32_t v20 = 24;
LABEL_26:
      _os_log_error_impl(&dword_248AFD000, v19, OS_LOG_TYPE_ERROR, v15, (uint8_t *)&v23, v20);
      return 0;
    }
    return result;
  }
  if (v8 <= length)
  {
    *a4 = v8;
    if (!*((unsigned char *)this + 24))
    {
LABEL_14:
      unsigned int v11 = *((_DWORD *)this + 5) + v8;
      goto LABEL_15;
    }
    if (v7 != v6)
    {
      uint64_t v12 = (__CFData *)*((void *)this + 1);
      if (v12)
      {
        CFDataAppendBytes(v12, a2, v7 - v6);
        goto LABEL_14;
      }
    }
    unsigned int v21 = *(NSObject **)(GetOsLogContext() + 8);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      int v23 = 136315138;
      uint64_t v24 = "appendToRawBytes";
      _os_log_error_impl(&dword_248AFD000, v21, OS_LOG_TYPE_ERROR, "[%s] invalid input data\n", (uint8_t *)&v23, 0xCu);
    }
    uint32_t v14 = *(NSObject **)(GetOsLogContext() + 8);
    BOOL result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    int v23 = 136315138;
    uint64_t v24 = "parsePayload";
    unint64_t v15 = "[%s] Failed to append to raw bytes\n";
LABEL_25:
    unsigned int v19 = v14;
    uint32_t v20 = 12;
    goto LABEL_26;
  }
  if (!*((unsigned char *)this + 24))
  {
LABEL_9:
    *a4 = v4;
    unsigned int v11 = *((_DWORD *)this + 5) + v4;
LABEL_15:
    *((_DWORD *)this + 5) = v11;
    return 1;
  }
  unsigned int v10 = (__CFData *)*((void *)this + 1);
  if (v10)
  {
    CFDataAppendBytes(v10, a2, length);
    goto LABEL_9;
  }
  __int16 v22 = *(NSObject **)(GetOsLogContext() + 8);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    int v23 = 136315138;
    uint64_t v24 = "appendToRawBytes";
    _os_log_error_impl(&dword_248AFD000, v22, OS_LOG_TYPE_ERROR, "[%s] invalid input data\n", (uint8_t *)&v23, 0xCu);
  }
  uint32_t v14 = *(NSObject **)(GetOsLogContext() + 8);
  BOOL result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  if (result)
  {
    int v23 = 136315138;
    uint64_t v24 = "parsePayload";
    unint64_t v15 = "[%s] Failed to append to raw bytes\n";
    goto LABEL_25;
  }
  return result;
}

BOOL support::parsers::acp::BaseACPChunk::init(support::parsers::acp::BaseACPChunk *this, char a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  *(_DWORD *)((char *)this + 26) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_WORD *)this + 18) = 0;
  *((unsigned char *)this + 24) = 1;
  *((unsigned char *)this + 25) = a2;
  CFMutableDataRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
  *((void *)this + 1) = Mutable;
  if (Mutable)
  {
    *((void *)this + 2) = 0;
  }
  else
  {
    uint64_t v5 = *(NSObject **)(GetOsLogContext() + 8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315138;
      unsigned int v7 = "init";
      _os_log_error_impl(&dword_248AFD000, v5, OS_LOG_TYPE_ERROR, "[%s] Failed to init Trace Data Descriptor\n", (uint8_t *)&v6, 0xCu);
    }
  }
  return Mutable != 0;
}

BOOL support::parsers::acp::BaseACPChunk::isHeaderComplete(support::parsers::acp::BaseACPChunk *this)
{
  if (!*((unsigned char *)this + 37)) {
    return 0;
  }
  if ((*((unsigned char *)this + 28) & 0x80) != 0) {
    return *((unsigned char *)this + 36) != 0;
  }
  return 1;
}

uint64_t support::parsers::acp::BaseACPChunk::isFSC(support::parsers::acp::BaseACPChunk *this)
{
  return *((unsigned __int8 *)this + 28) >> 7;
}

BOOL support::parsers::acp::BaseACPChunk::parseHeader(support::parsers::acp::BaseACPChunk *this, UInt8 *bytes, unsigned int a3, unsigned int *a4)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (bytes)
  {
    unsigned int v4 = a3;
    if (a3)
    {
      if (a4)
      {
        if (a3 <= 3)
        {
          unsigned int v16 = *(NSObject **)(GetOsLogContext() + 8);
          BOOL result = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
          if (result)
          {
            int v20 = 136315650;
            unsigned int v21 = "parseHeader";
            __int16 v22 = 1024;
            unsigned int v23 = v4;
            __int16 v24 = 2048;
            uint64_t v25 = 4;
            unint64_t v15 = "[BaseACPChunk][%s] input size: %u, expected: %zu\n";
            int v17 = v16;
            uint32_t v18 = 28;
LABEL_30:
            _os_log_error_impl(&dword_248AFD000, v17, OS_LOG_TYPE_ERROR, v15, (uint8_t *)&v20, v18);
            return 0;
          }
          return result;
        }
        int v6 = bytes;
        *a4 = 0;
        if (*((unsigned char *)this + 37))
        {
          unsigned int v8 = *(_DWORD *)((char *)this + 26);
LABEL_17:
          if ((v8 >> 23))
          {
            if (support::parsers::acp::BaseACPChunk::parseTimeStamp(this, v6, v4))
            {
              *a4 += 4;
              return 1;
            }
            uint32_t v14 = *(NSObject **)(GetOsLogContext() + 8);
            BOOL result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
            if (result)
            {
              int v20 = 136315138;
              unsigned int v21 = "parseHeader";
              unint64_t v15 = "[%s] timestamp parsing pending\n";
              goto LABEL_29;
            }
            return result;
          }
LABEL_20:
          BOOL result = 1;
          if ((v8 & 0x800000) == 0) {
            *((unsigned char *)this + 36) = 1;
          }
          return result;
        }
        unsigned int v9 = *(_DWORD *)bytes;
        *(_DWORD *)((char *)this + 26) = *(_DWORD *)bytes;
        *((_DWORD *)this + 4) = ((v9 >> 25) + 4) & 0xFC;
        if (*((unsigned char *)this + 25))
        {
          if ((v9 & 0x88000) == 0x8000) {
            int v10 = 1;
          }
          else {
            int v10 = (v9 >> 21) & 1;
          }
          *((unsigned char *)this + 24) = v10;
          *((unsigned char *)this + 36) = 0;
          if (!v10) {
            goto LABEL_16;
          }
        }
        else
        {
          int v11 = *((unsigned __int8 *)this + 24);
          *((unsigned char *)this + 36) = 0;
          if (!v11) {
            goto LABEL_16;
          }
        }
        uint64_t v12 = (__CFData *)*((void *)this + 1);
        if (!v12)
        {
          unsigned int v19 = *(NSObject **)(GetOsLogContext() + 8);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          {
            int v20 = 136315138;
            unsigned int v21 = "appendToRawBytes";
            _os_log_error_impl(&dword_248AFD000, v19, OS_LOG_TYPE_ERROR, "[%s] invalid input data\n", (uint8_t *)&v20, 0xCu);
          }
          uint32_t v14 = *(NSObject **)(GetOsLogContext() + 8);
          BOOL result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
          if (result)
          {
            int v20 = 136315138;
            unsigned int v21 = "parseHeader";
            unint64_t v15 = "[%s] Failed to append to raw bytes\n";
            goto LABEL_29;
          }
          return result;
        }
        CFDataAppendBytes(v12, bytes, 4);
LABEL_16:
        *((unsigned char *)this + 37) = 1;
        v6 += 4;
        *a4 += 4;
        v4 -= 4;
        unsigned int v8 = *(_DWORD *)((char *)this + 26);
        if (!v4) {
          goto LABEL_20;
        }
        goto LABEL_17;
      }
    }
  }
  uint32_t v14 = *(NSObject **)(GetOsLogContext() + 8);
  BOOL result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  if (result)
  {
    int v20 = 136315138;
    unsigned int v21 = "parseHeader";
    unint64_t v15 = "[BaseACPChunk][%s] invalid input parameter\n";
LABEL_29:
    int v17 = v14;
    uint32_t v18 = 12;
    goto LABEL_30;
  }
  return result;
}

BOOL support::parsers::acp::BaseACPChunk::parseTimeStamp(support::parsers::acp::BaseACPChunk *this, UInt8 *bytes, unsigned int a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (bytes && a3 > 3)
  {
    if ((*((unsigned char *)this + 28) & 0x80) == 0 || *((unsigned char *)this + 36))
    {
      unsigned int v8 = *(NSObject **)(GetOsLogContext() + 8);
      BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
      if (result)
      {
        int v14 = 136315138;
        unint64_t v15 = "parseTimeStamp";
        unsigned int v9 = "[%s] parse timestamp called in an invalid state\n";
LABEL_12:
        int v10 = v8;
        uint32_t v11 = 12;
LABEL_15:
        _os_log_error_impl(&dword_248AFD000, v10, OS_LOG_TYPE_ERROR, v9, (uint8_t *)&v14, v11);
        return 0;
      }
    }
    else
    {
      *((_DWORD *)this + 8) = *(_DWORD *)bytes;
      if (!*((unsigned char *)this + 24))
      {
LABEL_8:
        BOOL result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
      int v6 = (__CFData *)*((void *)this + 1);
      if (v6)
      {
        CFDataAppendBytes(v6, bytes, 4);
        goto LABEL_8;
      }
      uint64_t v13 = *(NSObject **)(GetOsLogContext() + 8);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        int v14 = 136315138;
        unint64_t v15 = "appendToRawBytes";
        _os_log_error_impl(&dword_248AFD000, v13, OS_LOG_TYPE_ERROR, "[%s] invalid input data\n", (uint8_t *)&v14, 0xCu);
      }
      unsigned int v8 = *(NSObject **)(GetOsLogContext() + 8);
      BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
      if (result)
      {
        int v14 = 136315138;
        unint64_t v15 = "parseTimeStamp";
        unsigned int v9 = "[%s] Failed to append to raw bytes\n";
        goto LABEL_12;
      }
    }
  }
  else
  {
    uint64_t v12 = *(NSObject **)(GetOsLogContext() + 8);
    BOOL result = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
    if (result)
    {
      int v14 = 136315650;
      unint64_t v15 = "parseTimeStamp";
      __int16 v16 = 2048;
      int v17 = bytes;
      __int16 v18 = 1024;
      unsigned int v19 = a3;
      unsigned int v9 = "[%s] invalid input parameter, inputBuffer: %p, input size: %u\n";
      int v10 = v12;
      uint32_t v11 = 28;
      goto LABEL_15;
    }
  }
  return result;
}

void support::parsers::acp::LSCACPChunk::~LSCACPChunk(support::parsers::acp::LSCACPChunk *this)
{
  *(void *)this = &unk_26FCC77E8;
  int v2 = (const void *)*((void *)this + 1);
  if (v2)
  {
    CFRelease(v2);
    *((void *)this + 1) = 0;
  }
}

{
  const void *v2;

  *(void *)this = &unk_26FCC77E8;
  int v2 = (const void *)*((void *)this + 1);
  if (v2)
  {
    CFRelease(v2);
    *((void *)this + 1) = 0;
  }
}

{
  const void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26FCC77E8;
  int v2 = (const void *)*((void *)this + 1);
  if (v2) {
    CFRelease(v2);
  }
  operator delete(this);
}

BOOL support::parsers::acp::LSCACPChunk::init(support::parsers::acp::LSCACPChunk *this, char a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  *(void *)((char *)this + 34) = 0;
  *(void *)((char *)this + 26) = 0;
  *((_DWORD *)this + 11) = 0;
  *((unsigned char *)this + 24) = 1;
  *((unsigned char *)this + 25) = a2;
  CFMutableDataRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
  *((void *)this + 1) = Mutable;
  if (Mutable)
  {
    *((void *)this + 2) = 0;
  }
  else
  {
    uint64_t v5 = *(NSObject **)(GetOsLogContext() + 8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315138;
      unsigned int v7 = "init";
      _os_log_error_impl(&dword_248AFD000, v5, OS_LOG_TYPE_ERROR, "[%s] Failed to init Trace Data Descriptor\n", (uint8_t *)&v6, 0xCu);
    }
  }
  return Mutable != 0;
}

BOOL support::parsers::acp::LSCACPChunk::isHeaderComplete(support::parsers::acp::LSCACPChunk *this)
{
  return *((_DWORD *)this + 11) == 16;
}

BOOL support::parsers::acp::LSCACPChunk::parseHeader(support::parsers::acp::LSCACPChunk *this, unsigned __int8 *a2, unsigned int a3, unsigned int *a4)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (a2 && a3 && a4)
  {
    if (*((_DWORD *)this + 11) >= 0x11u)
    {
      __int16 v18 = *(NSObject **)(GetOsLogContext() + 8);
      BOOL result = os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
      if (result)
      {
        int v19 = *((_DWORD *)this + 11);
        int v22 = 136315650;
        unsigned int v23 = "parseHeader";
        __int16 v24 = 1024;
        int v25 = v19;
        __int16 v26 = 2048;
        uint64_t v27 = 16;
        unint64_t v15 = "[LSCACPChunk][%s] Received Header Size (%u) greater than expected Header Size (%zu)\n";
        __int16 v16 = v18;
        uint32_t v17 = 28;
        goto LABEL_28;
      }
    }
    else
    {
      *a4 = 0;
      uint64_t v6 = *((unsigned int *)this + 11);
      unsigned int v7 = (uint64_t *)((char *)this + 26);
      uint64_t v8 = (char *)this + v6 + 26;
      if (16 - (int)v6 >= a3) {
        size_t v9 = a3;
      }
      else {
        size_t v9 = (16 - v6);
      }
      memcpy(v8, a2, v9);
      *((_DWORD *)this + 11) += v9;
      *a4 += v9;
      if (!(*(unsigned int (**)(support::parsers::acp::LSCACPChunk *))(*(void *)this + 32))(this)) {
        return 1;
      }
      uint64_t v10 = *v7;
      if (((*v7 >> 23) ^ BYTE3(*v7)))
      {
        uint64_t v20 = *(NSObject **)(GetOsLogContext() + 8);
        BOOL result = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
        if (result)
        {
          LOWORD(v22) = 0;
          unint64_t v15 = "For LSC packets, SoM == EoM Required";
          __int16 v16 = v20;
          uint32_t v17 = 2;
          goto LABEL_28;
        }
      }
      else
      {
        *((_DWORD *)this + 4) = (HIWORD(*(void *)((char *)this + 34)) + 4) & 0x1FFFC;
        if (*((unsigned char *)this + 25))
        {
          if ((v10 & 0x88000) == 0x8000) {
            unsigned int v11 = 1;
          }
          else {
            unsigned int v11 = (v10 >> 21) & 1;
          }
          *((unsigned char *)this + 24) = v11;
          if (!v11) {
            return 1;
          }
        }
        else if (!*((unsigned char *)this + 24))
        {
          return 1;
        }
        uint64_t v12 = (__CFData *)*((void *)this + 1);
        if (v12)
        {
          CFDataAppendBytes(v12, (const UInt8 *)this + 26, 16);
          return 1;
        }
        unsigned int v21 = *(NSObject **)(GetOsLogContext() + 8);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          int v22 = 136315138;
          unsigned int v23 = "appendToRawBytes";
          _os_log_error_impl(&dword_248AFD000, v21, OS_LOG_TYPE_ERROR, "[%s] invalid input data\n", (uint8_t *)&v22, 0xCu);
        }
        int v14 = *(NSObject **)(GetOsLogContext() + 8);
        BOOL result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
        if (result)
        {
          int v22 = 136315138;
          unsigned int v23 = "parseHeader";
          unint64_t v15 = "[%s] Failed to append to raw bytes\n";
          goto LABEL_23;
        }
      }
    }
  }
  else
  {
    int v14 = *(NSObject **)(GetOsLogContext() + 8);
    BOOL result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
    if (result)
    {
      int v22 = 136315138;
      unsigned int v23 = "parseHeader";
      unint64_t v15 = "[LSCACPChunk][%s] invalid input parameter\n";
LABEL_23:
      __int16 v16 = v14;
      uint32_t v17 = 12;
LABEL_28:
      _os_log_error_impl(&dword_248AFD000, v16, OS_LOG_TYPE_ERROR, v15, (uint8_t *)&v22, v17);
      return 0;
    }
  }
  return result;
}

void support::parsers::acp::ParserEngine::create(const void **a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = operator new(0x48uLL);
  unsigned int v7 = dispatch_queue_create("com.apple.acp.ParserEngine", 0);
  v6[1] = 0;
  v6[2] = 0;
  void v6[3] = v7;
  if (v7)
  {
    uint64_t v8 = v7;
    dispatch_retain(v7);
    v6[4] = 0;
    dispatch_release(v8);
  }
  else
  {
    v6[4] = 0;
  }
  void *v6 = &unk_26FCC7818;
  v6[6] = 0;
  v6[7] = 0;
  v6[5] = 0;
  std::shared_ptr<support::parsers::acp::ParserEngine>::shared_ptr[abi:ne180100]<support::parsers::acp::ParserEngine,std::shared_ptr<support::parsers::acp::ParserEngine> ctu::SharedSynchronizable<support::parsers::acp::ParserEngine>::make_shared_ptr<support::parsers::acp::ParserEngine>(support::parsers::acp::ParserEngine*)::{lambda(support::parsers::acp::ParserEngine*)#1},void>(a3, (uint64_t)v6);
  uint64_t v9 = *a3;
  if (*a3)
  {
    if (*a1) {
      uint64_t v10 = _Block_copy(*a1);
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v13 = v10;
    BOOL v11 = support::parsers::acp::ParserEngine::init(v9, &v13, a2);
    if (v10) {
      _Block_release(v10);
    }
    if (!v11)
    {
      uint64_t v12 = (std::__shared_weak_count *)a3[1];
      *a3 = 0;
      a3[1] = 0;
      if (v12)
      {
        if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
  }
}

void sub_248B0C280(_Unwind_Exception *a1)
{
  if (v2) {
    _Block_release(v2);
  }
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

support::parsers::acp::ParserEngine *support::parsers::acp::ParserEngine::ParserEngine(support::parsers::acp::ParserEngine *this)
{
  int v2 = dispatch_queue_create("com.apple.acp.ParserEngine", 0);
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = v2;
  if (v2)
  {
    int v3 = v2;
    dispatch_retain(v2);
    *((void *)this + 4) = 0;
    dispatch_release(v3);
  }
  else
  {
    *((void *)this + 4) = 0;
  }
  *(void *)this = &unk_26FCC7818;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 5) = 0;
  return this;
}

{
  NSObject *v2;
  NSObject *v3;

  int v2 = dispatch_queue_create("com.apple.acp.ParserEngine", 0);
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = v2;
  if (v2)
  {
    int v3 = v2;
    dispatch_retain(v2);
    *((void *)this + 4) = 0;
    dispatch_release(v3);
  }
  else
  {
    *((void *)this + 4) = 0;
  }
  *(void *)this = &unk_26FCC7818;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 5) = 0;
  return this;
}

BOOL support::parsers::acp::ParserEngine::init(uint64_t a1, const void **a2, char a3)
{
  int v3 = *a2;
  if (*a2)
  {
    uint64_t v6 = _Block_copy(*a2);
    unsigned int v7 = *(const void **)(a1 + 56);
    *(void *)(a1 + 56) = v6;
    if (v7) {
      _Block_release(v7);
    }
    *(unsigned char *)(a1 + 64) = a3;
    *(unsigned char *)(a1 + 65) = 0;
  }
  else
  {
    uint64_t v8 = *(NSObject **)(GetOsLogContext() + 8);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_error_impl(&dword_248AFD000, v8, OS_LOG_TYPE_ERROR, "Failed to init parser engine, callback null", v10, 2u);
    }
  }
  return v3 != 0;
}

void support::parsers::acp::ParserEngine::addData(support::parsers::acp::ParserEngine *this, unsigned __int8 *a2, int a3)
{
  v5[0] = this;
  v5[1] = a2;
  int v6 = a3;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN7support7parsers3acp12ParserEngineEE20execute_wrapped_syncIZNS4_7addDataEPhjE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
  block[3] = &__block_descriptor_tmp_0;
  block[4] = (char *)this + 8;
  block[5] = v5;
  unsigned int v4 = (char *)this + 24;
  int v3 = *((void *)this + 3);
  if (*((void *)v4 + 1)) {
    dispatch_async_and_wait(v3, block);
  }
  else {
    dispatch_sync(v3, block);
  }
}

void support::parsers::acp::ParserEngine::~ParserEngine(support::parsers::acp::ParserEngine *this)
{
  *(void *)this = &unk_26FCC7818;
  *((unsigned char *)this + 65) = 1;
  int v2 = (const void *)*((void *)this + 7);
  if (v2) {
    _Block_release(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  unsigned int v4 = *((void *)this + 4);
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = *((void *)this + 3);
  if (v5) {
    dispatch_release(v5);
  }
  int v6 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
}

{
  void *v1;
  uint64_t vars8;

  support::parsers::acp::ParserEngine::~ParserEngine(this);
  operator delete(v1);
}

void support::parsers::acp::SuperFrame::~SuperFrame(support::parsers::acp::SuperFrame *this)
{
  *(void *)this = &unk_26FCC7848;
  int v2 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    *(void *)this = &unk_26FCC77E8;
    int v3 = (const void *)*((void *)this + 1);
    if (!v3) {
      return;
    }
  }
  else
  {
    *(void *)this = &unk_26FCC77E8;
    int v3 = (const void *)*((void *)this + 1);
    if (!v3) {
      return;
    }
  }
  CFRelease(v3);
  *((void *)this + 1) = 0;
}

{
  std::__shared_weak_count *v2;
  const void *v3;
  uint64_t vars8;

  *(void *)this = &unk_26FCC7848;
  int v2 = (std::__shared_weak_count *)*((void *)this + 8);
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    *(void *)this = &unk_26FCC77E8;
    int v3 = (const void *)*((void *)this + 1);
    if (!v3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  *(void *)this = &unk_26FCC77E8;
  int v3 = (const void *)*((void *)this + 1);
  if (v3) {
LABEL_4:
  }
    CFRelease(v3);
LABEL_5:
  operator delete(this);
}

void support::parsers::acp::BaseACPChunk::~BaseACPChunk(support::parsers::acp::BaseACPChunk *this)
{
  *(void *)this = &unk_26FCC77E8;
  int v2 = (const void *)*((void *)this + 1);
  if (v2)
  {
    CFRelease(v2);
    *((void *)this + 1) = 0;
  }
}

{
  const void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26FCC77E8;
  int v2 = (const void *)*((void *)this + 1);
  if (v2) {
    CFRelease(v2);
  }
  operator delete(this);
}

void std::__shared_ptr_pointer<support::parsers::acp::SuperFrame *,std::shared_ptr<support::parsers::acp::SuperFrame>::__shared_ptr_default_delete<support::parsers::acp::SuperFrame,support::parsers::acp::SuperFrame>,std::allocator<support::parsers::acp::SuperFrame>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<support::parsers::acp::SuperFrame *,std::shared_ptr<support::parsers::acp::SuperFrame>::__shared_ptr_default_delete<support::parsers::acp::SuperFrame,support::parsers::acp::SuperFrame>,std::allocator<support::parsers::acp::SuperFrame>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<support::parsers::acp::SuperFrame *,std::shared_ptr<support::parsers::acp::SuperFrame>::__shared_ptr_default_delete<support::parsers::acp::SuperFrame,support::parsers::acp::SuperFrame>,std::allocator<support::parsers::acp::SuperFrame>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000248B4A1F1) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000248B4A1F1 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000248B4A1F1)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000248B4A1F1 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::__shared_ptr_pointer<support::parsers::acp::BaseACPChunk *,std::shared_ptr<support::parsers::acp::BaseACPChunk>::__shared_ptr_default_delete<support::parsers::acp::BaseACPChunk,support::parsers::acp::BaseACPChunk>,std::allocator<support::parsers::acp::BaseACPChunk>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<support::parsers::acp::BaseACPChunk *,std::shared_ptr<support::parsers::acp::BaseACPChunk>::__shared_ptr_default_delete<support::parsers::acp::BaseACPChunk,support::parsers::acp::BaseACPChunk>,std::allocator<support::parsers::acp::BaseACPChunk>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<support::parsers::acp::BaseACPChunk *,std::shared_ptr<support::parsers::acp::BaseACPChunk>::__shared_ptr_default_delete<support::parsers::acp::BaseACPChunk,support::parsers::acp::BaseACPChunk>,std::allocator<support::parsers::acp::BaseACPChunk>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000248B4A2E2) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000248B4A2E2 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000248B4A2E2)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000248B4A2E2 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::__shared_ptr_pointer<support::parsers::acp::LSCACPChunk *,std::shared_ptr<support::parsers::acp::LSCACPChunk>::__shared_ptr_default_delete<support::parsers::acp::LSCACPChunk,support::parsers::acp::LSCACPChunk>,std::allocator<support::parsers::acp::LSCACPChunk>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<support::parsers::acp::LSCACPChunk *,std::shared_ptr<support::parsers::acp::LSCACPChunk>::__shared_ptr_default_delete<support::parsers::acp::LSCACPChunk,support::parsers::acp::LSCACPChunk>,std::allocator<support::parsers::acp::LSCACPChunk>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<support::parsers::acp::LSCACPChunk *,std::shared_ptr<support::parsers::acp::LSCACPChunk>::__shared_ptr_default_delete<support::parsers::acp::LSCACPChunk,support::parsers::acp::LSCACPChunk>,std::allocator<support::parsers::acp::LSCACPChunk>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000248B4A3D4) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000248B4A3D4 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000248B4A3D4)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000248B4A3D4 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void *std::shared_ptr<support::parsers::acp::ParserEngine>::shared_ptr[abi:ne180100]<support::parsers::acp::ParserEngine,std::shared_ptr<support::parsers::acp::ParserEngine> ctu::SharedSynchronizable<support::parsers::acp::ParserEngine>::make_shared_ptr<support::parsers::acp::ParserEngine>(support::parsers::acp::ParserEngine*)::{lambda(support::parsers::acp::ParserEngine*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  unsigned int v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FCC7AC0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  int v6 = *(std::__shared_weak_count **)(a2 + 16);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 8) = a2;
      *(void *)(a2 + 16) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 8) = a2;
  *(void *)(a2 + 16) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_248B0CC20(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<support::parsers::acp::ParserEngine> ctu::SharedSynchronizable<support::parsers::acp::ParserEngine>::make_shared_ptr<support::parsers::acp::ParserEngine>(support::parsers::acp::ParserEngine*)::{lambda(support::parsers::acp::ParserEngine*)#1}::operator() const(support::parsers::acp::ParserEngine*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_248B0CC48(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<support::parsers::acp::ParserEngine *,std::shared_ptr<support::parsers::acp::ParserEngine> ctu::SharedSynchronizable<support::parsers::acp::ParserEngine>::make_shared_ptr<support::parsers::acp::ParserEngine>(support::parsers::acp::ParserEngine*)::{lambda(support::parsers::acp::ParserEngine *)#1},std::allocator<support::parsers::acp::ParserEngine>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<support::parsers::acp::ParserEngine *,std::shared_ptr<support::parsers::acp::ParserEngine> ctu::SharedSynchronizable<support::parsers::acp::ParserEngine>::make_shared_ptr<support::parsers::acp::ParserEngine>(support::parsers::acp::ParserEngine*)::{lambda(support::parsers::acp::ParserEngine *)#1},std::allocator<support::parsers::acp::ParserEngine>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<support::parsers::acp::ParserEngine *,std::shared_ptr<support::parsers::acp::ParserEngine> ctu::SharedSynchronizable<support::parsers::acp::ParserEngine>::make_shared_ptr<support::parsers::acp::ParserEngine>(support::parsers::acp::ParserEngine*)::{lambda(support::parsers::acp::ParserEngine *)#1},std::allocator<support::parsers::acp::ParserEngine>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN7support7parsers3acp12ParserEngineEE15make_shared_ptrIS4_EENSt3__110s"
                     "hared_ptrIT_EEPS9_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN7support7parsers3acp12ParserEngineEE15make_shared_ptrIS4_E"
                                "ENSt3__110shared_ptrIT_EEPS9_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN7support7parsers3acp12ParserEngineEE15make_shared_ptrIS4_EENSt3__110shared_ptrIT_EEPS9_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN7support7parsers3acp12ParserEngineEE15make_shared_ptrIS4_EENSt3__110shared_ptrIT_EEPS9_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<support::parsers::acp::ParserEngine> ctu::SharedSynchronizable<support::parsers::acp::ParserEngine>::make_shared_ptr<support::parsers::acp::ParserEngine>(support::parsers::acp::ParserEngine*)::{lambda(support::parsers::acp::ParserEngine*)#1}::operator() const(support::parsers::acp::ParserEngine*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ___ZNK3ctu20SharedSynchronizableIN7support7parsers3acp12ParserEngineEE20execute_wrapped_syncIZNS4_7addDataEPhjE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  if (!*(unsigned char *)(*v1 + 65))
  {
    unsigned int v4 = (support::parsers::acp::SuperFrame **)(v2 + 40);
    unint64_t v3 = *(support::parsers::acp::SuperFrame **)(v2 + 40);
    if (v3) {
      goto LABEL_11;
    }
    support::parsers::acp::SuperFrame::create((support::parsers::acp::SuperFrame *)*(unsigned __int8 *)(v2 + 64), &v13);
    long long v5 = v13;
    long long v13 = 0uLL;
    int v6 = *(std::__shared_weak_count **)(v2 + 48);
    *(_OWORD *)(v2 + 40) = v5;
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    unsigned int v7 = (std::__shared_weak_count *)*((void *)&v13 + 1);
    if (*((void *)&v13 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    unint64_t v3 = *v4;
    if (*v4)
    {
LABEL_11:
      if (support::parsers::acp::SuperFrame::processData(v3, (unsigned __int8 *)v1[1], *((unsigned int *)v1 + 4)))
      {
        if (*((_DWORD *)*v4 + 13) != 3) {
          return;
        }
        uint64_t v8 = *(void *)(v2 + 56);
        if (!v8) {
          return;
        }
        uint64_t v9 = *(void *)(v2 + 48);
        *(void *)&long long v13 = *v4;
        *((void *)&v13 + 1) = v9;
        std::__shared_weak_count *v4 = 0;
        *(void *)(v2 + 48) = 0;
        (*(void (**)(uint64_t, long long *))(v8 + 16))(v8, &v13);
        uint64_t v10 = (std::__shared_weak_count *)*((void *)&v13 + 1);
        if (!*((void *)&v13 + 1)) {
          return;
        }
      }
      else
      {
        BOOL v11 = *(NSObject **)(GetOsLogContext() + 8);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v13) = 0;
          _os_log_error_impl(&dword_248AFD000, v11, OS_LOG_TYPE_ERROR, "Failed to process data", (uint8_t *)&v13, 2u);
          uint64_t v10 = *(std::__shared_weak_count **)(v2 + 48);
          *(void *)(v2 + 40) = 0;
          *(void *)(v2 + 48) = 0;
          if (!v10) {
            return;
          }
        }
        else
        {
          uint64_t v10 = *(std::__shared_weak_count **)(v2 + 48);
          *(void *)(v2 + 40) = 0;
          *(void *)(v2 + 48) = 0;
          if (!v10) {
            return;
          }
        }
      }
      if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
      return;
    }
    uint64_t v12 = *(NSObject **)(GetOsLogContext() + 8);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v13) = 0;
      _os_log_error_impl(&dword_248AFD000, v12, OS_LOG_TYPE_ERROR, "Failed to create SuperFrame", (uint8_t *)&v13, 2u);
    }
  }
}

void sub_248B0CF90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t support::fs::toString@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if (result == 1)
  {
    a2[23] = 9;
    strcpy(a2, "_wireless");
  }
  else if (result)
  {
    a2[23] = 0;
    *a2 = 0;
  }
  else
  {
    a2[23] = 6;
    strcpy(a2, "mobile");
  }
  return result;
}

uint64_t support::fs::updateOwner(const char *a1, uint64_t a2, uint64_t a3)
{
  long long v5 = a1;
  v6.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v6.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&__dst.st_blkstd::string::size_type size = v6;
  *(timespec *)__dst.st_qspare = v6;
  __dst.st_birthtimespec = v6;
  *(timespec *)&__dst.st_std::string::size_type size = v6;
  __dst.st_mtimespec = v6;
  __dst.st_ctimespec = v6;
  *(timespec *)&__dst.st_uid = v6;
  __dst.st_atimespec = v6;
  *(timespec *)&__dst.st_dev = v6;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (!stat(a1, &__dst))
  {
    uint32_t v17 = v5[23] >= 0 ? v5 : *(const char **)v5;
    __int16 v18 = opendir(v17);
    if (v18)
    {
      int v19 = v18;
      uint64_t v20 = readdir(v18);
      closedir(v19);
      if (v20)
      {
        unint64_t v59 = 0;
        unint64_t v60 = 0;
        uint64_t v61 = 0;
        support::fs::readDir(v5, (uint64_t)&v59);
        unsigned int v21 = (char *)v59;
        __int16 v55 = v60;
        if (v59 == v60)
        {
          uint64_t updated = 0;
          if (v59) {
            goto LABEL_106;
          }
          return updated;
        }
        int v22 = (const std::string::value_type **)((char *)v59 + 24);
        while (1)
        {
          memset(&v58, 170, sizeof(v58));
          if (*((char *)v22 - 1) < 0)
          {
            std::string::__init_copy_ctor_external(&v58, *(v22 - 3), (std::string::size_type)*(v22 - 2));
          }
          else
          {
            long long v24 = *(_OWORD *)(v22 - 3);
            v58.__r_.__value_.__r.__words[2] = (std::string::size_type)*(v22 - 1);
            *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v24;
          }
          memset(&__p, 170, sizeof(__p));
          int v25 = v5[23];
          if (v25 >= 0) {
            size_t v26 = *((unsigned __int8 *)v5 + 23);
          }
          else {
            size_t v26 = *((void *)v5 + 1);
          }
          unint64_t v27 = v26 + 1;
          memset(&__dst, 170, 24);
          if (v26 + 1 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          if (v27 >= 0x17)
          {
            uint64_t v29 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v27 | 7) != 0x17) {
              uint64_t v29 = v27 | 7;
            }
            uint64_t v30 = v29 + 1;
            p_dst = (char *)operator new(v29 + 1);
            __dst.st_ino = v26 + 1;
            *(void *)&__dst.st_uid = v30 | 0x8000000000000000;
            *(void *)&__dst.st_dev = p_dst;
          }
          else
          {
            memset(&__dst, 0, 24);
            p_dst = (char *)&__dst;
            HIBYTE(__dst.st_gid) = v26 + 1;
            if (!v26) {
              goto LABEL_47;
            }
          }
          if (v25 >= 0) {
            int v31 = v5;
          }
          else {
            int v31 = *(const char **)v5;
          }
          memmove(p_dst, v31, v26);
LABEL_47:
          *(_WORD *)&p_dst[v26] = 47;
          if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unsigned int v32 = &v58;
          }
          else {
            unsigned int v32 = (std::string *)v58.__r_.__value_.__r.__words[0];
          }
          if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v58.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v58.__r_.__value_.__l.__size_;
          }
          __int16 v34 = std::string::append((std::string *)&__dst, (const std::string::value_type *)v32, size);
          long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v35;
          v34->__r_.__value_.__l.__size_ = 0;
          v34->__r_.__value_.__r.__words[2] = 0;
          v34->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__dst.st_gid) < 0)
          {
            operator delete(*(void **)&__dst.st_dev);
            int v36 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
            if ((*((unsigned char *)&v58.__r_.__value_.__s + 23) & 0x80) == 0)
            {
LABEL_55:
              if (v36 == 1)
              {
                if (v58.__r_.__value_.__s.__data_[0] == 46) {
                  goto LABEL_71;
                }
              }
              else if (v36 == 2 && LOWORD(v58.__r_.__value_.__l.__data_) == 11822)
              {
                goto LABEL_71;
              }
              goto LABEL_67;
            }
          }
          else
          {
            int v36 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
            if ((*((unsigned char *)&v58.__r_.__value_.__s + 23) & 0x80) == 0) {
              goto LABEL_55;
            }
          }
          if (v58.__r_.__value_.__l.__size_ == 1)
          {
            if (*v58.__r_.__value_.__l.__data_ == 46) {
              goto LABEL_71;
            }
          }
          else if (v58.__r_.__value_.__l.__size_ == 2 && *(_WORD *)v58.__r_.__value_.__l.__data_ == 11822)
          {
            goto LABEL_71;
          }
LABEL_67:
          v37.tv_sec = 0xAAAAAAAAAAAAAAAALL;
          v37.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
          *(timespec *)&__dst.st_blkstd::string::size_type size = v37;
          *(timespec *)__dst.st_qspare = v37;
          __dst.st_birthtimespec = v37;
          *(timespec *)&__dst.st_std::string::size_type size = v37;
          __dst.st_mtimespec = v37;
          __dst.st_ctimespec = v37;
          *(timespec *)&__dst.st_uid = v37;
          __dst.st_atimespec = v37;
          *(timespec *)&__dst.st_dev = v37;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if (stat((const char *)p_p, &__dst)
            || ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? (int v49 = &__p)
              : (int v49 = (std::string *)__p.__r_.__value_.__r.__words[0]),
                (v50 = opendir((const char *)v49), (int v51 = v50) == 0) || (v52 = readdir(v50), closedir(v51), !v52)))
          {
LABEL_71:
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v39 = &__p;
            }
            else {
              int v39 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            size_t v40 = strlen((const char *)v39);
            if (v40 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            __darwin_ino64_t v41 = v40;
            if (v40 >= 0x17)
            {
              uint64_t v43 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v40 | 7) != 0x17) {
                uint64_t v43 = v40 | 7;
              }
              uint64_t v44 = v43 + 1;
              uint64_t v42 = operator new(v43 + 1);
              __dst.st_ino = v41;
              *(void *)&__dst.st_uid = v44 | 0x8000000000000000;
              *(void *)&__dst.st_dev = v42;
            }
            else
            {
              HIBYTE(__dst.st_gid) = v40;
              uint64_t v42 = &__dst;
              if (!v40)
              {
LABEL_82:
                v42[v41] = 0;
                int st_gid_high = SHIBYTE(__dst.st_gid);
                uint64_t v46 = *(void **)&__dst.st_dev;
                if ((__dst.st_gid & 0x80000000) == 0) {
                  int v47 = &__dst;
                }
                else {
                  int v47 = *(stat **)&__dst.st_dev;
                }
                uint64_t updated = chown((const char *)v47, a2, a3) == 0;
                if (st_gid_high < 0)
                {
                  int v48 = v46;
LABEL_87:
                  operator delete(v48);
                  goto LABEL_88;
                }
                goto LABEL_88;
              }
            }
            memmove(v42, v39, v41);
            goto LABEL_82;
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v56, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else {
            std::string v56 = __p;
          }
          uint64_t updated = support::fs::updateOwner(&v56, a2, a3);
          if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
          {
            int v48 = (void *)v56.__r_.__value_.__r.__words[0];
            goto LABEL_87;
          }
LABEL_88:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
LABEL_92:
            }
              operator delete(v58.__r_.__value_.__l.__data_);
          }
          else if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
          {
            goto LABEL_92;
          }
          if (v22 == (const std::string::value_type **)v55) {
            char v23 = 0;
          }
          else {
            char v23 = updated;
          }
          v22 += 3;
          if ((v23 & 1) == 0)
          {
            unsigned int v21 = (char *)v59;
            if (!v59) {
              return updated;
            }
LABEL_106:
            __int16 v53 = (void **)v60;
            __int16 v16 = v21;
            if (v60 != v21)
            {
              do
              {
                if (*((char *)v53 - 1) < 0) {
                  operator delete(*(v53 - 3));
                }
                v53 -= 3;
              }
              while (v53 != (void **)v21);
              __int16 v16 = v59;
            }
            unint64_t v60 = v21;
LABEL_113:
            operator delete(v16);
            return updated;
          }
        }
      }
    }
  }
  if (v5[23] < 0) {
    long long v5 = *(const char **)v5;
  }
  size_t v7 = strlen(v5);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  __darwin_ino64_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    uint64_t v9 = operator new(v10 + 1);
    __dst.st_ino = v8;
    *(void *)&__dst.st_uid = v11 | 0x8000000000000000;
    *(void *)&__dst.st_dev = v9;
    goto LABEL_13;
  }
  HIBYTE(__dst.st_gid) = v7;
  uint64_t v9 = &__dst;
  if (v7) {
LABEL_13:
  }
    memmove(v9, v5, v8);
  *((unsigned char *)v9 + v8) = 0;
  int v12 = SHIBYTE(__dst.st_gid);
  long long v13 = *(void **)&__dst.st_dev;
  if ((__dst.st_gid & 0x80000000) == 0) {
    int v14 = &__dst;
  }
  else {
    int v14 = *(stat **)&__dst.st_dev;
  }
  uint64_t updated = chown((const char *)v14, a2, a3) == 0;
  if (v12 < 0)
  {
    __int16 v16 = v13;
    goto LABEL_113;
  }
  return updated;
}

void sub_248B0D5C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31)
{
}

void sub_248B0D5F4()
{
}

DIR *support::fs::isDir(const char *a1)
{
  uint64_t v1 = a1;
  v2.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v2.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v7.st_blkstd::string::size_type size = v2;
  *(timespec *)v7.st_qspare = v2;
  v7.st_birthtimespec = v2;
  *(timespec *)&v7.st_std::string::size_type size = v2;
  v7.st_mtimespec = v2;
  v7.st_ctimespec = v2;
  *(timespec *)&v7.st_uid = v2;
  v7.st_atimespec = v2;
  *(timespec *)&v7.st_dev = v2;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (stat(a1, &v7)) {
    return 0;
  }
  if (v1[23] >= 0) {
    unsigned int v4 = v1;
  }
  else {
    unsigned int v4 = *(const char **)v1;
  }
  uint64_t result = opendir(v4);
  if (result)
  {
    long long v5 = result;
    timespec v6 = readdir(result);
    closedir(v5);
    return (DIR *)(v6 != 0);
  }
  return result;
}

BOOL support::fs::chown(const char *a1, uid_t a2, gid_t a3)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  return chown(a1, a2, a3) == 0;
}

DIR *support::fs::readDir(const char *a1, uint64_t a2)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  uint64_t result = opendir(a1);
  if (result)
  {
    unsigned int v4 = result;
    long long v5 = readdir(result);
    if (v5)
    {
      timespec v6 = v5;
      do
      {
        memset(__dst, 170, sizeof(__dst));
        size_t d_namlen = v6->d_namlen;
        if (d_namlen >= 0x17)
        {
          if ((d_namlen | 7) == 0x17) {
            uint64_t v11 = ((unsigned __int16)d_namlen & 0xFFF8) + 8;
          }
          else {
            uint64_t v11 = d_namlen | 7;
          }
          __darwin_ino64_t v8 = operator new(v11 + 1);
          *(void *)&__dst[8] = d_namlen;
          *(void *)&__dst[16] = v11 - 0x7FFFFFFFFFFFFFFFLL;
          *(void *)stat __dst = v8;
        }
        else
        {
          __dst[23] = v6->d_namlen;
          __darwin_ino64_t v8 = __dst;
          if (!d_namlen)
          {
            __dst[d_namlen] = 0;
            uint64_t v9 = *(std::string **)(a2 + 8);
            if ((unint64_t)v9 < *(void *)(a2 + 16)) {
              goto LABEL_10;
            }
            goto LABEL_17;
          }
        }
        memmove(v8, v6->d_name, d_namlen);
        v8[d_namlen] = 0;
        uint64_t v9 = *(std::string **)(a2 + 8);
        if ((unint64_t)v9 < *(void *)(a2 + 16))
        {
LABEL_10:
          if ((__dst[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)__dst, *(std::string::size_type *)&__dst[8]);
          }
          else
          {
            long long v10 = *(_OWORD *)__dst;
            v9->__r_.__value_.__r.__words[2] = *(void *)&__dst[16];
            *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
          }
          *(void *)(a2 + 8) = v9 + 1;
          *(void *)(a2 + 8) = v9 + 1;
          if ((__dst[23] & 0x80000000) == 0) {
            goto LABEL_6;
          }
LABEL_21:
          operator delete(*(void **)__dst);
          goto LABEL_6;
        }
LABEL_17:
        *(void *)(a2 + 8) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a2, (uint64_t)__dst);
        if ((__dst[23] & 0x80000000) != 0) {
          goto LABEL_21;
        }
LABEL_6:
        timespec v6 = readdir(v4);
      }
      while (v6);
    }
    return (DIR *)closedir(v4);
  }
  return result;
}

void sub_248B0D894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v15 + 8) = v16;
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void **std::vector<std::string>::~vector[abi:ne180100](void **a1)
{
  timespec v2 = (void **)*a1;
  if (*a1)
  {
    unint64_t v3 = (void **)a1[1];
    unsigned int v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*(v3 - 3));
        }
        v3 -= 3;
      }
      while (v3 != v2);
      unsigned int v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t support::fs::getUidGid(int a1, uid_t *a2, gid_t *a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  memset(__p, 170, sizeof(__p));
  if (a1 == 1)
  {
    HIBYTE(__p[2]) = 9;
    strcpy((char *)__p, "_wireless");
    long long v5 = getpwnam((const char *)__p);
    if (v5) {
      goto LABEL_4;
    }
LABEL_6:
    stat v7 = *(NSObject **)(GetOsLogContext() + 8);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)fd_set buf = 136315138;
      long long v10 = __p;
      _os_log_error_impl(&dword_248AFD000, v7, OS_LOG_TYPE_ERROR, "Getting uid and gid: failed to get passwd for %s", buf, 0xCu);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
    }
    return 0;
  }
  if (!a1)
  {
    HIBYTE(__p[2]) = 6;
    strcpy((char *)__p, "mobile");
    long long v5 = getpwnam((const char *)__p);
    if (v5)
    {
LABEL_4:
      *a2 = v5->pw_uid;
      *a3 = v5->pw_gid;
      return 1;
    }
    goto LABEL_6;
  }
  return 0;
}

BOOL support::fs::writeToCompletion(support::fs *this, char *__buf, size_t __nbyte)
{
  int v4 = (int)this;
  do
  {
    size_t v5 = __nbyte;
    if (!__nbyte) {
      break;
    }
    ssize_t v6 = write(v4, __buf, __nbyte);
    __nbyte = v5 - v6;
    __buf += v6;
  }
  while ((v6 & 0x8000000000000000) == 0);
  return v5 == 0;
}

BOOL support::fs::writeToCompletion(FILE *__stream, __sFILE *__ptr, size_t __nitems)
{
  while (1)
  {
    size_t v5 = __nitems;
    if (!__nitems) {
      break;
    }
    size_t v6 = fwrite(__ptr, 1uLL, __nitems, __stream);
    __nitems = v5 - v6;
    __ptr = (__sFILE *)((char *)__ptr + v6);
    if (!v6) {
      return v5 == 0;
    }
  }
  fflush(__stream);
  return 1;
}

uint64_t support::fs::openFile(const char *a1, int a2, unsigned int a3)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  return open(a1, a2, a3);
}

BOOL support::fs::closeFile(support::fs *this)
{
  int v1 = (int)this;
  do
    int v2 = close(v1);
  while (v2 && *__error() == 4);
  return v2 == 0;
}

BOOL support::fs::copyFile(const char *a1, const char *a2, int a3)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  if (a1[23] >= 0) {
    size_t v6 = a1;
  }
  else {
    size_t v6 = *(const char **)a1;
  }
  size_t v7 = strlen(v6);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    uint64_t v9 = operator new(v10 + 1);
    *(void *)&__dst[8] = v8;
    *(void *)&__dst[16] = v11 | 0x8000000000000000;
    *(void *)stat __dst = v9;
    goto LABEL_11;
  }
  __dst[23] = v7;
  uint64_t v9 = __dst;
  if (v7) {
LABEL_11:
  }
    memmove(v9, v6, v8);
  v9[v8] = 0;
  if (__dst[23] >= 0) {
    int v12 = __dst;
  }
  else {
    int v12 = *(const char **)__dst;
  }
  int v13 = open(v12, 0, 420);
  int v14 = v13;
  if ((__dst[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__dst);
    if ((v14 & 0x80000000) == 0)
    {
LABEL_17:
      if (a2[23] >= 0) {
        uint64_t v15 = a2;
      }
      else {
        uint64_t v15 = *(const char **)a2;
      }
      size_t v16 = strlen(v15);
      if (v16 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v17 = v16;
      if (v16 >= 0x17)
      {
        uint64_t v21 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17) {
          uint64_t v21 = v16 | 7;
        }
        uint64_t v22 = v21 + 1;
        __int16 v18 = operator new(v21 + 1);
        *(void *)&__dst[8] = v17;
        *(void *)&__dst[16] = v22 | 0x8000000000000000;
        *(void *)stat __dst = v18;
      }
      else
      {
        __dst[23] = v16;
        __int16 v18 = __dst;
        if (!v16)
        {
LABEL_31:
          v18[v17] = 0;
          if (__dst[23] >= 0) {
            char v23 = __dst;
          }
          else {
            char v23 = *(const char **)__dst;
          }
          int v24 = open(v23, 1541, 420);
          int v25 = v24;
          if ((__dst[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)__dst);
            if ((v25 & 0x80000000) == 0) {
              goto LABEL_36;
            }
          }
          else if ((v24 & 0x80000000) == 0)
          {
LABEL_36:
            memset(__dst, 170, sizeof(__dst));
            ssize_t v26 = read(v14, __dst, 0x400uLL);
            if (v26 < 1)
            {
LABEL_42:
              BOOL v20 = v26 == 0;
              if (!v26 && a3)
              {
                *(void *)&long long v29 = 0xAAAAAAAAAAAAAAAALL;
                *((void *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
                *(_OWORD *)&__dst[112] = v29;
                *(_OWORD *)&__dst[128] = v29;
                *(_OWORD *)&__dst[80] = v29;
                *(_OWORD *)&__dst[96] = v29;
                *(_OWORD *)&__dst[48] = v29;
                *(_OWORD *)&__dst[64] = v29;
                *(_OWORD *)&__dst[16] = v29;
                *(_OWORD *)&__dst[32] = v29;
                *(_OWORD *)stat __dst = v29;
                if (fstat(v14, (stat *)__dst)) {
                  BOOL v20 = 0;
                }
                else {
                  BOOL v20 = fchmod(v25, *(mode_t *)&__dst[4]) == 0;
                }
              }
            }
            else
            {
              unint64_t v27 = __dst;
              do
              {
                while (!v26)
                {
                  memset(__dst, 170, sizeof(__dst));
                  ssize_t v26 = read(v14, __dst, 0x400uLL);
                  unint64_t v27 = __dst;
                  if (v26 <= 0) {
                    goto LABEL_42;
                  }
                }
                ssize_t v28 = write(v25, v27, v26);
                v26 -= v28;
                v27 += v28;
              }
              while ((v28 & 0x8000000000000000) == 0);
              BOOL v20 = 0;
            }
            while (close(v25) && *__error() == 4)
              ;
            goto LABEL_52;
          }
          uint64_t v30 = *(NSObject **)(GetOsLogContext() + 8);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
          {
            if (a2[23] >= 0) {
              unsigned int v33 = a2;
            }
            else {
              unsigned int v33 = *(const char **)a2;
            }
            *(_DWORD *)stat __dst = 136315138;
            *(void *)&__dst[4] = v33;
            _os_log_error_impl(&dword_248AFD000, v30, OS_LOG_TYPE_ERROR, "Failed to open the destination file(%s)", __dst, 0xCu);
          }
          BOOL v20 = 0;
LABEL_52:
          while (close(v14) && *__error() == 4)
            ;
          return v20;
        }
      }
      memmove(v18, v15, v17);
      goto LABEL_31;
    }
  }
  else if ((v13 & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  int v19 = *(NSObject **)(GetOsLogContext() + 8);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    if (a1[23] >= 0) {
      unsigned int v32 = a1;
    }
    else {
      unsigned int v32 = *(const char **)a1;
    }
    *(_DWORD *)stat __dst = 136315138;
    *(void *)&__dst[4] = v32;
    _os_log_error_impl(&dword_248AFD000, v19, OS_LOG_TYPE_ERROR, "Failed to open the source file(%s)", __dst, 0xCu);
  }
  return 0;
}

void sub_248B0DFD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL support::fs::loadFile(uint64_t a1, uint64_t a2)
{
  __b[89] = *MEMORY[0x263EF8340];
  memset(__b, 170, 0x240uLL);
  std::ifstream::basic_ifstream(__b);
  if (!__b[17]
    || (std::istream::tellg(), std::istream::seekg(), std::istream::tellg(), unint64_t v3 = __b[88], std::istream::seekg(), !v3)
    || *(_DWORD *)((char *)&__b[4] + *(void *)(__b[0] - 24)))
  {
    BOOL v4 = 0;
    goto LABEL_5;
  }
  size_t v7 = *(char **)a2;
  size_t v6 = *(char **)(a2 + 8);
  unint64_t v8 = (unint64_t)&v6[-*(void *)a2];
  unint64_t v9 = v3 - v8;
  if (v3 <= v8)
  {
    if (v3 < v8) {
      *(void *)(a2 + 8) = &v7[v3];
    }
    goto LABEL_36;
  }
  uint64_t v10 = *(void *)(a2 + 16);
  if (v10 - (uint64_t)v6 < v9)
  {
    if ((v3 & 0x8000000000000000) != 0) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v10 - (void)v7;
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= v3) {
      uint64_t v12 = v3;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v13 = v12;
    }
    int v14 = (char *)operator new(v13);
    uint64_t v15 = &v14[v8];
    size_t v16 = &v14[v13];
    bzero(&v14[v8], v3 - v8);
    if (v6 == v7) {
      goto LABEL_34;
    }
    if (v8 >= 8 && (unint64_t)(v7 - v14) >= 0x20)
    {
      if (v8 < 0x20)
      {
        unint64_t v17 = 0;
        goto LABEL_26;
      }
      unint64_t v17 = v8 & 0xFFFFFFFFFFFFFFE0;
      __int16 v18 = v6 - 16;
      int v19 = &v14[v6 - 16 - v7];
      unint64_t v20 = v8 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v21 = *(_OWORD *)v18;
        *((_OWORD *)v19 - 1) = *((_OWORD *)v18 - 1);
        *(_OWORD *)int v19 = v21;
        v19 -= 32;
        v18 -= 32;
        v20 -= 32;
      }
      while (v20);
      if (v8 == v17) {
        goto LABEL_33;
      }
      if ((v8 & 0x18) != 0)
      {
LABEL_26:
        v15 -= v8 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v22 = &v6[-v17 - 8];
        char v23 = (char *)(v22 - v7);
        unint64_t v24 = v17 - (v8 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v25 = *(void *)v22;
          v22 -= 8;
          *(void *)&v23[(void)v14] = v25;
          v23 -= 8;
          v24 += 8;
        }
        while (v24);
        v6 -= v8 & 0xFFFFFFFFFFFFFFF8;
        if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_33;
        }
        goto LABEL_31;
      }
      v15 -= v17;
      v6 -= v17;
    }
LABEL_31:
    ssize_t v26 = v15 - 1;
    do
    {
      char v27 = *--v6;
      *v26-- = v27;
    }
    while (v6 != v7);
LABEL_33:
    size_t v6 = v7;
    uint64_t v15 = v14;
LABEL_34:
    *(void *)a2 = v15;
    *(void *)(a2 + 8) = &v14[v3];
    *(void *)(a2 + 16) = v16;
    if (v6) {
      operator delete(v6);
    }
    goto LABEL_36;
  }
  bzero(*(void **)(a2 + 8), v3 - v8);
  *(void *)(a2 + 8) = &v6[v9];
LABEL_36:
  std::istream::read();
  BOOL v4 = __b[1] == (int)v3;
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)__b + *(void *)(__b[0] - 24)), *(_DWORD *)((char *)&__b[4] + *(void *)(__b[0] - 24)) | 4);
  }
LABEL_5:
  __b[0] = *MEMORY[0x263F8C2A8];
  *(uint64_t *)((char *)__b + *(void *)(__b[0] - 24)) = *(void *)(MEMORY[0x263F8C2A8] + 24);
  MEMORY[0x24C58B340](&__b[2]);
  std::istream::~istream();
  MEMORY[0x24C58B5B0](&__b[53]);
  return v4;
}

void sub_248B0E3A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ifstream::~ifstream((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::ifstream::basic_ifstream(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x263F8C308] + 64;
  a1[53] = MEMORY[0x263F8C308] + 64;
  unint64_t v3 = a1 + 2;
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2A8] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2A8] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  a1[1] = 0;
  size_t v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 2);
  uint64_t v7 = MEMORY[0x263F8C308] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[53] = v2;
  MEMORY[0x24C58B330](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_248B0E54C(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x24C58B5B0](v1);
  _Unwind_Resume(a1);
}

BOOL support::fs::getFileSize(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 136);
  if (v2)
  {
    std::istream::tellg();
    std::istream::seekg();
    std::istream::tellg();
    *a2 = v5;
    std::istream::seekg();
  }
  return v2 != 0;
}

{
  uint64_t v2;
  BOOL v4;
  uint64_t v6[90];

  v6[89] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(unsigned __int8 *)(a1 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a1 + 8);
  }
  if (!v2) {
    return 0;
  }
  memset(v6, 170, 0x240uLL);
  std::ifstream::basic_ifstream(v6);
  uint64_t v4 = v6[17] != 0;
  if (v6[17])
  {
    std::istream::tellg();
    std::istream::seekg();
    std::istream::tellg();
    *a2 = v6[88];
    std::istream::seekg();
    if (!std::filebuf::close()) {
      std::ios_base::clear((std::ios_base *)((char *)v6 + *(void *)(v6[0] - 24)), *(_DWORD *)((char *)&v6[4] + *(void *)(v6[0] - 24)) | 4);
    }
  }
  v6[0] = *MEMORY[0x263F8C2A8];
  *(uint64_t *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x263F8C2A8] + 24);
  MEMORY[0x24C58B340](&v6[2]);
  std::istream::~istream();
  MEMORY[0x24C58B5B0](&v6[53]);
  return v4;
}

void *std::ifstream::~ifstream(void *a1)
{
  uint64_t v2 = MEMORY[0x263F8C2A8];
  uint64_t v3 = *MEMORY[0x263F8C2A8];
  *a1 = *MEMORY[0x263F8C2A8];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x24C58B340](a1 + 2);
  std::istream::~istream();
  MEMORY[0x24C58B5B0](a1 + 53);
  return a1;
}

uint64_t support::fs::loadFile(const char *a1, uint64_t a2)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  uint64_t v3 = fopen(a1, "rb");
  if (v3)
  {
    uint64_t v4 = v3;
    fseek(v3, 0, 2);
    unint64_t v5 = MEMORY[0x24C58BA40](v4);
    if (v5 != -1)
    {
      size_t v6 = v5;
      unint64_t v8 = *(char **)a2;
      uint64_t v7 = *(char **)(a2 + 8);
      unint64_t v9 = (unint64_t)&v7[-*(void *)a2];
      size_t v10 = v5 - v9;
      if (v5 <= v9)
      {
        if (v5 < v9) {
          *(void *)(a2 + 8) = &v8[v5];
        }
        goto LABEL_36;
      }
      uint64_t v11 = *(void *)(a2 + 16);
      if (v11 - (uint64_t)v7 >= v10)
      {
        bzero(*(void **)(a2 + 8), v10);
        *(void *)(a2 + 8) = &v7[v10];
LABEL_36:
        rewind(v4);
        uint64_t v30 = *(char **)a2;
        uint64_t v19 = 1;
        fread(v30, v6, 1uLL, v4);
        fclose(v4);
        return v19;
      }
      if ((v5 & 0x8000000000000000) != 0) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v12 = v11 - (void)v8;
      uint64_t v13 = 2 * v12;
      if (2 * v12 <= v5) {
        uint64_t v13 = v5;
      }
      if (v12 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v14 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v14 = v13;
      }
      uint64_t v15 = (char *)operator new(v14);
      size_t v16 = &v15[v9];
      unint64_t v17 = &v15[v14];
      bzero(&v15[v9], v10);
      if (v7 == v8)
      {
LABEL_34:
        *(void *)a2 = v16;
        *(void *)(a2 + 8) = &v15[v6];
        *(void *)(a2 + 16) = v17;
        if (v7) {
          operator delete(v7);
        }
        goto LABEL_36;
      }
      if (v9 >= 8 && (unint64_t)(v8 - v15) >= 0x20)
      {
        if (v9 < 0x20)
        {
          unint64_t v18 = 0;
          goto LABEL_26;
        }
        unint64_t v18 = v9 & 0xFFFFFFFFFFFFFFE0;
        unint64_t v20 = v7 - 16;
        long long v21 = &v15[v7 - 16 - v8];
        unint64_t v22 = v9 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v23 = *(_OWORD *)v20;
          *((_OWORD *)v21 - 1) = *((_OWORD *)v20 - 1);
          *(_OWORD *)long long v21 = v23;
          v21 -= 32;
          v20 -= 32;
          v22 -= 32;
        }
        while (v22);
        if (v9 == v18) {
          goto LABEL_33;
        }
        if ((v9 & 0x18) != 0)
        {
LABEL_26:
          v16 -= v9 & 0xFFFFFFFFFFFFFFF8;
          unint64_t v24 = &v7[-v18 - 8];
          uint64_t v25 = (char *)(v24 - v8);
          unint64_t v26 = v18 - (v9 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v27 = *(void *)v24;
            v24 -= 8;
            *(void *)&v25[(void)v15] = v27;
            v25 -= 8;
            v26 += 8;
          }
          while (v26);
          v7 -= v9 & 0xFFFFFFFFFFFFFFF8;
          if (v9 == (v9 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_33;
          }
          goto LABEL_31;
        }
        v16 -= v18;
        v7 -= v18;
      }
LABEL_31:
      ssize_t v28 = v16 - 1;
      do
      {
        char v29 = *--v7;
        *v28-- = v29;
      }
      while (v7 != v8);
LABEL_33:
      uint64_t v7 = v8;
      size_t v16 = v15;
      goto LABEL_34;
    }
  }
  return 0;
}

BOOL support::fs::fileExists(const char *a1)
{
  v1.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v1.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v3.st_blkstd::string::size_type size = v1;
  *(timespec *)v3.st_qspare = v1;
  v3.st_birthtimespec = v1;
  *(timespec *)&v3.st_std::string::size_type size = v1;
  v3.st_mtimespec = v1;
  v3.st_ctimespec = v1;
  *(timespec *)&v3.st_uid = v1;
  v3.st_atimespec = v1;
  *(timespec *)&v3.st_dev = v1;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  return stat(a1, &v3) == 0;
}

void support::fs::createUniqueFilename(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v112[32] = v4;
  *(_OWORD *)v112 = v4;
  *(_OWORD *)&v112[16] = v4;
  *(_OWORD *)&v111[0].__locale_ = v4;
  MEMORY[0x24C58B560](v111);
  v111[1].__locale_ = (std::locale::__imp *)std::locale::use_facet(v111, MEMORY[0x263F8C108]);
  *(void *)v112 = std::locale::use_facet(v111, MEMORY[0x263F8C130]);
  memset(&v112[8], 0, 40);
  if (std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>((uint64_t)v111, "^([/_\\-[:alnum:]]*)(.*)", "") != "")std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>(); {
  memset(&v110, 170, sizeof(v110));
  }
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v110, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v110 = *(std::string *)a1;
  }
  int v99 = 0;
  p_st_atimespec = &v113.st_atimespec;
  uint64_t v98 = a1;
  while (1)
  {
    v6.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v6.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&v113.st_blkstd::string::size_type size = v6;
    *(timespec *)v113.st_qspare = v6;
    v113.st_birthtimespec = v6;
    *(timespec *)&v113.st_std::string::size_type size = v6;
    v113.st_mtimespec = v6;
    v113.st_ctimespec = v6;
    *(timespec *)&v113.st_uid = v6;
    v113.st_atimespec = v6;
    *(timespec *)&v113.st_dev = v6;
    if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v7 = &v110;
    }
    else {
      uint64_t v7 = (std::string *)v110.__r_.__value_.__r.__words[0];
    }
    if (stat((const char *)v7, &v113))
    {
      *(std::string *)a2 = v110;
      goto LABEL_168;
    }
    uint64_t v8 = *(unsigned __int8 *)(a1 + 23);
    if ((v8 & 0x80u) == 0) {
      unint64_t v9 = (std::sub_match<const char *> *)a1;
    }
    else {
      unint64_t v9 = *(std::sub_match<const char *> **)a1;
    }
    if ((v8 & 0x80u) != 0) {
      uint64_t v8 = *(void *)(a1 + 8);
    }
    size_t v10 = (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v9 + v8);
    *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v120 = v11;
    unint64_t v117 = 0xAAAAAAAAAAAAAA00;
    v114[1].__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)0xAAAAAAAAAAAAAAAALL;
    uint64_t v115 = 0;
    uint64_t v116 = 0;
    uint64_t v118 = 0;
    uint64_t v119 = 0;
    LOBYTE(v120) = 0;
    BYTE8(v120) = 0;
    uint64_t v121 = 0;
    memset(v114, 0, 41);
    *(_OWORD *)&v113.st_birthtimespec.tv_nsec = v11;
    v113.st_ctimespec.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v113.st_atimespec.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    memset(&v113.st_mtimespec, 0, 17);
    memset(&v113.st_ctimespec.tv_nsec, 0, 17);
    LOBYTE(v113.st_size) = 0;
    v113.st_blocks = 0;
    memset(&v113, 0, 41);
    int v12 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v111, v9, (std::sub_match<const char *> *)((char *)v9 + v8), (std::vector<std::csub_match> *)&v113, 4160);
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v114, (uint64_t)v9, v10, (uint64_t *)&v113.st_dev, 0);
    if (*(void *)&v113.st_dev)
    {
      v113.st_ino = *(void *)&v113.st_dev;
      operator delete(*(void **)&v113.st_dev);
    }
    if ((_BYTE)v120) {
      int v13 = v12 ^ 1;
    }
    else {
      int v13 = 1;
    }
    if (v114[0].__begin_)
    {
      v114[0].__end_ = v114[0].__begin_;
      operator delete(v114[0].__begin_);
    }
    if ((v12 & v13) == 0) {
      break;
    }
    memset(__p, 170, 24);
    std::to_string((std::string *)v114, ++v99);
    size_t v14 = std::string::insert((std::string *)v114, 0, "$1-");
    uint64_t v15 = (std::sub_match<const char *> *)v98;
    long long v16 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    *(void *)&v113.st_uid = *((void *)&v14->__r_.__value_.__l + 2);
    *(_OWORD *)&v113.st_dev = v16;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    unint64_t v17 = std::string::append((std::string *)&v113, "$2");
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    __p[2] = (void *)v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v113.st_gid) < 0)
    {
      operator delete(*(void **)&v113.st_dev);
      if (SHIBYTE(v114[0].__end_cap_.__value_) < 0) {
LABEL_154:
      }
        operator delete(v114[0].__begin_);
    }
    else if (SHIBYTE(v114[0].__end_cap_.__value_) < 0)
    {
      goto LABEL_154;
    }
    memset(&v108, 0, sizeof(v108));
    if (*(char *)(v98 + 23) >= 0)
    {
      uint64_t v19 = *(unsigned __int8 *)(v98 + 23);
    }
    else
    {
      uint64_t v15 = *(std::sub_match<const char *> **)v98;
      uint64_t v19 = *(void *)(v98 + 8);
    }
    unint64_t v20 = __p;
    if (SHIBYTE(__p[2]) < 0) {
      unint64_t v20 = (void **)__p[0];
    }
    __s = (char *)v20;
    *(void *)&long long v21 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v113.st_gen = v21;
    v113.st_std::string::size_type size = 0xAAAAAAAAAAAAAAAALL;
    v113.st_ctimespec.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v113.st_atimespec.tv_nsec = v21;
    *(_OWORD *)&v113.st_mtimespec.tv_nsec = v21;
    *(_OWORD *)&v113.dev_t st_rdev = v21;
    *(void *)&v113.st_dev = v15;
    v113.st_ino = (__darwin_ino64_t)v15 + v19;
    *(void *)&v113.st_uid = v111;
    v113.dev_t st_rdev = 0;
    memset(&v113.st_birthtimespec, 0, 17);
    memset(&v113.st_blocks, 0, 17);
    LOBYTE(v113.st_qspare[0]) = 0;
    v113.st_qspare[1] = 0;
    timespec *p_st_atimespec = 0u;
    p_st_atimespec[1] = 0u;
    *(_OWORD *)((char *)&p_st_atimespec[1].tv_nsec + 1) = 0u;
    long long v120 = v21;
    unint64_t v117 = 0xAAAAAAAAAAAAAA00;
    v114[1].__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)0xAAAAAAAAAAAAAAAALL;
    uint64_t v115 = 0;
    uint64_t v116 = 0;
    uint64_t v118 = 0;
    uint64_t v119 = 0;
    LOBYTE(v120) = 0;
    BYTE8(v120) = 0;
    uint64_t v121 = 0;
    memset(v114, 0, 41);
    std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v111, v15, (std::sub_match<const char *> *)((char *)v15 + v19), (std::vector<std::csub_match> *)v114, 0);
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)p_st_atimespec, (uint64_t)v15, (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v15 + v19), (uint64_t *)v114, 0);
    if (v114[0].__begin_)
    {
      v114[0].__end_ = v114[0].__begin_;
      operator delete(v114[0].__begin_);
    }
    tv_nsec = (void *)v113.st_atimespec.tv_nsec;
    if (v113.st_atimespec.tv_nsec != v113.st_atimespec.tv_sec)
    {
      size_t v104 = strlen(__s);
      long long v23 = (unsigned __int8 *)&__s[v104];
      tv_sec = (std::string::value_type *)v113.st_birthtimespec.tv_sec;
      for (uint64_t i = v113.st_birthtimespec.tv_nsec; tv_sec != (std::string::value_type *)i; ++tv_sec)
LABEL_39:
        std::string::push_back(&v108, *tv_sec);
      while (1)
      {
        if (v104)
        {
          uint64_t v27 = __s;
          while (1)
          {
LABEL_44:
            int v28 = *v27;
            if (v28 != 36) {
              goto LABEL_43;
            }
            char v29 = (unsigned __int8 *)(v27 + 1);
            if (v27 + 1 == (char *)v23) {
              goto LABEL_42;
            }
            int v30 = (char)*v29;
            int v28 = *v29;
            if (v30 > 38) {
              break;
            }
            if (v30 == 36)
            {
              ++v27;
              goto LABEL_43;
            }
            if (v30 != 38) {
              goto LABEL_59;
            }
            int v31 = *(std::string::value_type **)v113.st_atimespec.tv_sec;
            unsigned int v32 = *(std::string::value_type **)(v113.st_atimespec.tv_sec + 8);
            while (v31 != v32)
              std::string::push_back(&v108, *v31++);
LABEL_76:
            uint64_t v27 = (char *)(v29 + 1);
            if (v29 + 1 == v23) {
              goto LABEL_77;
            }
          }
          if (v30 == 39)
          {
            st_blocks = (std::string::value_type *)v113.st_blocks;
            int v47 = *(std::string::value_type **)&v113.st_blksize;
            while (st_blocks != v47)
              std::string::push_back(&v108, *st_blocks++);
            goto LABEL_76;
          }
          if (v30 == 96)
          {
            unsigned int v33 = (std::string::value_type *)v113.st_birthtimespec.tv_sec;
            uint64_t v34 = v113.st_birthtimespec.tv_nsec;
            while (v33 != (std::string::value_type *)v34)
              std::string::push_back(&v108, *v33++);
            goto LABEL_76;
          }
LABEL_59:
          if ((v28 - 48) <= 9)
          {
            unint64_t v35 = *v29 - 48;
            if (v27 + 2 != (char *)v23)
            {
              uint64_t v36 = v27[2];
              unsigned int v37 = v36 - 48;
              uint64_t v38 = v36 + 10 * (int)v35 - 48;
              if (v37 > 9)
              {
                char v29 = (unsigned __int8 *)(v27 + 1);
              }
              else
              {
                unint64_t v35 = v38;
                char v29 = (unsigned __int8 *)(v27 + 2);
              }
            }
            unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((v113.st_atimespec.tv_nsec - v113.st_atimespec.tv_sec) >> 3);
            __darwin_time_t v40 = v113.st_atimespec.tv_sec + 24 * (int)v35;
            BOOL v41 = v39 > v35;
            if (v39 <= v35) {
              p_tv_nsec = &v113.st_mtimespec.tv_nsec;
            }
            else {
              p_tv_nsec = (uint64_t *)(v113.st_atimespec.tv_sec + 24 * (int)v35);
            }
            uint64_t v43 = (std::string::value_type *)*p_tv_nsec;
            p_st_ctimespec = (timespec *)(v40 + 8);
            if (!v41) {
              p_st_ctimespec = &v113.st_ctimespec;
            }
            for (j = (std::string::value_type *)p_st_ctimespec->tv_sec; v43 != j; ++v43)
              std::string::push_back(&v108, *v43);
            goto LABEL_76;
          }
LABEL_42:
          LOBYTE(v28) = 36;
LABEL_43:
          std::string::push_back(&v108, v28);
          if (++v27 == (char *)v23) {
            goto LABEL_77;
          }
          goto LABEL_44;
        }
LABEL_77:
        uint64_t v102 = *(std::string::value_type **)&v113.st_blksize;
        blkcnt_t v103 = v113.st_blocks;
        dev_t st_rdev = v113.st_rdev;
        int v49 = v113.st_rdev | 0x800;
        v113.st_rdev |= 0x800u;
        unint64_t v26 = (void *)v113.st_atimespec.tv_sec;
        if (v113.st_atimespec.tv_nsec == v113.st_atimespec.tv_sec) {
          int v50 = &v113.st_mtimespec.tv_nsec;
        }
        else {
          int v50 = (void *)v113.st_atimespec.tv_sec;
        }
        int v51 = (timespec *)(v113.st_atimespec.tv_sec + 8);
        if (v113.st_atimespec.tv_nsec == v113.st_atimespec.tv_sec) {
          int v51 = &v113.st_ctimespec;
        }
        uint64_t v52 = (std::sub_match<const char *> *)v51->tv_sec;
        st_ino = (std::sub_match<const char *> *)v113.st_ino;
        if (*v50 == v51->tv_sec)
        {
          if ((std::sub_match<const char *> *)v113.st_ino == v52) {
            goto LABEL_148;
          }
          unint64_t v69 = (std::vector<std::ssub_match> *)p_st_atimespec;
          *(void *)&long long v70 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v70 + 1) = 0xAAAAAAAAAAAAAAAALL;
          long long v120 = v70;
          unint64_t v117 = 0xAAAAAAAAAAAAAA00;
          v114[1].__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)0xAAAAAAAAAAAAAAAALL;
          uint64_t v115 = 0;
          uint64_t v116 = 0;
          uint64_t v118 = 0;
          uint64_t v119 = 0;
          LOBYTE(v120) = 0;
          BYTE8(v120) = 0;
          uint64_t v121 = 0;
          memset(v114, 0, 41);
          __darwin_ino64_t v71 = v113.st_ino;
          int v72 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(*(uint64_t *)&v113.st_uid, v52, (std::sub_match<const char *> *)v113.st_ino, (std::vector<std::csub_match> *)v114, st_rdev | 0x860u);
          uint64_t v73 = v115;
          unint64_t v74 = 0xAAAAAAAAAAAAAAABLL * (((char *)v114[0].__end_ - (char *)v114[0].__begin_) >> 3);
          __darwin_time_t v75 = v113.st_atimespec.tv_sec;
          __darwin_time_t v76 = v113.st_atimespec.tv_nsec;
          unint64_t v77 = 0xAAAAAAAAAAAAAAABLL * ((v113.st_atimespec.tv_nsec - v113.st_atimespec.tv_sec) >> 3);
          if (v74 <= v77)
          {
            if (v74 < v77)
            {
              __darwin_time_t v76 = v113.st_atimespec.tv_sec + 8 * (((char *)v114[0].__end_ - (char *)v114[0].__begin_) >> 3);
              v113.st_atimespec.tv_nsec = v76;
            }
          }
          else
          {
            std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(v69, v74 - v77);
            __darwin_time_t v75 = v113.st_atimespec.tv_sec;
            __darwin_time_t v76 = v113.st_atimespec.tv_nsec;
          }
          if (v76 == v75)
          {
            begin = v114[0].__begin_;
          }
          else
          {
            uint64_t v79 = 0;
            unint64_t v80 = 0;
            std::vector<std::ssub_match>::pointer end = v114[0].__end_;
            begin = v114[0].__begin_;
            do
            {
              if (0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3) <= v80) {
                uint64_t v83 = &v114[1];
              }
              else {
                uint64_t v83 = (std::vector<std::ssub_match> *)&begin[v79];
              }
              *(void *)(v75 + v79 * 24) = (char *)v52 + (unint64_t)v83->__begin_ - v73;
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v114[0].__end_ - (char *)v114[0].__begin_) >> 3) <= v80) {
                p_std::vector<std::ssub_match>::pointer end = &v114[1].__end_;
              }
              else {
                p_std::vector<std::ssub_match>::pointer end = &v114[0].__begin_[v79].second.__i_;
              }
              *(void *)(v113.st_atimespec.tv_sec + v79 * 24 + 8) = (char *)v52 + *p_end - v73;
              std::vector<std::ssub_match>::pointer end = v114[0].__end_;
              begin = v114[0].__begin_;
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v114[0].__end_ - (char *)v114[0].__begin_) >> 3) <= v80) {
                p_end_cap = (char *)&v114[1].__end_cap_;
              }
              else {
                p_end_cap = (char *)&v114[0].__begin_[v79].matched;
              }
              char v86 = *p_end_cap;
              __darwin_time_t v75 = v113.st_atimespec.tv_sec;
              *(unsigned char *)(v113.st_atimespec.tv_sec + v79 * 24 + 16) = v86;
              ++v80;
              ++v79;
            }
            while (v80 < 0xAAAAAAAAAAAAAAABLL * ((v113.st_atimespec.tv_nsec - v75) >> 3));
          }
          v113.st_mtimespec.tv_nsec = v71;
          v113.st_ctimespec.tv_sec = v71;
          v113.st_birthtimespec.tv_sec = (__darwin_time_t)v52 + v115 - v73;
          v113.st_birthtimespec.tv_nsec = (uint64_t)v52 + v116 - v73;
          LOBYTE(v113.st_size) = v117;
          LOBYTE(v113.st_ctimespec.tv_nsec) = 0;
          v113.st_blocks = (blkcnt_t)v52 + v118 - v73;
          *(void *)&v113.st_blkstd::string::size_type size = (char *)v52 + v119 - v73;
          LOBYTE(v113.st_gen) = v120;
          LOBYTE(v113.st_qspare[0]) = BYTE8(v120);
          if (begin)
          {
            v114[0].__end_ = begin;
            operator delete(begin);
          }
          if (v72)
          {
            p_st_atimespec = (timespec *)v69;
            unint64_t v26 = (void *)v113.st_atimespec.tv_sec;
            goto LABEL_37;
          }
          uint64_t v52 = (std::sub_match<const char *> *)((char *)v52 + 1);
          int v49 = v113.st_rdev;
          st_ino = (std::sub_match<const char *> *)v113.st_ino;
        }
        __int16 v106 = v49;
        v113.dev_t st_rdev = v49 | 0x80;
        *(void *)&long long v54 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v54 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v120 = v54;
        unint64_t v117 = 0xAAAAAAAAAAAAAA00;
        v114[1].__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)0xAAAAAAAAAAAAAAAALL;
        uint64_t v115 = 0;
        uint64_t v116 = 0;
        uint64_t v118 = 0;
        uint64_t v119 = 0;
        LOBYTE(v120) = 0;
        BYTE8(v120) = 0;
        uint64_t v121 = 0;
        memset(v114, 0, 41);
        uint64_t v107 = (uint64_t)st_ino;
        char v105 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(*(uint64_t *)&v113.st_uid, v52, st_ino, (std::vector<std::csub_match> *)v114, v49 | 0x80u);
        uint64_t v55 = v115;
        unint64_t v56 = 0xAAAAAAAAAAAAAAABLL * (((char *)v114[0].__end_ - (char *)v114[0].__begin_) >> 3);
        __darwin_time_t v58 = v113.st_atimespec.tv_sec;
        uint64_t v57 = (void *)v113.st_atimespec.tv_nsec;
        unint64_t v59 = 0xAAAAAAAAAAAAAAABLL * ((v113.st_atimespec.tv_nsec - v113.st_atimespec.tv_sec) >> 3);
        unint64_t v60 = v56 - v59;
        if (v56 > v59) {
          break;
        }
        if (v56 < v59)
        {
          uint64_t v57 = (void *)(v113.st_atimespec.tv_sec + 8 * (((char *)v114[0].__end_ - (char *)v114[0].__begin_) >> 3));
          v113.st_atimespec.tv_nsec = (uint64_t)v57;
        }
        p_st_atimespec = &v113.st_atimespec;
        if (v57 != (void *)v113.st_atimespec.tv_sec) {
          goto LABEL_132;
        }
LABEL_143:
        v113.st_mtimespec.tv_nsec = v107;
        v113.st_ctimespec.tv_sec = v107;
        v113.st_birthtimespec.tv_sec = (__darwin_time_t)v52 + v115 - v55;
        v113.st_birthtimespec.tv_nsec = (uint64_t)v52 + v116 - v55;
        LOBYTE(v113.st_size) = v117;
        LOBYTE(v113.st_ctimespec.tv_nsec) = 0;
        v113.st_blocks = (blkcnt_t)v52 + v118 - v55;
        *(void *)&v113.st_blkstd::string::size_type size = (char *)v52 + v119 - v55;
        LOBYTE(v113.st_gen) = v120;
        if ((v106 & 0x800) == 0) {
          v113.st_qspare[1] = (uint64_t_t)v52 + v115 - v55;
        }
        LOBYTE(v113.st_qspare[0]) = BYTE8(v120);
        if (v114[0].__begin_)
        {
          v114[0].__end_ = v114[0].__begin_;
          operator delete(v114[0].__begin_);
        }
        unint64_t v26 = (void *)v113.st_atimespec.tv_sec;
        if ((v105 & 1) == 0)
        {
LABEL_148:
          if (v26)
          {
            v113.st_atimespec.tv_nsec = (uint64_t)v26;
            operator delete(v26);
          }
          unint64_t v26 = 0;
          LOBYTE(v113.st_qspare[0]) = 0;
          timespec *p_st_atimespec = 0u;
          p_st_atimespec[1] = 0u;
          *(_OWORD *)((char *)&p_st_atimespec[1].tv_nsec + 1) = 0u;
          memset(&v113.st_birthtimespec, 0, 17);
          memset(&v113.st_blocks, 0, 17);
          v113.st_qspare[1] = 0;
        }
LABEL_37:
        if ((void *)v113.st_atimespec.tv_nsec == v26)
        {
          for (k = (std::string::value_type *)v103; k != v102; ++k)
            std::string::push_back(&v108, *k);
LABEL_157:
          tv_nsec = (void *)v113.st_atimespec.tv_sec;
          goto LABEL_158;
        }
        tv_sec = (std::string::value_type *)v113.st_birthtimespec.tv_sec;
        uint64_t i = v113.st_birthtimespec.tv_nsec;
        if (v113.st_birthtimespec.tv_sec != v113.st_birthtimespec.tv_nsec) {
          goto LABEL_39;
        }
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v113.st_mtimespec.tv_sec - v113.st_atimespec.tv_nsec) >> 3) < v60)
      {
        if (v56 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v61 = 0x5555555555555556 * ((v113.st_mtimespec.tv_sec - v113.st_atimespec.tv_sec) >> 3);
        if (v61 <= v56) {
          unint64_t v61 = 0xAAAAAAAAAAAAAAABLL * (((char *)v114[0].__end_ - (char *)v114[0].__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v113.st_mtimespec.tv_sec - v113.st_atimespec.tv_sec) >> 3) >= 0x555555555555555) {
          unint64_t v62 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v62 = v61;
        }
        if (v62 > 0xAAAAAAAAAAAAAAALL) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v100 = v62;
        uint8x8_t v63 = operator new(24 * v62);
        __darwin_time_t v64 = (__darwin_time_t)v63 + 24 * v59;
        uint64_t v65 = (uint64_t)v63 + 24 * v56;
        uint64_t v66 = 24 * v56 - 24 * v59;
        __darwin_time_t v67 = v64;
        do
        {
          *(void *)__darwin_time_t v67 = 0;
          *(void *)(v67 + 8) = 0;
          *(unsigned char *)(v67 + 16) = 0;
          v67 += 24;
          v66 -= 24;
        }
        while (v66);
        p_st_atimespec = &v113.st_atimespec;
        if (v57 == (void *)v58)
        {
          v113.st_atimespec.tv_sec = (__darwin_time_t)v63 + 24 * v59;
          v113.st_atimespec.tv_nsec = v65;
          v113.st_mtimespec.tv_sec = (__darwin_time_t)v63 + 24 * v100;
          if (!v57) {
            goto LABEL_131;
          }
        }
        else
        {
          do
          {
            long long v68 = *(_OWORD *)(v57 - 3);
            *(void *)(v64 - 8) = *(v57 - 1);
            *(_OWORD *)(v64 - 24) = v68;
            v64 -= 24;
            v57 -= 3;
          }
          while (v57 != (void *)v58);
          uint64_t v57 = (void *)v58;
          v113.st_atimespec.tv_sec = v64;
          v113.st_atimespec.tv_nsec = v65;
          v113.st_mtimespec.tv_sec = (__darwin_time_t)v63 + 24 * v100;
          if (!v58)
          {
LABEL_131:
            __darwin_time_t v58 = v113.st_atimespec.tv_sec;
            if (v65 == v113.st_atimespec.tv_sec) {
              goto LABEL_143;
            }
LABEL_132:
            uint64_t v87 = 0;
            unint64_t v88 = 0;
            std::vector<std::ssub_match>::pointer v89 = v114[0].__end_;
            std::vector<std::ssub_match>::pointer v90 = v114[0].__begin_;
            do
            {
              unint64_t v91 = 0xAAAAAAAAAAAAAAABLL * (((char *)v89 - (char *)v90) >> 3);
              uint64_t v92 = (std::vector<std::ssub_match> *)&v90[v87];
              if (v91 <= v88) {
                v93 = &v114[1];
              }
              else {
                v93 = v92;
              }
              *(void *)(v58 + v87 * 24) = (char *)v52 + (unint64_t)v93->__begin_ - v55;
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v114[0].__end_ - (char *)v114[0].__begin_) >> 3) <= v88) {
                p_uint64_t i = &v114[1].__end_;
              }
              else {
                p_uint64_t i = &v114[0].__begin_[v87].second.__i_;
              }
              *(void *)(v113.st_atimespec.tv_sec + v87 * 24 + 8) = (char *)v52 + *p_i - v55;
              std::vector<std::ssub_match>::pointer v89 = v114[0].__end_;
              std::vector<std::ssub_match>::pointer v90 = v114[0].__begin_;
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v114[0].__end_ - (char *)v114[0].__begin_) >> 3) <= v88) {
                p_matched = &v114[1].__end_cap_;
              }
              else {
                p_matched = &v114[0].__begin_[v87].matched;
              }
              __darwin_time_t v58 = v113.st_atimespec.tv_sec;
              *(unsigned char *)(v113.st_atimespec.tv_sec + v87 * 24 + 16) = *p_matched;
              ++v88;
              ++v87;
            }
            while (v88 < 0xAAAAAAAAAAAAAAABLL * ((v113.st_atimespec.tv_nsec - v58) >> 3));
            goto LABEL_143;
          }
        }
        operator delete(v57);
        uint64_t v65 = v113.st_atimespec.tv_nsec;
        goto LABEL_131;
      }
      uint64_t v65 = v113.st_atimespec.tv_nsec + 24 * v60;
      int64_t v78 = 8 * (((char *)v114[0].__end_ - (char *)v114[0].__begin_) >> 3)
          - 8 * ((v113.st_atimespec.tv_nsec - v113.st_atimespec.tv_sec) >> 3);
      do
      {
        *uint64_t v57 = 0;
        v57[1] = 0;
        *((unsigned char *)v57 + 16) = 0;
        v57 += 3;
        v78 -= 24;
      }
      while (v78);
      v113.st_atimespec.tv_nsec = v65;
      p_st_atimespec = &v113.st_atimespec;
      goto LABEL_131;
    }
    if (v19)
    {
      do
      {
        std::string::push_back(&v108, (std::string::value_type)v15->first);
        uint64_t v15 = (std::sub_match<const char *> *)((char *)v15 + 1);
        --v19;
      }
      while (v19);
      goto LABEL_157;
    }
LABEL_158:
    a1 = v98;
    if (tv_nsec)
    {
      v113.st_atimespec.tv_nsec = (uint64_t)tv_nsec;
      operator delete(tv_nsec);
    }
    if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v110.__r_.__value_.__l.__data_);
      std::string v110 = v108;
      if (SHIBYTE(__p[2]) < 0) {
LABEL_6:
      }
        operator delete(__p[0]);
    }
    else
    {
      std::string v110 = v108;
      if (SHIBYTE(__p[2]) < 0) {
        goto LABEL_6;
      }
    }
  }
  *(unsigned char *)(a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v110.__r_.__value_.__l.__data_);
  }
LABEL_168:
  uint64_t v97 = *(std::__shared_weak_count **)&v112[32];
  if (*(void *)&v112[32]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v112[32] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
    std::__shared_weak_count::__release_weak(v97);
  }
  std::locale::~locale(v111);
}

void sub_248B0F704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::locale a43)
{
}

void sub_248B0F718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::locale a43)
{
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v43);
  std::locale::~locale(&a43);
  _Unwind_Resume(a1);
}

void sub_248B0F734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::locale a43)
{
}

void sub_248B0F748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,std::locale a46)
{
  if (a44 < 0) {
    operator delete(__p);
  }
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a46);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::~basic_regex(std::locale *this)
{
  timespec v1 = this;
  locale = (std::__shared_weak_count *)this[6].__locale_;
  if (locale && !atomic_fetch_add(&locale->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
    std::__shared_weak_count::__release_weak(locale);
    this = v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  std::locale::~locale(this);
}

void support::fs::createUniquePath(const char *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = a1;
  uint64_t v29 = *MEMORY[0x263EF8340];
  v4.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v4.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&__src.st_blkstd::string::size_type size = v4;
  *(timespec *)__src.st_qspare = v4;
  __src.st_birthtimespec = v4;
  *(timespec *)&__src.st_std::string::size_type size = v4;
  __src.st_mtimespec = v4;
  __src.st_ctimespec = v4;
  *(timespec *)&__src.st_uid = v4;
  __src.st_atimespec = v4;
  *(timespec *)&__src.st_dev = v4;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (!stat(a1, &__src))
  {
    v5.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v5.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    timespec v27 = v5;
    timespec v28 = v5;
    timespec v25 = v5;
    timespec v26 = v5;
    timespec v23 = v5;
    timespec v24 = v5;
    *(timespec *)__src.st_qspare = v5;
    timespec v22 = v5;
    *(timespec *)&__src.st_std::string::size_type size = v5;
    *(timespec *)&__src.st_blkstd::string::size_type size = v5;
    __src.st_ctimespec = v5;
    __src.st_birthtimespec = v5;
    __src.st_atimespec = v5;
    __src.st_mtimespec = v5;
    *(timespec *)&__src.st_dev = v5;
    *(timespec *)&__src.st_uid = v5;
    snprintf((char *)&__src, 0x100uLL, "-%u", 1);
    memset(a2, 170, sizeof(std::string));
    size_t v6 = strlen((const char *)&__src);
    if (v6 > 0x7FFFFFFFFFFFFFF7) {
LABEL_32:
    }
      std::string::__throw_length_error[abi:ne180100]();
    __darwin_ino64_t v7 = v6;
    int v8 = 2;
    while (v7 < 0x17)
    {
      HIBYTE(__dst.st_gid) = v7;
      p_dst = &__dst;
      if (v7) {
        goto LABEL_15;
      }
LABEL_16:
      *((unsigned char *)&p_dst->st_dev + v7) = 0;
      int v13 = v2[23];
      if (v13 >= 0) {
        size_t v14 = v2;
      }
      else {
        size_t v14 = *(const std::string::value_type **)v2;
      }
      if (v13 >= 0) {
        std::string::size_type v15 = *((unsigned __int8 *)v2 + 23);
      }
      else {
        std::string::size_type v15 = *((void *)v2 + 1);
      }
      long long v16 = std::string::insert((std::string *)&__dst, 0, v14, v15);
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      a2->__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__dst.st_gid) < 0) {
        operator delete(*(void **)&__dst.st_dev);
      }
      v18.tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v18.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      *(timespec *)&__dst.st_blkstd::string::size_type size = v18;
      *(timespec *)__dst.st_qspare = v18;
      __dst.st_birthtimespec = v18;
      *(timespec *)&__dst.st_std::string::size_type size = v18;
      __dst.st_mtimespec = v18;
      __dst.st_ctimespec = v18;
      *(timespec *)&__dst.st_uid = v18;
      __dst.st_atimespec = v18;
      *(timespec *)&__dst.st_dev = v18;
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v19 = (const char *)a2;
      }
      else {
        uint64_t v19 = (const char *)a2->__r_.__value_.__r.__words[0];
      }
      if (stat(v19, &__dst)) {
        return;
      }
      if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
        operator delete(a2->__r_.__value_.__l.__data_);
      }
      v9.tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v9.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      timespec v27 = v9;
      timespec v28 = v9;
      timespec v25 = v9;
      timespec v26 = v9;
      timespec v23 = v9;
      timespec v24 = v9;
      *(timespec *)__src.st_qspare = v9;
      timespec v22 = v9;
      *(timespec *)&__src.st_std::string::size_type size = v9;
      *(timespec *)&__src.st_blkstd::string::size_type size = v9;
      __src.st_ctimespec = v9;
      __src.st_birthtimespec = v9;
      __src.st_atimespec = v9;
      __src.st_mtimespec = v9;
      *(timespec *)&__src.st_dev = v9;
      *(timespec *)&__src.st_uid = v9;
      snprintf((char *)&__src, 0x100uLL, "-%u", v8);
      memset(a2, 170, sizeof(std::string));
      __darwin_ino64_t v7 = strlen((const char *)&__src);
      ++v8;
      if (v7 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_32;
      }
    }
    uint64_t v11 = (v7 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (stat *)operator new(v11 + 1);
    __dst.st_ino = v7;
    *(void *)&__dst.st_uid = v12 | 0x8000000000000000;
    *(void *)&__dst.st_dev = p_dst;
LABEL_15:
    memcpy(p_dst, &__src, v7);
    goto LABEL_16;
  }
  if (v2[23] < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v2, *((void *)v2 + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v2;
    a2->__r_.__value_.__r.__words[2] = *((void *)v2 + 2);
  }
}

void sub_248B0FB98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL support::fs::createDir(const char *a1, mode_t a2, int a3)
{
  timespec v5 = a1;
  v6.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v6.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v29.st_blkstd::string::size_type size = v6;
  *(timespec *)v29.st_qspare = v6;
  v29.st_birthtimespec = v6;
  *(timespec *)&v29.st_std::string::size_type size = v6;
  v29.st_ctimespec = v6;
  v29.st_atimespec = v6;
  v29.st_mtimespec = v6;
  *(timespec *)&v29.st_dev = v6;
  *(timespec *)&v29.st_uid = v6;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (!stat(a1, &v29)) {
    return 1;
  }
  if (!a3)
  {
    if (v5[23] >= 0) {
      long long v21 = v5;
    }
    else {
      long long v21 = *(const char **)v5;
    }
    return mkdir(v21, a2) == 0;
  }
  __str.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  __str.__r_.__value_.__r.__words[2] = 0x1AAAAAAAAAAAAAALL;
  __str.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAA002FLL;
  memset(__p, 170, sizeof(__p));
  ctu::tokenize();
  memset(&v26, 0, sizeof(v26));
  if (v5[23] >= 0) {
    __darwin_ino64_t v7 = v5;
  }
  else {
    __darwin_ino64_t v7 = *(const char **)v5;
  }
  if (*v7 == 47) {
    std::string::operator=(&v26, &__str);
  }
  int v8 = (char *)__p[0];
  if (__p[1] != __p[0])
  {
    unint64_t v9 = 0;
    unsigned int v10 = 1;
    while (1)
    {
      if (v10 != 1)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_str = &__str;
        }
        else {
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __str.__r_.__value_.__l.__size_;
        }
        std::string::append(&v26, (const std::string::value_type *)p_str, size);
        int v8 = (char *)__p[0];
      }
      int v13 = &v8[24 * v9];
      int v14 = v13[23];
      std::string::size_type v15 = v14 >= 0 ? v13 : *(const std::string::value_type **)v13;
      std::string::size_type v16 = v14 >= 0 ? v13[23] : *((void *)v13 + 1);
      std::string::append(&v26, v15, v16);
      v17.tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v17.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      *(timespec *)&v29.st_blkstd::string::size_type size = v17;
      *(timespec *)v29.st_qspare = v17;
      v29.st_birthtimespec = v17;
      *(timespec *)&v29.st_std::string::size_type size = v17;
      v29.st_ctimespec = v17;
      v29.st_atimespec = v17;
      v29.st_mtimespec = v17;
      *(timespec *)&v29.st_dev = v17;
      *(timespec *)&v29.st_uid = v17;
      timespec v18 = (v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v26
          : (std::string *)v26.__r_.__value_.__r.__words[0];
      if (stat((const char *)v18, &v29))
      {
        uint64_t v19 = (v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v26
            : (std::string *)v26.__r_.__value_.__r.__words[0];
        if (mkdir((const char *)v19, a2)) {
          break;
        }
      }
      unint64_t v9 = v10;
      int v8 = (char *)__p[0];
      ++v10;
      if (0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3) <= v9) {
        goto LABEL_42;
      }
    }
    uint64_t v20 = 0;
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t v20 = 1;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
LABEL_43:
  }
    operator delete(v26.__r_.__value_.__l.__data_);
LABEL_44:
  timespec v22 = (void **)__p[0];
  if (__p[0])
  {
    timespec v23 = (void **)__p[1];
    timespec v24 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v23 - 1) < 0) {
          operator delete(*(v23 - 3));
        }
        v23 -= 3;
      }
      while (v23 != v22);
      timespec v24 = __p[0];
    }
    __p[1] = v22;
    operator delete(v24);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return v20;
}

void sub_248B0FE64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::vector<std::string>::~vector[abi:ne180100](&a16);
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(a1);
}

BOOL support::fs::rename(const std::__fs::filesystem::path *a1, const std::__fs::filesystem::path *a2, std::error_code *a3)
{
  if ((a1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    a1 = (const std::__fs::filesystem::path *)a1->__pn_.__r_.__value_.__r.__words[0];
  }
  if ((a2->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    a2 = (const std::__fs::filesystem::path *)a2->__pn_.__r_.__value_.__r.__words[0];
  }
  rename(a1, a2, a3);
  return v3 == 0;
}

BOOL support::fs::chmod(const char *a1, mode_t a2)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  return chmod(a1, a2) == 0;
}

uint64_t support::fs::removeDir(const char *a1)
{
  timespec v1 = (const std::__fs::filesystem::path *)a1;
  v44[2] = *MEMORY[0x263EF8340];
  v2.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v2.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&__dst.st_blksize_t size = v2;
  *(timespec *)__dst.st_qspare = v2;
  __dst.st_birthtimespec = v2;
  *(timespec *)&__dst.st_size_t size = v2;
  __dst.st_mtimespec = v2;
  __dst.st_ctimespec = v2;
  *(timespec *)&__dst.st_uid = v2;
  __dst.st_atimespec = v2;
  *(timespec *)&__dst.st_dev = v2;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (stat(a1, &__dst)) {
    return 1;
  }
  __darwin_time_t v40 = 0;
  BOOL v41 = 0;
  uint64_t v42 = 0;
  support::fs::readDir((const char *)v1, (uint64_t)&v40);
  unsigned int v5 = 0;
  while (1)
  {
    unsigned int v6 = v5;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)v41 - (unsigned char *)v40) >> 3);
    BOOL v3 = v7 <= v5;
    if (v7 <= v5) {
      break;
    }
    int v8 = (char *)v40 + 24 * v5;
    memset(&__p, 170, sizeof(__p));
    if (v8[23] < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v8, *((void *)v8 + 1));
    }
    else
    {
      long long v9 = *(_OWORD *)v8;
      __p.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
    }
    std::string::size_type v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__p.__r_.__value_.__l.__size_ == 1)
      {
        if (*__p.__r_.__value_.__l.__data_ == 46) {
          goto LABEL_61;
        }
      }
      else if (__p.__r_.__value_.__l.__size_ == 2 && *(_WORD *)__p.__r_.__value_.__l.__data_ == 11822)
      {
        goto LABEL_61;
      }
    }
    else if (HIBYTE(__p.__r_.__value_.__r.__words[2]) == 1)
    {
      if (__p.__r_.__value_.__s.__data_[0] == 46) {
        goto LABEL_61;
      }
    }
    else if (HIBYTE(__p.__r_.__value_.__r.__words[2]) == 2 && LOWORD(__p.__r_.__value_.__l.__data_) == 11822)
    {
      goto LABEL_61;
    }
    int v11 = SHIBYTE(v1->__pn_.__r_.__value_.__r.__words[2]);
    if (v11 >= 0) {
      size_t size = HIBYTE(v1->__pn_.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v1->__pn_.__r_.__value_.__l.__size_;
    }
    unint64_t v13 = size + 1;
    memset(&__dst, 170, 24);
    if (size + 1 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v13 >= 0x17)
    {
      uint64_t v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17) {
        uint64_t v15 = v13 | 7;
      }
      uint64_t v16 = v15 + 1;
      p_dst = (char *)operator new(v15 + 1);
      __dst.st_ino = size + 1;
      *(void *)&__dst.st_uid = v16 | 0x8000000000000000;
      *(void *)&__dst.st_dev = p_dst;
    }
    else
    {
      memset(&__dst, 0, 24);
      p_dst = (char *)&__dst;
      HIBYTE(__dst.st_gid) = size + 1;
      if (!size) {
        goto LABEL_38;
      }
    }
    if (v11 >= 0) {
      timespec v17 = v1;
    }
    else {
      timespec v17 = (const std::__fs::filesystem::path *)v1->__pn_.__r_.__value_.__r.__words[0];
    }
    memmove(p_dst, v17, size);
LABEL_38:
    *(_WORD *)&p_dst[size] = 47;
    if ((v10 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((v10 & 0x80u) == 0) {
      std::string::size_type v19 = v10;
    }
    else {
      std::string::size_type v19 = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v20 = std::string::append((std::string *)&__dst, (const std::string::value_type *)p_p, v19);
    std::string::size_type v21 = v20->__r_.__value_.__r.__words[0];
    v44[0] = v20->__r_.__value_.__l.__size_;
    *(void *)((char *)v44 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
    char v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    __p.__r_.__value_.__r.__words[0] = v21;
    __p.__r_.__value_.__l.__size_ = v44[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v44 + 7);
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = v22;
    if (SHIBYTE(__dst.st_gid) < 0)
    {
      operator delete(*(void **)&__dst.st_dev);
      char v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      std::string::size_type v21 = __p.__r_.__value_.__r.__words[0];
    }
    v23.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v23.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&__dst.st_blksize_t size = v23;
    *(timespec *)__dst.st_qspare = v23;
    __dst.st_birthtimespec = v23;
    *(timespec *)&__dst.st_size_t size = v23;
    __dst.st_mtimespec = v23;
    __dst.st_ctimespec = v23;
    *(timespec *)&__dst.st_uid = v23;
    __dst.st_atimespec = v23;
    if (v22 >= 0) {
      timespec v24 = &__p;
    }
    else {
      timespec v24 = (std::string *)v21;
    }
    *(timespec *)&__dst.st_dev = v23;
    if (!stat((const char *)v24, &__dst)
      && ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? (stat v29 = &__p)
        : (stat v29 = (std::string *)__p.__r_.__value_.__r.__words[0]),
          (v30 = opendir((const char *)v29), (int v31 = v30) != 0) && (v32 = readdir(v30), closedir(v31), v32)))
    {
      std::string::append(&__p, "/");
      char v28 = support::fs::removeDir(&__p);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_7;
      }
    }
    else
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v26 = (const std::__fs::filesystem::path *)&__p;
      }
      else {
        std::string v26 = (const std::__fs::filesystem::path *)__p.__r_.__value_.__r.__words[0];
      }
      if (!remove(v26, v25))
      {
LABEL_61:
        char v28 = 1;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_7;
        }
        goto LABEL_6;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        timespec v27 = &__p;
      }
      else {
        timespec v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      char v28 = unlink((const char *)v27) == 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_7;
      }
    }
LABEL_6:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_7:
    unsigned int v5 = v6 + 1;
    if ((v28 & 1) == 0) {
      goto LABEL_78;
    }
  }
  if ((v1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unsigned int v33 = v1;
  }
  else {
    unsigned int v33 = (const std::__fs::filesystem::path *)v1->__pn_.__r_.__value_.__r.__words[0];
  }
  if (remove(v33, v4))
  {
    if ((v1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v34 = (const char *)v1;
    }
    else {
      uint64_t v34 = (const char *)v1->__pn_.__r_.__value_.__r.__words[0];
    }
    unlink(v34);
  }
LABEL_78:
  unint64_t v35 = (void **)v40;
  if (v40)
  {
    uint64_t v36 = v41;
    unsigned int v37 = v40;
    if (v41 != v40)
    {
      do
      {
        if (*((char *)v36 - 1) < 0) {
          operator delete(*(v36 - 3));
        }
        v36 -= 3;
      }
      while (v36 != v35);
      unsigned int v37 = v40;
    }
    BOOL v41 = v35;
    operator delete(v37);
  }
  return v3;
}

void sub_248B10364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_248B1037C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if ((a16 & 0x80000000) == 0)
  {
    std::vector<std::string>::~vector[abi:ne180100](&a17);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  std::vector<std::string>::~vector[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

BOOL support::fs::removeFile(const std::__fs::filesystem::path *a1, std::error_code *a2)
{
  timespec v2 = a1;
  if ((a1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    a1 = (const std::__fs::filesystem::path *)a1->__pn_.__r_.__value_.__r.__words[0];
  }
  if (!remove(a1, a2)) {
    return 1;
  }
  if ((v2->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v3 = (const char *)v2;
  }
  else {
    BOOL v3 = (const char *)v2->__pn_.__r_.__value_.__r.__words[0];
  }
  return unlink(v3) == 0;
}

uint64_t support::fs::removeDirContents(const char *a1, unint64_t a2)
{
  BOOL v3 = a1;
  uint64_t v57 = 0;
  __darwin_time_t v58 = 0;
  uint64_t v59 = 0;
  support::fs::readDir(a1, (uint64_t)&v57);
  time_t v50 = time(0);
  timespec v4 = (void **)v57;
  __int16 v53 = v58;
  if (v57 == v58)
  {
    char v46 = 1;
    if (v57) {
      goto LABEL_108;
    }
    return v46 & 1;
  }
  double v5 = (double)a2;
  char v52 = 1;
  int v51 = v3;
  while (1)
  {
    memset(&v56, 170, sizeof(v56));
    if (*((char *)v4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v56, (const std::string::value_type *)*v4, (std::string::size_type)v4[1]);
    }
    else
    {
      long long v6 = *(_OWORD *)v4;
      v56.__r_.__value_.__r.__words[2] = (std::string::size_type)v4[2];
      *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v6;
    }
    std::string::size_type v7 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      break;
    }
    if (HIBYTE(v56.__r_.__value_.__r.__words[2]) == 1)
    {
      if (v56.__r_.__value_.__s.__data_[0] == 46) {
        goto LABEL_98;
      }
    }
    else if (HIBYTE(v56.__r_.__value_.__r.__words[2]) == 2 && LOWORD(v56.__r_.__value_.__l.__data_) == 11822)
    {
      goto LABEL_98;
    }
LABEL_19:
    memset(__p, 170, 24);
    int v8 = v3[23];
    if (v8 >= 0) {
      size_t v9 = *((unsigned __int8 *)v3 + 23);
    }
    else {
      size_t v9 = *((void *)v3 + 1);
    }
    unint64_t v10 = v9 + 1;
    memset(&__dst, 170, 24);
    if (v9 + 1 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v10 >= 0x17)
    {
      unint64_t v12 = a2;
      uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17) {
        uint64_t v13 = v10 | 7;
      }
      uint64_t v14 = v13 + 1;
      p_dst = (stat *)operator new(v13 + 1);
      __dst.st_ino = v9 + 1;
      *(void *)&__dst.st_uid = v14 | 0x8000000000000000;
      *(void *)&__dst.st_dev = p_dst;
      a2 = v12;
      BOOL v3 = v51;
    }
    else
    {
      memset(&__dst, 0, 24);
      p_dst = &__dst;
      HIBYTE(__dst.st_gid) = v9 + 1;
      if (!v9) {
        goto LABEL_33;
      }
    }
    if (v8 >= 0) {
      uint64_t v15 = v3;
    }
    else {
      uint64_t v15 = *(const char **)v3;
    }
    memmove(p_dst, v15, v9);
LABEL_33:
    *(_WORD *)((char *)&p_dst->st_dev + v9) = 47;
    if ((v7 & 0x80u) == 0) {
      uint64_t v16 = &v56;
    }
    else {
      uint64_t v16 = (std::string *)v56.__r_.__value_.__r.__words[0];
    }
    if ((v7 & 0x80u) == 0) {
      std::string::size_type size = v7;
    }
    else {
      std::string::size_type size = v56.__r_.__value_.__l.__size_;
    }
    timespec v18 = std::string::append((std::string *)&__dst, (const std::string::value_type *)v16, size);
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    __p[2] = (void *)v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.st_gid) < 0)
    {
      operator delete(*(void **)&__dst.st_dev);
      if (!a2) {
        goto LABEL_50;
      }
    }
    else if (!a2)
    {
      goto LABEL_50;
    }
    v20.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v20.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&__dst.st_blkstd::string::size_type size = v20;
    *(timespec *)__dst.st_qspare = v20;
    __dst.st_birthtimespec = v20;
    *(timespec *)&__dst.st_std::string::size_type size = v20;
    __dst.st_mtimespec = v20;
    __dst.st_ctimespec = v20;
    __dst.st_atimespec = v20;
    *(timespec *)&__dst.st_dev = v20;
    *(timespec *)&__dst.st_uid = v20;
    if (SHIBYTE(__p[2]) >= 0) {
      std::string::size_type v21 = __p;
    }
    else {
      std::string::size_type v21 = (void **)__p[0];
    }
    if (!stat((const char *)v21, &__dst) && difftime(v50, __dst.st_ctimespec.tv_sec) >= v5)
    {
LABEL_50:
      v24.tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v24.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      *(timespec *)&__dst.st_blkstd::string::size_type size = v24;
      *(timespec *)__dst.st_qspare = v24;
      __dst.st_birthtimespec = v24;
      *(timespec *)&__dst.st_std::string::size_type size = v24;
      __dst.st_mtimespec = v24;
      __dst.st_ctimespec = v24;
      __dst.st_atimespec = v24;
      *(timespec *)&__dst.st_dev = v24;
      *(timespec *)&__dst.st_uid = v24;
      if (SHIBYTE(__p[2]) >= 0) {
        timespec v25 = __p;
      }
      else {
        timespec v25 = (void **)__p[0];
      }
      if (stat((const char *)v25, &__dst)
        || (SHIBYTE(__p[2]) >= 0 ? (stat v29 = __p) : (stat v29 = (void **)__p[0]),
            (v30 = opendir((const char *)v29), (int v31 = v30) == 0) || (v32 = readdir(v30), closedir(v31), !v32)))
      {
        if (SHIBYTE(__p[2]) >= 0) {
          timespec v27 = (const std::__fs::filesystem::path *)__p;
        }
        else {
          timespec v27 = (const std::__fs::filesystem::path *)__p[0];
        }
        if (!remove(v27, v26)
          || (SHIBYTE(__p[2]) >= 0 ? (char v28 = __p) : (char v28 = (void **)__p[0]), !unlink((const char *)v28)))
        {
LABEL_92:
          int v23 = 0;
          char v52 = 1;
          char v22 = 1;
          if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
            goto LABEL_94;
          }
          goto LABEL_93;
        }
        goto LABEL_62;
      }
      int v33 = v3[23];
      if (v33 >= 0) {
        size_t v34 = *((unsigned __int8 *)v3 + 23);
      }
      else {
        size_t v34 = *((void *)v3 + 1);
      }
      unint64_t v35 = v34 + 1;
      memset(&v54, 170, sizeof(v54));
      if (v34 + 1 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v35 >= 0x17)
      {
        unint64_t v37 = a2;
        uint64_t v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v35 | 7) != 0x17) {
          uint64_t v38 = v35 | 7;
        }
        uint64_t v39 = v38 + 1;
        uint64_t v36 = (char *)operator new(v38 + 1);
        v54.__r_.__value_.__l.__size_ = v34 + 1;
        v54.__r_.__value_.__r.__words[2] = v39 | 0x8000000000000000;
        v54.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
        a2 = v37;
        BOOL v3 = v51;
      }
      else
      {
        memset(&v54, 0, sizeof(v54));
        uint64_t v36 = (char *)&v54;
        *((unsigned char *)&v54.__r_.__value_.__s + 23) = v34 + 1;
        if (!v34) {
          goto LABEL_83;
        }
      }
      if (v33 >= 0) {
        __darwin_time_t v40 = v3;
      }
      else {
        __darwin_time_t v40 = *(const char **)v3;
      }
      memmove(v36, v40, v34);
LABEL_83:
      *(_WORD *)&v36[v34] = 47;
      if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        BOOL v41 = &v56;
      }
      else {
        BOOL v41 = (std::string *)v56.__r_.__value_.__r.__words[0];
      }
      if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v42 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v42 = v56.__r_.__value_.__l.__size_;
      }
      uint64_t v43 = std::string::append(&v54, (const std::string::value_type *)v41, v42);
      long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      *(void *)&__dst.st_uid = *((void *)&v43->__r_.__value_.__l + 2);
      *(_OWORD *)&__dst.st_dev = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      char v45 = support::fs::removeDir((const char *)&__dst);
      if (SHIBYTE(__dst.st_gid) < 0)
      {
        operator delete(*(void **)&__dst.st_dev);
        if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_91;
        }
      }
      else if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_91:
        if (v45) {
          goto LABEL_92;
        }
LABEL_62:
        char v52 = 0;
        char v22 = 0;
        int v23 = 2;
        if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
          goto LABEL_94;
        }
        goto LABEL_93;
      }
      operator delete(v54.__r_.__value_.__l.__data_);
      if (v45) {
        goto LABEL_92;
      }
      goto LABEL_62;
    }
    char v22 = 0;
    int v23 = 3;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_94;
    }
LABEL_93:
    operator delete(__p[0]);
LABEL_94:
    if (v22) {
      goto LABEL_98;
    }
    if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_96;
    }
LABEL_99:
    operator delete(v56.__r_.__value_.__l.__data_);
    if (v23 != 3) {
      goto LABEL_100;
    }
LABEL_3:
    v4 += 3;
    if (v4 == v53) {
      goto LABEL_105;
    }
  }
  if (v56.__r_.__value_.__l.__size_ == 1)
  {
    if (*v56.__r_.__value_.__l.__data_ == 46) {
      goto LABEL_98;
    }
    goto LABEL_19;
  }
  if (v56.__r_.__value_.__l.__size_ != 2 || *(_WORD *)v56.__r_.__value_.__l.__data_ != 11822) {
    goto LABEL_19;
  }
LABEL_98:
  int v23 = 0;
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_99;
  }
LABEL_96:
  if (v23 == 3) {
    goto LABEL_3;
  }
LABEL_100:
  if (!v23) {
    goto LABEL_3;
  }
LABEL_105:
  timespec v4 = (void **)v57;
  char v46 = v52;
  if (!v57) {
    return v46 & 1;
  }
LABEL_108:
  int v47 = v58;
  int v48 = v4;
  if (v58 != v4)
  {
    do
    {
      if (*((char *)v47 - 1) < 0) {
        operator delete(*(v47 - 3));
      }
      v47 -= 3;
    }
    while (v47 != v4);
    int v48 = v57;
  }
  __darwin_time_t v58 = v4;
  operator delete(v48);
  return v46 & 1;
}

void sub_248B109D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  std::vector<std::string>::~vector[abi:ne180100](&a33);
  _Unwind_Resume(a1);
}

void support::fs::moveDirUnique(const char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  timespec v4 = (const std::__fs::filesystem::path *)a1;
  v6.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v6.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v16.st_blkstd::string::size_type size = v6;
  *(timespec *)v16.st_qspare = v6;
  v16.st_birthtimespec = v6;
  *(timespec *)&v16.st_std::string::size_type size = v6;
  v16.st_mtimespec = v6;
  v16.st_ctimespec = v6;
  *(timespec *)&v16.st_uid = v6;
  v16.st_atimespec = v6;
  *(timespec *)&v16.st_dev = v6;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (stat(a1, &v16)) {
    goto LABEL_4;
  }
  std::string::size_type v7 = (v4->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
     ? (const char *)v4
     : (const char *)v4->__pn_.__r_.__value_.__r.__words[0];
  int v8 = opendir(v7);
  if (!v8) {
    goto LABEL_4;
  }
  size_t v9 = v8;
  unint64_t v10 = readdir(v8);
  closedir(v9);
  if (!v10) {
    goto LABEL_4;
  }
  memset((void *)a3, 170, 24);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  support::fs::createUniquePath((const char *)&__p, (std::string *)a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((v4->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v12 = v4;
  }
  else {
    unint64_t v12 = (const std::__fs::filesystem::path *)v4->__pn_.__r_.__value_.__r.__words[0];
  }
  if (*(char *)(a3 + 23) >= 0) {
    uint64_t v13 = (const std::__fs::filesystem::path *)a3;
  }
  else {
    uint64_t v13 = *(const std::__fs::filesystem::path **)a3;
  }
  rename(v12, v13, v11);
  if (v14)
  {
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
LABEL_4:
    *(unsigned char *)(a3 + 23) = 0;
    *(unsigned char *)a3 = 0;
  }
}

void sub_248B10BE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void support::fs::getFileName(std::string *a1@<X8>)
{
  memset(__p, 170, sizeof(__p));
  ctu::tokenize();
  if (*((char *)__p[1] - 1) < 0)
  {
    std::string::__init_copy_ctor_external(a1, *((const std::string::value_type **)__p[1] - 3), *((void *)__p[1] - 2));
  }
  else
  {
    long long v2 = *(_OWORD *)((char *)__p[1] - 24);
    a1->__r_.__value_.__r.__words[2] = *((void *)__p[1] - 1);
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v2;
  }
  if (__p[0])
  {
    BOOL v3 = (void **)__p[1];
    timespec v4 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*(v3 - 3));
        }
        v3 -= 3;
      }
      while (v3 != __p[0]);
      timespec v4 = __p[0];
    }
    operator delete(v4);
  }
}

void sub_248B10CB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

uint64_t support::fs::lockDir(const char *a1)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  uint64_t v1 = open(a1, 0);
  if ((v1 & 0x80000000) != 0) {
    return v1;
  }
  int v5 = 1;
  v3[0] = 0;
  v3[1] = 0;
  pid_t v4 = getpid();
  if ((fcntl(v1, 9, v3) & 0x80000000) == 0) {
    return v1;
  }
  close(v1);
  return 0xFFFFFFFFLL;
}

BOOL support::fs::unlockDir(support::fs *this)
{
  int v1 = (int)this;
  int v6 = 2;
  v4[0] = 0;
  v4[1] = 0;
  pid_t v5 = getpid();
  BOOL v2 = fcntl(v1, 9, v4) == 0;
  close(v1);
  return v2;
}

BOOL support::fs::getFilteredFiles(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  *__error() = 0;
  if (a1[23] < 0)
  {
    std::string::size_type v7 = opendir(*(const char **)a1);
    if (v7) {
      goto LABEL_3;
    }
LABEL_81:
    std::string::size_type v42 = *(NSObject **)(GetOsLogContext() + 8);
    BOOL result = os_log_type_enabled(v42, OS_LOG_TYPE_ERROR);
    if (result)
    {
      if (a1[23] < 0) {
        a1 = *(const char **)a1;
      }
      long long v44 = __error();
      char v45 = strerror(*v44);
      v55.st_dev = 136315394;
      *(void *)&v55.st_mode = a1;
      WORD2(v55.st_ino) = 2080;
      *(__darwin_ino64_t *)((char *)&v55.st_ino + 6) = (__darwin_ino64_t)v45;
      _os_log_error_impl(&dword_248AFD000, v42, OS_LOG_TYPE_ERROR, "Error %s (%s)\n", (uint8_t *)&v55, 0x16u);
      return 0;
    }
    return result;
  }
  std::string::size_type v7 = opendir(a1);
  if (!v7) {
    goto LABEL_81;
  }
LABEL_3:
  int v8 = v7;
  size_t v9 = readdir(v7);
  if (v9)
  {
    int v48 = a1;
    char v46 = 0;
    while (1)
    {
      d_name = v9->d_name;
      memset(__dst, 170, sizeof(__dst));
      size_t v11 = strlen(v9->d_name);
      if (v11 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v12 = v11;
      if (v11 >= 0x17)
      {
        uint64_t v16 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17) {
          uint64_t v16 = v11 | 7;
        }
        uint64_t v17 = v16 + 1;
        uint64_t v13 = operator new(v16 + 1);
        *(void *)&__dst[8] = v12;
        *(void *)&__dst[16] = v17 | 0x8000000000000000;
        *(void *)stat __dst = v13;
      }
      else
      {
        __dst[23] = v11;
        uint64_t v13 = __dst;
        if (!v11)
        {
          __dst[0] = 0;
          int v14 = __dst[23];
          std::string::size_type v15 = __dst[23];
          if ((__dst[23] & 0x80000000) == 0) {
            goto LABEL_9;
          }
          goto LABEL_17;
        }
      }
      memmove(v13, d_name, v12);
      v13[v12] = 0;
      int v14 = __dst[23];
      std::string::size_type v15 = __dst[23];
      if ((__dst[23] & 0x80000000) == 0)
      {
LABEL_9:
        if (v15 == 1)
        {
          if (__dst[0] == 46) {
            goto LABEL_76;
          }
        }
        else if (v15 == 2 && *(unsigned __int16 *)__dst == 11822)
        {
          goto LABEL_76;
        }
        goto LABEL_24;
      }
LABEL_17:
      if (*(void *)&__dst[8] == 1)
      {
        if (**(unsigned char **)__dst == 46) {
          goto LABEL_76;
        }
      }
      else if (*(void *)&__dst[8] == 2 && **(_WORD **)__dst == 11822)
      {
        goto LABEL_76;
      }
LABEL_24:
      if (a4) {
        goto LABEL_55;
      }
      uint64_t v18 = a4;
      uint64_t v19 = a3;
      v20.tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v20.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      *(timespec *)&v55.st_blkstd::string::size_type size = v20;
      *(timespec *)v55.st_qspare = v20;
      v55.st_birthtimespec = v20;
      *(timespec *)&v55.st_std::string::size_type size = v20;
      v55.st_mtimespec = v20;
      v55.st_ctimespec = v20;
      *(timespec *)&v55.st_uid = v20;
      v55.st_atimespec = v20;
      *(timespec *)&v55.st_dev = v20;
      int v21 = v48[23];
      if (v21 >= 0) {
        size_t v22 = *((unsigned __int8 *)v48 + 23);
      }
      else {
        size_t v22 = *((void *)v48 + 1);
      }
      unint64_t v23 = v22 + 1;
      memset(&v49, 170, sizeof(v49));
      if (v22 + 1 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v23 >= 0x17)
      {
        uint64_t v25 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v23 | 7) != 0x17) {
          uint64_t v25 = v23 | 7;
        }
        uint64_t v26 = v25 + 1;
        timespec v24 = (char *)operator new(v25 + 1);
        v49.__r_.__value_.__l.__size_ = v22 + 1;
        v49.__r_.__value_.__r.__words[2] = v26 | 0x8000000000000000;
        v49.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
      }
      else
      {
        memset(&v49, 0, sizeof(v49));
        timespec v24 = (char *)&v49;
        *((unsigned char *)&v49.__r_.__value_.__s + 23) = v22 + 1;
        if (!v22) {
          goto LABEL_39;
        }
      }
      if (v21 >= 0) {
        timespec v27 = v48;
      }
      else {
        timespec v27 = *(const char **)v48;
      }
      memmove(v24, v27, v22);
LABEL_39:
      a3 = v19;
      *(_WORD *)&v24[v22] = 47;
      if (v14 >= 0) {
        char v28 = __dst;
      }
      else {
        char v28 = *(const std::string::value_type **)__dst;
      }
      if (v14 >= 0) {
        std::string::size_type v29 = v15;
      }
      else {
        std::string::size_type v29 = *(void *)&__dst[8];
      }
      int v30 = std::string::append(&v49, v28, v29);
      a4 = v18;
      long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v52[0] = *((void *)&v30->__r_.__value_.__l + 2);
      *(_OWORD *)std::string __p = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      if (v52[0] >= 0) {
        unsigned int v32 = __p;
      }
      else {
        unsigned int v32 = (void **)__p[0];
      }
      lstat((const char *)v32, &v55);
      if (SHIBYTE(v52[0]) < 0)
      {
        operator delete(__p[0]);
        if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_50:
          if ((v55.st_mode & 0xF000) != 0xA000) {
            goto LABEL_54;
          }
          goto LABEL_76;
        }
      }
      else if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_50;
      }
      operator delete(v49.__r_.__value_.__l.__data_);
      if ((v55.st_mode & 0xF000) != 0xA000)
      {
LABEL_54:
        std::string::size_type v15 = __dst[23];
LABEL_55:
        if ((v15 & 0x80u) == 0) {
          int v33 = (std::sub_match<const char *> *)__dst;
        }
        else {
          int v33 = *(std::sub_match<const char *> **)__dst;
        }
        if ((v15 & 0x80u) == 0) {
          std::string::size_type v34 = v15;
        }
        else {
          std::string::size_type v34 = *(void *)&__dst[8];
        }
        unint64_t v35 = (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v33 + v34);
        *(void *)&long long v36 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v36 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v53 = v36;
        v52[6] = 0xAAAAAAAAAAAAAA00;
        v52[3] = 0xAAAAAAAAAAAAAAAALL;
        v52[4] = 0;
        v52[5] = 0;
        v52[7] = 0;
        v52[8] = 0;
        LOBYTE(v53) = 0;
        BYTE8(v53) = 0;
        uint64_t v54 = 0;
        *(_OWORD *)std::string __p = 0u;
        memset(v52, 0, 25);
        *(_OWORD *)&v55.st_birthtimespec.tv_nsec = v36;
        v55.st_ctimespec.tv_sec = 0xAAAAAAAAAAAAAAAALL;
        v55.st_atimespec.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
        memset(&v55.st_mtimespec, 0, 17);
        memset(&v55.st_ctimespec.tv_nsec, 0, 17);
        LOBYTE(v55.st_size) = 0;
        v55.st_blocks = 0;
        memset(&v55, 0, 41);
        int v37 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a2, v33, (std::sub_match<const char *> *)((char *)v33 + v34), (std::vector<std::csub_match> *)&v55, 4160);
        std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)__p, (uint64_t)v33, v35, (uint64_t *)&v55.st_dev, 0);
        if (*(void *)&v55.st_dev)
        {
          v55.st_ino = *(void *)&v55.st_dev;
          operator delete(*(void **)&v55.st_dev);
        }
        if ((_BYTE)v53) {
          int v38 = v37 ^ 1;
        }
        else {
          int v38 = 1;
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if ((v37 & v38) != 0)
        {
          unint64_t v39 = *(void *)(a3 + 8);
          if (v39 >= *(void *)(a3 + 16))
          {
            BOOL v41 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a3, (uint64_t)__dst);
          }
          else
          {
            if ((__dst[23] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external(*(std::string **)(a3 + 8), *(const std::string::value_type **)__dst, *(std::string::size_type *)&__dst[8]);
            }
            else
            {
              long long v40 = *(_OWORD *)__dst;
              *(void *)(v39 + 16) = *(void *)&__dst[16];
              *(_OWORD *)unint64_t v39 = v40;
            }
            BOOL v41 = (std::string *)(v39 + 24);
            *(void *)(a3 + 8) = v39 + 24;
          }
          *(void *)(a3 + 8) = v41;
          char v46 = 1;
        }
      }
LABEL_76:
      if ((__dst[23] & 0x80000000) != 0) {
        operator delete(*(void **)__dst);
      }
      size_t v9 = readdir(v8);
      if (!v9) {
        goto LABEL_86;
      }
    }
  }
  char v46 = 0;
LABEL_86:
  closedir(v8);
  return v46 & 1;
}

void sub_248B11354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49)
{
  *(void *)(v49 + 8) = v50;
  if (a30 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_248B115E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void support::fs::getBasePath(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = a1;
  if (((char)a1[23] & 0x80000000) == 0)
  {
    if (!a1[23])
    {
      *(_OWORD *)a2 = *(_OWORD *)a1;
      *(void *)(a2 + 16) = *((void *)a1 + 2);
      return;
    }
LABEL_6:
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    memset(&__p, 170, sizeof(__p));
    support::fs::getFileName(&__p);
    size_t v4 = *((void *)v2 + 1);
    if ((v2[23] & 0x80u) == 0)
    {
      size_t v5 = v2[23];
    }
    else
    {
      BOOL v2 = *(unsigned __int8 **)v2;
      size_t v5 = v4;
    }
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    char v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    size_t v9 = &v2[v5];
    if (v5) {
      BOOL v10 = size == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10)
    {
      std::string::size_type v15 = &v2[v5];
    }
    else
    {
      int v14 = v2;
      std::string::size_type v15 = &v2[v5];
      do
      {
        if (*v14 == p_p->__r_.__value_.__s.__data_[0])
        {
          uint64_t v16 = 1;
          while (size != v16)
          {
            if (&v14[v16] == v9) {
              goto LABEL_20;
            }
            int v17 = v14[v16];
            int v18 = p_p->__r_.__value_.__s.__data_[v16++];
            if (v17 != v18) {
              goto LABEL_37;
            }
          }
          std::string::size_type v15 = v14;
        }
LABEL_37:
        ++v14;
      }
      while (v14 != v9);
    }
LABEL_20:
    BOOL v11 = v15 != v9 || size == 0;
    if (!v11 || v15 - v2 == -1) {
      goto LABEL_34;
    }
    if (v5 >= v15 - v2) {
      size_t v12 = v15 - v2;
    }
    else {
      size_t v12 = v5;
    }
    if (v12 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v12 >= 0x17)
    {
      uint64_t v19 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17) {
        uint64_t v19 = v12 | 7;
      }
      uint64_t v20 = v19 + 1;
      uint64_t v13 = (long long *)operator new(v19 + 1);
      *((void *)&v22 + 1) = v12;
      unint64_t v23 = v20 | 0x8000000000000000;
      *(void *)&long long v22 = v13;
    }
    else
    {
      HIBYTE(v23) = v12;
      uint64_t v13 = &v22;
      if (!v12)
      {
        LOBYTE(v22) = 0;
        if ((*(char *)(a2 + 23) & 0x80000000) == 0)
        {
LABEL_33:
          *(_OWORD *)a2 = v22;
          *(void *)(a2 + 16) = v23;
          char v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
LABEL_34:
          if (v7 < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          return;
        }
LABEL_49:
        operator delete(*(void **)a2);
        goto LABEL_33;
      }
    }
    memmove(v13, v2, v12);
    *((unsigned char *)v13 + v12) = 0;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_49;
  }
  if (*((void *)a1 + 1)) {
    goto LABEL_6;
  }
  int v21 = *(const std::string::value_type **)a1;
  std::string::__init_copy_ctor_external((std::string *)a2, v21, 0);
}

void sub_248B11838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void support::fs::getLastNumberDir(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  memset(&v66, 170, sizeof(v66));
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v66, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v66 = *(std::string *)a1;
  }
  size_t v4 = &v66;
  if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    size_t v4 = (std::string *)v66.__r_.__value_.__r.__words[0];
  }
  std::string::size_type size = HIBYTE(v66.__r_.__value_.__r.__words[2]);
  if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v66.__r_.__value_.__l.__size_;
  }
  int v6 = (char *)&v4[-1].__r_.__value_.__r.__words[2] + 7;
  while (size)
  {
    int v7 = v6[size--];
    if (v7 != 47)
    {
      if (size != -1) {
        std::string::erase(&v66, size + 1, 0xFFFFFFFFFFFFFFFFLL);
      }
      break;
    }
  }
  memset(&v65, 170, sizeof(v65));
  support::fs::getBasePath((unsigned __int8 *)&v66, (uint64_t)&v65);
  std::string::size_type v8 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
  if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v8 = v66.__r_.__value_.__l.__size_;
  }
  if (!v8) {
    goto LABEL_26;
  }
  std::string::size_type v9 = HIBYTE(v65.__r_.__value_.__r.__words[2]);
  if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v9 = v65.__r_.__value_.__l.__size_;
  }
  if (!v9)
  {
LABEL_26:
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
      if ((SHIBYTE(v65.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_118;
      }
      goto LABEL_123;
    }
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
    goto LABEL_117;
  }
  memset(&v64, 170, sizeof(v64));
  support::fs::getFileName(&v64);
  int v10 = SHIBYTE(v64.__r_.__value_.__r.__words[2]);
  if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v11 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v11 = v64.__r_.__value_.__l.__size_;
  }
  unint64_t v12 = v11 + 13;
  memset(__dst, 170, sizeof(__dst));
  if (v11 + 13 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v12 >= 0x17)
  {
    uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v14 = v12 | 7;
    }
    uint64_t v15 = v14 + 1;
    uint64_t v13 = (void **)operator new(v14 + 1);
    __dst[1] = (void *)(v11 + 13);
    __dst[2] = (void *)(v15 | 0x8000000000000000);
    __dst[0] = v13;
  }
  else
  {
    memset(__dst, 0, sizeof(__dst));
    uint64_t v13 = __dst;
    HIBYTE(__dst[2]) = v11 + 13;
    if (!v11) {
      goto LABEL_37;
    }
  }
  if (v10 >= 0) {
    uint64_t v16 = &v64;
  }
  else {
    uint64_t v16 = (std::string *)v64.__r_.__value_.__r.__words[0];
  }
  memmove(v13, v16, v11);
LABEL_37:
  strcpy((char *)v13 + v11, "-[[:alnum:]]*");
  *(void *)&long long v17 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v61[32] = v17;
  long long v62 = v17;
  *(_OWORD *)unint64_t v61 = v17;
  *(_OWORD *)&v61[16] = v17;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v61, (uint64_t)__dst, 0);
  __darwin_time_t v58 = 0;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v57, v65.__r_.__value_.__l.__data_, v65.__r_.__value_.__l.__size_);
  }
  else {
    std::string v57 = v65;
  }
  std::locale::locale(&v51, (const std::locale *)v61);
  long long v52 = *(_OWORD *)&v61[8];
  long long v53 = *(_OWORD *)&v61[24];
  uint64_t v54 = *(void *)&v61[40];
  stat v55 = (std::__shared_weak_count *)v62;
  if ((void)v62) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v62 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v56 = *((void *)&v62 + 1);
  if (!support::fs::getFilteredFiles((const char *)&v57, (uint64_t)&v51, (uint64_t)&v58, 0))
  {
    int v21 = v55;
    if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
    std::locale::~locale(&v51);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    goto LABEL_77;
  }
  int v18 = (void **)v58;
  uint64_t v19 = v59;
  uint64_t v20 = v55;
  if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  std::locale::~locale(&v51);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v57.__r_.__value_.__l.__data_);
    if (v18 == v19)
    {
LABEL_77:
      if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      {
        *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
        a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
        long long v31 = (void **)v58;
        if (!v58) {
          goto LABEL_113;
        }
        goto LABEL_106;
      }
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
LABEL_105:
      long long v31 = (void **)v58;
      if (!v58) {
        goto LABEL_113;
      }
      goto LABEL_106;
    }
  }
  else if (v18 == v19)
  {
    goto LABEL_77;
  }
  long long v22 = (char *)v58;
  unint64_t v23 = (char *)v59;
  if (v58 != v59)
  {
    unsigned int v24 = 0;
    while (1)
    {
      memset(&__p, 170, sizeof(__p));
      ctu::tokenize();
      memset(&v49, 170, sizeof(v49));
      if (*(char *)(__p.__r_.__value_.__l.__size_ - 1) < 0)
      {
        std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)(__p.__r_.__value_.__l.__size_ - 24), *(void *)(__p.__r_.__value_.__l.__size_ - 16));
      }
      else
      {
        long long v26 = *(_OWORD *)(__p.__r_.__value_.__l.__size_ - 24);
        v49.__r_.__value_.__r.__words[2] = *(void *)(__p.__r_.__value_.__l.__size_ - 8);
        *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v26;
      }
      if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        timespec v27 = &v49;
      }
      else {
        timespec v27 = (std::string *)v49.__r_.__value_.__r.__words[0];
      }
      unsigned int v28 = strtol((const char *)v27, 0, 0);
      if (v24 <= v28) {
        unsigned int v24 = v28;
      }
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v49.__r_.__value_.__l.__data_);
        std::string::size_type v29 = __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__r.__words[0])
        {
LABEL_72:
          std::string::size_type v30 = __p.__r_.__value_.__l.__size_;
          uint64_t v25 = (void *)v29;
          if (__p.__r_.__value_.__l.__size_ != v29)
          {
            do
            {
              if (*(char *)(v30 - 1) < 0) {
                operator delete(*(void **)(v30 - 24));
              }
              v30 -= 24;
            }
            while (v30 != v29);
            uint64_t v25 = (void *)__p.__r_.__value_.__r.__words[0];
          }
          __p.__r_.__value_.__l.__size_ = v29;
          operator delete(v25);
        }
      }
      else
      {
        std::string::size_type v29 = __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__r.__words[0]) {
          goto LABEL_72;
        }
      }
      v22 += 24;
      if (v22 == v23) {
        goto LABEL_82;
      }
    }
  }
  unsigned int v24 = 0;
LABEL_82:
  int v32 = SHIBYTE(v66.__r_.__value_.__r.__words[2]);
  if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v33 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v33 = v66.__r_.__value_.__l.__size_;
  }
  unint64_t v34 = v33 + 1;
  memset(&v49, 170, sizeof(v49));
  if (v33 + 1 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v34 >= 0x17)
  {
    uint64_t v36 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v34 | 7) != 0x17) {
      uint64_t v36 = v34 | 7;
    }
    uint64_t v37 = v36 + 1;
    unint64_t v35 = (char *)operator new(v36 + 1);
    v49.__r_.__value_.__l.__size_ = v33 + 1;
    v49.__r_.__value_.__r.__words[2] = v37 | 0x8000000000000000;
    v49.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
  }
  else
  {
    memset(&v49, 0, sizeof(v49));
    unint64_t v35 = (char *)&v49;
    *((unsigned char *)&v49.__r_.__value_.__s + 23) = v33 + 1;
    if (!v33) {
      goto LABEL_96;
    }
  }
  if (v32 >= 0) {
    int v38 = &v66;
  }
  else {
    int v38 = (std::string *)v66.__r_.__value_.__r.__words[0];
  }
  memmove(v35, v38, v33);
LABEL_96:
  *(_WORD *)&v35[v33] = 45;
  std::to_string(&v48, v24);
  if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v39 = &v48;
  }
  else {
    unint64_t v39 = (std::string *)v48.__r_.__value_.__r.__words[0];
  }
  if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v40 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v40 = v48.__r_.__value_.__l.__size_;
  }
  BOOL v41 = std::string::append(&v49, (const std::string::value_type *)v39, v40);
  long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v42;
  v41->__r_.__value_.__l.__size_ = 0;
  v41->__r_.__value_.__r.__words[2] = 0;
  v41->__r_.__value_.__r.__words[0] = 0;
  uint64_t v43 = std::string::append(&__p, "/");
  long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_104:
      if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_105;
      }
      goto LABEL_127;
    }
  }
  else if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_104;
  }
  operator delete(v48.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_105;
  }
LABEL_127:
  operator delete(v49.__r_.__value_.__l.__data_);
  long long v31 = (void **)v58;
  if (!v58) {
    goto LABEL_113;
  }
LABEL_106:
  char v45 = v59;
  char v46 = v31;
  if (v59 != v31)
  {
    do
    {
      if (*((char *)v45 - 1) < 0) {
        operator delete(*(v45 - 3));
      }
      v45 -= 3;
    }
    while (v45 != v31);
    char v46 = v58;
  }
  uint64_t v59 = v31;
  operator delete(v46);
LABEL_113:
  int v47 = (std::__shared_weak_count *)v62;
  if ((void)v62 && !atomic_fetch_add((atomic_ullong *volatile)(v62 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
    std::locale::~locale((std::locale *)v61);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
    {
LABEL_116:
      if ((SHIBYTE(v64.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_117;
      }
      goto LABEL_122;
    }
  }
  else
  {
    std::locale::~locale((std::locale *)v61);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0) {
      goto LABEL_116;
    }
  }
  operator delete(__dst[0]);
  if ((SHIBYTE(v64.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_117:
    if ((SHIBYTE(v65.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_118;
    }
    goto LABEL_123;
  }
LABEL_122:
  operator delete(v64.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v65.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_118:
    if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_124:
    operator delete(v66.__r_.__value_.__l.__data_);
    return;
  }
LABEL_123:
  operator delete(v65.__r_.__value_.__l.__data_);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_124;
  }
}

void sub_248B11FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,std::locale a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,uint64_t a46,std::locale a47)
{
  if (a28 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0)
      {
LABEL_8:
        std::vector<std::string>::~vector[abi:ne180100](&a44);
        std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a47);
        if (*(char *)(v47 - 161) < 0)
        {
          operator delete(*(void **)(v47 - 184));
          if ((*(char *)(v47 - 137) & 0x80000000) == 0)
          {
LABEL_10:
            if ((*(char *)(v47 - 113) & 0x80000000) == 0) {
              goto LABEL_11;
            }
            goto LABEL_15;
          }
        }
        else if ((*(char *)(v47 - 137) & 0x80000000) == 0)
        {
          goto LABEL_10;
        }
        operator delete(*(void **)(v47 - 160));
        if ((*(char *)(v47 - 113) & 0x80000000) == 0)
        {
LABEL_11:
          if ((*(char *)(v47 - 89) & 0x80000000) == 0) {
            goto LABEL_12;
          }
          goto LABEL_16;
        }
LABEL_15:
        operator delete(*(void **)(v47 - 136));
        if ((*(char *)(v47 - 89) & 0x80000000) == 0) {
LABEL_12:
        }
          _Unwind_Resume(a1);
LABEL_16:
        operator delete(*(void **)(v47 - 112));
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(a16);
      goto LABEL_8;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a21 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

BOOL support::fs::getPartitionInfo(uint64_t a1, void *a2, void *a3, unint64_t *a4)
{
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a1 + 23))
    {
      memset(&v11, 0, sizeof(v11));
      int v7 = statvfs((const char *)a1, &v11);
      BOOL result = v7 == 0;
      if (v7) {
        return result;
      }
LABEL_7:
      *a4 = v11.f_frsize;
      uint64_t f_bavail = v11.f_bavail;
      *a2 = v11.f_blocks;
      *a3 = f_bavail;
      return result;
    }
    return 0;
  }
  if (!*(void *)(a1 + 8)) {
    return 0;
  }
  memset(&v11, 0, sizeof(v11));
  int v9 = statvfs(*(const char **)a1, &v11);
  BOOL result = v9 == 0;
  if (!v9) {
    goto LABEL_7;
  }
  return result;
}

void support::fs::readCurrentLine(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  std::istream::tellg();
  uint64_t v4 = v13;
  if (v13 >= 2)
  {
    do
    {
      std::istream::seekg();
      if (std::istream::peek() == 10) {
        break;
      }
    }
    while (v4-- > 1);
  }
  std::istream::seekg();
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  int v6 = std::locale::use_facet(v12, MEMORY[0x263F8C108]);
  unsigned __int8 v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(v12);
  LOBYTE(v12[0].__locale_) = -86;
  MEMORY[0x24C58B390](v12, a1, 1);
  if (!LOBYTE(v12[0].__locale_)) {
    return;
  }
  uint64_t v8 = 0;
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 23) = 0;
  while (1)
  {
    int v9 = *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40);
    int v10 = (unsigned char *)v9[3];
    if (v10 != (unsigned char *)v9[4])
    {
      v9[3] = v10 + 1;
      LOBYTE(v9) = *v10;
      goto LABEL_10;
    }
    LODWORD(v9) = (*(uint64_t (**)(void *))(*v9 + 80))(v9);
    if (v9 == -1) {
      break;
    }
LABEL_10:
    if (v7 == v9)
    {
      int v11 = 0;
      goto LABEL_18;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v9);
    --v8;
    if (*(char *)(a2 + 23) < 0 && *(void *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      int v11 = 4;
      goto LABEL_18;
    }
  }
  if (v8) {
    int v11 = 2;
  }
  else {
    int v11 = 6;
  }
LABEL_18:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v11);
}

void sub_248B12418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_248B1242C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    uint64_t v3 = *v2;
    *(_DWORD *)((char *)v2 + *(void *)(*v2 - 24) + 32) |= 1u;
    if ((*((unsigned char *)v2 + *(void *)(v3 - 24) + 36) & 1) == 0)
    {
      __cxa_end_catch();
      JUMPOUT(0x248B123C0);
    }
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

std::string *std::vector<std::string>::__push_back_slow_path<std::string const&>(char **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int v9 = (char *)operator new(24 * v8);
  }
  else
  {
    int v9 = 0;
  }
  int v10 = (std::string *)&v9[24 * v5];
  uint64_t v16 = v10;
  long long v17 = v10;
  int v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    int v10 = v16;
    int v11 = v17 + 1;
    if (v4 == *a1)
    {
LABEL_17:
      uint64_t v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v10->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
    int v11 = v10 + 1;
    if (v4 == v3) {
      goto LABEL_17;
    }
  }
  do
  {
    long long v12 = *(_OWORD *)(v4 - 24);
    v10[-1].__r_.__value_.__r.__words[2] = *((void *)v4 - 1);
    *(_OWORD *)&v10[-1].__r_.__value_.__l.__data_ = v12;
    --v10;
    *((void *)v4 - 2) = 0;
    *((void *)v4 - 1) = 0;
    *((void *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  uint64_t v13 = *a1;
  uint64_t v3 = a1[1];
LABEL_18:
  *a1 = (char *)v10;
  a1[1] = (char *)v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    uint64_t v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0) {
        operator delete(*v14);
      }
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    uint64_t v3 = v13;
  }
  if (v3) {
    operator delete(v3);
  }
  return v11;
}

void sub_248B126BC(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::pointer begin = this->__begin_;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  if (end != begin)
  {
    do
    {
      std::__split_buffer<std::string>::pointer v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        std::__split_buffer<std::string>::pointer v4 = this->__end_;
      }
      std::__split_buffer<std::string>::pointer end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::vector<std::string>::__throw_length_error[abi:ne180100]()
{
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(uint64_t a1, char *a2, char *a3)
{
  unint64_t v6 = operator new(8uLL);
  void *v6 = &unk_26FCC7B10;
  unsigned __int8 v7 = operator new(0x10uLL);
  v7[1] = v6;
  unint64_t v8 = operator new(0x20uLL);
  void *v8 = &unk_26FCC7B68;
  v8[1] = 0;
  void v8[2] = 0;
  v8[3] = v7;
  int v9 = *(std::__shared_weak_count **)(a1 + 48);
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    uint64_t v10 = *(void *)(a1 + 40);
    *(void *)(a1 + 56) = v10;
    unsigned int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if (v11 <= 0x3F) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 40);
    *(void *)(a1 + 56) = v10;
    unsigned int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if (v11 <= 0x3F)
    {
LABEL_4:
      if (!v11)
      {
        uint64_t v16 = a2;
        while (1)
        {
          long long v17 = v16;
          uint64_t v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, v16, a3);
          if (v16 == v17)
          {
            int v18 = *(std::__owns_one_state<char> **)(a1 + 56);
            int v19 = *(_DWORD *)(a1 + 28);
            uint64_t v20 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, v17, a3);
            if (v20 == v17)
            {
LABEL_41:
              if (v17 == a2)
              {
                unsigned int v24 = operator new(0x10uLL);
                uint64_t v25 = *(void *)(a1 + 56);
                uint64_t v26 = *(void *)(v25 + 8);
                v24[1] = v26;
                *(void *)(v25 + 8) = v24;
                uint64_t v27 = *(void *)(*(void *)(a1 + 56) + 8);
                goto LABEL_74;
              }
LABEL_75:
              if (v17 != a3)
              {
                if (*v17 == 124)
                {
                  uint64_t v54 = *(void *)(a1 + 56);
                  stat v55 = v17 + 1;
                  uint64_t v56 = v17 + 1;
                  while (1)
                  {
                    long long v17 = v56;
                    uint64_t v56 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, v56, a3);
                    if (v56 == v17)
                    {
                      std::string v57 = *(std::__owns_one_state<char> **)(a1 + 56);
                      int v58 = *(_DWORD *)(a1 + 28);
                      uint64_t v59 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, v17, a3);
                      if (v59 == v17)
                      {
LABEL_82:
                        if (v17 == v55)
                        {
                          uint64_t v60 = operator new(0x10uLL);
                          uint64_t v61 = *(void *)(a1 + 56);
                          uint64_t v62 = *(void *)(v61 + 8);
                          v60[1] = v62;
                          *(void *)(v61 + 8) = v60;
                          *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
                        }
                        uint8x8_t v63 = operator new(0x18uLL);
                        uint64_t v64 = *(void *)(v54 + 8);
                        v63[1] = *(void *)(v10 + 8);
                        v63[2] = v64;
                        *uint8x8_t v63 = &unk_26FCC8128;
                        *(void *)(v10 + 8) = v63;
                        *(void *)(v54 + 8) = 0;
                        std::string v65 = operator new(0x10uLL);
                        uint64_t v66 = *(void *)(*(void *)(a1 + 56) + 8);
                        v65[1] = v66;
                        *(void *)(v54 + 8) = v65;
                        *(void *)(*(void *)(a1 + 56) + 8) = 0;
                        __darwin_time_t v67 = operator new(0x10uLL);
                        uint64_t v68 = *(void *)(v54 + 8);
                        void *v67 = &unk_26FCC8170;
                        v67[1] = v68;
                        *(void *)(*(void *)(a1 + 56) + 8) = v67;
                        uint64_t v27 = *(void *)(v54 + 8);
LABEL_74:
                        *(void *)(a1 + 56) = v27;
                        goto LABEL_75;
                      }
                      uint64_t v56 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, (std::basic_regex<char> *)v59, (std::basic_regex<char> *)a3, v57, (v58 + 1), (*(_DWORD *)(a1 + 28) + 1));
                    }
                    if (v56 == v17) {
                      goto LABEL_82;
                    }
                  }
                }
                return v17;
              }
              return a3;
            }
            uint64_t v16 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, (std::basic_regex<char> *)v20, (std::basic_regex<char> *)a3, v18, (v19 + 1), (*(_DWORD *)(a1 + 28) + 1));
          }
          if (v16 == v17) {
            goto LABEL_41;
          }
        }
      }
      if (v11 != 16)
      {
        if (v11 != 32) {
LABEL_73:
        }
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
        goto LABEL_21;
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, a2, a3);
    }
  }
  switch(v11)
  {
    case 0x40u:
LABEL_21:
      return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, a2, a3);
    case 0x80u:
      int v21 = (char *)memchr(a2, 10, a3 - a2);
      if (v21) {
        long long v22 = v21;
      }
      else {
        long long v22 = a3;
      }
      if (v22 == a2)
      {
        BOOL v41 = operator new(0x10uLL);
        uint64_t v42 = *(void *)(v10 + 8);
        v41[1] = v42;
        *(void *)(v10 + 8) = v41;
        *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
        if (v22 == a3) {
          unint64_t v23 = v22;
        }
        else {
          unint64_t v23 = v22 + 1;
        }
        if (v23 == a3) {
          return a3;
        }
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, a2, v22);
        if (v22 == a3) {
          unint64_t v23 = v22;
        }
        else {
          unint64_t v23 = v22 + 1;
        }
        if (v23 == a3) {
          return a3;
        }
      }
      uint64_t v43 = *(void *)(a1 + 56);
      do
      {
        long long v52 = (char *)memchr(v23, 10, a3 - v23);
        if (v52) {
          long long v53 = v52;
        }
        else {
          long long v53 = a3;
        }
        if (v53 == v23)
        {
          long long v44 = operator new(0x10uLL);
          uint64_t v45 = *(void *)(v43 + 8);
          v44[1] = v45;
          *(void *)(v43 + 8) = v44;
          *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, v23, v53);
        }
        char v46 = operator new(0x18uLL);
        uint64_t v47 = *(void *)(v43 + 8);
        v46[1] = *(void *)(v10 + 8);
        v46[2] = v47;
        *char v46 = &unk_26FCC8128;
        *(void *)(v10 + 8) = v46;
        *(void *)(v43 + 8) = 0;
        std::string v48 = operator new(0x10uLL);
        uint64_t v49 = *(void *)(*(void *)(a1 + 56) + 8);
        v48[1] = v49;
        *(void *)(v43 + 8) = v48;
        *(void *)(*(void *)(a1 + 56) + 8) = 0;
        uint64_t v50 = operator new(0x10uLL);
        uint64_t v51 = *(void *)(v43 + 8);
        void *v50 = &unk_26FCC8170;
        v50[1] = v51;
        *(void *)(*(void *)(a1 + 56) + 8) = v50;
        uint64_t v43 = *(void *)(v43 + 8);
        *(void *)(a1 + 56) = v43;
        if (v53 == a3) {
          unint64_t v23 = v53;
        }
        else {
          unint64_t v23 = v53 + 1;
        }
      }
      while (v23 != a3);
      break;
    case 0x100u:
      long long v12 = (char *)memchr(a2, 10, a3 - a2);
      if (v12) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = a3;
      }
      if (v13 == a2)
      {
        unsigned int v28 = operator new(0x10uLL);
        uint64_t v29 = *(void *)(v10 + 8);
        v28[1] = v29;
        *(void *)(v10 + 8) = v28;
        *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
        if (v13 == a3) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = v13 + 1;
        }
        if (v14 == a3) {
          return a3;
        }
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, a2, v13);
        if (v13 == a3) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = v13 + 1;
        }
        if (v14 == a3) {
          return a3;
        }
      }
      uint64_t v30 = *(void *)(a1 + 56);
      do
      {
        unint64_t v39 = (char *)memchr(v14, 10, a3 - v14);
        if (v39) {
          std::string::size_type v40 = v39;
        }
        else {
          std::string::size_type v40 = a3;
        }
        if (v40 == v14)
        {
          long long v31 = operator new(0x10uLL);
          uint64_t v32 = *(void *)(v30 + 8);
          v31[1] = v32;
          *(void *)(v30 + 8) = v31;
          *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, v14, v40);
        }
        size_t v33 = operator new(0x18uLL);
        uint64_t v34 = *(void *)(v30 + 8);
        v33[1] = *(void *)(v10 + 8);
        v33[2] = v34;
        *size_t v33 = &unk_26FCC8128;
        *(void *)(v10 + 8) = v33;
        *(void *)(v30 + 8) = 0;
        unint64_t v35 = operator new(0x10uLL);
        uint64_t v36 = *(void *)(*(void *)(a1 + 56) + 8);
        v35[1] = v36;
        *(void *)(v30 + 8) = v35;
        *(void *)(*(void *)(a1 + 56) + 8) = 0;
        uint64_t v37 = operator new(0x10uLL);
        uint64_t v38 = *(void *)(v30 + 8);
        *uint64_t v37 = &unk_26FCC8170;
        v37[1] = v38;
        *(void *)(*(void *)(a1 + 56) + 8) = v37;
        uint64_t v30 = *(void *)(v30 + 8);
        *(void *)(a1 + 56) = v30;
        if (v40 == a3) {
          uint64_t v14 = v40;
        }
        else {
          uint64_t v14 = v40 + 1;
        }
      }
      while (v14 != a3);
      break;
    default:
      goto LABEL_73;
  }
  return a3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x24C58B260](exception, 17);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_248B12F54(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  unsigned __int8 v7 = a2;
  do
  {
    unint64_t v8 = v7;
    unsigned __int8 v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, v7, a3);
    if (v7 != v8) {
      continue;
    }
    int v9 = *(std::__owns_one_state<char> **)(a1 + 56);
    int v10 = *(_DWORD *)(a1 + 28);
    unsigned int v11 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, (int)v8, (int)a3);
    if (v11 == (std::basic_regex<char> *)v8) {
      break;
    }
    unsigned __int8 v7 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v11, (std::basic_regex<char> *)a3, v9, (v10 + 1), (*(_DWORD *)(a1 + 28) + 1));
  }
  while (v7 != v8);
  if (v8 == a2)
  {
    long long v12 = operator new(0x10uLL);
    uint64_t v13 = *(void *)(a1 + 56);
    uint64_t v14 = *(void *)(v13 + 8);
    v12[1] = v14;
    *(void *)(v13 + 8) = v12;
    uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8);
    goto LABEL_8;
  }
LABEL_9:
  if (v8 != a3)
  {
    if (*v8 == 124)
    {
      uint64_t v16 = *(void *)(a1 + 56);
      long long v17 = v8 + 1;
      int v18 = v8 + 1;
      while (1)
      {
        unint64_t v8 = v18;
        int v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, v18, a3);
        if (v18 == v8)
        {
          int v19 = *(std::__owns_one_state<char> **)(a1 + 56);
          int v20 = *(_DWORD *)(a1 + 28);
          int v21 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, (int)v8, (int)a3);
          if (v21 == (std::basic_regex<char> *)v8)
          {
LABEL_16:
            if (v8 == v17)
            {
              long long v22 = operator new(0x10uLL);
              uint64_t v23 = *(void *)(a1 + 56);
              uint64_t v24 = *(void *)(v23 + 8);
              v22[1] = v24;
              *(void *)(v23 + 8) = v22;
              *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
            }
            uint64_t v25 = operator new(0x18uLL);
            uint64_t v26 = *(void *)(v16 + 8);
            v25[1] = *(void *)(v6 + 8);
            v25[2] = v26;
            void *v25 = &unk_26FCC8128;
            *(void *)(v6 + 8) = v25;
            *(void *)(v16 + 8) = 0;
            uint64_t v27 = operator new(0x10uLL);
            uint64_t v28 = *(void *)(*(void *)(a1 + 56) + 8);
            v27[1] = v28;
            *(void *)(v16 + 8) = v27;
            *(void *)(*(void *)(a1 + 56) + 8) = 0;
            uint64_t v29 = operator new(0x10uLL);
            uint64_t v30 = *(void *)(v16 + 8);
            *uint64_t v29 = &unk_26FCC8170;
            v29[1] = v30;
            *(void *)(*(void *)(a1 + 56) + 8) = v29;
            uint64_t v15 = *(void *)(v16 + 8);
LABEL_8:
            *(void *)(a1 + 56) = v15;
            goto LABEL_9;
          }
          int v18 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v21, (std::basic_regex<char> *)a3, v19, (v20 + 1), (*(_DWORD *)(a1 + 28) + 1));
        }
        if (v18 == v8) {
          goto LABEL_16;
        }
      }
    }
    return v8;
  }
  return a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(uint64_t a1, char *a2, char *a3)
{
  uint64_t v3 = (std::basic_regex<char> *)a2;
  if (a2 == a3) {
    return a2;
  }
  if (*a2 == 94)
  {
    uint64_t v6 = operator new(0x18uLL);
    BOOL v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = *(void *)(v8 + 8);
    void *v6 = &unk_26FCC7C60;
    v6[1] = v9;
    *((unsigned char *)v6 + 16) = v7;
    *(void *)(v8 + 8) = v6;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v3 = (std::basic_regex<char> *)((char *)v3 + 1);
  }
  if (v3 != (std::basic_regex<char> *)a3)
  {
    while (v3 != (std::basic_regex<char> *)a3)
    {
      int v10 = (char *)v3;
      unsigned int v11 = *(std::__owns_one_state<char> **)(a1 + 56);
      int v12 = *(_DWORD *)(a1 + 28);
      uint64_t v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, v10, a3);
      if (v13 != (unsigned __int8 *)v10)
      {
        uint64_t v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, v11, (v12 + 1), (*(_DWORD *)(a1 + 28) + 1));
        if (v3 != (std::basic_regex<char> *)v10) {
          continue;
        }
      }
      if (v10 + 1 != a3 || *v10 != 36) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      }
      uint64_t v14 = operator new(0x18uLL);
      BOOL v15 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      uint64_t v16 = *(void *)(a1 + 56);
      uint64_t v17 = *(void *)(v16 + 8);
      void *v14 = &unk_26FCC7CA8;
      v14[1] = v17;
      *((unsigned char *)v14 + 16) = v15;
      *(void *)(v16 + 8) = v14;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
      return a3;
    }
  }
  return a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v7 == a2) {
    goto LABEL_12;
  }
  do
  {
    uint64_t v8 = v7;
    BOOL v7 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, v7, a3);
  }
  while (v7 != v8);
  if (v8 == a2) {
LABEL_12:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  if (v8 == a3) {
    return a3;
  }
  while (*v8 == 124)
  {
    uint64_t v9 = *(void *)(a1 + 56);
    int v10 = v8 + 1;
    unsigned int v11 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, v8 + 1, a3);
    if (v11 == v8 + 1) {
      goto LABEL_12;
    }
    do
    {
      uint64_t v8 = v11;
      unsigned int v11 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, v11, a3);
    }
    while (v11 != v8);
    if (v8 == v10) {
      goto LABEL_12;
    }
    int v12 = operator new(0x18uLL);
    uint64_t v13 = *(void *)(v9 + 8);
    v12[1] = *(void *)(v6 + 8);
    void v12[2] = v13;
    void *v12 = &unk_26FCC8128;
    *(void *)(v6 + 8) = v12;
    *(void *)(v9 + 8) = 0;
    uint64_t v14 = operator new(0x10uLL);
    uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8);
    v14[1] = v15;
    *(void *)(v9 + 8) = v14;
    *(void *)(*(void *)(a1 + 56) + 8) = 0;
    uint64_t v16 = operator new(0x10uLL);
    uint64_t v17 = *(void *)(v9 + 8);
    *uint64_t v16 = &unk_26FCC8170;
    v16[1] = v17;
    *(void *)(*(void *)(a1 + 56) + 8) = v16;
    *(void *)(a1 + 56) = *(void *)(v9 + 8);
    if (v8 == a3) {
      return a3;
    }
  }
  return v8;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x24C58B260](exception, 14);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_248B13548(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000248B4A614) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000248B4A614 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000248B4A614)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000248B4A614 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  BOOL v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  BOOL v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  operator delete(__p);
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }
}

{
  std::__node<char> *first;
  uint64_t vars8;

  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }
  operator delete(this);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(uint64_t a1, char *a2, char *a3)
{
  if (a2 == a3) {
    return a2;
  }
  int v6 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 != a3)
      {
        int v14 = a2[1];
        if (v14 == 66)
        {
          uint64_t v15 = (char *)operator new(0x30uLL);
          uint64_t v23 = *(void *)(*(void *)(a1 + 56) + 8);
          *(void *)uint64_t v15 = &unk_26FCC7CF0;
          *((void *)v15 + 1) = v23;
          std::locale::locale((std::locale *)v15 + 2, (const std::locale *)a1);
          *(_OWORD *)(v15 + 24) = *(_OWORD *)(a1 + 8);
          v15[40] = 1;
        }
        else
        {
          if (v14 != 98) {
            return a2;
          }
          uint64_t v15 = (char *)operator new(0x30uLL);
          uint64_t v16 = *(void *)(*(void *)(a1 + 56) + 8);
          *(void *)uint64_t v15 = &unk_26FCC7CF0;
          *((void *)v15 + 1) = v16;
          std::locale::locale((std::locale *)v15 + 2, (const std::locale *)a1);
          *(_OWORD *)(v15 + 24) = *(_OWORD *)(a1 + 8);
          v15[40] = 0;
        }
        *(void *)(*(void *)(a1 + 56) + 8) = v15;
        *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
        return a2 + 2;
      }
      return a2;
    }
    if (v6 != 94) {
      return a2;
    }
    int v10 = operator new(0x18uLL);
    BOOL v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v12 = *(void *)(a1 + 56);
    v10[1] = *(void *)(v12 + 8);
    uint64_t v13 = &unk_26FCC7C60;
LABEL_14:
    void *v10 = v13;
    *((unsigned char *)v10 + 16) = v11;
    *(void *)(v12 + 8) = v10;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    return a2 + 1;
  }
  if (v6 == 36)
  {
    int v10 = operator new(0x18uLL);
    BOOL v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v12 = *(void *)(a1 + 56);
    v10[1] = *(void *)(v12 + 8);
    uint64_t v13 = &unk_26FCC7CA8;
    goto LABEL_14;
  }
  BOOL v8 = v6 == 40;
  BOOL v7 = a2 + 1;
  BOOL v8 = !v8 || v7 == a3;
  if (v8) {
    return a2;
  }
  BOOL v8 = *v7 == 63;
  uint64_t v17 = a2 + 2;
  if (!v8 || v17 == a3) {
    return a2;
  }
  int v19 = *v17;
  if (v19 == 33)
  {
    *(void *)&long long v24 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v26.__loop_count_ = v24;
    *(_OWORD *)&v26.__start_.__cntrl_ = v24;
    *(_OWORD *)&v26.__traits_.__loc_.__locale_ = v24;
    *(_OWORD *)&v26.__traits_.__col_ = v24;
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v26);
    v26.__flags_ = *(_DWORD *)(a1 + 24);
    int v21 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v26, a2 + 3, a3);
    unsigned int marked_count = v26.__marked_count_;
    std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v26, 1, *(_DWORD *)(a1 + 28));
    *(_DWORD *)(a1 + 28) += marked_count;
    if (v21 == a3 || *v21 != 41) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    goto LABEL_32;
  }
  if (v19 != 61) {
    return a2;
  }
  *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v26.__loop_count_ = v20;
  *(_OWORD *)&v26.__start_.__cntrl_ = v20;
  *(_OWORD *)&v26.__traits_.__loc_.__locale_ = v20;
  *(_OWORD *)&v26.__traits_.__col_ = v20;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v26);
  v26.__flags_ = *(_DWORD *)(a1 + 24);
  int v21 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v26, a2 + 3, a3);
  unsigned int v22 = v26.__marked_count_;
  std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v26, 0, *(_DWORD *)(a1 + 28));
  *(_DWORD *)(a1 + 28) += v22;
  if (v21 == a3 || *v21 != 41) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
  }
LABEL_32:
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v26.__traits_.__loc_);
  return v21 + 1;
}

void sub_248B13B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_248B13B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_248B13BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_248B13BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(uint64_t a1, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return a2;
  }
  int v5 = *a2;
  BOOL v7 = a2;
  switch(*a2)
  {
    case '$':
    case ')':
    case ']':
    case '^':
    case '|':
    case '}':
      return v7;
    case '(':
      if (a2 + 1 == a3) {
        goto LABEL_58;
      }
      if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
      {
        uint64_t v12 = (_DWORD *)(a1 + 36);
        ++*(_DWORD *)(a1 + 36);
        uint64_t v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(a1, a2 + 3, a3);
        if (v13 == a3) {
          goto LABEL_58;
        }
        uint64_t v3 = v13;
        if (*v13 != 41) {
          goto LABEL_58;
        }
      }
      else
      {
        if ((*(unsigned char *)(a1 + 24) & 2) != 0)
        {
          int v18 = *(_DWORD *)(a1 + 28);
        }
        else
        {
          uint64_t v17 = operator new(0x18uLL);
          int v18 = *(_DWORD *)(a1 + 28) + 1;
          *(_DWORD *)(a1 + 28) = v18;
          uint64_t v19 = *(void *)(a1 + 56);
          uint64_t v20 = *(void *)(v19 + 8);
          void *v17 = &unk_26FCC7FC0;
          v17[1] = v20;
          *((_DWORD *)v17 + 4) = v18;
          *(void *)(v19 + 8) = v17;
          *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
        }
        uint64_t v12 = (_DWORD *)(a1 + 36);
        ++*(_DWORD *)(a1 + 36);
        int v21 = std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(a1, v3 + 1, a3);
        if (v21 == a3 || (uint64_t v3 = v21, *v21 != 41)) {
LABEL_58:
        }
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        if ((*(unsigned char *)(a1 + 24) & 2) == 0)
        {
          unsigned int v22 = operator new(0x18uLL);
          uint64_t v23 = *(void *)(a1 + 56);
          uint64_t v24 = *(void *)(v23 + 8);
          void *v22 = &unk_26FCC8008;
          v22[1] = v24;
          *((_DWORD *)v22 + 4) = v18;
          *(void *)(v23 + 8) = v22;
          *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
        }
      }
      --*v12;
      return v3 + 1;
    case '*':
    case '+':
    case '?':
    case '{':
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
    case '.':
      uint64_t v9 = operator new(0x10uLL);
      uint64_t v10 = *(void *)(a1 + 56);
      uint64_t v11 = *(void *)(v10 + 8);
      void *v9 = &unk_26FCC7D80;
      v9[1] = v11;
      *(void *)(v10 + 8) = v9;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
      return v3 + 1;
    case '[':
      return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(a1, a2, a3);
    case '\\':
      if (v5 != 92) {
        return a2;
      }
      int v14 = (unsigned __int8 *)(a2 + 1);
      if (a2 + 1 == a3) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
      }
      int v15 = *v14;
      unsigned int v16 = v15 - 48;
      if (v15 != 48)
      {
        if ((v15 - 49) <= 8)
        {
          BOOL v7 = v3 + 2;
          if (v3 + 2 == a3)
          {
            BOOL v7 = a3;
          }
          else
          {
            while (1)
            {
              int v25 = *v7;
              if ((v25 - 48) > 9) {
                break;
              }
              if (v16 >= 0x19999999) {
                goto LABEL_59;
              }
              ++v7;
              unsigned int v16 = v25 + 10 * v16 - 48;
              if (v7 == a3)
              {
                BOOL v7 = a3;
                break;
              }
            }
            if (!v16) {
LABEL_59:
            }
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
          }
          if (v16 > *(_DWORD *)(a1 + 28)) {
            goto LABEL_59;
          }
          std::basic_regex<char,std::regex_traits<char>>::__push_back_ref((std::basic_regex<char> *)a1, v16);
          if (v7 != (char *)v14) {
            return v7;
          }
          LOBYTE(v15) = *v14;
        }
        switch((char)v15)
        {
          case 'D':
            std::basic_regex<char> v26 = operator new(0xB0uLL);
            std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v26, a1, *(void *)(*(void *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
            goto LABEL_50;
          case 'S':
            std::basic_regex<char> v26 = operator new(0xB0uLL);
            std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v26, a1, *(void *)(*(void *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
            goto LABEL_54;
          case 'W':
            uint64_t v28 = operator new(0xB0uLL);
            std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v28, a1, *(void *)(*(void *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
            goto LABEL_52;
          case 'd':
            std::basic_regex<char> v26 = operator new(0xB0uLL);
            std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v26, a1, *(void *)(*(void *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_50:
            *(void *)(*(void *)(a1 + 56) + 8) = v26;
            *(void *)(a1 + 56) = v26;
            int v29 = v26[40] | 0x400;
            goto LABEL_55;
          case 's':
            std::basic_regex<char> v26 = operator new(0xB0uLL);
            std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v26, a1, *(void *)(*(void *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_54:
            *(void *)(*(void *)(a1 + 56) + 8) = v26;
            *(void *)(a1 + 56) = v26;
            int v29 = v26[40] | 0x4000;
LABEL_55:
            v26[40] = v29;
            break;
          case 'w':
            uint64_t v28 = operator new(0xB0uLL);
            std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v28, a1, *(void *)(*(void *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_52:
            *(void *)(*(void *)(a1 + 56) + 8) = v28;
            *(void *)(a1 + 56) = v28;
            v28[40] |= 0x500u;
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v28, 95);
            break;
          default:
            uint64_t v27 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>((std::basic_regex<char> *)a1, v3 + 1, a3, 0);
            if (v27 == v14) {
              return v3;
            }
            else {
              return (char *)v27;
            }
        }
        return v3 + 2;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v16);
      return v3 + 2;
    default:
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v5);
      return v3 + 1;
  }
}

void sub_248B140FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_248B14110(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_248B14124(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_248B14138(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_248B1414C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_248B14160(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(uint64_t a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  if (this == a3) {
    return this;
  }
  int v6 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low <= 62)
  {
    if (locale_low == 42)
    {
      BOOL v8 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (v6) {
        BOOL v20 = 1;
      }
      else {
        BOOL v20 = v8 == a3;
      }
      if (!v20 && LOBYTE(v8->__traits_.__loc_.__locale_) == 63)
      {
        uint64_t v9 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_std::__split_buffer<std::string>::pointer begin = __mexp_begin;
        __mexp_std::__split_buffer<std::string>::pointer end = __mexp_end;
        size_t v10 = 0;
        goto LABEL_35;
      }
      __mexp_std::__split_buffer<std::string>::pointer begin = __mexp_begin;
      __mexp_std::__split_buffer<std::string>::pointer end = __mexp_end;
      size_t v24 = 0;
      goto LABEL_44;
    }
    if (locale_low == 43)
    {
      BOOL v8 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (!v6 && v8 != a3 && LOBYTE(v8->__traits_.__loc_.__locale_) == 63)
      {
        uint64_t v9 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_std::__split_buffer<std::string>::pointer begin = __mexp_begin;
        __mexp_std::__split_buffer<std::string>::pointer end = __mexp_end;
        size_t v10 = 1;
LABEL_35:
        std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v10, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 0);
        return (std::basic_regex<char> *)v9;
      }
      __mexp_std::__split_buffer<std::string>::pointer begin = __mexp_begin;
      __mexp_std::__split_buffer<std::string>::pointer end = __mexp_end;
      size_t v24 = 1;
      goto LABEL_44;
    }
    return this;
  }
  if (locale_low == 63)
  {
    int v21 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
    if (v6) {
      BOOL v22 = 1;
    }
    else {
      BOOL v22 = v21 == a3;
    }
    if (v22 || LOBYTE(v21->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 1);
      return v21;
    }
    else
    {
      uint64_t v23 = (char *)&this->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v23;
    }
  }
  else
  {
    if (locale_low != 123) {
      return this;
    }
    uint64_t v11 = (char *)&this->__traits_.__loc_.__locale_ + 1;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3) {
      goto LABEL_71;
    }
    int v12 = *v11;
    if ((v12 & 0xF8) != 0x30 && (v12 & 0xFE) != 0x38) {
      goto LABEL_71;
    }
    int v13 = v12 - 48;
    int v14 = (char *)&this->__traits_.__loc_.__locale_ + 2;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3)
    {
LABEL_19:
      int v14 = (char *)a3;
    }
    else
    {
      while (1)
      {
        int v15 = *v14;
        if ((v15 & 0xF8) != 0x30 && (v15 & 0xFE) != 0x38) {
          break;
        }
        if (v13 >= 214748364) {
          goto LABEL_71;
        }
        int v13 = v15 + 10 * v13 - 48;
        if (++v14 == (char *)a3) {
          goto LABEL_19;
        }
      }
    }
    if (v14 == v11) {
      goto LABEL_71;
    }
    if (v14 == (char *)a3) {
      goto LABEL_72;
    }
    int v16 = *v14;
    if (v16 != 44)
    {
      if (v16 == 125)
      {
        uint64_t v17 = (std::basic_regex<char> *)(v14 + 1);
        if (v6 || v17 == a3 || LOBYTE(v17->__traits_.__loc_.__locale_) != 63)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v13, a4, __mexp_begin, __mexp_end, 1);
          return v17;
        }
        else
        {
          int v18 = (unsigned __int8 *)(v14 + 2);
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v13, a4, __mexp_begin, __mexp_end, 0);
          return (std::basic_regex<char> *)v18;
        }
      }
LABEL_71:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
    }
    int v25 = (std::basic_regex<char> *)(v14 + 1);
    if (v14 + 1 == (char *)a3) {
      goto LABEL_71;
    }
    int v26 = LOBYTE(v25->__traits_.__loc_.__locale_);
    if (v26 == 125)
    {
      BOOL v8 = (std::basic_regex<char> *)(v14 + 2);
      if (!v6 && v8 != a3 && LOBYTE(v8->__traits_.__loc_.__locale_) == 63)
      {
        size_t v10 = v13;
        uint64_t v9 = v14 + 3;
        __mexp_std::__split_buffer<std::string>::pointer begin = __mexp_begin;
        __mexp_std::__split_buffer<std::string>::pointer end = __mexp_end;
        goto LABEL_35;
      }
      size_t v24 = v13;
      __mexp_std::__split_buffer<std::string>::pointer begin = __mexp_begin;
      __mexp_std::__split_buffer<std::string>::pointer end = __mexp_end;
LABEL_44:
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v24, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
      return v8;
    }
    if ((v26 & 0xF8) != 0x30 && (v26 & 0xFE) != 0x38) {
      goto LABEL_72;
    }
    int v27 = v26 - 48;
    uint64_t v28 = (std::basic_regex<char> *)(v14 + 2);
    if (v28 == a3)
    {
LABEL_60:
      uint64_t v28 = a3;
    }
    else
    {
      while (1)
      {
        int v29 = LOBYTE(v28->__traits_.__loc_.__locale_);
        if ((v29 & 0xF8) != 0x30 && (v29 & 0xFE) != 0x38) {
          break;
        }
        if (v27 >= 214748364) {
          goto LABEL_71;
        }
        int v27 = v29 + 10 * v27 - 48;
        uint64_t v28 = (std::basic_regex<char> *)((char *)v28 + 1);
        if (v28 == a3) {
          goto LABEL_60;
        }
      }
    }
    if (v28 == v25 || v28 == a3 || LOBYTE(v28->__traits_.__loc_.__locale_) != 125) {
LABEL_72:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    if (v27 < v13) {
      goto LABEL_71;
    }
    uint64_t v30 = (std::basic_regex<char> *)((char *)&v28->__traits_.__loc_.__locale_ + 1);
    if (v6 || v30 == a3 || LOBYTE(v30->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v27, a4, __mexp_begin, __mexp_end, 1);
      return v30;
    }
    else
    {
      long long v31 = (char *)&v28->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v27, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v31;
    }
  }
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](uint64_t a1)
{
  BOOL v2 = (const std::locale *)MEMORY[0x24C58B560]();
  *(void *)(a1 + 8) = std::locale::use_facet(v2, MEMORY[0x263F8C108]);
  *(void *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x263F8C130]);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  return a1;
}

void sub_248B14800(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
  BOOL v8 = (char *)operator new(0x58uLL);
  first = this->__end_->__first_;
  *(void *)BOOL v8 = &unk_26FCC7D38;
  *((void *)v8 + 1) = first;
  std::locale::locale((std::locale *)v8 + 2, &a2->__traits_.__loc_);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)&a2->__traits_.__ct_;
  *(_OWORD *)(v8 + 40) = *(_OWORD *)&a2->__flags_;
  cntrl = a2->__start_.__cntrl_;
  *((void *)v8 + 7) = a2->__start_.__ptr_;
  *((void *)v8 + 8) = cntrl;
  if (cntrl) {
    atomic_fetch_add_explicit(&cntrl->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v8 + 9) = a2->__end_;
  *((_DWORD *)v8 + 20) = a4;
  v8[84] = a3;
  this->__end_->__first_ = (std::__node<char> *)v8;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x24C58B260](exception, 6);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_248B14918(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  BOOL v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  BOOL v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  operator delete(__p);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 92))
  {
    if (!*(unsigned char *)(result + 16)) {
      goto LABEL_12;
    }
    int v2 = *(unsigned __int8 *)(*(void *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10) {
      goto LABEL_12;
    }
LABEL_11:
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 80) = *(void *)(result + 8);
    return result;
  }
  if (*(void *)(a2 + 16) == *(void *)(a2 + 8) && (*(unsigned char *)(a2 + 88) & 1) == 0) {
    goto LABEL_11;
  }
LABEL_12:
  *(_DWORD *)a2 = -993;
  *(void *)(a2 + 80) = 0;
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  int v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  operator delete(__p);
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(unsigned char *)(a2 + 88) & 2) == 0
    || *(unsigned char *)(result + 16) && ((int v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 80) = *(void *)(result + 8);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  return result;
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26FCC7CF0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26FCC7CF0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  operator delete(a1);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 8);
  int v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3) {
    goto LABEL_19;
  }
  BOOL v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 != v3)
  {
    if (v4 == v2)
    {
      int v5 = *(_DWORD *)(a2 + 88);
      if ((v5 & 0x80) == 0)
      {
        if ((v5 & 4) == 0)
        {
          uint64_t v6 = *v2;
          if (v6 == 95) {
            goto LABEL_17;
          }
          goto LABEL_15;
        }
        goto LABEL_19;
      }
    }
    uint64_t v7 = *(v4 - 1);
    uint64_t v8 = *v4;
    if (v7 == 95
      || (v7 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v7) & 0x500) != 0)
    {
      int v9 = 1;
      if (v8 == 95) {
        goto LABEL_24;
      }
    }
    else
    {
      int v9 = 0;
      if (v8 == 95) {
        goto LABEL_24;
      }
    }
    if ((v8 & 0x80) != 0 || (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v8) & 0x500) == 0)
    {
      if (*(unsigned char *)(result + 40) == (v9 != 0)) {
        goto LABEL_20;
      }
      goto LABEL_27;
    }
LABEL_24:
    if (*(unsigned char *)(result + 40) != (v9 != 1)) {
      goto LABEL_27;
    }
    goto LABEL_20;
  }
  if ((*(unsigned char *)(a2 + 88) & 8) == 0)
  {
    uint64_t v6 = *(v3 - 1);
    if (v6 == 95) {
      goto LABEL_17;
    }
LABEL_15:
    if ((v6 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
    {
LABEL_17:
      if (*(unsigned char *)(result + 40) != 1) {
        goto LABEL_27;
      }
LABEL_20:
      *(_DWORD *)a2 = -993;
      *(void *)(a2 + 80) = 0;
      return result;
    }
  }
LABEL_19:
  if (!*(unsigned char *)(result + 40)) {
    goto LABEL_20;
  }
LABEL_27:
  uint64_t v10 = *(void *)(result + 8);
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = v10;
  return result;
}

std::locale *std::__lookahead<char,std::regex_traits<char>>::~__lookahead(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26FCC7D38;
  int v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale && !atomic_fetch_add(&locale->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
    std::__shared_weak_count::__release_weak(locale);
    std::locale::~locale(v2);
    BOOL v4 = a1[1].__locale_;
    if (!v4) {
      return a1;
    }
    goto LABEL_4;
  }
  std::locale::~locale(a1 + 2);
  BOOL v4 = a1[1].__locale_;
  if (v4) {
LABEL_4:
  }
    (*(void (**)(std::locale::__imp *))(*(void *)v4 + 8))(v4);
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26FCC7D38;
  int v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (!locale || atomic_fetch_add(&locale->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    std::locale::~locale(a1 + 2);
    BOOL v4 = a1[1].__locale_;
    if (!v4) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
  std::__shared_weak_count::__release_weak(locale);
  std::locale::~locale(v2);
  BOOL v4 = a1[1].__locale_;
  if (v4) {
LABEL_4:
  }
    (*(void (**)(std::locale::__imp *))(*(void *)v4 + 8))(v4);
LABEL_5:
  operator delete(a1);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v20 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v22 = 0xAAAAAAAAAAAAAA00;
  long long v24 = v4;
  uint64_t v21 = 0;
  long long v23 = 0uLL;
  LOBYTE(v24) = 0;
  BYTE8(v24) = 0;
  uint64_t v25 = 0;
  memset(&__p, 0, sizeof(__p));
  std::vector<std::csub_match>::size_type v5 = (*(_DWORD *)(a1 + 44) + 1);
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)&long long v19 = *(void *)(a2 + 24);
  *((void *)&v19 + 1) = v19;
  LOBYTE(v20) = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v5, (std::vector<std::csub_match>::const_reference)&v19);
  *((void *)&v20 + 1) = v6;
  uint64_t v21 = v6;
  LOBYTE(v22) = 0;
  long long v23 = v19;
  LOBYTE(v24) = v20;
  uint64_t v25 = v6;
  BYTE8(v24) = 1;
  uint64_t v7 = *(const char **)(a2 + 16);
  if (*(unsigned char *)(a2 + 92)) {
    BOOL v8 = v7 == *(const char **)(a2 + 8);
  }
  else {
    BOOL v8 = 0;
  }
  char v9 = v8;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v7, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v9))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    std::__split_buffer<std::string>::pointer begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(a1 + 8);
  std::__split_buffer<std::string>::pointer begin = __p.__begin_;
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v11 < 2)
  {
LABEL_13:
    if (!begin) {
      return;
    }
    goto LABEL_14;
  }
  int v12 = 0;
  int v13 = *(_DWORD *)(a1 + 80);
  uint64_t v14 = *(void *)(a2 + 32);
  unint64_t v15 = 1;
  do
  {
    int v16 = &begin[v15];
    uint64_t v17 = v14 + 24 * (v13 + v12);
    *(std::pair<const char *, const char *> *)uint64_t v17 = v16->std::pair<const char *, const char *>;
    *(unsigned char *)(v17 + 16) = v16->matched;
    unint64_t v15 = (v12 + 2);
    ++v12;
  }
  while (v11 > v15);
LABEL_14:
  __p.__end_ = begin;
  operator delete(begin);
}

void sub_248B151E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  std::string v48 = 0;
  uint64_t v49 = 0;
  unint64_t v50 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6) {
    return 0;
  }
  __x.second = a3;
  *(void *)&__x.matched = 0xAAAAAAAAAAAAAA00;
  __x.first = a3;
  *(_DWORD *)char v46 = 0;
  memset(&v46[8], 0, 85);
  uint64_t v49 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v48, (uint64_t)v46);
  if (*(void *)&v46[56])
  {
    *(void *)&v46[64] = *(void *)&v46[56];
    operator delete(*(void **)&v46[56]);
  }
  if (*(void *)&v46[32])
  {
    *(void *)&v46[40] = *(void *)&v46[32];
    operator delete(*(void **)&v46[32]);
  }
  int v13 = v49;
  *((_DWORD *)v49 - 24) = 0;
  *((void *)v13 - 11) = a2;
  *((void *)v13 - 10) = a2;
  *((void *)v13 - 9) = a3;
  uint64_t v14 = *((void *)v13 - 8);
  unint64_t v15 = *(unsigned int *)(a1 + 28);
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)v13 - 7) - v14) >> 3);
  if (v15 <= v16)
  {
    if (v15 < v16) {
      *((void *)v13 - 7) = v14 + 24 * v15;
    }
  }
  else
  {
    std::vector<std::sub_match<char const*>>::__append((std::vector<std::csub_match> *)(v13 - 64), v15 - v16, &__x);
    int v13 = v49;
  }
  uint64_t v18 = *((void *)v13 - 5);
  unint64_t v19 = *(unsigned int *)(a1 + 32);
  unint64_t v20 = (*((void *)v13 - 4) - v18) >> 4;
  if (v19 <= v20)
  {
    if (v19 < v20) {
      *((void *)v13 - 4) = v18 + 16 * v19;
    }
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append((std::vector<std::pair<unsigned long, const char *>> *)(v13 - 40), v19 - v20);
    int v13 = v49;
  }
  *((void *)v13 - 2) = v6;
  *((_DWORD *)v13 - 2) = a5;
  *(v13 - 4) = a6;
  unsigned int v21 = 1;
  while (2)
  {
    if ((v21 & 0xFFF) == 0 && (int)(v21 >> 12) >= (int)a3 - (int)a2) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    }
    uint64_t v23 = *((void *)v13 - 2);
    if (v23) {
      (*(void (**)(uint64_t, char *))(*(void *)v23 + 16))(v23, v13 - 96);
    }
    switch(*((_DWORD *)v13 - 24))
    {
      case 0xFFFFFC18:
        long long v24 = (const char *)*((void *)v13 - 10);
        if ((a5 & 0x20) != 0 && v24 == a2 || (a5 & 0x1000) != 0 && v24 != a3) {
          goto LABEL_27;
        }
        uint64_t v37 = *a4;
        *(void *)uint64_t v37 = a2;
        *(void *)(v37 + 8) = v24;
        *(unsigned char *)(v37 + 16) = 1;
        uint64_t v38 = *((void *)v13 - 8);
        uint64_t v39 = *((void *)v13 - 7) - v38;
        if (v39)
        {
          unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * (v39 >> 3);
          BOOL v41 = (unsigned char *)(v38 + 16);
          unsigned int v42 = 1;
          do
          {
            uint64_t v43 = v37 + 24 * v42;
            *(_OWORD *)uint64_t v43 = *((_OWORD *)v41 - 1);
            char v44 = *v41;
            v41 += 24;
            *(unsigned char *)(v43 + 16) = v44;
          }
          while (v40 > v42++);
        }
        uint64_t v17 = 1;
        unint64_t v22 = v48;
        if (!v48) {
          return v17;
        }
        goto LABEL_38;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_17;
      case 0xFFFFFC1F:
LABEL_27:
        uint64_t v25 = v49;
        int v26 = (void *)*((void *)v49 - 5);
        if (v26)
        {
          *((void *)v49 - 4) = v26;
          operator delete(v26);
        }
        int v27 = (void *)*((void *)v25 - 8);
        if (v27)
        {
          *((void *)v25 - 7) = v27;
          operator delete(v27);
        }
        uint64_t v49 = v25 - 96;
        goto LABEL_17;
      case 0xFFFFFC20:
        *(void *)&long long v28 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v28 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v46[64] = v28;
        *(_OWORD *)&v46[80] = v28;
        *(_OWORD *)&v46[32] = v28;
        *(_OWORD *)&v46[48] = v28;
        *(_OWORD *)char v46 = v28;
        *(_OWORD *)&v46[16] = v28;
        std::__state<char>::__state((uint64_t)v46, (long long *)v13 - 6);
        (*(void (**)(void, uint64_t, char *))(**((void **)v13 - 2) + 24))(*((void *)v13 - 2), 1, v13 - 96);
        (*(void (**)(void, void, unsigned char *))(**(void **)&v46[80] + 24))(*(void *)&v46[80], 0, v46);
        int v29 = v49;
        if ((unint64_t)v49 >= v50)
        {
          uint64_t v49 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v48, (uint64_t)v46);
          if (*(void *)&v46[56])
          {
            *(void *)&v46[64] = *(void *)&v46[56];
            operator delete(*(void **)&v46[56]);
          }
        }
        else
        {
          long long v30 = *(_OWORD *)&v46[16];
          *(_OWORD *)uint64_t v49 = *(_OWORD *)v46;
          *((_OWORD *)v29 + 1) = v30;
          *((void *)v29 + 4) = 0;
          *((void *)v29 + 5) = 0;
          *((void *)v29 + 6) = 0;
          *((void *)v29 + 7) = 0;
          *((_OWORD *)v29 + 2) = *(_OWORD *)&v46[32];
          *((void *)v29 + 6) = *(void *)&v46[48];
          memset(&v46[32], 0, 24);
          *((void *)v29 + 8) = 0;
          *((void *)v29 + 9) = 0;
          *(_OWORD *)(v29 + 56) = *(_OWORD *)&v46[56];
          *((void *)v29 + 9) = *(void *)&v46[72];
          memset(&v46[56], 0, 24);
          uint64_t v31 = *(void *)&v46[80];
          *(void *)(v29 + 85) = *(void *)&v46[85];
          *((void *)v29 + 10) = v31;
          uint64_t v49 = v29 + 96;
        }
        if (*(void *)&v46[32])
        {
          *(void *)&v46[40] = *(void *)&v46[32];
          operator delete(*(void **)&v46[32]);
        }
LABEL_17:
        unint64_t v22 = v48;
        int v13 = v49;
        ++v21;
        if (v48 != v49) {
          continue;
        }
        uint64_t v17 = 0;
        if (v48)
        {
LABEL_38:
          uint64_t v32 = v49;
          size_t v33 = v22;
          if (v49 != v22)
          {
            do
            {
              uint64_t v34 = (void *)*((void *)v32 - 5);
              if (v34)
              {
                *((void *)v32 - 4) = v34;
                operator delete(v34);
              }
              unint64_t v35 = (void *)*((void *)v32 - 8);
              if (v35)
              {
                *((void *)v32 - 7) = v35;
                operator delete(v35);
              }
              v32 -= 96;
            }
            while (v32 != v22);
            size_t v33 = v48;
          }
          uint64_t v49 = v22;
          operator delete(v33);
        }
        break;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
    return v17;
  }
}

void sub_248B15660(_Unwind_Exception *a1)
{
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_248B15674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__state<char>::~__state((uint64_t *)va);
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v3 - 112));
  _Unwind_Resume(a1);
}

void sub_248B156BC(_Unwind_Exception *a1)
{
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_248B156D0(_Unwind_Exception *a1)
{
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  value = this->__end_cap_.__value_;
  std::__split_buffer<std::string>::pointer begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) < __n)
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_26;
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    std::vector<std::csub_match>::size_type v9 = 2 * v8;
    if (2 * v8 <= __n) {
      std::vector<std::csub_match>::size_type v9 = __n;
    }
    unint64_t v10 = v8 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v9;
    if (v10 > 0xAAAAAAAAAAAAAAALL) {
LABEL_26:
    }
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    uint64_t v11 = v10;
    int v12 = (std::sub_match<const char *> *)operator new(24 * v10);
    this->__begin_ = v12;
    this->__end_ = v12;
    this->__end_cap_.__value_ = &v12[v11];
    std::vector<std::csub_match>::size_type v13 = 24 * __n;
    uint64_t v14 = &v12[__n];
    do
    {
      v12->std::pair<const char *, const char *> = __u->std::pair<const char *, const char *>;
      *(void *)&v12->matched = *(void *)&__u->matched;
      ++v12;
      v13 -= 24;
    }
    while (v13);
    goto LABEL_25;
  }
  std::vector<std::csub_match>::pointer end = this->__end_;
  unint64_t v16 = end - begin;
  if (v16 >= __n) {
    std::vector<std::csub_match>::size_type v17 = __n;
  }
  else {
    std::vector<std::csub_match>::size_type v17 = end - begin;
  }
  if (v17)
  {
    uint64_t v18 = begin;
    do
    {
      *v18++ = *__u;
      --v17;
    }
    while (v17);
  }
  if (__n <= v16)
  {
    uint64_t v14 = &begin[__n];
LABEL_25:
    this->__end_ = v14;
    return;
  }
  unint64_t v19 = &end[__n - v16];
  std::vector<std::csub_match>::size_type v20 = 24 * __n - 24 * v16;
  do
  {
    std::pair<const char *, const char *> v21 = __u->std::pair<const char *, const char *>;
    *(void *)&end->matched = *(void *)&__u->matched;
    end->std::pair<const char *, const char *> = v21;
    ++end;
    v20 -= 24;
  }
  while (v20);
  this->__end_ = v19;
}

void *std::__state<char>::~__state(void *a1)
{
  int v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x24C58B260](exception, 12);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_248B15930(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x24C58B260](exception, 16);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_248B15988(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void **std::vector<std::__state<char>>::~vector[abi:ne180100](void **a1)
{
  int v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    long long v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        std::vector<std::csub_match>::size_type v5 = (void *)*((void *)v3 - 5);
        if (v5)
        {
          *((void *)v3 - 4) = v5;
          operator delete(v5);
        }
        uint64_t v6 = (void *)*((void *)v3 - 8);
        if (v6)
        {
          *((void *)v3 - 7) = v6;
          operator delete(v6);
        }
        v3 -= 96;
      }
      while (v3 != v2);
      long long v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char *std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) >= 0x155555555555555) {
    unint64_t v6 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(96 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  long long v8 = *(_OWORD *)(a2 + 16);
  std::vector<std::csub_match>::size_type v9 = &v7[96 * v3];
  *(_OWORD *)std::vector<std::csub_match>::size_type v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  unint64_t v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v9 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(v9 + 85) = *(void *)(a2 + 85);
  uint64_t v11 = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 80);
  *((void *)v9 + 9) = 0;
  *((void *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v9 + 9) = v11;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  std::vector<std::csub_match>::size_type v13 = v9 + 96;
  uint64_t v14 = (char *)*a1;
  unint64_t v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
  }
  else
  {
    uint64_t v16 = 0;
    do
    {
      std::vector<std::csub_match>::size_type v17 = &v9[v16];
      uint64_t v18 = &v15[v16];
      long long v19 = *(_OWORD *)&v15[v16 - 80];
      *((_OWORD *)v17 - 6) = *(_OWORD *)&v15[v16 - 96];
      *((_OWORD *)v17 - 5) = v19;
      *((void *)v17 - 7) = 0;
      *((void *)v17 - 6) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
      *((void *)v17 - 6) = *(void *)&v15[v16 - 48];
      *((void *)v18 - 8) = 0;
      *((void *)v18 - 7) = 0;
      *((void *)v18 - 6) = 0;
      *((void *)v17 - 4) = 0;
      *((void *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)&v15[v16 - 40];
      *((void *)v17 - 3) = *(void *)&v15[v16 - 24];
      *((void *)v18 - 5) = 0;
      *((void *)v18 - 4) = 0;
      *((void *)v18 - 3) = 0;
      uint64_t v20 = *(void *)&v15[v16 - 16];
      *(void *)(v17 - 11) = *(void *)&v15[v16 - 11];
      *((void *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (&v15[v16] != v14);
    unint64_t v15 = (char *)*a1;
    std::pair<const char *, const char *> v21 = (char *)a1[1];
    *a1 = &v9[v16];
    a1[1] = v13;
    a1[2] = v10;
    while (v21 != v15)
    {
      unint64_t v22 = (void *)*((void *)v21 - 5);
      if (v22)
      {
        *((void *)v21 - 4) = v22;
        operator delete(v22);
      }
      uint64_t v23 = (void *)*((void *)v21 - 8);
      if (v23)
      {
        *((void *)v21 - 7) = v23;
        operator delete(v23);
      }
      v21 -= 96;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

void std::vector<std::sub_match<char const*>>::__append(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __x)
{
  std::vector<std::csub_match>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= __n)
  {
    if (__n)
    {
      std::vector<std::csub_match>::size_type v13 = &end[__n];
      std::vector<std::csub_match>::size_type v14 = 24 * __n;
      do
      {
        std::pair<const char *, const char *> v15 = __x->std::pair<const char *, const char *>;
        *(void *)&end->matched = *(void *)&__x->matched;
        end->std::pair<const char *, const char *> = v15;
        ++end;
        v14 -= 24;
      }
      while (v14);
      std::vector<std::csub_match>::pointer end = v13;
    }
    this->__end_ = end;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
    unint64_t v9 = v8 + __n;
    if (v8 + __n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v12 = (char *)operator new(24 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v16 = (std::sub_match<const char *> *)&v12[24 * v8];
    std::vector<std::csub_match>::size_type v17 = 24 * __n;
    uint64_t v18 = &v16[__n];
    long long v19 = v16;
    do
    {
      std::pair<const char *, const char *> v20 = __x->std::pair<const char *, const char *>;
      v19[1].first = *(const char **)&__x->matched;
      *long long v19 = v20;
      long long v19 = (std::pair<const char *, const char *> *)((char *)v19 + 24);
      v17 -= 24;
    }
    while (v17);
    std::vector<std::csub_match>::pointer begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        std::pair<const char *, const char *> v22 = end[-1].std::pair<const char *, const char *>;
        *(void *)&v16[-1].matched = *(void *)&end[-1].matched;
        v16[-1].std::pair<const char *, const char *> = v22;
        --v16;
        --end;
      }
      while (end != begin);
      std::vector<std::csub_match>::pointer end = this->__begin_;
    }
    this->__begin_ = v16;
    this->__end_ = v18;
    this->__end_cap_.__value_ = (std::sub_match<const char *> *)&v12[24 * v11];
    if (end)
    {
      operator delete(end);
    }
  }
}

void std::vector<std::pair<unsigned long,char const*>>::__append(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __n)
{
  std::vector<std::csub_match>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      std::vector<std::pair<unsigned long, const char *>>::size_type v12 = 16 * __n;
      bzero(this->__end_, 16 * __n);
      std::vector<std::csub_match>::pointer end = (std::pair<unsigned long, const char *> *)((char *)end + v12);
    }
    this->__end_ = end;
  }
  else
  {
    std::vector<std::pair<unsigned long, const char *>>::pointer begin = this->__begin_;
    uint64_t v7 = end - this->__begin_;
    unint64_t v8 = v7 + __n;
    if ((v7 + __n) >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = (char *)value - (char *)begin;
    if (v9 >> 3 > v8) {
      unint64_t v8 = v9 >> 3;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 60) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v11 = (char *)operator new(16 * v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    std::vector<std::csub_match>::size_type v13 = (std::pair<unsigned long, const char *> *)&v11[16 * v7];
    size_t v14 = __n;
    std::pair<const char *, const char *> v15 = (std::pair<unsigned long, const char *> *)&v11[16 * v10];
    bzero(v13, v14 * 16);
    uint64_t v16 = &v13[v14];
    if (end != begin)
    {
      do
      {
        v13[-1] = end[-1];
        --v13;
        --end;
      }
      while (end != begin);
      std::vector<std::csub_match>::pointer end = this->__begin_;
    }
    this->__begin_ = v13;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v15;
    if (end)
    {
      operator delete(end);
    }
  }
}

uint64_t std::__state<char>::__state(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v7 = (unsigned char *)*((void *)a2 + 4);
  unint64_t v6 = (unsigned char *)*((void *)a2 + 5);
  int64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v8 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = (char *)operator new(v8);
    *(void *)(a1 + 32) = v9;
    *(void *)(a1 + 40) = v9;
    *(void *)(a1 + 48) = &v9[8 * (v8 >> 3)];
    size_t v10 = 24 * ((v8 - 24) / 0x18uLL) + 24;
    memcpy(v9, v7, v10);
    *(void *)(a1 + 40) = &v9[v10];
  }
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<std::pair<unsigned long, const char *>>::size_type v12 = (unsigned char *)*((void *)a2 + 7);
  unint64_t v11 = (unsigned char *)*((void *)a2 + 8);
  uint64_t v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    size_t v14 = (char *)operator new(v11 - v12);
    *(void *)(a1 + 56) = v14;
    *(void *)(a1 + 64) = v14;
    *(void *)(a1 + 72) = &v14[16 * (v13 >> 4)];
    memcpy(v14, v12, v13 & 0xFFFFFFFFFFFFFFF0);
    *(void *)(a1 + 64) = &v14[v13 & 0xFFFFFFFFFFFFFFF0];
  }
  uint64_t v15 = *((void *)a2 + 10);
  *(void *)(a1 + 85) = *(void *)((char *)a2 + 85);
  *(void *)(a1 + 80) = v15;
  return a1;
}

void sub_248B1602C(_Unwind_Exception *exception_object)
{
  long long v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 64) = v5;
    operator delete(v5);
  }
  unint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3) {
      goto LABEL_172;
    }
    int v5 = a2[1];
    char v6 = v5 == 94;
    uint64_t v7 = (uint64_t)(v5 == 94 ? a2 + 2 : a2 + 1);
    int64_t v8 = operator new(0xB0uLL);
    std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v8, a1, *(void *)(*(void *)(a1 + 56) + 8), v6, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
    *(void *)(*(void *)(a1 + 56) + 8) = v8;
    *(void *)(a1 + 56) = v8;
    if ((char *)v7 == a3) {
      goto LABEL_172;
    }
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *(unsigned char *)v7 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 93);
      ++v7;
    }
    if ((char *)v7 == a3) {
      goto LABEL_172;
    }
    long long v53 = a3 - 4;
    while (1)
    {
      uint64_t v9 = (char *)v7;
      size_t v10 = a3;
      if ((char *)v7 == a3) {
        goto LABEL_14;
      }
      int v11 = *(unsigned __int8 *)v7;
      size_t v10 = (char *)v7;
      if (v11 == 93) {
        goto LABEL_14;
      }
      size_t v10 = (char *)(v7 + 1);
      memset(&__p, 0, sizeof(__p));
      if ((char *)(v7 + 1) != a3 && v11 == 91)
      {
        int v12 = *v10;
        switch(v12)
        {
          case '.':
            std::vector<std::csub_match>::size_type v17 = (unsigned char *)(v7 + 2);
            if ((uint64_t)&a3[-v7 - 2] < 2) {
              goto LABEL_171;
            }
            uint64_t v18 = &v53[-v7];
            long long v19 = (char *)(v7 + 2);
            std::pair<const char *, const char *> v20 = (char *)(v7 + 3);
            if (*v17 != 46) {
              goto LABEL_44;
            }
LABEL_43:
            if (*v20 != 93)
            {
LABEL_44:
              while (v18)
              {
                --v18;
                long long v19 = v20;
                int v21 = *v20++;
                if (v21 == 46) {
                  goto LABEL_43;
                }
              }
LABEL_171:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
            }
            if (v19 == a3) {
              goto LABEL_171;
            }
            std::regex_traits<char>::__lookup_collatename<char const*>((uint64_t)&__dst, a1, v17, v19);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            std::string __p = __dst;
            std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type size = __p.__r_.__value_.__l.__size_;
            }
            if (size - 1 >= 2) {
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
            }
            size_t v10 = v19 + 2;
            uint64_t v7 = *(_DWORD *)(a1 + 24) & 0x1F0;
LABEL_59:
            if (v10 == a3) {
              goto LABEL_61;
            }
            goto LABEL_60;
          case ':':
            if ((uint64_t)&a3[-v7 - 2] < 2) {
              goto LABEL_171;
            }
            std::string::size_type v15 = 0;
            uint64_t v16 = v7;
            if (*(unsigned char *)(v7 + 2) != 58) {
              goto LABEL_38;
            }
LABEL_37:
            if (*(unsigned char *)(v16 + 3) != 93)
            {
LABEL_38:
              while (&v53[-v7] != (char *)v15)
              {
                ++v15;
                uint64_t v16 = v7 + v15;
                if (*(unsigned char *)(v7 + v15 + 2) == 58) {
                  goto LABEL_37;
                }
              }
              goto LABEL_171;
            }
            if ((char *)(v7 + v15 + 2) == a3) {
              goto LABEL_171;
            }
            int v22 = *(_DWORD *)(a1 + 24);
            memset(&__dst, 170, sizeof(__dst));
            if (v15 >= 0x7FFFFFFFFFFFFFF8) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            if (v15 >= 0x17)
            {
              uint64_t v38 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v15 | 7) != 0x17) {
                uint64_t v38 = v15 | 7;
              }
              uint64_t v39 = v38 + 1;
              p_dst = (std::string *)operator new(v38 + 1);
              __dst.__r_.__value_.__l.__size_ = v15;
              __dst.__r_.__value_.__r.__words[2] = v39 | 0x8000000000000000;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
            }
            else
            {
              *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v15;
              p_dst = &__dst;
              if (!v15)
              {
LABEL_96:
                p_dst->__r_.__value_.__s.__data_[0] = 0;
                std::string::size_type v40 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
                if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  BOOL v41 = &__dst;
                }
                else {
                  BOOL v41 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                }
                if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string::size_type v40 = __dst.__r_.__value_.__l.__size_;
                }
                (*(void (**)(void, std::string *, char *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), v41, (char *)v41 + v40);
                if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  unsigned int v42 = &__dst;
                }
                else {
                  unsigned int v42 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                }
                std::regex_traits<char>::char_class_type classname = std::__get_classname((const char *)v42, v22 & 1);
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__dst.__r_.__value_.__l.__data_);
                }
                if (!classname) {
                  std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
                }
                char v37 = 0;
                *((_DWORD *)v8 + 40) |= classname;
                uint64_t v7 = (uint64_t)&v9[v15 + 4];
                long long v28 = v9;
                if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_88:
                  size_t v10 = v28;
                  if ((v37 & 1) == 0) {
                    goto LABEL_15;
                  }
                  goto LABEL_14;
                }
                goto LABEL_162;
              }
            }
            memcpy(p_dst, v9 + 2, v15);
            p_dst = (std::string *)((char *)p_dst + v15);
            goto LABEL_96;
          case '=':
            if ((uint64_t)&a3[-v7 - 2] < 2) {
              goto LABEL_171;
            }
            uint64_t v13 = 0;
            uint64_t v14 = v7;
            if (*(unsigned char *)(v7 + 2) != 61) {
              goto LABEL_26;
            }
LABEL_25:
            if (*(unsigned char *)(v14 + 3) != 93)
            {
LABEL_26:
              while (&v53[-v7] != v13)
              {
                ++v13;
                uint64_t v14 = (uint64_t)&v13[v7];
                if (v13[v7 + 2] == 61) {
                  goto LABEL_25;
                }
              }
              goto LABEL_171;
            }
            uint64_t v34 = &v13[v7 + 2];
            if (v34 == a3) {
              goto LABEL_171;
            }
            memset(&__dst, 170, sizeof(__dst));
            std::regex_traits<char>::__lookup_collatename<char const*>((uint64_t)&__dst, a1, (unsigned char *)(v7 + 2), v34);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::size_type v35 = __dst.__r_.__value_.__l.__size_;
              if (!__dst.__r_.__value_.__l.__size_) {
LABEL_174:
              }
                std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
              memset(&v56, 170, sizeof(v56));
              uint64_t v36 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            }
            else
            {
              std::string::size_type v35 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
              if (!*((unsigned char *)&__dst.__r_.__value_.__s + 23)) {
                goto LABEL_174;
              }
              uint64_t v36 = &__dst;
              memset(&v56, 170, sizeof(v56));
            }
            std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(a1, (uint64_t)v36, (char *)v36 + v35, &v56.__r_.__value_.__l.__data_);
            std::string::size_type v45 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
            if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v45 = v56.__r_.__value_.__l.__size_;
            }
            if (v45)
            {
              unint64_t v46 = *((void *)v8 + 18);
              if (v46 >= *((void *)v8 + 19))
              {
                *((void *)v8 + 18) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)v8 + 17, (uint64_t)&v56);
                if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
                  goto LABEL_143;
                }
              }
              else
              {
                if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external(*((std::string **)v8 + 18), v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_);
                }
                else
                {
                  long long v47 = *(_OWORD *)&v56.__r_.__value_.__l.__data_;
                  *(void *)(v46 + 16) = *((void *)&v56.__r_.__value_.__l + 2);
                  *(_OWORD *)unint64_t v46 = v47;
                }
                *((void *)v8 + 18) = v46 + 24;
                *((void *)v8 + 18) = v46 + 24;
                if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
                  goto LABEL_143;
                }
              }
LABEL_136:
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_137;
              }
            }
            else
            {
              std::string::size_type v48 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
              if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v48 = __dst.__r_.__value_.__l.__size_;
              }
              if (v48 == 2)
              {
                if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  unint64_t v50 = &__dst;
                }
                else {
                  unint64_t v50 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                }
                std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)v8, v50->__r_.__value_.__s.__data_[0], v50->__r_.__value_.__s.__data_[1]);
              }
              else
              {
                if (v48 != 1) {
                  std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
                }
                if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v49 = &__dst;
                }
                else {
                  uint64_t v49 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                }
                std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, v49->__r_.__value_.__s.__data_[0]);
              }
              if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_136;
              }
LABEL_143:
              operator delete(v56.__r_.__value_.__l.__data_);
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_137:
                char v37 = 0;
                v7 += (uint64_t)(v13 + 4);
                long long v28 = v9;
                if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_88;
                }
                goto LABEL_162;
              }
            }
            operator delete(__dst.__r_.__value_.__l.__data_);
            goto LABEL_137;
        }
      }
      uint64_t v7 = *(_DWORD *)(a1 + 24) & 0x1F0;
      if ((*(_DWORD *)(a1 + 24) & 0x1B0 | 0x40) != 0x40 || v11 != 92)
      {
        std::string::operator=(&__p, v11);
        goto LABEL_59;
      }
      if ((*(_DWORD *)(a1 + 24) & 0x1F0) != 0)
      {
        size_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v9 + 1, a3, &__p);
        if (v10 == a3) {
          goto LABEL_61;
        }
      }
      else
      {
        size_t v10 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, v9 + 1, a3, &__p, (uint64_t)v8);
        uint64_t v7 = 0;
        if (v10 == a3) {
          goto LABEL_61;
        }
      }
LABEL_60:
      int v25 = *v10;
      if (v25 != 93)
      {
        int v27 = v10 + 1;
        if (v10 + 1 != a3 && v25 == 45 && *v27 != 93)
        {
          memset(&v56, 0, sizeof(v56));
          long long v28 = v10 + 2;
          if (v10 + 2 == a3 || *v27 != 91 || *v28 != 46)
          {
            if ((v7 | 0x40) == 0x40)
            {
              LODWORD(v27) = *v27;
              if (v27 == 92)
              {
                if (v7) {
                  char v44 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v10 + 2, a3, &v56);
                }
                else {
                  char v44 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, v10 + 2, a3, &v56, (uint64_t)v8);
                }
                long long v28 = v44;
                goto LABEL_154;
              }
            }
            else
            {
              LOBYTE(v27) = *v27;
            }
            std::string::operator=(&v56, (std::string::value_type)v27);
            goto LABEL_154;
          }
          int v29 = v10 + 3;
          if (a3 - (v10 + 3) < 2) {
            goto LABEL_173;
          }
          int64_t v30 = a3 - 5 - v10;
          uint64_t v31 = v10 + 3;
          uint64_t v32 = v29 + 1;
          if (*v29 != 46) {
            goto LABEL_78;
          }
LABEL_77:
          if (*v32 != 93)
          {
LABEL_78:
            while (v30)
            {
              --v30;
              uint64_t v31 = v32;
              int v33 = *v32++;
              if (v33 == 46) {
                goto LABEL_77;
              }
            }
LABEL_173:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
          }
          if (v31 == a3) {
            goto LABEL_173;
          }
          std::regex_traits<char>::__lookup_collatename<char const*>((uint64_t)&__dst, a1, v29, v31);
          if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v56.__r_.__value_.__l.__data_);
          }
          std::string v56 = __dst;
          std::string::size_type v51 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v51 = v56.__r_.__value_.__l.__size_;
          }
          if (v51 - 1 >= 2) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
          }
          long long v28 = v31 + 2;
LABEL_154:
          std::string __dst = __p;
          memset(&__p, 0, sizeof(__p));
          std::string v54 = v56;
          memset(&v56, 0, sizeof(v56));
          std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100]((uint64_t)v8, (char *)&__dst, (uint64_t)&v54);
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v54.__r_.__value_.__l.__data_);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_160;
            }
LABEL_156:
            if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_157;
            }
LABEL_161:
            operator delete(v56.__r_.__value_.__l.__data_);
            char v37 = 1;
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_88;
            }
          }
          else
          {
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_156;
            }
LABEL_160:
            operator delete(__dst.__r_.__value_.__l.__data_);
            if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_161;
            }
LABEL_157:
            char v37 = 1;
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_88;
            }
          }
LABEL_162:
          operator delete(__p.__r_.__value_.__l.__data_);
          size_t v10 = v28;
          if ((v37 & 1) == 0) {
            goto LABEL_15;
          }
          goto LABEL_14;
        }
      }
LABEL_61:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        if (__p.__r_.__value_.__l.__size_)
        {
          if (__p.__r_.__value_.__l.__size_ == 1)
          {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_68:
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, p_p->__r_.__value_.__s.__data_[0]);
LABEL_87:
            char v37 = 1;
            long long v28 = v10;
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_88;
            }
            goto LABEL_162;
          }
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_86:
          std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)v8, p_p->__r_.__value_.__s.__data_[0], p_p->__r_.__value_.__s.__data_[1]);
          goto LABEL_87;
        }
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      else if (*((unsigned char *)&__p.__r_.__value_.__s + 23))
      {
        p_p = &__p;
        if (HIBYTE(__p.__r_.__value_.__r.__words[2]) == 1) {
          goto LABEL_68;
        }
        goto LABEL_86;
      }
LABEL_14:
      uint64_t v7 = (uint64_t)v10;
LABEL_15:
      if ((char *)v7 == v9)
      {
        if (v9 != a3)
        {
          if (*v9 == 45)
          {
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 45);
            ++v9;
          }
          if (v9 != a3 && *v9 == 93) {
            return v9 + 1;
          }
        }
LABEL_172:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
      }
    }
  }
  return a2;
}

void sub_248B169A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  *(void *)(v32 + 144) = v33;
  if (a32 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v34 - 89) < 0) {
    operator delete(*(void **)(v34 - 112));
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x24C58B260](exception, 11);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_248B16AC8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  int v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  operator delete(__p);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x24C58B260](exception, 3);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_248B16C08(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3, std::string *this)
{
  long long v4 = a2;
  if (a2 == a3) {
    return (unsigned __int8 *)v4;
  }
  switch(*a2)
  {
    case '0':
      if (this)
      {
        std::string::operator=(this, 0);
        return (unsigned __int8 *)(v4 + 1);
      }
      else
      {
        std::basic_regex<char>::value_type v7 = 0;
LABEL_53:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
        return (unsigned __int8 *)(v4 + 1);
      }
    case 'c':
      if (a2 + 1 == a3) {
        goto LABEL_60;
      }
      std::basic_regex<char>::value_type v8 = a2[1];
      if (((v8 & 0xDF) - 65) > 0x19u) {
        goto LABEL_60;
      }
      std::string::value_type v9 = v8 & 0x1F;
      if (this)
      {
        std::string::operator=(this, v9);
        v4 += 2;
        return (unsigned __int8 *)v4;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v9);
      uint64_t result = (unsigned __int8 *)(v4 + 2);
      break;
    case 'f':
      if (this) {
        std::string::operator=(this, 12);
      }
      else {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
      }
      return (unsigned __int8 *)(v4 + 1);
    case 'n':
      if (this) {
        std::string::operator=(this, 10);
      }
      else {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
      }
      return (unsigned __int8 *)(v4 + 1);
    case 'r':
      if (this) {
        std::string::operator=(this, 13);
      }
      else {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
      }
      return (unsigned __int8 *)(v4 + 1);
    case 't':
      if (this) {
        std::string::operator=(this, 9);
      }
      else {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
      }
      return (unsigned __int8 *)(v4 + 1);
    case 'u':
      if (a2 + 1 != a3)
      {
        int v10 = a2[1];
        if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38 || (v10 | 0x20u) - 97 < 6)
        {
          long long v4 = a2 + 2;
          if (a2 + 2 != a3)
          {
            int v11 = *v4;
            if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38 || (v11 | 0x20u) - 97 < 6) {
              goto LABEL_35;
            }
          }
        }
      }
      goto LABEL_60;
    case 'v':
      if (this) {
        std::string::operator=(this, 11);
      }
      else {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 11);
      }
      return (unsigned __int8 *)(v4 + 1);
    case 'x':
LABEL_35:
      if (v4 + 1 == a3) {
        goto LABEL_60;
      }
      unsigned __int8 v12 = v4[1];
      char v13 = -48;
      if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38) {
        goto LABEL_40;
      }
      v12 |= 0x20u;
      if ((v12 - 97) >= 6u) {
        goto LABEL_60;
      }
      char v13 = -87;
LABEL_40:
      if (v4 + 2 == a3) {
        goto LABEL_60;
      }
      unsigned __int8 v14 = v4[2];
      char v15 = -48;
      if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38)
      {
        v14 |= 0x20u;
        if ((v14 - 97) >= 6u) {
LABEL_60:
        }
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
        char v15 = -87;
      }
      std::string::value_type v16 = v14 + 16 * (v12 + v13) + v15;
      if (this) {
        std::string::operator=(this, v16);
      }
      else {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
      }
      return (unsigned __int8 *)(v4 + 3);
    default:
      uint64_t v6 = *a2;
      if (v6 == 95 || (v6 & 0x80) == 0 && (a1->__traits_.__ct_->__tab_[v6] & 0x500) != 0) {
        goto LABEL_60;
      }
      std::basic_regex<char>::value_type v7 = *a2;
      if (!this) {
        goto LABEL_53;
      }
      std::string::operator=(this, v6);
      return (unsigned __int8 *)(v4 + 1);
  }
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  uint64_t v2 = __c;
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if (flags)
  {
    std::basic_regex<char>::value_type v8 = (char *)operator new(0x30uLL);
    first = this->__end_->__first_;
    *(void *)std::basic_regex<char>::value_type v8 = &unk_26FCC7DC8;
    *((void *)v8 + 1) = first;
    std::locale::locale((std::locale *)v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    v8[40] = ((uint64_t (*)(const std::ctype<char> *, uint64_t))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v2);
LABEL_6:
    this->__end_->__first_ = (std::__node<char> *)v8;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    std::basic_regex<char>::value_type v8 = (char *)operator new(0x30uLL);
    int v10 = this->__end_->__first_;
    *(void *)std::basic_regex<char>::value_type v8 = &unk_26FCC7E10;
    *((void *)v8 + 1) = v10;
    std::locale::locale((std::locale *)v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    v8[40] = v2;
    goto LABEL_6;
  }
  int v5 = (std::__node<char> *)operator new(0x18uLL);
  std::vector<std::csub_match>::pointer end = this->__end_;
  std::basic_regex<char>::value_type v7 = end->__first_;
  v5->__vftable = (std::__node<char>_vtbl *)&unk_26FCC7E58;
  v5[1].__vftable = (std::__node<char>_vtbl *)v7;
  LOBYTE(v5[2].__vftable) = v2;
  end->__first_ = v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void sub_248B17240(_Unwind_Exception *a1)
{
  std::locale::~locale(v2);
  long long v4 = v1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x24C58B260](exception, 4);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_248B172EC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if (flags)
  {
    std::basic_regex<char>::value_type v8 = (std::locale *)operator new(0x30uLL);
    std::string::value_type v9 = v8;
    v8[1].__locale_ = (std::locale::__imp *)this->__end_->__first_;
    int v10 = (std::locale::__imp *)&unk_26FCC7EA0;
LABEL_6:
    v8->__locale_ = v10;
    std::locale::locale(v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)&this->__traits_.__ct_;
    LODWORD(v9[5].__locale_) = __i;
    this->__end_->__first_ = (std::__node<char> *)v9;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    std::basic_regex<char>::value_type v8 = (std::locale *)operator new(0x30uLL);
    std::string::value_type v9 = v8;
    v8[1].__locale_ = (std::locale::__imp *)this->__end_->__first_;
    int v10 = (std::locale::__imp *)&unk_26FCC7EE8;
    goto LABEL_6;
  }
  int v5 = (std::__node<char> *)operator new(0x18uLL);
  std::vector<std::csub_match>::pointer end = this->__end_;
  first = end->__first_;
  v5->__vftable = (std::__node<char>_vtbl *)&unk_26FCC7F30;
  v5[1].__vftable = (std::__node<char>_vtbl *)first;
  LODWORD(v5[2].__vftable) = __i;
  end->__first_ = v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26FCC7DC8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26FCC7DC8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  operator delete(a1);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unint64_t v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (uint64_t v4 = result,
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(result + 24) + 40))(*(void *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(void *)(a2 + 16);
    *(void *)(a2 + 80) = *(void *)(v4 + 8);
  }
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26FCC7E10;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26FCC7E10;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  operator delete(a1);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    *(void *)(a2 + 80) = *(void *)(result + 8);
  }
  return result;
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  operator delete(__p);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    *(void *)(a2 + 80) = *(void *)(result + 8);
  }
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26FCC7EA0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26FCC7EA0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  operator delete(a1);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (!*(unsigned char *)(v3 + 16)
    || (v4 = *(void *)(v3 + 8) - *(void *)v3, uint64_t v5 = *(void *)(a2 + 16), *(void *)(a2 + 24) - v5 < v4))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    return result;
  }
  uint64_t v6 = result;
  if (v4 >= 1)
  {
    uint64_t v7 = 0;
    while (1)
    {
      int v8 = (*(uint64_t (**)(void, void))(**(void **)(v6 + 24) + 40))(*(void *)(v6 + 24), *(char *)(*(void *)v3 + v7));
      uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v6 + 24) + 40))(*(void *)(v6 + 24), *(char *)(*(void *)(a2 + 16) + v7));
      if (v8 != result) {
        goto LABEL_3;
      }
      if (v4 == ++v7)
      {
        uint64_t v5 = *(void *)(a2 + 16);
        break;
      }
    }
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 16) = v5 + v4;
  *(void *)(a2 + 80) = *(void *)(v6 + 8);
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26FCC7EE8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26FCC7EE8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  operator delete(a1);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 40) - 1;
  uint64_t v3 = *(void *)(a2 + 32);
  if (!*(unsigned char *)(v3 + 24 * v2 + 16)
    || (uint64_t v4 = (unsigned __int8 **)(v3 + 24 * v2),
        uint64_t v5 = *v4,
        uint64_t v6 = v4[1] - *v4,
        uint64_t v7 = *(void *)(a2 + 16),
        *(void *)(a2 + 24) - v7 < v6))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    return result;
  }
  if (v6 >= 1)
  {
    uint64_t v8 = v6;
    std::string::value_type v9 = *(unsigned __int8 **)(a2 + 16);
    do
    {
      int v11 = *v5++;
      int v10 = v11;
      int v12 = *v9++;
      if (v10 != v12) {
        goto LABEL_3;
      }
    }
    while (--v8);
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 16) = v7 + v6;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unsigned int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  unsigned int v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  operator delete(__p);
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2 = result[4];
  uint64_t v3 = *(void *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 40) - v3) >> 3) < v2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  unsigned int v5 = v2 - 1;
  if (*(unsigned char *)(v3 + 24 * v5 + 16)
    && (uint64_t v6 = result,
        uint64_t v7 = v3 + 24 * v5,
        uint64_t result = *(unsigned int **)v7,
        int64_t v8 = *(void *)(v7 + 8) - *(void *)v7,
        uint64_t v9 = *(void *)(a2 + 16),
        *(void *)(a2 + 24) - v9 >= v8)
    && (uint64_t result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !result))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 16) = v9 + v8;
    *(void *)(a2 + 80) = *((void *)v6 + 1);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  return result;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (!*(unsigned char *)(a1 + 169))
  {
    uint64_t v6 = (void *)(a1 + 40);
    unsigned int v5 = *(unsigned char **)(a1 + 48);
    unint64_t v16 = *(void *)(a1 + 56);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v5 < v16) {
        goto LABEL_24;
      }
      std::vector<std::csub_match>::size_type v17 = (unsigned char *)*v6;
      unint64_t v18 = (unint64_t)&v5[-*v6];
      unint64_t v19 = v18 + 1;
      if ((uint64_t)(v18 + 1) >= 0)
      {
        unint64_t v20 = v16 - (void)v17;
        if (2 * v20 > v19) {
          unint64_t v19 = 2 * v20;
        }
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v21 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v21 = v19;
        }
        if (v21)
        {
          int v12 = operator new(v21);
          char v13 = &v12[v18];
          unsigned __int8 v14 = &v12[v21];
          v12[v18] = v2;
          uint64_t v15 = (uint64_t)&v12[v18 + 1];
          if (v5 == v17) {
            goto LABEL_49;
          }
        }
        else
        {
          int v12 = 0;
          char v13 = &v5[-*v6];
          unsigned __int8 v14 = 0;
          *(unsigned char *)unint64_t v18 = a2;
          uint64_t v15 = v18 + 1;
          if (v5 == v17) {
            goto LABEL_49;
          }
        }
        if (v18 >= 8 && (unint64_t)(v17 - v12) >= 0x20)
        {
          if (v18 >= 0x20)
          {
            unint64_t v28 = v18 & 0xFFFFFFFFFFFFFFE0;
            uint64_t v38 = (long long *)(v5 - 16);
            uint64_t v39 = &v12[v5 - 16 - v17];
            unint64_t v40 = v18 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v41 = *v38;
              *(v39 - 1) = *(v38 - 1);
              *uint64_t v39 = v41;
              v39 -= 2;
              v38 -= 2;
              v40 -= 32;
            }
            while (v40);
            if (v18 == v28) {
              goto LABEL_86;
            }
            if ((v18 & 0x18) == 0)
            {
              v13 -= v28;
              v5 -= v28;
              goto LABEL_80;
            }
          }
          else
          {
            unint64_t v28 = 0;
          }
          v13 -= v18 & 0xFFFFFFFFFFFFFFF8;
          unsigned int v42 = &v5[-v28 - 8];
          uint64_t v43 = &v12[v42 - v17];
          unint64_t v44 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v45 = *(void *)v42;
            v42 -= 8;
            *v43-- = v45;
            v44 += 8;
          }
          while (v44);
          v5 -= v18 & 0xFFFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_86;
          }
        }
LABEL_80:
        std::string v56 = v13 - 1;
        do
        {
          char v57 = *--v5;
          *v56-- = v57;
        }
        while (v5 != v17);
        goto LABEL_86;
      }
LABEL_89:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    if ((unint64_t)v5 < v16) {
      goto LABEL_24;
    }
    uint64_t v23 = (unsigned char *)*v6;
    unint64_t v24 = (unint64_t)&v5[-*v6];
    unint64_t v25 = v24 + 1;
    if ((uint64_t)(v24 + 1) < 0) {
      goto LABEL_89;
    }
    unint64_t v26 = v16 - (void)v23;
    if (2 * v26 > v25) {
      unint64_t v25 = 2 * v26;
    }
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v27 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v27 = v25;
    }
    if (v27)
    {
      int v12 = operator new(v27);
      char v13 = &v12[v24];
      unsigned __int8 v14 = &v12[v27];
      v12[v24] = v2;
      uint64_t v15 = (uint64_t)&v12[v24 + 1];
      if (v5 == v23)
      {
LABEL_49:
        *(void *)(a1 + 40) = v13;
        *(void *)(a1 + 48) = v15;
        *(void *)(a1 + 56) = v14;
        if (!v5) {
          goto LABEL_88;
        }
        goto LABEL_87;
      }
    }
    else
    {
      int v12 = 0;
      char v13 = &v5[-*v6];
      unsigned __int8 v14 = 0;
      *(unsigned char *)unint64_t v24 = a2;
      uint64_t v15 = v24 + 1;
      if (v5 == v23) {
        goto LABEL_49;
      }
    }
    if (v24 >= 8 && (unint64_t)(v23 - v12) >= 0x20)
    {
      if (v24 >= 0x20)
      {
        unint64_t v29 = v24 & 0xFFFFFFFFFFFFFFE0;
        unint64_t v46 = (long long *)(v5 - 16);
        long long v47 = &v12[v5 - 16 - v23];
        unint64_t v48 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          _OWORD *v47 = v49;
          v47 -= 2;
          v46 -= 2;
          v48 -= 32;
        }
        while (v48);
        if (v24 == v29) {
          goto LABEL_86;
        }
        if ((v24 & 0x18) == 0)
        {
          v13 -= v29;
          v5 -= v29;
          goto LABEL_84;
        }
      }
      else
      {
        unint64_t v29 = 0;
      }
      v13 -= v24 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v50 = &v5[-v29 - 8];
      std::string::size_type v51 = &v12[v50 - v23];
      unint64_t v52 = v29 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v53 = *(void *)v50;
        v50 -= 8;
        *v51-- = v53;
        v52 += 8;
      }
      while (v52);
      v5 -= v24 & 0xFFFFFFFFFFFFFFF8;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_86;
      }
    }
LABEL_84:
    int v58 = v13 - 1;
    do
    {
      char v59 = *--v5;
      *v58-- = v59;
    }
    while (v5 != v23);
    goto LABEL_86;
  }
  char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
  unsigned int v5 = *(unsigned char **)(a1 + 48);
  unint64_t v4 = *(void *)(a1 + 56);
  if ((unint64_t)v5 < v4)
  {
LABEL_24:
    *unsigned int v5 = v2;
    uint64_t v15 = (uint64_t)(v5 + 1);
    goto LABEL_88;
  }
  uint64_t v6 = (void *)(a1 + 40);
  uint64_t v7 = *(unsigned char **)(a1 + 40);
  unint64_t v8 = v5 - v7;
  uint64_t v9 = v5 - v7 + 1;
  if (v9 < 0) {
    goto LABEL_89;
  }
  unint64_t v10 = v4 - (void)v7;
  if (2 * v10 > v9) {
    uint64_t v9 = 2 * v10;
  }
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v11 = v9;
  }
  if (v11)
  {
    int v12 = operator new(v11);
    char v13 = &v12[v8];
    unsigned __int8 v14 = &v12[v11];
    v12[v8] = v2;
    uint64_t v15 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7) {
      goto LABEL_49;
    }
  }
  else
  {
    int v12 = 0;
    char v13 = (char *)(v5 - v7);
    unsigned __int8 v14 = 0;
    *(unsigned char *)unint64_t v8 = v2;
    uint64_t v15 = v8 + 1;
    if (v5 == v7) {
      goto LABEL_49;
    }
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20) {
    goto LABEL_76;
  }
  if (v8 < 0x20)
  {
    unint64_t v22 = 0;
    goto LABEL_55;
  }
  unint64_t v22 = v8 & 0xFFFFFFFFFFFFFFE0;
  int64_t v30 = (long long *)(v5 - 16);
  uint64_t v31 = &v12[v5 - 16 - v7];
  unint64_t v32 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v33 = *v30;
    *(v31 - 1) = *(v30 - 1);
    *uint64_t v31 = v33;
    v31 -= 2;
    v30 -= 2;
    v32 -= 32;
  }
  while (v32);
  if (v8 != v22)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v22;
      v5 -= v22;
      goto LABEL_76;
    }
LABEL_55:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v34 = &v5[-v22 - 8];
    std::string::size_type v35 = &v12[v34 - v7];
    unint64_t v36 = v22 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint64_t v37 = *(void *)v34;
      v34 -= 8;
      *v35-- = v37;
      v36 += 8;
    }
    while (v36);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_86;
    }
LABEL_76:
    std::string v54 = v13 - 1;
    do
    {
      char v55 = *--v5;
      *v54-- = v55;
    }
    while (v5 != v7);
  }
LABEL_86:
  unsigned int v5 = (unsigned char *)*v6;
  *(void *)(a1 + 40) = v12;
  *(void *)(a1 + 48) = v15;
  *(void *)(a1 + 56) = v14;
  if (v5) {
LABEL_87:
  }
    operator delete(v5);
LABEL_88:
  *(void *)(a1 + 48) = v15;
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  *(void *)(a1 + 8) = a3;
  size_t v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(unsigned char *)(a1 + 168) = a4;
  *(unsigned char *)(a1 + 169) = a5;
  *(unsigned char *)(a1 + 170) = a6;
  std::locale::locale(&v14, v11);
  std::locale::name(&v15, &v14);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v12 = v15.__r_.__value_.__l.__size_ != 1 || *v15.__r_.__value_.__l.__data_ != 67;
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  else
  {
    BOOL v12 = SHIBYTE(v15.__r_.__value_.__r.__words[2]) != 1 || v15.__r_.__value_.__s.__data_[0] != 67;
  }
  std::locale::~locale(&v14);
  *(unsigned char *)(a1 + 171) = v12;
  return a1;
}

void sub_248B18408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v9 + 136));
  std::string v15 = *(void **)(v9 + 112);
  if (v15)
  {
    *(void *)(v9 + 120) = v15;
    operator delete(v15);
    std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](v12);
    unint64_t v16 = *(void **)(v9 + 64);
    if (!v16)
    {
LABEL_3:
      std::vector<std::csub_match>::size_type v17 = *v13;
      if (!*v13) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](v12);
    unint64_t v16 = *(void **)(v9 + 64);
    if (!v16) {
      goto LABEL_3;
    }
  }
  *(void *)(v9 + 72) = v16;
  operator delete(v16);
  std::vector<std::csub_match>::size_type v17 = *v13;
  if (!*v13)
  {
LABEL_4:
    std::locale::~locale(v11);
    *(void *)uint64_t v9 = v10;
    uint64_t v18 = *(void *)(v9 + 8);
    if (!v18) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  *(void *)(v9 + 48) = v17;
  operator delete(v17);
  std::locale::~locale(v11);
  *(void *)uint64_t v9 = v10;
  uint64_t v18 = *(void *)(v9 + 8);
  if (!v18) {
LABEL_5:
  }
    _Unwind_Resume(a1);
LABEL_9:
  (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  _Unwind_Resume(a1);
}

void **std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](void **a1)
{
  char v2 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    unint64_t v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if (*((char *)v3 - 25) < 0) {
LABEL_9:
        }
          operator delete(*(v3 - 6));
      }
      else if (*((char *)v3 - 25) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 6;
      if (v3 == v2)
      {
        unint64_t v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

void std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  uint64_t v1 = std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(a1);
  operator delete(v1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  char v2 = a2;
  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    uint64_t v38 = 0;
    BOOL negate = this->__negate_;
    goto LABEL_244;
  }
  if (!this->__might_have_digraph_ || current + 1 == last) {
    goto LABEL_60;
  }
  char v6 = *current;
  LOBYTE(__src) = *current;
  char v7 = current[1];
  HIBYTE(__src) = v7;
  if (this->__icase_)
  {
    LOBYTE(__src) = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    HIBYTE(__src) = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  p_traits = &this->__traits_;
  std::regex_traits<char>::__lookup_collatename<char *>(&__src, (uint64_t)&this->__traits_, __p, (uint64_t)__p);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(__p[2])) {
      goto LABEL_8;
    }
LABEL_60:
    BOOL negate = 0;
    uint64_t v38 = 1;
    unsigned __int8 v40 = *v2->__current_;
    LOBYTE(__src) = v40;
    if (!this->__icase_) {
      goto LABEL_62;
    }
    goto LABEL_61;
  }
  uint64_t v39 = __p[1];
  operator delete(__p[0]);
  if (!v39) {
    goto LABEL_60;
  }
LABEL_8:
  std::vector<std::pair<char, char>>::pointer begin = this->__digraphs_.__begin_;
  uint64_t v10 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v10)
  {
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    p_second = &begin->second;
    while (__src != *(p_second - 1) || HIBYTE(__src) != *p_second)
    {
      p_second += 2;
      if (!--v11) {
        goto LABEL_17;
      }
    }
    goto LABEL_210;
  }
LABEL_17:
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    BOOL negate = 0;
    goto LABEL_165;
  }
  memset(v137, 170, sizeof(v137));
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  __p[2] = (void *)0x2AAAAAAAAAAAAAALL;
  __p[0] = (void *)0xAAAAAAAAAA00AAAALL;
  LOWORD(__p[0]) = __src;
  (*(void (**)(void **__return_ptr))(*(void *)this->__traits_.__col_ + 32))(v137);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  std::vector<std::pair<std::string, std::string>>::pointer v14 = this->__ranges_.__begin_;
  char v15 = HIBYTE(v137[2]);
  int64_t v16 = (char *)this->__ranges_.__end_ - (char *)v14;
  if (v16)
  {
    uint64_t v17 = 0;
    unint64_t v18 = v16 / 48;
    char v128 = HIBYTE(v137[2]);
    if (SHIBYTE(v137[2]) >= 0) {
      unint64_t v19 = (void *)HIBYTE(v137[2]);
    }
    else {
      unint64_t v19 = v137[1];
    }
    if (SHIBYTE(v137[2]) >= 0) {
      unint64_t v20 = v137;
    }
    else {
      unint64_t v20 = (void **)v137[0];
    }
    if (v18 <= 1) {
      uint64_t v21 = 1;
    }
    else {
      uint64_t v21 = v16 / 48;
    }
    unint64_t v22 = (unsigned __int8 *)&v14->second.__r_.__value_.__r.__words[2] + 7;
    BOOL v23 = 1;
    do
    {
      int v24 = (char)*(v22 - 24);
      if (v24 >= 0) {
        size_t v25 = *(v22 - 24);
      }
      else {
        size_t v25 = *(void *)(v22 - 39);
      }
      if (v24 >= 0) {
        unint64_t v26 = (char *)(v22 - 47);
      }
      else {
        unint64_t v26 = *(char **)(v22 - 47);
      }
      if (v25 >= (unint64_t)v19) {
        size_t v27 = (size_t)v19;
      }
      else {
        size_t v27 = v25;
      }
      int v28 = memcmp(v20, v26, v27);
      BOOL v29 = (unint64_t)v19 >= v25;
      if (v28) {
        BOOL v29 = v28 >= 0;
      }
      if (v29)
      {
        int v30 = (char)*v22;
        if (v30 >= 0) {
          size_t v31 = *v22;
        }
        else {
          size_t v31 = *(void *)(v22 - 15);
        }
        if (v30 >= 0) {
          unint64_t v32 = (char *)(v22 - 23);
        }
        else {
          unint64_t v32 = *(char **)(v22 - 23);
        }
        if ((unint64_t)v19 >= v31) {
          size_t v33 = v31;
        }
        else {
          size_t v33 = (size_t)v19;
        }
        int v34 = memcmp(v32, v20, v33);
        BOOL v35 = v31 >= (unint64_t)v19;
        if (v34) {
          BOOL v35 = v34 >= 0;
        }
        if (v35)
        {
          BOOL negate = 1;
          int v37 = 5;
          goto LABEL_160;
        }
      }
      BOOL v23 = ++v17 < v18;
      v22 += 48;
    }
    while (v21 != v17);
    int v37 = 0;
    BOOL negate = 0;
LABEL_160:
    p_traits = &this->__traits_;
    char v15 = v128;
  }
  else
  {
    BOOL v23 = 0;
    int v37 = 0;
    BOOL negate = 0;
  }
  if (v15 < 0) {
    operator delete(v137[0]);
  }
  if (!v23)
  {
LABEL_165:
    if (this->__equivalences_.__begin_ == this->__equivalences_.__end_) {
      goto LABEL_192;
    }
    BOOL v136 = negate;
    memset(__p, 170, sizeof(__p));
    std::regex_traits<char>::__transform_primary<char *>(&__src, (uint64_t)p_traits, __p, __p);
    std::vector<std::string>::pointer v91 = this->__equivalences_.__begin_;
    int64_t v92 = (char *)this->__equivalences_.__end_ - (char *)v91;
    if (v92)
    {
      unint64_t v93 = v92 / 24;
      v94 = __p[1];
      if (SHIBYTE(__p[2]) >= 0) {
        uint64_t v95 = (void *)HIBYTE(__p[2]);
      }
      else {
        uint64_t v95 = __p[1];
      }
      if (SHIBYTE(__p[2]) < 0)
      {
        int v133 = SHIBYTE(__p[2]);
        uint64_t v109 = 0;
        std::string v110 = __p[0];
        if (v93 <= 1) {
          uint64_t v111 = 1;
        }
        else {
          uint64_t v111 = v92 / 24;
        }
        BOOL v98 = 1;
        do
        {
          std::string::size_type size = HIBYTE(v91->__r_.__value_.__r.__words[2]);
          int v113 = (char)size;
          if ((size & 0x80u) != 0) {
            std::string::size_type size = v91->__r_.__value_.__l.__size_;
          }
          if (v95 == (void *)size)
          {
            std::vector<std::string>::pointer v114 = v113 >= 0 ? v91 : (std::vector<std::string>::pointer)v91->__r_.__value_.__r.__words[0];
            if (!memcmp(v110, v114, (size_t)v94))
            {
              BOOL negate = 1;
              int v37 = 5;
              if ((v133 & 0x80000000) == 0) {
                goto LABEL_189;
              }
              goto LABEL_188;
            }
          }
          BOOL v98 = ++v109 < v93;
          ++v91;
        }
        while (v111 != v109);
        int v37 = 0;
        BOOL negate = v136;
        if ((v133 & 0x80000000) == 0) {
          goto LABEL_189;
        }
LABEL_188:
        operator delete(__p[0]);
        goto LABEL_189;
      }
      if (!HIBYTE(__p[2]))
      {
        std::string::size_type v115 = HIBYTE(v91->__r_.__value_.__r.__words[2]);
        if ((v115 & 0x80u) != 0) {
          std::string::size_type v115 = v91->__r_.__value_.__l.__size_;
        }
        if (v115 == HIBYTE(__p[2]))
        {
          BOOL negate = 1;
          goto LABEL_191;
        }
        unint64_t v120 = 0;
        if (v93 <= 1) {
          uint64_t v121 = 1;
        }
        else {
          uint64_t v121 = v93;
        }
        uint64_t v122 = v121 - 1;
        v123 = &v91[1].__r_.__value_.__s.__data_[8];
        BOOL negate = v136;
        while (v122 != v120)
        {
          ++v120;
          unint64_t v124 = v123[15];
          unint64_t v126 = *(void *)v123;
          v123 += 24;
          unint64_t v125 = v126;
          if ((v124 & 0x80u) != 0) {
            unint64_t v124 = v125;
          }
          if (v95 == (void *)v124)
          {
            BOOL v98 = v120 < v93;
            BOOL negate = 1;
            int v37 = 5;
            goto LABEL_189;
          }
        }
        BOOL v98 = 0;
        int v37 = 0;
LABEL_189:
        if (v98) {
          goto LABEL_190;
        }
LABEL_192:
        if ((char)__src < 0)
        {
          neg_std::regex_traits<char>::char_class_type mask = this->__neg_mask_;
        }
        else
        {
          std::regex_traits<char>::char_class_type mask = this->__mask_;
          tab = this->__traits_.__ct_->__tab_;
          std::ctype_base::mask v106 = tab[__src];
          if (((v106 & mask) != 0 || __src == 95 && (mask & 0x80) != 0)
            && (SHIBYTE(__src) & 0x80000000) == 0
            && ((tab[HIBYTE(__src)] & mask) != 0 || (mask & 0x80) != 0 && HIBYTE(__src) == 95))
          {
            goto LABEL_210;
          }
          neg_std::regex_traits<char>::char_class_type mask = this->__neg_mask_;
          if ((neg_mask & v106) != 0 || __src == 95 && (neg_mask & 0x80) != 0)
          {
LABEL_209:
            int v108 = negate;
LABEL_211:
            BOOL negate = v108;
            uint64_t v38 = 2;
            goto LABEL_244;
          }
        }
        if ((SHIBYTE(__src) & 0x80000000) == 0)
        {
          if ((this->__traits_.__ct_->__tab_[HIBYTE(__src)] & neg_mask) == 0)
          {
            int v108 = 1;
            if (HIBYTE(__src) != 95 || (neg_mask & 0x80) == 0) {
              goto LABEL_211;
            }
          }
          goto LABEL_209;
        }
LABEL_210:
        int v108 = 1;
        goto LABEL_211;
      }
      uint64_t v96 = 0;
      if (v93 <= 1) {
        uint64_t v97 = 1;
      }
      else {
        uint64_t v97 = v92 / 24;
      }
      BOOL v98 = 1;
      do
      {
        int v99 = &v91[v96];
        unint64_t v100 = (void *)HIBYTE(v99->__r_.__value_.__r.__words[2]);
        int v101 = (char)v100;
        if ((char)v100 < 0) {
          unint64_t v100 = (void *)v99->__r_.__value_.__l.__size_;
        }
        if (v95 == v100)
        {
          if (v101 < 0) {
            int v99 = (std::string *)v99->__r_.__value_.__r.__words[0];
          }
          uint64_t v102 = __p;
          uint64_t v103 = HIBYTE(__p[2]);
          while (*(unsigned __int8 *)v102 == v99->__r_.__value_.__s.__data_[0])
          {
            uint64_t v102 = (void **)((char *)v102 + 1);
            int v99 = (std::string *)((char *)v99 + 1);
            if (!--v103)
            {
              BOOL negate = 1;
              int v37 = 5;
              if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
                goto LABEL_189;
              }
              goto LABEL_188;
            }
          }
        }
        BOOL v98 = ++v96 < v93;
      }
      while (v96 != v97);
    }
    BOOL v98 = 0;
    int v37 = 0;
    BOOL negate = v136;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_189;
    }
    goto LABEL_188;
  }
LABEL_190:
  if (v37)
  {
LABEL_191:
    uint64_t v38 = 2;
    goto LABEL_244;
  }
  uint64_t v38 = 2;
  unsigned __int8 v40 = *v2->__current_;
  LOBYTE(__src) = v40;
  if (this->__icase_)
  {
LABEL_61:
    unsigned __int8 v40 = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v40);
    LOBYTE(__src) = v40;
  }
LABEL_62:
  std::vector<char>::pointer v41 = this->__chars_.__begin_;
  unint64_t v42 = this->__chars_.__end_ - v41;
  if (v42)
  {
    if (v42 <= 1) {
      unint64_t v42 = 1;
    }
    while (1)
    {
      int v43 = *v41++;
      if (v43 == v40) {
        break;
      }
      if (!--v42) {
        goto LABEL_67;
      }
    }
LABEL_243:
    BOOL negate = 1;
    goto LABEL_244;
  }
LABEL_67:
  std::regex_traits<char>::char_class_type v44 = this->__neg_mask_;
  if (v44 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v40 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v40] & v44) == 0)
    {
      int v46 = (v44 >> 7) & 1;
      char v45 = v40 == 95 ? v46 : 0;
    }
    else
    {
      char v45 = 1;
    }
    std::vector<char>::pointer end = this->__neg_chars_.__end_;
    std::vector<char>::pointer v48 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v40, end - this->__neg_chars_.__begin_);
    long long v49 = v48 ? v48 : end;
    if ((v45 & 1) == 0 && v49 == end) {
      goto LABEL_243;
    }
  }
  std::vector<std::pair<std::string, std::string>>::pointer v50 = this->__ranges_.__begin_;
  std::vector<std::pair<std::string, std::string>>::pointer v51 = this->__ranges_.__end_;
  if (v50 != v51)
  {
    memset(v137, 170, sizeof(v137));
    BOOL v134 = negate;
    if (this->__collate_)
    {
      __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
      __p[2] = (void *)0x1AAAAAAAAAAAAAALL;
      __p[0] = (void *)0xAAAAAAAAAAAAAAAALL;
      LOWORD(__p[0]) = v40;
      (*(void (**)(void **__return_ptr))(*(void *)this->__traits_.__col_ + 32))(v137);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      std::vector<std::pair<std::string, std::string>>::pointer v50 = this->__ranges_.__begin_;
      unsigned int v52 = HIBYTE(v137[2]);
      int64_t v53 = (char *)this->__ranges_.__end_ - (char *)v50;
      if (v53)
      {
LABEL_85:
        v129 = v2;
        uint64_t v131 = v38;
        uint64_t v54 = 0;
        unint64_t v55 = v53 / 48;
        char v127 = v52;
        if ((v52 & 0x80u) == 0) {
          std::string v56 = (void *)v52;
        }
        else {
          std::string v56 = v137[1];
        }
        if ((v52 & 0x80u) == 0) {
          char v57 = v137;
        }
        else {
          char v57 = (void **)v137[0];
        }
        if (v55 <= 1) {
          uint64_t v58 = 1;
        }
        else {
          uint64_t v58 = v53 / 48;
        }
        char v59 = (unsigned __int8 *)&v50->second.__r_.__value_.__r.__words[2] + 7;
        BOOL v60 = 1;
        do
        {
          int v61 = (char)*(v59 - 24);
          if (v61 >= 0) {
            size_t v62 = *(v59 - 24);
          }
          else {
            size_t v62 = *(void *)(v59 - 39);
          }
          if (v61 >= 0) {
            uint8x8_t v63 = (char *)(v59 - 47);
          }
          else {
            uint8x8_t v63 = *(char **)(v59 - 47);
          }
          if (v62 >= (unint64_t)v56) {
            size_t v64 = (size_t)v56;
          }
          else {
            size_t v64 = v62;
          }
          int v65 = memcmp(v57, v63, v64);
          BOOL v66 = (unint64_t)v56 >= v62;
          if (v65) {
            BOOL v66 = v65 >= 0;
          }
          if (v66)
          {
            int v67 = (char)*v59;
            if (v67 >= 0) {
              size_t v68 = *v59;
            }
            else {
              size_t v68 = *(void *)(v59 - 15);
            }
            if (v67 >= 0) {
              unint64_t v69 = (char *)(v59 - 23);
            }
            else {
              unint64_t v69 = *(char **)(v59 - 23);
            }
            if ((unint64_t)v56 >= v68) {
              size_t v70 = v68;
            }
            else {
              size_t v70 = (size_t)v56;
            }
            int v71 = memcmp(v69, v57, v70);
            BOOL v72 = v68 >= (unint64_t)v56;
            if (v71) {
              BOOL v72 = v71 >= 0;
            }
            if (v72)
            {
              BOOL negate = 1;
              char v2 = v129;
              uint64_t v38 = v131;
              if ((v127 & 0x80) == 0) {
                goto LABEL_125;
              }
              goto LABEL_124;
            }
          }
          BOOL v60 = ++v54 < v55;
          v59 += 48;
        }
        while (v58 != v54);
        char v2 = v129;
        uint64_t v38 = v131;
        BOOL negate = v134;
        if ((v127 & 0x80) == 0) {
          goto LABEL_125;
        }
        goto LABEL_124;
      }
    }
    else
    {
      unsigned int v52 = 1;
      HIBYTE(v137[2]) = 1;
      LOWORD(v137[0]) = v40;
      int64_t v53 = (char *)v51 - (char *)v50;
      if (v53) {
        goto LABEL_85;
      }
    }
    BOOL v60 = 0;
    if ((v52 & 0x80) == 0)
    {
LABEL_125:
      if (v60) {
        goto LABEL_244;
      }
      goto LABEL_126;
    }
LABEL_124:
    operator delete(v137[0]);
    goto LABEL_125;
  }
LABEL_126:
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_) {
    goto LABEL_238;
  }
  uint64_t v132 = v38;
  memset(__p, 170, sizeof(__p));
  std::regex_traits<char>::__transform_primary<char *>(&__src, (uint64_t)&this->__traits_, (unsigned char *)&__src + 1, __p);
  std::vector<std::string>::pointer v73 = this->__equivalences_.__begin_;
  uint64_t v74 = HIBYTE(__p[2]);
  int64_t v75 = (char *)this->__equivalences_.__end_ - (char *)v73;
  if (!v75)
  {
    if ((HIBYTE(__p[2]) & 0x80) != 0) {
      operator delete(__p[0]);
    }
LABEL_237:
    unsigned __int8 v40 = __src;
LABEL_238:
    if ((v40 & 0x80) != 0) {
      goto LABEL_244;
    }
    std::regex_traits<char>::char_class_type v116 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v40] & v116) == 0)
    {
      int v117 = (v116 >> 7) & 1;
      if (v40 != 95) {
        int v117 = 0;
      }
      if (v117 != 1) {
        goto LABEL_244;
      }
    }
    goto LABEL_243;
  }
  BOOL v135 = negate;
  unint64_t v76 = 0;
  unint64_t v77 = v75 / 24;
  int64_t v78 = __p[0];
  uint64_t v79 = __p[1];
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v80 = (void *)HIBYTE(__p[2]);
  }
  else {
    unint64_t v80 = __p[1];
  }
  if (v77 <= 1) {
    uint64_t v81 = 1;
  }
  else {
    uint64_t v81 = v75 / 24;
  }
  for (BOOL i = 1; ; BOOL i = v76 < v77)
  {
    uint64_t v83 = &v73[v76];
    unint64_t v84 = (void *)HIBYTE(v83->__r_.__value_.__r.__words[2]);
    int v85 = (char)v84;
    if ((char)v84 < 0) {
      unint64_t v84 = (void *)v83->__r_.__value_.__l.__size_;
    }
    if (v80 == v84) {
      break;
    }
LABEL_147:
    if (++v76 == v81)
    {
      if ((v74 & 0x80) != 0) {
LABEL_235:
      }
        operator delete(__p[0]);
      BOOL negate = v135;
      uint64_t v38 = v132;
      goto LABEL_237;
    }
LABEL_151:
    ;
  }
  if (v85 >= 0) {
    char v86 = &v73[v76];
  }
  else {
    char v86 = (std::string *)v83->__r_.__value_.__r.__words[0];
  }
  if ((v74 & 0x80) == 0)
  {
    if (!v74)
    {
LABEL_155:
      BOOL negate = 1;
      uint64_t v38 = v132;
      if (!i) {
        goto LABEL_237;
      }
      goto LABEL_244;
    }
    uint64_t v87 = 0;
    while (*((unsigned __int8 *)__p + v87) == v86->__r_.__value_.__s.__data_[v87])
    {
      if (v74 == ++v87) {
        goto LABEL_155;
      }
    }
    goto LABEL_147;
  }
  unint64_t v88 = v73;
  BOOL v130 = i;
  std::vector<std::ssub_match>::pointer v89 = v78;
  std::vector<std::ssub_match>::pointer v90 = v79;
  if (memcmp(v78, v86, (size_t)v79))
  {
    ++v76;
    uint64_t v79 = v90;
    int64_t v78 = v89;
    std::vector<std::string>::pointer v73 = v88;
    if (v76 == v81) {
      goto LABEL_235;
    }
    goto LABEL_151;
  }
  operator delete(__p[0]);
  BOOL negate = 1;
  uint64_t v38 = v132;
  if (!v130) {
    goto LABEL_237;
  }
LABEL_244:
  if (negate == this->__negate_)
  {
    first = 0;
    int v119 = -993;
  }
  else
  {
    v2->__current_ += v38;
    first = this->__first_;
    int v119 = -995;
  }
  v2->__do_ = v119;
  v2->__node_ = first;
}

void sub_248B190CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  locale = a1[17].__locale_;
  if (locale)
  {
    uint64_t v3 = a1[18].__locale_;
    unint64_t v4 = a1[17].__locale_;
    if (v3 != locale)
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*((void **)v3 - 3));
        }
        uint64_t v3 = (std::locale::__imp *)((char *)v3 - 24);
      }
      while (v3 != locale);
      unint64_t v4 = a1[17].__locale_;
    }
    a1[18].__locale_ = locale;
    operator delete(v4);
  }
  unsigned int v5 = a1[14].__locale_;
  if (v5)
  {
    a1[15].__locale_ = v5;
    operator delete(v5);
  }
  char v6 = a1[11].__locale_;
  if (v6)
  {
    char v7 = a1[12].__locale_;
    unint64_t v8 = a1[11].__locale_;
    if (v7 == v6)
    {
LABEL_21:
      a1[12].__locale_ = v6;
      operator delete(v8);
      goto LABEL_22;
    }
    while (1)
    {
      if (*((char *)v7 - 1) < 0)
      {
        operator delete(*((void **)v7 - 3));
        if (*((char *)v7 - 25) < 0) {
LABEL_19:
        }
          operator delete(*((void **)v7 - 6));
      }
      else if (*((char *)v7 - 25) < 0)
      {
        goto LABEL_19;
      }
      char v7 = (std::locale::__imp *)((char *)v7 - 48);
      if (v7 == v6)
      {
        unint64_t v8 = a1[11].__locale_;
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v9 = a1[8].__locale_;
  if (v9)
  {
    a1[9].__locale_ = v9;
    operator delete(v9);
  }
  uint64_t v10 = a1[5].__locale_;
  if (v10)
  {
    a1[6].__locale_ = v10;
    operator delete(v10);
  }
  std::locale::~locale(a1 + 2);
  uint64_t v11 = a1[1].__locale_;
  if (v11) {
    (*(void (**)(std::locale::__imp *))(*(void *)v11 + 8))(v11);
  }
  return a1;
}

void std::regex_traits<char>::__lookup_collatename<char *>(unsigned char *__src@<X1>, uint64_t a2@<X0>, unsigned char *a3@<X2>, uint64_t a4@<X8>)
{
  size_t v5 = a3 - __src;
  memset(&__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 <= 0x16)
  {
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = (_BYTE)a3 - (_BYTE)__src;
    p_dst = &__dst;
    if (__src == a3) {
      goto LABEL_9;
    }
LABEL_8:
    memcpy(p_dst, __src, v5);
    p_dst = (std::string *)((char *)p_dst + v5);
    goto LABEL_9;
  }
  uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17) {
    uint64_t v10 = v5 | 7;
  }
  uint64_t v11 = v10 + 1;
  p_dst = (std::string *)operator new(v10 + 1);
  __dst.__r_.__value_.__l.__size_ = v5;
  __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (__src != a3) {
    goto LABEL_8;
  }
LABEL_9:
  p_dst->__r_.__value_.__s.__data_[0] = 0;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v12 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if (!__dst.__r_.__value_.__l.__size_) {
      goto LABEL_18;
    }
  }
  else
  {
    if (!*((unsigned char *)&__dst.__r_.__value_.__s + 23)) {
      return;
    }
    BOOL v12 = &__dst;
  }
  std::__get_collation_name(&v17, (const char *)v12);
  *(_OWORD *)a4 = *(_OWORD *)&v17.__r_.__value_.__l.__data_;
  unint64_t v13 = v17.__r_.__value_.__r.__words[2];
  *(void *)(a4 + 16) = *((void *)&v17.__r_.__value_.__l + 2);
  unint64_t v14 = HIBYTE(v13);
  if ((v14 & 0x80u) != 0) {
    unint64_t v14 = *(void *)(a4 + 8);
  }
  if (v14) {
    goto LABEL_16;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v12 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if (__dst.__r_.__value_.__l.__size_ < 3) {
      goto LABEL_24;
    }
LABEL_18:
    operator delete(v12);
    return;
  }
  if (HIBYTE(__dst.__r_.__value_.__r.__words[2]) < 3u)
  {
LABEL_24:
    (*(void (**)(std::string *__return_ptr))(**(void **)(a2 + 16) + 32))(&v17);
    if (*(char *)(a4 + 23) < 0) {
      operator delete(*(void **)a4);
    }
    *(std::string *)a4 = v17;
    if (*(char *)(a4 + 23) < 0)
    {
      uint64_t v16 = *(void *)(a4 + 8);
      if (v16 != 1 && v16 != 12)
      {
        **(unsigned char **)a4 = 0;
        *(void *)(a4 + 8) = 0;
        goto LABEL_16;
      }
    }
    else
    {
      int v15 = *(unsigned __int8 *)(a4 + 23);
      if (v15 != 12 && v15 != 1)
      {
        *(unsigned char *)a4 = 0;
        *(unsigned char *)(a4 + 23) = 0;
LABEL_16:
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return;
        }
        BOOL v12 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        goto LABEL_18;
      }
    }
    std::string::operator=((std::string *)a4, &__dst);
    goto LABEL_16;
  }
}

void sub_248B194D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<char *>(unsigned char *__src@<X1>, uint64_t a2@<X0>, unsigned char *a3@<X2>, void *a4@<X8>)
{
  size_t v5 = a3 - __src;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 <= 0x16)
  {
    HIBYTE(__dst[2]) = (_BYTE)a3 - (_BYTE)__src;
    uint64_t v9 = __dst;
    if (__src == a3) {
      goto LABEL_9;
    }
LABEL_8:
    memcpy(v9, __src, v5);
    uint64_t v9 = (void **)((char *)v9 + v5);
    goto LABEL_9;
  }
  uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17) {
    uint64_t v10 = v5 | 7;
  }
  uint64_t v11 = v10 + 1;
  uint64_t v9 = (void **)operator new(v10 + 1);
  __dst[1] = (void *)v5;
  __dst[2] = (void *)(v11 | 0x8000000000000000);
  __dst[0] = v9;
  if (__src != a3) {
    goto LABEL_8;
  }
LABEL_9:
  *(unsigned char *)uint64_t v9 = 0;
  memset(a4, 170, 24);
  BOOL v12 = (char *)HIBYTE(__dst[2]);
  if (SHIBYTE(__dst[2]) >= 0) {
    unint64_t v13 = __dst;
  }
  else {
    unint64_t v13 = (void **)__dst[0];
  }
  if (SHIBYTE(__dst[2]) < 0) {
    BOOL v12 = (char *)__dst[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v13, &v12[(void)v13]);
  uint64_t v14 = *((unsigned __int8 *)a4 + 23);
  int v15 = (char)v14;
  if ((v14 & 0x80u) != 0) {
    uint64_t v14 = a4[1];
  }
  if (v14 == 1)
  {
LABEL_25:
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_26;
  }
  if (v14 == 12)
  {
    if (v15 >= 0) {
      uint64_t v16 = a4;
    }
    else {
      uint64_t v16 = (unsigned char *)*a4;
    }
    v16[11] = v16[3];
    if (SHIBYTE(__dst[2]) < 0) {
      goto LABEL_26;
    }
    return;
  }
  if ((v15 & 0x80000000) == 0)
  {
    *(unsigned char *)a4 = 0;
    *((unsigned char *)a4 + 23) = 0;
    goto LABEL_25;
  }
  *(unsigned char *)*a4 = 0;
  a4[1] = 0;
  if (SHIBYTE(__dst[2]) < 0) {
LABEL_26:
  }
    operator delete(__dst[0]);
}

void sub_248B196C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x24C58B260](exception, 5);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_248B19728(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3, std::string *this, uint64_t a5)
{
  if (a2 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  switch(*a2)
  {
    case 'D':
      *(_DWORD *)(a5 + 164) |= 0x400u;
      uint64_t result = (unsigned __int8 *)(a2 + 1);
      break;
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 't':
    case 'u':
    case 'v':
      goto LABEL_6;
    case 'S':
      *(_DWORD *)(a5 + 164) |= 0x4000u;
      uint64_t result = (unsigned __int8 *)(a2 + 1);
      break;
    case 'W':
      *(_DWORD *)(a5 + 164) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
      uint64_t result = (unsigned __int8 *)(a2 + 1);
      break;
    case 'b':
      std::string::operator=(this, 8);
      uint64_t result = (unsigned __int8 *)(a2 + 1);
      break;
    case 'd':
      *(_DWORD *)(a5 + 160) |= 0x400u;
      uint64_t result = (unsigned __int8 *)(a2 + 1);
      break;
    case 's':
      *(_DWORD *)(a5 + 160) |= 0x4000u;
      uint64_t result = (unsigned __int8 *)(a2 + 1);
      break;
    case 'w':
      *(_DWORD *)(a5 + 160) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
      uint64_t result = (unsigned __int8 *)(a2 + 1);
      break;
    default:
      if (*a2)
      {
LABEL_6:
        uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, a2, a3, this);
      }
      else
      {
        std::string::operator=(this, 0);
        uint64_t result = (unsigned __int8 *)(a2 + 1);
      }
      break;
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, char *a2, char *a3, std::string *this)
{
  if (a2 == a3) {
LABEL_51:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  int v5 = *a2;
  switch(v5)
  {
    case '""':
    case '/':
    case '\\':
      if (this) {
        std::string::operator=(this, v5);
      }
      else {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      }
      return a2 + 1;
    case 'a':
      if (this) {
        std::string::operator=(this, 7);
      }
      else {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 7);
      }
      return a2 + 1;
    case 'b':
      if (this) {
        std::string::operator=(this, 8);
      }
      else {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 8);
      }
      return a2 + 1;
    case 'f':
      if (this) {
        std::string::operator=(this, 12);
      }
      else {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
      }
      return a2 + 1;
    case 'n':
      if (this) {
        std::string::operator=(this, 10);
      }
      else {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
      }
      return a2 + 1;
    case 'r':
      if (this) {
        std::string::operator=(this, 13);
      }
      else {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
      }
      return a2 + 1;
    case 't':
      if (this) {
        std::string::operator=(this, 9);
      }
      else {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
      }
      return a2 + 1;
    case 'v':
      if (this) {
        std::string::operator=(this, 11);
      }
      else {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 11);
      }
      return a2 + 1;
    default:
      if ((v5 & 0xFFFFFFF8) != 0x30) {
        goto LABEL_51;
      }
      char v7 = a2 + 1;
      if (a2 + 1 == a3)
      {
        char v7 = a3;
LABEL_40:
        std::string::value_type v12 = v5 - 48;
        if (this) {
          goto LABEL_41;
        }
        goto LABEL_50;
      }
      if ((*v7 & 0xF8) != 0x30) {
        goto LABEL_40;
      }
      std::string::value_type v8 = *v7 + 8 * (v5 - 48) - 48;
      if (a2 + 2 != a3)
      {
        char v9 = a2[2];
        int v10 = v9 & 0xF8;
        std::string::value_type v11 = v9 + 8 * v8 - 48;
        if (v10 == 48) {
          char v7 = a2 + 3;
        }
        else {
          char v7 = a2 + 2;
        }
        if (v10 == 48) {
          std::string::value_type v8 = v11;
        }
        std::string::value_type v12 = v8;
        if (!this) {
          goto LABEL_50;
        }
LABEL_41:
        std::string::operator=(this, v12);
        return v7;
      }
      char v7 = a3;
      std::string::value_type v12 = v8;
      if (this) {
        goto LABEL_41;
      }
LABEL_50:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v12);
      return v7;
  }
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = (uint64_t)a2;
  if (!*(unsigned char *)(a1 + 170))
  {
    uint64_t v16 = a2[23];
    if (a2[23] < 0)
    {
      if (*((void *)a2 + 1) != 1) {
        goto LABEL_74;
      }
    }
    else if (v16 != 1)
    {
LABEL_74:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
    }
    if (*(char *)(a3 + 23) < 0)
    {
      if (*(void *)(a3 + 8) != 1) {
        goto LABEL_74;
      }
    }
    else if (*(unsigned char *)(a3 + 23) != 1)
    {
      goto LABEL_74;
    }
    if (!*(unsigned char *)(a1 + 169))
    {
LABEL_67:
      *(_OWORD *)std::string __p = *(_OWORD *)v4;
      uint64_t v49 = *(void *)(v4 + 16);
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      *(void *)uint64_t v4 = 0;
      *(_OWORD *)std::vector<std::pair<std::string, std::string>>::pointer v50 = *(_OWORD *)v3;
      uint64_t v51 = *(void *)(v3 + 16);
      *(void *)(v3 + 8) = 0;
      *(void *)(v3 + 16) = 0;
      *(void *)uint64_t v3 = 0;
      unint64_t v39 = *(void *)(a1 + 96);
      if (v39 < *(void *)(a1 + 104))
      {
        long long v40 = *(_OWORD *)__p;
        *(void *)(v39 + 16) = v49;
        *(_OWORD *)unint64_t v39 = v40;
        __p[1] = 0;
        uint64_t v49 = 0;
        __p[0] = 0;
        uint64_t v41 = v51;
        *(_OWORD *)(v39 + 24) = *(_OWORD *)v50;
        *(void *)(v39 + 40) = v41;
        v50[1] = 0;
        uint64_t v51 = 0;
        v50[0] = 0;
        *(void *)(a1 + 96) = v39 + 48;
        if (SHIBYTE(v49) < 0) {
          goto LABEL_69;
        }
        return;
      }
      unint64_t v42 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>((void **)(a1 + 88), (uint64_t)__p);
      int v43 = SHIBYTE(v51);
      *(void *)(a1 + 96) = v42;
      if ((v43 & 0x80000000) == 0)
      {
        if (SHIBYTE(v49) < 0) {
          goto LABEL_69;
        }
        return;
      }
      operator delete(v50[0]);
      if ((SHIBYTE(v49) & 0x80000000) == 0) {
        return;
      }
LABEL_69:
      operator delete(__p[0]);
      return;
    }
    int v34 = a2;
    if ((v16 & 0x80) != 0) {
      int v34 = *(char **)a2;
    }
    char v35 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v34);
    if (*(char *)(v4 + 23) < 0)
    {
      **(unsigned char **)uint64_t v4 = v35;
      unint64_t v36 = (char *)v3;
      if ((*(char *)(v3 + 23) & 0x80000000) == 0) {
        goto LABEL_64;
      }
    }
    else
    {
      *(unsigned char *)uint64_t v4 = v35;
      unint64_t v36 = (char *)v3;
      if ((*(char *)(v3 + 23) & 0x80000000) == 0)
      {
LABEL_64:
        char v37 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v36);
        uint64_t v38 = (unsigned char *)v3;
        if (*(char *)(v3 + 23) < 0) {
          uint64_t v38 = *(unsigned char **)v3;
        }
        unsigned char *v38 = v37;
        goto LABEL_67;
      }
    }
    unint64_t v36 = *(char **)v3;
    goto LABEL_64;
  }
  if (*(unsigned char *)(a1 + 169))
  {
    for (unint64_t i = 0; ; ++i)
    {
      unint64_t v7 = *(unsigned __int8 *)(v4 + 23);
      if (*(char *)(v4 + 23) < 0)
      {
        if (i >= *(void *)(v4 + 8))
        {
LABEL_13:
          for (unint64_t j = 0; ; ++j)
          {
            unint64_t v12 = *(unsigned __int8 *)(v3 + 23);
            if (*(char *)(v3 + 23) < 0)
            {
              if (j >= *(void *)(v3 + 8)) {
                goto LABEL_44;
              }
            }
            else if (j >= v12)
            {
              goto LABEL_44;
            }
            uint64_t v13 = v3;
            if ((v12 & 0x80) != 0) {
              uint64_t v13 = *(void *)v3;
            }
            char v14 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *(char *)(v13 + j));
            uint64_t v15 = v3;
            if (*(char *)(v3 + 23) < 0) {
              uint64_t v15 = *(void *)v3;
            }
            *(unsigned char *)(v15 + j) = v14;
          }
        }
      }
      else if (i >= v7)
      {
        goto LABEL_13;
      }
      uint64_t v8 = v4;
      if ((v7 & 0x80) != 0) {
        uint64_t v8 = *(void *)v4;
      }
      char v9 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *(char *)(v8 + i));
      uint64_t v10 = v4;
      if (*(char *)(v4 + 23) < 0) {
        uint64_t v10 = *(void *)v4;
      }
      *(unsigned char *)(v10 + i) = v9;
    }
  }
  for (unint64_t k = 0; ; ++k)
  {
    unint64_t v19 = a2[23];
    if (a2[23] < 0) {
      break;
    }
    if (k >= v19) {
      goto LABEL_35;
    }
LABEL_33:
    unint64_t v18 = a2;
    if ((v19 & 0x80) != 0)
    {
      unint64_t v18 = *(char **)a2;
      unint64_t v20 = *(char **)a2;
    }
    else
    {
      unint64_t v20 = a2;
    }
    v20[k] = v18[k];
  }
  if (k < *((void *)a2 + 1)) {
    goto LABEL_33;
  }
LABEL_35:
  for (unint64_t m = 0; ; ++m)
  {
    unint64_t v23 = *(unsigned __int8 *)(a3 + 23);
    if (*(char *)(a3 + 23) < 0) {
      break;
    }
    if (m >= v23) {
      goto LABEL_44;
    }
LABEL_42:
    uint64_t v22 = a3;
    if ((v23 & 0x80) != 0)
    {
      uint64_t v22 = *(void *)a3;
      uint64_t v24 = *(void *)a3;
    }
    else
    {
      uint64_t v24 = a3;
    }
    *(unsigned char *)(v24 + m) = *(unsigned char *)(v22 + m);
  }
  if (m < *(void *)(a3 + 8)) {
    goto LABEL_42;
  }
LABEL_44:
  if (*(char *)(v4 + 23) < 0)
  {
    uint64_t v26 = v4;
    uint64_t v4 = *(void *)v4;
    uint64_t v25 = *(void *)(v26 + 8);
  }
  else
  {
    uint64_t v25 = *(unsigned __int8 *)(v4 + 23);
  }
  std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v4, (char *)(v4 + v25));
  if (*(char *)(v3 + 23) < 0)
  {
    uint64_t v28 = v3;
    uint64_t v3 = *(void *)v3;
    uint64_t v27 = *(void *)(v28 + 8);
  }
  else
  {
    uint64_t v27 = *(unsigned __int8 *)(v3 + 23);
  }
  std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v3, (char *)(v3 + v27));
  *(_OWORD *)std::string __p = *(_OWORD *)v46;
  uint64_t v49 = v47;
  *(_OWORD *)std::vector<std::pair<std::string, std::string>>::pointer v50 = *(_OWORD *)v44;
  uint64_t v51 = v45;
  unint64_t v29 = *(void *)(a1 + 96);
  if (v29 >= *(void *)(a1 + 104))
  {
    unint64_t v32 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>((void **)(a1 + 88), (uint64_t)__p);
    int v33 = SHIBYTE(v51);
    *(void *)(a1 + 96) = v32;
    if (v33 < 0)
    {
      operator delete(v50[0]);
      if ((SHIBYTE(v49) & 0x80000000) == 0) {
        return;
      }
    }
    else if ((SHIBYTE(v49) & 0x80000000) == 0)
    {
      return;
    }
    goto LABEL_69;
  }
  long long v30 = *(_OWORD *)__p;
  *(void *)(v29 + 16) = v49;
  *(_OWORD *)unint64_t v29 = v30;
  __p[1] = 0;
  uint64_t v49 = 0;
  __p[0] = 0;
  uint64_t v31 = v51;
  *(_OWORD *)(v29 + 24) = *(_OWORD *)v50;
  *(void *)(v29 + 40) = v31;
  v50[1] = 0;
  uint64_t v51 = 0;
  v50[0] = 0;
  *(void *)(a1 + 96) = v29 + 48;
  if (SHIBYTE(v49) < 0) {
    goto LABEL_69;
  }
}

void sub_248B1A310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::pair<std::string,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_248B1A324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 169))
  {
    unsigned __int8 v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
    __int16 v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a3) << 8);
    uint64_t v8 = *(char **)(a1 + 120);
    unint64_t v7 = *(void *)(a1 + 128);
    if ((unint64_t)v8 >= v7)
    {
      char v9 = (char **)(a1 + 112);
      uint64_t v10 = *(char **)(a1 + 112);
      uint64_t v11 = v8 - v10;
      if (v8 - v10 > -3)
      {
        uint64_t v12 = v11 >> 1;
        unint64_t v13 = v7 - (void)v10;
        if (v13 <= (v11 >> 1) + 1) {
          unint64_t v14 = v12 + 1;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v13 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v15 = v14;
        }
        if (!v15)
        {
          uint64_t v16 = 0;
          uint64_t v17 = (_WORD *)(2 * v12);
          unint64_t v18 = 0;
          *(_WORD *)(2 * v12) = v6;
          uint64_t v19 = 2 * v12 + 2;
          unint64_t v20 = (char *)(v8 - v10);
          if (v8 == v10) {
            goto LABEL_64;
          }
LABEL_30:
          unint64_t v30 = (unint64_t)(v20 - 2);
          if (v30 < 0x1E) {
            goto LABEL_71;
          }
          if (v8 - v16 - (v11 & 0xFFFFFFFFFFFFFFFELL) < 0x20) {
            goto LABEL_71;
          }
          uint64_t v31 = (v30 >> 1) + 1;
          unint64_t v32 = 2 * (v31 & 0xFFFFFFFFFFFFFFF0);
          int v33 = &v8[-v32];
          uint64_t v17 = (_WORD *)((char *)v17 - v32);
          int v34 = &v16[2 * v12 - 16];
          char v35 = v8 - 16;
          unint64_t v36 = v31 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            long long v37 = *(_OWORD *)v35;
            *(v34 - 1) = *((_OWORD *)v35 - 1);
            *int v34 = v37;
            v34 -= 2;
            v35 -= 32;
            v36 -= 16;
          }
          while (v36);
          uint64_t v8 = v33;
          if (v31 != (v31 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_71:
            do
            {
              __int16 v38 = *((_WORD *)v8 - 1);
              v8 -= 2;
              *--uint64_t v17 = v38;
            }
            while (v8 != v10);
          }
LABEL_63:
          uint64_t v8 = *v9;
          goto LABEL_64;
        }
        if ((v15 & 0x8000000000000000) == 0)
        {
          uint64_t v16 = operator new(2 * v15);
          uint64_t v17 = &v16[2 * v12];
          unint64_t v18 = &v16[2 * v15];
          _WORD *v17 = v6;
          uint64_t v19 = (uint64_t)(v17 + 1);
          unint64_t v20 = (char *)(v8 - v10);
          if (v8 == v10) {
            goto LABEL_64;
          }
          goto LABEL_30;
        }
LABEL_68:
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
LABEL_67:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
LABEL_28:
    *(_WORD *)uint64_t v8 = v6;
    uint64_t v19 = (uint64_t)(v8 + 2);
    goto LABEL_66;
  }
  char v9 = (char **)(a1 + 112);
  __int16 v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
  uint64_t v8 = *(char **)(a1 + 120);
  unint64_t v21 = *(void *)(a1 + 128);
  if (*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v8 < v21) {
      goto LABEL_28;
    }
    uint64_t v22 = *v9;
    uint64_t v23 = v8 - *v9;
    if (v23 <= -3) {
      goto LABEL_67;
    }
    uint64_t v24 = v23 >> 1;
    unint64_t v25 = v21 - (void)v22;
    if (v25 <= (v23 >> 1) + 1) {
      unint64_t v26 = v24 + 1;
    }
    else {
      unint64_t v26 = v25;
    }
    if (v25 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v27 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v27 = v26;
    }
    if (v27)
    {
      if (v27 < 0) {
        goto LABEL_68;
      }
      uint64_t v28 = operator new(2 * v27);
      uint64_t v17 = &v28[2 * v24];
      unint64_t v18 = &v28[2 * v27];
      _WORD *v17 = v6;
      uint64_t v19 = (uint64_t)(v17 + 1);
      unint64_t v29 = (char *)(v8 - v22);
      if (v8 == v22) {
        goto LABEL_64;
      }
    }
    else
    {
      uint64_t v28 = 0;
      uint64_t v17 = (_WORD *)(2 * v24);
      unint64_t v18 = 0;
      *(_WORD *)(2 * v24) = v6;
      uint64_t v19 = 2 * v24 + 2;
      unint64_t v29 = (char *)(v8 - v22);
      if (v8 == v22) {
        goto LABEL_64;
      }
    }
    unint64_t v47 = (unint64_t)(v29 - 2);
    if (v47 < 0x1E) {
      goto LABEL_72;
    }
    if ((unint64_t)(v8 - &v28[v23 & 0xFFFFFFFFFFFFFFFELL]) < 0x20) {
      goto LABEL_72;
    }
    uint64_t v48 = (v47 >> 1) + 1;
    unint64_t v49 = 2 * (v48 & 0xFFFFFFFFFFFFFFF0);
    std::vector<std::pair<std::string, std::string>>::pointer v50 = &v8[-v49];
    uint64_t v17 = (_WORD *)((char *)v17 - v49);
    uint64_t v51 = &v28[2 * v24 - 16];
    unsigned int v52 = v8 - 16;
    unint64_t v53 = v48 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      long long v54 = *(_OWORD *)v52;
      *(v51 - 1) = *((_OWORD *)v52 - 1);
      *uint64_t v51 = v54;
      v51 -= 2;
      v52 -= 32;
      v53 -= 16;
    }
    while (v53);
    uint64_t v8 = v50;
    if (v48 != (v48 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_72:
      do
      {
        __int16 v55 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--uint64_t v17 = v55;
      }
      while (v8 != v22);
    }
    goto LABEL_63;
  }
  if ((unint64_t)v8 < v21) {
    goto LABEL_28;
  }
  unint64_t v39 = *v9;
  uint64_t v40 = v8 - *v9;
  if (v40 <= -3) {
    goto LABEL_67;
  }
  uint64_t v41 = v40 >> 1;
  unint64_t v42 = v21 - (void)v39;
  if (v42 <= (v40 >> 1) + 1) {
    unint64_t v43 = v41 + 1;
  }
  else {
    unint64_t v43 = v42;
  }
  if (v42 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v44 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v44 = v43;
  }
  if (!v44)
  {
    uint64_t v45 = 0;
    uint64_t v17 = (_WORD *)(2 * v41);
    unint64_t v18 = 0;
    *(_WORD *)(2 * v41) = v6;
    uint64_t v19 = 2 * v41 + 2;
    int v46 = (char *)(v8 - v39);
    if (v8 == v39) {
      goto LABEL_64;
    }
    goto LABEL_57;
  }
  if (v44 < 0) {
    goto LABEL_68;
  }
  uint64_t v45 = operator new(2 * v44);
  uint64_t v17 = &v45[2 * v41];
  unint64_t v18 = &v45[2 * v44];
  _WORD *v17 = v6;
  uint64_t v19 = (uint64_t)(v17 + 1);
  int v46 = (char *)(v8 - v39);
  if (v8 != v39)
  {
LABEL_57:
    unint64_t v56 = (unint64_t)(v46 - 2);
    if (v56 < 0x1E) {
      goto LABEL_73;
    }
    if ((unint64_t)(v8 - &v45[v40 & 0xFFFFFFFFFFFFFFFELL]) < 0x20) {
      goto LABEL_73;
    }
    uint64_t v57 = (v56 >> 1) + 1;
    unint64_t v58 = 2 * (v57 & 0xFFFFFFFFFFFFFFF0);
    char v59 = &v8[-v58];
    uint64_t v17 = (_WORD *)((char *)v17 - v58);
    BOOL v60 = &v45[2 * v41 - 16];
    int v61 = v8 - 16;
    unint64_t v62 = v57 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      long long v63 = *(_OWORD *)v61;
      *(v60 - 1) = *((_OWORD *)v61 - 1);
      *BOOL v60 = v63;
      v60 -= 2;
      v61 -= 32;
      v62 -= 16;
    }
    while (v62);
    uint64_t v8 = v59;
    if (v57 != (v57 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_73:
      do
      {
        __int16 v64 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--uint64_t v17 = v64;
      }
      while (v8 != v39);
    }
    goto LABEL_63;
  }
LABEL_64:
  *(void *)(a1 + 112) = v17;
  *(void *)(a1 + 120) = v19;
  *(void *)(a1 + 128) = v18;
  if (v8) {
    operator delete(v8);
  }
LABEL_66:
  *(void *)(a1 + 120) = v19;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x24C58B260](exception, 1);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_248B1A7A0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::regex_traits<char>::__lookup_collatename<char const*>(uint64_t a1, uint64_t a2, unsigned char *__src, unsigned char *a4)
{
  size_t v4 = a4 - __src;
  memset(&__dst, 170, sizeof(__dst));
  if ((unint64_t)(a4 - __src) >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v4 <= 0x16)
  {
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = (_BYTE)a4 - (_BYTE)__src;
    p_dst = &__dst;
    if (__src == a4) {
      goto LABEL_9;
    }
LABEL_8:
    memcpy(p_dst, __src, v4);
    p_dst = (std::string *)((char *)p_dst + v4);
    goto LABEL_9;
  }
  uint64_t v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v4 | 7) != 0x17) {
    uint64_t v10 = v4 | 7;
  }
  uint64_t v11 = v10 + 1;
  p_dst = (std::string *)operator new(v10 + 1);
  __dst.__r_.__value_.__l.__size_ = v4;
  __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (__src != a4) {
    goto LABEL_8;
  }
LABEL_9:
  p_dst->__r_.__value_.__s.__data_[0] = 0;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v12 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if (!__dst.__r_.__value_.__l.__size_) {
      goto LABEL_18;
    }
  }
  else
  {
    if (!*((unsigned char *)&__dst.__r_.__value_.__s + 23)) {
      return;
    }
    uint64_t v12 = &__dst;
  }
  std::__get_collation_name(&v17, (const char *)v12);
  *(_OWORD *)a1 = *(_OWORD *)&v17.__r_.__value_.__l.__data_;
  unint64_t v13 = v17.__r_.__value_.__r.__words[2];
  *(void *)(a1 + 16) = *((void *)&v17.__r_.__value_.__l + 2);
  unint64_t v14 = HIBYTE(v13);
  if ((v14 & 0x80u) != 0) {
    unint64_t v14 = *(void *)(a1 + 8);
  }
  if (v14) {
    goto LABEL_16;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v12 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if (__dst.__r_.__value_.__l.__size_ < 3) {
      goto LABEL_24;
    }
LABEL_18:
    operator delete(v12);
    return;
  }
  if (HIBYTE(__dst.__r_.__value_.__r.__words[2]) < 3u)
  {
LABEL_24:
    (*(void (**)(std::string *__return_ptr))(**(void **)(a2 + 16) + 32))(&v17);
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(std::string *)a1 = v17;
    if (*(char *)(a1 + 23) < 0)
    {
      uint64_t v16 = *(void *)(a1 + 8);
      if (v16 != 1 && v16 != 12)
      {
        **(unsigned char **)a1 = 0;
        *(void *)(a1 + 8) = 0;
        goto LABEL_16;
      }
    }
    else
    {
      int v15 = *(unsigned __int8 *)(a1 + 23);
      if (v15 != 12 && v15 != 1)
      {
        *(unsigned char *)a1 = 0;
        *(unsigned char *)(a1 + 23) = 0;
LABEL_16:
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return;
        }
        uint64_t v12 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        goto LABEL_18;
      }
    }
    std::string::operator=((std::string *)a1, &__dst);
    goto LABEL_16;
  }
}

void sub_248B1A9D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, unsigned char **a4@<X8>)
{
  unint64_t v5 = (unint64_t)&a3[-a2];
  memset(__p, 170, sizeof(__p));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 > 0x16)
  {
    uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v16 = v5 | 7;
    }
    uint64_t v17 = v16 + 1;
    char v9 = operator new(v16 + 1);
    __p[1] = (void *)v5;
    __p[2] = (void *)(v17 | 0x8000000000000000);
    __p[0] = v9;
    if ((char *)a2 != a3) {
      goto LABEL_4;
    }
LABEL_13:
    uint64_t v10 = v9;
    goto LABEL_16;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  char v9 = __p;
  if ((char *)a2 == a3) {
    goto LABEL_13;
  }
LABEL_4:
  if (v5 < 0x20 || (unint64_t)v9 - a2 < 0x20)
  {
    uint64_t v10 = v9;
    uint64_t v11 = (char *)a2;
  }
  else
  {
    uint64_t v10 = (char *)v9 + (v5 & 0xFFFFFFFFFFFFFFE0);
    uint64_t v11 = (char *)(a2 + (v5 & 0xFFFFFFFFFFFFFFE0));
    uint64_t v12 = (long long *)(a2 + 16);
    unint64_t v13 = v9 + 1;
    unint64_t v14 = v5 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *unint64_t v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 32;
    }
    while (v14);
    if (v5 == (v5 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_16;
    }
  }
  do
  {
    char v18 = *v11++;
    *v10++ = v18;
  }
  while (v11 != a3);
LABEL_16:
  unsigned char *v10 = 0;
  memset(a4, 170, 24);
  uint64_t v19 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v20 = __p;
  }
  else {
    unint64_t v20 = (void **)__p[0];
  }
  if (SHIBYTE(__p[2]) < 0) {
    uint64_t v19 = (char *)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v20, &v19[(void)v20]);
  unint64_t v21 = (unsigned char *)*((unsigned __int8 *)a4 + 23);
  int v22 = (char)v21;
  if ((char)v21 < 0) {
    unint64_t v21 = a4[1];
  }
  if (v21 == (unsigned char *)1) {
    goto LABEL_32;
  }
  if (v21 != (unsigned char *)12)
  {
    if (v22 < 0)
    {
      **a4 = 0;
      a4[1] = 0;
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_35:
      operator delete(__p[0]);
      return;
    }
    *(unsigned char *)a4 = 0;
    *((unsigned char *)a4 + 23) = 0;
LABEL_32:
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_35;
  }
  if (v22 >= 0) {
    uint64_t v23 = a4;
  }
  else {
    uint64_t v23 = *a4;
  }
  v23[11] = v23[3];
  if (SHIBYTE(__p[2]) < 0) {
    goto LABEL_35;
  }
}

void sub_248B1AC20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x24C58B260](exception, 2);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_248B1AC80(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (!*(unsigned char *)(a1 + 169))
  {
    __int16 v6 = (void *)(a1 + 64);
    unint64_t v5 = *(unsigned char **)(a1 + 72);
    unint64_t v16 = *(void *)(a1 + 80);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v5 < v16) {
        goto LABEL_24;
      }
      uint64_t v17 = (unsigned char *)*v6;
      unint64_t v18 = (unint64_t)&v5[-*v6];
      unint64_t v19 = v18 + 1;
      if ((uint64_t)(v18 + 1) >= 0)
      {
        unint64_t v20 = v16 - (void)v17;
        if (2 * v20 > v19) {
          unint64_t v19 = 2 * v20;
        }
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v21 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v21 = v19;
        }
        if (v21)
        {
          uint64_t v12 = operator new(v21);
          unint64_t v13 = &v12[v18];
          unint64_t v14 = &v12[v21];
          v12[v18] = v2;
          uint64_t v15 = (uint64_t)&v12[v18 + 1];
          if (v5 == v17) {
            goto LABEL_49;
          }
        }
        else
        {
          uint64_t v12 = 0;
          unint64_t v13 = &v5[-*v6];
          unint64_t v14 = 0;
          *(unsigned char *)unint64_t v18 = a2;
          uint64_t v15 = v18 + 1;
          if (v5 == v17) {
            goto LABEL_49;
          }
        }
        if (v18 >= 8 && (unint64_t)(v17 - v12) >= 0x20)
        {
          if (v18 >= 0x20)
          {
            unint64_t v28 = v18 & 0xFFFFFFFFFFFFFFE0;
            __int16 v38 = (long long *)(v5 - 16);
            unint64_t v39 = &v12[v5 - 16 - v17];
            unint64_t v40 = v18 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v41 = *v38;
              *(v39 - 1) = *(v38 - 1);
              *unint64_t v39 = v41;
              v39 -= 2;
              v38 -= 2;
              v40 -= 32;
            }
            while (v40);
            if (v18 == v28) {
              goto LABEL_86;
            }
            if ((v18 & 0x18) == 0)
            {
              v13 -= v28;
              v5 -= v28;
              goto LABEL_80;
            }
          }
          else
          {
            unint64_t v28 = 0;
          }
          v13 -= v18 & 0xFFFFFFFFFFFFFFF8;
          unint64_t v42 = &v5[-v28 - 8];
          unint64_t v43 = &v12[v42 - v17];
          unint64_t v44 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v45 = *(void *)v42;
            v42 -= 8;
            *v43-- = v45;
            v44 += 8;
          }
          while (v44);
          v5 -= v18 & 0xFFFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_86;
          }
        }
LABEL_80:
        unint64_t v56 = v13 - 1;
        do
        {
          char v57 = *--v5;
          *v56-- = v57;
        }
        while (v5 != v17);
        goto LABEL_86;
      }
LABEL_89:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    if ((unint64_t)v5 < v16) {
      goto LABEL_24;
    }
    uint64_t v23 = (unsigned char *)*v6;
    unint64_t v24 = (unint64_t)&v5[-*v6];
    unint64_t v25 = v24 + 1;
    if ((uint64_t)(v24 + 1) < 0) {
      goto LABEL_89;
    }
    unint64_t v26 = v16 - (void)v23;
    if (2 * v26 > v25) {
      unint64_t v25 = 2 * v26;
    }
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v27 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v27 = v25;
    }
    if (v27)
    {
      uint64_t v12 = operator new(v27);
      unint64_t v13 = &v12[v24];
      unint64_t v14 = &v12[v27];
      v12[v24] = v2;
      uint64_t v15 = (uint64_t)&v12[v24 + 1];
      if (v5 == v23)
      {
LABEL_49:
        *(void *)(a1 + 64) = v13;
        *(void *)(a1 + 72) = v15;
        *(void *)(a1 + 80) = v14;
        if (!v5) {
          goto LABEL_88;
        }
        goto LABEL_87;
      }
    }
    else
    {
      uint64_t v12 = 0;
      unint64_t v13 = &v5[-*v6];
      unint64_t v14 = 0;
      *(unsigned char *)unint64_t v24 = a2;
      uint64_t v15 = v24 + 1;
      if (v5 == v23) {
        goto LABEL_49;
      }
    }
    if (v24 >= 8 && (unint64_t)(v23 - v12) >= 0x20)
    {
      if (v24 >= 0x20)
      {
        unint64_t v29 = v24 & 0xFFFFFFFFFFFFFFE0;
        int v46 = (long long *)(v5 - 16);
        unint64_t v47 = &v12[v5 - 16 - v23];
        unint64_t v48 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          _OWORD *v47 = v49;
          v47 -= 2;
          v46 -= 2;
          v48 -= 32;
        }
        while (v48);
        if (v24 == v29) {
          goto LABEL_86;
        }
        if ((v24 & 0x18) == 0)
        {
          v13 -= v29;
          v5 -= v29;
          goto LABEL_84;
        }
      }
      else
      {
        unint64_t v29 = 0;
      }
      v13 -= v24 & 0xFFFFFFFFFFFFFFF8;
      std::vector<std::pair<std::string, std::string>>::pointer v50 = &v5[-v29 - 8];
      uint64_t v51 = &v12[v50 - v23];
      unint64_t v52 = v29 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v53 = *(void *)v50;
        v50 -= 8;
        *v51-- = v53;
        v52 += 8;
      }
      while (v52);
      v5 -= v24 & 0xFFFFFFFFFFFFFFF8;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_86;
      }
    }
LABEL_84:
    unint64_t v58 = v13 - 1;
    do
    {
      char v59 = *--v5;
      *v58-- = v59;
    }
    while (v5 != v23);
    goto LABEL_86;
  }
  char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
  unint64_t v5 = *(unsigned char **)(a1 + 72);
  unint64_t v4 = *(void *)(a1 + 80);
  if ((unint64_t)v5 < v4)
  {
LABEL_24:
    *unint64_t v5 = v2;
    uint64_t v15 = (uint64_t)(v5 + 1);
    goto LABEL_88;
  }
  __int16 v6 = (void *)(a1 + 64);
  unint64_t v7 = *(unsigned char **)(a1 + 64);
  unint64_t v8 = v5 - v7;
  uint64_t v9 = v5 - v7 + 1;
  if (v9 < 0) {
    goto LABEL_89;
  }
  unint64_t v10 = v4 - (void)v7;
  if (2 * v10 > v9) {
    uint64_t v9 = 2 * v10;
  }
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v11 = v9;
  }
  if (v11)
  {
    uint64_t v12 = operator new(v11);
    unint64_t v13 = &v12[v8];
    unint64_t v14 = &v12[v11];
    v12[v8] = v2;
    uint64_t v15 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7) {
      goto LABEL_49;
    }
  }
  else
  {
    uint64_t v12 = 0;
    unint64_t v13 = (char *)(v5 - v7);
    unint64_t v14 = 0;
    *(unsigned char *)unint64_t v8 = v2;
    uint64_t v15 = v8 + 1;
    if (v5 == v7) {
      goto LABEL_49;
    }
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20) {
    goto LABEL_76;
  }
  if (v8 < 0x20)
  {
    unint64_t v22 = 0;
    goto LABEL_55;
  }
  unint64_t v22 = v8 & 0xFFFFFFFFFFFFFFE0;
  unint64_t v30 = (long long *)(v5 - 16);
  uint64_t v31 = &v12[v5 - 16 - v7];
  unint64_t v32 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v33 = *v30;
    *(v31 - 1) = *(v30 - 1);
    *uint64_t v31 = v33;
    v31 -= 2;
    v30 -= 2;
    v32 -= 32;
  }
  while (v32);
  if (v8 != v22)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v22;
      v5 -= v22;
      goto LABEL_76;
    }
LABEL_55:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    int v34 = &v5[-v22 - 8];
    char v35 = &v12[v34 - v7];
    unint64_t v36 = v22 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint64_t v37 = *(void *)v34;
      v34 -= 8;
      *v35-- = v37;
      v36 += 8;
    }
    while (v36);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_86;
    }
LABEL_76:
    long long v54 = v13 - 1;
    do
    {
      char v55 = *--v5;
      *v54-- = v55;
    }
    while (v5 != v7);
  }
LABEL_86:
  unint64_t v5 = (unsigned char *)*v6;
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = v15;
  *(void *)(a1 + 80) = v14;
  if (v5) {
LABEL_87:
  }
    operator delete(v5);
LABEL_88:
  *(void *)(a1 + 72) = v15;
}

void std::regex_traits<char>::transform<std::__wrap_iter<char *>>(uint64_t a1, uint64_t a2, char *a3)
{
  unint64_t v3 = (unint64_t)&a3[-a2];
  memset(__p, 170, sizeof(__p));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v3 > 0x16)
  {
    uint64_t v14 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v14 = v3 | 7;
    }
    uint64_t v15 = v14 + 1;
    unint64_t v7 = operator new(v14 + 1);
    __p[1] = (void *)v3;
    __p[2] = (void *)(v15 | 0x8000000000000000);
    __p[0] = v7;
    if ((char *)a2 != a3) {
      goto LABEL_4;
    }
LABEL_13:
    unint64_t v8 = v7;
    goto LABEL_16;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  unint64_t v7 = __p;
  if ((char *)a2 == a3) {
    goto LABEL_13;
  }
LABEL_4:
  if (v3 < 0x20 || (unint64_t)v7 - a2 < 0x20)
  {
    unint64_t v8 = v7;
    uint64_t v9 = (char *)a2;
  }
  else
  {
    unint64_t v8 = (char *)v7 + (v3 & 0xFFFFFFFFFFFFFFE0);
    uint64_t v9 = (char *)(a2 + (v3 & 0xFFFFFFFFFFFFFFE0));
    unint64_t v10 = (long long *)(a2 + 16);
    size_t v11 = v7 + 1;
    unint64_t v12 = v3 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v13 = *v10;
      *(v11 - 1) = *(v10 - 1);
      *size_t v11 = v13;
      v10 += 2;
      v11 += 2;
      v12 -= 32;
    }
    while (v12);
    if (v3 == (v3 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_16;
    }
  }
  do
  {
    char v16 = *v9++;
    *v8++ = v16;
  }
  while (v9 != a3);
LABEL_16:
  unsigned char *v8 = 0;
  uint64_t v17 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v18 = __p;
  }
  else {
    unint64_t v18 = (void **)__p[0];
  }
  if (SHIBYTE(__p[2]) < 0) {
    uint64_t v17 = (char *)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v18, &v17[(void)v18]);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_248B1B2C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x24C58B260](exception, 9);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_248B1B324(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x555555555555555) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v7 = (char *)operator new(48 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  unint64_t v8 = &v7[48 * v3];
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  uint64_t v9 = &v7[48 * v6];
  long long v10 = *(_OWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(v8 + 24) = v10;
  *((void *)v8 + 5) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  size_t v11 = v8 + 48;
  unint64_t v12 = (void **)*a1;
  long long v13 = (void **)a1[1];
  if (v13 != *a1)
  {
    do
    {
      long long v14 = *((_OWORD *)v13 - 3);
      *((void *)v8 - 4) = *(v13 - 4);
      *((_OWORD *)v8 - 3) = v14;
      *(v13 - 5) = 0;
      *(v13 - 4) = 0;
      *(v13 - 6) = 0;
      long long v15 = *(_OWORD *)(v13 - 3);
      *((void *)v8 - 1) = *(v13 - 1);
      *(_OWORD *)(v8 - 24) = v15;
      v8 -= 48;
      *(v13 - 2) = 0;
      *(v13 - 1) = 0;
      *(v13 - 3) = 0;
      v13 -= 6;
    }
    while (v13 != v12);
    long long v13 = (void **)*a1;
    char v16 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    while (1)
    {
      if (v16 == v13) {
        goto LABEL_22;
      }
      if (*((char *)v16 - 1) < 0)
      {
        operator delete(*(v16 - 3));
        if ((*((char *)v16 - 25) & 0x80000000) == 0) {
          goto LABEL_14;
        }
      }
      else if ((*((char *)v16 - 25) & 0x80000000) == 0)
      {
        goto LABEL_14;
      }
      operator delete(*(v16 - 6));
LABEL_14:
      v16 -= 6;
    }
  }
  *a1 = v8;
  a1[1] = v11;
  a1[2] = v9;
LABEL_22:
  if (v13) {
    operator delete(v13);
  }
  return v11;
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  char v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  char v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  operator delete(__p);
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(*(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(void *)(a2 + 16);
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  char v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  char v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  operator delete(__p);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  uint64_t v2 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(void *)(v2 + 8) = *(void *)(a2 + 16);
  *(unsigned char *)(v2 + 16) = 1;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
  int v8 = __mexp_end;
  int v9 = __mexp_begin;
  long long v14 = operator new(0x10uLL);
  std::vector<char>::pointer end = this->__end_;
  first = end->__first_;
  v14[1] = first;
  end->__first_ = 0;
  uint64_t v17 = operator new(0x38uLL);
  unsigned int loop_count = this->__loop_count_;
  *((void *)v17 + 1) = __s->__first_;
  *((void *)v17 + 2) = v14;
  *(void *)uint64_t v17 = &unk_26FCC8050;
  *((void *)v17 + 3) = __min;
  *((void *)v17 + 4) = __max;
  *((_DWORD *)v17 + 10) = loop_count;
  *((_DWORD *)v17 + 11) = v9;
  *((_DWORD *)v17 + 12) = v8;
  *((unsigned char *)v17 + 52) = __greedy;
  __s->__first_ = 0;
  unint64_t v19 = (std::__node<char> *)operator new(0x10uLL);
  v19->__vftable = (std::__node<char>_vtbl *)&unk_26FCC80E0;
  v19[1].__vftable = (std::__node<char>_vtbl *)v17;
  this->__end_->__first_ = v19;
  this->__end_ = (std::__owns_one_state<char> *)*((void *)v17 + 2);
  __s->__first_ = (std::__node<char> *)v17;
  this->__loop_count_ = loop_count + 1;
}

void sub_248B1B824(_Unwind_Exception *a1)
{
  std::__loop<char>::~__loop(v1);
  _Unwind_Resume(a1);
}

void sub_248B1B838(_Unwind_Exception *a1)
{
  std::__empty_state<char>::~__empty_state(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x24C58B260](exception, 8);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_248B1B890(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x24C58B260](exception, 7);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_248B1B8E8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_26FCC80B0;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  unint64_t v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

void std::__loop<char>::~__loop(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void *__p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_26FCC80B0;
  uint64_t v2 = __p[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  unint64_t v3 = __p[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  operator delete(__p);
}

uint64_t std::__loop<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 40);
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 != -991)
  {
    unint64_t *v4 = 0;
    if (!*(void *)(result + 32))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_28;
    }
    if (*(void *)(result + 24))
    {
      *(_DWORD *)a2 = -994;
      *(void *)(a2 + 80) = *(void *)(result + 8);
      *(void *)(v3 + 16 * v2 + 8) = *(void *)(a2 + 16);
      int v20 = *(_DWORD *)(result + 44);
      int v21 = *(_DWORD *)(result + 48);
      if (v20 == v21) {
        return result;
      }
      uint64_t v22 = (v21 - 1);
      uint64_t v23 = (v20 - 1);
      uint64_t v24 = *(void *)(a2 + 24);
      uint64_t v25 = *(void *)(a2 + 32);
      uint64_t v26 = v22 - v23;
      if ((unint64_t)(v22 - v23) >= 2)
      {
        uint64_t v27 = (v26 & 0xFFFFFFFFFFFFFFFELL) + v23;
        uint64_t v28 = v25 + 24 * v23 + 24;
        unint64_t v29 = v26 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(void *)(v28 - 24) = v24;
          *(void *)(v28 - 16) = v24;
          *(void *)uint64_t v28 = v24;
          *(void *)(v28 + 8) = v24;
          *(unsigned char *)(v28 - 8) = 0;
          *(unsigned char *)(v28 + 16) = 0;
          v28 += 48;
          v29 -= 2;
        }
        while (v29);
        if (v26 == (v26 & 0xFFFFFFFFFFFFFFFELL)) {
          return result;
        }
      }
      else
      {
        uint64_t v27 = v23;
      }
      uint64_t v30 = v22 - v27;
      uint64_t v31 = (unsigned char *)(v25 + 24 * v27 + 16);
      do
      {
        *((void *)v31 - 2) = v24;
        *((void *)v31 - 1) = v24;
        *uint64_t v31 = 0;
        v31 += 24;
        --v30;
      }
      while (v30);
      return result;
    }
LABEL_26:
    *(_DWORD *)a2 = -992;
    return result;
  }
  unint64_t v5 = *v4 + 1;
  unint64_t *v4 = v5;
  unint64_t v6 = *(void *)(result + 24);
  unint64_t v7 = *(void *)(result + 32);
  BOOL v8 = v5 < v7;
  if (v5 < v7 && v5 >= v6) {
    BOOL v8 = v5 < v7 && *(void *)(v3 + 16 * v2 + 8) != *(void *)(a2 + 16);
  }
  if (v8 && v5 >= v6) {
    goto LABEL_26;
  }
  *(_DWORD *)a2 = -994;
  if (!v8)
  {
LABEL_28:
    *(void *)(a2 + 80) = *(void *)(result + 16);
    return result;
  }
  *(void *)(a2 + 80) = *(void *)(result + 8);
  *(void *)(v3 + 16 * v2 + 8) = *(void *)(a2 + 16);
  int v12 = *(_DWORD *)(result + 44);
  int v13 = *(_DWORD *)(result + 48);
  if (v12 == v13) {
    return result;
  }
  uint64_t v14 = (v13 - 1);
  uint64_t v15 = (v12 - 1);
  uint64_t v16 = *(void *)(a2 + 24);
  uint64_t v17 = *(void *)(a2 + 32);
  uint64_t v18 = v14 - v15;
  if ((unint64_t)(v14 - v15) < 2)
  {
    uint64_t v19 = v15;
LABEL_39:
    uint64_t v34 = v14 - v19;
    char v35 = (unsigned char *)(v17 + 24 * v19 + 16);
    do
    {
      *((void *)v35 - 2) = v16;
      *((void *)v35 - 1) = v16;
      *char v35 = 0;
      v35 += 24;
      --v34;
    }
    while (v34);
    return result;
  }
  uint64_t v19 = (v18 & 0xFFFFFFFFFFFFFFFELL) + v15;
  uint64_t v32 = v17 + 24 * v15 + 24;
  unint64_t v33 = v18 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    *(void *)(v32 - 24) = v16;
    *(void *)(v32 - 16) = v16;
    *(void *)uint64_t v32 = v16;
    *(void *)(v32 + 8) = v16;
    *(unsigned char *)(v32 - 8) = 0;
    *(unsigned char *)(v32 + 16) = 0;
    v32 += 48;
    v33 -= 2;
  }
  while (v33);
  if (v18 != (v18 & 0xFFFFFFFFFFFFFFFELL)) {
    goto LABEL_39;
  }
  return result;
}

uint64_t std::__loop<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  if (*(unsigned __int8 *)(result + 52) == a2)
  {
    *(void *)(a3 + 80) = *(void *)(result + 16);
    return result;
  }
  *(void *)(a3 + 80) = *(void *)(result + 8);
  int v3 = *(_DWORD *)(result + 44);
  *(void *)(*(void *)(a3 + 56) + 16 * *(unsigned int *)(result + 40) + 8) = *(void *)(a3 + 16);
  int v4 = *(_DWORD *)(result + 48);
  if (v3 != v4)
  {
    uint64_t v5 = (v4 - 1);
    uint64_t v6 = (v3 - 1);
    uint64_t v7 = *(void *)(a3 + 24);
    uint64_t v8 = *(void *)(a3 + 32);
    uint64_t v9 = v5 - v6;
    if ((unint64_t)(v5 - v6) < 2)
    {
      uint64_t v10 = v6;
LABEL_9:
      uint64_t v13 = v5 - v10;
      uint64_t v14 = (unsigned char *)(v8 + 24 * v10 + 16);
      do
      {
        *((void *)v14 - 2) = v7;
        *((void *)v14 - 1) = v7;
        unsigned char *v14 = 0;
        v14 += 24;
        --v13;
      }
      while (v13);
      return result;
    }
    uint64_t v10 = (v9 & 0xFFFFFFFFFFFFFFFELL) + v6;
    uint64_t v11 = v8 + 24 * v6 + 24;
    unint64_t v12 = v9 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      *(void *)(v11 - 24) = v7;
      *(void *)(v11 - 16) = v7;
      *(void *)uint64_t v11 = v7;
      *(void *)(v11 + 8) = v7;
      *(unsigned char *)(v11 - 8) = 0;
      *(unsigned char *)(v11 + 16) = 0;
      v11 += 48;
      v12 -= 2;
    }
    while (v12);
    if (v9 != (v9 & 0xFFFFFFFFFFFFFFFELL)) {
      goto LABEL_9;
    }
  }
  return result;
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_26FCC80B0;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  int v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void *__p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_26FCC80B0;
  uint64_t v2 = __p[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  int v3 = __p[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  operator delete(__p);
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void (__cdecl ***std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_26FCC80B0;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  int v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

void std::__alternate<char>::~__alternate(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void *__p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_26FCC80B0;
  uint64_t v2 = __p[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  int v3 = __p[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  operator delete(__p);
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  uint64_t v3 = 8;
  if (a2) {
    uint64_t v3 = 16;
  }
  *(void *)(a3 + 80) = *(void *)(result + v3);
  return result;
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x24C58B260](exception, 15);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_248B1C0BC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3)
  {
    uint64_t v7 = a2 + 1;
    int v6 = *a2;
    if (a2 + 1 != a3 || v6 != 36)
    {
      if ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v6);
        return (unsigned __int8 *)(a2 + 1);
      }
      if (v7 == a3 || v6 != 92)
      {
        if (v6 == 46)
        {
          uint64_t v17 = operator new(0x10uLL);
          uint64_t v18 = *(void *)(a1 + 56);
          uint64_t v19 = *(void *)(v18 + 8);
          void *v17 = &unk_26FCC81B8;
          v17[1] = v19;
LABEL_39:
          *(void *)(v18 + 8) = v17;
          *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
          return (unsigned __int8 *)v7;
        }
      }
      else
      {
        int v16 = *v7;
        if ((v16 - 36) <= 0x3A && ((1 << (v16 - 36)) & 0x580000000000441) != 0)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v16);
          return (unsigned __int8 *)(a2 + 2);
        }
      }
    }
  }
  uint64_t v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(a1, a2, a3);
  uint64_t v7 = v8;
  if (v8 != a2 || v8 == a3) {
    return (unsigned __int8 *)v7;
  }
  if (a2 + 1 == a3 || *a2 != 92) {
    return (unsigned __int8 *)a2;
  }
  int v9 = a2[1];
  if (v9 != 40)
  {
    if (((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38) && (v9 - 49) <= 8)
    {
      if ((v9 - 48) > *(_DWORD *)(a1 + 28)) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_back_ref((std::basic_regex<char> *)a1, v9 - 48);
      return (unsigned __int8 *)(a2 + 2);
    }
    return (unsigned __int8 *)a2;
  }
  uint64_t v10 = (std::basic_regex<char> *)(a2 + 2);
  if ((*(unsigned char *)(a1 + 24) & 2) != 0)
  {
    int v12 = *(_DWORD *)(a1 + 28);
  }
  else
  {
    uint64_t v11 = operator new(0x18uLL);
    int v12 = *(_DWORD *)(a1 + 28) + 1;
    *(_DWORD *)(a1 + 28) = v12;
    uint64_t v13 = *(void *)(a1 + 56);
    uint64_t v14 = *(void *)(v13 + 8);
    *uint64_t v11 = &unk_26FCC7FC0;
    v11[1] = v14;
    *((_DWORD *)v11 + 4) = v12;
    *(void *)(v13 + 8) = v11;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
  }
  do
  {
    if (v10 == (std::basic_regex<char> *)a3) {
      goto LABEL_41;
    }
    int v21 = v10;
    uint64_t v22 = *(std::__owns_one_state<char> **)(a1 + 56);
    int v23 = *(_DWORD *)(a1 + 28);
    uint64_t v24 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, v21, a3);
    if (v24 == v21) {
      break;
    }
    uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>((std::basic_regex<char> *)a1, v24, (std::basic_regex<char> *)a3, v22, (v23 + 1), (*(_DWORD *)(a1 + 28) + 1));
  }
  while (v10 != v21);
  if ((char *)&v21->__traits_.__loc_.__locale_ + 1 == a3
    || LOBYTE(v21->__traits_.__loc_.__locale_) != 92
    || BYTE1(v21->__traits_.__loc_.__locale_) != 41)
  {
LABEL_41:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
  }
  uint64_t v7 = (char *)v21 + 2 * (BYTE1(v21->__traits_.__loc_.__locale_) == 41);
  if ((*(unsigned char *)(a1 + 24) & 2) == 0)
  {
    uint64_t v17 = operator new(0x18uLL);
    uint64_t v18 = *(void *)(a1 + 56);
    uint64_t v25 = *(void *)(v18 + 8);
    void *v17 = &unk_26FCC8008;
    v17[1] = v25;
    *((_DWORD *)v17 + 4) = v12;
    goto LABEL_39;
  }
  return (unsigned __int8 *)v7;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  int v6 = this;
  if (this == a3) {
    return v6;
  }
  int locale_low = LOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low == 42)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
    return (std::basic_regex<char> *)((char *)v6 + 1);
  }
  if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3
    || locale_low != 92
    || BYTE1(this->__traits_.__loc_.__locale_) != 123)
  {
    return v6;
  }
  int v9 = (std::basic_regex<char> *)((char *)this + 2 * (BYTE1(this->__traits_.__loc_.__locale_) == 123));
  if (v9 == a3) {
    goto LABEL_43;
  }
  int v10 = LOBYTE(v9->__traits_.__loc_.__locale_);
  if ((v10 & 0xF8) != 0x30 && (v10 & 0xFE) != 0x38) {
    goto LABEL_43;
  }
  int v11 = v10 - 48;
  int v12 = (std::basic_regex<char> *)((char *)&v9->__traits_.__loc_.__locale_ + 1);
  if ((std::basic_regex<char> *)((char *)&v9->__traits_.__loc_.__locale_ + 1) == a3)
  {
LABEL_16:
    int v12 = a3;
  }
  else
  {
    while (1)
    {
      int v13 = LOBYTE(v12->__traits_.__loc_.__locale_);
      if ((v13 & 0xF8) != 0x30 && (v13 & 0xFE) != 0x38) {
        break;
      }
      if (v11 >= 214748364) {
        goto LABEL_43;
      }
      int v11 = v13 + 10 * v11 - 48;
      int v12 = (std::basic_regex<char> *)((char *)v12 + 1);
      if (v12 == a3) {
        goto LABEL_16;
      }
    }
  }
  if (v12 == v9) {
    goto LABEL_43;
  }
  if (v12 == a3) {
    goto LABEL_41;
  }
  uint64_t v14 = (std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 1);
  int v15 = LOBYTE(v12->__traits_.__loc_.__locale_);
  if (v15 != 44)
  {
    if (v14 != a3 && v15 == 92 && LOBYTE(v14->__traits_.__loc_.__locale_) == 125)
    {
      uint64_t v19 = (unsigned __int8 *)&v12->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, v11, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v19;
    }
    goto LABEL_41;
  }
  if (v14 == a3) {
    goto LABEL_41;
  }
  int v16 = LOBYTE(v14->__traits_.__loc_.__locale_);
  if ((v16 & 0xF8) == 0x30 || (v16 & 0xFE) == 0x38)
  {
    uint64_t v14 = (std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 2);
    if ((std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 2) == a3) {
      goto LABEL_41;
    }
    int v17 = v16 - 48;
    while (1)
    {
      int v16 = LOBYTE(v14->__traits_.__loc_.__locale_);
      if ((v16 & 0xF8) != 0x30 && (v16 & 0xFE) != 0x38) {
        break;
      }
      if (v17 >= 214748364) {
        goto LABEL_43;
      }
      int v17 = v16 + 10 * v17 - 48;
      uint64_t v14 = (std::basic_regex<char> *)((char *)v14 + 1);
      if (v14 == a3) {
        goto LABEL_41;
      }
    }
  }
  else
  {
    int v17 = -1;
  }
  if (v14 == a3
    || (std::basic_regex<char> *)((char *)&v14->__traits_.__loc_.__locale_ + 1) == a3
    || v16 != 92
    || BYTE1(v14->__traits_.__loc_.__locale_) != 125)
  {
LABEL_41:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
  }
  uint64_t v18 = (unsigned __int8 *)v14 + 2 * (BYTE1(v14->__traits_.__loc_.__locale_) == 125);
  if (v17 != -1)
  {
    if (v17 >= v11)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, v17, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v18;
    }
LABEL_43:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
  return (std::basic_regex<char> *)v18;
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  operator delete(__p);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned char **)(a2 + 16);
  if (v2 == *(unsigned char **)(a2 + 24) || !*v2)
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    *(void *)(a2 + 80) = *(void *)(result + 8);
  }
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8) {
    return 0;
  }
  if (a2 - 48 > this->__marked_count_) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  int v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  int v7 = *(_DWORD *)(a1 + 28);
  if (a2 != a3)
  {
    int v8 = *a2;
    switch(*a2)
    {
      case '$':
      case '(':
      case '*':
      case '+':
      case '.':
      case '?':
      case '[':
      case '\\':
      case '^':
      case '{':
      case '|':
        goto LABEL_3;
      case ')':
        if (!*(_DWORD *)(a1 + 36)) {
          goto LABEL_8;
        }
LABEL_3:
        int v9 = a2 + 1;
        if (a2 + 1 != a3 && v8 == 92)
        {
          std::basic_regex<char>::value_type v10 = *v9;
          switch(*v9)
          {
            case '$':
            case '(':
            case ')':
            case '*':
            case '+':
            case '.':
            case '?':
            case '[':
            case '\\':
            case '^':
            case '{':
            case '|':
            case '}':
              std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v10);
              int v11 = a2 + 2;
              goto LABEL_37;
            default:
              if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
              {
                int v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v9, a3, 0);
              }
              else
              {
                BOOL v12 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v10);
                uint64_t v13 = 2;
                if (!v12) {
                  uint64_t v13 = 0;
                }
                int v11 = &a2[v13];
              }
              if (v11 != a2) {
                goto LABEL_19;
              }
              int v8 = *a2;
              break;
          }
        }
        if (v8 != 46) {
          goto LABEL_18;
        }
        uint64_t v14 = operator new(0x10uLL);
        uint64_t v15 = *(void *)(a1 + 56);
        uint64_t v16 = *(void *)(v15 + 8);
        void *v14 = &unk_26FCC81B8;
        v14[1] = v16;
        *(void *)(v15 + 8) = v14;
        break;
      default:
LABEL_8:
        std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v8);
        int v11 = a2 + 1;
        goto LABEL_37;
    }
    goto LABEL_27;
  }
LABEL_18:
  int v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(a1, a2, a3);
LABEL_19:
  if (v11 != a2 || v11 == a3) {
    goto LABEL_36;
  }
  int v17 = *a2;
  if (v17 == 36)
  {
    uint64_t v18 = operator new(0x18uLL);
    BOOL v19 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v20 = *(void *)(a1 + 56);
    v18[1] = *(void *)(v20 + 8);
    int v21 = &unk_26FCC7CA8;
    goto LABEL_26;
  }
  if (v17 == 40)
  {
    if ((*(unsigned char *)(a1 + 24) & 2) != 0)
    {
      int v23 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      uint64_t v22 = operator new(0x18uLL);
      int v23 = *(_DWORD *)(a1 + 28) + 1;
      *(_DWORD *)(a1 + 28) = v23;
      uint64_t v24 = *(void *)(a1 + 56);
      uint64_t v25 = *(void *)(v24 + 8);
      void *v22 = &unk_26FCC7FC0;
      v22[1] = v25;
      *((_DWORD *)v22 + 4) = v23;
      *(void *)(v24 + 8) = v22;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    ++*(_DWORD *)(a1 + 36);
    uint64_t v26 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, a2 + 1, a3);
    if (v26 == a3 || (uint64_t v27 = v26, *v26 != 41)) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    if ((*(unsigned char *)(a1 + 24) & 2) == 0)
    {
      uint64_t v28 = operator new(0x18uLL);
      uint64_t v29 = *(void *)(a1 + 56);
      uint64_t v30 = *(void *)(v29 + 8);
      void *v28 = &unk_26FCC8008;
      v28[1] = v30;
      *((_DWORD *)v28 + 4) = v23;
      *(void *)(v29 + 8) = v28;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    --*(_DWORD *)(a1 + 36);
    int v11 = v27 + 1;
LABEL_36:
    if (v11 != a2) {
      goto LABEL_37;
    }
    return (std::basic_regex<char> *)a2;
  }
  if (v17 != 94) {
    return (std::basic_regex<char> *)a2;
  }
  uint64_t v18 = operator new(0x18uLL);
  BOOL v19 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
  uint64_t v20 = *(void *)(a1 + 56);
  v18[1] = *(void *)(v20 + 8);
  int v21 = &unk_26FCC7C60;
LABEL_26:
  void *v18 = v21;
  *((unsigned char *)v18 + 16) = v19;
  *(void *)(v20 + 8) = v18;
LABEL_27:
  *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
  int v11 = a2 + 1;
LABEL_37:
  size_t v31 = (*(_DWORD *)(a1 + 28) + 1);
  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, (std::basic_regex<char> *)v11, (std::basic_regex<char> *)a3, v6, (v7 + 1), v31);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, std::sub_match<const char *> *a2, std::sub_match<const char *> *a3, std::vector<std::csub_match> *this, int a5)
{
  if ((a5 & 0x80) != 0) {
    int v9 = a5 & 0xFFA;
  }
  else {
    int v9 = a5;
  }
  int v10 = *(_DWORD *)(a1 + 28);
  this[1].__begin_ = a3;
  int v11 = (const std::vector<std::csub_match>::value_type *)&this[1];
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  std::vector<std::sub_match<char const*>>::assign(this, (v10 + 1), (std::vector<std::csub_match>::const_reference)&this[1]);
  this[2].__begin_ = a2;
  this[2].__end_ = a2;
  LOBYTE(this[2].__end_cap_.__value_) = 0;
  *(std::pair<const char *, const char *> *)&this[3].__begin_ = v11->std::pair<const char *, const char *>;
  LOBYTE(this[3].__end_cap_.__value_) = this[1].__end_cap_.__value_;
  if ((v9 & 0x800) == 0) {
    this[4].__end_ = a2;
  }
  LOBYTE(this[4].__begin_) = 1;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
  {
    if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0))goto LABEL_28; {
    goto LABEL_13;
    }
  }
  if (*(_DWORD *)(a1 + 28))
  {
    if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0))goto LABEL_28; {
LABEL_13:
    }
    if (a2 != a3 && (v9 & 0x40) == 0)
    {
      int v12 = v9 | 0x80;
      for (unint64_t i = (char *)&a2->first + 1; i != (const char *)a3; ++i)
      {
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
        if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
        {
          if (*(_DWORD *)(a1 + 28))
          {
            if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, i, (const char *)a3, (uint64_t *)this, v12, 0))goto LABEL_28; {
          }
            }
          else if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)i, (uint64_t)a3, (uint64_t *)this, v12, 0))
          {
            goto LABEL_28;
          }
        }
        else if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, i, (const char *)a3, (uint64_t *)this, v12, 0))
        {
          goto LABEL_28;
        }
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
      }
      std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
      if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
      {
        if (*(_DWORD *)(a1 + 28))
        {
          if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v12, 0))goto LABEL_28; {
        }
          }
        else if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a3, (uint64_t)a3, (uint64_t *)this, v12, 0))
        {
          goto LABEL_28;
        }
      }
      else if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v12, 0))
      {
        goto LABEL_28;
      }
    }
    uint64_t result = 0;
    this->__end_ = this->__begin_;
    return result;
  }
  if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a2, (uint64_t)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0) & 1) == 0)goto LABEL_13; {
LABEL_28:
  }
  if (this->__end_ == this->__begin_) {
    std::vector<std::csub_match>::pointer begin = (std::vector<std::csub_match>::pointer)v11;
  }
  else {
    std::vector<std::csub_match>::pointer begin = this->__begin_;
  }
  first = (std::sub_match<const char *> *)begin->first;
  this[2].__end_ = (std::vector<std::csub_match>::pointer)begin->first;
  LOBYTE(this[2].__end_cap_.__value_) = this[2].__begin_ != first;
  second = (std::sub_match<const char *> *)begin->second;
  this[3].__begin_ = second;
  LOBYTE(this[3].__end_cap_.__value_) = second != this[3].__end_;
  return 1;
}

void std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(std::vector<std::ssub_match> *this, uint64_t a2, std::sub_match<std::__wrap_iter<const char *>> *a3, uint64_t *a4, char a5)
{
  uint64_t v10 = a4[6];
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  std::vector<std::ssub_match>::pointer begin = this->__begin_;
  std::vector<char>::pointer end = this->__end_;
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  if (v11 <= v14)
  {
    if (v11 < v14)
    {
      std::vector<char>::pointer end = (std::vector<std::ssub_match>::pointer)((char *)begin + 8 * ((a4[1] - *a4) >> 3));
      this->__end_ = end;
    }
  }
  else
  {
    std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(this, v11 - v14);
    std::vector<std::ssub_match>::pointer begin = this->__begin_;
    std::vector<char>::pointer end = this->__end_;
  }
  if (end != begin)
  {
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    uint64_t v18 = *a4;
    uint64_t v17 = a4[1];
    do
    {
      unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v18) >> 3);
      uint64_t v20 = (void *)(v18 + v15 * 24);
      if (v19 <= v16) {
        int v21 = a4 + 3;
      }
      else {
        int v21 = v20;
      }
      begin[v15].first.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + *v21 - v10);
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v16) {
        uint64_t v22 = (uint64_t)(a4 + 3);
      }
      else {
        uint64_t v22 = *a4 + v15 * 24;
      }
      this->__begin_[v15].second.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + *(void *)(v22 + 8) - v10);
      uint64_t v18 = *a4;
      uint64_t v17 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v17 - *a4) >> 3) <= v16) {
        uint64_t v23 = (uint64_t)(a4 + 3);
      }
      else {
        uint64_t v23 = *a4 + v15 * 24;
      }
      char v24 = *(unsigned char *)(v23 + 16);
      std::vector<std::ssub_match>::pointer begin = this->__begin_;
      std::vector<std::ssub_match>::pointer v25 = this->__end_;
      this->__begin_[v15].matched = v24;
      ++v16;
      ++v15;
    }
    while (v16 < 0xAAAAAAAAAAAAAAABLL * (((char *)v25 - (char *)begin) >> 3));
  }
  this[1].__begin_ = a3;
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  uint64_t v26 = (std::sub_match<std::__wrap_iter<const char *>> *)(a2 + a4[6] - v10);
  this[2].__begin_ = v26;
  this[2].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[7] - v10);
  LOBYTE(this[2].__end_cap_.__value_) = *((unsigned char *)a4 + 64);
  this[3].__begin_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[9] - v10);
  this[3].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[10] - v10);
  LOBYTE(this[3].__end_cap_.__value_) = *((unsigned char *)a4 + 88);
  if ((a5 & 1) == 0) {
    this[4].__end_ = v26;
  }
  LOBYTE(this[4].__begin_) = *((unsigned char *)a4 + 96);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  long long v100 = 0u;
  long long v101 = 0u;
  long long v99 = 0u;
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6)
  {
LABEL_79:
    int v85 = (void **)*((void *)&v99 + 1);
    char v86 = (void **)v100;
    *((void *)&v101 + 1) = 0;
    unint64_t v87 = v100 - *((void *)&v99 + 1);
    if ((void)v100 - *((void *)&v99 + 1) < 0x11uLL) {
      goto LABEL_81;
    }
    do
    {
LABEL_80:
      operator delete(*v85);
      char v86 = (void **)v100;
      int v85 = (void **)(*((void *)&v99 + 1) + 8);
      *((void *)&v99 + 1) = v85;
      unint64_t v87 = v100 - (void)v85;
    }
    while ((void)v100 - (void)v85 > 0x10uLL);
    goto LABEL_81;
  }
  *(_DWORD *)BOOL v98 = 0;
  memset(&v98[8], 0, 85);
  std::deque<std::__state<char>>::__add_back_capacity((uint64_t)&v99);
  unint64_t v11 = *(void *)(*((void *)&v99 + 1) + 8 * (((void)v101 + *((void *)&v101 + 1)) / 0x2AuLL))
      + 96 * (((void)v101 + *((void *)&v101 + 1)) % 0x2AuLL);
  long long v12 = *(_OWORD *)&v98[16];
  *(_OWORD *)unint64_t v11 = *(_OWORD *)v98;
  *(_OWORD *)(v11 + 16) = v12;
  *(void *)(v11 + 40) = 0;
  *(void *)(v11 + 48) = 0;
  *(void *)(v11 + 32) = 0;
  memset(&v98[32], 0, 24);
  *(void *)(v11 + 56) = 0;
  *(void *)(v11 + 64) = 0;
  *(void *)(v11 + 72) = 0;
  memset(&v98[56], 0, 24);
  uint64_t v13 = *(void *)&v98[80];
  *(void *)(v11 + 85) = *(void *)&v98[85];
  *(void *)(v11 + 80) = v13;
  uint64_t v15 = *((void *)&v101 + 1);
  uint64_t v14 = v101;
  uint64_t v16 = ++*((void *)&v101 + 1);
  uint64_t v17 = *((void *)&v99 + 1);
  unint64_t v18 = *(unsigned int *)(a1 + 32);
  unint64_t v19 = v101 + v15;
  unint64_t v20 = 8 * (v19 / 0x2A);
  unint64_t v21 = 96 * (v19 % 0x2A);
  unint64_t v22 = *(void *)(*((void *)&v99 + 1) + v20) + v21;
  *(_DWORD *)unint64_t v22 = 0;
  *(void *)(v22 + 8) = a2;
  *(void *)(*(void *)(v17 + v20) + v21 + 16) = a2;
  *(void *)(*(void *)(v17 + v20) + v21 + 24) = a3;
  unint64_t v23 = *(void *)(v17 + v20) + v21;
  uint64_t v26 = *(void *)(v23 + 56);
  char v24 = (std::vector<std::pair<unsigned long, const char *>> *)(v23 + 56);
  uint64_t v25 = v26;
  unint64_t v27 = ((uint64_t)v24->__end_ - v26) >> 4;
  int64_t v92 = a4;
  if (v18 <= v27)
  {
    if (v18 < v27) {
      v24->__end_ = (std::vector<std::pair<unsigned long, const char *>>::pointer)(v25 + 16 * v18);
    }
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append(v24, v18 - v27);
    uint64_t v16 = *((void *)&v101 + 1);
    uint64_t v14 = v101;
    uint64_t v17 = *((void *)&v99 + 1);
  }
  uint64_t v94 = 0;
  char v95 = 0;
  unsigned int v28 = 0;
  unint64_t v29 = v14 + v16 - 1;
  unint64_t v30 = 8 * (v29 / 0x2A);
  unint64_t v31 = 96 * (v29 % 0x2A);
  *(void *)(*(void *)(v17 + v30) + v31 + 80) = v6;
  uint64_t v93 = a3;
  uint64_t v32 = a3 - a2;
  unint64_t v33 = *(void *)(v17 + v30) + v31;
  *(_DWORD *)(v33 + 88) = a5;
  *(unsigned char *)(v33 + 92) = a6;
  while (2)
  {
    if ((++v28 & 0xFFF) == 0 && (int)(v28 >> 12) >= (int)v32) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    }
    unint64_t v35 = v16 + v101 - 1;
    uint64_t v36 = *(void *)(*((void *)&v99 + 1) + 8 * (v35 / 0x2A));
    unint64_t v37 = v35 % 0x2A;
    uint64_t v38 = v36 + 96 * (v35 % 0x2A);
    unint64_t v40 = (void *)(v38 + 80);
    uint64_t v39 = *(void *)(v38 + 80);
    if (v39) {
      (*(void (**)(uint64_t, unint64_t))(*(void *)v39 + 16))(v39, v36 + 96 * v37);
    }
    switch(*(_DWORD *)v38)
    {
      case 0xFFFFFC18:
        uint64_t v41 = *(void *)(v36 + 96 * v37 + 16);
        if ((a5 & 0x20) != 0 && v41 == a2 || (a5 & 0x1000) != 0 && v41 != v93) {
          goto LABEL_21;
        }
        uint64_t v65 = v41 - *(void *)(v36 + 96 * v37 + 8);
        uint64_t v66 = v94;
        if ((v95 & (v94 >= v65)) == 0) {
          uint64_t v66 = v65;
        }
        if (v66 == v32)
        {
          int v67 = (void **)*((void *)&v99 + 1);
          uint64_t v68 = v100;
          if ((void)v100 == *((void *)&v99 + 1))
          {
            *((void *)&v101 + 1) = 0;
            unint64_t v82 = 0;
          }
          else
          {
            unint64_t v69 = (void *)(*((void *)&v99 + 1) + 8 * ((unint64_t)v101 / 0x2A));
            size_t v70 = (void *)(*v69 + 96 * ((unint64_t)v101 % 0x2A));
            unint64_t v71 = *(void *)(*((void *)&v99 + 1) + 8 * ((*((void *)&v101 + 1) + (void)v101) / 0x2AuLL))
                + 96 * ((*((void *)&v101 + 1) + (void)v101) % 0x2AuLL);
            if (v70 != (void *)v71)
            {
              do
              {
                BOOL v72 = (void *)v70[7];
                if (v72)
                {
                  v70[8] = v72;
                  operator delete(v72);
                }
                std::vector<std::string>::pointer v73 = (void *)v70[4];
                if (v73)
                {
                  v70[5] = v73;
                  operator delete(v73);
                }
                v70 += 12;
                if ((void *)((char *)v70 - *v69) == (void *)4032)
                {
                  uint64_t v74 = (void *)v69[1];
                  ++v69;
                  size_t v70 = v74;
                }
              }
              while (v70 != (void *)v71);
              int v67 = (void **)*((void *)&v99 + 1);
              uint64_t v68 = v100;
            }
            *((void *)&v101 + 1) = 0;
            unint64_t v82 = v68 - (void)v67;
            if (v82 >= 0x11)
            {
              do
              {
                operator delete(*v67);
                int v67 = (void **)(*((void *)&v99 + 1) + 8);
                *((void *)&v99 + 1) = v67;
                unint64_t v82 = v100 - (void)v67;
              }
              while ((void)v100 - (void)v67 > 0x10uLL);
            }
          }
          if (v82 >> 3 == 1)
          {
            uint64_t v83 = 21;
          }
          else
          {
            if (v82 >> 3 != 2)
            {
LABEL_76:
              char v95 = 1;
              uint64_t v94 = v32;
              goto LABEL_8;
            }
            uint64_t v83 = 42;
          }
          *(void *)&long long v101 = v83;
          goto LABEL_76;
        }
        uint64_t v94 = v66;
        unint64_t v75 = *((void *)&v101 + 1) + v101 - 1;
        uint64_t v76 = *(void *)(*((void *)&v99 + 1) + 8 * (v75 / 0x2A));
        unint64_t v77 = v75 % 0x2A;
        int64_t v78 = *(void **)(v76 + 96 * (v75 % 0x2A) + 56);
        if (v78)
        {
          *(void *)(v76 + 96 * v77 + 64) = v78;
          operator delete(v78);
        }
        uint64_t v79 = *(void **)(v76 + 96 * v77 + 32);
        if (v79)
        {
          *(void *)(v76 + 96 * v77 + 40) = v79;
          operator delete(v79);
        }
        uint64_t v80 = 42 * ((uint64_t)(v100 - *((void *)&v99 + 1)) >> 3) - 1;
        long long v81 = v101;
        --*((void *)&v101 + 1);
        if ((void)v100 == *((void *)&v99 + 1)) {
          uint64_t v80 = 0;
        }
        if ((unint64_t)(v80 - (*((void *)&v81 + 1) + v81) + 1) >= 0x54)
        {
          operator delete(*(void **)(v100 - 8));
          *(void *)&long long v100 = v100 - 8;
        }
        char v95 = 1;
LABEL_8:
        uint64_t v16 = *((void *)&v101 + 1);
        if (*((void *)&v101 + 1)) {
          continue;
        }
        if (v95)
        {
          uint64_t v84 = *v92;
          *(void *)uint64_t v84 = a2;
          *(void *)(v84 + 8) = a2 + v94;
          uint64_t v6 = 1;
          *(unsigned char *)(v84 + 16) = 1;
          goto LABEL_79;
        }
        uint64_t v6 = 0;
        int v85 = (void **)*((void *)&v99 + 1);
        char v86 = (void **)v100;
        *((void *)&v101 + 1) = 0;
        unint64_t v87 = v100 - *((void *)&v99 + 1);
        if ((void)v100 - *((void *)&v99 + 1) >= 0x11uLL) {
          goto LABEL_80;
        }
LABEL_81:
        unint64_t v88 = v87 >> 3;
        if (v88 == 1)
        {
          uint64_t v89 = 21;
LABEL_85:
          *(void *)&long long v101 = v89;
        }
        else if (v88 == 2)
        {
          uint64_t v89 = 42;
          goto LABEL_85;
        }
        if (v85 != v86)
        {
          do
          {
            std::vector<std::ssub_match>::pointer v90 = *v85++;
            operator delete(v90);
          }
          while (v85 != v86);
          if ((void)v100 != *((void *)&v99 + 1)) {
            *(void *)&long long v100 = v100 + ((*((void *)&v99 + 1) - v100 + 7) & 0xFFFFFFFFFFFFFFF8);
          }
        }
        if ((void)v99) {
          operator delete((void *)v99);
        }
        return v6;
      case 0xFFFFFC19:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_8;
      case 0xFFFFFC1D:
        unint64_t v49 = v101;
        if (!(void)v101)
        {
          std::deque<std::__state<char>>::__add_front_capacity((uint64_t)&v99);
          unint64_t v49 = v101;
        }
        std::vector<std::pair<std::string, std::string>>::pointer v50 = (void *)(*((void *)&v99 + 1) + 8 * (v49 / 0x2A));
        uint64_t v51 = *v50 + 96 * (v49 % 0x2A);
        if ((void)v100 == *((void *)&v99 + 1)) {
          uint64_t v51 = 0;
        }
        if (v51 == *v50) {
          uint64_t v51 = *(v50 - 1) + 4032;
        }
        long long v52 = *(_OWORD *)(v38 + 16);
        *(_OWORD *)(v51 - 96) = *(_OWORD *)v38;
        *(_OWORD *)(v51 - 80) = v52;
        uint64_t v53 = v36 + 96 * v37;
        *(void *)(v51 - 56) = 0;
        *(void *)(v51 - 48) = 0;
        *(void *)(v51 - 64) = 0;
        *(_OWORD *)(v51 - 64) = *(_OWORD *)(v53 + 32);
        *(void *)(v51 - 48) = *(void *)(v53 + 48);
        *(void *)(v53 + 32) = 0;
        *(void *)(v53 + 40) = 0;
        *(void *)(v53 + 48) = 0;
        *(void *)(v51 - 40) = 0;
        *(void *)(v51 - 32) = 0;
        *(void *)(v51 - 24) = 0;
        *(_OWORD *)(v51 - 40) = *(_OWORD *)(v53 + 56);
        *(void *)(v51 - 24) = *(void *)(v53 + 72);
        *(void *)(v53 + 56) = 0;
        *(void *)(v53 + 64) = 0;
        *(void *)(v53 + 72) = 0;
        uint64_t v54 = *v40;
        *(void *)(v51 - 11) = *(void *)(v38 + 85);
        *(void *)(v51 - 16) = v54;
        uint64_t v55 = *((void *)&v101 + 1);
        *(void *)&long long v101 = v101 - 1;
        ++*((void *)&v101 + 1);
        uint64_t v56 = v55 + v101;
        unint64_t v57 = (v55 + (uint64_t)v101) / 0x2AuLL;
        uint64_t v43 = *(void *)(*((void *)&v99 + 1) + 8 * v57);
        unint64_t v44 = v56 - 42 * v57;
        uint64_t v45 = *(void **)(v43 + 96 * v44 + 56);
        if (!v45) {
          goto LABEL_23;
        }
        goto LABEL_22;
      case 0xFFFFFC1F:
LABEL_21:
        unint64_t v42 = *((void *)&v101 + 1) + v101 - 1;
        uint64_t v43 = *(void *)(*((void *)&v99 + 1) + 8 * (v42 / 0x2A));
        unint64_t v44 = v42 % 0x2A;
        uint64_t v45 = *(void **)(v43 + 96 * (v42 % 0x2A) + 56);
        if (v45)
        {
LABEL_22:
          *(void *)(v43 + 96 * v44 + 64) = v45;
          operator delete(v45);
        }
LABEL_23:
        int v46 = *(void **)(v43 + 96 * v44 + 32);
        if (v46)
        {
          *(void *)(v43 + 96 * v44 + 40) = v46;
          operator delete(v46);
        }
        uint64_t v47 = 42 * ((uint64_t)(v100 - *((void *)&v99 + 1)) >> 3) - 1;
        long long v48 = v101;
        --*((void *)&v101 + 1);
        if ((void)v100 == *((void *)&v99 + 1)) {
          uint64_t v47 = 0;
        }
        if ((unint64_t)(v47 - (*((void *)&v48 + 1) + v48) + 1) >= 0x54)
        {
          operator delete(*(void **)(v100 - 8));
          *(void *)&long long v100 = v100 - 8;
        }
        goto LABEL_8;
      case 0xFFFFFC20:
        *(void *)&long long v58 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v58 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v98[64] = v58;
        *(_OWORD *)&v98[80] = v58;
        *(_OWORD *)&v98[32] = v58;
        *(_OWORD *)&v98[48] = v58;
        *(_OWORD *)BOOL v98 = v58;
        *(_OWORD *)&v98[16] = v58;
        std::__state<char>::__state((uint64_t)v98, (long long *)(v36 + 96 * v37));
        (*(void (**)(void, uint64_t, unint64_t))(*(void *)*v40 + 24))(*v40, 1, v36 + 96 * v37);
        (*(void (**)(void, void, unsigned char *))(**(void **)&v98[80] + 24))(*(void *)&v98[80], 0, v98);
        uint64_t v59 = *((void *)&v99 + 1);
        if ((void)v100 == *((void *)&v99 + 1)) {
          uint64_t v60 = 0;
        }
        else {
          uint64_t v60 = 42 * ((uint64_t)(v100 - *((void *)&v99 + 1)) >> 3) - 1;
        }
        unint64_t v61 = *((void *)&v101 + 1) + v101;
        if (v60 == *((void *)&v101 + 1) + (void)v101)
        {
          std::deque<std::__state<char>>::__add_back_capacity((uint64_t)&v99);
          uint64_t v59 = *((void *)&v99 + 1);
          unint64_t v61 = *((void *)&v101 + 1) + v101;
        }
        unint64_t v62 = *(void *)(v59 + 8 * (v61 / 0x2A)) + 96 * (v61 % 0x2A);
        long long v63 = *(_OWORD *)&v98[16];
        *(_OWORD *)unint64_t v62 = *(_OWORD *)v98;
        *(_OWORD *)(v62 + 16) = v63;
        *(void *)(v62 + 40) = 0;
        *(void *)(v62 + 48) = 0;
        *(void *)(v62 + 32) = 0;
        *(_OWORD *)(v62 + 32) = *(_OWORD *)&v98[32];
        *(void *)(v62 + 48) = *(void *)&v98[48];
        memset(&v98[32], 0, 24);
        *(void *)(v62 + 56) = 0;
        *(void *)(v62 + 64) = 0;
        *(void *)(v62 + 72) = 0;
        *(_OWORD *)(v62 + 56) = *(_OWORD *)&v98[56];
        *(void *)(v62 + 72) = *(void *)&v98[72];
        memset(&v98[56], 0, 24);
        uint64_t v64 = *(void *)&v98[80];
        *(void *)(v62 + 85) = *(void *)&v98[85];
        *(void *)(v62 + 80) = v64;
        ++*((void *)&v101 + 1);
        if (*(void *)&v98[56])
        {
          *(void *)&v98[64] = *(void *)&v98[56];
          operator delete(*(void **)&v98[56]);
        }
        if (*(void *)&v98[32])
        {
          *(void *)&v98[40] = *(void *)&v98[32];
          operator delete(*(void **)&v98[32]);
        }
        goto LABEL_8;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
  }
}

void sub_248B1DC14(_Unwind_Exception *a1)
{
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_248B1DC28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::__state<char>::~__state((uint64_t *)va);
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v9 - 144));
  _Unwind_Resume(a1);
}

void sub_248B1DC70(_Unwind_Exception *a1)
{
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_248B1DC84(_Unwind_Exception *a1)
{
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  int v67 = 0;
  uint64_t v68 = 0;
  unint64_t v69 = 0;
  *(_DWORD *)&v66[36] = -1431655766;
  *(void *)uint64_t v64 = 0xAAAAAAAA00000000;
  memset(&v64[8], 0, 32);
  *(_OWORD *)uint64_t v65 = 0u;
  memset(v66, 0, 36);
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6) {
    goto LABEL_63;
  }
  __x.second = a3;
  *(void *)&__x.matched = 0xAAAAAAAAAAAAAA00;
  __x.first = a3;
  *(_DWORD *)unint64_t v62 = 0;
  memset(&v62[8], 0, 85);
  uint64_t v68 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v67, (uint64_t)v62);
  if (*(void *)&v62[56])
  {
    *(void *)&v62[64] = *(void *)&v62[56];
    operator delete(*(void **)&v62[56]);
  }
  if (*(void *)&v62[32])
  {
    *(void *)&v62[40] = *(void *)&v62[32];
    operator delete(*(void **)&v62[32]);
  }
  uint64_t v13 = v68;
  *((_DWORD *)v68 - 24) = 0;
  *((void *)v13 - 11) = a2;
  *((void *)v13 - 10) = a2;
  *((void *)v13 - 9) = a3;
  uint64_t v14 = *((void *)v13 - 8);
  unint64_t v15 = *(unsigned int *)(a1 + 28);
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)v13 - 7) - v14) >> 3);
  if (v15 <= v16)
  {
    if (v15 < v16) {
      *((void *)v13 - 7) = v14 + 24 * v15;
    }
  }
  else
  {
    std::vector<std::sub_match<char const*>>::__append((std::vector<std::csub_match> *)(v13 - 64), v15 - v16, &__x);
    uint64_t v13 = v68;
  }
  uint64_t v17 = *((void *)v13 - 5);
  unint64_t v18 = *(unsigned int *)(a1 + 32);
  unint64_t v19 = (*((void *)v13 - 4) - v17) >> 4;
  long long v58 = a4;
  if (v18 <= v19)
  {
    if (v18 < v19) {
      *((void *)v13 - 4) = v17 + 16 * v18;
    }
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append((std::vector<std::pair<unsigned long, const char *>> *)(v13 - 40), v18 - v19);
    uint64_t v13 = v68;
  }
  char v61 = 0;
  unsigned int v20 = 0;
  unint64_t v21 = (const char *)(a3 - a2);
  *((void *)v13 - 2) = v6;
  *((_DWORD *)v13 - 2) = a5;
  *(v13 - 4) = a6;
  uint64_t v60 = 0;
  uint64_t v59 = a3;
  do
  {
    BOOL v22 = (++v20 & 0xFFF) != 0 || (int)(v20 >> 12) < (int)v21;
    if (!v22) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    }
    char v24 = v13 - 16;
    uint64_t v23 = *((void *)v13 - 2);
    uint64_t v25 = v13 - 96;
    if (v23) {
      (*(void (**)(uint64_t, char *))(*(void *)v23 + 16))(v23, v13 - 96);
    }
    switch(*(_DWORD *)v25)
    {
      case 0xFFFFFC18:
        uint64_t v26 = (const char *)*((void *)v13 - 10);
        if ((a5 & 0x20) != 0 && v26 == a2 || (a5 & 0x1000) != 0 && v26 != v59) {
          goto LABEL_29;
        }
        uint64_t v34 = &v26[-*((void *)v13 - 11)];
        unint64_t v35 = v60;
        if ((v61 & ((uint64_t)v60 >= (uint64_t)v34)) == 0)
        {
          long long v36 = *((_OWORD *)v13 - 5);
          *(_OWORD *)uint64_t v64 = *(_OWORD *)v25;
          *(_OWORD *)&v64[16] = v36;
          if (v64 != v25)
          {
            std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>((char **)&v64[32], *((char **)v13 - 8), *((char **)v13 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v13 - 7) - *((void *)v13 - 8)) >> 3));
            std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((uint64_t)v66, *((const double **)v13 - 5), *((const double **)v13 - 4), (uint64_t)(*((void *)v13 - 4) - *((void *)v13 - 5)) >> 4);
          }
          uint64_t v37 = *(void *)v24;
          *(void *)&v66[29] = *(void *)(v13 - 11);
          *(void *)&v66[24] = v37;
          unint64_t v35 = v34;
        }
        uint64_t v38 = v68;
        if (v35 == v21)
        {
          uint64_t v39 = v67;
          while (v38 != v39)
          {
            unint64_t v40 = (void *)*((void *)v38 - 5);
            if (v40)
            {
              *((void *)v38 - 4) = v40;
              operator delete(v40);
            }
            uint64_t v41 = (void *)*((void *)v38 - 8);
            if (v41)
            {
              *((void *)v38 - 7) = v41;
              operator delete(v41);
            }
            v38 -= 96;
          }
          uint64_t v68 = v39;
          char v61 = 1;
          uint64_t v60 = v21;
        }
        else
        {
          uint64_t v60 = v35;
          unint64_t v42 = (void *)*((void *)v68 - 5);
          if (v42)
          {
            *((void *)v68 - 4) = v42;
            operator delete(v42);
          }
          uint64_t v43 = (void *)*((void *)v38 - 8);
          if (v43)
          {
            *((void *)v38 - 7) = v43;
            operator delete(v43);
          }
          uint64_t v68 = v38 - 96;
          char v61 = 1;
        }
        break;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        break;
      case 0xFFFFFC1F:
LABEL_29:
        unint64_t v27 = v68;
        unsigned int v28 = (void *)*((void *)v68 - 5);
        if (v28)
        {
          *((void *)v68 - 4) = v28;
          operator delete(v28);
        }
        unint64_t v29 = (void *)*((void *)v27 - 8);
        if (v29)
        {
          *((void *)v27 - 7) = v29;
          operator delete(v29);
        }
        uint64_t v68 = v27 - 96;
        break;
      case 0xFFFFFC20:
        *(void *)&long long v30 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v30 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v62[64] = v30;
        *(_OWORD *)&v62[80] = v30;
        *(_OWORD *)&v62[32] = v30;
        *(_OWORD *)&v62[48] = v30;
        *(_OWORD *)unint64_t v62 = v30;
        *(_OWORD *)&v62[16] = v30;
        std::__state<char>::__state((uint64_t)v62, (long long *)v13 - 6);
        (*(void (**)(void, uint64_t, char *))(**(void **)v24 + 24))(*(void *)v24, 1, v13 - 96);
        (*(void (**)(void, void, unsigned char *))(**(void **)&v62[80] + 24))(*(void *)&v62[80], 0, v62);
        unint64_t v31 = v68;
        if ((unint64_t)v68 >= v69)
        {
          uint64_t v68 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v67, (uint64_t)v62);
          if (*(void *)&v62[56])
          {
            *(void *)&v62[64] = *(void *)&v62[56];
            operator delete(*(void **)&v62[56]);
          }
        }
        else
        {
          long long v32 = *(_OWORD *)&v62[16];
          *(_OWORD *)uint64_t v68 = *(_OWORD *)v62;
          *((_OWORD *)v31 + 1) = v32;
          *((void *)v31 + 4) = 0;
          *((void *)v31 + 5) = 0;
          *((void *)v31 + 6) = 0;
          *((void *)v31 + 7) = 0;
          *((_OWORD *)v31 + 2) = *(_OWORD *)&v62[32];
          *((void *)v31 + 6) = *(void *)&v62[48];
          memset(&v62[32], 0, 24);
          *((void *)v31 + 8) = 0;
          *((void *)v31 + 9) = 0;
          *(_OWORD *)(v31 + 56) = *(_OWORD *)&v62[56];
          *((void *)v31 + 9) = *(void *)&v62[72];
          memset(&v62[56], 0, 24);
          uint64_t v33 = *(void *)&v62[80];
          *(void *)(v31 + 85) = *(void *)&v62[85];
          *((void *)v31 + 10) = v33;
          uint64_t v68 = v31 + 96;
        }
        if (*(void *)&v62[32])
        {
          *(void *)&v62[40] = *(void *)&v62[32];
          operator delete(*(void **)&v62[32]);
        }
        break;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
    uint64_t v13 = v68;
  }
  while (v67 != v68);
  if ((v61 & 1) == 0)
  {
LABEL_63:
    uint64_t v50 = 0;
    uint64_t v51 = *(void **)v66;
    if (!*(void *)v66) {
      goto LABEL_65;
    }
    goto LABEL_64;
  }
  uint64_t v44 = *v58;
  *(void *)uint64_t v44 = a2;
  *(void *)(v44 + 8) = &v60[(void)a2];
  *(unsigned char *)(v44 + 16) = 1;
  if (v65[0] != *(void **)&v64[32])
  {
    unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v65[0] - *(void *)&v64[32]) >> 3);
    int v46 = (unsigned char *)(*(void *)&v64[32] + 16);
    unsigned int v47 = 1;
    do
    {
      uint64_t v48 = v44 + 24 * v47;
      *(_OWORD *)uint64_t v48 = *((_OWORD *)v46 - 1);
      char v49 = *v46;
      v46 += 24;
      *(unsigned char *)(v48 + 16) = v49;
      BOOL v22 = v45 > v47++;
    }
    while (v22);
  }
  uint64_t v50 = 1;
  uint64_t v51 = *(void **)v66;
  if (*(void *)v66)
  {
LABEL_64:
    *(void *)&v66[8] = v51;
    operator delete(v51);
  }
LABEL_65:
  if (*(void *)&v64[32])
  {
    v65[0] = *(void **)&v64[32];
    operator delete(*(void **)&v64[32]);
  }
  long long v52 = v67;
  if (v67)
  {
    uint64_t v53 = v68;
    uint64_t v54 = v67;
    if (v68 != v67)
    {
      do
      {
        uint64_t v55 = (void *)*((void *)v53 - 5);
        if (v55)
        {
          *((void *)v53 - 4) = v55;
          operator delete(v55);
        }
        uint64_t v56 = (void *)*((void *)v53 - 8);
        if (v56)
        {
          *((void *)v53 - 7) = v56;
          operator delete(v56);
        }
        v53 -= 96;
      }
      while (v53 != v52);
      uint64_t v54 = v67;
    }
    uint64_t v68 = v52;
    operator delete(v54);
  }
  return v50;
}

void sub_248B1E2B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::__state<char>::~__state(&a33);
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v33 - 120));
  _Unwind_Resume(a1);
}

void std::deque<std::__state<char>>::clear(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    a1[5] = 0;
    unint64_t v11 = 0;
  }
  else
  {
    unint64_t v4 = a1[4];
    uint64_t v5 = &v2[v4 / 0x2A];
    uint64_t v6 = (char *)*v5 + 96 * (v4 % 0x2A);
    unint64_t v7 = (unint64_t)v2[(a1[5] + v4) / 0x2A] + 96 * ((a1[5] + v4) % 0x2A);
    if (v6 != (char *)v7)
    {
      do
      {
        int v8 = (void *)*((void *)v6 + 7);
        if (v8)
        {
          *((void *)v6 + 8) = v8;
          operator delete(v8);
        }
        uint64_t v9 = (void *)*((void *)v6 + 4);
        if (v9)
        {
          *((void *)v6 + 5) = v9;
          operator delete(v9);
        }
        v6 += 96;
        if (v6 - (unsigned char *)*v5 == 4032)
        {
          uint64_t v10 = (char *)v5[1];
          ++v5;
          uint64_t v6 = v10;
        }
      }
      while (v6 != (char *)v7);
      uint64_t v2 = (void **)a1[1];
      uint64_t v3 = (void **)a1[2];
    }
    a1[5] = 0;
    unint64_t v11 = (char *)v3 - (char *)v2;
    if (v11 >= 0x11)
    {
      do
      {
        operator delete(*v2);
        uint64_t v12 = a1[2];
        uint64_t v2 = (void **)(a1[1] + 8);
        a1[1] = v2;
        unint64_t v11 = v12 - (void)v2;
      }
      while (v11 > 0x10);
    }
  }
  if (v11 >> 3 == 1)
  {
    uint64_t v13 = 21;
  }
  else
  {
    if (v11 >> 3 != 2) {
      return;
    }
    uint64_t v13 = 42;
  }
  a1[4] = v13;
}

void **std::deque<std::__state<char>>::~deque[abi:ne180100](void **a1)
{
  std::deque<std::__state<char>>::clear(a1);
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v2 != v3)
  {
    do
    {
      unint64_t v4 = *v2++;
      operator delete(v4);
    }
    while (v2 != v3);
    uint64_t v6 = a1[1];
    uint64_t v5 = a1[2];
    if (v5 != v6) {
      a1[2] = &v5[(v6 - v5 + 7) & 0xFFFFFFFFFFFFFFF8];
    }
  }
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::deque<std::__state<char>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x2A;
  unint64_t v4 = v2 - 42;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    uint64_t v6 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    unint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(void *)uint64_t v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v32 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v32 = 1;
      }
      if (!(v32 >> 61))
      {
        unint64_t v33 = v32 >> 2;
        uint64_t v34 = 8 * v32;
        unint64_t v35 = (char *)operator new(8 * v32);
        long long v36 = &v35[8 * v33];
        uint64_t v37 = &v35[v34];
        int64_t v39 = v5 - v7;
        BOOL v38 = v5 == v7;
        uint64_t v5 = v36;
        if (!v38)
        {
          uint64_t v5 = &v36[v39 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v40 = v39 - 8;
          if ((unint64_t)(v39 - 8) >= 0x38)
          {
            std::vector<std::string>::pointer v73 = &v35[8 * v33];
            uint64_t v41 = v73;
            if ((unint64_t)(v73 - v7) >= 0x20)
            {
              uint64_t v74 = (v40 >> 3) + 1;
              uint64_t v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v41 = &v36[v75];
              v7 += v75;
              uint64_t v76 = (long long *)(v6 + 3);
              unint64_t v77 = v73 + 16;
              uint64_t v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v79 = *v76;
                *(v77 - 1) = *(v76 - 1);
                *unint64_t v77 = v79;
                v76 += 2;
                v77 += 2;
                v78 -= 4;
              }
              while (v78);
              if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_76;
              }
            }
          }
          else
          {
            uint64_t v41 = &v35[8 * v33];
          }
          do
          {
            uint64_t v80 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v41 = v80;
            v41 += 8;
          }
          while (v41 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    unint64_t v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      unint64_t v7 = *(char **)(a1 + 8);
    }
    uint64_t v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      uint64_t v89 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((char **)a1, &v89);
      return;
    }
    uint64_t v89 = operator new(0xFC0uLL);
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v89);
    unint64_t v42 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    unint64_t v7 = (char *)(v42 + 1);
    uint64_t v8 = *v42;
    *(void *)(a1 + 8) = v42 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_78;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v43 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v43 = 1;
      }
      if (!(v43 >> 61))
      {
        unint64_t v44 = v43 >> 2;
        uint64_t v45 = 8 * v43;
        unint64_t v35 = (char *)operator new(8 * v43);
        long long v36 = &v35[8 * v44];
        uint64_t v37 = &v35[v45];
        int64_t v46 = v5 - v7;
        BOOL v38 = v5 == v7;
        uint64_t v5 = v36;
        if (!v38)
        {
          uint64_t v5 = &v36[v46 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v47 = v46 - 8;
          if ((unint64_t)(v46 - 8) >= 0x38)
          {
            long long v81 = &v35[8 * v44];
            uint64_t v48 = v81;
            if ((unint64_t)(v81 - v7) >= 0x20)
            {
              uint64_t v82 = (v47 >> 3) + 1;
              uint64_t v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v48 = &v36[v83];
              v7 += v83;
              uint64_t v84 = (long long *)(v42 + 3);
              int v85 = v81 + 16;
              uint64_t v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v87 = *v84;
                *(v85 - 1) = *(v84 - 1);
                _OWORD *v85 = v87;
                v84 += 2;
                v85 += 2;
                v86 -= 4;
              }
              while (v86);
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_76;
              }
            }
          }
          else
          {
            uint64_t v48 = &v35[8 * v44];
          }
          do
          {
            uint64_t v88 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v48 = v88;
            v48 += 8;
          }
          while (v48 != v5);
        }
LABEL_76:
        *(void *)a1 = v35;
        *(void *)(a1 + 8) = v36;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v37;
        if (v9)
        {
          operator delete(v9);
          uint64_t v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_87;
  }
  uint64_t v25 = (char *)operator new(8 * v24);
  uint64_t v26 = operator new(0xFC0uLL);
  unint64_t v27 = &v25[8 * v21];
  unsigned int v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    long long v30 = v26;
    if (v20 < 1)
    {
      if (v18 == v19) {
        unint64_t v49 = 1;
      }
      else {
        unint64_t v49 = v20 >> 2;
      }
      if (v49 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v27 = (char *)operator new(8 * v49);
      unsigned int v28 = &v27[8 * v49];
      operator delete(v25);
      uint64_t v50 = *(void *)(a1 + 8);
      uint64_t v18 = *(void *)(a1 + 16);
      uint64_t v25 = v27;
      *(void *)unint64_t v27 = v30;
      unint64_t v29 = v27 + 8;
      if (v18 == v50) {
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v31 = v21 + 2;
      if (v21 >= -1) {
        unint64_t v31 = v21 + 1;
      }
      v27 -= 8 * (v31 >> 1);
      *(void *)unint64_t v27 = v26;
      unint64_t v29 = v27 + 8;
      if (v18 == v19) {
        goto LABEL_45;
      }
    }
    goto LABEL_51;
  }
  *(void *)unint64_t v27 = v26;
  unint64_t v29 = v27 + 8;
  if (v18 != v19)
  {
    do
    {
LABEL_51:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v25) {
            unint64_t v57 = 1;
          }
          else {
            unint64_t v57 = (v28 - v25) >> 2;
          }
          if (v57 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          long long v58 = (char *)operator new(8 * v57);
          uint64_t v59 = v58;
          unint64_t v60 = (v57 + 3) >> 2;
          unint64_t v27 = &v58[8 * v60];
          int64_t v61 = v29 - v25;
          BOOL v38 = v29 == v25;
          unint64_t v29 = v27;
          if (!v38)
          {
            unint64_t v29 = &v27[v61 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v62 = v61 - 8;
            long long v63 = &v58[8 * v60];
            uint64_t v64 = v25;
            if (v62 < 0x38) {
              goto LABEL_91;
            }
            uint64_t v65 = 8 * v60;
            long long v63 = &v58[8 * v60];
            uint64_t v64 = v25;
            if ((unint64_t)(v63 - v25) < 0x20) {
              goto LABEL_91;
            }
            uint64_t v66 = (v62 >> 3) + 1;
            uint64_t v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
            long long v63 = &v27[v67];
            uint64_t v64 = &v25[v67];
            uint64_t v68 = (long long *)(v25 + 16);
            unint64_t v69 = &v58[v65 + 16];
            uint64_t v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v71 = *v68;
              *((_OWORD *)v69 - 1) = *(v68 - 1);
              *(_OWORD *)unint64_t v69 = v71;
              v68 += 2;
              v69 += 32;
              v70 -= 4;
            }
            while (v70);
            if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                uint64_t v72 = *(void *)v64;
                v64 += 8;
                *(void *)long long v63 = v72;
                v63 += 8;
              }
              while (v63 != v29);
            }
          }
          unsigned int v28 = &v58[8 * v57];
          operator delete(v25);
          uint64_t v25 = v59;
        }
        else
        {
          uint64_t v53 = (v28 - v29) >> 3;
          if (v53 >= -1) {
            uint64_t v54 = v53 + 1;
          }
          else {
            uint64_t v54 = v53 + 2;
          }
          uint64_t v55 = v54 >> 1;
          unint64_t v27 = &v25[8 * (v54 >> 1)];
          uint64_t v56 = v25;
          if (v29 != v25)
          {
            memmove(v27, v25, v29 - v25);
            uint64_t v56 = v29;
          }
          unint64_t v29 = (char *)v56 + 8 * v55;
        }
      }
      uint64_t v52 = *(void *)(v18 - 8);
      v18 -= 8;
      *((void *)v27 - 1) = v52;
      v27 -= 8;
    }
    while (v18 != *(void *)(a1 + 8));
  }
LABEL_45:
  uint64_t v51 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v27;
  *(void *)(a1 + 16) = v29;
  *(void *)(a1 + 24) = v28;
  if (v51)
  {
    operator delete(v51);
  }
}

void sub_248B1EA64(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(char **a1, void *a2)
{
  unint64_t v4 = a1[2];
  if (v4 != a1[3]) {
    goto LABEL_22;
  }
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (v6 > *a1)
  {
    uint64_t v7 = (v6 - *a1) >> 3;
    if (v7 >= -1) {
      uint64_t v8 = v7 + 1;
    }
    else {
      uint64_t v8 = v7 + 2;
    }
    uint64_t v9 = v8 >> 1;
    uint64_t v10 = -v9;
    uint64_t v11 = &v6[-8 * v9];
    int64_t v12 = v4 - v6;
    if (v4 != v6)
    {
      memmove(&v6[-8 * v9], a1[1], v4 - v6);
      unint64_t v4 = a1[1];
    }
    uint64_t v13 = &v4[8 * v10];
    unint64_t v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_22;
  }
  unint64_t v14 = (v4 - v5) >> 2;
  if (v4 == v5) {
    unint64_t v14 = 1;
  }
  if (v14 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  unint64_t v15 = v14 >> 2;
  uint64_t v16 = 8 * v14;
  uint64_t v17 = (char *)operator new(8 * v14);
  uint64_t v18 = &v17[8 * v15];
  int64_t v20 = v4 - v6;
  BOOL v19 = v4 == v6;
  unint64_t v4 = v18;
  if (!v19)
  {
    unint64_t v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      uint64_t v22 = &v17[8 * v15];
      do
      {
LABEL_19:
        uint64_t v31 = *(void *)v6;
        v6 += 8;
        *(void *)uint64_t v22 = v31;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_20;
    }
    uint64_t v23 = &v17[8 * v15];
    uint64_t v22 = v23;
    if ((unint64_t)(v23 - v6) < 0x20) {
      goto LABEL_19;
    }
    uint64_t v24 = (v21 >> 3) + 1;
    uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v22 = &v18[v25];
    uint64_t v26 = &v6[v25];
    unint64_t v27 = (long long *)(v6 + 16);
    unsigned int v28 = v23 + 16;
    uint64_t v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v30 = *v27;
      *(v28 - 1) = *(v27 - 1);
      _OWORD *v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    uint64_t v6 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_19;
    }
  }
LABEL_20:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v5)
  {
    operator delete(v5);
    unint64_t v4 = a1[2];
  }
LABEL_22:
  *(void *)unint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front(void **a1, void *a2)
{
  unint64_t v4 = (char *)a1[1];
  if (v4 == *a1)
  {
    uint64_t v7 = a1[2];
    uint64_t v6 = a1[3];
    if (v7 >= v6)
    {
      uint64_t v13 = v6 - v4;
      BOOL v12 = v13 == 0;
      unint64_t v14 = v13 >> 2;
      if (v12) {
        unint64_t v14 = 1;
      }
      if (v14 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v15 = (v14 + 3) >> 2;
      uint64_t v16 = 8 * v14;
      uint64_t v17 = (char *)operator new(8 * v14);
      uint64_t v5 = &v17[8 * v15];
      uint64_t v18 = v5;
      uint64_t v19 = v7 - v4;
      if (v7 != v4)
      {
        uint64_t v18 = &v5[v19 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v20 = v19 - 8;
        unint64_t v21 = &v17[8 * v15];
        uint64_t v22 = v4;
        if (v20 < 0x38) {
          goto LABEL_27;
        }
        uint64_t v23 = &v17[8 * v15];
        unint64_t v21 = v23;
        uint64_t v22 = v4;
        if ((unint64_t)(v23 - v4) < 0x20) {
          goto LABEL_27;
        }
        uint64_t v24 = (v20 >> 3) + 1;
        uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v21 = &v5[v25];
        uint64_t v22 = &v4[v25];
        uint64_t v26 = (long long *)(v4 + 16);
        unint64_t v27 = v23 + 16;
        uint64_t v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v29 = *v26;
          *(v27 - 1) = *(v26 - 1);
          _OWORD *v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_27:
          do
          {
            uint64_t v30 = *(void *)v22;
            v22 += 8;
            *(void *)unint64_t v21 = v30;
            v21 += 8;
          }
          while (v21 != v18);
        }
      }
      *a1 = v17;
      a1[1] = v5;
      a1[2] = v18;
      a1[3] = &v17[v16];
      if (v4)
      {
        operator delete(v4);
        uint64_t v5 = (char *)a1[1];
      }
    }
    else
    {
      uint64_t v8 = (v6 - v7) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v11 = &v7[8 * (v9 >> 1)];
      uint64_t v5 = &v11[-(v7 - v4)];
      if (v7 != v4)
      {
        memmove(&v11[-(v7 - v4)], v4, v7 - v4);
        unint64_t v4 = (char *)a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = (char *)a1[1];
  }
  *((void *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

void std::deque<std::__state<char>>::__add_front_capacity(uint64_t a1)
{
  BOOL v3 = *(uint64_t **)(a1 + 8);
  unint64_t v2 = *(uint64_t **)(a1 + 16);
  unint64_t v4 = v2 - v3;
  if (v2 == v3) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 42 * v4 - 1;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if ((unint64_t)(v5 - (*(void *)(a1 + 40) + v6)) >= 0x2A)
  {
    *(void *)(a1 + 32) = v6 + 42;
    unint64_t v47 = (void *)*(v2 - 1);
    *(void *)(a1 + 16) = v2 - 1;
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v47);
    return;
  }
  uint64_t v7 = *(uint64_t **)(a1 + 24);
  uint64_t v8 = *(uint64_t **)a1;
  uint64_t v9 = (uint64_t)v7 - *(void *)a1;
  if (v4 < v9 >> 3)
  {
    if (v3 == v8)
    {
      unint64_t v47 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((char **)a1, &v47);
      uint64_t v43 = *(void *)(a1 + 16);
      unint64_t v47 = *(void **)(v43 - 8);
      *(void *)(a1 + 16) = v43 - 8;
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v47);
      if (*(void *)(a1 + 16) - *(void *)(a1 + 8) == 8) {
        goto LABEL_9;
      }
    }
    else
    {
      unint64_t v47 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v47);
      if (*(void *)(a1 + 16) - *(void *)(a1 + 8) == 8)
      {
LABEL_9:
        uint64_t v10 = 21;
LABEL_45:
        *(void *)(a1 + 32) = v10;
        return;
      }
    }
    uint64_t v10 = *(void *)(a1 + 32) + 42;
    goto LABEL_45;
  }
  if (v7 == v8) {
    unint64_t v11 = 1;
  }
  else {
    unint64_t v11 = v9 >> 2;
  }
  if (v11 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  BOOL v12 = (char *)operator new(8 * v11);
  uint64_t v13 = operator new(0xFC0uLL);
  unint64_t v14 = v13;
  if (v11)
  {
    unint64_t v15 = &v12[8 * v11];
    *(void *)BOOL v12 = v13;
    uint64_t v16 = v12 + 8;
    if (v3 != v2)
    {
LABEL_16:
      uint64_t v17 = v12;
      while (1)
      {
        if (v16 == v15)
        {
          if (v17 <= v12)
          {
            if (v16 == v12) {
              unint64_t v26 = 1;
            }
            else {
              unint64_t v26 = (v16 - v12) >> 2;
            }
            if (v26 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            unint64_t v27 = (char *)operator new(8 * v26);
            uint64_t v28 = v27;
            unint64_t v29 = v26 >> 2;
            uint64_t v18 = &v27[8 * (v26 >> 2)];
            int64_t v31 = v16 - v17;
            BOOL v30 = v16 == v17;
            uint64_t v16 = v18;
            if (!v30)
            {
              uint64_t v16 = &v18[v31 & 0xFFFFFFFFFFFFFFF8];
              unint64_t v32 = v31 - 8;
              if (v32 < 0x38 || (uint64_t v33 = 8 * v29, (unint64_t)(&v27[8 * v29] - v17) < 0x20))
              {
                uint64_t v34 = &v27[8 * (v26 >> 2)];
                unint64_t v35 = v17;
                goto LABEL_35;
              }
              uint64_t v37 = (v32 >> 3) + 1;
              uint64_t v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v34 = &v18[v38];
              unint64_t v35 = &v17[v38];
              int64_t v39 = (long long *)(v17 + 16);
              unint64_t v40 = &v27[v33 + 16];
              uint64_t v41 = v37 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v42 = *v39;
                *((_OWORD *)v40 - 1) = *(v39 - 1);
                *(_OWORD *)unint64_t v40 = v42;
                v39 += 2;
                v40 += 32;
                v41 -= 4;
              }
              while (v41);
              if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_35:
                  uint64_t v36 = *(void *)v35;
                  v35 += 8;
                  *(void *)uint64_t v34 = v36;
                  v34 += 8;
                }
                while (v34 != v16);
              }
            }
            unint64_t v15 = &v27[8 * v26];
            if (v12) {
              operator delete(v12);
            }
            BOOL v12 = v28;
            goto LABEL_18;
          }
          uint64_t v20 = (v17 - v12) >> 3;
          if (v20 >= -1) {
            uint64_t v21 = v20 + 1;
          }
          else {
            uint64_t v21 = v20 + 2;
          }
          uint64_t v22 = v21 >> 1;
          uint64_t v23 = &v17[-8 * (v21 >> 1)];
          uint64_t v24 = v16;
          if (v16 != v17)
          {
            memmove(v23, v17, v16 - v17);
            uint64_t v24 = v17;
          }
          uint64_t v25 = -v22;
          unint64_t v15 = v16;
          uint64_t v16 = &v23[v16 - v17];
          uint64_t v18 = &v24[8 * v25];
        }
        else
        {
          uint64_t v18 = v17;
        }
LABEL_18:
        uint64_t v19 = *v3++;
        *(void *)uint64_t v16 = v19;
        v16 += 8;
        uint64_t v17 = v18;
        if (v3 == *(uint64_t **)(a1 + 16)) {
          goto LABEL_48;
        }
      }
    }
  }
  else
  {
    unint64_t v44 = (char *)operator new(8uLL);
    unint64_t v15 = v44 + 8;
    operator delete(v12);
    BOOL v3 = *(uint64_t **)(a1 + 8);
    uint64_t v45 = *(uint64_t **)(a1 + 16);
    BOOL v12 = v44;
    *(void *)unint64_t v44 = v14;
    uint64_t v16 = v44 + 8;
    if (v3 != v45) {
      goto LABEL_16;
    }
  }
  uint64_t v18 = v12;
LABEL_48:
  int64_t v46 = *(void **)a1;
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v18;
  *(void *)(a1 + 16) = v16;
  *(void *)(a1 + 24) = v15;
  if (v16 - v18 == 8)
  {
    *(void *)(a1 + 32) = 21;
    if (!v46) {
      return;
    }
  }
  else
  {
    *(void *)(a1 + 32) += 42;
    if (!v46) {
      return;
    }
  }
  operator delete(v46);
}

void sub_248B1F134(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char **a1, char *a2, char *a3, size_t __sz)
{
  uint64_t v6 = a2;
  uint64_t v8 = (uint64_t)a1[2];
  uint64_t result = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= __sz)
  {
    uint64_t v18 = a1[1];
    uint64_t v17 = a1 + 1;
    unint64_t v14 = v18;
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v18 - result) >> 3);
    if (v19 >= __sz)
    {
      uint64_t v24 = result;
      if (a2 != a3)
      {
        uint64_t v25 = result;
        do
        {
          *(_OWORD *)uint64_t v25 = *(_OWORD *)v6;
          v25[16] = v6[16];
          v24 += 24;
          v6 += 24;
          v25 += 24;
        }
        while (v6 != a3);
      }
      int64_t v16 = v24 - result;
      unint64_t v14 = result;
    }
    else
    {
      uint64_t v20 = &a2[24 * v19];
      if (v14 != result)
      {
        do
        {
          *(_OWORD *)uint64_t result = *(_OWORD *)v6;
          result[16] = v6[16];
          v6 += 24;
          result += 24;
        }
        while (v6 != v20);
      }
      uint64_t v21 = v14;
      if (v20 != a3)
      {
        uint64_t v22 = v14;
        do
        {
          long long v23 = *(_OWORD *)v20;
          *((void *)v22 + 2) = *((void *)v20 + 2);
          *(_OWORD *)uint64_t v22 = v23;
          v22 += 24;
          v20 += 24;
          v21 += 24;
        }
        while (v20 != a3);
      }
      int64_t v16 = v21 - v14;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_26;
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= __sz) {
      uint64_t v11 = __sz;
    }
    unint64_t v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL) {
LABEL_26:
    }
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    uint64_t v13 = 24 * v12;
    uint64_t result = (char *)operator new(24 * v12);
    unint64_t v14 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[v13];
    unint64_t v15 = result;
    if (v6 != a3)
    {
      uint64_t result = (char *)memcpy(result, v6, 24 * ((a3 - v6 - 24) / 0x18uLL) + 24);
      unint64_t v15 = &v14[24 * ((a3 - v6 - 24) / 0x18uLL) + 24];
    }
    int64_t v16 = v15 - v14;
    uint64_t v17 = a1 + 1;
  }
  void *v17 = &v14[v16];
  return result;
}

double *std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(uint64_t a1, const double *a2, const double *a3, size_t __sz)
{
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t result = *(double **)a1;
  if (__sz > (v8 - (uint64_t)result) >> 4)
  {
    if (result)
    {
      *(void *)(a1 + 8) = result;
      operator delete(result);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz >> 60) {
      goto LABEL_62;
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v37 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    if (!v37) {
      unint64_t v11 = v10;
    }
    if (v11 >> 60) {
LABEL_62:
    }
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    uint64_t v12 = 2 * v11;
    uint64_t result = (double *)operator new(16 * v11);
    uint64_t v13 = result;
    *(void *)a1 = result;
    *(void *)(a1 + 8) = result;
    *(void *)(a1 + 16) = &result[v12];
    unint64_t v14 = result;
    if (a2 != a3)
    {
      uint64_t result = (double *)memcpy(result, a2, ((char *)a3 - (char *)a2) & 0xFFFFFFFFFFFFFFF0);
      unint64_t v14 = (double *)((char *)v13 + (((char *)a3 - (char *)a2) & 0xFFFFFFFFFFFFFFF0));
    }
    int64_t v15 = (char *)v14 - (char *)v13;
    int64_t v16 = (void *)(a1 + 8);
    goto LABEL_29;
  }
  uint64_t v17 = *(double **)(a1 + 8);
  int64_t v16 = (void *)(a1 + 8);
  uint64_t v13 = v17;
  int64_t v18 = (char *)v17 - (char *)result;
  unint64_t v19 = ((char *)v17 - (char *)result) >> 4;
  if (v19 >= __sz)
  {
    if (a2 == a3)
    {
      BOOL v30 = (char *)result;
    }
    else
    {
      unint64_t v29 = (char *)a3 - (char *)a2 - 16;
      if (v29 < 0xF0
        || ((unint64_t v47 = v29 & 0xFFFFFFFFFFFFFFF0 | 8,
             uint64_t v48 = (char *)result + v47,
             unint64_t v49 = (unint64_t)a2 + v47,
             unint64_t v50 = (v29 & 0xFFFFFFFFFFFFFFF0) + 16,
             result + 1 < (const double *)((char *)a2 + v50))
          ? (BOOL v51 = a2 + 1 >= (double *)((char *)result + v50))
          : (BOOL v51 = 1),
            v51 ? (char v52 = 0) : (char v52 = 1),
            v48 > (char *)a2 ? (BOOL v53 = (unint64_t)result >= v49) : (BOOL v53 = 1),
            !v53 || (v52 & 1) != 0))
      {
        BOOL v30 = (char *)result;
        int64_t v31 = a2;
      }
      else
      {
        uint64_t v54 = (v29 >> 4) + 1;
        uint64_t v55 = 2 * (v54 & 0x1FFFFFFFFFFFFFFCLL);
        BOOL v30 = (char *)&result[v55];
        int64_t v31 = &a2[v55];
        uint64_t v56 = a2 + 4;
        unint64_t v57 = result + 4;
        uint64_t v58 = v54 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          uint64_t v59 = v56 - 4;
          float64x2x2_t v62 = vld2q_f64(v59);
          float64x2x2_t v64 = vld2q_f64(v56);
          unint64_t v60 = v57 - 4;
          vst2q_f64(v60, v62);
          vst2q_f64(v57, v64);
          v56 += 8;
          v57 += 8;
          v58 -= 4;
        }
        while (v58);
        if (v54 == (v54 & 0x1FFFFFFFFFFFFFFCLL)) {
          goto LABEL_28;
        }
      }
      do
      {
        uint64_t v32 = *(void *)v31;
        uint64_t v33 = *((void *)v31 + 1);
        v31 += 2;
        *(void *)BOOL v30 = v32;
        *((void *)v30 + 1) = v33;
        v30 += 16;
      }
      while (v31 != a3);
    }
LABEL_28:
    int64_t v15 = v30 - (char *)result;
    uint64_t v13 = result;
    goto LABEL_29;
  }
  uint64_t v20 = &a2[2 * v19];
  if (v13 != result)
  {
    unint64_t v21 = v18 - 16;
    if ((unint64_t)(v18 - 16) < 0xF0
      || ((unint64_t v34 = v18 & 0xFFFFFFFFFFFFFFF0,
           unint64_t v35 = (char *)result + v34 - 8,
           unint64_t v36 = (unint64_t)a2 + v34 - 8,
           result + 1 < (const double *)((char *)a2 + v34))
        ? (BOOL v37 = a2 + 1 >= (double *)((char *)result + v34))
        : (BOOL v37 = 1),
          v37 ? (char v38 = 0) : (char v38 = 1),
          v35 > (char *)a2 ? (BOOL v39 = (unint64_t)result >= v36) : (BOOL v39 = 1),
          !v39 || (v38 & 1) != 0))
    {
      uint64_t v22 = result;
      long long v23 = a2;
    }
    else
    {
      uint64_t v40 = (v21 >> 4) + 1;
      uint64_t v41 = 2 * (v40 & 0x1FFFFFFFFFFFFFFCLL);
      uint64_t v22 = &result[v41];
      long long v23 = &a2[v41];
      long long v42 = a2 + 4;
      uint64_t v43 = result + 4;
      uint64_t v44 = v40 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        uint64_t v45 = v42 - 4;
        float64x2x2_t v61 = vld2q_f64(v45);
        float64x2x2_t v63 = vld2q_f64(v42);
        int64_t v46 = v43 - 4;
        vst2q_f64(v46, v61);
        vst2q_f64(v43, v63);
        v42 += 8;
        v43 += 8;
        v44 -= 4;
      }
      while (v44);
      if (v40 == (v40 & 0x1FFFFFFFFFFFFFFCLL)) {
        goto LABEL_18;
      }
    }
    do
    {
      uint64_t v24 = *(void *)v23;
      uint64_t v25 = *((void *)v23 + 1);
      v23 += 2;
      *(void *)uint64_t v22 = v24;
      *((void *)v22 + 1) = v25;
      v22 += 2;
    }
    while (v23 != v20);
  }
LABEL_18:
  unint64_t v26 = v13;
  if (v20 != a3)
  {
    unint64_t v27 = v13;
    do
    {
      long long v28 = *(_OWORD *)v20;
      v20 += 2;
      *(_OWORD *)unint64_t v27 = v28;
      v27 += 2;
      v26 += 2;
    }
    while (v20 != a3);
  }
  int64_t v15 = (char *)v26 - (char *)v13;
LABEL_29:
  *int64_t v16 = (char *)v13 + v15;
  return result;
}

void std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(std::vector<std::ssub_match> *this, std::vector<std::ssub_match>::size_type __n)
{
  std::vector<std::ssub_match>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= __n)
  {
    if (__n)
    {
      unint64_t v11 = &end[__n];
      std::vector<std::ssub_match>::size_type v12 = 24 * __n;
      do
      {
        end->first.__i_ = 0;
        end->second.__i_ = 0;
        end->matched = 0;
        ++end;
        v12 -= 24;
      }
      while (v12);
      std::vector<std::ssub_match>::pointer end = v11;
    }
    this->__end_ = end;
  }
  else
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
    unint64_t v7 = v6 + __n;
    if (v6 + __n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v10 = (char *)operator new(24 * v9);
    }
    else
    {
      uint64_t v10 = 0;
    }
    uint64_t v13 = (std::sub_match<std::__wrap_iter<const char *>> *)&v10[24 * v6];
    std::vector<std::ssub_match>::size_type v14 = 24 * __n;
    int64_t v15 = &v13[__n];
    int64_t v16 = v13;
    do
    {
      v16->first.__i_ = 0;
      v16->second.__i_ = 0;
      v16->matched = 0;
      ++v16;
      v14 -= 24;
    }
    while (v14);
    std::vector<std::ssub_match>::pointer begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v18 = end[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
        *(void *)&v13[-1].matched = *(void *)&end[-1].matched;
        v13[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v18;
        --v13;
        --end;
      }
      while (end != begin);
      std::vector<std::ssub_match>::pointer end = this->__begin_;
    }
    this->__begin_ = v13;
    this->__end_ = v15;
    this->__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)&v10[24 * v9];
    if (end)
    {
      operator delete(end);
    }
  }
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v6 = (const std::locale *)MEMORY[0x24C58B560]();
  *(void *)(a1 + 8) = std::locale::use_facet(v6, MEMORY[0x263F8C108]);
  *(void *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x263F8C130]);
  *(_DWORD *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  if ((v7 & 0x80u) == 0) {
    unint64_t v8 = (std::basic_regex<char> *)a2;
  }
  else {
    unint64_t v8 = *(std::basic_regex<char> **)a2;
  }
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  if ((char *)v8 + v7 != std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(a1, v8, (std::string::value_type *)v8 + v7))std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>(); {
  return a1;
  }
}

void sub_248B1F894(_Unwind_Exception *a1)
{
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_248B1F8B0(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *a2, std::string::value_type *a3)
{
  unint64_t v6 = operator new(8uLL);
  void *v6 = &unk_26FCC7B10;
  uint64_t v7 = operator new(0x10uLL);
  v7[1] = v6;
  unint64_t v8 = operator new(0x20uLL);
  void *v8 = &unk_26FCC7B68;
  v8[1] = 0;
  void v8[2] = 0;
  v8[3] = v7;
  unint64_t v9 = *(std::__shared_weak_count **)(a1 + 48);
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    *(void *)(a1 + 56) = *(void *)(a1 + 40);
    unsigned int v10 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if (v10 <= 0x3F)
    {
LABEL_4:
      if (v10)
      {
        if (v10 != 16)
        {
          if (v10 != 32) {
LABEL_27:
          }
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
          goto LABEL_15;
        }
        return std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, a2, a3);
      }
      else
      {
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (char *)a2, a3);
      }
    }
  }
  else
  {
    *(void *)(a1 + 56) = *(void *)(a1 + 40);
    unsigned int v10 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if (v10 <= 0x3F) {
      goto LABEL_4;
    }
  }
  switch(v10)
  {
    case 0x40u:
LABEL_15:
      return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, a2, (std::basic_regex<char> *)a3);
    case 0x80u:
      return std::basic_regex<char,std::regex_traits<char>>::__parse_grep<std::__wrap_iter<char const*>>(a1, a2, a3);
    case 0x100u:
      return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<std::__wrap_iter<char const*>>(a1, a2, (std::basic_regex<char> *)a3);
    default:
      goto LABEL_27;
  }
}

void sub_248B1FB04(_Unwind_Exception *a1)
{
  std::__empty_state<char>::~__empty_state(v2);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::vector<std::ssub_match>::pointer end = a1->__end_;
  uint64_t v7 = a2;
  while (1)
  {
    unint64_t v8 = (std::basic_regex<char> *)v7;
    uint64_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>((uint64_t)a1, v7, a3);
    if (v8 == (std::basic_regex<char> *)v7) {
      break;
    }
LABEL_2:
    if (v7 == (char *)v8) {
      goto LABEL_6;
    }
  }
  unint64_t v9 = a1->__end_;
  unsigned int marked_count = a1->__marked_count_;
  unint64_t v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(a1, v8, (std::basic_regex<char> *)a3);
  if (v8 != v11)
  {
    uint64_t v7 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v11, (std::basic_regex<char> *)a3, v9, marked_count + 1, a1->__marked_count_ + 1);
    goto LABEL_2;
  }
LABEL_6:
  if (v8 == (std::basic_regex<char> *)a2)
  {
    std::vector<std::ssub_match>::size_type v12 = (std::__node<char> *)operator new(0x10uLL);
    uint64_t v13 = a1->__end_;
    first = v13->__first_;
    v12[1].__vftable = (std::__node<char>_vtbl *)first;
    v13->__first_ = v12;
    int64_t v15 = (std::__owns_one_state<char> *)a1->__end_->__first_;
    goto LABEL_8;
  }
LABEL_9:
  if (v8 == (std::basic_regex<char> *)a3) {
    return a3;
  }
  if (LOBYTE(v8->__traits_.__loc_.__locale_) == 124)
  {
    int64_t v16 = a1->__end_;
    uint64_t v17 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v18 = (char *)&v8->__traits_.__loc_.__locale_ + 1;
    while (1)
    {
      unint64_t v8 = (std::basic_regex<char> *)v18;
      std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>((uint64_t)a1, v18, a3);
      if (v8 == (std::basic_regex<char> *)v18)
      {
        unint64_t v19 = a1->__end_;
        unsigned int v20 = a1->__marked_count_;
        unint64_t v21 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(a1, v8, (std::basic_regex<char> *)a3);
        if (v8 == v21)
        {
LABEL_16:
          if (v8 == v17)
          {
            uint64_t v22 = (std::__node<char> *)operator new(0x10uLL);
            long long v23 = a1->__end_;
            uint64_t v24 = v23->__first_;
            v22[1].__vftable = (std::__node<char>_vtbl *)v24;
            v23->__first_ = v22;
            a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
          }
          uint64_t v25 = (std::__node<char> *)operator new(0x18uLL);
          unint64_t v26 = v16->__first_;
          v25[1].__vftable = (std::__node<char>_vtbl *)end->__first_;
          v25[2].__vftable = (std::__node<char>_vtbl *)v26;
          v25->__vftable = (std::__node<char>_vtbl *)&unk_26FCC8128;
          end->__first_ = v25;
          v16->__first_ = 0;
          unint64_t v27 = (std::__node<char> *)operator new(0x10uLL);
          long long v28 = a1->__end_->__first_;
          v27[1].__vftable = (std::__node<char>_vtbl *)v28;
          v16->__first_ = v27;
          a1->__end_->__first_ = 0;
          unint64_t v29 = (std::__node<char> *)operator new(0x10uLL);
          BOOL v30 = v16->__first_;
          v29->__vftable = (std::__node<char>_vtbl *)&unk_26FCC8170;
          v29[1].__vftable = (std::__node<char>_vtbl *)v30;
          a1->__end_->__first_ = v29;
          int64_t v15 = (std::__owns_one_state<char> *)v16->__first_;
LABEL_8:
          a1->__end_ = v15;
          goto LABEL_9;
        }
        std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v18 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v21, (std::basic_regex<char> *)a3, v19, v20 + 1, a1->__marked_count_ + 1);
      }
      if (v18 == (char *)v8) {
        goto LABEL_16;
      }
    }
  }
  return (char *)v8;
}

std::string::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *a2, std::string::value_type *a3)
{
  BOOL v3 = a2;
  if (a2 == (std::basic_regex<char> *)a3) {
    return (std::string::value_type *)a2;
  }
  if (LOBYTE(a2->__traits_.__loc_.__locale_) == 94)
  {
    unint64_t v6 = operator new(0x18uLL);
    BOOL v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = *(void *)(v8 + 8);
    void *v6 = &unk_26FCC7C60;
    v6[1] = v9;
    *((unsigned char *)v6 + 16) = v7;
    *(void *)(v8 + 8) = v6;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    BOOL v3 = (std::basic_regex<char> *)((char *)v3 + 1);
  }
  if (v3 != (std::basic_regex<char> *)a3)
  {
    while (v3 != (std::basic_regex<char> *)a3)
    {
      unsigned int v10 = v3;
      unint64_t v11 = *(std::__owns_one_state<char> **)(a1 + 56);
      int v12 = *(_DWORD *)(a1 + 28);
      uint64_t v13 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(a1, (uint64_t)v10, a3);
      if (v10 != v13)
      {
        BOOL v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v13, (std::basic_regex<char> *)a3, v11, (v12 + 1), (*(_DWORD *)(a1 + 28) + 1));
        if (v10 != v3) {
          continue;
        }
      }
      if ((char *)&v10->__traits_.__loc_.__locale_ + 1 != a3 || LOBYTE(v10->__traits_.__loc_.__locale_) != 36) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      }
      std::vector<std::ssub_match>::size_type v14 = operator new(0x18uLL);
      BOOL v15 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      uint64_t v16 = *(void *)(a1 + 56);
      uint64_t v17 = *(void *)(v16 + 8);
      void *v14 = &unk_26FCC7CA8;
      v14[1] = v17;
      *((unsigned char *)v14 + 16) = v15;
      *(void *)(v16 + 8) = v14;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
      return a3;
    }
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v7 == a2) {
    goto LABEL_12;
  }
  do
  {
    uint64_t v8 = v7;
    BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, v7, a3);
  }
  while (v8 != v7);
  if (v8 == a2) {
LABEL_12:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  if (v8 == a3) {
    return a3;
  }
  while (LOBYTE(v8->__traits_.__loc_.__locale_) == 124)
  {
    uint64_t v9 = *(void *)(a1 + 56);
    unsigned int v10 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    unint64_t v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1), a3);
    if ((std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1) == v11) {
      goto LABEL_12;
    }
    do
    {
      uint64_t v8 = v11;
      unint64_t v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, v11, a3);
    }
    while (v8 != v11);
    if (v8 == v10) {
      goto LABEL_12;
    }
    int v12 = operator new(0x18uLL);
    uint64_t v13 = *(void *)(v9 + 8);
    v12[1] = *(void *)(v6 + 8);
    void v12[2] = v13;
    void *v12 = &unk_26FCC8128;
    *(void *)(v6 + 8) = v12;
    *(void *)(v9 + 8) = 0;
    std::vector<std::ssub_match>::size_type v14 = operator new(0x10uLL);
    uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8);
    v14[1] = v15;
    *(void *)(v9 + 8) = v14;
    *(void *)(*(void *)(a1 + 56) + 8) = 0;
    uint64_t v16 = operator new(0x10uLL);
    uint64_t v17 = *(void *)(v9 + 8);
    *uint64_t v16 = &unk_26FCC8170;
    v16[1] = v17;
    *(void *)(*(void *)(a1 + 56) + 8) = v16;
    *(void *)(a1 + 56) = *(void *)(v9 + 8);
    if (v8 == a3) {
      return a3;
    }
  }
  return v8;
}

std::string::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *__s, std::string::value_type *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = (std::string::value_type *)memchr(__s, 10, a3 - (std::string::value_type *)__s);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = a3;
  }
  if (v8 == (std::string::value_type *)__s)
  {
    uint64_t v9 = operator new(0x10uLL);
    uint64_t v10 = *(void *)(v6 + 8);
    v9[1] = v10;
    *(void *)(v6 + 8) = v9;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    if (v8 == a3) {
      unint64_t v11 = (std::basic_regex<char> *)v8;
    }
    else {
      unint64_t v11 = (std::basic_regex<char> *)(v8 + 1);
    }
    if (v11 == (std::basic_regex<char> *)a3) {
      return a3;
    }
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, __s, v8);
    if (v8 == a3) {
      unint64_t v11 = (std::basic_regex<char> *)v8;
    }
    else {
      unint64_t v11 = (std::basic_regex<char> *)(v8 + 1);
    }
    if (v11 == (std::basic_regex<char> *)a3) {
      return a3;
    }
  }
  uint64_t v12 = *(void *)(a1 + 56);
  do
  {
    unint64_t v21 = (std::string::value_type *)memchr(v11, 10, a3 - (std::string::value_type *)v11);
    if (v21) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = a3;
    }
    if (v22 == (std::string::value_type *)v11)
    {
      uint64_t v13 = operator new(0x10uLL);
      uint64_t v14 = *(void *)(v12 + 8);
      v13[1] = v14;
      *(void *)(v12 + 8) = v13;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, v11, v22);
    }
    uint64_t v15 = operator new(0x18uLL);
    uint64_t v16 = *(void *)(v12 + 8);
    v15[1] = *(void *)(v6 + 8);
    v15[2] = v16;
    *uint64_t v15 = &unk_26FCC8128;
    *(void *)(v6 + 8) = v15;
    *(void *)(v12 + 8) = 0;
    uint64_t v17 = operator new(0x10uLL);
    uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
    v17[1] = v18;
    *(void *)(v12 + 8) = v17;
    *(void *)(*(void *)(a1 + 56) + 8) = 0;
    unint64_t v19 = operator new(0x10uLL);
    uint64_t v20 = *(void *)(v12 + 8);
    *unint64_t v19 = &unk_26FCC8170;
    v19[1] = v20;
    *(void *)(*(void *)(a1 + 56) + 8) = v19;
    uint64_t v12 = *(void *)(v12 + 8);
    *(void *)(a1 + 56) = v12;
    if (v22 == a3) {
      unint64_t v11 = (std::basic_regex<char> *)v22;
    }
    else {
      unint64_t v11 = (std::basic_regex<char> *)(v22 + 1);
    }
  }
  while (v11 != (std::basic_regex<char> *)a3);
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = a3;
  }
  if (v8 == __s)
  {
    uint64_t v9 = operator new(0x10uLL);
    uint64_t v10 = *(void *)(v6 + 8);
    v9[1] = v10;
    *(void *)(v6 + 8) = v9;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    if (v8 == a3) {
      unint64_t v11 = v8;
    }
    else {
      unint64_t v11 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    }
    if (v11 == a3) {
      return a3;
    }
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, __s, v8);
    if (v8 == a3) {
      unint64_t v11 = v8;
    }
    else {
      unint64_t v11 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    }
    if (v11 == a3) {
      return a3;
    }
  }
  uint64_t v12 = *(void *)(a1 + 56);
  do
  {
    unint64_t v21 = (std::basic_regex<char> *)memchr(v11, 10, (char *)a3 - (char *)v11);
    if (v21) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = a3;
    }
    if (v22 == v11)
    {
      uint64_t v13 = operator new(0x10uLL);
      uint64_t v14 = *(void *)(v12 + 8);
      v13[1] = v14;
      *(void *)(v12 + 8) = v13;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, v11, v22);
    }
    uint64_t v15 = operator new(0x18uLL);
    uint64_t v16 = *(void *)(v12 + 8);
    v15[1] = *(void *)(v6 + 8);
    v15[2] = v16;
    *uint64_t v15 = &unk_26FCC8128;
    *(void *)(v6 + 8) = v15;
    *(void *)(v12 + 8) = 0;
    uint64_t v17 = operator new(0x10uLL);
    uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
    v17[1] = v18;
    *(void *)(v12 + 8) = v17;
    *(void *)(*(void *)(a1 + 56) + 8) = 0;
    unint64_t v19 = operator new(0x10uLL);
    uint64_t v20 = *(void *)(v12 + 8);
    *unint64_t v19 = &unk_26FCC8170;
    v19[1] = v20;
    *(void *)(*(void *)(a1 + 56) + 8) = v19;
    uint64_t v12 = *(void *)(v12 + 8);
    *(void *)(a1 + 56) = v12;
    if (v22 == a3) {
      unint64_t v11 = v22;
    }
    else {
      unint64_t v11 = (std::basic_regex<char> *)((char *)&v22->__traits_.__loc_.__locale_ + 1);
    }
  }
  while (v11 != a3);
  return a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  BOOL v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  int v6 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 != a3)
      {
        int v16 = a2[1];
        if (v16 == 66)
        {
          uint64_t v17 = (char *)operator new(0x30uLL);
          uint64_t v19 = *(void *)(*(void *)(a1 + 56) + 8);
          *(void *)uint64_t v17 = &unk_26FCC7CF0;
          *((void *)v17 + 1) = v19;
          std::locale::locale((std::locale *)v17 + 2, (const std::locale *)a1);
          *(_OWORD *)(v17 + 24) = *(_OWORD *)(a1 + 8);
          v17[40] = 1;
        }
        else
        {
          if (v16 != 98) {
            return v3;
          }
          uint64_t v17 = (char *)operator new(0x30uLL);
          uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
          *(void *)uint64_t v17 = &unk_26FCC7CF0;
          *((void *)v17 + 1) = v18;
          std::locale::locale((std::locale *)v17 + 2, (const std::locale *)a1);
          *(_OWORD *)(v17 + 24) = *(_OWORD *)(a1 + 8);
          v17[40] = 0;
        }
        *(void *)(*(void *)(a1 + 56) + 8) = v17;
        *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
        return v3 + 2;
      }
      return v3;
    }
    if (v6 != 94) {
      return v3;
    }
    unint64_t v11 = operator new(0x18uLL);
    BOOL v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v13 = *(void *)(a1 + 56);
    v11[1] = *(void *)(v13 + 8);
    uint64_t v14 = &unk_26FCC7C60;
LABEL_17:
    *unint64_t v11 = v14;
    *((unsigned char *)v11 + 16) = v12;
    *(void *)(v13 + 8) = v11;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    return ++v3;
  }
  if (v6 == 36)
  {
    unint64_t v11 = operator new(0x18uLL);
    BOOL v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v13 = *(void *)(a1 + 56);
    v11[1] = *(void *)(v13 + 8);
    uint64_t v14 = &unk_26FCC7CA8;
    goto LABEL_17;
  }
  if (v6 != 40 || a2 + 1 == a3 || a2[1] != 63 || a2 + 2 == a3) {
    return v3;
  }
  int v7 = a2[2];
  if (v7 == 33)
  {
    *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v22.__loop_count_ = v20;
    *(_OWORD *)&v22.__start_.__cntrl_ = v20;
    *(_OWORD *)&v22.__traits_.__loc_.__locale_ = v20;
    *(_OWORD *)&v22.__traits_.__col_ = v20;
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v22);
    v22.__flags_ = *(_DWORD *)(a1 + 24);
    uint64_t v9 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v22, v3 + 3, a3);
    unsigned int marked_count = v22.__marked_count_;
    std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v22, 1, *(_DWORD *)(a1 + 28));
    *(_DWORD *)(a1 + 28) += marked_count;
    if (v9 == a3 || *v9 != 41) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    goto LABEL_27;
  }
  if (v7 != 61) {
    return v3;
  }
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v22.__loop_count_ = v8;
  *(_OWORD *)&v22.__start_.__cntrl_ = v8;
  *(_OWORD *)&v22.__traits_.__loc_.__locale_ = v8;
  *(_OWORD *)&v22.__traits_.__col_ = v8;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v22);
  v22.__flags_ = *(_DWORD *)(a1 + 24);
  uint64_t v9 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v22, v3 + 3, a3);
  unsigned int v10 = v22.__marked_count_;
  std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v22, 0, *(_DWORD *)(a1 + 28));
  *(_DWORD *)(a1 + 28) += v10;
  if (v9 == a3 || *v9 != 41) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
  }
LABEL_27:
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v22.__traits_.__loc_);
  return v9 + 1;
}

void sub_248B207F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_248B20808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_248B2081C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_248B20830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  BOOL v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  switch(LOBYTE(a2->__traits_.__loc_.__locale_))
  {
    case '(':
      if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1) == a3) {
        goto LABEL_26;
      }
      if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 2) != a3
        && BYTE1(a2->__traits_.__loc_.__locale_) == 63
        && BYTE2(a2->__traits_.__loc_.__locale_) == 58)
      {
        ++this->__open_count_;
        int v6 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, (char *)&a2->__traits_.__loc_.__locale_ + 3, a3);
        if (v6 != a3 && LOBYTE(v6->__traits_.__loc_.__locale_) == 41)
        {
          --this->__open_count_;
          return (std::basic_regex<char> *)((char *)&v6->__traits_.__loc_.__locale_ + 1);
        }
LABEL_26:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      if ((this->__flags_ & 2) != 0)
      {
        unsigned int marked_count = this->__marked_count_;
      }
      else
      {
        unint64_t v11 = (std::__node<char> *)operator new(0x18uLL);
        unsigned int marked_count = this->__marked_count_ + 1;
        this->__marked_count_ = marked_count;
        std::vector<std::ssub_match>::pointer end = this->__end_;
        first = end->__first_;
        v11->__vftable = (std::__node<char>_vtbl *)&unk_26FCC7FC0;
        v11[1].__vftable = (std::__node<char>_vtbl *)first;
        LODWORD(v11[2].__vftable) = marked_count;
        end->__first_ = v11;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      }
      ++this->__open_count_;
      uint64_t v15 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, (char *)&v3->__traits_.__loc_.__locale_ + 1, a3);
      if (v15 == a3) {
        goto LABEL_26;
      }
      int v16 = v15;
      if (LOBYTE(v15->__traits_.__loc_.__locale_) != 41) {
        goto LABEL_26;
      }
      if ((this->__flags_ & 2) == 0)
      {
        uint64_t v17 = (std::__node<char> *)operator new(0x18uLL);
        uint64_t v18 = this->__end_;
        uint64_t v19 = v18->__first_;
        v17->__vftable = (std::__node<char>_vtbl *)&unk_26FCC8008;
        v17[1].__vftable = (std::__node<char>_vtbl *)v19;
        LODWORD(v17[2].__vftable) = marked_count;
        v18->__first_ = v17;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      }
      --this->__open_count_;
      uint64_t result = (std::basic_regex<char> *)((char *)&v16->__traits_.__loc_.__locale_ + 1);
      break;
    case ')':
    case ',':
    case '-':
    case '/':
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    case ':':
    case ';':
    case '<':
    case '=':
    case '>':
    case '@':
    case 'A':
    case 'B':
    case 'C':
    case 'D':
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'S':
    case 'T':
    case 'U':
    case 'V':
    case 'W':
    case 'X':
    case 'Y':
    case 'Z':
      return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(this, a2, a3);
    case '*':
    case '+':
    case '?':
      goto LABEL_25;
    case '.':
      long long v8 = (std::__node<char> *)operator new(0x10uLL);
      uint64_t v9 = this->__end_;
      unsigned int v10 = v9->__first_;
      v8->__vftable = (std::__node<char>_vtbl *)&unk_26FCC7D80;
      v8[1].__vftable = (std::__node<char>_vtbl *)v10;
      v9->__first_ = v8;
      this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      return (std::basic_regex<char> *)((char *)v3 + 1);
    case '[':
      return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, (std::string::value_type *)a2, (std::string::value_type *)a3);
    case '\\':
      return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<std::__wrap_iter<char const*>>(this, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
    default:
      if (LOBYTE(a2->__traits_.__loc_.__locale_) == 123) {
LABEL_25:
      }
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
      return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(this, a2, a3);
  }
  return result;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  if (this == a3) {
    return this;
  }
  int v6 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low <= 62)
  {
    if (locale_low == 42)
    {
      uint64_t v9 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (v6) {
        BOOL v21 = 1;
      }
      else {
        BOOL v21 = v9 == a3;
      }
      if (!v21 && LOBYTE(v9->__traits_.__loc_.__locale_) == 63)
      {
        unsigned int v10 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_std::vector<std::ssub_match>::pointer begin = __mexp_begin;
        __mexp_std::vector<std::ssub_match>::pointer end = __mexp_end;
        size_t v11 = 0;
        goto LABEL_36;
      }
      __mexp_std::vector<std::ssub_match>::pointer begin = __mexp_begin;
      __mexp_std::vector<std::ssub_match>::pointer end = __mexp_end;
      size_t v25 = 0;
      goto LABEL_45;
    }
    long long v8 = this;
    if (locale_low == 43)
    {
      uint64_t v9 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (!v6 && v9 != a3 && LOBYTE(v9->__traits_.__loc_.__locale_) == 63)
      {
        unsigned int v10 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_std::vector<std::ssub_match>::pointer begin = __mexp_begin;
        __mexp_std::vector<std::ssub_match>::pointer end = __mexp_end;
        size_t v11 = 1;
LABEL_36:
        std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v11, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 0);
        return (std::basic_regex<char> *)v10;
      }
      __mexp_std::vector<std::ssub_match>::pointer begin = __mexp_begin;
      __mexp_std::vector<std::ssub_match>::pointer end = __mexp_end;
      size_t v25 = 1;
      goto LABEL_45;
    }
    return v8;
  }
  if (locale_low == 63)
  {
    std::basic_regex<char> v22 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
    if (v6) {
      BOOL v23 = 1;
    }
    else {
      BOOL v23 = v22 == a3;
    }
    if (v23 || LOBYTE(v22->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 1);
      return v22;
    }
    else
    {
      uint64_t v24 = (char *)&this->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v24;
    }
  }
  else
  {
    long long v8 = this;
    if (locale_low != 123) {
      return v8;
    }
    uint64_t v13 = (char *)&this->__traits_.__loc_.__locale_ + 1;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3) {
      goto LABEL_72;
    }
    int v14 = *v13;
    if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38) {
      goto LABEL_72;
    }
    int v15 = v14 - 48;
    int v16 = (char *)&this->__traits_.__loc_.__locale_ + 2;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3)
    {
LABEL_21:
      int v16 = (char *)a3;
    }
    else
    {
      while (1)
      {
        int v17 = *v16;
        if ((v17 & 0xF8) != 0x30 && (v17 & 0xFE) != 0x38) {
          break;
        }
        if (v15 >= 214748364) {
          goto LABEL_72;
        }
        int v15 = v17 + 10 * v15 - 48;
        if (++v16 == (char *)a3) {
          goto LABEL_21;
        }
      }
    }
    if (v16 == v13) {
      goto LABEL_72;
    }
    if (v16 == (char *)a3) {
      goto LABEL_73;
    }
    int v18 = *v16;
    if (v18 != 44)
    {
      if (v18 == 125)
      {
        uint64_t v19 = (std::basic_regex<char> *)(v16 + 1);
        if (v6 || v19 == a3 || LOBYTE(v19->__traits_.__loc_.__locale_) != 63)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v15, a4, __mexp_begin, __mexp_end, 1);
          return v19;
        }
        else
        {
          long long v20 = (unsigned __int8 *)(v16 + 2);
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v15, a4, __mexp_begin, __mexp_end, 0);
          return (std::basic_regex<char> *)v20;
        }
      }
LABEL_72:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
    }
    unint64_t v26 = (std::basic_regex<char> *)(v16 + 1);
    if (v16 + 1 == (char *)a3) {
      goto LABEL_72;
    }
    int v27 = LOBYTE(v26->__traits_.__loc_.__locale_);
    if (v27 == 125)
    {
      uint64_t v9 = (std::basic_regex<char> *)(v16 + 2);
      if (!v6 && v9 != a3 && LOBYTE(v9->__traits_.__loc_.__locale_) == 63)
      {
        size_t v11 = v15;
        unsigned int v10 = v16 + 3;
        __mexp_std::vector<std::ssub_match>::pointer begin = __mexp_begin;
        __mexp_std::vector<std::ssub_match>::pointer end = __mexp_end;
        goto LABEL_36;
      }
      size_t v25 = v15;
      __mexp_std::vector<std::ssub_match>::pointer begin = __mexp_begin;
      __mexp_std::vector<std::ssub_match>::pointer end = __mexp_end;
LABEL_45:
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v25, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
      return v9;
    }
    if ((v27 & 0xF8) != 0x30 && (v27 & 0xFE) != 0x38) {
      goto LABEL_73;
    }
    int v28 = v27 - 48;
    unint64_t v29 = (std::basic_regex<char> *)(v16 + 2);
    if (v29 == a3)
    {
LABEL_61:
      unint64_t v29 = a3;
    }
    else
    {
      while (1)
      {
        int v30 = LOBYTE(v29->__traits_.__loc_.__locale_);
        if ((v30 & 0xF8) != 0x30 && (v30 & 0xFE) != 0x38) {
          break;
        }
        if (v28 >= 214748364) {
          goto LABEL_72;
        }
        int v28 = v30 + 10 * v28 - 48;
        unint64_t v29 = (std::basic_regex<char> *)((char *)v29 + 1);
        if (v29 == a3) {
          goto LABEL_61;
        }
      }
    }
    if (v29 == v26 || v29 == a3 || LOBYTE(v29->__traits_.__loc_.__locale_) != 125) {
LABEL_73:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    if (v28 < v15) {
      goto LABEL_72;
    }
    int64_t v31 = (std::basic_regex<char> *)((char *)&v29->__traits_.__loc_.__locale_ + 1);
    if (v6 || v31 == a3 || LOBYTE(v31->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v28, a4, __mexp_begin, __mexp_end, 1);
      return v31;
    }
    else
    {
      uint64_t v32 = (char *)&v29->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v28, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v32;
    }
  }
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3) {
    return a2;
  }
  unint64_t v4 = a2;
  if (*a2 == 92)
  {
    int v6 = a2 + 1;
    if (a2 + 1 == a3) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    int v8 = *v6;
    unsigned int v9 = v8 - 48;
    if (v8 == 48)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
      return a2 + 2;
    }
    if ((v8 - 49) <= 8)
    {
      unint64_t v4 = a2 + 2;
      if (a2 + 2 == a3)
      {
        unint64_t v4 = a3;
      }
      else
      {
        while (1)
        {
          int v11 = *v4;
          if ((v11 - 48) > 9) {
            break;
          }
          if (v9 >= 0x19999999) {
            goto LABEL_24;
          }
          ++v4;
          unsigned int v9 = v11 + 10 * v9 - 48;
          if (v4 == a3)
          {
            unint64_t v4 = a3;
            break;
          }
        }
        if (!v9) {
LABEL_24:
        }
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
      }
      if (v9 > this->__marked_count_) {
        goto LABEL_24;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v9);
      if (v4 != v6) {
        return v4;
      }
    }
    unint64_t v4 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<std::__wrap_iter<char const*>>((uint64_t)this, a2 + 1, a3);
    if (v6 == v4)
    {
      BOOL v12 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(this, (std::basic_regex<char>::value_type *)a2 + 1, (std::basic_regex<char>::value_type *)a3, 0);
      if (v6 == v12) {
        return a2;
      }
      else {
        return v12;
      }
    }
  }
  return v4;
}

std::string::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(uint64_t a1, std::string::value_type *a2, std::string::value_type *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3) {
      goto LABEL_20;
    }
    int v5 = a2[1];
    char v6 = v5 == 94;
    int v7 = v5 == 94 ? a2 + 2 : a2 + 1;
    int v8 = operator new(0xB0uLL);
    std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v8, a1, *(void *)(*(void *)(a1 + 56) + 8), v6, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
    *(void *)(*(void *)(a1 + 56) + 8) = v8;
    *(void *)(a1 + 56) = v8;
    if (v7 == a3) {
      goto LABEL_20;
    }
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v7 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 93);
      ++v7;
    }
    if (v7 == a3) {
      goto LABEL_20;
    }
    do
    {
      unsigned int v9 = v7;
      int v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<std::__wrap_iter<char const*>>(a1, v7, a3, (uint64_t)v8);
    }
    while (v9 != v7);
    if (v9 == a3) {
      goto LABEL_20;
    }
    if (*v9 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 45);
      ++v9;
    }
    if (v9 == a3 || *v9 != 93) {
LABEL_20:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v9 + 1;
  }
  return a2;
}

void sub_248B21258(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  if (this == a3) {
    return this;
  }
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '{':
    case '|':
    case '}':
      return this;
    default:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
      uint64_t result = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      break;
  }
  return result;
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<std::__wrap_iter<char const*>>(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  BOOL v3 = a2;
  if (a2 != a3)
  {
    switch(*a2)
    {
      case 'D':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_7;
      case 'S':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_11;
      case 'W':
        char v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(void *)(*(void *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_9;
      case 'd':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_7:
        *(void *)(*(void *)(a1 + 56) + 8) = v5;
        *(void *)(a1 + 56) = v5;
        int v7 = v5[40] | 0x400;
        goto LABEL_12;
      case 's':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_11:
        *(void *)(*(void *)(a1 + 56) + 8) = v5;
        *(void *)(a1 + 56) = v5;
        int v7 = v5[40] | 0x4000;
LABEL_12:
        v5[40] = v7;
        goto LABEL_13;
      case 'w':
        char v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(void *)(*(void *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_9:
        *(void *)(*(void *)(a1 + 56) + 8) = v6;
        *(void *)(a1 + 56) = v6;
        v6[40] |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v6, 95);
LABEL_13:
        ++v3;
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_248B2162C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_248B21640(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_248B21654(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_248B21668(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_248B2167C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_248B21690(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3, std::string *this)
{
  unint64_t v4 = a2;
  if (a2 == a3) {
    return (unsigned __int8 *)v4;
  }
  switch(*a2)
  {
    case '0':
      if (this)
      {
        std::string::operator=(this, 0);
        return (unsigned __int8 *)(v4 + 1);
      }
      else
      {
        std::basic_regex<char>::value_type v7 = 0;
LABEL_57:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
        return (unsigned __int8 *)(v4 + 1);
      }
    case 'c':
      if (a2 + 1 == a3 || a2[1] < 65) {
        goto LABEL_64;
      }
      unsigned int v8 = a2[1];
      if (v8 >= 0x5B && (v8 - 97) > 0x19u) {
        goto LABEL_64;
      }
      std::string::value_type v10 = v8 & 0x1F;
      if (this)
      {
        std::string::operator=(this, v10);
        v4 += 2;
        return (unsigned __int8 *)v4;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v10);
      uint64_t result = (unsigned __int8 *)(v4 + 2);
      break;
    case 'f':
      if (this) {
        std::string::operator=(this, 12);
      }
      else {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
      }
      return (unsigned __int8 *)(v4 + 1);
    case 'n':
      if (this) {
        std::string::operator=(this, 10);
      }
      else {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
      }
      return (unsigned __int8 *)(v4 + 1);
    case 'r':
      if (this) {
        std::string::operator=(this, 13);
      }
      else {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
      }
      return (unsigned __int8 *)(v4 + 1);
    case 't':
      if (this) {
        std::string::operator=(this, 9);
      }
      else {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
      }
      return (unsigned __int8 *)(v4 + 1);
    case 'u':
      if (a2 + 1 != a3)
      {
        int v11 = a2[1];
        if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38 || (v11 | 0x20u) - 97 < 6)
        {
          unint64_t v4 = a2 + 2;
          if (a2 + 2 != a3)
          {
            int v12 = *v4;
            if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38 || (v12 | 0x20u) - 97 < 6) {
              goto LABEL_39;
            }
          }
        }
      }
      goto LABEL_64;
    case 'v':
      if (this) {
        std::string::operator=(this, 11);
      }
      else {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 11);
      }
      return (unsigned __int8 *)(v4 + 1);
    case 'x':
LABEL_39:
      if (v4 + 1 == a3) {
        goto LABEL_64;
      }
      unsigned __int8 v13 = v4[1];
      char v14 = -48;
      if ((v13 & 0xF8) == 0x30 || (v13 & 0xFE) == 0x38) {
        goto LABEL_44;
      }
      v13 |= 0x20u;
      if ((v13 - 97) >= 6u) {
        goto LABEL_64;
      }
      char v14 = -87;
LABEL_44:
      if (v4 + 2 == a3) {
        goto LABEL_64;
      }
      unsigned __int8 v15 = v4[2];
      char v16 = -48;
      if ((v15 & 0xF8) != 0x30 && (v15 & 0xFE) != 0x38)
      {
        v15 |= 0x20u;
        if ((v15 - 97) >= 6u) {
LABEL_64:
        }
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
        char v16 = -87;
      }
      std::string::value_type v17 = v15 + 16 * (v13 + v14) + v16;
      if (this) {
        std::string::operator=(this, v17);
      }
      else {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v17);
      }
      return (unsigned __int8 *)(v4 + 3);
    default:
      uint64_t v6 = *a2;
      if (v6 == 95 || (v6 & 0x80) == 0 && (a1->__traits_.__ct_->__tab_[v6] & 0x500) != 0) {
        goto LABEL_64;
      }
      std::basic_regex<char>::value_type v7 = *a2;
      if (!this) {
        goto LABEL_57;
      }
      std::string::operator=(this, v6);
      return (unsigned __int8 *)(v4 + 1);
  }
  return result;
}

std::string::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<std::__wrap_iter<char const*>>(uint64_t a1, std::string::value_type *a2, std::string::value_type *a3, uint64_t a4)
{
  unint64_t v4 = a2;
  int64_t v5 = a2 - a3;
  if (a2 == a3) {
    return v4;
  }
  int v6 = *a2;
  if (v6 == 93) {
    return v4;
  }
  std::basic_regex<char>::value_type v7 = (std::string::value_type *)a4;
  std::string::value_type v10 = a2 + 1;
  memset(&v34, 0, sizeof(v34));
  if (a2 + 1 != a3 && v6 == 91)
  {
    int v11 = *v10;
    switch(v11)
    {
      case '.':
        long long v20 = a2 + 2;
        if (a3 - (v4 + 2) >= 2)
        {
          BOOL v21 = v4 + 2;
          std::basic_regex<char> v22 = v4 + 3;
          if (*v20 != 46) {
            goto LABEL_26;
          }
LABEL_25:
          if (*v22 == 93)
          {
            if (v21 != a3)
            {
              std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, (uint64_t)v20, v4 + 2, (uint64_t)&v35);
              if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v34.__r_.__value_.__l.__data_);
              }
              std::string v34 = v35;
              std::string::size_type size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
              if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type size = v34.__r_.__value_.__l.__size_;
              }
              if (size - 1 >= 2) {
                std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
              }
              std::string::value_type v10 = v21 + 2;
              int v13 = *(_DWORD *)(a1 + 24) & 0x1F0;
LABEL_40:
              if (v10 == a3) {
                goto LABEL_42;
              }
              goto LABEL_41;
            }
          }
          else
          {
LABEL_26:
            while (a3 - 4 != v4)
            {
              ++v4;
              BOOL v21 = v22;
              int v23 = *v22++;
              if (v23 == 46) {
                goto LABEL_25;
              }
            }
          }
        }
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
      case ':':
        uint64_t v15 = (uint64_t)(a2 + 2);
        if (a3 - (v4 + 2) >= 2)
        {
          uint64_t v16 = 0;
          int64_t v17 = v5 + 4;
          int v18 = v4;
          uint64_t v19 = v17;
          if (v4[2] != 58) {
            goto LABEL_20;
          }
LABEL_19:
          if (v18[3] == 93)
          {
            uint64_t v24 = &v4[v16 + 2];
            if (v24 != a3)
            {
              int v25 = std::regex_traits<char>::__lookup_classname<std::__wrap_iter<char const*>>(a1, v15, v24, *(_DWORD *)(a1 + 24) & 1);
              if (!v25) {
                std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
              }
              char v12 = 0;
              *((_DWORD *)v7 + 40) |= v25;
              std::basic_regex<char>::value_type v7 = &v4[v16 + 4];
              if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
                goto LABEL_60;
              }
              goto LABEL_61;
            }
          }
          else
          {
LABEL_20:
            while (v19)
            {
              int v18 = &v4[++v16];
              uint64_t v19 = v17 + v16;
              if (v4[v16 + 2] == 58) {
                goto LABEL_19;
              }
            }
          }
        }
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
      case '=':
        std::basic_regex<char>::value_type v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<std::__wrap_iter<char const*>>(a1, a2 + 2, a3, a4);
        char v12 = 0;
        if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_61;
        }
        goto LABEL_60;
    }
  }
  int v13 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if ((*(_DWORD *)(a1 + 24) & 0x1B0 | 0x40) != 0x40)
  {
    LOBYTE(v14) = *a2;
    goto LABEL_16;
  }
  int v14 = *a2;
  if (v14 != 92)
  {
LABEL_16:
    std::string::operator=(&v34, v14);
    goto LABEL_40;
  }
  if (v13)
  {
    std::string::value_type v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2 + 1, a3, &v34);
    if (v10 == a3) {
      goto LABEL_42;
    }
  }
  else
  {
    std::string::value_type v10 = (std::string::value_type *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2 + 1, a3, &v34, a4);
    int v13 = 0;
    if (v10 == a3) {
      goto LABEL_42;
    }
  }
LABEL_41:
  int v27 = *v10;
  if (v27 == 93 || (unint64_t v29 = v10 + 1, v10 + 1 == a3) || v27 != 45 || *v29 == 93)
  {
LABEL_42:
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!v34.__r_.__value_.__l.__size_) {
        goto LABEL_59;
      }
      if (v34.__r_.__value_.__l.__size_ != 1)
      {
        int v28 = (std::string *)v34.__r_.__value_.__r.__words[0];
LABEL_58:
        std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)v7, v28->__r_.__value_.__s.__data_[0], v28->__r_.__value_.__s.__data_[1]);
LABEL_59:
        char v12 = 1;
        unint64_t v4 = v10;
        if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_61;
        }
        goto LABEL_60;
      }
      int v28 = (std::string *)v34.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (!*((unsigned char *)&v34.__r_.__value_.__s + 23)) {
        goto LABEL_59;
      }
      int v28 = &v34;
      if (HIBYTE(v34.__r_.__value_.__r.__words[2]) != 1) {
        goto LABEL_58;
      }
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v7, v28->__r_.__value_.__s.__data_[0]);
    goto LABEL_59;
  }
  memset(&v35, 0, sizeof(v35));
  unint64_t v4 = v10 + 2;
  if (v10 + 2 == a3 || *v29 != 91 || *v4 != 46)
  {
    if ((v13 | 0x40) == 0x40)
    {
      LODWORD(v29) = *v29;
      if (v29 == 92)
      {
        if (v13) {
          int v30 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v10 + 2, a3, &v35);
        }
        else {
          int v30 = (std::string::value_type *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v10 + 2, a3, &v35, (uint64_t)v7);
        }
        goto LABEL_73;
      }
    }
    else
    {
      LOBYTE(v29) = *v29;
    }
    std::string::operator=(&v35, (std::string::value_type)v29);
    goto LABEL_74;
  }
  int v30 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, v10 + 3, a3, (uint64_t)&v35);
LABEL_73:
  unint64_t v4 = v30;
LABEL_74:
  std::string v33 = v34;
  memset(&v34, 0, sizeof(v34));
  std::string __p = v35;
  memset(&v35, 0, sizeof(v35));
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100]((uint64_t)v7, (char *)&v33, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_76:
      if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_77;
      }
LABEL_81:
      operator delete(v35.__r_.__value_.__l.__data_);
      char v12 = 1;
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_60;
      }
      goto LABEL_61;
    }
  }
  else if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_76;
  }
  operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_81;
  }
LABEL_77:
  char v12 = 1;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
LABEL_60:
  }
    operator delete(v34.__r_.__value_.__l.__data_);
LABEL_61:
  if (v12) {
    return v4;
  }
  return v7;
}

void sub_248B2211C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 49) < 0)
  {
    operator delete(*(void **)(v28 - 72));
    if ((a28 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a28 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<std::__wrap_iter<char const*>>(uint64_t a1, std::string::value_type *a2, std::string::value_type *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_39;
  }
  int v6 = a3 - 2;
  std::basic_regex<char>::value_type v7 = a2;
  unsigned int v8 = a2;
  unsigned int v9 = a2 + 1;
  if (*a2 != 61) {
    goto LABEL_5;
  }
LABEL_4:
  if (*v9 != 93)
  {
LABEL_5:
    while (a2 != v6)
    {
      ++v7;
      --v6;
      unsigned int v8 = v9;
      int v10 = *v9++;
      if (v10 == 61) {
        goto LABEL_4;
      }
    }
LABEL_39:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (v8 == a3) {
    goto LABEL_39;
  }
  memset(v20, 170, sizeof(v20));
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, (uint64_t)a2, v7, (uint64_t)v20);
  if ((SHIBYTE(v20[2]) & 0x80000000) == 0)
  {
    int v11 = (char *)HIBYTE(v20[2]);
    if (HIBYTE(v20[2]))
    {
      memset(__p, 170, sizeof(__p));
      char v12 = v20;
      goto LABEL_14;
    }
LABEL_40:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  int v11 = (char *)v20[1];
  if (!v20[1]) {
    goto LABEL_40;
  }
  memset(__p, 170, sizeof(__p));
  char v12 = (void **)v20[0];
LABEL_14:
  std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(a1, (uint64_t)v12, &v11[(void)v12], (unsigned char **)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    if (__p[1])
    {
LABEL_16:
      unint64_t v13 = *(void *)(a4 + 144);
      if (v13 >= *(void *)(a4 + 152))
      {
        *(void *)(a4 + 144) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)(a4 + 136), (uint64_t)__p);
        if (SHIBYTE(__p[2]) < 0) {
          goto LABEL_37;
        }
      }
      else
      {
        if ((HIBYTE(__p[2]) & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a4 + 144), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          long long v14 = *(_OWORD *)__p;
          *(void **)(v13 + 16) = __p[2];
          *(_OWORD *)unint64_t v13 = v14;
        }
        *(void *)(a4 + 144) = v13 + 24;
        *(void *)(a4 + 144) = v13 + 24;
        if (SHIBYTE(__p[2]) < 0) {
          goto LABEL_37;
        }
      }
      goto LABEL_33;
    }
  }
  else if (HIBYTE(__p[2]))
  {
    goto LABEL_16;
  }
  uint64_t v15 = (void *)HIBYTE(v20[2]);
  if (SHIBYTE(v20[2]) < 0) {
    uint64_t v15 = v20[1];
  }
  if (v15 == (void *)2)
  {
    int64_t v17 = v20;
    if (SHIBYTE(v20[2]) < 0) {
      int64_t v17 = (void **)v20[0];
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](a4, *(char *)v17, *((char *)v17 + 1));
  }
  else
  {
    if (v15 != (void *)1) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
    }
    uint64_t v16 = v20;
    if (SHIBYTE(v20[2]) < 0) {
      uint64_t v16 = (void **)v20[0];
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a4, *(char *)v16);
  }
  if (SHIBYTE(__p[2]) < 0)
  {
LABEL_37:
    operator delete(__p[0]);
    if (SHIBYTE(v20[2]) < 0) {
      goto LABEL_38;
    }
    return v7 + 2;
  }
LABEL_33:
  if ((SHIBYTE(v20[2]) & 0x80000000) == 0) {
    return v7 + 2;
  }
LABEL_38:
  operator delete(v20[0]);
  return v7 + 2;
}

void sub_248B22434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  *(void *)(v20 + 144) = v21;
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

std::string::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(uint64_t a1, std::string::value_type *a2, std::string::value_type *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  int64_t v5 = a3 - 2;
  int v6 = a2;
  std::basic_regex<char>::value_type v7 = a2;
  unsigned int v8 = a2 + 1;
  if (*a2 != 46) {
    goto LABEL_5;
  }
LABEL_4:
  if (*v8 != 93)
  {
LABEL_5:
    while (a2 != v5)
    {
      ++v6;
      --v5;
      std::basic_regex<char>::value_type v7 = v8;
      int v9 = *v8++;
      if (v9 == 46) {
        goto LABEL_4;
      }
    }
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (v7 == a3) {
    goto LABEL_15;
  }
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, (uint64_t)a2, v6, (uint64_t)&v13);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v13;
  unint64_t v10 = v14;
  *(void *)(a4 + 16) = v14;
  unint64_t v11 = HIBYTE(v10);
  if ((v11 & 0x80u) != 0) {
    unint64_t v11 = *(void *)(a4 + 8);
  }
  if (v11 - 1 >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  return v6 + 2;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3, std::string *this, uint64_t a5)
{
  if (a2 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  switch(*a2)
  {
    case 'D':
      *(_DWORD *)(a5 + 164) |= 0x400u;
      uint64_t result = (unsigned __int8 *)(a2 + 1);
      break;
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 't':
    case 'u':
    case 'v':
      goto LABEL_6;
    case 'S':
      *(_DWORD *)(a5 + 164) |= 0x4000u;
      uint64_t result = (unsigned __int8 *)(a2 + 1);
      break;
    case 'W':
      *(_DWORD *)(a5 + 164) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
      uint64_t result = (unsigned __int8 *)(a2 + 1);
      break;
    case 'b':
      std::string::operator=(this, 8);
      uint64_t result = (unsigned __int8 *)(a2 + 1);
      break;
    case 'd':
      *(_DWORD *)(a5 + 160) |= 0x400u;
      uint64_t result = (unsigned __int8 *)(a2 + 1);
      break;
    case 's':
      *(_DWORD *)(a5 + 160) |= 0x4000u;
      uint64_t result = (unsigned __int8 *)(a2 + 1);
      break;
    case 'w':
      *(_DWORD *)(a5 + 160) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
      uint64_t result = (unsigned __int8 *)(a2 + 1);
      break;
    default:
      if (*a2)
      {
LABEL_6:
        uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, a2, a3, this);
      }
      else
      {
        std::string::operator=(this, 0);
        uint64_t result = (unsigned __int8 *)(a2 + 1);
      }
      break;
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3, std::string *this)
{
  if (a2 == a3) {
LABEL_51:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  int v5 = *a2;
  switch(v5)
  {
    case '""':
    case '/':
    case '\\':
      if (this) {
        std::string::operator=(this, v5);
      }
      else {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      }
      return a2 + 1;
    case 'a':
      if (this) {
        std::string::operator=(this, 7);
      }
      else {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 7);
      }
      return a2 + 1;
    case 'b':
      if (this) {
        std::string::operator=(this, 8);
      }
      else {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 8);
      }
      return a2 + 1;
    case 'f':
      if (this) {
        std::string::operator=(this, 12);
      }
      else {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
      }
      return a2 + 1;
    case 'n':
      if (this) {
        std::string::operator=(this, 10);
      }
      else {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
      }
      return a2 + 1;
    case 'r':
      if (this) {
        std::string::operator=(this, 13);
      }
      else {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
      }
      return a2 + 1;
    case 't':
      if (this) {
        std::string::operator=(this, 9);
      }
      else {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
      }
      return a2 + 1;
    case 'v':
      if (this) {
        std::string::operator=(this, 11);
      }
      else {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 11);
      }
      return a2 + 1;
    default:
      if ((v5 & 0xFFFFFFF8) != 0x30) {
        goto LABEL_51;
      }
      std::basic_regex<char>::value_type v7 = a2 + 1;
      if (a2 + 1 == a3)
      {
        std::basic_regex<char>::value_type v7 = a3;
LABEL_40:
        std::string::value_type v12 = v5 - 48;
        if (this) {
          goto LABEL_41;
        }
        goto LABEL_50;
      }
      if ((*v7 & 0xF8) != 0x30) {
        goto LABEL_40;
      }
      std::string::value_type v8 = *v7 + 8 * (v5 - 48) - 48;
      if (a2 + 2 != a3)
      {
        char v9 = a2[2];
        int v10 = v9 & 0xF8;
        std::string::value_type v11 = v9 + 8 * v8 - 48;
        if (v10 == 48) {
          std::basic_regex<char>::value_type v7 = a2 + 3;
        }
        else {
          std::basic_regex<char>::value_type v7 = a2 + 2;
        }
        if (v10 == 48) {
          std::string::value_type v8 = v11;
        }
        std::string::value_type v12 = v8;
        if (!this) {
          goto LABEL_50;
        }
LABEL_41:
        std::string::operator=(this, v12);
        return v7;
      }
      std::basic_regex<char>::value_type v7 = a3;
      std::string::value_type v12 = v8;
      if (this) {
        goto LABEL_41;
      }
LABEL_50:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v12);
      return v7;
  }
}

void std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string::value_type *a3@<X2>, uint64_t a4@<X8>)
{
  std::string::size_type v5 = (std::string::size_type)&a3[-a2];
  memset(&__s, 170, sizeof(__s));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 <= 0x16)
  {
    *((unsigned char *)&__s.__r_.__value_.__s + 23) = (_BYTE)a3 - a2;
    p_s = &__s;
    if ((std::string::value_type *)a2 != a3) {
      goto LABEL_4;
    }
LABEL_13:
    int v10 = p_s;
    goto LABEL_16;
  }
  uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17) {
    uint64_t v16 = v5 | 7;
  }
  uint64_t v17 = v16 + 1;
  p_s = (std::string *)operator new(v16 + 1);
  __s.__r_.__value_.__l.__size_ = v5;
  __s.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)p_s;
  if ((std::string::value_type *)a2 == a3) {
    goto LABEL_13;
  }
LABEL_4:
  if (v5 < 0x20 || (unint64_t)p_s - a2 < 0x20)
  {
    int v10 = p_s;
    std::string::value_type v11 = (std::string::value_type *)a2;
    do
    {
LABEL_15:
      std::string::value_type v18 = *v11++;
      v10->__r_.__value_.__s.__data_[0] = v18;
      int v10 = (std::string *)((char *)v10 + 1);
    }
    while (v11 != a3);
    goto LABEL_16;
  }
  int v10 = (std::string *)((char *)p_s + (v5 & 0xFFFFFFFFFFFFFFE0));
  std::string::value_type v11 = (std::string::value_type *)(a2 + (v5 & 0xFFFFFFFFFFFFFFE0));
  std::string::value_type v12 = (long long *)(a2 + 16);
  long long v13 = &p_s->__r_.__value_.__r.__words[2];
  unint64_t v14 = v5 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v15 = *v12;
    *((_OWORD *)v13 - 1) = *(v12 - 1);
    *(_OWORD *)long long v13 = v15;
    v12 += 2;
    v13 += 4;
    v14 -= 32;
  }
  while (v14);
  if (v5 != (v5 & 0xFFFFFFFFFFFFFFE0)) {
    goto LABEL_15;
  }
LABEL_16:
  v10->__r_.__value_.__s.__data_[0] = 0;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v19 = (std::string *)__s.__r_.__value_.__r.__words[0];
    if (!__s.__r_.__value_.__l.__size_) {
      goto LABEL_29;
    }
  }
  else
  {
    if (!*((unsigned char *)&__s.__r_.__value_.__s + 23)) {
      return;
    }
    uint64_t v19 = &__s;
  }
  std::__get_collation_name(&v24, (const char *)v19);
  *(_OWORD *)a4 = *(_OWORD *)&v24.__r_.__value_.__l.__data_;
  unint64_t v20 = v24.__r_.__value_.__r.__words[2];
  *(void *)(a4 + 16) = *((void *)&v24.__r_.__value_.__l + 2);
  unint64_t v21 = HIBYTE(v20);
  if ((v21 & 0x80u) != 0) {
    unint64_t v21 = *(void *)(a4 + 8);
  }
  if (v21)
  {
LABEL_23:
    if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    uint64_t v19 = (std::string *)__s.__r_.__value_.__r.__words[0];
LABEL_29:
    operator delete(v19);
    return;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v19 = (std::string *)__s.__r_.__value_.__r.__words[0];
    if (__s.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_29;
    }
LABEL_31:
    (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 16) + 32))(&v24);
    if (*(char *)(a4 + 23) < 0) {
      operator delete(*(void **)a4);
    }
    *(std::string *)a4 = v24;
    if (*(char *)(a4 + 23) < 0)
    {
      uint64_t v23 = *(void *)(a4 + 8);
      if (v23 != 1 && v23 != 12)
      {
        **(unsigned char **)a4 = 0;
        *(void *)(a4 + 8) = 0;
        goto LABEL_23;
      }
    }
    else
    {
      int v22 = *(unsigned __int8 *)(a4 + 23);
      if (v22 != 12 && v22 != 1)
      {
        *(unsigned char *)a4 = 0;
        *(unsigned char *)(a4 + 23) = 0;
        goto LABEL_23;
      }
    }
    std::string::operator=((std::string *)a4, &__s);
    goto LABEL_23;
  }
  if (HIBYTE(__s.__r_.__value_.__r.__words[2]) < 3u) {
    goto LABEL_31;
  }
}

void sub_248B22E98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::regex_traits<char>::__lookup_classname<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, char *a3, BOOL a4)
{
  unint64_t v4 = (unint64_t)&a3[-a2];
  memset(__p, 170, sizeof(__p));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v4 > 0x16)
  {
    uint64_t v16 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v16 = v4 | 7;
    }
    uint64_t v17 = v16 + 1;
    char v9 = operator new(v16 + 1);
    __p[1] = (void *)v4;
    __p[2] = (void *)(v17 | 0x8000000000000000);
    __p[0] = v9;
    if ((char *)a2 != a3) {
      goto LABEL_4;
    }
LABEL_13:
    int v10 = v9;
    goto LABEL_16;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  char v9 = __p;
  if ((char *)a2 == a3) {
    goto LABEL_13;
  }
LABEL_4:
  if (v4 < 0x20 || (unint64_t)v9 - a2 < 0x20)
  {
    int v10 = v9;
    std::string::value_type v11 = (char *)a2;
  }
  else
  {
    int v10 = (char *)v9 + (v4 & 0xFFFFFFFFFFFFFFE0);
    std::string::value_type v11 = (char *)(a2 + (v4 & 0xFFFFFFFFFFFFFFE0));
    std::string::value_type v12 = (long long *)(a2 + 16);
    long long v13 = v9 + 1;
    unint64_t v14 = v4 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *long long v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 32;
    }
    while (v14);
    if (v4 == (v4 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_16;
    }
  }
  do
  {
    char v18 = *v11++;
    *v10++ = v18;
  }
  while (v11 != a3);
LABEL_16:
  unsigned char *v10 = 0;
  uint64_t v19 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v20 = __p;
  }
  else {
    unint64_t v20 = (void **)__p[0];
  }
  if (SHIBYTE(__p[2]) < 0) {
    uint64_t v19 = (char *)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), v20, &v19[(void)v20]);
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v21 = __p;
  }
  else {
    unint64_t v21 = (void **)__p[0];
  }
  uint64_t classname = std::__get_classname((const char *)v21, a4);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return classname;
}

void sub_248B2307C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, std::string::value_type *a3)
{
  int v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::string::value_type *)a2, a3);
  if ((std::string::value_type *)a2 != v6
    || (std::string::value_type *)a2 == a3
    || (std::string::value_type *)(a2 + 1) == a3
    || *(unsigned char *)a2 != 92)
  {
    return v6;
  }
  int v8 = *(unsigned __int8 *)(a2 + 1);
  if (v8 == 40)
  {
    char v9 = (std::basic_regex<char> *)(a2 + 2);
    if ((*(unsigned char *)(a1 + 24) & 2) != 0)
    {
      int v11 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      int v10 = operator new(0x18uLL);
      int v11 = *(_DWORD *)(a1 + 28) + 1;
      *(_DWORD *)(a1 + 28) = v11;
      uint64_t v12 = *(void *)(a1 + 56);
      uint64_t v13 = *(void *)(v12 + 8);
      void *v10 = &unk_26FCC7FC0;
      v10[1] = v13;
      *((_DWORD *)v10 + 4) = v11;
      *(void *)(v12 + 8) = v10;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    do
    {
      if (v9 == (std::basic_regex<char> *)a3) {
        goto LABEL_23;
      }
      unint64_t v14 = v9;
      long long v15 = *(std::__owns_one_state<char> **)(a1 + 56);
      int v16 = *(_DWORD *)(a1 + 28);
      uint64_t v17 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(a1, v14, a3);
      if (v14 == v17) {
        break;
      }
      char v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v17, (std::basic_regex<char> *)a3, v15, (v16 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
    while (v14 != v9);
    if ((char *)&v14->__traits_.__loc_.__locale_ + 1 == a3
      || LOBYTE(v14->__traits_.__loc_.__locale_) != 92
      || BYTE1(v14->__traits_.__loc_.__locale_) != 41)
    {
LABEL_23:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    int v6 = (char *)v14 + 2 * (BYTE1(v14->__traits_.__loc_.__locale_) == 41);
    if ((*(unsigned char *)(a1 + 24) & 2) == 0)
    {
      char v18 = operator new(0x18uLL);
      uint64_t v19 = *(void *)(a1 + 56);
      uint64_t v20 = *(void *)(v19 + 8);
      void *v18 = &unk_26FCC8008;
      v18[1] = v20;
      *((_DWORD *)v18 + 4) = v11;
      *(void *)(v19 + 8) = v18;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
      return v6;
    }
    return v6;
  }
  if ((v8 & 0xF8) != 0x30 && (v8 & 0xFE) != 0x38 || (v8 - 49) > 8) {
    return v6;
  }
  if ((v8 - 48) > *(_DWORD *)(a1 + 28)) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref((std::basic_regex<char> *)a1, v8 - 48);
  return (std::string::value_type *)(a2 + 2);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  if (this == a3) {
    return this;
  }
  int locale_low = LOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low == 42)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  char v9 = (unsigned __int8 *)a3;
  if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3
    || locale_low != 92
    || BYTE1(this->__traits_.__loc_.__locale_) != 123)
  {
    return this;
  }
  int v10 = (std::basic_regex<char> *)((char *)this + 2 * (BYTE1(this->__traits_.__loc_.__locale_) == 123));
  if (v10 == a3) {
    goto LABEL_45;
  }
  int v11 = LOBYTE(v10->__traits_.__loc_.__locale_);
  if ((v11 & 0xF8) != 0x30 && (v11 & 0xFE) != 0x38) {
    goto LABEL_45;
  }
  int v12 = v11 - 48;
  uint64_t v13 = (std::basic_regex<char> *)((char *)&v10->__traits_.__loc_.__locale_ + 1);
  if ((std::basic_regex<char> *)((char *)&v10->__traits_.__loc_.__locale_ + 1) == a3)
  {
LABEL_15:
    uint64_t v13 = a3;
  }
  else
  {
    while (1)
    {
      int v14 = LOBYTE(v13->__traits_.__loc_.__locale_);
      if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38) {
        break;
      }
      if (v12 >= 214748364) {
        goto LABEL_45;
      }
      int v12 = v14 + 10 * v12 - 48;
      uint64_t v13 = (std::basic_regex<char> *)((char *)v13 + 1);
      if (v13 == a3) {
        goto LABEL_15;
      }
    }
  }
  if (v13 == v10) {
    goto LABEL_45;
  }
  if (v13 == a3) {
LABEL_46:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
  long long v15 = (std::basic_regex<char> *)((char *)&v13->__traits_.__loc_.__locale_ + 1);
  int v16 = LOBYTE(v13->__traits_.__loc_.__locale_);
  if (v16 != 44)
  {
    if (v15 != a3 && v16 == 92 && LOBYTE(v15->__traits_.__loc_.__locale_) == 125)
    {
      uint64_t v19 = (unsigned __int8 *)&v13->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v12, v12, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v19;
    }
    goto LABEL_46;
  }
  if (v15 == a3) {
    goto LABEL_46;
  }
  int v17 = LOBYTE(v15->__traits_.__loc_.__locale_);
  if ((v17 & 0xF8) == 0x30 || (v17 & 0xFE) == 0x38)
  {
    int v18 = v17 - 48;
    long long v15 = (std::basic_regex<char> *)((char *)&v13->__traits_.__loc_.__locale_ + 2);
    if ((std::basic_regex<char> *)((char *)&v13->__traits_.__loc_.__locale_ + 2) == a3)
    {
LABEL_37:
      long long v15 = a3;
      goto LABEL_40;
    }
    while (1)
    {
      int v17 = LOBYTE(v15->__traits_.__loc_.__locale_);
      if ((v17 & 0xF8) != 0x30 && (v17 & 0xFE) != 0x38) {
        break;
      }
      if (v18 >= 214748364) {
        goto LABEL_45;
      }
      int v18 = v17 + 10 * v18 - 48;
      long long v15 = (std::basic_regex<char> *)((char *)v15 + 1);
      if (v15 == a3) {
        goto LABEL_37;
      }
    }
  }
  else
  {
    int v18 = -1;
  }
  if (v15 == a3)
  {
    uint64_t v20 = (unsigned __int8 *)v15;
    long long v15 = a3;
    char v9 = v20;
  }
  else if ((std::basic_regex<char> *)((char *)&v15->__traits_.__loc_.__locale_ + 1) == a3 || v17 != 92)
  {
    char v9 = (unsigned __int8 *)v15;
  }
  else
  {
    char v9 = (unsigned __int8 *)v15 + 2 * (BYTE1(v15->__traits_.__loc_.__locale_) == 125);
  }
LABEL_40:
  if (v15 == (std::basic_regex<char> *)v9) {
    goto LABEL_46;
  }
  if (v18 != -1)
  {
    if (v18 >= v12)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v12, v18, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v9;
    }
LABEL_45:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v12, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
  return (std::basic_regex<char> *)v9;
}

std::string::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, std::string::value_type *a2, std::string::value_type *a3)
{
  if (a2 != a3)
  {
    int v6 = a2 + 1;
    int v5 = *a2;
    if (a2 + 1 != a3 || v5 != 36)
    {
      if ((v5 - 46) > 0x2E || ((1 << (v5 - 46)) & 0x600000000001) == 0)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v5);
        return a2 + 1;
      }
      if (v6 != a3 && v5 == 92)
      {
        int v9 = *v6;
        if ((v9 - 36) <= 0x3A && ((1 << (v9 - 36)) & 0x580000000000441) != 0)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
          return a2 + 2;
        }
      }
      if (*a2 == 46)
      {
        int v10 = (std::__node<char> *)operator new(0x10uLL);
        std::vector<std::ssub_match>::pointer end = this->__end_;
        first = end->__first_;
        v10->__vftable = (std::__node<char>_vtbl *)&unk_26FCC81B8;
        v10[1].__vftable = (std::__node<char>_vtbl *)first;
        end->__first_ = v10;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
        return a2 + 1;
      }
    }
  }
  return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  int v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  int v7 = *(_DWORD *)(a1 + 28);
  int v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
  if (v8 == a2)
  {
    int v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<char const*>>(a1, (char *)a2, (char *)a3);
    if (v8 == a2)
    {
      if (a2 == a3 || LOBYTE(a2->__traits_.__loc_.__locale_) != 46)
      {
        int v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(a1, (std::string::value_type *)a2, (std::string::value_type *)a3);
      }
      else
      {
        int v9 = operator new(0x10uLL);
        uint64_t v10 = *(void *)(a1 + 56);
        uint64_t v11 = *(void *)(v10 + 8);
        void *v9 = &unk_26FCC81B8;
        v9[1] = v11;
        *(void *)(v10 + 8) = v9;
        *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
        int v8 = (std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1);
      }
    }
  }
  if (v8 != a2 || v8 == a3)
  {
LABEL_23:
    if (v8 != a2) {
      goto LABEL_24;
    }
    return a2;
  }
  int locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
  if (locale_low == 36)
  {
    uint64_t v13 = operator new(0x18uLL);
    BOOL v14 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v15 = *(void *)(a1 + 56);
    v13[1] = *(void *)(v15 + 8);
    int v16 = &unk_26FCC7CA8;
    goto LABEL_14;
  }
  if (locale_low == 40)
  {
    if ((*(unsigned char *)(a1 + 24) & 2) != 0)
    {
      int v18 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      int v17 = operator new(0x18uLL);
      int v18 = *(_DWORD *)(a1 + 28) + 1;
      *(_DWORD *)(a1 + 28) = v18;
      uint64_t v19 = *(void *)(a1 + 56);
      uint64_t v20 = *(void *)(v19 + 8);
      void *v17 = &unk_26FCC7FC0;
      v17[1] = v20;
      *((_DWORD *)v17 + 4) = v18;
      *(void *)(v19 + 8) = v17;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    ++*(_DWORD *)(a1 + 36);
    unint64_t v21 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
    if (v21 == a3 || (int v22 = v21, LOBYTE(v21->__traits_.__loc_.__locale_) != 41)) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    if ((*(unsigned char *)(a1 + 24) & 2) == 0)
    {
      uint64_t v23 = operator new(0x18uLL);
      uint64_t v24 = *(void *)(a1 + 56);
      uint64_t v25 = *(void *)(v24 + 8);
      void *v23 = &unk_26FCC8008;
      v23[1] = v25;
      *((_DWORD *)v23 + 4) = v18;
      *(void *)(v24 + 8) = v23;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    --*(_DWORD *)(a1 + 36);
    int v8 = (std::basic_regex<char> *)((char *)&v22->__traits_.__loc_.__locale_ + 1);
    goto LABEL_23;
  }
  if (locale_low != 94) {
    return a2;
  }
  uint64_t v13 = operator new(0x18uLL);
  BOOL v14 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
  uint64_t v15 = *(void *)(a1 + 56);
  v13[1] = *(void *)(v15 + 8);
  int v16 = &unk_26FCC7C60;
LABEL_14:
  *uint64_t v13 = v16;
  *((unsigned char *)v13 + 16) = v14;
  *(void *)(v15 + 8) = v13;
  *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
  int v8 = (std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1);
LABEL_24:
  size_t v26 = (*(_DWORD *)(a1 + 28) + 1);
  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v8, a3, v6, (v7 + 1), v26);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  if (this == a3) {
    return this;
  }
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
      return this;
    case ')':
      if (a1->__open_count_) {
        return this;
      }
      break;
    default:
      break;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
  return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  BOOL v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  unint64_t v4 = a2 + 1;
  if (v3 + 1 == a3 || *v3 != 92) {
    return v3;
  }
  std::basic_regex<char>::value_type v5 = *v4;
  switch(*v4)
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
    case '}':
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v5);
      v3 += 2;
      return v3;
    default:
      if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
      {
        uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v4, a3, 0);
      }
      else
      {
        BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v5);
        uint64_t v8 = 2;
        if (!v7) {
          uint64_t v8 = 0;
        }
        uint64_t result = &v3[v8];
      }
      break;
  }
  return result;
}

_DWORD *BasebandTransport::getSupportedProtocols@<X0>(BasebandTransport *this@<X0>, void *a2@<X8>)
{
  *a2 = a2;
  a2[1] = a2;
  a2[2] = 0;
  uint64_t result = (_DWORD *)capabilities::radio::vendor(this);
  if (result == 1)
  {
    uint64_t v13 = operator new(0x18uLL);
    v13[4] = 0;
    *(void *)uint64_t v13 = &v33;
    *((void *)v13 + 1) = &v33;
    std::string v34 = v13;
    BOOL v14 = operator new(0x18uLL);
    v14[4] = 1;
    *(void *)BOOL v14 = v13;
    *((void *)v14 + 1) = &v33;
    *((void *)v13 + 1) = v14;
    uint64_t v15 = operator new(0x18uLL);
    v15[4] = 2;
    *(void *)uint64_t v15 = v14;
    *((void *)v15 + 1) = &v33;
    *((void *)v14 + 1) = v15;
    int v16 = operator new(0x18uLL);
    v16[4] = 3;
    *(void *)int v16 = v15;
    *((void *)v16 + 1) = &v33;
    *((void *)v15 + 1) = v16;
    int v17 = operator new(0x18uLL);
    v17[4] = 4;
    *(void *)int v17 = v16;
    *((void *)v17 + 1) = &v33;
    *((void *)v16 + 1) = v17;
    int v18 = operator new(0x18uLL);
    v18[4] = 5;
    *(void *)int v18 = v17;
    *((void *)v18 + 1) = &v33;
    *((void *)v17 + 1) = v18;
    uint64_t v19 = operator new(0x18uLL);
    v19[4] = 10;
    *(void *)uint64_t v19 = v18;
    *((void *)v19 + 1) = &v33;
    *((void *)v18 + 1) = v19;
    uint64_t v20 = operator new(0x18uLL);
    v20[4] = 12;
    *(void *)uint64_t v20 = v19;
    *((void *)v20 + 1) = &v33;
    *((void *)v19 + 1) = v20;
    unint64_t v21 = operator new(0x18uLL);
    v21[4] = 14;
    *(void *)unint64_t v21 = v20;
    *((void *)v21 + 1) = &v33;
    *((void *)v20 + 1) = v21;
    std::string v33 = v21;
    uint64_t v35 = 9;
    uint64_t result = (_DWORD *)capabilities::radio::mav20Plus((capabilities::radio *)v21);
    if (result)
    {
      int v22 = operator new(0x18uLL);
      v22[4] = 11;
      uint64_t v23 = v33;
      *(void *)int v22 = v33;
      *((void *)v22 + 1) = &v33;
      v23[1] = v22;
      uint64_t v24 = v35;
      std::string v33 = v22;
      ++v35;
      uint64_t result = operator new(0x18uLL);
      result[4] = 15;
      *(void *)uint64_t result = v22;
      *((void *)result + 1) = &v33;
      *((void *)v22 + 1) = result;
      std::string v33 = result;
      uint64_t v35 = v24 + 2;
    }
    if (a2[2])
    {
      uint64_t v25 = *a2;
      uint64_t result = (_DWORD *)a2[1];
      uint64_t v26 = *(void *)result;
      *(void *)(v26 + 8) = *(void *)(*a2 + 8);
      **(void **)(v25 + 8) = v26;
      a2[2] = 0;
      if (result != (_DWORD *)a2)
      {
        do
        {
          int v27 = (void *)*((void *)result + 1);
          operator delete(result);
          uint64_t result = v27;
        }
        while (v27 != a2);
      }
    }
  }
  else
  {
    if (result != 2) {
      return result;
    }
    unint64_t v4 = operator new(0x18uLL);
    v4[4] = 6;
    *(void *)unint64_t v4 = &v33;
    *((void *)v4 + 1) = &v33;
    std::string v34 = v4;
    std::basic_regex<char>::value_type v5 = operator new(0x18uLL);
    v5[4] = 7;
    *(void *)std::basic_regex<char>::value_type v5 = v4;
    *((void *)v5 + 1) = &v33;
    *((void *)v4 + 1) = v5;
    int v6 = operator new(0x18uLL);
    v6[4] = 8;
    *(void *)int v6 = v5;
    *((void *)v6 + 1) = &v33;
    *((void *)v5 + 1) = v6;
    BOOL v7 = operator new(0x18uLL);
    v7[4] = 9;
    *(void *)BOOL v7 = v6;
    *((void *)v7 + 1) = &v33;
    *((void *)v6 + 1) = v7;
    uint64_t v8 = operator new(0x18uLL);
    v8[4] = 10;
    *(void *)uint64_t v8 = v7;
    *((void *)v8 + 1) = &v33;
    *((void *)v7 + 1) = v8;
    std::string v33 = v8;
    uint64_t v35 = 5;
    uint64_t result = (_DWORD *)capabilities::abs::supportsETSProtocol((capabilities::abs *)v8);
    if (result)
    {
      uint64_t result = operator new(0x18uLL);
      result[4] = 13;
      int v9 = v33;
      *(void *)uint64_t result = v33;
      *((void *)result + 1) = &v33;
      v9[1] = result;
      std::string v33 = result;
      ++v35;
    }
    if (a2[2])
    {
      uint64_t v10 = *a2;
      uint64_t result = (_DWORD *)a2[1];
      uint64_t v11 = *(void *)result;
      *(void *)(v11 + 8) = *(void *)(*a2 + 8);
      **(void **)(v10 + 8) = v11;
      a2[2] = 0;
      if (result != (_DWORD *)a2)
      {
        do
        {
          int v12 = (void *)*((void *)result + 1);
          operator delete(result);
          uint64_t result = v12;
        }
        while (v12 != a2);
      }
    }
  }
  uint64_t v28 = v35;
  if (v35)
  {
    int v30 = v33;
    unint64_t v29 = v34;
    uint64_t v31 = *v34;
    *(void *)(v31 + 8) = v33[1];
    *(void *)v30[1] = v31;
    uint64_t v32 = *a2;
    *(void *)(v32 + 8) = v29;
    *unint64_t v29 = v32;
    *a2 = v30;
    v30[1] = a2;
    a2[2] += v28;
  }
  return result;
}

void sub_248B24134(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::list<TCP::Mode>::~list((uint64_t *)va);
  std::list<TCP::Mode>::~list(v2);
  _Unwind_Resume(a1);
}

void sub_248B24164(_Unwind_Exception *a1)
{
  std::list<TCP::Mode>::~list(v1);
  _Unwind_Resume(a1);
}

void sub_248B2417C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  do
  {
    int v16 = (void *)v13[1];
    operator delete(v13);
    uint64_t v13 = v16;
  }
  while (v16 != v14);
  std::list<TCP::Mode>::~list(v12);
  _Unwind_Resume(a1);
}

void BasebandTransport::getSupportedProtocolsAsStringLowerCase(BasebandTransport *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = (uint64_t)a2;
  a2[1] = (uint64_t)a2;
  a2[2] = 0;
  memset(v20, 170, sizeof(v20));
  BasebandTransport::getSupportedProtocols(this, v20);
  for (uint64_t i = v20[1]; (void *)i != v20; uint64_t i = *(void *)(i + 8))
  {
    int v4 = *(_DWORD *)(i + 16);
    memset(v19, 170, sizeof(v19));
    switch(v4)
    {
      case 0:
        char v5 = 0;
        char v6 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 3;
        __darwin_ct_rune_t v9 = 4997712;
        goto LABEL_30;
      case 1:
        char v5 = 0;
        char v6 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 3;
        __darwin_ct_rune_t v9 = 4997715;
        goto LABEL_30;
      case 2:
        char v5 = 0;
        char v10 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 4;
        __darwin_ct_rune_t v11 = 1195460932;
        goto LABEL_26;
      case 3:
        char v5 = 0;
        char v10 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 4;
        __darwin_ct_rune_t v11 = 1397114194;
        goto LABEL_26;
      case 4:
        char v5 = 0;
        char v10 = 0;
        char v6 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 5;
        strcpy((char *)v19, "QMUX1");
        char v7 = 1;
        break;
      case 5:
        char v5 = 0;
        char v10 = 0;
        char v6 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 5;
        strcpy((char *)v19, "QMUX2");
        char v7 = 1;
        break;
      case 6:
        char v5 = 0;
        char v6 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 3;
        __darwin_ct_rune_t v9 = 5066578;
        goto LABEL_30;
      case 7:
        char v5 = 0;
        char v10 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 4;
        __darwin_ct_rune_t v11 = 1414483778;
        goto LABEL_26;
      case 8:
        char v5 = 0;
        char v6 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 3;
        __darwin_ct_rune_t v9 = 4805185;
        goto LABEL_30;
      case 9:
        char v5 = 0;
        char v6 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 3;
        __darwin_ct_rune_t v9 = 5526611;
        goto LABEL_30;
      case 10:
        char v10 = 0;
        char v6 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 2;
        strcpy((char *)v19, "AT");
        char v5 = 1;
        break;
      case 11:
        char v5 = 0;
        char v10 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 4;
        __darwin_ct_rune_t v11 = 1280328769;
        goto LABEL_26;
      case 12:
        char v5 = 0;
        char v10 = 0;
        char v6 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 8;
        strcpy((char *)v19, "MEDIACTL");
        break;
      case 13:
        char v5 = 0;
        char v6 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 3;
        __darwin_ct_rune_t v9 = 5461061;
        goto LABEL_30;
      case 14:
        char v5 = 0;
        char v10 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 4;
        strcpy((char *)v19, "GNSS");
        char v6 = 1;
        break;
      case 15:
        char v5 = 0;
        char v10 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 4;
        __darwin_ct_rune_t v11 = 1397965905;
        goto LABEL_26;
      case 16:
        char v5 = 0;
        char v10 = 0;
        char v6 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 5;
        strcpy((char *)v19, "RCTTH");
        char v7 = 1;
        break;
      case 17:
        char v5 = 0;
        char v6 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 3;
        __darwin_ct_rune_t v9 = 5260097;
        goto LABEL_30;
      case 18:
        char v5 = 0;
        char v10 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 4;
        __darwin_ct_rune_t v11 = 1297040214;
        goto LABEL_26;
      case 19:
        char v5 = 0;
        char v10 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 4;
        __darwin_ct_rune_t v11 = 1129335117;
LABEL_26:
        v19[0] = v11;
        char v6 = 1;
        LOBYTE(v19[1]) = 0;
        break;
      case 20:
        char v5 = 0;
        char v6 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 3;
        __darwin_ct_rune_t v9 = 4999236;
        goto LABEL_30;
      case 21:
        char v5 = 0;
        char v6 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 3;
        __darwin_ct_rune_t v9 = 5789005;
        goto LABEL_30;
      case 22:
        char v5 = 0;
        char v6 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 3;
        __darwin_ct_rune_t v9 = 4407622;
LABEL_30:
        v19[0] = v9;
        char v10 = 1;
        break;
      default:
        char v5 = 0;
        char v10 = 0;
        char v6 = 0;
        char v7 = 0;
        HIBYTE(v19[5]) = 7;
        strcpy((char *)v19, "Unknown");
        char v8 = 1;
        break;
    }
    LOBYTE(v19[0]) = __tolower(SLOBYTE(v19[0]));
    BYTE1(v19[0]) = __tolower(SBYTE1(v19[0]));
    if ((v5 & 1) == 0)
    {
      BYTE2(v19[0]) = __tolower(SBYTE2(v19[0]));
      if ((v10 & 1) == 0)
      {
        HIBYTE(v19[0]) = __tolower(SHIBYTE(v19[0]));
        if ((v6 & 1) == 0)
        {
          LOBYTE(v19[1]) = __tolower(SLOBYTE(v19[1]));
          if ((v7 & 1) == 0)
          {
            BYTE1(v19[1]) = __tolower(SBYTE1(v19[1]));
            BYTE2(v19[1]) = __tolower(SBYTE2(v19[1]));
            if ((v8 & 1) == 0) {
              HIBYTE(v19[1]) = __tolower(SHIBYTE(v19[1]));
            }
          }
        }
      }
    }
    int v12 = operator new(0x28uLL);
    uint64_t v13 = (std::string *)(v12 + 2);
    void *v12 = 0;
    v12[1] = 0;
    if (SHIBYTE(v19[5]) < 0)
    {
      std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)v19, *(std::string::size_type *)&v19[2]);
    }
    else
    {
      *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)v19;
      v12[4] = *(void *)&v19[4];
    }
    uint64_t v14 = *a2;
    void *v12 = *a2;
    v12[1] = a2;
    *(void *)(v14 + 8) = v12;
    *a2 = (uint64_t)v12;
    ++a2[2];
    if (SHIBYTE(v19[5]) < 0) {
      operator delete(*(void **)v19);
    }
  }
  if (v20[2])
  {
    uint64_t v16 = v20[0];
    uint64_t v15 = (void *)v20[1];
    uint64_t v17 = *(void *)v20[1];
    *(void *)(v17 + 8) = *(void *)(v20[0] + 8);
    **(void **)(v16 + 8) = v17;
    v20[2] = 0;
    if (v15 != v20)
    {
      do
      {
        int v18 = (void *)v15[1];
        operator delete(v15);
        uint64_t v15 = v18;
      }
      while (v18 != v20);
    }
  }
}

void sub_248B24778(_Unwind_Exception *a1)
{
  std::list<std::string>::~list(v1);
  _Unwind_Resume(a1);
}

void sub_248B2478C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  uint64_t v17 = v16;
  operator delete(v17);
  if (a14 < 0) {
    operator delete(__p);
  }
  std::list<TCP::Mode>::~list(&a15);
  std::list<std::string>::~list(v15);
  _Unwind_Resume(a1);
}

uint64_t BasebandTransport::asStringLowerCase@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  memset(a2, 170, 24);
  uint64_t result = BasebandTransport::asString(a1, (char *)a2);
  uint64_t v4 = *((unsigned __int8 *)a2 + 23);
  int v5 = (char)v4;
  char v6 = (char *)a2 + v4;
  if (v5 >= 0) {
    char v7 = v6;
  }
  else {
    char v7 = (unsigned char *)(*a2 + a2[1]);
  }
  if (v5 >= 0) {
    char v8 = a2;
  }
  else {
    char v8 = (unsigned char *)*a2;
  }
  for (; v8 != v7; ++v8)
  {
    uint64_t result = __tolower((char)*v8);
    unsigned char *v8 = result;
  }
  return result;
}

void sub_248B248A4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void BasebandTransport::getSupportedProtocolsAsString(BasebandTransport *this@<X0>, void *a2@<X8>)
{
  *a2 = a2;
  a2[1] = a2;
  a2[2] = 0;
  memset(v18, 170, sizeof(v18));
  BasebandTransport::getSupportedProtocols(this, v18);
  BOOL v3 = (uint64_t *)v18[1];
  if ((void *)v18[1] != v18)
  {
    unint64_t v4 = a2[2];
    unint64_t v5 = v4 + 1;
    char v6 = (void *)*a2;
    uint64_t v7 = v18[1];
    do
    {
      char v8 = 8;
      unint64_t v9 = 0x4C5443414944454DLL;
      switch(*(_DWORD *)(v7 + 16))
      {
        case 0:
          unint64_t v9 = v4 & 0xFFFFFFFF00000000 | 0x4C4250;
          char v8 = 3;
          break;
        case 1:
          unint64_t v9 = (v4 & 0xFFFFFFFF00000000 | 0x4C4250) + 3;
          char v8 = 3;
          break;
        case 2:
          uint64_t v10 = 1195460932;
          goto LABEL_25;
        case 3:
          uint64_t v10 = 1397114194;
          goto LABEL_25;
        case 4:
          uint64_t v11 = 0x3158554D51;
          goto LABEL_21;
        case 5:
          uint64_t v11 = 0x3258554D51;
          goto LABEL_21;
        case 6:
          unsigned int v12 = 5066578;
          goto LABEL_29;
        case 7:
          uint64_t v10 = 1414483778;
          goto LABEL_25;
        case 8:
          unsigned int v12 = 4805185;
          goto LABEL_29;
        case 9:
          unsigned int v12 = 5526611;
          goto LABEL_29;
        case 0xA:
          unint64_t v13 = v4 & 0xFFFFFFFFFF000000 | 0x5441;
          char v8 = 2;
          goto LABEL_30;
        case 0xB:
          uint64_t v10 = 1280328769;
          goto LABEL_25;
        case 0xC:
          break;
        case 0xD:
          unsigned int v12 = 5461061;
          goto LABEL_29;
        case 0xE:
          unint64_t v9 = (v4 & 0xFFFFFF0000000000 | 0x53534451) + 2550;
          char v8 = 4;
          break;
        case 0xF:
          unint64_t v9 = v4 & 0xFFFFFF0000000000 | 0x53534451;
          char v8 = 4;
          break;
        case 0x10:
          uint64_t v11 = 0x4854544352;
LABEL_21:
          unint64_t v13 = v4 & 0xFFFF000000000000 | v11 & 0xFFFFFFFFFFFFLL;
          char v8 = 5;
          goto LABEL_30;
        case 0x11:
          unsigned int v12 = 5260097;
          goto LABEL_29;
        case 0x12:
          uint64_t v10 = 1297040214;
          goto LABEL_25;
        case 0x13:
          uint64_t v10 = 1129335117;
LABEL_25:
          unint64_t v13 = v4 & 0xFFFFFF0000000000 | v10 & 0xFFFFFFFFFFLL;
          char v8 = 4;
          goto LABEL_30;
        case 0x14:
          unint64_t v9 = (v4 & 0xFFFFFFFF00000000 | 0x4C4250) + 1524;
          char v8 = 3;
          break;
        case 0x15:
          unsigned int v12 = 5789005;
          goto LABEL_29;
        case 0x16:
          unsigned int v12 = 4407622;
LABEL_29:
          unint64_t v13 = v4 & 0xFFFFFFFF00000000 | v12;
          char v8 = 3;
LABEL_30:
          unint64_t v9 = v13;
          break;
        default:
          char v8 = 7;
          unint64_t v9 = 0x6E776F6E6B6E55;
          break;
      }
      uint64_t v14 = operator new(0x28uLL);
      v14[2] = v9;
      v14[3] = 0;
      *((unsigned char *)v14 + 39) = v8;
      void *v14 = v6;
      v14[1] = a2;
      v6[1] = v14;
      *a2 = v14;
      a2[2] = v5;
      uint64_t v7 = *(void *)(v7 + 8);
      ++v5;
      unint64_t v4 = v9;
      char v6 = v14;
    }
    while ((void *)v7 != v18);
  }
  if (v18[2])
  {
    uint64_t v15 = v18[0];
    uint64_t v16 = *v3;
    *(void *)(v16 + 8) = *(void *)(v18[0] + 8);
    **(void **)(v15 + 8) = v16;
    v18[2] = 0;
    if (v3 != v18)
    {
      do
      {
        uint64_t v17 = (uint64_t *)v3[1];
        operator delete(v3);
        BOOL v3 = v17;
      }
      while (v17 != v18);
    }
  }
}

void sub_248B24B80(_Unwind_Exception *a1)
{
  std::list<std::string>::~list(v1);
  _Unwind_Resume(a1);
}

void sub_248B24B94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::list<TCP::Mode>::~list((uint64_t *)va);
  std::list<std::string>::~list(v2);
  _Unwind_Resume(a1);
}

uint64_t BasebandTransport::asString@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  switch((int)result)
  {
    case 0:
      a2[23] = 3;
      *(_DWORD *)a2 = 4997712;
      break;
    case 1:
      a2[23] = 3;
      *(_DWORD *)a2 = 4997715;
      break;
    case 2:
      a2[23] = 4;
      strcpy(a2, "DIAG");
      break;
    case 3:
      a2[23] = 4;
      strcpy(a2, "REFS");
      break;
    case 4:
      a2[23] = 5;
      strcpy(a2, "QMUX1");
      break;
    case 5:
      a2[23] = 5;
      strcpy(a2, "QMUX2");
      break;
    case 6:
      a2[23] = 3;
      *(_DWORD *)a2 = 5066578;
      break;
    case 7:
      a2[23] = 4;
      strcpy(a2, "BOOT");
      break;
    case 8:
      a2[23] = 3;
      *(_DWORD *)a2 = 4805185;
      break;
    case 9:
      a2[23] = 3;
      *(_DWORD *)a2 = 5526611;
      break;
    case 10:
      a2[23] = 2;
      strcpy(a2, "AT");
      break;
    case 11:
      a2[23] = 4;
      strcpy(a2, "ADPL");
      break;
    case 12:
      a2[23] = 8;
      strcpy(a2, "MEDIACTL");
      break;
    case 13:
      a2[23] = 3;
      *(_DWORD *)a2 = 5461061;
      break;
    case 14:
      a2[23] = 4;
      strcpy(a2, "GNSS");
      break;
    case 15:
      a2[23] = 4;
      strcpy(a2, "QDSS");
      break;
    case 16:
      a2[23] = 5;
      strcpy(a2, "RCTTH");
      break;
    case 17:
      a2[23] = 3;
      *(_DWORD *)a2 = 5260097;
      break;
    case 18:
      a2[23] = 4;
      strcpy(a2, "VCOM");
      break;
    case 19:
      a2[23] = 4;
      strcpy(a2, "MIPC");
      break;
    case 20:
      a2[23] = 3;
      *(_DWORD *)a2 = 4999236;
      break;
    case 21:
      a2[23] = 3;
      *(_DWORD *)a2 = 5789005;
      break;
    case 22:
      a2[23] = 3;
      *(_DWORD *)a2 = 4407622;
      break;
    default:
      a2[23] = 7;
      strcpy(a2, "Unknown");
      break;
  }
  return result;
}

{
  switch((int)result)
  {
    case 0:
      a2[23] = 8;
      strcpy(a2, "NotReady");
      break;
    case 1:
      a2[23] = 5;
      strcpy(a2, "Ready");
      break;
    case 2:
      a2[23] = 5;
      strcpy(a2, "Error");
      break;
    case 3:
      a2[23] = 7;
      strcpy(a2, "Stalled");
      break;
    default:
      a2[23] = 7;
      strcpy(a2, "Unknown");
      break;
  }
  return result;
}

uint64_t BasebandTransport::asProtocol(char *__s1)
{
  uint64_t v1 = __s1;
  if ((__s1[23] & 0x80000000) == 0)
  {
    uint64_t result = strcmp(__s1, "PBL");
    if (!result) {
      return result;
    }
    if (!strcmp(v1, "SBL")) {
      return 1;
    }
    if (strcasecmp(v1, "DIAG"))
    {
      if (strcasecmp(v1, "REFS"))
      {
        if (strcasecmp(v1, "QMUX1"))
        {
          if (strcasecmp(v1, "QMUX2"))
          {
            if (strcasecmp(v1, "ROM"))
            {
              if (strcasecmp(v1, "BOOT"))
              {
                if (strcasecmp(v1, "ARI"))
                {
                  if (strcasecmp(v1, "STT"))
                  {
                    if (strcasecmp(v1, "AT"))
                    {
                      if (strcasecmp(v1, "ADPL"))
                      {
                        if (strcasecmp(v1, "MEDIACTL"))
                        {
                          if (strcasecmp(v1, "ETS"))
                          {
                            if (strcasecmp(v1, "GNSS"))
                            {
                              if (strcasecmp(v1, "QDSS"))
                              {
                                if (strcasecmp(v1, "RCTTH"))
                                {
                                  if (strcasecmp(v1, "ACP"))
                                  {
                                    if (strcasecmp(v1, "VCOM"))
                                    {
                                      if (strcasecmp(v1, "MIPC"))
                                      {
                                        if (strcasecmp(v1, "DHL"))
                                        {
                                          if (strcasecmp(v1, "MUX")) {
                                            goto LABEL_24;
                                          }
                                          return 21;
                                        }
                                        return 20;
                                      }
                                      return 19;
                                    }
                                    return 18;
                                  }
                                  return 17;
                                }
                                return 16;
                              }
                              return 15;
                            }
                            return 14;
                          }
                          return 13;
                        }
                        return 12;
                      }
                      return 11;
                    }
                    return 10;
                  }
                  return 9;
                }
                return 8;
              }
              return 7;
            }
            return 6;
          }
          return 5;
        }
        return 4;
      }
      return 3;
    }
    return 2;
  }
  uint64_t v1 = *(const char **)__s1;
  uint64_t result = strcmp(*(const char **)__s1, "PBL");
  if (!result) {
    return result;
  }
  if (!strcmp(v1, "SBL")) {
    return 1;
  }
  if (!strcasecmp(v1, "DIAG")) {
    return 2;
  }
  if (!strcasecmp(v1, "REFS")) {
    return 3;
  }
  if (!strcasecmp(v1, "QMUX1")) {
    return 4;
  }
  if (!strcasecmp(v1, "QMUX2")) {
    return 5;
  }
  if (!strcasecmp(v1, "ROM")) {
    return 6;
  }
  if (!strcasecmp(v1, "BOOT")) {
    return 7;
  }
  if (!strcasecmp(v1, "ARI")) {
    return 8;
  }
  if (!strcasecmp(v1, "STT")) {
    return 9;
  }
  if (!strcasecmp(v1, "AT")) {
    return 10;
  }
  if (!strcasecmp(v1, "ADPL")) {
    return 11;
  }
  if (!strcasecmp(v1, "MEDIACTL")) {
    return 12;
  }
  if (!strcasecmp(v1, "ETS")) {
    return 13;
  }
  if (!strcasecmp(v1, "GNSS")) {
    return 14;
  }
  if (!strcasecmp(v1, "QDSS")) {
    return 15;
  }
  if (!strcasecmp(v1, "RCTTH")) {
    return 16;
  }
  if (!strcasecmp(v1, "ACP")) {
    return 17;
  }
  if (!strcasecmp(v1, "VCOM")) {
    return 18;
  }
  if (!strcasecmp(v1, "MIPC")) {
    return 19;
  }
  if (!strcasecmp(v1, "DHL")) {
    return 20;
  }
  if (!strcasecmp(v1, "MUX")) {
    return 21;
  }
LABEL_24:
  if (!strcasecmp(v1, "FAC")) {
    return 22;
  }
  else {
    return 23;
  }
}

uint64_t BasebandTransport::getDefaultTransportIOReadSize(capabilities::abs *a1)
{
  if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize(a1)) {
    return 0x4000;
  }
  else {
    return 0x8000;
  }
}

uint64_t BasebandTransport::getDefaultTransportIOReadCount(capabilities::abs *a1)
{
  int v1 = (int)a1;
  char shouldUseMinBasebandTransportIOReadCount = capabilities::abs::shouldUseMinBasebandTransportIOReadCount(a1);
  if (v1 == 15) {
    int v3 = 36;
  }
  else {
    int v3 = 4;
  }
  if (v1 == 16) {
    int v4 = 36;
  }
  else {
    int v4 = v3;
  }
  if (v1 == 2) {
    unsigned int v5 = 16;
  }
  else {
    unsigned int v5 = v4;
  }
  if (shouldUseMinBasebandTransportIOReadCount) {
    return 4;
  }
  else {
    return v5;
  }
}

double BasebandTransport::Status::Status(BasebandTransport::Status *this)
{
  *(_DWORD *)this = 0;
  *((unsigned char *)this + 4) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(_DWORD *)this = 0;
  *((unsigned char *)this + 4) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

double BasebandTransport::Status::init(BasebandTransport::Status *this)
{
  *(_DWORD *)this = 0;
  *((unsigned char *)this + 4) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

uint64_t BasebandTransport::Status::toString(BasebandTransport::Status *this)
{
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v23[7] = v2;
  v23[8] = v2;
  v23[5] = v2;
  v23[6] = v2;
  v23[3] = v2;
  v23[4] = v2;
  v23[1] = v2;
  v23[2] = v2;
  long long v22 = v2;
  v23[0] = v2;
  *(_OWORD *)uint64_t v20 = v2;
  long long v21 = v2;
  v19[2] = v2;
  void v19[3] = v2;
  v19[0] = v2;
  v19[1] = v2;
  long long v18 = v2;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v18);
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"State: ", 7);
  switch(*(_DWORD *)this)
  {
    case 0:
      uint64_t v4 = 8;
      char v17 = 8;
      strcpy((char *)__p, "NotReady");
      break;
    case 1:
      uint64_t v4 = 5;
      char v17 = 5;
      strcpy((char *)__p, "Ready");
      break;
    case 2:
      uint64_t v4 = 5;
      char v17 = 5;
      strcpy((char *)__p, "Error");
      break;
    case 3:
      uint64_t v4 = 7;
      char v17 = 7;
      LODWORD(__p[0]) = 1818326099;
      int v5 = 1684368492;
      goto LABEL_7;
    default:
      uint64_t v4 = 7;
      char v17 = 7;
      LODWORD(__p[0]) = 1852534357;
      int v5 = 1853321070;
LABEL_7:
      *(_DWORD *)((char *)__p + 3) = v5;
      HIBYTE(__p[0]) = 0;
      break;
  }
  char v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)__p, v4);
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", ", 2);
  char v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Async: ", 7);
  *(_DWORD *)((char *)v8 + *(void *)(*v8 - 24) + 8) |= 1u;
  unint64_t v9 = (void *)std::ostream::operator<<();
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Total Rx: ", 10);
  uint64_t v11 = (void *)std::ostream::operator<<();
  unsigned int v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" KB, ", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Total Tx: ", 10);
  unint64_t v13 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" KB", 3);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str();
  *(void *)&long long v18 = *MEMORY[0x263F8C2B8];
  uint64_t v14 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)&v19[-1] + *(void *)(v18 - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  *(void *)&v19[0] = v14;
  *((void *)&v19[0] + 1) = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v21) < 0) {
    operator delete(v20[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x24C58B5B0](v23);
}

void sub_248B25858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_248B2586C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t BasebandTransport::Parameters::toString(BasebandTransport::Parameters *this)
{
  unint64_t v27 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v26[7] = v2;
  v26[8] = v2;
  v26[5] = v2;
  v26[6] = v2;
  v26[3] = v2;
  v26[4] = v2;
  v26[1] = v2;
  v26[2] = v2;
  long long v25 = v2;
  v26[0] = v2;
  *(_OWORD *)std::string __p = v2;
  long long v24 = v2;
  v22[2] = v2;
  v22[3] = v2;
  v22[0] = v2;
  v22[1] = v2;
  long long v21 = v2;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v21);
  switch(*(_DWORD *)this)
  {
    case 0:
      char v18 = 3;
      strcpy((char *)v17, "PBL");
      break;
    case 1:
      char v18 = 3;
      strcpy((char *)v17, "SBL");
      break;
    case 2:
      char v18 = 4;
      int v3 = 1195460932;
      goto LABEL_23;
    case 3:
      char v18 = 4;
      int v3 = 1397114194;
      goto LABEL_23;
    case 4:
      char v18 = 5;
      strcpy((char *)v17, "QMUX1");
      break;
    case 5:
      char v18 = 5;
      strcpy((char *)v17, "QMUX2");
      break;
    case 6:
      char v18 = 3;
      strcpy((char *)v17, "ROM");
      break;
    case 7:
      char v18 = 4;
      int v3 = 1414483778;
      goto LABEL_23;
    case 8:
      char v18 = 3;
      strcpy((char *)v17, "ARI");
      break;
    case 9:
      char v18 = 3;
      strcpy((char *)v17, "STT");
      break;
    case 0xA:
      char v18 = 2;
      strcpy((char *)v17, "AT");
      break;
    case 0xB:
      char v18 = 4;
      int v3 = 1280328769;
      goto LABEL_23;
    case 0xC:
      char v18 = 8;
      strcpy((char *)v17, "MEDIACTL");
      break;
    case 0xD:
      char v18 = 3;
      strcpy((char *)v17, "ETS");
      break;
    case 0xE:
      char v18 = 4;
      int v3 = 1397968455;
      goto LABEL_23;
    case 0xF:
      char v18 = 4;
      int v3 = 1397965905;
      goto LABEL_23;
    case 0x10:
      char v18 = 5;
      strcpy((char *)v17, "RCTTH");
      break;
    case 0x11:
      char v18 = 3;
      strcpy((char *)v17, "ACP");
      break;
    case 0x12:
      char v18 = 4;
      int v3 = 1297040214;
      goto LABEL_23;
    case 0x13:
      char v18 = 4;
      int v3 = 1129335117;
LABEL_23:
      LODWORD(v17[0]) = v3;
      BYTE4(v17[0]) = 0;
      break;
    case 0x14:
      char v18 = 3;
      strcpy((char *)v17, "DHL");
      break;
    case 0x15:
      char v18 = 3;
      strcpy((char *)v17, "MUX");
      break;
    case 0x16:
      char v18 = 3;
      strcpy((char *)v17, "FAC");
      break;
    default:
      char v18 = 7;
      strcpy((char *)v17, "Unknown");
      break;
  }
  std::operator+<char>();
  if ((v20 & 0x80u) == 0) {
    uint64_t v4 = v19;
  }
  else {
    uint64_t v4 = (void **)v19[0];
  }
  if ((v20 & 0x80u) == 0) {
    uint64_t v5 = v20;
  }
  else {
    uint64_t v5 = (uint64_t)v19[1];
  }
  char v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v4, v5);
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", ", 2);
  char v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Powersave: ", 11);
  *(_DWORD *)((char *)v8 + *(void *)(*v8 - 24) + 8) |= 1u;
  unint64_t v9 = (void *)std::ostream::operator<<();
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Create Timeout: ", 16);
  uint64_t v11 = (void *)std::ostream::operator<<();
  unsigned int v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" sec, ", 6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"IO Size: ", 9);
  unint64_t v13 = (void *)std::ostream::operator<<();
  uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" KB, ", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Num Pending Reads: ", 19);
  std::ostream::operator<<();
  if ((char)v20 < 0)
  {
    operator delete(v19[0]);
    if ((v18 & 0x80000000) == 0) {
      goto LABEL_32;
    }
  }
  else if ((v18 & 0x80000000) == 0)
  {
    goto LABEL_32;
  }
  operator delete(v17[0]);
LABEL_32:
  std::stringbuf::str();
  *(void *)&long long v21 = *MEMORY[0x263F8C2B8];
  uint64_t v15 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)&v22[-1] + *(void *)(v21 - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  *(void *)&v22[0] = v15;
  *((void *)&v22[0] + 1) = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v24) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x24C58B5B0](v26);
}

void sub_248B25EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_248B25EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if ((a14 & 0x80000000) == 0)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t BasebandTransport::BasebandTransport(uint64_t a1, void *a2, NSObject **a3)
{
  *(void *)a1 = &unk_26FCC8200;
  {
    std::string::basic_string[abi:ne180100]<0>(&BasebandTransport::getName(void)::kName, "ipc.bb");
  }
  {
    std::string::basic_string[abi:ne180100]<0>(&BasebandTransport::getName(void)::kName, "ipc.bb");
  }
  if (byte_269339F07 >= 0) {
    char v6 = (const char *)&BasebandTransport::getName(void)::kName;
  }
  else {
    char v6 = (const char *)BasebandTransport::getName(void)::kName;
  }
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v17, "com.apple.telephony.abm", v6);
  if (byte_269339F07 >= 0) {
    uint64_t v7 = (const char *)&BasebandTransport::getName(void)::kName;
  }
  else {
    uint64_t v7 = (const char *)BasebandTransport::getName(void)::kName;
  }
  char v8 = dispatch_queue_create(v7, 0);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = v8;
  if (v8)
  {
    unint64_t v9 = v8;
    dispatch_retain(v8);
    *(void *)(a1 + 96) = 0;
    dispatch_release(v9);
  }
  else
  {
    *(void *)(a1 + 96) = 0;
  }
  *(void *)a1 = &unk_26FCC84C8;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v19);
  *(void *)(a1 + 8) = &unk_26FCC7378;
  *(void *)(a1 + 56) = *a2;
  uint64_t v10 = a2[1];
  *(void *)(a1 + 64) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v18);
  *(void *)a1 = &unk_26FCC85C0;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v17);
  *(void *)a1 = &unk_26FCC8200;
  *(_DWORD *)(a1 + 104) = 23;
  *(unsigned char *)(a1 + 108) = 0;
  *(void *)(a1 + 112) = 10;
  shouldUseMinBasebandTransportIOReadSize = (capabilities::abs *)capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v11);
  if (shouldUseMinBasebandTransportIOReadSize) {
    int v13 = 0x4000;
  }
  else {
    int v13 = 0x8000;
  }
  *(_DWORD *)(a1 + 120) = v13;
  capabilities::abs::shouldUseMinBasebandTransportIOReadCount(shouldUseMinBasebandTransportIOReadSize);
  *(_DWORD *)(a1 + 124) = 4;
  *(void *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  uint64_t v14 = *a3;
  *(void *)(a1 + 152) = *a3;
  if (v14) {
    dispatch_retain(v14);
  }
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  uint64_t Controller = TelephonyBasebandCreateController();
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 264) = Controller;
  *(void *)(a1 + 285) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 320) = dispatch_group_create();
  *(_DWORD *)(a1 + 328) = 0;
  *(unsigned char *)(a1 + 332) = 0;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(void *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(void *)(a1 + 365) = 0;
  return a1;
}

void sub_248B26270(_Unwind_Exception *a1)
{
}

void sub_248B26288(_Unwind_Exception *a1)
{
}

void sub_248B262A0(_Unwind_Exception *a1)
{
  uint64_t v4 = (const void *)v1[21];
  if (v4) {
    _Block_release(v4);
  }
  if (*v2) {
    _Block_release(*v2);
  }
  uint64_t v5 = v1[19];
  if (v5) {
    dispatch_release(v5);
  }
  char v6 = (const void *)v1[18];
  if (v6) {
    _Block_release(v6);
  }
  ctu::SharedLoggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v1);
  _Unwind_Resume(a1);
}

long long *BasebandTransport::getName(BasebandTransport *this)
{
  {
    return &BasebandTransport::getName(void)::kName;
  }
  std::string::basic_string[abi:ne180100]<0>(&BasebandTransport::getName(void)::kName, "ipc.bb");
  return &BasebandTransport::getName(void)::kName;
}

void sub_248B2639C(_Unwind_Exception *a1)
{
}

void *ctu::SharedLoggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_26FCC84C8;
  MEMORY[0x24C58AF50](a1 + 1);
  long long v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  int v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_26FCC84C8;
  MEMORY[0x24C58AF50](a1 + 1);
  long long v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  int v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void BasebandTransport::~BasebandTransport(BasebandTransport *this)
{
  *(void *)this = &unk_26FCC8200;
  BasebandTransport::timerOff_sync(this);
  (*(void (**)(BasebandTransport *))(*(void *)this + 80))(this);
  long long v2 = (const void *)*((void *)this + 33);
  if (v2)
  {
    CFRelease(v2);
    *((void *)this + 33) = 0;
  }
  int v3 = (void *)*((void *)this + 37);
  if (v3)
  {
    operator delete[](v3);
    *((void *)this + 37) = 0;
  }
  uint64_t v4 = *((void *)this + 40);
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = *((void *)this + 39);
  if (v5) {
    dispatch_release(v5);
  }
  char v6 = (const void *)*((void *)this + 34);
  if (v6) {
    _Block_release(v6);
  }
  uint64_t v7 = (const void *)*((void *)this + 21);
  if (v7) {
    _Block_release(v7);
  }
  char v8 = (const void *)*((void *)this + 20);
  if (v8) {
    _Block_release(v8);
  }
  unint64_t v9 = *((void *)this + 19);
  if (v9) {
    dispatch_release(v9);
  }
  uint64_t v10 = (const void *)*((void *)this + 18);
  if (v10) {
    _Block_release(v10);
  }
  *(void *)this = &unk_26FCC84C8;
  MEMORY[0x24C58AF50]((char *)this + 8);
  uint64_t v11 = *((void *)this + 12);
  if (v11) {
    dispatch_release(v11);
  }
  unsigned int v12 = *((void *)this + 11);
  if (v12) {
    dispatch_release(v12);
  }
  int v13 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
}

{
  void *v1;
  uint64_t vars8;

  BasebandTransport::~BasebandTransport(this);
  operator delete(v1);
}

NSObject *BasebandTransport::timerOff_sync(BasebandTransport *this)
{
  double result = *((void *)this + 35);
  if (result)
  {
    dispatch_source_cancel(result);
    dispatch_release(*((dispatch_object_t *)this + 35));
    *((void *)this + 35) = 0;
    int v3 = (char *)this + 8;
    uint64_t v4 = *((void *)this + 5);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v6[0]) = 0;
      _os_log_impl(&dword_248AFD000, v4, OS_LOG_TYPE_DEFAULT, "#I Status report disabled", (uint8_t *)v6, 2u);
    }
    double result = (**(uint64_t (***)(char *, uint64_t))v3)(v3, 40);
    if (result)
    {
      ctu::LogMessageBuffer::createWithFormat(v6, (ctu::LogMessageBuffer *)"Status report disabled", v5);
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
      return MEMORY[0x24C58AFD0](v6);
    }
  }
  return result;
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    char v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    char v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void BasebandTransport::create(NSObject **a1@<X0>, uint64_t a2@<X8>)
{
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZL14sLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_107;
  block[4] = &qword_269339EC0;
  if (_MergedGlobals_0 == -1)
  {
    size_t v4 = *(std::__shared_weak_count **)algn_269339EC8;
    uint64_t v7 = qword_269339EC0;
    uint64_t v8 = *(void *)algn_269339EC8;
    if (!*(void *)algn_269339EC8) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  dispatch_once(&_MergedGlobals_0, block);
  size_t v4 = *(std::__shared_weak_count **)algn_269339EC8;
  uint64_t v7 = qword_269339EC0;
  uint64_t v8 = *(void *)algn_269339EC8;
  if (*(void *)algn_269339EC8) {
LABEL_3:
  }
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_4:
  size_t v5 = *a1;
  char v6 = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  BasebandTransport::create((capabilities::radio *)&v7, &v6, a2);
  if (v5) {
    dispatch_release(v5);
  }
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_248B26888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (v10) {
    dispatch_release(v10);
  }
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void BasebandTransport::create(capabilities::radio *a1@<X0>, NSObject **a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  int v6 = capabilities::radio::vendor(a1);
  if (v6 != 1)
  {
    if (v6 != 2)
    {
      if (v6 != 3) {
        return;
      }
      uint64_t v7 = (std::__shared_weak_count_vtbl *)operator new(0x198uLL);
      uint64_t v8 = (std::__shared_weak_count *)*((void *)a1 + 1);
      uint64_t v33 = *(void *)a1;
      std::string v34 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v9 = *a2;
      uint64_t v32 = v9;
      if (v9) {
        dispatch_retain(v9);
      }
      BasebandTransport::BasebandTransport((uint64_t)v7, &v33, &v32);
      uint64_t v41 = &v7->~__shared_weak_count;
      unint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
      uint64_t v10 = (std::__shared_weak_count *)operator new(0x20uLL);
      v10->__shared_owners_ = 0;
      p_shared_owners = &v10->__shared_owners_;
      v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FCC86A0;
      v10->__shared_weak_owners_ = 0;
      v10[1].__vftable = v7;
      unint64_t v42 = (unint64_t)v10;
      unsigned int v12 = (std::__shared_weak_count *)v7[2].~__shared_weak_count;
      if (v12)
      {
        if (v12->__shared_owners_ != -1
          || (atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed),
              atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed),
              v7[1].__on_zero_shared_weaunint64_t k = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7,
              v7[2].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10,
              std::__shared_weak_count::__release_weak(v12),
              atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)))
        {
LABEL_42:
          uint64_t v30 = (uint64_t)v41;
          ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync((uint64_t)v41);
          unint64_t v31 = v42;
          uint64_t v41 = 0;
          unint64_t v42 = 0;
          *(void *)a3 = v30;
          *(void *)(a3 + 8) = v31;
          if (v9) {
            dispatch_release(v9);
          }
          unint64_t v27 = v34;
          if (!v34) {
            goto LABEL_47;
          }
          goto LABEL_45;
        }
      }
      else
      {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        v7[1].__on_zero_shared_weaunint64_t k = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
        v7[2].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10;
        if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
          goto LABEL_42;
        }
      }
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      goto LABEL_42;
    }
    int v13 = (BasebandTransportICE *)operator new(0x208uLL);
    uint64_t v14 = (std::__shared_weak_count *)*((void *)a1 + 1);
    uint64_t v36 = *(void *)a1;
    BOOL v37 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v15 = *a2;
    dispatch_object_t object = v15;
    if (v15) {
      dispatch_retain(v15);
    }
    BasebandTransportICE::BasebandTransportICE(v13, &v36, &object);
    uint64_t v41 = v13;
    unint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v16 = (std::__shared_weak_count *)operator new(0x20uLL);
    v16->__shared_owners_ = 0;
    char v17 = &v16->__shared_owners_;
    v16->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FCC8650;
    v16->__shared_weak_owners_ = 0;
    v16[1].__vftable = (std::__shared_weak_count_vtbl *)v13;
    unint64_t v42 = (unint64_t)v16;
    char v18 = (std::__shared_weak_count *)*((void *)v13 + 10);
    if (v18)
    {
      if (v18->__shared_owners_ != -1
        || (atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed),
            atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed),
            *((void *)v13 + 9) = v13,
            *((void *)v13 + 10) = v16,
            std::__shared_weak_count::__release_weak(v18),
            atomic_fetch_add(v17, 0xFFFFFFFFFFFFFFFFLL)))
      {
LABEL_30:
        uint64_t v25 = (uint64_t)v41;
        ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync((uint64_t)v41);
        unint64_t v26 = v42;
        uint64_t v41 = 0;
        unint64_t v42 = 0;
        *(void *)a3 = v25;
        *(void *)(a3 + 8) = v26;
        if (object) {
          dispatch_release(object);
        }
        unint64_t v27 = v37;
        if (!v37) {
          goto LABEL_47;
        }
        goto LABEL_45;
      }
    }
    else
    {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *((void *)v13 + 9) = v13;
      *((void *)v13 + 10) = v16;
      if (atomic_fetch_add(v17, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_30;
      }
    }
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    goto LABEL_30;
  }
  uint64_t v19 = (std::__shared_weak_count_vtbl *)operator new(0x198uLL);
  unsigned __int8 v20 = (std::__shared_weak_count *)*((void *)a1 + 1);
  uint64_t v39 = *(void *)a1;
  uint64_t v40 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v21 = *a2;
  dispatch_object_t v38 = v21;
  if (v21) {
    dispatch_retain(v21);
  }
  BasebandTransportMAV::BasebandTransportMAV(v19, &v39, &v38);
  uint64_t v41 = &v19->~__shared_weak_count;
  unint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
  long long v22 = (std::__shared_weak_count *)operator new(0x20uLL);
  v22->__shared_owners_ = 0;
  uint64_t v23 = &v22->__shared_owners_;
  v22->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FCC8600;
  v22->__shared_weak_owners_ = 0;
  v22[1].__vftable = v19;
  unint64_t v42 = (unint64_t)v22;
  long long v24 = (std::__shared_weak_count *)v19[2].~__shared_weak_count;
  if (!v24)
  {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v19[1].__on_zero_shared_weaunint64_t k = (void (__cdecl *)(std::__shared_weak_count *__hidden))v19;
    v19[2].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v22;
    if (atomic_fetch_add(v23, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (v24->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v19[1].__on_zero_shared_weaunint64_t k = (void (__cdecl *)(std::__shared_weak_count *__hidden))v19;
    v19[2].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v22;
    std::__shared_weak_count::__release_weak(v24);
    if (!atomic_fetch_add(v23, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_35:
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
LABEL_36:
  uint64_t v28 = (uint64_t)v41;
  ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync((uint64_t)v41);
  unint64_t v29 = v42;
  uint64_t v41 = 0;
  unint64_t v42 = 0;
  *(void *)a3 = v28;
  *(void *)(a3 + 8) = v29;
  if (v38) {
    dispatch_release(v38);
  }
  unint64_t v27 = v40;
  if (!v40) {
    goto LABEL_47;
  }
LABEL_45:
  if (!atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
LABEL_47:
  BasebandTransport::init(*(BasebandTransport **)a3);
}

void sub_248B26D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, dispatch_object_t a13, char a14, uint64_t a15, dispatch_object_t object, char a17)
{
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v19 - 64);
  if (v18) {
    dispatch_release(v18);
  }
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v17);
  _Unwind_Resume(a1);
}

void BasebandTransport::init(BasebandTransport *this)
{
  uint64_t v5 = *((void *)this + 9);
  int v3 = (std::__shared_weak_count *)*((void *)this + 10);
  size_t v4 = (char *)this + 72;
  if (!v3 || (int v6 = std::__shared_weak_count::lock(v3)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 1174405120;
  v11[2] = ___ZN17BasebandTransport4initEv_block_invoke;
  v11[3] = &__block_descriptor_tmp_53;
  v11[4] = this;
  v11[5] = v5;
  unsigned int v12 = v7;
  int v13 = v11;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_117;
  block[4] = v4;
  void block[5] = &v13;
  unint64_t v9 = *((void *)this + 11);
  if (!*((void *)this + 12))
  {
    dispatch_sync(v9, block);
    uint64_t v10 = v12;
    if (!v12) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  dispatch_async_and_wait(v9, block);
  uint64_t v10 = v12;
  if (v12) {
LABEL_7:
  }
    std::__shared_weak_count::__release_weak(v10);
LABEL_8:
  std::__shared_weak_count::__release_weak(v7);
}

void ___ZN17BasebandTransport4initEv_block_invoke(capabilities::ipc *a1)
{
  uint64_t v2 = *((void *)a1 + 4);
  if (capabilities::ipc::supportsPCI(a1))
  {
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN17BasebandTransport4initEv_block_invoke_2;
    aBlock[3] = &__block_descriptor_tmp_5;
    uint64_t v4 = *((void *)a1 + 5);
    int v3 = (std::__shared_weak_count *)*((void *)a1 + 6);
    aBlock[4] = v2;
    void aBlock[5] = v4;
    uint64_t v14 = v3;
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v5 = _Block_copy(aBlock);
    int v6 = *(const void **)(v2 + 160);
    *(void *)(v2 + 160) = v5;
    if (v6) {
      _Block_release(v6);
    }
    v11[0] = MEMORY[0x263EF8330];
    v11[1] = 1174405120;
    v11[2] = ___ZN17BasebandTransport4initEv_block_invoke_44;
    v11[3] = &__block_descriptor_tmp_49;
    uint64_t v8 = *((void *)a1 + 5);
    uint64_t v7 = (std::__shared_weak_count *)*((void *)a1 + 6);
    v11[4] = v2;
    v11[5] = v8;
    unsigned int v12 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v9 = _Block_copy(v11);
    uint64_t v10 = *(const void **)(v2 + 168);
    *(void *)(v2 + 168) = v9;
    if (v10) {
      _Block_release(v10);
    }
    if (v12) {
      std::__shared_weak_count::__release_weak(v12);
    }
    if (v14) {
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void ___ZN17BasebandTransport4initEv_block_invoke_2(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    uint64_t v9 = a1[4];
    uint64_t v10 = std::__shared_weak_count::lock(v5);
    if (v10)
    {
      uint64_t v11 = v10;
      if (a1[5])
      {
        unsigned int v12 = *(NSObject **)(v9 + 40);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)fd_set buf = 67109632;
          *(_DWORD *)&uint8_t buf[4] = a2;
          *(_WORD *)&buf[8] = 2048;
          *(void *)&buf[10] = a3;
          *(_WORD *)&unsigned char buf[18] = 2048;
          *(void *)&buf[20] = a4;
          _os_log_error_impl(&dword_248AFD000, v12, OS_LOG_TYPE_ERROR, "PCI Transport Status: 0x%x (0x%08lx, 0x%08lx)", buf, 0x1Cu);
        }
        if ((**(unsigned int (***)(uint64_t, uint64_t))(v9 + 8))(v9 + 8, 80))
        {
          ctu::LogMessageBuffer::createWithFormat((uint64_t *)buf, (ctu::LogMessageBuffer *)"PCI Transport Status: 0x%x (0x%08lx, 0x%08lx)", v13, a2, a3, a4);
          ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
          MEMORY[0x24C58AFD0](buf);
        }
        *(_DWORD *)(v9 + 328) = 2 * (a2 != 0);
        *(int64x2_t *)(v9 + 352) = vsubq_s64(*(int64x2_t *)(v9 + 336), *(int64x2_t *)(v9 + 376));
        uint64_t v14 = *(const void **)(v9 + 272);
        if (v14)
        {
          uint64_t v15 = _Block_copy(v14);
          uint64_t v16 = v15;
          long long v17 = *(_OWORD *)(v9 + 344);
          *(_OWORD *)fd_set buf = *(_OWORD *)(v9 + 328);
          *(_OWORD *)&uint8_t buf[16] = v17;
          uint64_t v23 = *(void *)(v9 + 360);
          char v18 = *(NSObject **)(v9 + 152);
          if (v15) {
            uint64_t v19 = _Block_copy(v15);
          }
          else {
            uint64_t v19 = 0;
          }
          unsigned __int8 v20 = (char *)operator new(0x30uLL);
          *(void *)unsigned __int8 v20 = v19;
          long long v21 = *(_OWORD *)&buf[16];
          *(_OWORD *)(v20 + 8) = *(_OWORD *)buf;
          *(_OWORD *)(v20 + 24) = v21;
          *((void *)v20 + 5) = v23;
          dispatch_async_f(v18, v20, (dispatch_function_t)_ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb0_E3__0EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_);
          if (v16) {
            _Block_release(v16);
          }
        }
      }
      if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
}

void sub_248B273D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

int64x2_t BasebandTransport::updateDeltas_sync(BasebandTransport *this)
{
  int64x2_t result = vsubq_s64(*((int64x2_t *)this + 21), *(int64x2_t *)((char *)this + 376));
  *((int64x2_t *)this + 22) = result;
  return result;
}

uint64_t __copy_helper_block_e8_40c42_ZTSNSt3__18weak_ptrI17BasebandTransportEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c42_ZTSNSt3__18weak_ptrI17BasebandTransportEE(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN17BasebandTransport4initEv_block_invoke_44(void *a1, uint64_t a2, void *a3, unsigned int a4)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v6 = a1[4];
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v7 = (std::__shared_weak_count *)a1[6];
  if (v7 && (v33 = std::__shared_weak_count::lock(v7)) != 0 && (uint64_t v10 = a1[5], (v32 = v10) != 0))
  {
    uint64_t v11 = *(NSObject **)(v10 + 320);
    if (v11)
    {
      dispatch_retain(*(dispatch_object_t *)(v10 + 320));
      dispatch_group_enter(v11);
    }
    if (a2)
    {
      unsigned int v12 = *(NSObject **)(v6 + 40);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)fd_set buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = a2;
        _os_log_debug_impl(&dword_248AFD000, v12, OS_LOG_TYPE_DEBUG, "#D Async read error 0x%08x", buf, 8u);
      }
      if ((**(unsigned int (***)(uint64_t, uint64_t))(v6 + 8))(v6 + 8, 20))
      {
        ctu::LogMessageBuffer::createWithFormat((uint64_t *)buf, (ctu::LogMessageBuffer *)"Async read error 0x%08x", v13, a2);
        ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
        MEMORY[0x24C58AFD0](buf);
      }
    }
    else
    {
      *(void *)(v6 + 336) += a4;
      uint64_t v14 = *(const void **)(v6 + 144);
      if (v14)
      {
        uint64_t v15 = _Block_copy(v14);
        uint64_t v16 = *(void *)(v6 + 128);
        if (v16)
        {
          std::string __p = 0;
          uint64_t v30 = 0;
          uint64_t v31 = 0;
          (*(void (**)(uint64_t, void *, void, void **))(*(void *)v16 + 8))(v16, a3, a4, &__p);
          long long v17 = *(NSObject **)(v6 + 152);
          if (v15) {
            char v18 = _Block_copy(v15);
          }
          else {
            char v18 = 0;
          }
          *(void *)fd_set buf = v18;
          uint64_t v35 = 0;
          uint64_t v36 = 0;
          BOOL v37 = 0;
          long long v22 = __p;
          size_t v23 = v30 - (unsigned char *)__p;
          if (v30 == __p)
          {
            uint64_t v25 = 0;
            uint64_t v24 = 0;
          }
          else
          {
            if ((v23 & 0x8000000000000000) != 0) {
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v24 = (char *)operator new(v30 - (unsigned char *)__p);
            uint64_t v25 = &v24[v23];
            uint64_t v35 = v24;
            BOOL v37 = &v24[v23];
            memcpy(v24, v22, v23);
            uint64_t v36 = &v24[v23];
          }
          unint64_t v26 = operator new(0x20uLL);
          void *v26 = v18;
          v26[1] = v24;
          v26[2] = v25;
          v26[3] = v25;
          dispatch_async_f(v17, v26, (dispatch_function_t)_ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb1_E3__1EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_);
          if (__p)
          {
            uint64_t v30 = __p;
            operator delete(__p);
          }
        }
        else
        {
          char v19 = *(unsigned char *)(v6 + 136);
          unsigned __int8 v20 = *(NSObject **)(v6 + 152);
          if (v15) {
            long long v21 = _Block_copy(v15);
          }
          else {
            long long v21 = 0;
          }
          unint64_t v27 = operator new(0x18uLL);
          void *v27 = v21;
          v27[1] = a3;
          *((_DWORD *)v27 + 4) = a4;
          *((unsigned char *)v27 + 20) = v19;
          dispatch_async_f(v20, v27, (dispatch_function_t)_ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb1_E3__2EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_);
          a3 = 0;
        }
        if (v15) {
          _Block_release(v15);
        }
      }
    }
    if (a3 && !*(unsigned char *)(v6 + 136)) {
      free(a3);
    }
    if (v11)
    {
      dispatch_group_leave(v11);
      dispatch_release(v11);
    }
  }
  else if (a3)
  {
    free(a3);
  }
  uint64_t v28 = v33;
  if (v33)
  {
    if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_248B277C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *aBlock, void *a16, uint64_t a17)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL BasebandTransport::open(BasebandTransport *a1, long long *a2, void **a3)
{
  uint64_t v17 = 0;
  char v18 = &v17;
  uint64_t v19 = 0x2000000000;
  char v20 = 0;
  BasebandTransport::stopReader(a1);
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 1174405120;
  void v12[2] = ___ZN17BasebandTransport4openENS_10ParametersEN8dispatch5blockIU13block_pointerFvPhjEEE_block_invoke;
  v12[3] = &unk_26FCC82F0;
  v12[5] = a1;
  long long v6 = a2[1];
  long long v13 = *a2;
  long long v14 = v6;
  uint64_t v15 = *((void *)a2 + 4);
  uint64_t v7 = *a3;
  if (*a3) {
    uint64_t v7 = _Block_copy(v7);
  }
  aBlocunint64_t k = v7;
  v12[4] = &v17;
  long long v21 = v12;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_117;
  block[4] = (char *)a1 + 72;
  void block[5] = &v21;
  uint64_t v8 = *((void *)a1 + 11);
  if (*((void *)a1 + 12))
  {
    dispatch_async_and_wait(v8, block);
    int v9 = *((unsigned __int8 *)v18 + 24);
    uint64_t v10 = aBlock;
    if (!aBlock) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  dispatch_sync(v8, block);
  int v9 = *((unsigned __int8 *)v18 + 24);
  uint64_t v10 = aBlock;
  if (aBlock) {
LABEL_7:
  }
    _Block_release(v10);
LABEL_8:
  _Block_object_dispose(&v17, 8);
  return v9 != 0;
}

void sub_248B279F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void BasebandTransport::stopReader(BasebandTransport *this)
{
  v19[0] = 0;
  v19[1] = v19;
  v19[2] = 0x2000000000;
  char v20 = 0;
  uint64_t v2 = (uint64_t *)((char *)this + 72);
  v18[0] = MEMORY[0x263EF8330];
  v18[1] = 0x40000000;
  v18[2] = ___ZN17BasebandTransport10stopReaderEv_block_invoke;
  void v18[3] = &unk_26524E738;
  v18[4] = v19;
  v18[5] = this;
  long long v21 = v18;
  v16[0] = MEMORY[0x263EF8330];
  v16[1] = 0x40000000;
  void v16[2] = (uint64_t)___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v16[3] = (uint64_t)&__block_descriptor_tmp_117;
  v16[4] = (uint64_t)this + 72;
  v16[5] = (uint64_t)&v21;
  uint64_t v4 = (char *)this + 88;
  int v3 = *((void *)this + 11);
  if (*((void *)v4 + 1)) {
    dispatch_async_and_wait(v3, v16);
  }
  else {
    dispatch_sync(v3, v16);
  }
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 0x40000000;
  v17[2] = ___ZN17BasebandTransport10stopReaderEv_block_invoke_2;
  v17[3] = &unk_26524E760;
  v17[4] = v19;
  v17[5] = this;
  ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(v2, (uint64_t)v17);
  if (*((void *)this + 40))
  {
    uint64_t v5 = (char *)this + 8;
    long long v6 = *((void *)this + 5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v16[0]) = 0;
      _os_log_impl(&dword_248AFD000, v6, OS_LOG_TYPE_DEFAULT, "#I Waiting for reader to be stopped", (uint8_t *)v16, 2u);
    }
    if ((**(unsigned int (***)(char *, uint64_t))v5)((char *)this + 8, 40))
    {
      ctu::LogMessageBuffer::createWithFormat(v16, (ctu::LogMessageBuffer *)"Waiting for reader to be stopped", v7);
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
      MEMORY[0x24C58AFD0](v16);
    }
    uint64_t v8 = *((void *)this + 40);
    dispatch_time_t v9 = dispatch_time(0, 3000000000);
    if (dispatch_group_wait(v8, v9))
    {
      (*(void (**)(BasebandTransport *))(*(void *)this + 80))(this);
      uint64_t v10 = *((void *)this + 5);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v16[0]) = 0;
        _os_log_error_impl(&dword_248AFD000, v10, OS_LOG_TYPE_ERROR, "Timeout waiting for read to unblock, freed transport to force read unblock", (uint8_t *)v16, 2u);
      }
      if ((**(unsigned int (***)(char *, uint64_t))v5)((char *)this + 8, 80))
      {
        ctu::LogMessageBuffer::createWithFormat(v16, (ctu::LogMessageBuffer *)"Timeout waiting for read to unblock, freed transport to force read unblock", v11);
        ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
        MEMORY[0x24C58AFD0](v16);
      }
    }
    else
    {
      unsigned int v12 = (void *)*((void *)this + 37);
      if (v12)
      {
        operator delete[](v12);
        *((void *)this + 37) = 0;
        long long v13 = *((void *)this + 39);
        *((void *)this + 39) = 0;
        if (v13) {
          dispatch_release(v13);
        }
      }
    }
    long long v14 = *((void *)this + 5);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v16[0]) = 0;
      _os_log_impl(&dword_248AFD000, v14, OS_LOG_TYPE_DEFAULT, "#I Reader stopped", (uint8_t *)v16, 2u);
    }
    if ((**(unsigned int (***)(char *, uint64_t))v5)(v5, 40))
    {
      ctu::LogMessageBuffer::createWithFormat(v16, (ctu::LogMessageBuffer *)"Reader stopped", v15);
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
      MEMORY[0x24C58AFD0](v16);
    }
  }
  _Block_object_dispose(v19, 8);
}

void sub_248B27D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MEMORY[0x24C58AFD0](&a9);
  _Block_object_dispose((const void *)(v9 - 88), 8);
  _Unwind_Resume(a1);
}

void sub_248B27DF4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 88), 8);
  _Unwind_Resume(a1);
}

void sub_248B27E0C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 88), 8);
  _Unwind_Resume(a1);
}

void sub_248B27E24(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 88), 8);
  _Unwind_Resume(a1);
}

void sub_248B27E3C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 88), 8);
  _Unwind_Resume(a1);
}

void sub_248B27E54(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 88), 8);
  _Unwind_Resume(a1);
}

void ___ZN17BasebandTransport4openENS_10ParametersEN8dispatch5blockIU13block_pointerFvPhjEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  BasebandTransport::timerOff_sync((BasebandTransport *)v2);
  (*(void (**)(uint64_t))(*(void *)v2 + 80))(v2);
  *(_DWORD *)(v2 + 328) = 0;
  *(unsigned char *)(v2 + 332) = 0;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 352) = 0u;
  *(void *)(v2 + 365) = 0;
  char v3 = *(unsigned char *)(a1 + 80);
  long long v4 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v2 + 120) = v4;
  *(unsigned char *)(v2 + 136) = v3;
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5) {
    uint64_t v5 = _Block_copy(v5);
  }
  long long v6 = *(const void **)(v2 + 144);
  *(void *)(v2 + 144) = v5;
  if (v6) {
    _Block_release(v6);
  }
  if (*(_DWORD *)(v2 + 104) != 23)
  {
    if (capabilities::ipc::supportsPCI((capabilities::ipc *)v5)) {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = BasebandTransport::openPCI_sync((BasebandTransport *)v2);
    }
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      BasebandTransport::timerOn_sync((dispatch_queue_t *)v2);
    }
    else {
      (*(void (**)(uint64_t))(*(void *)v2 + 80))(v2);
    }
    v7[0] = MEMORY[0x263EF8330];
    v7[1] = 0x40000000;
    v7[2] = ___ZN17BasebandTransport9dumpStateEb_block_invoke;
    void v7[3] = &__block_descriptor_tmp_99;
    v7[4] = v2;
    char v8 = 0;
    ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped((uint64_t *)(v2 + 72), (uint64_t)v7);
  }
}

uint64_t BasebandTransport::openPCI_sync(BasebandTransport *this)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (char v3 = std::__shared_weak_count::lock(v2)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v4 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v4);
  }
  HIDWORD(v34) = -1431655766;
  inited = (capabilities::abs *)TelephonyBasebandPCITransportInitParameters();
  int v6 = *((_DWORD *)this + 28);
  uint64_t shouldUseMinBasebandTransportIOReadCount = capabilities::abs::traceTransportTimeoutScalingFactor(inited);
  uint64_t v8 = (1000 * v6);
  if (((v8 * (unint64_t)shouldUseMinBasebandTransportIOReadCount) & 0xFFFFFFFF00000000) != 0)
  {
    uint64_t v9 = *((void *)this + 5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)fd_set buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = 1000 * v6;
      _os_log_error_impl(&dword_248AFD000, v9, OS_LOG_TYPE_ERROR, "Scaled create timeout overflowed, falling back to unscaled value: %u", buf, 8u);
    }
    uint64_t shouldUseMinBasebandTransportIOReadCount = (**((uint64_t (***)(char *, uint64_t))this + 1))((char *)this + 8, 80);
    if (shouldUseMinBasebandTransportIOReadCount)
    {
      ctu::LogMessageBuffer::createWithFormat((uint64_t *)buf, (ctu::LogMessageBuffer *)"Scaled create timeout overflowed, falling back to unscaled value: %u", v10, v8);
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
      uint64_t shouldUseMinBasebandTransportIOReadCount = MEMORY[0x24C58AFD0](buf);
    }
  }
  else
  {
    LODWORD(v8) = v8 * shouldUseMinBasebandTransportIOReadCount;
  }
  uint64_t v35 = *((void *)this + 11);
  uint64_t v37 = v8 | 0x200000000;
  if (!*((_DWORD *)this + 31))
  {
    int v12 = *((_DWORD *)this + 26);
    uint64_t shouldUseMinBasebandTransportIOReadCount = capabilities::abs::shouldUseMinBasebandTransportIOReadCount((capabilities::abs *)shouldUseMinBasebandTransportIOReadCount);
    if (shouldUseMinBasebandTransportIOReadCount) {
      goto LABEL_17;
    }
    if (v12 == 2)
    {
      HIDWORD(v38) = 16;
      unsigned int v11 = *((_DWORD *)this + 30);
      if (v11) {
        goto LABEL_25;
      }
      goto LABEL_13;
    }
    if (v12 == 16 || v12 == 15)
    {
      HIDWORD(v38) = 36;
      unsigned int v11 = *((_DWORD *)this + 30);
      if (v11) {
        goto LABEL_25;
      }
    }
    else
    {
LABEL_17:
      HIDWORD(v38) = 4;
      unsigned int v11 = *((_DWORD *)this + 30);
      if (v11) {
        goto LABEL_25;
      }
    }
LABEL_13:
    if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize((capabilities::abs *)shouldUseMinBasebandTransportIOReadCount)) {
      unsigned int v11 = 0x4000;
    }
    else {
      unsigned int v11 = 0x8000;
    }
    goto LABEL_25;
  }
  HIDWORD(v38) = *((_DWORD *)this + 31);
  unsigned int v11 = *((_DWORD *)this + 30);
  if (!v11) {
    goto LABEL_13;
  }
LABEL_25:
  LODWORD(v38) = -1431655765;
  int v13 = *((_DWORD *)this + 26);
  switch(v13)
  {
    case 0:
      LODWORD(v34) = 0;
      uint64_t v14 = HIDWORD(v38);
      if (HIDWORD(v38) < 0x41) {
        goto LABEL_32;
      }
      goto LABEL_27;
    case 1:
      LODWORD(v34) = 1;
      uint64_t v14 = HIDWORD(v38);
      if (HIDWORD(v38) < 0x41) {
        goto LABEL_32;
      }
      goto LABEL_27;
    case 2:
      LODWORD(v34) = 2;
      uint64_t v14 = HIDWORD(v38);
      if (HIDWORD(v38) < 0x41) {
        goto LABEL_32;
      }
      goto LABEL_27;
    case 3:
      LODWORD(v34) = 3;
      uint64_t v14 = HIDWORD(v38);
      if (HIDWORD(v38) < 0x41) {
        goto LABEL_32;
      }
      goto LABEL_27;
    case 4:
      LODWORD(v34) = 4;
      uint64_t v14 = HIDWORD(v38);
      if (HIDWORD(v38) < 0x41) {
        goto LABEL_32;
      }
      goto LABEL_27;
    case 5:
      LODWORD(v34) = 5;
      uint64_t v14 = HIDWORD(v38);
      if (HIDWORD(v38) < 0x41) {
        goto LABEL_32;
      }
      goto LABEL_27;
    case 6:
      LODWORD(v34) = 6;
      uint64_t v14 = HIDWORD(v38);
      if (HIDWORD(v38) < 0x41) {
        goto LABEL_32;
      }
      goto LABEL_27;
    case 7:
      LODWORD(v34) = 7;
      uint64_t v14 = HIDWORD(v38);
      if (HIDWORD(v38) < 0x41) {
        goto LABEL_32;
      }
      goto LABEL_27;
    case 8:
      LODWORD(v34) = 8;
      uint64_t v14 = HIDWORD(v38);
      if (HIDWORD(v38) < 0x41) {
        goto LABEL_32;
      }
      goto LABEL_27;
    case 9:
    case 17:
      LODWORD(v34) = 9;
      uint64_t v14 = HIDWORD(v38);
      if (HIDWORD(v38) >= 0x41) {
        goto LABEL_27;
      }
      goto LABEL_32;
    case 10:
      LODWORD(v34) = 10;
      uint64_t v14 = HIDWORD(v38);
      if (HIDWORD(v38) < 0x41) {
        goto LABEL_32;
      }
      goto LABEL_27;
    case 11:
      LODWORD(v34) = 11;
      uint64_t v14 = HIDWORD(v38);
      if (HIDWORD(v38) < 0x41) {
        goto LABEL_32;
      }
      goto LABEL_27;
    case 12:
      LODWORD(v34) = 12;
      uint64_t v14 = HIDWORD(v38);
      if (HIDWORD(v38) < 0x41) {
        goto LABEL_32;
      }
      goto LABEL_27;
    case 13:
    case 18:
      LODWORD(v34) = 13;
      uint64_t v14 = HIDWORD(v38);
      if (HIDWORD(v38) < 0x41) {
        goto LABEL_32;
      }
      goto LABEL_27;
    case 14:
      LODWORD(v34) = 14;
      uint64_t v14 = HIDWORD(v38);
      if (HIDWORD(v38) < 0x41) {
        goto LABEL_32;
      }
      goto LABEL_27;
    case 15:
      LODWORD(v34) = 15;
      uint64_t v14 = HIDWORD(v38);
      if (HIDWORD(v38) < 0x41) {
        goto LABEL_32;
      }
      goto LABEL_27;
    case 16:
      LODWORD(v34) = 16;
      uint64_t v14 = HIDWORD(v38);
      if (HIDWORD(v38) >= 0x41)
      {
LABEL_27:
        uint64_t v15 = *((void *)this + 5);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          switch(v13)
          {
            case 0:
              char v44 = 3;
              strcpy((char *)buf, "PBL");
              break;
            case 1:
              char v44 = 3;
              strcpy((char *)buf, "SBL");
              break;
            case 2:
              char v44 = 4;
              int v32 = 1195460932;
              goto LABEL_240;
            case 3:
              char v44 = 4;
              int v32 = 1397114194;
              goto LABEL_240;
            case 4:
              char v44 = 5;
              strcpy((char *)buf, "QMUX1");
              break;
            case 5:
              char v44 = 5;
              strcpy((char *)buf, "QMUX2");
              break;
            case 6:
              char v44 = 3;
              strcpy((char *)buf, "ROM");
              break;
            case 7:
              char v44 = 4;
              int v32 = 1414483778;
              goto LABEL_240;
            case 8:
              char v44 = 3;
              strcpy((char *)buf, "ARI");
              break;
            case 9:
              char v44 = 3;
              strcpy((char *)buf, "STT");
              break;
            case 10:
              char v44 = 2;
              strcpy((char *)buf, "AT");
              break;
            case 11:
              char v44 = 4;
              int v32 = 1280328769;
              goto LABEL_240;
            case 12:
              char v44 = 8;
              strcpy((char *)buf, "MEDIACTL");
              break;
            case 13:
              char v44 = 3;
              strcpy((char *)buf, "ETS");
              break;
            case 14:
              char v44 = 4;
              int v32 = 1397968455;
              goto LABEL_240;
            case 15:
              char v44 = 4;
              int v32 = 1397965905;
              goto LABEL_240;
            case 16:
              char v44 = 5;
              strcpy((char *)buf, "RCTTH");
              break;
            case 17:
              char v44 = 3;
              strcpy((char *)buf, "ACP");
              break;
            case 18:
              char v44 = 4;
              int v32 = 1297040214;
LABEL_240:
              *(_DWORD *)fd_set buf = v32;
              uint8_t buf[4] = 0;
              break;
            default:
              char v44 = 7;
              strcpy((char *)buf, "Unknown");
              break;
          }
          *(_DWORD *)uint64_t v39 = 136315394;
          *(void *)&v39[4] = buf;
          __int16 v40 = 2048;
          uint64_t v41 = v14;
          _os_log_error_impl(&dword_248AFD000, v15, OS_LOG_TYPE_ERROR, "%s: invalid transport io read count (%lu)", v39, 0x16u);
          if (v44 < 0) {
            operator delete(*(void **)buf);
          }
        }
        if (!(**((unsigned int (***)(char *, uint64_t))this + 1))((char *)this + 8, 80)) {
          goto LABEL_189;
        }
        switch(*((_DWORD *)this + 26))
        {
          case 0:
            char v42 = 3;
            strcpy(v39, "PBL");
            break;
          case 1:
            char v42 = 3;
            strcpy(v39, "SBL");
            break;
          case 2:
            char v42 = 4;
            int v23 = 1195460932;
            goto LABEL_101;
          case 3:
            char v42 = 4;
            int v23 = 1397114194;
            goto LABEL_101;
          case 4:
            char v42 = 5;
            strcpy(v39, "QMUX1");
            break;
          case 5:
            char v42 = 5;
            strcpy(v39, "QMUX2");
            break;
          case 6:
            char v42 = 3;
            strcpy(v39, "ROM");
            break;
          case 7:
            char v42 = 4;
            int v23 = 1414483778;
            goto LABEL_101;
          case 8:
            char v42 = 3;
            strcpy(v39, "ARI");
            break;
          case 9:
            char v42 = 3;
            strcpy(v39, "STT");
            break;
          case 0xA:
            char v42 = 2;
            strcpy(v39, "AT");
            break;
          case 0xB:
            char v42 = 4;
            int v23 = 1280328769;
            goto LABEL_101;
          case 0xC:
            char v42 = 8;
            strcpy(v39, "MEDIACTL");
            break;
          case 0xD:
            char v42 = 3;
            strcpy(v39, "ETS");
            break;
          case 0xE:
            char v42 = 4;
            int v23 = 1397968455;
            goto LABEL_101;
          case 0xF:
            char v42 = 4;
            int v23 = 1397965905;
            goto LABEL_101;
          case 0x10:
            char v42 = 5;
            strcpy(v39, "RCTTH");
            break;
          case 0x11:
            char v42 = 3;
            strcpy(v39, "ACP");
            break;
          case 0x12:
            char v42 = 4;
            int v23 = 1297040214;
            goto LABEL_101;
          case 0x13:
            char v42 = 4;
            int v23 = 1129335117;
LABEL_101:
            *(_DWORD *)uint64_t v39 = v23;
            v39[4] = 0;
            break;
          case 0x14:
            char v42 = 3;
            strcpy(v39, "DHL");
            break;
          case 0x15:
            char v42 = 3;
            strcpy(v39, "MUX");
            break;
          case 0x16:
            char v42 = 3;
            strcpy(v39, "FAC");
            break;
          default:
            char v42 = 7;
            strcpy(v39, "Unknown");
            break;
        }
        ctu::LogMessageBuffer::createWithFormat((uint64_t *)buf, (ctu::LogMessageBuffer *)"%s: invalid transport io read count (%lu)", v16, v39, HIDWORD(v38), v34, v35, 0xAAAAAAAAAAAAAAAALL, v37, v38);
        ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
LABEL_187:
        MEMORY[0x24C58AFD0](buf);
        if (v42 < 0) {
          operator delete(*(void **)v39);
        }
LABEL_189:
        uint64_t v29 = 0;
        goto LABEL_190;
      }
LABEL_32:
      if (v11 - 0x4000 > 0xFC000)
      {
        uint64_t v19 = *((void *)this + 5);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          switch(v13)
          {
            case 0:
              char v44 = 3;
              strcpy((char *)buf, "PBL");
              break;
            case 1:
              char v44 = 3;
              strcpy((char *)buf, "SBL");
              break;
            case 2:
              char v44 = 4;
              int v33 = 1195460932;
              goto LABEL_262;
            case 3:
              char v44 = 4;
              int v33 = 1397114194;
              goto LABEL_262;
            case 4:
              char v44 = 5;
              strcpy((char *)buf, "QMUX1");
              break;
            case 5:
              char v44 = 5;
              strcpy((char *)buf, "QMUX2");
              break;
            case 6:
              char v44 = 3;
              strcpy((char *)buf, "ROM");
              break;
            case 7:
              char v44 = 4;
              int v33 = 1414483778;
              goto LABEL_262;
            case 8:
              char v44 = 3;
              strcpy((char *)buf, "ARI");
              break;
            case 9:
              char v44 = 3;
              strcpy((char *)buf, "STT");
              break;
            case 10:
              char v44 = 2;
              strcpy((char *)buf, "AT");
              break;
            case 11:
              char v44 = 4;
              int v33 = 1280328769;
              goto LABEL_262;
            case 12:
              char v44 = 8;
              strcpy((char *)buf, "MEDIACTL");
              break;
            case 13:
              char v44 = 3;
              strcpy((char *)buf, "ETS");
              break;
            case 14:
              char v44 = 4;
              int v33 = 1397968455;
              goto LABEL_262;
            case 15:
              char v44 = 4;
              int v33 = 1397965905;
              goto LABEL_262;
            case 16:
              char v44 = 5;
              strcpy((char *)buf, "RCTTH");
              break;
            case 17:
              char v44 = 3;
              strcpy((char *)buf, "ACP");
              break;
            case 18:
              char v44 = 4;
              int v33 = 1297040214;
LABEL_262:
              *(_DWORD *)fd_set buf = v33;
              uint8_t buf[4] = 0;
              break;
            default:
              char v44 = 7;
              strcpy((char *)buf, "Unknown");
              break;
          }
          *(_DWORD *)uint64_t v39 = 136315394;
          *(void *)&v39[4] = buf;
          __int16 v40 = 2048;
          uint64_t v41 = v11;
          _os_log_error_impl(&dword_248AFD000, v19, OS_LOG_TYPE_ERROR, "%s: invalid transport io read size (%lu)", v39, 0x16u);
          if (v44 < 0) {
            operator delete(*(void **)buf);
          }
        }
        if (!(**((unsigned int (***)(char *, uint64_t))this + 1))((char *)this + 8, 80)) {
          goto LABEL_189;
        }
        switch(*((_DWORD *)this + 26))
        {
          case 0:
            char v42 = 3;
            strcpy(v39, "PBL");
            break;
          case 1:
            char v42 = 3;
            strcpy(v39, "SBL");
            break;
          case 2:
            char v42 = 4;
            int v25 = 1195460932;
            goto LABEL_131;
          case 3:
            char v42 = 4;
            int v25 = 1397114194;
            goto LABEL_131;
          case 4:
            char v42 = 5;
            strcpy(v39, "QMUX1");
            break;
          case 5:
            char v42 = 5;
            strcpy(v39, "QMUX2");
            break;
          case 6:
            char v42 = 3;
            strcpy(v39, "ROM");
            break;
          case 7:
            char v42 = 4;
            int v25 = 1414483778;
            goto LABEL_131;
          case 8:
            char v42 = 3;
            strcpy(v39, "ARI");
            break;
          case 9:
            char v42 = 3;
            strcpy(v39, "STT");
            break;
          case 0xA:
            char v42 = 2;
            strcpy(v39, "AT");
            break;
          case 0xB:
            char v42 = 4;
            int v25 = 1280328769;
            goto LABEL_131;
          case 0xC:
            char v42 = 8;
            strcpy(v39, "MEDIACTL");
            break;
          case 0xD:
            char v42 = 3;
            strcpy(v39, "ETS");
            break;
          case 0xE:
            char v42 = 4;
            int v25 = 1397968455;
            goto LABEL_131;
          case 0xF:
            char v42 = 4;
            int v25 = 1397965905;
            goto LABEL_131;
          case 0x10:
            char v42 = 5;
            strcpy(v39, "RCTTH");
            break;
          case 0x11:
            char v42 = 3;
            strcpy(v39, "ACP");
            break;
          case 0x12:
            char v42 = 4;
            int v25 = 1297040214;
            goto LABEL_131;
          case 0x13:
            char v42 = 4;
            int v25 = 1129335117;
LABEL_131:
            *(_DWORD *)uint64_t v39 = v25;
            v39[4] = 0;
            break;
          case 0x14:
            char v42 = 3;
            strcpy(v39, "DHL");
            break;
          case 0x15:
            char v42 = 3;
            strcpy(v39, "MUX");
            break;
          case 0x16:
            char v42 = 3;
            strcpy(v39, "FAC");
            break;
          default:
            char v42 = 7;
            strcpy(v39, "Unknown");
            break;
        }
        ctu::LogMessageBuffer::createWithFormat((uint64_t *)buf, (ctu::LogMessageBuffer *)"%s: invalid transport io read size (%lu)", v20, v39, v11, v34, v35, 0xAAAAAAAAAAAAAAAALL, v37, v38);
        ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
        goto LABEL_187;
      }
      uint64_t v36 = *((void *)this + 20);
      if (*((void *)this + 18))
      {
        *((unsigned char *)this + 332) = 1;
        LODWORD(v38) = -1431655761;
      }
      uint64_t v17 = (unsigned int (***)(char *, uint64_t))((char *)this + 8);
      if (!TelephonyBasebandPCITransportCreate())
      {
        *((_DWORD *)this + 82) = 2;
        long long v21 = *((void *)this + 5);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          BasebandTransport::asString(*((unsigned int *)this + 26), (char *)buf);
          uint64_t v24 = v44 >= 0 ? buf : *(uint8_t **)buf;
          *(_DWORD *)uint64_t v39 = 136315138;
          *(void *)&v39[4] = v24;
          _os_log_error_impl(&dword_248AFD000, v21, OS_LOG_TYPE_ERROR, "%s: transport open failed", v39, 0xCu);
          if (v44 < 0) {
            operator delete(*(void **)buf);
          }
        }
        if (!(**v17)((char *)this + 8, 80)) {
          goto LABEL_189;
        }
        switch(*((_DWORD *)this + 26))
        {
          case 0:
            char v42 = 3;
            strcpy(v39, "PBL");
            break;
          case 1:
            char v42 = 3;
            strcpy(v39, "SBL");
            break;
          case 2:
            char v42 = 4;
            int v28 = 1195460932;
            goto LABEL_185;
          case 3:
            char v42 = 4;
            int v28 = 1397114194;
            goto LABEL_185;
          case 4:
            char v42 = 5;
            strcpy(v39, "QMUX1");
            break;
          case 5:
            char v42 = 5;
            strcpy(v39, "QMUX2");
            break;
          case 6:
            char v42 = 3;
            strcpy(v39, "ROM");
            break;
          case 7:
            char v42 = 4;
            int v28 = 1414483778;
            goto LABEL_185;
          case 8:
            char v42 = 3;
            strcpy(v39, "ARI");
            break;
          case 9:
            char v42 = 3;
            strcpy(v39, "STT");
            break;
          case 0xA:
            char v42 = 2;
            strcpy(v39, "AT");
            break;
          case 0xB:
            char v42 = 4;
            int v28 = 1280328769;
            goto LABEL_185;
          case 0xC:
            char v42 = 8;
            strcpy(v39, "MEDIACTL");
            break;
          case 0xD:
            char v42 = 3;
            strcpy(v39, "ETS");
            break;
          case 0xE:
            char v42 = 4;
            int v28 = 1397968455;
            goto LABEL_185;
          case 0xF:
            char v42 = 4;
            int v28 = 1397965905;
            goto LABEL_185;
          case 0x10:
            char v42 = 5;
            strcpy(v39, "RCTTH");
            break;
          case 0x11:
            char v42 = 3;
            strcpy(v39, "ACP");
            break;
          case 0x12:
            char v42 = 4;
            int v28 = 1297040214;
            goto LABEL_185;
          case 0x13:
            char v42 = 4;
            int v28 = 1129335117;
LABEL_185:
            *(_DWORD *)uint64_t v39 = v28;
            v39[4] = 0;
            break;
          case 0x14:
            char v42 = 3;
            strcpy(v39, "DHL");
            break;
          case 0x15:
            char v42 = 3;
            strcpy(v39, "MUX");
            break;
          case 0x16:
            char v42 = 3;
            strcpy(v39, "FAC");
            break;
          default:
            char v42 = 7;
            strcpy(v39, "Unknown");
            break;
        }
        ctu::LogMessageBuffer::createWithFormat((uint64_t *)buf, (ctu::LogMessageBuffer *)"%s: transport open failed", v22, v39);
        ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
        goto LABEL_187;
      }
      *((_DWORD *)this + 82) = 1;
      char v18 = *((void *)this + 5);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        switch(*((_DWORD *)this + 26))
        {
          case 0:
            char v44 = 3;
            strcpy((char *)buf, "PBL");
            break;
          case 1:
            char v44 = 3;
            strcpy((char *)buf, "SBL");
            break;
          case 2:
            char v44 = 4;
            int v26 = 1195460932;
            goto LABEL_156;
          case 3:
            char v44 = 4;
            int v26 = 1397114194;
            goto LABEL_156;
          case 4:
            char v44 = 5;
            strcpy((char *)buf, "QMUX1");
            break;
          case 5:
            char v44 = 5;
            strcpy((char *)buf, "QMUX2");
            break;
          case 6:
            char v44 = 3;
            strcpy((char *)buf, "ROM");
            break;
          case 7:
            char v44 = 4;
            int v26 = 1414483778;
            goto LABEL_156;
          case 8:
            char v44 = 3;
            strcpy((char *)buf, "ARI");
            break;
          case 9:
            char v44 = 3;
            strcpy((char *)buf, "STT");
            break;
          case 0xA:
            char v44 = 2;
            strcpy((char *)buf, "AT");
            break;
          case 0xB:
            char v44 = 4;
            int v26 = 1280328769;
            goto LABEL_156;
          case 0xC:
            char v44 = 8;
            strcpy((char *)buf, "MEDIACTL");
            break;
          case 0xD:
            char v44 = 3;
            strcpy((char *)buf, "ETS");
            break;
          case 0xE:
            char v44 = 4;
            int v26 = 1397968455;
            goto LABEL_156;
          case 0xF:
            char v44 = 4;
            int v26 = 1397965905;
            goto LABEL_156;
          case 0x10:
            char v44 = 5;
            strcpy((char *)buf, "RCTTH");
            break;
          case 0x11:
            char v44 = 3;
            strcpy((char *)buf, "ACP");
            break;
          case 0x12:
            char v44 = 4;
            int v26 = 1297040214;
            goto LABEL_156;
          case 0x13:
            char v44 = 4;
            int v26 = 1129335117;
LABEL_156:
            *(_DWORD *)fd_set buf = v26;
            uint8_t buf[4] = 0;
            break;
          case 0x14:
            char v44 = 3;
            strcpy((char *)buf, "DHL");
            break;
          case 0x15:
            char v44 = 3;
            strcpy((char *)buf, "MUX");
            break;
          case 0x16:
            char v44 = 3;
            strcpy((char *)buf, "FAC");
            break;
          default:
            char v44 = 7;
            strcpy((char *)buf, "Unknown");
            break;
        }
        *(_DWORD *)uint64_t v39 = 136315394;
        *(void *)&v39[4] = buf;
        __int16 v40 = 1024;
        LODWORD(v41) = v11;
        _os_log_impl(&dword_248AFD000, v18, OS_LOG_TYPE_DEFAULT, "#I %s: transport successfully opened with read io size as %u", v39, 0x12u);
        if (v44 < 0) {
          operator delete(*(void **)buf);
        }
      }
      if ((**v17)((char *)this + 8, 40))
      {
        switch(*((_DWORD *)this + 26))
        {
          case 0:
            char v42 = 3;
            strcpy(v39, "PBL");
            break;
          case 1:
            char v42 = 3;
            strcpy(v39, "SBL");
            break;
          case 2:
            char v42 = 4;
            int v31 = 1195460932;
            goto LABEL_214;
          case 3:
            char v42 = 4;
            int v31 = 1397114194;
            goto LABEL_214;
          case 4:
            char v42 = 5;
            strcpy(v39, "QMUX1");
            break;
          case 5:
            char v42 = 5;
            strcpy(v39, "QMUX2");
            break;
          case 6:
            char v42 = 3;
            strcpy(v39, "ROM");
            break;
          case 7:
            char v42 = 4;
            int v31 = 1414483778;
            goto LABEL_214;
          case 8:
            char v42 = 3;
            strcpy(v39, "ARI");
            break;
          case 9:
            char v42 = 3;
            strcpy(v39, "STT");
            break;
          case 0xA:
            char v42 = 2;
            strcpy(v39, "AT");
            break;
          case 0xB:
            char v42 = 4;
            int v31 = 1280328769;
            goto LABEL_214;
          case 0xC:
            char v42 = 8;
            strcpy(v39, "MEDIACTL");
            break;
          case 0xD:
            char v42 = 3;
            strcpy(v39, "ETS");
            break;
          case 0xE:
            char v42 = 4;
            int v31 = 1397968455;
            goto LABEL_214;
          case 0xF:
            char v42 = 4;
            int v31 = 1397965905;
            goto LABEL_214;
          case 0x10:
            char v42 = 5;
            strcpy(v39, "RCTTH");
            break;
          case 0x11:
            char v42 = 3;
            strcpy(v39, "ACP");
            break;
          case 0x12:
            char v42 = 4;
            int v31 = 1297040214;
            goto LABEL_214;
          case 0x13:
            char v42 = 4;
            int v31 = 1129335117;
LABEL_214:
            *(_DWORD *)uint64_t v39 = v31;
            v39[4] = 0;
            break;
          case 0x14:
            char v42 = 3;
            strcpy(v39, "DHL");
            break;
          case 0x15:
            char v42 = 3;
            strcpy(v39, "MUX");
            break;
          case 0x16:
            char v42 = 3;
            strcpy(v39, "FAC");
            break;
          default:
            char v42 = 7;
            strcpy(v39, "Unknown");
            break;
        }
        ctu::LogMessageBuffer::createWithFormat((uint64_t *)buf, (ctu::LogMessageBuffer *)"%s: transport successfully opened with read io size as %u", v27, v39, v11, v34, v35, v36, v37, v38);
        ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
        MEMORY[0x24C58AFD0](buf);
        if (v42 < 0) {
          operator delete(*(void **)v39);
        }
      }
      uint64_t v29 = 1;
LABEL_190:
      std::__shared_weak_count::__release_weak(v4);
      return v29;
    default:
      goto LABEL_189;
  }
}

void sub_248B29948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30)
{
  MEMORY[0x24C58AFD0](&a30);
  if (a28 < 0)
  {
    operator delete(__p);
    std::__shared_weak_count::__release_weak(v30);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v30);
  _Unwind_Resume(a1);
}

void BasebandTransport::timerOn_sync(dispatch_queue_t *this)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  BasebandTransport::timerOff_sync((BasebandTransport *)this);
  if (*((_DWORD *)this + 82) == 1)
  {
    unsigned int v2 = *((_DWORD *)this + 72);
    if (v2 && this[34])
    {
      uint64_t v3 = 1000000000 * v2;
      long long v4 = dispatch_source_create(MEMORY[0x263EF8400], 1uLL, 0, this[11]);
      this[35] = v4;
      dispatch_time_t v5 = dispatch_time(0, v3);
      dispatch_source_set_timer(v4, v5, v3, 0xBEBC200uLL);
      int v6 = (std::__shared_weak_count *)this[10];
      if (!v6 || (dispatch_queue_t v7 = this[9], (v8 = std::__shared_weak_count::lock(v6)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      uint64_t v9 = v8;
      p_shared_weak_owners = &v8->__shared_weak_owners_;
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v9);
      }
      unsigned int v11 = this[35];
      handler[0] = MEMORY[0x263EF8330];
      handler[1] = 1174405120;
      handler[2] = ___ZN17BasebandTransport12timerOn_syncEv_block_invoke;
      handler[3] = &__block_descriptor_tmp_95;
      handler[4] = this;
      handler[5] = v7;
      uint64_t v19 = v9;
      atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
      dispatch_source_set_event_handler(v11, handler);
      dispatch_activate(this[35]);
      int v12 = this[5];
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = *((_DWORD *)this + 72);
        *(_DWORD *)fd_set buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v13;
        _os_log_impl(&dword_248AFD000, v12, OS_LOG_TYPE_DEFAULT, "#I Status report enabled(%d sec)", buf, 8u);
      }
      if (((unsigned int (*)(char *, uint64_t))this[1]->isa)((char *)this + 8, 40))
      {
        ctu::LogMessageBuffer::createWithFormat((uint64_t *)buf, (ctu::LogMessageBuffer *)"Status report enabled(%d sec)", v14, *((unsigned int *)this + 72));
        ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
        MEMORY[0x24C58AFD0](buf);
      }
      if (v19) {
        std::__shared_weak_count::__release_weak(v19);
      }
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  else
  {
    uint64_t v15 = (char *)(this + 1);
    uint64_t v16 = this[5];
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)fd_set buf = 0;
      _os_log_impl(&dword_248AFD000, v16, OS_LOG_TYPE_DEFAULT, "#I Invalid state for status report enable.  Ignoring enable request.", buf, 2u);
    }
    if ((**(unsigned int (***)(char *, uint64_t))v15)(v15, 40))
    {
      ctu::LogMessageBuffer::createWithFormat((uint64_t *)buf, (ctu::LogMessageBuffer *)"Invalid state for status report enable.  Ignoring enable request.", v17);
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
      MEMORY[0x24C58AFD0](buf);
    }
  }
}

void BasebandTransport::dumpState(BasebandTransport *this, char a2)
{
  v2[0] = MEMORY[0x263EF8330];
  v2[1] = 0x40000000;
  v2[2] = ___ZN17BasebandTransport9dumpStateEb_block_invoke;
  v2[3] = &__block_descriptor_tmp_99;
  v2[4] = this;
  char v3 = a2;
  ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v2);
}

void *__copy_helper_block_e8_88c45_ZTSN8dispatch5blockIU13block_pointerFvPhjEEE(uint64_t a1, uint64_t a2)
{
  int64x2_t result = *(void **)(a2 + 88);
  if (result) {
    int64x2_t result = _Block_copy(result);
  }
  *(void *)(a1 + 88) = result;
  return result;
}

void __destroy_helper_block_e8_88c45_ZTSN8dispatch5blockIU13block_pointerFvPhjEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 88);
  if (v1) {
    _Block_release(v1);
  }
}

BOOL BasebandTransport::write(BasebandTransport *this, const unsigned __int8 *a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v39 = 0;
  __int16 v40 = &v39;
  uint64_t v41 = 0x2000000000;
  char v42 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = &v35;
  uint64_t v37 = 0x2000000000;
  uint64_t v38 = 0;
  dispatch_queue_t v7 = (char *)this + 72;
  v34[0] = MEMORY[0x263EF8330];
  v34[1] = 0x40000000;
  v34[2] = ___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke;
  _OWORD v34[3] = &unk_26524E608;
  v34[5] = &v39;
  unsigned char v34[6] = this;
  _OWORD v34[4] = &v35;
  char v44 = v34;
  uint64_t block = MEMORY[0x263EF8330];
  p_uint64_t block = 0x40000000;
  uint64_t v28 = (uint64_t)___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  uint64_t v29 = (__n128 (*)(void *, uint64_t))&__block_descriptor_tmp_117;
  uint64_t v30 = (void (*)(uint64_t))((char *)this + 72);
  std::string __p = &v44;
  uint64_t v9 = (char *)this + 88;
  uint64_t v8 = *((void *)this + 11);
  if (*((void *)v9 + 1))
  {
    dispatch_async_and_wait(v8, &block);
    if (*((unsigned char *)v40 + 24)) {
      goto LABEL_3;
    }
LABEL_10:
    BOOL v14 = 0;
    goto LABEL_19;
  }
  dispatch_sync(v8, &block);
  if (!*((unsigned char *)v40 + 24)) {
    goto LABEL_10;
  }
LABEL_3:
  uint64_t block = 0;
  p_uint64_t block = (uint64_t)&block;
  uint64_t v28 = 0x4002000000;
  uint64_t v29 = __Block_byref_object_copy_;
  uint64_t v30 = __Block_byref_object_dispose_;
  std::string __p = 0;
  int v32 = 0;
  uint64_t v33 = 0;
  uint64_t v22 = 0;
  int v23 = &v22;
  uint64_t v24 = 0x2000000000;
  int v25 = a2;
  uint64_t v18 = 0;
  uint64_t v19 = &v18;
  uint64_t v20 = 0x2000000000;
  uint64_t v21 = a3;
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 0x40000000;
  v17[2] = ___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke_56;
  v17[3] = &unk_26524E630;
  v17[8] = a2;
  v17[9] = a3;
  v17[4] = &block;
  v17[5] = &v22;
  void v17[6] = &v18;
  v17[7] = this;
  uint64_t v43 = v17;
  char v44 = (void *)MEMORY[0x263EF8330];
  uint64_t v45 = 0x40000000;
  int64_t v46 = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  unint64_t v47 = &__block_descriptor_tmp_117;
  uint64_t v48 = v7;
  unint64_t v49 = &v43;
  uint64_t v10 = *((void *)this + 11);
  if (*((void *)this + 12))
  {
    dispatch_async_and_wait(v10, &v44);
    if (v19[3]) {
      goto LABEL_5;
    }
  }
  else
  {
    dispatch_sync(v10, &v44);
    if (v19[3])
    {
LABEL_5:
      unsigned int v11 = (uint64_t (**)(void, uint64_t))v36[3];
      if (*v11)
      {
        int v12 = (*v11)(v11, v23[3]);
        *((unsigned char *)v40 + 24) = v12;
        if (v12)
        {
          v16[0] = MEMORY[0x263EF8330];
          v16[1] = 0x40000000;
          void v16[2] = ___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke_2;
          v16[3] = &unk_26524E658;
          v16[4] = &v18;
          v16[5] = this;
          uint64_t v43 = v16;
          char v44 = (void *)MEMORY[0x263EF8330];
          uint64_t v45 = 0x40000000;
          int64_t v46 = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
          unint64_t v47 = &__block_descriptor_tmp_117;
          uint64_t v48 = v7;
          unint64_t v49 = &v43;
          int v13 = *((void *)this + 11);
          if (*((void *)this + 12)) {
            dispatch_async_and_wait(v13, &v44);
          }
          else {
            dispatch_sync(v13, &v44);
          }
          BOOL v14 = *((unsigned char *)v40 + 24) != 0;
        }
        else
        {
          BOOL v14 = 0;
        }
      }
      else
      {
        BOOL v14 = 0;
        *((unsigned char *)v40 + 24) = 0;
      }
      goto LABEL_17;
    }
  }
  BOOL v14 = 1;
LABEL_17:
  _Block_object_dispose(&v18, 8);
  _Block_object_dispose(&v22, 8);
  _Block_object_dispose(&block, 8);
  if (__p)
  {
    int v32 = __p;
    operator delete(__p);
  }
LABEL_19:
  _Block_object_dispose(&v35, 8);
  _Block_object_dispose(&v39, 8);
  return v14;
}

void sub_248B2A464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a33, 8);
  if (__p)
  {
    a39 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose((const void *)(v39 - 216), 8);
  _Block_object_dispose((const void *)(v39 - 184), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke(void *a1)
{
  uint64_t v2 = a1[6];
  *(void *)(*(void *)(a1[4] + 8) + 24) = v2 + 176;
  char v3 = *(uint64_t (**)(void))(v2 + 232);
  if (v3)
  {
    uint64_t result = v3();
    *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = result;
  }
  else
  {
    uint64_t result = 0;
    *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = 0;
  }
  return result;
}

__n128 __Block_byref_object_copy_(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

uint64_t (***___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke_56(void *a1))(void, void, void, uint64_t)
{
  __n128 result = *(uint64_t (****)(void, void, void, uint64_t))(a1[7] + 128);
  if (result)
  {
    __n128 result = (uint64_t (***)(void, void, void, uint64_t))(**result)(result, a1[8], a1[9], *(void *)(a1[4] + 8) + 40);
    *(void *)(*(void *)(a1[5] + 8) + 24) = *(void *)(*(void *)(a1[4] + 8) + 40);
    *(void *)(*(void *)(a1[6] + 8) + 24) = *(void *)(*(void *)(a1[4] + 8) + 48)
                                                 - *(void *)(*(void *)(a1[4] + 8) + 40);
  }
  return result;
}

uint64_t ___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke_2(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(v2 + 344) + *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  *(void *)(v2 + 344) = v3;
  long long v4 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    *(_DWORD *)fd_set buf = 134218240;
    uint64_t v9 = v7;
    __int16 v10 = 2048;
    uint64_t v11 = v3;
    _os_log_debug_impl(&dword_248AFD000, v4, OS_LOG_TYPE_DEBUG, "#D Written: %zu bytes, for a total of: %llu", buf, 0x16u);
  }
  uint64_t result = (**(uint64_t (***)(uint64_t, uint64_t))(v2 + 8))(v2 + 8, 20);
  if (result)
  {
    ctu::LogMessageBuffer::createWithFormat((uint64_t *)buf, (ctu::LogMessageBuffer *)"Written: %zu bytes, for a total of: %llu", v6, *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), *(void *)(v2 + 344));
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    return MEMORY[0x24C58AFD0](buf);
  }
  return result;
}

uint64_t BasebandTransport::read(BasebandTransport *this, unsigned __int8 *a2, unint64_t a3, unsigned int *a4)
{
  uint64_t v22 = 0;
  int v23 = &v22;
  uint64_t v24 = 0x2000000000;
  char v25 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = &v18;
  uint64_t v20 = 0x2000000000;
  uint64_t v21 = 0;
  int v6 = (uint64_t *)((char *)this + 72);
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 0x40000000;
  v17[2] = ___ZN17BasebandTransport4readEPhmPjbj_block_invoke;
  v17[3] = &unk_26524E680;
  v17[5] = &v22;
  void v17[6] = this;
  v17[4] = &v18;
  int v26 = v17;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_117;
  block[4] = (char *)this + 72;
  void block[5] = &v26;
  uint64_t v8 = (char *)this + 88;
  uint64_t v7 = *((void *)this + 11);
  if (*((void *)v8 + 1))
  {
    dispatch_async_and_wait(v7, block);
    uint64_t v9 = v23;
    if (!*((unsigned char *)v23 + 24)) {
      goto LABEL_13;
    }
LABEL_5:
    uint64_t v10 = v19[3];
    if (v10 && (uint64_t v11 = *(uint64_t (**)(void))(v10 + 8)) != 0)
    {
      char v12 = v11();
      *((unsigned char *)v23 + 24) = v12;
      if (v12)
      {
        v16[0] = MEMORY[0x263EF8330];
        v16[1] = 0x40000000;
        void v16[2] = ___ZN17BasebandTransport4readEPhmPjbj_block_invoke_62;
        v16[3] = &__block_descriptor_tmp_63;
        v16[4] = this;
        v16[5] = a4;
        ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(v6, (uint64_t)v16);
        goto LABEL_13;
      }
      int v13 = *(void (**)(void))(v19[3] + 24);
      if (!v13) {
        goto LABEL_13;
      }
    }
    else
    {
      *((unsigned char *)v9 + 24) = 0;
      int v13 = *(void (**)(void))(v10 + 24);
      if (!v13) {
        goto LABEL_13;
      }
    }
    v13();
    goto LABEL_13;
  }
  dispatch_sync(v7, block);
  uint64_t v9 = v23;
  if (*((unsigned char *)v23 + 24)) {
    goto LABEL_5;
  }
LABEL_13:
  uint64_t v14 = *((unsigned __int8 *)v23 + 24);
  _Block_object_dispose(&v18, 8);
  _Block_object_dispose(&v22, 8);
  return v14;
}

void sub_248B2A974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

uint64_t ___ZN17BasebandTransport4readEPhmPjbj_block_invoke(void *a1)
{
  uint64_t v2 = a1[6];
  uint64_t result = v2 + 176;
  *(void *)(*(void *)(a1[4] + 8) + 24) = v2 + 176;
  long long v4 = *(uint64_t (**)(void))(v2 + 232);
  if (v4)
  {
    uint64_t result = v4();
    if (!result)
    {
      *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = 0;
      if (!*(unsigned char *)(v2 + 332)) {
        return result;
      }
      goto LABEL_7;
    }
    LOBYTE(v4) = *(unsigned char *)(v2 + 332) == 0;
  }
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = (_BYTE)v4;
  if (!*(unsigned char *)(v2 + 332)) {
    return result;
  }
LABEL_7:
  dispatch_time_t v5 = (uint64_t (***)(void, uint64_t))(v2 + 8);
  int v6 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v8[0]) = 0;
    _os_log_error_impl(&dword_248AFD000, v6, OS_LOG_TYPE_ERROR, "Explicit reads not allowed in async mode", (uint8_t *)v8, 2u);
  }
  uint64_t result = (**v5)(v5, 80);
  if (result)
  {
    ctu::LogMessageBuffer::createWithFormat(v8, (ctu::LogMessageBuffer *)"Explicit reads not allowed in async mode", v7);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    return MEMORY[0x24C58AFD0](v8);
  }
  return result;
}

uint64_t ___ZN17BasebandTransport4readEPhmPjbj_block_invoke_62(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 336) += **(unsigned int **)(result + 40);
  return result;
}

uint64_t BasebandTransport::close(BasebandTransport *this)
{
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2000000000;
  char v13 = 1;
  *((_DWORD *)this + 72) = 0;
  uint64_t v2 = (char *)this + 72;
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 0x40000000;
  v9[2] = ___ZN17BasebandTransport5closeEv_block_invoke;
  v9[3] = &__block_descriptor_tmp_64;
  v9[4] = this;
  uint64_t v14 = v9;
  uint64_t block = MEMORY[0x263EF8330];
  uint64_t v16 = 0x40000000;
  uint64_t v17 = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  uint64_t v18 = &__block_descriptor_tmp_117;
  uint64_t v19 = (char *)this + 72;
  uint64_t v20 = &v14;
  long long v4 = (char *)this + 88;
  uint64_t v3 = *((void *)this + 11);
  if (*((void *)v4 + 1)) {
    dispatch_async_and_wait(v3, &block);
  }
  else {
    dispatch_sync(v3, &block);
  }
  BasebandTransport::stopReader(this);
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 0x40000000;
  void v8[2] = ___ZN17BasebandTransport5closeEv_block_invoke_2;
  v8[3] = &unk_26524E6E8;
  v8[4] = &v10;
  v8[5] = this;
  uint64_t v14 = v8;
  uint64_t block = MEMORY[0x263EF8330];
  uint64_t v16 = 0x40000000;
  uint64_t v17 = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  uint64_t v18 = &__block_descriptor_tmp_117;
  uint64_t v19 = v2;
  uint64_t v20 = &v14;
  dispatch_time_t v5 = *((void *)this + 11);
  if (*((void *)this + 12)) {
    dispatch_async_and_wait(v5, &block);
  }
  else {
    dispatch_sync(v5, &block);
  }
  uint64_t v6 = *((unsigned __int8 *)v11 + 24);
  _Block_object_dispose(&v10, 8);
  return v6;
}

void sub_248B2ACB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

NSObject *___ZN17BasebandTransport5closeEv_block_invoke(uint64_t a1)
{
  return BasebandTransport::timerOff_sync(*(BasebandTransport **)(a1 + 32));
}

uint64_t ___ZN17BasebandTransport5closeEv_block_invoke_2(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 80))(*(void *)(a1 + 40));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t BasebandTransport::operator*(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2000000000;
  uint64_t v9 = 0;
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 0x40000000;
  void v5[2] = ___ZN17BasebandTransportdeEv_block_invoke;
  void v5[3] = &unk_26524E710;
  v5[4] = &v6;
  v5[5] = a1;
  uint64_t v10 = v5;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_117;
  block[4] = a1 + 72;
  void block[5] = &v10;
  uint64_t v2 = a1 + 88;
  uint64_t v1 = *(NSObject **)(a1 + 88);
  if (*(void *)(v2 + 8)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
  uint64_t v3 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t ___ZN17BasebandTransportdeEv_block_invoke(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(result + 40) + 176;
  return result;
}

uint64_t BasebandTransport::switchDIAG_sync(BasebandTransport *this)
{
  return 0;
}

uint64_t BasebandTransport::getIOSizeRx(BasebandTransport *this)
{
  return *((unsigned int *)this + 30);
}

uint64_t BasebandTransport::close_sync(BasebandTransport *this)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v2 = (unsigned int (*)(char *))*((void *)this + 29);
  if (v2 && (uint64_t v3 = (_OWORD *)((char *)this + 176), v2((char *)this + 176)))
  {
    *((_DWORD *)this + 82) = 0;
    uint64_t v4 = TelephonyUtilTransportFree();
    _OWORD *v3 = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 15) = 0u;
    *((void *)this + 32) = 0;
    dispatch_time_t v5 = (char *)this + 8;
    uint64_t v6 = *((void *)this + 5);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_33;
    }
  }
  else
  {
    uint64_t v4 = 1;
    dispatch_time_t v5 = (char *)this + 8;
    uint64_t v6 = *((void *)this + 5);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_33;
    }
  }
  switch(*((_DWORD *)this + 26))
  {
    case 0:
      char v14 = 3;
      LODWORD(__p[0]) = 4997712;
      break;
    case 1:
      char v14 = 3;
      LODWORD(__p[0]) = 4997715;
      break;
    case 2:
      char v14 = 4;
      int v7 = 1195460932;
      goto LABEL_28;
    case 3:
      char v14 = 4;
      int v7 = 1397114194;
      goto LABEL_28;
    case 4:
      char v14 = 5;
      strcpy((char *)__p, "QMUX1");
      break;
    case 5:
      char v14 = 5;
      strcpy((char *)__p, "QMUX2");
      break;
    case 6:
      char v14 = 3;
      LODWORD(__p[0]) = 5066578;
      break;
    case 7:
      char v14 = 4;
      int v7 = 1414483778;
      goto LABEL_28;
    case 8:
      char v14 = 3;
      LODWORD(__p[0]) = 4805185;
      break;
    case 9:
      char v14 = 3;
      LODWORD(__p[0]) = 5526611;
      break;
    case 0xA:
      char v14 = 2;
      strcpy((char *)__p, "AT");
      break;
    case 0xB:
      char v14 = 4;
      int v7 = 1280328769;
      goto LABEL_28;
    case 0xC:
      char v14 = 8;
      strcpy((char *)__p, "MEDIACTL");
      break;
    case 0xD:
      char v14 = 3;
      LODWORD(__p[0]) = 5461061;
      break;
    case 0xE:
      char v14 = 4;
      int v7 = 1397968455;
      goto LABEL_28;
    case 0xF:
      char v14 = 4;
      int v7 = 1397965905;
      goto LABEL_28;
    case 0x10:
      char v14 = 5;
      strcpy((char *)__p, "RCTTH");
      break;
    case 0x11:
      char v14 = 3;
      LODWORD(__p[0]) = 5260097;
      break;
    case 0x12:
      char v14 = 4;
      int v7 = 1297040214;
      goto LABEL_28;
    case 0x13:
      char v14 = 4;
      int v7 = 1129335117;
LABEL_28:
      LODWORD(__p[0]) = v7;
      BYTE4(__p[0]) = 0;
      break;
    case 0x14:
      char v14 = 3;
      LODWORD(__p[0]) = 4999236;
      break;
    case 0x15:
      char v14 = 3;
      LODWORD(__p[0]) = 5789005;
      break;
    case 0x16:
      char v14 = 3;
      LODWORD(__p[0]) = 4407622;
      break;
    default:
      char v14 = 7;
      strcpy((char *)__p, "Unknown");
      break;
  }
  uint64_t v8 = "error";
  if (v4) {
    uint64_t v8 = "success";
  }
  *(_DWORD *)fd_set buf = 136315394;
  *(void *)&uint8_t buf[4] = __p;
  __int16 v16 = 2080;
  uint64_t v17 = v8;
  _os_log_impl(&dword_248AFD000, v6, OS_LOG_TYPE_DEFAULT, "#I Transport close %s: %s", buf, 0x16u);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
LABEL_33:
  if ((**(unsigned int (***)(char *, uint64_t))v5)(v5, 40))
  {
    switch(*((_DWORD *)this + 26))
    {
      case 0:
        char v18 = 3;
        strcpy(buf, "PBL");
        break;
      case 1:
        char v18 = 3;
        strcpy(buf, "SBL");
        break;
      case 2:
        char v18 = 4;
        int v10 = 1195460932;
        goto LABEL_59;
      case 3:
        char v18 = 4;
        int v10 = 1397114194;
        goto LABEL_59;
      case 4:
        char v18 = 5;
        strcpy(buf, "QMUX1");
        break;
      case 5:
        char v18 = 5;
        strcpy(buf, "QMUX2");
        break;
      case 6:
        char v18 = 3;
        strcpy(buf, "ROM");
        break;
      case 7:
        char v18 = 4;
        int v10 = 1414483778;
        goto LABEL_59;
      case 8:
        char v18 = 3;
        strcpy(buf, "ARI");
        break;
      case 9:
        char v18 = 3;
        strcpy(buf, "STT");
        break;
      case 0xA:
        char v18 = 2;
        strcpy(buf, "AT");
        break;
      case 0xB:
        char v18 = 4;
        int v10 = 1280328769;
        goto LABEL_59;
      case 0xC:
        char v18 = 8;
        strcpy(buf, "MEDIACTL");
        break;
      case 0xD:
        char v18 = 3;
        strcpy(buf, "ETS");
        break;
      case 0xE:
        char v18 = 4;
        int v10 = 1397968455;
        goto LABEL_59;
      case 0xF:
        char v18 = 4;
        int v10 = 1397965905;
        goto LABEL_59;
      case 0x10:
        char v18 = 5;
        strcpy(buf, "RCTTH");
        break;
      case 0x11:
        char v18 = 3;
        strcpy(buf, "ACP");
        break;
      case 0x12:
        char v18 = 4;
        int v10 = 1297040214;
        goto LABEL_59;
      case 0x13:
        char v18 = 4;
        int v10 = 1129335117;
LABEL_59:
        *(_DWORD *)fd_set buf = v10;
        uint8_t buf[4] = 0;
        break;
      case 0x14:
        char v18 = 3;
        strcpy(buf, "DHL");
        break;
      case 0x15:
        char v18 = 3;
        strcpy(buf, "MUX");
        break;
      case 0x16:
        char v18 = 3;
        strcpy(buf, "FAC");
        break;
      default:
        char v18 = 7;
        strcpy(buf, "Unknown");
        break;
    }
    uint64_t v11 = "error";
    if (v4) {
      uint64_t v11 = "success";
    }
    ctu::LogMessageBuffer::createWithFormat((uint64_t *)__p, (ctu::LogMessageBuffer *)"Transport close %s: %s", v9, buf, v11);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    MEMORY[0x24C58AFD0](__p);
    if (v18 < 0) {
      operator delete(*(void **)buf);
    }
  }
  return v4;
}

uint64_t BasebandTransport::startReader_sync(NSObject **this)
{
  if (!this[37])
  {
    if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize((capabilities::abs *)this)) {
      size_t v2 = 0x4000;
    }
    else {
      size_t v2 = 0x8000;
    }
    this[38] = v2;
    this[37] = operator new[](v2);
    {
      std::string::basic_string[abi:ne180100]<0>(&BasebandTransport::getName(void)::kName, "ipc.bb");
    }
    if (byte_269339F07 >= 0) {
      uint64_t v3 = (const char *)&BasebandTransport::getName(void)::kName;
    }
    else {
      uint64_t v3 = (const char *)BasebandTransport::getName(void)::kName;
    }
    dispatch_queue_t v4 = dispatch_queue_create(v3, 0);
    dispatch_time_t v5 = this[39];
    this[39] = v4;
    if (v5) {
      dispatch_release(v5);
    }
  }
  *((unsigned char *)this + 292) = 1;
  *((unsigned char *)this + 332) = 1;
  BasebandTransport::queueRead_sync((BasebandTransport *)this);
  return *((unsigned __int8 *)this + 292);
}

void sub_248B2B6E8(_Unwind_Exception *a1)
{
}

void BasebandTransport::queueRead_sync(BasebandTransport *this)
{
  size_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (uint64_t v3 = *((void *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  dispatch_time_t v5 = v4;
  uint64_t v6 = *((void *)this + 40);
  if (v6)
  {
    dispatch_retain(*((dispatch_object_t *)this + 40));
    dispatch_group_enter(v6);
  }
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 1174405120;
  void v8[2] = ___ZN17BasebandTransport14queueRead_syncEv_block_invoke;
  v8[3] = &__block_descriptor_tmp_82;
  v8[4] = this;
  v8[5] = v3;
  uint64_t v9 = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  dispatch_group_t group = v6;
  if (v6)
  {
    dispatch_retain(v6);
    dispatch_group_enter(group);
  }
  dispatch_async(*((dispatch_queue_t *)this + 39), v8);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  int v7 = v9;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (v6)
  {
    dispatch_group_leave(v6);
    dispatch_release(v6);
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

uint64_t ___ZN17BasebandTransport10stopReaderEv_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(unsigned char *)(v1 + 292);
  *(unsigned char *)(v1 + 292) = 0;
  *(unsigned char *)(v1 + 332) = 0;
  return result;
}

uint64_t ___ZN17BasebandTransport10stopReaderEv_block_invoke_2(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  size_t v2 = *(uint64_t (**)(uint64_t))(v1 + 232);
  if (v2)
  {
    uint64_t v3 = result;
    uint64_t result = v2(v1 + 176);
    if (result)
    {
      if (*(unsigned char *)(*(void *)(*(void *)(v3 + 32) + 8) + 24))
      {
        dispatch_queue_t v4 = *(uint64_t (**)(uint64_t))(v1 + 192);
        if (v4)
        {
          return v4(v1 + 176);
        }
      }
    }
  }
  return result;
}

void ___ZN17BasebandTransport14queueRead_syncEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  size_t v2 = *(NSObject **)(a1 + 56);
  uint64_t v3 = v2;
  if (v2)
  {
    dispatch_retain(v2);
    dispatch_group_enter(v2);
  }
  BasebandTransport::read_sync(v1, &v3);
  if (v2)
  {
    dispatch_group_leave(v2);
    dispatch_release(v2);
  }
}

void sub_248B2B9C8(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void BasebandTransport::read_sync(uint64_t a1, NSObject **a2)
{
  uint64_t v6 = *(void *)(a1 + 72);
  dispatch_queue_t v4 = *(std::__shared_weak_count **)(a1 + 80);
  dispatch_time_t v5 = (uint64_t *)(a1 + 72);
  uint64_t v28 = v6;
  if (!v4
    || (uint64_t v8 = (capabilities::abs *)std::__shared_weak_count::lock(v4), (v29 = (std::__shared_weak_count *)v8) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v27 = 0;
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *, void, uint64_t, void))(a1 + 184);
  if (v9)
  {
    int v10 = v8;
    uint64_t v11 = *(void *)(a1 + 296);
    uint64_t v12 = capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v8) ? 0x4000 : 0x8000;
    int v13 = v9(a1 + 176, v11, v12, &v27, 0, 0xFFFFFFFFLL, 0);
    int v14 = v27 ? v13 : 0;
    if (v14 == 1)
    {
      v25[0] = MEMORY[0x263EF8330];
      v25[1] = 0x40000000;
      v25[2] = ___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke;
      v25[3] = &__block_descriptor_tmp_83;
      v25[4] = a1;
      int v26 = v27;
      ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(v5, (uint64_t)v25);
      block[0] = MEMORY[0x263EF8330];
      block[1] = 1174405120;
      block[2] = ___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke_2;
      block[3] = &__block_descriptor_tmp_86;
      block[4] = a1;
      void block[5] = v6;
      uint64_t v22 = (std::__shared_weak_count *)v10;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v10 + 1, 1uLL, memory_order_relaxed);
      uint64_t v15 = *a2;
      dispatch_group_t group = v15;
      if (v15)
      {
        dispatch_retain(v15);
        dispatch_group_enter(group);
      }
      int v24 = v27;
      dispatch_sync(*(dispatch_queue_t *)(a1 + 152), block);
      if (group)
      {
        dispatch_group_leave(group);
        if (group) {
          dispatch_release(group);
        }
      }
      __int16 v16 = v22;
      if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  v19[0] = MEMORY[0x263EF8330];
  v19[1] = 1174405120;
  v19[2] = ___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke_87;
  void v19[3] = &__block_descriptor_tmp_88;
  _OWORD v19[4] = a1;
  v19[5] = v28;
  uint64_t v20 = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(v5, (uint64_t)v19);
  uint64_t v17 = v20;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  char v18 = v29;
  if (v29)
  {
    if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_248B2BCE8(_Unwind_Exception *a1)
{
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v1 - 96);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrI17BasebandTransportEE56c30_ZTSN8dispatch13group_sessionE(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  dispatch_queue_t v4 = a2[7];
  a1[7] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_time_t v5 = a1[7];
    if (v5)
    {
      dispatch_group_enter(v5);
    }
  }
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrI17BasebandTransportEE56c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  size_t v2 = *(NSObject **)(a1 + 56);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 56);
    if (v3) {
      dispatch_release(v3);
    }
  }
  dispatch_queue_t v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

uint64_t ___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 336) += *(unsigned int *)(result + 40);
  return result;
}

void ___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke_2(uint64_t a1)
{
  size_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = v2[16];
  if (v3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    (*(void (**)(uint64_t, void, void, void **))(*(void *)v3 + 8))(v3, v2[37], *(unsigned int *)(a1 + 64), &__p);
    (*(void (**)(void))(v2[18] + 16))();
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    dispatch_queue_t v4 = *(void (**)(void))(v2[18] + 16);
    v4();
  }
}

void sub_248B2BEE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BasebandTransport *___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke_87(uint64_t a1)
{
  uint64_t result = *(BasebandTransport **)(a1 + 32);
  if (*((unsigned char *)result + 292)) {
    return (BasebandTransport *)BasebandTransport::queueRead_sync(result);
  }
  return result;
}

uint64_t __copy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrI17BasebandTransportEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrI17BasebandTransportEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN17BasebandTransport12timerOn_syncEv_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (!v2) {
    return;
  }
  uint64_t v3 = a1[4];
  dispatch_queue_t v4 = std::__shared_weak_count::lock(v2);
  if (!v4) {
    return;
  }
  dispatch_time_t v5 = v4;
  uint64_t v6 = a1[5];
  if (!v6) {
    goto LABEL_14;
  }
  uint64_t v7 = (int *)(v3 + 328);
  uint64_t v8 = *(void *)(v3 + 336);
  uint64_t v9 = *(void *)(v3 + 376);
  uint64_t v10 = *(void *)(v3 + 344) - *(void *)(v3 + 384);
  *(void *)(v3 + 352) = v8 - v9;
  *(void *)(v3 + 360) = v10;
  if (v10) {
    BOOL v11 = 0;
  }
  else {
    BOOL v11 = v8 == v9;
  }
  if (v11)
  {
    int v12 = 3;
  }
  else
  {
    if (*v7 != 3) {
      goto LABEL_12;
    }
    int v12 = 1;
  }
  int *v7 = v12;
LABEL_12:
  long long v13 = *(_OWORD *)(v3 + 344);
  *(_OWORD *)(v3 + 368) = *(_OWORD *)v7;
  *(_OWORD *)(v3 + 384) = v13;
  *(void *)(v3 + 400) = *(void *)(v3 + 360);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZN17BasebandTransport12timerOn_syncEv_block_invoke_2;
  block[3] = &__block_descriptor_tmp_92;
  block[4] = v3;
  void block[5] = v6;
  __int16 v16 = v4;
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  dispatch_async(*(dispatch_queue_t *)(v3 + 152), block);
  int v14 = v16;
  if (!v16 || atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_14:
    if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_17:
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_17;
  }
}

uint64_t ___ZN17BasebandTransport12timerOn_syncEv_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(v5 + 272);
  uint64_t v10 = *(void *)(v5 + 400);
  long long v7 = *(_OWORD *)(v5 + 384);
  v9[0] = *(_OWORD *)(v5 + 368);
  v9[1] = v7;
  return (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t))(v6 + 16))(v6, v9, a3, a4, a5);
}

__n128 BasebandTransport::getStatus@<Q0>(BasebandTransport *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = *((void *)this + 45);
  __n128 result = *(__n128 *)((char *)this + 328);
  long long v3 = *(_OWORD *)((char *)this + 344);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

void ___ZN17BasebandTransport9dumpStateEb_block_invoke(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  *(int64x2_t *)(v2 + 352) = vsubq_s64(*(int64x2_t *)(v2 + 336), *(int64x2_t *)(v2 + 376));
  long long v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    BasebandTransport::Parameters::toString((uint64_t *)__p, (BasebandTransport::Parameters *)(v2 + 104));
    dispatch_queue_t v4 = v12 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)fd_set buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl(&dword_248AFD000, v3, OS_LOG_TYPE_DEFAULT, "#I %s", buf, 0xCu);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
  if ((**(unsigned int (***)(uint64_t, uint64_t))(v2 + 8))(v2 + 8, 40)
    && ((BasebandTransport::Parameters::toString((uint64_t *)buf, (BasebandTransport::Parameters *)(v2 + 104)), v14 >= 0)
      ? (uint64_t v6 = buf)
      : (uint64_t v6 = *(unsigned char **)buf),
        ctu::LogMessageBuffer::createWithFormat((uint64_t *)__p, (ctu::LogMessageBuffer *)"%s", v5, v6),
        ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog(),
        MEMORY[0x24C58AFD0](__p),
        v14 < 0))
  {
    operator delete(*(void **)buf);
    long long v7 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_19;
    }
  }
  else
  {
    long long v7 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_19;
    }
  }
  BasebandTransport::Status::toString((uint64_t *)__p, (BasebandTransport::Status *)(v2 + 328));
  if (v12 >= 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = (void **)__p[0];
  }
  *(_DWORD *)fd_set buf = 136315138;
  *(void *)&uint8_t buf[4] = v8;
  _os_log_impl(&dword_248AFD000, v7, OS_LOG_TYPE_DEFAULT, "#I %s", buf, 0xCu);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
LABEL_19:
  if ((**(unsigned int (***)(uint64_t, uint64_t))(v2 + 8))(v2 + 8, 40)
    && ((BasebandTransport::Status::toString((uint64_t *)buf, (BasebandTransport::Status *)(v2 + 328)), v14 >= 0)
      ? (uint64_t v10 = buf)
      : (uint64_t v10 = *(unsigned char **)buf),
        ctu::LogMessageBuffer::createWithFormat((uint64_t *)__p, (ctu::LogMessageBuffer *)"%s", v9, v10),
        ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog(),
        MEMORY[0x24C58AFD0](__p),
        v14 < 0))
  {
    operator delete(*(void **)buf);
    if (!*(unsigned char *)(a1 + 40)) {
      return;
    }
  }
  else if (!*(unsigned char *)(a1 + 40))
  {
    return;
  }
  *(_DWORD *)(v2 + 328) = 0;
  *(unsigned char *)(v2 + 332) = 0;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 352) = 0u;
  *(void *)(v2 + 365) = 0;
  BasebandTransport::timerOn_sync((dispatch_queue_t *)v2);
}

void sub_248B2C490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void BasebandTransport::reportStatus(uint64_t a1, int a2, void **a3)
{
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 1174405120;
  v7[2] = ___ZN17BasebandTransport12reportStatusEjN8dispatch5blockIU13block_pointerFvNS_6StatusEEEE_block_invoke;
  void v7[3] = &__block_descriptor_tmp_100;
  v7[4] = a1;
  int v9 = a2;
  dispatch_queue_t v4 = *a3;
  if (*a3) {
    dispatch_queue_t v4 = _Block_copy(v4);
  }
  aBlocunint64_t k = v4;
  uint64_t v10 = v7;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_117;
  block[4] = a1 + 72;
  void block[5] = &v10;
  uint64_t v5 = *(NSObject **)(a1 + 88);
  if (!*(void *)(a1 + 96))
  {
    dispatch_sync(v5, block);
    uint64_t v6 = aBlock;
    if (!aBlock) {
      return;
    }
    goto LABEL_7;
  }
  dispatch_async_and_wait(v5, block);
  uint64_t v6 = aBlock;
  if (aBlock) {
LABEL_7:
  }
    _Block_release(v6);
}

void ___ZN17BasebandTransport12reportStatusEjN8dispatch5blockIU13block_pointerFvNS_6StatusEEEE_block_invoke(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  *(_DWORD *)(v3 + 288) = v1;
  if (v2) {
    uint64_t v2 = _Block_copy(v2);
  }
  dispatch_queue_t v4 = *(const void **)(v3 + 272);
  *(void *)(v3 + 272) = v2;
  if (v4) {
    _Block_release(v4);
  }
  BasebandTransport::timerOn_sync((dispatch_queue_t *)v3);
}

void *__copy_helper_block_e8_40c70_ZTSN8dispatch5blockIU13block_pointerFvN17BasebandTransport6StatusEEEE(uint64_t a1, uint64_t a2)
{
  __n128 result = *(void **)(a2 + 40);
  if (result) {
    __n128 result = _Block_copy(result);
  }
  *(void *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c70_ZTSN8dispatch5blockIU13block_pointerFvN17BasebandTransport6StatusEEEE(uint64_t a1)
{
  int v1 = *(const void **)(a1 + 40);
  if (v1) {
    _Block_release(v1);
  }
}

uint64_t ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x270F97428](a1 + 8);
}

void ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(std::string *a1@<X8>)
{
  {
    uint64_t v3 = a1;
    a1 = v3;
    if (v2)
    {
      byte_269339F07 = 6;
      strcpy((char *)&BasebandTransport::getName(void)::kName, "ipc.bb");
      a1 = v3;
    }
  }
  if (byte_269339F07 < 0)
  {
    long long v1 = BasebandTransport::getName(void)::kName;
    std::string::__init_copy_ctor_external(a1, (const std::string::value_type *)v1, *((std::string::size_type *)&v1 + 1));
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = BasebandTransport::getName(void)::kName;
    a1->__r_.__value_.__r.__words[2] = unk_269339F00;
  }
}

uint64_t ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x270F978E0](a1 + 8);
}

void *ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_26FCC84C8;
  MEMORY[0x24C58AF50](a1 + 1);
  return a1;
}

void ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_26FCC84C8;
  MEMORY[0x24C58AF50](a1 + 1);
  operator delete(a1);
}

void ___ZL14sLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  char v9 = 18;
  strcpy(__p, "baseband.transport");
  ctu::LogServer::create();
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = v10;
  long long v10 = 0uLL;
  dispatch_queue_t v4 = *(std::__shared_weak_count **)(v2 + 8);
  *(_OWORD *)uint64_t v2 = v3;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  if (*((void *)&v10 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**((void **)&v10 + 1) + 16))(*((void *)&v10 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v10 + 1));
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (v9 < 0) {
LABEL_7:
  }
    operator delete(*(void **)__p);
LABEL_8:
  uint64_t v5 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v5->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_26FCC8508;
  *(void *)std::string __p = v5;
  uint64_t v6 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6->__shared_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FCC8570;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = v5;
  *(void *)&__p[8] = v6;
  long long v7 = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  ctu::LogServer::addWriter();
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  ctu::LogServer::start(**(ctu::LogServer ***)(a1 + 32));
  ctu::LogServer::setEnabled(**(ctu::LogServer ***)(a1 + 32));
  if (*(void *)&__p[8])
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*(void *)&__p[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(void))(**(void **)&__p[8] + 16))(*(void *)&__p[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&__p[8]);
    }
  }
}

void sub_248B2CA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_248B2CA78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  operator delete(v16);
  _Unwind_Resume(a1);
}

void sub_248B2CAA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<EmptyLogWriter *,std::shared_ptr<ctu::LogWriter>::__shared_ptr_default_delete<ctu::LogWriter,EmptyLogWriter>,std::allocator<EmptyLogWriter>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<EmptyLogWriter *,std::shared_ptr<ctu::LogWriter>::__shared_ptr_default_delete<ctu::LogWriter,EmptyLogWriter>,std::allocator<EmptyLogWriter>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<EmptyLogWriter *,std::shared_ptr<ctu::LogWriter>::__shared_ptr_default_delete<ctu::LogWriter,EmptyLogWriter>,std::allocator<EmptyLogWriter>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000248B4ABB7) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000248B4ABB7 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000248B4ABB7)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000248B4ABB7 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void ctu::SharedLoggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_26FCC84C8;
  MEMORY[0x24C58AF50](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  dispatch_queue_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  operator delete(a1);
}

void ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v3 = v2;
    dispatch_queue_t v4 = v2;
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v3);
    }
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_248B2CDF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_248B2CE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<BasebandTransportMAV *,std::shared_ptr<BasebandTransportMAV> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransportMAV>(BasebandTransportMAV*)::{lambda(BasebandTransportMAV *)#1},std::allocator<BasebandTransportMAV>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<BasebandTransportMAV *,std::shared_ptr<BasebandTransportMAV> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransportMAV>(BasebandTransportMAV*)::{lambda(BasebandTransportMAV *)#1},std::allocator<BasebandTransportMAV>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<BasebandTransportMAV *,std::shared_ptr<BasebandTransportMAV> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransportMAV>(BasebandTransportMAV*)::{lambda(BasebandTransportMAV *)#1},std::allocator<BasebandTransportMAV>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrI20BasebandTransportMAVEENSt3__11"
                     "0shared_ptrIT_EEPS7_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrI20BasebandTransportMA"
                                "VEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrI20BasebandTransportMAVEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrI20BasebandTransportMAVEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<BasebandTransportMAV> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransportMAV>(BasebandTransportMAV*)::{lambda(BasebandTransportMAV*)#1}::operator() const(BasebandTransportMAV*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<BasebandTransportICE *,std::shared_ptr<BasebandTransportICE> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransportICE>(BasebandTransportICE*)::{lambda(BasebandTransportICE *)#1},std::allocator<BasebandTransportICE>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<BasebandTransportICE *,std::shared_ptr<BasebandTransportICE> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransportICE>(BasebandTransportICE*)::{lambda(BasebandTransportICE *)#1},std::allocator<BasebandTransportICE>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<BasebandTransportICE *,std::shared_ptr<BasebandTransportICE> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransportICE>(BasebandTransportICE*)::{lambda(BasebandTransportICE *)#1},std::allocator<BasebandTransportICE>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrI20BasebandTransportICEEENSt3__11"
                     "0shared_ptrIT_EEPS7_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrI20BasebandTransportIC"
                                "EEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrI20BasebandTransportICEEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrI20BasebandTransportICEEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<BasebandTransportICE> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransportICE>(BasebandTransportICE*)::{lambda(BasebandTransportICE*)#1}::operator() const(BasebandTransportICE*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<BasebandTransport *,std::shared_ptr<BasebandTransport> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransport>(BasebandTransport*)::{lambda(BasebandTransport *)#1},std::allocator<BasebandTransport>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<BasebandTransport *,std::shared_ptr<BasebandTransport> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransport>(BasebandTransport*)::{lambda(BasebandTransport *)#1},std::allocator<BasebandTransport>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<BasebandTransport *,std::shared_ptr<BasebandTransport> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransport>(BasebandTransport*)::{lambda(BasebandTransport *)#1},std::allocator<BasebandTransport>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrIS1_EENSt3__110shared_"
                                "ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<BasebandTransport> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransport>(BasebandTransport*)::{lambda(BasebandTransport*)#1}::operator() const(BasebandTransport*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void _ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb0_E3__0EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void (***)(const void *, _OWORD *, uint64_t, uint64_t, uint64_t))a1;
  long long v7 = *(_OWORD *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 40);
  v8[0] = *(_OWORD *)(a1 + 8);
  v8[1] = v7;
  v6[2](v6, v8, a3, a4, a5);
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  operator delete((void *)a1);
}

void sub_248B2D144(_Unwind_Exception *a1)
{
  if (*v1) {
    _Block_release(*v1);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb1_E3__1EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_(const void **a1)
{
  (*((void (**)(void))*a1 + 2))();
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  if (*a1) {
    _Block_release(*a1);
  }
  operator delete(a1);
}

void sub_248B2D1D4(_Unwind_Exception *a1)
{
  unint64_t v3 = *(void **)(v1 + 8);
  if (v3)
  {
    *(void *)(v1 + 16) = v3;
    operator delete(v3);
  }
  if (*(void *)v1) {
    _Block_release(*(const void **)v1);
  }
  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb1_E3__2EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_(void **a1)
{
  (*((void (**)(void))*a1 + 2))();
  if (!*((unsigned char *)a1 + 20))
  {
    free(a1[1]);
    uint64_t v2 = *a1;
    if (!*a1) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v2 = *a1;
  if (*a1) {
LABEL_5:
  }
    _Block_release(v2);
LABEL_6:
  operator delete(a1);
}

void sub_248B2D27C(_Unwind_Exception *a1)
{
  if (*v1) {
    _Block_release(*v1);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v7 = v6;
  uint64_t v8 = a1[2];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_26FCC86E8;
  void block[5] = v5;
  char v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = a2;
  dispatch_async(v8, block);
  long long v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c46_ZTSNSt3__110shared_ptrIK17BasebandTransportEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c46_ZTSNSt3__110shared_ptrIK17BasebandTransportEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void *BasebandTransportMAV::BasebandTransportMAV(void *a1, uint64_t *a2, NSObject **a3)
{
  dispatch_queue_t v4 = (std::__shared_weak_count *)a2[1];
  uint64_t v9 = *a2;
  long long v10 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *a3;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  BasebandTransport::BasebandTransport((uint64_t)a1, &v9, &object);
  if (object) {
    dispatch_release(object);
  }
  uint64_t v6 = v10;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *a1 = &unk_26FCC8740;
  return a1;
}

void sub_248B2D590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, char a11)
{
  if (object) {
    dispatch_release(object);
  }
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void BasebandTransportMAV::~BasebandTransportMAV(BasebandTransportMAV *this)
{
  BasebandTransport::~BasebandTransport(this);
  operator delete(v1);
}

uint64_t BasebandTransportMAV::switchDIAG_sync(BasebandTransportMAV *this)
{
  uint64_t v35 = 0;
  uint64_t v36 = &v35;
  uint64_t v37 = 0x2000000000;
  char v38 = 1;
  if (*((_DWORD *)this + 26) != 2) {
    goto LABEL_43;
  }
  uint64_t v2 = dispatch_queue_create("internal diag queue", 0);
  unint64_t v33 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v34 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v3 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v4 = off_269339C88;
  if (!off_269339C88)
  {
    CommandDriverFactory::create_default_global(v23, v3);
    long long v5 = *(_OWORD *)v23;
    *(_OWORD *)int v23 = 0uLL;
    uint64_t v6 = (std::__shared_weak_count *)*(&off_269339C88 + 1);
    off_269339C88 = v5;
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    long long v7 = (std::__shared_weak_count *)v23[1];
    if (v23[1] && !atomic_fetch_add((atomic_ullong *volatile)(v23[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    uint64_t v4 = off_269339C88;
  }
  uint64_t v8 = (std::__shared_weak_count *)*(&off_269339C88 + 1);
  uint64_t v31 = v4;
  uint64_t v32 = *(&off_269339C88 + 1);
  if (*(&off_269339C88 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_269339C88 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN20BasebandTransportMAV15switchDIAG_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_1;
  aBlock[4] = this;
  uint64_t v9 = _Block_copy(aBlock);
  if (v2) {
    dispatch_retain(v2);
  }
  uint64_t v29 = v9;
  dispatch_object_t v30 = v2;
  (*(void (**)(unint64_t *__return_ptr, uint64_t, const void **))(*(void *)v4 + 128))(&v33, v4, &v29);
  if (v30) {
    dispatch_release(v30);
  }
  if (v29) {
    _Block_release(v29);
  }
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  long long v10 = dispatch_group_create();
  BOOL v11 = v10;
  if (v10)
  {
    dispatch_retain(v10);
    dispatch_group_enter(v11);
  }
  unint64_t v12 = v33;
  v24[0] = MEMORY[0x263EF8330];
  v24[1] = 1174405120;
  v24[2] = ___ZN20BasebandTransportMAV15switchDIAG_syncEv_block_invoke_4;
  v24[3] = &unk_26FCC87A0;
  dispatch_group_t group = v11;
  if (v11)
  {
    dispatch_retain(v11);
    if (group) {
      dispatch_group_enter(group);
    }
  }
  v24[4] = &v35;
  long long v13 = _Block_copy(v24);
  if (v2) {
    dispatch_retain(v2);
  }
  int v26 = v13;
  dispatch_object_t object = v2;
  (*(void (**)(unint64_t, uint64_t, unint64_t, unint64_t, void **))(*(void *)v12 + 48))(v12, 1, 0xAAAAAAAA00000004, 0xAAAAAAAAAAAAAAAALL, &v26);
  if (object) {
    dispatch_release(object);
  }
  if (v26) {
    _Block_release(v26);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  if (!v11)
  {
    dispatch_time_t v16 = dispatch_time(0, 6000000000);
    dispatch_group_wait(0, v16);
    uint64_t v15 = (std::__shared_weak_count *)v34;
    if (!v34) {
      goto LABEL_41;
    }
LABEL_39:
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    goto LABEL_41;
  }
  dispatch_group_leave(v11);
  dispatch_release(v11);
  dispatch_time_t v14 = dispatch_time(0, 6000000000);
  dispatch_group_wait(v11, v14);
  dispatch_release(v11);
  uint64_t v15 = (std::__shared_weak_count *)v34;
  if (v34) {
    goto LABEL_39;
  }
LABEL_41:
  if (v2) {
    dispatch_release(v2);
  }
LABEL_43:
  uint64_t v17 = (char *)this + 8;
  char v18 = *((void *)this + 5);
  if (*((unsigned char *)v36 + 24))
  {
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v23[0]) = 0;
      _os_log_impl(&dword_248AFD000, v18, OS_LOG_TYPE_DEFAULT, "#I Switch succeeded", (uint8_t *)v23, 2u);
    }
    if ((**(unsigned int (***)(char *, uint64_t))v17)(v17, 40))
    {
      ctu::LogMessageBuffer::createWithFormat(v23, (ctu::LogMessageBuffer *)"Switch succeeded", v19);
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
LABEL_52:
      MEMORY[0x24C58AFD0](v23);
    }
  }
  else
  {
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v23[0]) = 0;
      _os_log_error_impl(&dword_248AFD000, v18, OS_LOG_TYPE_ERROR, "Switch failed", (uint8_t *)v23, 2u);
    }
    if ((**(unsigned int (***)(char *, uint64_t))v17)(v17, 80))
    {
      ctu::LogMessageBuffer::createWithFormat(v23, (ctu::LogMessageBuffer *)"Switch failed", v20);
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
      goto LABEL_52;
    }
  }
  uint64_t v21 = *((unsigned __int8 *)v36 + 24);
  _Block_object_dispose(&v35, 8);
  return v21;
}

void sub_248B2DB4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MEMORY[0x24C58AFD0](&a9);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_248B2DB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,dispatch_group_t group,char a22)
{
  dispatch::callback<void({block_pointer})(BOOL)>::~callback((uint64_t)&a22);
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  if (v23)
  {
    dispatch_group_leave(v23);
    dispatch_release(v23);
    dispatch_release(v23);
  }
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v24 - 96);
  if (v22)
  {
    dispatch_release(v22);
    _Block_object_dispose((const void *)(v24 - 80), 8);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x248B2DC34);
}

void sub_248B2DBEC(_Unwind_Exception *a1)
{
  dispatch::callback<void({block_pointer})(diag::CommandDriver::Event,dispatch::group_session)>::~callback(v2 - 128);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v2 - 112);
  if (v1)
  {
    dispatch_release(v1);
    _Block_object_dispose((const void *)(v2 - 80), 8);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x248B2DC34);
}

void sub_248B2DC30(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN20BasebandTransportMAV15switchDIAG_syncEv_block_invoke(uint64_t result, int a2)
{
  if (a2 == 1)
  {
    uint64_t v2 = *(void *)(result + 32);
    unint64_t v3 = (uint64_t (***)(void, uint64_t))(v2 + 8);
    uint64_t v4 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v6[0]) = 0;
      _os_log_debug_impl(&dword_248AFD000, v4, OS_LOG_TYPE_DEBUG, "#D Diag driver is started", (uint8_t *)v6, 2u);
    }
    uint64_t result = (**v3)(v3, 20);
    if (result)
    {
      ctu::LogMessageBuffer::createWithFormat(v6, (ctu::LogMessageBuffer *)"Diag driver is started", v5);
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
      return MEMORY[0x24C58AFD0](v6);
    }
  }
  return result;
}

uint64_t dispatch::callback<void({block_pointer})(diag::CommandDriver::Event,dispatch::group_session)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

uint64_t ___ZN20BasebandTransportMAV15switchDIAG_syncEv_block_invoke_4(uint64_t result, char a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  return result;
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(NSObject **)(a2 + 40);
  *(void *)(a1 + 40) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    uint64_t v4 = *(NSObject **)(a1 + 40);
    if (v4)
    {
      dispatch_group_enter(v4);
    }
  }
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 40);
  if (v2)
  {
    dispatch_group_leave(v2);
    unint64_t v3 = *(NSObject **)(a1 + 40);
    if (v3)
    {
      dispatch_release(v3);
    }
  }
}

uint64_t dispatch::callback<void({block_pointer})(BOOL)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

uint64_t ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t __cxx_global_var_init_9()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_248AFD000);
  }
  return result;
}

void TraceFile::create(long long *a1@<X0>, size_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X3>, void *a5@<X8>)
{
  long long v10 = operator new(0x60uLL);
  BOOL v11 = v10;
  unint64_t v12 = (std::__shared_weak_count *)a4[1];
  uint64_t v15 = *a4;
  dispatch_time_t v16 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  TraceFile::TraceFile((uint64_t)v10, a1, a2, a3, &v15);
  *a5 = v11;
  long long v13 = operator new(0x20uLL);
  *long long v13 = &unk_26FCC87F8;
  v13[1] = 0;
  void v13[2] = 0;
  v13[3] = v11;
  a5[1] = v13;
  dispatch_time_t v14 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
}

void sub_248B2E098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TraceFile::~TraceFile(v9);
  operator delete(v11);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_248B2E0B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t TraceFile::TraceFile(uint64_t a1, long long *a2, size_t size, int a4, void *a5)
{
  unsigned int v7 = size;
  uint64_t v27 = *MEMORY[0x263EF8340];
  *(_DWORD *)a1 = 0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v9 = *a2;
    *(void *)(a1 + 24) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v9;
  }
  *(void *)(a1 + 40) = *a5;
  *(void *)(a1 + 32) = 0;
  uint64_t v10 = a5[1];
  *(void *)(a1 + 48) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 68) = v7;
  *(_DWORD *)(a1 + 72) = a4;
  *(void *)(a1 + 88) = 0;
  if ((v7 & (v7 - 1)) != 0)
  {
    uint64_t v17 = *(NSObject **)(GetOsLogContext() + 8);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)fd_set buf = 0;
      _os_log_fault_impl(&dword_248AFD000, v17, OS_LOG_TYPE_FAULT, "Capacity must be the power of 2!", buf, 2u);
    }
    char v18 = *(NSObject **)(GetOsLogContext() + 8);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)fd_set buf = 136315906;
      *(void *)&uint8_t buf[4] = "ABM ASSERT";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "(!( fCapacity &(fCapacity - 1)))";
      __int16 v23 = 2080;
      uint64_t v24 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandServices/Tr"
            "ace/TraceFile.cpp";
      __int16 v25 = 1024;
      int v26 = 36;
      _os_log_fault_impl(&dword_248AFD000, v18, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", buf, 0x26u);
    }
    __break(1u);
  }
  if (v7 >= 0x200000)
  {
    BOOL v11 = (ctu::XpcJetsamAssertion *)pthread_mutex_lock(&ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance);
    if (!(void)xmmword_269339CD8)
    {
      ctu::XpcJetsamAssertion::create_default_global((uint64_t *)buf, v11);
      long long v12 = *(_OWORD *)buf;
      *(void *)fd_set buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      long long v13 = (std::__shared_weak_count *)*((void *)&xmmword_269339CD8 + 1);
      xmmword_269339CD8 = v12;
      if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
      dispatch_time_t v14 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    uint64_t v20 = (std::__shared_weak_count *)*((void *)&xmmword_269339CD8 + 1);
    if (*((void *)&xmmword_269339CD8 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_269339CD8 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance);
    std::string __p = (char *)operator new(0x20uLL);
    strcpy(__p, "Creating large trace file");
    ctu::XpcJetsamAssertion::createActivity();
    uint64_t v15 = *(std::__shared_weak_count **)(a1 + 88);
    *(_OWORD *)(a1 + 80) = v21;
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    operator delete(__p);
    if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
    unsigned int v7 = *(_DWORD *)(a1 + 68);
  }
  *(void *)(a1 + 32) = malloc_type_zone_malloc(**(malloc_zone_t ***)(a1 + 40), v7, 0xF258B947uLL);
  return a1;
}

void sub_248B2E4E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  pthread_mutex_unlock(&ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v19);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v18);
  if (*(char *)(v16 + 31) < 0) {
    operator delete(*v17);
  }
  _Unwind_Resume(a1);
}

void TraceFile::~TraceFile(TraceFile *this)
{
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    malloc_zone_free(**((malloc_zone_t ***)this + 5), v2);
    *((void *)this + 4) = 0;
  }
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 6);
  if (!v4 || atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((*((char *)this + 31) & 0x80000000) == 0) {
      return;
    }
LABEL_11:
    operator delete(*((void **)this + 1));
    return;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  if (*((char *)this + 31) < 0) {
    goto LABEL_11;
  }
}

uint64_t TraceFile::handleReadData(TraceFile *this, const unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  int v7 = *((_DWORD *)this + 16);
  int v6 = *((_DWORD *)this + 17);
  int v8 = v6 - v7;
  if (a3 <= v6 - v7)
  {
    int v9 = v7 + a3;
  }
  else if (*((unsigned char *)this + 72))
  {
    *((_DWORD *)this + 15) += a3 - v8;
    int v9 = v6;
  }
  else
  {
    int v9 = *((_DWORD *)this + 17);
    uint64_t v3 = (v6 - v7);
    if (!v8) {
      return (v6 - v7);
    }
  }
  *((_DWORD *)this + 16) = v9;
  int v11 = *((_DWORD *)this + 14);
  uint64_t v12 = v11 & (v6 - 1);
  size_t v13 = (v6 - v12);
  *((_DWORD *)this + 14) = v11 + v3;
  unsigned int v14 = v3 - v13;
  if (v3 <= v13)
  {
    unsigned int v14 = v3;
  }
  else
  {
    memcpy((void *)(*((void *)this + 4) + v12), __src, v13);
    uint64_t v12 = 0;
    v4 += v13;
  }
  memcpy((void *)(*((void *)this + 4) + v12), v4, v14);
  return v3;
}

BOOL TraceFile::writeToCompletion(TraceFile *this, int __fd, const unsigned __int8 *__buf, size_t __nbyte)
{
  size_t v6 = __nbyte;
  do
  {
    size_t v7 = v6;
    if (!v6) {
      break;
    }
    ssize_t v8 = write(__fd, __buf, v6);
    size_t v6 = v7 - v8;
    __buf += v8;
  }
  while ((v8 & 0x8000000000000000) == 0);
  return v7 == 0;
}

uint64_t TraceFile::writeToFile(uint64_t a1, char **a2)
{
  uint64_t v4 = (const char **)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    int v5 = open(*v4, 1537, 420);
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_3;
    }
    return 0;
  }
  int v5 = open((const char *)v4, 1537, 420);
  if (v5 < 0) {
    return 0;
  }
LABEL_3:
  int v6 = v5;
  int v7 = *(_DWORD *)(a1 + 60);
  int v8 = *(_DWORD *)(a1 + 68);
  uint64_t v10 = *a2;
  int v9 = a2[1];
  if (*a2 != v9)
  {
    size_t v11 = (v9 - v10);
    while (v11)
    {
      ssize_t v12 = write(v6, v10, v11);
      v11 -= v12;
      v10 += v12;
      if (v12 < 0)
      {
LABEL_21:
        uint64_t v20 = 0;
        goto LABEL_23;
      }
    }
  }
  unsigned int v13 = (v8 - 1) & v7;
  int v14 = v8 - v13;
  size_t v15 = *(unsigned int *)(a1 + 64);
  uint64_t v16 = (char *)(*(void *)(a1 + 32) + v13);
  if (v8 - v13 >= v15)
  {
    while (v15)
    {
      ssize_t v19 = write(v6, v16, v15);
      v15 -= v19;
      v16 += v19;
      if (v19 < 0) {
        goto LABEL_21;
      }
    }
  }
  else
  {
    size_t v17 = v8 - v13;
    while (v17)
    {
      ssize_t v18 = write(v6, v16, v17);
      v17 -= v18;
      v16 += v18;
      if (v18 < 0) {
        goto LABEL_21;
      }
    }
    long long v21 = *(char **)(a1 + 32);
    size_t v22 = (*(_DWORD *)(a1 + 64) - v14);
    while (v22)
    {
      ssize_t v23 = write(v6, v21, v22);
      v22 -= v23;
      v21 += v23;
      if (v23 < 0) {
        goto LABEL_21;
      }
    }
  }
  uint64_t v20 = 1;
  *(_DWORD *)a1 = 1;
  fsync(v6);
LABEL_23:
  close(v6);
  malloc_zone_free(**(malloc_zone_t ***)(a1 + 40), *(void **)(a1 + 32));
  *(void *)(a1 + 32) = 0;
  return v20;
}

void std::__shared_ptr_pointer<TraceFile *,std::shared_ptr<TraceFile>::__shared_ptr_default_delete<TraceFile,TraceFile>,std::allocator<TraceFile>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<TraceFile *,std::shared_ptr<TraceFile>::__shared_ptr_default_delete<TraceFile,TraceFile>,std::allocator<TraceFile>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(TraceFile **)(a1 + 24);
  if (v1)
  {
    TraceFile::~TraceFile(v1);
    operator delete(v2);
  }
}

uint64_t std::__shared_ptr_pointer<TraceFile *,std::shared_ptr<TraceFile>::__shared_ptr_default_delete<TraceFile,TraceFile>,std::allocator<TraceFile>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000248B4B039) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000248B4B039 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000248B4B039)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000248B4B039 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t __cxx_global_var_init_3()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance, &dword_248AFD000);
  }
  return result;
}

void abm::trace::TraceReader::create(uint64_t *a1@<X0>, NSObject **a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, void *a7@<X8>)
{
  int v14 = operator new(0xD8uLL);
  size_t v15 = v14;
  uint64_t v16 = (std::__shared_weak_count *)a1[1];
  uint64_t v21 = *a1;
  size_t v22 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  abm::trace::TraceReader::TraceReader((uint64_t)v14, &v21, a2, a3, a4, a5, a6);
  *a7 = v15;
  size_t v17 = (std::__shared_weak_count *)operator new(0x20uLL);
  v17->__shared_owners_ = 0;
  p_shared_owners = &v17->__shared_owners_;
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FCC8958;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v15;
  a7[1] = v17;
  ssize_t v19 = (std::__shared_weak_count *)*((void *)v15 + 10);
  if (!v19)
  {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v15 + 9) = v15;
    *((void *)v15 + 10) = v17;
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_14;
    }
LABEL_8:
    uint64_t v20 = v22;
    if (!v22) {
      return;
    }
    goto LABEL_9;
  }
  if (v19->__shared_owners_ != -1) {
    goto LABEL_8;
  }
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *((void *)v15 + 9) = v15;
  *((void *)v15 + 10) = v17;
  std::__shared_weak_count::__release_weak(v19);
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
LABEL_14:
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  uint64_t v20 = v22;
  if (!v22) {
    return;
  }
LABEL_9:
  if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_248B2ED30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_248B2ED6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t abm::trace::TraceReader::TraceReader(uint64_t a1, void *a2, NSObject **a3, char *__s, uint64_t a5, uint64_t a6, int a7)
{
  *(void *)a1 = &unk_26FCC8918;
  size_t v14 = strlen(__s);
  if (v14 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v15 = v14;
  uint64_t v37 = a3;
  if (v14 >= 0x17)
  {
    uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v17 = v14 | 7;
    }
    uint64_t v18 = v17 + 1;
    p_dst = (long long *)operator new(v17 + 1);
    *((void *)&__dst + 1) = v15;
    unint64_t v49 = v18 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v49) = v14;
  p_dst = &__dst;
  if (v14) {
LABEL_8:
  }
    memcpy(p_dst, __s, v15);
  *((unsigned char *)p_dst + v15) = 0;
  ctu::LoggerCommonBase::LoggerCommonBase();
  *(void *)(a1 + 8) = &unk_26FCC7378;
  *(void *)(a1 + 56) = *a2;
  uint64_t v19 = a2[1];
  *(void *)(a1 + 64) = v19;
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(v49) < 0) {
    operator delete((void *)__dst);
  }
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)a1 = &unk_26FCC8848;
  uint64_t v20 = (std::__shared_weak_count *)a2[1];
  uint64_t v46 = *a2;
  unint64_t v47 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v21 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_DEFAULT, 0);
  dispatch_object_t object = dispatch_queue_create("tracereader.queue", v21);
  BasebandTransport::create((capabilities::radio *)&v46, &object, a1 + 88);
  if (object) {
    dispatch_release(object);
  }
  size_t v22 = v47;
  if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  ssize_t v23 = (std::__shared_weak_count *)a2[1];
  uint64_t v43 = *a2;
  char v44 = v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  TraceFileCollection::create(&v43, a5, (void *)(a1 + 104));
  uint64_t v24 = v44;
  if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 168) = a7;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 208) = 0;
  if (a7 == 2)
  {
    __int16 v25 = (std::__shared_weak_count *)a2[1];
    uint64_t v41 = *a2;
    char v42 = v25;
    if (v25) {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    TraceFileCollection::create(&v41, a6, &__dst);
    long long v26 = __dst;
    long long __dst = 0uLL;
    uint64_t v27 = *(std::__shared_weak_count **)(a1 + 128);
    *(_OWORD *)(a1 + 120) = v26;
    if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
    uint64_t v28 = (std::__shared_weak_count *)*((void *)&__dst + 1);
    if (*((void *)&__dst + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&__dst + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
    uint64_t v29 = v42;
    if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
    a7 = *(_DWORD *)(a1 + 168);
  }
  if (a7 == 3)
  {
    dispatch_object_t v30 = (std::__shared_weak_count *)a2[1];
    uint64_t v39 = *a2;
    __int16 v40 = v30;
    if (v30) {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    TraceFileCollection::create(&v39, a6, &__dst);
    long long v31 = __dst;
    long long __dst = 0uLL;
    uint64_t v32 = *(std::__shared_weak_count **)(a1 + 128);
    *(_OWORD *)(a1 + 120) = v31;
    if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
    unint64_t v33 = (std::__shared_weak_count *)*((void *)&__dst + 1);
    if (*((void *)&__dst + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&__dst + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
    unint64_t v34 = v40;
    if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
    uint64_t v35 = (std::__shared_weak_count *)a2[1];
    v38[0] = *a2;
    v38[1] = (uint64_t)v35;
    if (v35) {
      atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    abm::trace::TraceReader::createStreamingInstance((void *)a1, v38, v37, __s);
    if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  return a1;
}

void sub_248B2F2F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, dispatch_object_t object,char a21)
{
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v26 + 80);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v26 + 64);
  if (*v22) {
    _Block_release(*v22);
  }
  if (*(char *)(v21 + 167) < 0) {
    operator delete(*(void **)(v21 + 144));
  }
  uint64_t v28 = *(const void **)(v21 + 136);
  if (v28) {
    _Block_release(v28);
  }
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v26);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v25);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v24);
  uint64_t v29 = *(std::__shared_weak_count **)(v21 + 80);
  if (v29) {
    std::__shared_weak_count::__release_weak(v29);
  }
  *(void *)uint64_t v21 = a10;
  MEMORY[0x24C58AF50](v23);
  _Unwind_Resume(a1);
}

void sub_248B2F3C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t abm::trace::TraceReader::createStreamingInstance(void *a1, uint64_t *a2, NSObject **a3, const char *a4)
{
  if (a1[25])
  {
    int v5 = (unsigned int (***)(void, uint64_t))(a1 + 1);
    int v6 = a1[5];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v19[0]) = 0;
      _os_log_error_impl(&dword_248AFD000, v6, OS_LOG_TYPE_ERROR, "Streaming instance exists!", (uint8_t *)v19, 2u);
    }
    if ((**v5)(v5, 80))
    {
      ctu::LogMessageBuffer::createWithFormat(v19, (ctu::LogMessageBuffer *)"Streaming instance exists!", v7);
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
      MEMORY[0x24C58AFD0](v19);
    }
    return 1;
  }
  uint64_t v9 = a2[1];
  uint64_t v21 = *a2;
  size_t v22 = (std::__shared_weak_count *)v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *a3;
  dispatch_object_t object = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  TraceStreamer::create(&v21, a4, 0, &object, v19);
  long long v11 = *(_OWORD *)v19;
  *(_OWORD *)uint64_t v19 = 0uLL;
  ssize_t v12 = (std::__shared_weak_count *)a1[26];
  *(_OWORD *)(a1 + 25) = v11;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  unsigned int v13 = (std::__shared_weak_count *)v19[1];
  if (v19[1] && !atomic_fetch_add((atomic_ullong *volatile)(v19[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (object) {
    dispatch_release(object);
  }
  size_t v14 = v22;
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (a1[25]) {
      return 1;
    }
  }
  else if (a1[25])
  {
    return 1;
  }
  uint64_t v16 = (uint64_t (***)(void, uint64_t))(a1 + 1);
  uint64_t v17 = a1[5];
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v19[0]) = 0;
    _os_log_error_impl(&dword_248AFD000, v17, OS_LOG_TYPE_ERROR, "Failed to create streaming instance", (uint8_t *)v19, 2u);
  }
  uint64_t result = (**v16)(v16, 80);
  if (result)
  {
    ctu::LogMessageBuffer::createWithFormat(v19, (ctu::LogMessageBuffer *)"Failed to create streaming instance", v18);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    MEMORY[0x24C58AFD0](v19);
    return 0;
  }
  return result;
}

void abm::trace::TraceReader::~TraceReader(abm::trace::TraceReader *this)
{
  *(void *)this = &unk_26FCC8848;
  uint64_t v3 = (void *)((char *)this + 88);
  uint64_t v2 = (BasebandTransport *)*((void *)this + 11);
  if (!v2) {
    goto LABEL_8;
  }
  BasebandTransport::close(v2);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 12);
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    int v5 = (std::__shared_weak_count *)*((void *)this + 12);
    void *v3 = 0;
    v3[1] = 0;
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
LABEL_8:
    uint64_t v6 = *((void *)this + 25);
    if (!v6) {
      goto LABEL_14;
    }
    goto LABEL_9;
  }
  void *v3 = 0;
  v3[1] = 0;
  uint64_t v6 = *((void *)this + 25);
  if (!v6) {
    goto LABEL_14;
  }
LABEL_9:
  (*(void (**)(uint64_t))(*(void *)v6 + 56))(v6);
  int v7 = *((void *)this + 5);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v17[0]) = 0;
    _os_log_impl(&dword_248AFD000, v7, OS_LOG_TYPE_DEFAULT, "#I Successfully stopped trace streamer!", (uint8_t *)v17, 2u);
  }
  if ((**((unsigned int (***)(char *, uint64_t))this + 1))((char *)this + 8, 40))
  {
    ctu::LogMessageBuffer::createWithFormat(v17, (ctu::LogMessageBuffer *)"Successfully stopped trace streamer!", v8);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    MEMORY[0x24C58AFD0](v17);
  }
LABEL_14:
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 24);
  if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    long long v11 = (const void *)*((void *)this + 22);
    if (!v11) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  long long v11 = (const void *)*((void *)this + 22);
  if (v11) {
LABEL_20:
  }
    _Block_release(v11);
LABEL_21:
  if ((*((char *)this + 167) & 0x80000000) == 0)
  {
    ssize_t v12 = (const void *)*((void *)this + 17);
    if (!v12) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  operator delete(*((void **)this + 18));
  ssize_t v12 = (const void *)*((void *)this + 17);
  if (v12) {
LABEL_25:
  }
    _Block_release(v12);
LABEL_26:
  unsigned int v13 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  size_t v14 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  size_t v15 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  *(void *)this = &unk_26FCC8918;
  MEMORY[0x24C58AF50]((char *)this + 8);
}

{
  void *v1;
  uint64_t vars8;

  abm::trace::TraceReader::~TraceReader(this);
  operator delete(v1);
}

uint64_t abm::trace::TraceReader::start(uint64_t a1, unsigned int *a2, int a3, const void **a4)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5)
  {
    uint64_t v10 = (unsigned int (***)(void, uint64_t))(a1 + 8);
    long long v11 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)fd_set buf = 0;
      _os_log_error_impl(&dword_248AFD000, v11, OS_LOG_TYPE_ERROR, "Transport is not ready!", buf, 2u);
    }
    if (!(**v10)(v10, 80)) {
      return 0;
    }
    ctu::LogMessageBuffer::createWithFormat((uint64_t *)buf, (ctu::LogMessageBuffer *)"Transport is not ready!", v12);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
LABEL_23:
    MEMORY[0x24C58AFD0](buf);
    return 0;
  }
  if (*(_DWORD *)(v5 + 328) == 1)
  {
    uint64_t v6 = (unsigned int (***)(void, uint64_t))(a1 + 8);
    int v7 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)fd_set buf = 0;
      _os_log_impl(&dword_248AFD000, v7, OS_LOG_TYPE_DEFAULT, "#I Transport is opened already", buf, 2u);
    }
    if ((**v6)(v6, 40))
    {
      ctu::LogMessageBuffer::createWithFormat((uint64_t *)buf, (ctu::LogMessageBuffer *)"Transport is opened already", v8);
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
      MEMORY[0x24C58AFD0](buf);
    }
    return 1;
  }
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN3abm5trace11TraceReader5startERKN17BasebandTransport10ParametersENSt3__16chrono8durationIxNS6_5ratioILl1ELl1EEEEEN8dispatch5blockIU13block_pointerFvNS2_6StatusEEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_2;
  aBlock[4] = a1;
  uint64_t v16 = _Block_copy(aBlock);
  uint64_t v17 = *(const void **)(a1 + 176);
  *(void *)(a1 + 176) = v16;
  if (v17) {
    _Block_release(v17);
  }
  uint64_t v18 = *(void *)(a1 + 200);
  if (v18 && ((*(uint64_t (**)(uint64_t))(*(void *)v18 + 48))(v18) & 1) == 0)
  {
    size_t v22 = (unsigned int (***)(void, uint64_t))(a1 + 8);
    uint64_t v23 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)fd_set buf = 0;
      _os_log_error_impl(&dword_248AFD000, v23, OS_LOG_TYPE_ERROR, "Failed to start trace streamer; either socket connection is alive or TCP stack is abnormal",
        buf,
        2u);
    }
    if (!(**v22)(v22, 80)) {
      return 0;
    }
    ctu::LogMessageBuffer::createWithFormat((uint64_t *)buf, (ctu::LogMessageBuffer *)"Failed to start trace streamer; either socket connection is alive or TCP stack is abnormal",
      v24);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    goto LABEL_23;
  }
  if ((*(_DWORD *)(a1 + 168) - 1) <= 2)
  {
    v57[0] = MEMORY[0x263EF8330];
    v57[1] = 0x40000000;
    v57[2] = ___ZN3abm5trace11TraceReader5startERKN17BasebandTransport10ParametersENSt3__16chrono8durationIxNS6_5ratioILl1ELl1EEEEEN8dispatch5blockIU13block_pointerFvNS2_6StatusEEEE_block_invoke_10;
    v57[3] = &__block_descriptor_tmp_14;
    v57[4] = a1;
    uint64_t v19 = _Block_copy(v57);
    uint64_t v20 = v19;
    if (v19) {
      uint64_t v21 = _Block_copy(v19);
    }
    else {
      uint64_t v21 = 0;
    }
    uint64_t v56 = v21;
    support::parsers::acp::ParserEngine::create((const void **)&v56, 1, (uint64_t *)buf);
    long long v25 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    uint64_t v26 = *(std::__shared_weak_count **)(a1 + 192);
    *(_OWORD *)(a1 + 184) = v25;
    if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
    uint64_t v27 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
    if (v56) {
      _Block_release(v56);
    }
    if (*(void *)(a1 + 184))
    {
      if (v20) {
        _Block_release(v20);
      }
      goto LABEL_37;
    }
    uint64_t v41 = (unsigned int (***)(void, uint64_t))(a1 + 8);
    char v42 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)fd_set buf = 0;
      _os_log_error_impl(&dword_248AFD000, v42, OS_LOG_TYPE_ERROR, "Failed to create packetParserEngine", buf, 2u);
    }
    if ((**v41)(v41, 80))
    {
      ctu::LogMessageBuffer::createWithFormat((uint64_t *)buf, (ctu::LogMessageBuffer *)"Failed to create packetParserEngine", v43);
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
      MEMORY[0x24C58AFD0](buf);
    }
    if (v20) {
      _Block_release(v20);
    }
    return 0;
  }
LABEL_37:
  uint64_t v29 = *(void *)(a1 + 72);
  uint64_t v28 = *(std::__shared_weak_count **)(a1 + 80);
  uint64_t v54 = v29;
  if (!v28 || (dispatch_object_t v30 = std::__shared_weak_count::lock(v28), (v55 = v30) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v52[0] = MEMORY[0x263EF8330];
  v52[1] = 1174405120;
  v52[2] = ___ZN3abm5trace11TraceReader5startERKN17BasebandTransport10ParametersENSt3__16chrono8durationIxNS6_5ratioILl1ELl1EEEEEN8dispatch5blockIU13block_pointerFvNS2_6StatusEEEE_block_invoke_16;
  v52[3] = &__block_descriptor_tmp_19_0;
  v52[4] = a1;
  v52[5] = v29;
  BOOL v53 = v30;
  atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v31 = _Block_copy(v52);
  uint64_t v32 = v31;
  uint64_t v33 = *(void *)(a1 + 88);
  long long v34 = *((_OWORD *)a2 + 1);
  v50[0] = *(_OWORD *)a2;
  v50[1] = v34;
  uint64_t v51 = *((void *)a2 + 4);
  if (v31) {
    uint64_t v35 = _Block_copy(v31);
  }
  else {
    uint64_t v35 = 0;
  }
  unint64_t v49 = v35;
  uint64_t v9 = (*(uint64_t (**)(uint64_t, _OWORD *, void **))(*(void *)v33 + 48))(v33, v50, &v49);
  if (v49) {
    _Block_release(v49);
  }
  if (v9)
  {
    uint64_t v36 = *(void *)(a1 + 88);
    if (*a4)
    {
      uint64_t v37 = _Block_copy(*a4);
      uint64_t v48 = v37;
      BasebandTransport::reportStatus(v36, a3, &v48);
      if (v37) {
        _Block_release(v37);
      }
    }
    else
    {
      uint64_t v48 = 0;
      BasebandTransport::reportStatus(v36, a3, &v48);
    }
  }
  else
  {
    char v38 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      BasebandTransport::asString(*a2, (char *)buf);
      unint64_t v47 = v60 >= 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)float64x2x2_t v61 = 136315138;
      *(void *)&v61[4] = v47;
      _os_log_error_impl(&dword_248AFD000, v38, OS_LOG_TYPE_ERROR, "Failed to open %s transport channel", v61, 0xCu);
      if (v60 < 0) {
        operator delete(*(void **)buf);
      }
    }
    if ((**(unsigned int (***)(uint64_t, uint64_t))(a1 + 8))(a1 + 8, 80))
    {
      BasebandTransport::asString(*a2, v61);
      __int16 v40 = v62 >= 0 ? v61 : *(unsigned char **)v61;
      ctu::LogMessageBuffer::createWithFormat((uint64_t *)buf, (ctu::LogMessageBuffer *)"Failed to open %s transport channel", v39, v40);
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
      MEMORY[0x24C58AFD0](buf);
      if (v62 < 0) {
        operator delete(*(void **)v61);
      }
    }
  }
  if (v32) {
    _Block_release(v32);
  }
  char v44 = v53;
  if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
  uint64_t v45 = v55;
  if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
  return v9;
}

void ___ZN3abm5trace11TraceReader5startERKN17BasebandTransport10ParametersENSt3__16chrono8durationIxNS6_5ratioILl1ELl1EEEEEN8dispatch5blockIU13block_pointerFvNS2_6StatusEEEE_block_invoke(uint64_t a1, TraceFileCollection **a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 32);
  if (*a2)
  {
    unsigned int Data = TraceFileCollection::handleReadData(*a2, a3, a4);
    if (TraceFileCollection::getInMemoryRemaining(*a2)) {
      goto LABEL_9;
    }
    uint64_t v9 = (unsigned int (***)(void, uint64_t))(v6 + 8);
    uint64_t v10 = *(NSObject **)(v6 + 40);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t block = 0;
      _os_log_debug_impl(&dword_248AFD000, v10, OS_LOG_TYPE_DEBUG, "#D Archiving", block, 2u);
    }
    if ((**v9)(v9, 20))
    {
      ctu::LogMessageBuffer::createWithFormat((uint64_t *)block, (ctu::LogMessageBuffer *)"Archiving", v11);
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
      MEMORY[0x24C58AFD0](block);
    }
    ssize_t v12 = *a2;
    uint64_t v13 = (uint64_t)*a2 + 72;
    v20[0] = MEMORY[0x263EF8330];
    v20[1] = 0x40000000;
    v20[2] = ___ZN19TraceFileCollection7archiveEb_block_invoke;
    void v20[3] = &__block_descriptor_tmp_7;
    v20[4] = v12;
    char v21 = 1;
    size_t v22 = v20;
    *(void *)uint64_t block = MEMORY[0x263EF8330];
    *(void *)&block[8] = 0x40000000;
    *(void *)&block[16] = ___ZNK3ctu20SharedSynchronizableI19TraceFileCollectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
    uint64_t v24 = &__block_descriptor_tmp_90;
    uint64_t v25 = v13;
    uint64_t v26 = &v22;
    size_t v14 = *((void *)v12 + 11);
    if (*((void *)v12 + 12))
    {
      dispatch_async_and_wait(v14, block);
LABEL_9:
      if (Data) {
        BOOL v15 = a4 > Data;
      }
      else {
        BOOL v15 = 0;
      }
      if (!v15) {
        return;
      }
LABEL_14:
      TraceFileCollection::handleReadData(*a2, &a3[Data], a4 - Data);
      return;
    }
    dispatch_sync(v14, block);
    if (Data) {
      BOOL v19 = a4 > Data;
    }
    else {
      BOOL v19 = 0;
    }
    if (v19) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v16 = *(NSObject **)(v6 + 40);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t block = 136315394;
      *(void *)&block[4] = "null";
      *(_WORD *)&block[12] = 1024;
      *(_DWORD *)&block[14] = a4;
      _os_log_error_impl(&dword_248AFD000, v16, OS_LOG_TYPE_ERROR, "File collection (%s) is not ready. Dropping received TRACE chunk size %u", block, 0x12u);
    }
    if ((**(unsigned int (***)(uint64_t, uint64_t))(v6 + 8))(v6 + 8, 80))
    {
      if (*a2) {
        uint64_t v18 = "not null";
      }
      else {
        uint64_t v18 = "null";
      }
      ctu::LogMessageBuffer::createWithFormat((uint64_t *)block, (ctu::LogMessageBuffer *)"File collection (%s) is not ready. Dropping received TRACE chunk size %u", v17, v18, a4);
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
      MEMORY[0x24C58AFD0](block);
    }
  }
}

void ___ZN3abm5trace11TraceReader5startERKN17BasebandTransport10ParametersENSt3__16chrono8durationIxNS6_5ratioILl1ELl1EEEEEN8dispatch5blockIU13block_pointerFvNS2_6StatusEEEE_block_invoke_10(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  BytePtr = CFDataGetBytePtr(*(CFDataRef *)(*(void *)a2 + 8));
  CFIndex Length = CFDataGetLength(*(CFDataRef *)(*(void *)a2 + 8));
  uint64_t v6 = (unsigned int (***)(uint64_t, uint64_t))(v3 + 8);
  int v7 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)fd_set buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = Length;
    _os_log_debug_impl(&dword_248AFD000, v7, OS_LOG_TYPE_DEBUG, "#D Writing Superframe of size %u bytes", buf, 8u);
  }
  if ((**v6)(v3 + 8, 20))
  {
    ctu::LogMessageBuffer::createWithFormat((uint64_t *)buf, (ctu::LogMessageBuffer *)"Writing Superframe of size %u bytes", v8, Length);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    MEMORY[0x24C58AFD0](buf);
  }
  int v9 = *(_DWORD *)(v3 + 168);
  switch(v9)
  {
    case 3:
      uint64_t v12 = *(void *)(v3 + 176);
      uint64_t v13 = *(std::__shared_weak_count **)(v3 + 128);
      *(void *)fd_set buf = *(void *)(v3 + 120);
      char v21 = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint8_t *, const UInt8 *, CFIndex))(v12 + 16))(v12, buf, BytePtr, Length);
      size_t v14 = v21;
      if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        uint64_t v15 = *(void *)(v3 + 200);
        if (v15) {
          goto LABEL_16;
        }
      }
      else
      {
        uint64_t v15 = *(void *)(v3 + 200);
        if (v15)
        {
LABEL_16:
          (*(void (**)(uint64_t, const UInt8 *, CFIndex))(*(void *)v15 + 72))(v15, BytePtr, Length);
          return;
        }
      }
      uint64_t v18 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)fd_set buf = 0;
        _os_log_error_impl(&dword_248AFD000, v18, OS_LOG_TYPE_ERROR, "streamer object gone!", buf, 2u);
      }
      if ((**v6)(v3 + 8, 80))
      {
        ctu::LogMessageBuffer::createWithFormat((uint64_t *)buf, (ctu::LogMessageBuffer *)"streamer object gone!", v19);
        ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
        MEMORY[0x24C58AFD0](buf);
      }
      return;
    case 2:
      uint64_t v10 = *(void *)(v3 + 176);
      uint64_t v16 = *(std::__shared_weak_count **)(v3 + 128);
      *(void *)fd_set buf = *(void *)(v3 + 120);
      char v21 = v16;
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      break;
    case 1:
      uint64_t v10 = *(void *)(v3 + 176);
      long long v11 = *(std::__shared_weak_count **)(v3 + 112);
      *(void *)fd_set buf = *(void *)(v3 + 104);
      char v21 = v11;
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      break;
    default:
      return;
  }
  (*(void (**)(uint64_t, uint8_t *, const UInt8 *, CFIndex))(v10 + 16))(v10, buf, BytePtr, Length);
  uint64_t v17 = v21;
  if (v21)
  {
    if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void ___ZN3abm5trace11TraceReader5startERKN17BasebandTransport10ParametersENSt3__16chrono8durationIxNS6_5ratioILl1ELl1EEEEEN8dispatch5blockIU13block_pointerFvNS2_6StatusEEEE_block_invoke_16(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(NSObject **)(v5 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(block) = 67109120;
    HIDWORD(block) = a3;
    _os_log_debug_impl(&dword_248AFD000, v6, OS_LOG_TYPE_DEBUG, "#D Received TRACE chunk size %u", (uint8_t *)&block, 8u);
  }
  if ((**(unsigned int (***)(uint64_t, uint64_t))(v5 + 8))(v5 + 8, 20))
  {
    ctu::LogMessageBuffer::createWithFormat(&block, (ctu::LogMessageBuffer *)"Received TRACE chunk size %u", v7, a3);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    MEMORY[0x24C58AFD0](&block);
  }
  int v8 = *(_DWORD *)(v5 + 168);
  if ((v8 - 2) < 2)
  {
    uint64_t v12 = *(void *)(v5 + 176);
    uint64_t v13 = *(void *)(v5 + 112);
    uint64_t block = *(void *)(v5 + 104);
    uint64_t v19 = v13;
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(v12 + 16))(v12, &block, a2, a3);
    size_t v14 = (std::__shared_weak_count *)v19;
    if (v19 && !atomic_fetch_add((atomic_ullong *volatile)(v19 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    goto LABEL_18;
  }
  if (v8 == 1)
  {
LABEL_18:
    v16[0] = *(void *)(v5 + 184);
    v16[1] = a2;
    int v17 = a3;
    uint64_t block = MEMORY[0x263EF8330];
    uint64_t v19 = 0x40000000;
    uint64_t v20 = ___ZNK3ctu20SharedSynchronizableIN7support7parsers3acp12ParserEngineEE20execute_wrapped_syncIZNS4_7addDataEPhjE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
    char v21 = &__block_descriptor_tmp_0;
    uint64_t v22 = v16[0] + 8;
    uint64_t v23 = v16;
    uint64_t v15 = *(NSObject **)(v16[0] + 24);
    if (*(void *)(v16[0] + 32)) {
      dispatch_async_and_wait(v15, &block);
    }
    else {
      dispatch_sync(v15, &block);
    }
    return;
  }
  if (!v8)
  {
    uint64_t v9 = *(void *)(v5 + 176);
    uint64_t v10 = *(void *)(v5 + 112);
    uint64_t block = *(void *)(v5 + 104);
    uint64_t v19 = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(v9 + 16))(v9, &block, a2, a3);
    long long v11 = (std::__shared_weak_count *)v19;
    if (v19)
    {
      if (!atomic_fetch_add((atomic_ullong *volatile)(v19 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
}

void sub_248B30DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_248B30DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c51_ZTSNSt3__110shared_ptrIN3abm5trace11TraceReaderEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c51_ZTSNSt3__110shared_ptrIN3abm5trace11TraceReaderEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t abm::trace::TraceReader::stop(abm::trace::TraceReader *this)
{
  uint64_t v2 = (BasebandTransport *)*((void *)this + 11);
  if (v2)
  {
    uint64_t v3 = BasebandTransport::close(v2);
    uint64_t v4 = *((void *)this + 25);
    if (!v4) {
      return v3;
    }
  }
  else
  {
    uint64_t v3 = 1;
    uint64_t v4 = *((void *)this + 25);
    if (!v4) {
      return v3;
    }
  }
  char v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 56))(v4);
  uint64_t v6 = (char *)this + 8;
  int v7 = *((void *)this + 5);
  if (v5)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v11[0]) = 0;
      _os_log_impl(&dword_248AFD000, v7, OS_LOG_TYPE_DEFAULT, "#I Successfully stopped trace streamer", (uint8_t *)v11, 2u);
    }
    if ((**(unsigned int (***)(char *, uint64_t))v6)(v6, 40))
    {
      ctu::LogMessageBuffer::createWithFormat(v11, (ctu::LogMessageBuffer *)"Successfully stopped trace streamer", v8);
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
      MEMORY[0x24C58AFD0](v11);
      return v3;
    }
    return v3;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v11[0]) = 0;
    _os_log_error_impl(&dword_248AFD000, v7, OS_LOG_TYPE_ERROR, "Failed to stop trace streamer", (uint8_t *)v11, 2u);
  }
  if ((**(unsigned int (***)(char *, uint64_t))v6)(v6, 80))
  {
    ctu::LogMessageBuffer::createWithFormat(v11, (ctu::LogMessageBuffer *)"Failed to stop trace streamer", v10);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    MEMORY[0x24C58AFD0](v11);
  }
  return 0;
}

uint64_t abm::trace::TraceReader::snapshot(uint64_t a1, const __CFDictionary **a2, unsigned int a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v159 = *MEMORY[0x263EF8340];
  v154[0] = 0xAAAAAAAAAAAAAAAALL;
  v154[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v154, *a2);
  memset(v153, 170, sizeof(v153));
  int v8 = (const void *)*MEMORY[0x263F25F88];
  size_t v9 = strlen((const char *)*MEMORY[0x263F25F88]);
  if (v9 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v12 = v9 | 7;
    }
    uint64_t v13 = v12 + 1;
    p_dst = (std::string *)operator new(v12 + 1);
    __dst.__r_.__value_.__l.__size_ = v10;
    __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v9;
  p_dst = &__dst;
  if (v9) {
LABEL_8:
  }
    memmove(p_dst, v8, v10);
  size_t v14 = (const char *)*MEMORY[0x263F26030];
  p_dst->__r_.__value_.__s.__data_[v10] = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v146, v14);
  ctu::cf::map_adapter::getString();
  MEMORY[0x24C58B050](v146);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  memset(v152, 170, sizeof(v152));
  uint64_t v15 = (const void *)*MEMORY[0x263F26768];
  size_t v16 = strlen((const char *)*MEMORY[0x263F26768]);
  if (v16 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v17 = v16;
  if (v16 >= 0x17)
  {
    uint64_t v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17) {
      uint64_t v19 = v16 | 7;
    }
    uint64_t v20 = v19 + 1;
    uint64_t v18 = (std::string *)operator new(v19 + 1);
    __dst.__r_.__value_.__l.__size_ = v17;
    __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
    goto LABEL_18;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v16;
  uint64_t v18 = &__dst;
  if (v16) {
LABEL_18:
  }
    memmove(v18, v15, v17);
  char v21 = (const char *)*MEMORY[0x263F25ED8];
  v18->__r_.__value_.__s.__data_[v17] = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v146, v21);
  ctu::cf::map_adapter::getString();
  MEMORY[0x24C58B050](v146);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  memset(__s1, 170, sizeof(__s1));
  uint64_t v22 = (const void *)*MEMORY[0x263F26230];
  size_t v23 = strlen((const char *)*MEMORY[0x263F26230]);
  if (v23 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v24 = v23;
  if (v23 >= 0x17)
  {
    uint64_t v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17) {
      uint64_t v26 = v23 | 7;
    }
    uint64_t v27 = v26 + 1;
    uint64_t v25 = (std::string *)operator new(v26 + 1);
    __dst.__r_.__value_.__l.__size_ = v24;
    __dst.__r_.__value_.__r.__words[2] = v27 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    goto LABEL_28;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v23;
  uint64_t v25 = &__dst;
  if (v23) {
LABEL_28:
  }
    memmove(v25, v22, v24);
  uint64_t v28 = (const char *)*MEMORY[0x263F26150];
  v25->__r_.__value_.__s.__data_[v24] = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v146, v28);
  ctu::cf::map_adapter::getString();
  MEMORY[0x24C58B050](v146);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  memset(&v150, 170, sizeof(v150));
  uint64_t v29 = abm::trace::kSnapshotFolder;
  size_t v30 = strlen(abm::trace::kSnapshotFolder);
  if (v30 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  long long v31 = (void *)v30;
  if (v30 >= 0x17)
  {
    uint64_t v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17) {
      uint64_t v33 = v30 | 7;
    }
    uint64_t v34 = v33 + 1;
    uint64_t v32 = operator new(v33 + 1);
    v148[1] = v31;
    v148[2] = (void *)(v34 | 0x8000000000000000);
    v148[0] = v32;
    goto LABEL_38;
  }
  HIBYTE(v148[2]) = v30;
  uint64_t v32 = v148;
  if (v30) {
LABEL_38:
  }
    memmove(v32, v29, (size_t)v31);
  uint64_t v35 = (const char *)*MEMORY[0x263F26218];
  *((unsigned char *)v31 + (void)v32) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)__p, v35);
  ctu::cf::map_adapter::getString();
  MEMORY[0x24C58B050](__p);
  uint64_t v36 = abm::trace::kLogDirPrefix;
  size_t v37 = strlen(abm::trace::kLogDirPrefix);
  if (v37 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  char v38 = (void *)v37;
  if (v37 >= 0x17)
  {
    uint64_t v40 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v37 | 7) != 0x17) {
      uint64_t v40 = v37 | 7;
    }
    uint64_t v41 = v40 + 1;
    uint64_t v39 = operator new(v40 + 1);
    __p[1] = v38;
    __p[2] = (void *)(v41 | 0x8000000000000000);
    __p[0] = v39;
    goto LABEL_46;
  }
  HIBYTE(__p[2]) = v37;
  uint64_t v39 = __p;
  if (v37) {
LABEL_46:
  }
    memmove(v39, v36, (size_t)v38);
  *((unsigned char *)v38 + (void)v39) = 0;
  if (SHIBYTE(__p[2]) >= 0) {
    char v42 = __p;
  }
  else {
    char v42 = (void **)__p[0];
  }
  if (SHIBYTE(__p[2]) >= 0) {
    std::string::size_type v43 = HIBYTE(__p[2]);
  }
  else {
    std::string::size_type v43 = (std::string::size_type)__p[1];
  }
  char v44 = std::string::append(&v149, (const std::string::value_type *)v42, v43);
  long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  *(void *)&v146[16] = *((void *)&v44->__r_.__value_.__l + 2);
  *(_OWORD *)v146 = v45;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v153[2]) >= 0) {
    uint64_t v46 = (const std::string::value_type *)v153;
  }
  else {
    uint64_t v46 = (const std::string::value_type *)v153[0];
  }
  if (SHIBYTE(v153[2]) >= 0) {
    std::string::size_type v47 = HIBYTE(v153[2]);
  }
  else {
    std::string::size_type v47 = (std::string::size_type)v153[1];
  }
  uint64_t v48 = std::string::append((std::string *)v146, v46, v47);
  long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v49;
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  unint64_t v50 = std::string::append(&__dst, abm::trace::kICETraceSnapshotDirectorySuffix);
  long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  v150.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v51;
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((v146[23] & 0x80000000) == 0)
    {
LABEL_61:
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
        goto LABEL_62;
      }
      goto LABEL_82;
    }
  }
  else if ((v146[23] & 0x80000000) == 0)
  {
    goto LABEL_61;
  }
  operator delete(*(void **)v146);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
LABEL_62:
    if ((SHIBYTE(v149.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_63;
    }
LABEL_83:
    operator delete(v149.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v148[2]) & 0x80000000) == 0) {
      goto LABEL_64;
    }
    goto LABEL_84;
  }
LABEL_82:
  operator delete(__p[0]);
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_83;
  }
LABEL_63:
  if ((SHIBYTE(v148[2]) & 0x80000000) == 0) {
    goto LABEL_64;
  }
LABEL_84:
  operator delete(v148[0]);
LABEL_64:
  *(void *)&long long v52 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v52 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v146 = v52;
  *(_OWORD *)&v146[16] = v52;
  v146[0] = 0;
  v146[24] = 0;
  int v53 = *(_DWORD *)(a1 + 168);
  if ((v53 - 2) < 2)
  {
    int v54 = SHIBYTE(v150.__r_.__value_.__r.__words[2]);
    if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v150.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v150.__r_.__value_.__l.__size_;
    }
    unint64_t v56 = size + 5;
    memset(&__dst, 170, sizeof(__dst));
    if (size + 5 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v56 >= 0x17)
    {
      uint64_t v62 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v56 | 7) != 0x17) {
        uint64_t v62 = v56 | 7;
      }
      uint64_t v63 = v62 + 1;
      unint64_t v57 = (std::string *)operator new(v62 + 1);
      __dst.__r_.__value_.__l.__size_ = size + 5;
      __dst.__r_.__value_.__r.__words[2] = v63 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v57;
    }
    else
    {
      memset(&__dst, 0, sizeof(__dst));
      unint64_t v57 = &__dst;
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = size + 5;
      if (!size)
      {
LABEL_92:
        strcpy((char *)v57 + size, "-live");
        *(std::string *)v146 = __dst;
        v146[24] = 1;
        goto LABEL_103;
      }
    }
    if (v54 >= 0) {
      float64x2x2_t v64 = &v150;
    }
    else {
      float64x2x2_t v64 = (std::string *)v150.__r_.__value_.__r.__words[0];
    }
    memmove(v57, v64, size);
    goto LABEL_92;
  }
  if (v53 != 1) {
    goto LABEL_103;
  }
  int v58 = SHIBYTE(v150.__r_.__value_.__r.__words[2]);
  if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v59 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v59 = v150.__r_.__value_.__l.__size_;
  }
  unint64_t v60 = v59 + 5;
  memset(&__dst, 170, sizeof(__dst));
  if (v59 + 5 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v60 >= 0x17)
  {
    uint64_t v65 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v60 | 7) != 0x17) {
      uint64_t v65 = v60 | 7;
    }
    uint64_t v66 = v65 + 1;
    float64x2x2_t v61 = (std::string *)operator new(v65 + 1);
    __dst.__r_.__value_.__l.__size_ = v59 + 5;
    __dst.__r_.__value_.__r.__words[2] = v66 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v61;
    goto LABEL_96;
  }
  memset(&__dst, 0, sizeof(__dst));
  float64x2x2_t v61 = &__dst;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v59 + 5;
  if (v59)
  {
LABEL_96:
    if (v58 >= 0) {
      uint64_t v67 = &v150;
    }
    else {
      uint64_t v67 = (std::string *)v150.__r_.__value_.__r.__words[0];
    }
    memmove(v61, v67, v59);
  }
  strcpy((char *)v61 + v59, "-live");
  if (v58 < 0) {
    operator delete(v150.__r_.__value_.__l.__data_);
  }
  std::string v150 = __dst;
LABEL_103:
  memset(&v149, 170, sizeof(v149));
  uint64_t v68 = (const char *)*MEMORY[0x263F263C0];
  memset(&__dst, 0, sizeof(__dst));
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v148, v68);
  ctu::cf::map_adapter::getString();
  MEMORY[0x24C58B050](v148);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  memset(v148, 170, sizeof(v148));
  unint64_t v69 = (const char *)*MEMORY[0x263F26000];
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__dst, "Unknown");
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)__p, v69);
  ctu::cf::map_adapter::getString();
  MEMORY[0x24C58B050](__p);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    uint64_t v70 = (const void *)strlen((const char *)v22);
    long long v71 = (const void *)HIBYTE(__s1[2]);
    if ((SHIBYTE(__s1[2]) & 0x80000000) == 0) {
      goto LABEL_107;
    }
LABEL_113:
    if (v70 != __s1[1])
    {
      std::vector<std::string>::pointer v73 = (unsigned int (***)(void, uint64_t))(a1 + 8);
      uint64_t v74 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
      {
LABEL_135:
        uint64_t v86 = (const void **)__s1[0];
        goto LABEL_136;
      }
      goto LABEL_137;
    }
    if (v70 == (const void *)-1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v72 = (capabilities::radio *)memcmp(__s1[0], v22, (size_t)v70);
    if (v72) {
      goto LABEL_109;
    }
    goto LABEL_116;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  uint64_t v70 = (const void *)strlen((const char *)v22);
  long long v71 = (const void *)HIBYTE(__s1[2]);
  if (SHIBYTE(__s1[2]) < 0) {
    goto LABEL_113;
  }
LABEL_107:
  if (v70 != v71)
  {
    std::vector<std::string>::pointer v73 = (unsigned int (***)(void, uint64_t))(a1 + 8);
    uint64_t v74 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_133;
    }
    goto LABEL_137;
  }
  uint64_t v72 = (capabilities::radio *)memcmp(__s1, v22, (size_t)v70);
  if (v72)
  {
LABEL_109:
    std::vector<std::string>::pointer v73 = (unsigned int (***)(void, uint64_t))(a1 + 8);
    uint64_t v74 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
    {
      if ((v71 & 0x80) != 0) {
        goto LABEL_135;
      }
LABEL_133:
      uint64_t v86 = __s1;
LABEL_136:
      LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v86;
      _os_log_impl(&dword_248AFD000, v74, OS_LOG_TYPE_DEFAULT, "#I Skipping snapshot as trace filter is '%s'", (uint8_t *)&__dst, 0xCu);
    }
LABEL_137:
    if (!(**v73)(v73, 40)) {
      goto LABEL_142;
    }
    uint64_t v88 = __s1;
    if (SHIBYTE(__s1[2]) < 0) {
      uint64_t v88 = (const void **)__s1[0];
    }
    ctu::LogMessageBuffer::createWithFormat((uint64_t *)&__dst, (ctu::LogMessageBuffer *)"Skipping snapshot as trace filter is '%s'", v87, v88);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    goto LABEL_141;
  }
LABEL_116:
  if (!*(void *)(a1 + 88))
  {
    std::vector<std::ssub_match>::pointer v90 = (unsigned int (***)(void, uint64_t))(a1 + 8);
    std::vector<std::string>::pointer v91 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_248AFD000, v91, OS_LOG_TYPE_ERROR, "Transport is not ready!", (uint8_t *)&__dst, 2u);
    }
    if (!(**v90)(v90, 80)) {
      goto LABEL_142;
    }
    ctu::LogMessageBuffer::createWithFormat((uint64_t *)&__dst, (ctu::LogMessageBuffer *)"Transport is not ready!", v92);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
LABEL_141:
    MEMORY[0x24C58AFD0](&__dst);
    goto LABEL_142;
  }
  if (!*(void *)(a1 + 104))
  {
    uint64_t v93 = (unsigned int (***)(void, uint64_t))(a1 + 8);
    uint64_t v94 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_248AFD000, v94, OS_LOG_TYPE_ERROR, "File Collection is not ready!", (uint8_t *)&__dst, 2u);
    }
    if (!(**v93)(v93, 80)) {
      goto LABEL_142;
    }
    ctu::LogMessageBuffer::createWithFormat((uint64_t *)&__dst, (ctu::LogMessageBuffer *)"File Collection is not ready!", v95);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    goto LABEL_141;
  }
  if ((*(_DWORD *)(a1 + 168) & 0xFFFFFFFE) != 2 || *(void *)(a1 + 120))
  {
    memset(__p, 170, 24);
    capabilities::radio::firmwarePrefix((uint64_t *)&v144, v72);
    uint64_t v75 = std::string::insert(&v144, 0, "Baseband Trace\nBBFW Version: ");
    long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
    v145.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v145.__r_.__value_.__l.__data_ = v76;
    v75->__r_.__value_.__l.__size_ = 0;
    v75->__r_.__value_.__r.__words[2] = 0;
    v75->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v148[2]) >= 0) {
      unint64_t v77 = v148;
    }
    else {
      unint64_t v77 = (void **)v148[0];
    }
    if (SHIBYTE(v148[2]) >= 0) {
      std::string::size_type v78 = HIBYTE(v148[2]);
    }
    else {
      std::string::size_type v78 = (std::string::size_type)v148[1];
    }
    long long v79 = std::string::append(&v145, (const std::string::value_type *)v77, v78);
    long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v80;
    v79->__r_.__value_.__l.__size_ = 0;
    v79->__r_.__value_.__r.__words[2] = 0;
    v79->__r_.__value_.__r.__words[0] = 0;
    long long v81 = std::string::append(&__dst, "\n");
    long long v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
    __p[2] = (void *)v81->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v82;
    v81->__r_.__value_.__l.__size_ = 0;
    v81->__r_.__value_.__r.__words[2] = 0;
    v81->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v145.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_128:
        if ((SHIBYTE(v144.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_129;
        }
LABEL_169:
        operator delete(v144.__r_.__value_.__l.__data_);
LABEL_129:
        uint64_t v83 = (void *)strlen((const char *)*MEMORY[0x263F25F70]);
        size_t v84 = (size_t)v83;
        if (SHIBYTE(v152[2]) < 0)
        {
          if (v83 != v152[1]) {
            goto LABEL_174;
          }
          if (v83 == (void *)-1) {
            std::string::__throw_out_of_range[abi:ne180100]();
          }
          int v85 = (void **)v152[0];
        }
        else
        {
          if (v83 != (void *)HIBYTE(v152[2])) {
            goto LABEL_174;
          }
          int v85 = v152;
        }
        if (!memcmp(v85, (const void *)*MEMORY[0x263F25F70], v84))
        {
          BasebandTransport::close(*(BasebandTransport **)(a1 + 88));
LABEL_175:
          uint64_t v96 = *a4;
          if (!*a4) {
            goto LABEL_182;
          }
          if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v143, v150.__r_.__value_.__l.__data_, v150.__r_.__value_.__l.__size_);
          }
          else {
            std::string v143 = v150;
          }
          Timestamp::Timestamp((Timestamp *)&v142);
          *((unsigned char *)&v141.__r_.__value_.__s + 23) = 0;
          v141.__r_.__value_.__s.__data_[0] = 0;
          *((unsigned char *)&v140.__r_.__value_.__s + 23) = 0;
          v140.__r_.__value_.__s.__data_[0] = 0;
          abm::trace::TraceInfo::push(v96, 9, &v143, &v142, &v141, &v140);
          if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v140.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v141.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_181:
              std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v142, *((void **)&v142 + 1));
              if ((SHIBYTE(v143.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_182;
              }
              goto LABEL_188;
            }
          }
          else if ((SHIBYTE(v141.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_181;
          }
          operator delete(v141.__r_.__value_.__l.__data_);
          std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v142, *((void **)&v142 + 1));
          if ((SHIBYTE(v143.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_182:
            uint64_t v97 = *a5;
            if (!*a5) {
              goto LABEL_199;
            }
LABEL_183:
            if (!v146[24]) {
              goto LABEL_199;
            }
            if ((v146[23] & 0x80000000) != 0) {
              std::string::__init_copy_ctor_external(&v139, *(const std::string::value_type **)v146, *(std::string::size_type *)&v146[8]);
            }
            else {
              std::string v139 = *(std::string *)v146;
            }
            Timestamp::Timestamp((Timestamp *)&v138);
            *((unsigned char *)&v137.__r_.__value_.__s + 23) = 0;
            v137.__r_.__value_.__s.__data_[0] = 0;
            *((unsigned char *)&v136.__r_.__value_.__s + 23) = 0;
            v136.__r_.__value_.__s.__data_[0] = 0;
            abm::trace::TraceInfo::push(v97, 9, &v139, &v138, &v137, &v136);
            if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v136.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v137.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_198:
                std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v138, *((void **)&v138 + 1));
                if ((SHIBYTE(v139.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_199;
                }
LABEL_255:
                operator delete(v139.__r_.__value_.__l.__data_);
                long long v101 = (unsigned int (***)(void, uint64_t))(a1 + 8);
                uint64_t v102 = *(NSObject **)(a1 + 40);
                if (!os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_203;
                }
                goto LABEL_200;
              }
            }
            else if ((SHIBYTE(v137.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_198;
            }
            operator delete(v137.__r_.__value_.__l.__data_);
            std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v138, *((void **)&v138 + 1));
            if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_255;
            }
LABEL_199:
            long long v101 = (unsigned int (***)(void, uint64_t))(a1 + 8);
            uint64_t v102 = *(NSObject **)(a1 + 40);
            if (!os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_203;
            }
LABEL_200:
            uint64_t v103 = v148;
            if (SHIBYTE(v148[2]) < 0) {
              uint64_t v103 = (void **)v148[0];
            }
            LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v103;
            _os_log_impl(&dword_248AFD000, v102, OS_LOG_TYPE_DEFAULT, "#I Snapshot: BBFW=%s", (uint8_t *)&__dst, 0xCu);
LABEL_203:
            if ((**v101)(v101, 40))
            {
              char v105 = v148;
              if (SHIBYTE(v148[2]) < 0) {
                char v105 = (void **)v148[0];
              }
              ctu::LogMessageBuffer::createWithFormat((uint64_t *)&__dst, (ctu::LogMessageBuffer *)"Snapshot: BBFW=%s", v104, v105);
              ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
              MEMORY[0x24C58AFD0](&__dst);
            }
            std::ctype_base::mask v106 = *(NSObject **)(a1 + 40);
            if (os_log_type_enabled(v106, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v107 = &v150;
              if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                uint64_t v107 = (std::string *)v150.__r_.__value_.__r.__words[0];
              }
              LODWORD(__dst.__r_.__value_.__l.__data_) = 136315394;
              *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v107;
              WORD2(__dst.__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&__dst.__r_.__value_.__r.__words[1] + 6) = a3;
              _os_log_impl(&dword_248AFD000, v106, OS_LOG_TYPE_DEFAULT, "#I Snapshot: Path=%s [move=%d]", (uint8_t *)&__dst, 0x12u);
            }
            if ((**v101)(v101, 40))
            {
              uint64_t v109 = &v150;
              if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                uint64_t v109 = (std::string *)v150.__r_.__value_.__r.__words[0];
              }
              ctu::LogMessageBuffer::createWithFormat((uint64_t *)&__dst, (ctu::LogMessageBuffer *)"Snapshot: Path=%s [move=%d]", v108, v109, a3);
              ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
              MEMORY[0x24C58AFD0](&__dst);
            }
            uint64_t v110 = *(void *)(a1 + 88);
            __dst.__r_.__value_.__r.__words[0] = MEMORY[0x263EF8330];
            __dst.__r_.__value_.__l.__size_ = 0x40000000;
            __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN17BasebandTransport9dumpStateEb_block_invoke;
            v156 = &__block_descriptor_tmp_99;
            uint64_t v157 = v110;
            char v158 = 1;
            ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped((uint64_t *)(v110 + 72), (uint64_t)&__dst);
            uint64_t v111 = *(void *)(a1 + 200);
            if (!v111) {
              goto LABEL_235;
            }
            v145.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            (*(void (**)(std::string *__return_ptr))(*(void *)v111 + 64))(&v145);
            if (MEMORY[0x24C58BF40](v145.__r_.__value_.__r.__words[0]) != MEMORY[0x263EF8708])
            {
              v112 = *(NSObject **)(a1 + 40);
              if (os_log_type_enabled(v112, OS_LOG_TYPE_ERROR))
              {
                LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
                _os_log_error_impl(&dword_248AFD000, v112, OS_LOG_TYPE_ERROR, "get empty stats", (uint8_t *)&__dst, 2u);
              }
              if ((**v101)(v101, 80))
              {
                ctu::LogMessageBuffer::createWithFormat((uint64_t *)&__dst, (ctu::LogMessageBuffer *)"get empty stats", v113);
                ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
                MEMORY[0x24C58AFD0](&__dst);
              }
            }
            uint64_t v114 = *a4;
            std::string::size_type v115 = (const void *)*MEMORY[0x263F262F0];
            size_t v116 = strlen((const char *)*MEMORY[0x263F262F0]);
            if (v116 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            std::string::size_type v117 = v116;
            if (v116 >= 0x17)
            {
              uint64_t v119 = (v116 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v116 | 7) != 0x17) {
                uint64_t v119 = v116 | 7;
              }
              uint64_t v120 = v119 + 1;
              uint64_t v118 = (std::string *)operator new(v119 + 1);
              __dst.__r_.__value_.__l.__size_ = v117;
              __dst.__r_.__value_.__r.__words[2] = v120 | 0x8000000000000000;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v118;
            }
            else
            {
              *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v116;
              uint64_t v118 = &__dst;
              if (!v116) {
                goto LABEL_229;
              }
            }
            memmove(v118, v115, v117);
LABEL_229:
            v118->__r_.__value_.__s.__data_[v117] = 0;
            xpc_object_t v121 = (xpc_object_t)v145.__r_.__value_.__r.__words[0];
            std::string::size_type v135 = v145.__r_.__value_.__r.__words[0];
            if (v145.__r_.__value_.__r.__words[0])
            {
              xpc_retain(v145.__r_.__value_.__l.__data_);
            }
            else
            {
              xpc_object_t v121 = xpc_null_create();
              std::string::size_type v135 = (std::string::size_type)v121;
            }
            abm::trace::TraceInfo::push(v114, (uint64_t)&__dst, &v135);
            xpc_release(v121);
            std::string::size_type v135 = 0;
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__dst.__r_.__value_.__l.__data_);
            }
            xpc_release(v145.__r_.__value_.__l.__data_);
LABEL_235:
            uint64_t v122 = *(void *)(a1 + 104);
            uint64_t v123 = a4[1];
            uint64_t v133 = *a4;
            BOOL v134 = (std::__shared_weak_count *)v123;
            if (v123) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v123 + 8), 1uLL, memory_order_relaxed);
            }
            TraceFileCollection::snapshot(v122, (uint64_t)&v150, (uint64_t)&v149, (uint64_t)__p, a3, &v133);
            unint64_t v124 = v134;
            if (v134 && !atomic_fetch_add(&v134->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
              std::__shared_weak_count::__release_weak(v124);
            }
            uint64_t v125 = *(void *)(a1 + 120);
            if (v125 && v146[24])
            {
              uint64_t v126 = a5[1];
              uint64_t v131 = *a5;
              uint64_t v132 = (std::__shared_weak_count *)v126;
              if (v126) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v126 + 8), 1uLL, memory_order_relaxed);
              }
              TraceFileCollection::snapshot(v125, (uint64_t)v146, (uint64_t)&v149, (uint64_t)__p, a3, &v131);
              char v127 = v132;
              if (v132 && !atomic_fetch_add(&v132->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                std::__shared_weak_count::__release_weak(v127);
              }
            }
            char v128 = *(NSObject **)(a1 + 40);
            if (os_log_type_enabled(v128, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
              _os_log_impl(&dword_248AFD000, v128, OS_LOG_TYPE_DEFAULT, "#I snapshot complete", (uint8_t *)&__dst, 2u);
            }
            if ((**v101)(v101, 40))
            {
              ctu::LogMessageBuffer::createWithFormat((uint64_t *)&__dst, (ctu::LogMessageBuffer *)"snapshot complete", v129);
              ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
              MEMORY[0x24C58AFD0](&__dst);
            }
            if (SHIBYTE(__p[2]) < 0) {
              operator delete(__p[0]);
            }
            goto LABEL_142;
          }
LABEL_188:
          operator delete(v143.__r_.__value_.__l.__data_);
          uint64_t v97 = *a5;
          if (!*a5) {
            goto LABEL_199;
          }
          goto LABEL_183;
        }
LABEL_174:
        a3 = 1;
        goto LABEL_175;
      }
    }
    else if ((SHIBYTE(v145.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_128;
    }
    operator delete(v145.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v144.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_129;
    }
    goto LABEL_169;
  }
  BOOL v98 = (unsigned int (***)(void, uint64_t))(a1 + 8);
  long long v99 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
  {
    LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
    _os_log_error_impl(&dword_248AFD000, v99, OS_LOG_TYPE_ERROR, "Secondary File Collection is not ready!", (uint8_t *)&__dst, 2u);
  }
  if ((**v98)(v98, 80))
  {
    ctu::LogMessageBuffer::createWithFormat((uint64_t *)&__dst, (ctu::LogMessageBuffer *)"Secondary File Collection is not ready!", v100);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    goto LABEL_141;
  }
LABEL_142:
  if (SHIBYTE(v148[2]) < 0)
  {
    operator delete(v148[0]);
    if ((SHIBYTE(v149.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_144:
      if (!v146[24]) {
        goto LABEL_150;
      }
      goto LABEL_148;
    }
  }
  else if ((SHIBYTE(v149.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_144;
  }
  operator delete(v149.__r_.__value_.__l.__data_);
  if (!v146[24]) {
    goto LABEL_150;
  }
LABEL_148:
  if ((v146[23] & 0x80000000) != 0) {
    operator delete(*(void **)v146);
  }
LABEL_150:
  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v150.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__s1[2]) & 0x80000000) == 0)
    {
LABEL_152:
      if ((SHIBYTE(v152[2]) & 0x80000000) == 0) {
        goto LABEL_153;
      }
LABEL_157:
      operator delete(v152[0]);
      if ((SHIBYTE(v153[2]) & 0x80000000) == 0) {
        return MEMORY[0x24C58B070](v154);
      }
LABEL_158:
      operator delete(v153[0]);
      return MEMORY[0x24C58B070](v154);
    }
  }
  else if ((SHIBYTE(__s1[2]) & 0x80000000) == 0)
  {
    goto LABEL_152;
  }
  operator delete((void *)__s1[0]);
  if (SHIBYTE(v152[2]) < 0) {
    goto LABEL_157;
  }
LABEL_153:
  if (SHIBYTE(v153[2]) < 0) {
    goto LABEL_158;
  }
  return MEMORY[0x24C58B070](v154);
}

void sub_248B32578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,xpc_object_t object,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,char a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,void *__p,uint64_t a61,int a62,__int16 a63)
{
  MEMORY[0x24C58AFD0](v73 - 160);
  if (a65 < 0) {
    operator delete(__p);
  }
  if (a71 < 0) {
    operator delete(a66);
  }
  if (a55 && a54 < 0) {
    operator delete(a49);
  }
  if (a73 < 0) {
    operator delete(a72);
  }
  if (*(char *)(v73 - 225) < 0) {
    operator delete(*(void **)(v73 - 248));
  }
  if (*(char *)(v73 - 201) < 0) {
    operator delete(*(void **)(v73 - 224));
  }
  if (*(char *)(v73 - 177) < 0) {
    operator delete(*(void **)(v73 - 200));
  }
  MEMORY[0x24C58B070](v73 - 176);
  _Unwind_Resume(a1);
}

void sub_248B329C4()
{
  if ((*(char *)(v0 - 225) & 0x80000000) == 0) {
    JUMPOUT(0x248B32994);
  }
  JUMPOUT(0x248B3298CLL);
}

void sub_248B329D4()
{
}

void sub_248B329DC()
{
  if ((*(char *)(v0 - 177) & 0x80000000) == 0) {
    JUMPOUT(0x248B329B4);
  }
  JUMPOUT(0x248B329ACLL);
}

void abm::trace::TraceReader::clearFiles(abm::trace::TraceReader *this, char a2, int a3)
{
  uint64_t v6 = (void *)((char *)this + 104);
  uint64_t v7 = *((void *)this + 13);
  if (!v7) {
    goto LABEL_21;
  }
  int v8 = abm::trace::kTrashFolder;
  size_t v9 = strlen(abm::trace::kTrashFolder);
  if (v9 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v10 = (void *)v9;
  if (v9 >= 0x17)
  {
    uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v12 = v9 | 7;
    }
    uint64_t v13 = v12 + 1;
    long long v11 = (void **)operator new(v12 + 1);
    __dst[1] = v10;
    unint64_t v29 = v13 | 0x8000000000000000;
    __dst[0] = v11;
  }
  else
  {
    HIBYTE(v29) = v9;
    long long v11 = __dst;
    if (!v9) {
      goto LABEL_10;
    }
  }
  memmove(v11, v8, (size_t)v10);
LABEL_10:
  *((unsigned char *)v10 + (void)v11) = 0;
  TraceFileCollection::clear(v7, (uint64_t)__dst, a2);
  if (SHIBYTE(v29) < 0)
  {
    operator delete(__dst[0]);
    if (!a3) {
      goto LABEL_21;
    }
  }
  else if (!a3)
  {
    goto LABEL_21;
  }
  size_t v14 = (std::__shared_weak_count *)*((void *)this + 14);
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  if (v14)
  {
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 14);
    void *v6 = 0;
    v6[1] = 0;
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  else
  {
    void *v6 = 0;
    v6[1] = 0;
  }
LABEL_21:
  std::string::size_type v17 = (void *)((char *)this + 120);
  uint64_t v16 = *((void *)this + 15);
  if (!v16) {
    return;
  }
  uint64_t v18 = abm::trace::kTrashFolder;
  size_t v19 = strlen(abm::trace::kTrashFolder);
  if (v19 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v20 = (void *)v19;
  if (v19 >= 0x17)
  {
    uint64_t v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17) {
      uint64_t v22 = v19 | 7;
    }
    uint64_t v23 = v22 + 1;
    char v21 = operator new(v22 + 1);
    __p[1] = v20;
    unint64_t v27 = v23 | 0x8000000000000000;
    __p[0] = v21;
    goto LABEL_29;
  }
  HIBYTE(v27) = v19;
  char v21 = __p;
  if (v19) {
LABEL_29:
  }
    memmove(v21, v18, (size_t)v20);
  *((unsigned char *)v20 + (void)v21) = 0;
  TraceFileCollection::clear(v16, (uint64_t)__p, a2);
  if (SHIBYTE(v27) < 0)
  {
    operator delete(__p[0]);
    if (!a3) {
      return;
    }
  }
  else if (!a3)
  {
    return;
  }
  std::string::size_type v24 = (std::__shared_weak_count *)*((void *)this + 16);
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  if (!v24)
  {
    void *v17 = 0;
    *((void *)this + 16) = 0;
    return;
  }
  if (atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v25 = (std::__shared_weak_count *)*((void *)this + 16);
    void *v17 = 0;
    *((void *)this + 16) = 0;
    if (!v25) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    uint64_t v25 = (std::__shared_weak_count *)*((void *)this + 16);
    void *v17 = 0;
    *((void *)this + 16) = 0;
    if (!v25) {
      return;
    }
  }
  if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
}

void sub_248B32D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void abm::trace::TraceReader::updateHistorySize(abm::trace::TraceReader *this, int a2)
{
  uint64_t v4 = *((void *)this + 13);
  if (v4)
  {
    uint64_t v8 = MEMORY[0x263EF8330];
    uint64_t v9 = 0x40000000;
    std::string::size_type v10 = ___ZN19TraceFileCollection10setHistoryEi_block_invoke;
    long long v11 = &__block_descriptor_tmp_20;
    uint64_t v12 = v4;
    int v13 = a2;
    size_t v14 = &v8;
    uint64_t block = MEMORY[0x263EF8330];
    uint64_t v16 = 0x40000000;
    std::string::size_type v17 = ___ZNK3ctu20SharedSynchronizableI19TraceFileCollectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
    uint64_t v18 = &__block_descriptor_tmp_90;
    uint64_t v19 = v4 + 72;
    uint64_t v20 = &v14;
    char v5 = *(NSObject **)(v4 + 88);
    if (!*(void *)(v4 + 96))
    {
      dispatch_sync(v5, &block);
      uint64_t v6 = *((void *)this + 15);
      if (!v6) {
        return;
      }
      goto LABEL_5;
    }
    dispatch_async_and_wait(v5, &block);
  }
  uint64_t v6 = *((void *)this + 15);
  if (!v6) {
    return;
  }
LABEL_5:
  uint64_t v8 = MEMORY[0x263EF8330];
  uint64_t v9 = 0x40000000;
  std::string::size_type v10 = ___ZN19TraceFileCollection10setHistoryEi_block_invoke;
  long long v11 = &__block_descriptor_tmp_20;
  uint64_t v12 = v6;
  int v13 = a2;
  size_t v14 = &v8;
  uint64_t block = MEMORY[0x263EF8330];
  uint64_t v16 = 0x40000000;
  std::string::size_type v17 = ___ZNK3ctu20SharedSynchronizableI19TraceFileCollectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  uint64_t v18 = &__block_descriptor_tmp_90;
  uint64_t v19 = v6 + 72;
  uint64_t v20 = &v14;
  uint64_t v7 = *(NSObject **)(v6 + 88);
  if (*(void *)(v6 + 96)) {
    dispatch_async_and_wait(v7, &block);
  }
  else {
    dispatch_sync(v7, &block);
  }
}

void abm::trace::TraceReader::updateMaxMemoryFileCount(abm::trace::TraceReader *this, int a2)
{
  uint64_t v4 = *((void *)this + 13);
  if (v4)
  {
    uint64_t v8 = MEMORY[0x263EF8330];
    uint64_t v9 = 0x40000000;
    std::string::size_type v10 = ___ZN19TraceFileCollection21setMaxMemoryFileCountEj_block_invoke;
    long long v11 = &__block_descriptor_tmp_21_0;
    uint64_t v12 = v4;
    int v13 = a2;
    size_t v14 = &v8;
    uint64_t block = MEMORY[0x263EF8330];
    uint64_t v16 = 0x40000000;
    std::string::size_type v17 = ___ZNK3ctu20SharedSynchronizableI19TraceFileCollectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
    uint64_t v18 = &__block_descriptor_tmp_90;
    uint64_t v19 = v4 + 72;
    uint64_t v20 = &v14;
    char v5 = *(NSObject **)(v4 + 88);
    if (!*(void *)(v4 + 96))
    {
      dispatch_sync(v5, &block);
      uint64_t v6 = *((void *)this + 15);
      if (!v6) {
        return;
      }
      goto LABEL_5;
    }
    dispatch_async_and_wait(v5, &block);
  }
  uint64_t v6 = *((void *)this + 15);
  if (!v6) {
    return;
  }
LABEL_5:
  uint64_t v8 = MEMORY[0x263EF8330];
  uint64_t v9 = 0x40000000;
  std::string::size_type v10 = ___ZN19TraceFileCollection21setMaxMemoryFileCountEj_block_invoke;
  long long v11 = &__block_descriptor_tmp_21_0;
  uint64_t v12 = v6;
  int v13 = a2;
  size_t v14 = &v8;
  uint64_t block = MEMORY[0x263EF8330];
  uint64_t v16 = 0x40000000;
  std::string::size_type v17 = ___ZNK3ctu20SharedSynchronizableI19TraceFileCollectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  uint64_t v18 = &__block_descriptor_tmp_90;
  uint64_t v19 = v6 + 72;
  uint64_t v20 = &v14;
  uint64_t v7 = *(NSObject **)(v6 + 88);
  if (*(void *)(v6 + 96)) {
    dispatch_async_and_wait(v7, &block);
  }
  else {
    dispatch_sync(v7, &block);
  }
}

void abm::trace::TraceReader::updateFileSize(abm::trace::TraceReader *this, int a2)
{
  uint64_t v4 = *((void *)this + 13);
  if (v4)
  {
    uint64_t v8 = MEMORY[0x263EF8330];
    uint64_t v9 = 0x40000000;
    std::string::size_type v10 = ___ZN19TraceFileCollection11setFileSizeEj_block_invoke;
    long long v11 = &__block_descriptor_tmp_22;
    uint64_t v12 = v4;
    int v13 = a2;
    size_t v14 = &v8;
    uint64_t block = MEMORY[0x263EF8330];
    uint64_t v16 = 0x40000000;
    std::string::size_type v17 = ___ZNK3ctu20SharedSynchronizableI19TraceFileCollectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
    uint64_t v18 = &__block_descriptor_tmp_90;
    uint64_t v19 = v4 + 72;
    uint64_t v20 = &v14;
    char v5 = *(NSObject **)(v4 + 88);
    if (!*(void *)(v4 + 96))
    {
      dispatch_sync(v5, &block);
      uint64_t v6 = *((void *)this + 15);
      if (!v6) {
        return;
      }
      goto LABEL_5;
    }
    dispatch_async_and_wait(v5, &block);
  }
  uint64_t v6 = *((void *)this + 15);
  if (!v6) {
    return;
  }
LABEL_5:
  uint64_t v8 = MEMORY[0x263EF8330];
  uint64_t v9 = 0x40000000;
  std::string::size_type v10 = ___ZN19TraceFileCollection11setFileSizeEj_block_invoke;
  long long v11 = &__block_descriptor_tmp_22;
  uint64_t v12 = v6;
  int v13 = a2;
  size_t v14 = &v8;
  uint64_t block = MEMORY[0x263EF8330];
  uint64_t v16 = 0x40000000;
  std::string::size_type v17 = ___ZNK3ctu20SharedSynchronizableI19TraceFileCollectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  uint64_t v18 = &__block_descriptor_tmp_90;
  uint64_t v19 = v6 + 72;
  uint64_t v20 = &v14;
  uint64_t v7 = *(NSObject **)(v6 + 88);
  if (*(void *)(v6 + 96)) {
    dispatch_async_and_wait(v7, &block);
  }
  else {
    dispatch_sync(v7, &block);
  }
}

TraceFileCollection *abm::trace::TraceReader::getCurrentIndex(abm::trace::TraceReader *this)
{
  uint64_t result = (TraceFileCollection *)*((void *)this + 13);
  if (result) {
    return (TraceFileCollection *)TraceFileCollection::getNewestFileNumber(result);
  }
  return result;
}

uint64_t abm::trace::TraceReader::notifyCellularLoggingPortNumber(abm::trace::TraceReader *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 25) + 80))(*((void *)this + 25));
  if ((v2 & 1) == 0)
  {
    uint64_t v3 = (char *)this + 8;
    uint64_t v4 = *((void *)this + 5);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v7[0]) = 0;
      _os_log_impl(&dword_248AFD000, v4, OS_LOG_TYPE_DEFAULT, "#I forward streaming info fail", (uint8_t *)v7, 2u);
    }
    if ((**(unsigned int (***)(char *, uint64_t))v3)(v3, 40))
    {
      ctu::LogMessageBuffer::createWithFormat(v7, (ctu::LogMessageBuffer *)"forward streaming info fail", v5);
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
      MEMORY[0x24C58AFD0](v7);
    }
  }
  return v2;
}

uint64_t ctu::Loggable<abm::trace::TraceReader,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x270F97428](a1 + 8);
}

size_t ctu::Loggable<abm::trace::TraceReader,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (const char *)(a1 + 144);
  if (*(char *)(a1 + 167) < 0) {
    uint64_t v3 = *(const char **)v3;
  }
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<abm::trace::TraceReader,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x270F978E0](a1 + 8);
}

void *ctu::Loggable<abm::trace::TraceReader,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_26FCC8918;
  MEMORY[0x24C58AF50](a1 + 1);
  return a1;
}

void ctu::Loggable<abm::trace::TraceReader,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_26FCC8918;
  MEMORY[0x24C58AF50](a1 + 1);
  operator delete(a1);
}

void std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

void std::__shared_ptr_pointer<abm::trace::TraceReader *,std::shared_ptr<abm::trace::TraceReader>::__shared_ptr_default_delete<abm::trace::TraceReader,abm::trace::TraceReader>,std::allocator<abm::trace::TraceReader>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<abm::trace::TraceReader *,std::shared_ptr<abm::trace::TraceReader>::__shared_ptr_default_delete<abm::trace::TraceReader,abm::trace::TraceReader>,std::allocator<abm::trace::TraceReader>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<abm::trace::TraceReader *,std::shared_ptr<abm::trace::TraceReader>::__shared_ptr_default_delete<abm::trace::TraceReader,abm::trace::TraceReader>,std::allocator<abm::trace::TraceReader>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000248B4B1BFLL) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000248B4B1BFLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000248B4B1BFLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000248B4B1BFLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
}

uint64_t __cxx_global_var_init_4()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::shared_stdio,support::log::shared_stdio,ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>>::sInstance, &dword_248AFD000);
  }
  return result;
}

uint64_t abm::trace::getBasebandTraceDirSuffix@<X0>(abm::trace *this@<X0>, unsigned char *a2@<X8>)
{
  int v2 = (int)this;
  memset(a2, 170, 24);
  a2[23] = 0;
  *a2 = 0;
  uint64_t result = capabilities::radio::vendor(this);
  if ((result - 2) >= 2)
  {
    if (result != 1) {
      return result;
    }
    size_t v5 = &abm::trace::kEURTraceSnapshotDirectorySuffix;
    if (v2) {
      size_t v5 = &abm::trace::kEURQDSSTraceSnapshotDirectorySuffix;
    }
  }
  else
  {
    size_t v5 = &abm::trace::kICETraceSnapshotDirectorySuffix;
  }
  return MEMORY[0x24C58B2B0](a2, *v5);
}

void sub_248B3373C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void abm::trace::getCoreDumpDirSuffix(std::string *a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_1, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (capabilities::radio *)__cxa_guard_acquire(&_MergedGlobals_1);
    if (v4)
    {
      int v5 = capabilities::radio::maverick(v4);
      uint64_t v6 = &abm::trace::kEURCoreDumpSnapshotDirectorySuffix;
      if (!v5) {
        uint64_t v6 = &abm::trace::kCoreDumpSnapshotDirectorySuffix;
      }
      std::string::basic_string[abi:ne180100]<0>(&xmmword_269339ED8, *v6);
      __cxa_guard_release(&_MergedGlobals_1);
    }
  }
  if (byte_269339EEF < 0)
  {
    long long v3 = xmmword_269339ED8;
    std::string::__init_copy_ctor_external(a1, (const std::string::value_type *)v3, *((std::string::size_type *)&v3 + 1));
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = xmmword_269339ED8;
    a1->__r_.__value_.__r.__words[2] = unk_269339EE8;
  }
}

void sub_248B33824(_Unwind_Exception *a1)
{
}

uint64_t abm::trace::isSupported(uint64_t a1)
{
  uint64_t v1 = (const char *)a1;
  int v2 = *(char *)(a1 + 23);
  if (v2 < 0)
  {
    long long v3 = (capabilities::radio *)strcasecmp(*(const char **)a1, (const char *)abm::trace::kDIAG);
    if (v3)
    {
LABEL_3:
      uint64_t v4 = v1;
      if ((v2 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else
  {
    long long v3 = (capabilities::radio *)strcasecmp((const char *)a1, (const char *)abm::trace::kDIAG);
    if (v3) {
      goto LABEL_3;
    }
  }
  if (capabilities::radio::maverick(v3)) {
    return 1;
  }
  LOBYTE(v2) = v1[23];
  uint64_t v4 = v1;
  if ((v2 & 0x80) == 0)
  {
LABEL_4:
    int v5 = (capabilities::radio *)strcasecmp(v4, (const char *)abm::trace::kICETrace);
    if (v5) {
      goto LABEL_5;
    }
LABEL_12:
    if (capabilities::radio::ice(v5)) {
      return 1;
    }
    LOBYTE(v2) = v1[23];
    if ((v2 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_11:
  int v5 = (capabilities::radio *)strcasecmp(*(const char **)v1, (const char *)abm::trace::kICETrace);
  if (!v5) {
    goto LABEL_12;
  }
LABEL_5:
  if ((v2 & 0x80) == 0)
  {
LABEL_6:
    uint64_t v6 = v1;
    if (!strcasecmp(v1, (const char *)abm::trace::kBasebandTrace)) {
      return 1;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t v6 = *(const char **)v1;
  if (!strcasecmp(*(const char **)v1, (const char *)abm::trace::kBasebandTrace)) {
    return 1;
  }
LABEL_15:
  uint64_t v7 = (capabilities::radio *)strcasecmp(v6, (const char *)abm::trace::kEURCoreDump);
  if (v7)
  {
    if ((v2 & 0x80) == 0) {
      goto LABEL_17;
    }
  }
  else
  {
    if (capabilities::radio::maverick(v7)) {
      return 1;
    }
    if ((v1[23] & 0x80) == 0)
    {
LABEL_17:
      if (!strcasecmp(v1, (const char *)abm::trace::kCoreDump)
        || !strcasecmp(v1, (const char *)abm::trace::kSystemLogs))
      {
        return 1;
      }
      if (!strcasecmp(v1, (const char *)abm::trace::kCompression)) {
        goto LABEL_40;
      }
      if (strcasecmp(v1, (const char *)abm::trace::kBasebandIPC))
      {
        if (!strcasecmp(v1, (const char *)abm::trace::kIPC)
          || !strcasecmp(v1, (const char *)abm::trace::kKernelPCI)
          || !strcasecmp(v1, (const char *)abm::trace::kTapToRadar))
        {
          goto LABEL_40;
        }
LABEL_34:
        if (strcasecmp(v1, (const char *)abm::trace::kProfile))
        {
          if (strcasecmp(v1, (const char *)abm::trace::kTraceTailspin)
            && strcasecmp(v1, (const char *)abm::trace::kTraceSettings)
            && strcasecmp(v1, (const char *)abm::trace::kTraceFilter))
          {
            return 0;
          }
          goto LABEL_40;
        }
        return 1;
      }
      goto LABEL_43;
    }
  }
  uint64_t v1 = *(const char **)v1;
  if (!strcasecmp(v1, (const char *)abm::trace::kCoreDump) || !strcasecmp(v1, (const char *)abm::trace::kSystemLogs)) {
    return 1;
  }
  if (!strcasecmp(v1, (const char *)abm::trace::kCompression)) {
    goto LABEL_40;
  }
  if (strcasecmp(v1, (const char *)abm::trace::kBasebandIPC))
  {
    if (!strcasecmp(v1, (const char *)abm::trace::kIPC)
      || !strcasecmp(v1, (const char *)abm::trace::kKernelPCI)
      || !strcasecmp(v1, (const char *)abm::trace::kTapToRadar))
    {
LABEL_40:
      return MEMORY[0x270F96DB0]();
    }
    goto LABEL_34;
  }
LABEL_43:
  return MEMORY[0x270F96D80]();
}

void Timestamp::Timestamp(Timestamp *this)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  *((void *)this + 1) = 0;
  int v2 = (void *)((char *)this + 8);
  *((void *)this + 2) = 0;
  *(void *)this = (char *)this + 8;
  unsigned long long v12 = 0uLL;
  if ((gettimeofday((timeval *)&v12, 0) & 0x80000000) == 0
    || !os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = *v2;
    uint64_t v4 = v2;
    if (*v2) {
      goto LABEL_4;
    }
LABEL_10:
    uint64_t v7 = (char *)operator new(0x38uLL);
    *((_DWORD *)v7 + 8) = 0;
    *((void *)v7 + 5) = 0;
    *((void *)v7 + 6) = 0;
    *(void *)uint64_t v7 = 0;
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = v4;
    void *v2 = v7;
    uint64_t v8 = **(void **)this;
    uint64_t v9 = (uint64_t *)v7;
    if (v8)
    {
      *(void *)this = v8;
      uint64_t v9 = (uint64_t *)*v2;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 1), v9);
    ++*((void *)this + 2);
    goto LABEL_13;
  }
  std::string::size_type v10 = __error();
  long long v11 = strerror(*v10);
  *(_DWORD *)fd_set buf = 136315138;
  size_t v14 = v11;
  _os_log_error_impl(&dword_248AFD000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Failed to get current time. Error: %s\n", buf, 0xCu);
  uint64_t v3 = *v2;
  uint64_t v4 = v2;
  if (!*v2) {
    goto LABEL_10;
  }
LABEL_4:
  uint64_t v5 = v3;
  while (1)
  {
    while (1)
    {
      uint64_t v4 = (void *)v5;
      int v6 = *(_DWORD *)(v5 + 32);
      if (v6 < 1) {
        break;
      }
      uint64_t v5 = *v4;
      int v2 = v4;
      if (!*v4) {
        goto LABEL_10;
      }
    }
    if ((v6 & 0x80000000) == 0) {
      break;
    }
    uint64_t v5 = v4[1];
    if (!v5)
    {
      int v2 = v4 + 1;
      goto LABEL_10;
    }
  }
  uint64_t v7 = (char *)v4;
LABEL_13:
  *(_OWORD *)(v7 + 40) = v12;
}

void sub_248B33C98(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *v2);
  _Unwind_Resume(a1);
}

void sub_248B33CB4(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, v2);
  _Unwind_Resume(a1);
}

void Timestamp::Timestamp(Timestamp *this, const Timestamp *a2)
{
  *((void *)this + 2) = 0;
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
  std::map<Timestamp::TimeDomain,timeval>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>>((uint64_t *)this, *(int **)a2, (int *)a2 + 2);
}

{
  *((void *)this + 2) = 0;
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
  std::map<Timestamp::TimeDomain,timeval>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>>((uint64_t *)this, *(int **)a2, (int *)a2 + 2);
}

void sub_248B33D10(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_248B33D68(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void *Timestamp::Timestamp(void *a1, _OWORD *a2, int a3)
{
  a1[2] = 0;
  a1[1] = 0;
  int v6 = a1 + 1;
  *a1 = a1 + 1;
  uint64_t v7 = (char *)operator new(0x38uLL);
  *((_DWORD *)v7 + 8) = a3;
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = v6;
  void *v6 = v7;
  *a1 = v7;
  v7[24] = 1;
  a1[2] = 1;
  *(_OWORD *)(v7 + 40) = *a2;
  return a1;
}

{
  void *v6;
  char *v7;

  a1[2] = 0;
  a1[1] = 0;
  int v6 = a1 + 1;
  *a1 = a1 + 1;
  uint64_t v7 = (char *)operator new(0x38uLL);
  *((_DWORD *)v7 + 8) = a3;
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = v6;
  void *v6 = v7;
  *a1 = v7;
  v7[24] = 1;
  a1[2] = 1;
  *(_OWORD *)(v7 + 40) = *a2;
  return a1;
}

__n128 Timestamp::set(uint64_t **a1, __n128 *a2, int a3)
{
  uint64_t v7 = a1 + 1;
  int v6 = (char *)a1[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v8 = v6;
        int v9 = *((_DWORD *)v6 + 8);
        if (v9 <= a3) {
          break;
        }
        int v6 = *(char **)v8;
        uint64_t v7 = (uint64_t **)v8;
        if (!*(void *)v8) {
          goto LABEL_8;
        }
      }
      if (v9 >= a3) {
        break;
      }
      int v6 = (char *)*((void *)v8 + 1);
      if (!v6)
      {
        uint64_t v7 = (uint64_t **)(v8 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v8 = (char *)(a1 + 1);
LABEL_8:
    std::string::size_type v10 = v8;
    uint64_t v8 = (char *)operator new(0x38uLL);
    *((_DWORD *)v8 + 8) = a3;
    *((void *)v8 + 5) = 0;
    *((void *)v8 + 6) = 0;
    *(void *)uint64_t v8 = 0;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 2) = v10;
    char *v7 = (uint64_t *)v8;
    long long v11 = (uint64_t *)**a1;
    unsigned long long v12 = (uint64_t *)v8;
    if (v11)
    {
      *a1 = v11;
      unsigned long long v12 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  __n128 result = *a2;
  *(__n128 *)(v8 + 40) = *a2;
  return result;
}

void *Timestamp::Timestamp(void *a1, uint64_t a2, int a3)
{
  a1[2] = 0;
  a1[1] = 0;
  int v6 = a1 + 1;
  *a1 = a1 + 1;
  uint64_t v7 = operator new(0x38uLL);
  uint64_t v7[8] = a3;
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = v6;
  void *v6 = v7;
  *a1 = v7;
  *((unsigned char *)v7 + 24) = 1;
  a1[2] = 1;
  *((void *)v7 + 5) = a2;
  *((void *)v7 + 6) = 0xAAAAAAAAAAAAAAAALL;
  return a1;
}

{
  void *v6;
  _DWORD *v7;

  a1[2] = 0;
  a1[1] = 0;
  int v6 = a1 + 1;
  *a1 = a1 + 1;
  uint64_t v7 = operator new(0x38uLL);
  uint64_t v7[8] = a3;
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = v6;
  void *v6 = v7;
  *a1 = v7;
  *((unsigned char *)v7 + 24) = 1;
  a1[2] = 1;
  *((void *)v7 + 5) = a2;
  *((void *)v7 + 6) = 0xAAAAAAAAAAAAAAAALL;
  return a1;
}

uint64_t **Timestamp::Timestamp(uint64_t **a1, char *a2, char a3, int a4)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  a1[1] = 0;
  uint64_t v7 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  uint64_t v27 = 0x11AAAAAAAAAA0053;
  *(_OWORD *)std::string __p = *(_OWORD *)"%Y-%m-%d-%H-%M-%S";
  if ((a3 & 0x10) != 0) {
    MEMORY[0x24C58B2B0](__p, "%Y.%m.%d_%H-%M-%S%z");
  }
  *((void *)&v24 + 1) = 0xAAAAAAAA00000000;
  memset(&v25, 0, sizeof(v25));
  if (a2[23] < 0) {
    a2 = *(char **)a2;
  }
  if (v27 >= 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = (void **)__p[0];
  }
  if (strptime(a2, (const char *)v8, &v25))
  {
    v25.tm_isdst = -1;
    *(void *)&unsigned long long v24 = mktime(&v25);
    if ((void)v24 != -1) {
      goto LABEL_18;
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = __error();
      char v21 = strerror(*v20);
      *(_DWORD *)fd_set buf = 136315138;
      unint64_t v29 = v21;
      _os_log_error_impl(&dword_248AFD000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Failed to convert to absolute time. Error: %s\n", buf, 0xCu);
      unsigned long long v24 = 0uLL;
      if ((gettimeofday((timeval *)&v24, 0) & 0x80000000) == 0) {
        goto LABEL_18;
      }
    }
    else
    {
      unsigned long long v24 = 0uLL;
      if ((gettimeofday((timeval *)&v24, 0) & 0x80000000) == 0) {
        goto LABEL_18;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    int v9 = __error();
    std::string::size_type v10 = strerror(*v9);
    *(_DWORD *)fd_set buf = 136315138;
    unint64_t v29 = v10;
    long long v11 = &_os_log_internal;
    unsigned long long v12 = "Failed to get current time after absolute time conversion failed. Error: %s\n";
    goto LABEL_35;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)fd_set buf = 0;
    _os_log_impl(&dword_248AFD000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "Failed to convert time from string format\n", buf, 2u);
  }
  unsigned long long v24 = 0uLL;
  if (gettimeofday((timeval *)&v24, 0) < 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    uint64_t v22 = __error();
    uint64_t v23 = strerror(*v22);
    *(_DWORD *)fd_set buf = 136315138;
    unint64_t v29 = v23;
    long long v11 = &_os_log_internal;
    unsigned long long v12 = "Failed to get current time after conversion failure. Error: %s\n";
LABEL_35:
    _os_log_error_impl(&dword_248AFD000, v11, OS_LOG_TYPE_ERROR, v12, buf, 0xCu);
  }
LABEL_18:
  int v13 = *v7;
  size_t v14 = v7;
  if (*v7)
  {
    while (1)
    {
      while (1)
      {
        size_t v14 = v13;
        int v15 = *((_DWORD *)v13 + 8);
        if (v15 <= a4) {
          break;
        }
        int v13 = (uint64_t *)*v14;
        uint64_t v7 = (uint64_t **)v14;
        if (!*v14) {
          goto LABEL_25;
        }
      }
      if (v15 >= a4) {
        break;
      }
      int v13 = (uint64_t *)v14[1];
      if (!v13)
      {
        uint64_t v7 = (uint64_t **)(v14 + 1);
        goto LABEL_25;
      }
    }
    *(_OWORD *)(v14 + 5) = v24;
    if (SHIBYTE(v27) < 0) {
      goto LABEL_28;
    }
  }
  else
  {
LABEL_25:
    uint64_t v16 = (char *)operator new(0x38uLL);
    *((_DWORD *)v16 + 8) = a4;
    *((void *)v16 + 5) = 0;
    *((void *)v16 + 6) = 0;
    *(void *)uint64_t v16 = 0;
    *((void *)v16 + 1) = 0;
    *((void *)v16 + 2) = v14;
    _DWORD *v7 = (uint64_t *)v16;
    std::string::size_type v17 = (uint64_t *)**a1;
    uint64_t v18 = (uint64_t *)v16;
    if (v17)
    {
      *a1 = v17;
      uint64_t v18 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v18);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    *(_OWORD *)(v16 + 40) = v24;
    if (SHIBYTE(v27) < 0) {
LABEL_28:
    }
      operator delete(__p[0]);
  }
  return a1;
}

void sub_248B3437C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v24, *(void **)(v24 + 8));
  _Unwind_Resume(a1);
}

uint64_t Timestamp::get(uint64_t a1, void *a2, int a3)
{
  *a2 = 0;
  a2[1] = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v3 = a1 + 8;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v3;
  do
  {
    int v7 = *(_DWORD *)(v4 + 32);
    BOOL v8 = v7 < a3;
    if (v7 >= a3) {
      int v9 = (uint64_t *)v4;
    }
    else {
      int v9 = (uint64_t *)(v4 + 8);
    }
    if (!v8) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = *v9;
  }
  while (*v9);
  if (v6 == v3 || *(_DWORD *)(v6 + 32) > a3) {
    return 0;
  }
  *(_OWORD *)a2 = *(_OWORD *)(v6 + 40);
  return 1;
}

uint64_t Timestamp::now(timeval *this, timeval *a2)
{
  return gettimeofday(this, 0);
}

uint64_t Timestamp::asString(uint64_t a1, int a2, char a3)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  unint64_t v31 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v30[7] = v6;
  v30[8] = v6;
  v30[5] = v6;
  v30[6] = v6;
  v30[3] = v6;
  v30[4] = v6;
  v30[1] = v6;
  v30[2] = v6;
  long long v29 = v6;
  v30[0] = v6;
  *(_OWORD *)std::string __p = v6;
  long long v28 = v6;
  v26[2] = v6;
  v26[3] = v6;
  v26[0] = v6;
  v26[1] = v6;
  long long v25 = v6;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v25);
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v8 = a1 + 8;
  uint64_t v7 = v9;
  if (!v9) {
    goto LABEL_11;
  }
  uint64_t v10 = v8;
  do
  {
    int v11 = *(_DWORD *)(v7 + 32);
    BOOL v12 = v11 < a2;
    if (v11 >= a2) {
      int v13 = (uint64_t *)v7;
    }
    else {
      int v13 = (uint64_t *)(v7 + 8);
    }
    if (!v12) {
      uint64_t v10 = v7;
    }
    uint64_t v7 = *v13;
  }
  while (*v13);
  if (v10 != v8 && *(_DWORD *)(v10 + 32) <= a2)
  {
    time_t v14 = *(void *)(v10 + 40);
    if ((a3 & 0x11) != 0)
    {
LABEL_12:
      v23.tm_zone = (char *)0xAAAAAAAAAAAAAAAALL;
      time_t v24 = v14;
      *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)&v23.tm_mon = v15;
      *(_OWORD *)&v23.tm_isdst = v15;
      *(_OWORD *)&v23.tm_sec = v15;
      localtime_r(&v24, &v23);
      long long v35 = 0u;
      long long v36 = 0u;
      *(_OWORD *)std::string __s = 0u;
      long long v34 = 0u;
      if ((a3 & 0x10) != 0) {
        uint64_t v16 = "%Y.%m.%d_%H-%M-%S%z";
      }
      else {
        uint64_t v16 = "%Y-%m-%d-%H-%M-%S";
      }
      strftime(__s, 0x40uLL, v16, &v23);
      size_t v17 = strlen(__s);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)__s, v17);
      if ((a3 & 8) != 0)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"-", 1);
        uint64_t v18 = *(void *)&v26[0];
        uint64_t v19 = (char *)v26 + *(void *)(*(void *)&v26[0] - 24);
        if (*((_DWORD *)v19 + 36) == -1)
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(void *)(*(void *)&v26[0] - 24)));
          uint64_t v20 = std::locale::use_facet(&v32, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 32);
          std::locale::~locale(&v32);
          uint64_t v18 = *(void *)&v26[0];
        }
        *((_DWORD *)v19 + 36) = 48;
        *(void *)((char *)&v26[1] + *(void *)(v18 - 24) + 8) = 3;
        std::ostream::operator<<();
      }
      goto LABEL_23;
    }
  }
  else
  {
LABEL_11:
    time_t v14 = 0;
    if ((a3 & 0x11) != 0) {
      goto LABEL_12;
    }
  }
  std::ostream::operator<<();
  if ((a3 & 4) != 0 || (a3 & 8) != 0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)".", 1);
    std::ostream::operator<<();
  }
LABEL_23:
  std::stringbuf::str();
  *(void *)&long long v25 = *MEMORY[0x263F8C2B8];
  uint64_t v21 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)&v26[-1] + *(void *)(v25 - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  *(void *)&v26[0] = v21;
  *((void *)&v26[0] + 1) = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v28) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x24C58B5B0](v30);
}

void sub_248B347F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_248B3480C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::locale::~locale((std::locale *)(v9 - 136));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_248B34828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_248B34840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_248B34854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *Timestamp::convert(uint64_t a1)
{
  memset(v11, 170, sizeof(v11));
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  Timestamp::Timestamp(v11, (char *)&__p, 9, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    uint64_t v1 = v11[1];
    if (!v11[1])
    {
LABEL_18:
      uint64_t v8 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v1 = v11[1];
    if (!v11[1]) {
      goto LABEL_18;
    }
  }
  int v2 = &v11[1];
  uint64_t v3 = v1;
  do
  {
    uint64_t v4 = (uint64_t **)v3;
    uint64_t v5 = v2;
    int v6 = *((_DWORD *)v3 + 8);
    if (v6 >= 0) {
      int v2 = (uint64_t **)v3;
    }
    else {
      ++v3;
    }
    uint64_t v3 = (uint64_t *)*v3;
  }
  while (v3);
  if (v2 == &v11[1]) {
    goto LABEL_18;
  }
  uint64_t v7 = v6 >= 0 ? v4 : v5;
  if (*((int *)v7 + 8) > 0) {
    goto LABEL_18;
  }
  if (v6 < 0) {
    uint64_t v4 = v5;
  }
  uint64_t v8 = v4[5];
LABEL_19:
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v11, v1);
  return v8;
}

void sub_248B34968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<Timestamp::TimeDomain,timeval>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>>(uint64_t *result, int *a2, int *a3)
{
  if (a2 != a3)
  {
    v19[9] = v3;
    v19[10] = v4;
    int v6 = a2;
    uint64_t v7 = result;
    uint64_t v8 = result + 1;
    do
    {
      uint64_t v18 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
      v19[0] = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
      __n128 result = std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::__find_equal<Timestamp::TimeDomain>(v7, v8, v19, &v18, v6 + 8);
      if (*result)
      {
        uint64_t v9 = (int *)*((void *)v6 + 1);
        if (v9) {
          goto LABEL_11;
        }
      }
      else
      {
        uint64_t v10 = result;
        int v11 = operator new(0x38uLL);
        uint64_t v12 = *((void *)v6 + 6);
        v11[2] = *((_OWORD *)v6 + 2);
        *((void *)v11 + 6) = v12;
        int v13 = v19[0];
        *(void *)int v11 = 0;
        *((void *)v11 + 1) = 0;
        *((void *)v11 + 2) = v13;
        uint64_t *v10 = (uint64_t)v11;
        time_t v14 = *(void **)*v7;
        if (v14)
        {
          uint64_t *v7 = (uint64_t)v14;
          long long v15 = (uint64_t *)*v10;
        }
        else
        {
          long long v15 = (uint64_t *)v11;
        }
        __n128 result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v7[1], v15);
        ++v7[2];
        uint64_t v9 = (int *)*((void *)v6 + 1);
        if (v9)
        {
          do
          {
LABEL_11:
            uint64_t v16 = v9;
            uint64_t v9 = *(int **)v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        uint64_t v16 = (int *)*((void *)v6 + 2);
        BOOL v17 = *(void *)v16 == (void)v6;
        int v6 = v16;
      }
      while (!v17);
LABEL_3:
      int v6 = v16;
    }
    while (v16 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::__find_equal<Timestamp::TimeDomain>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, int *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (int v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    uint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint64_t v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      time_t v14 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v14[2];
        BOOL v15 = *v10 == (void)v14;
        time_t v14 = v10;
      }
      while (v15);
    }
    int v16 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5) {
      goto LABEL_17;
    }
    uint64_t v18 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v19 = (uint64_t *)v18;
          int v20 = *(_DWORD *)(v18 + 32);
          if (v16 >= v20) {
            break;
          }
          uint64_t v18 = *v19;
          uint64_t v5 = v19;
          if (!*v19) {
            goto LABEL_25;
          }
        }
        if (v20 >= v16) {
          break;
        }
        uint64_t v5 = v19 + 1;
        uint64_t v18 = v19[1];
      }
      while (v18);
LABEL_25:
      *a3 = v19;
      return v5;
    }
    else
    {
      *a3 = v5;
      return a1 + 1;
    }
  }
  else if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  else
  {
    uint64_t v11 = a2[1];
    if (v11)
    {
      uint64_t v12 = (uint64_t *)a2[1];
      do
      {
        int v13 = v12;
        uint64_t v12 = (uint64_t *)*v12;
      }
      while (v12);
    }
    else
    {
      uint64_t v21 = a2;
      do
      {
        int v13 = (uint64_t *)v21[2];
        BOOL v15 = *v13 == (void)v21;
        uint64_t v21 = v13;
      }
      while (!v15);
    }
    if (v13 == v5 || v6 < *((_DWORD *)v13 + 8))
    {
      if (v11)
      {
        *a3 = v13;
        return v13;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    else
    {
      uint64_t v22 = *v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            tm v23 = (uint64_t *)v22;
            int v24 = *(_DWORD *)(v22 + 32);
            if (v6 >= v24) {
              break;
            }
            uint64_t v22 = *v23;
            uint64_t v5 = v23;
            if (!*v23) {
              goto LABEL_41;
            }
          }
          if (v24 >= v6) {
            break;
          }
          uint64_t v5 = v23 + 1;
          uint64_t v22 = v23[1];
        }
        while (v22);
LABEL_41:
        *a3 = v23;
        return v5;
      }
      else
      {
        *a3 = v5;
        return a1 + 1;
      }
    }
  }
}

void MallocZone::create(uint64_t a1@<X0>, vm_size_t a2@<X1>, void *a3@<X8>)
{
  int v6 = operator new(0x20uLL);
  v6[1] = 0;
  v6[2] = 0;
  void *v6 = &unk_26FCC89A8;
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v11, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v11 = __p;
  }
  zone = malloc_create_zone(a2, 0);
  uint64_t v8 = v6 + 3;
  void v6[3] = zone;
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v9 = &v11;
  }
  else {
    uint64_t v9 = (std::string *)v11.__r_.__value_.__r.__words[0];
  }
  malloc_set_zone_name(zone, (const char *)v9);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v11.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_12;
    }
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_12:
    *a3 = v8;
    a3[1] = v6;
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  *a3 = v8;
  a3[1] = v6;
}

void sub_248B34D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if ((a14 & 0x80000000) == 0)
  {
    std::__shared_weak_count::~__shared_weak_count(v21);
    operator delete(v23);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v21);
  operator delete(v24);
  _Unwind_Resume(a1);
}

malloc_zone_t **MallocZone::MallocZone(malloc_zone_t **a1, uint64_t a2, vm_size_t start_size)
{
  zone = malloc_create_zone(start_size, 0);
  *a1 = zone;
  if (*(char *)(a2 + 23) < 0) {
    malloc_set_zone_name(zone, *(const char **)a2);
  }
  else {
    malloc_set_zone_name(zone, (const char *)a2);
  }
  return a1;
}

{
  malloc_zone_t *zone;

  zone = malloc_create_zone(start_size, 0);
  *a1 = zone;
  if (*(char *)(a2 + 23) < 0) {
    malloc_set_zone_name(zone, *(const char **)a2);
  }
  else {
    malloc_set_zone_name(zone, (const char *)a2);
  }
  return a1;
}

void MallocZone::~MallocZone(malloc_zone_t **this)
{
  *this = 0;
}

{
  malloc_destroy_zone(*this);
  *this = 0;
}

void *MallocZone::malloc(malloc_zone_t **this, size_t a2)
{
  return malloc_type_zone_malloc(*this, a2, 0xF258B947uLL);
}

void *MallocZone::calloc(malloc_zone_t **this, size_t a2, size_t a3)
{
  return malloc_type_zone_calloc(*this, a2, a3, 0xCE120C5BuLL);
}

void *MallocZone::valloc(malloc_zone_t **this, size_t a2)
{
  return malloc_type_zone_valloc(*this, a2, 0xBFEFC488uLL);
}

void *MallocZone::realloc(malloc_zone_t **this, void *a2, size_t a3)
{
  return malloc_type_zone_realloc(*this, a2, a3, 0x24D19EE6uLL);
}

void *MallocZone::memalign(malloc_zone_t **this, size_t a2, size_t a3)
{
  return malloc_type_zone_memalign(*this, a2, a3, 0x330AAE71uLL);
}

void MallocZone::free(malloc_zone_t **this, void *a2)
{
}

void std::__shared_ptr_emplace<MallocZone::create(std::string,unsigned long)::MallocZoneNoPrivate,std::allocator<MallocZone::create(std::string,unsigned long)::MallocZoneNoPrivate>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FCC89A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MallocZone::create(std::string,unsigned long)::MallocZoneNoPrivate,std::allocator<MallocZone::create(std::string,unsigned long)::MallocZoneNoPrivate>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FCC89A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<MallocZone::create(std::string,unsigned long)::MallocZoneNoPrivate,std::allocator<MallocZone::create(std::string,unsigned long)::MallocZoneNoPrivate>>::__on_zero_shared(uint64_t a1)
{
  *(void *)(a1 + 24) = 0;
}

BOOL util::writeJSON(ctu **a1, uint64_t *a2)
{
  int v2 = a2;
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v4 = a2;
  if (*((char *)a2 + 23) < 0) {
    uint64_t v4 = (uint64_t *)*a2;
  }
  uint64_t v5 = (void *)MEMORY[0x263EFF9E0];
  int v6 = [NSString stringWithUTF8String:v4];
  int v7 = [v5 outputStreamToFileAtPath:v6 append:0];

  if (v7 && ([v7 open], objc_msgSend(v7, "streamStatus") == 2))
  {
    if ([v7 hasSpaceAvailable])
    {
      CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      ctu::xpc_to_cf((uint64_t *)&cf, *a1, v8);
      id v16 = 0;
      [MEMORY[0x263F08900] writeJSONObject:cf toStream:v7 options:1 error:&v16];
      id v9 = v16;
      BOOL v10 = v9 == 0;
      if (v9)
      {
        std::string v11 = *(NSObject **)(GetOsLogContext() + 8);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          if (*((char *)v2 + 23) < 0) {
            int v2 = (uint64_t *)*v2;
          }
          id v14 = [v9 localizedDescription];
          uint64_t v15 = [v14 UTF8String];
          *(_DWORD *)fd_set buf = 136315394;
          uint64_t v19 = v2;
          __int16 v20 = 2080;
          uint64_t v21 = v15;
          _os_log_error_impl(&dword_248AFD000, v11, OS_LOG_TYPE_ERROR, "Failed to write %s with error: %s", buf, 0x16u);
        }
      }
      if (cf) {
        CFRelease(cf);
      }
    }
    else
    {
      uint64_t v12 = *(NSObject **)(GetOsLogContext() + 8);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        if (*((char *)v2 + 23) < 0) {
          int v2 = (uint64_t *)*v2;
        }
        *(_DWORD *)fd_set buf = 136315138;
        uint64_t v19 = v2;
        _os_log_error_impl(&dword_248AFD000, v12, OS_LOG_TYPE_ERROR, "Failed to write %s due to no space available or invalid path.", buf, 0xCu);
      }
      BOOL v10 = 0;
    }
    [v7 close];
  }
  else
  {
    BOOL v10 = 0;
  }

  return v10;
}

void sub_248B35254(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

const void **ctu::cf::CFSharedRef<void const>::~CFSharedRef(const void **a1)
{
  int v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

BOOL util::writeJSONToBuffer(ctu **a1, uint64_t a2, unsigned int a3, _DWORD *a4)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    uint64_t v15 = *(NSObject **)(GetOsLogContext() + 8);
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_WORD *)fd_set buf = 0;
    id v16 = "Failed to write json to buffer due to invalid buffer";
LABEL_15:
    _os_log_error_impl(&dword_248AFD000, v15, OS_LOG_TYPE_ERROR, v16, buf, 2u);
    return 0;
  }
  if (!a4)
  {
    uint64_t v15 = *(NSObject **)(GetOsLogContext() + 8);
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_WORD *)fd_set buf = 0;
    id v16 = "Failed to write json to buffer due to invalid bytes written parameter";
    goto LABEL_15;
  }
  if (a3)
  {
    int v6 = [MEMORY[0x263EFF9E0] outputStreamToBuffer:a2 capacity:a3];
    int v7 = v6;
    if (v6)
    {
      [v6 open];
      if ([v7 streamStatus] == 2)
      {
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        ctu::xpc_to_cf((uint64_t *)&cf, *a1, v8);
        id v20 = 0;
        int v9 = [MEMORY[0x263F08900] writeJSONObject:cf toStream:v7 options:1 error:&v20];
        id v10 = v20;
        BOOL v11 = v10 == 0;
        if (v10)
        {
          uint64_t v12 = *(NSObject **)(GetOsLogContext() + 8);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            id v13 = [v10 localizedDescription];
            uint64_t v14 = [v13 UTF8String];
            *(_DWORD *)fd_set buf = 136315138;
            uint64_t v23 = v14;
            _os_log_error_impl(&dword_248AFD000, v12, OS_LOG_TYPE_ERROR, "Failed to write json to buffer with error: %s", buf, 0xCu);
          }
        }
        else
        {
          *a4 = v9;
        }
        [v7 close];
        if (cf) {
          CFRelease(cf);
        }

        goto LABEL_25;
      }
      BOOL v17 = *(NSObject **)(GetOsLogContext() + 8);
      if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
LABEL_20:
        BOOL v11 = 0;
LABEL_25:

        return v11;
      }
      *(_WORD *)fd_set buf = 0;
      uint64_t v18 = "Failed to write json to buffer due to stream opening failure";
    }
    else
    {
      BOOL v17 = *(NSObject **)(GetOsLogContext() + 8);
      if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
        goto LABEL_20;
      }
      *(_WORD *)fd_set buf = 0;
      uint64_t v18 = "Failed to write json to buffer due to invalid stream";
    }
    _os_log_error_impl(&dword_248AFD000, v17, OS_LOG_TYPE_ERROR, v18, buf, 2u);
    goto LABEL_20;
  }
  uint64_t v15 = *(NSObject **)(GetOsLogContext() + 8);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)fd_set buf = 0;
    id v16 = "Failed to write json to buffer due to no buffer capacity";
    goto LABEL_15;
  }
  return 0;
}

void sub_248B355B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void util::readJSON(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_null_create();
  *a2 = v4;
  uint64_t v5 = a1;
  if (*((char *)a1 + 23) < 0) {
    uint64_t v5 = (uint64_t *)*a1;
  }
  int v6 = (void *)MEMORY[0x263EFF950];
  int v7 = [NSString stringWithUTF8String:v5];
  uint64_t v8 = [v6 inputStreamWithFileAtPath:v7];

  if (v8)
  {
    [v8 open];
    if ([v8 streamStatus] == 2)
    {
      if ([v8 hasBytesAvailable])
      {
        id v18 = 0;
        int v9 = [MEMORY[0x263F08900] JSONObjectWithStream:v8 options:0 error:&v18];
        id v11 = v18;
        if (v11)
        {
          uint64_t v12 = *(NSObject **)(GetOsLogContext() + 8);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            if (*((char *)a1 + 23) < 0) {
              a1 = (uint64_t *)*a1;
            }
            id v13 = [v11 localizedDescription];
            uint64_t v14 = [v13 UTF8String];
            *(_DWORD *)fd_set buf = 136315394;
            *(void *)&uint8_t buf[4] = a1;
            __int16 v20 = 2080;
            uint64_t v21 = v14;
            _os_log_error_impl(&dword_248AFD000, v12, OS_LOG_TYPE_ERROR, "Failed to read %s with error: %s", buf, 0x16u);
          }
        }
        else
        {
          ctu::cf_to_xpc((uint64_t *)buf, v9, v10);
          xpc_object_t v16 = *(xpc_object_t *)buf;
          if (*(void *)buf && MEMORY[0x24C58BF40](*(void *)buf) == MEMORY[0x263EF8708]) {
            xpc_retain(v16);
          }
          else {
            xpc_object_t v16 = xpc_null_create();
          }
          xpc_object_t v17 = xpc_null_create();
          *a2 = v16;
          xpc_release(v4);
          xpc_release(v17);
          xpc_release(*(xpc_object_t *)buf);
        }
      }
      else
      {
        uint64_t v15 = *(NSObject **)(GetOsLogContext() + 8);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          if (*((char *)a1 + 23) < 0) {
            a1 = (uint64_t *)*a1;
          }
          *(_DWORD *)fd_set buf = 136315138;
          *(void *)&uint8_t buf[4] = a1;
          _os_log_error_impl(&dword_248AFD000, v15, OS_LOG_TYPE_ERROR, "Failed to read %s due to no bytes available or invalid path.", buf, 0xCu);
        }
      }
      [v8 close];
    }
  }
}

void sub_248B35888(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BasebandTransportICE *BasebandTransportICE::BasebandTransportICE(BasebandTransportICE *a1, uint64_t *a2, NSObject **a3)
{
  xpc_object_t v4 = (std::__shared_weak_count *)a2[1];
  uint64_t v9 = *a2;
  id v10 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *a3;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  BasebandTransport::BasebandTransport((uint64_t)a1, &v9, &object);
  if (object) {
    dispatch_release(object);
  }
  int v6 = v10;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *(void *)a1 = &unk_26FCC89F8;
  *((void *)a1 + 54) = 0;
  *((void *)a1 + 58) = 0;
  *((void *)a1 + 62) = 0;
  *((void *)a1 + 63) = 0;
  *((void *)a1 + 64) = dispatch_queue_create("BasebandTransportARI", 0);
  BasebandTransportICE::configurePhysical(a1);
  return a1;
}

void sub_248B35A40(_Unwind_Exception *a1)
{
  int v6 = *((void *)v1 + 64);
  if (v6) {
    dispatch_release(v6);
  }
  std::function<BOOL ()(void)>::~function(v4);
  std::function<BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::~function(v3);
  std::function<BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::~function(v2);
  BasebandTransport::~BasebandTransport(v1);
  _Unwind_Resume(a1);
}

void sub_248B35A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, char a11)
{
  if (object) {
    dispatch_release(object);
  }
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t *BasebandTransportICE::configurePhysical(BasebandTransportICE *this)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  int v2 = (char *)this + 8;
  uint64_t v3 = *((void *)this + 5);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v6) = 0;
    _os_log_impl(&dword_248AFD000, v3, OS_LOG_TYPE_DEFAULT, "#I using physical pipe...", (uint8_t *)&v6, 2u);
  }
  if ((**(unsigned int (***)(char *, uint64_t))v2)(v2, 40))
  {
    ctu::LogMessageBuffer::createWithFormat((uint64_t *)&v6, (ctu::LogMessageBuffer *)"using physical pipe...", v4);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    MEMORY[0x24C58AFD0](&v6);
  }
  int v6 = (void (**)(void **))&unk_26FCC8CB8;
  int v7 = this;
  uint64_t v8 = (uint64_t *)&v6;
  std::__function::__value_func<BOOL ()(void)>::swap[abi:ne180100](&v6, (void *)this + 59);
  if (v8 == (uint64_t *)&v6)
  {
    v6[4]((void **)&v6);
  }
  else if (v8)
  {
    (*(void (**)(void))(*v8 + 40))();
  }
  int v6 = (void (**)(void **))&unk_26FCC8D38;
  int v7 = this;
  uint64_t v8 = (uint64_t *)&v6;
  std::__function::__value_func<BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::swap[abi:ne180100](&v6, (void *)this + 55);
  if (v8 == (uint64_t *)&v6)
  {
    v6[4]((void **)&v6);
  }
  else if (v8)
  {
    (*(void (**)(void))(*v8 + 40))();
  }
  int v6 = (void (**)(void **))&unk_26FCC8DB8;
  int v7 = this;
  uint64_t v8 = (uint64_t *)&v6;
  std::__function::__value_func<BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::swap[abi:ne180100](&v6, (void *)this + 51);
  __n128 result = v8;
  if (v8 == (uint64_t *)&v6) {
    return (uint64_t *)((uint64_t (*)(void **))v6[4])((void **)&v6);
  }
  if (v8) {
    return (uint64_t *)(*(uint64_t (**)(void))(*v8 + 40))();
  }
  return result;
}

void *std::function<BOOL ()(void)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void *std::function<BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void *std::function<BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t *BasebandTransportICE::configureARIPipe(BasebandTransportICE *this)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  int v2 = (char *)this + 8;
  uint64_t v3 = *((void *)this + 5);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v6) = 0;
    _os_log_impl(&dword_248AFD000, v3, OS_LOG_TYPE_DEFAULT, "#I using ARI client pipe...", (uint8_t *)&v6, 2u);
  }
  if ((**(unsigned int (***)(char *, uint64_t))v2)(v2, 40))
  {
    ctu::LogMessageBuffer::createWithFormat((uint64_t *)&v6, (ctu::LogMessageBuffer *)"using ARI client pipe...", v4);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    MEMORY[0x24C58AFD0](&v6);
  }
  int v6 = (void (**)(void **))&unk_26FCC8B08;
  int v7 = this;
  uint64_t v8 = (uint64_t *)&v6;
  std::__function::__value_func<BOOL ()(void)>::swap[abi:ne180100](&v6, (void *)this + 59);
  if (v8 == (uint64_t *)&v6)
  {
    v6[4]((void **)&v6);
  }
  else if (v8)
  {
    (*(void (**)(void))(*v8 + 40))();
  }
  int v6 = (void (**)(void **))&unk_26FCC8B98;
  uint64_t v8 = (uint64_t *)&v6;
  std::__function::__value_func<BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::swap[abi:ne180100](&v6, (void *)this + 55);
  if (v8 == (uint64_t *)&v6)
  {
    v6[4]((void **)&v6);
  }
  else if (v8)
  {
    (*(void (**)(void))(*v8 + 40))();
  }
  int v6 = (void (**)(void **))&unk_26FCC8C28;
  int v7 = this;
  uint64_t v8 = (uint64_t *)&v6;
  std::__function::__value_func<BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::swap[abi:ne180100](&v6, (void *)this + 51);
  __n128 result = v8;
  if (v8 == (uint64_t *)&v6) {
    return (uint64_t *)((uint64_t (*)(void **))v6[4])((void **)&v6);
  }
  if (v8) {
    return (uint64_t *)(*(uint64_t (**)(void))(*v8 + 40))();
  }
  return result;
}

uint64_t BasebandTransportICE::open(uint64_t a1, uint64_t *a2, const void **a3)
{
  if (*(_DWORD *)a2 != 8)
  {
    long long v10 = *((_OWORD *)a2 + 1);
    v19[0] = *(_OWORD *)a2;
    v19[1] = v10;
    uint64_t v20 = a2[4];
    id v11 = (void *)*a3;
    if (*a3) {
      id v11 = _Block_copy(v11);
    }
    aBlocunint64_t k = v11;
    BOOL v9 = BasebandTransport::open((BasebandTransport *)a1, v19, &aBlock);
    if (aBlock) {
      _Block_release(aBlock);
    }
    goto LABEL_24;
  }
  uint64_t v6 = *a2;
  v26[1] = *((_OWORD *)a2 + 1);
  uint64_t v27 = a2[4];
  *(void *)&v26[0] = v6;
  *((void *)&v26[0] + 1) = 1;
  int v7 = (void *)*a3;
  if (*a3) {
    int v7 = _Block_copy(v7);
  }
  long long v25 = v7;
  BOOL v8 = BasebandTransport::open((BasebandTransport *)a1, v26, &v25);
  if (v25) {
    _Block_release(v25);
  }
  if (v8)
  {
    BOOL v9 = 1;
LABEL_24:
    BasebandTransportICE::configurePhysical((BasebandTransportICE *)a1);
    return v9;
  }
  uint64_t v12 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl(&dword_248AFD000, v12, OS_LOG_TYPE_DEFAULT, "#I Physical transport not available.  Trying ARI pipe...", (uint8_t *)buf, 2u);
  }
  if ((**(unsigned int (***)(uint64_t, uint64_t))(a1 + 8))(a1 + 8, 40))
  {
    ctu::LogMessageBuffer::createWithFormat(buf, (ctu::LogMessageBuffer *)"Physical transport not available.  Trying ARI pipe...", v13);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    MEMORY[0x24C58AFD0](buf);
  }
  long long v14 = *((_OWORD *)a2 + 1);
  v22[0] = *(_OWORD *)a2;
  v22[1] = v14;
  uint64_t v23 = a2[4];
  if (*a3) {
    uint64_t v15 = _Block_copy(*a3);
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v21 = v15;
  BOOL v16 = BasebandTransportICE::openARIClientPipe(a1, v22, &v21);
  if (v15) {
    _Block_release(v15);
  }
  if (!v16)
  {
    BOOL v9 = 0;
    goto LABEL_24;
  }
  BasebandTransportICE::configureARIPipe((BasebandTransportICE *)a1);
  return 1;
}

BOOL BasebandTransportICE::openARIClientPipe(uint64_t a1, long long *a2, void **a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  long long v6 = *a2;
  long long v7 = a2[1];
  *(unsigned char *)(a1 + 136) = *((unsigned char *)a2 + 32);
  *(_OWORD *)(a1 + 120) = v7;
  *(_OWORD *)(a1 + 104) = v6;
  BOOL v8 = *a3;
  if (*a3) {
    BOOL v8 = _Block_copy(v8);
  }
  BOOL v9 = *(const void **)(a1 + 144);
  *(void *)(a1 + 144) = v8;
  if (v9) {
    _Block_release(v9);
  }
  *(_DWORD *)(a1 + 504) = 0;
  long long v10 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v10 || (uint64_t v11 = *(void *)(a1 + 72), (v12 = std::__shared_weak_count::lock(v10)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  id v13 = v12;
  atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
  }
  {
    std::string::basic_string[abi:ne180100]<0>(&BasebandTransport::getName(void)::kName, "ipc.bb");
  }
  long long v14 = (unsigned int *)(a1 + 504);
  if (byte_269339F07 >= 0) {
    uint64_t v15 = (AriHost *)&BasebandTransport::getName(void)::kName;
  }
  else {
    uint64_t v15 = (AriHost *)BasebandTransport::getName(void)::kName;
  }
  int v16 = AriHost::RegisterClient(v15, (const char *)(a1 + 504), *(int **)(a1 + 512), (dispatch_queue_s *)(1000 * *((_DWORD *)a2 + 2)));
  if (v16)
  {
    BOOL v17 = 0;
    id v18 = (unsigned int (***)(void, uint64_t))(a1 + 8);
    uint64_t v19 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_18;
    }
  }
  else
  {
    v26[0] = v11;
    v26[1] = v13;
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v3 = v26;
    BOOL v17 = AriHost::SetRTEventHandler() == 0;
    id v18 = (unsigned int (***)(void, uint64_t))(a1 + 8);
    uint64_t v19 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_18;
    }
  }
  uint64_t v20 = "fail";
  unsigned int v21 = *v14;
  if (v17) {
    uint64_t v20 = "success";
  }
  *(_DWORD *)fd_set buf = 136315394;
  long long v28 = v20;
  __int16 v29 = 1024;
  unsigned int v30 = v21;
  _os_log_impl(&dword_248AFD000, v19, OS_LOG_TYPE_DEFAULT, "#I ARI pipe open %s ctx 0x%x", buf, 0x12u);
LABEL_18:
  if ((**v18)(v18, 40))
  {
    uint64_t v23 = "fail";
    if (v17) {
      uint64_t v23 = "success";
    }
    ctu::LogMessageBuffer::createWithFormat((uint64_t *)buf, (ctu::LogMessageBuffer *)"ARI pipe open %s ctx 0x%x", v22, v23, *v14);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    MEMORY[0x24C58AFD0](buf);
  }
  if (!v16)
  {
    uint64_t v24 = (std::__shared_weak_count *)v3[1];
    if (v24) {
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  std::__shared_weak_count::__release_weak(v13);
  return v17;
}

void sub_248B3675C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  std::__shared_weak_count::__release_weak(v18);
  _Unwind_Resume(a1);
}

uint64_t BasebandTransportICE::write(BasebandTransportICE *this, const unsigned __int8 *a2, uint64_t a3, unsigned int *a4, char a5, int a6)
{
  uint64_t v12 = a2;
  long long v10 = a4;
  uint64_t v11 = a3;
  char v9 = a5;
  int v8 = a6;
  uint64_t v6 = *((void *)this + 54);
  if (!v6) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, const unsigned __int8 **, uint64_t *, unsigned int **, char *, int *))(*(void *)v6 + 48))(v6, &v12, &v11, &v10, &v9, &v8);
}

uint64_t BasebandTransportICE::read(BasebandTransportICE *this, unsigned __int8 *a2, uint64_t a3, unsigned int *a4, char a5, int a6)
{
  uint64_t v12 = a2;
  long long v10 = a4;
  uint64_t v11 = a3;
  char v9 = a5;
  int v8 = a6;
  uint64_t v6 = *((void *)this + 58);
  if (!v6) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, unsigned __int8 **, uint64_t *, unsigned int **, char *, int *))(*(void *)v6 + 48))(v6, &v12, &v11, &v10, &v9, &v8);
}

uint64_t BasebandTransportICE::close_sync(BasebandTransportICE *this)
{
  uint64_t v1 = *((void *)this + 62);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  int v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);
  return v2();
}

uint64_t ___ZN20BasebandTransportICE17openARIClientPipeEN17BasebandTransport10ParametersEN8dispatch5blockIU13block_pointerFvPhjEEE_block_invoke(void *a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  int v2 = (std::__shared_weak_count *)a1[6];
  if (!v2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = a1[4];
  xpc_object_t v4 = std::__shared_weak_count::lock(v2);
  uint64_t v19 = v4;
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  if (!a1[5])
  {
    id v13 = v4;
    uint64_t v12 = 0xFFFFFFFFLL;
LABEL_27:
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    return v12;
  }
  uint64_t v5 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    Name = BasebandTransport::getName((BasebandTransport *)v3);
    if (*((char *)Name + 23) >= 0) {
      id v18 = Name;
    }
    else {
      id v18 = *(long long **)Name;
    }
    LODWORD(__dst) = 136315138;
    *(void *)((char *)&__dst + 4) = v18;
    _os_log_error_impl(&dword_248AFD000, v5, OS_LOG_TYPE_ERROR, "Got AriHost::ARI_RT_REINIT callback for %s", (uint8_t *)&__dst, 0xCu);
  }
  long long v7 = (const char *)&BasebandTransport::getName(void)::kName;
  if ((**(unsigned int (***)(uint64_t, uint64_t))(v3 + 8))(v3 + 8, 80))
  {
    {
      std::string::basic_string[abi:ne180100]<0>(&BasebandTransport::getName(void)::kName, "ipc.bb");
    }
    if (byte_269339F07 >= 0) {
      int v8 = &BasebandTransport::getName(void)::kName;
    }
    else {
      int v8 = (long long *)BasebandTransport::getName(void)::kName;
    }
    ctu::LogMessageBuffer::createWithFormat((uint64_t *)&__dst, (ctu::LogMessageBuffer *)"Got AriHost::ARI_RT_REINIT callback for %s", v6, v8);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    MEMORY[0x24C58AFD0](&__dst);
  }
  {
    std::string::basic_string[abi:ne180100]<0>(&BasebandTransport::getName(void)::kName, "ipc.bb");
  }
  if (byte_269339F07 < 0) {
    long long v7 = (const char *)BasebandTransport::getName(void)::kName;
  }
  size_t v9 = strlen(v7);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v21 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_23;
  }
  HIBYTE(v21) = v9;
  p_dst = &__dst;
  if (v9) {
LABEL_23:
  }
    memmove(p_dst, v7, v10);
  *((unsigned char *)p_dst + v10) = 0;
  AriHost::ReRegisterClient();
  if (SHIBYTE(v21) < 0) {
    operator delete((void *)__dst);
  }
  uint64_t v12 = 0;
  id v13 = v19;
  if (v19) {
    goto LABEL_27;
  }
  return v12;
}

void sub_248B36BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL BasebandTransportICE::writeARIClientPipe(BasebandTransportICE *this, const unsigned __int8 *a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v5 || (int v8 = std::__shared_weak_count::lock(v5)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v9 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (*((_DWORD *)this + 127))
    {
LABEL_5:
      atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      int started = AriHost::Send();
      uint64_t v11 = v9;
      goto LABEL_6;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (*((_DWORD *)this + 127)) {
      goto LABEL_5;
    }
  }
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  int started = AriHost::StartStream();
  uint64_t v11 = v9;
LABEL_6:
  std::__shared_weak_count::__release_weak(v11);
  if (started)
  {
    uint64_t v12 = (char *)this + 8;
    id v13 = *((void *)this + 5);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)fd_set buf = 134217984;
      uint64_t v17 = a3;
      _os_log_error_impl(&dword_248AFD000, v13, OS_LOG_TYPE_ERROR, "Failed to send %zu bytes on ARI pipe", buf, 0xCu);
    }
    if ((**(unsigned int (***)(char *, uint64_t))v12)(v12, 80))
    {
      ctu::LogMessageBuffer::createWithFormat((uint64_t *)buf, (ctu::LogMessageBuffer *)"Failed to send %zu bytes on ARI pipe", v14, a3);
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
      MEMORY[0x24C58AFD0](buf);
    }
  }
  else if (a4)
  {
    *a4 = a3;
  }
  std::__shared_weak_count::__release_weak(v9);
  return started == 0;
}

uint64_t ___ZN20BasebandTransportICE18writeARIClientPipeEPKhmPjbj_block_invoke(void *a1, uint64_t a2, int a3)
{
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = a1[4];
  int v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return 0xFFFFFFFFLL;
  }
  size_t v9 = v8;
  if (a1[5])
  {
    block[0] = MEMORY[0x263EF8330];
    block[1] = 0x40000000;
    block[2] = ___ZN20BasebandTransportICE18writeARIClientPipeEPKhmPjbj_block_invoke_2;
    block[3] = &__block_descriptor_tmp_10;
    block[4] = v7;
    void block[5] = a2;
    int v13 = a3;
    dispatch_async(*(dispatch_queue_t *)(v7 + 152), block);
    uint64_t v10 = 0;
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v10 = 0xFFFFFFFFLL;
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_8:
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v10;
}

void ___ZN20BasebandTransportICE18writeARIClientPipeEPKhmPjbj_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 128);
  if (v3)
  {
    std::string __p = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    (*(void (**)(uint64_t, void, void, void **))(*(void *)v3 + 8))(v3, *(void *)(a1 + 40), *(unsigned int *)(a1 + 48), &__p);
    xpc_object_t v4 = __p;
    size_t v5 = v12 - (unsigned char *)__p;
    if (*(unsigned char *)(v2 + 136))
    {
      uint64_t v6 = malloc_type_malloc(v12 - (unsigned char *)__p, 0x6FF6341AuLL);
      memcpy(v6, v4, v5);
    }
    (*(void (**)(void))(*(void *)(v2 + 144) + 16))();
    if (__p)
    {
      uint64_t v12 = __p;
      operator delete(__p);
    }
  }
  else
  {
    uint64_t v7 = *(const void **)(a1 + 40);
    size_t v8 = *(unsigned int *)(a1 + 48);
    if (*(unsigned char *)(v2 + 136))
    {
      size_t v9 = malloc_type_malloc(v8, 0x6FF6341AuLL);
      memcpy(v9, v7, v8);
    }
    uint64_t v10 = *(void (**)(void))(*(void *)(v2 + 144) + 16);
    v10();
  }
}

void sub_248B3722C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BasebandTransportICE::sendToDataHandler(BasebandTransportICE *this, unsigned __int8 *a2, size_t size)
{
  if (*((unsigned char *)this + 136))
  {
    uint64_t v6 = malloc_type_malloc(size, 0x6FF6341AuLL);
    memcpy(v6, a2, size);
    uint64_t v7 = *(uint64_t (**)(void))(*((void *)this + 18) + 16);
  }
  else
  {
    uint64_t v7 = *(uint64_t (**)(void))(*((void *)this + 18) + 16);
  }
  return v7();
}

uint64_t ___ZN20BasebandTransportICE18writeARIClientPipeEPKhmPjbj_block_invoke_15(void *a1, AriMsg *a2, unsigned int a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = a1[4];
  size_t v8 = std::__shared_weak_count::lock(v4);
  uint64_t v18 = v8;
  if (!v8) {
    return 0xFFFFFFFFLL;
  }
  size_t v9 = v8;
  if (a1[5])
  {
    block[0] = MEMORY[0x263EF8330];
    block[1] = 0x40000000;
    block[2] = ___ZN20BasebandTransportICE18writeARIClientPipeEPKhmPjbj_block_invoke_2_16;
    block[3] = &__block_descriptor_tmp_17;
    block[4] = v7;
    void block[5] = a2;
    unsigned int v16 = a3;
    dispatch_async(*(dispatch_queue_t *)(v7 + 152), block);
    int BufCtx = AriMsg::GetBufCtx(a2, (const unsigned __int8 *)a3);
    *(_DWORD *)(v7 + 508) = BufCtx;
    uint64_t v11 = *(NSObject **)(v7 + 40);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)fd_set buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = BufCtx;
      _os_log_impl(&dword_248AFD000, v11, OS_LOG_TYPE_DEFAULT, "#I bypass will use ctx id 0x%x", buf, 8u);
    }
    if ((**(unsigned int (***)(uint64_t, uint64_t))(v7 + 8))(v7 + 8, 40))
    {
      ctu::LogMessageBuffer::createWithFormat((uint64_t *)buf, (ctu::LogMessageBuffer *)"bypass will use ctx id 0x%x", v12, *(unsigned int *)(v7 + 508));
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
      MEMORY[0x24C58AFD0](buf);
    }
    uint64_t v13 = 0;
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v13 = 0xFFFFFFFFLL;
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_13:
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v13;
}

void ___ZN20BasebandTransportICE18writeARIClientPipeEPKhmPjbj_block_invoke_2_16(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 128);
  if (v3)
  {
    std::string __p = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    (*(void (**)(uint64_t, void, void, void **))(*(void *)v3 + 8))(v3, *(void *)(a1 + 40), *(unsigned int *)(a1 + 48), &__p);
    xpc_object_t v4 = __p;
    size_t v5 = v12 - (unsigned char *)__p;
    if (*(unsigned char *)(v2 + 136))
    {
      uint64_t v6 = malloc_type_malloc(v12 - (unsigned char *)__p, 0x6FF6341AuLL);
      memcpy(v6, v4, v5);
    }
    (*(void (**)(void))(*(void *)(v2 + 144) + 16))();
    if (__p)
    {
      uint64_t v12 = __p;
      operator delete(__p);
    }
  }
  else
  {
    uint64_t v7 = *(const void **)(a1 + 40);
    size_t v8 = *(unsigned int *)(a1 + 48);
    if (*(unsigned char *)(v2 + 136))
    {
      size_t v9 = malloc_type_malloc(v8, 0x6FF6341AuLL);
      memcpy(v9, v7, v8);
    }
    uint64_t v10 = *(void (**)(void))(*(void *)(v2 + 144) + 16);
    v10();
  }
}

void sub_248B376B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BasebandTransportICE::closeARIClientPipe_sync(BasebandTransportICE *this)
{
  *((_DWORD *)this + 127) = 0;
  AriHost::DeregisterClient((AriHost *)*((unsigned int *)this + 126));
  *((_DWORD *)this + 126) = 0;
  return 1;
}

void BasebandTransportICE::~BasebandTransportICE(BasebandTransportICE *this)
{
  BasebandTransportICE::~BasebandTransportICE(this);
  operator delete(v1);
}

{
  NSObject *v2;
  BasebandTransportICE *v3;
  char *v4;
  BasebandTransportICE *v5;
  char *v6;
  BasebandTransportICE *v7;
  BasebandTransport *v8;
  uint64_t vars8;

  *(void *)this = &unk_26FCC89F8;
  uint64_t v2 = *((void *)this + 64);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (BasebandTransportICE *)*((void *)this + 62);
  if (v3 == (BasebandTransportICE *)((char *)this + 472))
  {
    (*(void (**)(char *))(*((void *)this + 59) + 32))((char *)this + 472);
    xpc_object_t v4 = (char *)this + 440;
    size_t v5 = (BasebandTransportICE *)*((void *)this + 58);
    if (v5 != (BasebandTransportICE *)((char *)this + 440)) {
      goto LABEL_7;
    }
  }
  else
  {
    if (v3) {
      (*(void (**)(BasebandTransportICE *))(*(void *)v3 + 40))(v3);
    }
    xpc_object_t v4 = (char *)this + 440;
    size_t v5 = (BasebandTransportICE *)*((void *)this + 58);
    if (v5 != (BasebandTransportICE *)((char *)this + 440))
    {
LABEL_7:
      if (v5) {
        (*(void (**)(BasebandTransportICE *))(*(void *)v5 + 40))(v5);
      }
      uint64_t v6 = (char *)this + 408;
      uint64_t v7 = (BasebandTransportICE *)*((void *)this + 54);
      if (v7 != (BasebandTransportICE *)((char *)this + 408)) {
        goto LABEL_10;
      }
      goto LABEL_17;
    }
  }
  (*(void (**)(char *))(*(void *)v4 + 32))(v4);
  uint64_t v6 = (char *)this + 408;
  uint64_t v7 = (BasebandTransportICE *)*((void *)this + 54);
  if (v7 != (BasebandTransportICE *)((char *)this + 408))
  {
LABEL_10:
    if (v7) {
      (*(void (**)(BasebandTransportICE *))(*(void *)v7 + 40))(v7);
    }
    size_t v8 = this;
    goto LABEL_14;
  }
LABEL_17:
  (*(void (**)(char *))(*(void *)v6 + 32))(v6);
  size_t v8 = this;
LABEL_14:
  BasebandTransport::~BasebandTransport(v8);
}

void *std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_0,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_0>,BOOL ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26FCC8B08;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_0,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_0>,BOOL ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26FCC8B08;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_0,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_0>,BOOL ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  AriHost::EndStream((AriHost *)*(unsigned int *)(v1 + 508));
  *(_DWORD *)(v1 + 508) = 0;
  AriHost::DeregisterClient((AriHost *)*(unsigned int *)(v1 + 504));
  *(_DWORD *)(v1 + 504) = 0;
  return 1;
}

uint64_t std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_0,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_0>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN20BasebandTransportICE16configureARIPipeEvE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN20BasebandTransportICE16configureARIPipeEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN20BasebandTransportICE16configureARIPipeEvE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN20BasebandTransportICE16configureARIPipeEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_0,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_0>,BOOL ()(void)>::target_type()
{
}

void *std::__function::__value_func<BOOL ()(void)>::swap[abi:ne180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    unint64_t v3 = result;
    xpc_object_t v4 = (void *)result[3];
    size_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        memset(v6, 170, 24);
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_248B37CBC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_1,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26FCC8B98;
  return result;
}

void std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_1,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26FCC8B98;
}

uint64_t std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_1,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD **a4)
{
  **a4 = 0;
  return 0;
}

uint64_t std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_1,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN20BasebandTransportICE16configureARIPipeEvE3$_1") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN20BasebandTransportICE16configureARIPipeEvE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN20BasebandTransportICE16configureARIPipeEvE3$_1")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN20BasebandTransportICE16configureARIPipeEvE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_1,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::target_type()
{
}

void *std::__function::__value_func<BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::swap[abi:ne180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    unint64_t v3 = result;
    xpc_object_t v4 = (void *)result[3];
    size_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        memset(v6, 170, 24);
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_248B38054(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_2,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26FCC8C28;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_2,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26FCC8C28;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_2,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3, unsigned int **a4)
{
  xpc_object_t v4 = *(BasebandTransportICE **)(a1 + 8);
  uint64_t v5 = *a2;
  uint64_t v6 = *a3;
  uint64_t v7 = *a4;
  v21[0] = 0;
  v21[1] = v21;
  v21[2] = 0x4002000000;
  v21[3] = __Block_byref_object_copy__0;
  v21[4] = __Block_byref_object_dispose__0;
  std::string __p = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x2000000000;
  uint64_t v20 = v5;
  uint64_t v13 = 0;
  uint64_t v14 = &v13;
  uint64_t v15 = 0x2000000000;
  uint64_t v16 = v6;
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 0x40000000;
  void v12[2] = ___ZZN20BasebandTransportICE16configureARIPipeEvENK3__2clEPKhmPjbj_block_invoke;
  v12[3] = &unk_26524E8A8;
  v12[8] = v5;
  v12[9] = v6;
  v12[4] = v21;
  v12[5] = &v17;
  void v12[6] = &v13;
  v12[7] = v4;
  long long v25 = v12;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke_0;
  block[3] = &__block_descriptor_tmp_46;
  block[4] = (char *)v4 + 72;
  void block[5] = &v25;
  size_t v8 = *((void *)v4 + 11);
  if (*((void *)v4 + 12))
  {
    dispatch_async_and_wait(v8, block);
    uint64_t v9 = v14[3];
    if (v9)
    {
LABEL_3:
      BOOL v10 = BasebandTransportICE::writeARIClientPipe(v4, (const unsigned __int8 *)v18[3], v9, v7);
      goto LABEL_6;
    }
  }
  else
  {
    dispatch_sync(v8, block);
    uint64_t v9 = v14[3];
    if (v9) {
      goto LABEL_3;
    }
  }
  BOOL v10 = 1;
LABEL_6:
  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(&v17, 8);
  _Block_object_dispose(v21, 8);
  if (__p)
  {
    uint64_t v23 = __p;
    operator delete(__p);
  }
  return v10;
}

void sub_248B382A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  if (__p)
  {
    a34 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_2,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN20BasebandTransportICE16configureARIPipeEvE3$_2") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN20BasebandTransportICE16configureARIPipeEvE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN20BasebandTransportICE16configureARIPipeEvE3$_2")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN20BasebandTransportICE16configureARIPipeEvE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_2,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::target_type()
{
}

__n128 __Block_byref_object_copy__0(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

uint64_t (***___ZZN20BasebandTransportICE16configureARIPipeEvENK3__2clEPKhmPjbj_block_invoke(void *a1))(void, void, void, uint64_t)
{
  __n128 result = *(uint64_t (****)(void, void, void, uint64_t))(a1[7] + 128);
  if (result)
  {
    __n128 result = (uint64_t (***)(void, void, void, uint64_t))(**result)(result, a1[8], a1[9], *(void *)(a1[4] + 8) + 40);
    *(void *)(*(void *)(a1[5] + 8) + 24) = *(void *)(*(void *)(a1[4] + 8) + 40);
    *(void *)(*(void *)(a1[6] + 8) + 24) = *(void *)(*(void *)(a1[4] + 8) + 48)
                                                 - *(void *)(*(void *)(a1[4] + 8) + 40);
  }
  return result;
}

void *___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke_0(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void *std::__function::__value_func<BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::swap[abi:ne180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    unint64_t v3 = result;
    xpc_object_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        memset(v6, 170, 24);
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_248B386D4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_0,std::allocator<BasebandTransportICE::configurePhysical(void)::$_0>,BOOL ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26FCC8CB8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_0,std::allocator<BasebandTransportICE::configurePhysical(void)::$_0>,BOOL ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26FCC8CB8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_0,std::allocator<BasebandTransportICE::configurePhysical(void)::$_0>,BOOL ()(void)>::operator()(uint64_t a1)
{
  return BasebandTransport::close_sync(*(BasebandTransport **)(a1 + 8));
}

uint64_t std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_0,std::allocator<BasebandTransportICE::configurePhysical(void)::$_0>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN20BasebandTransportICE17configurePhysicalEvE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN20BasebandTransportICE17configurePhysicalEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN20BasebandTransportICE17configurePhysicalEvE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN20BasebandTransportICE17configurePhysicalEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_0,std::allocator<BasebandTransportICE::configurePhysical(void)::$_0>,BOOL ()(void)>::target_type()
{
}

void *std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_1,std::allocator<BasebandTransportICE::configurePhysical(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26FCC8D38;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_1,std::allocator<BasebandTransportICE::configurePhysical(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26FCC8D38;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_1,std::allocator<BasebandTransportICE::configurePhysical(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::operator()(uint64_t a1, unsigned __int8 **a2, unint64_t *a3, unsigned int **a4)
{
  return BasebandTransport::read(*(BasebandTransport **)(a1 + 8), *a2, *a3, *a4);
}

uint64_t std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_1,std::allocator<BasebandTransportICE::configurePhysical(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN20BasebandTransportICE17configurePhysicalEvE3$_1") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN20BasebandTransportICE17configurePhysicalEvE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN20BasebandTransportICE17configurePhysicalEvE3$_1")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN20BasebandTransportICE17configurePhysicalEvE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_1,std::allocator<BasebandTransportICE::configurePhysical(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::target_type()
{
}

void *std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_2,std::allocator<BasebandTransportICE::configurePhysical(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26FCC8DB8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_2,std::allocator<BasebandTransportICE::configurePhysical(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26FCC8DB8;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_2,std::allocator<BasebandTransportICE::configurePhysical(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::operator()(uint64_t a1, const unsigned __int8 **a2, uint64_t *a3, unsigned int **a4)
{
  return BasebandTransport::write(*(BasebandTransport **)(a1 + 8), *a2, *a3, *a4);
}

uint64_t std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_2,std::allocator<BasebandTransportICE::configurePhysical(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN20BasebandTransportICE17configurePhysicalEvE3$_2") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN20BasebandTransportICE17configurePhysicalEvE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN20BasebandTransportICE17configurePhysicalEvE3$_2")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN20BasebandTransportICE17configurePhysicalEvE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_2,std::allocator<BasebandTransportICE::configurePhysical(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::target_type()
{
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  operator delete(v1);
}

BOOL trace::isModeActive(int a1)
{
  return !a1 || a1 == 6;
}

const char *trace::toString(unsigned int a1)
{
  if (a1 > 7) {
    return "Unknown";
  }
  else {
    return off_26524E948[a1];
  }
}

{
  if (a1 > 3) {
    return "unknown";
  }
  else {
    return off_26524E988[a1];
  }
}

{
  if (a1 > 2) {
    return "Unknown";
  }
  else {
    return off_26524E9A8[a1];
  }
}

{
  if (a1 > 3) {
    return "Unknown";
  }
  else {
    return off_26524E9C0[a1];
  }
}

const char *trace::dal::toString(unsigned int a1)
{
  if (a1 > 6) {
    return "TraceLevelUnknown";
  }
  else {
    return off_26524E9E0[a1];
  }
}

{
  if (a1 > 2) {
    return "TraceModeUnknown";
  }
  else {
    return off_26524EA18[a1];
  }
}

abm::trace::TraceInfoEntry *abm::trace::TraceInfoEntry::TraceInfoEntry(abm::trace::TraceInfoEntry *this)
{
  *(_DWORD *)this = 0;
  Timestamp::Timestamp((abm::trace::TraceInfoEntry *)((char *)this + 8));
  *(_WORD *)((char *)this + 55) = 0;
  *((unsigned char *)this + 32) = 0;
  *(_WORD *)((char *)this + 79) = 0;
  *((unsigned char *)this + 103) = 0;
  return this;
}

{
  *(_DWORD *)this = 0;
  Timestamp::Timestamp((abm::trace::TraceInfoEntry *)((char *)this + 8));
  *(_WORD *)((char *)this + 55) = 0;
  *((unsigned char *)this + 32) = 0;
  *(_WORD *)((char *)this + 79) = 0;
  *((unsigned char *)this + 103) = 0;
  return this;
}

void abm::trace::TraceInfo::create(const void **a1@<X0>, void *a2@<X8>)
{
  xpc_object_t v4 = operator new(0x78uLL);
  abm::trace::TraceInfo::TraceInfo((uint64_t)v4, a1);
  *a2 = v4;
  uint64_t v5 = (std::__shared_weak_count *)operator new(0x20uLL);
  v5->__shared_owners_ = 0;
  p_shared_owners = &v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FCC8E78;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  a2[1] = v5;
  uint64_t v7 = (std::__shared_weak_count *)*((void *)v4 + 2);
  if (v7)
  {
    if (v7->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *((void *)v4 + 1) = v4;
      *((void *)v4 + 2) = v5;
      std::__shared_weak_count::__release_weak(v7);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_7;
      }
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v4 + 1) = v4;
    *((void *)v4 + 2) = v5;
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_7:
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_248B38D38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<abm::trace::TraceInfo>::~unique_ptr[abi:ne180100]((abm::trace::TraceInfo **)va);
  _Unwind_Resume(a1);
}

void sub_248B38D4C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t abm::trace::TraceInfo::TraceInfo(uint64_t a1, const void **a2)
{
  xpc_object_t v4 = (void *)ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)a1, "com.apple.telephony.abm", "trace.info");
  v4[3] = 0xAAAAAAAAAAAAAAAALL;
  v4[1] = 0;
  void v4[2] = 0;
  int v5 = *((char *)a2 + 23);
  if (v5 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  unint64_t v7 = v6 + 11;
  v4[4] = 0xAAAAAAAAAAAAAAAALL;
  v4[5] = 0xAAAAAAAAAAAAAAAALL;
  if (v6 + 11 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v7 >= 0x17)
  {
    uint64_t v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v9 = v7 | 7;
    }
    uint64_t v10 = v9 + 1;
    size_t v8 = operator new(v9 + 1);
    *(void *)(a1 + 32) = v7;
    *(void *)(a1 + 40) = v10 | 0x8000000000000000;
    *(void *)(a1 + 24) = v8;
  }
  else
  {
    v4[4] = 0;
    v4[5] = 0;
    v4[3] = 0;
    size_t v8 = v4 + 3;
    *(unsigned char *)(a1 + 47) = v7;
    if (!v6) {
      goto LABEL_15;
    }
  }
  if (v5 >= 0) {
    uint64_t v11 = a2;
  }
  else {
    uint64_t v11 = *a2;
  }
  memmove(v8, v11, v6);
LABEL_15:
  strcpy((char *)v8 + v6, "/trace.info");
  xpc_object_t v12 = xpc_array_create(0, 0);
  xpc_object_t v13 = v12;
  uint64_t v14 = (void *)(a1 + 48);
  if (v12)
  {
    void *v14 = v12;
  }
  else
  {
    xpc_object_t v13 = xpc_null_create();
    void *v14 = v13;
    if (!v13)
    {
      xpc_object_t v15 = xpc_null_create();
      xpc_object_t v13 = 0;
      goto LABEL_22;
    }
  }
  if (MEMORY[0x24C58BF40](v13) == MEMORY[0x263EF86D8])
  {
    xpc_retain(v13);
    goto LABEL_23;
  }
  xpc_object_t v15 = xpc_null_create();
LABEL_22:
  void *v14 = v15;
LABEL_23:
  xpc_release(v13);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  xpc_object_t v16 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v17 = v16;
  uint64_t v18 = (void *)(a1 + 80);
  if (v16)
  {
    void *v18 = v16;
  }
  else
  {
    xpc_object_t v17 = xpc_null_create();
    void *v18 = v17;
    if (!v17)
    {
      xpc_object_t v19 = xpc_null_create();
      xpc_object_t v17 = 0;
      goto LABEL_30;
    }
  }
  if (MEMORY[0x24C58BF40](v17) == MEMORY[0x263EF8708])
  {
    xpc_retain(v17);
    goto LABEL_31;
  }
  xpc_object_t v19 = xpc_null_create();
LABEL_30:
  void *v18 = v19;
LABEL_31:
  xpc_release(v17);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = a1 + 96;
  uint64_t v20 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  uint64_t v21 = off_26B149A48;
  if (!off_26B149A48)
  {
    ctu::Gestalt::create_default_global((uint64_t *)buf, v20);
    long long v22 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    uint64_t v23 = (std::__shared_weak_count *)*(&off_26B149A48 + 1);
    off_26B149A48 = v22;
    if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    uint64_t v24 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    uint64_t v21 = off_26B149A48;
  }
  long long v25 = (std::__shared_weak_count *)*(&off_26B149A48 + 1);
  if (*(&off_26B149A48 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26B149A48 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v21 + 144))(v21)) {
    int v26 = 1000;
  }
  else {
    int v26 = 500;
  }
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  *(_DWORD *)(a1 + 112) = v26;
  uint64_t v27 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  uint64_t v28 = off_26B149A48;
  if (!off_26B149A48)
  {
    ctu::Gestalt::create_default_global((uint64_t *)buf, v27);
    long long v29 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    unsigned int v30 = (std::__shared_weak_count *)*(&off_26B149A48 + 1);
    off_26B149A48 = v29;
    if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
    uint64_t v31 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
    uint64_t v28 = off_26B149A48;
  }
  std::locale v32 = (std::__shared_weak_count *)*(&off_26B149A48 + 1);
  if (*(&off_26B149A48 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26B149A48 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v28 + 144))(v28)) {
    int v33 = 15;
  }
  else {
    int v33 = 14;
  }
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  *(_DWORD *)(a1 + 116) = v33;
  long long v34 = *(NSObject **)a1;
  if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)fd_set buf = 0;
    _os_log_debug_impl(&dword_248AFD000, v34, OS_LOG_TYPE_DEBUG, "#D New Trace Info", buf, 2u);
  }
  return a1;
}

void sub_248B39290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  std::__tree<std::__value_type<abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>>,std::__map_value_compare<abm::trace::TraceInfoState,std::__value_type<abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>>,std::less<abm::trace::TraceInfoState>,true>,std::allocator<std::__value_type<abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>>>>::destroy(*(void **)(v3 + 96));
  xpc::dict::~dict(v6);
  std::vector<abm::trace::TraceInfoEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  xpc::array::~array(v5);
  if (*(char *)(v3 + 47) < 0)
  {
    operator delete(*v4);
    size_t v8 = *(std::__shared_weak_count **)(v3 + 16);
    if (v8) {
      goto LABEL_3;
    }
  }
  else
  {
    size_t v8 = *(std::__shared_weak_count **)(v3 + 16);
    if (v8)
    {
LABEL_3:
      std::__shared_weak_count::__release_weak(v8);
      MEMORY[0x24C58AF70](v3);
      _Unwind_Resume(a1);
    }
  }
  MEMORY[0x24C58AF70](v3);
  _Unwind_Resume(a1);
}

void sub_248B39364()
{
  if (*(void *)(v0 + 16)) {
    JUMPOUT(0x248B39328);
  }
  JUMPOUT(0x248B39344);
}

void abm::trace::TraceInfo::init(os_log_t *this)
{
  uint64_t v1 = *this;
  if (os_log_type_enabled(*this, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_debug_impl(&dword_248AFD000, v1, OS_LOG_TYPE_DEBUG, "#D New Trace Info", v2, 2u);
  }
}

void xpc::array::~array(xpc_object_t *this)
{
  *this = 0;
}

void abm::trace::TraceInfo::~TraceInfo(abm::trace::TraceInfo *this)
{
  std::__tree<std::__value_type<abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>>,std::__map_value_compare<abm::trace::TraceInfoState,std::__value_type<abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>>,std::less<abm::trace::TraceInfoState>,true>,std::allocator<std::__value_type<abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>>>>::destroy(*((void **)this + 12));
  xpc_release(*((xpc_object_t *)this + 10));
  *((void *)this + 10) = 0;
  uint64_t v3 = (void **)((char *)this + 56);
  std::vector<abm::trace::TraceInfoEntry>::__destroy_vector::operator()[abi:ne180100](&v3);
  xpc_release(*((xpc_object_t *)this + 6));
  *((void *)this + 6) = 0;
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  JUMPOUT(0x24C58AF70);
}

const char *abm::trace::TraceInfo::asString(uint64_t a1, unsigned int a2)
{
  if (a2 > 0xF) {
    return "Unknown";
  }
  else {
    return off_26524EA30[a2];
  }
}

void abm::trace::TraceInfo::push(uint64_t a1, int a2, const std::string *a3, _OWORD *a4, const std::string *a5, const std::string *a6)
{
  unint64_t v27 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)int v26 = v12;
  *(_OWORD *)&v26[16] = v12;
  long long v24 = v12;
  long long v25 = v12;
  long long v22 = v12;
  long long v23 = v12;
  Timestamp::Timestamp((Timestamp *)((char *)&v22 + 8));
  *(_WORD *)((char *)&v25 + 7) = 0;
  LOBYTE(v24) = 0;
  *(_WORD *)&v26[15] = 0;
  HIBYTE(v27) = 0;
  LODWORD(v22) = a2;
  if ((long long *)((char *)&v22 + 8) != a4) {
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>((uint64_t)&v22 + 8, *(void **)a4, (void *)a4 + 1);
  }
  std::string::operator=((std::string *)&v24, a3);
  std::string::operator=((std::string *)((char *)&v25 + 8), a5);
  std::string::operator=((std::string *)&v26[16], a6);
  abm::trace::TraceInfoEntry::TraceInfoEntry((abm::trace::TraceInfoEntry *)v13, (const abm::trace::TraceInfoEntry *)&v22);
  abm::trace::TraceInfo::push(a1, v13);
  if (v21 < 0)
  {
    operator delete(__p);
    if ((v19 & 0x80000000) == 0)
    {
LABEL_5:
      if ((v17 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
  }
  else if ((v19 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(v18);
  if ((v17 & 0x80000000) == 0)
  {
LABEL_6:
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v14, v15);
    if ((SHIBYTE(v27) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v16);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v14, v15);
  if ((SHIBYTE(v27) & 0x80000000) == 0)
  {
LABEL_7:
    if ((v26[15] & 0x80000000) == 0) {
      goto LABEL_8;
    }
LABEL_14:
    operator delete(*((void **)&v25 + 1));
    if ((SBYTE7(v25) & 0x80000000) == 0) {
      goto LABEL_9;
    }
LABEL_15:
    operator delete((void *)v24);
    goto LABEL_9;
  }
LABEL_13:
  operator delete(*(void **)&v26[16]);
  if ((v26[15] & 0x80000000) != 0) {
    goto LABEL_14;
  }
LABEL_8:
  if (SBYTE7(v25) < 0) {
    goto LABEL_15;
  }
LABEL_9:
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v22 + 8, (void *)v23);
}

void sub_248B39680(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void *);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  abm::trace::TraceInfoEntry::~TraceInfoEntry((void **)va);
  abm::trace::TraceInfoEntry::~TraceInfoEntry((void **)va1);
  _Unwind_Resume(a1);
}

void sub_248B3969C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  abm::trace::TraceInfoEntry::~TraceInfoEntry((void **)va);
  _Unwind_Resume(a1);
}

void abm::trace::TraceInfo::push(uint64_t a1, char *a2)
{
  if (*(_DWORD *)a2 == 13)
  {
    xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
    uint64_t v5 = MEMORY[0x263EF8708];
    if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x24C58BF40](v4) == v5)
      {
        xpc_retain(v4);
        xpc_object_t v6 = v4;
      }
      else
      {
        xpc_object_t v6 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v4 = 0;
    }
    xpc_release(v4);
    uint64_t v25 = MEMORY[0x24C58BF40](v6);
    if (v25 != v5)
    {
      int v26 = *(NSObject **)a1;
      if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p) = 0;
        _os_log_error_impl(&dword_248AFD000, v26, OS_LOG_TYPE_ERROR, "Failed to create entry dictionary!", (uint8_t *)&__p, 2u);
      }
      goto LABEL_58;
    }
    Timestamp::asString((uint64_t)(a2 + 8), 0, 9);
    if ((SBYTE7(v43) & 0x80u) == 0) {
      p_p = (const char *)&__p;
    }
    else {
      p_p = (const char *)__p;
    }
    xpc_object_t v28 = xpc_string_create(p_p);
    if (!v28) {
      xpc_object_t v28 = xpc_null_create();
    }
    xpc_dictionary_set_value(v6, "Timestamp", v28);
    xpc_object_t v29 = xpc_null_create();
    xpc_release(v28);
    xpc_release(v29);
    if (SBYTE7(v43) < 0)
    {
      operator delete(__p);
      unsigned int v30 = a2 + 56;
      if ((a2[79] & 0x80000000) == 0) {
        goto LABEL_51;
      }
    }
    else
    {
      unsigned int v30 = a2 + 56;
      if ((a2[79] & 0x80000000) == 0)
      {
LABEL_51:
        xpc_object_t v31 = xpc_string_create(v30);
        if (!v31) {
          xpc_object_t v31 = xpc_null_create();
        }
        xpc_dictionary_set_value(v6, "File Name", v31);
        xpc_object_t v32 = xpc_null_create();
        xpc_release(v31);
        xpc_release(v32);
        int v33 = a2 + 80;
        if (a2[103] < 0) {
          int v33 = *(const char **)v33;
        }
        xpc_object_t v34 = xpc_string_create(v33);
        if (!v34) {
          xpc_object_t v34 = xpc_null_create();
        }
        xpc_dictionary_set_value(v6, "File Size", v34);
        xpc_object_t v35 = xpc_null_create();
        xpc_release(v34);
        xpc_release(v35);
        xpc_array_append_value(*(xpc_object_t *)(a1 + 48), v6);
LABEL_58:
        xpc_release(v6);
        if (v25 != v5) {
          return;
        }
        goto LABEL_80;
      }
    }
    unsigned int v30 = *(const char **)v30;
    goto LABEL_51;
  }
  if (*(_DWORD *)(a1 + 116) >= *(_DWORD *)a2)
  {
    uint64_t v7 = *(abm::trace::TraceInfoEntry **)(a1 + 56);
    uint64_t v8 = *(abm::trace::TraceInfoEntry **)(a1 + 64);
    if (0x4EC4EC4EC4EC4EC5 * ((v8 - v7) >> 3) != *(_DWORD *)(a1 + 112))
    {
      uint64_t v7 = *(abm::trace::TraceInfoEntry **)(a1 + 64);
      uint64_t v16 = a1 + 72;
      unint64_t v17 = *(void *)(a1 + 72);
      if ((unint64_t)v8 < v17)
      {
LABEL_31:
        abm::trace::TraceInfoEntry::TraceInfoEntry(v7, (const abm::trace::TraceInfoEntry *)a2);
        long long v24 = (char *)v7 + 104;
        *(void *)(a1 + 64) = (char *)v7 + 104;
LABEL_79:
        *(void *)(a1 + 64) = v24;
        goto LABEL_80;
      }
      goto LABEL_19;
    }
    if ((abm::trace::TraceInfoEntry *)((char *)v7 + 104) != v8)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = (char *)v7 + v9;
        *(_DWORD *)((char *)v7 + v9) = *(_DWORD *)((char *)v7 + v9 + 104);
        std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>((uint64_t)v7 + v9 + 8, *(void **)((char *)v7 + v9 + 112), (abm::trace::TraceInfoEntry *)((char *)v7 + v9 + 120));
        uint64_t v11 = (void **)((char *)v7 + v9 + 32);
        if (*((char *)v7 + v9 + 55) < 0) {
          operator delete(*v11);
        }
        *(_OWORD *)uint64_t v11 = *(_OWORD *)(v10 + 136);
        *((void *)v10 + 6) = *((void *)v10 + 19);
        v10[159] = 0;
        v10[136] = 0;
        uint64_t v12 = v10 + 56;
        if (v10[79] < 0) {
          operator delete(*(void **)v12);
        }
        uint64_t v13 = v10 + 160;
        uint64_t v14 = (char *)v7 + v9;
        *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
        *((void *)v12 + 2) = *((void *)v13 + 2);
        *((unsigned char *)v7 + v9 + 183) = 0;
        *uint64_t v13 = 0;
        uint64_t v15 = (void **)((char *)v7 + v9 + 80);
        if (*((char *)v7 + v9 + 103) < 0) {
          operator delete(*v15);
        }
        *(_OWORD *)uint64_t v15 = *(_OWORD *)(v14 + 184);
        *(void *)((char *)v7 + v9 + 96) = *((void *)v14 + 25);
        v14[207] = 0;
        v14[184] = 0;
        v9 += 104;
      }
      while ((abm::trace::TraceInfoEntry *)((char *)v7 + v9 + 104) != v8);
      uint64_t v8 = *(abm::trace::TraceInfoEntry **)(a1 + 64);
      uint64_t v7 = (abm::trace::TraceInfoEntry *)((char *)v7 + v9);
    }
    if (v8 == v7)
    {
LABEL_30:
      *(void *)(a1 + 64) = v7;
      uint64_t v16 = a1 + 72;
      unint64_t v17 = *(void *)(a1 + 72);
      if ((unint64_t)v7 < v17) {
        goto LABEL_31;
      }
LABEL_19:
      uint64_t v18 = *(void *)(a1 + 56);
      uint64_t v19 = 0x4EC4EC4EC4EC4EC5 * (((uint64_t)v7 - v18) >> 3);
      if ((unint64_t)(v19 + 1) > 0x276276276276276) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v20 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v17 - v18) >> 3);
      uint64_t v21 = 2 * v20;
      if (2 * v20 <= v19 + 1) {
        uint64_t v21 = v19 + 1;
      }
      if (v20 >= 0x13B13B13B13B13BLL) {
        unint64_t v22 = 0x276276276276276;
      }
      else {
        unint64_t v22 = v21;
      }
      uint64_t v44 = v16;
      if (v22)
      {
        if (v22 > 0x276276276276276) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        long long v23 = (char *)operator new(104 * v22);
      }
      else
      {
        long long v23 = 0;
      }
      std::string __p = v23;
      char v42 = (abm::trace::TraceInfoEntry *)&v23[104 * v19];
      *((void *)&v43 + 1) = &v23[104 * v22];
      abm::trace::TraceInfoEntry::TraceInfoEntry(v42, (const abm::trace::TraceInfoEntry *)a2);
      long long v24 = (char *)v42 + 104;
      *(void *)&long long v43 = (char *)v42 + 104;
      uint64_t v37 = *(char **)(a1 + 56);
      long long v36 = *(char **)(a1 + 64);
      if (v36 == v37)
      {
        *(void *)(a1 + 56) = v42;
        *(void *)(a1 + 64) = v24;
        *(void *)(a1 + 72) = *((void *)&v43 + 1);
        goto LABEL_77;
      }
      uint64_t v38 = 0;
      do
      {
        abm::trace::TraceInfoEntry::TraceInfoEntry((abm::trace::TraceInfoEntry *)((char *)v42 + v38 - 104), (const abm::trace::TraceInfoEntry *)&v36[v38 - 104]);
        v38 -= 104;
      }
      while (&v36[v38] != v37);
      long long v36 = *(char **)(a1 + 56);
      uint64_t v39 = *(void ***)(a1 + 64);
      *(void *)(a1 + 56) = (char *)v42 + v38;
      uint64_t v40 = (char *)v43;
      *(_OWORD *)(a1 + 64) = v43;
      long long v24 = v40;
      if (v39 == (void **)v36)
      {
LABEL_77:
        if (v36) {
          operator delete(v36);
        }
        goto LABEL_79;
      }
      while (1)
      {
        if (*((char *)v39 - 1) < 0)
        {
          operator delete(*(v39 - 3));
          if ((*((char *)v39 - 25) & 0x80000000) == 0)
          {
LABEL_71:
            if (*((char *)v39 - 49) < 0) {
              goto LABEL_75;
            }
            goto LABEL_68;
          }
        }
        else if ((*((char *)v39 - 25) & 0x80000000) == 0)
        {
          goto LABEL_71;
        }
        operator delete(*(v39 - 6));
        if (*((char *)v39 - 49) < 0) {
LABEL_75:
        }
          operator delete(*(v39 - 9));
LABEL_68:
        std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)(v39 - 12), *(v39 - 11));
        v39 -= 13;
        if (v39 == (void **)v36) {
          goto LABEL_77;
        }
      }
    }
    while (1)
    {
      if (*((char *)v8 - 1) < 0)
      {
        operator delete(*((void **)v8 - 3));
        if ((*((char *)v8 - 25) & 0x80000000) == 0)
        {
LABEL_35:
          if (*((char *)v8 - 49) < 0) {
            goto LABEL_39;
          }
          goto LABEL_32;
        }
      }
      else if ((*((char *)v8 - 25) & 0x80000000) == 0)
      {
        goto LABEL_35;
      }
      operator delete(*((void **)v8 - 6));
      if (*((char *)v8 - 49) < 0) {
LABEL_39:
      }
        operator delete(*((void **)v8 - 9));
LABEL_32:
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v8 - 96, *((void **)v8 - 11));
      uint64_t v8 = (abm::trace::TraceInfoEntry *)((char *)v8 - 104);
      if (v8 == v7) {
        goto LABEL_30;
      }
    }
  }
LABEL_80:
  abm::trace::TraceInfo::notify((abm::trace::TraceInfo *)a1, (const abm::trace::TraceInfoEntry *)a2);
}

void sub_248B39C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_248B39C94(_Unwind_Exception *a1)
{
  *(void *)(v1 + 64) = v2;
  _Unwind_Resume(a1);
}

void sub_248B39CD8(_Unwind_Exception *a1)
{
  xpc_release(v1);
  _Unwind_Resume(a1);
}

void sub_248B39D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!v10)
  {
LABEL_2:
    std::__split_buffer<abm::trace::TraceInfoEntry>::~__split_buffer((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  while (1)
  {
    uint64_t v12 = v9 + v10;
    if (*(char *)(v9 + v10 + 103) < 0)
    {
      operator delete(*(void **)(v12 + 80));
      if ((*(char *)(v12 + 79) & 0x80000000) == 0)
      {
LABEL_6:
        uint64_t v13 = v9 + v10;
        if (*(char *)(v9 + v10 + 55) < 0) {
          goto LABEL_10;
        }
        goto LABEL_3;
      }
    }
    else if ((*(char *)(v12 + 79) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(*(void **)(v9 + v10 + 56));
    uint64_t v13 = v9 + v10;
    if (*(char *)(v9 + v10 + 55) < 0) {
LABEL_10:
    }
      operator delete(*(void **)(v13 + 32));
LABEL_3:
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v13 + 8, *(void **)(v13 + 16));
    v10 += 104;
    if (!v10) {
      goto LABEL_2;
    }
  }
}

void abm::trace::TraceInfoEntry::~TraceInfoEntry(void **this)
{
  if ((*((char *)this + 103) & 0x80000000) == 0)
  {
    if ((*((char *)this + 79) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    operator delete(this[7]);
    if ((*((char *)this + 55) & 0x80000000) == 0) {
      goto LABEL_4;
    }
LABEL_7:
    operator delete(this[4]);
    goto LABEL_4;
  }
  operator delete(this[10]);
  if (*((char *)this + 79) < 0) {
    goto LABEL_6;
  }
LABEL_3:
  if (*((char *)this + 55) < 0) {
    goto LABEL_7;
  }
LABEL_4:
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)(this + 1), this[2]);
}

void abm::trace::TraceInfo::push(uint64_t a1, uint64_t a2, void *a3)
{
  if (MEMORY[0x24C58BF40](*a3) == MEMORY[0x263EF8708])
  {
    xpc_object_t v6 = (xpc_object_t)*a3;
    if (v6) {
      xpc_retain(v6);
    }
    else {
      xpc_object_t v6 = xpc_null_create();
    }
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v7 = (const char *)a2;
    }
    else {
      uint64_t v7 = *(const char **)a2;
    }
    xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 80), v7, v6);
    xpc_object_t v8 = xpc_null_create();
    xpc_release(v6);
    xpc_release(v8);
  }
}

void abm::trace::TraceInfo::notify(abm::trace::TraceInfo *this, const abm::trace::TraceInfoEntry *a2)
{
  xpc_object_t v4 = (char *)*((void *)this + 12);
  uint64_t v2 = (char *)this + 96;
  uint64_t v3 = v4;
  if (v4)
  {
    int v6 = *(_DWORD *)a2;
    uint64_t v7 = v2;
    do
    {
      int v8 = *((_DWORD *)v3 + 8);
      BOOL v9 = v8 < v6;
      if (v8 >= v6) {
        uint64_t v10 = (char **)v3;
      }
      else {
        uint64_t v10 = (char **)(v3 + 8);
      }
      if (!v9) {
        uint64_t v7 = v3;
      }
      uint64_t v3 = *v10;
    }
    while (*v10);
    if (v7 != v2 && v6 >= *((_DWORD *)v7 + 8))
    {
      uint64_t v11 = (const void *)*((void *)v7 + 5);
      if (v11)
      {
        uint64_t v12 = _Block_copy(v11);
        uint64_t v13 = v12;
        uint64_t v14 = *((void *)v7 + 6);
        int v26 = v12;
        unint64_t v27 = v14;
        if (!v14)
        {
          if (!v12) {
            return;
          }
          goto LABEL_37;
        }
        dispatch_retain(v14);
        if (v13)
        {
          abm::trace::TraceInfoEntry::TraceInfoEntry((abm::trace::TraceInfoEntry *)v19, a2);
          uint64_t v15 = _Block_copy(v13);
          uint64_t v16 = v15;
          block[0] = MEMORY[0x263EF8330];
          block[1] = 1174405120;
          block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3abm5trace14TraceInfoEntryEEEclIJS3_EEEvDpT__block_invoke;
          block[3] = &__block_descriptor_tmp_7;
          if (v15) {
            unint64_t v17 = _Block_copy(v15);
          }
          else {
            unint64_t v17 = 0;
          }
          aBlocunint64_t k = v17;
          abm::trace::TraceInfoEntry::TraceInfoEntry((abm::trace::TraceInfoEntry *)&v30, (const abm::trace::TraceInfoEntry *)v19);
          dispatch_async(v14, block);
          if (v38 < 0)
          {
            operator delete(__p);
            if ((v36 & 0x80000000) == 0)
            {
LABEL_24:
              if ((v34 & 0x80000000) == 0) {
                goto LABEL_25;
              }
              goto LABEL_29;
            }
          }
          else if ((v36 & 0x80000000) == 0)
          {
            goto LABEL_24;
          }
          operator delete(v35);
          if ((v34 & 0x80000000) == 0)
          {
LABEL_25:
            std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v31, v32);
            uint64_t v18 = aBlock;
            if (!aBlock)
            {
LABEL_31:
              if (v16) {
                _Block_release(v16);
              }
              if (v25 < 0)
              {
                operator delete(v24);
                if ((v23 & 0x80000000) == 0)
                {
LABEL_35:
                  if ((v21 & 0x80000000) == 0)
                  {
LABEL_36:
                    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v20, v20[1]);
                    dispatch_release(v14);
LABEL_37:
                    _Block_release(v13);
                    return;
                  }
LABEL_41:
                  operator delete(v20[3]);
                  goto LABEL_36;
                }
              }
              else if ((v23 & 0x80000000) == 0)
              {
                goto LABEL_35;
              }
              operator delete(v22);
              if ((v21 & 0x80000000) == 0) {
                goto LABEL_36;
              }
              goto LABEL_41;
            }
LABEL_30:
            _Block_release(v18);
            goto LABEL_31;
          }
LABEL_29:
          operator delete(v33);
          std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v31, v32);
          uint64_t v18 = aBlock;
          if (!aBlock) {
            goto LABEL_31;
          }
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v14 = *((void *)v7 + 6);
        if (!v14) {
          return;
        }
        dispatch_retain(v14);
      }
      dispatch_release(v14);
    }
  }
}

void sub_248B3A104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *aBlock)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v29) {
    _Block_release(v29);
  }
  abm::trace::TraceInfoEntry::~TraceInfoEntry(&a10);
  dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>::~callback((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_248B3A144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL abm::trace::TraceInfo::flushDataToDisk(abm::trace::TraceInfo *this)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  xpc_object_t v2 = (xpc_object_t)*((void *)this + 6);
  if (v2) {
    xpc_retain(*((xpc_object_t *)this + 6));
  }
  else {
    xpc_object_t v2 = xpc_null_create();
  }
  xpc_dictionary_set_value(*((xpc_object_t *)this + 10), "Segments", v2);
  xpc_object_t v3 = xpc_null_create();
  xpc_release(v2);
  xpc_release(v3);
  abm::trace::TraceInfo::convertStateTransitionArray(this, &value);
  xpc_object_t v4 = value;
  xpc_dictionary_set_value(*((xpc_object_t *)this + 10), "State Transition", value);
  xpc_object_t v5 = xpc_null_create();
  xpc_release(v4);
  xpc_release(v5);
  xpc_object_t value = 0;
  abm::trace::TraceInfo::getHeader((NSObject **)this, &object);
  int v6 = (const char *)*MEMORY[0x263F260F0];
  xpc_dictionary_set_value(*((xpc_object_t *)this + 10), (const char *)*MEMORY[0x263F260F0], object);
  xpc_object_t v7 = object;
  xpc_object_t object = xpc_null_create();
  xpc_release(v7);
  xpc_release(object);
  int v8 = (void *)*((void *)this + 10);
  xpc_object_t v35 = v8;
  xpc_object_t object = 0;
  if (v8)
  {
    xpc_retain(v8);
    BOOL v9 = (std::string *)((char *)this + 24);
    if ((*((char *)this + 47) & 0x80000000) == 0)
    {
LABEL_6:
      std::string __p = *v9;
      goto LABEL_9;
    }
  }
  else
  {
    xpc_object_t v35 = xpc_null_create();
    BOOL v9 = (std::string *)((char *)this + 24);
    if ((*((char *)this + 47) & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 3), *((void *)this + 4));
LABEL_9:
  BOOL v10 = util::writeJSON((ctu **)&v35, (uint64_t *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  xpc_release(v35);
  xpc_object_t v35 = 0;
  uint64_t v11 = *(NSObject **)this;
  uint64_t v12 = *(NSObject **)this;
  if (v10)
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)this + 47) < 0) {
        BOOL v9 = (std::string *)v9->__r_.__value_.__r.__words[0];
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v9;
      _os_log_impl(&dword_248AFD000, v11, OS_LOG_TYPE_DEFAULT, "#I Written %s", (uint8_t *)&buf, 0xCu);
    }
  }
  else if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    if (*((char *)this + 47) < 0) {
      BOOL v9 = (std::string *)v9->__r_.__value_.__r.__words[0];
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v9;
    _os_log_error_impl(&dword_248AFD000, v11, OS_LOG_TYPE_ERROR, "Failed to store %s", (uint8_t *)&buf, 0xCu);
  }
  xpc_object_t v13 = xpc_dictionary_create(0, 0, 0);
  uint64_t v14 = MEMORY[0x263EF8708];
  if (v13 || (xpc_object_t v13 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x24C58BF40](v13) == v14)
    {
      xpc_retain(v13);
      xpc_object_t v15 = v13;
    }
    else
    {
      xpc_object_t v15 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v15 = xpc_null_create();
    xpc_object_t v13 = 0;
  }
  xpc_release(v13);
  if (MEMORY[0x24C58BF40](v15) != v14)
  {
    uint64_t v16 = *(NSObject **)this;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      unint64_t v17 = "Failed to create information dictionary!";
LABEL_62:
      _os_log_error_impl(&dword_248AFD000, v16, OS_LOG_TYPE_ERROR, v17, (uint8_t *)&buf, 2u);
      goto LABEL_42;
    }
    goto LABEL_42;
  }
  xpc_object_t v18 = xpc_dictionary_get_value(*((xpc_object_t *)this + 10), v6);
  xpc_object_t v19 = v18;
  if (v18)
  {
    xpc_retain(v18);
LABEL_29:
    xpc_retain(v19);
    xpc_object_t v20 = v19;
    goto LABEL_30;
  }
  xpc_object_t v19 = xpc_null_create();
  if (v19) {
    goto LABEL_29;
  }
  xpc_object_t v20 = xpc_null_create();
  xpc_object_t v19 = 0;
LABEL_30:
  xpc_dictionary_set_value(v15, v6, v20);
  xpc_object_t v21 = xpc_null_create();
  xpc_release(v21);
  xpc_release(v19);
  xpc_release(v20);
  if (v15)
  {
    xpc_retain(v15);
    xpc_object_t v22 = v15;
  }
  else
  {
    xpc_object_t v22 = xpc_null_create();
  }
  char v23 = (void *)*((void *)this + 10);
  *((void *)this + 10) = v22;
  xpc_release(v23);
  xpc_object_t v24 = xpc_array_create(0, 0);
  uint64_t v25 = MEMORY[0x263EF86D8];
  if (v24 || (xpc_object_t v24 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x24C58BF40](v24) == v25)
    {
      xpc_retain(v24);
      xpc_object_t v26 = v24;
    }
    else
    {
      xpc_object_t v26 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v26 = xpc_null_create();
    xpc_object_t v24 = 0;
  }
  xpc_release(v24);
  xpc_object_t v27 = xpc_null_create();
  xpc_object_t v28 = (void *)*((void *)this + 6);
  *((void *)this + 6) = v26;
  xpc_release(v28);
  xpc_release(v27);
  if (MEMORY[0x24C58BF40](*((void *)this + 6)) == v25)
  {
    uint64_t v30 = (void **)((char *)this + 56);
    uint64_t v31 = *((void *)this + 7);
    if (!v31)
    {
LABEL_57:
      const char *v30 = 0;
      *((void *)this + 8) = 0;
      *((void *)this + 9) = 0;
      uint64_t v40 = 0;
      p_long long buf = (void **)&buf;
      long long buf = 0uLL;
      std::vector<abm::trace::TraceInfoEntry>::__destroy_vector::operator()[abi:ne180100](&p_buf);
      goto LABEL_43;
    }
    uint64_t v32 = *((void *)this + 8);
    int v33 = (void *)*((void *)this + 7);
    if (v32 == v31)
    {
LABEL_56:
      *((void *)this + 8) = v31;
      operator delete(v33);
      const char *v30 = 0;
      *((void *)this + 8) = 0;
      *((void *)this + 9) = 0;
      goto LABEL_57;
    }
    while (1)
    {
      if (*(char *)(v32 - 1) < 0)
      {
        operator delete(*(void **)(v32 - 24));
        if (*(char *)(v32 - 25) < 0)
        {
LABEL_47:
          operator delete(*(void **)(v32 - 48));
          if (*(char *)(v32 - 49) < 0) {
            goto LABEL_54;
          }
          goto LABEL_48;
        }
      }
      else if (*(char *)(v32 - 25) < 0)
      {
        goto LABEL_47;
      }
      if (*(char *)(v32 - 49) < 0) {
LABEL_54:
      }
        operator delete(*(void **)(v32 - 72));
LABEL_48:
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v32 - 96, *(void **)(v32 - 88));
      v32 -= 104;
      if (v32 == v31)
      {
        int v33 = *v30;
        goto LABEL_56;
      }
    }
  }
  uint64_t v16 = *(NSObject **)this;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf) = 0;
    unint64_t v17 = "Failed to create information segment array!";
    goto LABEL_62;
  }
LABEL_42:
  BOOL v10 = 0;
LABEL_43:
  xpc_release(v15);
  return v10;
}

void sub_248B3A69C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void abm::trace::TraceInfo::convertStateTransitionArray(abm::trace::TraceInfo *this@<X0>, xpc_object_t *a2@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  xpc_object_t v4 = xpc_array_create(0, 0);
  uint64_t v5 = MEMORY[0x263EF86D8];
  if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x24C58BF40](v4) == v5)
    {
      xpc_retain(v4);
      xpc_object_t v6 = v4;
    }
    else
    {
      xpc_object_t v6 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v4 = 0;
  }
  xpc_release(v4);
  if (MEMORY[0x24C58BF40](v6) == v5)
  {
    BOOL v9 = (int *)*((void *)this + 7);
    int v8 = (int *)*((void *)this + 8);
    if (v9 == v8)
    {
LABEL_48:
      *a2 = v6;
      xpc_object_t v6 = xpc_null_create();
      goto LABEL_49;
    }
    uint64_t v10 = MEMORY[0x263EF8708];
    while (1)
    {
      xpc_object_t v11 = xpc_dictionary_create(0, 0, 0);
      if (v11 || (xpc_object_t v11 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x24C58BF40](v11) == v10)
        {
          xpc_retain(v11);
          xpc_object_t v12 = v11;
        }
        else
        {
          xpc_object_t v12 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v12 = xpc_null_create();
        xpc_object_t v11 = 0;
      }
      xpc_release(v11);
      uint64_t v13 = MEMORY[0x24C58BF40](v12);
      if (v13 == v10) {
        break;
      }
      uint64_t v14 = *(NSObject **)this;
      if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = *v9;
        xpc_object_t v27 = "Unknown";
        if (v26 <= 0xF) {
          xpc_object_t v27 = off_26524EA30[v26];
        }
        *(_DWORD *)std::string __p = 136315138;
        *(void *)&__p[4] = v27;
        _os_log_error_impl(&dword_248AFD000, v14, OS_LOG_TYPE_ERROR, "Failed to create entry dictionary for %s!", __p, 0xCu);
      }
      *a2 = xpc_null_create();
LABEL_42:
      xpc_release(v12);
      if (v13 != v10) {
        goto LABEL_49;
      }
      v9 += 26;
      if (v9 == v8) {
        goto LABEL_48;
      }
    }
    Timestamp::asString((uint64_t)(v9 + 2), 0, 9);
    if (v29 >= 0) {
      xpc_object_t v15 = __p;
    }
    else {
      xpc_object_t v15 = *(const char **)__p;
    }
    xpc_object_t v16 = xpc_string_create(v15);
    if (!v16) {
      xpc_object_t v16 = xpc_null_create();
    }
    xpc_dictionary_set_value(v12, "Timestamp", v16);
    xpc_object_t v17 = xpc_null_create();
    xpc_release(v16);
    xpc_release(v17);
    if (v29 < 0)
    {
      operator delete(*(void **)__p);
      xpc_object_t v18 = (const char *)(v9 + 8);
      int v19 = *((char *)v9 + 55);
      if ((v19 & 0x80000000) == 0)
      {
LABEL_29:
        if (!v19) {
          goto LABEL_37;
        }
        goto LABEL_34;
      }
    }
    else
    {
      xpc_object_t v18 = (const char *)(v9 + 8);
      int v19 = *((char *)v9 + 55);
      if ((v19 & 0x80000000) == 0) {
        goto LABEL_29;
      }
    }
    if (!*((void *)v9 + 5))
    {
LABEL_37:
      uint64_t v22 = *v9;
      char v23 = "Unknown";
      if (v22 <= 0xF) {
        char v23 = off_26524EA30[v22];
      }
      xpc_object_t v24 = xpc_string_create(v23);
      if (!v24) {
        xpc_object_t v24 = xpc_null_create();
      }
      xpc_dictionary_set_value(v12, "Action", v24);
      xpc_object_t v25 = xpc_null_create();
      xpc_release(v24);
      xpc_release(v25);
      xpc_array_append_value(v6, v12);
      goto LABEL_42;
    }
    xpc_object_t v18 = *(const char **)v18;
LABEL_34:
    xpc_object_t v20 = xpc_string_create(v18);
    if (!v20) {
      xpc_object_t v20 = xpc_null_create();
    }
    xpc_dictionary_set_value(v12, "Detail", v20);
    xpc_object_t v21 = xpc_null_create();
    xpc_release(v20);
    xpc_release(v21);
    goto LABEL_37;
  }
  xpc_object_t v7 = *(NSObject **)this;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string __p = 0;
    _os_log_error_impl(&dword_248AFD000, v7, OS_LOG_TYPE_ERROR, "Failed to create entry array!", __p, 2u);
  }
  *a2 = xpc_null_create();
LABEL_49:
  xpc_release(v6);
}

void sub_248B3AB54(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void abm::trace::TraceInfo::getHeader(NSObject **this@<X0>, xpc_object_t *a2@<X8>)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  *a2 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  *a2 = xpc_null_create();
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  xpc_object_t v4 = (os_unfair_lock_s *)off_269339E78;
  if (!off_269339E78)
  {
    uint64_t v5 = (std::__fs::filesystem::path *)operator new(0x60uLL);
    strcpy((char *)v5, "/private/var/wireless/Library/Preferences/com.apple.AppleBasebandManager.Statistics.plist");
    v6.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v6.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&__p.st_blksize_t size = v6;
    *(timespec *)__p.st_qspare = v6;
    __p.st_birthtimespec = v6;
    *(timespec *)&__p.st_size_t size = v6;
    __p.st_mtimespec = v6;
    __p.st_ctimespec = v6;
    *(timespec *)&__p.st_uid = v6;
    __p.st_atimespec = v6;
    *(timespec *)&__p.st_dev = v6;
    if (!stat((const char *)v5, &__p) && remove(v5, v7)) {
      unlink((const char *)v5);
    }
    int v8 = operator new(0x30uLL);
    MEMORY[0x24C58B080](v8, @"com.apple.AppleBasebandManager.data", *MEMORY[0x263EFFE70]);
    v8[3] = 0;
    v8[4] = 0;
    *((_DWORD *)v8 + 10) = 0;
    *(void *)&__p.st_dev = v8;
    BOOL v9 = (atomic_ullong *)operator new(0x20uLL);
    uint64_t v10 = (std::__shared_weak_count *)v9;
    _OWORD v9[2] = 0;
    v9[1] = 0;
    atomic_ullong *v9 = (atomic_ullong)&unk_26FCC8EF8;
    v9[3] = (atomic_ullong)v8;
    *(void *)&__p.st_dev = 0;
    atomic_fetch_add_explicit(v9 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(v9 + 2, 1uLL, memory_order_relaxed);
    v8[3] = v8;
    v8[4] = v9;
    if (!atomic_fetch_add(v9 + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(atomic_ullong *))(*v9 + 16))(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    uint64_t v11 = *(void *)&__p.st_dev;
    if (*(void *)&__p.st_dev)
    {
      xpc_object_t v12 = *(std::__shared_weak_count **)(*(void *)&__p.st_dev + 32);
      if (v12) {
        std::__shared_weak_count::__release_weak(v12);
      }
      uint64_t v13 = (void *)MEMORY[0x24C58B090](v11);
      operator delete(v13);
    }
    operator delete(v5);
    uint64_t v14 = (std::__shared_weak_count *)off_269339E80;
    off_269339E78 = v8;
    off_269339E80 = v10;
    if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    xpc_object_t v4 = (os_unfair_lock_s *)off_269339E78;
  }
  *(void *)&long long buf = v4;
  *((void *)&buf + 1) = off_269339E80;
  if (off_269339E80) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_269339E80 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  xpc_object_t v15 = (const void *)*MEMORY[0x263F260F0];
  size_t v16 = strlen((const char *)*MEMORY[0x263F260F0]);
  if (v16 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  __darwin_ino64_t v17 = v16;
  if (v16 >= 0x17)
  {
    uint64_t v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17) {
      uint64_t v19 = v16 | 7;
    }
    uint64_t v20 = v19 + 1;
    p_p = (stat *)operator new(v19 + 1);
    __p.st_ino = v17;
    *(void *)&__p.st_uid = v20 | 0x8000000000000000;
    *(void *)&__p.st_dev = p_p;
    goto LABEL_24;
  }
  HIBYTE(__p.st_gid) = v16;
  p_p = &__p;
  if (v16) {
LABEL_24:
  }
    memmove(p_p, v15, v17);
  *((unsigned char *)&p_p->st_dev + v17) = 0;
  xpc_object_t v21 = v4 + 10;
  os_unfair_lock_lock(v4 + 10);
  if ((__p.st_gid & 0x80000000) == 0) {
    uint64_t v22 = (const char *)&__p;
  }
  else {
    uint64_t v22 = *(const char **)&__p.st_dev;
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v45, v22);
  char v23 = (void *)(**(uint64_t (***)(void *, void *))&v4->_os_unfair_lock_opaque)(v4, v45);
  xpc_object_t v24 = v23;
  if (v23)
  {
    CFTypeID v25 = CFGetTypeID(v23);
    if (v25 == CFDictionaryGetTypeID()) {
      uint64_t v26 = v24;
    }
    else {
      uint64_t v26 = 0;
    }
    CFRelease(v24);
    MEMORY[0x24C58B050](&v45);
    os_unfair_lock_unlock(v21);
    if ((SHIBYTE(__p.st_gid) & 0x80000000) == 0)
    {
LABEL_33:
      xpc_object_t v27 = (std::__shared_weak_count *)*((void *)&buf + 1);
      if (!*((void *)&buf + 1)) {
        goto LABEL_38;
      }
      goto LABEL_37;
    }
  }
  else
  {
    uint64_t v26 = 0;
    MEMORY[0x24C58B050](&v45);
    os_unfair_lock_unlock(v21);
    if ((SHIBYTE(__p.st_gid) & 0x80000000) == 0) {
      goto LABEL_33;
    }
  }
  operator delete(*(void **)&__p.st_dev);
  xpc_object_t v27 = (std::__shared_weak_count *)*((void *)&buf + 1);
  if (!*((void *)&buf + 1)) {
    goto LABEL_38;
  }
LABEL_37:
  if (!atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    if (!v26) {
      return;
    }
    goto LABEL_39;
  }
LABEL_38:
  if (!v26) {
    return;
  }
LABEL_39:
  long long v45 = v26;
  CFRetain(v26);
  ctu::cf_to_xpc((uint64_t *)&__p.st_dev, (ctu *)v26, v28);
  xpc_object_t v29 = *(xpc_object_t *)&__p.st_dev;
  if (*(void *)&__p.st_dev && MEMORY[0x24C58BF40](*(void *)&__p.st_dev) == MEMORY[0x263EF8708]) {
    xpc_retain(v29);
  }
  else {
    xpc_object_t v29 = xpc_null_create();
  }
  xpc_object_t v30 = xpc_null_create();
  xpc_object_t v31 = *a2;
  *a2 = v29;
  xpc_release(v31);
  xpc_release(v30);
  xpc_release(*(xpc_object_t *)&__p.st_dev);
  xpc_object_t v32 = xpc_string_create("<...>");
  if (!v32) {
    xpc_object_t v32 = xpc_null_create();
  }
  xpc_dictionary_set_value(v29, (const char *)*MEMORY[0x263F26068], v32);
  xpc_object_t v33 = xpc_null_create();
  xpc_release(v32);
  xpc_release(v33);
  xpc_object_t v34 = xpc_string_create("<...>");
  if (!v34) {
    xpc_object_t v34 = xpc_null_create();
  }
  xpc_dictionary_set_value(v29, (const char *)*MEMORY[0x263F26120], v34);
  xpc_object_t v35 = xpc_null_create();
  xpc_release(v34);
  xpc_release(v35);
  char v36 = *this;
  if (!os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_50;
  }
  uint64_t v37 = (char *)MEMORY[0x24C58BF00](v29);
  memset(&__p, 170, 24);
  size_t v38 = strlen(v37);
  if (v38 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  __darwin_ino64_t v39 = v38;
  if (v38 >= 0x17)
  {
    uint64_t v41 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v38 | 7) != 0x17) {
      uint64_t v41 = v38 | 7;
    }
    uint64_t v42 = v41 + 1;
    uint64_t v40 = (stat *)operator new(v41 + 1);
    __p.st_ino = v39;
    *(void *)&__p.st_uid = v42 | 0x8000000000000000;
    *(void *)&__p.st_dev = v40;
    goto LABEL_59;
  }
  HIBYTE(__p.st_gid) = v38;
  uint64_t v40 = &__p;
  if (v38) {
LABEL_59:
  }
    memcpy(v40, v37, v39);
  *((unsigned char *)&v40->st_dev + v39) = 0;
  free(v37);
  long long v43 = &__p;
  if ((__p.st_gid & 0x80000000) != 0) {
    long long v43 = *(stat **)&__p.st_dev;
  }
  LODWORD(buf) = 136315138;
  *(void *)((char *)&buf + 4) = v43;
  _os_log_debug_impl(&dword_248AFD000, v36, OS_LOG_TYPE_DEBUG, "#D Trace info header set to: %s", (uint8_t *)&buf, 0xCu);
  if (SHIBYTE(__p.st_gid) < 0) {
    operator delete(*(void **)&__p.st_dev);
  }
  uint64_t v26 = v45;
  if (v45) {
LABEL_50:
  }
    CFRelease(v26);
}

void sub_248B3B240(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void abm::trace::TraceInfo::setHandler(void *a1, int a2, uint64_t a3)
{
  xpc_object_t v7 = (void ***)(a1 + 12);
  timespec v6 = (void ***)a1[12];
  if (!v6) {
    goto LABEL_99;
  }
  int v8 = (void ***)(a1 + 12);
  uint64_t v9 = a1[12];
  do
  {
    int v10 = *(_DWORD *)(v9 + 32);
    BOOL v11 = v10 < a2;
    if (v10 >= a2) {
      xpc_object_t v12 = (uint64_t *)v9;
    }
    else {
      xpc_object_t v12 = (uint64_t *)(v9 + 8);
    }
    if (!v11) {
      int v8 = (void ***)v9;
    }
    uint64_t v9 = *v12;
  }
  while (*v12);
  if (v8 == v7 || *((_DWORD *)v8 + 8) > a2) {
    goto LABEL_99;
  }
  uint64_t v13 = v8[1];
  if (v13)
  {
    do
    {
      uint64_t v14 = v13;
      uint64_t v13 = (void **)*v13;
    }
    while (v13);
  }
  else
  {
    xpc_object_t v15 = v8;
    do
    {
      uint64_t v14 = v15[2];
      BOOL v27 = *v14 == v15;
      xpc_object_t v15 = (void ***)v14;
    }
    while (!v27);
  }
  if ((void ***)a1[11] == v8)
  {
    a1[11] = v14;
    --a1[13];
    size_t v16 = *v8;
    __darwin_ino64_t v17 = (void **)v8;
    if (!*v8) {
      goto LABEL_23;
    }
  }
  else
  {
    --a1[13];
    size_t v16 = *v8;
    __darwin_ino64_t v17 = (void **)v8;
    if (!*v8) {
      goto LABEL_23;
    }
  }
  xpc_object_t v18 = v8[1];
  if (!v18)
  {
    __darwin_ino64_t v17 = (void **)v8;
    goto LABEL_29;
  }
  do
  {
    __darwin_ino64_t v17 = v18;
    xpc_object_t v18 = (void **)*v18;
  }
  while (v18);
LABEL_23:
  size_t v16 = (void **)v17[1];
  if (!v16)
  {
    int v19 = 1;
    uint64_t v20 = (void ***)v17[2];
    xpc_object_t v21 = *v20;
    if (*v20 == v17) {
      goto LABEL_25;
    }
LABEL_30:
    v20[1] = v16;
    int v22 = *((unsigned __int8 *)v17 + 24);
    if (v17 == (void **)v8) {
      goto LABEL_35;
    }
    goto LABEL_31;
  }
LABEL_29:
  int v19 = 0;
  void v16[2] = v17[2];
  uint64_t v20 = (void ***)v17[2];
  xpc_object_t v21 = *v20;
  if (*v20 != v17) {
    goto LABEL_30;
  }
LABEL_25:
  ctu::Gestalt *v20 = v16;
  if (v17 != (void **)v6)
  {
    xpc_object_t v21 = v20[1];
    int v22 = *((unsigned __int8 *)v17 + 24);
    if (v17 == (void **)v8) {
      goto LABEL_35;
    }
LABEL_31:
    char v23 = v8[2];
    v17[2] = v23;
    v23[*v8[2] != v8] = v17;
    xpc_object_t v24 = *v8;
    const char *v17 = *v8;
    v24[2] = v17;
    CFTypeID v25 = v8[1];
    v17[1] = v25;
    if (v25) {
      v25[2] = v17;
    }
    *((unsigned char *)v17 + 24) = *((unsigned char *)v8 + 24);
    if (v6 == v8) {
      timespec v6 = (void ***)v17;
    }
    goto LABEL_35;
  }
  xpc_object_t v21 = 0;
  timespec v6 = (void ***)v16;
  int v22 = *((unsigned __int8 *)v17 + 24);
  if (v17 != (void **)v8) {
    goto LABEL_31;
  }
LABEL_35:
  if (!v22 || !v6) {
    goto LABEL_94;
  }
  if (!v19)
  {
    *((unsigned char *)v16 + 24) = 1;
    goto LABEL_94;
  }
  while (1)
  {
    xpc_object_t v28 = (void ***)v21[2];
    if (*v28 != v21) {
      break;
    }
    if (*((unsigned char *)v21 + 24))
    {
      xpc_object_t v30 = *v21;
      if (*v21) {
        goto LABEL_67;
      }
    }
    else
    {
      *((unsigned char *)v21 + 24) = 1;
      *((unsigned char *)v28 + 24) = 0;
      xpc_object_t v34 = (void **)v21[1];
      const void *v28 = v34;
      if (v34) {
        v34[2] = v28;
      }
      v21[2] = v28[2];
      v28[2][*v28[2] != v28] = v21;
      v21[1] = v28;
      v28[2] = v21;
      if (v6 == v28) {
        timespec v6 = (void ***)v21;
      }
      xpc_object_t v21 = *v28;
      xpc_object_t v30 = **v28;
      if (v30)
      {
LABEL_67:
        if (!v30[24]) {
          goto LABEL_89;
        }
      }
    }
    xpc_object_t v35 = (uint64_t *)v21[1];
    if (v35 && !*((unsigned char *)v35 + 24))
    {
      if (v30 && !v30[24])
      {
LABEL_89:
        xpc_object_t v35 = (uint64_t *)v21;
      }
      else
      {
        *((unsigned char *)v35 + 24) = 1;
        *((unsigned char *)v21 + 24) = 0;
        uint64_t v36 = *v35;
        v21[1] = (void *)*v35;
        if (v36) {
          *(void *)(v36 + 16) = v21;
        }
        v35[2] = (uint64_t)v21[2];
        *((void *)v21[2] + (*(void *)v21[2] != (void)v21)) = v35;
        *xpc_object_t v35 = (uint64_t)v21;
        v21[2] = v35;
        xpc_object_t v30 = v21;
      }
      uint64_t v38 = v35[2];
      *((unsigned char *)v35 + 24) = *(unsigned char *)(v38 + 24);
      *(unsigned char *)(v38 + 24) = 1;
      v30[24] = 1;
      __darwin_ino64_t v39 = *(uint64_t **)v38;
      uint64_t v41 = *(void *)(*(void *)v38 + 8);
      *(void *)uint64_t v38 = v41;
      if (v41) {
        *(void *)(v41 + 16) = v38;
      }
      v39[2] = *(void *)(v38 + 16);
      *(void *)(*(void *)(v38 + 16) + 8 * (**(void **)(v38 + 16) != v38)) = v39;
      v39[1] = v38;
      goto LABEL_93;
    }
    *((unsigned char *)v21 + 24) = 0;
    uint64_t v26 = (void ***)v21[2];
    if (*((unsigned char *)v26 + 24)) {
      BOOL v27 = v26 == v6;
    }
    else {
      BOOL v27 = 1;
    }
    if (v27) {
      goto LABEL_79;
    }
LABEL_43:
    xpc_object_t v21 = (void **)v26[2][*v26[2] == v26];
  }
  if (*((unsigned char *)v21 + 24))
  {
    xpc_object_t v29 = *v21;
    if (!*v21)
    {
LABEL_57:
      xpc_object_t v33 = (void **)v21[1];
      if (v33 && !*((unsigned char *)v33 + 24)) {
        goto LABEL_85;
      }
      *((unsigned char *)v21 + 24) = 0;
      uint64_t v26 = (void ***)v21[2];
      if (v26 == v6)
      {
        uint64_t v26 = v6;
LABEL_79:
        *((unsigned char *)v26 + 24) = 1;
        goto LABEL_94;
      }
      if (!*((unsigned char *)v26 + 24)) {
        goto LABEL_79;
      }
      goto LABEL_43;
    }
  }
  else
  {
    *((unsigned char *)v21 + 24) = 1;
    *((unsigned char *)v28 + 24) = 0;
    xpc_object_t v31 = (void ****)v28[1];
    xpc_object_t v32 = (void **)*v31;
    v28[1] = (void **)*v31;
    if (v32) {
      std::string v32[2] = v28;
    }
    v31[2] = (void ***)v28[2];
    v28[2][*v28[2] != v28] = v31;
    *xpc_object_t v31 = v28;
    v28[2] = (void **)v31;
    if (v6 == *v21) {
      timespec v6 = (void ***)v21;
    }
    xpc_object_t v21 = (void **)*((void *)*v21 + 1);
    xpc_object_t v29 = *v21;
    if (!*v21) {
      goto LABEL_57;
    }
  }
  if (*((unsigned char *)v29 + 24)) {
    goto LABEL_57;
  }
  xpc_object_t v33 = (void **)v21[1];
  if (v33 && !*((unsigned char *)v33 + 24))
  {
LABEL_85:
    xpc_object_t v29 = v21;
  }
  else
  {
    *((unsigned char *)v29 + 24) = 1;
    *((unsigned char *)v21 + 24) = 0;
    uint64_t v37 = (void *)v29[1];
    os_unfair_lock_s *v21 = v37;
    if (v37) {
      v37[2] = v21;
    }
    v29[2] = v21[2];
    *((void *)v21[2] + (*(void *)v21[2] != (void)v21)) = v29;
    v29[1] = v21;
    v21[2] = v29;
    xpc_object_t v33 = v21;
  }
  uint64_t v38 = v29[2];
  *((unsigned char *)v29 + 24) = *(unsigned char *)(v38 + 24);
  *(unsigned char *)(v38 + 24) = 1;
  *((unsigned char *)v33 + 24) = 1;
  __darwin_ino64_t v39 = *(uint64_t **)(v38 + 8);
  uint64_t v40 = *v39;
  *(void *)(v38 + 8) = *v39;
  if (v40) {
    *(void *)(v40 + 16) = v38;
  }
  v39[2] = *(void *)(v38 + 16);
  *(void *)(*(void *)(v38 + 16) + 8 * (**(void **)(v38 + 16) != v38)) = v39;
  *__darwin_ino64_t v39 = v38;
LABEL_93:
  *(void *)(v38 + 16) = v39;
LABEL_94:
  uint64_t v42 = v8[6];
  if (v42) {
    dispatch_release(v42);
  }
  long long v43 = v8[5];
  if (v43) {
    _Block_release(v43);
  }
  operator delete(v8);
LABEL_99:
  if (*(void *)a3)
  {
    uint64_t v44 = _Block_copy(*(const void **)a3);
    long long v45 = *(NSObject **)(a3 + 8);
    long long v51 = v45;
    if (v45) {
      goto LABEL_101;
    }
  }
  else
  {
    uint64_t v44 = 0;
    long long v45 = *(NSObject **)(a3 + 8);
    long long v51 = v45;
    if (v45) {
LABEL_101:
    }
      dispatch_retain(v45);
  }
  uint64_t v46 = *v7;
  uint64_t v47 = v7;
  if (*v7)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v47 = (void ***)v46;
        int v48 = *((_DWORD *)v46 + 8);
        if (v48 <= a2) {
          break;
        }
        uint64_t v46 = *v47;
        xpc_object_t v7 = v47;
        if (!*v47) {
          goto LABEL_109;
        }
      }
      if (v48 >= a2) {
        break;
      }
      uint64_t v46 = v47[1];
      if (!v46)
      {
        xpc_object_t v7 = v47 + 1;
        goto LABEL_109;
      }
    }
  }
  else
  {
LABEL_109:
    long long v49 = operator new(0x38uLL);
    v49[8] = a2;
    if (v44)
    {
      *((void *)v49 + 5) = _Block_copy(v44);
      *((void *)v49 + 6) = v45;
      if (v45) {
        goto LABEL_111;
      }
    }
    else
    {
      *((void *)v49 + 5) = 0;
      *((void *)v49 + 6) = v45;
      if (v45) {
LABEL_111:
      }
        dispatch_retain(v45);
    }
    *(void *)long long v49 = 0;
    *((void *)v49 + 1) = 0;
    *((void *)v49 + 2) = v47;
    std::error_code *v7 = (void **)v49;
    uint64_t v50 = *(void *)a1[11];
    if (v50)
    {
      a1[11] = v50;
      long long v49 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[12], (uint64_t *)v49);
    ++a1[13];
    long long v45 = v51;
  }
  if (v45) {
    dispatch_release(v45);
  }
  if (v44) {
    _Block_release(v44);
  }
}

void sub_248B3B93C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::pair<abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>>::~pair(uint64_t a1)
{
  xpc_object_t v2 = *(NSObject **)(a1 + 16);
  if (v2) {
    dispatch_release(v2);
  }
  xpc_object_t v3 = *(const void **)(a1 + 8);
  if (v3) {
    _Block_release(v3);
  }
  return a1;
}

uint64_t dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>::~callback(uint64_t a1)
{
  xpc_object_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

const void **ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(const void **a1)
{
  xpc_object_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t ctu::PthreadMutexGuardPolicy<ctu::Gestalt>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  xpc_object_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  xpc_object_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  xpc_object_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  xpc_object_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>(uint64_t a1, void *a2, void *a3)
{
  xpc_object_t v4 = a2;
  if (*(void *)(a1 + 16))
  {
    timespec v6 = *(uint64_t **)a1;
    int v8 = (uint64_t **)(a1 + 8);
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)a1 = a1 + 8;
    *(void *)(v7 + 16) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v9 = v6[1] ? (uint64_t *)v6[1] : v6;
    if (v9)
    {
      int v10 = (uint64_t *)v9[2];
      if (v10)
      {
        BOOL v11 = (uint64_t *)*v10;
        if ((uint64_t *)*v10 == v9)
        {
          uint64_t *v10 = 0;
          while (1)
          {
            xpc_object_t v34 = (uint64_t *)v10[1];
            if (!v34) {
              break;
            }
            do
            {
              int v10 = v34;
              xpc_object_t v34 = (uint64_t *)*v34;
            }
            while (v34);
          }
        }
        else
        {
          for (v10[1] = 0; v11; BOOL v11 = (uint64_t *)v10[1])
          {
            do
            {
              int v10 = v11;
              BOOL v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
        }
      }
      if (a2 != a3)
      {
        xpc_object_t v12 = v9;
        uint64_t v13 = v4;
        while (1)
        {
          uint64_t v9 = v10;
          int v14 = *((_DWORD *)v13 + 8);
          *((_DWORD *)v12 + 8) = v14;
          *(_OWORD *)(v12 + 5) = *(_OWORD *)(v13 + 5);
          xpc_object_t v15 = *v8;
          size_t v16 = (uint64_t **)(a1 + 8);
          __darwin_ino64_t v17 = (uint64_t **)(a1 + 8);
          if (*v8) {
            break;
          }
LABEL_14:
          uint64_t *v12 = 0;
          v12[1] = 0;
          void v12[2] = (uint64_t)v16;
          const char *v17 = v12;
          uint64_t v18 = **(void **)a1;
          if (v18) {
            goto LABEL_15;
          }
LABEL_16:
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v12);
          ++*(void *)(a1 + 16);
          if (v10)
          {
            int v10 = (uint64_t *)v10[2];
            if (v10)
            {
              xpc_object_t v21 = (uint64_t *)*v10;
              if ((uint64_t *)*v10 == v9)
              {
                uint64_t *v10 = 0;
                while (1)
                {
                  int v22 = (uint64_t *)v10[1];
                  if (!v22) {
                    break;
                  }
                  do
                  {
                    int v10 = v22;
                    int v22 = (uint64_t *)*v22;
                  }
                  while (v22);
                }
              }
              else
              {
                for (v10[1] = 0; v21; xpc_object_t v21 = (uint64_t *)v10[1])
                {
                  do
                  {
                    int v10 = v21;
                    xpc_object_t v21 = (uint64_t *)*v21;
                  }
                  while (v21);
                }
              }
            }
          }
          else
          {
            int v10 = 0;
          }
          int v19 = (void *)v13[1];
          if (v19)
          {
            do
            {
              xpc_object_t v4 = v19;
              int v19 = (void *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              xpc_object_t v4 = (void *)v13[2];
              BOOL v20 = *v4 == (void)v13;
              uint64_t v13 = v4;
            }
            while (!v20);
          }
          if (v9)
          {
            xpc_object_t v12 = v9;
            uint64_t v13 = v4;
            if (v4 != a3) {
              continue;
            }
          }
          goto LABEL_42;
        }
        do
        {
          while (1)
          {
            size_t v16 = (uint64_t **)v15;
            if (v14 >= *((_DWORD *)v15 + 8)) {
              break;
            }
            xpc_object_t v15 = (uint64_t *)*v15;
            __darwin_ino64_t v17 = v16;
            if (!*v16) {
              goto LABEL_14;
            }
          }
          xpc_object_t v15 = (uint64_t *)v15[1];
        }
        while (v15);
        __darwin_ino64_t v17 = v16 + 1;
        uint64_t *v12 = 0;
        v12[1] = 0;
        void v12[2] = (uint64_t)v16;
        v16[1] = v12;
        uint64_t v18 = **(void **)a1;
        if (!v18) {
          goto LABEL_16;
        }
LABEL_15:
        *(void *)a1 = v18;
        xpc_object_t v12 = *v17;
        goto LABEL_16;
      }
LABEL_42:
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(a1, v9);
      if (v10)
      {
        for (uint64_t i = (uint64_t *)v10[2]; i; uint64_t i = (uint64_t *)i[2])
          int v10 = i;
        std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(a1, v10);
      }
    }
  }
  if (v4 != a3)
  {
    xpc_object_t v24 = (uint64_t ***)(a1 + 8);
    while (1)
    {
      CFTypeID v25 = (uint64_t *)operator new(0x38uLL);
      uint64_t v26 = v25;
      uint64_t v27 = v4[6];
      *((_OWORD *)v25 + 2) = *((_OWORD *)v4 + 2);
      v25[6] = v27;
      xpc_object_t v28 = *v24;
      xpc_object_t v29 = (uint64_t **)(a1 + 8);
      xpc_object_t v30 = (uint64_t **)(a1 + 8);
      if (*v24) {
        break;
      }
LABEL_54:
      uint64_t *v25 = 0;
      v25[1] = 0;
      v25[2] = (uint64_t)v29;
      unsigned char *v30 = v25;
      uint64_t v31 = **(void **)a1;
      if (v31) {
        goto LABEL_55;
      }
LABEL_56:
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v26);
      ++*(void *)(a1 + 16);
      xpc_object_t v32 = (void *)v4[1];
      if (v32)
      {
        do
        {
          xpc_object_t v33 = v32;
          xpc_object_t v32 = (void *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          xpc_object_t v33 = (void *)v4[2];
          BOOL v20 = *v33 == (void)v4;
          xpc_object_t v4 = v33;
        }
        while (!v20);
      }
      xpc_object_t v4 = v33;
      if (v33 == a3) {
        return;
      }
    }
    do
    {
      while (1)
      {
        xpc_object_t v29 = v28;
        if (*((_DWORD *)v25 + 8) >= *((_DWORD *)v28 + 8)) {
          break;
        }
        xpc_object_t v28 = (uint64_t **)*v28;
        xpc_object_t v30 = v29;
        if (!*v29) {
          goto LABEL_54;
        }
      }
      xpc_object_t v28 = (uint64_t **)v28[1];
    }
    while (v28);
    xpc_object_t v30 = v29 + 1;
    uint64_t *v25 = 0;
    v25[1] = 0;
    v25[2] = (uint64_t)v29;
    v29[1] = v25;
    uint64_t v31 = **(void **)a1;
    if (!v31) {
      goto LABEL_56;
    }
LABEL_55:
    *(void *)a1 = v31;
    uint64_t v26 = *v30;
    goto LABEL_56;
  }
}

abm::trace::TraceInfoEntry *abm::trace::TraceInfoEntry::TraceInfoEntry(abm::trace::TraceInfoEntry *this, const abm::trace::TraceInfoEntry *a2)
{
  *(_DWORD *)this = *(_DWORD *)a2;
  *((void *)this + 2) = 0;
  *((void *)this + 1) = (char *)this + 16;
  *((void *)this + 3) = 0;
  std::map<Timestamp::TimeDomain,timeval>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>>((uint64_t *)this + 1, *((int **)a2 + 1), (int *)a2 + 4);
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *((const std::string::value_type **)a2 + 4), *((void *)a2 + 5));
  }
  else
  {
    long long v4 = *((_OWORD *)a2 + 2);
    *((void *)this + 6) = *((void *)a2 + 6);
    *((_OWORD *)this + 2) = v4;
  }
  if (*((char *)a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 56), *((const std::string::value_type **)a2 + 7), *((void *)a2 + 8));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 56);
    *((void *)this + 9) = *((void *)a2 + 9);
    *(_OWORD *)((char *)this + 56) = v5;
  }
  timespec v6 = (std::string *)((char *)this + 80);
  if (*((char *)a2 + 103) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 10), *((void *)a2 + 11));
  }
  else
  {
    long long v7 = *((_OWORD *)a2 + 5);
    *((void *)this + 12) = *((void *)a2 + 12);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_248B3BFF8(_Unwind_Exception *a1)
{
  if (*(char *)(v2 + 79) < 0)
  {
    operator delete(*v4);
    if ((*(char *)(v2 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *v5);
      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v2 + 55) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v3);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *v5);
  _Unwind_Resume(a1);
}

void sub_248B3C05C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *v2);
  _Unwind_Resume(a1);
}

void sub_248B3C074(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *v2);
  _Unwind_Resume(a1);
}

abm::trace::TraceInfo **std::unique_ptr<abm::trace::TraceInfo>::~unique_ptr[abi:ne180100](abm::trace::TraceInfo **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    abm::trace::TraceInfo::~TraceInfo(v2);
    operator delete(v3);
  }
  return a1;
}

void std::__shared_ptr_pointer<abm::trace::TraceInfo *,std::shared_ptr<abm::trace::TraceInfo>::__shared_ptr_default_delete<abm::trace::TraceInfo,abm::trace::TraceInfo>,std::allocator<abm::trace::TraceInfo>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<abm::trace::TraceInfo *,std::shared_ptr<abm::trace::TraceInfo>::__shared_ptr_default_delete<abm::trace::TraceInfo,abm::trace::TraceInfo>,std::allocator<abm::trace::TraceInfo>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(abm::trace::TraceInfo **)(a1 + 24);
  if (v1)
  {
    abm::trace::TraceInfo::~TraceInfo(v1);
    operator delete(v2);
  }
}

uint64_t std::__shared_ptr_pointer<abm::trace::TraceInfo *,std::shared_ptr<abm::trace::TraceInfo>::__shared_ptr_default_delete<abm::trace::TraceInfo,abm::trace::TraceInfo>,std::allocator<abm::trace::TraceInfo>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000248B4B78BLL) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000248B4B78BLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000248B4B78BLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000248B4B78BLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::vector<abm::trace::TraceInfoEntry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (!v2) {
    return;
  }
  long long v4 = (void **)v1[1];
  long long v5 = **a1;
  if (v4 != v2)
  {
    while (1)
    {
      if (*((char *)v4 - 1) < 0)
      {
        operator delete(*(v4 - 3));
        if ((*((char *)v4 - 25) & 0x80000000) == 0)
        {
LABEL_7:
          if (*((char *)v4 - 49) < 0) {
            goto LABEL_11;
          }
          goto LABEL_4;
        }
      }
      else if ((*((char *)v4 - 25) & 0x80000000) == 0)
      {
        goto LABEL_7;
      }
      operator delete(*(v4 - 6));
      if (*((char *)v4 - 49) < 0) {
LABEL_11:
      }
        operator delete(*(v4 - 9));
LABEL_4:
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)(v4 - 12), *(v4 - 11));
      v4 -= 13;
      if (v4 == v2)
      {
        long long v5 = **a1;
        break;
      }
    }
  }
  v1[1] = v2;
  operator delete(v5);
}

void std::__tree<std::__value_type<abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>>,std::__map_value_compare<abm::trace::TraceInfoState,std::__value_type<abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>>,std::less<abm::trace::TraceInfoState>,true>,std::allocator<std::__value_type<abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>>,std::__map_value_compare<abm::trace::TraceInfoState,std::__value_type<abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>>,std::less<abm::trace::TraceInfoState>,true>,std::allocator<std::__value_type<abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>>>>::destroy(*a1);
    std::__tree<std::__value_type<abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>>,std::__map_value_compare<abm::trace::TraceInfoState,std::__value_type<abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>>,std::less<abm::trace::TraceInfoState>,true>,std::allocator<std::__value_type<abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>>>>::destroy(a1[1]);
    uint64_t v2 = a1[6];
    if (v2) {
      dispatch_release(v2);
    }
    uint64_t v3 = (const void *)a1[5];
    if (v3) {
      _Block_release(v3);
    }
    operator delete(a1);
  }
}

uint64_t std::__split_buffer<abm::trace::TraceInfoEntry>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 104;
    if (*(char *)(i - 1) < 0)
    {
      operator delete(*(void **)(i - 24));
      if (*(char *)(i - 25) < 0)
      {
LABEL_9:
        operator delete(*(void **)(i - 48));
        if ((*(char *)(i - 49) & 0x80000000) == 0) {
          goto LABEL_2;
        }
        goto LABEL_10;
      }
    }
    else if (*(char *)(i - 25) < 0)
    {
      goto LABEL_9;
    }
    if ((*(char *)(i - 49) & 0x80000000) == 0) {
      goto LABEL_2;
    }
LABEL_10:
    operator delete(*(void **)(i - 72));
LABEL_2:
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(i - 96, *(void **)(i - 88));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3abm5trace14TraceInfoEntryEEEclIJS3_EEEvDpT__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  abm::trace::TraceInfoEntry::TraceInfoEntry((abm::trace::TraceInfoEntry *)v2, (const abm::trace::TraceInfoEntry *)(a1 + 40));
  (*(void (**)(uint64_t, unsigned char *))(v1 + 16))(v1, v2);
  if ((v8 & 0x80000000) == 0)
  {
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    operator delete(v5);
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_4;
    }
LABEL_7:
    operator delete(v3[3]);
    goto LABEL_4;
  }
  operator delete(__p);
  if (v6 < 0) {
    goto LABEL_6;
  }
LABEL_3:
  if (v4 < 0) {
    goto LABEL_7;
  }
LABEL_4:
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v3, v3[1]);
}

void sub_248B3C444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0)
  {
    operator delete(__p);
    if ((a25 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a19 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a25 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a20);
  if ((a19 & 0x80000000) == 0)
  {
LABEL_4:
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a11, a12);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a14);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

abm::trace::TraceInfoEntry *__copy_helper_block_e8_32c70_ZTSN8dispatch5blockIU13block_pointerFvN3abm5trace14TraceInfoEntryEEEE40c32_ZTSN3abm5trace14TraceInfoEntryE(uint64_t a1, uint64_t a2)
{
  char v4 = *(void **)(a2 + 32);
  if (v4) {
    char v4 = _Block_copy(v4);
  }
  *(void *)(a1 + 32) = v4;
  return abm::trace::TraceInfoEntry::TraceInfoEntry((abm::trace::TraceInfoEntry *)(a1 + 40), (const abm::trace::TraceInfoEntry *)(a2 + 40));
}

void sub_248B3C4FC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(const void **)(v1 + 32);
  if (v3) {
    _Block_release(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c70_ZTSN8dispatch5blockIU13block_pointerFvN3abm5trace14TraceInfoEntryEEEE40c32_ZTSN3abm5trace14TraceInfoEntryE(uint64_t a1)
{
  if (*(char *)(a1 + 143) < 0)
  {
    operator delete(*(void **)(a1 + 120));
    if ((*(char *)(a1 + 119) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 95) & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(*(void **)(a1 + 72));
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(a1 + 48, *(void **)(a1 + 56));
      uint64_t v2 = *(const void **)(a1 + 32);
      if (!v2) {
        return;
      }
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 95) < 0) {
    goto LABEL_8;
  }
LABEL_4:
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(a1 + 48, *(void **)(a1 + 56));
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2) {
LABEL_9:
  }
    _Block_release(v2);
}

uint64_t *std::unique_ptr<SharedData>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 32);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    char v4 = (void *)MEMORY[0x24C58B090](v2);
    operator delete(v4);
  }
  return a1;
}

void std::__shared_ptr_pointer<SharedData *,std::shared_ptr<SharedData>::__shared_ptr_default_delete<SharedData,SharedData>,std::allocator<SharedData>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<SharedData *,std::shared_ptr<SharedData>::__shared_ptr_default_delete<SharedData,SharedData>,std::allocator<SharedData>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 32);
    if (v2) {
      std::__shared_weak_count::__release_weak(v2);
    }
    uint64_t v3 = (void *)MEMORY[0x24C58B090](v1);
    operator delete(v3);
  }
}

uint64_t std::__shared_ptr_pointer<SharedData *,std::shared_ptr<SharedData>::__shared_ptr_default_delete<SharedData,SharedData>,std::allocator<SharedData>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000248B4B858) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000248B4B858 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000248B4B858)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000248B4B858 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t __cxx_global_var_init_29()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_248AFD000);
  }
  return result;
}

void TraceFileCollection::create(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  char v6 = operator new(0x160uLL);
  long long v7 = v6;
  char v8 = (std::__shared_weak_count *)a1[1];
  uint64_t v24 = *a1;
  CFTypeID v25 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  TraceFileCollection::TraceFileCollection((uint64_t)v6, &v24, a2);
  *a3 = v7;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v9 = (std::__shared_weak_count *)operator new(0x20uLL);
  v9->__shared_owners_ = 0;
  p_shared_owners = &v9->__shared_owners_;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FCC9150;
  v9->__shared_weak_owners_ = 0;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  a3[1] = v9;
  BOOL v11 = (std::__shared_weak_count *)*((void *)v7 + 10);
  if (!v11)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v7 + 9) = v7;
    *((void *)v7 + 10) = v9;
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_19;
    }
LABEL_8:
    uint64_t v12 = *a3;
    if (!*(void *)(*a3 + 56)) {
      goto LABEL_20;
    }
    goto LABEL_9;
  }
  if (v11->__shared_owners_ != -1) {
    goto LABEL_8;
  }
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *((void *)v7 + 9) = v7;
  *((void *)v7 + 10) = v9;
  std::__shared_weak_count::__release_weak(v11);
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
LABEL_19:
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  uint64_t v12 = *a3;
  if (!*(void *)(*a3 + 56)) {
    goto LABEL_20;
  }
LABEL_9:
  uint64_t v13 = *(std::__shared_weak_count **)(v12 + 80);
  if (!v13 || (v14 = *(void *)(v12 + 72), (xpc_object_t v15 = std::__shared_weak_count::lock(v13)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v16 = v15;
  __darwin_ino64_t v17 = (ctu::LoggerCommonBase *)(v12 + 8);
  *(void *)&long long block = v14;
  *((void *)&block + 1) = v15;
  atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v16);
  }
  ctu::LoggerCommonBase::getLogDomain(v17);
  long long v26 = block;
  long long block = 0uLL;
  ctu::TrackedLogger::registerLoggerToServer();
  uint64_t v18 = (std::__shared_weak_count *)*((void *)&v26 + 1);
  if (*((void *)&v26 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v26 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  int v19 = (std::__shared_weak_count *)*((void *)&block + 1);
  if (*((void *)&block + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&block + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
LABEL_20:
  BOOL v20 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  uint64_t v21 = *a3;
  uint64_t v22 = *a3 + 72;
  *(void *)&long long v26 = MEMORY[0x263EF8330];
  *((void *)&v26 + 1) = 0x40000000;
  uint64_t v27 = ___ZN19TraceFileCollection4initEv_block_invoke;
  xpc_object_t v28 = &__block_descriptor_tmp_3;
  uint64_t v29 = v21;
  xpc_object_t v30 = &v26;
  *(void *)&long long block = MEMORY[0x263EF8330];
  *((void *)&block + 1) = 0x40000000;
  xpc_object_t v32 = ___ZNK3ctu20SharedSynchronizableI19TraceFileCollectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  xpc_object_t v33 = &__block_descriptor_tmp_90;
  uint64_t v34 = v22;
  xpc_object_t v35 = &v30;
  char v23 = *(NSObject **)(v21 + 88);
  if (*(void *)(v21 + 96)) {
    dispatch_async_and_wait(v23, &block);
  }
  else {
    dispatch_sync(v23, &block);
  }
}

void sub_248B3CB14()
{
}

void sub_248B3CB60()
{
}

void sub_248B3CB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void TraceFileCollection::init(TraceFileCollection *this)
{
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 0x40000000;
  void v3[2] = ___ZN19TraceFileCollection4initEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_3;
  v3[4] = this;
  char v4 = v3;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19TraceFileCollectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_90;
  void block[4] = (char *)this + 72;
  void block[5] = &v4;
  uint64_t v2 = (char *)this + 88;
  uint64_t v1 = *((void *)this + 11);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

uint64_t TraceFileCollection::TraceFileCollection(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26FCC8F48;
  label[17] = -86;
  __int16 v38 = -21846;
  int v39 = 279620266;
  strcpy(label, "trace.collection");
  uint64_t v33 = 0x10AAAAAAAAAAAA00;
  *(_OWORD *)stat __p = *(_OWORD *)"trace.collection";
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v34, "com.apple.telephony.abm", (const char *)__p);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  long long v7 = dispatch_queue_create_with_target_V2(label, initially_inactive, 0);
  dispatch_set_qos_class_floor(v7, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v7);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = v7;
  if (v7)
  {
    dispatch_retain(v7);
    *(void *)(a1 + 96) = 0;
    dispatch_release(v7);
  }
  else
  {
    *(void *)(a1 + 96) = 0;
  }
  *(void *)a1 = &unk_26FCC9110;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v36);
  *(void *)(a1 + 8) = &unk_26FCC7378;
  *(void *)(a1 + 56) = *a2;
  uint64_t v8 = a2[1];
  *(void *)(a1 + 64) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v35);
  *(void *)a1 = &unk_26FCC91A0;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v34);
  if (SHIBYTE(v33) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v39) & 0x80000000) == 0) {
      goto LABEL_8;
    }
  }
  else if ((SHIBYTE(v39) & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(*(void **)label);
LABEL_8:
  *(void *)a1 = &unk_26FCC8F48;
  *(_WORD *)(a1 + 104) = *(_WORD *)a3;
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 112), *(const std::string::value_type **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    long long v9 = *(_OWORD *)(a3 + 8);
    *(void *)(a1 + 128) = *(void *)(a3 + 24);
    *(_OWORD *)(a1 + 112) = v9;
  }
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  BOOL v11 = *(unsigned char **)(a3 + 32);
  int v10 = *(unsigned char **)(a3 + 40);
  size_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if ((v12 & 0x8000000000000000) != 0) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = (char *)operator new(v10 - v11);
    *(void *)(a1 + 136) = v13;
    *(void *)(a1 + 144) = v13;
    uint64_t v14 = &v13[v12];
    *(void *)(a1 + 152) = &v13[v12];
    memcpy(v13, v11, v12);
    *(void *)(a1 + 144) = v14;
  }
  if (*(char *)(a3 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 160), *(const std::string::value_type **)(a3 + 56), *(void *)(a3 + 64));
  }
  else
  {
    long long v15 = *(_OWORD *)(a3 + 56);
    *(void *)(a1 + 176) = *(void *)(a3 + 72);
    *(_OWORD *)(a1 + 160) = v15;
  }
  size_t v16 = (std::string *)(a1 + 184);
  if (*(char *)(a3 + 103) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)(a3 + 80), *(void *)(a3 + 88));
  }
  else
  {
    long long v17 = *(_OWORD *)(a3 + 80);
    *(void *)(a1 + 200) = *(void *)(a3 + 96);
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
  }
  uint64_t v18 = *(void *)(a3 + 104);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a3 + 112);
  *(void *)(a1 + 208) = v18;
  *(void *)(a1 + 224) = *(unsigned int *)(a3 + 108);
  *(_DWORD *)(a1 + 232) = 0;
  *(void *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  Timestamp::Timestamp((Timestamp *)(a1 + 280));
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  int v19 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_DEFAULT, 0);
  *(void *)(a1 + 320) = dispatch_queue_create("trace.collection.writer", v19);
  dispatch_group_t v20 = dispatch_group_create();
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 328) = v20;
  unsigned int v21 = 2 * *(_DWORD *)(a1 + 212) * *(_DWORD *)(a1 + 216);
  if (v21) {
    vm_size_t v22 = v21;
  }
  else {
    vm_size_t v22 = 0x800000;
  }
  char v23 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)label = 134217984;
    *(void *)&label[4] = v22;
    _os_log_impl(&dword_248AFD000, v23, OS_LOG_TYPE_DEFAULT, "#I Setting zone size: %lu", (uint8_t *)label, 0xCu);
  }
  HIBYTE(v31[2]) = 19;
  strcpy((char *)v31, "BasebandLoggingZone");
  MallocZone::create((uint64_t)v31, v22, label);
  long long v24 = *(_OWORD *)label;
  *(void *)label = 0;
  *(void *)&label[8] = 0;
  CFTypeID v25 = *(std::__shared_weak_count **)(a1 + 312);
  *(_OWORD *)(a1 + 304) = v24;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  long long v26 = *(std::__shared_weak_count **)&label[8];
  if (!*(void *)&label[8]
    || atomic_fetch_add((atomic_ullong *volatile)(*(void *)&label[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(v31[2]) & 0x80000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
  std::__shared_weak_count::__release_weak(v26);
  if (SHIBYTE(v31[2]) < 0) {
LABEL_33:
  }
    operator delete(v31[0]);
LABEL_34:
  int v27 = *(_DWORD *)(a1 + 208);
  xpc_object_t v28 = *(NSObject **)(a1 + 40);
  int v29 = (v27 << 10) / (*(_DWORD *)(a1 + 216) >> 10);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)label = 67109376;
    *(_DWORD *)&label[4] = v29;
    *(_WORD *)&label[8] = 1024;
    *(_DWORD *)&label[10] = v27;
    _os_log_impl(&dword_248AFD000, v28, OS_LOG_TYPE_DEFAULT, "#I ctor: Adjusting max file count as %u from the history size, %u", (uint8_t *)label, 0xEu);
  }
  *(_DWORD *)(a1 + 208) = v29;
  return a1;
}

void sub_248B3D19C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24)
{
  if (*(char *)(v24 + 183) < 0) {
    operator delete(*v26);
  }
  TraceFileCollection::HeaderOptions::~HeaderOptions(v25);
  ctu::SharedLoggable<TraceFileCollection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable((void *)v24);
  _Unwind_Resume(a1);
}

double TraceFileCollection::getName@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 16) = 0x10AAAAAAAAAAAA00;
  double result = *(double *)"trace.collection";
  *(_OWORD *)a1 = *(_OWORD *)"trace.collection";
  return result;
}

void TraceFileCollection::Parameters::~Parameters(void **this)
{
  if (*((char *)this + 103) < 0)
  {
    operator delete(this[10]);
    if ((*((char *)this + 79) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v2 = this[4];
      if (!v2) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*((char *)this + 79) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[7]);
  uint64_t v2 = this[4];
  if (v2)
  {
LABEL_4:
    this[5] = v2;
    operator delete(v2);
  }
LABEL_5:
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void *ctu::SharedLoggable<TraceFileCollection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_26FCC9110;
  MEMORY[0x24C58AF50](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  char v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_26FCC9110;
  MEMORY[0x24C58AF50](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  char v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void TraceFileCollection::getFileIndex_sync(TraceFileCollection *this, unsigned int *a2, unsigned int *a3)
{
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v62 = v6;
  long long v63 = v6;
  *(_OWORD *)&v60[0].__locale_ = v6;
  long long v61 = v6;
  v50[23] = 18;
  strcpy(v50, "(0x[0-9a-fA-F]{8})");
  int v7 = *((char *)this + 183);
  if (v7 >= 0) {
    uint64_t v8 = (char *)this + 160;
  }
  else {
    uint64_t v8 = (const std::string::value_type *)*((void *)this + 20);
  }
  if (v7 >= 0) {
    std::string::size_type v9 = *((unsigned __int8 *)this + 183);
  }
  else {
    std::string::size_type v9 = *((void *)this + 21);
  }
  int v10 = std::string::append((std::string *)v50, v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  __str[0].__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str[0].__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v60, (uint64_t)__str, 0);
  if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str[0].__r_.__value_.__l.__data_);
    if ((v50[23] & 0x80000000) == 0) {
      goto LABEL_9;
    }
LABEL_66:
    operator delete(*(void **)v50);
    goto LABEL_9;
  }
  if ((v50[23] & 0x80000000) != 0) {
    goto LABEL_66;
  }
LABEL_9:
  stat __p = 0;
  int v58 = 0;
  uint64_t v59 = 0;
  support::fs::readDir((const char *)this + 184, (uint64_t)&__p);
  *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v51 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v53 = 0xAAAAAAAAAAAAAA00;
  long long v55 = v12;
  uint64_t v52 = 0;
  long long v54 = 0uLL;
  LOBYTE(v55) = 0;
  BYTE8(v55) = 0;
  uint64_t v56 = 0;
  memset(v50, 0, sizeof(v50));
  uint64_t v13 = (std::sub_match<const char *> *)__p;
  uint64_t v14 = v58;
  if (__p == v58)
  {
    *a2 = 0;
    *a3 = 0;
    uint64_t v44 = (std::sub_match<const char *> *)__p;
    if (!__p) {
      goto LABEL_63;
    }
    goto LABEL_68;
  }
  uint64_t v47 = a2;
  unsigned int v15 = 0;
  unsigned int v16 = 0;
  char v17 = 1;
  do
  {
    *(void *)&long long v18 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v70 = v18;
    unint64_t v67 = 0xAAAAAAAAAAAAAA00;
    __str[1].__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    uint64_t v68 = 0;
    uint64_t v69 = 0;
    LOBYTE(v70) = 0;
    BYTE8(v70) = 0;
    uint64_t v71 = 0;
    memset(__str, 0, 41);
    second = (const char *)*((unsigned __int8 *)&v13->matched + 7);
    if ((char)second >= 0) {
      first = v13;
    }
    else {
      first = (std::sub_match<const char *> *)v13->first;
    }
    if ((char)second < 0) {
      second = v13->second;
    }
    int v21 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v60, first, (std::sub_match<const char *> *)&second[(void)first], (std::vector<std::csub_match> *)__str, 0);
    vm_size_t v22 = (const char *)*((unsigned __int8 *)&v13->matched + 7);
    if ((char)v22 >= 0) {
      uint64_t v23 = (uint64_t)v13;
    }
    else {
      uint64_t v23 = (uint64_t)v13->first;
    }
    if ((char)v22 < 0) {
      vm_size_t v22 = v13->second;
    }
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)v50, v23, (std::sub_match<std::__wrap_iter<const char *>> *)&v22[v23], (uint64_t *)__str, 0);
    if (__str[0].__r_.__value_.__r.__words[0])
    {
      __str[0].__r_.__value_.__l.__size_ = __str[0].__r_.__value_.__r.__words[0];
      operator delete(__str[0].__r_.__value_.__l.__data_);
    }
    if (v21)
    {
      memset(__str, 170, 24);
      uint64_t v24 = &v51;
      if (*(void *)&v50[8] != *(void *)v50) {
        uint64_t v24 = (long long *)(*(void *)v50 + 16);
      }
      if (!*(unsigned char *)v24)
      {
        memset(__str, 0, 24);
LABEL_50:
        unsigned int v41 = std::stol(__str, 0, 16);
        if (v17) {
          unsigned int v42 = v41;
        }
        else {
          unsigned int v42 = v16;
        }
        if (v42 >= v41) {
          unsigned int v16 = v41;
        }
        else {
          unsigned int v16 = v42;
        }
        if (v15 <= v41) {
          unsigned int v15 = v41;
        }
        if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str[0].__r_.__value_.__l.__data_);
        }
        char v17 = 0;
        goto LABEL_12;
      }
      char v48 = v17;
      unsigned int v49 = v15;
      unsigned int v25 = v16;
      long long v26 = (uint64_t *)&v50[24];
      if (*(void *)&v50[8] != *(void *)v50) {
        long long v26 = *(uint64_t **)v50;
      }
      uint64_t v27 = *v26;
      xpc_object_t v28 = (std::string::value_type **)(*(void *)v50 + 8);
      if (*(void *)&v50[8] == *(void *)v50) {
        xpc_object_t v28 = (std::string::value_type **)&v50[32];
      }
      int v29 = *v28;
      std::string::size_type v30 = (std::string::size_type)&(*v28)[-v27];
      if (v30 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v30 > 0x16)
      {
        uint64_t v38 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v30 | 7) != 0x17) {
          uint64_t v38 = v30 | 7;
        }
        uint64_t v39 = v38 + 1;
        uint64_t v31 = (std::string *)operator new(v38 + 1);
        __str[0].__r_.__value_.__l.__size_ = v30;
        __str[0].__r_.__value_.__r.__words[2] = v39 | 0x8000000000000000;
        __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
        if ((std::string::value_type *)v27 != v29) {
          goto LABEL_36;
        }
      }
      else
      {
        *((unsigned char *)&__str[0].__r_.__value_.__s + 23) = *(unsigned char *)v28 - v27;
        uint64_t v31 = __str;
        if ((std::string::value_type *)v27 != v29)
        {
LABEL_36:
          if (v30 < 0x20 || (unint64_t)v31 - v27 < 0x20)
          {
            xpc_object_t v32 = v31;
            uint64_t v33 = (std::string::value_type *)v27;
          }
          else
          {
            xpc_object_t v32 = (std::string *)((char *)v31 + (v30 & 0xFFFFFFFFFFFFFFE0));
            uint64_t v33 = (std::string::value_type *)(v27 + (v30 & 0xFFFFFFFFFFFFFFE0));
            uint64_t v34 = (long long *)(v27 + 16);
            xpc_object_t v35 = &v31->__r_.__value_.__r.__words[2];
            unint64_t v36 = v30 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v37 = *v34;
              *((_OWORD *)v35 - 1) = *(v34 - 1);
              *(_OWORD *)xpc_object_t v35 = v37;
              v34 += 2;
              v35 += 4;
              v36 -= 32;
            }
            while (v36);
            if (v30 == (v30 & 0x7FFFFFFFFFFFFFE0)) {
              goto LABEL_49;
            }
          }
          do
          {
            std::string::value_type v40 = *v33++;
            v32->__r_.__value_.__s.__data_[0] = v40;
            xpc_object_t v32 = (std::string *)((char *)v32 + 1);
          }
          while (v33 != v29);
LABEL_49:
          v32->__r_.__value_.__s.__data_[0] = 0;
          unsigned int v16 = v25;
          char v17 = v48;
          unsigned int v15 = v49;
          goto LABEL_50;
        }
      }
      xpc_object_t v32 = v31;
      goto LABEL_49;
    }
LABEL_12:
    ++v13;
  }
  while (v13 != v14);
  long long v43 = *(void **)v50;
  unsigned int *v47 = v16;
  *a3 = v15;
  if (v43)
  {
    *(void *)&v50[8] = v43;
    operator delete(v43);
  }
  uint64_t v44 = (std::sub_match<const char *> *)__p;
  if (!__p)
  {
LABEL_63:
    long long v45 = (std::__shared_weak_count *)v63;
    if (!(void)v63) {
      goto LABEL_77;
    }
LABEL_75:
    if (!atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
    goto LABEL_77;
  }
LABEL_68:
  uint64_t v46 = (void **)v58;
  if (v58 == v44)
  {
    int v58 = v44;
    operator delete(v44);
    long long v45 = (std::__shared_weak_count *)v63;
    if (!(void)v63) {
      goto LABEL_77;
    }
    goto LABEL_75;
  }
  do
  {
    if (*((char *)v46 - 1) < 0) {
      operator delete(*(v46 - 3));
    }
    v46 -= 3;
  }
  while (v46 != (void **)v44);
  int v58 = v44;
  operator delete(__p);
  long long v45 = (std::__shared_weak_count *)v63;
  if ((void)v63) {
    goto LABEL_75;
  }
LABEL_77:
  std::locale::~locale(v60);
}

void sub_248B3D864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,std::locale a36)
{
}

uint64_t ___ZN19TraceFileCollection4initEv_block_invoke(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = (ctu::XpcJetsamAssertion *)pthread_mutex_lock(&ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance);
  uint64_t v3 = xmmword_269339CD8;
  if (!(void)xmmword_269339CD8)
  {
    ctu::XpcJetsamAssertion::create_default_global((uint64_t *)&buf.st_dev, v2);
    long long v4 = *(_OWORD *)&buf.st_dev;
    *(void *)&buf.st_dev = 0;
    buf.st_ino = 0;
    long long v5 = (std::__shared_weak_count *)*((void *)&xmmword_269339CD8 + 1);
    xmmword_269339CD8 = v4;
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    st_ino = (std::__shared_weak_count *)buf.st_ino;
    if (buf.st_ino && !atomic_fetch_add((atomic_ullong *volatile)(buf.st_ino + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))st_ino->__on_zero_shared)(st_ino);
      std::__shared_weak_count::__release_weak(st_ino);
    }
    uint64_t v3 = xmmword_269339CD8;
  }
  uint64_t v28 = v3;
  int v29 = (std::__shared_weak_count *)*((void *)&xmmword_269339CD8 + 1);
  if (*((void *)&xmmword_269339CD8 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_269339CD8 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance);
  char v27 = 21;
  strcpy(__p, "Trace File Collection");
  ctu::XpcJetsamAssertion::createActivity();
  long long v7 = v30;
  long long v30 = 0uLL;
  uint64_t v8 = *(std::__shared_weak_count **)(v1 + 344);
  *(_OWORD *)(v1 + 336) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    std::string::size_type v9 = (std::__shared_weak_count *)*((void *)&v30 + 1);
    if (!*((void *)&v30 + 1)) {
      goto LABEL_15;
    }
  }
  else
  {
    std::string::size_type v9 = (std::__shared_weak_count *)*((void *)&v30 + 1);
    if (!*((void *)&v30 + 1)) {
      goto LABEL_15;
    }
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if ((v27 & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
LABEL_15:
  if (v27 < 0) {
LABEL_16:
  }
    operator delete(*(void **)__p);
LABEL_17:
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  if (*(void *)(v1 + 336))
  {
    int v10 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.st_dev) = 0;
      _os_log_impl(&dword_248AFD000, v10, OS_LOG_TYPE_DEFAULT, "#I Taking Trace File Collection Assertion", (uint8_t *)&buf, 2u);
    }
  }
  TraceFileCollection::registerForMemoryPressure_sync((TraceFileCollection *)v1);
  long long v11 = (void *)(v1 + 184);
  int v12 = *(char *)(v1 + 207);
  if (v12 < 0)
  {
    if (*(unsigned char *)(*v11 + *(void *)(v1 + 192) - 1) == 47) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (*((unsigned char *)v11 + *(unsigned __int8 *)(v1 + 207) - 1) != 47)
  {
LABEL_27:
    std::string::push_back((std::string *)(v1 + 184), 47);
    LOBYTE(v12) = *(unsigned char *)(v1 + 207);
  }
LABEL_28:
  v13.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v13.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&buf.st_blksize_t size = v13;
  *(timespec *)buf.st_qspare = v13;
  buf.st_birthtimespec = v13;
  *(timespec *)&buf.st_size_t size = v13;
  buf.st_mtimespec = v13;
  buf.st_ctimespec = v13;
  *(timespec *)&buf.st_uid = v13;
  buf.st_atimespec = v13;
  *(timespec *)&buf.st_dev = v13;
  if ((v12 & 0x80u) == 0) {
    uint64_t v14 = (const char *)(v1 + 184);
  }
  else {
    uint64_t v14 = (const char *)*v11;
  }
  if (!stat(v14, &buf))
  {
    dispatch_group_t v20 = *(char *)(v1 + 207) >= 0 ? (const char *)(v1 + 184) : *(const char **)(v1 + 184);
    int v21 = opendir(v20);
    vm_size_t v22 = v21;
    if (v21)
    {
      uint64_t v23 = readdir(v21);
      closedir(v22);
      if (v23) {
        TraceFileCollection::getFileIndex_sync((TraceFileCollection *)v1, (unsigned int *)(v1 + 256), (unsigned int *)(v1 + 260));
      }
    }
  }
  unsigned int v15 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = *(_DWORD *)(v1 + 256);
    int v17 = *(_DWORD *)(v1 + 260);
    buf.st_dev = 67109376;
    *(_DWORD *)&buf.st_mode = v16;
    LOWORD(buf.st_ino) = 1024;
    *(_DWORD *)((char *)&buf.st_ino + 2) = v17;
    _os_log_impl(&dword_248AFD000, v15, OS_LOG_TYPE_DEFAULT, "#I Init file index: fOldestFileNumber=%d, fNewestFileNumber=%d", (uint8_t *)&buf, 0xEu);
  }
  if (!*(_DWORD *)(v1 + 256) && !*(_DWORD *)(v1 + 260))
  {
    support::fs::removeDir((const char *)(v1 + 184));
    if (!support::fs::createDir((const char *)(v1 + 184), 0x1EDu, 1))
    {
      uint64_t v24 = *(NSObject **)(v1 + 40);
      BOOL v25 = os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
      int v18 = 0;
      if (!v25) {
        return TraceFileCollection::createNewMemoryFile_sync((TraceFileCollection *)v1, v18);
      }
      if (*(char *)(v1 + 207) < 0) {
        long long v11 = (void *)*v11;
      }
      buf.st_dev = 136315138;
      *(void *)&buf.st_mode = v11;
      _os_log_impl(&dword_248AFD000, v24, OS_LOG_TYPE_DEFAULT, "#I Failed to create: %s", (uint8_t *)&buf, 0xCu);
    }
    int v18 = 0;
    return TraceFileCollection::createNewMemoryFile_sync((TraceFileCollection *)v1, v18);
  }
  int v18 = 1;
  return TraceFileCollection::createNewMemoryFile_sync((TraceFileCollection *)v1, v18);
}

void sub_248B3DDA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
}

void TraceFileCollection::registerForMemoryPressure_sync(TraceFileCollection *this)
{
  uint64_t v2 = *((void *)this + 31);
  if (*((_DWORD *)this + 53))
  {
    if (!v2)
    {
      long long v5 = *((void *)this + 5);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)stat buf = 0;
        _os_log_impl(&dword_248AFD000, v5, OS_LOG_TYPE_DEFAULT, "#I Register for memory pressure notifications", buf, 2u);
      }
      dispatch_source_t v6 = dispatch_source_create(MEMORY[0x263EF83D8], 0, 0x30uLL, *((dispatch_queue_t *)this + 11));
      long long v7 = *((void *)this + 31);
      *((void *)this + 31) = v6;
      if (v7)
      {
        dispatch_release(v7);
        dispatch_source_t v6 = (dispatch_source_t)*((void *)this + 31);
      }
      if (v6)
      {
        uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 10);
        if (!v8 || (uint64_t v9 = *((void *)this + 9), (v10 = std::__shared_weak_count::lock(v8)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        long long v11 = v10;
        p_shared_weak_owners = &v10->__shared_weak_owners_;
        atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v11);
        }
        timespec v13 = *((void *)this + 31);
        handler[0] = MEMORY[0x263EF8330];
        handler[1] = 1174405120;
        handler[2] = ___ZN19TraceFileCollection30registerForMemoryPressure_syncEv_block_invoke;
        handler[3] = &__block_descriptor_tmp_33;
        handler[4] = this;
        handler[5] = v9;
        unsigned int v15 = v11;
        atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
        dispatch_source_set_event_handler(v13, handler);
        dispatch_activate(*((dispatch_object_t *)this + 31));
        if (v15) {
          std::__shared_weak_count::__release_weak(v15);
        }
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else if (v2)
  {
    uint64_t v3 = *((void *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl(&dword_248AFD000, v3, OS_LOG_TYPE_DEFAULT, "#I De-register from memory pressure notifications", buf, 2u);
      uint64_t v2 = *((void *)this + 31);
    }
    dispatch_source_cancel(v2);
    long long v4 = *((void *)this + 31);
    *((void *)this + 31) = 0;
    if (v4) {
      dispatch_release(v4);
    }
  }
}

uint64_t TraceFileCollection::createNewMemoryFile_sync(TraceFileCollection *this, int a2)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)this + 56))
  {
    unsigned int v3 = atomic_load((unsigned int *)this + 57);
    if (v3 >= *((_DWORD *)this + 56)) {
      return 0;
    }
  }
  if (a2) {
    ++*((_DWORD *)this + 65);
  }
  atomic_fetch_add((atomic_uint *volatile)this + 57, 1u);
  unsigned int v4 = atomic_load((unsigned int *)this + 57);
  if (v4 > *((_DWORD *)this + 58))
  {
    unsigned int v5 = atomic_load((unsigned int *)this + 57);
    *((_DWORD *)this + 58) = v5;
  }
  int v6 = *((_DWORD *)this + 65);
  long long v7 = (char *)this + 160;
  if (*((char *)this + 183) < 0) {
    long long v7 = *(const char **)v7;
  }
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __str = v8;
  long long v40 = v8;
  snprintf(__str, 0x20uLL, "0x%08X%s", v6, v7);
  size_t v9 = strlen(__str);
  if (v9 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v12 = v9 | 7;
    }
    uint64_t v13 = v12 + 1;
    p_dst = (void **)operator new(v12 + 1);
    size_t v35 = v10;
    int64_t v36 = v13 | 0x8000000000000000;
    long long __dst = p_dst;
    goto LABEL_16;
  }
  HIBYTE(v36) = v9;
  p_dst = (void **)&__dst;
  if (v9) {
LABEL_16:
  }
    memcpy(p_dst, __str, v10);
  *((unsigned char *)p_dst + v10) = 0;
  int v14 = *((char *)this + 207);
  if (v14 >= 0) {
    size_t v15 = *((unsigned __int8 *)this + 207);
  }
  else {
    size_t v15 = *((void *)this + 24);
  }
  int v16 = SHIBYTE(v36);
  if (v36 >= 0) {
    size_t v17 = HIBYTE(v36);
  }
  else {
    size_t v17 = v35;
  }
  unint64_t v18 = v17 + v15;
  memset(__p, 170, sizeof(__p));
  if (v17 + v15 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v18 <= 0x16)
  {
    memset(__p, 0, sizeof(__p));
    int v19 = (char *)__p;
    HIBYTE(__p[2]) = v17 + v15;
    if (!v15) {
      goto LABEL_30;
    }
    goto LABEL_26;
  }
  uint64_t v30 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v18 | 7) != 0x17) {
    uint64_t v30 = v18 | 7;
  }
  uint64_t v31 = v30 + 1;
  int v19 = (char *)operator new(v30 + 1);
  __p[1] = (void *)(v17 + v15);
  __p[2] = (void *)(v31 | 0x8000000000000000);
  __p[0] = v19;
  if (v15)
  {
LABEL_26:
    if (v14 >= 0) {
      dispatch_group_t v20 = (char *)this + 184;
    }
    else {
      dispatch_group_t v20 = (char *)*((void *)this + 23);
    }
    memmove(v19, v20, v15);
  }
LABEL_30:
  int v21 = &v19[v15];
  if (v17)
  {
    if (v16 >= 0) {
      vm_size_t v22 = (void **)&__dst;
    }
    else {
      vm_size_t v22 = __dst;
    }
    memmove(v21, v22, v17);
  }
  v21[v17] = 0;
  size_t v23 = *((unsigned int *)this + 54);
  uint64_t v24 = (std::__shared_weak_count *)*((void *)this + 39);
  uint64_t v32 = *((void *)this + 38);
  uint64_t v33 = v24;
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  TraceFile::create((long long *)__p, v23, 2, &v32, &v38);
  long long v25 = v38;
  long long v38 = 0uLL;
  long long v26 = (std::__shared_weak_count *)*((void *)this + 34);
  *(_OWORD *)((char *)this + 264) = v25;
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  char v27 = (std::__shared_weak_count *)*((void *)&v38 + 1);
  if (*((void *)&v38 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v38 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  uint64_t v28 = v33;
  if (!v33 || atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_46;
    }
LABEL_56:
    operator delete(__p[0]);
    if ((SHIBYTE(v36) & 0x80000000) == 0) {
      goto LABEL_47;
    }
LABEL_57:
    operator delete(__dst);
    goto LABEL_47;
  }
  ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
  std::__shared_weak_count::__release_weak(v28);
  if (SHIBYTE(__p[2]) < 0) {
    goto LABEL_56;
  }
LABEL_46:
  if (SHIBYTE(v36) < 0) {
    goto LABEL_57;
  }
LABEL_47:
  Timestamp::Timestamp((Timestamp *)__str);
  if ((char *)this + 280 != __str) {
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>((uint64_t)this + 280, *(void **)__str, &__str[8]);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)__str, *(void **)&__str[8]);
  return 1;
}

void sub_248B3E408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,void *a22)
{
}

void sub_248B3E420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (a21 < 0) {
    operator delete(__p);
  }
  if (v21 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void TraceFileCollection::~TraceFileCollection(TraceFileCollection *this)
{
  *(void *)this = &unk_26FCC8F48;
  uint64_t v2 = *((void *)this + 31);
  if (v2)
  {
    unsigned int v3 = *((void *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl(&dword_248AFD000, v3, OS_LOG_TYPE_DEFAULT, "#I De-register from memory pressure notifications", buf, 2u);
      uint64_t v2 = *((void *)this + 31);
    }
    dispatch_source_cancel(v2);
    unsigned int v4 = *((void *)this + 31);
    *((void *)this + 31) = 0;
    if (v4) {
      dispatch_release(v4);
    }
  }
  if (*((void *)this + 42))
  {
    usleep(0x30D40u);
    unsigned int v5 = *((void *)this + 5);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)dispatch_group_t v20 = 0;
      _os_log_impl(&dword_248AFD000, v5, OS_LOG_TYPE_DEFAULT, "#I Releasing Trace File Collection Assertion", v20, 2u);
    }
    int v6 = (std::__shared_weak_count *)*((void *)this + 43);
    *((void *)this + 42) = 0;
    *((void *)this + 43) = 0;
    if (v6)
    {
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
        long long v7 = *((void *)this + 5);
        if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_13;
        }
        goto LABEL_12;
      }
    }
  }
  long long v7 = *((void *)this + 5);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
LABEL_12:
    *(_WORD *)int v19 = 0;
    _os_log_impl(&dword_248AFD000, v7, OS_LOG_TYPE_DEFAULT, "#I Destructor", v19, 2u);
  }
LABEL_13:
  long long v8 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  size_t v9 = *((void *)this + 41);
  if (v9) {
    dispatch_release(v9);
  }
  size_t v10 = *((void *)this + 40);
  if (v10) {
    dispatch_release(v10);
  }
  long long v11 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 280, *((void **)this + 36));
  uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 34);
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  uint64_t v13 = *((void *)this + 31);
  if (v13) {
    dispatch_release(v13);
  }
  if (*((char *)this + 207) < 0)
  {
    operator delete(*((void **)this + 23));
    if ((*((char *)this + 183) & 0x80000000) == 0)
    {
LABEL_30:
      int v14 = (char *)this + 8;
      size_t v15 = (void *)*((void *)this + 17);
      if (!v15) {
        goto LABEL_32;
      }
      goto LABEL_31;
    }
  }
  else if ((*((char *)this + 183) & 0x80000000) == 0)
  {
    goto LABEL_30;
  }
  operator delete(*((void **)this + 20));
  int v14 = (char *)this + 8;
  size_t v15 = (void *)*((void *)this + 17);
  if (v15)
  {
LABEL_31:
    *((void *)this + 18) = v15;
    operator delete(v15);
  }
LABEL_32:
  if (*((char *)this + 135) < 0) {
    operator delete(*((void **)this + 14));
  }
  *(void *)this = &unk_26FCC9110;
  MEMORY[0x24C58AF50](v14);
  int v16 = *((void *)this + 12);
  if (v16) {
    dispatch_release(v16);
  }
  size_t v17 = *((void *)this + 11);
  if (v17) {
    dispatch_release(v17);
  }
  unint64_t v18 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
}

{
  void *v1;
  uint64_t vars8;

  TraceFileCollection::~TraceFileCollection(this);
  operator delete(v1);
}

void TraceFileCollection::deregisterForMemoryPressure_sync(TraceFileCollection *this)
{
  uint64_t v1 = *((void *)this + 31);
  if (v1)
  {
    unsigned int v3 = *((void *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unsigned int v5 = 0;
      _os_log_impl(&dword_248AFD000, v3, OS_LOG_TYPE_DEFAULT, "#I De-register from memory pressure notifications", v5, 2u);
      uint64_t v1 = *((void *)this + 31);
    }
    dispatch_source_cancel(v1);
    unsigned int v4 = *((void *)this + 31);
    *((void *)this + 31) = 0;
    if (v4) {
      dispatch_release(v4);
    }
  }
}

uint64_t TraceFileCollection::handleReadData(TraceFileCollection *this, const unsigned __int8 *a2, int a3)
{
  uint64_t v9 = 0;
  size_t v10 = &v9;
  uint64_t v11 = 0x2000000000;
  int v12 = 0;
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 0x40000000;
  v7[2] = ___ZN19TraceFileCollection14handleReadDataEPKhj_block_invoke;
  void v7[3] = &unk_26524EAD8;
  int v8 = a3;
  v7[4] = &v9;
  void v7[5] = this;
  v7[6] = a2;
  uint64_t v13 = v7;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19TraceFileCollectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_90;
  void block[4] = (char *)this + 72;
  void block[5] = &v13;
  unsigned int v4 = (char *)this + 88;
  unsigned int v3 = *((void *)this + 11);
  if (*((void *)v4 + 1)) {
    dispatch_async_and_wait(v3, block);
  }
  else {
    dispatch_sync(v3, block);
  }
  uint64_t v5 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  return v5;
}

void ___ZN19TraceFileCollection14handleReadDataEPKhj_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(v2 + 264);
  if (!v3)
  {
    TraceFileCollection::createNewMemoryFile_sync(*(TraceFileCollection **)(a1 + 40), 1);
    uint64_t v3 = *(void *)(v2 + 264);
    if (!v3)
    {
      *(void *)(v2 + 240) += *(unsigned int *)(a1 + 56);
      return;
    }
  }
  int v4 = *(_DWORD *)(v3 + 64);
  if (v4)
  {
LABEL_8:
    uint64_t v5 = *(char **)(a1 + 48);
    unsigned int v6 = *(_DWORD *)(a1 + 56);
    unsigned int v7 = *(_DWORD *)(v3 + 68);
    unsigned int v8 = v7 - v4;
    unsigned int v9 = v6 - (v7 - v4);
    if (v6 > v7 - v4) {
      goto LABEL_9;
    }
LABEL_15:
    unsigned int v10 = v4 + v6;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a1 + 56))
  {
    Timestamp::Timestamp((Timestamp *)&v15);
    if ((void **)(v2 + 280) != &v15) {
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>(v2 + 280, v15, &v16);
    }
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v15, v16);
    uint64_t v3 = *(void *)(v2 + 264);
    int v4 = *(_DWORD *)(v3 + 64);
    goto LABEL_8;
  }
  int v4 = 0;
  uint64_t v5 = *(char **)(a1 + 48);
  unsigned int v6 = *(_DWORD *)(a1 + 56);
  unsigned int v7 = *(_DWORD *)(v3 + 68);
  unsigned int v8 = v7;
  unsigned int v9 = v6 - v7;
  if (v6 <= v7) {
    goto LABEL_15;
  }
LABEL_9:
  if (*(unsigned char *)(v3 + 72))
  {
    *(_DWORD *)(v3 + 60) += v9;
    unsigned int v10 = v7;
    goto LABEL_16;
  }
  unsigned int v10 = v7;
  unsigned int v6 = v8;
  if (v8)
  {
LABEL_16:
    *(_DWORD *)(v3 + 64) = v10;
    int v11 = *(_DWORD *)(v3 + 56);
    uint64_t v12 = v11 & (v7 - 1);
    size_t v13 = v7 - v12;
    *(_DWORD *)(v3 + 56) = v11 + v6;
    unsigned int v14 = v6 - v13;
    if (v6 <= v13)
    {
      unsigned int v14 = v6;
    }
    else
    {
      memcpy((void *)(*(void *)(v3 + 32) + v12), v5, v13);
      uint64_t v12 = 0;
      v5 += v13;
    }
    memcpy((void *)(*(void *)(v3 + 32) + v12), v5, v14);
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v6;
}

void sub_248B3EB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void TraceFileCollection::archive(TraceFileCollection *this, char a2)
{
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 0x40000000;
  void v4[2] = ___ZN19TraceFileCollection7archiveEb_block_invoke;
  v4[3] = &__block_descriptor_tmp_7;
  v4[4] = this;
  char v5 = a2;
  unsigned int v6 = v4;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19TraceFileCollectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_90;
  void block[4] = (char *)this + 72;
  void block[5] = &v6;
  uint64_t v3 = (char *)this + 88;
  uint64_t v2 = *((void *)this + 11);
  if (*((void *)v3 + 1)) {
    dispatch_async_and_wait(v2, block);
  }
  else {
    dispatch_sync(v2, block);
  }
}

void ___ZN19TraceFileCollection7archiveEb_block_invoke(uint64_t a1)
{
}

void TraceFileCollection::storeFile_sync(dispatch_group_t *this, int a2)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  if (this[33])
  {
    TraceFileCollection::archiveMemoryFile_sync(this);
    uint64_t v3 = *((unsigned int *)this + 64);
    uint64_t v4 = *((unsigned int *)this + 65) - v3;
    uint64_t v5 = *((int *)this + 52);
    if (v5) {
      BOOL v6 = v4 + 1 <= v5;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      unint64_t v53 = (char **)(this + 23);
      while (1)
      {
        unsigned int v7 = (const char *)(this + 20);
        if (*((char *)this + 183) < 0) {
          unsigned int v7 = (const char *)this[20];
        }
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)std::string __str = v8;
        long long v59 = v8;
        snprintf(__str, 0x20uLL, "0x%08X%s", v3, v7);
        size_t v9 = strlen(__str);
        if (v9 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v11 = v9;
        if (v9 >= 0x17) {
          break;
        }
        HIBYTE(v56) = v9;
        p_dst = (void **)&__dst;
        if (v9) {
          goto LABEL_16;
        }
LABEL_17:
        *((unsigned char *)p_dst + v11) = 0;
        int v15 = *((char *)this + 207);
        if (v15 >= 0) {
          size_t v16 = *((unsigned __int8 *)this + 207);
        }
        else {
          size_t v16 = (size_t)this[24];
        }
        int v17 = SHIBYTE(v56);
        if (v56 >= 0) {
          size_t v18 = HIBYTE(v56);
        }
        else {
          size_t v18 = v55;
        }
        unint64_t v19 = v18 + v16;
        memset(v57, 170, sizeof(v57));
        if (v18 + v16 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v19 <= 0x16)
        {
          memset(v57, 0, sizeof(v57));
          dispatch_group_t v20 = v57;
          HIBYTE(v57[2]) = v18 + v16;
          if (!v16) {
            goto LABEL_30;
          }
LABEL_26:
          if (v15 >= 0) {
            int v21 = (char *)(this + 23);
          }
          else {
            int v21 = *v53;
          }
          memmove(v20, v21, v16);
          goto LABEL_30;
        }
        uint64_t v33 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v19 | 7) != 0x17) {
          uint64_t v33 = v19 | 7;
        }
        uint64_t v34 = v33 + 1;
        dispatch_group_t v20 = operator new(v33 + 1);
        v57[1] = v18 + v16;
        v57[2] = v34 | 0x8000000000000000;
        v57[0] = v20;
        if (v16) {
          goto LABEL_26;
        }
LABEL_30:
        vm_size_t v22 = (char *)v20 + v16;
        if (v18)
        {
          if (v17 >= 0) {
            size_t v23 = (void **)&__dst;
          }
          else {
            size_t v23 = __dst;
          }
          memmove(v22, v23, v18);
        }
        v22[v18] = 0;
        int v24 = SHIBYTE(v57[2]);
        long long v25 = (void *)v57[0];
        if (v57[2] >= 0) {
          long long v26 = (const std::__fs::filesystem::path *)v57;
        }
        else {
          long long v26 = (const std::__fs::filesystem::path *)v57[0];
        }
        if (remove(v26, v10)) {
          unlink((const char *)v26);
        }
        if (v24 < 0)
        {
          operator delete(v25);
          if ((v17 & 0x80000000) == 0) {
            goto LABEL_42;
          }
        }
        else if ((v17 & 0x80000000) == 0)
        {
          goto LABEL_42;
        }
        operator delete(__dst);
LABEL_42:
        int v27 = *((_DWORD *)this + 64);
        *(void *)&long long v28 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v28 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)std::string __str = v28;
        long long v59 = v28;
        snprintf(__str, 0x20uLL, "0x%08X%s", v27, ".meta");
        size_t v29 = strlen(__str);
        if (v29 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v31 = v29;
        if (v29 >= 0x17)
        {
          uint64_t v35 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v29 | 7) != 0x17) {
            uint64_t v35 = v29 | 7;
          }
          uint64_t v36 = v35 + 1;
          uint64_t v32 = (void **)operator new(v35 + 1);
          size_t v55 = v31;
          int64_t v56 = v36 | 0x8000000000000000;
          long long __dst = v32;
LABEL_53:
          memcpy(v32, __str, v31);
          goto LABEL_54;
        }
        HIBYTE(v56) = v29;
        uint64_t v32 = (void **)&__dst;
        if (v29) {
          goto LABEL_53;
        }
LABEL_54:
        *((unsigned char *)v32 + v31) = 0;
        int v37 = *((char *)this + 207);
        if (v37 >= 0) {
          size_t v38 = *((unsigned __int8 *)this + 207);
        }
        else {
          size_t v38 = (size_t)this[24];
        }
        int v39 = SHIBYTE(v56);
        if (v56 >= 0) {
          size_t v40 = HIBYTE(v56);
        }
        else {
          size_t v40 = v55;
        }
        unint64_t v41 = v40 + v38;
        memset(v57, 170, sizeof(v57));
        if (v40 + v38 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v41 <= 0x16)
        {
          memset(v57, 0, sizeof(v57));
          unsigned int v42 = v57;
          HIBYTE(v57[2]) = v40 + v38;
          if (!v38) {
            goto LABEL_67;
          }
LABEL_63:
          if (v37 >= 0) {
            long long v43 = (char *)(this + 23);
          }
          else {
            long long v43 = *v53;
          }
          memmove(v42, v43, v38);
          goto LABEL_67;
        }
        uint64_t v50 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v41 | 7) != 0x17) {
          uint64_t v50 = v41 | 7;
        }
        uint64_t v51 = v50 + 1;
        unsigned int v42 = operator new(v50 + 1);
        v57[1] = v40 + v38;
        v57[2] = v51 | 0x8000000000000000;
        v57[0] = v42;
        if (v38) {
          goto LABEL_63;
        }
LABEL_67:
        uint64_t v44 = (char *)v42 + v38;
        if (v40)
        {
          if (v39 >= 0) {
            long long v45 = (void **)&__dst;
          }
          else {
            long long v45 = __dst;
          }
          memmove(v44, v45, v40);
        }
        v44[v40] = 0;
        int v46 = SHIBYTE(v57[2]);
        uint64_t v47 = (void *)v57[0];
        if (v57[2] >= 0) {
          char v48 = (const std::__fs::filesystem::path *)v57;
        }
        else {
          char v48 = (const std::__fs::filesystem::path *)v57[0];
        }
        if (remove(v48, v30)) {
          unlink((const char *)v48);
        }
        if (v46 < 0)
        {
          operator delete(v47);
          if (v39 < 0)
          {
LABEL_88:
            operator delete(__dst);
            LODWORD(v3) = *((_DWORD *)this + 64) + 1;
            *((_DWORD *)this + 64) = v3;
            uint64_t v49 = *((int *)this + 52);
            if (!v49) {
              goto LABEL_91;
            }
            goto LABEL_89;
          }
        }
        else if (v39 < 0)
        {
          goto LABEL_88;
        }
        LODWORD(v3) = *((_DWORD *)this + 64) + 1;
        *((_DWORD *)this + 64) = v3;
        uint64_t v49 = *((int *)this + 52);
        if (!v49) {
          goto LABEL_91;
        }
LABEL_89:
        BOOL v6 = v4-- <= v49;
        if (v6) {
          goto LABEL_91;
        }
      }
      uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17) {
        uint64_t v13 = v9 | 7;
      }
      uint64_t v14 = v13 + 1;
      p_dst = (void **)operator new(v13 + 1);
      size_t v55 = v11;
      int64_t v56 = v14 | 0x8000000000000000;
      long long __dst = p_dst;
LABEL_16:
      memcpy(p_dst, __str, v11);
      goto LABEL_17;
    }
LABEL_91:
    if (a2)
    {
      TraceFileCollection::createNewMemoryFile_sync((TraceFileCollection *)this, 1);
    }
  }
}

void sub_248B3F108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p)
{
  if (v15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void TraceFileCollection::clear(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = a1 + 72;
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 1174405120;
  v7[2] = ___ZN19TraceFileCollection5clearENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb_block_invoke;
  void v7[3] = &__block_descriptor_tmp_8;
  v7[4] = a1;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  char v9 = a3;
  unsigned int v10 = v7;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19TraceFileCollectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_90;
  void block[4] = v5;
  void block[5] = &v10;
  BOOL v6 = *(NSObject **)(a1 + 88);
  if (*(void *)(a1 + 96))
  {
    dispatch_async_and_wait(v6, block);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_8:
    operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  dispatch_sync(v6, block);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_8;
  }
}

void ___ZN19TraceFileCollection5clearENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(char *)(a1 + 63) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
  }
  else {
    std::string __p = *(std::string *)(a1 + 40);
  }
  TraceFileCollection::clear_sync(v2, (uint64_t)&__p, *(unsigned __int8 *)(a1 + 64));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_248B3F304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void TraceFileCollection::clear_sync(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  BOOL v6 = *(NSObject **)(a1 + 328);
  dispatch_time_t v7 = dispatch_time(0, 2000000000);
  if (dispatch_group_wait(v6, v7))
  {
    long long v8 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v31.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_248AFD000, v8, OS_LOG_TYPE_ERROR, "TraceFileCollection files will be removed on the next start", (uint8_t *)&v31, 2u);
    }
    return;
  }
  if (*(void *)(a1 + 264))
  {
    char v9 = *(std::__shared_weak_count **)(a1 + 272);
    *(void *)(a1 + 264) = 0;
    *(void *)(a1 + 272) = 0;
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    atomic_fetch_add((atomic_uint *volatile)(a1 + 228), 0xFFFFFFFF);
  }
  *(void *)(a1 + 256) = 0;
  std::string::size_type v10 = *(unsigned __int8 *)(a2 + 23);
  if (*(char *)(a2 + 23) < 0)
  {
    if (!*(void *)(a2 + 8)) {
      return;
    }
  }
  else if (!*(unsigned char *)(a2 + 23))
  {
    return;
  }
  strcpy((char *)&v28, "filecollection.scratch");
  *((unsigned char *)&v28.__r_.__value_.__s + 23) = 22;
  if ((v10 & 0x80u) == 0) {
    size_t v11 = (const std::string::value_type *)a2;
  }
  else {
    size_t v11 = *(const std::string::value_type **)a2;
  }
  if ((v10 & 0x80u) == 0) {
    std::string::size_type v12 = v10;
  }
  else {
    std::string::size_type v12 = *(void *)(a2 + 8);
  }
  uint64_t v13 = std::string::insert(&v28, 0, v11, v12);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  std::string::size_type v30 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  support::fs::createUniquePath((const char *)__p, &buf);
  std::string v31 = buf;
  *((unsigned char *)&buf.__r_.__value_.__s + 23) = 0;
  buf.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v30) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
  }
  else if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_22;
  }
  operator delete(v28.__r_.__value_.__l.__data_);
LABEL_22:
  if (support::fs::createDir((const char *)a2, 0x1EDu, 1))
  {
    size_t v16 = (std::string::size_type *)(a1 + 184);
    if (*(char *)(a1 + 207) >= 0) {
      int v17 = (const std::__fs::filesystem::path *)(a1 + 184);
    }
    else {
      int v17 = *(const std::__fs::filesystem::path **)(a1 + 184);
    }
    int v18 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
    unint64_t v19 = (const std::string::value_type *)v31.__r_.__value_.__r.__words[0];
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      dispatch_group_t v20 = (const std::__fs::filesystem::path *)&v31;
    }
    else {
      dispatch_group_t v20 = (const std::__fs::filesystem::path *)v31.__r_.__value_.__r.__words[0];
    }
    rename(v17, v20, v15);
    if (!v21 && a3)
    {
      vm_size_t v22 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        std::string::size_type v23 = a1 + 184;
        if (*(char *)(a1 + 207) < 0) {
          std::string::size_type v23 = *v16;
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v23;
        _os_log_impl(&dword_248AFD000, v22, OS_LOG_TYPE_DEFAULT, "#I Creating folder %s", (uint8_t *)&buf, 0xCu);
      }
      if (!support::fs::createDir((const char *)(a1 + 184), 0x1EDu, 1))
      {
        int v24 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          if (*(char *)(a1 + 207) < 0) {
            size_t v16 = (std::string::size_type *)*v16;
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
          _os_log_error_impl(&dword_248AFD000, v24, OS_LOG_TYPE_ERROR, "Failed to create folder: %s", (uint8_t *)&buf, 0xCu);
        }
        goto LABEL_50;
      }
      TraceFileCollection::createNewMemoryFile_sync((TraceFileCollection *)a1, 0);
      goto LABEL_41;
    }
    if (!v21)
    {
LABEL_41:
      block[0] = MEMORY[0x263EF8330];
      block[1] = 1174405120;
      block[2] = ___ZN19TraceFileCollection10clear_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb_block_invoke;
      block[3] = &__block_descriptor_tmp_26_0;
      if (v18 < 0) {
        std::string::__init_copy_ctor_external(&v27, v19, v31.__r_.__value_.__l.__size_);
      }
      else {
        std::string v27 = v31;
      }
      global_queue = dispatch_get_global_queue(0, 0);
      dispatch_async(global_queue, block);
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v27.__r_.__value_.__l.__data_);
      }
    }
  }
  else
  {
    LOBYTE(v18) = *((unsigned char *)&v31.__r_.__value_.__s + 23);
  }
LABEL_50:
  if ((v18 & 0x80) != 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
}

void sub_248B3F6F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v3 = *(_OWORD *)(a2 + 40);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a2 + 56);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
}

BOOL TraceFileCollection::snapshot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t *a6)
{
  uint64_t v16 = 0;
  int v17 = &v16;
  uint64_t v18 = 0x2000000000;
  char v19 = 1;
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 1174405120;
  void v13[2] = ___ZN19TraceFileCollection8snapshotERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_S8_bNS0_10shared_ptrIN3abm5trace9TraceInfoEEE_block_invoke;
  v13[3] = &unk_26FCC8FB0;
  char v15 = a5;
  v13[4] = &v16;
  v13[5] = a1;
  v13[6] = a4;
  v13[7] = a2;
  uint64_t v7 = *a6;
  BOOL v6 = (std::__shared_weak_count *)a6[1];
  char v13[8] = a3;
  v13[9] = v7;
  long long v14 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  dispatch_group_t v20 = v13;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19TraceFileCollectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_90;
  void block[4] = a1 + 72;
  void block[5] = &v20;
  uint64_t v9 = a1 + 88;
  long long v8 = *(NSObject **)(a1 + 88);
  if (*(void *)(v9 + 8))
  {
    dispatch_async_and_wait(v8, block);
    int v10 = *((unsigned __int8 *)v17 + 24);
    size_t v11 = v14;
    if (!v14) {
      goto LABEL_9;
    }
  }
  else
  {
    dispatch_sync(v8, block);
    int v10 = *((unsigned __int8 *)v17 + 24);
    size_t v11 = v14;
    if (!v14) {
      goto LABEL_9;
    }
  }
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_9:
  _Block_object_dispose(&v16, 8);
  return v10 != 0;
}

void ___ZN19TraceFileCollection8snapshotERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_S8_bNS0_10shared_ptrIN3abm5trace9TraceInfoEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(dispatch_group_t **)(a1 + 40);
  TraceFileCollection::prepareSnapshot_sync(v2);
  if (*(unsigned char *)(a1 + 88))
  {
    uint64_t v3 = *(void *)(a1 + 48);
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v5 = *(void *)(a1 + 64);
    BOOL v6 = *(std::__shared_weak_count **)(a1 + 80);
    v7[0] = *(void *)(a1 + 72);
    v7[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = TraceFileCollection::finishSnapshot_sync((uint64_t)v2, v3, v4, v5, (uint64_t)v7);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_248B3F9F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void TraceFileCollection::prepareSnapshot_sync(dispatch_group_t *this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  dispatch_group_wait(this[41], 0xFFFFFFFFFFFFFFFFLL);
  TraceFileCollection::storeFile_sync(this, 0);
  dispatch_group_wait(this[41], 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v2 = this[5];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *((_DWORD *)this + 53);
    int v4 = *((_DWORD *)this + 56);
    dispatch_group_t v5 = this[30];
    v6[0] = 67109632;
    v6[1] = v3;
    __int16 v7 = 1024;
    int v8 = v4;
    __int16 v9 = 2048;
    dispatch_group_t v10 = v5;
    _os_log_impl(&dword_248AFD000, v2, OS_LOG_TYPE_DEFAULT, "#I File collection state: maxMemoryFileCount=%u, fAppliedMemoryFileCount=%u, fDroppedBytes=%llu", (uint8_t *)v6, 0x18u);
  }
}

BOOL TraceFileCollection::finishSnapshot_sync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v129 = *MEMORY[0x263EF8340];
  int v9 = *(_DWORD *)(a1 + 256);
  int v10 = *(_DWORD *)(a1 + 260);
  memset(&__dst, 170, sizeof(__dst));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__dst, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __dst = *(std::string *)a2;
  }
  uint64_t v119 = a3;
  int v11 = v10 + 1;
  if (v9 == v10 + 1)
  {
    BOOL updated = 1;
  }
  else
  {
    LOBYTE(updated) = 1;
    do
    {
      if (updated)
      {
        uint64_t v60 = *(std::__shared_weak_count **)(a5 + 8);
        v123[0] = *(void *)a5;
        v123[1] = (uint64_t)v60;
        if (v60) {
          atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        BOOL updated = TraceFileCollection::updateInfoForSnapshotFiles_sync(a1, v9, (const void **)(a1 + 184), &__dst, v123);
        if (v60 && !atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      else
      {
        BOOL updated = 0;
      }
      ++v9;
    }
    while (v11 != v9);
  }
  uint64_t v13 = *(void *)a5;
  if (*(void *)a5)
  {
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = xmmword_248B4B8A0;
    strcpy(__p[0].__r_.__value_.__l.__data_, "Trace Collection Statistics");
    TraceFileCollection::getStatisticsAsDict_sync((TraceFileCollection *)a1, &object);
    abm::trace::TraceInfo::push(v13, (uint64_t)__p, &object);
    xpc_release(object);
    xpc_object_t object = 0;
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    abm::trace::TraceInfo::flushDataToDisk(*(abm::trace::TraceInfo **)a5);
  }
  *((unsigned char *)&v126.__r_.__value_.__s + 23) = 17;
  strcpy((char *)&v126, "Dropped (Bytes): ");
  std::to_string(__p, *(void *)(a1 + 240));
  std::string v121 = __p[0];
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v14 = &v121;
  }
  else {
    long long v14 = (std::string *)v121.__r_.__value_.__r.__words[0];
  }
  char v15 = std::string::append(&v126, (const std::string::value_type *)v14);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v127.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 1;
  LOWORD(__p[0].__r_.__value_.__l.__data_) = 10;
  int v17 = std::string::append(&v127, (const std::string::value_type *)__p, 1uLL);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v128.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v128.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v19 = &v128;
  }
  else {
    char v19 = (std::string *)v128.__r_.__value_.__r.__words[0];
  }
  if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v128.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v128.__r_.__value_.__l.__size_;
  }
  std::string::append(&__dst, (const std::string::value_type *)v19, size);
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v128.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_21:
      if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_22;
      }
      goto LABEL_89;
    }
  }
  else if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_21;
  }
  operator delete(__p[0].__r_.__value_.__l.__data_);
  if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_22:
    if ((SHIBYTE(v121.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_23;
    }
LABEL_90:
    operator delete(v121.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_91;
  }
LABEL_89:
  operator delete(v127.__r_.__value_.__l.__data_);
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_90;
  }
LABEL_23:
  if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_24;
  }
LABEL_91:
  operator delete(v126.__r_.__value_.__l.__data_);
LABEL_24:
  v126.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
  *(_OWORD *)&v126.__r_.__value_.__r.__words[1] = xmmword_248B4B8B0;
  strcpy(v126.__r_.__value_.__l.__data_, "Max memory file count: ");
  unsigned int v21 = *(_DWORD *)(a1 + 212);
  memset(&v121, 0, sizeof(v121));
  std::to_string(__p, v21);
  std::string v121 = __p[0];
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    vm_size_t v22 = &v121;
  }
  else {
    vm_size_t v22 = (std::string *)v121.__r_.__value_.__r.__words[0];
  }
  std::string::size_type v23 = std::string::append(&v126, (const std::string::value_type *)v22);
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v127.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 1;
  LOWORD(__p[0].__r_.__value_.__l.__data_) = 10;
  long long v25 = std::string::append(&v127, (const std::string::value_type *)__p, 1uLL);
  long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v128.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v128.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v27 = &v128;
  }
  else {
    std::string v27 = (std::string *)v128.__r_.__value_.__r.__words[0];
  }
  if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v28 = HIBYTE(v128.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v28 = v128.__r_.__value_.__l.__size_;
  }
  std::string::append(&__dst, (const std::string::value_type *)v27, v28);
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v128.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_35:
      if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_36;
      }
      goto LABEL_94;
    }
  }
  else if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_35;
  }
  operator delete(__p[0].__r_.__value_.__l.__data_);
  if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_36:
    if ((SHIBYTE(v121.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_37;
    }
LABEL_95:
    operator delete(v121.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_96;
  }
LABEL_94:
  operator delete(v127.__r_.__value_.__l.__data_);
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_95;
  }
LABEL_37:
  if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_38;
  }
LABEL_96:
  operator delete(v126.__r_.__value_.__l.__data_);
LABEL_38:
  v126.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&v126.__r_.__value_.__r.__words[1] = xmmword_248B4B8A0;
  strcpy(v126.__r_.__value_.__l.__data_, "Applied memory file count: ");
  unsigned int v29 = *(_DWORD *)(a1 + 224);
  memset(&v121, 0, sizeof(v121));
  std::to_string(__p, v29);
  std::string v121 = __p[0];
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v30 = &v121;
  }
  else {
    std::string::size_type v30 = (std::string *)v121.__r_.__value_.__r.__words[0];
  }
  std::string v31 = std::string::append(&v126, (const std::string::value_type *)v30);
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v127.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 1;
  LOWORD(__p[0].__r_.__value_.__l.__data_) = 10;
  uint64_t v33 = std::string::append(&v127, (const std::string::value_type *)__p, 1uLL);
  long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v128.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v128.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v35 = &v128;
  }
  else {
    uint64_t v35 = (std::string *)v128.__r_.__value_.__r.__words[0];
  }
  if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v36 = HIBYTE(v128.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v36 = v128.__r_.__value_.__l.__size_;
  }
  std::string::append(&__dst, (const std::string::value_type *)v35, v36);
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v128.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_49:
      if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_50;
      }
      goto LABEL_99;
    }
  }
  else if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_49;
  }
  operator delete(__p[0].__r_.__value_.__l.__data_);
  if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_50:
    if ((SHIBYTE(v121.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_51;
    }
LABEL_100:
    operator delete(v121.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_101;
  }
LABEL_99:
  operator delete(v127.__r_.__value_.__l.__data_);
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_100;
  }
LABEL_51:
  if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_52;
  }
LABEL_101:
  operator delete(v126.__r_.__value_.__l.__data_);
LABEL_52:
  *((unsigned char *)&v127.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&v127, "Dump Reason: ");
  if (*(char *)(a4 + 23) >= 0) {
    int v37 = (const std::string::value_type *)a4;
  }
  else {
    int v37 = *(const std::string::value_type **)a4;
  }
  size_t v38 = std::string::append(&v127, v37);
  long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v128.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v128.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  *((unsigned char *)&v126.__r_.__value_.__s + 23) = 1;
  LOWORD(v126.__r_.__value_.__l.__data_) = 10;
  size_t v40 = std::string::append(&v128, (const std::string::value_type *)&v126, 1uLL);
  long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  __p[0].__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unsigned int v42 = __p;
  }
  else {
    unsigned int v42 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  }
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v43 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v43 = __p[0].__r_.__value_.__l.__size_;
  }
  std::string::append(&__dst, (const std::string::value_type *)v42, v43);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_63:
      if ((SHIBYTE(v128.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_64;
      }
LABEL_104:
      operator delete(v128.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_65;
      }
      goto LABEL_105;
    }
  }
  else if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_63;
  }
  operator delete(v126.__r_.__value_.__l.__data_);
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_104;
  }
LABEL_64:
  if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_65;
  }
LABEL_105:
  operator delete(v127.__r_.__value_.__l.__data_);
LABEL_65:
  *(void *)(a1 + 240) = 0;
  memset(&__p[0].__r_.__value_.__r.__words[1], 170, 0x230uLL);
  std::string::size_type v44 = MEMORY[0x263F8C310] + 64;
  __p[17].__r_.__value_.__l.__size_ = MEMORY[0x263F8C310] + 64;
  long long v45 = (std::string::size_type *)MEMORY[0x263F8C2B0];
  std::string::size_type v46 = *(void *)(MEMORY[0x263F8C2B0] + 16);
  __p[0].__r_.__value_.__r.__words[0] = *(void *)(MEMORY[0x263F8C2B0] + 8);
  std::string::size_type v47 = __p[0].__r_.__value_.__r.__words[0];
  std::string::size_type v48 = v46;
  *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words
                            + *(void *)(__p[0].__r_.__value_.__r.__words[0] - 24)) = v46;
  uint64_t v49 = (std::ios_base *)((char *)__p + *(void *)(__p[0].__r_.__value_.__r.__words[0] - 24));
  std::ios_base::init(v49, &__p[0].__r_.__value_.__r.__words[1]);
  uint64_t v50 = MEMORY[0x263F8C310] + 24;
  v49[1].__vftable = 0;
  v49[1].__fmtflags_ = -1;
  __p[0].__r_.__value_.__r.__words[0] = v50;
  __p[17].__r_.__value_.__l.__size_ = v44;
  MEMORY[0x24C58B330](&__p[0].__r_.__value_.__r.__words[1]);
  memset(&v128, 170, sizeof(v128));
  uint64_t v51 = *(const std::string::value_type **)(a1 + 184);
  *((unsigned char *)&v127.__r_.__value_.__s + 23) = 9;
  strcpy((char *)&v127, "/info.txt");
  char v52 = *(unsigned char *)(a1 + 207);
  uint64_t v120 = (const void **)(a1 + 184);
  if (v52 >= 0) {
    unint64_t v53 = (const std::string::value_type *)(a1 + 184);
  }
  else {
    unint64_t v53 = v51;
  }
  if (v52 >= 0) {
    std::string::size_type v54 = *(unsigned __int8 *)(a1 + 207);
  }
  else {
    std::string::size_type v54 = *(void *)(a1 + 192);
  }
  size_t v55 = std::string::insert(&v127, 0, v53, v54);
  long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
  v128.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v128.__r_.__value_.__l.__data_ = v56;
  v55->__r_.__value_.__l.__size_ = 0;
  v55->__r_.__value_.__r.__words[2] = 0;
  v55->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v127.__r_.__value_.__l.__data_);
  }
  std::ofstream::open();
  if (*(_DWORD *)((char *)&__p[1].__r_.__value_.__r.__words[1] + *(void *)(__p[0].__r_.__value_.__r.__words[0] - 24)))
  {
    unint64_t v57 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
    {
      int v58 = &v128;
      if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v58 = (std::string *)v128.__r_.__value_.__r.__words[0];
      }
      LODWORD(v127.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v127.__r_.__value_.__r.__words + 4) = (std::string::size_type)v58;
      long long v59 = "Failed to open info file: %s";
LABEL_113:
      _os_log_error_impl(&dword_248AFD000, v57, OS_LOG_TYPE_ERROR, v59, (uint8_t *)&v127, 0xCu);
      goto LABEL_114;
    }
    goto LABEL_114;
  }
  std::ostream::write();
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)__p + *(void *)(__p[0].__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)((char *)&__p[1].__r_.__value_.__r.__words[1] + *(void *)(__p[0].__r_.__value_.__r.__words[0] - 24)) | 4);
  }
  if (__p[1].__r_.__value_.__s.__data_[*(void *)(__p[0].__r_.__value_.__r.__words[0] - 24) + 8])
  {
    unint64_t v57 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
    {
      long long v61 = &v128;
      if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        long long v61 = (std::string *)v128.__r_.__value_.__r.__words[0];
      }
      LODWORD(v127.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v127.__r_.__value_.__r.__words + 4) = (std::string::size_type)v61;
      long long v59 = "Failed to write: %s";
      goto LABEL_113;
    }
LABEL_114:
    BOOL updated = 0;
  }
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v128.__r_.__value_.__l.__data_);
  }
  __p[0].__r_.__value_.__r.__words[0] = *v45;
  std::string::size_type v62 = __p[0].__r_.__value_.__r.__words[0];
  std::string::size_type v63 = v45[3];
  *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words
                            + *(void *)(__p[0].__r_.__value_.__r.__words[0] - 24)) = v63;
  MEMORY[0x24C58B340](&__p[0].__r_.__value_.__r.__words[1]);
  std::ostream::~ostream();
  MEMORY[0x24C58B5B0](&__p[17].__r_.__value_.__r.__words[1]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (!*(unsigned char *)(a1 + 104)) {
      goto LABEL_160;
    }
  }
  else if (!*(unsigned char *)(a1 + 104))
  {
    goto LABEL_160;
  }
  std::string::size_type v118 = v62;
  memset(&__p[0].__r_.__value_.__r.__words[1], 170, 0x230uLL);
  std::string::size_type v64 = MEMORY[0x263F8C310] + 64;
  __p[17].__r_.__value_.__l.__size_ = MEMORY[0x263F8C310] + 64;
  __p[0].__r_.__value_.__r.__words[0] = v47;
  *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + *(void *)(v47 - 24)) = v48;
  uint64_t v65 = (std::ios_base *)((char *)__p + *(void *)(__p[0].__r_.__value_.__r.__words[0] - 24));
  std::ios_base::init(v65, &__p[0].__r_.__value_.__r.__words[1]);
  std::string::size_type v117 = v63;
  uint64_t v66 = MEMORY[0x263F8C310] + 24;
  v65[1].__vftable = 0;
  v65[1].__fmtflags_ = -1;
  __p[0].__r_.__value_.__r.__words[0] = v66;
  __p[17].__r_.__value_.__l.__size_ = v64;
  MEMORY[0x24C58B330](&__p[0].__r_.__value_.__r.__words[1]);
  int v67 = *(char *)(a1 + 207);
  if (v67 >= 0) {
    size_t v68 = *(unsigned __int8 *)(a1 + 207);
  }
  else {
    size_t v68 = *(void *)(a1 + 192);
  }
  int v69 = *(char *)(a1 + 135);
  if (v69 >= 0) {
    size_t v70 = *(unsigned __int8 *)(a1 + 135);
  }
  else {
    size_t v70 = *(void *)(a1 + 120);
  }
  unint64_t v71 = v70 + v68;
  memset(&__dst, 170, sizeof(__dst));
  if (v70 + v68 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v71 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v70 + v68;
    if (!v68) {
      goto LABEL_134;
    }
    goto LABEL_130;
  }
  uint64_t v79 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v71 | 7) != 0x17) {
    uint64_t v79 = v71 | 7;
  }
  uint64_t v80 = v79 + 1;
  p_dst = (char *)operator new(v79 + 1);
  __dst.__r_.__value_.__l.__size_ = v70 + v68;
  __dst.__r_.__value_.__r.__words[2] = v80 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v68)
  {
LABEL_130:
    if (v67 >= 0) {
      uint64_t v73 = (const void *)(a1 + 184);
    }
    else {
      uint64_t v73 = *v120;
    }
    memmove(p_dst, v73, v68);
  }
LABEL_134:
  uint64_t v74 = &p_dst[v68];
  if (v70)
  {
    if (v69 >= 0) {
      uint64_t v75 = (const void *)(a1 + 112);
    }
    else {
      uint64_t v75 = *(const void **)(a1 + 112);
    }
    memmove(v74, v75, v70);
  }
  v74[v70] = 0;
  std::ofstream::open();
  if (*(_DWORD *)((char *)&__p[1].__r_.__value_.__r.__words[1] + *(void *)(__p[0].__r_.__value_.__r.__words[0] - 24)))
  {
    long long v76 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
    {
      unint64_t v77 = &__dst;
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        unint64_t v77 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      }
      LODWORD(v128.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v128.__r_.__value_.__r.__words + 4) = (std::string::size_type)v77;
      std::string::size_type v78 = "Failed to open header file: %s";
LABEL_155:
      _os_log_error_impl(&dword_248AFD000, v76, OS_LOG_TYPE_ERROR, v78, (uint8_t *)&v128, 0xCu);
    }
  }
  else
  {
    std::ostream::write();
    if (!std::filebuf::close()) {
      std::ios_base::clear((std::ios_base *)((char *)__p + *(void *)(__p[0].__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)((char *)&__p[1].__r_.__value_.__r.__words[1] + *(void *)(__p[0].__r_.__value_.__r.__words[0] - 24)) | 4);
    }
    if ((__p[1].__r_.__value_.__s.__data_[*(void *)(__p[0].__r_.__value_.__r.__words[0] - 24) + 8] & 1) == 0) {
      goto LABEL_157;
    }
    long long v76 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
    {
      long long v81 = &__dst;
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        long long v81 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      }
      LODWORD(v128.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v128.__r_.__value_.__r.__words + 4) = (std::string::size_type)v81;
      std::string::size_type v78 = "Failed to write: %s";
      goto LABEL_155;
    }
  }
  BOOL updated = 0;
LABEL_157:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  __p[0].__r_.__value_.__r.__words[0] = v118;
  *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + *(void *)(v118 - 24)) = v117;
  MEMORY[0x24C58B340](&__p[0].__r_.__value_.__r.__words[1]);
  std::ostream::~ostream();
  MEMORY[0x24C58B5B0](&__p[17].__r_.__value_.__r.__words[1]);
LABEL_160:
  long long v82 = abm::trace::kSnapshotFolder;
  size_t v83 = strlen(abm::trace::kSnapshotFolder);
  if (v83 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v84 = v83;
  if (v83 >= 0x17)
  {
    uint64_t v86 = (v83 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v83 | 7) != 0x17) {
      uint64_t v86 = v83 | 7;
    }
    uint64_t v87 = v86 + 1;
    int v85 = (std::string *)operator new(v86 + 1);
    __p[0].__r_.__value_.__l.__size_ = v84;
    __p[0].__r_.__value_.__r.__words[2] = v87 | 0x8000000000000000;
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v85;
    goto LABEL_167;
  }
  *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = v83;
  int v85 = __p;
  if (v83) {
LABEL_167:
  }
    memmove(v85, v82, v84);
  v85->__r_.__value_.__s.__data_[v84] = 0;
  support::fs::createDir((const char *)__p, 0x1EDu, 1);
  uint64_t v89 = (const char *)(a1 + 184);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (*(char *)(a1 + 207) >= 0) {
    std::vector<std::ssub_match>::pointer v90 = (const std::__fs::filesystem::path *)(a1 + 184);
  }
  else {
    std::vector<std::ssub_match>::pointer v90 = *(const std::__fs::filesystem::path **)(a1 + 184);
  }
  if (*(char *)(v119 + 23) >= 0) {
    std::vector<std::string>::pointer v91 = (const std::__fs::filesystem::path *)v119;
  }
  else {
    std::vector<std::string>::pointer v91 = *(const std::__fs::filesystem::path **)v119;
  }
  rename(v90, v91, v88);
  if (v92)
  {
    int v93 = *__error();
    uint64_t v94 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
    {
      BOOL updated = 0;
      uint64_t v89 = (const char *)(a1 + 184);
      goto LABEL_179;
    }
    int v97 = *(char *)(a1 + 207);
    if (v97 >= 0) {
      size_t v98 = *(unsigned __int8 *)(a1 + 207);
    }
    else {
      size_t v98 = *(void *)(a1 + 192);
    }
    unint64_t v99 = v98 + 4;
    memset(&v127, 170, sizeof(v127));
    if (v98 + 4 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v99 >= 0x17)
    {
      int v102 = v97;
      uint64_t v103 = (v99 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v99 | 7) != 0x17) {
        uint64_t v103 = v99 | 7;
      }
      uint64_t v104 = v103 + 1;
      long long v100 = operator new(v103 + 1);
      v127.__r_.__value_.__l.__size_ = v98 + 4;
      v127.__r_.__value_.__r.__words[2] = v104 | 0x8000000000000000;
      v127.__r_.__value_.__r.__words[0] = (std::string::size_type)v100;
      uint64_t v89 = (const char *)(a1 + 184);
      int v97 = v102;
    }
    else
    {
      memset(&v127, 0, sizeof(v127));
      long long v100 = &v127;
      *((unsigned char *)&v127.__r_.__value_.__s + 23) = v98 + 4;
      uint64_t v89 = (const char *)(a1 + 184);
      if (!v98) {
        goto LABEL_199;
      }
    }
    if (v97 >= 0) {
      char v105 = v89;
    }
    else {
      char v105 = *(const char **)v89;
    }
    memmove(v100, v105, v98);
LABEL_199:
    strcpy((char *)v100 + v98, " to ");
    int v106 = *(char *)(v119 + 23);
    if (v106 >= 0) {
      uint64_t v107 = (const std::string::value_type *)v119;
    }
    else {
      uint64_t v107 = *(const std::string::value_type **)v119;
    }
    if (v106 >= 0) {
      std::string::size_type v108 = *(unsigned __int8 *)(v119 + 23);
    }
    else {
      std::string::size_type v108 = *(void *)(v119 + 8);
    }
    uint64_t v109 = std::string::append(&v127, v107, v108);
    long long v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
    v128.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v128.__r_.__value_.__l.__data_ = v110;
    v109->__r_.__value_.__l.__size_ = 0;
    v109->__r_.__value_.__r.__words[2] = 0;
    v109->__r_.__value_.__r.__words[0] = 0;
    uint64_t v111 = std::string::append(&v128, " Error: ");
    long long v112 = *(_OWORD *)&v111->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v111->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v112;
    v111->__r_.__value_.__l.__size_ = 0;
    v111->__r_.__value_.__r.__words[2] = 0;
    v111->__r_.__value_.__r.__words[0] = 0;
    int v113 = strerror(v93);
    uint64_t v114 = std::string::append(&__dst, v113);
    long long v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
    __p[0].__r_.__value_.__r.__words[2] = v114->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v115;
    v114->__r_.__value_.__l.__size_ = 0;
    v114->__r_.__value_.__r.__words[2] = 0;
    v114->__r_.__value_.__r.__words[0] = 0;
    size_t v116 = __p;
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      size_t v116 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    }
    LODWORD(v126.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v126.__r_.__value_.__r.__words + 4) = (std::string::size_type)v116;
    _os_log_error_impl(&dword_248AFD000, v94, OS_LOG_TYPE_ERROR, "Failed to rename: %s", (uint8_t *)&v126, 0xCu);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p[0].__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_209:
        if ((SHIBYTE(v128.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_210;
        }
        goto LABEL_216;
      }
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_209;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v128.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_210:
      if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_211:
        BOOL updated = 0;
        goto LABEL_179;
      }
LABEL_217:
      operator delete(v127.__r_.__value_.__l.__data_);
      goto LABEL_211;
    }
LABEL_216:
    operator delete(v128.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_211;
    }
    goto LABEL_217;
  }
LABEL_179:
  if (!support::fs::createDir(v89, 0x1EDu, 1))
  {
    char v95 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v95, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a1 + 207) < 0) {
        std::string::size_type v101 = (std::string::size_type)*v120;
      }
      else {
        std::string::size_type v101 = a1 + 184;
      }
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = v101;
      _os_log_error_impl(&dword_248AFD000, v95, OS_LOG_TYPE_ERROR, "Failed to create folder: %s", (uint8_t *)__p, 0xCu);
    }
    BOOL updated = 0;
  }
  *(void *)(a1 + 256) = 0;
  TraceFileCollection::createNewMemoryFile_sync((TraceFileCollection *)a1, 0);
  return updated;
}

void sub_248B40D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,xpc_object_t object,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (*(char *)(v36 - 105) < 0)
  {
    operator delete(*(void **)(v36 - 128));
    if ((*(char *)(v36 - 137) & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else if ((*(char *)(v36 - 137) & 0x80000000) == 0)
  {
LABEL_6:
    _Unwind_Resume(exception_object);
  }
  operator delete(*(void **)(v36 - 160));
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_72c48_ZTSNSt3__110shared_ptrIN3abm5trace9TraceInfoEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 80);
  *(void *)(result + 72) = *(void *)(a2 + 72);
  *(void *)(result + 80) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_72c48_ZTSNSt3__110shared_ptrIN3abm5trace9TraceInfoEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 80);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

BOOL TraceFileCollection::updateInfoForSnapshotFiles_sync(uint64_t a1, int a2, const void **a3, std::string *a4, uint64_t *a5)
{
  uint64_t v119 = *MEMORY[0x263EF8340];
  memset(v112, 170, sizeof(v112));
  *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __str[0] = v9;
  __str[1] = v9;
  snprintf((char *)__str, 0x20uLL, "0x%08X%s", a2, ".meta");
  size_t v10 = strlen((const char *)__str);
  if (v10 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v11 = v10;
  size_t v98 = a5;
  if (v10 >= 0x17)
  {
    uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v13 = v10 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = (long long *)operator new(v13 + 1);
    *((void *)&__dst + 1) = v11;
    *(void *)&long long v116 = v14 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_8;
  }
  BYTE7(v116) = v10;
  p_dst = &__dst;
  if (v10) {
LABEL_8:
  }
    memcpy(p_dst, __str, v11);
  *((unsigned char *)p_dst + v11) = 0;
  int v15 = *((char *)a3 + 23);
  if (v15 >= 0) {
    size_t v16 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v16 = (size_t)a3[1];
  }
  int v17 = SBYTE7(v116);
  if ((SBYTE7(v116) & 0x80u) == 0) {
    size_t v18 = BYTE7(v116);
  }
  else {
    size_t v18 = *((void *)&__dst + 1);
  }
  unint64_t v19 = v18 + v16;
  memset(v112, 170, sizeof(v112));
  if (v18 + v16 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v19 <= 0x16)
  {
    memset(v112, 0, sizeof(v112));
    dispatch_group_t v20 = (char *)v112;
    HIBYTE(v112[2]) = v18 + v16;
    if (!v16) {
      goto LABEL_22;
    }
    goto LABEL_18;
  }
  uint64_t v29 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v19 | 7) != 0x17) {
    uint64_t v29 = v19 | 7;
  }
  uint64_t v30 = v29 + 1;
  dispatch_group_t v20 = (char *)operator new(v29 + 1);
  v112[1] = (void *)(v18 + v16);
  v112[2] = (void *)(v30 | 0x8000000000000000);
  v112[0] = v20;
  if (v16)
  {
LABEL_18:
    if (v15 >= 0) {
      unsigned int v21 = a3;
    }
    else {
      unsigned int v21 = *a3;
    }
    memmove(v20, v21, v16);
  }
LABEL_22:
  vm_size_t v22 = &v20[v16];
  if (v18)
  {
    if (v17 >= 0) {
      std::string::size_type v23 = &__dst;
    }
    else {
      std::string::size_type v23 = (long long *)__dst;
    }
    memmove(v22, v23, v18);
  }
  v22[v18] = 0;
  if (v17 < 0)
  {
    operator delete((void *)__dst);
    long long v24 = (const char *)(a1 + 160);
    memset(__p, 170, sizeof(__p));
    if ((*(char *)(a1 + 183) & 0x80000000) == 0) {
      goto LABEL_29;
    }
  }
  else
  {
    long long v24 = (const char *)(a1 + 160);
    memset(__p, 170, sizeof(__p));
    if ((*(char *)(a1 + 183) & 0x80000000) == 0) {
      goto LABEL_29;
    }
  }
  long long v24 = *(const char **)v24;
LABEL_29:
  *(void *)&long long v25 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __str[0] = v25;
  __str[1] = v25;
  snprintf((char *)__str, 0x20uLL, "0x%08X%s", a2, v24);
  size_t v26 = strlen((const char *)__str);
  if (v26 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string v27 = (void *)v26;
  if (v26 >= 0x17)
  {
    uint64_t v31 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17) {
      uint64_t v31 = v26 | 7;
    }
    uint64_t v32 = v31 + 1;
    std::string::size_type v28 = operator new(v31 + 1);
    __p[1] = v27;
    __p[2] = (void *)(v32 | 0x8000000000000000);
    __p[0] = v28;
    goto LABEL_40;
  }
  HIBYTE(__p[2]) = v26;
  std::string::size_type v28 = __p;
  if (v26) {
LABEL_40:
  }
    memcpy(v28, __str, (size_t)v27);
  *((unsigned char *)v27 + (void)v28) = 0;
  *(void *)&long long v33 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v33 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v117 = v33;
  long long v118 = v33;
  long long __dst = v33;
  long long v116 = v33;
  memset((char *)__str + 8, 170, 0x238uLL);
  uint64_t v34 = MEMORY[0x263F8C308] + 64;
  *((void *)&__str[26] + 1) = MEMORY[0x263F8C308] + 64;
  uint64_t v35 = (void *)MEMORY[0x263F8C2A8];
  uint64_t v36 = *(void *)(MEMORY[0x263F8C2A8] + 16);
  *(void *)&__str[0] = *(void *)(MEMORY[0x263F8C2A8] + 8);
  *(void *)((char *)__str + *(void *)(*(void *)&__str[0] - 24)) = v36;
  *((void *)&__str[0] + 1) = 0;
  int v37 = (std::ios_base *)((char *)__str + *(void *)(*(void *)&__str[0] - 24));
  std::ios_base::init(v37, &__str[1]);
  uint64_t v38 = MEMORY[0x263F8C308] + 24;
  v37[1].__vftable = 0;
  v37[1].__fmtflags_ = -1;
  *(void *)&__str[0] = v38;
  *((void *)&__str[26] + 1) = v34;
  MEMORY[0x24C58B330](&__str[1]);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)__str + *(void *)(*(void *)&__str[0] - 24)), *(_DWORD *)((char *)&__str[2] + *(void *)(*(void *)&__str[0] - 24)) | 4);
  }
  long long v39 = (const std::ios_base *)((char *)__str + *(void *)(*(void *)&__str[0] - 24));
  if (!v39->__rdstate_)
  {
    std::ios_base::getloc(v39);
    unsigned int v42 = std::locale::use_facet(v113, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10);
    std::locale::~locale(v113);
    std::istream::getline();
    memset(v113, 170, 24);
    size_t v43 = strlen((const char *)&__dst);
    if (v43 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v44 = (std::locale::__imp *)v43;
    if (v43 >= 0x17)
    {
      uint64_t v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v43 | 7) != 0x17) {
        uint64_t v46 = v43 | 7;
      }
      uint64_t v47 = v46 + 1;
      long long v45 = (std::locale::__imp *)operator new(v46 + 1);
      v113[1].__locale_ = v44;
      v113[2].__locale_ = (std::locale::__imp *)(v47 | 0x8000000000000000);
      v113[0].__locale_ = v45;
    }
    else
    {
      HIBYTE(v113[2].__locale_) = v43;
      long long v45 = (std::locale::__imp *)v113;
      if (!v43)
      {
LABEL_56:
        *((unsigned char *)v44 + (void)v45) = 0;
        std::operator+<char>();
        *((unsigned char *)&__s.__r_.__value_.__s + 23) = 16;
        strcpy((char *)&__s, "\nStarting From: ");
        std::string::size_type v48 = std::string::append(&v108, (const std::string::value_type *)&__s, 0x10uLL);
        long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        v109.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v109.__r_.__value_.__l.__data_ = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        uint64_t v50 = std::string::append(&v109, (const std::string::value_type *)&__dst);
        long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        v110[2] = (std::locale)v50->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v110[0].__locale_ = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v110[2].__locale_) >= 0) {
          locale = (const std::string::value_type *)v110;
        }
        else {
          locale = (const std::string::value_type *)v110[0].__locale_;
        }
        if (SHIBYTE(v110[2].__locale_) >= 0) {
          std::string::size_type locale_high = HIBYTE(v110[2].__locale_);
        }
        else {
          std::string::size_type locale_high = (std::string::size_type)v110[1].__locale_;
        }
        std::string::append(a4, locale, locale_high);
        if (SHIBYTE(v110[2].__locale_) < 0)
        {
          operator delete(v110[0].__locale_);
          if ((SHIBYTE(v109.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_64:
            if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_65;
            }
            goto LABEL_125;
          }
        }
        else if ((SHIBYTE(v109.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_64;
        }
        operator delete(v109.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_65:
          if ((SHIBYTE(v108.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_66;
          }
LABEL_126:
          operator delete(v108.__r_.__value_.__l.__data_);
LABEL_66:
          std::ios_base::getloc((const std::ios_base *)((char *)__str + *(void *)(*(void *)&__str[0] - 24)));
          std::string::size_type v54 = std::locale::use_facet(v110, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v54->__vftable[2].~facet_0)(v54, 10);
          std::locale::~locale(v110);
          std::istream::getline();
          memset(v110, 170, 24);
          size_t v55 = strlen((const char *)&__dst);
          if (v55 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          long long v56 = (std::locale::__imp *)v55;
          if (v55 >= 0x17)
          {
            uint64_t v58 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v55 | 7) != 0x17) {
              uint64_t v58 = v55 | 7;
            }
            uint64_t v59 = v58 + 1;
            unint64_t v57 = (std::locale::__imp *)operator new(v58 + 1);
            v110[1].__locale_ = v56;
            v110[2].__locale_ = (std::locale::__imp *)(v59 | 0x8000000000000000);
            v110[0].__locale_ = v57;
          }
          else
          {
            HIBYTE(v110[2].__locale_) = v55;
            unint64_t v57 = (std::locale::__imp *)v110;
            if (!v55)
            {
LABEL_74:
              *((unsigned char *)v56 + (void)v57) = 0;
              *((unsigned char *)&__s.__r_.__value_.__s + 23) = 15;
              strcpy((char *)&__s, "\nSize (Bytes): ");
              uint64_t v60 = std::string::append(&__s, (const std::string::value_type *)&__dst);
              long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
              v108.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v61;
              v60->__r_.__value_.__l.__size_ = 0;
              v60->__r_.__value_.__r.__words[2] = 0;
              v60->__r_.__value_.__r.__words[0] = 0;
              char v106 = 1;
              strcpy(v105, "\n");
              std::string::size_type v62 = std::string::append(&v108, v105, 1uLL);
              long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
              v109.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v109.__r_.__value_.__l.__data_ = v63;
              v62->__r_.__value_.__l.__size_ = 0;
              v62->__r_.__value_.__r.__words[2] = 0;
              v62->__r_.__value_.__r.__words[0] = 0;
              if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v64 = &v109;
              }
              else {
                std::string::size_type v64 = (std::string *)v109.__r_.__value_.__r.__words[0];
              }
              if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type size = HIBYTE(v109.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type size = v109.__r_.__value_.__l.__size_;
              }
              std::string::append(a4, (const std::string::value_type *)v64, size);
              if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v109.__r_.__value_.__l.__data_);
                if ((v106 & 0x80000000) == 0)
                {
LABEL_82:
                  if ((SHIBYTE(v108.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                    goto LABEL_83;
                  }
                  goto LABEL_129;
                }
              }
              else if ((v106 & 0x80000000) == 0)
              {
                goto LABEL_82;
              }
              operator delete(*(void **)v105);
              if ((SHIBYTE(v108.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_83:
                if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_84;
                }
LABEL_130:
                operator delete(__s.__r_.__value_.__l.__data_);
LABEL_84:
                uint64_t v66 = a1;
                if (!std::filebuf::close()) {
                  std::ios_base::clear((std::ios_base *)((char *)__str + *(void *)(*(void *)&__str[0] - 24)), *(_DWORD *)((char *)&__str[2] + *(void *)(*(void *)&__str[0] - 24)) | 4);
                }
                if (SHIBYTE(v112[2]) >= 0) {
                  size_t v68 = (const std::__fs::filesystem::path *)v112;
                }
                else {
                  size_t v68 = (const std::__fs::filesystem::path *)v112[0];
                }
                if (remove(v68, v67))
                {
                  if (SHIBYTE(v112[2]) >= 0) {
                    int v69 = v112;
                  }
                  else {
                    int v69 = (void **)v112[0];
                  }
                  unlink((const char *)v69);
                }
                int v70 = *((char *)a3 + 23);
                if (v70 >= 0) {
                  size_t v71 = *((unsigned __int8 *)a3 + 23);
                }
                else {
                  size_t v71 = (size_t)a3[1];
                }
                int v72 = SHIBYTE(__p[2]);
                if (SHIBYTE(__p[2]) >= 0) {
                  size_t v73 = HIBYTE(__p[2]);
                }
                else {
                  size_t v73 = (size_t)__p[1];
                }
                unint64_t v74 = v73 + v71;
                memset(&v109, 170, sizeof(v109));
                if (v73 + v71 > 0x7FFFFFFFFFFFFFF7) {
                  std::string::__throw_length_error[abi:ne180100]();
                }
                if (v74 > 0x16)
                {
                  uint64_t v81 = (v74 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v74 | 7) != 0x17) {
                    uint64_t v81 = v74 | 7;
                  }
                  uint64_t v82 = v81 + 1;
                  uint64_t v75 = operator new(v81 + 1);
                  v109.__r_.__value_.__l.__size_ = v73 + v71;
                  v109.__r_.__value_.__r.__words[2] = v82 | 0x8000000000000000;
                  v109.__r_.__value_.__r.__words[0] = (std::string::size_type)v75;
                  if (!v71)
                  {
LABEL_107:
                    if (v73)
                    {
                      if (v72 >= 0) {
                        unint64_t v77 = __p;
                      }
                      else {
                        unint64_t v77 = (void **)__p[0];
                      }
                      memmove(&v75[v71], v77, v73);
                    }
                    v75[v71 + v73] = 0;
                    if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      std::string::size_type v78 = &v109;
                    }
                    else {
                      std::string::size_type v78 = (std::string *)v109.__r_.__value_.__r.__words[0];
                    }
                    int v79 = chmod((const char *)v78, 0x1A4u);
                    uint64_t v35 = (void *)MEMORY[0x263F8C2A8];
                    BOOL v41 = v79 == 0;
                    if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
                    {
                      operator delete(v109.__r_.__value_.__l.__data_);
                      uint64_t v80 = *v98;
                      if (*v98)
                      {
LABEL_117:
                        *((unsigned char *)&v104.__r_.__value_.__s + 23) = 0;
                        v104.__r_.__value_.__s.__data_[0] = 0;
                        if (SHIBYTE(v113[2].__locale_) < 0)
                        {
                          std::string::__init_copy_ctor_external(&v102, (const std::string::value_type *)v113[0].__locale_, (std::string::size_type)v113[1].__locale_);
                        }
                        else
                        {
                          *(_OWORD *)&v102.__r_.__value_.__l.__data_ = *(_OWORD *)&v113[0].__locale_;
                          v102.__r_.__value_.__r.__words[2] = (std::string::size_type)v113[2];
                        }
                        Timestamp::Timestamp((uint64_t **)&v103, (char *)&v102, 9, 0);
                        if (SHIBYTE(__p[2]) >= 0) {
                          std::string::size_type v84 = __p;
                        }
                        else {
                          std::string::size_type v84 = (void **)__p[0];
                        }
                        size_t v85 = strlen((const char *)v84);
                        if (v85 > 0x7FFFFFFFFFFFFFF7) {
                          std::string::__throw_length_error[abi:ne180100]();
                        }
                        std::string::size_type v86 = v85;
                        if (v85 >= 0x17)
                        {
                          uint64_t v88 = (v85 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v85 | 7) != 0x17) {
                            uint64_t v88 = v85 | 7;
                          }
                          uint64_t v89 = v88 + 1;
                          uint64_t v87 = (std::string *)operator new(v88 + 1);
                          v101.__r_.__value_.__l.__size_ = v86;
                          v101.__r_.__value_.__r.__words[2] = v89 | 0x8000000000000000;
                          v101.__r_.__value_.__r.__words[0] = (std::string::size_type)v87;
                        }
                        else
                        {
                          *((unsigned char *)&v101.__r_.__value_.__s + 23) = v85;
                          uint64_t v87 = &v101;
                          if (!v85)
                          {
LABEL_147:
                            v87->__r_.__value_.__s.__data_[v86] = 0;
                            if (SHIBYTE(v110[2].__locale_) >= 0) {
                              std::vector<std::ssub_match>::pointer v90 = (const char *)v110;
                            }
                            else {
                              std::vector<std::ssub_match>::pointer v90 = (const char *)v110[0].__locale_;
                            }
                            size_t v91 = strlen(v90);
                            if (v91 > 0x7FFFFFFFFFFFFFF7) {
                              std::string::__throw_length_error[abi:ne180100]();
                            }
                            std::string::size_type v92 = v91;
                            if (v91 >= 0x17)
                            {
                              uint64_t v94 = (v91 & 0xFFFFFFFFFFFFFFF8) + 8;
                              if ((v91 | 7) != 0x17) {
                                uint64_t v94 = v91 | 7;
                              }
                              uint64_t v95 = v94 + 1;
                              int v93 = (std::string *)operator new(v94 + 1);
                              v100.__r_.__value_.__l.__size_ = v92;
                              v100.__r_.__value_.__r.__words[2] = v95 | 0x8000000000000000;
                              v100.__r_.__value_.__r.__words[0] = (std::string::size_type)v93;
                            }
                            else
                            {
                              *((unsigned char *)&v100.__r_.__value_.__s + 23) = v91;
                              int v93 = &v100;
                              if (!v91)
                              {
LABEL_158:
                                v93->__r_.__value_.__s.__data_[v92] = 0;
                                abm::trace::TraceInfo::push(v80, 13, &v104, &v103, &v101, &v100);
                                if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
                                {
                                  operator delete(v100.__r_.__value_.__l.__data_);
                                  if ((SHIBYTE(v101.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                  {
LABEL_160:
                                    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v103, *((void **)&v103 + 1));
                                    if ((SHIBYTE(v102.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                                      goto LABEL_161;
                                    }
                                    goto LABEL_171;
                                  }
                                }
                                else if ((SHIBYTE(v101.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                {
                                  goto LABEL_160;
                                }
                                operator delete(v101.__r_.__value_.__l.__data_);
                                std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v103, *((void **)&v103 + 1));
                                if ((SHIBYTE(v102.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                {
LABEL_161:
                                  if ((SHIBYTE(v104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                                    goto LABEL_162;
                                  }
                                  goto LABEL_172;
                                }
LABEL_171:
                                operator delete(v102.__r_.__value_.__l.__data_);
                                if ((SHIBYTE(v104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                {
LABEL_162:
                                  if ((SHIBYTE(v110[2].__locale_) & 0x80000000) == 0) {
                                    goto LABEL_163;
                                  }
                                  goto LABEL_173;
                                }
LABEL_172:
                                operator delete(v104.__r_.__value_.__l.__data_);
                                if ((SHIBYTE(v110[2].__locale_) & 0x80000000) == 0)
                                {
LABEL_163:
                                  if ((SHIBYTE(v113[2].__locale_) & 0x80000000) == 0) {
                                    goto LABEL_164;
                                  }
LABEL_174:
                                  operator delete(v113[0].__locale_);
                                  goto LABEL_164;
                                }
LABEL_173:
                                operator delete(v110[0].__locale_);
                                if ((SHIBYTE(v113[2].__locale_) & 0x80000000) == 0) {
                                  goto LABEL_164;
                                }
                                goto LABEL_174;
                              }
                            }
                            memmove(v93, v90, v92);
                            goto LABEL_158;
                          }
                        }
                        memmove(v87, v84, v86);
                        goto LABEL_147;
                      }
                    }
                    else
                    {
                      uint64_t v80 = *v98;
                      if (*v98) {
                        goto LABEL_117;
                      }
                    }
                    size_t v83 = *(NSObject **)(a1 + 40);
                    if (os_log_type_enabled(*(os_log_t *)(v66 + 40), OS_LOG_TYPE_DEFAULT))
                    {
                      LOWORD(v109.__r_.__value_.__l.__data_) = 0;
                      _os_log_impl(&dword_248AFD000, v83, OS_LOG_TYPE_DEFAULT, "#I No trace info object is given!", (uint8_t *)&v109, 2u);
                      if ((SHIBYTE(v110[2].__locale_) & 0x80000000) == 0) {
                        goto LABEL_163;
                      }
                      goto LABEL_173;
                    }
                    goto LABEL_162;
                  }
                }
                else
                {
                  memset(&v109, 0, sizeof(v109));
                  uint64_t v75 = &v109;
                  *((unsigned char *)&v109.__r_.__value_.__s + 23) = v73 + v71;
                  if (!v71) {
                    goto LABEL_107;
                  }
                }
                if (v70 >= 0) {
                  long long v76 = a3;
                }
                else {
                  long long v76 = *a3;
                }
                memmove(v75, v76, v71);
                goto LABEL_107;
              }
LABEL_129:
              operator delete(v108.__r_.__value_.__l.__data_);
              if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_84;
              }
              goto LABEL_130;
            }
          }
          memcpy(v57, &__dst, (size_t)v56);
          goto LABEL_74;
        }
LABEL_125:
        operator delete(__s.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v108.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_66;
        }
        goto LABEL_126;
      }
    }
    memcpy(v45, &__dst, (size_t)v44);
    goto LABEL_56;
  }
  size_t v40 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
  {
    int v97 = v112;
    if (SHIBYTE(v112[2]) < 0) {
      int v97 = (void **)v112[0];
    }
    LODWORD(v113[0].__locale_) = 136315138;
    *(std::locale::__imp **)((char *)&v113[0].__locale_ + 4) = (std::locale::__imp *)v97;
    _os_log_error_impl(&dword_248AFD000, v40, OS_LOG_TYPE_ERROR, "File seems to have disappeared: %s", (uint8_t *)v113, 0xCu);
  }
  BOOL v41 = 0;
LABEL_164:
  *(void *)&__str[0] = *v35;
  *(void *)((char *)__str + *(void *)(*(void *)&__str[0] - 24)) = v35[3];
  MEMORY[0x24C58B340](&__str[1]);
  std::istream::~istream();
  MEMORY[0x24C58B5B0]((char *)&__str[26] + 8);
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v112[2]) & 0x80000000) == 0) {
      return v41;
    }
LABEL_168:
    operator delete(v112[0]);
    return v41;
  }
  if (SHIBYTE(v112[2]) < 0) {
    goto LABEL_168;
  }
  return v41;
}

void sub_248B41FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  if (a70 < 0) {
    operator delete(a65);
  }
  std::ifstream::~ifstream(&a72);
  if (a58 < 0) {
    operator delete(a53);
  }
  if (a64 < 0)
  {
    operator delete(a59);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void TraceFileCollection::getStatisticsAsDict_sync(TraceFileCollection *this@<X0>, xpc_object_t *a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  *a2 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  uint64_t v6 = MEMORY[0x263EF8708];
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v7 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x24C58BF40](v5) == v6)
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v7 = xpc_null_create();
LABEL_8:
  *a2 = v7;
LABEL_9:
  xpc_release(v5);
  if (MEMORY[0x24C58BF40](*a2) == v6)
  {
    unint64_t v9 = *((void *)this + 30);
    memset(&__p, 0, sizeof(__p));
    std::to_string(&v27, v9);
    std::string __p = v27;
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    xpc_object_t v11 = xpc_string_create((const char *)p_p);
    if (!v11) {
      xpc_object_t v11 = xpc_null_create();
    }
    xpc_dictionary_set_value(*a2, "AP Dropped Bytes", v11);
    xpc_object_t v12 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v12);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    unsigned int v13 = *((_DWORD *)this + 53);
    memset(&__p, 0, sizeof(__p));
    std::to_string(&v27, v13);
    std::string __p = v27;
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v14 = &__p;
    }
    else {
      uint64_t v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    xpc_object_t v15 = xpc_string_create((const char *)v14);
    if (!v15) {
      xpc_object_t v15 = xpc_null_create();
    }
    xpc_dictionary_set_value(*a2, "Max Memory File Count", v15);
    xpc_object_t v16 = xpc_null_create();
    xpc_release(v15);
    xpc_release(v16);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    unsigned int v17 = *((_DWORD *)this + 56);
    memset(&__p, 0, sizeof(__p));
    std::to_string(&v27, v17);
    std::string __p = v27;
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v18 = &__p;
    }
    else {
      size_t v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    xpc_object_t v19 = xpc_string_create((const char *)v18);
    if (!v19) {
      xpc_object_t v19 = xpc_null_create();
    }
    xpc_dictionary_set_value(*a2, "Applied Memory File Count", v19);
    xpc_object_t v20 = xpc_null_create();
    xpc_release(v19);
    xpc_release(v20);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    unsigned int v21 = *((_DWORD *)this + 58);
    memset(&__p, 0, sizeof(__p));
    std::to_string(&v27, v21);
    std::string __p = v27;
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      vm_size_t v22 = &__p;
    }
    else {
      vm_size_t v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    xpc_object_t v23 = xpc_string_create((const char *)v22);
    if (!v23) {
      xpc_object_t v23 = xpc_null_create();
    }
    xpc_dictionary_set_value(*a2, "Maximum Number of In Memory Files", v23);
    xpc_object_t v24 = xpc_null_create();
    xpc_release(v23);
    xpc_release(v24);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      long long v25 = *((void *)this + 5);
      if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
    }
    else
    {
      long long v25 = *((void *)this + 5);
      if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
    }
    xpc::object::to_string((uint64_t *)&v27, (xpc::object *)a2);
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v26 = &v27;
    }
    else {
      size_t v26 = (std::string *)v27.__r_.__value_.__r.__words[0];
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v26;
    _os_log_impl(&dword_248AFD000, v25, OS_LOG_TYPE_DEFAULT, "#I Trace File Collection Statistics: %s", (uint8_t *)&__p, 0xCu);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    int v8 = *((void *)this + 5);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v27.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_248AFD000, v8, OS_LOG_TYPE_ERROR, "Failed to create state dump dictionary", (uint8_t *)&v27, 2u);
    }
  }
}

void sub_248B42614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void *std::ofstream::~ofstream(void *a1)
{
  uint64_t v2 = MEMORY[0x263F8C2B0];
  uint64_t v3 = *MEMORY[0x263F8C2B0];
  *a1 = *MEMORY[0x263F8C2B0];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x24C58B340](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x24C58B5B0](a1 + 52);
  return a1;
}

uint64_t TraceFileCollection::getInMemoryRemaining(TraceFileCollection *this)
{
  uint64_t v6 = 0;
  xpc_object_t v7 = &v6;
  uint64_t v8 = 0x2000000000;
  int v9 = 0;
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 0x40000000;
  void v5[2] = ___ZNK19TraceFileCollection20getInMemoryRemainingEv_block_invoke;
  void v5[3] = &unk_26524EB20;
  v5[4] = &v6;
  v5[5] = this;
  size_t v10 = v5;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19TraceFileCollectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_90;
  void block[4] = (char *)this + 72;
  void block[5] = &v10;
  uint64_t v2 = (char *)this + 88;
  uint64_t v1 = *((void *)this + 11);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
  uint64_t v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void ___ZNK19TraceFileCollection20getInMemoryRemainingEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(v1 + 264);
  if (v2)
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(_DWORD *)(v2 + 68) - *(_DWORD *)(v2 + 64);
  }
  else
  {
    uint64_t v3 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)xpc_object_t v4 = 0;
      _os_log_error_impl(&dword_248AFD000, v3, OS_LOG_TYPE_ERROR, "No memory file!", v4, 2u);
    }
  }
}

void TraceFileCollection::setHistory(TraceFileCollection *this, int a2)
{
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 0x40000000;
  void v4[2] = ___ZN19TraceFileCollection10setHistoryEi_block_invoke;
  v4[3] = &__block_descriptor_tmp_20;
  v4[4] = this;
  int v5 = a2;
  uint64_t v6 = v4;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19TraceFileCollectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_90;
  void block[4] = (char *)this + 72;
  void block[5] = &v6;
  uint64_t v3 = (char *)this + 88;
  uint64_t v2 = *((void *)this + 11);
  if (*((void *)v3 + 1)) {
    dispatch_async_and_wait(v2, block);
  }
  else {
    dispatch_sync(v2, block);
  }
}

void ___ZN19TraceFileCollection10setHistoryEi_block_invoke(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = (*(_DWORD *)(a1 + 40) << 10) / (*(_DWORD *)(v1 + 216) >> 10);
  uint64_t v3 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(v1 + 208);
    v5[0] = 67109376;
    v5[1] = v2;
    __int16 v6 = 1024;
    int v7 = v4;
    _os_log_impl(&dword_248AFD000, v3, OS_LOG_TYPE_DEFAULT, "#I setHistory: Adjusting max file count as %u from the history size, %u", (uint8_t *)v5, 0xEu);
  }
  *(_DWORD *)(v1 + 208) = v2;
}

void TraceFileCollection::setMaxMemoryFileCount(TraceFileCollection *this, int a2)
{
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 0x40000000;
  void v4[2] = ___ZN19TraceFileCollection21setMaxMemoryFileCountEj_block_invoke;
  v4[3] = &__block_descriptor_tmp_21_0;
  v4[4] = this;
  int v5 = a2;
  __int16 v6 = v4;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19TraceFileCollectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_90;
  void block[4] = (char *)this + 72;
  void block[5] = &v6;
  uint64_t v3 = (char *)this + 88;
  int v2 = *((void *)this + 11);
  if (*((void *)v3 + 1)) {
    dispatch_async_and_wait(v2, block);
  }
  else {
    dispatch_sync(v2, block);
  }
}

void ___ZN19TraceFileCollection21setMaxMemoryFileCountEj_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(TraceFileCollection **)(a1 + 32);
  *((_DWORD *)v1 + 53) = *(_DWORD *)(a1 + 40);
  TraceFileCollection::registerForMemoryPressure_sync(v1);
}

void TraceFileCollection::setFileSize(TraceFileCollection *this, int a2)
{
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 0x40000000;
  void v4[2] = ___ZN19TraceFileCollection11setFileSizeEj_block_invoke;
  v4[3] = &__block_descriptor_tmp_22;
  v4[4] = this;
  int v5 = a2;
  __int16 v6 = v4;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19TraceFileCollectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_90;
  void block[4] = (char *)this + 72;
  void block[5] = &v6;
  uint64_t v3 = (char *)this + 88;
  int v2 = *((void *)this + 11);
  if (*((void *)v3 + 1)) {
    dispatch_async_and_wait(v2, block);
  }
  else {
    dispatch_sync(v2, block);
  }
}

void ___ZN19TraceFileCollection11setFileSizeEj_block_invoke(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 32);
  unsigned int v2 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v1 + 216) = v2;
  uint64_t v3 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = v2 >> 10;
    _os_log_impl(&dword_248AFD000, v3, OS_LOG_TYPE_DEFAULT, "#I Setting file size for trace collection: %u KB", (uint8_t *)v4, 8u);
  }
}

uint64_t TraceFileCollection::getFileSize(TraceFileCollection *this)
{
  uint64_t v6 = 0;
  int v7 = &v6;
  uint64_t v8 = 0x2000000000;
  int v9 = 0;
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 0x40000000;
  _DWORD v5[2] = ___ZNK19TraceFileCollection11getFileSizeEv_block_invoke;
  void v5[3] = &unk_26524EBA8;
  v5[4] = &v6;
  v5[5] = this;
  size_t v10 = v5;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19TraceFileCollectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_90;
  void block[4] = (char *)this + 72;
  void block[5] = &v10;
  unsigned int v2 = (char *)this + 88;
  uint64_t v1 = *((void *)this + 11);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
  uint64_t v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t ___ZNK19TraceFileCollection11getFileSizeEv_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_DWORD *)(*(void *)(result + 40) + 216);
  return result;
}

uint64_t TraceFileCollection::getNumFilesCaptured(TraceFileCollection *this)
{
  uint64_t v6 = 0;
  int v7 = &v6;
  uint64_t v8 = 0x2000000000;
  int v9 = 0;
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 0x40000000;
  _DWORD v5[2] = ___ZNK19TraceFileCollection19getNumFilesCapturedEv_block_invoke;
  void v5[3] = &unk_26524EBD0;
  v5[4] = &v6;
  v5[5] = this;
  size_t v10 = v5;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19TraceFileCollectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_90;
  void block[4] = (char *)this + 72;
  void block[5] = &v10;
  unsigned int v2 = (char *)this + 88;
  uint64_t v1 = *((void *)this + 11);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
  uint64_t v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t ___ZNK19TraceFileCollection19getNumFilesCapturedEv_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_DWORD *)(*(void *)(result + 40) + 260)
                                                                  - *(_DWORD *)(*(void *)(result + 40) + 256)
                                                                  + 1;
  return result;
}

BOOL TraceFileCollection::allowNewMemoryFile_sync(TraceFileCollection *this)
{
  if (!*((_DWORD *)this + 56)) {
    return 1;
  }
  unsigned int v1 = atomic_load((unsigned int *)this + 57);
  return v1 < *((_DWORD *)this + 56);
}

unint64_t TraceFileCollection::getDataFileName_sync@<X0>(TraceFileCollection *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  int v4 = (char *)this + 160;
  if (*((char *)this + 183) < 0) {
    int v4 = *(const char **)v4;
  }
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __str = v5;
  long long v12 = v5;
  snprintf(__str, 0x20uLL, "0x%08X%s", a2, v4);
  unint64_t result = strlen(__str);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v7 = result;
  if (result >= 0x17)
  {
    uint64_t v8 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v8 = result | 7;
    }
    uint64_t v9 = v8 + 1;
    size_t v10 = operator new(v8 + 1);
    a3[1] = v7;
    a3[2] = v9 | 0x8000000000000000;
    *a3 = v10;
    a3 = v10;
  }
  else
  {
    *((unsigned char *)a3 + 23) = result;
    if (!result) {
      goto LABEL_11;
    }
  }
  unint64_t result = (unint64_t)memcpy(a3, __str, v7);
LABEL_11:
  *((unsigned char *)a3 + v7) = 0;
  return result;
}

void TraceFileCollection::archiveMemoryFile_sync(dispatch_group_t *this)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  dispatch_group_enter(this[41]);
  int v2 = *((_DWORD *)this + 65);
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __str = v3;
  *(_OWORD *)&char __str[16] = v3;
  snprintf(__str, 0x20uLL, "0x%08X%s", v2, ".meta");
  size_t v4 = strlen(__str);
  if (v4 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4;
  p_dst = &__dst;
  if (v4) {
LABEL_8:
  }
    memcpy(p_dst, __str, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  int v9 = *((char *)this + 207);
  if (v9 >= 0) {
    size_t v10 = *((unsigned __int8 *)this + 207);
  }
  else {
    size_t v10 = (size_t)this[24];
  }
  int v11 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = __dst.__r_.__value_.__l.__size_;
  }
  unint64_t v13 = size + v10;
  memset(&v49, 170, sizeof(v49));
  if (size + v10 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v13 <= 0x16)
  {
    memset(&v49, 0, sizeof(v49));
    uint64_t v14 = &v49;
    *((unsigned char *)&v49.__r_.__value_.__s + 23) = size + v10;
    if (!v10) {
      goto LABEL_22;
    }
    goto LABEL_18;
  }
  uint64_t v28 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v13 | 7) != 0x17) {
    uint64_t v28 = v13 | 7;
  }
  uint64_t v29 = v28 + 1;
  uint64_t v14 = (std::string *)operator new(v28 + 1);
  v49.__r_.__value_.__l.__size_ = size + v10;
  v49.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
  v49.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
  if (v10)
  {
LABEL_18:
    if (v9 >= 0) {
      xpc_object_t v15 = (char *)(this + 23);
    }
    else {
      xpc_object_t v15 = (char *)this[23];
    }
    memmove(v14, v15, v10);
  }
LABEL_22:
  xpc_object_t v16 = (char *)v14 + v10;
  if (size)
  {
    if (v11 >= 0) {
      unsigned int v17 = &__dst;
    }
    else {
      unsigned int v17 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    memmove(v16, v17, size);
  }
  v16[size] = 0;
  if (v11 < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int isa = (int)this[33][8].isa;
  if (*((unsigned char *)this + 105)) {
    isa += *((_DWORD *)this + 36) - *((_DWORD *)this + 34);
  }
  memset(__str, 170, 24);
  Timestamp::asString((uint64_t)(this + 35), 0, 1);
  dispatch_group_t v20 = this[33];
  dispatch_group_t v19 = this[34];
  dispatch_group_t v46 = v20;
  uint64_t v47 = (std::__shared_weak_count *)v19;
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)&v19[1], 1uLL, memory_order_relaxed);
  }
  dispatch_group_t v22 = this[9];
  unsigned int v21 = (std::__shared_weak_count *)this[10];
  dispatch_group_t v44 = v22;
  if (!v21 || (xpc_object_t v23 = std::__shared_weak_count::lock(v21), (v45 = v23) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v24 = v23;
  long long v25 = this + 33;
  memset(&__dst, 170, sizeof(__dst));
  dispatch_group_t v26 = this[33];
  if (SHIBYTE(v26[3].isa) < 0)
  {
    std::string::__init_copy_ctor_external(&__dst, (const std::string::value_type *)v26[1].isa, (std::string::size_type)v26[2].isa);
  }
  else
  {
    long long v27 = *(_OWORD *)&v26[1].isa;
    __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)v26[3].isa;
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v27;
  }
  uint64_t v30 = this[40];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZN19TraceFileCollection22archiveMemoryFile_syncEv_block_invoke;
  block[3] = &__block_descriptor_tmp_27_0;
  void block[4] = this;
  void block[5] = v22;
  int v37 = v24;
  atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  dispatch_group_t v38 = v20;
  long long v39 = (std::__shared_weak_count *)v19;
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)&v19[1], 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v40, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  }
  else {
    std::string v40 = __dst;
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v41, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
  }
  else {
    std::string v41 = v49;
  }
  if (__str[23] < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)__str, *(std::string::size_type *)&__str[8]);
  }
  else {
    std::string __p = *(std::string *)__str;
  }
  int v43 = isa;
  dispatch_async(v30, block);
  uint64_t v31 = (std::__shared_weak_count *)this[34];
  void *v25 = 0;
  v25[1] = 0;
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_56:
      if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_57;
      }
      goto LABEL_62;
    }
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_56;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_57:
    if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_58;
    }
    goto LABEL_63;
  }
LABEL_62:
  operator delete(v41.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_58:
    uint64_t v32 = v39;
    if (!v39) {
      goto LABEL_65;
    }
    goto LABEL_64;
  }
LABEL_63:
  operator delete(v40.__r_.__value_.__l.__data_);
  uint64_t v32 = v39;
  if (!v39) {
    goto LABEL_65;
  }
LABEL_64:
  if (!atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
    long long v33 = v37;
    if (!v37) {
      goto LABEL_67;
    }
    goto LABEL_66;
  }
LABEL_65:
  long long v33 = v37;
  if (!v37) {
    goto LABEL_67;
  }
LABEL_66:
  if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_69;
    }
    goto LABEL_68;
  }
LABEL_67:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
LABEL_68:
  }
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_69:
  uint64_t v34 = v45;
  if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
    uint64_t v35 = v47;
    if (!v47)
    {
LABEL_73:
      if ((__str[23] & 0x80000000) == 0) {
        goto LABEL_74;
      }
      goto LABEL_83;
    }
  }
  else
  {
    uint64_t v35 = v47;
    if (!v47) {
      goto LABEL_73;
    }
  }
  if (atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_73;
  }
  ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
  std::__shared_weak_count::__release_weak(v35);
  if ((__str[23] & 0x80000000) == 0)
  {
LABEL_74:
    if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_84:
    operator delete(v49.__r_.__value_.__l.__data_);
    return;
  }
LABEL_83:
  operator delete(*(void **)__str);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_84;
  }
}

void sub_248B436FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,char a39)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v39 + 56);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v39 + 40);
  if (*(char *)(v40 - 169) < 0) {
    operator delete(*(void **)(v40 - 192));
  }
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  if (*(char *)(v40 - 121) < 0) {
    operator delete(*(void **)(v40 - 144));
  }
  if (*(char *)(v40 - 145) < 0) {
    operator delete(*(void **)(v40 - 168));
  }
  _Unwind_Resume(a1);
}

unint64_t TraceFileCollection::getMetaDataFileName_sync@<X0>(int a1@<W1>, void *a2@<X8>)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __str = v4;
  long long v11 = v4;
  snprintf(__str, 0x20uLL, "0x%08X%s", a1, ".meta");
  unint64_t result = strlen(__str);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v6 = result;
  if (result >= 0x17)
  {
    uint64_t v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v7 = result | 7;
    }
    uint64_t v8 = v7 + 1;
    int v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result) {
      goto LABEL_9;
    }
  }
  unint64_t result = (unint64_t)memcpy(a2, __str, v6);
LABEL_9:
  *((unsigned char *)a2 + v6) = 0;
  return result;
}

uint64_t ___ZN19TraceFileCollection10clear_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb_block_invoke(uint64_t a1)
{
  return support::fs::removeDir((const char *)(a1 + 32));
}

void __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  int v2 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v3 = *(_OWORD *)(a2 + 32);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a2 + 48);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
}

uint64_t ___ZN19TraceFileCollection22archiveMemoryFile_syncEv_block_invoke(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 56);
  if (*(unsigned char *)(v2 + 105))
  {
    if ((TraceFile::writeToFile(v3, (char **)(v2 + 136)) & 1) == 0)
    {
      long long v4 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        std::string::size_type v5 = (void *)(a1 + 72);
        if (*(char *)(a1 + 95) < 0) {
          std::string::size_type v5 = (void *)*v5;
        }
        *(_DWORD *)std::string buf = 136315138;
        *(void *)&uint8_t buf[4] = v5;
        _os_log_error_impl(&dword_248AFD000, v4, OS_LOG_TYPE_ERROR, "Error on writing a file: %s", buf, 0xCu);
      }
    }
  }
  else
  {
    memset(buf, 0, 24);
    TraceFile::writeToFile(v3, (char **)buf);
  }
  memset(&buf[8], 170, 0x230uLL);
  size_t v6 = (void *)(a1 + 96);
  uint64_t v7 = MEMORY[0x263F8C310] + 64;
  *(void *)&buf[416] = MEMORY[0x263F8C310] + 64;
  uint64_t v8 = (void *)MEMORY[0x263F8C2B0];
  uint64_t v9 = *(void *)(MEMORY[0x263F8C2B0] + 16);
  *(void *)std::string buf = *(void *)(MEMORY[0x263F8C2B0] + 8);
  *(void *)&buf[*(void *)(*(void *)buf - 24)] = v9;
  size_t v10 = (std::ios_base *)&buf[*(void *)(*(void *)buf - 24)];
  std::ios_base::init(v10, &buf[8]);
  uint64_t v11 = MEMORY[0x263F8C310] + 24;
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  *(void *)std::string buf = v11;
  *(void *)&buf[416] = v7;
  MEMORY[0x24C58B330](&buf[8]);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)&buf[*(void *)(*(void *)buf - 24)], *(_DWORD *)&buf[*(void *)(*(void *)buf - 24) + 32] | 4);
  }
  if (*(_DWORD *)&buf[*(void *)(*(void *)buf - 24) + 32])
  {
    uint64_t v12 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a1 + 119) < 0) {
        size_t v6 = (void *)*v6;
      }
      int v21 = 136315138;
      dispatch_group_t v22 = v6;
      _os_log_error_impl(&dword_248AFD000, v12, OS_LOG_TYPE_ERROR, "Failed to open meta data file: %s", (uint8_t *)&v21, 0xCu);
    }
  }
  else
  {
    int v13 = *(char *)(a1 + 143);
    if (v13 >= 0) {
      uint64_t v14 = a1 + 120;
    }
    else {
      uint64_t v14 = *(void *)(a1 + 120);
    }
    if (v13 >= 0) {
      uint64_t v15 = *(unsigned __int8 *)(a1 + 143);
    }
    else {
      uint64_t v15 = *(void *)(a1 + 128);
    }
    xpc_object_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, v14, v15);
    std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24)));
    unsigned int v17 = std::locale::use_facet((const std::locale *)&v21, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
    std::locale::~locale((std::locale *)&v21);
    std::ostream::put();
    std::ostream::flush();
    size_t v18 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24)));
    dispatch_group_t v19 = std::locale::use_facet((const std::locale *)&v21, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
    std::locale::~locale((std::locale *)&v21);
    std::ostream::put();
    std::ostream::flush();
    std::ostream::flush();
    if (!std::filebuf::close()) {
      std::ios_base::clear((std::ios_base *)&buf[*(void *)(*(void *)buf - 24)], *(_DWORD *)&buf[*(void *)(*(void *)buf - 24) + 32] | 4);
    }
  }
  atomic_fetch_add((atomic_uint *volatile)(v2 + 228), 0xFFFFFFFF);
  dispatch_group_leave(*(dispatch_group_t *)(v2 + 328));
  *(void *)std::string buf = *v8;
  *(void *)&buf[*(void *)(*(void *)buf - 24)] = v8[3];
  MEMORY[0x24C58B340](&buf[8]);
  std::ostream::~ostream();
  return MEMORY[0x24C58B5B0](&buf[416]);
}

void sub_248B43E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

void sub_248B43E38(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x24C58B5B0](v1);
  _Unwind_Resume(a1);
}

void sub_248B43E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::ofstream::~ofstream((uint64_t *)va);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c47_ZTSNSt3__110shared_ptrI19TraceFileCollectionEE56c36_ZTSNSt3__110shared_ptrI9TraceFileEE72c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE96c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE120c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  std::string::size_type v4 = *(void *)(a2 + 48);
  a1[1].__r_.__value_.__r.__words[2] = *(void *)(a2 + 40);
  a1[2].__r_.__value_.__r.__words[0] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::size_type v5 = *(void *)(a2 + 64);
  a1[2].__r_.__value_.__l.__size_ = *(void *)(a2 + 56);
  a1[2].__r_.__value_.__r.__words[2] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(a1 + 3, *(const std::string::value_type **)(a2 + 72), *(void *)(a2 + 80));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 72);
    a1[3].__r_.__value_.__r.__words[2] = *(void *)(a2 + 88);
    *(_OWORD *)&a1[3].__r_.__value_.__l.__data_ = v6;
  }
  if (*(char *)(a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(a1 + 4, *(const std::string::value_type **)(a2 + 96), *(void *)(a2 + 104));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 96);
    a1[4].__r_.__value_.__r.__words[2] = *(void *)(a2 + 112);
    *(_OWORD *)&a1[4].__r_.__value_.__l.__data_ = v7;
  }
  uint64_t v8 = a1 + 5;
  if (*(char *)(a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a2 + 120), *(void *)(a2 + 128));
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 120);
    a1[5].__r_.__value_.__r.__words[2] = *(void *)(a2 + 136);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
}

void sub_248B43F98(_Unwind_Exception *a1)
{
  if (*(char *)(v3 + 119) < 0)
  {
    operator delete(*v5);
    if ((*(char *)(v3 + 95) & 0x80000000) == 0)
    {
LABEL_3:
      std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v2);
      std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v1);
      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v3 + 95) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v4);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_248B44004(_Unwind_Exception *a1)
{
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c47_ZTSNSt3__110shared_ptrI19TraceFileCollectionEE56c36_ZTSNSt3__110shared_ptrI9TraceFileEE72c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE96c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE120c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 143) < 0)
  {
    operator delete(*(void **)(a1 + 120));
    if ((*(char *)(a1 + 119) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 95) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 96));
  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
LABEL_4:
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v2) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(*(void **)(a1 + 72));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v2) {
    goto LABEL_10;
  }
LABEL_9:
  if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v3) {
      return;
    }
    goto LABEL_11;
  }
LABEL_10:
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v3) {
    return;
  }
LABEL_11:
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void ___ZN19TraceFileCollection30registerForMemoryPressure_syncEv_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    std::string::size_type v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      std::string::size_type v5 = v4;
      if (a1[5])
      {
        long long v6 = *(NSObject **)(v3 + 248);
        uintptr_t data = dispatch_source_get_data(v6);
        unsigned int v8 = *(_DWORD *)(v3 + 212);
        *(_DWORD *)(v3 + 224) = v8;
        if (data == 16)
        {
          long long v9 = *(NSObject **)(v3 + 40);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t v12 = 0;
            _os_log_impl(&dword_248AFD000, v9, OS_LOG_TYPE_DEFAULT, "#N Process memory limit warning", v12, 2u);
            unsigned int v8 = *(_DWORD *)(v3 + 212);
            long long v6 = *(NSObject **)(v3 + 248);
          }
          *(_DWORD *)(v3 + 224) = v8 >> 1;
          if (v6)
          {
            size_t v10 = *(NSObject **)(v3 + 40);
            if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)std::string buf = 0;
              _os_log_impl(&dword_248AFD000, v10, OS_LOG_TYPE_DEFAULT, "#I De-register from memory pressure notifications", buf, 2u);
              long long v6 = *(NSObject **)(v3 + 248);
            }
            dispatch_source_cancel(v6);
            uint64_t v11 = *(NSObject **)(v3 + 248);
            *(void *)(v3 + 248) = 0;
            if (v11) {
              dispatch_release(v11);
            }
          }
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

uint64_t __copy_helper_block_e8_40c44_ZTSNSt3__18weak_ptrI19TraceFileCollectionEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c44_ZTSNSt3__18weak_ptrI19TraceFileCollectionEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t TraceFileCollection::getNewestFileNumber(TraceFileCollection *this)
{
  uint64_t v6 = 0;
  long long v7 = &v6;
  uint64_t v8 = 0x2000000000;
  int v9 = 0;
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 0x40000000;
  _DWORD v5[2] = ___ZNK19TraceFileCollection19getNewestFileNumberEv_block_invoke;
  void v5[3] = &unk_26524EBF8;
  v5[4] = &v6;
  v5[5] = this;
  size_t v10 = v5;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19TraceFileCollectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_90;
  void block[4] = (char *)this + 72;
  void block[5] = &v10;
  uint64_t v2 = (char *)this + 88;
  uint64_t v1 = *((void *)this + 11);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
  uint64_t v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t ___ZNK19TraceFileCollection19getNewestFileNumberEv_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_DWORD *)(*(void *)(result + 40) + 260);
  return result;
}

uint64_t TraceFileCollection::Parameters::desc(TraceFileCollection::Parameters *this)
{
  unint64_t v27 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v26[7] = v2;
  v26[8] = v2;
  v26[5] = v2;
  v26[6] = v2;
  v26[3] = v2;
  _OWORD v26[4] = v2;
  v26[1] = v2;
  void v26[2] = v2;
  v26[0] = v2;
  long long v24 = v2;
  long long v25 = v2;
  v22[3] = v2;
  *(_OWORD *)xpc_object_t v23 = v2;
  v22[1] = v2;
  long long v22[2] = v2;
  v22[0] = v2;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"extension:", 10);
  int v4 = *((char *)this + 79);
  if (v4 >= 0) {
    std::string::size_type v5 = (char *)this + 56;
  }
  else {
    std::string::size_type v5 = (char *)*((void *)this + 7);
  }
  if (v4 >= 0) {
    uint64_t v6 = *((unsigned __int8 *)this + 79);
  }
  else {
    uint64_t v6 = *((void *)this + 8);
  }
  long long v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v5, v6);
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)",scratch path:", 14);
  int v9 = *((char *)this + 103);
  if (v9 >= 0) {
    size_t v10 = (char *)this + 80;
  }
  else {
    size_t v10 = (char *)*((void *)this + 10);
  }
  if (v9 >= 0) {
    uint64_t v11 = *((unsigned __int8 *)this + 103);
  }
  else {
    uint64_t v11 = *((void *)this + 11);
  }
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v10, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)",max history:", 13);
  int v13 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)",Max Memory File Count:", 23);
  uint64_t v14 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)",file size:", 11);
  uint64_t v15 = (void *)std::ostream::operator<<();
  xpc_object_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", [header info]", 15);
  TraceFileCollection::HeaderOptions::desc((uint64_t *)__p, this);
  if ((v21 & 0x80u) == 0) {
    unsigned int v17 = __p;
  }
  else {
    unsigned int v17 = (void **)__p[0];
  }
  if ((v21 & 0x80u) == 0) {
    uint64_t v18 = v21;
  }
  else {
    uint64_t v18 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
  if ((char)v21 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str();
  *(void *)&v22[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v22 + *(void *)(*(void *)&v22[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  *((void *)&v22[0] + 1) = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v24) < 0) {
    operator delete(v23[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x24C58B5B0](v26);
}

void sub_248B44658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    std::ostringstream::~ostringstream((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C340] + 64;
  *(void *)(a1 + 112) = MEMORY[0x263F8C340] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2C8] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2C8] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  std::string::size_type v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x263F8C340] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_248B44814(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x24C58B5B0](v1);
  _Unwind_Resume(a1);
}

uint64_t TraceFileCollection::HeaderOptions::desc(TraceFileCollection::HeaderOptions *this)
{
  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  void v17[7] = v2;
  uint64_t v17[8] = v2;
  v17[5] = v2;
  void v17[6] = v2;
  v17[3] = v2;
  v17[4] = v2;
  v17[1] = v2;
  v17[2] = v2;
  long long v16 = v2;
  v17[0] = v2;
  *(_OWORD *)std::string __p = v2;
  long long v15 = v2;
  void v13[2] = v2;
  v13[3] = v2;
  v13[0] = v2;
  v13[1] = v2;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"create file:", 12);
  uint64_t v3 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)",append to each log file:", 25);
  uint64_t v4 = (void *)std::ostream::operator<<();
  std::string::size_type v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)",file name:", 11);
  uint64_t v8 = *((void *)this + 1);
  long long v7 = (char *)this + 8;
  uint64_t v6 = v8;
  int v9 = v7[23];
  if (v9 >= 0) {
    uint64_t v10 = (uint64_t)v7;
  }
  else {
    uint64_t v10 = v6;
  }
  if (v9 >= 0) {
    uint64_t v11 = v7[23];
  }
  else {
    uint64_t v11 = *((void *)v7 + 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v10, v11);
  std::stringbuf::str();
  *(void *)&v13[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v13 + *(void *)(*(void *)&v13[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  *((void *)&v13[0] + 1) = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v15) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x24C58B5B0](v17);
}

void sub_248B44A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)a1 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x24C58B5B0](a1 + 112);
  return a1;
}

uint64_t ctu::Loggable<TraceFileCollection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x270F97428](a1 + 8);
}

double ctu::Loggable<TraceFileCollection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 16) = 0x10AAAAAAAAAAAA00;
  double result = *(double *)"trace.collection";
  *(_OWORD *)a1 = *(_OWORD *)"trace.collection";
  return result;
}

uint64_t ctu::Loggable<TraceFileCollection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x270F978E0](a1 + 8);
}

void TraceFileCollection::HeaderOptions::~HeaderOptions(TraceFileCollection::HeaderOptions *this)
{
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void *ctu::Loggable<TraceFileCollection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_26FCC9110;
  MEMORY[0x24C58AF50](a1 + 1);
  return a1;
}

void ctu::Loggable<TraceFileCollection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_26FCC9110;
  MEMORY[0x24C58AF50](a1 + 1);
  operator delete(a1);
}

void std::__shared_ptr_pointer<TraceFileCollection *,std::shared_ptr<TraceFileCollection> ctu::SharedSynchronizable<TraceFileCollection>::make_shared_ptr<TraceFileCollection>(TraceFileCollection*)::{lambda(TraceFileCollection *)#1},std::allocator<TraceFileCollection>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<TraceFileCollection *,std::shared_ptr<TraceFileCollection> ctu::SharedSynchronizable<TraceFileCollection>::make_shared_ptr<TraceFileCollection>(TraceFileCollection*)::{lambda(TraceFileCollection *)#1},std::allocator<TraceFileCollection>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<TraceFileCollection *,std::shared_ptr<TraceFileCollection> ctu::SharedSynchronizable<TraceFileCollection>::make_shared_ptr<TraceFileCollection>(TraceFileCollection*)::{lambda(TraceFileCollection *)#1},std::allocator<TraceFileCollection>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI19TraceFileCollectionE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI19TraceFileCollectionE15make_shared_ptrIS1_EENSt3__110share"
                                "d_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI19TraceFileCollectionE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI19TraceFileCollectionE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<TraceFileCollection> ctu::SharedSynchronizable<TraceFileCollection>::make_shared_ptr<TraceFileCollection>(TraceFileCollection*)::{lambda(TraceFileCollection*)#1}::operator() const(TraceFileCollection*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ctu::SharedLoggable<TraceFileCollection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_26FCC9110;
  MEMORY[0x24C58AF50](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  operator delete(a1);
}

void *___ZNK3ctu20SharedSynchronizableI19TraceFileCollectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void CFDataAppendBytes(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length)
{
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x270EE47E0](allocator, capacity);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x270EE4808](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x270EE4820](theData);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return (UInt8 *)MEMORY[0x270EE4830](theData);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x270EE4948]();
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x270EE4A30](cf);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x270EE4E10](cf);
}

uint64_t TelephonyBasebandCreateController()
{
  return MEMORY[0x270F967E0]();
}

uint64_t TelephonyBasebandPCITransportCreate()
{
  return MEMORY[0x270F964F0]();
}

uint64_t TelephonyBasebandPCITransportInitParameters()
{
  return MEMORY[0x270F964F8]();
}

uint64_t TelephonyUtilTransportFree()
{
  return MEMORY[0x270F97228]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x270ED7CD8](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t GetOsLogContext(void)
{
  return MEMORY[0x270F0CE58]();
}

uint64_t capabilities::abs::supportsETSProtocol(capabilities::abs *this)
{
  return MEMORY[0x270F96B68](this);
}

uint64_t capabilities::abs::traceTransportTimeoutScalingFactor(capabilities::abs *this)
{
  return MEMORY[0x270F96BF0](this);
}

uint64_t capabilities::abs::shouldUseMinBasebandTransportIOReadSize(capabilities::abs *this)
{
  return MEMORY[0x270F96C10](this);
}

uint64_t capabilities::abs::shouldUseMinBasebandTransportIOReadCount(capabilities::abs *this)
{
  return MEMORY[0x270F96C20](this);
}

uint64_t capabilities::ipc::supportsPCI(capabilities::ipc *this)
{
  return MEMORY[0x270F96C30](this);
}

uint64_t capabilities::radio::firmwarePrefix(capabilities::radio *this)
{
  return MEMORY[0x270F96CD0](this);
}

uint64_t capabilities::radio::ice(capabilities::radio *this)
{
  return MEMORY[0x270F96D18](this);
}

uint64_t capabilities::radio::vendor(capabilities::radio *this)
{
  return MEMORY[0x270F96D28](this);
}

uint64_t capabilities::radio::maverick(capabilities::radio *this)
{
  return MEMORY[0x270F96D38](this);
}

uint64_t capabilities::radio::mav20Plus(capabilities::radio *this)
{
  return MEMORY[0x270F96D40](this);
}

uint64_t CommandDriverFactory::create_default_global(CommandDriverFactory *this)
{
  return MEMORY[0x270F91640](this);
}

uint64_t ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase()
{
  return MEMORY[0x270F97268]();
}

uint64_t ctu::OsLogLogger::OsLogLogger(ctu::OsLogLogger *this, const char *a2, const char *a3)
{
  return MEMORY[0x270F972A8](this, a2, a3);
}

void ctu::OsLogLogger::~OsLogLogger(ctu::OsLogLogger *this)
{
}

uint64_t ctu::OsLogContext::OsLogContext()
{
  return MEMORY[0x270F972D0]();
}

uint64_t ctu::OsLogContext::OsLogContext(ctu::OsLogContext *this, const char *a2, const char *a3)
{
  return MEMORY[0x270F972D8](this, a2, a3);
}

void ctu::OsLogContext::~OsLogContext(ctu::OsLogContext *this)
{
}

uint64_t ctu::TrackedLogger::registerLoggerToServer()
{
  return MEMORY[0x270F97398]();
}

uint64_t ctu::LogMessageBuffer::createWithFormat(ctu::LogMessageBuffer *this, const char *a2, ...)
{
  return MEMORY[0x270F973F8](this, a2);
}

void ctu::LogMessageBuffer::~LogMessageBuffer(ctu::LogMessageBuffer *this)
{
}

uint64_t ctu::LoggerCommonBase::LoggerCommonBase()
{
  return MEMORY[0x270F97430]();
}

{
  return MEMORY[0x270F97438]();
}

{
  return MEMORY[0x270F97440]();
}

uint64_t ctu::XpcJetsamAssertion::createActivity()
{
  return MEMORY[0x270F97460]();
}

uint64_t ctu::XpcJetsamAssertion::create_default_global(ctu::XpcJetsamAssertion *this)
{
  return MEMORY[0x270F97468](this);
}

uint64_t ctu::cf::MakeCFString::MakeCFString(ctu::cf::MakeCFString *this, const char *a2)
{
  return MEMORY[0x270F974F0](this, a2);
}

void ctu::cf::MakeCFString::~MakeCFString(ctu::cf::MakeCFString *this)
{
}

uint64_t ctu::cf::dict_adapter::dict_adapter(ctu::cf::dict_adapter *this, const __CFDictionary *a2)
{
  return MEMORY[0x270F97518](this, a2);
}

void ctu::cf::dict_adapter::~dict_adapter(ctu::cf::dict_adapter *this)
{
}

uint64_t ctu::cf::plist_adapter::plist_adapter(ctu::cf::plist_adapter *this, const __CFString *a2, const __CFString *a3)
{
  return MEMORY[0x270F97530](this, a2, a3);
}

void ctu::cf::plist_adapter::~plist_adapter(ctu::cf::plist_adapter *this)
{
}

uint64_t ctu::Gestalt::create_default_global(ctu::Gestalt *this)
{
  return MEMORY[0x270F976E8](this);
}

uint64_t ctu::tokenize()
{
  return MEMORY[0x270F97708]();
}

uint64_t ctu::LogServer::setEnabled(ctu::LogServer *this)
{
  return MEMORY[0x270F97710](this);
}

uint64_t ctu::LogServer::start(ctu::LogServer *this)
{
  return MEMORY[0x270F97728](this);
}

uint64_t ctu::LogServer::create()
{
  return MEMORY[0x270F97730]();
}

uint64_t ctu::LogServer::addWriter()
{
  return MEMORY[0x270F97738]();
}

uint64_t ctu::cf_to_xpc(ctu *this, const void *a2)
{
  return MEMORY[0x270F97778](this, a2);
}

uint64_t ctu::xpc_to_cf(ctu *this, void *a2)
{
  return MEMORY[0x270F97790](this, a2);
}

uint64_t AriMsg::GetBufCtx(AriMsg *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8CD80](this, a2);
}

uint64_t AriHost::StartStream()
{
  return MEMORY[0x270F90250]();
}

uint64_t AriHost::RegisterClient(AriHost *this, const char *a2, int *a3, dispatch_queue_s *a4)
{
  return MEMORY[0x270F90268](this, a2, a3, a4);
}

uint64_t AriHost::DeregisterClient(AriHost *this)
{
  return MEMORY[0x270F90280](this);
}

uint64_t AriHost::ReRegisterClient()
{
  return MEMORY[0x270F90288]();
}

uint64_t AriHost::SetRTEventHandler()
{
  return MEMORY[0x270F90298]();
}

uint64_t AriHost::Send()
{
  return MEMORY[0x270F902B0]();
}

uint64_t AriHost::EndStream(AriHost *this)
{
  return MEMORY[0x270F902C8](this);
}

uint64_t ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog()
{
  return MEMORY[0x270F97838]();
}

uint64_t ctu::LoggerCommonBase::getLogDomain(ctu::LoggerCommonBase *this)
{
  return MEMORY[0x270F978D8](this);
}

uint64_t ctu::cf::map_adapter::getString()
{
  return MEMORY[0x270F97920]();
}

uint64_t xpc::object::to_string(xpc::object *this)
{
  return MEMORY[0x270F97948](this);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x270F98268]();
}

std::string *__cdecl std::locale::name(std::string *__return_ptr retstr, const std::locale *this)
{
  return (std::string *)MEMORY[0x270F982D8](retstr, this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x270F982E8](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x270F982F8](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x270F98330](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x270F983B0](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x270F98428](this);
}

std::regex_error *__cdecl std::regex_error::regex_error(std::regex_error *this, std::regex_constants::error_type __ecode)
{
  return (std::regex_error *)MEMORY[0x270F98440](this, *(void *)&__ecode);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x270F98458](__n);
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F98480](this, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F98498](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984A0](this, __s, __n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F984B8](this, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F984E0](this, __pos, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984E8](this, __pos, __s, __n);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x270F98560](this, __str);
}

std::string *__cdecl std::string::operator=(std::string *this, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x270F98568](this, __c);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x270F98638]();
}

uint64_t std::filebuf::close()
{
  return MEMORY[0x270F98640]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x270F98650]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x270F98658]();
}

uint64_t std::istream::peek()
{
  return MEMORY[0x270F98670]();
}

uint64_t std::istream::read()
{
  return MEMORY[0x270F98678]();
}

uint64_t std::istream::seekg()
{
  return MEMORY[0x270F98690]();
}

uint64_t std::istream::tellg()
{
  return MEMORY[0x270F98698]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x270F986B0]();
}

uint64_t std::istream::getline()
{
  return MEMORY[0x270F986B8]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x270F986D0]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x270F98740]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x270F98748]();
}

uint64_t std::ostream::write()
{
  return MEMORY[0x270F98750]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x270F98758]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x270F98760]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x270F98770]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x270F98788]();
}

{
  return MEMORY[0x270F987A8]();
}

{
  return MEMORY[0x270F987B0]();
}

{
  return MEMORY[0x270F987B8]();
}

{
  return MEMORY[0x270F987D8]();
}

{
  return MEMORY[0x270F987E0]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x270F98870]();
}

uint64_t std::ofstream::open()
{
  return MEMORY[0x270F98878]();
}

std::regex_traits<char>::char_class_type std::__get_classname(const char *__s, BOOL __icase)
{
  return MEMORY[0x270F98890](__s, __icase);
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x270F988A8]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x270F988B0]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x270F989E8](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

std::string *__cdecl std::__get_collation_name(std::string *__return_ptr retstr, const char *__s)
{
  return (std::string *)MEMORY[0x270F98A00](retstr, __s);
}

uint64_t std::stol(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x270F98B80](__str, __idx, *(void *)&__base);
}

void std::mutex::lock(std::mutex *this)
{
}

void std::mutex::unlock(std::mutex *this)
{
}

void std::mutex::~mutex(std::mutex *this)
{
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x270F98C70](this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return (std::locale *)MEMORY[0x270F98C78](this);
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x270F98DE8]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x270F98E10](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x270F98E30](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x270F98E38]();
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete[](void *__p)
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void *__cdecl operator new[](size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x270F98EC0](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x270ED7DA0](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x270F98ED8](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x270F98F10](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

int __darwin_check_fd_set_overflow(int a1, const void *a2, int a3)
{
  return MEMORY[0x270ED7DA8](*(void *)&a1, a2, *(void *)&a3);
}

int *__error(void)
{
  return (int *)MEMORY[0x270ED7DC0]();
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x270ED7F00](*(void *)&a1);
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

int accept(int a1, sockaddr *a2, socklen_t *a3)
{
  return MEMORY[0x270ED8478](*(void *)&a1, a2, a3);
}

int bind(int a1, const sockaddr *a2, socklen_t a3)
{
  return MEMORY[0x270ED8758](*(void *)&a1, a2, *(void *)&a3);
}

void bzero(void *a1, size_t a2)
{
}

int chmod(const char *a1, mode_t a2)
{
  return MEMORY[0x270ED8EC8](a1, a2);
}

int chown(const char *a1, uid_t a2, gid_t a3)
{
  return MEMORY[0x270ED8ED0](a1, *(void *)&a2, *(void *)&a3);
}

int close(int a1)
{
  return MEMORY[0x270ED8F18](*(void *)&a1);
}

int closedir(DIR *a1)
{
  return MEMORY[0x270ED8F30](a1);
}

int connect(int a1, const sockaddr *a2, socklen_t a3)
{
  return MEMORY[0x270ED8F58](*(void *)&a1, a2, *(void *)&a3);
}

double difftime(time_t a1, time_t a2)
{
  MEMORY[0x270ED9180](a1, a2);
  return result;
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async_and_wait(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
}

void dispatch_barrier_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x270ED9318](identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x270ED9340]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x270ED9378](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_initially_inactive(dispatch_queue_attr_t attr)
{
  return (dispatch_queue_attr_t)MEMORY[0x270ED9440](attr);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x270ED9458](attr, *(void *)&qos_class, *(void *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x270ED9460](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x270ED9468](label, attr, target);
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_retain(dispatch_object_t object)
{
}

void dispatch_set_qos_class_floor(dispatch_object_t object, dispatch_qos_class_t qos_class, int relative_priority)
{
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x270ED9510](type, handle, mask, queue);
}

uintptr_t dispatch_source_get_data(dispatch_source_t source)
{
  return MEMORY[0x270ED9518](source);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x270ED95A8](when, delta);
}

int fchmod(int a1, mode_t a2)
{
  return MEMORY[0x270ED98A0](*(void *)&a1, a2);
}

int fclose(FILE *a1)
{
  return MEMORY[0x270ED98C8](a1);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x270ED98D0](*(void *)&a1, *(void *)&a2);
}

int fflush(FILE *a1)
{
  return MEMORY[0x270ED9938](a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x270ED99F0](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x270ED9A08](a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x270ED9A28](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return MEMORY[0x270ED9AC0](a1, a2, *(void *)&a3);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x270ED9AF0](*(void *)&a1, a2);
}

int fsync(int a1)
{
  return MEMORY[0x270ED9B10](*(void *)&a1);
}

uint64_t ftell(FILE *a1)
{
  return MEMORY[0x270ED9B18](a1);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x270ED9B88](__ptr, __size, __nitems, __stream);
}

hostent *__cdecl gethostbyname(const char *a1)
{
  return (hostent *)MEMORY[0x270ED9C48](a1);
}

pid_t getpid(void)
{
  return MEMORY[0x270ED9CE0]();
}

passwd *__cdecl getpwnam(const char *a1)
{
  return (passwd *)MEMORY[0x270ED9D28](a1);
}

int getsockname(int a1, sockaddr *a2, socklen_t *a3)
{
  return MEMORY[0x270ED9D88](*(void *)&a1, a2, a3);
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x270ED9D98](a1, a2);
}

int listen(int a1, int a2)
{
  return MEMORY[0x270EDA078](*(void *)&a1, *(void *)&a2);
}

tm *__cdecl localtime_r(const time_t *a1, tm *a2)
{
  return (tm *)MEMORY[0x270EDA0A0](a1, a2);
}

int lstat(const char *a1, stat *a2)
{
  return MEMORY[0x270EDA120](a1, a2);
}

malloc_zone_t *__cdecl malloc_create_zone(vm_size_t start_size, unsigned int flags)
{
  return (malloc_zone_t *)MEMORY[0x270EDA330](start_size, *(void *)&flags);
}

void malloc_destroy_zone(malloc_zone_t *zone)
{
}

void malloc_set_zone_name(malloc_zone_t *zone, const char *name)
{
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA390](size, type_id);
}

void *__cdecl malloc_type_zone_calloc(malloc_zone_t *zone, size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA3B0](zone, count, size, type_id);
}

void *__cdecl malloc_type_zone_malloc(malloc_zone_t *zone, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA3B8](zone, size, type_id);
}

void *__cdecl malloc_type_zone_memalign(malloc_zone_t *zone, size_t alignment, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA3C0](zone, alignment, size, type_id);
}

void *__cdecl malloc_type_zone_realloc(malloc_zone_t *zone, void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA3C8](zone, ptr, size, type_id);
}

void *__cdecl malloc_type_zone_valloc(malloc_zone_t *zone, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA3D0](zone, size, type_id);
}

void malloc_zone_free(malloc_zone_t *zone, void *ptr)
{
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x270EDA458](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x270EDA498](__b, *(void *)&__c, __len);
}

int mkdir(const char *a1, mode_t a2)
{
  return MEMORY[0x270EDA518](a1, a2);
}

time_t mktime(tm *a1)
{
  return MEMORY[0x270EDA588](a1);
}

BOOL notify_is_valid_token(int val)
{
  return MEMORY[0x270EDA750](*(void *)&val);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x270EDA760](name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return MEMORY[0x270EDA768](name, out_token);
}

uint32_t notify_set_state(int token, uint64_t state64)
{
  return MEMORY[0x270EDA798](*(void *)&token, state64);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x270F9A5A8]();
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x270F9A880](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x270EDA828](a1, *(void *)&a2);
}

DIR *__cdecl opendir(const char *a1)
{
  return (DIR *)MEMORY[0x270EDA858](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x270EDA9A0](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF60](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF70](a1);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x270EDB120](*(void *)&a1, a2, a3);
}

dirent *__cdecl readdir(DIR *a1)
{
  return (dirent *)MEMORY[0x270EDB128](a1);
}

ssize_t recv(int a1, void *a2, size_t a3, int a4)
{
  return MEMORY[0x270EDB190](*(void *)&a1, a2, a3, *(void *)&a4);
}

BOOL remove(const std::__fs::filesystem::path *__p, std::error_code *__ec)
{
  return MEMORY[0x270EDB1E8](__p, __ec);
}

void rename(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::error_code *__ec)
{
}

void rewind(FILE *a1)
{
}

int select(int a1, fd_set *a2, fd_set *a3, fd_set *a4, timeval *a5)
{
  return MEMORY[0x270EDB328](*(void *)&a1, a2, a3, a4, a5);
}

ssize_t send(int a1, const void *a2, size_t a3, int a4)
{
  return MEMORY[0x270EDB3B0](*(void *)&a1, a2, a3, *(void *)&a4);
}

int setsockopt(int a1, int a2, int a3, const void *a4, socklen_t a5)
{
  return MEMORY[0x270EDB440](*(void *)&a1, *(void *)&a2, *(void *)&a3, a4, *(void *)&a5);
}

void (__cdecl *__cdecl signal(int a1, void (__cdecl *a2)(int)))(int)
{
  return (void (__cdecl *)(int))MEMORY[0x270EDB4D0](*(void *)&a1, a2);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x270EDB510](__str, __size, __format);
}

int socket(int a1, int a2, int a3)
{
  return MEMORY[0x270EDB520](*(void *)&a1, *(void *)&a2, *(void *)&a3);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x270EDB568](a1, a2);
}

int statvfs(const char *a1, statvfs *a2)
{
  return MEMORY[0x270EDB578](a1, a2);
}

int strcasecmp(const char *a1, const char *a2)
{
  return MEMORY[0x270EDB590](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x270EDB5B0](__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x270EDB5D8](*(void *)&__errnum);
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  return MEMORY[0x270EDB5F0](a1, a2, a3, a4);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

char *__cdecl strptime(const char *a1, const char *a2, tm *a3)
{
  return (char *)MEMORY[0x270EDB670](a1, a2, a3);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x270EDB6D8](__str, __endptr, *(void *)&__base);
}

time_t time(time_t *a1)
{
  return MEMORY[0x270EDB930](a1);
}

int unlink(const char *a1)
{
  return MEMORY[0x270EDB9A8](a1);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x270EDB9E8](*(void *)&a1);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x270EDBC30](*(void *)&__fd, __buf, __nbyte);
}

void xpc_array_append_value(xpc_object_t xarray, xpc_object_t value)
{
}

xpc_object_t xpc_array_create(xpc_object_t *objects, size_t count)
{
  return (xpc_object_t)MEMORY[0x270EDBD18](objects, count);
}

char *__cdecl xpc_copy_description(xpc_object_t object)
{
  return (char *)MEMORY[0x270EDBF40](object);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x270EDC008](keys, values, count);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x270EDC0C0](xdict, key);
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x270EDC200](object);
}

xpc_object_t xpc_null_create(void)
{
  return (xpc_object_t)MEMORY[0x270EDC290]();
}

void xpc_release(xpc_object_t object)
{
}

xpc_object_t xpc_retain(xpc_object_t object)
{
  return (xpc_object_t)MEMORY[0x270EDC2B8](object);
}

xpc_object_t xpc_string_create(const char *string)
{
  return (xpc_object_t)MEMORY[0x270EDC3D0](string);
}